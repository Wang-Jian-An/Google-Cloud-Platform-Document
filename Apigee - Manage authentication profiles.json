{"title": "Apigee - Manage authentication profiles", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Manage authentication profiles\n**Announcement:** Application Integration is now available for your Google Cloud project. You can now use both Apigee Integration and Application Integration within the same Google Cloud project. [Learn more](/apigee/docs/api-platform/integration/using-application-integration)\nThe tasks in your Apigee Integration may require connection to an external application, service, or data source. An authentication profile lets you configure and store the authentication details for the connection in Apigee Integration. You can configure the task to use the stored authentication profile. Creating an authentication profile is a one-time activity, and you can reuse the same profile in multiple integrations.\n", "content": "## Create OAuth 2.0 client ID\nA client ID is used to identify a single application to Google's OAuth servers. If your application runs on multiple platforms, then each will need its own client ID. To use OAuth 2.0 in your application, you need an OAuth 2.0 client ID, which your application uses when requesting an OAuth 2.0 access token.\nTo create an OAuth 2.0 client ID, do the following steps:\n- In the Google Cloud console, go to **APIs & Services > Credentials** . [Go to Credentials](https://console.cloud.google.com/apis/credentials) \n- Click **+ Create Credentials** and select **OAuth client ID** from the list of available options.The **Create OAuth client ID** page appears.\n- **Appication type:** Select **Web Application** from the drop-down list.\n- **Name:** Enter a name for your OAuth 2.0 client to identify the client in the Cloud console.\n- Under **Authorized redirect URIs** , click **+Add URI** and enter the following:```\nhttps://apigee.google.com/organizations/GOOGLE_CLOUD_PROJECT_NAME/integrations/callback/locations/AUTH_PROFILE_REGION\n```\n- Click **Create** .An OAuth 2.0 client ID is created successfully.## Create a new authentication profile\nTo create a new authentication profile, follow these steps:\n- In the [Apigee UI](https://apigee.google.com) , select your.\n- Click **Develop > Integrations** .\n- Select an existing integration for which you want to create the authentication profile.This opens the integration in the .\n- In the integration editor toolbar, clicklock( **Manage Authentication Profiles** ).The **Authentication Profiles** page appears.\n- Select a **Region** for the authentication profile using the drop-down menu in the **Authentication Profiles** page.\n- Click **Create** and enter the following details:- **Authentication profile name** : Enter the name of the authentication profile to be displayed in the integration editor.\n- **Authentication profile description** : Enter a description for the authentication profile.\n- **Authentication profile visibility** : Select one of the following profile visibility options:- **Visible to all the users in the client** : The authentication profile created is available to all users in the organization. **Note:** Authentication profiles that are visible to all users in the client are shared across your Google Cloud project and are visible to all the project members. Therefore, don't include any sensitive information, such as personal credentials in these profiles.\n- **Only visible to you** : The authentication profile created is not visible to any other users in the organization.\n- **Authentication type** : Select the authentication type from the drop-down list and enter the required details. Based on your selection, the dialog displays additional fields required for the authentication credentials. You can select any of the following authentication types:- [Auth token](#auth-token) \n- [Google OIDC ID Token](#googleOIDC) \n- [JSON Web Token (JWT)](#jwt) \n- [OAuth 2.0 authorization code](#oauth2-code) \n- [OAuth 2.0 client credentials](#oauth2-client) \n- [OAuth 2.0 resource owner password credentials](#oauth2-owner) \n- [SSL/TLS client certification only](#client-certificate) \n- [Service account](#service-account) \n- <li><a href=\"#username-pwd\">Username and password</a></li>\n- Click **Save** .\nAfter you save, the new authentication profile is available as an option in the **Authorization profile to use** drop-down of any task requiring authentication.\n. If you have not created an authentication profile prior to configuring an integration task, you can access the profile creation dialog by selecting **+ Add new authentication profile** from the **Authorization profile to use** drop-down in the task configuration pane. Follow the preceding steps to create a new authentication profile.\n## Edit authentication profiles\nTo edit an authentication profile, follow these steps:\n- In the [Apigee UI](https://apigee.google.com) , select your.\n- Click **Develop > Integrations** .\n- Select an existing integration for which you want to create the authentication profile.This opens the integration in the .\n- In the integration editor toolbar, clicklock( **Manage Authentication Profiles** ).The **Authentication Profiles** page appears.\n- Select a **Region** for the authentication profile using the drop-down menu in the **Authentication Profiles** page.\n- Clickmore_vert(Actions menu) and click **Edit** .The **Authentication Profiles** dialog appears.\n- Edit the details and click **Save** .\n## Delete authentication profiles\nTo delete an authentication profile, follow these steps:\n- In the [Apigee UI](https://apigee.google.com) , select your.\n- Click **Develop > Integrations** .\n- Select an existing integration for which you want to create the authentication profile.This opens the integration in the .\n- In the integration editor toolbar, clicklock( **Manage Authentication Profiles** ).The **Authentication Profiles** page appears.\n- Select a **Region** for the authentication profile using the drop-down menu in the **Authentication Profiles** page.\n- Click **Delete** .\n## Authentication types\nThe authentication type required to complete an integration task depends upon the authentication configured in the authorization server. The authorization server can be a standalone server or an API that issues credentials to the calling client. Apigee Integration supports the following authentication types:\n- [Auth token](#auth-token) \n- [Google OIDC ID Token](#googleOIDC) \n- [JSON Web Token (JWT)](#jwt) \n- [OAuth 2.0 authorization code](#oauth2-code) \n- [OAuth 2.0 client credentials](#oauth2-client) \n- [OAuth 2.0 resource owner password credentials](#oauth2-owner) \n- [SSL/TLS client certification only](#client-certificate) \n- [Service account](#service-account) \n- <li><a href=\"#username-pwd\">Username and password</a></li>\nThe following sections describe the configuration properties of the authentication types.\n### Auth token\n**Auth token**\n`Authorization`\n`Authorization:` `` `` ``\n- **Type** : Authentication type such as`Basic`,`Bearer`,  or`MAC`.\n- **Token** : Credentials for the authentication type.\nIf the authentication server requires an SSL/TLS certificate, upload the certificate and the private key.\n[Compatibility of authentication types with tasks](#compatibleTasks)\n### Google OIDC ID Token\n**Google OIDC ID Token**- **Service account** : Service account (principal) in your Google Cloud project with permission to access your API. **Note:** Assign the **Service Account Token Creator** IAM role to the`service-` `` `@gcp-sa-apigee.iam.gserviceaccount.com`service account. For more information about assigning IAM roles, see [IAM roles and permissions](/apigee/docs/api-platform/integration/integrations-access-permissions) .\n- **Audience** : The audience for the OIDC token (this identifies the recipients that the JWT is intended for). For example,is the audience for the **Cloud Function** task.\n[Compatibility of authentication types with tasks](#compatibleTasks)\n### JSON Web Token (JWT)\n**JWT**\n[RFC7519](https://tools.ietf.org/html/rfc7519)\n- **JWT header** : Algorithm used to generate the signature. **Note** : You can only specify the HS256 algorithm.\n- **JWT payload** : A set of claims. You can use registered, public, or custom claims.\n- **Secret** : Shared key between the client and the authentication server.\nIf the authentication server requires an SSL certificate, upload the certificate and the private key using the file picker. Enter the private key passphrase .\n[Compatibility of authentication types with tasks](#compatibleTasks)\n### OAuth 2.0 authorization code\nThe **OAuth 2.0 authorization code** authentication type uses an `OAuth 2.0` authorization token for authentication. To configure this authentication type, set the following properties:\n- **Authentication endpoint** : Endpoint to the application's authentication endpoint. You will be redirected to this URL to review the access permissions for the application. The token will only be generated after access is granted.\n- **Token endpoint** : Endpoint that grants or refreshes the access token.\n- **Client ID** : A unique string provided by the authentication server to the registered client. The **Client ID** is not a secret, and it is exposed to the resource owner. Use this field along with a client secret.\n- **Secret** : Shared secret key between the client (integration) and the authentication server.\n- **Scope(s)** : Scope of the access token. Scopes let you specify access permissions for users. You can specify multiple scopes separated by a single space (\" \"). For more information, see [OAuth 2.0 Scopes for Google APIs](https://developers.google.com/identity/protocols/oauth2/scopes) .\nIf the authentication server requires an SSL certificate, upload the certificate and the private key using the file picker. Enter the private key passphrase in the available field, if required.\n[Compatibility of authentication types with tasks](#compatibleTasks)\n### OAuth 2.0 client credentials\nThe **OAuth 2.0 client credentials** authentication type uses an `OAuth 2.0` authorization token for authentication. This authentication first requests an access token using the client credentials and then uses the token to access the protected resources. To configure this authentication type, set the following properties:\n- **Token endpoint** : Endpoint that grants or refreshes the access token.\n- **Client ID** : A unique string provided by the authentication server to the registered client. The **Client ID** is not a secret, and it is exposed to the resource owner. Use  this field along with a client secret.\n- **Secret** : Shared secret key between the client (integration) and the authentication server.\n- **Scope(s)** : Scope of the access token. Scopes let you specify access permissions for users. You can specify multiple scopes separated by a single space (\" \"). For more information, see [OAuth 2.0 Scopes for Google APIs](https://developers.google.com/identity/protocols/oauth2/scopes) .\n- **Request types** : Mechanisms to send the request parameters to the  authentication server for fetching the access token. You can specify any of the following  request types:- **Encoder header** : Encodes the`CLIENT ID`and`CLIENT SECRET`in`Base64`format and sends the encoded string in the  HTTP authorization header. The remaining request parameters are sent in the HTTP request body.\n- **Query parameters** : Sends the request parameters in a query string.\n- **Request body** : Sends the request parameters by using the`application/x-www-form-urlencoded`content type and`UTF-8`charset in the`entity-body`of the HTTP request.\n- **Unspecified** \n- **Token parameters** : Request parameters required to get the token. Specify  the values in key-value format where`Key`is the parameter name and`Value`is the corresponding parameter value.\nIf the authentication server requires an SSL certificate, upload the certificate and the private key using the file picker. Enter the private key passphrase in the available field, if required.\n[Compatibility of authentication types with tasks](#compatibleTasks)\n### OAuth 2.0 resource owner password credentials\nThe **OAuth 2.0 resource owner password credentials** authentication type uses an `OAuth 2.0` authorization token for authentication. This authentication first requests an access token using the resource owner credentials (Username and Password) and then uses the token to access the protected resources. To configure this authentication type, set the following properties:\n- **Token endpoint** : Endpoint that grants or refreshes the access token.\n- **Client ID** : A unique string provided by the authentication server to the registered client. The **Client ID** is not a secret, and it is exposed to the resource owner. Use  this field along with a client secret.\n- **Secret** : Shared secret key between the client (integration) and the authentication server.\n- **Scope(s)** : Scope of the access token. Scopes let you specify access permissions for users. You can specify multiple scopes separated by a single space (\" \"). For more information, see [OAuth 2.0 Scopes for Google APIs](https://developers.google.com/identity/protocols/oauth2/scopes) .\n- **Username** : Username of the resource owner.\n- **Password** : User password.\n- **Request types** : Mechanisms to send the request parameters to the  authentication server for fetching the access token. You can specify any of the following  request types:- **Encoder header** : Encodes the`CLIENT ID`and`CLIENT SECRET`in`Base64`format and sends the encoded string in the  HTTP authorization header. Sends the remaining request parameters in the HTTP request body.\n- **Query parameters** : Sends the request parameters in a query string.\n- **Request body** : Sends the request parameters by using the`application/x-www-form-urlencoded`content type and`UTF-8`charset in the`entity-body`of the HTTP request.\n- **Token parameters** : Request parameters required to get the token. Specify  the values in key-value format where`Key`is the parameter name and`Value`is the corresponding parameter value.\nIf the authentication server requires an SSL certificate, upload the certificate and the private key using the file picker. Enter the private key passphrase in the available field, if required.\n[Compatibility of authentication types with tasks](#compatibleTasks)\n### SSL/TLS client certificate only\n**SSL/TLS client certificate only**\n- **SSL certificate** : Certificate encoded in PEM format.\n- **Private key** : Certificate's private key file encoded in PEM format.If the private key requires a `passphrase` , enter the **Private key passphrase** .\n[Compatibility of authentication types with tasks](#compatibleTasks)\n### Service account\nThe **Service account** authentication type uses the credentials of a Google Cloud project's service account for authentication. To configure this authentication type, set the following properties:\n- **Service account** : Service account (principal) in your Google Cloud project with permission to access  your API. **Note:** Assign the **Service Account Token Creator** IAM role to  the`service-` `` `@gcp-sa-apigee.iam.gserviceaccount.com`service account. For more information about assigning IAM roles, see [IAM roles and permissions](/apigee/docs/api-platform/integration/integrations-access-permissions) .\n- **Scope(s)** : Scope of the access permissions granted to users. You can specify multiple scopes  separated by a single space (\" \"). For more information, see [OAuth 2.0 Scopes for Google APIs](https://developers.google.com/identity/protocols/oauth2/scopes) .\nTo learn about best practices for creating and managing service accounts, read the [Best practices for working with service accounts documentation](/iam/docs/best-practices-service-accounts) .\nIf the authentication server requires an SSL certificate, upload the certificate and the private key using the file picker. Enter the private key passphrase in the available field, if required.\n[Compatibility of authentication types with tasks](#compatibleTasks)\n## Compatibility of authentication types with tasks\nThe following table lists the authentication types and the corresponding compatible tasks. You can use this information to decide which authentication type to use for a task.\n| Authentication type       | Compatible tasks and triggers             |\n|:----------------------------------------------|:------------------------------------------------------------------------------|\n| Auth token         | Call REST Endpoint               |\n| Google OIDC ID Token       | Call REST Endpoint Cloud Function            |\n| JSON Web Token (JWT)       | Call REST Endpoint               |\n| OAuth 2.0 authorization code     | Call REST Endpoint Run Apps Script Cloud Functions task      |\n| OAuth 2.0 client credentials     | Call REST Endpoint               |\n| OAuth 2.0 resource owner password credentials | Call REST Endpoint Salesforce Trigger           |\n| SSL/TLS client certificate only    | Call REST Endpoint               |\n| Service account        | Call REST Endpoint Connectors task Call Integration task Cloud Functions task |\n## Authentication rule\nIf your integration has both OAuth 2.0 profile and a user-managed service account configured, then by default the OAuth 2.0 profile is used for authentication. If neither OAuth 2.0 profile nor user-managed service account is configured, then the default service account ( `service-` `` `@gcp-sa-apigee.iam.gserviceaccount.com` ) is used. If the task does not use the default service account then the execution fails.", "guide": "Apigee"}