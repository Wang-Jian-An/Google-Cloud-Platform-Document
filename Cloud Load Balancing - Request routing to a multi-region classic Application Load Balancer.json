{"title": "Cloud Load Balancing - Request routing to a multi-region classic Application Load Balancer", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Cloud Load Balancing - Request routing to a multi-region classic Application Load Balancer\nThis guide demonstrates how to create a Google Cloud HTTPS load balancer that:\n- Selects backend services based on the request URL paths.\n- Routes requests to backends that are close to the clients (multi-region load balancing).\nBefore you start, make sure that you are familiar with [External Application Load Balancer](/load-balancing/docs/https) concepts.\nFor a simplified example, see [Setting up anexternal Application Load Balancer with a Compute Enginebackend](/load-balancing/docs/https/ext-https-lb-simple) . For advanced routing, such as HTTP rewrites and redirects, see [Traffic managementfor external Application Load Balancers](/load-balancing/docs/https/traffic-management) .\n", "content": "## Overview\nThis guide provides instructions for creating a load balancer that directs traffic based on the path in the request URL and balances traffic across multiple regions. You create eight total Compute Engine instances in US (in zone us-central1-b) and EU (in zone eu-west1-b) regions. You then create a load balancer that routes traffic to these instances.\nAfter you complete the instructions, your load balancer is configured as follows:\n- Traffic containing a URL path that starts with`/video`is routed to one backend service.\n- Traffic with a URL path that doesn't match this pattern is routed to another backend service.\nIn this how-to document, you create the configuration that is illustrated in the following diagram:\nThe sequence of events in the diagram is:\n- A client accesses the`https://www.example.com/video/concert`URL, sending a content request to the external IP address defined in the forwarding rule. The request can use IPv4 or IPv6; there are forwarding rules for both protocols.\n- A forwarding rule directs the request to the target HTTPS proxy.\n- The target proxy uses the rules set out in the URL map to determine which backend service receives the request. A request that contains`/video`, like`https://www.example.com/video/concert`, is sent to`video-backend-service`. Any other URL path is sent to the default service,`web-backend-service`.\n- The load balancer determines which of the backend service's instance groups should serve the request, based on their loading and proximity to the client, and directs the request to an instance in that group.\n- The instance serves the content requested by each user. The`video`instances serve video content, while the`www`instances serve all other content.\nIn this example, the load balancer accepts HTTPS requests from clients and proxies these requests as HTTP to the backends. You can also configure a load balancer to accept HTTP requests, as well as to use HTTPS when proxying requests to backends.\n## Before you begin\nThese instructions require a [project](/docs/overview#projects) . If you do not already have a project, set one up now. These instructions guide you through creating a [custom mode Virtual Private Cloud (VPC) network](/vpc/docs/vpc) . You must also set up custom firewall rules to allow traffic to reach the instances.\nIf you prefer to work from the command line, install the `gcloud` command-line tool. See [gcloud Overview](/sdk/gcloud) for conceptual and installation information about the tool.\n**Note:** If you haven't run the Google Cloud CLI previously, first run [gcloud init](/sdk/gcloud/reference/init) to initialize your gcloud directory.\n## Permissions\nTo complete the steps in this guide, you must have permission to create Compute Engine instances in a project. You must have either a project [owner or editor role](/iam/docs/understanding-roles#basic) , or you must have the following [Compute Engine IAM roles](/compute/docs/access/iam) :\n| Task       | Required Role   |\n|:--------------------------------|:-----------------------|\n| Create instances    | Compute Instance Admin |\n| Add and remove firewall rules | Security Admin   |\n| Create load balancer components | Network Admin   |\n| Create a project (Optional)  | Project Creator  |\nFor more information, see the following guides:\n- [Access control](/load-balancing/docs/access-control) \n- [IAM Conditions](/load-balancing/docs/access-control/iam-conditions) ## Setup\n### Optional: Creating a new project\nWe recommend that users with the `resourcemanager.projects.create` permission create a new project before following the rest of this how-to. This simplifies cleanup at the end of the guide.\n### Configuring a network and subnets\nIn this example, use the following VPC network, regions, and subnets:\n- Network: The network is a [custom mode VPCnetwork](/vpc/docs/vpc#subnet-ranges) named `lb-network` .\n- Subnets in two different regions:- `us-subnet`uses`10.1.10.0/24`for its primary IP range and is located in the`us-central1`region.\n- `eu-subnet`uses`10.1.11.0/24`for its primary IP range and is located in the`europe-west1`region.To create the example network and subnet, follow these steps:\n- In the Google Cloud console, go to the **VPC networks** page. [Go to VPC networks](https://console.cloud.google.com/networking/networks/list) \n- Click **Create VPC network** .\n- Enter a **Name** of `lb-network` .\n- In the **Subnets** section, create the first subnet:- Set the **Subnet creation mode** to **Custom** .\n- In the **New subnet** section, enter the following information:- **Name** :`us-subnet`\n- **Region** :`us-central1`\n- **IP address range** :`10.1.10.0/24`\n- Click **Done** .\n- Still in the **Subnets** section, click **Add subnet** and create the second subnet:- In the **New subnet** section, enter the following information:- **Name** :`eu-subnet`\n- **Region** :`europe-west1`\n- **IP address range** :`10.1.11.0/24`\n- Click **Done** .\n- Click **Create** .\n- Create the custom VPC network:```\ngcloud compute networks create lb-network --subnet-mode=custom\n```\n- Create the `us-subnet` :```\ngcloud compute networks subnets create us-subnet \\\n --network=lb-network \\\n --range=10.1.10.0/24 \\\n --region=us-central1\n```\n- Create the `eu-subnet` :```\ngcloud compute networks subnets create eu-subnet \\\n --network=lb-network \\\n --range=10.1.11.0/24 \\\n --region=europe-west1\n```\n### Configuring firewall rules\nThe [default deny ingress](/vpc/docs/firewalls#default_firewall_rules) rule blocks incoming traffic to the backend instances, including traffic from the load balancer and Google Cloud health checking systems. You must create new firewall rules to override the default rule and allow traffic to reach your instances.\nIn this example, you create the following firewall rules:\n- `fw-allow-ssh` : An ingress rule, applicable to the instances being load balanced, that allows incoming SSH connectivity on TCP port 22 from any address. You can choose a more restrictive source IP range for this rule; for example, you can specify just the IP ranges of the system from which you will initiating SSH sessions. This example uses the target tag `allow-ssh` to identify the backend VMs to which it should apply.\n- `fw-allow-health-check-and-proxy` : An ingress rule, applicable to the instances being load balanced, that allows traffic from the load balancer and Google Cloud health checking systems ( `130.211.0.0/22` and `35.191.0.0/16` ). This example uses the target tag `allow-health-check` to identify the backend VMs to which it should apply.\n- In the Google Cloud console, go to the **Firewall policies** page. [Go to Firewall policies](https://console.cloud.google.com/net-security/firewall-manager/firewall-policies/list) \n- Click **Create firewall rule** to create the first firewall rule:- Enter a **Name** of`fw-allow-ssh`.\n- Under **Network** , select`lb-network`.\n- Under **Targets** , select **Specified target tags** .\n- Populate the **Target tags** field with`allow-ssh`.\n- Set **Source filter** to **IPv4 ranges** .\n- Set **Source IPv4 ranges** to`0.0.0.0/0`.\n- Under **Protocols and ports** , select **Specified protocols and ports** .\n- Select the **TCP** checkbox and enter`22`for the port number.\n- Click **Create** .\n- Click **Create firewall rule** to create the second firewall rule:- Enter a **Name** of`fw-allow-health-check-and-proxy`.\n- Under **Network** , select`lb-network`.\n- Under **Targets** , select **Specified target tags** .\n- Populate the **Target tags** field with`allow-health-check`.\n- Set **Source filter** to **IPv4 ranges** .\n- Set **Source IPv4 ranges** to`130.211.0.0/22`and`35.191.0.0/16`.\n- Under **Protocols and ports** , select **Specified protocols and ports** .\n- Select the **TCP** checkbox and enter`80,443`for the port numbers.\n- Click **Create** .- Create the `fw-allow-ssh` firewall rule to allow SSH connectivity to VMs with the network tag `allow-ssh` . When you omit `source-ranges` , Google Cloud [interprets the rule to mean anysource](/vpc/docs/firewalls#gcp_firewall_use_cases) .```\ngcloud compute firewall-rules create fw-allow-ssh \\\n --network=lb-network \\\n --action=allow \\\n --direction=ingress \\\n --target-tags=allow-ssh \\\n --rules=tcp:22\n```\n- Create the `fw-allow-health-check-and-proxy` rule to allow the load balancer and Google Cloud health checks to communicate with backend instances on TCP port `80` and `443` :```\ngcloud compute firewall-rules create fw-allow-health-check-and-proxy \\\n --network=lb-network \\\n --action=allow \\\n --direction=ingress \\\n --target-tags=allow-health-check \\\n --source-ranges=130.211.0.0/22,35.191.0.0/16 \\\n --rules=tcp:80,tcp:443\n```\n### Creating instances\nTo set up a load balancer with a Compute Engine backend, your VMs need to be in instance groups. This guide describes how to create a managed instance group with Linux VMs that have Apache running.\nThe managed instance group provides VMs running the backend servers of an external HTTPS load balancer. For demonstration purposes, backends serve their own hostnames.\nIn this example, you create eight virtual machine instances (VMs): four to serve video content and four to serve all other content. You use a [startupscript](/compute/docs/startupscript) to install Apache web server software with a unique home page for each instance. Note that you can use any web server on your VMs; Apache is installed in this example as a convenience.\nCreate an instance template.- In the Google Cloud console, go to the **Instance templates** page. [Go to Instance templates](https://console.cloud.google.com/compute/instanceTemplates/list) - Click **Create instance template** .\n- For **Name** , enter`video-us-template`.\n- Ensure that the **Boot disk** is set to a Debian image, such as **Debian GNU/Linux 10 (buster)** . These instructions use commands that are only available on Debian, such as`apt-get`.\n- Click **Advanced options** .\n- Click **Networking** and configure the following fields:- For **Network tags** , enter`allow-health-check`and`allow-ssh`.\n- For **Network interfaces** , select the following:- **Network** :`lb-network`\n- **Subnet** :`us-subnet`\n- Click **Management** . Enter the following script into the **Startup script** field.```\n#! /bin/bash\napt-get update\napt-get install apache2 -y\na2ensite default-ssl\na2enmod ssl\nvm_hostname=\"$(curl -H \"Metadata-Flavor:Google\" \\\nhttp://metadata.google.internal/computeMetadata/v1/instance/name)\"\nmkdir -p /var/www/html/video\necho \"Page served from: $vm_hostname\" | \\\ntee /var/www/html/index.html /var/www/html/video/index.html\nsystemctl restart apache2\n```\n- Click **Create** .\n- Create a managed instance group. In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) - Click **Create instance group** .\n- Select **New managed instance group (stateless)** . For more information, see [Stateless or stateful MIGs](/compute/docs/instance-groups/creating-groups-of-managed-instances#stateless_or_stateful_migs) .\n- For **Name** , enter`ig-video-us`.\n- Under **Location** , select **Single zone** .\n- For **Region** , select your preferred region. This example uses`us-central1`.\n- For **Zone** , select **us-central1-b** .\n- Under **Instance template** , select`video-us-template`.\n- Under **Autoscaling mode** , select`Off:do not autoscale`.\n- Under **Maximum number of instances** , enter`2`.\n- Click **Create** .\n **Note:** Because the external Application Load Balancer is a proxy, you need to select **Allow HTTPS traffic** under **Firewall** .- Create an instance template.```\ngcloud compute instance-templates create video-us-template \\\n --region=us-central1 \\\n --network=lb-network \\\n --subnet=us-subnet \\\n --tags=allow-health-check,allow-ssh \\\n --image-family=debian-10 \\\n --image-project=debian-cloud \\\n --metadata=startup-script='#! /bin/bash\n  apt-get update\n  apt-get install apache2 -y\n  a2ensite default-ssl\n  a2enmod ssl\n  vm_hostname=\"$(curl -H \"Metadata-Flavor:Google\" \\\n  http://metadata.google.internal/computeMetadata/v1/instance/name)\"\n  mkdir -p /var/www/html/video\n  echo \"Page served from: $vm_hostname\" | \\\n  tee /var/www/html/index.html /var/www/html/video/index.html\n  systemctl restart apache2'\n```\n- Create a managed instance group based on the template.```\ngcloud compute instance-groups managed create ig-video-us \\\n --template=video-us-template --size=2 --zone=us-central1-b\n```\nRepeat this procedure four times for the four instance groups. Make sure to change the instance group name, template name, region, and zone for each instance group, as follows:\n- `ig-video-us`,`video-us-template`,`us-central1-b`(as shown in the example)\n- `ig-video-eu`,`video-eu-template`,`europe-west1-b`\n- `ig-www-us`,`www-us-template`,`us-central1-b`\n- `ig-www-eu`,`www-europe-template`,`europe-west1-b`## Adding a named port to the instance group\nFor each instance group, define an HTTP service and map a port name to the relevant port. Once configured, the load balancing service forwards traffic to the named port.\n- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of your instance group (for example `ig-video-us` ) and click **Edit Group** .\n- Click **Specify port name mapping** .\n- Click **Add item** .\n- For the port name, enter `http` . For the port number, enter `80` .\n- Click **Save** .\nRepeat this step for each instance group.\n```\ngcloud compute instance-groups unmanaged set-named-ports ig-video-us \\\n --named-ports http:80 \\\n --zone us-central1-b\n```\nbreak\n```\ngcloud compute instance-groups unmanaged set-named-ports ig-www-us \\\n --named-ports http:80 \\\n --zone us-central1-b\n```\nbreak\n```\ngcloud compute instance-groups unmanaged set-named-ports ig-video-eu \\\n --named-ports http:80 \\\n --zone europe-west1-b\n```\nbreak\n```\ngcloud compute instance-groups unmanaged set-named-ports ig-www-eu \\\n --named-ports http:80 \\\n --zone europe-west1-b\n```\n## Reserving external IP addresses\nNow that your instances are up and running, set up the services needed for load balancing. In this section, you create two [global static external IP addresses](/compute/docs/ip-addresses#externaladdresses) that your customers use to reach your load balancer.\n- In the Google Cloud console, go to the **External IP addresses** page. [Go to External IP addresses](https://console.cloud.google.com/addresses/list) \n- Click **Reserve static address** to reserve an IPv4 address.\n- Assign a **Name** of `lb-ipv4-1` .\n- Set the Network tier to **Premium** .\n- Set **IP version** to **IPv4** .\n- Set the **Type** to **Global** .\n- Click **Reserve** .\n- Click **Reserve static address** again to reserve an IPv6 address.\n- Assign a **Name** of `lb-ipv6-1` .\n- Set the Network Tier to **Premium** .\n- Set **IP version** to **IPv6** .\n- Ensure that the **Type** is set to **Global** .In this example, the load balancer uses [Premium Tier networking](/network-tiers/docs/overview#premium_tier) . A load balancer using Standard Tier networking would instead use regional IP addresses. IPv6 addresses are not available with Standard Tier.\n- Click **Reserve** .\n- Reserve an IPv4 address:```\ngcloud compute addresses create lb-ipv4-1 \\\n --ip-version=IPV4 \\\n --network-tier=PREMIUM \\\n --global\n```\n- Reserve an IPv6 address:```\ngcloud compute addresses create lb-ipv6-1 \\\n --ip-version=IPV6 \\\n --network-tier=PREMIUM \\\n --global\n```## Configuring the load balancing resources\nLoad balancer functionality involves several connected resources. In this section, you set up and connect the resources. They are as follows:\n- [Named ports](/compute/docs/instance-groups/creating-groups-of-unmanaged-instances#assign_named_ports) , which the load balancer uses to direct traffic to your instance groups.\n- A [Health check](/load-balancing/docs/health-check-concepts) , which polls your instances to see if they are healthy. The load balancer only sends traffic to healthy instances.\n- [Backend services](/load-balancing/docs/backend-service) , which keep track of capacity, session affinity, and health check status. Backend services direct requests to backend VMs or endpoints based on capacity and instance health.\n- A [URL map](/load-balancing/docs/https/url-map) , which the load balancer uses to to direct requests to specific backend services based on the host and path of the request URL.\n- An [SSL certificate resource](/load-balancing/docs/ssl-certificates) . SSL certificate resources contain SSL certificate information that the load balancer uses to terminate TLS when HTTPS clients connect to it. You can use [multiple SSL certificates](/load-balancing/docs/ssl-certificates#multiplessl) , which can be any combination of [managed or self-managed SSL certificates](/load-balancing/docs/ssl-certificates) . You must create an SSL certificate resource for each certificate you use.\n- A [target HTTPS proxy](/load-balancing/docs/target-proxies) , which the load balancer uses to associate your URL map and SSL certificates with your global forwarding rules.\n- Two [global forwarding rules](/load-balancing/docs/forwarding-rule-concepts) , one each for IPv4 and IPv6, which hold the global external IP address resources. Global forwarding rules forward the incoming request to the target proxy.\n### Naming your load balancer\n- Go to the Load balancing page in the Google Cloud console. [Create a load balancer](https://console.cloud.google.com/networking/loadbalancing/add) \n- On the **Application Load Balancer (HTTP/S)** card, click **Start configuration** .\n- Under **Internet facing or internal only** , select **From Internet to my\nVMs** .\n- Under **Global or regional** , select one of the following:- For classic Application Load Balancer, select **Classic Application Load Balancer** .\n- For global external Application Load Balancer, select **Global external Application Load Balancer** .\n- Click **Continue** .\n- For the **Name** of the load balancer, enter`web-map`.\n- Keep the window open to continue.\n### Configuring the backend service and health check for the www instancesThe load balancer requires two backend services and a health check to service both of them. In this example, the load balancer terminates HTTPS requests from the client and uses HTTP to communicate with the backends. To do this, you specify HTTP for the backend protocols and health checks.\n- Click **Backend configuration** .\n- In the **Create or select a backend service** drop-down menu, hold the mouse pointer over **Backend services** , and then select **Create a backend service** .\n- Set the **Name** of the backend service to`web-backend-service`.\n- Ensure that the **Backend type** is set to **Instance group** .\n- In the **Protocol** drop-down menu, select **HTTP** .\n- In the **Named port** field, enter`http`.\n- Under **Backends** , set **Instance group** to`ig-www-us`.\n- For traffic between the load balancer and the instances, set **Port\nnumbers** to`80`.\n- Leave the default values for the remaining fields.\n- Click **Done** at the bottom of the **New backend** window.\n- Click **Add backend** and repeat steps, but select instance group`ig-www-eu`.\n- Keep the window open to continue.\n- In the **Backend configuration** window under **Health check** , select **Create a health check** or **Create another health check** .\n- To create the HTTP health check, set the following health check parameters:- **Name** to`http-basic-check-www`\n- **Protocol** to`HTTP`\n- **Port** to`80`\n- Click **Save and Continue** .\n- Click **Create** .\n### Configuring the backend and health check for the video instances\n- Repeat the [above steps](#configure_the_backend_for_www) , but name the second backend service`video-backend-service`and assign the`ig-video-us`and`ig-video-eu`instance groups to it.\n- Follow the same steps to create a health check, but name the health check`http-basic-check-video`. Health check names must be unique.\n### Configuring host and path rulesThe host and path rules configure the load balancer's URL map resource.- In the left column of the screen, click **Host and path rules** .\n- The first row has`web-backend-service`in the right-hand column and is already populated with the default rule`Any unmatched (default)`for **Hosts** and **Paths** .\n- Ensure that there is a second row with`video-backend-service`in the right-hand column. If it does not exist, click **Add host and path rule** , and then select`video-backend-service`from the drop-down menu in the right column. Populate the other columns as follows:- Set **Hosts** to`*`.\n- In the **Paths** field:- Enter`/video`, and then press the Tab key.\n- Enter`/video/*`, and then press the Tab key.\n### Configuring the frontendThe frontend configuration section configures several resources for the load balancer, including the forwarding rules and SSL certificates. In addition, it allows you to select the protocol used between the client and the load balancer.\nIn this example, you are using HTTPS between the client and the load balancer, so you need one or more SSL certificate resources to configure the proxy. See [SSL Certificates](/load-balancing/docs/ssl-certificates) for information on how to create SSL certificate resources. We recommend using a Google-managed certificate.\n **Warning:** Do use a self-signed certificate for production purposes.- In the left panel of the **Create global external Application Load Balancer** page, click **Frontend configuration** .\n- In the **Name** field, enter`https-content-rule`.\n- In the **Protocol** field, select`HTTPS`.\n- Keep the window open to continue.\n### Configuring the IPv4 forwarding rule\n- Set **IP version** to`IPv4`.\n- In **IP address** , select`lb-ipv4-1`, which you created earlier.\n- Ensure that the **Port** is set to`443`, to allow HTTPS traffic.\n- Click the **Certificate** drop-down list.- If you already have a [self-managed SSL certificateresource](/load-balancing/docs/ssl-certificates#certificate-types) and you want to use it as the primary SSL certificate, select it from the drop-down menu.\n- Otherwise, select **Create a new certificate** .\n- Fill in a **Name** of`www-ssl-cert`.\n- Select **Upload my certificate** or **Create Google managed\ncertificate** . To create a Google-managed certificate, you must have a domain. If you do not have a domain, you can upload your own certificate for testing purposes.\n- If you selected **Upload my certificate** , complete these steps.- In the **Public key certificate** field, do one of the following:- Click the **Upload** button and select your PEM-formatted certificate file.\n- Copy and paste the contents of a PEM-formatted certificate. The contents must start with`-----BEGIN CERTIFICATE-----`and end with`-----END CERTIFICATE-----`.\n- For the **Certificate chain** field, do one of the following:- Click the **Upload** button and select your CA's certificate file. This file should include intermediate CA certificates as well as the root CA certificate.\n- Copy and paste the contents of a certificate chain. Each certificate in the chain must be PEM-formatted, starting with`-----BEGIN CERTIFICATE-----`and terminating with`-----END CERTIFICATE-----`. Google Cloud does not validate the certificate chain for you \u2014 validation is your responsibility.\n- If you omit the Certificate chain, your certificate should be signed by a publicly-trusted CA that your clients would automatically trust.\n- For the **Private key certificate** field, do one of the following:- Click the **Upload** button and select your private key. Your private key must be PEM-formatted and not protected with a passphrase.\n- Copy and paste the contents of a PEM-formatted private key. RSA private keys must start with`-----BEGIN RSA PRIVATE KEY-----`and end with`-----END RSA PRIVATE KEY-----`. ECDSA private keys must start with`-----BEGIN EC PRIVATE KEY-----`and end with`-----END EC PRIVATE KEY-----`.\n- Click **Create** .\n- If you selected **Create Google managed certificate** , enter a **Domain** .\n- To add certificate resources in addition to the primary SSL certificate resource:- Click **Add certificate** .\n- Select a certificate from the **Certificates** list or click **Create a new certificate** and follow the instructions above.\n- Under **QUIC negotiation** , select one of the following options:- **Automatic (Default)** Allows Google to control when QUIC is negotiated. Currently, when you select **Automatic** , QUIC is disabled. By selecting this option, you are allowing Google to automatically enable QUIC negotiations and HTTP/3 in the future for this load balancer. In`gcloud`and the API, this option is called`NONE`.\n- **Enabled** Allows the load balancer to negotiate QUIC with clients.\n- **Disabled** Prevents the load balancer from negotiating QUIC with clients.\n- Click **Done** .\n- Keep the window open to continue.\n### Configuring the IPv6 forwarding rule\n- Click **Add frontend IP and port** .\n- Enter a **Name** of`https-content-ipv6-rule`.\n- In the **Protocol** field, select`HTTPS`if you want to use HTTPS between the client and the load balancer. Select`HTTP`if you want HTTP between the client and the load balancer.\n- Set **IP version** to`IPv6`.\n- In **IP** , select`lb-ipv6-1`, which you created earlier.\n- The default **Port** of`443`is required.\n- If you already have an SSL certificate resource you want to use, select it from the **Certificate** drop-down menu. If not, select **Create a new certificate** .- Fill in a **Name** of`www-ssl-cert`.\n- In the appropriate fields upload your **Public key certificate** (.crt file), **Certificate chain** (.csr file), and **Private key** (.key file).\n- Click **Create** .\n- To add certificate resources in addition to the primary SSL certificate resource:- Click **Add certificate** .\n- Select a certificate from the **Certificates** list or click **Create a new certificate** and follow the instructions above.\n- Under **QUIC negotiation** , select one of the following options:- **Automatic (Default)** Allows Google to control when QUIC is negotiated. Currently, when you select **Automatic** , QUIC is disabled. By selecting this option, you are allowing Google to automatically enable QUIC negotiations and HTTP/3 in the future for this load balancer. In`gcloud`and the API, this option is called`NONE`.\n- **Enabled** Allows load balancer to negotiate QUIC with clients.\n- **Disabled** Prevents load balancer from negotiating QUIC with clients.\n- Click **Done** .\n### Reviewing and finalizing\n- In the left panel of the **Create global external Application Load Balancer** page, click **Review and finalize** .\n- Compare your settings to what you intended to create.\n- If everything looks correct, click **Create** to create your external Application Load Balancer.\n- Create a [health check](/load-balancing/docs/health-checks) . Use the `gcloud` command for HTTP if you are using HTTP between the load balancer and the backends.```\ngcloud compute health-checks create http http-basic-check \\\n --port 80\n```\n- Create a [backend service](/compute/docs/reference/latest/backendServices) for each content provider.Set the `--protocol` field to `HTTP` because we are using HTTP to go to the instances. Use the `http-basic-check` health check we created earlier as the health check.- For a global external Application Load Balancer, use the  gcloud CLI command with`load-balancing-scheme=EXTERNAL_MANAGED`. This  setting offers [advanced traffic management capability](/load-balancing/docs/https/traffic-management-global) .\n- For an classic Application Load Balancer, use`load-balancing-scheme=EXTERNAL`.\n```\ngcloud compute backend-services create video-backend-service \\\n --load-balancing-scheme=LOAD_BALANCING_SCHEME \\\n --global-health-checks \\\n --protocol=HTTP \\\n --port-name=http \\\n --health-checks=http-basic-check \\\n --global\n```break```\ngcloud compute backend-services create web-backend-service \\\n --load-balancing-scheme=LOAD_BALANCING_SCHEME \\\n --global-health-checks \\\n --protocol=HTTP \\\n --port-name=http \\\n --health-checks=http-basic-check \\\n --global\n```\n- Add your instance groups as backends to the backend services. A backend defines the capacity (maximum backend utilization or maximum queries per second) of the instance groups it contains. In this example, set `balancing-mode` to the value `UTILIZATION` , `max-utilization` to `0.8` , and `capacity-scaler` to `1` . Set `capacity-scaler` to `0` if you wish to drain a backend service.Add the `ig-video-us` instance group:```\ngcloud compute backend-services add-backend video-backend-service \\\n --balancing-mode=UTILIZATION \\\n --max-utilization=0.8 \\\n --capacity-scaler=1 \\\n --instance-group=ig-video-us \\\n --instance-group-zone=us-central1-b \\\n --global\n```Add the `ig-video-eu` instance group:```\ngcloud compute backend-services add-backend video-backend-service \\\n --balancing-mode=UTILIZATION \\\n --max-utilization=0.8 \\\n --capacity-scaler=1 \\\n --instance-group=ig-video-eu \\\n --instance-group-zone=europe-west1-b \\\n --global\n```breakAdd the `ig-www-us` instance group:```\ngcloud compute backend-services add-backend web-backend-service \\\n --balancing-mode=UTILIZATION \\\n --max-utilization=0.8 \\\n --capacity-scaler=1 \\\n --instance-group=ig-www-us \\\n --instance-group-zone=us-central1-b \\\n --global\n```Add the `ig-www-eu` instance group:```\ngcloud compute backend-services add-backend web-backend-service \\\n --balancing-mode=UTILIZATION \\\n --max-utilization=0.8 \\\n --capacity-scaler=1 \\\n --instance-group=ig-www-eu \\\n --instance-group-zone=europe-west1-b \\\n --global\n```\n- Create a URL map to route the incoming requests to the appropriate backend services. In this case, the request path mappings defined via the `--path-rules` flag split traffic according to the URL path in each request to your site. Traffic that does not match an entry in the `--path-rules` list is sent to the entry in the `--default-service flag` .- Create a URL map:```\ngcloud compute url-maps create web-map \\\n --default-service web-backend-service\n```\n- Add a path matcher to your URL map and define your request path mappings:```\ngcloud compute url-maps add-path-matcher web-map \\\n --default-service web-backend-service \\\n --path-matcher-name pathmap \\\n --path-rules=\"/video=video-backend-service,/video/*=video-backend-service\"\n```\n- Create an SSL certificate resource to use in the HTTPS proxy. To create a Google-managed certificate, you must have a domain. If you do not have a domain, you can use a [self-signed SSLcertificate](/load-balancing/docs/ssl-certificates/self-managed-certs#create-key-and-cert) for testing. For more information, see [Types of SSL certificates](/load-balancing/docs/ssl-certificates) .If you are using multiple SSL certificates, you must create an SSL certificate resource for each certificate. **Warning:** Do use a self-signed certificate for production purposes.To create a self-managed SSL certificate resource:```\ngcloud compute ssl-certificates create www-ssl-cert \\\n --certificate [CRT_FILE_PATH] \\\n --private-key [KEY_FILE_PATH]\n```To create a Google-managed SSL certificate resource:```\ngcloud compute ssl-certificates create www-ssl-cert \\\n --domains [DOMAIN]\n```\n- Create a target HTTPS proxy to route requests to your URL map. The proxy is the portion of the load balancer that holds the SSL certificate for HTTPS Load Balancing, so you also load your certificate in this step.```\ngcloud compute target-https-proxies create https-lb-proxy \\\n --url-map web-map --ssl-certificates www-ssl-cert\n```\n- Create two global forwarding rules to route incoming requests to the proxy, one for each of the IP addresses you created.- For a global external Application Load Balancer, use the  gcloud CLI command with`load-balancing-scheme=EXTERNAL_MANAGED`. This  setting offers [advanced traffic management capability](/load-balancing/docs/https/traffic-management-global) .\n- For an classic Application Load Balancer, use`load-balancing-scheme=EXTERNAL`.\n```\ngcloud compute forwarding-rules create https-content-rule \\\n --load-balancing-scheme=LOAD_BALANCING_SCHEME \\\n --network-tier=PREMIUM \\\n --address=lb-ipv4-1 \\\n --global \\\n --target-https-proxy=https-lb-proxy \\\n --ports=443\n``````\ngcloud compute forwarding-rules create https-content-ipv6-rule \\\n --load-balancing-scheme=LOAD_BALANCING_SCHEME \\\n --network-tier=PREMIUM \\\n --address=lb-ipv6-1 \\\n --global \\\n --target-https-proxy=https-lb-proxy \\\n --ports=443\n```\nAfter creating the global forwarding rule, it can take several minutes for your configuration to propagate worldwide.\n## Connect your domain to your load balancer\nAfter the load balancer is created, note the IP address that is associated with the load balancer\u2014for example, `30.90.80.100` . To point your domain to your load balancer, create an `A` record by using your domain registration service. If you added multiple domains to your SSL certificate, you must add an `A` record for each one, all pointing to the load balancer's IP address. For example, to create `A` records for `www.example.com` and `example.com` , use the following:\n```\nNAME     TYPE  DATA\nwww     A  30.90.80.100\n@      A  30.90.80.100\n```\nIf you use Cloud DNS as your DNS provider, see [Add, modify, and delete records](/dns/docs/records) .\n## Sending traffic to your instances\nNow that you have configured your load balancing service, you can start sending traffic to the forwarding rule and watch the traffic go to different instances.\n- In the Google Cloud console, go to the **Load balancing** page. [Go to Load balancing](https://console.cloud.google.com/networking/loadbalancing/list) \n- Click `web-map` to expand the load balancer you just created.\n- In the **Backend** section, confirm that the instances are healthy. The **Healthy** column should be populated indicating that both instances in each of the four instance groups are healthy. If you see otherwise, first try reloading the page. It can take a few moments for the Google Cloud console to indicate that the instances are healthy. If the backends do not appear healthy after a few minutes, review the firewall configuration and the set of network tags assigned to your backend instances.\n- Record the IPv4 and IPv6 addresses of your load balancer:- In the Google Cloud console, go to the **External IP addresses** page. [Go to External IP addresses](https://console.cloud.google.com/addresses/list) \n- Under **Name** , find the addresses named `lb-ipv4-1` and `lb-ipv6-1` , and then record the associated values from the **ExternalAddresses** column.\n- If you are using a Google-managed certificate:- Create the following DNS records:- A CAA record. For more information, see [Specifying the CAs that are allowed to sign your Google-managed certificate](/load-balancing/docs/ssl-certificates/google-managed-certs#caa) .\n- An A record. For more information, see [Create Updating the DNS A record to point to the load balancer's IP address](/load-balancing/docs/ssl-certificates/google-managed-certs#update-dns) .\n- An AAAA record. This is similar to the A record, but is for your load balancer's IPv6 address.\n- Confirm that your certificate resource's status is ACTIVE. For more information, see [Google-managed SSL certificate resourcestatus](/load-balancing/docs/ssl-certificates/google-managed-certs#certificate-resource-status) .\n- Test your load balancer using a web browser by going to one of the following:- `https://` `` , where is the load balancer's IPv4 address. If your browser displays a certificate warning, you must explicitly instruct your browser to trust the certificate. The warning occurs because certificates are typically configured with domains, not IP addresses.\n- `https://` `` , where is the fully qualified domain name (FQDN) for which you configured DNS to point to the load balancer's IP address. If you used a self-managed, self-signed SSL certificate or a self-managed SSL certificate signed by a custom certificate authority (CA), your browser displays a certificate warning unless you have explicitly configured it to trust the certificate or its CA. For more details about self-managed certificates, see [Creating a private key and certificate](/load-balancing/docs/ssl-certificates/self-managed-certs#create-key-and-cert) .\nYour browser should render a page with content showing the name of the instance that served the page, along with its zone (for example, `Page on ig-www-us-02 in us-central1-b` ).\n- In your browser, go to one of the following:- `https://` `` `/video` , where is the load balancer's IPv4 address.\n- `https://` `` `/video` , where is the FQDN for which you configured DNS to point to the load balancer's IP address.\nYour browser should render a page with content showing the name of the instance that served the page, along with its zone (for example, `Page on ig-video-us-02 in us-central1-b` ).\n **Note:** This example uses `-k` with curl to suppress its warnings about self-signed certificates. Web applications normally use certificates signed by a certificate authority in order to demonstrate their authenticity to clients. You can use your own CA-signed certificate with a load balancer, or you can configure your load balancer to issue a Google-managed certificate for a domain that you control.- Record the IPv4 and IPv6 addresses of your load balancer:```\ngcloud compute addresses describe lb-ipv4-1 \\\n--format=\"get(address)\" \\\n--global\n``````\ngcloud compute addresses describe lb-ipv6-1 \\\n--format=\"get(address)\" \\\n--global\n```\n- If you are using a Google-managed certificate:- Create the following DNS records:- A CAA record. For more information, see [Specifying the CAs that are allowed to sign your Google-managed certificate](/load-balancing/docs/ssl-certificates/google-managed-certs#caa) .\n- An A record. For more information, see [Create Updating the DNS A record to point to the load balancer's IP address](/load-balancing/docs/ssl-certificates/google-managed-certs#update-dns) .\n- An AAAA record. This is similar to the A record, but is for your load balancer's IPv6 address.\n- Confirm that your certificate resource's status is ACTIVE. For more information, see [Google-managed SSL certificate resourcestatus](/load-balancing/docs/ssl-certificates/google-managed-certs#certificate-resource-status) .```\ngcloud compute ssl-certificates list\n```\n- Use the `curl` command to test the response from these URLs. Replace with the load balancer's IPv4 address:```\ncurl -k https://IP_ADDRESS\n``````\ncurl -k https://IP_ADDRESS/video/\n```\n- Use the `curl` command to test the response from these URLs. Replace with the load balancer's IPv6 address. For IPv6, you must put brackets ( `[]` ) around the address and disable globbing with the `-g` flag (for example, `curl -g -6 \"https://[2001:DB8::]/\"` ).```\ncurl -k -g -6 https://[IP_ADDRESS]\n``````\ncurl -k -g -6 https://[IP_ADDRESS]/video/\n```\n### Testing multi-region functionality\nTo simulate a user in a different geography, you can connect to one of your virtual machine instances in a different region, and then run a `curl` command from that instance to see the request go to an instance in the region closest to it.\nIf you connect to `ig-www-us-01` , running a `curl` command shows that the request goes to an instance in `us-central1` . You see output such as the following: `Page on ig-www-us-02 in us-central1-b` .\nIf you connect to `ig-www-eu-01` , running a `curl` command shows that the request goes to an instance in `europe-west1` . You see output such as the following: `Page on ig-www-eu-02 in europe-west1-b` .\nYou can perform tests from a client system located anywhere in the world. If backends in one region become unhealthy or reach capacity, the HTTPS load balancer automatically sends traffic to [the next-closestregion](/load-balancing/docs/tutorials/about-capacity-optimization-with-global-lb) .\n## Additional configuration options\nThis section expands on the configuration example to provide alternative and additional configuration options. All of the tasks are optional. You can perform them in any order.\n### Enabling session affinity\nThese procedures demonstrate how to configure a different type of session affinity for each backend service:\n- Client IP address session affinity for`web-backend-service`\n- HTTP cookie session affinity for`video-backend-service`\nWhen client IP affinity is enabled, the load balancer directs a particular client's requests to the same backend VM based on a hash created from the client's IP address.\nWhen generated cookie affinity is enabled, the load balancer issues a cookie on the first request. For each subsequent request with the same cookie, the load balancer directs the request to the same backend VM or endpoint. For external Application Load Balancers, the cookie is named `GCLB` .\nTo enable client IP session affinity for `web-backend-service` :- In the Google Cloud console, go to the **Load balancing** page. [Go to Load balancing](https://console.cloud.google.com/net-services/loadbalancing/loadBalancers/list) \n- Click **Backends** .\n- Click **web-backend-service** (the name of one of the backend services you created for this example) and click **Edit** .\n- On the **Backend service details** page, click **Advancedconfiguration** .\n- Under **Session affinity** , select **Client IP** from the menu.\n- Click **Save** .\nTo enable generated cookie session affinity for `video-backend-service` :- In the Google Cloud console, go to the **Load balancing** page. [Go to Load balancing](https://console.cloud.google.com/net-services/loadbalancing/loadBalancers/list) \n- Click **Backends** .\n- Click **video-backend-service** (the name of one of the backend services you created for this example) and click **Edit** .\n- On the **Backend service details** page, click **Advancedconfiguration** .\n- Under **Session affinity** , select **Generated cookie** from the menu.\n- Click **Update** .\nUse the following `gcloud` command to update the `web-backend-service` backend service, specifying client IP session affinity:\n```\ngcloud compute backend-services update web-backend-service \\\n --session-affinity=CLIENT_IP \\\n --global\n```\nUse the following `gcloud` command to update the `video-backend-service` backend service, specifying generated cookie session affinity:\n```\ngcloud compute backend-services update video-backend-service \\\n --session-affinity=GENERATED_COOKIE \\\n --global\n```\nTo set client IP session affinity, make a `PATCH` request to the [backendServices/patch](/compute/docs/reference/rest/v1/backendServices/patch) method.\n```\nPATCH https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/global/backendServices/web-backend-service{\u00a0 \"sessionAffinity\": \"CLIENT_IP\"}\n```\nTo set generated cookie session affinity, make a `PATCH` request to the [backendServices/patch](/compute/docs/reference/rest/v1/backendServices/patch) method.\n```\nPATCH https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/global/backendServices/video-backend-service{\u00a0 \"sessionAffinity\": \"GENERATED_COOKIE\"}\n```\n### Removing external IP addresses from backend VMs\nExternal Application Load Balancers communicate with backends using their IP addresses and special [load balancerroutes](/vpc/docs/routes#special-lb-paths) . The backend instances do not need external IP addresses to communicate with the load balancer. You can increase security by removing the external IP addresses from your backend instances.\nTo remove external IP addresses from backend instances, follow [thesedirections](/compute/docs/ip-addresses/reserve-static-external-ip-address#unassign_ip) .\nIf you need to connect using SSH to a backend instance that does not have an external IP address, refer to [Connecting to an instance that doesn't have anexternal IPaddress](/compute/docs/instances/connecting-advanced#sshbetweeninstances) .\n## Cleaning up\nAfter you have finished this tutorial you can delete the resources you've made, so that you won't continue to be billed for them in the future. If these resources were created within their own project, you can delete the entire project. Otherwise, you can delete the resources individually.\n### Deleting the project\n**Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an   existing project for this tutorial, when you delete it, you also delete   any other work you've done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project   ID that you want to use in the future. To preserve the URLs that use the   project ID, such as an`YOUR_PROJECT_ID.REGION_ID.r.appspot.com`URL, delete selected resources inside the project instead of deleting the   project.\n- In the Google Cloud console, go to the **Projects** page. [Go to Projects](https://console.cloud.google.com/cloud-resource-manager) \n- In the project list, select the project you want to delete and click delete **Delete** .\n- In the dialog, type the `` , and then click **Shut down** to delete the project.\nRun the following command, replacing `` with your project ID:\n```\ngcloud projects delete PROJECT_ID\n```\n### Deleting individual resources\n### Deleting the load balancer\n- In the Google Cloud console, go to the **Load balancing** page. [Go to Load balancing](https://console.cloud.google.com/networking/loadbalancing/add) \n- Select the checkbox next to `web-map` .\n- Click the **Delete** button at the top of the page.\n- Select the checkboxes next to all of the additional resources, including backend services, health checks, and SSL certificates.\n- Click **Delete load balancer and the selected resources** .\n### Deleting the instance groups\n- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups/list) \n- Select the checkbox at the top next to **Name** , to select all instance groups.\n- Click delete **Delete** .\n- In the confirmation window, click delete **Delete** .\n### Releasing external IP addresses\n- In the Google Cloud console, go to the **External IP addresses** page. [Go to External IP addresses](https://console.cloud.google.com/addresses/list) \n- Select the checkboxes next to `lb-ipv4-1` and `lb-ipv6-1` .\n- Click **Release static addresses** .\n- In the confirmation window, click delete **Delete** .\n### Deleting the firewall rules\n- In the Google Cloud console, go to the **Firewall policies** page. [Go to Firewall policies](https://console.cloud.google.com/net-security/firewall-manager/firewall-policies/list) \n- Select the checkboxes next to `fw-allow-health-check-and-proxy` and `fw-allow-ssh` .\n- Click delete **Delete** .\n- In the confirmation window, click delete **Delete** .\n### Deleting the VM instances\n- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Select the checkbox at the top next to **Name** to select all instances.\n- Click delete **Delete** .\n- In the confirmation window, click delete **Delete** .\n### Deleting the VPC network\n- In the Google Cloud console, go to the **VPC networks** page. [Go to VPC networks](https://console.cloud.google.com/networking/networks/list) \n- Click `lb-network` .\n- On the network details page, click **Delete VPC network** .\n- In the confirmation window, click delete **Delete** .\n **Note:** You must enter `y` after each command to confirm deletion.\n### Deleting the load balancerTo delete the load balancer, you'll need to delete each of its components.- Delete the forwarding rules:```\ngcloud compute forwarding-rules delete https-content-rule \\\n --global\n``````\ngcloud compute forwarding-rules delete https-content-ipv6-rule \\\n --global\n```\n- Delete the global external IP addresses:```\ngcloud compute addresses delete lb-ipv4-1 \\\n --global\n``````\ngcloud compute addresses delete lb-ipv6-1 \\\n --global\n```\n- Delete the target proxy:```\ngcloud compute target-https-proxies delete https-lb-proxy\n```\n- Delete the SSL certificate:```\ngcloud compute ssl-certificates delete www-ssl-cert\n```\n- Delete the URL map:```\ngcloud compute url-maps delete web-map\n```\n- Delete the backend services:```\ngcloud compute backend-services delete web-backend-service \\\n --global\n``````\ngcloud compute backend-services delete video-backend-service \\\n --global\n```\n- Delete the health checks:```\ngcloud compute health-checks delete http-basic-check\n```\nYou have deleted all of the load balancer resources.\n### Deleting the instance groupsRepeat the following command to delete four unmanaged instance groups, using the following name and zone combinations. Replace `` and `` accordingly:- Name:`ig-www-us`, zone:`us-central1-b`\n- Name:`ig-video-us`, zone:`us-central1-b`\n- Name:`ig-www-eu`, zone:`europe-west1-b`\n- Name:`ig-video-eu`, zone:`europe-west1-b`\n```\ngcloud compute instance-groups unmanaged delete INSTANCE_GROUP_NAME \\\n --zone=ZONE\n```\n### Deleting the VM instancesRepeat the following command to delete eight VMs, using the following name and zone combinations. Replace `` and `` accordingly:- Name:`ig-www-us-01`, zone:`us-central1-b`\n- Name:`ig-www-us-02`, zone:`us-central1-b`\n- Name:`ig-video-us-01`, zone:`us-central1-b`\n- Name:`ig-video-us-02`, zone:`us-central1-b`\n- Name:`ig-www-eu-01`, zone:`europe-west1-b`\n- Name:`ig-www-eu-02`, zone:`europe-west1-b`\n- Name:`ig-video-eu-01`, zone:`europe-west1-b`\n- Name:`ig-video-eu-02`, zone:`europe-west1-b`\n```\ngcloud compute instances delete VM_NAME \\\n --zone=ZONE\n```\n### Deleting the firewall rulesDelete both firewall rules:\n```\ngcloud compute firewall-rules delete fw-allow-health-check-and-proxy\n```\n```\ngcloud compute firewall-rules delete fw-allow-ssh\n```\n### Deleting the VPC network\n- Delete the `us-subnet` :```\ngcloud compute networks subnets delete us-subnet \\\n--region=us-central1\n```\n- Delete the `eu-subnet` :```\ngcloud compute networks subnets delete eu-subnet \\\n--region=europe-west1\n```\n- Delete the VPC network:```\ngcloud compute networks delete lb-network\n```\nYou have deleted all of the resources that you set up in this project.\n## What's next\n- [Using logging and monitoring](/load-balancing/docs/https/https-logging-monitoring) \n- [Troubleshooting load balancing](/load-balancing/docs/https/troubleshooting-ext-https-lbs) \n- To enable IAP, see [Enabling IAP on theexternal Application Load Balancer](/iap/docs/load-balancer-howto#enable-iap) .", "guide": "Cloud Load Balancing"}