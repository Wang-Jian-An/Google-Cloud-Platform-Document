{"title": "Documentation - Create alert rules from your AO project", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Create alert rules from your AO project\n**Important:** Confirm that your project is deployed with workloads. To have data your rules can act on, verify that you configured scraping metrics or log collection.\nCreate groups containing the Observability alert rules for metrics or logs of your project on the GDCH console. Metric rules send alerts based on metric data, and log rules send alerts based on logging data. You must enter the query language expression that determines whether the alert must move to a pending state. Additionally, you can include optional values like labels and annotations.\nlet you differentiate the characteristics of an alert as a map of key-value pairs. Use labels to add or overwrite information, such as the level of severity (error, critical, warning, or information), the alert code, and a short name to identify the resource.\nOn the other hand, use to add non-identifying metadata to alerts. For example, you can include values for messages and expressions that display in fields of the user interface (UI) or runbook URLs to help with resolutive actions.\nAlternatively, you can create alert rules using the Observability API to directly interact with a custom resource and update changes in your project namespace.\n", "content": "## Create rules\nYou can create alert rules for data observability using the [GDCH console](#console) , which is the preferred method, or by deploying a custom resource using the [Observability API](#api) in your project namespace.\nWork through the following steps to create alert rules for data observability from the GDCH console:- In the GDCH console, select a project.\n- In the navigation menu, click **Operations** > **Alerting** .\n- Click the **Alerting Policy** tab.\n- Click **Create Rule Group** .\n- Select whether you want to create a group for **Metrics** or **Logs** . Metric rules send alerts based on system monitoring data and logging rules send alerts based on system logging data.\n- In the **Alert rule group name** field, enter a name for the group.\n- In the **Rule evaluation interval** field, enter the number of seconds for each interval.\n- In the **Limit** field, enter the maximum number of alerts. Enter`0`for unlimited alerts.\n- In the **Alert rules** section, click **Create Alert Rule** .\n- Enter a name for the alert rule.\n- Enter an expression for the alert rule:- For a system logging rule, enter a [LogQL](https://grafana.com/docs/loki/latest/logql/) (Log Query Language) expression.\n- For a system monitoring rule, enter a [PromQL](https://prometheus.io/docs/prometheus/latest/querying/basics/) (Prometheus Query Language) expression.\nThis expression must evaluate to a true or false statement, which determines whether the alert must move to a pending state or not. **Note:** The first time an alert rule condition occurs, the alert moves to the pending state. If the conditions are true over the following duration, the alert moves to the open state. At that moment, the Observability system sends the alert.\n- In the **Duration** field, enter the number of seconds to define when an active alert goes from the pending state to the open state. **Note:** If you set the duration to a value of `0` , the Observability system sends the alert immediately after the condition is met.\n- In the **Severity** field, choose the level of severity, such as **Error** or **Warning** .\n- Enter a short name to identify the related resource, such as `AIS` or `DHCP` .\n- Enter an alert code to identify the alert.\n- Enter a runbook URL or information to help resolve the issue.\n- Enter a message or description of the alert.\n- Optional: Click **Add label** to add labels as key-value pairs.\n- Optional: Click **Add annotation** to add annotations as key-value pairs.\n- Click **Save** to create the rule.\n- Click **Create** to create the rule group. The rule group appears in the **Alert rule group** list.\nYou can create system monitoring and logging rules in GDCH using the Observability API by deploying custom resources. A `MonitoringRule` or `LoggingRule` custom resource consists of one or more queries and expressions to form a condition, the frequency of evaluation, and, optionally, the duration over which the condition is met.\nWork through the following steps to create alert rules by deploying a custom resource in your project namespace:- Create a YAML file for the custom resource using the following templates for system monitoring or logging alert rules:- To create system monitoring rules and send alerts based on metric data, use [the MonitoringRule custom resource](#monitoringrule) .\n- To create system logging rules and send alerts based on logging data, use [the LoggingRule custom resource](#loggingrule) .\n- In the`namespace`field of the custom resource, enter your project namespace.\n- In the`name`field, enter a name for the alerting rule configuration.\n- Optional: If you are configuring the`LoggingRule`custom resource for logging rules, you can choose the log source for alerts in the`source`field. For example, enter a value such as`operational`or`audit`.\n- In the`interval`field, enter the number of seconds for the duration of the rule evaluation interval.\n- Optional: In the`limit`field, enter the maximum number of alerts. Enter`0`for unlimited alerts.\n- Optional: If you also want to calculate metrics and configure recording rules, enter the following information in the `recordRules` field:- In the`record`field, enter the recording name. This value defines the time series in which to write the recording rule and it must be a valid metric name.\n- In the `expr` field, enter an expression for the recording rule:- For a system logging rule, enter a [LogQL](https://grafana.com/docs/loki/latest/logql/) (Log Query Language) expression.\n- For a system monitoring rule, enter a [PromQL](https://prometheus.io/docs/prometheus/latest/querying/basics/) (Prometheus Query Language) expression.\nThis expression must resolve to a numeric value to be recorded as a new metric.\n- Optional: In the `labels` field, define the labels that you want to add or overwrite as key-value pairs.\n- In the `alertRules` field, enter the following information to configure alert rules:- In the`alert`field, enter the alert name.\n- In the `expr` field, enter an expression for the alert rule:- For a system logging rule, enter a LogQL expression.\n- For a system monitoring rule, enter a PromQL expression.\nThis expression must evaluate to a true or false statement, which determines whether the alert must move to a pending state or not.\n- Optional: In the `for` field, enter the duration in seconds over which the specified condition must be met to move the alert from the pending state to the open state. The default duration if you don't specify another value is `0` seconds. **Note:** The first time an alert rule condition occurs, the alert moves to the pending state. If the conditions are true over the following duration, the alert moves to the open state. At that moment, the Observability system sends the alert. Furthermore, if you set the duration to a value of `0` , the Observability system sends the alert immediately after the condition is met.\n- In the `labels` field, define the labels that you want to add or overwrite as key-value pairs. The following labels are required:- `severity`: Choose the level of severity, such as`error`,`critical`,`warning`, or`info`.\n- `code`: Enter the alert code to identify the alert.\n- `resource`: Enter a short name to identify the related resource, such as`AIS`or`DHCP`.\n- Optional: In the `annotations` field, add annotations as key-value pairs.\n- Save the YAML file of the custom resource.\n- Deploy the custom resource in your project namespace of the admin cluster to create the alert rules.## Configure system logging and monitoring rules from custom resources\nThis section contains the YAML templates you must use to create alert rules by deploying custom resources. If you create alerts from the [GDCH console](#console) , you can skip this section.\n### The MonitoringRule custom resource\nTo create system monitoring rules, you must create a `MonitoringRule` custom resource. A `MonitoringRule` consists of recording rules and alert rules that describe the conditions to send an alert.\nThe following YAML file shows a template of the `MonitoringRule` custom resource:\n```\n# Configures either an alert or a target record for precomputationapiVersion: monitoring.gdc.goog/v1kind: MonitoringRulemetadata:\u00a0 # Choose namespace that matches the project namespace\u00a0 # Note: The alert or record will be produced in the same namespace\u00a0 namespace: PROJECT_NAMESPACE\u00a0 name: alerting-configspec:\u00a0 # Rule evaluation interval\u00a0 interval: 60s\u00a0 # Configure limit for number of alerts (0: no limit)\u00a0 # Optional. Default: 0 (no limit)\u00a0 limit: 0\u00a0 # Configure recording rules to generate new metrics based on pre-existing metrics.\u00a0 # Recording rules precompute expressions that are frequently needed or computationally expensive.\u00a0 # These rules save their result as a new set of time series.\u00a0 recordRules:\u00a0 \u00a0 # Define which timeseries to write to. The value must be a valid metric name.\u00a0 - record: MyMetricsName\u00a0 \u00a0 # Define PromQL expression to evaluate for this rule\u00a0 \u00a0 expr: rate({service_name=\"bob-service\"} [1m])\u00a0 \u00a0 # Define labels to add or overwrite\u00a0 \u00a0 # Optional. Map of key-value pairs\u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 <label_key>: <label_value>\u00a0 # Configure alert rules\u00a0 alertRules:\u00a0 \u00a0 # Define alert name \u00a0 - alert: <string>\u00a0 \u00a0 # Define PromQL expression to evaluate for this rule\u00a0 \u00a0 # https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\u00a0 \u00a0 expr: rate({service_name=\"bob-service\"} [1m])\u00a0 \u00a0 # Define when an active alert moves from pending to open\u00a0 \u00a0 # Optional. Default: 0s\u00a0 \u00a0 for: 0s\u00a0 \u00a0 # Define labels to add or overwrite\u00a0 \u00a0 # Required, Map of key-value pairs\u00a0 \u00a0 # Required labels:\u00a0 \u00a0 # \u00a0 \u00a0 severity: [error, critical, warning, info]\u00a0 \u00a0 # \u00a0 \u00a0 code:\u00a0 \u00a0 # \u00a0 \u00a0 resource: component/service/hardware related to the alert\u00a0 \u00a0 # \u00a0 \u00a0 additional labels are optional\u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 severity: error\u00a0 \u00a0 \u00a0 code: 202\u00a0 \u00a0 \u00a0 resource: AIS\u00a0 \u00a0 \u00a0 <label_key>: <label_value>\u00a0 \u00a0 # Define annotations to add\u00a0 \u00a0 # Optional. Map of key-value pairs\u00a0 \u00a0 # Recommended annotations:\u00a0 \u00a0 # \u00a0 \u00a0 message: value of Message field in UI\u00a0 \u00a0 # \u00a0 \u00a0 expression: value of Rule field in UI\u00a0 \u00a0 # \u00a0 \u00a0 runbookurl: URL for link in Actions to take field in UI\u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 <label_key>: <label_value>\n```\nReplace with the namespace of your project.\n### The LoggingRule custom resource\nTo create system logging rules, you must create a `LoggingRule` custom resource. A `LoggingRule` consists of recording rules and alert rules that describe the conditions to send an alert.\nThe following YAML file shows a template of the `LoggingRule` custom resource:\n```\n# Configures either an alert or a target record for precomputationapiVersion: logging.gdc.goog/v1kind: LoggingRulemetadata:\u00a0 # Choose namespace that matches the project namespace\u00a0 # Note: The alert or record will be produced in the same namespace\u00a0 namespace: PROJECT_NAMESPACE\u00a0 name: alerting-configspec:\u00a0 # Choose which log source to base alerts on (Operational/Audit Logs)\u00a0 # Optional. Default: Operational\u00a0 source: operational\u00a0 # Rule evaluation interval\u00a0 interval: 60s\u00a0 # Configure limit for number of alerts (0: no limit)\u00a0 # Optional. Default: 0 (no limit)\u00a0 limit: 0\u00a0 # Configure recording rules to generate new metrics based on pre-existing logs.\u00a0 # Recording rules generate metrics based on logs.\u00a0 # Use recording rules for complex alerts, which query the same expression repeatedly every time they are evaluated.\u00a0 recordRules:\u00a0 \u00a0 # Define which timeseries to write to. The value must be a valid metric name.\u00a0 - record: MyMetricsName\u00a0 \u00a0 # Define LogQL expression to evaluate for this rule\u00a0 \u00a0 # https://grafana.com/docs/loki/latest/rules/\u00a0 \u00a0 expr: rate({service_name=\"bob-service\"} [1m])\u00a0 \u00a0 # Define labels to add or overwrite\u00a0 \u00a0 # Optional. Map of key-value pairs\u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 <label_key>: <label_value>\u00a0 # Configure alert rules\u00a0 alertRules:\u00a0 \u00a0 # Define alert name\u00a0 - alert: <string>\u00a0 \u00a0 # Define LogQL expression to evaluate for this rule\u00a0 \u00a0 expr: rate({service_name=\"bob-service\"} [1m])\u00a0 \u00a0 # Define when an active alert moves from pending to open\u00a0 \u00a0 # Optional. Default: 0s\u00a0 \u00a0 for: 0s\u00a0 \u00a0 # Define labels to add or overwrite\u00a0 \u00a0 # Required, Map of key-value pairs\u00a0 \u00a0 # Required labels:\u00a0 \u00a0 # \u00a0 \u00a0 severity: [error, critical, warning, info]\u00a0 \u00a0 # \u00a0 \u00a0 code:\u00a0 \u00a0 # \u00a0 \u00a0 resource: component/service/hardware related to alert\u00a0 \u00a0 # \u00a0 \u00a0 additional labels are optional\u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 severity: warning\u00a0 \u00a0 \u00a0 code: 202\u00a0 \u00a0 \u00a0 resource: AIS\u00a0 \u00a0 \u00a0 <label_name>: <label_value>\u00a0 \u00a0 # Define annotations to add\u00a0 \u00a0 # Optional. Map of key-value pairs\u00a0 \u00a0 # Recommended annotations:\u00a0 \u00a0 # \u00a0 \u00a0 message: value of Message field in UI\u00a0 \u00a0 # \u00a0 \u00a0 expression: value of Rule field in UI\u00a0 \u00a0 # \u00a0 \u00a0 runbookurl: URL for link in Actions to take field in UI\u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 <label_name>: <label_value>\n```\nReplace with the namespace of your project.", "guide": "Documentation"}