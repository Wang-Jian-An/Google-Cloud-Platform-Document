{"title": "Compute Engine - Viewing usage reports", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Viewing usage reports\nCompute Engine lets you export detailed reports of your Compute Engine usage to a [Cloud Storage](/storage) bucket using the usage export feature. Usage reports provide information about the lifetime of your resources. For example, you can see how many VM instances in your project are running an `n2-standard-4` machine type and how long each instance has been running. You can also review the storage space of a persistent disk, and information about other Compute Engine features.\nUsage reports do not provide billing or activity information, such as information about API requests. For billing information, see the [Billing Export](/billing/docs/how-to/export-data-file) feature. For activity logs, see [Activity logs](/compute/docs/logging/activity-logs) .\n", "content": "## Before you begin\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nTo use the Python samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [   Set up authentication for a local development environment](/compute/docs/authentication#local-development) .\n## Overview\nWhen you enable usage reports, Compute Engine delivers two types of reports to the Cloud Storage bucket you specify:\n- **Daily usage reports** These reports are delivered daily and include usage data from the preceding day. Each report is a separate file that contains data from the last period. Data in these reports are immutable, meaning that Compute Engine does not update or rewrite the log file if there are inaccuracies. Instead, the data is corrected in the next new report that is delivered to the bucket.Daily usage reports have the following name format:```\n<bucket>/<report_prefix>_<numeric_project_id>_<YYYYMMDD>.csv\n```\n- **Monthly rollup report** A single monthly rollup report is delivered daily, which contains monthly usage data for that project up to, but not including, that day. The monthly usage report is overwritten each day with new data that reflects the monthly usage of resources up to that date. There is only one monthly usage data file per project, per month.Monthly rollup reports have following name format:```\n<bucket>/<report_prefix>_<numeric_project_id>_<YYYYMM>.csv\n```The daily and monthly report files look very similar, except for the difference in date format, where the monthly rollup reports are dated using the year and month ( `YYYYMM` ), and the daily usage reports are dated using the year, month, and date ( `YYYYMMDD` ).\nAll usage reports are delivered in [comma-separated values (CSV)](http://www.ietf.org/rfc/rfc4180.txt) format and usage report files are prefixed using `<report_prefix>` . The `<report_prefix>` is a customizable value chosen by the user. If you don't specify a report prefix, the prefix `usage_gce` is used by default. All times are given in Pacific time (PST).\n## Prerequisites\nBefore you can start using Compute Engine usage export:\n- You must have already [created a bucket](/storage/docs/creating-buckets) to store usage logs.## Setting up usage export\nWhen you first enable the usage export feature, the first report is sent the following day, detailing the previous day's usage. Afterwards, you receive reports in 24 hour intervals.\nTo set up the usage export feature, enable the feature in the [gcloud compute](/compute/docs/gcloud-compute) tool. When you enable this feature, you must define two properties:\n- **The Cloud Storage bucket where you would like your reports to be delivered.** You can select any Cloud Storage bucket for which you are an owner, including buckets that are from different projects. This bucket must exist before you can start exporting reports and you must have owner access to the bucket. Cloud Storage charges for usage, so you should review [Cloud Storage pricing](/storage/pricing) for information on how you might incur charges for the service.Any user who has read access to the Cloud Storage bucket can view the usage reports in the bucket. Any user who has write access to the bucket can create, view, and modify existing files in the bucket. For more information, see the [Access control](#access_control) section.\n- **The report prefix for your files.** You can specify the report prefix to use for your usage reports. Your usage reports then have file names that contain this prefix. For example, specifying \"my-cool-project-report\" as your report prefix results in a file name similar to the format `my-cool-project-report_1234567890_20131230.csv` . If you do not specify a report prefix, the default prefix `usage_gce` is used.\nAfter you decide on these two properties, you can enable the usage export feature in the following ways:\n- Go to the **Compute Engine Settings** page. [Go to Compute Engine Settings](https://console.cloud.google.com/compute/settings) .\n- Check the **Enable usage export** box.\n- Fill in the field asking for a **Bucket name** . Optionally, provide a **Report prefix** , if desired. If you leave the report prefix empty, the default prefix `usage_gce` is used. All usage reports delivered to the bucket are named with this prefix.\n- Click **Save** .\nIn `gcloud compute` , use the [gcloud compute project-info set-usage-bucket](/sdk/gcloud/reference/compute/project-info/set-usage-bucket) command to enable this feature:\n```\n\u00a0gcloud compute project-info set-usage-bucket --bucket [BUCKET_NAME] [--prefix [PREFIX]]\n```\nWhere:- `[BUCKET_NAME]`is the name of an existing bucket to receive the usage reports. Must be in the format`gs://<bucket-name>`or`https://storage.googleapis.com/<bucket-name>`. The user running this command must be an owner of the bucket.\n- `[PREFIX]`is the optional prefix for the usage report names. If not specified, the default prefix is`usage_gce`.\nTo enable usage exports, use the `set_usage_export_bucket()` method in the `Projects` collection. The following example uses the Cloud Client Libraries for Python:\n [  compute/client_library/snippets/usage_report/usage_reports.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/compute/client_library/snippets/usage_report/usage_reports.py) [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/compute/client_library/snippets/usage_report/usage_reports.py) \n```\nfrom __future__ import annotationsimport sysfrom typing import Anyfrom google.api_core.extended_operation import ExtendedOperationfrom google.cloud import compute_v1def wait_for_extended_operation(\u00a0 \u00a0 operation: ExtendedOperation, verbose_name: str = \"operation\", timeout: int = 300) -> Any:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Waits for the extended (long-running) operation to complete.\u00a0 \u00a0 If the operation is successful, it will return its result.\u00a0 \u00a0 If the operation ends with an error, an exception will be raised.\u00a0 \u00a0 If there were any warnings during the execution of the operation\u00a0 \u00a0 they will be printed to sys.stderr.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 operation: a long-running operation you want to wait on.\u00a0 \u00a0 \u00a0 \u00a0 verbose_name: (optional) a more verbose name of the operation,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 used only during error and warning reporting.\u00a0 \u00a0 \u00a0 \u00a0 timeout: how long (in seconds) to wait for operation to finish.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 If None, wait indefinitely.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 \u00a0 Whatever the operation.result() returns.\u00a0 \u00a0 Raises:\u00a0 \u00a0 \u00a0 \u00a0 This method will raise the exception received from `operation.exception()`\u00a0 \u00a0 \u00a0 \u00a0 or RuntimeError if there is no exception set, but there is an `error_code`\u00a0 \u00a0 \u00a0 \u00a0 set for the `operation`.\u00a0 \u00a0 \u00a0 \u00a0 In case of an operation taking longer than `timeout` seconds to complete,\u00a0 \u00a0 \u00a0 \u00a0 a `concurrent.futures.TimeoutError` will be raised.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 result = operation.result(timeout=timeout)\u00a0 \u00a0 if operation.error_code:\u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 f\"Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 file=sys.stderr,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 flush=True,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Operation ID: {operation.name}\", file=sys.stderr, flush=True)\u00a0 \u00a0 \u00a0 \u00a0 raise operation.exception() or RuntimeError(operation.error_message)\u00a0 \u00a0 if operation.warnings:\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Warnings during {verbose_name}:\\n\", file=sys.stderr, flush=True)\u00a0 \u00a0 \u00a0 \u00a0 for warning in operation.warnings:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(f\" - {warning.code}: {warning.message}\", file=sys.stderr, flush=True)\u00a0 \u00a0 return resultdef set_usage_export_bucket(\u00a0 \u00a0 project_id: str, bucket_name: str, report_name_prefix: str = \"\") -> None:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Set Compute Engine usage export bucket for the Cloud project.\u00a0 \u00a0 This sample presents how to interpret the default value for the\u00a0 \u00a0 report name prefix parameter.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: project ID or project number of the project to update.\u00a0 \u00a0 \u00a0 \u00a0 bucket_name: Google Cloud Storage bucket used to store Compute Engine\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 usage reports. An existing Google Cloud Storage bucket is required.\u00a0 \u00a0 \u00a0 \u00a0 report_name_prefix: Prefix of the usage report name which defaults to an empty string\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 to showcase default values behaviour.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 usage_export_location = compute_v1.UsageExportLocation()\u00a0 \u00a0 usage_export_location.bucket_name = bucket_name\u00a0 \u00a0 usage_export_location.report_name_prefix = report_name_prefix\u00a0 \u00a0 if not report_name_prefix:\u00a0 \u00a0 \u00a0 \u00a0 # Sending an empty value for report_name_prefix results in the\u00a0 \u00a0 \u00a0 \u00a0 # next usage report being generated with the default prefix value\u00a0 \u00a0 \u00a0 \u00a0 # \"usage_gce\". (ref: https://cloud.google.com/compute/docs/reference/rest/v1/projects/setUsageExportBucket)\u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Setting report_name_prefix to empty value causes the report \"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"to have the default prefix of `usage_gce`.\"\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 projects_client = compute_v1.ProjectsClient()\u00a0 \u00a0 operation = projects_client.set_usage_export_bucket(\u00a0 \u00a0 \u00a0 \u00a0 project=project_id, usage_export_location_resource=usage_export_location\u00a0 \u00a0 )\u00a0 \u00a0 wait_for_extended_operation(operation, \"setting GCE usage bucket\")\n```For more information, see the API reference documentation for [projects.setUsageExportBucket](/compute/docs/reference/latest/projects/setUsageExportBucket)\n## Downloading usage export reports\nAfter you start receiving usage reports in your bucket, download your reports like you would download other objects from Cloud Storage. For more information, see [Download objects](/storage/docs/downloading-objects) .\n## Supported metrics\nDaily usage reports provide usage information about the following resources:\n- Virtual machines\n- Persistent disks\n- Images\n- Snapshots\n- Static IP addresses\n- Load balancers\n- Reservations\nEach resource is described using the following metrics:\n| Metric Name | Metric Properties                                                                                   |\n|:--------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Report Date | Metric Type: string Description: The date of the usage. Example: 2019-08-15                                                                     |\n| MeasurementId | Metric Type: string Description: The ID of the type of resource that is being measured. For example, VmimageN2StandardCore_Uswest2 to represent an n2-standard in us-west2 machine type. Example: com.google.cloud/services/compute\u2011engine/VmimageN2StandardCore_Uswest2 Example: com.google.cloud/services/compute\u2011engine/VmimageN2StandardRam_Uswest2 |\n| Quantity  | Metric Type: integer Description: The amount of usage for the specified date. Example: 86400                                                                 |\n| Unit   | Metric Type: string Description: The unit type, such as count, seconds, hours, and so on. Example: seconds                                                            |\n| Resource URI | Metric Type: string Description: The URI of the specified resource. Example: https://compute.googleapis.com/compute/v1/projects/<project\u2011id>/zones/<zone>/instances/<instance>                                            |\n| ResourceId | Metric Type: integer Description: A numeric ID that identifies the specific resource. Example: 16557630484925648021                                                          |\n| Location  | Metric Type: string Description: The location of the resource. Either a zone or region name, or GLOBAL for global resources. Example: us-central1-a                                                  |\n**Note:** If you are using the billing export feature, you can also match the `MeasurementId` fields to find the charges for a particular resource.\nAn example entry in the report would look like the following:\n| Report Date | MeasurementId            | Quantity | Unit | Resource URI                       | Resource ID | Location  |\n|:--------------|:-------------------------------------------------------------|-----------:|:--------|:-------------------------------------------------------------------------------------------------------|--------------:|:--------------|\n| 02/13/2019 | com.google.cloud/services/compute-engine/VmimageE2Standard_2 |  86400 | seconds | https://compute.googleapis.com/compute/v1/projects/myproject/zones/us-central1-a/instances/my-instance | 16557630484 | us-central1-a |\n## Access control\nWhen you enable the usage export feature for a Cloud Storage bucket, Compute Engine automatically adds itself to the bucket with write access in order to deliver usage reports. As long as Compute Engine has access to the bucket and the usage export feature is enabled, Compute Engine continues to export usage reports to the specified Cloud Storage bucket.\nYou can identify that Compute Engine has access to a bucket if you see the following identity added to the bucket IAM policy:\n```\ncloud-cluster-analytics-export@google.com\n```\nAny user who is an owner of the project has full access to the Cloud Storage bucket. Other users, such as writers and readers, have different degrees of access to the bucket. To learn about IAM for a bucket, read [IAM for Cloud Storage](/storage/docs/access-control/iam) .\nIf you disable the usage export feature, Compute Engine automatically removes write access from Compute Engine to the bucket. If you modify the permissions on the cloud-cluster-analytics-export@google.com account and then disable the usage export feature, Compute Engine disables the usage export feature but won't remove the account from the project access list. You can choose to remove the account manually if desired.\n## Checking if usage reports are enabled\nYou can check on a project's usage export settings by getting information about the project:\n```\ngcloud compute project-info describe\n```\nLook for the `usageExportLocation` field:\n```\n+-------------------------+----------------------------------------------------+\n| name     | myproject           |\n| description    |             |\n| creation-time   | 2019-10-18T16:31:52.308-07:00      |\n| usage     |             |\n| snapshots    | 1.0/1000.0           |\n| networks    | 2.0/2.0           |\n| firewalls    | 3.0/10.0           |\n|...      |             |\n| usageExportLocation  |             |\n| bucketName   | https://storage.googleapis.com/usage-export-sample |\n| reportNamePrefix  |             |\n+-------------------------+----------------------------------------------------+\n```\n## Disabling usage reports\nWhen you disable usage reports, Compute Engine automatically removes write access for Compute Engine to your Cloud Storage bucket and stops sending new reports.\n- Go to the **Compute Engine Settings** page. [Go to Compute Engine Settings](https://console.cloud.google.com/compute/settings) .\n- Uncheck the **Enable usage export** box to disable usage export.\nIn `gcloud compute` , disable the usage export feature by running the [gcloud compute project-info set-usage-bucket](/sdk/gcloud/reference/compute/project-info/set-usage-bucket) command with the `--no-bucket` flag:\n```\ngcloud compute project-info set-usage-bucket --no-bucket\n```\n **Note:** Specifying the `--bucket` flag without a bucket name does not disable the feature. You must use the `--no-bucket` flag.\nTo disable usage exports, use the `set_usage_export_bucket()` method in the `Projects` collection with `usage_export_location_resource` set to `None` . The following example uses the Cloud Client Libraries for Python:\n [  compute/client_library/snippets/usage_report/usage_reports.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/compute/client_library/snippets/usage_report/usage_reports.py) [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/compute/client_library/snippets/usage_report/usage_reports.py) \n```\nfrom __future__ import annotationsimport sysfrom typing import Anyfrom google.api_core.extended_operation import ExtendedOperationfrom google.cloud import compute_v1def wait_for_extended_operation(\u00a0 \u00a0 operation: ExtendedOperation, verbose_name: str = \"operation\", timeout: int = 300) -> Any:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Waits for the extended (long-running) operation to complete.\u00a0 \u00a0 If the operation is successful, it will return its result.\u00a0 \u00a0 If the operation ends with an error, an exception will be raised.\u00a0 \u00a0 If there were any warnings during the execution of the operation\u00a0 \u00a0 they will be printed to sys.stderr.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 operation: a long-running operation you want to wait on.\u00a0 \u00a0 \u00a0 \u00a0 verbose_name: (optional) a more verbose name of the operation,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 used only during error and warning reporting.\u00a0 \u00a0 \u00a0 \u00a0 timeout: how long (in seconds) to wait for operation to finish.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 If None, wait indefinitely.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 \u00a0 Whatever the operation.result() returns.\u00a0 \u00a0 Raises:\u00a0 \u00a0 \u00a0 \u00a0 This method will raise the exception received from `operation.exception()`\u00a0 \u00a0 \u00a0 \u00a0 or RuntimeError if there is no exception set, but there is an `error_code`\u00a0 \u00a0 \u00a0 \u00a0 set for the `operation`.\u00a0 \u00a0 \u00a0 \u00a0 In case of an operation taking longer than `timeout` seconds to complete,\u00a0 \u00a0 \u00a0 \u00a0 a `concurrent.futures.TimeoutError` will be raised.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 result = operation.result(timeout=timeout)\u00a0 \u00a0 if operation.error_code:\u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 f\"Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 file=sys.stderr,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 flush=True,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Operation ID: {operation.name}\", file=sys.stderr, flush=True)\u00a0 \u00a0 \u00a0 \u00a0 raise operation.exception() or RuntimeError(operation.error_message)\u00a0 \u00a0 if operation.warnings:\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Warnings during {verbose_name}:\\n\", file=sys.stderr, flush=True)\u00a0 \u00a0 \u00a0 \u00a0 for warning in operation.warnings:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(f\" - {warning.code}: {warning.message}\", file=sys.stderr, flush=True)\u00a0 \u00a0 return resultdef disable_usage_export(project_id: str) -> None:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Disable Compute Engine usage export bucket for the Cloud Project.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: project ID or project number of the project to update.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 projects_client = compute_v1.ProjectsClient()\u00a0 \u00a0 # Setting `usage_export_location_resource` to an\u00a0 \u00a0 # empty object will disable the usage report generation.\u00a0 \u00a0 operation = projects_client.set_usage_export_bucket(\u00a0 \u00a0 \u00a0 \u00a0 project=project_id, usage_export_location_resource={}\u00a0 \u00a0 )\u00a0 \u00a0 wait_for_extended_operation(operation, \"disabling GCE usage bucket\")\n```\n## What's next\n- Turn on the [Billing Export feature](/billing/docs/how-to/export-data-file) to view your billing logs.\n- Track the activity in your project using [Activity Logs](/compute/docs/activity-logs) .\n- Learn more about [Cloud Storage buckets](/storage/docs/buckets) .\n- Learn more about [Compute Engine pricing](/compute/all-pricing) .\n- Use the [pricing calculator](/products/calculator) to get an estimated price.", "guide": "Compute Engine"}