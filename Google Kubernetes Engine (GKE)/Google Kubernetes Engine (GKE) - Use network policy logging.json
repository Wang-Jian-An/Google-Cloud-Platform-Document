{"title": "Google Kubernetes Engine (GKE) - Use network policy logging", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/network-policy-logging", "abstract": "# Google Kubernetes Engine (GKE) - Use network policy logging\nThis page explains how to use network policy logging for Google Kubernetes Engine (GKE). Kubernetes [network policies](https://kubernetes.io/docs/concepts/services-networking/network-policies/) specify network traffic that Pods are allowed to send and receive. Network policy logging lets you record when a connection is allowed or denied by a network policy. Network policy logging can help you troubleshoot issues with network policies.\n", "content": "## Overview\nUsing network policy logging, you can:\n- Verify that your network policies are working as expected.\n- Understand which Pods in your cluster are communicating with the internet.\n- Understand which [namespaces](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) are communicating with each other.\n- Recognize a Denial of Service attack.\nNetwork policy logs are uploaded to [Cloud Logging](/logging) for storage, search, analysis, and alerting if Cloud Logging is enabled. Cloud Logging is enabled by default in new clusters. See [Configuring logging and monitoring for GKE](/stackdriver/docs/solutions/gke/installing) for more.\n### Requirements\n- Network policy logging is only available for clusters that use [GKE Dataplane V2](/kubernetes-engine/docs/how-to/dataplane-v2) .\n- Network policy logging requires the Google Cloud CLI 303.0.0 or higher.\n### Pricing\n- There are no log generation charges for network policy logging.\n- If you store your logs in Cloud Logging, standard [Cloud Logging charges](/stackdriver/pricing) apply.\n- Logs can be further routed to Pub/Sub, Cloud Storage, or BigQuery. Pub/Sub, Cloud Storage, or BigQuery charges may apply. For more information, see [Routing and storage overview](/logging/docs/routing/overview) .## Configuring network policy logging\nYou configure network policy logging settings by editing the `NetworkLogging` object in your cluster. GKE automatically creates a `NetworkLogging` object named `default` in new [Dataplane V2clusters](/kubernetes-engine/docs/how-to/dataplane-v2) . There can only be one NetworkLogging object per cluster and it can't be renamed.\nYou can configure the logging of allowed connections and the logging of denied connections separately. You can also selectively enable logging for some network policies. The following is an example of the `NetworkLogging` specification, with settings specified to log all allowed and denied connections:\n```\nkind: NetworkLoggingapiVersion: networking.gke.io/v1alpha1metadata:\u00a0 name: defaultspec:\u00a0 cluster:\u00a0 \u00a0 allow:\u00a0 \u00a0 \u00a0 log: true\u00a0 \u00a0 \u00a0 delegate: false\u00a0 \u00a0 deny:\u00a0 \u00a0 \u00a0 log: true\u00a0 \u00a0 \u00a0 delegate: false\n```\nUse `kubectl` to edit your configuration:\n```\nkubectl edit networklogging default\n```\n**Note:** If you use network policies to restrict traffic within Anthos Service Mesh, deploy your network policies before you activate Anthos Service Mesh in a namespace. Otherwise, long-running connections between Pods in the mesh might already have been established, and activating new network policies does not close existing connections.\n### NetworkLogging spec\nThe NetworkLogging object specification is in a YAML format. This format is described in the following table:| ('Field', 'Field', 'Field') | ('Type', 'Type', 'Type') | ('Description', 'Description', 'Description')                                                                                                                                                                                                              |\n|:------------------------------|:---------------------------||\n| cluster.allow     | struct      | Settings for logging allowed connections. FieldTypeDescription log bool If set to true, allowed connections in the cluster are logged; otherwise, allowed connections are not logged. Network policies that select the Pod and have a rule that matches the connection are listed in the log message. delegate bool If false, all allowed connections are logged. If multiple network policies allow a connection, all matching policies are listed in the log message. If true, allowed connections are only logged if they are allowed by a network policy with the logging annotation policy.network.gke.io/enable-logging: \"true\". If multiple network policies allow a connection, all matching policies with the enable-logging annotation are listed in the log message. A configuration error occurs if you set spec.cluster.allow.delegate to true and spec.cluster.allow.log to false. |\n| Field       | Type      | Description                                                                                                                                                                                                                      |\n| log       | bool      | If set to true, allowed connections in the cluster are logged; otherwise, allowed connections are not logged. Network policies that select the Pod and have a rule that matches the connection are listed in the log message.                                                                                                                                                                  |\n| delegate      | bool      | If false, all allowed connections are logged. If multiple network policies allow a connection, all matching policies are listed in the log message. If true, allowed connections are only logged if they are allowed by a network policy with the logging annotation policy.network.gke.io/enable-logging: \"true\". If multiple network policies allow a connection, all matching policies with the enable-logging annotation are listed in the log message. A configuration error occurs if you set spec.cluster.allow.delegate to true and spec.cluster.allow.log to false.                                                                              |\n| cluster.deny     | struct      | Settings for logging denied connections. FieldTypeDescription log bool If set to true, denied connections in the cluster are logged; otherwise, denied connections are not logged. delegate bool If false, all denied connections are logged. If true, denied connections are only logged if the Pod where the connection was denied is in a namespace with the annotation policy.network.gke.io/enable-deny-logging: \"true\". A configuration error occurs if you set spec.cluster.deny.delegate to true and spec.cluster.deny.log to false.                                                                                      |\n| Field       | Type      | Description                                                                                                                                                                                                                      |\n| log       | bool      | If set to true, denied connections in the cluster are logged; otherwise, denied connections are not logged.                                                                                                                                                                                              |\n| delegate      | bool      | If false, all denied connections are logged. If true, denied connections are only logged if the Pod where the connection was denied is in a namespace with the annotation policy.network.gke.io/enable-deny-logging: \"true\". A configuration error occurs if you set spec.cluster.deny.delegate to true and spec.cluster.deny.log to false.                                                                                                                                      |\n## Accessing network policy logs\nNetwork policy logs are automatically uploaded to [Cloud Logging](/logging/docs) . You can access logs through the Logs Explorer or with the Google Cloud CLI. You can also [route logs](/logging/docs/routing/overview) to a sink.\n- Go to the **Logs Explorer** page in the Google Cloud console. [Go to Logs Explorer](https://console.cloud.google.com/logs/query) \n- Click **Query builder** .\n- Use the following query to find all network policy log records:```\nresource.type=\"k8s_node\"resource.labels.location=\"CLUSTER_LOCATION\"resource.labels.cluster_name=\"CLUSTER_NAME\"logName=\"projects/PROJECT_NAME/logs/policy-action\"\n```Replace the following:- ``: The [Compute Engine location](/compute/docs/regions-zones/viewing-regions-zones) of the cluster.\n- ``: The name of your cluster.\n- ``: The name of your Google Cloud project.\nSee [Using the Logs Explorer](/logging/docs/view/logs-explorer-interface) to learn how to use the Logs Explorer.\nYou can also build a query using the **Query builder** . To create a query for network policy logs, select **policy-action** in the **Log name** drop-down list. If there are no available logs, **policy-action** does not appear in the drop-down list.\nFind all network policy log records:\n```\ngcloud logging read --project \"PROJECT_NAME\" 'resource.type=\"k8s_node\"\u00a0 \u00a0 resource.labels.location=\"CLUSTER_LOCATION\"\u00a0 \u00a0 resource.labels.cluster_name=\"CLUSTER_NAME\"\u00a0 \u00a0 logName=\"projects/PROJECT_NAME/logs/policy-action\"'\n```\nReplace the following:- ``: The name of your Google Cloud project.\n- ``: The [Compute Engine location](/compute/docs/regions-zones/viewing-regions-zones) of the cluster.\n- ``: The name of your cluster.\nYou can add further conditions to filter the results. For example:\n- Show logs in a certain timeframe:```\ntimestamp>=\"2020-06-22T06:30:51.128Z\"\ntimestamp<=\"2020-06-23T06:30:51.128Z\"\n```\n- Show logs for denied connections:```\njsonPayload.disposition=\"deny\"\n```\n- Show logs to a deployment named \"redis\":```\njsonPayload.dest.pod_name=~\"redis\"\njsonPayload.dest.pod_namespace=\"default\"\n```\n- Show logs for cluster-external connections:```\njsonPayload.dest.instance != \"\"\n```\n- Show logs that match a certain network policy, in this case \"allow-frontend-to-db\":```\njsonPayload.policies.name=\"allow-frontend-to-db\"\njsonPayload.policies.namespace=\"default\"\n```\nIf you use a Standard cluster, you can also find the network policy logs generated on each cluster node locally at `/var/log/network/policy_action.log*` . A new numbered log file is created when the current log file reaches 10 MB. Up to five previous log files are stored.\n## Network policy log format\nNetwork policy log records are in a JSON format. This format is described in the following table:\n| ('Field', 'Field', 'Field', 'Field', 'Field') | ('Type', 'Type', 'Type', 'Type', 'Type') | ('Description', 'Description', 'Description', 'Description', 'Description')                                                                                                                          |\n|:------------------------------------------------|:-------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| connection          | struct          | Connection information: FieldTypeDescription src_ipstringSource IP address of the connection. src_portintSource port of the connection. dest_ipstringDestination IP address of the connection. dest_portintDestination port of the connection. protocolstringProtocol of the connection, which can be one of tcp, udp, or icmp. directionstringDirection of the connection, which can be ingress, or egress.                                          |\n| Field           | Type          | Description                                                                                                                                          |\n| src_ip           | string          | Source IP address of the connection.                                                                                                                                    |\n| src_port          | int          | Source port of the connection.                                                                                                                                     |\n| dest_ip           | string          | Destination IP address of the connection.                                                                                                                                   |\n| dest_port          | int          | Destination port of the connection.                                                                                                                                    |\n| protocol          | string          | Protocol of the connection, which can be one of tcp, udp, or icmp.                                                                                                                            |\n| direction          | string          | Direction of the connection, which can be ingress, or egress.                                                                                                                              |\n| src            | struct          | Endpoint information of the source: FieldTypeDescription pod_namestringName of the Pod, if the source is a Pod. pod_namespace (deprecated)stringNamespace of the Pod, if the source is a Pod. pod_namespace is deprecated, use namespace instead. namespacestringNamespace of the Pod, if the source is a Pod. workload_namestringName of the workload, if the source workload is available. workload_kindstringKind of the workload, if the source workload is available. instancestringIP address of the source, if the source is not a Pod.         |\n| Field           | Type          | Description                                                                                                                                          |\n| pod_name          | string          | Name of the Pod, if the source is a Pod.                                                                                                                                   |\n| pod_namespace (deprecated)      | string          | Namespace of the Pod, if the source is a Pod. pod_namespace is deprecated, use namespace instead.                                                                                                                     |\n| namespace          | string          | Namespace of the Pod, if the source is a Pod.                                                                                                                                  |\n| workload_name         | string          | Name of the workload, if the source workload is available.                                                                                                                              |\n| workload_kind         | string          | Kind of the workload, if the source workload is available.                                                                                                                              |\n| instance          | string          | IP address of the source, if the source is not a Pod.                                                                                                                                |\n| dest           | struct          | Endpoint information of the destination: FieldTypeDescription pod_namestringName of the Pod, if the destination is a Pod. pod_namespace (deprecated)stringNamespace of the Pod, if the destination is a Pod. pod_namespace is deprecated, use namespace instead. namespacestringNamespace of the Pod, if the destination is a Pod. workload_namestringName of the workload, if the destination workload is available. workload_kindstringKind of the workload, if the destination workload is available. instancestringIP address of the source, if the destination is not a Pod. |\n| Field           | Type          | Description                                                                                                                                          |\n| pod_name          | string          | Name of the Pod, if the destination is a Pod.                                                                                                                                  |\n| pod_namespace (deprecated)      | string          | Namespace of the Pod, if the destination is a Pod. pod_namespace is deprecated, use namespace instead.                                                                                                                   |\n| namespace          | string          | Namespace of the Pod, if the destination is a Pod.                                                                                                                                |\n| workload_name         | string          | Name of the workload, if the destination workload is available.                                                                                                                             |\n| workload_kind         | string          | Kind of the workload, if the destination workload is available.                                                                                                                             |\n| instance          | string          | IP address of the source, if the destination is not a Pod.                                                                                                                              |\n| disposition          | string          | Disposition of the connection, which can be allow or deny.                                                                                                                              |\n| policies          | list of structs       | Matched policies for the allowed connections from the enforced Pod's view. For ingress connection, the enforced Pod is the destination Pod. For egress connection, the enforced Pod is the source Pod. Multiple policies are logged if a connection is matched by all of them. This field is only included in logs of allowed connections. FieldTypeDescription namestringName of the matching network policy. namespacestringNamespace of the matching network policy.                           |\n| Field           | Type          | Description                                                                                                                                          |\n| name           | string          | Name of the matching network policy.                                                                                                                                    |\n| namespace          | string          | Namespace of the matching network policy.                                                                                                                                   |\n| count           | int          | Used for log aggregation of denied queries. The value is always 1 for allowed connection.                                                                                                                       |\n| node_name          | string          | The node that runs the Pod that generated this log message.                                                                                                                              |\n| timestamp          | string          | When the connection attempt occurred.                                                                                                                                    |\n**Note:** `namespace` , `workload_name` , and `workload_kind` are available in the following versions: - - 1.20.10-gke.2200 to 1.21- - 1.21.4-gke.2300 to 1.22- - 1.22.1-gke.1700 and later\n### Definition of connection\nFor connection-oriented protocols like TCP, a log is created for each allowed or denied connection. For protocols like UDP and ICMP that aren't connection-oriented, packets are grouped into time-window based connections.\n### Policy logs for denied connections\nThe log records for denied connections don't include the `policies` field because the Kubernetes network policy API does not have explicit deny policies. A connection is denied if a Pod is covered by one or more network policies, but none of the policies allow the connection. This means that no policy is individually responsible for a blocked connection.\n### Log aggregation for denied connections\nIt is common for a client to retry a connection that was denied. To prevent excessive logging, repeated denied connections within a five-second window are aggregated into a single log message using the `count` field.\nSubsequent denied connections are aggregated with a previous log message if the connection's `src_ip, dest_ip, dest_port, protocol,` and `direction` match the first denied connection. Note that the `src_port` of subsequent connections does not have to match because retried connections might come from a different port. The aggregated log message includes the `src_prt` of the first denied connection at the beginning of the aggregation window.\n### Example log records\nThe following example network policy named `allow-green` applied to `test-service` allows connections to `test-service` from a Pod named `client-green` . Implicitly, this policy denies all other ingress traffic to `test-service` including from the Pod `client-red` .\n```\n\u00a0 apiVersion: networking.k8s.io/v1\u00a0 kind: NetworkPolicy\u00a0 metadata:\u00a0 \u00a0 name: allow-green\u00a0 \u00a0 namespace: default\u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 policy.network.gke.io/enable-logging: \"true\"\u00a0 spec:\u00a0 \u00a0 podSelector:\u00a0 \u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 \u00a0 app: test-service\u00a0 \u00a0 ingress:\u00a0 \u00a0 - from:\u00a0 \u00a0 \u00a0 - podSelector:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 app: client-green\u00a0 \u00a0 policyTypes:\u00a0 \u00a0 - Ingress\n```\nThis diagram shows the effect of the `allow-green` policy on two connections to `test-service` . The `allow-green` policy allows the connection from `client-green` . Because no policy allows the connection from `client-red` the connection is denied.\nThe log for the allowed connection from `client-green` looks like this:\n```\n{\u00a0 \u00a0\"connection\":{\u00a0 \u00a0 \u00a0 \"src_ip\":\"10.84.0.252\",\u00a0 \u00a0 \u00a0 \"dest_ip\":\"10.84.0.165\",\u00a0 \u00a0 \u00a0 \"src_port\":52648,\u00a0 \u00a0 \u00a0 \"dest_port\":8080,\u00a0 \u00a0 \u00a0 \"protocol\":\"tcp\",\u00a0 \u00a0 \u00a0 \"direction\":\"ingress\"\u00a0 \u00a0},\u00a0 \u00a0\"disposition\":\"allow\",\u00a0 \u00a0\"policies\":[\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"name\":\"allow-green\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"namespace\":\"default\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0],\u00a0 \u00a0\"src\":{\u00a0 \u00a0 \u00a0 \"pod_name\":\"client-green-7b78d7c957-68mv4\",\u00a0 \u00a0 \u00a0 \"pod_namespace\":\"default\",\u00a0 \u00a0 \u00a0 \"namespace\":\"default\",\u00a0 \u00a0 \u00a0 \"workload_name\":\"client-green-7b78d7c957\",\u00a0 \u00a0 \u00a0 \"workload_kind\":\"ReplicaSet\"\u00a0 \u00a0},\u00a0 \u00a0\"dest\":{\u00a0 \u00a0 \u00a0 \"pod_name\":\"test-service-745c798fc9-sfd9h\",\u00a0 \u00a0 \u00a0 \"pod_namespace\":\"default\",\u00a0 \u00a0 \u00a0 \"namespace\":\"default\",\u00a0 \u00a0 \u00a0 \"workload_name\":\"test-service-745c798fc9\",\u00a0 \u00a0 \u00a0 \"workload_kind\":\"ReplicaSet\"\u00a0 \u00a0},\u00a0 \u00a0\"count\":1,\u00a0 \u00a0\"node_name\":\"gke-demo-default-pool-5dad52ed-k0h1\",\u00a0 \u00a0\"timestamp\":\"2020-06-16T03:10:37.993712906Z\"}\n```\nThe log for the denied connection from `client-red` looks like this:\n```\n{\u00a0 \u00a0\"connection\":{\u00a0 \u00a0 \u00a0 \"src_ip\":\"10.84.0.180\",\u00a0 \u00a0 \u00a0 \"dest_ip\":\"10.84.0.165\",\u00a0 \u00a0 \u00a0 \"src_port\":39610,\u00a0 \u00a0 \u00a0 \"dest_port\":8080,\u00a0 \u00a0 \u00a0 \"protocol\":\"tcp\",\u00a0 \u00a0 \u00a0 \"direction\":\"ingress\"\u00a0 \u00a0},\u00a0 \u00a0\"disposition\":\"deny\",\u00a0 \u00a0\"src\":{\u00a0 \u00a0 \u00a0 \"pod_name\":\"client-red-5689846f5b-b5ccx\",\u00a0 \u00a0 \u00a0 \"pod_namespace\":\"default\",\u00a0 \u00a0 \u00a0 \"namespace\":\"default\",\u00a0 \u00a0 \u00a0 \"workload_name\":\"client-red-5689846f5b\",\u00a0 \u00a0 \u00a0 \"workload_kind\":\"ReplicaSet\"\u00a0 \u00a0},\u00a0 \u00a0\"dest\":{\u00a0 \u00a0 \u00a0 \"pod_name\":\"test-service-745c798fc9-sfd9h\",\u00a0 \u00a0 \u00a0 \"pod_namespace\":\"default\",\u00a0 \u00a0 \u00a0 \"namespace\":\"default\",\u00a0 \u00a0 \u00a0 \"workload_name\":\"test-service-745c798fc9\",\u00a0 \u00a0 \u00a0 \"workload_kind\":\"ReplicaSet\"\u00a0 \u00a0},\u00a0 \u00a0\"count\":3,\u00a0 \u00a0\"node_name\":\"gke-demo-default-pool-5dad52ed-k0h1\",\u00a0 \u00a0\"timestamp\":\"2020-06-15T22:38:32.189649531Z\"}\n```\nNote that the denied connection log does not include the `policies` field. This is described in the preceding section, [Policy logs for denied connections](#denied_connection_logs) .\nThe denied connection log includes a `count` field for [aggregating denied connections](#aggregated_deny_logs) .\n## Troubleshooting issues with network policy logs\n- Check for error events in the `NetworkLogging` object:```\nkubectl describe networklogging default\n```If the logging configuration is invalid, the configuration won't take effect and an error will be reported in the events section:```\nName:   default\nNamespace:\nLabels:  addonmanager.kubernetes.io/mode=EnsureExists\nAnnotations: API Version: networking.gke.io/v1alpha1\nKind:   NetworkLogging\nMetadata:\n Creation Timestamp: 2020-06-20T05:54:08Z\n Generation:   8\n Resource Version: 187864\n Self Link:   /apis/networking.gke.io/v1alpha1/networkloggings/default\n UID:     0f1ddd6e-4193-4295-9172-baa6a52aa6e6\nSpec:\n Cluster:\n Allow:\n  Delegate: true\n  Log:  false\n Deny:\n  Delegate: false\n  Log:  false\nEvents:\n Type  Reason     Age    From                Message\n ----  ------     ----    ----                ------ Warning InvalidNetworkLogging 16s (x3 over 11h) network-logging-controller, gke-anthos-default-pool-cee49209-0t09 cluster allow log action is invalid: delegate cannot be true when log is false\n Warning InvalidNetworkLogging 16s (x3 over 11h) network-logging-controller, gke-anthos-default-pool-cee49209-80fx cluster allow log action is invalid: delegate cannot be true when log is false\n```\n- To limit CPU utilization spent on logging, a node can log up to 500 connections per second before it starts dropping logs. The network policies on the node are still being enforced. You can see if there are dropped policy logs by checking if any error counters are incrementing:```\nkubectl exec ANETD_POD_NAME -n kube-system -- curl -s http://localhost:9990/metrics |grep policy_logging\n```Replace `` with the name of an anetd Pod. Check each node. anetd is the networking controller for Dataplane V2.\n### Logs with no name appear for Pods with default deny policies\n[Liveness, readiness, and startup probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/) require that the Pod accept Ingress connections made by the probes from kubelet. To ensure that these probes function correctly, GKE automatically permits probe traffic to the selected Pod as configured for the Pod regardless of any network policies applied to the Pod. You cannot change this behavior.\nLogs for probe connections are similar to the following:\n```\n{\u00a0 \u00a0\"connection\":{\u00a0 \u00a0 \u00a0 \"src_ip\":\"10.88.1.1\",\u00a0 \u00a0 \u00a0 \"dest_ip\":\"10.88.1.4\",\u00a0 \u00a0 \u00a0 \"src_port\":35848,\u00a0 \u00a0 \u00a0 \"dest_port\":15021,\u00a0 \u00a0 \u00a0 \"protocol\":\"tcp\",\u00a0 \u00a0 \u00a0 \"direction\":\"ingress\"\u00a0 \u00a0},\u00a0 \u00a0\"disposition\":\"allow\",\u00a0 \u00a0\"src\":{\u00a0 \u00a0 \u00a0 \"instance\":\"10.88.1.1\"\u00a0 \u00a0},\u00a0 \u00a0\"dest\":{\u00a0 \u00a0 \u00a0 \"pod_name\":\"testpod-745c798fc9-sfd9h\",\u00a0 \u00a0 \u00a0 \"pod_namespace\":\"default\",\u00a0 \u00a0 \u00a0 \"namespace\":\"default\",\u00a0 \u00a0 \u00a0 \"workload_name\":\"testpod-745c798fc9\",\u00a0 \u00a0 \u00a0 \"workload_kind\":\"ReplicaSet\"\u00a0 \u00a0},\u00a0 \u00a0\"count\":1,\u00a0 \u00a0\"policies\": [\u00a0 \u00a0 \u00a0{\u00a0 \u00a0 \u00a0 \u00a0\"name\":\"\"\u00a0 \u00a0 \u00a0}\u00a0 \u00a0 ],\u00a0 \u00a0\"node_name\":\"gke-demo-default-pool-5dad52ed-k0h1\",\u00a0 \u00a0\"timestamp\":\"2021-04-01T12:42:32.1898720941Z\"}\n```\nThe log has the following characteristics:\n- The value of`policies.name`is empty because there is no associated network policy to permit the connection.\n- The value of`connection.src_ip`does not correspond to any Pods or nodes.## What's next\n- Learn how to [view and analyze logs with Cloud Logging](/logging/docs/how-to) .\n- Implement [common approaches to restrict traffic using network policies](https://github.com/GoogleCloudPlatform/anthos-security-blueprints/tree/master/restricting-traffic) .\n- Learn how to [view workload connectivity with GKE Dataplane V2](/anthos/docs/concepts/security-monitoring#view_workload_conectivity) .", "guide": "Google Kubernetes Engine (GKE)"}