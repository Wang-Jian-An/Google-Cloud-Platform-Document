{"title": "Google Kubernetes Engine (GKE) - Set up multi-tenant logging", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/multi-tenant-logging", "abstract": "# Google Kubernetes Engine (GKE) - Set up multi-tenant logging\nThis page explains how to configure multi-tenant logging for Google Kubernetes Engine (GKE) clusters.\nIt's common for multiple teams to share a single GKE cluster. Sharing a cluster provides multiple advantages including easier service discovery, simplified security, and it means that cluster administrators have fewer clusters to maintain. Individual application teams often have their own separate [project](/resource-manager/docs/creating-managing-projects) , however. This structure, having a main GKE cluster, but separate namespaces for each application team, is called multi-tenancy. The application team's project is called the .\nWith Google Cloud, GKE cluster admins can create a system where logs for the cluster remain in the main GKE project, and tenant logs are distributed to tenant projects. To configure your logs this way, use the [Log Router](/logging/docs/routing/overview) . The Log Router gives you control over how logs flow within your Google Cloud project and how logs are routed to supported destinations.\nTo create tenant-specific logs, the cluster admin creates a [sink](/logging/docs/export) to route log entries to each tenant's project. In each tenant project, individual teams can control how the logs are stored and used, such as monitoring the logs by configuring log-based metrics and log-based alerts.\nWe recommend that `_Default` sinks in main GKE projects include an [exclusion filter](/logging/docs/exclusions) . The exclusion filter prevents tenant logs from being ingested in both the main GKE project and the tenant project.\n", "content": "## Prerequisites\n- Become familiar with the following documents about multi-tenancy and routing:- [Best practices for enterprise multi-tenancy on GKE](/kubernetes-engine/docs/best-practices/enterprise-multitenancy) \n- [Route and storage overview](/logging/docs/routing/overview) \n- [Route logs to supported destinations](/logging/docs/export/configure_export_v2) \n- Ensure that you have an existing tenant project and main project.## Configure multi-tenant logging\nYou can configure multi-tenant logging by using the Google Cloud CLI or the Google Cloud console.\nTo configure multi-tenant logging for GKE clusters, complete the following steps:- Set the following environment variables:```\nexport TENANT_NAMESPACE=\"TENANT_NAMESPACE\"export MAIN_PROJECT=\"MAIN_PROJECT_ID\"export TENANT_PROJECT=\"TENANT_PROJECT_ID\"\n```Replace the following:- ``: the name for the tenant project namespace\n- ``: the project ID for your main project\n- ``: the project ID for your tenant project\n- Create a namespace in your multi-tenant cluster:```\nkubectl create namespace $TENANT_NAMESPACE\n```\n- Create a log sink in the GKE project:```\ngcloud logging sinks create gke-$TENANT_NAMESPACE-sink \\logging.googleapis.com/projects/$TENANT_PROJECT \\\u00a0 \u00a0 --project=$MAIN_PROJECT \\\u00a0 \u00a0 --log-filter=resource.labels.namespace_name=\"$TENANT_NAMESPACE\" \\\u00a0 \u00a0 --description=\"Log sink to $TENANT_PROJECT for $TENANT_NAMESPACE namespace\"\n```This command creates a log sink that sends all logs that are related to the `$TENANT_NAMESPACE` namespace to the tenant project.You might need to use a more restrictive `--log-filter` . For example, if your cluster and tenant have the same namespace, then add a cluster filter.For more information about these fields, see the [gcloud logging sinks create API documentation](/sdk/gcloud/reference/logging/sinks/create) .\n- Get the writer identity from the sink in the main project and assign it to an environment variable.```\nexport SERVICE_ACCOUNT=$(gcloud logging sinks describe gke-$TENANT_NAMESPACE-sink \\\u00a0 \u00a0 --project=$MAIN_PROJECT \\\u00a0 \u00a0 --format='value(writerIdentity)')\n```\n- Grant the [Logs Writer](/logging/docs/access-control#logging.logWriter) ( `logging.bucketWriter` ) role to the service account used by the sink. The following command grants the main project permissions to write logs to the tenant project:```\n\u00a0gcloud projects add-iam-policy-binding $TENANT_PROJECT \\\u00a0 \u00a0 \u00a0--member=$SERVICE_ACCOUNT --role='roles/logging.logWriter' \\\u00a0 \u00a0 \u00a0--condition=\"expression=resource.name.endsWith(\\\"projects/$TENANT_PROJECT\\\"),title=Log writer for $TENANT_NAMESPACE,description=Grants Logs Writer role to service account $SERVICE_ACCOUNT used by gke-$TENANT_NAMESPACE-sink\"\n```For more information about these fields, see the [gcloud projects add-iam-policy-binding API documentation](/sdk/gcloud/reference/projects/add-iam-policy-binding) .\n- Optionally, create an exclusion filter for the sink that routes logs to the `_Default` bucket of the main project. If you don't create an exclusion filter on the `_Default` bucket, then the routed logs appear in both the `_Default` bucket of the main project and the tenant log bucket. To create an exclusion filter, do the following:```\ngcloud logging sinks update _Default --project=$MAIN_PROJECT \\\u00a0 \u00a0 --add-exclusion=\"name=gke-$TENANT_NAMESPACE-default-exclusion,description=\\\"Exclusion filter on the _Default bucket for $TENANT_NAMESPACE\\\",filter=resource.labels.namespace_name=\\\"$TENANT_NAMESPACE\\\"\"\n```For more information about these fields, see the [gcloud logging sinks update API documentation](/sdk/gcloud/reference/logging/sinks/update) .\nTo implement multi-tenant logging for GKE, complete the following steps:- Create the log sink in the main project:- Use the Google Cloud console project picker to select the main GKE project.\n- In the navigation panel of the Google Cloud console, select **Logging** , and then select **Log Router** : [Go to Log Router](https://console.cloud.google.com/logs/router) \n- In the **Log Router** page, click **Create sink** .\n- Enter a **Name** and **Description** for your sink and then click **Next** .\n- In the **Select sink service** menu, select **Other project** .\n- In the **Sink destination** field, add the following destination:```\nlogging.googleapis.com/projects/TENANT_PROJECT_ID\n```Replace `` with the project ID of your tenant project.\n- Click **Next** .\n- In the **Build inclusion filter** add the following filter:```\nresource.labels.namespace_name=\"TENANT_NAMESPACE\"\n```Replace with the name of your tenant project's namespace.You might want a more restrictive inclusion filter. For example, when your cluster and tenant have the same namespace, consider adding a clause to include only log entries for a specific cluster.\n- Click **Create sink** . Your new sink appears in the **Log Router Sinks** list.\n- Copy the sink's writer identity to your clipboard:- In the **Log Router** page, locate the log sink.\n- For that sink, clickmore_vert **More** , and then select **View sink details** .\n- In the **Sink details** pane, locate the **Writer identity** field, and then copy the value into your clipboard. Omit`serviceAccount:`from the copied value.\n **Note:** If the **Writer identity** field for your sink lists the value of **None** , then the sink is routing log entries to a log bucket in the current Google Cloud project. That is, you haven't configured the sink to route log entries to a tenant project. For information about how to route log entries to a log bucket in the same Google Cloud project, see [Configure and manage sinks](/logging/docs/export/configure_export_v2) .\n- In the tenant project, grant the [Logs Writer](/logging/docs/access-control#logging.logWriter) ( `roles/logging.logWriter` ) role to the service account used by the main project's sink. The main project needs this permission to write logs to the tenant project.- In the navigation panel of the Google Cloud console, select **IAM** : [Go to IAM](https://console.cloud.google.com/iam-admin/iam) \n- Click **Grant access** .\n- In the **New principals** field, add the sink's service account.\n- From the **Select a role** drop-down, select **Logging** and choose **Logs Writer** .\n- Click **Save** .\n- Optionally, create an exclusion filter in the `_Default` bucket of the main project to prevent logs that are routed to a tenant project from being written to the `_Default` log bucket in the main project:- In the navigation panel of the Google Cloud console, select **Logging** , and then select **Log Router** : [Go to Log Router](https://console.cloud.google.com/logs/router) \n- Next to the`_Default`bucket, clickmore_vert **More** and select **Edit sink** .\n- In the **Choose logs to filter out of sink** section, click **Add exclusion** .\n- Add a filter name.\n- In the **Build an exclusion filter** box, add the following:```\nresource.labels.namespace_name=\"TENANT_NAMESPACE\"\n```\n- Click **Update sink** .\n## Verify tenant logs\nAfter you have begun using workloads that use , you can verify that the tenant project is receiving tenant-specific logs:\n- Select the tenant project by using the Google Cloud console project picker.\n- In the navigation panel of the Google Cloud console, select **Logging** , and then select **Logs Explorer** : [Go to Logs Explorer](https://console.cloud.google.com/logs/query) \n- In the query-editor field, run the following query:```\nresource.labels.namespace_name=\"TENANT_NAMESPACE\"\n```In the **Query results** pane, you should see tenant-specific logs that were routed from the main project.## Use tenant logs\nIn the tenant projects, each team can control how the logs are routed, stored, and analyzed. After the logs are routed to the tenant projects, the individual application teams can choose to route their logs to supported destinations like Logging buckets, or to third-party destinations by using Pub/Sub. For information about routing log entries, see [Route logs to supported destinations](/logging/docs/export/configure_export_v2) .\nIndividual application teams can also set up alerts based on the contents of logs, or metrics derived from logs. For more information, see [Monitor your logs](/logging/docs/alerting/monitoring-logs) .\n## Clean up\nYou can remove the objects you created for multi-tenant logging by using `gcloud` or the Google Cloud console.\n**Important:** Make sure there are no Pods running in the tenant namespace before executing these commands.\nTo remove the objects you created for multi-tenant logging, complete the following steps:- Set variables to simplify the following commands:```\nexport TENANT_NAMESPACE=\"TENANT_NAMESPACE\"export MAIN_PROJECT=\"MAIN_PROJECT_ID\"export TENANT_PROJECT=\"TENANT_PROJECT_ID\"\n```Replace the following:- ``: the name for the tenant project namespace\n- ``: the project ID for your main project\n- ``: the project ID for your tenant project\n- Remove the [Logs Writer](/logging/docs/access-control#logging.logWriter) ( `roles/logging.logWriter` ) role from the service account in the tenant project:```\nexport SERVICE_ACCOUNT=$(gcloud logging sinks describe gke-$TENANT_NAMESPACE-sink \\\u00a0 \u00a0 --project=$MAIN_PROJECT | \\\u00a0 \u00a0 --format='value(writerIdentity)'gcloud projects remove-iam-policy-binding $TENANT_PROJECT \\\u00a0 \u00a0 --member=$SERVICE_ACCOUNT \\\u00a0 \u00a0 --role='roles/logging.logWriter' \\\u00a0 \u00a0 --all\n```\n- Delete the log sink:```\ngcloud logging sinks delete gke-$TENANT_NAMESPACE-sink \\\u00a0 \u00a0 --project=$MAIN_PROJECT\n```\n- Delete the namespace:```\nkubectl delete namespace $TENANT_NAMESPACE\n```\n- In the tenant project, remove the [Logs Writer](/logging/docs/access-control#logging.logWriter) ( `roles/logging.logWriter` ) role from the service account:- In the navigation panel of the Google Cloud console, select **IAM** : [Go to IAM](https://console.cloud.google.com/iam-admin/iam) \n- For the service account you want to delete, click **Edit principal** .\n- In the **Edit access** panel, clickdelete **Delete role** next to the Logs Writer role and click **Save** .\n- In the main project, delete the log sink:- Use the Google Cloud console project picker to select the tenant GKE project.\n- In the navigation panel of the Google Cloud console, select **Logging** , and then select **Log Router** : [Go to Log Router](https://console.cloud.google.com/logs/router) \n- For the sink you want to delete, click **More** .\n- Select **Delete sink** .\n- In the confirmation panel, click **Delete** .\n## Limitations\nMulti-tenant logging has the following limitations:\n- The quota for the number of log sinks per project is 200. If you require more than 200 tenants, request a quota increase by opening a [support case](/support/docs/customer-care-procedures) .\n- There is a limit of 50 exclusion filters per log bucket. If you intend to have more than 50 tenants, the exclusion filter approach for the `_Default` bucket needs to be revised. As an alternative, you might do the following:- Create a single exclusion filter that excludes all non-system or non-default namespaces using this command:```\ngcloud logging sinks update _Default \\--project=$MAIN_PROJECT \\--add-exclusion=\"name=gke-all-tenant-default-exclusion,description=\\\"Exclusion filter on the _Default bucket for all tenants\\\",filter=resource.labels.namespace_name !~ \\\"kube\\\" AND resource.labels.namespace_name !~ \\\"system\\ AND resource.labels.namespace_name != \\\"Default\\\"\"\n```\n- Duplicate logs between the tenant project and the main project by not creating the exclusion filter.\n## What's next\n- Learn about [Best practices for enterprise multi-tenancy on GKE](/kubernetes-engine/docs/best-practices/enterprise-multitenancy) .", "guide": "Google Kubernetes Engine (GKE)"}