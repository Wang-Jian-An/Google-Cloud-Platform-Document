{"title": "Google Kubernetes Engine (GKE) - Provision Anthos Service Mesh on a GKE Autopilot cluster", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/service-mesh", "abstract": "# Google Kubernetes Engine (GKE) - Provision Anthos Service Mesh on a GKE Autopilot cluster\nThis guide describes how to set up managed Anthos Service Mesh on a Google Kubernetes Engine (GKE) Autopilot cluster. Anthos Service Mesh is a fully managed service mesh based on Istio.\nThis tutorial shows you how to configure a production-ready service mesh running on a single GKE Autopilot cluster with default settings. We recommend that you also consult the full [Anthos Service Mesh provisioning guide](/service-mesh/docs/managed/provision-managed-anthos-service-mesh) when you design your environment.", "content": "## Advantages of running managed Anthos Service Mesh with GKE AutopilotWhen you use GKE in Autopilot mode, Google handles setting up and managing your cluster automatically. Autopilot mode streamlines the experience of operating a cluster and lets you focus on your applications. In the same way, managed Anthos Service Mesh is a fully managed service mesh you can provision by following a few steps.- You provision managed Anthos Service Mesh using the [Fleet API](/anthos/fleet-management/docs/fleet-creation) - without the need for client-side tools like`istioctl`.\n- Anthos Service Mesh automatically injects sidecar proxies into workloads without the need for granting elevated privileges to your containers.\n- You can view rich dashboards for your mesh and services without any extra configuration and then use these metrics to configure service level objectives (SLOs) and alerts to monitor the health of your applications\n- The managed Anthos Service Mesh control plane is upgraded automatically to ensure that you get the latest security patches and features\n- The Anthos Service Mesh managed data plane automatically upgrades the sidecar proxies in your workloads so that you don't need to restart services yourself when proxy upgrades and security patches are available\n- Anthos Service Mesh is a supported product and can be configured using standard open source Istio APIs. See [supported features](/service-mesh/docs/managed/supported-features-mcp) .\n## Objectives\n- Create a GKE Autopilot cluster\n- Provision managed Anthos Service Mesh using the Fleet API\n- Deploy mesh ingress gateways into a dedicated namespace\n- Deploy a sample application\n- Configure Anthos Service Mesh to enforce strict mutual TLS (mTLS) authentication for service-to-service communication\n- View the Anthos Service Mesh dashboards and verify that services connect with mTLS\n## Costs\nIn this document, you use the following billable components of Google Cloud:- [GKE](/kubernetes-engine/pricing) \n- [Cloud Load Balancing](/vpc/network-pricing#lb) \n- [Anthos Service Mesh](/service-mesh/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin [Cloud Shell](/shell) is preinstalled with the software you need for this tutorial, including [kubectl](https://kubernetes.io/docs/reference/kubectl/) , the [gcloud CLI](/sdk/gcloud) , [Helm](https://helm.sh/) , and [Terraform](/docs/terraform) . If you don't use Cloud Shell, you must install the gcloud CLI.- Grant roles to your Google Account. Run the following command once for each of the following   IAM roles: `roles/container.containerAdmin, roles/gkehub.admin, roles/serviceusage.serviceUsageAdmin` ```\ngcloud projects add-iam-policy-binding PROJECT_ID --member=\"user:EMAIL_ADDRESS\" --role=ROLE\n```- Replace``with your project ID.\n- Replace``with your email address.\n- Replace``with each individual role.\n### Set up your environmentYou can set up your environment using the gcloud CLI or Terraform.\n- Set environment variables:```\nPROJECT_ID=PROJECT_IDgcloud config set project ${PROJECT_ID}\n```\n- Enable the Mesh API:```\ngcloud services enable mesh.googleapis.com\n```\n```\ngcloud config set project PROJECT_IDGOOGLE_CLOUD_PROJECT=$(gcloud config get-value project)export GOOGLE_CLOUD_PROJECT\n```## Create a GKE clusterCreate a GKE cluster in Autopilot mode.\n- Create a cluster, [registered as a member of a Fleet](/anthos/fleet-management/docs/register/gke) :```\ngcloud container clusters create-auto asm-cluster \\\u00a0 \u00a0 --location=\"us-central1\" \\\u00a0 \u00a0 --enable-fleet\n```\n- Verify the cluster is registered with the Fleet:```\ngcloud container fleet memberships list\n```The output is similar to the following:```\nNAME: asm-cluster\nEXTERNAL_ID: \nLOCATION: us-central1\n```Make note of the membership name, as you need it to configure Anthos Service Mesh.\nTo create a GKE cluster, you can use the [google_container_cluster resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/container_cluster) . You set the `fleet` block so that the cluster is added to a fleet when it is created.\n [  docs/asm-gke-terraform/main.tf ](https://github.com/GoogleCloudPlatform/anthos-service-mesh-samples/blob/HEAD/docs/asm-gke-terraform/main.tf) [View on GitHub](https://github.com/GoogleCloudPlatform/anthos-service-mesh-samples/blob/HEAD/docs/asm-gke-terraform/main.tf) \n```\nresource \"google_container_cluster\" \"cluster\" {\u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"asm-cluster\"\u00a0 location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= var.region\u00a0 deletion_protection = false # Warning: Do not set deletion_protection to false for production clusters\u00a0 enable_autopilot = true\u00a0 fleet {\u00a0 \u00a0 project = data.google_project.project.name\u00a0 }}data \"google_project\" \"project\" {}\n```\nTo learn how to apply or remove a Terraform configuration, see [Basic Terraform commands](/docs/terraform/basic-commands) .## Provision managed Anthos Service MeshYou provision managed Anthos Service Mesh using the `servicemesh` feature on the fleet membership for your cluster.\n- Enable the Anthos Service Mesh fleet feature on the project:```\ngcloud container fleet mesh enable\n```\n- Enable automatic management of the mesh:```\ngcloud container fleet mesh update \\\u00a0 \u00a0 --management=automatic \\\u00a0 \u00a0 --memberships=MEMBERSHIP_NAME \\\u00a0 \u00a0 --location=us-central1\n```Replace `` with the membership name listed when you verified that your cluster is registered to the fleet.\nTo enable the mesh API, you can use the [google_project_service resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/google_project_service) .\nYou use the [google_gke_hub_feature](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/gke_hub_feature) , and [google_gke_hub_feature_membership](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/gke_hub_feature_membership) resources to configure managed Anthos Service Mesh on your cluster.\n [  docs/asm-gke-terraform/main.tf ](https://github.com/GoogleCloudPlatform/anthos-service-mesh-samples/blob/HEAD/docs/asm-gke-terraform/main.tf) [View on GitHub](https://github.com/GoogleCloudPlatform/anthos-service-mesh-samples/blob/HEAD/docs/asm-gke-terraform/main.tf) \n```\nresource \"google_project_service\" \"mesh_api\" {\u00a0 service = \"mesh.googleapis.com\"\u00a0 disable_dependent_services = true}resource \"google_gke_hub_feature\" \"feature\" {\u00a0 name \u00a0 \u00a0 = \"servicemesh\"\u00a0 location = \"global\"\u00a0 depends_on = [\u00a0 \u00a0 google_project_service.mesh_api\u00a0 ]}resource \"google_gke_hub_feature_membership\" \"feature_member\" {\u00a0 location \u00a0 = \"global\"\u00a0 feature \u00a0 \u00a0= google_gke_hub_feature.feature.name\u00a0 membership = google_container_cluster.cluster.fleet.0.membership\u00a0 membership_location = google_container_cluster.cluster.location\u00a0 mesh {\u00a0 \u00a0 management = \"MANAGEMENT_AUTOMATIC\"\u00a0 }}\n```\nTo learn how to apply or remove a Terraform configuration, see [Basic Terraform commands](/docs/terraform/basic-commands) .## Verify the control plane is activeWait until the `controlPlaneManagement.state` is `ACTIVE` . This might take up to 15 minutes.\n```\nwatch -n 30 gcloud container fleet mesh describe\n```\nThe output is similar to:\n```\nmembershipSpecs:\n projects/746296320118/locations/us-central1/memberships/asm-cluster:\n mesh:\n  management: MANAGEMENT_AUTOMATIC\nmembershipStates:\n projects/746296320118/locations/us-central1/memberships/asm-cluster:\n servicemesh:\n  controlPlaneManagement:\n  details:\n  - code: REVISION_READY\n   details: 'Ready: asm-managed'\n  state: ACTIVE\n  dataPlaneManagement:\n  details:\n  - code: PROVISIONING\n   details: Service is provisioning.\n  state: PROVISIONING\n state:\n  code: OK\n  description: 'Revision(s) ready for use: asm-managed.'\n```\nThe `dataPlaneManagement` section remains in the `PROVISIONING` state until you deploy the ingress gateway, because Autopilot clusters don't provision any nodes until you deploy a workload.## Deploy a mesh ingress gatewayIn this section, you deploy a mesh ingress gateway to handle incoming traffic for the sample application. An ingress gateway is a load balancer operating at the edge of the mesh, receiving incoming or outgoing HTTP/TCP connections.\nYou deploy the gateway to a dedicated namespace and label the deployment to ensure that your gateway can be securely managed and automatically upgraded by the Anthos Service Mesh control plane.- Download credentials so that you can access the cluster:```\ngcloud container clusters get-credentials asm-cluster --location=us-central1\n```\n- Create a namespace for the gateway deployment:```\nkubectl create namespace bank-gateways\n```\n- Add a label to the namespace so that the Anthos Service Mesh control plane automatically injects the gateway configuration into the deployment.```\nkubectl label namespace bank-gateways istio-injection=enabled\n```\n- Deploy the ingress gateway to the namespace:\n```\nhelm repo add istio https://istio-release.storage.googleapis.com/chartshelm repo updatehelm install --wait --namespace bank-gateways \\\u00a0 \u00a0 --set resources.requests.cpu=250m \\\u00a0 \u00a0 --set resources.requests.memory=512Mi \\\u00a0 \u00a0 --set resources.requests.ephemeral-storage=1Gi \\\u00a0 \u00a0 --set resources.limits.cpu=250m \\\u00a0 \u00a0 --set resources.limits.memory=512Mi \\\u00a0 \u00a0 --set resources.limits.ephemeral-storage=1Gi \\\u00a0 \u00a0 istio-ingressgateway istio/gateway\n```\n```\nkubectl apply -n bank-gateways \\\u00a0 \u00a0 -k https://github.com/GoogleCloudPlatform/anthos-service-mesh-packages/tree/main/samples/gateways/istio-ingressgatewaykubectl -n bank-gateway wait \"deployment/istio-ingressgateway\" \u00a0\\\u00a0 \u00a0 --for=condition=available --timeout=240s\n```\nEnsure that you set adequate resource requests when you deploy to a production environment. GKE Autopilot [only considersresource values set in requests and not limits](/kubernetes-engine/docs/concepts/autopilot-resource-requests) . The Istio project publishes [information on performance and scalability](https://istio.io/latest/docs/ops/deployment/performance-and-scalability/) .\n## Deploy the sample application\n- Create a Kubernetes namespace for the deployment:```\nkubectl create namespace bank-sample\n```\n- Add a label to the namespace so that Anthos Service Mesh automatically injects sidecar proxies into the sample Pods:```\nkubectl label namespace bank-sample istio-injection=enabled\n```\n- Deploy the sample application:```\ngit clone https://github.com/GoogleCloudPlatform/bank-of-anthos.gitkubectl apply -n bank-sample -f bank-of-anthos/extras/jwt/jwt-secret.yamlkubectl apply -n bank-sample -f bank-of-anthos/kubernetes-manifests/\n```\n- Wait for the application to be ready. It will take several minutes.```\nwatch kubectl -n bank-sample get pods\n```When the application is ready, the output is similar to the following:```\nNAME         READY STATUS RESTARTS AGE\naccounts-db-0      2/2  Running 0   2m16s\nbalancereader-5c695f78f5-x4wlz  2/2  Running 0   3m8s\ncontacts-557fc79c5-5d7fg    2/2  Running 0   3m7s\nfrontend-7dd589c5d7-b4cgq   2/2  Running 0   3m7s\nledger-db-0       2/2  Running 0   3m6s\nledgerwriter-6497f5cf9b-25c6x  2/2  Running 0   3m5s\nloadgenerator-57f6896fd6-lx5df  2/2  Running 0   3m5s\ntransactionhistory-6c498965f-tl2sk 2/2  Running 0   3m4s\nuserservice-95f44b65b-mlk2p   2/2  Running 0   3m4s\n```\n- Create Istio `Gateway` and `VirtualService` resources to expose the application behind the ingress gateway:```\nkubectl apply -n bank-sample -f bank-of-anthos/extras/istio/frontend-ingress.yaml\n```\n- Get a link to the sample application:```\nINGRESS_HOST=$(kubectl -n bank-gateways get service istio-ingressgateway \\\u00a0 \u00a0 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')echo \"http://$INGRESS_HOST\"\n```\n- In a browser, follow the link to open the sample application. Login with the default username and password to view the application.\n## Enforce mutual TLSMake sure that STRICT [mutual TLS (mTLS)](/service-mesh/docs/security/security-overview#mutual_tls) mode is enabled. Apply a default `PeerAuthentication` policy for the mesh in the istio-system namespace.- Save the following manifest as `mesh-peer-authn.yaml` :```\napiVersion: \"security.istio.io/v1beta1\"kind: \"PeerAuthentication\"metadata:\u00a0 name: \"default\"\u00a0 namespace: \"istio-system\"spec:\u00a0 mtls:\u00a0 \u00a0 mode: STRICT\n```\n- Apply the manifest to the cluster:```\nkubectl apply -f mesh-peer-authn.yaml\n```\nYou can override this configuration by creating `PeerAuthentication` resources in specific namespaces.## Explore the Anthos Service Mesh dashboards\n- In Google Cloud console, go to **Anthos Service Mesh** to view the dashboards for your mesh: [Go to Anthos Service Mesh](https://console.cloud.google.com/anthos/services) \n- Select the project from the drop-down list on the menu bar.You see an overview table with all of the microservices in your mesh and a graphical visualization of the connections between the microservices. For each microservice, the table shows three of the SRE [\"golden signals\"](https://sre.google/sre-book/monitoring-distributed-systems/#xref_monitoring_golden-signals) :- Traffic - requests per second\n- Error rate - a percentage\n- Latency - milliseconds\nThese metrics are based on the actual traffic being handled by the microservices. Constant test traffic is automatically sent to the `frontend` service by a `loadgenerator` client deployed as part of the sample application. Anthos Service Mesh automatically sends metrics, logs, and (optionally) traces to Google Cloud Observability.\n- Click the [frontend service](https://console.cloud.google.com/anthos/services/service/bank-sample/frontend/overview) in the table to see an overview dashboard for the service. You see additional metrics for the service and a visualization of inbound and outbound connections. You can also create a [Service Level Object (SLO)](/service-mesh/docs/observability/slo-overview) for monitoring and alerting on the service.\n### Verify that mTLS is enabledClick the [security link](https://console.cloud.google.com/anthos/services/service/bank-sample/frontend/security) in the panel to see a security overview for the `frontend` service. The table and the visualization show a green lock icon for each of the inbound and outbound connections between microservices. This icon indicates that the connection is using mTLS for authentication and encryption.## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\nTo avoid incurring charges to your Google Cloud account for the resources used in this tutorial:\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- Delete a Google Cloud project:\n- ```\ngcloud projects delete PROJECT_ID\n```\n### Delete the individual resourcesIf you used an existing project and you don't want to delete it, delete the individual resources.\n- Delete the sample application and gateways:```\nkubectl delete namespace bank-samplekubectl delete namespace bank-gateways\n```\n- Follow the [instructions to uninstall Anthos Service Mesh](/service-mesh/docs/uninstall#managed-anthos-service-mesh) \n- Delete the GKE cluster:```\ngcloud container clusters delete --region us-central1 asm-cluster --quiet\n```\nDelete the resources that you created with Terraform:\n```\n\u00a0 terraform destroy\n```## What's next\n- [Learn more about Anthos Service Mesh](/service-mesh/docs/overview) \n- [Explore the Anthos Service Mesh observability dashboards](/service-mesh/docs/observability-overview) \n- [Define and alert based on service level objectives (SLOs)](/service-mesh/docs/observability/slo-overview) \n- [Configure authorization policies](/service-mesh/docs/security/authorization-policy-overview) \n- [Learn about service mesh security best practices](/service-mesh/docs/security/anthos-service-mesh-security-best-practices)", "guide": "Google Kubernetes Engine (GKE)"}