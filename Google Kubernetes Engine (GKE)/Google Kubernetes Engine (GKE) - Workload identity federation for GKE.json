{"title": "Google Kubernetes Engine (GKE) - Workload identity federation for GKE", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/workload-identity", "abstract": "# Google Kubernetes Engine (GKE) - Workload identity federation for GKE\nWorkload identity federation for GKE is the recommended way for your workloads running on Google Kubernetes Engine (GKE) to access Google Cloud services in a secure and manageable way.\nFor more information on how to enable and use workload identity federation for GKE in GKE, see [Use workload identity federation for GKE](/kubernetes-engine/docs/how-to/workload-identity) .\nYou can use [fleet workload identity](/anthos/fleet-management/docs/use-workload-identity) to provide workload identity federation support for clusters registered in [fleets](/anthos/fleet-management/docs) , including GKE Enterprise clusters.\n", "content": "## Terminology\nThis document distinguishes between [Kubernetes service accounts](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) and [Identity and Access Management (IAM) service accounts](/iam/docs/service-accounts) .\n## What is workload identity federation for GKE?\nApplications running on GKE might need access to [Google Cloud APIs](/apis) such as Compute Engine API, BigQuery Storage API, or Machine Learning APIs.\nWorkload identity federation for GKE allows a Kubernetes service account in your GKE cluster to act as an IAM service account. Pods that use the configured Kubernetes service account automatically authenticate as the IAM service account when accessing Google Cloud APIs. Using workload identity federation for GKE lets you assign distinct, fine-grained identities and authorization for each application in your cluster.\nWorkload identity federation for GKE replaces the need to use [Metadata concealment](/kubernetes-engine/docs/how-to/protecting-cluster-metadata) . The sensitive metadata protected by metadata concealment is also protected by workload identity federation for GKE.\n## How workload identity federation for GKE works\nWhen you enable workload identity federation for GKE on a cluster and configure a Kubernetes ServiceAccount to impersonate an IAM service account, GKE does the following:\n- Creates a fixed for the cluster's Google Cloud project with the following format:```\nPROJECT_ID.svc.id.goog\n```The workload identity pool provides a naming format that allows IAM to understand and trust Kubernetes ServiceAccount credentials.\n- Registers the GKE cluster as an identity provider in the workload identity pool.\n- Deploys the [GKE metadata server](#metadata_server) , which intercepts credential requests from workloads, on every node.\n- Creates an identity for Kubernetes ServiceAccounts that IAM can understand. This identity has the following format:```\nserviceAccount:PROJECT_ID.svc.id.goog[KUBERNETES_NAMESPACE/KUBERNETES_SERVICE_ACCOUNT]\n```This identity has the following parameters:- ``: your Google Cloud project ID.\n- ``: the namespace of the Kubernetes ServiceAccount.\n- ``: the name of the Kubernetes ServiceAccount.**Note:** Enabling workload identity federation for GKE on the cluster doesn't grant your workloads any additional IAM permissions.\n### Configure workloads to use workload identity federation for GKE\nTo configure workload identity federation for GKE, you do the following:\n- Create an IAM service account and give it access to specific Google Cloud APIs.\n- Use an IAM policy to bind the IAM service account to a Kubernetes ServiceAccount.\n- Annotate the Kubernetes ServiceAccount object with the name of the bound IAM service account.\n- Assign the Kubernetes ServiceAccount to workloads that require access to the Google Cloud APIs.\n### Credential flow\nWhen a workload sends a request to access a Google Cloud API, for example when using a Google Cloud client library, the following authentication steps occur:\n- [Application default credentials (ADC)](/docs/authentication/application-default-credentials#attached-sa) requests a Google Cloud access token from the Compute Engine metadata server that runs on the VM.\n- The GKE metadata server intercepts the token request and asks the Kubernetes API server for a Kubernetes ServiceAccount token that identifies the requesting workload. This credential is a JSON web token (JWT) signed by the cluster certificate authority (CA).\n- The GKE metadata server uses [Security Token Service](/iam/docs/reference/sts/rest) to exchange the JWT for a short-lived federated Google Cloud access token that references the identity of the Kubernetes workload.\n- If the requesting workload ServiceAccount is annotated to impersonate a specific IAM service account, the GKE metadata server requests an IAM access token for that service account.\n- The GKE metadata server provides the IAM service account access token to the workload.\nThe workload can then access any Google Cloud APIs that the impersonated IAM service account is authorized to access.\n**Note:** Even with workload identity federation for GKE configured on a cluster, GKE still uses the configured IAM service account for the node pool to pull container images from the image registry. If you encounter `ImagePullBackOff` or `ErrImagePull` errors, see [Troubleshooting](/kubernetes-engine/docs/troubleshooting#ImagePullBackOff) .\n## Identity sameness\nThe member name that IAM uses to verify a Kubernetes service account with workload identity federation for GKE uses the following variables:\n- The Kubernetes service account name.\n- The namespace of the Kubernetes service account.\n- The Google Cloud project ID.\nIf your project has multiple clusters that have the same name and namespace for a Kubernetes service account, all the accounts resolve to the same member name. This common identity allows you to grant access to Google Cloud resources to the workload identity pool instead of individual clusters.\nFor example, consider the following diagram. Clusters A, B, and C belong to the same Google Cloud project, and therefore to the same workload identity pool. Applications in the `backend` namespace of both Cluster A and Cluster B can authenticate as the `back` IAM service account when accessing Google Cloud resources. IAM doesn't distinguish between the clusters making the calls.\nThis identity sameness also means that you must be able to trust every cluster in a specific workload identity pool. For example, if Cluster C in the previous example was owned by an untrusted team, they could create a `backend` namespace and access Google Cloud APIs using the `back` IAM service account, just like Cluster A and Cluster B.\nTo avoid untrusted access, place your clusters in separate projects to ensure that they get different workload identity pools, or ensure that the namespace names are distinct from each other to avoid a common member name.\n## Understanding the GKE metadata server\nEvery node in a GKE with workload identity federation for GKE enabled stores its metadata on the . The GKE metadata server is a subset of the [Compute Engine metadata server](/compute/docs/metadata/overview) endpoints required for Kubernetes workloads.\nThe GKE metadata server runs as a DaemonSet, with one Pod on every Linux node or a native Windows service on every Windows node in the cluster. The metadata server intercepts HTTP requests to `http://metadata.google.internal` ( `169.254.169.254:80` ). For example, the `GET /computeMetadata/v1/instance/service-accounts/default/token` request retrieves a token for the IAM service account that the Pod is configured to impersonate. Traffic to the GKE metadata server never leaves the VM instance that hosts the Pod.\n**Note:** If you have a strict [cluster network policy](/kubernetes-engine/docs/how-to/network-policy) in place, you must allow egress to the following IP addresses and port numbers so your Pod can communicate with the GKE metadata server. For clusters running GKE version 1.21.0-gke.1000 and later, allow egress to `169.254.169.252/32` on port `988` . For clusters running GKE versions prior to 1.21.0-gke.1000, allow egress to `127.0.0.1/32` on port `988` . For clusters running GKE Dataplane V2, ensure that you allowed egress to `169.254.169.254/32` on port `80` .\nThe following tables describe the subset of Compute Engine metadata server endpoints available with the GKE metadata server. For a full list of endpoints available in the Compute Engine metadata server, see [Default VM metadata values](/compute/docs/metadata/default-metadata-values) .\n### Instance metadata\nInstance metadata is stored under the following directory.\n`http://metadata.google.internal/computeMetadata/v1/instance/`\n| Entry    | Description                                                                                                                 |\n|:------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| hostname   | The hostname of your node.                                                                                                             |\n| id    | The unique ID of your node.                                                                                                             |\n| service-accounts/ | A directory of service accounts associated with the node. For each service account, the following information is available: aliases email: the service account email address. identity: a JSON Web Token (JWT) unique to the node. You must include the audience parameter in your request. For example, ?audience=http://www.example.com. scopes: the access scopes assigned to the service account. token: the OAuth 2.0 access token to authenticate your workloads. |\n| zone    | The Compute Engine zone of your GKE node.                                                                                                          |\nInstance attributes are stored under the following directory.\n`http://metadata.google.internal/computeMetadata/v1/instance/attributes/`\n| Entry   | Description          |\n|:-----------------|:---------------------------------------------------|\n| cluster-location | The Compute Engine zone or region of your cluster. |\n| cluster-name  | The name of your GKE cluster.      |\n| cluster-uid  | The UID of your GKE cluster.      |\n### Project metadata\nCluster project metadata is stored under the following directory.\n`http://metadata.google.internal/computeMetadata/v1/project/`\n| Entry    | Description      |\n|:-------------------|:----------------------------------|\n| project-id   | Your Google Cloud project ID.  |\n| numeric-project-id | Your Google Cloud project number. |\n## Restrictions of workload identity federation for GKE\n- You can't change the name of the workload identity pool that GKE creates for your Google Cloud project.\n- When GKE enables the [GKE metadata server](/kubernetes-engine/docs/concepts/workload-identity#metadata_server) on a node pool, Pods can no longer access the [Compute Engine metadata server](/compute/docs/metadata/overview) . Instead, the GKE metadata server intercepts requests made from these pods to metadata endpoints, with the exception of Pods running on the host network. **Caution:** Pods running on the [host network](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#hosts-namespaces) ( `hostNetwork: true` ) don't use workload identity federation for GKE. GKE automatically routes requests from these Pods to the Compute Engine metadata server.\n- The GKE metadata server takes a few seconds to start accepting requests on a newly created Pod. Therefore, attempts to authenticate using workload identity federation for GKE within the first few seconds of a Pod's life might fail. Retrying the call will resolve the problem. See [Troubleshooting](/kubernetes-engine/docs/troubleshooting/troubleshooting-security#troubleshoot-timeout) for more details.\n- GKE built-in logging and monitoring agents continue to use the [node's service account](/kubernetes-engine/docs/how-to/hardening-your-cluster#use_least_privilege_sa) .\n- Workload identity federation for GKE requires [manual setup for Cloud Run for Anthos tocontinue releasing request metrics](/anthos/run/docs/setup#workload-identity) .\n- Workload identity federation for GKE sets a limit of 500 connections to the GKE metadata server for each node to avoid memory issues. You may experience timeouts if your nodes exceed this limit.\n- Workload identity federation for GKE for [Windows Server nodes](/kubernetes-engine/docs/how-to/creating-a-cluster-windows) is available in GKE versions 1.18.16-gke.1200, 1.19.8-gke.1300, 1.20.4-gke.1500 and later.\n- The GKE metadata server uses memory resources proportional to the total number of Kubernetes service accounts in your cluster. If your cluster has more than 3000 Kubernetes service accounts, the kubelet might terminate the metadata server Pods. For mitigations, refer to [Troubleshooting](/kubernetes-engine/docs/troubleshooting/troubleshooting-security#metadata-server-crashes) .## Alternatives to workload identity federation for GKE\nYou can use one of the following alternatives to workload identity federation for GKE to access Google Cloud APIs from GKE. We recommend that you use workload identity federation for GKE because these alternatives require you to make certain security compromises.\n- Use the [Compute Engine default service account](/compute/docs/access/service-accounts) of your nodes. You can run node pools as any [IAM service account](/kubernetes-engine/docs/how-to/hardening-your-cluster#use_least_privilege_sa) in your project. If you do not specify a service account during node pool creation, GKE uses the [Compute Engine default service account](/compute/docs/access/service-accounts#default_service_account) for the project. The Compute Engine service account is shared by all workloads deployed on that node. This can result in over-provisioning of permissions, which violates the principle of least privilege and is inappropriate for multi-tenant clusters.\n- [Export service account keys](/iam/docs/keys-create-delete#creating) and store them as [Kubernetes Secrets](https://kubernetes.io/docs/concepts/configuration/secret/) that you mount to your Pods as volumes. **Caution:** Service account keys are a security risk if not managed correctly. You should [ choose a more secure alternative to service account keys](/docs/authentication#auth-decision-tree) whenever possible. If you must authenticate with a service account key, you are responsible for the security of the private key and for other management operations such as [key rotation](/iam/docs/key-rotation) . For more information, see [best practices for managingservice account keys](/iam/docs/best-practices-for-managing-service-account-keys) .## What's next\n- [Learn how to enable and configure workload identity federation for GKE](/kubernetes-engine/docs/how-to/workload-identity) .\n- [Learn about the Compute Engine metadata server](/compute/docs/metadata/overview) .", "guide": "Google Kubernetes Engine (GKE)"}