{"title": "Google Kubernetes Engine (GKE) - Manually install a CSI driver", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/persistent-volumes/install-csi-driver", "abstract": "# Google Kubernetes Engine (GKE) - Manually install a CSI driver\nThis page explains how to install a Container Storage Interface (CSI) storage driver on Google Kubernetes Engine (GKE) Standard clusters. This page doesn't apply to GKE Autopilot clusters, which automatically use the [Compute Engine persistent disk CSI driver](/kubernetes-engine/docs/how-to/persistent-volumes/gce-pd-csi-driver#using_the_for_linux_clusters) .\nIf you are using the [Compute Engine persistent disk CSI driver](https://github.com/kubernetes-sigs/gcp-compute-persistent-disk-csi-driver) in your Standard cluster, we recommend [automatically deploying the driver](/kubernetes-engine/docs/how-to/persistent-volumes/gce-pd-csi-driver) to reduce your management overhead.\n", "content": "## Overview\n[CSI](https://github.com/container-storage-interface/spec/blob/master/spec.md) is an open standard API that enables Kubernetes to expose arbitrary storage systems to containerized workloads. Kubernetes volumes are managed by vendor-specific storage drivers, which have historically been [compiled into Kubernetes binaries](https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes) . Previously, you could not use a storage driver that was not included with Kubernetes. Installing a CSI driver adds support for a storage system that is not natively supported by Kubernetes. Also, CSI enables the use of modern storage features, such as snapshots and resizing.\n**Note:** GKE on VMware 1.5 does not support Kubernetes CSI snapshots.\n## Installing a vendor's CSI driver\nOther storage vendors develop their own CSI drivers, and they are responsible for providing installation instructions. In simple cases, installation might only involve deploying manifests to your clusters. See the list of [CSIdrivers](https://kubernetes-csi.github.io/docs/drivers.html) in the CSI documentation.\n**Note:** Google does not provide support for, nor instructions for installing, other vendors' drivers.\n## Verifying a driver installation\nAfter you install a CSI driver, you can verify the installation by running one of the following commands, depending on your cluster's GKE version:\n```\nkubectl get csinodes \\\n-o jsonpath='{range .items[*]} {.metadata.name}{\": \"} {range .spec.drivers[*]} {.name}{\"\\n\"} {end}{end}'\n```\n```\nkubectl get nodes \\\n-o jsonpath='{.items[*].metadata.annotations.csi\\.volume\\.kubernetes\\.io\\/nodeid}'\n```\n## Using a CSI driver\nTo use a CSI driver:\n- Create a Kubernetes [StorageClass](https://kubernetes.io/docs/concepts/storage/storage-classes/) that references the driver in its `provisioner` field, if a StorageClass is not created for you as part of driver installation. Some CSI drivers deploy a StorageClass when you install them.\n- To provision storage, you can either:- Reference the StorageClass in the`volumeClaimTemplates`specification for a [StatefulSet](/kubernetes-engine/docs/concepts/statefulset) object.\n- [Set it as the cluster's default StorageClass](https://kubernetes.io/docs/tasks/administer-cluster/change-default-storage-class/) .\n### Considerations for StorageClasses backed by a CSI driver\nWhen you create a StorageClass, consider the following:\n- CSI driver documentation should include the [driver-specific parameters](https://kubernetes.io/docs/concepts/storage/storage-classes/#the-storageclass-resource) that you provide to your StorageClass, including the provisioner name.\n- You should name the StorageClass after its properties, rather than after the name of the specific driver or appliance behind it. Naming the StorageClass after its properties allows you to create StorageClasses with the same name across multiple clusters and environments, and allows your applications to get storage with the same properties across clusters.\n### Example: Reference StorageClass in a StatefulSet\nThe following example models how to define a CSI driver in a StorageClass, and then reference the StorageClass in a [StatefulSet](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/) workload. The example assumes the driver has already been installed to the cluster.\nThe following is a simple StorageClass named `premium-rwo` that uses a fictional CSI driver, `csi.example.com` , as its provisioner:\n```\n# fast-sc.yamlapiVersion: storage.k8s.io/v1kind: StorageClassmetadata:\u00a0 name: premium-rwoprovisioner: csi.example.com # CSI driverparameters: # You provide vendor-specific parameters to this specification\u00a0 type: example-parameter # Be sure to follow the vendor's instructions\u00a0 datastore: my-datastorereclaimPolicy: RetainallowVolumeExpansion: true\n```\nYou reference the StorageClass in a StatefulSet's `volumeClaimTemplates` specification.\nWhen you reference a StorageClass in a StatefulSet's `volumeClaimTemplates` specification, Kubernetes provides stable storage using PersistentVolumes. Kubernetes calls the provisioner defined in the StorageClass to create a new storage volume. In this case, Kubernetes calls the fictional `csi.example.com` provider, which calls out to the provider's API, to create a volume. After the volume is provisioned, Kubernetes automatically creates a PersistentVolume to represent the storage.\nHere is a simple StatefulSet that references the StorageClass:\n```\n# statefulset.yamlapiVersion: apps/v1kind: StatefulSetmetadata:\u00a0 name: webspec:\u00a0 replicas: 2\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: nginx\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: nginx\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: nginx\u00a0 \u00a0 \u00a0 \u00a0 image: registry.k8s.io/nginx-slim:0.8\u00a0 \u00a0 \u00a0 \u00a0 volumeMounts:\u00a0 \u00a0 \u00a0 \u00a0 - name: www\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mountPath: /usr/share/nginx/html\u00a0 volumeClaimTemplates: # This is the specification in which you reference the StorageClass\u00a0 - metadata:\u00a0 \u00a0 \u00a0 name: www\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 accessModes: [ \"ReadWriteOnce\" ]\u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 storage: 1Gi\u00a0 \u00a0 \u00a0 storageClassName: premium-rwo # This field references the existing StorageClass\n```\n## What's next\n- Learn more about GKE [storage concepts](/kubernetes-engine/docs/concepts/storage-overview) .", "guide": "Google Kubernetes Engine (GKE)"}