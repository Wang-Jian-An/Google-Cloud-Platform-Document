{"title": "Google Kubernetes Engine (GKE) - Use Image streaming to pull container images", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/image-streaming", "abstract": "# Google Kubernetes Engine (GKE) - Use Image streaming to pull container images\nThis page shows you how to use in Google Kubernetes Engine (GKE) to pull container images by streaming the image data as your applications need it.\nNew Autopilot clusters that run GKE version 1.25.5-gke.1000 and later automatically use Image streaming to pull eligible images. The instructions on this page only apply to Standard clusters.\n", "content": "## Overview\nImage streaming is a method of pulling container images in which GKE streams data from eligible images as requested by your applications. You can use Image streaming to allow your workloads to initialize without waiting for the entire image to download, which leads to significant improvements in initialization times. The shortened pull time provides you with benefits including the following:\n- Faster autoscaling\n- Reduced latency when pulling large images\n- Faster Pod startup\nWith Image streaming, GKE uses a remote filesystem as the root filesystem for any containers that use eligible container images. GKE streams image data from the remote filesystem as needed by your workloads. Without Image streaming, GKE downloads the entire container image onto each node and uses it as the root filesystem for your workloads.\nWhile streaming the image data, GKE downloads the entire container image onto the local disk in the background and caches it. GKE then serves future data read requests from the cached image.\nWhen you deploy workloads that need to read specific files in the container image, the Image streaming backend serves only those requested files.\n## Requirements\nYou must meet the following requirements to use Image streaming in GKE Autopilot and Standard clusters:\n- You must enable the Container File System API. [EnableContainer File System API](https://console.cloud.google.com/apis/library/containerfilesystem.googleapis.com?q=container%20file%20system) \n- New Autopilot clusters must run GKE version 1.25.5-gke.1000 or later to have Image streaming automatically enabled. For instructions, refer to [Set the version and release channel of a new Autopilot cluster](/kubernetes-engine/docs/how-to/creating-an-autopilot-cluster#set-version) .\n- New and existing GKE Standard clusters must run version 1.18.6-gke.4801 or later.\n- You must use the Container-Optimized OS with containerd [node image](/kubernetes-engine/docs/concepts/node-images#cos) . Autopilot nodes always use this node image.\n- Your container images must be stored in Artifact Registry.\n- If you use [private clusters](/kubernetes-engine/docs/concepts/private-cluster-concept) , you must [enable Private Google Access](/vpc/docs/configure-private-google-access#enabling-pga) on the subnet for your nodes to access the Image streaming Service.\n- If VPC Service Controls protects your container images and you use Image streaming, you must also include the Image streaming API ( `containerfilesystem.googleapis.com` ) in the service perimeter.## Limitations\n- You can't [use a Secret to pull container images](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) on GKE versions prior to 1.23.5-gke.1900.\n- Container images that use the [V2 Image Manifest, schema version 1](https://docs.docker.com/registry/spec/manifest-v2-1/) are not eligible.\n- Container images encrypted with [customer-managed encryption keys (CMEK)](/kubernetes-engine/docs/how-to/using-cmek) are eligible for Image streaming on GKE version 1.25.3-gke.1000 or later. In previous versions, GKE downloads these images without streaming the data. You can still use CMEK to protect attached [persistent disks](/compute/docs/disks#pdspecs) and [custom boot disks](/kubernetes-engine/docs/how-to/custom-boot-disks) in clusters that use Image streaming.\n- Container images with duplicate layers are only eligible for Image streaming on GKE version 1.28 or later. In earlier versions, GKE downloads these images without streaming the data. Check your container image for [empty layers or duplicate layers](#check-for-empty-or-duplicate-layers) .\n- The Artifact Registry repository must be in the same [region](/artifact-registry/docs/repositories/repo-locations#location-r) as your GKE nodes, or in a [multi-region](/artifact-registry/docs/repositories/repo-locations#location-mr) that corresponds with the region where your nodes are running. For example:- If your nodes are in`us-east1`, Image streaming is available for repositories in the`us-east1`region or the`us`multi-region since both GKE and Artifact Registry are running in data center locations within the United States.\n- If your nodes are in the`northamerica-northeast1`region, the nodes are running in Canada. In this situation, Image streaming is only available for repositories in the same region.\n- If your workloads read many files in an image during initialization, you might notice increased initialization times because of the latency added by the remote file reads.\n- You might not notice the benefits of Image streaming during the first pull of an eligible image. However, after Image streaming caches the image, future image pulls on any cluster benefit from Image streaming.\n- GKE Standard clusters use the cluster-level configuration to determine whether to enable Image streaming on new node pools created using [node auto-provisioning](/kubernetes-engine/docs/how-to/node-auto-provisioning) . However, you cannot use [workload separation](/kubernetes-engine/docs/how-to/workload-separation) to create node pools with Image streaming enabled when Image streaming is disabled at the cluster level.\n- Linux file capabilities such as`CAP_NET_RAW`are supported with Image streaming in GKE version 1.22.6-gke.300 and later. For previous GKE versions, these capabilities are not available when the image file is streamed, or when the image is saved to the local disk. To avoid potential disruptions, do not use Image streaming for containers with these capabilities in GKE versions prior to 1.22.6-gke.300. If your container relies on Linux file capabilities, it might fail to start with permission denied errors when running with Image streaming enabled.## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.\n- Enable the Container File System API. [EnableContainer File System API](https://console.cloud.google.com/apis/library/containerfilesystem.googleapis.com?q=container%20file%20system) ## Enable Image streaming on clusters\nYou can enable Image streaming on new or existing Standard clusters by using the gcloud CLI `--enable-image-streaming` flag, or using the Google Cloud console. By default, node pools in the cluster inherit the Image streaming setting at the cluster level. You can change this behaviour by [enabling or disabling Image streaming on node pools](#enable_on_node_pools) in the cluster.\nAll new [Autopilot](/kubernetes-engine/docs/concepts/autopilot-overview) clusters that run GKE version 1.25.5-gke.1000 and later use Image streaming to pull eligible images. For instructions, refer to [Set the version and release channel of a new Autopilot cluster](/kubernetes-engine/docs/how-to/creating-an-autopilot-cluster#set-version) . The following instructions only apply to GKE Standard clusters.\n### On a new cluster\nYou can enable Image streaming on new clusters using the gcloud CLI or the Google Cloud console.\nTo create a new cluster with Image streaming enabled, run the following command:\n```\ngcloud container clusters create CLUSTER_NAME \\\u00a0 \u00a0 --zone=COMPUTE_ZONE \\\u00a0 \u00a0 --image-type=\"COS_CONTAINERD\" \\\u00a0 \u00a0 --enable-image-streaming\n```\nReplace the following:- ``: the name of your new cluster.\n- ``: the Compute Engine [zone](/compute/docs/zones#available) for your new cluster. For regional clusters, use the`--region=` ``flag instead. Ensure that the zone or region is the same region or is within the multi-region of the Artifact Registry repository that contains the image.\n **Note:** This command creates a new cluster with Image streaming enabled in the default node pool. New node pools you create will also have Image streaming enabled unless you [disable it when creating the node pools](#disable_new_node_pools) .- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click **Create** .\n- In the **GKE Standard** section, click **Configure** .\n- From the navigation pane, under **Cluster** , click **Features** .\n- In the **Other** section, select the **Enable Image streaming** checkbox.\n- Configure the cluster as needed, and then click **Create** .\n### On an existing cluster\nYou can enable Image streaming on existing clusters that meet the [requirements](#requirements) using either the gcloud CLI or the Google Cloud console.\nTo update an existing cluster to use Image streaming, run the following command using the gcloud CLI:\n```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --enable-image-streaming\n```- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click the name of the cluster you want to modify.\n- On the **Clusters** page, in the **Features** section, click next to **Image streaming** .\n- In the **Edit Image streaming** dialog box, select the **EnableImage streaming** checkbox.\n- Click **Save changes** .\nAfter you modify the cluster, GKE enables Image streaming on your existing node pools automatically by default. If you explicitly enabled or disabled Image streaming on individual node pools, those node pools do not inherit the changes to the cluster-level setting.\n**Note:** Changing the Image streaming setting on a cluster causes GKE to recreate nodes in node pools that inherit the cluster-level setting. Although GKE respects [maintenance windows](/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions#maintenance_windows) when recreating nodes, your workloads might still experience disruptions.\n### Verify Image streaming is enabled on a cluster\nYou can check whether Image streaming is enabled at the cluster level using either the gcloud CLI or the Google Cloud console.\nRun the following command:\n```\ngcloud container clusters describe CLUSTER_NAME \\\u00a0 \u00a0 --flatten \"nodePoolDefaults.nodeConfigDefaults\"\n```\nThe setting is enabled if the output is similar to the following:\n```\ngcfsConfig:\n enabled: true\n...\n```\nThe setting is disabled if the output is similar to the following:\n```\ngcfsConfig: {}\n...\n```- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click the name of the cluster you want to check.\n- On the **Clusters** page, in the **Features** section, next to **Image streaming** it will show whether the setting is enabled.## Enable Image streaming on node pools\nBy default, node pools inherit the Image streaming setting at the cluster level. You can enable or disable Image streaming on specific node pools using the gcloud CLI.\n**Note:** When you change the Image streaming setting on a specific node pool, the node pool no longer inherits changes to the cluster-level Image streaming setting.\n### On a new node pool\nTo create a new node pool with Image streaming enabled, run the following command:\n```\ngcloud container node-pools create NODE_POOL_NAME \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\u00a0 \u00a0 --zone=COMPUTE_ZONE \\\u00a0 \u00a0 --image-type=\"COS_CONTAINERD\" \\\u00a0 \u00a0 --enable-image-streaming\n```\nReplace the following:\n- ``: the name of your new node pool.\n- ``: the name of the cluster for the node pool.\n- ``: the Compute Engine zone of your cluster. For regional clusters, use the`--region=` ``flag instead.\n### On an existing node pool\nYou can enable Image streaming on existing node pools that meet the [requirements](#requirements) .\nTo update an existing node pool to use Image streaming, run the following command:\n```\ngcloud container node-pools update POOL_NAME \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\u00a0 \u00a0 --enable-image-streaming\n```\n**Note:** This command recreates the nodes in the node pool to allow them to use Image streaming, which might cause disruptions in your running workloads. When you enable Image streaming at the node pool level, GKE does not respect [maintenance windows](/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions#maintenance_windows) when recreating the nodes in the node pool.\n### Verify Image streaming is enabled on a node pool\nCheck whether Image streaming is enabled for a node pool:\n```\ngcloud container node-pools describe POOL_NAME \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\n```\nThe setting is enabled if the output is similar to the following:\n```\ngcfsConfig:\n enabled: true\n...\n```\nThe setting is disabled if the output is similar to the following:\n```\ngcfsConfig: {}\n...\n```\n## Schedule a workload using Image streaming\nAfter you enable Image streaming on your cluster, GKE automatically uses Image streaming when pulling eligible container images from Artifact Registry without requiring further configuration.\nGKE adds the `cloud.google.com/gke-image-streaming: \"true\"` label to nodes in node pools with Image streaming enabled. On GKE Standard, if you enable or disable Image streaming on specific node pools so that your cluster has a mix of nodes that use Image streaming and nodes that don't, you can use [node selectors](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/) in your deployments to control whether GKE schedules your workloads on nodes that use Image streaming.\nIn the following example, you schedule a Deployment that uses a large container image on a cluster with Image streaming enabled. You can then optionally [comparethe performance to an image pull without Image streaming enabled](#compare_normal_pulls) .\n- Create a new cluster with Image streaming enabled:```\ngcloud container clusters create CLUSTER_NAME \\\u00a0 \u00a0 --zone=COMPUTE_ZONE \\\u00a0 \u00a0 --enable-image-streaming \\\u00a0 \u00a0 --image-type=\"COS_CONTAINERD\"\n```\n- Get credentials for the cluster:```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --zone=COMPUTE_ZONE\n```\n- Save the following manifest as `frontend-deployment.yaml` :```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: frontendspec:\u00a0 replicas: 1\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: guestbook\u00a0 \u00a0 \u00a0 tier: frontend\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: guestbook\u00a0 \u00a0 \u00a0 \u00a0 tier: frontend\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: php-redis\u00a0 \u00a0 \u00a0 \u00a0 image: us-docker.pkg.dev/google-samples/containers/gke/gb-frontend:v5\u00a0 \u00a0 \u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 \u00a0 - name: GET_HOSTS_FROM\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: \"dns\"\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 100m\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memory: 100Mi\u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 - containerPort: 80\n```The `gb-frontend` container image is 327 MB in size.\n- Apply the manifest to your cluster:```\nkubectl apply -f frontend-deployment.yaml\n```\n- Verify that GKE created the Deployment:```\nkubectl get pods -l app=guestbook\n```The output is similar to the following:```\nNAMESPACE NAME       READY STATUS  RESTARTS AGE\ndefault  frontend-64bcc69c4b-pgzgm  1/1  Completed 0   3s\n```\n- Get the Kubernetes event log to see image pull events:```\nkubectl get events --all-namespaces\n```The output is similar to the following:```\nNAMESPACE LAST SEEN TYPE REASON   OBJECT             MESSAGE\ndefault 11m  Normal Pulling   pod/frontend-64bcc69c4b-pgzgm       Pulling image \"us-docker.pkg.dev/google-samples/containers/gke/gb-frontend:v5\"\ndefault 11m  Normal Pulled   pod/frontend-64bcc69c4b-pgzgm       Successfully pulled image \"us-docker.pkg.dev/google-samples/containers/gke/gb-frontend:v5\" in 1.536908032s\ndefault 11m  Normal ImageStreaming node/gke-riptide-cluster-default-pool-f1552ec4-0pjv Image us-docker.pkg.dev/google-samples/containers/gke/gb-frontend:v5 is backed by image streaming.\n...\n```In this output:- The`Pulled`event shows the time taken for Image streaming to pull the image.\n- The `ImageStreaming` event shows that the node uses Image streaming to serve the container image. **Note:** The `Reason` field displays `BackedByGCFS` instead of `ImageStreaming` in clusters with GKE versions prior to 1.20.9-gke.1000. `BackedByGCFS` also indicates that the image uses Image streaming. **Note:** If you run a workload that uses the same image on the same node, GKE uses the local cache of the image instead of streaming the image. You will see `Container image \"us-docker.pkg.dev/google-samples/containers/gke/gb-frontend:v5\" already present on machine` in the `Message` field for the Pod `Pulled` event. To test the performance of Image streaming again, delete the node and create a new one.\n### Compare performance with standard image pulls\nIn this optional example, you create a new cluster with Image streaming disabled and deploy the `frontend` Deployment to compare performance with Image streaming.\n- Create a new cluster with Image streaming disabled:```\ngcloud container clusters create CLUSTER2_NAME\\\u00a0 \u00a0 --zone=COMPUTE_ZONE \\\u00a0 \u00a0 --image-type=\"COS_CONTAINERD\"\n``` **Note:** By default, GKE creates clusters with Image streaming disabled.\n- Get credentials for the cluster:```\ngcloud container clusters get-credentials CLUSTER2_NAME \\\u00a0 \u00a0 --zone=COMPUTE_ZONE\n```\n- Deploy the `frontend` Deployment from the previous example:```\nkubectl apply -f frontend-deployment.yaml\n```\n- Get the Kubernetes event log:```\nkubectl get events --all-namespaces\n```The output is similar to the following:```\n NAMESPACE LAST SEEN TYPE REASON  OBJECT        MESSAGE\n default 87s  Normal Pulled  pod/frontend-64bcc69c4b-qwmfp  Successfully pulled image \"us-docker.pkg.dev/google-samples/containers/gke/gb-frontend:v5\" in 23.929723476s\n```Notice the time GKE took to pull the entire image. In this example output, GKE needed almost 24 seconds. With Image streaming enabled, GKE only needed 1.5 seconds to pull the image data that the workload required to start.## Clean up\nTo avoid charges, delete the clusters you created in the previous examples:\n```\ngcloud container clusters delete CLUSTER_NAME CLUSTER2_NAME\n```\n## Disable Image streaming\nIf you use GKE Autopilot, you can't disable Image streaming on individual clusters. You can disable the Container File System API, which disables Image streaming for the entire project.\nIf you use GKE Standard clusters, you can disable Image streaming on individual clusters or specific node pools, as described in the following sections.\n### Disable Image streaming on a GKE Standard cluster\nYou can disable Image streaming on existing GKE Standard clusters using the gcloud CLI or the Google Cloud console.\nTo disable Image streaming on an existing cluster, run the following command:\n```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --no-enable-image-streaming\n```- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click the name of the cluster you want to modify.\n- On the **Clusters** page, under **Features** , click next to **Image streaming** .\n- In the **Edit Image streaming** dialog box, clear the **EnableImage streaming** checkbox.\n- Click **Save changes** .\n### On a new node pool\nTo disable Image streaming when creating a new node pool, specify the `--no-enable-image-streaming` flag, such as in the following command:\n```\ngcloud container node-pools create NODE_POOL_NAME \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\u00a0 \u00a0 --zone=COMPUTE_ZONE \\\u00a0 \u00a0 --no-enable-image-streaming\n```\n### On an existing node pool\nTo disable Image streaming on an existing node pool, run the following command:\n```\ngcloud container node-pools update NODE_POOL_NAME \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\u00a0 \u00a0 --no-enable-image-streaming\n```\n## Memory reservation for Image streaming\nGKE reserves memory resources for Image streaming in addition to the memory that is reserved for node system components to run. GKE does not reserve additional CPU resources for Image streaming. In GKE Standard clusters, this reservation changes the memory resources that are available for you to request in your Pods. In GKE Autopilot, GKE manages system allocations, so there's no impact to scheduling your workloads.\nFor details about the memory reservations GKE makes for node components, see [Standard cluster architecture](/kubernetes-engine/docs/concepts/cluster-architecture#memory_cpu) .\nIn nodes that use Image streaming, GKE makes the following additional memory reservations:\n- No additional memory for machines with less than 1 GiB of memory\n- 10% of the first 4 GiB of memory\n- 8% of the next 4 GiB of memory (up to 8 GiB)\n- 4% of the next 8 GiB of memory (up to 16 GiB)\n- 2.4% of the next 112 GiB of memory (up to 128 GiB)\n- 0.8% of any memory above 128 GiB\n**Note:** Memory reservations for Image streaming are made on top of existing memory reservations for node system components. For example, the total reserved memory for the first 4 GiB of memory would be 35% (25% for node components and 10% for Image streaming).\n## Troubleshooting\n### GKE doesn't use the Image streaming filesystem\nIf your GKE event log doesn't show the Image streaming events, your image is not backed by the remote filesystem. If GKE previously pulled the image on the node, this is expected behavior because GKE uses the local cache of the image for subsequent pulls instead of using Image streaming. You can verify this by looking for `Container image` `` `already present on machine` in the `Message` field for the Pod `Pulled` event.\nIf you don't see the Image streaming event during the first image pull on the node, ensure that you meet the requirements for Image streaming. If you meet the requirements, you can diagnose the issue by checking the logs of the Image streaming Service (named `gcfsd` ):\n- Go to the **Logs Explorer** page in the Google Cloud console: [Go to Logs Explorer](https://console.cloud.google.com/logs/query) \n- In the **Query** field, specify the following query:```\nlogName=\"projects/PROJECT_ID/logs/gcfsd\"\nresource.labels.cluster_name=\"CLUSTER_NAME\"\n```Replace the following:- ``: The name of your project.\n- ``: The name of your cluster.\n- Click **Run query** .\nYou can also check the `gcfsd` logs using Logs Explorer:\n- Go to the **Logs Explorer** in the Google Cloud console: [Go to Logs Explorer](https://console.cloud.google.com/logs/query) \n- In the **Query** field, specify the following query:```\nlogName=\"projects/PROJECT_ID/logs/gcfsd\"\n```Replace `` `PROJECT_ID` with your Google Cloud project ID.If the `gcfsd` logs display an error message similar to the following, the node doesn't have the correct API scope. GKE pulls container images for workloads without using Image streaming.\n```\nlevel=fatal msg=\"Failed to create a Container File System client: rpc error:\ncode = PermissionDenied desc = failed to probe endpoint: rpc error: code = PermissionDenied\ndesc = Request had insufficient authentication scopes.\"\n```\nYou can fix this by granting the correct scope to the node to allow it to use Image streaming. Add the `devstorage.read_only` scope to the cluster or node pool, similar to the following command:\n```\ngcloud container node-pools create NODE_POOL_NAME \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\u00a0 \u00a0 --zone=COMPUTE_ZONE \\\u00a0 \u00a0 --image-type=\"COS_CONTAINERD\" \\\u00a0 \u00a0 --enable-image-streaming \\\u00a0 \u00a0 --scope=\"https://www.googleapis.com/auth/devstorage.read_only\"\n```\nIf you notice an error message with `code = FailedPrecondition` , the image wasn't imported to the Image streaming remote filesystem.\nYou might notice this error if you tried to use Image streaming with an existing node pool. If a node in the node pool already has the container image on-disk, GKE uses the local image instead of using Image streaming to get the image.\nTo fix this, try the following:\n- Wait a few minutes and try to deploy your workload again.\n- Add new nodes or a new node pool and schedule the workload on those nodes.If you notice an error message with `code=InvalidArgument` , the container image your workload uses is not eligible for Image streaming. Ensure that the image meets the [requirements](#requirements) . If your image is not on Artifact Registry, try migrating to Artifact Registry.\nThe following error might appear when reading container files with Image streaming enabled:\n```\nlevel=error msg=\"backend.FileContent failed\" error=\"rpc error: code = ResourceExhausted desc = Quota exceeded for quota metric 'Content requests per project per region' and limit 'Content requests per project per region per minute per region' of service 'containerfilesystem.googleapis.com' for consumer 'project_number:PROJECT_NUMBER'.\" layer_id=\"sha256:1234567890\" module=gcfs_backend offset=0 path=etc/passwd size=4096\n```\nThis error indicates project has exceeded the quota required to read files from the remote container file system service. To resolve this issue, [increase the following quotas](/docs/quotas/view-manage#requesting_higher_quota) :\n- Content requests per project per region per minute per region\n- Content requests per project per region\n### GKE downloads the image without streaming the data\nContainer images using [customer-managed encryption keys (CMEK)](/kubernetes-engine/docs/how-to/using-cmek) are only eligible for Image streaming on GKE version 1.25.3-gke.1000 or later. Container images with duplicate layers are only eligible for Image streaming on GKE version 1.28 or later. See the [Limitations](#limitations) for more information.\nTo check the container image for empty layers or duplicate layers, run the following command:\n```\ndocker inspect IMAGE_NAME\n```\nReplace `` with the name of the container image.\nIn the output of the command, inspect the entries under `\"Layers\"` .\nIf one of the entries **exactly matches the following\"sha256\" output** , the container image has an empty layer and is not eligible for Image streaming.\n```\n\"Layers\": [ ...\n \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\",\n ...\n]\n```\nIf there are duplicate entries like in the following example, the container image has duplicate layers and is not eligible for Image streaming.\n```\n\"Layers\": [ \"sha256:28699c71935fe3ffa56533db44ad93e5a30322639f7be70d5d614e06a1ae6d9b\",\n ...\n \"sha256:28699c71935fe3ffa56533db44ad93e5a30322639f7be70d5d614e06a1ae6d9b\",\n ...\n]\n```\n### mv command and renameat2 system calls fail on symlink files\nFor GKE nodes running version 1.25 and later, when Image streaming is enabled, the `mv` command and `renameat2` system call might fail on symlink files in container images with the error message \"No such device or address\". The issue is caused by a regression on recent Linux kernels.\nThese system calls are not common, so the majority of images are not affected by this problem. The issue typically happens on container initialization stages when an application is being prepared to run and move around files. It is not possible to test the image locally, so GKE recommends to use Image streaming on test environments to find the issue before the image is used in production.\nThe fix is available in the following GKE patch versions:\n- 1.25: 1.25.14-gke.1351000 and later\n- 1.26: 1.26.9-gke.1345000 and later\n- 1.27: 1.27.6-gke.100 and later\n- 1.28: 1.28.1-gke.1157000 and later\nAlternatively, to mitigate this issue for any affected workloads, you can try replacing the code leading to the `renameat2` system call. If you cannot modify the code, you must [disable Image streaming](#disable) on the node pool to mitigate the issue.", "guide": "Google Kubernetes Engine (GKE)"}