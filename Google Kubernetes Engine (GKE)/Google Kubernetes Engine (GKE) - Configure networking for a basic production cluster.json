{"title": "Google Kubernetes Engine (GKE) - Configure networking for a basic production cluster", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/configure-networking", "abstract": "# Google Kubernetes Engine (GKE) - Configure networking for a basic production cluster\nThis tutorial is intended for cloud architects and operations administrators interested in deploying a web application to a Google Kubernetes Engine (GKE) cluster and exposing it with an HTTPS load balancer.", "content": "## ObjectivesIn this tutorial, you will learn how to:- Create a GKE cluster.\n- Create a global IP address and Cloud DNS zone with Terraform.\n- Configure HTTPS load balancing.\n- Deploy a sample web application.\n## CostsIn this document, you use the following billable components of Google Cloud:- [GKE](/kubernetes-engine/pricing) \n- [Cloud Load Balancing](/load-balancing/pricing) \n- [External IP address](/vpc/network-pricing#ipaddress) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n### Set up your project\n- You must own a domain name. The domain name must be no longer than 63 characters. You can use [Google Domains](https://domains.google.com/) or another registrar.\n### Set up your environmentIn this tutorial, you use [Cloud Shell](/shell) to manage resources hosted on Google Cloud. Cloud Shell is preinstalled with the software you need for this tutorial, including [Terraform](/docs/terraform/get-started-with-terraform) , [kubectl](https://kubernetes.io/docs/reference/kubectl/) and the [gcloud CLI](/sdk/gcloud) .- Set environment variables:```\nPROJECT_ID=$(gcloud config get-value project)gcloud config set project $PROJECT_IDgcloud config set compute/region us-central1\n```\n- Clone the code repository:```\ngit clone https://github.com/GoogleCloudPlatform/kubernetes-engine-samples.git\n```\n- Change to the working directory:```\ncd kubernetes-engine-samples/autopilot/networking-tutorial\n```\n## Create a GKE clusterThe following Terraform file creates a GKE cluster:\n [  autopilot/networking-tutorial/main.tf ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/autopilot/networking-tutorial/main.tf) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/autopilot/networking-tutorial/main.tf) \n```\nterraform {\u00a0 required_version = \"~> 1.3\"}provider \"google\" {}variable \"region\" {\u00a0 type \u00a0 \u00a0 \u00a0 \u00a0= string\u00a0 description = \"Region where the cluster will be created.\"\u00a0 default \u00a0 \u00a0 = \"us-central1\"}variable \"cluster_name\" {\u00a0 type \u00a0 \u00a0 \u00a0 \u00a0= string\u00a0 description = \"Name of the cluster\"\u00a0 default \u00a0 \u00a0 = \"networking-cluster\"}resource \"google_container_cluster\" \"default\" {\u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = var.cluster_name\u00a0 description \u00a0 \u00a0 \u00a0= \"Cluster for sample web application\"\u00a0 location \u00a0 \u00a0 \u00a0 \u00a0 = var.region\u00a0 enable_autopilot = true\u00a0 ip_allocation_policy {}}output \"region\" {\u00a0 value \u00a0 \u00a0 \u00a0 = var.region\u00a0 description = \"Compute region\"}output \"cluster_name\" {\u00a0 value \u00a0 \u00a0 \u00a0 = google_container_cluster.default.name\u00a0 description = \"Cluster name\"}\n```\nThe following Terraform file create a global IP address and Cloud DNS zone:\n [  autopilot/networking-tutorial/dns.tf ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/autopilot/networking-tutorial/dns.tf) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/autopilot/networking-tutorial/dns.tf) \n```\nterraform {\u00a0 required_version = \"~> 1.3\"}variable \"base_domain\" {\u00a0 type \u00a0 \u00a0 \u00a0 \u00a0= string\u00a0 description = \"Your base domain\"}variable \"name\" {\u00a0 type \u00a0 \u00a0 \u00a0 \u00a0= string\u00a0 description = \"Name of resources\"\u00a0 default \u00a0 \u00a0 = \"networking-tutorial\"}data \"google_client_config\" \"current\" {}resource \"google_compute_global_address\" \"default\" {\u00a0 name = var.name}resource \"google_dns_managed_zone\" \"default\" {\u00a0 name \u00a0 \u00a0 \u00a0 \u00a0= var.name\u00a0 dns_name \u00a0 \u00a0= \"${var.name}.${var.base_domain}.\"\u00a0 description = \"DNS Zone for web application\"}resource \"google_dns_record_set\" \"a\" {\u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 = google_dns_managed_zone.default.dns_name\u00a0 type \u00a0 \u00a0 \u00a0 \u00a0 = \"A\"\u00a0 ttl \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 300\u00a0 managed_zone = google_dns_managed_zone.default.name\u00a0 rrdatas = [google_compute_global_address.default.address]}resource \"google_dns_record_set\" \"cname\" {\u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 = join(\".\", compact([\"www\", google_dns_record_set.a.name]))\u00a0 type \u00a0 \u00a0 \u00a0 \u00a0 = \"CNAME\"\u00a0 ttl \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 300\u00a0 managed_zone = google_dns_managed_zone.default.name\u00a0 rrdatas = [google_dns_record_set.a.name]}output \"dns_zone_name_servers\" {\u00a0 value \u00a0 \u00a0 \u00a0 = google_dns_managed_zone.default.name_servers\u00a0 description = \"Write these virtual name servers in your base domain.\"}output \"domain\" {\u00a0 value = trim(google_dns_record_set.a.name, \".\")}\n```- Initialize Terraform:```\nterraform init\n```\n- View the infrastructure changes:```\nterraform plan\n```When prompted, enter your domain, such as `my-domain.net` .\n- Apply the Terraform configuration:```\nterraform apply --auto-approve\n```When prompted, enter your domain, such as `my-domain.net` .The output is similar to the following:```\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\nOutputs:\ncluster_name = \"networking-cluster\"\nregion = \"us-central1\"\n```\n## Create an external Application Load Balancer\n- The following manifest describes a ManagedCertificate, FrontendConfig, Deployment, Service, and Ingress: [  autopilot/networking-tutorial/kubernetes-manifests.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/autopilot/networking-tutorial/kubernetes-manifests.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/autopilot/networking-tutorial/kubernetes-manifests.yaml) ```\n---apiVersion: networking.gke.io/v1kind: ManagedCertificatemetadata:\u00a0 name: networking-managed-certspec:\u00a0 domains:\u00a0 \u00a0 - DOMAIN_NAME\u00a0 \u00a0 - www.DOMAIN_NAME---apiVersion: networking.gke.io/v1beta1kind: FrontendConfigmetadata:\u00a0 name: networking-fcspec:\u00a0 redirectToHttps:\u00a0 \u00a0 enabled: true\u00a0 \u00a0 responseCodeName: MOVED_PERMANENTLY_DEFAULT---apiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: frontendspec:\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: frontend\u00a0 replicas: 2\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: frontend\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: echo-amd64\u00a0 \u00a0 \u00a0 \u00a0 image: us-docker.pkg.dev/google-samples/containers/gke/hello-app-cdn:1.0---apiVersion: v1kind: Servicemetadata:\u00a0 name: frontendspec:\u00a0 type: LoadBalancer\u00a0 selector:\u00a0 \u00a0 app: frontend\u00a0 ports:\u00a0 - name: http\u00a0 \u00a0 port: 80\u00a0 \u00a0 targetPort: 8080---apiVersion: networking.k8s.io/v1kind: Ingressmetadata:\u00a0 name: frontend\u00a0 annotations:\u00a0 \u00a0 networking.gke.io/managed-certificates: networking-managed-cert\u00a0 \u00a0 networking.gke.io/v1beta1.FrontendConfig: networking-fc\u00a0 \u00a0 kubernetes.io/ingress.global-static-ip-name: networking-tutorial\u00a0 \u00a0 kubernetes.io/ingress.class: gce\u00a0 labels:\u00a0 \u00a0 app: frontendspec:\u00a0 defaultBackend:\u00a0 \u00a0 service:\u00a0 \u00a0 \u00a0 name: frontend\u00a0 \u00a0 \u00a0 port:\u00a0 \u00a0 \u00a0 \u00a0 number: 80\n```Replace `` with your domain name, such as `my-domain.net` .This manifest has the following properties:- `networking.gke.io/managed-certificates`: the name of the ManagedCertificate.\n- `networking.gke.io/v1beta1.FrontendConfig`: the name of the FrontendConfig resource.\n- `kubernetes.io/ingress.global-static-ip-name`: the name of the IP address.\n- `kubernetes.io/ingress.class`: instructs the GKE Ingress controller to create an external Application Load Balancer.\n- Apply the manifest to your cluster:```\nkubectl apply -f kubernetes-manifests.yaml\n```\n- Verify the Ingress was created:```\nkubectl describe ingress frontend\n```The output is similar to the following:```\n...\n Events:\n Type Reason Age From      Message\n ---- ------ ---- ----      ------ Normal ADD  2m loadbalancer-controller default/frontend\n Normal CREATE 1m loadbalancer-controller ip: 203.0.113.2\n...\n```It might take several minutes for the Ingress to provision.\n## Test application\n- Check the status of the SSL certificate:```\nkubectl get managedcertificates.networking.gke.io networking-managed-cert\n```The SSL certificate might take up to 30 minutes to provision. The following output indicates the SSL certificate is ready:```\nNAME      AGE STATUS\nnetworking-managed-cert 28m Active\n```\n- Run a `curl` command:```\ncurl -Lv https://DOMAIN_NAME\n```The output is similar to the following:```\n* Trying 34.160.115.33:443...\n* Connected to DOMAIN_NAME (34.160.115.33) port 443 (#0)\n...\n* TLSv1.3 (IN), TLS handshake, Certificate (11):\n...\n* Server certificate:\n* subject: CN=DOMAIN_NAME\n...\n> Host: DOMAIN_NAME\n```\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- Delete a Google Cloud project:\n- ```\ngcloud projects delete PROJECT_ID\n```\n### Delete individual resources\n- Delete the kubernetes resources:```\nkubectl delete -f kubernetes-manifests.yaml\n```\n- Delete the Terraform resources:```\nterraform destroy --auto-approve\n```When prompted, enter your domain, such as `my-domain.net` .\n## What's next\n- Learn more about [GKE networking](/kubernetes-engine/docs/concepts/network-overview) .", "guide": "Google Kubernetes Engine (GKE)"}