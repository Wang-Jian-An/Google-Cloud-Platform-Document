{"title": "Google Kubernetes Engine (GKE) - Configure domain names with static IP addresses", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/configuring-domain-name-static-ip", "abstract": "# Google Kubernetes Engine (GKE) - Configure domain names with static IP addresses\nThis tutorial demonstrates how to use Google Kubernetes Engine (GKE) to expose your web application to the internet on a [static external IP address](/compute/docs/ip-addresses#reservedaddress) and configure a domain name to point to your application.\nThis tutorial assumes you own a registered domain name, such as `example.com` .\n **Note:** This tutorial uses the built-in [GKE Ingress Controller](/kubernetes-engine/docs/concepts/ingress) and does not apply to the [NGINX Ingress Controller](https://github.com/kubernetes/ingress-nginx) .", "content": "## ObjectivesThis tutorial demonstrates the following steps:- Reserve a static external IP address for your application\n- Configure either [Service](/kubernetes-engine/docs/concepts/service) or [Ingress](/kubernetes-engine/docs/concepts/ingress) resources to use the static IP address\n- Update DNS records of your domain name to point to your application\n## CostsIn this document, you use the following billable components of Google Cloud:- [GKE](/kubernetes-engine/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\nTake the following steps to enable the Kubernetes Engine API:\n- Visit the [ Kubernetes Engine page](https://console.cloud.google.com/projectselector/kubernetes) in the Google Cloud console.\n- Create or select a project.\n- Wait for the API and related services to be enabled.  This can take several minutes.\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\nInstall the following command-line tools used in this tutorial:- `gcloud`is used to create and delete Kubernetes Engine clusters.`gcloud`is included in the [gcloud CLI](/sdk/docs/install) .\n- `kubectl`is used to manage Kubernetes, the cluster orchestration system used by  Kubernetes Engine. You can install`kubectl`using`gcloud`:```\ngcloud components install kubectl\n```\nClone the sample code from GitHub:\n```\ngit clone https://github.com/GoogleCloudPlatform/kubernetes-engine-samplescd kubernetes-engine-samples/quickstarts/hello-app/manifests\n```\n### Set defaults for the gcloud command-line tool\nTo save time typing your\n [project ID](https://support.google.com/cloud/answer/6158840) \nand\n [Compute Engine zone](/compute/docs/zones#available) \noptions in the\n`gcloud`\ncommand-line tool, you can set the defaults:\n```\ngcloud config set project project-id\ngcloud config set compute/zone compute-zone\n```\n### Create a clusterCreate a cluster:\n```\ngcloud container clusters create-auto domain-test\n```## Deploy your web applicationThe following manifest describes a Deployment that runs a sample web application container image:\n [  helloweb-deployment.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/hello-app/manifests/helloweb-deployment.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/hello-app/manifests/helloweb-deployment.yaml) \n```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: helloweb\u00a0 labels:\u00a0 \u00a0 app: hellospec:\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: hello\u00a0 \u00a0 \u00a0 tier: web\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: hello\u00a0 \u00a0 \u00a0 \u00a0 tier: web\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: hello-app\u00a0 \u00a0 \u00a0 \u00a0 image: us-docker.pkg.dev/google-samples/containers/gke/hello-app:1.0\u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 - containerPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 200m\n```\nCreate the Deployment:\n```\nkubectl apply -f helloweb-deployment.yaml\n```## Expose your applicationYou can expose your application on GKE using either of the following methods:- **Use a Service** , which creates an [external passthrough Network Load Balancer](/compute/docs/load-balancing/network) that works with regional IP addresses.\n- **Use an Ingress** , which creates an [Application Load Balancer](/compute/docs/load-balancing/http) and supports global IP addresses.\nTo learn more about the advantages and disadvantages of each method, see [Setting up an external Application Load Balancer with Ingress](/kubernetes-engine/docs/tutorials/http-balancer#background) .\n### Use a ServiceTo ensure that your application has a static external IP address, you must [reserve a static IP address](/compute/docs/ip-addresses/reserve-static-external-ip-address#reserve_new_static) .\n **Note:** Static IP addresses have no cost when they are used by a load balancer. If you reserve a static IP address and don't use it, you are charged per [unused IP address pricing](/compute/pricing#ipaddress) .\nIf you choose to expose your application using a [Service](/kubernetes-engine/docs/concepts/service) , you must create a regional IP address. Global IP addresses only work with Ingress resource type, as explained in the next section.\nTo use a Service, create a static IP address named `helloweb-ip` in the region `us-central1` :\n```\ngcloud compute addresses create helloweb-ip --region us-central1\n```\nFind the static IP address that you created:\n```\ngcloud compute addresses describe helloweb-ip --region us-central1\n```\nThe output is similar to the following:\n```\n...\naddress: 203.0.113.32\n...\n```\n **Note:** This step requires [Config Connector](https://cloud.google.com/config-connector/docs/overview) . Follow the [installation instructions](https://cloud.google.com/config-connector/docs/how-to/install-upgrade-uninstall) to install Config Connector on your cluster.\n [View on GitHub](https://github.com/GoogleCloudPlatform/k8s-config-connector/blob/HEAD/config/samples/tutorials/configuring-domain-name-static-ip/compute-address-regional.yaml) \n```\napiVersion: compute.cnrm.cloud.google.com/v1beta1kind: ComputeAddressmetadata:\u00a0 name: helloweb-ipspec:\u00a0 location: us-central1\n```Save the manifest as `compute-address-regional.yaml` .\nApply the manifest to your cluster:\n```\n\u00a0 kubectl apply -f compute-address-regional.yaml\n```\nFind the static IP address that you created:\n```\n\u00a0 kubectl get computeaddress helloweb-ip -o jsonpath='{.spec.address}'\n```The following manifest describes a [Service](/kubernetes-engine/docs/concepts/service) of type LoadBalancer, which creates an external passthrough Network Load Balancer to expose Pods with an external IP address.\nReplace `` with the static IP address:\n [  helloweb-service-static-ip.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/hello-app/manifests/helloweb-service-static-ip.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/hello-app/manifests/helloweb-service-static-ip.yaml) \n```\napiVersion: v1kind: Servicemetadata:\u00a0 name: helloweb\u00a0 labels:\u00a0 \u00a0 app: hellospec:\u00a0 selector:\u00a0 \u00a0 app: hello\u00a0 \u00a0 tier: web\u00a0 ports:\u00a0 - port: 80\u00a0 \u00a0 targetPort: 8080\u00a0 type: LoadBalancer\u00a0 loadBalancerIP: \"YOUR.IP.ADDRESS.HERE\"\n```\nCreate the Service:\n```\nkubectl apply -f helloweb-service-static-ip.yaml\n```\nView the reserved IP address associated with the load balancer:\n```\nkubectl get service\n```\nThe output is similar to the following:\n```\nNAME    CLUSTER-IP  EXTERNAL-IP  PORT(S)   AGE\nhelloweb   10.31.254.176 203.0.113.32  80:30690/TCP  54s\n```\n **Note:** Provisioning and configuring the load balancer might take a few minutes.\n### Use an IngressIf you choose to expose your application using an [Ingress](/kubernetes-engine/docs/concepts/ingress) , you must [reserve a global static IP address](/compute/docs/ip-addresses/reserve-static-external-ip-address#reserve_new_static) . Use the annotation `kubernetes.io/ingress.global-static-ip-name` to specify a global IP address.\nTo expose your application to clients and services in a region, use a regional static internal IP address while deploying an internal ingress resource for GKE along with the [required annotations](/kubernetes-engine/docs/how-to/internal-load-balance-ingress#static_ip_addressing) .\nTo learn how to use Ingress to expose your applications to the internet, see [Setting up an external Application Load Balancer with Ingress](/kubernetes-engine/docs/tutorials/http-balancer) .\n **Note:** Static IP addresses have no cost when they are used by a load balancer. If you reserve a static IP address and don't use it, you are charged per [unused IP address pricing](/compute/pricing#ipaddress) .\nTo create a global static IP address named `helloweb-ip` :\n```\ngcloud compute addresses create helloweb-ip --global\n```\nFind the static IP address that you created:\n```\ngcloud compute addresses describe helloweb-ip --global\n```\nThe output is similar to the following:\n```\n...\naddress: 203.0.113.32\n...\n```\n **Note:** This step requires [Config Connector](https://cloud.google.com/config-connector/docs/overview) . Follow the [installation instructions](https://cloud.google.com/config-connector/docs/how-to/install-upgrade-uninstall) to install Config Connector on your cluster.\n [View on GitHub](https://github.com/GoogleCloudPlatform/k8s-config-connector/blob/HEAD/config/samples/tutorials/configuring-domain-name-static-ip/compute-address-global.yaml) \n```\napiVersion: compute.cnrm.cloud.google.com/v1beta1kind: ComputeAddressmetadata:\u00a0 name: helloweb-ipspec:\u00a0 location: global\n```Save the manifest as `compute-address-global.yaml` .\nApply the manifest to your cluster:\n```\n\u00a0 kubectl apply -f compute-address-global.yaml\n```The following manifest describes an Ingress that exposes a web application on a static IP with two resources:- A`Service`with`type:NodePort`\n- An`Ingress`configured with the service name and static IP annotation\n [  helloweb-ingress-static-ip.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/hello-app/manifests/helloweb-ingress-static-ip.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/hello-app/manifests/helloweb-ingress-static-ip.yaml) \n```\napiVersion: networking.k8s.io/v1kind: Ingressmetadata:\u00a0 name: helloweb\u00a0 annotations:\u00a0 \u00a0 kubernetes.io/ingress.global-static-ip-name: helloweb-ip\u00a0 labels:\u00a0 \u00a0 app: hellospec:\u00a0 defaultBackend:\u00a0 \u00a0 service:\u00a0 \u00a0 \u00a0 name: helloweb-backend\u00a0 \u00a0 \u00a0 port:\u00a0 \u00a0 \u00a0 \u00a0 number: 8080---apiVersion: v1kind: Servicemetadata:\u00a0 name: helloweb-backend\u00a0 labels:\u00a0 \u00a0 app: hellospec:\u00a0 type: NodePort\u00a0 selector:\u00a0 \u00a0 app: hello\u00a0 \u00a0 tier: web\u00a0 ports:\u00a0 - port: 8080\u00a0 \u00a0 targetPort: 8080\n```\nThe `kubernetes.io/ingress.global-static-ip-name` annotation specifies the name of the global IP address resource to be associated with the load balancer.\nApply the manifest to your cluster:\n```\nkubectl apply -f helloweb-ingress-static-ip.yaml\n```\nView the IP address associated with the load balancer:\n```\nkubectl get ingress\n```\nThe output is similar to the following\n```\nNAME  HOSTS  ADDRESS   PORTS  AGE\nhelloweb *   203.0.113.32  80  4m\n```\n **Note:** Provisioning and configuring the load balancer might take a few minutes.## View your reserved static IP addressTo verify that the load balancer is configured correctly, you can either use a web browser to visit the IP address or use `curl` :\n```\ncurl http://203.0.113.32/\n```\nThe output is similar to the following:\n```\nHello, world!\nHostname: helloweb-3766687455-8lvqv\n```\n **Note:** You might get HTTP 404 and HTTP 500 errors for a few minutes if you used an Ingress to configure a load balancer. It takes time for configuration changes to propagate to regions across the globe.## Configure your domain name recordsTo have browsers querying your domain name, such as `example.com` , or subdomain name, such as `blog.example.com` , point to the static IP address you reserved, you must update the DNS (Domain Name Server) records of your domain name.\nYou must create an **A** (Address) type DNS record for your domain or subdomain name and have its value configured with the reserved IP address\nDNS records of your domain are managed by your name server. Your name server might be the \"registrar\" where you registered your domain, a DNS service such as [Cloud DNS](/dns) , or another third-party provider.- **If your nameserver is Cloud DNS:** Follow [Cloud DNS Quickstartguide](/dns/quickstart#create_a_new_record) to configure DNS A record for your domain name with the reserved IP address of your application.\n- **If your nameserver is another provider:** Refer to your DNS providers documentation on setting DNS A records to configure your domain name. If you choose to use Cloud DNS instead, refer to [Migrating to Cloud DNS](/dns/migrating) .\n## Visit your domain nameTo verify that your domain name's DNS A records resolve to the IP address you reserved, visit your domain name.\n **Note:** It can take a few hours for DNS records to propagate. This time might depend on your name servers, local internet service provider (ISP), and many other factors.\nTo make a DNS query for your domain name's A record, run the `host` command:\n```\nhost example.com\n```\nThe output is similar to the following:\n```\nexample.com has address 203.0.113.32\n```\nYou can now point your web browser to your domain name and visit your website.## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- Delete the Service and Ingress:```\nkubectl delete ingress,service -l app=hello\n```\n- Release the reserved static IP. After the load balancer is deleted, the unused but reserved IP address is billed per unused IP address pricing.- If you used a Service:```\ngcloud compute addresses delete helloweb-ip --region us-central1\n```\n- If you used an Ingress:```\ngcloud compute addresses delete helloweb-ip --global\n```\n- Delete the sample application:```\nkubectl delete -f helloweb-deployment.yaml\n```\n- Delete the cluster:```\ngcloud container clusters delete domain-test\n```\n## What's next\n- Explore other [Kubernetes Engine tutorials](/kubernetes-engine/docs/tutorials) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Google Kubernetes Engine (GKE)"}