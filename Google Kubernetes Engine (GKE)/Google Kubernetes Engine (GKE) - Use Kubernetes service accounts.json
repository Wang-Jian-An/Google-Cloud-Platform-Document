{"title": "Google Kubernetes Engine (GKE) - Use Kubernetes service accounts", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts", "abstract": "# Google Kubernetes Engine (GKE) - Use Kubernetes service accounts\nThis page describes Kubernetes services accounts and how and when to use them in Google Kubernetes Engine (GKE).\n", "content": "## Overview\n[Kubernetes service accounts](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) are Kubernetes resources, created and managed using the Kubernetes API, meant to be used by in-cluster Kubernetes-created entities, such as Pods, to authenticate to the Kubernetes API server or external services.\nKubernetes service accounts are distinct from Identity and Access Management (IAM) [service accounts](/iam/docs/service-accounts) .\n## When to use Kubernetes service accounts\nKubernetes service accounts let you give an identity to your Pods, which can be used to:\n- Authenticate Pods to the Kubernetes API server, allowing the Pods to read and manipulate Kubernetes API objects (for example, a CI/CD pipeline that deploys applications to your cluster).\n- Authenticate Pods to Google Cloud resources through [workload identity federation for GKE](/kubernetes-engine/docs/concepts/workload-identity) , allowing Pods to act as an IAM service account. This allows you to give fine-grained identity and authorization to Pods when they need access to Google Cloud APIs.## Create a Kubernetes service account\nTo create a Kubernetes service account, perform the following tasks:\n- Configure `kubectl` to communicate with your cluster:```\ngcloud container clusters get-credentials CLUSTER_NAME\n```Replace `` with the name of your cluster.\n- Create a namespace:```\nkubectl create namespace NAMESPACE_NAME\n```Replace `` with the name of your new namespace.\n- Create the Kubernetes service account in the namespace:```\nkubectl create serviceaccount KSA_NAME --namespace NAMESPACE_NAME\n```Replace the following:- ``: the name of your new Kubernetes service account.\n- ``: the name of your namespace.\n## Assign a Kubernetes service account to a Pod\nWhen using Kubernetes service accounts, you can choose between two different credential types:\n- **Standard service account credentials:** mounts a static long-lived credential for the service account into the Pod.```\napiVersion: v1kind: Podmetadata:\u00a0 name: POD_NAME\u00a0 namespace: NAMESPACE_NAMEspec:\u00a0 serviceAccountName: KSA_NAME\n```\n- **Service account token volume projection** : Mounts a short-lived, automatically rotating Kubernetes service account token into the Pod. This token is a OpenID Connect Token and can be used to authenticate to the Kubernetes API and other external services.```\napiVersion: v1kind: Podmetadata:\u00a0 name: POD_NAME\u00a0 namespace: NAMESPACE_NAMEspec:\u00a0 containers:\u00a0 - image: CONTAINER_NAME\u00a0 \u00a0 name: CONTAINER_NAME\u00a0 \u00a0 volumeMounts:\u00a0 \u00a0 - mountPath: /var/run/secrets/tokens\u00a0 \u00a0 \u00a0 name: KSA_NAME_TOKEN\u00a0 serviceAccountName: KSA_NAME\u00a0 volumes:\u00a0 - name: KSA_NAME_TOKEN\u00a0 \u00a0 projected:\u00a0 \u00a0 \u00a0 sources:\u00a0 \u00a0 \u00a0 - serviceAccountToken:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 path: KSA_NAME_TOKEN\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 expirationSeconds: 86400\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audience: some-oidc-audience\n```## Best practices for managing service accounts\n- Separate service accounts by namespace according to your cluster's administrative boundaries. This allows you to restrict who can manage particular service accounts in your cluster, which might prove to be valuable as your organization grows.\n- Use one namespace per workload responsibility. However, if you have multiple workloads in a single namespace that require different responsibilities, use different service accounts for those workload responsibilities;. If no service account is specified in a Pod, the Pod will run as the default service account in its namespace. By creating a Kubernetes service account for each workload, you are better able to enforce the principle of least privilege.\n- Use the service account token volume projection because this ensures service account credentials are short-lived, reducing the impact of leaked credentials.## Rotating Kubernetes service account credentials\nIf a Kubernetes service account credential is compromised and you wish to revoke the compromised credentials, take one of the following approaches:\n- Create a new Kubernetes service account, migrate the Pod and any authorization to the new service account, and then revoke access to the old Kubernetes service account.\n- Perform a [credential rotation](/kubernetes-engine/docs/how-to/credential-rotation) , which will revoke all the Kubernetes service account credentials in your cluster. The rotation also changes your cluster's CA certificate and IP address.## What's next\n- Learn about [workload identity federation for GKE](/kubernetes-engine/docs/how-to/workload-identity) .\n- Learn about [Authenticating to the Kubernetes API server](/kubernetes-engine/docs/how-to/api-server-authentication) .", "guide": "Google Kubernetes Engine (GKE)"}