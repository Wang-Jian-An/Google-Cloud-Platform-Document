{"title": "Google Kubernetes Engine (GKE) - Configure cluster notifications for third-party services", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/cluster-notifications-slack", "abstract": "# Google Kubernetes Engine (GKE) - Configure cluster notifications for third-party services\nThis tutorial shows you how to configure third-party messaging services to receive Google Kubernetes Engine (GKE) [cluster notifications](/kubernetes-engine/docs/concepts/cluster-notifications) .\nServices such as [Slack](https://slack.com) offer [incoming webhooks](https://api.slack.com/incoming-webhooks) , a simple way to post messages from apps into Slack. [Cloud Functions](/functions) is a lightweight Compute Engine solution to create single-purpose, stand-alone functions that respond to [Google Cloud events](/functions/docs/concepts/events-triggers) , such as cluster notifications, without the need to manage a server or runtime environment. When GKE sends a cluster notification using Pub/Sub, a responds by executing an action, such as sending a Slack notification.\nThere are many third-party services built with cross-application messaging functionality, such as [IFTTT](https://ifttt.com/) . You can use this tutorial as a template for connecting with these services.\nIn this tutorial, you use Cloud Functions and Pub/Sub to send notifications about GKE cluster events to Slack.", "content": "## Objectives\n- Deploy a Slack application to receive external notifications from GKE.\n- Write a Cloud Function that sends Pub/Sub notifications to Slack.\n## CostsIn this document, you use the following billable components of Google Cloud:- [GKE](/kubernetes-engine/pricing) \n- [Cloud Functions](/functions/pricing) \n- [Pub/Sub](/pubsub/pricing) \n- [Cloud Build](/build/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin- [Enable GKE cluster notifications.](/kubernetes-engine/docs/how-to/cluster-notifications) \n### Required rolesTo get the permissions that you need to set up Slack notifications for cluster notifications,   ask your administrator to grant you the  following IAM roles on your project:- [Cloud Functions Developer ](https://cloud.google.com/iam/docs/understanding-roles#cloudfunctions.developer) (`roles/cloudfunctions.developer`)\n- [Kubernetes Engine Admin ](https://cloud.google.com/iam/docs/understanding-roles#container.admin) (`roles/container.admin`)\nTo ensure that the Compute Engine default service account has the necessary  permissions to invoke the Cloud Function,   ask your administrator to grant the Compute Engine default service account the [Cloud Functions Invoker ](https://cloud.google.com/iam/docs/understanding-roles#cloudfunctions.invoker) ( `roles/cloudfunctions.invoker` ) IAM role on project.## Slack notificationsTo set up Slack notifications, you must create a Slack application, activate Incoming Webhooks for the application, and install the application to a Slack workspace.\n### Create the Slack application\n- [Join a Slack workspace](https://slack.com/intl/en-ca/help/articles/212675257-Join-a-Slack-workspace) , either by registering with your email or by using an invitation sent by a Workspace Admin. **Note:** If you are not an Admin for your Slack workspace, you may need approval from a Workspace Admin before your app is deployed to your workspace.\n- [Sign in to Slack](https://slack.com/signin) using your workspace name and your Slack account credentials.\n- [Create a new Slack app](https://api.slack.com/apps?new_app=1) :- In the **Create an app** dialog, click **From scratch** .\n- Specify an **App Name** and choose your Slack workspace.\n- Click **Create App** .\n- Under **Add features and functionality** , click **Incoming Webhooks** .\n- Click the **Activate Incoming Webhooks** toggle.\n- In the **Webhook URLs for Your Workspace** section, click **Add New Webhook to Workspace** .\n- On the authorization page that opens, select a channel to receive notifications.\n- Click **Allow** .\n- A webhook for your Slack application is displayed in the **Webhook URLs for Your Workspace** section. Save the URL for later.## Write the Cloud FunctionWhen GKE publishes a cluster notification to a Pub/Sub topic, the event triggers Cloud Functions to send a Slack notification.- Create a new directory named `gke_slack` and change directory into it:```\nmkdir ~/gke_slack && cd $_\n```\n- Create the following files in the gke_slack directory: **index.js** ```\nconst functions = require('@google-cloud/functions-framework');const { IncomingWebhook } = require('@slack/webhook');const url = process.env.SLACK_WEBHOOK;const webhook = new IncomingWebhook(url);// Optionally filter what notification types to forward to Slack.// If empty, all types will be allowed.const allowedTypeURLs = [];// Register a CloudEvent callback with the Functions Framework that will// be executed when the Pub/Sub trigger topic receives a message.functions.cloudEvent('slackNotifier', pubSubEvent => {\u00a0 \u00a0 const data = decode(pubSubEvent.data.message.data);\u00a0 \u00a0 // Send message to Slack.\u00a0 \u00a0 if (isAllowedType(pubSubEvent.data.message.attributes)) {\u00a0 \u00a0 \u00a0 \u00a0 const message = createSlackMessage(data, pubSubEvent.data.message.attributes);\u00a0 \u00a0 \u00a0 \u00a0 webhook.send(message);\u00a0 \u00a0 }});// decode decodes a pubsub event message from base64.const decode = (data) => {\u00a0 \u00a0 return Buffer.from(data, 'base64').toString();}// isAllowedType can be used to filter out messages that don't match the// allowed type URLs. If allowedTypeURLs is empty, it allows all types.const isAllowedType = (attributes) => {\u00a0 \u00a0 if (allowedTypeURLs.length == 0) {\u00a0 \u00a0 \u00a0 \u00a0 return true;\u00a0 \u00a0 }\u00a0 \u00a0 for (var x in allowedTypeURLs) {\u00a0 \u00a0 \u00a0 \u00a0 if (attributes['type_url'] == allowedTypeURLs[x]) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return true;\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 return false;}// createSlackMessage creates a message from a data object.const createSlackMessage = (data, attributes) => {\u00a0 \u00a0 // Write the message data and attributes.\u00a0 \u00a0 text = `${data}`\u00a0 \u00a0 for (var key in attributes) {\u00a0 \u00a0 \u00a0 \u00a0 if (attributes.hasOwnProperty(key)) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 text = text + `\\n\\t\\`${key}: ${attributes[key]}\\``\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 const message = {\u00a0 \u00a0 \u00a0 \u00a0 text: text,\u00a0 \u00a0 \u00a0 \u00a0 mrkdwn: true,\u00a0 \u00a0 };\u00a0 \u00a0 return message;}\n````` is a Cloud Functions environment variable specifying the webhook URL created for your Slack application. You define the environment variable when you deploy the function.The webhook listens for and receives messages from Cloud Functions. When GKE sends a cluster notification to Pub/Sub (the event), the function sends a message (the trigger) to the webhook URL, which in turn sends the message to the configured Slack workspace.You can expand the message in the `createSlackMessage` function to include much more, including text formatting and images. The `isAllowedType` function is provided to enable basic filtering of notifications by the type URL. You can specify what type URLs to allow in `allowedTypeURLs` . This function isn't necessary if you already [filtered notifications](/kubernetes-engine/docs/concepts/cluster-notifications#filtering) , either in GKE or in your Pub/Sub subscription. **package.json** ```\n{\u00a0 \"name\": \"gke-slack\",\u00a0 \"version\": \"0.0.1\",\u00a0 \"description\": \"Slack integration for GKE, using Cloud Functions\",\u00a0 \"main\": \"index.js\",\u00a0 \"dependencies\": {\u00a0 \u00a0 \"@slack/webhook\": \"6.1.0\",\u00a0 \u00a0 \"@google-cloud/functions-framework\": \"^3.0.0\"\u00a0 }}\n````package.json` describes the following attributes of the program:- Name, version, and description\n- Primary runtime file(s)\n- Dependencies\nYou can add more dependencies, requirements, and other information as needed.\nYou should now have the `index.js` and `package.json` files in the `gke_slack` directory.\n### Deploy the Cloud FunctionYou can deploy the Cloud Function using either the Google Cloud CLI or the Google Cloud console.\nTo deploy the function, run the following command in the gke_slack directory:\n```\ngcloud functions deploy slackNotifier \\\u00a0 --gen2 \\\u00a0 --trigger-topic=TOPIC_NAME \\\u00a0 --runtime=nodejs14 \\\u00a0 --entry-point=slackNotifier \\\u00a0 --region=REGION \\\u00a0 --source=. \\\u00a0 --set-env-vars=\"SLACK_WEBHOOK=WEBHOOK_URL\"\n```\nReplace the following:- ``: the name of the Pub/Sub topic you created when [enabling cluster notifications](/kubernetes-engine/docs/how-to/cluster-notifications) .\n- ``: the Compute Engine region for the function.\n- ``: the webhook URL created for your Slack application in [Create the Slack application](#preparing_the_slack_application) .\nThe output is similar to the following:\n```\nDeploying function\u2026\navailableMemoryMb: 256\nentryPoint: slackNotifier\nenvironmentVariables:\n SLACK_WEBHOOK: https://hooks.slack.com/services/\u2026\neventTrigger:\n eventType: google.pubsub.topic.publish\n failurePolicy: {}\n resource: projects/PROJECT_ID/topics/TOPIC_NAME\n service: pubsub.googleapis.com\nlabels:\n deployment-tool: cli-gcloud\nname: projects/PROJECT_ID/locations/us-central1/functions/slackNotifier\nruntime: nodejs10\nserviceAccountEmail: PROJECT_ID@appspot.gserviceaccount.com\nsourceUploadUrl: https://storage.googleapis.com/\u2026\nstatus: ACTIVE\ntimeout: 60s\nupdateTime: 'YYYY-MM-DDThh:mm:ssZ'\nversionId: '1'\n```- Go to the **Cloud Functions** page in the Google Cloud console. [Go to Cloud Functions](https://console.cloud.google.com/functions/list) \n- Click add_box **Create function** .\n- On the **Configuration** page, perform the following steps:- From the **Environment** drop-down list, select **2nd gen** .\n- For **Function name** , specify **slackNotifier** .\n- For **Region** , specify a Compute Engine region.\n- In the **Trigger** section, clickadd_box **ADD EVENTARC TRIGGER** .\n- In the opened window, check that the **Event provider** drop-down list, select **Cloud Pub/Sub** .\n- Select the Pub/Sub topic you created when [enabling cluster notifications](/kubernetes-engine/docs/how-to/cluster-notifications) .\n- For **Region** , specify the same Compute Engine region as for the function.\n- Click **SAVE TRIGGER** .\n- Expand the **Runtime, build, connections and security settings** section.\n- Under **Runtime environment variables** , clickadd **Add Variable** .\n- For **Name** , specify **SLACK_WEBHOOK** .\n- For **Value** , specify the URL of the Internal Webhook created in [Create the Slack application](#preparing_the_slack_application) .\n- Click **Next** .\n- On the **Code** page, perform the following steps:- Select **Node.js 14** from the **Runtime** drop-down list.\n- For **Entry point** , specify **slackNotifier** .\n- In the navigation pane, select **index.js** and replace the code with the sample code in [Write the Cloud Function](#indexjs) .\n- In the navigation pane, select **package.json** and replace the code with the sample code in [Write the Cloud Function](#package-json) .\n- Click **Deploy** .After you've completed deployment of the Cloud Function, you will receive a Slack notification whenever GKE sends a cluster notification.## Verify Slack notificationsIf you used an Autopilot cluster, verify notifications as follows:- [Start a control plane upgrade](/kubernetes-engine/docs/how-to/upgrading-a-cluster#upgrade_cp) .\n- Wait for GKE to automatically upgrade your nodes to the new version. The time taken might vary based on configured maintenance windows and exclusions.\n- After GKE upgrades your nodes, check Slack for a message.\nIf you used a Standard cluster, verify notifications as follows:- [Upgrade a specific node pool to a new version](/kubernetes-engine/docs/how-to/upgrading-a-cluster#upgrade_nodes) . If you don't want to change the GKE version on your nodes, you can upgrade to the same version currently on the nodes. **Caution:** Manually upgrading a Standard node pool ignores your configured [maintenance windows](/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions) and might cause disruptions to running workloads.\n- After GKE upgrades your nodes, check Slack for a message.\nThe Slack notification is similar to the following:\n```\nMaster is upgrading to version 1.20.10-gke.301.\n cluster_location: us-central1\n cluster_name: pubsub-cluster\n payload: {\"resourceType\":\"MASTER\", \"operation\":\"operation-1632775054313-45128f4f\", \"operationStartTime\":\"2021-09-27T20:37:34.313742491Z\", \"currentVersion\":\"1.20.9-gke.1001\", \"targetVersion\":\"1.20.10-gke.301\"}\n project_id: 729788050015\n type_url: type.googleapis.com/google.container.v1beta1.UpgradeEvent\n```\n **Note:** You will not receive a notification if you chose to ignore the `UpgradeEvent` notification type when setting up your cluster notifications. You cannot verify setup manually for the `SecurityBulletinEvent` or the `UpgradeAvailableEvent` notification types.## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n### Delete individual resources\n- Delete the Cloud Function you deployed in this tutorial:```\ngcloud functions delete slackNotifier\n```You can also delete Cloud Functions from the [Google Cloud console](https://console.cloud.google.com/functions/list) .\n- [Delete the Pub/Sub topic](/pubsub/docs/admin#deleting_a_topic) .\n- [Delete the Slack app](https://api.slack.com/apps) .\n## What's next\n- Learn about [the types of cluster notifications](/kubernetes-engine/docs/concepts/cluster-notifications) .\n- Check out the [Cloud Functions](/functions/docs) and the [Pub/Sub](/pubsub/docs) documentation.\n- Learn more about [building Slack apps](https://api.slack.com/slack-apps) .", "guide": "Google Kubernetes Engine (GKE)"}