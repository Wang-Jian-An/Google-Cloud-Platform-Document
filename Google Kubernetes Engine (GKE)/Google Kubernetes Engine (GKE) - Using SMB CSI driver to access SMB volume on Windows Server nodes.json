{"title": "Google Kubernetes Engine (GKE) - Using SMB CSI driver to access SMB volume on Windows Server nodes", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/access-smb-volume", "abstract": "# Google Kubernetes Engine (GKE) - Using SMB CSI driver to access SMB volume on Windows Server nodes\nThis page provides an example of how to use the open source [SMB CSI Driver for Kubernetes](https://github.com/kubernetes-csi/csi-driver-smb) to access a [NetApp Cloud Volumes Service](/solutions/partners/netapp-cloud-volumes/overview) SMB volume on a Google Kubernetes Engine (GKE) cluster with Windows server nodes.\n**Note:** You can also use the open source SMB CSI Driver for Kubernetes to access a NetApp Cloud Volumes Service SMB volume on a Google Kubernetes Engine (GKE) cluster with Linux nodes starting from GKE version 1.20 for Container-Optimized OS or version 1.19 for Ubuntu.\n", "content": "## Overview\nServer Message Block (SMB) Protocol is a network file sharing protocol used for Microsoft Windows. To use SMB with GKE clusters using Windows Server node pools, you can use the open source [SMB CSI Driver for Kubernetes](https://github.com/kubernetes-csi/csi-driver-smb) .\n## Tasks\nThe following sections walk you through an example of how to access a [NetApp Cloud Volumes Service](/solutions/partners/netapp-cloud-volumes/overview) SMB volume on a GKE cluster with Windows Server nodes. The example uses the open source [SMB CSI Driver for Kubernetes](https://github.com/kubernetes-csi/csi-driver-smb) .\n**Note:** Support for the open source [SMB CSI Driver for Kubernetes](https://github.com/kubernetes-csi/csi-driver-smb) will be provided by Google on a best effort basis and is not covered under the [GKE SLA](/kubernetes-engine/sla) .\n### Deploy Active Directory\nThis task creates an Active Directory. If you already have an Active Directory for use, you can skip this task.\nTo deploy a self-managed Active Directory, the following instructions use a Google Cloud Marketplace solution to create a new Active Directory domain, with two Active Directory Domain Controllers.\n- In the Google Cloud console, go to the [Microsoft Active Directory](https://console.cloud.google.com/marketplace/product/click-to-deploy-images/msad) Cloud Marketplace page.\n- Click **Launch** .\n- Complete the deployment configuration. Ensure the DNS server is in the same region as the NetApp Cloud Volumes Service SMB volume. Check [region availability](https://cloud.netapp.com/cloud-volumes-global-regions#cvsGc) .\n- Click **Deploy** .\nIf you want to instead use [Managed Service for Microsoft Active Directory(Managed Microsoft AD)](/managed-microsoft-ad/docs/overview) , complete the following steps:\n- [Create a Managed Microsoft AD domain](/managed-microsoft-ad/docs/create-domain) .\n- [Configure domainpeering](/managed-microsoft-ad/docs/quickstart-domain-peering) between the domain and NetApp Cloud Volumes Service network.\n- To perform the Active Directory related tasks, [connect to thedomain](/managed-microsoft-ad/docs/connect-to-active-directory-domain) .\n### Create a private DNS forwarding zone\nCreate a private DNS forwarding zone that [forwards DNS queries to your Active Directory domain controllers](/compute/docs/instances/windows/best-practices#use_cloud_dns_private_forwarding_zones) .\n### Update your firewall rule\nTo allow queries from Cloud DNS to reach your AD connection, in the firewall rule of your AD, add `35.199.192.0/19` as a source IP range to the **Source Filter** .\nFor more information, see [Security considerations for SMB access of Cloud Volumes Service](/solutions/partners/netapp-cloud-volumes/security-considerations#smb_access) .\n### Create an Active Directory connection to Cloud Volumes Service\nFor instructions, see [Creating an AD connection](/architecture/partners/netapp-cloud-volumes/creating-smb-volumes#creating_an_ad_connection) .\n### Create an SMB volume in Cloud Volumes Service\nFor instructions, see [Creating an SMB volume](/architecture/partners/netapp-cloud-volumes/creating-smb-volumes#creating_an_smb_volume) .\nUse the mount target of the new SMB volume as the `source` value in your [PersistentVolume](#use_pv_pvc) or [StorageClass](#use_storageclass) , specified in the following format:\n```\n\"//SMB_SERVER_NAME/SHARE_NAME\"\n```\nMount targets and instructions are available from the Cloud Volumes Service volume listing page and on the individual volume details pages.\n**Note:** The [CSI Proxy component](https://github.com/kubernetes-csi/csi-proxy) is available in GKE cluster versions 1.19 and later.\n### Create a cluster with nodes joined to the AD domain\nPerform the instructions in [Configure Windows Server nodes to automatically join an Active Directory domain](/kubernetes-engine/docs/how-to/auto-join-windows-nodepools) .\n### Install the SMB CSI driver\n- Install the [open source SMB CSI Driver for Kubernetes](https://github.com/kubernetes-csi/csi-driver-smb#install-driver-on-a-kubernetes-cluster) .\n- To access a SMB volume from a Pod, create a [Secret](https://kubernetes.io/docs/concepts/configuration/secret/) that encodes the username and password.```\nkubectl create secret generic SECRET_NAME \\\u00a0 \u00a0 --from-literal username=\"USERNAME\" \\\u00a0 \u00a0 --from-literal password=\"PASSWORD\"\n```Replace the following:- ``: the name of your Secret.\n- ``: the username. The username encoded in the Secret should include a domain name and have the following format:`domain\\$username`. If your SMB share is not part of any domain, domain can be any string.\n- ``: the password for the user.\n### Access the SMB volume\nTo access the SMB volume, you can choose to use one of the following:\n- [StorageClass](#use_storageclass) \n- [PersistentVolume](#use_pv_pvc) \n**Warning:** The `Delete` [reclaim policy](https://kubernetes.io/docs/tasks/administer-cluster/change-pv-reclaim-policy/) of a `PersistentVolume` or a `StorageClass` is not supported by the open source SMB CSI Driver for Kubernetes.\nTo access the SMB volume through a `StorageClass` , perform the following tasks:\n- Create a `StorageClass` . Here's a sample manifest file named `sc-smb.yaml` :```\napiVersion: storage.k8s.io/v1kind: StorageClassmetadata:\u00a0 name: smbprovisioner: smb.csi.k8s.ioparameters:\u00a0 source: \"//SMB_SERVER_NAME/SHARE_NAME\"\u00a0 csi.storage.k8s.io/node-stage-secret-name: \"SECRET_NAME\"\u00a0 csi.storage.k8s.io/node-stage-secret-namespace: \"default\"\u00a0 createSubDir: \"false\" \u00a0 \u00a0# optional: create a sub dir for new volumereclaimPolicy: Retain \u00a0 \u00a0 \u00a0# only Retain is supportedvolumeBindingMode: ImmediatemountOptions:\u00a0 - dir_mode=0777\u00a0 - file_mode=0777\u00a0 - uid=1001\u00a0 - gid=1001\n```In this example, we use the `mountOptions` field, which is optional for Windows Server, but makes this `StorageClass` work for both Linux and Windows Server.Replace the following:- ``: the hostname of the SMB server, including the domain. For example, the hostname for mount path`//adserver-faab.cvssmb.com/eager-hungry-skossi`is`adserver-faab.cvssmb.com`.\n- ``: the name of the SMB share. For example, the share name for mount path`//adserver-faab.cvssmb.com/eager-hungry-skossi`is`eager-hungry-skossi`. Only use root share for an SMB share. For details, see the related [Known issue](#mount-error) .\n- ``: the name of the Secret contains the credential to access the SMB volume.\n- Create the `StorageClass` resource based on the manifest file:```\nkubectl create -f sc-smb.yaml\n```\n- Deploy a Pod that consumes the `StorageClass` . Here's a sample manifest file named `statefulset-smb.yaml` . The Pod deployed for this `StatefulSet` creates a `data.txt` file in the mounted SMB drive:```\napiVersion: v1kind: Servicemetadata:\u00a0 name: busybox\u00a0 labels:\u00a0 \u00a0 app: busyboxspec:\u00a0 ports:\u00a0 - port: 80\u00a0 \u00a0 name: web\u00a0 clusterIP: None\u00a0 selector:\u00a0 \u00a0 app: busybox---apiVersion: apps/v1kind: StatefulSetmetadata:\u00a0 name: statefulset-smb\u00a0 labels:\u00a0 \u00a0 app: busyboxspec:\u00a0 serviceName: statefulset-smb\u00a0 replicas: 1\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: busybox\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 \"kubernetes.io/os\": windows\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 \u00a0 - name: statefulset-smb\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 image: e2eteam/busybox:1.29\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 command:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - \"powershell.exe\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - \"-Command\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - \"while (1) { Add-Content -Encoding Ascii C:\\\\sc\\\\smb\\\\data.txt $(Get-Date -Format u); sleep 1 }\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 volumeMounts:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: smb\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mountPath: \"/sc/smb\"\u00a0 \u00a0 \u00a0 tolerations:\u00a0 \u00a0 \u00a0 \u00a0 - key: \"node.kubernetes.io/os\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 operator: \"Exists\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 effect: \"NoSchedule\"\u00a0 updateStrategy:\u00a0 \u00a0 type: RollingUpdate\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: busybox\u00a0 volumeClaimTemplates:\u00a0 \u00a0 - metadata:\u00a0 \u00a0 \u00a0 \u00a0 name: smb\u00a0 \u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 volume.beta.kubernetes.io/storage-class: smb\u00a0 \u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 \u00a0 accessModes: [\"ReadWriteMany\"]\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 storage: 10Gi\n```\n- Create the `StatefulSet` resource based on the manifest file:```\nkubectl create -f statefulset-smb.yaml\n```To access the SMB volume through a `PersistentVolume` and `PersistentVolumeClaim` , perform the following tasks:\n- Create a `PersistentVolume` . Here's a sample manifest file named `pv-smb.yaml` :```\napiVersion: v1kind: PersistentVolumemetadata:\u00a0 name: pv-smbspec:\u00a0 capacity:\u00a0 \u00a0 storage: 100Gi\u00a0 accessModes:\u00a0 \u00a0 - ReadWriteMany\u00a0 persistentVolumeReclaimPolicy: Retain\u00a0 mountOptions:\u00a0 \u00a0 - dir_mode=0777\u00a0 \u00a0 - file_mode=0777\u00a0 \u00a0 - vers=3.0\u00a0 csi:\u00a0 \u00a0 driver: smb.csi.k8s.io\u00a0 \u00a0 readOnly: false\u00a0 \u00a0 volumeHandle: VOLUME_ID\u00a0 \u00a0 volumeAttributes:\u00a0 \u00a0 \u00a0 source: \"//SMB_SERVER_NAME/SHARE_NAME\"\u00a0 \u00a0 nodeStageSecretRef:\u00a0 \u00a0 \u00a0 name: SECRET_NAME\u00a0 \u00a0 \u00a0 namespace: default\n```In this example, we use the `mountOptions` field, which is optional for Windows Server, but makes this `PersistentVolume` work for both Linux and Windows Server.Replace the following:- ``: a unique ID for the volume.\n- ``: the hostname of the SMB server, including the domain.\n- ``: the name of the SMB share.\n- ``: the name of the Secret that contains the credential to access the SMB volume.\n- Create a `PersistentVolume` resource based on the manifest file:```\nkubectl create -f pv-smb.yaml\n```\n- Create a `PersistentVolumeClaim` . Here's a sample manifest file named `pvc-smb.yaml` :```\napiVersion: v1kind: PersistentVolumeClaimmetadata:\u00a0 name: pvc-smbspec:\u00a0 accessModes:\u00a0 \u00a0 - ReadWriteMany\u00a0 resources:\u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 storage: 10Gi\u00a0 volumeName: pv-smb\u00a0 storageClassName: \"\"\n```\n- Create a `PersistentVolumeClaim` resource based on the manifest file:```\nkubectl create -f pvc-smb.yaml\n```\n- Deploy a Pod that consumes the `PersistentVolumeClaim` . Here's a sample manifest file named `busybox-smb.yaml` for a Pod deployment that consumes `pvc-smb` . This deployment creates a `data.txt` file in the mounted SMB drive:```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: busybox-smb\u00a0 labels:\u00a0 \u00a0 app: busyboxspec:\u00a0 replicas: 1\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 name: busybox\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: busybox\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 \"kubernetes.io/os\": windows\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 \u00a0 - name: busybox\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 image: e2eteam/busybox:1.29\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 command:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - \"powershell.exe\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - \"-Command\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - \"while (1) { Add-Content -Encoding Ascii C:\\\\pv\\\\pv-smb\\\\data.txt $(Get-Date -Format u); sleep 1 }\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 volumeMounts:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: smb\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mountPath: \"/pv/pv-smb\"\u00a0 \u00a0 \u00a0 tolerations:\u00a0 \u00a0 \u00a0 \u00a0 - key: \"node.kubernetes.io/os\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 operator: \"Exists\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 effect: \"NoSchedule\"\u00a0 \u00a0 \u00a0 volumes:\u00a0 \u00a0 \u00a0 \u00a0 - name: smb\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 persistentVolumeClaim:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 claimName: pvc-smb\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: busybox\n```\n- Create a `Deployment` from the manifest file:```\nkubectl apply -f \u00a0busybox-smb.yaml\n```\n### Test access to the SMB volume\nTo verify that you can access the `data.txt` file on the SMB volume, perform one of the following tasks:\n- Start a powershell session in the container and list the `data.txt` file:```\nkubectl exec POD_NAME -- powershell.exe -c \"ls PATH_TO_THE_FILE\"\n```\n- Open the SMB drive in another VM to confirm that the `data.txt` file was created successfully in the remote share.## Known issues\n### Mount error on Windows after reboot\n: For example, if `\\\\smb-server\\share\\test1` is already mounted, you might get an error when mounting volume `\\\\smb-server\\share\\test2` after the Windows node reboots.\n: The `source` field for both the `StorageClass` and `PersistentVolume` should only use root share for one SMB server in one cluster. Also, you should use the `volumeMounts.subPath` property in the deployment.\n: Only use `\\\\smb-server\\share` as the `source` .\nFor more known issues, see the [Known issues](https://github.com/kubernetes-csi/csi-driver-smb/blob/master/known-issues.md) page for the open source SMB CSI Driver for Kubernetes.\n## What's next\n- Learn how to [deploy a Windows application](/kubernetes-engine/docs/how-to/deploying-windows-app) .\n- Learn more about the [NetApp Cloud Volumes Service](/architecture/partners/netapp-cloud-volumes) .", "guide": "Google Kubernetes Engine (GKE)"}