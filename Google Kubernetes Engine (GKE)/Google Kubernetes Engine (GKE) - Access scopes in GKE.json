{"title": "Google Kubernetes Engine (GKE) - Access scopes in GKE", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/access-scopes", "abstract": "# Google Kubernetes Engine (GKE) - Access scopes in GKE\nThis page describes the default access scopes granted to nodes in Google Kubernetes Engine (GKE) clusters.\n", "content": "## What are access scopes?\nAccess scopes are the legacy method of granting permissions for your nodes, and for workloads running on your nodes if the workloads use [application default credentials (ADC)](/docs/authentication/application-default-credentials) . Access scopes define the OAuth scopes used in API calls from client libraries or the gcloud CLI.\nWe recommend that you don't specify your own access scopes. Instead, you should use [IAM permissions](/iam/docs/creating-managing-service-accounts#creating) or [Kubernetes role-based access control (RBAC)](/kubernetes-engine/docs/how-to/role-based-access-control) to grant access to specific IAM service accounts or Kubernetes service accounts.\n## Default access scopes\nWhen you create a new GKE cluster, Google Cloud assigns a default set of access scopes to nodes based on the service account used by the nodes. These access scopes enable specific functionality for GKE. You can also set access scopes manually using the `--scopes` flag when you create [Standard clusters](/sdk/gcloud/reference/container/clusters/create#--scopes) . [Autopilot clusters](/sdk/gcloud/reference/container/clusters/create-auto#--scopes) , or [node pools](/sdk/gcloud/reference/container/node-pools/create#--scopes) . You can't modify the access scopes on existing node pools. Instead, create a new node pool with the new scopes and migrate workloads to that node pool.\nThe following sections describe the default access scopes that GKE adds to nodes based on whether you specify a custom service account, and whether you manually specify access scopes.\n### Autopilot clusters\n| Service account      | Did you manually specify access scopes? | Access scopes that GKE adds                                                                                     |\n|:---------------------------------------|:------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Compute Engine default service account | No          | https://www.googleapis.com/auth/devstorage.read_only https://www.googleapis.com/auth/service.management.readonly https://www.googleapis.com/auth/servicecontrol https://www.googleapis.com/auth/trace.append https://www.googleapis.com/auth/logging.write: added if Cloud Logging is enabled https://www.googleapis.com/auth/monitoring: added if Cloud Monitoring is enabled |\n| Compute Engine default service account | Yes          | Manually specified scopes                                                                                      |\n| Custom service account     | No          | https://www.googleapis.com/auth/cloud-platform                                                                                 |\n| Custom service account     | Yes          | Manually specified scopes                                                                                      |\n### Standard clusters\n| Service account      | Manually-specified access scopes? | GKE access scopes                                                                                        |\n|:---------------------------------------|:------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Compute Engine default service account | No         | https://www.googleapis.com/auth/devstorage.read_only https://www.googleapis.com/auth/service.management.readonly https://www.googleapis.com/auth/servicecontrol https://www.googleapis.com/auth/trace.append https://www.googleapis.com/auth/logging.write: added if Cloud Logging is enabled https://www.googleapis.com/auth/monitoring: added if Cloud Monitoring is enabled |\n| Compute Engine default service account | Yes         | Manually specified scopes https://www.googleapis.com/auth/monitoring.write https://www.googleapis.com/auth/logging.write: added if Cloud Logging is enabled https://www.googleapis.com/auth/monitoring: added if Cloud Monitoring is enabled                                 |\n| Custom service account     | No         | https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/cloud-platform                                                                     |\n| Custom service account     | Yes         | Manually specified scopes https://www.googleapis.com/auth/monitoring.write https://www.googleapis.com/auth/logging.write: added if Cloud Logging is enabled https://www.googleapis.com/auth/monitoring: added if Cloud Monitoring is enabled                                 |\n## Configuring a custom service account for workloads\n[IAM](/iam/docs/overview) is the access control system for granting authorized roles to users and service accounts within your Google Cloud project. A [service account](/iam/docs/service-accounts) is a special Google Account that performs tasks, such as deploying applications, on your behalf. You use IAM to create a service account, then use IAM policy bindings to secure the account.\nIf your workloads require access to Compute Engine, grant the service account the [Compute Engine Admin](/compute/docs/access/iam#compute.admin) role. If your workloads need to pull private images from Artifact Registry, see [Configuring access control for Artifact Registry repositories](/artifact-registry/docs/access-control) .\n### Create a service account\nTo create a custom service account named `kubernetes-engine-node-sa` , run the following commands:\n```\nexport NODE_SA_NAME=kubernetes-engine-node-sagcloud iam service-accounts create $NODE_SA_NAME \\\u00a0 --display-name \"GKE Node Service Account\"export NODE_SA_EMAIL=`gcloud iam service-accounts list --format='value(email)' \\\u00a0 --filter='displayName:GKE Node Service Account'`\n```\n**Note:** These commands export two variables, `$NODE_SA_NAME` and `$NODE_SA_EMAIL` , that are used in commands documented later on this page.\n### Grant minimal roles\nTo configure the service account with the necessary roles and permissions for your GKE node to function, run the following commands, where `$PROJECT` is your [project ID](https://support.google.com/cloud/answer/6158840) :\n```\nexport PROJECT=`gcloud config get-value project`gcloud projects add-iam-policy-binding $PROJECT \\\u00a0 --member serviceAccount:$NODE_SA_EMAIL \\\u00a0 --role roles/monitoring.metricWritergcloud projects add-iam-policy-binding $PROJECT \\\u00a0 --member serviceAccount:$NODE_SA_EMAIL \\\u00a0 --role roles/monitoring.viewergcloud projects add-iam-policy-binding $PROJECT \\\u00a0 --member serviceAccount:$NODE_SA_EMAIL \\\u00a0 --role roles/logging.logWriter\n```\n### Grant additional roles\n**Caution:** The `compute.admin` role shouldn't be granted to this service account unless necessary. Granting this role allows workloads to create, delete, read metadata on, and access nodes using SSH, among other operations.\nTo grant the service account the [Compute Engine Admin](/compute/docs/access/iam#compute.admin) role, run the following command:\n```\ngcloud projects add-iam-policy-binding $PROJECT \\\u00a0 --member serviceAccount:$NODE_SA_EMAIL \\\u00a0 --role roles/compute.admin\n```\nTo learn how to grant service accounts access to private images stored in Artifact Registry, see [Granting access to Google Kubernetes Engine clusters](/artifact-registry/docs/access-control#gke) .\n### Creating a cluster or node pool with the custom service account\nTo create a cluster that uses the custom service account, run the following command:\n```\ngcloud container clusters create --service-account=$NODE_SA_EMAIL\n```\nTo create a node pool in an existing cluster:\n```\ngcloud container node-pools create --service-account=$NODE_SA_EMAIL\n```\n**Note:** You can also find the service account's email address by running the following command:```\ngcloud iam service-accounts list --format='value(email)' \\\n  --filter='displayName:Node Service Account'\n```", "guide": "Google Kubernetes Engine (GKE)"}