{"title": "Google Kubernetes Engine (GKE) - Configure network policies for applications", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/network-policy", "abstract": "# Google Kubernetes Engine (GKE) - Configure network policies for applications\nThis tutorial demonstrates how to use cluster network policies to control which Pods receive incoming network traffic, and which Pods can send outgoing traffic. For more information, see [Creating a cluster network policy](/kubernetes-engine/docs/how-to/network-policy) .\nNetwork policies allow you to limit connections between Pods. Therefore, using network policies provide better security by reducing the compromise radius.\nNote that the network policies determine whether a connection is allowed, and they do not offer higher level features like authorization or secure transport (like SSL/TLS).", "content": "## Objectives\nIn this tutorial, you will learn:\n- How to create clusters with Network Policy enforcement\n- How to restrict incoming traffic to Pods using labels\n- How to restrict outgoing traffic from Pods using labels\n## CostsIn this document, you use the following billable components of Google Cloud:- [GKE](/kubernetes-engine/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\nTake the following steps to enable the Kubernetes Engine API:\n- Visit the [ Kubernetes Engine page](https://console.cloud.google.com/projectselector/kubernetes) in the Google Cloud console.\n- Create or select a project.\n- Wait for the API and related services to be enabled.  This can take several minutes.\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\nInstall the following command-line tools used in this tutorial:- `gcloud`is used to create and delete Kubernetes Engine clusters.`gcloud`is included in the [gcloud CLI](/sdk/docs/install) .\n- `kubectl`is used to manage Kubernetes, the cluster orchestration system used by  Kubernetes Engine. You can install`kubectl`using`gcloud`:```\ngcloud components install kubectl\n```\nClone the sample code from GitHub:\n```\ngit clone https://github.com/GoogleCloudPlatform/kubernetes-engine-samples\ncd kubernetes-engine-samples/networking/network-policies\n```### Set defaults for the gcloud command-line tool\nTo save time typing your\n [project ID](https://support.google.com/cloud/answer/6158840) \nand\n [Compute Engine zone](/compute/docs/zones#available) \noptions in the\n`gcloud`\ncommand-line tool, you can set the defaults:\n```\ngcloud config set project project-id\ngcloud config set compute/zone compute-zone\n```## Creating a GKE cluster with network policy enforcementTo create a [container cluster](/kubernetes-engine/docs/clusters) with network policy enforcement, run the following command:\n```\ngcloud container clusters create test --enable-network-policy\n```\n **Warning:** If you omit the `--enable-network-policy` flag, any NetworkPolicy resources you create are silently ignored.## Restricting incoming traffic to PodsKubernetes `NetworkPolicy` resources let you configure network access policies for the Pods. `NetworkPolicy` objects contain the following information:- Pods the network policies apply to, usually designated by a label selector\n- Type of traffic the network policy affects: Ingress for incoming traffic, Egress for outgoing traffic, or both\n- For Ingress policies, which Pods can connect to the specified Pods\n- For Egress policies, the Pods to which the specified Pods can connect\nFirst, run a web server application with label `app=hello` and expose it internally in the cluster:\n```\nkubectl run hello-web --labels app=hello \\\n --image=us-docker.pkg.dev/google-samples/containers/gke/hello-app:1.0 --port 8080 --expose\n```\nNext, configure a `NetworkPolicy` to allow traffic to the `hello-web` Pods from only the `app=foo` Pods. Other incoming traffic from Pods that do not have this label, external traffic, and traffic from Pods in other namespaces are blocked.\nThe following manifest selects Pods with label `app=hello` and specifies an Ingress policy to allow traffic only from Pods with the label `app=foo` :\n [  networking/network-policies/hello-allow-from-foo.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/networking/network-policies/hello-allow-from-foo.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/networking/network-policies/hello-allow-from-foo.yaml) \n```\nkind: NetworkPolicyapiVersion: networking.k8s.io/v1metadata:\u00a0 name: hello-allow-from-foospec:\u00a0 policyTypes:\u00a0 - Ingress\u00a0 podSelector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: hello\u00a0 ingress:\u00a0 - from:\u00a0 \u00a0 - podSelector:\u00a0 \u00a0 \u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 app: foo\n```\nTo apply this policy to the cluster, run the following command:\n```\nkubectl apply -f hello-allow-from-foo.yaml\n```\n### Validate the Ingress policyFirst, run a temporary Pod with the label `app=foo` and get a shell in the Pod:\n```\nkubectl run -l app=foo --image=alpine --restart=Never --rm -i -t test-1\n```\nMake a request to the `hello-web:8080` endpoint to verify that the incoming traffic is allowed:\n```\n/ # wget -qO- --timeout=2 http://hello-web:8080\n```\n```\nHello, world!\nVersion: 1.0.0\nHostname: hello-web-2258067535-vbx6z\n/ # exit\n```\nTraffic from Pod `app=foo` to the `app=hello` Pods is enabled.\nNext, run a temporary Pod with a different label ( `app=other` ) and get a shell inside the Pod:\n```\nkubectl run -l app=other --image=alpine --restart=Never --rm -i -t test-1\n```\nMake the same request to observe that the traffic is **not allowed** and therefore the request times out, then exit from the Pod shell:\n```\n/ # wget -qO- --timeout=2 http://hello-web:8080\n```\n```\nwget: download timed out\n/ # exit\n```## Restricting outgoing traffic from the PodsYou can restrict outgoing traffic as you would incoming traffic.\nHowever, to be able to query internal hostnames such as `hello-web` or external hostnames such as `www.example.com` , you must allow DNS (domain name system) resolution in your egress network policies. DNS traffic occurs on port 53 using TCP and UDP protocols.\nTo enable egress network policies, deploy a `NetworkPolicy` controlling outbound traffic from Pods with the label `app=foo` while allowing traffic only to Pods with the label `app=hello` , as well as the DNS traffic.\nThe following manifest specifies a network policy controlling the egress traffic from Pods with label `app=foo` with two allowed destinations:- Pods in the same namespace with the label`app=hello`.\n- Cluster Pods or external endpoints on port 53 (UDP and TCP).\n [  networking/network-policies/foo-allow-to-hello.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/networking/network-policies/foo-allow-to-hello.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/networking/network-policies/foo-allow-to-hello.yaml) \n```\nkind: NetworkPolicyapiVersion: networking.k8s.io/v1metadata:\u00a0 name: foo-allow-to-hellospec:\u00a0 policyTypes:\u00a0 - Egress\u00a0 podSelector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: foo\u00a0 egress:\u00a0 - to:\u00a0 \u00a0 - podSelector:\u00a0 \u00a0 \u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 app: hello\u00a0 - ports:\u00a0 \u00a0 - port: 53\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 - port: 53\u00a0 \u00a0 \u00a0 protocol: UDP\n```\nTo apply this policy to the cluster, run the following command:\n```\nkubectl apply -f foo-allow-to-hello.yaml\n```\n### Validate the egress policyFirst, deploy a new web application called `hello-web-2` and expose it internally in the cluster:\n```\nkubectl run hello-web-2 --labels app=hello-2 \\\n --image=us-docker.pkg.dev/google-samples/containers/gke/hello-app:1.0 --port 8080 --expose\n```\nNext, run a temporary Pod with the label `app=foo` and open a shell inside the container:\n```\nkubectl run -l app=foo --image=alpine --rm -i -t --restart=Never test-3\n```\nValidate that the Pod can establish connections to `hello-web:8080` :\n```\n/ # wget -qO- --timeout=2 http://hello-web:8080\n```\n```\nHello, world!\nVersion: 1.0.0\nHostname: hello-web-2258067535-vbx6z\n```\nValidate that the Pod **cannot** establish connections to `hello-web-2:8080` :\n```\n/ # wget -qO- --timeout=2 http://hello-web-2:8080\n```\n```\nwget: download timed out\n```\nValidate that the Pod **cannot** establish connections to external websites such as `www.example.com` , and exit from the Pod shell.\n```\n/ # wget -qO- --timeout=2 http://www.example.com\n```\n```\nwget: download timed out\n/ # exit\n```## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- **Delete the container cluster:** This step will delete the resources that make up the container cluster, such as the compute instances, disks and network resources.```\ngcloud container clusters delete test\n```\n## What's next\n- [Configuring Network Policies on GKE](/kubernetes-engine/docs/how-to/network-policy) \n- [Kubernetes Network Policies documentation](https://kubernetes.io/docs/concepts/services-networking/network-policies/) \n- [Example Network Policies](https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy/)", "guide": "Google Kubernetes Engine (GKE)"}