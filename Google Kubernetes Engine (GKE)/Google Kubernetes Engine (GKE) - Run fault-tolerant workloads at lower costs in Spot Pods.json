{"title": "Google Kubernetes Engine (GKE) - Run fault-tolerant workloads at lower costs in Spot Pods", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/autopilot-spot-pods", "abstract": "# Google Kubernetes Engine (GKE) - Run fault-tolerant workloads at lower costs in Spot Pods\nThis page shows you how to run fault-tolerant workloads at lower costs by using in your Google Kubernetes Engine (GKE) [Autopilot](/kubernetes-engine/docs/concepts/autopilot-overview) clusters.\n", "content": "## Overview\nIn GKE Autopilot clusters, Spot Pods are Pods that run on nodes backed by Compute Engine [Spot VMs](/compute/docs/instances/spot) . Spot Pods are priced lower than standard Autopilot Pods, but can be evicted by GKE whenever compute resources are required to run standard Pods.\nSpot Pods are ideal for running stateless, batch, or fault-tolerant workloads at lower costs compared to running those workloads as standard Pods. To use Spot Pods in Autopilot clusters, modify the manifest with your Pod specification to request Spot Pods.\nYou can run Spot Pods on the default general-purpose Autopilot compute class as well as on specialized compute classes that meet specific hardware requirements. For information about these compute classes, refer to [Compute classes in Autopilot](/kubernetes-engine/docs/concepts/autopilot-compute-classes) .\n**Caution:** Spot Pods can be evicted at any time based on compute resource needs. Do not use Spot Pods to run critical workloads that might be sensitive to the ephemeral nature of Spot Pods.\nTo learn more about the pricing for Spot Pods in Autopilot clusters, see [Google Kubernetes Engine pricing](/kubernetes-engine/pricing#autopilot_mode) .\n## Benefits\nUsing Spot Pods in your Autopilot clusters provides you with the following benefits:\n- Lower pricing than running the same workloads on standard Autopilot Pods.\n- GKE automatically manages autoscaling and scheduling.\n- GKE automatically [taints](/kubernetes-engine/docs/how-to/node-taints) nodes that run Spot Pods to ensure that standard Pods, like your critical workloads, aren't scheduled on those nodes. Your deployments that do use Spot Pods are automatically updated with a corresponding [toleration](/kubernetes-engine/docs/how-to/node-taints#configuring_pods_to_tolerate_a_taint) .## Requirements and limitations\n- Requires GKE version 1.21.4 or later.\n- Spot Pods are excluded from the [Autopilot Service Level Agreement](/kubernetes-engine/sla) .\n- GKE cannot schedule Spot Pods on clusters running GKE versions prior to 1.21.4.\n- Autopilot clusters support requests for in clusters running GKE version 1.21.4 or later, using the `cloud.google.com/gke-preemptible` selector. Pods that use this selector are automatically migrated to Spot Pods, and the selector is changed to `cloud.google.com/gke-spot` . **Caution:** Automatic migration of the `cloud.google.com/gke-preemptible` selector is not supported on clusters running GKE versions prior to 1.21.4. If you request preemptible Pods on these clusters, the Pods get preemptible behavior but at **standard pricing** . As a best practice, avoid using preemptible Pods in your deployments, as this reduces Pod availability with no price benefit.## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.## Request Spot Pods in your Autopilot workloads\nTo request that your Pods run as Spot Pods, use the `cloud.google.com/gke-spot=true` label in a [nodeSelector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) or [node affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity) in your Pod specification. GKE automatically provisions nodes that can run Spot Pods.\n**Note:** You cannot use the `cloud.google.com/gke-provisioning=spot` \u2014which is added to nodes running GKE version 1.25.5-gke.2500 or later\u2014to schedule workloads on Spot Pods.\nSpot Pods can be evicted and terminated at any time, for example if the compute resources are required elsewhere in Google Cloud. When a termination occurs, Spot Pods on the terminating node can request up to a 25 second grace period before termination, which is granted on a best effort basis, by specifying the `terminationGracePeriodSeconds` field.\nThe maximum grace period given to Spot Pods **during preemption** is 25 seconds. Requesting more than 25s in `terminationGracePeriodSeconds` doesn't grant more than 25s during preemption. On eviction, your Pod is sent the [SIGTERM signal](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination) , and should take steps to shutdown during the grace period.\nFor Autopilot, GKE also automatically taints the nodes created to run Spot Pods and modifies those workloads with the corresponding toleration. The taint prevents standard Pods from being scheduled on nodes that run Spot Pods.\n### Use a nodeSelector to require Spot Pods\nYou can use a nodeSelector to require Spot Pods in a Deployment. Add the `cloud.google.com/gke-spot=true` label to your Deployment, such as in the following example:\n```\napiVersion: batch/v1kind: Jobmetadata:\u00a0 name: pispec:\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: pi\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 cloud.google.com/gke-spot: \"true\"\u00a0 \u00a0 \u00a0 terminationGracePeriodSeconds: 25\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: pi\u00a0 \u00a0 \u00a0 \u00a0 image: perl:5.34.0\u00a0 \u00a0 \u00a0 \u00a0 command: [\"perl\", \u00a0\"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"]\u00a0 \u00a0 \u00a0 restartPolicy: Never\u00a0 backoffLimit: 4\n```\n### Use node affinity to request Spot Pods\nAlternatively, you can use [node affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity) to request Spot Pods. Node affinity provides you with a more extensible way to select nodes to run your workloads. For example, you can combine several selection criteria to get finer control over where your Pods run. When you use node affinity to request Spot Pods, you can specify the type of node affinity to use, as follows:\n- `requiredDuringSchedulingIgnoredDuringExecution`: Must use Spot Pods.\n- `preferredDuringSchedulingIgnoredDuringExecution`: Use Spot Pods on a best-effort basis.\nTo use node affinity to Spot Pods in a Deployment, add the following `nodeAffinity` rule to your Deployment manifest:\n```\napiVersion: batch/v1kind: Jobmetadata:\u00a0 name: pispec:\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: pi\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 terminationGracePeriodSeconds: 25\u00a0 \u00a0 \u00a0 affinity:\u00a0 \u00a0 \u00a0 \u00a0 nodeAffinity:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requiredDuringSchedulingIgnoredDuringExecution:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nodeSelectorTerms:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - matchExpressions:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - key: cloud.google.com/gke-spot\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 operator: In\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 values:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - \"true\"\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: pi\u00a0 \u00a0 \u00a0 \u00a0 image: perl:5.34.0\u00a0 \u00a0 \u00a0 \u00a0 command: [\"perl\", \u00a0\"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"]\u00a0 \u00a0 \u00a0 restartPolicy: Never\u00a0 backoffLimit: 4\n```\nTo use node affinity to request Spot Pods on a best-effort basis, use [preferredDuringSchedulingIgnoredDuringExecution](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity) . When you request Spot Pods on a preferred basis, GKE schedules your Pods based on the following order:\n- Existing nodes that can run Spot Pods that have available allocatable capacity.\n- Existing standard nodes that have available allocatable capacity.\n- New nodes that can run Spot Pods, if the compute resources are available.\n- New standard nodes.\nBecause GKE prefers existing standard nodes that have allocatable capacity over creating new nodes for Spot Pods, you might notice more Pods running as standard Pods than as Spot Pods, which prevents you from taking full advantage of the lower pricing of Spot Pods.\n**Note:** We recommend that, for all workloads that can tolerate disruptions well, you require Spot Pods using either a `nodeSelector` or the `requiredDuringScheduledIgnoredDuringExecution` node affinity. Requiring Spot Pods ensures that you take full advantage of the lower pricing of Spot Pods.\n## Find and delete terminated Pods\n**Note:** Starting in GKE version 1.25.7-gke.1000 and 1.26.2-gke.1000, GKE automatically deletes Pods that were evicted during node termination. The following instructions to manually delete terminated Pods only apply to earlier GKE versions.\nDuring graceful Pod termination, the kubelet assigns a `Failed` status and a `Shutdown` reason to the terminated Pods. When the number of terminated Pods reaches a threshold of 1000, [garbage collection](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-garbage-collection) cleans up the Pods. You can also delete shutdown Pods manually using the following command:\n```\nkubectl get pods --all-namespaces | grep -i shutdown | awk '{print $1, $2}' | xargs -n2 kubectl delete pod -n\n```\n## What's next\n- [Learn more about Autopilot cluster architecture](/kubernetes-engine/docs/concepts/autopilot-architecture) .\n- [Learn about the lifecycle of Pods](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/) .\n- [Read about Spot VMs in GKE Standard clusters](/kubernetes-engine/docs/concepts/spot-vms) .", "guide": "Google Kubernetes Engine (GKE)"}