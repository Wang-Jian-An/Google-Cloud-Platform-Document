{"title": "Google Kubernetes Engine (GKE) - Cluster administration overview", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-admin-overview", "abstract": "# Google Kubernetes Engine (GKE) - Cluster administration overview\nIn Google Kubernetes Engine (GKE), you configure a cluster's configuration and characteristics using Google Cloud tools and APIs, including the [Google Cloud CLI](/sdk/gcloud) and the [Google Cloud console](https://console.cloud.google.com/) . These tasks include creating, updating, and deleting clusters, adding or removing nodes, and controlling who can access the cluster using Identity and Access Management (IAM).\nTo control the cluster's internal behavior, you use the Kubernetes API and the `kubectl` command-line interface. You can also configure many aspects of a cluster's behavior using the [Google Cloud console](https://console.cloud.google.com/) .\n**Warning:** Do not manually edit or delete `iptables` rules or other node-level settings that GKE manages. The node may become unreachable or unintentionally exposed when manual changes revert to the cluster's declarative configuration.\n", "content": "## Basic cluster administration\nBasic cluster administration tasks are specific to GKE clusters on Google Cloud and typically do not involve the Kubernetes system itself; you perform these tasks entirely by using the Google Cloud console, the Google Cloud CLI, or the GKE API.\n**Note:** For Autopilot clusters, basic cluster administration tasks such as node configuration and upgrades are managed by GKE.\n### Cluster and node upgrades\nBy default, clusters and node pools are upgraded automatically. You can learn more about configuring [how upgrades work](/kubernetes-engine/docs/concepts/cluster-upgrades) on each cluster, including when they can and cannot occur.\n### Cluster-level configuration\nCluster-level configuration tasks include [creating](/kubernetes-engine/docs/how-to/creating-a-container-cluster) and [deleting](/kubernetes-engine/docs/how-to/deleting-a-container-cluster) GKE clusters and nodes. You can control [when cluster maintenance tasks can occur](/kubernetes-engine/docs/how-to/maintenance-windows-and-exclusions) , and configure [cluster-level autoscaling](/kubernetes-engine/docs/concepts/cluster-autoscaler) .\n### Node configuration\nGKE offers a range of options for your cluster's nodes. For example, you can create one or more [node pools](/kubernetes-engine/docs/concepts/node-pools) ; node pools are groups of nodes within your cluster that share a common configuration. Your cluster must have at least one node pool, and a node pool called `default` is created when you create the cluster.\n**Note:** Node configuration does not apply to Autopilot clusters, because GKE configures your nodes for you.\nFor Standard clusters, you can set other node options on a per-pool basis, including:\n- [Automatic repairs](/kubernetes-engine/docs/concepts/node-auto-repair) : enforced on Autopilot clusters\n- [Spot VMs](/kubernetes-engine/docs/concepts/spot-vms) \n- [Local SSDs](/kubernetes-engine/docs/concepts/local-ssd) \n- [Minimum CPU platform](/kubernetes-engine/docs/concepts/min-cpu-platform) ## Configuring cluster monitoring\nGoogle recommends that you use Google Cloud's [Managed Service for Prometheus](/stackdriver/docs/managed-prometheus) to monitor your Kubernetes applications and infrastructure.\nManaged Service for Prometheus is Google Cloud's fully managed multi-cloud solution for [Prometheus](https://prometheus.io) metrics. It lets you globally monitor and alert on your workloads, using Prometheus, without having to manually manage and operate Prometheus at scale.\nManaged Service for Prometheus collects metrics from Prometheus exporters and lets you query the data globally using PromQL, meaning that you can keep using any existing [Grafana](https://grafana.com/grafana) dashboards, PromQL-based alerts, and workflows. It is hybrid- and multi-cloud compatible, can monitor both Kubernetes and VM workloads, retains data for 24 months, and maintains portability by staying compatible with upstream Prometheus. You can also supplement your Prometheus monitoring by querying over [1,500 free metrics](/monitoring/api/metrics_gcp) in Cloud Monitoring, including [free GKE system metrics](/monitoring/api/metrics_kubernetes) , using PromQL.\nFor more information about configuring cluster monitoring, refer to the following guides:\n- [Managed Service for Prometheus](/stackdriver/docs/managed-prometheus) \n- [Get started with managed collection](/stackdriver/docs/managed-prometheus/setup-managed) ## Configuring cluster networking\nAnother aspect of cluster administration is to enable and control various networking features for your cluster. Most networking features are set at cluster creation: when you create a cluster using a Google Cloud interface, you must enable the networking features that you want to use. Some of these features might require further configuration using Kubernetes interfaces, such as the `kubectl` command-line interface.\nFor example, to enable [network policy enforcement](/kubernetes-engine/docs/how-to/network-policy) on your GKE cluster, you must first enable the feature using Google Cloud console or Google Cloud CLI. Then, you specify the actual network policy rules using the Kubernetes network policy API or `kubectl` command-line interface. For Autopilot clusters, network policy is turned off by default, but you can enable this feature.\nFor more information about enabling networking features on GKE, refer to the following guides:\n- [Create a VPC-native cluster](/kubernetes-engine/docs/how-to/alias-ips) \n- [Configure an IP masquerade agent in Standard clusters](/kubernetes-engine/docs/how-to/ip-masquerade-agent) \n- [Create a network policy](/kubernetes-engine/docs/how-to/network-policy) ## Configuring cluster security\nGKE includes Google Cloud-specific and Kubernetes security features that you can use with your cluster. You can manage Google Cloud-level security, such as IAM, using the Google Cloud console. You manage intra-cluster security features, such as role-based access control, using Kubernetes APIs and other interfaces.\nTo learn about the security features and capabilities that are available in GKE, refer to the [Security overview](/kubernetes-engine/docs/concepts/security-overview) and [Harden your cluster security](/kubernetes-engine/docs/how-to/hardening-your-cluster) . GKE Autopilot clusters implement many of these security features and hardening best practices automatically. For more information, refer to [Security capabilities in GKE Autopilot](/kubernetes-engine/docs/concepts/autopilot-security) .\n## Configuring for disaster recovery\nTo ensure that your production workloads remain available in the event of a service-interrupting event, you should prepare a disaster recovery (DR) plan. To learn more about DR planning, see the [Disaster recovery planningguide](/architecture/dr-scenarios-planning-guide) .\nYour Kubernetes configuration and any persistent volumes will not be backed up unless you take explicit action. To backup and restore your Kubernetes configuration and persistent volumes on GKE clusters, you can use [Backup forGKE](/kubernetes-engine/docs/add-on/backup-for-gke/concepts/backup-for-gke) .", "guide": "Google Kubernetes Engine (GKE)"}