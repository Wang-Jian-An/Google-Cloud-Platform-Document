{"title": "Google Kubernetes Engine (GKE) - Enabling Linux auditd logs on GKE nodes", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/linux-auditd-logging", "abstract": "# Google Kubernetes Engine (GKE) - Enabling Linux auditd logs on GKE nodes\nThis page explains how to enable verbose [operating system auditlogs](http://man7.org/linux/man-pages/man7/audit.rules.7.html) on Google Kubernetes Engine nodes running [Container-Optimized OS](/kubernetes-engine/docs/concepts/node-images#container-optimized_os) . This page also explains how to configure a fluent-bit logging agent to send logs to Cloud Logging. Enabling Linux auditd logging is not supported in GKE Autopilot clusters, because Google manages the nodes and underlying virtual machines (VMs).\nOperating system audit logging is distinct from [Cloud Audit Logs](/logging/docs/audit) and [Kubernetes Audit Logs](https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/) .\n", "content": "## Overview\nOperating system logs on your nodes provide valuable information about the state of your cluster and workloads, such as error messages, login attempts, and binary executions. You can use this information to debug problems or investigate security incidents.\nTo collect logs from each node in a cluster, use a [DaemonSet](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/) which runs exactly one Pod on each cluster node where the DaemonSet is eligible to be scheduled. This Pod configures the `auditd` logging daemon on the host and configures the logging agent to send the logs to Logging or any other log-ingestion service.\nBy definition, auditing occurs after an event and is a postmortem security measure. auditd logs alone are probably not sufficient for conducting forensics on your cluster. Consider how to best use auditd logging as part of your overall security strategy.\n**Note:** Increased logging activity on a node increases resource usage on that node, which may affect the performance of your workload and may incur additional resource costs. Audit logs sent to Logging consume log quota from the project. You might need to [increase your log quota and storage](https://console.cloud.google.com/iam-admin/quotas?project=_&service=logging.googleapis.com) to accommodate the additional logs.\n## Limitations\nThe logging mechanisms described on this page work only on nodes running Container-Optimized OS in GKE Standard clusters.\n## How the logging DaemonSet works\nThis section describes how the [example logging DaemonSet](https://github.com/GoogleCloudPlatform/k8s-node-tools/blob/master/os-audit/cos-auditd-logging.yaml) works so that you can configure it to suit your needs. The next section explains how to deploy the DaemonSet.\nThe example manifest defines a DaemonSet, a ConfigMap, and a Namespace to contain them.\nThe DaemonSet deploys a Pod to each node in the cluster. The Pod contains two containers. The first is an [initcontainer](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) that starts the cloud-audit-setup systemd service available on Container-Optimized OS nodes. The second container, `cos-auditd-fluent-bit` , contains an instance of [fluent-bit](https://docs.fluentbit.io/manual/) which is configured to collect the Linux audit logs from the node journal and export them to Cloud Logging.\nThe example logging DaemonSet logs the following events:\n- `auditd`system configuration modifications\n- AppArmor permission checks\n- `execve()`,`socket()`,`setsockopt()`, and`mmap()`executions\n- network connections\n- user logins\n- SSH session and all other TTYs (including`kubectl exec -t`sessions)\n**Note:** We recommend you create the DaemonSet immediately after creating your cluster. Logs are only generated for events that occur after the DaemonSet is deployed. The DaemonSet automatically configures `auditd` logging on all new nodes that are added to the cluster.\n## Configuring the logging DaemonSet\nYou configure the logging DaemonSet using a ConfigMap, `cos-auditd-fluent-bit-config` . The example provided sends audit logs to Logging, but you can configure it to send logs to other destinations.\nThe volume of logs produced by `auditd` can be very large and may incur additional costs because it consumes system resources and sends more logs than the default logging configuration. You can set up filters to manage the logging volume:\n- You can set up filters in the`cos-auditd-fluent-bit-config`ConfigMap so that certain data isn't logged. Refer to the [fluent-bit documentation for the Grep, Modify, Record Modifier, and other filters](https://docs.fluentbit.io/manual/pipeline/filters) .\n- You can also configure Logging to filter incoming logs. For more details, see [Configure and manage sinks](/logging/docs/export/configure_export_v2#managing_sinks) .## Deploying the logging DaemonSet\n- You can use an existing cluster or [create a new one](/kubernetes-engine/docs/how-to/creating-a-container-cluster) .\n- Download the example manifests:```\ncurl https://raw.githubusercontent.com/GoogleCloudPlatform/k8s-node-tools/master/os-audit/cos-auditd-logging.yaml > cos-auditd-logging.yaml\n```\n- Edit the example manifests to suit your needs. Refer to the [previous section](#how_the_logging_daemonset_works) for details about how the DaemonSet works.\n- Initialize common variables:```\nexport CLUSTER_NAME=CLUSTER_NAMEexport CLUSTER_LOCATION=COMPUTE_REGION\n```Replace the following:- ``: the name of your cluster.\n- ``: the Compute Engine [region](/compute/docs/regions-zones#available) for your cluster. For zonal clusters, use the zone instead.\n- Deploy the logging Namespace, DaemonSet, and ConfigMap:```\nenvsubst '$CLUSTER_NAME,$CLUSTER_LOCATION' < cos-auditd-logging.yaml \\| kubectl apply -f ```\n- Verify that the logging Pods have started. If you defined a different Namespace in your manifests, replace with the name of the namespace you're using.```\nkubectl get pods --namespace=cos-auditd\n```If the Pods are running, the output looks like this:```\nNAME            READY STATUS RESTARTS AGE\ncos-auditd-logging-g5sbq       1/1  Running 0   27s\ncos-auditd-logging-l5p8m       1/1  Running 0   27s\ncos-auditd-logging-tgwz6       1/1  Running 0   27s\n```One Pod is deployed on each node in the cluster, in this case the cluster has three nodes.\n- You can now access the audit logs in Logging. In the [Logs Explorer](/logging/docs/view/logs-explorer-interface) , filter the results using the following query:```\nLOG_ID(\"linux-auditd\")resource.labels.cluster_name = \"CLUSTER_NAME\"resource.labels.location = \"COMPUTE_REGION\"\n```Alternatively, you can use gcloud CLI (use `--limit` because the result set can be very large):```\ngcloud logging read --limit=100 \"LOG_ID(\"linux-auditd\") AND resource.labels.cluster_name = \"${CLUSTER_NAME}\" AND resource.labels.location = \"${CLUSTER_LOCATION}\"\"\n```## Exporting logs\nTo learn how to route your logs to supported destinations, see [Configure and manage sinks](/logging/docs/export/configure_export_v2) .\n## Cleanup\nTo disable `auditd` logging, delete the logging DaemonSet and reboot the nodes. The audit configuration is locked once enabled and can only be changed by recreating the node.\n- Delete the DaemonSet, ConfigMap, and their Namespace from the cluster:```\nkubectl delete -f cos-auditd-logging.yaml\n```\n- Reboot your cluster's nodes. First, get the instance group they belong to:```\ninstance_group=$(gcloud compute instance-groups managed list \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --format=\"value(name)\" \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --filter=${CLUSTER_NAME})\n```Then get the instances themselves:```\ninstances=$(gcloud compute instance-groups managed list-instances ${instance_group} \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--format=\"csv(instance)[no-heading][terminator=',']\")\n``` **Note:** If the command fails to select the correct region or zone for your instances, [set the default Compute Engine region or zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) . For a list of available zones and regions, refer to [Available regions andzones](/compute/docs/regions-zones#available) .Finally, recreate the instances:```\ngcloud compute instance-groups managed recreate-instances ${instance_group} \\\u00a0 \u00a0--instances=${instances}\n```## What's next\n- Watch [Cloud Forensics 101](https://www.youtube.com/watch?v=OkjTqlETgMA) to get started with cloud forensics.\n- Learn about [Kubernetes Audit Logging](https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/) and [audit policy](https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/#audit-policy) .\n- Read the [Kubernetes Engine Security Overview](/kubernetes-engine/docs/concepts/security-overview) .\n- Learn about [Cloud Audit Logs](/logging/docs/audit) .", "guide": "Google Kubernetes Engine (GKE)"}