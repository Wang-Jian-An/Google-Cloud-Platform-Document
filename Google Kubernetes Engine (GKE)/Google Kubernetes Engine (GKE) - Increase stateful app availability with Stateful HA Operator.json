{"title": "Google Kubernetes Engine (GKE) - Increase stateful app availability with Stateful HA Operator", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/stateful-ha", "abstract": "# Google Kubernetes Engine (GKE) - Increase stateful app availability with Stateful HA Operator\nStateful High Availability (HA) Operator allows you to use GKE's built-in integration with [regionalPersistent Disk](/compute/docs/disks/high-availability-regional-persistent-disk) to automate and control the speed of [StatefulSet](/kubernetes-engine/docs/concepts/statefulset) Pod failover. During failover, the operator automatically handles detecting node failure, detaching a volume from a failed node, and ensuring safe volume attachment to the failover node.\n", "content": "## Why use Stateful HA Operator\nA common stateful architecture for achieving high availability uses regional Persistent Disks as the storage layer. These disks provide synchronous replication of data between two zones in a region. During node or zonal network failures, this architecture lets your workloads (by [force-attaching](/sdk/gcloud/reference/compute/instances/attach-disk#--force-attach) ) replicas to storage on another node in a different zone.\nStateful HA Operator lets you make the following optimizations:\n- **Improve recovery time of single-replica applications** : If you use only one replica, you can use Stateful HA Operator and swap out zonal storage for regional storage when your application is provisioned, to increase data durability and availability in the event of a node failure.\n- **Reduce cross-zone networking costs** : Replicating data across multiple zones can be costly for high throughput applications. You can use Stateful HA Operator to run your application in a single zone, while maintaining a failover path to an alternate zone that fits your application's SLA.\n### Limitations\nWith a single-replica Stateful HA Operator architecture, GKE persists your data in two zones through regional Persistent Disk but data is only accessible while your application replica is healthy. During a failover, your application will be temporarily unavailable while your replica is rescheduling to a new healthy node. If your application has a very low [recoverytime objective](/architecture/dr-scenarios-planning-guide#basics_of_dr_planning) (RTO), we recommend using a multi-replica approach.\n## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.\n### Requirements\n- Your cluster control plane and nodes must be running GKE version 1.28 or later.\n- When you use Stateful HA Operator, it automatically configures your linked StatefulSet to use regional Persistent Disks. However, you are responsible for ensuring that Pods are configured to use these disks, and capable of running in all zones associated with the underlying storage.\n- Make sure your application runs on [machine shapes](/compute/docs/disks/regional-persistent-disk#restrictions) that regional Persistent Disk supports: E2, N1, N2, N2D.\n- Make sure that the [Compute Engine Persistent Disk CSI driver](/kubernetes-engine/docs/how-to/persistent-volumes/gce-pd-csi-driver) is enabled. The Persistent Disk CSI driver is enabled by default on new Autopilot and Standard clusters and cannot be disabled or edited when using Autopilot. If you need to manually add the Persistent Disk CSI driver from your cluster, see [Enabling thePersistent Disk CSI driver on an existingcluster](/kubernetes-engine/docs/how-to/persistent-volumes/gce-pd-csi-driver#enabling_the_on_an_existing_cluster) .\n- If you are using a custom StorageClass, configure the Persistent Disk CSI driver with the`pd.csi.storage.gke.io`provisioner and these parameters:- `availability-class: regional-hard-failover`\n- `replication-type: regional-pd`\n## Set up and use Stateful HA Operator\nFollow these steps to set up Stateful HA Operator for your stateful workloads:\n- [Enable the StatefulHA add-on.](#enable) \n- [Install a HighAvailabilityApplication resource.](#resource) \n- [Install a StatefulSet.](#statefulset) \n- [Inspect the HighAvailabilityApplication resource.](#inspect) \n### Enable the StatefulHA add-on\nTo use the Stateful HA Operator, the `StatefulHA` add-on must be enabled on your cluster.\n- **Autopilot clusters** : GKE automatically enables the `StatefulHA` add-on at cluster creation. If your want to use Stateful HA Operator for an existing workload, re-deploy your workload on a new Autopilot cluster.\n- **Standard clusters** :- New cluster creation: Follow the gcloud CLI instructions to [create a Standardcluster](/kubernetes-engine/docs/how-to/creating-a-regional-cluster) and add the following flag:`--add-on=StatefulHA`.\n- Existing Standard cluster: Follow the gcloud CLI instructions to [update a Standard cluster's settings](/sdk/gcloud/reference/container/clusters/update) , and use the following flag to enable the add-on:`--update-addons=StatefulHA=ENABLED``.GKE automatically installs a StorageClass named `standard-rwo-regional` for you when the add-on is enabled.\n### Install a HighAvailabilityApplication resource\n`HighAvailabilityApplication` is a Kubernetes resource that simplifies StatefulSet settings and increases Pod availability on GKE. Stateful HA Operator reconciles `HighAvailabilityApplication` resources on GKE.\nIn the `HighAvailabilityApplication` specification, you must set `HighAvailabilityApplication.spec.resourceSelection.resourceKind` to `StatefulSet` .\nTo learn how to confgure the HighAvailability resource, refer to the `HighAvailabilityApplication` [reference documentation](/kubernetes-engine/docs/reference/crds/highavailabilityapplication) .\nSee the following example for PostgreSQL:\n- Save the following manifest in a file named `stateful-ha-example-resource.yaml` :```\nkind: HighAvailabilityApplicationapiVersion: ha.gke.io/v1metadata:\u00a0 name: APP_NAME\u00a0 namespace: APP_NAMESPACEspec:\u00a0 resourceSelection:\u00a0 \u00a0 resourceKind: StatefulSet\u00a0 policy:\u00a0 \u00a0 storageSettings:\u00a0 \u00a0 \u00a0 requireRegionalStorage: true\u00a0 \u00a0 failoverSettings:\u00a0 \u00a0 \u00a0 forceDeleteStrategy: AfterNodeUnreachable\u00a0 \u00a0 \u00a0 afterNodeUnreachable:\u00a0 \u00a0 \u00a0 \u00a0 afterNodeUnreachableSeconds: 20\n```Replace the following:- : the name of an application in your cluster that you want to protect. This name must be shared by both the HighAvailabilityApplication and StatefulSet.\n- : the application namespace. This namespace must be shared by both the HighAvailabilityApplication and StatefulSet being protected.\nIn this example:- `HighAvailabilityApplication.spec.policy.storageSettings.requireRegionalSettings`is set to`true`. This enforces regional storage.\n- `HighAvailabilityApplication.spec.policy.failoverSettings`is set to`AfterNodeUnreachable`. This determines how force delete is triggered on node failure.\n- `HighAvailabilityApplication.spec.policy.failoverSettings.afterNodeUnreachable`is set to 20. This is the timeout to force delete a Pod after the node it's running in is marked as unreachable.\n- Create the resource. The `HighAvailabilityApplication` resource identifies a StatefulSet with a matching namespace and name.```\nkubectl apply -f stateful-ha-example-resource.yaml\n```\n### Install a StatefulSet\nInstall a StatefulSet. For example, you can install a PostgreSQL StatefulSet using [Helm](https://helm.sh/) (Helm comes pre-installed with [Cloud Shell](/shell) ):\n```\nhelm install postgresql oci://registry-1.docker.io/bitnamicharts/postgresql \\\u00a0 --namespace=APP_NAMESPACE \\\u00a0 --set fullnameOverride=APP_NAME\n```\nThe `HighAvailabilityApplication` resource automatically modifies the StatefulSet's StorageClass to `standard-rwo-regional` , which uses regional Persistent Disk.\n### Inspect the HighAvailabilityApplication resource\nRun the following command to verify that the example application has automated failover enabled:\n```\nkubectl describe highavailabilityapplication APP_NAME\n```\nThe output should appear similar to the following:\n```\nStatus:\nConditions:\n Last Transition Time: 2023-08-09T23:59:52Z\n Message:    Application is protected\n Observed Generation: 1\n Reason:    ApplicationProtected\n Status:    True\n Type:     Protected\n```", "guide": "Google Kubernetes Engine (GKE)"}