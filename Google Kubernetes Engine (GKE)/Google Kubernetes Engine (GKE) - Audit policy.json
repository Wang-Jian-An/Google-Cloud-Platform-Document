{"title": "Google Kubernetes Engine (GKE) - Audit policy", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/audit-policy", "abstract": "# Google Kubernetes Engine (GKE) - Audit policy\nThis page describes the audit logging policy for Google Kubernetes Engine (GKE). For instructions to enable and view the different types of audit logs, as well as the required IAM permissions, refer to [GKE audit logging information](/kubernetes-engine/docs/how-to/audit-logging#enabling_audit_logging) .\n", "content": "## Before you begin\nBefore you read this topic, you should be familiar with the material in these topics:\n- [Audit logging in GKE](/kubernetes-engine/docs/how-to/audit-logging) \n- [Auditing in Kubernetes](https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/) ## Overview\nIn a GKE cluster, the Kubernetes API server writes audit log entries to a backend that is managed by GKE. As GKE receives log entries from the Kubernetes API server, it writes them to your project's Admin Activity log and Data Access log.\nThere are two policies that influence what you see in your project's audit logs:\n- The Kubernetes audit policy defines rules for which events are recorded as log entries. It also specifies what data the log entries should include.\n- The GKE audit policy determines which entries are written to your Admin Activity log and which are written to your Data Access log.\nThe audit logs that are written to your Data Access log depend on your audit log configuration. Data Access logs use the [Google Cloud Observability pricing](/stackdriver/pricing#google-clouds-operations-suite-pricing) . Admin Activity logs are offered at no charge. GKE supports the following types of Data Access logs.\n- `ADMIN_READ`: operations that read metadata about Kubernetes resources, such as listing Pods.\n- `DATA_READ`: operations that read data in Kubernetes resources, such as reading the logs for a Pod.\n- `DATA_WRITE`: operations that write data to Kubernetes resources, such as updating Pod status.\nFor more information, see [Configure Data Access audit logs](/logging/docs/audit/configure-data-access) .\n## Kubernetes audit policy\nThe Kubernetes API server follows a policy that is specified in the `--audit-policy-file` flag of the [kube-apiserver](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/) command.\nWhen GKE starts the Kubernetes API server, it supplies an audit policy file by setting the value of the `--audit-policy-file` flag. In the open-source Kubernetes repository, you can see the [configure-helper.sh](https://github.com/kubernetes/kubernetes/blob/08ddda629e906633ffdba6ea4cd9ebf2cc21dd23/cluster/gce/gci/configure-helper.sh#L706) script, which generates the audit policy file. You can see most of the audit policy file by looking directly at the script.\n### Events and stages\nWhen a person or component makes a request to the Kubernetes API server, the request goes through one or more :\n| Stage   | Description                 |\n|:-----------------|:-------------------------------------------------------------------------------|\n| RequestReceived | The audit handler has received the request.         |\n| ResponseStarted | The response headers have been sent, but the response body has not been sent. |\n| ResponseComplete | The response body has been completed, and no more bytes will be sent.   |\n| Panic   | There was an internal server error, and the request did not complete..   |\nEach stage of a request generates an , which is processed according to a policy. The policy specifies whether the event should be recorded as a log entry and if so, what data should be included in the log entry.\n## Audit levels\nThe Kubernetes audit policy file contains a list of rules. In the policy file, the first rule that matches an event sets the for the event.\nA rule can specify one of these audit levels:\n| Level   | Description                      |\n|:----------------|:--------------------------------------------------------------------------------------------------|\n| nan    | Do not create a log entry for the event.               |\n| Metadata  | Create a log entry. Include metadata, but do not include the request body or the response body. |\n| Request   | Create a log entry. Include metadata and the request body, but do not include the response body. |\n| RequestResponse | Create a log entry. Include metadata, the request body, and the response body.     |\nHere's an example of a rule. If an event matches the rule, the Kubernetes API server creates a log entry at the `Request` level.\n```\n- level: Request\n userGroups: [\"system:nodes\"]\n verbs: [\"update\",\"patch\"]\n resources:\n - group: \"\" # core\n  resources: [\"nodes/status\", \"pods/status\"]\n omitStages:\n - \"RequestReceived\"\n```\nAn event matches the rule if all of the following are true:\n- The event does not match any previous rule in the policy file.\n- The identity making the call is in the`system:nodes`user group.\n- The call is an`update`request or a`patch`request.\n- The request is on a`nodes/status`resource or a`pods/status`resource.\n- The event is not for the`RequestReceived`stage of the call.## Summary of the Kubernetes audit policy for GKE clusters\n- In general, write requests like `create` , `update` , and `delete` are logged at the `RequestResponse` level.\n- In general, `get` , `list` , and `watch` events are logged at the `Metadata` level.\n- Some events are treated as special cases. For a definitive list of requests that are treated as special cases, see the policy [script](https://github.com/kubernetes/kubernetes/blob/release-1.10/cluster/gce/gci/configure-helper.sh#L706) At the time of this writing, these are the special cases:- Update and patch requests by `kubelet` , `system:node-problem-detector` , or `system:serviceaccount:kube-system:node-problem-detector` on a `nodes/status` resource or a `pods/status` resource are logged at the Request level.\n- Update and patch requests by any identity in the `system:nodes` group on a `nodes/status` resource or a `pods/status` resource are logged at the Request level.\n- `deletecollection` requests by `system:serviceaccount:kube-system:namespace-controller` are logged at the Request level.\n- Requests on a `secrets` resource, a `configmaps` resource, or a `tokenreviews` resource are logged at the Metadata level.\n- Certain requests are not logged at all. For a definitive list of requests that are not logged, see the `level: None` rules in the policy [script](https://github.com/kubernetes/kubernetes/blob/release-1.10/cluster/gce/gci/configure-helper.sh#L706) . At the time of this writing, these are the requests that don't get logged:- Requests by `system:kube-proxy` to watch an `endpoints` resource, a `services` resource, or a `services/status` resource.\n- Get requests by `system:unsecured` on a `configmaps` resource in the `kube-system` namespace.\n- Get requests by `kubelet` on a `nodes` resource or a `nodes/status` resource.\n- Get requests by any identity in the `system:nodes` group on a `nodes` resource or a `nodes/status` resource.\n- Get and update requests by `system:kube-controller-manager` , `system:kube-scheduler` , or `system:serviceaccount:endpoint-controller` on an `endpoints` resource in the `kube-system` namespace.\n- Get requests by `system:apiserver` on a `namespaces` resource, a `namespaces/status` resource, or a `namespaces/finalize` resource.\n- Get and list requests by `system:kube-controller-manager` on any resource in the `metrics.k8s.io` group.\n- Requests to URLs that match `/healthz*` , `/version` , or `/swagger*` .\n## GKE audit policy\nAs GKE receives log entries from the Kubernetes API server, it applies its own policy to determine which entries get written to your project's Admin Activity log and which entries get written to your project's Data Access log.\nFor the most part, GKE applies the following rules to log entries that come from the Kubernetes API server:\n- Entries that represent `create` , `delete` , and `update` requests go to your Admin Activity log.\n- Entries that represent `get` , `list` , and `updateStatus` requests go to your Data Access log.\nFor information about pricing and which types of logs are enabled by default, see [Logging details](/stackdriver/pricing#logging-costs) .\n## Understanding the Kubernetes audit policy file\nFor GKE clusters, the Kubernetes audit policy file starts with rules that specify that certain events should not be logged at all. For example, this rule says that any `get` request by `kubelet` on a `nodes` resource or a `nodes/status` resource should not be logged. Recall that a level of `None` means that any matching event should not be logged:\n```\n- level: None\n users: [\"kubelet\"] # legacy kubelet identity\n verbs: [\"get\"]\n resources:\n - group: \"\" # core\n resources: [\"nodes\", \"nodes/status\"]\n```\nAfter the list of `level: None` rules, the policy file has a list of rules that are special cases. For example, here's a special-case rule says to log certain requests at the `Metadata` level:\n```\n- level: Metadata\n resources:\n  - group: \"\" # core\n  resources: [\"secrets\", \"configmaps\"]\n  - group: authentication.k8s.io\n  resources: [\"tokenreviews\"]\n omitStages:\n  - \"RequestReceived\"\n```\nAn event matches the rule if all of the following are true:\n- The event does not match any previous rule in the policy file.\n- The request is on a resource of type`secrets`,`configmaps`, or`tokenreviews`.\n- The event is not for the`RequestReceived`stage of the call.\nAfter the list of special-case rules, the policy file has some general rules. To see the general rules in the [script](https://github.com/kubernetes/kubernetes/blob/release-1.10/cluster/gce/gci/configure-helper.sh#L706) , you have to substitute the value of `known_apis` for `${known_apis}` . After the substitution, you get a rule like this:\n```\n- level: Request\n verbs: [\"get\", \"list\", \"watch\"]\n resources:\n - group: \"\" # core\n - group: \"admissionregistration.k8s.io\"\n - group: \"apiextensions.k8s.io\"\n - group: \"apiregistration.k8s.io\"\n - group: \"apps\"\n - group: \"authentication.k8s.io\"\n - group: \"authorization.k8s.io\"\n - group: \"autoscaling\"\n - group: \"batch\"\n - group: \"certificates.k8s.io\"\n - group: \"extensions\"\n - group: \"metrics.k8s.io\"\n - group: \"networking.k8s.io\"\n - group: \"policy\"\n - group: \"rbac.authorization.k8s.io\"\n - group: \"settings.k8s.io\"\n - group: \"storage.k8s.io\"\n omitStages:\n - \"RequestReceived\"\n```\nThe rule applies to events that do not match any previous rule in the policy file and are not at the `RequestReceived` stage. The rule says that `get` , `list` , and `watch` requests on any resource that belongs to one of the listed groups should be logged at the `Request` level.\n**Note:** The `get` , `list` , and `watch` requests don't actually have a request body, so in effect, the rule says to create log entries at the `Metadata` level.\nThe next rule in the policy file looks like this:\n```\n- level: RequestResponse\n resources:\n - group: \"\" # core\n - group: \"admissionregistration.k8s.io\"\n - group: \"apiextensions.k8s.io\"\n - group: \"apiregistration.k8s.io\"\n - group: \"apps\"\n - group: \"authentication.k8s.io\"\n - group: \"authorization.k8s.io\"\n - group: \"autoscaling\"\n - group: \"batch\"\n - group: \"certificates.k8s.io\"\n - group: \"extensions\"\n - group: \"metrics.k8s.io\"\n - group: \"networking.k8s.io\"\n - group: \"policy\"\n - group: \"rbac.authorization.k8s.io\"\n - group: \"settings.k8s.io\"\n - group: \"storage.k8s.io\"\n omitStages:\n - \"RequestReceived\"\n```\nThe rule applies to events that do not match any previous rule in the policy file and are not at the `RequestReceived` stage. In particular, the rule does not apply to the read requests: `get` , `list` , and `watch` . Instead, the rule applies to write requests like `create` , `update` , and `delete` . The rule says that write requests should be logged at the `RequestResponse` level.\n## What's next\n- [Kubernetes Auditing](https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/) \n- [Accessing audit logs](/kubernetes-engine/docs/how-to/audit-logging) \n- [GKE Security overview](/kubernetes-engine/docs/concepts/security-overview) \n- [Cloud Audit Logs](/logging/docs/audit)", "guide": "Google Kubernetes Engine (GKE)"}