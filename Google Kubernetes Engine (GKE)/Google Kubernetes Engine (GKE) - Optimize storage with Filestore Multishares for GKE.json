{"title": "Google Kubernetes Engine (GKE) - Optimize storage with Filestore Multishares for GKE", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/optimize-multishares", "abstract": "# Google Kubernetes Engine (GKE) - Optimize storage with Filestore Multishares for GKE\nThis guide shows you how to use Filestore multishares for Google Kubernetes Engine with the GKE Filestore CSI driver.\n", "content": "## Before you begin\n- Before you begin, complete the [setup steps](/filestore/docs/install) needed to use Filestore.\n- Enable the [GKE Filestore CSI driver](/kubernetes-engine/docs/how-to/persistent-volumes/filestore-csi-driver) , version 1.23 or later:- Driver versions 1.23 through 1.26 support up to 10 shares per instance.\n- Driver versions 1.27 or later support up to 80 shares per instance.\n## Use Filestore multishares with multiple applications\nThis section shows you how to deploy two applications, one [Deployment](/kubernetes-engine/docs/concepts/deployment) and one [Statefulset](/kubernetes-engine/docs/concepts/statefulset) , each using a Filestore multishares [StorageClass](https://kubernetes.io/docs/concepts/storage/storage-classes/) . You'll also see how GKE [bin packs](https://cloud.google.com/blog/products/containers-kubernetes/gke-best-practices-to-lessen-over-provisioning) (a process to efficiently pack applications into your GKE nodes) all volumes in the same underlying Filestore enterprise instance.\n- Use the GKE-provided StorageClass, `enterprise-multishare-rwx` , to create instances that support up to 10 shares.- If you want to create instances that support up to 80 shares, you'll need to [create a custom StorageClass](#create_a_custom_storageclass) . For the purpose of this guide, you will use a StorageClass with a ten-share-per-instance limit.\nAfter the GKE Filestore CSI driver is enabled, users can access the GKE-provided multishare StorageClass `enterprise-multishare-rwx` with the following configuration. Referencing this StorageClass, the GKE Filestore CSI driver uses [dynamic volume provisioning](https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/) to automatically create Persistent Volumes (PVs) for new Persistent Volume Claims (PVCs) as GKE workload demand requires:```\nkubectl describe sc enterprise-multishare-rwxName: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwxIsDefaultClass: \u00a0 \u00a0 \u00a0 \u00a0NoAnnotations: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 components.gke.io/component-name=filestorecsi,components.gke.io/component-version=0.7.2,components.gke.io/layer=addonProvisioner: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 filestore.csi.storage.gke.ioParameters: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0instance-storageclass-label=enterprise-multishare-rwx,multishare=true,tier=enterpriseAllowVolumeExpansion: \u00a0TrueMountOptions: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<none>ReclaimPolicy: \u00a0 \u00a0 \u00a0 \u00a0 DeleteVolumeBindingMode: \u00a0 \u00a0 WaitForFirstConsumerEvents: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<none>\n```\n### Create a custom StorageClass\nIf you want to take advantage of the latest capacity limit of up to 80 shares per Filestore instance, create a custom StorageClass based on the following template:\n```\n\u00a0 apiVersion: storage.k8s.io/v1\u00a0 kind: StorageClass\u00a0 metadata:\u00a0 \u00a0 name: csi-filestore-multishare-128\u00a0 provisioner: filestore.csi.storage.gke.io\u00a0 parameters:\u00a0 \u00a0 tier: enterprise\u00a0 \u00a0 multishare: \"true\"\u00a0 \u00a0 max-volume-size: \"128Gi\"\u00a0 \u00a0 network: default\u00a0 allowVolumeExpansion: true\n```\nWhen renaming the StorageClass, consider the following requirements:\n- The StorageClass name must be a valid [DNS subdomain name](https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) .\n- The multishare StorageClass name is also used as an instance label and should follow [label naming guidelines](/filestore/docs/managing-labels) .\n- If your application requires immediate volume provisioning, include the `Immediate` volume binding mode:`volumeBindingMode: Immediate`Use this specification, for instance, if you do not want volume provisioning to be dependent upon pod creation in the GKE cluster.\n- Beginning as of driver version 1.27, if you want to assign more than 10 shares per instance, include the `max-volume-size` parameter and assign it one of the accepted values from the first column:| Maximum volume size (share size) | Maximum number of shares per instance |\n|:-----------------------------------|----------------------------------------:|\n| 128\u00a0GiB       |          80 |\n| 256\u00a0GiB       |          40 |\n| 512\u00a0GiB       |          20 |\n| 1024\u00a0GiB       |          10 |So for example, adding the key value pair `max-volume-size: \"128Gi\"` ensures the StorageClass maps up to 80 shares\u2014each ranging from 10\u00a0GiB to 128\u00a0GiB in size\u2014to a single 10\u00a0TiB enterprise-tier instance.- This capability is backward compatibility with Filestore instances created by GKE Filestore CSI driver versions 1.23 through 1.26.\n- Existing instances can create new PVCs, or shares, with the extended minimum share size of 10\u00a0GiB.\n- GKE Filestore CSI driver version 1.27 recognizes legacy enterprise instances and assigns them a default maximum share size of 1024\u00a0GiB (1\u00a0TiB). As a result, legacy instances are limited to a maximum share count of 10 shares per instance.\nFor more information, see [Filestore multishares for GKE](/filestore/docs/multishares) .\n- Create a Deployment with multiple pod replicas using a single PVC.Create a YAML configuration file similar to the following:```\ncat <<EOF | kubectl apply -f -apiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: web-server-multishare\u00a0 labels:\u00a0 \u00a0 app: nginxspec:\u00a0 replicas: 5\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: nginx\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: nginx\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: nginx\u00a0 \u00a0 \u00a0 \u00a0 image: nginx\u00a0 \u00a0 \u00a0 \u00a0 volumeMounts:\u00a0 \u00a0 \u00a0 \u00a0 - mountPath: /usr/share/nginx/html\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name: mypvc\u00a0 \u00a0 \u00a0 volumes:\u00a0 \u00a0 \u00a0 - name: mypvc\u00a0 \u00a0 \u00a0 \u00a0 persistentVolumeClaim:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 claimName: test-pvc-fs---kind: PersistentVolumeClaimapiVersion: v1metadata:\u00a0 name: test-pvc-fsspec:\u00a0 accessModes:\u00a0 \u00a0 - ReadWriteMany\u00a0 storageClassName: enterprise-multishare-rwx\u00a0 resources:\u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 storage: 100GiEOF\n```\n- Check pod replicas.a. From the command line, run the following command to check the PVC status:```\nkubectl get pvc\n```You should see something similar to the following response:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATUS \u00a0 VOLUME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CAPACITY \u00a0 ACCESS MODES \u00a0 STORAGECLASS \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AGEtest-pvc-fs \u00a0 Bound \u00a0 \u00a0pvc-056d769d-a709-4bb2-b6d3-0361871b27a2 \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a035m\n```b. From the command line, run the following command to check the pod status:```\nkubectl get pod\n```You should see something similar to the following response:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 READY \u00a0 STATUS \u00a0 \u00a0RESTARTS \u00a0 AGEweb-server-multishare-76c9ffb4b5-2dhml \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a035mweb-server-multishare-76c9ffb4b5-7mtcb \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a035mweb-server-multishare-76c9ffb4b5-csdbd \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a035mweb-server-multishare-76c9ffb4b5-rgx82 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a035mweb-server-multishare-76c9ffb4b5-zjl27 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a035m\n```\n- Scale replicas.a. From the command line, run the following command to edit the Deployment:```\nkubectl edit deployment web-server-multishare\n```b. The file will open in the command line. Find the `spec.replicas` field and update the value to `10` .c. From the command line, run the following command to see the applied change:```\nkubectl get pod\n```You should see something similar to the following response:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 READY \u00a0 STATUS \u00a0 \u00a0RESTARTS \u00a0 AGEweb-server-multishare-76c9ffb4b5-2dhml \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a036mweb-server-multishare-76c9ffb4b5-5ctkf \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03sweb-server-multishare-76c9ffb4b5-7mtcb \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a036mweb-server-multishare-76c9ffb4b5-8dwmw \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02sweb-server-multishare-76c9ffb4b5-csdbd \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a036mweb-server-multishare-76c9ffb4b5-lndcq \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02sweb-server-multishare-76c9ffb4b5-rgx82 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a036mweb-server-multishare-76c9ffb4b5-vtd6p \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03sweb-server-multishare-76c9ffb4b5-xm49s \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03sweb-server-multishare-76c9ffb4b5-zjl27 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a036m\n```Notice 10 pods are running.d. From the command line, run the following command:```\nkubectl get deployment\n```You should see something similar to the following response:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0READY \u00a0 UP-TO-DATE \u00a0 AVAILABLE \u00a0 AGEweb-server-multishare \u00a0 10/10 \u00a0 10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 10 \u00a0 \u00a0 \u00a0 \u00a0 \u00a036m\n```e. From the command line, run the following command to check the PVC bound status:```\nkubectl get pvc\n```You should see something similar to the following response:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATUS \u00a0 VOLUME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CAPACITY \u00a0 ACCESS MODES \u00a0 STORAGECLASS \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AGEtest-pvc-fs \u00a0 Bound \u00a0 \u00a0pvc-056d769d-a709-4bb2-b6d3-0361871b27a2 \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a037m\n```f. From the command line, run the following command to edit the Deployment:```\nkubectl edit deployment web-server-multishare\n```g. The file will open in the command line. Find the `spec.replicas` field and update the value to `2` .h. From the command line, run the following command to see the applied change:```\nkubectl get pod\n```You should see something similar to the following response:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 READY \u00a0 STATUS \u00a0 \u00a0RESTARTS \u00a0 AGEweb-server-multishare-76c9ffb4b5-2dhml \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a038mweb-server-multishare-76c9ffb4b5-7mtcb \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a038m\n```\n- Deploy a Statefulset.Deploy a second application that shares the underlying Filestore instance.To do so, provision 200 GiB of space and validate that it uses the same underlying Filestore instance as the first application.You'll then scale the application to nine replicas using 900 GiB in total (9 replicas using 100 GiB each) and verify that GKE uses the same Filestore instance by sharing the instance.Create a YAML configuration file similar to the following:```\ncat <<EOF | kubectl apply -f -apiVersion: apps/v1kind: StatefulSetmetadata:\u00a0 name: webspec:\u00a0 serviceName: \"nginx\"\u00a0 replicas: 2\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: nginx\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: nginx\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: nginx\u00a0 \u00a0 \u00a0 \u00a0 image: registry.k8s.io/nginx-slim:0.8\u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 - containerPort: 80\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name: web\u00a0 \u00a0 \u00a0 \u00a0 volumeMounts:\u00a0 \u00a0 \u00a0 \u00a0 - name: test-pvc-multishare\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mountPath: /usr/share/nginx/html\u00a0 volumeClaimTemplates:\u00a0 - metadata:\u00a0 \u00a0 \u00a0 name: test-pvc-multishare\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 accessModes: [ \"ReadWriteMany\" ]\u00a0 \u00a0 \u00a0 storageClassName: enterprise-multishare-rwx\u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 storage: 100GiEOF\n```\n- Check Statefulset replicas and volumes.From the command line, run the following command:```\nkubectl get pod\n```You should see something similar to the following response:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 READY \u00a0 STATUS \u00a0 \u00a0RESTARTS \u00a0 AGEweb-0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a01/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04m48sweb-1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a01/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m32sweb-server-multishare-76c9ffb4b5-2dhml \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a057mweb-server-multishare-76c9ffb4b5-7mtcb \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a057m\n```Notice that the first two pods are associated with the Statefulset. The last two pods are associated with the Deployment.From the command line, run the following command:```\nkubectl get statefulset\n```You should see something similar to the following response:```\nNAME \u00a0 READY \u00a0 AGEweb \u00a0 \u00a02/2 \u00a0 \u00a0 2m8s\n```From the command line, run the following command:```\nkubectl get pvc\n```You should see something similar to the following response:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATUS \u00a0 VOLUME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CAPACITY \u00a0 ACCESS MODES \u00a0 STORAGECLASS \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AGEtest-pvc-fs \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Bound \u00a0 \u00a0pvc-056d769d-a709-4bb2-b6d3-0361871b27a2 \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 54mtest-pvc-multishare-web-0 \u00a0 Bound \u00a0 \u00a0pvc-7aa21b5a-5343-4547-b7d7-414c16af15a7 \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 114stest-pvc-multishare-web-1 \u00a0 Bound \u00a0 \u00a0pvc-8b37cd6e-d764-4d38-80d7-d74228536cfe \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 38s\n```The PVC `test-pvc-fs` is associated with the Deployment `web-server-multishare` .The PVCs `test-pvc-multishare-web-0` and `test-pvc-multishare-web-1` are associated with the Statefulset.\n- Scale the Statefulset replicas.Increase the replica count to nine. As the count increases, the corresponding PVCs are created.a. From the command line, run the following command:```\nkubectl \u00a0edit statefulset web\n```b. The file will open in the command line. Find the `spec.replicas` field and update the value to `9` .c. From the command line, run the following command to see the applied change:```\nkubectl get statefulset\n```You should see something similar to the following response:```\nNAME \u00a0 READY \u00a0 AGEweb \u00a0 \u00a09/9 \u00a0 \u00a0 13m\n```d. From the command line, run the following command:```\nkubectl get deployment\n```You should see something similar to the following response:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0READY \u00a0 UP-TO-DATE \u00a0 AVAILABLE \u00a0 AGEweb-server-multishare \u00a0 2/2 \u00a0 \u00a0 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 65m\n```e. From the command line, run the following command:```\nkubectl get pvc\n```You should see something similar to the following response:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATUS \u00a0 VOLUME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CAPACITY \u00a0 ACCESS MODES \u00a0 STORAGECLASS \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AGEtest-pvc-fs \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Bound \u00a0 \u00a0pvc-056d769d-a709-4bb2-b6d3-0361871b27a2 \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 65mtest-pvc-multishare-web-0 \u00a0 Bound \u00a0 \u00a0pvc-7aa21b5a-5343-4547-b7d7-414c16af15a7 \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 13mtest-pvc-multishare-web-1 \u00a0 Bound \u00a0 \u00a0pvc-8b37cd6e-d764-4d38-80d7-d74228536cfe \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 12mtest-pvc-multishare-web-2 \u00a0 Bound \u00a0 \u00a0pvc-3fcbd132-939f-4364-807a-7c8ac6a3e64e \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 5m12stest-pvc-multishare-web-3 \u00a0 Bound \u00a0 \u00a0pvc-5894afa5-2502-4ee7-9d5c-b7378cb85479 \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 4m57stest-pvc-multishare-web-4 \u00a0 Bound \u00a0 \u00a0pvc-ebbe452b-bc8f-4624-a830-a2094cce0d67 \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 4m36stest-pvc-multishare-web-5 \u00a0 Bound \u00a0 \u00a0pvc-5a73a698-d174-44cb-a3a1-e767966c3417 \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 4m20stest-pvc-multishare-web-6 \u00a0 Bound \u00a0 \u00a0pvc-102da6a9-2ca6-4f9e-9896-8fe14709db7a \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 3m55stest-pvc-multishare-web-7 \u00a0 Bound \u00a0 \u00a0pvc-160e81cd-c5bf-4ae6-966e-518e8249e02d \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 3m38stest-pvc-multishare-web-8 \u00a0 Bound \u00a0 \u00a0pvc-9b52d773-2e9a-40de-881c-dc06945ba3d7 \u00a0 100Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 118s\n```\n- Verify the Filestore instance state.You now have a Deployment with two replica pods, and a Statefulset with nine replica pods, and a total of 10 PVCs, each 100 GiB in size. All of the volumes are packed onto a single Filestore multishare instance.a. From the command line, run the following [instances list](/sdk/gcloud/reference/beta/filestore/instances/list) command:```\ngcloud beta filestore instances list --project=YOUR_PROJECT_ID --region=REGION\n```where:- is the name of the [project](/filestore/docs/install) being used. For example, `my-project` .\n- is the name of the [region](/filestore/docs/regions) being used. For example, `us-central1` .\nYou should see something similar to the following response:```\nINSTANCE_NAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0LOCATION \u00a0 \u00a0 TIER \u00a0 \u00a0 \u00a0 \u00a0CAPACITY_GB \u00a0FILE_SHARE_NAME \u00a0IP_ADDRESS \u00a0 STATE \u00a0CREATE_TIMEfs-a767cef8-738e-4c8e-b70b-09cbb872d016 \u00a0us-central1 \u00a0ENTERPRISE \u00a01024 \u00a0 \u00a0 \u00a0 \u00a0 N/A \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a010.192.53.2 \u00a0READY \u00a02022-06-21T21:15:30\n```b. From the command line, run the following [instances describe](/sdk/gcloud/reference/beta/filestore/instances/describe) command:```\ngcloud filestore instances describe fs-a767cef8-738e-4c8e-b70b-09cbb872d016 --project=YOUR_PROJECT_ID --region=REGIONcapacityGb: '1024'capacityStepSizeGb: '256'createTime: '2022-06-21T21:15:30.464237089Z'labels:\u00a0 storage_gke_io_created-by: filestore_csi_storage_gke_io\u00a0 storage_gke_io_storage-class-id: enterprise-multishare-rwxmaxCapacityGb: '10240'maxShareCount: '10'multiShareEnabled: truename: projects/YOUR_PROJECT_ID/locations/REGION/instances/fs-a767cef8-738e-4c8e-b70b-09cbb872d016networks:- connectMode: DIRECT_PEERING\u00a0 ipAddresses:\u00a0 - 10.192.53.2\u00a0 modes:\u00a0 - MODE_IPV4\u00a0 network: csi-filestore-test-network\u00a0 reservedIpRange: 10.192.53.0/26state: READYtier: ENTERPRISE\n```where:- is the name of the [project](/filestore/docs/install) being used. For example, `my-project` .\n- is the name of the [region](/filestore/docs/regions) being used. For example, `us-central1` .\n## Expand a PVC and verify the Filestore instance\nThis section shows you how to expand an existing PVC and verify the Filestore instance size.\n- Expand a PVC.PVCs\u2014backed by shares in a Filestore multishare instance\u2014 can grow to the maximum size specified in the [max-volume-size](#create_a_custom_storageclass) parameter. To verify this, expand one of the volumes associated with the Statefulset while the pod is using it.From the command line, run the following command to check the current PVC size of replica 0:```\nkubectl get pvc test-pvc-multishare-web-0 -o json{\u00a0 \u00a0 \"apiVersion\": \"v1\",\u00a0 \u00a0 \"kind\": \"PersistentVolumeClaim\",\u00a0 \u00a0 \"metadata\": {\u00a0 \u00a0 \u00a0 \u00a0 \"annotations\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"pv.kubernetes.io/bind-completed\": \"yes\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"pv.kubernetes.io/bound-by-controller\": \"yes\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"volume.beta.kubernetes.io/storage-provisioner\": \"filestore.csi.storage.gke.io\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"volume.kubernetes.io/storage-provisioner\": \"filestore.csi.storage.gke.io\"\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"creationTimestamp\": \"2022-06-21T22:07:42Z\",\u00a0 \u00a0 \u00a0 \u00a0 \"finalizers\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"kubernetes.io/pvc-protection\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"labels\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"app\": \"nginx\"\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"test-pvc-multishare-web-0\",\u00a0 \u00a0 \u00a0 \u00a0 \"namespace\": \"default\",\u00a0 \u00a0 \u00a0 \u00a0 \"resourceVersion\": \"48395\",\u00a0 \u00a0 \u00a0 \u00a0 \"uid\": \"7aa21b5a-5343-4547-b7d7-414c16af15a7\"\u00a0 \u00a0 },\u00a0 \u00a0 \"spec\": {\u00a0 \u00a0 \u00a0 \u00a0 \"accessModes\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"ReadWriteMany\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"resources\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"requests\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"storage\": \"100Gi\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"storageClassName\": \"enterprise-multishare-rwx\",\u00a0 \u00a0 \u00a0 \u00a0 \"volumeMode\": \"Filesystem\",\u00a0 \u00a0 \u00a0 \u00a0 \"volumeName\": \"pvc-7aa21b5a-5343-4547-b7d7-414c16af15a7\"\u00a0 \u00a0 },\u00a0 \u00a0 \"status\": {\u00a0 \u00a0 \u00a0 \u00a0 \"accessModes\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"ReadWriteMany\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"capacity\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"storage\": \"100Gi\"\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"phase\": \"Bound\"\u00a0 \u00a0 }}\n```\n- From the command line, run the following command to increase the size to 500 GiB:```\nkubectl edit pvc test-pvc-multishare-web-0\n```\n- The file will open in the command line. Find the `spec.resources.requests.storage` field and update the value to `500Gi` .\n- From the command line, run the following command to see the applied change:```\nkubectl get pvc test-pvc-multishare-web-0\n```You should see something similar to the following response:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATUS \u00a0 VOLUME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CAPACITY \u00a0 ACCESS MODES \u00a0 STORAGECLASS \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AGEtest-pvc-multishare-web-0 \u00a0 Bound \u00a0 \u00a0pvc-7aa21b5a-5343-4547-b7d7-414c16af15a7 \u00a0 500Gi \u00a0 \u00a0 \u00a0RWX \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0enterprise-multishare-rwx \u00a0 28m\n```The Filestore CSI driver accepted the request, first expanding the underlying Filestore instance, and then expanding the share backing the PVC.Specifically, the Filestore CSI driver automatically expanded the instance to 1536 Gi to accommodate the new share size of 500Gi.\n- From the command line, run the following [instances describe](/sdk/gcloud/reference/beta/filestore/instances/describe) command to verify the capacity of the Filestore instance:```\ngcloud filestore instances describe fs-a767cef8-738e-4c8e-b70b-09cbb872d016 --project=YOUR_PROJECT_ID --region=REGIONcapacityGb: '1536'capacityStepSizeGb: '256'createTime: '2022-06-21T21:15:30.464237089Z'labels:\u00a0 storage_gke_io_created-by: filestore_csi_storage_gke_io\u00a0 storage_gke_io_storage-class-id: enterprise-multishare-rwxmaxCapacityGb: '10240'maxShareCount: '10'multiShareEnabled: truename: projects/YOUR_PROJECT_ID/locations/us-central1/instances/fs-a767cef8-738e-4c8e-b70b-09cbb872d016networks:- connectMode: DIRECT_PEERING\u00a0 ipAddresses:\u00a0 - 10.192.53.2\u00a0 modes:\u00a0 - MODE_IPV4\u00a0 network: csi-filestore-test-network\u00a0 reservedIpRange: 10.192.53.0/26state: READYtier: ENTERPRISE\n```where:- is the name of the [project](/filestore/docs/install) being used. For example, `my-project` .\n- is the name of the [region](/filestore/docs/regions) being used. For example, `us-central1` .\n## Dynamic provisioning on a Shared VPC\nFilestore CSI driver for GKE supports [dynamicprovisioning](https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/) of volumes in a service project under a shared VPC. The following section shows how to use the Filestore CSI driver to dynamically provision volumes on Filestore multishare instances in a service project under a Shared VPC network.\n- Complete the [setup steps](/kubernetes-engine/docs/how-to/persistent-volumes/filestore-csi-xpn) for a Shared VPC network and private service access.\n- Create a StorageClass to dynamically provision volumes backed by a Filestore multishares instance on a shared VPC.Run the following command to deploy a `StorageClass` resource:```\ncat <<EOF | kubectl apply -f -apiVersion: storage.k8s.io/v1kind: StorageClassmetadata:\u00a0 name: csi-filestore-multishare-sharedvpcprovisioner: filestore.csi.storage.gke.ioparameters:\u00a0 network: \"projects/HOST_PROJECT_ID/global/networks/SHARED_VPC_NAME\"\u00a0 connect-mode: PRIVATE_SERVICE_ACCESS\u00a0 tier: enterprise\u00a0 multishare: \"true\"allowVolumeExpansion: trueEOF\n```where:- is the ID or name of the host [project](/filestore/docs/install) of the Shared VPC network. For example, `my-host-project` .\n- the name of the [Shared VPC network](/vpc/docs/shared-vpc) . For example, `my-shared-vpc` .\nIf you want to deploy your resource within a reserved IP address range, add the following line to the parameters used in the command:```\nreserved-ip-range: RESERVED_NAME\n```Where is the name of the reserved IP address range within which a Filestore instance can be provisioned. For example, `filestore-reserved-ip-range` . If a reserved IP range is specified, it must be a named address range instead of a direct CIDR value.For more information, see [Allocate IP address ranges](/vpc/docs/configure-private-services-access#allocating-range) or [Configuring a reserved IP address range](/filestore/docs/creating-instances#configuring_a_reserved_ip_address_range) . To see an example of how to create a reserved name using the Google Cloud console, see [Create an IP allocation](/vpc/docs/configure-private-services-access#procedure) .\n- Create a Deployment.Run the following command to create a `Deployment` resource:```\ncat <<EOF | kubectl apply -f -apiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: web-server-multishare\u00a0 labels:\u00a0 \u00a0 app: nginxspec:\u00a0 replicas: 5\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: nginx\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: nginx\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: nginx\u00a0 \u00a0 \u00a0 \u00a0 image: nginx\u00a0 \u00a0 \u00a0 \u00a0 volumeMounts:\u00a0 \u00a0 \u00a0 \u00a0 - mountPath: /usr/share/nginx/html\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name: mypvc\u00a0 \u00a0 \u00a0 volumes:\u00a0 \u00a0 \u00a0 - name: mypvc\u00a0 \u00a0 \u00a0 \u00a0 persistentVolumeClaim:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 claimName: test-pvc-fs-sharedvpc---kind: PersistentVolumeClaimapiVersion: v1metadata:\u00a0 name: test-pvc-fs-sharedvpcspec:\u00a0 accessModes:\u00a0 \u00a0 - ReadWriteMany\u00a0 storageClassName: csi-filestore-multishare-sharedvpc\u00a0 resources:\u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 storage: 100GiEOF\n```## CMEK-enabled Filestore instances\nYou can create GKE volumes hosted on CMEK-enabled Filestore multishare instances. In this section, you'll see how to setup a [customer-managed encryption key (CMEK) for your Filestoreinstance](/filestore/docs/cmek) .\nCustomer-managed key details can be provided in the StorageClass. Any instance dynamically created by the Filestore CSI driver, which references this StorageClass, will have CMEK enabled.\n- Create a CMEK-enabled StorageClass.a. Run the following command:```\ncat <<EOF | kubectl apply -f -apiVersion: storage.k8s.io/v1kind: StorageClassmetadata:\u00a0 name: csi-filestore-multishare-cmekprovisioner: filestore.csi.storage.gke.ioparameters:\u00a0 tier: enterprise\u00a0 multishare: \"true\"\u00a0 instance-encryption-kms-key: projects/KEY_PROJECT_ID/locations/REGION/keyRings/RING_NAME/cryptoKeys/KEY_NAMEallowVolumeExpansion: trueEOF\n```where:- is the name of the [project](/filestore/docs/install) where the key is located. For example, `my-key-project` .\n- is the name of the [region](/filestore/docs/regions) being used. For example, `us-central1` .\n- the key ring name. For example, `my-key-ring-name` .\n- the key name. For example, `my-key-name` .\n- Create a Deployment.b. Run the following command to create a `Deployment` resource:```\ncat <<EOF | kubectl apply -f -apiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: web-server-multishare\u00a0 labels:\u00a0 \u00a0 app: nginxspec:\u00a0 replicas: 5\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: nginx\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: nginx\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: nginx\u00a0 \u00a0 \u00a0 \u00a0 image: nginx\u00a0 \u00a0 \u00a0 \u00a0 volumeMounts:\u00a0 \u00a0 \u00a0 \u00a0 - mountPath: /usr/share/nginx/html\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name: mypvc\u00a0 \u00a0 \u00a0 volumes:\u00a0 \u00a0 \u00a0 - name: mypvc\u00a0 \u00a0 \u00a0 \u00a0 persistentVolumeClaim:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 claimName: test-pvc-fs-cmek---kind: PersistentVolumeClaimapiVersion: v1metadata:\u00a0 name: test-pvc-fs-cmekspec:\u00a0 accessModes:\u00a0 \u00a0 - ReadWriteMany\u00a0 storageClassName: csi-filestore-multishare-cmek\u00a0 resources:\u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 storage: 100GiEOF\n```## Map PVCs to Filestore instances\n**Note:** Filestore multishare instances are managed using CSI dynamic provisioning. Instance or share creation can take several minutes to complete. Once the Filestore resource is created, Kubernetes creates the associated PV. This means the volume is not visible until the create operation initiated by the CSI driver completes.\nIn this section, you'll see how to map your PVCs to your Filestore instances.\nWith Filestore multishare instances, each PVC is hosted on a Filestore instance by the Filestore CSI driver. The details of the underlying Filestore instance hosting the volume and the share representing the Kubernetes volume, is captured in the `volumeHandle` field of the Persistent Volumes specification. The volume handle format is as follows:\n```\nmodeMultishare/<storageclass-prefix>/<project>/<region>/<filestore-instance-name>/<filestore-share-name>\n```\nThe following `kubectl` command can be used to quickly determine the mappings between a PVC, PV, Filestore Instance, and a Filestore share.\nFrom the command line, run the following command:\n```\nkubectl get pv -o jsonpath='{range .items[*]}{\"pv=\"}{.metadata.name}{\",pvc=\"}{.spec.claimRef.name}{\",volumeHandle=\"}{.spec.csi.volumeHandle}{\"\\n\"}{end}'\n```\nYou should see something similar to the following response:\n```\npv=pvc-67ad9abd-f25e-4130-b7ca-64d28bd29525,pvc=test-pvc-multishare,volumeHandle=modeMultishare/csi-filestore-multishare-sharedvpc/YOUR_PROJECT_ID/us-central1/fs-2109f680-3f04-4ada-b4bc-2a1c7fc47b88/pvc_67ad9abd_f25e_4130_b7ca_64d28bd29525pv=pvc-c80f4de0-9916-4957-b8ae-b21206650ac0,pvc=test-pvc-fs-sharedvpc,volumeHandle=modeMultishare/csi-filestore-multishare-sharedvpc/YOUR_PROJECT_ID/us-central1/fs-2109f680-3f04-4ada-b4bc-2a1c7fc47b88/pvc_c80f4de0_9916_4957_b8ae_b21206650ac0\n```\nwhere:\n- is the name of the [project](/filestore/docs/install) being used. For example,`my-project`.\nNotice that two persistent volumes in the cluster are hosted on a single Filestore instance.\n## What's next\n- [Create an instance on a Shared VPC network in service projects.](/filestore/docs/shared-vpc) \n- [Compare the relative advantages of block, file, and object storage.](/architecture/storage-advisor#review_the_storage_options) \n- [Storage options for HPC workloads in Google Cloud.](/architecture/parallel-file-systems-for-hpc#storage-options-for-hpc-workloads-in-google-cloud)", "guide": "Google Kubernetes Engine (GKE)"}