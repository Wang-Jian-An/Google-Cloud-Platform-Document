{"title": "Google Kubernetes Engine (GKE) - Node images", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/node-images", "abstract": "# Google Kubernetes Engine (GKE) - Node images\nThis page describes the node images available for Google Kubernetes Engine (GKE) nodes.\nGKE Autopilot nodes always use Container-Optimized OS with containerd ( `cos_containerd` ), which is the recommended node operating system. If you use GKE Standard, you can choose the operating system image that runs on each node during cluster or node pool creation. You can also upgrade an existing Standard cluster to use a different node image. For instructions on how to set the node image, see [Specifying a node image](/kubernetes-engine/docs/how-to/node-images) .\n**Warning: ** In GKE version 1.24 and later, Docker-based node image types are not supported. In GKE version 1.23, you also cannot create new node pools with Docker node image types. You must migrate to a containerd node image type. To learn more about this change, see [About the Docker node image deprecation](/kubernetes-engine/docs/deprecations/docker-containerd) .\n", "content": "## Available node images\nGKE offers the following node image options per OS for your cluster:\n| OS      | Node images                                                                                                                                                                |\n|:-----------------------||\n| Container-Optimized OS | Container-Optimized OS with containerd (cos_containerd) GKE Autopilot clusters always use this image. Container-Optimized OS with Docker (cos) (Unsupported in GKE version 1.24 and later)                                                                                                                    |\n| Ubuntu     | Ubuntu with containerd (ubuntu_containerd) Ubuntu with Docker (ubuntu) (Unsupported in GKE version 1.24 and later)                                                                                                                                       |\n| Windows Server   | Windows Server LTSC with containerd (windows_ltsc_containerd) (Supports both LTSC2022 and LTSC2019 node images) Windows Server LTSC with Docker (windows_ltsc) (Unsupported in GKE version 1.24 and later. Unsupported for Windows Server LTSC2022.) Warning: Windows Server Semi-Annual Channel (SAC) images aren't supported after August 9, 2022 because Microsoft is removing support for the SAC. For potential impact and migration instructions, refer to Windows Server Semi-Annual Channel end of servicing. Windows Server SAC with containerd (windows_sac_containerd) Windows Server SAC with Docker (windows_sac) (Unsupported in GKE version 1.24 and later) |\n### Container-Optimized OS\nThe [Container-Optimized OS from Google](/container-optimized-os) node images are [based on a recent version of the Linux kernel](/container-optimized-os/docs/release-notes#current_active_releases) and are optimized to enhance node security. Container-Optimized OS images are backed by a team at Google that can quickly patch images for security and iterate on features. The Container-Optimized OS images provides better support, security, and stability than other images.\n**Note:** For GKE nodes, the Container-Optimized OS [automatic update](/container-optimized-os/docs/concepts/auto-update) feature is disabled. GKE has its own [automatic upgrade](/kubernetes-engine/docs/how-to/node-auto-upgrades) feature that can be used instead.\nFor information about the image project and family, see [Node image source projects](#node_image_source_projects) .\nTwo container runtimes are offered with Container-Optimized OS. The images are the same, other than the choice of container runtime.\n- **Container-Optimized OS with containerd (cos_containerd)** : The`cos_containerd`image uses containerd as the container runtime directly integrated with Kubernetes. GKE Autopilot clusters always use this image. For more information, see [Containerd node images](/kubernetes-engine/docs/concepts/using-containerd) .\n- **Container-Optimized OS with Docker (cos)** : The`cos`image uses the Docker container runtime.\n### Ubuntu\nThe Ubuntu node images has been validated against GKE's node image requirements. You should use the Ubuntu node images if your nodes require support for XFS, CephFS, or Debian packages.\nFor information about the image project and family, see [Feature support by operating system](/compute/docs/images/os-details#ubuntu_lts) .\n**Note:** You may need to use solutions like [Automatically bootstrap GKE nodes with DaemonSets](/kubernetes-engine/docs/tutorials/automatically-bootstrapping-gke-nodes-with-daemonsets) to customize the Ubuntu features. Not all features supported by Ubuntu are supported by GKE.\nTwo container runtimes are offered with Ubuntu. The images are the same, other than the choice of container runtime.\n- **Ubuntu with containerd (ubuntu_containerd)** : The `ubuntu_containerd` image uses containerd as the container runtime. For more information, see [Containerd node images](/kubernetes-engine/docs/concepts/using-containerd) .\n- **Ubuntu with Docker (ubuntu)** : The `ubuntu` image uses Docker as the container runtime.\n### Windows Server\n**Warning:** Windows Server Semi-Annual Channel (SAC) images aren't supported after August 9, 2022 because Microsoft is removing support for the SAC. For potential impact and migration instructions, refer to [Windows Server Semi-Annual Channel end of servicing](/kubernetes-engine/docs/deprecations/windows-server-sac) .\nWhen [creating a cluster using Windows Server node pools](/kubernetes-engine/docs/how-to/creating-a-cluster-windows) you can use a Windows Server Semi-Annual Channel (SAC) or Windows Server Long-Term Servicing Channel (LTSC) node image. All Windows node images are Windows Server Datacenter Core images. A single cluster can have multiple Windows Server node pools using different Windows Server versions, but each individual node pool can only use one Windows Server version. For more information, see [Choose your Windows node image](/kubernetes-engine/docs/how-to/creating-a-cluster-windows#choose_your_windows_server_node_image) .\nTwo container runtimes are offered with Windows Server LTSC and SAC node images: Docker and containerd. The images are the same, other than the choice of container runtime.\n- Containerd runtime images (available in GKE version 1.21 and later):- **Windows Server LTSC with containerd (windows_ltsc_containerd)** : The `windows_ltsc_containerd` image uses containerd as the container runtime. Currently, this image type maps to two node images: Windows Server 2022 and Windows Server 2019. You can create Windows LTSC2022 node pools through the CLI command with flag `windows-os-version` .For more information about creating Windows Server 2022 node pools, see [Create Windows Node Pools](/kubernetes-engine/docs/how-to/creating-a-cluster-windows#create_a_cluster_and_node_pools) For more information about containerd node images, see [Containerd node images](/kubernetes-engine/docs/concepts/using-containerd) .\n- **Windows Server SAC with containerd (windows_sac_containerd)** : The `windows_sac_containerd` image uses containerd as the container runtime.For more information, see [Containerd node images](/kubernetes-engine/docs/concepts/using-containerd) .\n- Docker runtime images (available in GKE version 1.16 and later):- **Windows Server LTSC with Docker (windows_ltsc)** : The`windows_ltsc`image uses Docker as the container runtime.\n- **Windows Server SAC with Docker (windows_sac)** : The`windows_sac`image uses Docker as the container runtime.For information about the image project and family, see [Feature support by operating system](/compute/docs/images/os-details#windows_server) .\n## Linux node image comparison\nThe following sections compare the operational aspects of the Container-Optimized OS and Ubuntu node images, including:\n- Software package management\n- System initialization\n- Logs collection\n- File system layout\n- Storage driver support\n### Software package manager\nThe `cos` and `cos_containerd` node images use a minimal root file system with built-in support for the Docker (containerd) container runtime, which also serves as the software package manager for installing software on the host. The Ubuntu image uses the [APT package manager](https://en.wikipedia.org/wiki/APT_(software)) .\nThe Container-Optimized OS image does not provide package management software such as `apt-get` . You can't install arbitrary software onto the nodes using conventional mechanisms. Instead, create a container image that contains the software you need.\nOn Standard clusters for debugging purposes only, Container-Optimized OS includes the [CoreOS Toolbox](/container-optimized-os/docs/how-to/toolbox) for installing and running common debugging tools such as `ping` , `psmisc` , or `pstree` . For more information about debugging Container-Optimized OS nodes, see the [Container-Optimized OS how-to guides](/container-optimized-os/docs/how-to) .\n**Note:** As a security measure, Autopilot clusters don't allow direct access to nodes. If a node consistently has workload failures, you can [tell GKE about the problematic node](/kubernetes-engine/docs/troubleshooting/troubleshooting-autopilot-clusters#unreliable-workloads-specific-node) .\nThe Ubuntu image uses the APT package manager. You can use the `apt-get` command to install packages on these images. For example, to install `ceph` packages:\n```\nsudo apt-get updatesudo apt-get install ceph\n```\n### System initialization\nBoth the Container-Optimized OS and Ubuntu node image use `systemd` to manage system resources and services during the system initialization process.\nBoth node images use [systemd service files](https://www.freedesktop.org/software/systemd/man/systemd.service.html) to define `services` on the node, and [systemd.targets](https://www.freedesktop.org/software/systemd/man/systemd.target.html) to group boot targets via dependencies.\n### Logs collection\nThe Container-Optimized OS and Ubuntu node images use [systemd-journald](https://www.freedesktop.org/software/systemd/man/systemd-journald.service.html) for collecting system-wide logs.\nTo view logs on a node with the Container-Optimized OS or Ubuntu node image, you must use the [journalctl](https://www.freedesktop.org/software/systemd/man/journalctl.html) command. For example, to view containerd daemon logs:\n```\nsudo journalctl -u containerd\n```\nTo view kubelet logs:\n```\nsudo journalctl -u kubelet\n```\n### File system layout\nThe Ubuntu node image uses the standard Linux file system layout.\nThe Container-Optimized OS node image file system layout is optimized to enhance node security. The boot disk space is split into three types of partitions:\n- **Root partition** , which is mounted as read-only\n- **Stateful partitions** , which are writable and stateful\n- **Stateless partitions** , which are writable but the contents do not persist across reboots\nWhen using Container-Optimized OS, be aware of the partitioning if you run your own services that have certain expectations about the filesystem layout outside of containers.\nThe following is a list of paths in the Container-Optimized OS node image file system, along with their properties and recommended usage:\n| Path            | Properties        | Purpose                                                                    |\n|:---------------------------------------------------|:----------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| /             | read-only executable     | The root filesystem is mounted as read-only to maintain integrity. The kernel verifies integrity root filesystem during boot up, and refuses to boot in case of errors.                           |\n| /home /var          | writable non-executable stateful  | These paths are meant for storing data that persists for the lifetime of the boot disk. They are mounted from /mnt/stateful_partition.                                    |\n| /var/lib/google /var/lib/docker /var/lib/toolbox | writable executable stateful   | These paths are working directories for Compute Engine packages (for example, the accounts manager service), Docker, and Toolbox respectively.                                 |\n| /var/lib/cloud          | writable executable stateless tmpfs  | This path is the working directory of the cloud-init package.                                                      |\n| /etc            | writable non-executable stateless tmpfs | Typically holds your configuration (for example, systemd services defined via cloud-init). It's a good idea to capture the desired state of your instances in cloud-init, as cloud-init is applied when an instance is newly created as well as when an instance is restarted. |\n| /tmp            | writable non-executable stateless tmpfs | Typically used as a scratch space and should not be used to store persistent data.                                                 |\n| /mnt/disks           | writable executable stateless tmpfs  | You can mount persistent disks at directories under /mnt/disks.                                                      |\n### Storage driver support\nEach node image differs in the kinds of storage plugins it supports. The following terms apply when describing a node image's support for a particular storage driver:\n- **Yes - Fully Tested/Supported** : This storage plugin is fully supported and tested with the specified node image.\n- **Yes - Limited Testing** : This storage plugin works with the specified node image, but have been tested only in a limited fashion; you might encounter unexpected behavior. For Container-Optimized OS, these plugins will eventually be fully tested and supported.\n- **Unsupported** : This storage plugin has not been tested or used with the specified node image and GKE cannot provide any guarantee of functionality. There are no plans to test this storage plugin.\n- **No** : This storage plugin does not work with the specified node image due to a limitation inherent to the node OS or Google Cloud.\nThe following matrix describes how each GKE node image supports some common storage plugins.\n| Volume Type         | Does it work on Container-Optimized OS (cos)?              | Does it work on Ubuntu?                         |\n|:---------------------------------------------|:-----------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------|\n| Compute Engine Persistent Disk (EXT4 or XFS) | Yes - Fully Tested/Supported (XFS is supported in cos-85 and later only.) See the GKE release notes | Yes - Fully Tested/Supported                       |\n| NFSv3          | Yes - Fully Tested/Supported                   | Yes - Fully Tested/Supported                       |\n| NFSv4          | Yes - Fully Tested/Supported                   | Yes - Fully Tested/Supported                       |\n| CephFS          | No                         | Yes - Limited Testing (Driver is not installed by default. You must install the ceph client, preferably via DaemonSet.) |\n| Cinder          | No                         | No                              |\n| Fibre Channel        | No                         | No                              |\n| Flocker          | Unsupported                       | Unsupported                            |\n| iSCSI          | No                         | No                              |\n| RBD           | No                         | No                              |\n**Note:** Consider using [Container Storage Interface](https://kubernetes-csi.github.io) (Beta) to add support for volume plugins on your cluster instead of depending on pre-installed OS packages.\n## Node VM modifications\nModifications on the boot disk of a node VM do not persist across node re-creations. Nodes are re-created during [manual upgrade](/kubernetes-engine/docs/how-to/upgrading-a-cluster#upgrade_nodes) , [auto-upgrade](/kubernetes-engine/docs/how-to/node-auto-upgrades) , [auto-repair](/kubernetes-engine/docs/how-to/node-auto-repair) , and [auto-scaling](/kubernetes-engine/docs/how-to/cluster-autoscaler) . In addition, nodes are re-created when you enable a feature that requires node re-creation, such as [GKE Sandbox](/kubernetes-engine/docs/how-to/sandbox-pods) , [intranode visibility](/kubernetes-engine/docs/how-to/intranode-visibility) , and [shielded nodes](/kubernetes-engine/docs/how-to/shielded-gke-nodes) .\nTo preserve modifications across node re-creation, use a [DaemonSet](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/) .\nIt's not recommended to manage critical software provided by a node image, such as the kernel or container runtime (whether `containerd` or `docker` ). Node images are tested extensively, and modifying critical software provided in the node image puts the node into an unknown and untestable state. GKE Autopilot nodes don't allow node software modification.\n## Node images release notes\n### Container-Optimized OS\nGoogle provides comprehensive documentation for Container-Optimized OS:\n- [Container-Optimized OS documentation](/container-optimized-os/docs) \n- [Release Notes](/container-optimized-os/docs/release-notes) \n### Ubuntu\nPeriodically, Google updates the Ubuntu images that are available for use on your cluster's Nodes. Refer to the GKE [release notes](/kubernetes-engine/docs/release-notes) for information about these updates, including a link to a manifest listing the packages that are installed by default.\n### Known issues\nGKE node that uses Container-Optimized OS with Docker ( `cos` ) may experience random TCP connection resets when two pods on the same node communicate using a Kubernetes ClusterIP Service.\nThe following GKE versions are impacted:\n- 1.20.5-gke.100 or later\nTo workaround the issue, use one of the following options:\n- [Migrate from Docker to containerd node images](/kubernetes-engine/docs/how-to/migrate-containerd) .\n- [Enable intranode visibiliy for the cluster](/kubernetes-engine/docs/how-to/intranode-visibility) .## Node image source projects\nThe [available node images](#available_node_images) for GKE clusters are contained in the following source projects:\n- Container-Optimized OS images:`gke-node-images`\n- Ubuntu images:`ubuntu-os-gke-cloud`\n- Windows Server images:`gke-windows-node-images`\nIn addition to the source projects listed above, GKE also uses the following source projects for **exclusive usage by the GKE team** :\n- `ubuntu-os-gke-cloud-private`(reserved for exclusive usage of the GKE team)\n- `ubuntu-os-gke-cloud-devel`(reserved for exclusive usage of the GKE team)\nYou might need to know the source project names while setting up highly-secure clusters. The listed source projects are subject to change.\n## What's next\n- [Learn how to specify a node image](/kubernetes-engine/docs/how-to/node-images) .\n- [Learn more about node pools](/kubernetes-engine/docs/concepts/node-pools) .", "guide": "Google Kubernetes Engine (GKE)"}