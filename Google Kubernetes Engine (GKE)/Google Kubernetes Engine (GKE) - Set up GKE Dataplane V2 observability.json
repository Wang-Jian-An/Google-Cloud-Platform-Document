{"title": "Google Kubernetes Engine (GKE) - Set up GKE Dataplane V2 observability", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/configure-dpv2-observability", "abstract": "# Google Kubernetes Engine (GKE) - Set up GKE Dataplane V2 observability\n**    Preview     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nThis page shows how to configure Google Kubernetes Engine (GKE) clusters with GKE Dataplane V2 observability, starting in GKE versions **1.26.4-gke.500** or later or **1.27.1-gke.400** or later. For more information on the benefits and requirements of GKE Dataplane V2 observability, see [About GKE Dataplane V2 observability](/kubernetes-engine/docs/concepts/about-dpv2-observability) .\n**Note:** You can enable GKE Dataplane V2 metrics and GKE Dataplane V2 observability tools independent of each other.\n", "content": "## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.## Configure GKE Dataplane V2 metrics\nTo collect metrics, you must configure GKE Dataplane V2 metrics. You can configure GKE Dataplane V2 metrics when you create a cluster or update a cluster running with GKE Dataplane V2. You can enable or disable GKE Dataplane V2 metrics using the gcloud CLI.\nWe recommend enabling GKE Dataplane V2 metrics and Google Cloud Managed Service for Prometheus on your GKE cluster. Once both are enabled, GKE Dataplane V2 metrics are sent to Google Cloud Managed Service for Prometheus.\n### Create an Autopilot cluster with GKE Dataplane V2 metrics enabled\nWhen you create new GKE Autopilot clusters, GKE enables GKE Dataplane V2 metrics by default on the cluster without requiring a specific flag.\nTo use the GKE Autopilot cluster GKE Dataplane V2 metrics with Google Cloud Managed Service for Prometheus, configure the `PodMonitoring` resource to scrape the metrics and send them to Google Cloud Managed Service for PrometheusApply the `ClusterPodMonitoring` manifest:\n```\n\u00a0 kubectl apply -f ClusterPodMonitoring.yaml\n```\n**Note:** By default, Google Cloud Managed Service for Prometheus is not configured to collect GKE Dataplane V2 metrics on Autopilot clusters. After you configure the `PodMonitoring` resource, GKE charges an [ingestion cost](/stackdriver/pricing) based on the metric volume.\n### Create a Standard cluster with GKE Dataplane V2 metrics enabled\nTo enable GKE Dataplane V2 metrics, create a cluster with the `--enable-dataplane-v2-metrics` flag:\n```\ngcloud container clusters create CLUSTER_NAME \\\u00a0 \u00a0 --enable-dataplane-v2 \\\u00a0 \u00a0 --enable-managed-prometheus \\\u00a0 \u00a0 --enable-dataplane-v2-metrics\n```\nReplace the following:\n- ``: the name of your cluster.\nThe `--enable-managed-prometheus` flag instructs GKE to use the metrics with Google Cloud Managed Service for Prometheus.\n### Enable GKE Dataplane V2 metrics on an existing cluster\nTo enable GKE Dataplane V2 metrics on an existing cluster, run the following command:\n```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --enable-dataplane-v2-metrics\n```\nReplace `` with the name of your cluster.\n### Disable GKE Dataplane V2 metrics\nTo disable GKE Dataplane V2 metrics:\n```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --disable-dataplane-v2-metrics\n```\nReplace `` with the name of your cluster.\n## Configure GKE Dataplane V2 observability tools\nYou can use a private endpoint to access the GKE Dataplane V2 observability troubleshooting tools. To enable GKE Dataplane V2 observability tools, you must have a cluster configured with GKE Dataplane V2. You can enable GKE Dataplane V2 observability tools on a new cluster or an existing cluster.\n### Create an Autopilot cluster with observability enabled\nTo create a GKE Autopilot cluster with GKE Dataplane V2 observability enabled:\n```\ngcloud container clusters create-auto CLUSTER_NAME \\\u00a0 \u00a0 --enable-dataplane-v2-flow-observability\n```\nReplace `` with the name of your cluster.\n### Create a Standard cluster with observability enabled\nTo create a GKE Standard cluster with GKE Dataplane V2 observability enabled:\n```\ngcloud container clusters create CLUSTER_NAME \\\u00a0 \u00a0 --enable-dataplane-v2 \\\u00a0 \u00a0 --enable-dataplane-v2-flow-observability\n```\nReplace `` with the name of your cluster.\n### Enable GKE Dataplane V2 observability tools on an existing cluster\nTo enable GKE Dataplane V2 observability on an existing cluster, run the following command:\n```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --enable-dataplane-v2-flow-observability\n```\nReplace `` with the name of your cluster.\n### Disable GKE Dataplane V2 observability tools\nTo disable GKE Dataplane V2 observability tools on an existing cluster, run the following command:\n```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --disable-dataplane-v2-flow-observability\n```\nReplace `` with the name of your cluster.\n## How to configure the Hubble CLI binary distribution\nDuring [Preview](/products#product-launch-stages) , you can deploy the Hubble CLI as a dedicated CLI tool to inspect and troubleshoot your Kubernetes workloads running on GKE Dataplane V2 clusters.\nTo set up the Hubble CLI binary distribution, ensure that you have private access to your GKE cluster, for instance, from a virtual machine (VM) within the same VPC.\nUse the Hubble CLI tool on the cluster after you enable the GKE Dataplane V2 observability feature.\n### GKE Autopilot\n- Define alias for `hubble-cli` binary:```\nalias hubble=\"kubectl exec -it -n gke-managed-dpv2-observability deployment/hubble-relay -c hubble-cli -- hubble\"\n```\n- To check the Hubble status, with the GKE Dataplane V2 observability feature enabled, use the Hubble CLI in all Standard clusters:```\nhubble status\n```\n- To view current traffic, use the Hubble CLI as follows:```\nhubble observe\n```\nIn GKE clusters, you cannot use Hubble CLI from the `kube-system` namespace because you won't have access to it. To run the Hubble image and CLI commands, you must acquire certificates, download the open source Hubble CLI binary, and run commands from the binary deployed by Docker. We recommend that you run Hubble CLI commands from a VM that can privately reach the cluster's Hubble Relay Service and has gcloud CLI, `kubectl` , and Docker installed.\nTo configure the CLI binary distribution:- Download required certificates:```\nmkdir -p relay-certskubectl -n kube-system get secret hubble-relay-client-certs \\\u00a0 \u00a0 -o \"jsonpath={.data['ca\\.crt']}\" | base64 -d >relay-certs/ca.crtkubectl -n kube-system get secret hubble-relay-client-certs \\\u00a0 \u00a0 -o \"jsonpath={.data['tls\\.crt']}\" | base64 -d >relay-certs/client.crtkubectl -n kube-system get secret hubble-relay-client-certs \\\u00a0 \u00a0 -o \"jsonpath={.data['tls\\.key']}\" | base64 -d >relay-certs/client.key\n```\n- Download the Hubble CLI image:```\ndocker pull gcr.io/gke-release/cilium/hubble-cli@sha256:53e58ae42b2299949e8c2a8fedda0c142b72b7111e6f316d88788d4227ed4733\n```\n- Find Hubble Relay Service IP address:```\nexport RELAY_SERVICE_IP=`kubectl -n kube-system get svc hubble-ilb-svc \\\u00a0 \u00a0 -o \"jsonpath={.status.loadBalancer.ingress[0].ip}\"`\n```\n- To print the Hubble Server current status, run the Hubble CLI tool and `hubble status` command in the Docker container:```\ndocker run -it --rm \\\u00a0 \u00a0 -v $PWD/relay-certs:/relay-certs:ro \\\u00a0 \u00a0 -e HUBBLE_SERVER=tls://${RELAY_SERVICE_IP}:443 \\\u00a0 \u00a0 -e HUBBLE_TLS_CLIENT_CERT_FILE=/relay-certs/client.crt \\\u00a0 \u00a0 -e HUBBLE_TLS_CLIENT_KEY_FILE=/relay-certs/client.key \\\u00a0 \u00a0 -e HUBBLE_TLS_CA_CERT_FILES=/relay-certs/ca.crt \\\u00a0 \u00a0 -e HUBBLE_TLS_SERVER_NAME=relay.kube-system.svc.cluster.local \\\u00a0 \u00a0 gcr.io/gke-release/cilium/hubble-cli@sha256:53e58ae42b2299949e8c2a8fedda0c142b72b7111e6f316d88788d4227ed4733 \\\u00a0 \u00a0 status\n```\n- To print the current traffic metadata, run the Hubble CLI tool and `hubble observe` command in the Docker container:```\ndocker run -it --rm \\\u00a0 \u00a0 -v $PWD/relay-certs:/relay-certs:ro \\\u00a0 \u00a0 -e HUBBLE_SERVER=tls://${RELAY_SERVICE_IP}:443 \\\u00a0 \u00a0 -e HUBBLE_TLS_CLIENT_CERT_FILE=/relay-certs/client.crt \\\u00a0 \u00a0 -e HUBBLE_TLS_CLIENT_KEY_FILE=/relay-certs/client.key \\\u00a0 \u00a0 -e HUBBLE_TLS_CA_CERT_FILES=/relay-certs/ca.crt \\\u00a0 \u00a0 -e HUBBLE_TLS_SERVER_NAME=relay.kube-system.svc.cluster.local \\\u00a0 \u00a0 gcr.io/gke-release/cilium/hubble-cli@sha256:53e58ae42b2299949e8c2a8fedda0c142b72b7111e6f316d88788d4227ed4733 \\\u00a0 \u00a0 observe\n```\n### GKE Standard\n- Define alias for hubble-cli binary:```\nalias hubble=\"kubectl exec -it -n gke-managed-dpv2-observability deployment/hubble-relay -c hubble-cli -- hubble\"\n```\n- To check the Hubble status, with the GKE Dataplane V2 observability feature enabled, use the Hubble CLI in all Standard clusters:```\nhubble status\n```\n- To view current traffic, use the Hubble CLI as follows:```\nhubble observe\n```\n- Define alias for hubble-cli binary:```\nalias hubble=\"kubectl exec -it -n kube-system deployment/hubble-relay -c hubble-cli -- hubble\"\n```\n- To check the Hubble status, with the GKE Dataplane V2 observability feature enabled, use the Hubble CLI in all Standard clusters:```\nhubble status\n```\n- To view current traffic, use the Hubble CLI as follows:```\nhubble observe\n```\n**Note:** This image is deployed as a single Pod deployment on Standard clusters that have GKE Dataplane V2 observability enabled. The deployed Pod has an IP address, port, and the TLS certificate of Hubble preconfigured. You do not need to specify them when you use the Hubble CLI.\n## How to deploy the Hubble UI binary distribution\nAfter GKE Dataplane V2 observability is enabled, you can deploy the open source Hubble UI.\n### GKE Autopilot\n- Enable observability in your Autopilot cluster:- Create an Autopilot cluster with observability enabled:```\ngcloud container clusters create-auto hubble-rc-auto \\\u00a0 \u00a0 --location COMPUTE_LOCATION \\\u00a0 \u00a0 --cluster-version VERSION \\\u00a0 \u00a0 --enable-dataplane-v2-flow-observability\n```Replace the following:- **VERSION** : the version of your cluster.\n- **COMPUTE_LOCATION** : the [Compute Engine location](/compute/docs/regions-zones/viewing-regions-zones) for the cluster.\n- Alternatively, enable observability in an existing cluster:```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --location COMPUTE_LOCATION \\\u00a0 \u00a0 --enable-dataplane-v2-flow-observability\n```Replace the following:- **CLUSTER_NAME** : the name of your cluster.\n- **COMPUTE_LOCATION** : the [Compute Engine location](/compute/docs/regions-zones/viewing-regions-zones) for the cluster.\n- Configure `kubectl` to connect to the cluster:```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --location COMPUTE_LOCATION\n```Replace- **CLUSTER_NAME** : the name of your cluster.\n- **COMPUTE_LOCATION** : the [Compute Engine location](/compute/docs/regions-zones/viewing-regions-zones) for the cluster.\n- Deploy Hubble UI:\n- Apply the `hubble-ui-auto.yaml` manifest:```\nkubectl apply -f hubble-ui-auto.yaml\n```\n- Expose Service with port forwarding:```\nkubectl -n gke-managed-dpv2-observability port-forward service/hubble-ui 16100:80 --address='0.0.0.0'\n```\n- Access the Hubble UI in your web browser: [http://localhost:16100/](http://localhost:16100/) **Note:** If you're using `kubectl` on VM, use `http://<VM_IP>:16100/` instead.\n- Enable observability in your Autopilot cluster:- Create an Autopilot cluster with observability enabled:```\ngcloud container clusters create-auto hubble-rc-auto \\\u00a0 \u00a0 --location COMPUTE_LOCATION \\\u00a0 \u00a0 --cluster-version VERSION \\\u00a0 \u00a0 --enable-dataplane-v2-flow-observability\n```Replace the following:- **VERSION** : the version of your cluster.\n- **COMPUTE_LOCATION** : the [Compute Engine location](/compute/docs/regions-zones/viewing-regions-zones) for the cluster.\n- Alternatively, enable observability in an existing cluster:```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --location COMPUTE_LOCATION \\\u00a0 \u00a0 --enable-dataplane-v2-flow-observability\n```Replace the following:- **CLUSTER_NAME** : the name of your cluster.\n- **COMPUTE_LOCATION** : the [Compute Engine location](/compute/docs/regions-zones/viewing-regions-zones) for the cluster.\n- Configure `kubectl` to connect to the cluster:```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --location COMPUTE_LOCATION\n```Replace the following:- **CLUSTER_NAME** : the name of your cluster.\n- **COMPUTE_LOCATION** : the [Compute Engine location](/compute/docs/regions-zones/viewing-regions-zones) for the cluster.\n- Create new namespace for Hubble UI deployment (because it cannot reside in the `kube-system` namespace):```\nkubectl create namespace hubble-ui\n```\n- Copy client TLS certs from the `kube-system` namespace:```\nkubectl -n kube-system get secrets hubble-relay-client-certs -oyaml \u00a0| \\\u00a0 \u00a0 yq eval 'del(.metadata.namespace, .metadata.annotations, .metadata.uid, .metadata.creationTimestamp, .metadata.resourceVersion)' | \\\u00a0 \u00a0 kubectl -n hubble-ui create -f ``````\nkubectl -n kube-system get secrets hubble-relay-client-certs -oyaml \u00a0| \\\u00a0 \u00a0 yq eval 'del(.metadata.namespace, .metadata.annotations, .metadata.uid, .metadata.creationTimestamp, .metadata.resourceVersion)' | \\\u00a0 \u00a0 kubectl -n hubble-ui create -f ``` **Note:** To modify the YAML file, the code examples use the `yq` tool . You can [install the yq tool](https://github.com/mikefarah/yq/#install) or you can modify the YAML files manually.\n- Deploy Hubble UI:\n- Apply the `hubble-ui-auto.yaml` manifest:```\nkubectl apply -f hubble-ui-auto.yaml\n```\n- Expose the Hubble UI service with port forwarding:```\nkubectl -n hubble-ui port-forward service/hubble-ui 16100:80 --address='0.0.0.0'\n```\n- Access the Hubble UI in your web browser: [http://localhost:16100/](http://localhost:16100) **Note:** If you're using kubectl on VM, use `http://<VM_IP>:16100/` instead.\n### GKE Standard\n- Enable GKE Dataplane V2 observability in your Standard cluster:- Create a Standard cluster with GKE Dataplane V2 observability enabled:```\ngcloud container clusters create CLUSTER_NAME \\\u00a0 \u00a0 --enable-dataplane-v2 \\\u00a0 \u00a0 --cluster-version VERSION \\\u00a0 \u00a0 --enable-dataplane-v2-flow-observability\n```Replace the following:- **CLUSTER_NAME** : the name of your cluster.\n- **VERSION** : the version of your cluster.\n- Alternatively, enable GKE Dataplane V2 observability in an existing cluster:```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --location=COMPUTE_LOCATION \\\u00a0 \u00a0 --enable-dataplane-v2-flow-observability\n```Replace the following:- **CLUSTER_NAME** : the name of your cluster.\n- **COMPUTE_LOCATION** : the [Compute Engine location](/compute/docs/regions-zones/viewing-regions-zones) for the cluster.\n- Configure `kubectl` to connect to the cluster:```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --location COMPUTE_LOCATION\n```Replace- **CLUSTER_NAME** : the name of your cluster.\n- **COMPUTE_LOCATION** : the [Compute Engine location](/compute/docs/regions-zones/viewing-regions-zones) for the cluster.\n- Deploy Hubble UI:\n- Apply the `hubble-ui-std.yaml` manifest:```\nkubectl apply -f hubble-ui-std.yaml\n```\n- Expose Service with port forwarding:```\nkubectl -n gke-managed-dpv2-observability port-forward service/hubble-ui 16100:80 --address='0.0.0.0'\n```\n- Access the Hubble UI in your web browser: [http://localhost:16100/](http://localhost:16100/) **Note:** If you're using `kubectl` on VM, use `http://<VM_IP>:16100/` instead.\n- Enable GKE Dataplane V2 observability in your Standard cluster:- Create a Standard cluster with GKE Dataplane V2 observability enabled:```\ngcloud container clusters create CLUSTER_NAME \\\u00a0 \u00a0 --enable-dataplane-v2 \\\u00a0 \u00a0 --cluster-version VERSION \\\u00a0 \u00a0 --enable-dataplane-v2-flow-observability\n```Replace the following:- **CLUSTER_NAME** : the name of your cluster.\n- **VERSION** : the version of your cluster.\n- Alternatively, enable GKE Dataplane V2 observability in an existing cluster:```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --location=COMPUTE_LOCATION \\\u00a0 \u00a0 --enable-dataplane-v2-flow-observability\n```Replace the following:- **CLUSTER_NAME** : the name of your cluster.\n- **COMPUTE_LOCATION** : the [Compute Engine location](/compute/docs/regions-zones/viewing-regions-zones) for the cluster control plane.\n- Configure `kubectl` to connect to the cluster:```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --zone COMPUTE_LOCATION\n```Replace- **CLUSTER_NAME** : the name of your cluster.\n- **COMPUTE_LOCATION** : the [Compute Engine location](/compute/docs/regions-zones/viewing-regions-zones) for the cluster control plane.\n- Deploy Hubble UI:\n- Apply the `hubble-ui-std.yaml` manifest:```\nkubectl apply -f hubble-ui-std.yaml\n```\n- Expose service with port forwarding:```\nkubectl -n kube-system port-forward service/hubble-ui 16100:80 --address='0.0.0.0'\n```\n- Access the Hubble UI in your web browser: [http://localhost:16100/](http://localhost:16100/) **Note:** If you're using `kubectl` on VM, use `http://<VM_IP>:16100/` instead.## What's next\n- [Observe your traffic using GKE Dataplane V2 observability](/kubernetes-engine/docs/how-to/observe-your-traffic)", "guide": "Google Kubernetes Engine (GKE)"}