{"title": "Google Kubernetes Engine (GKE) - Use workload identity federation for GKE", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity", "abstract": "# Google Kubernetes Engine (GKE) - Use workload identity federation for GKE\nThis document shows you how to enable and configure workload identity federation for GKE on your Google Kubernetes Engine (GKE) clusters. Workload identity federation for GKE allows workloads in your GKE clusters to impersonate Identity and Access Management (IAM) service accounts to access Google Cloud services. To learn more about how workload identity federation for GKE works, as well as limitations, refer to [workload identity federation for GKE](/kubernetes-engine/docs/concepts/workload-identity) .\n", "content": "## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.\n- Ensure that you have enabled the IAM Service Account Credentials API. [EnableIAM Credentials API](https://console.cloud.google.com/apis/api/iamcredentials.googleapis.com/overview) \n- Ensure that you have the following [IAM roles](/iam/docs/understanding-roles#kubernetes-engine-roles) :- `roles/container.admin`\n- `roles/iam.serviceAccountAdmin`\n- Ensure that you understand the [limitations of workload identity federation for GKE](/kubernetes-engine/docs/concepts/workload-identity#restrictions) .## Enable workload identity federation for GKE\nYou can enable workload identity federation for GKE on clusters and node pools using the Google Cloud CLI or the Google Cloud console. Workload identity federation for GKE **must** be enabled at the cluster level before you can enable workload identity federation for GKE on node pools.\nAutopilot clusters enable workload identity federation for GKE by default. To configure Autopilot Pods to use workload identity federation for GKE, skip to [Configure applications to use workload identity federation for GKE](#authenticating_to) .\n### Create a new cluster\nYou can enable workload identity federation for GKE on a new Standard cluster by using the gcloud CLI or the Google Cloud console.\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- To enable workload identity federation for GKE on a new cluster, run the following command:```\ngcloud container clusters create CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION \\\u00a0 \u00a0 --workload-pool=PROJECT_ID.svc.id.goog\n```Replace the following:- ``: the name of your new cluster.\n- ``: the Compute Engine [region](/compute/docs/regions-zones#available) of your cluster. For zonal clusters, use`--zone=` ``.\n- ``: your Google Cloud project ID.\nTo enable workload identity federation for GKE on a new cluster, do the following:- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click **Create** .\n- In the **Create cluster** dialog, for GKE Standard, click **Configure** .\n- In the navigation menu, in the **Cluster** section, click **Security** .\n- Select the **Enable Workload Identity** checkbox.\n- Continue configuring the cluster, and then click **Create** .\n### Update an existing cluster\nYou can enable workload identity federation for GKE on an existing Standard cluster by using the gcloud CLI or the Google Cloud console. Existing node pools are unaffected, but any new node pools in the cluster use workload identity federation for GKE.\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- To enable workload identity federation for GKE on an existing cluster, run the following command:```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION \\\u00a0 \u00a0 --workload-pool=PROJECT_ID.svc.id.goog\n```Replace the following:- ``: the name of your existing cluster.\n- ``: the Compute Engine [region](/compute/docs/regions-zones#available) of your cluster. For zonal clusters, use`--zone=` ``.\n- ``: your Google Cloud project ID.\nTo enable workload identity federation for GKE on an existing cluster, do the following:- Go to the **Google Kubernetes Engine** page in Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- In the cluster list, click the name of the cluster you want to modify.\n- On the cluster details page, in the **Security** section, click edit **Edit workload identity federation for GKE** .\n- In the **Edit Workload Identity** dialog, select the **Enable Workload Identity** checkbox.\n- Click **Save changes** .## Migrate existing workloads to workload identity federation for GKE\nAfter you enable workload identity federation for GKE on an existing cluster, you might want to migrate your running workloads to use workload identity federation for GKE. Select the migration strategy that is ideal for your environment. You can create new node pools with workload identity federation for GKE enabled, or update existing node pools to enable workload identity federation for GKE.\n**Note:** You can only enable workload identity federation for GKE on a node pool if workload identity federation for GKE is enabled on the cluster.\nWe recommend creating new node pools if you also need to modify your applications to be compatible with workload identity federation for GKE.\n### Create a new node pool\nAll new node pools that you create default to using workload identity federation for GKE if the cluster has workload identity federation for GKE enabled. To create a new node pool with workload identity federation for GKE enabled, run the following command:\n```\ngcloud container node-pools create NODEPOOL_NAME \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION \\\u00a0 \u00a0 --workload-metadata=GKE_METADATA\n```\nReplace the following:\n- ``: the name of the new node pool.\n- ``: the name of the existing cluster that has workload identity federation for GKE enabled.\nThe `--workload-metadata=GKE_METADATA` flag configures the node pool to use the GKE metadata server. We recommend that you include the flag so that node pool creation fails if workload identity federation for GKE is not enabled on the cluster.\n### Update an existing node pool\nYou can manually enable workload identity federation for GKE on existing node pools after you enable workload identity federation for GKE on the cluster.\n**Caution:** Modifying the node pool immediately enables workload identity federation for GKE for any workloads running in the node pool. This prevents the workloads from using the [Compute Engine default service account](/compute/docs/access/service-accounts) and might result in disruptions.\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- To modify an existing node pool to use workload identity federation for GKE, run the following command:```\ngcloud container node-pools update NODEPOOL_NAME \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION \\\u00a0 \u00a0 --workload-metadata=GKE_METADATA\n```If a cluster has workload identity federation for GKE enabled, you can selectively disable it on a specific node pool by explicitly specifying `--workload-metadata=GCE_METADATA` . See [Protecting clustermetadata](/kubernetes-engine/docs/how-to/protecting-cluster-metadata) for more information.\nTo modify an existing node pool to use workload identity federation for GKE, perform the following steps:- Go to the **Google Kubernetes Engine** page in Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- In the cluster list, click the name of the cluster that you want to modify.\n- Click the **Nodes** tab.\n- In the **Node Pools** section, click the name of the node pool that you want to modify.\n- On the **Node pool details** page, click edit **Edit** .\n- On the **Edit node pool** page, in the **Security** section, select the **Enable GKE Metadata Server** checkbox.\n- Click **Save** .## Configure applications to use workload identity federation for GKE\nAfter enabling workload identity federation for GKE, you should configure your applications to authenticate to Google Cloud using workload identity federation for GKE before you migrate the applications to the new node pools.\nYou must assign a [Kubernetes service account](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) to the application and configure that Kubernetes service account to act as an [IAM service account](/iam/docs/service-accounts) .\nThe following steps show you how to configure your applications to use workload identity federation for GKE if it is enabled on the cluster.\n- Get credentials for your cluster:```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION\n```Replace the following:- ``: the name of your cluster that has workload identity federation for GKE enabled.\n- ``: the Compute Engine region of your cluster.\n- Create a namespace to use for the Kubernetes service account. You can also use the default namespace or any existing namespace.```\nkubectl create namespace NAMESPACE\n```\n- Create a Kubernetes service account for your application to use. You can also use any existing Kubernetes service account in any namespace, including the `default` service account.```\nkubectl create serviceaccount KSA_NAME \\\u00a0 \u00a0 --namespace NAMESPACE\n```Replace the following:- ``: the name of your new Kubernetes service account.\n- ``: the name of the Kubernetes namespace for the service account.\n- Create an IAM service account for your application or use an existing IAM service account instead. You can use any IAM service account in any project in your organization. For Config Connector, apply the `IAMServiceAccount` object for your selected service account.\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- To create a new IAM service account using the gcloud CLI, run the following command. **Note:** If you're using an existing IAM service account with the gcloud CLI, skip this step.```\ngcloud iam service-accounts create GSA_NAME \\\u00a0 \u00a0 --project=GSA_PROJECT\n```Replace the following:- ``: the name of the new IAM service account.\n- ``: the project ID of the Google Cloud project for your IAM service account.\nTo use a new or existing IAM service account with Config Connector, apply the following configuration file.\n **Note:** You must apply the `IAMServiceAccount` object to the cluster using `kubectl` even if you use an existing IAM service account. Replace `GSA_NAME` in the configuration file with the name of the service account to use.\n **Note:** This step requires [Config Connector](https://cloud.google.com/config-connector/docs/overview) . Follow the [installation instructions](https://cloud.google.com/config-connector/docs/how-to/install-upgrade-uninstall) to install Config Connector on your cluster.\n [View on GitHub](https://github.com/GoogleCloudPlatform/k8s-config-connector/blob/HEAD/config/samples/tutorials/workload-identity/service-account.yaml) \n```\napiVersion: iam.cnrm.cloud.google.com/v1beta1kind: IAMServiceAccountmetadata:\u00a0 name: [GSA_NAME]spec:\u00a0 displayName: [DISPLAY_NAME]\n```\nTo deploy this manifest, download it to your machine as\n`service-account.yaml`\n.\nUse `kubectl` to apply the manifest:\n```\nkubectl apply -f service-account.yaml\n```\nFor information on authorizing IAM service accounts to access Google Cloud APIs, see [Understanding service accounts](/iam/docs/understanding-service-accounts) .\n- Ensure that your IAM service account has the [roles](/iam/docs/understanding-roles) you need. You can grant additional roles using the following command:```\ngcloud projects add-iam-policy-binding GSA_PROJECT \\\u00a0 \u00a0 --member \"serviceAccount:GSA_NAME@GSA_PROJECT.iam.gserviceaccount.com\" \\\u00a0 \u00a0 --role \"ROLE_NAME\"\n```Replace the following:- ``: the project ID of the Google Cloud project of your IAM service account.\n- ``: the name of your IAM service account.\n- ``: the IAM role to assign to your service account, like`roles/spanner.viewer`.\n- Allow the Kubernetes service account to impersonate the IAM service account by adding an [IAM policy binding](/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) between the two service accounts. This binding allows the Kubernetes service account to act as the IAM service account.\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- In your development environment, run the following command:```\ngcloud iam service-accounts add-iam-policy-binding GSA_NAME@GSA_PROJECT.iam.gserviceaccount.com \\\u00a0 \u00a0 --role roles/iam.workloadIdentityUser \\\u00a0 \u00a0 --member \"serviceAccount:PROJECT_ID.svc.id.goog[NAMESPACE/KSA_NAME]\"\n``` **Note:** This step requires [Config Connector](https://cloud.google.com/config-connector/docs/overview) . Follow the [installation instructions](https://cloud.google.com/config-connector/docs/how-to/install-upgrade-uninstall) to install Config Connector on your cluster.\n [View on GitHub](https://github.com/GoogleCloudPlatform/k8s-config-connector/blob/HEAD/config/samples/tutorials/workload-identity/policy-binding.yaml) \n```\napiVersion: iam.cnrm.cloud.google.com/v1beta1kind: IAMPolicymetadata:\u00a0 name: iampolicy-workload-identity-samplespec:\u00a0 resourceRef:\u00a0 \u00a0 apiVersion: iam.cnrm.cloud.google.com/v1beta1\u00a0 \u00a0 kind: IAMServiceAccount\u00a0 \u00a0 name: [GSA_NAME]\u00a0 bindings:\u00a0 \u00a0 - role: roles/iam.workloadIdentityUser\u00a0 \u00a0 \u00a0 members:\u00a0 \u00a0 \u00a0 \u00a0 - serviceAccount:[PROJECT_ID].svc.id.goog[[K8S_NAMESPACE]/[KSA_NAME]]\n```\nTo deploy this manifest, download it to your machine as\n`policy-binding.yaml`\n. Replace\n`GSA_NAME`\n,\n`PROJECT_ID`\n,\n`NAMESPACE`\nand\n`KSA_NAME`\nthe values for your environment. Then, run:\n```\nkubectl apply -f policy-binding.yaml\n```\n- Annotate the Kubernetes service account with the email address of the IAM service account.\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- In your development environment, run the following command:```\nkubectl annotate serviceaccount KSA_NAME \\\u00a0 \u00a0 --namespace NAMESPACE \\\u00a0 \u00a0 iam.gke.io/gcp-service-account=GSA_NAME@GSA_PROJECT.iam.gserviceaccount.com\n```\n```\napiVersion: v1kind: ServiceAccountmetadata:\u00a0 annotations:\u00a0 \u00a0 iam.gke.io/gcp-service-account: GSA_NAME@PROJECT_ID.iam.gserviceaccount.com\u00a0 name: KSA_NAME\u00a0 namespace: NAMESPACE\n```\n **Note:** This annotation by itself does not grant access to impersonate the IAM service account. If the IAM binding does not exist, the Pod will not be able to use the IAM service account.\n- Update your Pod spec to schedule the workloads on nodes that use workload identity federation for GKE and to use the annotated Kubernetes service account. **Note:** Omit `spec.serviceAccountName` if you annotate the default Kubernetes service account. For Autopilot clusters, omit the `nodeSelector` field. Autopilot rejects this nodeSelector because all nodes use workload identity federation for GKE.```\nspec:\u00a0 serviceAccountName: KSA_NAME\u00a0 nodeSelector:\u00a0 \u00a0 iam.gke.io/gke-metadata-server-enabled: \"true\"\n```\n- Apply the updated configuration to your cluster:```\nkubectl apply -f DEPLOYMENT_FILE\n```Replace `` with the path to the updated Pod spec.\n### Verify the workload identity federation for GKE setup\nVerify the service accounts are configured correctly by creating a Pod with the Kubernetes service account that runs the OS-specific container image, then connect to it with an interactive session.\nCreate a Pod that uses the annotated Kubernetes service account and `curl` the `service-accounts` endpoint.- Save the following configuration as `wi-test.yaml` :```\napiVersion: v1kind: Podmetadata:\u00a0 name: workload-identity-test\u00a0 namespace: NAMESPACEspec:\u00a0 containers:\u00a0 - image: google/cloud-sdk:slim\u00a0 \u00a0 name: workload-identity-test\u00a0 \u00a0 command: [\"sleep\",\"infinity\"]\u00a0 serviceAccountName: KSA_NAME\u00a0 nodeSelector:\u00a0 \u00a0 iam.gke.io/gke-metadata-server-enabled: \"true\"\n```The `google/cloud-sdk` image includes the Google Cloud CLI which is a convenient way to consume Google Cloud APIs. It might take some time to download the image. **Note:** For Autopilot clusters, omit the `nodeSelector` field. Autopilot rejects this nodeSelector because all nodes use workload identity federation for GKE.\n- Create the Pod:```\nkubectl apply -f wi-test.yaml\n```\n- Open an interactive session in the Pod:```\nkubectl exec -it workload-identity-test \\\u00a0 --namespace NAMESPACE \\\u00a0 -- /bin/bash\n```\n- Run the following command inside the Pod to get the service account email:```\ncurl -H \"Metadata-Flavor: Google\" http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/email\n```If the service accounts are correctly configured, the IAM service account email address is listed as the active (and only) identity. This demonstrates that by default, the Pod acts as the IAM service account's authority when calling Google Cloud APIs.\n- Run the following command inside the Pod to get a token:```\ncurl -H \"Metadata-Flavor: Google\" http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/token\n```If it returns any error, refer to [Troubleshooting](#troubleshoot) \n \nCreate a Pod with the Kubernetes service account that runs the `servercore` container image.- Save the following manifest:```\napiVersion: v1kind: Podmetadata:\u00a0 name: workload-identity-test\u00a0 namespace: NAMESPACEspec:\u00a0 containers:\u00a0 - image: IMAGE_NAME\u00a0 \u00a0 name: workload-identity-test\u00a0 \u00a0 command: [\"powershell.exe\", \"sleep\", \"3600\"]\u00a0 serviceAccountName: KSA_NAME\u00a0 nodeSelector:\u00a0 \u00a0 kubernetes.io/os: windows\u00a0 \u00a0 cloud.google.com/gke-os-distribution: windows_ltsc\u00a0 \u00a0 iam.gke.io/gke-metadata-server-enabled: \"true\"\n```Replace `` with one of the following container servercore image values:| Windows Server node image    | Container servercore image                                                                                                                     |\n|:--------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| WINDOWS_LTSC, WINDOWS_LTSC_CONTAINERD | mcr.microsoft.com/windows/servercore:ltsc2019                                                                                                                |\n| WINDOWS_SAC, WINDOWS_SAC_CONTAINERD | Warning: Windows Server Semi-Annual Channel (SAC) images aren't supported after August 9, 2022 because Microsoft is removing support for the SAC. For potential impact and migration instructions, refer to Windows Server Semi-Annual Channel end of servicing. Check the version mapping between the GKE node version and the Windows SAC version. For Windows Server version 1909, specify mcr.microsoft.com/windows/servercore:1909; otherwise, specify mcr.microsoft.com/windows/servercore:20H2. |\n- Open an interactive session in the Pod:```\nkubectl exec -it workload-identity-test \\\u00a0 --namespace NAMESPACE -- powershell\n```\n- Run the following powershell command inside the Pod to get the service account email:```\nInvoke-WebRequest \u00a0-Headers @{\"Metadata-Flavor\"=\"Google\"} -Uri \u00a0http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/email \u00a0-UseBasicParsing\n```If the service accounts are correctly configured, the IAM service account email address is listed as the active (and only) identity. This demonstrates that by default, the Pod uses the IAM service account's authority when calling Google Cloud APIs.\n- Run the following command inside the Pod to get a token:```\nInvoke-WebRequest \u00a0-Headers @{\"Metadata-Flavor\"=\"Google\"} -Uri \u00a0http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/token \u00a0-UseBasicParsing\n```If it returns any error, refer to [Troubleshooting](#troubleshoot) \n### Use workload identity federation for GKE from your code\nAuthenticating to Google Cloud services from your code is the same process as authenticating using the [Compute Engine metadataserver](/compute/docs/storing-retrieving-metadata) . When you use workload identity federation for GKE, your requests to the instance metadata server are routed to the [GKE metadata server](/kubernetes-engine/docs/concepts/workload-identity#metadata_server) . Existing code that authenticates using the instance metadata server (like code using the [Google Cloud client libraries](/docs/authentication/client-libraries) ) should work without modification.\n## Use quota from a different project with workload identity federation for GKE\nOn clusters running GKE version 1.24 or later, you can optionally configure your Kubernetes service account to use quota from a different Google Cloud project when making calls to the `GenerateAccessToken` and the `GenerateIdToken` methods in the [IAM Service Account Credentials API](/iam/docs/reference/credentials/rest#rest-resource:-v1.projects.serviceaccounts) . This lets you avoid using the entire quota in your main project, and instead use quota from other projects for these services in your cluster.\nTo configure a with workload identity federation for GKE, do the following:\n- Grant the `serviceusage.services.use` permission on the quota project to the Kubernetes service account.```\ngcloud projects add-iam-policy-binding \\--role=roles/serviceusage.serviceUsageConsumer \\--member=serviceAccount:PROJECT_ID.svc.id.goog[NAMESPACE/KSA_NAME] \\QUOTA_PROJECT_ID\n```Replace `` with the project ID of the quota project.\n- Annotate the Kubernetes service account with the quota project:```\nkubectl annotate serviceaccount KSA_NAME \\--namespace NAMESPACE \\iam.gke.io/credential-quota-project=QUOTA_PROJECT_ID\n```\nTo verify the configuration works correctly, do the following:\n- Create a Pod and start a shell session by following the instructions in [Verify the workload identity federation for GKE setup](#verify_the_setup) .\n- Make a service account token request:```\ncurl -H \"Metadata-Flavor: Google\" http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/token\n```\n- Go to the **IAM Service Accounts Credentials API** page in the Google Cloud console for your quota project: [Go to APIs](https://console.cloud.google.com/apis/api/iamcredentials.googleapis.com/metrics) \n- Check for changes in traffic.## Clean up\nTo stop using workload identity federation for GKE, revoke access to the IAM service account and disable workload identity federation for GKE on the cluster.\n### Revoke access\n- Revoke access to the IAM service account:\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- In your development environment, run the following command:```\ngcloud iam service-accounts remove-iam-policy-binding GSA_NAME@GSA_PROJECT.iam.gserviceaccount.com \\\u00a0 \u00a0 --role roles/iam.workloadIdentityUser \\\u00a0 \u00a0 --member \"serviceAccount:PROJECT_ID.svc.id.goog[NAMESPACE/KSA_NAME]\"\n```Replace the following:- ``: the project ID of the GKE cluster.\n- ``: the name of the Kubernetes namespace where your Kubernetes service account is located.\n- ``: the name of the Kubernetes service account that will have its access revoked.\n- ``: the name of the IAM service account.\n- ``: the project ID of the IAM service account.\nIf you used Config Connector to create the service account, delete the service account with `kubectl` .\n```\nkubectl delete -f service-account.yaml\n```\nIt can take up to 30 minutes for cached tokens to expire. You can check whether the cached tokens have expired with this command:```\ngcloud auth list\n```The cached tokens have expired if the output of that command no longer includes `` `@` `` `.iam.gserviceaccount.com` .\n- Remove the annotation from the Kubernetes service account. This step is optional because access has been revoked by IAM.```\nkubectl annotate serviceaccount KSA_NAME \\\u00a0 \u00a0 --namespace NAMESPACE iam.gke.io/gcp-service-account``` **Note:** If you do not remove the annotation, the IAM service account you use with workload identity federation for GKE might continue to display when you run `gcloud auth list` . However, GKE does not use the IAM service account to authenticate to Google Cloud services.\n### Disable workload identity federation for GKE\nYou can only disable workload identity federation for GKE on GKE Standard clusters.\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- Disable workload identity federation for GKE on each node pool:```\ngcloud container node-pools update NODEPOOL_NAME \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\u00a0 \u00a0 --workload-metadata=GCE_METADATA\n```Repeat this command for every node pool in the cluster.\n- Disable workload identity federation for GKE in the cluster:```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --disable-workload-identity\n```\n- Go to the **Google Kubernetes Engine** page in Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- In the cluster list, click the name of the cluster that you want to modify.\n- Click the **Nodes** tab.\n- To disable workload identity federation for GKE on each node pool, do the following for each node pool in the **Node Pools** section:- Click the name of the node pool that you want to modify.\n- On the **Node pool details** page, clickedit **Edit** .\n- On the **Edit node pool** page, in the **Security** section, clear the **Enable GKE Metadata Server** checkbox.\n- Click **Save** .\n- To disable workload identity federation for GKE for the cluster, do the following:- Click the **Details** tab.\n- In the **Security** section, next to **Workload Identity** , clickedit **Edit** .\n- In the **Edit Workload Identity** dialog, clear the **Enable Workload Identity** checkbox.\n- Click **Save changes** .\n## Disable workload identity federation for GKE in your organization\nFrom a security perspective, workload identity federation for GKE allows GKE to assert Kubernetes service account identities that can be authenticated and authorized to Google Cloud resources. If you are an administrator who has taken actions to isolate workloads from Google Cloud resources, like [disabling service account creation](/resource-manager/docs/organization-policy/restricting-service-accounts#disable_service_account_creation) or [disabling service account key creation](/resource-manager/docs/organization-policy/restricting-service-accounts#disable_service_account_creation) , you might also want to disable workload identity federation for GKE for your organization.\nSee [these instructions for disabling workload identity federation for GKE for your organization](/resource-manager/docs/organization-policy/restricting-service-accounts#disable_workload_identity_cluster_creation) .\n## Troubleshooting\nFor troubleshooting information, refer to [Troubleshooting workload identity federation for GKE](/kubernetes-engine/docs/troubleshooting/troubleshooting-security#workload-identity) .\n## What's next\n- Learn more about [workload identity federation for GKE](/kubernetes-engine/docs/concepts/workload-identity) .\n- Read the [GKE security overview](/kubernetes-engine/docs/concepts/security-overview) .\n- Learn about [Protecting Cluster Metadata](/kubernetes-engine/docs/how-to/protecting-cluster-metadata) .\n- Learn about [IAM service accounts](/iam/docs/understanding-service-accounts) .", "guide": "Google Kubernetes Engine (GKE)"}