{"title": "Google Kubernetes Engine (GKE) - \u5c07\u5bb9\u5668\u6620\u50cf\u4e2d\u7684\u61c9\u7528\u90e8\u7f72\u5230 GKE \u96c6\u7fa3", "url": "https://cloud.google.com/kubernetes-engine/docs/quickstarts/deploy-app-container-image?hl=zh-cn", "abstract": "# Google Kubernetes Engine (GKE) - \u5c07\u5bb9\u5668\u6620\u50cf\u4e2d\u7684\u61c9\u7528\u90e8\u7f72\u5230 GKE \u96c6\u7fa3\n# \u5c07\u5bb9\u5668\u6620\u50cf\u4e2d\u7684\u61c9\u7528\u90e8\u7f72\u5230 GKE \u96c6\u7fa3\u672c\u9801\u9762\u4ecb\u7d39\u5982\u4f55\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a- \u5275\u5efa\u4e00\u500b Hello World \u61c9\u7528\u3002\n- \u4f7f\u7528 Cloud Build \u5c07\u8a72\u61c9\u7528\u5c01\u88dd\u5230\u5bb9\u5668\u6620\u50cf\u4e2d\u3002\n- \u5728 Google Kubernetes Engine (GKE) \u4e2d\u5275\u5efa\u4e00\u500b\u96c6\u7fa3\u3002\n- \u5c07\u5bb9\u5668\u6620\u50cf\u90e8\u7f72\u5230\u8a72\u96c6\u7fa3\u3002\n\u793a\u4f8b\u4ee5\u591a\u7a2e\u8a9e\u8a00\u63d0\u4f9b\uff0c\u4f46\u662f\uff0c\u9664\u4e86\u6240\u63d0\u4f9b\u7684\u8a9e\u8a00\u4ee5\u5916\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u8a9e\u8a00\u3002\u5982\u9700\u5728 Cloud Shell Editor \u4e2d\u76f4\u63a5\u9075\u5faa\u6709\u95dc\u6b64\u4efb\u52d9\u7684\u5206\u6b65\u6307\u5c0e\uff0c\u8acb\u9ede\u64ca **\u64cd\u4f5c\u6f14\u793a** \uff1a\n [\u64cd\u4f5c\u6f14\u793a](https://console.cloud.google.com/getting-started?tutorial=kubernetes--autopilot&hl=zh-cn) ", "content": "## \u6e96\u5099\u5de5\u4f5c- Titles in dynamic includes are not used anywhere, and we should avoid paying to translate them\n- `kubectl`\u7528\u65bc\u7ba1\u7406 Kubernetes\uff08\u5373 GKE \u4f7f\u7528\u7684\u96c6\u7fa3\u7de8\u6392\u7cfb\u7d71\uff09\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528`gcloud`\u5b89\u88dd`kubectl`\uff1a```\ngcloud components install kubectl\n```\n## \u7de8\u5beb\u793a\u4f8b\u61c9\u7528\u5982\u9700\u67e5\u770b\u5982\u4f55\u5275\u5efa\u5728 GKE \u4e0a\u904b\u884c\u7684 Hello World \u61c9\u7528\u7684\u8aaa\u660e\uff0c\u8acb\u9ede\u64ca\u60a8\u60f3\u7528\u7684\u8a9e\u8a00\uff1a\n- \u5275\u5efa\u540d\u7232 `helloworld-gke` \u7684\u65b0\u76ee\u9304\uff0c\u4e26\u8f49\u5230\u6b64\u76ee\u9304\u4e2d\uff1a```\nmkdir helloworld-gkecd helloworld-gke\n```\n- \u5275\u5efa\u540d\u7232 `example.com/helloworld` \u7684\u65b0\u6a21\u584a\uff1a```\ngo mod init example.com/helloworld\n```\n- \u5275\u5efa\u540d\u7232 `helloworld.go` \u7684\u65b0\u6587\u4ef6\uff0c\u4e26\u5c07\u4ee5\u4e0b\u4ee3\u78bc\u7c98\u8cbc\u5230\u5176\u4e2d\uff1a [  quickstarts/languages/go/helloworld.go ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/go/helloworld.go) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/go/helloworld.go) ```\npackage mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"net/http\"\u00a0 \u00a0 \u00a0 \u00a0 \"os\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 http.HandleFunc(\"/\", handler)\u00a0 \u00a0 \u00a0 \u00a0 port := os.Getenv(\"PORT\")\u00a0 \u00a0 \u00a0 \u00a0 if port == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port = \"8080\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"Listening on localhost:%s\", port)\u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%s\", port), nil))}func handler(w http.ResponseWriter, r *http.Request) {\u00a0 \u00a0 \u00a0 \u00a0 log.Print(\"Hello world received a request.\")\u00a0 \u00a0 \u00a0 \u00a0 target := os.Getenv(\"TARGET\")\u00a0 \u00a0 \u00a0 \u00a0 if target == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 target = \"World\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Hello %s!\\n\", target)}\n```\u6b64\u4ee3\u78bc\u6703\u5275\u5efa\u4e00\u500b Web \u670d\u52d9\u5668\uff0c\u8a72\u670d\u52d9\u5668\u76e3\u807d\u7531 `PORT` \u74b0\u5883\u8b8a\u91cf\u5b9a\u7fa9\u7684\u7aef\u53e3\u3002\n\u60a8\u7684\u61c9\u7528\u5df2\u7de8\u5beb\u5b8c\u7562\uff0c\u63a5\u4e0b\u4f86\u53ef\u4ee5\u5c07\u5176\u5c01\u88dd\u5230\u4e00\u500b Docker \u5bb9\u5668\u4e2d\uff0c\u7136\u5f8c\u4e0a\u50b3\u5230 Artifact Registry\u3002- \u5275\u5efa\u540d\u7232 `helloworld-gke` \u7684\u65b0\u76ee\u9304\uff0c\u4e26\u8f49\u5230\u6b64\u76ee\u9304\u4e2d\uff1a```\nmkdir helloworld-gkecd helloworld-gke\n```\n- \u5275\u5efa\u4e00\u500b\u5305\u542b\u4ee5\u4e0b\u5167\u5bb9\u7684 `package.json` \u6587\u4ef6\uff1a [  quickstarts/languages/nodejs/package.json ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/package.json) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/package.json) ```\n{\u00a0 \"name\": \"gke-helloworld\",\u00a0 \"version\": \"1.0.0\",\u00a0 \"description\": \"GKE hello world sample in Node\",\u00a0 \"main\": \"index.js\",\u00a0 \"scripts\": {\u00a0 \u00a0 \"start\": \"node index.js\"\u00a0 },\u00a0 \"author\": \"\",\u00a0 \"license\": \"Apache-2.0\",\u00a0 \"dependencies\": {\u00a0 \u00a0 \"express\": \"^4.16.4\"\u00a0 }}\n```\n- \u5728\u540c\u4e00\u76ee\u9304\u4e2d\uff0c\u5275\u5efa\u4e00\u500b `index.js` \u6587\u4ef6\uff0c\u4e26\u5c07\u4ee5\u4e0b\u884c\u5fa9\u5236\u5230\u6b64\u6587\u4ef6\u4e2d\uff1a [  quickstarts/languages/nodejs/index.js ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/index.js) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/index.js) ```\nconst express = require('express');const app = express();app.get('/', (req, res) => {\u00a0 console.log('Hello world received a request.');\u00a0 const target = process.env.TARGET || 'World';\u00a0 res.send(`Hello ${target}!`);});const port = process.env.PORT || 8080;app.listen(port, () => {\u00a0 console.log('Hello world listening on port', port);});\n```\u6b64\u4ee3\u78bc\u6703\u5275\u5efa\u4e00\u500b Web \u670d\u52d9\u5668\uff0c\u8a72\u670d\u52d9\u5668\u76e3\u807d\u7531 `PORT` \u74b0\u5883\u8b8a\u91cf\u5b9a\u7fa9\u7684\u7aef\u53e3\u3002\n\u60a8\u7684\u61c9\u7528\u5df2\u7de8\u5beb\u5b8c\u7562\uff0c\u63a5\u4e0b\u4f86\u53ef\u4ee5\u5c07\u5176\u5c01\u88dd\u5230\u4e00\u500b Docker \u5bb9\u5668\u4e2d\uff0c\u7136\u5f8c\u4e0a\u50b3\u5230 Artifact Registry\u3002- \u5275\u5efa\u540d\u7232 `helloworld-gke` \u7684\u65b0\u76ee\u9304\uff0c\u4e26\u8f49\u5230\u6b64\u76ee\u9304\u4e2d\uff1a```\nmkdir helloworld-gkecd helloworld-gke\n```\n- \u5275\u5efa\u540d\u7232 `app.py` \u7684\u6587\u4ef6\uff0c\u4e26\u5c07\u4ee5\u4e0b\u4ee3\u78bc\u7c98\u8cbc\u5230\u6b64\u6587\u4ef6\u4e2d\uff1a [  quickstarts/languages/python/app.py ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/python/app.py) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/python/app.py) ```\nimport osfrom flask import Flaskapp = Flask(__name__)@app.route('/')def hello_world():\u00a0 \u00a0 target = os.environ.get('TARGET', 'World')\u00a0 \u00a0 return 'Hello {}!\\n'.format(target)if __name__ == \"__main__\":\u00a0 \u00a0 app.run(debug=True,host='0.0.0.0',port=int(os.environ.get('PORT', 8080)))\n```\n\u5275\u5efa\u4e00\u500b Spring Boot \u61c9\u7528\u3002- \u5b89\u88dd [Java SE 8 \u6216\u66f4\u9ad8\u7248\u672c\u7684 JDK](https://www.oracle.com/java/technologies/javase-downloads.html) \u548c [cURL](https://curl.haxx.se) \u3002 Java SE \u548c cURL \u53ea\u5728\u4e0b\u4e00\u6b65\u4e2d\u5275\u5efa\u65b0\u7684 Web \u9805\u76ee\u6642\u9700\u8981\u3002Dockerfile\uff08\u5c07\u5728\u7a0d\u5f8c\u4ecb\u7d39\uff09\u6703\u5c07\u6240\u6709\u4f9d\u8cf4\u9805\u52a0\u8f09\u5230\u5bb9\u5668\u4e2d\u3002\n- \u5728\u60a8\u7684\u7d42\u7aef\u65b0\u5efa\u4e00\u500b\u7a7a Web \u9805\u76ee\uff1a```\ncurl https://start.spring.io/starter.zip \\\u00a0 \u00a0 -d dependencies=web \\\u00a0 \u00a0 -d javaVersion=1.8 \\\u00a0 \u00a0 -d type=maven-project \\\u00a0 \u00a0 -d bootVersion=2.6.6 \\\u00a0 \u00a0 -d name=helloworld \\\u00a0 \u00a0 -d artifactId=helloworld \\\u00a0 \u00a0 -d baseDir=helloworld-gke \\\u00a0 \u00a0 -o helloworld-gke.zipunzip helloworld-gke.zipcd helloworld-gke\n```\u60a8\u73fe\u5728\u5df2\u7d93\u6709\u4e86\u4e00\u500b\u4f4d\u65bc `helloworld-gke` \u4e2d\u7684\u65b0 Spring Boot \u9805\u76ee\u3002\n- \u5728 `src/main/java/com/example/helloworld/HelloworldApplication.java` \u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0 `@RestController` \u4f86\u66f4\u65b0 `HelloworldApplication` \u985e\uff0c\u4ee5\u8655\u7406 `/` \u6620\u5c04\u3002 [  quickstarts/languages/java/src/main/java/com/example/helloworld/HelloworldApplication.java ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/java/src/main/java/com/example/helloworld/HelloworldApplication.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/java/src/main/java/com/example/helloworld/HelloworldApplication.java) ```\npackage com.example.helloworld;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;@SpringBootApplicationpublic class HelloworldApplication {\u00a0 \u00a0 \u00a0 \u00a0 @Value(\"${TARGET:World}\")\u00a0 \u00a0 \u00a0 \u00a0 String target;\u00a0 \u00a0 \u00a0 \u00a0 @RestController\u00a0 \u00a0 \u00a0 \u00a0 class HelloworldController {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 @GetMapping(\"/\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String hello() {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return \"Hello \" + target + \"!\";\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 public static void main(String[] args) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SpringApplication.run(HelloworldApplication.class, args);\u00a0 \u00a0 \u00a0 \u00a0 }}\n```\u6b64\u4ee3\u78bc\u6703\u5275\u5efa\u4e00\u500b Web \u670d\u52d9\u5668\uff0c\u8a72\u670d\u52d9\u5668\u76e3\u807d\u7531 `PORT` \u74b0\u5883\u8b8a\u91cf\u5b9a\u7fa9\u7684\u7aef\u53e3\u3002\n\u60a8\u7684\u61c9\u7528\u5df2\u7de8\u5beb\u5b8c\u7562\uff0c\u63a5\u4e0b\u4f86\u53ef\u4ee5\u5c07\u5176\u5c01\u88dd\u5230\u4e00\u500b Docker \u5bb9\u5668\u4e2d\uff0c\u7136\u5f8c\u4e0a\u50b3\u5230 Artifact Registry\u3002- \u5b89\u88dd [.NET SDK](https://dotnet.microsoft.com/en-us/download) \u3002.NET SDK \u53ea\u5728\u4e0b\u4e00\u6b65\u4e2d\u5275\u5efa\u65b0\u7684 Web \u9805\u76ee\u6642\u9700\u8981\u3002 `Dockerfile` \uff08\u5c07\u5728\u7a0d\u5f8c\u4ecb\u7d39\uff09\u6703\u5c07\u6240\u6709\u4f9d\u8cf4\u9805\u52a0\u8f09\u5230\u5bb9\u5668\u4e2d\u3002\n- \u5728\u60a8\u7684\u7d42\u7aef\u65b0\u5efa\u4e00\u500b\u7a7a Web \u9805\u76ee\uff1a```\ndotnet new web -o helloworld-gke\n```\n- \u5207\u63db\u5230 `helloworld-gke` \u76ee\u9304\u3002```\ncd helloworld-gke\n```\n- \u66f4\u65b0 `Program.cs` \u4ee5\u76e3\u807d\u7aef\u53e3 `8080` \uff1a [  quickstarts/languages/dotnet/Program.cs ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/dotnet/Program.cs) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/dotnet/Program.cs) ```\nvar builder = WebApplication.CreateBuilder(args);// Google Cloud Run sets the PORT environment variable to tell this// process which port to listen to.var port = Environment.GetEnvironmentVariable(\"PORT\") ?? \"8080\";var url = $\"http://0.0.0.0:{port}\";var target = Environment.GetEnvironmentVariable(\"TARGET\") ?? \"World\";var app = builder.Build();app.MapGet(\"/\", () => $\"Hello {target}!\");app.Run(url);\n```\n\u60a8\u7684\u61c9\u7528\u5df2\u7de8\u5beb\u5b8c\u7562\uff0c\u63a5\u4e0b\u4f86\u53ef\u4ee5\u5c07\u5176\u5c01\u88dd\u5230\u4e00\u500b Docker \u5bb9\u5668\u4e2d\uff0c\u7136\u5f8c\u4e0a\u50b3\u5230 Artifact Registry\u3002- \u5275\u5efa\u540d\u7232 `helloworld-gke` \u7684\u65b0\u76ee\u9304\uff0c\u4e26\u8f49\u5230\u6b64\u76ee\u9304\u4e2d\uff1a```\nmkdir helloworld-gkecd helloworld-gke\n```\n- \u5275\u5efa\u540d\u7232 `index.php` \u7684\u6587\u4ef6\uff0c\u4e26\u5c07\u4ee5\u4e0b\u4ee3\u78bc\u7c98\u8cbc\u5230\u6b64\u6587\u4ef6\u4e2d\uff1a [  quickstarts/languages/php/index.php ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/php/index.php) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/php/index.php) ```\n<?php$target = getenv('TARGET', true) ?: 'World';echo sprintf(\"Hello %s!\", $target);?>\n```\n\u60a8\u7684\u61c9\u7528\u5df2\u7de8\u5beb\u5b8c\u7562\uff0c\u63a5\u4e0b\u4f86\u53ef\u4ee5\u5c07\u5176\u5c01\u88dd\u5230\u4e00\u500b Docker \u5bb9\u5668\u4e2d\uff0c\u7136\u5f8c\u4e0a\u50b3\u5230 Artifact Registry\u3002## \u4f7f\u7528 Cloud Build \u5c07\u61c9\u7528\u5bb9\u5668\u5316\n- \u5982\u9700\u5c07\u793a\u4f8b\u61c9\u7528\u5bb9\u5668\u5316\uff0c\u8acb\u5728\u8207\u6e90\u6587\u4ef6\u76f8\u540c\u7684\u76ee\u9304\u4e2d\u5275\u5efa\u4e00\u500b\u540d\u7232 `Dockerfile` \u7684\u65b0\u6587\u4ef6\uff0c\u4e26\u5c07\u4ee5\u4e0b\u5167\u5bb9\u8907\u88fd\u5230\u6b64\u6587\u4ef6\u4e2d\uff1a\n [  quickstarts/languages/go/Dockerfile ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/go/Dockerfile) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/go/Dockerfile) \n```\n# Use the offical Go image to create a build artifact.# This is based on Debian and sets the GOPATH to /go.# https://hub.docker.com/_/golangFROM golang:1.21.0 as builderWORKDIR /app# Initialize a new Go module.RUN go mod init quickstart-go# Copy local code to the container image.COPY *.go ./# Build the command inside the container.RUN CGO_ENABLED=0 GOOS=linux go build -o /quickstart-go# Use a Docker multi-stage build to create a lean production image.# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-buildsFROM gcr.io/distroless/base-debian11# Change the working directory.WORKDIR /# Copy the binary to the production image from the builder stage.COPY --from=builder /quickstart-go /quickstart-go# Run the web service on container startup.USER nonroot:nonrootENTRYPOINT [\"/quickstart-go\"]\n```\n [  quickstarts/languages/nodejs/Dockerfile ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/Dockerfile) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/Dockerfile) \n```\n# Use the official lightweight Node.js 16 image.# https://hub.docker.com/_/nodeFROM node:17-slim# Create and change to the app directory.WORKDIR /usr/src/app# Copy application dependency manifests to the container image.# A wildcard is used to ensure both package.json AND package-lock.json are copied.# Copying this separately prevents re-running npm install on every code change.COPY package*.json ./# Install production dependencies.RUN npm install --omit=dev# Copy local code to the container image.COPY . ./# Run the web service on container startup.CMD [ \"npm\", \"start\" ]\n```\u518d\u6dfb\u52a0\u4e00\u500b `.dockerignore` \u6587\u4ef6\uff0c\u4ee5\u78ba\u4fdd\u672c\u5730\u6587\u4ef6\u4e0d\u6703\u5f71\u97ff\u5bb9\u5668\u7684\u69cb\u5efa\u904e\u7a0b\uff1a\n [  quickstarts/languages/nodejs/.dockerignore ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/.dockerignore) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/.dockerignore) \n```\nDockerfileREADME.mdnode_modulesnpm-debug.log\n``` [  quickstarts/languages/python/Dockerfile ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/python/Dockerfile) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/python/Dockerfile) \n```\n# Use the official lightweight Python image.# https://hub.docker.com/_/pythonFROM python:3.7-slim# Copy local code to the container image.ENV APP_HOME /appWORKDIR $APP_HOMECOPY . ./# Install production dependencies.RUN pip install Flask gunicorn# Run the web service on container startup. Here we use the gunicorn# webserver, with one worker process and 8 threads.# For environments with multiple CPU cores, increase the number of workers# to be equal to the cores available.CMD exec gunicorn --bind :$PORT --workers 1 --threads 8 app:app\n```\u6dfb\u52a0 `.dockerignore` \u6587\u4ef6\uff0c\u4ee5\u78ba\u4fdd\u672c\u5730\u6587\u4ef6\u4e0d\u6703\u5f71\u97ff\u5bb9\u5668\u7684\u69cb\u5efa\u904e\u7a0b\uff1a\n [  quickstarts/languages/python/.dockerignore ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/python/.dockerignore) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/python/.dockerignore) \n```\nDockerfileREADME.md*.pyc*.pyo*.pyd__pycache__\n``` [  quickstarts/languages/java/Dockerfile ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/java/Dockerfile) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/java/Dockerfile) \n```\n# Use the official maven/Java 8 image to create a build artifact.# https://hub.docker.com/_/mavenFROM maven:3.5-jdk-8-alpine as builder# Copy local code to the container image.WORKDIR /appCOPY pom.xml ./COPY src ./src/# Build a release artifact.RUN mvn package -DskipTests# Use AdoptOpenJDK for base image.# It's important to use OpenJDK 8u191 or above that has container support enabled.# https://hub.docker.com/r/adoptopenjdk/openjdk8# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-buildsFROM adoptopenjdk/openjdk8:jdk8u202-b08-alpine-slim# Copy the jar to the production image from the builder stage.COPY --from=builder /app/target/helloworld-*.jar /helloworld.jar# Run the web service on container startup.CMD [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-Dserver.port=${PORT}\",\"-jar\",\"/helloworld.jar\"]\n```\n [  quickstarts/languages/dotnet/Dockerfile ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/dotnet/Dockerfile) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/dotnet/Dockerfile) \n```\n# Use Microsoft's official lightweight .NET images.FROM mcr.microsoft.com/dotnet/sdk:6.0 AS buildWORKDIR /app# Install production dependencies.# Copy csproj and restore as distinct layers.COPY *.csproj ./RUN dotnet restore# Copy local code to the container image.COPY . ./# Build a release artifact.RUN dotnet publish -c Release -o out# Run the web service on container startup in a lean production image.FROM mcr.microsoft.com/dotnet/aspnet:6.0WORKDIR /appCOPY --from=build /app/out .# Start the .dll (will have the same name as your .csproj file)ENTRYPOINT [\"dotnet\", \"helloworld-gke.dll\"]\n```\u6dfb\u52a0 `.dockerignore` \u6587\u4ef6\uff0c\u4ee5\u78ba\u4fdd\u672c\u5730\u6587\u4ef6\u4e0d\u6703\u5f71\u97ff\u5bb9\u5668\u7684\u69cb\u5efa\u904e\u7a0b\uff1a\n [  quickstarts/languages/dotnet/.dockerignore ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/dotnet/.dockerignore) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/dotnet/.dockerignore) \n```\nDockerfileREADME.md**/obj/**/bin/\n``` [  quickstarts/languages/php/Dockerfile ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/php/Dockerfile) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/php/Dockerfile) \n```\n# Use the official PHP 7.4 image.# https://hub.docker.com/_/phpFROM php:7.4-apache# Copy local code to the container image.COPY index.php /var/www/html/# Use port 8080 in Apache configuration files.RUN sed -i 's/80/${PORT}/g' /etc/apache2/sites-available/000-default.conf /etc/apache2/ports.conf# Configure PHP for development.# Switch to the production php.ini for production operations.# RUN mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"# https://hub.docker.com/_/php#configurationRUN mv \"$PHP_INI_DIR/php.ini-development\" \"$PHP_INI_DIR/php.ini\"\n```\u6dfb\u52a0 `.dockerignore` \u6587\u4ef6\uff0c\u4ee5\u78ba\u4fdd\u672c\u5730\u6587\u4ef6\u4e0d\u6703\u5f71\u97ff\u5bb9\u5668\u7684\u69cb\u5efa\u904e\u7a0b\uff1a\n [  quickstarts/languages/php/.dockerignore ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/php/.dockerignore) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/php/.dockerignore) \n```\nDockerfileREADME.mdvendor\n```\n- \u7372\u53d6 Google Cloud \u9805\u76ee ID\uff1a```\ngcloud config get-value project\n```\n- \u5728\u672c\u5feb\u901f\u5165\u9580\u4e2d\uff0c\u60a8\u9700\u8981\u5c07\u5bb9\u5668\u5b58\u5132\u5728 Artifact Registry \u4e2d\uff0c\u4e26\u5f9e\u8a3b\u518a\u8868\u4e2d\u5c07\u5176\u90e8\u7f72\u5230\u96c6\u7fa3\u3002\u904b\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728\u96c6\u7fa3\u6240\u5728\u7684\u4f4d\u7f6e\u5275\u5efa\u540d\u7232 `hello-repo` \u7684\u5009\u5eab\uff1a```\ngcloud artifacts repositories create hello-repo \\\u00a0 \u00a0 --project=PROJECT_ID \\\u00a0 \u00a0 --repository-format=docker \\\u00a0 \u00a0 --location=us-central1 \\\u00a0 \u00a0 --description=\"Docker repository\"\n```\u66ff\u63db\u4ee5\u4e0b\u503c\uff1a- ``\u662f\u60a8\u7684 Google Cloud \u9805\u76ee ID\n- \u4f7f\u7528 [Cloud Build](https://cloud.google.com/build?hl=zh-cn) \u69cb\u5efa\u5bb9\u5668\u6620\u50cf\uff0c\u6b64\u884c\u7232\u985e\u4f3c\u65bc\u904b\u884c `docker build` \u548c `docker push` \uff0c\u4f46\u69cb\u5efa\u662f\u5728 Google Cloud \u4e0a\u9032\u884c\u7684\uff1a```\ngcloud builds submit \\\u00a0 --tag us-central1-docker.pkg.dev/PROJECT_ID/hello-repo/helloworld-gke .\n```\u8a72\u6620\u50cf\u5b58\u5132\u5728 [Artifact Registry](https://cloud.google.com/artifact-registry/docs?hl=zh-cn) \u4e2d\u3002\n## \u5275\u5efa GKE \u96c6\u7fa3GKE \u96c6\u7fa3\u662f\u4f5c\u7232\u55ae\u500b GKE \u96c6\u7fa3\u904b\u884c\u7684\u4e00\u7d44\u8a17\u7ba1\u5f0f Compute Engine \u865b\u64ec\u6a5f\u3002- \u5275\u5efa\u96c6\u7fa3\u3002```\ngcloud container clusters create-auto helloworld-gke \\\u00a0 --location us-central1\n```\n- \u9a57\u8b49\u60a8\u6709\u6b0a\u8a2a\u554f\u8a72\u96c6\u7fa3\u3002\u4ee5\u4e0b\u547d\u4ee4\u6703\u5217\u51fa\u60a8\u7684\u5bb9\u5668\u96c6\u7fa3\u4e2d\u5df2\u5553\u52d5\u4e26\u904b\u884c\u7684\u7bc0\u9ede\uff0c\u4e26\u8868\u660e\u60a8\u6709\u6b0a\u8a2a\u554f\u8a72\u96c6\u7fa3\u3002```\nkubectl get nodes\n```\u5982\u679c\u60a8\u9047\u5230\u4e86\u932f\u8aa4\uff0c\u8acb\u53c3\u95b1 [Kubernetes \u554f\u984c\u6392\u67e5\u6307\u5357](https://kubernetes.io/docs/tasks/debug/debug-cluster/) \u3002\n## \u90e8\u7f72\u5230 GKE\u5982\u9700\u5c07\u8a72\u61c9\u7528\u90e8\u7f72\u5230\u60a8\u5275\u5efa\u597d\u7684 GKE \u96c6\u7fa3\uff0c\u60a8\u9700\u8981\u7528\u5230\u5169\u500b Kubernetes \u5c0d\u8c61\u3002- \u4e00\u500b [Deployment](http://kubernetes.io/docs/concepts/workloads/controllers/deployment/) \u5c0d\u8c61\uff0c\u7528\u4f86\u5b9a\u7fa9\u60a8\u7684\u61c9\u7528\u3002\n- \u4e00\u500b [Service](https://kubernetes.io/docs/concepts/services-networking/service/) \u5c0d\u8c61\uff0c\u7528\u4f86\u5b9a\u7fa9\u5982\u4f55\u8a2a\u554f\u60a8\u7684\u61c9\u7528\u3002\n### \u90e8\u7f72\u61c9\u7528\u8a72\u61c9\u7528\u5177\u6709\u4e00\u500b\u524d\u7aef\u670d\u52d9\u5668\uff0c\u7528\u65bc\u8655\u7406 Web \u8acb\u6c42\u3002\u60a8\u53ef\u4ee5\u5728\u540d\u7232 `deployment.yaml` \u7684\u65b0\u6587\u4ef6\u4e2d\u5b9a\u7fa9\u904b\u884c\u8a72\u524d\u7aef\u6240\u9700\u7684\u96c6\u7fa3\u8cc7\u6e90\u3002\u9019\u4e9b\u8cc7\u6e90\u901a\u904e\u4e00\u500b Deployment \u5c0d\u8c61\u4f86\u63cf\u8ff0\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 Deployment \u4f86\u5275\u5efa\u548c\u66f4\u65b0 [ReplicaSet](https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/) \u4ee5\u53ca\u8207\u5176\u95dc\u806f\u7684 Pod\u3002- \u5728\u8207\u5176\u4ed6\u6587\u4ef6\u76f8\u540c\u7684\u76ee\u9304\u4e2d\u5275\u5efa `deployment.yaml` \u6587\u4ef6\uff0c\u7136\u5f8c\u8907\u88fd\u4ee5\u4e0b\u5167\u5bb9\u3002\u5728\u6587\u4ef6\u4e2d\u66ff\u63db\u4ee5\u4e0b\u503c\uff1a- ``\u662f\u60a8\u7684 Google Cloud \u9805\u76ee ID\uff1a\n- ``\u662f\u4ee3\u78bc\u5eab\u4f4d\u7f6e\uff0c\u4f8b\u5982`us-central1`\u3002\n [  quickstarts/languages/deployment.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/deployment.yaml) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/deployment.yaml) ```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: helloworld-gkespec:\u00a0 replicas: 1\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: hello\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: hello\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: hello-app\u00a0 \u00a0 \u00a0 \u00a0 # Replace $LOCATION with your Artifact Registry location (e.g., us-west1).\u00a0 \u00a0 \u00a0 \u00a0 # Replace $GCLOUD_PROJECT with your project ID.\u00a0 \u00a0 \u00a0 \u00a0 image: $LOCATION-docker.pkg.dev/$GCLOUD_PROJECT/hello-repo/helloworld-gke:latest\u00a0 \u00a0 \u00a0 \u00a0 # This app listens on port 8080 for web traffic by default.\u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 - containerPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: PORT\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: \"8080\"\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memory: \"1Gi\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: \"500m\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ephemeral-storage: \"1Gi\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 limits:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memory: \"1Gi\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: \"500m\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ephemeral-storage: \"1Gi\"\n```\n- \u5c07\u8cc7\u6e90\u90e8\u7f72\u5230\u96c6\u7fa3\uff1a```\nkubectl apply -f deployment.yaml\n```\n- \u8ddf\u8e64 Deployment \u7684\u72c0\u614b\uff1a```\nkubectl get deployments\n```\u5982\u679c\u6240\u6709 `AVAILABLE` \u90e8\u7f72\u90fd\u7232 `READY` \uff0c\u5247\u8868\u793a Deployment \u5df2\u5b8c\u6210\u3002```\nNAME    READY UP-TO-DATE AVAILABLE AGE\nhelloworld-gke 1/1  1   1   20s\n```\u5982\u679c Deployment \u6709\u8aa4\uff0c\u8acb\u518d\u6b21\u904b\u884c `kubectl apply -f deployment.yaml` \uff0c\u66f4\u65b0 Deployment \u4ee5\u7d0d\u5165\u4efb\u4f55\u66f4\u6539\u3002\n- Deployment \u5b8c\u6210\u5f8c\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b Deployment \u5275\u5efa\u7684 Pod\uff1a```\nkubectl get pods\n```\n### \u90e8\u7f72 Service [Service](https://kubernetes.io/docs/concepts/services-networking/service/) \u63d0\u4f9b\u5c0d\u4e00\u7d44 Pod \u7684\u55ae\u4e00\u8a2a\u554f\u9ede\u3002\u5118\u7ba1\u60a8\u53ef\u4ee5\u8a2a\u554f\u55ae\u500b Pod\uff0c\u4f46 Pod \u662f\u81e8\u6642\u6027\u7684\uff0c\u53ea\u6709\u4f7f\u7528\u4e00\u500b Service \u5730\u5740\u624d\u80fd\u9032\u884c\u53ef\u9760\u7684\u8a2a\u554f\u3002\u5728\u60a8\u7684 Hello World \u61c9\u7528\u4e2d\uff0c\u540d\u7232\u201chello\u201d\u7684 Service \u5b9a\u7fa9\u4e86\u4e00\u500b [\u8ca0\u8f09\u5747\u8861\u5668](https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/) \uff0c\u7528\u65bc\u901a\u904e\u4e00\u500b IP \u5730\u5740\u8a2a\u554f\u591a\u500b `hello-app` Pod\u3002\u6b64 Service \u5728 `service.yaml` \u6587\u4ef6\u4e2d\u5b9a\u7fa9\u3002- \u8acb\u5728\u8207\u5176\u4ed6\u6e90\u6587\u4ef6\u76f8\u540c\u7684\u76ee\u9304\u4e2d\u5275\u5efa\u4e00\u500b\u540d\u7232 `service.yaml` \u7684\u6587\u4ef6\uff0c\u4e26\u5728\u6b64\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u5167\u5bb9\uff1a [  quickstarts/languages/service.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/service.yaml) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/service.yaml) ```\n# The hello service provides a load-balancing proxy over the hello-app# pods. By specifying the type as a 'LoadBalancer', Kubernetes Engine will# create an external HTTP load balancer.apiVersion: v1kind: Servicemetadata:\u00a0 name: hellospec:\u00a0 type: LoadBalancer\u00a0 selector:\u00a0 \u00a0 app: hello\u00a0 ports:\u00a0 - port: 80\u00a0 \u00a0 targetPort: 8080\n```\u9019\u4e9b Pod \u8207\u4f7f\u7528 Pod \u7684 Service \u662f\u5206\u5225\u5b9a\u7fa9\u7684\u3002Kubernetes \u4f7f\u7528 [\u6a19\u7c64](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/) \u4f86\u9078\u64c7\u670d\u52d9\u6307\u5411\u7684 Pod\u3002\u5229\u7528\u6a19\u7c64\uff0c\u60a8\u65e2\u53ef\u4ee5\u8b93\u4e00\u500b Service \u6307\u5411\u4f86\u81ea\u4e0d\u540c\u526f\u672c\u96c6\u7684\u591a\u500b Pod\uff0c\u4e5f\u53ef\u4ee5\u8b93\u591a\u500b Service \u6307\u5411\u540c\u4e00\u500b Pod\u3002\n- \u5275\u5efa Hello World Service\uff1a```\nkubectl apply -f service.yaml\n```\n- \u7372\u53d6\u670d\u52d9\u7684\u5916\u90e8 IP \u5730\u5740\uff1a```\nkubectl get services\n```\u5206\u914d IP \u5730\u5740\u6700\u591a\u53ef\u80fd\u9700\u8981 60 \u79d2\u7684\u6642\u9593\u3002\u5916\u90e8 IP \u5730\u5740\u5217\u5728 `hello` Serivce \u7684 `EXTERNAL-IP` \u5217\u4e0b\u3002```\nNAME   TYPE   CLUSTER-IP  EXTERNAL-IP  PORT(S)  AGE\nhello  LoadBalancer 10.22.222.222 35.111.111.11 80:32341/TCP 1m\nkubernetes ClusterIP  10.22.222.1  <none>   443/TCP  20m\n```\n### \u67e5\u770b\u5df2\u90e8\u7f72\u7684\u61c9\u7528\u73fe\u5728\uff0c\u60a8\u5df2\u7d93\u90e8\u7f72\u597d\u4e86\u5728 GKE \u4e0a\u904b\u884c Hello World \u61c9\u7528\u6240\u9700\u7684\u5168\u90e8\u8cc7\u6e90\u3002\n\u4f7f\u7528\u5728\u4e0a\u4e00\u6b65\u4e2d\u7372\u53d6\u7684\u5916\u90e8 IP \u5730\u5740\u5728\u7db2\u7d61\u700f\u89bd\u5668\u4e2d\u52a0\u8f09\u61c9\u7528\uff0c\u4e26\u67e5\u770b\u6b63\u5728\u904b\u884c\u7684\u61c9\u7528\uff1a\n```\n http://EXTERNAL_IP\n```\n\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5c0d Service \u7684\u5916\u90e8 IP \u5730\u5740\u9032\u884c `curl` \u8abf\u7528\uff1a\n```\ncurl EXTERNAL_IP\n```\n\u8f38\u51fa\u986f\u793a\u4ee5\u4e0b\u5167\u5bb9\uff1a\n```\nHello World!\n```## \u6e05\u7406\u7232\u907f\u514d\u56e0\u672c\u9801\u4e2d\u4f7f\u7528\u7684\u8cc7\u6e90\u5c0e\u81f4\u60a8\u7684 Google Cloud \u8cec\u865f\u7522\u751f\u8cbb\u7528\uff0c\u8acb\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\u3002\n\u60a8\u9700\u8981\u7232\u96c6\u7fa3\u4e2d\u904b\u884c\u7684\n [Compute Engine \u5be6\u4f8b](https://cloud.google.com/kubernetes-engine/pricing?hl=zh-cn) \n\u548c\n [Container Registry \u4e2d\u7684\u5bb9\u5668\u6620\u50cf](https://cloud.google.com/artifact-registry/pricing?hl=zh-cn) \n\u4ed8\u8cbb\u3002\n\u522a\u9664 Google Cloud \u9805\u76ee\u5f8c\uff0c\u7cfb\u7d71\u6703\u505c\u6b62\u5c0d\u8a72\u9805\u76ee\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u8cc7\u6e90\u8a08\u8cbb\u3002- Titles in dynamic includes are not used anywhere, and we should avoid paying to translate them\n- **\u8b66\u544a** \uff1a\u522a\u9664\u9805\u76ee\u6703\u7522\u751f\u4ee5\u4e0b\u5f71\u97ff- **\u9805\u76ee\u4e2d\u7684\u6240\u6709\u5167\u5bb9\u90fd\u6703\u88ab\u522a\u9664\u3002** \u5982\u679c\u60a8\u5c07\u73fe\u6709\u9805\u76ee\u7528\u65bc\u672c\u6587\u6a94\u4e2d\u7684\u4efb\u52d9\uff0c\u5247\u522a\u9664\u8a72\u9805\u76ee\u5f8c\uff0c\u9084\u5c07\u522a\u9664\u60a8\u5df2\u5728\u8a72\u9805\u76ee\u4e2d\u5b8c\u6210\u7684\u4efb\u4f55\u5176\u4ed6\u5de5\u4f5c\u3002\n- **\u81ea\u5b9a\u7fa9\u9805\u76ee ID \u4e1f\u5931\u3002** \u5275\u5efa\u6b64\u9805\u76ee\u6642\uff0c\u60a8\u53ef\u80fd\u5275\u5efa\u4e86\u8981\u5728\u5c07\u4f86\u4f7f\u7528\u7684\u81ea\u5b9a\u7fa9\u9805\u76ee ID\u3002\u8981\u4fdd\u7559\u4f7f\u7528\u8a72\u9805\u76ee ID \u7684\u7db2\u5740\uff08\u4f8b\u5982`appspot.com`\u7db2\u5740\uff09\uff0c\u8acb\u522a\u9664\u9805\u76ee\u5167\u7684\u6240\u9078\u8cc7\u6e90\uff0c\u800c\u4e0d\u662f\u522a\u9664\u6574\u500b\u9805\u76ee\u3002\n- \u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\uff0c\u9032\u5165 **\u7ba1\u7406\u8cc7\u6e90** \u9801\u9762\u3002 [\u8f49\u5230\u201c\u7ba1\u7406\u8cc7\u6e90\u201d](https://console.cloud.google.com/iam-admin/projects?hl=zh-cn) \n- \u5728\u9805\u76ee\u5217\u8868\u4e2d\uff0c\u9078\u64c7\u8981\u522a\u9664\u7684\u9805\u76ee\uff0c\u7136\u5f8c\u9ede\u64ca **\u522a\u9664** \u3002\n- \u5728\u5c0d\u8a71\u6846\u4e2d\u8f38\u5165\u9805\u76ee ID\uff0c\u7136\u5f8c\u9ede\u64ca **\u95dc\u9589** \u4ee5\u522a\u9664\u9805\u76ee\u3002\n\u5982\u679c\u60a8\u60f3\u4fdd\u7559\u9805\u76ee\uff0c\u53ea\u522a\u9664\u672c\u6559\u7a0b\u4e2d\u4f7f\u7528\u7684\u8cc7\u6e90\uff0c\u8acb\u522a\u9664\u60a8\u7684\u96c6\u7fa3\u548c\u6620\u50cf\u3002\n\u5982\u9700\u4f7f\u7528 Google Cloud CLI \u522a\u9664\u96c6\u7fa3\uff0c\u8acb\u7232\u60a8\u4f7f\u7528\u7684\u6a21\u5f0f\u904b\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n```\ngcloud container clusters delete helloworld-gke \\\u00a0 \u00a0 --location us-central1\n```\n **\u6ce8\u610f** \uff1a\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u522a\u9664\u96c6\u7fa3](https://cloud.google.com/kubernetes-engine/docs/how-to/deleting-a-cluster?hl=zh-cn) \u6587\u6a94\u3002\n\u5982\u9700\u522a\u9664 Artifact Registry \u4ee3\u78bc\u5eab\u4e2d\u7684\u6620\u50cf\uff0c\u8acb\u904b\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n```\ngcloud artifacts docker images delete \\\u00a0 \u00a0 us-central1-docker.pkg.dev/PROJECT_ID/hello-repo/helloworld-gke\n```\n **\u6ce8\u610f** \uff1a\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7ba1\u7406\u6620\u50cf](https://cloud.google.com/artifact-registry/docs/docker/manage-images?hl=zh-cn#deleting_images) \u6587\u6a94\u3002\n## \u5f8c\u7e8c\u6b65\u9a5f\u5982\u9700\u8a73\u7d30\u77ad\u89e3 Kubernetes\uff0c\u8acb\u53c3\u95b1\u4ee5\u4e0b\u5167\u5bb9\uff1a- \u8a73\u7d30\u77ad\u89e3\u5982\u4f55 [\u5275\u5efa\u96c6\u7fa3](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-container-cluster?hl=zh-cn) \u3002\n- \u8a73\u7d30\u77ad\u89e3 [Kubernetes](http://kubernetes.io/) \u3002\n- \u95b1\u8b80 [kubectl \u53c3\u8003\u6587\u6a94](https://kubernetes.io/docs/reference/kubectl/) \u3002\n\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u90e8\u7f72\u5230 GKE\uff0c\u8acb\u53c3\u95b1\u4ee5\u4e0b\u5167\u5bb9\uff1a- \u77ad\u89e3\u5982\u4f55 [\u6253\u5305\u3001\u8a17\u7ba1\u548c\u90e8\u7f72\u7c21\u55ae\u7684 Web \u670d\u52d9\u5668\u61c9\u7528](https://cloud.google.com/kubernetes-engine/docs/tutorials/hello-app?hl=zh-cn) \u3002\n- [\u4f7f\u7528 Redis \u548c PHP \u5275\u5efa\u591a\u5c64 Web \u61c9\u7528](https://cloud.google.com/kubernetes-engine/docs/tutorials/guestbook?hl=zh-cn) \u3002\n- [\u4f7f\u7528 Persistent Disk \u548c Cloud SQL \u5728 GKE \u4e0a\u90e8\u7f72 WordPress](https://cloud.google.com/kubernetes-engine/docs/tutorials/persistent-disk?hl=zh-cn) \u3002\n- [\u8a2d\u7f6e Cloud Run on GKE](https://cloud.google.com/run/docs/gke/setup?hl=zh-cn) \u3002\n\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u4f7f\u7528 Cloud Code \u76f4\u63a5\u5f9e\u60a8\u7684 IDE \u5728 GKE \u4e0a\u5275\u5efa\u3001\u958b\u767c\u548c\u904b\u884c\u61c9\u7528\uff0c\u8acb\u53c3\u95b1\u4ee5\u4e0b\u5167\u5bb9\uff1a- [Cloud Code for VS Code](https://cloud.google.com/code/docs/vscode/k8s-overview?hl=zh-cn) \n- [Cloud Code for IntelliJ](https://cloud.google.com/code/docs/intellij/k8s-overview?hl=zh-cn)", "guide": "Google Kubernetes Engine (GKE)"}