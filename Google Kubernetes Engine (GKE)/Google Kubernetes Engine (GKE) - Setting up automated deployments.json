{"title": "Google Kubernetes Engine (GKE) - Setting up automated deployments", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/automated-deployment", "abstract": "# Google Kubernetes Engine (GKE) - Setting up automated deployments\nYou can configure automated deployments for your [workloads](/kubernetes-engine/docs/how-to/deploying-workloads-overview) on Google Kubernetes Engine (GKE).\nThis page shows you how to set up a simple continuous integration/continuous delivery (CI/CD) pipeline for the workload. When you push a change to your repository, Cloud Build automatically builds and deploys the container to your GKE cluster.\n**Note:** You can set up a continuous-delivery pipeline to deploy to a progression of GKE clusters, with optional manual approval for any target cluster. For more information, see [Cloud Deploy](/deploy/docs/overview) .\n", "content": "## How an automated deployment works\nIf you have a workload that references a single-container image in GKE, you can configure an automated deployment, so that your application is re-built and deployed each time a code change is checked into the repository.\nWith an automated deployment, you define your workload as a YAML file and store that YAML file in your repository (consistent with best practices). GKE generates YAML that you can use for this purpose.\nYou have the following two options for using YAML files:\n- If you don't yet have a YAML file that defines your workload, you can use the generated YAML file. Save the YAML file in your repository. Cloud Build uses it to deploy your workload each time.\n- If you already have a YAML file that defines your workload, you can point GKE to its location in your repository. You can compare the YAML file in your repository with the recommended YAML file to ensure you're deploying the correct workload in the correct way.## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.\n- Enable the following additional APIs:- Cloud Build [Enable Cloud Build API](https://console.cloud.google.com/apis/library/cloudbuild.googleapis.com?q=cloud%20build) \n- Cloud Source Repositories [Enable Cloud Source Repositories API](https://console.cloud.google.com/apis/library/sourcerepo.googleapis.com?q=source%20repositories) \n- Artifact Registry [Enable Artifact Registry API](https://console.cloud.google.com/apis/library/artifactregistry.googleapis.com) \n## Requirements\nAutomated deployments have the following requirements:\n- You can only use an automated deployment with workloads of type `Deployment` that specify a single container image. Multi-container workloads and other workload types (for example, `ReplicaSet` ) are not supported.\n- Your source-code repository must contain a Dockerfile to build the image.You can host this repository on one of the following products:- [Cloud Source Repositories](/source-repositories) \n- GitHub\n- Bitbucket\nIf you use GitHub or Bitbucket, you need to grant Google Cloud access to your repository.\n- Store your container image in Artifact Registry, in the same Google Cloud project as your GKE cluster. You need to have the image in Artifact Registry, and you need to have [deployed](/kubernetes-engine/docs/how-to/deploying-workloads-overview) it at least once, so that you have a workload in GKE.## Creating the automated deployment\nTo create an automated deployment, perform the following steps:\n- Go to the **Workloads** page in the Google Cloud console. [Go to Workloads](https://console.cloud.google.com/kubernetes/workload) \n- In the workloads list, click the name of the Deployment you want to modify.\n- Click **Actions > Automated deployment** .\nIn the **Automate deployment** pane, perform the following steps:\n- Under **Source repository** , choose your source code repository:- In the **Repository Provider** drop-down list, choose the provider for your repositoryAn automated deployment supports the following source control hosts:- Cloud Source Repositories\n- GitHub\n- BitbucketIf you are using GitHub or Bitbucket, authenticate with your username and password. **Note:** An automated deployment creates a mirror of your GitHub or Bitbucket repositories on Cloud Source Repositories. When you push changes to your original repository, Cloud Source Repositories picks up the changes automatically.\n- From the **Repository** drop-down list, select the name of the repository containing the source code for your Deployment.\n- Click **Continue** .\n- Under **Build configurations** , specify the Build configuration information:- Enter the name of the branch from which you want to build, or a regular expression ( [RegExp2](https://github.com/google/re2/wiki/Syntax) ) to match the branch or branches. The default branch is`master`. When you push to this branch, Cloud Build builds your application.\n- Enter the relative path of the **Dockerfile directory** .\n- Enter the **Dockerfile name** . **Note:** The **Image name** field is automatically generated based on the repository name.\n- Click **Continue** .\n- Under **Automated deployment configuration** , provide the configuration YAML file location.The system automatically generates a YAML file, which you can use to populate the YAML file in your repository.- Click **View Google-recommended YAML** to see the generated YAML file.\n- Compare it to your own YAML file, if you have it, and update yours based on this one.Otherwise, create a new file and populate it with the generated YAML. This helps ensure the workload that gets deployed matches what's currently running. The file can have any name, but must have a `.yaml` or `.yml` extension.\n- Specify the relative path to the directory that contains the YAML file.If there is more than one YAML file in the specified directory, GKE uses all of them.\n- Click **Set Up** to finish configuring your automated deployment.You might be prompted to grant permissions to the Cloud Build service account. This permission is required.## What happens next\nAfter you set up automated deployment for the selected workload, you have a [Cloud Build trigger](/build/docs/automating-builds/create-manage-triggers) that builds a container image after a push to the selected branch of the repository. Cloud Build also deploys a new revision of your workload to the cluster where the original image was deployed.\nFor more information on your workload, see the **Deployment Details** page (Revision History tab).", "guide": "Google Kubernetes Engine (GKE)"}