{"title": "Google Kubernetes Engine (GKE) - Install kubectl and configure cluster access", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-access-for-kubectl", "abstract": "# Google Kubernetes Engine (GKE) - Install kubectl and configure cluster access\nThis page explains how to install and configure the `kubectl` command-line tool to interact with your Google Kubernetes Engine (GKE) clusters.\n", "content": "## Overview\n`kubectl` is a command-line tool that you can use to interact with your GKE clusters. To use `kubectl` with GKE, you must install the tool and configure it to communicate with your clusters. Further `kubectl` configuration is required if you run multiple clusters in Google Cloud.\nThis page shows you the following:\n- How`kubectl`works.\n- How to [install kubectl](#install_kubectl) and any [required dependencies](#install_plugin) .\n- How to [set a default cluster for kubectl](#default_cluster_kubectl) .\n- How to [run kubectl commands against a specific cluster](#run_against_a_specific_cluster) .## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.## Install kubectl\nYou can install `kubectl` using the Google Cloud CLI or an external package manager such as `apt` or `yum` .\n- Install the `kubectl` component:```\ngcloud components install kubectl\n```\n- Verify that `kubectl` is installed by checking it has the latest version:```\nkubectl version --client\n```\n- Verify that you have the `cloud-sdk` repository:```\ngrep -rhE ^deb /etc/apt/sources.list* | grep \"cloud-sdk\"\n```The output is similar to the following:```\ndeb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\n```\n- If the `cloud-sdk` repository is not listed then [install the gcloud CLI](/sdk/docs/install#deb) .\n- Install the `kubectl` component:```\napt-get updateapt-get install -y kubectl\n```\n- Verify that `kubectl` is installed by checking it has the latest version:```\nkubectl version --client\n```\n- Verify that you have the `cloud-sdk` repository:```\nyum repolist | grep \"google-cloud-sdk\"\n```Output is similar to the following:```\ngoogle-cloud-sdk Google Cloud SDK 2,205\n```\n- Install the `kubectl` component:```\nyum install -y kubectl\n```\n- Verify that `kubectl` is installed by checking it has the latest version:```\nkubectl version --client\n```## Install required plugins\n`kubectl` and other Kubernetes clients require an authentication plugin, `gke-gcloud-auth-plugin` , which uses the [Client-go Credential Plugins](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins) framework to provide authentication tokens to communicate with GKE clusters.\nBefore Kubernetes version 1.26 is released, gcloud CLI will start to require that the `gke-gcloud-auth-plugin` binary is installed. If not installed, existing installations of `kubectl` or other custom Kubernetes clients will stop working.\nYou **must** install this plugin to use `kubectl` and other clients to interact with GKE. Existing clients display an error message if the plugin is not installed.\nBefore you begin, check whether the plugin is already installed:\n```\ngke-gcloud-auth-plugin --version\n```\nIf the output displays version information, skip this section.\nYou can install the authentication plugin using the gcloud CLI or an external package manager such as `apt` or `yum` .\nInstall the `gke-gcloud-auth-plugin` binary:\n```\n\u00a0 gcloud components install gke-gcloud-auth-plugin\n```\nInstall the `gke-gcloud-auth-plugin` binary:\n```\n\u00a0 apt-get install google-cloud-sdk-gke-gcloud-auth-plugin\n```\nInstall the `gke-gcloud-auth-plugin` binary:\n```\n\u00a0 yum install google-cloud-sdk-gke-gcloud-auth-plugin\n```\nVerify the `gke-gcloud-auth-plugin` binary installation:\n- Check the `gke-gcloud-auth-plugin` binary version:```\ngke-gcloud-auth-plugin --version\n```\n- Update the `kubectl` configuration to use the plugin:```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION\n```Replace the following:- ``: the name of your cluster.\n- ``: the Compute Engine [region](/compute/docs/regions-zones#available) for your cluster. For zonal clusters, use`--zone=` ``.\n- Verify the configuration:```\nkubectl get namespaces\n```The output is similar to the following:```\nNAME    STATUS AGE\ndefault   Active 51d\nkube-node-lease Active 51d\nkube-public  Active 51d\nkube-system  Active 51d\n```\nFor more information about why this plugin is required, see the [Kubernetes KEP](https://github.com/kubernetes/enhancements/tree/master/keps/sig-auth/541-external-credential-providers) .\n## Interact with kubectl\nKubernetes uses a YAML file called [kubeconfig](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/) to store cluster authentication information for `kubectl` . By default, the file is saved at `$HOME/.kube/config` .\n`kubeconfig` contains a group of access parameters called . Each context contains a Kubernetes cluster, a user, and an optional default namespace. `kubectl` refers to contexts when running commands.\nThe following are tasks you can complete to configure `kubectl` :\n- Choose which cluster`kubectl`talks to.\n- Set a default cluster for`kubectl`by setting the current context in the`kubeconfig`file.\n- Run`kubectl`commands against a specific cluster using the`--cluster`flag.\n### View kubeconfig\nTo view your environment's `kubeconfig` , run the following command:\n```\nkubectl config view\n```\nThe command returns a list of all clusters for which `kubeconfig` entries have been generated. If a GKE cluster is listed, you can run `kubectl` commands against it in your current environment. Otherwise, you need to [Store cluster information for kubectl](#store_info) .\n### View the current context for kubectl\nThe is the cluster that is currently the default for `kubectl` . All `kubectl` commands run against that cluster.\nWhen you create a cluster using `gcloud container clusters create-auto` , an entry is automatically added to the `kubeconfig` file in your environment, and the current context changes to that cluster. For example:\n```\ngcloud container clusters create-auto my-cluster\nCreating my-cluster...done\nFetching cluster endpoint and auth data.\nkubeconfig entry generated for my-cluster\n```\nTo view the current context for `kubectl` , run the following command:\n```\nkubectl config current-context\n```\n### Store cluster information for kubectl\nWhen you create a cluster using the Google Cloud console or using gcloud CLI from a different computer, your environment's `kubeconfig` file is updated. Additionally, if a project team member uses gcloud CLI to create a cluster from their computer, their `kubeconfig` is updated but yours is not. The `kubeconfig` entry contains either:\n- Your credentials as shown in`gcloud auth list`, or\n- The [application default credentials, if configured](/sdk/gcloud/reference/auth/application-default) .\nTo generate a `kubeconfig` context in your environment, ensure that you have the `container.clusters.get` permission. The least-privileged IAM role that provides this permission is `container.clusterViewer` .\nTo generate a `kubeconfig` context for a specific cluster, run the following command:\n```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --region=CLUSTER_REGION\n```\nReplace the following:\n- ``: the name of your cluster.\n- ``: the Compute Engine [region](/compute/docs/regions-zones#available) for your cluster. For zonal clusters, use`--zone=` ``.\n**Note:** Running `gcloud container clusters get-credentials` also changes the current context for `kubectl` to that cluster.\n### Generate a kubeconfig entry using a private cluster's internal IP address\nAll clusters have a canonical endpoint. The endpoint exposes the Kubernetes API server that `kubectl` and other services use to communicate with your cluster control plane.\n[Private clusters](/kubernetes-engine/docs/concepts/private-cluster-concept) have two separate endpoint IP addresses: `privateEndpoint` , which is an internal IP address, and `publicEndpoint` , which is an external external IP address. The `endpoint` field refers to the external IP address, unless public access to the endpoint is disabled, in which case the private IP address will be used.\nFor private clusters, if you prefer to use the internal IP address as the endpoint, run the following command:\n```\ngcloud container clusters get-credentials CLUSTER_NAME --internal-ip\n```\nReplace `` with the name of your cluster.\nRunning `get-credentials` uses the IP address specified in the `endpoint` field by default.\n## Set a default cluster for kubectl commands\nIf you have previously generated a kubeconfig entry for clusters, you can switch the current context for `kubectl` to that cluster by running the following command:\n```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION\n```\nReplace the following:\n- ``: the name of your cluster.\n- ``: the Compute Engine [region](/compute/docs/regions-zones#available) for your cluster. For zonal clusters, use`--zone=` ``.\nFor example, consider a project with two clusters, `my-cluster` and `my-new-cluster` . The current context is `my-new-cluster` , but you want to run `kubectl` commands against `my-cluster` . To switch the current context from `my-new-cluster` to `my-cluster` , run the following command:\n```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION\n```\n## Run individual kubectl commands against a specific cluster\nYou can run individual `kubectl` commands against a specific cluster by using `--cluster=` `` .\nFor example, consider an environment with two clusters, `my-cluster` and `my-new-cluster` , in which the current context is `my-cluster` . You want to deploy an application to `my-new-cluster` , but you don't want to change the current context. To deploy the application to `my-new-cluster` without changing the current context, you would run the following command:\n```\nkubectl run my-app --image us-docker.pkg.dev/my-project/my-repo/my-app:1.0 --cluster my-new-cluster\n```\n## Troubleshooting\nFor additional troubleshooting, refer to [Troubleshooting common issues](/kubernetes-engine/docs/troubleshooting) .\n### Insufficient authentication scopes\nWhen you run `gcloud container clusters get-credentials` you receive the following error:\n```\nERROR: (gcloud.container.clusters.get-credentials) ResponseError: code=403, message=Request had insufficient authentication scopes.\n```\nThis error occurs because you are attempting to access the Kubernetes Engine API from a Compute Engine VM that does not have the `cloud-platform` scope. For instructions on changing the scopes on your Compute Engine VM instance, see [Creating and enabling service accounts for instances](/compute/docs/access/create-enable-service-accounts-for-instances#changeserviceaccountandscopes) .\n### ERROR: executable gke-gcloud-auth-plugin not found\nIf the following error is received while trying to run `kubectl` or custom clients interacting with GKE, install the `gke-gcloud-auth-plugin` as described in [Installation instructions](#install) . The error messages are similar to the following:\n- Error sample\n```\nUnable to connect to the server: getting credentials: exec: executable gke-gcloud-auth-plugin not found\nIt looks like you are trying to use a client-go credential plugin that is not installed.\nTo learn more about this feature, consult the documentation available at:\n  https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins\nVisit cloud.google.com/kubernetes-engine/docs/how-to/cluster-access-for-kubectl#install_plugin to install gke-gcloud-auth-plugin.\n```\n- Error sample\n```\nUnable to connect to the server: getting credentials: exec: fork/exec /usr/lib/google-cloud-sdk/bin/gke-gcloud-auth-plugin: no such file or directory\n```\n### ERROR: panic: no Auth Provider found for name gcp\nThe error `no Auth Provider found for name \"gcp\"` is received if `kubectl` or custom Kubernetes clients have been built with Kubernetes `client-go` version 1.26 or later, as described in [How it works](#how-it-works) . This can be resolved by the following steps:\n- Install `gke-gcloud-auth-plugin` as described in [Installation instructions](#install) .\n- Update to the latest version of the gcloud CLI using `gcloud components update` .\n- Update the `kubeconfig` file.```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION\n```Replace the following:- ``: the name of your cluster.\n- ``: the Compute Engine [region](/compute/docs/regions-zones#available) for your cluster. For zonal clusters, use`--zone=` ``.\n### WARNING: the gcp auth plugin is deprecated, use gcloud instead\nYou might notice this warning message after you [install thegke-gcloud-auth-plugin](#install_plugin) and run a `kubectl` command against a GKE cluster. This message appears if your client version is earlier than 1.26.\nTo tell your client to use the `gke-gcloud-auth-plugin` authentication plugin instead, do the following:\n- Open your shell login script in a text editor:\n```\nvi ~/.bashrc\n```\n```\nvi ~/.zshrc\n```\nIf you're using PowerShell, skip this step.\n- Set the following environment variable:\n```\nexport USE_GKE_GCLOUD_AUTH_PLUGIN=True\n```\n```\nexport USE_GKE_GCLOUD_AUTH_PLUGIN=True\n```\n```\n[Environment]::SetEnvironmentVariable('USE_GKE_GCLOUD_AUTH_PLUGIN', True, 'Machine')\n```\n- Apply the variable in your environment:\n```\nsource ~/.bashrc\n```\n```\nsource ~/.zshrc\n```\nExit the terminal and open a new terminal session.\n- Update the gcloud CLI:```\ngcloud components update\n```\n- Authenticate to your cluster:```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION\n```Replace the following:- ``: the name of your cluster.\n- ``: the Compute Engine [region](/compute/docs/regions-zones#available) for your cluster. For zonal clusters, use`--zone=` ``.\n## What's next\n- Learn how to [authorize access to resources in GKE clusters](/kubernetes-engine/docs/how-to/role-based-access-control) .\n- [Authenticate to Google Cloud services from GKE workloads](/kubernetes-engine/docs/how-to/workload-identity) .\n- Read the [kubectl cheat sheet](https://kubernetes.io/docs/reference/kubectl/cheatsheet/) .", "guide": "Google Kubernetes Engine (GKE)"}