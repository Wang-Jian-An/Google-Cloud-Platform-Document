{"title": "Google Kubernetes Engine (GKE) - Apply predefined Pod-level security policies using PodSecurity", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/podsecurityadmission", "abstract": "# Google Kubernetes Engine (GKE) - Apply predefined Pod-level security policies using PodSecurity\nThis page shows you how to apply predefined Pod-level security controls in your Google Kubernetes Engine (GKE) clusters using the `PodSecurity` admission controller.\nFor more information about how `PodSecurity` works, refer to [Pod Security Admission](https://kubernetes.io/docs/concepts/security/pod-security-admission/) .\n", "content": "## Overview\nis a Kubernetes admission controller that lets you apply [Pod Security Standards](https://kubernetes.io/docs/concepts/security/pod-security-standards/) to Pods running on your GKE clusters. Pod Security Standards are predefined security policies that cover the high-level needs of Pod security in Kubernetes. These policies range from being highly permissive to highly restrictive.\nYou can apply the following Pod Security Standards to your GKE clusters:\n- **Privileged** : An unrestricted policy that provides the widest level of permissions. Allows for known privilege escalations.\n- **Baseline** : A minimally restrictive policy that allows the default, minimally specified Pod configuration. Prevents known privilege escalations.\n- **Restricted** : A highly restrictive policy that follows Pod hardening best practices.\nYou can use the `PodSecurity` admission controller to apply Pod Security Standards in the following modes:\n- **Enforce** : Policy violations reject Pod creation. An audit event is added to the audit log.\n- **Audit** : Policy violations trigger adding an audit event to the audit log. Pod creation is allowed.\n- **Warn** : Policy violations trigger a user-facing warning. Pod creation is allowed.\nThe `PodSecurity` admission controller embeds these policies into the Kubernetes API.\n**Note:** You can't create policies that override the [built-in security settings in GKE Autopilot](/kubernetes-engine/docs/concepts/autopilot-security#built-in-security) .\nIf you want to create and apply custom security policies at the Pod level, consider using the [Gatekeeper](/kubernetes-engine/docs/how-to/pod-security-policies-with-gatekeeper) admission controller instead.\n## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.\n- Ensure that you have a GKE Autopilot or Standard cluster running version 1.23 or later.- For Autopilot clusters, [enroll in a release channel](/kubernetes-engine/docs/concepts/release-channels#enrolling_a_cluster_in_a_release_channel) in which the default version is 1.23 or later.\n- For Standard clusters, enroll in a release channel or [upgradethe cluster to a specific version](/kubernetes-engine/docs/how-to/upgrading-a-cluster) .\n## Requirements\nThe `PodSecurity` admission controller is available and enabled by default on clusters running the following GKE versions:\n- Version 1.25 or later: Stable\n- Version 1.23 and version 1.24: Beta\nTo check whether a GKE version is available and is the default version for your release channel, refer to the [Release schedule](/kubernetes-engine/docs/release-schedule) .\n## Apply Pod Security Standards using PodSecurity\nTo use the `PodSecurity` admission controller, you must apply specific Pod Security Standards in specific modes to specific namespaces. You can do this by using namespace labels. In this exercise, you do the following:\n- Create two new namespaces\n- Apply security policies to each namespace\n- Test the configured policies\nIn the following GKE versions, GKE ignores policies that you apply to the `kube-system` namespace:\n- 1.23.6-gke.1900 and later\n- 1.24.0-gke.1200 and later\nIn earlier GKE versions, avoid enforcing policies in `kube-system` .\n### Create new namespaces\nCreate namespaces in your cluster:\n```\nkubectl create ns baseline-nskubectl create ns restricted-ns\n```\nThis command creates the following namespaces:\n- `baseline-ns`: For permissive workloads\n- `restricted-ns`: For highly restricted workloads\n### Use labels to apply security policies\nApply the following Pod Security Standards:\n- `baseline`: Apply to`baseline-ns`in the`warn`mode\n- `restricted`: Apply to`restricted-ns`in the`enforce`mode\n```\nkubectl label --overwrite ns baseline-ns pod-security.kubernetes.io/warn=baselinekubectl label --overwrite ns restricted-ns pod-security.kubernetes.io/enforce=restricted\n```\nThese commands achieve the following result:\n- Workloads in the`baseline-ns`namespace that violate the`baseline`policy are allowed, and the client displays a warning message.\n- Workloads in the`restricted-ns`namespace that violate the`restricted`policy are rejected, and GKE adds an entry to the audit logs.\nVerify that the labels were added:\n```\nkubectl get ns --show-labels\n```\nThe output is similar to the following:\n```\nbaseline-ns  Active 74s kubernetes.io/metadata.name=baseline-ns,pod-security.kubernetes.io/warn=baseline\nrestricted-ns  Active 18s kubernetes.io/metadata.name=restricted-ns,pod-security.kubernetes.io/enforce=restricted\ndefault   Active 57m kubernetes.io/metadata.name=default\nkube-public  Active 57m kubernetes.io/metadata.name=kube-public\nkube-system  Active 57m kubernetes.io/metadata.name=kube-system\n```\n### Test the configured policies\nTo verify that the `PodSecurity` admission controller works as intended, deploy a workload that violates the `baseline` and the `restricted` policy to both namespaces. The following example manifest deploys an `nginx` container that allows privilege escalation.\n- Save the following manifest as `psa-workload.yaml` :```\napiVersion: v1kind: Podmetadata:\u00a0 name: nginx\u00a0 labels:\u00a0 \u00a0 app: nginxspec:\u00a0 containers:\u00a0 - name: nginx\u00a0 \u00a0 image: nginx\u00a0 \u00a0 securityContext:\u00a0 \u00a0 \u00a0 privileged: true\n```\n- Apply the manifest to the `baseline-ns` namespace:```\nkubectl apply -f psa-workload.yaml --namespace=baseline-ns\n```The output is similar to the following:```\nWarning: would violate PodSecurity \"baseline:latest\": privileged (container \"nginx\" must not set securityContext.privileged=true)\n```The `baseline` policy allows the Pod to deploy in the namespace.\n- Verify that the Pod deployed successfully:```\nkubectl get pods --namespace=baseline-ns -l=app=nginx\n```\n- Apply the manifest to the `restricted-ns` namespace:```\nkubectl apply -f psa-workload.yaml --namespace=restricted-ns\n```The output is similar to the following:```\nError from server (Forbidden): error when creating \"workload.yaml\": pods \"nginx\"\nis forbidden: violates PodSecurity \"restricted:latest\": allowPrivilegeEscalation\n!= false (container \"nginx\" must set securityContext.allowPrivilegeEscalation=false),\nunrestricted capabilities (container \"nginx\" must set securityContext.capabilities.drop=[\"ALL\"]),\nrunAsNonRoot != true (pod or container \"nginx\" must set securityContext.runAsNonRoot=true),\nseccompProfile (pod or container \"nginx\" must set securityContext.seccompProfile.type\nto \"RuntimeDefault\" or \"Localhost\")\n```The Pod won't deploy in the namespace. An audit entry is added to the log.\n### View policy violations in the audit logs\nPolicy violations in the `audit` and `enforce` modes are recorded in the audit logs for your cluster. You can view these logs using the Logs Explorer in the Google Cloud console.\n- Go to the **Logs Explorer** page in the Google Cloud console. [Go to Logs Explorer](https://console.cloud.google.com/logs/query) \n- In the **Query** field, specify the following to retrieve `audit` and `enforce` mode audit logs:```\nresource.type=\"k8s_cluster\"\nprotoPayload.resourceName:\"/pods/nginx\"\nprotoPayload.methodName=\"io.k8s.core.v1.pods.create\"\n(labels.\"pod-security.kubernetes.io/audit-violations\":\"PodSecurity\" OR protoPayload.response.reason=\"Forbidden\")\n```\n- Click **Run query** .\n- In the **Query results** section, expand the `Forbidden` log entry for inspecting `enforce` mode rejection logs. The details are similar to the following:```\n{\n ...\n protoPayload: {\n @type: \"type.googleapis.com/google.cloud.audit.AuditLog\"\n authenticationInfo: {1}\n authorizationInfo: [1]\n methodName: \"io.k8s.core.v1.pods.create\"\n request: {6}\n requestMetadata: {2}\n resourceName: \"core/v1/namespaces/restricted-ns/pods/nginx\"\n response: {\n  @type: \"core.k8s.io/v1.Status\"\n  apiVersion: \"v1\"\n  code: 403\n  details: {2}\n  kind: \"Status\"\n  message: \"pods \"nginx\" is forbidden: violates PodSecurity \"restricted:latest\": privileged\n    (container \"nginx\" must not set securityContext.privileged=true),\n    allowPrivilegeEscalation != false (container \"nginx\" must set\n    securityContext.allowPrivilegeEscalation=false), unrestricted capabilities\n    (container \"nginx\" must set securityContext.capabilities.drop=[\"ALL\"]),\n    runAsNonRoot != true (pod or container \"nginx\" must set securityContext.runAsNonRoot=true),\n    seccompProfile (pod or container \"nginx\" must set securityContext.seccompProfile.type\n    to \"RuntimeDefault\" or \"Localhost\")\"\n  metadata: {0}\n  reason: \"Forbidden\"\n  status: \"Failure\"\n  }\n  serviceName: \"k8s.io\"\n  status: {2}\n }\n receiveTimestamp: \"2022-02-01T19:19:25.353235326Z\"\n resource: {2}\n timestamp: \"2022-02-01T19:19:21.469360Z\"\n}\n```\n- Expand the `audit-violations` log entry for inspecting `audit` mode logs. The details are similar to the following:```\n{\n ...\n labels: {\n ...\n pod-security.kubernetes.io/audit-violations: \"would violate PodSecurity \"baseline:latest\": privileged\n            (container \"nginx\" must not set securityContext.privileged=true)\"\n pod-security.kubernetes.io/enforce-policy: \"privileged:latest\"\n }\n operation: {4}\n protoPayload: {10}\n receiveTimestamp: \"2023-12-26T05:18:04.533631468Z\"\n resource: {2}\n timestamp: \"2023-12-26T05:17:36.102387Z\"\n}\n```## Clean up\nTo avoid incurring charges to your Google Cloud account, delete the namespaces:\n```\nkubectl delete ns baseline-nskubectl delete ns restricted-ns\n```\n## Alternatives to PodSecurity\nIn addition to using the built-in Kubernetes `PodSecurity` admission controller to apply Pod Security Standards, you can also use [Gatekeeper](/kubernetes-engine/docs/how-to/pod-security-policies-with-gatekeeper) , an admission controller based on the [Open Policy Agent (OPA)](https://www.openpolicyagent.org/) , to create and apply custom Pod-level security controls.\n## What's next\n- [Learn more about Pod Security Standards](https://kubernetes.io/docs/concepts/security/pod-security-standards/) .\n- [Learn more about the PodSecurity admission controller](https://kubernetes.io/docs/concepts/security/pod-security-admission/) .\n- [Migrate from PodSecurityPolicy to the PodSecurity admission controller](/kubernetes-engine/docs/how-to/migrate-podsecuritypolicy) .", "guide": "Google Kubernetes Engine (GKE)"}