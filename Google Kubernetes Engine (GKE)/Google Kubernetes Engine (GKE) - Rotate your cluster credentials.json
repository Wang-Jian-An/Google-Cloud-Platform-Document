{"title": "Google Kubernetes Engine (GKE) - Rotate your cluster credentials", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/credential-rotation", "abstract": "# Google Kubernetes Engine (GKE) - Rotate your cluster credentials\nThis page explains how to perform a credential rotation in Google Kubernetes Engine (GKE) clusters.\n", "content": "## About credential rotations in GKE\nThe cluster root Certificate Authority (CA) has a limited lifetime. When the CA expires, any credentials that were signed by the CA are no longer valid, including the cluster client certificate (from the `MasterAuth` API field), the key and certificate for the API server, and the kubelet client certificates. For details, see [Cluster root CA lifetime](#check_credential_lifetime) .\nYou can perform a to revoke and issue new credentials for your cluster. This operation rotates the cluster CA private key and requires re-creation of nodes to use new credentials. You must [start and finish a credential rotation](#performing_a_credential_rotation) for your cluster **before** your current credentials expire. In addition to rotating credentials, credential rotation also performs an [IP rotation](/kubernetes-engine/docs/how-to/ip-rotation) .\n### When to perform a credential rotation\n**Key Point:** Plan for and perform credential rotations well in advance of your cluster root CA expiring. Your cluster enters the `DEGRADED` state seven days before the current credentials expire. This is your last opportunity to rotate your credentials before your cluster and workloads become unrecoverable.\nYou should perform credential rotations regularly and in advance of your current credential expiry date. Credential rotations require node re-creation to use the new credentials, which might be disruptive to running workloads. Plan maintenance periods and perform the rotations during [maintenance windows](/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions#maintenance_windows) to avoid unexpected workload downtime or unresponsive API clients outside the cluster.\nIf your cluster's credentials will expire in the next 180 days, or your cluster's credentials have already expired, GKE delivers guidance with an insight and recommendation to explain that you must perform a credential rotation for this cluster. This guidance includes the date of the expiration of the credentials. You can view this guidance in the Google Cloud console. Or, you can [view thisguidance](/kubernetes-engine/docs/how-to/optimize-with-recommenders#view-insights-recs) with the gcloud CLI, or the Recommender API, specifying the `CLUSTER_CA_EXPIRATION` subtype.\nIf you receive an insight and recommendation for a cluster, you must [perform acredential rotation](#performing_a_credential_rotation) , or GKE automatically starts a credential rotation within 30 days of the current CA expiry date, as explained in the next section.\nTo prevent your cluster from entering an unrecoverable state if your current credentials expire, GKE automatically starts a credential rotation within 30 days of your current CA expiry date. For example, if your cluster CA expires on January 6, 2024 and you don't rotate your credentials by December 5, 2023, GKE starts an automatic rotation on or after December 7, 2023, and completes this rotation seven days after the operation starts. This automatic rotation is a last-resort attempt to prevent a cluster outage, and has the following considerations:\n- Automatic rotations ignore any configured maintenance windows or maintenance exclusions\n- When the credential rotation completes, the expiring credentials are revoked. Kubernetes API clients outside the cluster, like kubectl in local environments, won't work until you configure the clients to use the new credentials\n- Node pool re-creations during the rotation might cause disruptions to running workloads\nGKE-initiated automatic rotations are a **last-resort outageprevention measure** . Don't rely only on these automatic rotations\u2014they're a preventative emergency measure to avoid complete outages.\n## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.## Check credential lifetime\nWe recommend that you check your credential lifetime before and after you perform a credential rotation so that you know the validity of your cluster root CA.\nTo check the credential lifetime for a single cluster, run the following command:\n```\ngcloud container clusters describe CLUSTER_NAME \\\u00a0 \u00a0 --region REGION_NAME \\\u00a0 \u00a0 --format \"value(masterAuth.clusterCaCertificate)\" \\\u00a0 \u00a0 | base64 --decode \\\u00a0 \u00a0 | openssl x509 -noout -dates\n```\nThe output is similar to the following:\n```\nnotBefore=Mar 17 16:45:34 2023 GMT\nnotAfter=Mar 9 17:45:34 2053 GMT\n```\nTo check the credential lifetime for all clusters in a project, run the following command:\n```\ngcloud container clusters list --project PROJECT_ID \\\u00a0 \u00a0 | awk 'NR>1 {print \"echo; echo Validity for cluster \" $1 \" in location \" $2 \":;\\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0gcloud container clusters describe --project PROJECT_ID \" $1 \" --location \" $2 \" \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0--format \\\"value(masterAuth.clusterCaCertificate)\\\" \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0| base64 --decode | openssl x509 -noout -dates\"}' \\\u00a0 \u00a0 | bash\n```\n## Perform a credential rotation\nCredential rotation involves the following steps:\n- **Start the rotation** : the control plane starts serving on a new IP address in addition to the original IP address. New credentials are issued to workloads and the control plane.\n- **Recreate nodes** : GKE recreates cluster nodes so that the nodes use the new IP address and credentials, respecting availability from maintenance windows and exclusions.\n- **Update API clients** : after starting the rotation, update any cluster API clients, such as development machines using`kubectl`, to communicate with the control plane using the new IP address.\n- **Complete the rotation** : the control plane stops serving traffic over the original IP address. Old credentials are revoked, including any existing static credentials for Kubernetes ServiceAccounts.\n**Note:** If you start a credential rotation, but don't complete it, GKE automatically completes the rotation after seven days.\n### Start the rotation\nTo start a credential rotation, run the following command:\n```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --region REGION_NAME \\\u00a0 \u00a0 --start-credential-rotation\n```\nThis command creates new credentials, issues these credentials to the control plane, and configures the control plane to serve on two IP addresses: the original IP address and a new IP address.\n**Caution:** This command causes brief downtime for the cluster API server.\n### Recreate nodes\nAfter reconfiguring the API server to serve on a new IP address, GKE automatically updates your nodes to use the new IP address and credentials if there is maintenance availability. GKE upgrades all of your nodes to the same GKE version that the nodes already run, which recreates the nodes. For more information, refer to [Nodepoolupgrades](/kubernetes-engine/docs/concepts/cluster-upgrades#node_pool_upgrades) .\nBy default, GKE automatically completes credential rotations seven days after you start the operation. If an active maintenance window or exclusion in your cluster prevents GKE from recreating some nodes during this seven day period, the credential rotation fails to complete.\n- If you use maintenance exclusions or maintenance windows that could result in a failed rotation, manually upgrade your cluster to force node recreation:```\ngcloud container clusters upgrade CLUSTER_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --cluster-version=VERSION\n```Replace `` with the GKE version that the cluster already uses.For more information, see [caveats for maintenance windows](/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions#caveats) .- To monitor the rotation operation, run the following command:```\ngcloud container operations list \\\u00a0 \u00a0 --filter=\"operationType=UPGRADE_NODES AND status=RUNNING\" \\\u00a0 \u00a0 --format=\"value(name)\"\n```This command returns the of the node upgrade operation.\n- To poll the operation, pass the operation ID to the following command:```\ngcloud container operations wait OPERATION_ID\n```\nNode pools are recreated one-by-one, and each has its own operation. If you have multiple node pools, use these instructions to poll each operation.\n### Update API clients\nAfter starting the credential rotation, you must update all API clients outside the cluster (such as `kubectl` on developer machines) to use the new credentials and point to the new IP address of the control plane.\nTo update your API clients, run the following command for each client:\n```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --region REGION_NAME\n```\n**Note:** If you are using the Kubernetes Certificates API, you also must [issue new certificates](https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/) .\n### Update Kubernetes ServiceAccount credentials\nIf you use static credentials for ServiceAccounts in your cluster, switch to [short-lived credentials](/kubernetes-engine/docs/how-to/kubernetes-service-accounts#best_practices_for_managing_service_accounts) . Completing the rotation invalidates existing ServiceAccount credentials. If you don't want to use short-lived credentials, ensure that you recreate your static credentials for all ServiceAccounts in the cluster after you complete the rotation.\n### Complete the rotation\nAfter updating API clients outside the cluster, complete the rotation to configure the control plane to serve only with the new credentials and the new IP address:\n```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --region=REGION_NAME \\\u00a0 \u00a0 --complete-credential-rotation\n```\n**Caution:** This task might cause a brief downtime for the cluster's API server, especially in zonal clusters.\nIf the credential rotation fails to complete and returns an error message similar to the following, refer to [troubleshooting](/kubernetes-engine/docs/troubleshooting#credential-rotation-node-recreate) :\n```\nERROR: (gcloud.container.clusters.update) ResponseError: code=400, message=Node pool \"test-pool-1\" requires recreation.\n```\n## What's next\n- [Learn about Protecting cluster metadata](/kubernetes-engine/docs/how-to/protecting-cluster-metadata) .\n- [Learn about the Kubernetes Secret object](https://kubernetes.io/docs/concepts/configuration/secret/) .\n- [Learn about rotating your IP address](/kubernetes-engine/docs/how-to/ip-rotation) .", "guide": "Google Kubernetes Engine (GKE)"}