{"title": "Google Kubernetes Engine (GKE) - Create a backend service-based external load balancer", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/external-svc-lb-rbs", "abstract": "# Google Kubernetes Engine (GKE) - Create a backend service-based external load balancer\nThis page shows you how to deploy an external LoadBalancer Service that builds a backend service-based external passthrough Network Load Balancer. Before reading this page, you should be familiar with the following concepts:\n- [LoadBalancer Service](/kubernetes-engine/docs/concepts/service-load-balancer) .\n- [Backend service-based external passthrough Network Load Balancer](/load-balancing/docs/network/networklb-backend-service) .", "content": "## Backend service-based external passthrough Network Load Balancer\nAs a cluster administrator, you can create an external LoadBalancer Service so that clients outside the cluster can send packets to the Service's Pods. The following diagram illustrates two backend service-based external passthrough Network Load Balancers created for two external LoadBalancer Services ( `store-v1-lb-svc` and `store-v2-lb-svc` ). Both load balancers distribute packets to the nodes in the cluster, and the nodes route packets to serving Pods.\nThis guide shows you how to set up an external LoadBalancer Service named `store-v1-lb-svc` with the following steps:\n- Create a cluster with the`HttpLoadBalancing`add-on enabled.\n- Create a Service that includes the`cloud.google.com/l4-rbs`annotation. This annotation instructs GKE to create a backend service-based external passthrough Network Load Balancer that uses a regional backend service.\n- Verify that the load balancer successfully delivers packets to the `store-v1-lb-svc` Service's Pods. Also verify that GKE created the components of the backend service-based external passthrough Network Load Balancer:- Forwarding rule\n- Regional backend service\n- Instance group\n- Health check\n- VPC firewall rules\n- Delete the `store-v1-lb-svc` external LoadBalancer Service.## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.## Set up your cluster\n### Create a cluster\nUse the gcloud CLI to create a new cluster that supports the creation of backend service-based external passthrough Network Load Balancers:\n```\ngcloud container clusters create-auto CLUSTER_NAME \\\u00a0 \u00a0 --release-channel=RELEASE_CHANNEL \\\u00a0 \u00a0 --cluster-version=VERSION \\\u00a0 \u00a0 --location=COMPUTE_LOCATION\n```\nReplace the following:\n- ``: the name of the new cluster.\n- ``: the name of the GKE [release channel](/kubernetes-engine/docs/concepts/release-channels) for the cluster.\n- ``: the GKE version for the cluster, which must be 1.24.9 or later.\n- ``: the [Compute Engine region](/compute/docs/regions-zones#available) of the cluster.\nYour new cluster has the `HttpLoadBalancing` add-on enabled by default. This add-on is required so that the control plane can create and manage backend service-based external passthrough Network Load Balancers.\n### Upgrade an existing cluster\nUse the gcloud CLI to update an existing cluster so that it can support the creation of backend service-based external passthrough Network Load Balancers.\n- Upgrade your control plane to GKE version 1.24.9 or later:```\ngcloud container clusters upgrade CLUSTER_NAME \\\u00a0 \u00a0 --cluster-version=VERSION \\\u00a0 \u00a0 --master \\\u00a0 \u00a0 --location=COMPUTE_LOCATION\n```Replace the following:- ``: the name of your cluster.\n- ``: the GKE version, which must be 1.24.9 or later. The version must be a valid minor version in your cluster's release channel. For more information, refer to [Manually upgrading the control plane](/kubernetes-engine/docs/how-to/upgrading-a-cluster#upgrade_cp) .\n- ``: the [Compute Engine location](/compute/docs/regions-zones/viewing-regions-zones) for the new cluster.\n## Create the external LoadBalancer Service\n- Save the following sample Deployment as `store-deployment.yaml` :```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: storespec:\u00a0 replicas: 2\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: store\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: store\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - image: gcr.io/google_containers/echoserver:1.10\u00a0 \u00a0 \u00a0 \u00a0 imagePullPolicy: Always\u00a0 \u00a0 \u00a0 \u00a0 name: echoserver\u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 containerPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 readinessProbe:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 httpGet:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 path: /healthz\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 8080\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 scheme: HTTP\n```\n- Apply the manifest to the cluster:```\nkubectl apply -f store-deployment.yaml\n```\n- Verify that there are two serving Pods for the Deployment:```\nkubectl get pods\n```The output is similar to the following:```\nNAME      READY STATUS RESTARTS AGE\nstore-cdb9bb4d6-s25vw  1/1  Running 0   10s\nstore-cdb9bb4d6-vck6s  1/1  Running 0   10s\n```\n- Save the following Service manifest as `store-v1-lb-svc.yaml` :```\napiVersion: v1kind: Servicemetadata:\u00a0 name: store-v1-lb-svc\u00a0 annotations:\u00a0 \u00a0 cloud.google.com/l4-rbs: \"enabled\"spec:\u00a0 type: LoadBalancer\u00a0 externalTrafficPolicy: Cluster\u00a0 selector:\u00a0 \u00a0 app: store\u00a0 ports:\u00a0 - name: tcp-port\u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 port: 8080\u00a0 \u00a0 targetPort: 8080\n```This external LoadBalancer Service uses the default `externalTrafficPolicy` of `Cluster` . For details about how the `externalTrafficPolicy` defines node grouping, which nodes pass their load balancer health checks, and packet processing, see [LoadBalancer Service concepts](/kubernetes-engine/docs/concepts/service-load-balancer) .If you are using a [IPv4/IPv6 dual-stack cluster](/kubernetes-engine/docs/how-to/alias-ips#dual-stack) , add the `spec.ipFamilyPolicy` and `ipFamilies` to define how GKE allocates IP addresses to the Service. Consider the following conditions when using the `ipFamilyPolicy` and `ipFamilies` specs:- When you create a backend service-based external passthrough Network Load Balancer, GKE automatically adds the`cloud.google.com/l4-rbs`annotation to new Services created on IPv4/IPv6 dual-stack clusters. However, if you add the`cloud.google.com/l4-rbs: \"enabled\"`annotation toService manifests, LoadBalancer Services that already exist in the cluster keep using target-pool based external passthrough Network Load Balancers, which are IPv4 only. For additional information, see [Nodegrouping](/kubernetes-engine/docs/concepts/service-load-balancer#endpoint-grouping) .\n- GKE can allocate either single-stack (IPv4 only or IPv6 only), or dual-stack LoadBalancer Services. A dual-stack LoadBalancer Service is implemented with two separate external passthrough Network Load Balancer forwarding rules: one to handle TCP traffic over IPv4 and another to handle TCP traffic over IPv6. For more information, see [Services](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services) .\n- Apply the manifest to the cluster:```\nkubectl apply -f store-v1-lb-svc.yaml\n```\n- Verify that your Service is running:```\nkubectl get svc store-v1-lb-svc\n```The output is similar to the following:```\nNAME    TYPE   CLUSTER-IP  EXTERNAL-IP  PORT(S)   AGE\nstore-v1-lb-svc LoadBalancer 10.44.196.160  35.193.28.231 8080:32466/TCP 11m\n```GKE assigned an `` for the external passthrough Network Load Balancer. **Note:** It might take a few minutes for GKE to allocate an external IP address before the load balancer is ready to serve your application.\n- Test connecting to the load balancer:```\ncurl EXTERNAL_IP:PORT\n```Replace the following:- ``: the allocated IP address for the external passthrough Network Load Balancer.\n- ``: the allocated port number for the external passthrough Network Load Balancer.\nThe output is similar to the following:```\nHostname: store-v1-lb-svc-cdb9bb4d6-hflxd\nPod Information:\n -no pod information available\nServer values:\n server_version=nginx: 1.13.3 - lua: 10008\nRequest Information:\n client_address=10.128.0.50\n method=GET\n real path=/\n query=\n request_version=1.1\n request_scheme=http\n request_uri=EXTERNAL_IP\nRequest Headers:\n accept=*/*\n host=EXTERNAL_IP\n user-agent=curl/7.81.0\nRequest Body:\n -no body in request\n```## Verify the external LoadBalancer Service and its components\n- Check your LoadBalancer Service and its set of annotations describing its Google Cloud resources:```\nkubectl describe svc store-v1-lb-svc\n```The output is similar to the following:```\nName:      store-v1-lb-svc\nNamespace:    default\nLabels:     <none>\nAnnotations:    cloud.google.com/l4-rbs: enabled\n       service.kubernetes.io/backend-service: k8s2-c086604n-default-store-v1-lb-svc-aip4ty1x\n       service.kubernetes.io/firewall-rule: k8s2-c086604n-default-store-v1-lb-svc-aip4ty1x\n       service.kubernetes.io/firewall-rule-for-hc: k8s2-c086604n-l4-shared-hc-fw\n       service.kubernetes.io/healthcheck: k8s2-c086604n-l4-shared-hc\n       service.kubernetes.io/tcp-forwarding-rule: a683373f85bfe433ba929a50ca8d72e2\nSelector:     app=store\nType:      LoadBalancer\nIP Family Policy:   SingleStack\nIP Families:    IPv4\nIP:      10.44.196.160\nIPs:      10.44.196.160\nLoadBalancer Ingress:  35.193.28.231\nPort:      tcp-port 8080/TCP\nTargetPort:    8080/TCP\nNodePort:     tcp-port 32466/TCP\nEndpoints:    10.48.0.5:8080,10.48.2.8:8080\nSession Affinity:   None\nExternal Traffic Policy: Cluster\nEvents:\n Type Reason    Age     From      Message\n ---- ------    ----     ----      ------ Normal ADD     2m42s     loadbalancer-controller default/store-v1-lb-svc\n Normal EnsuringLoadBalancer 102s (x2 over 2m42s) service-controller  Ensuring load balancer\n Normal Annotations   102s     loadbalancer-controller map[cloud.google.com/l4-rbs:enabled kubectl.kubernetes.io/last-applied-configuration:{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":\n{\"cloud.google.com/l4-rbs\":\"enabled\"},\"name\":\"store-v1-lb-svc\",\"namespace\":\"default\"}\n,\"spec\":{\"externalTrafficPolicy\":\"Cluster\",\"ports\":\n[{\"name\":\"tcp-port\",\"port\":8080,\"protocol\":\"TCP\",\"targetPort\":8080}],\n\"selector\":{\"app\":\"store\"},\"type\":\"LoadBalancer\"}}\n] -> map[cloud.google.com/l4-rbs:enabled\nkubectl.kubernetes.io/last-applied-configuration:{\"apiVersion\":\"v1\",\"kind\":\n\"Service\",\"metadata\":{\"annotations\":{\"cloud.google.com/l4-rbs\":\"enabled\"},\n\"name\":\"store-v1-lb-svc\",\"namespace\":\"default\"},\"spec\":{\"externalTrafficPolicy\"\n:\"Cluster\",\"ports\":[{\"name\":\"tcp-port\",\"port\":8080,\"protocol\":\"TCP\",\"targetPort\"\n:8080}],\"selector\":{\"app\":\"store\"},\"type\":\"LoadBalancer\"}}\nservice.kubernetes.io/backend-service:k8s2-c086604n-default-store-v1-lb-svc-aip4ty1x\nservice.kubernetes.io/firewall-rule:k8s2-c086604n-default-store-v1-lb-svc-aip4ty1x\nservice.kubernetes.io/firewall-rule-for-hc:k8s2-c086604n-l4-shared-hc-fw\nservice.kubernetes.io/healthcheck:k8s2-c086604n-l4-shared-hc\nservice.kubernetes.io/tcp-forwarding-rule:a683373f85bfe433ba929a50ca8d72e2]\nNormal SyncLoadBalancerSuccessful 16s (x3 over 102s) loadbalancer-controller Successfully ensured L4 External LoadBalancer resources\n```There are several fields that indicate that a backend service-based external passthrough Network Load Balancer and its Google Cloud resources were successfully created:- `Events`field. This field is empty when the LoadBalancer Service and its resources were created successfully. If an error has occurred, it is listed here.\n- List of `Annotations` enabled: GKE adds the following list of read-only annotations to the Service manifest. Each annotation whose name begins with `service.kubernetes.io/` is used to indicate the name of a Google Cloud resource created as part of or to support the load balancer.\n- The `service.kubernetes.io/backend-service` annotation indicates the name of the load balancer's backend service.\n- The `service.kubernetes.io/healthcheck` annotation indicates the name of the load balancer health check used by the backend service.\n- The `service.kubernetes.io/tcp-forwarding-rule` or `service.kubernetes.io/udp-forwarding-rule` annotation indicates the name of the load balancer's forwarding rule.\n- The `service.kubernetes.io/firewall-rule` annotation indicates the name of the firewall rule created to permit traffic to the cluster nodes. Source ranges for this firewall rule are customizable using `spec.loadBalancerSourceRanges[]` . For additional detail about firewall rules for LoadBalancer Services, see [Firewall rules and source IP address allowlist](/kubernetes-engine/docs/concepts/service-load-balancer-parameters#fw_ip_address) .\n- The `service.kubernetes.io/firewall-rule-for-hc` annotation indicates the name of the firewall rule required for load balancer health checks.\n- Verify that load balancer resources and firewall rules have been created for the external LoadBalancer Service:\n- To see the forwarding rule, run the following command:```\n\u00a0 gcloud compute forwarding-rules describe FWD_RULE_NAME \\\u00a0 \u00a0 --region=REGION_NAME\n```Replace the following:- ``: the forwarding rule name provided by either the`service.kubernetes.io/tcp-forwarding-rule`or`service.kubernetes.io/udp-forwarding-rule`read-only annotations. To check these annotations, run`kubectl describe svc SERVICE_NAME`.\n- ``: the Google Cloud region containing the cluster. For zonal clusters, the region contains the zone used by the cluster.\n- To see the backend service, run the following command:```\ngcloud compute backend-services describe BACKEND_SERVICE_NAME \\\u00a0 --region=REGION_NAME\n```Replace the following:- ``: the name of the backend service provided by the`service.kubernetes.io/backend-service`read-only annotation. To check this read-only annotation, run`kubectl describe svc SERVICE_NAME`.\n- ``: he Google Cloud region containing the cluster. For zonal clusters, the region contains the zone used by the cluster.\n- To see the load balancer health check, run the following command:```\ngcloud compute health-checks describe HEALTH_CHECK_NAME \\\u00a0 --region=REGION_NAME\n```Replace the following:- ``: the load balancer's health check name. The name of the health check is provided by the`service.kubernetes.io/healthcheck`read-only annotation. To check this read-only annotation, run`kubectl describe svc SERVICE_NAME`.\n- ``: the Google Cloud region containing the cluster. For zonal clusters, the region contains the zone used by the cluster.\n- To see the firewall rules, run the following commands:```\ngcloud compute firewall-rules describe FIREWALL_RULE_NAME \\gcloud compute firewall-rules describe HEALTH_CHECK_FIREWALL_RULE_NAME\n```Replace the following:- ``: the name of the firewall rule that permits traffic to the load balancer. The name of this firewall rule is provided by the`service.kubernetes.io/firewall-rule`read-only annotation. To check this read-only annotation, run`kubectl describe svc SERVICE_NAME`.\n- ``: the name of the firewall rule that permits health checks of the load balancer's backends (the cluster's nodes). The name of this firewall rule is provided by the`service.kubernetes.io/firewall-rule-for-hc`read-only annotation. To check this read-only annotation, run`kubectl describe svc SERVICE_NAME`.\n## Delete the external LoadBalancer Service and its components\nDelete the `store-v1-lb-svc` external LoadBalancer Service.\n```\nkubectl delete service store-v1-lb-svc\n```\nGKE deletes the following resources:\n- The load balancer's forwarding rule.\n- The load balancer's backend service.\n- The load balancer's health check.\n- The VPC firewall rules necessary for the load balancer and its health check traffic.\n- The zonal unmanaged instance group backends, only if GKE does not need to use them as backends for other load balancers created by the cluster.\n**Important:** Removing the `cloud.google.com/l4-rbs: \"enabled\"` annotation does not cause GKE to convert an existing backend service-based external passthrough Network Load Balancer into a target pool-based external passthrough Network Load Balancer. To switch to a target pool-based external passthrough Network Load Balancer, you must delete and replace the Service manifest.\n## What's next\n- For a general overview of Load Balancer Services, see [LoadBalancer Services](/kubernetes-engine/docs/concepts/service-load-balancer) .\n- For a description of Load Balancer Services parameters, see [LoadBalancer Service parameters](/kubernetes-engine/docs/concepts/service-load-balancer-parameters) .", "guide": "Google Kubernetes Engine (GKE)"}