{"title": "Google Kubernetes Engine (GKE) - Deploy an app using GKE Autopilot and Spanner", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/gke-spanner-integration", "abstract": "# Google Kubernetes Engine (GKE) - Deploy an app using GKE Autopilot and Spanner\nThis tutorial describes how to deploy a containerized web application to a Google Kubernetes Engine (GKE) Autopilot cluster, and use a Google Spanner database in the backend to store data. The sample application manages a table of game players. You can add and delete players through the app's graphical user interface (GUI).\n [Spanner](https://cloud.google.com/spanner) is a fully managed, horizontally scalable, globally distributed, relational database service that provides ACID transactions and SQL semantics without compromising on performance and high availability.\nThis tutorial assumes that you have basic understanding of [Kubernetes](https://kubernetes.io) .", "content": "## Why GKE and SpannerAs a developer, you might not want to spend time figuring out the amount of storage and compute resources your application needs, or predicting RAM and CPU consumption during periods of fluctuating demands, or worrying about application failure at peak load.\nBy using GKE Autopilot as a fully managed Kubernetes service, and Spanner as a fully managed database service, you can develop and deploy apps faster on a stable infrastructure that simplifies configuring and managing resources. GKE Autopilot handles configuring and scaling the infrastructure for hosting your app by adding or removing nodes to or from the cluster, based on the requirements at runtime. Similarly, Spanner can dynamically scale out and in with minimal manual intervention, as storage or compute requirements change.\nFor example, consider you are launching the next blockbuster game which you expect to go viral, and therefore attract heavy web traffic during its launch week. Spanner can help you accommodate this surging throughput by providing the ability to instantly increase, decrease, or reallocate compute resources while still maintaining maximum application availability with GKE Autopilot.## ObjectivesIn this tutorial, you learn how to:- Create a Spanner database that stores a registry of players.\n- Deploy a sample web app called `hello-app-cloud-spanner` , with a graphical user interface.\nThe following table describes the Google Cloud resources you create or use, the variables they are identified with, and the values prescribed for them for the purpose of this tutorial:\n| Resource        | Variable  | Value                                                     |\n|:--------------------------------------|:---------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Google Cloud project ID    | PROJECT_ID  | The Project ID generated when you create a project. Example: my-gcp-project                                   |\n| Compute region      | COMPUTE_REGION | The Compute Engine region where you want to create the Spanner instance and GKE cluster. We recommend that you choose a region closest to your customers' geographical location, but for this tutorial, use us-west1. |\n| Spanner instance      | -    | hello-instance                                                  |\n| Spanner database      | -    | hello-database                                                  |\n| GKE Autopilot cluster     | CLUSTER_NAME | hello-cluster                                                   |\n| Kubernetes namespace     | NAMESPACE  | hello-namespace                                                  |\n| Kubernetes service account   | KSA_NAME  | ksa-helloapp                                                   |\n| IAM service account     | GSA_NAME  | gsa-helloapp                                                   |\n| Project ID of the IAM service account | GSA_PROJECT | Your Google Cloud PROJECT_ID.                                               |\nFor the purpose of this tutorial, we recommend creating new resources, which makes [deleting them](#cleanup) easy and risk free after you have deployed the sample app. However, if you have any existing namespaces, IAM service accounts, and Kubernetes service accounts, you can use them.## CostsIn this document, you use the following billable components of Google Cloud:- [Compute Engine](/compute/disks-image-pricing) instances used by GKE\n- [Spanner](/spanner/pricing) \n- [Cloud Load Balancing](/vpc/network-pricing#lb) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you beginMake sure to complete the following prerequisites:\n### Select or create a projectYou can use an existing project, or create a new one for this tutorial.\n### Enable the APIsEnable the Artifact Registry, Compute Engine, GKE, and IAM Service Account Credentials APIs.\n [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=artifactregistry.googleapis.com,compute.googleapis.com,container.googleapis.com,iamcredentials.googleapis.com) \n### Set up Cloud ShellIn this tutorial, you use [Cloud Shell](/shell/docs) to run `gcloud` and `kubectl` commands. Cloud Shell is a shell environment for managing resources hosted on Google Cloud. It comes preinstalled with the [Google Cloud CLI](/sdk/gcloud) and [kubectl](https://kubernetes.io/docs/reference/kubectl/) command-line tool.\nIn the Google Cloud console, activate Cloud Shell.\n [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \nA Cloud Shell session opens inside a frame lower on the console.\nBefore you run commands in this tutorial, make sure that your default project is set to the project ID where you want to deploy the sample app. If it's not already set, run the following command in the Cloud Shell:\n```\ngcloud config set project PROJECT_ID\n```\nReplace `` with your [project ID](#select-project) .\n### Grant IAM rolesEnsure that your Google Cloud account has the required [IAM roles](https://cloud.google.com/iam/docs/understanding-roles) for this tutorial.\nGrant roles to your Google Account. Run the following command once for each of the following   IAM roles: `roles/iam.serviceAccountAdmin, roles/serviceusage.serviceUsageConsumer, roles/iam.serviceAccountUser, roles/iam.securityAdmin, roles/spanner.admin, roles/container.admin` \n```\n$ gcloud projects add-iam-policy-binding PROJECT_ID --member=\"user:EMAIL_ADDRESS\" --role=ROLE\n```- Replace``with your project ID.\n- Replace``with your email address.\n- Replace``with each individual role.\n## Configure SpannerTo configure Spanner, you need to create a Spanner instance and a Spanner database.\n### Create a Spanner instanceA Spanner instance is an allocation of resources that is used by Spanner databases created in that instance.\nCreate a Spanner instance called `hello-instance` with a regional configuration, and compute capacity of `100` processing units.\n```\ngcloud spanner instances create hello-instance \\\u00a0 \u00a0 --config=regional-COMPUTE_REGION \\\u00a0 \u00a0 --description=\"Spanner sample instance\" \\\u00a0 \u00a0 --processing-units=100\n```\nReplace `` with `us-west1` for this tutorial.\n### Create a Spanner databaseA Spanner database includes your tables, views, and indexes. A database inherits properties from its parent instance, such as its [configuration](https://cloud.google.com/spanner/docs/instance-configurations) (regional or multi-regional), available [compute capacity](https://cloud.google.com/spanner/docs/compute-capacity) , and storage.\nCreate a Spanner database called `hello-database` with a table called `Players` , by using the GoogleSQL dialect. Run the following query in your Cloud Shell:\n```\ngcloud spanner databases create hello-database \\\u00a0 \u00a0 --instance=hello-instance \\\u00a0 \u00a0 --database-dialect=GOOGLE_STANDARD_SQL \\\u00a0 \u00a0 --ddl=\"CREATE TABLE Players (\u00a0 \u00a0 \u00a0 \u00a0 PlayerUuid STRING(36) NOT NULL,\u00a0 \u00a0 \u00a0 \u00a0 FirstName STRING(1024),\u00a0 \u00a0 \u00a0 \u00a0 LastName STRING(1024),\u00a0 \u00a0 \u00a0 \u00a0 BirthDate DATE) PRIMARY KEY(PlayerUuid)\"\n```## Create a GKE Autopilot clusterAfter you've configured Spanner, create an Autopilot cluster and use [workload identity federation for GKE](https://cloud.google.com/kubernetes-engine/docs/concepts/workload-identity) to access your database in a secure and manageable way.\nCreate an Autopilot cluster named `hello-cluster` . Autopilot clusters have workload identity federation for GKE enabled by default.\n```\ngcloud container clusters create-auto CLUSTER_NAME \\\u00a0 --region=COMPUTE_REGION\n```\nReplace the following:- ``:`hello-cluster`\n- ``: the Compute Engine region of your cluster. For this tutorial, use the same region,`us-west1`, where you created the Spanner instance. We recommend that you create the Spanner instance and the GKE Autopilot cluster within the same region to reduce latency.\nIt can take up to 8-10 minutes to create the cluster.\nThe output is similar to the following:\n```\nNAME: hello-cluster\nLOCATION: us-west1\nMASTER_VERSION: 1.26.5-gke.1200\nMASTER_IP: 192.0.2.1\nMACHINE_TYPE: e2-medium\nNODE_VERSION: 1.26.5-gke.1200\nNUM_NODES: 3\nSTATUS: RUNNING\n```## Configure the cluster to use workload identity federation for GKEConfigure your cluster to authenticate to Google Cloud using workload identity federation for GKE before you deploy the app.- [Get credentials](/sdk/gcloud/reference/container/clusters/get-credentials) to access your cluster:```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 --region=COMPUTE_REGION\n```Replace the following:- ``:`hello-cluster`\n- ``:`us-west1`\nThis updates a `kubeconfig` file with appropriate credentials and endpoint information to point `kubectl` at your cluster.\n- Create a namespace to use for the Kubernetes service account. You can also use the default namespace, or any existing namespace.```\nkubectl create namespace NAMESPACE\n```Replace `` with `hello-namespace` , the name for the new namespace you are creating.\n- Create a Kubernetes service account for your application to use:```\nkubectl create serviceaccount KSA_NAME \\\u00a0 --namespace NAMESPACE\n```Replace the following:- ``:`ksa-helloapp`, the name for the new Kubernetes service account you are creating.\n- ``:`hello-namespace`\n- Create an IAM service account for your application:```\ngcloud iam service-accounts create GSA_NAME \\\u00a0 --project=GSA_PROJECT\n```Replace the following:- ``:`gsa-helloapp`, the name for the new IAM service account you are creating.\n- ``: your Google Cloud project ID. In this tutorial, you are creating the IAM service account in the same Google Cloud project where you are deploying the sample app. Hence your``and Google Cloud``are the same.\n- Add an [IAM policy binding](https://cloud.google.com/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) for your IAM service account to read and write to Spanner:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\u00a0 --member \"serviceAccount:GSA_NAME@PROJECT_ID.iam.gserviceaccount.com\" \\\u00a0 --role \"roles/spanner.admin\"\n```Replace the following:- ``: your Google Cloud project ID\n- ``:`gsa-helloapp`\nExample:```\ngcloud projects add-iam-policy-binding my-gcp-project \\\n --member \"serviceAccount:gsa-helloapp@my-gcp-project.iam.gserviceaccount.com\" \\\n --role \"roles/spanner.admin\"\n```\n- Allow the Kubernetes service account to [impersonate the IAM service account](https://cloud.google.com/iam/docs/service-account-overview#impersonation) by adding an IAM policy binding between the two service accounts. This binding allows the Kubernetes service account to act as the IAM service account, so that the Kubernetes service account can read and write to Spanner.```\ngcloud iam service-accounts add-iam-policy-binding GSA_NAME@GSA_PROJECT.iam.gserviceaccount.com \\\u00a0 --role roles/iam.workloadIdentityUser \\\u00a0 --member \"serviceAccount:PROJECT_ID.svc.id.goog[NAMESPACE/KSA_NAME]\"\n```Replace the following:- ``:`gsa-helloapp`\n- ``: your Google Cloud project ID\n- ``: your Google Cloud project ID\n- ``:`hello-namespace`\n- ``:`ksa-helloapp`\nExample:```\ngcloud iam service-accounts add-iam-policy-binding gsa-helloapp@my-gcp-project.iam.gserviceaccount.com \\\n --role roles/iam.workloadIdentityUser \\\n --member \"serviceAccount:my-gcp-project.svc.id.goog[hello-namespace/ksa-helloapp]\"\n```\n- [Annotate](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) the Kubernetes service account with the email address of the IAM service account. This lets your sample app know which service account to use to access Google Cloud services. So when the app uses any standard Google API Client Libraries to access Google Cloud services, it uses that IAM service account.```\nkubectl annotate serviceaccount KSA_NAME \\\u00a0 --namespace NAMESPACE \\\u00a0 iam.gke.io/gcp-service-account=GSA_NAME@GSA_PROJECT.iam.gserviceaccount.com\n```Replace the following:- ``:`ksa-helloapp`\n- ``:`hello-namespace`\n- ``:`gsa-helloapp`\n- ``: your Google Cloud project ID\nExample:```\nkubectl annotate serviceaccount ksa-helloapp \\\n --namespace hello-namespace \\\n iam.gke.io/gcp-service-account=gsa-helloapp@my-gcp-project.iam.gserviceaccount.com\n``` **Note:** If the IAM binding does not exist, this annotation by itself does not grant access to the Pod to impersonate the IAM service account.\n## Deploy the sample app to the clusterNow that you have set up GKE and Spanner with the necessary services and authentication, you are ready to deploy the sample app `hello-app-cloud-spanner` .- Clone the sample app from the GitHub repository to your Cloud Shell:```\ngit clone https://github.com/GoogleCloudPlatform/kubernetes-engine-samples.git\n```\n- Launch the Cloud Shell Editor by clicking **Open Editor** on the toolbar of the terminal window.For more information, see [Cloud Shell Editor interface overview](https://cloud.google.com/shell/docs/editor-overview) .\n- Open the Cloud Shell Editor's Explorer pane, and browse to the `kubernetes-engine-samples/databases/hello-app-cloud-spanner/k8s` directory.\n- Open the `deployment.yaml` file, and update the `serviceAccountName` field by replacing `<KSA_NAME>` with `ksa-helloapp` , the name of your Kubernetes service account.\n- Close the Cloud Shell Editor, and return to the Cloud Shell terminal.\n- In the Cloud Shell terminal, navigate to the `hello-app-cloud-spanner` directory:```\ncd kubernetes-engine-samples/databases/hello-app-cloud-spanner\n```\n- Deploy the application:```\nkubectl apply -f k8s/deployment.yaml -n=NAMESPACE\n```Replace `` with `hello-namespace` .\n- Wait for the application to be deployed with `STATUS` as `Running` :```\nkubectl get pods -n=NAMESPACE --watch\n```Replace `` with `hello-namespace` .The output is similar to the following:```\nNAME          READY STATUS    RESTARTS AGE\nhello-app-cloud-spanner-765c9b8779-lfcrc 0/1  ContainerCreating 0   87s\nhello-app-cloud-spanner-765c9b8779-lfcrc 1/1  Running    0   3m15s\n```\n- Press Ctrl+C on your keyboard to return to the command prompt to run further commands.\n### Expose the sample app to the internetTo expose a Kubernetes Service outside the cluster, create a Service of type [LoadBalancer](https://cloud.google.com/kubernetes-engine/docs/concepts/network-overview#ext-lb) . This type of Service generates an external load balancer IP address for your Pods, reachable through the internet.- Deploy the load balancer:```\nkubectl apply -f k8s/service.yaml -n=NAMESPACE\n```Replace `` with `hello-namespace` .\n- Watch for an external IP address to be assigned:```\nkubectl get service -n=NAMESPACE --watch\n```Replace `` with `hello-namespace` .\n- Once assigned, copy the `EXTERNAL-IP` (for example, `203.0.113.0` ) and open it in a browser. A web interface opens that displays and manages the database of players.\n- You can use the app GUI to create or delete player records, and they are saved in the Spanner database.Run the following query to verify if the Spanner database has been updated with your entries:```\ngcloud spanner databases execute-sql hello-database \\\u00a0 --instance=hello-instance \\\u00a0 --sql=\"SELECT * FROM Players LIMIT 10\"\n```The output is similar to the following:```\nPlayerUuid: a1f34bbf-929c-498d-8b16-39bbb29d70e3\nFirstName: John\nLastName: Smith\nBirthDate: 1997-07-12\nPlayerUuid: d634e157-96ea-45f2-be3f-fb907ced188e\nFirstName: Jane\nLastName: Doe\nBirthDate: 2013-07-12\n```\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\n### Delete your projectThe easiest way to avoid billing is to delete the project you created for this tutorial.\n **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\nDelete a Google Cloud project:\n```\ngcloud projects delete PROJECT_ID\n```\nIf you deleted the project, your clean up is complete. If you didn't delete the project, proceed to delete the GKE and Spanner resources.\n### Delete GKE resources\n- Delete the service. This deallocates the Google Cloud load balancer created for your Service:```\nkubectl delete service hello-app-cloud-spanner -n=NAMESPACE\n```Replace `` with `hello-namespace` .\n- Delete the GKE cluster. This deletes the resources that constitute a cluster, such as the compute instances, disks, and network resources:```\ngcloud container clusters delete CLUSTER_NAME --region=COMPUTE_REGION\n```Replace the following:- ``:`hello-cluster`\n- ``:`us-west1`\n### Delete Spanner resources\n- Delete the Spanner database:```\ngcloud spanner databases delete hello-database --instance=hello-instance\n```\n- Delete the Spanner instance: **Caution** : Deleting an instance permanently removes the instance, and all its databases.```\ngcloud spanner instances delete hello-instance\n```## What's next\n- Learn how to [create a GKE cluster for your Agones install](https://agones.dev/site/docs/installation/creating-cluster/gke/) .\n- Learn the [best practices for using Spanner as a gaming database](/spanner/docs/best-practices-gaming-database) .\n- Learn how you can [deploy a highly-available PostgreSQL database on GKE](/kubernetes-engine/docs/tutorials/stateful-workloads/postgresql) .\n- Learn the [best practices for deploying databases on GKE](/kubernetes-engine/docs/concepts/database-options) .", "guide": "Google Kubernetes Engine (GKE)"}