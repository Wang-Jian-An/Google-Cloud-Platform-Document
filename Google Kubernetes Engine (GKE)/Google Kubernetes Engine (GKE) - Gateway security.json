{"title": "Google Kubernetes Engine (GKE) - Gateway security", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/gateway-security", "abstract": "# Google Kubernetes Engine (GKE) - Gateway security\nThis page describes different methods for securing Gateways in Google Kubernetes Engine (GKE). You can also learn how to [Secure a Gateway](/kubernetes-engine/docs/how-to/secure-gateway) .\n", "content": "## How Gateway security works\nA Gateway represents the frontend of a load balancer. There are two paths that you can secure with authentication and encryption for Gateways:\n- Client to Gateway: traffic originated at the client and terminated at the Gateway.\n- Gateway to Pod: traffic originated at the Gateway and terminated at the backend Pods.\nThe following diagram shows both paths to authenticate and encrypt Gateways:\nThis page describes how to secure the client to Gateway path using certificates uploaded and managed at the Gateway level. To learn how to secure Gateway to Pod traffic, see [Secure load balancer to application traffic using TLS](/kubernetes-engine/docs/how-to/secure-gateway#load-balancer-tls) .\n## Benefits\nYou can secure an application in many different ways using the Gateway API, which provides flexibility to different roles interacting with the Gateway.\n## Who owns domain and TLS configuration?\nThe Gateway API model introduces two roles that use or deploy Gateways:\n- **Platform admin** : the cluster operator is the administrator for entire clusters. They manage policies, network access, and application permissions.\n- **Application developer** : the application developer defines their application and Service configuration.\nThe following diagram shows the fields in the Gateway and HTTPRoute resources that influence TLS and domain ownership for two applications, `store-v1` and `store-v2` .\nIn the diagram, the cluster operator controls:\n- Which domains application developers can use for their apps in each namespace.\n- The specific certificates that terminate different domains.\n- Certificates provided by the Gateway owner.\n- Whether HTTPRoute owners can specify their own hostnames for certificate generation.\nApplication developers control the hostname that generates a certificate, if the Gateway definition permits it.\nThis separation of operational tasks enables application developers to deploy and manage their own HTTPRoute for more distributed control and lets platform administrators deploy and manage Gateways for centralized control of TLS.\n## Gateway certificate management\nYou can secure Gateways using any following methods:\n- [Kubernetes Secrets](#kubernetes-secrets) \n- [SSL certificates](#ssl-certificates) \n- [Certificate Manager](#certificate-manager) \nIf you use Kubernetes Secrets or `SslCertificate` resources from the Compute Engine API, you can attach at most 15 certificates to a single Gateway.\nCertificate Manager lets you attach up to 10,000,000 certificates per load balancer, if you request a quota increase.\nTo learn more about Google Cloud SSL certificates, see [SSL certificates overview](/load-balancing/docs/ssl-certificates) .\n### Kubernetes Secrets\nThe [Gateway API spec](https://gateway-api.sigs.k8s.io/guides/tls/) supports [Kubernetes Secrets](https://kubernetes.io/docs/concepts/configuration/secret/) for storing and attaching certificates to Gateways. You can associate one or more Kubernetes Secrets with a Gateway using the field `Gateway.spec.tls.certificateRef` .\nGateway resources secured through Kubernetes Secrets have the following requirements:\n- You must be set the Gateway listener`port`and`protocol`to`443`and`HTTPS`.\n- You must set the`listener.tls.mode`field to`Terminate`.\n- You must reference the TLS credentials in the`listeners.tls`block.\nGateway resources secured using Kubernetes Secrets have the following limitations:\n- Only HTTPS listeners terminate traffic using the specified Secrets, although you can specify multiple listeners with a mix of HTTP and HTTPS.\n- If you have multiple listeners using HTTPS on the same Gateway, each listener must have a unique hostname.\n- You can only omit a single hostname or assign`*`for each port and protocol pair.\n- You can only assign one default certificate for each Gateway.\nTo learn how to secure a Gateway using a Kubernetes Secret, see [Secure a Gateway using a Kubernetes Secret](/kubernetes-engine/docs/how-to/secure-gateway#secure-using-secret) .\n### SSL certificates\nSSL certificates store and deliver certificates to load balancers.\nAn SSL certificate can be either self-managed or Google-managed.\nTo learn more about the differences between these two types of certificates, see [SSL certificates overview](/load-balancing/docs/ssl-certificates) .\nThe scope and location of the SSL certificate must match the scope and location of the Gateway that is using it.\nFor example, a global SSL certificate cannot be used by a regional Gateway.\nThe following table lists the scope and location requirements of SSL certificates for each [GatewayClass](/kubernetes-engine/docs/concepts/gateway-api#gateway_resources) :\n| GatewayClass      | SSL certificate scope | SSL certificate location    |\n|:------------------------------------|:-------------------------|:---------------------------------------|\n| gke-l7-global-external-managed  | Global SSL certificate | Global         |\n| gke-l7-global-external-managed-mc | Global SSL certificate | Global         |\n| gke-l7-gxlb       | Global SSL certificate | Global         |\n| gke-l7-gxlb-mc      | Global SSL certificate | Global         |\n| gke-l7-regional-external-managed | Regional SSL certificate | Must be the same region as the Gateway |\n| gke-l7-regional-external-managed-mc | Regional SSL certificate | Must be the same region as the Gateway |\n| gke-l7-rilb       | Regional SSL certificate | Must be the same region as the Gateway |\n| gke-l7-rilb-mc      | Regional SSL certificate | Must be the same region as the Gateway |\n**not compatible**\nTo learn how to secure a Gateway using an SSL certificate, see [Secure a Gateway using an SSL certificate](/kubernetes-engine/docs/how-to/secure-gateway#secure-using-ssl-certificate) .\n### Certificate Manager\n[Certificate Manager](/certificate-manager/docs) is a centralized location to manage your TLS certificates.\nWhen you secure a Gateway using Certificate Manager, you can do the following:\n- Reference a`CertificateMap`directly from a Gateway that you created in Certificate Manager.\n- Manage your own certificates.\n- Improve certificate propagation times.\n- Use Cloud Monitoring for expired certificates and certificate propagation.\nCertificate Manager supports both self-managed and Google-managed SSL certificates.\nCertificate Manager is **not compatible** with regional Gateways.\nTo learn how to secure a Gateway using Certificate Manager, see [Secure a Gateway using Certificate Manager](/kubernetes-engine/docs/how-to/secure-gateway#secure-using-certificate-manager) .\n## GatewayClass TLS support\nThe following table describes the TLS termination methods that GKE supports for each GatewayClass:\n| GatewayClass            | gke-l7-global-external-managed gke-l7-global-external-managed-mc gke-l7-gxlb gke-l7-gxlb-mc | gke-l7-regional-external-managed gke-l7-regional-external-managed-mc gke-l7-rilb gke-l7-rilb-mc |\n|:---------------------------------------------------------|:----------------------------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------|\n| Client to Gateway TLS         | Supported                      | Supported                       |\n| Gateway to backend TLS         | Supported                      | Supported                       |\n| Google Cloud certificate resource      | Global SSL certificate CertificateMap               | Regional SSL certificate                   |\n| Self-managed certificates with Kubernetes Secrets  | Supported                      | Supported                       |\n| Self-managed Compute Engine SSL certificates    | Supported                      | Supported                       |\n| Google-managed Compute Engine SSL certificates   | Supported                      | Not supported                      |\n| Self-managed SSL certificates with Certificate Manager | Supported                      | Not supported                      |\n| Google-managed SSL certificates with Certificate Manager | Supported                      | Not supported                      |\n## What's next\n- Learn how to [Secure a Gateway](/kubernetes-engine/docs/how-to/secure-gateway) .", "guide": "Google Kubernetes Engine (GKE)"}