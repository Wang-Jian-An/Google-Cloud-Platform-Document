{"title": "Google Kubernetes Engine (GKE) - Encrypt secrets at the application layer", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/encrypting-secrets", "abstract": "# Google Kubernetes Engine (GKE) - Encrypt secrets at the application layer\nLearn how to encrypt Kubernetes [Secrets](https://kubernetes.io/docs/concepts/configuration/secret/) at the application layer using a key you manage in [Cloud Key Management Service(Cloud KMS)](/kms/docs) . Since this feature relies on functionality from Cloud KMS, you should familiarize yourself with [key rotation](/kms/docs/key-rotation) and [envelope encryption](/kms/docs/envelope-encryption) .\nTo follow step-by-step guidance for this task directly in the Google Cloud console, click **Guide me** :\n[Guide me](https://console.cloud.google.com?walkthrough_id=kubernetes--gke_application_layer_secrets_encryption)\n", "content": "## Overview\nBy default, Google Kubernetes Engine (GKE) [encrypts customer content stored at rest](/docs/security/encryption/default-encryption) , including Secrets. GKE handles and manages this default encryption for you without any additional action on your part.\nprovides an additional layer of security for sensitive data, such as Secrets, stored in [etcd](https://kubernetes.io/docs/concepts/overview/components/#etcd) . Using this functionality, you can use a key managed with [Cloud KMS](/kms/docs) to encrypt data at the application layer. This encryption protects against attackers who gain access to an offline copy of etcd.\nTo use application-layer secrets encryption, you must first create a Cloud KMS key and give the GKE service account access to the key. You can use a key that has any of the [protection levels](/kms/docs/resource-hierarchy#protection_level) supported by Cloud KMS.\nEnsure that the key is in the same location as the cluster to decrease latency and to prevent cases where resources depend on services spread across multiple failure domains. After creating a key, you can enable the feature on a new or existing cluster by specifying the key you want to use. When you enable the feature, GKE encrypts all new and existing Secrets using your encryption key.\n**Note:** [](None) When you use CMEK in GKE, your projects can consume Cloud KMS cryptographic requests quotas. For example, GKE can consume these quotas when using a Key Encryption Key from Cloud KMS to encrypt or decrypt a Data Encryption Key in GKE. Encryption and decryption operations using CMEK keys affect Cloud KMS quotas only if you use hardware (Cloud HSM) or external (Cloud EKM) keys. For more information, see [Cloud KMS quotas](/kms/quotas) .\n### Envelope encryption\nKubernetes offers envelope encryption of Secrets with a [KMS provider](https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/) , meaning that a local key, commonly called a , is used to encrypt the Secrets. The DEK itself is encrypted with another key called the . Kubernetes does not store the KEK.\nEnvelope encryption has the following benefits:\n- The KEK can be rotated without requiring re-encryption of all the Secrets. This means that you can more easily follow the best practice of regular key rotation, without a significant impact on performance.\n- Secrets that are stored in Kubernetes can rely on an external root of trust. This means that you can use a central root of trust, for example a [Hardware Security Module](https://en.wikipedia.org/wiki/Hardware_security_module) , for all your Secrets, and that an adversary accessing your containers offline can't obtain your Secrets.\nWith application-layer secrets encryption in GKE, your Secrets are encrypted locally, using the [AES-CBC](https://tools.ietf.org/html/rfc3602) provider, with local DEKs, and the DEKs are encrypted with a KEK that you manage in Cloud KMS.\nTo learn more about envelope encryption, see [Envelope encryption](/kms/docs/envelope-encryption) .\n## What happens when you create a Secret\nWhen you create a new Secret, here's what happens:\n- The Kubernetes API server generates a unique DEK for the Secret using a random number generator.\n- The Kubernetes API server uses the DEK locally to encrypt the Secret.\n- The [KMS plugin](https://github.com/GoogleCloudPlatform/k8s-cloudkms-plugin) sends the DEK to Cloud KMS for encryption. The KMS plugin uses your project's GKE service account to authenticate to Cloud KMS.\n- Cloud KMS encrypts the DEK using the KEK, and sends it back to the KMS plugin.\n- The Kubernetes API server saves the encrypted Secret and the encrypted DEK. The plaintext DEK is not saved to disk.\n- The Kubernetes API server creates a cache entry mapping the encrypted DEK to the plaintext DEK. This lets the API server decrypt the Secret without using Cloud KMS.\nWhen a client requests a Secret from the Kubernetes API server, here's what happens:\n- The Kubernetes API server retrieves the encrypted Secret and the encrypted DEK.\n- The Kubernetes API server checks the cache for an existing mapping entry and decrypts the Secret without using Cloud KMS.\n- If a cache entry is not found, the KMS plugin sends the DEK to Cloud KMS for decryption using the KEK. The decrypted DEK is then used to decrypt the Secret.\n- The Kubernetes API server returns the decrypted Secret to the client.## What happens when you destroy a key\n**Warning:** Destroying a key is not reversible - any data encrypted with the destroyed version will be unrecoverable.\nWhen you destroy a KEK in Cloud KMS used to encrypt a Secret in GKE, the Secret is no longer available unless you [update the cluster](#updating-kms-key) to use a new KEK first.\nIf you plan to destroy an old KEK version after a [key rotation](/kms/docs/rotating-keys) , use the new KEK version to [re-encrypt](#reencrypt-secrets) the Secret first.\nUnless you use a [Service Account Token Volume Projection](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection) , service accounts used by your workloads on GKE also use Secrets, and if a key is destroyed these become unavailable. The inability to access these means that the workloads will fail.\n**Note:** System workloads on GKE use Secrets for service account authentication. If a KEK is destroyed and these Secrets become unavailable, the cluster will fail to start.\nThe following exceptions apply:\n- Pods with existing access to Secrets as mounted volumes or environment variables retain access.\n- The Kubernetes API server can still use cached DEK mapping entries to decrypt a Secret after you destroy the KEK. This lets restarted or rescheduled Pods access the Secret unless:- The cluster control plane is restarted.\n- The Kubernetes API server Pod is restarted.\n- The DEK mapping entry for the Secret is not in the Kubernetes API server cache.Before you destroy a KEK, [check if it is being used by your cluster](/kubernetes-engine/docs/how-to/encrypting-secrets#verifying_secrets_encryption) . You can also [create an alerting policy](/kms/docs/monitoring#create_an_alerting_policy) for key destruction in Cloud KMS.\n## Before you begin\n- To do the exercises in this topic, you need two Google Cloud projects:- **Key project:** This is where you create a KEK.\n- **Cluster project:** This is where you create a cluster that enables application-layer secrets encryption.\n **Note:** You can use the same project for your key project and cluster project. But the recommended practice is to use [separate projects](/kms/docs/separation-of-duties) .\n- In your key project, ensure that you have enabled the Cloud KMS API. [Enable Cloud KMS API](https://console.cloud.google.com/apis/library/cloudkms.googleapis.com) \n- In your key project, the user who creates the key ring and key needs the following IAM permissions:- `cloudkms.keyRings.getIamPolicy`\n- `cloudkms.keyRings.setIamPolicy`\nThese permissions (and many more) are granted to the pre-defined `roles/cloudkms.admin` [Identity and Access Management role](/iam/docs/understanding-roles#iam-roles) . You can learn more about [granting permissions to manage keys](/kms/docs/iam) in the Cloud KMS documentation.\n- In your cluster project, ensure that you have enabled the Google Kubernetes Engine API. [Enable Google Kubernetes Engine API](https://console.cloud.google.com/apis/library/container.googleapis.com?q=kubernetes%20engine) \n- Ensure that you have installed the [Google Cloud CLI](/sdk/downloads) .\n- Update `gcloud` to the latest version:```\ngcloud components update\n```## Create a Cloud KMS key\nTo create a Cloud KMS key, you must first create a . Keys and key rings are regional resources. When you create a key ring, specify a location that matches the location of your GKE cluster:\n- A [zonal cluster](/kubernetes-engine/docs/concepts/types-of-clusters#zonal_clusters) should use a key ring from a superset region. For example, a cluster in the `us-central1-a` zone can only use a key in the `us-central1` region.\n- A [regional cluster](/kubernetes-engine/docs/concepts/regional-clusters) should use a key ring from the same location. For example, a cluster in the `asia-northeast1` region should be protected with a key ring from the `asia-northeast1` region.\n**Note:** The Cloud KMS `global` region is not supported for use with GKE.\nYou can use the gcloud CLI or the Google Cloud console.\nIn your key project, create a key ring:- Go to the **Key Management** page in the Google Cloud console. [Go to Key Management](https://console.cloud.google.com/security/kms) \n- Click **Create key ring** .\n- In the **Key ring name** field, enter the name for your key ring.\n- From the **Location** dropdown, select the location of your Kubernetes cluster.\n- Click **Create** .\nNext, create a key:- Go to the **Key Management** page in the Google Cloud console. [Go to Key Management](https://console.cloud.google.com/security/kms) \n- Click the name of the key ring for which you will create a key.\n- Click **Create key** .\n- In the **Key name** field, enter the name for your key.\n- Accept the default values for **Rotation period** and **Starting on** , or [set a key rotation period and starting time](/kms/docs/rotating-keys) if you want to use different values.\n- [Optional] In the **Labels** field, click **Add label** if you want to [add labels to your key](/kms/docs/labeling-keys) .\n- Click **Create** .\nIn your key project, create a key ring:\n```\ngcloud kms keyrings create RING_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --project=KEY_PROJECT_ID\n```\nReplace the following:- ``: the name of your new key ring.\n- ``: the location where you want to create the key ring.\n- ``: your key project ID.\nCreate a key:\n```\ngcloud kms keys create KEY_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --keyring=RING_NAME \\\u00a0 \u00a0 --purpose=encryption \\\u00a0 \u00a0 --project=KEY_PROJECT_ID\n```\nReplace the following:- ``: the name of your new key.\n- ``: the Cloud KMS location where you created your key ring.\n- ``: the name of your key ring.\n- ``: your key project ID.\n### Grant permission to use the key\nThe GKE service account in your cluster project has the following name:\n```\nservice-CLUSTER_PROJECT_NUMBER@container-engine-robot.iam.gserviceaccount.com\n```\nReplace `` with your cluster [project number](/resource-manager/docs/creating-managing-projects#identifying_projects) . To find your project number using the gcloud CLI, run the following command:\n```\ngcloud projects describe CLUSTER_PROJECT_ID \\\u00a0 \u00a0 --format=\"value(projectNumber)\"\n```\nTo grant access to the service account, you can use the Google Cloud console or the gcloud CLI.\nGrant your GKE service account the Cloud KMS [CryptoKey Encrypter/Decrypter role](/kms/docs/reference/permissions-and-roles#predefined_roles) :- Open the **Cloud Key Management Service Keys** browser in the Google Cloud console. [Open the Cloud KMS Keys browser](https://console.cloud.google.com/security/kms) \n- Click on the name of the key ring that contains the desired key.\n- Select the checkbox for the desired key.The **Permissions** tab in the right window pane becomes available.\n- In the **Add members** dialog, specify the email address of the GKE service account you are granting access.\n- In the **Select a role** drop down, select **Cloud KMS CryptoKeyEncrypter/Decrypter** .\n- Click **Save** .\nGrant your GKE service account the Cloud KMS [CryptoKey Encrypter/Decrypter role](/kms/docs/reference/permissions-and-roles#predefined_roles) :\n```\ngcloud kms keys add-iam-policy-binding KEY_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --keyring=RING_NAME \\\u00a0 \u00a0 --member=serviceAccount:SERVICE_ACCOUNT_NAME \\\u00a0 \u00a0 --role=roles/cloudkms.cryptoKeyEncrypterDecrypter \\\u00a0 \u00a0 --project=KEY_PROJECT_ID\n```\nReplace the following:- ``: the name of your key.\n- ``: the Cloud KMS location where you created your key ring.\n- ``: the name of your key ring.\n- ``: the name of your GKE service account.\n- ``: your key project ID.\n### Ensure that the key has enough quota if it is a Cloud HSM key\nIf you use a Cloud HSM key, the Google Cloud project that contains the key is limited by your [key quota](/kms/quotas#cloud_hsm_quotas) . Ensure that you have enough quota to use your Cloud HSM keys with application-layer secrets encryption. If your quota is exhausted, your nodes might lose connectivity to your cluster control plane.\n## Enable application-layer secrets encryption\nYou can enable application-layer secrets encryption on new or existing GKE Standard and GKE Autopilot clusters using the gcloud CLI or the Google Cloud console.\nAfter you enable application-layer secrets encryption, we recommend that you perform a [key rotation](#key-rotation) . You can configure automatic key rotation in Cloud KMS. For instructions, see [Configuring automatic rotation](/kms/docs/rotating-keys#automatic) .\n### On a new cluster\nYou can create a new cluster with application-layer secrets encryption enabled by using the Google Cloud console or the gcloud CLI.\nTo create a Autopilot cluster with application-layer secrets encryption enabled, perform the following steps:- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click **Create** .\n- In the **Autopilot** section, click **Configure** .\n- Configure your cluster as desired.\n- In the navigation pane, click **Advanced Options** and expand the **Security** section.\n- Select the **Enable Application-layer secrets encryption** checkbox and choose the key that you created in [Create a Cloud KMS key](#creating-key) .\n- Click **Create** .\nTo create a Standard cluster with application-layer secrets encryption enabled, perform the following steps:- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click **Create** .\n- In the **Standard** section, click **Configure** .\n- Configure your cluster as desired.\n- From the navigation pane, under **Cluster** , click **Security** .\n- Select the **Enable Application-layer secrets encryption** checkbox and choose the key that you created in [Create a Cloud KMS key](#creating-key) .\n- Click **Create** .\nTo create a cluster that supports application-layer secrets encryption, specify a value for the `--database-encryption-key` parameter in your creation command.\n```\ngcloud container clusters create-auto CLUSTER_NAME \\\u00a0 \u00a0 --cluster-version=latest \\\u00a0 \u00a0 --region=COMPUTE_REGION \\\u00a0 \u00a0 --database-encryption-key=projects/KEY_PROJECT_ID/locations/LOCATION/keyRings/RING_NAME/cryptoKeys/KEY_NAME \\\u00a0 \u00a0 --project=CLUSTER_PROJECT_ID\n```\nReplace the following:- ``: the name you choose for your new cluster.\n- ``: the [Compute Engine region](/compute/docs/regions-zones#available) where you want to create the cluster.\n- ``: your key project ID.\n- ``: the Cloud KMS location where you created your key ring.\n- ``: the name of your key ring.\n- ``: the name of your key.\n- ``: your cluster's [project ID](/resource-manager/docs/creating-managing-projects#identifying_projects) .\nYou can enable application-layer secrets encryption on a new Standard cluster using the `gcloud container clusters create` command with the same flags.\n### On an existing cluster\nYou can use the gcloud CLI or the Google Cloud console to update an existing cluster to use application-layer secrets encryption. GKE encrypts all of your existing and new Secrets using your specified encryption key.\n**Important:** Updating an existing cluster to use application-layer secrets encryption restarts the cluster control plane. For zonal clusters, the control plane becomes unavailable.\nTo update a cluster to support application-layer secrets encryption:- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click the name of the cluster you want to modify.\n- Under **Security** , in the **Application-layer secrets encryption** field, click **Edit Application-layer secrets encryption** .\n- Select the **Enable Application-layer secrets encryption** checkbox and choose the key you created in [Create a Cloud KMS key](#creating-key) .\n- Click **Save Changes** .\nTo enable application-layer secrets encryptions on an existing cluster, run the following command:\n```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION \\\u00a0 \u00a0 --database-encryption-key=projects/KEY_PROJECT_ID/locations/LOCATION/keyRings/RING_NAME/cryptoKeys/KEY_NAME \\\u00a0 \u00a0 --project=CLUSTER_PROJECT_ID\n```\nReplace the following:- ``: the name of your cluster.\n- ``: the [Compute Engine region](/compute/docs/regions-zones#available) of the cluster.\n- ``: your key project ID.\n- ``: the Cloud KMS location where you created your key ring.\n- ``: the name of your key ring.\n- ``: the name of your key.\n- ``: your cluster's [project ID](/resource-manager/docs/creating-managing-projects#identifying_projects) .## Update a Cloud KMS key\nYou can use the gcloud CLI or the Google Cloud console to update an existing cluster to use a new Cloud KMS key.\n**Important:** Updating an existing cluster to use a new Cloud KMS key restarts the cluster control plane. For zonal clusters, the control plane becomes unavailable.\nTo update a cluster to use a new Cloud KMS key:- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click the name of the cluster you want to modify.\n- Under **Security** , in the **Application-layer secrets encryption** field, click **Edit Application-layer secrets encryption** .\n- Select the new encryption key you want to use.\n- Click **Save Changes** .\nUpdate your existing cluster to use a new Cloud KMS key:\n```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION \\\u00a0 \u00a0 --database-encryption-key=projects/KEY_PROJECT_ID/locations/LOCATION/keyRings/RING_NAME/cryptoKeys/KEY_NAME \\\u00a0 \u00a0 --project=CLUSTER_PROJECT_ID\n```\nReplace the following:- ``: the name of your cluster.\n- ``: the [Compute Engine region](/compute/docs/regions-zones#available) of the cluster.\n- ``: your key project ID.\n- ``: the Cloud KMS location where you created your key ring.\n- ``: the name of your key ring.\n- ``: the name of your key.\n- ``: your cluster's [project ID](/resource-manager/docs/creating-managing-projects#identifying_projects) .## Disable application-layer secrets encryption\nTo disable application-layer secrets encryption, you can use the gcloud CLI or the Google Cloud console.\n- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click the name of the cluster you want to modify.\n- Under **Security** , in the **Application-layer secrets encryption** field, click **Edit application-layer secrets encryption** .\n- Clear the **Enable Application-layer secrets encryption** checkbox.\n- Click **Save Changes** .\nTo disable application-layer secrets encryption, run the following command:\n```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION \\\u00a0 \u00a0 --disable-database-encryption \\\u00a0 \u00a0 --project=CLUSTER_PROJECT_ID\n```\nReplace the following:- ``: the name of your cluster.\n- ``: the [Compute Engine region](/compute/docs/regions-zones#available) of the cluster.\n- ``: your cluster's [project ID](/resource-manager/docs/creating-managing-projects#identifying_projects) .## Verify that application-layer secrets encryption is enabled\nYou can check to see whether a cluster is using application-layer secrets encryption using the Google Cloud console or the gcloud CLI.\n- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click the name of the cluster you want to modify.\n- Under **Security** , verify that the **Application-layer secrets encryption** field displays `Enabled` and lists the correct key.\nCheck to see whether a cluster is using application-layer secrets encryption:\n```\ngcloud container clusters describe CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION \\\u00a0 \u00a0 --format='value(databaseEncryption)' \\\u00a0 \u00a0 --project=CLUSTER_PROJECT_ID\n```\nReplace the following:- ``: the name of your cluster.\n- ``: the [Compute Engine region](/compute/docs/regions-zones#available) of the cluster.\n- ``: your cluster's [project ID](/resource-manager/docs/creating-managing-projects#identifying_projects) .\nIf the cluster uses application-layer secrets encryption, the output is similar to the following:\n```\nkeyName=projects/KEY_PROJECT_ID/locations/LOCATION/keyRings/RING_NAME/cryptoKeys/KEY_NAME;state=ENCRYPTED\n```\n## Rotate your keys\nWe recommend that you rotate your keys on a regular schedule, including after you enable application-layer secrets encryption. For instructions to configure automatic key rotation or to manually rotate your keys, see [Rotating keys](/kms/docs/rotating-keys) .\nWhen you perform a key rotation, your existing secrets remain encrypted with the previous key encryption key (KEK) version. To ensure a newer KEK version wraps a Secret, [re-encrypt the Secret](#reencrypt-secrets) after Key rotation.\nFor example, you create and store a Secret, `Secret1` . It is encrypted with `DEK1` , which itself is wrapped with `KEKv1` .\nAfter the KEK rotates, you re-encrypt `Secret1` so that it is wrapped by `DEK2` , which in turn is wrapped with `KEKv2` , the rotated KEK.\n**Note:** The key version rotation is an eventually consistent operation and there could be a delay before the new key version takes effect. We recommend that you wait at least three hours before re-encrypting your Secrets after a rotation. See [Consistency of key versions](/kms/docs/consistency#key_versions) for more information.\n## Re-encrypt your Secrets\nAfter performing a key rotation, you should re-encrypt your Secrets to wrap them with the new version of the KEK. While you cannot configure automatic re-encryption using the gcloud CLI, you could, for example, use a [CronJob](/kubernetes-engine/docs/how-to/cronjobs) to run the re-encryption command at regular intervals.\nTo manually re-encrypt your Secrets after a key rotation, wait at least three hours for the new version to become consistent. Then, touch every Secret to force the re-encryption using a command like the following:\n```\nkubectl get secrets --all-namespaces -o json | kubectl annotate --overwrite -f - encryption-key-rotation-time=\"TIME\"\n```\nReplace `` with a string indicating when the rotation happens (for example, `20200909-090909` ).\n**Note:** The old key version will still exist, and incur costs. If the old version is no longer in use, you may want to [destroy it](/kms/docs/destroy-restore) . Key version destruction is permanent, so make sure you re-encrypt your Secrets before you do it.\n## Limitations\n- GKE supports up to 30,000 secrets per cluster for application-layer secrets encryption. If you store more than 30,000 secrets, your cluster might become unstable at upgrade time, causing a potential outage for your workloads.\n- Make sure the average size of metadata of a secret in every namespace is lower than 5KiB. If the average size of metadata is above 5KiB, your cluster might enter a bad state where some secrets are encrypted while others are decrypted after enabling the feature or disabling the feature.\n- You must select a key in the same region as the cluster. For example, a zonal cluster in `us-central1-a` can only use a key in the region `us-central1` . For regional clusters, keys must be in the same location to decrease latency and to prevent cases where resources depend on services spread across multiple failure domains. **Note:** The key does not need to be in the same project as the cluster. For more information about the supported locations for Cloud KMS, see [Google Cloud locations](/about/locations) .\n- GKE only supports keys from Cloud KMS. You cannot use another Kubernetes [KMS provider](https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/) or another [encryption provider](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/#providers) .## Troubleshooting\n### Cloud KMS key is disabled.\nGKE's default service account cannot use a disabled Cloud KMS key for [application-layer secrets encryption](/kubernetes-engine/docs/how-to/encrypting-secrets) .\nTo re-enable a disabled key, see [Enable a disabled key version](/kms/docs/enable-disable#enable) .\n## What's next\n- [Learn more about Secrets in Kubernetes](https://kubernetes.io/docs/concepts/configuration/secret/) .\n- [Learn more about Secret management using Cloud KMS](/kms/docs/secret-management) .\n- [Learn how to harden your cluster](/kubernetes-engine/docs/how-to/hardening-your-cluster) .", "guide": "Google Kubernetes Engine (GKE)"}