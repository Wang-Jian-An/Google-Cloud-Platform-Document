{"title": "Google Kubernetes Engine (GKE) - Using SSD persistent disks", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/persistent-volumes/ssd-pd", "abstract": "# Google Kubernetes Engine (GKE) - Using SSD persistent disks\nThis page explains how to create dynamic [PersistentVolume](/kubernetes-engine/docs/concepts/persistent-volumes) resources that are backed by [SSD persistent disks](/compute/docs/disks) .\n", "content": "## SSD persistent disks\nBy default, [dynamically provisioned PersistentVolumes](/kubernetes-engine/docs/concepts/persistent-volumes#dynamic_provisioning) use the [default StorageClass](/kubernetes-engine/docs/concepts/persistent-volumes#storageclasses) and are backed by standard hard disks. If you need faster SSDs, you can use the `premium-rwo` storage class from the [Compute Engine persistent disk CSI Driver](/kubernetes-engine/docs/how-to/persistent-volumes/gce-pd-csi-driver) to provision your volumes. This can be done by setting the `storageClassName` field to `premium-rwo` in your `PersistentVolumeClaim` as shown in the following example:\n```\n# ssd-claim.yamlapiVersion: v1kind: PersistentVolumeClaimmetadata:\u00a0 name: my-volumespec:\u00a0 storageClassName: premium-rwo\u00a0 accessModes:\u00a0 \u00a0 - ReadWriteOnce\u00a0 resources:\u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 storage: 30Gi\n```\nTo create the `my-volume` PersistentVolumeClaim object, use the following `kubectl apply` command:\n```\nkubectl apply -f ssd-claim.yaml\n```\nWhen you create this `PersistentVolumeClaim` object with `kubectl apply` , Kubernetes dynamically creates a corresponding `PersistentVolume` object.", "guide": "Google Kubernetes Engine (GKE)"}