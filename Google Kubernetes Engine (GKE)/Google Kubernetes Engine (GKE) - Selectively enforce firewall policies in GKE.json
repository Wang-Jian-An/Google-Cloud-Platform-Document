{"title": "Google Kubernetes Engine (GKE) - Selectively enforce firewall policies in GKE", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/tags-firewall-policies", "abstract": "# Google Kubernetes Engine (GKE) - Selectively enforce firewall policies in GKE\nThis page shows you how to selectively enforce Cloud Next Generation Firewall network firewall policies in Google Kubernetes Engine (GKE) by using Tags. To learn how to use Tags in GKE for other purposes, like billing management or conditional IAM policies, see [Manage GKE resources using Tags](/kubernetes-engine/docs/how-to/tags) .\n", "content": "## About Tags\nTags are key-value pairs that let you annotate and manage your Google Cloud resources at the organization or project level. You can use tags to organize your resources and to conditionally apply policies like firewalls or IAM policies. You can use IAM access control to define who can attach, create, update, or delete tags.\nTo learn more about Tags, see the [Tags overview](/resource-manager/docs/tags/tags-overview) in the Resource Manager documentation.\n### Use Tags to enforce network firewall policies\n**Key Term:** In this document, we sometimes use to refer to Tags that have a firewall policy enforcement purpose.\nYou can use Tags to conditionally apply global or regional network firewall policies to your GKE nodes. You must designate the `GCE_FIREWALL` purpose for tags that you want to use with network firewall policies. When you apply firewall purpose tags to GKE clusters or node pools, GKE automatically attaches those tags to the corresponding Compute Engine virtual machines (VMs).\nTags for network firewall policies replace the need to use , which are metadata that anyone can attach to the underlying Compute Engine VMs for Virtual Private Cloud firewall rule enforcement, and which don't support IAM access control. If you currently use network tags with VPC firewall rules, we recommend that you migrate to network firewall policies and use secure firewall tags. For a detailed comparison, see [Compare network tags with Tags](#compare-network-tags) in this document.\n## Tags for network firewall policies workflow\nTo use tags with network firewall policies in GKE, you do the following:\n- Create a tag:- Define a tag key at the organization or project level, such as`env`.\n- Define the possible tag values for the key, such as`dev`,`staging`, and`prod`.\n- Designate the tag for network firewall policy use. **Note:** Firewall policies can't target tags that aren't designated for firewall use.\n- Grant users access to interact with the firewall tag.\n- Apply tag key-value pairs to specific GKE clusters or node pools. GKE automatically attaches the tags to the underlying Compute Engine VMs for firewall policy enforcement.## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.\n### Requirements and limitations\n- Tags for network firewall policies are supported in GKE version 1.28 and later. If you use a GKE version earlier than 1.28, use [network tags with VPC firewall rules](/kubernetes-engine/docs/how-to/autopilot-network-tags) instead.\n- The GKE cluster should have originally been created using GKE version 1.28 or later. Upgrading a cluster from a version earlier than 1.28 to version 1.28 or later won't enable Tags.\n- The GKE cluster and the tag must be associated with the same VPC network.\n- In Standard clusters, each node pool supports up to five attached firewall tags.\n- Autopilot clusters support up to five firewall tags.\n- GKE rejects tag keys that use the`gke-managed`prefix.\n- You must create the tag key-value pairs before you can attach them to clusters or node pools.\n### IAM roles and permissions\nTo get the permissions that you need to use Tags for firewall policies in GKE,   ask your administrator to grant you the  following IAM roles:\n- To grant the required permissions for tags to users and GKE service agents:- [Project IAM Admin ](https://cloud.google.com/iam/docs/understanding-roles#resourcemanager.projectIamAdmin) (`roles/resourcemanager.projectIamAdmin`)     on your project\n- [Organization Administrator ](https://cloud.google.com/iam/docs/understanding-roles#resourcemanager.organizationAdmin) (`roles/resourcemanager.organizationAdmin`)     on the organization\n- To create and administer tags: [Tag Administrator ](https://cloud.google.com/iam/docs/understanding-roles#resourcemanager.tagAdmin) (`roles/resourcemanager.tagAdmin`)    on the organization or the project\n- To attach tags to resources: [Tag User ](https://cloud.google.com/iam/docs/understanding-roles#resourcemanager.tagUser) (`roles/resourcemanager.tagUser`)    on the project\nFor more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nYou might also be able to get  the required permissions through [custom  roles](/iam/docs/creating-custom-roles) or other [predefined  roles](/iam/docs/understanding-roles) .\n## Create tags\nTags must exist for you to attach them to clusters or nodes. To create a tag, see [Use Tags for firewalls](/firewall/docs/use-tags-for-firewalls) in the Cloud NGFW documentation.\nFor example, to create a project-scoped firewall tag, run the following commands:\n- Create the tag key:```\ngcloud resource-manager tags keys create TAG_KEY \\\u00a0 \u00a0 --parent=projects/PROJECT_ID \\\u00a0 \u00a0 --purpose=GCE_FIREWALL \\\u00a0 \u00a0 --purpose-data=network=PROJECT_ID/NETWORK_NAME\n```Replace the following:- ``: the name of the tag key, such as`env`\n- ``: your Google Cloud project ID\n- ``: the name of the VPC network that you'll use with the tag\n- Get the ID of the tag key:```\ngcloud resource-manager tags keys describe PROJECT_ID/TAG_KEY \\\u00a0 \u00a0 --format=\"value(name)\"\n```The output is `tagKeys/` `` , where `` is a numerical ID for the key. Make a note of this ID for later.\n- Add a tag value to the tag key:```\ngcloud resource-manager tags values create TAG_VALUE \\\u00a0 \u00a0 --parent=tagKeys/KEY_ID\n```Replace `` with the name of an allowed value for that tag key, such as `dev` .\n### Tag syntax in gcloud CLI commands\nWhen you refer to tags using the gcloud CLI, you must format the key-value pairs using one of the following syntaxes:\n| Tag syntax      | Tag syntax.1                                                      |\n|:----------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| tagKeys/KEY_ID=tagValues/VALUE_ID | Replace the following: KEY_ID: the numerical key ID VALUE_ID: the numerical value ID For example, tagKeys/123456789=tagValues/987654321.                       |\n| ORGANIZATION_ID/TAG_KEY=TAG_VALUE | Replace the following: ORGANIZATION_ID: your numerical Google Cloud organization ID TAG_KEY: the name of the tag key that you created TAG_VALUE: the name of the tag value that you created For example, 12345678901/env=dev.  |\n| PROJECT_ID/TAG_KEY=TAG_VALUE  | Replace the following: PROJECT_ID: your Google Cloud project ID TAG_KEY: the name of the tag key that you created TAG_VALUE: the name of the tag value that you created For example, example-project/env=dev.      |\n| PROJECT_NUMBER/TAG_KEY=TAG_VALUE | Replace the following: PROJECT_ID: the numerical identifier for your Google Cloud project TAG_KEY: the name of the tag key that you created TAG_VALUE: the name of the tag value that you created For example, 11223344556/env=dev. |\n## Target tags with firewall policies\nAfter you create tags, you can refer to specific key-value pairs in firewall policy rules. For instructions, see [Use Tags for firewalls](/firewall/docs/use-tags-for-firewalls) .\n## Grant IAM permissions to service agents\nFor GKE to automatically attach tags to new nodes during scale-up events, you must grant the corresponding IAM roles to Google Cloud-managed service accounts, also called .\n- Grant the [Tag User role](/iam/docs/understanding-roles#resourcemanager.tagUser) ( `roles/resourcemanager.tagUser` ) to the Kubernetes Engine Service Agent:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\u00a0 \u00a0 --member=serviceAccount:service-PROJECT_NUMBER@container-engine-robot.iam.gserviceaccount.com \\\u00a0 \u00a0 --role=roles/resourcemanager.tagUser \\\u00a0 \u00a0 --condition=None\n```Replace `` with the Google Cloud project number of the cluster. To find the project number, run the following command:```\ngcloud projects describe PROJECT_ID --format=\"value(projectNumber)\"\n```\n- Grant the [Tag Holds Administrator role](/iam/docs/understanding-roles#resourcemanager.tagHoldAdmin) ( `roles/resourcemanager.tagHoldAdmin` ) to the Kubernetes Engine Service Agent for the tag key-value pair:```\ngcloud resource-manager tags values add-iam-policy-binding PROJECT_ID/TAG_KEY/TAG_VALUE \\\u00a0 \u00a0 --member=serviceAccount:service-PROJECT_NUMBER@container-engine-robot.iam.gserviceaccount.com \\\u00a0 \u00a0 --role=roles/resourcemanager.tagHoldAdmin\n```This role lets the service agent prevent tag deletion if the key-value pair is still in use in GKE.\n- Grant the [Tag User role](/iam/docs/understanding-roles#resourcemanager.tagUser) ( `roles/resourcemanager.tagUser` ) to the Google APIs Service Agent:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\u00a0 \u00a0 --member=serviceAccount:PROJECT_NUMBER@cloudservices.gserviceaccount.com \\\u00a0 \u00a0 --role=roles/resourcemanager.tagUser \\\u00a0 \u00a0 --condition=None\n```\n### Grant additional IAM roles for tags outside the project\nTo use tags that are owned by an organization or a different project than the cluster project, do the following additional steps:\n- Grant the Tag User role ( `roles/resourcemanager.tagUser` ) to the Kubernetes Engine Service Agent access for the tags in the parent resource:```\ngcloud resource-manager tags keys add-iam-policy-binding PARENT_RESOURCE/TAG_KEY \\\u00a0 \u00a0 --member=serviceAccount:service-PROJECT_NUMBER@container-engine-robot.iam.gserviceaccount.com \\\u00a0 \u00a0 --role=roles/resourcemanager.tagUser \\\u00a0 \u00a0 --condition=None\n```Replace the following:- ``: the project ID or the organization ID of the resource that owns that tag\n- ``: the project number of the **cluster** project\n- Grant the Tag User role ( `roles/resourcemanager.tagUser` ) to the Google APIs Service Agent access for the tags in the parent resource:```\ngcloud resource-manager tags keys add-iam-policy-binding PARENT_RESOURCE/TAG_KEY \\\u00a0 \u00a0 --member=serviceAccount:PROJECT_NUMBER@cloudservices.gserviceaccount.com \\\u00a0 \u00a0 --role=roles/resourcemanager.tagUser \\\u00a0 \u00a0 --condition=None\n```\n- Grant the Tag Holds Administrator role ( `roles/resourcemanager.tagHoldAdmin` ) to the Kubernetes Engine Service Agent for the tag key-value pair:```\ngcloud resource-manager tags values add-iam-policy-binding PARENT_RESOURCE/TAG_KEY/TAG_VALUE \\\u00a0 \u00a0 --member=serviceAccount:service-PROJECT_NUMBER@container-engine-robot.iam.gserviceaccount.com \\\u00a0 \u00a0 --role=roles/resourcemanager.tagHoldAdmin\n```## Attach firewall tags to Autopilot clusters\nYou attach firewall tags to Autopilot clusters at the . GKE automatically applies these cluster-level tags to every node.\n### Attach tags when you create a new Autopilot cluster\nRun the following command:\n```\ngcloud beta container clusters create-auto CLUSTER_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --autoprovisioning-resource-manager-tags=TAG1,TAG2,...\n```\nReplace the following:\n- ``: the name of the new cluster.\n- ``: the Compute Engine region of the cluster.\n- ``: a comma-separated set of key-value pairs to attach. Each key-value pair must use a supported syntax, as described in the [Tag syntax in commands section](#tag-syntax-cli) . For example,`example-project/env=dev,1234567901/team=sre`.\n### Attach tags to existing Autopilot clusters\nRun the following command:\n```\ngcloud beta container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --autoprovisioning-resource-manager-tags=TAG1,TAG2,...\n```\nWhen you update the tags on a cluster, GKE overwrites any existing tags on all of the nodes.\n## Attach firewall tags to Standard clusters and node pools\nThe method that you use to attach tags depends on whether you want other node pools in the cluster to inherit the tags, as follows:\n| Standard cluster firewall tags   | Standard cluster firewall tags.1                                                                  |\n|:-----------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| --autoprovisioning-resource-manager-tags | Cluster-level setting GKE applies the tags to all new auto-provisioned node pools in the cluster. If you use this flag on an existing cluster, existing node pools retain any tags that were applied before the update.                   |\n| --resource-manager-tags     | Node pool-level setting GKE applies the tags to the specified node pool. If you use this flag during cluster creation, GKE applies the tags to the default node pool that GKE creates. If you use this flag on an auto-provisioned node pool, GKE overwrites any existing tags on the node pool. |\n### Attach firewall tags to Standard clusters\nYou can attach tags to new or existing Standard clusters. When you attach tags to an entire cluster, GKE considers these tags to be set at the .\nGKE uses cluster-level tags for new auto-provisioned nodes by default. The default node pool that GKE creates in the cluster isn't automatically provisioned and doesn't get those tags.\n```\ngcloud beta container clusters create CLUSTER_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --autoprovisioning-resource-manager-tags=TAG1,TAG2,... \\\u00a0 \u00a0 --enable-autoprovisioning \\\u00a0 \u00a0 --max-cpu=MAX_CPU \\\u00a0 \u00a0 --max-memory=MAX_MEMORY\n```\nReplace the following:\n- ``: the name of the new cluster\n- ``: the Compute Engine region or zone for the cluster\n- ``: a comma-separated set of key-value pairs to attach. Each key-value pair must use a supported syntax, as described in the [Tag syntax in commands section](#tag-syntax-cli) . For example,`example-project/env=dev,1234567901/team=sre`.\n- ``: the maximum number of cores for the cluster\n- ``: the maximum memory capacity for the cluster in gigabytesGKE only applies these tags to new auto-provisioned node pools. Existing node pools retain any tags that they had before the update.\n- Attach tags to the cluster:```\ngcloud beta container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --autoprovisioning-resource-manager-tags=TAG1,TAG2,...\n```\n- Enable node auto-provisioning on the cluster:```\ngcloud beta container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --enable-autoprovisioning \\\u00a0 \u00a0 --max-cpu=MAX_CPU \\\u00a0 \u00a0 --max-memory=MAX_MEMORY\n```\n### Attach firewall tags to node pools\nYou can attach tags to new or existing node pools regardless of whether they use node auto-provisioning. GKE considers these tags to be a setting.\nGKE attaches the tags that you specify using the `--resource-manager-tags` flag when you create a cluster to the default node pool that GKE creates in the cluster.\n```\ngcloud beta container clusters create CLUSTER_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --resource-manager-tags=TAG1,TAG2,...\n```\nReplace the following:\n- ``: the name of the new cluster\n- ``: the Compute Engine region or zone for the cluster\n- ``: a comma-separated set of key-value pairs to attach. Each key-value pair must use a supported syntax, as described in the [Tag syntax in commands section](#tag-syntax-cli) . For example,`example-project/env=dev,1234567901/team=sre`.When you use the `--resource-manager-tags` flag during node pool creation, GKE attaches the tags that you specify to that node pool.\n```\ngcloud beta container node-pools create NODE_POOL_NAME \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --resource-manager-tags=TAG1,TAG2,...\n```\nReplace the following:\n- ``: the name of the new node pool\n- ``: the name of the cluster\n- ``: the Compute Engine region or zone of the cluster\n- ``:a comma-separated set of key-value pairs to attach. Each key-value pair must use a supported syntax, as described in the [Tag syntax in commands section](#tag-syntax-cli) . For example,`example-project/env=dev,1234567901/team=sre`.When you update the tags on an existing node pool using the `--resource-manager-tags` flag, GKE overwrites any existing tags on that node pool. You can use this command to update the tags on auto-provisioned node pools.\n```\ngcloud beta container node-pools update NODE_POOL_NAME \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --resource-manager-tags=TAG1,TAG2,...\n```\nReplace `` with the name of the node pool to update.\n### Toggle auto-provisioning settings in existing clusters and node pools\n**Key Point:** Existing node pools retain any attached tags when you enable or disable node auto-provisioning, even if you or GKE re-create the nodes later. To change the tags on existing node pools, [attach new tags to those specific node pools](#attach-tags-existing-node-pool) .\nWhen you update tags at the cluster level, GKE applies those new tags to all **new** node pools in the cluster and retains the tags that were attached to existing node pools.\nWhen you update existing node pools to enable or disable node auto-provisioning, consider the following implications for tags:\n- When you enable or disable node auto-provisioning, the node pool retains any existing tags. GKE doesn't overwrite these tags with cluster-level tags, even during node re-creation.\n- If you manually update the tags on specific node pools, GKE overwrites the existing tags with your specified tags for that node pool.## Verify the firewall tags on cluster\n- List the tags on Autopilot clusters:```\ngcloud beta container clusters describe CLUSTER_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --format=\"value(nodePoolAutoConfig.resourceManagerTags)\"\n```\n- List the tags on specific node pools:```\ngcloud beta container node-pools describe NODE_POOL_NAME \\\u00a0 --cluster=CLUSTER_NAME \\\u00a0 --location=LOCATION \\\u00a0 --format=\"value(config.resourceManagerTags)\"\n```## Detach firewall tags from clusters and node pools\nTo remove firewall tags from clusters and node pools, update the resource with an empty value for the tags.\n### Detach tags from Autopilot clusters\nRun the following command:\n```\ngcloud beta container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --autoprovisioning-resource-manager-tags=\n```\n### Detach tags from node pools\n- Detach cluster-level node autoprovisioning tags:```\ngcloud beta container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --autoprovisioning-resource-manager-tags=\n```GKE won't attach tags to new auto-provisioned node pools.\n- Detach node pool tags:```\ngcloud beta container node-pools update NODE_POOL_NAME \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\u00a0 \u00a0 --location=LOCATION \\\u00a0 \u00a0 --resource-manager-tags=\n```GKE removes existing tags from that node pool.## Delete tags keys and values\nTo delete a tag key or value, ensure that the tag is detached from all resources. Then, see [Deleting tags](/resource-manager/docs/tags/tags-creating-and-managing#deleting) in the Resource Manager documentation.\n## Compare network tags with Tags\nUsing Tags for firewall policy enforcement has significant security and usability benefits compared to network tags. Similarly, network firewall policies improve on the capabilities of VPC firewall rules by facilitating firewall rule enforcement across entire organizations, folders, projects, or networks.\nUsing Tags with network firewall policies is a more secure, scalable way to manage access to your GKE environments across your organization. You can use network tags in the same cluster as Tags, although you can't use network tags to enforce network firewall policies.\nFor a detailed comparison between Tags and network tags, see [Comparison of Tags and network tags](/firewall/docs/tags-firewalls-overview#differences) in the Cloud NGFW documentation.\n### Functional differences in auto-provisioned node pools\nIn Autopilot clusters and in Standard node pools that don't use node auto-provisioning, network tags and Tags exhibit similar behavior. The following table shows the functional differences between network tags and Tags in **auto-provisioned** node pools in Standard clusters:\n| Action               | Network tags behavior                                     | Tags behavior                                      |\n|:-----------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| GKE auto-provisions a node pool         | GKE applies the cluster-level network tags                                | GKE applies the cluster-level tags                                 |\n| You update tags or network tags on an auto-provisioned node pool | If cluster-level network tags exist, the update operation fails If cluster-level network tags don't exist, GKE overwrites the existing network tags for the node pool | GKE overwrites existing tags for the node pool regardless of whether cluster-level tags exist                  |\n| You update tags or network tags for the entire cluster   | GKE overwrites the network tags for new and existing auto-provisioned node pools in the cluster.                  | GKE applies the new cluster-level tags to new auto-provisioned node pools. Existing auto-provisioned node pools retain the tags that they had prior to the update. |\n## What's next\n- [Use Tags for usage tracking and IAM policy enforcement](/kubernetes-engine/docs/how-to/tags) \n- [Learn more about Tags for firewalls](/firewall/docs/use-tags-for-firewalls) \n- [Learn about Tags](/resource-manager/docs/tags/tags-overview)", "guide": "Google Kubernetes Engine (GKE)"}