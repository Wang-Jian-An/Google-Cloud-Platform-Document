{"title": "Google Kubernetes Engine (GKE) - Plan for large workloads", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/planning-large-workloads", "abstract": "# Google Kubernetes Engine (GKE) - Plan for large workloads\n", "content": "## Best practices for distributing GKE workloads across multiple Google Cloud projects\nTo better define your Google Cloud project structure and GKE workloads distribution, based on your business requirements, we recommend you consider the following designing and planning actions:\n- Follow the [Manage cloud resources](/architecture/framework/system-design/resource-management) best practices to make initial decisions for your organization's structure for folders and projects. Google Cloud recommends using [Resource hierarchy](/resource-manager/docs/cloud-platform-resource-hierarchy) elements like folders and projects to divide your workload based on your own organizational boundaries or access policies.\n- Consider if you need to split your workloads because of project quotas. Google Cloud uses per project quotas to restrict usage of shared resources. You need to follow the recommendations described below and adjust the project quotas for large workloads. For most of the workloads you should be able to achieve required, higher quotas in just a single project. This means that quotas should not be the primary driver for splitting your workload between multiple projects. Keeping your workloads in a smaller number of projects simplifies the administration of your quotas and workloads.\n- Consider if you plan to run very large workloads (scale of hundreds of thousands of CPUs or more). In such a case splitting your workload into several projects can increase availability of cloud resources (like CPUs or GPUs). This is possible because of using optimized configuration of the [zone virtualization](/compute/docs/regions-zones) . In such cases please contact your Account Manager to get special support and recommendations.## Best practices for adjusting quotas for large GKE workloads\nThis section describes guidelines for adjusting quotas for Google Cloud resources used by GKE workloads. Adjust the quotas for your projects based on the following guidelines. To learn how to manage your quota using the Google Cloud console, see [Working with quotas](/docs/quota#managing_your_quota_console) .\n### Compute Engine quotas and best practices\nGKE clusters, running in both Autopilot and Standard mode, use Compute Engine resources to run your workloads. In contrast to Kubernetes control plane resources that are internally managed by Google Cloud, you can manage and evaluate Compute Engine quotas that your workflows use.\n[Compute Engine quotas](/compute/quotas) , for both resources and APIs, are shared by all GKE clusters hosted in the same project and region. The same quotas are also shared with other (not GKE related) Compute Engine resources (like standalone VM instances or instance groups).\nDefault quota values can support several hundred of worker nodes and require adjustment for larger workloads. However, as a platform administrator, you can proactively adjust Compute Engine quotas to ensure that your GKE clusters have enough resources. You should also consider future resource needs when evaluating or adjusting the quota values.\nThe following table lists resource quotas for the most common Compute Engine resources used by GKE worker nodes. These quotas are configured per project, and per region. The quotas must cover the maximum combined size of the GKE worker nodes used by your workload and also other Compute Engine resources not related to GKE.\n| Resource quota    | Description                     |\n|:------------------------------|:-----------------------------------------------------------------------------------------------|\n| CPUs       | Number of CPUs used by all worker nodes of all clusters.          |\n| Type of CPUs     | Number of each specific type of CPU used by all worker nodes of all clusters.     |\n| VM instances     | Number of all worker nodes. This quota is automatically calculated as 10x the number of CPUs. |\n| Instances per VPC network  | Number of all worker nodes connected to the VPC network.          |\n| Persistent Disk standard (GB) | Total size of standard persistent boot disks attached to all worker nodes.      |\n| Persistent Disk SSD (GB)  | Total size of SSD persistent boot disks attached to all worker nodes.       |\n| Local SSD (GB)    | Total size of local SSD ephemeral disks attached to all worker nodes.       |\nMake sure to also adjust quotas used by resources that your workload might require, such as GPUs, IP addresses, or preemptive resources.\nLarge or scalable clusters require a higher number of [Compute Engine API calls](/compute/quotas#api-rate-limits) . GKE makes these Compute Engine API calls during activities such as:\n- Checking state of the compute resources.\n- Adding or removing new nodes to the cluster.\n- Adding or removing new node pools.\n- Periodic labeling of resources.\nWhen planning your large-size cluster architecture, we recommend you do the following:\n- Observe [historical quota consumption](/docs/quota#viewing_your_quota_console) .\n- Adjust the quotas as needed while keeping a reasonable buffer. You can refer to the following best practice recommendations as a starting point, and adjust the quotas based on your workload needs.\n- Because quotas are configured per region, adjust quotas only in the regions where you plan to run large workloads.\nThe following table lists quotas for Compute Engine API calls. These quotas are configured per project, independently per each region. Quotas are shared by all GKE clusters hosted in the same project and in the same region.\n| API quota            | Description                        | Best practices                                                        |\n|:------------------------------------------------------|:----------------------------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Queries per minute per region       | These calls are used by GKE to perform various checks against the state of the various compute resources. | For projects and regions with several hundreds of dynamic nodes, adjust this value to 3,500. For projects and regions with several thousands of highly dynamic nodes, adjust this value to 6,000.           |\n| Read requests per minute pe region     | These calls are used by GKE to monitor the state of VM instances (nodes).         | For projects and regions with several hundreds of nodes, adjust this value to 12,000. For projects and regions with thousands of nodes, adjust this value to 20,000.                  |\n| List requests per minute per region     | These calls are used by GKE to monitor the state of instance groups (node pools).       | For projects and regions with several hundreds of dynamic nodes, don't change the default value because it is enough. For projects and regions with thousands of highly dynamic nodes, in multiple node pools, adjust this value to 2,500. |\n| Instance List Referrer requests per minute per region | These calls are used by GKE to obtain information about running VM instances (nodes).      | For projects and regions with thousands of highly dynamic nodes, adjust this value to 6,000.                                    |\n| Operation read requests per minute per region   | These calls are used by GKE to obtain information about ongoing Compute Engine API operations.   | For projects and regions with thousands of highly dynamic nodes, adjust this value to 3,000.                                    |### Cloud Logging API and Cloud Monitoring API quotas and best practices\nDepending on your cluster configuration, large workloads running on GKE clusters might generate a large volume of diagnostic information. When exceeding Cloud Logging API or Cloud Monitoring API quotas, the logging and monitoring data might be lost. We recommend you configure the verbosity of the logs and adjust [Cloud Logging API](/logging/quotas) and [Cloud Monitoring API](/monitoring/quotas) quotas to capture generated diagnostic information. [Managed Service for Prometheus](/stackdriver/docs/managed-prometheus) consumes Cloud Monitoring quotas.\nBecause every workload is different, we recommend you do the following:\n- Observe [historical quota consumption](/docs/quota#viewing_your_quota_console) .\n- Adjust the quotas or adjust logging and monitoring configuration as needed. Keep a reasonable buffer for unexpected issues.\nThe following table lists quotas for Cloud Logging APIs and Cloud Monitoring APIs calls. These quotas are configured per project and are shared by all GKE clusters hosted in the same project.\n| Service    | Quota          | Description                                                                             | Best practices                                                         |\n|:---------------------|:------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Cloud Logging API | Write requests per minute     | GKE uses this quota when adding entries to log files stored in Cloud Logging.                                                             | Log insertion rate is dependent on the amount of logs generated by the pods in your cluster. Increase your quota based on the number of pods, verbosity of applications logging, and logging configuration. To learn more, see managing GKE logs. |\n| Cloud Monitoring API | Time series ingestion requests per minute | GKE uses this quota when sending Prometheus metrics to Cloud Monitoring: Prometheus metrics consume about 1 call per second for every 200 samples per second you collect. This ingestion volume depends on your GKE workload and configuration; exporting more Prometheus time series will result in more quota consumed. | Monitor and adjust this quota as appropriate. To learn more, see managing GKE metrics.                                       |\n### GKE node quota and best practices\nGKE supports up to 15,000 nodes in a single cluster with the default quota set to 5,000 nodes. This quota is set separately for each GKE cluster and not per project as other quotas. If you plan to scale your cluster above 5,000 nodes, perform the following steps:\n- Identify the cluster that you want to scale beyond 5,000 nodes.\n- Make sure your workload stays within [cluster limits](#quotas) and [GKE quotas](/kubernetes-engine/quotas) after scaling.\n- Make sure you raise [Compute Engine quotas](#compute-engine-quotas-best-practices) as required for your scaled workload.\n- Make sure your cluster's [availability type](/kubernetes-engine/docs/concepts/types-of-clusters#availability) is **regional** and [network isolation](/kubernetes-engine/docs/concepts) is **private** .\n- Request increasing the quota for number of nodes per cluster by creating a [support ticket](/support-hub) .\nThe GKE team will contact you to ensure that your workload follows the scalability best practices and is ready to scale beyond 5,000 nodes on a single cluster.\n## Best practices for avoiding other limits for large workloads\n### Limit for number of clusters using VPC Network Peering per network per location\nYou can create a maximum of 75 [private clusters](/kubernetes-engine/docs/concepts/private-cluster-concept) that use VPC Network Peering in the same VPC network per each location (zones and regions are treated as separate locations). Attempts to create additional clusters above the limit would fail with an error similar to the following:\n```\nCREATE operation failed. Could not trigger cluster creation:\nYour network already has the maximum number of clusters: (75) in location us-central1.\n```\nGKE [private clusters](/kubernetes-engine/docs/concepts/private-cluster-concept) use VPC Network Peering to provide internal communication between Kubernetes API Server (managed by Google) and private nodes having only internal addresses.\nTo solve this issue, you can use clusters that use [Private Service Connect (PSC)](/vpc/docs/private-service-connect) connectivity. Clusters with PSC connectivity provide the same isolation as a private cluster without the 75 clusters limitation. Clusters that are based on PSC do not use VPC Network Peering and are not impacted by the limit of the number of VPC peerings.\nYou can use instructions provided in [VPC Network Peering reuse](/kubernetes-engine/docs/how-to/private-clusters#vpc_peering_reuse) to identify if your clusters use VPC Network Peering.\nTo avoid hitting the limit while creating new clusters, do the following steps:\n- Create a PSC cluster by using the`no-enable-private-nodes`parameter during cluster creation.\n- Configure the isolation for node pools to become private by using`enable-private-nodes`parameter for each node pool.\n- Optionally, configure the isolation for the control plane by using`enable-private-endpoint`parameter on cluster level. To learn more, see [Change cluster isolation](/kubernetes-engine/docs/how-to/change-cluster-isolation) .\nAlternatively, contact the Google Cloud support team to raise the limit of 75 private clusters using VPC Network Peering. Such requests are evaluated on a case-by-case basis and when increasing the limit is possible, a single digit increase is applied.\n## What's next?\n- See our episodes about [building large GKE clusters](https://www.youtube.com/watch?v=542XwAPKh4g) .", "guide": "Google Kubernetes Engine (GKE)"}