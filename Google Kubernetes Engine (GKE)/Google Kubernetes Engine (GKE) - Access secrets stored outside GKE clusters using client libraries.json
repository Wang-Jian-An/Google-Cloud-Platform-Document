{"title": "Google Kubernetes Engine (GKE) - Access secrets stored outside GKE clusters using client libraries", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/workload-identity-secrets", "abstract": "# Google Kubernetes Engine (GKE) - Access secrets stored outside GKE clusters using client libraries\nThis tutorial shows you how to store the sensitive data used by your Google Kubernetes Engine (GKE) clusters in Secret Manager, and more securely access the data from your Pods using workload identity federation for GKE and the Google Cloud client libraries. This tutorial is intended for security administrators who want to move sensitive data out of in-cluster storage.\nStoring your sensitive data outside your cluster storage reduces the risk of unauthorized access to the data if an attack occurs. Using workload identity federation for GKE to access the data lets you avoid the risks associated with managing long-lived service account keys, and lets you control access to your secrets using Identity and Access Management (IAM) instead of in-cluster RBAC rules. You can use any external secret store provider, such as Secret Manager or HashiCorp Vault.\nThis tutorial uses a GKE Autopilot cluster. To perform the steps using GKE Standard, you must [enable workload identity federation for GKE manually](/kubernetes-engine/docs/how-to/workload-identity) .\nYou can use workload identity federation for GKE to access any Google Cloud APIs from GKE workloads without having to use less secure approaches like static service account key files. This tutorial uses Secret Manager as an example, but you can use the same steps to access other Google Cloud APIs. To learn more, see [Workload identity federation for GKE](/kubernetes-engine/docs/concepts/workload-identity) .\n", "content": "## Objectives\n- Create a secret in Google Cloud Secret Manager.\n- Create and configure IAM service accounts to access the secret.\n- Create a GKE Autopilot cluster, Kubernetes namespaces, and Kubernetes ServiceAccounts.\n- Use test applications to verify service account access.\n- Run a sample app that accesses the secret using the Secret Manager API.\n## CostsIn this document, you use the following billable components of Google Cloud:- [GKE Autopilot](/kubernetes-engine/pricing) \n- [Secret Manager](/secret-manager/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin- Grant roles to your Google Account. Run the following command once for each of the following   IAM roles: `roles/secretmanager.admin, roles/container.clusterAdmin, roles/iam.serviceAccountAdmin` ```\ngcloud projects add-iam-policy-binding PROJECT_ID --member=\"user:EMAIL_ADDRESS\" --role=ROLE\n```- Replace``with your project ID.\n- Replace``with your email address.\n- Replace``with each individual role.\n## Prepare the environmentClone the GitHub repository that contains the sample files for this tutorial:\n```\ngit clone https://github.com/GoogleCloudPlatform/kubernetes-engine-samplescd ~/kubernetes-engine-samples/security/wi-secrets\n```## Create a secret in Secret Manager\n- The following example shows the data you'll use to create a secret:```\nkey=my-api-key\n```\n- Create a secret to store the sample data:```\ngcloud secrets create bq-readonly-key \\\u00a0 \u00a0 --data-file=manifests/bq-readonly-key \\\u00a0 \u00a0 --ttl=3600s\n```This command does the following:- Creates a new Secret Manager secret with the sample key in the`us-central1`Google Cloud region.\n- Sets the secret to expire one hour after you run the command.## Configure IAM service accounts\n- Create two new IAM service accounts for read-only access and read-write access:```\ngcloud iam service-accounts create readonly-secrets --display-name=\"Read secrets\"gcloud iam service-accounts create readwrite-secrets --display-name=\"Read write secrets\"\n```\n- Grant the `readonly-secrets` IAM service account read-only access to the secret:```\ngcloud secrets add-iam-policy-binding bq-readonly-key \\\u00a0 \u00a0 --member=serviceAccount:readonly-secrets@PROJECT_ID.iam.gserviceaccount.com \\\u00a0 \u00a0 --role='roles/secretmanager.secretAccessor'\n```\n- Grant the `readwrite-secrets` IAM service accounts read-write access to the secret:```\ngcloud secrets add-iam-policy-binding bq-readonly-key \\\u00a0 \u00a0 --member=serviceAccount:readwrite-secrets@PROJECT_ID.iam.gserviceaccount.com \\\u00a0 \u00a0 --role='roles/secretmanager.secretAccessor'gcloud secrets add-iam-policy-binding bq-readonly-key \\\u00a0 \u00a0 --member=serviceAccount:readwrite-secrets@PROJECT_ID.iam.gserviceaccount.com \\\u00a0 \u00a0 --role='roles/secretmanager.secretVersionAdder'\n```\n## Create the cluster and Kubernetes resourcesCreate a GKE cluster, Kubernetes namespaces, and Kubernetes service accounts. You create two namespaces, one for read-only access and one for read-write access to the secret. You also create a Kubernetes service account in each namespace to use with workload identity federation for GKE.- Create a GKE Autopilot cluster:```\ngcloud container clusters create-auto secret-cluster \\\u00a0 \u00a0 --region=us-central1\n```The cluster might take about five minutes to deploy. Autopilot clusters always have workload identity federation for GKE enabled. If you want to use a GKE Standard cluster instead, you must manually enable workload identity federation for GKE before you continue.\n- Create a `readonly-ns` namespace and an `admin-ns` namespace:```\nkubectl create namespace readonly-nskubectl create namespace admin-ns\n```\n- Create a `readonly-sa` Kubernetes service account and an `admin-sa` Kubernetes service account:```\nkubectl create serviceaccount readonly-sa --namespace=readonly-nskubectl create serviceaccount admin-sa --namespace=admin-ns\n```\n- Bind the IAM service accounts to the Kubernetes service accounts:```\ngcloud iam service-accounts add-iam-policy-binding readonly-secrets@PROJECT_ID.iam.gserviceaccount.com \\\u00a0 \u00a0 --member=serviceAccount:PROJECT_ID.svc.id.goog[readonly-ns/readonly-sa] \\\u00a0 \u00a0 --role='roles/iam.workloadIdentityUser'gcloud iam service-accounts add-iam-policy-binding readwrite-secrets@PROJECT_ID.iam.gserviceaccount.com \\\u00a0 \u00a0 --member=serviceAccount:PROJECT_ID.svc.id.goog[admin-ns/admin-sa] \\\u00a0 \u00a0 --role='roles/iam.workloadIdentityUser'\n```\n- Annotate the Kubernetes service accounts with the names of the bound IAM service accounts:```\nkubectl annotate serviceaccount readonly-sa \\\u00a0 \u00a0 --namespace=readonly-ns \\\u00a0 \u00a0 iam.gke.io/gcp-service-account=readonly-secrets@PROJECT_ID.iam.gserviceaccount.comkubectl annotate serviceaccount admin-sa \\\u00a0 \u00a0 --namespace=admin-ns \\\u00a0 \u00a0 iam.gke.io/gcp-service-account=readwrite-secrets@PROJECT_ID.iam.gserviceaccount.com\n```\nYou now have a cluster that's configured to access the secret from Pods using workload identity federation for GKE.## Verify secret accessDeploy test Pods in each namespace to verify the read-only and read-write access.- Review the read-only Pod manifest:```\n# Copyright 2022 Google LLC\n## Licensed under the Apache License, Version 2.0 (the \"License\");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 http://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an \"AS IS\" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.apiVersion: v1kind: Podmetadata:\u00a0 name: readonly-test\u00a0 namespace: readonly-nsspec:\u00a0 containers:\u00a0 - image: google/cloud-sdk:slim\u00a0 \u00a0 name: workload-identity-test\u00a0 \u00a0 command: [\"sleep\",\"infinity\"]\u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 cpu: \"150m\"\u00a0 \u00a0 \u00a0 \u00a0 memory: \"150Mi\"\u00a0 serviceAccountName: readonly-sa\n```This Pod uses the `readonly-sa` service account in the `readonly-ns` namespace.\n- Review the read-write Pod manifest:```\n# Copyright 2022 Google LLC\n## Licensed under the Apache License, Version 2.0 (the \"License\");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 http://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an \"AS IS\" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.apiVersion: v1kind: Podmetadata:\u00a0 name: admin-test\u00a0 namespace: admin-nsspec:\u00a0 containers:\u00a0 - image: google/cloud-sdk:slim\u00a0 \u00a0 name: workload-identity-test\u00a0 \u00a0 command: [\"sleep\",\"infinity\"]\u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 cpu: \"150m\"\u00a0 \u00a0 \u00a0 \u00a0 memory: \"150Mi\"\u00a0 serviceAccountName: admin-sa\n```This Pod uses the `admin-sa` service account in the `admin-ns` namespace.\n- Deploy the test Pods:```\nkubectl apply -f manifests/admin-pod.yamlkubectl apply -f manifests/readonly-pod.yaml\n```The Pods might take a few minutes to start running. To monitor progress, run the following command:```\nwatch kubectl get pods -n readonly-ns\n```When the Pod status changes to `RUNNING` , press `Ctrl+C` to return to the command-line.\n### Test read-only access\n- Open a shell in the `readonly-test` Pod:```\nkubectl exec -it readonly-test --namespace=readonly-ns -- /bin/bash\n```\n- Try to read the secret:```\ngcloud secrets versions access 1 --secret=bq-readonly-key\n```The output is `key=my-api-key` .\n- Try to write new data to the secret:```\nprintf \"my-second-api-key\" | gcloud secrets versions add bq-readonly-key --data-file=```The output is similar to the following:```\nERROR: (gcloud.secrets.versions.add) PERMISSION_DENIED: Permission 'secretmanager.versions.add' denied for resource 'projects/PROJECT_ID/secrets/bq-readonly-key' (or it may not exist).\n```The Pod using the read-only service account can only read the secret, and can't write new data.\n- Exit the Pod:```\nexit\n```\n### Test read-write access\n- Open a shell in the `admin-test` Pod:```\nkubectl exec -it admin-test --namespace=admin-ns -- /bin/bash\n```\n- Try to read the secret:```\ngcloud secrets versions access 1 --secret=bq-readonly-key\n```The output is `key=my-api-key` .\n- Try to write new data to the secret:```\nprintf \"my-second-api-key\" | gcloud secrets versions add bq-readonly-key --data-file=```The output is similar to the following:```\nCreated version [2] of the secret [bq-readonly-key].\n```\n- Read the new secret version:```\ngcloud secrets versions access 2 --secret=bq-readonly-key\n```The output is `my-second-api-key` .\n- Exit the Pod:```\nexit\n```\nThe Pods only get the level of access you granted to the IAM service account that is bound to the Kubernetes service account used in the Pod manifest. Any Pods that use the `admin-sa` Kubernetes account in the `admin-ns` namespace can write new versions of the secret, but any Pods in the `readonly-ns` namespace that use the `readonly-sa` Kubernetes service account can only read the secret.## Access secrets from your codeIn this section, you do the following:- Deploy a sample application that reads your secret in Secret Manager using client libraries.\n- Check that the application can access your secret.\nYou should access Secret Manager secrets from your application code whenever possible, using the Secret Manager API.- Review the sample application source code: [  security/wi-secrets/main.go ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/security/wi-secrets/main.go) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/security/wi-secrets/main.go) ```\n// Copyright 2022 Google LLC//// Licensed under the Apache License, Version 2.0 (the \"License\");// you may not use this file except in compliance with the License.// You may obtain a copy of the License at//// \u00a0 \u00a0 http://www.apache.org/licenses/LICENSE-2.0//// Unless required by applicable law or agreed to in writing, software// distributed under the License is distributed on an \"AS IS\" BASIS,// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.// See the License for the specific language governing permissions and// limitations under the License.package mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"os\"\u00a0 \u00a0 \u00a0 \u00a0 secretmanager \"cloud.google.com/go/secretmanager/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 secretmanagerpb \"google.golang.org/genproto/googleapis/cloud/secretmanager/v1\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 // Get environment variables from Pod spec.\u00a0 \u00a0 \u00a0 \u00a0 projectID := os.Getenv(\"PROJECT_ID\")\u00a0 \u00a0 \u00a0 \u00a0 secretId := os.Getenv(\"SECRET_ID\")\u00a0 \u00a0 \u00a0 \u00a0 secretVersion := os.Getenv(\"SECRET_VERSION\")\u00a0 \u00a0 \u00a0 \u00a0 // Create the Secret Manager client.\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := secretmanager.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"failed to setup client: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 // Create the request to access the secret.\u00a0 \u00a0 \u00a0 \u00a0 accessSecretReq := &secretmanagerpb.AccessSecretVersionRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/secrets/%s/versions/%s\", projectID, secretId, secretVersion),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 secret, err := client.AccessSecretVersion(ctx, accessSecretReq)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"failed to access secret: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Print the secret payload.\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 // WARNING: Do not print the secret in a production environment - this\u00a0 \u00a0 \u00a0 \u00a0 // snippet is showing how to access the secret material.\u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"Welcome to the key store, here's your key:\\nKey: %s\", secret.Payload.Data)}\n```This application calls the Secret Manager API to try and read the secret.\n- Review the sample application Pod manifest: [  security/wi-secrets/manifests/secret-app.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/security/wi-secrets/manifests/secret-app.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/security/wi-secrets/manifests/secret-app.yaml) ```\n# Copyright 2022 Google LLC\n## Licensed under the Apache License, Version 2.0 (the \"License\");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 http://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an \"AS IS\" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.apiVersion: v1kind: Podmetadata:\u00a0 name: readonly-secret-test\u00a0 namespace: readonly-nsspec:\u00a0 containers:\u00a0 - image: us-docker.pkg.dev/google-samples/containers/gke/wi-secret-store:latest\u00a0 \u00a0 name: secret-app\u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 - name: PROJECT_ID\u00a0 \u00a0 \u00a0 \u00a0 value: \"YOUR_PROJECT_ID\"\u00a0 \u00a0 \u00a0 - name: SECRET_ID\u00a0 \u00a0 \u00a0 \u00a0 value: \"bq-readonly-key\"\u00a0 \u00a0 \u00a0 - name: SECRET_VERSION\u00a0 \u00a0 \u00a0 \u00a0 value: \"latest\"\u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 cpu: \"125m\"\u00a0 \u00a0 \u00a0 \u00a0 memory: \"64Mi\"\u00a0 serviceAccountName: readonly-sa\n```This manifest does the following:- Creates a Pod in the`readonly-ns`namespace that uses the`readonly-sa`service account.\n- Pulls a sample application from a Google image registry. This application calls the Secret Manager API using the Google Cloud client libraries. You can view the application code in`/main.go`in the repository.\n- Sets environment variables for the sample application to use.\n- Replace environment variables in the sample application:```\nsed -i \"s/YOUR_PROJECT_ID/PROJECT_ID/g\" \"manifests/secret-app.yaml\"\n```\n- Deploy the sample app:```\nkubectl apply -f manifests/secret-app.yaml\n```The Pod might take a few minutes to start working. If the Pod needs a new node in your cluster, you might notice `CrashLoopBackOff` type events while GKE provisions the node. The crashes stop when the node provisions successfully.\n- Verify the secret access:```\nkubectl logs readonly-secret-test -n readonly-ns\n```The output is `my-second-api-key` . If the output is blank, the Pod might not be running yet. Wait a few minutes and try again.\n## Alternative approachesIf you need to your sensitive data to your Pods, use the Secret Manager add-on for GKE ( [Preview](/products#launch_stages) ). This add-on deploys and manages the Google Cloud Secret Manager provider for the Kubernetes Secret Store CSI driver in your GKE clusters. For instructions, see [Use Secret Manager add-on with GKE](/secret-manager/docs/secret-manager-managed-csi-component) .\nProviding secrets as mounted volumes has the following risks:- Mounted volumes are susceptible to directory traversal attacks.\n- Environment variables can be compromised due to misconfigurations such as opening a debug endpoint.\nWhenever possible, we recommend that you programmatically access secrets through the Secret Manager API. For instructions, use the sample application in this tutorial or refer to [Secret Manager client libraries](/secret-manager/docs/reference/libraries) .## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\n### Delete individual resources\n- Delete the cluster:```\ngcloud container clusters delete secret-cluster \\\u00a0 \u00a0 --region=us-central1\n```\n- Delete the IAM service accounts:```\ngcloud iam service-accounts delete readonly-secrets@PROJECT_ID.iam.gserviceaccount.comgcloud iam service-accounts delete readwrite-secrets@PROJECT_ID.iam.gserviceaccount.com\n```\n- Optional: Delete the secret in Secret Manager:```\ngcloud secrets delete bq-readonly-key\n```If you don't do this step, the secret automatically expires because you set the `--ttl` flag during creation.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- Delete a Google Cloud project:\n- ```\ngcloud projects delete PROJECT_ID\n```\n## What's next\n- [Learn more about how workload identity federation for GKE works](/kubernetes-engine/docs/concepts/workload-identity) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Google Kubernetes Engine (GKE)"}