{"title": "Google Kubernetes Engine (GKE) - LoadBalancer Service parameters", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/service-load-balancer-parameters", "abstract": "# Google Kubernetes Engine (GKE) - LoadBalancer Service parameters\nThis page describes parameters for Service manifests which control LoadBalancer Service behavior and configuration. Before reading this page, you should be familiar with [Google Kubernetes Engine (GKE) LoadBalancer ServiceConcepts](/kubernetes-engine/docs/concepts/service-load-balancer) .\n", "content": "## Service parameters\nGKE supports the following parameters for LoadBalancer Services.\n| Parameter              | Service field and description                                                                                      | Internal | External | Version Support                    |\n|:-----------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------:|-----------:|:--------------------------------------------------------------------------------------------|\n| Internal passthrough Network Load Balancer      | networking.gke.io/load-balancer-type: \"Internal\" Instructs GKE to create an internal passthrough Network Load Balancer. For details, see LoadBalancer Service Concepts.                                                   |  nan |  nan | All supported versions.                  |\n| Backend service-based external passthrough Network Load Balancer | cloud.google.com/l4-rbs: \"enabled\" Instructs GKE to create a backend service-based external passthrough Network Load Balancer. For details, see LoadBalancer Service Concepts.                                                 |  nan |  nan | GKE 1.25.5+                     |\n| External Traffic Policy           | spec.externalTrafficPolicy Controls which node VMs pass load balancer health checks and how packets are routed to ready and serving Pods in the cluster. Also controls how nodes are grouped into GCE_VM_IP NEGs when GKE subsetting is enabled. For details, see LoadBalancer Service Concepts.                    |  nan |  nan | GKE 1.14+ (1.23.4-gke.400+ for Windows node pool).           |\n| Health check port            | spec.healthCheckNodePort Deploys a load balancer health check for LoadBalancer Services. This parameter is only relevant when spec.externalTrafficPolicy is Local.                                                    |  nan |  nan | All supported versions.                  |\n| Firewall rules and source IP address allowlist     | spec.loadBalancerSourceRanges Configures optional firewall rules in GKE and in the VPC network to only allow certain source ranges.                                                            |  nan |  nan | All supported versions.                  |\n| Static IP address            | spec.loadBalancerIP Specifies a static IP address assigned to the forwarding rule of the load balancer.                                                                   |  nan |  nan | All supported versions.                  |\n| Network Service Tiers           | metadata:annotations:cloud.google.com/network-tier Specifies which Network Service Tiers GKE uses for the external forwarding rule and IP address. The annotation valid values are Standard and Premium (default).                                        |  nan |  nan | GKE 1.19 and later.                   |\n| Custom subnet             | networking.gke.io/internal-load-balancer-subnet: SUBNET_NAME Specifies a subnet in the cluster's VPC network and region to use for the internal passthrough Network Load Balancer's forwarding rule IP address.                                         |  nan |  nan | Preview in GKE 1.17+ and 1.16.8-gke.10+. Generally available in GKE 1.17.9-gke.600+   |\n| Global access             | networking.gke.io/internal-load-balancer-allow-global-access: \"true\" Enables the IP address of the forwarding rule to be accessible by clients in any region of the VPC network or a connected network.                                           |  nan |  nan | Preview in GKE 1.16+. Generally available in GKE 1.17.9-gke.600+.       |\n| All ports              | No annotation required, but GKE subsetting must be enabled. GKE automatically configures the forwarding rule to use all ports if at least six (up to 100) unique ports are specified in spec.ports[].port.                                          |  nan |  nan | GKE version 1.18.19-gke.1400 or later              |\n| ipFamilyPolicy             | spec.ipFamilyPolicy Defines how GKE allocates IP addresses to a Service. You can define the spec.ipFamilyPolicy as SingleStack, PreferDualStack, or RequireDualStack. To learn more, see IPv4/IPv6 dual-stack Services.                                       |  nan |  nan | GKE clusters in version 1.29 or later support dual-stack network for LoadBalancer Services. |\n| ipFamilies (Optional)           | spec.ipFamilies Defines the IP family to allocate either single-stack or dual-stack Services. Use any of the following values: IPv4 for single-stack IPv4 Service only. IPv6 for IPv6 Service only. IPv4,IPv6 for dual-stack Service where the primary IP address of the Service is IPv4. IPv6,IPv4 for dual-stack Service where the primary IP address of the Service is IPv6. |  nan |  nan | GKE clusters in version 1.29 or later support dual-stack network for LoadBalancer Services. |\n### Health check port\nAs described in [Load balancer health checks and externalTrafficPolicy](#health_check) , GKE always deploys a load balancer health check when it creates an external passthrough Network Load Balancer or internal passthrough Network Load Balancer.\nWhether you can set up `healthCheckNodePort` parameter or not depends on the following `externalTrafficPolicy` configuration:\n| externalTrafficPolicy | Health check port                                                                               |\n|:------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Cluster     | You cannot use spec.healthCheckNodePort.                                                                         |\n| Local     | You can select a custom port by using the spec.healthCheckNodePort. If unspecified, the Kubernetes control plane assigns a health check port from the node port range. Note: The kube-proxy always responds to packets sent to the health check node port. Health checks for LoadBalancer Services cannot be answered by serving Pods. |\n**Warning:** Don't customize the external passthrough Network Load Balancer or internal passthrough Network Load Balancer by modifying its health check resource outside of GKE. GKE does not offer any other customization parameters for load balancer health checks created for LoadBalancer Services.\n### Firewall rules and source IP address allowlist\nWhen you create a LoadBalancer Service, GKE creates a [VPC firewall rule corresponding to the Service](/kubernetes-engine/docs/concepts/firewall-rules#service-fws) . Each firewall rule has the following characteristics:\n- The firewall rule's direction is ingress, and its action is allow. The [implied deny ingress firewallrules](/vpc/docs/firewalls#default_firewall_rules) in Google Cloud mean that GKE uses an allowlist model when creating ingress firewall rules.\n- GKE sets the firewall rule's protocol and destination port to those specified in the Service's`spec.ports[]`list.\n- GKE sets the destination for the firewall rule by setting its [target parameter](/vpc/docs/firewalls#sources_or_destinations_for_the_rule) to the virtual IP address of the LoadBalancer.\n- If the Service includes`spec.loadBalancerSourceRanges[]`, GKE sets the firewall rule's source parameter to the IP addresses in that list. If the Service does not include`loadBalancerSourceRanges[]`, GKE sets the firewall rule's source parameter to all IP addresses`(0.0.0.0/0)`.\n**Important:** For an ingress firewall rule, the target parameter defines destination IP addresses as [all IP addresses associated with a VM](/vpc/docs/firewalls#targets_and_ips_ingress) , not just the IP address of an individual load balancer.\nThe firewall rule created for a LoadBalancer Service allows packets, matching that Service's protocol and destination ports, to the Service's virtual IP address.\nWhen a cluster contains two or more Services that share at least one common protocol and destination port, the effective set of source ranges is the union of `loadBalancerSourceRanges` for all Services that specify that protocol and destination port combination. This is because the target parameter of an ingress firewall rule defines the destination IP addresses as [all IP addresses associated with a VM](/vpc/docs/firewalls#targets_and_ips) .\nConsider a cluster that has two LoadBalancer Services:\n- The first Service's`spec.ports[0].port`is TCP port`80`, and its`spec.loadBalancerSourceRanges=[100.10.0.0/16]`. The resulting load balancer corresponding to this Service has IP address`192.0.2.2`.\n- The second Service's`spec.ports[0].port`is TCP port`80`,`spec.ports[1].port`is TCP port`90`, and its`spec.loadBalancerSourceRanges=[172.16.0.0/24]`. The resulting load balancer corresponding to this Service has IP address`198.51.100.3`.\nGKE creates two ingress-allow firewall rules in the cluster's Virtual Private Cloud network. Both firewall rules specify all nodes of the cluster as their targets:\n- The first firewall rule allows packets to TCP destination port`80`from source`100.10.0.0/16`.\n- The second firewall rule allows packets to TCP destination ports`80`and`90`from source`172.16.0.0/24`.\nThe first forwarding rule routes traffic matching the `192.0.2.2:80` destination. The second forwarding rule routes traffic matching both the `198.51.100.3:80` and `198.51.100.3:90` destinations. All three of the following are valid destinations on each node: `192.0.2.2:80` , `198.51.100.3:80` , and `198.51.100.3:90` . This means that:\n- Both Services accept packets to TCP port`80`from theof the IP address source ranges, from either`100.10.0.0/16`or`172.16.0.0/24`.\n- The second Service accepts packets to TCP port`90`from`172.16.0.0/24`.\nThe effective set of source ranges for all Services using the same protocol and destination port combination becomes all IP addresses if `spec.loadBalancerSourceRanges` is omitted on at least one Service using that protocol and destination port combination. For example, If the second Service had omitted `spec.loadBalancerSourceRanges` , the second firewall's source would be `0.0.0.0/0` , and:\n- Both Services would accept packets to TCP port 80 from the union of the IP address source ranges, from either`100.10.0.0/16`or`0.0.0.0/0`. Because the`0.0.0.0/0`range includes the`100.10.0.0/16`range, the effective source for packets to TCP port 80 is any IP address.\n- The second Service would accept packets to TCP port`90`from`0.0.0.0/0`(any IP address).\n### Static IP address\nYou can create a static IP address and configure GKE to assign that static IP address to the load balancer's forwarding rule. This ensures that the load balancer's IP address remains the same even if you make changes to the LoadBalancer Service. Without this annotation, the IP address that GKE assigns to the forwarding rule of an external passthrough Network Load Balancer or internal passthrough Network Load Balancer can change when you update a LoadBalancer Service.\nTo keep a consistent IP address, you can specify a static IPv4 address for one or more LoadBalancer Services by using the `spec.loadBalancerIP` parameter.\n**Important:** The IP address defined by `spec.loadBalancerIP` is assigned to the load balancer's forwarding rule (for the load balancer). This IP address is not the same as the one specified in the Service's `spec.clusterIP` . The ClusterIP for a Service is always constant.\nWhen two or more LoadBalancer Services reference the same `spec.loadBalancerIP` , each LoadBalancer Service must use a unique combination of protocols and ports according to these rules:\n| Unnamed: 0        | Internal                                                                                                                                                                 | External                                                                                                                                   |\n|:------------------------------------------|||\n| Forwarding rule       | The forwarding rule for an internal passthrough Network Load Balancer must use a unique combination of internal IP address, protocol, and port.                                                                                                                               | The forwarding rule for an external passthrough Network Load Balancer must use a unique combination of external IP address, protocol, and port range.                                                                                               |\n| Port range        | When an internal LoadBalancer Service has six or more spec.ports[] specified, GKE configures the forwarding rule for the internal passthrough Network Load Balancer to use all ports. When a forwarding rule uses all ports, no other forwarding rule (therefore, no other internal LoadBalancer Service) can use the same IP address.                                                                                 | The port range includes all ports the Service needs, but can often also include more port numbers not used by the Service. For example, an external LoadBalancer Service powered by a target pool based external passthrough Network Load Balancer which specifies ports 80 and 443 in its Service manifest must use a forwarding rule that assigns the port range of 80-443. This port range prevents other external LoadBalancer Services from using any of the ports between 80 and 443.            |\n| Static IP address region     | The internal passthrough Network Load Balancer requires a regional internal IPv4 address in the same region as the cluster.                                                                                                                                    | The external passthrough Network Load Balancer requires a regional external IPv4 address in the same region as the cluster.                                                                                                      |\n| Static IP address Network Service Tiers | Not configurable, because all internal addresses are Premium tier.                                                                                                                                                   | The static external IP address you reserve for the external external passthrough Network Load Balancer's forwarding rule must use the same tier as specified in the Service manifest's metadata:annotations:cloud.google.com/network-tier annotation. If the metadata:annotations:cloud.google.com/network-tier annotation is not present, the static external IP address you reserve for the external passthrough Network Load Balancer's forwarding rule must use the project's default tier (Premium, unless configured differently). |\n| Additional static IP address requirements | The static internal IP address you reserve for the internal passthrough Network Load Balancer's forwarding rule must have a SHARED_LOADBALANCER_VIP purpose and be sourced from one of the following subnet IP address ranges: If the Service manifest specifies a custom subnet using the networking.gke.io/internal-load-balancer-subnet annotation, the static internal IP address you reserve must come from the primary subnet IPv4 address range of that custom subnet. If the Service manfiest does not specify any custom subnet, the static internal IP address you reserve must come from the primary subnet IPv4 address range of the cluster's subnet. | Not applicable.                                                                                                                                 |\n### Custom subnet\nFor internal LoadBalancer Services, you can specify any existing subnet, in the same VPC network and region as the cluster, by using the `networking.gke.io/internal-load-balancer-subnet` annotation:\n```\n\u00a0 \u00a0metadata:annotations: networking.gke.io/internal-load-balancer-subnet: SUBNET_NAME\n```\nGKE selects an internal IPv4 address for the load balancer's forwarding rule from the specified subnet's primary IPv4 address range. For more information, see [internal passthrough Network Load Balancer forwardingrules](/load-balancing/docs/internal#forwarding_rule) .\nCreating load balancer's forwarding rule in a different subnet is useful in the following cases:\n- Separating the load balancer's IP address from the IP address range for nodes is helpful for egress firewall configurations that are applicable to clients connecting to the cluster's Services and nodes.\n- Grouping Services from one or more clusters in the same VPC network and region into a common IP address range.\nWhen you specify an internal LoadBalancer Service without the `networking.gke.io/internal-load-balancer-subnet` annotation, GKE selects the IP address for the load balancer from the primary IPv4 address range of the cluster's subnet. The load balancer's forwarding rule and nodes in the cluster use the same subnet primary IPv4 address range.\nYou can create a custom subnet for internal load balancers in the following GKE versions:\n- Preview in GKE 1.17+ and 1.16.8-gke.10+\n- Generally available in GKE 1.17.9-gke.600+\nFor more information about how to assign a static IP address within a subnet's primary IPv4 address range, see [Static IP address](#spd-static-ip) .\n### Global access\nWhen the `networking.gke.io/internal-load-balancer-allow-global-access` annotation is `false` or unspecified for an internal LoadBalancer Service, GKE creates an internal passthrough Network Load Balancer whose forwarding rule has global access disabled. When global access is disabled, clients that need to access the load balancer must be located in the same region and VPC network, or a network connected to the cluster's VPC network.\nWhen the `networking.gke.io/internal-load-balancer-allow-global-access` annotation is `true` for an internal LoadBalancer Service, GKE enables the global access option on the internal passthrough Network Load Balancer's forwarding rule. Clients located in any region of the VPC network or a network connected to the cluster's VPC network can access the load balancer.\nFor more information about how global access applies to clients in a connected network, see:\n- [Client access](/load-balancing/docs/internal#client-access) in the internal passthrough Network Load Balancer documentation\n- [Internal passthrough Network Load Balancers and connected networks](/load-balancing/docs/internal/internal-tcp-udp-lb-and-other-networks) \n### All ports forwarding rules\nForwarding rules for internal passthrough Network Load Balancers support five unique port numbers or all ports.\nIn GKE clusters with GKE subsetting disabled, an internal LoadBalancer Service can only support five unique ports in the Service's `spec.ports[].port` .\nIn GKE clusters with GKE subsetting enabled, an internal LoadBalancer Service can only support up to 100 ports in the Service's `spec.ports[].port` . For internal LoadBalancer Services with between six and 100 unique `spec.ports[].port` entries, GKE configures the internal passthrough Network Load Balancer's forwarding rule to use all ports since its creation. The GKE controller enables all ports on the forwarding rule because the Service has more than five ports. When configuring a forwarding rule to use all ports, GKE only creates ingress allow firewall rules for the specific ports configured in `spec.ports[].port` on the Service.\nFor more information about internal passthrough Network Load Balancer forwarding rules and valid port specifications, see [Forwarding rules and portspecifications](/load-balancing/docs/internal#all_ports) .\n### IPv4/IPv6 dual-stack LoadBalancer Service\nYou can create an internal or external LoadBalancer Service that can be single-stack (IPv4 only or IPv6 only) or dual-stack. Single-stack LoadBalancer Services create a single forwarding rule with either an IPv4 address or an IPv6 address. Dual-stack LoadBalancer Services create two forwarding rules: one with an IPv4 address, and another with an IPv6 address. To create a IPv4/IPv6 dual-stack LoadBalancer Service, deploy it on a [IPv4/IPv6 dual-stack cluster](/kubernetes-engine/docs/how-to/alias-ips#dual-stack) and complete any of the following depending on the type of load balancer you use:\n- For internal LoadBalancer Services, you must have GKE subsetting enabled. For more information see, enabling [internal load balancer subsetting](/kubernetes-engine/docs/how-to/internal-load-balancing#enabling_internal_load_balancer_subsetting_in_a_new_cluster) .\n- For external LoadBalancer Services, you must use a backend service-based external passthrough Network Load Balancer which uses regional backend services. For more information, see [backend service-based external network load balancer](/kubernetes-engine/docs/how-to/external-svc-lb-rbs#backend_service-based_external) .\nFor each Service, you can define `ipFamilyPolicy` and `ipFamilies` specs. To learn more, see [IPv4/IPv6 dual-stack](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services) .- LoadBalancer Services with IPv6 addresses are only supported on clusters with stack type`ipv4-ipv6`. For more information, learn how to [Use a dual-stack IP address for a VPC-native cluster](/kubernetes-engine/docs/how-to/alias-ips#dual-stack) .\n- LoadBalancer Services created with a single-stack address cannot be upgraded to dual-stack Services.\n- LoadBalancer Services created with a dual-stack addresses can be changed to single stack according to the following conditions:- A Service with ipFamilies`[\"IPv4\",\"IPv6\"]`can be changed to a Service with ipFamilies`IPv4`but not`IPv6`.\n- A Service with ipFamilies`[\"IPv6\",\"IPv4\"]`can be changed to a Service with ipFamilies`IPv6`but not`IPv4`.\n- LoadBalancer Services created with IPv6 address do not support [Static IP address](/kubernetes-engine/docs/concepts/service-load-balancer-parameters#spd-static-ip) . Changing the Service properties such as the protocol or the ports may cause a change to the load balancer virtual IP address.", "guide": "Google Kubernetes Engine (GKE)"}