{"title": "Google Kubernetes Engine (GKE) - Deploy and update from an IDE", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/developer-workflow", "abstract": "# Google Kubernetes Engine (GKE) - Deploy and update from an IDE\nIf you develop applications to run in Google Kubernetes Engine, you can use an IDE and the Cloud Code plugin to simplify key development tasks, such as testing and debugging locally and deploying to a test cluster.\n", "content": "## ObjectivesLearn how to do the following development tasks in Cloud Shell Editor, an online demonstration IDE:- Create a sample Kubernetes app.\n- Run, update, and view logs for the app in your development environment.\n- Deploy the app to a GKE cluster.\nYou can follow a similar process in your own IDE if you [install Cloud Code](/code/docs) .To follow step-by-step guidance for this task directly in the Google Cloud console, click **Guide me** :\n [Guide me](https://console.cloud.google.com/kubernetes/list/overview?walkthrough_id=kubernetes--developer-workflow) ## CostsIn this document, you use the following billable components of Google Cloud:- [GKE](/kubernetes-engine/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you beginCreate a Kubernetes cluster. [Create a cluster and deploy a workload](/kubernetes-engine/docs/quickstarts/create-cluster) shows you how.## Choose a Google Cloud project and clusterWhen you deploy your app to GKE later on in this tutorial, you will need to specify a Google Cloud project and a GKE cluster.- Go to the GKE **Clusters** page. [Go to Clusters](https://console.cloud.google.com/kubernetes/list/overview) \n- Choose a project that contains a GKE cluster.\n- Note the name of the project and cluster.You'll need this information later.\n## Create an app in Cloud Shell Editor\n- In the Google Cloud console, open Cloud Shell by clicking terminal **Cloud Shell** in the task bar.\n- Click .\n- Wait for Cloud Shell Editor to initialize.\n- In Cloud Shell Editor, click **View** > **Command Palette** .\n- Search for **Cloud Code: New Application** and click it.\n- Select **Kubernetes Application** , then select **Go: Hello World** .Each language framework provides slightly different experiences, and this tutorial describes the features available for Go.\n- In the Save dialog, click **Create new application** .Cloud Shell Editor reloads and shows your app source files in the Explorer view.\nThe app consists of:- A basic `go-hello-world` web app, , that returns a templated \"It's running!\" response to all received requests.\n- A Kubernetes Deployment specification, .\n- A Kubernetes Service specification that defines a load balancer for the app, .\n- A [Skaffold](https://skaffold.dev/) file that handles the workflow for building and deploying the app, .\n## Run the app in your development environmentWhen possible, run apps in your development environment before deploying to GKE. This can help you identify any potential issues without using Google Cloud quota.\nTo run the app in your Cloud Shell Editor environment:- In Cloud Shell Editor, click **Terminal** > **New Terminal** .\n- Start a cluster by running the following command:```\nminikube start\n``` is a lightweight Kubernetes implementation that creates a VM in your local environment and deploys a simple cluster containing only one node.It might take a minute to set up the minikube cluster.\n- If prompted to authorize Cloud Shell to make Cloud API calls, click **Authorize** .After your minikube cluster is set up, a message similar to the following appears:```\nDone! kubectl is now configured touse \"minikube\" cluster...\n```\nAfter minikube is set up, build and run your app:- In the Cloud Shell Editor status bar, click .\n- Select **Run on Kubernetes** .\n- If prompted, confirm that you want to use the current minikube context.Cloud Shell Editor builds your app and deploys it to the minikube cluster.\n- Watch the deployment status in the view.When the deployment is complete, a green check mark appears next to **Portforward URLs** . The spinning icon appears next to **Stream Application Logs** .\n- To view your app, look further down the **Development sessions** pane and find **Port Forward URLs** > **service** .\n- Hold the pointer over and click open_in_new **Open URL** .\n## Edit your appWhen you change a source file in your app, Cloud Shell Editor automatically builds and deploys your app to the cluster that you're currently connected to. In this case, you're connected to your minikube cluster.\nTo edit and redeploy the app to your local minikube cluster:- Modify your file to print \"It's redeployed!\". The file saves automatically.\n- Watch the view as your app is rebuilt and deployed.\n- View your redeployed app as you did before:- In the **Development sessions** pane, find **Port Forward URLs** > **service** .\n- Hold the pointer over and click open_in_new **Open URL** .## View app logs\n- In the Cloud Shell Editor menu bar, select **View** > **Command Palette** .\n- Search for **Cloud Code: View Logs** and click it.The Logs Viewer opens.\n- In , select `go-hello-world` .This filters the Logs Viewer to only display logs for your `go-hello-world` app.\n- Switch to the tab with your app that shows \"It's redeployed!\" Reload the page in the browser and then switch back to the Cloud Shell tab.\n- To view the newly generated logs in the Logs Viewer, click refresh .\n## Deploy your app to a GKE cluster\n- Add your GKE cluster to the list of clusters you can deploy to:- In the view, click add **Add a Cluster to the KubeConfig** .\n- In the **Choose a platform** dialog, click **Google Kubernetes Engine** .\n- If prompted to enable the Google Cloud API, click **Yes** .\n- Wait for Cloud Shell Editor to find the clusters in your Google Cloud project.\n- In the **Create or choose a GKE cluster** dialog, select the name of the cluster you created, **hello-world-cluster** .\n- In the Cloud Shell Editor status bar, click and select **Run on Kubernetes** .\n- When prompted to select a context for your deployment request, choose **Use current context** , which is set to your GKE cluster.\n- In the **Choose image repository** dialog, select **gcr.io/PROJECT_NAME** .Cloud Shell Editor builds your app into a container and stores the container in the repository you selected.\n- Watch the view as your app is rebuilt and deployed.\n- To view detailed log messages as your app is being deployed to GKE, click the **Deploy to Cluster** node in the **Development sessions** view.\n- To view your running app:- Close the view by clicking the **Development sessions** heading.\n- Open the view.\n- Expand your GKE cluster.\n- Go to **Namespaces > default > Services > go-hello-world-external > External IPs** .\n- Hold the pointer over the IP address and click open_in_new **Open URL** .\nYou have successfully created and deployed a GKE app from an IDE.## What's next\n- [View code samples](/docs/samples) demonstrating the usage of Google Cloud products\n- [Install Cloud Code](/code/docs) in your IDE\n- [Clean up to avoid billing charges](/kubernetes-engine/docs/quickstarts/learning-path-cleanup) . If you plan to take additional tutorials, wait until you finish those tutorials before you clean up. You can use the sample Kubernetes cluster in most GKE tutorials.", "guide": "Google Kubernetes Engine (GKE)"}