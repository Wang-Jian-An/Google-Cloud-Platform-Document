{"title": "Google Kubernetes Engine (GKE) - About release channels", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/release-channels", "abstract": "# Google Kubernetes Engine (GKE) - About release channels\nUse release channels for Google Kubernetes Engine (GKE) to pick versions for your clusters with your chosen balance between feature availability and stability.\nGKE automatically upgrades all clusters over time, including those not enrolled in a release channel, to ensure that they receive security updates, fixes to known issues, new features, and run a supported Kubernetes version. You can control the timing of upgrades with [maintenance windows andexclusions](/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions) .\nWe recommend enrolling your cluster in a release channel, as this gives you the most control with regards to the [scope of maintenanceexclusions](/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions#scope_of_maintenance_to_exclude) \u2014temporarily preventing specific types of upgrades instead of all upgrades\u2014and [sequencingthe rollout of clusterupgrades](/kubernetes-engine/docs/concepts/about-rollout-sequencing) . Autopilot clusters can only be enrolled in a release channel.\nIf you [don't enroll your Standard cluster](#no_channel) in a release channel, you can [disable nodeauto-upgrades](/kubernetes-engine/docs/how-to/node-auto-upgrades#disable) for selected node pools and manually manage upgrades to the nodes in these node pools. However, all clusters' control planes are automatically upgraded, and when a version reaches [end-of-life](/kubernetes-engine/versioning#lifecycle) , cluster control planes and nodes are automatically upgraded regardless of release channel enrollment. To learn more, see [when not to enroll your clusterin a release channel](#no_channel) .\n", "content": "## What channels are available\nThe following table explains the properties of available release channels, each offering a trade-off between feature availability and update churn. All channels offer supported releases of GKE and are considered generally available (GA), although individual features might not always be GA, as marked. The Kubernetes releases in these channels are official Kubernetes releases and include both GA and beta Kubernetes APIs.\n| Channel   | New Kubernetes release availability   | When to use this channel                                                                                                                                             |\n|:------------------|:--------------------------------------------||\n| Rapid    | Several weeks after upstream open source GA | Get the latest Kubernetes release as early as possible, and be able to use new GKE features the moment they go GA. GKE upgrades your cluster frequently to stay on the latest available patch version, and deliver newer Kubernetes capabilities. Clusters subscribed to the Rapid channel use GA versions, however we recommend to use the Rapid channel to test newer Kubernetes versions and API on pre-production environments. Caution: As Rapid channel provides the newest GKE versions, these versions are excluded from the GKE SLA and may contain issues without known workarounds. |\n| Regular (default) | 2-3 months after releasing in Rapid   | Access GKE and Kubernetes features reasonably soon after they go GA, but on a version that has been qualified over a longer period of time. Offers a balance of feature availability and release stability, and is what we recommend for most users.                                                                                     |\n| Stable   | 2-3 months after releasing in Regular  | Prioritize stability over new features. GKE rolls out changes and new versions in this channel last, after being validated on the Rapid and Regular channels, which allows even more time for validation.                                                                                                |\n**Note:** Exact release schedules depend on multiple factors, including the open source release and patching schedule, and therefore are subject to change. To stay informed with the latest information, review the [GKErelease notes](/kubernetes-engine/docs/release-notes) or subscribe to the RSS feed for your channel.\nWhen you enroll a cluster in a release channel, that cluster is upgraded automatically on or after the date specified in the **Upgrade** column of the [GKE release schedule](/kubernetes-engine/docs/release-schedule) .\nWhen a version has accumulated usage and demonstrated stability across clusters in the **Rapid channel** , it is promoted to the **Regular channel** . Eventually, the version is promoted to the **Stable channel** , which only receives high-priority updates. Each promotion signals a graduating level of stability and production-readiness, based on observed performance of clusters running that version.\nCritical security patches are delivered to **all** release channels, to protect your clusters and Google's infrastructure.\n## What versions are available in a channel\nEach release channel offers a default version, selected from a set of available versions for that channel. These versions have met the [qualification standards](#what_channel_should_i_use) for that specific channel. Over time, GKE automatically upgrades clusters to the default version.\n- New patch releases become availableprior to becoming default for all channels.\n- New minor releases become available:- prior to becoming default for the **Rapid channel** .\n- prior to becoming default for the **Regular** and **Stable** channels.You can test a newly available GKE version prior to upgrading your production environment. For example, you can subscribe to [upgrade notifications](/kubernetes-engine/docs/concepts/cluster-notifications) to be informed of newly available versions, and then proactively upgrade a pre-production environment to the new version before it becomes the default version.\nIf you need to keep a cluster on a specific version, for example to validate or test newer versions prior to upgrading, we recommend using [maintenance exclusions](/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions#exclusions) .\nFor versions 1.19 and later, after a minor version has been made available in a release channel, it will remain available in that release channel for new or existing clusters until it reaches its [end of life date](/kubernetes-engine/versioning#lifecycle) .\n**Note:** When you create a cluster in a release channel, if you specify an earlier version than the default version in that release channel, GKE might automatically upgrade the cluster to the default version. If you want to temporarily prevent the cluster from being automatically upgraded when you select the new channel, [configure a maintenance exclusion](/kubernetes-engine/docs/how-to/maintenance-windows-and-exclusions#configuring_a_maintenance_exclusion) before selecting the new channel.\n**Note:** Versions older than the default version for a channel are only visible through the gcloud CLI and the Kubernetes Engine API.\nTo view the default and available versions for release channels, run the following command, replacing `` with your [compute zone](/compute/docs/regions-zones#available) :\n```\ngcloud container get-server-config --format \"yaml(channels)\" --zone COMPUTE_ZONE\n```\nTo view the available versions for clusters not enrolled in a release channel, run this equivalent [command for release channels](#viewing_the_default_and_available_versions_for_release_channels) , replacing `\"yaml(channels)\"` in the command with `\"yaml(validMasterVersions)\"` .\nWhen a new GKE version becomes default in a release channel:\n- New clusters are created using the new [default version](/kubernetes-engine/docs/release-notes#current_versions) in the selected release channel.\n- Existing eligible clusters are automatically upgraded within 10 days after a new version becomes default in its release channel.\nIf 10 days have passed after a new version became default in the release channel and automatic upgrades have not started for your cluster, the delay might be due to one of the following reasons:\n- Your cluster is temporarily ineligible for automatic upgrades. This might occur because:- The cluster is outside the timeframe of a configured [maintenance window](/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions#maintenance_windows) .\n- The cluster is within the timeframe of a [maintenance exclusion](/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions#exclusions) .\n- Automatic upgrades are [paused](/kubernetes-engine/docs/deprecations#auto-upgrade-pause) because your cluster uses deprecated Kubernetes features that are removed in the next minor version.\n- The cluster was automatically upgraded to a [patch version](/kubernetes-engine/versioning#versioning_scheme) less than 24 hours ago.\n- The cluster was automatically upgraded to a [minor version](/kubernetes-engine/versioning#lifecycle) less than 30 days ago and the new default version is a new minor version.\n- GKE paused the roll out of the new [default version](/kubernetes-engine/docs/release-notes#current_versions) for technical or business reasons:- Technical issues were discovered with the new version.\n- A production freeze is in place due to a critical business season, such as Black Friday.\n### Run patch versions from a newer channel\nIn addition to the listed available versions for a release channel, GKE provides limited access to the patch versions of less mature release channels. A cluster enrolled in a release channel may use patch versions from a newer channel **if the minor versionin the newer channel is the same as the minor version available in thecluster's own release channel.**\nFor example, if the following versions were available in the **Rapid** and **Regular** channels:\n- **Rapid** : 1.23.2-gke.700, 1.22.4-gke.1500\n- **Regular** : 1.21.4-gke.400, 1.22.1-gke.400\nA cluster enrolled in the **Regular** channel that is running GKE version 1.22.1-gke.400 could upgrade to 1.22.4-gke.1500, but not to 1.23.2-gke.700 as it is a different minor version.\nTo upgrade to a patch version on a newer channel, your cluster's control plane must run a patch release with the same minor version. For example, if the cluster is running 1.21.3-gke.200, you must first upgrade the cluster to a patch version available in its current release channel, 1.22.1-gke.400. You can then upgrade the cluster to 1.22.4-gke.1500.\nYou can also create a new cluster that runs 1.22.4-gke.1500 and is enrolled in the **Regular** channel.\n**Note:** Creating or upgrading a cluster on a patch version from a newer release channel is only supported from the gcloud CLI or the GKE API.\nThe cluster will remain on the patch version from the less mature channel until the default version of the channel that the cluster is enrolled in becomes greater than the cluster version. At that time, the cluster will be auto-upgraded to the default version.\n### Learn what's new in a channel\nTo learn what's new in a release channel, review the release notes. There are separate release notes for each release channel, in addition to the overall [release notes](/kubernetes-engine/docs/release-notes) .\n| Release channel | Release notes  |\n|:------------------|:-------------------|\n| Rapid channel  | HTML or Atom feed. |\n| Regular channel | HTML or Atom feed. |\n| Stable channel | HTML or Atom feed. |\n## Choose the best release channel for your cluster\nChannels include only GA versions of Kubernetes, and each channel represents a different level of quality and maturity of the Kubernetes and GKE releases. The following diagram illustrates the adoption cycle for release channels:\nAs this diagram shows, the available [release channels](#channels) use versions in the middle of the adoption cycle, including (Rapid channel), (Regular channel), and (Stable channel). The earliest part of the adoption cycle is the , who test the newest features using the upstream Kubernetes release. The last part of the adoption cycle is the , where you are using a version that is nearing deprecation and need to transition to a supported version.\nIn your pre-production environments, use the Rapid channel for newer versions where you can test features as soon as they are generally available.\nFor production workloads that require maturity over newer functionality, we recommend using the Regular (default) channel or the Stable channel.\n- If you need to closely track new features, consider using the **Regular** channel, which offers a balance between stability and freshness of the Kubernetes OSS version.\n- If your requirement is maturity, especially for production clusters, use the **Stable** channel.\nGKE upgrades clusters to a newer version that meets the channel's quality standards. However, we recommend upgrading your clusters ahead of time because this provides you with:\n- Better control of your upgrades, and alignment with your working hours.\n- Better predictability because GKE skips auto-upgrading clusters that meet the release target (i.e., clusters that were manually upgraded to the next target version). Nodes are automatically upgraded to the recommended version in their selected channel to align with the control plane version and to protect you from vulnerabilities and [unsupported version skew](https://kubernetes.io/docs/setup/release/version-skew-policy/) .## Enroll a cluster in a release channel\nThis section shows you how to select a release channel for new clusters, or for existing clusters that didn't previously use a release channel. You can also [change the release channel](#selecting_a_new_release_channel) for an existing cluster that is already enrolled in a release channel.\nThis change does not require any downtime. However, as GKE might have different automatic upgrades available in the release channel, we recommend using [maintenance windows and exclusions](/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions#maintenance_windows) to control the timing of upgrades.\n### Enroll new clusters\nYou can create and enroll a new cluster in a release channel using gcloud CLI or the Google Cloud console. By default, new clusters are automatically enrolled in the release channel.\nFor GKE Standard clusters, you can choose to specify a different channel during creation in the Google Cloud console.- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click **Create** .\n- In the Standard section, click **Configure** .\n- Under **Control plane version** , the **Release channel** option is selected by default.\n- In the **Release channel** drop-down list, select a release channel to enroll the cluster in, or leave the default value of **Regular channel** . **Note:** [Node auto-upgrade](/kubernetes-engine/docs/how-to/node-auto-upgrades) and [node auto-repair](/kubernetes-engine/docs/how-to/node-auto-repair) are enabled by default. Node auto-upgrade cannot be disabled for a cluster subscribed to a release channel. Node auto-repair can be disabled, however we recommend keeping the default configuration.\n- Continue creating the cluster as desired.\n- Click **Create** .\nTo create and enroll a **Standard cluster** in a specific release channel, run the following command:\n```\ngcloud container clusters create CLUSTER_NAME \\\n --zone COMPUTE_ZONE \\\n --release-channel CHANNEL \\\n ADDITIONAL_FLAGS\n```\nTo create and enroll an **Autopilot cluster** in a specific release channel, run the following command:\n```\ngcloud container clusters create-auto CLUSTER_NAME \\\n --region=COMPUTE_REGION\n --release-channel CHANNEL \\\n ADDITIONAL_FLAGS\n```\nReplace the following:- ``: the name of your new cluster.\n- For regional clusters, use the`--region` ``flag and specify the [region](/compute/docs/regions-zones#available) for your cluster.\n- For zonal clusters, use the`--region` ``flag and specify the [zone](/compute/docs/regions-zones#available) for your cluster.\n- ``: the type of release channel: one of`rapid`,`regular`, or`stable`.\n- ``: any other flags you need to specify when creating your cluster. For the full list of optional flags for Standard clusters, refer to the [gcloud container clusters create](/sdk/gcloud/reference/container/clusters/create) documentation. For the full list of optional flags for Autopilot clusters, refer to the [gcloud container clusters create-auto](/sdk/gcloud/reference/container/clusters/create-auto) documentation.\nYou can also create a cluster with a specific version using the `--cluster-version` flag. If you don't specify a release channel, GKE enrolls your cluster in the most mature release channel where that version is available.\nOr, if you don't specify the release channel or cluster version, the cluster defaults to the `regular` release channel on the default version.\n### Enroll existing clusters\nYou can enroll an existing cluster in a release channel, provided that the cluster's control plane version is available in the target release channel. To check if your cluster's control plane version is available in the target release channel, [view the default and available versions for release channels](#viewing_the_default_and_available_versions_for_release_channels) . To learn more about aligning your cluster's control plane version with the available versions for your target release channel, see [Select a new release channel](#selecting_a_new_release_channel) .\nTo enroll, [update the cluster release channel](#updating_the_cluster_release_channel) to the target `` .\n**Note:** GKE does not immediately upgrade the cluster control plane and nodes to the release channel default version when enrolling. Instead, they are gradually upgraded by the GKE auto-upgrade process.\n## Find your cluster's release channel\nYou can determine your cluster's release channel using the gcloud CLI or the Google Cloud console.\n**Note:** Your cluster must be enrolled in a Release channel in order to see the release channel.\n- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click the name of the cluster you want to inspect.\n- Under **Cluster basics** , check the value in the **Release Channel** field (for example, **Regular Channel** ).\n```\ngcloud container clusters describe CLUSTER_NAME \\\n --zone COMPUTE_ZONE --format=\"value(releaseChannel.channel)\"\n```\nReplace the following:- ``: the name of your cluster.\n- ``: the [compute zone](/compute/docs/regions-zones#available) for your cluster.## Change your cluster's release channel\nYou can change the release channel of your cluster if the control plane's version is available in the target release channel. You might need to upgrade or downgrade your cluster's control plane to an available version.\nTo check if your cluster's control plane version is available in the target release channel, [view the default and available versions for release channels](#viewing_the_default_and_available_versions_for_release_channels) . The version must be available in the target channel.\n- If your cluster's control plane version is already available in the target release channel, you can select the new release channel.\n- If your cluster's control plane version is not available in the target release channel, you can upgrade the cluster's control plane to an available version. Alternatively, if the target channel only has earlier versions available, you can [downgrade the cluster](/kubernetes-engine/docs/how-to/upgrading-a-cluster#downgrading_clusters) , provided that the target version is an [earlier patch release from the same minor version](/kubernetes-engine/versioning#versioning_scheme) .\nTo select a new release channel, [update the cluster release channel](#updating_the_cluster_release_channel) to the target `` . If you want to temporarily prevent the cluster from being automatically upgraded when you select the new channel, [configure a maintenance exclusion](/kubernetes-engine/docs/how-to/maintenance-windows-and-exclusions#configuring_a_maintenance_exclusion) before selecting the new channel.\nIf you can't select the target release channel because your cluster is running a version that is not available in that release channel, you can [create a new cluster](/kubernetes-engine/docs/how-to/creating-a-regional-cluster) in the target channel and migrate your workloads. Alternatively, if you need to use your existing cluster, do the following:\n- [Configure a maintenance exclusion](/kubernetes-engine/docs/how-to/maintenance-windows-and-exclusions#configuring_a_maintenance_exclusion) with a scope of \"No minor upgrades\".\n- Wait for the [target release channel to make available](/kubernetes-engine/docs/concepts/release-channels#what_versions_are_available_in_a_channel) the Kubernetes minor version of your cluster.\n- [Enroll the existing cluster](/kubernetes-engine/docs/concepts/release-channels#existing-cluster) in the target release channel.\n### Update the cluster release channel\nYou can change your cluster's release channel using the gcloud CLI or the Google Cloud console.\n- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click the name of the cluster you want to inspect.\n- Under **Cluster basics** , in the **Release channel** field, click .\n- In the **Release channel** dropdown, select the target release channel.\n- Read and acknowledge the warning by selecting **I acknowledge the conditions.** \n- Click **Save Changes** .\nChange the release channel property of an existing cluster:\n```\ngcloud container clusters update CLUSTER_NAME \\\n --release-channel CHANNEL\n```\nReplace the following:- ``: the name of your cluster.\n- ``: the target release channel, which can be one of`rapid`,`regular`,`stable`, or`None`.## When to not enroll your cluster in a release channel\nYou can choose not to enroll a Standard cluster in a release channel (known as \"no channel\" and \"static\"). Due to the limitations with clusters not enrolled in release channels, use this option only if some node pools can't be automatically upgraded, and you must manually upgrade those nodes instead. If your cluster is not enrolled in a release channel, you can [disable nodeauto-upgrade](/kubernetes-engine/docs/how-to/node-auto-upgrades#disable) for selected node pools.\n**If you want to temporarily prevent automatic upgrades for the entire clusteror all of its nodes, use a maintenanceexclusionwith your cluster enrolled in a release channel.** With maintenance exclusions, you can temporarily disable node auto-upgrades for all node pools, whereas you can disable node auto-upgrades at the node pool level if your cluster is not enrolled in a release channel.\n**Warning:** If you disable node auto-upgrades for a node pool, you must manually upgrade those node pools to ensure that your cluster adheres to the [Kubernetesversion and version skew supportpolicy](https://kubernetes.io/docs/setup/release/version-skew-policy/) , and is using [supported GKEversions](/kubernetes-engine/docs/release-schedule) . Failure to adhere to these version policies will cause incompatibility between the control plane and nodes over time, and potentially degrade the supportability and reliability of your cluster. To learn more, see [Version supportFAQ](/kubernetes-engine/versioning#faq) .\nReview the following table to understand the similarities and differences between enrolling and not enrolling your cluster in a release channel:\n| Feature       | Cluster enrolled in a release channel                                                                  | Cluster not enrolled in a release channel                                                                   |\n|:--------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Shared upgrade behavior   | GKE automatically upgrades the cluster control plane, and, by default, automatically upgrades the nodes when new versions are scheduled for auto-upgrades, following the GKE release schedule. GKE automatically upgrades the cluster control plane and nodes after their version reaches end of life. | GKE automatically upgrades the cluster control plane, and, by default, automatically upgrades the nodes when new versions are scheduled for auto-upgrades, following the GKE release schedule. GKE automatically upgrades the cluster control plane and nodes after their version reaches end of life.   |\n| Upgrade timing     | Aligned with the respective release channel                                                                 | Same auto-upgrade start date as the Stable channel for both minor and patch versions Same available minor versions as the Regular channel Same available patch versions as the Rapid channel for those minor versions available in the Regular channel                |\n| Control of node pool disruption | Node auto-upgrades by default You can disable node auto-upgrades at cluster level for up to 6 months by creating maintenance exclusion with any type of scope You can disable node auto-repair for a Standard cluster node pool                    | Node auto-upgrades by default You can disable node-auto upgrades at the node pool level. You are responsible for ensuring your cluster adheres to version and version skew policies You can disable node-upgrades at cluster level for up to 30 days by creating maintenance exclusion with the \"No upgrades\" scope |\n| Maintenance windows    | Available                                                                         | Available                                                                           |\n| Maintenance exclusions   | Available maintenance exclusion scopes: \"No upgrades\" (30 days) \"No minor upgrades\" (6 months) \"No minor or node upgrades\" (6 months)                                          | Restricted to \"No upgrades\" scope (30 days)                                                                   |\n| Rollout sequencing    | Available with fleet-based and scope-based sequences                                                              | Not available                                                                          |\n| Autopilot      | Available                                                                         | Not available                                                                          |\n### Unsubscribe from a release channel\n**Note:** For [Autopilot](/kubernetes-engine/docs/concepts/types-of-clusters#modes) clusters, you cannot unsubscribe from a release channel.\nYou can unsubscribe your Standard cluster from a release channel using the Google Cloud console, the gcloud CLI, or the Kubernetes Engine API. You can also specify that you don't want to enroll your cluster in a release channel during cluster creation.\n- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click the name of the cluster you want to inspect.\n- Under **Cluster basics** , in the **Release channel** field, click .\n- Select the **Static version** radio button.\n- Read and acknowledge the warning by selecting **I acknowledge the conditions.** \n- Click **Save Changes** .\nUpdate the cluster's release channel to a value of `None` :\n```\ngcloud container clusters update CLUSTER_NAME \\\n --release-channel None\n```\nSpecify `\"releaseChannel\": { \"channel\": UNSPECIFIED}` when you create or update a cluster.\n## Caveats\nKeep the following caveats in mind when using release channels.\n### Differences between Rapid-channel clusters and alpha clusters\nClusters created using the Rapid release channel are not [alpha clusters](/kubernetes-engine/docs/concepts/alpha-clusters) . Here are the differences:\n- Clusters that use release channels can be upgraded, and auto-upgrade is enabled and cannot be disabled. Alpha clusters cannot be upgraded.\n- Clusters that use release channels don't expire. Alpha clusters expire after 30 days.\n- Alpha Kubernetes APIs are not enabled on clusters that use release channels.## What's next\n- Learn more about [upgrading clusters](/kubernetes-engine/docs/how-to/upgrading-a-cluster) .\n- Learn how to [Receive cluster upgrade notifications](/kubernetes-engine/docs/how-to/cluster-notifications) .\n- Learn about managing automatic cluster upgrades across environments with [rollout sequencing](/kubernetes-engine/docs/concepts/about-rollout-sequencing) .", "guide": "Google Kubernetes Engine (GKE)"}