{"title": "Google Kubernetes Engine (GKE) - \u5728 GKE \u4e0a\u90e8\u7f72\u9ad8\u53ef\u7528\u6027 PostgreSQL \u6578\u64da\u5eab", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/stateful-workloads/postgresql?hl=zh-cn", "abstract": "# Google Kubernetes Engine (GKE) - \u5728 GKE \u4e0a\u90e8\u7f72\u9ad8\u53ef\u7528\u6027 PostgreSQL \u6578\u64da\u5eab\n[PostgreSQL](https://www.postgresql.org/) \u662f\u4e00\u7a2e\u958b\u6e90\u5c0d\u8c61\u95dc\u4fc2\u578b\u6578\u64da\u5eab\uff0c\u5177\u6709\u53ef\u9760\u6027\u548c\u6578\u64da\u5b8c\u6574\u6027\u3002\u5b83\u7b26\u5408 [ACID](https://en.wikipedia.org/wiki/ACID) \u6a19\u6e96\uff0c\u4e26\u652f\u6301\u5916\u9375\u3001\u806f\u63a5\u3001\u8996\u5716\u3001\u89f8\u767c\u5668\u548c\u5b58\u5132\u904e\u7a0b\u3002\n\u672c\u6587\u6a94\u9069\u7528\u65bc\u60f3\u8981\u5728 Google Kubernetes Engine (GKE) \u4e0a\u90e8\u7f72\u9ad8\u53ef\u7528\u6027 PostgreSQL \u62d3\u64b2\u7684\u6578\u64da\u5eab\u7ba1\u7406\u54e1\u3001\u96f2\u67b6\u69cb\u5e2b\u548c\u904b\u7dad\u5c08\u696d\u4eba\u54e1\u3002", "content": "## \u76ee\u6a19\n\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u60a8\u5c07\u5b78\u7fd2\u5982\u4f55\u5b8c\u6210\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n- \u4f7f\u7528 Terraform \u5275\u5efa\u5340\u57df\u7d1a GKE \u96c6\u7fa3\u3002\n- \u90e8\u7f72\u9ad8\u53ef\u7528\u6027 PostgreSQL \u6578\u64da\u5eab\u3002\n- \u7232 PostgreSQL \u61c9\u7528\u8a2d\u7f6e\u76e3\u63a7\u3002\n- \u57f7\u884c PostgreSQL \u6578\u64da\u5eab\u548c GKE \u96c6\u7fa3\u5347\u7d1a\u3002\n- \u6a21\u64ec\u96c6\u7fa3\u4e2d\u65b7\u548c PostgreSQL \u526f\u672c\u6545\u969c\u5207\u63db\u3002\n- \u57f7\u884c PostgreSQL \u6578\u64da\u5eab\u5099\u4efd\u548c\u6062\u5fa9\u3002\n## \u67b6\u69cb\u672c\u90e8\u5206\u4ecb\u7d39\u4e86\u60a8\u5c07\u5728\u672c\u6559\u7a0b\u4e2d\u69cb\u5efa\u7684\u89e3\u6c7a\u65b9\u6848\u7684\u67b6\u69cb\u3002\n\u60a8\u5c07\u5728\u4e0d\u540c\u5340\u57df\u4e2d\u9810\u914d\u5169\u500b GKE \u96c6\u7fa3\uff1a\u4e3b\u8981\u96c6\u7fa3 \u548c\u5099\u4efd\u96c6\u7fa3 \u3002\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u4e3b\u8981\u96c6\u7fa3\u4f4d\u65bc `us-central1` \u5340\u57df\uff0c\u5099\u4efd\u96c6\u7fa3\u4f4d\u65bc `us-west1` \u5340\u57df\u3002\u85c9\u52a9\u6b64\u67b6\u69cb\uff0c\u60a8\u53ef\u4ee5\u9810\u914d\u9ad8\u53ef\u7528\u6027 PostgreSQL \u6578\u64da\u5eab\u4e26\u6e2c\u8a66\u707d\u96e3\u6062\u5fa9\uff0c\u5982\u672c\u6559\u7a0b\u5f8c\u9762\u90e8\u5206\u6240\u8ff0\u3002\n\u5c0d\u65bc\u6e90\u96c6\u7fa3\uff0c\u60a8\u5c07\u4f7f\u7528 [Helm](https://helm.sh/) \u5716\u8868 ( [bitnami/postgresql-ha](https://artifacthub.io/packages/helm/bitnami/postgresql-ha) ) \u8a2d\u7f6e\u9ad8\u53ef\u7528\u6027 PostgreSQL \u96c6\u7fa3\u3002## \u8cbb\u7528\nTitles in dynamic includes are not used anywhere, and we should avoid paying to translate them\u5728\u672c\u6587\u6a94\u4e2d\uff0c\u60a8\u5c07\u4f7f\u7528 Google Cloud \u7684\u4ee5\u4e0b\u6536\u8cbb\u7d44\u4ef6\uff1a- [Artifact Registry](https://cloud.google.com/artifact-registry/pricing?hl=zh-cn) \n- [Backup for GKE](https://cloud.google.com/kubernetes-engine/pricing?hl=zh-cn#backup-for-gke) \n- [Compute Engine](https://cloud.google.com/compute/disks-image-pricing?hl=zh-cn) \n- [GKE](https://cloud.google.com/kubernetes-engine/pricing?hl=zh-cn) \n- [Google Cloud Managed Service for Prometheus](https://cloud.google.com/stackdriver/docs/managed-prometheus?hl=zh-cn) \n\u60a8\u53ef\u4f7f\u7528 [\u50f9\u683c\u8a08\u7b97\u5668](https://cloud.google.com/products/calculator?hl=zh-cn) \u6839\u64da\u60a8\u7684\u9810\u8a08\u4f7f\u7528\u60c5\u6cc1\u4f86\u4f30\u7b97\u8cbb\u7528\u3002 \nTitles in dynamic includes are not used anywhere, and we should avoid paying to translate them\u5b8c\u6210\u672c\u6587\u6a94\u4e2d\u63cf\u8ff0\u7684\u4efb\u52d9\u5f8c\uff0c\u60a8\u53ef\u4ee5\u901a\u904e\u522a\u9664\u6240\u5275\u5efa\u7684\u8cc7\u6e90\u4f86\u907f\u514d\u7e7c\u7e8c\u8a08\u8cbb\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u6e05\u7406](#clean-up) \u3002## \u6e96\u5099\u5de5\u4f5c\n### \u8a2d\u7f6e\u9805\u76ee\n- Titles in dynamic includes are not used anywhere, and we should avoid paying to translate them\n### \u8a2d\u7f6e\u89d2\u8272- Titles in dynamic includes are not used anywhere, and we should avoid paying to translate them\n- \u5411\u60a8\u7684 Google \u8cec\u865f\u6388\u4e88\u89d2\u8272\u3002\u5c0d\u4ee5\u4e0b\u6bcf\u500b IAM \u89d2\u8272\u904b\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e00\u6b21\uff1a `role/storage.objectViewer, role/logging.logWriter, role/artifactregistry.Admin, roles/container.clusterAdmin, role/container.serviceAgent, roles/serviceusage.serviceUsageAdmin, roles/iam.serviceAccountAdmin````\n$ gcloud projects add-iam-policy-binding PROJECT_ID --member=\"user:EMAIL_ADDRESS\" --role=ROLE\n```- \u5c07``\u66ff\u63db\u7232\u60a8\u7684\u9805\u76ee ID\u3002\n- \u5c07``\u66ff\u63db\u7232\u60a8\u7684\u96fb\u5b50\u90f5\u4ef6\u5730\u5740\u3002\n- \u5c07``\u66ff\u63db\u7232\u6bcf\u500b\u89d2\u8272\u3002### \u8a2d\u7f6e\u60a8\u7684\u74b0\u5883\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u60a8\u5c07\u4f7f\u7528 [Cloud Shell](https://cloud.google.com/shell?hl=zh-cn) \u4f86\u7ba1\u7406 Google Cloud \u4e0a\u8a17\u7ba1\u7684\u8cc7\u6e90\u3002Cloud Shell \u9810\u5b89\u88dd\u6709\u672c\u6559\u7a0b\u6240\u9700\u7684\u8edf\u4ef6\uff0c\u5305\u62ec [Docker](https://www.docker.com/) \u3001 [kubectl](https://kubernetes.io/docs/reference/kubectl/) \u3001 [gcloud CLI](https://cloud.google.com/sdk/gcloud?hl=zh-cn) \u3001 [Helm](https://helm.sh/) \u548c [Terraform](https://cloud.google.com/docs/terraform?hl=zh-cn) \u3002\n\u7232\u4e86\u4f7f\u7528 Cloud Shell \u8a2d\u7f6e\u60a8\u7684\u74b0\u5883\uff0c\u8acb\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a- \u901a\u904e\u9ede\u64ca [Google Cloud \u63a7\u5236\u6aaf](http://console.cloud.google.com?hl=zh-cn) \u4e2d\u7684 **\u6fc0\u6d3b Cloud Shell** \u5f9e Google Cloud \u63a7\u5236\u6aaf\u5553\u52d5 Cloud Shell \u6703\u8a71\u3002\u6b64\u64cd\u4f5c\u6703\u5728 Google Cloud \u63a7\u5236\u6aaf\u7684\u5e95\u90e8\u7a97\u683c\u4e2d\u5553\u52d5\u6703\u8a71\u3002\n- \u8a2d\u7f6e\u74b0\u5883\u8b8a\u91cf\u3002```\nexport PROJECT_ID=PROJECT_IDexport SOURCE_CLUSTER=cluster-db1export REGION=us-central1\n```\u66ff\u63db\u4ee5\u4e0b\u503c\uff1a- \uff1a\u60a8\u7684 Google Cloud [\u9805\u76ee ID](https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=zh-cn#identifying_projects) \u3002\n- \u8a2d\u7f6e\u9ed8\u8a8d\u74b0\u5883\u8b8a\u91cf\u3002```\ngcloud config set project PROJECT_ID\n```\n- \u514b\u9686\u4ee3\u78bc\u5eab\u3002```\ngit clone https://github.com/GoogleCloudPlatform/kubernetes-engine-samples\n```\n- \u5207\u63db\u5230\u5de5\u4f5c\u76ee\u9304\u3002```\ncd kubernetes-engine-samples/databases/gke-stateful-postgres\n```\n## \u5275\u5efa\u96c6\u7fa3\u57fa\u790e\u67b6\u69cb\u5728\u672c\u90e8\u5206\u4e2d\uff0c\u60a8\u5c07\u904b\u884c Terraform \u8173\u672c\u4f86\u5275\u5efa\u81ea\u5b9a\u7fa9 Virtual Private Cloud (VPC)\u3001Artifact Registry \u5b58\u5132\u5eab\uff08\u7528\u65bc\u5b58\u5132 PostgreSQL \u6620\u50cf\uff09\u4ee5\u53ca\u5169\u500b [\u5340\u57df\u7d1a GKE \u96c6\u7fa3](https://cloud.google.com/kubernetes-engine/docs/concepts/regional-clusters?hl=zh-cn) \u3002\u4e00\u500b\u96c6\u7fa3\u5c07\u90e8\u7f72\u5728 `us-central1` \u4e2d\uff0c\u53e6\u4e00\u500b\u96c6\u7fa3\u7528\u65bc\u5099\u4efd\uff0c\u5c07\u90e8\u7f72\u5728 `us-west1` \u4e2d\u3002\n **\u6ce8\u610f** \uff1a\u60a8\u5c07\u5728\u672c\u6559\u7a0b\u4e2d\u4f7f\u7528 [Google Cloud Managed Service for Prometheus](https://cloud.google.com/stackdriver/docs/managed-prometheus?hl=zh-cn) \u548c [Backup for GKE](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/concepts/backup-for-gke?hl=zh-cn) \uff0c\u56e0\u6b64\u5275\u5efa\u548c\u5354\u8abf\u96c6\u7fa3\u6700\u9577\u53ef\u80fd\u9700\u8981 8 \u5206\u9418\u3002\n\u5982\u9700\u5275\u5efa\u96c6\u7fa3\uff0c\u8acb\u904b\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\u5728 Cloud Shell \u4e2d\uff0c\u904b\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n```\nterraform -chdir=terraform/gke-autopilot initterraform -chdir=terraform/gke-autopilot apply -var project_id=$PROJECT_ID\n```\n\u51fa\u73fe\u63d0\u793a\u6642\uff0c\u8acb\u8f38\u5165 `yes` \u3002Terraform \u914d\u7f6e\u6587\u4ef6\u6703\u5275\u5efa\u4ee5\u4e0b\u8cc7\u6e90\u4f86\u90e8\u7f72\u57fa\u790e\u67b6\u69cb\uff1a- \u5275\u5efa Artifact Registry \u5b58\u5132\u5eab\u4ee5\u5b58\u5132 Docker \u6620\u50cf\u3002 [  databases/gke-stateful-postgres/terraform/gke-autopilot/main.tf ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/gke-autopilot/main.tf) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/gke-autopilot/main.tf) ```\nresource \"google_artifact_registry_repository\" \"main\" {\u00a0 location \u00a0 \u00a0 \u00a0= \"us\"\u00a0 repository_id = \"main\"\u00a0 format \u00a0 \u00a0 \u00a0 \u00a0= \"DOCKER\"\u00a0 project \u00a0 \u00a0 \u00a0 = var.project_id}\n```\n- \u7232\u865b\u64ec\u6a5f\u7684\u7db2\u7d61\u63a5\u53e3\u5275\u5efa VPC \u7db2\u7d61\u548c\u5b50\u7db2\u3002 [  databases/gke-stateful-postgres/terraform/modules/network/main.tf ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/modules/network/main.tf) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/modules/network/main.tf) ```\nmodule \"gcp-network\" {\u00a0 source \u00a0= \"terraform-google-modules/network/google\"\u00a0 version = \"< 8.0.0\"\u00a0 project_id \u00a0 = var.project_id\u00a0 network_name = \"vpc-gke-postgresql\"\u00a0 subnets = [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 subnet_name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"snet-gke-postgresql-us-central1\"\u00a0 \u00a0 \u00a0 subnet_ip \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"10.0.0.0/17\"\u00a0 \u00a0 \u00a0 subnet_region \u00a0 \u00a0 \u00a0 \u00a0 = \"us-central1\"\u00a0 \u00a0 \u00a0 subnet_private_access = true\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 subnet_name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"snet-gke-postgresql-us-west1\"\u00a0 \u00a0 \u00a0 subnet_ip \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"10.0.128.0/17\"\u00a0 \u00a0 \u00a0 subnet_region \u00a0 \u00a0 \u00a0 \u00a0 = \"us-west1\"\u00a0 \u00a0 \u00a0 subnet_private_access = true\u00a0 \u00a0 },\u00a0 ]\u00a0 secondary_ranges = {\u00a0 \u00a0 (\"snet-gke-postgresql-us-central1\") = [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 range_name \u00a0 \u00a0= \"ip-range-pods-db1\"\u00a0 \u00a0 \u00a0 \u00a0 ip_cidr_range = \"192.168.0.0/18\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 range_name \u00a0 \u00a0= \"ip-range-svc-db1\"\u00a0 \u00a0 \u00a0 \u00a0 ip_cidr_range = \"192.168.64.0/18\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 \u00a0 (\"snet-gke-postgresql-us-west1\") = [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 range_name \u00a0 \u00a0= \"ip-range-pods-db2\"\u00a0 \u00a0 \u00a0 \u00a0 ip_cidr_range = \"192.168.128.0/18\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 range_name \u00a0 \u00a0= \"ip-range-svc-db2\"\u00a0 \u00a0 \u00a0 \u00a0 ip_cidr_range = \"192.168.192.0/18\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ]\u00a0 }}output \"network_name\" {\u00a0 value = module.gcp-network.network_name}output \"primary_subnet_name\" {\u00a0 value = module.gcp-network.subnets_names[0]}output \"secondary_subnet_name\" {\u00a0 value = module.gcp-network.subnets_names[1]}\n```\n- \u5275\u5efa\u4e3b\u8981 GKE \u96c6\u7fa3\u3002Terraform \u6703\u5728 `us-central1` \u5340\u57df\u4e2d\u5275\u5efa\u5c08\u7528\u96c6\u7fa3\uff0c\u4e26\u5553\u7528 Backup for GKE \u4ee5\u9032\u884c\u707d\u96e3\u6062\u5fa9\u548c Managed Service for Prometheus \u4ee5\u9032\u884c\u96c6\u7fa3\u76e3\u63a7\u3002\u53ea\u6709\u904b\u884c GKE 1.25 \u7248\u6216\u66f4\u9ad8\u7248\u672c\u7684 Autopilot \u96c6\u7fa3\u624d\u652f\u6301 Managed Service for Prometheus\u3002 [  databases/gke-stateful-postgres/terraform/gke-autopilot/main.tf ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/gke-autopilot/main.tf) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/gke-autopilot/main.tf) ```\nmodule \"gke-db1-autopilot\" {\u00a0 source \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"../modules/beta-autopilot-private-cluster\"\u00a0 project_id \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= var.project_id\u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"cluster-db1\"\u00a0 kubernetes_version \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"1.25\" # Will be ignored if use \"REGULAR\" release_channel\u00a0 region \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"us-central1\"\u00a0 regional \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= true\u00a0 zones \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = [\"us-central1-a\", \"us-central1-b\", \"us-central1-c\"]\u00a0 network \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = module.network.network_name\u00a0 subnetwork \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= module.network.primary_subnet_name\u00a0 ip_range_pods \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"ip-range-pods-db1\"\u00a0 ip_range_services \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"ip-range-svc-db1\"\u00a0 horizontal_pod_autoscaling \u00a0 \u00a0 \u00a0= true\u00a0 release_channel \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"RAPID\" # Default version is 1.22 in REGULAR. GMP on Autopilot requires V1.25 via var.kubernetes_version\u00a0 enable_vertical_pod_autoscaling = true\u00a0 enable_private_endpoint \u00a0 \u00a0 \u00a0 \u00a0 = false\u00a0 enable_private_nodes \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= true\u00a0 master_ipv4_cidr_block \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"172.16.0.0/28\"\u00a0 create_service_account \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= false}\n```\n- \u5728 `us-west1` \u5340\u57df\u4e2d\u5275\u5efa\u5099\u4efd\u96c6\u7fa3\u4ee5\u9032\u884c\u707d\u96e3\u6062\u5fa9\u3002 [  databases/gke-stateful-postgres/terraform/gke-autopilot/main.tf ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/gke-autopilot/main.tf) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/gke-autopilot/main.tf) ```\nmodule \"gke-db2-autopilot\" {\u00a0 source \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"../modules/beta-autopilot-private-cluster\"\u00a0 project_id \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= var.project_id\u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"cluster-db2\"\u00a0 kubernetes_version \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"1.25\" # Will be ignored if use \"REGULAR\" release_channel\u00a0 region \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"us-west1\"\u00a0 regional \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= true\u00a0 zones \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = [\"us-west1-a\", \"us-west1-b\", \"us-west1-c\"]\u00a0 network \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = module.network.network_name\u00a0 subnetwork \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= module.network.secondary_subnet_name\u00a0 ip_range_pods \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"ip-range-pods-db2\"\u00a0 ip_range_services \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"ip-range-svc-db2\"\u00a0 horizontal_pod_autoscaling \u00a0 \u00a0 \u00a0= true\u00a0 release_channel \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"RAPID\" # Default version is 1.22 in REGULAR. GMP on Autopilot requires V1.25 via var.kubernetes_version\u00a0 enable_vertical_pod_autoscaling = true\u00a0 enable_private_endpoint \u00a0 \u00a0 \u00a0 \u00a0 = false\u00a0 enable_private_nodes \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= true\u00a0 master_ipv4_cidr_block \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"172.16.0.16/28\"\u00a0 create_service_account \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= false}\n```\n\u5728 Cloud Shell \u4e2d\uff0c\u904b\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n```\nterraform -chdir=terraform/gke-standard initterraform -chdir=terraform/gke-standard apply -var project_id=$PROJECT_ID\n```\n\u51fa\u73fe\u63d0\u793a\u6642\uff0c\u8acb\u8f38\u5165 `yes` \u3002Terraform \u914d\u7f6e\u6587\u4ef6\u6703\u5275\u5efa\u4ee5\u4e0b\u8cc7\u6e90\u4f86\u90e8\u7f72\u57fa\u790e\u67b6\u69cb\uff1a- \u5275\u5efa Artifact Registry \u5b58\u5132\u5eab\u4ee5\u5b58\u5132 Docker \u6620\u50cf\u3002 [  databases/gke-stateful-postgres/terraform/gke-standard/main.tf ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/gke-standard/main.tf) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/gke-standard/main.tf) ```\nresource \"google_artifact_registry_repository\" \"main\" {\u00a0 location \u00a0 \u00a0 \u00a0= \"us\"\u00a0 repository_id = \"main\"\u00a0 format \u00a0 \u00a0 \u00a0 \u00a0= \"DOCKER\"\u00a0 project \u00a0 \u00a0 \u00a0 = var.project_id}resource \"google_artifact_registry_repository_iam_binding\" \"binding\" {\u00a0 provider \u00a0 = google-beta\u00a0 project \u00a0 \u00a0= google_artifact_registry_repository.main.project\u00a0 location \u00a0 = google_artifact_registry_repository.main.location\u00a0 repository = google_artifact_registry_repository.main.name\u00a0 role \u00a0 \u00a0 \u00a0 = \"roles/artifactregistry.reader\"\u00a0 members = [\u00a0 \u00a0 \"serviceAccount:${module.gke-db1.service_account}\",\u00a0 ]}\n```\n- \u7232\u865b\u64ec\u6a5f\u7684\u7db2\u7d61\u63a5\u53e3\u5275\u5efa VPC \u7db2\u7d61\u548c\u5b50\u7db2\u3002 [  databases/gke-stateful-postgres/terraform/modules/network/main.tf ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/modules/network/main.tf) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/modules/network/main.tf) ```\nmodule \"gcp-network\" {\u00a0 source \u00a0= \"terraform-google-modules/network/google\"\u00a0 version = \"< 8.0.0\"\u00a0 project_id \u00a0 = var.project_id\u00a0 network_name = \"vpc-gke-postgresql\"\u00a0 subnets = [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 subnet_name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"snet-gke-postgresql-us-central1\"\u00a0 \u00a0 \u00a0 subnet_ip \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"10.0.0.0/17\"\u00a0 \u00a0 \u00a0 subnet_region \u00a0 \u00a0 \u00a0 \u00a0 = \"us-central1\"\u00a0 \u00a0 \u00a0 subnet_private_access = true\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 subnet_name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"snet-gke-postgresql-us-west1\"\u00a0 \u00a0 \u00a0 subnet_ip \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"10.0.128.0/17\"\u00a0 \u00a0 \u00a0 subnet_region \u00a0 \u00a0 \u00a0 \u00a0 = \"us-west1\"\u00a0 \u00a0 \u00a0 subnet_private_access = true\u00a0 \u00a0 },\u00a0 ]\u00a0 secondary_ranges = {\u00a0 \u00a0 (\"snet-gke-postgresql-us-central1\") = [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 range_name \u00a0 \u00a0= \"ip-range-pods-db1\"\u00a0 \u00a0 \u00a0 \u00a0 ip_cidr_range = \"192.168.0.0/18\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 range_name \u00a0 \u00a0= \"ip-range-svc-db1\"\u00a0 \u00a0 \u00a0 \u00a0 ip_cidr_range = \"192.168.64.0/18\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 \u00a0 (\"snet-gke-postgresql-us-west1\") = [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 range_name \u00a0 \u00a0= \"ip-range-pods-db2\"\u00a0 \u00a0 \u00a0 \u00a0 ip_cidr_range = \"192.168.128.0/18\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 range_name \u00a0 \u00a0= \"ip-range-svc-db2\"\u00a0 \u00a0 \u00a0 \u00a0 ip_cidr_range = \"192.168.192.0/18\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ]\u00a0 }}output \"network_name\" {\u00a0 value = module.gcp-network.network_name}output \"primary_subnet_name\" {\u00a0 value = module.gcp-network.subnets_names[0]}output \"secondary_subnet_name\" {\u00a0 value = module.gcp-network.subnets_names[1]}\n```\n- \u5275\u5efa\u4e3b\u8981 GKE \u96c6\u7fa3\u3002Terraform \u6703\u5728 `us-central1` \u5340\u57df\u4e2d\u5275\u5efa\u5c08\u7528\u96c6\u7fa3\uff0c\u4e26\u5553\u7528 Backup for GKE \u4ee5\u9032\u884c\u707d\u96e3\u6062\u5fa9\u548c Managed Service for Prometheus \u4ee5\u9032\u884c\u96c6\u7fa3\u76e3\u63a7\u3002 [  databases/gke-stateful-postgres/terraform/gke-standard/main.tf ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/gke-standard/main.tf) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/gke-standard/main.tf) ```\nmodule \"gke-db1\" {\u00a0 source \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"../modules/beta-private-cluster\"\u00a0 project_id \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = var.project_id\u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"cluster-db1\"\u00a0 regional \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = true\u00a0 region \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"us-central1\"\u00a0 network \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= module.network.network_name\u00a0 subnetwork \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = module.network.primary_subnet_name\u00a0 ip_range_pods \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"ip-range-pods-db1\"\u00a0 ip_range_services \u00a0 \u00a0 \u00a0 \u00a0= \"ip-range-svc-db1\"\u00a0 create_service_account \u00a0 = true\u00a0 enable_private_endpoint \u00a0= false\u00a0 enable_private_nodes \u00a0 \u00a0 = true\u00a0 master_ipv4_cidr_block \u00a0 = \"172.16.0.0/28\"\u00a0 network_policy \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = true\u00a0 cluster_autoscaling = {\u00a0 \u00a0 \"autoscaling_profile\": \"OPTIMIZE_UTILIZATION\",\u00a0 \u00a0 \"enabled\" : true,\u00a0 \u00a0 \"gpu_resources\" : [],\u00a0 \u00a0 \"min_cpu_cores\" : 36,\u00a0 \u00a0 \"min_memory_gb\" : 144,\u00a0 \u00a0 \"max_cpu_cores\" : 48,\u00a0 \u00a0 \"max_memory_gb\" : 192,\u00a0 }\u00a0 monitoring_enable_managed_prometheus = true\u00a0 gke_backup_agent_config = true\u00a0 node_pools = [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"pool-sys\"\u00a0 \u00a0 \u00a0 autoscaling \u00a0 \u00a0 = true\u00a0 \u00a0 \u00a0 min_count \u00a0 \u00a0 \u00a0 = 1\u00a0 \u00a0 \u00a0 max_count \u00a0 \u00a0 \u00a0 = 3\u00a0 \u00a0 \u00a0 max_surge \u00a0 \u00a0 \u00a0 = 1\u00a0 \u00a0 \u00a0 max_unavailable = 0\u00a0 \u00a0 \u00a0 machine_type \u00a0 \u00a0= \"e2-standard-4\"\u00a0 \u00a0 \u00a0 node_locations \u00a0= \"us-central1-a,us-central1-b,us-central1-c\"\u00a0 \u00a0 \u00a0 auto_repair \u00a0 \u00a0 = true\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"pool-db\"\u00a0 \u00a0 \u00a0 autoscaling \u00a0 \u00a0 = true\u00a0 \u00a0 \u00a0 max_surge \u00a0 \u00a0 \u00a0 = 1\u00a0 \u00a0 \u00a0 max_unavailable = 0\u00a0 \u00a0 \u00a0 machine_type \u00a0 \u00a0= \"e2-standard-8\"\u00a0 \u00a0 \u00a0 node_locations \u00a0= \"us-central1-a,us-central1-b,us-central1-c\"\u00a0 \u00a0 \u00a0 auto_repair \u00a0 \u00a0 = true\u00a0 \u00a0 },\u00a0 ]\u00a0 node_pools_labels = {\u00a0 \u00a0 all = {}\u00a0 \u00a0 pool-db = {\u00a0 \u00a0 \u00a0 \"app.stateful/component\" = \"postgresql\"\u00a0 \u00a0 }\u00a0 \u00a0 pool-sys = {\u00a0 \u00a0 \u00a0 \"app.stateful/component\" = \"postgresql-pgpool\"\u00a0 \u00a0 }\u00a0 }\u00a0 node_pools_taints = {\u00a0 \u00a0 all = []\u00a0 \u00a0 pool-db = [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key \u00a0 \u00a0= \"app.stateful/component\"\u00a0 \u00a0 \u00a0 \u00a0 value \u00a0= \"postgresql\"\u00a0 \u00a0 \u00a0 \u00a0 effect = \"NO_SCHEDULE\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 \u00a0 pool-sys = [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key \u00a0 \u00a0= \"app.stateful/component\"\u00a0 \u00a0 \u00a0 \u00a0 value \u00a0= \"postgresql-pgpool\"\u00a0 \u00a0 \u00a0 \u00a0 effect = \"NO_SCHEDULE\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 }\u00a0 gce_pd_csi_driver = true}\n```\n- \u5728 `us-west1` \u5340\u57df\u4e2d\u5275\u5efa\u5099\u4efd\u96c6\u7fa3\u4ee5\u9032\u884c\u707d\u96e3\u6062\u5fa9\u3002 [  databases/gke-stateful-postgres/terraform/gke-standard/main.tf ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/gke-standard/main.tf) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/terraform/gke-standard/main.tf) ```\nmodule \"gke-db2\" {\u00a0 source \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"../modules/beta-private-cluster\"\u00a0 project_id \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = var.project_id\u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"cluster-db2\"\u00a0 regional \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = true\u00a0 region \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"us-west1\"\u00a0 network \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= module.network.network_name\u00a0 subnetwork \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = module.network.secondary_subnet_name\u00a0 ip_range_pods \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"ip-range-pods-db2\"\u00a0 ip_range_services \u00a0 \u00a0 \u00a0 \u00a0= \"ip-range-svc-db2\"\u00a0 create_service_account \u00a0 = false\u00a0 service_account \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= module.gke-db1.service_account\u00a0 enable_private_endpoint \u00a0= false\u00a0 enable_private_nodes \u00a0 \u00a0 = true\u00a0 master_ipv4_cidr_block \u00a0 = \"172.16.0.16/28\"\u00a0 network_policy \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = true\u00a0 cluster_autoscaling = {\u00a0 \u00a0 \"autoscaling_profile\": \"OPTIMIZE_UTILIZATION\",\u00a0 \u00a0 \"enabled\" : true,\u00a0 \u00a0 \"gpu_resources\" : [],\u00a0 \u00a0 \"min_cpu_cores\" : 10,\u00a0 \u00a0 \"min_memory_gb\" : 144,\u00a0 \u00a0 \"max_cpu_cores\" : 48,\u00a0 \u00a0 \"max_memory_gb\" : 192,\u00a0 }\u00a0 monitoring_enable_managed_prometheus = true\u00a0 gke_backup_agent_config = true\u00a0 node_pools = [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"pool-sys\"\u00a0 \u00a0 \u00a0 autoscaling \u00a0 \u00a0 = true\u00a0 \u00a0 \u00a0 min_count \u00a0 \u00a0 \u00a0 = 1\u00a0 \u00a0 \u00a0 max_count \u00a0 \u00a0 \u00a0 = 3\u00a0 \u00a0 \u00a0 max_surge \u00a0 \u00a0 \u00a0 = 1\u00a0 \u00a0 \u00a0 max_unavailable = 0\u00a0 \u00a0 \u00a0 machine_type \u00a0 \u00a0= \"e2-standard-4\"\u00a0 \u00a0 \u00a0 node_locations \u00a0= \"us-west1-a,us-west1-b,us-west1-c\"\u00a0 \u00a0 \u00a0 auto_repair \u00a0 \u00a0 = true\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"pool-db\"\u00a0 \u00a0 \u00a0 autoscaling \u00a0 \u00a0 = true\u00a0 \u00a0 \u00a0 max_surge \u00a0 \u00a0 \u00a0 = 1\u00a0 \u00a0 \u00a0 max_unavailable = 0\u00a0 \u00a0 \u00a0 machine_type \u00a0 \u00a0= \"e2-standard-8\"\u00a0 \u00a0 \u00a0 node_locations \u00a0= \"us-west1-a,us-west1-b,us-west1-c\"\u00a0 \u00a0 \u00a0 auto_repair \u00a0 \u00a0 = true\u00a0 \u00a0 },\u00a0 ]\u00a0 node_pools_labels = {\u00a0 \u00a0 all = {}\u00a0 \u00a0 pool-db = {\u00a0 \u00a0 \u00a0 \"app.stateful/component\" = \"postgresql\"\u00a0 \u00a0 }\u00a0 \u00a0 pool-sys = {\u00a0 \u00a0 \u00a0 \"app.stateful/component\" = \"postgresql-pgpool\"\u00a0 \u00a0 }\u00a0 }\u00a0 node_pools_taints = {\u00a0 \u00a0 all = []\u00a0 \u00a0 pool-db = [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key \u00a0 \u00a0= \"app.stateful/component\"\u00a0 \u00a0 \u00a0 \u00a0 value \u00a0= \"postgresql\"\u00a0 \u00a0 \u00a0 \u00a0 effect = \"NO_SCHEDULE\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 \u00a0 pool-sys = [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key \u00a0 \u00a0= \"app.stateful/component\"\u00a0 \u00a0 \u00a0 \u00a0 value \u00a0= \"postgresql-pgpool\"\u00a0 \u00a0 \u00a0 \u00a0 effect = \"NO_SCHEDULE\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 }\u00a0 gce_pd_csi_driver = true}\n``` **\u63d0\u793a** \uff1a\u5982\u9700\u5728\u904b\u884c Terraform \u6642\u8abf\u8a66\u554f\u984c\uff0c\u60a8\u53ef\u4ee5\u901a\u904e\u8a2d\u7f6e Terraform \u65e5\u8a8c\u7d1a\u5225\u74b0\u5883\u8b8a\u91cf `TF_LOG` \u4f86\u6355\u7372\u8abf\u8a66\u8f38\u51fa\u3002\u4f8b\u5982\uff1a `export TF_LOG=\"DEBUG\"` \u3002\u6709\u6548\u65e5\u8a8c\u7d1a\u5225\u5982\u4e0b\uff08\u6309\u8a73\u7d30\u7a0b\u5ea6\u964d\u5e8f\u6392\u5217\uff09\uff1a `TRACE` \u3001 `DEBUG` \u3001 `INFO` \u3001 `WARN` \u6216 `ERROR` \u3002\n## \u5728\u96c6\u7fa3\u4e0a\u90e8\u7f72 PostgreSQL\u5728\u672c\u90e8\u5206\u4e2d\uff0c\u60a8\u5c07\u4f7f\u7528 Helm \u5716\u8868\u5c07 PostgreSQL \u6578\u64da\u5eab\u5be6\u4f8b\u90e8\u7f72\u7232\u5728 GKE \u4e0a\u904b\u884c\u3002\n### \u5b89\u88dd PostgreSQL\u5982\u9700\u5728\u96c6\u7fa3\u4e0a\u5b89\u88dd PostgreSQL\uff0c\u8acb\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\u3002- \u914d\u7f6e Docker \u8a2a\u554f\u6b0a\u9650\u3002```\ngcloud auth configure-docker us-docker.pkg.dev\n```\n- \u4f7f\u7528\u6240\u9700\u7684 PostgreSQL Docker \u6620\u50cf\u586b\u5145 Artifact Registry\u3002```\n./scripts/gcr.sh bitnami/postgresql-repmgr 15.1.0-debian-11-r0./scripts/gcr.sh bitnami/postgres-exporter 0.11.1-debian-11-r27./scripts/gcr.sh bitnami/pgpool 4.3.3-debian-11-r28\n```\u8a72\u8173\u672c\u6703\u5c07\u4ee5\u4e0b Bitnami \u6620\u50cf\u63a8\u9001\u5230 Artifact Registry \u4ee5\u4f9b Helm \u5b89\u88dd\uff1a- [postgresql-repmgr](https://hub.docker.com/r/bitnami/postgresql-repmgr) \uff1a\u6b64 PostgreSQL \u96c6\u7fa3\u89e3\u6c7a\u65b9\u6848\u5305\u542b [PostgreSQL \u8907\u88fd\u7ba1\u7406\u5668 (repmgr)](https://repmgr.org/) \uff0c\u9019\u662f\u4e00\u7a2e\u7528\u65bc\u7ba1\u7406 PostgreSQL \u96c6\u7fa3\u4e0a\u7684\u8907\u88fd\u548c\u6545\u969c\u5207\u63db\u7684\u958b\u6e90\u5de5\u5177\u3002\n- [postgres-exporter](https://hub.docker.com/r/bitnami/postgres-exporter/) \uff1aPostgreSQL \u5c0e\u51fa\u5668\u6703\u6536\u96c6 PostgreSQL \u6307\u6a19\u4f9b Prometheus \u4f7f\u7528\u3002\n- [pgpool](https://hub.docker.com/r/bitnami/pgpool) \uff1aPgpool-II \u662f PostgreSQL \u4ee3\u7406\u3002\u5b83\u53ef\u63d0\u4f9b\u9023\u63a5\u6c60\u548c\u8ca0\u8f09\u5747\u8861\u3002\n- \u9a57\u8b49\u5b58\u5132\u5eab\u4e2d\u662f\u5426\u5b58\u5132\u4e86\u6b63\u78ba\u7684\u6620\u50cf\u3002```\ngcloud artifacts docker images list us-docker.pkg.dev/$PROJECT_ID/main \\\u00a0 \u00a0 --format=\"flattened(package)\"\n```\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\n--image: us-docker.pkg.dev/[PROJECT_ID]/main/bitnami/pgpool\n--image: us-docker.pkg.dev/[PROJECT_ID]/main/bitnami/postgres-exporter\n--image: us-docker.pkg.dev/h[PROJECT_ID]/main/bitnami/postgresql-repmgr\n```\n- \u914d\u7f6e\u5c0d\u4e3b\u96c6\u7fa3\u7684 `kubectl` \u547d\u4ee4\u884c\u8a2a\u554f\u6b0a\u9650\u3002```\ngcloud container clusters get-credentials $SOURCE_CLUSTER \\--region=$REGION --project=$PROJECT_ID\n```\n- \u5275\u5efa\u547d\u540d\u7a7a\u9593\u3002```\nexport NAMESPACE=postgresqlkubectl create namespace $NAMESPACE\n```\n- \u5982\u679c\u60a8\u8981\u90e8\u7f72\u5230 Autopilot \u96c6\u7fa3\uff0c\u8acb\u5728\u4e09\u500b\u53ef\u7528\u5340\u4e2d\u914d\u7f6e\u7bc0\u9ede\u9810\u914d\u3002\u5982\u679c\u60a8\u8981\u90e8\u7f72\u5230 Standard \u96c6\u7fa3\uff0c\u5247\u53ef\u4ee5\u8df3\u904e\u6b64\u6b65\u9a5f\u3002\u9ed8\u8a8d\u60c5\u6cc1\u4e0b\uff0cAutopilot \u50c5\u6703\u5728\u5169\u500b\u53ef\u7528\u5340\u4e2d\u9810\u914d\u8cc7\u6e90\u3002\u5728 `prepareforha.yaml` \u4e2d\u5b9a\u7fa9\u7684\u90e8\u7f72\u901a\u904e\u8a2d\u7f6e\u4ee5\u4e0b\u503c\uff0c\u53ef\u78ba\u4fdd Autopilot \u5728\u96c6\u7fa3\u7684\u4e09\u500b\u53ef\u7528\u5340\u4e2d\u9810\u914d\u7bc0\u9ede\uff1a- `replicas:3`\n- \u5177\u6709`requiredDuringSchedulingIgnoredDuringExecution`\u548c`topologyKey: \"topology.kubernetes.io/zone\"`\u7684`podAntiAffinity`\n```\nkubectl -n $NAMESPACE apply -f scripts/prepareforha.yaml\n``` [  databases/gke-stateful-postgres/scripts/prepareforha.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/scripts/prepareforha.yaml) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/databases/gke-stateful-postgres/scripts/prepareforha.yaml) ```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: prepare-three-zone-ha\u00a0 labels:\u00a0 \u00a0 app: prepare-three-zone-ha\u00a0 \u00a0 app.kubernetes.io/name: postgresql-haspec:\u00a0 replicas: 3\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: prepare-three-zone-ha\u00a0 \u00a0 \u00a0 app.kubernetes.io/name: postgresql-ha\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: prepare-three-zone-ha\u00a0 \u00a0 \u00a0 \u00a0 app.kubernetes.io/name: postgresql-ha\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 affinity:\u00a0 \u00a0 \u00a0 \u00a0 podAntiAffinity:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requiredDuringSchedulingIgnoredDuringExecution:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - labelSelector:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 matchExpressions:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - key: app\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 operator: In\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 values:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - prepare-three-zone-ha\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 topologyKey: \"topology.kubernetes.io/zone\"\u00a0 \u00a0 \u00a0 \u00a0 nodeAffinity:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 preferredDuringSchedulingIgnoredDuringExecution:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - preference:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 matchExpressions:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - key: cloud.google.com/compute-class\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 operator: In\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 values:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - \"Scale-Out\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 weight: 1\u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 app.stateful/component: postgresql\u00a0 \u00a0 \u00a0 tolerations:\u00a0 \u00a0 \u00a0 - effect: NoSchedule\u00a0 \u00a0 \u00a0 \u00a0 key: app.stateful/component\u00a0 \u00a0 \u00a0 \u00a0 operator: Equal\u00a0 \u00a0 \u00a0 \u00a0 value: postgresql\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: prepare-three-zone-ha\u00a0 \u00a0 \u00a0 \u00a0 image: busybox:latest\u00a0 \u00a0 \u00a0 \u00a0 command:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - \"/bin/sh\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - \"-c\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - \"while true; do sleep 3600; done\"\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 limits:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: \"500m\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ephemeral-storage: \"10Mi\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memory: \"0.5Gi\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: \"500m\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ephemeral-storage: \"10Mi\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memory: \"0.5Gi\"\n```\n- \u66f4\u65b0 Helm \u4f9d\u8cf4\u9805\u3002```\ncd helm/postgresql-bootstraphelm dependency update\n```\n- \u6aa2\u67e5\u4e26\u9a57\u8b49 Helm \u5c07\u5b89\u88dd\u7684\u5716\u8868\u3002```\nhelm -n postgresql template postgresql . \\\u00a0 --set global.imageRegistry=\"us-docker.pkg.dev/$PROJECT_ID/main\"\n```\n- \u5b89\u88dd Helm \u5716\u8868\u3002```\nhelm -n postgresql upgrade --install postgresql . \\\u00a0 \u00a0 --set global.imageRegistry=\"us-docker.pkg.dev/$PROJECT_ID/main\"\n```\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\nNAMESPACE: postgresql\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\n```\n- \u9a57\u8b49 PostgreSQL \u526f\u672c\u662f\u5426\u6b63\u5728\u904b\u884c\u3002```\nkubectl get all -n $NAMESPACE\n```\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\nNAME               READY STATUS RESTARTS AGE\npod/postgresql-postgresql-bootstrap-pgpool-75664444cb-dkl24 1/1  Running 0   8m39s\npod/postgresql-postgresql-ha-pgpool-6d86bf9b58-ff2bg   1/1  Running 0   8m39s\npod/postgresql-postgresql-ha-postgresql-0      2/2  Running 0   8m39s\npod/postgresql-postgresql-ha-postgresql-1      2/2  Running 0   8m39s\npod/postgresql-postgresql-ha-postgresql-2      2/2  Running 0   8m38s\nNAME             TYPE  CLUSTER-IP  EXTERNAL-IP PORT(S) AGE\nservice/postgresql-postgresql-ha-pgpool    ClusterIP 192.168.99.236 <none>  5432/TCP 8m39s\nservice/postgresql-postgresql-ha-postgresql   ClusterIP 192.168.90.20  <none>  5432/TCP 8m39s\nservice/postgresql-postgresql-ha-postgresql-headless ClusterIP None    <none>  5432/TCP 8m39s\nservice/postgresql-postgresql-ha-postgresql-metrics ClusterIP 192.168.127.198 <none>  9187/TCP 8m39s\nNAME              READY UP-TO-DATE AVAILABLE AGE\ndeployment.apps/postgresql-postgresql-bootstrap-pgpool 1/1  1   1   8m39s\ndeployment.apps/postgresql-postgresql-ha-pgpool   1/1  1   1   8m39s\nNAME                DESIRED CURRENT READY AGE\nreplicaset.apps/postgresql-postgresql-bootstrap-pgpool-75664444cb 1   1   1  8m39s\nreplicaset.apps/postgresql-postgresql-ha-pgpool-6d86bf9b58   1   1   1  8m39s\nNAME             READY AGE\nstatefulset.apps/postgresql-postgresql-ha-postgresql 3/3  8m39s\n```\n### \u5275\u5efa\u6e2c\u8a66\u6578\u64da\u96c6\u5728\u672c\u90e8\u5206\u4e2d\uff0c\u60a8\u5c07\u5275\u5efa\u4e00\u500b\u6578\u64da\u5eab\u548c\u4e00\u500b\u5305\u542b\u793a\u4f8b\u503c\u7684\u8868\u3002\u8a72\u6578\u64da\u5eab\u7528\u4f5c\u60a8\u5c07\u5728\u672c\u6587\u6a94\u5f8c\u9762\u90e8\u5206\u6e2c\u8a66\u7684\u6545\u969c\u5207\u63db\u904e\u7a0b\u7684\u6e2c\u8a66\u6578\u64da\u96c6\u3002- \u9023\u63a5\u5230\u60a8\u7684 PostgreSQL \u5be6\u4f8b\u3002```\ncd ../.././scripts/launch-client.sh\n```\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\nLaunching Pod pg-client in the namespace postgresql ...\npod/pg-client created\nwaiting for the Pod to be ready\nCopying script files to the target Pod pg-client ...\nPod: pg-client is healthy\n```\n- \u5553\u52d5 shell \u6703\u8a71\u3002```\nkubectl exec -it pg-client -n postgresql -- /bin/bash\n```\n- \u5275\u5efa\u6578\u64da\u5eab\u548c\u8868\uff0c\u7136\u5f8c\u63d2\u5165\u4e00\u4e9b\u6e2c\u8a66\u884c\u3002```\npsql -h $HOST_PGPOOL -U postgres -a -q -f /tmp/scripts/generate-db.sql\n```\n- \u9a57\u8b49\u6bcf\u500b\u8868\u7684\u884c\u6578\u3002```\npsql -h $HOST_PGPOOL -U postgres -a -q -f /tmp/scripts/count-rows.sql\n```\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\nselect COUNT(*) from tb01;\n count\n------- 300000\n(1 row)\nselect COUNT(*) from tb02;\n count\n------- 300000\n(1 row)\n``` **\u63d0\u793a** \uff1a\u60a8\u9084\u53ef\u4ee5\u4f7f\u7528 `pgbench` \u5275\u5efa\u865b\u64ec\u6578\u64da\uff0c\u4f46\u7232\u4e86\u66f4\u8f15\u9b06\u5730\u5340\u5206\u67e5\u8a62\u8acb\u6c42\u6d41\u91cf\uff0c\u6211\u5011\u5efa\u8b70\u60a8\u4f7f\u7528\u63d0\u4f9b\u7684\u8173\u672c\u4f86\u5275\u5efa\u5728\u8b80\u53d6/\u5beb\u5165\u6e2c\u8a66\u671f\u9593\u67e5\u8a62\u7684\u6578\u64da\u5eab\u548c\u8868\u3002\n- \u751f\u6210\u6e2c\u8a66\u6578\u64da\u3002```\nexport DB=postgrespgbench -i -h $HOST_PGPOOL -U postgres $DB -s 50\n```\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\ndropping old tables...\ncreating tables...\ngenerating data (client-side)...\n5000000 of 5000000 tuples (100%) done (elapsed 29.85 s, remaining 0.00 s)\nvacuuming...\ncreating primary keys...\ndone in 36.86 s (drop tables 0.00 s, create tables 0.01 s, client-side generate 31.10 s, vacuum 1.88 s, primary keys 3.86 s).\n```\n- \u9000\u51fa postgres \u5ba2\u6236\u7aef Pod\u3002```\nexit\n```\n## \u76e3\u63a7 PostgreSQL\u5728\u672c\u90e8\u5206\u4e2d\uff0c\u60a8\u5c07\u67e5\u770b PostgreSQL \u5be6\u4f8b\u7684\u6307\u6a19\u4e26\u8a2d\u7f6e\u63d0\u9192\u3002\u60a8\u5c07\u4f7f\u7528 [Google Cloud Managed Service for Prometheus](https://cloud.google.com/stackdriver/docs/managed-prometheus?hl=zh-cn) \u4f86\u57f7\u884c\u76e3\u63a7\u548c\u63d0\u9192\u3002\n### \u67e5\u770b\u6307\u6a19PostgreSQL \u90e8\u7f72\u5305\u542b `postgresql-exporter` Sidecar \u5bb9\u5668\u3002\u6b64\u5bb9\u5668\u6703\u516c\u958b `/metrics` \u7aef\u9ede\u3002Google Cloud Managed Service for Prometheus \u914d\u7f6e\u7232\u76e3\u63a7\u6b64\u7aef\u9ede\u4e0a\u7684 PostgreSQL Pod\u3002\u60a8\u53ef\u4ee5\u901a\u904e Google Cloud \u63a7\u5236\u6aaf [\u4fe1\u606f\u4e2d\u5fc3](https://console.cloud.google.com/monitoring/dashboards?hl=zh-cn) \u67e5\u770b\u9019\u4e9b\u6307\u6a19\u3002\nGoogle Cloud \u63a7\u5236\u6aaf\u63d0\u4f9b\u4e86\u591a\u7a2e\u5275\u5efa\u548c\u4fdd\u5b58\u4fe1\u606f\u4e2d\u5fc3\u914d\u7f6e\u7684\u65b9\u6cd5\uff1a- **\u5275\u5efa\u548c\u5c0e\u51fa** \uff1a\u60a8\u53ef\u4ee5\u76f4\u63a5\u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\u5275\u5efa\u4fe1\u606f\u4e2d\u5fc3\uff0c\u7136\u5f8c\u5c07\u5176\u5c0e\u51fa\u4e26\u5b58\u5132\u5728\u4ee3\u78bc\u5eab\u4e2d\u3002\u7232\u6b64\uff0c\u8acb\u5728\u4fe1\u606f\u4e2d\u5fc3\u5de5\u5177\u6b04\u4e2d\u6253\u958b JSON \u7de8\u8f2f\u5668\u4e26\u4e0b\u8f09\u4fe1\u606f\u4e2d\u5fc3 JSON \u6587\u4ef6\u3002\n- **\u5b58\u5132\u548c\u5c0e\u5165** \uff1a\u60a8\u53ef\u4ee5\u901a\u904e\u9ede\u64ca\u201c+\u5275\u5efa\u4fe1\u606f\u4e2d\u5fc3\u201d\uff0c\u7136\u5f8c\u4f7f\u7528 JSON \u7de8\u8f2f\u5668\u83dc\u55ae\u4e0a\u50b3\u4fe1\u606f\u4e2d\u5fc3\u7684 JSON \u5167\u5bb9\uff0c\u5f9e JSON \u6587\u4ef6\u5c0e\u5165\u4fe1\u606f\u4e2d\u5fc3\u3002\n\u5982\u9700\u76f4\u89c0\u5448\u73fe PostgreSQL \u61c9\u7528\u548c GKE \u96c6\u7fa3\u4e2d\u7684\u6578\u64da\uff0c\u8acb\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff1a- \u5275\u5efa\u4ee5\u4e0b\u4fe1\u606f\u4e2d\u5fc3\u3002```\ncd monitoringgcloud monitoring dashboards create \\\u00a0 \u00a0 \u00a0 \u00a0 --config-from-file=dashboard/postgresql-overview.json \\\u00a0 \u00a0 \u00a0 \u00a0 --project=$PROJECT_IDgcloud monitoring dashboards create \\\u00a0 \u00a0 \u00a0 \u00a0 --config-from-file dashboard/gke-postgresql.json \\\u00a0 \u00a0 \u00a0 \u00a0 --project $PROJECT_ID\n```\n- \u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\uff0c\u524d\u5f80 Cloud Monitoring \u4fe1\u606f\u4e2d\u5fc3\u3002 [\u524d\u5f80 Cloud Monitoring \u4fe1\u606f\u4e2d\u5fc3](https://console.cloud.google.com/monitoring/dashboards?hl=zh-cn) \n- \u5f9e\u4fe1\u606f\u4e2d\u5fc3\u5217\u8868\u4e2d\u9078\u64c7 **\u81ea\u5b9a\u7fa9** \u3002\u7cfb\u7d71\u6703\u986f\u793a\u4ee5\u4e0b\u4fe1\u606f\u4e2d\u5fc3\uff1a- **PostgreSQL \u6982\u89bd** \uff1a\u986f\u793a PostgreSQL \u61c9\u7528\u7684\u6307\u6a19\uff0c\u5305\u62ec\u6578\u64da\u5eab\u6b63\u5e38\u904b\u884c\u6642\u9593\u3001\u6578\u64da\u5eab\u5927\u5c0f\u548c\u4e8b\u52d9\u5ef6\u9072\u6642\u9593\u3002\n- **GKE PostgreSQL \u96c6\u7fa3** \uff1a\u986f\u793a\u904b\u884c PostgreSQL \u7684 GKE \u96c6\u7fa3\u7684\u6307\u6a19\uff0c\u5305\u62ec CPU \u7528\u91cf\u3001\u5167\u5b58\u7528\u91cf\u548c\u5377\u5229\u7528\u7387\u3002\n- \u9ede\u64ca\u6bcf\u500b\u93c8\u63a5\u4ee5\u6aa2\u67e5\u751f\u6210\u7684\u4fe1\u606f\u4e2d\u5fc3\u3002\n### \u8a2d\u7f6e\u63d0\u9192\u85c9\u52a9\u63d0\u9192\uff0c\u60a8\u53ef\u4ee5\u53ca\u6642\u5f97\u77e5\u61c9\u7528\u4e2d\u7684\u554f\u984c\uff0c\u5f9e\u800c\u5feb\u901f\u89e3\u6c7a\u554f\u984c\u3002\u60a8\u53ef\u4ee5\u5275\u5efa [\u63d0\u9192\u653f\u7b56](https://cloud.google.com/monitoring/alerts?hl=zh-cn) \uff0c\u4ee5\u6307\u5b9a\u60a8\u5e0c\u671b\u5728\u54ea\u4e9b\u60c5\u6cc1\u4e0b\u6536\u5230\u63d0\u9192\u4ee5\u53ca\u901a\u904e\u4ec0\u9ebc\u65b9\u5f0f\u7372\u5f97\u901a\u77e5\u3002\u60a8\u9084\u53ef\u4ee5 [\u5275\u5efa\u901a\u77e5\u6e20\u9053](https://cloud.google.com/monitoring/support/notification-options?hl=zh-cn#creating_channels) \uff0c\u4ee5\u4fbf\u9078\u64c7\u767c\u9001\u63d0\u9192\u7684\u76ee\u6a19\u4f4d\u7f6e\u3002\n\u5728\u672c\u90e8\u5206\u4e2d\uff0c\u60a8\u5c07\u4f7f\u7528 Terraform \u914d\u7f6e\u4ee5\u4e0b\u793a\u4f8b\u63d0\u9192\uff1a- `db_max_transaction`\uff1a\u76e3\u63a7\u4e8b\u52d9\u7684\u6700\u9577\u5ef6\u9072\u6642\u9593\uff08\u4ee5\u79d2\u7232\u55ae\u4f4d\uff09\uff1b\u5982\u679c\u8a72\u503c\u5927\u65bc 10\uff0c\u5247\u7cfb\u7d71\u6703\u89f8\u767c\u63d0\u9192\u3002\n- `db_node_up`\uff1a\u76e3\u63a7\u6578\u64da\u5eab Pod \u7684\u72c0\u614b\uff1b0 \u8868\u793a Pod \u5df2\u95dc\u9589\u4e26\u89f8\u767c\u63d0\u9192\u3002\n\u5982\u9700\u8a2d\u7f6e\u63d0\u9192\uff0c\u8acb\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff1a- \u4f7f\u7528 Terraform \u914d\u7f6e\u63d0\u9192\u3002```\nEMAIL=YOUR_EMAILcd alerting/terraformterraform initterraform plan -var project_id=$PROJECT_ID -var email_address=$EMAILterraform apply -var project_id=$PROJECT_ID -var email_address=$EMAIL\n```\u66ff\u63db\u4ee5\u4e0b\u503c\uff1a- \uff1a\u60a8\u7684\u96fb\u5b50\u90f5\u4ef6\u5730\u5740\u3002\n\u8f38\u51fa\u985e\u4f3c\u65bc\u4ee5\u4e0b\u5167\u5bb9\uff1a```\nApply complete! Resources: 3 added, 0 changed, 0 destroyed.\n```\n- \u9023\u63a5\u5230\u5ba2\u6236\u7aef Pod\u3002```\ncd ../../../kubectl exec -it --namespace postgresql pg-client -- /bin/bash\n```\n- \u751f\u6210\u8ca0\u8f09\u6e2c\u8a66\u4ee5\u6e2c\u8a66 `db_max_transaction` \u63d0\u9192\u3002```\npgbench -i -h $HOST_PGPOOL -U postgres -s 200 postgres\n```\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\ndropping old tables...\ncreating tables...\ngenerating data (client-side)...\n20000000 of 20000000 tuples (100%) done (elapsed 163.22 s, remaining 0.00 s)\nvacuuming...\ncreating primary keys...\ndone in 191.30 s (drop tables 0.14 s, create tables 0.01 s, client-side generate 165.62 s, vacuum 4.52 s, primary keys 21.00 s).\n```\u63d0\u9192\u6703\u89f8\u767c\u96fb\u5b50\u90f5\u4ef6\u4e26\u5c07\u5176\u767c\u9001\u5230 \uff0c\u5176\u4e3b\u984c\u884c\u4ee5\u201c[\u63d0\u9192] \u4e8b\u52d9\u6700\u9577\u5ef6\u9072\u6642\u9593\u201d\u958b\u982d\u3002\n- \u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\uff0c\u9032\u5165\u201c\u63d0\u9192\u653f\u7b56\u201d\u9801\u9762\u3002 [\u9032\u5165\u201c\u63d0\u9192\u653f\u7b56\u201d](https://console.cloud.google.com/monitoring/alerting/policies?hl=zh-cn) \n- \u5f9e\u5217\u51fa\u7684\u653f\u7b56\u4e2d\u9078\u64c7 `db_max_transaction` \u3002\u5728\u8a72\u5716\u8868\u4e2d\uff0c\u60a8\u61c9\u8a72\u6703\u770b\u5230\u4f86\u81ea\u8ca0\u8f09\u6e2c\u8a66\u7684\u5cef\u503c\uff0c\u8d85\u904e Prometheus \u6307\u6a19 `pg_stat_activity_max_tx_duration/gauge` \u7684 10 \u79d2\u95be\u503c\u4fdd\u5168\u3002\n- \u9000\u51fa postgres \u5ba2\u6236\u7aef Pod\u3002```\nexit\n```\n## \u7ba1\u7406 PostgreSQL \u548c GKE \u5347\u7d1aPostgreSQL \u548c Kubernetes \u7684\u7248\u672c\u66f4\u65b0\u6703\u5b9a\u671f\u767c\u4f48\u3002\u8acb\u9075\u5faa\u904b\u71df\u6700\u4f73\u5be6\u8e10\u4f86\u5b9a\u671f\u66f4\u65b0\u60a8\u7684\u8edf\u4ef6\u74b0\u5883\u3002\u9ed8\u8a8d\u60c5\u6cc1\u4e0b\uff0cGKE \u6703\u7232\u60a8\u7ba1\u7406\u96c6\u7fa3\u548c\u7bc0\u9ede\u6c60\u5347\u7d1a\u3002\n **\u6ce8\u610f** \uff1a\u6839\u64da\u60a8\u9078\u64c7\u7684\u767c\u4f48\u6e20\u9053\uff0cAutopilot \u96c6\u7fa3\u6703 [\u81ea\u52d5\u5347\u7d1a](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-upgrades-autopilot?hl=zh-cn) \u3002### \u5347\u7d1a PostgreSQL\u672c\u90e8\u5206\u4ecb\u7d39\u77ad\u5982\u4f55\u7232 PostgreSQL \u57f7\u884c\u7248\u672c\u5347\u7d1a\u3002\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u60a8\u5c07\u4f7f\u7528 [\u6efe\u52d5\u66f4\u65b0\u7b56\u7565](https://cloud.google.com/kubernetes-engine/docs/how-to/updating-apps?hl=zh-cn) \u4f86\u5347\u7d1a Pod\uff0c\u4ee5\u78ba\u4fdd\u6240\u6709 Pod \u90fd\u4e0d\u6703\u95dc\u9589\u3002\n **\u63d0\u793a** \uff1a\u5982\u679c\u60a8\u8981\u5728\u751f\u7522\u7cfb\u7d71\u4e2d\u4f7f\u7528 Helm \u5716\u8868\u9032\u884c\u5347\u7d1a\uff0c\u8acb\u8003\u616e\u672c\u6559\u7a0b\u672a\u6db5\u84cb\u7684\u5176\u4ed6\u6700\u4f73\u5be6\u8e10\uff0c\u4f8b\u5982\u57f7\u884c\u6578\u64da\u5099\u4efd\uff0c\u4f7f\u7528 Canary \u90e8\u7f72\u5c0d\u4e00\u5c0f\u90e8\u5206\u7bc0\u9ede\u6e2c\u8a66\u5347\u7d1a\uff0c\u4ee5\u53ca\u5728\u5347\u7d1a\u904e\u7a0b\u4e2d\u76e3\u63a7\u96c6\u7fa3\u3002\n\u5982\u9700\u57f7\u884c\u7248\u672c\u5347\u7d1a\uff0c\u8acb\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff1a- \u5c07 `postgresql-repmgr` \u6620\u50cf\u7684\u66f4\u65b0\u7248\u672c\u63a8\u9001\u5230 Artifact Registry\u3002\u5b9a\u7fa9\u65b0\u7248\u672c\uff08\u4f8b\u5982 `postgresql-repmgr 15.1.0-debian-11-r1` \uff09\u3002```\nNEW_IMAGE=us-docker.pkg.dev/$PROJECT_ID/main/bitnami/postgresql-repmgr:15.1.0-debian-11-r1./scripts/gcr.sh bitnami/postgresql-repmgr 15.1.0-debian-11-r1\n```\n- \u4f7f\u7528 `kubectl` \u89f8\u767c\u6efe\u52d5\u66f4\u65b0\u3002```\nkubectl set image statefulset -n postgresql postgresql-postgresql-ha-postgresql postgresql=$NEW_IMAGEkubectl rollout restart statefulsets -n postgresql postgresql-postgresql-ha-postgresqlkubectl rollout status statefulset -n postgresql postgresql-postgresql-ha-postgresql\n```\u60a8\u5c07\u770b\u5230 StatefulSet \u5b8c\u6210 [\u6efe\u52d5\u66f4\u65b0](https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#rolling-update) \uff0c\u5f9e\u6700\u9ad8\u5e8f\u6578\u526f\u672c\u958b\u59cb\u5230\u6700\u4f4e\u5e8f\u6578\u526f\u672c\u3002\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\nWaiting for 1 pods to be ready...\nwaiting for statefulset rolling update to complete 1 pods at revision postgresql-postgresql-ha-postgresql-5c566ccf49...\nWaiting for 1 pods to be ready...\nWaiting for 1 pods to be ready...\nwaiting for statefulset rolling update to complete 2 pods at revision postgresql-postgresql-ha-postgresql-5c566ccf49...\nWaiting for 1 pods to be ready...\nWaiting for 1 pods to be ready...\nstatefulset rolling update complete 3 pods at revision postgresql-postgresql-ha-postgresql-5c566ccf49...\n```\n### \u898f\u5283 Standard \u96c6\u7fa3\u4e0a\u7684 GKE \u5347\u7d1a\u5982\u679c\u60a8\u904b\u884c\u7684\u662f Standard \u96c6\u7fa3\uff0c\u5247\u672c\u90e8\u5206\u9069\u7528\u3002\u60a8\u53ef\u4ee5\u57f7\u884c\u4e3b\u52d5\u6b65\u9a5f\u4e26\u8a2d\u7f6e\u914d\u7f6e\uff0c\u4ee5\u5728\u904b\u884c\u6709\u72c0\u614b\u670d\u52d9\u6642\u7de9\u89e3\u98a8\u96aa\u4e26\u4f7f\u96c6\u7fa3\u5347\u7d1a\u66f4\u52a0\u9806\u66a2\uff0c\u5305\u62ec\uff1a- \u9075\u5faa [GKE \u6700\u4f73\u5be6\u8e10\u5347\u7d1a\u96c6\u7fa3](https://cloud.google.com/kubernetes-engine/docs/best-practices/upgrading-clusters?hl=zh-cn) \u3002\u9078\u64c7\u9069\u7576\u7684 [\u5347\u7d1a\u7b56\u7565](https://cloud.google.com/kubernetes-engine/docs/concepts/node-pool-upgrade-strategies?hl=zh-cn) \uff0c\u4ee5\u78ba\u4fdd\u5728\u7dad\u8b77\u7a97\u53e3\u5167\u9032\u884c\u5347\u7d1a\uff1a- \u5982\u679c\u8cbb\u7528\u512a\u5316\u975e\u5e38\u91cd\u8981\uff0c\u4e26\u4e14\u5de5\u4f5c\u8ca0\u8f09\u53ef\u4ee5\u5bb9\u5fcd 60 \u5206\u9418\u4ee5\u5167\u7684\u6b63\u5e38\u95dc\u505c\uff0c\u8acb\u9078\u64c7 [\u8d85\u984d\u914d\u7f6e\u5347\u7d1a](https://cloud.google.com/kubernetes-engine/docs/concepts/node-pool-upgrade-strategies?hl=zh-cn#surge) \u3002\n- \u5982\u679c\u5de5\u4f5c\u8ca0\u8f09\u5c0d\u4e2d\u65b7\u7684\u5bb9\u5fcd\u5ea6\u8f03\u4f4e\uff0c\u4e26\u4e14\u80fd\u5920\u63a5\u53d7\u56e0\u8cc7\u6e90\u7528\u91cf\u589e\u52a0\u800c\u5c0e\u81f4\u7684\u81e8\u6642\u8cbb\u7528\u589e\u52a0\uff0c\u8acb\u9078\u64c7 [\u85cd\u7da0\u5347\u7d1a](https://cloud.google.com/kubernetes-engine/docs/concepts/node-pool-upgrade-strategies?hl=zh-cn#blue-green-upgrade-strategy) \u3002\n\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u5347\u7d1a\u904b\u884c\u6709\u72c0\u614b\u5de5\u4f5c\u8ca0\u8f09\u7684\u96c6\u7fa3](https://cloud.google.com/kubernetes-engine/docs/tutorials/upgrading-stateful-workload?hl=zh-cn#configure_a_node_pool_upgrade_strategy) \u3002\n- \u4f7f\u7528 [Recommender](https://cloud.google.com/recommender/docs/overview?hl=zh-cn) \u670d\u52d9\u4f86\u6aa2\u67e5\u68c4\u7528\u63d0\u793a\u548c\u5efa\u8b70\uff0c\u4ee5\u907f\u514d\u670d\u52d9\u4e2d\u65b7\u3002\n- \u8acb\u4f7f\u7528 [\u7dad\u8b77\u7a97\u53e3](https://cloud.google.com/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions?hl=zh-cn) \u4f86\u78ba\u4fdd\u5347\u7d1a\u5728\u9810\u671f\u6642\u9593\u9032\u884c\u3002\u5728\u7dad\u8b77\u7a97\u53e3\u4e4b\u524d\uff0c\u8acb\u78ba\u4fdd\u6578\u64da\u5eab\u5099\u4efd\u6210\u529f\u3002\n- \u5728\u5141\u8a31\u6d41\u91cf\u9032\u5165\u5347\u7d1a\u5f8c\u7684\u7bc0\u9ede\u4e4b\u524d\uff0c\u8acb\u4f7f\u7528 [\u5c31\u7dd2\u6027\u548c\u6d3b\u8e8d\u6027\u63a2\u6e2c](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/) \u4f86\u78ba\u4fdd\u7bc0\u9ede\u5df2\u6e96\u5099\u597d\u63a5\u53d7\u6d41\u91cf\u3002\n- \u5275\u5efa\u63a2\u6e2c\uff0c\u4ee5\u5728\u63a5\u53d7\u6d41\u91cf\u4e4b\u524d\u8a55\u4f30\u8907\u88fd\u662f\u5426\u540c\u6b65\u3002\u6b64\u4efb\u52d9\u53ef\u4ee5\u901a\u904e\u81ea\u5b9a\u7fa9\u8173\u672c\u5b8c\u6210\uff0c\u5177\u9ad4\u53d6\u6c7a\u65bc\u6578\u64da\u5eab\u7684\u8907\u96dc\u7a0b\u5ea6\u548c\u898f\u6a21\u3002\n### \u5728 Standard \u96c6\u7fa3\u5347\u7d1a\u671f\u9593\u9a57\u8b49\u6578\u64da\u5eab\u53ef\u7528\u6027\u5982\u679c\u60a8\u904b\u884c\u7684\u662f Standard \u96c6\u7fa3\uff0c\u5247\u672c\u90e8\u5206\u9069\u7528\u3002\u5982\u9700\u5728\u5347\u7d1a\u671f\u9593\u9a57\u8b49 PostgreSQL \u7684\u53ef\u7528\u6027\uff0c\u4e00\u822c\u6d41\u7a0b\u662f\u5728\u5347\u7d1a\u904e\u7a0b\u4e2d\u91dd\u5c0d PostgreSQL \u6578\u64da\u5eab\u751f\u6210\u6d41\u91cf\u3002\u7136\u5f8c\uff0c\u4f7f\u7528 [pgbench](https://www.postgresql.org/docs/current/pgbench.html) \u6aa2\u67e5\u6578\u64da\u5eab\u5728\u5347\u7d1a\u671f\u9593\u662f\u5426\u53ef\u4ee5\u8655\u7406\u57fa\u6e96\u7d1a\u5225\u7684\u6d41\u91cf\uff08\u8207\u6578\u64da\u5eab\u5b8c\u5168\u53ef\u7528\u6642\u76f8\u6bd4\uff09\u3002- \u9023\u63a5\u5230\u60a8\u7684 PostgreSQL \u5be6\u4f8b\u3002```\n./scripts/launch-client.sh\n```\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\nLaunching Pod pg-client in the namespace postgresql ...\npod/pg-client created\nwaiting for the Pod to be ready\nCopying script files to the target Pod pg-client ...\nPod: pg-client is healthy\n```\n- \u5728 Cloud Shell \u4e2d\uff0c\u901a\u904e shell \u9032\u5165\u5ba2\u6236\u7aef Pod\u3002```\nkubectl exec -it -n postgresql pg-client -- /bin/bash\n```\n- \u521d\u59cb\u5316 pgbench\u3002```\npgbench -i -h $HOST_PGPOOL -U postgres postgres\n```\n- \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7372\u53d6\u57fa\u6e96\u7d50\u679c\uff0c\u4ee5\u78ba\u8a8d PostgreSQL \u61c9\u7528\u5728\u5347\u7d1a\u7684\u6642\u9593\u6bb5\u5167\u4fdd\u6301\u9ad8\u53ef\u7528\u6027\u3002\u5982\u9700\u7372\u53d6\u57fa\u6e96\u7d50\u679c\uff0c\u8acb\u901a\u904e\u591a\u4f5c\u696d\uff08\u7dda\u7a0b\uff09\u5c0d\u591a\u9023\u63a5\u9032\u884c\u6301\u7e8c 30 \u79d2\u7684\u6e2c\u8a66\u3002```\npgbench -h $HOST_PGPOOL -U postgres postgres -c10 -j4 -T 30 -R 200\n```\u8f38\u51fa\u985e\u4f3c\u65bc\u4ee5\u4e0b\u5167\u5bb9\uff1a```\npgbench (14.5)\nstarting vacuum...end.\ntransaction type: <builtin: TPC-B (sort of)>\nscaling factor: 1\nquery mode: simple\nnumber of clients: 10\nnumber of threads: 4\nduration: 30 s\nnumber of transactions actually processed: 5980\nlatency average = 7.613 ms\nlatency stddev = 2.898 ms\nrate limit schedule lag: avg 0.256 (max 36.613) ms\ninitial connection time = 397.804 ms\ntps = 201.955497 (without initial connection time)\n```\n- \u7232\u78ba\u4fdd\u5347\u7d1a\u671f\u9593\u7684\u53ef\u7528\u6027\uff0c\u60a8\u53ef\u4ee5\u91dd\u5c0d\u6578\u64da\u5eab\u751f\u6210\u4e00\u4e9b\u8ca0\u8f09\uff0c\u4e26\u78ba\u4fdd PostgreSQL \u61c9\u7528\u5728\u5347\u7d1a\u671f\u9593\u63d0\u4f9b\u4e00\u81f4\u7684\u97ff\u61c9\u901f\u7387\u3002\u5982\u9700\u57f7\u884c\u6b64\u6e2c\u8a66\uff0c\u8acb\u4f7f\u7528 `pgbench` \u547d\u4ee4\u91dd\u5c0d\u6578\u64da\u5eab\u751f\u6210\u4e00\u4e9b\u6d41\u91cf\u3002\u4ee5\u4e0b\u547d\u4ee4\u6703\u904b\u884c `pgbench` \u4e00\u5c0f\u6642\uff0c\u76ee\u6a19\u7232 200 TPS\uff08\u6bcf\u79d2\u4e8b\u52d9\u6578\uff09\uff0c\u6bcf 2 \u79d2\u5217\u51fa\u4e00\u6b21\u8acb\u6c42\u901f\u7387\u3002```\npgbench -h $HOST_PGPOOL -U postgres postgres --client=10 --jobs=4 --rate=200 --time=3600 --progress=2 --select-only\n```\u5176\u4e2d\uff1a- `--client`\uff1a\u6a21\u64ec\u7684\u5ba2\u6236\u7aef\u6578\uff0c\u5373\u4f75\u767c\u6578\u64da\u5eab\u6703\u8a71\u6578\u3002\n- `--jobs`\uff1apgbench \u4e2d\u7684\u5de5\u4f5c\u5668\u7dda\u7a0b\u6578\u3002\u5728\u591a CPU \u6a5f\u5668\u4e0a\u4f7f\u7528\u591a\u500b\u7dda\u7a0b\u6703\u5f88\u6709\u5e6b\u52a9\u3002\u5ba2\u6236\u7aef\u6703\u5728\u53ef\u7528\u7dda\u7a0b\u4e4b\u9593\u5118\u53ef\u80fd\u5747\u52fb\u5730\u5206\u4f48\u3002\u9ed8\u8a8d\u503c\u7232 1\u3002\n- `--rate`\uff1a\u901f\u7387\u4ee5\u6bcf\u79d2\u4e8b\u52d9\u6578\u7232\u55ae\u4f4d\n- `--progress`\uff1a\u6bcf\u79d2\u9418\u986f\u793a\u4e00\u6b21\u9032\u5ea6\u5831\u544a\u3002\n\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\npgbench (14.5)starting vacuum...end.progress: 5.0 s, 354.8 tps, lat 25.222 ms stddev 15.038progress: 10.0 s, 393.8 tps, lat 25.396 ms stddev 16.459progress: 15.0 s, 412.8 tps, lat 24.216 ms stddev 14.548progress: 20.0 s, 405.0 tps, lat 24.656 ms stddev 14.066\n```\n- \u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\uff0c\u8fd4\u56de Cloud Monitoring \u4e2d\u7684 **PostgreSQL \u6982\u89bd** \u4fe1\u606f\u4e2d\u5fc3\u3002\u8acb\u6ce8\u610f **\u6bcf\u500b\u6578\u64da\u5eab\u7684\u9023\u63a5** \u548c **\u6bcf\u500b Pod \u7684\u9023\u63a5** \u5716\u8868\u4e0a\u7684\u5cef\u503c\u3002\n- \u9000\u51fa\u5ba2\u6236\u7aef Pod\u3002```\nexit\n```\n- \u522a\u9664\u5ba2\u6236\u7aef Pod\u3002```\nkubectl delete pod -n postgresql pg-client\n```\n## \u6a21\u64ec PostgreSQL \u670d\u52d9\u4e2d\u65b7\u5728\u672c\u90e8\u5206\u4e2d\uff0c\u60a8\u5c07\u901a\u904e\u505c\u6b62\u8907\u88fd\u7ba1\u7406\u5668\u670d\u52d9\u4f86\u6a21\u64ec\u4e00\u500b PostgreSQL \u526f\u672c\u4e2d\u7684\u670d\u52d9\u4e2d\u65b7\u3002\u9019\u6a23\u6703\u9632\u6b62 Pod \u5411\u5176\u5c0d\u7b49\u526f\u672c\u50b3\u9001\u6d41\u91cf\u4ee5\u53ca\u5176\u6d3b\u8e8d\u6027\u63a2\u6e2c\u5931\u6557\u3002- \u6253\u958b\u65b0\u7684 Cloud Shell \u6703\u8a71\uff0c\u4e26\u914d\u7f6e\u5c0d\u4e3b\u96c6\u7fa3\u7684 `kubectl` \u547d\u4ee4\u884c\u8a2a\u554f\u6b0a\u9650\u3002```\ngcloud container clusters get-credentials $SOURCE_CLUSTER \\--region=$REGION --project=$PROJECT_ID\n```\n- \u67e5\u770b Kubernetes \u4e2d\u767c\u51fa\u7684 PostgreSQL \u4e8b\u4ef6\u3002```\nkubectl get events -n postgresql --field-selector=involvedObject.name=postgresql-postgresql-ha-postgresql-0 --watch\n```\n- \u5728\u524d\u9762\u7684 Cloud Shell \u6703\u8a71\u4e2d\uff0c\u901a\u904e\u505c\u6b62 PostgreSQL `repmgr` \u4f86\u6a21\u64ec\u670d\u52d9\u5931\u6557\u3002- \u5c07\u6703\u8a71\u9023\u63a5\u5230\u6578\u64da\u5eab\u5bb9\u5668\u3002```\nkubectl exec -it -n $NAMESPACE postgresql-postgresql-ha-postgresql-0 -c postgresql -- /bin/bash\n```\n- \u4f7f\u7528 `repmgr` \u505c\u6b62\u670d\u52d9\uff0c\u4e26\u79fb\u9664\u6aa2\u67e5\u9ede\u548c `dry-run` \u53c3\u6578\u3002```\nexport ENTRY='/opt/bitnami/scripts/postgresql-repmgr/entrypoint.sh'export RCONF='/opt/bitnami/repmgr/conf/repmgr.conf'$ENTRY repmgr -f $RCONF node service --action=stop --checkpoint\n```\n\u7232 PostgreSQL \u5bb9\u5668\u914d\u7f6e\u7684\u6d3b\u8e8d\u6027\u63a2\u6e2c\u6703\u5728 5 \u79d2\u5167\u958b\u59cb\u5931\u6557\u3002\u6bcf 10 \u79d2\u91cd\u8907\u4e00\u6b21\uff0c\u76f4\u5230\u9054\u5230 6 \u6b21\u5931\u6557\u7684\u95be\u503c\u3002\u9054\u5230 `failureThreshold` \u503c\u5f8c\uff0c\u8a72\u5bb9\u5668\u5c07\u91cd\u5553\u3002\u60a8\u53ef\u4ee5\u914d\u7f6e\u76f8\u61c9\u53c3\u6578\u4ee5\u964d\u4f4e\u6d3b\u8e8d\u6027\u63a2\u6e2c\u5bb9\u5fcd\u5ea6\uff0c\u5f9e\u800c\u8abf\u6574\u90e8\u7f72\u7684 SLO \u8981\u6c42\u3002\n\u5f9e\u4e8b\u4ef6\u6d41\u4e2d\uff0c\u60a8\u6703\u770b\u5230 Pod \u7684\u6d3b\u8e8d\u6027\u548c\u5c31\u7dd2\u6027\u63a2\u6e2c\u5931\u6557\uff0c\u540c\u6642\u986f\u793a\u4e00\u689d\u6d88\u606f\uff0c\u60a8\u9700\u8981\u91cd\u5553\u5bb9\u5668\u3002\u8f38\u51fa\u985e\u4f3c\u65bc\u4ee5\u4e0b\u5167\u5bb9\uff1a\n```\n0s   Normal Killing    pod/postgresql-postgresql-ha-postgresql-0 Container postgresql failed liveness probe, will be restarted\n0s   Warning Unhealthy    pod/postgresql-postgresql-ha-postgresql-0 Readiness probe failed: psql: error: connection to server at \"127.0.0.1\", port 5432 failed: Connection refused...\n0s   Normal Pulled     pod/postgresql-postgresql-ha-postgresql-0 Container image \"us-docker.pkg.dev/psch-gke-dev/main/bitnami/postgresql-repmgr:14.5.0-debian-11-r10\" already present on machine\n0s   Normal Created    pod/postgresql-postgresql-ha-postgresql-0 Created container postgresql\n0s   Normal Started    pod/postgresql-postgresql-ha-postgresql-0 Started container postgresql\n```## \u7232\u707d\u96e3\u6062\u5fa9\u505a\u597d\u6e96\u5099\u7232\u78ba\u4fdd\u751f\u7522\u5de5\u4f5c\u8ca0\u8f09\u5728\u767c\u751f\u670d\u52d9\u4e2d\u65b7\u4e8b\u4ef6\u6642\u4ecd\u7136\u53ef\u7528\uff0c\u60a8\u61c9\u8a72\u6e96\u5099\u707d\u96e3\u6062\u5fa9 (DR) \u898f\u5283\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u707d\u96e3\u6062\u5fa9\u898f\u5283\uff0c\u8acb\u53c3\u95b1 [\u707d\u96e3\u6062\u5fa9\u898f\u5283\u6307\u5357](https://cloud.google.com/architecture/dr-scenarios-planning-guide?hl=zh-cn) \u3002\nKubernetes \u7684\u707d\u96e3\u6062\u5fa9\u53ef\u5206\u7232\u5169\u500b\u968e\u6bb5\u5be6\u73fe\uff1a- \u5099\u4efd\u6d89\u53ca\u5728\u670d\u52d9\u4e2d\u65b7\u4e8b\u4ef6\u767c\u751f\u4e4b\u524d\u5275\u5efa\u72c0\u614b\u6216\u6578\u64da\u7684\u6642\u9593\u9ede\u5feb\u7167\u3002\n- \u6062\u5fa9\u6d89\u53ca\u5728\u767c\u751f\u707d\u96e3\u5f8c\u5f9e\u5099\u4efd\u526f\u672c\u6062\u5fa9\u72c0\u614b\u6216\u6578\u64da\u3002\n\u5982\u9700\u5728 GKE \u96c6\u7fa3\u4e0a\u5099\u4efd\u548c\u6062\u5fa9\u5de5\u4f5c\u8ca0\u8f09\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 [Backup for GKE](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/concepts/backup-for-gke?hl=zh-cn) \u3002\u60a8\u53ef\u4ee5\u5728 [\u65b0\u96c6\u7fa3\u548c\u73fe\u6709\u96c6\u7fa3](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/how-to/install?hl=zh-cn) \u4e0a\u5553\u7528\u6b64\u670d\u52d9\u3002\u9019\u6703\u90e8\u7f72\u5728\u96c6\u7fa3\u4e2d\u904b\u884c\u7684 [Backup for GKE \u4ee3\u7406](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/concepts/backup-for-gke?hl=zh-cn#agent_overview) \uff1b\u8a72\u4ee3\u7406\u8ca0\u8cac\u6355\u7372\u914d\u7f6e\u548c\u5377\u5099\u4efd\u6578\u64da\u4ee5\u53ca\u7de8\u6392\u6062\u5fa9\u3002\n **\u63d0\u793a** \uff1a\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f Autopilot \u96c6\u7fa3\uff0c\u8acb\u6aa2\u67e5\u60a8\u7684\u57fa\u790e\u67b6\u69cb\u662f\u5426\u7b26\u5408\u76f8\u61c9 [Backup for GKE \u9650\u5236](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/concepts/about-autopilot?hl=zh-cn) \u3002\n\u5099\u4efd\u548c\u6062\u5fa9\u7684\u7bc4\u570d\u53ef\u4ee5\u9650\u5b9a\u7232\u6574\u500b\u96c6\u7fa3\u3001\u547d\u540d\u7a7a\u9593\u6216\u61c9\u7528\uff08\u7531 `matchLabels` \u7b49\u9078\u64c7\u5668\u5b9a\u7fa9\uff09\u3002\n### PostgreSQL \u5099\u4efd\u548c\u6062\u5fa9\u5834\u666f\u793a\u4f8b\u672c\u90e8\u5206\u4e2d\u7684\u793a\u4f8b\u4ecb\u7d39\u77ad\u5982\u4f55\u4f7f\u7528 `ProtectedApplication` \u81ea\u5b9a\u7fa9\u8cc7\u6e90\u5728\u61c9\u7528\u7bc4\u570d\u5167\u57f7\u884c\u5099\u4efd\u548c\u6062\u5fa9\u64cd\u4f5c\u3002\n\u4e0b\u5716\u5c55\u793a\u4e86 ProtectedApplication \u4e2d\u7684\u7d44\u4ef6\u8cc7\u6e90\uff0c\u5373\u4ee3\u8868 `postgresql-ha` \u61c9\u7528\u7684 StatefulSet \u548c\u90e8\u7f72 `pgpool` \uff0c\u5b83\u5011\u4f7f\u7528\u76f8\u540c\u7684\u6a19\u7c64 ( `app.kubernetes.io/name: postgresql-ha` )\u3002\u5982\u9700\u6e96\u5099\u5099\u4efd\u548c\u6062\u5fa9 PostgreSQL \u5de5\u4f5c\u8ca0\u8f09\uff0c\u8acb\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff1a- \u8a2d\u7f6e\u74b0\u5883\u8b8a\u91cf\u3002\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u60a8\u5c07\u4f7f\u7528 ProtectedApplication \u5f9e\u6e90 GKE \u96c6\u7fa3 ( `us-central1` ) \u6062\u5fa9 PostgreSQL \u5de5\u4f5c\u8ca0\u8f09\u53ca\u5176\u5377\uff0c\u7136\u5f8c\u6062\u5fa9\u5230\u5176\u4ed6\u5340\u57df\u4e2d\u7684\u53e6\u4e00\u500b GKE \u96c6\u7fa3 ( `us-west1` \uff09\u3002```\nexport SOURCE_CLUSTER=cluster-db1export TARGET_CLUSTER=cluster-db2export REGION=us-central1export DR_REGION=us-west1export NAME_PREFIX=g-db-protected-appexport BACKUP_PLAN_NAME=$NAME_PREFIX-bkp-plan-01export BACKUP_NAME=bkp-$BACKUP_PLAN_NAMEexport RESTORE_PLAN_NAME=$NAME_PREFIX-rest-plan-01export RESTORE_NAME=rest-$RESTORE_PLAN_NAME\n```\n- \u9a57\u8b49\u96c6\u7fa3\u662f\u5426\u5df2\u5553\u7528 Backup for GKE\u3002\u60a8\u4e4b\u524d\u57f7\u884c\u7684 Terraform \u8a2d\u7f6e\u904e\u7a0b\u4e2d\u61c9\u8a72\u5df2\u5553\u7528\u4e86 Backup for GKE\u3002```\ngcloud container clusters describe $SOURCE_CLUSTER \\\u00a0 \u00a0 --project=$PROJECT_ID \u00a0\\\u00a0 \u00a0 --region=$REGION \\\u00a0 \u00a0 --format='value(addonsConfig.gkeBackupAgentConfig)'\n```\u5982\u679c\u5553\u7528\u4e86 Backup for GKE\uff0c\u5247\u8a72\u547d\u4ee4\u7684\u8f38\u51fa\u6703\u986f\u793a `enabled=True` \u3002\n\u85c9\u52a9 Backup for GKE\uff0c\u60a8\u53ef\u4ee5\u5275\u5efa [\u5099\u4efd\u65b9\u6848](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/how-to/backup-plan?hl=zh-cn) \u4f5c\u7232 Cron \u4f5c\u696d\u3002\u5099\u4efd\u65b9\u6848\u5305\u542b\u5099\u4efd\u914d\u7f6e\uff0c\u6b64\u914d\u7f6e\u6d89\u53ca\u6e90\u96c6\u7fa3\u3001\u9078\u64c7\u8981\u5099\u4efd\u7684\u5de5\u4f5c\u8ca0\u8f09\u4ee5\u53ca\u5b58\u5132\u6b64\u65b9\u6848\u4e0b\u751f\u6210\u7684\u5099\u4efd\u5de5\u4ef6\u7684\u5340\u57df\u3002\n\u5982\u9700\u57f7\u884c\u5099\u4efd\u548c\u6062\u5fa9\uff0c\u8acb\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff1a- \u5728 `cluster-db1` \u4e0a\u9a57\u8b49 ProtectedApplication \u7684\u72c0\u614b\u3002```\nkubectl get ProtectedApplication -A\n```\u8f38\u51fa\u985e\u4f3c\u65bc\u4ee5\u4e0b\u5167\u5bb9\uff1a```\nNAMESPACE NAME   READY TO BACKUP\npostgresql postgresql-ha true\n```\n- \u7232 ProtectedApplication \u5275\u5efa\u5099\u4efd\u65b9\u6848\u3002```\nexport NAMESPACE=postgresqlexport PROTECTED_APP=$(kubectl get ProtectedApplication -n $NAMESPACE | grep -v 'NAME' | awk '{ print $1 }')\n``````\ngcloud beta container backup-restore backup-plans create $BACKUP_PLAN_NAME \\--project=$PROJECT_ID \\--location=$DR_REGION \\--cluster=projects/$PROJECT_ID/locations/$REGION/clusters/$SOURCE_CLUSTER \\--selected-applications=$NAMESPACE/$PROTECTED_APP \\--include-secrets \\--include-volume-data \\--cron-schedule=\"0 3 * * *\" \\--backup-retain-days=7 \\--backup-delete-lock-days=0\n```\n- \u624b\u52d5\u5275\u5efa\u5099\u4efd\u3002```\ngcloud beta container backup-restore backups create $BACKUP_NAME \\--project=$PROJECT_ID \\--location=$DR_REGION \\--backup-plan=$BACKUP_PLAN_NAME \\--wait-for-completion\n```\n- \u8a2d\u7f6e\u6062\u5fa9\u65b9\u6848\u3002```\ngcloud beta container backup-restore restore-plans create $RESTORE_PLAN_NAME \\\u00a0 --project=$PROJECT_ID \\\u00a0 --location=$DR_REGION \\\u00a0 --backup-plan=projects/$PROJECT_ID/locations/$DR_REGION/backupPlans/$BACKUP_PLAN_NAME \\\u00a0 --cluster=projects/$PROJECT_ID/locations/$DR_REGION/clusters/$TARGET_CLUSTER \\\u00a0 --cluster-resource-conflict-policy=use-existing-version \\\u00a0 --namespaced-resource-restore-mode=delete-and-restore \\\u00a0 --volume-data-restore-policy=restore-volume-data-from-backup \\\u00a0 --selected-applications=$NAMESPACE/$PROTECTED_APP \\\u00a0 --cluster-resource-scope-selected-group-kinds=\"storage.k8s.io/StorageClass\",\"scheduling.k8s.io/PriorityClass\"\n```\n- \u5f9e\u5099\u4efd\u9032\u884c\u6062\u5fa9\u3002```\ngcloud beta container backup-restore restores create $RESTORE_NAME \\\u00a0 --project=$PROJECT_ID \\\u00a0 --location=$DR_REGION \\\u00a0 --restore-plan=$RESTORE_PLAN_NAME \\\u00a0 --backup=projects/$PROJECT_ID/locations/$DR_REGION/backupPlans/$BACKUP_PLAN_NAME/backups/$BACKUP_NAME \\\u00a0 --wait-for-completion\n```\n\u5982\u9700\u9a57\u8b49\u6062\u5fa9\u7684\u96c6\u7fa3\u662f\u5426\u5177\u6709\u6240\u6709\u9810\u671f\u7684 Pod\u3001PersistentVolume \u548c StorageClass \u8cc7\u6e90\uff0c\u8acb\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff1a- \u914d\u7f6e\u5c0d\u5099\u4efd\u96c6\u7fa3 `cluster-db2` \u7684 `kubectl` \u547d\u4ee4\u884c\u8a2a\u554f\u6b0a\u9650\u3002```\ngcloud container clusters get-credentials $TARGET_CLUSTER --region $DR_REGION --project $PROJECT_ID\n```\n- \u9a57\u8b49 StatefulSet \u662f\u5426\u5df2\u901a\u904e 3/3 Pod \u6e96\u5099\u5c31\u7dd2\u3002```\nkubectl get all -n $NAMESPACE\n```\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\nNAME             READY STATUS RESTARTS  AGE\npod/postgresql-postgresql-ha-pgpool-778798b5bd-k2q4b 1/1  Running 0    4m49s\npod/postgresql-postgresql-ha-postgresql-0    2/2  Running 2 (4m13s ago) 4m49s\npod/postgresql-postgresql-ha-postgresql-1    2/2  Running 0    4m49s\npod/postgresql-postgresql-ha-postgresql-2    2/2  Running 0    4m49s\nNAME             TYPE  CLUSTER-IP  EXTERNAL-IP PORT(S) AGE\nservice/postgresql-postgresql-ha-pgpool    ClusterIP 192.168.241.46 <none>  5432/TCP 4m49s\nservice/postgresql-postgresql-ha-postgresql   ClusterIP 192.168.220.20 <none>  5432/TCP 4m49s\nservice/postgresql-postgresql-ha-postgresql-headless ClusterIP None    <none>  5432/TCP 4m49s\nservice/postgresql-postgresql-ha-postgresql-metrics ClusterIP 192.168.226.235 <none>  9187/TCP 4m49s\nNAME            READY UP-TO-DATE AVAILABLE AGE\ndeployment.apps/postgresql-postgresql-ha-pgpool 1/1  1   1   4m49s\nNAME               DESIRED CURRENT READY AGE\nreplicaset.apps/postgresql-postgresql-ha-pgpool-778798b5bd 1   1   1  4m49s\nNAME             READY AGE\nstatefulset.apps/postgresql-postgresql-ha-postgresql 3/3  4m49s\n```\n- \u9a57\u8b49 `postgres` \u547d\u540d\u7a7a\u9593\u4e2d\u7684\u6240\u6709 Pod \u662f\u5426\u6b63\u5728\u904b\u884c\u3002```\nkubectl get pods -n $NAMESPACE\n```\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\npostgresql-postgresql-ha-pgpool-569d7b8dfc-2f9zx 1/1  Running 0   7m56s\npostgresql-postgresql-ha-postgresql-0    2/2  Running 0   7m56s\npostgresql-postgresql-ha-postgresql-1    2/2  Running 0   7m56s\npostgresql-postgresql-ha-postgresql-2    2/2  Running 0   7m56s\n```\n- \u9a57\u8b49 PersistentVolume \u548c StorageClass\u3002\u5728\u6062\u5fa9\u904e\u7a0b\u4e2d\uff0cBackup for GKE \u6703\u5728\u76ee\u6a19\u5de5\u4f5c\u8ca0\u8f09\u4e2d\u5275\u5efa\u4ee3\u7406\u985e\uff0c\u4ee5\u66ff\u63db\u6e90\u5de5\u4f5c\u8ca0\u8f09\u4e2d\u9810\u914d\u7684 StorageClass\uff08\u793a\u4f8b\u8f38\u51fa\u4e2d\u7684 `gce-pd-gkebackup-dn` \uff09\u3002```\nkubectl get pvc -n $NAMESPACE\n```\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\nNAME           STATUS VOLUME     CAPACITY ACCESS MODES STORAGECLASS   AGE\ndata-postgresql-postgresql-ha-postgresql-0 Bound pvc-be91c361e9303f96 8Gi  RWO   gce-pd-gkebackup-dn 10m\ndata-postgresql-postgresql-ha-postgresql-1 Bound pvc-6523044f8ce927d3 8Gi  RWO   gce-pd-gkebackup-dn 10m\ndata-postgresql-postgresql-ha-postgresql-2 Bound pvc-c9e71a99ccb99a4c 8Gi  RWO   gce-pd-gkebackup-dn 10m\n```\n\u5982\u9700\u9a57\u8b49\u9810\u671f\u7684\u6578\u64da\u662f\u5426\u5df2\u6062\u5fa9\uff0c\u8acb\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff1a- \u9023\u63a5\u5230\u60a8\u7684 PostgreSQL \u5be6\u4f8b\u3002```\n./scripts/launch-client.shkubectl exec -it pg-client -n postgresql -- /bin/bash\n```\n- \u9a57\u8b49\u6bcf\u500b\u8868\u7684\u884c\u6578\u3002```\npsql -h $HOST_PGPOOL -U postgres -a -q -f /tmp/scripts/count-rows.sqlselect COUNT(*) from tb01;\n```\u60a8\u61c9\u8a72\u6703\u770b\u5230\u8207\u4e4b\u524d\u5728 [\u5275\u5efa\u6e2c\u8a66\u6578\u64da\u96c6](https://cloud.google.com/kubernetes-engine/docs/tutorials/stateful-workloads/postgresql?hl=zh-cn#test-dataset) \u4e2d\u5beb\u5165\u7684\u6578\u64da\u985e\u4f3c\u7684\u7d50\u679c\u3002\u8f38\u51fa\u5167\u5bb9\u985e\u4f3c\u5982\u4e0b\uff1a```\n300000(1 row)\n```\n- \u9000\u51fa\u5ba2\u6236\u7aef Pod\u3002```\nexit\n```\n## \u6e05\u7406\u7232\u907f\u514d\u56e0\u672c\u6559\u7a0b\u4e2d\u4f7f\u7528\u7684\u8cc7\u6e90\u5c0e\u81f4\u60a8\u7684 Google Cloud \u8cec\u865f\u7522\u751f\u8cbb\u7528\uff0c\u8acb\u522a\u9664\u5305\u542b\u9019\u4e9b\u8cc7\u6e90\u7684\u9805\u76ee\uff0c\u6216\u8005\u4fdd\u7559\u9805\u76ee\u4f46\u522a\u9664\u5404\u500b\u8cc7\u6e90\u3002\n### \u522a\u9664\u9805\u76ee\u7232\u907f\u514d\u652f\u4ed8\u8cbb\u7528\uff0c\u6700\u7c21\u55ae\u7684\u65b9\u6cd5\u662f\u522a\u9664\u60a8\u7232\u672c\u6559\u7a0b\u5275\u5efa\u7684\u9805\u76ee\u3002Titles in dynamic includes are not used anywhere, and we should avoid paying to translate them **\u8b66\u544a** \uff1a\u522a\u9664\u9805\u76ee\u6703\u7522\u751f\u4ee5\u4e0b\u5f71\u97ff- **\u9805\u76ee\u4e2d\u7684\u6240\u6709\u5167\u5bb9\u90fd\u6703\u88ab\u522a\u9664\u3002** \u5982\u679c\u60a8\u5c07\u73fe\u6709\u9805\u76ee\u7528\u65bc\u672c\u6587\u6a94\u4e2d\u7684\u4efb\u52d9\uff0c\u5247\u522a\u9664\u8a72\u9805\u76ee\u5f8c\uff0c\u9084\u5c07\u522a\u9664\u60a8\u5df2\u5728\u8a72\u9805\u76ee\u4e2d\u5b8c\u6210\u7684\u4efb\u4f55\u5176\u4ed6\u5de5\u4f5c\u3002\n- **\u81ea\u5b9a\u7fa9\u9805\u76ee ID \u4e1f\u5931\u3002** \u5275\u5efa\u6b64\u9805\u76ee\u6642\uff0c\u60a8\u53ef\u80fd\u5275\u5efa\u4e86\u8981\u5728\u5c07\u4f86\u4f7f\u7528\u7684\u81ea\u5b9a\u7fa9\u9805\u76ee ID\u3002\u8981\u4fdd\u7559\u4f7f\u7528\u8a72\u9805\u76ee ID \u7684\u7db2\u5740\uff08\u4f8b\u5982`appspot.com`\u7db2\u5740\uff09\uff0c\u8acb\u522a\u9664\u9805\u76ee\u5167\u7684\u6240\u9078\u8cc7\u6e90\uff0c\u800c\u4e0d\u662f\u522a\u9664\u6574\u500b\u9805\u76ee\u3002\n\u5982\u679c\u60a8\u6253\u7b97\u63a2\u7d22\u591a\u500b\u67b6\u69cb\u3001\u6559\u7a0b\u6216\u5feb\u901f\u5165\u9580\uff0c\u5247\u91cd\u8907\u4f7f\u7528\u9805\u76ee\u53ef\u4ee5\u5e6b\u52a9\u60a8\u907f\u514d\u8d85\u51fa\u9805\u76ee\u914d\u984d\u9650\u5236\u3002\n\u522a\u9664 Google Cloud \u9805\u76ee\uff1a\n```\ngcloud projects delete PROJECT_ID\n```## \u5f8c\u7e8c\u6b65\u9a5f\n- \u77ad\u89e3\u5728 GKE \u4e0a [\u90e8\u7f72\u6578\u64da\u5eab\u7684\u6700\u4f73\u5be6\u8e10](https://cloud.google.com/kubernetes-engine/docs/concepts/database-options?hl=zh-cn) \u3002\n- \u8a73\u7d30\u63a2\u7d22 [\u6c38\u4e45\u6027\u5377](https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes?hl=zh-cn) \u3002\n- \u67e5\u770b\u76f8\u95dc [\u793a\u4f8b](https://www.pgpool.net/docs/42/en/html/example-cluster.html#EXAMPLE-CLUSTER-PGPOOL-CONFIG) \uff0c\u77ad\u89e3\u5982\u4f55\u4f7f\u7528 Pgpool-II \u5c0d\u9ad8\u53ef\u7528\u6027 PostgreSQL \u96c6\u7fa3\u9032\u884c\u6d41\u5f0f\u8907\u88fd\u3002", "guide": "Google Kubernetes Engine (GKE)"}