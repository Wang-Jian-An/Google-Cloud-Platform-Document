{"title": "Google Kubernetes Engine (GKE) - Configuring a custom boot disk", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/custom-boot-disks", "abstract": "# Google Kubernetes Engine (GKE) - Configuring a custom boot disk\nThis page shows you how to customize a node boot disk in your Google Kubernetes Engine (GKE) [clusters](/kubernetes-engine/docs/concepts/cluster-architecture) and [node pools](/kubernetes-engine/docs/concepts/node-pools) .\n", "content": "## Overview\nWhen you create a GKE cluster or node pool, you can choose the type of Persistent Disk onto which the Kubernetes node file system is installed for each node. By default, GKE uses balanced Persistent Disks in version 1.24 or later. You can also specify other Persistent Disk types, such as standard or SSD. For more information, see [Storage options](/compute/docs/disks) .\n**Note:** This feature differs from [Local SSD](/kubernetes-engine/docs/concepts/local-ssd) , which cannot be used as a boot disk.\nBalanced and SSD Persistent Disks have disk quotas which are different from standard Persistent Disk quotas. If you are switching from standard to balanced Persistent Disks, you may need to request for quota increases. For more information, see [Resource quotas](/compute/quotas#disk_quota) .\n## Benefits of using an SSD boot disk\nUsing an SSD Persistent Disk as a boot disk for your nodes offers some performance benefits:\n- [Nodes](/kubernetes-engine/docs/concepts/cluster-architecture#nodes) have faster boot times.\n- Binaries and files served from containers are available to the node faster. This can increase performance for I/O-intensive [workloads](/kubernetes-engine/docs/how-to/deploying-workloads-overview) , such as [web-serving applications](/kubernetes-engine/docs/tutorials/hello-app) that host static files or short-running, I/O-intensive [batch jobs](https://kubernetes.io/docs/concepts/workloads/controllers/job/) .\n- Files stored on the node's local media (exposed through`hostPath`or`emptyDir`volumes) can see improved I/O performance.## Specifying a node boot disk type\nYou can specify the boot disk type when you create a cluster or node pool.\n**Note:** You cannot change the boot disk type of an existing cluster or node pool.\nTo create a cluster with a custom boot disk, run the following command.\n`[DISK-TYPE]` can be one of the following values:- `pd-balanced`(the default in version 1.24 or later)\n- `pd-standard`(the default in version 1.23 or earlier)\n- `pd-ssd`\n- `hyperdisk-balanced`\n **Note:** Hyperdisk support is based on the machine type of your nodes. For the most up-to-date information, see [Machine type support](/compute/docs/disks/hyperdisks#machine-type-support) in the Compute Engine documentation.\nSee [Persistent Disk Types](/compute/docs/disks#disk-types) for more information about this choice.\n```\ngcloud container clusters create [CLUSTER_NAME] --disk-type [DISK_TYPE]\n```\nTo create a node pool in an existing cluster:\n```\ngcloud container node-pools create [POOL_NAME] --disk-type [DISK_TYPE]\n```\nFor example, the following command creates a cluster, `example-cluster` , with the SSD Persistent Disk type, `pd-ssd` :\n```\ngcloud container clusters create example-cluster --disk-type pd-ssd\n```\nTo select the boot disk when creating your cluster with the Google Cloud console:- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click **Create** .\n- Configure your cluster as needed.\n- From the navigation menu, expand **default-pool** and click **Nodes** .\n- In the **Boot disk type** drop-down list, select a Persistent Disk type.\n- Click **Create** .\nTo create a node pool with a custom boot disk for an existing cluster:- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- In the cluster list, click the name of the cluster you want to modify.\n- Click **Add Node Pool** .\n- Configure your node pool as needed.\n- From the navigation menu, click **Nodes** .\n- In the **Boot disk type** drop-down list, select a Persistent Disk type.\n- Click **Create** .## Protecting node boot disks\nA node boot disk stores your container image, some system process logs, Pod logs, and the writable container layer by default.\nIf your workloads use `configMap` , `emptyDir` , or `hostPath` volumes, your Pods could write additional data to node boot disks. You can configure `emptyDir` to be backed by tmpfs to stop this. To learn how, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) . Since `secret` , `downwardAPI` , and `projected` volumes are backed by [tmpfs](https://www.kernel.org/doc/html/latest/filesystems/tmpfs.html) the Pods using them don't write data to the node boot disk.\nBy default, Google Cloud [encrypts customer content at rest](/security/encryption/default-encryption#encryption_of_data_at_rest) including your node boot disks, and GKE manages encryption for you without any action on your part.\nHowever, when using volumes that write to the node boot disk, you may want to further control how your workload data is protected in GKE. You can do this by either [preventing Pods from writing to node boot disks](#prevent-pod) , or [using Customer Managed Encryption Keys (CMEK) for node boot disks](#cmek) .\n### Prevent Pods from writing to boot disks\nTo prevent Pods from writing data directly to the node boot disk, use one of the following methods.\nPolicy Controller is a feature of GKE Enterprise that lets you declare and enforce custom policies at scale across your GKE clusters in fleets.\n- [Install Policy Controller](/anthos-config-management/docs/how-to/installing-policy-controller) .\n- Define a constraint that restricts the following volume types by using the [k8sPspVolumeTypes constraint template](/anthos-config-management/docs/latest/reference/constraint-template-library#k8spspvolumetypes) :- `configMap`\n- `emptyDir`(if not backed by tmpfs)\n- `hostPath`For instructions, see [Use the constraint template library](/anthos-config-management/docs/how-to/creating-policy-controller-constraints) in the Policy Controller documentation.The following example constraint restricts these volume types in all Pods in the cluster:\n```\napiVersion: constraints.gatekeeper.sh/v1beta1kind: K8sPSPVolumeTypesmetadata:\u00a0 name: deny-boot-disk-writesspec:\u00a0 match:\u00a0 \u00a0 kinds:\u00a0 \u00a0 - apiGroups: [\"\"]\u00a0 \u00a0 \u00a0 kinds: [\"Pod\"]\u00a0 parameters:\u00a0 \u00a0 volumes:\u00a0 \u00a0 - configMap\u00a0 \u00a0 - emptyDir\u00a0 \u00a0 - hostPath\n```\nThe built-in Kubernetes PodSecurity admission controller lets you enforce different levels of the Pod Security Standards in specific namespaces or in the cluster. The Restricted policy prevents Pods from writing to the node boot disk.\nTo use the PodSecurity admission controller, see [Apply predefined Pod-level security policies using PodSecurity](/kubernetes-engine/docs/how-to/podsecurityadmission) .\n### Customer-managed encryption\nIf you want to control and manage encryption key rotation yourself, you can use Customer Managed Encryption Keys (CMEK). These keys are used to encrypt the data encryption keys that encrypt your data. To learn how to use CMEK for node boot disks, see [Using customer-managedencryption keys](/kubernetes-engine/docs/how-to/using-cmek#boot-disks) .\nA limitation of CMEK for node boot disks is that it cannot be changed after node pool creation. This means:\n- If the node pool was created with customer-managed encryption, you cannot subsequently disable encryption on the boot disks.\n- If the node pool was created without customer-managed encryption, you cannot subsequently enable encryption on the boot disks. However, you can create a new node pool with customer-managed encryption enabled and delete the previous node pool.## Limitations\nBefore configuring a custom boot disk, consider the following limitations:\n- The [C3 machine series](/compute/docs/general-purpose-machines#c3_series) and [G2 machine series](/compute/docs/accelerator-optimized-machines#g2-vms) don't support the`pd-standard`node boot disk type.## What's next\n- [Learn how to specify a minimum CPU platform](/kubernetes-engine/docs/how-to/min-cpu-platform) .\n- [Learn more about customer managed encryption](/security/encryption/default-encryption#key_management) .\n- [Learn about using Customer Managed Encryption keys in GKE](/kubernetes-engine/docs/how-to/using-cmek) .", "guide": "Google Kubernetes Engine (GKE)"}