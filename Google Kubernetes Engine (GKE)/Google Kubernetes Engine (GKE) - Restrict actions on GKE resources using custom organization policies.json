{"title": "Google Kubernetes Engine (GKE) - Restrict actions on GKE resources using custom organization policies", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/custom-org-policies", "abstract": "# Google Kubernetes Engine (GKE) - Restrict actions on GKE resources using custom organization policies\nThis page shows you how to restrict specific operations on Google Kubernetes Engine (GKE) resources in your organization using custom constraints in the Google Cloud Organization Policy Service. To learn more about Organization Policy, refer to [Custom organization policies](/resource-manager/docs/organization-policy/overview#custom-organization-policies) .\n", "content": "## About organization policies and constraints\nThe Google Cloud Organization Policy gives you centralized, programmatic control over your organization's resources. As the [organization policy administrator](/resource-manager/docs/organization-policy/using-constraints#add-org-policy-admin) , you can define an , which is a set of restrictions called that apply to Google Cloud resources and descendants of those resources in the [Google Cloud resource hierarchy](/resource-manager/docs/cloud-platform-resource-hierarchy) . You can enforce organization policies at at the organization, folder, or project level.\nOrganization Policy provides [predefined constraints](/resource-manager/docs/organization-policy/org-policy-constraints) for various Google Cloud services. However, if you want more granular, customizable control over the specific fields that are restricted in your organization policies, you can also create and use those custom constraints in a custom organization policy.\n### Supported resources in GKE\nFor GKE, you can create custom constraints for the `CREATE` or `UPDATE` methods on any field in the [Cluster](/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters) or [NodePool](/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools) resource of the Google Kubernetes Engine API v1, **except** for output-only fields and the following fields:\n- `projects.locations.clusters.masterAuth.clientKey`\n- `projects.locations.clusters.masterAuth.password`\n### Policy inheritance\nBy default, policies are inherited by the descendants of the resources on which you enforce the policy. For example, if you enforce a policy on a folder, Google Cloud enforces the policy on all projects in the folder. To learn more about this behavior and how to change it, refer to [Hierarchy evaluation rules](/resource-manager/docs/organization-policy/understanding-hierarchy#disallow_inheritance) .\n## Pricing\nOrganization policies and constraints are offered at no charge.\n## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.\n- To get the permissions that you need to create constraints and enforce organization policies,   ask your administrator to grant you the [Organization Policy Administrator ](https://cloud.google.com/iam/docs/understanding-roles#orgpolicy.policyAdmin) ( `roles/orgpolicy.policyAdmin` ) IAM role on your Google Cloud organization.    For more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .You might also be able to get  the required permissions through [custom  roles](/iam/docs/creating-custom-roles) or other [predefined  roles](/iam/docs/understanding-roles) .\n- Ensure that you know your [organization ID](/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id) .## Create a custom constraint\nTo create a new custom constraint, you define the constraint in a YAML file and apply the custom constraint in your organization using the Google Cloud CLI.\n- Create a YAML file for the custom constraint:```\nname: organizations/ORGANIZATION_ID/customConstraints/custom.CONSTRAINT_NAMEresourceTypes:- container.googleapis.com/RESOURCE_NAMEmethodTypes:- METHOD1- METHOD2condition: \"resource.OBJECT_NAME.FIELD_NAME == VALUE\"actionType: ACTIONdisplayName: DISPLAY_NAMEdescription: DESCRIPTION\n```Replace the following:- ``: your organization ID, such as`123456789`.\n- ``: the name you want for your new custom constraint. This field has a maximum length of 100 characters, not counting the prefix (for example,`organizations/123456789/customConstraints/`).\n- ``: the name (not the URI) of the GKE API REST resource containing the object and field you want to restrict. For example,`Cluster`or`NodePool`.\n- `` `,` `` `,...`: a list of RESTfulfor which to enforce the constraint. Can be`CREATE`or`CREATE`and`UPDATE`.\n- `` : the condition to validate the request against, written in [Common Expression Language (CEL)](/resource-manager/docs/organization-policy/creating-managing-custom-constraints#common_expression_language) . This field has a maximum length of 1000 characters. The expression must contain the following fields, and supports logical operators such as `&&` and `||` :- ``: the name of the GKE APIthat you want to restrict, in pascalCase formatting. For example,`privateClusterConfig`.\n- ``: the name of the GKE APIthat you want to restrict, in pascalCase formatting. For example,`enablePrivateNodes`.\n- ``: the value of the field. For boolean fields, use`true`or`false`. For string fields, use`\"` `` `\"`.\n- `` : the action to take if the `condition` is met. This can be either `ALLOW` or `DENY` .\n- `` : a human-friendly name for the constraint. This field has a maximum length of 200 characters.\n- `` : a human-friendly description of the constraint to display as an error message when the policy is violated. This field has a maximum length of 2000 characters.\n- Apply the custom constraint:```\ngcloud org-policies set-custom-constraint PATH_TO_FILE\n```Replace `` with the file path of your custom constraint definition.\n- Verify that the custom constraint exists:```\ngcloud org-policies list-custom-constraints --organization=ORGANIZATION_ID\n```The output is similar to the following:```\nCONSTRAINT      LIST_POLICY BOOLEAN_POLICY ETAG\ncustom.enableGkeAutopilot  -    SET    COCsm5QGENiXi2E=\n...\n```## Enforce the custom constraint\nTo enforce the new custom constraint, create an organization policy that references the constraint, and then apply the organization policy.\n- Create a YAML file for the organization policy:```\nname: RESOURCE_HIERARCHY/policies/POLICY_NAMEspec:\u00a0 rules:\u00a0 - enforce: true\n```Replace the following:- ``: the location of the new policy, which affects the scope of enforcement. Use the Google Cloud resource hierarchy as a guide. For example, if you wanted to enforce the policy in a specific project, use`projects/` ``. To enforce the policy in a specific organization, use`organizations/` ``.\n- ``: the name of the new policy.\n- Enforce the policy:```\ngcloud org-policies set-policy PATH_TO_POLICY\n```Replace `` with the path to your policy definition file.\n- Verify that the policy exists:```\ngcloud org-policies list \\\u00a0 \u00a0 --RESOURCE_FLAG=RESOURCE_ID\n```Replace the following:- ``: the Google Cloud resource where you enforced the policy. For example,`project`or`folder`.\n- ``: the ID of the resource where you enforced the policy. For example, your Google Cloud folder ID.\nFor a list of arguments, refer to [gcloud org-policies list](/sdk/gcloud/reference/org-policies/list) .The output is similar to the following:```\nCONSTRAINT         LIST_POLICY BOOLEAN_POLICY ETAG\niam.disableWorkloadIdentityClusterCreation -    SET    CO3UkJAGEOj1qsQB\ncustom.enableGkeAutopilot      -    SET    COCsm5QGENiXi2E=\ncustom.enableBinAuth       -    SET    CJfKiZUGEJju7LUD\n```## Example: Create a custom constraint and enforce a policy\nThe following example creates a custom constraint and policy that requires all new clusters in a specific project to be Autopilot clusters.\nBefore you begin, you should know the following:\n- Your organization ID\n- A project ID\n### Create the constraint\n- Save the following file as `constraint-enable-autopilot.yaml` :```\nname: organizations/ORGANIZATION_ID/customConstraints/custom.enableGkeAutopilotresourceTypes:- container.googleapis.com/ClustermethodTypes:- CREATEcondition: \"resource.autopilot.enabled == false\"actionType: DENYdisplayName: Enable GKE Autopilotdescription: All new clusters must be Autopilot clusters.\n```This defines a constraint where for every new cluster, if the cluster mode is not Autopilot, the operation is denied.\n- Apply the constraint:```\ngcloud org-policies set-custom-constraint ~/constraint-enable-autopilot.yaml\n```\n- Verify that the constraint exists:```\ngcloud org-policies list-custom-constraints --organization=ORGANIZATION_ID\n```The output is similar to the following:```\nCUSTOM_CONSTRAINT      ACTION_TYPE METHOD_TYPES RESOURCE_TYPES      DISPLAY_NAME\ncustom.enableGkeAutopilot    DENY   CREATE   container.googleapis.com/Cluster Enable GKE Autopilot\n...\n```\n### Create the policy\n- Save the following file as `policy-enable-autopilot.yaml` :```\nname: projects/PROJECT_ID/policies/custom.enableGkeAutopilotspec:\u00a0 rules:\u00a0 - enforce: true\n```Replace `` with your project ID.\n- Apply the policy:```\ngcloud org-policies set-policy ~/policy-enable-autopilot.yaml\n```\n- Verify that the policy exists:```\ngcloud org-policies list --project=PROJECT_ID\n```The output is similar to the following:```\nCONSTRAINT     LIST_POLICY BOOLEAN_POLICY ETAG\ncustom.enableGkeAutopilot -    SET    COCsm5QGENiXi2E=\n```\nAfter you apply the policy, wait for about two minutes for Google Cloud to start enforcing the policy.\n### Test the policy\nTry to create a GKE Standard cluster in the project:\n```\ngcloud container clusters create org-policy-test \\\u00a0 \u00a0 --project=PROJECT_ID \\\u00a0 \u00a0 --zone=COMPUTE_ZONE \\\u00a0 \u00a0 --num-nodes=1\n```\nThe output is the following:\n```\nOperation denied by custom org policies: [\"customConstraints/custom.enableGkeAutopilot\": \"All new clusters must be Autopilot clusters.\"]\n```\n## Sample custom constraints for common use cases\nThe following sections provide the syntax of some custom constraints that you might find useful:\n| Description                     | Constraint syntax                                                                                                                                                                                             |\n|:----------------------------------------------------------------------------------------------||\n| Do not disable node auto-upgrade for new node pools           | name: organizations/ORGANIZATION_ID/customConstraints/custom.enableAutoUpgrade resourceTypes: - container.googleapis.com/NodePool methodTypes: - CREATE condition: \"resource.management.autoUpgrade == true\" actionType: ALLOW displayName: Enable node auto-upgrade description: All node pools must have node auto-upgrade enabled.                                                                                                              |\n| Enable workload identity federation for GKE for new clusters         | name: organizations/ORGANIZATION_ID/customConstraints/custom.enableWorkloadIdentity resourceTypes: - container.googleapis.com/Cluster methodTypes: - CREATE condition: \"has(resource.workloadIdentityConfig.workloadPool) || resource.workloadIdentityConfig.workloadPool.size() > 0\" actionType: ALLOW displayName: Enable Workload Identity on new clusters description: All new clusters must use Workload Identity.                                                                                          |\n| Do not disable Cloud Logging on existing clusters            | name: organizations/ORGANIZATION_ID/customConstraints/custom.enableLogging resourceTypes: - container.googleapis.com/Cluster methodTypes: - UPDATE condition: \"resource.loggingService == 'none'\" actionType: DENY displayName: Do not disable Cloud Logging description: You cannot disable Cloud Logging on existing GKE cluster.                                                                                                               |\n| Only allow Standard node pool creation or update when legacy metadata endpoints are disabled | name: organizations/ORGANIZATION_ID/customConstraints/custom.nodeConfigMetadata resourceTypes: - container.googleapis.com/NodePool methodTypes: - CREATE - UPDATE condition: \"'disable-legacy-endpoints' in resource.config.metadata && resource.config.metadata['disable-legacy-endpoints'] == 'true'\" actionType: ALLOW displayName: Disable legacy metadata endpoints description: You can only create or update node pools if you disable legacy metadata endpoints. This constraint sample shows you how to set a custom constraint on a map value. The condition field uses the index operator on the map key disable-legacy-endpoints. If you use regular field selection syntax instead, like in the preceding samples, you see a INVALID_CUSTOM_CONSTRAINT_CONDITION error. |\n## What's next\n- [Learn about constraints in-depth](/resource-manager/docs/organization-policy/understanding-constraints) .\n- [Read about the additional options you can use to customize your policies](/resource-manager/docs/organization-policy/creating-managing-policies) .\n- [Learn how to set organization policies based on Tags](/resource-manager/docs/organization-policy/tags-organization-policy) .", "guide": "Google Kubernetes Engine (GKE)"}