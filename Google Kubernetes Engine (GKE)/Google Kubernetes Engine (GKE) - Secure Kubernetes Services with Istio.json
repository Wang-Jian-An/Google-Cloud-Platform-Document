{"title": "Google Kubernetes Engine (GKE) - Secure Kubernetes Services with Istio", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/secure-services-istio", "abstract": "# Google Kubernetes Engine (GKE) - Secure Kubernetes Services with Istio\nThis tutorial is intended for Kubernetes users and administrators who are interested in using [Istio service mesh](https://istio.io/latest/about/service-mesh/) to securely deploy Kubernetes Services and enable mutual TLS (mTLS) communication.\n#", "content": "## Istio and Anthos Service MeshIstio is not a supported Google product. We recommend running managed Anthos Service Mesh instead. For more information, see [Provision Anthos Service Mesh on a GKE Autopilot cluster](/kubernetes-engine/docs/tutorials/service-mesh) .\nTo run Istio on a GKE Autopilot cluster, you must enable the`NET_ADMIN`and`NET_RAW`Linux capabilities in your containers. These are privileged linux capabilities. The`NET_ADMIN`capability grants broad access to network operations, such as write access to routing tables and firewalls. An attacker could potentially use this access to perform privilege escalation attacks in your cluster. For details, see [the CAP_NET_ADMIN manpage](https://man7.org/linux/man-pages/man7/capabilities.7.html) .\nAnthos Service Mesh provides the following benefits:- You can provision managed Anthos Service Mesh using the [Fleet API](/anthos/fleet-management/docs/fleet-creation) without client-side tools like`istioctl`.\n- Anthos Service Mesh automatically injects sidecar proxies into workloads without granting elevated privileges to your containers.\n- You can view rich dashboards for your mesh and services without any extra configuration and then use these metrics to configure service level objectives (SLOs) and alerts to monitor the health of your applications.\n- The managed Anthos Service Mesh control plane is upgraded automatically to ensure that you get the latest security patches and features.\n- The Anthos Service Mesh managed data plane automatically upgrades the sidecar proxies in your workloads so that you don't need to restart services yourself when proxy upgrades and security patches are available.\n- Anthos Service Mesh is a supported product and can be configured using standard open source Istio APIs. For more information, see [supported features](/service-mesh/docs/managed/supported-features-mcp) .\n## ObjectivesThis tutorial includes the following steps:- Create a GKE Autopilot cluster.\n- Install Istio using the`istioctl`command line tool.\n- Deploy a sample application to test mutual TLS (mTLS) authentication.\n- Configure Istio to use mTLS authentication for service-to-service communication using a`PeerAuthentication`custom resource.\n- Verify mTLS authentication using the Kiali dashboard.\n## Costs\nIn this document, you use the following billable components of Google Cloud:- [GKE](/kubernetes-engine/pricing) \n- [Managed Service for Prometheus](/stackdriver/pricing#mgd-prometheus-pricing-summary) \n- [Cloud Load Balancing](/vpc/network-pricing#lb) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin [Cloud Shell](/shell) is preinstalled with the software you need for this tutorial, including [kubectl](https://kubernetes.io/docs/reference/kubectl/) , the [gcloud CLI](/sdk/gcloud) , and [Terraform](/docs/terraform) . If you don't use Cloud Shell, you must install the gcloud CLI.- Grant roles to your Google Account. Run the following command once for each of the following   IAM roles: `roles/container.clusterAdmin` ```\ngcloud projects add-iam-policy-binding PROJECT_ID --member=\"user:EMAIL_ADDRESS\" --role=ROLE\n```- Replace``with your project ID.\n- Replace``with your email address.\n- Replace``with each individual role.## Prepare the environmentTo set up your environment, follow these steps:- Set environment variables:```\nexport PROJECT_ID=PROJECT_ID\ngcloud config set project $PROJECT_ID\ngcloud config set compute/region us-central1\n```Replace `` with your Google Cloud [project ID](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- Clone the GitHub repository:```\ngit clone https://github.com/GoogleCloudPlatform/kubernetes-engine-samples.git\n```\n- Change to the working directory:```\ncd kubernetes-engine-samples/service-mesh/istio-tutorial\n```\n## Create a GKE clusterEnable the Linux capabilities that Istio requires: `NET_RAW` and `NET_ADMIN` . GKE Autopilot does not allow `NET_ADMIN` by default, but you can enable `NET_ADMIN` using the `--workload-policies=allow-net-admin` command in GKE versions 1.27 and later:\n```\ngcloud container clusters create-auto istio-cluster \\\u00a0 \u00a0 --location=\"us-central1\" \\\u00a0 \u00a0 --workload-policies=\"allow-net-admin\"\n```\nTo learn more about GKE Autopilot security, see [Built-in security configurations](/kubernetes-engine/docs/concepts/autopilot-security#built-in-security) .## Install IstioYou can install Istio on a GKE cluster using [Istioctl](https://istio.io/latest/docs/setup/install/istioctl/) .\nIn this tutorial, you install Istio with the default [configuration profile](https://istio.io/latest/docs/setup/additional-setup/config-profiles/) recommended for production deployments.- Install Istio:```\nexport ISTIO_VERSION=1.20.2curl -L https://istio.io/downloadIstio | TARGET_ARCH=$(uname -m) sh ```\n- Add the `istioctl` command line tool to the PATH:```\ncd istio-${ISTIO_VERSION}export PATH=$PWD/bin:$PATH\n```\n- Install Istio on the cluster:```\nistioctl install --set profile=\"default\" -y\n```This step might take several minutes.\n- Wait for the Istio Pods to be ready:```\nwatch kubectl get pods -n istio-system\n```The output is similar to the following:```\nNAME         READY STATUS  RESTARTS AGE\nistio-ingressgateway-5c47bff876-wjm96 1/1  Running  0   2m54s\nistiod-5fc7cb65cd-k8cp4     1/1  Running  0   2m57s\n```When the Istio Pods are `Running` , return to the command line by pressing `Ctrl+C` .\n## Deploy the sample applicationIn this section, you use the [Bank of Anthos](https://github.com/GoogleCloudPlatform/bank-of-anthos) sample application to create a service mesh with mTLS authentication.- Add a namespace label that instructs Istio to enable automatic injection of Envoy sidecar proxies:```\nkubectl label namespace default istio-injection=enabled\n```\n- Deploy the sample application:```\ncd ..git clone https://github.com/GoogleCloudPlatform/bank-of-anthos.gitkubectl apply -f bank-of-anthos/extras/jwt/jwt-secret.yamlkubectl apply -f bank-of-anthos/kubernetes-manifests/\n```\n- Wait for the application to be ready:```\nwatch kubectl get pods\n```The output is similar to the following:```\nNAME         READY STATUS RESTARTS AGE\naccounts-db-0      2/2  Running 0   2m16s\nbalancereader-5c695f78f5-x4wlz  2/2  Running 0   3m8s\ncontacts-557fc79c5-5d7fg    2/2  Running 0   3m7s\nfrontend-7dd589c5d7-b4cgq   2/2  Running 0   3m7s\nledger-db-0       2/2  Running 0   3m6s\nledgerwriter-6497f5cf9b-25c6x  2/2  Running 0   3m5s\nloadgenerator-57f6896fd6-lx5df  2/2  Running 0   3m5s\ntransactionhistory-6c498965f-tl2sk 2/2  Running 0   3m4s\nuserservice-95f44b65b-mlk2p   2/2  Running 0   3m4s\n```When the Pods are `Running` , return to the command line by pressing `Ctrl+C` .\n- Review the following manifest: [  extras/istio/frontend-ingress.yaml ](https://github.com/GoogleCloudPlatform/bank-of-anthos/blob/HEAD/extras/istio/frontend-ingress.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/bank-of-anthos/blob/HEAD/extras/istio/frontend-ingress.yaml) ```\n# Copyright 2020 Google LLC\n## Licensed under the Apache License, Version 2.0 (the \"License\");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 \u00a0http://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an \"AS IS\" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.apiVersion: networking.istio.io/v1alpha3kind: Gatewaymetadata:\u00a0 name: frontend-gatewayspec:\u00a0 selector:\u00a0 \u00a0 istio: ingressgateway # use Istio default gateway implementation\u00a0 servers:\u00a0 - port:\u00a0 \u00a0 \u00a0 number: 80\u00a0 \u00a0 \u00a0 name: http\u00a0 \u00a0 \u00a0 protocol: HTTP\u00a0 \u00a0 hosts:\u00a0 \u00a0 - \"*\"---apiVersion: networking.istio.io/v1alpha3kind: VirtualServicemetadata:\u00a0 name: frontend-ingressspec:\u00a0 hosts:\u00a0 - \"*\"\u00a0 gateways:\u00a0 - frontend-gateway\u00a0 http:\u00a0 - route:\u00a0 \u00a0 - destination:\u00a0 \u00a0 \u00a0 \u00a0 host: frontend\u00a0 \u00a0 \u00a0 \u00a0 port:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 number: 80\n```This manifest describes Istio [Gateway and VirtualService](https://istio.io/latest/docs/tasks/traffic-management/ingress/ingress-control/) resources that expose the application and use Istio as the Ingress controller.\n- Apply the manifest to your cluster:```\nkubectl apply -f bank-of-anthos/extras/istio/frontend-ingress.yaml\n```\n## Configure mTLSMutual TLS (mTLS) authentication is enabled by default in Istio. That means that Istio monitors server workloads that have been migrated to Istio proxies and automatically configures client proxies to establish mTLS connections with these workloads. Istio also configures client proxies not to use mTLS when connecting to workloads without sidecar proxies.\nIstio can configure mTLS to work in three modes:- `PERMISSIVE`: Workloads accept both mTLS and plain text traffic.\n- `STRICT`: Workloads only accept mTLS traffic.\n- `DISABLE`: mTLS is disabled. Use this mode if you want to use your own security solution.\nYou can apply mTLS configuration globally, per namespace, or per workload. In this tutorial, you apply configuration per namespace using the `STRICT` mTLS mode.- Review the following manifest: [  service-mesh/istio-tutorial/peer-authentication.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/service-mesh/istio-tutorial/peer-authentication.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/service-mesh/istio-tutorial/peer-authentication.yaml) ```\napiVersion: security.istio.io/v1beta1kind: PeerAuthenticationmetadata:\u00a0 name: defaultspec:\u00a0 mtls:\u00a0 \u00a0 \u00a0 mode: STRICT\n```This manifest describes a Peer Authentication Istio Custom Resource.\n- Apply the manifest to your cluster:```\nkubectl apply -f peer-authentication.yaml\n```\nFor more information about mTLS in Istio, see [mutual TLS authentication](https://istio.io/latest/docs/concepts/security/#mutual-tls-authentication) .## Verify mTLS is enabled [Kiali](https://kiali.io/) is a web-based observability dashboard for Istio service mesh that provides a graphical view of your microservices environment, allowing you to monitor and troubleshoot your applications. You can use Kiali to verify that mTLS authentication is enabled and functioning correctly in the Istio service mesh. Kiali requires Prometheus as a telemetry data source. This tutorial uses [Google Cloud Managed Service for Prometheus](/stackdriver/docs/managed-prometheus) .\n### Install a query interface\n- Create a IAM service account with the `roles/monitoring.viewer` to allow the query interface to access metrics:```\ngcloud iam service-accounts create monitoring \\\u00a0 \u00a0 --display-name=\"Service account for query interface\"gcloud projects add-iam-policy-binding PROJECT_ID \\\u00a0 \u00a0 --member \"serviceAccount:monitoring@PROJECT_ID.iam.gserviceaccount.com\" \\\u00a0 \u00a0 --role roles/monitoring.viewergcloud iam service-accounts add-iam-policy-binding \\\u00a0 monitoring@PROJECT_ID.iam.gserviceaccount.com \\\u00a0 \u00a0 --role roles/iam.workloadIdentityUser \\\u00a0 \u00a0 --member \"serviceAccount:PROJECT_ID.svc.id.goog[monitoring/default]\"\n```\n- Create a Kubernetes namespace:```\nkubectl create namespace monitoring\n```\n- Annotate the default Kubernetes service account in the namespace to configure [workload identity federation for GKE](/kubernetes-engine/docs/concepts/workload-identity) :```\nkubectl annotate serviceaccount -n monitoring default \\\u00a0 \u00a0 iam.gke.io/gcp-service-account=monitoring@PROJECT_ID.iam.gserviceaccount.com --overwrite\n```\n- Deploy the query interface workload:```\nkubectl -n monitoring apply -f https://raw.githubusercontent.com/GoogleCloudPlatform/prometheus-engine/v0.7.1/examples/frontend.yaml\n```\n- Review the following manifest: [  service-mesh/istio-tutorial/pod-monitorings.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/service-mesh/istio-tutorial/pod-monitorings.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/service-mesh/istio-tutorial/pod-monitorings.yaml) ```\napiVersion: monitoring.googleapis.com/v1kind: PodMonitoringmetadata:\u00a0 name: istiod\u00a0 namespace: istio-systemspec:\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: istiod\u00a0 endpoints:\u00a0 - port: 15014\u00a0 \u00a0 path: /metrics\u00a0 \u00a0 timeout: 30s\u00a0 \u00a0 interval: 60s\n```This manifest describes a `PodMonitoring` resource that collects Istio and Envoy Proxy metrics.\n- Apply the manifest to your cluster:```\nkubectl apply -f pod-monitorings.yaml\n```\n- Get a link to the sample application:```\nINGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')echo \"http://$INGRESS_HOST\"\n```\n- Open the link to view the sample application. Sign in with the default username and password to generate traffic between the microservices.\n### Install KialiWe recommend that you install Kiali using the Kiali Operator.- Install the Kiali Operator:```\nhelm repo add kiali https://kiali.org/helm-chartshelm repo updatehelm install \\\u00a0 \u00a0 --namespace kiali-operator \\\u00a0 \u00a0 --create-namespace \\\u00a0 \u00a0 kiali-operator \\\u00a0 \u00a0 kiali/kiali-operator\n```\n- Review the following manifest: [  service-mesh/istio-tutorial/kiali.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/service-mesh/istio-tutorial/kiali.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/service-mesh/istio-tutorial/kiali.yaml) ```\napiVersion: kiali.io/v1alpha1kind: Kialimetadata:\u00a0 name: kiali\u00a0 namespace: istio-systemspec:\u00a0 deployment:\u00a0 \u00a0 namespace: istio-system\u00a0 auth:\u00a0 \u00a0 strategy: anonymous\u00a0 external_services:\u00a0 \u00a0 custom_dashboards:\u00a0 \u00a0 \u00a0 prometheus:\u00a0 \u00a0 \u00a0 \u00a0 url: \"http://frontend.monitoring:9090/\"\u00a0 \u00a0 \u00a0 \u00a0 auth:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: none\u00a0 \u00a0 prometheus:\u00a0 \u00a0 \u00a0 url: \"http://frontend.monitoring:9090/\"\u00a0 \u00a0 \u00a0 auth:\u00a0 \u00a0 \u00a0 \u00a0 type: none\u00a0 \u00a0 tracing:\u00a0 \u00a0 \u00a0 enabled: false\u00a0 \u00a0 grafana:\u00a0 \u00a0 \u00a0 enabled: false\n```This manifest describes an Operator custom resource that defines the Kiali server.\n- Apply the manifest to your cluster:```\nkubectl apply -f kiali.yaml\n```\n- Wait for the Kiali server to be ready:```\nwatch kubectl get pods -n istio-system\n```The output is similar to the following:```\nNAME         READY STATUS RESTARTS AGE\nistio-ingressgateway-6845466857-92zp8 1/1  Running 0   9m11s\nistiod-6b47d84cf-4cqlt     1/1  Running 0   12m\n```When the Pods are `Running` , return to the command line by pressing `Ctrl+C` .\n- Set up port forwarding on the Kiali server Service to access the dashboard:```\nkubectl -n istio-system port-forward svc/kiali 8080:20001\n```\n- Open Web Preview. In Kiali, go to the **Graph** section and select the **Security** option in the **Display** drop-down. This view displays the security state of each node in the graph. Nodes with an **mTLS enabled** badge indicate that mTLS is enabled for that service, and nodes without the badge indicate that mTLS is not enabled.\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- Delete a Google Cloud project:\n- ```\ngcloud projects delete PROJECT_ID\n```\n### Delete the individual resourcesIf you used an existing project and you don't want to delete it, delete the individual resources.- Delete Kiali:```\nkubectl -n istio-system delete kiali kialihelm uninstall --namespace kiali-operator kiali-operator\n```\n- Delete the monitoring resources:```\nkubectl -n monitoring delete -f https://raw.githubusercontent.com/GoogleCloudPlatform/prometheus-engine/v0.7.1/examples/frontend.yaml\n```\n- Delete the sample application:```\nkubectl delete -f bank-of-anthos/extras/istio/frontend-ingress.yamlkubectl delete -f bank-of-anthos/kubernetes-manifests\n```\n- Uninstall Istio:```\nistioctl uninstall --purge -y\n```\n- Delete the GKE cluster:```\ngcloud container clusters delete --region us-central1 istio-cluster --quiet\n```\n## What's next\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Google Kubernetes Engine (GKE)"}