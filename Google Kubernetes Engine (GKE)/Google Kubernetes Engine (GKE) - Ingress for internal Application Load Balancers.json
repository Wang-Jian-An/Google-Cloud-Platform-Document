{"title": "Google Kubernetes Engine (GKE) - Ingress for internal Application Load Balancers", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/ingress-ilb", "abstract": "# Google Kubernetes Engine (GKE) - Ingress for internal Application Load Balancers\nThis page explains how Ingress for internal Application Load Balancers works in Google Kubernetes Engine (GKE). You can also learn how to [set up and use Ingress forinternal Application Load Balancers](/kubernetes-engine/docs/how-to/internal-load-balance-ingress) .\nIn GKE, the internal Application Load Balancer is a proxy-based, regional, Layer 7 load balancer that enables you to run and scale your services behind an internal load balancing IP address. GKE [Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/) objects support the internal Application Load Balancer natively through the creation of Ingress objects on GKE clusters.\nFor general information about using Ingress for load balancing in GKE, see [HTTP(S) load balancing with Ingress](/kubernetes-engine/docs/concepts/ingress) .\n", "content": "## Benefits of using Ingress for internal Application Load Balancers\nUsing GKE Ingress for internal Application Load Balancers provides the following benefits:\n- A highly available, GKE-managed Ingress controller.\n- Load balancing for internal, service-to-service communication.\n- Container-native load balancing with [Network Endpoint Groups (NEG)](/load-balancing/docs/negs) .\n- Application routing with HTTP and HTTPS support.\n- High-fidelity Compute Engine health checks for resilient services.\n- Envoy-based proxies that are deployed on-demand to meet traffic capacity needs.## Support for Google Cloud features\nIngress for internal Application Load Balancers supports a variety of additional features.\n- [Self-managed SSL Certificates](/load-balancing/docs/ssl-certificates) using Google Cloud. Only regional certificates are supported for this feature.\n- Self-managed SSL Certificates using Kubernetes [Secrets](https://kubernetes.io/docs/concepts/configuration/secret/) .\n- The [Session Affinity](/load-balancing/docs/backend-service#session_affinity) and [Connection Timeout](/load-balancing/docs/backend-service#timeout-setting) [BackendService](/load-balancing/docs/backend-service) features. You can configure these features using [BackendConfig](/kubernetes-engine/docs/concepts/backendconfig) .## Required networking environment for internal Application Load Balancers\n**Important:** Ingress for internal Application Load Balancers requires you to use [NEGs](/load-balancing/docs/negs) as backends. It does not support Instance Groups as backends.\nThe internal Application Load Balancer provides a pool of proxies for your network. The proxies evaluate where each HTTP(S) request should go based on factors such as the URL map, the BackendService's session affinity, and the balancing mode of each backend NEG.\nA region's internal Application Load Balancer uses the [proxy-only subnet](/load-balancing/docs/proxy-only-subnets) for that region in your VPC network to assign internal IP addresses to each proxy created by Google Cloud.\nBy default, the IP address assigned to a load balancer's forwarding rule comes from the node's subnet range assigned by GKE instead of from the proxy-only subnet. You can also [manually specify an IP address](/load-balancing/docs/using-forwarding-rules#adding-fr) for the forwarding rule from any subnet when you create the rule.\nThe following diagram provides an overview of the traffic flow for an internal Application Load Balancer, as described in the preceding paragraph.\nHere's how the internal Application Load Balancer works:\n- A client makes a connection to the IP address and port of the load balancer's forwarding rule.\n- A proxy receives and terminates the client's network connection.\n- The proxy establishes a connection to the appropriate endpoint (Pod) in a NEG, as determined by the load balancer's URL map, and backend services.\nEach proxy listens on the IP address and port specified by the corresponding load balancer's forwarding rule. The source IP address of each packet sent from a proxy to an endpoint is the internal IP address assigned to that proxy from the proxy-only subnet.\n## HTTPS (TLS) between load balancer and your application\nAn internal Application Load Balancer acts as a proxy between your clients and your application. Clients can use HTTP or HTTPS to communicate with the load balancer proxy. The connection from the load balancer proxy to your application uses HTTP by default. However, if your application runs in a GKE Pod and can receive HTTPS requests, you can configure the load balancer to use HTTPS when it forwards requests to your application.\nTo configure the protocol used between the load balancer and your application, use the `cloud.google.com/app-protocols` annotation in your Service manifest.\nThe following Service manifest specifies two ports. The annotation specifies that an internal Application Load Balancer should use HTTP when it targets port 80 of the Service, And use HTTPS when it targets port 443 of the Service.\nYou must use the port's `name` field in the annotation. Do not use a different field such as `targetPort` .\n**Caution:** To limit potential downtime, do not edit the Service's port name when you enable this feature. If your Service's port doesn't have a name, use the empty port name as the key in the annotation, similar to `cloud.google.com/app-protocols: '{\"\": \"HTTPS\"}'` . Editing the port name or annotation after the initial setup might cause downtime for your applications\n```\napiVersion: v1kind: Servicemetadata:\u00a0 name: my-service\u00a0 annotations:\u00a0 \u00a0 cloud.google.com/app-protocols: '{\"my-https-port\":\"HTTPS\",\"my-http-port\":\"HTTP\"}'spec:\u00a0 type: NodePort\u00a0 selector:\u00a0 \u00a0 app: metrics\u00a0 \u00a0 department: sales\u00a0 ports:\u00a0 - name: my-https-port\u00a0 \u00a0 port: 443\u00a0 \u00a0 targetPort: 8443\u00a0 - name: my-http-port\u00a0 \u00a0 port: 80\u00a0 \u00a0 targetPort: 50001\n```\n## What's next\n- [Learn how to deploy a proxy-only subnet](/load-balancing/docs/l7-internal/setting-up-l7-internal#configure-a-network) .\n- [Learn about Ingress for external Application Load Balancers](/kubernetes-engine/docs/concepts/ingress-xlb) .\n- [Learn how to configure Ingress for internal Application Load Balancers](/kubernetes-engine/docs/how-to/internal-load-balance-ingress) .\n- [Read an overview of networking in GKE](/kubernetes-engine/docs/concepts/network-overview) .", "guide": "Google Kubernetes Engine (GKE)"}