{"title": "Google Kubernetes Engine (GKE) - Using Google-managed SSL certificates", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs", "abstract": "# Google Kubernetes Engine (GKE) - Using Google-managed SSL certificates\nThis page shows how you can use [Ingress](/kubernetes-engine/docs/concepts/ingress) objects to create external load balancers with Google-managed SSL certificates. These certificates are Domain Validation (DV) certificates that Google provisions, renews, and manages for your domain names. These certificates don't demonstrate your individual or organizational identity.\nTo learn how to create Google-managed certificates with Google Cloud, see [Google-managed certificates](/load-balancing/docs/ssl-certificates/google-managed-certs) .\nGKE Google-managed SSL certificates support public and private clusters.\n**Note:** This feature is only available with Ingress for external Application Load Balancers.\n", "content": "## Creating an Ingress with a Google-managed certificate\nTo configure a Google-managed SSL certificate and associate it with an Ingress, you need to:\n- Create a`ManagedCertificate`object in the same namespace as the Ingress.\n- Associate the`ManagedCertificate`object to an Ingress by adding the`networking.gke.io/managed-certificates`annotation to the Ingress. This annotation is a comma-separated list of`ManagedCertificate`objects.\n**Note:** Using Google-managed SSL certificates with Ingress doesn't affect how you configure [Ingress traffic rules](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules) .\n### Limitations\nGoogle-managed certificates are less flexible than certificates you obtain and manage yourself. Google-managed certificates support up to 100 non-wildcard domains. Unlike self-managed certificates, Google-managed certificates don't support wildcard domains.\nIf you require self-managed certificates or if you already own SSL certificates that you would like to configure on your Ingress, see [Setting up HTTPS (TLS) between client and load balancer](/kubernetes-engine/docs/concepts/ingress-xlb#setting_up_https_tls_between_client_and_load_balancer) .\nThe number and type of certificates supported by an Ingress are defined by the [limits of Google-managed SSL certificates](/load-balancing/docs/ssl-certificates#ssl-certificate-limits) .\nUpdates on Google-managed certificates are not supported. For more information, see [Manually updating a Google-managed certificate](#manual-update) .\nIf the certificate is revoked directly with the Certificate Authority, Google does not automatically rotate the certificate. You must delete the ManagedCertificate and create a new one.\n### Prerequisites\n- You must own the domain name. The domain name must be no longer than 63 characters. You can use [Google Domains](https://domains.google.com/) or another registrar.\n- If you use a GKE Standard cluster, the`HttpLoadBalancing`add-on must be enabled.\n- Your`ingressClassName`must be`\"gce\"`.\n- You must apply`Ingress`and`ManagedCertificate`resources in the same project and namespace.\n- Create a [reserved (static) external IP address](/compute/docs/ip-addresses/reserve-static-external-ip-address) . Reserving a static IP address ensures that it remains yours, even if you delete the Ingress. If you don't reserve an IP address, it might change, requiring you to reconfigure your domain's DNS records. Use Google Cloud CLI or the Google Cloud console to create a reserved IP address.\nTo create a reserved IP address, run the following command:\n```\ngcloud compute addresses create ADDRESS_NAME --global\n```\nReplace `` with the name of the reserved IP address you are creating.\nTo find the static IP address you created, run the following command:\n```\ngcloud compute addresses describe ADDRESS_NAME --global\n```\nThe output is similar to the following:\n```\naddress: 203.0.113.32\n...\n```\nTo create a reserved IP address, perform the following steps:- Go to the **External IP addresses** page in the Google Cloud console. [Go to External IP addresses](https://console.cloud.google.com/networking/addresses/add) \n- Specify a name for the IP address (for example, `example-ip-address` ).\n- Specify if you want an **IPv4** or **IPv6** address.\n- Select the **Global** option for **Type** .\n- Click **Reserve** . The IP address is listed in the **External Address** column. **Note:** This step requires [Config Connector](https://cloud.google.com/config-connector/docs/overview) . Follow the [installation instructions](https://cloud.google.com/config-connector/docs/how-to/install-upgrade-uninstall) to install Config Connector on your cluster.\n [View on GitHub](https://github.com/GoogleCloudPlatform/k8s-config-connector/blob/HEAD/config/samples/tutorials/managed-certs/compute-address.yaml) \n```\napiVersion: compute.cnrm.cloud.google.com/v1beta1kind: ComputeAddressmetadata:\u00a0 name: example-ip-addressspec:\u00a0 location: global\n```\nTo deploy this manifest, download it to your machine as\n`compute-address.yaml`\n, and run:\n```\nkubectl apply -f compute-address.yaml\n```\n### Setting up a Google-managed certificate\n- Create a `ManagedCertificate` object. This resource specifies the domains for the SSL certificate. Wildcard domains are not supported.The following manifest describes a `ManagedCertificate` object. Save the manifest as `managed-cert.yaml` .```\napiVersion: networking.gke.io/v1kind: ManagedCertificatemetadata:\u00a0 name: managed-certspec:\u00a0 domains:\u00a0 \u00a0 - FQDN_1\u00a0 \u00a0 - FQDN_2\n```Replace the following:- ``,``: Fully-qualified domain names that you own. For example,`example.com`and`www.example.com`.\n- Apply the manifest to your cluster:```\nkubectl apply -f managed-cert.yaml\n```\n- Create a Service of type `NodePort` to expose your application to the internet.The following manifest describes a Service of type `NodePort` . Save the manifest as `mc-service.yaml` .```\napiVersion: v1kind: Servicemetadata:\u00a0 name: mc-servicespec:\u00a0 selector:\u00a0 \u00a0 app: mc-service\u00a0 type: NodePort\u00a0 ports:\u00a0 \u00a0 - protocol: TCP\u00a0 \u00a0 \u00a0 port: 80\u00a0 \u00a0 \u00a0 targetPort: 8080\n```\n- Apply the manifest to your cluster:```\nkubectl apply -f mc-service.yaml\n``` **Note:** For this `ManagedCertificate` object to become `Active` , you must attach it to an Ingress. The `ManagedCertificate` does not have to already be `Active` for you to attach it to an Ingress.\n- Create an Ingress.The following manifest describes an Ingress that uses the `ManagedCertificate` you created. Save the manifest as `managed-cert-ingress.yaml` .```\napiVersion: networking.k8s.io/v1kind: Ingressmetadata:\u00a0 name: managed-cert-ingress\u00a0 annotations:\u00a0 \u00a0 kubernetes.io/ingress.global-static-ip-name: ADDRESS_NAME\u00a0 \u00a0 networking.gke.io/managed-certificates: managed-cert\u00a0 \u00a0 ingressClassName: \"gce\"spec:\u00a0 defaultBackend:\u00a0 \u00a0 service:\u00a0 \u00a0 \u00a0 name: mc-service\u00a0 \u00a0 \u00a0 port:\u00a0 \u00a0 \u00a0 \u00a0 number: SERVICE_PORT\n```Replace the following:- ``: the name of your reserved IP address.\n- ``: the value of`ports.port`in your Service manifest.\n- Apply the manifest to your cluster:```\nkubectl apply -f managed-cert-ingress.yaml\n``` **Note:** It might take several hours for Google Cloud to provision the load balancer and the managed certificate, and for the load balancer to begin using the new certificate. For more information, see [Deploy a Google-managed certificate with load balancer authorization](/certificate-manager/docs/deploy-google-managed-lb-auth#wait_until_the_certificate_has_been_activated) .\n- Get the IP address of the load balancer:```\nkubectl get ingress\n```The output is similar to the following:```\nNAME     HOSTS  ADDRESS   PORTS  AGE\nmanaged-cert-ingress *   203.0.113.32  80  54s\n```The load balancer's IP address is listed in the `ADDRESS` column. If you are using a reserved static IP address that will be the load balancer's address.If the address is not listed, wait for the Ingress to finish setting up.\n- Configure the DNS records for your domains to point to the IP address of the load balancer. If you use Cloud DNS, see [Managing records](/dns/records) for details. **Note:** You must wait for the DNS records you configured to propagate before continuing.\n- Wait for the Google-managed certificate to finish provisioning. This might take up to 60 minutes. You can check the status of the certificate using the following command:```\nkubectl describe managedcertificate managed-cert\n```The output is similar to the following:```\nName:   managed-cert\nNamespace: default\nLabels:  <none>\nAnnotations: <none>\nAPI Version: networking.gke.io/v1\nKind:   ManagedCertificate\n(...)\nSpec:\n Domains:\n FQDN_1\n FQDN_2\nStatus:\n CertificateStatus: Active\n(...)\n```The value of the `Status.CertificateStatus` field indicates the certificate is provisioned. If `Status.CertificateStatus` is not `Active` , the certificate is not yet provisioned.\n- You can check the events on an Ingress by using the following command:```\nkubectl describe ingress INGRESS_NAME\n```Replace `` with the name of your Ingress.\n- Verify that SSL is working by visiting your domains using the `https://` prefix. Your browser indicates that the connection is secure and you can view the certificate details.## Migrating to Google-managed certificates from self-managed certificates\nWhen you migrate an Ingress from using self-managed SSL certificates to Google-managed SSL certificates, don't delete any self-managed SSL certificates before the Google-managed SSL certificates are active. After the Google-managed SSL certificates are successfully provisioned, they automatically become active. When the Google-managed SSL certificates are active, you can delete your self-managed SSL certificates.\nUse these instructions for migrating from self-managed to Google-managed SSL certificates.\n- Add a new Google-managed certificate to the Ingress, as described in the [Setting upa Google-managed certificate](#setting_up_a_google-managed_certificate) section.\n- Wait until the status of the Google-managed certificate resource is Active. Check the status of the certificate with the following command:```\nkubectl describe managedcertificate managed-cert\n```\n- When the status is `Active` , update the Ingress to remove the references to the self-managed certificate.## Removing a Google-managed certificate\nTo remove a Google-managed certificate from your cluster you must delete the `ManagedCertificate` object and remove the Ingress annotation that references it.\n- Delete the `ManagedCertificate` object:```\nkubectl delete -f managed-cert.yaml\n```The output is similar to the following:```\nmanagedcertificate.networking.gke.io \"managed-cert\" deleted\n```\n- Remove the annotation from the Ingress:```\nkubectl annotate ingress managed-cert-ingress networking.gke.io/managed-certificates```Notice the minus sign, `-` , at the end of the command.\n- Release the static IP address that you reserved for your load balancer.You can use the Google Cloud CLI, the Google Cloud console, or Config Connector to release a reserved IP address.\nUse the following command to release the reserved IP address:\n```\ngcloud compute addresses delete ADDRESS_NAME --global\n```\nReplace `` with the name of the IP address.\nTo release the reserved IP address, perform the following steps:- Go to the **External IP addresses** page in the Google Cloud console. [Go to External IP addresses](https://console.cloud.google.com/networking/addresses) \n- Select the checkbox next to the IP address you want to release.\n- Click **Release IP address** . **Note:** This step requires [Config Connector](https://cloud.google.com/config-connector/docs/overview) . Follow the [installation instructions](https://cloud.google.com/config-connector/docs/how-to/install-upgrade-uninstall) to install Config Connector on your cluster.\n [View on GitHub](https://github.com/GoogleCloudPlatform/k8s-config-connector/blob/HEAD/config/samples/tutorials/managed-certs/compute-address.yaml) \n```\napiVersion: compute.cnrm.cloud.google.com/v1beta1kind: ComputeAddressmetadata:\u00a0 name: example-ip-addressspec:\u00a0 location: global\n```To deploy this manifest, download it to your machine as `compute-address.yaml` , and run:\n```\nkubectl delete -f compute-address.yaml\n```## Troubleshooting\nThis section provides information on how to resolve issues with Google-managed certificates.\n### Check events on ManagedCertificate and Ingress resources\nIf you exceed the number of allowed certificates, an event with a `TooManyCertificates` reason is added to the `ManagedCertificate` . You can check the events on a `ManagedCertificate` object using the following command:\n```\nkubectl describe managedcertificate CERTIFICATE_NAME\n```\nReplace `` with the name of your `ManagedCertificate` .\nIf you attach a non-existent `ManagedCertificate` to an Ingress, an event with a `MissingCertificate` reason is added to the Ingress. You can check the events on an Ingress by using the following command:\n```\nkubectl describe ingress INGRESS_NAME\n```\nReplace `` with the name of your Ingress.\n### Managed certificate not provisioned when domain resolves to IP addresses of multiple load balancers\nWhen your domain resolves to IP addresses of multiple load balancers (multiple Ingress objects), you should create a single `ManagedCertificate` object and attach it to all the Ingress objects. If you instead create many `ManagedCertificate` objects and attach each of them to a separate Ingress, the Certificate Authority might not be able to verify the ownership of your domain and some of your certificates might not be provisioned. For the verification to be successful, the certificate must be visible under all the IP addresses to which your domain resolves to.\nSpecifically, when your domain resolves to an IPv4 and an IPv6 addresses which are configured with different Ingress objects, you should create a single `ManagedCertificate` object and attach it to both Ingresses.\n### Disrupted communication between Google-managed certificates and Ingress\nManaged certificates communicate with Ingress using the [ingress.gcp.kubernetes.io/pre-shared-cert annotation](/kubernetes-engine/docs/how-to/internal-load-balance-ingress#ingress_annotations) . You can disrupt this communication if you, for example:\n- Run an automated process that clears the`ingress.gcp.kubernetes.io/pre-shared-cert`annotation.\n- Store a snapshot of Ingress then delete and restore the Ingress from the snapshot. In the meantime, an`SslCertificate`resource listed in the`ingress.gcp.kubernetes.io/pre-shared-cert`annotation might have been deleted. Ingress does not work if any certificates attached to it are missing.\nIf communication between Google-managed certificates and Ingress is disrupted, delete the contents of the `ingress.gcp.kubernetes.io/pre-shared-cert` annotation and wait for the system to reconcile. To prevent recurrence, ensure that the annotation is not inadvertently modified or deleted.\n### Validation errors when creating a Google-managed certificate\n`ManagedCertificate` definitions are validated before the `ManagedCertificate` object is created. If validation fails, the `ManagedCertificate` object is not created and an error message is printed. The different error messages and reasons are explained as follows:\nYour `ManagedCertificate` manifest lists more than 100 domains in the `spec.domains` field. Google-managed certificates support only up to 100 domains.\nYou specified an invalid domain name or a wildcard domain name in the `spec.domains` field. The `ManagedCertificate` object does not support wildcard domains (for example, `*.example.com` ).\nYou specified a domain name that is too long. Google-managed certificates support domain names with at most 63 characters.\n### Manually updating a Google-managed certificate\nTo manually update the certificate so that the certificate for the old domain continues to work until the certificate for the new domain is provisioned, follow these steps:\n- Create a`ManagedCertificate`for the new domain.\n- Add the name of the`ManagedCertificate`to the`networking.gke.io/managed-certificates`annotation on the Ingress using a comma-separated list. Don't remove the old certificate name.\n- Wait until the`ManagedCertificate`becomes Active.\n- Detach the old certificate from the Ingress and delete it.\nWhen you create a `ManagedCertificate` , Google Cloud creates a Google-managed SSL certificate. You cannot update this certificate. If you update the `ManagedCertificate` , Google Cloud deletes and recreates the Google-managed SSL certificate.\n**Warning:** If you update an existing `ManagedCertificate` without first creating and attaching a new certificate to the Ingress, you'll experience a service disruption when Google Cloud deletes and recreates the load balancer and certificate. Attaching a new `ManagedCertificate` prevents disruption because the Ingress has a fallback certificate that it can use with the load balancer.\nTo provide secure HTTPS encrypted Ingress for your GKE clusters, see example [Secure Ingress](https://github.com/GoogleCloudPlatform/gke-networking-recipes/tree/main/ingress/single-cluster/ingress-https) .\n## What's next\n- Learn more about [Google-managed certificates](/load-balancing/docs/ssl-certificates/google-managed-certs) .\n- Learn how to set up an [external Application Load Balancer with Ingress](/kubernetes-engine/docs/tutorials/http-balancer) .\n- Learn how to [Use multiple SSL certificates with external Application Load Balancers with Ingress](/kubernetes-engine/docs/how-to/ingress-multi-ssl) .\n- Implement a [secure Ingress](https://github.com/GoogleCloudPlatform/gke-networking-recipes/tree/main/ingress/single-cluster/ingress-https) .", "guide": "Google Kubernetes Engine (GKE)"}