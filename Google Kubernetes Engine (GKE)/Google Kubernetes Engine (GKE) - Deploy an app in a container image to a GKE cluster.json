{"title": "Google Kubernetes Engine (GKE) - Deploy an app in a container image to a GKE cluster", "url": "https://cloud.google.com/kubernetes-engine/docs/quickstarts/deploy-app-container-image", "abstract": "# Google Kubernetes Engine (GKE) - Deploy an app in a container image to a GKE cluster\n# Deploy an app in a container image to a GKE clusterThis page shows you how to do the following:- Create a Hello World app.\n- Package the app into a container image using Cloud Build.\n- Create a cluster in Google Kubernetes Engine (GKE).\n- Deploy the container image to your cluster.\nThe sample is shown in several languages, but you can use other languages in addition to the ones shown.To follow step-by-step guidance for this task directly in the Cloud Shell Editor, click **Guide me** :\n [Guide me](https://console.cloud.google.com/getting-started?tutorial=kubernetes--autopilot) ", "content": "## Before you begin- `kubectl`is used to manage Kubernetes, the cluster orchestration system used by  GKE. You can install`kubectl`by using`gcloud`:```\ngcloud components install kubectl\n```\n## Writing the sample appFor instructions on creating a Hello World app that runs on GKE, click your language:\n- Create a new directory named `helloworld-gke` and change directory into it:```\nmkdir helloworld-gkecd helloworld-gke\n```\n- Create a new module named `example.com/helloworld` :```\ngo mod init example.com/helloworld\n```\n- Create a new file named `helloworld.go` and paste the following code into it: [  quickstarts/languages/go/helloworld.go ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/go/helloworld.go) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/go/helloworld.go) ```\npackage mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"net/http\"\u00a0 \u00a0 \u00a0 \u00a0 \"os\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 http.HandleFunc(\"/\", handler)\u00a0 \u00a0 \u00a0 \u00a0 port := os.Getenv(\"PORT\")\u00a0 \u00a0 \u00a0 \u00a0 if port == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port = \"8080\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"Listening on localhost:%s\", port)\u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%s\", port), nil))}func handler(w http.ResponseWriter, r *http.Request) {\u00a0 \u00a0 \u00a0 \u00a0 log.Print(\"Hello world received a request.\")\u00a0 \u00a0 \u00a0 \u00a0 target := os.Getenv(\"TARGET\")\u00a0 \u00a0 \u00a0 \u00a0 if target == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 target = \"World\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Hello %s!\\n\", target)}\n```This code creates a web server that listens on the port defined by the `PORT` environment variable.\nYour app is finished and ready to be packaged in a Docker container, and then uploaded to Artifact Registry.- Create a new directory named `helloworld-gke` and change into this directory:```\nmkdir helloworld-gkecd helloworld-gke\n```\n- Create a `package.json` file with the following contents: [  quickstarts/languages/nodejs/package.json ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/package.json) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/package.json) ```\n{\u00a0 \"name\": \"gke-helloworld\",\u00a0 \"version\": \"1.0.0\",\u00a0 \"description\": \"GKE hello world sample in Node\",\u00a0 \"main\": \"index.js\",\u00a0 \"scripts\": {\u00a0 \u00a0 \"start\": \"node index.js\"\u00a0 },\u00a0 \"author\": \"\",\u00a0 \"license\": \"Apache-2.0\",\u00a0 \"dependencies\": {\u00a0 \u00a0 \"express\": \"^4.16.4\"\u00a0 }}\n```\n- In the same directory, create a `index.js` file, and copy the following lines into this file: [  quickstarts/languages/nodejs/index.js ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/index.js) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/index.js) ```\nconst express = require('express');const app = express();app.get('/', (req, res) => {\u00a0 console.log('Hello world received a request.');\u00a0 const target = process.env.TARGET || 'World';\u00a0 res.send(`Hello ${target}!`);});const port = process.env.PORT || 8080;app.listen(port, () => {\u00a0 console.log('Hello world listening on port', port);});\n```This code creates a web server that listens on the port defined by the `PORT` environment variable.\nYour app is finished and ready to be packaged in a Docker container and uploaded to Artifact Registry.- Create a new directory named `helloworld-gke` and change into this directory:```\nmkdir helloworld-gkecd helloworld-gke\n```\n- Create a file named `app.py` and paste the following code into this file: [  quickstarts/languages/python/app.py ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/python/app.py) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/python/app.py) ```\nimport osfrom flask import Flaskapp = Flask(__name__)@app.route('/')def hello_world():\u00a0 \u00a0 target = os.environ.get('TARGET', 'World')\u00a0 \u00a0 return 'Hello {}!\\n'.format(target)if __name__ == \"__main__\":\u00a0 \u00a0 app.run(debug=True,host='0.0.0.0',port=int(os.environ.get('PORT', 8080)))\n```\nCreate a Spring Boot app.- Install [Java SE 8 or higher JDK](https://www.oracle.com/java/technologies/javase-downloads.html) and [cURL](https://curl.haxx.se) . Java SE and cURL are only required to create the new web project in the next step. The Dockerfile, which is described later, loads all dependencies into the container.\n- From your terminal, create a new empty web project:```\ncurl https://start.spring.io/starter.zip \\\u00a0 \u00a0 -d dependencies=web \\\u00a0 \u00a0 -d javaVersion=1.8 \\\u00a0 \u00a0 -d type=maven-project \\\u00a0 \u00a0 -d bootVersion=2.6.6 \\\u00a0 \u00a0 -d name=helloworld \\\u00a0 \u00a0 -d artifactId=helloworld \\\u00a0 \u00a0 -d baseDir=helloworld-gke \\\u00a0 \u00a0 -o helloworld-gke.zipunzip helloworld-gke.zipcd helloworld-gke\n```You now have a new Spring Boot project in `helloworld-gke` .\n- In the `src/main/java/com/example/helloworld/HelloworldApplication.java` file, Update the `HelloworldApplication` class by adding a `@RestController` to handle the `/` mapping. [  quickstarts/languages/java/src/main/java/com/example/helloworld/HelloworldApplication.java ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/java/src/main/java/com/example/helloworld/HelloworldApplication.java) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/java/src/main/java/com/example/helloworld/HelloworldApplication.java) ```\npackage com.example.helloworld;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;@SpringBootApplicationpublic class HelloworldApplication {\u00a0 \u00a0 \u00a0 \u00a0 @Value(\"${TARGET:World}\")\u00a0 \u00a0 \u00a0 \u00a0 String target;\u00a0 \u00a0 \u00a0 \u00a0 @RestController\u00a0 \u00a0 \u00a0 \u00a0 class HelloworldController {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 @GetMapping(\"/\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String hello() {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return \"Hello \" + target + \"!\";\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 public static void main(String[] args) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SpringApplication.run(HelloworldApplication.class, args);\u00a0 \u00a0 \u00a0 \u00a0 }}\n```This code creates a web server that listens on the port defined by the `PORT` environment variable.\nYour app is finished and ready to be packaged in a Docker container, and then uploaded to Artifact Registry.- Install the [.NET SDK](https://dotnet.microsoft.com/en-us/download) . The .NET SDK is only required to create the new web project in the next step. The `Dockerfile` , which is described later, loads all dependencies into the container.\n- From your terminal, create a new empty web project:```\ndotnet new web -o helloworld-gke\n```\n- Change directory to `helloworld-gke` .```\ncd helloworld-gke\n```\n- Update `Program.cs` to listen on port `8080` : [  quickstarts/languages/dotnet/Program.cs ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/dotnet/Program.cs) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/dotnet/Program.cs) ```\nvar builder = WebApplication.CreateBuilder(args);// Google Cloud Run sets the PORT environment variable to tell this// process which port to listen to.var port = Environment.GetEnvironmentVariable(\"PORT\") ?? \"8080\";var url = $\"http://0.0.0.0:{port}\";var target = Environment.GetEnvironmentVariable(\"TARGET\") ?? \"World\";var app = builder.Build();app.MapGet(\"/\", () => $\"Hello {target}!\");app.Run(url);\n```\nYour app is finished and ready to be packaged in a Docker container, and then uploaded to Artifact Registry.- Create a new directory named `helloworld-gke` and change into this directory:```\nmkdir helloworld-gkecd helloworld-gke\n```\n- Create a file named `index.php` and paste the following code into this file: [  quickstarts/languages/php/index.php ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/php/index.php) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/php/index.php) ```\n<?php$target = getenv('TARGET', true) ?: 'World';echo sprintf(\"Hello %s!\", $target);?>\n```\nYour app is finished and ready to be packaged in a Docker container, and then uploaded to Artifact Registry.## Containerizing an app with Cloud Build\n- To containerize the sample app, create a new file named `Dockerfile` in the same directory as the source files, and copy the following content:\n [  quickstarts/languages/go/Dockerfile ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/go/Dockerfile) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/go/Dockerfile) \n```\n# Use the offical Go image to create a build artifact.# This is based on Debian and sets the GOPATH to /go.# https://hub.docker.com/_/golangFROM golang:1.21.0 as builderWORKDIR /app# Initialize a new Go module.RUN go mod init quickstart-go# Copy local code to the container image.COPY *.go ./# Build the command inside the container.RUN CGO_ENABLED=0 GOOS=linux go build -o /quickstart-go# Use a Docker multi-stage build to create a lean production image.# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-buildsFROM gcr.io/distroless/base-debian11# Change the working directory.WORKDIR /# Copy the binary to the production image from the builder stage.COPY --from=builder /quickstart-go /quickstart-go# Run the web service on container startup.USER nonroot:nonrootENTRYPOINT [\"/quickstart-go\"]\n```\n [  quickstarts/languages/nodejs/Dockerfile ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/Dockerfile) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/Dockerfile) \n```\n# Use the official lightweight Node.js 16 image.# https://hub.docker.com/_/nodeFROM node:17-slim# Create and change to the app directory.WORKDIR /usr/src/app# Copy application dependency manifests to the container image.# A wildcard is used to ensure both package.json AND package-lock.json are copied.# Copying this separately prevents re-running npm install on every code change.COPY package*.json ./# Install production dependencies.RUN npm install --omit=dev# Copy local code to the container image.COPY . ./# Run the web service on container startup.CMD [ \"npm\", \"start\" ]\n```Add a further `.dockerignore` file to ensure that local files do not affect the container build process:\n [  quickstarts/languages/nodejs/.dockerignore ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/.dockerignore) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/nodejs/.dockerignore) \n```\nDockerfileREADME.mdnode_modulesnpm-debug.log\n``` [  quickstarts/languages/python/Dockerfile ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/python/Dockerfile) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/python/Dockerfile) \n```\n# Use the official lightweight Python image.# https://hub.docker.com/_/pythonFROM python:3.7-slim# Copy local code to the container image.ENV APP_HOME /appWORKDIR $APP_HOMECOPY . ./# Install production dependencies.RUN pip install Flask gunicorn# Run the web service on container startup. Here we use the gunicorn# webserver, with one worker process and 8 threads.# For environments with multiple CPU cores, increase the number of workers# to be equal to the cores available.CMD exec gunicorn --bind :$PORT --workers 1 --threads 8 app:app\n```Add a `.dockerignore` file to ensure that local files don't affect the container build process:\n [  quickstarts/languages/python/.dockerignore ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/python/.dockerignore) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/python/.dockerignore) \n```\nDockerfileREADME.md*.pyc*.pyo*.pyd__pycache__\n``` [  quickstarts/languages/java/Dockerfile ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/java/Dockerfile) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/java/Dockerfile) \n```\n# Use the official maven/Java 8 image to create a build artifact.# https://hub.docker.com/_/mavenFROM maven:3.5-jdk-8-alpine as builder# Copy local code to the container image.WORKDIR /appCOPY pom.xml ./COPY src ./src/# Build a release artifact.RUN mvn package -DskipTests# Use AdoptOpenJDK for base image.# It's important to use OpenJDK 8u191 or above that has container support enabled.# https://hub.docker.com/r/adoptopenjdk/openjdk8# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-buildsFROM adoptopenjdk/openjdk8:jdk8u202-b08-alpine-slim# Copy the jar to the production image from the builder stage.COPY --from=builder /app/target/helloworld-*.jar /helloworld.jar# Run the web service on container startup.CMD [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-Dserver.port=${PORT}\",\"-jar\",\"/helloworld.jar\"]\n```\n [  quickstarts/languages/dotnet/Dockerfile ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/dotnet/Dockerfile) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/dotnet/Dockerfile) \n```\n# Use Microsoft's official lightweight .NET images.FROM mcr.microsoft.com/dotnet/sdk:6.0 AS buildWORKDIR /app# Install production dependencies.# Copy csproj and restore as distinct layers.COPY *.csproj ./RUN dotnet restore# Copy local code to the container image.COPY . ./# Build a release artifact.RUN dotnet publish -c Release -o out# Run the web service on container startup in a lean production image.FROM mcr.microsoft.com/dotnet/aspnet:6.0WORKDIR /appCOPY --from=build /app/out .# Start the .dll (will have the same name as your .csproj file)ENTRYPOINT [\"dotnet\", \"helloworld-gke.dll\"]\n```Add a `.dockerignore` file to ensure that local files don't affect the container build process:\n [  quickstarts/languages/dotnet/.dockerignore ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/dotnet/.dockerignore) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/dotnet/.dockerignore) \n```\nDockerfileREADME.md**/obj/**/bin/\n``` [  quickstarts/languages/php/Dockerfile ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/php/Dockerfile) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/php/Dockerfile) \n```\n# Use the official PHP 7.4 image.# https://hub.docker.com/_/phpFROM php:7.4-apache# Copy local code to the container image.COPY index.php /var/www/html/# Use port 8080 in Apache configuration files.RUN sed -i 's/80/${PORT}/g' /etc/apache2/sites-available/000-default.conf /etc/apache2/ports.conf# Configure PHP for development.# Switch to the production php.ini for production operations.# RUN mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"# https://hub.docker.com/_/php#configurationRUN mv \"$PHP_INI_DIR/php.ini-development\" \"$PHP_INI_DIR/php.ini\"\n```Add a `.dockerignore` file to ensure that local files don't affect the container build process:\n [  quickstarts/languages/php/.dockerignore ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/php/.dockerignore) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/php/.dockerignore) \n```\nDockerfileREADME.mdvendor\n```\n- Get your Google Cloud project ID:```\ngcloud config get-value project\n```\n- In this quickstart, you will store your container in Artifact Registry and deploy it to your cluster from the registry. Run the following command to create a repository named `hello-repo` in the same location as your cluster:```\ngcloud artifacts repositories create hello-repo \\\u00a0 \u00a0 --project=PROJECT_ID \\\u00a0 \u00a0 --repository-format=docker \\\u00a0 \u00a0 --location=us-central1 \\\u00a0 \u00a0 --description=\"Docker repository\"\n```Replace the following values:- ``is your Google Cloud project ID\n- Build your container image using [Cloud Build](/build) , which is similar to running `docker build` and `docker push` , but the build happens on Google Cloud:```\ngcloud builds submit \\\u00a0 --tag us-central1-docker.pkg.dev/PROJECT_ID/hello-repo/helloworld-gke .\n```The image is stored in [Artifact Registry](/artifact-registry/docs) .\n## Creating a GKE clusterA GKE cluster is a managed set of Compute Engine virtual machines that operate as a single GKE cluster.- Create the cluster.```\ngcloud container clusters create-auto helloworld-gke \\\u00a0 --location us-central1\n```\n- Verify that you have access to the cluster. The following command lists the nodes in your container cluster which are up and running and indicates that you have access to the cluster.```\nkubectl get nodes\n```If you run into errors, refer to the [Kubernetes Troubleshooting guide](https://kubernetes.io/docs/tasks/debug/debug-cluster/) .\n## Deploying to GKETo deploy your app to the GKE cluster you created, you need two Kubernetes objects.- A [Deployment](http://kubernetes.io/docs/concepts/workloads/controllers/deployment/) to define your app.\n- A [Service](https://kubernetes.io/docs/concepts/services-networking/service/) to define how to access your app.\n### Deploy an appThe app has a frontend server that handles the web requests. You define the cluster resources needed to run the frontend in a new file called `deployment.yaml` . These resources are described as a Deployment. You use Deployments to create and update a [ReplicaSet](https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/) and its associated Pods.- Create the `deployment.yaml` file in the same directory as your other files and copy the following content. Replace the following values in your file:- ``is your Google Cloud project ID:\n- ``is the repository location, such as`us-central1`.\n [  quickstarts/languages/deployment.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/deployment.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/deployment.yaml) ```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: helloworld-gkespec:\u00a0 replicas: 1\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: hello\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: hello\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: hello-app\u00a0 \u00a0 \u00a0 \u00a0 # Replace $LOCATION with your Artifact Registry location (e.g., us-west1).\u00a0 \u00a0 \u00a0 \u00a0 # Replace $GCLOUD_PROJECT with your project ID.\u00a0 \u00a0 \u00a0 \u00a0 image: $LOCATION-docker.pkg.dev/$GCLOUD_PROJECT/hello-repo/helloworld-gke:latest\u00a0 \u00a0 \u00a0 \u00a0 # This app listens on port 8080 for web traffic by default.\u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 - containerPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: PORT\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: \"8080\"\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memory: \"1Gi\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: \"500m\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ephemeral-storage: \"1Gi\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 limits:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memory: \"1Gi\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: \"500m\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ephemeral-storage: \"1Gi\"\n```\n- Deploy the resource to the cluster:```\nkubectl apply -f deployment.yaml\n```\n- Track the status of the Deployment:```\nkubectl get deployments\n```The Deployment is complete when all of the `AVAILABLE` deployments are `READY` .```\nNAME    READY UP-TO-DATE AVAILABLE AGE\nhelloworld-gke 1/1  1   1   20s\n```If the Deployment has a mistake, run `kubectl apply -f deployment.yaml` again to update the Deployment with any changes.\n- After the Deployment is complete, you can see the Pods that the Deployment created:```\nkubectl get pods\n```\n### Deploy a Service [Services](https://kubernetes.io/docs/concepts/services-networking/service/) provide a single point of access to a set of Pods. While it's possible to access a single Pod, Pods are ephemeral and can only be accessed reliably by using a service address. In your Hello World app, the \"hello\" Service defines a [load balancer](https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/) to access the `hello-app` Pods from a single IP address. This service is defined in the `service.yaml` file.- Create the file `service.yaml` in the same directory as your other source files with the following content: [  quickstarts/languages/service.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/service.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/languages/service.yaml) ```\n# The hello service provides a load-balancing proxy over the hello-app# pods. By specifying the type as a 'LoadBalancer', Kubernetes Engine will# create an external HTTP load balancer.apiVersion: v1kind: Servicemetadata:\u00a0 name: hellospec:\u00a0 type: LoadBalancer\u00a0 selector:\u00a0 \u00a0 app: hello\u00a0 ports:\u00a0 - port: 80\u00a0 \u00a0 targetPort: 8080\n```The Pods are defined separately from the service that uses the Pods. Kubernetes uses [labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/) to select the pods that a service addresses. With labels, you can have a service that addresses Pods from different replica sets and have multiple services that point to an individual Pod.\n- Create the Hello World Service:```\nkubectl apply -f service.yaml\n```\n- Get the external IP address of the service:```\nkubectl get services\n```It can take up to 60 seconds to allocate the IP address. The external IP address is listed under the column `EXTERNAL-IP` for the `hello` Service.```\nNAME   TYPE   CLUSTER-IP  EXTERNAL-IP  PORT(S)  AGE\nhello  LoadBalancer 10.22.222.222 35.111.111.11 80:32341/TCP 1m\nkubernetes ClusterIP  10.22.222.1  <none>   443/TCP  20m\n```\n### View a deployed appYou have now deployed all the resources needed to run the Hello World app on GKE.\nUse the external IP address from the previous step to load the app in your web browser, and see your running app:\n```\n http://EXTERNAL_IP\n```\nOr, you can make a `curl` call to the external IP address of the service:\n```\ncurl EXTERNAL_IP\n```\nThe output displays the following:\n```\nHello World!\n```## Clean upTo avoid incurring charges to your Google Cloud account for   the resources used on this page, follow these steps.\nYou are charged for\n [the Compute Engine instances](/kubernetes-engine/pricing) \nrunning in your cluster, as well as for\n [the container image in Artifact Registry](/artifact-registry/pricing) \n.\nDeleting your Google Cloud project stops billing for all the resources used within that project.- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\nIf you want to keep your project but only delete the resources used in this tutorial, delete your cluster and image.\nTo delete a cluster using the Google Cloud CLI, run the following command for the mode that you used:\n```\ngcloud container clusters delete helloworld-gke \\\u00a0 \u00a0 --location us-central1\n```\n **Note:** For more information, refer to the documentation on [Deleting a cluster](/kubernetes-engine/docs/how-to/deleting-a-cluster) .\nTo delete an image in your Artifact Registry repository, run the following command:\n```\ngcloud artifacts docker images delete \\\u00a0 \u00a0 us-central1-docker.pkg.dev/PROJECT_ID/hello-repo/helloworld-gke\n```\n **Note:** For more information, refer to the documentation on [Managing images](/artifact-registry/docs/docker/manage-images#deleting_images) .\n## What's nextFor more information on Kubernetes, see the following:- Learn more about [creating clusters](/kubernetes-engine/docs/how-to/creating-a-container-cluster) .\n- Learn more about [Kubernetes](http://kubernetes.io/) .\n- Read the [kubectl reference documentation](https://kubernetes.io/docs/reference/kubectl/) .\nFor more information on deploying to GKE, see the following:- Learn how to [package, host, and deploy a simple web server application](/kubernetes-engine/docs/tutorials/hello-app) .\n- [Create a multi-tier web application with Redis and PHP](/kubernetes-engine/docs/tutorials/guestbook) .\n- [Deploy WordPress on GKE with Persistent Disks and Cloud SQL](/kubernetes-engine/docs/tutorials/persistent-disk) .\n- [Setting up Cloud Run onGKE](/run/docs/gke/setup) .\nFor more information on creating, developing, and running applications on GKE directly from your IDE with Cloud Code, see the following:- [Cloud Code for VS Code](/code/docs/vscode/k8s-overview) \n- [Cloud Code for IntelliJ](/code/docs/intellij/k8s-overview)", "guide": "Google Kubernetes Engine (GKE)"}