{"title": "Google Kubernetes Engine (GKE) - Container-native load balancing", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/container-native-load-balancing", "abstract": "# Google Kubernetes Engine (GKE) - Container-native load balancing\nThis page explains what container-native load balancing is in Google Kubernetes Engine (GKE). enables [several kinds of load balancers](/load-balancing/docs/negs/zonal-neg-concepts) to target Pods directly and to evenly distribute traffic to Pods.\n", "content": "## Container-native load balancing architecture\nContainer-native load balancing uses [GCE_VM_IP_PORT network endpoint groups (NEGs)](/load-balancing/docs/negs/zonal-neg-concepts#gce-vm-ip-port) . The endpoints of the NEG are Pod IP addresses.\nContainer-native load balancing is always used for internal GKE Ingress and is optional for external Ingress. The Ingress controller creates the load balancer, including the virtual IP address, forwarding rules, health checks, and firewall rules.\nTo learn how to use container-native load balancing with Ingress, see [Container-native load balancing through Ingress](/kubernetes-engine/docs/how-to/container-native-load-balancing) .\nFor more flexibility, you can also [create standalone NEGs](/kubernetes-engine/docs/how-to/standalone-neg) . In this case, you are responsible for creating and managing all aspects of the load balancer.\n## Benefits of container-native load balancing\nContainer-native load balancing offers the following benefits:\n## Pod readiness\nFor relevant Pods, the corresponding Ingress controller manages a [readiness gate](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-readiness-gate) of type `cloud.google.com/load-balancer-neg-ready` . The Ingress controller polls the load balancer's [health check status](/load-balancing/docs/health-check-concepts) , which includes the health of all endpoints in the NEG. When the load balancer's health check status indicates that the endpoint corresponding to a particular Pod is healthy, the Ingress controller sets the Pod's readiness gate value to `True` . The kubelet running on each Node then computes the Pod's effective readiness, considering both the value of this readiness gate and, if defined, the Pod's [readiness probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#define-readiness-probes) .\nPod readiness gates are automatically enabled when using container-native load balancing through Ingress.\nReadiness gates control the rate of a rolling update. When you initiate a rolling update, as GKE creates new Pods, an endpoint for each new Pod is added to a NEG. When the endpoint is healthy from the perspective of the load balancer, the Ingress controller sets the readiness gate to `True` . A newly created Pod must at least pass its readiness gate GKE removes an old Pod. This ensures that the corresponding endpoint for the Pod has already passed the load balancer's health check and that the backend capacity is maintained.\nIf a Pod's readiness gate never indicates that the Pod is ready, due to a bad container image or a misconfigured load balancer health check, the load balancer won't direct traffic to the new Pod. If such a failure occurs while rolling out an updated Deployment, the rollout stalls after attempting to create one new Pod because that Pod's readiness gate is never True. See the [troubleshooting section](/kubernetes-engine/docs/how-to/container-native-load-balancing#stalled_rollout) for information on how to detect and fix this situation.\nWithout container-native load balancing and readiness gates, GKE can't detect if a load balancer's endpoints are healthy before marking Pods as ready. In previous Kubernetes versions, you control the rate that Pods are removed and replaced by specifying a delay period ( `minReadySeconds` in the Deployment specification).\nGKE sets the value of `cloud.google.com/load-balancer-neg-ready` for a Pod to `True` if any of the following conditions are met:\n- None of the Pod's IP addresses are endpoints in a [GCE_VM_IP_PORT NEG](/load-balancing/docs/negs) managed by the GKE control plane.\n- One or more of the Pod's IP addresses are endpoints in a`GCE_VM_IP_PORT`NEG managed by the GKE control plane. The NEG is attached to a [backend service](/load-balancing/docs/backend-service) . The backend service has a successful load balancer health check.\n- One or more of the Pod's IP addresses are endpoints in a`GCE_VM_IP_PORT`NEG managed by the GKE control plane. The NEG is attached to a backend service. The load balancer health check for the backend service [times out](/load-balancing/docs/health-check-concepts#method) .\n- One or more of the Pod's IP addresses are endpoints in one or more`GCE_VM_IP_PORT`NEGs. None of the NEGs are attached to a backend service. No load balancer health check data is available.## Session affinity\nContainer-native load balancing supports Pod-based [session affinity](/load-balancing/docs/backend-service#session_affinity) .\n## Requirements for using container-native load balancing\nContainer-native load balancers through Ingress on GKE have the following requirements:\n- The cluster must be VPC-native.\n- The cluster must have the`HttpLoadBalancing`add-on enabled. GKE clusters have the`HttpLoadBalancing`add-on enabled by default; you must not disable it.## Limitations for container-native load balancers\nContainer-native load balancers through Ingress on GKE have the following limitations:\n- Don't support external passthrough Network Load Balancers.\n- You must not manually change or update the configuration of the Application Load Balancer that GKE creates. Any changes that you make are overwritten by GKE.## Pricing for container-native load balancers\nYou are charged for the Application Load Balancer provisioned by the Ingress that you create in this guide. For load balancer pricing information, refer to [Load balancing and forwarding rules](/vpc/network-pricing#lb) on the VPC pricing page.\n## What's next\n- Learn more about [NEGs](/load-balancing/docs/negs) .\n- Learn more about [VPC-native clusters](/kubernetes-engine/docs/how-to/alias-ips) .\n- Learn more about [external Application Load Balancers](/load-balancing/docs) .\n- Watch a [KubeCon talk about Pod readiness gates](https://www.youtube.com/watch?v=Vw9GmSeomFg) .", "guide": "Google Kubernetes Engine (GKE)"}