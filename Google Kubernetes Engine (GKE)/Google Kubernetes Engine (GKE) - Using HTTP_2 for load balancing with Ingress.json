{"title": "Google Kubernetes Engine (GKE) - Using HTTP/2 for load balancing with Ingress", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-http2", "abstract": "# Google Kubernetes Engine (GKE) - Using HTTP/2 for load balancing with Ingress\nThis page shows how to use Kubernetes [Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/) and [Service](https://kubernetes.io/docs/concepts/services-networking/service/) objects to configure an external Application Load Balancer to use [HTTP/2](https://http2.github.io/) for communication with backend services.\n", "content": "## Overview\nAn Application Load Balancer acts as a proxy between your clients and your application. Clients can use HTTP/1.1 or HTTP/2 to communicate with the load balancer proxy. However, the connection from the load balancer proxy to your application uses HTTP/1.1 by default. If your application, running in a Google Kubernetes Engine (GKE) Pod, is capable of receiving HTTP/2 requests, you configure the external load balancer to use HTTP/2 when it forwards requests to your application.\nIn this exercise, you create a Deployment, a Service, and an Ingress. You put a `cloud.google.com/app-protocols` annotation in your Service manifest to specify that the load balancer should use HTTP/2 to communicate with your application. Then you call your service and verify that your application received an HTTP/2 request.\n## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.\n- Read about the Kubernetes [Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/) and [Service](https://kubernetes.io/docs/concepts/services-networking/service/) resources.\n- Read about the [HTTP/2 limitations for an external Application Load Balancer](/load-balancing/docs/https#HTTP2-limitations) .## Create the Deployment\n- Copy the following manifest to a file named `my-deployment.yaml` :```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: echoheadersspec:\u00a0 replicas: 2\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: echoheaders\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: echoheaders\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: echoheaders\u00a0 \u00a0 \u00a0 \u00a0 image: registry.k8s.io/echoserver:1.10\u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 - containerPort: 8443\n```This manifest describes a Deployment with two replicas of the `echoheaders` web application.\n- Apply the manifest to your cluster:```\nkubectl apply -f my-deployment.yaml\n```\n**Note:** To ensure the load balancer can make a correct HTTP2 request to your backend, your backend must be configured with SSL. For more information on what types of certificates are accepted, see [Encryption from the load balancer to the backends](/load-balancing/docs/ssl-certificates#backend-encryption) .\n## Create the Service\n- Copy the following manifest to a file named `my-service.yaml` :```\napiVersion: v1kind: Servicemetadata:\u00a0 annotations:\u00a0 \u00a0 cloud.google.com/app-protocols: '{\"my-port\":\"HTTP2\"}'\u00a0 name: echoheaders\u00a0 labels:\u00a0 \u00a0 app: echoheadersspec:\u00a0 type: NodePort\u00a0 ports:\u00a0 - port: 443\u00a0 \u00a0 targetPort: 8443\u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 name: my-port\u00a0 selector:\u00a0 \u00a0 app: echoheaders\n```This manifest describes a Service with the following properties:- `type: NodePort`: Specifies that this is a Service of type [NodePort](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) .\n- `app: echoheaders`: Specifies that any Pod that has this label is a member of the Service.\n- `cloud.google.com/app-protocols`: Specifies that`my-port`should use the HTTP/2 protocol.\n- `port: 443`,`protocol: TCP`, and`targetPort: 8433`: Specify that traffic directed to the Service on TCP port 443 should be routed to TCP port 8422 on one of the member Pods.\n- Apply the manifest to your cluster:```\nkubectl apply -f my-service.yaml\n```\n- View the Service:```\nkubectl get service echoheaders --output yaml\n```The output is similar to the following:```\napiVersion: v1\nkind: Service\nmetadata:\n annotations:\n cloud.google.com/app-protocols: '{\"my-port\":\"HTTP2\"}'\n ...\n labels:\n app: echoheaders\n name: echoheaders\n ...\nspec:\n clusterIP: 10.39.251.148\n ...\n ports:\n - name: my-port\n nodePort: 30647\n port: 443\n protocol: TCP\n targetPort: 8443\n selector:\n app: echoheaders\n ...\n type: NodePort\n...\n```## Create the Ingress\n- Copy the following manifest to a file named `my-ingress.yaml` :```\napiVersion: networking.k8s.io/v1kind: Ingressmetadata:\u00a0 name: echomapspec:\u00a0 defaultBackend:\u00a0 \u00a0 service:\u00a0 \u00a0 \u00a0 name: echoheaders\u00a0 \u00a0 \u00a0 port:\u00a0 \u00a0 \u00a0 \u00a0 number: 443\n```This manifest describes an Ingress that specifies that incoming requests are sent to a Pod that is a member of the `echoheaders` Service. Requests are routed to the Pod on the `targetPort` that is specified in the `echoheaders` Service manifest. In this exercise, the Pod `targetPort` is `8443` .\n- Apply the manifest to your cluster:```\nkubectl apply -f my-ingress.yaml\n```This command can take several minutes to complete while the Kubernetes Ingress controller configures the Application Load Balancer.\n- View the Ingress:```\nkubectl get ingress echomap --output yaml\n```The output is similar to the following:```\nkind: Ingress\nmetadata:\n ...\n name: echomap\n ...\nspec:\n backend:\n serviceName: echoheaders\n servicePort: 443\nstatus:\n loadBalancer:\n ingress:\n - ip: 203.0.113.2\n```In this output, the IP address of the Ingress is `203.0.113.2` .## Test the load balancer\n- List your backend services:```\ngcloud compute backend-services list\n```\n- Describe your backend service:```\ngcloud beta compute backend-services describe BACKEND_SERVICE_NAME --global\n```Replace `` with the name of your backend service.The output specifies the `protocol` is `HTTP2` :```\nbackends:\n...\ndescription: '{...,\"kubernetes.io/service-port\":\"443\",\"x-features\":[\"HTTP2\"]}'\n...\nkind: compute#backendService\nloadBalancingScheme: EXTERNAL\nprotocol: HTTP2\n...\n```\n- Go to the **Load balancing** page in the Google Cloud console. [Go to Load balancing](https://console.cloud.google.com/networking/loadbalancing/loadBalancers/list) \n- Under **Name** , locate your load balancer.\n- Click the name of your load balancer to view your backend service.\n- Verify that the **Endpoint protocol** for your backend service is **HTTP/2** .## Call your Service\nWait a few minutes for GKE to configure the load balancer and backend service, then enter the external IP address of your load balancer in your browser's address bar.\nThe output is similar to the following:\n```\nHostname: echoheaders-7886d5bc68-xnrwj\n...\nRequest Information:\n ...\n method=GET\n real path=/\n query=\n request_version=2\n request_scheme=https\n ...\nRequest Headers:\n ...\n x-forwarded-for=[YOUR_IP_ADDRESS], 203.0.113.2\n x-forwarded-proto=http\n...\n```\nThis output information about the request from the load balancer to the Pod:\n- `request_version=2`: Indicates that the request between the load balancer and the Pod used HTTP/2.\n- `x-forwarded-proto=http`: Indicates that the request between the browser and the load balancer used HTTP 1.1, not HTTP/2.## What's next\n- Set up an [external Application Load Balancer with Ingress](/kubernetes-engine/docs/tutorials/http-balancer) .\n- Configure a [static IP address and domain name](/kubernetes-engine/docs/tutorials/configuring-domain-name-static-ip) for your application using Ingress.\n- Configure [SSL certificates](/kubernetes-engine/docs/how-to/ingress-multi-ssl) for your Ingress load balancer.", "guide": "Google Kubernetes Engine (GKE)"}