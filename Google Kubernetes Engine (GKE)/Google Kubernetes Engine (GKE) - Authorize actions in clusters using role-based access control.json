{"title": "Google Kubernetes Engine (GKE) - Authorize actions in clusters using role-based access control", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/role-based-access-control", "abstract": "# Google Kubernetes Engine (GKE) - Authorize actions in clusters using role-based access control\nThis page shows you how to authorize actions on resources in your Google Kubernetes Engine (GKE) clusters using the built-in role-based access control (RBAC) mechanism in Kubernetes.\n[RBAC](https://kubernetes.io/docs/reference/access-authn-authz/rbac/) is a core security feature in Kubernetes that lets you create fine-grained permissions to manage what actions users and workloads can perform on resources in your clusters. As a platform administrator, you create RBAC and bind those roles to , which are authenticated users such as service accounts or Groups. Kubernetes RBAC is enabled by default.\n", "content": "## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.\n- Read [Best practices for GKE RBAC](/kubernetes-engine/docs/best-practices/rbac) for guidelines to improve the design of your RBAC policies.## Interaction with Identity and Access Management\nYou can use both [Identity and Access Management (IAM)](/kubernetes-engine/docs/how-to/iam)  Kubernetes RBAC to control access to your GKE cluster:\n- IAM is not specific to Kubernetes; it provides identity management for multiple Google Cloud products, and operates primarily at the level of the Google Cloud project.\n- Kubernetes RBAC is a core component of Kubernetes and lets you create and grant roles (sets of permissions) for any object or type of object the cluster.\n- To authorize an action, GKE checks for an RBAC policy first. If there isn't an RBAC policy, GKE checks for IAM permissions.\nIn GKE, IAM and Kubernetes RBAC are integrated to authorize users to perform actions if they have sufficient permissions according to tool. This is an important part of bootstrapping a GKE cluster, since by default Google Cloud users do not have any Kubernetes RBAC RoleBindings.\nTo authorize users using Google Cloud accounts, the client must be correctly configured to authenticate using those accounts first. For example, if you are using `kubectl` , you must [configure the kubectl command to authenticate to Google Cloud](/kubernetes-engine/docs/how-to/cluster-access-for-kubectl) before running any commands that require authorization.\n**Note:** Many failures that appear to be due to authorization are actually caused because the cluster is unable to the client. For example, there are special requirements for authenticating from Compute Engine instances, which are described in [Cluster access for kubectl](/kubernetes-engine/docs/how-to/cluster-access-for-kubectl#authentication) .\nIn almost all cases, Kubernetes RBAC can be used instead of IAM. GKE users require at minimum, the `container.clusters.get` IAM permission in the project that contains the cluster. This permission is included in the `container.clusterViewer` role, and in other more highly privileged roles. The `container.clusters.get` permission is required for users to to the clusters in the project, but does not them to perform any actions inside those clusters. Authorization may then be provided by either IAM or Kubernetes RBAC.\n## Define and assign permissions\nYou can define RBAC rules in `ClusterRole` and `Role` objects, and then assign those rules with `ClusterRoleBinding` and `RoleBinding` objects as follows:\n- **ClusterRole** : a cluster-level grouping of resources and allowed operations that you can assign to a user or a group using a`RoleBinding`or a`ClusterRoleBinding`.\n- **Role** : a namespaced grouping of resources and allowed operations that you can assign to a user or a group of users using a`RoleBinding`.\n- **ClusterRoleBinding** : assign a`ClusterRole`to a user or a group for all namespaces in the cluster.\n- **RoleBinding** : assign a`Role`or a`ClusterRole`to a user or a group within a specific namespace.\nWhen you use a `RoleBinding` to assign a `ClusterRole` to a user or group, those users and groups can only access resources in the namespace you specify in the `RoleBinding` . If you want the users or groups to access resource across all namespaces, use a `ClusterRoleBinding` instead.\n**Note:** RBAC roles are . There are no `deny` rules. When structuring your RBAC roles, think of each role as access to resources.\n### Define permissions using Roles or ClusterRoles\nYou define permissions within a Role or ClusterRole object. A Role defines access to resources within a single Namespace, while a ClusterRole defines access to resources in the entire cluster.\nRoles and ClusterRoles have the same syntax. Each has a `rules` section, where you define the resources the rule applies to and allowed operations for the Role. For example, the following Role grants read access ( `get` , `watch` , and `list` ) to all pods in the `accounting` Namespace:\n```\napiVersion: rbac.authorization.k8s.io/v1kind: Rolemetadata:\u00a0 namespace: accounting\u00a0 name: pod-readerrules:- apiGroups: [\"\"] # \"\" indicates the core API group\u00a0 resources: [\"pods\"]\u00a0 verbs: [\"get\", \"watch\", \"list\"]\n```\nRefer to the [Role](https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/role-v1/) and [ClusterRole](https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/cluster-role-v1/) API documentation for a full list of allowed fields.\n**Note:** You cannot create a Role that defines permissions unless you already have the permissions defined in the Role. If you have been granted the [cluster-admin IAM role](/iam/docs/understanding-roles#kubernetes-engine-roles) , this is sufficient.\nBecause permissions granted by a ClusterRole apply across the entire cluster, you can use ClusterRoles to control access to different kinds of resources than you can with Roles. These include:\n- Cluster-scoped resources such as nodes\n- Non-resource REST Endpoints such as`/healthz`\n- Namespaced resources(for example, all Pods across the entire cluster, regardless of Namespace)\n### Assign Roles using RoleBindings or ClusterRoleBindings\nAfter creating a Role or ClusterRole, you assign it to a user or group of users by creating a RoleBinding or ClusterRoleBinding. Users and groups are called `subjects` , and can be any of the following:\n| Subject type        | Value for kind | Value for name                                            |\n|:------------------------------------------|:-----------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Google Cloud user account     | User    | Google Cloud registered email address                                      |\n| Kubernetes service account    | ServiceAccount | The name of a Kubernetes ServiceAccount object in the cluster                                |\n| IAM service account      | User    | Automatically generated IAM service account email address                                 |\n| Google Group address on a verified domain | Group   | Email address of a Google Workspace Group that is a member of the gke-security-groups group. For instructions to set up Google Groups for RBAC, refer to Configure Google Groups for RBAC. |\nThe following RoleBinding grants the [pod-reader Role](#role) to a user, a Kubernetes service account, an IAM service account, and a Google Group:\n```\nkind: RoleBindingapiVersion: rbac.authorization.k8s.io/v1metadata:\u00a0 name: pod-reader-binding\u00a0 namespace: accountingsubjects:# Google Cloud user account- kind: User\u00a0 name: janedoe@example.com# Kubernetes service account- kind: ServiceAccount\u00a0 name: johndoe# IAM service account- kind: User\u00a0 name: test-account@test-project.iam.gserviceaccount.com# Google Group- kind: Group\u00a0 name: accounting-group@example.comroleRef:\u00a0 kind: Role\u00a0 name: pod-reader\u00a0 apiGroup: rbac.authorization.k8s.io\n```\n### Verify API access using kubectl\n`kubectl` provides the `auth can-i` subcommand for quickly querying the API authorization layer. As a platform administrator, you might need to impersonate users to determine what actions they can perform. You can use the `auth can-i` and pass an additional `--as` flag.\nWhen you run the command `kubectl auth can-i` without the `--as` flag, [Identity and Access Management (IAM)](/kubernetes-engine/docs/how-to/iam) performs the authorization. Whereas, when you append the `--as` flag, Kubernetes RBAC performs the authorization. Therefore, you will need to create the necessary `Role` and `RoleBinding` objects for RBAC.\nFor more information, see [Verifying API Access](https://kubernetes.io/docs/reference/access-authn-authz/authorization/#checking-api-access) .\n### API Usage and Examples\nFor complete information on using the Kubernetes API to create the necessary `Role` , `ClusterRole` , `RoleBinding` , and `ClusterRoleBinding` objects for RBAC, see [Using Role-Based Access Control Authorization](https://kubernetes.io/docs/reference/access-authn-authz/rbac/) in the Kubernetes documentation.\n## Troubleshooting and debugging\nTo debug issues with RBAC, use the [Admin activity audit log](/kubernetes-engine/docs/how-to/audit-logging) , which is enabled on all clusters by default. If access to a resource or operation is denied due to lack of sufficient permissions, the API server logs an `RBAC DENY` error, along with additional information such as the user's implicit and explicit group membership. If you are using Google Groups for RBAC, `google groups` appears in the log message.\n## Limitations\nThe following sections describe interactions that might not seem obvious when working with Kubernetes RBAC and IAM.\n### Default discovery roles\nClusters are created with a set of [default ClusterRoles and ClusterRoleBindings](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#discovery-roles) . Requests made with valid credentials are placed in the `system:authenticated` group, whereas all other requests fall into `system:unauthenticated` .\nThe `system:basic-user` ClusterRole lets users make `SelfSubjectAccessReviews` to test their permissions in the cluster. The `system:discovery` role lets users read discovery APIs, which can reveal information about [CustomResourceDefinitions](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#customresourcedefinitions) added to the cluster.\nAnonymous users ( `system:unauthenticated` ) receive the `system:public-info-viewer` ClusterRole instead, which grants read-only access to `/healthz` and `/version` APIs.\nTo see the API endpoints allowed by the `system:discovery` ClusterRole, run the following command:\n```\nkubectl get clusterroles system:discovery -o yaml\n```\n### Forbidden error for service accounts on Google Cloud VM instances\nThe following error can occur when the VM instance does not have the `userinfo-email` scope:\n```\nError from server (Forbidden): error when creating ... \"role-name\" is forbidden: attempt to grant extra privileges:...\n```\nFor example, suppose the VM has `cloud-platform` scope but does not have `userinfo-email` scope. When the VM gets an access token, Google Cloud associates that token with the `cloud-platform` scope. When the Kubernetes API server asks Google Cloud for the identity associated with the access token, it receives the service account's unique ID, not the service account's email.\nTo authenticate successfully, either create a new VM with the `userinfo-email` scope or create a new role binding that uses the unique ID.\nTo create a new VM instance with the `userinfo-email` scope, run the following command:\n```\ngcloud compute instances create INSTANCE_NAME \\\u00a0 \u00a0 --service-account SERVICE_ACCOUNT_EMAIL \\\u00a0 \u00a0 --scopes userinfo-email\n```\nTo create a new role binding that uses the service account's unique ID for an existing VM, perform the following steps:\n- Identify the service account's unique ID:```\ngcloud iam service-accounts describe SERVICE_ACCOUNT_EMAIL\n```For example, the following output displays the `uniqueId` for the `my-iam-account@somedomain.com` service account:```\ndisplayName: Some Domain IAM service account\nemail: my-iam-account@somedomain.com\netag: BwWWja0YfJA\nname: projects/project-name/serviceAccounts/my-iam-account@somedomain.com\noauth2ClientId: '123456789012345678901'\nprojectId: project-name\nuniqueId: '123456789012345678901'\n```\n- Create a role binding using the `uniqueId` of the service account:```\nkubectl create clusterrolebinding CLUSTERROLEBINDING_NAME \\\u00a0 \u00a0 --clusterrole cluster-admin \\\u00a0 \u00a0 --user UNIQUE_ID\n```\n### Permission to create or update roles and role bindings\nIn Kubernetes, you can only create or update a role or a role binding with specific permissions if you meet the following conditions:\n- Create or update a role: You must already have the same permissions that you want to grant to the role. Alternatively, you must have authorization to perform the`escalate`verb on the role.\n- Create or update a role binding: You must already have the same permissions that are granted in the role being bound, with the same scope as the role binding. Alternatively, you must have authorization to perform the`bind`verb on the referenced role.\nIf the permissions that you're granting in the role were originally granted to you using an IAM policy instead of RBAC, your role or role binding request might fail. For example, consider the following role creation request, from a user who has been granted the IAM permissions `container.pods.*` and `container.roles.create` :\n```\nkubectl create role allowed-to-view-pods --resource pods --verb list,get\n```\nIf the user was only given the permissions using IAM, the following error could occur:\n```\nError from server (Forbidden): clusterroles.rbac.authorization.k8s.io \"allowed-to-view-pods\" is forbidden:\nuser \"caller@example.com\" (groups=[\"system:authenticated\"]) is attempting to grant RBAC permissions not currently held:\n{APIGroups:[\"\"], Resources:[\"pods\"], Verbs:[\"list\" \"get\"]}\n```\nTo mitigate this limitation, grant the caller the permissions in the role using RBAC instead of IAM.\nYou can alternatively use either RBAC or IAM to grant the caller the `escalate` verb, the `bind` verb, or both. However, GKE does not recommend this approach, because the caller can then grant permission to any role.\n## What's next\n- Learn how to [create IAM policies](/kubernetes-engine/docs/how-to/iam) .\n- Learn how to [configure Google Groups for RBAC](/kubernetes-engine/docs/how-to/google-groups-rbac) .", "guide": "Google Kubernetes Engine (GKE)"}