{"title": "Google Kubernetes Engine (GKE) - Choose a minimum CPU platform", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/min-cpu-platform", "abstract": "# Google Kubernetes Engine (GKE) - Choose a minimum CPU platform\nThis page shows you how to specify a minimum CPU platform for nodes in Google Kubernetes Engine (GKE) clusters.\n", "content": "## Why choose a minimum CPU platform?\nSpecifying a minimum CPU platform is useful if you require specific CPU capabilities and specifications, such as a high base frequency or optimized power management functionality.\nSome advanced compute-intensive workloads in graphics, gaming, and analytics industries can make use of the specific features available through different CPU platform feature sets, such as AVX-2 and AVX-512. Choosing a specific CPU platform can yield substantial boosts in execution time and performance. By specifying a minimum CPU platform, your workloads can realize these gains in a more predictable manner, and you can ensure that your nodes never use a CPU platform inappropriate for their workloads.\n## How to choose a platform\nThe following table shows you how to choose a minimum CPU platform based on how you use GKE:\n| Scope      | Description                                                                                                                | Supported cluster configuration                       |\n|:-----------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------|\n| Workload-level (recommended) | Choose a minimum platform in your Pod specification. GKE schedules those Pods as follows: Autopilot: GKE schedules Pods on nodes with the specified platform or later. Standard: GKE only schedules Pods on nodes with the specified platform. For example, if an Intel Ice Lake node pool exists and new Pods request a minimum of Intel Cascade Lake, GKE creates a new node pool with Intel Cascade Lake, even though Intel Ice Lake is a more advanced platform. | Autopilot running GKE version 1.25 and later. Standard with node auto-provisioning running GKE version 1.23 and later. |\n| Node and cluster level  | Choose a minimum CPU platform when you create a new Standard mode cluster or node pool. This setting doesn't support node auto-provisioning. For instructions, skip to Choose a minimum CPU platform at the node pool level.                                                            | New Standard cluster or node pool                       |\n## Pricing\nYou can choose a minimum CPU platform at no additional cost.\n## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.## Check CPU platform availability\nThe available CPU platforms varies based on the [compute zone](/compute/regions-zones#available) in which your nodes run. You should check which CPU platforms are available in a zone even if you use Autopilot clusters or regional Standard clusters.\nTo check the available platforms in a specific zone, run the following command:\n```\ngcloud compute zones describe COMPUTE_ZONE\n```\nReplace `` with the name of a zone, such as `us-central1-a` . If you use a regional cluster type, specify the name of a zone in that region.\nThe output is similar to the following:\n```\navailableCpuPlatforms:\n- Intel Ice Lake\n- Intel Cascade Lake\n- Intel Skylake\n- Intel Broadwell\n- Intel Haswell\n- Intel Ivy Bridge\n- Intel Sandy Bridge\n- AMD Milan\n- AMD Rome\n- Ampere Altra\n- Intel Sapphire Rapids\n```\nWhen you use these values to request a minimum CPU platform, replace spaces with underscores in the platform name. For example, `AMD_Milan` .\n## Choose a minimum CPU platform at the workload level\nIf you use GKE Autopilot clusters or GKE Standard clusters with node auto-provisioning, you can choose a minimum CPU platform in your Pod specification. When you deploy the workload, GKE schedules those Pods only on nodes that have the specified platform or newer. We recommend this method.\nIn Autopilot, request a minimum CPU platform and a compute class. **The compute class must support the CPU platform.** Autopilot supports selecting a minimum CPU platform for the `Balanced` compute class. For a list of available CPU platforms in each compute class, see [When to use specific compute classes](/kubernetes-engine/docs/concepts/autopilot-compute-classes#when-to-use) .\nSave the following manifest as `min-cpu.yaml` :\n```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: min-cpu-platform\u00a0 labels:\u00a0 \u00a0 app: min-cpuspec:\u00a0 replicas: 3\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: min-cpu\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: min-cpu\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 cloud.google.com/compute-class: \"COMPUTE_CLASS\"\u00a0 \u00a0 \u00a0 \u00a0 supported-cpu-platform.cloud.google.com/PLATFORM: \"true\"\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: hello-app\u00a0 \u00a0 \u00a0 \u00a0 image: us-docker.pkg.dev/google-samples/containers/gke/hello-app:1.0\u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 - containerPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 250m\n```\nReplace the following:- ``: the name of the CPU platform, such as`AMD_Milan`. The platform name is case-sensitive and must be **underscore-delimited** .\n- ``: the name of the compute class, which must be`Balanced`.\nIn Standard clusters with node auto-provisioning enabled, request a CPU platform alongside a Compute Engine machine family. The machine family must support the CPU platform. For a list of supported platforms for each machine family, refer to [Compute Engine CPU platforms](/compute/docs/cpu-platforms) .\nSave the following manifest as `min-cpu.yaml` :\n```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: min-cpu-platform\u00a0 labels:\u00a0 \u00a0 app: min-cpuspec:\u00a0 replicas: 3\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: min-cpu\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: min-cpu\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 cloud.google.com/machine-family: MACHINE_FAMILY\u00a0 \u00a0 \u00a0 \u00a0 cloud.google.com/requested-min-cpu-platform: PLATFORM\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: hello-app\u00a0 \u00a0 \u00a0 \u00a0 image: us-docker.pkg.dev/google-samples/containers/gke/hello-app:1.0\u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 - containerPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 250m\n```\nReplace the following:- ``: the name of the CPU platform, such as`AMD_Milan`. The platform name is case-sensitive and must be **underscore-delimited** .\n- ``: the name of the machine family, such as`n2d`.\n **Note:** GKE Standard can only schedule Pods on nodes with the specific CPU platform in the `` field. For example, if there's an existing node pool with Intel Ice Lake processors and the Pod requests Intel Cascade Lake, GKE creates a new node pool with Intel Cascade Lake to place the Pods.\nDeploy the workload:\n```\nkubectl apply -f min-cpu.yaml\n```\nNodes retain the same platform through their lifecycle, unless the specified CPU platform is retired, in which case your nodes runs on a newer platform.\n**Note:** Pods that use the nodeSelector can only schedule on node pools that are created by node auto-provisioning. If you have a manually-created node pool with a CPU platform set, Pods with the workload-level setting won't schedule on those nodes.\n## Choose a minimum CPU platform at the node pool level\nFor GKE Standard clusters without node auto-provisioning, you can specify a minimum CPU platform when you create a new cluster or a node pool. You should only use this approach if you can't use the [workload-level setting](#workload-level-min-cpu) . This setting doesn't affect node auto-provisioning.\nTo create a new node pool with a minimum CPU platform using the gcloud CLI, set the `--min-cpu-platform` flag and specify the name of the CPU platform:\n```\ngcloud container node-pools create POOL_NAME \\\u00a0 \u00a0 --cluster CLUSTER_NAME \\\u00a0 \u00a0 --region COMPUTE_REGION \\\u00a0 \u00a0 --min-cpu-platform PLATFORM\n```\nReplace the following:- ``: the name of your new node pool.\n- ``: the name of your cluster.\n- ``: the [region](/compute/docs/regions-zones#available) for the cluster.\n- ``: the CPU platform that you want to run in the node pool, such as`\"Intel Broadwell\"`.\n- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- In the cluster list, click the name of the cluster you want to modify.\n- Click **Add Node Pool** .\n- Configure the node pool as desired.\n- From the navigation pane, click **Nodes** .\n- Under **Machine Configuration** ,\n- In the **Series** drop-down list, select a [machine type](/compute/docs/machine-types#machine_types) .\n- In the **Machine type** drop-down list, select **Custom** .\n- Select **Cores** and **Memory** as desired.\n- Click **CPU Platform and GPU** .\n- In the **CPU Platform** drop-down list, select the desired platform.\n- Click **Create** .\nInclude the `minCpuPlatform` property as part of the `nodeConfig` field in the request body. The value for `minCpuPlatform` must be the name of the platform, such as `Intel Haswell` , `Intel Broadwell` , and `Intel Sandy Bridge` .\nFor example, the following request creates a new node pool running the Intel Broadwell platform:\n```\nPOST https://container.googleapis.com/v1/projects/PROJECT_ID/regions/COMPUTE_REGION/clusters/CLUSTER_NAME/nodePools{\u00a0 'nodePool': {\u00a0 \u00a0 'name': 'POOL_NAME',\u00a0 \u00a0 'nodeConfig': {\u00a0 \u00a0 \u00a0 'minCpuPlatform': 'Intel Broadwell'\u00a0 \u00a0 \u00a0 ...\u00a0 \u00a0 }\u00a0 \u00a0 ...\u00a0 }}\n```\nReplace the following:- ``: your project ID.\n- ``: the [region](/compute/docs/regions-zones#available) for the cluster.\n- ``: the name of your cluster.\n- ``: the name of your new node pool.\nIf you specify the platform when you [create a cluster](/sdk/gcloud/reference/container/clusters/create#--min-cpu-platform) , the minimum CPU platform setting applies to the default node pool in the new cluster.\n## Alternatives\nGKE also lets you select minimum CPU platforms using the following methods:\n| Alternatives            | Alternatives.1                |\n|:------------------------------------------------------------|:---------------------------------------------------------------------------|\n| Cluster level flag --autoprovisioning-min-cpu-platform flag | This Standard mode cluster-level auto-provisioning setting is deprecated. |\n## Limitations\nThe following limitations apply to all methods of selecting a minimum CPU platform:\n- All the [limitations of Compute Engine minimum CPU platforms](/compute/docs/instances/specify-min-cpu-platform#limitations) apply.\n- Availability of specific CPU platforms varies by zone.\n- The E2 machine type don't support minimum CPU platforms. You must select a different machine type.\n- Autopilot clusters only support platform selection for the`Balanced`compute class, not the default or`Scale-Out`compute classes.\n- If your Autopilot workload requests more than 80 vCPUs, the minimum CPU platform must be Intel Ice Lake or later. If you specify a less advanced platform, your Pod might remain in the`Pending`state indefinitely.\nThe following limitation applies to the [cluster or node pool minimum CPU platform setting](#cluster-level-min-cpu) :\nIf you select a minimum CPU platform that is less advanced than the default CPU platform in the zone, or if the selected platform is no longer available, GKE checks whether there's a newer platform at the same cost. If a newer platform exists at the same cost, GKE creates the nodes using the newer platform. If a newer platform doesn't exist at the same cost, cluster or node pool creation fails.\n## What's next\n- See a list of available [CPU platforms](/compute/docs/cpu-platforms) .\n- Learn more about [Regions and zones](/compute/docs/regions-zones/regions-zones) .\n- Learn more about [nodes](/kubernetes-engine/docs/concepts/cluster-architecture#nodes) .", "guide": "Google Kubernetes Engine (GKE)"}