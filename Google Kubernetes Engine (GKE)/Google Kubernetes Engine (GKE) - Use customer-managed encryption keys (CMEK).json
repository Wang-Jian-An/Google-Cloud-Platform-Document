{"title": "Google Kubernetes Engine (GKE) - Use customer-managed encryption keys (CMEK)", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek-pd", "abstract": "# Google Kubernetes Engine (GKE) - Use customer-managed encryption keys (CMEK)\nThis page describes how to use Customer Managed Encryption Keys (CMEK) on Google Kubernetes Engine (GKE). If you need to control management of your keys, you can use [Cloud Key Management Service](/kms) and CMEK to protect attached Persistent Disks and [custom boot disks](/kubernetes-engine/docs/how-to/custom-boot-disks) in your GKE cluster.\n", "content": "## Overview\nBy default, Google Cloud [encrypts customer content at rest](/security/encryption/default-encryption) , and GKE manages encryption for you without any action on your part.\nIf you want to control and manage encryption key rotation yourself, you can use CMEK. These keys encrypt the data encryption keys that encrypt your data. For more information, see [Key management](/security/encryption/default-encryption#key_management) .\nYou can also encrypt secrets in your cluster using keys that you manage. For details, see [Application-layer secrets encryption](/kubernetes-engine/docs/how-to/encrypting-secrets) .\nIn GKE, CMEK can protect data of two types of storage disks: node boot disks and attached disks.\nTo learn more about storage disks, see [Storage options](/compute/docs/disks) . Control plane disks, used for GKE control planes, cannot be protected with CMEK.\n## Before you begin\n- To do the exercises in this document, you need two Google Cloud projects:- **Key project:** This is where you create an encryption key.\n- **Cluster project:** This is where you create a cluster that enables CMEK.\n **Note:** You can use the same project for your key project and cluster project. But the recommended practice is to use [separate projects](/kms/docs/separation-of-duties) .\n- In your key project, ensure that you have enabled the Cloud KMS API. [Enable Cloud KMS API](https://console.cloud.google.com/apis/library/cloudkms.googleapis.com) \n- In your **key project** , the user who creates the key ring and key needs the following IAM permissions:- `cloudkms.keyRings.getIamPolicy`\n- `cloudkms.keyRings.setIamPolicy`\nThese permissions are granted to the predefined `roles/cloudkms.admin` [Identity and Access Management role](/iam/docs/understanding-roles#iam-roles) . You can learn more about [granting permissions to manage keys](/kms/docs/iam) in the Cloud KMS documentation.\n- In your **cluster project** , ensure that you have enabled the Cloud KMS API. [Enable Cloud KMS API](https://console.cloud.google.com/apis/library/cloudkms.googleapis.com) \n- Ensure that you have installed the [gcloud CLI](/sdk/downloads) .\n- Update `gcloud` to the latest version:```\ngcloud components update\n```## Create a Cloud KMS key\nBefore you can protect your node boot disk or attached disk with a CMEK, you need a Cloud KMS [key ring and key](/kms/docs/object-hierarchy) .\nYour key ring and key have the following requirements:\n- Your key should use symmetric encryption.\n- You need to [grant the GKE service account permissions](#grant_permission) to use the key.\n- Your key ring must have a location that matches the location of your GKE cluster:- A [zonal cluster](/kubernetes-engine/docs/concepts/types-of-clusters#zonal_clusters) should use a key ring from a superset location. For example, a cluster in the `us-central1-a` zone can only use a key in the `us-central1` region.\n- A [regional cluster](/kubernetes-engine/docs/concepts/regional-clusters) should use a key ring from the same location. For example, a cluster in the `asia-northeast1` region should be protected with a key ring from the `asia-northeast1` region.\n- The Cloud KMS `global` region is not supported for use with GKE.For instructions on how to create a key ring and key, see [Creating symmetric keys](/kms/docs/creating-keys) .\n### Grant permission to use the key\nYou must assign the Compute Engine service account used by nodes in your cluster the [Cloud KMS CryptoKey Encrypter/Decrypter role](/kms/docs/reference/permissions-and-roles#predefined_roles) . This is required for GKE Persistent Disks to access and use your encryption key.\nThe Compute Engine service account's name has the following format:\n```\nservice-PROJECT_NUMBER@compute-system.iam.gserviceaccount.com\n```\nReplace `` with your cluster's [project number](https://console.cloud.google.com/) .\n**Note:** For [CMEK-protected node boot disks](#update_a_cluster_with_cmek-protected_node_boot_disks) and [CMEK-protected attached disks](#create_a_cmek_protected_attached_disk) , this Compute Engine service account is the account which requires permissions to do encryption using your Cloud KMS key. This is true even if you are using a custom service account on your nodes.\nTo grant access to the service account, you can use the `gcloud` command or the Google Cloud console.\nGrant your Compute Engine service account the Cloud KMS [CryptoKey Encrypter/Decrypter role](/kms/docs/reference/permissions-and-roles#predefined_roles) :\n```\ngcloud kms keys add-iam-policy-binding KEY_NAME \\\u00a0 \u00a0 --location LOCATION \\\u00a0 \u00a0 --keyring RING_NAME \\\u00a0 \u00a0 --member serviceAccount:SERVICE_ACCOUNT \\\u00a0 \u00a0 --role roles/cloudkms.cryptoKeyEncrypterDecrypter \\\u00a0 \u00a0 --project KEY_PROJECT_ID\n```\nReplace the following:- ``: the name of your key.\n- ``: the region where you created your key ring.\n- ``: the name of your key ring.\n- ``: the name of your Compute Engine service account.\n- ``: your key project ID.\nGrant your Compute Engine service account the Cloud KMS [CryptoKey Encrypter/Decrypter role](/kms/docs/reference/permissions-and-roles#predefined_roles) :- Open the **Cloud Key Management Service Keys** browser in the Google Cloud console. [Open the Cloud KMS Keys browser](https://console.cloud.google.com/security/kms) \n- Click the name of the key ring that contains the key you want.\n- Select the checkbox for the key.The **Permissions** tab in the right window pane becomes available.\n- In the **Add members** dialog, specify the email address of the Compute Engine service account you are granting access.\n- In the **Select a role** drop down, select **Cloud KMS CryptoKeyEncrypter/Decrypter** .\n- Click **Save** .## Use CMEK-protected node boot disks\nIn this section, you create a new cluster or node pool with a CMEK protected boot disk.\nYou cannot enable customer-managed encryption for node boot disks on an existing cluster, as you cannot change the boot disk type of an existing cluster or node pool. However, you can create a new node pool for your cluster with customer- managed encryption enabled, and delete the previous node pool.\nYou also cannot disable customer-managed encryption for node boot disks on an existing cluster or an existing node pool. However, you can create a new node pool for your cluster with customer-managed encryption disabled, and delete the previous node pool.\n### Create a cluster with a CMEK-protected node boot disk\nYou can create a cluster with a CMEK-protected node boot disk using the gcloud CLI or the Google Cloud console.\nFor Standard clusters, only a standard Persistent Disk ( `pd-standard` ) or an SSD Persistent Disk ( `pd-ssd` ) can be encrypted with a CMEK key.\nTo create a cluster whose boot disk is encrypted with a CMEK key, specify a value for the `--boot-disk-kms-key` parameter in your cluster creation command.\n **Create a Standard cluster** \nTo create a Standard cluster whose boot disk is encrypted with a CMEK key, use the following command:\n```\ngcloud container clusters create CLUSTER_NAME \\\u00a0 \u00a0 --cluster-version=latest \\\u00a0 \u00a0 --region COMPUTE_REGION \\\u00a0 \u00a0 --boot-disk-kms-key projects/KEY_PROJECT_ID/locations/LOCATION/keyRings/RING_NAME/cryptoKeys/KEY_NAME \\\u00a0 \u00a0 --project CLUSTER_PROJECT_ID \\\u00a0 \u00a0 --disk-type DISK_TYPE\n```\n **Create an Autopilot cluster** \nTo create an Autopilot cluster whose boot disk is encrypted with a CMEK key, use the following command:\n```\ngcloud container clusters create-auto CLUSTER_NAME \\\u00a0 \u00a0 --cluster-version=latest \\\u00a0 \u00a0 --region COMPUTE_REGION \\\u00a0 \u00a0 --boot-disk-kms-key projects/KEY_PROJECT_ID/locations/LOCATION/keyRings/RING_NAME/cryptoKeys/KEY_NAME \\\u00a0 \u00a0 --project CLUSTER_PROJECT_ID\n```\nReplace the following:- ``: the name for your new cluster.\n- ``: the [compute region](/compute/docs/regions-zones#available) for the cluster control plane.\n- ``: your key project ID.\n- ``: the location of your key ring.\n- ``: the name of your key ring.\n- ``: the name of your key.\n- ``is your cluster project ID.\n- ``:`pd-standard`(default) or`pd-ssd`.\n **Create a Standard cluster** \nTo create a Standard cluster whose boot disk is encrypted with a CMEK key, perform the following steps:- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click **Create** .\n- In the **Standard** section, click **Configure** .\n- Configure your cluster as needed.\n- From the navigation menu, under **Node Pools** , click **Nodes** .\n- In the **Boot disk type** drop-down list, select **Standard persistentdisk** or **SSD Persistent Disk** .\n- Select the **Enable customer-managed encryption for Boot Disk** checkbox and choose the Cloud KMS encryption key you created earlier.\n- Click **Create** .\n **Create an Autopilot cluster** \nTo create an Autopilot cluster whose boot disk is encrypted with a CMEK key, perform the following steps:- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click **Create** .\n- In the **Autopilot** section, click **Configure** .\n- Configure your cluster as needed.\n- Expand the **Advanced Options** section and locate the **Security** options.\n- Select the **Enable customer-managed encryption for Boot Disk** checkbox and choose the Cloud KMS encryption key you created earlier.\n- Click **Create** .\n### Create a new node pool with CMEK-protected node boot disks\n**Note:** This section applies only to Standard clusters. Nodes and node pools in Autopilot clusters are fully-managed by Google.\nTo create a new node pool with CMEK enabled on an existing standard cluster, you can use the gcloud CLI or the Google Cloud console.\nTo create a node pool with customer-managed encryption for node boot disks, specify a value for the `--boot-disk-kms-key` parameter in your creation command.\n```\ngcloud container node-pools create NODE_POOL_NAME \\\u00a0 \u00a0 --region COMPUTE_REGION \\\u00a0 \u00a0 --disk-type DISK_TYPE \\\u00a0 \u00a0 --boot-disk-kms-key projects/KEY_PROJECT_ID/locations/LOCATION/keyRings/RING_NAME/cryptoKeys/KEY_NAME \\\u00a0 \u00a0 --project CLUSTER_PROJECT_ID \\\u00a0 \u00a0 --cluster CLUSTER_NAME\n```\nReplace the following:- ``: the name you choose for your node pool.\n- ``: the [compute region](/compute/docs/regions-zones#available) for the cluster control plane.\n- ``:`pd-standard`(default) or`pd-ssd`.\n- ``:your key project ID.\n- ``: the location of your key ring.\n- ``: the name of your key ring.\n- ``: the name of your key.\n- ``: your cluster project ID.\n- ``: the name of the Standard cluster you created in the previous step.\n- Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- In the cluster list, click the name of the cluster you want to modify.\n- Click **Add Node Pool** .\n- From the navigation menu, click **Nodes** .\n- In the **Machine Configuration** section, ensure **Boot disk type** is either **Standard persistent disk** or **SSD persistent disk** .\n- Select the **Enable customer-managed encryption for boot disk** checkbox and select the Cloud KMS encryption key you created.\n- Click **Create** .## Use CMEK-protected Filestore instances or Persistent Disks\nThe following information covers how to encrypt newly created Filestore instances or Persistent Disks. You can enable CMEK on a new or existing cluster, using a new or existing Cloud KMS key.\nThese instructions need to be completed once per GKE cluster:\n- Create a GKE cluster, if you don't already have one available.\n- Deploy the [Filestore CSI Driver](/kubernetes-engine/docs/how-to/persistent-volumes/filestore-csi-driver) or [Compute Engine Persistent Disk CSI Driver](/kubernetes-engine/docs/how-to/gce-pd-csi-driver) to your cluster.\n- Create a Cloud KMS [key ring and key version](/kms/docs/object-hierarchy) , if you don't already have one available.\n- [Grant key access permissions to the Filestore service account](/filestore/docs/cmek#grant_key_access_permission_to_the_service_account) .\n- Create a [StorageClass](/kubernetes-engine/docs/concepts/persistent-volumes#storageclasses) that enables disks provisioned by Kubernetes to automatically be encrypted with that Cloud KMS key. For details on how to do this, see the following section.\n**Note:** For CMEK encryption of Filestore instances, your cluster must run GKE 1.21 or higher. CMEK encryption of Filestore instances is only supported for the [Enterprise andHigh Scale SSD (preview) tiers](/filestore/docs/cmek#supported_tiers) .\n**Caution:** CMEK encryption on Filestore instances cannot be removed.\n### Create a StorageClass referencing the Cloud KMS key\n- Copy the content below into a YAML file named `cmek-sc.yaml` . This configuration enables dynamic provisioning of encrypted volumes.\n```\napiVersion: storage.k8s.io/v1kind: StorageClassmetadata:\u00a0 name: csi-filestore-cmekprovisioner: filestore.csi.storage.gke.ioallowVolumeExpansion: trueparameters:\u00a0 tier: enterprise\u00a0 instance-encryption-kms-key: projects/KEY_PROJECT_ID/locations/LOCATION/keyRings/RING_NAME/cryptoKeys/KEY_NAME\n```- The`instance-encryption-kms-key`field must be the [fully qualified resource identifier](/kms/docs/object-hierarchy#key) for the key that will be used to encrypt new Filestore instances.\n- The values in`instance-encryption-kms-key`are case sensitive (for example:`keyRings`and`cryptoKeys`). Provisioning a new volume with incorrect values results in an`invalidResourceUsage`error.\n- You cannot add the`instance-encryption-kms-key`parameter to an existing`StorageClass`object. However, you can delete the`StorageClass`object and recreate it with the same name, but a different set of parameters.\n```\napiVersion: storage.k8s.io/v1kind: StorageClassmetadata:\u00a0 name: csi-gce-pd-cmekprovisioner: pd.csi.storage.gke.iovolumeBindingMode: \"WaitForFirstConsumer\"allowVolumeExpansion: trueparameters:\u00a0 type: pd-standard\u00a0 disk-encryption-kms-key: projects/KEY_PROJECT_ID/locations/LOCATION/keyRings/RING_NAME/cryptoKeys/KEY_NAME\n```- The`disk-encryption-kms-key`field must be the [fully qualified resource identifier](/kms/docs/object-hierarchy#key) for the key that will be used to encrypt new disks.\n- The values in`disk-encryption-kms-key`are case sensitive (for example:`keyRings`and`cryptoKeys`). Provisioning a new volume with incorrect values results in an`invalidResourceUsage`error.\n- You cannot add the`disk-encryption-kms-key`parameter to an existing`StorageClass`object. However, you can delete the`StorageClass`object and recreate it with the same name, but a different set of parameters. Make sure the provisioner of the existing class is`pd.csi.storage.gke.io`.\nYou can set the [StorageClass as the default](https://kubernetes.io/docs/tasks/administer-cluster/change-default-storage-class/) .\n- Deploy the `StorageClass` on your GKE cluster using [kubectl](/kubernetes-engine/docs/deploy-app-cluster#choosing_a_shell) :```\nkubectl apply -f cmek-sc.yaml\n```\n- Verify that your `StorageClass` used the Compute Engine Filestore or Persistent Disk CSI driver and includes the ID of your key:\n```\nkubectl describe storageclass csi-filestore-cmek\n```\nIn the output of the command, verify the following:- The provisioner is set as filestore.csi.storage.gke.io.\n- The ID of your key follows instance-encryption-kms-key.\n```\nName:     csi-filestore-cmek\nIsDefaultClass:  No\nAnnotations:   None\nProvisioner:   filestore.csi.storage.gke.io\nParameters:   instance-encryption-kms-key=projects/KEY_PROJECT_ID/locations/LOCATION/keyRings/RING_NAME/cryptoKeys/KEY_NAME,type=pd-standard\nAllowVolumeExpansion: true\nMountOptions:   none\nReclaimPolicy:   Delete\nVolumeBindingMode:  WaitForFirstConsumer\nEvents:    none\n```\n```\nkubectl describe storageclass csi-gce-pd-cmek\n```\nIn the output of the command, verify the following:- The provisioner is set as`pd.csi.storage.gke.io`.\n- The ID of your key follows`disk-encryption-kms-key`.\n```\nName:     csi-gce-pd-cmek\nIsDefaultClass:  No\nAnnotations:   None\nProvisioner:   pd.csi.storage.gke.io\nParameters:   disk-encryption-kms-key=projects/KEY_PROJECT_ID/locations/LOCATION/keyRings/RING_NAME/cryptoKeys/KEY_NAME,type=pd-standard\nAllowVolumeExpansion: unset\nMountOptions:   none\nReclaimPolicy:   Delete\nVolumeBindingMode:  WaitForFirstConsumer\nEvents:    none\n```\n### Create an encrypted storage volume in GKE\nIn this section, you dynamically provision encrypted Kubernetes storage volumes with your new `StorageClass` and Cloud KMS key.\n- Copy the following contents into a new file named `pvc.yaml` , and make sure the value for `storageClassName` matches the name of your `StorageClass` object:\n```\nkind: PersistentVolumeClaimapiVersion: v1metadata:\u00a0 name: podpvcspec:\u00a0 accessModes:\u00a0 \u00a0 - ReadWriteMany\u00a0 storageClassName: csi-filestore-cmek\u00a0 resources:\u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 storage: 1Ti\n```\n```\nkind: PersistentVolumeClaimapiVersion: v1metadata:\u00a0 name: podpvcspec:\u00a0 accessModes:\u00a0 \u00a0 - ReadWriteOnce\u00a0 storageClassName: csi-gce-pd-cmek\u00a0 resources:\u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 storage: 6Gi\n```\n **Note:** If you marked the new `StorageClass` as default, then you can omit the `storageClassName` field.\n- Apply the `PersistentVolumeClaim` (PVC) on your GKE cluster:```\nkubectl apply -f pvc.yaml\n```\n- If your `StorageClass` has the `volumeBindingMode` field set to `WaitForFirstConsumer` , you must create a Pod to use the PVC before you can verify it. Copy the following contents into a new file named `pod.yaml` , and make sure the value for `claimName` matches the name of your `PersistentVolumeClaim` object:```\napiVersion: v1kind: Podmetadata:\u00a0 name: web-serverspec:\u00a0 containers:\u00a0 \u00a0- name: web-server\u00a0 \u00a0 \u00a0image: nginx\u00a0 \u00a0 \u00a0volumeMounts:\u00a0 \u00a0 \u00a0 \u00a0- mountPath: /var/lib/www/html\u00a0 \u00a0 \u00a0 \u00a0 \u00a0name: mypvc\u00a0 volumes:\u00a0 \u00a0- name: mypvc\u00a0 \u00a0 \u00a0persistentVolumeClaim:\u00a0 \u00a0 \u00a0 \u00a0claimName: podpvc\u00a0 \u00a0 \u00a0 \u00a0readOnly: false\n```\n- Apply the Pod on your GKE cluster:```\nkubectl apply -f pod.yaml\n```\n- Get the status of your cluster's `PersistentVolumeClaim` and verify that the PVC is created and bound to a newly provisioned `PersistentVolume` .\n```\nkubectl get pvc\n```\nThe output is similar to the following:\n```\nNAME  STATUS VOLUME          CAPACITY ACCESS MODES STORAGECLASS  AGE\npodpvc Bound  pvc-e36abf50-84f3-11e8-8538-42010a800002 1Ti  RWO   csi-filestore-cmek 9s\n```\n **Note:** The provisioning of PVCs using [Enterprise tier](/filestore/docs/service-tiers#enterprise_tier) Filestore instances might take 20 to 30 minutes to complete.\n```\nkubectl get pvc\n```\nThe output is similar to the following:\n```\nNAME  STATUS VOLUME          CAPACITY ACCESS MODES STORAGECLASS  AGE\npodpvc Bound  pvc-e36abf50-84f3-11e8-8538-42010a800002 6Gi  RWO   csi-gce-pd-cmek 9s\n```\nYou can now use your CMEK-protected Persistent Disk with your GKE cluster.\n### Remove CMEK protection\nTo remove CMEK protection from a Persistent Disk, follow the instructions in the [Compute Engine documentation](/compute/docs/disks/customer-managed-encryption#remove_encryption) .\nCMEK encryption cannot be removed from Filestore instances.\n## GKE and CMEK organization policies\n**    Preview     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nGKE supports [CMEK organization policies](/kms/docs/cmek-org-policy) (Preview) that can require CMEK protection and can limit which Cloud KMS keys you can use for CMEK protection.\nWhen `container.googleapis.com` is in the `Deny` policy list of services for the `constraints/gcp.restrictNonCmekServices` constraint, GKE refuses to create the following resources if you don't enable CMEK protection:\n- New clusters and node pools\n- New Filestore instances and Persistent Disks\nWhen the `constraints/gcp.restrictNonCmekCryptoKeyProjects` constraint is configured in an organization policy, GKE only creates CMEK-protected resources that use an encryption key from an allowed project, folder, or organization.\n## What's next\n- Read the [Cloud Key Management Service FAQ](/kms/docs/faq) .\n- Learn about [protecting resources with Cloud KMS Keys](/compute/docs/disks/customer-managed-encryption) .", "guide": "Google Kubernetes Engine (GKE)"}