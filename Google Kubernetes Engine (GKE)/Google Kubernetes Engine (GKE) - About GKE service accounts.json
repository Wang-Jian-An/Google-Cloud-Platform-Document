{"title": "Google Kubernetes Engine (GKE) - About GKE service accounts", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/service-accounts", "abstract": "# Google Kubernetes Engine (GKE) - About GKE service accounts\nThis page describes how Identity and Access Management (IAM) service accounts and service agents work with Google Kubernetes Engine (GKE).\nAn [IAM service account](/iam/docs/service-accounts) is a special account that is intended to be used by an application, rather than a person directly.\nA [service agent](/iam/docs/service-agents) is a service account that is managed by Google.\nService accounts and service agents at the Google Cloud project level are managed by [IAM](/iam/docs) .\n", "content": "## IAM service accounts and Kubernetes service accounts\nAn IAM service account is scoped within a project and is managed using IAM. IAM service accounts can be used to make authenticated calls to Google Cloud APIs.\nA Kubernetes service account is scoped within a cluster.\nKubernetes service accounts exist as `ServiceAccount` objects in the Kubernetes API server, and provide an identity for applications and workloads running in Pods. Pods can use Kubernetes service accounts to authenticate to the API server.\nYou can use [workload identity federation for GKE](/kubernetes-engine/docs/concepts/workload-identity) to let Kubernetes service accounts impersonate IAM service accounts. This lets your applications authenticate to Google Cloud APIs without exposing IAM service account keys to your containerized applications.\n## GKE service agents\nGKE uses the Kubernetes Engine Service Agent to manage the lifecycle of cluster resources on your behalf such as nodes, disks, and load balancers. This service agent has the domain `container-engine-robot.iam.gserviceaccount.com` and is granted the [Kubernetes Engine Service Agent](/iam/docs/understanding-roles#container.serviceAgent) role ( `roles/container.serviceAgent` ) on your project when you enable the GKE API.\nThe identifier of this service agent is:\n```\nservice-PROJECT_NUMBER@container-engine-robot.iam.gserviceaccount.com\n```\nWhere `` is your [project number](/resource-manager/docs/creating-managing-projects#identifying_projects) .\nIf you disable the GKE service agent, you can recover it by following the instructions in [Enabling a service account](/iam/docs/service-accounts-disable-enable#enabling) .\nIf you remove the service agent's permissions in your project, you can recover them by following the instructions in [Error 400/403: Missing edit permissions on account](/kubernetes-engine/docs/troubleshooting#gke_service_account_deleted) .\nIf you delete the default GKE service agent, you can undelete it by following the instructions in [Undeleting a service account](/iam/docs/service-accounts-delete-undelete#undeleting) .\n### Default GKE node service account\nBy default, GKE nodes use the [Compute Engine default service account](/compute/docs/access/service-accounts) . By default this service account is granted the Editor role ( `roles/editor` ) and has more permissions than what are required for GKE nodes. Consider using a role that uses the [minimum permissions](#minimum_permissions) required to run nodes in the cluster.\nDo not disable the default Compute Engine service account unless you are migrating to [user-managed service accounts](/iam/docs/service-account-types#user-created) .\nGKE requires a minimum set of IAM permissions to operate your cluster. For instructions to create a minimally-privileged IAM service account, see [Use least privilege Google service accounts](/kubernetes-engine/docs/how-to/hardening-your-cluster#use_least_privilege_sa) .\n## What's next\n- Learn how to [use minimally privileged Google service accounts](/kubernetes-engine/docs/how-to/hardening-your-cluster#use_least_privilege_sa) .\n- Learn how to [grant a role to a principal](/iam/docs/granting-changing-revoking-access#grant-single-role) .", "guide": "Google Kubernetes Engine (GKE)"}