{"title": "Google Kubernetes Engine (GKE) - Control Pod egress traffic using FQDN network policies", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/fqdn-network-policies", "abstract": "# Google Kubernetes Engine (GKE) - Control Pod egress traffic using FQDN network policies\n**Note:** Fully qualified domain names (FQDN) is supported only on clusters that are enabled with [Google Kubernetes Engine (GKE) Enterprise edition](/anthos/docs/concepts/gke-editions) . To understand the charges that apply for enabling Google Kubernetes Engine (GKE) Enterprise edition, see [GKE Enterprise Pricing](/kubernetes-engine/pricing) .\nThis page explains how to control egress communication between Pods and resources outside of the Google Kubernetes Engine (GKE) cluster using fully qualified domain names (FQDN). The custom resource that you use to configure FQDNs is the `FQDNNetworkPolicy` resource.\n", "content": "## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.\n- Follow the instructions to [Enable GKE Enterprise](/../../anthos/docs/setup/enable-gkee) .\n### Requirements and limitations\n`FQDNNetworkPolicy` resources have the following requirements and limitations:\n- You must have a GKE cluster running one of the following versions:- 1.26.4-gke.500 or later\n- 1.27.1-gke.400 or later\n- Your cluster must use [GKE Dataplane V2](/kubernetes-engine/docs/concepts/dataplane-v2#technical_specifications) .\n- You must use one of the DNS providers in your GKE cluster, kube-dns or Cloud DNS. Custom kube-dns or Core DNS deployments are not supported.\n- Google Cloud CLI version 462.0.0 or later.\n- Windows node pools are not supported.\n- Anthos Service Mesh is not supported.\n- If you have hard-coded IP addresses in your application, use the [IPBlock field of Kubernetes NetworkPolicy](https://kubernetes.io/docs/concepts/services-networking/network-policies/#networkpolicy-resource) instead of a`FQDNNetworkPolicy`.\n- Results returned by non-cluster DNS name servers such as alternate name servers in`resolv.conf`are not considered valid to be programmed in the allowlist in the GKE data plane.\n- The maximum number of IPv4 and IPv6 IP addresses that a`FQDNNetworkPolicy`can resolve to is 50.\n- You cannot allow traffic to a ClusterIP or Headless Service as an egress destination in a`FQDNNetworkPolicy`because GKE translates the Service virtual IP address (VIP) to backend Pod IP addresses before evaluating network policy rules. Instead, use a Kubernetes label-based`NetworkPolicy`.\n- There is a maximum quota of 100 IP addresses per hostname.\n- Inter-node transparent encryption is not supported with FQDN Network Policies.## Enable FQDN Network Policy\nYou can enable FQDN Network Policy on a new or an existing cluster.\n### Enable FQDN Network Policy in a new cluster\nCreate your cluster using the `--enable-fqdn-network-policy` flag:\n```\ngcloud container clusters create CLUSTER_NAME \u00a0\\\u00a0 \u00a0 --enable-fqdn-network-policy\n```\nReplace `` with the name of your cluster.\n**Note:** You can only enable FQDN network policy by updating an existing Autopilot cluster. You can't enable this feature when you create a new Autopilot cluster.\n### Enable FQDN Network Policy in an existing cluster\n- For both Autopilot and Standard clusters, update the cluster using the `--enable-fqdn-network-policy` flag:```\ngcloud container clusters update CLUSTER_NAME \u00a0\\\u00a0 \u00a0 --enable-fqdn-network-policy\n```Replace `` with the name of your cluster. **Note:** Updating the cluster and installing the FQDN network policy CRDs might take several minutes to complete. A regional GKE cluster takes more time to successfully update than a zonal cluster.\n- For Standard clusters **only** , restart the GKE Dataplane V2 `anetd` DaemonSet:```\nkubectl rollout restart ds -n kube-system anetd\n``` **Note:** In Autopilot clusters, GKE control plane automatically restarts the nodes after enabling the FQDN Network Policy feature. It may take up to a few hours to trigger the node restart and for the new nodes to enforce policies. To verify that nodes were restarted, use the `kubectl get nodes` and check the `AGE` field of each node.## Create a FQDNNetworkPolicy\n- Save the following manifest as `fqdn-network-policy.yaml` :```\napiVersion: networking.gke.io/v1alpha1kind: FQDNNetworkPolicymetadata:\u00a0 name: allow-out-fqdnnpspec:\u00a0 podSelector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: curl-client\u00a0 egress:\u00a0 - matches:\u00a0 \u00a0 - pattern: \"*.yourdomain.com\"\u00a0 \u00a0 - name: \"www.google.com\"\u00a0 \u00a0 ports:\u00a0 \u00a0 - protocol: \"TCP\"\u00a0 \u00a0 \u00a0 port: 443\n```This manifest has the following properties:- `name: www.google.com`: the fully qualified domain name. IP addresses provided by the name server associated with www.google.com are allowed. You must specify either`name`or`pattern`, or both.\n- `pattern: \"*.yourdomain.com\"`: IP addresses provided by name servers matching this pattern are allowed. You can use the following regular expressions for the pattern key:`^([a-zA-Z0-9*]([-a-zA-Z0-9_*]*[a-zA-Z0-9*])*\\.?)*$`. Match criteria are additive. You can use multiple`pattern`fields. You must specify either`name`or`pattern`, or both.\n- `protocol: \"TCP\"`and`port: 443`: specifies a protocol and port. If a Pod tries to establish a connection to IP addresses using this protocol and port combination, the name resolution works, but the data plane blocks the outbound connection. This field is optional.\n- Verify that the network policy is selecting your workloads:```\nkubectl describe fqdnnp\n```The output is similar to the following:```\nName:   allow-out-fqdnnp\nLabels:  <none>\nAnnotations: <none>\nAPI Version: networking.gke.io/v1alpha1\nKind:   FQDNNetworkPolicy\nMetadata:\n...\nSpec:\n Egress:\n Matches:\n  Pattern: *.yourdomain.com\n  Name:  www.google.com\n Ports:\n  Port:  443\n  Protocol: TCP\n Pod Selector:\n Match Labels:\n  App: curl-client\nEvents:  <none>\n```## Delete a FQDNNetworkPolicy\nYou can delete a `FQDNNetworkPolicy` using the `kubectl delete fqdnnp` command:\n```\nkubectl delete fqdnnp FQDN_POLICY_NAME\n```\nReplace `` with the name of your `FQDNNetworkPolicy` .\nGKE deletes the rules from policy enforcement, but existing connections remain active until they close following the conntrack standard protocol guidelines.\n## How FQDN network policies work\n`FQDNNetworkPolicies` are egress-only policies which control which endpoints selected Pods can send traffic to. Similar to Kubernetes `NetworkPolicy` , a `FQDNNetworkPolicy` that selects a workload creates an implicit deny rule to endpoints not specified as allowed egress destinations. `FQDNNetworkPolicies` can be used with Kubernetes `NetworkPolicies` as described in [FQDNNetworkPolicyand NetworkPolicy](#fqdn-np) .\n`FQDNNetworkPolicies` are enforced on the IP address and port level. They are not enforced using any Layer 7 protocol information (e.g. the `Request-URI` in a HTTP request). The specified domain names are translated to IP addresses using the DNS information provided by the GKE cluster's DNS provider.\n### DNS requests\nAn active `FQDNNetworkPolicy` that selects workloads does not affect the ability of workloads to make DNS requests. Commands such as `nslookup` or `dig` work on any domains without being affected by the policy. However, subsequent requests to the IP address backing domains not in the allowist would be dropped.\nFor example, if a `FQDNNetworkPolicy` allows egress to `www.github.com` , then DNS requests for all domains are allowed but traffic sent to an IP address backing `twitter.com` is dropped.\n### TTL expiration\n`FQDNNetworkPolicy` honors the TTL provided by a DNS record. If a Pod attempts to contact an expired IP address after the TTL of the DNS record has elapsed, new connections are rejected. Long lived connections whose duration exceeds the TTL of the DNS record shouldn't experience traffic disruption while conntrack considers the connection still active.\n### FQDNNetworkPolicy and NetworkPolicy\nWhen both a `FQDNNetworkPolicy` and a `NetworkPolicy` apply to the same Pod, meaning the Pod's labels match what is configured in the policies, egress traffic is allowed as long as it matches one of the policies. There is no hierarchy between egress `NetworkPolicies` specifying IP addresses or label-selectors and `FQDNNetworkPolicies` .\n### Shared IP Address Endpoints (Load Balancers, CDN, VPN Gateway, etc)\nMany domains don't have dedicated IP addresses backing them and are instead exposed using shared IP addresses. This is especially common when the application is served by a Load Balancer or CDN. For example, Google Cloud APIs ( `compute.googleapis.com` , `container.googleapis.com` , etc.) don't have unique IP addresses for each API. Instead all APIs are exposed using a shared range.\nWhen configuring `FQDNNetworkPolicies` , it is important to consider whether the allowed domains are using dedicated IP addresses or shared IP addresses. Because `FQDNNetworkPolicies` are enforced at the IP address and port level, they can't distinguish between multiple domains served by the same IP address. Allowing access to a domain that is backed by a shared IP address will allow your Pod to communicate with all other domains served by that IP address. For example, allowing traffic to `compute.googleapis.com` will also allow the Pod to communicate with other Google Cloud APIs.\n### CNAME Chasing\nIf the FQDN object in the `FQDNNetworkPolicy` includes a domain that has CNAMEs in the DNS record, you must configure your `FQDNNetworkPolicy` with all domain names that your Pod can query directly, including all potential aliases, in order to ensure a reliable `FQDNNetworkPolicy` behavior.\nIf your Pod queries `example.com` , then `example.com` is what you should write in the rule. Even if you get back a chain of aliases from your upstream DNS servers (e.g. `example.com` to `example.cdn.com` to `1.2.3.4` ), the FQDN Network Policy will still allow your traffic through.\n## Known Issues\nThis section lists all known issues for the fully qualified domain names (FQDN).\n### Specifying protocol: ALL causes policy to be ignored\nIf you create a `FQDNNetworkPolicy` which specifies `protocol: ALL` in the `ports` section, GKE does not enforce the policy. This issue occurs because of an issue with parsing the policy. Specifying `TCP` or `UDP` does not cause this issue.\nAs a workaround, if you don't specify a `protocol` in the `ports` entry, the rule matches all protocols by default. Removing the `protocol: ALL` bypasses the parsing issue and GKE enforces the `FQDNNetworkPolicy` .\nIn GKE version 1.27.10-gke.1055000+ and 1.28.3-gke.1055000+, policies with `protocol: ALL` are correctly parsed and enforced.\n### NetworkPolicy Logging causes incorrect or missing logs\nIf your cluster is using [Network PolicyLogging](/kubernetes-engine/docs/how-to/network-policy-logging) and FQDN network policies, there is a bug which can cause missing or incorrect log entries.\nWhen using network policy logging , the policy logs for DNS connections leaving a workload incorrectly claim that the traffic was dropped. The traffic itself was allowed (per the `FQDNNetworkPolicy` ), but the logs were incorrect.\nWhen using network policy logging , policy logs are missing. The traffic itself is unaffected.\nIn GKE version 1.27.10-gke.105500+ and 1.28.2-gke.1157000+, this bug has been fixed. DNS connections will now be correctly logged as ALLOWED, when the traffic is selected by a `NetworkPolicy` or a `FQDNNetworkPolicy` .\n## What's next\n- [Read the Kubernetes documentation about network policies](https://kubernetes.io/docs/concepts/services-networking/network-policies/) \n- [Use security insights to explore other ways to harden your infrastructure](/anthos/docs/concepts/security-monitoring)", "guide": "Google Kubernetes Engine (GKE)"}