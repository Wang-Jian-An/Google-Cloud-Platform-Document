{"title": "Google Kubernetes Engine (GKE) - Prepare an Arm workload for deployment", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/prepare-arm-workloads-for-deployment", "abstract": "# Google Kubernetes Engine (GKE) - Prepare an Arm workload for deployment\nThis page explains how to prepare a workload to be scheduled on Arm nodes in a GKE Standard cluster. To learn more about scheduling Arm workloads with Autopilot, see [Deploy Autopilot workloads on Arm architecture](/kubernetes-engine/docs/how-to/autopilot-arm-workloads) .\nTo successfully schedule a workload to an Arm node, you must have the following:\n- An Arm-compatible container image. For guidance on how to check this, see [Is my workload ready for Arm?](/kubernetes-engine/docs/how-to/build-multi-arch-for-arm#workload-arm-readiness-check) \n- Arm nodes where your Arm-compatible workloads can be scheduled. To create the necessary resources, see [Create clusters and node pools with Arm nodes](/kubernetes-engine/docs/how-to/create-arm-clusters-nodes) .\n- A cluster in a Google Cloud region or zone that has available Arm virtual machines (VMs). For a filterable table of machine types and platforms, see [Available regions and zones](/compute/docs/regions-zones#available) .", "content": "## Overview\nBy default, GKE schedules workloads only to x86-based nodes\u2014Compute Engine machine series with [Intel](/compute/docs/cpu-platforms#intel_processors) or [AMD](/compute/docs/cpu-platforms#amd_processors) processors\u2014by placing a [taint](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) ( `kubernetes.io/arch=arm64:NoSchedule` ) on all Arm nodes. This taint prevents x86-compatible workloads from being inadvertently scheduled to your Arm nodes. If you want to deploy a workload to an Arm node, use the fields described on this page to guide the scheduler to send the workload to the desired type of node.\nUse one of the following fields:\n- A [node selector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) .\n- A [node affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity) rule.\nWhen you use a node selector or node affinity rule, GKE will only schedule your Arm-compatible workloads when you've declared that the workload's container image can run on the node's architecture.\nIf you schedule an Arm-compatible workload [with a node selector](#schedule-with-node-selector-arm) or [with a node affinity rule](#node-affinity-single-arch-arm) as described in the following sections, GKE automatically adds a [toleration](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) to the workload configuration so that the Pods can run on the Arm nodes.\nThis toleration added to the workload matches the taint ( `kubernetes.io/arch=arm64:NoSchedule` ) added to all Arm nodes to allow your workload to be scheduled on Arm nodes.\nIn [some situations](#multi-arch-schedule-any-arch) , such as when you have multi-architecture images that can run on any node, you might want to manually add this toleration to the workload configuration. For instructions, refer to [Use toleration for scheduling multi-arch workloads to any architectures](#multi-arch-schedule-any-arch) .\n## Use a node selector to schedule an Arm workload\nAdd the following node selector to the specification:\n```\nnodeSelector:\u00a0 \u00a0 kubernetes.io/arch: arm64\n```\nThe node selector specifies that this workload should only be scheduled to nodes with the `arm64` label, which all Arm nodes on GKE clusters have.\nWhen this node selector is included in the workload configuration, GKE [adds the toleration](#add-toleration) to match the taint to permit the workload to be scheduled on Arm nodes.\n## Use a node affinity rule to schedule an Arm workload\nYou can also use node affinity to schedule your workload.\n### Schedule workload to a single architecture\nAdd the following node affinity to the specification:\n```\n\u00a0 affinity:\u00a0 \u00a0 nodeAffinity:\u00a0 \u00a0 \u00a0 requiredDuringSchedulingIgnoredDuringExecution:\u00a0 \u00a0 \u00a0 \u00a0 nodeSelectorTerms:\u00a0 \u00a0 \u00a0 \u00a0 - matchExpressions:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - key: kubernetes.io/arch\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 operator: In\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 values:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - arm64\n```\nThe node affinity rule specifies that the workload should only be scheduled to nodes with the `arm64` label, which all Arm nodes on GKE clusters have.\nWhen this node affinity rule is included in the workload configuration, GKE [adds the toleration](#add-toleration) to match the taint to permit the workload to be scheduled on Arm nodes.\n### Schedule workload to x86 and Arm architectures\nIf you want to schedule a workload across both x86 (Intel and AMD processors) and Arm architectures, you can specify this in different ways.\nIf you have a multi-arch image that you want to be scheduled to any available architecture type in a Standard cluster, you only need to add the toleration to the workload specification. You do not need the node selector or node affinity rules described on this page as the workload can be scheduled to all architecture types.\nAdd the toleration:\n```\n\u00a0 tolerations:\u00a0 \u00a0 - key: kubernetes.io/arch\u00a0 \u00a0 \u00a0 operator: Equal\u00a0 \u00a0 \u00a0 value: arm64\u00a0 \u00a0 \u00a0 effect: NoSchedule\n```\nUsing this toleration, GKE could schedule a workload to nodes with any architecture type.\nFor example, if you have a cluster with the following node pools:\n- **my-t2a-node-pool** , using t2a-standard-16 VMs (`arm64`).\n- **my-c2-node-pool** , using c2-standard-8 VMs (`amd64`).\n- **my-t2d-node-pool** , using t2-standard-48 VMs (`amd64`).\nIf you deploy to this cluster a workload which uses a multi-arch image and the `arm64` toleration in the workload configuration, GKE may schedule the workload across all of the node pools.\nIf you want a workload to be scheduled on nodes across architecture types including x86 and Arm, you can also use a node affinity rule. With node affinity rules, you can specify exactly which architecture types you want to schedule the workload on. This approach is recommended for scheduling workloads on Autopilot clusters. To learn more, see [Deploy Autopilot workloads on Arm architecture](/kubernetes-engine/docs/how-to/autopilot-arm-workloads#nodeaffinity) .\nWith x86-based workloads, you do not need these node selectors, node affinity rules, or tolerations for the workload to be scheduled. If you have an image that you only want to schedule to x86-based nodes, you do not need to use these fields.\nTo schedule workloads to any architecture type, list both `arm64` and `amd64` the `values` section of the node affinity field. `amd64` includes any nodes using [x86 processors](/compute/docs/cpu-platforms#x86_processors) .\nThe following example specifies that this workload could be scheduled on nodes with Arm processors or x86 processors:\n```\n\u00a0 affinity:\u00a0 \u00a0 nodeAffinity:\u00a0 \u00a0 \u00a0 requiredDuringSchedulingIgnoredDuringExecution:\u00a0 \u00a0 \u00a0 \u00a0 nodeSelectorTerms:\u00a0 \u00a0 \u00a0 \u00a0 - matchExpressions:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - key: kubernetes.io/arch\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 operator: In\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 values:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - arm64\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - amd64\n```\nThe labels for each architecture type are:\n- `arm64`for [nodes using Arm processors](/compute/docs/cpu-platforms#arm_processors) (for example, Tau T2A).\n- `amd64`for [nodes using AMD processors](/compute/docs/cpu-platforms#amd_processors) (for example, Tau T2D) or [nodes using Intel processors](/compute/docs/cpu-platforms#intel_processors) (for example, C2).\nFor example, if you have a cluster with the following node pools and the given node affinity rule:\n- **my-t2a-node-pool** , using t2a-standard-16 VMs (`arm64`).\n- **my-c2-node-pool** , using c2-standard-8 VMs (`amd64`).\n- **my-t2d-node-pool** , using t2-standard-48 VMs (`amd64`).\nIf you deploy to this cluster a workload which uses a multi-arch image and the node affinity with `arm64` included in the `values` list, GKE [adds the toleration](#add-toleration) in the workload configuration and may schedule the workload across all of the node pools.\n## Deploy the workload\nNow that you have specified where your Arm-compatible workloads should be scheduled, you can deploy your workload.\nWhen you deploy a workload to a GKE cluster, the instructions are the same across architecture types. You can deploy an Arm-compatible workload as you would deploy any other workload, as long as you've completed the prerequisite steps. To see examples of deploying workloads, view the following pages:\n- [Deploying a stateless Linux application](/kubernetes-engine/docs/how-to/stateless-apps#console) .\n- [Deploying a stateful application](/kubernetes-engine/docs/how-to/stateful-apps) .\n- [Running a Job](https://kubernetes.io/docs/concepts/workloads/controllers/job/) .## Troubleshooting\nFor common errors and troubleshooting information, refer to [Troubleshooting Arm workloads](/kubernetes-engine/docs/troubleshooting/troubleshooting-arm-workloads) .\n## What's next\n- [Arm workloads on GKE](/kubernetes-engine/docs/concepts/arm-on-gke) \n- [Migrate x86 application on GKE to multi-arch with Arm](/kubernetes-engine/docs/tutorials/migrate-x86-to-multi-arch-arm)", "guide": "Google Kubernetes Engine (GKE)"}