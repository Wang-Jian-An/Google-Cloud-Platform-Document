{"title": "Google Kubernetes Engine (GKE) - Setting up multi-cluster Services with Shared VPC", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/msc-setup-with-shared-vpc-networks", "abstract": "# Google Kubernetes Engine (GKE) - Setting up multi-cluster Services with Shared VPC\nThis page describes common [Multi-cluster Services (MCS)](/kubernetes-engine/docs/concepts/multi-cluster-services) scenarios. The scenarios presented on this page share the following characteristics:\n- **Two GKE clusters** : The first GKE cluster is registered to its own project's [fleet](/anthos/fleet-management/docs) . This is the. The second GKE cluster is registered to the same fleet, though depending on the scenario may not be in the same project. Both GKE clusters are [VPC-native clusters](/kubernetes-engine/docs/concepts/alias-ips) .\n- **Same VPC network** : Both GKE clusters use subnets in the same Shared VPC network.\n- **Workload identity federation for GKE** is enabled in both clusters.", "content": "## Terminology\nThe terms and have different meanings.\n- The Shared VPC host project is the project which contains the Shared VPC network.\n- The GKE fleet host project is the project that contains the [fleet](/anthos/fleet-management/docs) to which you register the clusters.## Scenarios\nThe following table describes common MCS scenarios:\n| Scenario                                  | Fleet host project (project containing the first cluster) | The location of the second cluster      |\n|:-----------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------|:---------------------------------------------------------|\n| Clusters in the same Shared VPC service project                        | A Shared VPC service project        | The same Shared VPC service project as the first cluster |\n| Shared VPC host project as fleet host project (One cluster in the Shared VPC host project, a second cluster in a Shared VPC service project) | The Shared VPC host project         | A Shared VPC service project        |\n| Clusters in different Shared VPC service projects                        | A Shared VPC service project        | A different Shared VPC service project     |\n## Prerequisites\nBefore setting up a cross-project configuration of MCS, complete the following steps:\n- Ensure you are familiar with [Shared VPC concepts](/vpc/docs/shared-vpc) .\n- Ensure you are familiar with [setting up clusters with Shared VPC](/kubernetes-engine/docs/how-to/cluster-shared-vpc) .\n- Ensure you understand the [limitations](/kubernetes-engine/docs/how-to/multi-cluster-services#limitations) and [known issues](/kubernetes-engine/docs/how-to/multi-cluster-services#known_issues) of MCS.## Clusters in the same Shared VPC service project\nThis section provides an example MCS configuration involving two existing GKE clusters both in the same Shared VPC service project:\n- Both clusters use the same Shared VPC network in the``.\n- The first VPC-native GKE cluster``, with workload identity federation for GKE enabled, is created in the``. The fleet host project is a service project connected to the``in this scenario.\n- The second VPC-native GKE cluster``, with workload identity federation for GKE enabled, is also created in the``.\n### Enable required APIs\nEnable the required APIs. The output of the Google Cloud CLI shows you if an API has already been enabled.\n- Enable the Cloud DNS API:```\ngcloud services enable dns.googleapis.com \\\u00a0 \u00a0 --project SHARED_VPC_HOST_PROJ\n```In this scenario, the fleet host project is a service project connected to the Shared VPC host project. The Cloud DNS API must be enabled in the Shared VPC host project because that's where the Shared VPC network is located. GKE creates Cloud DNS managed private zones in the host project and authorizes them for the Shared VPC network.\n- Enable GKE Hub (fleet) API. The GKE Hub API must be enabled in only the fleet host project.```\ngcloud services enable gkehub.googleapis.com \\\u00a0 \u00a0 --project FLEET_HOST_PROJ\n```Enabling this API in the fleet host project creates or ensures that the following service account exists: `service-` `` `@gcp-sa-gkehub.iam.gserviceaccount.com` .\n- Enable Traffic Director, Resource Manager, and Multi-cluster Service Discovery APIs in the fleet host project:```\ngcloud services enable trafficdirector.googleapis.com \\\u00a0 \u00a0 cloudresourcemanager.googleapis.com \\\u00a0 \u00a0 multiclusterservicediscovery.googleapis.com \\\u00a0 \u00a0 --project FLEET_HOST_PROJ\n```\n### Enable Multi-cluster services in the fleet host project\n- Enable multi-cluster services in the fleet host project:```\ngcloud container fleet multi-cluster-services enable \\\u00a0 \u00a0 --project FLEET_HOST_PROJ\n```Enabling multi-cluster services in the fleet host project creates or ensures that the following service account exists: `service-` `` `@gcp-sa-mcsd.iam.gserviceaccount.com` .\n### Create IAM bindings\n- Create IAM binding granting the fleet host project MCS service account the MCS Service Agent role on the Shared VPC host project:```\ngcloud projects add-iam-policy-binding SHARED_VPC_HOST_PROJ \\\u00a0 \u00a0 --member \"serviceAccount:service-FLEET_HOST_PROJ_NUMBER@gcp-sa-mcsd.iam.gserviceaccount.com\" \\\u00a0 \u00a0 --role roles/multiclusterservicediscovery.serviceAgent\n```\n- Create IAM binding granting the fleet host project MCS service account the Network User role for its own project:```\ngcloud projects add-iam-policy-binding FLEET_HOST_PROJ \\\u00a0 \u00a0 --member \"serviceAccount:FLEET_HOST_PROJ.svc.id.goog[gke-mcs/gke-mcs-importer]\" \\\u00a0 \u00a0 --role roles/compute.networkViewer\n```Because this scenario uses workload identity federation for GKE, the fleet host project's MCS Importer GKE service account needs the Network User role for its own project.Replace the following:- ``: the project ID of the Shared VPC host project\n- ``: the project number of the fleet host project, which is the Shared VPC service project for this scenario\n- ``: the project ID of the first cluster's project.\n### Register the clusters to the fleet\n- Register the first cluster to the fleet. The `--gke-cluster` flag can be used for this command because the first cluster is located in the same project as the fleet to which it is being registered.```\ngcloud container fleet memberships register MEMBERSHIP_NAME_1 \\\u00a0 \u00a0 --project FLEET_HOST_PROJ \\\u00a0 \u00a0 --enable-workload-identity \\\u00a0 \u00a0 --gke-cluster=LOCATION/FIRST_CLUSTER_NAME\n```Replace the following:- ``: a unique identifier for this cluster in this fleet. For example, you can use the name of the first GKE cluster.\n- ``: the project ID for the fleet host project, identical to the Shared VPC host project in this scenario.\n- ``: for zonal clusters, the Compute Engine zone containing the cluster; for regional clusters, the Compute Engine region containing the cluster.\n- ``: the name of the first cluster.\n- Register the second cluster to the fleet host project. The `--gke-cluster` flag can be used for this command because the second cluster is also located in the fleet host project.```\ngcloud container fleet memberships register MEMBERSHIP_NAME_2 \\\u00a0 \u00a0 --project FLEET_HOST_PROJ \\\u00a0 \u00a0 --enable-workload-identity \\\u00a0 \u00a0 --gke-cluster=LOCATION/SECOND_CLUSTER_NAME\n```Replace the following:- ``: a unique identifier for this cluster in this fleet. For example, you can use the name of the second GKE cluster.\n- ``: the project ID for the fleet host project, identical to the Shared VPC host project in this scenario.\n- ``: for zonal clusters, the Compute Engine zone containing the cluster; for regional clusters, the Compute Engine region containing the cluster.\n- ``: the name of the second cluster.\n### Create a common namespace for the clusters\n- Ensure that each cluster has a namespace to share Services in. If needed, create a namespace by using the following command in each cluster:```\nkubectl create ns NAMESPACE\n```Replace `` with a name for the namespace.## Shared VPC host project as fleet host project\nThis section provides an example MCS configuration involving two existing GKE clusters:\n- The first VPC-native GKE cluster``, with workload identity federation for GKE enabled, has been created in the``. The fleet host project is also the Shared VPC host project in this scenario.\n- The second VPC-native GKE cluster``, with workload identity federation for GKE enabled, has been created in the``.\n### Enable required APIs\nEnable the required APIs. The output of the Google Cloud CLI shows you if an API has already been enabled.\n- Enable the Cloud DNS API:```\ngcloud services enable dns.googleapis.com \\\u00a0 \u00a0 --project FLEET_HOST_PROJ\n```In this scenario, the fleet host project is also the Shared VPC host project. The Cloud DNS API must be enabled in the Shared VPC host project because that's where the Shared VPC network is located. GKE creates Cloud DNS managed private zones in the host project and authorizes them for the Shared VPC network.\n- Enable GKE Hub (fleet) API. The GKE Hub API must be enabled in only the fleet host project.```\ngcloud services enable gkehub.googleapis.com \\\u00a0 \u00a0 --project FLEET_HOST_PROJ\n```Enabling the GKE Hub API in the fleet host project creates or ensures that the following service account exists: `service-` `` `@gcp-sa-gkehub.iam.gserviceaccount.com` .\n- Enable Traffic Director, Resource Manager, and Multi-cluster Service Discovery APIs, in both the fleet host project and in the second cluster's project:```\ngcloud services enable trafficdirector.googleapis.com \\\u00a0 \u00a0 cloudresourcemanager.googleapis.com \\\u00a0 \u00a0 multiclusterservicediscovery.googleapis.com \\\u00a0 \u00a0 --project FLEET_HOST_PROJ\n``````\ngcloud services enable trafficdirector.googleapis.com \\\u00a0 \u00a0 cloudresourcemanager.googleapis.com \\\u00a0 \u00a0 multiclusterservicediscovery.googleapis.com \\\u00a0 \u00a0 --project SECOND_CLUSTER_PROJ\n```\n### Enable Multi-cluster services in the fleet host project\n- Enable multi-cluster services in the fleet host project:```\ngcloud container fleet multi-cluster-services enable \\\u00a0 \u00a0 --project FLEET_HOST_PROJ\n```Enabling multi-cluster services in the fleet host project creates or ensures that the following service account exists: `service-` `` `@gcp-sa-mcsd.iam.gserviceaccount.com` .\n### Create IAM bindings\n- Create IAM binding granting the fleet host project's GKE fleet service account the GKE Service Agent role on the second cluster's project:```\ngcloud projects add-iam-policy-binding SECOND_CLUSTER_PROJ \\\u00a0 \u00a0 --member \"serviceAccount:service-FLEET_HOST_PROJ_NUMBER@gcp-sa-gkehub.iam.gserviceaccount.com\" \\\u00a0 \u00a0 --role roles/gkehub.serviceAgent\n```\n- Create IAM binding granting the fleet host project's MCS service account the MCS Service Agent role on the second cluster's project:```\ngcloud projects add-iam-policy-binding SECOND_CLUSTER_PROJ \\\u00a0 \u00a0 --member \"serviceAccount:service-FLEET_HOST_PROJ_NUMBER@gcp-sa-mcsd.iam.gserviceaccount.com\" \\\u00a0 \u00a0 --role roles/multiclusterservicediscovery.serviceAgent\n```\n- Create IAM binding granting each project's MCS service account the Network User role for its own project:```\ngcloud projects add-iam-policy-binding FLEET_HOST_PROJ \\\u00a0 \u00a0 --member \"serviceAccount:FLEET_HOST_PROJ.svc.id.goog[gke-mcs/gke-mcs-importer]\" \\\u00a0 \u00a0 --role roles/compute.networkViewer\n``````\ngcloud projects add-iam-policy-binding SECOND_CLUSTER_PROJ \\\u00a0 \u00a0 --member \"serviceAccount:SECOND_CLUSTER_PROJ.svc.id.goog[gke-mcs/gke-mcs-importer]\" \\\u00a0 \u00a0 --role roles/compute.networkViewer\n```Because this scenario uses workload identity federation for GKE, each project's MCS Importer GKE service account needs the Network User role for its own project.Replace the following:- ``: the project ID of the second cluster's project\n- ``: the project ID of the first cluster's project.\n- ``: the project number of the fleet host project, which is the same as the Shared VPC host project for this scenario\n### Register the clusters to the fleet\n- Register the first cluster to the fleet. The `--gke-cluster` flag can be used for this command because the first cluster is located in the same project as the fleet to which it is being registered.```\ngcloud container fleet memberships register MEMBERSHIP_NAME_1 \\\u00a0 \u00a0 --project FLEET_HOST_PROJ \\\u00a0 \u00a0 --enable-workload-identity \\\u00a0 \u00a0 --gke-cluster=LOCATION/FIRST_CLUSTER_NAME\n```Replace the following:- ``: a unique identifier for this cluster in this fleet. For example, you can use the name of the first GKE cluster.\n- ``: the project ID for the fleet host project, identical to the Shared VPC host project in this scenario.\n- ``: for zonal clusters, the Compute Engine zone containing the cluster; for regional clusters, the Compute Engine region containing the cluster.\n- ``: the name of the first cluster.\n- Register the second cluster to the fleet. The `--gke-uri` flag must be used for this command because the second cluster is not located in the same project as the fleet. You can obtain the full cluster URI by running `gcloud container clusters list --uri` .```\ngcloud container fleet memberships register MEMBERSHIP_NAME_2 \\\u00a0 \u00a0 --project FLEET_HOST_PROJ \\\u00a0 \u00a0 --enable-workload-identity \\\u00a0 \u00a0 --gke-uri https://container.googleapis.com/v1/projects/SECOND_CLUSTER_PROJ/locations/LOCATION/clusters/SECOND_CLUSTER_NAME\n```Replace the following:- ``: a unique identifier for this cluster in this fleet. For example, you can use the name of the second GKE cluster.\n- ``: the project ID for the fleet host project, identical to the Shared VPC host project in this scenario.\n- ``: replace`LOCATION`with:- the cluster's Compute Engine zone if the cluster is a zonal cluster\n- the cluster's Compute Engine region if the cluster is a regional cluster\n- ``: the project containing the second cluster.\n- ``: the name of the second cluster.\n### Create a common namespace for the clusters\n- Ensure that each cluster has a namespace to share Services in. If needed, create a namespace by using the following command in each cluster:```\nkubectl create ns NAMESPACE\n```Replace `` with a name for the namespace.## Clusters in different Shared VPC service projects\nThis section provides an example MCS configuration involving two existing GKE clusters each in a different Shared VPC service project.\n- Both clusters use the same Shared VPC network in the``.\n- The first VPC-native GKE cluster``, with workload identity federation for GKE enabled, has been created in the``. The fleet host project is a service project connected to the``in this scenario.\n- The second VPC-native GKE cluster``, with workload identity federation for GKE enabled, has been created in the``. The``is also a service project connected to the``in this scenario.\n### Enable required APIs\nEnable the required APIs. The output of the Google Cloud CLI shows you if an API has already been enabled.\n- Enable the Cloud DNS API:```\ngcloud services enable dns.googleapis.com \\\u00a0 \u00a0 --project SHARED_VPC_HOST_PROJ\n```In this scenario, the fleet host project is a service project connected to the Shared VPC host project. The Cloud DNS API must be enabled in the Shared VPC host project because that's where the Shared VPC network is located. GKE creates Cloud DNS managed private zones in the host project and authorizes them for the Shared VPC network.\n- GKE Hub (fleet) API. The GKE Hub API must be enabled in only the fleet host project `` .```\ngcloud services enable gkehub.googleapis.com \\\u00a0 \u00a0 --project FLEET_HOST_PROJ\n```Enabling this API in the fleet host project creates or ensures that the following service account exists: `service-` `` `@gcp-sa-gkehub.iam.gserviceaccount.com` .\n- Enable Traffic Director, Resource Manager, and Multi-cluster Service Discovery APIs, in both the fleet host project and in the second cluster's project:```\ngcloud services enable trafficdirector.googleapis.com \\\u00a0 \u00a0 cloudresourcemanager.googleapis.com \\\u00a0 \u00a0 multiclusterservicediscovery.googleapis.com \\\u00a0 \u00a0 --project=FLEET_HOST_PROJ\n``````\ngcloud services enable trafficdirector.googleapis.com \\\u00a0 \u00a0 cloudresourcemanager.googleapis.com \\\u00a0 \u00a0 multiclusterservicediscovery.googleapis.com \\\u00a0 \u00a0 --project SECOND_CLUSTER_PROJ\n```\n### Enable Multi-cluster services in the fleet host project\n- Enable multi-cluster services in the fleet host project:```\ngcloud container fleet multi-cluster-services enable \\\u00a0 \u00a0 --project FLEET_HOST_PROJ\n```Enabling multi-cluster services in the fleet host project creates or ensures that the following service account exists: `service-` `` `@gcp-sa-mcsd.iam.gserviceaccount.com` .\n### Create IAM bindings\n- Create IAM binding granting the fleet host project's GKE Hub service account the GKE Service Agent role on the second cluster's project:```\ngcloud projects add-iam-policy-binding SECOND_CLUSTER_PROJ \\\u00a0 \u00a0 --member \"serviceAccount:service-FLEET_HOST_PROJ_NUMBER@gcp-sa-gkehub.iam.gserviceaccount.com\" \\\u00a0 \u00a0 --role roles/gkehub.serviceAgent\n```\n- Create IAM binding granting the fleet host project's MCS service account the MCS Service Agent role on the second cluster's project:```\ngcloud projects add-iam-policy-binding SECOND_CLUSTER_PROJ \\\u00a0 \u00a0 --member \"serviceAccount:service-FLEET_HOST_PROJ_NUMBER@gcp-sa-mcsd.iam.gserviceaccount.com\" \\\u00a0 \u00a0 --role roles/multiclusterservicediscovery.serviceAgent\n```\n- Create IAM binding granting the fleet host project MCS service account the MCS Service Agent role on the Shared VPC host project:```\ngcloud projects add-iam-policy-binding SHARED_VPC_HOST_PROJ \\\u00a0 \u00a0 --member \"serviceAccount:service-FLEET_HOST_PROJ_NUMBER@gcp-sa-mcsd.iam.gserviceaccount.com\" \\\u00a0 \u00a0 --role roles/multiclusterservicediscovery.serviceAgent\n```\n- Create IAM binding granting each project's MCS service account the Network User role for its own project:```\ngcloud projects add-iam-policy-binding FLEET_HOST_PROJ \\\u00a0 \u00a0 --member \"serviceAccount:FLEET_HOST_PROJ.svc.id.goog[gke-mcs/gke-mcs-importer]\" \\\u00a0 \u00a0 --role roles/compute.networkViewer\n``````\ngcloud projects add-iam-policy-binding SECOND_CLUSTER_PROJ \\\u00a0 \u00a0 --member \"serviceAccount:SECOND_CLUSTER_PROJ.svc.id.goog[gke-mcs/gke-mcs-importer]\" \\\u00a0 \u00a0 --role roles/compute.networkViewer\n```Because this scenario uses workload identity federation for GKE, each project's MCS Importer GKE service account needs the Network User role for its own project.Replace the following as needed in the previous commands:- ``: the project ID of the second cluster's project.\n- ``: the project ID of the Shared VPC host project. In this example, both clusters use the same Shared VPC network, but neither cluster is located in the Shared VPC host project.\n- ``: the project ID of the first cluster's project.\n- ``: the project number of the fleet host project.\n### Register the clusters to the fleet\n- Register the first cluster to the fleet. The `--gke-cluster` flag can be used for this command because the first cluster is located in the same project as the fleet to which it is being registered.```\ngcloud container fleet memberships register MEMBERSHIP_NAME_1 \\\u00a0 \u00a0 --project FLEET_HOST_PROJ \\\u00a0 \u00a0 --enable-workload-identity \\\u00a0 \u00a0 --gke-cluster=LOCATION/FIRST_CLUSTER_NAME\n```Replace the following:- ``: a unique identifier for this cluster in this fleet. For example, you can use the name of the first GKE cluster.\n- ``: the project ID for the fleet host project, identical to the Shared VPC host project in this scenario.\n- ``: for zonal clusters, the Compute Engine zone containing the cluster; for regional clusters, the Compute Engine region containing the cluster.\n- ``: the name of the first cluster.\n- Register the second cluster to the fleet. The `--gke-uri` flag must be used for this command because the second cluster is not located in the same project as the fleet. You can obtain the full cluster URI by running `gcloud container clusters list --uri` .```\ngcloud container fleet memberships register MEMBERSHIP_NAME_2 \\\u00a0 \u00a0 --project FLEET_HOST_PROJ \\\u00a0 \u00a0 --enable-workload-identity \\\u00a0 \u00a0 --gke-uri https://container.googleapis.com/v1/projects/SECOND_CLUSTER_PROJ/locations/LOCATION/clusters/SECOND_CLUSTER_NAME\n```Replace the following:- ``: a unique identifier for this cluster in this fleet. For example, you can use the name of the second GKE cluster.\n- ``: the project ID for the fleet host project, identical to the Shared VPC host project in this scenario.\n- ``: replace`LOCATION`with:- the cluster's Compute Engine zone if the cluster is a zonal cluster\n- the cluster's Compute Engine region if the cluster is a regional cluster\n- ``: the project containing the second cluster.\n- ``: the name of the second cluster.\n### Create a common namespace for the clusters\n- Ensure that each cluster has a namespace to share Services in. If needed, create a namespace by using the following command in each cluster:```\nkubectl create ns NAMESPACE\n```Replace `` with a name for the namespace.## What's next\n- Learn how to [use MCS](/kubernetes-engine/docs/how-to/multi-cluster-services) .", "guide": "Google Kubernetes Engine (GKE)"}