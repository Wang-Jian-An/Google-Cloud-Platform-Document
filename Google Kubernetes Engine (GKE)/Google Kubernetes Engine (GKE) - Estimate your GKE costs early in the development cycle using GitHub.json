{"title": "Google Kubernetes Engine (GKE) - Estimate your GKE costs early in the development cycle using GitHub", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/estimate-gke-costs-early-using-github", "abstract": "# Google Kubernetes Engine (GKE) - Estimate your GKE costs early in the development cycle using GitHub\nLast reviewed 2022-12-15 UTC\nThis tutorial demonstrates the best practice of shifting Google Kubernetes Engine (GKE) cost visibility left to your development team. This [shift-left](https://devopedia.org/shift-left) practice generates awareness of costs early in the process, helping you avoid surprises in your Google Cloud bill.\nThis tutorial is intended for developers, operators, and [FinOps](https://www.finops.org/) practitioners who want to optimize costs in GKE clusters and who use GitHub in production. If you use GitLab instead, see [Estimate your GKE costs early in the development cycle using GitLab](/architecture/estimate-gke-costs-early-using-gitlab) .\nThe tutorial assumes that you are familiar with [Docker](https://www.docker.com/) , [GitHub](https://github.com)  [Kubernetes](https://kubernetes.io/) , [GKE](/kubernetes-engine) , [Cloud Build](/build) , and Linux.", "content": "## OverviewMany teams embracing the public cloud are not used to the pay-as-you-go billing style. Frequently, they don't fully understand the environment their apps are running on\u2014in this case, GKE. The FinOps operating model promotes this culture of financial accountability. A FinOps best practice is to provide teams with real-time information about their spending so that cost issues can be addressed as soon as they arise.\nThis document shows you how to go one step further by estimating cost before it becomes an expense in your bill. As highlighted in the [GitHub website](https://github.com/features/code-review/) , \"On GitHub, lightweight code review tools are built into every pull request.\" This lets you \"evolve projects, propose new features, and discuss implementation details before changing your source code.\" The best time to estimate costs is early in the process during development and at code review time. This way, practitioners can understand and discuss alternatives for the cost impact of new features and bug fixes before it becomes a problem. The following diagram summarizes such a practice.\n \nAs the diagram shows, a developer estimates GKE costs in their local environment, ideally at build time. This estimate gives them a good understanding of the monthly production workload cost. When the feature or bug fix is code complete, they propose a [pull request](https://docs.github.com/github/collaborating-with-issues-and-pull-requests/about-pull-requests) that triggers [Cloud Build](/build) to check the difference between the old and the new cost. If there are increases above a predefined threshold, they can request a new code review. This practice helps developers become more aware of their workload capacity and proactively fix application issues instead of adding more resources each time an instability is found in production.\n **Note:** if you don't have a code review process in place and you don't plan to start one in your organization, you can still implement a similar approach suggested in this document in your continuous integration pipeline.## Objectives\n- Build and push the Kubernetes cost-estimator image.\n- Create a GitHub repository.\n- Connect Cloud Build to your GitHub repository.\n- Push the example code to your GitHub repository.\n- Change the code and propose a pull request to see the cost estimation in action.\n## CostsIn this document, you use the following billable components of Google Cloud:- [Artifact Registry](/artifact-registry/pricing) \n- [Cloud Build](/build/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, go to the project selector page. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- Select or create a Google Cloud project. **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project.\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n## Prepare your environment\n- In Cloud Shell, clone the `gke-shift-left-cost` GitHub repository:```\ngit clone https://github.com/GoogleCloudPlatform/gke-shift-left-costcd gke-shift-left-cost\n```The code in this repository is structured into the following folders:- Root: Contains a Dockerfile file that is used to build the cost-estimator image and the`main.go`file that implements the command-line logic for the estimator.\n- `api/`: Contains the Golang API for manipulating Kubernetes objects and making the cost estimation.\n- `samples/`: Contains examples of Kubernetes manifests so that you can experiment with the process before implementing it in your organization.\n- Set your Google Cloud project ID, your GitHub user and email address, and another GitHub user to act as the FinOps reviewer:```\nexport GCP_PROJECT_ID=YOUR_PROJECT_IDexport GITHUB_USER=YOUR_GITHUB_USERexport GITHUB_EMAIL=YOUR_GITHUB_EMAIL_ADDRESSexport GITHUB_FINOPS_REVIEWER_USER=ANOTHER_GITHUB_USER\n```Replace the following:- ``: the Google Cloud project ID for the project that you're using in this tutorial.\n- ``: the user that you use to log in to your GitHub account.\n- ``: the email that you use in your GitHub account.\n- ``: another GitHub user to act as the FinOps reviewer. Note that this tutorial requires that you add this user as a repository collaborator and therefore it cannot be yourself. To avoid getting stuck during the tutorial steps, make sure this user accepts your invitation as soon as you create the invite.\n- Set the Google Cloud project and enable required APIs:```\ngcloud config set project $GCP_PROJECT_IDgcloud services enable cloudbilling.googleapis.com \\\u00a0 \u00a0 artifactregistry.googleapis.com \\\u00a0 \u00a0 cloudbuild.googleapis.com\n```\n## Build and push the Kubernetes cost-estimator imageThe Kubernetes cost-estimator tool that comes with this tutorial is just an example of what can be done. It offers the capability of estimating cost for DaemonSet, Deployment, StatefulSet, ReplicaSet, HorizontalPodAutoScaler, and PersistentVolumeClaim Kubernetes objects. You can also implement your own cost-estimation tool or propose pull requests with the improvements that you want.- In Cloud Shell, allow `application-default` to use your credentials:```\ngcloud auth application-default login\n```\n- Build the Kubernetes cost-estimator binary:```\nmkdir ./bingo test ./apigo build -v -o ./bin/k8s-cost-estimator .\n```\n- Test the binary by executing cost estimation in a sample folder:```\n./bin/k8s-cost-estimator \\\u00a0 \u00a0 --k8s ./samples/k8s-cost-estimator-local/app-v1 \u00a0\\\u00a0 \u00a0 --config ./samples/k8s-cost-estimator-local/example-conf.yaml --v trace\n```In the output, you see a [Markdown](https://wikipedia.org/wiki/Markdown) table detailing the monthly estimated costs for the `./samples/k8s-cost-estimator-local/app-v1/` folder. To better understand the monthly production cost of their applications, developers can run this step before pushing to the remote repository.```\nINFO[0000] Starting cost estimation (version v0.0.1)...\n...\n|   KIND   | MIN REQUESTED (USD) | MIN REQ + HPA CPU BUFFER (USD) | MAX REQUESTED (USD) | MIN LIMITED (USD) | MAX LIMITED (USD) |\n|-----------------------|---------------------|--------------------------------|---------------------|-------------------|-------------------|\n| Deployment   |    $133.31 |      $198.71 |    $266.54 |   $312.83 |   $579.29 |\n| StatefulSet   |    $36.33 |       $36.33 |    $36.33 |   $72.67 |   $72.67 |\n| DaemonSet    |    $29.68 |       $29.68 |    $29.68 |   $53.19 |   $53.19 |\n| PersistentVolumeClaim |    $28.88 |       $28.88 |    $28.88 |   $33.68 |   $33.68 |\n| **TOTAL**    |   **$228.20** |     **$293.60** |   **$361.43** |  **$472.38** |  **$738.83** |\nINFO[0002] Finished cost estimation!\n```\n- Build the Kubernetes cost-estimator container image:```\ndocker build . -t us-central1-docker.pkg.dev/$GCP_PROJECT_ID/docker-repo/k8s-cost-estimator:v0.0.1\n```\n- Create the [Artifact Registry](/artifact-registry) Docker repository to store the image:```\ngcloud artifacts repositories create docker-repo \\\u00a0 \u00a0 \u00a0 \u00a0 --repository-format=docker \\\u00a0 \u00a0 \u00a0 \u00a0 --location=us-central1 \\\u00a0 \u00a0 \u00a0 \u00a0 --description=\"Docker repository\"\n```\n- Register `gcloud` as the credential helper to Docker's configuration file. If prompted, confirm the file update.```\ngcloud auth configure-docker us-central1-docker.pkg.dev\n```\n- Push the image to the Artifact Registry:```\ndocker push us-central1-docker.pkg.dev/$GCP_PROJECT_ID/docker-repo/k8s-cost-estimator:v0.0.1\n```\n## Create a new GitHub repository\n- In Cloud Shell, change directories to the GitHub example:```\ncd samples/k8s-cost-estimator-github\n```\n- In GitHub, create an access token: [Go to the GitHub Personal Access Tokens page](https://github.com/settings/tokens/new?scopes=repo,admin:public_key,delete_repo&description=k8s-cost-estimator-token) - In the **Note** field, enter a token description.\n- Under **Select scopes** , select the **repo** , **admin:public_key** , and **delete_repo** checkboxes.\n- Click **Generate token** and copy the **Your new personal access token** value at the top of the page.\n- In Cloud Shell, save your personal access token in a variable.```\nGITHUB_TOKEN=YOUR_NEW_PERSONAL_ACCESS_TOKEN\n```Replace the following:- ``: the personal access token that you just created.\n- Create a GitHub repository:```\ncurl -X POST \\\u00a0 -H \"Accept: application/vnd.github.v3+json\" \\\u00a0 -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\u00a0 https://api.github.com/user/repos \\\u00a0 -d '{\"name\":\"k8s-cost-estimator-github\"}' | jq\n```The output is similar to the following:```\n{\n \"id\": 36099474,\n \"node_id\": \"MDEwOldfsdjA5OTQ3Njc=\",\n \"name\": \"k8s-cost-estimator-github\",\n ...\n}\n```\n- Add the FinOps reviewer as a collaborator in your repository:```\ncurl -X PUT \\\u00a0 -H \"Accept: application/vnd.github.v3+json\" \\\u00a0 -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\u00a0 https://api.github.com/repos/$GITHUB_USER/k8s-cost-estimator-github/collaborators/$GITHUB_FINOPS_REVIEWER_USER \u00a0| jq -r .html_url\n```The output is similar to the following:```\nhttps://github.com/your-user/k8s-cost-estimator-github/invitations\n```\n- Share the output URL with the user you set in the `GITHUB_FINOPS_REVIEWER_USER` variable so that they can accept the invitation. Before continuing to the next step, visit the same URL to make sure the invitation was accepted. \n## Connect Cloud Build to your GitHub repositoryThis section shows you how to install the [Cloud Build GitHub app](https://github.com/marketplace/google-cloud-build) . This installation lets you connect your GitHub repository with your Google Cloud project so that Cloud Build can automatically run the Kubernetes estimator tool at each pull request.- Go to the **GitHub Marketplace** page for the Cloud Build app: [Open Cloud Build](https://github.com/marketplace/google-cloud-build) \n- Set up GitHub account access for the app:- If this is your first time configuring an app in GitHub, click **Setup\nwith Google Cloud Build** at the bottom of the page, and then click **Grant this app access to your GitHub account** .\n- If you've previously set up an app in GitHub, click **Configure access** .\n- In the **Applications** page that opens, follow these steps:- In the Google Cloud Build row, click **Configure** .\n- Select the **Only select repositories** option.\n- Select **k8s-cost-estimator-github** to connect to the repository that you just created.\n- Click **Save** \u2014or **Install** (the button label changes depending on the flow you are executing).\n- You are now redirected to Google Cloud to continue the installation. Sign in with your Google Cloud account. If prompted, authorize Cloud Build integration with GitHub.\n- In the **Cloud Build** page, select your project. A wizard appears.\n- In the **Select repository** section of the wizard, select your GitHub account and the **k8s-cost-estimator-github** repository.\n- If you agree with the terms and conditions, select the checkbox, and then click **Connect** .\n- In the **Create a trigger** section, click **Create a trigger** , and then follow these steps:- Enter a trigger name.\n- In the **Event** section, select **Pull request (GitHub App only)** .\n- In the **Source** section:- Make sure the **Repository** field is auto-filled with **your-github-user/k8s-cost-estimator-github (GitHub App)** .\n- In the **Base Branch** dropdown, select **.*** .\n- In the **Configuration Type** section, select **Cloud Build\nconfiguration file (yaml or json)** .\n- In the **Advanced** section, add the following substitution variables:- **_GITHUB_TOKEN =** ``\n- **_GITHUB_FINOPS_REVIEWER_USER =** ``\n- **_GITHUB_FINOPS_COST_USD_THRESHOLD =** `10`\nReplace the following:- ``: the GitHub personal access token that you created. This token is available in the`GITHUB_TOKEN`variable in Cloud Shell.\n- ``: the user that you invited as a collaborator in your GitHub repository. This username is available in the`GITHUB_FINOPS_REVIEWER_USER`variable in Cloud Shell.\n- Click **Create** .\nThe Cloud Build GitHub app is now configured, and your GitHub repository is linked to your Google Cloud project. Pull requests to your GitHub repository now trigger Cloud Build executions, which report the results back to GitHub using [GitHub Checks](https://developer.github.com/v3/checks/) .## Push the example code to your GitHub repository\n- Create an SSH keypair to allow you to push the sample code to your GitHub repository:```\nmkdir -p ssh && cd sshssh-keygen -t rsa -b 4096 -N '' -f github-keyeval `ssh-agent` && ssh-add $(pwd)/github-keycurl -X POST \\\u00a0 -H \"Accept: application/vnd.github.v3+json\" \\\u00a0 -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\u00a0 https://api.github.com/user/keys \\\u00a0 -d \"{\\\"title\\\":\\\"k8s-cost-estimator-key\\\", \\\"key\\\":\\\"$(cat github-key.pub)\\\"}\" | jqcd ..\n```The output is similar to the following:```\n{\n \"id\": 52356205,\n \"key\": \"ssh-rsa AAAAB3NzaC\u2026.wJICyt0yvWjGFZGCWBPUw==\",\n \"url\": \"https://api.github.com/user/keys/526205\",\n \"title\": \"k8s-cost-estimator-key\",\n \"verified\": true,\n \"created_at\": \"2021-04-23T16:22:58Z\",\n \"read_only\": false\n}\n```\n- Push the content to your new GitHub repository:```\nsed \"s/GCP_PROJECT_ID/$GCP_PROJECT_ID/g; s/GITHUB_USER/$GITHUB_USER/g; s/GITHUB_EMAIL/$GITHUB_EMAIL/g;\" templates/cloudbuild.yaml.tpl > cloudbuild.yamlGITHUB_SSH_URL_REPO=$(curl -X GET \\\u00a0 -H \"Accept: application/vnd.github.v3+json\" \\\u00a0 -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\u00a0 https://api.github.com/repos/$GITHUB_USER/k8s-cost-estimator-github | jq -r .ssh_url)[ -z \"$GITHUB_SSH_URL_REPO\" ] && echo \"GITHUB_SSH_URL_REPO is not exported\" || echo \"GITHUB_SSH_URL_REPO is $GITHUB_SSH_URL_REPO\"git initgit remote add origin $GITHUB_SSH_URL_REPOgit add -A .git commit -m \"Initial commit\"git checkout -b maingit push -u origin main\n```\n## Change the code and create a pull request to test the cost estimation\n- In Cloud Shell, get the GitHub URL to the file `wordpress/wordpress_hpa.yaml` :```\necho \"https://github.com/$GITHUB_USER/k8s-cost-estimator-github/edit/main/wordpress/wordpress_hpa.yaml\"\n```\n- ( for Mac users) the output URL to navigate to GitHub and edit the `wordpress/wordpress_hpa.yaml` file.\n- In GitHub, change `minReplicas` to `5` .\n- Select **Create a new branch for this commit and start a pull request** , and then click **Propose Changes** .\n- In the **Open a pull request** screen, click **Create pull request** .Beyond creating a new pull request, this step triggers a Cloud Build execution based on the `cloudbuild.yaml` file that you created previously. This Cloud Build execution uses the container image that you built in [Building and pushing the Kubernetes cost-estimator image](#building_and_pushing_the_kubernetes_cost_estimator_image) , and it makes the decision when a FinOps reviewer is required.\n- Wait a minute or so for the pipeline to finish. When it finishes, a comment with cost details is added in the pull request, and because the increase in cost of the code you are proposing exceeded the $10 threshold, a FinOps reviewer is also requested.The output is similar to the following: \nYou now know how to give your developers visibility into their spending early in the development cycle. This setup helps you and your organization avoid surprises in your Google Cloud bill.## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this tutorial, you can delete your project.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n### Delete the GitHub repositoryIf you don't want to keep your GitHub repository, follow these steps:- In Cloud Shell, delete your GitHub repository:```\ncurl -X DELETE \\\u00a0 -H \"Accept: application/vnd.github.v3+json\" \\\u00a0 -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\u00a0 https://api.github.com/repos/$GITHUB_USER/k8s-cost-estimator-github\n```If you lose your connection with Cloud Shell, you need to reset the `GITHUB_TOKEN` and `GITHUB_USER` variables.\n## What's next\n- If you use GitLab, take a look at [Estimate your GKE costs early in the development cycle using GitLab](/architecture/estimate-gke-costs-early-using-gitlab) .\n- Learn more about GKE cost optimization in [Best practices for running cost-optimized Kubernetes applications on GKE](/solutions/best-practices-for-running-cost-effective-kubernetes-applications-on-gke) .\n- Find design recommendations and best practices to optimize the cost of Google Cloud workloads in [Google Cloud Architecture Framework: Cost optimization](/architecture/cost-efficiency-on-google-cloud) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Google Kubernetes Engine (GKE)"}