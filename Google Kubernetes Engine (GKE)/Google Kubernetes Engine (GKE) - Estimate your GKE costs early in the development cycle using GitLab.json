{"title": "Google Kubernetes Engine (GKE) - Estimate your GKE costs early in the development cycle using GitLab", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/estimate-gke-costs-early-using-gitlab", "abstract": "# Google Kubernetes Engine (GKE) - Estimate your GKE costs early in the development cycle using GitLab\nThis tutorial demonstrates the best practice of shifting Google Kubernetes Engine (GKE) cost visibility to your development team using GitLab. Creating awareness of costs early in the development process helps you to avoid surprises in your Google Cloud bill. Moving a task or information to an earlier part of a process is sometimes referred to as [shifting left](https://wikipedia.org/wiki/Shift-left_testing) .\nThis tutorial is intended for developers, operators, and [FinOps](https://www.finops.org/) practitioners who want to optimize costs in GKE clusters and who use GitLab in production. If you use GitHub instead, see [Estimate your GKE costs early in the development cycle using GitHub](/kubernetes-engine/docs/tutorials/estimate-gke-costs-early-using-github) .\nThe tutorial assumes that you are familiar with the following technologies:- [Docker](https://www.docker.com/) \n- [GitLab](https://gitlab.com/) \n- [Kubernetes](https://kubernetes.io/) \n- [Cloud Build](/build) \n- GKE\n- Linux\n", "content": "## OverviewMany teams embracing the public cloud are not used to the pay-as-you-go billing style. Frequently, they don't fully understand the environment their apps are running on\u2014in this case, GKE. The FinOps operating model promotes the culture of financial accountability. A FinOps best practice is to provide teams with real-time information about their spending so that cost issues can be addressed when they arise.\nThis document shows you how to go one step further by estimating cost before it becomes an expense in your bill. The best time to estimate costs is early in the process during development and at code review time. This way, practitioners can understand and discuss alternatives for the cost impact of new features and bug fixes before it becomes a problem. The following diagram summarizes such a practice.\n \nAs the diagram shows, developers can estimate GKE costs in their local environment, ideally at build time. This estimate gives them a good understanding of the monthly production workload cost. When the feature or bug fix is code complete, they can propose a [merge request](https://docs.gitlab.com/ee/user/project/merge_requests/) that triggers a [GitLab CI/CD pipeline](https://docs.gitlab.com/ee/ci/pipelines/index.html) to check the difference between the old and the new cost. If there are increases above a predefined threshold, the pipeline automatically requests a new code review. This practice helps developers become more aware of their workload capacity and proactively fix application issues instead of adding more resources each time an instability is found in production.\n **Note:** if you don't have a code review process in place and you don't plan to start one in your organization, you can still implement a similar approach to the one suggested in this document in your continuous integration pipeline.## Objectives\n- Build and push a Kubernetes cost estimator image.\n- Create a new GitLab project.\n- Configure the GitLab runner to run on a GKE cluster.\n- Push the example code to your GitLab repository.\n- Change the code and propose a merge request to see the cost estimation in action.\n## CostsIn this document, you use the following billable components of Google Cloud:- [Artifact Registry](/artifact-registry/pricing) \n- [Cloud Build](/build/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, go to the project selector page. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- Select or create a Google Cloud project. **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project.\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n### Prepare your environment\n- In Cloud Shell, clone the `gke-shift-left-cost` GitHub repository:```\ngit clone https://github.com/GoogleCloudPlatform/gke-shift-left-costcd gke-shift-left-cost\n```The code in this repository is structured into the following folders:- Root: Contains a Dockerfile file that's used to build the cost estimator image and the`main.go`file that implements the command-line logic for the cost estimator.\n- `api/`: Contains the Go API for manipulating Kubernetes objects and making the cost estimation.\n- `samples/`: Contains examples of Kubernetes manifests so that you can experiment with the process before implementing it in your organization.\n- Set your Google Cloud project ID and your GitLab user account and email address:```\nexport GCP_PROJECT_ID=YOUR_PROJECT_IDexport GITLAB_USER=YOUR_GITLAB_USERexport GITLAB_EMAIL=YOUR_GITLAB_EMAIL_ADDRESSgcloud config set project $GCP_PROJECT_IDgcloud services enable cloudbilling.googleapis.com \\\u00a0 \u00a0 compute.googleapis.com \\\u00a0 \u00a0 container.googleapis.com \\\u00a0 \u00a0 iamcredentials.googleapis.com \\\u00a0 \u00a0 artifactregistry.googleapis.comgcloud config set compute/region us-central1gcloud config set compute/zone us-central1-f\n```Replace the following:\n- ``: the Google Cloud project ID for the project that you're using in this tutorial.\n- ``: the user account that you use to log in to your GitLab account.\n- ``: the email that you use in your GitLab account.\nOptionally, you can use [a different region and zone](/compute/docs/regions-zones) for this tutorial.\n### Build and push the Kubernetes cost estimator imageThe Kubernetes cost estimator tool that comes with this tutorial is an example of what can be done. It offers the capability of estimating cost for DaemonSet, Deployment, StatefulSet, ReplicaSet, HorizontalPodAutoScaler, and PersistentVolumeClaim Kubernetes objects. You can also implement your own cost-estimation tool or propose pull requests with the improvements that you want.- In Cloud Shell, allow `application-default` to use your credentials:```\ngcloud auth application-default login\n```\n- Build the Kubernetes cost estimator binary:```\nmkdir ./bingo test ./apigo build -v -o ./bin/k8s-cost-estimator .\n```\n- Test the binary by executing cost estimation in a sample folder:```\n./bin/k8s-cost-estimator \\\u00a0 \u00a0 --k8s ./samples/k8s-cost-estimator-local/app-v1 \u00a0\\\u00a0 \u00a0 --config ./samples/k8s-cost-estimator-local/example-conf.yaml \\\u00a0 \u00a0 --v trace\n```In the output, you see a Markdown table that details the monthly estimated costs for the `./samples/k8s-cost-estimator-local/app-v1/` folder. To better understand the monthly production cost of their applications, developers can run this step before pushing code to the remote repository.```\nINFO[0000] Starting cost estimation (version v0.0.1)...\n...\n|   KIND   | MIN REQUESTED (USD) | MIN REQ + HPA CPU BUFFER (USD) | MAX REQUESTED (USD) | MIN LIMITED (USD) | MAX LIMITED (USD) |\n|-----------------------|---------------------|--------------------------------|---------------------|-------------------|-------------------|\n| Deployment   |    $133.31 |      $198.71 |    $266.54 |   $312.83 |   $579.29 |\n| StatefulSet   |    $36.33 |       $36.33 |    $36.33 |   $72.67 |   $72.67 |\n| DaemonSet    |    $29.68 |       $29.68 |    $29.68 |   $53.19 |   $53.19 |\n| PersistentVolumeClaim |    $28.88 |       $28.88 |    $28.88 |   $33.68 |   $33.68 |\n| **TOTAL**    |   **$228.20** |     **$293.60** |   **$361.43** |  **$472.38** |  **$738.83** |\nINFO[0002] Finished cost estimation!\n```\n- Build the Kubernetes cost estimator container image:```\ndocker build . -t \\us-central1-docker.pkg.dev/$GCP_PROJECT_ID/docker-repo/k8s-cost-estimator:v0.0.1\n```\n- Create the [Artifact Registry](/artifact-registry) Docker repository to store the image:```\ngcloud artifacts repositories create docker-repo \\\u00a0 \u00a0 \u00a0 \u00a0 --repository-format=docker \\\u00a0 \u00a0 \u00a0 \u00a0 --location=us-central1 \\\u00a0 \u00a0 \u00a0 \u00a0 --description=\"Docker repository\"\n```\n- Register `gcloud` as the credential helper to the Docker configuration file.```\ngcloud auth configure-docker us-central1-docker.pkg.dev\n```If prompted, confirm the file update.\n- Push the image to Artifact Registry:```\ndocker push us-central1-docker.pkg.dev/$GCP_PROJECT_ID/docker-repo/k8s-cost-estimator:v0.0.1\n```\n### Create a new GitLab project\n- In Cloud Shell, change the directory to the GitLab example:```\ncd samples/k8s-cost-estimator-gitlab\n```\n- On the GitLab **Personal access tokens** page, create an access token: [Go to the GitLab personal access tokens page](https://gitlab.com/-/profile/personal_access_tokens) - In the **Name** field, enter the name for the token you're creating.\n- In the **Scope** field, select **api** , and then click **Create personal\naccess token** .\n- Copy the **Your new personal access token** value.\n- In Cloud Shell, save your personal access token in a variable:```\nGITLAB_API_TOKEN=YOUR_NEW_PERSONAL_ACCESS_TOKEN\n```Replace `` with the GitLab personal access token that you created.\n- Create a new GitLab project:```\nGITLAB_PROJECT_OUTPUT=$(curl -X POST -H \"content-type:application/json\" -H \"PRIVATE-TOKEN:$GITLAB_API_TOKEN\" -d '{\"name\":\"k8s-cost-estimator-gitlab\",\"visibility\":\"public\"}' \u00a0 \u00a0 \u00a0 \u00a0https://gitlab.com/api/v4/projects)GITLAB_PROJECT_ID=$(echo $GITLAB_PROJECT_OUTPUT | jq \".id\")GITLAB_FINOPS_REVIEWER_ID=$(echo $GITLAB_PROJECT_OUTPUT | jq \".owner.id\")\n```\n- Set the variables for the cost estimator tool to use when a merge request is created:```\ncurl -X POST -H \"content-type:application/json\" -H \"PRIVATE-TOKEN:$GITLAB_API_TOKEN\" -d \"{\\\"key\\\": \\\"GITLAB_API_TOKEN\\\",\\\"value\\\": \\\"$GITLAB_API_TOKEN\\\", \\\"masked\\\":\\\"true\\\"}\" https://gitlab.com/api/v4/projects/$GITLAB_PROJECT_ID/variablescurl -X POST -H \"content-type:application/json\" -H \"PRIVATE-TOKEN:$GITLAB_API_TOKEN\" -d \"{\\\"key\\\": \\\"GITLAB_FINOPS_REVIEWER_ID\\\",\\\"value\\\": \\\"$GITLAB_FINOPS_REVIEWER_ID\\\"}\" https://gitlab.com/api/v4/projects/$GITLAB_PROJECT_ID/variablescurl -X POST -H \"content-type:application/json\" -H \"PRIVATE-TOKEN:$GITLAB_API_TOKEN\" -d \"{\\\"key\\\": \\\"GITLAB_FINOPS_COST_USD_THRESHOLD\\\",\\\"value\\\": \\\"10\\\"}\" https://gitlab.com/api/v4/projects/$GITLAB_PROJECT_ID/variables\n```\n- Confirm that your project and variables were created:```\ncurl -s --header \"PRIVATE-TOKEN:$GITLAB_API_TOKEN\" \\https://gitlab.com/api/v4/projects/$GITLAB_PROJECT_ID/variables | jq\n```The output is similar to the following:```\n[ {\n \"variable_type\": \"env_var\",\n \"key\": \"GITLAB_API_TOKEN\",\n \"value\": \"Ex...n1\",\n \"protected\": false,\n \"masked\": true,\n \"environment_scope\": \"*\"\n },\n {\n \"variable_type\": \"env_var\",\n \"key\": \"GITLAB_FINOPS_REVIEWER_ID\",\n \"value\": \"88..87\",\n \"protected\": false,\n \"masked\": false,\n \"environment_scope\": \"*\"\n },\n {\n \"variable_type\": \"env_var\",\n \"key\": \"GITLAB_FINOPS_COST_USD_THRESHOLD\",\n \"value\": \"10\",\n \"protected\": false,\n \"masked\": false,\n \"environment_scope\": \"*\"\n }\n]\n```The variables configured in your GitLab project are used by the `./samples/k8s-cost-estimator-gitlab/templates/.gitlab-ci.yml.tpl` file to update merge requests and are as follows:- ``: Your GitLab personal access token.\n- ``: The code reviewer required whenever the cost increases above a given threshold. For simplicity, this tutorial sets your own user ID as the reviewer. However, in a production environment, we recommend that you configure a team instead of an individual person.\n- ``: The threshold in USD, in this case $10. When the difference between old and new costs passes this threshold, an extraordinary approval is enforced. You can also set thresholds for other values. To explore this feature, you can append the`--output`parameter when you execute the`./bin/k8s-cost-estimator`command in [Building and pushing the Kubernetes cost estimator image](#building-and-pushing-the-kubernetes-cost-estimator-image) . This parameter generates a file with a`.diff`extension that lets you view the available options.\n### Configure GitLab runner to run on a GKE clusterIn this section, you install the GitLab runner in your own GKE cluster with [Workload Identity](/kubernetes-engine/docs/how-to/workload-identity) to allow the Kubernetes estimator tool to query Google Cloud Price Catalog. The estimator uses gross prices and doesn't take into account [preemptible VMs](/preemptible-vms) or any discounts.- In Cloud Shell, create a GKE cluster:```\ngcloud beta container clusters create gitlab-runners \\\u00a0 \u00a0 --enable-ip-alias \\\u00a0 \u00a0 --release-channel=stable \\\u00a0 \u00a0 --workload-pool=$GCP_PROJECT_ID.svc.id.goog \\\u00a0 \u00a0 --enable-autoprovisioning --min-cpu 1 --min-memory 1 --max-cpu 4 --max-memory 16 \\\u00a0 \u00a0 --autoscaling-profile=optimize-utilization \\\u00a0 \u00a0 --preemptible\n```\n- Get the GitLab runner registration token from the project that you created:```\nexport GITLAB_RUNNER_TOKEN=$(curl -s --header \"PRIVATE-TOKEN:$GITLAB_API_TOKEN\" https://gitlab.com/api/v4/projects/$GITLAB_PROJECT_ID | jq -r '.runners_token')[ -z \"$GITLAB_RUNNER_TOKEN\" ] && echo \"GITLAB_RUNNER_TOKEN is not exported\" || echo \"GITLAB_RUNNER_TOKEN is $GITLAB_RUNNER_TOKEN\"\n```\n- Install the GitLab runner in your GKE cluster:```\nkubectl create namespace gitlabhelm repo add gitlab https://charts.gitlab.iosed \"s/GCP_PROJECT_ID/$GCP_PROJECT_ID/g; s/GITLAB_RUNNER_TOKEN/$GITLAB_RUNNER_TOKEN/g\" templates/gitlab-runner-values.yaml.tpl > gitlab-runner-values.yamlhelm install --namespace gitlab --version 0.24.0 gitlab-runner -f gitlab-runner-values.yaml gitlab/gitlab-runnerkubectl -n gitlab wait --for=condition=available deployment gitlab-runner --timeout=5mgcloud iam service-accounts create gitlab-runner --display-name=gitlab-runnergcloud iam service-accounts add-iam-policy-binding \\\u00a0 \u00a0 --role roles/iam.workloadIdentityUser \\\u00a0 \u00a0 --member \"serviceAccount:$GCP_PROJECT_ID.svc.id.goog[gitlab/gitlab-runner]\" \\\u00a0 \u00a0 gitlab-runner@$GCP_PROJECT_ID.iam.gserviceaccount.com\n```\n- Disable [shared runners](https://docs.gitlab.com/ee/user/gitlab_com/#shared-runners) in your GitLab project:```\ncurl -s --header \"PRIVATE-TOKEN: ${GITLAB_API_TOKEN}\" -X PUT \"https://gitlab.com/api/v4/projects/$GITLAB_PROJECT_ID\" --form \"shared_runners_enabled=false\"\n```\n- Verify that the runner that you deployed is enabled in your GitLab project:```\ncurl -s --header \"PRIVATE-TOKEN: ${GITLAB_API_TOKEN}\" \"https://gitlab.com/api/v4/projects/$GITLAB_PROJECT_ID/runners?status=active\" | jq '.[] | select(.is_shared==false)'\n```The output is similar to the following:```\n{\n \"id\": 49345561,\n \"description\": \"gitlab-runner-gitlab-runner-788459d488-jlscn\",\n \"ip_address\": \"35.178.223.199\",\n \"active\": true,\n \"is_shared\": false,\n \"name\": \"gitlab-runner\",\n \"online\": true,\n \"status\": \"online\"\n}\n```\n### Push the example code to your GitLab repository\n- Create an SSH key pair to push the sample code to your GitLab repository:```\nmkdir -p ssh && cd sshssh-keygen -t rsa -b 4096 -N '' -f gitlab-keyeval `ssh-agent` && ssh-add $(pwd)/gitlab-keycurl -s --request POST --header \"PRIVATE-TOKEN:$GITLAB_API_TOKEN\" https://gitlab.com/api/v4/user/keys --form \"title=k8s-cost-estimator-key\" --form \"key=$(cat gitlab-key.pub)\"cd ..\n```\n- Push the content to your new GitLab repository:```\nsed \"s/GCP_PROJECT_ID/$GCP_PROJECT_ID/g; s/GITLAB_USER/$GITLAB_USER/g; s/GITLAB_EMAIL/$GITLAB_EMAIL/g;\" templates/.gitlab-ci.yml.tpl > .gitlab-ci.ymlGITLAB_SSH_URL_REPO=$(curl -s --header \"PRIVATE-TOKEN:$GITLAB_API_TOKEN\" https://gitlab.com/api/v4/users/$GITLAB_FINOPS_REVIEWER_ID/projects | jq '.[] | select(.name==\"k8s-cost-estimator-gitlab\")' | jq -r '.ssh_url_to_repo')[ -z \"$GITLAB_SSH_URL_REPO\" ] && echo \"GITLAB_PROJECT_SSH_URL is not exported\" || echo \"GITLAB_PROJECT_SSH_URL is $GITLAB_SSH_URL_REPO\"git config --global user.email $GITLAB_EMAILgit config --global user.name $GITLAB_USERgit initgit remote add origin $GITLAB_SSH_URL_REPOgit add -A .git commit -m \"Initial commit\"git checkout -b maingit push -u origin main\n```\n### Change the code and propose a merge request to see the cost estimation in action\n- In Cloud Shell, get the URL for the [GitLab Web IntegratedDevelopment Environment (IDE)](https://docs.gitlab.com/ee/user/project/web_ide/) :```\necho \"https://gitlab.com/-/ide/project/$GITLAB_USER/k8s-cost-estimator-gitlab/tree/main/-/wordpress/wordpress_hpa.yaml\"\n```\n- Ctrl + click (Cmd + click on macOS) the output URL to navigate to the GitLab Web IDE.\n- In the GitLab Web IDE, edit the `./wordpress/wordpress_hpa.yaml` file as follows:- Change the`minReplicas`value from`2`to`5`.\n- Click **Commit** .\n- As shown in the following screenshot, select **Create a new branch** and **Start a new merge request** , and then click **Commit** .\n- On the **New merge request** screen, click **Create merge request** at the bottom of the page.In addition to creating a new merge request, this step triggers a cost estimation pipeline based on the `.gitlab-ci.yml` file. This pipeline uses the container image that you created in [a previous section](#building-and-pushing-the-kubernetes-cost-estimator-image) . This pipeline also determines when a FinOps approval is required. For simplicity, `.gitlab-ci.yml` adds approvals for each merge request base, but you can define and reuse [approvals rules defined at GitLab project level](https://docs.gitlab.com/ee/user/project/merge_requests/merge_request_approvals.html) .\n- Wait about a minute for the pipeline to finish. When it finishes, a comment with cost details is added in the merge request. Because the increase in cost of the code that you're proposing exceeds the $10 threshold, a FinOps reviewer is also requested.The output is similar to the following:In this tutorial, the default configuration is used for merge request approvals. It's possible to select different configurations for your merge requests in Gitlab. For example, to prevent the author from approving merge requests, you go to **Settings** > **General** > **Merge request (MR)approvals** > **Approval settings** .\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this tutorial, you can delete your project.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n### Delete the GitLab projectIf you don't want to keep your GitLab project, do the following:- In Cloud Shell, delete your GitLab project:```\n\u00a0curl -X DELETE -H \"content-type:application/json\" -H \"PRIVATE-TOKEN:$GITLAB_API_TOKEN\" https://gitlab.com/api/v4/projects/$GITLAB_PROJECT_ID```\u00a0The output is similar to the following:\u00a0```none {:.devsite-disable-click-to-copy}\u00a0{\"message\":\"202 Accepted\"}\n```If you lose your connection with Cloud Shell, you must set the following variables again:- ``\n- ``## What's next\n- Learn more about GKE cost optimization in [Best practices for running cost-optimized Kubernetes applications on GKE](/solutions/best-practices-for-running-cost-effective-kubernetes-applications-on-gke) .\n- Read about how to [estimate your GKE costs early in the development cycle using GitHub](/architecture/estimate-gke-costs-early-using-github) .\n- Find design recommendations and best practices to optimize the cost of Google Cloud workloads in [Google Cloud Architecture Framework: Cost optimization](/architecture/cost-efficiency-on-google-cloud) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Google Kubernetes Engine (GKE)"}