{"title": "Google Kubernetes Engine (GKE) - Configure multidimensional Pod autoscaling", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/multidimensional-pod-autoscaling", "abstract": "# Google Kubernetes Engine (GKE) - Configure multidimensional Pod autoscaling\n**    Beta     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nMultidimensional Pod autoscaling frees you from choosing a single way to scale your clusters. With multidimensional Pod autoscaling, you can use [horizontal scaling](/kubernetes-engine/docs/concepts/horizontalpodautoscaler) based on CPU and [vertical scaling](/kubernetes-engine/docs/concepts/verticalpodautoscaler) based on memory at the same time.\nA `MultidimPodAutoscaler` object modifies memory requests and adds replicas so that the average CPU utilization of each replica matches your target utilization.\n", "content": "## Prerequisites\n- GKE cluster version 1.19.4-gke.1700 or later.\n- For Standard clusters, [enable vertical Pod autoscaling in your cluster](/kubernetes-engine/docs/how-to/vertical-pod-autoscaling) . Vertical Pod autoscaling is already enabled in [Autopilot](/kubernetes-engine/docs/concepts/autopilot-overview) clusters.## Using multidimensional Pod autoscaling\nThis example shows you how to create a Deployment and a `MultidimPodAutoscaler` object to autoscale your Deployment.\n### Creating a Deployment\nBefore you can create a `MultidimPodAutoscaler` , you must create the workload it monitors. The following file, `php-apache.yaml` , specifies a value for the CPU requests:\n```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: php-apachespec:\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 run: php-apache\u00a0 replicas: 1\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 run: php-apache\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: php-apache\u00a0 \u00a0 \u00a0 \u00a0 image: us-docker.pkg.dev/google-samples/containers/gke/hello-app:1.0\u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 - containerPort: 80\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 # Since MPA does not specify CPU requests, you must specify a request in\u00a0 \u00a0 \u00a0 \u00a0 # the Deployment\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 limits:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 500m\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 200m\n```\nTo create the Deployment, apply the `php-apache.yaml` manifest:\n```\nkubectl apply -f php-apache.yaml\n```\n### Creating a MultidimPodAutoscaler\nOnce you have created the Deployment, you can create a `MultidimPodAutoscaler` object. The following `MultidimPodAutoscaler` manifest automatically adjusts the number of replicas and memory requests based on the values you specify.\nFor more information on the fields in this example, see the [API reference](#api) section.\n```\napiVersion: autoscaling.gke.io/v1beta1kind: MultidimPodAutoscalermetadata:\u00a0 name: php-apache-autoscalerspec:\u00a0 scaleTargetRef:\u00a0 \u00a0 apiVersion: apps/v1\u00a0 \u00a0 kind: Deployment\u00a0 \u00a0 name: php-apache\u00a0 goals:\u00a0 \u00a0 metrics:\u00a0 \u00a0 - type: Resource\u00a0 \u00a0 \u00a0 resource:\u00a0 \u00a0 \u00a0 # Define the target CPU utilization request here\u00a0 \u00a0 \u00a0 \u00a0 name: cpu\u00a0 \u00a0 \u00a0 \u00a0 target:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: Utilization\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 averageUtilization: 60\u00a0 constraints:\u00a0 \u00a0 global:\u00a0 \u00a0 \u00a0 minReplicas: 1\u00a0 \u00a0 \u00a0 maxReplicas: 5\u00a0 \u00a0 containerControlledResources: [ memory ]\u00a0 \u00a0 container:\u00a0 \u00a0 - name: '*'\u00a0 \u00a0 # Define boundaries for the memory request here\u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 minAllowed:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memory: 1Gi\u00a0 \u00a0 \u00a0 \u00a0 maxAllowed:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memory: 2Gi\u00a0 policy:\u00a0 \u00a0 updateMode: Auto\n```\nTo create the `MultidimPodAutoscaler` , apply the `php-apache-autoscaler.yaml` manifest:\n```\nkubectl apply -f php-apache-autoscaler.yaml\n```\n## Viewing a MultidimPodAutoscaler\nView all `MultidimPodAutoscaler` objects by using the `kubectl get` command:\n```\nkubectl get mpa\n```\n## Deleting a MultidimPodAutoscaler\nDelete a `MultidimPodAutoscaler` object by using the `kubectl delete` command:\n```\nkubectl delete -f php-apache-autoscaler.yaml\n```\n## API reference\nThe following sections provide information on the possible fields you can add to your `MultidimPodAutoscaler` object.\nAll fields are for `apiVersion` `v1beta1 autoscaling.gke.io` .\n### MultidimPodAutoscaler\n`MultidimPodAutoscaler` is the configuration for a multidimensional Pod autoscaler, which automatically manages Pod resources and their count based on historical and real-time resource utilization.\n| Field | Type      | Description                |\n|:---------|:----------------------------|:--------------------------------------------------------------------------|\n| metadata | ObjectMeta     | Standard object metadata.             |\n| spec  | MultidimPodAutoscalerSpec | The desired behavior of the multidimensional Pod autoscaler.    |\n| status | MultidimPodAutoscalerStatus | The most recently observed status of the multidimensional Pod autoscaler. |\n### MultidimPodAutoscalerSpec\n`MultidimPodAutoscalerSpec` is the specification that defines the behavior of the autoscaler.\n| Field   | Type         | Description                                                             |\n|:---------------|:----------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ScaleTargetRef | autoscaling.CrossVersionObjectReference | A reference that points to a target resource to scale (with the Scale subresource).                                           |\n| Goals   | *MultidimGoals       | Goals that the multidimensional Pod autoscaler tries to achieve and maintain.                                             |\n| Constraints | *MultidimConstraints     | Describes the constraints for autoscaling. Constraints outweigh goals. If constraints block some goal, then the goal will not be reached. For example, reaching the maximum replica count prevents further scale up even if the replicas might need to scale. |\n| Policy   | *MultidimPolicy       | Policy allows you to specify how the recommendations are applied.                                                |\n### MultidimGoals\n`MultidimGoals` are goals that the multidimensional Pod autoscaler tries to achieve.\n| Field | Type   | Description                               |\n|:--------|:-------------|:--------------------------------------------------------------------------------------------------------------------------------------|\n| Metrics | []MetricSpec | Contains the list of metrics along with the desired value. Multidimensional Pod autoscaler tries to stay close to the desired values. |\n### MultidimConstraints\n`MultidimConstraints` describe the constraints for autoscaling. Constraints take precedence over goals.\n| Field      | Type     | Description                       |\n|:-----------------------------|:-----------------------|:-----------------------------------------------------------------------------------------------------|\n| Global      | *GlobalConstraints  | Constraints that apply to the autoscaled application as a whole.          |\n| Pod       | *PodConstraints  | Constraints that apply to a single Pods from the targeted application.        |\n| ContainerControlledResources | []ResourceName   | Container Resources that should be controlled by the autoscaler. memory is the only supported value. |\n| Container     | []ContainerConstraints | Constraints that apply to Pods' containers.               |\n### ResourceConstraints\n`ResourceConstraints` define the minimum and maximum amount of resources that you can assign to a container, Pod, or application.\n| Field  | Type   | Description                            |\n|:-----------|:-------------|:--------------------------------------------------------------------------------------------------------------------------|\n| MinAllowed | ResourceList | Minimum amount of resources that you can assign. If not provided, 0 is used.            |\n| MaxAllowed | ResourceList | Maximum amount of resources that you can assign. If not provided, there are no limits on the maximum amount of resources. |\n### GlobalConstraints\n`GlobalConstraints` define the constraints which apply to the application altogether. These constraints include the number of replicas or the total amount of resources.\n| Field  | Type     | Description                              |\n|:------------|:---------------------|:----------------------------------------------------------------------------------------------------------------------------------|\n| MinReplicas | *Int32    | Minimum amount of replicas that the application can have. If not provided, 1 is used.            |\n| MaxReplicas | *Int32    | Maximum amount of replicas that the application can have. If not provided, there are no limits on the maximum amount of replicas. |\n| Requests | *ResourceConstraints | Minimum and maximum amount of resources that an application can request, summed across all pods.         |\n### PodConstraints\n`PodConstraints` define the minimum and maximum amount of resources that a single Pod can request, summed across all containers that belong to the Pod.\n| Field | Type     | Description                             |\n|:---------|:---------------------|:----------------------------------------------------------------------------------------------------------------------------|\n| Requests | *ResourceConstraints | Minimum and maximum amount of resources that a single Pod can request, summed across all containers that belong to the Pod. |\n### ContainerConstraints\n`ContainerConstraints` are constraints that apply to Pods' containers.\n| Fields | Type     | Description                               |\n|:---------|:---------------------|:--------------------------------------------------------------------------------------------------------------------------------------|\n| Name  | String    | Name of the container for which the constraints are specified. You can also use * to specify constraints for all containers in a Pod. |\n| Requests | *ResourceConstraints | Minimum and maximum amount of resources that the specified container can request.              |\n### UpdateMode\nUse `UpdateMode` to control how the calculated recommendations are applied.\n| Fields  | Type    | Description                  |\n|:------------|:--------------------|:----------------------------------------------------------------------------------|\n| AutoUpdates | UpdateMode = \"Auto\" | AutoUpdates means that all autoscaler recommendations can be applied at any time. |\n| AutoUpdates | UpdateMode = \"Off\" | AutoUpdates means that autoscaler recommendations are not applied at all.   |\n### MultidimPolicy\n| Fields | Type  | Description                   |\n|:---------|:-----------|:------------------------------------------------------------------------------------|\n| Update | UpdateMode | Defines how the recommendations should be applied. An empty value fails validation. |\n### MultidimPodAutoscalerStatus\n`MultidimPodAutoscalerStatus` describes the runtime state of the autoscaler.\n| Fields     | Type      | Description                                 |\n|:------------------------|:---------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------|\n| ObservedGeneration  | *Int64      | The most recently generation observed by this autoscaler.                     |\n| RecommendedPodResources | *RecommendedPodResources | The most recently computed amount of resources recommended by the autoscaler for the controlled Pods.          |\n| CurrentReplicas   | Int32      | CurrentReplicas is the current number of replicas of Pods managed by this autoscaler, as last seen by the autoscaler.      |\n| DesiredReplicas   | Int32      | DesiredReplicas is the desired number of replicas of Pods managed by this autoscaler, as last calculated by the autoscaler.     |\n| CurrentMetrics   | []autoscaling.MetricStatus | The last read state of the metrics used by this autoscaler.                     |\n| Conditions    | []metav1.Condition   | Conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met. |\n## What's next\n- Learn more about configuring [horizontal Pod autoscaling](/kubernetes-engine/docs/how-to/horizontal-pod-autoscaling) .\n- Learn more about configuring [vertical Pod autoscaling](/kubernetes-engine/docs/how-to/vertical-pod-autoscaling) .", "guide": "Google Kubernetes Engine (GKE)"}