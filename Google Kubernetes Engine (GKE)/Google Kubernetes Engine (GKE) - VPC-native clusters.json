{"title": "Google Kubernetes Engine (GKE) - VPC-native clusters", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/alias-ips", "abstract": "# Google Kubernetes Engine (GKE) - VPC-native clusters\nThis page provides a general overview of VPC-native clusters in Google Kubernetes Engine (GKE).\n", "content": "## Overview\nIn GKE, clusters can be distinguished according to the way they route traffic from one Pod to another Pod.\nA cluster that uses [alias IP address ranges](/vpc/docs/alias-ip) is called a .\nA cluster that uses [custom static routes in a VPCnetwork](/vpc/docs/routes) is called a .\nFor GKE Autopilot clusters, VPC-native traffic routing is enabled by default.\n### Benefits of VPC-native clusters\nVPC-native clusters have several benefits:\n- [Pod](https://kubernetes.io/docs/concepts/workloads/pods) IP addresses are natively routable within the cluster's VPC network and other VPC networks connected to it by [VPC Network Peering](/vpc/docs/vpc-peering) .\n- Pod IP addresses are reserved in the VPC network the Pods are created in your cluster. This prevents conflict with other resources in the VPC network and allows you to better plan IP address allocations.\n- Pod IP address ranges do not depend on custom static routes. They do not consume the [system-generated and custom static routes quota](/vpc/docs/quota) . Instead, automatically-generated [subnet routes](/vpc/docs/routes#subnet-routes) handle routing for VPC-native clusters.\n- You can create [firewall rules](/vpc/docs/firewalls) that apply to just Pod IP address ranges instead of any IP address on the cluster's nodes.\n- Pod IP address ranges, and subnet secondary IP address ranges in general, are accessible from on-premises networks connected with Cloud VPN or Cloud Interconnect using [Cloud Routers](/network-connectivity/docs/router) .\n- Some features, such as [network endpoint groups (NEGs)](/load-balancing/docs/negs) , only work with VPC-native clusters.## Default cluster network mode\nVPC-native is the default network mode for all clusters in GKE versions 1.21.0-gke.1500 and later. For earlier versions, the default cluster network mode depends on how you create the cluster.\nThe following table lists the default cluster network mode for GKE cluster versions and cluster creation methods.\n| GKE versions     | Cluster creation method     | Cluster network mode |\n|:-----------------------------|:-------------------------------------------|:-----------------------|\n| All versions     | The Google Cloud console     | VPC-native    |\n| 1.21.0-gke.1500 and later | Kubernetes Engine API or Google Cloud CLI | VPC-native    |\n| Earlier than 1.21.0-gke.1500 | Kubernetes Engine API or Google Cloud CLI | Routes-based   |\nYou can also create a routes-based cluster by specifying the `--no-enable-ip-alias` flag when you create the cluster.\n## IP address ranges for VPC-native clusters\nWhen you create a VPC-native cluster, you specify a subnet in a VPC network. The cluster uses the following [subnet IP addressranges](/vpc/docs/subnets#manually_created_subnet_ip_ranges) :\n**IPv4 address allocation**\nVPC-native clusters allocate IPv4 addresses for nodes, Pods, and Services using distinct ranges within the specified subnet as follows.\n- **Node IP addresses** : The cluster utilizes the subnet's primary IPv4 address range to assign IP addresses to all nodes.\n- **Pod IP addresses** : The cluster utilizes the secondary IPv4 address range within the subnet for all Pod IPv4 addresses within the cluster. For enhanced flexibility, you can use additional subnet secondary IPv4 address ranges by configuring [discontiguous multi-PodCIDR](/kubernetes-engine/docs/how-to/multi-pod-cidr) .\n- **Service IP addresses** : The cluster utilizes a separate secondary IP address range for all Service (cluster IP) addresses. For information on enabling multiple clusters to share the same Services IPv4 range, refer to [Sharing IP address ranges across GKEclusters](/kubernetes-engine/docs/concepts/alias-ips#sharing_ip_address) .\n**IPv6 address allocation (dual-stack networking)**\n- **Node and Pod IPv6 addresses** : In clusters enabled for dual-stack networking, the node's IPv6 address and all Pod IPv6 addresses originate from the node's designated`/96`IPv6 address range. The node IP address itself is the first`/128`(single IPv6 address) within this range. For more information, see [dual-stack networking](#dual_stack_network) .\nThe following table provides a summary of IP address ranges for nodes, Pods, and Services:\n| Range | Explanation                                                                                                                                       | Example                                                                                                               |\n|:---------||:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Nodes | Node IP addresses are assigned from the primary IP address range of the subnet associated with your cluster. Both node IP addresses and the size of the subnet's secondary IP address range for Pods limit the number of nodes that a cluster can support. Refer to node limiting ranges for more information.                                                              | If you plan to create a 900-node cluster, the primary IP address range of the cluster's subnet must be at least a /22 (2(32-22) = 210 = 1,024 addresses). Of those 1,024 addresses, 1,020 are usable because four IP addresses are reserved in every primary IP address range. Refer to Subnet primary IP address range and Subnet secondary IP address range for Pods for more information.               |\n| Pods  | Pod IP addresses are taken from the cluster subnet's secondary IP address range for Pods. Unless you set a different maximum number of Pods per node, GKE allocates a /24 alias IP range (256 addresses) to each node for the Pods running on it. On each node, those 256 alias IP addresses are used to support up to 110 Pods.                                                         | For a 900-node cluster supporting up to 110 Pods per node, you need 900 \u00d7 256 = 230,400 IP addresses for Pods. (Each node is allocated an alias IP range whose netmask's size is /24.) This cluster requires a subnet whose secondary IP range for Pods has a subnet mask no larger than /14. This secondary IP range provides 2(32-14) = 218 = 262,144 IP addresses for Pods. Refer to Subnet secondary IP address range for Pods for more information. |\n| Services | Service (cluster IP) addresses are taken from the cluster's subnet's secondary IP address range for Services. You must ensure this range is large enough to provide addresses for all the Kubernetes Services you host in your cluster. In new Autopilot clusters running GKE version 1.27 and later, GKE assigns IP addresses for GKE Services from a Google-managed range: 34.118.224.0/20 by default. This eliminates the need for you to specify your own IP address range for Services. For details, see Subnet secondary IP address range for Services. | For a cluster that runs up to 3000 Services, you need 3000 cluster IP addresses. You need a secondary range of size /20 or larger. A /20 range of IP addresses results in 2(32-20) = 212 = 4,096 IP addresses. Refer to Subnet secondary IP address range for Services for more information.                                        |\n### Internal IP addresses\nThe IP addresses you use for your VPC-native cluster's subnets must come from a valid subnet range. The valid ranges include private IP addresses ( [RFC 1918](https://tools.ietf.org/html/rfc1918) and others) and privately used public IP addresses. See [Valid ranges](/vpc/docs/subnets#valid-ranges) and [Restricted ranges](/vpc/docs/subnets#restricted-ranges) in the VPC documentation for more information about valid subnet ranges.\nSee [Using non-RFC 1918 private IP address ranges](/kubernetes-engine/docs/how-to/alias-ips#enable_reserved_ip_ranges) for instructions on enabling the use of these ranges.\nSee [Enable privately used public IP address ranges](/kubernetes-engine/docs/how-to/alias-ips#enable_pupis) for instructions on the use of these ranges.\n### Secondary range assignment methods\nYou can assign Pod IP address ranges and Service ( `ClusterIP` ) address ranges to a VPC-native cluster. These IP address ranges can be managed by GKE or user-managed.\nYou must understand the following key terms to understand the secondary range assignment methods.\n**Assignment** : assigning IP address ranges refers to the process of allocating a specific subnet range to a VPC-native cluster. This establishes a pool of IP addresses that the components can use within the cluster, such as Pods and Services.\n**Management** : Managing the IP address range refers to the ongoing (creation, update, deletion, reading) CRUD operations at the cluster, node pool, or Pod level, related to the assigned subnet ranges and resource allocation within your VPC-native cluster.\nBy default, GKE assigns and manages IP addresses for your VPC-native clusters. When you create a cluster, you need not create a subnet. You can define a CIDR range or the size of a netmask for both the Pods and Services. GKE handles creating and managing the subnet ranges. For example, you can specify `10.1.0.0/16` for Pods and `10.2.0.0/20` for Services, or you can specify `/16` for Pods and `/20` for Services.\nFor Autopilot clusters running GKE 1.27 and later, GKE assigns Service IP addresses from a Google-managed range by default `34.118.224.0/20` , eliminating the need to specify your own range for Services. The following considerations apply:\n- You can optionally specify custom ranges for Services by using the`--services-ipv4-cidr`flag.\n- If you specify only a rangeusing the`--services-ipv4-cidr`flag (for example,`/22`), GKE still uses the Google-managed range to obtain the sub-range of addresses.\n- GKE doesn't create a separate secondary IP address range for Services when the Google-managed range is used.For full control over IP address allocation, you can manually manage your VPC-native cluster's subnets.\nYou can [create the subnet's secondary IP addressranges](/vpc/docs/create-modify-vpc-networks#edit-secondary) , then create a cluster that uses those ranges. During cluster creation, specify the subnet range name for Pods and Services. If you manually create the secondary ranges, you must manage them yourself.\n**Caution:** User-managed ranges lets you use smaller subnet secondary ranges than is possible when using ranges managed by GKE. Use caution when creating Pod address ranges smaller than a /21 as you could run out of Pod IP addresses as your cluster grows.\nThe smallest IP address range you can create without using [discontiguousmulti-Pod CIDR](/kubernetes-engine/docs/how-to/multi-pod-cidr) is /28, but that range would only let you create 1 node with a maximum of 8 Pods. You should use a range that is large enough for the maximum number of nodes that you need. The minimum usable range also depends on the [maximum number of Pods perNode](/kubernetes-engine/docs/how-to/flexible-pod-cidr#configuring_maximum_pods_per_node) .\nRefer to the table in [Optimizing IP addressallocation](/kubernetes-engine/docs/how-to/flexible-pod-cidr#overview) for the minimum usable CIDR range for different values of Maximum Pods per Node.\nIf you exhaust your IP address range for Pods, you must do one of the following:\n- Create a new cluster with a larger Pod address range.\n- Re-create your node pools after decreasing the [--max-pods-per-node](/kubernetes-engine/docs/how-to/flexible-pod-cidr#setting_the_maximum_number_of_pods_in_a_new_node_pool_for_an_existing_cluster) for the node pools.\n- Expand the secondary Pod IP address range using [discontiguous multi-PodCIDR](/kubernetes-engine/docs/how-to/multi-pod-cidr) .The allocation scheme for Pod and Service (ClusterIP) addresses is different than the scheme used by a routes-based cluster. Instead of specifying a single CIDR for Pods and Services together, you must choose or create two secondary IP address ranges in cluster's subnet: one for Pods and another for Services.\n### Shared VPC considerations\nWhen creating a VPC-native cluster in a [Shared VPC](/vpc/docs/shared-vpc) environment, a project owner, editor, or Identity and Access Management (IAM) principal with the Network Admin role in the Shared VPC host project must create the cluster's subnet and secondary IP address ranges manually. A service project admin who creates a cluster must at least have [subnet-level permissions](/vpc/docs/shared-vpc#svc_proj_admins) to the subnet in the Shared VPC network's host project.\nIn a Shared VPC environment, secondary IP address ranges cannot be managed by GKE. A Network Admin in the Shared VPC host project must create the subnet and secondary IP address ranges before you can create the cluster. For an example showing how to set up a VPC-native cluster in a Shared VPC network, refer to [Setting up clusters with Shared VPC](/kubernetes-engine/docs/how-to/cluster-shared-vpc) .\n## IP address range planning\nUse the information in the following sections to help you calculate sizes for primary and secondary IP address ranges of the subnet used by your cluster.\n### Subnet primary IP address range\nEvery subnet must have a primary IP address range. This is the IP address range that GKE uses to allocate IP addresses for internal load balancers and nodes.\nYou cannot shrink or change a subnet's primary IP address range after the subnet has been created.\nThe first two and last two IP addresses of a primary IP address range are reserved by Google Cloud.\nThe following table shows the maximum number of nodes you can create in all clusters that use the subnet, given the size of the subnet's primary IP address range.\n| Subnet primary IP range             | Maximum nodes |\n|:------------------------------------------------------------------------|:-----------------|\n| /29 Minimum size for a subnet's primary IP range      | 4 nodes   |\n| /28                  | 12 nodes   |\n| /27                  | 28 nodes   |\n| /26                  | 60 nodes   |\n| /25                  | 124 nodes  |\n| /24                  | 252 nodes  |\n| /23                  | 508 nodes  |\n| /22                  | 1,020 nodes  |\n| /21                  | 2,044 nodes  |\n| /20 Default size of a subnet's primary IP range in auto mode networks | 4,092 nodes  |\n| /19                  | 8,188 nodes  |\n| /8 Maximum size for a subnet's primary IP range      | 16,777,212 nodes |\nIf you run out of IP addresses in the primary IP address range, you can [expand the primary IP address range](/vpc/docs/create-modify-vpc-networks#expand-subnet) at any time, even when Google Cloud resources, such as load balancers and network endpoint groups, use the subnet.\nBefore you expand the primary IP address range, consider the following:\n- There must be no overlapping IP address ranges in the subnet.\n- GKE uses the primary IP address range to allocate IP addresses for internal load balancers and nodes.You can use the following formulas to:\n- Calculate the maximum number of nodes, , that a given netmask can support. Use for the size of the netmask, whose valid range is between `8` and `29` , inclusive. = 2 - 4\n- Calculate the size of the netmask, , required to support a maximum of nodes: = 32 - \u2308log ( + 4)\u2309`\u2308\u2309` is the [ceiling (least integer)function](https://en.wikipedia.org/wiki/Floor_and_ceiling_functions) , meaning round up to the next integer. The valid range for the size of the netmask, , is between `8` and `29` , inclusive.\n### Subnet secondary IP address range for Pods\nCarefully plan your secondary IP address range for Pods.\nThe following table shows the maximum number of nodes and Pods you can create in all clusters that use the subnet, given the size of the subnet's secondary IP address range used by Pods. This table assumes the [maximum number of Pods per node](/kubernetes-engine/docs/how-to/flexible-pod-cidr) is 110, which is the default Pod density.\n| Subnet secondary IP range for Pods                       | Maximum Pod IP addresses | Maximum nodes | Maximum Pods |\n|:------------------------------------------------------------------------------------------------------------------------------|:---------------------------|:----------------|:---------------|\n| /24 Smallest possible Pod IP range when the secondary range assignment method is user-managed        | 256 addresses    | 1 node   | 110 Pods  |\n| /23 Only possible when the secondary range assignment method is user-managed            | 512 addresses    | 2 nodes   | 220 Pods  |\n| /22 Only possible when the secondary range assignment method is user-managed            | 1,024 addresses   | 4 nodes   | 440 Pods  |\n| /21 Smallest possible Pod IP range when the secondary range assignment method is managed by GKE       | 2,048 addresses   | 8 nodes   | 880 Pods  |\n| /20                               | 4,096 addresses   | 16 nodes  | 1,760 Pods  |\n| /19                               | 8,192 addresses   | 32 nodes  | 3,520 Pods  |\n| /18                               | 16,384 addresses   | 64 nodes  | 7,040 Pods  |\n| /17                               | 32,768 addresses   | 128 nodes  | 14,080 Pods |\n| /16                               | 65,536 addresses   | 256 nodes  | 28,160 Pods |\n| /15                               | 131,072 addresses   | 512 nodes  | 56,320 Pods |\n| /14 Default size for the subnet's secondary IP range for Pods when the secondary range assignment method is managed by GKE | 262,144 addresses   | 1,024 nodes  | 112,640 Pods |\n| /13                               | 524,288 addresses   | 2,048 nodes  | 225,280 Pods |\n| /12                               | 1,048,576 addresses  | 4,096 nodes  | 450,560 Pods |\n| /11                               | 2,097,152 addresses  | 8,192 nodes  | 901,120 Pods |\n| /10                               | 4,194,304 addresses  | 16,384 nodes | 1,802,240 Pods |\n| /9 Largest possible Pod address range                      | 8,388,608 addresses  | 32,768 nodes | 3,604,480 Pods |\nIf you have changed the [maximum number of Pods per node](/kubernetes-engine/docs/how-to/flexible-pod-cidr) , you can use the following formulas to calculate the maximum number of nodes and Pods that a subnet's secondary IP address range for Pods can support:\n- Calculate the size of the netmask of each node's Pod range, . `` `` `= 31 - \u2308log` `` `(` `` `)\u2309` where:- is the number of Pods per node\n- `\u2308\u2309`is the ceiling (least integer) function, meaning round up to the next integer\n- For example, ifis 110, then`` `` `= 24`\n- Calculate the maximum number of nodes, , that the subnet's secondary IP address range for Pods can support: `` `` `= 2` `` `` where:- is the size of the netmask of each node's alias IP address range for Pods, calculated in the first step\n- is the size of the subnet mask of the subnet's secondary IP address range\n- For example, ifis 24, andis 20, then`` `` `= 16`\n- Calculate the maximum number of Pods, , that the subnet's secondary IP address range for Pods can support: `` `` `=` `` `\u00d7` `` `` where:- is the maximum number of nodes, calculated in the previous step\n- is the number of Pods per node\n- For example, ifis 16, andis 110, then`` `` `= 1760`You can add more IP addresses for Pods by using [discontiguous multi-Pod CIDR](/kubernetes-engine/docs/how-to/multi-pod-cidr) .\n### Subnet secondary IP address range for Services\nCarefully plan your secondary IP address range for Services. Because this is also a subnet secondary IP address range, this range cannot be changed once the cluster is created.\nIf you use [multi-cluster services](/kubernetes-engine/docs/concepts/multi-cluster-services) , the `ServiceImport` object uses IP addresses from the secondary IP range for Services.\nIn new Autopilot clusters running GKE version 1.27 and later, GKE assigns IP addresses for Services from a Google-managed range by default: `34.118.224.0/20` . This eliminates the need for you to specify your own IP address range for Services. The following considerations apply:\n- You can optionally specify custom ranges for Services by using the`--services-ipv4-cidr`flag or the`--services-secondary-range-name`flag.\n- If you specify only a rangeusing the`--services-ipv4-cidr`flag (for example,`/22`), GKE still uses the Google-managed range to obtain the sub-range of addresses.\n- GKE doesn't create a separate secondary IP address range for Services when the Google-managed range is used. The Google-managed range doesn't use the secondary IP address range quota for your subnet.\nThe following table shows the maximum number of Services you can create in a single cluster using the subnet, given the size of the subnet's secondary IP address range for Services.\n| Secondary IP range for Services                         | Maximum number of Services |\n|:----------------------------------------------------------------------------------------------------------------------------------|:-----------------------------|\n| /28 Smallest possible Service address range when the secondary range assignment method is user-managed       | 16 Services     |\n| /27 Smallest possible Service address range when the secondary range assignment method is managed by GKE      | 32 Services     |\n| /26                                | 64 Services     |\n| /25                                | 128 Services     |\n| /24                                | 256 Services     |\n| /23                                | 512 Services     |\n| /22                                | 1,024 Services    |\n| /21                                | 2,048 Services    |\n| /20 Default size for the subnet's secondary IP range for Services when the secondary range assignment method is managed by GKE | 4,096 Services    |\n| /19                                | 8,192 Services    |\n| /18                                | 16,384 Services    |\n| /17                                | 32,768 Services    |\n| /16 Largest possible Service address range                      | 65,536 Services    |\n## Sharing IP address ranges across GKE clusters\nYou can share the primary range, secondary IP address range for Pods, and secondary IP address range for Services between clusters in the same subnetwork.\nThis behavior is available for both Standard and Autopilot clusters.\nYou might want to share IP address ranges if you have a centralized team that is managing the infrastructure for clusters. You can reduce overhead by creating three ranges, for Pods, Services and nodes, and reusing or sharing them, especially in a Shared VPC model. It can also make it easier for network administrators to manage IP addresses by not requiring them to create specific subnets for each cluster.\n### Sharing the primary IP address range for nodes\nIf you create more than one cluster in the subnet, the primary IP address range for nodes is shared by default.\nSharing the primary IP address for nodes has the following limitations:\n- If you share the primary IP address range for nodes with two or more VPC-native clusters, one cluster can use a large portion of the shared IP address range, leaving the other clusters without enough IP addresses to expand.\n### Sharing the secondary IP address range for Pods\nWhen you share the secondary range for Pods, each Pod still gets a unique IP address.\n**Note:** Among the different types of secondary ranges, the additional Pod ranges are not shareable across clusters.\nSharing the secondary IP address range for Pods has the following limitations:\n- If you share the secondary IP address range for Pods with two or more VPC-native clusters, one cluster can use a large portion of the shared IP address range, leaving the other clusters without enough IP addresses to expand.\n- Among the different types of secondary ranges, both the [GKE-managed](/kubernetes-engine/docs/concepts/alias-ips#managed_by_default) and [additional Pod ranges](/kubernetes-engine/docs/how-to/multi-pod-cidr#add_more_pod_ipv4_ranges_for_specific_use_cases) are not shareable across clusters.\n- To share a secondary IP range, pass it on the command line with `--cluster-secondary-range` you cannot use a shared secondary range when creating clusters in the UI.\n### Sharing the secondary IP address range for Services\nTwo or more clusters can simultaneously use the same subnet secondary IPv4 address range for Services when you use [user-managed](#user-managed) secondary ranges.\nTo configure two or more clusters to share a common subnet secondary IPv4 address range for Services, use the same subnet secondary IPv4 address range when you create each cluster. There is no separate configuration flag required to share a common IPv4 address range for Services.\nWhen sharing a common IPv4 address range for Services, each cluster uses the entire subnet secondary IPv4 address range for Services internally. The IP addresses for Services are programmed within each cluster's node, but they are not assigned to the network interface of any node. Service IP addresses are not routable within the cluster's VPC network. Service IP addresses are only usable by client Pods within the same cluster as the Service.\nWhen a Pod sends a packet to a Service IP address, the iptables or eBPF configuration on the node performs destination Network Address Translation (NAT), changing the destination IP address of the packet from the Service IP address to a serving Pod IP address. The packet is routed based on the destination Pod IP address.\nSharing the secondary IP address range for Services provides the following benefits:\n- Reduce the number of unique secondary IP address ranges for Services created on a subnet\n- Use fewer IP addresses\nSharing the secondary IP address range for Services has the following limitations:\n- Sharing the secondary IP address range for Services is not supported with [VPC scope Cloud DNS for GKE](/kubernetes-engine/docs/how-to/cloud-dns#vpc_scope_dns) .\n- You can't share ranges that match the following regex:```\n^gke-.*-services-[abcdef0-9]{8}\n```\n- To share a secondary IP range for services, pass it on the command line with `--cluster-secondary-range` you cannot use a shared secondary range for services when creating clusters in the UI.\n### Node limiting ranges\nThe maximum number of Pods and Services for a given GKE cluster is limited by the size of the cluster's secondary ranges. The maximum number of nodes in the cluster is limited by the size of the cluster's subnet's primary IP address range the cluster's Pod address range.\nThe following error message indicates that either the subnet's primary IP address range or the cluster's Pod IP address range (the subnet's secondary IP address range for Pods) has been exhausted:\n```\nInstance [node name] creation failed: IP space of [cluster subnet] is\nexhausted\n```\nYou can add more IP addresses for nodes by [expanding the primary subnet](/vpc/docs/create-modify-vpc-networks#expand-subnet) , or add new IP addresses for Pods using [discontiguous multi-Pod CIDR](/kubernetes-engine/docs/how-to/multi-pod-cidr) . For more information, see [Not enough free IP address space for Pods](/kubernetes-engine/docs/how-to/alias-ips#not_enough_space) .\n## IPv4/IPv6 dual-stack networking\nWith IPv4/IPv6 dual-stack networking, you can define how GKE allocates IP addresses ( `ipFamilies` ) to the following objects:\n- For Pods and nodes, GKE allocates both IPv4 and IPv6 addresses.\n- For Services, GKE allocates either single-stack (IPv4 only or IPv6 only), or dual-stack addresses.\nIn GKE version 1.24 or later, you can enable dual-stack networking for new GKE clusters on standalone and Shared VPC networks. You can also apply network policies with dual-stack networking enabled.\n**Note:** If you see validation errors when enabling dual-stack networking on GKE clusters that have been upgraded from versions 1.24 to versions 1.25 or 1.26, contact the Google Cloud [support team](/support-hub) .\n### Benefits\nDual-stack networking provides the following benefits:\n- Enables end-to-end IPv6 communication.\n- Enables better performance compared to network address translation (NAT) or IP tunneling. This is achieved because there is no IPv6 to IPv4 translation.\n### Availability\nDual-stack networking with GKE has the following restrictions:\n- Dual-stack networking is only available for [VPC-native clusters](/kubernetes-engine/docs/how-to/alias-ips) clusters with [GKE Dataplane V2](/kubernetes-engine/docs/how-to/dataplane-v2) enabled.\n- Dual-stack networking is only supported on subnets in custom mode VPCs. For more information, see [Google Cloud types of VPC networks](/vpc/docs/vpc#subnet-ranges) .\n- Single-stack IPv6 addresses for Pods or nodes are not supported.\n- Dual-stack clusters consume additional memory per node to support both IPv4 and IPv6 compared to IPv4 only clusters. Consider this characteristic when setting up large-scale clusters.\n- Dual-stack clusters don't support Private Google Access over IPv6.\n- GKE versions 1.26.0-gke.2200 and later supports IPv6 (AAAA records) with Cloud DNS for cluster-internal operations and external DNS queries.\n- Dual-stack Services are supported for`ClusterIP`,`NodePort`, and`LoadBalancer`Services.\n- IPv6 is not supported for Windows nodes.\nConsider the preceding restrictions before creating a cluster with dual-stack networking. For more information, learn [how to create a VPC-native cluster with dual-stack networking](/kubernetes-engine/docs/how-to/alias-ips#dual-stack) .\n### Public and Private IPv6 address assignment\nThe following table provides a summary of public and private IPv6 addresses with dual-stack networking behavior and configurations:\n| ipv6-access-type flag | IP address assignment                                               | Subnet range               |\n|:------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------|\n| EXTERNAL    | GKE assigns external IPv6 addresses that are routable to the internet.                                  | From 2600:1900/28              |\n| INTERNAL    | GKE assigns internal IPv6 addresses that are not routable to the internet. Clusters with INTERNAL IPv6 access type cannot access the internet over IPv6 addresses. Cloud NAT does not support IPv6 addresses. | From fd20::/20 (which is a subset of the overall ULA range: fc00::/7). |\nTo learn more, see [how to use a dual-stack network for a VPC-native cluster](/kubernetes-engine/docs/how-to/alias-ips#dual-stack) .\n### Architecture\nA cluster with IPv4/IPv6 dual-stack networking has the following ranges allocated:\n- A /64 range to each subnet as a primary range.\n- A /96 per-node range from the primary range to use as a primary node IP address range.\n- A /112 per-node range from the primary node IP address range to use as a Pod IP address range for that node. With dual-stack networking, Pods get their IPv6 addresses from the (similar to nodes), and not from secondary range for Pods reserved to IPv4 addresses.The overall pod IP address range is comprised of non-overlapping ranges from the primary node IP range. Therefore, this Pod IP range is discontiguous.\n- A /112 range to use for Services. This range comes from a /64 range from the Google private address range which has been reserved for GKE's secondary Services IP address range.\nThe following diagram shows how Google Cloud and GKE allocate IPv6 addresses:\nIn the diagram, the primary range of the VPC subnet is `2600:1900:0:1::/64` and the reserved range for GKE Services is `2600:2D00:0:4::0:0/64` . Each node in the cluster has a /96 range for the primary node IP address range and a /112 range for the Pod IP address range. The cluster also has a /112 secondary Services IP address range.\n**Note:** GKE automatically selects the IPv6 IP address range for the Pod IP address range and the secondary Services IP address range.\n### Services\nYou can create an IPv6 Service of type [ClusterIP](/kubernetes-engine/docs/concepts/service#services_of_type_clusterip) , [NodePort](/kubernetes-engine/docs/concepts/service#service_of_type_nodeport) , or [LoadBalancer](/kubernetes-engine/docs/concepts/service-load-balancer) .\nYou can expose a Deployment with a Service of type `ClusterIP` , `NodePort` , or `LoadBalancer` . For each of these Service types, you can define `ipFamilies` and `ipFamilyPolicy` fields as either IPv4, IPv6, or a [dual-stack](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services) Service. For more information, see an [example of how to set up a Deployment](/kubernetes-engine/docs/deploy-app-cluster) .\n## What's next\n- [Learn more about VPC Network Peering](/vpc/docs/vpc-peering) .\n- [Learn how to create a VPC-native cluster](/kubernetes-engine/docs/how-to/alias-ips) .\n- [Learn about GKE IP address utilization insights](/network-intelligence-center/docs/network-analyzer/insights/kubernetes-engine/gke-ip-utilization) .", "guide": "Google Kubernetes Engine (GKE)"}