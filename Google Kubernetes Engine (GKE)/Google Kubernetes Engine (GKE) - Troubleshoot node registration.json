{"title": "Google Kubernetes Engine (GKE) - Troubleshoot node registration", "url": "https://cloud.google.com/kubernetes-engine/docs/troubleshooting/node-registration", "abstract": "# Google Kubernetes Engine (GKE) - Troubleshoot node registration\nThis document describes how to resolve issues experienced when adding nodes to your Google Kubernetes Engine (GKE) Standard cluster. Some of [the scenarios](#when-node-registration) where these issues occur includes cluster creation and node pool creation, and during scale up events.\nFor resolving issues with GKE Autopilot clusters, refer to [Troubleshooting Autopilot clusters](/kubernetes-engine/docs/troubleshooting/troubleshooting-autopilot-clusters) .\n[Cloud Customer Care](/kubernetes-engine/docs/getting-support)\n", "content": "## About node registration\n[Nodes](/kubernetes-engine/docs/concepts/cluster-architecture#nodes) are Compute Engine VM instances that GKE creates on your behalf. When a new node is added to a GKE cluster, it must be registered with the cluster's control plane. This process, called or , occurs when a node is created.\nNode registration occurs whenever nodes are created, including the following scenarios:\n- You create a cluster.\n- You [create a node pool](/kubernetes-engine/docs/how-to/node-pools#add) .\n- GKE creates a node pool with [node auto-provisioning](/kubernetes-engine/docs/how-to/node-auto-provisioning) .\n- [Cluster autoscaler](/kubernetes-engine/docs/concepts/cluster-autoscaler) scales up the cluster.\n- You [resize the cluster](/kubernetes-engine/docs/how-to/resizing-a-cluster) .\n- [Node auto-repair](/kubernetes-engine/docs/how-to/node-auto-repair) creates a new node.\nThe node registration process follows these steps:\n- The node count set for the node pool is replicated to the managed instance groups (MIGs).\n- The MIGs create the required number of VM instances.\n- For each VM instance that is created:- The VM instance boots.\n- The VM instance configures and installs the necessary packages to run as a Kubernetes node.\n- The kubelet now running on the VM instance communicates with the control plane's API server to register as a node.\n## Node registration error message\nWhen GKE attempts to add nodes to your cluster, the following error appears in the Google Cloud console if node registration failed:\n```\n All cluster resources were brought up, but: only 0 nodes out of * have\n registered; this is likely due to the Nodes failing to start correctly; try\n re-creating the cluster or contact support if that doesn't work.\n```\nThis error message indicates that the nodes did not successfully register with the cluster. The following sections describe some of the potential causes of this error.\n## Prerequisites for successful node registration\nSuccessful node registration to a GKE cluster depends on factors such as the following:\n- Network connectivity.\n- Resource availability.\n- Service account permissions.\n### Prerequisites for instance creation\nWhen GKE creates a node for your cluster, the first step is creating a new Compute Engine VM instance.\nInstance creation might fail for one of the following reasons:\n- [Insufficient quota](/compute/docs/troubleshooting/troubleshooting-vm-creation#insufficient_quota) \n- [Resource availability](/compute/docs/troubleshooting/troubleshooting-vm-creation#resource_availability) \n- [Insufficient IP address space](/kubernetes-engine/docs/how-to/alias-ips#not_enough_space) \nFailed instance creation means that in the time range during which GKE attempted to create the instance to register as a GKE node, there are missing logs for instance creation as the instances were never created. To check for missing logs, refer to the instructions to [find an instance that failed node registration](#find-instance-failed-registration) .\n### Service account permissions\nGKE nodes have an IAM service account associated with them. By default, this service account is the [Compute Enginedefault serviceaccount](/compute/docs/access/service-accounts#default_service_account) . We recommend, to harden your cluster, using a custom IAM service account that has the [minimum requiredpermissions](/kubernetes-engine/docs/how-to/hardening-your-cluster#permissions) .\nThis service account needs to have the correct permissions for the VM instances to be initialized as GKE nodes. If you delete the service account, disable it, or don't give it the correct permissions, node registration might fail.\n### Prerequisites for network connection to Google APIs and services\nThe VM instance downloads packages to prepare to run as a GKE node, and a connection timeout might mean that your cluster has not met the networking requirements necessary to connect to Google APIs and services, such as `storage.googleapis.com` . If an instance cannot connect to these services, it cannot download the Kubernetes distribution and complete the node registration process.\nDepending on your network connection, allowing this connection might mean [configuring Private Google Access](/vpc/docs/configure-private-google-access#config) , or having [firewall rules](/vpc/docs/firewalls) and [routes](/vpc/docs/routes) in your cluster's Virtual Private Cloud (VPC) network that allow the connection.\n### Prerequisites for network connection with control plane\nConnectivity between the control plane and the nodes is critical for node registration and regular function. This communication is allowed by default. Ensure that when putting VPC firewall rules in place, communication is still allowed between the nodes and the control plane.\nFor more information, refer to [Allow control plane connectivity](/kubernetes-engine/docs/best-practices/networking#allow-cp-connectivity) .\n## Use the Node Registration Checker to troubleshoot node registration\nFor node pools created on GKE version 1.24.0-gke.100 or later, a utility called the Node Registration Checker runs on newly created instances and checks if the instance has successfully completed the node registration steps.\nWhen node registration fails, the utility generates a summary report where you can see what prerequisites were not met based on where in the process the instance failed.\n**Note:** The Node Registration Checker only runs on node pools that were on GKE version 1.24.0-gke.100 or later. The utility won't run for node registration with an existing node pool upgraded from an earlier GKE version to version 1.24.0-gke.100 or later.\nUse the instructions in the following section to find an instance that failed node registration and use the Node Registration Checker summary to learn why it failed.\nIf you can't use the Node Registration Checker in your node pool, refer to [Troubleshoot node registration without the Node Registration Checker](#troubleshoot-without-nrc) .\n### Find an instance that failed node registration\nWhen one or more instances fail to register as nodes with your GKE cluster's control plane, you can see the number of instances that failed from the [error message](#error-message-for-node-registration) shown in the **Cluster Details** page of the Google Cloud console. When multiple instances fail to register at once, it might be for the same underlying reason. Because of this, you can use one of the failed instances to investigate why all instances failed.\nHowever, because the instances didn't register as GKE nodes, you must use the following instructions to find the names of the underlying Compute Engine VMs that failed to register.\n- In the Google Cloud console, go to the **Logs Explorer** page: [Go to Logs Explorer](https://console.cloud.google.com/logs/query) \n- Use the following log filter to find the logs of VM instance creation:```\nresource.type=\"gce_instance\"\nlogName=\"projects/PROJECT_ID/logs/cloudaudit.googleapis.com%2Factivity\"\nprotoPayload.requestMetadata.callerSuppliedUserAgent=\"GCE Managed Instance Group for GKE\"\nprotoPayload.response.status=\"RUNNING\"\n```Replace `` with the project ID for your cluster.\n- Use the histogram below the log filter to narrow down the time range to when node creation should have occurred.\n- Click one of the logs that appear under **Query results** , then click **Expand nested fields** to show more details.\n- Find the field `protoPayload.resourceName` . The final part of the path listed there is the instance name. Instance names follow a format that starts with the name of the cluster and the name of the node pool, for example:`gke-cluster-1-default-pool-b0ac62d3-9g1v` is an instance for the `default-pool` node pool in `gke-cluster-1` .\n- In the Google Cloud console, go to the Compute Engine **VM instances** page: [Go to VM instances](https://console.cloud.google.com/compute/instances) Find the name of the VM instance using the filter. Click for more details.\n### Troubleshoot an instance with the Node Registration Checker\nAfter you find the [name of the instance that failed to register](#find-instance-failed-registration) , you can investigate why it failed using the Node Registration Checker.\nIn the VM instance **Details** tab, in the **Logs** section, click **Serial port 1 (console)** .\nFor node pools created on GKE version 1.24.0-gke.100 or later, the output for newly created instances includes the following, indicating that the Node Registration Checker has started:\n```\n** Starting Node Registration Checker **\n** Loading variables from kube-env **\n** Sleeping for 7m to allow registration to complete **\n```\nIf node registration succeeds, the output includes the following messages:\n```\n** Node ready and registered. **\n** Completed running Node Registration Checker **\n```\nIf you don't see these messages, node registration failed and the Node Registration Checker generated a report summarizing why registration failed. Look for the following additional message to see the summary:\n```\n** Here is a summary of the checks performed: **\n```\nBelow this message, look for a table similar to the following:\n```\n-----------------------------Service DNS  Reachable\n-----------------------------LOGGING true  true\nGCR  true  true\nGCS  true  true\nMaster  N/A  false\n-----------------------------\n```\nIf `LOGGING` , `GCR` , or `GCS` are listed as not reachable, check the [Service account permissions for node registration](#service-account-permissions) and [Network connection to Google APIs and services for node registration](#network-connection-to-apis) .\nIf `Master` is listed as not reachable, check the prerequisites for [Network connection with control plane for node registration](#network-connection-to-control-plane) .\nAfter you resolve all issues preventing successful node registration, refer to [Complete node registration after fixing the root cause](#next-steps) .\nIf the preceding steps don't tell you why node registration failed, refer to [Gather information for further investigation](#get-info-for-investigation) .\n## Troubleshoot node registration without the Node Registration Checker\n**Warning:** Use these steps only as a last resort if you have already checked the [Prerequisites for successful node registration](#check-prereqs-for-node-registration) and the [Node Registration Checker](#node-registration-checker) is not available.\nIf node registration failed in a node pool created on a GKE version earlier than 1.24.0-gke.100, you can only manually troubleshoot node registration. If your node pool was created on GKE version 1.24.0-gke.100 or later, follow the instructions to [Use the Node Registration Checker to troubleshoot node registration](#node-registration-checker) .\n**Note:** Some of the investigation steps below require SSH access to the underlying VM instance.\nAfter you resolve all issues preventing successful node registration, use the following instructions to [complete node registration after fixing the root cause](#next-steps) .\nIf none of the investigation steps on this page tell you why node registration failed, refer to [Gather information for further investigation](#get-info-for-investigation) .\n### Check service account permissions for node registration\nThe service account that your nodes use must have the [prerequisite permissions for node registration](#service-account-permissions) . Use the following instructions to check that you have met these prerequisites:\n- [Find an instance that failed node registration](#find-instance-failed-registration) .\n- In the VM instance **Details** tab, in the **API and identity management** section, find the name of the service account in the **Service account** field. If the node used the Compute Engine default service account, the name follows the format `` `-compute@developer.gserviceaccount.com` . This service account must have the [minimum required permissions](/kubernetes-engine/docs/how-to/hardening-your-cluster#use_least_privilege_sa) .\n- Check for indicators of successful registration in the serial console output. In the VM instance **Details** tab, in the **Logs** section, click **Serial port 1 (console)** .If the instance used a service account with the correct permissions, the output includes the following:- `Started Download and install k8s binaries and configurations`\n- `Started Docker Application Container Engine.`\n- `Started Configure kubernetes node.`\n- `Reached target Kubernetes.`\nThese messages will be found in different places in this output. They may also have timestamps or other artifacts interrupting them, like this: `Starting [0;1;39mConfigure kubernetes node` . If you see all of these messages, the service account prerequisites were met.If you don't see these messages, the service account assigned to the VM instance might be deleted, be disabled, or not have [the correct permissions](/kubernetes-engine/docs/how-to/hardening-your-cluster#permissions) .\n### Check network connection to Google APIs and services for node registration\nIf you have [SSH access to VM instances](/compute/docs/instances/access-overview) in your project, you can also check that the VM instance has a network connection to Google APIs and services.\n- [Find an instance that failed node registration](#find-instance-failed-registration) .\n- In the VM instance **Details** tab, click **SSH** .\n- After you connect to the command line for your VM instance, run the following command to check for connection to Google APIs and services:```\ncurl -m 5 -v https://storage.googleapis.com/generate_204\n```If the connection is successful, the output is similar to the following:```\n* Trying 142.250.148.128:443...\n* Connected to storage.googleapis.com (142.250.148.128) port 443 (#0)\n...\n< HTTP/1.1 204 No Content\n< Content-Length: 0\n< Cross-Origin-Resource-Policy: cross-origin\n< Date: Wed, 04 Jan 2023 00:58:41 GMT\n< \n* Connection #0 to host storage.googleapis.com left intact\n```If the connection is not successful, the output is similar to the following:```\n* Trying 142.250.148.128:443...\n* Connection timed out after 5000 milliseconds\n* Closing connection 0\ncurl: (28) Connection timed out after 5000 milliseconds```\n```If the connection times out and the IP address returned is within the `199.36.153.0/24` IP address range, check that your cluster has met the [networking requirements](/vpc/docs/configure-private-google-access#config) for connecting to Google APIs and services. If the connection times out and the IP address returned is not within the mentioned IP address range, check for [firewall rules](/vpc/docs/firewalls) blocking outgoing traffic or misconfigured [routes](/vpc/docs/routes) in your cluster's VPC network.Keep the SSH connection to the VM instance open and proceed to the next section.If you don't have [SSH access to VM instances](/compute/docs/instances/access-overview) , use [Connectivity Tests](/network-intelligence-center/docs/connectivity-tests/concepts/overview) to check that the VM instance has a connection to Google APIs and services.\n- [Find an instance that failed node registration](#find-instance-failed-registration) .\n- [Create and Run Connectivity Tests](/network-intelligence-center/docs/connectivity-tests/how-to/running-connectivity-tests) with the VM instance as the **Source** and `storage.googleapis.com TCP/443` as the **Destination** .Use the test results to check your cluster's networking configuration.\n### Check network connection with control plane for node registration\nIf you have [SSH access to VM instances](/compute/docs/instances/access-overview) in your project, you can check whether the VM instance has a networking connection to the cluster's control plane.\n- [Find an instance that failed node registration](#find-instance-failed-registration) .\n- In the VM instance **Details** tab, click **SSH** .\n- After you connect to the command line for your VM instance, save the cluster's control plane endpoint as an environment variable:```\nsource <(sudo grep KUBERNETES_MASTER_NAME /home/kubernetes/kube-env)\n```\n- Send a `GET` request to the control plane endpoint:```\ncurl -k -m 5 \u00a0https://${KUBERNETES_MASTER_NAME}/version\n```If the output is similar to the following, then the VM instance can establish a connection with the control plane:```\n{\n\"major\": \"1\",\n\"minor\": \"24\",\n\"gitVersion\": \"v1.24.7-gke.900\",\n\"gitCommit\": \"e35c4457f66187eff006dda6d2c0fe12144ef2ec\",\n\"gitTreeState\": \"clean\",\n\"buildDate\": \"2022-10-26T09:25:34Z\",\n\"goVersion\": \"go1.18.7b7\",\n\"compiler\": \"gc\",\n\"platform\": \"linux/amd64\"\n}\n```If the output is similar to the following, then the VM instance cannot establish a connection with the control plane:```\ncurl: (28) Connection timed out after 5000 milliseconds\n```\nIf the VM instance cannot establish a connection with the control plane, see the section about allowing control plane connectivity in the [GKE networking best practices](/kubernetes-engine/docs/best-practices/networking#allow-cp-connectivity) .\n## Complete node registration after fixing the root cause\nAfter you resolve the issue that is blocking node registration, how you proceed depends on the context for the failure:\n- If node registration failed on cluster creation, [delete the cluster](/sdk/gcloud/reference/container/clusters/delete) and try again.\n- If node registration failed during scale up with cluster autoscaler, wait for the VM instances to try and register again.\n- If node registration failed on node pool creation:- If the VM instances were created, wait for the VM instances to try and register again.\n- If the VM instances were not created, [delete the node pool](/sdk/gcloud/reference/container/node-pools/delete) and try again.\n- If node registration failed on cluster resize, re-run the command to [increase the size of your cluster](/kubernetes-engine/docs/how-to/resizing-a-cluster#increase) .\n- If node registration failed outside the scope of an operation, such as during a repair operation, wait for the VM instances to try and register again.\n### Gather information for further investigation\nIf you are unable to resolve the node registration issue, you can gather additional information to aid Cloud Customer Care's investigation with the following instructions. These steps require [SSH access to VM instances](/compute/docs/instances/access-overview) in your project and use the `sosreport` utility, which is included in COS images.\n- [Find an instance that failed node registration](#find-instance-failed-registration) .\n- [Collect debugging information using sosreport](/container-optimized-os/docs/how-to/sosreport) .Alternatively, if your nodes don't have the `sosreport` utility downloaded and it cannot be installed, collect debugging information manually by running the following commands:```\nsudo journalctl -u cloud-init-localsudo journalctl -u cloud-initsudo journalctl -u cloud-finalsudo journalctl -u cloud-configsystemctl status kubeletjournalctl -u kubeletsystemctl status kube-node-installation.servicesystemctl status kube-node-configuration.servicejournalctl -u kube-node-installation.service --no-pagerjournalctl -u kube-node-configuration.service --no-pagerjournalctl -u kubelet.service --no-pager\n```\n- Package this information into a zip file and include it when [submitting a support case to Cloud Customer Care](/support-hub) .## What's next\n[Cloud Customer Care](/kubernetes-engine/docs/getting-support)", "guide": "Google Kubernetes Engine (GKE)"}