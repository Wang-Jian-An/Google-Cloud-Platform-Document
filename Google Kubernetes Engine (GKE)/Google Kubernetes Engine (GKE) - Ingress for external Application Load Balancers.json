{"title": "Google Kubernetes Engine (GKE) - Ingress for external Application Load Balancers", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/ingress-xlb", "abstract": "# Google Kubernetes Engine (GKE) - Ingress for external Application Load Balancers\nThis page explains how Ingress for external Application Load Balancers works in Google Kubernetes Engine (GKE). You can also learn [how to set up and use Ingress forExternal Load Balancing](/kubernetes-engine/docs/how-to/load-balance-ingress) .\nFor general information about using load balancing in GKE, see [Ingress for external Application Load Balancers](/kubernetes-engine/docs/concepts/ingress) .\nGoogle Kubernetes Engine (GKE) networking is built upon [Cloud Load Balancing](/load-balancing/docs/load-balancing-overview) . With Cloud Load Balancing, a single anycast IP address enables routing to determine the lowest cost path to the closest Google Cloud load balancer.\n", "content": "## Support for Google Cloud features\nYou can use a BackendConfig to configure an external Application Load Balancer to use features like:\n- [Google Cloud Armor](/armor/docs/security-policy-concepts) \n- [Health checks](/kubernetes-engine/docs/concepts/ingress#health_checks) \n- [Cloud CDN](/cdn/docs/overview) \n- [Identity-Aware Proxy](/iap/docs/enabling-kubernetes-howto) \nBackendConfig is a custom resource that holds configuration information for Google Cloud features. To learn more about supported features, see [Ingress configuration](/kubernetes-engine/docs/how-to/ingress-configuration) .\n## Support for WebSocket\nWith external Application Load Balancers, the WebSocket protocol works without any configuration.\nIf you intend to use the WebSocket protocol, you might want to use a timeout value larger than the default 30 seconds. For WebSocket traffic sent through a Google Cloud external Application Load Balancer, the backend service timeout is interpreted as the maximum amount of time that a WebSocket connection can remain open, whether idle or not.\nTo set the timeout value for a backend service configured through Ingress, create a BackendConfig object, and use the `beta.cloud.google.com/backend-config` annotation in your Service manifest.\nFor configuration information, see [Backend response timeout](/kubernetes-engine/docs/how-to/ingress-configuration#timeout) .\n## Static IP addresses for HTTP(S) load balancers\nWhen you create an Ingress object, you get a stable external IP address that clients can use to access your Services and in turn, your running containers. The IP address is stable in the sense that it lasts for the lifetime of the Ingress object. If you delete your Ingress and create a new Ingress from the same manifest file, you are not guaranteed to get the same external IP address.\nIf you want a permanent IP address that stays the same across deleting your Ingress and creating a new one, you must reserve a global [static external IP address](/compute/docs/ip-addresses/reserve-static-external-ip-address) . Then in your Ingress manifest, include an annotation that gives the name of your reserved static IP address. If you modify an existing Ingress to use a static IP address instead of an ephemeral IP address, GKE might change the IP address of the load balancer when GKE re-creates the forwarding rule of the load balancer.\nFor example, suppose you have reserved a global static external IP address named `my-static-address` . In your Ingress manifest, include a `kubernetes.io/ingress.global-static-ip-name` annotation as shown here:\n```\napiVersion: networking.k8s.io/v1kind: Ingressmetadata:\u00a0 name: my-ingress\u00a0 annotations:\u00a0 \u00a0 kubernetes.io/ingress.global-static-ip-name: my-static-address\n```\n## Setting up HTTPS (TLS) between client and load balancer\nAn HTTP(S) load balancer acts as a proxy between your clients and your application. If you want to accept HTTPS requests from your clients, the load balancer must have a certificate so it can prove its identity to your clients. The load balancer must also have a private key to complete the HTTPS handshake.\nWhen the load balancer accepts an HTTPS request from a client, the traffic between the client and the load balancer is encrypted using TLS. However, the load balancer terminates the TLS encryption, and forwards the request without encryption to the application. For information about how to encrypt traffic between the load balancer and your application, see [HTTPS between load balancer and your application](/kubernetes-engine/docs/concepts/ingress-ilb#https_tls_between_load_balancer_and_your_application) .\nYou can use [Google-managed SSL certificates](/load-balancing/docs/ssl-certificates#certificate-types) or certificates that you manage yourself. For more information about creating an Ingress that uses Google-managed certificates, see [Using Google-managed SSLcertificates](/kubernetes-engine/docs/how-to/managed-certs) .\nTo provide an HTTP(S) load balancer with a certificate and key that you created yourself, [create a Kubernetes Secret](/kubernetes-engine/docs/how-to/ingress-multi-ssl#creating_secrets) object. The Secret holds the certificate and key. Add the Secret to the `tls` field of your `Ingress` manifest, as in the following example:\n```\napiVersion: networking.k8s.io/v1kind: Ingressmetadata:\u00a0 name: my-ingress-2spec:\u00a0 tls:\u00a0 - secretName: SECRET_NAME\u00a0 rules:\u00a0 - http:\u00a0 \u00a0 \u00a0 paths:\u00a0 \u00a0 \u00a0 - path: /*\u00a0 \u00a0 \u00a0 \u00a0 pathType: ImplementationSpecific\u00a0 \u00a0 \u00a0 \u00a0 backend:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name: SERVICE_NAME\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 number: 60000\n```\nThis manifest includes the following values:\n- ``: the name of the Secret you created.\n- ``: the name of your backend service.\nChanges to Secrets are picked up periodically so if you modify the data inside of the Secret, it will take a max of 10 minutes for those changes to be applied to the load balancer.\nFor more information, see [Using multiple SSL certificates in HTTPS load balancing withIngress](/kubernetes-engine/docs/how-to/ingress-multi-ssl) .\nTo secure HTTPS encrypted Ingress for your GKE clusters, see example [Secure Ingress](https://github.com/GoogleCloudPlatform/gke-networking-recipes/tree/main/ingress/single-cluster/ingress-https) .\n## Disabling HTTP\nIf you want all traffic between the client and the HTTP(S) load balancer to use HTTPS, you can disable HTTP by including the `kubernetes.io/ingress.allow-http` annotation in your Ingress manifest. Set the value of the annotation to `\"false\"` .\n```\napiVersion: networking.k8s.io/v1kind: Ingressmetadata:\u00a0 name: my-ingress-2\u00a0 annotations:\u00a0 \u00a0 kubernetes.io/ingress.allow-http: \"false\"spec:\u00a0 tls:\u00a0 - secretName: SECRET_NAME\u00a0 ...\n```\nThis manifests includes the `` that is the name of the Secret you created.\n**Note:** If you are using the annotation `networking.gke.io/managed-certificates` you cannot use the annotation `kubernetes.io/ingress.allow-http: false` . You can update the Ingress and add the annotation `kubernetes.io/ingress.allow-http: false` only after the external Application Load Balancer is fully programmed.\n**Caution:** Disabling HTTP is not supported for Multi Cluster Ingress yet.\n## Pre-shared certificates for load balancers\nAs an alternative to using Kubernetes Secrets to provide certificates to the load balancer for HTTP(S) termination, you can use certificates previously uploaded to your Google Cloud project. For more information, see [Using pre-shared certificates](/kubernetes-engine/docs/how-to/ingress-multi-ssl#using_pre-shared_certificates) and [Using multiple SSL certificates in HTTPS load balancing with Ingress](/kubernetes-engine/docs/how-to/ingress-multi-ssl) .\n## HTTPS (TLS) between load balancer and your application\nAn HTTP(S) load balancer acts as a proxy between your clients and your application. Clients can use HTTP or HTTPS to communicate with the load balancer proxy. The connection from the load balancer proxy to your application uses HTTP by default. However, if your application, running in a GKE Pod, is capable of receiving HTTPS requests, you can configure the load balancer to use HTTPS when it forwards requests to your application.\nTo configure the protocol used between the load balancer and your application, use the `cloud.google.com/app-protocols` annotation in your Service manifest. This Service manifest must include `type: NodePort` unless you're using [container native load balancing](/kubernetes-engine/docs/concepts/container-native-load-balancing) . If using container native load balancing, use the `type: ClusterIP` .\nThe following Service manifest specifies two ports. The annotation says that when an HTTP(S) load balancer targets port 80 of the Service, it should use HTTP. And when the load balancer targets port 443 of the Service, it should use HTTPS.\nThe Service manifest must include a `name` value in the port annotation. You can only edit the Service port by referring to its assigned `name` , not by its `targetPort` value.\n**Caution:** To limit potential downtime, do not edit the Service's port name when you enable this feature. If your Service's port doesn't have a name, use the empty port name as the key in the annotation, similar to `cloud.google.com/app-protocols: '{\"\": \"HTTPS\"}'` . Editing the port name or annotation after the initial setup might cause downtime for your applications\n```\napiVersion: v1kind: Servicemetadata:\u00a0 name: my-service-3\u00a0 annotations:\u00a0 \u00a0 cloud.google.com/app-protocols: '{\"my-https-port\":\"HTTPS\",\"my-http-port\":\"HTTP\"}'spec:\u00a0 type: NodePort\u00a0 selector:\u00a0 \u00a0 app: metrics\u00a0 \u00a0 department: sales\u00a0 ports:\u00a0 - name: my-https-port\u00a0 \u00a0 port: 443\u00a0 \u00a0 targetPort: 8443\u00a0 - name: my-http-port\u00a0 \u00a0 port: 80\u00a0 \u00a0 targetPort: 50001\n```\n## What's next\n- Configure an external Application Load Balancer by [creating a Deployment, Service, and Ingress](/kubernetes-engine/docs/how-to/load-balance-ingress) .\n- Learn how to [expose applications using Services](/kubernetes-engine/docs/how-to/exposing-apps) .\n- Do the [tutorial on setting up an external Application Load Balancer with Ingress](/kubernetes-engine/docs/tutorials/http-balancer) .\n- Read an overview of [networking in GKE](/kubernetes-engine/docs/concepts/network-overview) .\n- Learn more about configuring [Ingress features](/kubernetes-engine/docs/how-to/ingress-features) .\n- Learn how to enable [HTTP to HTTPS redirects](/kubernetes-engine/docs/how-to/ingress-features#https_redirect) .", "guide": "Google Kubernetes Engine (GKE)"}