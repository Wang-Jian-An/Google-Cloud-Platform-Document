{"title": "Google Kubernetes Engine (GKE) - Cluster trust", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-trust", "abstract": "# Google Kubernetes Engine (GKE) - Cluster trust\nThis page describes the trust in Google Kubernetes Engine (GKE) clusters, including how control planes and nodes authenticate requests.\n", "content": "## Intracluster communication\nThere are many connections in a cluster for communication between Kubernetes components.\n## Root of trust\nGKE has the following configuration:\n- The [cluster root Certificate Authority](https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/) (CA) is used to validate the API server and kubelets' client certificates. That is, control planes and nodes have the same root of trust. Any kubelet within the cluster node pool can request a certificate from this CA using the`certificates.k8s.io`API, by submitting a [certificate signing request](https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/#create-a-certificate-signing-request) . The root CA has a limited lifetime as described in the [Cluster root CA lifetime](#root-ca-lifetime) section.\n- A separate per-cluster etcd CA is used to validate etcd's certificates.\n### API server and kubelets\nThe API server and the kubelets rely on the cluster root CA for trust. In GKE, the control plane API certificate is signed by the cluster root CA. Each cluster runs its own CA, so that if one cluster's CA is compromised, no other cluster CA is affected.\nAn internal Google service manages root keys for this CA, which are non-exportable. This service accepts certificate signing requests, including those from the kubelets in each GKE cluster. Even if the API server in a cluster were compromised, the CA would not be compromised, so no other clusters would be affected.\nEach node in the cluster is injected with a shared secret at creation, which it can use to submit certificate signing requests to the cluster root CA and obtain kubelet client certificates. These certificates are then used by the kubelet to authenticate its requests to the API server. This shared secret is reachable by Pods on the node, unless you enable [Shielded GKE Nodes](/kubernetes-engine/docs/how-to/shielded-gke-nodes) , [workload identity federation for GKE](/kubernetes-engine/docs/how-to/workload-identity) , or [metadata concealment](/kubernetes-engine/docs/how-to/protecting-cluster-metadata#concealment) .\nThe cluster root CA has a limited lifetime, after which any certificates signed by the expired CA are invalid. Check the approximate expiry date of your cluster's CA by following the instructions in [Check credential lifetime](/kubernetes-engine/docs/how-to/credential-rotation#check_credential_lifetime) .\nYou should manually rotate your credentials before your existing root CA expires. If the CA expires and you don't rotate your credentials, your cluster might enter an unrecoverable state. GKE has the following mechanisms to try and prevent unrecoverable clusters:\n- Your cluster enters a`DEGRADED`state seven days before CA expiry\n- GKE attempts an automatic credential rotation 30 days before CA expiry. This automatic rotation ignores maintenance windows and might cause disruptions as GKE recreates nodes to use new credentials. External clients, like kubectl in local environments, won't work until you update them to use the new credentials. **Note:** This is a last resort to prevent an unrecoverable cluster. Don't rely on automatic rotation\u2014instead, plan to rotate your credentials manually during maintenance periods well in advance of CA expiry.\nTo learn how to perform a rotation, see [Rotate your cluster credentials](/kubernetes-engine/docs/how-to/credential-rotation) .\n### etcd\nIn GKE, etcd relies on a separate per-cluster etcd CA for trust.\nRoot keys for the etcd CA are distributed to the metadata of each virtual machine (VM) on which the control plane runs. Any code executing on control plane VMs, or with access to compute metadata for these VMs, can sign certificates as this CA. Even if etcd in a cluster were compromised, the CA is not shared between clusters, so no other clusters would be affected.\nThe etcd certificates are valid for five years.\n## Rotating your certificates\nTo rotate all your cluster's API server and kubelet certificates, perform a [credential rotation](/kubernetes-engine/docs/how-to/credential-rotation) . There is no way for you to trigger a rotation of the etcd certificates; this is managed for you in GKE.\n**Note:** Performing a credential rotation causes GKE to upgrade all node pools to the closest supported node version, and causes brief downtime for the cluster API.\n## What's next\n- [Read more about Managing TLS certificates in the Kubernetes documentation](https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/) .", "guide": "Google Kubernetes Engine (GKE)"}