{"title": "Google Kubernetes Engine (GKE) - Containerd node images", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/using-containerd", "abstract": "# Google Kubernetes Engine (GKE) - Containerd node images\nThis page provides information about node images that use [containerd](https://containerd.io/) as the container runtime in your Google Kubernetes Engine (GKE) nodes.\n**Note:** In GKE version 1.19 and later, the default node image for Linux nodes is Container-Optimized OS with containerd ( `cos_containerd` ). If you use a Docker node image type, [migrate to the containerd runtime](/kubernetes-engine/docs/how-to/migrate-containerd) .\n", "content": "## About containerd\nThe [container runtime](https://kubernetes.io/docs/setup/production-environment/container-runtimes/) is software that is responsible for running containers, and abstracts container management for Kubernetes. There are a few different container runtimes.\nThe [containerd](http://containerd.io) runtime is an industry-standard container runtime that's supported by Kubernetes, and used by many other projects. The containerd runtime provides the layering abstraction that allows for the implementation of a rich set of features like [gVisor](https://gvisor.dev/) and [Image streaming](/kubernetes-engine/docs/how-to/image-streaming) to extend GKE functionality.\nThe containerd runtime is considered more resource efficient and secure than the Docker runtime.\n## Using containerd images in GKE clusters\nWhen you create a new GKE cluster, a new node pool in an existing cluster, or when you upgrade an existing cluster, you can choose to use a containerd node image. GKE Autopilot clusters always use Container-Optimized OS with containerd.\nThe following table describes the supported containerd node images based on your [cluster mode](/kubernetes-engine/docs/concepts/types-of-clusters#modes) and node pool OS:\n| Cluster mode | Node pool OS | Node image                                 |\n|:---------------|:---------------|:---------------------------------------------------------------------------------------------------------------------------------------------|\n| Autopilot  | Linux   | cos_containerd                                |\n| Standard  | Linux   | cos_containerd ubuntu_containerd                            |\n| Standard  | Windows Server | windows_ltsc_containerd windows_sac_containerd (Unsupported after August 9, 2022) These images require GKE version 1.21.1-gke.2200 or later. |\n## Using privileged Pods to access Docker\nIf your users access Docker Engine on a node using a privileged Pod, you should update those workloads so that there's no direct reliance on Docker. For example, consider migrating your logging and monitoring extraction process from Docker Engine to GKE system add-ons.\n## Building container images with containerd\nYou **cannot** use containerd to build container images. Linux images with containerd include the Docker binary so that you can use Docker to build and push images. However, we don't recommend using individual containers and local nodes to run commands to build images.\nKubernetes is not aware of system resources used by local processes outside the scope of Kubernetes, and the Kubernetes control plane cannot account for those processes when allocating resources. This can starve your GKE workloads of resources or cause instability on the node.\nConsider accomplishing these tasks using other services outside the scope of the individual container, such as [Cloud Build](/build) , or use a tool such as [kaniko](/blog/products/containers-kubernetes/introducing-kaniko-build-container-images-in-kubernetes-and-google-container-builder-even-without-root-access) to build images as a Kubernetes workload.\nIf none of these suggestions work for you, and you understand the risks, you can continue using Docker on the local node to build images. You must push the images to a registry before you can use them in a GKE cluster. Kubernetes with containerd is unaware of images locally-built using Docker.\n## Debugging containers on containerd nodes\nFor debugging or troubleshooting on Linux nodes, you can interact with containerd using the portable command-line tool built for Kubernetes container runtimes: `crictl` . `crictl` supports common functionalities to view containers and images, read logs, and execute commands in the containers. Refer to the [crictl user guide](https://kubernetes.io/docs/tasks/debug/debug-cluster/crictl) for the complete set of supported features and usage information.\nFor Windows Server nodes, the containerd daemon runs as a Windows service named `containerd` .\nLogs are available as follows:\n- Windows:`C:\\etc\\kubernetes\\logs\\containerd.log`\n- Linux: run`journalctl -u containerd`\nYou can also view logs for Windows and Linux nodes in [Logs Explorer](/logging/docs/view/logs-explorer-interface) under `LOG NAME: \"container-runtime\"` .\n## Known issues and troubleshooting\nFor troubleshooting and for known issues with workarounds, refer to [Troubleshooting the container runtime](/kubernetes-engine/docs/troubleshooting/container-runtime) .\n## What's next\n- Learn more about the containerd integration in the [Kubernetes 1.11 announcement](https://kubernetes.io/blog/2018/05/24/kubernetes-containerd-integration-goes-ga/) . For even more information, visit the documentation for [containerd](https://github.com/containerd/containerd) and the [CRI plugins](https://github.com/containerd/containerd/blob/master/docs/PLUGINS.md) .\n- Review the migration from Dockershim information on [kubernetes.io](https://kubernetes.io/docs/tasks/administer-cluster/migrating-from-dockershim/) .\n- Read about [Dockershim deprecation by Kubernetes](https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/2221-remove-dockershim/README.md) .\n- Learn how you can secure your apps with [gVisor](/blog/products/containers-kubernetes/how-gvisor-protects-google-cloud-services-from-cve-2020-14386) on containerd.\n- Read about the benefits of using [Cloud Build](/build) to build images securely and reliably on Google Cloud to replace a custom solution that might require Docker.", "guide": "Google Kubernetes Engine (GKE)"}