{"title": "Google Kubernetes Engine (GKE) - Use external identity providers to authenticate to GKE", "url": "https://cloud.google.com/kubernetes-engine/docs/how-to/oidc", "abstract": "# Google Kubernetes Engine (GKE) - Use external identity providers to authenticate to GKE\nThis page explains how to configure an external identity provider to authenticate into Google Kubernetes Engine (GKE) clusters.\n", "content": "## Overview\nIdentity Service for GKE extends your existing identity solutions for authentication into your GKE clusters. With support for [OpenID Connect](https://developers.google.com/identity/protocols/OpenIDConnect) (OIDC), you can manage access to Kubernetes clusters by using the standard procedures in your organization for creating, enabling, and disabling user accounts. Identity Service for GKE is limited to OIDC identity providers.\n## Before you begin\n- This topic assumes that you are familiar with the following authentication and OpenID concepts:- [OAuth 2.0](https://oauth.net/2/) \n- [OpenID Connect](https://openid.net/connect/) \n- [scopes](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) \n- [claims](https://openid.net/specs/openid-connect-core-1_0.html#IDToken) \n- Headless systems are unsupported. A browser-based authentication flow is used to prompt you for consent and authorize your user account.\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.## Who uses Identity Service for GKE\nThe tasks in this document apply to you if you are one of the following:\n- **Cluster administrator** : Creates one or more user clusters and create authentication configuration files for developers who use the clusters.\n- **Developer** : Runs workloads on one or more clusters and uses OIDC to authenticate.## How it works\nTo set up and use Identity Service for GKE on your GKE cluster, **cluster administrators** do the following:\n- [Enable Identity Service for GKE on a cluster](#enable-oidc) .\n- [Configure Identity Service for GKE](#configuring_on_a_cluster) .\n- [Create an RBAC policy for your cluster](#rbac) .\nAfter cluster administrators configure Identity Service for GKE, **developers** can [log in and authenticate to the cluster](#logging_in_and_authenticating_to_the_cluster) .\n## Enable Identity Service for GKE on a cluster\nThis section is for [cluster administrators](#personas) .\nBy default, Identity and Access Management (IAM) is configured as the identity provider for cluster authentication. If you want to use OIDC with third-party identity providers, you can enable Identity Service for GKE on new or existing clusters using the Google Cloud CLI.\n**Note:** For Identity Service for GKE to function correctly, GKE deploys Pods to your nodes that have elevated [RBAC permissions](https://kubernetes.io/docs/reference/access-authn-authz/authorization/#determine-the-request-verb) , such as the ability to impersonate users and groups. These permissions are required for Identity Service for GKE to facilitate identity validation and communication based on your configuration.\n### Enable Identity Service for GKE on a new cluster\nTo create a cluster with Identity Service for GKE enabled, run the following command:\n```\ngcloud container clusters create CLUSTER_NAME \\\u00a0 \u00a0 --enable-identity-service\n```\nReplace `` with the name of your new cluster.\n### Enable Identity Service for GKE on an existing cluster\nTo enable Identity Service for GKE on an existing cluster, run the following command\n```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --enable-identity-service\n```\nReplace `` with the name of your cluster.\n## Kubernetes objects created by Identity Service for GKE\nThe following table describes the Kubernetes objects created when you enable Identity Service for GKE on a cluster:\n| Kubernetes objects  | Kubernetes objects.1                                                                            |\n|:------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| anthos-identity-service | Namespace Used for the Identity Service for GKE deployments.                                                                  |\n| kube-public    | Namespace Used for the default client configuration file.                                                                  |\n| gke-oidc-envoy   | LoadBalancer The endpoint for OIDC requests. External by default. If created in a private cluster, or a cluster with a strict network policy, the endpoint is internal to the cluster Virtual Private Cloud. Created in the anthos-identity-service namespace.                |\n| gke-oidc-service  | ClusterIP Facilitates communication between the gke-oidc-envoy Deployment and the gke-oidc-service Deployment. Created in the anthos-identity-service namespace.                                        |\n| gke-oidc-envoy   | Deployment Runs a proxy exposed to the gke-oidc-envoy LoadBalancer. Communicates with gke-oidc-service to validate identity tokens. Acts as a proxy for the Kubernetes API server, and impersonates users when passing on requests to the API server. Created in the anthos-identity-service namespace.      |\n| gke-oidc-service  | Deployment Validates identity tokens, and provides a validating admission webhook for ClientConfig resources. Created in the anthos-identity-service namespace.                                        |\n| gke-oidc-operator  | Deployment Reconciles the client configuration and the gke-oidc-envoy LoadBalancer. Created in the anthos-identity-service namespace.                                               |\n| gke-oidc-certs   | Secret Contains the cluster certificate authority (CA) and TLS certificates for the LoadBalancer. Created in the anthos-identity-service namespace                                            |\n| default     | ClientConfig CRD Contains OIDC parameters such as preferred authentication method, identity provider configuration, and user and group claims mappings. Used for identity token validation. Used by cluster administrators to configure OIDC settings before distributing to developers. Created in the kube-public namespace |\n## Configure Identity Service for GKE\nThis section is for [cluster administrators](#personas) .\nYou can configure Identity Service for GKE parameters by downloading and modifying the `default` ClientConfig.\n- Download the `default` ClientConfig:```\nkubectl get clientconfig default -n kube-public -o yaml > client-config.yaml\n```\n- Update the `spec.authentication` section with your preferred settings:```\napiVersion: authentication.gke.io/v2alpha1kind: ClientConfigmetadata:\u00a0 name: default\u00a0 namespace: kube-publicspec:\u00a0 name: cluster-name\u00a0 server: https://192.168.0.1:6443\u00a0 authentication:\u00a0 - name: oidc\u00a0 \u00a0 oidc:\u00a0 \u00a0 \u00a0 clientID: CLIENT_ID\u00a0 \u00a0 \u00a0 certificateAuthorityData: OIDC_PROVIDER_CERTIFICATE\u00a0 \u00a0 \u00a0 extraParams: EXTRA_PARAMS\u00a0 \u00a0 \u00a0 issuerURI: \u00a0ISSUER_URI\u00a0 \u00a0 \u00a0 cloudConsoleRedirectURI: https://console.cloud.google.com/kubernetes/oidc\u00a0 \u00a0 \u00a0 kubectlRedirectURI: KUBECTL_REDIRECT_URL\u00a0 \u00a0 \u00a0 scopes: SCOPES\u00a0 \u00a0 \u00a0 userClaim: USER\u00a0 \u00a0 \u00a0 groupsClaim: GROUPS\u00a0 \u00a0 \u00a0 userPrefix: USER_PREFIX\u00a0 \u00a0 \u00a0 groupPrefix: GROUP_PREFIX\n```Replace the following:- ``: the ID of the client application that makes authentication requests to the OIDC provider.\n- ``: (Optional) a [PEM certificate](https://wikipedia.org/wiki/Privacy-Enhanced_Mail) for the OIDC provider. This field might be useful if your OIDC provider uses self-signed certificates. Identity Service for GKE includes a set of public roots by default.\n- ``: additional key-value parameters to send to the OIDC provider.- To authorize groups, use`resource=token-groups-claim`.\n- To authenticate Microsoft Azure and Okta, use`prompt=consent`.\n- For Cloud Identity, use`prompt=consent,access_type=offline`.\n- ``: the URL to send OIDC authorization requests, such as`https://example.com/adfs`. The Kubernetes API server uses this URL to discover public keys for verifying tokens. The URI must use HTTPS. For Cloud Identity, use`https://accounts.google.com`.\n- ``: the redirect URL that`kubectl oidc login`uses for authorization. This is typically of the format`http://localhost:` `` `/callback`, where``is any port above`1024`that will be available on developer workstations, for example`http://localhost:10000/callback`. You must register the URL with your OIDC provider as an authorized redirect URL for the client application. If you use Google Identity as your OIDC provider, read [Set a redirect URI](https://developers.google.com/identity/protocols/oauth2/openid-connect) for instructions.\n- ``: the additional scopes to send to the OIDC provider.- Microsoft Azure and Okta require the`offline_access`scope.\n- For Cloud Identity, use`openid, email`to obtain ID tokens that contain the email address in the`email`claim.\n- ``: the user claim from the identity token.\n- ``: the group claim from the identity token.\n- ``: prefix prepended to user claims to prevent conflicts with existing names. By default, an issuer prefix is appended to the`userID`given to the Kubernetes API server (unless the user claim is`email`). The resulting user identifier is`` `#` ``. We recommend using a prefix, but you can disable the prefix by setting``to`-`.\n- ``: prefix prepended to group claims to prevent clashes with existing names. For example, if you have two groups named`foobar`, add a prefix`gid-`. The resulting group is`gid-foobar`.\n- Apply the updated configuration:```\nkubectl apply -f client-config.yaml\n```After you apply this configuration, Identity Service for GKE runs inside your cluster and serves requests behind the `gke-oidc-envoy` load balancer. The IP address in the `spec.server` field must be the IP address of the load balancer. If you change the `spec.server` field, `kubectl` commands might fail.\n- Make a copy of the `client-config.yaml` configuration file:```\ncp client-config.yaml login-config.yaml\n```\n- Update the `login-config.yaml` configuration file with the `clientSecret` setting in the `spec.authentication.oidc` section.```\nclientSecret: CLIENT_SECRET\n```Replace `` with the shared secret between the OIDC client application and the OIDC provider.\n- Distribute the updated `login-config.yaml` file to your developers.\n### Configure Identity Service for GKE on clusters with strict policies\nTo configure Identity Service for GKE to work as expected on clusters that have strict network policies in place, such as private clusters, do the following:\n- [Add a firewall rule](/kubernetes-engine/docs/how-to/private-clusters#add_firewall_rules) for TCP port`15000`to allow your control plane to communicate with the`ClientConfig`validation webhook.\n- If the`gke-oidc-envoy`is created as an internal load balancer, [expose it on your VPC](/load-balancing/docs/internal/internal-tcp-udp-lb-and-other-networks) .\n- If you have policies that deny traffic within your cluster, add a firewall rule for TCP port`8443`to allow the`gke-oidc-envoy`deployment to communicate with the`gke-oidc-service`deployment.\nIdentity Service for GKE component version 0.2.20 and later does not use TCP port `15000` . If your component version is 0.2.20 or later, you don't need to add a firewall rule for port `15000` . To check your component version, run the following command:\n```\nkubectl describe deployment gke-oidc-envoy -n anthos-identity-service \\\u00a0 \u00a0 | grep \"components.gke.io/component-name: gke-oidc\" -A1\n```\n### Add custom properties to the load balancer\nAfter you configure Identity Service for GKE, you can add custom annotations and properties, such as a static IP address, to the `gke-oidc-envoy` load balancer. To edit the `gke-oidc-envoy` service, run the following command:\n```\nkubectl edit service gke-oidc-envoy -n anthos-identity-service\n```\nConsult the documentation on how to [configure TCP/UDP load balancing for GKE](/kubernetes-engine/docs/how-to/service-parameters) .\n## Create an RBAC policy for your cluster\nThis section is for [cluster administrators](#personas) .\nAdministrators can use [Kubernetes role-based access control (RBAC)](https://kubernetes.io/docs/reference/access-authn-authz/rbac/) to grant access to authenticated cluster users. To configure RBAC for your cluster, you must grant RBAC roles for each developer. To grant access to resources in a particular namespace, create a [Role](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#role-v1-rbac-authorization-k8s-io) and a [RoleBinding](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#rolebinding-v1-rbac-authorization-k8s-io) . To grant access to resources across an entire cluster, create a [ClusterRole](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#clusterrole-v1-rbac-authorization-k8s-io) and a [ClusterRoleBinding](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#clusterrolebinding-v1-rbac-authorization-k8s-io) .\nFor example, consider a user who needs to view all Secret objects across the cluster. The following steps grant the required RBAC roles to this user.\n- Save the following ClusterRole manifest as `secret-viewer-cluster-role.yaml` . A person who is granted this role can get, watch, and list any Secret in the cluster.```\napiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata:\u00a0 name: secret-viewerrules:- apiGroups: [\"\"]\u00a0 # The resource type for which access is granted\u00a0 resources: [\"secrets\"]\u00a0 # The permissions granted by the ClusterRole\u00a0 verbs: [\"get\", \"watch\", \"list\"]\n```\n- Apply the ClusterRole manifest:```\nkubectl apply -f secret-viewer-cluster-role.yaml\n```\n- Save the following ClusterRoleBinding manifest as `secret-viewer-cluster-role-binding.yaml` . The binding grants the `secret-viewer` role to a user name defined in the client configuration file.```\napiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:\u00a0 name: \u00a0people-who-view-secretssubjects:- kind: User\u00a0 name: ISSUER_URI#USER\u00a0 apiGroup: rbac.authorization.k8s.ioroleRef:\u00a0 kind: ClusterRole\u00a0 name: secret-viewer\u00a0 apiGroup: rbac.authorization.k8s.io\n```Replace the following:- ``: the issuer URI from`spec.authentication.oidc.issuerURI`in the client configuration file.\n- ``: the user identifier in the token under the claim name configured in`spec.authentication.oidc.userClaim`in the client configuration file.\n- Apply the ClusterRoleBinding manifest:```\nkubectl apply -f secret-viewer-cluster-role-binding.yaml\n```## Log in and authenticate to the cluster\nThis section is for [developers](#personas) .\nWhen you receive the OIDC configuration file from your administrator, you can authenticate to your clusters.\n- Download the `login-config.yaml` file provided by your administrator.\n- Install the [Google Cloud CLI](/sdk/install) SDK, which offers a separate OIDC component. You can install this by running the following command:```\ngcloud components install kubectl-oidc\n```\n- Authenticate into your cluster:```\nkubectl oidc login --cluster=CLUSTER_NAME --login-config=login-config.yaml\n```A web browser opens to complete the authentication process.\n- After you are authenticated, you can run `kubectl` commands, for example:```\nkubectl get pods\n```## Disable Identity Service for GKE\nThis section is for [cluster administrators](#personas) .\nYou can disable Identity Service for GKE with the gcloud CLI. To disable Identity Service for GKE, run the following command:\n```\ngcloud container clusters update CLUSTER_NAME \\\u00a0 \u00a0 --no-enable-identity-service\n```\n## What's next\n- Learn more about [deploying workloads](/kubernetes-engine/docs/how-to/deploying-workloads-overview) .\n- Learn more about [OpenID Connect](https://openid.net/connect/) .\n- Learn more about [scopes and claims](https://developer.okta.com/blog/2017/07/25/oidc-primer-part-1#key-concepts-scopes-claims-and-response-types) .", "guide": "Google Kubernetes Engine (GKE)"}