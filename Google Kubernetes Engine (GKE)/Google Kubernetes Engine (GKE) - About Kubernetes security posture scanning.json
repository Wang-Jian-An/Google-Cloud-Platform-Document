{"title": "Google Kubernetes Engine (GKE) - About Kubernetes security posture scanning", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/about-configuration-scanning", "abstract": "# Google Kubernetes Engine (GKE) - About Kubernetes security posture scanning\nThis page describes , which is a capability of the [security posture dashboard](/kubernetes-engine/docs/concepts/about-security-posture-dashboard) that detects common security configuration concerns and actionable security bulletins in your Kubernetes workloads. To enable and use Kubernetes security posture scanning, see [Automatically audit workloads for configuration issues](/kubernetes-engine/docs/how-to/protect-workload-configuration#overview) .\nKubernetes security posture scanning provides the following functionality:\n- [Workload configuration auditing](#why-use-configuration-scanning) \n- [Actionable security bulletin surfacing](#security-bulletins) ", "content": "## Pricing\nKubernetes security posture scanning is offered at no extra charge in GKE.\nEntries added to Cloud Logging are subject to [Cloud Logging pricing](/stackdriver/pricing#logging-costs) .\n## About workload configuration auditing\nThe workloads that you deploy on GKE should ideally have a hardened configuration that limits their attack surface. Checking workloads across clusters for configuration issues can be difficult to do manually at scale. You can use the security posture dashboard to automatically audit the configuration of all your running workloads across multiple clusters and return actionable, scored results and opinionated recommendations to improve your security posture.\nWorkload configuration auditing checks each deployed workload against a subset of policies in the [Pod Security Standards](https://kubernetes.io/docs/concepts/security/pod-security-standards/) . Workload configuration auditing happens on Google's infrastructure and doesn't use compute resources on your nodes.\n### Benefits of workload configuration auditing\n- Automate detection of known configuration concerns across all workloads.\n- Get actionable recommendations to improve security posture.\n- Use the Google Cloud console to get a high-level view of configuration concerns.\n- Use Logging to get an auditable trail of concerns for better reporting and observability.\n### How workload configuration auditing works\nFor each eligible deployed workload, GKE continuously scans the workload's specification and compares the fields and values to the controls defined in the underlying security policy. For example, a Pod with `spec.containers.securityContext.privileged=true` violates the Baseline Pod Security Standard, and a Pod with the `spec.securityContext.runAsNonRoot` field set to `false` violates the Restricted standard. For a list of the security policies that GKE checks, refer to [What does workload configuration auditing check?](#what-checks) .\nAfter scanning and discovering concerns, GKE rates the severity of discovered configuration issues based on the built-in security hardening measures. GKE assigns a [severity rating](/kubernetes-engine/docs/concepts/about-security-posture-dashboard#severity-ratings) that can inform the speed with which you respond to the concern. The Google Cloud console displays the results and recommended actions you can take to fix the concerns. GKE also adds entries to Cloud Logging for tracing and auditing.\n### What does workload configuration auditing check?\n| Concern                                                                                          | Fields                                               | Allowed values                                    | Severity |\n|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------|\n| Host namespaces Pods that share host namespaces allow Pod processes to communicate with host processes and gather host information, which could lead to a container escape.                                                 | spec.hostNetwork spec.hostIPC spec.hostPID                                      | Undefined or nil false                                  | High  |\n| Privileged containers Privileged containers allow nearly unrestricted host access. They share namespaces with the host, and lack control group, seccomp, AppArmor, and capability restrictions.                                            | spec.containers[*].securityContext.privileged spec.initContainers[*].securityContext.privileged spec.ephemeralContainers[*].securityContext.privileged           | Undefined or nil false                                  | High  |\n| Host port access Exposing a host port to a container potentially allows the container to intercept network traffic to a host service using that port or to bypass network access control rules, such as the rules in a NetworkPolicy.                                  | spec.containers[*].ports[*].hostPort spec.initContainers[*].ports[*].hostPort spec.ephemeralContainers[*].ports[*].hostPort                  | Undefined or nil 0                                   | High  |\n| Non-default capabilities A container has assigned capabilities that could allow a container escape.                                                                   | spec.containers[*].securityContext.capabilities.add spec.initContainers[*].securityContext.capabilities.add spec.ephemeralContainers[*].securityContext.capabilities.add       | Undefined or nil AUDIT_WRITE CHOWN DAC_OVERRIDE FOWNER FSETID KILL MKNOD NET_BIND_SERVICE SETFCAP SETGID SETPCAP SETUID SYS_CHROOT       | Medium  |\n| Mounting host path volumes hostPath volumes mount files or directories from the host. These volumes present security risks that could lead to container escape.                                                    | spec.volumes[*].hostPath                                           | Undefined or nil                                   | Medium  |\n| Non-default /proc mask The default /proc mount type masks certain paths in /proc to avoid exposure of paths that could lead to information leakage or container escape. Using a non-default type increases these risks.                                      | spec.containers[*].securityContext.procMount spec.initContainers[*].securityContext.procMount spec.ephemeralContainers[*].securityContext.procMount            | Undefined or nil Default                                 | Medium  |\n| Unsafe sysctls mask A Pod can be configured to allow modification of unsafe kernel parameters using the /proc/sys virtual file system. Unsafe parameters don't support namespacing, don't properly isolate their effect between Pods, could harm the node's health, or might allow the Pod to gain resources beyond its limits.           | spec.securityContext.sysctls[*].name                                        | Undefined or nil kernel.shm_rmid_forced net.ipv4.ip_local_port_range net.ipv4.ip_unprivileged_port_start net.ipv4.tcp_syncookies net.ipv4.ping_group_range | Medium  |\n| Running as non-root You can explicitly allow a container to run as the root user if the runAsUser or the USER directive in the image specifies the root user. The lack of preventive security controls when running as the root user increases the risk of container escape.                        | spec.securityContext.runAsNonRoot spec.containers[*].securityContext.runAsNonRoot spec.initContainers[*].securityContext.runAsNonRoot spec.ephemeralContainers[*].securityContext.runAsNonRoot | true                                      | Medium  |\n| Privilege escalation A container can be explicitly configured to allow privilege escalation on execution. This permits a process created within the container by executing a set-user-id, set-group-id, or file capability executable to gain the privileges specified by the executable. The lack of preventive security control increases the risk of container escape. | spec.containers[*].securityContext.allowPrivilegeEscalation spec.initContainers[*].securityContext.allowPrivilegeEscalation spec.ephemeralContainers[*].securityContext.allowPrivilegeEscalation | false                                      | Medium  |\n| Unconfined AppArmor profile A container can be explicitly configured to be unconfined by AppArmor. This ensures that no AppArmor profile is applied to the container and is thus not constrained by them. The disabled preventive security control increases the risk of container escape.                     | metadata.annotations[\"container.apparmor.security.beta.kubernetes.io/*\"]                               | false                                      | Low  |\n## About security bulletin surfacing\n**    Preview    \u2014 Security bulletin surfacing ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nWhen a vulnerability is discovered in GKE, we patch the vulnerability and publish a security bulletin for the vulnerability. For information about identification, patching, and timelines, refer to [GKE security patching](/kubernetes-engine/docs/resources/security-patching) .\nThe security posture dashboard displays security bulletins that affect your clusters, workloads, and Standard mode node pools. This feature is a part of the capability of the security posture dashboard and is automatically enabled when you create an Autopilot or Standard cluster. To enable Kubernetes security posture scanning, use the instructions in [Automatically audit workloads for configuration issues](/kubernetes-engine/docs/how-to/protect-workload-configuration) .\nThe Google Cloud console displays details such as affected clusters, versions, and recommended patch versions for upgrades to mitigate the vulnerability. You only see bulletins for which a mitigation is available in your cluster's Google Cloud region or zone.\nTo view bulletins for clusters that you enrolled in Kubernetes security posture scanning, go to the security posture dashboard:\n[Go to Security Posture](https://console.cloud.google.com/kubernetes/list)\nAny available bulletins that affect your environment appear in the **Security bulletins** section.\n## What's next\n- [Learn about the security posture dashboard](/kubernetes-engine/docs/concepts/about-security-posture-dashboard) .\n- [Learn how to implement workload configuration auditing](/kubernetes-engine/docs/how-to/protect-workload-configuration) .\n- [Learn how to set up automatic vulnerability scanning of container images](/kubernetes-engine/docs/how-to/security-posture-vulnerability-scanning) .", "guide": "Google Kubernetes Engine (GKE)"}