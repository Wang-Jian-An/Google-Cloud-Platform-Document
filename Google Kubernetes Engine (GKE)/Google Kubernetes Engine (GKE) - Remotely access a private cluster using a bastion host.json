{"title": "Google Kubernetes Engine (GKE) - Remotely access a private cluster using a bastion host", "url": "https://cloud.google.com/kubernetes-engine/docs/tutorials/private-cluster-bastion", "abstract": "# Google Kubernetes Engine (GKE) - Remotely access a private cluster using a bastion host\nThis tutorial shows you how to access a [private cluster](/kubernetes-engine/docs/concepts/private-cluster-concept) in Google Kubernetes Engine (GKE) over the internet by using a [bastion host](https://wikipedia.org/wiki/Bastion_host) .\nYou can create GKE private clusters with [no client access to the public endpoint](/kubernetes-engine/docs/how-to/private-clusters#private_cp) . This access option improves the cluster security by preventing all internet access to the control plane. However, disabling access to the public endpoint prevents you from interacting with your cluster remotely, unless you add the IP address of your remote client as an [authorized network](/kubernetes-engine/docs/how-to/authorized-networks) .\nThis tutorial shows you how to set up a , which is a special-purpose host machine designed to withstand attack. The bastion host uses [Tinyproxy](http://tinyproxy.github.io/) to forward client traffic to the cluster. You use [Identity-Aware Proxy (IAP)](/iap) to securely access the bastion host from your remote client.\n **Note** : This tutorial provides instructions for working with this app: Tinyproxy. The instructions might not represent newer versions of the app. For more information, see the documentation: [Tinyproxy](https://github.com/tinyproxy/tinyproxy) .", "content": "## Objectives\n- Create a private cluster with no access to the public endpoint.\n- Deploy a Compute Engine virtual machine (VM) to act as a bastion host in the cluster subnet.\n- Use IAP to connect a remote client to the cluster over the internet.\n## CostsIn this document, you use the following billable components of Google Cloud:- [GKE](/kubernetes-engine/pricing) \n- [Identity-Aware Proxy](/iap/pricing) \n- [Compute Engine](/compute/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n## Create a private clusterCreate a new private cluster with no client access to the public endpoint. Place the cluster in its own subnet. You can do this using the Google Cloud CLI or the Google Cloud console.\nRun the following command:\n```\ngcloud container clusters create-auto CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION \\\u00a0 \u00a0 --create-subnetwork=name=SUBNET_NAME \\\u00a0 \u00a0 --enable-master-authorized-networks \\\u00a0 \u00a0 --enable-private-nodes \\\u00a0 \u00a0 --enable-private-endpoint\n```\nReplace the following:- ``: the name of the new cluster.\n- ``: the [Compute Engine region](/compute/docs/regions-zones#available) for the cluster.\n- ``: the name of the new subnetwork in which you want to place the cluster.\n **Create a Virtual Private Cloud subnetwork** - Go to the **VPC networks** page in the Google Cloud console. [Go to VPC networks](https://console.cloud.google.com/networking/networks/list) \n- Click the **default** network.\n- In the **Subnets** section, click **Add subnet** .\n- On the **Add a subnet** dialog, specify the following:- **Name** : A name for the new subnet.\n- **Region** : A region for the subnet. This must be the same as the cluster region.\n- **IP address range** : Specify`10.2.204.0/22`or another range that doesn't conflict with other ranges in the VPC network.\n- For **Private Google Access** , select the **On** option.\n- Click **Add** .\n **Create a private cluster** - Go to the **Google Kubernetes Engine** page in the Google Cloud console. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes/list) \n- Click add_box **Create** .\n- Click **Configure** for **GKE Autopilot** .\n- Specify a **Name** and **Region** for the new cluster. The region must be the same as the subnet.\n- In the **Networking** section, select the **Private cluster** option.\n- Clear the **Access control plane using its external IP address** checkbox.\n- From the **Node subnet** drop-down list, select the subnet you created.\n- Optionally, configure other settings for the cluster.\n- Click **Create** .\nYou can also use a GKE Standard cluster with the [--master-ipv4-cidr flag](/sdk/gcloud/reference/container/clusters/create#--master-ipv4-cidr) specified.## Create a bastion host VMCreate a Compute Engine VM within the private cluster internal network to act as a bastion host that can manage the cluster.\nCreate a Compute Engine VM:\n```\ngcloud compute instances create INSTANCE_NAME \\\u00a0 \u00a0 --zone=COMPUTE_ZONE \\\u00a0 \u00a0 --machine-type=e2-micro \\\u00a0 \u00a0 --network-interface=no-address,network-tier=PREMIUM,subnet=SUBNET_NAME\n```\nReplace the following:- ``: the name of the VM.\n- ``: the Compute Engine zone for the VM. Place this in the same region as the cluster.\n- `` : the subnetwork in which you want to place the VM. **Note:** We recommend that you create the VM in the same VPC subnet as the cluster. If you create the VM in a different subnet, add the VM IP address range as an [authorized network](/kubernetes-engine/docs/how-to/authorized-networks#add) for the cluster.\n- Go to the **VM instances** page in the Google Cloud console. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Click **Create instance** .\n- Specify the following:- **Name** : the name of your VM.\n- **Region** and **Zone** : the region and zone of your VM. Use the same region as your cluster.\n- **Machine type** : a machine type. Choose a small machine type, such as`e2-micro`.\n- For **Network interfaces** , select the same VPC network and subnet as the cluster.\n- Optionally, configure other settings for the instance.\n- Click **Create** .\n **Note:** Create the VM in the same VPC subnet as the cluster. If you create the VM in a different subnet, add the VM IP address range as an [authorized network](/kubernetes-engine/docs/how-to/authorized-networks#add) for the cluster.\n **Note:** You should automate bastion host setup and upgrades using a tool like [Terraform](https://www.terraform.io/docs) .## Create firewall ruleTo allow IAP to connect to your bastion host VM, [create a firewall rule](/iap/docs/using-tcp-forwarding#create-firewall-rule) .## Deploy the proxy **Note:** Some commands in this section require administrator privileges.\nWith the bastion host and the private cluster configured, you must deploy a proxy daemon in the host to forward traffic to the cluster control plane. For this tutorial, you install [Tinyproxy](http://tinyproxy.github.io/) .- Start a session into your VM:```\ngcloud compute ssh INSTANCE_NAME --tunnel-through-iap --project=PROJECT_ID\n```\n- Install Tinyproxy:```\nsudo apt install tinyproxy\n```\n- Open the Tinyproxy configuration file:```\nsudo vi /etc/tinyproxy/tinyproxy.conf\n```\n- In the file, do the following:- Verify that the port is`8888`.\n- Search for the `Allow` section:```\n\u00a0 /Allow 127\n```\n- Add the following line to the `Allow` section:```\n Allow localhost\n```\n- Save the file and restart Tinyproxy:```\nsudo service tinyproxy restart\n```\n- Exit the session:```\nexit\n```\n## Connect to your cluster from the remote clientAfter configuring Tinyproxy, you must set up the remote client with cluster credentials and specify the proxy. Do the following on the remote client:- Get credentials for the cluster:```\ngcloud container clusters get-credentials CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION \\\u00a0 \u00a0 --project=PROJECT_ID\n```Replace the following:- ``: the name of the private cluster.\n- ``: the region of the cluster.\n- ``: the ID of the Google Cloud project of the cluster.\n- Tunnel to the bastion host using IAP:```\ngcloud compute ssh INSTANCE_NAME \\\u00a0 \u00a0 --tunnel-through-iap \\\u00a0 \u00a0 --project=PROJECT_ID \\\u00a0 \u00a0 --zone=COMPUTE_ZONE \\\u00a0 \u00a0 --ssh-flag=\"-4 -L8888:localhost:8888 -N -q -f\"\n```\n- Specify the proxy:```\nexport HTTPS_PROXY=localhost:8888kubectl get ns\n```The output is a list of namespaces in the private cluster.\n## Stop listening on the remote clientIf you want to revert the change on the remote client at any time, you should end the listener process on TCP port 8888. The command to do this is different depending on the client operating system.\n```\nnetstat -lnpt | grep 8888 | awk '{print $7}' | grep -o '[0-9]\\+' | sort -u | xargs sudo kill\n```## Troubleshooting\n### Firewall restrictions in enterprise networksIf you're on an enterprise network with a strict firewall, you might not be able to complete this tutorial without requesting an exception. If you request an exception, the source IP range for the bastion host is `35.235.240.0/20` by default.## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n### Delete individual resources\n- Delete the bastion host that you deployed in this tutorial:```\ngcloud compute instances delete INSTANCE_NAME \\\u00a0 \u00a0 --zone=COMPUTE_ZONE\n```\n- Delete the cluster:```\ngcloud container clusters delete CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION\n```\n- Delete the subnet:```\ngcloud compute networks subnets delete SUBNET_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION\n```", "guide": "Google Kubernetes Engine (GKE)"}