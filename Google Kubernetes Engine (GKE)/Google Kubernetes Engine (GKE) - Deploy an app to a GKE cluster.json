{"title": "Google Kubernetes Engine (GKE) - Deploy an app to a GKE cluster", "url": "https://cloud.google.com/kubernetes-engine/docs/deploy-app-cluster", "abstract": "# Google Kubernetes Engine (GKE) - Deploy an app to a GKE cluster\n# Deploy an app to a GKE clusterIn this quickstart, you deploy a simple web server [containerized application](/kubernetes-engine/docs/concepts/kubernetes-engine-overview#workloads) to a Google Kubernetes Engine (GKE) cluster. You will learn how to create a cluster, and how to deploy the application to the cluster so that it can be accessed by users.\nThis quickstart assumes a basic understanding of [Kubernetes](https://kubernetes.io) .", "content": "## Before you begin\nTake the following steps to enable the Kubernetes Engine API:\n## Launch Cloud ShellIn this tutorial you will use [Cloud Shell](/shell/docs) , which is a shell environment for managing resources hosted on Google Cloud.\nCloud Shell comes preinstalled with the [Google Cloud CLI](/sdk/gcloud) and [kubectl](https://kubernetes.io/docs/reference/kubectl/) command-line tool. The gcloud CLI provides the primary command-line interface for Google Cloud, and `kubectl` provides the primary command-line interface for running commands against Kubernetes clusters.\nLaunch Cloud Shell:- Go to the Google Cloud console. [Google Cloud console](https://console.cloud.google.com/) \n- From the upper-right corner of the console, click the **Activate Cloud Shell** button: \nA Cloud Shell session opens inside a frame lower on the console. You use this shell to run `gcloud` and `kubectl` commands. Before you run commands, set your default project in the Google Cloud CLI using the following command:\n```\ngcloud config set project PROJECT_ID\n```\nReplace `` with your [project ID](https://support.google.com/cloud/answer/6158840) .## Create a GKE clusterA [cluster](/kubernetes-engine/docs/concepts/cluster-architecture) consists of at least one machine and multiple worker machines called . Nodes are [Compute Engine virtual machine (VM) instances](/compute/docs/instances) that run the Kubernetes processes necessary to make them part of the cluster. You deploy applications to clusters, and the applications run on the nodes.\nCreate an Autopilot cluster named `hello-cluster` :\n```\ngcloud container clusters create-auto hello-cluster \\\u00a0 \u00a0 --location=us-central1\n```\n **Note:** It might take several minutes to finish creating the cluster.\n### Get authentication credentials for the clusterAfter creating your cluster, you need to get authentication credentials to interact with the cluster:\n```\ngcloud container clusters get-credentials hello-cluster \\\u00a0 \u00a0 --location us-central1\n```\nThis command configures `kubectl` to use the cluster you created.## Deploy an application to the clusterNow that you have created a cluster, you can deploy a [containerized application](/kubernetes-engine/docs/concepts/kubernetes-engine-overview#workloads) to it. For this quickstart, you can deploy our example web application, `hello-app` .\nGKE uses Kubernetes objects to create and manage your cluster's resources. Kubernetes provides the [Deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/) object for deploying stateless applications like web servers. [Service](/kubernetes-engine/docs/concepts/service) objects define rules and load balancing for accessing your application from the internet.\n### Create the DeploymentTo run `hello-app` in your cluster, you need to deploy the application by running the following command:\n```\nkubectl create deployment hello-server \\\u00a0 \u00a0 --image=us-docker.pkg.dev/google-samples/containers/gke/hello-app:1.0\n```\nThis Kubernetes command, [kubectl create deployment](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#create) , creates a Deployment named `hello-server` . The Deployment's [Pod](https://kubernetes.io/docs/concepts/workloads/pods) runs the `hello-app` container image.\nIn this command:- `--image`specifies a container image to deploy. In this case, the command pulls the example image from an [Artifact Registry](/artifact-registry/docs) repository,`us-docker.pkg.dev/google-samples/containers/gke/hello-app`.`:1.0`indicates the specific image version to pull. If you don't specify a version, the image with the [default tag](/architecture/best-practices-for-building-containers#properly_tag_your_images) `latest`is used.\n### Expose the DeploymentAfter deploying the application, you need to expose it to the internet so that users can access it. You can expose your application by creating a Service, a Kubernetes resource that exposes your application to external traffic.\nTo expose your application, run the following [kubectl expose](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#expose) command:\n```\nkubectl expose deployment hello-server \\\u00a0 \u00a0 --type LoadBalancer \\\u00a0 \u00a0 --port 80 \\\u00a0 \u00a0 --target-port 8080\n```\nPassing in the `--type LoadBalancer` flag creates a Compute Engine load balancer for your container. The `--port` flag initializes public port 80 to the internet and the `--target-port` flag routes the traffic to port 8080 of the application.\nLoad balancers are billed per Compute Engine's [load balancer pricing](/compute/pricing#lb) .\n### Inspect and view the application\n- Inspect the running Pods by using [kubectl get pods](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get) :```\nkubectl get pods\n```You should see one `hello-server` Pod running on your cluster.\n- Inspect the `hello-server` Service by using [kubectl get service](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get) :```\nkubectl get service hello-server\n```From this command's output, copy the Service's external IP address from the `EXTERNAL-IP` column. **Note:** You might need to wait several minutes before the Service's external IP address populates. If the application's external IP is `<pending>` , run `kubectl get` again.\n- View the application from your web browser by using the external IP address with the exposed port:```\nhttp://EXTERNAL_IP\n```\nYou have just deployed a containerized web application to GKE.## Clean upTo avoid incurring charges to your Google Cloud account for   the resources used on this page, follow these steps.- Delete the application's Service by running [kubectl delete](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#delete) :```\nkubectl delete service hello-server\n```This command deletes the Compute Engine load balancer that you created when you exposed the Deployment.\n- Delete your cluster by running [gcloud container clusters delete](/sdk/gcloud/reference/container/clusters/delete) :```\ngcloud container clusters delete hello-cluster \\\u00a0 \u00a0 --location us-central1\n```\n## Optional: hello-app code review`hello-app` is a simple web server application that consists of two files: `main.go` and a `Dockerfile` .\n`hello-app` is packaged as a [Docker](https://docker.com/) container image. Container images are stored in any Docker image registry, such as Artifact Registry. We host `hello-app` in a Artifact Registry repository at `us-docker.pkg.dev/google-samples/containers/gke/hello-app` .\n`main.go` is a web server implementation written in the [Go programming language](https://golang.org) . The server responds to any HTTP request with a \"Hello, world!\" message.\n [  quickstarts/hello-app/main.go ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/hello-app/main.go) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/hello-app/main.go) \n```\npackage mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"net/http\"\u00a0 \u00a0 \u00a0 \u00a0 \"os\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 // register hello function to handle all requests\u00a0 \u00a0 \u00a0 \u00a0 mux := http.NewServeMux()\u00a0 \u00a0 \u00a0 \u00a0 mux.HandleFunc(\"/\", hello)\u00a0 \u00a0 \u00a0 \u00a0 // use PORT environment variable, or default to 8080\u00a0 \u00a0 \u00a0 \u00a0 port := os.Getenv(\"PORT\")\u00a0 \u00a0 \u00a0 \u00a0 if port == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port = \"8080\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // start the web server on port and accept requests\u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"Server listening on port %s\", port)\u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(http.ListenAndServe(\":\"+port, mux))}// hello responds to the request with a plain-text \"Hello, world\" message.func hello(w http.ResponseWriter, r *http.Request) {\u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"Serving request: %s\", r.URL.Path)\u00a0 \u00a0 \u00a0 \u00a0 host, _ := os.Hostname()\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Hello, world!\\n\")\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Version: 1.0.0\\n\")\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Hostname: %s\\n\", host)}\n```\n`Dockerfile` describes the image you want Docker to build, including all of its resources and dependencies, and specifies which network port the app should expose. For more information about how this file works, see [Dockerfile reference](https://docs.docker.com/engine/reference/builder/) in the Docker documentation.\n [  quickstarts/hello-app/Dockerfile ](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/hello-app/Dockerfile) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/blob/HEAD/quickstarts/hello-app/Dockerfile) \n```\nFROM golang:1.21.0 as builderWORKDIR /appRUN go mod init hello-appCOPY *.go ./RUN CGO_ENABLED=0 GOOS=linux go build -o /hello-appFROM gcr.io/distroless/base-debian11WORKDIR /COPY --from=builder /hello-app /hello-appENV PORT 8080USER nonroot:nonrootCMD [\"/hello-app\"]\n```\n## What's next\n- Learn more about [creating clusters](/kubernetes-engine/docs/how-to/creating-a-container-cluster) .\n- Learn more about [Kubernetes](http://kubernetes.io/) .\n- Learn how to [package, host, and deploy a simple web server application](/kubernetes-engine/docs/tutorials/hello-app) .\n- [Deploy a Kubernetes application with Cloud Code for VS Code](/code/docs/vscode/quickstart-local-dev) or [Cloud Code for IntelliJ](/code/docs/intellij/deploy-kubernetes-app) .\n- Learn how to [Replatform Linux applications to containers](/code/docs/vscode/replatform-apps-to-containers) .", "guide": "Google Kubernetes Engine (GKE)"}