{"title": "Apigee - Step 4: Install apigeectl", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Step 4: Install apigeectl\nYou are currently viewing version 1.4 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nThis step explains how to download and install [apigeectl](/apigee/docs/hybrid/v1.4/cli-reference) , set up the installation directories, and create Google Cloud service accounts, and TLS credentials that are required for Apigee hybrid to operate.\n", "content": "## \n Download and install apigeectl\n`apigeectl` is the command-line interface (CLI) for installing and managing Apigee hybrid in a Kubernetes cluster.\nThe following steps describe how to get `apigeectl` :\n- Store the latest version number in a variable using the following command:```\nexport VERSION=$(curl -s \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/current-version.txt?ignoreCache=1)\n``` **Note: ** Some MacOS terminal shells may return an error from this command.  If you see an error, try running it without`?ignoreCache=1`, as follows:```\nexport VERSION=$(curl -s \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/current-version.txt)\n```\n- Check that the variable was populated with a version number using the following command. If  you want to use a different version, you can save that in an environment variable instead.```\necho $VERSION\n``````\n 1.4.0\n```\n- Download the release package for your operating system using the following command: **Mac 64 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_mac_64.tar.gz\n``` **Linux 64 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_linux_64.tar.gz\n``` **Mac 32 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_mac_32.tar.gz\n``` **Linux 32 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_linux_32.tar.gz\n```\n- Create a directory on your system to serve as the **base directory** for the  Apigee hybrid installation.\n- Extract the downloaded gzip file contents into the base directory you just created using the  following command:```\ntar xvzf filename.tar.gz -C path-to-base-directory\n```\n- Change directory to the base directory using the`cd`command.\n- The tar contents are, by default, expanded into a directory with the version and platform in  its name. For example: `./apigeectl_1.4.0-d591b23_linux_64` . Rename that directory  to `apigeectl` using the following command:```\nmv apigeectl_1.4.0-d591b23_linux_64 apigeectl\n```\n- Change to the directory using the following command:```\ncd ./apigeectl\n```This directory is the `apigeectl` home directory. It is where the `apigeectl` executable command is located.\n- Create an environment variable to hold this home directory path using the following command:```\nexport APIGEECTL_HOME=$PWD\n```\n- Verify that the variable holds the correct path using the following command:```\necho $APIGEECTL_HOME\n```## \n Set up the project directory structure\nThe following directory structure is a suggested approach. It separates Apigee hybrid release software from configuration files that you must create. Through the use of the `$APIGEECTL_HOME` variable and symbolic links that you create, you can easily switch to a new software version if you choose to. See also [Upgrading Apigee hybrid](/apigee/docs/hybrid/v1.4/upgrade) .\n**Note:** For the purpose of this quickstart, subsequent installation steps assume that you created the project structure as described in this section. If you follow this suggested structure, you can copy and paste most installation commands directly into your terminal.\n- Be sure you are in the base directory (the directory where the`apigeectl`directory  is located) by using the following command:```\ncd $APIGEECTL_HOME/..\n```\n- Create a new folder called`hybrid-files`using the following command. You can give  the directory any name you wish, but in the docs, the name`hybrid-files`is used  consistently. Later, you will store configuration files, service account keys, and TLS  certificates in this folder. This folder lets you keep your config files separate from the`apigeectl`software installation.```\nmkdir hybrid-files\n```\n- The current directory structure now looks like the following:```\npwd && ls\n/hybrid-base-directory\n apigeectl\n hybrid-files\n```\n- Change directory into the`hybrid-files`folder using the following command:```\ncd hybrid-files\n```\n- Inside the`hybrid-files`directory, create the following  subdirectories to organize files that you will create later:```\nmkdir overrides\nmkdir service-accounts\nmkdir certs\n```\n- Inside the`hybrid-files`directory, create the following symbolic links to`$APIGEECTL_HOME`. These links allow you to run the`apigeectl`command from inside the`hybrid-files`directory as the following example shows: **Note:** If this is not the first time you have used this process, the following symbolic links  may already exist. Check to see if the links already exist using the  following command. If the directories exist, skip this step.```\nls -l | grep ^l\n``````\nln -s $APIGEECTL_HOME/tools tools\nln -s $APIGEECTL_HOME/config config\nln -s $APIGEECTL_HOME/templates templates\nln -s $APIGEECTL_HOME/plugins plugins\n```\n- To check that the symlinks were created correctly, execute the following command and make  sure the link paths point to the correct locations:```\nls -l | grep ^l\n```\nYou now have a home base from which you can configure, deploy, and manage Apigee hybrid in your Kubernetes cluster. Next, you will create the Google Cloud service accounts and credentials required to configure hybrid runtime components.\n## Next step\nstepper_buttons is defined in localvars Iterate over all the buttons in the data dictionary If the button's step matches the current step in the process, make the button disabled [1](/apigee/docs/hybrid/v1.4/2-1-install-create-cluster) If the button's step matches the current step in the process, make the button disabled [2](/apigee/docs/hybrid/v1.4/2-2-install-cert-manager) If the button's step matches the current step in the process, make the button disabled [3](/apigee/docs/hybrid/v1.4/2-3-install-asm) If the button's step matches the current step in the process, make the button disabled If the button's step matches the next step [4](/apigee/docs/hybrid/v1.4/2-4-install-apigeectl) If the button's step matches the current step in the process, make the button disabled In all other cases (previous buttons or future buttons (after the next one), make them links [(NEXT) Step 5: Set up service accounts](/apigee/docs/hybrid/v1.4/2-5-install-service-accounts) If the button's step matches the current step in the process, make the button disabled [6](/apigee/docs/hybrid/v1.4/2-6-install-configure-cluster) If the button's step matches the current step in the process, make the button disabled [7](/apigee/docs/hybrid/v1.4/2-7-install-hybrid-runtime)", "guide": "Apigee"}