{"title": "Cloud Architecture Center - Monitoring on-premises resources with BindPlane", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Monitoring on-premises resources with BindPlane\nThis document is one part of a two-part series on extending Cloud Logging and Cloud Monitoring to include on-premises infrastructure and apps.\n- [Cloud Logging](/solutions/logging-on-premises-resources-with-blue-medora) : Read about how Cloud Logging supports logging from on-premises resources.\n- Cloud Monitoring (this document): Read about how Cloud Monitoring supports monitoring on-premises resources.\nYou might consider using Logging and Monitoring for logging and monitoring of your on-premises resources for the following reasons:\n- You need a temporary solution as you move infrastructure to Google Cloud and you want to monitor your on-premises resources until they're decommissioned.\n- You might have a diverse computing environment with multiple clouds and on-premises resources.\nIn either case, with the Logging and Monitoring APIs and [BindPlane](https://observiq.com/solutions/bindplane-comparison/) you can gain visibility into your on-premises resources. This document is intended for DevOps practitioners, managers, and executives who are interested in a monitoring strategy for resources in Google Cloud and their remaining on-premises infrastructure and apps.\n", "content": "## Ingesting metrics with Monitoring\nYou can get metrics into Monitoring in the following two ways:\n- Use the BindPlane tool from observIQ to ingest metrics from your on-premises or other cloud sources\n- Use OpenCensus to write to the Cloud Monitoring API.\n### Using BindPlane to ingest metrics\nThe following diagram shows the architecture of how BindPlane collects metrics and then how these metrics are ingested into Monitoring.\nobservIQ offers several versions of BindPlane: open source (self-hosted), SaaS, and Enterprise. For more information about these versions, see the [BindPlanecomparison page](https://observiq.com/solutions/bindplane-comparison/) .\nAdvantages:\n- Requires configuration, not instrumentation of your apps, which reduces time to implement.\n- Included in the cost of using [Monitoring](/stackdriver/pricing) .\n- Supported configuration by Monitoring product and support.\n- Can extend to metrics not provided by the default configuration.\nDisadvantages:\n- Requires the use of the observIQ BindPlane tool to relay metrics to Monitoring, which can add complexity to the overall system.\nThis option is the recommended method because it requires the lowest amount of effort. This solution requires configuration rather than development.\n### Using OpenCensus to write to the Monitoring API\nThe following diagram shows the architecture of how OpenCensus collects metrics and how these metrics are ingested into Monitoring.\nUsing the Monitoring API directly means that you need to add instrumentation code to your apps to send metrics directly to the API. You can do this directly by [using the Monitoring API to write metrics](/monitoring/custom-metrics/creating-metrics#writing-ts) or by instrumenting your app with the [Monitoring exporter for OpenCensus](https://opencensus.io/exporters/supported-exporters/python/stackdriver/) . OpenCensus is an open source project that defines a standard data structure for traces and metrics. Using OpenCensus has the advantage of supporting multiple backends, including Monitoring. Using OpenCensus also implements all the low-level technical details of using the Monitoring API.\nAdvantages:\n- Provides flexibility because the instrumentation required is easily implemented with the use of the OpenCensus Exporter\nDisadvantages:\n- Requires a separate solution for infrastructure metrics by writing a custom agent.\n- Requires app instrumentation, which might mean higher cost to implement.\n- Requires open source libraries.\nThis option isn't the recommended method because it requires the highest amount of effort and doesn't cover infrastructure metrics.\n## Using BindPlane\nThis document covers using the BindPlane tool from observIQ to ingest metrics into Monitoring. The BindPlane service works by defining a series of sources, ingesting those metrics, and then sending the metrics to Monitoring as the destination. BindPlane supports Compute Engine, Amazon Elastic Compute Cloud (Amazon EC2), Linux, Windows, and Kubernetes sources.\n### Sources, collectors, and destinations\nBindPlane has the following features:\n- **Sources** : Items that generate metrics such as Google Kubernetes Engine (GKE), Amazon Elastic Container Service for Kubernetes (Amazon EKS), or Microsoft Azure Container Service.\n- **Collectors** : Lightweight processes that remotely monitor your environment and forward metric data to BindPlane.\n- **Destinations** : Services that BindPlane forwards the metrics. In this case, the destination is the process on BindPlane that uses the Monitoring API to write metrics to Monitoring.\nFor more detailed information about sources, collectors, and destinations, see the [introduction to BindPlane](https://docs.bindplane.observiq.com/docs/getting-started) .\n### Example use case\nAs an example, ExampleOrganization has resources deployed to Google Cloud, Microsoft Azure, and on-premises resources deployed by using vSphere. In Google Cloud, there is a GKE cluster and a simple demo app deployed, which runs the company's website. In the Microsoft Azure environment, Azure Kubernetes Service (AKS) is running a set of microservices, providing a REST API endpoint to external developers. In the vSphere environment, MySQL, Oracle, and Microsoft SQL Server support several corporate apps.\nWith resources in each environment, ExampleOrganization wants to monitor each component regardless of where the component is deployed. Sending the metrics from each environment to Logging and Monitoring by using BindPlane brings all the metrics into a single location for monitoring and alerting purposes.\n### Send metrics from BindPlane to Monitoring\nAfter BindPlane is set up and begins sending metrics, those metrics are sent to your Monitoring Workspace. You can then use Monitoring to view, configure, alert, and build dashboards from the time series like you can for any metrics or time series in Monitoring. For more information, see [Metrics, time series, and resources](/monitoring/api/v3/metrics) .\n### Use metrics in Monitoring\nIn the previous example, BindPlane was configured to send metrics from Google Cloud, Microsoft Azure, and on-premises sources. The following three metrics appear in Monitoring:\n- GKE cluster metrics\n- AKS cluster metrics\n- vSphere on-premises database metricsThe GKE cluster metrics in [Monitoring](https://console.cloud.google.com/monitoring) on the Google Kubernetes Engine page display three views of the Kubernetes components running in the Monitoring Workspace, including infrastructure, workloads, and services\u00a0views. There are four services deployed to the cluster that are reporting metrics.\nThe metrics, logs, and configuration are available for each pod.\nIn the same [Monitoring](https://console.cloud.google.com/monitoring) environment, metrics for AKS are collected. The metrics appear in Monitoring and can be used for any purposes in Monitoring including dashboards, alerting, and the Metrics Explorer.\nThe Monitoring Metrics Explorer provides a way to find, filter, and build charts from metrics. Note that the metrics sent in by BindPlane have the `workload.googleapis.com/` `` prefix for the metric name.\nThe Metrics Explorer can produce a chart for the metric.\nLike all metrics in Monitoring, you can use these metrics to build dashboards like the one in the following screenshot. The dashboard represents metrics produced by AKS, collected by BindPlane, stored in Monitoring, and displayed on a dashboard.\nThe last part of this example includes database metrics from vSphere. The metrics from vSphere appear in Monitoring and can be used in the same way as any other metric in Monitoring. You can see that the Oracle metrics from vSphere appear in the Metrics Explorer.\nLike all metrics in Monitoring, metrics can be used to build alerts like the one in the following screenshot.\nThe alert represents metrics produced by Oracle running in vSphere, collected by BindPlane, stored in Monitoring, and used to configure an alert.\n## Conclusion\nMonitoring provides dashboards, alerting, and incident response for you to get insights into your platforms. Together, Monitoring and BindPlane provide you the ability to gain visibility into your on-premises resources.\n## What's next\n- [Cloud Logging](/logging) and [Cloud Monitoring](/monitoring) \n- [BindPlane setup instructions for Logging](https://docs.bindplane.observiq.com/docs/getting-started) \n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Cloud Architecture Center"}