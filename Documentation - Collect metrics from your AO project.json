{"title": "Documentation - Collect metrics from your AO project", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Collect metrics from your AO project\nYou can collect and store metrics your components produce over time. This section describes how to scrape metrics from workloads in Google Distributed Cloud Hosted (GDCH) for system monitoring and data observability.\nThe Observability platform provides a custom API to scrape running workloads in your GDCH project namespace through monitoring targets. You must deploy a `MonitoringTarget` custom resource to your project namespace in the org admin cluster. Based on this custom resource, the Observability platform starts collecting data for system monitoring.\nThe `MonitoringTarget` custom resource instructs the system monitoring pipeline to scrape pods of your project. Then, the collected metrics become visible in the system monitoring instance of your project to let you evaluate Observability data from your applications.\nTo configure the `MonitoringTarget` custom resource, specify the selected pods of your project namespace for collecting metrics. These pods must expose an HTTP endpoint to deliver metrics in a Prometheus exposition format, for example, the OpenMetrics format. You can customize settings in the resource such as the scrapping frequency, the metrics endpoint of the pods, labels, and annotations.\n", "content": "## Configure metric collection\nWork through the following steps to configure the Observability platform for metric collection:\n- Identify the GDCH project from where you want to collect metrics for system monitoring.\n- Optional: Include the following annotations in the deployment file of the container from where you want to collect metrics. **Note:** This step becomes mandatory if you choose the [pod annotations](#pod-annotations) method to configure the `MonitoringTarget` custom resource.```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: CONTAINER_NAME\u00a0 namespace: PROJECT_NAMESPACE\u00a0 labels:\u00a0 \u00a0 app: CONTAINER_NAME\u00a0 annotations:\u00a0 \u00a0 # These annotations are not required. They demonstrate selecting\u00a0 \u00a0 # pod metric endpoints via annotations.\u00a0 \u00a0 prometheus.io/path: /metrics\u00a0 \u00a0 prometheus.io/port: \\\"2112\\\"\u00a0 \u00a0 prometheus.io/scheme: http\n```Replace the following:- : the namespace of your project\n- : the container name prefix from which you want to collect metrics\n- Configure the `MonitoringTarget` custom resource, specifying the selected pods for collecting your metrics, the metrics endpoint of those pods, the scrapping frequency, and any additional settings. For information on how to configure this resource, see [Configure the MonitoringTarget custom resource](#monitoringtarget) .\n- Deploy the `MonitoringTarget` custom resource into the admin cluster in the same namespace as the pods you want to scrape. The Observability service starts collecting metrics from the specified pods.## Configure the MonitoringTarget custom resource\nThe `MonitoringTarget` custom resource configures the Observability service to scrape workloads and get metrics. It contains the following information:\n- The pods and the endpoints from which you want to collect metrics in a GDCH project.\n- The frequency to scrape the selected pods for system and server monitoring.\n- The way you want to modify the labels on the metric streams if needed.\nChoose between the [statically defined](#statically-defined) and the [pod annotations](#pod-annotations) methods to determine the metrics endpoint for your selected pods. Configure the `MonitoringTarget` custom resource using one of those methods.\nWork through the following steps to expose metrics from your selected pods on a static endpoint:- Declare to the system that a port you choose is open on the pod from which you want to scrape metrics. The following example shows how to declare port `2112` on the pod specification:```\n...spec:\u00a0 template:\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 \u00a0 - name: CONTAINER_NAME\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - containerPort: 2112...\n```\n- Configure the `MonitoringTarget` custom resource with the statically defined metrics endpoint. You must configure the `MonitoringTarget` to match the port you chose in the previous step. The following YAML file shows a `MonitoringTarget` configuration example where every selected pod has to expose metrics on the same endpoint: `http://` `` `:2112/metrics````\n\u00a0 apiVersion: monitoring.gdc.goog/v1\u00a0 kind: MonitoringTarget\u00a0 metadata:\u00a0 \u00a0 # Choose the same namespace as the workload pods\u00a0 \u00a0 namespace: PROJECT_NAMESPACE\u00a0 \u00a0 name: CONTAINER_NAME\u00a0 spec:\u00a0 \u00a0 selector:\u00a0 \u00a0 \u00a0 \u00a0 # Choose pod-labels to consider for this job\u00a0 \u00a0 \u00a0 \u00a0 # Optional: Map of key-value pairs.\u00a0 \u00a0 \u00a0 \u00a0 # Default: No filtering by label.\u00a0 \u00a0 \u00a0 \u00a0 # To consider every pod in the project namespace, remove selector fields.\u00a0 \u00a0 \u00a0 \u00a0 # If you followed the optional step on the Collect metrics section,\u00a0 \u00a0 \u00a0 \u00a0 # then you can include app: CONTAINER_NAME in matchLabels.\u00a0 \u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 \u00a0 key: value\u00a0 \u00a0 podMetricsEndpoints:\u00a0 \u00a0 \u00a0 port:\u00a0 \u00a0 \u00a0 \u00a0 value: 2112\u00a0 \u00a0 \u00a0 path:\u00a0 \u00a0 \u00a0 \u00a0 # Choose any value for your endpoint.\u00a0 \u00a0 \u00a0 \u00a0 # The /metrics value is an example.\u00a0 \u00a0 \u00a0 \u00a0 value: /metrics\u00a0 \u00a0 \u00a0 scheme:\u00a0 \u00a0 \u00a0 \u00a0 value: http\n```\nReplace the following:- : the namespace of your project\n- : the container name prefix from which you want to collect metrics\nThe following YAML file shows a `MonitoringTarget` configuration example using annotations. This specification tells the custom resource to gather the metrics endpoint information from annotations on the selected pods. With this method, each pod can have different metrics endpoints for system monitoring and data observability.\n **Important:** Before configuring the `MonitoringTarget` custom resource, you must include annotations in the deployment file of the container from where you want to collect metrics. For more information, see the [optional step](#optional) in the [Configure metric collection](#configure-metric-collection) section.\n```\napiVersion: monitoring.gdc.goog/v1kind: MonitoringTargetmetadata:\u00a0 # Choose the same namespace as the workload pods\u00a0 namespace: PROJECT_NAMESPACE\u00a0 name: CONTAINER_NAMEspec:\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: CONTAINER_NAME\u00a0 podMetricsEndpoints:\u00a0 \u00a0 port:\u00a0 \u00a0 \u00a0 annotation: prometheus.io/port\u00a0 \u00a0 path:\u00a0 \u00a0 \u00a0 annotation: prometheus.io/path\u00a0 \u00a0 scheme:\u00a0 \u00a0 \u00a0 annotation: prometheus.io/scheme\n```\nReplace the following:- : the namespace of your project\n- : the container name prefix from which you want to collect metrics\nThe following YAML file shows an example for the specification of the `MonitoringTarget` custom resource:\n```\napiVersion: monitoring.gdc.goog/v1kind: MonitoringTargetmetadata:\u00a0 # Choose the same namespace as the workload pods\u00a0 namespace: PROJECT_NAMESPACE\u00a0 name: stringspec:\u00a0 # Choose matching pattern that identifies pods for this job\u00a0 # Optional\u00a0 # Relationship between different selectors: AND\u00a0 selector:\u00a0 \u00a0 # Choose clusters to consider for this job\u00a0 \u00a0 # Optional: List\u00a0 \u00a0 # Default: All clusters applicable to this project.\u00a0 \u00a0 # Relationship between different list elements: OR\u00a0 \u00a0 matchClusters:\u00a0 \u00a0 \u00a0 - string\u00a0 \u00a0 # Choose pod-labels to consider for this job\u00a0 \u00a0 # Optional: Map of key-value pairs.\u00a0 \u00a0 # Default: No filtering by label.\u00a0 \u00a0 # Relationship between different pairs: AND\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 key1: value1\u00a0 \u00a0 # Choose annotations to consider for this job\u00a0 \u00a0 # Optional: Map of key-value pairs\u00a0 \u00a0 # Default: No filtering by annotation\u00a0 \u00a0 # Relationship between different pairs: AND\u00a0 \u00a0 matchAnnotations:\u00a0 \u00a0 \u00a0 key1: value1\u00a0 # Configure the endpoint exposed for this job\u00a0 podMetricsEndpoints:\u00a0 \u00a0 # Choose port either via static value or annotation\u00a0 \u00a0 # Optional\u00a0 \u00a0 # Annotation takes priority\u00a0 \u00a0 # Default: static port 80\u00a0 \u00a0 port:\u00a0 \u00a0 \u00a0 value: integer\u00a0 \u00a0 \u00a0 annotation: string\u00a0 \u00a0 # Choose path either via static value or annotation\u00a0 \u00a0 # Optional\u00a0 \u00a0 # Annotation takes priority\u00a0 \u00a0 # Default: static path /metrics\u00a0 \u00a0 path:\u00a0 \u00a0 \u00a0 value: string\u00a0 \u00a0 \u00a0 annotation: string\u00a0 \u00a0 # Choose scheme either via static value (http or https) or annotation\u00a0 \u00a0 # Optional\u00a0 \u00a0 # Annotation takes priority\u00a0 \u00a0 # Default: static scheme http\u00a0 \u00a0 scheme:\u00a0 \u00a0 \u00a0 value: string\u00a0 \u00a0 \u00a0 annotation: string\u00a0 \u00a0 # Choose the frequency to scrape the metrics endpoint defined in podMetricsEndpoints\u00a0 \u00a0 # Optional\u00a0 \u00a0 # Default: 60s\u00a0 \u00a0 scrapeInterval: string\u00a0 \u00a0 # Dynamically rewrite the label set of a target before it gets scraped.\u00a0 \u00a0 # https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config\u00a0 \u00a0 # Optional\u00a0 \u00a0 # Default: No filtering by label\u00a0 \u00a0 metricsRelabelings:\u00a0 \u00a0 \u00a0 - sourceLabels:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - string\u00a0 \u00a0 \u00a0 \u00a0 separator: string\u00a0 \u00a0 \u00a0 \u00a0 regex: string\u00a0 \u00a0 \u00a0 \u00a0 action: string\u00a0 \u00a0 \u00a0 \u00a0 targetLabel: string\u00a0 \u00a0 \u00a0 \u00a0 replacement: string\n```\nReplace with the namespace of your project.", "guide": "Documentation"}