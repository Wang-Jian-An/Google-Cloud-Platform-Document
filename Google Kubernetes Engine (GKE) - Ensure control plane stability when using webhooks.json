{"title": "Google Kubernetes Engine (GKE) - Ensure control plane stability when using webhooks", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview", "abstract": "# Google Kubernetes Engine (GKE) - Ensure control plane stability when using webhooks\nAdmission webhooks, or in Kubernetes, are a type of [admissioncontroller](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/) , which can be used in Kubernetes clusters to validate or mutate requests to the control plane prior to a request being persisted. It is common for third-party applications to use webhooks that operate on system-critical resources and namespaces. Incorrectly configured webhooks can impact control plane performance and reliability. For example, an incorrectly configured webhook created by a third-party application could prevent GKE from creating and modifying resources in the managed `kube-system` namespace, which could degrade the functionality of the cluster.\nGoogle Kubernetes Engine (GKE) monitors your clusters and uses the [Recommender service](/recommender/docs/overview) to deliver guidance for how you can optimize your usage of the platform. To help you ensure that your cluster remains stable and performant, see recommendations from GKE for the following scenarios:\n- Webhooks that operate but have no endpoints available.\n- Webhooks that are considered unsafe as they operate on system critical resources and namespaces.\nWith this guidance, you can see instructions for how to check your potentially misconfigured webhooks and update them, if necessary.\nTo learn more about how to manage insights and recommendations from Recommenders, see [Optimize your usage of GKE with insights andrecommendations](/kubernetes-engine/docs/how-to/optimize-with-recommenders) .\n", "content": "## Identify misconfigured webhooks that could affect your cluster\nTo get insights identifying webhooks that could affect your cluster's performance and stability, follow the instructions to [view insights andrecommendations](/kubernetes-engine/docs/how-to/optimize-with-recommenders#view-insights-recs) . You can get insights in the following ways:\n- Use the Google Cloud console.\n- Use the Google Cloud CLI, or the Recommender API, filtering with the subtypes`K8S_ADMISSION_WEBHOOK_UNSAFE`and`K8S_ADMISSION_WEBHOOK_UNAVAILABLE`.\nAfter you identify the webhooks via the insights, follow the instructions to [troubleshoot the detected webhooks](#troubleshoot-webhooks) .\n## When GKE detects misconfigured webhooks\nGKE generates an insight and recommendation if either of the following criteria are true for a cluster:\n- `K8S_ADMISSION_WEBHOOK_UNAVAILABLE`: The GKE cluster has one or more webhooks reporting no available endpoints. Follow the instructions to [check webhooks reporting no available endpoints](#no-available-endpoints) .\n- `K8S_ADMISSION_WEBHOOK_UNSAFE` : The GKE cluster has one or more webhooks that are considered unsafe based on the resources they intercept. Follow the instructions to [check the webhooks that are considered unsafe](#unsafe-webhooks) . The following webhooks are considered unsafe:- Webhooks intercepting resources, including Pods and [Leases](https://kubernetes.io/docs/concepts/architecture/leases/) , in the`kube-system`namespace.\n- Webhooks intercepting Leases in the`kube-node-lease`namespace.\n- Webhooks intercepting cluster-scoped system resources, including [Nodes](https://kubernetes.io/docs/concepts/architecture/nodes/) , [TokenReviews](https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-review-v1/) , [SubjectAccessReviews](https://kubernetes.io/docs/reference/access-authn-authz/authorization/) , and [CertificateSigningRequests](https://kubernetes.io/docs/reference/access-authn-authz/certificate-signing-requests/) .\n## Troubleshoot the detected webhooks\nThe following sections have instructions for you to troubleshoot the webhooks that GKE detected as potentially misconfigured.\nAfter you implement the instructions and the webhooks are correctly configured, the recommendation is resolved within 24 hours and no longer appears in the console. If it has been less than 24 hours since you've implemented the guidance of the recommendation, you can [mark the recommendation asresolved](/kubernetes-engine/docs/how-to/optimize-with-recommenders#resolve-recommendation) . If you do not want to implement the recommendation, you can [dismiss it](/kubernetes-engine/docs/how-to/optimize-with-recommenders#dismiss-recommendation) .\n### Webhooks reporting no available endpoints\nIf a webhook is reporting that it has no available endpoints, the Service that is backing the webhook endpoint has one or more Pods which are not running. To make the webhook endpoints available, follow the instructions to find and troubleshoot the Pods of the Service that is backing this webhook endpoint:\n- [View insights and recommendations](/kubernetes-engine/docs/how-to/optimize-with-recommenders#view-insights-recs) , choosing one insight at a time to troubleshoot. GKE generates one insight per cluster, and this insight lists one or more webhooks with a broken endpoint that must be investigated. For each of these webhooks, the insight also states the Service name, what endpoint is broken, and the last time that the endpoint was called.\n- Find the serving Pods for the Service associated with the webhook:\nFrom the insight's sidebar panel, see the table of misconfigured webhooks. Click on the name of the Service.\nRun the following command to describe the Service:\n```\nkubectl describe svc SERVICE_NAME -n SERVICE_NAMESPACE\n```\nReplace and with the name and namespace of the service, respectively.\nIf you cannot find the Service name listed in the webhook, the unavailable endpoint might be caused by a mismatch between the name listed in the configuration and the actual name of the Service. To fix the endpoint availability, update the Service name in the webhook configuration to match the correct Service object.\n- Inspect the serving Pods for this Service:\nUnder **Serving Pods** in the **Service details** , see the list of Pods backing this Service.\nIdentify which Pods are not running by listing the Deployment or Pods:\n```\nkubectl get deployment -n SERVICE_NAMESPACE\n```\nOr, run this command:\n```\nkubectl get pods -n SERVICE_NAMESPACE -o wide\n```\nFor any Pods that are not running, inspect the Pod logs to see why the Pod is not running. For instructions on common issues with Pods, see [Troubleshooting issues with deployed workloads](/kubernetes-engine/docs/troubleshooting#workload_issues) .\n### Webhooks that are considered unsafe\nIf a webhook is intercepting any resources in system-managed namespaces, or [certain types of resources](#how-gke-detect) , GKE considers this unsafe and recommends that you update the webhooks to avoid intercepting these resources.\n- Follow the instructions to [view insights and recommendations](/kubernetes-engine/docs/how-to/optimize-with-recommenders#view-insights-recs) , choosing one insight at a time to troubleshoot. GKE only generates one insight per cluster, and this insight lists one or more webhook configurations, each of which lists one or more webhooks. For each webhook configuration listed, the insight states the reason why the configuration was flagged.\n- Inspect the webhook configuration:\nFrom the insight's sidebar panel, see the table. In each row is the name of the webhook configuration, and the reason why this configuration was flagged.\nTo inspect each configuration, click the name to navigate to this configuration in the GKE [Object Browser](https://console.cloud.google.com/kubernetes/object/browser) dashboard.\nRun the following `kubectl` command to get the webhook configuration, replacing with the name of the webhook configuration:\n```\nkubectl get validatingwebhookconfigurations CONFIGURATION_NAME -o yaml\n```\nIf this command doesn't return anything, run the command again, replacing `validatingwebhookconfigurations` with `mutatingwebhookconfigurations` .\nIn the `webhooks` section, there are one or more webhooks listed.\n- Edit the configuration, depending on the reason the webhook was flagged:A webhook is flagged if `scope` is `*` . Or, a webhook is flagged if scope is `Namespaced` and either of the following conditions are true:- The `operator` condition is `NotIn` and `values` omits `kube-system` and `kube-node-lease` , as in the following example:```\nwebhooks:- admissionReviewVersions:\u00a0 ...\u00a0 namespaceSelector:\u00a0 \u00a0 matchExpressions:\u00a0 \u00a0 - key: kubernetes.io/metadata.name\u00a0 \u00a0 \u00a0 operator: NotIn\u00a0 \u00a0 \u00a0 values:\u00a0 \u00a0 \u00a0 - blue-system\u00a0 objectSelector: {}\u00a0 rules:\u00a0 - apiGroups:\u00a0 \u00a0 ...\u00a0 \u00a0 scope: '*'\u00a0 sideEffects: None\u00a0 timeoutSeconds: 3\n```Ensure that you set `scope` to `Namespaced` , not `*` , so that the webhook only operates in specific namespaces. Also ensure that if the `operator` is `NotIn` , you include `kube-system` and `kube-node-lease` in `values` (in this example, with `blue-system` ).\n- The `operator` condition is `In` and `values` includes `kube-system` and `kube-node-lease` , as in the following example:```\nnamespaceSelector:\u00a0 \u00a0 matchExpressions:\u00a0 \u00a0 - key: kubernetes.io/metadata.name\u00a0 \u00a0 \u00a0 operator: In\u00a0 \u00a0 \u00a0 values:\u00a0 \u00a0 \u00a0 - blue-system\u00a0 \u00a0 \u00a0 - kube-system\u00a0 \u00a0 \u00a0 - kube-node-lease\n```Ensure that you set `scope` to `Namespaced` , not `*` , so that the webhook only operates in specific namespaces. Ensure that if `operator` is `In` , you don't include `kube-system` and `kube-node-lease` in `values` . In this example, only `blue-system` should be in `values` as the `operator` is `In` .\nA webhook is also flagged if `nodes` , `tokenreviews` , `subjectaccessreviews` , or `certificatesigningrequests` are listed under resources, as in the following example:```\n- admissionReviewVersions:...\u00a0 resources:\u00a0 - 'pods'\u00a0 - 'nodes'\u00a0 - 'tokenreviews'\u00a0 - 'subjectacessreviews'\u00a0 - 'certificatesigningrequests'\u00a0 scope: '*'sideEffects: NonetimeoutSeconds: 3\n```Remove `nodes` , `tokenreviews` , `subjectaccessreviews` , and `certificatesigningrequests` from the resource section. You can keep `pods` in `resources` .## What's next\n- [Optimize your usage of GKE with insights and recommendations](/kubernetes-engine/docs/how-to/optimize-with-recommender) \n- [Troubleshooting common issues](/kubernetes-engine/docs/troubleshooting)", "guide": "Google Kubernetes Engine (GKE)"}