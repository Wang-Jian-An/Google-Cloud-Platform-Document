{"title": "Cloud Architecture Center - Continuous data replication to Spanner using Striim", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Continuous data replication to Spanner using Striim\nLast reviewed 2024-02-13 UTC\nBy: Edward Bell, Solutions Architect, [Striim, Inc](https://www.striim.com/) .\nThis tutorial demonstrates how to migrate a MySQL database to [Spanner](/spanner/docs) using Striim. Striim is a comprehensive streaming [extract, transform, and load (ETL)](https://wikipedia.org/wiki/Extract,_transform,_load) platform that enables online database migrations and continuous streaming replication from on-premises and cloud data sources to Google Cloud data services.\nThis tutorial focuses on the implementation of a continuous migration from [Cloud SQL for MySQL](/sql/docs/mysql) to Spanner, and is not an explanation of migrations or replications, or why you might want to migrate your underlying database.\nThis tutorial is intended for database administrators, IT professionals, and cloud architects interested in using Spanner\u2014a scalable, enterprise-grade, globally distributed, and strongly consistent database service built for the cloud.", "content": "## Objectives\n- Use Google Cloud Marketplace to deploy Striim.\n- Use Striim to read from a source Cloud SQL for MySQL database.\n- Use Striim to continuously replicate from Cloud SQL for MySQL to Spanner.\n## CostsIn this document, you use the following billable components of Google Cloud:- [Compute Engine](/compute/vm-instance-pricing) \n- [Cloud SQL for MySQL](/sql/pricing) \n- [Spanner](/spanner/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nThis tutorial also uses Striim, which includes a trial period through the [Cloud Marketplace](https://console.cloud.google.com/marketplace/details/striim/striim) .\nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the Compute Engine and Spanner APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=compute.googleapis.com,spanner.googleapis.com) \n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Set the default compute zone to `us-central1-a` :```\ngcloud config set compute/zone us-central1-aexport COMPUTE_ZONE=us-central1-a\n```This zone is where you deploy your database and compute resources to. For more information about zones, see [Geography and regions](/docs/geography-and-regions) .\n## Create a Cloud SQL for MySQL instanceYou create a Cloud SQL for MySQL virtual machine (VM) instance that you later connect to Striim. In this case, the instance acts as the source transactional system that you later replicate. In a real-world scenario, the source database can be one of many transactional database systems either on-premises or in other clouds.- In Cloud Shell, create the environment variables to create the instance:```\nCSQL_NAME=striim-sql-srcCSQL_USERNAME=striim-userCSQL_USER_PWD=$(openssl rand -base64 18)CSQL_ROOT_PWD=$(openssl rand -base64 18)\n```If you close the Cloud Shell session, you lose the variables.\n- Make a note of the `CSQL_USER_PWD` and `CSQL_ROOT_PWD` passwords generated by the following commands:```\necho $CSQL_USER_PWDecho $CSQL_ROOT_PWD\n```\n- Create the Cloud SQL for MySQL instance:```\ngcloud sql instances create $CSQL_NAME \\\u00a0 \u00a0 --root-password=$CSQL_ROOT_PWD --zone=$COMPUTE_ZONE \\\u00a0 \u00a0 --tier=db-n1-standard-2 --enable-bin-log\n```\n- Create a Cloud SQL for MySQL user that Striim can connect to:```\ngcloud sql users create $CSQL_USERNAME --instance $CSQL_NAME \\\u00a0 \u00a0 --password $CSQL_USER_PWD --host=%\n```The Cloud SQL for MySQL database is set up for Striim to read.\n- Find the IP address of the Cloud SQL for MySQL instance:```\ngcloud sql instances list\n```Write down the IP address listed in the `PRIMARY_ADDRESS` column.\n## Set up StriimTo set up an instance of the Striim server software, you use the Cloud Marketplace.- In the Google Cloud console, go to the **Striim** page in the Cloud Marketplace. [Go to Striim in the Cloud Marketplace](https://console.cloud.google.com/marketplace/details/striim/striim) \n- Click **Launch** .\n- In the **New Striim Deployment** window, complete the following fields:- Select the project that you created or selected to use for this tutorial.\n- In the **Zone** drop-down menu, select **us-central1-a** .\n- If you accept the terms of service, select the **I accept theGoogle Cloud Marketplace Terms of Service** checkbox.Cloud Marketplace solutions typically come with various resources that launch to support the software. Review the monthly billing estimate before launching the solution.\n- Leave all other settings at their default values.\n- Click **Deploy** .\n- In the Google Cloud console, go to the **Deployments** page. [Go to Deployments](https://console.cloud.google.com/dm/deployments) \n- To review the deployment details of the Striim instance, click the name of the Striim instance. Write down the name of the deployment, as well as the name of the VM that has deployed.\n- To allow Striim to communicate with Cloud SQL for MySQL, [add the Striim server's IP address](/sql/docs/mysql/connect-external-app) to the Cloud SQL for MySQL instance's authorized networks:```\nSTRIIMVM_NAME=STRIIM_VM_NAME\nSTRIIMVM_ZONE=us-central1-a\ngcloud sql instances patch $CSQL_NAME \\\n --authorized-networks=$(gcloud compute instances describe $STRIIMVM_NAME \\\n --format='get(networkInterfaces[0].accessConfigs[0].natIP)' \\\n --zone=$STRIIMVM_ZONE)\n```Replace the following:- ``: the name of the VM that you deployed with Striim\n- In the Google Cloud console, on the deployment instance details page, click **Visit the site** to open the Striim web UI.\n- In the Striim configuration wizard, configure the following:- Review the end user license agreement. If you accept the terms, click **Accept Striim EULA and Continue** .\n- Enter your contact information.\n- Enter the Cluster Name, Admin, Sys, and Striim Key passwords of your choice. Make a note of these passwords.\n- Click **Save and Continue** .\n- Leave the key field blank to enable the trial, and then click **Save and Continue** .\n- Click **Launch** . It takes about a minute for Striim to be configured. When done, click **Log In** .\n- To log in to the Striim administrator console, log in with the `admin` user and the administrator password that you previously set. Keep this window open because you return to it in a later step.\n## Set up MySQL Connector/JUse [MySQL Connector/J](https://dev.mysql.com/downloads/connector/j/5.1.html) to connect Striim to your Cloud SQL for MySQL instance. As of this writing, 5.1.49 is the latest version of Connector/J.- in the Google Cloud console, go to the **Deployments** page. [Go to Deployments page](https://console.cloud.google.com/dm/deployments) \n- For the Striim instance, click **SSH** to automatically connect to the instance.\n- Download the Connector/J to the instance and extract the contents of the file:```\nwget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.49.tar.gz\ntar -xvzf mysql-connector-java-5.1.49.tar.gz\n```\n- Copy the file to the Striim library path, allow it to be executable, and change ownership of the file that you downloaded:```\nsudo cp ~/mysql-connector-java-5.1.49/mysql-connector-java-5.1.49.jar /opt/striim/lib\nsudo chmod +x /opt/striim/lib/mysql-connector-java-5.1.49.jar\nsudo chown striim /opt/striim/lib/mysql-connector-java-5.1.49.jar\n```\n- To recognize the new library, restart the Striim server:```\nsudo systemctl stop striim-nodesudo systemctl stop striim-dbmssudo systemctl start striim-dbmssudo systemctl start striim-node\n```\n- Go back to the browser window with the administration console in it. Reload the page, and then log in using the `admin` user credentials.It can take a couple minutes for the server to complete its restart from the previous step, so you might get a browser error during that time. If you encounter an error, reload the page and log in again.\n## Load sample transactions to Cloud SQLBefore you can configure your first Striim app, load transactions into the Cloud SQL for MySQL instance.- In Cloud Shell, connect to the instance using the Cloud SQL for MySQL instance credentials that you previously set:```\ngcloud sql connect $CSQL_NAME --user=$CSQL_USERNAME\n```\n- Create a sample database and load some sample transactions into it:```\nCREATE DATABASE striimdemo;USE striimdemo;CREATE TABLE ORDERS (ORDER_ID Integer, ORDER_DATE VARCHAR(50), ORDER_MODE VARCHAR(8), CUSTOMER_ID Integer, ORDER_STATUS Integer, ORDER_TOTAL Float, SALES_REP_ID Integer, PROMOTION_ID Integer, PRIMARY KEY (ORDER_ID));INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1001, 1568927976017, 'In-Store', 1001, 9, 34672.59, 331, 9404);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1002, 1568928036017, 'In-Store', 1002, 1, 28133.14, 619, 2689);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1003, 1568928096017, 'CompanyB', 1003, 1, 37367.95, 160, 30888);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1004, 1568928156017, 'CompanyA', 1004, 1, 7737.02, 362, 89488);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1005, 1568928216017, 'CompanyA', 1005, 9, 15959.91, 497, 78454);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1006, 1568928276017, 'In-Store', 1006, 1, 82531.55, 399, 22488);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1007, 1568928336017, 'CompanyA', 1007, 7, 52929.61, 420, 66256);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1008, 1568928396017, 'Online', 1008, 1, 26912.56, 832, 7262);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1009, 1568928456017, 'CompanyA', 1009, 1, 97706.08, 124, 12185);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1010, 1568928516017, 'CompanyB', 1010, 1, 47539.16, 105, 17868);\n```\n- To check the upload, count the records to ensure that 10 records were inserted:```\nSELECT COUNT(*) FROM ORDERS;\n```\n- Leave the Cloud SQL for MySQL instance:```\nExit\n```\n## Create a Spanner target instanceIn this section, you create a Spanner instance and load service account credentials so that Striim can write to the target instance from the Google Cloud console.- In Cloud Shell, create a Spanner instance:```\ngcloud spanner instances create striim-spanner-demo \\\u00a0 \u00a0 --config=regional-us-central1 --nodes=1 \\\u00a0 \u00a0 --description=\"Test Target for Striim\"\n```For this tutorial, deploy Spanner in the same region as Cloud SQL. If you chose a different region than `us-central1` , change the region. For more information about Spanner and regions, see [instances](/spanner/docs/instances) .\n- Create a database in the new instance with the target table:```\ngcloud spanner databases create striimdemo \\\u00a0 \u00a0 --instance=striim-spanner-demo \\\u00a0 \u00a0 --ddl=\"CREATE TABLE orders (ORDER_ID INT64,ORDER_DATE STRING(MAX),ORDER_MODE STRING(MAX),CUSTOMER_ID INT64,ORDER_STATUS INT64,ORDER_TOTAL FLOAT64,SALES_REP_ID INT64,PROMOTION_ID INT64) PRIMARY KEY (ORDER_ID)\"\n```\n- Create a service account for Striim to connect to Spanner:```\ngcloud iam service-accounts create striim-spanner \\\u00a0 \u00a0 --display-name striim-spannerexport sa_striim_spanner=$(gcloud iam service-accounts list \\\u00a0 \u00a0 --filter=\"displayName:striim-spanner\" --format='value(email)')export PROJECT=$(gcloud info \\\u00a0 \u00a0 --format='value(config.project)')gcloud projects add-iam-policy-binding $PROJECT \\\u00a0 \u00a0 --role roles/spanner.databaseUser \\\u00a0 \u00a0 --member serviceAccount:$sa_striim_spannergcloud iam service-accounts keys create ~/striim-spanner-key.json \\\u00a0 \u00a0 --iam-account $sa_striim_spanner\n```A key called `striim-spanner-key.json` is created in your home path.\n- Move the newly generated key to the server:```\ngcloud compute scp ~/striim-spanner-key.json $STRIIMVM_NAME:~ \\\n --zone=$STRIIMVM_ZONE\ngcloud compute ssh --zone=$STRIIMVM_ZONE $STRIIMVM_NAME \\\n -- 'sudo cp ~/striim-spanner-key.json /opt/striim && \\\n sudo chown striim /opt/striim/striim-spanner-key.json'\n```You are now ready to create a Striim app.\n## Create an online database migrationAn online database migration moves data from a source database (either on-premises or hosted on a cloud provider) to a target database in Google Cloud. The source database remains fully accessible by the business app and with minimal performance impact on the source database during this time.\nIn an online migration, you perform an initial bulk load, and also continuously capture any changes. You then synchronize the two databases to ensure that data isn't lost. Typically both databases are retained for long periods of time to test and verify that the app and users aren't impacted by switching to a new cloud database.\n### Create the source connection\n- In the Google Cloud console, on the instance details page, click **Visit the site** to open the Striim web UI.\n- In the Striim web UI, click **Apps** .\n- Click **Add App** .\n- Click **Start from Scratch** .\n- In the **Name** field, enter `demo_online` .\n- In the **Namespace** drop-down menu, select the default **Adminnamespace** . This label is used to organize your apps.\n- Click **Save** .\n- On the **Flow Designer** page, to do a one-time bulk initial load of data, from the **Sources** pane, drag **Database** to the flow design palette in the center of the screen and enter the following connection properties:- In the **Name** field, enter`mysql_source`.\n- Leave the **Adapter** field at the default value of **DatabaseReader** .\n- In the **Connection URL** field, enter `jdbc:mysql://` `` `:3306/striimdemo` .Replace `` with the IP address of the Cloud SQL instance that you created in the [previous section](#create_a_cloud_sql_for_mysql_instance) .\n- In the **Username** field, enter the username that you set as the `CSQL_USER` environment variable, `striim-user` .\n- In the **Password** field, enter the `CSQL_USER_PWD` value that you made a note of when you [created a Cloud SQL for MySQL instance](#create_a_cloud_sql_for_mysql_instance) .\n- To see more configuration properties, click **Show optionalproperties** .\n- In the **Tables** field, enter `striimdemo.ORDERS` .\n- For **Output to** , select **New output.** \n- In the **New output** field, enter `stream_CloudSQLMySQLInitLoad` .\n- Click **Save** .\n- To test the configuration settings to make sure that Striim can successfully connect to Cloud SQL for MySQL, click **Created** , and then select **Deploy App** .\n- In the **Deployment** window, you can specify that you want to run parts of your app on some of your deployment topology. For this tutorial, select **Default** , and click **Deploy** .\n- To preview your data as it flows through the Striim pipeline, click waves **mysql_source DataBase reader** , and then click remove_red_eye **Preview on run** .\n- Click **Deployed** , and then click **Start App** .The Striim app starts running, and data flows through the pipeline. If there are any errors, there is an issue connecting to the source database because there is only a source component in the pipeline. If you see your app successfully run, but no data flows through, typically that means that you don't have any data in your database.\n- After you've successfully connected to your source database and tested that it can read data, click **Running** , and then select **Stop App** .\n- Click **Stopped** , and then select **Undeploy App** . You are now ready to connect this flow to Spanner.\n### Perform an initial load into Spanner\n- In the Striim web UI, clickwaves **mysql_source Database reader** .\n- Click add **Connect to next component** , select **Connect nextTarget component** , and then complete the following fields:- In the **Name** field, enter`tgt_online_spanner`.\n- In the **Adapter** field, enter`SpannerWriter`.\n- In the **Instance ID** field, enter`striim-spanner-demo`.\n- The **Tables property** is a source/target pair separated by commas. It is in the format of `srcSchema1.srcTable1,tgtSchema1.tgtTable1;srcSchema2.srcTable2,tgtSchema2.tgtTable2` .For this tutorial, enter `striimdemo.ORDERS,striimdemo.orders` .\n- The **Service Account Key** requires a fully qualified path and name of the key file that was previously generated. For this tutorial, enter `/opt/striim/striim-spanner-key.json` .\n- Click **Save** .\n- To deploy the app and preview the data flow, do the following:- Click **Created** , and then select **Deploy App** .\n- In the **Deployment** window, select **Default** , and then click **Deploy** .\n- To preview your data as it flows through the Striim pipeline, clickwaves **mysql_source Database reader** , and then clickremove_red_eye **Preview on run** .\n- Click **Deployed** , and then click **Start App** .\n- In the Google Cloud console, go to the **Spanner** page. [Go to Spanner](https://console.cloud.google.com/spanner/instances) \n- Click the **striimdemo** database.\n- In the query editor, enter `SELECT * from orders LIMIT 100,` and then click **Run** . The results table outputs the replicated data.You have successfully set up your Striim environment and pipeline to perform a batch load.\n## Create a continuous data pipeline from Cloud SQL for MySQL to SpannerWith an initial one-time bulk load in place, you can now set up a continuous replication pipeline. This pipeline is similar to the bulk pipeline that you just created, but with a different source object.\n### Create a CDC source\n- In the Striim web UI, click **Home** .\n- Clickadd **Apps** .\n- Click **Start from Scratch** .\n- In the **Name** field, enter`MySQLToCloudSpanner_cdc`.\n- In the **Namespace** drop-down menu, select **Admin namespace** .\n- On the **Flow Designer** page, drag a **MySQL CDC** source reader to the center of the design palette.\n- Configure your new MySQL CDC source with the following information:- In the **Name** field, enter`mysql_cdc_source`.\n- Leave the **Adapter** field at the default value of **MysqlReader** .\n- In the **Connection URL** field, enter`jdbc:mysql://` `` `:3306/striimdemo`.\n- Enter the username and password that you used in the previous section.\n- To see more configuration properties, click **Show optional\nproperties** .\n- In the **Tables** field, enter`striimdemo.ORDERS`.\n- For **Output to** , select **New output** .\n- In the **New output** field, enter`tgt_MySQLCDCSpanner`.\n- Click **Save** .\n### Load new transactions into Spanner\n- Clickwaves **MysqlReader** .\n- Click add **Connect to next component** , and then select **Connect nextTarget component** .- In the **Name** field, enter`tgt_cdc_spanner`.\n- In the **Adapter** field, enter`SpannerWriter`.\n- In the **Instance ID** field, enter`striim-spanner-demo`.\n- The **Tables property** is a source/target pair separated by commas. It is in the format of `srcSchema1.srcTable1,tgtSchema1.tgtTable1;srcSchema2.srcTable2,tgtSchema2.tgtTable2` .For this tutorial, use `striimdemo.ORDERS,striimdemo.orders` .\n- The **Service Account Key** requires a fully qualified path and name of the key file that was previously generated. For this tutorial, enter `/opt/striim/striim-spanner-key.json` .\n- Click **Save** .\n- To deploy the app and preview the data flow, do the following:- Click **Created** , and then select **Deploy App** .\n- In the **Deployment** window, select **Default** , and then click **Deploy** .\n- To preview your data as it flows through the Striim pipeline, clickwaves **MysqlReader** , and then clickremove_red_eye **Preview on Run** .\n- Click **Deployed** , and then click **Start App** .\n- In Cloud Shell, connect to your Cloud SQL for MySQL instance:```\ngcloud sql connect $CSQL_NAME --user=$CSQL_USERNAME\n```\n- Tell MySQL to use this database where the `ORDERS` table lives:```\nUSE striimdemo;INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1011, 1568928576017, 'In-Store', 1011, 9, 13879.56, 320, 88252);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1012, 1568928636017, 'CompanyA', 1012, 1, 19729.99, 76, 95203);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1013, 1568928696017, 'In-Store', 1013, 5, 7286.68, 164, 45162);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1014, 1568928756017, 'Online', 1014, 1, 87268.61, 909, 70407);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1015, 1568928816017, 'CompanyB', 1015, 1, 69744.13, 424, 79401);\n```In the Striim web UI, on the **Transactions view** page, transactions now populate the page and show that data is flowing.\n- In the Google Cloud console, go to the **Spanner** page. [Go to Spanner](https://console.cloud.google.com/spanner/instances) \n- To see that the data is successfully replicated to the target, click the **striimdemo** database, and then click the **Orders** table. Click the **Data** tab and you now see that these transactions have successfully replicated to the target.You have successfully set up a streaming pipeline from Cloud SQL for MySQL to Spanner.\n## Clean up\nThe easiest way to eliminate billing is to delete the Google Cloud project you created for the tutorial. Alternatively, you can delete the individual resources.### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n## What's next\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .\n- Take a look at [Google Cloud data migration](/db-migration) .\n- If you want to learn more about Striim, [visit the Striim website](http://www.striim.com) , [schedule a demo with a Striim technologist](https://go2.striim.com/demo-region-select) , and subscribe to the [Striim blog](https://www.striim.com/blog) .", "guide": "Cloud Architecture Center"}