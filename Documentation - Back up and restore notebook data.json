{"title": "Documentation - Back up and restore notebook data", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Back up and restore notebook data\nGoogle Distributed Cloud Hosted (GDCH) lets you back up and restore the data in the home directory of your Vertex AI Workbench JupyterLab instances. For information about Vertex AI Workbench notebooks, see [Create a notebook](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-workbench) .\n**Note:** Vertex AI Workbench doesn't support backing up the settings on the `Notebook` custom resource for the JupyterLab instance. You must create new JupyterLab instances and transfer the restored data into that instance.\n", "content": "## Create a protected application to use in backup or restore\nYou can define protected applications that back up the home directory of an individual JupyterLab instance or the home directories of all JupyterLab instances in a project at once.\nCreate a `ProtectedApplication` custom resource (CR) in the user cluster where you want to schedule backups. Backup and restore plans use protected applications to select resources. For more information about creating protected applications, see [Protected application strategies](/distributed-cloud/hosted/docs/latest/gdch/platform-application/pa-ao-operations/protected-application-strategies) .\nThe `ProtectedApplication` CR contains the following fields:\n| Field    | Field.1   | Field.2   | Field.3      | Description                                  |\n|:------------------|:------------------|:------------------|:----------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------|\n| resourceSelection | resourceSelection | resourceSelection | resourceSelection   | Configure how the ProtectedApplication CR selects resources for backup or restore.                 |\n| nan    | type    | type    | type      | Choose the method used to select resources. The value Selector indicates that the matching labels must select resources.       |\n| nan    | selector   | selector   | selector     | Define the selection rules.                              |\n| nan    | nan    | matchLabels  | matchLabels     | Configure the labels that the ProtectedApplication CR uses to match resources.                  |\n| nan    | nan    | nan    | app.kubernetes.io/part-of | Select resources created by Vertex AI Workbench that provide storage for JupyterLab instances.              |\n| nan    | nan    | nan    | app.kubernetes.io/component | Select resources created by Vertex AI Workbench that provide storage for JupyterLab instances.              |\n| nan    | nan    | nan    | app.kubernetes.io/instance | Narrow the scope to select resources for the JupyterLab instance. The value is the same as the JupyterLab instance name shown on the GDCH console. |\nThe following example shows a `ProtectedApplication` CR that selects the storage for a JupyterLab instance named `my-jupyterlab-instance-name` in the `my-project` namespace.\n```\napiVersion: gkebackup.gke.io/v1kind: ProtectedApplicationmetadata:\u00a0 name: my-protected-application\u00a0 namespace: my-projectspec:\u00a0 resourceSelection:\u00a0 \u00a0 type: Selector\u00a0 \u00a0 selector:\u00a0 \u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 \u00a0 app.kubernetes.io/part-of: vtxwb\u00a0 \u00a0 \u00a0 \u00a0 app.kubernetes.io/component: storage\u00a0 \u00a0 \u00a0 \u00a0 app.kubernetes.io/instance: my-jupyterlab-instance-name\n```\nThe following example shows a `ProtectedApplication` CR that selects the storage for all JupyterLab instances in the `my-project` project:\n```\napiVersion: gkebackup.gke.io/v1kind: ProtectedApplicationmetadata:\u00a0 name: my-protected-application\u00a0 namespace: my-projectspec:\u00a0 resourceSelection:\u00a0 \u00a0 type: Selector\u00a0 \u00a0 selector:\u00a0 \u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 \u00a0 app.kubernetes.io/part-of: vtxwb\u00a0 \u00a0 \u00a0 \u00a0 app.kubernetes.io/component: storage\n```\n## Back up and restore JupyterLab instance data\nTo back up and restore JupyterLab instance data, follow the instructions to [plan a set of backups](/distributed-cloud/hosted/docs/latest/gdch/platform-application/pa-ao-operations/plan-backups) and [plan a set of restores](/distributed-cloud/hosted/docs/latest/gdch/platform-application/pa-ao-operations/plan-restores) using the `ProtectedApplication` CR you defined.\n## Copy restored data to a new JupyterLab instance\nTo copy restored data from the `PersistentVolumeClaim` resource of the JupyterLab instance to a new JupyterLab instance, follow these steps:\n- To get the permissions that you need to copy restored data, ask your Organization IAM Admin to grant you the User Cluster Developer (`user-cluster-developer`) role.\n- Use the GDCH console to [create a JupyterLab instance](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-workbench#create_notebook) where the restored data must be copied.\n- Get the name of the JupyterLab instance `Pod` resource:```\nkubectl get pods -l notebook-name=INSTANCE_NAME -n PROJECT_NAMESPACE\n```Replace the following:- ``: the name of the JupyterLab instance you created in the previous step.\n- ``: the name of the project namespace where you created the JupyterLab instance.\n- Get the name of the image that the JupyterLab instance is running:```\nkubectl get pods POD_NAME -n PROJECT_NAMESPACE -o jsonpath=\"{.spec.containers[0].image}\"\n```Replace the following:- ``: the name of the JupyterLab instance`Pod`resource you obtained in the previous step.\n- ``: the name of the project namespace where you created the JupyterLab instance.\n- Find the name of the `PersistentVolumeClaim` resource that was restored in your user cluster.```\nkubectl get pvc -l app.kubernetes.io/part-of=vtxwb,app.kubernetes.io/component=storage,app.kubernetes.io/instance=RESTORED_INSTANCE_NAME -n my-namespace\n```Replace the following:- ``: the name of the JupyterLab instance that was restored.\n- ``: the name of the project namespace where you created the JupyterLab instance.\n- Create a YAML file named `vtxwb-data.yaml` with the following content:```\napiVersion: v1kind: Podmetadata:\u00a0 name: vtxwb-data\u00a0 namespace: PROJECT_NAMESPACE\u00a0 labels:\u00a0 \u00a0 aiplatform.gdc.goog/service-type: workbenchspec:\u00a0 containers:\u00a0 - args:\u00a0 \u00a0 - sleep infinity\u00a0 \u00a0 command:\u00a0 \u00a0 - bash\u00a0 \u00a0 - -c\u00a0 \u00a0 image: IMAGE_NAME\u00a0 \u00a0 imagePullPolicy: IfNotPresent\u00a0 \u00a0 name: vtxwb-data\u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 limits:\u00a0 \u00a0 \u00a0 \u00a0 cpu: \"1\"\u00a0 \u00a0 \u00a0 \u00a0 memory: 1Gi\u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 cpu: \"1\"\u00a0 \u00a0 \u00a0 \u00a0 memory: 1Gi\u00a0 \u00a0 terminationMessagePath: /dev/termination-log\u00a0 \u00a0 terminationMessagePolicy: File\u00a0 \u00a0 volumeMounts:\u00a0 \u00a0 - mountPath: /home/jovyan\u00a0 \u00a0 \u00a0 name: restore-data\u00a0 \u00a0 workingDir: /home/jovyan\u00a0 volumes:\u00a0 - name: restore-data\u00a0 \u00a0 persistentVolumeClaim:\u00a0 \u00a0 \u00a0 claimName: RESTORED_PVC_NAME\n```Replace the following:- ``: the name of the project namespace where you created the JupyterLab instance.\n- ``: the name of the container image that the JupyterLab instance is running and that you obtained.\n- ``: the name of the restored`PersistentVolumeClaim`resource that you obtained in the previous step.\n **Note:** the name of the home directory of your Vertex AI Workbench JupyterLab instances is `/home/jovyan` .\n- Create a new `Pod` for your restored `PersistentVolumeClaim` resource:```\nkubectl apply -f ./vtxwb-data --kubeconfig USER_CLUSTER_KUBECONFIG\n```Replace `` with the path of the kubeconfig file in the user cluster.\n- Wait for the `vtxwb-data` pod to reach the `RUNNING` state.\n- Copy your restored data to a new JupyterLab instance:```\nkubectl cp PROJECT_NAMESPACE/vtxwb-data:/home/jovyan ./restore --kubeconfig USER_CLUSTER_KUBECONFIGkubectl cp ./restore PROJECT_NAMESPACE/POD_NAME:/home/jovyan/restore --kubeconfig USER_CLUSTER_KUBECONFIGrm ./restore\n```Replace the following:- ``: the name of the project namespace where you created the JupyterLab instance.\n- ``: the path of the kubeconfig file in the user cluster.\n- ``: the name of the JupyterLab instance`Pod`resource you obtained in the previous step.\nAfter copying the data, your restored data is available in the `/home/jovyan/restore` directory.\n- Delete the `Pod` resource that you created to access your restored data:```\nkubectl delete pod vtxwb-data -n my-namespace` --kubeconfig USER_CLUSTER_KUBECONFIG\n```Replace `` with the path of the kubeconfig file in the user cluster.", "guide": "Documentation"}