{"title": "Vertex AI Vision - Enable model event notification with Cloud Functions and Pub/Sub", "url": "https://cloud.google.com/vision-ai/docs/model-event-notification?hl=zh-cn", "abstract": "# Vertex AI Vision - Enable model event notification with Cloud Functions and Pub/Sub\n- Listen to the model data and generate events from it using Cloud Functions.\n- Send the Cloud Functions generated events through the Pub/Sub event channel.The following models offer Cloud Functions event generation and Pub/Sub event notification integrations:\n- [Occupancy analytics](/vision-ai/docs/occupancy-analytics-model) model\n- Vertex AI [custom-trained models](#add-vertex-custom-model) ", "content": "## Before you begin\n- Create an app with, at minimum, a stream node and a [supported model](#event-supported-models) node.\n- Optional. [Install the Vertex AI Vision SDK](/vision-ai/docs/cloud-environment#get-source-code) and [ingest data](/vision-ai/docs/create-manage-streams#ingest-videos) into your app. If you don't do this before you set up event notification you must do it after.\n- Optional. [Create a Cloud Function](/functions/docs/create-deploy-gcloud-1st-gen) to use. If you don't create your Cloud Function before you configure Cloud Functions to process model output, you must create it during that process.\n- Optional. [Create a Pub/Sub topic](/pubsub/docs/create-topic) to use. If you don't create your Pub/Sub topic before you enable model event notification with Pub/Sub, you must create it during that process.\n- Optional. [Choose and create a Pub/Sub subscription](/pubsub/docs/create-subscription) . If you don't create your Pub/Sub subscription before you enable model event notification with Pub/Sub, you must create it after to read messages from a topic.\n### Configure Cloud Functions to process model output\nTo trigger event-based notifications, you must first set up Cloud Functions to process model output and generate events.\nYour Cloud Function connects to the model and listens to its output as its post-processing action. The Cloud Function you should return an [AppPlatformCloudFunctionResponse](/vision-ai/docs/reference/rpc/google.cloud.visionai.v1#appplatformcloudfunctionresponse) . The events ( [appplatformeventbody](/vision-ai/docs/reference/rpc/google.cloud.visionai.v1#appplatformeventbody) ) are sent to the Pub/Sub topic you configure in the next step.\n```\n/*** Responds to any HTTP request.** @param {!express:Request} req HTTP request context.* @param {!express:Response} res HTTP response context.*/exports.hello_http = (req, res) => {// Logging statement can be read with cmd `gcloud functions logs read {$functionName}`.// For more about logging, please see https://cloud.google.com/functions/docs/monitoring// The processor output will be stored in req.body.const messageString = constructMessage(req.body);// Send your message to operator output with res HTTP response context.res.status(200).send(messageString);};function constructMessage(data) {// Typically, your processor output should contains appPlatformMetadata & it's designed output.// Here we will use the occupancy analytics model as an example.const appPlatformMetadata = data.appPlatformMetadata;const annotations = data.annotations;const events = [];for(const annotation of annotations) {\u00a0 \u00a0events.push({\u00a0 \u00a0 \u00a0 \"event_message\": \"Event message goes here\",\u00a0 \u00a0 \u00a0 \"payload\" : {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"attr_key_goes_here\" : \"val_goes_here\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"event_id\" : \"event_id_goes_here\"\u00a0 \u00a0});}// Typically, your cloud function should return a string represent a JSON which has two fields:// \"annotations\" must follow the specification of the target model.// \"events\" should be of type \"AppPlatformEventBody\".const messageJson = {\u00a0 \u00a0\"annotations\": annotations,\u00a0 \u00a0\"events\": events,};return JSON.stringify(messageJson);}\n```\nUse the following instructions to to send the model output stream to your Cloud Function:\n- Open the **Applications** tab of the Vertex AI Vision dashboard. [Go to the Applications tab](https://console.cloud.google.com/ai/vision-ai/applications) \n- Select schema **View app** next to the name of your application from the list.\n- Click on the [supported model](#event-supported-model) to open the model details side panel.\n- In the **post-processing** list of the **Event notification** section, select your existing Cloud Function, or create a new one.\n### Enable model event notification with Pub/Sub\nAfter you have set up Cloud Functions to process model output and generate events, you can set up event notification with Pub/Sub. To read messages from a topic, you also need to [Choose and create a Pub/Sub subscription](/pubsub/docs/create-subscription) .\n- Open the **Applications** tab of the Vertex AI Vision dashboard. [Go to the Applications tab](https://console.cloud.google.com/ai/vision-ai/applications) \n- Select schema **View app** next to the name of your application from the list.\n- Click on the [supported model](#event-supported-model) to open the model details side panel.\n- In the **Event notification** section, select **Set up event notification** .\n- In the **Set up Pub/Sub for event notifications** option window that opens, choose your existing Pub/Sub topic, or create a new one.\n- In the **Frequency** field, set an integer value for the frequency value in seconds a notification for the same type of event can be sent.\n- Click **Set up** .## What's next\n- Read instructions about how to deploy your app to test model event notification in [Deploy and undeploy an application](/vision-ai/docs/deploy-app) .\n- Work through the [Vertex AI Vision Occupancy Analytics app with event management](https://codelabs.developers.google.com/vertex-ai-event-management#0) codelab.\n- Learn more about Pub/Sub and Cloud Functions in [What is Pub/Sub?](/pubsub/docs/overview) and the [Cloud Functions overview](/functions/docs/concepts/overview) .", "guide": "Vertex AI Vision"}