{"title": "Vertex AI Vision - Add processing logic using Cloud Functions", "url": "https://cloud.google.com/vision-ai/docs/use-cloud-functions?hl=zh-cn", "abstract": "# Vertex AI Vision - Add processing logic using Cloud Functions\nWith Cloud Functions you can further process output data from Vertex AI custom-trained model and BigQuery app nodes. You can use these integrations with app nodes in the following ways:\n- **Vertex AI custom model** node: Use Cloud Functions to post-process prediction results from the original Vertex AI custom model.\n- **BigQuery** node: Use Cloud Functions to generate customized BigQuery rows with the original annotations.\nAll the Cloud Functions you use with App Platform must meet the following requirements:\n- Cloud Functions must provide the [Http trigger](/functions/docs/calling/http) .\n- Cloud Functions must receive a [AppPlatformCloudFunctionRequest](/vision-ai/docs/reference/rpc/google.cloud.visionai.v1alpha1#appplatformcloudfunctionrequest) JSON string, and must return a [AppPlatformCloudFunctionResponse](/vision-ai/docs/reference/rpc/google.cloud.visionai.v1alpha1#appplatformcloudfunctionresponse) JSON string back.\n- The annotation payload schema stored in the requestthe response must follow the specification of the target model.#", "content": "## Sample usage\nUse the following code to post-process Vertex AI custom-trained model annotations and replace annotations with a constant key-value pair.\n```\nimport functions_frameworkfrom flask import jsonify@functions_framework.httpdef hello_http(request):\u00a0 \u00a0request_json = request.get_json(silent=True)\u00a0 \u00a0request_args = request.args\u00a0 \u00a0if request_json and 'annotations' in request_json:\u00a0 \u00a0 \u00a0 \u00a0annotations = []\u00a0 \u00a0 \u00a0 \u00a0for ele in request_json['annotations']:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0for k, v in ele.items():\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if k == \"annotation\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if \"predictions\" in v:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Replace the annotation.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 v[\"predictions\"][0] = {\"user\": \"googler\"}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 annotations.append({\"annotation\" : v})\u00a0 \u00a0else:\u00a0 \u00a0 \u00a0 \u00a0annotations = 'Failure'\u00a0 \u00a0return jsonify(annotations=annotations)\n```", "guide": "Vertex AI Vision"}