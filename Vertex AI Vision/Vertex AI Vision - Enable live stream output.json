{"title": "Vertex AI Vision - Enable live stream output", "url": "https://cloud.google.com/vision-ai/docs/enable-stream-output?hl=zh-cn", "abstract": "# Vertex AI Vision - Enable live stream output\n**Warning:** Each application can have a maximum of 2 output streams per instance.\nAfter you [create the data ingestion stream](/vision-ai/docs/create-manage-streams) and [add theprocessing nodes](/vision-ai/docs/build-app#add-pretrained-model) to your app, you must choose where to send the processed data. One option is to receive the live stream app output directly so you can act on these real-time analytics.\nIn general, you configure your app to store model output into a Google Cloud data warehouse like Vertex AI Vision's Media Warehouse or BigQuery. After the data is stored in one of these warehouses they can be used for offline analytic jobs based on your application graph. However, you can also receive the model outputs in a live streaming way. You can have Vertex AI Vision forward the model outputs to a stream resource, and you can use either the command line tool ( `vaictl` ) or Vertex AI Vision API to consume them in real-time.\nAssuming you have the following application graph that has the following three nodes:\n- The data source node \"Input Stream\" (`input-stream`)\n- The processing node \"Occupancy Count\" (`occupancy-count`)\n- The app output destination node \"Media Warehouse\" (`warehouse`)\nThe app output is currently sent from the stream to the occupancy count process, and then out to the Vertex AI Vision's Media Warehouse where it is stored.\n**API app configuration:**\n| 0 | 1                                                                                                                                                                                               |\n|----:||\n| nan | { \"applicationConfigs\": { \"nodes\": [ { \"displayName\": \"Input Stream\", \"name\": \"input-stream\", \"processor\": \"builtin:stream-input\" }, { \"displayName\": \"Occupancy Count\", \"name\": \"occupancy-count\", \"nodeConfig\": { \"occupancyCountConfig\": { \"enablePeopleCounting\": true, \"enableVehicleCounting\": true } }, \"parents\": [ { \"parentNode\": \"input-stream\" } ], \"processor\": \"builtin:occupancy-count\" }, { \"displayName\": \"Media Warehouse\", \"name\": \"warehouse\", \"nodeConfig\": { \"mediaWarehouseConfig\": { \"corpus\": \"projects/PROJECT_ID/locations/LOCATION_ID/corpora/CORPUS_ID\", \"ttl\": \"86400s\" } }, \"parents\": [ { \"parentNode\": \"input-stream\" }, { \"parentNode\": \"occupancy-count\" } ], \"processor\": \"builtin:media-warehouse\" } ] } } |\n", "content": "## Enable stream output (Google Cloud console)\nYou can enable stream output in the Google Cloud console when you first [deploy your model](/vision-ai/docs/deploy-app) or when you undeploy and then redeploy the model.\n- Open the **Applications** tab of the Vertex AI Vision dashboard. [Go to the Applications tab](https://console.cloud.google.com/ai/vision-ai/applications) \n- Select **View graph** next to the name of your application from the list.\n- From the application graph builder page click the **Deploy** button.\n- In the **Deploy application** option menu that opens, select check_box **Enable output streaming** .\n- From the corresponding **Model(s)** dropdown menu, select check_box the models you want to enable streaming output for.\n- Click **Deploy** ## Enable stream output (API)\n### Update the app node\nYou can update an app's configuration on the command line so a model node specifically sends output to a stream.\nAfter you complete this step, you have the option to [update the app instance](#update-app-instance) to specify the stream resource that receives the analysis node output data.\nThis example uses the [projects.locations.applications.patch](/vision-ai/docs/reference/rest/v1/projects.locations.applications/patch) method. This request updates the API app configuration from the previous sample app to have the `occupancy-count` node send output annotations to a Vertex AI Vision stream. This behavior is enabled by the `output_all_output_channels_to_stream` field.\nBefore using any of the request data, make the following replacements:- : Your Google Cloud [project ID or project number](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- : The [region](/about/locations) where you are using Vertex AI Vision. For example:`us-central1`,`europe-west4`. See [available regions](/vision-ai/docs/warehouse-supported-regions) .\n- : The ID of your target application.\nHTTP method and URL:\n```\nPATCH https://visionai.googleapis.com/v1/projects/PROJECT_NUMBER/locations/LOCATION_ID/applications/APPLICATION_ID\n```\nRequest JSON body:\n```\n{\n \"applicationConfigs\": {\n \"nodes\": [  {\n   \"displayName\": \"Input Stream\",\n   \"name\": \"input-stream\",\n   \"processor\": \"builtin:stream-input\"\n  },\n  {\n   \"displayName\": \"Occupancy Count\",\n   \"name\": \"occupancy-count\",\n   \"nodeConfig\": {\n   \"occupancyCountConfig\": {\n    \"enablePeopleCounting\": true,\n    \"enableVehicleCounting\": true\n   }\n   },\n   \"parents\": [   {\n    \"parentNode\": \"input-stream\"\n   }\n   ],\n   \"processor\": \"builtin:occupancy-count\",\n   \"output_all_output_channels_to_stream\": true\n  }\n ]\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X PATCH \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://visionai.googleapis.com/v1/projects/PROJECT_NUMBER/locations/LOCATION_ID/applications/APPLICATION_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method PATCH ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://visionai.googleapis.com/v1/projects/PROJECT_NUMBER/locations/LOCATION_ID/applications/APPLICATION_ID\" | Select-Object -Expand Content\n```If the update operation finishes, the operation returns a\n`200 OK`\nstatus without any error, and the service updates the application resource accordingly.### Update the app instance\nThe previous sample shows you how to [update the app](#update-app-node) , which enables the target node to send output to a stream. After you enable this option, you can optionally update the app instance to specify the stream resource that receives the analysis node output data.\nIf you don't specify a stream with this command, the app platform continues to use a default stream that is created when the app node is deployed.\nYou must [create a stream resource](/vision-ai/docs/create-manage-streams) the node sends output to\nbefore you send the following request.\nThis example uses the [projects.locations.applications.updateApplicationInstances](/vision-ai/docs/reference/rest/v1/projects.locations.applications/updateApplicationInstances) method. This request uses the updated API app configuration from the previous sample app. The previous update command set the `occupancy-count` node to be able to send output annotations to a Vertex AI Vision stream. This command updates the app instance to send the data from that producer `occupancy-count` node to an existing stream resource.\nBefore using any of the request data, make the following replacements:- : Your Google Cloud [project ID or project number](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- : The [region](/about/locations) where you are using Vertex AI Vision. For example:`us-central1`,`europe-west4`. See [available regions](/vision-ai/docs/warehouse-supported-regions) .\n- : The ID of your target application.\n- `inputResources`: The input resource (or resources) for the current application instance. This is an array of objects that contain the following fields:- `consumerNode`: The name of graph node who receives the input resource.\n- `inputResource`: The full input resource name.\n- `outputResources.outputResource`: The`stream`resource to output app  data to.\n- `outputResources.producerNode`: The app output producer node name. In this example  this is the analysis node,`occupancy-count`.\n- : The ID of the app instance.For example: <ul>  <li><code translate=\"no\" dir=\"ltr\">projects/<var translate=\"no\">PROJECT</var>/locations/<var translate=\"no\">LOCATION_ID</var>/applications/<var translate=\"no\">APPLICATION_ID</var>/instances/<var translate=\"no\">INSTANCE_ID</var></code></li> </ul>\nHTTP method and URL:\n```\nPOST https://visionai.googleapis.com/v1/projects/PROJECT_NUMBER/locations/LOCATION_ID/applications/APPLICATION_ID:updateApplicationInstances\n```\nRequest JSON body:\n```\n{\n \"applicationInstances\": [ {\n  \"instance\": {\n  \"inputResources\": [   {\n   \"consumerNode\": \"input-stream\",\n   \"inputResource\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/clusters/application-cluster-0/streams/INPUT_STREAM_ID\"\n   }\n  ],\n  \"outputResources\":[   {\n   \"outputResource\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/clusters/application-cluster-0/streams/OUTPUT_STREAM_ID\",\n   \"producerNode\": \"occupancy-count\"\n   }\n  ]\n  },\n  \"instanceId\": INSTANCE_ID\n }\n ]\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://visionai.googleapis.com/v1/projects/PROJECT_NUMBER/locations/LOCATION_ID/applications/APPLICATION_ID:updateApplicationInstances\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://visionai.googleapis.com/v1/projects/PROJECT_NUMBER/locations/LOCATION_ID/applications/APPLICATION_ID:updateApplicationInstances\" | Select-Object -Expand Content\n```If the update operation finishes, the operation returns a\n`200 OK`\nstatus without any error, and the service updates the application instance accordingly.", "guide": "Vertex AI Vision"}