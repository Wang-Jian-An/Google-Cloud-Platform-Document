{"title": "Vertex AI Vision - Occupancy analytics guide", "url": "https://cloud.google.com/vision-ai/docs/occupancy-analytics-model?hl=zh-cn", "abstract": "# Vertex AI Vision - Occupancy analytics guide\nThe **Occupancy analytics** model lets you count people or vehicles given specific inputs you add in video frames. Compared with the Person Vehicle Detector model, advanced features are provided in the Occupancy Analytics model. These features are active zones counting, line crossing counting, and dwelling detection.\n- Active zones let users count people or vehicles in specific user-defined zones.\n- Line crossing provides the ability to count the direction in which an object crosses a particular line.\n- Dwell time detection builds on active zones and provides the ability to detect whether or not objects have remained in a zone for a minimal amount of time.\nThe model accepts a video stream as input and outputs a [protocol buffer](https://developers.google.com/protocol-buffers/docs/overview) with a count of detected people and vehicles in each frame. The model runs at six FPS.\n", "content": "## Use case: Smart city traffic analytics\nThe following video shows how you can use Vertex AI Vision to create, build, and deploy an occupancy analytics application.\nThis application uses a model counts cars that cross lines in intersections that the user specifies in the Google Cloud console. Additionally, the application uses a person blur model to protect the identity of anyone that appears in the video feed sources.\nThe application sends analyzed data to a Vertex AI Vision's Media Warehouse for media storage, and also to BigQuery to store structured data in a table. The warehouse lets you search stored data on criteria from the models, such as number of vehicles or people. The table data in BigQuery lets you query the data for analytic information.\n## Model output\nPerson Vehicle Detection shows the number of people and vehicles detected in the current processed frame. The type of count is based on user-provided annotation input. The raw detection and tracking results are also in the output. Below is the [protocol buffer](https://developers.google.com/protocol-buffers/docs/overview) definition of the processor output. The frequency of the output stream is constant: three frames per second.\n```\n// The prediction result proto for Person/Vehicle Detection.\nmessage OccupancyCountingPredictionResult {\n // Current timestamp.\n google.protobuf.Timestamp current_time = 1;\n // The entity info for annotations from the processor.\n message Entity {\n // Label id.\n int64 label_id = 1;\n // Human readable string of the label.\n string label_string = 2;\n }\n // Identified box contains location and the entity of the object.\n message IdentifiedBox {\n // An unique id for this box.\n int64 box_id = 1;\n // Bounding Box in the normalized coordinates.\n message NormalizedBoundingBox {\n  // Min in x coordinate.\n  float xmin = 1;\n  // Min in y coordinate.\n  float ymin = 2;\n  // Width of the bounding box.\n  float width = 3;\n  // Height of the bounding box.\n  float height = 4;\n }\n // Bounding Box in the normalized coordinates.\n NormalizedBoundingBox normalized_bounding_box = 2;\n // Confidence score associated with this box.\n float score = 3;\n // Entity of this box.\n Entity entity = 4;\n // A unique id to identify a track. It must be consistent across frames.\n // It only exists if tracking is enabled.\n int64 track_id = 5;\n }\n // A list of identified boxes.\n repeated IdentifiedBox identified_boxes = 2;\n // The statistics info for annotations from the processor.\n message Stats {\n // The object info and count for annotations from the processor.\n message ObjectCount {\n  // Entity of this object.\n  Entity entity = 1;\n  // Count of the object.\n  int32 count = 2;\n }\n // Counts of the full frame.\n repeated ObjectCount full_frame_count = 1;\n // Message for Crossing line count.\n message CrossingLineCount {\n  // Line annotation from the user.\n  StreamAnnotation annotation = 1;\n  // The direction that follows the right hand rule.\n  repeated ObjectCount positive_direction_counts = 2;\n  // The direction that is opposite to the right hand rule.\n  repeated ObjectCount negative_direction_counts = 3;\n }\n // Crossing line counts.\n repeated CrossingLineCount crossing_line_counts = 2;\n // Message for the active zone count.\n message ActiveZoneCount {\n  // Active zone annotation from the user.\n  StreamAnnotation annotation = 1;\n  // Counts in the zone.\n  repeated ObjectCount counts = 2;\n }\n // Active zone counts.\n repeated ActiveZoneCount active_zone_counts = 3;\n }\n // Detection statistics.\n Stats stats = 3;\n // The track info for annotations from the processor.\n message TrackInfo {\n // A unique id to identify a track. It must be consistent across frames.\n string track_id = 1;\n // Start timestamp of this track.\n google.protobuf.Timestamp start_time = 2;\n }\n // The dwell time info for annotations from the processor.\n message DwellTimeInfo {\n // A unique id to identify a track. It must be consistent across frames.\n string track_id = 1;\n // The unique id for the zone in which the object is dwelling/waiting.\n string zone_id = 2;\n // The beginning time when a dwelling object has been identified in a zone.\n google.protobuf.Timestamp dwell_start_time = 3;\n // The end time when a dwelling object has exited in a zone.\n google.protobuf.Timestamp dwell_end_time = 4;\n }\n // Track related information. All the tracks that are live at this timestamp.\n // It only exists if tracking is enabled.\n repeated TrackInfo track_info = 4;\n // Dwell time related information. All the tracks that are live in a given\n // zone with a start and end dwell time timestamp\n repeated DwellTimeInfo dwell_time_info = 5;\n}\n```\n## Best practices and limitations\n- Avoid unusual camera viewpoints (for example, a top-down view) where people and vehicles appear differently from a standard or common view of them. The detection quality can be largely impacted by unusual views.\n- Ensure that people and vehicles are fully or mostly visible. The detection quality can be affected by partial occlusion by other objects.\n- The person vehicle detector has a minimal detectable object size. This size is approximately 2% with respect to the size of the camera view. Ensure that the target people and vehicles aren't too far away from the camera. These key objects' viewable sizes must be sufficiently large.\n- Areas of interest must have proper lighting.\n- Ensure the video source camera lens is clean.\n- Ensure entities (other than people or cars) don't obstruct any part of the camera's field of view.\n- The following factors might degrade the model's performance. Consider these factors when you source data:- Poor lighting conditions.\n- Crowdedness and object occlusions.\n- Uncommon or less common viewpoints.\n- Small object sizes.", "guide": "Vertex AI Vision"}