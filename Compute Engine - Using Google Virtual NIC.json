{"title": "Compute Engine - Using Google Virtual NIC", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Using Google Virtual NIC\nGoogle Virtual NIC (gVNIC) is a virtual network interface designed specifically for Compute Engine. gVNIC is an alternative to the [virtIO-based ethernet driver](https://ozlabs.org/%7Erusty/virtio-spec/virtio-0.9.5.pdf) .\nAs the next generation network interface which succeeds VirtIO, gVNIC replaces VirtIO-Net as the only supported network interface in Compute Engine for all new machine types (Generation 3 and onwards). Newer machine series and networking features require gVNIC instead of VirtIO. Consuming gVNIC as the modern I/O interface with Compute Engine VMs allows us to:\n- Provide better performance.\n- Improve consistency by reducing noisy neighbor problems.\n- Introduce new network functionality beyond what VirtIO is capable of.\ngVNIC is supported and recommended on all machine families, machine types, and generations.\ngVNIC is required to support:\n- 50 to 200 Gbps bandwidth with VMs that support [per VM Tier_1 networking performance](/compute/docs/networking/configure-vm-with-high-bandwidth-configuration) .\n- 50 to 1,000 Gbps bandwidth with VMs [that have attached GPUs](/compute/docs/gpus/optimize-gpus#create-high-bandwidth-vm) .\n- [Confidential VMs](/confidential-computing/confidential-vm/docs/about-cvm) , third generation machine series VMs, and VMs that run on the [Arm CPU platform](/compute/docs/cpu-platforms#arm_processors) .", "content": "## Before you begin\n- If you use gVNIC with Windows Server 2022 or Windows 11 VMs, update the gVNIC driver to GooGet package version`1.0.0@45`or later to improve networking throughput. For more information, see [known issues](/compute/docs/troubleshooting/known-issues#windows-gvnic) .\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nTo use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```## Pricing\nTo see the latest prices for Tier_1 networking, refer to the [VM instance pricing page](/compute/all-pricing#high_bandwidth_configuration) .\nFor a list of additional methods that can be used to find pricing information, see [Compute Engine pricing](/compute/all-pricing#compute-engine-pricing) .\n## Operating system support\nOn Compute Engine, you can choose to use gVNIC on any supported public operating system (OS) images. You can [manually install the gVNIC driver](#manual-gvnic-setup) on:\n- Non-supported operating systems\n- Operating systems that don't have the latest gVNIC driver version\nFor the supported operating systems, see the **Supported interfaces** tab for an [operating system](/compute/docs/images/os-details#supported-interfaces) . Also check the **Networking features** tab for networking feature support.\n## Use on non-supported operating systems\nFor OS images that support gVNIC but don't include the latest version of the gVNIC driver, you can download the latest driver version from GitHub.\nYou can manually configure and install the latest version of the gVNIC driver on either Linux or Windows VMs.\nAfter you update the operating system in your VM to use gVNIC, [create a custom OS image](/compute/docs/images/create-custom) based on that OS image. You can then use the custom OS image to create additional VMs that use gVNIC on that operating system. For more information about creating VMs using a custom OS image, see [Create a custom OS image that supports gVNIC](#create-custom-image) on this page.\nUse the following procedures to manually configure and install the latest version of the gVNIC driver:\n**Caution:** Before conducting a manual installation of the gVNIC driver, consult with your operating system distributor's out-of-tree (oot) support policy and tainted kernel support policy.\n- For Linux VMs, see [Linux kernel driver Compute Engine Virtual Ethernet](https://github.com/GoogleCloudPlatform/compute-virtual-ethernet-linux#manual-configuration) .\n- For VMs running on FreeBSD, see [Compute Engine Virtual Ethernet FreeBSD driver](https://github.com/GoogleCloudPlatform/compute-virtual-ethernet-freebsd?tab=readme-ov-file#installation) \n- For Windows VMs, see [Windows driver for Compute Engine Virtual Ethernet](https://github.com/GoogleCloudPlatform/compute-virtual-ethernet-windows#github) .## Limitations\n- [Large receive offload (LRO)](https://wikipedia.org/wiki/Large_receive_offload) isn't supported. Generic receive offload (GRO) is enabled by default for VMs that use gVNIC.\n- [Large send offload version 2 (LSOV2)](https://learn.microsoft.com/en-us/windows-hardware/drivers/network/task-offload#large-send-offload-version-2-lsov2) is not supported on Windows 11 or Windows Server 2022 VMs. gVNIC driver versions`1.0.0@45`and later disable LSOV2. To learn how to check and update your VM's gVNIC driver on Microsoft Windows, see [known issues](/compute/docs/troubleshooting/known-issues#windows-gvnic) .## Overview of using gVNIC with Compute Engine VMs\nTo create a VM that uses gVNIC, complete the following steps:\n- Choose a [public OS image](/compute/docs/images#os-compute-support) that supports gVNIC, or create a custom OS image that is tagged to use gVNIC.\n- Create a VM using the public or custom OS image. During the VM creation, configure the network interface to use gVNIC.\n- Verify that gVNIC is enabled.\nIf you encounter any issues, see [Troubleshooting Google Virtual NIC](/compute/docs/troubleshooting/gvnic) .\n## Create a custom OS image that supports gVNIC\nYou can create the OS image using either the [Google Cloud CLI](/compute/docs/gcloud-compute) or [REST](/compute/docs/reference/rest/v1) . For detailed information and best practices for creating custom OS images, see [Create custom OS images](/compute/docs/images/create-custom) .\n- Select an OS image or image family that supports gVNIC. For more information, see [Operating system details](/compute/docs/images/os-details#networking) .\n- Using the OS image or image family selected in the previous step, create a custom OS image and tag this OS image with `GVNIC` . To create the custom OS image, use the [gcloud compute images create command](/sdk/gcloud/reference/compute/images/create) . For example, the following command creates a custom OS image that supports gVNIC and that's based on a specific OS image.```\ngcloud compute images create IMAGE_NAME \\\n --source-image=SOURCE_IMAGE \\\n --source-image-project=SOURCE_IMAGE_PROJECT \\\n --guest-os-features=GVNIC\n```Replace the following:- ``: the name of the image that you want to create.\n- `` : a specific OS image that supports gVNIC\u2014for example: `rocky-linux-8-optimized-gcp-v20220719` .If you want to use the latest OS image in an [image family](/compute/docs/images#image_families) , replace the `--source-image` flag with the `--source-image-family` flag and set its value to an image family that supports gVNIC. For example: `--source-image-family=rocky-linux-8-optimized-gcp` .\n- `` : the name of the project that contains the source OS image or image family.\n **Example** To create a Rocky Linux 8 Optimized for Google Cloud OS image using the latest OS image from the Compute Engine `rocky-linux-8-optimized-gcp` image family, run the following command:```\ngcloud compute images create IMAGE_NAME \\\n --source-image-family=rocky-linux-8-optimized-gcp \\\n --source-image-project=rocky-linux-cloud \\\n --guest-os-features=GVNIC\n```For more information about when to use image families, see [Image family best practices](/compute/docs/images/image-families-best-practices) .\n- Select an OS image or image family that supports gVNIC For more information, see [Operating system details](/compute/docs/images/os-details#networking) .\n- Using the OS image or image family selected in the previous step, create an OS image and tag this OS image with `GVNIC` . To create the OS image, use the [images.insert method](/compute/docs/reference/rest/v1/images/insert) .```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/global/images\n{\n \"name\":\"IMAGE_NAME\",\n \"sourceImage\":\"SOURCE_IMAGE_URI\",\n \"guestOsFeatures\":[ {\n  \"type\":\"GVNIC\"\n }\n ]\n}\n```Replace the following:- ``: the name of the OS image that you want to create.\n- `` : the URI for the specific OS image or image family that you want to use.For example:- Specific OS image:`\"sourceImage\": \"projects/rocky-linux-cloud/global/images/rocky-linux-8-optimized-gcp-v20220719\"`\n- Image family:`\"sourceImage\": \"projects/rocky-linux-cloud/global/images/family/rocky-linux-8-optimized-gcp\"`.\nWhen you specify an image family, Compute Engine creates a VM from the most recent, non-deprecated OS image in that family. For more information about when to use image families, see [Image family best practices](/compute/docs/images/image-families-best-practices) .\n## Create a VM with gVNIC support\nYou can create a VM using one of the [supported public OS images](/compute/docs/images/os-details#networking) or using a custom OS image you created using the steps in [Create a custom OS image that supports gVNIC](#create-custom-image) .\nOptionally, you can [enable DPDK](/compute/docs/networking/use-dpdk) on the VM for faster network packet processing, low latency, and consistent performance.\n### Create a VM using a public OS image\nTo create a VM using a public OS image that supports gVNIC, follow the instructions at [Creating VMs and containers with high-bandwidth configuration](/compute/docs/networking/configure-vm-with-high-bandwidth-configuration) .\n### Create a VM using a custom OS image\nIf you aren't using a public OS image that supports gVNIC, you must first [create a custom OS image that supports gVNIC](#create-custom-image) . You then use that custom OS image to create a VM by using the [Google Cloud CLI](/compute/docs/gcloud-compute) or [REST](/compute/docs/reference/rest/v1) .\n- Create the VM by using the [gcloud compute instances create command](/sdk/gcloud/reference/compute/instances/create) . For the boot disk, specify the custom OS image that you created earlier. For the network interface, set the value of the `nic-type` flag to `GVNIC` .```\ngcloud compute instances create VM_NAME \\\n --zone=ZONE \\\n --image=IMAGE_NAME \\\n --image-project=YOUR_IMAGE_PROJECT \\\n --network-interface=nic-type=GVNIC\n```Replace the following:- ``: the name of the new VM.\n- ``: the zone to create the VM in.\n- ``: the OS image that was created in the previous step.\n- ``: the name of your project that contains the OS image.\n- Optional: Verify that Compute Engine created the VM and that the `nicType` is set to `GVNIC` .```\ngcloud compute instances describe VM_NAME \\\n --zone=ZONE\n```Replace the following:- ``: the name of the VM.\n- ``: the zone that you created the VM in.\n **Example** To create a Rocky Linux 8 VM in zone `us-west1-b` using an OS image named `my-gvnic-rocky8` that's in project `my-project-12345` , run the following command:```\ngcloud compute instances create my-rocky-linux-vm \\\n --zone=us-west1-b \\\n --image=my-gvnic-rocky8 \\\n --image-project=my-project-12345 \\\n --network-interface=nic-type=GVNIC\n``` **Things to consider** The `--network-interface` flag has sub-level flags such as the following:- `--address`: Assign an IP address to the VM\n- `--network`: The network the interface will be a part of\n- `--network-tier`: The network tier of the interface\n- `--subnet`: The subnet that the interface will be part of. If`--network`is also specified, the subnet must be a part   of the specified network.\n- `--private-network-ip`: Specify the RFC 1918 IP to assign to the VM.\nFor a full list see, the [--network-interface flag](/sdk/gcloud/reference/compute/instances/create#--network-interface) . **Note:** When enabling gVNIC, if you need to set any of these sub-level flags, you must specify these as a comma separated list to the `--network-interface` flag. For example, `-network-interface=subnet=` `` `,nic-type=GVNIC` .\nCreate the VM by using the [instances.insert method](/compute/docs/reference/rest/v1/instances/insert) .- For the boot disk, specify the custom OS image that you created earlier.\n- For the network interface, set the value of the`nicType`field to`GVNIC`.\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances\n{\n \"name\":\"VM_NAME\",\n \"networkInterfaces\":[ {\n  \"network\":\"NETWORK\",\n  \"nicType\":\"GVNIC\",\n  \"subnet\":\"SUBNET_NAME\"\n }\n ],\n \"disks\":[ {\n  \"initializeParams\":{\n  \"sourceImage\":\"projects/YOUR_IMAGE_PROJECT/global/images/IMAGE_NAME\"\n  },\n  \"boot\":true\n }\n ]\n}\n```\nReplace the following:- ``: the ID of the project to create the VM in.\n- ``: the zone to create the VM in.\n- ``: the name of the new VM.\n- ``: the URL of the network resource for this VM. If neither the network nor the subnetwork is specified, the default network`global/networks/default`is used.\n- ``: name of the subnet. The network is inferred from the specified subnet. This is an optional field.\n- ``: the name of your project that contains the OS image.\n- ``: the OS image that was created in the previous step.## Verify that gVNIC is enabled\nYou can use the `lshw` tool to extract detailed information about the hardware configuration of the virtual machine.\nTo install the `lshw` tool on your Linux VM instance, open a SSH connection to the VM, and then run the following command:\n```\nsudo apt-get install lshw -y\n```\nTo determine if the VM is using the gVNIC network interface, run the following command:\n```\nsudo lshw -class network\n```\nThe output resembles the following:\n```\n*-network\n description: Ethernet interface\n product: Compute Engine Virtual Ethernet [gVNIC]\n vendor: Google, Inc.\n physical id: 3\n bus info: pci@0000:00:03.0\n logical name: ens3\n version: 00\n serial: 42:01:0a:80:00:6f\n width: 32 bits\n clock: 33MHz\n capabilities: msix bus_master cap_list ethernet physical\n configuration: autonegotiation=off broadcast=yes driver=gve driverversion=1.0.0\n duplex=full ip=10.128.0.111 latency=0 link=yes multicast=yes port=twisted pair\n resources: irq:11 memory:c0203000-c0203fff memory:c0200000-c02000ff memory:c0100000-c01fffff\n```- On your Windows VM Instance, open the Device Manager.\n- Under Network Adapters, you should see:`\"Google Ethernet Adapter\"`## Troubleshooting\nTo troubleshoot gVNIC, see [Troubleshooting Google Virtual NIC](/compute/docs/troubleshooting/gvnic) .\n## What's next\n- [Connect to your instance](/compute/docs/instances/connecting-to-instance) .\n- [Add persistent disks](/compute/docs/disks/add-persistent-disk) to your new instance.\n- [Configure per VM Tier_1 networking performance](/compute/docs/networking/configure-vm-with-high-bandwidth-configuration) .\n- [Change the MTU setting of a VPC network](/vpc/docs/change-mtu-vpc-network) .\n- Learn about [jumbo frames](/compute/docs/network-bandwidth#jumbo-mtu) .", "guide": "Compute Engine"}