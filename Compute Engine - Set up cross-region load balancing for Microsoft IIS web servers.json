{"title": "Compute Engine - Set up cross-region load balancing for Microsoft IIS web servers", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Set up cross-region load balancing for Microsoft IIS web servers\nThis tutorial describes how to use an [external Application Load Balancer](/load-balancing/docs/https) to distribute traffic to [Microsoft Internet Information Services (IIS) web servers](https://www.iis.net/) running on Compute Engine VMs that are provisioned in different [ regions](/compute/docs/zones) .", "content": "## ObjectiveThis tutorial shows you how to load balance traffic for the site `www.example.com` and ensure that:\n- Incoming requests are routed to the closest region.\n- If an instance fails or reaches its capacity, the load balancer routes requests to other responsive instances in the same or a different region.The configuration for this scenario uses an external Application Load Balancer that takes requests through a single global IP address. This IP address can route each incoming request by connection type\u2014that is, HTTP or HTTPS. For HTTPS requests, the load balancer implements SSL/TLS encryption between the client sending the request and the load balancer.\nThe following diagram shows the load balancer architecture:\n \nNote that the load balancer includes several components for maximum configurability. For a description of what each component does, see the [External Application Load Balancer overview](/load-balancing/docs/https) .\nThis tutorial shows you how to complete the following tasks to reach your objective:\n- Set up the backend instances.\n- Create and configure the load balancing service.\n- Send traffic to the backends.\n- Restrict access to the backends.\n- Simulate an outage.\n## CostsIn this document, you use the following billable components of Google Cloud:- Compute Engine virtual machine (VM) instances\n- Compute Engine persistent disks\n- Optional: Google-managed SSL certificate\n- Windows Server 2016 machine images\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin- Alternatively, you can use Cloud Shell on\n- [Google Cloud console](https://console.cloud.google.com/) \n- to interact with Google Cloud, in which case you don't have to install the Google Cloud CLI.\n- Install a Remote Desktop Protocol (RDP) client. For more information, see [Microsoft Remote Desktop clients](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/remote-desktop-clients) . If you already have an RDP client installed, you can skip this task.\n- Decide the zones and regions where the you want to provision your resources.  The architecture diagram shows resources deployed in the different zones in  the US and EU regions. This is just for reference. You can deploy your  resources in any regions/zones of your choice.\n- Optional: Read and understand the [External Application Load Balancer overview](/load-balancing/docs/https) .\n## Set up your backend instancesIn this section, you create two backend services in different regions. Each backend service includes two backend instances, each running a Microsoft IIS web server on Windows Server 2016. To avoid laborious manual configuration of each server, create a disk image from one server instance, and then use this image to create your other server instances.\n### Create and configure a Compute Engine instanceTo create the instance to use as a source image:\nFrom Google Cloud Marketplace, launch an instance of Windows Server 2016 running Microsoft IIS on Compute Engine in a zone of your choice, and set up firewall rules to allow external HTTP, HTTPS, and RDP traffic to your source image instance:- In the Google Cloud console, go to the **ASP.NET Framework** Cloud Marketplace page. [Go to Cloud Marketplace](/console/marketplace/details/click-to-deploy-images/aspnet) \n- Click **Launch** .\n- In the **Deployment name** field, enter **src-img** .\n- In the **Zone** field, select a zone that you want to deploy the image in.\n- In the **Windows Server OS Version** field, select **2016** .\n- In the **Networking - Firewall** section, select only the following options:- **Allow HTTP traffic** \n- **Allow HTTPS traffic** \n- **Allow RDP traffic** \n- Accept the terms of service and click **Deploy** .\n- Wait for the Compute Engine instance to be created.\n### Configure your source image instanceTo configure your new source image instance, create a new Windows user on the source image instance and establish an RDP connection:- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Click the name of your source image instance ( `src-img` ).\n- Click **Set Windows password** .\n- In the **Set new Windows password** dialog, add your username and click **Set** to create the user account on your instance.\n- Copy the provided password and close the dialog.\n- Click the **RDP** dropdown and select the **Download the RDP file** option to download the RDP file for your instance. Use this file to connect to the instance using an RDP client. For more information, see [Microsoft Remote Desktop clients](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/remote-desktop-clients) .\nAfter you establish an RDP connection with your source image instance, add a default homepage in the IIS default web directory:- On your source image instance, open PowerShell as an administrator.\n- Create a new homepage in the default IIS web directory `C:\\inetpub\\wwwroot` :```\nEcho '<!doctype html><html><body><h1>Hello World!</h1></body></html>' > C:\\inetpub\\wwwroot\\index.html\n```\n### Verify that your source image instance can serve contentIn the Google Cloud console, go to the **VM instances** page.\n [Go to VM instances](https://console.cloud.google.com/compute/instances) \nClick the external IP address of your instance to verify that it is serving the homepage you created earlier.\n### Create a reusable Windows Server 2016 image from your source image instanceAfter verifying that your source image instance is properly configured and able to serve content, create a reusable disk image from the instance's root persistent disk:- On your source image instance, open PowerShell as an administrator.\n- Run the following command to prepare your system for cloning:```\nGCESysprep\n```When the `GCESysprep` operation completes, you are automatically disconnected from your RDP session.\n- On your local machine, run the following command to delete your source instance while retaining its root persistent disk:```\ngcloud compute instances delete src-img \\\n --keep-disks=boot \\\n --zone=INSTANCE_ZONE\n```Replace `` with the zone of your source instance.\n- After the instance is deleted, create a new image from the root persistent disk you retained:```\ngcloud compute images create win-be-img \\\n --source-disk=src-img \\\n --source-disk-zone=IMAGE_ZONE\n```Replace `` with the zone that you want to create your source image in.\n### Create an instance template using your source imageUse the disk image from your configured Windows server as the source image for an [instance template](/compute/docs/instance-templates) . Later, you'll configure two [managed instance groups](/compute/docs/instance-groups) to use this template for new instances.\nOn your local machine, run the following command to create an instance template that uses `win-be-img` as the source image and `rdp-tag` and `www-tag` as instance tags:\n```\ngcloud compute instance-templates create win-be-tmpl \\\n --tags=rdp-tag,www-tag \\\n --image=win-be-img\n```\n### Create a managed instance group for each regionIn each region, create managed instance groups. After you create each instance group, the group automatically populates with two identical instances based on the instance template you defined earlier. Later, you'll configure your load balancer to treat these instance groups as backend targets.\nTo create your managed instance groups:- On your local machine, run the following command to create a new managed instance group in the zone that you created the image in and automatically populate it with two identical instances:```\ngcloud compute instance-groups managed create MANAGED_INSTANCE_GROUP_NAME_1 \\\n --base-instance-name=BASE_INSTANCE_NAME_1 \\\n --size=2 \\\n --zone=ZONE_1 \\\n --template=win-be-tmpl\n```Replace the following:- ``: your managed instance's name\n- ``: your base instance's name\n- ``: the zone that you want to deploy your managed instance in\n- Create a managed instance group in the second zone:```\ngcloud compute instance-groups managed create MANAGED_INSTANCE_GROUP_NAME_2 \\\n --base-instance-name=BASE_INSTANCE_NAME_2 \\\n --size=2 \\\n --zone=ZONE_2 \\\n --template=win-be-tmpl\n```Replace the following:- ``: your managed instance's name\n- ``: your base instance's name\n- ``: the zone that you want to deploy your managed instance in\n### Verify that your backend instances are running\n- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Click the external IP address of each backend to verify that the backend is serving the homepage you created earlier.\n **Note:** Windows instances can take a few minutes to deploy completely.## Create and configure your load balancing serviceThe Compute Engine load balancing service includes several components. In this section, you'll create these components and connect them together.- On your local machine, run the following command to create a new health check. Your load balancer uses this check to check the responsiveness of your backend instances:```\ngcloud compute http-health-checks create basic-check\n```\n- Create a [backend service](/compute/docs/reference/latest/backendServices) :```\ngcloud compute backend-services create BACKEND_SERVICE_NAME \\\n --protocol=HTTP \\\n --http-health-checks=basic-check \\\n --global\n```Replace `` with a name for the backend service.\n- Add your instance groups as backend targets for your backend service:```\ngcloud compute backend-services add-backend BACKEND_SERVICE_NAME \\\n --instance-group=MANAGED_INSTANCE_GROUP_NAME_1 \\\n --instance-group-zone=ZONE_1\ngcloud compute backend-services add-backend BACKEND_SERVICE_NAME \\\n --instance-group=MANAGED_INSTANCE_GROUP_NAME_2 \\\n --instance-group-zone=ZONE_2\n```\n- Create a default URL map that directs all incoming requests to all of your instances:```\ngcloud compute url-maps create lb-map \\\n --default-service=BACKEND_SERVICE_NAME\n```\n- Create an SSL certificate resource. Your load balancer uses this resource to encrypt and decrypt traffic.If you already have a private key and an SSL certificate from a certificate authority, you can use them to create a new `SSLCertificate` resource by running the following command. Otherwise, you can create and use a [Google-managed SSL certificate](/load-balancing/docs/ssl-certificates/google-managed-certs) or a [self-signed certificate](/load-balancing/docs/ssl-certificates/self-managed-certs) for testing. For more information, see [SSL certificates](/load-balancing/docs/ssl-certificates#gettingakeyandcertificate) . **Note:** Skip this step if you choose to use a Google-managed or a self-signed SSL certificate.Run the following command to create your SSL certificate resource:```\ngcloud compute ssl-certificates create www-cert \\\n --certificate CRT_FILE_PATH \\\n --private-key KEY_FILE_PATH\n```Replace the following:- ``: your certificate's local file path\n- ``: your private key's file path\n- Create target HTTP and HTTPS proxies to route requests to your URL map. The proxy is the portion of the load balancer that holds the SSL certificate for HTTPS load balancing, so you also load your certificate in this step:```\ngcloud compute target-http-proxies create http-lb-proxy \\\n --url-map=lb-map\ngcloud compute target-https-proxies create https-lb-proxy \\\n --url-map lb-map \\\n --ssl-certificate SSL_CERT\n```Replace SSL_CERT based on the following:- If you've created an SSLCertificate resource with your SSL certificate and private key, then replace``with **www-cert** .\n- If you're using a Google-managed or a self-signed SSL certificate, then replace``with the name of your certificate.\n- For your load balancer to reliably receive traffic, you need to assign a global static IP address to the load balancer's global forwarding rule.To create a global static IP address resource, run the following command:```\ngcloud compute addresses create lb-ip \\\n --global \\\n --network-tier=PREMIUM\n```Take note of the IP address.\n- Create two global forwarding rules to handle incoming HTTP and HTTPS requests. Each forwarding rule sends traffic to one of the target proxies you created depending on the IP address, IP protocol, and port specified.- For a global external Application Load Balancer, use the  gcloud CLI command with`load-balancing-scheme=EXTERNAL_MANAGED`. This  setting offers [advanced traffic management capability](/load-balancing/docs/https/traffic-management-global) .\n- For an classic Application Load Balancer, use`load-balancing-scheme=EXTERNAL`.\n```\ngcloud compute forwarding-rules create http-fwd-rule \\\n --load-balancing-scheme=LOAD_BALANCING_SCHEME \\\n --network-tier=PREMIUM \\\n --address=lb-ip \\\n --global \\\n --target-http-proxy=http-lb-proxy \\\n --ports=80\ngcloud compute forwarding-rules create https-fwd-rule \\\n --load-balancing-scheme=LOAD_BALANCING_SCHEME \\\n --network-tier=PREMIUM \\\n --address=lb-ip \\\n --global \\\n --target-https-proxy=https-lb-proxy \\\n --ports=443\n```\nAfter you create the global forwarding rules, it can take several minutes for your configuration to propagate. To check the progress of the propagation, you can either monitor your configuration in the [Google Cloud console](https://console.cloud.google.com/) or run the following command on your local machine:\n```\ngcloud compute backend-services get-health BACKEND_SERVICE_NAME\n```## Send traffic to your backendsNow that you've configured your load balancing service, you can start sending traffic to the forwarding rule and watch the traffic be dispersed to different instances.\nSend traffic to your backends as follows:- In the Google Cloud console, go to the **Load balancing** page. [Go to Load balancing](https://console.cloud.google.com/net-services/loadbalancing/loadBalancers/list) \n- Select the **Frontends** tab.\n- To see your default homepage, click the IP addresses in the **Address** column. **Note:** If you used a self-signed certificate for testing, your browser displays a warning and you must manually accept the certificate.\n## Restrict access to your backendsAfter you have verified that everything is working as intended, modify your firewall rules so that HTTP or HTTPS traffic can only come from your load balancing service:- In the Google Cloud console, go to the **Firewall** page. [Go to Firewall](https://console.cloud.google.com/networking/firewalls/list) \n- Click on the firewall rule that permits external access to port 80.\n- Click **Edit** to edit the firewall rule.\n- In the **Source IPv4 ranges** field, enter **130.211.0.0/22** . This restricts the firewall rule's allowed source IPs to the range `130.211.0.0/22` , which is the HTTPS load balancing health check IP range.\n- Click **Save** .\n- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Click the external IP address of each instance to verify that the instance is now inaccessible.\n## Simulate an outageTo see how a load is balanced among the responsive instances, you can simulate an outage for one or more instances in a region.\nTo stop an instance from receiving additional requests:- Establish an RDP connection to the instance.\n- On the instance, open PowerShell as an administrator.\n- Run the following command to create a new firewall rule on the instance. This command blocks the health check traffic from the health checker and prevents all new HTTP connections from the load balancer to the instance:```\nnetsh advfirewall firewall add rule name=\"Outage Test\" protocol=tcp dir=in localport=80 action=block remoteip=130.211.0.0/22\n```\n- On your local machine, run the following command to verify that the instance now reports an `UNHEALTHY` status:```\ngcloud compute backend-services get-health BACKEND_SERVICE_NAME\n```\n- After the instance starts reporting an `UNHEALTHY` status, send a request to your load balancer. Only the responsive instances should respond.\n- After you've finished simulating an outage, you can restore your instance's connectivity by deleting the firewall rule. After opening PowerShell as an administrator on the unresponsive instance, run the following command to delete the rule:```\nnetsh advfirewall firewall delete rule name=\"Outage Test\"\n```\n## Clean up\nAfter you finish the tutorial, you can clean up the resources that you created so that they stop using quota and incurring charges. The following sections describe how to delete or turn off these resources.\n### Delete the projectThe easiest way to eliminate billing is to delete the project that you created for the tutorial.- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- Delete a Google Cloud project:\n- ```\ngcloud projects delete PROJECT_ID\n```\n### Delete individual resourcesYou'll need to individually delete all the resources created for the project (images, instance templates, instance groups, health checks, backend services, URL map, http proxy, addresses, forwarding rules). You can't delete the VM instances until you run the following commands.\nRun the following commands on your local machine to delete the resources created for the tutorial:- Delete the HTTP/S forwarding rules:```\ngcloud compute forwarding-rules delete https-fwd-rule --global\n``````\ngcloud compute forwarding-rules delete http-fwd-rule --global\n```\n- Delete the global static IP address:```\ngcloud compute addresses delete lb-ip --global\n```\n- Delete the HTTP/S proxies:```\ngcloud compute target-https-proxies delete https-lb-proxy\n``````\ngcloud compute target-http-proxies delete http-lb-proxy\n```\n- Delete the SSL certificate:```\ngcloud compute ssl-certificates delete SSL_CERT\n```\n- Delete the URL map:```\ngcloud compute url-maps delete lb-map\n```\n- Delete the backend service:```\ngcloud compute backend-services delete BACKEND_SERVICE_NAME --global\n```\n- Delete the HTTP health check:```\ngcloud compute http-health-checks delete basic-check\n```\n- Delete the managed instance groups:```\ngcloud compute instance-groups managed delete MANAGED_INSTANCE_GROUP_NAME_1 --zone=ZONE_1\n``````\ngcloud compute instance-groups managed delete MANAGED_INSTANCE_GROUP_NAME_2 --zone=ZONE_2\n```\n- Delete the instance template:```\ngcloud compute instance-templates delete win-be-tmpl\n```\n- Delete the image:```\ngcloud compute images delete IMAGE_NAME\n```\n- Delete the disk:```\ngcloud compute disks delete DISK_NAME\n```\n## What's next\n- Work through the [deploying load-balanced IIS web servers tutorial](/architecture/deploy-load-balanced-iis-web-servers) .\n- Review the best practices in the [Google Cloud Architecture Framework](/architecture/framework) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Compute Engine"}