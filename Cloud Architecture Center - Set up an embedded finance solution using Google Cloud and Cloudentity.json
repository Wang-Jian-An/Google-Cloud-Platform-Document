{"title": "Cloud Architecture Center - Set up an embedded finance solution using Google Cloud and Cloudentity", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Set up an embedded finance solution using Google Cloud and Cloudentity\nLast reviewed 2023-11-16 UTC\nThis document describes architectural options for providing your customers with a seamless and secure embedded finance solution. To provide this solution, Google Cloud has partnered with [Cloudentity](https://cloudentity.com/) in creating a reference architecture that uses [Apigee](/apigee) for API management, [Identity Platform](/identity-platform) for user identity, and Cloudentity for authorization and consent management. This document is intended for developers and technical users. It assumes that you're familiar with open banking standards and related specifications including [financial grade API (FAPI)](https://openid.net/wg/fapi/) , and authentication protocols including [OpenID Connect](https://openid.net/developers/how-connect-works/) .\nWhen a consumer agrees to share their data with a specific entity for a specific intent and time period, this is called . User consent and secure access to consumer data is an essential aspect of embedded finance and open banking [use cases](#use-cases) . If a consumer doesn't trust that their data will be safely shared with third parties, and unless they can easily understand the terms that they've agreed to and can easily stop sharing their data whenever they want, consumers will rarely participate. The architecture in this document uses Cloudentity to help fulfill user trust requirements.\n", "content": "## Architecture\nIn this architecture, a consumer interacts with a third-party embedded finance application. The application makes secure requests to a financial provider's APIs which are managed and published by Apigee. Apigee coordinates user authorization and consent activity with Cloudentity, and it also proxies communication to the financial provider's backend APIs and systems. The following diagram illustrates the architecture:\nThe architecture includes these primary components:\n- **API management platform** : Banks and financial provider products and services are often made available to other parties through APIs. Therefore, the fundamental first component of this solution is an API management platform.An API management platform lets you design, secure, analyze, and scale APIs anywhere with visibility and control. An API management platform can handle communication and orchestration with multiple backend systems, including caching of information where applicable. [Apigee](/apigee) is Google Cloud's full lifecycle API management platform, and providers can use it to securely expose consumer data and other services.\n- **Consent management provider** : The second component manages consent that's granted by end users. Consent management refers to these capabilities:- Checking whether a certain action by a third party is valid according to the consent granted by the end user (for example, accessing an end user's account balance).\n- The availability of tools for end users to check existing consent grants, modify them or revoke them, and for financial institutions to perform similar actions on behalf of their customers.\nThe [Cloudentity](https://cloudentity.com/) platform provides the capability for consumer consent management, and registration and management of third party provider (TPP) financial technology (fintech) applications. It also abstracts the complexity of connecting to identity providers, and it provides additional compliance for third-party communication that use FAPI specifications.\n- **Identity provider** : The final component is an identity provider (IdP) that's capable of authenticating the end user and establishing their identity. The example architecture uses [Identity Platform](/identity-platform) as the IdP, but you can substitute an IdP of your own choice.\n### Deployment topologies\nIf the primary components can communicate with each other, you can deploy multiple topologies for this reference architecture. Connectivity between the primary components can occur over the internet, or through private access networks.\n- **API management** : Google Cloud offers Apigee API Management as a fully managed service. Google Cloud also offers [Apigee Hybrid](/apigee/docs/hybrid/latest/what-is-hybrid) , which lets you deploy API proxies in any public cloud or on-premises environment. Similarly, Cloudentity offers its platform as a globally distributed, public software as a service (SaaS) application. It also provides options for you to deploy instances in Google Kubernetes Engine (GKE).\n- **Consent management** : Consent consumer experience (CX) is important because your customer must be fully informed about the data that's shared according to the consent that they provide. Cloudentity's concept of custom consent application is an extended integration point that provides you with the customization flexibility to develop consent pages that adhere to CX guidelines through various digital channels. This application should have connectivity to Apigee, to retrieve the list of accounts the end-user can choose to include in their consent, and to Cloudentity, to record the consent details. The application can be deployed in Google Cloud as a [Cloud Run](/run) service.\n- **Identity** : The IdP can be deployed in Google Cloud or on-premises. Most customers already have an IdP to manage their external users. This reference architecture can integrate with any existing IdP.\nThe following diagram shows the simplest topology:\nIn this simple topology, Apigee is configured with internet connectivity to backend systems and Cloudentity. The Cloudentity instance is a SaaS instance, and it has internet connectivity to Identity Platform. This topology is simple enough to be quickly deployed and it enables rapid experimentation.\nA topology that's more suitable for a production environment deploys Cloudentity within Google Cloud's Virtual Private Cloud. In such a topology, all communication between the three components and the backend services happens through private network access, as shown in the following diagram:\nIn this production topology, external clients access Apigee and Cloudentity through a global External Load Balancer. For simplicity, the diagram only shows one deployment region.\n### Component interaction flow\nIn this architecture, the interaction flow between components helps to ensure that the user data that's exposed by APIs is shared only with authorized TPP applications, according to the user's consent. The following diagram shows the high-level interaction flow; for brevity, the diagram excludes low-level technical and specification details:\nThe preceding diagram shows the following high-level flow:\n- A consumer opens an application to use a TPP fintech application.\n- The TPP application initiates an authorization grant flow with Cloudentity, which is acting as the authorization provider for the financial institution.\n- Cloudentity verifies the legitimacy of the TPP application.\n- Cloudentity redirects the consumer to the IdP that's configured for the institution.\n- The consumer completes authentication with the IdP.\n- Cloudentity prompts the consumer to provide the required consent.\n- The consumer accepts or denies the consent request.\n- Cloudentity provides an authorization code to the TPP application to get an access token and a refresh token.\n- The TPP application uses the access token to make embedded finance API calls that are protected by Apigee.\n- Apigee accepts the API traffic and it verifies the authenticity and validity of the access token.\n- Apigee verifies the consumer consent arrangement status.\n- If all the preceding checks pass, Apigee allows the traffic to the backend system and serves back the API response to the TPP application.\n- The TPP application receives data through the requested APIs and it serves its functionality to the consumer.## Use cases\nis when banks and other financial institutions make their products available through non-banking channels. Examples of embedded finance include retailers that offer financing for people buying goods, or a budgeting application that gathers bank transactions to help you categorize and analyze your spending patterns. Finance, or , has been embedded into the retailer or into the budgeting experience. Banks and financial institutions use this pattern to enable use cases like the following:\n- Extending first party products and services beyond the bank, such as in these ways:- Embedding payments into third-party digital or offline experiences, such as paying restaurant bills by using QR codes.\n- Offering instant loans or pay later capabilities during checkout with an e-retailer.\n- Adding foreign exchange capabilities to small and medium businesses.\n- Bringing third-party products and services into the bank's own experiences, such as in these ways:- Offering rebranded products to existing customers as an extension of current products.\n- Bringing external financial education and advice tools into the bank's existing experience, for example, cash flow forecasting, loan calculators, or personal financial management features.\n- Bringing external tools to power banker or operations experiences, for example, a banker calendar appointment tool for customers or credit card rewards platform functionality for servicing.\n- Sharing and consuming data with, or from, partners, such as in these ways:- Meeting regulatory compliance and providing customer data to other trusted parties by using open banking protocols.\n- Reducing or eliminating screen scraping of customer data, instead bringing control to customers within applications.\n- Consuming third party risk and open banking data offered by other institutions for credit decisioning.In an embedded finance scheme, there are three primary parties: the financial institution offering their products and services, a TPP that makes use of those products or services, and an end user who is a customer of the financial institution and is interacting with the TPP. The following diagram shows the relationship between these parties:### About open banking\nThe example use case for sharing and consuming data with, or from, partners is in the data exchange category of embedded finance. This type of data exchange is which is often called . In many countries, this form of active data exchange is mandated by laws and regulations. The following diagram shows what's required for open banking:\nThe diagram shows the components of an open banking implementation:\n- **Data APIs** : Apigee exposes payment and accounts data to fintech applications based on country-specific regulations.\n- **Consent APIs** : Cloudentity provides consent APIs that are used before data is shared. These APIs are standardized, and the API security profile includes OAuth access control.\n- **Access control** : Google Cloud and Cloudentity manage access controls that offer strong customer authentication.\n- **Customer journeys** : Cloudentity provides consent management portals that follow CX guidelines for consent amendment and withdrawal.\nThe diagram also shows the interaction between the main parties in an open banking exchange. This interaction includes the fintech application, the consumer, the data holder institution, and an open banking trust registry.\n## Design alternatives\nThe following sections describe the possible interaction patterns between Apigee and Cloudentity. The open source code that accompanies this architecture implements interaction pattern one. If you need to improve overall API latency, we recommend that you consider interaction pattern two.\n### Interaction pattern one\nCloudentity directly handles all authentication, authorization, and consent requests, and it interacts with the IdP as required. In this pattern, Apigee handles all business API requests, and it communicates with Cloudentity to verify that the consent that the end user granted to the API requester (TPP) allows the requested operation. Apigee caches the consent information for the duration of the access token, or until it receives a notification from Cloudentity that the consent has changed or has been revoked. If further requests are received, Apigee can use the cached information to decide whether to allow the request or not.\n### Interaction pattern two\nApigee acts as a facade to Cloudentity. In this pattern, Apigee forwards all authentication, authorization, and consent requests. Before it returns the response to the clients, Apigee records necessary information like access tokens and consent details. Apigee doesn't dynamically communicate to Cloudentity when a business API request is received. If the consent is revoked through another channel, Cloudentity notifies Apigee, and all the information is removed to prevent further access.\n## Design considerations\nThis section provides guidance to help you use this reference architecture to develop an architecture that meets your specific requirements for security, reliability, cost, operational efficiency, and performance. Each of the following sections describes specific considerations for both Apigee and Cloudentity. Where relevant, the sections provide considerations specific to this reference architecture.\n### Security, privacy, and compliance\nThis section describes design considerations to enhance the security posture of your embedded finance architecture or to meet additional compliance requirements. As discussed in the [Deployment topologies](#deployment-topologies) section, when you design your architecture, you should consider the deployment options for all three of the components: Apigee, Cloudentity, and your IdP. You should also consider the connectivity options between them, whether over the internet or through private access.\nWhen you configure Apigee, we recommend that you do the following:\n- Deploy APIs on specific regions to comply with data residency requirements.\n- Consider communicating with backend systems and Cloudentity over private VPC connections.\n- Follow Apigee's [Securing a proxy](/apigee/docs/api-platform/security/api-security) recommendations to improve security when you develop APIs.\n- Consider using [Google Cloud Armor with Apigee](/blog/products/api-management/api-security-with-apigee-and-google-cloud-armor) to provide multi-layer API security, including mitigation of OWASP (Open Web Application Security Project) top 10 risks.\n- Consider using [Apigee Advanced API Security](/apigee/docs/api-security) to protect your APIs from malicious agent attacks, like bots. Advanced API Security is an add-on and it requires an Apigee subscription license.\n- Use appropriate consumer data standards (CDS) in your APIs. The example APIs that are included in the accompanying open source code follow the Australian CDS standard, but you can adapt them for other standards.Cloudentity offers default compliance with security profiles that are mandated in many standards, such as OpenBanking UK, OpenBanking Brazil, OpenInsurance Brazil, Consumer Data Standards Australia, FDX, and FAPI. If you don't need to comply with a specific standard, but you're planning to expose your API for consumption to an open or closed ecosystem, you can improve your security posture by adopting one of these security profiles, such as FAPI.\nCloudentity services can be consumed as a SaaS offering or as a customer-deployed offering. The following considerations can help you choose between the SaaS and customer-deployed offerings:\n- **Cloudentity SaaS** :- **Compliance** : The Cloudentity SaaS offering has both SOC 2 compliance and ISO certifications.\n- **Data residency** : To adhere to the data locality requirements in SaaS, you can choose from one of the US, EU, or AU regions that's available. There are some integration points between Cloudentity and other systems. And there can be backend, encrypted communication between the Cloudentity SaaS instance and other components over public networks.\n- **Identity Provider** : Cloudentity sends the communication to an IdP to finish the authentication. On successful callback from the IdP, the Cloudentity SaaS instance tries to reach back to the provider for more information as required.\n- **Consent application** : Cloudentity sends the communication to a consent application to capture the consumer consent. This application regularly requires consumer account data. To eliminate any consumer account-related access from the Cloudentity instance directly, we recommend that the application run within the organization's infrastructure. There is token-based trust between a Cloudentity SaaS tenant workspace and the consent application. Cloudentity supports token rotation scheduling. As a best practice, we recommend that you support token rotation with the applications.\n- **Webhooks** : Cloudentity exposes webhooks that can be subscribed to by applications within the organization to see and consume those events. Webhooks usually contain audit events, and calls are secured by token or API key-based authentication. As a best practice, we recommend periodic review of the subscribers and the events that they are subscribed to. Within Cloudentity, the subscription is granular at each event type, and subscribers should only be allowed to subscribe for the minimum data that they require.\n- **Cloudentity customer-deployed** :- **Connectivity** : If you use an on-premises or private cloud deployment, you can deploy the software on a specific Google Cloud region and configure private connectivity to Apigee and the IdP. Most of the integration points mentioned earlier, like IdP, consent application, and webhooks, can be confined within the private network configuration instead of over public networks.\nFor more information, see the deployment guide for [Cloudentity on Google Cloud](https://cloudentity.com/developers/deployment-and-operations/quickstarts/gcp/) and [best practices and security hardening of customer-deployed Cloudentity software](https://cloudentity.com/developers/deployment-and-operations/configure/hardening/) .\nFor either Cloudentity offering, we recommend that you do the following to help improve your overall data access security:\n- **Anonymize consumer data** : Consent applicationsprotect account or other consumer data that is required to be captured. We don't recommend storing account data within Cloudentity. Before other consumer data is stored within the Cloudentity consent management system, it should be anonymized or captured using pairwise pseudonymous identifiers.\n- **Rotate tokens** : Use the token rotation and scheduling functionality.\n- **Use preconfigured authorization settings** : Don't relax the preconfigured Cloudentity authorization server settings for open banking initiatives unless required. If you require another authorization server for another initiative or application access, we recommend that you create another workspace within the tenant instead of relaxing server settings on the profile for open banking initiatives.\n- **Use single sign-on (SSO)** : Cloudentity administrator portal access must be connected to existing SSO systems. You can then apply delegated permissions to limit access to administrators.\n### Reliability\nThe following information can help you to improve the availability and scalability of your workload in this architecture, and to make it resilient to outages and disasters.- To improve reliability, you can expand an Apigee organization across multiple regions. Multi-region expansion allows improvements in the following ways:- **High availability** : In case of a regional failure, traffic can still be served by the remaining regions, increasing the overall availability of your APIs.\n- **High capacity** : Additional regions provide extra capacity for serving your API traffic. They also allow space for any unexpected spike in traffic without adding much pressure on a single environment, which can increase the overall capacity of your APIs.\n- **Low latency** : Additional regions can lower the overall transaction latency for clients by serving their requests in a geographically closer region.\nFor more information, see [Expanding Apigee to multiple regions](/apigee/docs/api-platform/system-administration/multi-region) .\n- Paid Apigee instances have by default an SLA of 99.9% for monthly uptime. You can choose to deploy Apigee instances across multiple Google Cloud regions in an active-active configuration, which allows Google Cloud to offer a 99.99% monthly uptime SLA for Apigee. For more information, see the [Apigee SLA](/apigee/sla) .Cloudentity provides its SaaS platform capabilities with a 99.99% uptime SLA, as described in the [Cloudentity Software Subscription Agreement](https://cloudentity.com/software-subscription-agreement/) . Cloudentity workflows depend on certain external systems like identity providers and the consent application. These external systems must be architected and deployed accordingly to meet the overall target SLA. Availability of external systems isn't covered by the Cloudentity SLA.\nCloudentity SaaS is operated as a highly available service with multiple active environments and data redundancy. Cloudentity has disaster recovery plans in place that let you continue to operate normally, except for catastrophic events that are outside of the plan's scope. To ensure seamless business continuity, it's important that participating external systems are also made available in a similar manner.\nFor customer-managed deployments, a multi-region architecture can be considered with either active-active or active-passive configuration based on RTO and RPO of the organization. For information about deployment options, see [Cloudentity Platform Architecture](https://cloudentity.com/developers/deployment-and-operations/overview/architecture/) . We also recommend that you size your Cloudentity infrastructure to autoscale based on expected load and metrics. For more information, see [Configuring Cloudentity Pods Autoscaling](https://cloudentity.com/developers/deployment-and-operations/configure/configure-autoscaling/) .\n### Cost optimization\nThe following information can help you to optimize the cost of running the workload in this architecture.\nIf you're just starting with Apigee, you can choose the [Pay-as-you-go](/apigee/docs/api-platform/reference/pay-as-you-go) pricing model. If you want more predictable costs, you can choose a subscription model such as Apigee Enterprise or Enterprise Plus. For information about pricing options, see [Apigee pricing](/apigee/pricing) .\nCloudentity SaaS pricing is consumption based, depending on the number of authorization tokens that are generated within the platform. Per-unit costs decrease as grants increase. Cloudentity's customer-deployed pricing model is the same as the SaaS pricing model. You can use the SaaS platform to reduce the operational costs of managing on-premises Cloudentity software.\nIf you choose a customer-deployment model for Cloudentity, you also need to consider the costs of deploying it in a GKE cluster. To generate a cost estimate based on your projected usage, you can use the [Google Cloud pricing calculator](/products/calculator) .\nIn addition to the costs that are related to an Apigee instance and a Cloudentity SaaS instance, this reference architecture uses another billable component of Google Cloud, [Cloud Run](/run) , that offers a free tier for limited usage. You can use the [Google Cloud pricing calculator](/products/calculator) to generate a cost estimate based on your projected usage.\n### Operational efficiency\nThis section discusses some design recommendations to maintain and operate your embedded finance APIs more efficiently.- To help ensure that Embedded Finance APIs are available and performing as expected to maintain uninterrupted service, consider using [Apigee API Monitoring](/apigee/docs/api-monitoring) .\n- To help ensure that your APIs stay up and running as intended, you can use the additional tools provided by [Apigee Advanced API Operations](/apigee/docs/aapi-ops) . It automatically detects unusual patterns in API traffic\u2014called\u2014such as spikes in latency or error rate. Advanced API Operations is an add-on that requires an Apigee subscription license.The Cloudentity team internally manages and operates Cloudentity SaaS. You can access rich analytics, metrics, and audit events from the Cloudentity dashboard and by using the [Admin API](https://cloudentity.com/developers/api/analytics/admin/#tag/Metrics) . Metrics can be consumed within the target organization using webhooks and API polls from the SaaS platform.\nYou can connect customer-deployed Cloudentity software to any tool of choice. Cloudentity supports [OpenTelemetry](/learn/what-is-opentelemetry) , so that you can integrate monitoring and logging tools seamlessly. You can either access raw logs from the clusters, or use the analytics, audits, and metrics APIs to pull information into your SIEM or other systems.\nWhether you use the SaaS or customer-managed option, Cloudentity provides fine-grained analytics on response times and success rates through APIs which can be consumed from alerting systems.\n### Performance optimization\nThis section discusses some design recommendations that can help you to ensure more efficient performance of your embedded finance APIs.\n- **Apigee instance location** : To minimize latency, locate your Apigee instance in a region (or in multiple regions) that's geographically close to your API clients and backend systems.\n- **Cloudentity instance location** : Locate your Cloudentity instance as close as possible to both the Apigee instance and the IdP instance. Depending on the type of Cloudentity service that you use, apply the following guidelines:- **Cloudentity SaaS** : Choose a region that adheres to the data locality requirements and is closest to the Apigee instance.\n- **Customer-deployed** : Choose a region that's as close as possible to the Apigee instance, ideally in the same region where the Apigee runtime is located.\nCloudentity recommends that you configure monitoring for endpoint responses and overall system status to continuously evaluate the health of the platform. You can consume Cloudentity [metric APIs](https://cloudentity.com/developers/api/analytics/admin/#tag/Metrics) and [status APIs](https://status.cloudentity.io/) to fit into your monitoring and alerting infrastructures to detect and notify of deviations and issues. For information about monitoring customer-deployed software, see [Utilize Performance Metrics Monitoring](https://cloudentity.com/developers/deployment-and-operations/configure/configure-monitoring/) .\n- **Interaction patterns** :- The sample code that's provided implements [interaction pattern one](#interaction-pattern-one) between Cloudentity and Apigee. This pattern relies on Cloudentity managing consents and issuing JSON Web Tokens (JWT). Apigee can independently verify JWTs, but it will check with Cloudentity for the details of the consent (validity, scopes, and included resources) and cache that information for a short period of time. Cloudentity is configured to notify Apigee when a user's consent is revoked, so that Apigee can invalidate the cached information.\n- For better overall API latency, you can implement [interaction pattern two](#interaction-pattern-two) . In this pattern, Apigee acts as a facade to Cloudentity during the authentication, authorization, and consent flow. This pattern allows Apigee to store all relevant information for issued access tokens and their associated consents. Therefore, Apigee doesn't need to periodically check back to Cloudentity to get the latest information for a given consent.\n## Deployment\nTo deploy this architecture, see [Deploy an embedded finance solution using Google Cloud and Cloudentity](/architecture/partners/embedded-finance-with-cloudentity/deployment) .\n## What's next\n- [Deploy](/architecture/partners/embedded-finance-with-cloudentity/deployment) a working example of this reference architecture on Google Cloud.\n- Learn more about the Google Cloud products that are used in this reference architecture:- [Apigee](/apigee) \n- [Identity Platform](/identity-platform) \n- [Cloud Run](/run) \n- For an introduction to embedded finance, its relationship to open banking, and the importance of consent management, read [Managing Consent in Embedded Finance](/blog/topics/financial-services/managing-consent-in-embedded-finance) .\n- Explore other [Google Cloud solutions for financial services](/solutions/financial-services#section-1) .\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .## Contributors\nAuthors:\n- [Renjith Babu](https://www.linkedin.com/in/renjith-babu-9b3a1551) | VP of Solution Architecture (Cloudentity)\n- [Debora Elkin](https://www.linkedin.com/in/debora-elkin-171234) | Technical Solutions Architect\nOther contributors:\n- [David Rush](https://www.linkedin.com/in/drush80) | Customer Engineer and Apigee Specialist for Financial Services\n- [Christin Brown](https://www.linkedin.com/in/christinbrown) | Global Technical Solutions Director", "guide": "Cloud Architecture Center"}