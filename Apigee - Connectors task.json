{"title": "Apigee - Connectors task", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Connectors task\n**Announcement:** Application Integration is now available for your Google Cloud project. You can now use both Apigee Integration and Application Integration within the same Google Cloud project. [Learn more](/apigee/docs/api-platform/integration/using-application-integration)\nThe **Connectors** task lets you quickly and securely connect to the various Google Cloud services and other business applications from your integration using the out-of-the-box connectors available in [Integration Connectors](/integration-connectors/docs/about-connectors) .\n[Connector reference](/integration-connectors/docs/connector-reference-overview)\n**Important:** Integration Connectors is a billable component of Google Cloud. For information about the costs and charges of using Integration Connectors, see [Integration Connectors pricing](/integration-connectors/docs/pricing) .\n", "content": "## Before you begin\n- Make sure that you have the Connectors Admin (`roles/connectors.admin`) IAM role granted on your Google Cloud project. For information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\n- Learn about the general concepts of [Integration Connectors](/integration-connectors/docs/entities-operation-action) .\n- To connect to Google Cloud services and other business applications using a connector, ensure that you have [attached a user-managed service account](/application-integration/docs/access-control#add-service-account) to your integration. If your integration does not have user-managed service account configured, then by default the [default service account](/application-integration/docs/access-control#default-service-account) (`service-` `` `@gcp-sa-apigee.iam.gserviceaccount.com`) is used for authentication.\n- Ensure that your service account has the required IAM role. For information about granting roles to a service account, see [Manage access to service accounts](/iam/docs/manage-access-service-accounts) .## Add a Connectors task\nTo add the Connectors task in your integration, do the following:\n- In the [Apigee UI](https://apigee.google.com) , select your.\n- Click **Develop > Integrations** .\n- Select an existing integration or create a new integration by clicking **Create Integration** .If you are creating a new integration:- Enter a name and description in the **Create Integration** dialog.\n- Select a **Region** for the integration from the list of supported regions.\n- Click **Create** .\nThis opens the integration in the .\n- In thenavigation bar, click **+Add a task/trigger > Tasks** to view the list of available tasks.\n- Click and place the **Connectors** element in the integration editor.## Configure the Connectors task\nTo configure a **Connectors** task, do the following:\n**Note:** Configuration details such as authentication will vary depending upon the connection type.- Click the **Connectors** task element on the designer to view the **Connectors** task  configuration pane.Optionally, click edit to rename the task name.\n- Click **Configure connector** .\n- You can either select an existing connection in the region or [create an new connection](#create) . To configure an existing connection, complete the following steps in the **Connectors Task Editor** page:\n- For **Select Connectors** , select the region of the connection.\n- Choose an existing connection from the list of available connections in the selected region.\n- Click **Next** .\n- From the **Type** list, select **Entities** or **Actions** .- If you select **Entities** , the list of supported entities for the connection is displayed in the **Set entities/actions** section. Select an   entity followed by the **Operation** that you'd want to perform on that entity.\n- If you select **Actions** , the list of supported actions for the connection is displayed in the **Set entities/actions** column. Select   an action for the connection.\n- The supported entities and actions are based on the connector type. For the list of all the supported connectors for Apigee Integration, see\n- [Connector reference](/integration-connectors/docs/connector-reference-overview) \n- . To view the supported actions and entities for a connector, view the specific connector documentation.\n- If the connector supports custom SQL query, you can select the **Execute custom query** option from the **Actions** list. For example, to see how to add custom SQL query for a BigQuery connector, see [Execute custom SQL query](/integration-connectors/docs/connectors/bigquery/configure#execute-custom-query) .\n- For more about entities and actions, see [Entities, operations, and actions](/integration-connectors/docs/entities-operation-action) .\n **Note** : Not all connection types support **Entities** or **Actions** . If    a connection type doesn't support any actions or entities, the corresponding **Entities** and **Actions** list will be empty.\n- Click **Done** to complete the connection configuration and close the pane.\n- The following image shows a sample layout of the **Connectors Task Editor** page. \n### Configure task input and output variables\nThe **Connectors** task configuration pane displays **Task Input** and **Task Output**  [variables](/apigee/docs/api-platform/integration/variables-overview) that are automatically generated based on the or selected in the **Configure connector task** dialog. These variables  are configurable and are accessible as inputs to the current task or as outputs to subsequent tasks, or conditionals in the current integration.\nTo configure the **Task Input** or **Task Output** variables, click the respective  variable to open the **Configure Variable** pane and perform the following steps:\n- Enter the variable value in the **Default Value** field.\n- (Optional) Select **Use as an input to integration** or **Use as an output to integration** .\n- Click **Save** .\nFor more information about the input and output  parameters of the **Connectors** task, see [Entity operations](#config-prop) .\n## Entity operations\nYou can perform CRUD (Create, Read, Update, Delete) operations on the entities of a connector. Each of these entity operations has a different set of input and output parameters. The following table lists the input and output parameters of the various entity operations.\n| Operation name | Input parameters                                       | Output parameters                                       |\n|:-----------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| List    | listEntitiesPageSize listEntitiesPageToken listEntitiesSortByColumns filterClause                       | connectorOutputPayload listEntitiesNextPageToken                               |\n| Get    | entityId                                         | connectorOutputPayload                                     |\n| Get    | Note: You can use the Get operation only to fetch a single record from a table that has a primary key. Alternately, you can use the List operation with a filterClause. | Note: You can use the Get operation only to fetch a single record from a table that has a primary key. Alternately, you can use the List operation with a filterClause. |\n| Create   | connectorInputPayload                                      | connectorOutputPayload                                     |\n| Update   | connectorInputPayload entityId filterClause                                | connectorOutputPayload                                     |\n| Delete   | entityId filterClause                                      | nan                                          |\n### Input parameters\nThe following table describes the input parameters for the various entity operations.\n| Parameter name   | Data type | Description                                                                                                                                                                                                                                                                     |\n|:--------------------------|:-------------||\n| entityId     | String  | A unique identifier of the row that you want to access. Normally, the entityId is a primary key value of a table or a dataset. If you specify a value for the entityId and the table or dataset doesn't have a primary key column, integration reports a runtime error and the Connectors task fails. For example, to get a specific row from a MySQL table, the entityId is the primary key value in the table. Note: The entityId is not mandatory for BigQuery. This field is empty when a BigQuery table doesn't have a primary key.                                                                                                                                     |\n| connectorInputPayload  | JSON   | The actual data to be added or updated in an entity. The following example shows the JSON snippet of a row data to be added in a table: { \"employee_first_name\": \"John\", \"employee_emailID\": \"test-05@test.com\" } In this example, employee_first_name and employee_emailID are the column names with the corresponding values John and test-05@test.com.                                                                                                                                                                                 |\n| filterClause    | String  | Restricts the result of the operations based on a condition. For more information about adding a filter clause, see Add a filter for an operation.                                                                                                                                                                                                                                   |\n| listEntitiesPageSize  | Integer  | Specifies the number of results that should be returned in a page. A page is a logical grouping of the records in a result set. The concept of a page is useful when you are expecting a large number of records in the result set. If the result set is large, the Connectors task might fail, as there is a limit on the data size that the Connectors task can process. By breaking down the result set into smaller chunks, you can avoid this issue. For example, if you are expecting 1000 records in your result set, you can set the listEntitiesPageSize to 100. So when the Connectors task runs for the first time, it returns the first 100 records, the next 100 records in the second run and so on. Important: The default page size is 25 and the maximum number of pages supported by the task is 200. Unless your table or dataset has a primary key, you must set the listEntitiesSortByColumns parameter to use listEntitiesPageToken. Use the listEntitiesPageSize parameter inconjunction with the listEntitiesPageToken parameter to navigate through the pages. |\n| listEntitiesPageToken  | String  | A page identifier (token) that lets you access a specific page. You can get the value of a page token from the listEntitiesNextPageToken output parameter. Because each page has a unique token, you have the flexibility to access any page you want in the result set. To understand the usage of this parameter, also read the description of the listEntitiesNextPageToken output parameter.                                                                                                                                                                       |\n| listEntitiesSortByColumns | String array | Column name by which you want to sort the result set. Note: You can sort the result set only by one column.                                                                                                                                                                                                                                             |\n### Output parameters\nThe following table describes the output parameters for the various entity operations.\n| Parameter name   | Data type | Description                                                                                                                                                                                                                                                                                                                                                     |\n|:--------------------------|:------------||\n| connectorOutputPayload | JSON  | The output of an operation in JSON format.                                                                                                                                                                                                                                                                                                                                             |\n| listEntitiesNextPageToken | String  | A system generated identifier for a page. You can think of the token as a pointer by which you can access a particular page of the result set. If you have broken down your result set into multiple pages by setting the listEntitiesPageSize parameter, you need a mechanism to navigate through the pages. The listEntitiesNextPageToken output parameter lets you do exactly that. Every time the Connectors task runs, the system generates a token for the next page and sets the listEntitiesNextPageToken's value to the newly generated token. You can then use this token to access the next page in the result set. To access the next page, you must set the listEntitiesPageToken input parameter to the next page's token value. For example, consider you have set the listEntitiesPageSize parameter to 2 and when then Connectors task runs for the first time, the listEntitiesNextPageToken is set to the ChoKC2VtcGxveWVlX2lkEgkRAAAAAAAA8D8YDw== token value. You can then set the listEntitiesPageToken input parameter to this token value to fetch the next page in the subsequent run of the Connectors task. If your result set has a large number of pages, you can consider using the For Each Loop task to repeatedly call the Connectors task and use the Data Mapping task to automatically assign token values to the listEntitiesPageToken input parameter after each run. |\n### Filter clause for entity operations\nYou can restrict the records that are processed by the **Connectors** task using the **Filter clause** variable that is available as a **Task Input** . For example, in case of a **delete** operation, you can add a filter clause to delete records with a specific `orderId` .\nFilter clause can be applied only for the following entity operations:\n- List\n- Delete\n- UpdateWhen you select any of these operations, the **Task Input** section of the **Connectors** task displays the **Filter clause** field automatically.\nTo add a filter clause, perform the following steps:\n- Click the **Connectors** task element on the designer to view the **Connectors** task  configuration pane.\n- Expand the **Task Input** section and click the **filterClause(Connectors)** string variable.The **Configure Variable** dialog appears.\n- Enter the filter clause (following the clause [syntax](#filter-examples) ) in the **Default Value** field.\n- Click **Save** .A filter clause has the following format:\n```\nFIELD_NAME CONDITION FILTER_VALUE\n```\n[Data Mapping task](/apigee/docs/api-platform/integration/data-mapping-task#configure-the-data-mapping-task)\nThe following table shows a sample mapping between an integration variable and the `filterClause(Connectors)` variable:\n| Input              | Output     |\n|:------------------------------------------------------------|:-------------------------|\n| PRIMARY_KEY_ID = ' .CONCAT(INTEGRATION_VARIABLE) .CONCAT(') | filterClause(Connectors) |\n` **PRIMARY_KEY_ID = '** `\n**Value**\n## Inline connection creation\nYou can use the **Connectors task** to directly create a new connection in [Integration Connectors](/integration-connectors/docs/about-connectors) .\n### Before you begin\n- [Add a Connector task](/application-integration/docs/configure-connectors-task#add-a-connectors-task) \n### Create new connection\nTo create a new connection from Apigee Integration, perform the following steps:\n- Click the **Connectors** task element on the designer to view the **Connectors** task  configuration pane.\n- Click **Configure connector** .The **Connectors Task Editor** page appears.\n- Skip the **Region** field.\n- Click **Connection** and select the **Create Connection** option from the drop-down menu.\n- Complete the following steps in the **Create Connection** pane: **Note:** The following instructions are the generic steps to create a connection. While the majority of the steps remain the same for all connection types, a few additional steps or details related to authentication might vary.We recommend that you also view the respective connection type documentation in [Integration Connectors](/integration-connectors/docs/all-integration-connectors) .- In the **Location** step, choose the location for the connection.- Click **Region** and select a location from the drop-down list.\n- Click **Next** .\n- In the **Connection Details** step, provide details about the connection:- **Connector:** Select the type of connector that you want to create from the drop down list. For information about the list of supported connectors, see [All Integration Connectors](/integration-connectors/docs/all-integration-connectors) .\n- **Connector version:** Choose an available version of the selected Connector type from the drop down list.\n- **Connection Name:** Enter a name for the Connection instance. **Note:** Connection names must meet the following criteria:- Connection names can use letters, numbers, or hyphens.\n- Letters must be lower-case.\n- Connection names must begin with a letter and end with a letter or number.\n- Connection names cannot exceed 63 characters.\n- (Optional) Enter a **Description** for the connection instance.\n- (Optional) Check **Enable Cloud Logging** to store the log data of the connection instance.\n- **Service Account** : Select a service account that has the [required roles](#before-you-begin) .\n- (Optional) Click **Advanced settings** to configure the connection node settings.For more information, see the respective connection documentation in [Integration Connectors](/integration-connectors/docs/all-integration-connectors) .\n- (Optional) Click **+ ADD LABEL** to add a label to the connection in the form of a key/value pair.\n- Click **Next** .\n- In the **Authentication** step, provide the authentication details for the connection.- The **Authentication** methods populated during this step are based on the type of connection being created.Different connection types use different authentication methods. For more information, see the **Configure authentication** section of the respective connection documentation in [Integration Connectors](/integration-connectors/docs/all-integration-connectors) .\n- Click **Next** .\n- **Review** : Review your connection and authentication details.\n- Click **Create** .\n## Best practices\n- For information about the usage limits that apply to the **Connectors** task, see [ Usage limits](/apigee/docs/api-platform/integration/system-limits#usage-limits) .\n- For information about how to troubleshoot a failed **Connectors** task, see [Use logs to troubleshoot and trace connector failures](/apigee/docs/api-platform/integration/viewing-logs#use-logs-to-troubleshoot-and-trace-connector-failures) .## Error handling strategy\nAn error handling strategy for a task specifies the action to take if the task fails due to a [temporary error](/apigee/docs/api-platform/integration/error-handling) . For information about how to use an error handling strategy, and to know about the different types of error handling strategies, see [Error handling strategies](/apigee/docs/api-platform/integration/error-handling-strategy) .", "guide": "Apigee"}