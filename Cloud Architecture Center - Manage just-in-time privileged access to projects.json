{"title": "Cloud Architecture Center - Manage just-in-time privileged access to projects", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Manage just-in-time privileged access to projects\nLast reviewed 2024-01-04 UTC\nThis document describes how you can use an open source tool to implement just-in-time privileged access to Google Cloud projects. Just-in-time privileged access lets you grant temporary access to projects for a limited set of users only when the access is needed.\nThe document is for administrators who manage user access to Google Cloud resources. It assumes that you're familiar with Google Cloud, Identity and Access Management (IAM), and related concepts.", "content": "## Overview of just-in-time privileged access managementWhen you follow the principle of least privilege, you grant users just enough access so that they can carry out everyday activities, but can do nothing more. Following this principle helps you reduce risk. However, it can create friction for users when they occasionally need to perform a privileged action\u2014for example, to deal with an unexpected incident. Examples include troubleshooting an issue in a production system or troubleshooting an issue that involves sensitive data.\nOne way to address this issue is to provide \u2014that is, to provide privileged access only as needed. A key idea of just-in-time privileged access management is to distinguish between and :- Permanent access applies until you revoke it. Following the principle of least privilege, it's best to limit permanent access and provide it only to the few users who must have it.\n- Eligible access doesn't apply immediately. Instead, a user that has been granted eligible access to a project must explicitly activate that access before they can access the project. They must also provide a justification for doing so. After the user's access has been activated, the access automatically expires after a short period.\nUsing just-in-time privileged access management can help you do the following:- Reduce the risk of someone accidentally modifying or deleting resources. For example, when users have privileged access only when it's needed, it helps prevent them from running scripts at other times that unintentionally affect resources that they shouldn't be able to change.\n- Create an audit trail that indicates why privileges were activated.\n- Conduct audits and reviews for analyzing past activity.\n## Use Just-in-Time Access to implement privileged access [Just-In-Time Access](https://googlecloudplatform.github.io/jit-access/) is an open source application that's designed to run on App Engine or Cloud Run and lets you implement just-in-time privileged access to Google Cloud resources. The application lets administrators, users, and auditors do the following tasks:- **Administrators** can grant a role to a user or group and make the role eligible by adding the following [IAM condition](/iam/docs/conditions-overview) :```\nhas({}.jitAccessConstraint)\n```\n- **Users** can search for projects and roles that they're eligible to access by using the Just-In-Time Access application.The following screenshot from the Just-In-Time Access application shows a list of roles that a user is eligible for in a project: They can then activate one or more roles and provide a justification for getting access: After a user has activated a role, Just-In-Time Access [grants the user temporary access](/iam/docs/configuring-temporary-access) to the project.\n- **Auditors** can use Cloud Logging to review when and why eligible roles have been activated by users.\nTo protect the application against unauthorized access, the Just-In-Time Access application can be accessed only over [Identity-Aware Proxy (IAP)](/iap) . Using IAP, an administrator can control which users should be allowed to access Just-In-Time Access, and which [additional conditions those users must satisfy](/access-context-manager/docs/custom-access-levels) in order to get access.## Before you beginBefore you deploy the Just-in-Time Access application, you must decide which part of your resource hierarchy you want to manage just-in-time privileged access for. You can manage access for the following resources:- A single project\n- A folder that contains multiple projects\n- All projects of your organization\nTo complete the deployment, you need the following:- Super-admin access to the Cloud Identity or Google Workspace account that corresponds to the Google Cloud organization that you're using.\n- Permission to modify the IAM policy of the project, folder, or organization that you want to manage using Just-In-Time Access.\n- A second Cloud Identity or Google Workspace user that you can use to test access.\nYou also need a Google Cloud project to deploy the Just-In-Time Access application in.- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n## Deploy Just-in-Time AccessThis section describes how you can deploy the Just-In-Time Access application to App Engine or Cloud Run.\nDeploying the Just-In-Time Access application to Cloud Run requires a more complex configuration than deploying the application to App Engine. We therefore recommend that you use App Engine unless you're deploying in a region that doesn't support App Engine, or if you can't use App Engine for other reasons.\nThe code for Just-In-Time Access is in a GitHub repository.\nThis section assumes that you are an administrator.\n### Configure your Google Cloud project\n- In the Google Cloud console, switch to your project and enable required APIs:\nEnable the Cloud Asset Inventory, Resource Manager, Identity-Aware Proxy, Container Registry, Cloud Build, Identity and Access Management, and Directory APIs.\n [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=cloudasset.googleapis.com,cloudresourcemanager.googleapis.com,iap.googleapis.com,containerregistry.googleapis.com,cloudbuild.googleapis.com,iamcredentials.googleapis.com,admin.googleapis.com) \nEnable the Cloud Asset Inventory, Resource Manager, Identity-Aware Proxy, Container Registry, Cloud Run, Compute Engine, Identity and Access Management, and Directory APIs.\n [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=cloudasset.googleapis.com,cloudresourcemanager.googleapis.com,iap.googleapis.com,containerregistry.googleapis.com,run.googleapis.com,compute.googleapis.com,iamcredentials.googleapis.com,admin.googleapis.com) \n- Open Cloud Shell. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Set an environment variable to contain your [project ID](/resource-manager/docs/creating-managing-projects) :```\ngcloud config set project PROJECT_ID\n```Replace with the ID of your project.\n- Create a service account for the Just-in-Time Access application:```\nSERVICE_ACCOUNT=$(gcloud iam service-accounts create jitaccess --display-name \"Just-In-Time Access\" --format \"value(email)\")\n```\n- Allow the application to create tokens using its service account by granting it the **Service Account Token Creator** role ( `roles/iam.serviceAccountTokenCreator` ):```\ngcloud iam service-accounts add-iam-policy-binding $SERVICE_ACCOUNT \\\u00a0 --member \"serviceAccount:$SERVICE_ACCOUNT\" \\\u00a0 --role \"roles/iam.serviceAccountTokenCreator\"\n```The application uses the permission to create tokens to access the [Directory API](https://developers.google.com/admin-sdk/directory/v1/guides) and, optionally, to [handle multi-party approval workflows](https://googlecloudplatform.github.io/jit-access/multi-party-approval/) .\nYou now grant the **Project IAM Admin** role to the application's service account. This role lets the Just-In-Time Access application create temporary IAM bindings when it must grant just-in-time access.\nBecause the **Project IAM Admin** role is highly privileged, you must limit access to the application's service account and to the project that contains it.\nUse the following guidelines:- Limit the number of users that can access the project, and avoid granting any user the **Owner** or **Editor** role.\n- Limit the number of users that can impersonate the service account. The users who should be able to do this impersonation include those who have the **Service Account User** role or the **Service Account Token Creator** role.\nTo grant the **Project IAM Admin** role to the service account, do the following:- Grant the **Project IAM Admin** role ( `roles/resourcemanager.projectIamAdmin` ) and **Cloud Asset Viewer** role ( `roles/cloudasset.viewer` ) to the part of your resource hierarchy that you want to manage just-in-time privileged access for:\n```\nSCOPE_ID=RESOURCE_PROJECT_IDSCOPE_TYPE=projectsgcloud projects add-iam-policy-binding $SCOPE_ID \\\u00a0 \u00a0 --member \"serviceAccount:$SERVICE_ACCOUNT\" \\\u00a0 \u00a0 --role \"roles/resourcemanager.projectIamAdmin\" \\\u00a0 \u00a0 --condition Nonegcloud projects add-iam-policy-binding $SCOPE_ID \\\u00a0 \u00a0 --member \"serviceAccount:$SERVICE_ACCOUNT\" \\\u00a0 \u00a0 --role \"roles/cloudasset.viewer\" \\\u00a0 \u00a0 --condition None\n```\nReplace with the ID of the Google Cloud project that you want to manage access for. This project is a different one than the one you're deploying Just-In-Time Access to.\n```\nSCOPE_ID=RESOURCE_FOLDER_IDSCOPE_TYPE=foldersgcloud resource-manager folders add-iam-policy-binding $SCOPE_ID \\\u00a0 \u00a0 --member \"serviceAccount:$SERVICE_ACCOUNT\" \\\u00a0 \u00a0 --role \"roles/resourcemanager.projectIamAdmin\" \\\u00a0 \u00a0 --condition Nonegcloud resource-manager folders add-iam-policy-binding $SCOPE_ID \\\u00a0 \u00a0 --member \"serviceAccount:$SERVICE_ACCOUNT\" \\\u00a0 \u00a0 --role \"roles/cloudasset.viewer\" \\\u00a0 \u00a0 --condition None\n```\nReplace with the ID of the folder that contains the projects that you want to manage access for.\n```\nSCOPE_ID=ORGANIZATION_IDSCOPE_TYPE=organizationsgcloud organizations add-iam-policy-binding $SCOPE_ID \\\u00a0 \u00a0 --member \"serviceAccount:$SERVICE_ACCOUNT\" \\\u00a0 \u00a0 --role \"roles/resourcemanager.projectIamAdmin\" \\\u00a0 \u00a0 --condition Nonegcloud organizations add-iam-policy-binding $SCOPE_ID \\\u00a0 \u00a0 --member \"serviceAccount:$SERVICE_ACCOUNT\" \\\u00a0 \u00a0 --role \"roles/cloudasset.viewer\" \\\u00a0 \u00a0 --condition None\n```\nReplace with the [ID of your organization](/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id) .\nThe Just-In-Time Access application lets you grant eligible access to a specific user or to an entire group. To evaluate group memberships, the application must be allowed to read group membership information from your Cloud Identity or Google Workspace account.\nTo grant the application's service account access permission to read group memberships, do the following:- Open the [Google Admin console](https://admin.google.com/) and sign in as a super-admin user.\n- Go to **Account\u00a0> Admin Roles** : [Go to Admin Roles](https://admin.google.com/ac/roles) \n- Click **Groups Reader\u00a0> Admins** .\n- Click **Assign service accounts** .\n- Enter the following email address:```\njitaccess@PROJECT_ID.iam.gserviceaccount.com\n```Replace with the ID of your Google Cloud project.\n- Click **Add** .\n- Click **Assign role** .\nTo evaluate group memberships using the [Directory API](https://developers.google.com/admin-sdk/directory/v1/guides) , the Just-In-Time Access application needs your Cloud Identity or Google Workspace account's customer ID. To look up this ID, do the following:- In the Google Admin console, go to **Account\u00a0> Account settings** : [Go to Account settings](https://admin.google.com/ac/accountsettings/profile) \n- Copy your account's customer ID. The customer ID starts with `C` .You need the customer ID in a later step.\n- Close the Admin console.\n### Deploy the applicationYou're now ready to deploy the Just-In-Time Access application to App Engine or Cloud Run.\nTo deploy the Just-In-Time Access application to App Engine, you perform the following steps.- In Cloud Shell, set an environment variable to contain your Cloud Identity or Google Workspace account's customer ID:```\nACCOUNT_CUSTOMER_ID=CUSTOMER_ID\n```Replace with the customer ID you looked up before.\n- Create an App Engine application:```\ngcloud app create --region LOCATION\n```Replace with a [supported App Engine location](/about/locations#region) .\n- Clone the [GitHub repository](https://github.com/GoogleCloudPlatform/jit-access) and switch to the `latest` branch:```\ngit clone https://github.com/GoogleCloudPlatform/jit-access.gitcd jit-access/sourcesgit checkout latest\n```\n- Create a configuration file for the Just-In-Time Access application:```\ncat << EOF > app.yamlruntime: java17instance_class: F2service_account: $SERVICE_ACCOUNTenv_variables:\u00a0 \u00a0 RESOURCE_SCOPE: $SCOPE_TYPE/$SCOPE_ID\u00a0 \u00a0 RESOURCE_CATALOG: AssetInventory\u00a0 \u00a0 RESOURCE_CUSTOMER_ID: $ACCOUNT_CUSTOMER_ID\u00a0 \u00a0 ACTIVATION_TIMEOUT: 60\u00a0 \u00a0 JUSTIFICATION_HINT: \"Bug or case number\"\u00a0 \u00a0 JUSTIFICATION_PATTERN: \".*\"EOF\n```In this configuration file, you can customize the values of the variables. For a list of settings, see the [Configuration options](https://googlecloudplatform.github.io/jit-access/configuration-options/) page in the associated GitHub repository.\n- Deploy the application:```\ngcloud app deploy --appyaml app.yaml\n```Take note of the `target url` in the output. This will be the public URL of the Just-in-Time Access application.If you see the error message `NOT_FOUND: Unable to retrieve P4SA` , retry the command.\nTo deploy the Just-In-Time Access application to Cloud Run, you perform the following steps.- In Cloud Shell, set an environment variable to contain your Cloud Identity or Google Workspace account's customer ID:```\nACCOUNT_CUSTOMER_ID=CUSTOMER_ID\n```Replace with the customer ID you looked up before.\n- Select a region to deploy to:```\ngcloud config set run/region REGION\n```Replace with a region that [supports Cloud Run](/run/docs/locations) .\n- Create a [backend service](/load-balancing/docs/backend-service) :```\ngcloud compute backend-services create jitaccess-backend \\\u00a0 --load-balancing-scheme=EXTERNAL \\\u00a0 --global\n```You later use this backend service to configure a load balancer and IAP.\n- Clone the [GitHub repository](https://github.com/GoogleCloudPlatform/iam-privilege-manager) and switch to the `latest` branch:```\ngit clone https://github.com/GoogleCloudPlatform/jit-access.gitcd jit-access/sourcesgit checkout latest\n```\n- Build the application and push the container image to Container Registry:```\nPROJECT_ID=$(gcloud config get-value core/project)docker build -t gcr.io/$PROJECT_ID/jitaccess:latest .docker push gcr.io/$PROJECT_ID/jitaccess:latest\n```\n- Create a configuration file for the Just-In-Time Access application:```\nPROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format 'value(projectNumber)')REGION=$(gcloud config get-value run/region)IAP_BACKEND_SERVICE_ID=$(gcloud compute backend-services describe jitaccess-backend --global --format 'value(id)')cat << EOF > app.yamlapiVersion: serving.knative.dev/v1kind: Servicemetadata:\u00a0 name: jitaccess\u00a0 namespace: $PROJECT_NUMBER\u00a0 labels:\u00a0 \u00a0 cloud.googleapis.com/location: $REGION\u00a0 annotations:\u00a0 \u00a0 run.googleapis.com/ingress: internal-and-cloud-load-balancingspec:\u00a0 template:\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 serviceAccountName: $SERVICE_ACCOUNT\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - image: gcr.io/$PROJECT_ID/jitaccess:latest\u00a0 \u00a0 \u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 \u00a0 - name: RESOURCE_SCOPE\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: \"$SCOPE_TYPE/$SCOPE_ID\"\u00a0 \u00a0 \u00a0 \u00a0 - name: RESOURCE_CATALOG\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: \"AssetInventory\"\u00a0 \u00a0 \u00a0 \u00a0 - name: RESOURCE_CUSTOMER_ID\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: \"$ACCOUNT_CUSTOMER_ID\"\u00a0 \u00a0 \u00a0 \u00a0 - name: ACTIVATION_TIMEOUT\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: \"60\"\u00a0 \u00a0 \u00a0 \u00a0 - name: JUSTIFICATION_HINT\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: \"Bug or case number\"\u00a0 \u00a0 \u00a0 \u00a0 - name: JUSTIFICATION_PATTERN\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: \".*\"\u00a0 \u00a0 \u00a0 \u00a0 - name: IAP_BACKEND_SERVICE_ID\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: \"$IAP_BACKEND_SERVICE_ID\"EOF\n```In this configuration file, you can customize the values of the variables. For a list of settings, see the [Configuration options](https://googlecloudplatform.github.io/jit-access/configuration-options/) page in the associated GitHub repository.\n- Deploy the application:```\ngcloud run services replace app.yaml\n```\nYou now configure a load balancer for the Just-In-Time Access application.\nApp Engine automatically configures the load balancer for you.\nConfigure a HTTPS load balancer for your Cloud Run service:- Reserve a [static external IP address](/compute/docs/ip-addresses/reserve-static-external-ip-address) for the load balancer:```\ngcloud compute addresses create jitaccess-ip --global\n```\n- Create a [managed SSL certificate](/load-balancing/docs/ssl-certificates/google-managed-certs) for the load balancer:```\ngcloud compute ssl-certificates create jitaccess \\\n --domains PUBLIC_FQDN \\\n --global\n```where `` is the public, fully qualified domain name (FQDN) that you want to use, for example `jitaccess.example.com` .\n- Look up the IP address of the load balancer:```\ngcloud compute addresses describe jitaccess-ip \\\n --global \\\n --format=value\\(address\\)\n```\n- Create a DNS `A` record in your public DNS zone that points to the IP address of the load balancer. The fully qualified name of the DNS record must match the name that you used for the SSL certificate. **Note:** It can take multiple minutes or hours for the new DNS record to propagate. During this time, the managed SSL certificate can't be used. For details, see [Troubleshooting Google-managed certificates](/load-balancing/docs/ssl-certificates/troubleshooting#troubleshooting_google-managed_certificates) .\n- Create a [serverless network endpoint group](/load-balancing/docs/negs/serverless-neg-concepts) for the Cloud Run service and connect it to the backend service:```\ngcloud compute network-endpoint-groups create jitaccess \\\u00a0 --region $(gcloud config get-value run/region) \\\u00a0 --network-endpoint-type=serverless \u00a0\\\u00a0 --cloud-run-service jitaccessgcloud compute backend-services add-backend jitaccess-backend \\\u00a0 --global \\\u00a0 --network-endpoint-group jitaccess \\\u00a0 --network-endpoint-group-region $(gcloud config get-value run/region)\n```\n- Create a load balancer frontend that uses the external IP address and forwards traffic to the backend service:```\ngcloud compute url-maps create jitaccess \\\n --default-service jitaccess-backend\ngcloud compute target-https-proxies create jitaccess-proxy \\\n --ssl-certificates jitaccess \\\n --url-map jitaccess\ngcloud compute forwarding-rules create jitaccess-https \\\n --load-balancing-scheme EXTERNAL \\\n --address jitaccess-ip \\\n --target-https-proxy jitaccess-proxy \\\n --global \\\n --ports=443\n```\nYou now configure IAP for the Just-In-Time Access application.- In Cloud Shell, configure an [OAuth consent screen](/iap/docs/programmatic-oauth-clients#configuring_consent_screen) :```\ngcloud iap oauth-brands create \\\u00a0 \u00a0 --application_title \"Just-In-Time Access\" \\\u00a0 \u00a0 --support_email=$(gcloud config get core/account)\n```\n- In the Google Cloud console, go to **Security\u00a0> Identity-Aware Proxy** . [Go to IAP](https://console.cloud.google.com/security/iap) \n- Set **IAP** to **enabled** .\nYou now must define which users are allowed to access the Just-In-Time Access application. You can grant access to individual users, to groups, or to an entire domain.- In the Google Cloud console, go to **IAM & Admin\u00a0> IAM** . [Go to IAM](https://console.cloud.google.com/iam-admin/iam) \n- Click **Grant access** and then set the following values:- In the principals list, select a user, group, or domain.\n- In the role list, select **IAP-secured web app user** .\nThe **IAP-secured web app user** role lets users open the Just-In-Time Access application, but the role doesn't provide them access to any additional resources yet.\n- Click **Save** .\nIt can take a few minutes for the role binding to take effect.\nThe IAP configuration is now complete.\nTo complete the IAP configuration, grant the **Cloud Run Invoker** role ( `roles/run.invoker` ) to the service agent that's used by IAP:\n```\nPROJECT_NUMBER=$(gcloud projects list \\\n --filter $(gcloud config get-value project) \\\n --format \"value(PROJECT_NUMBER)\")\ngcloud projects add-iam-policy-binding $(gcloud config get-value core/project) \\\n --member \"serviceAccount:service-$PROJECT_NUMBER@gcp-sa-iap.iam.gserviceaccount.com\" \\\n --role \"roles/run.invoker\"\n```## Test Just-in-Time AccessYou can now test the process of granting eligible access and the process of using the Just-In-Time Access application to activate eligible access.\n### Grant eligible accessTo start, you grant eligible access to a second Cloud Identity or Google Workspace user.- In the Google Cloud console, use the project list to select a project that's part of the resource hierarchy that's managed by the Just-In-Time Access application.\n- On the IAM page, click **Grant access** .\n- Enter the email address of your second Cloud Identity or Google Workspace user and select a role such as **Project\u00a0> Browser** .\n- Click **Add condition** .\n- Enter a title such as`Eligible for JIT access`.\n- Select **Condition editor** and then enter the following CEL expression:```\nhas({}.jitAccessConstraint)\n```\n- Save your changes.\n### Activate accessNow you can switch users and request temporary access to a resource.- Open an incognito browser window and navigate to the URL of the Just-In-Time Access application that you noted earlier.\n- Sign in as the user that you've granted eligible access to.\n- In the Just-In-Time Access application, select a role and resource that you want to activate access for.\n- Enter a justification such as `testing` and then click **Request access** .On the next page, notice that your access has temporarily been activated.\n### Analyze logsYou can now switch back to your administrative user and review the log.- In the Google Cloud console, go to **Logging\u00a0> Logs Explorer** . [Go to Logs Explorer](https://console.cloud.google.com/logs/) \n- Set **Show query** to **enabled** .\n- Enter the following query:```\nlabels.event=\"api.activateRole\"\n```\n- Click **Run query** .The output is similar to the following:```\n{\"textPayload\": \"User EMAIL activated role 'ROLE' on '//cloudresourcemanager.googleapis.com/projects/PROJECT_ID' for themselves\",\"severity\": \"INFO\",\"labels\": {\u00a0 \u00a0 \"resource\": \"//cloudresourcemanager.googleapis.com/projects/PROJECT_ID\",\u00a0 \u00a0 \"event\": \"api.activateRole\",\u00a0 \u00a0 \"role\": \"ROLE\",\u00a0 \u00a0 \"clone_id\": \"00c6...\",\u00a0 \u00a0 \"user\": \"EMAIL\",\u00a0 \u00a0 \"justification\": \"testing\",\u00a0 \u00a0 ...\u00a0 },...}\n```Notice that a log record has been created for each role you activated. The log record includes a set of labels that you can use to create custom filters.\n## Upgrade Just-in-Time AccessThis section describes how you can upgrade an existing Just-In-Time Access deployment to use a newer version of the application, or to use a different configuration.\nThis section assumes that you are an administrator.- In the Google Cloud console, switch to your project and then open Cloud Shell. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Set an environment variable to contain your [project ID](/resource-manager/docs/creating-managing-projects) :```\ngcloud config set project PROJECT_ID\n```Replace with the ID of your project.\n- Clone the [GitHub repository](https://github.com/GoogleCloudPlatform/iam-privilege-manager) and switch to the `latest` branch:```\ngit clone https://github.com/GoogleCloudPlatform/jit-access.gitcd jit-access/sourcesgit checkout latest\n```\n- Download the configuration file that you used previously to deploy the application and save it to a file `app.yaml` :\n```\nAPPENGINE_VERSION=$(gcloud app versions list --service default --hide-no-traffic --format \"value(version.id)\")APPENGINE_APPYAML_URL=$(gcloud app versions describe $APPENGINE_VERSION --service default --format \"value(deployment.files.'app.yaml'.sourceUrl)\")curl -H \"Authorization: Bearer $(gcloud auth print-access-token)\" $APPENGINE_APPYAML_URL -o app.yamlcat app.yaml\n```\nIf downloading the file `app.yaml` fails, you can download your current configuration [in the Google Cloud console](https://console.cloud.google.com/appengine/versions?serviceId=default) .\n```\ngcloud config set run/region REGIONgcloud run services describe jitaccess --format yaml > app.yaml\n```\nReplace `` with the region that contains your existing Cloud Run deployment.\n- If you want to make changes to your configuration, edit the `app.yaml` file. For a list of settings, see the [Configuration options](https://googlecloudplatform.github.io/jit-access/configuration-options/) page in the associated GitHub repository.\n- Deploy the application:\n```\nsed -i 's/java11/java17/g' app.yamlgcloud app deploy --appyaml app.yaml\n```\n```\nPROJECT_ID=$(gcloud config get-value core/project)\ndocker build -t gcr.io/$PROJECT_ID/jitaccess:latest .\ndocker push gcr.io/$PROJECT_ID/jitaccess:latest\nIMAGE=$(docker inspect --format='{{index .RepoDigests 0}}' gcr.io/$PROJECT_ID/jitaccess)\nsed -i \"s|image:.*|image: $IMAGE|g\" app.yaml\ngcloud run services replace app.yaml\n```\n## What's next\n- [Configure multi-party approval](https://googlecloudplatform.github.io/jit-access/configure-multi-party-approval/) .\n- Learn how you can use [context-aware access to secure access to Just-In-Time Access](https://support.google.com/a/answer/9275380) .\n- Read more about [IAM conditions](/iam/docs/conditions-overview) .\n- Configure [a custom domain for the Just-In-Time Access application](/run/docs/mapping-custom-domains) .\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .", "guide": "Cloud Architecture Center"}