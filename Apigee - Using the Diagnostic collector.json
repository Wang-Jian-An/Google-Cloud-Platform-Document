{"title": "Apigee - Using the Diagnostic collector", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Using the Diagnostic collector\nYou are currently viewing version 1.6 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\n`apigeectl diagnostic`\n", "content": "## \n What System data is captured?\nDiagnostics collector captures following types of data:\n- Changing Log levels.\n- Jstack.\n- POD configuration yaml.\n- PS -ef output.\n- TCP dump.\n- TOP output.## \n What happens to the data?\nWhen the Diagnostic collector captures the data, it is uploaded to a storage bucket in your Google Cloud project. You can view the stored data in the [Google Cloud Platform: Cloud Storage browser](https://console.cloud.google.com/storage/browser/) .\nYou can optionally choose to share this data with Google Apigee Support when you create a support ticket.\n**Note:** No user runtime data or sensitive information is captured in the data collected by the Diagnostic collector.\n## \n Prerequisites for running Diagnostic collector\nBefore using the Diagnostic collector, you must complete the following prerequisites:\n### \n Google Cloud Storage bucket\nCreate a Google Cloud Storage bucket with a unique name in your Google Cloud project. You can create and manage buckets with `gsutil` commands or in the [Google Cloud Platform: Cloud Storage browser](https://console.cloud.google.com/storage/browser/) .\nFor example:\n```\ngsutil mb gs://apigee_diagnostic_data\n```\n```\nCreating gs://apigee_diagnostic_data/...\n```\nBucket names must be globally unique across all Google Cloud projects,  including those outside of your organization.\nSee [Creating storage buckets](/storage/docs/creating-buckets) for instructions.\n### \n Service account\nCreate a service account with the **Storage Admin** role ( `roles/storage.admin` ) in your project, and download the service account `.json` key file.\nThe service account can have any unique name. This guide uses \" `apigee-diagnostic` \" for the service account name.\nFor example:\n```\ngcloud config set project ${PROJECT_ID}\n```\n```\ngcloud iam service-accounts create apigee-diagnostic\n```\n```\ngcloud projects add-iam-policy-binding ${PROJECT_ID} \\\n --member=\"serviceAccount:apigee-diagnostic@${PROJECT_ID}.iam.gserviceaccount.com\" \\\n --role=\"roles/storage.admin\"\n```\n```\ngcloud iam service-accounts keys create ${PROJECT_ID}-apigee-diagnostic.json \\\n --iam-account=apigee-diagnostic@${PROJECT_ID}.iam.gserviceaccount.com\n```\nSee:\n- [Creating and managing service accounts](/iam/docs/creating-managing-service-accounts) .\n- [Creating and managing service account keys](/iam/docs/creating-managing-service-account-keys) .\n- [Understanding roles: Cloud Storage roles](/iam/docs/understanding-roles#cloud-storage-roles) .## \n Using Diagnostic collector\nThe sequence to use the Diagnostic collector is:\n- Configure the Diagnostic stanza in your`overrides.yaml`file to select the type of information, the Apigee container, and the individual pods you want diagnostic data from. See [Configuring overrides.yaml for Diagnostic collector](#configuring) .\n- Run Diagnostic collector with the following`apigeectl`command.```\napigeectl diagnostic -f OVERRIDES_FILE\n```Where is the path to your `overrides.yaml` file.\n- Check the logs:- Get the pods in the`apigee-diagnostic`namespace.```\nkubectl get pods -n apigee-diagnostic\n```\n- Make note of the pod with the name containing`diagnostic-collector`\n- Check the logs with the following command:```\nkubectl -n apigee-diagnostic logs -f POD_NAME\n```Where is the name of the Diagnostic collector pod.You can also view the collected logs in the [Google Cloud   Platform: Cloud Storage browser](https://console.cloud.google.com/storage/browser/) .\n- After you have collected the data, delete the Diagnostic collector. You cannot run it again  until you have deleted it.```\napigeectl diagnostic delete -f OVERRIDES_FILE\n```## \n Configuring overrides.yaml for Diagnostic collector\nBefore you can run the Diagnostic collector, you need to configure it in your `overrides.yaml` file.\nFor a complete reference of `diagnostic` configuration properties, see the [Configuration property reference: diagnostic.](/apigee/docs/hybrid/v1.6/config-prop-ref#diagnostic)\n### \n Required properties\nThe following properties are required for the Diagnostic collector to run.\n- `diagnostic.serviceAccountPath`: The path to a service account key file for the  service account with the Storage Admin role in [Prerequisites](#prerequisites) .\n- `diagnostic.operation`: Specifies whether to collect all statistics or just logs.Values are: `\"ALL\"` or `\"LOGGING\"`If you set `diagnostic.operation` to `\"LOGGING\"` , the following  properties are required:- [diagnostic.loggingDetails.logDuration](#diagnostic-loggingDetails-logDuration) \n- [diagnostic.loggingDetails.loggerNames](#diagnostic-loggingDetails-loggerNames) \n- [diagnostic.loggingDetails.logLevel](#diagnostic-loggingDetails-logLevel) \n- `diagnostic.bucket`: The name of the Google Cloud storage bucket where your  diagnostic data will be deposited. This is the bucket you created in [Prerequisites](#prerequisites) .\n- `diagnostic.container`: This specifies which type of pod you are capturing data  from. The values can be one of:| container value  | Apigee component | Kubernetes namespace | Example pod name in this container      |\n|:--------------------|:-------------------|:-----------------------|:---------------------------------------------------------|\n| apigee-cassandra | Cassandra   | apigee     | apigee-cassandra-default-0        |\n| istio-proxy   | Istio ingress  | istio-system   | istio-ingressgateway-696879cdf8-9zzzf     |\n| apigee-mart-server | MART    | apigee     | apigee-mart-hybrid-example-d89fed1-151-jj2ux-l7nlb  |\n| apigee-runtime  | Message Processor | apigee     | apigee-runtime-hybrid-example-3b2ebf3-151-s64bh-g9qmv |\n| apigee-synchronizer | Synchronizer  | apigee     | apigee-synchronizer-hybrid-example-3b2ebf3-151-xx4z6cg78 |\n| apigee-udca   | UDCA    | apigee     | apigee-udca-hybrid-example-3b2ebf3-151-q4g2c-vnzg9  |\n| apigee-watcher  | Watcher   | apigee     | apigee-watcher-hybrid-example-d89fed1-151-cpu3s-sxxdf |\n- `diagnostic.namespace`: The Kubernetes namespace in which the pods you are  collecting data on reside. The namespace must be the correct one for the container you specify  with [diagnostic.container](#container) .\n- `diagnostic.podNames`: The names of the individual pods on which you want to collect  diagnostic data. For example:```\ndiagnostic:\u00a0\u2026\u00a0podNames:\u00a0- apigee-runtime-hybrid-example-3b2ebf3-150-8vfoj-2wcjn\u00a0- apigee-runtime-hybrid-example-3b2ebf3-150-8vfoj-6xzn2\n```\n### \n Properties required only when the operation is set to LOGGING\nThe following properties are required only when running Diagnostic collector with `diagnostic.operation` is `LOGGING` .\n- `diagnostic.loggerNames`: Specifies by name which loggers to collect data from. For  Apigee hybrid version 1.6.0, the only value supported is`ALL`, meaning all  loggers. For example:```\ndiagnostic:\u00a0\u2026\u00a0loggingDetails:\u00a0 \u00a0loggerNames:\u00a0 \u00a0- ALL\n```\n- `diagnostic.logLevel`: Specifies the granularity of the logging data to collect.  In Apigee hybrid 1.6, Only`FINE`is supported.\n- `diagnostic.logDuration`: The duration in milliseconds of the log data collected. A  typical value is`30000`.\n### \n Optional properties\nThe following properties are optional.\n- `diagnostic.tcpDumpDetails.maxMsgs`: Sets the maximum number of`tcpDump`messages to collect. Apigee recommends a maximum value no greater than`1000`.\n- `diagnostic.tcpDumpDetails.timeoutInSeconds`: Sets the amount of time in seconds to  wait for`tcpDump`to return messages.\n- `diagnostic.threadDumpDetails.delayInSeconds`: The delay in seconds between  collecting each thread dump. Must be used with`diagnostic.threadDumpDetails.iterations`.\n- `diagnostic.threadDumpDetails.iterations`: The number of jstack thread dump  iterations to collect. Must be used with`diagnostic.threadDumpDetails.delayInSeconds`.\n### \n General example\nThe following is an example `diagnostic` stanza showing all possible entries:\n```\ndiagnostic:\u00a0 # required properties:\u00a0 serviceAccountPath: \"service-accounts/apigee-diagnostics.json\"\u00a0 operation: \"ALL\"\u00a0 bucket: \"diagnostics_data\"\u00a0 container: \"apigee-runtime\"\u00a0 namespace: \"apigee\"\u00a0 podNames:\u00a0 - apigee-runtime-hybrid-example-3b2ebf3-150-8vfoj-2wcjn\u00a0 - apigee-runtime-hybrid-example-3b2ebf3-150-8vfoj-6xzn2\u00a0 # required if operation is Logging\u00a0 loggingDetails:\u00a0 \u00a0 loggerNames:\u00a0 \u00a0 - ALL\u00a0 \u00a0 logLevel: FINE\u00a0 \u00a0 logDuration: 30000\u00a0 # optional properties:\u00a0 tcpDumpDetails:\u00a0 \u00a0 maxMsgs: 10\u00a0 \u00a0 timeoutInSeconds: 100\u00a0 threadDumpDetails:\u00a0 \u00a0 iterations: 5\u00a0 \u00a0 delayInSeconds: 2\n```\n## \n Common use cases\nThe following examples show how to configure and use Diagnostic collector in some common situations.\n### \n High Proxy Latency\nIn this case Apigee-runtime is taking a long time to process requests, causing customers to see high proxy latencies. You need to collect Jstack and TOP output.\n- Select any 2 runtime pods.\n- Create your`diagnostic`stanza with the following structure:```\ndiagnostic:\u00a0 serviceAccountPath: \"service-accounts/apigee-diagnostics.json\"\u00a0 operation: \"ALL\"\u00a0 bucket: \"diagnostics_data\"\u00a0 container: \"apigee-runtime\"\u00a0 namespace: \"apigee\"\u00a0 podNames:\u00a0 - apigee-runtime-hybrid-example-3b2ebf3-150-8vfoj-2wcjn\u00a0 - apigee-runtime-hybrid-example-3b2ebf3-150-8vfoj-6xzn2\u00a0 tcpDumpDetails:\u00a0 \u00a0 maxMsgs: 10\u00a0 threadDumpDetails:\u00a0 \u00a0 iterations: 15\u00a0 \u00a0 delayInSeconds: 1\n```\n- After configuring the`diagnostic`stanza, run the Diagnostic collector.```\napigeectl diagnostic -f OVERRIDES_FILE\n```\n- Collect the logs and delete the Diagnostic collector.```\napigeectl diagnostic delete -f OVERRIDES_FILE\n```\n### \n Network / connectivity problems\nYou need to run diagnostics on apigee-runtime as well as ingress gateway pods.\n- Select any 2 runtime pods.\n- Create your`diagnostic`stanza with the following structure:```\ndiagnostic:\u00a0 serviceAccountPath: \"service-accounts/apigee-diagnostics.json\"\u00a0 operation: \"ALL\"\u00a0 bucket: \"diagnostics_data\"\u00a0 container: \"apigee-runtime\"\u00a0 namespace: \"apigee\"\u00a0 podNames:\u00a0 - apigee-runtime-hybrid-example-3b2ebf3-150-8vfoj-2wcjn\u00a0 - apigee-runtime-hybrid-example-3b2ebf3-150-8vfoj-6xzn2\u00a0 tcpDumpDetails:\u00a0 \u00a0 maxMsgs: 1000\n```\n- After configuring the`diagnostic`stanza, run the Diagnostic collector.```\napigeectl diagnostic -f OVERRIDES_FILE\n```\n- Collect the logs and delete the Diagnostic collector.```\napigeectl diagnostic delete -f OVERRIDES_FILE\n```\n- Select two pods from the Istio ingress gateway.\n- Reconfigure your`diagnostic`stanza with the Istio ingress pods:```\ndiagnostic:\u00a0 serviceAccountPath: \"service-accounts/apigee-diagnostics.json\"\u00a0 operation: \"ALL\"\u00a0 bucket: \"diagnostics_data\"\u00a0 container: \"istio-proxy\"\u00a0 namespace: \"istio-system\"\u00a0 podNames:\u00a0 - istio-ingressgateway-696879cdf8-9zzzf\u00a0 - istio-ingressgateway-696879cdf8-6abc7\u00a0 tcpDumpDetails:\u00a0 \u00a0 maxMsgs: 1000\n```\n- After configuring the`diagnostic`stanza, run the Diagnostic collector.```\napigeectl diagnostic -f OVERRIDES_FILE\n```\n- Collect the logs and delete the Diagnostic collector.```\napigeectl diagnostic delete -f OVERRIDES_FILE\n```\n### \n Proxies are throwing unexpected errors or new contracts are not getting applied\nIn this case you need to change log levels to debug for at least 5 minutes, or even 10 minutes as in this example. This will increase the amount of logs but helpful information will be logged. You will run Diagnostic collector twice, once on Apigee runtime then on Apigee synchronizer.\n- Select any 2 runtime pods.\n- Create your`diagnostic`stanza with the following structure:```\ndiagnostic:\u00a0 serviceAccountPath: \"service-accounts/apigee-diagnostics.json\"\u00a0 operation: \"LOGGING\"\u00a0 bucket: \"diagnostics_data\"\u00a0 namespace: \"apigee\"\u00a0 container: \"apigee-runtime\"\u00a0 podNames:\u00a0 - apigee-runtime-hybrid-example-3b2ebf3-150-8vfoj-2wcjn\u00a0 - apigee-runtime-hybrid-example-3b2ebf3-150-8vfoj-6xzn2\u00a0 loggingDetails:\u00a0 \u00a0 loggerNames:\u00a0 \u00a0 - ALL\u00a0 \u00a0 logLevel: FINE\u00a0 \u00a0 logDuration: 60000\n```\n- After configuring the`diagnostic`stanza, run the Diagnostic collector.```\napigeectl diagnostic -f OVERRIDES_FILE\n```\n- Collect the logs and delete the Diagnostic collector.```\napigeectl diagnostic delete -f OVERRIDES_FILE\n```\n- Select any 2 synchronizer pods.\n- Create your`diagnostic`stanza with the following structure:```\ndiagnostic:\u00a0 serviceAccountPath: \"service-accounts/apigee-diagnostics.json\"\u00a0 operation: \"LOGGING\"\u00a0 bucket: \"diagnostics_data\"\u00a0 namespace: \"apigee\"\u00a0 container: \"apigee-synchronizer\"\u00a0 podNames:\u00a0 - apigee-synchronizer-hybrid-example-3b2ebf3-150-xx4z-6cg78\u00a0 - apigee-synchronizer-hybrid-example-3b2ebf3-150-xx4z-1a2b3\u00a0 loggingDetails:\u00a0 \u00a0 loggerNames:\u00a0 \u00a0 - ALL\u00a0 \u00a0 logLevel: FINE\u00a0 \u00a0 logDuration: 60000\n```\n- After configuring the`diagnostic`stanza, run the Diagnostic collector.```\napigeectl diagnostic -f OVERRIDES_FILE\n```\n- Collect the logs and delete the Diagnostic collector.```\napigeectl diagnostic delete -f OVERRIDES_FILE\n```", "guide": "Apigee"}