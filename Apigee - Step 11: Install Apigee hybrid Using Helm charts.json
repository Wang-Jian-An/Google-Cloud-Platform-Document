{"title": "Apigee - Step 11: Install Apigee hybrid Using Helm charts", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Step 11: Install Apigee hybrid Using Helm charts\n", "content": "## Install the Apigee hybrid Helm charts\nIn this step, you will use Helm to install the following Apigee hybrid components:\n- Apigee operator\n- Apigee datastore\n- Apigee telemetry\n- Apigee Redis\n- Apigee ingress manager\n- Apigee organization\n- Your Apigee environment(s)\nYou will install the charts for each environment one at a time. The sequence in which you install the components matters.\n**Note:** Before executing any of the Helm upgrade/install commands, use the Helm dry-run feature by adding`--dry-run`at the end of the command. See`helm install --h`to list supported commands, options, and usage.\n**Caution:** If you are installing the charts on a cluster you have migrated from`apigeectl`management to Helm management with the [Apigee Helm migration tool](/apigee/docs/hybrid/v1.11/helm-migration) , omit the`--atomic`flag from all of the following commands.\n- If you have not, navigate into your`APIGEE_HELM_CHARTS_HOME`directory. Run the  following commands from that directory.\n- Install Apigee Operator/Controller: **Note:** This step requires elevated cluster permissions. Run`helm -h`or`helm install -h`for detailsDry run:```\nhelm upgrade operator apigee-operator/ \\\n --install \\\n --create-namespace \\\n --namespace apigee-system \\\n --atomic \\\n -f overrides.yaml \\\n --dry-run\n```Install the chart:```\nhelm upgrade operator apigee-operator/ \\\n --install \\\n --create-namespace \\\n --namespace apigee-system \\\n --atomic \\\n -f overrides.yaml\n```Verify Apigee Operator installation:```\nhelm ls -n apigee-system\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 NAMESPACE \u00a0 \u00a0 \u00a0 REVISION \u00a0 \u00a0 \u00a0 \u00a0UPDATED \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 STATUS \u00a0 \u00a0 \u00a0 \u00a0 \u00a0CHART \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 APP VERSIONoperator \u00a0 \u00a0apigee-system \u00a0 3 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2023-06-26 00:42:44.492009 -0800 PST \u00a0 \u00a0deployed \u00a0 \u00a0 \u00a0 \u00a0apigee-operator-1.11.1 \u00a0 1.11.1\n```Verify it is up and running by checking its availability:```\nkubectl -n apigee-system get deploy apigee-controller-manager\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0READY \u00a0 UP-TO-DATE \u00a0 AVAILABLE \u00a0 AGEapigee-controller-manager \u00a0 1/1 \u00a0 \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a01 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 7d20h\n```\n- Install Apigee datastore:Dry run:```\nhelm upgrade datastore apigee-datastore/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml \\\n --dry-run\n```Install the chart:```\nhelm upgrade datastore apigee-datastore/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n```Verify `apigeedatastore` is up and running by checking its state before   proceding to the next step:```\nkubectl -n apigee get apigeedatastore default\n``````\nNAME \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 \u00a0 AGEdefault \u00a0 running \u00a0 \u00a02d\n```\n- Install Apigee telemetry:Dry run:```\nhelm upgrade telemetry apigee-telemetry/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml \\\n --dry-run\n```Install the chart:```\nhelm upgrade telemetry apigee-telemetry/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n```Verify it is up and running by checking its state:```\nkubectl -n apigee get apigeetelemetry apigee-telemetry\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 STATE \u00a0 \u00a0 AGEapigee-telemetry \u00a0 running \u00a0 2d\n```\n- Install Apigee Redis:Dry run:```\nhelm upgrade redis apigee-redis/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml \\\n --dry-run\n```Install the chart:```\nhelm upgrade redis apigee-redis/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n```Verify it is up and running by checking its state:```\nkubectl -n apigee get apigeeredis default\n``````\nNAME \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 AGEdefault \u00a0 running \u00a0 2d\n```\n- Install Apigee ingress manager:Dry run:```\nhelm upgrade ingress-manager apigee-ingress-manager/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml \\\n --dry-run\n```Install the chart:```\nhelm upgrade ingress-manager apigee-ingress-manager/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n```Verify it is up and running by checking its availability:```\nkubectl -n apigee get deployment apigee-ingressgateway-manager\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0READY \u00a0 UP-TO-DATE \u00a0 AVAILABLE \u00a0 AGEapigee-ingressgateway-manager \u00a0 2/2 \u00a0 \u00a0 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2d\n```\n- Install Apigee organization:Dry run:```\nhelm upgrade ORG_NAME apigee-org/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml \\\n --dry-run\n```Install the chart:```\nhelm upgrade ORG_NAME apigee-org/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n```Verify it is up and running by checking the state of the respective org:```\nkubectl -n apigee get apigeeorg\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 AGEapigee-org1-xxxxx \u00a0 \u00a0 \u00a0 \u00a0 \u00a0running \u00a0 2d\n```\n- Install the environment.You must install one environment at a time. Specify the environment with `--set env=` :Dry run:```\nhelm upgrade ENV_NAME apigee-env/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n --set env=ENV_NAME \\\n -f overrides.yaml \\\n --dry-run\n```Install the chart:```\nhelm upgrade ENV_NAME apigee-env/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n --set env=ENV_NAME \\\n -f overrides.yaml\n```Verify it is up and running by checking the state of the respective env:```\nkubectl -n apigee get apigeeenv\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 \u00a0 AGE \u00a0 GATEWAYTYPEapigee-org1-dev-xxx \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0running \u00a0 \u00a0 2d\n```\n- Install the environment groups (`virtualhosts`).- You must install one environment group (virtualhost) at a time. Specify the environment   group with`--set envgroup=`. Repeat the following   commands for each env group mentioned in the overrides.yaml file:Dry run:```\nhelm upgrade ENV_GROUP_NAME apigee-virtualhost/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n --set envgroup=ENV_GROUP_NAME \\\n -f overrides.yaml \\\n --dry-run\n```Install the chart:```\nhelm upgrade ENV_GROUP_NAME apigee-virtualhost/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n --set envgroup=ENV_GROUP_NAME \\\n -f overrides.yaml\n``` **Note:** must be unique within the`apigee`namespace. For example, if you have a`prod`env and   envgroup, you should set this name to`prod-envgroup`. The later env group   name should still be`prod`.\n- Check the state of the ApigeeRoute (AR).Installing the `virtualhosts` creates ApigeeRouteConfig (ARC) which internally creates    ApigeeRoute (AR) once the Apigee watcher pulls env group related    details from the control plane. Therefore, check that the corresponding    AR's state is running:```\nkubectl -n apigee get arc\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATE \u00a0 AGEapigee-org1-dev-egroup \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2d\n``````\nkubectl -n apigee get ar\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 AGEapigee-org1-dev-egroup-xxxxxx \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0running \u00a0 2d\n```**Congratulations!** You've successfully installed and configured the Apigee hybrid runtime plane.\n## GKE with Workload Identity\nIf you are installing Apigee hybrid on GKE and you are configuring Workload Identity to authenticate service accounts, in the next  step, you will configure the associations between the Kubernetes service accounts and the Google service accounts for your cluster.\n## Next step\nstepper_buttons is defined in localvars Iterate over all the buttons in the data dictionary If the button's step matches the current step in the process, make the button disabled [1](/apigee/docs/hybrid/v1.11/helm-install-create-cluster) If the button's step matches the current step in the process, make the button disabled [2](/apigee/docs/hybrid/v1.11/helm-install-download-charts) If the button's step matches the current step in the process, make the button disabled [3](/apigee/docs/hybrid/v1.11/helm-install-create-namespace) If the button's step matches the current step in the process, make the button disabled [4](/apigee/docs/hybrid/v1.11/helm-install-service-accounts) If the button's step matches the current step in the process, make the button disabled [5](/apigee/docs/hybrid/v1.11/helm-install-create-tls-certificates) If the button's step matches the current step in the process, make the button disabled [6](/apigee/docs/hybrid/v1.11/helm-install-create-overrides) If the button's step matches the current step in the process, make the button disabled [7](/apigee/docs/hybrid/v1.11/helm-install-enable-synchronizer-access) If the button's step matches the current step in the process, make the button disabled [8](/apigee/docs/hybrid/v1.11/helm-install-cert-manager) If the button's step matches the current step in the process, make the button disabled [9](/apigee/docs/hybrid/v1.11/helm-install-crds) If the button's step matches the current step in the process, make the button disabled [10](/apigee/docs/hybrid/v1.11/helm-install-check-cluster) If the button's step matches the current step in the process, make the button disabled If the button's step matches the next step [11](/apigee/docs/hybrid/v1.11/helm-install-helm-charts) If the button's step matches the current step in the process, make the button disabled In all other cases (previous buttons or future buttons (after the next one), make them links [(NEXT) Step 12: Set up Workload Identity](/apigee/docs/hybrid/v1.11/helm-install-workload-identity)\n## All other installations\nIn the next step, you will configure the Apigee ingress gateway and deploy a proxy to test your installation.\n## Next step\nstepper_buttons is defined in localvars Iterate over all the buttons in the data dictionary If the button's step matches the current step in the process, make the button disabled In all other cases (previous buttons or future buttons (after the next one), make them links [(NEXT) Step 1: Expose Apigee ingress](/apigee/docs/hybrid/v1.11/install-expose-apigee-ingress) If the button's step matches the current step in the process, make the button disabled [2](/apigee/docs/hybrid/v1.11/install-deploy-proxy)", "guide": "Apigee"}