{"title": "Cloud Architecture Center - Cloud Volumes APIs", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Cloud Volumes APIs\nLast reviewed 2023-11-19 UTC\nThe cloud volumes capabilities that are available through the web UI are also available through RESTful APIs. The APIs enable you to programmatically create and manage cloud volumes. They also provide the capability to develop scripts and tools for provisioning and support other service workflows.\n", "content": "## View the NetApp Cloud Volumes API Swagger specification\nTo view the [NetApp Cloud Volumes API Swagger specification](https://cloudvolumesgcp-api.netapp.com/swagger.json) with Swagger Editor, do the following:\n- Go to [Swagger Editor](https://editor.swagger.io) .\n- Select **File > Import URL** .\n- Enter the following URL:`https://cloudvolumesgcp-api.netapp.com/swagger.json`\n- Click **OK** .The Cloud Volumes APIs ( `CVS-GCP` ) are displayed.## Create your service account and private key\n- In Cloud Shell, create a service account in your project:```\ngcloud iam service-accounts create serviceaccountname \\\n --description \"Admin SA for CVS API access\" \\\n --display-name \"cloudvolumes-admin-sa\"\n```\n- Assign the NetApp cloud volumes admin role to the service account. Replace and with your project ID and with the service account you just created:```\ngcloud projects add-iam-policy-binding projectid \\\n --member='serviceAccount:serviceaccount@projectid.iam.gserviceaccount.com' \\\n --role='roles/netappcloudvolumes.admin'\n```\n- Confirm the role bindings for the service account and project:```\ngcloud projects get-iam-policy projectid\n```The output looks something like this: ## Manage API authentication\nCloud Volumes Service APIs use bearer authentication. Before you can make any API calls, you must fetch a valid JSON web token (JWT) from Identity and Access Management.\nThere are two ways to obtain valid tokens from Identity and Access Management: by using service account impersonation or by using a service account key.\n### Authenticate using service account impersonation\nYou can use service account impersonation to allow principals and resources to act as an IAM service account. This method of authentication is more secure than using a service account key for this purpose. For more information, see [Service account impersonation](/iam/docs/service-account-impersonation) .\nWhen you use service account impersonation, the code runs with .\nExamples of Application Default Credentials include the following:\n- The identity or principal used for [gcloud auth application-default login](/sdk/gcloud/reference/auth/application-default/login) , such as your Google user access credentials\n- The service account attached to a Compute Engine virtual machine\n- The service account attached to a Cloud Function\n- The service account attached to a Cloud Build job\n- The IAM service account on a GKE cluster using Workload Identity\nFor more information, see [Attaching a service account to a resource](/iam/docs/attach-service-accounts#attaching-to-resources) .\nWhen you use service account impersonation, use the [Fetch a JSON web token using service account impersonation](/architecture/partners/netapp-cloud-volumes/api#fetch_a_json_web_token_by_using_service_account_impersonation) example code to generate JSON web tokens.\n- To grant the `iam.serviceAccountTokenCreator` role to your ADC user on the service account that you created in the previous section, follow the instructions in [Allowing a principal to impersonate a single service account](/iam/docs/manage-access-service-accounts) .Example:```\ngcloud iam service-accounts add-iam-policy-binding \\\u00a0 serviceaccount@projectid.iam.gserviceaccount.com \\\u00a0 --member=user:my-gcloud-user@example.com \\\u00a0 --role=roles/iam.serviceAccountTokenCreator\n```This binding grants the `my-gcloud-user@example.com` user the permissions to impersonate the service account `serviceaccount@projectid.iam.gserviceaccount.com` .Only the `serviceaccount@projectid.iam.gserviceaccount.com` account needs the permissions of the `roles/netappcloudvolumes.admin` role.\n### Authenticate using a service account key\nYou can create a JSON key for the service account created in the previous section and use the key to obtain a JSON web token. This method of authentication is less secure than using service account impersonation. Google recommends against using service account keys for this purpose. For more information, see [Best practices for working with service accounts](/iam/docs/best-practices-service-accounts#service-account-keys) .\n- To create and download a private JSON key file, run the following command:```\ngcloud iam service-accounts keys create key_file_name --iam-account serviceaccount@projectid\n```## Examples of using the Cloud Volumes APIs\nThe examples in this section use Python 3.6 or later to interact with the Cloud Volumes Service APIs.\nTo use these examples, install the required Python modules:\n```\npip3 install requests google google.auth \\google-api-python-client google-cloud-iam\n```\n### Fetch a JSON web token by using service account impersonation\nThe following example fetches a JSON web token (JWT) using service account impersonation. This example also defines the `get_headers` helper function, which is used in other examples on this page.\nThis example requires that the `iamcredentials.googleapis.com` API is enabled.\n```\ndef get_headers(token: str) -> dict:\u00a0 \u00a0 headers = {\u00a0 \u00a0 \u00a0 \u00a0 \"Content-Type\": \"application/json\",\u00a0 \u00a0 \u00a0 \u00a0 \"Authorization\": \"Bearer \" + token\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 return headersdef get_token(service_account_name) -> str:\u00a0 \u00a0 import datetime\u00a0 \u00a0 import json\u00a0 \u00a0 from google.cloud import iam_credentials_v1\u00a0 \u00a0 token_expiration_time_seconds = 30*60 # 30 minutes lifetime\u00a0 \u00a0 audience = 'https://cloudvolumesgcp-api.netapp.com/'\u00a0 \u00a0 client = iam_credentials_v1.IAMCredentialsClient()\u00a0 \u00a0 service_account_path = client.service_account_path('-', service_account_name)\u00a0 \u00a0 # Build the claims set\u00a0 \u00a0 curr_time = datetime.datetime.now()\u00a0 \u00a0 expiration = curr_time + datetime.timedelta(seconds=token_expiration_time_seconds)\u00a0 \u00a0 claims = {\u00a0 \u00a0 \u00a0 \u00a0 \"iss\": service_account_name,\u00a0 \u00a0 \u00a0 \u00a0 \"aud\": audience,\u00a0 \u00a0 \u00a0 \u00a0 \"iat\": int(curr_time.timestamp()),\u00a0 \u00a0 \u00a0 \u00a0 \"exp\": int(expiration.timestamp()),\u00a0 \u00a0 \u00a0 \u00a0 \"sub\": service_account_name,\u00a0 \u00a0 }\u00a0 \u00a0 response = client.sign_jwt(request={\"name\": service_account_path,\"payload\": json.dumps(claims)})\u00a0 \u00a0 return response.signed_jwttoken = get_token(\"serviceaccount@projectid.iam.gserviceaccount.com\")\n```\n### Fetch a JSON web token by using a service account key\nThe following example fetches a JSON web token (JWT) by using a service account JSON key. This example also defines the `get_headers` helper function, which is used in other examples on this page.\n```\ndef get_headers(token: str) -> dict:\u00a0 \u00a0 headers = {\u00a0 \u00a0 \u00a0 \u00a0 \"Content-Type\": \"application/json\",\u00a0 \u00a0 \u00a0 \u00a0 \"Authorization\": \"Bearer \" + token\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 return headersdef get_token(service_account_file: str) -> str:\u00a0 \u00a0 import google.auth.transport.requests\u00a0 \u00a0 from google.oauth2 import service_account\u00a0 \u00a0 from google.auth import jwt\u00a0 \u00a0 audience = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 # Create credential object from private key file\u00a0 \u00a0 svc_creds = service_account.Credentials.from_service_account_file(service_account_file)\u00a0 \u00a0 # Create JWT\u00a0 \u00a0 jwt_creds = jwt.Credentials.from_signing_credentials(svc_creds, audience=audience)\u00a0 \u00a0 # Issue request to get auth token\u00a0 \u00a0 request = google.auth.transport.requests.Request()\u00a0 \u00a0 jwt_creds.refresh(request)\u00a0 \u00a0 # Extract token\u00a0 \u00a0 return jwt_creds.token.decode('utf-8')token = get_token(\"key.json\")\n```\n### Determine the project number\nCloud Volumes Service APIs use automatically generated [Google Cloud project numbers](/resource-manager/docs/creating-managing-projects#before_you_begin) to identify projects, but users often use human-readable and customizable project IDs. You can look up project numbers in the Google Cloud console, or you can use the function in the following example to get the project number associated with the project ID in your key file. This `get_google_project_number` function is used in other examples in this section.\nTo use this function, the user must have the `resourcemanager.projects.get` permission, and the Cloud Resource Manager API ( `cloudresourcemanager.googleapis.com` ) must be enabled.\n```\ndef get_google_project_number(service_account_identifier: str) -> str:\u00a0 \u00a0 import re, json\u00a0 \u00a0 from google.auth import default\u00a0 \u00a0 from googleapiclient import discovery, errors\u00a0 \u00a0 # Is string passed a service account name?\u00a0 \u00a0 user_managed_sa_regex = \"^[a-z]([-a-z0-9]*[a-z0-9])@[a-z0-9-]+\\.iam\\.gserviceaccount\\.com$\"\u00a0 \u00a0 if re.match(user_managed_sa_regex, service_account_identifier):\u00a0 \u00a0 \u00a0 \u00a0 project_id = service_account_identifier.split('@')[1].split('.')[0]\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 with open(service_account_identifier) as json_file:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 content = json.load(json_file)\u00a0 \u00a0 \u00a0 \u00a0 project_id = content['project_id']\u00a0 \u00a0 credentials, _ = default()\u00a0 \u00a0 service = discovery.build('cloudresourcemanager', 'v1', credentials=credentials)\u00a0 \u00a0 request = service.projects().get(projectId=project_id)\u00a0 \u00a0 try:\u00a0 \u00a0 \u00a0 \u00a0 response = request.execute()\u00a0 \u00a0 \u00a0 \u00a0 return response[\"projectNumber\"]\u00a0 \u00a0 except errors.HttpError as e:\u00a0 \u00a0 \u00a0 \u00a0 print(\"Unable to resolve JSON keyfile to project number. Missing resourcemanager.projects.get permissions?\")\u00a0 \u00a0 \u00a0 \u00a0 return \"\"# Call using a key fileproject_number = get_google_project_number(\"key.json\")# Call using \u00a0a service account nameproject_number = get_google_project_number(\"serviceaccount@projectid.iam.gserviceaccount.com\")\n```\n### Create a storage pool\n```\ndef create_pool(token:str, project_number: str, region: str, payload: dict):\u00a0 \u00a0 import requests\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 post_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Pools\"\u00a0 \u00a0 # POST request to create the pool\u00a0 \u00a0 r = requests.post(post_url, json=payload, headers=get_headers(token))\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 if not (r.status_code == 201 or r.status_code == 202):\u00a0 \u00a0 \u00a0 \u00a0 print(f\"ERROR: HTTP code: {r.status_code} {r.reason} for url: {r.url}\")\u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 pool = r.json()['response']['AnyValue']\u00a0 \u00a0 # Get pool attributes\u00a0 \u00a0 # Note that process might take some minutes and some\u00a0 \u00a0 # attributes are only available after it is finished\u00a0 \u00a0 poolname = pool[\"name\"]\u00a0 \u00a0 sizeGiB = int(pool[\"sizeInBytes\"] / 1024**3)\u00a0 \u00a0 region = pool[\"region\"]\u00a0 \u00a0 numvols = pool[\"numberOfVolumes\"]\u00a0 \u00a0 print(f\"poolname: {poolname:30} size: {sizeGiB:>7} GiB region: {region} # of Vols: {numvols}\")keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)poolname = \"ok-pooltest\"region = \"europe-west1\"network = \"ncv-vpc\"regionalHA = Falsepayload = {\u00a0 \u00a0 \"name\": poolname,\u00a0 \u00a0 \"region\": region,\u00a0 \u00a0 \"serviceLevel\": \"ZoneRedundantStandardSW\" if regionalHA == True else \"StandardSW\", # \"StandardSW\" or \"ZoneRedundantStandardSW\"\u00a0 \u00a0 \"storageClass\": \"software\",\u00a0 \u00a0 \"zone\": f\"{region}-b\", # use zone b in desired region\u00a0 \u00a0 # \"secondaryZone\": f\"{region}-c\", # omit for zonal pool\u00a0 \u00a0 \"regionalHA\": regionalHA, \u00a0# set \"True\" for multi-zone and specify secondaryZone\u00a0 \u00a0 \"sizeInBytes\": 1024*1024**3, # 1024 GiB\u00a0 \u00a0 \"network\": f\"projects/{project_number}/global/networks/{network}\",}create_pool(token, project_number, region, payload)\n```\nThe output should be similar to the following:\n```\npoolname: ok-pooltest  size: 1024 GiB region: europe-west1 # of Vols: 0\n```\n### Print information about storage pools\nIn this example, the script prints the details of all storage pools in a given project:\n```\ndef print_pools(token:str, project_number: str, region: str='-'):\u00a0 \u00a0 import requests\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 get_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Pools\"\u00a0 \u00a0 r = requests.get(get_url, headers=get_headers(token))\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 print(f\"Pools in region: {region}\")\u00a0 \u00a0 for pool in r.json():\u00a0 \u00a0 \u00a0 \u00a0 # Get volume attributes\u00a0 \u00a0 \u00a0 \u00a0 poolname = pool[\"name\"]\u00a0 \u00a0 \u00a0 \u00a0 sizeGiB = int(pool[\"sizeInBytes\"] / 1024**3)\u00a0 \u00a0 \u00a0 \u00a0 region = pool[\"region\"]\u00a0 \u00a0 \u00a0 \u00a0 numvols = pool[\"numberOfVolumes\"]\u00a0 \u00a0 \u00a0 \u00a0 print(f\"poolname: {poolname:30} size: {sizeGiB:>7} GiB region: {region} #ofVolumes: {numvols}\")keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)print_pools(token, project_number, \"-\")\n```\nThe result of running this script varies based on what pools exist in your project. The output should be similar to the following:\n```\nPools in region: poolname: okpool3  size: 2000 GiB region: europe-west1 #ofVolumes: 1\n```\n### Print all volumes\nIn this example, the script makes a call to get all volumes in a given project and print their details:\n```\ndef print_volumes(token:str, project_number: str, region: str='-'):\u00a0 \u00a0 import requests\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 get_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Volumes\"\u00a0 \u00a0 r = requests.get(get_url, headers=get_headers(token))\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 print(f\"Volume in region: {region}\")\u00a0 \u00a0 for vol in r.json():\u00a0 \u00a0 \u00a0 \u00a0 # Get volume attributes\u00a0 \u00a0 \u00a0 \u00a0 volname = vol[\"name\"]\u00a0 \u00a0 \u00a0 \u00a0 volsizeGiB = int(vol[\"quotaInBytes\"] / 1024**3)\u00a0 \u00a0 \u00a0 \u00a0 region = vol[\"region\"]\u00a0 \u00a0 \u00a0 \u00a0 print(f\"volname: {volname:30} size: {volsizeGiB:>7} GiB region: {region}\")keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)print_volumes(token, project_number, \"-\")\n```\nThe result of running this script varies based on what volumes exist in your project. The output should be similar to the following:\n```\nVolume in region: volname: smbvolume      size: 1024 GiB region: us-east4\nvolname: datalake      size: 1024 GiB region: us-east4\nvolname: sapshared      size: 1024 GiB region: us-central1\nvolname: catiarepo      size: 1024 GiB region: europe-west2\n```\n### Create a volume\nThe following `create_volume` helper function is used by other examples in this section for creating volumes:\n```\ndef create_volume(token:str, project_number: str, region: str, payload: dict): \u00a0 \u00a0import requests\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 post_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Volumes\"\u00a0 \u00a0 # POST request to create the volume\u00a0 \u00a0 r = requests.post(post_url, jsonpayload, headers=get_headers(token))\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 if not (r.status_code == 201 or r.status_code == 202):\u00a0 \u00a0 \u00a0 \u00a0 print(f\"ERROR: HTTP code: {r.status_code} {r.reason} for url: {r.url}\")\u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 vol = r.json()['response']['AnyValue']\u00a0 \u00a0 # Get volume attributes.\u00a0 \u00a0 # The process can take several minutes. Some\u00a0 \u00a0 # attributes are only available after it is finished.\u00a0 \u00a0 volname = vol[\"name\"]\u00a0 \u00a0 volsizeGiB = int(vol[\"quotaInBytes\"] / 1024**3)\u00a0 \u00a0 region = vol[\"region\"]\u00a0 \u00a0 volume_id = vol[\"volumeId\"]\u00a0 \u00a0 print(f\"Created volume: {volname:30} size: {volsizeGiB:>7} GiB region: {region} UUID: {volume_id}\")\n```\n### Create a CVS-Performance volume with NFSv3\n```\ndef create_volume_nfsv3(token:str, project_number: str, region: str, network: str, volume_name: str):\u00a0 \u00a0 payload = {\u00a0 \u00a0 \u00a0 \u00a0 \"name\": volume_name,\u00a0 \u00a0 \u00a0 \u00a0 \"creationToken\": volume_name, # mount path\u00a0 \u00a0 \u00a0 \u00a0 \"region\": region,\u00a0 \u00a0 \u00a0 \u00a0 \"serviceLevel\": \"low\", # low/medium/high = standard/premium/extreme\u00a0 \u00a0 \u00a0 \u00a0 \"storageClass\": \"hardware\", # hardware for CVS-Performance, software for CVS\u00a0 \u00a0 \u00a0 \u00a0 \"quotaInBytes\": 1024*1024**3, # 1024 GiB\u00a0 \u00a0 \u00a0 \u00a0 \"network\": f\"projects/{project_number}/global/networks/{network}\",\u00a0 \u00a0 \u00a0 \u00a0 \"protocolTypes\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"NFSv3\" # NFSv3, NFSv4, CIFS\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"snapshotPolicy\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"dailySchedule\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"hour\": 1,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"minute\": 10,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"snapshotsToKeep\": 5\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"exportPolicy\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"rules\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"access\": \"ReadWrite\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"allowedClients\": \"0.0.0.0/0\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"nfsv3\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"checked\": True\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 create_volume(token, project_number, region, payload)keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)create_volume_nfsv3(token, project_number, \"us-east4\", \"my-vpc\", \"nfsv3-volume\")\n```\nThe output should be similar to the following:\n```\nCreated volume: nfsv3-volume size: 1024 GiB region: us-east4 UUID: d85f6c26-1604-cdc6-1213-b1d6468e6980\n```\n### Create a CVS Standard-SW volume with NFSv3\n```\ndef create_volume_cvs(token:str, project_number: str, region: str, network: str, volume_name: str, pool_id: str):\u00a0 \u00a0 payload = {\u00a0 \u00a0 \u00a0 \u00a0 \"name\": volume_name,\u00a0 \u00a0 \u00a0 \u00a0 \"creationToken\": volume_name, # mount path\u00a0 \u00a0 \u00a0 \u00a0 \"quotaInBytes\": 1024*1024**3, # 1024 GiB\u00a0 \u00a0 \u00a0 \u00a0 \"region\": region,\u00a0 \u00a0 \u00a0 \u00a0 \"storageClass\": \"software\", \u00a0# software for CVS\u00a0 \u00a0 \u00a0 \u00a0 \"poolId\": pool_id, # UUID of storage pool to create volume within\u00a0 \u00a0 \u00a0 \u00a0 \"serviceLevel\": \"basic\",\u00a0 \u00a0 \u00a0 \u00a0 \"regionalHA\": False,\u00a0 \u00a0 \u00a0 \u00a0 \"zone\": f\"{region}-b\",\u00a0 \u00a0 \u00a0 \u00a0 \"network\": f\"projects/{project_number}/global/networks/{network}\",\u00a0 \u00a0 \u00a0 \u00a0 \"protocolTypes\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"NFSv3\" # NFSv3, NFSv4, CIFS\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"exportPolicy\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"rules\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"access\": \"ReadWrite\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"allowedClients\": \"0.0.0.0/0\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"nfsv3\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"checked\": True\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 create_volume(token, project_number, region, payload)keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)create_volume_cvs(token, project_number, \"europe-west1\", \"ncv-vpc\", \"nfsv3-volume\", \"9760acf5-4638-11e7-9bdb-020073ca7773\")\n```\nThe output should be similar to the following:\n```\nCreated volume: nfsv3-volume size: 1024 GiB region: europe-west1 UUID: e1d9afb6-d727-2643-6c04-bc544d7ad765\n```\n### Create a volume with NFSv4\n```\ndef create_volume_nfsv4(token:str, project_number: str, region: str, network: str, volume_name: str):\u00a0 \u00a0 payload = {\u00a0 \u00a0 \u00a0 \u00a0 \"name\": volume_name,\u00a0 \u00a0 \u00a0 \u00a0 \"creationToken\": volume_name, # mount path\u00a0 \u00a0 \u00a0 \u00a0 \"region\": region,\u00a0 \u00a0 \u00a0 \u00a0 \"serviceLevel\": \"low\", # low/medium/high = standard/premium/extreme\u00a0 \u00a0 \u00a0 \u00a0 \"storageClass\": \"hardware\", \u00a0# hardware for CVS-Performance, software for CVS\u00a0 \u00a0 \u00a0 \u00a0 \"quotaInBytes\": 1024*1024**3, # 1024 GiB\u00a0 \u00a0 \u00a0 \u00a0 \"network\": f\"projects/{project_number}/global/networks/{network}\",\u00a0 \u00a0 \u00a0 \u00a0 \"protocolTypes\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"NFSv4\" # NFSv3, NFSv4, CIFS\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"exportPolicy\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"rules\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"access\": \"ReadWrite\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"allowedClients\": \"0.0.0.0/0\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"nfsv3\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"checked\": False\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"nfsv4\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"checked\": True\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 create_volume(token, project_number, region, payload)keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)create_volume_nfsv4(token, project_number, \"us-east4\", \"ncv-vpc\", \"nfsv4-volume\")\n```\nThe output should be similar to the following:\n```\nCreated volume: nfsv4-volume size: 1024 GiB region: us-east4 UUID: 2222c128-1772-c89f-540a-0ff48d519f75\n```\n### Create a volume with SMB (continuously available, non-browsable, with encryption enabled)\n```\ndef create_volume_smb(token:str, project_number: str, region: str, network: str, volume_name: str):\u00a0 \u00a0 payload = {\u00a0 \u00a0 \u00a0 \u00a0 \"name\": volume_name,\u00a0 \u00a0 \u00a0 \u00a0 \"creationToken\": volume_name, # mount path\u00a0 \u00a0 \u00a0 \u00a0 \"region\": region,\u00a0 \u00a0 \u00a0 \u00a0 \"serviceLevel\": \"medium\", # low/medium/high = standard/premium/extreme\u00a0 \u00a0 \u00a0 \u00a0 \"storageClass\": \"hardware\", \u00a0# hardware for CVS-Performance, software for CVS\u00a0 \u00a0 \u00a0 \u00a0 \"quotaInBytes\": 1024*1024**3, # 1024 GiB\u00a0 \u00a0 \u00a0 \u00a0 \"network\": f\"projects/{project_number}/global/networks/{network}\",\u00a0 \u00a0 \u00a0 \u00a0 \"protocolTypes\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"CIFS\" # NFSv3, NFSv4, CIFS\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"smbShareSettings\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"continuously_available\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"encrypt_data\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"non_browsable\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 \u00a0 create_volume(token, project_number, region, payload)keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)create_volume_smb(token, project_number, \"us-east4\", \"ncv-vpc\", \"smb-volume\")\n```\nThe output should be similar to the following:\n```\nCreated volume: smb-volume size: 1024 GiB region: us-east4 UUID: 6327df5e-1b75-3d4a-8d59-0093c9423d57\n```\n### Get volume details\n```\ndef get_volume_details(token:str, project_number: str, region: str, volumeId: str):\u00a0 \u00a0 import requests\u00a0 \u00a0 import json\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 get_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Volumes/{volumeId}\"\u00a0 \u00a0 r = requests.get(get_url, headers=get_headers(token))\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 r.json()keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)result=volume_details(token, project_number, \"us-central1\", \"1bc88bc6-cc7d-5fe3-3737-8e635fe2f996\")import jsonprint(json.dumps(result, indent=4))\n```\nThe output should be similar to the following:\n```\n{\n \"created\": \"2020-04-09T04:20:12.000Z\",\n \"lifeCycleState\": \"available\",\n \"lifeCycleStateDetails\": \"Available for use\",\n \"name\": \"data-volume1\",\n \"ownerId\": \"031d5c87-af29-11e9-b98e-0a580aff0248\",\n \"region\": \"us-central1\",\n \"volumeId\": \"1bc88bc6-cc7d-5fe3-3737-8e635fe2f996\",\n \"zone\": \"us-central1-zone1\",\n \"billingLabels\": [  {\n   \"key\": \"department\",\n   \"value\": \"csa-gcp\"\n  }\n ],\n \"creationToken\": \"thirsty-amazing-varahamihira\",\n \"encryptionType\": \"ServiceManaged\",\n \"exportPolicy\": {\n  \"rules\": [   {\n    \"access\": \"ReadWrite\",\n    \"allowedClients\": \"10.10.0.0/16,192.168.6.10,192.168.6.12,192.168.100.0/24\",\n    \"hasRootAccess\": \"true\",\n    \"kerberos5ReadOnly\": {\n     \"checked\": false\n    },\n    \"kerberos5ReadWrite\": {\n     \"checked\": false\n    },\n    \"kerberos5iReadOnly\": {\n     \"checked\": false\n    },\n    \"kerberos5iReadWrite\": {\n     \"checked\": false\n    },\n    \"kerberos5pReadOnly\": {\n     \"checked\": false\n    },\n    \"kerberos5pReadWrite\": {\n     \"checked\": false\n    },\n    \"nfsv3\": {\n     \"checked\": true\n    },\n    \"nfsv4\": {\n     \"checked\": false\n    }\n   }\n  ]\n },\n \"inReplication\": false,\n \"isDataProtection\": false,\n \"jobs\": [],\n \"kerberosEnabled\": false,\n \"labels\": null,\n \"ldapEnabled\": false,\n \"mountPoints\": [  {\n   \"export\": \"/thirsty-amazing-varahamihira\",\n   \"exportFull\": \"10.194.0.20:/thirsty-amazing-varahamihira\",\n   \"instructions\": \"Setting up your instance\\nOpen an SSH client and connect to your instance.\\nInstall the nfs client on your instance.\\nOn Red Hat Enterprise Linux or SuSE Linux instance:\\nsudo yum install -y nfs-utils\\nOn an Ubuntu or Debian instance:\\nsudo apt-get install nfs-common\\n\\nMounting your volume\\nCreate a new directory on your instance, such as \\\"/thirsty-amazing-varahamihira\\\":\\nsudo mkdir /thirsty-amazing-varahamihira\\nMount your volume using the example command below:\\nsudo mount -t nfs -o rw,hard,rsize=65536,wsize=65536,vers=3,tcp 10.194.0.20:/thirsty-amazing-varahamihira /thirsty-amazing-varahamihira\\nNote. Please use mount options appropriate for your specific workloads when known.\",\n   \"protocolType\": \"NFSv3\",\n   \"server\": \"10.194.0.20\",\n   \"vlanId\": 1033\n  }\n ],\n \"network\": \"projects/823997568320/global/networks/ncv-vpc\",\n \"protocolTypes\": [  \"NFSv3\"\n ],\n \"quotaInBytes\": 1099511627776,\n \"regionalHA\": false,\n \"securityStyle\": \"unix\",\n \"serviceLevel\": \"basic\",\n \"snapReserve\": 0,\n \"snapshotDirectory\": true,\n \"snapshotPolicy\": {\n  \"dailySchedule\": {\n   \"hour\": 0,\n   \"minute\": 0,\n   \"snapshotsToKeep\": 0\n  },\n  \"enabled\": false,\n  \"hourlySchedule\": {\n   \"minute\": 0,\n   \"snapshotsToKeep\": 0\n  },\n  \"monthlySchedule\": {\n   \"daysOfMonth\": \"1\",\n   \"hour\": 0,\n   \"minute\": 0,\n   \"snapshotsToKeep\": 0\n  },\n  \"weeklySchedule\": {\n   \"day\": \"Sunday\",\n   \"hour\": 0,\n   \"minute\": 0,\n   \"snapshotsToKeep\": 0\n  }\n },\n \"storageClass\": \"hardware\",\n \"timezone\": \"CST\",\n \"unixPermissions\": \"0770\",\n \"usedBytes\": 564580352\n}\n```\n### Update volume details\n```\ndef modify_volume(token:str, project_number: str, region: str, volume_id: str, payload: dict):\u00a0 \u00a0 import requests\u00a0 \u00a0 import json\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 get_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Volumes/{volume_id}\"\u00a0 \u00a0 put_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Volumes/{volume_id}\"\u00a0 \u00a0 # Read attributes of existing volume\u00a0 \u00a0 r = requests.get(get_url, headers=get_headers(token))\u00a0 \u00a0 if not r.status_code == 200:\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Error: {r.url} returned: {r.text}\")\u00a0 \u00a0 \u00a0 \u00a0 return {}\u00a0 \u00a0 # Merge changes\u00a0 \u00a0 payload = {**r.json(), **payload}\u00a0 \u00a0 # Update volume\u00a0 \u00a0 r = requests.put(put_url, data=json.dumps(payload), headers=get_headers(token))\u00a0 \u00a0 if r.status_code not in [200, 202]:\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Error: {r.url} returned: {r.text}\")\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 return r.json()keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)payload = { \"unixPermissions\": \"0755\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"billingLabels\": [ {'key': \"department\", 'value': \"engineering\" } ]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0}result = modify_volume(token, project_number, \"us-central1\", \"1bc88bc6-cc7d-5fe3-3737-8e635fe2f996\", payload)\n```\n### Enable Google Cloud VMware Engine datastore deletion protection\nThis example reuses the `modify_volume` function introduced in the [Update volume details](/architecture/partners/netapp-cloud-volumes/api#update_volume_details) section. You can disable deletion protection by omitting the `\"volumeDelete\"` string.\n**Warning:** As long as the volume is mounted as datastore to any Google Cloud VMware Engine host, this option must stay enabled.\n```\nkeyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)payload = { \"restrictedActions\": [ \"volumeDelete\" ] }result = modify_volume(token, project_number, \"us-central1\", \"1bc88bc6-cc7d-5fe3-3737-8e635fe2f996\", payload)\n```\n### Get service level details\n```\nimport requestsimport jsonkeyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)region = \"us-east4\"server = 'https://cloudvolumesgcp-api.netapp.com'get_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Storage/ServiceLevels\"r = requests.get(get_url, headers=get_headers(token))print(json.dumps(r.json(), indent=4))\n```\nThe output should be similar to the following:\n```\n[ {\n  \"name\": \"basic\",\n  \"performance\": \"low\"\n },\n {\n  \"name\": \"standard\",\n  \"performance\": \"medium\"\n },\n {\n  \"name\": \"extreme\",\n  \"performance\": \"high\"\n }\n]\n```\n### Update the service level\n```\nkeyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)payload = {\"serviceLevel\": \"extreme\"}result = modify_volume(token, project_number, \"us-central1\", \"1bc88bc6-cc7d-5fe3-3737-8e635fe2f996\", payload)\n```\n### Create an Active Directory connection\n```\ndef create_activedirectory(token:str, project_number: str, region: str):\u00a0 \u00a0 import requests\u00a0 \u00a0 import json\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 post_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Storage/ActiveDirectory\"\u00a0 \u00a0 payload = {\u00a0 \u00a0 \u00a0 \u00a0 \"username\": \"example_username\",\u00a0 \u00a0 \u00a0 \u00a0 \"password\": \"example_password\",\u00a0 \u00a0 \u00a0 \u00a0 \"DNS\": \"101.102.103.104\",\u00a0 \u00a0 \u00a0 \u00a0 \"aesEncryption\": True,\u00a0 \u00a0 \u00a0 \u00a0 \"allowLocalNFSUsersWithLdap\": False,\u00a0 \u00a0 \u00a0 \u00a0 \"domain\": \"example.com\",\u00a0 \u00a0 \u00a0 \u00a0 \"label\": \"hardware\", \u00a0 \u00a0# \"hardware\" for CVS-Performance, \"software\" for CVS\u00a0 \u00a0 \u00a0 \u00a0 \"netBIOS\": \"cvserver\",\u00a0 \u00a0 \u00a0 \u00a0 \"organizationalUnit\": \"CN=Computers\", \u00a0# or specify OU like \"OU=myOU,DC=example,DC=com\",\u00a0 \u00a0 \u00a0 \u00a0 \"region\": region,\u00a0 \u00a0 \u00a0 \u00a0 \"site\": \"Default-First-Site-Name\",\u00a0 \u00a0 \u00a0 \u00a0 # More optional parameters available. See the Swagger definition\u00a0 \u00a0 }\u00a0 \u00a0 # POST request to create the AD connection\u00a0 \u00a0 r = requests.post(post_url, data=json.dumps(payload), headers=get_headers(token))\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 ad_uuid = r.json()['UUID']\u00a0 \u00a0 print(f\"Created Active Directory entry: {ad_uuid}\")keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)create_activedirectory(token, project_number, \"us-east4\")\n```\nThe output should be similar to the following:\n```\nCreated Active Directory entry: c18c569d-0920-805f-9918-a4b04df758f5\n```\n### Update Active Directory with Kerberos and backup operators\n```\ndef update_activedirectory(token:str, project_number: str, region: str, uuid: str, changes: dict):\u00a0 \u00a0 import requests\u00a0 \u00a0 import json\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 get_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Storage/ActiveDirectory/{uuid}\"\u00a0 \u00a0 # read parameters from existing entry\u00a0 \u00a0 r = requests.get(get_url, headers=get_headers(token))\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 # Merge old entry with changes\u00a0 \u00a0 payload = {**r.json(), **changes}\u00a0 \u00a0 # PUT request to update the AD connection\u00a0 \u00a0 put_url = get_url\u00a0 \u00a0 r = requests.put(put_url, data=json.dumps(payload), headers=get_headers(token))\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 ad_uuid = r.json()['UUID']\u00a0 \u00a0 print(f\"Updated Active Directory entry: {ad_uuid}\")keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)# Add parameters to change here.changes = {\u00a0 \u00a0 \"backupOperators\": [\u00a0 \u00a0 \u00a0 \u00a0 \"backup1\",\u00a0 \u00a0 \u00a0 \u00a0 \"backup2\"\u00a0 \u00a0 ],\u00a0 \u00a0 \"kdcIP\": \"10.3.1.15\",\u00a0 \u00a0 \"aesEncryption\": True,\u00a0 \u00a0 \"adName\": \"2BOVAEKB44B\"}update_activedirectory(token, project_number, \"us-east4\", 'c18c569d-0920-805f-9918-a4b04df758f5', changes)\n```\nThe output should be similar to the following:\n```\nUpdated Active Directory entry: 5cf34bae-74c7-e539-aad9-4dcfec84d8fd\n```\n### Create a backup\n```\ndef create_backup(token:str, project_number: str, region: str, volume_id: str, backup_name: str):\u00a0 \u00a0 import requests\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 post_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Backups\"\u00a0 \u00a0 payload = {\u00a0 \u00a0 \u00a0 \u00a0 \"name\": backup_name,\u00a0 \u00a0 \u00a0 \u00a0 \"volumeId\": volume_id\u00a0 \u00a0 }\u00a0 \u00a0 r = requests.post(post_url, json=payload, headers=get_headers(token))\u00a0 \u00a0 if not (r.status_code == 201 or r.status_code == 202):\u00a0 \u00a0 \u00a0 \u00a0 print(f\"ERROR: HTTP code: {r.status_code} {r.reason} for url: {r.url}\")\u00a0 \u00a0 \u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 print(\"Backup created/creating\")keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)backups = create_backup(token, project_number, \"europe-west1\", \"9760acf5-4638-11e7-9bdb-020073ca7773\", \"mybackup\")\n```\nThe output should be similar to the following:\n```\nBackup created/creating\n```\n### List backups\n```\ndef get_backups(token:str, project_number: str, region: str):\u00a0 \u00a0 import requests\u00a0 \u00a0 import json\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 get_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Backups\"\u00a0 \u00a0 r = requests.get(get_url, headers=get_headers(token))\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 return r.json()keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)backups = get_backups(token, project_number, \"-\")for backup in backups:\u00a0 \u00a0 print(f\"region: {backup['region']:22} name: {backup['name']:20} size [GiB]: {int(backup['bytesTransferred']/1024**3):>7} UUID: {backup['backupId']}\")\n```\nThe output should be similar to the following:\n```\nregion: europe-west1   name: oktest    size [GiB]:  748 UUID: fbb4df43-c715-6a82-cced-8b5bbdb98b02\nregion: europe-west1   name: oktest2    size [GiB]:  0 UUID: 7d11c58f-f6af-c356-f58e-939713ce0d65\nregion: europe-west1   name: saw-testbackup  size [GiB]:  0 UUID: 248d900d-dd92-ca87-bca1-3f74f831f04f\nregion: australia-southeast2 name: test-backup   size [GiB]:  0 UUID: 97e0b72d-0735-c1af-b6a5-8e4133699095\n```\n### Restore from a backup\nRestoring from a backup is like creating a new volume, except that restoring from a backup requires the specification of a `backupId` value. The new volume is initialized with the data from the backup volume specified by the `backupId` value.\n```\nkeyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)region = \"europe-west1\"pool_id = \"9760acf5-4638-11e7-9bdb-020073ca7773\"network = \"ncv-vpc\"backup_id = \"fbb4df43-c715-6a82-cced-8b5bbdb98b02\"payload = {\u00a0 \u00a0 \"name\": \"restored_volume\",\u00a0 \u00a0 \"creationToken\": \"restored_volume\", # mount path\u00a0 \u00a0 \"region\": region,\u00a0 \u00a0 \"storageClass\": \"software\", \u00a0# software for CVS\u00a0 \u00a0 \"poolId\": pool_id, # UUID of Storage Pool to create volume within\u00a0 \u00a0 \"quotaInBytes\": 1024*1024**3, # 1024 GiB\u00a0 \u00a0 \"network\": f\"projects/{project_number}/global/networks/{network}\",\u00a0 \u00a0 \"backupId\": backup_id,\u00a0 \u00a0 \"protocolTypes\": [\u00a0 \u00a0 \u00a0 \u00a0 \"NFSv3\" # NFSv3, NFSv4, CIFS\u00a0 \u00a0 ],\u00a0 \u00a0 \"exportPolicy\": {\u00a0 \u00a0 \u00a0 \u00a0 \"rules\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"access\": \"ReadWrite\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"allowedClients\": \"0.0.0.0/0\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"nfsv3\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"checked\": True\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }}create_volume(token, project_number, region, payload)\n```\nThe output should be similar to the following:\n```\nCreated volume: restored_volume     size: 1024 GiB region: europe-west1 UUID: d2e9bcb5-e728-3623-7e06-ba5e4d8ad738\n```\n### List KMS configurations\nThe following example lists all KMS configurations in your project, including the configuration ID.\n```\ndef print_kmsconfigs(token:str, project_number: str, region: str):\u00a0 \u00a0 import requests\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 get_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Storage/KmsConfig\"\u00a0 \u00a0 r = requests.get(get_url, headers=get_headers(token))\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 for kms in r.json():\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Key: {kms['keyRingLocation']}/{kms['keyRing']}/{kms['keyName']}, Region: {kms['region']}, kmsId: {kms['uuid']}\")keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)print_kmsconfigs(token, project_number, \"-\")\n```\nThe result of running this script varies based on what KMS entries exist in your project.\nThe output should be similar to the following:\n```\nKey: global/OneRing/Frankfurt, Region: europe-west3, kmsId: 12759064-04e9-5d50-9262-bdca39f13cd0\n```\n### Create KMS configurations\nThe following example creates a KMS configuration in your project:\n```\ndef create_kmsconfig(token:str, project_number: str, region: str, kms_resource_name: str, network_resource_name: str):\u00a0 \u00a0 import requests\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 post_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Storage/KmsConfig\"\u00a0 \u00a0 # key resource names can be fetched from KMS. Format is\u00a0 \u00a0 # projects/\n```\nThe output should be similar to the following:\n```\nKMS config created\n{'jobs': [{'action': 'create', 'created': '2022-09-05T10:39:21.000Z', 'jobId': '441b89a7-0460-8b0a-d251-048ede81c42a', 'objectId': '03cdaf89-311d-bdee-6d99-b900bbe3612d', 'objectType': 'GcpKmsConfig', 'state': 'ongoing', 'stateDetails': 'Job is in progress', 'workerId': 'f7435545-c052-4ec5-5e3f-227c51a20f36'}], 'keyName': 'Mordor-Key', 'keyProjectID': 'my-kms-project', 'keyRing': 'TheOneRing', 'keyRingLocation': 'global', 'network': 'projects/1234567890/global/networks/my-shared-vpc', 'region': 'us-west1', 'state': 'creating', 'uuid': '03cdaf89-311d-bdee-6d99-b900bbe3612d'}\n```\nAfter you create a KMS configuration, you must set key access permissions. This can be done manually with the **VIEW COMMANDS** button in the user interface. Setting key access permissions can also be automated using Google APIs.\n### Migrate KMS configurations\nThe following example migrates volumes of a given region from the Encryption Type **NetApp** (using Cloud Volumes Service managed keys) to Encryption Type **Cloud KMS** (using customer-managed encryption keys):\n```\ndef migrate_kmsconfigs(token:str, project_number: str, region: str, kms_config_id: str):\u00a0 \u00a0 import requests\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 post_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Storage/KmsConfig/{kms_config_id}/Migrate\"\u00a0 \u00a0 payload = {\u00a0 \u00a0 \u00a0 \u00a0 \"toOntapKeyManager\": False\u00a0 \u00a0 }\u00a0 \u00a0 r = requests.post(post_url, json=payload, headers=get_headers(token))\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 if r.status_code == 202:\u00a0 \u00a0 \u00a0 \u00a0 print(\"Migration successful\")\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 print(\"ERROR:\")\u00a0 \u00a0 \u00a0 \u00a0 print(r.json())keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)migrate_kmsconfig(token, project_number, \"us-east4\", \"12759064-04e9-5d50-9262-bdca39f13cd0\")\n```\nThe output will either be `Migration successful` or `ERROR:` followed by a JSON string with status information.\n### Delete KMS configurations\nThe following example deletes a KMS configuration for a given configuration ID ( `kmsId` ).\n```\ndef delete_kmsconfig(token:str, project_number: str, region: str, kms_config_id: str):\u00a0 \u00a0 import requests\u00a0 \u00a0 import json\u00a0 \u00a0 server = 'https://cloudvolumesgcp-api.netapp.com'\u00a0 \u00a0 delete_url = f\"{server}/v2/projects/{project_number}/locations/{region}/Storage/KmsConfig/{kms_config_id}\"\u00a0 \u00a0 r = requests.delete(delete_url, headers=get_headers(token))\u00a0 \u00a0 r.raise_for_status()keyfile = \"key.json\"project_number = get_google_project_number(keyfile)token = get_token(keyfile)delete_kmsconfig(token, project_number, \"us-east4\", \"12759064-04e9-5d50-9262-bdca39f13cd0\")\n```", "guide": "Cloud Architecture Center"}