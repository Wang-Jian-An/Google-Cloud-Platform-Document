{"title": "Compute Engine - Authenticate workloads to Google Cloud APIs using service accounts", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Authenticate workloads to Google Cloud APIs using service accounts\nThis page describes how to use service accounts to enable apps running on your virtual machine (VM) instances to authenticate to Google Cloud APIs and authorize access to resources.\nTo use service accounts for authentication, you must first ensure that your VM is configured to use a service account. To do this complete one of the following procedures:\n- To set up service account during VM creation, see [Create a VM that uses a user-managed service account](/compute/docs/access/create-enable-service-accounts-for-instances) .\n- To set up service account on an existing VM, see [Change the attached service account](/compute/docs/instances/change-service-account) .", "content": "## Before you begin\n- Review the [Service accounts overview](/compute/docs/access/service-accounts) .\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.To use the Python samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [   Set up authentication for a local development environment](/compute/docs/authentication#local-development) .## Overview\nAfter you have set up a VM instance to run using a service account, an application running on the VM instance can use one of the following methods for authentication:\n- For most applications, choose one of the following:- [Use Application Default Credentials and a client library](#clientlib) \n- [Use the gcloud and gsutil tools](#tools) \n- For applications that require an OAuth2 access token, [request and use access tokens](#applications) directly from the metadata server## Authenticating applications using service account credentials\nAfter setting up an instance to run as a service account, you can use service account credentials to authenticate applications running on the instance.\n### Authenticating applications with a client library\nClient libraries can use [Application Default Credentials](/docs/authentication/client-libraries) to authenticate with Google APIs and send requests to those APIs. Application Default Credentials lets applications automatically obtain credentials from multiple sources so you can test your application locally and then deploy it to a Compute Engine instance without changing the application code.\nFor information about setting up Application Default Credentials, see [Provide credentials to Application Default Credentials](/docs/authentication/provide-credentials-adc) .\nThis example uses the [Python client library](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/main/compute/auth/application_default.py) to authenticate and make a request to the Cloud Storage API to list the buckets in a project. The example uses the following procedure:\n- Obtain the necessary authentication credentials for the Cloud Storage API and initialize the Cloud Storage service with the`build()`method and the credentials.\n- List buckets in Cloud Storage.\nYou can run this sample on an instance that has access to manage buckets in Cloud Storage.\n**Note:** You might need to run this script with `sudo` .\n[  compute/auth/application_default.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/compute/auth/application_default.py) [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/compute/auth/application_default.py)\n```\nimport argparsefrom typing import Listfrom google.cloud import storagedef create_client() -> storage.Client:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Construct a client object for the Storage API using the\u00a0 \u00a0 application default credentials.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 \u00a0 Storage API client object.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # Construct the service object for interacting with the Cloud Storage API -\u00a0 \u00a0 # the 'storage' service, at version 'v1'.\u00a0 \u00a0 # Authentication is provided by application default credentials.\u00a0 \u00a0 # When running locally, these are available after running\u00a0 \u00a0 # `gcloud auth application-default login`. When running on Compute\u00a0 \u00a0 # Engine, these are available from the environment.\u00a0 \u00a0 return storage.Client()def list_buckets(client: storage.Client, project_id: str) -> List[storage.Bucket]:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Retrieve bucket list of a project using provided client object.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 client: Storage API client object.\u00a0 \u00a0 \u00a0 \u00a0 project_id: name of the project to list buckets from.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 \u00a0 List of Buckets found in the project.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 buckets = client.list_buckets()\u00a0 \u00a0 return list(buckets)def main(project_id: str) -> None:\u00a0 \u00a0 client = create_client()\u00a0 \u00a0 buckets = list_buckets(client, project_id)\u00a0 \u00a0 print(buckets)if __name__ == \"__main__\":\u00a0 \u00a0 parser = argparse.ArgumentParser(\u00a0 \u00a0 \u00a0 \u00a0 description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter\u00a0 \u00a0 )\u00a0 \u00a0 parser.add_argument(\"project_id\", help=\"Your Google Cloud Project ID.\")\u00a0 \u00a0 args = parser.parse_args()\u00a0 \u00a0 main(args.project_id)\n```\n### Authenticating applications directly with access tokens\nFor most applications, you can authenticate by using [Application Default Credentials](/docs/authentication/application-default-credentials) , which finds credentials and manages tokens for you. However, if your application requires you to provide an OAuth2 access token, Compute Engine lets you get an access token from its metadata server for use in your application.\nThere are several options for obtaining and using these access tokens to authenticate your applications. For example, you can use `curl` to create a simple request, or use a programming language like Python for more flexibility.\nTo use `curl` to request an access token and send a request to an API:- On the instance where your application runs, query the [metadata server](/compute/docs/metadata) for an access token by running the following command:```\n$ curl \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\" \\\n-H \"Metadata-Flavor: Google\"\n```The request returns a response similar to:```\n{\n  \"access_token\":\"ya29.AHES6ZRN3-HlhAPya30GnW_bHSb_QtAS08i85nHq39HE3C2LTrCARA\",\n  \"expires_in\":3599,\n  \"token_type\":\"Bearer\"\n }\n```For API requests you need to include the `access_token` value, not the entire response. If you have the [jq command-line JSON processor](https://stedolan.github.io/jq/) installed you can use the following command to extract the access token value from the response:```\n$ ACCESS_TOKEN=`curl \\\n\"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\" \\\n-H \"Metadata-Flavor: Google\" | jq -r '.access_token'`\n```\n- Copy the value of the `access_token` property from the response and use it to send requests to the API. For example, the following request prints a list of instances in your project from a certain zone:```\n$ curl https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances \\\n-H \"Authorization\":\"Bearer ACCESS_TOKEN\"\n```Replace the following:- ``: the project ID for this request.\n- ``: the zone to list VMs from.\n- ``: the access token value you got from the previous step.\n **Note:** You can use the access token only for scopes that you specified when you created the instance. For example, if the instance has been granted only the `https://www.googleapis.com/auth/storage-full` scope for Cloud Storage, then it can't use the access token to make a request to BigQuery.For information about the parameters that you can set in your request, see the [System parameters](/apis/docs/system-parameters) documentation.\nThis example demonstrates how to request a token to access the Cloud Storage API in a Python application. The example uses the following procedure:- Request an access token from the metadata server.\n- Extract the access token from the server response.\n- Use the access token to make a request to Cloud Storage.\n- If the request is successful, the script prints the response.\n [  compute/auth/access_token.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/compute/auth/access_token.py) [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/compute/auth/access_token.py) \n```\nimport argparseimport requestsMETADATA_URL = \"http://metadata.google.internal/computeMetadata/v1/\"METADATA_HEADERS = {\"Metadata-Flavor\": \"Google\"}SERVICE_ACCOUNT = \"default\"def get_access_token() -> str:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Retrieves access token from the metadata server.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 \u00a0 The access token.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 url = f\"{METADATA_URL}instance/service-accounts/{SERVICE_ACCOUNT}/token\"\u00a0 \u00a0 # Request an access token from the metadata server.\u00a0 \u00a0 r = requests.get(url, headers=METADATA_HEADERS)\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 # Extract the access token from the response.\u00a0 \u00a0 access_token = r.json()[\"access_token\"]\u00a0 \u00a0 return access_tokendef list_buckets(project_id: str, access_token: str) -> dict:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Calls Storage API to retrieve a list of buckets.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: name of the project to list buckets from.\u00a0 \u00a0 \u00a0 \u00a0 access_token: access token to authenticate with.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 \u00a0 Response from the API.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 url = \"https://www.googleapis.com/storage/v1/b\"\u00a0 \u00a0 params = {\"project\": project_id}\u00a0 \u00a0 headers = {\"Authorization\": f\"Bearer {access_token}\"}\u00a0 \u00a0 r = requests.get(url, params=params, headers=headers)\u00a0 \u00a0 r.raise_for_status()\u00a0 \u00a0 return r.json()def main(project_id: str) -> None:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Retrieves access token from metadata server and uses it to list\u00a0 \u00a0 buckets in a project.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: name of the project to list buckets from.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 access_token = get_access_token()\u00a0 \u00a0 buckets = list_buckets(project_id, access_token)\u00a0 \u00a0 print(buckets)if __name__ == \"__main__\":\u00a0 \u00a0 parser = argparse.ArgumentParser(\u00a0 \u00a0 \u00a0 \u00a0 description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter\u00a0 \u00a0 )\u00a0 \u00a0 parser.add_argument(\"project_id\", help=\"Your Google Cloud project ID.\")\u00a0 \u00a0 args = parser.parse_args()\u00a0 \u00a0 main(args.project_id)\n```\nAccess tokens expire after a short period of time. The metadata server caches access tokens until they have 5 minutes of remaining time before they expire. If tokens are unable to be cached, requests that exceed 50 queries per second might be rate limited. Your applications must have a valid access token for their API calls to succeed.\n## Authenticating tools on an instance using a service account\nSome applications might use commands from the `gcloud` and `gsutil` tools, which are included by default in most Compute Engine images. These tools automatically recognize an instance's service account and relevant permissions granted to the service account. Specifically, if you grant the correct roles to the service account, you can use the `gcloud` and `gsutil` tools from your instances without having to use `gcloud auth login` .\nThis service account recognition happens automatically and applies only to the `gcloud` and `gsutil` tools that are included with the instance. If you create new tools or add custom tools, you must authorize your application [using a client library](#clientlib) or by [using access tokens directly in your application](#applications) .\nTo take advantage of automatic service account recognition, [grant the appropriate IAM roles](/iam/docs/granting-roles-to-service-accounts#granting_access_to_a_service_account_for_a_resource) to the service account and [attach the service account to the instance](/compute/docs/access/create-enable-service-accounts-for-instances#using) . For example, if you grant a service account the `roles/storage.objectAdmin` role, the `gsutil` tool can automatically manage and access Cloud Storage objects.\nLikewise, if you enable `roles/compute.instanceAdmin.v1` for the service account, the `gcloud compute` tool can automatically manage instances.\n## What's next\n- [Authenticate workloads to other workloads over mTLS ](/compute/docs/access/authenticate-workloads-over-mtls) .\n- Learn more about [Service Accounts](/compute/docs/access/service-accounts) .\n- Learn more about [Compute Engine IAM roles and permissions](/compute/docs/access/iam) .\n- Learn more about [best practices for working with service accounts](/iam/docs/best-practices-service-accounts) .", "guide": "Compute Engine"}