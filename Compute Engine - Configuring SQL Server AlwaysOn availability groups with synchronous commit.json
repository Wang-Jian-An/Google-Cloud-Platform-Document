{"title": "Compute Engine - Configuring SQL Server AlwaysOn availability groups with synchronous commit", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Configuring SQL Server AlwaysOn availability groups with synchronous commit\nMicrosoft SQL Server [AlwaysOn availability groups](https://docs.microsoft.com/en-us/sql/database-engine/availability-groups/windows/overview-of-always-on-availability-groups-sql-server?view=sql-server-ver15) (AG) let you replicate databases across multiple SQL Server Enterprise instances.\nSimilar to [SQL Server Failover Cluster Instances](/compute/docs/instances/sql-server/configure-failover-cluster-instance) , AlwaysOn availability groups use Windows Server Failover Clustering (WSFC) to implement high availability. But the two features differ in multiple ways, including:\n| Unnamed: 0   | AlwaysOn availability groups | Failover cluster instances |\n|:-------------------|:-------------------------------|:-----------------------------|\n| Scope of fail-over | Group of databases    | Instance      |\n| Storage   | Not shared      | Shared      |\nFor a more detailed comparison, see [Comparison of Failover Cluster Instances and Availability Groups](https://docs.microsoft.com/en-us/sql/database-engine/availability-groups/windows/failover-clustering-and-always-on-availability-groups-sql-server?view=sql-server-ver15#comparison-of-failover-cluster-instances-and-availability-groups) .\nAlwaysOn availability groups support [multiple availability modes](https://docs.microsoft.com/en-us/sql/database-engine/availability-groups/windows/availability-modes-always-on-availability-groups?view=sql-server-ver15#SupportedAvModes) . This tutorial shows how you can deploy AlwaysOn availability groups in to implement high availability for one or more databases:Two VM instances, `node-1` and `node-2` , serve as WSFC nodes and run SQL Server. A third VM instance, `witness` , is used to achieve a quorum in a failover scenario. The three VM instances are distributed over three zones and share a common subnet.\nUsing a SQL Server Always On availability group, an example database, `bookshelf` , is synchronously replicated across the two SQL Server instances.\nIn an on-premises environment, you can let WSFC perform [ARP announcements](https://en.wikipedia.org/wiki/Address_Resolution_Protocol#ARP_announcements) if a failover occurs to [notify network equipment](https://learn.microsoft.com/en-us/troubleshoot/windows-server/virtualization/mac-address-changes-for-virtual-server) about an IP address change. Google Cloud ignores ARP announcements and you must use an internal load balancer instead. For more information, see [Running Windows Server Failover Clustering](https://cloud.google.com/compute/docs/tutorials/running-windows-server-failover-clustering#understanding_the_network_routing) .\nThe load balancer does the following:- Periodically performs a health check to identify the currently active WSFC node\n- Clients connect to the IP address of the load balancer\n- Forwards client traffic to the currently active WSFC node\nThe article assumes that you have already deployed Active Directory on Google Cloud and that you have basic knowledge of SQL Server, Active Directory, and Compute Engine.", "content": "## Objectives\n- Deploy a WSFC comprising two SQL Server VM instances and a third VM instance that acts as a file share witness.\n- Deploy a SQL Server.\n- Create an availability group with synchronous commit.\n- Verify that the setup is working by simulating a failover.\n## CostsThis tutorial uses billable components of Google Cloud, including:- [Compute Engine](/compute/vm-instance-pricing) \n- [Cloud Load Balancing](/vpc/network-pricing#lb) \nUse the [pricing calculator](/products/calculator) to generate a cost estimate based on your projected usage.## Before you beginTo complete this guide, you need the following:- An Active Directory domain with at least one domain controller. You can create an Active Directory domain [by using Managed Microsoft AD](/managed-microsoft-ad/docs/create-domain) . Alternatively, you can deploy a [custom Active Directory environment on Compute Engine](/solutions/deploy-fault-tolerant-active-directory-environment) and [set up a private DNS forwarding zone](/compute/docs/instances/windows/best-practices#use_cloud_dns_private_forwarding_zones) that forwards DNS queries to your domain controllers.\n- An Active Directory user that has permission to join computers to the domain and can log in by using RDP. If you're using Managed Microsoft AD, you can use the`setupadmin`user.\n- A Google Cloud project and VPC with connectivity to your Active Directory domain controllers.\n- A subnet to use for the WSFC VM instances.\nTo complete the guide, you also need a Google Cloud project:When you finish this tutorial, you can avoid continued billing by deleting the resources you created. For more information, see [Cleaning up](#clean-up) .## Preparing the project and networkTo prepare your Google Cloud project and VPC for the deployment of SQL Server AlwaysOn availability groups, do the following:- In the Google Cloud console, open [Cloud Shell](/shell/docs/starting-cloud-shell) by clicking the **Activate Cloud Shell** button. [Go to the Google Cloud console](https://console.cloud.google.com/) \n- Initialize the following variables:```\nVPC_NAME=VPC_NAME\nSUBNET_NAME=SUBNET_NAME\n```Where:- ``: name of your VPC\n- ``: name of your subnet\n- Set your default [project ID](/resource-manager/docs/creating-managing-projects) :```\ngcloud config set project PROJECT_ID\n```Replace `` with the ID of your Google Cloud project.\n- Set your default region:```\ngcloud config set compute/region REGION\n```Replace `` with the ID of the region you want to deploy in.\n### Create firewall rulesTo allow clients to connect to SQL Server, allow communication between the WSFC nodes, and to enable the load balancer to [perform health checks](/load-balancing/docs/health-checks#fw-rule) , you need to create several firewall rules. To simplify the creation of these firewall rules, you use [network tags](/vpc/docs/add-remove-network-tags) :- The 2 WSFC nodes are annotated with the`wsfc-node`tag.\n- All servers (including the witness) are annotated with the`wsfc`tag.\nCreate firewall rules that use these network tags:- Return to your existing Cloud Shell session.\n- Create firewall rules for the WSFC nodes:```\nSUBNET_CIDR=$(gcloud compute networks subnets describe $SUBNET_NAME --format=value\\('ipCidrRange'\\))\ngcloud compute firewall-rules create allow-all-between-wsfc-nodes \\\n --direction=INGRESS \\\n --action=allow \\\n --rules=tcp,udp,icmp \\\n --enable-logging \\\n --source-tags=wsfc \\\n --target-tags=wsfc \\\n --network=$VPC_NAME \\\n --priority 10000\ngcloud compute firewall-rules create allow-sql-to-wsfc-nodes \\\n --direction=INGRESS \\\n --action=allow \\\n --rules=tcp:1433 \\\n --enable-logging \\\n --source-ranges=$SUBNET_CIDR \\\n --target-tags=wsfc-node \\\n --network=$VPC_NAME \\\n --priority 10000\n```\n- Create a firewall rule that allows health checks from the [IP ranges of the Google Cloud probers](/load-balancing/docs/health-check-concepts#ip-ranges) :```\ngcloud compute firewall-rules create allow-health-check-to-wsfc-nodes \\\n --direction=INGRESS \\\n --action=allow \\\n --rules=tcp \\\n --source-ranges=130.211.0.0/22,35.191.0.0/16 \\\n --target-tags=wsfc-node \\\n --network=$VPC_NAME \\\n --priority 10000\n```\n **Note:** Depending on how you've deployed Active Directory, you might need to create additional firewall rules to allow servers to join the domain. See [Accessing Managed Microsoft AD from within your VPC](/managed-microsoft-ad/docs/firewalls#accessing_from_within_your_vpc) for further details.\n### Create VM instancesYou now deploy two VM instances for the failover cluster. At any point in time, one of these VMs hosts the primary replica of the SQL Server database while the other node hosts the secondary replica. The two VM instances must:- be located in the same region so that they can be accessed by an internal passthrough Network Load Balancer.\n- have Windows Server Failover Clustering (WSFC) and SQL Server installed.\n- have [Compute Engine WSFC support](https://github.com/GoogleCloudPlatform/guest-agent#windows-failover-cluster-support) { .external } enabled.\nYou use a [SQL Server premium image](/compute/docs/images/os-details#sql_server) which has SQL Server 2022 preinstalled.\n **Note:** If you plan to bring your own licenses for SQL Server by using the [license mobility](/compute/docs/instances/windows/ms-licensing) program, select Windows Server base images for these nodes and install SQL Server using your own product keys.\nTo provide a tie-breaking vote and achieve a quorum for the failover scenario, you deploy a third VM that serves as a [file share witness](https://docs.microsoft.com/en-us/windows-server/failover-clustering/manage-cluster-quorum#quorum-configuration-options) .- Return to your existing Cloud Shell session.\n- Create a [specialize script](/compute/docs/startupscript#providing_a_startup_script_for_windows_instances) for the WSFC nodes. The script installs the necessary Windows feature and creates firewall rules for WSFC and SQL Server:```\ncat << \"EOF\" > specialize-node.ps1\n$ErrorActionPreference = \"stop\"\n# Install required Windows features\nInstall-WindowsFeature Failover-Clustering -IncludeManagementTools\nInstall-WindowsFeature RSAT-AD-PowerShell\n# Open firewall for WSFC\nnetsh advfirewall firewall add rule name=\"Allow SQL Server health check\" dir=in action=allow protocol=TCP localport=59997\n# Open firewall for SQL Server\nnetsh advfirewall firewall add rule name=\"Allow SQL Server\" dir=in action=allow protocol=TCP localport=1433\n# Open firewall for SQL Server replication\nnetsh advfirewall firewall add rule name=\"Allow SQL Server replication\" dir=in action=allow protocol=TCP localport=5022\n# Format data disk\nGet-Disk |\n Where partitionstyle -eq 'RAW' |\n Initialize-Disk -PartitionStyle MBR -PassThru |\n New-Partition -AssignDriveLetter -UseMaximumSize |\n Format-Volume -FileSystem NTFS -NewFileSystemLabel 'Data' -Confirm:$false\n# Create data and log folders for SQL Server\nmd d:\\Data\nmd d:\\Logs\nEOF\n```\n- Create the VM instances. On the two VMs that serve as WSFC nodes, attach an additional data disk and enable the Windows Server Failover Clustering by setting the metadata key `enable-wsfc` to `true` :```\nREGION=$(gcloud config get-value compute/region)\nPD_SIZE=200\nMACHINE_TYPE=n2-standard-8\ngcloud compute instances create node-1 \\\n --zone $REGION-a \\\n --machine-type $MACHINE_TYPE \\\n --subnet $SUBNET_NAME \\\n --image-family sql-ent-2022-win-2022 \\\n --image-project windows-sql-cloud \\\n --tags wsfc,wsfc-node \\\n --boot-disk-size 50 \\\n --boot-disk-type pd-ssd \\\n --boot-disk-device-name \"node-1\" \\\n --create-disk=name=node-1-datadisk,size=$PD_SIZE,type=pd-ssd,auto-delete=no \\\n --metadata enable-wsfc=true \\\n --metadata-from-file=sysprep-specialize-script-ps1=specialize-node.ps1\ngcloud compute instances create node-2 \\\n --zone $REGION-b \\\n --machine-type $MACHINE_TYPE \\\n --subnet $SUBNET_NAME \\\n --image-family sql-ent-2022-win-2022 \\\n --image-project windows-sql-cloud \\\n --tags wsfc,wsfc-node \\\n --boot-disk-size 50 \\\n --boot-disk-type pd-ssd \\\n --boot-disk-device-name \"node-2\" \\\n --create-disk=name=node-2-datadisk,size=$PD_SIZE,type=pd-ssd,auto-delete=no \\\n --metadata enable-wsfc=true \\\n --metadata-from-file=sysprep-specialize-script-ps1=specialize-node.ps1\ngcloud compute instances create \"witness\" \\\n --zone $REGION-c \\\n --machine-type n2-standard-2 \\\n --subnet $SUBNET_NAME \\\n --image-family=windows-2022 \\\n --image-project=windows-cloud \\\n --tags wsfc \\\n --boot-disk-size 50 \\\n --boot-disk-type pd-ssd \\\n --metadata sysprep-specialize-script-ps1=\"add-windowsfeature FS-FileServer\"\n``` **Note:** Depending on your [performance requirements](/compute/docs/disks/performance#optimize_disk_performance) , consider using a machine type larger than `n2-standard-8` for the WSFC nodes. **Note:** For the purpose of this tutorial, and to fit within the default regional SSD Persistent Disk quota, the size of the disks attached to each VM is smaller than it would be in a production environment. For better performance and to accommodate a larger database, you would increase the size of each disk.\n- To join the 3 VM instances to Active Directory, do the following for each of the 3 VM instances:- Monitor the initialization process of the VM by viewing its serial port output:```\ngcloud compute instances tail-serial-port-output NAME\n```Replace `` with the name of the VM instance.Wait about 3 minutes until you see the output `Instance setup finished` , then press Ctrl+C. At this point, the VM instance is ready to be used.\n- [Create a username and password](/compute/docs/instances/windows/creating-passwords-for-windows-instances) for the VM instance\n- [Connect to the VM by using Remote Desktop](/compute/docs/instances/connecting-to-windows) and log in using the username and password created in the previous step.\n- Right-click the **Start** button (or press **Win+X** ) and click **Windows PowerShell (Admin)** .\n- Confirm the elevation prompt by clicking **Yes** .\n- Join the computer to your Active Directory domain and restart:```\nAdd-Computer -Domain DOMAIN -Restart\n```Replace `` with the DNS name of your Active Directory domain.Wait for approximately 1 minute for the restart to complete.\n### Reserve cluster IP addressesYou now reserve two static IP addresses in your VPC. One IP address is used as the WSFC cluster IP address, the other is used by the internal load balancer.- Reserve a static IP for the internal load balancer and capture the address in a new environment variable named `LOADBALANCER_ADDRESS` :```\ngcloud compute addresses create wsfc \\\n --subnet $SUBNET_NAME \\\n --region $(gcloud config get-value compute/region)\nLOADBALANCER_ADDRESS=$(gcloud compute addresses describe wsfc \\\n --region $(gcloud config get-value compute/region) \\\n --format=value\\(address\\)) && \\\necho \"Load Balancer IP: $LOADBALANCER_ADDRESS\"\n```Note the IP address, you need it later.\n- Reserve another static IP address that you use as cluster IP:```\ngcloud compute addresses create wsfc-cluster \\\n --subnet $SUBNET_NAME \\\n --region $(gcloud config get-value compute/region) && \\\nCLUSTER_ADDRESS=$(gcloud compute addresses describe wsfc-cluster \\\n --region $(gcloud config get-value compute/region) \\\n --format=value\\(address\\)) && \\\necho \"Cluster IP: $CLUSTER_ADDRESS\"\n```Note the IP address, you need it later.\nYour project and VPC are now ready for the deployment of the WSFC and SQL Server.## Deploying the failover clusterYou now use the VM instances to deploy a WSFC and SQL Server.\n### Preparing SQL ServerCreate a new user account in Active Directory for SQL Server:- Connect to`node-1` [by using Remote Desktop](/compute/docs/instances/connecting-to-windows) . Log in with your domain user account.\n- Right-click the **Start** button (or press **Win+X** ) and click **Windows PowerShell (Admin)** .\n- Confirm the elevation prompt by clicking **Yes** .\n- Create a domain user account for SQL server and the SQL agent and assign a password:```\n$Credential = Get-Credential -UserName sql_server -Message 'Enter password'\nNew-ADUser `\n -Name \"sql_server\" `\n -Description \"SQL Admin account.\" `\n -AccountPassword $Credential.Password `\n -Enabled $true -PasswordNeverExpires $true\n``` **Note:** If you use Managed AD, append `-Path \"OU=Cloud,DC=example,DC=org\"` to the command to create the user in the `Cloud` OU.\nTo configure SQL Server, perform the following steps on both `node-1` and `node-2` :- Right-click the **Start** button (or press **Win+X** ) and click **Windows PowerShell (Admin)** .Rename the SQL server instance so that its name matches the hostname:```\nInvoke-Sqlcmd -Query \"\n sp_addserver '$env:computername', local;\n GO\"\nRestart-Service -Name MSSQLSERVER\n```\n- Open **SQL Server Configuration Manager** .\n- In the navigation pane, select **SQL Server Services** \n- In the list of services, right-click **SQL Server (MSSQLSERVER)** and select **Properties** .\n- Under **Log on as** , change the account:- **Account name** :`` `\\sql_server`where`DOMAIN`is the NetBIOS name of your Active Directory domain.\n- **Password** : Enter the password you chose previously.\n- Click **OK** .\n- When prompted to restart SQL Server, select **Yes** .\nSQL Server now runs under a domain user account.\n **Warning:** Make sure you've completed the previous configuration steps on both VM instances, otherwise setting up the AlwaysOn availability group will fail.\n### Creating file sharesCreate two file shares on `witness` so that the VM instance can store SQL Server backups and act as a file share witness:- Connect to`witness` [by using Remote Desktop](/compute/docs/instances/connecting-to-windows) . Log in with your domain user account.\n- Right-click the **Start** button (or press **Win+X** ) and click **Windows PowerShell (Admin)** .\n- Confirm the elevation prompt by clicking **Yes** .\n- Create a witness file share and grant yourself and the two WSFC nodes access to the file share:```\nNew-Item \"C:\\QWitness\" \u2013type directory\nicacls C:\\QWitness\\ /grant 'node-1$:(OI)(CI)(M)'\nicacls C:\\QWitness\\ /grant 'node-2$:(OI)(CI)(M)'\nNew-SmbShare `\n -Name QWitness `\n -Path \"C:\\QWitness\" `\n -Description \"SQL File Share Witness\" `\n -FullAccess $env:username,node-1$,node-2$\n```\n- Create another file share to store backups and grant SQL Server full access:```\nNew-Item \"C:\\Backup\" \u2013type directory\nNew-SmbShare `\n -Name Backup `\n -Path \"C:\\Backup\" `\n -Description \"SQL Backup\" `\n -FullAccess $env:USERDOMAIN\\sql_server\n```\n### Deploy WSFCYou are now ready to create the failover cluster:- Return to the Remote Desktop session on`node-1`.\n- Right-click the **Start** button (or press **Win+X** ) and click **Windows PowerShell (Admin)** .\n- Confirm the elevation prompt by clicking **Yes** .\n- Create a new cluster:```\nNew-Cluster `\n -Name sql-cluster `\n -Node node-1,node-2 `\n -NoStorage `\n -StaticAddress CLUSTER_ADDRESS\n```Replace `` with the cluster IP address that you created earlier. **Note:** When Computer objects are created outside the container `Computers` (in an Organizational Unit), the permission `Create Computer objects` must be delegated to the cluster's computer account in the Organizational Unit.\n- Return to the PowerShell session on `witness` and grant the virtual computer object of the cluster permission to access the file share:```\nicacls C:\\QWitness\\ /grant 'sql-cluster$:(OI)(CI)(M)'\nGrant-SmbShareAccess `\n -Name QWitness `\n -AccountName 'sql-cluster$' `\n -AccessRight Full `\n -Force\n```\n- Return to the PowerShell session on `node-1` and configure the cluster to use the file share on `witness` as a cluster quorum:```\nSet-ClusterQuorum -FileShareWitness \\\\witness\\QWitness\n```\n- Verify that the cluster was created successfully:```\nTest-Cluster\n```You might see some warnings that can be safely ignored:```\nWARNING: System Configuration - Validate All Drivers Signed: The test reported some warnings..\nWARNING: Network - Validate Network Communication: The test reported some warnings..\nWARNING:\nTest Result:\nHadUnselectedTests, ClusterConditionallyApproved\nTesting has completed for the tests you selected. You should review the warnings in the Report. A cluster solution is\nsupported by Microsoft only if you run all cluster validation tests, and all tests succeed (with or without warnings).\n```You can also launch the Failover Cluster Manager MMC snap-in to review the cluster's health by running `cluadmin.msc` .\n- If you're using Managed AD, add the computer account used by WSFC to the **Cloud Service Domain Join Accounts** group so that it can join computers to the domain:```\nAdd-ADGroupMember `\n -Identity \"Cloud Service Domain Join Accounts\" `\n -Members sql-cluster$\n```\n- Enable AlwaysOn availability groups on both nodes:```\nEnable-SqlAlwaysOn -ServerInstance node-1 -Force\nEnable-SqlAlwaysOn -ServerInstance node-2 -Force\n```\n## Creating an availability groupYou now create a sample database `bookshelf` , include it in a new availability group named `bookshelf-ag` and configure high availability.\n### Creating a databaseCreate a new database. For the purpose of this tutorial, the database doesn't need to contain any data.- Return to the Remote Desktop session on`node-1`.\n- Open the **SQL Server Management Studio** .\n- In the **Connect to server** dialog, verify the server name is set to`NODE-1`and select **Connect** .\n- In the menu, select **File > New > Query with current connection** .\n- Paste the following SQL script into the editor:```\n-- Create a sample database\nCREATE DATABASE bookshelf ON PRIMARY (\n NAME = 'bookshelf',\n FILENAME='d:\\Data\\bookshelf.mdf',\n SIZE = 256MB,\n MAXSIZE = UNLIMITED,\n FILEGROWTH = 256MB)\nLOG ON (\n NAME = 'bookshelf_log',\n FILENAME='d:\\Logs\\bookshelf.ldf',\n SIZE = 256MB,\n MAXSIZE = UNLIMITED,\n FILEGROWTH = 256MB)\nGO\nUSE [bookshelf]\nSET ANSI_NULLS ON\nSET QUOTED_IDENTIFIER ON\nGO\n-- Create sample table\nCREATE TABLE [dbo].[Books] (\n [Id] [bigint] IDENTITY(1,1) NOT NULL,\n [Title] [nvarchar](max) NOT NULL,\n [Author] [nvarchar](max) NULL,\n [PublishedDate] [datetime] NULL,\n [ImageUrl] [nvarchar](max) NULL,\n [Description] [nvarchar](max) NULL,\n [CreatedById] [nvarchar](max) NULL,\n CONSTRAINT [PK_dbo.Books] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (\n PAD_INDEX = OFF,\n STATISTICS_NORECOMPUTE = OFF,\n IGNORE_DUP_KEY = OFF,\n ALLOW_ROW_LOCKS = ON,\n ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\nGO\n-- Create a backup\nEXEC dbo.sp_changedbowner @loginame = 'sa', @map = false;\n ALTER DATABASE [bookshelf] SET RECOVERY FULL;\n GO\n BACKUP DATABASE bookshelf to disk = '\\\\witness\\Backup\\bookshelf.bak' WITH INIT\nGO\n```The script creates a new database with a single table and performs an initial backup to `witness` .\n- Select **Execute** to run the SQL script.\n### Configuring high availability\n- In the **Object Explorer** window, right-click **Always On High Availability** and then select **New Availability Group Wizard** .\n- On the **Specify Options** page, set the availability group name to`bookshelf-ag`, then select **Next** .\n- On the **Select Databases** page, select the`bookshelf`database, then select **Next** .\n- On the **Specify Replicas** page, select the **Replicas** tab:- Select **Add replica** .\n- In the **Connect to server** dialog, enter the server name `node-2` and select **Connect** .The list of availability replicas now contains SQL Server instances, `node-1` and `node-2` .\n- Set the **Availability mode** to **Synchronous commit** for both instances.\n- Set **Automatic failover** to **Enabled** for both instances.\n- Select the **Listener** tab- Select **Create an availability group listener** \n- Enter the following settings:- **Listener DNS name** :`bookshelf`\n- **Port** :`1433`\n- **Network mode** : **Static IP** \n- Select **Add** and enter the load balancer IP address that you created earlier. Then select **OK** .\n- Select **Next** .\n- On the **Select Data Synchronization** page, select **Automatic Seeding** .\n- On the **Validation** page, verify that all checks are successful.\n- On the **Summary** page, select **Finish** .\n- On the **Results** page, select **Close** .\n### Configure health checksAs a final step, configure the cluster to expose a health check endpoint that can be used by an internal load balancer:- Return to the PowerShell session on`node-1`\n- Initialize a variable with the IP address of the load balancer.```\n$LoadBalancerIP = 'IP_ADDRESS'\n```Replace `` with the IP address of the `wsfc` address that you reserved earlier.\n- Configure the Failover Cluster to respond to the health check service:```\n$SqlIpAddress = Get-ClusterResource |\n Where-Object {$_.ResourceType -eq \"IP Address\"} |\n Where-Object {$_.Name.StartsWith(\"bookshelf\")}\n$SqlIpAddress | Set-ClusterParameter -Multiple @{\n 'Address'= $LoadBalancerIP;\n 'ProbePort'= 59997;\n 'SubnetMask'='255.255.255.255';\n 'Network'= (Get-ClusterNetwork).Name;\n 'EnableDhcp'=0; }\n```\n- Restart the cluster resource:```\n$SqlIpAddress | Stop-ClusterResource\n$SqlIpAddress | Start-ClusterResource\n```\n### Create an internal load balancerTo provide a single endpoint for SQL Server clients, you now deploy an [internal load balancer](/compute/docs/load-balancing/internal#deploying_internal_load_balancing) . The load balancer uses a health check which ensures that traffic is directed to the active node of the WSFC.- Return to your existing Cloud Shell session.\n- Create two [unmanaged instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-unmanaged-instances) , one per zone, and add the two nodes to the groups:```\nREGION=$(gcloud config get-value compute/region)\ngcloud compute instance-groups unmanaged create wsfc-group-1 --zone $REGION-a\ngcloud compute instance-groups unmanaged add-instances wsfc-group-1 --zone $REGION-a \\\n --instances node-1\ngcloud compute instance-groups unmanaged create wsfc-group-2 --zone $REGION-b\ngcloud compute instance-groups unmanaged add-instances wsfc-group-2 --zone $REGION-b \\\n --instances node-2\n```\n- Create a health check that the load balancer can use to determine which is the active node.```\ngcloud compute health-checks create tcp wsfc-healthcheck \\\n --check-interval=\"2s\" \\\n --healthy-threshold=1 \\\n --unhealthy-threshold=2 \\\n --port=59997 \\\n --timeout=\"1s\"\n```The health check probes port `59997` , which is the port you previously configured as `ProbePort` for the availability group listener.\n- Create a backend service and add the two instance groups:```\ngcloud compute backend-services create wsfc-backend \\\n --load-balancing-scheme internal \\\n --region $(gcloud config get-value compute/region) \\\n --health-checks wsfc-healthcheck \\\n --protocol tcp\ngcloud compute backend-services add-backend wsfc-backend \\\n --instance-group wsfc-group-1 \\\n --instance-group-zone $REGION-a \\\n --region $REGION\ngcloud compute backend-services add-backend wsfc-backend \\\n --instance-group wsfc-group-2 \\\n --instance-group-zone $REGION-b \\\n --region $REGION\n```\n- Create the internal load balancer:```\ngcloud compute forwarding-rules create wsfc-sql \\\n --load-balancing-scheme internal \\\n --address $LOADBALANCER_ADDRESS \\\n --ports 1433 \\\n --network $VPC_NAME \\\n --subnet $SUBNET_NAME \\\n --region $REGION \\\n --backend-service wsfc-backend\n```\nYou can now connect to SQL Server availability group listener by using the internal load balancer and the DNS name `bookshelf` .\nTo create multiple availability groups on a single failover cluster, you must use a separate load balancer with its own healthcheck per availability group. This means that for each availability group, you need:- A reserved internal IP address (one for each availability group) to be used for the listener and the internal load balancer.\n- A separate load balancer (one for each availability group) with its own IP address reserved in the previous step.\n- A separate probe port (59997, 59998, and so on for each availability group) and firewall rule to allow traffic on those probe ports.\n- A separate health check rule for each availability group using the respective probe ports.\n## Testing failoverYou are now ready to test if the failover works as expected:- Return to the PowerShell session on`witness`\n- Run the following script:```\nwhile ($True){\n $Conn = New-Object System.Data.SqlClient.SqlConnection\n $Conn.ConnectionString = \"Server=bookshelf;Integrated Security=true;Initial Catalog=master\"\n $Conn.Open()\n $Cmd = New-Object System.Data.SqlClient.SqlCommand\n $Cmd.Connection = $Conn\n $Cmd.CommandText = \"SELECT @@SERVERNAME\"\n $Adapter = New-Object System.Data.SqlClient.SqlDataAdapter $Cmd\n $Data = New-Object System.Data.DataSet\n $Adapter.Fill($Data) | Out-Null\n $Data.Tables[0] + (Get-Date -Format \"MM/dd/yyyy HH:mm:ss\")\n Start-Sleep -Seconds 2\n}\n```Every 2 seconds, the script connects to SQL Server by using the availability group listener and queries the server name.Leave the script running.\n- Return to the Remote Desktop session on `node-1` to trigger a failover:- In **SQL Server Management Studio** , navigate to **Always On\nHigh Availability > Availability Groups > bookshelf-ag (Primary)** and right-click the node.\n- Select **Failover** .\n- On the **Select new primary replica** page, verify that`node-2`is selected as new primary replica and that the **Failover readiness** column indicates`No data loss`. Then select **Next** .\n- On the **Connect to replica** page, select **Connect** .\n- In the **Connect to server** dialog, verify that the server name is`node-2`and click **Connect** .\n- Select **Next** and then **Finish** .\n- On the **Results** page, verify that the failover was successful.\n- Return to the PowerShell session on `witness` .\n- Observe the output of the running script and notice that the server name changes from `node-1` to `node-2` as a result of the failover.\n- Stop the script by pressing `Ctrl+C` .\n## Clean up\nAfter you finish the tutorial, you can clean up the resources that you created so that they stop using quota and incurring charges. The following sections describe how to delete or turn off these resources.\n### Deleting the project\nThe easiest way to eliminate billing is to delete the project that you created for the tutorial.\nTo delete the project:\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n## What's next\n- Learn how you can [configure a SQL Server failover cluster instance that uses Storage Spaces Direct](/compute/docs/instances/sql-server/configure-failover-cluster-instance) .\n- Learn how you can [configure a SQL Server failover cluster instance that uses Persistent Disk in multi-writer mode](/compute/docs/instances/sql-server/configure-failover-cluster-instance-pd-multi-writer) .", "guide": "Compute Engine"}