{"title": "Apigee - Native Envoy example for Apigee and hybrid", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Native Envoy example for Apigee and hybrid\nThis example demonstrates how to use Apigee Adapter for Envoy by installing and running Envoy locally, not inside a [Kubernetes cluster](/apigee/docs/api-platform/envoy-adapter/v2.0.x/example-hybrid) . You can follow the example in this document for both Apigee and Apigee hybrid installations.\nAPI proxy calls go through Envoy running as a native application. Apigee provides API management services, such as API product and developer app creation. Envoy communicates with the Apigee management  plane through the adapter's remote service. The adapter also pushes analytics data to  Apigee where you can see it in [Apigee Analytics](/apigee/docs/api-platform/analytics/analytics-services-overview) .\n", "content": "## Prerequisites\n| Before you begin:                             |\n|:------------------------------------------------------------------------------------------------------------------------------------|\n| Download and install the Apigee Adapter for Envoy Remote Service and command-line interface (CLI) as explained in Getting started. |\n| Be sure you have the Google Cloud SDK installed. The SDK includes the gcloud command-line tool.         |\n| Be sure you have kubectl installed.                         |\n## \n Check your gcloud configuration\n- Check that your`gcloud`configuration is set to the Google Cloud project associated with your Apigee organization.To list the current settings. See also [gcloud config](https://cloud.google.com/sdk/gcloud/reference/config) .```\ngcloud config list\n```If necessary, set the correct Google Cloud project ID with this command:```\ngcloud config set project project-id\n```\n- You must be authenticated with Google Cloud SDK (gcloud) for your Google Cloud project. See also [gcloud auth login](https://cloud.google.com/sdk/gcloud/reference/auth/login) .```\ngcloud auth login\n```## \n Provision Apigee\nIn this step, you will use the Remote Service CLI to provision Apigee Adapter for Envoy assets to Apigee. The provisioning command deploys API proxies used for Apigee adapter operations, sets up a certificate on Apigee, and generates credentials the remote service will use to securely connect from your system to Apigee.\n- Go to the`$CLI_HOME`directory:```\ncd $CLI_HOME\n```\n- (Optional) By default, the adapter looks for default service account credentials in your Google  Cloud project for permission to send analytics data to Apigee. If you don't want to use the [default service account credentials](https://cloud.google.com/docs/authentication/production#automatically) , you can create a service account and reference its key in the  provisioning command. The service account must have the`apigee.analyticsAgent`role.  For instructions, see [Creating and managing service accounts](https://cloud.google.com/iam/docs/creating-managing-service-accounts) .\n- Create the following environment variables. These variables will be used as  parameters to the provisioning script:```\nexport ORG=organization_nameexport ENV=environment_nameexport RUNTIME=host_alias_urlexport NAMESPACE=hybrid_runtime_namespace \u00a0\n## Apigee hybrid onlyexport AX_SERVICE_ACCOUNT=analytics_service_account \u00a0\n## Optional\n```Where:| Variable     | Description                                                                                        |\n|:--------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| organization_name   | The name of your Apigee organization.                                                                                  |\n| environment_name   | The name of an environment in your organization.                                                                               |\n| host_alias_url   | For Apigee hybrid, a URL that includes the hostAlias for a virtual host defined in your hybrid configuration. For Apigee, a hostname from the environment group that includes the environment. You can find environment groups in the Apigee UI under Admin > Environments > Groups. Note: The URL must start with https://. For example: https://apitest.mydomain.net |\n| hybrid_runtime_namepace | (Apigee hybrid only) The namespace in which the Hybrid runtime components are deployed. Note: The default namespace for a hybrid deployment is apigee.                                                     |\n| analytics_service_account | (Optional) The path to a Google Cloud service account key JSON file that has the Apigee Analytics Agent role. For a detailed description of this parameter, see Provision command.                                              |\n- If you are not an owner of the Google Cloud project associated with the Apigee organization,  be sure that your Google Cloud user account includes either the **Apigee Organization Admin** role, or  both the **API Creator** and the **Deployer** roles. See [Granting, changing, and revoking access to resources](https://cloud.google.com/iam/docs/granting-changing-revoking-access) .\n- Get an access token:```\nTOKEN=$(gcloud auth print-access-token);echo $TOKEN\n```\n- Provision the remote service proxy to Apigee. The command output is redirected to a config file  that you will use in a later step. **IF YOU ARE UPGRADING: ** If you are upgrading an existing Apigee Adapter for Envoy, you must add the`--force-proxy-install`flag to the`provision`command. This flag forces  the Apigee proxy to be replaced with the latest proxy.If you are **not** upgrading, use this command to provision Apigee. If you are  provisioning to Apigee hybrid, be sure to add the `--namespace $NAMESPACE` parameter:```\n./apigee-remote-service-cli provision --organization $ORG --environment $ENV \\\n  --runtime $RUNTIME --analytics-sa $AX_SERVICE_ACCOUNT --token $TOKEN > config.yaml\n```If you are upgrading, use this command with the `--force-proxy-install` flag to provision Apigee.  If you are  provisioning to Apigee hybrid, be sure to add the `--namespace $NAMESPACE` parameter:```\n./apigee-remote-service-cli provision --force-proxy-install --organization $ORG --environment $ENV \\\n  --runtime $RUNTIME --analytics-sa $AX_SERVICE_ACCOUNT --token $TOKEN > config.yaml\n```\n- Check the contents of the`config.yaml`file. It should look something like this:```\n# Configuration for apigee-remote-service-envoy (platform: Google Cloud)# generated by apigee-remote-service-cli provision on 2020-11-20 02:49:28apiVersion: v1kind: ConfigMapmetadata:\u00a0 name: apigee-remote-service-envoy\u00a0 namespace: apigeedata:\u00a0 config.yaml: |\u00a0 \u00a0 tenant:\u00a0 \u00a0 \u00a0 remote_service_api: https://apitest.mydomain.com/remote-service\u00a0 \u00a0 \u00a0 org_name: my-org\u00a0 \u00a0 \u00a0 env_name: test\u00a0 \u00a0 analytics:\u00a0 \u00a0 \u00a0 collection_interval: 10s\u00a0 \u00a0 auth:\u00a0 \u00a0 \u00a0 jwt_provider_key: https://apitest.mydomain.com/remote-service/token---apiVersion: v1kind: Secretmetadata:\u00a0 name: my-org-new-test-policy-secret\u00a0 namespace: apigeetype: Opaquedata:\u00a0 remote-service.crt: eyJrZXlzIjpbeyJrdHkiOiJSU0EiLCJhbGci...\u00a0 remote-service.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURS...\u00a0 remote-service.properties: a2lkPTIwMjAtMDctMDZ...---apiVersion: v1kind: Secretmetadata:\u00a0 name: my-org-new-test-analytics-secret\u00a0 namespace: apigeetype: Opaquedata:\u00a0 client_secret.json: ewogICJ0eXBlIjogInNlcnZ...---apiVersion: v1kind: ServiceAccountmetadata:\u00a0 name: apigee-remote-service-envoy\u00a0 namespace: apigee\n```## \n Run apigee-remote-service-envoy\nYou can run the Remote Service either as a native binary or on Docker.\n### \n Run the service natively\nExecute the service binary with the config file that was output by the provisioning command:\n```\n$REMOTE_SERVICE_HOME/apigee-remote-service-envoy -c config_file_path/config.yaml\n```\n### \n Run the service on Docker\nDocker images are published with release tags. For this install, use the latest version. There are three image variations to choose from:\n| Variation     | Image          |\n|:--------------------------|:------------------------------------------|\n| Google distroless   | google/apigee-envoy-adapter:v2.0.3  |\n| Ubuntu     | google/apigee-envoy-adapter:v2.0.3-ubuntu |\n| Ubuntu with Boring Crypto | google/apigee-envoy-adapter:v2.0.3-boring |\nFor example, to run the scratch image with your local `config.yaml` available as `/config.yaml` via a volume mount, use this command:\n```\ndocker run -v ./config.yaml:/config.yaml google/apigee-envoy-adapter:v2.0.3\n```\n**Note: ** The Docker image runs as a non-root user. Make sure it is granted read permission to the`config.yaml`file.\n## \n Create a sample Envoy configuration file\nGenerate a sample Envoy configuration file using the CLI:\n- Make sure you are in the`$ENVOY_HOME`directory.\n- List the available configuration templates:```\n$CLI_HOME/apigee-remote-service-cli samples templates\n```\n- Execute the samples command. For , substitute one of the supported Envoy templates:```\n$CLI_HOME/apigee-remote-service-cli samples create --template TEMPLATE -c ./config.yaml\n```The command creates the file `./samples/envoy-config.yaml` .\nFor more information, see [Samples command](/apigee/docs/api-platform/envoy-adapter/v2.0.x/reference#samples-command) .\n## \n Install and run the Envoy proxy\nFollow these steps to install and run the Envoy proxy:\n- Download an Envoy [binary](https://www.getenvoy.io/) or [build](https://www.envoyproxy.io/docs/envoy/latest/start/building) it.\n- Run Envoy using a sample configuration file that you generated previously for the`httpbin.org`service:```\nenvoy -c ./samples/envoy-config.yaml\n```## \n Test the installation\n- Configure an API product and get an API key as explained in [How to obtain an API key](/apigee/docs/api-platform/envoy-adapter/v2.0.x/operation#how-to-obtain-an-api-key) .\n- Call the`httpbin`service without an API key:```\ncurl -i http://localhost:8080/headers -H \"HOST:httpbin.org\"\n``` **Note: ** You must include the`HOST`header and set  it to the remote service host that was set in the API product.The service is now being managed by Apigee, and because you did not supply an API key,  the call returns the following error.```\ncurl -i http://localhost:8080/headers -H \"HOST:httpbin.org\"\nHTTP/1.1 403 Forbidden\ndate: Tue, 12 May 2020 17:51:36 GMT\nserver: envoy\ncontent-length: 0\nx-envoy-upstream-service-time: 11\n```\n- Make an API call using the key:```\nexport APIKEY=YOUR_API_KEY\ncurl -i http://localhost:8080/headers -H \"HOST:httpbin.org\" -H \"x-api-key: $APIKEY\"\n```The call should succeed with a 200 status and return a list of headers in the response.  For example:```\ncurl -i httpbin.default.svc.cluster.local/headers -H \"x-api-key: kyOTalNNLMPfOSy6rnVeclmVSL6pA2zS\"\nHTTP/1.1 200 OK\nserver: envoy\ndate: Tue, 12 May 2020 17:55:34 GMT\ncontent-type: application/json\ncontent-length: 828\naccess-control-allow-origin: *\naccess-control-allow-credentials: true\nx-envoy-upstream-service-time: 301\n{\n \"headers\": {\n \"Accept\": \"*/*\",\n \"Content-Length\": \"0\",\n \"Host\": \"httpbin.default.svc.cluster.local\",\n \"User-Agent\": \"curl/7.70.0-DEV\",\n \"X-Api-Key\": \"kyOTalNNLMPfOSy6rneclmVSL6pA2zS\",\n \"X-Apigee-Accesstoken\": \"\",\n \"X-Apigee-Api\": \"httpbin.default.svc.cluster.local\",\n \"X-Apigee-Apiproducts\": \"httpbin\",\n \"X-Apigee-Application\": \"httpbin\",\n \"X-Apigee-Authorized\": \"true\",\n \"X-Apigee-Clientid\": \"kyOTalNNLMPfOSy6rVeclmVSL6pA2zS\",\n \"X-Apigee-Developeremail\": \"user@mydomain.com\",\n \"X-Apigee-Environment\": \"test\",\n \"X-Apigee-Organization\": \"my-org\",\n \"X-Apigee-Scope\": \"\",\n \"X-B3-Parentspanid\": \"1476f9a2329bbdfa\",\n \"X-B3-Sampled\": \"0\",\n \"X-B3-Spanid\": \"1ad5c19bfb4bc96f\",\n \"X-B3-Traceid\": \"6f329a34e8ca07811476f9a2329bbdfa\"\n }\n}\n```\n## \n Uninstall Apigee Envoy adapter\nTo remove an Apigee Envoy adapter installation:\n- Wherever you chose to have envoy adapter run (natively or on Docker), remove it.\n- Delete the **remote-service** and **remote-token** proxies from your Apigee environment(s). See [Deleting an API proxy](/apigee/docs/api-platform/develop/ui-delete-proxy) .\n- Remove any unused API products or [operations](/apigee/docs/api-platform/publish/create-api-products#operations) used by the Envoy adapter use cases. See [Deleting an API product](/apigee/docs/api-platform/publish/create-api-products#delete) .## \n Next steps\nAPI traffic to the `httpbin` service is now managed by Apigee. Here are some features you can explore and try:\n- Access Apigee Analytics in the Edge UI. Go to **Analyze > API Metrics > API\n Proxy Performance** .\n- Explore the CLI options in the [Reference](/apigee/docs/api-platform/envoy-adapter/v2.0.x/reference) .", "guide": "Apigee"}