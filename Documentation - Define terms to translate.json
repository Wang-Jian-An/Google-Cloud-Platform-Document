{"title": "Documentation - Define terms to translate", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Define terms to translate\nYou can use a glossary, which is optional, with the Translation service to define terminology that is specific to your domain. With a glossary, you can add term pairs, which include a source language term and target language term. The term pairs ensure that your terminology is consistently translated.\nUse a glossary in the following cases:\n- **Product names.** Don't translate words that refer to product names. For example, \"Google Home\" must translate to \"Google Home.\"\n- **Ambiguous words.** Specify the meaning of vague words and homonyms. For example, \"bat\" can mean a piece of sports equipment or an animal.\n- **Borrowed words.** Clarify the meaning of words adopted from a different language. For example, \"bouillabaisse\" in French translates to \"bouillabaisse\" in English, a fish stew dish.\nThe terms in a glossary can be single tokens (words) or short phrases, usually fewer than five words. Translation ignores any matching glossary entries if the words are [glossary stopwords](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/stopwords) .\nThe steps for using a glossary are the following:\n- [Prepare your environment for a glossary](#prep-env) .\n- [Create a glossary file](#create-glossary-file) .\n- [Save a copy of your glossary file](#save-glossary) .\n- To make the glossary file available to the Translation API, choose one of the following:- [Create a unidirectional glossary resource](#create-resource) for a pair of source and target terms in a specific language.\n- [Create an equivalent term sets glossary resource](#create-equiv-resource) in multiple languages on each row.\n- Specify which glossary to use when you [request atranslation](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-translation#translate-text) . To get a list of the available glossaries, see [List glossaries](#list-glossaries) .\nA summary of the glossary methods includes the following:\n| Method   | Description         |\n|:---------------|:----------------------------------------------|\n| CreateGlossary | To create a glossary.       |\n| GetGlossary | To return a stored glossary.     |\n| DeleteGlossary | To delete a glossary that you no longer need. |\n| ListGlossaries | To poll the status of Translation operations. |\n", "content": "## Prepare your environment\nBefore using a glossary to translate a different language into English text, you must do the following:\n- [Create a project](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/create-a-project) , which is stored in`platform`.\n- Create a [storage bucket](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/create-storage-buckets#create_a_bucket) in the project, and select the`Standard`class.\n- You must grant`read`permissions on the storage bucket to the service account (`ai-translation--system-sa`) used by the Translation service.\n- Enter the following sample code to create the project, storage bucket, role, and role binding:- Create the project.```\n\u00a0 apiVersion: resourcemanager.gdc.goog/v1\u00a0 kind: Project\u00a0 metadata:\u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 atat.config.google.com/clin-number: <clin-number>\u00a0 \u00a0 \u00a0 atat.config.google.com/task-order-number: <task-order-number>\u00a0 \u00a0 name: translation-glossary-project\u00a0 \u00a0 namespace: platform\n```\n- Create the storage bucket.```\n\u00a0 apiVersion: object.gdc.goog/v1\u00a0 kind: Bucket\u00a0 metadata:\u00a0 \u00a0 name: glossary-bucket\u00a0 \u00a0 namespace: translation-glossary-project\u00a0 spec:\u00a0 \u00a0 description: bucket for translation glossary\u00a0 \u00a0 storageClass: Standard\u00a0 \u00a0 bucketPolicy:\u00a0 \u00a0 \u00a0 lockingPolicy:\u00a0 \u00a0 \u00a0 \u00a0 defaultObjectRetentionDays: 90\n```\n- Create the role.```\n\u00a0 apiVersion: rbac.authorization.k8s.io/v1\u00a0 kind: Role\u00a0 metadata:\u00a0 \u00a0 name: ai-translation-glossary-reader\u00a0 \u00a0 namespace: translation-glossary-project\u00a0 rules:\u00a0 \u00a0 -\u00a0 \u00a0 \u00a0 apiGroups:\u00a0 \u00a0 \u00a0 \u00a0 - object.gdc.goog\u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 - buckets\u00a0 \u00a0 \u00a0 verbs:\u00a0 \u00a0 \u00a0 \u00a0 - read-object\n```\n- Create the role binding.```\n\u00a0 apiVersion: rbac.authorization.k8s.io/v1\u00a0 kind: RoleBinding\u00a0 metadata:\u00a0 \u00a0 name: ai-translation-glossary-reader-rolebinding\u00a0 \u00a0 namespace: translation-glossary-project\u00a0 roleRef:\u00a0 \u00a0 apiGroup: rbac.authorization.k8s.io\u00a0 \u00a0 kind: Role\u00a0 \u00a0 name: ai-translation-glossary-reader\u00a0 subjects:\u00a0 \u00a0 -\u00a0 \u00a0 \u00a0 kind: ServiceAccount\u00a0 \u00a0 \u00a0 name: ai-translation-system-sa\u00a0 \u00a0 \u00a0 namespace: ai-translation-system\n```\n## Save a copy of your glossary\nBacking up the glossary isn't supported. Therefore, save a copy of the input file. If the glossary gets erased for any reason, upload your saved input file to the [storage bucket](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/create-storage-buckets#create_a_bucket) , and re-run the [CreateGlossary](#create-glossary-file) request to restore your glossary.\n## Create a glossary file\nYou must create a glossary file to store your source language and target language terms. There are two different glossary layouts that you can use to define your terms. The glossary layouts include the following:\n| Glossary layout    | Description                      | File Format  |\n|:------------------------------|:-------------------------------------------------------------------------------------------------|:-----------------|\n| Unidirectional glossary  | Specifies the expected translation for a pair of source and target terms in a specific language. | TSV and CSV, TMX |\n| Equivalent term sets glossary | Specifies the expected translation in multiple languages on each row.       | nan    |\n### Unidirectional glossary (TSV and CSV file formats)\nThe Translation API accepts Tab-Separated Values (TSVs) and Comma-Separated Values (CSVs). Each row contains a pair of terms separated by a tab ( `\\t` ) or a comma ( `,` ). In the following example, the first column shows the source language term, and the second column shows the target language term:\nWhen you [create a glossary resource](#create-resource) , you can define a header row. The glossary resource makes the glossary file available to the Translation API.\n### Unidirectional glossary (TMX file format)\nThe Translation API accepts the Translation Memory eXchange (TMX) format, which is a standard XML format for providing the source and the target term pairs that are translated.\nThe Translation API supports input files in a format based on TMX version 1.4. This example illustrates the required structure:\n```\n<?xml version='1.0' encoding='utf-8'?><!DOCTYPE tmx SYSTEM \"tmx14.dtd\"><tmx version=\"1.4\">\u00a0 <header segtype=\"sentence\" o-tmf=\"UTF-8\" adminlang=\"en\" srclang=\"en\" datatype=\"PlainText\"/>\u00a0 <body>\u00a0 \u00a0 <tu>\u00a0 \u00a0 \u00a0 <tuv xml:lang=\"en\">\u00a0 \u00a0 \u00a0 \u00a0 <seg>account</seg>\u00a0 \u00a0 \u00a0 </tuv>\u00a0 \u00a0 \u00a0 <tuv xml:lang=\"es\">\u00a0 \u00a0 \u00a0 \u00a0 <seg>cuenta</seg>\u00a0 \u00a0 \u00a0 </tuv>\u00a0 \u00a0 </tu>\u00a0 \u00a0 <tu>\u00a0 \u00a0 \u00a0 <tuv xml:lang=\"en\">\u00a0 \u00a0 \u00a0 \u00a0 <seg>directions</seg>\u00a0 \u00a0 \u00a0 </tuv>\u00a0 \u00a0 \u00a0 <tuv xml:lang=\"es\">\u00a0 \u00a0 \u00a0 \u00a0 <seg>indicaciones</seg>\u00a0 \u00a0 \u00a0 </tuv>\u00a0 \u00a0 </tu>\u00a0 </body></tmx>\n```\nIf your file contains XML tags that aren't shown in this example, the Translation API ignores the XML tags.\nTo ensure that your TMX file is processed successfully by the Translation API, ensure that your TMX file contains the following elements:\n- The `<header>` element of a valid TMX file must identify the source language using the `srclang` attribute.\n- All the `<tu>` elements must contain a pair of `<tuv>` elements with the same source and target languages.- Each`<tuv>`element must identify the language of the contained text using the`xml:lang`attribute, and ISO-639-1 codes are used to identify the source and target languages.\n- If a`<tu>`element contains more than two`<tuv>`elements, the Translation API processes only the first`<tuv>`matching the source language and the first matching the target language and ignores the rest.\n- If a`<tu>`element doesn't have a matching pair of`<tuv>`elements, the Translation API skips over the invalid`<tu>`element.\n- The Translation API strips the markup tags from a `<seg>` element before processing it. If a `<tuv>` element contains more than one `<seg>` element, the Translation API concatenates the text into a single element with a space between them.\nAfter you have identified the glossary terms in your unidirectional glossary, make the glossary file available to the Translation API by [creating and importing a glossary resource](#create-resource) .\n### Equivalent term sets glossary\nFor equivalent term sets, the Translation API accepts glossary files using the CSV format. To define equivalent term sets, create a multi-column CSV file in which each row lists a single glossary term in [multiplelanguages](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-translation#SupportedLanguages) .\nThe header is the first row in the file, which identifies the language for each column. The header row uses the ISO-639-1 or BCP-47 standard language codes. The Translation API doesn't use part-of-speech ( `pos` ) information, and specific position values aren't validated.\nEach subsequent row contains equivalent glossary terms in the languages identified in the header. You can leave columns blank if the term isn't available in all languages.\nAfter you have identified the glossary terms in your equivalent term set, make the glossary file available to the Translation API by [creating andimporting a glossary resource](#create-equiv-resource) .\n## Create an equivalent term sets glossary resource\nTo create an equivalent term sets glossary, make the following replacements before using any of the request data:\n- : Your GDCH project ID.\n- : Your glossary ID, which is your resource name.\n- : Name of bucket where your glossary file is located.\n- : Filename of your glossary.\nThis is the syntax for the HTTP request.\n```\nPOST https://ENDPOINT/v3/projects/PROJECT_ID/glossaries\n```\nTo send a request, this is an example of a JSON body.\n```\n{\u00a0 \"name\":\"projects/PROJECT_ID/glossaries/GLOSSARY_ID\",\u00a0 \"language_codes_Set\": {\u00a0 \u00a0 \"language_codes\": [\"en\", \"en-GB\", \"ru\", \"fr\", \"pt-BR\", \"pt-PT\", \"es\"]\u00a0 },\u00a0 \"input_config\": {\u00a0 \u00a0 \"s3_source\": {\u00a0 \u00a0 \u00a0 \"input_uri\": \"s3://BUCKET_NAME/FILE_BASENAME/GLOSSARY_FILENAME\"\u00a0 \u00a0 }\u00a0 }}\n```\nTo send your request, choose one of these options:\nEnsure you have set the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to the path for your service account private key file.\nSave the request body in a file named `request.json` , and run the following command:\n```\ncurl -X POST \\\u00a0 \u00a0 -H \"Authorization: Bearer \"$(gcloud auth application-default print-access-token) \\\u00a0 \u00a0 -H \"Content-Type: application/json; charset=utf-8\" \\\u00a0 \u00a0 -d @request.json \\\u00a0 \u00a0 \"https://ENDPOINT/v3/projects/PROJECT_ID/glossaries\"\n```\nYou should receive a JSON response similar to the following:\n```\n{\u00a0 \"name\": \"projects/PROJECT_ID/operations/GLOSSARY_ID,\u00a0 \"metadata\": {\u00a0 \u00a0 \"@type\": \"type.googleapis.com/google.cloud.translation.v3.CreateGlossaryMetadata\",\u00a0 \u00a0 \"name\": \"projects/PROJECT_ID/glossaries/GLOSSARY_ID\",\u00a0 \u00a0 \"state\": \"RUNNING\",\u00a0 \u00a0 \"submitTime\": TIME\u00a0 }}\n```\nEnsure you have set the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to the path for your service account private key file.\nSave the request body in a file named `request.json` , and run the following command:\n```\n$cred = gcloud auth application-default print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest `\u00a0 -Method POST `\u00a0 -Headers $headers `\u00a0 -ContentType: \"application/json; charset=utf-8\" `\u00a0 -InFile request.json `\u00a0 -Uri \"https://ENDPOINT/v3/projects/PROJECT_ID/glossaries\"\u00a0 | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\u00a0 \"name\": \"projects/PROJECT_ID/operations/GLOSSARY_ID\",\u00a0 \"metadata\": {\u00a0 \u00a0 \"@type\": \"type.googleapis.com/google.cloud.translation.v3.CreateGlossaryMetadata\",\u00a0 \u00a0 \"name\": \"projects/PROJECT_ID/glossaries/GLOSSARY_ID\",\u00a0 \u00a0 \"state\": \"RUNNING\",\u00a0 \u00a0 \"submitTime\": TIME\u00a0 }}\n```\n```\nfrom google.cloud import translate_v3 as translatedef create_glossary(\u00a0 \u00a0 project_id=PROJECT_ID,\u00a0 \u00a0 input_uri=INPUT_URI,\u00a0 \u00a0 glossary_id=GLOSSARY_ID,\u00a0 \u00a0 timeout=180,):\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Create an equivalent term sets glossary. A glossary can consist of a word or short phrases.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 client = translate.TranslationServiceClient()\u00a0 \u00a0 # Supported language codes\u00a0 \u00a0 source_lang_code = \"en\"\u00a0 \u00a0 target_lang_code = \"ja\"\n##\n## Equivalent term sets {:#EQUIVTERMSETS}\n```\n## Create a unidirectional glossary resource\nTo create a unidirectional glossary, specify a language pair ( `language_pair` ) with a source language ( `source_language_code` ) and a target language ( `target_language_code` ). The following example uses the REST API and command line, but you can also [use the clientlibraries](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-install-libraries) to create a unidirectional glossary.\nWhen you create a new glossary, you must specify a project ID and a glossary ID.\n```\nprojects/PROJECT_ID/glossaries/GLOSSARY_ID\n```\nBefore using any of the request data, make the following replacements:\n- : Your GDCH project ID.\n- : Your glossary ID, which is your resource name.\n- : Name of bucket where your glossary file is located.\n- : Filename of your glossary.\nThe following is a sample HTTP request:\n```\nPOST https://ENDPOINT/v3/projects/PROJECT_ID/glossaries\n```\nThe following is a sample JSON body:\n```\n{\u00a0 \"name\":\"projects/PROJECT_ID/glossaries/GLOSSARY_ID,\u00a0 \"language_pair\": {\u00a0 \u00a0 \"source_language_code\": \"en\",\u00a0 \u00a0 \"target_language_code\": \"ru\"\u00a0 \u00a0 },\u00a0 \"{\"input_config\": {\u00a0 \u00a0 \"s3_source\": {\u00a0 \u00a0 \u00a0 \"input_uri\": \"s3://BUCKET_NAME/FILE_BASENAME/GLOSSARY_FILENAME\"\u00a0 \u00a0 }\u00a0 }}\n```\nTo send your request, do the following:\n- Ensure the`GOOGLE_APPLICATION_CREDENTIALS`environment variable is set to the path of your service account's private key file.\n- Save the request body in a file named`request.json`.\n- Run one of the following commands:\n```\ncurl -X POST \\-H \"Authorization: Bearer \"$(gcloud auth application-default print-access-token) \\-H \"Content-Type: application/json; charset=utf-8\" \\-d @request.json \\\"https://ENDPOINT/v3/projects/PROJECT_ID/glossaries\"\n```\n```\n$cred = gcloud auth application-default print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest\u00a0 -Method POST\u00a0 -Headers $headers\u00a0 -ContentType: \"application/json; charset=utf-8\"\u00a0 -InFile request.json\u00a0 -Uri \"https://ENDPOINT/v3/projects/PROJECT_ID/glossaries\"\u00a0 | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\u00a0 \u00a0 \"name\": \"projects/PROJECT_ID/operations/operation-id\",\u00a0 \u00a0 \"metadata\": {\u00a0 \u00a0 \u00a0 \u00a0 \"@type\": \"type.googleapis.com/google.cloud.translation.v3.CreateGlossaryMetadata\",\u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"projects/PROJECT_ID/glossaries/GLOSSARY_ID\",\u00a0 \u00a0 \u00a0 \u00a0 \"state\": \"RUNNING\",\u00a0 \u00a0 \u00a0 \u00a0 \"submitTime\": TIME\u00a0 \u00a0 \u00a0 }}\n```\n## Create a glossary\nThe `CreateGlossary` method creates a glossary and returns the identifier to the [long-running operation](/distributed-cloud/hosted/docs/latest/gdch/resources/glossary#longrunning) that generates the glossary. To call the `CreateGlossary` method, specify your project ID and the [endpoint](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-api-status) .\n```\n$HOME/go/bin/grpcurl -plaintext -d '{\"parent\": \"projects/PROJECT_ID, \"glossary\" : {\"input_config\": {\"s3_source\": {\"input_uri\": \"glossary_test_terms_sets.csv\"}}, \"language_codes_set\": {\"language_codes\": \"en\", \"language_codes\": \"es\"}, \"display_name\": \"glossary_display_name\"}}' ENDPOINT google.cloud.translation.v3.TranslationService/CreateGlossary\n```\n```\ncurl -X POST http://ENDPOINT/v3/projects/PROJECT_ID/glossaries -d '{\"parent\": \"projects/PROJECT_ID, \"glossary\" : {\"input_config\": {\"s3_source\": {\"input_uri\": \"s3://BUCKET_PROPAGATED_NAME/GLOSSARY_FILE_NAME\"}}, \"language_codes_set\": {\"language_codes\": \"en\", \"language_codes\": \"es\"}, \"display_name\": \"glossary_display_name\"}}'\n```\nCreating a glossary resource is a [long-runningoperation](/distributed-cloud/hosted/docs/latest/gdch/resources/glossary#longrunning) . Depending on the file size, it typically takes less than 10 minutes to complete. [Poll the status ofthisoperation](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-translation#get-op) to see if it has completed.\n## Get a glossary\nThe `GetGlossary` method returns a stored glossary. If the glossary doesn't exist, the `NOT_FOUND` value is returned. To call the `GetGlossary` method, specify your project ID and the glossary ID. Both the [CreateGlossary](#create-glossary) and [ListGlossaries](#list-glossaries) methods return the glossary ID.\n```\n$HOME/go/bin/grpcurl -plaintext -d '{\"name\": \"projects/test-project/glossaries/GLOSSARY_ID\"}' ENDPOINT google.cloud.translation.v3.TranslationService/GetGlossary\n```\n```\ncurl -X GET http://ENDPOINT/v3/projects/test-project/glossaries/GLOSSARY_ID\n```\nUse the following Python code sample to get information about a specific glossary:\n```\nfrom google.cloud import translate_v3 as translatedef get_glossary(project_id=\"PROJECT_ID\", glossary_id=\"GLOSSARY_ID\"):\u00a0 \u00a0 \"\"\"Get a particular glossary based on the glossary ID.\"\"\"client = translate.TranslationServiceClient()name = client.glossary_path(project_id, glossary_id)response = client.get_glossary(name=name)print(u\"Glossary name: {}\".format(response.name))print(u\"Input URI: {}\".format(response.input_config.s3_source.input_uri))\n```\n## Delete a glossary\nThe `DeleteGlossary` method deletes a glossary. If the glossary doesn't exist, the `NOT_FOUND` value is returned. To call the `DeleteGlossary` method, specify your project ID and the [endpoint](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-api-status) .\n```\n$HOME/go/bin/grpcurl -plaintext -d '{\"name\": \"projects/PROJECT_ID/glossaries/GLOSSARY_ID\"}' ENDPOINT google.cloud.translation.v3.TranslationService/DeleteGlossary\n```\n```\ncurl -X POST http://ENDPOINT/v3/projects/PROJECT_ID/glossaries/GLOSSARY_ID -d '{\"name\": \"projects/PROJECT_ID/glossaries/GLOSSARY_ID\"}'\n```\n## List glossaries\nThe `ListGlossaries` method returns a list of glossary IDs in a project. If the project doesn't exist, the `NOT_FOUND` value is returned. To call the `ListGlossaries` method, specify your project ID and the [endpoint](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-api-status) .\n```\n$HOME/go/bin/grpcurl -plaintext -d '{\"parent\": \"projects/PROJECT_ID\", \"page_size\": 10, \"filter\": \"src=en\"}' \u00a0ENDPOINT \u00a0google.cloud.translation.v3.TranslationService/ListGlossaries\n```\n```\ncurl -X GET http://ENDPOINT/v3/projects/PROJECT_ID/glossaries?page_size=10\n```\n## Glossary file and term limits\n| Description          | Limit         |\n|:---------------------------------------------------|:--------------------------------------|\n| Maximum file size         | 10.4 million (10,485,760) UTF-8 bytes |\n| Maximum length of a glossary term     | 1,024 UTF-8 bytes      |\n| Maximum number of glossary resources for a project | 10000         |", "guide": "Documentation"}