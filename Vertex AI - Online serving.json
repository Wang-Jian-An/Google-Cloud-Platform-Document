{"title": "Vertex AI - Online serving", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Online serving\nTo learn more,  run the \"Example Feature Store workflow with sample data\" Jupyter notebook in one of the following  environments: [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/feature_store/sdk-feature-store.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Ffeature_store%2Fsdk-feature-store.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/feature_store/sdk-feature-store.ipynb)\nOnline serving lets you serve feature values for small batches of entities at low latency. For each request, you can only serve feature values from a single entity type. Vertex AI Feature Store (Legacy) returns only the latest value of each feature.\nTypically, you use online serving to serve feature values to deployed models for online predictions. For example, you might have a bike-sharing company and you want to predict how long a particular user will rent a bike. You can include real-time inputs from the user and data from the featurestore to perform an online prediction. That way, you can determine resource allocation in real time.\n", "content": "## Null values\nFor online serving results, if the latest value for a feature is null, Vertex AI Feature Store (Legacy) returns the latest non-null value. If there is no previous value, Vertex AI Feature Store (Legacy) returns null.\n## Before you begin\nCheck that the featurestore you're making calls against has an online store (the number of nodes must be greater than `0` ). Otherwise, online serving requests return an error. For more info, see [Managefeaturestores](/vertex-ai/docs/featurestore/managing-featurestores) .\n## Serve values from a single entity\nServe feature values from a single entity for a particular entity type.\nTo get feature values from an entity, send a POST request by using the [featurestores.entityTypes.readFeatureValues](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes/readFeatureValues) method.\nThe following sample gets the latest values for two different features for a particular entity. Note that for the `ids` field you can specify `[\"*\"]` instead of the feature IDs to select all features for the entity.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is created. For example,`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- : ID of the entity to get feature values for.\n- : ID of feature to get values for.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:readFeatureValues\n```\nRequest JSON body:\n```\n{\n \"entityId\": \"ENTITY_ID\",\n \"featureSelector\": {\n \"idMatcher\": {\n  \"ids\": [\"FEATURE_ID_1\", \"FEATURE_ID_2\"]\n }\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:readFeatureValues\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:readFeatureValues\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"header\": {\n \"entityType\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID\",\n \"featureDescriptors\": [  {\n  \"id\": \"FEATURE_ID_1\"\n  },\n  {\n  \"id\": \"FEATURE_ID_2\"\n  }\n ]\n },\n \"entityView\": {\n \"entityId\": \"ENTITY_ID\",\n \"data\": [  {\n  \"value\": {\n   \"VALUE_TYPE_1\": \"FEATURE_VALUE_1\",\n   \"metadata\": {\n   \"generateTime\": \"2019-10-28T15:38:10Z\"\n   }\n  }\n  },\n  {\n  \"value\": {\n   \"VALUE_TYPE_2\": \"FEATURE_VALUE_2\",\n   \"metadata\": {\n   \"generateTime\": \"2019-10-28T15:38:10Z\"\n   }\n  }\n  }\n ]\n }\n}\n```\nTo learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/read_feature_values_sample.py) \n```\nfrom typing import List, Unionfrom google.cloud import aiplatformdef read_feature_values_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 entity_type_id: str,\u00a0 \u00a0 featurestore_id: str,\u00a0 \u00a0 entity_ids: Union[str, List[str]],\u00a0 \u00a0 feature_ids: Union[str, List[str]] = \"*\",):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 my_entity_type = aiplatform.featurestore.EntityType(\u00a0 \u00a0 \u00a0 \u00a0 entity_type_name=entity_type_id, featurestore_id=featurestore_id\u00a0 \u00a0 )\u00a0 \u00a0 my_dataframe = my_entity_type.read(entity_ids=entity_ids, feature_ids=feature_ids)\u00a0 \u00a0 return my_dataframe\n```The client library for Vertex AI is included when you install the Vertex AI SDK for Python. To learn how to install the Vertex AI SDK for Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/install-sdk) . For more information, see the [ Vertex AI SDK for Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/snippets/feature_store_service/read_feature_values_sample.py) \n```\nfrom google.cloud import aiplatformdef read_feature_values_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 featurestore_id: str,\u00a0 \u00a0 entity_type_id: str,\u00a0 \u00a0 entity_id: str,\u00a0 \u00a0 location: str = \"us-central1\",\u00a0 \u00a0 api_endpoint: str = \"us-central1-aiplatform.googleapis.com\",):\u00a0 \u00a0 # The AI Platform services require regional API endpoints, which need to be\u00a0 \u00a0 # in the same region or multi-region overlap with the Feature Store location.\u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 # Initialize client that will be used to create and send requests.\u00a0 \u00a0 # This client only needs to be created once, and can be reused for multiple requests.\u00a0 \u00a0 client = aiplatform.gapic.FeaturestoreOnlineServingServiceClient(\u00a0 \u00a0 \u00a0 \u00a0 client_options=client_options\u00a0 \u00a0 )\u00a0 \u00a0 entity_type = f\"projects/{project}/locations/{location}/featurestores/{featurestore_id}/entityTypes/{entity_type_id}\"\u00a0 \u00a0 feature_selector = aiplatform.gapic.FeatureSelector(\u00a0 \u00a0 \u00a0 \u00a0 id_matcher=aiplatform.gapic.IdMatcher(ids=[\"age\", \"gender\", \"liked_genres\"])\u00a0 \u00a0 )\u00a0 \u00a0 read_feature_values_request = aiplatform.gapic.ReadFeatureValuesRequest(\u00a0 \u00a0 \u00a0 \u00a0 entity_type=entity_type, entity_id=entity_id, feature_selector=feature_selector\u00a0 \u00a0 )\u00a0 \u00a0 read_feature_values_response = client.read_feature_values(\u00a0 \u00a0 \u00a0 \u00a0 request=read_feature_values_request\u00a0 \u00a0 )\u00a0 \u00a0 print(\"read_feature_values_response:\", read_feature_values_response)\n```Before trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/ReadFeatureValuesSample.java) \n```\nimport com.google.cloud.aiplatform.v1.EntityTypeName;import com.google.cloud.aiplatform.v1.FeatureSelector;import com.google.cloud.aiplatform.v1.FeaturestoreOnlineServingServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreOnlineServingServiceSettings;import com.google.cloud.aiplatform.v1.IdMatcher;import com.google.cloud.aiplatform.v1.ReadFeatureValuesRequest;import com.google.cloud.aiplatform.v1.ReadFeatureValuesResponse;import java.io.IOException;import java.util.Arrays;import java.util.List;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;public class ReadFeatureValuesSample {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 // Feature Store ID\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 // Entity Type ID\u00a0 \u00a0 String entityTypeId = \"YOUR_ENTITY_TYPE_ID\";\u00a0 \u00a0 // Entity ID\u00a0 \u00a0 String entityId = \"YOUR_ENTITY_ID\";\u00a0 \u00a0 // Features to read with batch or online serving.\u00a0 \u00a0 List<String> featureSelectorIds = Arrays.asList(\"title\", \"genres\", \"average_rating\");\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 int timeout = 300;\u00a0 \u00a0 readFeatureValuesSample(\u00a0 \u00a0 \u00a0 \u00a0 project,\u00a0 \u00a0 \u00a0 \u00a0 featurestoreId,\u00a0 \u00a0 \u00a0 \u00a0 entityTypeId,\u00a0 \u00a0 \u00a0 \u00a0 entityId,\u00a0 \u00a0 \u00a0 \u00a0 featureSelectorIds,\u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 endpoint,\u00a0 \u00a0 \u00a0 \u00a0 timeout);\u00a0 }\u00a0 /*\u00a0 \u00a0* Reads Feature values of a specific entity of an EntityType.\u00a0 \u00a0* See: https://cloud.google.com/vertex-ai/docs/featurestore/serving-online\u00a0 \u00a0*/\u00a0 public static void readFeatureValuesSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 String entityTypeId,\u00a0 \u00a0 \u00a0 String entityId,\u00a0 \u00a0 \u00a0 List<String> featureSelectorIds,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint,\u00a0 \u00a0 \u00a0 int timeout)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 FeaturestoreOnlineServingServiceSettings featurestoreOnlineServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreOnlineServingServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreOnlineServingServiceClient featurestoreOnlineServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreOnlineServingServiceClient.create(featurestoreOnlineServiceSettings)) {\u00a0 \u00a0 \u00a0 ReadFeatureValuesRequest readFeatureValuesRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ReadFeatureValuesRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEntityType(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EntityTypeName.of(project, location, featurestoreId, entityTypeId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEntityId(entityId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFeatureSelector(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FeatureSelector.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setIdMatcher(IdMatcher.newBuilder().addAllIds(featureSelectorIds)))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 ReadFeatureValuesResponse readFeatureValuesResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreOnlineServiceClient.readFeatureValues(readFeatureValuesRequest);\u00a0 \u00a0 \u00a0 System.out.println(\"Read Feature Values Response\" + readFeatureValuesResponse);\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/read-feature-values-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const entityTypeId = 'YOUR_ENTITY_TYPE_ID';// const entityId = 'ENTITY_ID_TO_SERVE';// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreOnlineServingServiceClient} =\u00a0 require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreOnlineServingServiceClient =\u00a0 new FeaturestoreOnlineServingServiceClient(clientOptions);async function readFeatureValues() {\u00a0 // Configure the entityType resource\u00a0 const entityType = `projects/${project}/locations/${location}/featurestores/${featurestoreId}/entityTypes/${entityTypeId}`;\u00a0 const featureSelector = {\u00a0 \u00a0 idMatcher: {\u00a0 \u00a0 \u00a0 ids: ['age', 'gender', 'liked_genres'],\u00a0 \u00a0 },\u00a0 };\u00a0 const request = {\u00a0 \u00a0 entityType: entityType,\u00a0 \u00a0 entityId: entityId,\u00a0 \u00a0 featureSelector: featureSelector,\u00a0 };\u00a0 // Read Feature Values Request\u00a0 const [response] =\u00a0 \u00a0 await featurestoreOnlineServingServiceClient.readFeatureValues(request, {\u00a0 \u00a0 \u00a0 timeout: Number(timeout),\u00a0 \u00a0 });\u00a0 console.log('Read feature values response');\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}readFeatureValues();\n```\n## Serve values from multiple entities\nServe feature values from one or more entities for a particular entity type. For better performance, use the `streamingReadFeatureValues` method instead of sending parallel requests to the `readFeatureValues` method.\nTo get feature values from multiple entities, send a POST request by using the [featurestores.entityTypes.streamingReadFeatureValues](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes/streamingReadFeatureValues) method.\nThe following sample gets the latest values for two different features for two different entities. Note that for the `ids` field you can specify `[\"*\"]` instead of the feature IDs to select all features for the entity.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is created. For example,`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- : ID of the entity to get feature values for.\n- : ID of feature to get values for.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:streamingReadFeatureValues\n```\nRequest JSON body:\n```\n{\n \"entityIds\": [\"ENTITY_ID_1\", \"ENTITY_ID_2\"],\n \"featureSelector\": {\n \"idMatcher\": {\n  \"ids\": [\"FEATURE_ID_1\", \"FEATURE_ID_2\"]\n }\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:streamingReadFeatureValues\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:streamingReadFeatureValues\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n[{\n \"header\": {\n \"entityType\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID\",\n \"featureDescriptors\": [  {\n  \"id\": \"FEATURE_ID_1\"\n  },\n  {\n  \"id\": \"FEATURE_ID_2\"\n  }\n ]\n }\n},\n{\n \"entityView\": {\n \"entityId\": \"ENTITY_ID_1\",\n \"data\": [  {\n  \"value\": {\n   \"VALUE_TYPE_1\": \"FEATURE_VALUE_A\",\n   \"metadata\": {\n   \"generateTime\": \"2019-10-28T15:38:10Z\"\n   }\n  }\n  },\n  {\n  \"value\": {\n   \"VALUE_TYPE_2\": \"FEATURE_VALUE_B\",\n   \"metadata\": {\n   \"generateTime\": \"2019-10-28T15:38:10Z\"\n   }\n  }\n  }\n ]\n }\n},\n{\n \"entityView\": {\n \"entityId\": \"ENTITY_ID_2\",\n \"data\": [  {\n  \"value\": {\n   \"VALUE_TYPE_1\": \"FEATURE_VALUE_C\",\n   \"metadata\": {\n   \"generateTime\": \"2019-10-28T21:21:37Z\"\n   }\n  }\n  },\n  {\n  \"value\": {\n   \"VALUE_TYPE_2\": \"FEATURE_VALUE_D\",\n   \"metadata\": {\n   \"generateTime\": \"2019-10-28T21:21:37Z\"\n   }\n  }\n  }\n ]\n }\n}]\n```\nYou can [install](/vertex-ai/docs/start/client-libraries) and use the following Vertex AI client libraries to call the Vertex AI API. Cloud Client Libraries provide an optimized developer experience by using the natural conventions and styles of each supported language.- [Vertex AI SDK for Python](/python/docs/reference/aiplatform/latest) \n- [Java](/java/docs/reference/google-cloud-aiplatform/latest/overview) \n- [Node.js](/nodejs/docs/reference/aiplatform/latest) \n## What's next\n- Learn how to [batch ingest feature values](/vertex-ai/docs/featurestore/ingesting-batch) .\n- Learn how to serve features through [batch serving](/vertex-ai/docs/featurestore/serving-batch) .\n- View the Vertex AI Feature Store (Legacy) [online servingquotas](/vertex-ai/quotas#featurestore) .\n- [Troubleshoot](/vertex-ai/docs/general/troubleshooting#feature-store) common Vertex AI Feature Store (Legacy) issues.", "guide": "Vertex AI"}