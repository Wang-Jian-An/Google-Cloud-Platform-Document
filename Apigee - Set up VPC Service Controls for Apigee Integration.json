{"title": "Apigee - Set up VPC Service Controls for Apigee Integration", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Set up VPC Service Controls for Apigee Integration\n**Announcement:** Application Integration is now available for your Google Cloud project. You can now use both Apigee Integration and Application Integration within the same Google Cloud project. [Learn more](/apigee/docs/api-platform/integration/using-application-integration)\n**Note:** Before proceeding with the setup, contact [Apigee support](/apigee/support) to confirm the availability of VPC Service Controls for Apigee Integration.\nVPC Service Controls lets you define a security perimeter around the Apigee Integration Google Cloud service. With the security perimeter around your service, you can constrain data within a VPC and mitigate data exfiltration risks. If you are not already familiar with VPC Service Controls, it is recommended that you go through the following information:\n- [Overview of VPC Service Controls](/vpc-service-controls/docs/overview) \n- [Service perimeter details and configuration](/vpc-service-controls/docs/service-perimeters) \n- [Grant access to VPC Service Controls](/vpc-service-controls/docs/access-control) \nThis document describes how to set up a VPC Service Controls perimeter for the Apigee Integration service. After you have set up the perimeter, you can configure egress and ingress policies that determine what other Google Cloud services can access the Apigee Integration service (integrations.googleapis.com) and conversely what services the Apigee Integration service can access.\n", "content": "## Before you begin\nEnsure that you have the required permissions to configure service perimeters. To view a list of IAM roles required to configure VPC Service Controls, see [Access control with IAM](/vpc-service-controls/docs/access-control) in the VPC Service Controls documentation.\n## Create a VPC service perimeter\nTo create a VPC service perimeter you can use either the `Google Cloud console` , or the `gcloud` command, or the [accessPolicies.servicePerimeters.create](/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters/create) API. For more information, see [Create a service perimeter](/vpc-service-controls/docs/create-service-perimeters#create-perimeter) .\n### Example: Create a VPC service perimeter and configure an egress policy\nThis example shows you how to use the `gcloud` command to create a VPC service perimeter and configure an egress policy. The egress policy in this example restricts your integration to use resources only from a specific project.\nTo create a VPC service perimeter with an egress policy, perform the following steps:\n- Set up a default access policy.An access policy is an organization-wide container for access levels and service perimeters. For information about setting a default access policy or getting an access policy name, see [Managing an access policy](/access-context-manager/docs/manage-access-policy#set-default) .\n- Create a new egress policy file by name`vpcsc-egress.yaml`with the following  egress rule:```\n- egressTo:\u00a0 \u00a0 operations:\u00a0 \u00a0 # service for which the egress policy should be applied\u00a0 \u00a0 - serviceName: integrations.googleapis.com\u00a0 \u00a0 \u00a0 methodSelectors:\u00a0 \u00a0 \u00a0 # methods in the service for which the egress policy should be applied\u00a0 \u00a0 \u00a0 # * denotes all the methods\u00a0 \u00a0 \u00a0 - method: \"*\"\u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 # resources which the service methods can access\u00a0 \u00a0 \u00a0 - projects/test-vpcsc-egress-project\u00a0 egressFrom:\u00a0 \u00a0 # identities which can call the service methods\u00a0 \u00a0 identityType: ANY_IDENTITY\n```The sample egress rule allows all the methods of the `integrations.googleapis.com` service to access resources only in the `test-vpcsc-egress-project` which is outside of the perimeter. To learn more about specifying the egress rules, see [Egress rules reference](/vpc-service-controls/docs/ingress-egress-rules#egress-rules-reference) . **Note:** You can configure the egress  rules by using a`JSON`or a`YAML`file. This example uses a`.yaml`file.\n- Create a new VPC service perimeter with the egress file.The following command creates a VPC service perimeter by name integrationPerimeter:```\ngcloud access-context-manager perimeters create integrationPerimeter \\\u00a0 \u00a0 --title=\"Integration Perimeter\" \\\u00a0 \u00a0 --resources=projects/12345 \\\u00a0 \u00a0 --restricted-services=integrations.googleapis.com \\\u00a0 \u00a0 --egress-policies=vpcsc-egress.yaml\n```This command creates a new perimeter named `integrationPerimeter` that includes the project with project number `12345` , restricts the `integrations.googleapis.com` API, and adds an egress policy defined in the `vpcsc-egress.yaml` file.\n### Add egress policy to an existing service perimeter\nTo add an egress policy to an existing service perimeter, use the [gcloud access-context-manager perimeters update](/sdk/gcloud/reference/access-context-manager/perimeters/update) command. For example, the following command adds an egress policy defined in the `vpcsc-egress.yaml` file to an existing service perimeter named `integrationPerimeter` :\n```\ngcloud access-context-manager perimeters update integrationPerimeter\u00a0 \u00a0 --set-egress-policies=vpcsc-egress.yaml\n```\nSimilar to an egress policy, you can also define an ingress policy. To learn more about specifying ingress rules, see [Ingress rules reference](/vpc-service-controls/docs/ingress-egress-rules#ingress-rules-reference) .\n## Verify your perimeter\nTo verify the perimeter, use the [gcloud access-context-manager perimeters describe PERIMETER_NAME](/sdk/gcloud/reference/access-context-manager/perimeters/describe) command. For example, the following command describes the `integrationPerimeter` perimeter:\n```\ngcloud access-context-manager perimeters describe integrationPerimeter\n```\nFor more information about managing service perimeters, see [Managing service perimeters](/vpc-service-controls/docs/manage-service-perimeters#list-and-describe) .\n## Condiderations\nIf you have enabled VPC service perimeter for the Apigee Integration service, you will not be able to use the following tasks in your integrations:\n- [Apps Script task](/apigee/docs/api-platform/integration/run-apps-script-task) \n- [Call REST Endpoint task](/apigee/docs/api-platform/integration/call-rest-endpoint-task) \n- [Cloud function task](/apigee/docs/api-platform/integration/run-cloud-function-task) ## What's next\n[VPC Service Controls](/vpc-service-controls/docs/overview)", "guide": "Apigee"}