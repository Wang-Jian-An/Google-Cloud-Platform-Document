{"title": "Cloud Architecture Center - Deploying a Cloud CDN origin authentication proxy", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Deploying a Cloud CDN origin authentication proxy\nLast reviewed 2021-09-16 UTC\nThis tutorial shows you how to deploy Cloud CDN with a private\n [Amazon Simple Storage Service (S3) origin bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingBucket.html) \n. The deployment uses\n [Cloud Run](/run/docs) \nand an authentication proxy to sign CDN cache fill requests and forward them to the Amazon S3 origin bucket. This tutorial is intended for people who deploy and manage Cloud CDN infrastructure. It assumes that you're familiar with CDN concepts, Cloud CDN, Amazon S3, and\n [Terraform](https://www.terraform.io/docs/index.html) \n.\nThe following architectural diagram shows the components used in this tutorial. An [external Application Load Balancer](/load-balancing/docs/https) is created with a Cloud CDN-enabled backend service. The backend service is connected to a Cloud Run service running the authentication proxy. The authentication proxy performs [AWS Signature Version 4](https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html) signing, using credentials stored in [Secret Manager](/secret-manager/docs) . The authentication proxy then forwards signed requests to the origin bucket and returns the response to the Cloud CDN backend, which delivers the response to the client.The following request flow diagram shows the data flow of a client performing two requests for `image.png` from the CDN endpoint. In the first client request, the CDN doesn't have `image.png` in its cache and performs a cache fill using the Cloud Run authentication proxy. In the second client request, the CDN has `image.png` in its cache and returns it to the client.", "content": "## Objectives\n- Provision the Cloud CDN authentication proxy.\n- Test the Cloud CDN authentication proxy.\n- Validate the Cloud CDN cache.\n## Costs\nIn this document, you use the following billable components of Google Cloud:- [Cloud Build](/build/pricing) \n- [Cloud CDN](/cdn/pricing) \n- [Cloud Load Balancing](/vpc/network-pricing#lb) \n- [Cloud Logging](/stackdriver/pricing) \n- [Cloud Run](/run/pricing) \n- [Container Registry](/container-registry/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .\nThe solution also requires an Amazon S3 bucket to serve as the CDN origin. Optionally, for testing, the deployment can provide a Cloud Storage bucket to simulate an Amazon S3 bucket.## Before you begin\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n## Preparing the environmentYou can complete this tutorial using [Cloud Shell](/shell/docs) or your local host. Cloud Shell has Terraform pre-installed and authenticates with Google Cloud.\n- Clone the GitHub source repository in Cloud Shell. [](https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2FGoogleCloudPlatform%2Fcdn-auth-proxy.git&cloudshell_git_branch=main) Cloud Shell is launched in a separate browser tab, and the    GitHub source repository is cloned into the `$HOME/cloudshell_open` directory of your Cloud Shell    environment. **Note:** The Terraform CLI is pre-installed in    Cloud Shell, and is set up to authenticate with    Google Cloud.\nComplete the following steps:- [   Install Terraform](https://learn.hashicorp.com/tutorials/terraform/install-cli) version 0.14.11 or later.\n- Clone the GitHub source repository.`git clone https://github.com/GoogleCloudPlatform/cdn-auth-proxy.git`\n- To change directories to the directory containing the cloned    source code for this solution, use the following command:`cd cdn-auth-proxy`\n## Provision the CDN authentication proxy\nIn this tutorial, you use [Terraform](https://www.terraform.io/) to configure and provision the solution. In this section, you configure Terraform variables and have Terraform provision the following resources:- External HTTP(S) Load Balancer\n- A backend [Serverless network endpoint group (NEG)](/load-balancing/docs/negs/serverless-neg-concepts) \n- Cloud Run service running the authentication proxy\n- Secret Manager secrets\nThis solution deploys an external Application Load Balancer. A production deployment would deploy an HTTPS frontend and the required SSL certificates. For more information, see [SSL certificates overview](/load-balancing/docs/ssl-certificates) .\n## Create the terraform.tfvars file\nTo demonstrate and test the authentication proxy, you need a storage bucket to serve as the CDN content origin. You can configure the deployment to use an Amazon S3 bucket, or to create a Cloud Storage bucket to simulate an Amazon S3 bucket. You configure the deployment by setting Terraform variables in the `terraform.tfvars` file.To use the Amazon S3 bucket as the origin, follow the instructions in the [Use an Amazon S3 bucket as the origin](#use-an-amazon-s3-bucket-as-the-cdn-content-origin) section. To use Terraform to provision a Cloud Storage bucket to serve as the Amazon S3 origin bucket, follow the instructions in the [Use Cloud Storage as the CDN content origin](#use-cloud-storage-as-the-cdn-content-origin) section.Choose one method or the other\u2014not both.\n### Use an Amazon S3 bucket as the CDN content origin- In Cloud Shell, copy the Amazon S3 Terraform template:```\ncp docs/terraform.tfvars.example-s3 terraform.tfvars\n```\n- Edit the `terraform.tfvars` file and replace the following variables:- **PROJECT_ID:** The Google Cloud project ID used to deploy the authentication proxy\n- **REGION:** The Google Cloud region in which the authentication proxy is deployed\n- **S3_ORIGIN_BUCKET_NAME** : Your Amazon S3 origin bucket name\n- **S3_ORIGIN_BUCKET_REGION** : The Amazon S3 region in which your origin bucket resides\n- **ACCESS_KEY** and **ACCESS_SECRET** : AWS IAM credentials with`s3:GetObject`permission on objects in the Amazon S3 origin bucket\n- To save your changes, press `Control+S` (or `Command+S` on Mac).\n- Upload the [reference image](https://github.com/GoogleCloudPlatform/cdn-auth-proxy/raw/main/docs/image.png) to the Amazon S3 bucket and name the object `image.png` .If you are unfamiliar with uploading files to an Amazon S3 bucket, see [Uploading objects](https://docs.aws.amazon.com/AmazonS3/latest/userguide/upload-objects.html) .\nContinue to the [Provision Terraform resources](#provision_terraform_resources) section.\n### Use Cloud Storage as the CDN content origin\nIf you are using an Amazon S3 bucket, skip this section.- In Cloud Shell, copy the Cloud Storage Terraform template:```\ncp docs/terraform.tfvars.example-gcs terraform.tfvars\n```\n- Edit the `terraform.tfvars` file and set the following variables. Leave the `gcs_interoperability = true` setting unchanged.- **PROJECT_ID:** The Google Cloud project ID used to deploy the authentication proxy\n- **REGION:** The Google Cloud region in which the authentication proxy is deployed\n- To save your changes, press `Control+S` (or `Command+S` on Mac).\n## Provision Terraform resources\nIn this section, you initialize Terraform, plan the Terraform deployment, and apply the deployment plan.- In Cloud Shell, initialize Terraform:```\nterraform init\n```The previous command instructs Terraform to parse the configuration and install the necessary Terraform provider plugins. The output resembles the following:```\nInitializing provider plugins...\n- Finding hashicorp/google versions matching \"~> 3.61\"...\n\u2026\n- Installed hashicorp/time v0.7.2 (signed by HashiCorp)\n\u2026\nTerraform has been successfully initialized!\n\u2026\n```\n- Plan the Terraform deployment:```\nterraform plan -out=tfplan\n```The `terraform plan` command does the following:- Parses the Terraform configuration, building a list of resources to provision.\n- Refreshes the current state of resources already provisioned in Google Cloud.\n- Creates a plan to make the currently provisioned resources match the parsed configuration.\nThe output is similar to the following. It shows what resources to add, change, or destroy.```\n\u2026\nPlan: 26 to add, 0 to change, 0 to destroy.\n-----------------------------------------------------------------------\nThis plan was saved to: tfplan\nTo perform exactly these actions, run the following command to apply:\n terraform apply \"tfplan\"\n```\n- Apply the Terraform plan:```\nterraform apply tfplan\n```The `terraform apply` command tells Terraform to execute the plan and provision Google Cloud resources. This step takes several minutes to complete. When the `terraform apply` command finishes, it outputs details of the deployment along with an `Outputs` section. The `Outputs` section includes useful configuration values.The output is similar to the following:```\nApply complete! Resources: 26 added, 0 changed, 0 destroyed.\nThe state of your infrastructure has been saved to the path\nFollowing. This state is required to modify and destroy your\ninfrastructure, so keep it safe. To inspect the complete state\nuse the `terraform show` command.\nState path: terraform.tfstate\nOutputs:\nauthn_proxy_url = https://authn-proxy-u1af2bc3de-fg.a.run.app\ncdn_public_ip = 34.120.78.255\nforwarding_rule_name = authn-proxy-lb\nproject_id = cdn-test-12345\nproject_number = 123456789012\nregion = us-central1\n```\n## Test the Cloud CDN authentication proxy\nIn this section, you test the Cloud CDN authentication proxy. To perform the test, you run multiple [curl](https://curl.se/) commands to request an object from Cloud CDN.\n### Set environment variables\nIn Cloud Shell, set the `S3_OBJECT` environment variable to the name of the object you stored in the origin bucket. If you are using the Terraform-created Cloud Storage bucket, set the variable name to `image.png` .```\nexport S3_OBJECT=\"image.png\"\n```\n### Use curl to make an object request\nThe `curl` command generates HTTP requests to the public IP address assigned to the provisioned external Application Load Balancer.- In Cloud Shell, request the object:```\ncurl -w 'Time:\\t%{time_total} s\\n' \\-s -O -D - \"http://$(terraform output -raw cdn_public_ip)/$S3_OBJECT\"\n```- The`-w Time:\\t%{total_time} s\\n`option prints the total request time in seconds.\n- The`-s`option silences the download progress meter.\n- The`-O`option writes the output with the object's remote name.\n- The`-D`option outputs the HTTP response headers to`stdout`.\nThe output resembles the following:```\nHTTP/1.1 404 Not Found\nContent-Type: text/html; charset=UTF-8\nReferrer-Policy: no-referrer\nContent-Length: 1570\nDate: Thu, 01 Apr 2021 05:40:50 GMT\nTime: 0.004059 s\n```This output example returned an `HTTP/1.1 404 Not Found` response. That's because even though Terraform provisioned the external Application Load Balancer, it took time to begin serving traffic.\n- Repeat the `curl` command until you receive an `HTTP/1.1 200 OK` response.```\ncurl -w 'Time:\\t%{time_total} s\\n' \\\u00a0 -s -O -D - \"http://$(terraform output -raw cdn_public_ip)/$S3_OBJECT\"\n```After receiving an `HTTP/1.1 200 OK` response, the output resembles the following:```\nHTTP/1.1 200 OK\nlast-modified: Wed, 24 Mar 2021 02:08:33 GMT\netag: \"383d9cd6cafb4c40e15356ad54689d1f\"\naccept-ranges: bytes\ncontent-type: image/png\nX-Cloud-Trace-Context: 0ad8875a80df7ca9bd2e0c99e3786a72;o=1\nDate: Thu, 01 Apr 2021 05:42:58 GMT\nContent-Length: 2641\nVia: 1.1 google\nCache-Control: public,max-age=86400\nTime: 2.092146 s\n```\nThe first successful response doesn't have an `Age` header. It's also a Cloud CDN cache miss.To fulfill the request, Cloud CDN requested the object from the authentication proxy. The request triggered Cloud Run to start the authentication proxy. The authentication proxy signed the request, forwarded the request to the origin bucket, and returned the response to Cloud CDN. This request took ~2 seconds to complete.\n### Investigate the CDN cache- In Cloud Shell, make another request for the object:```\ncurl -w 'Time:\\t%{time_total} s\\n' \\\u00a0 -s -O -D - \"http://$(terraform output -raw cdn_public_ip)/$S3_OBJECT\"\n```The output resembles the following:```\nHTTP/1.1 200 OK\nlast-modified: Wed, 24 Mar 2021 02:08:33 GMT\netag: \"383d9cd6cafb4c40e15356ad54689d1f\"\naccept-ranges: bytes\ncontent-type: image/png\nX-Cloud-Trace-Context: f11fa095c8e78a1fb906f421aa631b86;o=1\nDate: Thu, 01 Apr 2021 05:44:11 GMT\nServer: Google Frontend\nContent-Length: 2641\nVia: 1.1 google\nCache-Control: public,max-age=86400\nTime: 0.251068 s\n```In this example, there was no `Age` header. Your response might have one. Google routes client requests to the Cloud CDN serving infrastructure closest to the client. The Cloud CDN serving infrastructure is made up of multiple serving instances. In this example, the Cloud CDN instance serving the request was different from the instance that served the request in the previous example. That means it required a cache fill.If your response contained the `Age` header, it means Cloud CDN served the request from the same instance that served the first request.Even though the request displayed in the previous output sample was a cache miss, the request was faster, taking only ~0.25 s. The response was faster because the authentication proxy was already running.\n- Continue requesting the object until you get a response that contains an `Age` header.```\ncurl -w 'Time:\\t%{time_total} s\\n' \\\u00a0 -s -O -D - \"http://$(terraform output -raw cdn_public_ip)/$S3_OBJECT\"\n```The output contains an `Age` header and resembles the following:```\nHTTP/1.1 200 OK\nLast-Modified: Wed, 24 Mar 2021 02:08:33 GMT\nETag: \"383d9cd6cafb4c40e15356ad54689d1f\"\naccept-ranges: bytes\nContent-Type: image/png\nX-Cloud-Trace-Context: 3ca83775cf581b643ed128a50e1f2bcf\nDate: Thu, 01 Apr 2021 05:46:21 GMT\nServer: Google Frontend\nContent-Length: 2641\nVia: 1.1 google\nAge: 5\nCache-Control: public,max-age=86400\nTime: 0.041623 s\n```The request was served in ~0.04 seconds. The `Age: 5` response shows that the object was served from the Cloud CDN cache, and that it's been in the cache for 5 seconds.\n## View logging requests with Cloud CDN logging\nThe client can determine whether the response is cached by looking at the `Age` header. To view the disposition of requests to Cloud CDN, you can use [Cloud CDN logging](/cdn/docs/logging) . **Note:** To reduce logging costs, you can configure Cloud CDN to log a randomly sampled fraction of all requests. For more information, see [External Application Load Balancer logging and monitoring](/load-balancing/docs/https/https-logging-monitoring) .- In Cloud Shell, generate thousands of requests. Those requests generate Cloud CDN logs.```\nhey -n 5000 \"http://$(terraform output -raw cdn_public_ip)/$S3_OBJECT\"\n```The output resembles the following:```\nSummary:\n Total:  0.2857 secs\n Slowest:  0.1829 secs\n Fastest:  0.0005 secs\n Average:  0.0020 secs\n Requests/sec: 17503.7307\n Total data: 13205000 bytes\n Size/request: 2641 bytes\nResponse time histogram:\n 0.000 [1]  |\n 0.019 [4972] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\n 0.037 [0]  |\n 0.055 [0]  |\n 0.073 [0]  |\n 0.092 [0]  |\n 0.110 [0]  |\n 0.128 [0]  |\n 0.146 [0]  |\n 0.165 [0]  |\n 0.183 [27] |\nLatency distribution:\n 10% in 0.0006 secs\n 25% in 0.0007 secs\n 50% in 0.0009 secs\n 75% in 0.0011 secs\n 90% in 0.0017 secs\n 95% in 0.0024 secs\n 99% in 0.0060 secs\nDetails (average, fastest, slowest):\n DNS+dialup: 0.0000 secs, 0.0005 secs, 0.1829 secs\n DNS-lookup: 0.0000 secs, 0.0000 secs, 0.0000 secs\n req write: 0.0000 secs, 0.0000 secs, 0.0036 secs\n resp wait: 0.0018 secs, 0.0004 secs, 0.1804 secs\n resp read: 0.0001 secs, 0.0000 secs, 0.0072 secs\nStatus code distribution:\n [200] 5000 responses\n```The [hey](https://github.com/rakyll/hey) HTTP load generation tool generated 5,000 object requests.The `hey` command collected request statistics and created a response-time histogram and latency distribution.The `hey` command also indicated that all 5,000 requests completed successfully, that all requests were processed in ~0.29 seconds, and that the ninety-ninth percentile latency was 0.0060 seconds.To retrieve details on the most recent Cloud CDN cache hit, you use Cloud Logging in the next step.\n- Get the most recent Cloud CDN request log from the `authn-proxy-lb` proxy server:```\ngcloud logging read \\\u00a0 \"resource.type=http_load_balancer AND \\\u00a0 resource.labels.forwarding_rule_name=authn-proxy-lb \\\u00a0 jsonPayload.statusDetails=response_from_cache\" \\\u00a0 \u00a0 --limit=1 --format=json --project=\"$(terraform output -raw project_id)\"\n```For a cache hit, Cloud CDN logging sets the `jsonPayload.statusDetails` field to either `byte_range_caching` or `response_from_cache` . Because the `hey` command requested the whole object, you can filter on the `response_from_cache` value.The command also uses the `gcloud` `logging read` parameter to output the most recent Cloud CDN log generated by `authn-proxy-lb` and with a `response_from_cache` status.The output resembles the following:```\n[ {\n \"httpRequest\": {\n  \"cacheHit\": true,\n  \"cacheLookup\": true,\n  \"latency\": \"0.000142s\",\n  \"remoteIp\": \"35.238.224.141\",\n  \"requestMethod\": \"GET\",\n  \"requestSize\": \"120\",\n  \"requestUrl\": \"http://34.117.126.218/image.png\",\n  \"responseSize\": \"2998\",\n  \"status\": 200,\n  \"userAgent\": \"hey/0.0.1\"\n },\n \"insertId\": \"e5kteqfen7kh2\",\n \"jsonPayload\": {\n  \"@type\": \"type.googleapis.com/google.cloud.loadbalancing.type.LoadBalancerLogEntry\",\n  \"cacheId\": \"CBF-6041a7\",\n  \"statusDetails\": \"response_from_cache\"\n },\n \"logName\": \"projects/cdn-test-306000/logs/requests\",\n \"receiveTimestamp\": \"2021-04-01T06:00:11.829756617Z\",\n \"resource\": {\n  \"labels\": {\n  \"backend_service_name\": \"\",\n  \"forwarding_rule_name\": \"authn-proxy-lb\",\n  \"project_id\": \"cdn-test-306000\",\n  \"target_proxy_name\": \"authn-proxy-http-proxy\",\n  \"url_map_name\": \"authn-proxy-urlmap\",\n  \"zone\": \"global\"\n  },\n  \"type\": \"http_load_balancer\"\n },\n \"severity\": \"INFO\",\n \"spanId\": \"8430d1b40bd5a872\",\n \"timestamp\": \"2021-04-01T06:00:11.408368Z\",\n \"trace\": \"projects/cdn-test-306000/traces/1996e8dad053bc49c9a6724acd524cc2\"\n }\n]\n```### View the Cloud Logging console- Open the [Logs Explorer](https://console.cloud.google.com/logs?service=network.googleapis.com&_ga=2.109014850.174894598.1594052094-1377110853.1571418116) .\n- Replace the current query with the following:```\nresource.type=\"http_load_balancer\"resource.labels.forwarding_rule_name=\"authn-proxy-lb\"jsonPayload.statusDetails=\"response_from_cache\"\n```\n- Click **Run Query** .## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n## What's next\n- [SSL certificates overview | Cloud Load Balancing](/load-balancing/docs/ssl-certificates) \n- [Caching overview | Cloud CDN](/cdn/docs/caching) \n- [Content delivery best practices | Cloud CDN](/cdn/docs/best-practices) \n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .", "guide": "Cloud Architecture Center"}