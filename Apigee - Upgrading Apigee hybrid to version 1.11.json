{"title": "Apigee - Upgrading Apigee hybrid to version 1.11", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Upgrading Apigee hybrid to version 1.11\nThis procedure covers upgrading from Apigee hybrid version 1.10.x to Apigee hybrid version 1.11.1 and from previous releases of hybrid 1.11.x to version 1.11.1.\nUse the same procedures for minor version upgrades (for example version 1.10  to 1.11) and for patch release upgrades (for example  1.11.0 to 1.11.1).\nIf you are upgrading from Apigee hybrid version 1.9 or older, you must first upgrade to  hybrid version 1.10 before upgrading to version 1.11.1.  See the instructions for [Upgrading Apigee hybrid to version 1.10](/apigee/docs/hybrid/v1.10/upgrade) .\n", "content": "## \n Upgrading to version 1.11.1 overview\nUpgrading to Apigee hybrid version 1.11 may require downtime.When upgrading the Apigee controller to version 1.11.1, all Apigee  deployments undergo a rolling restart. To minimize downtime in production hybrid environments  during a rolling restart, make sure you are running at least two clusters (in the same or  different region/data center). Divert all production traffic to a single cluster and take the  cluster you are about to upgrade offline, and then proceed with the upgrade process. Repeat  the process for each cluster.Apigee recommends upgrading all clusters as soon as possible to reduce the chances  of production impact. There is no time limit on when all remaining clusters must be upgraded  after the first one is upgraded. However, until all remaining clusters are upgraded the  following operations  will be impacted:- Cassandra backup and restore cannot work with mixed versions. For example, a backup  from Hybrid 1.10 cannot be used to restore a Hybrid  1.11 instance.\n- Cassandra data streaming will not work between mixed Hybrid versions. Therefore, your  Cassandra clusters cannot scale horizontally.\n- Region expansion and decommissioning will be impacted, because these operations depend on  Cassandra data streaming.\n**Note:** Management plane changes do not need to be suspended during an upgrade. Any required suspension to management plane changes are included in the upgrade instructions.\nThe procedures for upgrading Apigee hybrid are organized in the following sections:\n- [Prepare to upgrade](#prepare) .\n- [Install hybrid runtime version 1.11.1](#install-runtime) .## \n Prerequisites\nThese upgrade instructions assume you have Apigee hybrid version 1.10.x   installed and wish to upgrade it to version 1.11.1. If you are updating from  an earlier version, see the instructions for [Upgrading Apigee hybrid  to version 1.10](/apigee/docs/hybrid/v1.10/upgrade) .\n## Helm charts and apigeectl\nIn version 1.11 you can choose to install and manage Apigee hybrid with either Helm charts or `apigeectl` . Apigee recommends using Helm to manage your installation.### Migrating to v1.11 with Helm from v1.10 with apigeectl\n`apigeectl`- First, migrate your v1.10 installation Helm by following the  instructions in [Migrate Apigee hybrid to Helm charts from apigeectl](/apigee/docs/hybrid/v1.11/helm-migration) .\n- Follow the instructions for Helm charts below to upgrade your installation. **Note:** When upgrading a migrated installation, you will need to insert  a`--force`flag in the`helm upgrade`commands.## \n Prepare to upgrade to version 1.11\n### \n Back up your hybrid installation (recommended)\n- These instructions use the environment variablefor the directory  in your file system where you have installed the Helm charts. If needed, change directory  into this directory and define the variable with the following command:\n```\nexport APIGEE_HELM_CHARTS_HOME=$PWD\necho $APIGEE_HELM_CHARTS_HOME\n``````\nexport APIGEE_HELM_CHARTS_HOME=$PWD\necho $APIGEE_HELM_CHARTS_HOME\n``````\nset APIGEE_HELM_CHARTS_HOME=%CD%\necho %APIGEE_HELM_CHARTS_HOME%\n```\n- Make a backup copy of your version 1.10`$APIGEE_HELM_CHARTS_HOME/`directory. You can use any backup process. For example,  you can create a`tar`file of your entire directory with:```\ntar -czvf $APIGEE_HELM_CHARTS_HOME/../apigee-helm-charts-v1.10-backup.tar.gz $APIGEE_HELM_CHARTS_HOME\n```\n- Back up your Cassandra database following the instructions in [Cassandra backup and recovery](/apigee/docs/hybrid/v1.11/cassandra-backup-overview) .\n- If you are using service cert files (`.json`) in your  overrides to authenticate service accounts, make sure your service account cert files reside in  the correct Helm chart directory. Helm charts cannot read files outside of each chart directory.This step is not needed if you are using Kubernetes secrets or Workload Identity to  authenticate service accounts.The following table shows the destination for each service  account file, depending on your type of installation:\n| Service account  | Default filename     | Helm chart directory      |\n|:--------------------|:------------------------------------|:-------------------------------------------|\n| apigee-cassandra | PROJECT_ID-apigee-cassandra.json | $APIGEE_HELM_CHARTS_HOME/apigee-datastore/ |\n| apigee-logger  | PROJECT_ID-apigee-logger.json  | $APIGEE_HELM_CHARTS_HOME/apigee-telemetry/ |\n| apigee-mart   | PROJECT_ID-apigee-mart.json   | $APIGEE_HELM_CHARTS_HOME/apigee-org/  |\n| apigee-metrics  | PROJECT_ID-apigee-metrics.json  | $APIGEE_HELM_CHARTS_HOME/apigee-telemetry/ |\n| apigee-runtime  | PROJECT_ID-apigee-runtime.json  | $APIGEE_HELM_CHARTS_HOME/apigee-env  |\n| apigee-synchronizer | PROJECT_ID-apigee-synchronizer.json | $APIGEE_HELM_CHARTS_HOME/apigee-env/  |\n| apigee-udca   | PROJECT_ID-apigee-udca.json   | $APIGEE_HELM_CHARTS_HOME/apigee-org/  |\n| apigee-watcher  | PROJECT_ID-apigee-watcher.json  | $APIGEE_HELM_CHARTS_HOME/apigee-org/  |Make a copy of the `apigee-non-prod` service account file in each of the   following directories:\n| Service account | Default filename    | Helm chart directories                                   |\n|:------------------|:--------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| apigee-non-prod | PROJECT_ID-apigee-non-prod.json | $APIGEE_HELM_CHARTS_HOME/apigee-datastore/ $APIGEE_HELM_CHARTS_HOME/apigee-telemetry/ $APIGEE_HELM_CHARTS_HOME/apigee-org/ $APIGEE_HELM_CHARTS_HOME/apigee-env/ |\n- Make sure that your TLS certificate and key files (`.crt`,`.key`, and/or`.pem`) reside in the`$APIGEE_HELM_CHARTS_HOME/apigee-virtualhost/`directory.\nThe examples in these instructions use the following directory structure. Your installation  may be different. Adjust the instructions to the structure of your installation.\n```\nhybrid-v1.11-root-directory/\n\u2514\u2500\u2500 apigeectl/\n \u2514\u2500\u2500 config/\n \u2514\u2500\u2500 plugins/\n \u2514\u2500\u2500 templates/\n \u2514\u2500\u2500 tools/\n\u2514\u2500\u2500 hybrid-files/\n \u2514\u2500\u2500 overrides/\n \u2514\u2500\u2500 service-accounts/\n \u2514\u2500\u2500 certs/\nhybrid-v1.10-root-directory/\n```- These instructions use the environment variablefor the directory  in your file system where you have installed`apigeectl`. If needed, change directory  into your`apigeectl`directory and define the variable with the following command:\n```\nexport APIGEECTL_HOME=$PWD\necho $APIGEECTL_HOME\n``````\nexport APIGEECTL_HOME=$PWD\necho $APIGEECTL_HOME\n``````\nset APIGEECTL_HOME=%CD%\necho %APIGEECTL_HOME%\n```\n- Make a backup copy of your version 1.10`$APIGEECTL_HOME/`directory. For example:```\ntar -czvf $APIGEECTL_HOME/../apigeectl-v1.10-backup.tar.gz $APIGEECTL_HOME\n```\n- Back up your Cassandra database following the instructions in [Cassandra backup and recovery](/apigee/docs/hybrid/v1.11/cassandra-backup-overview) .\n### \n Upgrade your Kubernetes version\nCheck your Kubernetes platform version and if needed, upgrade your Kubernetes platform to a  version that is supported by both hybrid 1.10 and hybrid  1.11. Follow your platform's documentation if you need help.\n## \n Install the hybrid 1.11.1 runtime\n**Caution: ** Do not create new environments during the upgrade process.\n### Prepare for the Helm charts upgradeThis upgrade procedure assumes you are using the same namespace and service accounts for the upgraded installation. If you are making any configuration changes, be sure to reflect those changes in your overrides file before installing the Helm charts.- Pull the Apigee Helm charts.Apigee hybrid charts are hosted in [Google Artifact Registry](/artifacts) :`oci://us-docker.pkg.dev/apigee-release/apigee-hybrid-helm-charts`Using the `pull` command, copy all of the Apigee hybrid Helm  charts to your local storage with the following command:```\nexport CHART_REPO=oci://us-docker.pkg.dev/apigee-release/apigee-hybrid-helm-charts\nexport CHART_VERSION=1.11.1\nhelm pull $CHART_REPO/apigee-operator --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-datastore --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-env --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-ingress-manager --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-org --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-redis --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-telemetry --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-virtualhost --version $CHART_VERSION --untar\n```\n- Install cert-manager if needed.If you need to upgrade your cert-manager version, install the new version with the following command:```\nkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.1/cert-manager.yaml\n```\n- Install the updated Apigee CRDs: **Note:** From this step onwards, all commands should be run under the chart repo root directory. **Note:** This is the only supported method for installing Apigee CRDs. Do not use`kubectl apply`without`-k`, do not omit`--server-side`. **Note:** This step requires elevated cluster permissions.- Use the `kubectl` dry-run feature by running   the following command:```\nkubectl apply -k apigee-operator/etc/crds/default/ --server-side --force-conflicts --validate=false --dry-run=server\n```\n- After validating with the dry-run command, run the following command:```\nkubectl apply -k apigee-operator/etc/crds/default/ --server-side --force-conflicts --validate=false\n```\n- Validate the installation with the`kubectl get crds`command:```\nkubectl get crds | grep apigee\n```Your output should look something like the following:```\napigeedatastores.apigee.cloud.google.com     2023-10-09T14:48:30Z\napigeedeployments.apigee.cloud.google.com     2023-10-09T14:48:30Z\napigeeenvironments.apigee.cloud.google.com     2023-10-09T14:48:31Z\napigeeissues.apigee.cloud.google.com      2023-10-09T14:48:31Z\napigeeorganizations.apigee.cloud.google.com     2023-10-09T14:48:32Z\napigeeredis.apigee.cloud.google.com       2023-10-09T14:48:33Z\napigeerouteconfigs.apigee.cloud.google.com     2023-10-09T14:48:33Z\napigeeroutes.apigee.cloud.google.com      2023-10-09T14:48:33Z\napigeetelemetries.apigee.cloud.google.com     2023-10-09T14:48:34Z\ncassandradatareplications.apigee.cloud.google.com   2023-10-09T14:48:35Z\n```\n- Check the labels on the cluster nodes.  By default, Apigee schedules data pods on nodes with the label `cloud.google.com/gke-nodepool=apigee-data` and runtime pods  are scheduled on nodes with the label `cloud.google.com/gke-nodepool=apigee-runtime` . You can  customize your node pool labels in the `overrides.yaml` file.For more information, see [  Configuring dedicated node pools](/apigee/docs/hybrid/v1.11/configure-dedicated-nodes) .\n### Install the Apigee hybrid Helm charts **Note:** Before executing any of the Helm upgrade/install commands, use the Helm dry-run feature by adding`--dry-run`at the end of the command. See`helm -h`to list supported commands, options, and usage.- If you have not, navigate into your`APIGEE_HELM_CHARTS_HOME`directory. Run the  following commands from that directory.\n- Upgrade the Apigee Operator/Controller: **Note:** This step requires elevated cluster permissions. Run`helm -h`or`helm upgrade -h`for detailsDry run:```\nhelm upgrade operator apigee-operator/ \\\n --install \\\n --create-namespace \\\n --namespace apigee-system \\\n -f OVERRIDES_FILE \\\n --dry-run\n```Upgrade the chart:```\nhelm upgrade operator apigee-operator/ \\\n --install \\\n --create-namespace \\\n --namespace apigee-system \\\n -f OVERRIDES_FILE\n``` **Note:** For migrated installations, use:```\nhelm upgrade operator apigee-operator/ \\\n --install \\\n --create-namespace \\\n --namespace apigee-system \\\n --force \\\n -f OVERRIDES_FILE\n```Verify Apigee Operator installation:```\nhelm ls -n apigee-system\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 NAMESPACE \u00a0 \u00a0 \u00a0 REVISION \u00a0 \u00a0 \u00a0 \u00a0UPDATED \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 STATUS \u00a0 \u00a0 \u00a0 \u00a0 \u00a0CHART \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 APP VERSIONoperator \u00a0 \u00a0apigee-system \u00a0 3 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2023-06-26 00:42:44.492009 -0800 PST \u00a0 \u00a0deployed \u00a0 \u00a0 \u00a0 \u00a0apigee-operator-1.11.1 \u00a0 1.11.1\n```Verify it is up and running by checking its availability:```\nkubectl -n apigee-system get deploy apigee-controller-manager\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0READY \u00a0 UP-TO-DATE \u00a0 AVAILABLE \u00a0 AGEapigee-controller-manager \u00a0 1/1 \u00a0 \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a01 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 7d20h\n```\n- Upgrade the Apigee datastore:Dry run:```\nhelm upgrade datastore apigee-datastore/ \\\n --install \\\n --namespace apigee \\\n -f OVERRIDES_FILE \\\n --dry-run\n```Upgrade the chart:```\nhelm upgrade datastore apigee-datastore/ \\\n --install \\\n --namespace apigee \\\n -f OVERRIDES_FILE\n``` **Note:** For migrated installations, use:```\nhelm upgrade datastore apigee-datastore/ \\\n --install \\\n --namespace apigee \\\n --force \\\n -f OVERRIDES_FILE\n```Verify `apigeedatastore` is up and running by checking its state:```\nkubectl -n apigee get apigeedatastore default\n``````\nNAME \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 \u00a0 AGEdefault \u00a0 running \u00a0 \u00a02d\n```\n- Upgrade Apigee telemetry:Dry run:```\nhelm upgrade telemetry apigee-telemetry/ \\\n --install \\\n --namespace apigee \\\n -f OVERRIDES_FILE \\\n --dry-run\n```Upgrade the chart:```\nhelm upgrade telemetry apigee-telemetry/ \\\n --install \\\n --namespace apigee \\\n -f OVERRIDES_FILE\n``` **Note:** For migrated installations, use:```\nhelm upgrade telemetry apigee-telemetry/ \\\n --install \\\n --namespace apigee \\\n --force \\\n -f OVERRIDES_FILE\n```Verify it is up and running by checking its state:```\nkubectl -n apigee get apigeetelemetry apigee-telemetry\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 STATE \u00a0 \u00a0 AGEapigee-telemetry \u00a0 running \u00a0 2d\n```\n- Upgrade Apigee Redis:Dry run:```\nhelm upgrade redis apigee-redis/ \\\n --install \\\n --namespace apigee \\\n -f OVERRIDES_FILE \\\n --dry-run\n```Upgrade the chart:```\nhelm upgrade redis apigee-redis/ \\\n --install \\\n --namespace apigee \\\n -f OVERRIDES_FILE\n``` **Note:** For migrated installations, use:```\nhelm upgrade redis apigee-redis/ \\\n --install \\\n --namespace apigee \\\n --force \\\n -f OVERRIDES_FILE\n```Verify it is up and running by checking its state:```\nkubectl -n apigee get apigeeredis default\n``````\nNAME \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 AGEdefault \u00a0 running \u00a0 2d\n```\n- Upgrade Apigee ingress manager:Dry run:```\nhelm upgrade ingress-manager apigee-ingress-manager/ \\\n --install \\\n --namespace apigee \\\n -f OVERRIDES_FILE \\\n --dry-run\n```Upgrade the chart:```\nhelm upgrade ingress-manager apigee-ingress-manager/ \\\n --install \\\n --namespace apigee \\\n -f OVERRIDES_FILE\n``` **Note:** For migrated installations, use:```\nhelm upgrade ingress-manager apigee-ingress-manager/ \\\n --install \\\n --namespace apigee \\\n --force \\\n -f OVERRIDES_FILE\n```Verify it is up and running by checking its availability:```\nkubectl -n apigee get deployment apigee-ingressgateway-manager\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0READY \u00a0 UP-TO-DATE \u00a0 AVAILABLE \u00a0 AGEapigee-ingressgateway-manager \u00a0 2/2 \u00a0 \u00a0 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2d\n```\n- Upgrade the Apigee organization:Dry run:```\nhelm upgrade ORG_NAME apigee-org/ \\\n --install \\\n --namespace apigee \\\n -f OVERRIDES_FILE \\\n --dry-run\n```Upgrade the chart:```\nhelm upgrade ORG_NAME apigee-org/ \\\n --install \\\n --namespace apigee \\\n -f OVERRIDES_FILE\n``` **Note:** For migrated installations, use:```\nhelm upgrade ORG_NAME apigee-org/ \\\n --install \\\n --namespace apigee \\\n --force \\\n -f OVERRIDES_FILE\n```Verify it is up and running by checking the state of the respective org:```\nkubectl -n apigee get apigeeorg\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 AGEapigee-org1-xxxxx \u00a0 \u00a0 \u00a0 \u00a0 \u00a0running \u00a0 2d\n```\n- Upgrade the environment.You must install one environment at a time. Specify the environment with `--set env=` :Dry run:```\nhelm upgrade ENV_RELEASE_NAME apigee-env/ \\\n --install \\\n --namespace apigee \\\n --set env=ENV_NAME \\\n -f OVERRIDES_FILE \\\n --dry-run\n```- is the name with which you previously installed the`apigee-env`chart. In hybrid v1.10, it is usually`apigee-env-` ``. In Hybrid v1.11 and newer it is usually.\n- is the name of the environment you are upgrading.\n- is your new overrides file for v.1.11.1\nUpgrade the chart:```\nhelm upgrade ENV_RELEASE_NAME apigee-env/ \\\n --install \\\n --namespace apigee \\\n --set env=ENV_NAME \\\n -f OVERRIDES_FILE\n``` **Note:** For migrated installations, use:```\nhelm upgrade ENV_RELEASE_NAME apigee-env/ \\\n --install \\\n --namespace apigee \\\n --set env=ENV_NAME \\\n --force \\\n -f OVERRIDES_FILE\n```Verify it is up and running by checking the state of the respective env:```\nkubectl -n apigee get apigeeenv\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 \u00a0 AGE \u00a0 GATEWAYTYPEapigee-org1-dev-xxx \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0running \u00a0 \u00a0 2d\n```\n- Upgrade the environment groups (`virtualhosts`).- You must upgrade one environment group (virtualhost) at a time. Specify the environment   group with`--set envgroup=`. Repeat the following   commands for each env group mentioned in the overrides.yaml file:Dry run:```\nhelm upgrade ENV_GROUP_RELEASE_NAME apigee-virtualhost/ \\\n --install \\\n --namespace apigee \\\n --set envgroup=ENV_GROUP_NAME \\\n -f OVERRIDES_FILE \\\n --dry-run\n``` is the name with which you previously installed the `apigee-virtualhost` chart. In hybrid v1.10, it is usually `apigee-virtualhost-` `` . In Hybrid v1.11 and newer it is   usually .Upgrade the chart:```\nhelm upgrade ENV_GROUP_RELEASE_NAME apigee-virtualhost/ \\\n --install \\\n --namespace apigee \\\n --set envgroup=ENV_GROUP_NAME \\\n -f OVERRIDES_FILE\n``` **Note:** For migrated installations, use:```\nhelm upgrade ENV_GROUP_RELEASE_NAME apigee-virtualhost/ \\\n --install \\\n --namespace apigee \\\n --set envgroup=ENV_GROUP_NAME \\\n --force \\\n -f OVERRIDES_FILE\n``` **Note:** must be unique within the`apigee`namespace. For example, if you have a`prod`env and   envgroup, you should set this name to`prod-envgroup`. The later env group   name should still be`prod`.\n- Check the state of the ApigeeRoute (AR).Installing the `virtualhosts` creates ApigeeRouteConfig (ARC) which internally creates    ApigeeRoute (AR) once the Apigee watcher pulls env group related    details from the control plane. Therefore, check that the corresponding    AR's state is running:```\nkubectl -n apigee get arc\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATE \u00a0 AGEapigee-org1-dev-egroup \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2d\n``````\nkubectl -n apigee get ar\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 AGEapigee-org1-dev-egroup-xxxxxx \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0running \u00a0 2d\n```\n- Store the latest version number in a variable using the following command:\n```\nexport VERSION=$(curl -s \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/current-version.txt?ignoreCache=1)\n``````\nexport VERSION=$(curl -s \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/current-version.txt)\n``````\nfor /f \"tokens=*\" %a in ('curl -s ^\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/current-version.txt') ^\ndo set VERSION=%a\n```\n- Check that the variable was populated with a version number using the following command. If  you want to use a different version, you can save that in an environment variable instead.```\necho $VERSION\n```You should see the latest Apigee hybrid version:```\n\u00a0 1.11.1\n```\n- Be sure you are in the hybrid base directory (the parent of the directory where  the`apigeectl`executable file is located):```\ncd $APIGEECTL_HOME/..\n```\n- Download the release package for your operating system using the following command.  Be sure to select your platform in the following table:\n **Linux 64 bit:** \n```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_linux_64.tar.gz\n``` **Mac 64 bit:** \n```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_mac_64.tar.gz\n``` **Windows 64 bit:** \n```\ncurl -LO ^\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/%VERSION%/apigeectl_windows_64.zip\n```\n- Rename your current`apigeectl/`directory to a backup directory name. For example:\n```\nmv $APIGEECTL_HOME/ $APIGEECTL_HOME-v1.10/\n``````\nmv $APIGEECTL_HOME/ $APIGEECTL_HOME-v1.10/ \n``````\nrename %APIGEECTL_HOME% %APIGEECTL_HOME%-v1.10 \n```\n- Extract the downloaded gzip file contents into your hybrid base directory.  The hybrid base directory is the directory where the renamed `apigeectl-v1.10` directory is located:\n```\ntar xvzf filename.tar.gz -C ./\n``````\ntar xvzf filename.tar.gz -C ./\n``````\ntar xvzf filename.zip -C ./\n```\n- The tar contents are, by default, expanded into a directory with the version and platform in  its name. For example: `./apigeectl_1.11.1-xxxxxxx_linux_64` . Rename that directory  to `apigeectl` using the following command:\n```\nmv apigeectl_1.11.1-xxxxxxx_linux_64 apigeectl\n``````\nmv apigeectl_1.11.1-xxxxxxx_mac_64 apigeectl\n``````\nrename apigeectl_1.11.1-xxxxxxx_windows_64 apigeectl\n```\n- Change to the`apigeectl`directory:```\ncd ./apigeectl\n```This directory is the `apigeectl` home directory. It is where  the `apigeectl` executable command is located.\n- These instructions use the environment variable` **$APIGEECTL_HOME** `for the directory  in your file system where the`apigeectl`utility is installed. If needed, change directory  into your`apigeectl`directory and define the variable with the following command:\n```\nexport APIGEECTL_HOME=$PWD\n```\n```\necho $APIGEECTL_HOME\n``````\nexport APIGEECTL_HOME=$PWD\n```\n```\necho $APIGEECTL_HOME\n``````\nset APIGEECTL_HOME=%CD%\n```\n```\necho %APIGEECTL_HOME%\n```\n- Verify the version of`apigeectl`with the`version`command:```\n./apigeectl version\n``````\nVersion: 1.11.1\n```\n- Create a`` `/hybrid-files`directory, and then move  into it. The`hybrid-files`directory is where configuration files such as the  overrides file, certs, and service accounts are located. For example:\n```\nmkdir $APIGEECTL_HOME/../hybrid-files\n```\n```\ncd $APIGEECTL_HOME/../hybrid-files\n``````\nmkdir $APIGEECTL_HOME/../hybrid-files\n```\n```\ncd $APIGEECTL_HOME/../hybrid-files\n``````\nmkdir %APIGEECTL_HOME%/../hybrid-files\n```\n```\ncd %APIGEECTL_HOME%/../hybrid-files\n```\n- Verify that`kubectl`is set to the correct context using the following command.  The current context should be set to the cluster in which you are upgrading Apigee hybrid.```\nkubectl config get-contexts | grep \\*\n```\n- In the`hybrid-files`directory:- Update the following symbolic links to`$APIGEECTL_HOME`. These links allow you to run the newly installed`apigeectl`command from inside the`hybrid-files`directory:```\nln -nfs $APIGEECTL_HOME/tools tools\nln -nfs $APIGEECTL_HOME/config config\nln -nfs $APIGEECTL_HOME/templates templates\nln -nfs $APIGEECTL_HOME/plugins plugins\n```\n- To check that the symlinks were created correctly, execute the following command and make  sure the link paths point to the correct locations:```\nls -l | grep ^l\n```\n- Do a dry run initialization to check for errors:```\n${APIGEECTL_HOME}/apigeectl init -f OVERRIDES_FILE --dry-run=client\n```Where is the name of your overrides file, for example `./overrides/overrides.yaml` . **Tip:** You can replace``in the code   sample above with the name and path to your overrides file, and every instance on this page   will be replaced.\n- If there are no errors, initialize hybrid 1.11.1:```\n$APIGEECTL_HOME/apigeectl init -f OVERRIDES_FILE\n``` **Note:** `apigeectl`installs and configures   Apigee ingress gateway when you run`apigeectl init`.\n- Check the initialization status:```\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```On success, the output says: `All containers ready.` ```\nkubectl describe apigeeds -n apigee\n```In the output, look for `State: running` .\n- Check for errors with a dry run of the`apply`command using the`--dry-run`flag:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --dry-run=client\n```\n- If there are no errors, apply your overrides. Select and follow the instructions for production environments or  non-prod environments, depending on your installation.\nFor production environments, upgrade each hybrid component individually, and    check the status of the upgraded component before proceeding to the next component.- Be sure you are in the`hybrid-files`directory.\n- Apply your overrides to upgrade Cassandra:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --datastore\n```\n- Check completion:```\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n``` **Tip:** If`check-ready`fails, you can get more     information about your pods with:```\nkubectl -n NAMESPACE get pods\n```Where is your Apigee hybrid namespace.Proceed to the next step only when the pods are ready.\n- Apply your overrides to upgrade Telemetry components and check completion:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --telemetry\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\n- Bring up Redis components:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --redis\n```\n- Apply your overrides to upgrade the org-level components (MART, Watcher and Apigee    Connect) and check completion:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --org\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\n- Apply your overrides to upgrade your environments. You have two choices:- **Environment by environment** : Apply your overrides to one environment at a time and check completion. Repeat     this step for each environment:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --env ENV_NAME\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```Where is the name of the environment you are upgrading.\n- **All environments at one time** : Apply your overrides to all environments at once and check completion:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --all-envs\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\n- Apply your overrides to upgrade the`virtualhosts`components and check completion:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --settings virtualhosts\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\nIn most non-production, demo, or experimental environments, you can apply the overrides    to all components at once. If your non-production environment is large and complex or    closely mimics a production environment, you may want to use the instructions for    upgrading production environments.- Be sure you are in the`hybrid-files`directory.\n- ```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE\n```\n- Check the status:```\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```## Install 1.11.1-hotfix.1\nUse the following commands to install the hotfix release, `1.11.1-hotfix.1` . For more information, see [hybrid 1.11.1-hotfix.1](/apigee/docs/hybrid/release-notes#hybrid_v1111-hotfix1) in the Apigee release notes.\n- Open your overrides file.\n- First, update your overrides file. Follow the instructions appropriate for the tool you are using to manage Apigee hybrid, **Helm** or`apigeectl`:- In the`istiod`stanza, change the version of the image tag (if present)   to version`1.17.8`. For example:```\nistiod:\n image:\n url: \"gcr.io/apigee-release/hybrid/apigee-asm-istiod\"\n tag: \"1.17.8-asm.20-distroless\"\n```\n- In the`apigeeIngressGateway`stanza, change the version of the image tag (if present) to version`1.17.8`. For example:```\napigeeIngressGateway:\n image:\n url: \"gcr.io/apigee-release/hybrid/apigee-asm-ingress\"\n tag: \"1.17.8-asm.20-distroless\"\n```\n- Save the file.\n- In the`istiod`stanza, change the version of the image tag (if present)   to version`1.17.8`. For example:```\nistiod:\n image:\n url: \"gcr.io/apigee-release/hybrid/apigee-asm-istiod\"\n tag: \"1.17.8-asm.20-distroless\"\n```\n- Depending on how you chose to install Apigee hybrid, you may have an`ingressGateway`or`ingressGateways`stanza.   Locate the stanza that appears in your overrides file and change the version of the image tag (if present)   to version`1.17.8`. For example, if you have an`ingressGateway`stanza:```\ningressGateway:\n image:\n url: \"gcr.io/apigee-release/hybrid/apigee-asm-ingress\"\n tag: \"1.17.8-asm.20-distroless\"\n```or, if you have an `ingressGateways` stanza:```\ningressGateways:\n - name: gateway1\n image:\n  url: \"gcr.io/apigee-release/hybrid/apigee-asm-ingress\"\n  tag: \"1.17.8-asm.20-distroless\"\n ...\n - name: gateway2\n image:\n  url: \"gcr.io/apigee-release/hybrid/apigee-asm-ingress\"\n  tag: \"1.17.8-asm.20-distroless\"\n ... \n```\n- Save the file.\n- Next, apply the changes. Follow the instructions appropriate for the tool you are using to manage Apigee hybrid, **Helm** or`apigeectl`:- Install the`apigee-ingress-manager`chart with the following command:```\nhelm upgrade ingress-manager apigee-ingress-manager/ \\\n --install \\\n --namespace \"YOUR_APIGEE_NAMESPACE\" \\\n --atomic \\\n -f OVERRIDES_FILE\n```\n- Install the`apigee-org`chart with the following command:```\nhelm upgrade ORG_NAME apigee-org/ \\\n --install \\\n --namespace \"YOUR_APIGEE_NAMESPACE\" \\\n --atomic \\\n -f OVERRIDES_FILE\n```\n- Verify the status of your pods:```\nkubectl get pods -n YOUR_APIGEE_NAMESPACE\n```\n- Execute the following command to initialize the`istiod`component:```\n$APIGEECTL_HOME/apigeectl init -f OVERRIDES_FILE\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\n- Execute the following command to apply changes to the Apigee ingress component(s). If you have    more than one organization, repeat this command for each one:```\n$APIGEECTL_HOME/apigeectl apply --org -f OVERRIDES_FILE\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\n- Verify the status of your pods:```\nkubectl get pods -n YOUR_APIGEE_NAMESPACE\n```\n**Congratulations!** You have upgraded to Apigee hybrid version 1.11.1. to test your upgrade, call a proxy against the new installation. For an example, see [Step 10: Deploy an API proxy](/apigee/docs/hybrid/v1.11/install-deploy-proxy) in the Apigee hybrid 1.11 installation guide.\n## \n Rolling back an upgrade\nFollow these steps to roll back a previous upgrade:\nTo rollback to the previous version, use the charts charts and the overrides file from the  previous installation.- Create the following environment variable:- : The directory where the previous Apigee hybrid    Helm charts are installed. This is the version you are rolling back to.\n- Roll back the virtualhosts. Repeat the following command for each environment group   mentioned in the overrides file.```\nhelm upgrade ENV_GROUP_RELEASE_NAME $PREVIOUS_HELM_CHARTS_HOME/apigee-virtualhost/ \\\n --namespace apigee \\\n --atomic \\\n --set envgroup=ENV_GROUP_NAME \\\n -f PREVIOUS_OVERRIDES_FILE\n``` is the name with which you previously installed the `apigee-virtualhost` chart. In hybrid v1.10, it is usually `apigee-virtualhost-` `` . In Hybrid v1.11 and newer it is   usually .\n- Roll back Envs. Repeat the following command for each environment mentioned in the overrides file.```\nhelm upgrade apigee-env-ENV_NAME $PREVIOUS_HELM_CHARTS_HOME/apigee-env/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n --set env=ENV_NAME \\\n -f PREVIOUS_OVERRIDES_FILE\n``` is the name with which you previously installed the `apigee-env` chart. In hybrid v1.10, it is usually `apigee-env-` `` . In Hybrid v1.11 and newer it is   usually .\n- Roll back Org:```\nhelm upgrade ORG_NAME $PREVIOUS_HELM_CHARTS_HOME/apigee-org/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f PREVIOUS_OVERRIDES_FILE\n```\n- Roll back the Ingress Manager:```\nhelm upgrade ingress-manager $PREVIOUS_HELM_CHARTS_HOME/apigee-ingress-manager/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f PREVIOUS_OVERRIDES_FILE\n```\n- Roll back Redis:```\nhelm upgrade redis $PREVIOUS_HELM_CHARTS_HOME/apigee-redis/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f PREVIOUS_OVERRIDES_FILE\n```\n- Roll back Apigee Telemetry:```\nhelm upgrade telemetry $PREVIOUS_HELM_CHARTS_HOME/apigee-telemetry/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f PREVIOUS_OVERRIDES_FILE\n```\n- Roll back Apigee Datastore (the Cassandra database component):```\nhelm upgrade datastore $PREVIOUS_HELM_CHARTS_HOME/apigee-datastore/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f PREVIOUS_OVERRIDES_FILE\n```\n- Roll back the Apigee Controller:```\nhelm upgrade operator $PREVIOUS_HELM_CHARTS_HOME/apigee-operator/ \\\n --install \\\n --namespace apigee-system \\\n --atomic \\\n -f PREVIOUS_OVERRIDES_FILE\n```\n- Roll back the Apigee hybrid CRDs:```\n kubectl apply -k $PREVIOUS_HELM_CHARTS_HOME/apigee-operator/etc/crds/default/ --server-side --force-conflicts --validate=false\n```\n- Clean up completed jobs for the hybrid runtime namespace, whereis the  namespace specified in your overrides file, if you specified a namespace. If not, the default namespace  is`apigee`:```\nkubectl delete job -n NAMESPACE \\\n $(kubectl get job -n NAMESPACE \\\n -o=jsonpath='{.items[?(@.status.succeeded==1)].metadata.name}')\n```\n- Clean up completed jobs for the`apigee-system`namespace:```\nkubectl delete job -n apigee-system \\\n $(kubectl get job -n apigee-system \\\n -o=jsonpath='{.items[?(@.status.succeeded==1)].metadata.name}')\n```\n- Change the`APIGEECTL_HOME`variable to point to the directory that contains the previous  version of`apigeectl`. For example:```\nexport APIGEECTL_HOME=PATH_TO_PREVIOUS_APIGEECTL_DIRECTORY\n```\n- Run the following commands in the root directory of the installation you want to roll back to.  Be sure to use the original overrides file for the version you wish to roll back to:- In the hybrid-files directory, run`apigeectl apply`:```\n$APIGEECTL_HOME/apigeectl apply -f ORIGINAL_OVERRIDES_FILE\n```Where is the relative path and filename of the overrides   file for your previous version hybrid installation, for example, `./overrides/overrides1.10.yaml` .\n- Check the status of your pods:```\nkubectl -n NAMESPACE get pods\n```Where is your Apigee hybrid namespace.\n- Check the status of`apigeeds`:```\nkubectl describe apigeeds -n apigee\n```Your output should look something like:```\nStatus:\u00a0 Cassandra Data Replication:\u00a0 Cassandra Pod Ips:\u00a0 \u00a0 10.8.2.204\u00a0 Cassandra Ready Replicas: \u00a01\u00a0 Components:\u00a0 \u00a0 Cassandra:\u00a0 \u00a0 \u00a0 Last Successfully Released Version:\u00a0 \u00a0 \u00a0 \u00a0 Revision: \u00a0v1-f8aa9a82b9f69613\u00a0 \u00a0 \u00a0 \u00a0 Version: \u00a0 v1\u00a0 \u00a0 \u00a0 Replicas:\u00a0 \u00a0 \u00a0 \u00a0 Available: \u00a01\u00a0 \u00a0 \u00a0 \u00a0 Ready: \u00a0 \u00a0 \u00a01\u00a0 \u00a0 \u00a0 \u00a0 Total: \u00a0 \u00a0 \u00a01\u00a0 \u00a0 \u00a0 \u00a0 Updated: \u00a0 \u00a01\u00a0 \u00a0 \u00a0 State: \u00a0 \u00a0 \u00a0 \u00a0running\u00a0 Scaling:\u00a0 \u00a0 In Progress: \u00a0 \u00a0 \u00a0 \u00a0 false\u00a0 \u00a0 Operation:\u00a0 \u00a0 Requested Replicas: \u00a00\u00a0 State: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 running\n```Proceed to the next step only when the `apigeeds` pod is running.\n- Run the following command to make note of what your new replica count values will be for   the message processor after the upgrade. If these values do not match what you have set   previously, change the values in your overrides file to match your previous   configuration.```\napigeectl apply -f ORIGINAL_OVERRIDES_FILE --dry-run=client --print-yaml --env ENV_NAME 2>/dev/null |grep \"runtime:\" -A 25 -B 1| grep \"autoScaler\" -A 2\n```Your output should look something like:```\n  autoScaler:\n  minReplicas: 2\n  maxReplicas: 10\n```\n- Run`apigeectl init`:```\n$APIGEECTL_HOME/apigeectl init -f ORIGINAL_OVERRIDES_FILE\n```", "guide": "Apigee"}