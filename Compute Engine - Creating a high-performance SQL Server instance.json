{"title": "Compute Engine - Creating a high-performance SQL Server instance", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Creating a high-performance SQL Server instance\nThis tutorial shows how to create a Compute Engine VM instance running SQL Server that is optimized for performance. This tutorial guides you through creating the instance and then configuring SQL Server for optimal performance on Google Cloud. You will learn about a number of configuration options that are available to help you adjust the performance of the system.\nThis tutorial uses SQL Server Standard Edition 2022, so not every configuration option presented in this guide works for everyone, and not all of them provide noticeable performance benefits for every workload.", "content": "## Objectives\n- Setting up the Compute Engine instance and disks.\n- Configuring the Windows operating system.\n- Configuring SQL Server.\n## CostsThis tutorial uses billable components of Google Cloud, including:- Compute Engine high-memory instance\n- Compute Engine SSD Persistent Disk storage\n- Compute Engine Local SSD disk storage\n- SQL Server Standard preconfigured image\nThe [Pricing Calculator](/products/calculator#id=2cf85e80-02ce-4417-8f24-f90eb770fd97) can generate a cost estimate based on your projected usage. The provided link shows the cost estimate for the products used in this tutorial, which can cost over 4 dollars (US) per hour and over 3,000 dollars per month. ## Before you begin\n## Creating the Compute Engine VM with disksTo create a high-performance SQL Server instance, you must first create a VM instance with SQL Server and two persistent disks.\n### Persistent disks considerationsTo select the type of persistent disks for your VM, review the following considerations:- A [local SSD](/compute/docs/disks#localssds) provides a high-performance location for `tempdb` and the Windows pagefile.There are some important considerations to note when using a local SSD. When you shut down your instance from Windows or reset it by using the API, the local SSD is removed. This action renders the instance unbootable. To get the machine running again, you would need to detach your persistent disks, create a new instance with them, and then define a new local SSD. After startup you would also need to format the new disk and reboot. Therefore, you should not permanently store critical data on a local SSD, or power off the instance, unless you are prepared to rebuild it.\n- An [SSD Persistent Disk](/compute/docs/disks#pdspecs) provides high-performance storage for the database files.Persistent Disk performance is based on a calculation that uses the number of CPUs and the size of the disk. With 32 vCPUs and a 1 TB disk, the performance peaks at 40,000 read operations per second (ops) and 30,000 write ops. The total sustained throughput for reads and writes is 800 MB per second and 400 MB per second respectively. These measurements represent a summation of all the persistent disks attached to the virtual machine, including the `C:\\` drive. This is why you should create a local SSD to offload all the IOPS needed for the paging file, `tempdb` , staging data, and backups.\nTo read more about disk performance, see [Configure disks to meet performance requirements](/compute/docs/disks/performance) .\n### Creating Compute Engine VM with disksTo create a VM that has SQL Server 2022 Standard preinstalled on Windows Server 2022, follow these steps:- In the Google Cloud console, go to the **Create an instance** page. [Go to Create an instance](https://console.cloud.google.com/compute/instancesAdd) \n- For **Name** , enter `ms-sql-server` .\n- In the **Machine configuration** section, select **General Purpose** , and then do the following:- In the **Series** list, click **N2** .\n- In the **Machine type** list, click **n2-highmem-16\n(16vCPU, 128 GB memory)** .\n- In the **Boot disk** section, click **Change** , and then do the following:- On the **Public images** tab, click the **Operating system** list, and then select **SQL Server on Windows Server** .\n- In the **Version** list, click **SQL Server 2022 Standard on Windows\nServer 2022 Datacenter** .\n- In the **Boot disk type** list, click **Standard persistent disk** .\n- In the **Size (GB)** field, set the boot disk size to **50** GB.\n- To save the boot disk configuration, click **Select** .\n- Expand the **Advanced options** section, and do the following:- Expand the **Disks** section.\n- To create local disks, click **Add Local SSD** , and then do the following:- In the **Interface** list, select the protocol that meets your system's performance requirements.\n- In the **Disk capacity** list, select a disk capacity that supports the anticipated size of`tempdb`files.\n- To finish creating this disk, click **Save** .\n- To create additional disks, click **Add New Disk** .- Keep the **Name** field unchanged.\n- In the **Disk source type** list, select **Blank disk** .\n- In the **Disk type** list, select **SSD persistent disk** .\n- In the **Size** field, enter the disk size that can accommodate the database size.\n- To finish creating the second disk, click **Save** .\n- To create the VM, click **Create** .\n## Configuring WindowsNow that you have a working instance running SQL Server, connect to your instance and configure the Windows operating system. After that, you learn to configure SQL Server in an upcoming section.\n### Connect to your instance\n- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Under the **Name** column, click the name of your instance, `ms-sql-server` .\n- At the top of the instance's details page, click the **Set Windows Password** button.\n- Specify a username.\n- Click **Set** to generate a new password for this Windows instance.\n- Note the username and password so you can log into the instance.\n- Connect to your instance [by using RDP](/compute/docs/instances/connecting-to-windows#connecting_to_windows_vms_by_using_rdp) .\n### Setting up disk volumesCreate and format the volumes:- From the **Start** menu, search for \"Computer Management\" and then open it.\n- Under **Storage** section, select **Disk Management** .\n- When prompted to initialize disks, accept the default selections and click **OK** .\n- Create partition for local SSD disk(s):To locate a local SSD disk, right-click on a disk and select **Properties** . The local SSD disk properties name will be `Google EphemeralDisk` for a SCSI interface or `nvme_card` for an NVMe interface. Both local SSDs and persistent SSDs are marked as having `Unallocated` partitions.- If the VM contains only 1 local SSD drive, follow these steps:- Under the list of disk drives, right-click the 374.98 GB local SSD disk and select **New Simple Volume** .\n- On the Welcome screen, click **Next** to start the disk volume wizard.\n- In the **Specify Volume Size** step, leave the volume size at the default value and click **Next** to proceed.\n- In the **Assign Drive Letter or Path** step, choose **P:** for the drive letter and click **Next** to proceed.\n- In the **Format Volume** step, change the **Allocation unit size** to 8192 and enter \"pagefile\" for the **Volume label** . Click **Next** to proceed. \n- Click **Finish** to complete the disk volume wizard.\n- If the VM contains multiple local SSD drives, follow these steps:- Under the list of disk drives, right-click the first 374.98 GB local SSD disk and select **New Striped Volume** .\n- On the Welcome screen, click **Next** to start the disk volume wizard.\n- In the **Select Disks** step, add all the available disks with the size 383,982 MB to the Selected section. Click **Next** to proceed. \n- In the **Assign Drive Letter or Path** step, choose **P:** for the drive letter and click **Next** to proceed.\n- In the **Format Volume** step, change the **Allocation unit size** to 8192 and enter \"pagefile\" for the **Volume label** . Click **Next** to proceed. \n- Click **Finish** to complete the disk volume wizard.\n- Repeat the previous steps to create a **New Simple Volume** for the SSD disk, with the following three changes:- Choose **D:** for the drive letter.\n- Set the **Allocation unit size** to `64k` .For details on selecting an allocation unit size, see [Best practices for SQL Server instances](/compute/docs/instances/sql-server/best-practices#formatting_secondary_disks) .\n- Enter `sqldata` for the **Volume label** .\n### Moving the Windows paging fileNow that the new volumes are created and mounted, move the Windows paging file onto the local SSD, which frees up Persistent Disk IOPS and improves the access time of your virtual memory.- From the **Start** menu, search for **View advanced system settings** and then open the dialog.\n- Click the **Advanced** tab, and in the **Performance** section, click **Settings** .\n- In the **Virtual memory** section, click the **Change** button.\n- Clear the checkbox **Automatically manage paging file size for all drives** . The system should have already set up your paging file on the`C:\\`drive, and you need to move it.\n- Click **C:** and then click the **No paging file** radio button.\n- Click the **Set** button.\n- To create the new paging file, click the **P:** drive, and then click the **System managed size** radio button.\n- Click the **Set** button.\n- Click **OK** three times to exit the advanced system properties.Microsoft Support has published [additional tips for virtual memorysettings](http://windows.microsoft.com/en-au/windows/change-virtual-memory-size#1TC=windows-7) .\n### Setting the power profileSet the power profile to `High-Performance` instead of `Balanced` .- From the **Start** menu, search for \"Choose a Power Plan\", and then open the power options.\n- Select the **High Performance** radio button.\n- Exit the dialog.\n## Configuring SQL ServerUse SQL Server Management Studio to perform most administrative tasks. The preconfigured images for SQL Server come with Management Studio already installed. Launch Management Studio and then click **Connect** to connect to the default database.\n### Moving the data and log filesThe preconfigured image for SQL Server comes with everything installed on the `C:\\` drive, including the system databases. To optimize your setup, move those files to the new `D:\\` drive you created. Also remember to create all new databases on the `D:\\` drive. Because you are using an SSD, you do not need to store the data files and log files on separate disk partitions.\nThere are two ways to move the installation to the secondary disk: using the installer or moving the files manually.To use the installer, run `c:\\setup.exe` and select a new installation path on your secondary disk.Move the system databases and configure SQL Server to save the data and log files on the same volume:- Create a new folder named`D:\\SQLData`.\n- Open a Command Window.\n- Enter the following command to grant full access to `NT Service\\MSSQLSERVER` :```\nicacls D:\\SQLData /Grant \"NT Service\\MSSQLServer:(OI)(CI)F\"\n```\n- Use Management Studio and the following guides to [move your systemdatabases](https://msdn.microsoft.com/en-us/library/ms345408(v=sql.120).aspx) and [change the default file locations](https://msdn.microsoft.com/en-us/library/dd206993.aspx) for new databases.\n- If you plan on using **Report Server** features, move the **ReportServer** and **ReportServerTempDB** files as well.\n **Important:** Do not modify the `tempdb` files yet because you must first change some permission settings and then move the DB to the local SSD volume.\nAfter you move the primary configuration database files and restart, you need to configure the system to point to the new location for the model and MSDB databases. Here is a helper script to run in Management Studio:\n```\nALTER DATABASE model MODIFY FILE ( NAME = modeldev , FILENAME = 'D:\\SQLData\\model.mdf' )\nALTER DATABASE model MODIFY FILE ( NAME = modellog , FILENAME = 'D:\\SQLData\\modellog.ldf' )\nALTER DATABASE msdb MODIFY FILE ( NAME = MSDBData , FILENAME = 'D:\\SQLData\\MSDBData.mdf' )\nALTER DATABASE msdb MODIFY FILE ( NAME = MSDBlog , FILENAME = 'D:\\SQLData\\MSDBLog.ldf' )\n```\nAfter you execute these commands:- Use the`services.msc`snap-in to stop the SQL Server database service.\n- Use the Windows file explorer to move the physical files from the`C:\\`drive where the`master`database was located to the`D:\\SQLData`directory.\n- Start the SQL Server database service.\n### Setting system permissionsAfter moving the system databases, modify some additional settings, starting with permissions for the Windows user account created to run your SQL Server process, which is named `NT Service\\MSSQLSERVER` .The group policy `Lock Pages in Memory` permission prevents Windows from moving pages in physical memory to virtual memory. To keep physical memory free and organized, Windows tries to swap old, rarely modified pages to the virtual-memory paging file on disk.\nSQL Server stores important information in memory, such as table structures, execution plans, and cached queries. Some of this information rarely changes, so it becomes a target for the paging file. If this information gets moved to the paging file, SQL Server performance can degrade. Granting the group policy `Lock Pages in Memory` permission for SQL Server's service account prevents this swapping.\nFollow these steps:- Click **Start** and then search for **Edit Group Policy** to open the console.\n- Expand **Local Computer Policy\u00a0>\nComputer Configuration\u00a0>\nWindows Settings\u00a0> Security Settings\u00a0>\nLocal Policies\u00a0>\nUser Rights Assignment** .\n- Search for and then double-click **Lock pages in memory** .\n- Click **Add User or Group** .\n- Search for \"NT Service\\MSSQLSERVER\".\n- If you see multiple names, double-click the **MSSQLSERVER** name.\n- Click **OK** twice.\n- Keep the **Group Policy Editor** console open.\n \n **Important:** After completing these steps and restarting SQL Server, you can verify the setting is working by viewing the SQL Server log. The log contains an entry such as, \"Using locked pages in the memory manager.\"By default, when an application requests a slice of disk space from Windows, the operating system locates an appropriately sized chunk of disk space, and then zeroes out the entire chunk of disk, before handing it back to the application. Because SQL Server is good at growing files and filling disk space, this behavior is not optimal.\nThere is a separate API for allocating disk space to an application, often referred to as . Unfortunately, this setting only works for data files, but you will learn in an upcoming section about log-file growth. Instant file initialization requires the service account running the SQL Server process to have another group policy permission, called `Perform volume maintenance tasks` .- In the **Group Policy Editor** , search for \"Perform volume maintenance tasks\".\n- Add the \"NT Service\\MSSQLSERVER\" account as you did in the previous section.\n- Restart the SQL Server process to activate both settings.\n### Setting up tempdbIt used to be a best practice to optimize the SQL Server CPU usage by creating one `tempdb` file per CPU. However, because CPU counts have grown over time, following this guideline can cause performance to decrease. As a good starting point, use 4 `tempdb` files. As you measure your system's performance, in rare cases you might need to incrementally increase the number of `tempdb` files to a maximum of 8.\nYou can run a Transact-SQL (T-SQL) script inside SQL Server Management Studio to move the `tempdb` files to a folder in the `p:` drive.- Create the directory`p:\\tempdb`.\n- Grant full security access to the \"NT Service\\MSSQLSERVER\" user account:```\nicacls p:\\tempdb /Grant \"NT Service\\MSSQLServer:(OI)(CI)F\"\n```\n- Run the following script inside SQL Server Management Studio, to move the `tempdb` data file and log file:```\nUSE master\nGO\nALTER DATABASE [tempdb] MODIFY FILE (NAME = tempdev, FILENAME = 'p:\\tempdb\\tempdb.mdf')\nGO\nALTER DATABASE [tempdb] MODIFY FILE (NAME = templog, FILENAME = 'p:\\tempdb\\templog.ldf')\nGO\n```\n- Restart SQL Server.\n- Run the following script to modify the file sizes and create three additional data files for the new `tempdb` .```\nALTER DATABASE [tempdb] MODIFY FILE (NAME = tempdev, FILENAME = 'p:\\tempdb\\tempdb.mdf', SIZE=8GB)\nALTER DATABASE [tempdb] MODIFY FILE (NAME = templog, FILENAME = 'p:\\tempdb\\templog.ldf' , SIZE = 2GB)\nALTER DATABASE [tempdb] ADD FILE (NAME = 'tempdev1', FILENAME = 'p:\\tempdb\\tempdev1.ndf' , SIZE = 8GB, FILEGROWTH = 0);\nALTER DATABASE [tempdb] ADD FILE (NAME = 'tempdev2', FILENAME = 'p:\\tempdb\\tempdev2.ndf' , SIZE = 8GB, FILEGROWTH = 0);\nALTER DATABASE [tempdb] ADD FILE (NAME = 'tempdev3', FILENAME = 'p:\\tempdb\\tempdev3.ndf' , SIZE = 8GB, FILEGROWTH = 0);\nGO\n```If you use SQL Server 2016, there are 3 additional `tempdb` files to remove after you do the previous steps:```\nALTER DATABASE [tempdb] REMOVE FILE temp2;\nALTER DATABASE [tempdb] REMOVE FILE temp3;\nALTER DATABASE [tempdb] REMOVE FILE temp4;\n```\n- Restart SQL Server again.\n- Delete the `model` , `MSDB` , `master` , and `tempdb` files from the original location on the `C:\\` drive.\nYou successfully moved your `tempdb` files onto the local SSD partition. This move carries some risks, mentioned earlier, but if they are lost for any reason,SQL Server rebuilds the `tempdb` files. Moving `tempdb` gives you the added performance of the local SSD, and decreases the IOPS used on your persistent disks.\n **Caution:** Local SSD is not intended for storage of permanent or critical data, because the disk is pinned to the local host. Therefore, use local SSD only for temporary storage. In some cases, if you shut down Windows from within the instance, the local SSD will be removed, and you will have to delete and recreate your instance.The recommended default setting for `max degree of parallelism` is to match it to the number of CPUs on the server. However, there is a point where executing a query in 16 or 32 parallel chunks and merging the results is much slower than running it in a single process. If you are using a 16- or 32-core instance, you can set the `max degree of parallelism` value to 8 using the following T-SQL:\n```\nUSE master\nGO\nEXEC sp_configure 'show advanced options', 1\nGO\nRECONFIGURE WITH OVERRIDE\nGO\nEXEC sp_configure 'max degree of parallelism', 8\nGO\nRECONFIGURE WITH OVERRIDE\nGO\n```This setting defaults to a very high number, but you should set it to the number of megabytes of available physical RAM, minus a couple gigabytes for operating system and overhead. The following T-SQL example adjusts `max server memory` to 100 GB. Modify it to adjust the value to match your instance. Review the [Server memory server configuration options](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/server-memory-server-configuration-options?view=sql-server-2017) document for more information.\n```\nEXEC sp_configure 'show advanced options', 1\nGO\nRECONFIGURE WITH OVERRIDE\nGO\nexec sp_configure 'max server memory', 100000\nGO\nRECONFIGURE WITH OVERRIDE\nGO\n```\n### Finishing upRestart the instance one more time to make sure all of the new settings take effect. Your SQL Server system is configured and you are ready to create your own databases and start testing your specific workloads. Review the [SQL ServerBest Practices guide](/compute/docs/instances/sql-server/best-practices) for more information on operational activities, other performance considerations, and Enterprise Edition capabilities.## Clean up\nAfter you finish the tutorial, you can clean up the resources that you created so that they stop using quota and incurring charges. The following sections describe how to delete or turn off these resources.\n### Deleting the project\nThe easiest way to eliminate billing is to delete the project that you created for the tutorial.\nTo delete the project:\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.### Deleting instances\nTo delete a Compute Engine instance:\n- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Select the checkbox for   the instance that you want to delete.\n- To delete the instance, clickmore_vert **More actions** , click **Delete** ,  and then follow the instructions.### Deleting persistent disksTo delete the Persistent Disk:- In the Google Cloud console, go to the **Disks** page. [Go to Disks](https://console.cloud.google.com/compute/disks) \n- Select the checkbox next to the name of the disk you want to delete.\n- Click the **Delete** button at the top of the page.\n## What's next\n- [Load test your SQL Server instance](/compute/docs/tutorials/load-testing-sql-server-hammerdb) .\n- Review the [SQL ServerBest Practices guide](/compute/docs/instances/sql-server/best-practices) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Compute Engine"}