{"title": "Cloud Architecture Center - Tokenizing sensitive cardholder data for PCI DSS", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Tokenizing sensitive cardholder data for PCI DSS\nLast reviewed 2023-05-05 UTC\nThis tutorial shows how to set up an access-controlled credit and debit card tokenization service on Cloud Functions. To set up the service, the article uses these Google Cloud services: [Identity and Access Management (IAM)](/iam) and [Cloud Key Management Service (KMS)](/kms) .\n is the process of substituting a benign placeholder value, or token, for sensitive information such as credit card data. Part 3 of the Payment Card Industry Data Security Standard (PCI DSS) requires that most of the data stored on a credit card be treated as sensitive information.\nA token by itself is meaningless except as a means of looking up [tokenized data](https://www.pcisecuritystandards.org/documents/Tokenization_Guidelines_Info_Supplement.pdf) in a particular context. However, you still need to ensure that your tokens don't contain any user-specific information and that they aren't directly decryptable. This way, if you lose control over your customers' payment card tokens, no one can use the tokens to compromise the cardholder data.", "content": "## A service for handling sensitive informationYou have many choices for the platform or service to host your cardholder data environment (CDE). This tutorial guides you through a sample deployment using Cloud Functions and helps you on the next steps toward a production-ready solution.\nCloud Functions is a serverless platform that hosts and executes code, and it's a convenient place to quickly launch an application that scales without intervention. Keep in mind that in a PCI DSS compliant CDE, you must limit all inbound and outbound traffic to authorized connections. Such fine-grained controls are not currently available for Cloud Functions. Therefore, you must implement compensating controls elsewhere (such as in your application) or choose a different platform. The same Tokenization service can be run in a containerized manner such as an autoscaling [managed instance group](/compute/docs/instance-groups#managed_instance_groups) or a Kubernetes cluster. These would be preferable production environments with their complete VPC network controls.\nCloud KMS is Google Cloud's key-management service. Cloud KMS hosts your encryption keys, [rotates them regularly](/kms/docs/key-rotation) , and encrypts or decrypts stored account data.\nIAM is used in this tutorial to provide tight controls on all of the resources used in the tokenization service. You need a special service account that has frequently expiring tokens to grant access to Cloud KMS and to execute the tokenizer.\nThe following figure illustrates the tokenization app architecture that you create in this tutorial.## Objectives\n- Create a service account.\n- Set up Cloud KMS.\n- Create two Cloud Functions.\n- Create an authentication token.\n- Call the tokenizer.\n## Costs\nIn this document, you use the following billable components of Google Cloud:- [Cloud KMS](/kms/pricing) \n- [Cloud Functions](/functions/pricing) \n- [Cloud Build](/build/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . ## Before you begin\n- In the Google Cloud console, go to the project selector page. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- To begin creating a   Google Cloud project, click **Create project** .\n- Name your project. Make a note of your generated project ID.\n- Edit the other fields as needed.\n- To create the project, click **Create** .\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the Cloud Build, Cloud Functions, and Cloud KMS APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=cloudbuild.googleapis.com,cloudfunctions.googleapis.com,cloudkms.googleapis.com&redirect=https://console.cloud.google.com) \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Create the service accountThe [default runtime service account](https://cloud.google.com/functions/docs/securing/function-identity#runtime_service_account) for Cloud Functions has the Editor role, which allows broad access to many Google Cloud services. Although this is the fastest way to develop functions, Google recommends using the default service account only for testing and development. You create a service account to limit the APIs that the function can use in accordance with the [principle of least privilege](https://cloud.google.com/blog/products/application-development/least-privilege-for-cloud-functions-using-cloud-iam) . To create a service account, do the following:- In the Google Cloud console, go to the **Service Accounts** page. [Go to Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select your project.\n- Click add **Create Service Account** .\n- In the **Service account name** field, enter `Tokenization Service User` . The Google Cloud console fills in the **Service account ID** field based on this name.\n- Optional: In the **Service account description** field, enter a description for the service account.\n- Click **Create and continue** .\n- Click **Select a role** , and then select **Cloud KMS CryptoKey Encrypter/Decrypter** .\n- To finish creating the service account, click **Done** .You now have a service account user with the following email address:```\ntokenization-service-user@YOUR_PROJECT_ID.iam.gserviceaccount.com\n```\n## Set up Cloud KMS\n- In the Google Cloud console, open **Key Management** . [Go to the Cryptographic Keys page](https://console.cloud.google.com/security/kms) \n- Click **+ Create key ring **. In the dialog that appears, do the following:- Name the key ring`tokenization-service-kr`.\n- For **Key ring location** , select **global** . This is a common choice that suffices for this tutorial. Before you make any production architecture decisions, however, make sure you understand the [differences between the various Cloud KMS locations](/kms/docs/locations) .\n- Double-check your choices, because you [can't delete or rename key rings](/kms/docs/faq#cannot_delete) after they are created.\n- Click **Create** . \nThe system creates the key ring and forwards you to the key creation page.\n- In the **Create key** dialog, do the following:- Name the key`cc-tokenization`.\n- For **Purpose** , select`Symmetric encrypt/decrypt`.\n- Set **Rotation period** to a value you choose, and click **Create** . **Note:** Keep track of your entries here. You need the project name, key ring name, key ring location, and key name to use in the Cloud Function.## Create Cloud FunctionsThis tutorial assumes you'll be using Cloud Shell. If you use a different terminal, be sure you have the [latest version of the Google Cloud CLI](https://cloud.google.com/sdk/gcloud/) .- In the Google Cloud console, open Cloud Shell: [Go to Cloud Shell](https://console.cloud.google.com/cloudshell/) \n- Clone the GitHub project repository and move to the working folder:```\ngit clone https://github.com/GoogleCloudPlatform/community gcp-communitycd gcp-community/tutorials/pci-tokenizer/\n```The `gcs-cf-tokenizer` folder contains the file `index.js` , which is the source for two different Cloud Functions that you will create. It also contains `package.json` , which tells Cloud Functions which packages to run.\n- Apply the KMS configuration Copy the config template file and open it for editing:```\ncp config/default.json config/local.jsonnano config/local.json\n```The Node.js runtime [requires you to explicitly define](/functions/docs/configuring/env-var#nodejs_10_and_subsequent_runtimes) the Google Cloud project ID:```\n\"project_id\":    \"YOUR_PROJECT_ID\"\n```\n- Find the KMS configuration and apply the KMS values you created in the previous section:```\n\"location\": \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"global\",\"key_ring\": \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"tokenization-service-kr\",\"key_name\": \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"cc-tokenization\"\n```\n- Deploy the tokenize function.```\ngcloud functions deploy tokenize --runtime=nodejs18 --trigger-http \\\n --entry-point=kms_crypto_tokenize --memory=256MB \\\n --service-account=tokenization-service-user@YOUR_PROJECT_ID.iam.gserviceaccount.com \\\n --no-allow-unauthenticated --source=.\n```This function turns the credit card information into a token.\n- Look for the value of the URL under `httpsTrigger` in the output of the `gcloud functions deploy` command. Store the value of the URL in the `TOK_URL` environment variable:```\nTOK_URL=\"TOK_URL\"\n```You will use the `TOK_URL` environment variable to call the `tokenize` function.\n- Deploy the detokenize function in KMS mode.```\ngcloud functions deploy detokenize --runtime=nodejs18 --trigger-http \\\n --entry-point=kms_crypto_detokenize --memory=256MB \\\n --service-account=tokenization-service-user@YOUR_PROJECT_ID.iam.gserviceaccount.com \\\n --no-allow-unauthenticated --source=.\n```This function reverses the tokenization process.\n- Look for the value of the URL under `httpsTrigger` in the output of the `gcloud functions deploy` command. Store the value of the URL in the `DETOK_URL` environment variable:```\nDETOK_URL=\"DETOK_URL\"\n```You will use the `DETOK_URL` environment variable to call the detokenize function.You have created two separate Cloud Functions: one for turning the card number into a token, and another to reverse the process. The differing entry points direct execution to the proper starting function in the `index.js` file.\n- When the functions are deployed, open the Cloud Functions console. [Open the Cloud Functions console](https://console.cloud.google.com/functions/list) \n- Verify that the functions were created. If all went well, you will see your two functions with a check mark next to each one. \n### Create an authentication tokenThe `no-allow-unauthenticated` option in the `gcloud functions deploy` command means that a caller that invokes the functions must present an authentication token to assert the identity of the caller. The caller must have the `cloudfunctions.functions.invoke` permission. The following [pre-defined roles](https://cloud.google.com/functions/docs/reference/iam/roles) have this permission: Cloud Functions Invoker, Cloud Functions Admin, and Cloud Functions Developer.- Create the authentication token:```\nAUTH_TOKEN=$(gcloud auth print-identity-token)echo $AUTH_TOKEN\n```\nThese commands generate an authentication token string, store it in the environment variable `$AUTH_TOKEN` , and then display the token. Later you call the Cloud Functions that you deployed with the token.\n### Call the tokenizer\n- Create some sample data to pass to the tokenizer:```\nexport TOK_CC=4000300020001000export TOK_MM=11export TOK_YYYY=2028export TOK_UID=543210\n```\n- Generate an authentication token as described in the previous section, and then call the tokenizer:```\nCC_TOKEN=$(curl -s \\\n-X POST \"$TOK_URL\" \\\n-H \"Content-Type:application/json\" \\\n-H \"Authorization: Bearer $AUTH_TOKEN\" \\\n--data '{\"cc\": \"'$TOK_CC'\", \"mm\": \"'$TOK_MM'\", \"yyyy\": \"'$TOK_YYYY'\", \"user_id\": \"'$TOK_UID'\"}' \\\n)\necho $CC_TOKEN\n```The tokenization string representing the credit card data is displayed. This string has been stored in the environment variable `CC_TOK` . You can retrieve the card information by invoking the detokenizer.\n- Reverse the tokenization with the following command.```\nDETOK_DATA=$(curl -s \\\n-X POST \"$DETOK_URL\" \\\n-H \"Content-Type:application/json\" \\\n-H \"Authorization: Bearer $AUTH_TOKEN\" \\\n--data '{\"user_id\": \"'$TOK_UID'\", \"token\": \"'$CC_TOKEN'\"}' \\\n)\necho -e \"$DETOK_DATA\\n\"\n```The output looks something like the following:```\n{\"cc\":\"4000300020001000\",\"mm\":\"11\",\"yyyy\":\"2028\",\"userid\":\"543210\"}\n```This data is what was originally sent into the tokenizer, decrypted, and retrieved by your app.\n## Expand on this tutorialThe [sample code on GitHub](https://github.com/GoogleCloudPlatform/community/tree/master/tutorials/pci-tokenizer) is an excellent start, but there is more to consider before moving to production.\nIf you choose to use Cloud Functions for payment card tokenization, you might need to do more work to satisfy your Qualified Security Assessor or Self-Assessment Questionnaire. Specifically, PCI DSS sections 1.2 and 1.3 require tight controls on inbound and outbound traffic. Cloud Functions and App Engine don't offer a two-way configurable firewall, so you must either create compensating controls or deploy the tokenization service on Compute Engine or Google Kubernetes Engine. If you would like to explore containerization, the GitHub code is Docker compatible and contains supporting documentation.\nThis sample code also pulls in the npm (Node.js package manager) dependencies on deployment. In your production environment, always pin dependencies to specific vetted versions. Then bundle these versions with the app itself or serve them from a private and trusted location. Either approach helps you avoid downtime resulting from an outage at the public npm repository or from a supply-chain attack that infects packages that you assumed were safe. If you pre-build and bundle the complete app, your deployment time typically decreases, which means faster launches and smoother scaling.## Clean upTo clean up the individual resources you used in this tutorial, you can delete the project.- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n## What's next\n- [PCI Data Security Standard compliance](/solutions/pci-dss-compliance-in-gcp) .\n- [Using OAuth 2.0 to Access Google APIs](https://developers.google.com/identity/protocols/OAuth2) .\n- [PCI DSS requirements](https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf?agreement=true) .\n- [PCI DSS Tokenization Info Supplement](https://www.pcisecuritystandards.org/documents/Tokenization_Guidelines_Info_Supplement.pdf) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Cloud Architecture Center"}