{"title": "Apigee - Upgrading Apigee hybrid to version 1.9", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Upgrading Apigee hybrid to version 1.9\nYou are currently viewing version 1.9 of the Apigee hybrid documentation. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nThis procedure covers upgrading from Apigee hybrid version 1.8.x to Apigee hybrid version 1.9.4 and from previous releases of hybrid 1.9.x to version 1.9.4.\nUse the same procedures for minor version upgrades (for example version 1.8  to 1.9) and for patch release upgrades (for example  1.9.0 to 1.9.4).\nIf you are upgrading from Apigee hybrid version 1.7 or older, you must first upgrade to  hybrid version 1.8 before upgrading to version 1.9.4.  See the instructions for [Upgrading Apigee hybrid to version 1.8](/apigee/docs/hybrid/v1.8/upgrade) .\nStarting with version 1.9.0, Apigee hybrid only supports Apigee ingress gateway as the ingress layer.\n", "content": "## \n Upgrading to version 1.9.4 overview\nUpgrading to Apigee hybrid version 1.9 may require downtime.When upgrading the Apigee controller to version 1.9.4, all Apigee  deployments undergo a rolling restart. To minimize downtime in production hybrid environments  during a rolling restart, make sure you are running at least two clusters (in the same or  different region/data center). Divert all production traffic to a single cluster and take the  cluster you are about to upgrade offline, and then proceed with the upgrade process. Repeat  the process for each cluster.Apigee recommends that you upgrade all clusters as soon as possible to reduce the chances   of production impact. There is no time limit on when all remaining clusters must be upgraded   after the first one is upgraded. However, until all remaining clusters are upgraded the   following operations   will be impacted:- Cassandra backup and restore cannot work with mixed versions. For example, a backup    from Hybrid 1.8 cannot be used to restore a Hybrid    1.9 instance.\n- Cassandra data streaming will not work between mixed Hybrid versions. Therefore, your    Cassandra clusters cannot scale horizontally.\n- Region expansion and decommissioning will be impacted, because these operations depend on    Cassandra data streaming.\n**Note:** Management plane changes do not need to be suspended during an upgrade. Any required suspension to management plane changes are included in the upgrade instructions.\nThe procedures for upgrading Apigee hybrid are organized in the following sections:\n- [Prepare to upgrade](#prepare) .\n- [Install hybrid runtime version 1.9.4](#install-runtime) .## \n Prerequisites\n- These upgrade instructions assume you have Apigee hybrid version 1.8.x   installed and wish to upgrade it to version 1.9.4. If you are updating from  an earlier version, see the instructions for [Upgrading Apigee hybrid  to version 1.8](/apigee/docs/hybrid/v1.8/upgrade) .\n- In Apigee hybrid version 1.8, we introduced Apigee ingress gateway as an alternative ingress layer  to Anthos Service Mesh. Starting with version 1.9.0, Apigee hybrid requires using  Apigee ingress gateway and no longer supports using Anthos Service Mesh for ingress. If the installation you  are upgrading from uses Anthos Service Mesh, you must first migrate to using Apigee ingress gateway before  upgrading to version 1.9.4.Apigee ingress gateway uses a small subset of Anthos Service Mesh features for the ingress gateway.  Management and upgrade of those features are handled automatically by Apigee hybrid.  Therefore you do not need expertise with Anthos Service Mesh to install, upgrade, and manage the  Apigee hybrid ingress gateway.See [Migrating to Apigee ingress gateway](/apigee/docs/hybrid/v1.8/migrating-to-apigee-ingress) in the hybrid v1.8 documentation for instructions.## \n Prepare to upgrade to version 1.9\n### \n Back up your hybrid installation (recommended)\n- These instructions use the environment variablefor the directory  in your file system where you have installed`apigeectl`. If needed, change directory  into your`apigeectl`directory and define the variable with the following command:\n```\nexport APIGEECTL_HOME=$PWD\necho $APIGEECTL_HOME\n``````\nexport APIGEECTL_HOME=$PWD\necho $APIGEECTL_HOME\n``````\nset APIGEECTL_HOME=%CD%\necho %APIGEECTL_HOME%\n```\n- Make a backup copy of your version 1.8`$APIGEECTL_HOME/`directory. For example:```\ntar -czvf $APIGEECTL_HOME/../apigeectl-v1.8-backup.tar.gz $APIGEECTL_HOME\n```\n- Back up your Cassandra database following the instructions in [Cassandra backup and recovery](/apigee/docs/hybrid/v1.9/cassandra-backup-overview) .\n### \n Add the Cloud Trace Agent role to the service account for the Apigee runtime. (Optional)\nOptional: If you plan to use [Cloud trace](/trace/docs/overview) and you have not already added the `Cloud Trace Agent` role to your hybrid v1.8 installation, ensure your service account for your Apigee runtime services has the **Cloud Trace Agent** Google Cloud IAM role ( `roles/cloudtrace.agent` ).\nFor production environments, runtime service account is `apigee-runtime` . For non-production environments, runtime service account is `apigee-non-prod` .\nYou can add the role in the [Cloud console > IAM & Admin > Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) UI or with the following commands:\n- Get the email address for your service account with the following command:\n```\ngcloud iam service-accounts list --filter \"apigee-runtime\"\n```\nIf the email address matches the pattern `apigee-runtime@` ` **$ORG_NAME** ` `.iam.gserviceaccount.com` ,    you can use that pattern in the next step.```\ngcloud iam service-accounts list --filter \"apigee-non-prod\"\n```\nIf it matches the pattern `apigee-non-prod@` ` **$ORG_NAME** ` `.iam.gserviceaccount.com` ,    you can use that pattern in the next step.\n- Assign the **Cloud Trace Agent** role to the service account:\n```\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n --member=\"serviceAccount:apigee-runtime@$PROJECT_ID.iam.gserviceaccount.com\" \\\n --role=\"roles/cloudtrace.agent\"\n``````\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n --member=\"serviceAccount:apigee-non-prod@$PROJECT_ID.iam.gserviceaccount.com\" \\\n --role=\"roles/cloudtrace.agent\"\n``````\ngcloud projects add-iam-policy-binding hybrid-example-project \\\n --member=\"serviceAccount:apigee-runtime@hybrid-example-project.iam.gserviceaccount.com\" \\\n --role=\"roles/cloudtrace.agent\"\n```\nWhere: is the name of the Google Cloud project where Apigee hybrid is installed. **Note:** If your installation uses a custom name for the service account,   substitute that name for`apigee-runtime`or`apigee-non-prod`in the   command.\n### \n Install Apigee ingress gateway if your installation uses Anthos Service Mesh\nStarting with version 1.9, Apigee hybrid no longer supports using Anthos Service Mesh for ingress. If your hybrid installation is using Anthos Service Mesh, you must migrate your current installation to Apigee ingress gateway before installing hybrid version 1.9.\n- Add the [ingressGateways](/apigee/docs/hybrid/v1.9/config-prop-ref#ingressgateways) property to your overrides file.\n```\n ingressGateways:\n - name: INGRESS_NAME\n replicaCountMin: REPLICAS_MIN\n replicaCountMax: REPLICAS_MAX\n resources:\n  requests:\n  cpu: CPU_COUNT_REQ\n  memory: MEMORY_REQ\n  limits:\n  cpu: CPU_COUNT_LIMIT\n  memory: MEMORY_LIMIT\n svcAnnotations: # optional. See Known issue 243599452.\n  SVC_ANNOTATIONS_KEY: SVC_ANNOTATIONS_VALUE\n svcLoadBalancerIP: SVC_LOAD_BALANCER_IP # optional\n``````\n ingressGateways:\n - name: prod1\n replicaCountMin: 2\n replicaCountMax: 100\n resources:\n  requests:\n  cpu: 1\n  memory: 1Gi\n  limits:\n  cpu: 2\n  memory: 2Gi\n svcAnnotations: # optional. See Known issue 243599452.\n  networking.gke.io/load-balancer-type: \"Internal\"\n svcLoadBalancerIP: 198.252.0.123 \n```\n- is the name of the ingress deployment. This can be any name  that meets the following requirements:- Have a maximum length of 17 characters\n- Contain only lowercase alphanumeric characters, '-' or '.'\n- Start with an alphanumeric character\n- End with an alphanumeric character\nSee [ingressGateways[].name](/apigee/docs/hybrid/v1.9/config-prop-ref#ingressgateways-name) in the  Configuration property reference.\n- andare the minimum and maximum replica counts for  Apigee ingress gateway in your installation. For more information and default settings, see [ingressGateways[].replicaCountMin](/apigee/docs/hybrid/v1.9/config-prop-ref#ingressgateways-replicacountmin) and [ingressGateways[].replicaCountMax](/apigee/docs/hybrid/v1.9/config-prop-ref#ingressgateways-replicacountmax) in the Configuration property reference.\n- andare the CPU and memory request for each  replica of Apigee ingress gateway in your installation.Set these properties if you have previously set them for your   Anthos Service Mesh ingress gateway, for example in your`overlay.yaml`file.For more information and default settings, see [ingressGateways[].resources.requests.cpu](/apigee/docs/hybrid/v1.9/config-prop-ref#ingressgateways-resources-requests-cpu) and [ingressGateways[].resources.requests.memory](/apigee/docs/hybrid/v1.9/config-prop-ref#ingressgateways-resources-requests-memory) in the Configuration property reference.\n- andAre the maximum CPU and memory limits for  each replica of Apigee ingress gateway in your installation.Set these properties if you have previously set them for your   Anthos Service Mesh ingress gateway, for example in your`overlay.yaml`file.For more information and default settings, see [ingressGateways[].resources.limits.cpu](/apigee/docs/hybrid/v1.9/config-prop-ref#ingressgateways-resources-limits-cpu) and [ingressGateways[].resources.limits.memory](/apigee/docs/hybrid/v1.9/config-prop-ref#ingressgateways-resources-limits-memory) in the Configuration property reference.\n- (optional): **Note:** The`ingressGateways[].svcAnnotations`field in`overrides.yaml`is not working as expected. See [Known issue 243599452](/apigee/docs/release/known-issues#243599452) This is a key-value pair that provides   annotations for your default ingress service. Annotations are used by your cloud platform to   help configure your hybrid installation, for example setting the loadbalancer type to   either internal or external. For example:```\ningressGateways:\n svcAnnotations:\n  networking.gke.io/load-balancer-type: \"Internal\"\n```Annotations vary from platform to platform. Refer to your platform   documentation for required and suggested annotations. **Note:** You do not need to set`Annotations`if you are creating your own   Kubernetes service for ingress deployment as documented in [Expose Apigee ingress gateway](/apigee/docs/hybrid/v1.9/install-expose-apigee-ingress) .See [ingressGateways[].svcAnnotations](/apigee/docs/hybrid/v1.9/config-prop-ref#ingressgateways-svcannotations) in the Configuration property reference.\n- (optional) Allows you to assign a static IP address for your  load balancer. On platforms that support specifying the load balancer IP address, the load  balancer will be created with this IP address. On platforms that do not allow you to specify the  load balancer IP address, this property is ignored.If you do not have a static IP address allocated for your load balancer, leave this property  out of your overrides file. **Caution:** Make sure not to specify the same IP address as the current   istio-ingressgateway. This could cause problems while that service is still on the cluster. **Note:** You do not need to set`LoadBalancerIP`if you are creating your own   Kubernetes service for ingress deployment as documented in [Expose Apigee ingress gateway](/apigee/docs/hybrid/v1.9/install-expose-apigee-ingress) .See [ingressGateways[].svcLoadBalancerIP](/apigee/docs/hybrid/v1.9/config-prop-ref#ingressgateways-svcloadbalancerip) in the Configuration property reference.\n- Apply the changes to install Apigee ingress gateway with the following commands:```\n$APIGEECTL_HOME/apigeectl apply -f overrides/overrides.yaml\n```\n- Expose the Apigee ingress gateway. Follow the procedures in [Expose Apigee ingress gateway](/apigee/docs/hybrid/v1.9/install-expose-apigee-ingress) .\n- Test your new ingress gateway by calling a proxy. Ideally, test all crucial proxies you currently have deployed.\n- To switch the traffic, update your DNS records to point to the IP address for your new Apigee ingress gateway.  Depending on your DNS provider, you might be able to gradually shift traffic to the new endpoint.\n- Ensure all the runtime traffic is working by monitoring your dashboards. Only proceed to the next  step if everything is working as expected. Make sure no traffic is going through your old  ingress gateway (Anthos Service Mesh), as the DNS update may be slow to propagate because of DNS caching.\n- To stop Apigee from supplying configuration to Anthos Service Mesh, follow the steps in [Stop supplying configuration to ASM](/apigee/docs/hybrid/v1.9/managing-ingress#stop-supplying-configuration) in  the Managing Apigee ingress gateway guide.\n- Retest and monitor API proxy traffic.\n- Follow the instructions in the Anthos Service Mesh documentation to [Uninstall Anthos Service Mesh](https://cloud.google.com/service-mesh/docs/uninstall) from  the cluster.## \n Install the hybrid 1.9.4 runtime\n**Caution: ** Do not create new environments during the upgrade process.\n- Be sure you are in the hybrid base directory (the parent of the directory where  the`apigeectl`executable file is located):```\ncd $APIGEECTL_HOME/..\n```\n- Download the release package for your operating system using the following command.  Be sure to select your platform in the following table:\n **Linux 64 bit:** \n```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.9.4/apigeectl_linux_64.tar.gz\n``` **Mac 64 bit:** \n```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.9.4/apigeectl_mac_64.tar.gz\n``` **Windows 64 bit:** \n```\ncurl -LO ^\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.9.4/apigeectl_windows_64.zip\n```\n- Rename your current`apigeectl/`directory to a backup directory name. For example:\n```\nmv $APIGEECTL_HOME/ $APIGEECTL_HOME-v1.8/\n``````\nmv $APIGEECTL_HOME/ $APIGEECTL_HOME-v1.8/ \n``````\nrename %APIGEECTL_HOME% %APIGEECTL_HOME%-v1.8 \n```\n- Extract the downloaded gzip file contents into your hybrid base directory.  The hybrid base directory is the directory where the renamed `apigeectl-v1.8` directory is located:\n```\ntar xvzf filename.tar.gz -C ./\n``````\ntar xvzf filename.tar.gz -C ./\n``````\ntar xvzf filename.zip -C ./\n```\n- The tar contents are, by default, expanded into a directory with the version and platform in  its name. For example: `./apigeectl_1.9.4-xxxxxxx_linux_64` . Rename that directory  to `apigeectl` using the following command:\n```\nmv apigeectl_1.9.4-xxxxxxx_linux_64 apigeectl\n``````\nmv apigeectl_1.9.4-xxxxxxx_mac_64 apigeectl\n``````\nrename apigeectl_1.9.4-xxxxxxx_windows_64 apigeectl\n```\n- Change to the`apigeectl`directory:```\ncd ./apigeectl\n```This directory is the `apigeectl` home directory. It is where  the `apigeectl` executable command is located.\n- These instructions use the environment variable` **$APIGEECTL_HOME** `for the directory  in your file system where the`apigeectl`utility is installed. If needed, change directory  into your`apigeectl`directory and define the variable with the following command:\n```\nexport APIGEECTL_HOME=$PWD\n```\n```\necho $APIGEECTL_HOME\n``````\nexport APIGEECTL_HOME=$PWD\n```\n```\necho $APIGEECTL_HOME\n``````\nset APIGEECTL_HOME=%CD%\n```\n```\necho %APIGEECTL_HOME%\n```\n- Verify the version of`apigeectl`with the`version`command:```\n./apigeectl version\n``````\nVersion: 1.9.4\n```\n- Move to the`` `/hybrid-files`directory. The`hybrid-files`directory is where configuration files such as the overrides file, certs, and service accounts  are located. For example:```\ncd $APIGEECTL_HOME/../hybrid-files\n```\n- Verify that`kubectl`is set to the correct context using the following command.  The current context should be set to the cluster in which you are upgrading Apigee hybrid.```\nkubectl config get-contexts | grep \\*\n```\n- In the`hybrid-files`directory:- Update the following symbolic links to`$APIGEECTL_HOME`. These links allow you to run the newly installed`apigeectl`command from inside the`hybrid-files`directory:```\nln -nfs $APIGEECTL_HOME/tools tools\nln -nfs $APIGEECTL_HOME/config config\nln -nfs $APIGEECTL_HOME/templates templates\nln -nfs $APIGEECTL_HOME/plugins plugins\n```\n- To check that the symlinks were created correctly, execute the following command and make  sure the link paths point to the correct locations:```\nls -l | grep ^l\n```\n- Do a dry run initialization to check for errors:```\n${APIGEECTL_HOME}/apigeectl init -f OVERRIDES_FILE --dry-run=client\n```Where is the name of your overrides file, for example `./overrides/overrides.yaml` . **Tip:** You can replace``in the code   sample above with the name and path to your overrides file, and every instance on this page   will be replaced.\n- If there are no errors, initialize hybrid 1.9.4:```\n$APIGEECTL_HOME/apigeectl init -f OVERRIDES_FILE\n``` **Note:** `apigeectl`installs and configures   Apigee ingress gateway when you run`apigeectl init`.\n- Check the initialization status:```\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```On success, the output says: `All containers ready.` ```\nkubectl describe apigeeds -n apigee\n```In the output, look for `State: running` .\n- Check for errors with a dry run of the`apply`command using the`--dry-run`flag:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --dry-run=client\n```\n- If there are no errors, apply your overrides. Select and follow the instructions for production environments or  non-prod environments, depending on your installation.\nFor production environments, upgrade each hybrid component individually, and    check the status of the upgraded component before proceeding to the next component.- Be sure you are in the`hybrid-files`directory.\n- Apply your overrides to upgrade Cassandra:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --datastore\n```\n- Check completion:```\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n``` **Tip:** If`check-ready`fails, you can get more     information about your pods with:```\nkubectl -n NAMESPACE get pods\n```Where is your Apigee hybrid namespace.Proceed to the next step only when the pods are ready.\n- Apply your overrides to upgrade Telemetry components and check completion:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --telemetry\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\n- Bring up Redis components:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --redis\n```\n- Apply your overrides to upgrade the org-level components (MART, Watcher and Apigee    Connect) and check completion:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --org\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\n- Apply your overrides to upgrade your environments. You have two choices:- **Environment by environment** : Apply your overrides to one environment at a time and check completion. Repeat     this step for each environment:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --env ENV_NAME\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```Where is the name of the environment you are upgrading.\n- **All environments at one time** : Apply your overrides to all environments at once and check completion:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --all-envs\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\n- Apply your overrides to upgrade the`virtualhosts`components and check completion:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --settings virtualhosts\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\nIn most non-production, demo, or experimental environments, you can apply the overrides    to all components at once. If your non-production environment is large and complex or    closely mimics a production environment, you may want to use the instructions for    upgrading production environments.- Be sure you are in the`hybrid-files`directory.\n- ```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE\n```\n- Check the status:```\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```## Install 1.9.4-hotfix.1\nFollow these steps to install the hotfix release, `1.9.4-hotfix.1` :\n- Before doing these steps, you must be on Apigee hybrid version 1.9.4 or a later version. If you  are not on 1.9.4 or later, perform an upgrade to 1.9.4 before proceeding.\n- Open your`overrides.yaml`file.\n- In the`istiod`stanza, change the version of the image tag (if present)   to version`1.17.7`. For example:```\nistiod:\n image:\n url: \"gcr.io/apigee-release/hybrid/apigee-asm-istiod\"\n tag: \"1.17.7-asm.0-distroless\"\n```\n- Depending on how you chose to install Apigee hybrid, you may have an`ingressGateway`or`ingressGateways`stanza.   Locate the stanza that appears in your overrides file and change the version of the image tag (if present)   to version`1.17.7`. For example, if you have an`ingressGateway`stanza:```\ningressGateway:\n image:\n url: \"gcr.io/apigee-release/hybrid/apigee-asm-ingress\"\n tag: \"1.17.7-asm.0-distroless\"\n```or, if you have an `ingressGateways` stanza:```\ningressGateways:\n - name: gateway1\n image:\n  url: \"gcr.io/apigee-release/hybrid/apigee-asm-ingress\"\n  tag: \"1.17.7-asm.0-distroless\"\n ...\n - name: gateway2\n image:\n  url: \"gcr.io/apigee-release/hybrid/apigee-asm-ingress\"\n  tag: \"1.17.7-asm.0-distroless\"\n ...\n \n```\n- Save the file.\n- Execute the following command to initialize the`istiod`component:```\n$APIGEECTL_HOME/apigeectl init -f OVERRIDES_FILE\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\n- Execute the following command to apply changes to the Apigee ingress component(s). If you have    more than one organization, repeat this command for each one:```\n$APIGEECTL_HOME/apigeectl apply --org -f OVERRIDES_FILE\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\n- Verify the status of your pods:```\nkubectl get pods -n YOUR_APIGEE_NAMESPACE\n```## \n Upgrade your Kubernetes version\nUpgrade your Kubernetes platform to the versions supported by hybrid 1.9.  Follow your platform's documentation if you need help.\n**Congratulations!** You have upgraded to Apigee hybrid version 1.9.4. to test your upgrade, call a proxy against the new installation. For an example, see [Step 10: Deploy an API proxy](/apigee/docs/hybrid/v1.9/install-deploy-proxy) in the Apigee hybrid 1.9 installation guide.\n## \n Rolling back an upgrade\nFollow these steps to roll back a previous upgrade:\n- Clean up completed jobs for the hybrid runtime namespace, whereis the  namespace specified in your overrides file, if you specified a namespace. If not, the default namespace  is`apigee`:```\nkubectl delete job -n NAMESPACE \\\n $(kubectl get job -n NAMESPACE \\\n -o=jsonpath='{.items[?(@.status.succeeded==1)].metadata.name}')\n```\n- Clean up completed jobs for the`apigee-system`namespace:```\nkubectl delete job -n apigee-system \\\n $(kubectl get job -n apigee-system \\\n -o=jsonpath='{.items[?(@.status.succeeded==1)].metadata.name}')\n```\n- Change the`APIGEECTL_HOME`variable to point to the directory that contains the previous  version of`apigeectl`. For example:```\nexport APIGEECTL_HOME=PATH_TO_PREVIOUS_APIGEECTL_DIRECTORY\n```\n- In the root directory of the installation you want to roll back to, run`apigeectl apply`, check the status of your pods, and then run`apigeectl init`. Be sure to use the original overrides file for the version you  wish to roll back to:- In the hybrid-files directory, run`apigeectl apply`:```\n$APIGEECTL_HOME/apigeectl apply -f ORIGINAL_OVERRIDES_FILE\n```Where is the relative path and filename of the overrides   file for your previous version hybrid installation, for example, `./overrides/overrides1.8.yaml` .\n- Check the status of your pods:```\nkubectl -n NAMESPACE get pods\n```Where is your Apigee hybrid namespace.\n- Check the status of`apigeeds`:```\nkubectl describe apigeeds -n apigee\n```Your output should look something like:```\nStatus:\u00a0 Cassandra Data Replication:\u00a0 Cassandra Pod Ips:\u00a0 \u00a0 10.8.2.204\u00a0 Cassandra Ready Replicas: \u00a01\u00a0 Components:\u00a0 \u00a0 Cassandra:\u00a0 \u00a0 \u00a0 Last Successfully Released Version:\u00a0 \u00a0 \u00a0 \u00a0 Revision: \u00a0v1-f8aa9a82b9f69613\u00a0 \u00a0 \u00a0 \u00a0 Version: \u00a0 v1\u00a0 \u00a0 \u00a0 Replicas:\u00a0 \u00a0 \u00a0 \u00a0 Available: \u00a01\u00a0 \u00a0 \u00a0 \u00a0 Ready: \u00a0 \u00a0 \u00a01\u00a0 \u00a0 \u00a0 \u00a0 Total: \u00a0 \u00a0 \u00a01\u00a0 \u00a0 \u00a0 \u00a0 Updated: \u00a0 \u00a01\u00a0 \u00a0 \u00a0 State: \u00a0 \u00a0 \u00a0 \u00a0running\u00a0 Scaling:\u00a0 \u00a0 In Progress: \u00a0 \u00a0 \u00a0 \u00a0 false\u00a0 \u00a0 Operation:\u00a0 \u00a0 Requested Replicas: \u00a00\u00a0 State: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 running\n```Proceed to the next step only when the `apigeeds` pod is running.\n- Run the following command to make note of what your new replica count values will be for   the message processor after the upgrade. If these values do not match what you have set   previously, change the values in your overrides file to match your previous   configuration.```\napigeectl apply -f ORIGINAL_OVERRIDES_FILE --dry-run=client --print-yaml --env ENV_NAME 2>/dev/null |grep \"runtime:\" -A 25 -B 1| grep \"autoScaler\" -A 2\n```Your output should look something like:```\n  autoScaler:\n  minReplicas: 2\n  maxReplicas: 10\n```\n- Run`apigeectl init`:```\n$APIGEECTL_HOME/apigeectl init -f ORIGINAL_OVERRIDES_FILE\n```", "guide": "Apigee"}