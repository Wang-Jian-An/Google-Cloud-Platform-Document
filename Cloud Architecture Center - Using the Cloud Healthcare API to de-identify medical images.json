{"title": "Cloud Architecture Center - Using the Cloud Healthcare API to de-identify medical images", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Using the Cloud Healthcare API to de-identify medical images\nLast reviewed 2023-03-28 UTC\nThis tutorial shows you how to use the DICOM de-identification operation of the\n [Cloud Healthcare API](/healthcare) \nto remove or modify personally identifying information (PII) and protected health information (PHI) from (\n [Digital Imaging and Communications in Medicine (DICOM)](https://www.dicomstandard.org/current) \n) data. De-identifying DICOM data helps to ensure patient privacy and to prepare healthcare data for use in research, data sharing, and machine learning.\n **Note:** The information provided to you in this tutorial and any third-party open source tools referenced therein are provided to you \"AS IS\" without any warranty, express or implied. Neither this tutorial nor the functionality described in this tutorial are guaranteed to satisfy any legal, regulatory, or compliance requirements, including requirements for the de-identification of data. It's your responsibility to ensure that you set the appropriate configuration parameters for the operation and evaluate the end result to determine whether it is acceptable for your use cases and any legal, regulatory, or compliance requirements you might have.\nThe tutorial and its accompanying conceptual document, [De-identification of medical images through the Cloud Healthcare API](/solutions/de-identification-of-medical-images-through-the-cloud-healthcare-api) , are intended for researchers, data scientists, IT teams, and healthcare and life sciences organizations. This tutorial guides you through two common use cases of de-identifying medical image data by using the Cloud Healthcare API. The conceptual document explains the rationale of DICOM data de-identification and outlines its high-level steps.\nThis tutorial assumes that you have a fundamental knowledge of Linux. A basic understanding of Google Cloud and DICOM standards is also helpful. Run all commands in this tutorial in a Linux terminal.\n", "content": "## Objectives\n- Use the DICOM de-identification operation of the Cloud Healthcare API to remove or modify PII and PHI in DICOM instances in a DICOM store.\n- Remove or modify PII and PHI metadata and burned-in text in one Cloud Healthcare API call.\n- Use either the`curl`command-line tool or the [Google Cloud CLI](/sdk/gcloud) to make DICOM de-identification Cloud Healthcare API calls.## CostsIn this document, you use the following billable components of Google Cloud:- [Cloud Healthcare API](/healthcare-api/pricing) \n- [Cloud Storage](/storage/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . ## Before you beginThis tutorial assumes that your DICOM images have already been imported into a DICOM store. For information about creating DICOM stores on Google Cloud, see [Creating and managing DICOM stores](/healthcare-api/docs/how-tos/dicom) . For information about importing DICOM data into DICOM stores, see [Importing and exporting DICOM data using Cloud Storage](/healthcare-api/docs/how-tos/dicom-import-export) .\nAdditionally, this tutorial assumes that:- You're working in a project called`MyProj`.\n- You've created a dataset called`dataset1`in the`us-central1`Google Cloud region in`MyProj`.\n- You've created a DICOM store called`dicomstore1`in`dataset1`.\nIf your resources are named differently, you'll need to modify the commands listed in this document accordingly.- In the Google Cloud console, go to the **Project selector** page. [Go to the Project Selector page](https://console.cloud.google.com/cloud-resource-manager) \n- Select a Google Cloud project called`MyProj`.\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the Cloud Healthcare API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=healthcare.googleapis.com) \n- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- In a shell, run the`gcloud components update`command to make sure that  you have the latest version of the gcloud CLI that includes  Cloud Healthcare API-related functionality.\n## Creating an IAM service accountThe Healthcare Dataset Administrator role includes all of the required roles for this tutorial.- [Create a service account](/iam/docs/creating-managing-service-accounts) .\n- [Assign the Healthcare Dataset Administrator role to the serviceaccount](/iam/docs/granting-roles-to-service-accounts#granting_access_to_a_service_account_for_a_resource) .\n- [Create and download the service account JSON key](/iam/docs/creating-managing-service-account-keys) .\n- Activate your service account key:```\ngcloud auth activate-service-account --key-file=path-to-key-file\n```The output is the following:```\nActivated service account credentials for: [key-name@project-name.iam.gserviceaccount.com]\n```- ``is the name that you assigned to the service account key.\n- ``is the name of your Google Cloud project.## Using a medical image viewerThis tutorial uses the Mach7 diagnostic viewer as a medical image viewer. You can request a demonstration version of the viewer at [the Mach7 website](https://mach7t.com/solutions/enterprise-diagnostic-viewing) \nTo use this viewer, assign the Healthcare DICOM Viewer role to your user account by performing the following steps:- As an administrator in the Google Cloud console, go to the **IAM** page. [Go to the IAM page](https://console.cloud.google.com/iam-admin/iam) \n- Click **Add** .\n- In the **New principals** field, enter your user account or your gmail address.\n- In the **Select a role** drop-down list, select **Cloud Healthcare** .\n- Hold your pointer over **Cloud Healthcare** and then select the **Healthcare DICOM Viewer** role.\n- Click **Save** .\nTo use the viewer for production purposes, you need to obtain a full version.## Obtaining an OAuth 2.0 access tokenTo use the Cloud Healthcare API to ingest data, you need an OAuth 2.0 access token that the commands in this tutorial obtain for you. In this tutorial, some of the example Cloud Healthcare API requests use the `curl` command-line tool. These examples use the `gcloud auth print-access-token` command to obtain an OAuth 2.0 bearer token and to include the token in the request's authorization header. For more information about this command, see [gcloud auth application-default print-access-token](/sdk/gcloud/reference/auth/application-default/print-access-token) .\nThis tutorial covers two of the most common use cases of removing identifying information from DICOM data. In both cases, the solution is provided by using either the `curl` command-line tool or the Google Cloud CLI. For more information about de-identifying DICOM data by using Cloud Healthcare API, configuration options, and sample `curl` and Windows PowerShell commands, see [De-identifying DICOM data](/healthcare-api/docs/how-tos/dicom-deidentify) .\n### Set up environment variablesThis step applies to both use cases.- Export the environment variables based on the location and attributes of the DICOM store where your images are stored.```\nexport PROJECT_ID=MyProjexport REGION=us-central1export SOURCE_DATASET_ID=dataset1export DICOM_STORE_ID=dicomstore1export DESTINATION_DATASET_ID=deid-dataset1\n```\n## Use case I: Removing all metadata and redacting all burned-in textThis use case shows how to de-identify a dataset containing DICOM stores and DICOM data by removing all metadata (except for the minimum data required for a valid DICOM resource) and by redacting all burned-in text from DICOM images. You can do these functions:- Create a`POST`request and provide the name of the destination dataset and an access token.\n- Remove all metadata and create a set of minimum`keepList`tags to have a valid DICOM resource.\n- Redact all sensitive burned-in text from the DICOM image by creating a`DeidentifyConfig`object with`image.text_redaction_mode`set to`REDACT_ALL_TEXT`.\nYou can do these functions all in one `curl` command like the following:\n```\ncurl -X POST \\\u00a0 \u00a0 -H \"Authorization: Bearer \"$(gcloud auth print-access-token) \\\u00a0 \u00a0 -H \"Content-Type: application/json; charset=utf-8\" \\\u00a0 \u00a0 --data \"{\u00a0 \u00a0 \u00a0 'destinationDataset': 'projects/$PROJECT_ID/locations/$REGION/datasets/$DESTINATION_DATASET_ID',\u00a0 \u00a0 \u00a0 'config': {\u00a0 \u00a0 \u00a0 \u00a0 'dicom': {'keepList': {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0'tags': [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'StudyInstanceUID',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'SOPInstanceUID',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'TransferSyntaxUID',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'PixelData',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'Columns',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'NumberOfFrames',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'PixelRepresentation',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'MediaStorageSOPClassUID',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'MediaStorageSOPInstanceUID',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'Rows',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'SamplesPerPixel',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'BitsAllocated',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'HighBit',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'PhotometricInterpretation',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'BitsStored' ] }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0},\u00a0 \u00a0 \u00a0 \u00a0 'image': {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'textRedactionMode': 'REDACT_ALL_TEXT'\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\" \"https://healthcare.googleapis.com/v1/projects/$PROJECT_ID/locations/$REGION/datasets/$SOURCE_DATASET_ID:deidentify\"\n```\nAlternatively, you can complete the same de-identification operation without knowing or specifying any tag name by using the `MINIMAL_KEEP_LIST_PROFILE` tag filter profile. See the following example:\n **Note:** It is not possible to use a tag filter profile and `keepList` or `removeList` tags together in the same Cloud Healthcare API call.\n```\ncurl -X POST \\\u00a0 \u00a0 -H \"Authorization: Bearer \"$(gcloud auth print-access-token) \\\u00a0 \u00a0 -H \"Content-Type: application/json; charset=utf-8\" \\\u00a0 \u00a0 --data \"{\u00a0 \u00a0 \u00a0 'destinationDataset': 'projects/$PROJECT_ID/locations/$REGION/datasets/$DESTINATION_DATASET_ID',\u00a0 \u00a0 \u00a0 'config': {'dicom':{'filterProfile':'MINIMAL_KEEP_LIST_PROFILE'},\u00a0 \u00a0 \u00a0 \u00a0 'image': {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'textRedactionMode': 'REDACT_ALL_TEXT'\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\" \"https://healthcare.googleapis.com/v1/projects/$PROJECT_ID/locations/$REGION/datasets/$SOURCE_DATASET_ID:deidentify\"\n```\nIn all the preceding commands, if the request is successful, the server returns a response in JSON format, like the following:\n```\n{\n \"name\": \"projects/$PROJECT_ID/locations/$REGION/datasets/$SOURCE_DATASET_ID/OPERATION_NAME\"\n}\n```\nThe response contains an operation name. You can use the operation name with the [Operation get method](/healthcare-api/docs/reference/rest/v1/projects.locations.datasets.operations/get) to track the status of the operation.\n```\ncurl -X GET \\\u00a0 \u00a0 -H \"Authorization: Bearer \"$(gcloud auth print-access-token) \\\u00a0 \u00a0 -H \"Content-Type: application/json; charset=utf-8\" \\\"https://healthcare.googleapis.com/v1/projects/$PROJECT_ID/locations/$REGION/datasets/$SOURCE_DATASET_ID/operations/OPERATION_NAME\"\n```\nIf the request is successful, the server returns a response in JSON format. After the de-identification process completes, the response includes `\"done\": true` .\n```\n{\n \"name\": \"projects/$PROJECT_ID/locations/$REGION/datasets/$SOURCE_DATASET_ID/operations/OPERATION_NAME\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.healthcare.v1.OperationMetadata\",\n \"apiMethodName\": \"google.cloud.healthcare.v1.dataset.DatasetService.DeidentifyDataset\",\n \"createTime\": \"2018-01-01T00:00:00Z\",\n \"endTime\": \"2018-01-01T00:00:00Z\"\n },\n \"done\": true,\n \"response\": {\n \"@type\": \"...\",\n \"successStoreCount\": \"SUCCESS_STORE_COUNT\"\n }\n}\n```\nYou can also use the Google Cloud CLI to Google Cloud to run all versions of the Cloud Healthcare API, including the de-identification API. For a complete list of available commands, see the [Cloud Healthcare API gcloud documentation](/sdk/gcloud/reference/healthcare) or execute the following command:\n```\ngcloud healthcare --help\n```\nThe following sample shows how to use the gcloud CLI to de-identify a dataset containing DICOM stores and DICOM data in order to remove all metadata and redact all burned-in text from DICOM images.\n```\ngcloud healthcare datasets deidentify $SOURCE_DATASET_ID \\--location $REGION \\--dicom-filter-tags=StudyInstanceUID,SOPInstanceUID,TransferSyntaxUID,PixelData,Columns,NumberOfFrames,PixelRepresentation,MediaStorageSOPClassUID,MediaStorageSOPInstanceUID,Rows,SamplesPerPixel,BitsAllocated,HighBit,PhotometricInterpretation,BitsStored \\--text-redaction-mode all \\--destination-dataset projects/$PROJECT_ID/locations/$REGION/datasets/$DESTINATION_DATASET_ID \\--async\n```\nIf the request is successful, the server returns a response like the following:\n```\nRequest issued for: [$SOURCE_DATASET_ID]\nCheck operation [OPERATION NAME] for status.\nname: projects/$PROJECT_ID/locations/$REGION/datasets/$SOURCE_DATASET_ID/operations/OPERATION_NAME\n```\nTo check the operation status, run the following command:\n```\ngcloud healthcare operations describe --dataset $SOURCE_DATASET_ID OPERATION_NAME\n```\nIf the request is successful, the server returns a response like the following. After the de-identification process completes, the response contains `\"done\": true` .\n```\ndone: true\nmetadata:\n '@type': type.googleapis.com/google.cloud.healthcare.v1.OperationMetadata\n apiMethodName: google.cloud.healthcare.v1.dataset.DatasetService.DeidentifyDataset\n \"createTime\": \"2018-01-01T00:00:00Z\",\n \"endTime\": \"2018-01-01T00:00:00Z\"\nname: \"projects/$PROJECT_ID/locations/$REGION/datasets/$SOURCE_DATASET_ID/operations/OPERATION_NAME\"\nresponse:\n '@type': type.googleapis.com/google.cloud.healthcare.v1.dataset.DeidentifySummary\n successResourceCount: 'SUCCESS_RESOURCE_COUNT'\n successStoreCount: 'SUCCESS_STORE_COUNT'\n```## Use case II: Modifying metadata and redacting sensitive burned-in textThis use case shows how to to de-identify a dataset containing DICOM stores and DICOM data by using the `filterProfile` tag filtering method to remove some metadata, modify other metadata, and redact sensitive burned-in text associated with images. The goal is to redact the `PERSON_NAME` value, replace the `PHONE_NUMBER` value with asterisks, and modify `DATE` and `DATE_OF_BIRTH` to a date value in the range of 100 days of the original values.\nIn this use case, the provided crypto key, `U2FsdGVkX19bS2oZsdbK9X5zi2utBn22uY+I2Vo0zOU=` , is an AES-encrypted 256 bit base64-encoded key generated by using the following command. When prompted, an empty password is provided to the command:\n```\n\u00a0echo -n \"test\" | openssl enc -e -aes-256-ofb -a -salt\n```\n **Note:** If you don't provide a key, the Cloud Healthcare API generates its own key each time the de-identification operation runs on date values. This can result in inconsistent date outputs between runs.\nYou can do these functions:- Create a`POST`request and provide the name of the destination dataset and an access token.\n- Remove some metadata and modify other metadata in DICOM tags using the`DEIDENTIFY_TAG_CONTENT`filter profile with appropriate combinations of info types and primitive transformations.\n- Redact burned-in text from a DICOM image by setting image.text_redaction_mode to`REDACT_SENSITIVE_TEXT`.\nYou can do these functions all in one `curl` command like the following:\n```\ncurl -X POST \\\u00a0 \u00a0 -H \"Authorization: Bearer \"$(gcloud auth print-access-token) \\\u00a0 \u00a0 -H \"Content-Type: application/json; charset=utf-8\" \\\u00a0 \u00a0 --data \"{\u00a0 \u00a0 \u00a0 'destinationDataset': 'projects/$PROJECT_ID/locations/$REGION/datasets/$DESTINATION_DATASET_ID',\u00a0 \u00a0 \u00a0 'config':{\u00a0 \u00a0 'dicom':{'filterProfile':'DEIDENTIFY_TAG_CONTENTS'},\u00a0 \u00a0 'text':{\u00a0 \u00a0 \u00a0 \u00a0 'transformations':[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {'infoTypes':['PERSON_NAME'], 'redactConfig':{}},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {'infoTypes':['PHONE_NUMBER'], 'characterMaskConfig':{'maskingCharacter':''}},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {'infoTypes':['DATE', 'DATE_OF_BIRTH'], 'dateShiftConfig':{'cryptoKey':'U2FsdGVkX19bS2oZsdbK9X5zi2utBn22uY+I2Vo0zOU='}}]},\u00a0 \u00a0 'image':{'textRedactionMode':'REDACT_SENSITIVE_TEXT'}}}\" \\\"https://healthcare.googleapis.com/v1/projects/$PROJECT_ID/locations/$REGION/datasets/$SOURCE_DATASET_ID:deidentify\"\n```\nIf the request is successful, the server returns a response in JSON format like the following:\n```\n{\n \"name\": \"projects/$PROJECT_ID/locations/$REGION/datasets/$SOURCE_DATASET_ID/OPERATION_NAME\"\n}\n```\nThe response contains an operation name. You can use the [Operation get method](/healthcare-api/docs/reference/rest/v1/projects.locations.datasets.operations/get) to track the status of the operation:\n```\ncurl -X GET \\\u00a0 \u00a0 -H \"Authorization: Bearer \"$(gcloud auth print-access-token) \\\u00a0 \u00a0 -H \"Content-Type: application/json; charset=utf-8\" \\\"https://healthcare.googleapis.com/v1/projects/$PROJECT_ID/locations/$REGION/datasets/$SOURCE_DATASET_ID/operations/OPERATION_NAME\"\n```\nIf the request is successful, the server returns the following response in JSON format:\n```\n{\n \"name\": \"projects/$PROJECT_ID/locations/$REGION/datasets/$SOURCE_DATASET_ID/operations/OPERATION_NAME\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.healthcare.v1.OperationMetadata\",\n \"apiMethodName\": \"google.cloud.healthcare.v1.dataset.DatasetService.DeidentifyDataset\",\n \"createTime\": \"2018-01-01T00:00:00Z\",\n \"endTime\": \"2018-01-01T00:00:00Z\"\n },\n \"done\": true,\n \"response\": {\n \"@type\": \"...\",\n \"successStoreCount\": \"SUCCESS_STORE_COUNT\"\n }\n}\n```## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n### Delete the individual resources\n- Delete the destination datasets. If needed, add the `--location` parameter and specify the region for your dataset.```\ngcloud healthcare datasets delete $DESTINATION_DATASET_ID\n```\n## What's next\n- [De-identification of medical images through the Cloud Healthcare API](/solutions/de-identification-of-medical-images-through-the-cloud-healthcare-api) \n- [De-identifying DICOM Data](/healthcare-api/docs/how-tos/dicom-deidentify) \n- [Healthcare API Beta Announcement](/blog/topics/healthcare-life-sciences/announcing-the-cloud-healthcare-api-beta-improving-data-access-and-shareability-across-organizations) \n- [Exporting DICOM Metadata to BigQuery](/healthcare-api/docs/how-tos/dicom-export-bigquery) \n- For more information about DICOM capabilities, see the [DICOM conformance statement](/healthcare-api/docs/dicom) .\n- For more information about the Cloud Healthcare API, including information about support for FHIR and HL7v2, see the [Cloud Healthcare API documentation](/healthcare-api/docs) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Cloud Architecture Center"}