{"title": "Compute Engine - Scale based on Monitoring metrics", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Scale based on Monitoring metrics\nAutoscaling based on [Cloud Monitoring](/monitoring/docs/monitoring-overview) metrics lets you adjust the capacity needed according to measurements from your app. When you autoscale a MIG based on a metric, the autoscaler creates VMs when the metric value increases and deletes VMs when the value decreases.\nFor example, you can define how many VMs you need per user count, latency, or the number of messages in a Pub/Sub subscription. You can use either the [built-in metrics](/monitoring/api/metrics_gcp) provided by the Monitoring service, or the [custom metrics](/monitoring/custom-metrics) that you export from your application.\nThis document describes how to autoscale a [managed instance group (MIG)](/compute/docs/instance-groups#managed_instance_groups) based on Monitoring metrics.\nYou can also autoscale a MIG based on [CPU utilization](/compute/docs/autoscaler/scaling-cpu) , [load balancing serving capacity](/compute/docs/autoscaler/scaling-load-balancing) , or [schedules](/compute/docs/autoscaler/scaling-schedules) .\n", "content": "## Before you begin\n- Read about autoscaler [fundamentals](/compute/docs/autoscaler#fundamentals) .\n- Read about [Monitoring metrics concepts](#metrics_concept) used in an autoscaling configuration.\n- If you want to autoscale based on an [Ops Agent metric](/monitoring/api/metrics_opsagent) , install the [Ops Agent](/monitoring/agent/ops-agent) .\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nTo use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```## Limitations\nScaling based on Monitoring metrics is restricted by the [limitations for all autoscalers](/compute/docs/autoscaler#specifications) as well as by the following limitations:\n- You can configure autoscaling based on up to 5 Monitoring metrics per MIG.\n- You can autoscale based on metrics that have`INT64`or`DOUBLE`value types only. Other [value types](/monitoring/api/v3/kinds-and-types#value-types) are not supported.\n- You cannot configure the same metric more than once in an autoscaling policy.## Configure autoscaling based on Monitoring metrics\nYou can use a Monitoring metric value for autoscaling in two different ways:\n- **Utilization target** : If you want the autoscaler to maintain a metric at a specific value, [configure a utilization target](#configure_utilization_target) . The autoscaler creates VMs when the metric value is above the target and deletes VMs when the metric value is below the target. This is useful for metrics like network traffic, memory/disk usage, or average latency of your application. The following diagram shows how an autoscaler adds and removes VMs in response to a metric value to maintain a utilization target.\n- **Single instance assignment** : If you want to autoscale based on how much work is available to assign to each VM, [configure a single instance assignment](#configure_single_instance_assignment) . The single instance assignment that you specify represents how much work you expect each VM to handle. The autoscaler divides the metric value by the single instance assignment value to calculate how many VMs are needed. For example, if the metric is equal to 100 and the single instance assignment is 5, then the autoscaler creates 20 VMs in the MIG. This is useful for metrics that reflect the amount of work like Pub/Sub queue length or batch jobs count. Single instance assignment does not apply to metrics that come from each VM. The following diagram shows the proportional relationship between the metric value and the number of VMs when scaling with single instance assignment.\n### Autoscale to maintain a metric at a target value\nWhen you want to maintain a metric at a target value, specify a utilization target. The autoscaler creates VMs when the metric value is above the target and deletes VMs when the metric value is below the target.\n- If the metric comes from each VM in your MIG, then the autoscaler takes the average metric value across all VMs in the MIG and compares it with the utilization target. For example, if you want to autoscale using the [tcp_connections metric](/monitoring/api/metrics_agent#agent-network) that gives the number of TCP connections on a VM, then the autoscaler takes an average number of TCP connections across all VMs in the MIG to compare with the target. When you use such metrics that originate from a VM, the MIG cannot scale in to `0` because the autoscaler requires at least one VM to publish a metric value.\n- If the metric applies to the whole MIG and does not come from the VMs in your MIG, then the autoscaler compares the metric value with the utilization target. For example, you can use a [custom metric](/monitoring/custom-metrics) that measures the latency of your application.\nWhen your metric has multiple values, apply a filter to autoscale using an individual value from the metric. For more details about metric filters and other fields that you can use in your configuration, see [Monitoring metrics concepts](#metrics_concept) .- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- If you do not have a managed instance group, [create one](/compute/docs/instance-groups/creating-groups-of-managed-instances) . Otherwise, click the name of a MIG from the list to open that instance group page.\n- Click **Edit** .\n- If no autoscaling configuration exists:- Under **Autoscaling** , click **Configure autoscaling** .\n- Under **Autoscaling mode** , select **On: add and remove instances to the group** to enable autoscaling.\n- Under **Autoscaling** , in the **Autoscaling signals** section, if a signal for a Cloud Monitoring metric exists, you can click to edit it, or click **Add a signal** to add a new signal.\n- Set the **Signal type** to **Cloud Monitoring metric** .\n- Click **Configure** . In the **Resource and metric** pane that opens, do the following:- Click **Select a metric** .- Select the metric that you want to use for autoscaling. You can filter the metrics based on any keywords\u2014for example, memory, bytes, disk.\n- Click **Apply** . The pane displays a chart that shows the data from the selected metric.\n- If you want to use specific data from the metric, add a filter based on labels as follows:- In the **Filters** section, click **Add a filter** .\n- Select a **Label** and enter a **Value** .\n- Click **Done** . The chart refreshes to show you the filtered value of the metric.\n **Note:** The filter `project_id=` `` is added by default because you can use the metric values from the resources in the current project only. If you selected a metric that comes from each VM ( `gce_instance` ), then an additional filter `instance_group=` `` is also added because you can autoscale based on the metric values from the VMs in the current MIG only.\n- To view the aggregated value of metric that will be used to autoscale your MIG, toggle the **Show aggregation in chart** button. The chart refreshes to show the aggregated value.\n- In the **Metric target options for autoscaling** section, select **Utilization target** .\n- Provide the following:- **Utilization target** : Specify the value that the autoscaler must maintain. This must be a positive number. For example, both 24.5 and 100 are acceptable values.\n- **Utilization target type** : Select a target type that corresponds to the metric's kind of measurement. For accurate comparisons, if the utilization target is measured per seconds, then use **Delta / second** as the target type. Likewise, use **Delta / min** for a utilization target measured per minutes.- **Gauge** : The autoscaler calculates the average value of the data collected in the last couple of minutes and compares that to the utilization target.\n- **Delta / min** : The autoscaler calculates the average rate of growth per minute and compares that to the utilization target.\n- **Delta / second** : The autoscaler calculates the average rate of growth per second and compares that to the utilization target.\n- When you've finished configuring the metric, click **Select** .\n- Review the metric details and click **Done** .\n- To complete the configuration, click **Save** .\nTo configure autoscaling based on Monitoring metrics, use the [set-autoscaling command](/sdk/gcloud/reference/compute/instance-groups/managed/set-autoscaling) .\n **Note:** If autoscaling is already enabled for a MIG, the [set-autoscaling command](/sdk/gcloud/reference/compute/instance-groups/managed/set-autoscaling) overwrites the existing autoscaler to the new specifications.\nUse the following command to autoscale based on a Monitoring metric with a utilization target.\n```\ngcloud compute instance-groups managed set-autoscaling MIG_NAME \\\n --max-num-replicas=MAX_INSTANCES \\\n --min-num-replicas=MIN_INSTANCES \\\n --update-stackdriver-metric=METRIC_URL \\\n --stackdriver-metric-utilization-target=TARGET_VALUE \\\n --stackdriver-metric-utilization-target-type=TARGET_TYPE\n```\nIf your metric has multiple values and you want to use an individual value for autoscaling, then use the `--stackdriver-metric-filter` flag as given in the following command.\n```\ngcloud compute instance-groups managed set-autoscaling MIG_NAME \\\n --max-num-replicas=MAX_INSTANCES \\\n --min-num-replicas=MIN_INSTANCES \\\n --update-stackdriver-metric=METRIC_URL \\\n --stackdriver-metric-utilization-target=TARGET_VALUE \\\n --stackdriver-metric-utilization-target-type=TARGET_TYPE \\\n --stackdriver-metric-filter=\"METRIC_FILTER\"\n```\nReplace the following:- ``: the MIG in which you want to add an autoscaler.\n- ``: the maximum number of VMs that the MIG can have.\n- ``: the minimum number of VMs that the MIG needs to have.\n- ``: a protocol-free URL of a Monitoring metric. For example,`compute.googleapis.com/instance/uptime`. If you use a custom metric, it must meet the [custom metric requirements](#custom_metrics) .\n- ``: the metric value that the autoscaler attempts to maintain.\n- ``: the value type for the metric.- `gauge`the autoscaler computes the average value of the data collected in the last couple of minutes and compares that to the utilization target.\n- `delta-per-minute`the autoscaler calculates the average rate of growth per minute and compares that to the utilization target.\n- `delta-per-second`the autoscaler calculates the average rate of growth per second and compares that to the utilization target. For accurate comparisons, if you set the utilization target in seconds, use`delta-per-second`as the target type. Likewise, use`delta-per-minute`for a utilization target in minutes.\n- ``: apply a filter to use an individual value from a metric having multiple values and to specify the monitored resource type. If you use a metric that comes from each VM, you do not have to specify the monitored resource type because [gce_instance](/monitoring/api/resources#tag_gce_instance) is used as default. For other metrics, use`resource.type`in the filter expression to specify the monitored resource. To learn more about metric filter, see [Monitoring metrics concepts](#metrics_concept) .\nTo see a full list of available commands and flags for the gcloud CLI, see the [gcloud reference](/sdk/gcloud/reference/compute/instance-groups/managed) .\n **Note:** Although autoscaling is a feature of managed instance groups, it is a separate API resource. Keep that in mind when you construct API requests for autoscaling.\nTo configure autoscaling based on Monitoring metrics for a zonal MIG, use the [autoscalers](/compute/docs/reference/rest/v1/autoscalers) resource or, for a regional MIG, use the [regionAutoscalers](/compute/docs/reference/rest/v1/regionAutoscalers) resource.\nMake the following call to autoscale a zonal MIG based on a Monitoring metric with a utilization target.\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/autoscalers\n{\n \"name\": \"AUTOSCALER_NAME\",\n \"target\": \"zones/ZONE/instanceGroupManagers/MIG_NAME\",\n \"autoscalingPolicy\": {\n \"maxNumReplicas\": MAX_INSTANCES,\n \"minNumReplicas\": MIN_INSTANCES,\n \"customMetricUtilizations\": [ {\n  \"metric\": \"METRIC_URL\",\n  \"utilizationTarget\": TARGET_VALUE,\n  \"utilizationTargetType\": TARGET_TYPE\n }\n ],\n }\n}\n```\nIf your metric has multiple values and you want to use an individual value for autoscaling, then use the `filter` parameter as given in the following API call.\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/autoscalers\n{\n \"name\": \"AUTOSCALER_NAME\",\n \"target\": \"zones/ZONE/instanceGroupManagers/MIG_NAME\",\n \"autoscalingPolicy\": {\n \"maxNumReplicas\": MAX_INSTANCES,\n \"minNumReplicas\": MIN_INSTANCES,\n \"customMetricUtilizations\": [ {\n  \"metric\": \"METRIC_URL\",\n  \"utilizationTarget\": TARGET_VALUE,\n  \"utilizationTargetType\": TARGET_TYPE,\n  \"filter\": \"METRIC_FILTER\"\n }\n ],\n }\n}\n```\nReplace the following:- ``: your [project ID](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- ``: the zone where the MIG is located.\n- ``: the name of the autoscaler.\n- ``: the MIG in which you want to add an autoscaler.\n- ``: the maximum number of VMs that the MIG can have.\n- ``: the minimum number of VMs that the MIG needs to have.\n- ``: a protocol-free URL of a Monitoring metric. For example,`compute.googleapis.com/instance/uptime`. If you use a custom metric, it must meet the [custom metric requirements](#custom_metrics) .\n- ``: the metric value that the autoscaler attempts to maintain.\n- ``: the value type for the metric.- `GAUGE`: The autoscaler computes the average value of the data collected in the last couple of minutes and compares that to the utilization target.\n- `DELTA_PER_MINUTE`The autoscaler calculates the average rate of growth per minute and compares that to the utilization target.\n- `DELTA_PER_SECOND`The autoscaler calculates the average rate of growth per second and compares that to the utilization target. For accurate comparisons, if you set the utilization target in seconds, use`DELTA_PER_SECOND`as the target type. Likewise, use`DELTA_PER_MINUTE`for a utilization target in minutes.\n- ``: apply a filter to use an individual value from a metric with multiple values and to specify the monitored resource type. If you use a metric that comes from each VM, you do not have to specify the monitored resource type because [gce_instance](/monitoring/api/resources#tag_gce_instance) is used as default. For other metrics, you must specify the monitored resource using`resource.type`selector. To learn more about metric filter, see [Monitoring metrics concepts](#metrics_concept) .\n### Autoscale based on work available for each VM in a MIG\nWhen you want to autoscale based on the quantity of work that is available for each VM in a MIG, specify a single instance assignment. The value of the single instance assignment that you set indicates how much work you expect each VM to handle. The autoscaler divides the metric value by the single instance assignment value to calculate how many VMs are needed.\nA metric value of `0` indicates that there is no work for your MIG to complete. If your MIG's minimum number of instances is set to `0` and your metric value drops to `0` , then the MIG scales in to `0` until the metric value increases.\nWhen your metric has multiple values, apply a filter to autoscale using an individual value from the metric. For more details about metric filters and other fields that you can use in your configuration, see [Monitoring metrics concepts](#metrics_concept) .- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- If you do not have a managed instance group, [create one](/compute/docs/instance-groups/creating-groups-of-managed-instances) . Otherwise, click the name of a MIG from the list to open that instance group page.\n- Click **Edit** .\n- If no autoscaling configuration exists:- Under **Autoscaling** , click **Configure autoscaling** .\n- Under **Autoscaling mode** , select **On: add and remove instances to the group** to enable autoscaling.\n- Under **Autoscaling** , in the **Autoscaling signals** section, if a signal for a Monitoring metric exists, you can click to edit it, or click **Add a signal** to add a new metric.\n- Set the **Signal type** to **Cloud Monitoring metric** .\n- Click **Configure** . In the **Resource and metric** pane that opens, do the following:- Click **Select a metric** .- Select the metric that you want to use for autoscaling. You can filter the metrics based on any keywords\u2014for example, memory, bytes, disk.\n- Click **Apply** . The pane displays a chart that shows the data from the selected metric.\n- If you want to use specific data from the metric, add a filter based on labels as follows:- In the **Filters** section, click **Add a filter** .\n- Select a **Label** and enter a **Value** .\n- Click **Done** . The chart refreshes to show you the filtered metric value.\n **Note:** The filter `project_id=` `` is added by default because you can use the metric values from the resources in the current project only.\n- To view the aggregated value of metric that will be used to autoscale your MIG, toggle the **Show aggregation in chart** button. The chart refreshes to show the aggregated value.\n- In the **Metric target options for autoscaling** section, select **Single VM instance assignment** .\n- Provide a **Single instance assignment** value that represents the amount of work to assign to each VM in the MIG.\n- When you've finished configuring the metric, click **Select** .\n- Review the metric details and click **Done** .\n- To complete the configuration, click **Save** .\nTo configure autoscaling based on Monitoring metrics, use the [set-autoscaling command](/sdk/gcloud/reference/compute/instance-groups/managed/set-autoscaling) .\n **Note:** If autoscaling is already enabled for a MIG, the [set-autoscaling](/sdk/gcloud/reference/compute/instance-groups/managed/set-autoscaling) command overwrites the existing autoscaler to the new specifications.\nIn the command, specify the `--stackdriver-metric-single-instance-assignment` flag to indicate the amount of work that you expect each VM in the group to handle.\nThe following command creates an autoscaler based on work assignment for each VM.\n```\ngcloud compute instance-groups managed set-autoscaling MIG_NAME \\\n --max-num-replicas=MAX_INSTANCES \\\n --min-num-replicas=MIN_INSTANCES \\\n --update-stackdriver-metric=METRIC_URL \\\n --stackdriver-metric-filter=\"METRIC_FILTER\" \\\n --stackdriver-metric-single-instance-assignment=INSTANCE_ASSIGNMENT\n```\nReplace the following:- ``: the name of the MIG where you want to add an autoscaler.\n- ``: the maximum number of VMs that the MIG can have.\n- ``: the minimum number of VMs that the MIG needs to have.\n- ``: a protocol-free URL of a Monitoring metric. For example,`compute.googleapis.com/instance_group/size`. If you use a custom metric, it must meet the [custom metric requirements](#custom_metrics) .\n- ``: apply a filter to use an individual value from a metric with multiple values and to specify the monitored resource type. To learn more about metric filter, see [Monitoring metrics concepts](#metrics_concept) .\n- ``: the amount of work to assign to each VM instance in the MIG.\n **Note:** Although autoscaling is a feature of managed instance groups, [autoscalers](/compute/docs/reference/v1/autoscalers) are a separate API resource. Keep that in mind when you construct API requests for autoscaling.\nTo configure autoscaling based on Monitoring metrics for a zonal MIG, use the [autoscalers](/compute/docs/reference/rest/v1/autoscalers) resource or, for a regional MIG, use the [regionAutoscalers](/compute/docs/reference/rest/v1/regionAutoscalers) resource.\nUse the `singleInstanceAssignment` parameter to specify the amount of work that you expect each VM to handle.\nFor example, make the following call to create an autoscaler that scales a zonal MIG based on the instance assignment.\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/autoscalers\n{\n \"name\": \"AUTOSCALER_NAME\",\n \"target\": \"zones/ZONE/instanceGroupManagers/MIG_NAME\",\n \"autoscalingPolicy\": {\n \"maxNumReplicas\": MAX_INSTANCES,\n \"minNumReplicas\": MIN_INSTANCES,\n \"customMetricUtilizations\": [ {\n  \"metric\": \"METRIC_URL\",\n  \"filter\": \"METRIC_FILTER\",\n  \"singleInstanceAssignment\": INSTANCE_ASSIGNMENT\n }\n ],\n }\n}\n```\nReplace the following:- ``: your [project ID](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- ``: the zone where the MIG is located.\n- ``: the name of the autoscaler.\n- ``: the name of the MIG where you want to add an autoscaler.\n- ``: the maximum number of VMs that the MIG can have.\n- ``: the minimum number of VMs that the MIG needs to have.\n- ``: a protocol-free URL of a Monitoring metric. For example,`compute.googleapis.com/instance_group/size`. If you use a custom metric, it must meet the [custom metric requirements](#custom_metrics) .\n- ``: apply a filter to use an individual value from a metric with multiple values and to specify the monitored resource type. To learn more about metric filter, see [Monitoring metrics concepts](#metrics_concept) .\n- ``: the amount of work to assign to each VM instance in the MIG.## Examples for autoscaling based on metrics\nThis section provides some examples of metrics used for autoscaling. For a complete list of metrics, see [Google Cloud metrics](/monitoring/api/metrics_gcp) .\n### Autoscale based on a custom metric\nThere might be a situation when the metric providing a relevant signal does not represent a total amount of available work or another resource applicable to the group, but instead an average, a percentile, or some other statistical property. For this example, assume that you scale based on the group's average processing latency.\nAssume the following setup:\n- A zonal MIG named`our-instance-group`is assigned to perform a particular task. The group is located in zone`us-central1-a`.\n- You have a [Monitoring custom metric](/monitoring/custom-metrics) that exports a value that you would like to maintain at a particular level. For this example, assume the metric represents the average latency of processing queries assigned to the group.- The custom metric is named:`custom.googleapis.com/example_average_latency`.\n- The custom metric has a label with a key named`group_name`and value equal to the MIG's name,`our-instance-group`.\n- The custom metric exports data for the [global monitored resource](/monitoring/api/resources#tag_global) , that is, it is not associated with any specific VM.You have determined that when the metric value is above some specific value, you need to add more VMs to the group to handle the load, while when it is below that value, you can free up some resources. You want the autoscaler to gradually add or remove VMs at a rate that is proportional to how much the metric is above or below the target. For this example, assume that you have determined your target value to be `250 delta/sec` .\nYou can configure autoscaling for the group using a utilization target of `250` , which represents the rate of change of the metric value that the autoscaler will attempt to maintain:\n- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of your MIG from the list to open the instance group overview page.\n- Click **Edit** .\n- If no autoscaling configuration exists:- Under **Autoscaling** , click **Configure autoscaling** .\n- Under **Autoscaling mode** , select **On: add and remove instances to the group** to enable autoscaling.\n- Under **Autoscaling** , in the **Autoscaling signals** section, click **Add a signal** .\n- Set the **Signal type** to **Cloud Monitoring metric** .\n- Click **Configure** . The **Resource and metric** pane opens.- Click **Select a metric** .- Choose your metric from **Global > Custom metrics** .\n- Click **Apply** .\n- In the **Filters** section, do the following:- Click **Add a filter** .\n- In the **Label** drop-down, select`group_name`.\n- In the **Value** field, provide`our-instance-group`.\n- Click **Done** . The chart refreshes to show the filtered value from the metric.\n- In the **Metric target options for autoscaling** section, do the following:- Select **Utilization target** .\n- Enter the utilization target value as 250.\n- Set the utilization target type to **Delta / sec** .\n- After you've configured the metric, click **Select** .\n- Review the metric details and then click **Done** .\n- When you've finished, click **Save** .\n```\ngcloud compute instance-groups managed set-autoscaling our-instance-group \\\n --zone=us-central1-a \\\n --max-num-replicas=50 \\\n --min-num-replicas=0 \\\n --update-stackdriver-metric=custom.googleapis.com/example_average_latency \\\n --stackdriver-metric-filter=\"metric.labels.group_name = \\\"our-instance-group\\\" AND resource.type = \\\"global\\\"\" \\\n --stackdriver-metric-utilization-target=250 \\\n --stackdriver-metric-utilization-target-type=delta-per-second\n```\n```\nPOST https://compute.googleapis.com/compute/v1/projects/my-project/zones/us-central1-a/autoscalers\n{\n\"name\": \"our-instance-group-autoscaler\",\n\"target\": \"https://www.googleapis.com/compute/v1/projects/my-project/zones/us-central1-a/instanceGroupManagers/our-instance-group\",\n\"autoscalingPolicy\": {\n \"maxNumReplicas\": 50,\n \"minNumReplicas\": 0,\n \"customMetricUtilizations\": [ {\n  \"filter\": \"metric.labels.group_name=\\\"our-instance-group\\\" AND resource.type = \\\"global\\\"\",\n  \"utilizationTargetType\": \"delta-per-second\",\n  \"utilizationTarget\": 250.0,\n  \"metric\": \"custom.googleapis.com/example_average_latency\"\n }\n ]\n}\n}\n```\n### Autoscale based on unacknowledged messages in Pub/Sub\nTo configure autoscaling based on unacknowledged messages in a [Pub/Sub](/pubsub/docs) subscription, use the `subscription/num_undelivered_messages` metric provided by [pubsub](/monitoring/api/metrics_gcp#gcp-pubsub) and filter by the `subscription ID` .\nThe `subscription/num_undelivered_messages` metric exports the total number of messages in the subscription, including messages that are being processed but that are not yet acknowledged. Using a metric that does not include the messages being processed is not recommended because such a metric can drop down to 0 when there is still work being done, which prompts autoscaling to scale in and possibly interrupt the actual work.\nIf you do not have a subscription, you can create a [pull](/pubsub/docs/create-subscription) , [push](/pubsub/docs/create-push-subscription) , or [BigQuery](/pubsub/docs/create-bigquery-subscription) subscription before you configure autoscaling.\n- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of your MIG from the list to open the instance group overview page.\n- Click **Edit** .\n- If no autoscaling configuration exists:- Under **Autoscaling** , click **Configure autoscaling** .\n- Under **Autoscaling mode** , select **On: add and remove instances to the group** to enable autoscaling.\n- In the **Autoscaling signals** section, click **Add a signal** .\n- Set the **Signal type** to **Cloud Pub/Sub queue** .\n- Select a **Topic** . If you want a new topic, click **Create a topic** to [create one](/pubsub/docs/admin) .\n- Select the **Subscription** based on which you want to autoscale your MIG. If you want a new subscription, click **Create a subscription** to [create one](/pubsub/docs/create-subscription) .\n- In the **Number of messages to assign to each VM** field, specify the number of unacknowledged messages that you expect each VM to handle.\n- Click **Done** .\n- When you've finished, click **Save** .\n```\ngcloud compute instance-groups managed set-autoscaling MIG_NAME \\\n --max-num-replicas=MAX_INSTANCES \\\n --min-num-replicas=MIN_INSTANCES \\\n --update-stackdriver-metric=pubsub.googleapis.com/subscription/num_undelivered_messages \\\n --stackdriver-metric-filter=\"resource.type=\\\"pubsub_subscription\\\" AND resource.labels.subscription_id=\\\"SUBSCRIPTION_ID\\\"\" \\\n --stackdriver-metric-single-instance-assignment=NUMBER_OF_MESSAGES_TO_ASSIGN_TO_EACH_VM\n```\nTo configure autoscaling for a zonal MIG, use the [autoscalers](/compute/docs/reference/rest/v1/autoscalers) resource or, for a regional MIG, use the [regionAutoscalers](/compute/docs/reference/rest/v1/regionAutoscalers) resource.\nFor example, make the following call to create an autoscaler for a zonal MIG.\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/autoscalers\n{\n\"name\": \"AUTOSCALER_NAME\",\n\"target\": \"https://www.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instanceGroupManagers/MIG_NAME\",\n\"autoscalingPolicy\": {\n \"maxNumReplicas\": MAX_INSTANCES,\n \"minNumReplicas\": MIN_INSTANCES,\n \"customMetricUtilizations\": [ {\n  \"singleInstanceAssignment\": NUMBER_OF_MESSAGES_TO_ASSIGN_TO_EACH_VM,\n  \"filter\": \"resource.type = \\\"pubsub_subscription\\\" AND resource.labels.subscription_id=\\\"SUBSCRIPTION_ID\\\"\",\n  \"metric\": \"pubsub.googleapis.com/subscription/num_undelivered_messages\"\n }\n ]\n}\n}\n```\n### Autoscale based on incoming network traffic\nTo configure autoscaling based on the incoming network traffic to VMs in your MIG, use the `instance/network/received_bytes_count` metric provided by [compute](/monitoring/api/metrics_gcp#gcp-compute) .\n- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of your MIG from the list to open the instance group overview page.\n- Click **Edit** .\n- If no autoscaling configuration exists:- Under **Autoscaling** , click **Configure autoscaling** .\n- Under **Autoscaling mode** , select **On: add and remove instances to the group** to enable autoscaling.\n- Under **Autoscaling** , in the **Autoscaling signals** section, click **Add a signal** .\n- Set the **Signal type** to **Cloud Monitoring metric** .\n- Click **Configure** . The **Resource and metric** pane opens.- Click **Select a metric** .- Select **VM Instance > Instance > Received bytes** (`compute.googleapis.com/instance/network/received_bytes_count`).\n- Click **Apply** .\n- In the **Metric target options for autoscaling** section, do the following:- Make sure that **Utilization target** is selected.\n- Enter a utilization target value.\n- Set a utilization target type.\n- After you've configured the metric, click **Select** .\n- Review the metric details and then click **Done** .\n- When you've finished, click **Save** .\n```\ngcloud compute instance-groups managed set-autoscaling MIG_NAME \\\n --max-num-replicas=MAX_INSTANCES \\\n --min-num-replicas=MIN_INSTANCES \\\n --update-stackdriver-metric=compute.googleapis.com/instance/network/received_bytes_count \\\n --stackdriver-metric-utilization-target=TARGET_VALUE \\\n --stackdriver-metric-utilization-target-type=TARGET_TYPE\n```\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/autoscalers\n{\n\"name\": \"AUTOSCALER_NAME\",\n\"target\": \"https://www.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instanceGroupManagers/MIG_NAME\",\n\"autoscalingPolicy\": {\n \"maxNumReplicas\": MAX_INSTANCES,\n \"minNumReplicas\": MIN_INSTANCES,\n \"customMetricUtilizations\": [ {\n  \"utilizationTargetType\": \"TARGET_TYPE\",\n  \"utilizationTarget\": TARGET_VALUE,\n  \"metric\": \"compute.googleapis.com/instance/network/received_bytes_count\"\n }\n ]\n}\n}\n```\n### Autoscale based on memory usage\nTo configure autoscaling based on the percent of used memory, specify the `percent_used` metric provided by the [memory](/monitoring/api/metrics_opsagent#agent-memory) Ops Agent metrics. You should filter the metric by `state` to use only the `used` memory state. If you do not specify the filter, then the autoscaler takes the sum of memory usage by all memory states labeled as `buffered` , `cached` , `free` , `slab` , and `used` .\n**Note:** The `memory/percent_used` metric is an [Ops Agent metric](/monitoring/api/metrics_opsagent) . You must install the [Ops Agent](/monitoring/agent/ops-agent) before you configure autoscaling based on this metric.\n- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of your MIG from the list to open the instance group overview page.\n- On the instance group overview page, click **Edit** .\n- If no autoscaling configuration exists:- Under **Autoscaling** , click **Configure autoscaling** .\n- Under **Autoscaling mode** , select **On: add and remove instances to the group** to enable autoscaling.\n- Under **Autoscaling** , in the **Autoscaling signals** section, click **Add a signal** .\n- Set the **Signal type** to **Cloud Monitoring metric** .\n- Click **Configure** . The **Resource and metric** pane opens.- Click **Select a metric** .- Select **VM Instance > Memory > Memory utilization** (`compute.googleapis.com/instance/memory/percent_used`).\n- Click **Apply** .\n- In the **Filters** section, do the following:- Click **Add a filter** .\n- In the **Label** drop-down, choose the **state** metric label.\n- In the **Value** field, type **used** .\n- Click **Done** .\n- In the **Metric target options for autoscaling** section, do the following:- Make sure that **Utilization target** is selected.\n- Enter a utilization target value.\n- Set the utilization target type to **Gauge** .\n- After you've configured the metric, click **Select** .\n- Review the metric details and then click **Done** .\n- When you've finished, click **Save** .\n```\ngcloud compute instance-groups managed set-autoscaling MIG_NAME \\\n --max-num-replicas=MAX_INSTANCES \\\n --min-num-replicas=MIN_INSTANCES \\\n --update-stackdriver-metric=agent.googleapis.com/memory/percent_used \\\n --stackdriver-metric-filter=\"metric.labels.state = \\\"used\\\"\"\n --stackdriver-metric-utilization-target-type=gauge \\\n --stackdriver-metric-utilization-target=TARGET_VALUE \\\n```\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/autoscalers\n{\n\"name\": \"AUTOSCALER_NAME\",\n\"target\": \"https://www.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instanceGroupManagers/MIG_NAME\",\n\"autoscalingPolicy\": {\n \"maxNumReplicas\": MAX_INSTANCES,\n \"minNumReplicas\": MIN_INSTANCES,\n \"customMetricUtilizations\": [ {\n \"filter\": \"metric.labels.state=\\\"used\\\"\",\n \"utilizationTargetType\": \"GAUGE\",\n \"utilizationTarget\": TARGET_VALUE,\n \"metric\": \"agent.googleapis.com/memory/percent_used\"\n }\n ]\n}\n}\n```\n### Autoscale based on disk I/O\nTo configure autoscaling based on the total count of disk I/O operations, use the `operation_count` metric provided by the [disk](/monitoring/api/metrics_opsagent#agent-disk) Ops Agent metrics. If you want to scale based on read or write operations, filter the metric using the `direction` label. Similarly, to scale based on disk operations in a particular device, use the `device` label in the metric filter.\n**Note:** The `disk/operation_count` metric is an [Ops Agent metric](/monitoring/api/metrics_opsagent) . You must install the [Ops Agent](/monitoring/agent/ops-agent) before you configure autoscaling based on this metric.\n- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of your MIG from the list to open the instance group overview page.\n- On the instance group overview page, click **Edit** .\n- If no autoscaling configuration exists:- Under **Autoscaling** , click **Configure autoscaling** .\n- Under **Autoscaling mode** , select **On: add and remove instances to the group** to enable autoscaling.\n- Under **Autoscaling** , in the **Autoscaling signals** section, click **Add a signal** .\n- Set the **Signal type** to **Cloud Monitoring metric** .\n- Click **Configure** . The **Resource and metric** pane opens.- Click **Select a metric** .- Select **VM instance > Disk > Disk operations** (`agent.googleapis.com/disk/operation_count`).\n- Click **Apply** .\n- In the **Metric target options for autoscaling** section, do the following:- Make sure that **Utilization target** is selected.\n- Enter a utilization target value.\n- Set a utilization target type.\n- After you've configured the metric, click **Select** .\n- Review the metric details and then click **Done** .\n- When you've finished, click **Save** .\n```\ngcloud compute instance-groups managed set-autoscaling MIG_NAME \\\n --max-num-replicas=MAX_INSTANCES \\\n --min-num-replicas=MIN_INSTANCES \\\n --update-stackdriver-metric=agent.googleapis.com/disk/operation_count \\\n --stackdriver-metric-utilization-target=TARGET_VALUE \\\n --stackdriver-metric-utilization-target-type=TARGET_TYPE\n```\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/autoscalers\n{\n\"name\": \"AUTOSCALER_NAME\",\n\"target\": \"https://www.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instanceGroupManagers/MIG_NAME\",\n\"autoscalingPolicy\": {\n \"maxNumReplicas\": MAX_INSTANCES,\n \"minNumReplicas\": MIN_INSTANCES,\n \"customMetricUtilizations\": [ {\n \"utilizationTargetType\": \"TARGET_TYPE\",\n \"utilizationTarget\": TARGET_VALUE,\n \"metric\": \"agent.googleapis.com/disk/operation_count\"\n }\n ]\n}\n}\n```\n### Autoscale based on size of another MIG\nYou can autoscale a MIG based on the size of another MIG within the same project. For example, you can have multi-tier application with a frontend MIG that [autoscales based on a load balancer](/compute/docs/autoscaler/scaling-load-balancing) and a backend MIG that autoscales proportionally to the frontend. Use a single instance assignment to define how many backend VMs are needed for every frontend VM. If you need 1 backend VM for every 4 frontend VMs, then set the single instance assignment to 4 in the backend MIG.\nTo autoscale a MIG ( ) based on the size of another MIG ( ), use the `instance_group/size` metric provided by [compute](/monitoring/api/metrics_gcp#gcp-compute) .\n- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of your MIG from the list to open the instance group overview page.\n- On the instance group overview page, click **Edit** .\n- If no autoscaling configuration exists:- Under **Autoscaling** , click **Configure autoscaling** .\n- Under **Autoscaling mode** , select **On: add and remove instances to the group** to enable autoscaling.\n- Under **Autoscaling** , in the **Autoscaling signals** section, click **Add a signal** .\n- Set the **Signal type** to **Cloud Monitoring metric** .\n- Click **Configure** . The **Resource and metric** pane opens.- Click **Select a metric** - Select **Instance Group > Instance_group > Instance group size** (`compute.googleapis.com/instance_group/size`).\n- Click **Apply** .\n- In the **Filters** section, do the following:- Click **Add a filter** .\n- In the **Label** drop-down, choose the **instance_group_name** resource label.\n- In the **Value** field, type the name of the MIG () based on which you want to autoscale your MIG.\n- Click **Done** .\n- In the **Metric target options for autoscaling** section, do the following:- Select **Single VM instance assignment** .\n- In the Single VM instance assignment field, enter`4`, if you want to keep 1 VM in your current MIG () for every 4 VMs in.\n- After you've configured the metric, click **Select** .\n- Review the metric details and then click **Done** .\n- When you've finished, click **Save** .\n```\ngcloud compute instance-groups managed set-autoscaling MIG_1 \\\n --max-num-replicas=MAX_INSTANCES \\\n --min-num-replicas=MIN_INSTANCES \\\n --update-stackdriver-metric=compute.googleapis.com/instance_group/size \\\n --stackdriver-metric-filter=\"resource.type = \\\"instance_group\\\" AND resource.labels.location = \\\"ZONE|REGION\\\" AND resource.labels.instance_group_name = \\\"MIG_2\\\"\" \\\n --stackdriver-metric-single-instance-assignment=4\n```\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/autoscalers\n{\n\"name\": \"AUTOSCALER_NAME\",\n\"target\": \"https://www.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instanceGroupManagers/MIG_1\",\n\"autoscalingPolicy\": {\n \"maxNumReplicas\": MAX_INSTANCES,\n \"minNumReplicas\": MIN_INSTANCES,\n \"customMetricUtilizations\": [ {\n \"singleInstanceAssignment\": 4,\n \"filter\": \"resource.type = \\\"instance_group\\\" and resource.labels.location = \\\"ZONE|REGION\\\" AND resource.labels.instance_group_name = \\\"MIG_2\\\"\",\n \"metric\": \"compute.googleapis.com/instance_group/size\"\n }\n ]\n}\n}\n```\n## Monitoring metrics concepts\nThis section provides a brief description of the Monitoring metrics concepts that you need to know while configuring autoscaling based on Monitoring metrics.\n- **Metric identifier** or **Metric URL** : The metric name in the form of a protocol-free URL. You can find URLs for built-in metrics URL from the [metric list](/monitoring/api/metrics_gcp) .For example, the URL of a Pub/Sub metric that gives the number of unacknowledged messages is `pubsub.googleapis.com/subscription/num_undelivered_messages` .\n- **Monitored resource type** : The source of metric value. You can find the monitored resource type of a metric from the [metric list](/monitoring/api/metrics_gcp) .For example, the monitored resource type of the `pubsub.googleapis.com/subscription/num_undelivered_messages` metric is [pubsub_subscription](/monitoring/api/metrics_gcp#gcp-pubsub) . For more details about each monitored resource type, see [Monitored resource types](/monitoring/api/resources) .\n- **Metric filter** : When your metric has multiple values, a filter enables the autoscaler to identify a specific metric value from the set of possible metric values. Use the labels defined on a [metric](/monitoring/api/metrics_gcp) and a [monitored resource type](/monitoring/api/resources) to filter the values. If you want to explore your metric values with different filters, you can try them in the [metrics explorer](/monitoring/charts/metrics-explorer) .For example, the following screenshot shows `pubsub.googleapis.com/subscription/num_undelivered_messages` metric that gives the number of unacknowledged messages in all available subscriptions. Each line on the chart indicates a subscription. Without a filter, the autoscaler takes the sum of metric values from all subscriptions. To autoscale based on a single subscription, apply a filter on the `subscription_id` label defined for the `pubsub_subscription` . The following screenshot shows a single subscription after applying the filter. \n### Metric filtering requirements\nWhen you use a metric that has multiple values (categorized using [labels](/monitoring/api/v3/metric-model#generic-label-info) ), you can apply a filter to autoscale based on specific values from the metric. If the filter returns multiple values, then the values are added together. For best results, create a filter that is specific enough to return a single value.\nAutoscaler filtering for metrics is compatible with the [Monitoring filter syntax](/monitoring/api/v3/filters) . The filter must meet the following requirements:\n- You must wrap the value of a filter in double quotes.\n- You must use the direct equality comparison operator (`=`).\n- You must use the `AND` operator to join different filter criteria.For example: `--stackdriver-metric-filter=\"resource.type=\\\"pubsub_subscription\\\" AND resource.labels.subscription_id=\\\"our-subscription\\\"\"` .\n- You must use direct values. You cannot use wildcards or functions in the filter.For example, you cannot use `resource.labels.zone = starts_with(\"us-\")` .\n- You cannot use [resource metadata labels](/stackdriver/docs/deprecations/metadata-labels) that store metadata about a monitored resource.\nFor a full reference of metric labels and monitored resource labels that you can filter on, see [metrics list](/monitoring/api/metrics_gcp) and [monitored resources list](/monitoring/api/resources) .\n### Custom metric requirements\nTo use custom metrics, you must first create a custom metric that is associated with one of the [monitored-resource types](/monitoring/custom-metrics#which-resource) .\nA custom metric used for autoscaling must have the following properties:\n- If the autoscaling configuration uses data from each VM in the group, set up instances in your MIG so that each VM exports the custom metric. The exported values from each VM must be associated with a [gce_instance](/monitoring/api/resources#tag_gce_instance) monitored resource, which contains the following labels:- `zone`with the name of the zone the instance is in.\n- `instance_id`with the value of unique numerical ID assigned to the VM.\n- The metric must export data at least every 60 seconds. If you export data more often than every 60 seconds, the autoscaler can respond to load changes more quickly. If you export your data less frequent than every 60 seconds, the autoscaler might not respond to load changes quickly enough.\n- The metric must export data that is of`INT64`or`DOUBLE`value type.\nFor information about creating a custom metric, see [Using custom metrics](/monitoring/custom-metrics/labeled) .\n## What's next\n- Learn about [managing autoscalers](/compute/docs/autoscaler/managing-autoscalers) .\n- Learn [how autoscalers make decisions](/compute/docs/autoscaler/understanding-autoscaler-decisions) .\n- Learn how to use [multiple autoscaling signals](/compute/docs/autoscaler/multiple-policies) to scale your group.", "guide": "Compute Engine"}