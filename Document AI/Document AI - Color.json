{"title": "Document AI - Color", "url": "https://cloud.google.com/document-ai/docs/reference/rest/Shared.Types/Color?hl=zh-cn", "abstract": "# Document AI - Color\nRepresents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript.\nThis reference page doesn't have information about the absolute color space that should be used to interpret the RGB value\u2014for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space.\nWhen color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5` .\nExample (Java):\n```\n import com.google.type.Color;\n // ...\n public static java.awt.Color fromProto(Color protocolor) {\n float alpha = protocolor.hasAlpha()\n  ? protocolor.getAlpha().getValue()\n  : 1.0;\n return new java.awt.Color(\n  protocolor.getRed(),\n  protocolor.getGreen(),\n  protocolor.getBlue(),\n  alpha);\n }\n public static Color toProto(java.awt.Color color) {\n float red = (float) color.getRed();\n float green = (float) color.getGreen();\n float blue = (float) color.getBlue();\n float denominator = 255.0;\n Color.Builder resultBuilder =\n  Color\n   .newBuilder()\n   .setRed(red / denominator)\n   .setGreen(green / denominator)\n   .setBlue(blue / denominator);\n int alpha = color.getAlpha();\n if (alpha != 255) {\n  result.setAlpha(\n   FloatValue\n    .newBuilder()\n    .setValue(((float) alpha) / denominator)\n    .build());\n }\n return resultBuilder.build();\n }\n // ...\n```\nExample (iOS / Obj-C):\n```\n // ...\n static UIColor* fromProto(Color* protocolor) {\n float red = [protocolor red];\n float green = [protocolor green];\n float blue = [protocolor blue];\n FloatValue* alpha_wrapper = [protocolor alpha];\n float alpha = 1.0;\n if (alpha_wrapper != nil) {\n  alpha = [alpha_wrapper value];\n }\n return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n }\n static Color* toProto(UIColor* color) {\n  CGFloat red, green, blue, alpha;\n  if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n  return nil;\n  }\n  Color* result = [[Color alloc] init];\n  [result setRed:red];\n  [result setGreen:green];\n  [result setBlue:blue];\n  if (alpha <= 0.9999) {\n  [result setAlpha:floatWrapperWithValue(alpha)];\n  }\n  [result autorelease];\n  return result;\n}\n// ...\n```\nExample (JavaScript):\n```\n// ...\nvar protoToCssColor = function(rgb_color) {\n var redFrac = rgb_color.red || 0.0;\n var greenFrac = rgb_color.green || 0.0;\n var blueFrac = rgb_color.blue || 0.0;\n var red = Math.floor(redFrac * 255);\n var green = Math.floor(greenFrac * 255);\n var blue = Math.floor(blueFrac * 255);\n if (!('alpha' in rgb_color)) {\n  return rgbToCssColor(red, green, blue);\n }\n var alphaFrac = rgb_color.alpha.value || 0.0;\n var rgbParams = [red, green, blue].join(',');\n return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n};\nvar rgbToCssColor = function(red, green, blue) {\n var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n var hexString = rgbNumber.toString(16);\n var missingZeros = 6 - hexString.length;\n var resultBuilder = ['#'];\n for (var i = 0; i < missingZeros; i++) {\n  resultBuilder.push('0');\n }\n resultBuilder.push(hexString);\n return resultBuilder.join('');\n};\n// ...\n```| JSON representation              |\n|:------------------------------------------------------------------------|\n| { \"red\": number, \"green\": number, \"blue\": number, \"alpha\": number } || Fields | Fields.1                                                                                                                                                      |\n|:---------||\n| red  | number The amount of red in the color as a value in the interval [0, 1].                                                                                                                                      |\n| green | number The amount of green in the color as a value in the interval [0, 1].                                                                                                                                      |\n| blue  | number The amount of blue in the color as a value in the interval [0, 1].                                                                                                                                      |\n| alpha | number The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation:pixel color = alpha * (this color) + (1.0 - alpha) * (background color)This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). ", "content": "|", "guide": "Document AI"}