{"title": "Document AI - Toolbox - Quickstart", "url": "https://cloud.google.com/document-ai/docs/samples/documentai-toolbox-quickstart?hl=zh-cn", "abstract": "# Document AI - Toolbox - Quickstart\nLoad a processed document (or document shards) from Cloud Storage for post processing.", "content": "## Explore furtherFor detailed documentation that includes this code sample, see the following:- [Document AI Toolbox client libraries](/document-ai/docs/toolbox) \n- [Handling the processing response](/document-ai/docs/handle-response) \n## Code sampleFor more information, see the [Document AI Python API reference documentation](/python/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/python-documentai-toolbox/blob/HEAD/samples/snippets/quickstart_sample.py) \n```\nfrom typing import Optionalfrom google.cloud import documentaifrom google.cloud.documentai_toolbox import documentfrom google.cloud.documentai_toolbox import gcs_utilities# TODO(developer): Uncomment these variables before running the sample.# Given a Document JSON or sharded Document JSON in path gs://bucket/path/to/folder# gcs_bucket_name = \"bucket\"# gcs_prefix = \"path/to/folder\"# Or, given a Document JSON in path gs://bucket/path/to/folder/document.json# gcs_uri = \"gs://bucket/path/to/folder/document.json\"# Or, given a Document JSON in path local/path/to/folder/document.json# document_path = \"local/path/to/folder/document.json\"# Or, given a Document object from Document AI# documentai_document = documentai.Document()# Or, given a BatchProcessMetadata object from Document AI# operation = client.batch_process_documents(request)# operation.result(timeout=timeout)# batch_process_metadata = documentai.BatchProcessMetadata(operation.metadata)# Or, given a BatchProcessOperation name from Document AI# batch_process_operation = \"projects/project_id/locations/location/operations/operation_id\"def quickstart_sample(\u00a0 \u00a0 gcs_bucket_name: Optional[str] = None,\u00a0 \u00a0 gcs_prefix: Optional[str] = None,\u00a0 \u00a0 gcs_uri: Optional[str] = None,\u00a0 \u00a0 document_path: Optional[str] = None,\u00a0 \u00a0 documentai_document: Optional[documentai.Document] = None,\u00a0 \u00a0 batch_process_metadata: Optional[documentai.BatchProcessMetadata] = None,\u00a0 \u00a0 batch_process_operation: Optional[str] = None,) -> document.Document:\u00a0 \u00a0 if gcs_bucket_name and gcs_prefix:\u00a0 \u00a0 \u00a0 \u00a0 # Load from Google Cloud Storage Directory\u00a0 \u00a0 \u00a0 \u00a0 print(\"Document structure in Cloud Storage\")\u00a0 \u00a0 \u00a0 \u00a0 gcs_utilities.print_gcs_document_tree(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 gcs_bucket_name=gcs_bucket_name, gcs_prefix=gcs_prefix\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 wrapped_document = document.Document.from_gcs(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 gcs_bucket_name=gcs_bucket_name, gcs_prefix=gcs_prefix\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 elif gcs_uri:\u00a0 \u00a0 \u00a0 \u00a0 # Load a single Document from a Google Cloud Storage URI\u00a0 \u00a0 \u00a0 \u00a0 wrapped_document = document.Document.from_gcs_uri(gcs_uri=gcs_uri)\u00a0 \u00a0 elif document_path:\u00a0 \u00a0 \u00a0 \u00a0 # Load from local `Document` JSON file\u00a0 \u00a0 \u00a0 \u00a0 wrapped_document = document.Document.from_document_path(document_path)\u00a0 \u00a0 elif documentai_document:\u00a0 \u00a0 \u00a0 \u00a0 # Load from `documentai.Document` object\u00a0 \u00a0 \u00a0 \u00a0 wrapped_document = document.Document.from_documentai_document(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 documentai_document\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 elif batch_process_metadata:\u00a0 \u00a0 \u00a0 \u00a0 # Load Documents from `BatchProcessMetadata` object\u00a0 \u00a0 \u00a0 \u00a0 wrapped_documents = document.Document.from_batch_process_metadata(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 metadata=batch_process_metadata\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 wrapped_document = wrapped_documents[0]\u00a0 \u00a0 elif batch_process_operation:\u00a0 \u00a0 \u00a0 \u00a0 wrapped_documents = document.Document.from_batch_process_operation(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 location=\"us\", operation_name=batch_process_operation\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 wrapped_document = wrapped_documents[0]\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 raise ValueError(\"No document source provided.\")\u00a0 \u00a0 # For all properties and methods, refer to:\u00a0 \u00a0 # https://cloud.google.com/python/docs/reference/documentai-toolbox/latest/google.cloud.documentai_toolbox.wrappers.document.Document\u00a0 \u00a0 print(\"Document Successfully Loaded!\")\u00a0 \u00a0 print(f\"\\t Number of Pages: {len(wrapped_document.pages)}\")\u00a0 \u00a0 print(f\"\\t Number of Entities: {len(wrapped_document.entities)}\")\u00a0 \u00a0 for page in wrapped_document.pages:\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Page {page.page_number}\")\u00a0 \u00a0 \u00a0 \u00a0 for block in page.blocks:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(block.text)\u00a0 \u00a0 \u00a0 \u00a0 for paragraph in page.paragraphs:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(paragraph.text)\u00a0 \u00a0 \u00a0 \u00a0 for line in page.lines:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(line.text)\u00a0 \u00a0 \u00a0 \u00a0 for token in page.tokens:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(token.text)\u00a0 \u00a0 \u00a0 \u00a0 # Only supported with Form Parser processor\u00a0 \u00a0 \u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/form-parser\u00a0 \u00a0 \u00a0 \u00a0 for form_field in page.form_fields:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(f\"{form_field.field_name} : {form_field.field_value}\")\u00a0 \u00a0 \u00a0 \u00a0 # Only supported with Enterprise Document OCR version `pretrained-ocr-v2.0-2023-06-02`\u00a0 \u00a0 \u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/process-documents-ocr#enable_symbols\u00a0 \u00a0 \u00a0 \u00a0 for symbol in page.symbols:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(symbol.text)\u00a0 \u00a0 \u00a0 \u00a0 # Only supported with Enterprise Document OCR version `pretrained-ocr-v2.0-2023-06-02`\u00a0 \u00a0 \u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/process-documents-ocr#math_ocr\u00a0 \u00a0 \u00a0 \u00a0 for math_formula in page.math_formulas:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(math_formula.text)\u00a0 \u00a0 # Only supported with Entity Extraction processors\u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/processors-list\u00a0 \u00a0 for entity in wrapped_document.entities:\u00a0 \u00a0 \u00a0 \u00a0 print(f\"{entity.type_} : {entity.mention_text}\")\u00a0 \u00a0 \u00a0 \u00a0 if entity.normalized_text:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(f\"\\tNormalized Text: {entity.normalized_text}\")\n```\n## What's nextTo search and filter code samples for other Google Cloud products, see the [Google Cloud sample browser](/docs/samples?product=documentai) .", "guide": "Document AI"}