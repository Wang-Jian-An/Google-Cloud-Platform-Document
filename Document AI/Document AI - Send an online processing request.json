{"title": "Document AI - Send an online processing request", "url": "https://cloud.google.com/document-ai/docs/samples/documentai-process-document?hl=zh-cn", "abstract": "# Document AI - Send an online processing request\nOnline (synchronous) requests let send a single document for processing.", "content": "## Explore furtherFor detailed documentation that includes this code sample, see the following:- [Send a processing request](/document-ai/docs/send-request) \n## Code sampleFor more information, see the [Document AI C# API reference documentation](/dotnet/docs/reference/Google.Cloud.DocumentAI.V1/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/documentai/api/DocumentAI.Samples/Quickstart.cs) \n```\nusing Google.Cloud.DocumentAI.V1;using Google.Protobuf;using System;using System.IO;public class QuickstartSample{\u00a0 \u00a0 public Document Quickstart(\u00a0 \u00a0 \u00a0 \u00a0 string projectId = \"your-project-id\",\u00a0 \u00a0 \u00a0 \u00a0 string locationId = \"your-processor-location\",\u00a0 \u00a0 \u00a0 \u00a0 string processorId = \"your-processor-id\",\u00a0 \u00a0 \u00a0 \u00a0 string localPath = \"my-local-path/my-file-name\",\u00a0 \u00a0 \u00a0 \u00a0 string mimeType = \"application/pdf\"\u00a0 \u00a0 )\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 var client = new DocumentProcessorServiceClientBuilder\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Endpoint = $\"{locationId}-documentai.googleapis.com\"\u00a0 \u00a0 \u00a0 \u00a0 }.Build();\u00a0 \u00a0 \u00a0 \u00a0 // Read in local file\u00a0 \u00a0 \u00a0 \u00a0 using var fileStream = File.OpenRead(localPath);\u00a0 \u00a0 \u00a0 \u00a0 var rawDocument = new RawDocument\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Content = ByteString.FromStream(fileStream),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MimeType = mimeType\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 var request = new ProcessRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name = ProcessorName.FromProjectLocationProcessor(projectId, locationId, processorId).ToString(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RawDocument = rawDocument\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request\u00a0 \u00a0 \u00a0 \u00a0 var response = client.ProcessDocument(request);\u00a0 \u00a0 \u00a0 \u00a0 var document = response.Document;\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(document.Text);\u00a0 \u00a0 \u00a0 \u00a0 return document;\u00a0 \u00a0 }}\n```For more information, see the [Document AI Java API reference documentation](/java/docs/reference/google-cloud-document-ai/latest/overview) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/document-ai/src/main/java/documentai/v1/ProcessDocument.java) \n```\nimport com.google.cloud.documentai.v1.Document;import com.google.cloud.documentai.v1.DocumentProcessorServiceClient;import com.google.cloud.documentai.v1.DocumentProcessorServiceSettings;import com.google.cloud.documentai.v1.ProcessRequest;import com.google.cloud.documentai.v1.ProcessResponse;import com.google.cloud.documentai.v1.RawDocument;import com.google.protobuf.ByteString;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Paths;import java.util.List;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;public class ProcessDocument {\u00a0 public static void processDocument()\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"your-project-id\";\u00a0 \u00a0 String location = \"your-project-location\"; // Format is \"us\" or \"eu\".\u00a0 \u00a0 String processerId = \"your-processor-id\";\u00a0 \u00a0 String filePath = \"path/to/input/file.pdf\";\u00a0 \u00a0 processDocument(projectId, location, processerId, filePath);\u00a0 }\u00a0 public static void processDocument(\u00a0 \u00a0 \u00a0 String projectId, String location, String processorId, String filePath)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs\u00a0 \u00a0 // to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your\u00a0 \u00a0 // requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background\u00a0 \u00a0 // resources.\u00a0 \u00a0 String endpoint = String.format(\"%s-documentai.googleapis.com:443\", location);\u00a0 \u00a0 DocumentProcessorServiceSettings settings =\u00a0 \u00a0 \u00a0 \u00a0 DocumentProcessorServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 try (DocumentProcessorServiceClient client = DocumentProcessorServiceClient.create(settings)) {\u00a0 \u00a0 \u00a0 // The full resource name of the processor, e.g.:\u00a0 \u00a0 \u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 \u00a0 \u00a0 // You must create new processors in the Cloud Console first\u00a0 \u00a0 \u00a0 String name =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String.format(\"projects/%s/locations/%s/processors/%s\", projectId, location, processorId);\u00a0 \u00a0 \u00a0 // Read the file.\u00a0 \u00a0 \u00a0 byte[] imageFileData = Files.readAllBytes(Paths.get(filePath));\u00a0 \u00a0 \u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 \u00a0 \u00a0 ByteString content = ByteString.copyFrom(imageFileData);\u00a0 \u00a0 \u00a0 RawDocument document =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RawDocument.newBuilder().setContent(content).setMimeType(\"application/pdf\").build();\u00a0 \u00a0 \u00a0 // Configure the process request.\u00a0 \u00a0 \u00a0 ProcessRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ProcessRequest.newBuilder().setName(name).setRawDocument(document).build();\u00a0 \u00a0 \u00a0 // Recognizes text entities in the PDF document\u00a0 \u00a0 \u00a0 ProcessResponse result = client.processDocument(request);\u00a0 \u00a0 \u00a0 Document documentResponse = result.getDocument();\u00a0 \u00a0 \u00a0 // Get all of the document text as one big string\u00a0 \u00a0 \u00a0 String text = documentResponse.getText();\u00a0 \u00a0 \u00a0 // Read the text recognition output from the processor\u00a0 \u00a0 \u00a0 System.out.println(\"The document contains the following paragraphs:\");\u00a0 \u00a0 \u00a0 Document.Page firstPage = documentResponse.getPages(0);\u00a0 \u00a0 \u00a0 List<Document.Page.Paragraph> paragraphs = firstPage.getParagraphsList();\u00a0 \u00a0 \u00a0 for (Document.Page.Paragraph paragraph : paragraphs) {\u00a0 \u00a0 \u00a0 \u00a0 String paragraphText = getText(paragraph.getLayout().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"Paragraph text:\\n%s\\n\", paragraphText);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 // Form parsing provides additional output about\u00a0 \u00a0 \u00a0 // form-formatted PDFs. You must create a form\u00a0 \u00a0 \u00a0 // processor in the Cloud Console to see full field details.\u00a0 \u00a0 \u00a0 System.out.println(\"The following form key/value pairs were detected:\");\u00a0 \u00a0 \u00a0 for (Document.Page.FormField field : firstPage.getFormFieldsList()) {\u00a0 \u00a0 \u00a0 \u00a0 String fieldName = getText(field.getFieldName().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 \u00a0 String fieldValue = getText(field.getFieldValue().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Extracted form fields pair:\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"\\t(%s, %s))\\n\", fieldName, fieldValue);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 // Extract shards from the text field\u00a0 private static String getText(Document.TextAnchor textAnchor, String text) {\u00a0 \u00a0 if (textAnchor.getTextSegmentsList().size() > 0) {\u00a0 \u00a0 \u00a0 int startIdx = (int) textAnchor.getTextSegments(0).getStartIndex();\u00a0 \u00a0 \u00a0 int endIdx = (int) textAnchor.getTextSegments(0).getEndIndex();\u00a0 \u00a0 \u00a0 return text.substring(startIdx, endIdx);\u00a0 \u00a0 }\u00a0 \u00a0 return \"[NO TEXT]\";\u00a0 }}\n```For more information, see the [Document AI Node.js API reference documentation](/nodejs/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/document-ai/process-document.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION'; // Format is 'us' or 'eu'// const processorId = 'YOUR_PROCESSOR_ID'; // Create processor in Cloud Console// const filePath = '/path/to/local/pdf';const {DocumentProcessorServiceClient} =\u00a0 require('@google-cloud/documentai').v1;// Instantiates a clientconst client = new DocumentProcessorServiceClient();async function processDocument() {\u00a0 // The full resource name of the processor, e.g.:\u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 // You must create new processors in the Cloud Console first\u00a0 const name = `projects/${projectId}/locations/${location}/processors/${processorId}`;\u00a0 // Read the file into memory.\u00a0 const fs = require('fs').promises;\u00a0 const imageFile = await fs.readFile(filePath);\u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 const encodedImage = Buffer.from(imageFile).toString('base64');\u00a0 const request = {\u00a0 \u00a0 name,\u00a0 \u00a0 rawDocument: {\u00a0 \u00a0 \u00a0 content: encodedImage,\u00a0 \u00a0 \u00a0 mimeType: 'application/pdf',\u00a0 \u00a0 },\u00a0 };\u00a0 // Recognizes text entities in the PDF document\u00a0 const [result] = await client.processDocument(request);\u00a0 const {document} = result;\u00a0 // Get all of the document text as one big string\u00a0 const {text} = document;\u00a0 // Extract shards from the text field\u00a0 const getText = textAnchor => {\u00a0 \u00a0 if (!textAnchor.textSegments || textAnchor.textSegments.length === 0) {\u00a0 \u00a0 \u00a0 return '';\u00a0 \u00a0 }\u00a0 \u00a0 // First shard in document doesn't have startIndex property\u00a0 \u00a0 const startIndex = textAnchor.textSegments[0].startIndex || 0;\u00a0 \u00a0 const endIndex = textAnchor.textSegments[0].endIndex;\u00a0 \u00a0 return text.substring(startIndex, endIndex);\u00a0 };\u00a0 // Read the text recognition output from the processor\u00a0 console.log('The document contains the following paragraphs:');\u00a0 const [page1] = document.pages;\u00a0 const {paragraphs} = page1;\u00a0 for (const paragraph of paragraphs) {\u00a0 \u00a0 const paragraphText = getText(paragraph.layout.textAnchor);\u00a0 \u00a0 console.log(`Paragraph text:\\n${paragraphText}`);\u00a0 }\u00a0 // Form parsing provides additional output about\u00a0 // form-formatted PDFs. You \u00a0must create a form\u00a0 // processor in the Cloud Console to see full field details.\u00a0 console.log('\\nThe following form key/value pairs were detected:');\u00a0 const {formFields} = page1;\u00a0 for (const field of formFields) {\u00a0 \u00a0 const fieldName = getText(field.fieldName.textAnchor);\u00a0 \u00a0 const fieldValue = getText(field.fieldValue.textAnchor);\u00a0 \u00a0 console.log('Extracted key value pair:');\u00a0 \u00a0 console.log(`\\t(${fieldName}, ${fieldValue})`);\u00a0 }}\n```For more information, see the [Document AI Python API reference documentation](/python/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/documentai/snippets/process_document_sample.py) \n```\nfrom typing import Optionalfrom google.api_core.client_options import ClientOptionsfrom google.cloud import documentai \u00a0# type: ignore# TODO(developer): Uncomment these variables before running the sample.# project_id = \"YOUR_PROJECT_ID\"# location = \"YOUR_PROCESSOR_LOCATION\" # Format is \"us\" or \"eu\"# processor_id = \"YOUR_PROCESSOR_ID\" # Create processor before running sample# file_path = \"/path/to/local/pdf\"# mime_type = \"application/pdf\" # Refer to https://cloud.google.com/document-ai/docs/file-types for supported file types# field_mask = \"text,entities,pages.pageNumber\" \u00a0# Optional. The fields to return in the Document object.# processor_version_id = \"YOUR_PROCESSOR_VERSION_ID\" # Optional. Processor version to usedef process_document_sample(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 processor_id: str,\u00a0 \u00a0 file_path: str,\u00a0 \u00a0 mime_type: str,\u00a0 \u00a0 field_mask: Optional[str] = None,\u00a0 \u00a0 processor_version_id: Optional[str] = None,) -> None:\u00a0 \u00a0 # You must set the `api_endpoint` if you use a location other than \"us\".\u00a0 \u00a0 opts = ClientOptions(api_endpoint=f\"{location}-documentai.googleapis.com\")\u00a0 \u00a0 client = documentai.DocumentProcessorServiceClient(client_options=opts)\u00a0 \u00a0 if processor_version_id:\u00a0 \u00a0 \u00a0 \u00a0 # The full resource name of the processor version, e.g.:\u00a0 \u00a0 \u00a0 \u00a0 # `projects/{project_id}/locations/{location}/processors/{processor_id}/processorVersions/{processor_version_id}`\u00a0 \u00a0 \u00a0 \u00a0 name = client.processor_version_path(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 project_id, location, processor_id, processor_version_id\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 # The full resource name of the processor, e.g.:\u00a0 \u00a0 \u00a0 \u00a0 # `projects/{project_id}/locations/{location}/processors/{processor_id}`\u00a0 \u00a0 \u00a0 \u00a0 name = client.processor_path(project_id, location, processor_id)\u00a0 \u00a0 # Read the file into memory\u00a0 \u00a0 with open(file_path, \"rb\") as image:\u00a0 \u00a0 \u00a0 \u00a0 image_content = image.read()\u00a0 \u00a0 # Load binary data\u00a0 \u00a0 raw_document = documentai.RawDocument(content=image_content, mime_type=mime_type)\u00a0 \u00a0 # For more information: https://cloud.google.com/document-ai/docs/reference/rest/v1/ProcessOptions\u00a0 \u00a0 # Optional: Additional configurations for processing.\u00a0 \u00a0 process_options = documentai.ProcessOptions(\u00a0 \u00a0 \u00a0 \u00a0 # Process only specific pages\u00a0 \u00a0 \u00a0 \u00a0 individual_page_selector=documentai.ProcessOptions.IndividualPageSelector(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pages=[1]\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 )\u00a0 \u00a0 # Configure the process request\u00a0 \u00a0 request = documentai.ProcessRequest(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 raw_document=raw_document,\u00a0 \u00a0 \u00a0 \u00a0 field_mask=field_mask,\u00a0 \u00a0 \u00a0 \u00a0 process_options=process_options,\u00a0 \u00a0 )\u00a0 \u00a0 result = client.process_document(request=request)\u00a0 \u00a0 # For a full list of `Document` object attributes, reference this page:\u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/reference/rest/v1/Document\u00a0 \u00a0 document = result.document\u00a0 \u00a0 # Read the text recognition output from the processor\u00a0 \u00a0 print(\"The document contains the following text:\")\u00a0 \u00a0 print(document.text)\n```\n## What's nextTo search and filter code samples for other Google Cloud products, see the [Google Cloud sample browser](/docs/samples?product=documentai) .", "guide": "Document AI"}