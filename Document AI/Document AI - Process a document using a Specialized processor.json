{"title": "Document AI - Process a document using a Specialized processor", "url": "https://cloud.google.com/document-ai/docs/samples/documentai-process-specialized-document?hl=zh-cn", "abstract": "# Document AI - Process a document using a Specialized processor\nSends an online processing request to a Specialized processor and parses the response. Extracts and prints entities, normalized values, confidence, and properties.", "content": "## Explore furtherFor detailed documentation that includes this code sample, see the following:- [Handling the processing response](/document-ai/docs/handle-response) \n## Code sampleFor more information, see the [Document AI Java API reference documentation](/java/docs/reference/google-cloud-document-ai/latest/overview) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/document-ai/src/main/java/documentai/v1beta3/ProcessSpecializedDocument.java) \n```\nimport com.google.cloud.documentai.v1beta3.Document;import com.google.cloud.documentai.v1beta3.DocumentProcessorServiceClient;import com.google.cloud.documentai.v1beta3.DocumentProcessorServiceSettings;import com.google.cloud.documentai.v1beta3.ProcessRequest;import com.google.cloud.documentai.v1beta3.ProcessResponse;import com.google.cloud.documentai.v1beta3.RawDocument;import com.google.protobuf.ByteString;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Paths;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;public class ProcessSpecializedDocument {\u00a0 public static void processSpecializedDocument()\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"your-project-id\";\u00a0 \u00a0 String location = \"your-project-location\"; // Format is \"us\" or \"eu\".\u00a0 \u00a0 String processerId = \"your-processor-id\";\u00a0 \u00a0 String filePath = \"path/to/input/file.pdf\";\u00a0 \u00a0 processSpecializedDocument(projectId, location, processerId, filePath);\u00a0 }\u00a0 public static void processSpecializedDocument(\u00a0 \u00a0 \u00a0 String projectId, String location, String processorId, String filePath)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs\u00a0 \u00a0 // to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your\u00a0 \u00a0 // requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background\u00a0 \u00a0 // resources.\u00a0 \u00a0 String endpoint = String.format(\"%s-documentai.googleapis.com:443\", location);\u00a0 \u00a0 DocumentProcessorServiceSettings settings =\u00a0 \u00a0 \u00a0 \u00a0 DocumentProcessorServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 try (DocumentProcessorServiceClient client = DocumentProcessorServiceClient.create(settings)) {\u00a0 \u00a0 \u00a0 // The full resource name of the processor, e.g.:\u00a0 \u00a0 \u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 \u00a0 \u00a0 // You must create new processors in the Cloud Console first\u00a0 \u00a0 \u00a0 String name =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String.format(\"projects/%s/locations/%s/processors/%s\", projectId, location, processorId);\u00a0 \u00a0 \u00a0 // Read the file.\u00a0 \u00a0 \u00a0 byte[] imageFileData = Files.readAllBytes(Paths.get(filePath));\u00a0 \u00a0 \u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 \u00a0 \u00a0 ByteString content = ByteString.copyFrom(imageFileData);\u00a0 \u00a0 \u00a0 RawDocument document =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RawDocument.newBuilder().setContent(content).setMimeType(\"application/pdf\").build();\u00a0 \u00a0 \u00a0 // Configure the process request.\u00a0 \u00a0 \u00a0 ProcessRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ProcessRequest.newBuilder().setName(name).setRawDocument(document).build();\u00a0 \u00a0 \u00a0 // Recognizes text entities in the PDF document\u00a0 \u00a0 \u00a0 ProcessResponse result = client.processDocument(request);\u00a0 \u00a0 \u00a0 Document documentResponse = result.getDocument();\u00a0 \u00a0 \u00a0 System.out.println(\"Document processing complete.\");\u00a0 \u00a0 \u00a0 // Read fields specificly from the specalized US drivers license processor:\u00a0 \u00a0 \u00a0 // https://cloud.google.com/document-ai/docs/processors-list#processor_us-driver-license-parser\u00a0 \u00a0 \u00a0 // retriving data from other specalized processors follow a similar pattern.\u00a0 \u00a0 \u00a0 // For a complete list of processors see:\u00a0 \u00a0 \u00a0 // https://cloud.google.com/document-ai/docs/processors-list\u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 // OCR and other data is also present in the quality processor's response.\u00a0 \u00a0 \u00a0 // Please see the OCR and other samples for how to parse other data in the\u00a0 \u00a0 \u00a0 // response.\u00a0 \u00a0 \u00a0 for (Document.Entity entity : documentResponse.getEntitiesList()) {\u00a0 \u00a0 \u00a0 \u00a0 // Fields detected. For a full list of fields for each processor see\u00a0 \u00a0 \u00a0 \u00a0 // the processor documentation:\u00a0 \u00a0 \u00a0 \u00a0 // https://cloud.google.com/document-ai/docs/processors-list\u00a0 \u00a0 \u00a0 \u00a0 String entityType = entity.getType();\u00a0 \u00a0 \u00a0 \u00a0 // some other value formats in addition to text are availible\u00a0 \u00a0 \u00a0 \u00a0 // e.g. dates: `entity.getNormalizedValue().getDateValue().getYear()`\u00a0 \u00a0 \u00a0 \u00a0 // check for normilized value with `entity.hasNormalizedValue()`\u00a0 \u00a0 \u00a0 \u00a0 String entityTextValue = escapeNewlines(entity.getTextAnchor().getContent());\u00a0 \u00a0 \u00a0 \u00a0 float entityConfidence = entity.getConfidence();\u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \" \u00a0 \u00a0* %s: %s (%.2f%% confident)\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 entityType, entityTextValue, entityConfidence * 100.0);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 private static String escapeNewlines(String s) {\u00a0 \u00a0 return s.replace(\"\\n\", \"\\\\n\").replace(\"\\r\", \"\\\\r\");\u00a0 }}\n```For more information, see the [Document AI Node.js API reference documentation](/nodejs/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/document-ai/process-document-specialized.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION'; // Format is 'us' or 'eu'// const processorId = 'YOUR_PROCESSOR_ID'; // Create processor in Cloud Console// const filePath = '/path/to/local/pdf';const {DocumentProcessorServiceClient} =\u00a0 require('@google-cloud/documentai').v1beta3;// Instantiates a clientconst client = new DocumentProcessorServiceClient();async function processDocument() {\u00a0 // The full resource name of the processor, e.g.:\u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 // You must create new processors in the Cloud Console first\u00a0 const name = `projects/${projectId}/locations/${location}/processors/${processorId}`;\u00a0 // Read the file into memory.\u00a0 const fs = require('fs').promises;\u00a0 const imageFile = await fs.readFile(filePath);\u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 const encodedImage = Buffer.from(imageFile).toString('base64');\u00a0 const request = {\u00a0 \u00a0 name,\u00a0 \u00a0 rawDocument: {\u00a0 \u00a0 \u00a0 content: encodedImage,\u00a0 \u00a0 \u00a0 mimeType: 'application/pdf',\u00a0 \u00a0 },\u00a0 };\u00a0 // Recognizes text entities in the PDF document\u00a0 const [result] = await client.processDocument(request);\u00a0 console.log('Document processing complete.');\u00a0 // Read fields specificly from the specalized US drivers license processor:\u00a0 // https://cloud.google.com/document-ai/docs/processors-list#processor_us-driver-license-parser\u00a0 // retriving data from other specalized processors follow a similar pattern.\u00a0 // For a complete list of processors see:\u00a0 // https://cloud.google.com/document-ai/docs/processors-list\u00a0 //\u00a0 // OCR and other data is also present in the quality processor's response.\u00a0 // Please see the OCR and other samples for how to parse other data in the\u00a0 // response.\u00a0 const {document} = result;\u00a0 for (const entity of document.entities) {\u00a0 \u00a0 // Fields detected. For a full list of fields for each processor see\u00a0 \u00a0 // the processor documentation:\u00a0 \u00a0 // https://cloud.google.com/document-ai/docs/processors-list\u00a0 \u00a0 const key = entity.type;\u00a0 \u00a0 // some other value formats in addition to text are availible\u00a0 \u00a0 // e.g. dates: `entity.normalizedValue.dateValue.year`\u00a0 \u00a0 const textValue =\u00a0 \u00a0 \u00a0 entity.textAnchor !== null ? entity.textAnchor.content : '';\u00a0 \u00a0 const conf = entity.confidence * 100;\u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 `* ${JSON.stringify(key)}: ${JSON.stringify(textValue)}(${conf.toFixed(\u00a0 \u00a0 \u00a0 \u00a0 2\u00a0 \u00a0 \u00a0 )}% confident)`\u00a0 \u00a0 );\u00a0 }}\n```For more information, see the [Document AI Python API reference documentation](/python/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/documentai/snippets/handle_response_sample.py) \n```\nfrom typing import Optional, Sequencefrom google.api_core.client_options import ClientOptionsfrom google.cloud import documentai# TODO(developer): Uncomment these variables before running the sample.# project_id = \"YOUR_PROJECT_ID\"# location = \"YOUR_PROCESSOR_LOCATION\" # Format is \"us\" or \"eu\"# processor_id = \"YOUR_PROCESSOR_ID\" # Create processor before running sample# processor_version = \"rc\" # Refer to https://cloud.google.com/document-ai/docs/manage-processor-versions for more information# file_path = \"/path/to/local/pdf\"# mime_type = \"application/pdf\" # Refer to https://cloud.google.com/document-ai/docs/file-types for supported file typesdef process_document_entity_extraction_sample(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 processor_id: str,\u00a0 \u00a0 processor_version: str,\u00a0 \u00a0 file_path: str,\u00a0 \u00a0 mime_type: str,) -> None:\u00a0 \u00a0 # Online processing request to Document AI\u00a0 \u00a0 document = process_document(\u00a0 \u00a0 \u00a0 \u00a0 project_id, location, processor_id, processor_version, file_path, mime_type\u00a0 \u00a0 )\u00a0 \u00a0 # Print extracted entities from entity extraction processor output.\u00a0 \u00a0 # For a complete list of processors see:\u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/processors-list\u00a0 \u00a0 #\u00a0 \u00a0 # OCR and other data is also present in the processor's response.\u00a0 \u00a0 # Refer to the OCR samples for how to parse other data in the response.\u00a0 \u00a0 print(f\"Found {len(document.entities)} entities:\")\u00a0 \u00a0 for entity in document.entities:\u00a0 \u00a0 \u00a0 \u00a0 print_entity(entity)\u00a0 \u00a0 \u00a0 \u00a0 # Print Nested Entities (if any)\u00a0 \u00a0 \u00a0 \u00a0 for prop in entity.properties:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print_entity(prop)def print_entity(entity: documentai.Document.Entity) -> None:\u00a0 \u00a0 # Fields detected. For a full list of fields for each processor see\u00a0 \u00a0 # the processor documentation:\u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/processors-list\u00a0 \u00a0 key = entity.type_\u00a0 \u00a0 # Some other value formats in addition to text are availible\u00a0 \u00a0 # e.g. dates: `entity.normalized_value.date_value.year`\u00a0 \u00a0 text_value = entity.text_anchor.content\u00a0 \u00a0 confidence = entity.confidence\u00a0 \u00a0 normalized_value = entity.normalized_value.text\u00a0 \u00a0 print(f\" \u00a0 \u00a0* {repr(key)}: {repr(text_value)}({confidence:.1%} confident)\")\u00a0 \u00a0 if normalized_value:\u00a0 \u00a0 \u00a0 \u00a0 print(f\" \u00a0 \u00a0* Normalized Value: {repr(normalized_value)}\")def process_document(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 processor_id: str,\u00a0 \u00a0 processor_version: str,\u00a0 \u00a0 file_path: str,\u00a0 \u00a0 mime_type: str,\u00a0 \u00a0 process_options: Optional[documentai.ProcessOptions] = None,) -> documentai.Document:\u00a0 \u00a0 # You must set the `api_endpoint` if you use a location other than \"us\".\u00a0 \u00a0 client = documentai.DocumentProcessorServiceClient(\u00a0 \u00a0 \u00a0 \u00a0 client_options=ClientOptions(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 api_endpoint=f\"{location}-documentai.googleapis.com\"\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 )\u00a0 \u00a0 # The full resource name of the processor version, e.g.:\u00a0 \u00a0 # `projects/{project_id}/locations/{location}/processors/{processor_id}/processorVersions/{processor_version_id}`\u00a0 \u00a0 # You must create a processor before running this sample.\u00a0 \u00a0 name = client.processor_version_path(\u00a0 \u00a0 \u00a0 \u00a0 project_id, location, processor_id, processor_version\u00a0 \u00a0 )\u00a0 \u00a0 # Read the file into memory\u00a0 \u00a0 with open(file_path, \"rb\") as image:\u00a0 \u00a0 \u00a0 \u00a0 image_content = image.read()\u00a0 \u00a0 # Configure the process request\u00a0 \u00a0 request = documentai.ProcessRequest(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 raw_document=documentai.RawDocument(content=image_content, mime_type=mime_type),\u00a0 \u00a0 \u00a0 \u00a0 # Only supported for Document OCR processor\u00a0 \u00a0 \u00a0 \u00a0 process_options=process_options,\u00a0 \u00a0 )\u00a0 \u00a0 result = client.process_document(request=request)\u00a0 \u00a0 # For a full list of `Document` object attributes, reference this page:\u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/reference/rest/v1/Document\u00a0 \u00a0 return result.document\n```\n## What's nextTo search and filter code samples for other Google Cloud products, see the [Google Cloud sample browser](/docs/samples?product=documentai) .", "guide": "Document AI"}