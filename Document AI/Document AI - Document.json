{"title": "Document AI - Document", "url": "https://cloud.google.com/document-ai/docs/reference/rest/v1beta3/Document?hl=zh-cn", "abstract": "# Document AI - Document\nDocument represents the canonical document resource in Document AI. It is an interchange format that provides insights into documents and allows for collaboration between users and Document AI to iterate and optimize for quality.| JSON representation                                                                                                                                  |\n||\n| { \"mimeType\": string, \"text\": string, \"textStyles\": [ { object (Style) } ], \"pages\": [ { object (Page) } ], \"entities\": [ { object (Entity) } ], \"entityRelations\": [ { object (EntityRelation) } ], \"textChanges\": [ { object (TextChange) } ], \"shardInfo\": { object (ShardInfo) }, \"error\": { object (Status) }, \"revisions\": [ { object (Revision) } ], // Union field source can be only one of the following: \"uri\": string, \"content\": string // End of list of possible types for union field source. } || Fields                        | Fields.1                                                         |\n|:-----------------------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| mimeType                        | string An IANA published media type (MIME type).                                               |\n| text                         | string Optional. UTF-8 encoded text in reading order from the document.                                         |\n| textStyles[] (deprecated)                   | object (Style) This item is deprecated! Styles for the Document.text.                                          |\n| pages[]                        | object (Page) Visual page layout for the Document.                                               |\n| entities[]                       | object (Entity) A list of entities detected on Document.text. For document shards, entities in this list may cross shard boundaries.                          |\n| entityRelations[]                     | object (EntityRelation) Placeholder. Relationship among Document.entities.                                         |\n| textChanges[]                      | object (TextChange) Placeholder. A list of text corrections made to Document.text. This is usually used for annotating corrections to OCR mistakes. Text changes for a given revision may not overlap with each other.      |\n| shardInfo                       | object (ShardInfo) Information about the sharding if this document is sharded part of a larger document. If the document is not sharded, this message is not specified.                 |\n| error                        | object (Status) Any error that occurred while processing this document.                                         |\n| revisions[]                       | object (Revision) Placeholder. Revision history of this document.                                           |\n| Union field source. Original source document from the user. source can be only one of the following: | Union field source. Original source document from the user. source can be only one of the following:                                  |\n| uri                         | string Optional. Currently supports Google Cloud Storage URI of the form gs://bucket_name/object_name. Object versioning is not supported. For more information, refer to Google Cloud Storage Request URIs.        |\n| content                        | string (bytes format) Optional. Inline document content, represented as a stream of bytes. Note: As with all bytes fields, protobuffers use a pure binary representation, whereas JSON representations use base64.A base64-encoded string. |", "content": "## Style\nAnnotation for common text style attributes. This adheres to CSS conventions as much as possible.| JSON representation                                                           |\n|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"textAnchor\": { object (TextAnchor) }, \"color\": { object (Color) }, \"backgroundColor\": { object (Color) }, \"fontWeight\": string, \"textStyle\": string, \"textDecoration\": string, \"fontSize\": { object (FontSize) }, \"fontFamily\": string } || Fields   | Fields.1                         |\n|:----------------|:------------------------------------------------------------------------------------------------------------|\n| textAnchor  | object (TextAnchor) Text anchor indexing into the Document.text.           |\n| color   | object (Color) Text color.                     |\n| backgroundColor | object (Color) Text background color.                  |\n| fontWeight  | string Font weight. Possible values are normal, bold, bolder, and lighter.         |\n| textStyle  | string Text style. Possible values are normal, italic, and oblique.           |\n| textDecoration | string Text decoration. Follows CSS standard.                |\n| fontSize  | object (FontSize) Font size.                    |\n| fontFamily  | string Font family such as Arial, Times New Roman. https://www.w3schools.com/cssref/pr_font_font-family.asp |\n## TextAnchor\nText reference indexing into the ` [Document.text](/document-ai/docs/reference/rest/v1beta3/Document#FIELDS.text) ` .| JSON representation              |\n|:--------------------------------------------------------------------------|\n| { \"textSegments\": [ { object (TextSegment) } ], \"content\": string } || Fields   | Fields.1                                   |\n|:---------------|:-------------------------------------------------------------------------------------------------------------------------------------------------|\n| textSegments[] | object (TextSegment) The text segments from the Document.text.                     |\n| content  | string Contains the content of the text span so that users do not have to look it up in the textSegments. It is always populated for formFields. |\n## TextSegment\nA text segment in the ` [Document.text](/document-ai/docs/reference/rest/v1beta3/Document#FIELDS.text) ` . The indices may be out of bounds which indicate that the text extends into another document shard for large sharded documents. See ` [ShardInfo.text_offset](/document-ai/docs/reference/rest/v1beta3/Document#ShardInfo.FIELDS.text_offset) `| JSON representation       |\n|:-----------------------------------------------|\n| { \"startIndex\": string, \"endIndex\": string } || Fields  | Fields.1                    |\n|:-----------|:---------------------------------------------------------------------------------------|\n| startIndex | string (int64 format) TextSegment start UTF-8 char index in the Document.text.   |\n| endIndex | string (int64 format) TextSegment half open end UTF-8 char index in the Document.text. |\n## FontSize\nFont size with unit.| JSON representation     |\n|:-------------------------------------|\n| { \"size\": number, \"unit\": string } || Fields | Fields.1                 |\n|:---------|:----------------------------------------------------------------------------|\n| size  | number Font size for the text.            |\n| unit  | string Unit for the font size. Follows CSS naming (such as in, px, and pt). |\n## Page\nA page in a ` [Document](/document-ai/docs/reference/rest/v1beta3/Document) ` .| JSON representation                                                                                                                                                                                     |\n||\n| { \"pageNumber\": integer, \"image\": { object (Image) }, \"transforms\": [ { object (Matrix) } ], \"dimension\": { object (Dimension) }, \"layout\": { object (Layout) }, \"detectedLanguages\": [ { object (DetectedLanguage) } ], \"blocks\": [ { object (Block) } ], \"paragraphs\": [ { object (Paragraph) } ], \"lines\": [ { object (Line) } ], \"tokens\": [ { object (Token) } ], \"visualElements\": [ { object (VisualElement) } ], \"tables\": [ { object (Table) } ], \"formFields\": [ { object (FormField) } ], \"symbols\": [ { object (Symbol) } ], \"detectedBarcodes\": [ { object (DetectedBarcode) } ], \"imageQualityScores\": { object (ImageQualityScores) }, \"provenance\": { object (Provenance) } } || Fields     | Fields.1                                              |\n|:------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| pageNumber    | integer 1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing.               |\n| image     | object (Image) Rendered image for this page. This image is preprocessed to remove any skew, rotation, and distortions such that the annotation bounding boxes can be upright and axis-aligned. |\n| transforms[]   | object (Matrix) Transformation matrices that were applied to the original document image to produce Page.image.                    |\n| dimension    | object (Dimension) Physical dimension of the page.                                    |\n| layout     | object (Layout) Layout for the page.                                       |\n| detectedLanguages[]  | object (DetectedLanguage) A list of detected languages together with confidence.                            |\n| blocks[]    | object (Block) A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.     |\n| paragraphs[]   | object (Paragraph) A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph.             |\n| lines[]     | object (Line) A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line.                |\n| tokens[]    | object (Token) A list of visually detected tokens on the page.                                 |\n| visualElements[]  | object (VisualElement) A list of detected non-text visual elements e.g. checkbox, signature etc. on the page.                     |\n| tables[]    | object (Table) A list of visually detected tables on the page.                                 |\n| formFields[]   | object (FormField) A list of visually detected form fields on the page.                              |\n| symbols[]    | object (Symbol) A list of visually detected symbols on the page.                                |\n| detectedBarcodes[]  | object (DetectedBarcode) A list of detected barcodes.                                   |\n| imageQualityScores  | object (ImageQualityScores) Image quality scores.                                    |\n| provenance (deprecated) | object (Provenance) This item is deprecated! The history of this page.                               |\n## Image\nRendered image contents for this page.| JSON representation                |\n|:-----------------------------------------------------------------------------------|\n| { \"content\": string, \"mimeType\": string, \"width\": integer, \"height\": integer } || Fields | Fields.1                  |\n|:---------|:-----------------------------------------------------------------------------|\n| content | string (bytes format) Raw byte content of the image.A base64-encoded string. |\n| mimeType | string Encoding media type (MIME type) for the image.      |\n| width | integer Width of the image in pixels.          |\n| height | integer Height of the image in pixels.          |\n## Matrix\nRepresentation for transformation matrix, intended to be compatible and used with OpenCV format for image manipulation.| JSON representation              |\n|:--------------------------------------------------------------------------|\n| { \"rows\": integer, \"cols\": integer, \"type\": integer, \"data\": string } || Fields | Fields.1                                                               |\n|:---------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| rows  | integer Number of rows in the matrix.                                                        |\n| cols  | integer Number of columns in the matrix.                                                       |\n| type  | integer This encodes information about what data type the matrix uses. For example, 0 (CV_8U) is an unsigned 8-bit image. For the full list of OpenCV primitive data types, please refer to https://docs.opencv.org/4.3.0/d1/d1b/group__core__hal__interface.html |\n| data  | string (bytes format) The matrix data.A base64-encoded string.                                                 |\n## Dimension\nDimension for the page.| JSON representation          |\n|:---------------------------------------------------------|\n| { \"width\": number, \"height\": number, \"unit\": string } || Fields | Fields.1    |\n|:---------|:-----------------------|\n| width | number Page width.  |\n| height | number Page height. |\n| unit  | string Dimension unit. |\n## Layout\nVisual element describing a layout unit on a page.| JSON representation                                 |\n|:------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"textAnchor\": { object (TextAnchor) }, \"confidence\": number, \"boundingPoly\": { object (BoundingPoly) }, \"orientation\": enum (Orientation) } || Fields  | Fields.1                                                |\n|:-------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| textAnchor | object (TextAnchor) Text anchor indexing into the Document.text.                                  |\n| confidence | number Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range [0, 1]. |\n| boundingPoly | object (BoundingPoly) The bounding polygon for the Layout.                                    |\n| orientation | enum (Orientation) Detected orientation for the Layout.                                     |\n## BoundingPoly\nA bounding polygon for the detected image annotation.| JSON representation                      |\n|:-----------------------------------------------------------------------------------------------------------|\n| { \"vertices\": [ { object (Vertex) } ], \"normalizedVertices\": [ { object (NormalizedVertex) } ] } || Fields    | Fields.1               |\n|:---------------------|:--------------------------------------------------------------------|\n| vertices[]   | object (Vertex) The bounding polygon vertices.      |\n| normalizedVertices[] | object (NormalizedVertex) The bounding polygon normalized vertices. |\n## Vertex\nA vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.| JSON representation    |\n|:---------------------------------|\n| { \"x\": integer, \"y\": integer } || Fields | Fields.1             |\n|:---------|:---------------------------------------------------------|\n| x  | integer X coordinate.         |\n| y  | integer Y coordinate (starts from the top of the image). |\n## NormalizedVertex\nA vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.| JSON representation   |\n|:-------------------------------|\n| { \"x\": number, \"y\": number } || Fields | Fields.1            |\n|:---------|:--------------------------------------------------------|\n| x  | number X coordinate.         |\n| y  | number Y coordinate (starts from the top of the image). |\n## Orientation\nDetected human reading orientation.| Enums     | Enums.1                        |\n|:------------------------|:-------------------------------------------------------------------------------------------------------|\n| ORIENTATION_UNSPECIFIED | Unspecified orientation.                    |\n| PAGE_UP     | Orientation is aligned with page up.                 |\n| PAGE_RIGHT    | Orientation is aligned with page right. Turn the head 90 degrees clockwise from upright to read.  |\n| PAGE_DOWN    | Orientation is aligned with page down. Turn the head 180 degrees from upright to read.     |\n| PAGE_LEFT    | Orientation is aligned with page left. Turn the head 90 degrees counterclockwise from upright to read. |\n## DetectedLanguage\nDetected language for a structural component.| JSON representation        |\n|:---------------------------------------------------|\n| { \"languageCode\": string, \"confidence\": number } || Fields  | Fields.1             |\n|:-------------|:-----------------------------------------------------------|\n| languageCode | string The BCP-47 language code, such as en-US or sr-Latn. |\n| confidence | number Confidence of detected language. Range [0, 1].  |\n## Block\nA block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.| JSON representation                               |\n|:--------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"layout\": { object (Layout) }, \"detectedLanguages\": [ { object (DetectedLanguage) } ], \"provenance\": { object (Provenance) } } || Fields     | Fields.1                   |\n|:------------------------|:---------------------------------------------------------------------------------|\n| layout     | object (Layout) Layout for Block.            |\n| detectedLanguages[]  | object (DetectedLanguage) A list of detected languages together with confidence. |\n| provenance (deprecated) | object (Provenance) This item is deprecated! The history of this annotation.  |\n## Provenance\nStructure to identify provenance relationships between annotations in different revisions.| JSON representation                        |\n|:-----------------------------------------------------------------------------------------------------------------|\n| { \"revision\": integer, \"id\": integer, \"parents\": [ { object (Parent) } ], \"type\": enum (OperationType) } || Fields    | Fields.1                          |\n|:----------------------|:----------------------------------------------------------------------------------------------------------------|\n| revision (deprecated) | integer This item is deprecated! The index of the revision that produced this element.       |\n| id (deprecated)  | integer This item is deprecated! The Id of this operation. Needs to be unique within the scope of the revision. |\n| parents[]    | object (Parent) References to the original elements that are replaced.           |\n| type     | enum (OperationType) The type of provenance operation.               |\n## Parent\nThe parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.| JSON representation           |\n|:------------------------------------------------------------|\n| { \"revision\": integer, \"index\": integer, \"id\": integer } || Fields   | Fields.1                                    |\n|:----------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------|\n| revision  | integer The index of the index into current revision's parentIds list.                    |\n| index   | integer The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision. |\n| id (deprecated) | integer This item is deprecated! The id of the parent provenance.                     |\n## OperationType\nIf a processor or agent does an explicit operation on existing elements.| Enums      | Enums.1                                                        |\n|:---------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| OPERATION_TYPE_UNSPECIFIED | Operation type unspecified. If no operation is specified a provenance entry is simply used to match against a parent.                             |\n| ADD      | Add an element.                                                      |\n| REMOVE      | Remove an element identified by parent.                                                |\n| UPDATE      | Updates any fields within the given provenance scope of the message. It overwrites the fields rather than replacing them. Use this when you want to update a field value of an entity without also updating all the child properties. |\n| REPLACE     | Currently unused. Replace an element identified by parent.                                           |\n| EVAL_REQUESTED    | Deprecated. Request human review for the element identified by parent.This item is deprecated!                                  |\n| EVAL_APPROVED    | Deprecated. Element is reviewed and approved at human review, confidence will be set to 1.0.This item is deprecated!                             |\n| EVAL_SKIPPED    | Deprecated. Element is skipped in the validation process.This item is deprecated!                                      |\n## Paragraph\nA collection of lines that a human would perceive as a paragraph.| JSON representation                               |\n|:--------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"layout\": { object (Layout) }, \"detectedLanguages\": [ { object (DetectedLanguage) } ], \"provenance\": { object (Provenance) } } || Fields     | Fields.1                   |\n|:------------------------|:---------------------------------------------------------------------------------|\n| layout     | object (Layout) Layout for Paragraph.           |\n| detectedLanguages[]  | object (DetectedLanguage) A list of detected languages together with confidence. |\n| provenance (deprecated) | object (Provenance) This item is deprecated! The history of this annotation.  |\n## Line\nA collection of tokens that a human would perceive as a line. Does not cross column boundaries, can be horizontal, vertical, etc.| JSON representation                               |\n|:--------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"layout\": { object (Layout) }, \"detectedLanguages\": [ { object (DetectedLanguage) } ], \"provenance\": { object (Provenance) } } || Fields     | Fields.1                   |\n|:------------------------|:---------------------------------------------------------------------------------|\n| layout     | object (Layout) Layout for Line.             |\n| detectedLanguages[]  | object (DetectedLanguage) A list of detected languages together with confidence. |\n| provenance (deprecated) | object (Provenance) This item is deprecated! The history of this annotation.  |\n## Token\nA detected token.| JSON representation                                                     |\n|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"layout\": { object (Layout) }, \"detectedBreak\": { object (DetectedBreak) }, \"detectedLanguages\": [ { object (DetectedLanguage) } ], \"provenance\": { object (Provenance) }, \"styleInfo\": { object (StyleInfo) } } || Fields     | Fields.1                   |\n|:------------------------|:---------------------------------------------------------------------------------|\n| layout     | object (Layout) Layout for Token.            |\n| detectedBreak   | object (DetectedBreak) Detected break at the end of a Token.      |\n| detectedLanguages[]  | object (DetectedLanguage) A list of detected languages together with confidence. |\n| provenance (deprecated) | object (Provenance) This item is deprecated! The history of this annotation.  |\n| styleInfo    | object (StyleInfo) Text style attributes.          |\n## DetectedBreak\nDetected break at the end of a ` [Token](/document-ai/docs/reference/rest/v1beta3/Document#Token) ` .| JSON representation  |\n|:-------------------------|\n| { \"type\": enum (Type) } || Fields | Fields.1       |\n|:---------|:---------------------------------|\n| type  | enum (Type) Detected break type. |\n## Type\nEnum to denote the type of break found.| Enums   | Enums.1               |\n|:-----------------|:------------------------------------------------------------------|\n| TYPE_UNSPECIFIED | Unspecified break type.           |\n| SPACE   | A single whitespace.            |\n| WIDE_SPACE  | A wider whitespace.            |\n| HYPHEN   | A hyphen that indicates that a token has been split across lines. |\n## StyleInfo\nFont and other text style attributes.| JSON representation                                                                                           |\n|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"fontSize\": integer, \"pixelFontSize\": number, \"letterSpacing\": number, \"fontType\": string, \"bold\": boolean, \"italic\": boolean, \"underlined\": boolean, \"strikeout\": boolean, \"subscript\": boolean, \"superscript\": boolean, \"smallcaps\": boolean, \"fontWeight\": integer, \"handwritten\": boolean, \"textColor\": { object (Color) }, \"backgroundColor\": { object (Color) } } || Fields   | Fields.1                       |\n|:----------------|:-------------------------------------------------------------------------------------------------|\n| fontSize  | integer Font size in points (1 point is \u00b9\u2044\u2087\u2082 inches).           |\n| pixelFontSize | number Font size in pixels, equal to unrounded fontSize * resolution \u00f7 72.0.      |\n| letterSpacing | number Letter spacing in points.                 |\n| fontType  | string Name or style of the font.                |\n| bold   | boolean Whether the text is bold (equivalent to fontWeight is at least 700).      |\n| italic   | boolean Whether the text is italic.                |\n| underlined  | boolean Whether the text is underlined.               |\n| strikeout  | boolean Whether the text is strikethrough.              |\n| subscript  | boolean Whether the text is a subscript.               |\n| superscript  | boolean Whether the text is a superscript.              |\n| smallcaps  | boolean Whether the text is in small caps.              |\n| fontWeight  | integer TrueType weight on a scale 100 (thin) to 1000 (ultra-heavy). Normal is 400, bold is 700. |\n| handwritten  | boolean Whether the text is handwritten.               |\n| textColor  | object (Color) Color of the text.                |\n| backgroundColor | object (Color) Color of the background.               |\n## VisualElement\nDetected non-text visual elements e.g. checkbox, signature etc. on the page.| JSON representation                        |\n|:-------------------------------------------------------------------------------------------------------------------|\n| { \"layout\": { object (Layout) }, \"type\": string, \"detectedLanguages\": [ { object (DetectedLanguage) } ] } || Fields    | Fields.1                   |\n|:--------------------|:---------------------------------------------------------------------------------|\n| layout    | object (Layout) Layout for VisualElement.          |\n| type    | string Type of the VisualElement.            |\n| detectedLanguages[] | object (DetectedLanguage) A list of detected languages together with confidence. |\n## Table\nA table representation similar to HTML table structure.| JSON representation                                                     |\n|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"layout\": { object (Layout) }, \"headerRows\": [ { object (TableRow) } ], \"bodyRows\": [ { object (TableRow) } ], \"detectedLanguages\": [ { object (DetectedLanguage) } ], \"provenance\": { object (Provenance) } } || Fields     | Fields.1                   |\n|:------------------------|:---------------------------------------------------------------------------------|\n| layout     | object (Layout) Layout for Table.            |\n| headerRows[]   | object (TableRow) Header rows of the table.          |\n| bodyRows[]    | object (TableRow) Body rows of the table.          |\n| detectedLanguages[]  | object (DetectedLanguage) A list of detected languages together with confidence. |\n| provenance (deprecated) | object (Provenance) This item is deprecated! The history of this table.   |\n## TableRow\nA row of table cells.| JSON representation       |\n|:---------------------------------------------|\n| { \"cells\": [ { object (TableCell) } ] } || Fields | Fields.1          |\n|:---------|:------------------------------------------------|\n| cells[] | object (TableCell) Cells that make up this row. |\n## TableCell\nA cell representation inside the table.| JSON representation                               |\n|:--------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"layout\": { object (Layout) }, \"rowSpan\": integer, \"colSpan\": integer, \"detectedLanguages\": [ { object (DetectedLanguage) } ] } || Fields    | Fields.1                   |\n|:--------------------|:---------------------------------------------------------------------------------|\n| layout    | object (Layout) Layout for TableCell.           |\n| rowSpan    | integer How many rows this cell spans.           |\n| colSpan    | integer How many columns this cell spans.          |\n| detectedLanguages[] | object (DetectedLanguage) A list of detected languages together with confidence. |\n## FormField\nA form field detected on the page.| JSON representation                                                                               |\n|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"fieldName\": { object (Layout) }, \"fieldValue\": { object (Layout) }, \"nameDetectedLanguages\": [ { object (DetectedLanguage) } ], \"valueDetectedLanguages\": [ { object (DetectedLanguage) } ], \"valueType\": string, \"correctedKeyText\": string, \"correctedValueText\": string, \"provenance\": { object (Provenance) } } || Fields     | Fields.1                                            |\n|:-------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| fieldName    | object (Layout) Layout for the FormField name. e.g. Address, Email, Grand total, Phone number, etc.                     |\n| fieldValue    | object (Layout) Layout for the FormField value.                                  |\n| nameDetectedLanguages[] | object (DetectedLanguage) A list of detected languages for name together with confidence.                       |\n| valueDetectedLanguages[] | object (DetectedLanguage) A list of detected languages for value together with confidence.                       |\n| valueType    | string If the value is non-textual, this field represents the type. Current valid values are: blank (this indicates the fieldValue is normal text) unfilled_checkbox filled_checkbox |\n| correctedKeyText   | string Created for Labeling UI to export key text. If corrections were made to the text identified by the fieldName.text_anchor, this field will contain the correction.    |\n| correctedValueText  | string Created for Labeling UI to export value text. If corrections were made to the text identified by the fieldValue.text_anchor, this field will contain the correction.   |\n| provenance    | object (Provenance) The history of this annotation.                                 |\n## Symbol\nA detected symbol.| JSON representation                    |\n|:--------------------------------------------------------------------------------------------------|\n| { \"layout\": { object (Layout) }, \"detectedLanguages\": [ { object (DetectedLanguage) } ] } || Fields    | Fields.1                   |\n|:--------------------|:---------------------------------------------------------------------------------|\n| layout    | object (Layout) Layout for Symbol.            |\n| detectedLanguages[] | object (DetectedLanguage) A list of detected languages together with confidence. |\n## DetectedBarcode\nA detected barcode.| JSON representation              |\n|:-------------------------------------------------------------------------|\n| { \"layout\": { object (Layout) }, \"barcode\": { object (Barcode) } } || Fields | Fields.1                |\n|:---------|:----------------------------------------------------------------------|\n| layout | object (Layout) Layout for DetectedBarcode.       |\n| barcode | object (Barcode) Detailed barcode information of the DetectedBarcode. |\n## Barcode\nEncodes the detailed information of a barcode.| JSON representation            |\n|:-------------------------------------------------------------------|\n| { \"format\": string, \"valueFormat\": string, \"rawValue\": string } || Fields  | Fields.1                                                                                                |\n|:------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| format  | string Format of a barcode. The supported formats are: CODE_128: Code 128 type. CODE_39: Code 39 type. CODE_93: Code 93 type. CODABAR: Codabar type. DATA_MATRIX: 2D Data Matrix type. ITF: ITF type. EAN_13: EAN-13 type. EAN_8: EAN-8 type. QR_CODE: 2D QR code type. UPC_A: UPC-A type. UPC_E: UPC-E type. PDF417: PDF417 type. AZTEC: 2D Aztec code type. DATABAR: GS1 DataBar code type.   |\n| valueFormat | string Value format describes the format of the value that a barcode encodes. The supported formats are: CONTACT_INFO: Contact information. EMAIL: Email address. ISBN: ISBN identifier. PHONE: Phone number. PRODUCT: Product. SMS: SMS message. TEXT: Text string. URL: URL address. WIFI: Wifi information. GEO: Geo-localization. CALENDAR_EVENT: Calendar event. DRIVER_LICENSE: Driver's license. |\n| rawValue | string Raw value encoded in the barcode. For example: 'MEBKM:TITLE:Google;URL:https://www.google.com;;'.                                                                        |\n## ImageQualityScores\nImage quality scores for the page image.| JSON representation                 |\n|:-------------------------------------------------------------------------------------|\n| { \"qualityScore\": number, \"detectedDefects\": [ { object (DetectedDefect) } ] } || Fields   | Fields.1                 |\n|:------------------|:---------------------------------------------------------------------------|\n| qualityScore  | number The overall quality score. Range [0, 1] where 1 is perfect quality. |\n| detectedDefects[] | object (DetectedDefect) A list of detected defects.      |\n## DetectedDefect\nImage Quality Defects| JSON representation      |\n|:-------------------------------------------|\n| { \"type\": string, \"confidence\": number } || Fields  | Fields.1                                                            |\n|:-----------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| type  | string Name of the defect type. Supported values are: quality/defect_blurry quality/defect_noisy quality/defect_dark quality/defect_faint quality/defect_text_too_small quality/defect_document_cutoff quality/defect_text_cutoff quality/defect_glare |\n| confidence | number Confidence of detected defect. Range [0, 1] where 1 indicates strong confidence that the defect exists.                                   |\n## Entity\nAn entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.| JSON representation                                                                                   |\n|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"textAnchor\": { object (TextAnchor) }, \"type\": string, \"mentionText\": string, \"mentionId\": string, \"confidence\": number, \"pageAnchor\": { object (PageAnchor) }, \"id\": string, \"normalizedValue\": { object (NormalizedValue) }, \"properties\": [ { object (Entity) } ], \"provenance\": { object (Provenance) }, \"redacted\": boolean } || Fields   | Fields.1                                                             |\n|:----------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| textAnchor  | object (TextAnchor) Optional. Provenance of the entity. Text anchor indexing into the Document.text.                                      |\n| type   | string Required. Entity type from a schema e.g. Address.                                                 |\n| mentionText  | string Optional. Text value of the entity e.g. 1600 Amphitheatre Pkwy.                                             |\n| mentionId  | string Optional. Deprecated. Use id field instead.                                                  |\n| confidence  | number Optional. Confidence of detected Schema entity. Range [0, 1].                                              |\n| pageAnchor  | object (PageAnchor) Optional. Represents the provenance of this entity wrt. the location on the page where it was found.                                 |\n| id    | string Optional. Canonical id. This will be a unique value in the entity list for this document.                                       |\n| normalizedValue | object (NormalizedValue) Optional. Normalized entity value. Absent if the extracted value could not be converted or the type (e.g. address) is not supported for certain parsers. This field is also only populated for certain supported document types. |\n| properties[] | object (Entity) Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.                               |\n| provenance  | object (Provenance) Optional. The history of this annotation.                                                |\n| redacted  | boolean Optional. Whether the entity will be redacted for de-identification purposes.                                          |\n## PageAnchor\nReferencing the visual context of the entity in the ` [Document.pages](/document-ai/docs/reference/rest/v1beta3/Document#FIELDS.pages) ` . Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.| JSON representation       |\n|:----------------------------------------------|\n| { \"pageRefs\": [ { object (PageRef) } ] } || Fields  | Fields.1              |\n|:-----------|:----------------------------------------------------------------|\n| pageRefs[] | object (PageRef) One or more references to visual page elements |\n## PageRef\nRepresents a weak reference to a page element within a document.| JSON representation                                |\n|:------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"page\": string, \"layoutType\": enum (LayoutType), \"layoutId\": string, \"boundingPoly\": { object (BoundingPoly) }, \"confidence\": number } || Fields    | Fields.1                                                                     |\n|:----------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| page     | string (int64 format) Required. Index into the Document.pages element, for example using [Document.pages][pageRefs.page] to locate the related page element. This field is skipped when its value is the default 0. See https://developers.google.com/protocol-buffers/docs/proto3#json. |\n| layoutType   | enum (LayoutType) Optional. The type of the layout element that is being referenced if any.                                                |\n| layoutId (deprecated) | string This item is deprecated! Optional. Deprecated. Use PageRef.bounding_poly instead.                                                 |\n| boundingPoly   | object (BoundingPoly) Optional. Identifies the bounding polygon of a layout element on the page.                                               |\n| confidence   | number Optional. Confidence of detected page element, if applicable. Range [0, 1].                                                  |\n## LayoutType\nThe type of layout that is being referenced.| Enums     | Enums.1         |\n|:------------------------|:-------------------------------------------|\n| LAYOUT_TYPE_UNSPECIFIED | Layout Unspecified.      |\n| BLOCK     | References a Page.blocks element.   |\n| PARAGRAPH    | References a Page.paragraphs element.  |\n| LINE     | References a Page.lines element.   |\n| TOKEN     | References a Page.tokens element.   |\n| VISUAL_ELEMENT   | References a Page.visual_elements element. |\n| TABLE     | Refrrences a Page.tables element.   |\n| FORM_FIELD    | References a Page.form_fields element.  |\n## NormalizedValue\nParsed and normalized entity value.| JSON representation                                                                                              |\n|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"text\": string, // Union field structured_value can be only one of the following: \"moneyValue\": { object (Money) }, \"dateValue\": { object (Date) }, \"datetimeValue\": { object (DateTime) }, \"addressValue\": { object (PostalAddress) }, \"booleanValue\": boolean, \"integerValue\": integer, \"floatValue\": number // End of list of possible types for union field structured_value. } || Fields                                                          | Fields.1                                                                                                                                      |\n|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| text                                                          | string Optional. An optional field to store a normalized string. For some entity types, one of respective structured_value fields may also be populated. Also not all the types of structured_value will be normalized. For example, some processors may not generate float or integer normalized text by default.Below are sample formats mapped to structured values. Money/Currency type (moneyValue) is in the ISO 4217 text format. Date type (dateValue) is in the ISO 8601 text format. Datetime type (datetimeValue) is in the ISO 8601 text format. |\n| Union field structured_value. An optional structured entity value. Must match entity type defined in schema if known. If this field is present, the text field could also be populated. structured_value can be only one of the following: | Union field structured_value. An optional structured entity value. Must match entity type defined in schema if known. If this field is present, the text field could also be populated. structured_value can be only one of the following:                                                                             |\n| moneyValue                                                         | object (Money) Money value. See also: https://github.com/googleapis/googleapis/blob/master/google/type/money.proto                                                                                                           |\n| dateValue                                                         | object (Date) Date value. Includes year, month, day. See also: https://github.com/googleapis/googleapis/blob/master/google/type/date.proto                                                                                                     |\n| datetimeValue                                                        | object (DateTime) DateTime value. Includes date, time, and timezone. See also: https://github.com/googleapis/googleapis/blob/master/google/type/datetime.proto                                                                                                |\n| addressValue                                                        | object (PostalAddress) Postal address. See also: https://github.com/googleapis/googleapis/blob/master/google/type/postal_address.proto                                                                                                      |\n| booleanValue                                                        | boolean Boolean value. Can be used for entities with binary values, or for checkboxes.                                                                                                                  |\n| integerValue                                                        | integer Integer value.                                                                                                                                  |\n| floatValue                                                         | number Float value.                                                                                                                                   |\n## EntityRelation\nRelationship between ` [Entities](/document-ai/docs/reference/rest/v1beta3/Document#Entity) ` .| JSON representation            |\n|:-------------------------------------------------------------------|\n| { \"subjectId\": string, \"objectId\": string, \"relation\": string } || Fields | Fields.1       |\n|:----------|:---------------------------------|\n| subjectId | string Subject entity id.  |\n| objectId | string Object entity id.   |\n| relation | string Relationship description. |\n## TextChange\nThis message is used for text changes aka. OCR corrections.| JSON representation                         |\n|:---------------------------------------------------------------------------------------------------------------------|\n| { \"textAnchor\": { object (TextAnchor) }, \"changedText\": string, \"provenance\": [ { object (Provenance) } ] } || Fields     | Fields.1                                                                |\n|:--------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| textAnchor    | object (TextAnchor) Provenance of the correction. Text anchor indexing into the Document.text. There can only be a single TextAnchor.text_segments element. If the start and end index of the text segment are the same, the text change is inserted before that index. |\n| changedText    | string The text that replaces the text identified in the textAnchor.                                                 |\n| provenance[] (deprecated) | object (Provenance) This item is deprecated! The history of this annotation.                                               |\n## ShardInfo\nFor a large document, sharding may be performed to produce several document shards. Each document shard contains this field to detail which shard it is.| JSON representation              |\n|:------------------------------------------------------------------------|\n| { \"shardIndex\": string, \"shardCount\": string, \"textOffset\": string } || Fields  | Fields.1                          |\n|:-----------|:-------------------------------------------------------------------------------------------------------------|\n| shardIndex | string (int64 format) The 0-based index of this shard.              |\n| shardCount | string (int64 format) Total number of shards.                |\n| textOffset | string (int64 format) The index of the first character in Document.text in the overall document global text. |\n## Revision\nContains past or forward revisions of this document.| JSON representation                                                                     |\n|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"id\": string, \"parent\": [ integer ], \"parentIds\": [ string ], \"createTime\": string, \"humanReview\": { object (HumanReview) }, // Union field source can be only one of the following: \"agent\": string, \"processor\": string // End of list of possible types for union field source. } || Fields                    | Fields.1                                                                          |\n|:--------------------------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| id                     | string Id of the revision, internally generated by doc proto storage. Unique within the context of the document.                                                |\n| parent[] (deprecated)                 | integer This item is deprecated! The revisions that this revision is based on. This can include one or more parent (when documents are merged.) This field represents the index into the revisions field.                          |\n| parentIds[]                   | string The revisions that this revision is based on. Must include all the ids that have anything to do with this revision - eg. there are provenance.parent.revision fields that index into this field.                           |\n| createTime                   | string (Timestamp format) The time that the revision was created, internally generated by doc proto storage at the time of create.A timestamp in RFC3339 UTC \"Zulu\" format, with nanosecond resolution and up to nine fractional digits. Examples: \"2014-10-02T15:01:23Z\" and \"2014-10-02T15:01:23.045123456Z\". |\n| humanReview                   | object (HumanReview) Human Review information of this revision.                                                             |\n| Union field source. Who/what made the change source can be only one of the following: | Union field source. Who/what made the change source can be only one of the following:                                                       |\n| agent                     | string If the change was made by a person specify the name or id of that person.                                                        |\n| processor                    | string If the annotation was made by processor identify the processor by its resource name.                                                      |\n## HumanReview\nHuman Review information of the document.| JSON representation       |\n|:----------------------------------------------|\n| { \"state\": string, \"stateMessage\": string } || Fields  | Fields.1                                  |\n|:-------------|:---------------------------------------------------------------------------------------------------------------------------------------------|\n| state  | string Human review state. e.g. requested, succeeded, rejected.                    |\n| stateMessage | string A message providing more details about the current state of processing. For example, the rejection reason when the state is rejected. |", "guide": "Document AI"}