{"title": "Document AI - Document AI client libraries", "url": "https://cloud.google.com/document-ai/docs/libraries?hl=zh-cn", "abstract": "# Document AI - Document AI client libraries\nThis page shows how to get started with the Cloud Client Libraries for the Document AI API. Client libraries make it easier to access Google Cloud APIs from a supported language. Although you can use Google Cloud APIs directly by making raw requests to the server, client libraries provide simplifications that significantly reduce the amount of code you need to write.\nRead more about the Cloud Client Libraries and the older Google API Client Libraries in [Client libraries explained](/apis/docs/client-libraries-explained) .\n[](None)\n", "content": "## Install the client library\nSee [Setting up a C++ development environment](/cpp/docs/setup) for details about this client library's requirements and install dependencies.```\nInstall-Package Google.Cloud.DocumentAI.V1 -Pre\n```\nFor more information, see [Setting Up a C# Development Environment](/dotnet/docs/setup) .```\ngo get cloud.google.com/go/documentai\n```\nFor more information, see [Setting Up a Go Development Environment](/go/docs/setup) .If you are using [Maven](https://maven.apache.org/) , add the following to your `pom.xml` file. For more information about BOMs, see [The Google Cloud Platform Libraries BOM](https://cloud.google.com/java/docs/bom) .\n```\n<dependencyManagement>\u00a0 <dependencies>\u00a0 \u00a0 <dependency>\u00a0 \u00a0 \u00a0 <groupId>com.google.cloud</groupId>\u00a0 \u00a0 \u00a0 <artifactId>libraries-bom</artifactId>\u00a0 \u00a0 \u00a0 <version>26.34.0</version>\u00a0 \u00a0 \u00a0 <type>pom</type>\u00a0 \u00a0 \u00a0 <scope>import</scope>\u00a0 \u00a0 </dependency>\u00a0 </dependencies></dependencyManagement><dependencies>\u00a0 <dependency>\u00a0 \u00a0 <groupId>com.google.cloud</groupId>\u00a0 \u00a0 <artifactId>google-cloud-document-ai</artifactId>\u00a0 </dependency>\n```\nIf you are using [Gradle](https://gradle.org/) , add the following to your dependencies:\n```\nimplementation 'com.google.cloud:google-cloud-document-ai:2.42.0'\n```\nIf you are using [sbt](https://www.scala-sbt.org/) , add the following to your dependencies:\n```\nlibraryDependencies += \"com.google.cloud\" % \"google-cloud-document-ai\" % \"2.42.0\"\n```\nIf you're using Visual Studio Code, IntelliJ, or Eclipse, you can add client libraries to your project using the following IDE plugins:- [Cloud Code for VS Code](/code/docs/vscode/client-libraries) \n- [Cloud Code for IntelliJ](/code/docs/intellij/client-libraries) \n- [Cloud Tools for Eclipse](/eclipse/docs/libraries) \nThe plugins provide additional functionality, such as key management for service accounts. Refer to each plugin's documentation for details.\n **Note:** Cloud Java client libraries do not currently support Android.\nFor more information, see [Setting Up a Java Development Environment](/java/docs/setup) .```\nnpm install @google-cloud/documentai\n```\nFor more information, see [Setting Up a Node.js Development Environment](/nodejs/docs/setup) .```\ncomposer require google/cloud-document-ai\n```\nFor more information, see [Using PHP on Google Cloud](/php/docs) .```\npip install --upgrade google-cloud-documentai\n```\nFor more information, see [Setting Up a Python Development Environment](/python/docs/setup) .```\ngem install google-cloud-document_ai\n```\nFor more information, see [Setting Up a Ruby Development Environment](/ruby/docs/setup) .\n[](None)\n## Set up authentication\n[Application Default Credentials (ADC)](/docs/authentication/application-default-credentials)\nFor production environments, the way you set up ADC depends on the service and context. For more information, see [Set up Application Default Credentials](/docs/authentication/provide-credentials-adc) .\nFor a local development environment, you can set up ADC with the credentials that are associated with your Google Account:\n- [Install and initialize the gcloud CLI](/sdk/docs/install) .When you initialize the gcloud CLI, be sure to specify a Google Cloud project in which you have permission to access the resources your application needs.\n- Create your credential file:```\ngcloud auth application-default login\n```A sign-in screen appears. After you sign in, your credentials are stored in the [local credential file used by ADC](/docs/authentication/application-default-credentials#personal) .\n[](None)\n## Use the client library\nThe following example shows how to use the client library.\n[View on GitHub](https://github.com/googleapis/google-cloud-cpp/blob/HEAD/google/cloud/documentai/quickstart/quickstart.cc) \n```\n#include \"google/cloud/documentai/v1/document_processor_client.h\"#include \"google/cloud/location.h\"#include <fstream>#include <iostream>#include <string>int main(int argc, char* argv[]) try {\u00a0 if (argc != 5) {\u00a0 \u00a0 std::cerr << \"Usage: \" << argv[0]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 << \" project-id location-id processor-id filename (PDF only)\\n\";\u00a0 \u00a0 return 1;\u00a0 }\u00a0 std::string const location_id = argv[2];\u00a0 if (location_id != \"us\" && location_id != \"eu\") {\u00a0 \u00a0 std::cerr << \"location-id must be either 'us' or 'eu'\\n\";\u00a0 \u00a0 return 1;\u00a0 }\u00a0 auto const location = google::cloud::Location(argv[1], location_id);\u00a0 namespace documentai = ::google::cloud::documentai_v1;\u00a0 auto client = documentai::DocumentProcessorServiceClient(\u00a0 \u00a0 \u00a0 documentai::MakeDocumentProcessorServiceConnection(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 location.location_id()));\u00a0 google::cloud::documentai::v1::ProcessRequest req;\u00a0 req.set_name(location.FullName() + \"/processors/\" + argv[3]);\u00a0 req.set_skip_human_review(true);\u00a0 auto& doc = *req.mutable_raw_document();\u00a0 doc.set_mime_type(\"application/pdf\");\u00a0 std::ifstream is(argv[4]);\u00a0 doc.set_content(std::string{std::istreambuf_iterator<char>(is), {}});\u00a0 auto resp = client.ProcessDocument(std::move(req));\u00a0 if (!resp) throw std::move(resp).status();\u00a0 std::cout << resp->document().text() << \"\\n\";\u00a0 return 0;} catch (google::cloud::Status const& status) {\u00a0 std::cerr << \"google::cloud::Status thrown: \" << status << \"\\n\";\u00a0 return 1;}\n``` [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/documentai/api/DocumentAI.Samples/Quickstart.cs) \n```\nusing Google.Cloud.DocumentAI.V1;using Google.Protobuf;using System;using System.IO;public class QuickstartSample{\u00a0 \u00a0 public Document Quickstart(\u00a0 \u00a0 \u00a0 \u00a0 string projectId = \"your-project-id\",\u00a0 \u00a0 \u00a0 \u00a0 string locationId = \"your-processor-location\",\u00a0 \u00a0 \u00a0 \u00a0 string processorId = \"your-processor-id\",\u00a0 \u00a0 \u00a0 \u00a0 string localPath = \"my-local-path/my-file-name\",\u00a0 \u00a0 \u00a0 \u00a0 string mimeType = \"application/pdf\"\u00a0 \u00a0 )\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 var client = new DocumentProcessorServiceClientBuilder\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Endpoint = $\"{locationId}-documentai.googleapis.com\"\u00a0 \u00a0 \u00a0 \u00a0 }.Build();\u00a0 \u00a0 \u00a0 \u00a0 // Read in local file\u00a0 \u00a0 \u00a0 \u00a0 using var fileStream = File.OpenRead(localPath);\u00a0 \u00a0 \u00a0 \u00a0 var rawDocument = new RawDocument\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Content = ByteString.FromStream(fileStream),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MimeType = mimeType\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 var request = new ProcessRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name = ProcessorName.FromProjectLocationProcessor(projectId, locationId, processorId).ToString(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RawDocument = rawDocument\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request\u00a0 \u00a0 \u00a0 \u00a0 var response = client.ProcessDocument(request);\u00a0 \u00a0 \u00a0 \u00a0 var document = response.Document;\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(document.Text);\u00a0 \u00a0 \u00a0 \u00a0 return document;\u00a0 \u00a0 }}\n``` [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/documentai/documentai_quickstart/main.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"flag\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io/ioutil\"\u00a0 \u00a0 \u00a0 \u00a0 documentai \"cloud.google.com/go/documentai/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/documentai/apiv1/documentaipb\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/api/option\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 projectID := flag.String(\"project_id\", \"PROJECT_ID\", \"Cloud Project ID\")\u00a0 \u00a0 \u00a0 \u00a0 location := flag.String(\"location\", \"us\", \"The Processor location\")\u00a0 \u00a0 \u00a0 \u00a0 // Create a Processor before running sample\u00a0 \u00a0 \u00a0 \u00a0 processorID := flag.String(\"processor_id\", \"aaaaaaaa\", \"The Processor ID\")\u00a0 \u00a0 \u00a0 \u00a0 filePath := flag.String(\"file_path\", \"invoice.pdf\", \"The path to the file to parse\")\u00a0 \u00a0 \u00a0 \u00a0 mimeType := flag.String(\"mime_type\", \"application/pdf\", \"The mimeType of the file\")\u00a0 \u00a0 \u00a0 \u00a0 flag.Parse()\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 endpoint := fmt.Sprintf(\"%s-documentai.googleapis.com:443\", *location)\u00a0 \u00a0 \u00a0 \u00a0 client, err := documentai.NewDocumentProcessorClient(ctx, option.WithEndpoint(endpoint))\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Println(fmt.Errorf(\"error creating Document AI client: %w\", err))\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 // Open local file.\u00a0 \u00a0 \u00a0 \u00a0 data, err := ioutil.ReadFile(*filePath)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Println(fmt.Errorf(\"ioutil.ReadFile: %w\", err))\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 req := &documentaipb.ProcessRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/processors/%s\", *projectID, *location, *processorID),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Source: &documentaipb.ProcessRequest_RawDocument{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RawDocument: &documentaipb.RawDocument{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Content: \u00a0data,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MimeType: *mimeType,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := client.ProcessDocument(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Println(fmt.Errorf(\"processDocument: %w\", err))\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Handle the results.\u00a0 \u00a0 \u00a0 \u00a0 document := resp.GetDocument()\u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"Document Text: %s\", document.GetText())}\n``` [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/document-ai/src/main/java/documentai/v1/QuickStart.java) \n```\nimport com.google.cloud.documentai.v1.Document;import com.google.cloud.documentai.v1.DocumentProcessorServiceClient;import com.google.cloud.documentai.v1.DocumentProcessorServiceSettings;import com.google.cloud.documentai.v1.ProcessRequest;import com.google.cloud.documentai.v1.ProcessResponse;import com.google.cloud.documentai.v1.RawDocument;import com.google.protobuf.ByteString;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Paths;import java.util.List;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;public class QuickStart {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"your-project-id\";\u00a0 \u00a0 String location = \"your-project-location\"; // Format is \"us\" or \"eu\".\u00a0 \u00a0 String processorId = \"your-processor-id\";\u00a0 \u00a0 String filePath = \"path/to/input/file.pdf\";\u00a0 \u00a0 quickStart(projectId, location, processorId, filePath);\u00a0 }\u00a0 public static void quickStart(\u00a0 \u00a0 \u00a0 String projectId, String location, String processorId, String filePath)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs\u00a0 \u00a0 // to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your\u00a0 \u00a0 // requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background\u00a0 \u00a0 // resources.\u00a0 \u00a0 String endpoint = String.format(\"%s-documentai.googleapis.com:443\", location);\u00a0 \u00a0 DocumentProcessorServiceSettings settings =\u00a0 \u00a0 \u00a0 \u00a0 DocumentProcessorServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 try (DocumentProcessorServiceClient client = DocumentProcessorServiceClient.create(settings)) {\u00a0 \u00a0 \u00a0 // The full resource name of the processor, e.g.:\u00a0 \u00a0 \u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 \u00a0 \u00a0 // You must create new processors in the Cloud Console first\u00a0 \u00a0 \u00a0 String name =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String.format(\"projects/%s/locations/%s/processors/%s\", projectId, location, processorId);\u00a0 \u00a0 \u00a0 // Read the file.\u00a0 \u00a0 \u00a0 byte[] imageFileData = Files.readAllBytes(Paths.get(filePath));\u00a0 \u00a0 \u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 \u00a0 \u00a0 ByteString content = ByteString.copyFrom(imageFileData);\u00a0 \u00a0 \u00a0 RawDocument document =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RawDocument.newBuilder().setContent(content).setMimeType(\"application/pdf\").build();\u00a0 \u00a0 \u00a0 // Configure the process request.\u00a0 \u00a0 \u00a0 ProcessRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ProcessRequest.newBuilder().setName(name).setRawDocument(document).build();\u00a0 \u00a0 \u00a0 // Recognizes text entities in the PDF document\u00a0 \u00a0 \u00a0 ProcessResponse result = client.processDocument(request);\u00a0 \u00a0 \u00a0 Document documentResponse = result.getDocument();\u00a0 \u00a0 \u00a0 // Get all of the document text as one big string\u00a0 \u00a0 \u00a0 String text = documentResponse.getText();\u00a0 \u00a0 \u00a0 // Read the text recognition output from the processor\u00a0 \u00a0 \u00a0 System.out.println(\"The document contains the following paragraphs:\");\u00a0 \u00a0 \u00a0 Document.Page firstPage = documentResponse.getPages(0);\u00a0 \u00a0 \u00a0 List<Document.Page.Paragraph> paragraphs = firstPage.getParagraphsList();\u00a0 \u00a0 \u00a0 for (Document.Page.Paragraph paragraph : paragraphs) {\u00a0 \u00a0 \u00a0 \u00a0 String paragraphText = getText(paragraph.getLayout().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"Paragraph text:\\n%s\\n\", paragraphText);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 // Extract shards from the text field\u00a0 private static String getText(Document.TextAnchor textAnchor, String text) {\u00a0 \u00a0 if (textAnchor.getTextSegmentsList().size() > 0) {\u00a0 \u00a0 \u00a0 int startIdx = (int) textAnchor.getTextSegments(0).getStartIndex();\u00a0 \u00a0 \u00a0 int endIdx = (int) textAnchor.getTextSegments(0).getEndIndex();\u00a0 \u00a0 \u00a0 return text.substring(startIdx, endIdx);\u00a0 \u00a0 }\u00a0 \u00a0 return \"[NO TEXT]\";\u00a0 }}\n``` [View on GitHub](https://github.com/googleapis/google-cloud-node/blob/HEAD/packages/google-cloud-documentai/samples/quickstart.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION'; // Format is 'us' or 'eu'// const processorId = 'YOUR_PROCESSOR_ID'; // Create processor in Cloud Console// const filePath = '/path/to/local/pdf';const {DocumentProcessorServiceClient} =\u00a0 require('@google-cloud/documentai').v1;// Instantiates a client// apiEndpoint regions available: eu-documentai.googleapis.com, us-documentai.googleapis.com (Required if using eu based processor)// const client = new DocumentProcessorServiceClient({apiEndpoint: 'eu-documentai.googleapis.com'});const client = new DocumentProcessorServiceClient();async function quickstart() {\u00a0 // The full resource name of the processor, e.g.:\u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 // You must create new processors in the Cloud Console first\u00a0 const name = `projects/${projectId}/locations/${location}/processors/${processorId}`;\u00a0 // Read the file into memory.\u00a0 const fs = require('fs').promises;\u00a0 const imageFile = await fs.readFile(filePath);\u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 const encodedImage = Buffer.from(imageFile).toString('base64');\u00a0 const request = {\u00a0 \u00a0 name,\u00a0 \u00a0 rawDocument: {\u00a0 \u00a0 \u00a0 content: encodedImage,\u00a0 \u00a0 \u00a0 mimeType: 'application/pdf',\u00a0 \u00a0 },\u00a0 };\u00a0 // Recognizes text entities in the PDF document\u00a0 const [result] = await client.processDocument(request);\u00a0 const {document} = result;\u00a0 // Get all of the document text as one big string\u00a0 const {text} = document;\u00a0 // Extract shards from the text field\u00a0 const getText = textAnchor => {\u00a0 \u00a0 if (!textAnchor.textSegments || textAnchor.textSegments.length === 0) {\u00a0 \u00a0 \u00a0 return '';\u00a0 \u00a0 }\u00a0 \u00a0 // First shard in document doesn't have startIndex property\u00a0 \u00a0 const startIndex = textAnchor.textSegments[0].startIndex || 0;\u00a0 \u00a0 const endIndex = textAnchor.textSegments[0].endIndex;\u00a0 \u00a0 return text.substring(startIndex, endIndex);\u00a0 };\u00a0 // Read the text recognition output from the processor\u00a0 console.log('The document contains the following paragraphs:');\u00a0 const [page1] = document.pages;\u00a0 const {paragraphs} = page1;\u00a0 for (const paragraph of paragraphs) {\u00a0 \u00a0 const paragraphText = getText(paragraph.layout.textAnchor);\u00a0 \u00a0 console.log(`Paragraph text:\\n${paragraphText}`);\u00a0 }}\n``` [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/documentai/quickstart.php) \n```\n# Includes the autoloader for libraries installed with composerrequire __DIR__ . '/vendor/autoload.php';# Imports the Google Cloud client libraryuse Google\\Cloud\\DocumentAI\\V1\\DocumentProcessorServiceClient;use Google\\Cloud\\DocumentAI\\V1\\RawDocument;$projectId = 'YOUR_PROJECT_ID'; # Your Google Cloud Platform project ID$location = 'us'; # Your Processor Location$processor = 'YOUR_PROCESSOR_ID'; # Your Processor ID# Create Client$client = new DocumentProcessorServiceClient();# Local File Path$documentPath = 'resources/invoice.pdf';# Read in File Contents$handle = fopen($documentPath, 'rb');$contents = fread($handle, filesize($documentPath));fclose($handle);# Load File Contents into RawDocument$rawDocument = new RawDocument([\u00a0 \u00a0 'content' => $contents,\u00a0 \u00a0 'mime_type' => 'application/pdf']);# Fully-qualified Processor Name$name = $client->processorName($projectId, $location, $processor);# Make Processing Request$response = $client->processDocument($name, [\u00a0 \u00a0 'rawDocument' => $rawDocument]);# Print Document Textprintf('Document Text: %s', $response->getDocument()->getText());\n``` [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/documentai/snippets/quickstart_sample.py) \n```\nfrom google.api_core.client_options import ClientOptionsfrom google.cloud import documentai \u00a0# type: ignore# TODO(developer): Uncomment these variables before running the sample.# project_id = \"YOUR_PROJECT_ID\"# location = \"YOUR_PROCESSOR_LOCATION\" \u00a0# Format is \"us\" or \"eu\"# file_path = \"/path/to/local/pdf\"# processor_display_name = \"YOUR_PROCESSOR_DISPLAY_NAME\" # Must be unique per project, e.g.: \"My Processor\"def quickstart(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 file_path: str,\u00a0 \u00a0 processor_display_name: str = \"My Processor\",):\u00a0 \u00a0 # You must set the `api_endpoint`if you use a location other than \"us\".\u00a0 \u00a0 opts = ClientOptions(api_endpoint=f\"{location}-documentai.googleapis.com\")\u00a0 \u00a0 client = documentai.DocumentProcessorServiceClient(client_options=opts)\u00a0 \u00a0 # The full resource name of the location, e.g.:\u00a0 \u00a0 # `projects/{project_id}/locations/{location}`\u00a0 \u00a0 parent = client.common_location_path(project_id, location)\u00a0 \u00a0 # Create a Processor\u00a0 \u00a0 processor = client.create_processor(\u00a0 \u00a0 \u00a0 \u00a0 parent=parent,\u00a0 \u00a0 \u00a0 \u00a0 processor=documentai.Processor(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type_=\"OCR_PROCESSOR\", \u00a0# Refer to https://cloud.google.com/document-ai/docs/create-processor for how to get available processor types\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 display_name=processor_display_name,\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 )\u00a0 \u00a0 # Print the processor information\u00a0 \u00a0 print(f\"Processor Name: {processor.name}\")\u00a0 \u00a0 # Read the file into memory\u00a0 \u00a0 with open(file_path, \"rb\") as image:\u00a0 \u00a0 \u00a0 \u00a0 image_content = image.read()\u00a0 \u00a0 # Load binary data\u00a0 \u00a0 raw_document = documentai.RawDocument(\u00a0 \u00a0 \u00a0 \u00a0 content=image_content,\u00a0 \u00a0 \u00a0 \u00a0 mime_type=\"application/pdf\", \u00a0# Refer to https://cloud.google.com/document-ai/docs/file-types for supported file types\u00a0 \u00a0 )\u00a0 \u00a0 # Configure the process request\u00a0 \u00a0 # `processor.name` is the full resource name of the processor, e.g.:\u00a0 \u00a0 # `projects/{project_id}/locations/{location}/processors/{processor_id}`\u00a0 \u00a0 request = documentai.ProcessRequest(name=processor.name, raw_document=raw_document)\u00a0 \u00a0 result = client.process_document(request=request)\u00a0 \u00a0 # For a full list of `Document` object attributes, reference this page:\u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/reference/rest/v1/Document\u00a0 \u00a0 document = result.document\u00a0 \u00a0 # Read the text recognition output from the processor\u00a0 \u00a0 print(\"The document contains the following text:\")\u00a0 \u00a0 print(document.text)\n``` [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-document_ai/samples/quickstart.rb) \n```\nrequire \"google/cloud/document_ai/v1\"\n### Document AI quickstart\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location_id [String] Your Processor Location (e.g. \"us\")# @param processor_id [String] Your Processor ID (e.g. \"a14dae8f043b60bd\")# @param file_path [String] Path to Local File (e.g. \"invoice.pdf\")# @param mime_type [String] Refer to https://cloud.google.com/document-ai/docs/file-types (e.g. \"application/pdf\")#def quickstart project_id:, location_id:, processor_id:, file_path:, mime_type:\u00a0 # Create the Document AI client.\u00a0 client = ::Google::Cloud::DocumentAI::V1::DocumentProcessorService::Client.new do |config|\u00a0 \u00a0 config.endpoint = \"#{location_id}-documentai.googleapis.com\"\u00a0 end\u00a0 # Build the resource name from the project.\u00a0 name = client.processor_path(\u00a0 \u00a0 project: project_id,\u00a0 \u00a0 location: location_id,\u00a0 \u00a0 processor: processor_id\u00a0 )\u00a0 # Read the bytes into memory\u00a0 content = File.binread file_path\u00a0 # Create request\u00a0 request = Google::Cloud::DocumentAI::V1::ProcessRequest.new(\u00a0 \u00a0 skip_human_review: true,\u00a0 \u00a0 name: name,\u00a0 \u00a0 raw_document: {\u00a0 \u00a0 \u00a0 content: content,\u00a0 \u00a0 \u00a0 mime_type: mime_type\u00a0 \u00a0 }\u00a0 )\u00a0 # Process document\u00a0 response = client.process_document request\u00a0 # Handle response\u00a0 puts response.document.textend\n```\n[](None)\n## Additional resources\nThe following list contains links to more resources related to the client library for C++:- [API reference](/cpp/docs/reference/documentai/latest) \n- [Client libraries best practices](/apis/docs/client-libraries-best-practices) \n- [Issue tracker](https://github.com/googleapis/google-cloud-cpp/issues) \n- [cloud-document-ai on Stack Overflow](https://stackoverflow.com/search?q=%5Bcloud-document-ai%5D%5Bc%2B%2B%5D) \n- [Source code](https://github.com/googleapis/google-cloud-cpp) \nThe following list contains links to more resources related to the client library for C#:- [API reference](/dotnet/docs/reference/Google.Cloud.DocumentAI.V1/latest) \n- [Client libraries best practices](/apis/docs/client-libraries-best-practices) \n- [Issue tracker](https://github.com/GoogleCloudPlatform/google-cloud-dotnet/issues) \n- [cloud-document-ai on Stack Overflow](https://stackoverflow.com/search?q=%5Bcloud-document-ai%5D+%5Bc%23%5D) \n- [Source code](https://github.com/GoogleCloudPlatform/google-cloud-dotnet) \nThe following list contains links to more resources related to the client library for Go:- [API reference](/go/docs/reference/cloud.google.com/go/documentai/latest/apiv1) \n- [Client libraries best practices](/apis/docs/client-libraries-best-practices) \n- [Issue tracker](https://github.com/GoogleCloudPlatform/google-cloud-go/issues) \n- [cloud-document-ai on Stack Overflow](https://stackoverflow.com/search?q=%5Bcloud-document-ai%5D+%5Bgo%5D) \n- [Source code](https://github.com/GoogleCloudPlatform/google-cloud-go) The following list contains links to more resources related to the client library for Java:- [API reference](/java/docs/reference/google-cloud-document-ai/latest/overview) \n- [Client libraries best practices](/apis/docs/client-libraries-best-practices) \n- [Issue tracker](https://github.com/googleapis/google-cloud-java/issues) \n- [cloud-document-ai on Stack Overflow](https://stackoverflow.com/search?q=%5Bcloud-document-ai%5D+%5Bjava%5D) \n- [Source code](https://github.com/googleapis/google-cloud-java) The following list contains links to more resources related to the client library for Node.js:- [API reference](/nodejs/docs/reference/documentai/latest) \n- [Client libraries best practices](/apis/docs/client-libraries-best-practices) \n- [Issue tracker](https://github.com/GoogleCloudPlatform/google-cloud-node/issues) \n- [cloud-document-ai on Stack Overflow](https://stackoverflow.com/search?q=%5Bcloud-document-ai%5D+%5Bnode.js%5D) \n- [Source code](https://github.com/GoogleCloudPlatform/google-cloud-node) The following list contains links to more resources related to the client library for PHP:- [API reference](/php/docs/reference/cloud-document-ai/latest) \n- [Client libraries best practices](/apis/docs/client-libraries-best-practices) \n- [Issue tracker](https://github.com/GoogleCloudPlatform/google-cloud-php/issues) \n- [cloud-document-ai on Stack Overflow](https://stackoverflow.com/search?q=%5Bcloud-document-ai%5D+%5Bphp%5D) \n- [Source code](https://github.com/GoogleCloudPlatform/google-cloud-php) The following list contains links to more resources related to the client library for Python:- [API reference](/python/docs/reference/documentai/latest) \n- [Client libraries best practices](/apis/docs/client-libraries-best-practices) \n- [Issue tracker](https://github.com/googleapis/python-documentai/issues) \n- [cloud-document-ai on Stack Overflow](https://stackoverflow.com/search?q=%5Bcloud-document-ai%5D+%5Bpython%5D) \n- [Source code](https://github.com/googleapis/python-documentai) The following list contains links to more resources related to the client library for Ruby:- [API reference](/ruby/docs/reference/google-cloud-document_ai-v1/latest) \n- [Client libraries best practices](/apis/docs/client-libraries-best-practices) \n- [Issue tracker](https://github.com/GoogleCloudPlatform/google-cloud-ruby/issues) \n- [cloud-document-ai on Stack Overflow](https://stackoverflow.com/search?q=%5Bcloud-document-ai%5D+%5Bruby%5D) \n- [Source code](https://github.com/GoogleCloudPlatform/google-cloud-ruby)", "guide": "Document AI"}