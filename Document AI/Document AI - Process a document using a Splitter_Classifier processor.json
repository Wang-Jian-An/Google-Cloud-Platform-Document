{"title": "Document AI - Process a document using a Splitter/Classifier processor", "url": "https://cloud.google.com/document-ai/docs/samples/documentai-process-splitter-document?hl=zh-cn", "abstract": "# Document AI - Process a document using a Splitter/Classifier processor\nSends an online processing request to a Specialized Splitter/Classifier processor and parses the response. Extracts and prints document classifications and page ranges.", "content": "## Explore furtherFor detailed documentation that includes this code sample, see the following:- [Document splitters behavior](/document-ai/docs/splitters) \n- [Handle processing response](/document-ai/docs/handle-response) \n## Code sampleFor more information, see the [Document AI Java API reference documentation](/java/docs/reference/google-cloud-document-ai/latest/overview) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/document-ai/src/main/java/documentai/v1beta3/ProcessSplitterDocument.java) \n```\nimport com.google.cloud.documentai.v1beta3.Document;import com.google.cloud.documentai.v1beta3.DocumentProcessorServiceClient;import com.google.cloud.documentai.v1beta3.DocumentProcessorServiceSettings;import com.google.cloud.documentai.v1beta3.ProcessRequest;import com.google.cloud.documentai.v1beta3.ProcessResponse;import com.google.cloud.documentai.v1beta3.RawDocument;import com.google.protobuf.ByteString;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Paths;import java.util.List;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;public class ProcessSplitterDocument {\u00a0 public static void processSplitterDocument()\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"your-project-id\";\u00a0 \u00a0 String location = \"your-project-location\"; // Format is \"us\" or \"eu\".\u00a0 \u00a0 String processerId = \"your-processor-id\";\u00a0 \u00a0 String filePath = \"path/to/input/file.pdf\";\u00a0 \u00a0 processSplitterDocument(projectId, location, processerId, filePath);\u00a0 }\u00a0 public static void processSplitterDocument(\u00a0 \u00a0 \u00a0 String projectId, String location, String processorId, String filePath)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs\u00a0 \u00a0 // to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your\u00a0 \u00a0 // requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background\u00a0 \u00a0 // resources.\u00a0 \u00a0 String endpoint = String.format(\"%s-documentai.googleapis.com:443\", location);\u00a0 \u00a0 DocumentProcessorServiceSettings settings =\u00a0 \u00a0 \u00a0 \u00a0 DocumentProcessorServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 try (DocumentProcessorServiceClient client = DocumentProcessorServiceClient.create(settings)) {\u00a0 \u00a0 \u00a0 // The full resource name of the processor, e.g.:\u00a0 \u00a0 \u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 \u00a0 \u00a0 // You must create new processors in the Cloud Console first\u00a0 \u00a0 \u00a0 String name =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String.format(\"projects/%s/locations/%s/processors/%s\", projectId, location, processorId);\u00a0 \u00a0 \u00a0 // Read the file.\u00a0 \u00a0 \u00a0 byte[] imageFileData = Files.readAllBytes(Paths.get(filePath));\u00a0 \u00a0 \u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 \u00a0 \u00a0 ByteString content = ByteString.copyFrom(imageFileData);\u00a0 \u00a0 \u00a0 RawDocument document =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RawDocument.newBuilder().setContent(content).setMimeType(\"application/pdf\").build();\u00a0 \u00a0 \u00a0 // Configure the process request.\u00a0 \u00a0 \u00a0 ProcessRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ProcessRequest.newBuilder().setName(name).setRawDocument(document).build();\u00a0 \u00a0 \u00a0 // Recognizes text entities in the PDF document\u00a0 \u00a0 \u00a0 ProcessResponse result = client.processDocument(request);\u00a0 \u00a0 \u00a0 Document documentResponse = result.getDocument();\u00a0 \u00a0 \u00a0 System.out.println(\"Document processing complete.\");\u00a0 \u00a0 \u00a0 // Read the splitter output from the document splitter processor:\u00a0 \u00a0 \u00a0 // https://cloud.google.com/document-ai/docs/processors-list#processor_doc-splitter\u00a0 \u00a0 \u00a0 // This processor only provides text for the document and information on how\u00a0 \u00a0 \u00a0 // to split the document on logical boundaries. To identify and extract text,\u00a0 \u00a0 \u00a0 // form elements, and entities please see other processors like the OCR, form,\u00a0 \u00a0 \u00a0 // and specalized processors.\u00a0 \u00a0 \u00a0 List<Document.Entity> entities = documentResponse.getEntitiesList();\u00a0 \u00a0 \u00a0 System.out.printf(\"Found %d subdocuments:\\n\", entities.size());\u00a0 \u00a0 \u00a0 for (Document.Entity entity : entities) {\u00a0 \u00a0 \u00a0 \u00a0 float entityConfidence = entity.getConfidence();\u00a0 \u00a0 \u00a0 \u00a0 String pagesRangeText = pageRefsToString(entity.getPageAnchor().getPageRefsList());\u00a0 \u00a0 \u00a0 \u00a0 String subdocumentType = entity.getType();\u00a0 \u00a0 \u00a0 \u00a0 if (subdocumentType.isEmpty()) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"%.2f%% confident that %s a subdocument.\\n\", entityConfidence * 100, pagesRangeText);\u00a0 \u00a0 \u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"%.2f%% confident that %s a '%s' subdocument.\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 entityConfidence * 100, pagesRangeText, subdocumentType);\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 // Converts page reference(s) to a string describing the page or page range.\u00a0 private static String pageRefsToString(List<Document.PageAnchor.PageRef> pageRefs) {\u00a0 \u00a0 if (pageRefs.size() == 1) {\u00a0 \u00a0 \u00a0 return String.format(\"page %d is\", pageRefs.get(0).getPage() + 1);\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 long start = pageRefs.get(0).getPage() + 1;\u00a0 \u00a0 \u00a0 long end = pageRefs.get(1).getPage() + 1;\u00a0 \u00a0 \u00a0 return String.format(\"pages %d to %d are\", start, end);\u00a0 \u00a0 }\u00a0 }}\n```For more information, see the [Document AI Node.js API reference documentation](/nodejs/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/document-ai/process-document-splitter.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION'; // Format is 'us' or 'eu'// const processorId = 'YOUR_PROCESSOR_ID'; // Create processor in Cloud Console// const filePath = '/path/to/local/pdf';const {DocumentProcessorServiceClient} =\u00a0 require('@google-cloud/documentai').v1beta3;// Instantiates a clientconst client = new DocumentProcessorServiceClient();async function processDocument() {\u00a0 // The full resource name of the processor, e.g.:\u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 // You must create new processors in the Cloud Console first\u00a0 const name = `projects/${projectId}/locations/${location}/processors/${processorId}`;\u00a0 // Read the file into memory.\u00a0 const fs = require('fs').promises;\u00a0 const imageFile = await fs.readFile(filePath);\u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 const encodedImage = Buffer.from(imageFile).toString('base64');\u00a0 const request = {\u00a0 \u00a0 name,\u00a0 \u00a0 rawDocument: {\u00a0 \u00a0 \u00a0 content: encodedImage,\u00a0 \u00a0 \u00a0 mimeType: 'application/pdf',\u00a0 \u00a0 },\u00a0 };\u00a0 // Recognizes text entities in the PDF document\u00a0 const [result] = await client.processDocument(request);\u00a0 console.log('Document processing complete.');\u00a0 // Read fields specificly from the specalized US drivers license processor:\u00a0 // https://cloud.google.com/document-ai/docs/processors-list#processor_us-driver-license-parser\u00a0 // retriving data from other specalized processors follow a similar pattern.\u00a0 // For a complete list of processors see:\u00a0 // https://cloud.google.com/document-ai/docs/processors-list\u00a0 //\u00a0 // OCR and other data is also present in the quality processor's response.\u00a0 // Please see the OCR and other samples for how to parse other data in the\u00a0 // response.\u00a0 const {document} = result;\u00a0 console.log(`Found ${document.entities.length} subdocuments:`);\u00a0 for (const entity of document.entities) {\u00a0 \u00a0 const conf = entity.confidence * 100;\u00a0 \u00a0 const pagesRange = pageRefsToRange(entity.pageAnchor.pageRefs);\u00a0 \u00a0 if (entity.type !== '') {\u00a0 \u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 \u00a0 `${conf.toFixed(2)}% confident that ${pagesRange} a \"${\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 entity.type\u00a0 \u00a0 \u00a0 \u00a0 }\" subdocument.`\u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 \u00a0 `${conf.toFixed(2)}% confident that ${pagesRange} a subdocument.`\u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 }\u00a0 }}// Converts a page ref to a string describing the page or page range.const pageRefsToRange = pageRefs => {\u00a0 if (pageRefs.length === 1) {\u00a0 \u00a0 const num = parseInt(pageRefs[0].page) + 1 || 1;\u00a0 \u00a0 return `page ${num} is`;\u00a0 } else {\u00a0 \u00a0 const start = parseInt(pageRefs[0].page) + 1 || 1;\u00a0 \u00a0 const end = parseInt(pageRefs[1].page) + 1;\u00a0 \u00a0 return `pages ${start} to ${end} are`;\u00a0 }};\n```For more information, see the [Document AI Python API reference documentation](/python/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/documentai/snippets/handle_response_sample.py) \n```\nfrom typing import Optional, Sequencefrom google.api_core.client_options import ClientOptionsfrom google.cloud import documentai# TODO(developer): Uncomment these variables before running the sample.# project_id = \"YOUR_PROJECT_ID\"# location = \"YOUR_PROCESSOR_LOCATION\" # Format is \"us\" or \"eu\"# processor_id = \"YOUR_PROCESSOR_ID\" # Create processor before running sample# processor_version = \"rc\" # Refer to https://cloud.google.com/document-ai/docs/manage-processor-versions for more information# file_path = \"/path/to/local/pdf\"# mime_type = \"application/pdf\" # Refer to https://cloud.google.com/document-ai/docs/file-types for supported file typesdef process_document_splitter_sample(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 processor_id: str,\u00a0 \u00a0 processor_version: str,\u00a0 \u00a0 file_path: str,\u00a0 \u00a0 mime_type: str,) -> None:\u00a0 \u00a0 # Online processing request to Document AI\u00a0 \u00a0 document = process_document(\u00a0 \u00a0 \u00a0 \u00a0 project_id, location, processor_id, processor_version, file_path, mime_type\u00a0 \u00a0 )\u00a0 \u00a0 # Read the splitter output from a document splitter/classifier processor:\u00a0 \u00a0 # e.g. https://cloud.google.com/document-ai/docs/processors-list#processor_procurement-document-splitter\u00a0 \u00a0 # This processor only provides text for the document and information on how\u00a0 \u00a0 # to split the document on logical boundaries. To identify and extract text,\u00a0 \u00a0 # form elements, and entities please see other processors like the OCR, form,\u00a0 \u00a0 # and specalized processors.\u00a0 \u00a0 print(f\"Found {len(document.entities)} subdocuments:\")\u00a0 \u00a0 for entity in document.entities:\u00a0 \u00a0 \u00a0 \u00a0 conf_percent = f\"{entity.confidence:.1%}\"\u00a0 \u00a0 \u00a0 \u00a0 pages_range = page_refs_to_string(entity.page_anchor.page_refs)\u00a0 \u00a0 \u00a0 \u00a0 # Print subdocument type information, if available\u00a0 \u00a0 \u00a0 \u00a0 if entity.type_:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 f\"{conf_percent} confident that {pages_range} a '{entity.type_}' subdocument.\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(f\"{conf_percent} confident that {pages_range} a subdocument.\")def page_refs_to_string(\u00a0 \u00a0 page_refs: Sequence[documentai.Document.PageAnchor.PageRef],) -> str:\u00a0 \u00a0 \"\"\"Converts a page ref to a string describing the page or page range.\"\"\"\u00a0 \u00a0 pages = [str(int(page_ref.page) + 1) for page_ref in page_refs]\u00a0 \u00a0 if len(pages) == 1:\u00a0 \u00a0 \u00a0 \u00a0 return f\"page {pages[0]} is\"\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 return f\"pages {', '.join(pages)} are\"def process_document(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 processor_id: str,\u00a0 \u00a0 processor_version: str,\u00a0 \u00a0 file_path: str,\u00a0 \u00a0 mime_type: str,\u00a0 \u00a0 process_options: Optional[documentai.ProcessOptions] = None,) -> documentai.Document:\u00a0 \u00a0 # You must set the `api_endpoint` if you use a location other than \"us\".\u00a0 \u00a0 client = documentai.DocumentProcessorServiceClient(\u00a0 \u00a0 \u00a0 \u00a0 client_options=ClientOptions(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 api_endpoint=f\"{location}-documentai.googleapis.com\"\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 )\u00a0 \u00a0 # The full resource name of the processor version, e.g.:\u00a0 \u00a0 # `projects/{project_id}/locations/{location}/processors/{processor_id}/processorVersions/{processor_version_id}`\u00a0 \u00a0 # You must create a processor before running this sample.\u00a0 \u00a0 name = client.processor_version_path(\u00a0 \u00a0 \u00a0 \u00a0 project_id, location, processor_id, processor_version\u00a0 \u00a0 )\u00a0 \u00a0 # Read the file into memory\u00a0 \u00a0 with open(file_path, \"rb\") as image:\u00a0 \u00a0 \u00a0 \u00a0 image_content = image.read()\u00a0 \u00a0 # Configure the process request\u00a0 \u00a0 request = documentai.ProcessRequest(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 raw_document=documentai.RawDocument(content=image_content, mime_type=mime_type),\u00a0 \u00a0 \u00a0 \u00a0 # Only supported for Document OCR processor\u00a0 \u00a0 \u00a0 \u00a0 process_options=process_options,\u00a0 \u00a0 )\u00a0 \u00a0 result = client.process_document(request=request)\u00a0 \u00a0 # For a full list of `Document` object attributes, reference this page:\u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/reference/rest/v1/Document\u00a0 \u00a0 return result.document\n```\n## What's nextTo search and filter code samples for other Google Cloud products, see the [Google Cloud sample browser](/docs/samples?product=documentai) .", "guide": "Document AI"}