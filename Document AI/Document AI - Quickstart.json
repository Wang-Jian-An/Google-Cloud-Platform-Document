{"title": "Document AI - Quickstart", "url": "https://cloud.google.com/document-ai/docs/samples/documentai-quickstart?hl=zh-cn", "abstract": "# Document AI - Quickstart\nProcess a document using Document AI.", "content": "## Explore furtherFor detailed documentation that includes this code sample, see the following:- [Document AI client libraries](/document-ai/docs/libraries) \n- [Process documents by using client libraries](/document-ai/docs/process-documents-client-libraries) \n## Code sampleFor more information, see the [Document AI C# API reference documentation](/dotnet/docs/reference/Google.Cloud.DocumentAI.V1/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/documentai/api/DocumentAI.Samples/Quickstart.cs) \n```\nusing Google.Cloud.DocumentAI.V1;using Google.Protobuf;using System;using System.IO;public class QuickstartSample{\u00a0 \u00a0 public Document Quickstart(\u00a0 \u00a0 \u00a0 \u00a0 string projectId = \"your-project-id\",\u00a0 \u00a0 \u00a0 \u00a0 string locationId = \"your-processor-location\",\u00a0 \u00a0 \u00a0 \u00a0 string processorId = \"your-processor-id\",\u00a0 \u00a0 \u00a0 \u00a0 string localPath = \"my-local-path/my-file-name\",\u00a0 \u00a0 \u00a0 \u00a0 string mimeType = \"application/pdf\"\u00a0 \u00a0 )\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 var client = new DocumentProcessorServiceClientBuilder\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Endpoint = $\"{locationId}-documentai.googleapis.com\"\u00a0 \u00a0 \u00a0 \u00a0 }.Build();\u00a0 \u00a0 \u00a0 \u00a0 // Read in local file\u00a0 \u00a0 \u00a0 \u00a0 using var fileStream = File.OpenRead(localPath);\u00a0 \u00a0 \u00a0 \u00a0 var rawDocument = new RawDocument\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Content = ByteString.FromStream(fileStream),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MimeType = mimeType\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 var request = new ProcessRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name = ProcessorName.FromProjectLocationProcessor(projectId, locationId, processorId).ToString(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RawDocument = rawDocument\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request\u00a0 \u00a0 \u00a0 \u00a0 var response = client.ProcessDocument(request);\u00a0 \u00a0 \u00a0 \u00a0 var document = response.Document;\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(document.Text);\u00a0 \u00a0 \u00a0 \u00a0 return document;\u00a0 \u00a0 }}\n```For more information, see the [Document AI Go API reference documentation](/go/docs/reference/cloud.google.com/go/documentai/latest/apiv1) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/documentai/documentai_quickstart/main.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"flag\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io/ioutil\"\u00a0 \u00a0 \u00a0 \u00a0 documentai \"cloud.google.com/go/documentai/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/documentai/apiv1/documentaipb\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/api/option\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 projectID := flag.String(\"project_id\", \"PROJECT_ID\", \"Cloud Project ID\")\u00a0 \u00a0 \u00a0 \u00a0 location := flag.String(\"location\", \"us\", \"The Processor location\")\u00a0 \u00a0 \u00a0 \u00a0 // Create a Processor before running sample\u00a0 \u00a0 \u00a0 \u00a0 processorID := flag.String(\"processor_id\", \"aaaaaaaa\", \"The Processor ID\")\u00a0 \u00a0 \u00a0 \u00a0 filePath := flag.String(\"file_path\", \"invoice.pdf\", \"The path to the file to parse\")\u00a0 \u00a0 \u00a0 \u00a0 mimeType := flag.String(\"mime_type\", \"application/pdf\", \"The mimeType of the file\")\u00a0 \u00a0 \u00a0 \u00a0 flag.Parse()\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 endpoint := fmt.Sprintf(\"%s-documentai.googleapis.com:443\", *location)\u00a0 \u00a0 \u00a0 \u00a0 client, err := documentai.NewDocumentProcessorClient(ctx, option.WithEndpoint(endpoint))\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Println(fmt.Errorf(\"error creating Document AI client: %w\", err))\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 // Open local file.\u00a0 \u00a0 \u00a0 \u00a0 data, err := ioutil.ReadFile(*filePath)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Println(fmt.Errorf(\"ioutil.ReadFile: %w\", err))\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 req := &documentaipb.ProcessRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/processors/%s\", *projectID, *location, *processorID),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Source: &documentaipb.ProcessRequest_RawDocument{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RawDocument: &documentaipb.RawDocument{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Content: \u00a0data,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MimeType: *mimeType,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := client.ProcessDocument(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Println(fmt.Errorf(\"processDocument: %w\", err))\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Handle the results.\u00a0 \u00a0 \u00a0 \u00a0 document := resp.GetDocument()\u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"Document Text: %s\", document.GetText())}\n```For more information, see the [Document AI Java API reference documentation](/java/docs/reference/google-cloud-document-ai/latest/overview) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/document-ai/src/main/java/documentai/v1/QuickStart.java) \n```\nimport com.google.cloud.documentai.v1.Document;import com.google.cloud.documentai.v1.DocumentProcessorServiceClient;import com.google.cloud.documentai.v1.DocumentProcessorServiceSettings;import com.google.cloud.documentai.v1.ProcessRequest;import com.google.cloud.documentai.v1.ProcessResponse;import com.google.cloud.documentai.v1.RawDocument;import com.google.protobuf.ByteString;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Paths;import java.util.List;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;public class QuickStart {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"your-project-id\";\u00a0 \u00a0 String location = \"your-project-location\"; // Format is \"us\" or \"eu\".\u00a0 \u00a0 String processorId = \"your-processor-id\";\u00a0 \u00a0 String filePath = \"path/to/input/file.pdf\";\u00a0 \u00a0 quickStart(projectId, location, processorId, filePath);\u00a0 }\u00a0 public static void quickStart(\u00a0 \u00a0 \u00a0 String projectId, String location, String processorId, String filePath)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs\u00a0 \u00a0 // to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your\u00a0 \u00a0 // requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background\u00a0 \u00a0 // resources.\u00a0 \u00a0 String endpoint = String.format(\"%s-documentai.googleapis.com:443\", location);\u00a0 \u00a0 DocumentProcessorServiceSettings settings =\u00a0 \u00a0 \u00a0 \u00a0 DocumentProcessorServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 try (DocumentProcessorServiceClient client = DocumentProcessorServiceClient.create(settings)) {\u00a0 \u00a0 \u00a0 // The full resource name of the processor, e.g.:\u00a0 \u00a0 \u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 \u00a0 \u00a0 // You must create new processors in the Cloud Console first\u00a0 \u00a0 \u00a0 String name =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String.format(\"projects/%s/locations/%s/processors/%s\", projectId, location, processorId);\u00a0 \u00a0 \u00a0 // Read the file.\u00a0 \u00a0 \u00a0 byte[] imageFileData = Files.readAllBytes(Paths.get(filePath));\u00a0 \u00a0 \u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 \u00a0 \u00a0 ByteString content = ByteString.copyFrom(imageFileData);\u00a0 \u00a0 \u00a0 RawDocument document =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RawDocument.newBuilder().setContent(content).setMimeType(\"application/pdf\").build();\u00a0 \u00a0 \u00a0 // Configure the process request.\u00a0 \u00a0 \u00a0 ProcessRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ProcessRequest.newBuilder().setName(name).setRawDocument(document).build();\u00a0 \u00a0 \u00a0 // Recognizes text entities in the PDF document\u00a0 \u00a0 \u00a0 ProcessResponse result = client.processDocument(request);\u00a0 \u00a0 \u00a0 Document documentResponse = result.getDocument();\u00a0 \u00a0 \u00a0 // Get all of the document text as one big string\u00a0 \u00a0 \u00a0 String text = documentResponse.getText();\u00a0 \u00a0 \u00a0 // Read the text recognition output from the processor\u00a0 \u00a0 \u00a0 System.out.println(\"The document contains the following paragraphs:\");\u00a0 \u00a0 \u00a0 Document.Page firstPage = documentResponse.getPages(0);\u00a0 \u00a0 \u00a0 List<Document.Page.Paragraph> paragraphs = firstPage.getParagraphsList();\u00a0 \u00a0 \u00a0 for (Document.Page.Paragraph paragraph : paragraphs) {\u00a0 \u00a0 \u00a0 \u00a0 String paragraphText = getText(paragraph.getLayout().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"Paragraph text:\\n%s\\n\", paragraphText);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 // Extract shards from the text field\u00a0 private static String getText(Document.TextAnchor textAnchor, String text) {\u00a0 \u00a0 if (textAnchor.getTextSegmentsList().size() > 0) {\u00a0 \u00a0 \u00a0 int startIdx = (int) textAnchor.getTextSegments(0).getStartIndex();\u00a0 \u00a0 \u00a0 int endIdx = (int) textAnchor.getTextSegments(0).getEndIndex();\u00a0 \u00a0 \u00a0 return text.substring(startIdx, endIdx);\u00a0 \u00a0 }\u00a0 \u00a0 return \"[NO TEXT]\";\u00a0 }}\n```For more information, see the [Document AI Node.js API reference documentation](/nodejs/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-node/blob/HEAD/packages/google-cloud-documentai/samples/quickstart.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION'; // Format is 'us' or 'eu'// const processorId = 'YOUR_PROCESSOR_ID'; // Create processor in Cloud Console// const filePath = '/path/to/local/pdf';const {DocumentProcessorServiceClient} =\u00a0 require('@google-cloud/documentai').v1;// Instantiates a client// apiEndpoint regions available: eu-documentai.googleapis.com, us-documentai.googleapis.com (Required if using eu based processor)// const client = new DocumentProcessorServiceClient({apiEndpoint: 'eu-documentai.googleapis.com'});const client = new DocumentProcessorServiceClient();async function quickstart() {\u00a0 // The full resource name of the processor, e.g.:\u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 // You must create new processors in the Cloud Console first\u00a0 const name = `projects/${projectId}/locations/${location}/processors/${processorId}`;\u00a0 // Read the file into memory.\u00a0 const fs = require('fs').promises;\u00a0 const imageFile = await fs.readFile(filePath);\u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 const encodedImage = Buffer.from(imageFile).toString('base64');\u00a0 const request = {\u00a0 \u00a0 name,\u00a0 \u00a0 rawDocument: {\u00a0 \u00a0 \u00a0 content: encodedImage,\u00a0 \u00a0 \u00a0 mimeType: 'application/pdf',\u00a0 \u00a0 },\u00a0 };\u00a0 // Recognizes text entities in the PDF document\u00a0 const [result] = await client.processDocument(request);\u00a0 const {document} = result;\u00a0 // Get all of the document text as one big string\u00a0 const {text} = document;\u00a0 // Extract shards from the text field\u00a0 const getText = textAnchor => {\u00a0 \u00a0 if (!textAnchor.textSegments || textAnchor.textSegments.length === 0) {\u00a0 \u00a0 \u00a0 return '';\u00a0 \u00a0 }\u00a0 \u00a0 // First shard in document doesn't have startIndex property\u00a0 \u00a0 const startIndex = textAnchor.textSegments[0].startIndex || 0;\u00a0 \u00a0 const endIndex = textAnchor.textSegments[0].endIndex;\u00a0 \u00a0 return text.substring(startIndex, endIndex);\u00a0 };\u00a0 // Read the text recognition output from the processor\u00a0 console.log('The document contains the following paragraphs:');\u00a0 const [page1] = document.pages;\u00a0 const {paragraphs} = page1;\u00a0 for (const paragraph of paragraphs) {\u00a0 \u00a0 const paragraphText = getText(paragraph.layout.textAnchor);\u00a0 \u00a0 console.log(`Paragraph text:\\n${paragraphText}`);\u00a0 }}\n```For more information, see the [Document AI PHP API reference documentation](/php/docs/reference/cloud-document-ai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/documentai/quickstart.php) \n```\n# Includes the autoloader for libraries installed with composerrequire __DIR__ . '/vendor/autoload.php';# Imports the Google Cloud client libraryuse Google\\Cloud\\DocumentAI\\V1\\DocumentProcessorServiceClient;use Google\\Cloud\\DocumentAI\\V1\\RawDocument;$projectId = 'YOUR_PROJECT_ID'; # Your Google Cloud Platform project ID$location = 'us'; # Your Processor Location$processor = 'YOUR_PROCESSOR_ID'; # Your Processor ID# Create Client$client = new DocumentProcessorServiceClient();# Local File Path$documentPath = 'resources/invoice.pdf';# Read in File Contents$handle = fopen($documentPath, 'rb');$contents = fread($handle, filesize($documentPath));fclose($handle);# Load File Contents into RawDocument$rawDocument = new RawDocument([\u00a0 \u00a0 'content' => $contents,\u00a0 \u00a0 'mime_type' => 'application/pdf']);# Fully-qualified Processor Name$name = $client->processorName($projectId, $location, $processor);# Make Processing Request$response = $client->processDocument($name, [\u00a0 \u00a0 'rawDocument' => $rawDocument]);# Print Document Textprintf('Document Text: %s', $response->getDocument()->getText());\n```For more information, see the [Document AI Python API reference documentation](/python/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/documentai/snippets/quickstart_sample.py) \n```\nfrom google.api_core.client_options import ClientOptionsfrom google.cloud import documentai \u00a0# type: ignore# TODO(developer): Uncomment these variables before running the sample.# project_id = \"YOUR_PROJECT_ID\"# location = \"YOUR_PROCESSOR_LOCATION\" \u00a0# Format is \"us\" or \"eu\"# file_path = \"/path/to/local/pdf\"# processor_display_name = \"YOUR_PROCESSOR_DISPLAY_NAME\" # Must be unique per project, e.g.: \"My Processor\"def quickstart(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 file_path: str,\u00a0 \u00a0 processor_display_name: str = \"My Processor\",):\u00a0 \u00a0 # You must set the `api_endpoint`if you use a location other than \"us\".\u00a0 \u00a0 opts = ClientOptions(api_endpoint=f\"{location}-documentai.googleapis.com\")\u00a0 \u00a0 client = documentai.DocumentProcessorServiceClient(client_options=opts)\u00a0 \u00a0 # The full resource name of the location, e.g.:\u00a0 \u00a0 # `projects/{project_id}/locations/{location}`\u00a0 \u00a0 parent = client.common_location_path(project_id, location)\u00a0 \u00a0 # Create a Processor\u00a0 \u00a0 processor = client.create_processor(\u00a0 \u00a0 \u00a0 \u00a0 parent=parent,\u00a0 \u00a0 \u00a0 \u00a0 processor=documentai.Processor(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type_=\"OCR_PROCESSOR\", \u00a0# Refer to https://cloud.google.com/document-ai/docs/create-processor for how to get available processor types\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 display_name=processor_display_name,\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 )\u00a0 \u00a0 # Print the processor information\u00a0 \u00a0 print(f\"Processor Name: {processor.name}\")\u00a0 \u00a0 # Read the file into memory\u00a0 \u00a0 with open(file_path, \"rb\") as image:\u00a0 \u00a0 \u00a0 \u00a0 image_content = image.read()\u00a0 \u00a0 # Load binary data\u00a0 \u00a0 raw_document = documentai.RawDocument(\u00a0 \u00a0 \u00a0 \u00a0 content=image_content,\u00a0 \u00a0 \u00a0 \u00a0 mime_type=\"application/pdf\", \u00a0# Refer to https://cloud.google.com/document-ai/docs/file-types for supported file types\u00a0 \u00a0 )\u00a0 \u00a0 # Configure the process request\u00a0 \u00a0 # `processor.name` is the full resource name of the processor, e.g.:\u00a0 \u00a0 # `projects/{project_id}/locations/{location}/processors/{processor_id}`\u00a0 \u00a0 request = documentai.ProcessRequest(name=processor.name, raw_document=raw_document)\u00a0 \u00a0 result = client.process_document(request=request)\u00a0 \u00a0 # For a full list of `Document` object attributes, reference this page:\u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/reference/rest/v1/Document\u00a0 \u00a0 document = result.document\u00a0 \u00a0 # Read the text recognition output from the processor\u00a0 \u00a0 print(\"The document contains the following text:\")\u00a0 \u00a0 print(document.text)\n```For more information, see the [Document AI Ruby API reference documentation](/ruby/docs/reference/google-cloud-document_ai-v1/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-document_ai/samples/quickstart.rb) \n```\nrequire \"google/cloud/document_ai/v1\"\n### Document AI quickstart\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location_id [String] Your Processor Location (e.g. \"us\")# @param processor_id [String] Your Processor ID (e.g. \"a14dae8f043b60bd\")# @param file_path [String] Path to Local File (e.g. \"invoice.pdf\")# @param mime_type [String] Refer to https://cloud.google.com/document-ai/docs/file-types (e.g. \"application/pdf\")#def quickstart project_id:, location_id:, processor_id:, file_path:, mime_type:\u00a0 # Create the Document AI client.\u00a0 client = ::Google::Cloud::DocumentAI::V1::DocumentProcessorService::Client.new do |config|\u00a0 \u00a0 config.endpoint = \"#{location_id}-documentai.googleapis.com\"\u00a0 end\u00a0 # Build the resource name from the project.\u00a0 name = client.processor_path(\u00a0 \u00a0 project: project_id,\u00a0 \u00a0 location: location_id,\u00a0 \u00a0 processor: processor_id\u00a0 )\u00a0 # Read the bytes into memory\u00a0 content = File.binread file_path\u00a0 # Create request\u00a0 request = Google::Cloud::DocumentAI::V1::ProcessRequest.new(\u00a0 \u00a0 skip_human_review: true,\u00a0 \u00a0 name: name,\u00a0 \u00a0 raw_document: {\u00a0 \u00a0 \u00a0 content: content,\u00a0 \u00a0 \u00a0 mime_type: mime_type\u00a0 \u00a0 }\u00a0 )\u00a0 # Process document\u00a0 response = client.process_document request\u00a0 # Handle response\u00a0 puts response.document.textend\n```\n## What's nextTo search and filter code samples for other Google Cloud products, see the [Google Cloud sample browser](/docs/samples?product=documentai) .", "guide": "Document AI"}