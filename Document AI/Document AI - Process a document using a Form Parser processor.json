{"title": "Document AI - Process a document using a Form Parser processor", "url": "https://cloud.google.com/document-ai/docs/samples/documentai-process-form-document?hl=zh-cn", "abstract": "# Document AI - Process a document using a Form Parser processor\nSends an online processing request to a Form Parser processor and parses the response. Extracts and prints form fields and tables.", "content": "## Explore furtherFor detailed documentation that includes this code sample, see the following:- [Handle processing response](/document-ai/docs/handle-response) \n## Code sampleFor more information, see the [Document AI Java API reference documentation](/java/docs/reference/google-cloud-document-ai/latest/overview) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/document-ai/src/main/java/documentai/v1beta3/ProcessFormDocument.java) \n```\nimport com.google.cloud.documentai.v1beta3.Document;import com.google.cloud.documentai.v1beta3.DocumentProcessorServiceClient;import com.google.cloud.documentai.v1beta3.DocumentProcessorServiceSettings;import com.google.cloud.documentai.v1beta3.ProcessRequest;import com.google.cloud.documentai.v1beta3.ProcessResponse;import com.google.cloud.documentai.v1beta3.RawDocument;import com.google.protobuf.ByteString;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Paths;import java.util.List;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;public class ProcessFormDocument {\u00a0 public static void processFormDocument()\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"your-project-id\";\u00a0 \u00a0 String location = \"your-project-location\"; // Format is \"us\" or \"eu\".\u00a0 \u00a0 String processerId = \"your-processor-id\";\u00a0 \u00a0 String filePath = \"path/to/input/file.pdf\";\u00a0 \u00a0 processFormDocument(projectId, location, processerId, filePath);\u00a0 }\u00a0 public static void processFormDocument(\u00a0 \u00a0 \u00a0 String projectId, String location, String processorId, String filePath)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs\u00a0 \u00a0 // to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your\u00a0 \u00a0 // requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background\u00a0 \u00a0 // resources.\u00a0 \u00a0 String endpoint = String.format(\"%s-documentai.googleapis.com:443\", location);\u00a0 \u00a0 DocumentProcessorServiceSettings settings =\u00a0 \u00a0 \u00a0 \u00a0 DocumentProcessorServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 try (DocumentProcessorServiceClient client = DocumentProcessorServiceClient.create(settings)) {\u00a0 \u00a0 \u00a0 // The full resource name of the processor, e.g.:\u00a0 \u00a0 \u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 \u00a0 \u00a0 // You must create new processors in the Cloud Console first\u00a0 \u00a0 \u00a0 String name =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String.format(\"projects/%s/locations/%s/processors/%s\", projectId, location, processorId);\u00a0 \u00a0 \u00a0 // Read the file.\u00a0 \u00a0 \u00a0 byte[] imageFileData = Files.readAllBytes(Paths.get(filePath));\u00a0 \u00a0 \u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 \u00a0 \u00a0 ByteString content = ByteString.copyFrom(imageFileData);\u00a0 \u00a0 \u00a0 RawDocument document =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RawDocument.newBuilder().setContent(content).setMimeType(\"application/pdf\").build();\u00a0 \u00a0 \u00a0 // Configure the process request.\u00a0 \u00a0 \u00a0 ProcessRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ProcessRequest.newBuilder().setName(name).setRawDocument(document).build();\u00a0 \u00a0 \u00a0 // Recognizes text entities in the PDF document\u00a0 \u00a0 \u00a0 ProcessResponse result = client.processDocument(request);\u00a0 \u00a0 \u00a0 Document documentResponse = result.getDocument();\u00a0 \u00a0 \u00a0 System.out.println(\"Document processing complete.\");\u00a0 \u00a0 \u00a0 // Read the text recognition output from the processor\u00a0 \u00a0 \u00a0 // For a full list of Document object attributes,\u00a0 \u00a0 \u00a0 // please reference this page:\u00a0 \u00a0 \u00a0 // https://googleapis.dev/java/google-cloud-document-ai/latest/index.html\u00a0 \u00a0 \u00a0 // Get all of the document text as one big string\u00a0 \u00a0 \u00a0 String text = documentResponse.getText();\u00a0 \u00a0 \u00a0 System.out.printf(\"Full document text: '%s'\\n\", removeNewlines(text));\u00a0 \u00a0 \u00a0 // Read the text recognition output from the processor\u00a0 \u00a0 \u00a0 List<Document.Page> pages = documentResponse.getPagesList();\u00a0 \u00a0 \u00a0 System.out.printf(\"There are %s page(s) in this document.\\n\", pages.size());\u00a0 \u00a0 \u00a0 for (Document.Page page : pages) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"\\n\\n**** Page %d ****\\n\", page.getPageNumber());\u00a0 \u00a0 \u00a0 \u00a0 List<Document.Page.Table> tables = page.getTablesList();\u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"Found %d table(s):\\n\", tables.size());\u00a0 \u00a0 \u00a0 \u00a0 for (Document.Page.Table table : tables) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printTableInfo(table, text);\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 List<Document.Page.FormField> formFields = page.getFormFieldsList();\u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"Found %d form fields:\\n\", formFields.size());\u00a0 \u00a0 \u00a0 \u00a0 for (Document.Page.FormField formField : formFields) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String fieldName = getLayoutText(formField.getFieldName().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String fieldValue = getLayoutText(formField.getFieldValue().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \" \u00a0 \u00a0* '%s': '%s'\\n\", removeNewlines(fieldName), removeNewlines(fieldValue));\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 private static void printTableInfo(Document.Page.Table table, String text) {\u00a0 \u00a0 Document.Page.Table.TableRow firstBodyRow = table.getBodyRows(0);\u00a0 \u00a0 int columnCount = firstBodyRow.getCellsCount();\u00a0 \u00a0 System.out.printf(\u00a0 \u00a0 \u00a0 \u00a0 \" \u00a0 \u00a0Table with %d columns and %d rows:\\n\", columnCount, table.getBodyRowsCount());\u00a0 \u00a0 Document.Page.Table.TableRow headerRow = table.getHeaderRows(0);\u00a0 \u00a0 StringBuilder headerRowText = new StringBuilder();\u00a0 \u00a0 for (Document.Page.Table.TableCell cell : headerRow.getCellsList()) {\u00a0 \u00a0 \u00a0 String columnName = getLayoutText(cell.getLayout().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 headerRowText.append(String.format(\"%s | \", removeNewlines(columnName)));\u00a0 \u00a0 }\u00a0 \u00a0 headerRowText.setLength(headerRowText.length() - 3);\u00a0 \u00a0 System.out.printf(\" \u00a0 \u00a0 \u00a0 \u00a0Collumns: %s\\n\", headerRowText.toString());\u00a0 \u00a0 StringBuilder firstRowText = new StringBuilder();\u00a0 \u00a0 for (Document.Page.Table.TableCell cell : firstBodyRow.getCellsList()) {\u00a0 \u00a0 \u00a0 String cellText = getLayoutText(cell.getLayout().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 firstRowText.append(String.format(\"%s | \", removeNewlines(cellText)));\u00a0 \u00a0 }\u00a0 \u00a0 firstRowText.setLength(firstRowText.length() - 3);\u00a0 \u00a0 System.out.printf(\" \u00a0 \u00a0 \u00a0 \u00a0First row data: %s\\n\", firstRowText.toString());\u00a0 }\u00a0 // Extract shards from the text field\u00a0 private static String getLayoutText(Document.TextAnchor textAnchor, String text) {\u00a0 \u00a0 if (textAnchor.getTextSegmentsList().size() > 0) {\u00a0 \u00a0 \u00a0 int startIdx = (int) textAnchor.getTextSegments(0).getStartIndex();\u00a0 \u00a0 \u00a0 int endIdx = (int) textAnchor.getTextSegments(0).getEndIndex();\u00a0 \u00a0 \u00a0 return text.substring(startIdx, endIdx);\u00a0 \u00a0 }\u00a0 \u00a0 return \"[NO TEXT]\";\u00a0 }\u00a0 private static String removeNewlines(String s) {\u00a0 \u00a0 return s.replace(\"\\n\", \"\").replace(\"\\r\", \"\");\u00a0 }}\n```For more information, see the [Document AI Node.js API reference documentation](/nodejs/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/document-ai/process-document-form.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION'; // Format is 'us' or 'eu'// const processorId = 'YOUR_PROCESSOR_ID'; // Create processor in Cloud Console// const filePath = '/path/to/local/pdf';const {DocumentProcessorServiceClient} =\u00a0 require('@google-cloud/documentai').v1beta3;// Instantiates a clientconst client = new DocumentProcessorServiceClient();async function processDocument() {\u00a0 // The full resource name of the processor, e.g.:\u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 // You must create new processors in the Cloud Console first\u00a0 const name = `projects/${projectId}/locations/${location}/processors/${processorId}`;\u00a0 // Read the file into memory.\u00a0 const fs = require('fs').promises;\u00a0 const imageFile = await fs.readFile(filePath);\u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 const encodedImage = Buffer.from(imageFile).toString('base64');\u00a0 const request = {\u00a0 \u00a0 name,\u00a0 \u00a0 rawDocument: {\u00a0 \u00a0 \u00a0 content: encodedImage,\u00a0 \u00a0 \u00a0 mimeType: 'application/pdf',\u00a0 \u00a0 },\u00a0 };\u00a0 // Recognizes text entities in the PDF document\u00a0 const [result] = await client.processDocument(request);\u00a0 console.log('Document processing complete.');\u00a0 // Read the table and form fields output from the processor\u00a0 // The form processor also contains OCR data. For more information\u00a0 // on how to parse OCR data please see the OCR sample.\u00a0 // For a full list of Document object attributes,\u00a0 // please reference this page: https://googleapis.dev/nodejs/documentai/latest/index.html\u00a0 const {document} = result;\u00a0 const {text} = document;\u00a0 console.log(`Full document text: ${JSON.stringify(text)}`);\u00a0 console.log(`There are ${document.pages.length} page(s) in this document.`);\u00a0 for (const page of document.pages) {\u00a0 \u00a0 console.log(`\\n\\n**** Page ${page.pageNumber} ****`);\u00a0 \u00a0 console.log(`Found ${page.tables.length} table(s):`);\u00a0 \u00a0 for (const table of page.tables) {\u00a0 \u00a0 \u00a0 const numCollumns = table.headerRows[0].cells.length;\u00a0 \u00a0 \u00a0 const numRows = table.bodyRows.length;\u00a0 \u00a0 \u00a0 console.log(`Table with ${numCollumns} columns and ${numRows} rows:`);\u00a0 \u00a0 \u00a0 printTableInfo(table, text);\u00a0 \u00a0 }\u00a0 \u00a0 console.log(`Found ${page.formFields.length} form field(s):`);\u00a0 \u00a0 for (const field of page.formFields) {\u00a0 \u00a0 \u00a0 const fieldName = getText(field.fieldName.textAnchor, text);\u00a0 \u00a0 \u00a0 const fieldValue = getText(field.fieldValue.textAnchor, text);\u00a0 \u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 \u00a0 `\\t* ${JSON.stringify(fieldName)}: ${JSON.stringify(fieldValue)}`\u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 }\u00a0 }}const printTableInfo = (table, text) => {\u00a0 // Print header row\u00a0 let headerRowText = '';\u00a0 for (const headerCell of table.headerRows[0].cells) {\u00a0 \u00a0 const headerCellText = getText(headerCell.layout.textAnchor, text);\u00a0 \u00a0 headerRowText += `${JSON.stringify(headerCellText.trim())} | `;\u00a0 }\u00a0 console.log(\u00a0 \u00a0 `Collumns: ${headerRowText.substring(0, headerRowText.length - 3)}`\u00a0 );\u00a0 // Print first body row\u00a0 let bodyRowText = '';\u00a0 for (const bodyCell of table.bodyRows[0].cells) {\u00a0 \u00a0 const bodyCellText = getText(bodyCell.layout.textAnchor, text);\u00a0 \u00a0 bodyRowText += `${JSON.stringify(bodyCellText.trim())} | `;\u00a0 }\u00a0 console.log(\u00a0 \u00a0 `First row data: ${bodyRowText.substring(0, bodyRowText.length - 3)}`\u00a0 );};// Extract shards from the text fieldconst getText = (textAnchor, text) => {\u00a0 if (!textAnchor.textSegments || textAnchor.textSegments.length === 0) {\u00a0 \u00a0 return '';\u00a0 }\u00a0 // First shard in document doesn't have startIndex property\u00a0 const startIndex = textAnchor.textSegments[0].startIndex || 0;\u00a0 const endIndex = textAnchor.textSegments[0].endIndex;\u00a0 return text.substring(startIndex, endIndex);};\n```For more information, see the [Document AI Python API reference documentation](/python/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/documentai/snippets/handle_response_sample.py) \n```\nfrom typing import Optional, Sequencefrom google.api_core.client_options import ClientOptionsfrom google.cloud import documentai# TODO(developer): Uncomment these variables before running the sample.# project_id = \"YOUR_PROJECT_ID\"# location = \"YOUR_PROCESSOR_LOCATION\" # Format is \"us\" or \"eu\"# processor_id = \"YOUR_PROCESSOR_ID\" # Create processor before running sample# processor_version = \"rc\" # Refer to https://cloud.google.com/document-ai/docs/manage-processor-versions for more information# file_path = \"/path/to/local/pdf\"# mime_type = \"application/pdf\" # Refer to https://cloud.google.com/document-ai/docs/file-types for supported file typesdef process_document_form_sample(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 processor_id: str,\u00a0 \u00a0 processor_version: str,\u00a0 \u00a0 file_path: str,\u00a0 \u00a0 mime_type: str,) -> documentai.Document:\u00a0 \u00a0 # Online processing request to Document AI\u00a0 \u00a0 document = process_document(\u00a0 \u00a0 \u00a0 \u00a0 project_id, location, processor_id, processor_version, file_path, mime_type\u00a0 \u00a0 )\u00a0 \u00a0 # Read the table and form fields output from the processor\u00a0 \u00a0 # The form processor also contains OCR data. For more information\u00a0 \u00a0 # on how to parse OCR data please see the OCR sample.\u00a0 \u00a0 text = document.text\u00a0 \u00a0 print(f\"Full document text: {repr(text)}\\n\")\u00a0 \u00a0 print(f\"There are {len(document.pages)} page(s) in this document.\")\u00a0 \u00a0 # Read the form fields and tables output from the processor\u00a0 \u00a0 for page in document.pages:\u00a0 \u00a0 \u00a0 \u00a0 print(f\"\\n\\n**** Page {page.page_number} ****\")\u00a0 \u00a0 \u00a0 \u00a0 print(f\"\\nFound {len(page.tables)} table(s):\")\u00a0 \u00a0 \u00a0 \u00a0 for table in page.tables:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 num_columns = len(table.header_rows[0].cells)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 num_rows = len(table.body_rows)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(f\"Table with {num_columns} columns and {num_rows} rows:\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Print header rows\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"Columns:\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print_table_rows(table.header_rows, text)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Print body rows\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"Table body data:\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print_table_rows(table.body_rows, text)\u00a0 \u00a0 \u00a0 \u00a0 print(f\"\\nFound {len(page.form_fields)} form field(s):\")\u00a0 \u00a0 \u00a0 \u00a0 for field in page.form_fields:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name = layout_to_text(field.field_name, text)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value = layout_to_text(field.field_value, text)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(f\" \u00a0 \u00a0* {repr(name.strip())}: {repr(value.strip())}\")\u00a0 \u00a0 # Supported in version `pretrained-form-parser-v2.0-2022-11-10` and later.\u00a0 \u00a0 # For more information: https://cloud.google.com/document-ai/docs/form-parser\u00a0 \u00a0 if document.entities:\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Found {len(document.entities)} generic entities:\")\u00a0 \u00a0 \u00a0 \u00a0 for entity in document.entities:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print_entity(entity)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Print Nested Entities\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for prop in entity.properties:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print_entity(prop)\u00a0 \u00a0 return documentdef print_table_rows(\u00a0 \u00a0 table_rows: Sequence[documentai.Document.Page.Table.TableRow], text: str) -> None:\u00a0 \u00a0 for table_row in table_rows:\u00a0 \u00a0 \u00a0 \u00a0 row_text = \"\"\u00a0 \u00a0 \u00a0 \u00a0 for cell in table_row.cells:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cell_text = layout_to_text(cell.layout, text)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 row_text += f\"{repr(cell_text.strip())} | \"\u00a0 \u00a0 \u00a0 \u00a0 print(row_text)def print_entity(entity: documentai.Document.Entity) -> None:\u00a0 \u00a0 # Fields detected. For a full list of fields for each processor see\u00a0 \u00a0 # the processor documentation:\u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/processors-list\u00a0 \u00a0 key = entity.type_\u00a0 \u00a0 # Some other value formats in addition to text are availible\u00a0 \u00a0 # e.g. dates: `entity.normalized_value.date_value.year`\u00a0 \u00a0 text_value = entity.text_anchor.content\u00a0 \u00a0 confidence = entity.confidence\u00a0 \u00a0 normalized_value = entity.normalized_value.text\u00a0 \u00a0 print(f\" \u00a0 \u00a0* {repr(key)}: {repr(text_value)}({confidence:.1%} confident)\")\u00a0 \u00a0 if normalized_value:\u00a0 \u00a0 \u00a0 \u00a0 print(f\" \u00a0 \u00a0* Normalized Value: {repr(normalized_value)}\")def process_document(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 processor_id: str,\u00a0 \u00a0 processor_version: str,\u00a0 \u00a0 file_path: str,\u00a0 \u00a0 mime_type: str,\u00a0 \u00a0 process_options: Optional[documentai.ProcessOptions] = None,) -> documentai.Document:\u00a0 \u00a0 # You must set the `api_endpoint` if you use a location other than \"us\".\u00a0 \u00a0 client = documentai.DocumentProcessorServiceClient(\u00a0 \u00a0 \u00a0 \u00a0 client_options=ClientOptions(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 api_endpoint=f\"{location}-documentai.googleapis.com\"\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 )\u00a0 \u00a0 # The full resource name of the processor version, e.g.:\u00a0 \u00a0 # `projects/{project_id}/locations/{location}/processors/{processor_id}/processorVersions/{processor_version_id}`\u00a0 \u00a0 # You must create a processor before running this sample.\u00a0 \u00a0 name = client.processor_version_path(\u00a0 \u00a0 \u00a0 \u00a0 project_id, location, processor_id, processor_version\u00a0 \u00a0 )\u00a0 \u00a0 # Read the file into memory\u00a0 \u00a0 with open(file_path, \"rb\") as image:\u00a0 \u00a0 \u00a0 \u00a0 image_content = image.read()\u00a0 \u00a0 # Configure the process request\u00a0 \u00a0 request = documentai.ProcessRequest(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 raw_document=documentai.RawDocument(content=image_content, mime_type=mime_type),\u00a0 \u00a0 \u00a0 \u00a0 # Only supported for Document OCR processor\u00a0 \u00a0 \u00a0 \u00a0 process_options=process_options,\u00a0 \u00a0 )\u00a0 \u00a0 result = client.process_document(request=request)\u00a0 \u00a0 # For a full list of `Document` object attributes, reference this page:\u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/reference/rest/v1/Document\u00a0 \u00a0 return result.documentdef layout_to_text(layout: documentai.Document.Page.Layout, text: str) -> str:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Document AI identifies text in different parts of the document by their\u00a0 \u00a0 offsets in the entirety of the document\"s text. This function converts\u00a0 \u00a0 offsets to a string.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # If a text segment spans several lines, it will\u00a0 \u00a0 # be stored in different text segments.\u00a0 \u00a0 return \"\".join(\u00a0 \u00a0 \u00a0 \u00a0 text[int(segment.start_index) : int(segment.end_index)]\u00a0 \u00a0 \u00a0 \u00a0 for segment in layout.text_anchor.text_segments\u00a0 \u00a0 )\n```\n## What's nextTo search and filter code samples for other Google Cloud products, see the [Google Cloud sample browser](/docs/samples?product=documentai) .", "guide": "Document AI"}