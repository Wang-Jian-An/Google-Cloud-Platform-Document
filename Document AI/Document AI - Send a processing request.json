{"title": "Document AI - Send a processing request", "url": "https://cloud.google.com/document-ai/docs/send-request?hl=zh-cn", "abstract": "# Document AI - Send a processing request\n# Send a processing request\nAfter you have set up your [Google Cloud account](https://console.cloud.google.com/) and [created a processor](/document-ai/docs/create-processor) , you can send a request to your Document AI processor.\nThe code used to send the request is the same for all processors. You see differences in processor functioning in the information each processor outputs.\nUsing with the `v1` API version of Document AI or in Google Cloud console, you can send processing requests to that specific processor version. If you don't specify a processor version, the default version is used. For more information, see [Managing processor versions](/document-ai/docs/manage-processor-versions) .\n", "content": "## Online processing\nOnline (synchronous) requests let you send a single document for processing. Document AI immediately processes the request and returns a [document](/document-ai/docs/reference/rest/v1/Document) .\n### Send request to a processor\nThe following code samples show you how to send a request to a processor.\nThis sample shows you how to provide document content (raw document content in bytes via a base64 encoded string) in the [rawDocument](/document-ai/docs/reference/rest/v1/RawDocument) object.\nAlternatively, you could also specify [inlineDocument](/document-ai/docs/reference/rest/v1/projects.locations.processors/process#request-body) , which is the same [Document](/document-ai/docs/reference/rest/v1/Document) JSON format returned by Document AI. This allows you to chain requests by passing the same format back and forth (for example, if you classify a document and then extract its content).\nBefore using any of the request data, make the following replacements:- : your processor's [location](/document-ai/docs/regions) , for example:- `us`- United States\n- `eu`- European Union\n- : Your Google Cloud project ID.\n- : the ID of your custom processor.\n- : A boolean to disable human review (Supported by [Human-in-the-Loop processors](/document-ai/docs/hitl#processors_supported) only.)- `true`- skips human review\n- `false`- enables human review (default)\n- : One of the valid [MIME type](/document-ai/docs/file-types) options.\n- : One of the valid Inline document content, represented as a stream of bytes. For JSON representations, the base64 encoding (ASCII string) of your binary image data. This string should look similar to the following string:- `/9j/4QAYRXhpZgAA...9tAVx/zDQDlGxn//2Q==`\nVisit the [Base64 encode](/document-ai/docs/base64) topic for more information.\n- : Specifies which fields to include in the`Document`output. This is a comma-separated list of fully qualified names of fields in` [FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask) `format.- Example:`text,entities,pages.pageNumber`\n- : A list of individual pages to process.- Alternatively, provide field [fromStart](/document-ai/docs/reference/rest/v1/ProcessOptions#FIELDS.from_start) or [fromEnd](/document-ai/docs/reference/rest/v1/ProcessOptions#FIELDS.from_end) to process a specific quantity of pages from the beginning or end of the document.\n\u2020 This content can also be specified using base64-encoded content in the [inlineDocument](/document-ai/docs/reference/rest/v1/projects.locations.processors/process) object.\nHTTP method and URL:\n```\nPOST https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/processors/PROCESSOR_ID:process\n```\nRequest JSON body:\n```\n{\n \"skipHumanReview\": skipHumanReview,\n \"rawDocument\": {\n \"mimeType\": \"MIME_TYPE\",\n \"content\": \"IMAGE_CONTENT\"\n },\n \"fieldMask\": \"FIELD_MASK\",\n \"processOptions\": {\n \"individualPageSelector\" {\n  \"pages\": [INDIVIDUAL_PAGES]\n }\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/processors/PROCESSOR_ID:process\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/processors/PROCESSOR_ID:process\" | Select-Object -Expand Content\n```\nIf the request is successful, the server returns a `200 OK` HTTP status code and the  response in JSON format. The response body contains an instance of ` [Document](/document-ai/docs/reference/rest/v1/Document) ` .\n### Send request to a processor versionBefore using any of the request data, make the following replacements:- : your processor's [location](/document-ai/docs/regions) , for example:- `us`- United States\n- `eu`- European Union\n- : Your Google Cloud project ID.\n- : the ID of your custom processor.\n- : the processor version identifier. Refer to [Select a processor version](/document-ai/docs/manage-processor#select_a_processor_version) for more information. For example:- `pretrained-TYPE-vX.X-YYYY-MM-DD`\n- `stable`\n- `rc`\n- : A boolean to disable human review (Supported by [Human-in-the-Loop processors](/document-ai/docs/hitl#processors_supported) only.)- `true`- skips human review\n- `false`- enables human review (default)\n- : One of the valid [MIME type](/document-ai/docs/file-types) options.\n- : One of the valid Inline document content, represented as a stream of bytes. For JSON representations, the base64 encoding (ASCII string) of your binary image data. This string should look similar to the following string:- `/9j/4QAYRXhpZgAA...9tAVx/zDQDlGxn//2Q==`\nVisit the [Base64 encode](/document-ai/docs/base64) topic for more information.\n- : Specifies which fields to include in the`Document`output. This is a comma-separated list of fully qualified names of fields in` [FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask) `format.- Example:`text,entities,pages.pageNumber`\n\u2020 This content can also be specified using base64-encoded content in the [inlineDocument](/document-ai/docs/reference/rest/v1/projects.locations.processors/process) object.\nHTTP method and URL:\n```\nPOST https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/processors/PROCESSOR_ID/processorVersions/PROCESSOR_VERSION:process\n```\nRequest JSON body:\n```\n{\n \"skipHumanReview\": skipHumanReview,\n \"rawDocument\": {\n \"mimeType\": \"MIME_TYPE\",\n \"content\": \"IMAGE_CONTENT\"\n },\n \"fieldMask\": \"FIELD_MASK\"\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/processors/PROCESSOR_ID/processorVersions/PROCESSOR_VERSION:process\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/processors/PROCESSOR_ID/processorVersions/PROCESSOR_VERSION:process\" | Select-Object -Expand Content\n```\nIf the request is successful, the server returns a `200 OK` HTTP status code and the  response in JSON format. The response body contains an instance of ` [Document](/document-ai/docs/reference/rest/v1/Document) ` .For more information, see the [Document AI C# API reference documentation](/dotnet/docs/reference/Google.Cloud.DocumentAI.V1/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/documentai/api/DocumentAI.Samples/Quickstart.cs) \n```\nusing Google.Cloud.DocumentAI.V1;using Google.Protobuf;using System;using System.IO;public class QuickstartSample{\u00a0 \u00a0 public Document Quickstart(\u00a0 \u00a0 \u00a0 \u00a0 string projectId = \"your-project-id\",\u00a0 \u00a0 \u00a0 \u00a0 string locationId = \"your-processor-location\",\u00a0 \u00a0 \u00a0 \u00a0 string processorId = \"your-processor-id\",\u00a0 \u00a0 \u00a0 \u00a0 string localPath = \"my-local-path/my-file-name\",\u00a0 \u00a0 \u00a0 \u00a0 string mimeType = \"application/pdf\"\u00a0 \u00a0 )\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 var client = new DocumentProcessorServiceClientBuilder\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Endpoint = $\"{locationId}-documentai.googleapis.com\"\u00a0 \u00a0 \u00a0 \u00a0 }.Build();\u00a0 \u00a0 \u00a0 \u00a0 // Read in local file\u00a0 \u00a0 \u00a0 \u00a0 using var fileStream = File.OpenRead(localPath);\u00a0 \u00a0 \u00a0 \u00a0 var rawDocument = new RawDocument\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Content = ByteString.FromStream(fileStream),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MimeType = mimeType\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 var request = new ProcessRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name = ProcessorName.FromProjectLocationProcessor(projectId, locationId, processorId).ToString(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RawDocument = rawDocument\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request\u00a0 \u00a0 \u00a0 \u00a0 var response = client.ProcessDocument(request);\u00a0 \u00a0 \u00a0 \u00a0 var document = response.Document;\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(document.Text);\u00a0 \u00a0 \u00a0 \u00a0 return document;\u00a0 \u00a0 }}\n```For more information, see the [Document AI Java API reference documentation](/java/docs/reference/google-cloud-document-ai/latest/overview) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/document-ai/src/main/java/documentai/v1/ProcessDocument.java) \n```\nimport com.google.cloud.documentai.v1.Document;import com.google.cloud.documentai.v1.DocumentProcessorServiceClient;import com.google.cloud.documentai.v1.DocumentProcessorServiceSettings;import com.google.cloud.documentai.v1.ProcessRequest;import com.google.cloud.documentai.v1.ProcessResponse;import com.google.cloud.documentai.v1.RawDocument;import com.google.protobuf.ByteString;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Paths;import java.util.List;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeoutException;public class ProcessDocument {\u00a0 public static void processDocument()\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"your-project-id\";\u00a0 \u00a0 String location = \"your-project-location\"; // Format is \"us\" or \"eu\".\u00a0 \u00a0 String processerId = \"your-processor-id\";\u00a0 \u00a0 String filePath = \"path/to/input/file.pdf\";\u00a0 \u00a0 processDocument(projectId, location, processerId, filePath);\u00a0 }\u00a0 public static void processDocument(\u00a0 \u00a0 \u00a0 String projectId, String location, String processorId, String filePath)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs\u00a0 \u00a0 // to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your\u00a0 \u00a0 // requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background\u00a0 \u00a0 // resources.\u00a0 \u00a0 String endpoint = String.format(\"%s-documentai.googleapis.com:443\", location);\u00a0 \u00a0 DocumentProcessorServiceSettings settings =\u00a0 \u00a0 \u00a0 \u00a0 DocumentProcessorServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 try (DocumentProcessorServiceClient client = DocumentProcessorServiceClient.create(settings)) {\u00a0 \u00a0 \u00a0 // The full resource name of the processor, e.g.:\u00a0 \u00a0 \u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 \u00a0 \u00a0 // You must create new processors in the Cloud Console first\u00a0 \u00a0 \u00a0 String name =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String.format(\"projects/%s/locations/%s/processors/%s\", projectId, location, processorId);\u00a0 \u00a0 \u00a0 // Read the file.\u00a0 \u00a0 \u00a0 byte[] imageFileData = Files.readAllBytes(Paths.get(filePath));\u00a0 \u00a0 \u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 \u00a0 \u00a0 ByteString content = ByteString.copyFrom(imageFileData);\u00a0 \u00a0 \u00a0 RawDocument document =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RawDocument.newBuilder().setContent(content).setMimeType(\"application/pdf\").build();\u00a0 \u00a0 \u00a0 // Configure the process request.\u00a0 \u00a0 \u00a0 ProcessRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ProcessRequest.newBuilder().setName(name).setRawDocument(document).build();\u00a0 \u00a0 \u00a0 // Recognizes text entities in the PDF document\u00a0 \u00a0 \u00a0 ProcessResponse result = client.processDocument(request);\u00a0 \u00a0 \u00a0 Document documentResponse = result.getDocument();\u00a0 \u00a0 \u00a0 // Get all of the document text as one big string\u00a0 \u00a0 \u00a0 String text = documentResponse.getText();\u00a0 \u00a0 \u00a0 // Read the text recognition output from the processor\u00a0 \u00a0 \u00a0 System.out.println(\"The document contains the following paragraphs:\");\u00a0 \u00a0 \u00a0 Document.Page firstPage = documentResponse.getPages(0);\u00a0 \u00a0 \u00a0 List<Document.Page.Paragraph> paragraphs = firstPage.getParagraphsList();\u00a0 \u00a0 \u00a0 for (Document.Page.Paragraph paragraph : paragraphs) {\u00a0 \u00a0 \u00a0 \u00a0 String paragraphText = getText(paragraph.getLayout().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"Paragraph text:\\n%s\\n\", paragraphText);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 // Form parsing provides additional output about\u00a0 \u00a0 \u00a0 // form-formatted PDFs. You must create a form\u00a0 \u00a0 \u00a0 // processor in the Cloud Console to see full field details.\u00a0 \u00a0 \u00a0 System.out.println(\"The following form key/value pairs were detected:\");\u00a0 \u00a0 \u00a0 for (Document.Page.FormField field : firstPage.getFormFieldsList()) {\u00a0 \u00a0 \u00a0 \u00a0 String fieldName = getText(field.getFieldName().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 \u00a0 String fieldValue = getText(field.getFieldValue().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Extracted form fields pair:\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"\\t(%s, %s))\\n\", fieldName, fieldValue);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 // Extract shards from the text field\u00a0 private static String getText(Document.TextAnchor textAnchor, String text) {\u00a0 \u00a0 if (textAnchor.getTextSegmentsList().size() > 0) {\u00a0 \u00a0 \u00a0 int startIdx = (int) textAnchor.getTextSegments(0).getStartIndex();\u00a0 \u00a0 \u00a0 int endIdx = (int) textAnchor.getTextSegments(0).getEndIndex();\u00a0 \u00a0 \u00a0 return text.substring(startIdx, endIdx);\u00a0 \u00a0 }\u00a0 \u00a0 return \"[NO TEXT]\";\u00a0 }}\n```For more information, see the [Document AI Node.js API reference documentation](/nodejs/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/document-ai/process-document.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION'; // Format is 'us' or 'eu'// const processorId = 'YOUR_PROCESSOR_ID'; // Create processor in Cloud Console// const filePath = '/path/to/local/pdf';const {DocumentProcessorServiceClient} =\u00a0 require('@google-cloud/documentai').v1;// Instantiates a clientconst client = new DocumentProcessorServiceClient();async function processDocument() {\u00a0 // The full resource name of the processor, e.g.:\u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 // You must create new processors in the Cloud Console first\u00a0 const name = `projects/${projectId}/locations/${location}/processors/${processorId}`;\u00a0 // Read the file into memory.\u00a0 const fs = require('fs').promises;\u00a0 const imageFile = await fs.readFile(filePath);\u00a0 // Convert the image data to a Buffer and base64 encode it.\u00a0 const encodedImage = Buffer.from(imageFile).toString('base64');\u00a0 const request = {\u00a0 \u00a0 name,\u00a0 \u00a0 rawDocument: {\u00a0 \u00a0 \u00a0 content: encodedImage,\u00a0 \u00a0 \u00a0 mimeType: 'application/pdf',\u00a0 \u00a0 },\u00a0 };\u00a0 // Recognizes text entities in the PDF document\u00a0 const [result] = await client.processDocument(request);\u00a0 const {document} = result;\u00a0 // Get all of the document text as one big string\u00a0 const {text} = document;\u00a0 // Extract shards from the text field\u00a0 const getText = textAnchor => {\u00a0 \u00a0 if (!textAnchor.textSegments || textAnchor.textSegments.length === 0) {\u00a0 \u00a0 \u00a0 return '';\u00a0 \u00a0 }\u00a0 \u00a0 // First shard in document doesn't have startIndex property\u00a0 \u00a0 const startIndex = textAnchor.textSegments[0].startIndex || 0;\u00a0 \u00a0 const endIndex = textAnchor.textSegments[0].endIndex;\u00a0 \u00a0 return text.substring(startIndex, endIndex);\u00a0 };\u00a0 // Read the text recognition output from the processor\u00a0 console.log('The document contains the following paragraphs:');\u00a0 const [page1] = document.pages;\u00a0 const {paragraphs} = page1;\u00a0 for (const paragraph of paragraphs) {\u00a0 \u00a0 const paragraphText = getText(paragraph.layout.textAnchor);\u00a0 \u00a0 console.log(`Paragraph text:\\n${paragraphText}`);\u00a0 }\u00a0 // Form parsing provides additional output about\u00a0 // form-formatted PDFs. You \u00a0must create a form\u00a0 // processor in the Cloud Console to see full field details.\u00a0 console.log('\\nThe following form key/value pairs were detected:');\u00a0 const {formFields} = page1;\u00a0 for (const field of formFields) {\u00a0 \u00a0 const fieldName = getText(field.fieldName.textAnchor);\u00a0 \u00a0 const fieldValue = getText(field.fieldValue.textAnchor);\u00a0 \u00a0 console.log('Extracted key value pair:');\u00a0 \u00a0 console.log(`\\t(${fieldName}, ${fieldValue})`);\u00a0 }}\n```For more information, see the [Document AI Python API reference documentation](/python/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/documentai/snippets/process_document_sample.py) \n```\nfrom typing import Optionalfrom google.api_core.client_options import ClientOptionsfrom google.cloud import documentai \u00a0# type: ignore# TODO(developer): Uncomment these variables before running the sample.# project_id = \"YOUR_PROJECT_ID\"# location = \"YOUR_PROCESSOR_LOCATION\" # Format is \"us\" or \"eu\"# processor_id = \"YOUR_PROCESSOR_ID\" # Create processor before running sample# file_path = \"/path/to/local/pdf\"# mime_type = \"application/pdf\" # Refer to https://cloud.google.com/document-ai/docs/file-types for supported file types# field_mask = \"text,entities,pages.pageNumber\" \u00a0# Optional. The fields to return in the Document object.# processor_version_id = \"YOUR_PROCESSOR_VERSION_ID\" # Optional. Processor version to usedef process_document_sample(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 processor_id: str,\u00a0 \u00a0 file_path: str,\u00a0 \u00a0 mime_type: str,\u00a0 \u00a0 field_mask: Optional[str] = None,\u00a0 \u00a0 processor_version_id: Optional[str] = None,) -> None:\u00a0 \u00a0 # You must set the `api_endpoint` if you use a location other than \"us\".\u00a0 \u00a0 opts = ClientOptions(api_endpoint=f\"{location}-documentai.googleapis.com\")\u00a0 \u00a0 client = documentai.DocumentProcessorServiceClient(client_options=opts)\u00a0 \u00a0 if processor_version_id:\u00a0 \u00a0 \u00a0 \u00a0 # The full resource name of the processor version, e.g.:\u00a0 \u00a0 \u00a0 \u00a0 # `projects/{project_id}/locations/{location}/processors/{processor_id}/processorVersions/{processor_version_id}`\u00a0 \u00a0 \u00a0 \u00a0 name = client.processor_version_path(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 project_id, location, processor_id, processor_version_id\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 # The full resource name of the processor, e.g.:\u00a0 \u00a0 \u00a0 \u00a0 # `projects/{project_id}/locations/{location}/processors/{processor_id}`\u00a0 \u00a0 \u00a0 \u00a0 name = client.processor_path(project_id, location, processor_id)\u00a0 \u00a0 # Read the file into memory\u00a0 \u00a0 with open(file_path, \"rb\") as image:\u00a0 \u00a0 \u00a0 \u00a0 image_content = image.read()\u00a0 \u00a0 # Load binary data\u00a0 \u00a0 raw_document = documentai.RawDocument(content=image_content, mime_type=mime_type)\u00a0 \u00a0 # For more information: https://cloud.google.com/document-ai/docs/reference/rest/v1/ProcessOptions\u00a0 \u00a0 # Optional: Additional configurations for processing.\u00a0 \u00a0 process_options = documentai.ProcessOptions(\u00a0 \u00a0 \u00a0 \u00a0 # Process only specific pages\u00a0 \u00a0 \u00a0 \u00a0 individual_page_selector=documentai.ProcessOptions.IndividualPageSelector(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pages=[1]\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 )\u00a0 \u00a0 # Configure the process request\u00a0 \u00a0 request = documentai.ProcessRequest(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 raw_document=raw_document,\u00a0 \u00a0 \u00a0 \u00a0 field_mask=field_mask,\u00a0 \u00a0 \u00a0 \u00a0 process_options=process_options,\u00a0 \u00a0 )\u00a0 \u00a0 result = client.process_document(request=request)\u00a0 \u00a0 # For a full list of `Document` object attributes, reference this page:\u00a0 \u00a0 # https://cloud.google.com/document-ai/docs/reference/rest/v1/Document\u00a0 \u00a0 document = result.document\u00a0 \u00a0 # Read the text recognition output from the processor\u00a0 \u00a0 print(\"The document contains the following text:\")\u00a0 \u00a0 print(document.text)\n```\n## Batch processing\nBatch (asynchronous) requests let you send multiple documents in a single request. Document AI responds with an [operation](/document-ai/docs/reference/rest/v1/projects.locations.operations) that you can poll for the status of the request. When this operation finishes, it contains a [BatchProcessMetadata](/document-ai/docs/reference/rest/Shared.Types/BatchProcessMetadata) that points to the Cloud Storage bucket where the processed results are stored.\nIf the input files you want to access are in a bucket in another project, you must provide access to that bucket before you can access the files. See [setup file access](/setup) .\n### Send request to a processor\nThe following code samples show you how to send a batch process request to a processor.\nThis sample shows how to send a `POST` request to the [batchProcess](/document-ai/docs/reference/rest/v1/projects.locations.processors/batchProcess) method for large document asynchronous processing. The example uses the access token for a service account set up for the project using the Google Cloud CLI. For instructions on installing the Google Cloud CLI, setting up a project with a service account, and obtaining an access token, see [Before you begin](/document-ai/docs/setup) .\nA `batchProcess` request starts a long-running operation and stores results in a Cloud Storage bucket. This sample also shows how to get the status of this long-running operation after it has started.\n### Send the process requestBefore using any of the request data, make the following replacements:- : your processor's [location](/document-ai/docs/regions) , for example:- `us`- United States\n- `eu`- European Union\n- : Your Google Cloud project ID.\n- : the ID of your custom processor.\n- : A Cloud Storage bucket/directory to read input files from, expressed in the following form:- `gs://bucket/directory/`\nThe requesting user must have read permission to the bucket.\n- : One of the valid [MIME type](/document-ai/docs/file-types) options.\n- : A Cloud Storage bucket/directory to save output files to, expressed in the following form:- `gs://bucket/directory/`\nThe requesting user must have write permission to the bucket.\n- : A boolean to disable human review (Supported by [Human-in-the-Loop processors](/document-ai/docs/hitl#processors_supported) only.)- `true`- skips human review\n- `false`- enables human review (default)\n- : Specifies which fields to include in the`Document`output. This is a comma-separated list of fully qualified names of fields in` [FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask) `format.- Example:`text,entities,pages.pageNumber`\n\u2020 Instead of using `gcsPrefix` to include all the files in a GCS folder, you can also use `documents` to individually list each file:\n```\n \"inputDocuments\": {\n \"gcsDocuments\": {\n  \"documents\": [  {\n   \"gcsUri\": \"gs://BUCKET/PATH/TO/DOCUMENT1.ext\",\n   \"mimeType\": \"MIME_TYPE\"\n  },\n  {\n   \"gcsUri\": \"gs://BUCKET/PATH/TO/DOCUMENT2.ext\",\n   \"mimeType\": \"MIME_TYPE\"\n  }\n  ]\n }\n }\n```\nHTTP method and URL:\n```\nPOST https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/processors/PROCESSOR_ID:batchProcess\n```\nRequest JSON body:\n```\n{\n \"inputDocuments\": {\n \"gcsPrefix\": {\n  \"gcsUriPrefix\": \"INPUT_BUCKET_FOLDER\"\n }\n },\n \"documentOutputConfig\": {\n \"gcsOutputConfig\": {\n  \"gcsUri\": \"OUTPUT_BUCKET_FOLDER\",\n  \"fieldMask\": \"FIELD_MASK\"\n }\n },\n \"skipHumanReview\": BOOLEAN\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/processors/PROCESSOR_ID:batchProcess\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/processors/PROCESSOR_ID:batchProcess\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_ID/locations/LOCATION/operations/OPERATION_ID\"\n}\n```### Send request to a processor versionBefore using any of the request data, make the following replacements:- : your processor's [location](/document-ai/docs/regions) , for example:- `us`- United States\n- `eu`- European Union\n- : Your Google Cloud project ID.\n- : the ID of your custom processor.\n- : the processor version identifier. Refer to [Select a processor version](/document-ai/docs/manage-processor#select_a_processor_version) for more information. For example:- `pretrained-TYPE-vX.X-YYYY-MM-DD`\n- `stable`\n- `rc`\n- : A Cloud Storage bucket/directory to read input files from, expressed in the following form:- `gs://bucket/directory/`\nThe requesting user must have read permission to the bucket.\n- : One of the valid [MIME type](/document-ai/docs/file-types) options.\n- : A Cloud Storage bucket/directory to save output files to, expressed in the following form:- `gs://bucket/directory/`\nThe requesting user must have write permission to the bucket.\n- : A boolean to disable human review (Supported by [Human-in-the-Loop processors](/document-ai/docs/hitl#processors_supported) only.)- `true`- skips human review\n- `false`- enables human review (default)\n- : Specifies which fields to include in the`Document`output. This is a comma-separated list of fully qualified names of fields in` [FieldMask](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask) `format.- Example:`text,entities,pages.pageNumber`\n\u2020 Instead of using `gcsPrefix` to include all the files in a GCS folder, you can also use `documents` to individually list each file:\n```\n \"inputDocuments\": {\n \"gcsDocuments\": {\n  \"documents\": [  {\n   \"gcsUri\": \"gs://BUCKET/PATH/TO/DOCUMENT1.ext\",\n   \"mimeType\": \"MIME_TYPE\"\n  },\n  {\n   \"gcsUri\": \"gs://BUCKET/PATH/TO/DOCUMENT2.ext\",\n   \"mimeType\": \"MIME_TYPE\"\n  }\n  ]\n }\n }\n```\nHTTP method and URL:\n```\nPOST https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/processors/PROCESSOR_ID/processorVersions/PROCESSOR_VERSION:batchProcess\n```\nRequest JSON body:\n```\n{\n \"inputDocuments\": {\n \"gcsPrefix\": {\n  \"gcsUriPrefix\": \"INPUT_BUCKET_FOLDER\"\n }\n },\n \"documentOutputConfig\": {\n \"gcsOutputConfig\": {\n  \"gcsUri\": \"OUTPUT_BUCKET_FOLDER\",\n  \"fieldMask\": \"FIELD_MASK\"\n }\n },\n \"skipHumanReview\": BOOLEAN\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/processors/PROCESSOR_ID/processorVersions/PROCESSOR_VERSION:batchProcess\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/processors/PROCESSOR_ID/processorVersions/PROCESSOR_VERSION:batchProcess\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_ID/locations/LOCATION/operations/OPERATION_ID\"\n}\n```\nIf the request is successful, the Document AI API returns the name for your operation.\n### Get the resultsTo get the results of your request, you must send a `GET` request to the `operations` resource. The following shows how to send such a request. You can read more information in the [Long-Running Operations](/document-ai/docs/long-running-operations) documentation.\nBefore using any of the request data, make the following replacements:- : Your Google Cloud project ID.\n- : the [location](/document-ai/docs/regions) where the LRO is running, for example:- `us`- United States\n- `eu`- European Union\n- : The ID of your operation. The ID is the last element of the name of your operation. For example:- Operation name:`projects/` `` `/locations/` `` `/operations/` ` **bc4e1d412863e626** `\n- Operation id:` **bc4e1d412863e626** `\nHTTP method and URL:\n```\nGET https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/operations/OPERATION_ID\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\ncurl -X GET \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ \"https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/operations/OPERATION_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method GET ` -Headers $headers ` -Uri \"https://LOCATION-documentai.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/operations/OPERATION_ID\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_ID/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.documentai.v1.BatchProcessMetadata\",\n \"state\": \"SUCCEEDED\",\n \"stateMessage\": \"Processed 1 document(s) successfully\",\n \"createTime\": \"TIMESTAMP\",\n \"updateTime\": \"TIMESTAMP\",\n \"individualProcessStatuses\": [  {\n  \"inputGcsSource\": \"INPUT_BUCKET_FOLDER/DOCUMENT1.ext\",\n  \"status\": {},\n  \"outputGcsDestination\": \"OUTPUT_BUCKET_FOLDER/OPERATION_ID/0\",\n  \"humanReviewStatus\": {\n   \"state\": \"ERROR\",\n   \"stateMessage\": \"Sharded document protos are not supported for human review.\"\n  }\n  }\n ]\n },\n \"done\": true,\n \"response\": {\n \"@type\": \"type.googleapis.com/google.cloud.documentai.v1.BatchProcessResponse\"\n }\n}\n```\nThe response body contains an instance of [Operation](/document-ai/docs/reference/rest/v1/projects.locations.operations) with information about the status of the operation. If the operation has completed successfully, the [metadata](/document-ai/docs/reference/rest/v1/projects.locations.operations#Operation.FIELDS.metadata) field will be populated with an instance of [BatchProcessMetadata](/document-ai/docs/reference/rest/Shared.Types/BatchProcessMetadata) which contains information about the processed documents.For more information, see the [Document AI C# API reference documentation](/dotnet/docs/reference/Google.Cloud.DocumentAI.V1/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-dotnet/blob/HEAD/apis/Google.Cloud.DocumentAI.V1/Google.Cloud.DocumentAI.V1.GeneratedSnippets/DocumentProcessorServiceClient.BatchProcessDocumentsRequestObjectSnippet.g.cs) \n```\nusing Google.Api.Gax;using Google.Cloud.DocumentAI.V1;using Google.LongRunning;public sealed partial class GeneratedDocumentProcessorServiceClientSnippets{\u00a0 \u00a0 /// <summary>Snippet for BatchProcessDocuments</summary>\u00a0 \u00a0 /// <remarks>\u00a0 \u00a0 /// This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 /// It will require modifications to work:\u00a0 \u00a0 /// - It may require correct/in-range values for request initialization.\u00a0 \u00a0 /// - It may require specifying regional endpoints when creating the service client as shown in\u00a0 \u00a0 /// \u00a0 https://cloud.google.com/dotnet/docs/reference/help/client-configuration#endpoint.\u00a0 \u00a0 /// </remarks>\u00a0 \u00a0 public void BatchProcessDocumentsRequestObject()\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 DocumentProcessorServiceClient documentProcessorServiceClient = DocumentProcessorServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 BatchProcessRequest request = new BatchProcessRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ResourceName = new UnparsedResourceName(\"a/wildcard/resource\"),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SkipHumanReview = false,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputDocuments = new BatchDocumentsInputConfig(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DocumentOutputConfig = new DocumentOutputConfig(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ProcessOptions = new ProcessOptions(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Labels = { { \"\", \"\" }, },\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request\u00a0 \u00a0 \u00a0 \u00a0 Operation<BatchProcessResponse, BatchProcessMetadata> response = documentProcessorServiceClient.BatchProcessDocuments(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete\u00a0 \u00a0 \u00a0 \u00a0 Operation<BatchProcessResponse, BatchProcessMetadata> completedResponse = response.PollUntilCompleted();\u00a0 \u00a0 \u00a0 \u00a0 // Retrieve the operation result\u00a0 \u00a0 \u00a0 \u00a0 BatchProcessResponse result = completedResponse.Result;\u00a0 \u00a0 \u00a0 \u00a0 // Or get the name of the operation\u00a0 \u00a0 \u00a0 \u00a0 string operationName = response.Name;\u00a0 \u00a0 \u00a0 \u00a0 // This name can be stored, then the long-running operation retrieved later by name\u00a0 \u00a0 \u00a0 \u00a0 Operation<BatchProcessResponse, BatchProcessMetadata> retrievedResponse = documentProcessorServiceClient.PollOnceBatchProcessDocuments(operationName);\u00a0 \u00a0 \u00a0 \u00a0 // Check if the retrieved long-running operation has completed\u00a0 \u00a0 \u00a0 \u00a0 if (retrievedResponse.IsCompleted)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // If it has completed, then access the result\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BatchProcessResponse retrievedResult = retrievedResponse.Result;\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }}\n```For more information, see the [Document AI Go API reference documentation](/go/docs/reference/cloud.google.com/go/documentai/latest/apiv1) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-go/blob/HEAD/internal/generated/snippets/documentai/apiv1/DocumentProcessorClient/BatchProcessDocuments/main.go) \n```\npackage mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 documentai \"cloud.google.com/go/documentai/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 documentaipb \"cloud.google.com/go/documentai/apiv1/documentaipb\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 // This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 \u00a0 \u00a0 // It will require modifications to work:\u00a0 \u00a0 \u00a0 \u00a0 // - It may require correct/in-range values for request initialization.\u00a0 \u00a0 \u00a0 \u00a0 // - It may require specifying regional endpoints when creating the service client as shown in:\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options\u00a0 \u00a0 \u00a0 \u00a0 c, err := documentai.NewDocumentProcessorClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Handle error.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer c.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &documentaipb.BatchProcessRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Fill request struct fields.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // See https://pkg.go.dev/cloud.google.com/go/documentai/apiv1/documentaipb#BatchProcessRequest.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 op, err := c.BatchProcessDocuments(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Handle error.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Handle error.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // TODO: Use resp.\u00a0 \u00a0 \u00a0 \u00a0 _ = resp}\n```For more information, see the [Document AI Java API reference documentation](/java/docs/reference/google-cloud-document-ai/latest/overview) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/document-ai/src/main/java/documentai/v1/BatchProcessDocument.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.api.gax.paging.Page;import com.google.cloud.documentai.v1.BatchDocumentsInputConfig;import com.google.cloud.documentai.v1.BatchProcessMetadata;import com.google.cloud.documentai.v1.BatchProcessRequest;import com.google.cloud.documentai.v1.BatchProcessResponse;import com.google.cloud.documentai.v1.Document;import com.google.cloud.documentai.v1.DocumentOutputConfig;import com.google.cloud.documentai.v1.DocumentOutputConfig.GcsOutputConfig;import com.google.cloud.documentai.v1.DocumentProcessorServiceClient;import com.google.cloud.documentai.v1.DocumentProcessorServiceSettings;import com.google.cloud.documentai.v1.GcsDocument;import com.google.cloud.documentai.v1.GcsDocuments;import com.google.cloud.storage.Blob;import com.google.cloud.storage.BlobId;import com.google.cloud.storage.Bucket;import com.google.cloud.storage.Storage;import com.google.cloud.storage.StorageOptions;import com.google.protobuf.util.JsonFormat;import java.io.File;import java.io.FileReader;import java.io.IOException;import java.util.List;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class BatchProcessDocument {\u00a0 public static void batchProcessDocument()\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, TimeoutException, ExecutionException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"your-project-id\";\u00a0 \u00a0 String location = \"your-project-location\"; // Format is \"us\" or \"eu\".\u00a0 \u00a0 String processerId = \"your-processor-id\";\u00a0 \u00a0 String outputGcsBucketName = \"your-gcs-bucket-name\";\u00a0 \u00a0 String outputGcsPrefix = \"PREFIX\";\u00a0 \u00a0 String inputGcsUri = \"gs://your-gcs-bucket/path/to/input/file.pdf\";\u00a0 \u00a0 batchProcessDocument(\u00a0 \u00a0 \u00a0 \u00a0 projectId, location, processerId, inputGcsUri, outputGcsBucketName, outputGcsPrefix);\u00a0 }\u00a0 public static void batchProcessDocument(\u00a0 \u00a0 \u00a0 String projectId,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String processorId,\u00a0 \u00a0 \u00a0 String gcsInputUri,\u00a0 \u00a0 \u00a0 String gcsOutputBucketName,\u00a0 \u00a0 \u00a0 String gcsOutputUriPrefix)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, TimeoutException, ExecutionException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs\u00a0 \u00a0 // to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your\u00a0 \u00a0 // requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background\u00a0 \u00a0 // resources.\u00a0 \u00a0 String endpoint = String.format(\"%s-documentai.googleapis.com:443\", location);\u00a0 \u00a0 DocumentProcessorServiceSettings settings =\u00a0 \u00a0 \u00a0 \u00a0 DocumentProcessorServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 try (DocumentProcessorServiceClient client = DocumentProcessorServiceClient.create(settings)) {\u00a0 \u00a0 \u00a0 // The full resource name of the processor, e.g.:\u00a0 \u00a0 \u00a0 // projects/project-id/locations/location/processor/processor-id\u00a0 \u00a0 \u00a0 // You must create new processors in the Cloud Console first\u00a0 \u00a0 \u00a0 String name =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String.format(\"projects/%s/locations/%s/processors/%s\", projectId, location, processorId);\u00a0 \u00a0 \u00a0 GcsDocument gcsDocument =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GcsDocument.newBuilder().setGcsUri(gcsInputUri).setMimeType(\"application/pdf\").build();\u00a0 \u00a0 \u00a0 GcsDocuments gcsDocuments = GcsDocuments.newBuilder().addDocuments(gcsDocument).build();\u00a0 \u00a0 \u00a0 BatchDocumentsInputConfig inputConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BatchDocumentsInputConfig.newBuilder().setGcsDocuments(gcsDocuments).build();\u00a0 \u00a0 \u00a0 String fullGcsPath = String.format(\"gs://%s/%s/\", gcsOutputBucketName, gcsOutputUriPrefix);\u00a0 \u00a0 \u00a0 GcsOutputConfig gcsOutputConfig = GcsOutputConfig.newBuilder().setGcsUri(fullGcsPath).build();\u00a0 \u00a0 \u00a0 DocumentOutputConfig documentOutputConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DocumentOutputConfig.newBuilder().setGcsOutputConfig(gcsOutputConfig).build();\u00a0 \u00a0 \u00a0 // Configure the batch process request.\u00a0 \u00a0 \u00a0 BatchProcessRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BatchProcessRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(name)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInputDocuments(inputConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDocumentOutputConfig(documentOutputConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<BatchProcessResponse, BatchProcessMetadata> future =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 client.batchProcessDocumentsAsync(request);\u00a0 \u00a0 \u00a0 // Batch process document using a long-running operation.\u00a0 \u00a0 \u00a0 // You can wait for now, or get results later.\u00a0 \u00a0 \u00a0 // Note: first request to the service takes longer than subsequent\u00a0 \u00a0 \u00a0 // requests.\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to complete...\");\u00a0 \u00a0 \u00a0 future.get();\u00a0 \u00a0 \u00a0 System.out.println(\"Document processing complete.\");\u00a0 \u00a0 \u00a0 Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\u00a0 \u00a0 \u00a0 Bucket bucket = storage.get(gcsOutputBucketName);\u00a0 \u00a0 \u00a0 // List all of the files in the Storage bucket.\u00a0 \u00a0 \u00a0 Page<Blob> blobs = bucket.list(Storage.BlobListOption.prefix(gcsOutputUriPrefix + \"/\"));\u00a0 \u00a0 \u00a0 int idx = 0;\u00a0 \u00a0 \u00a0 for (Blob blob : blobs.iterateAll()) {\u00a0 \u00a0 \u00a0 \u00a0 if (!blob.isDirectory()) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"Fetched file #%d\\n\", ++idx);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Read the results\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Download and store json data in a temp file.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 File tempFile = File.createTempFile(\"file\", \".json\");\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Blob fileInfo = storage.get(BlobId.of(gcsOutputBucketName, blob.getName()));\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fileInfo.downloadTo(tempFile.toPath());\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Parse json file into Document.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FileReader reader = new FileReader(tempFile);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Document.Builder builder = Document.newBuilder();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 JsonFormat.parser().merge(reader, builder);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Document document = builder.build();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Get all of the document text as one big string.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String text = document.getText();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Read the text recognition output from the processor\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"The document contains the following paragraphs:\");\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Document.Page page1 = document.getPages(0);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 List<Document.Page.Paragraph> paragraphList = page1.getParagraphsList();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (Document.Page.Paragraph paragraph : paragraphList) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String paragraphText = getText(paragraph.getLayout().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"Paragraph text:%s\\n\", paragraphText);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Form parsing provides additional output about\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // form-formatted PDFs. You must create a form\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // processor in the Cloud Console to see full field details.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"The following form key/value pairs were detected:\");\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (Document.Page.FormField field : page1.getFormFieldsList()) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String fieldName = getText(field.getFieldName().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String fieldValue = getText(field.getFieldValue().getTextAnchor(), text);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Extracted form fields pair:\");\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"\\t(%s, %s))\", fieldName, fieldValue);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Clean up temp file.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tempFile.deleteOnExit();\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 // Extract shards from the text field\u00a0 private static String getText(Document.TextAnchor textAnchor, String text) {\u00a0 \u00a0 if (textAnchor.getTextSegmentsList().size() > 0) {\u00a0 \u00a0 \u00a0 int startIdx = (int) textAnchor.getTextSegments(0).getStartIndex();\u00a0 \u00a0 \u00a0 int endIdx = (int) textAnchor.getTextSegments(0).getEndIndex();\u00a0 \u00a0 \u00a0 return text.substring(startIdx, endIdx);\u00a0 \u00a0 }\u00a0 \u00a0 return \"[NO TEXT]\";\u00a0 }}\n```For more information, see the [Document AI Node.js API reference documentation](/nodejs/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/document-ai/batch-process-document.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION'; // Format is 'us' or 'eu'// const processorId = 'YOUR_PROCESSOR_ID';// const gcsInputUri = 'YOUR_SOURCE_PDF';// const gcsOutputUri = 'YOUR_STORAGE_BUCKET';// const gcsOutputUriPrefix = 'YOUR_STORAGE_PREFIX';// Imports the Google Cloud client libraryconst {DocumentProcessorServiceClient} =\u00a0 require('@google-cloud/documentai').v1;const {Storage} = require('@google-cloud/storage');// Instantiates Document AI, Storage clientsconst client = new DocumentProcessorServiceClient();const storage = new Storage();const {default: PQueue} = require('p-queue');async function batchProcessDocument() {\u00a0 const name = `projects/${projectId}/locations/${location}/processors/${processorId}`;\u00a0 // Configure the batch process request.\u00a0 const request = {\u00a0 \u00a0 name,\u00a0 \u00a0 inputDocuments: {\u00a0 \u00a0 \u00a0 gcsDocuments: {\u00a0 \u00a0 \u00a0 \u00a0 documents: [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 gcsUri: gcsInputUri,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mimeType: 'application/pdf',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 \u00a0 documentOutputConfig: {\u00a0 \u00a0 \u00a0 gcsOutputConfig: {\u00a0 \u00a0 \u00a0 \u00a0 gcsUri: `${gcsOutputUri}/${gcsOutputUriPrefix}/`,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 };\u00a0 // Batch process document using a long-running operation.\u00a0 // You can wait for now, or get results later.\u00a0 // Note: first request to the service takes longer than subsequent\u00a0 // requests.\u00a0 const [operation] = await client.batchProcessDocuments(request);\u00a0 // Wait for operation to complete.\u00a0 await operation.promise();\u00a0 console.log('Document processing complete.');\u00a0 // Query Storage bucket for the results file(s).\u00a0 const query = {\u00a0 \u00a0 prefix: gcsOutputUriPrefix,\u00a0 };\u00a0 console.log('Fetching results ...');\u00a0 // List all of the files in the Storage bucket\u00a0 const [files] = await storage.bucket(gcsOutputUri).getFiles(query);\u00a0 // Add all asynchronous downloads to queue for execution.\u00a0 const queue = new PQueue({concurrency: 15});\u00a0 const tasks = files.map((fileInfo, index) => async () => {\u00a0 \u00a0 // Get the file as a buffer\u00a0 \u00a0 const [file] = await fileInfo.download();\u00a0 \u00a0 console.log(`Fetched file #${index + 1}:`);\u00a0 \u00a0 // The results stored in the output Storage location\u00a0 \u00a0 // are formatted as a document object.\u00a0 \u00a0 const document = JSON.parse(file.toString());\u00a0 \u00a0 const {text} = document;\u00a0 \u00a0 // Extract shards from the text field\u00a0 \u00a0 const getText = textAnchor => {\u00a0 \u00a0 \u00a0 if (!textAnchor.textSegments || textAnchor.textSegments.length === 0) {\u00a0 \u00a0 \u00a0 \u00a0 return '';\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 // First shard in document doesn't have startIndex property\u00a0 \u00a0 \u00a0 const startIndex = textAnchor.textSegments[0].startIndex || 0;\u00a0 \u00a0 \u00a0 const endIndex = textAnchor.textSegments[0].endIndex;\u00a0 \u00a0 \u00a0 return text.substring(startIndex, endIndex);\u00a0 \u00a0 };\u00a0 \u00a0 // Read the text recognition output from the processor\u00a0 \u00a0 console.log('The document contains the following paragraphs:');\u00a0 \u00a0 const [page1] = document.pages;\u00a0 \u00a0 const {paragraphs} = page1;\u00a0 \u00a0 for (const paragraph of paragraphs) {\u00a0 \u00a0 \u00a0 const paragraphText = getText(paragraph.layout.textAnchor);\u00a0 \u00a0 \u00a0 console.log(`Paragraph text:\\n${paragraphText}`);\u00a0 \u00a0 }\u00a0 \u00a0 // Form parsing provides additional output about\u00a0 \u00a0 // form-formatted PDFs. You \u00a0must create a form\u00a0 \u00a0 // processor in the Cloud Console to see full field details.\u00a0 \u00a0 console.log('\\nThe following form key/value pairs were detected:');\u00a0 \u00a0 const {formFields} = page1;\u00a0 \u00a0 for (const field of formFields) {\u00a0 \u00a0 \u00a0 const fieldName = getText(field.fieldName.textAnchor);\u00a0 \u00a0 \u00a0 const fieldValue = getText(field.fieldValue.textAnchor);\u00a0 \u00a0 \u00a0 console.log('Extracted key value pair:');\u00a0 \u00a0 \u00a0 console.log(`\\t(${fieldName}, ${fieldValue})`);\u00a0 \u00a0 }\u00a0 });\u00a0 await queue.addAll(tasks);}\n```For more information, see the [Document AI Python API reference documentation](/python/docs/reference/documentai/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/documentai/snippets/batch_process_documents_sample.py) \n```\nimport refrom typing import Optionalfrom google.api_core.client_options import ClientOptionsfrom google.api_core.exceptions import InternalServerErrorfrom google.api_core.exceptions import RetryErrorfrom google.cloud import documentai \u00a0# type: ignorefrom google.cloud import storage# TODO(developer): Uncomment these variables before running the sample.# project_id = \"YOUR_PROJECT_ID\"# location = \"YOUR_PROCESSOR_LOCATION\" # Format is \"us\" or \"eu\"# processor_id = \"YOUR_PROCESSOR_ID\" # Create processor before running sample# gcs_output_uri = \"YOUR_OUTPUT_URI\" # Must end with a trailing slash `/`. Format: gs://bucket/directory/subdirectory/# processor_version_id = \"YOUR_PROCESSOR_VERSION_ID\" # Optional. Example: pretrained-ocr-v1.0-2020-09-23# TODO(developer): You must specify either `gcs_input_uri` and `mime_type` or `gcs_input_prefix`# gcs_input_uri = \"YOUR_INPUT_URI\" # Format: gs://bucket/directory/file.pdf# input_mime_type = \"application/pdf\"# gcs_input_prefix = \"YOUR_INPUT_URI_PREFIX\" # Format: gs://bucket/directory/# field_mask = \"text,entities,pages.pageNumber\" \u00a0# Optional. The fields to return in the Document object.def batch_process_documents(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 processor_id: str,\u00a0 \u00a0 gcs_output_uri: str,\u00a0 \u00a0 processor_version_id: Optional[str] = None,\u00a0 \u00a0 gcs_input_uri: Optional[str] = None,\u00a0 \u00a0 input_mime_type: Optional[str] = None,\u00a0 \u00a0 gcs_input_prefix: Optional[str] = None,\u00a0 \u00a0 field_mask: Optional[str] = None,\u00a0 \u00a0 timeout: int = 400,) -> None:\u00a0 \u00a0 # You must set the `api_endpoint` if you use a location other than \"us\".\u00a0 \u00a0 opts = ClientOptions(api_endpoint=f\"{location}-documentai.googleapis.com\")\u00a0 \u00a0 client = documentai.DocumentProcessorServiceClient(client_options=opts)\u00a0 \u00a0 if gcs_input_uri:\u00a0 \u00a0 \u00a0 \u00a0 # Specify specific GCS URIs to process individual documents\u00a0 \u00a0 \u00a0 \u00a0 gcs_document = documentai.GcsDocument(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 gcs_uri=gcs_input_uri, mime_type=input_mime_type\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 # Load GCS Input URI into a List of document files\u00a0 \u00a0 \u00a0 \u00a0 gcs_documents = documentai.GcsDocuments(documents=[gcs_document])\u00a0 \u00a0 \u00a0 \u00a0 input_config = documentai.BatchDocumentsInputConfig(gcs_documents=gcs_documents)\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 # Specify a GCS URI Prefix to process an entire directory\u00a0 \u00a0 \u00a0 \u00a0 gcs_prefix = documentai.GcsPrefix(gcs_uri_prefix=gcs_input_prefix)\u00a0 \u00a0 \u00a0 \u00a0 input_config = documentai.BatchDocumentsInputConfig(gcs_prefix=gcs_prefix)\u00a0 \u00a0 # Cloud Storage URI for the Output Directory\u00a0 \u00a0 gcs_output_config = documentai.DocumentOutputConfig.GcsOutputConfig(\u00a0 \u00a0 \u00a0 \u00a0 gcs_uri=gcs_output_uri, field_mask=field_mask\u00a0 \u00a0 )\u00a0 \u00a0 # Where to write results\u00a0 \u00a0 output_config = documentai.DocumentOutputConfig(gcs_output_config=gcs_output_config)\u00a0 \u00a0 if processor_version_id:\u00a0 \u00a0 \u00a0 \u00a0 # The full resource name of the processor version, e.g.:\u00a0 \u00a0 \u00a0 \u00a0 # projects/{project_id}/locations/{location}/processors/{processor_id}/processorVersions/{processor_version_id}\u00a0 \u00a0 \u00a0 \u00a0 name = client.processor_version_path(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 project_id, location, processor_id, processor_version_id\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 # The full resource name of the processor, e.g.:\u00a0 \u00a0 \u00a0 \u00a0 # projects/{project_id}/locations/{location}/processors/{processor_id}\u00a0 \u00a0 \u00a0 \u00a0 name = client.processor_path(project_id, location, processor_id)\u00a0 \u00a0 request = documentai.BatchProcessRequest(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 input_documents=input_config,\u00a0 \u00a0 \u00a0 \u00a0 document_output_config=output_config,\u00a0 \u00a0 )\u00a0 \u00a0 # BatchProcess returns a Long Running Operation (LRO)\u00a0 \u00a0 operation = client.batch_process_documents(request)\u00a0 \u00a0 # Continually polls the operation until it is complete.\u00a0 \u00a0 # This could take some time for larger files\u00a0 \u00a0 # Format: projects/{project_id}/locations/{location}/operations/{operation_id}\u00a0 \u00a0 try:\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Waiting for operation {operation.operation.name} to complete...\")\u00a0 \u00a0 \u00a0 \u00a0 operation.result(timeout=timeout)\u00a0 \u00a0 # Catch exception when operation doesn't finish before timeout\u00a0 \u00a0 except (RetryError, InternalServerError) as e:\u00a0 \u00a0 \u00a0 \u00a0 print(e.message)\u00a0 \u00a0 # NOTE: Can also use callbacks for asynchronous processing\u00a0 \u00a0 #\u00a0 \u00a0 # def my_callback(future):\u00a0 \u00a0 # \u00a0 result = future.result()\u00a0 \u00a0 #\u00a0 \u00a0 # operation.add_done_callback(my_callback)\u00a0 \u00a0 # Once the operation is complete,\u00a0 \u00a0 # get output document information from operation metadata\u00a0 \u00a0 metadata = documentai.BatchProcessMetadata(operation.metadata)\u00a0 \u00a0 if metadata.state != documentai.BatchProcessMetadata.State.SUCCEEDED:\u00a0 \u00a0 \u00a0 \u00a0 raise ValueError(f\"Batch Process Failed: {metadata.state_message}\")\u00a0 \u00a0 storage_client = storage.Client()\u00a0 \u00a0 print(\"Output files:\")\u00a0 \u00a0 # One process per Input Document\u00a0 \u00a0 for process in list(metadata.individual_process_statuses):\u00a0 \u00a0 \u00a0 \u00a0 # output_gcs_destination format: gs://BUCKET/PREFIX/OPERATION_NUMBER/INPUT_FILE_NUMBER/\u00a0 \u00a0 \u00a0 \u00a0 # The Cloud Storage API requires the bucket name and URI prefix separately\u00a0 \u00a0 \u00a0 \u00a0 matches = re.match(r\"gs://(.*?)/(.*)\", process.output_gcs_destination)\u00a0 \u00a0 \u00a0 \u00a0 if not matches:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Could not parse output GCS destination:\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 process.output_gcs_destination,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 continue\u00a0 \u00a0 \u00a0 \u00a0 output_bucket, output_prefix = matches.groups()\u00a0 \u00a0 \u00a0 \u00a0 # Get List of Document Objects from the Output Bucket\u00a0 \u00a0 \u00a0 \u00a0 output_blobs = storage_client.list_blobs(output_bucket, prefix=output_prefix)\u00a0 \u00a0 \u00a0 \u00a0 # Document AI may output multiple JSON files per source file\u00a0 \u00a0 \u00a0 \u00a0 for blob in output_blobs:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Document AI should only output JSON files to GCS\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if blob.content_type != \"application/json\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 f\"Skipping non-supported file: {blob.name} - Mimetype: {blob.content_type}\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 continue\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Download JSON File as bytes object and convert to Document Object\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(f\"Fetching {blob.name}\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 document = documentai.Document.from_json(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 blob.download_as_bytes(), ignore_unknown_fields=True\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # For a full list of Document object attributes, please reference this page:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # https://cloud.google.com/python/docs/reference/documentai/latest/google.cloud.documentai_v1.types.Document\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Read the text recognition output from the processor\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"The document contains the following text:\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(document.text)\n```For more information, see the [Document AI Go API reference documentation](/go/docs/reference/cloud.google.com/go/documentai/latest/apiv1) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-php/blob/HEAD/DocumentAi/samples/V1/DocumentProcessorServiceClient/batch_process_documents.php) \n```\nuse Google\\ApiCore\\ApiException;use Google\\ApiCore\\OperationResponse;use Google\\Cloud\\DocumentAI\\V1\\BatchProcessRequest;use Google\\Cloud\\DocumentAI\\V1\\BatchProcessResponse;use Google\\Cloud\\DocumentAI\\V1\\Client\\DocumentProcessorServiceClient;use Google\\Rpc\\Status;/**\u00a0* LRO endpoint to batch process many documents. The output is written\u00a0* to Cloud Storage as JSON in the [Document] format.\u00a0*\u00a0* @param string $name The resource name of\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [Processor][google.cloud.documentai.v1.Processor] or\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [ProcessorVersion][google.cloud.documentai.v1.ProcessorVersion].\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Format: `projects/{project}/locations/{location}/processors/{processor}`,\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 or\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`\u00a0*/function batch_process_documents_sample(string $name): void{\u00a0 \u00a0 // Create a client.\u00a0 \u00a0 $documentProcessorServiceClient = new DocumentProcessorServiceClient();\u00a0 \u00a0 // Prepare the request message.\u00a0 \u00a0 $request = (new BatchProcessRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($name);\u00a0 \u00a0 // Call the API and handle any network failures.\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 \u00a0 /** @var OperationResponse $response */\u00a0 \u00a0 \u00a0 \u00a0 $response = $documentProcessorServiceClient->batchProcessDocuments($request);\u00a0 \u00a0 \u00a0 \u00a0 $response->pollUntilComplete();\u00a0 \u00a0 \u00a0 \u00a0 if ($response->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 /** @var BatchProcessResponse $result */\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $result = $response->getResult();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf('Operation successful with response data: %s' . PHP_EOL, $result->serializeToJsonString());\u00a0 \u00a0 \u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 /** @var Status $error */\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $error = $response->getError();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf('Operation failed with error data: %s' . PHP_EOL, $error->serializeToJsonString());\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 } catch (ApiException $ex) {\u00a0 \u00a0 \u00a0 \u00a0 printf('Call failed with message: %s' . PHP_EOL, $ex->getMessage());\u00a0 \u00a0 }}/**\u00a0* Helper to execute the sample.\u00a0*\u00a0* This sample has been automatically generated and should be regarded as a code\u00a0* template only. It will require modifications to work:\u00a0* \u00a0- It may require correct/in-range values for request initialization.\u00a0* \u00a0- It may require specifying regional endpoints when creating the service client,\u00a0* \u00a0 \u00a0please see the apiEndpoint client configuration option for more details.\u00a0*/function callSample(): void{\u00a0 \u00a0 $name = '[NAME]';\u00a0 \u00a0 batch_process_documents_sample($name);}\n```For more information, see the [Document AI Ruby API reference documentation](/ruby/docs/reference/google-cloud-document_ai-v1/latest) .\nTo authenticate to Document AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-document_ai-v1/snippets/document_processor_service/batch_process_documents.rb) \n```\nrequire \"google/cloud/document_ai/v1\"\n### Snippet for the batch_process_documents call in the DocumentProcessorService service\n## This snippet has been automatically generated and should be regarded as a code# template only. It will require modifications to work:# - It may require correct/in-range values for request initialization.# - It may require specifying regional endpoints when creating the service# client as shown in https://cloud.google.com/ruby/docs/reference.\n## This is an auto-generated example demonstrating basic usage of# Google::Cloud::DocumentAI::V1::DocumentProcessorService::Client#batch_process_documents.#def batch_process_documents\u00a0 # Create a client object. The client can be reused for multiple calls.\u00a0 client = Google::Cloud::DocumentAI::V1::DocumentProcessorService::Client.new\u00a0 # Create a request. To set request fields, pass in keyword arguments.\u00a0 request = Google::Cloud::DocumentAI::V1::BatchProcessRequest.new\u00a0 # Call the batch_process_documents method.\u00a0 result = client.batch_process_documents request\u00a0 # The returned object is of type Gapic::Operation. You can use it to\u00a0 # check the status of an operation, cancel it, or wait for results.\u00a0 # Here is how to wait for a response.\u00a0 result.wait_until_done! timeout: 60\u00a0 if result.response?\u00a0 \u00a0 p result.response\u00a0 else\u00a0 \u00a0 puts \"No response received.\"\u00a0 endend\n```\n### Create document batches with Python SDK\nBatch processing allows a [maximum of 1,000 files per request](/document-ai/quotas) . If you have more documents to process, then you must divide the documents into multiple batches for processing.\n[Document AI Toolbox](/document-ai/docs/toolbox) is an SDK for Python that provides utility functions for Document AI. One of the functions is to create batches of documents for processing from a Cloud Storage folder.\nRefer to [Handling the processing response](/document-ai/docs/handle-response#toolbox) for more information on how Document AI Toolbox assists with post-processing.\nThe following code samples demonstrate how to use Document AI Toolbox.\n[View on GitHub](https://github.com/googleapis/python-documentai-toolbox/blob/HEAD/samples/snippets/create_batches_sample.py) \n```\nfrom google.cloud import documentaifrom google.cloud.documentai_toolbox import gcs_utilities# TODO(developer): Uncomment these variables before running the sample.# Given unprocessed documents in path gs://bucket/path/to/folder# gcs_bucket_name = \"bucket\"# gcs_prefix = \"path/to/folder\"# batch_size = 50def create_batches_sample(\u00a0 \u00a0 gcs_bucket_name: str,\u00a0 \u00a0 gcs_prefix: str,\u00a0 \u00a0 batch_size: int = 50,) -> None:\u00a0 \u00a0 # Creating batches of documents for processing\u00a0 \u00a0 batches = gcs_utilities.create_batches(\u00a0 \u00a0 \u00a0 \u00a0 gcs_bucket_name=gcs_bucket_name, gcs_prefix=gcs_prefix, batch_size=batch_size\u00a0 \u00a0 )\u00a0 \u00a0 print(f\"{len(batches)} batch(es) created.\")\u00a0 \u00a0 for batch in batches:\u00a0 \u00a0 \u00a0 \u00a0 print(f\"{len(batch.gcs_documents.documents)} files in batch.\")\u00a0 \u00a0 \u00a0 \u00a0 print(batch.gcs_documents.documents)\u00a0 \u00a0 \u00a0 \u00a0 # Use as input for batch_process_documents()\u00a0 \u00a0 \u00a0 \u00a0 # Refer to https://cloud.google.com/document-ai/docs/send-request\u00a0 \u00a0 \u00a0 \u00a0 # for how to send a batch processing request\u00a0 \u00a0 \u00a0 \u00a0 request = documentai.BatchProcessRequest(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name=\"processor_name\", input_documents=batch\u00a0 \u00a0 \u00a0 \u00a0 )\n```", "guide": "Document AI"}