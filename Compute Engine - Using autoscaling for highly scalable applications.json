{"title": "Compute Engine - Using autoscaling for highly scalable applications", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Using autoscaling for highly scalable applications\nThis tutorial explains how to use [autoscaling](/compute/docs/autoscaler) to automatically adjust the number of VM instances that are hosting your application, allowing your application to adapt to varying amounts of traffic.\nTo use autoscaling, host your application on a managed instance group. A [managed instance group](/compute/docs/instance-groups) is a collection of instances that are all running the same application and can be managed as a single entity. When a managed instance group has autoscaling enabled, the number of VMs in the instance group automatically increases (scales out) or decreases (scales in) according to the [target value](/compute/docs/autoscaler#autoscaling_policy) that you specify for your autoscaling policy.\nThis tutorial includes detailed steps for launching a web application on a managed instance group, setting up autoscaling, configuring network access, and observing autoscaling by simulating load spikes and drops. Depending on your experience with these features, this tutorial takes about 20 minutes to complete.", "content": "## Objectives\n- Launch a demo web application on a managed instance group.\n- Observe the effects of autoscaling by simulating traffic spikes and drops.\n## CostsIn this document, you use the following billable components of Google Cloud:- Compute Engine\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . ## Before you begin\n## Application architectureThe application includes the following Compute Engine components:- [Firewall rule](/vpc/docs/firewalls) : a Google Cloud firewall that lets you allow or deny traffic to your instances.\n- [Instance template](/compute/docs/instance-templates) : a template used to create each VM instance in the managed instance group.\n- [Regional managed instance group](/compute/docs/instance-groups#managed_instance_groups) : a group of VM instances running the same application across multiple zones.\n## Launching the web applicationThis tutorial uses a web application that is stored on GitHub. If you would like learn more about how the application was implemented, see the [GoogleCloudPlatform/python-docs-samples](https://github.com/GoogleCloudPlatform/python-docs-samples/tree/master/compute/managed-instances/demo) repository on GitHub.\nLaunch the web application on every VM in a managed instance group by including a startup script in an instance template. To allow HTTP traffic to the web application, create a firewall rule.\n### Create a firewall rule **Note:** This firewall rule allows ingress HTTP traffic for all instances that are on the default network and have the `http-server` networking tag.\nCreate a firewall rule to allow HTTP traffic to the web application:- In the Google Cloud console, go to the **Firewalls** page. [Go to Firewalls](https://console.cloud.google.com/networking/firewalls/list) \n- Click **Create firewall rule** .\n- Under **Name** , enter `default-allow-http` .\n- Set **Network** to `default` .\n- Set **Targets** to select `Specified target tags` .\n- Under **Target Tags** , enter `http-server` .\n- Set **Source filter** to `IP ranges` .\n- Under **Source IP ranges** , enter `0.0.0.0/0`to allow access for all IP addresses.\n- Under **Ports and protocols** , select **Specified protocols and ports** . Then, select **tcp** and enter `80` to [allow access for HTTP traffic](/load-balancing/docs/https/setting-up-https) .\n- Click **Create** .\n### Create an instance templateCreate an instance template that launches the demo web application on startup:- In the Google Cloud console, go to the **Instance templates** page. [Go to Instance templates](https://console.cloud.google.com/compute/instanceTemplates) \n- Click **Create instance template** .\n- Under **Name** , enter `autoscaling-web-app-template` .\n- Under **Machine configuration** , set the **Machine type** to `e2-standard-2` .\n- Under **Firewall** , select the **Allow HTTP traffic** checkbox. This applies the `http-server` networking tag to each instance created from this template.\n- Click **Networking, disks, security, management, sole tenancy** to see advanced settings.\n- Under the **Management** tab, find **Automation** and enter the following **Startup script** :```\nsudo apt update && sudo apt -y install git gunicorn3 python3-pip\ngit clone https://github.com/GoogleCloudPlatform/python-docs-samples.git\ncd python-docs-samples/compute/managed-instances/demo\nsudo pip3 install -r requirements.txt\nsudo gunicorn3 --bind 0.0.0.0:80 app:app --daemon\n```This script causes each instance to run the web application during startup.\n- Click **Create** .\n### Create a managed instance groupCreate a regional instance group to begin running the web application:- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups/) \n- Click **Create instance group** to create a new instance group.\n- Select **New managed instance group (stateless)** .\"\n- For **Name** , enter `autoscaling-web-app-group` .\n- For **Instance template** , select `autoscaling-web-app-template` .\n- For **Location** , select **Multiple zones** . **Pro Tip:** To ensure your application is available during extreme events, like zonal outages, Compute Engine recommends that you [ distribute your application across multiple zones](/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups) .\n- For **Region** , select **us-central1** .\n- For **Zones** , select the following zones from the drop-down list:- **us-central1-b** \n- **us-central1-c** \n- **us-central1-f** \n- Configure autoscaling for the instance group:- For **Autoscaling mode** , select **On: add and remove instances to\nthe group** .\n- Set the **Minimum number of instances** to `3` . **Pro Tip:** When creating a regional managed instance group, Compute Engine recommends that you provision enough instances so that, if all of the instances in any one zone are unavailable, the remaining instances still meet the minimum number of instances that you require. However, provisioning more instances than you need might incur additional costs. For more information, see [Selecting instance group size to ensure availability](/compute/docs/instance-groups/regional-migs#overprovision) .\n- Set the **Maximum number of instances** to `6` .\n- Set the **Initialization period** to `120` seconds. **Pro Tip:** The **initialization period** is the number of seconds after an instance is created that the autoscaler should wait before using information about the instance for scaling decisions. When a VM is initializing, the CPU usage is not reliable for autoscaling. To prevent the autoscaler from scaling based on inaccurate data, make sure the initialization period is longer than the time than the time it takes for the CPU utilization of your VM to initially stabilize. For more information, see [Initialization period](/compute/docs/autoscaler#cool_down_period) and [Monitoring autoscaling chartsand logs](/compute/docs/autoscaler/understanding-autoscaler-decisions#monitoring_autoscaling_charts_and_logs) .\n- Under **Autoscaling Metrics** , select **CPU utilization** as the metric type. To learn more about autoscaling metrics, see [Autoscaling policy](/compute/docs/autoscaler#autoscaling_policy) .\n- Set the **Target CPU utilization** to `60` .\n- Click **Done** .\n- Under **Autohealing** , select **No health check** from the **Health check** drop-down list.\n- Click **Create** . This redirects you to the **Instance groups** page. **Note:** Wait a few minutes until all of the instances in the group are running and ready to display the web application.\n- To verify that your instances are running:- On the **Instance groups** page in the Google Cloud console, click`autoscaling-web-app-group`to see the instances in that group.\n- Under **External IP** , click on an IP address to connect that instance. A new browser tab opens displaying the demo web application: **Note:** If you are unable to connect to the web application after waiting a few minutes, verify the instance status and network settings:- Verify that the instance group is ready. If the application fails to  load with an ERR_CONNECTION_REFUSED status, wait a few minutes for  the startup script to finish running.\n- Verify that the group's instance template  has **Allow HTTP traffic** enabled. Then, verify that`allow-web-app-http`firewall rule was created  correctly.\nWhen you are done, close the browser tab for the demo web application.## Observing autoscalingFor more information about autoscaling behaviors, see [Understanding autoscaling decisions](/compute/docs/autoscaler/understanding-autoscaler-decisions) .\n### Monitor autoscalingThe instance group you created uses an **Autoscaling policy** based on **CPU usage** . This means that autoscaler grows or shrinks the group as needed to maintain the target CPU utilization of `60` %.\nTo monitor the size and CPU utilization of your instance group, use the [autoscaling charts](/compute/docs/autoscaler/understanding-autoscaler-decisions#monitoring_autoscaling_charts_and_logs) in the Google Cloud console:- On the **Instance groups** page for the`autoscaling-web-app-group`instance group, click the **Monitoring** tab.\n- You can monitor autoscaling from the **Group size** chart. The graph displays **Instances** , which represents the number of VM instances in the group over time.\n- Optional: To monitor autoscaled capacity versus utilization, see the **Autoscaler utilization (CPU)** chart. The graph displays **Utilization** , which is the total CPU utilization of VM instances in the group, and **Capacity** , which is the cumulative target CPU utilization of the group (target CPU utilization multiplied by the number of VM instances).Autoscaling attempts to make **Capacity** match **Utilization** by changing the number of **Instances** , when possible.\nKeep this window open.\n### Simulate scale outScale out occurs when the average CPU utilization of the instance group is significantly higher than the target value. During scale out, autoscaler gradually increases the size of the instance group until CPU utilization decreases to the target CPU utilization value or until the instance group size equals the **Maximum number of instances** , which was set to `6` .\nTo trigger scale out, increase the CPU utilization for your instances:- In the Google Cloud console, open [Cloud Shell](/shell/docs) . [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) Cloud Shell opens on the bottom of the Google Cloud console. It can take a few seconds for the session to initialize. **Pro Tip:** You can open the Cloud Shell from any Google Cloud console page using the **Activate Cloud Shell** button, which is in the top right corner of every Google Cloud console page.\n- Create a local bash variable for the project ID:```\nexport PROJECT_ID=[PROJECT_ID]\n```where `` is the project ID for your current project, which is displayed on each new line in the Cloud Shell:```\nuser@cloudshell:~ ([PROJECT_ID])$\n```\n- Run the following bash script. This script causes the demo web application instances to have an increased load, which increases CPU utilization. After a few minutes, the CPU utilization will surpass the target value, prompting the autoscaling to increase the instance group size.```\nexport MACHINES=$(gcloud --project=$PROJECT_ID compute instances list --format=\"csv(name,networkInterfaces[0].accessConfigs[0].natIP)\" | grep \"autoscaling-web-app-group\")\nfor i in $MACHINES;\ndo\n NAME=$(echo \"$i\" | cut -f1 -d,)\n IP=$(echo \"$i\" | cut -f2 -d,)\n echo \"Simulating high load for instance $NAME\"\n curl -q -s \"http://$IP/startLoad\" >/dev/null --retry 2\ndone\n```\n- Open the **Monitoring** tab in the Google Cloud console.After a few minutes, the **Monitoring** tab displays that the CPU **Utilization** increased, which triggers autoscaling to increase **Capacity** by increasing the number of **Instances** . **Note:** You might need to refresh the page to see the most recent chart.You might also notice that 6 instances are now listed under the **Overview** tab.\nKeep both windows open.\n### Simulate scale inScale in occurs when the average CPU utilization of the instance group is significantly lower than the target value. During scale in, autoscaler gradually decreases the size of the instance group until CPU utilization increases to the target CPU utilization or until the instance group size equals the **Minimum number of instances** , which was set to `3` .\n **Note:** To prevent preemptive scale in, the autoscaler calculates the group's recommended target size based on peak load over the stabilization period. The stabilization period might appear as a delay in scaling in, but it is actually a built-in feature of autoscaling. The delay ensures that the smaller group size will be enough to support peak load observed during the stabilization period. For more information about the stabilization period, see [Delays in scaling in](/compute/docs/autoscaler/understanding-autoscaler-decisions#delays_in_scaling_in) .\nTo trigger scale in, decrease the CPU utilization for your instances:- Run the following bash script. This script causes the demo web application instances to have a decreased load, which decreases CPU utilization. After a few minutes, the CPU utilization will fall below the target value, prompting the autoscaler to decrease the instance group size.```\nexport MACHINES=$(gcloud --project=$PROJECT_ID compute instances list --format=\"csv(name,networkInterfaces[0].accessConfigs[0].natIP)\" | grep \"autoscaling-web-app-group\")\nfor i in $MACHINES;\ndo\n NAME=$(echo \"$i\" | cut -f1 -d,)\n IP=$(echo \"$i\" | cut -f2 -d,)\n echo \"Simulating low load for instance $NAME\"\n curl -q -s \"http://$IP/stopLoad\" >/dev/null --retry 2\ndone\n```\n- Open the **Monitoring** tab in the Google Cloud console.After a few minutes, the **Monitoring** tab displays that the CPU **Utilization** decreased. After the [stabilization period](/compute/docs/autoscaler#stabilization_period) , which verifies that the load is consistently less, autoscaling decreases **Capacity** by decreasing the number of **Instances** . **Note:** You might need to refresh the page to see the most recent chart.You might also notice that only 3 instances are listed under the **Overview** tab.\nClose both windows when you have finished.## Clean up\nAfter you finish the tutorial, you can clean up the resources that you created so that they stop using quota and incurring charges. The following sections describe how to delete or turn off these resources.If you created a separate project for this tutorial, delete the entire project. Otherwise, if the project has resources that you want to keep, only delete the resources created in this tutorial.\n### Deleting the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n### Deleting specific resources- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups/list) \n- Select the checkbox for   your`autoscaling-web-app-group`instance group.\n- To delete the instance group, clickdelete **Delete** .\n **Note:** You must finish deleting the instance group before deleting the instance template. You cannot delete an instance template if a managed instance group is using it.- In the Google Cloud console, go to the **Instance templates** page. [Go to Instance templates](https://console.cloud.google.com/compute/instanceTemplates) \n- Click the checkbox next to the `autoscaling-web-app-template` .\n- Click delete **Delete** at the top of the page. In the new window, click **Delete** to confirm the deletion.\n- In the Google Cloud console, go to the **Firewall rules** page. [Go to Firewall rules](https://console.cloud.google.com/networking/firewalls) \n- Click the checkbox next to the firewall rule named `default-allow-http` .\n- Click delete **Delete** at the top of the page. In the new window, click **Delete** to confirm the deletion.\n## What's next\n- Try another tutorial:- [Using autohealing for highly available applications](/compute/docs/tutorials/high-availability-autohealing) .\n- [Using load balancing for highly available applications](/compute/docs/tutorials/high-availability-load-balancing) .\n- Learn more about [Managed Instance Groups](/compute/docs/instance-groups) .\n- Learn more about [Autoscaling](/compute/docs/autoscaler) .\n- Learn more about [Designing Robust Systems](/compute/docs/tutorials/robustsystems) .\n- Learn more about [Building Scalable and Resilient Web Applications on Google Cloud](/solutions/scalable-and-resilient-apps) .", "guide": "Compute Engine"}