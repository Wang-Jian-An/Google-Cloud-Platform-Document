{"title": "Apigee - Troubleshooting", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Troubleshooting\n", "content": "## \n Istio 404 (Not Found) error\nDebugging a 404 (Not Found) error on Istio can be frustrating. Hopefully this will give you a place to start tracking down where things may be going wrong.\n### Wildcard Gateway conflict\nThere can be only one Gateway definition that uses a wildcard \"*\" hosts value. If you've deployed anything else that includes a wildcard Gateway, client calls will fail with a 404 status.\nExample:\n```\n$ istioctl get gateways\nGATEWAY NAME   HOSTS  NAMESPACE AGE\nbookinfo-gateway  *   default  20s\nhttpbin-gateway  *   default  3s\n```\nIf so, you'll need to delete or change one of the conflicting gateways.\n## Search for where the route is failing\nIstio is like an onion (or, perhaps, an Ogre), it has layers. A systematic way to debug a 404 is to work outward from the target.\n### The backend workload\nVerify you can access the workload from the sidecar:\n```\nkubectl exec $WORKLOAD_POD -c istio-proxy -- curl localhost:80/headers\n```\n### The backend sidecar\nSet your service address and get the IP address of the workload pod.\n```\nSERVICE=httpbin.default.svc.cluster.local:80\n POD_IP=$(kubectl get pod $WORKLOAD_POD -o jsonpath='{.status.podIP}')\n```\nAccess the workload through the sidecar:\n```\nkubectl exec $WORKLOAD_POD -c istio-proxy -- curl -v http://$SERVICE/headers --resolve \"$SERVICE:$POD_IP\"\n```\nOr, if Istio mTLS is enabled:\n```\nkubectl exec $WORKLOAD_POD -c istio-proxy -- curl -v https://$SERVICE/headers --resolve \"$SERVICE:$POD_IP\" --key /etc/certs/key.pem --cert /etc/certs/cert-chain.pem --cacert /etc/certs/root-cert.pem --insecure\n```\n### The gateway (or a frontend sidecar)\nAccess the service from the gateway:\n```\nkubectl -n istio-system exec $GATEWAY_POD -- curl -v http://$SERVICE/header\n```\nOr, if Istio mTLS is enabled:\n```\nkubectl -n istio-system exec $GATEWAY_POD -- curl -v https://$SERVICE/headers --key /etc/certs/key.pem --cert /etc/certs/cert-chain.pem --cacert /etc/certs/root-cert.pem --insecure\n```\n## \n Missing analytics\nIf you aren't seeing analytics in the Analytics UI, consider these possible causes:\n- Apigee intake can be delayed a few minutes\n- Envoy gRPC Access Log not configured correctly\n- Envoy cannot reach Remote Service\n- Remote Service is failing upload## \n Missing or bad API key not being rejected\nIf API key validation is not working properly, consider these possible causes:\n**Direct proxy**\nCheck the `ext-authz` configuration.\n**Sidecar**\n- Be sure listener is configured for intercept.\n- Check the`ext-authz`configuration.\n**Invalid requests are being checked and allowed**\n- Remote Service configured for fail open\n- Envoy not configured for RBAC checks\nFor information on how to address these issues, refer to the following Envoy documentation topic: [External Authorization](https://www.envoyproxy.io/docs/envoy/v1.15.0/api-v3/extensions/filters/http/ext_authz/v3/ext_authz.proto.html) , and refer to information about the `failure_mode_allow` property. This property allows you to change the filter's behavior on errors.\n## \n Missing or bad JWT not being rejected\nThe probable cause is that the Envoy JWT filter is not configured.\n## \n Valid API key fails\n### Probable causes\n- Envoy cannot reach the remote service\n- Your credentials are not valid\n- Apigee API Product not configured for target and env\n### \n Troubleshooting steps- The product must be bound to the same environment as your Remote Service.\n- Check the **Apigee remote service targets** section. Remember, the service name must be a fully qualified host name. If it's an Istio service, the name will be something like `helloworld.default.svc.cluster.local` code> - which represents the `helloworld` service in the `default` namespace.\n- Remember, a path like `/` or `/**` will match any path. You may also use '*' or '**' wildcards for matching.\n- The API Product must be bound to a Developer App to check its keys.- Example:```\ncurl http://localhost/hello -H \"x-api-key: wwTcvmHvQ7Dui2qwj43GlKJAOwmo\"\n```\n- Ensure the Credentials from the App you're using are approved for your API Product.- Use `-l debug` option on the command line.\n- Check the logs for a line that looks something like this:```\nResolve api: helloworld.default.svc.cluster.local, path: /hello, scopes: []\nSelected: [helloworld]\nEliminated: [helloworld2 doesn't match path: /hello]\n```", "guide": "Apigee"}