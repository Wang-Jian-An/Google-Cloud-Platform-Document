{"title": "Compute Engine - Configuring options to run your container", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Configuring options to run your container\n", "content": "## Before you begin\n- If you aren't familiar with containers, read [Containers on Compute Engine](/containers) .\n- If you aren't familiar with Docker, read the [Docker documentation](https://docs.docker.com/) .\n- Read about [Deploying containers on Compute Engine](/compute/docs/containers/deploying-containers) .\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nWhen you create an instance or an instance template to use for [Deploying containers on VMs and MIGs](/compute/docs/containers/deploying-containers) , specify the container configuration using the Google Cloud console or the Google Cloud CLI.\nThe following sections describe how to configure options for VM instances, but you can configure the following options when creating an instance template as well. Use the Google Cloud console or the Google Cloud CLI to configure options for VM instances in an instance template.\n- Go to the **Create an instance template** page. [Go to Create an instance template](https://console.cloud.google.com/compute/instanceTemplates/add) .\n- In the **Container** section, select the **Deploy a container image tothis VM instance** checkbox and expand **Advanced container options** .\n- In the Google Cloud CLI, use the [gcloud compute instance-templates create-with-container](/sdk/gcloud/reference/compute/instances/create-with-container) command as shown in the following examples.## Specifying a restart policy\nYou can set a restart policy to specify whether to restart a container on exit. The default policy is to always restart. You can also set the policy to restart on failure or to never restart.\n**Note:** This is similar to the `--restart` flag of the `docker run` command. Repeated attempts to restart a container are driven by the default Docker behavior, as specified in the Docker [--restart](https://docs.docker.com/engine/reference/run/#restart-policies-restart) reference.\n- Go to the **Create an instance** page. [Go to Create an instance](https://console.cloud.google.com/compute/instancesAdd) \n- In the **Container** section, click **Deploy container** .\n- On the **Configure container** page, do the following:- Specify a container image name.\n- In the **Restart policy** section, select the restart policy for the container.\n- To confirm the container details, click **Select** .\n- Continue with the VM creation process.\nUse the `--container-restart-policy` flag to specify container a restart policy:- `always`(default)\n- `on-failure`\n- `never`\nThe following example launches a container with `on-failure` restart policy, which means the restart only happens when the container exit code is nonzero:\n```\ngcloud compute instances create-with-container busybox-vm \\\n --container-image docker.io/busybox:1.27 \\\n --container-restart-policy on-failure\n```\nUse the `gcloud compute instances update-container` command with the `--container-restart-policy` flag for the restart policy on a container running on a VM.\n## Running a container in privileged mode\nYou can run a container in privileged mode to allow access to all devices on the host. Containers are run as \"unprivileged\" by default and aren't allowed to access any devices.\n**Note:** This is equivalent of using the `--privileged` flag of the `docker run` command. Learn about [container runtime privilege](https://docs.docker.com/engine/reference/run#runtime-privilege-and-linux-capabilities) .\n- Go to the **Create an instance** page. [Go to Create an instance](https://console.cloud.google.com/compute/instancesAdd) \n- In the **Container** section, click **Deploy container** .\n- On the **Configure container** page, do the following:- Specify a container image name.\n- Select **Run as privileged** .\n- To confirm the container details, click **Select** .\n- Continue with the VM creation process.\nUse the `--container-privileged` flag to run a container with runtime privilege. The following example launches a busybox container in privileged mode:\n```\ngcloud compute instances create-with-container busybox-vm \\\n --container-image docker.io/busybox:1.27 \\\n --container-privileged\n```\nUse the `gcloud compute instances update-container` command with the `--container-privileged` flag to update a container on a VM. Use the `--no-container-privileged` flag to turn off privileged mode.\n## Allocating a buffer for STDIN in the container runtime\nYou can allocate a buffer for `STDIN` in the container runtime to keep the `STDIN` stream open in a container. If this is not set, reads from `STDIN` in the container always result in `EOF` .\nAlong with [allocating a pseudo-TTY](#pseudotty) , keeping the `STDIN` stream open is necessary for establishing an interactive shell in the container and for the container to receive its standard input from a pipe.\n**Note:** This is equivalent of the `--interactive` ( `-i` ) flag of the `docker run` command. Learn about the [--interactive](https://docs.docker.com/engine/reference/run/#foreground) flag.\n- Go to the **Create an instance** page. [Go to Create an instance](https://console.cloud.google.com/compute/instancesAdd) \n- In the **Container** section, click **Deploy container** .\n- On the **Configure container** page, do the following:- Specify a container image name.\n- Select **Allocate a buffer for STDIN** .\n- To confirm the container details, click **Select** .\n- Continue with the VM creation process.\nUse `--container-stdin` flag to allocate a buffer for `STDIN` in the container runtime. The following example starts a container and keeps its `STDIN` open:\n```\ngcloud compute instances create-with-container busybox-vm \\\n --container-image docker.io/busybox:1.27 \\\n --container-stdin\n```\nUse `gcloud compute instances update-container` command with the `--container-stdin` flag to update a container on a VM. Use the `--no-container-stdin` flag to turn off allocation of a buffer for `STDIN` .\n## Allocating a pseudo-TTY\nAllocating a pseudo-TTY for a container is necessary for establishing an interactive shell in the container (along with [allocating a buffer for STDIN](#bufferstdin) ).\n**Note:** This is equivalent of the `--tty (-t)` flag of the `docker run` command. Learn about the [--tty](https://docs.docker.com/engine/reference/commandline/run/#assign-name-and-allocate-pseudo-tty-name--it) flag.\n- Go to the **Create an instance** page. [Go to Create an instance](https://console.cloud.google.com/compute/instancesAdd) \n- In the **Container** section, click **Deploy container** .\n- On the **Configure container** page, do the following:- Specify a container image name.\n- Select **Allocate a pseudo-TTY** .\n- To confirm the container details, click **Select** .\n- Continue with the VM creation process.\nUse the `--container-tty` flag to allocate a pseudo-TTY. The following example starts a container and allocates a pseudo-TTY:\n```\ngcloud compute instances create-with-container busybox-vm \\\n --container-image docker.io/busybox:1.27 \\\n --container-stdin \\\n --container-tty\n```\nUse the `gcloud compute instances update-container` command with the `--container-tty` flag to update a container on a VM. Use the `--no-container-tty` flag to not allocate a pseudo-TTY.\n## Overriding the default command to execute on container startup\nThe `ENTRYPOINT` of a container image specifies what executable to run when the container starts and lets you run the container as if it were that binary.\nYou can override the `ENTRYPOINT` command of the container image.\n**Note:** This is similar to the `--entrypoint` flag (command only, no arguments) of the `docker run` command. Learn about [ENTRYPOINT](https://docs.docker.com/engine/reference/builder#entrypoint) and the [--entrypoint](https://docs.docker.com/engine/reference/run#entrypoint-default-command-to-execute-at-runtime) flag.\n- Go to the **Create an instance** page. [Go to Create an instance](https://console.cloud.google.com/compute/instancesAdd) \n- In the **Container** section, click **Deploy container** .\n- On the **Configure container** page, do the following:- Specify a container image name.\n- In the **Command** field, enter a single executable command without parameters\u2014for example,`uptime`.\n- To confirm the container details, click **Select** .\n- Continue with the VM creation process.\nUse the `--container-command` flag to override the container image `ENTRYPOINT` . The following example runs the `uptime` command in a busybox container to display the time since the last boot:\n```\ngcloud compute instances create-with-container busybox-vm \\\n --container-image docker.io/busybox:1.27 \\\n --container-command \"uptime\"\n```\nUse the `gcloud compute instances update-container` command with the `--container-command` flag to update a command for a container on a VM.\nUse the `--clear-container-command` flag with the `update-container` command to clear the default command for the updated container.\n## Passing arguments to container ENTRYPOINT command\nYou can pass (append) arguments to the container [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) command or override the default container [CMD](https://docs.docker.com/engine/reference/run#cmd-default-command-or-options) command.\n**Note:** This is similar to passing arguments to an entrypoint in the `[ARG...]` section of the `docker run [OPTIONS] IMAGE [COMMAND] [ARG...]` command. Learn about [ENTRYPOINT](https://docs.docker.com/engine/reference/builder#entrypoint) and the [--entrypoint](https://docs.docker.com/engine/reference/run#entrypoint-default-command-to-execute-at-runtime) flag.\n- Go to the **Create an instance** page. [Go to Create an instance](https://console.cloud.google.com/compute/instancesAdd) \n- In the **Container** section, click **Deploy container** .\n- On the **Configure container** page, do the following:- Specify a container image name.\n- In the **Arguments** section, click **Add argument** .\n- Enter one command argument for each box.\n- To confirm the container details, click **Select** .\n- Continue with the VM creation process.\nUse the `--container-arg` flag to pass arguments to a container image `ENTRYPOINT` command. Use a separate flag for each argument.\nThe following example runs the `/bin/ash` command with the `-c 'ls -l'` arguments in a container that has been set up to automatically run busybox:\n```\ngcloud compute instances create-with-container busybox-vm \\\n --container-image docker.io/busybox:1.27 \\\n --container-command \"/bin/ash\" \\\n --container-arg=\"-c\" \\\n --container-arg=\"ls -l\"\n```\n **Note:** Make sure to use the equals sign ( `=` ) with the `--container-arg` flag to ensure proper argument parsing. For example: `--container-arg=` `` .\nUse the `gcloud compute instances update-container` command with the `--container-arg` flags to update command arguments for a container running on a VM. The update replaces the entire argument list with the new list.\nUse the `--clear-container-args` flag with the `update-container` command to remove all arguments from container declaration.\n## Configuring log driver options\nIf you need to configure log driver options, you can create a VM [startup script](/compute/docs/instances/startup-scripts) to update your Docker configuration file with the logging options that you need. These options apply to all containers that run on the VM and that do not specify log driver options.\nFor example, the following startup script sets several options\u2013including an option to limit the container's log size\u2013then restarts Docker on the VM:\n```\ncat <<EOF > /etc/docker/daemon.json\n{\n \"live-restore\": true,\n \"storage-driver\": \"overlay2\",\n \"log-opts\": {\n \"max-size\": \"10m\"\n }\n}\nEOF\nsystemctl restart docker\n```\n## Setting environment variables\nYou can set environment variables in a container. Only the last value of `` is taken when the `` is repeated more than once.\n**Note:** This is equivalent of the `--env` flag of the `docker run` command. Learn how Docker engine enables [setting environment variables](https://docs.docker.com/engine/reference/commandline/run/#set-environment-variables--e-env-env-file) .\n- Go to the **Create an instance** page. [Go to Create an instance](https://console.cloud.google.com/compute/instancesAdd) \n- In the **Container** section, click **Deploy container** .\n- On the **Configure container** page, do the following:- Specify a container image name.\n- In the **Environment variables** section, click **Add variable** .\n- Add or remove environment variables as necessary, one for each line.\n- To confirm the container details, click **Select** .\n- Continue with the VM creation process.\nUse the `--container-env` flag to set environment variables in a container. The following example sets three environment variables: `HOME` , `MODE` , and `OWNER` :\n```\ngcloud compute instances create-with-container busybox-vm \\\n --container-image docker.io/busybox:1.27 \\\n --container-env HOME=/home,MODE=test,OWNER=admin\n```\nUse the `--container-env-file` flag to set environment variables from a local file. The following example sets the two environment variables from the `env.txt` file:\n```\ngcloud compute instances create-with-container busybox-vm \\\n --container-image docker.io/busybox:1.27 \\\n --container-env-file ./env.txt\n```\nThe contents of the `env.txt` file are:\n```\n# this is a commentHOME=/homeMODE=testOWNER=admin\n```\nUse the `gcloud compute instances update-container` command with the `--container-env` or `--container-env-file` flag to update environment variables for a container on a VM. This updates any variables present in the VM instance's container declaration. Variables that are not in the container declaration are added.\nUse the `--remove-container-env` flag to remove environment variables when updating a container on a VM. The following example removes the environment variables called `MODE` and `OWNER` :\n```\ngcloud compute instances update-container busybox-vm \\\n --remove-container-env MODE,OWNER\n```\nIf a specified environment variable does not exist, it is silently ignored.\n## Mounting a host directory as a data volume\nYou can mount a directory from a host VM into a container.\n**Note:** This is equivalent to using the `--volume` flag and the `--mount` flag with mount `type=bind` of the `docker run` command. Learn how the Docker engine [mounts a host directory](https://docs.docker.com/engine/tutorials/dockervolumes#mount-a-host-directory-as-a-data-volume) as a data volume.\n- Go to the **Create an instance** page. [Go to Create an instance](https://console.cloud.google.com/compute/instancesAdd) \n- In the **Container** section, click **Deploy container** .\n- On the **Configure container** page, do the following:- Specify a container image name.\n- In the **Volume mounts** section, click **Add volume** .\n- From the **Volume type** list, select **Directory** , and do the following:- In the **Mount path** field, specify a mount path in a container directory structure at which to mount a host directory.\n- In the **Host path** field, specify a host path to the host directory to mount.\n- In the **Mode** list, specify whether to mount the directory in read/write or read-only mode.\n- To confirm the container details, click **Select** .\n- Continue with the VM creation process.\nUse the `--container-mount-host-path` flag to mount a host VM directory into a container. The following example mounts the host directory `/tmp` into the container at `/logs` in read/write mode:\n```\ngcloud compute instances create-with-container busybox-vm \\\n --container-image docker.io/busybox:1.27 \\\n --container-mount-host-path mount-path=/logs,host-path=/tmp,mode=rw\n```\nSpecify `mode=ro` to mount a host directory in read-only mode.\nUse the `gcloud compute instances update-container` command with the `--container-mount-host-path` flag to update host directory mounts on a container. Use the `--remove-container-mounts` flag to remove volume mounts with the specified mount paths. The following example removes a host path mount with `mount-path=/logs` :\n```\ngcloud compute instances update-container busybox-vm \\\n --remove-container-mounts /logs\n```\nIf the specified mount path does not exist, it is silently ignored.\n## Mounting tmpfs file system as a data volume\nYou can mount an empty tmpfs file system into a container.\n**Note:** This is similar to a Google Kubernetes Engine [EmptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) volume with `medium:Memory` . Unlike Docker, where `tmpfs` data is deleted on container restarts, with `tmpfs` on a Compute Engine container, the volume and its data persist across container restarts and are deleted only on VM restart.\n- Go to the **Create an instance** page. [Go to Create an instance](https://console.cloud.google.com/compute/instancesAdd) \n- In the **Container** section, click **Deploy container** .\n- On the **Configure container** page, do the following:- Specify a container image name.\n- In the **Volume mounts** section, click **Add volume** .\n- From the **Volume type** list, select **TmpFS** .\n- In the **Mount path** field, specify a mount path in a container directory structure where you would like to mount a TmpFS volume.\n- In the **Mode** list, specify whether to mount the TmpFS volume in read/write or read-only mode.\n- To confirm the container details, click **Select** .\n- Continue with the VM creation process.\nUse the `--container-mount-tmpfs` flag to mount an empty `tmpfs` file system into a container. The following example mounts a `tmpfs` file system into the container at `/cache` in read/write mode:\n```\ngcloud compute instances create-with-container busybox-vm \\\n --container-image docker.io/busybox:1.27 \\\n --container-mount-tmpfs mount-path=/cache\n \n```\nUse the `gcloud compute instances update-container` command with the `--container-mount-tmpfs` flag to update `tmpfs` mounts on a container. Use the `--remove-container-mounts` flag to remove a `tmpfs` mount with the specified mount path when updating. The following example removes the `tmpfs` mount with `mount-path=/cache` :\n```\ngcloud compute instances update-container busybox-vm \\\n --remove-container-mounts /cache\n```\nIf the specified mount path does not exist, it is silently ignored.\n## Mounting a persistent disk as a data volume\nWith [Container-Optimized OS 69](/container-optimized-os/docs/release-notes) or later, you can mount persistent disks from a host VM into a container.\n**Note:** This is similar to using the [gcePersistentDisk](https://kubernetes.io/docs/concepts/storage/volumes/#gcepersistentdisk) volume type in Google Kubernetes Engine.- The disk must have an`ext4`file system or have no file system. With no initial file system, the container startup agent formats the disk to`ext4`, and only read/write attachment and mounting are supported.\n- The disk must be [attached](/compute/docs/disks/add-persistent-disk#create_disk) to the VM.\n- Both partitionless devices and partitions are supported. For partition mounts, the disk cannot be blank; it must contain an existing partition table.\n- Go to the **Create an instance** page. [Go to Create an instance](https://console.cloud.google.com/compute/instancesAdd) \n- In the **Container** section, click **Deploy container** .\n- On the **Configure container** page, do the following:- Specify a container image name.\n- In the **Volume mounts** section, click **Add volume** .\n- From the **Volume type** list, select **Disk** .\n- In the **Mount path** field, specify a path in the container directory structure where you would like to mount the persistent disk.\n- From the **Disk name** list, select an existing disk to mount.\n- In the **Partition** field, specify the partition number to mount if the disk has a partition table. If the disk does not have partitions, leave this field blank.\n- In the **Mode** list, specify whether to mount the directory in read/write or read-only mode.\n- To confirm the container details, click **Select** .\n- Continue with the VM creation process.\nUse the [gcloud compute instances create-with-container](/sdk/gcloud/reference/compute/instances/create-with-container) command or the [gcloud compute instances update-container](/sdk/gcloud/reference/compute/instances/update-container) command with the `--container-mount-disk` flag to mount a persistent disk into a container.\nThe following example mounts two disks, `my-data-disk` and `my-scratch-disk` , into the container at `/disks/data-disk` and `/disks/scratch-disk` mount paths.\n```\ngcloud compute instances create-with-container busybox-vm \\\n --disk name=my-data-disk \\\n --create-disk name=my-scratch-disk,auto-delete=yes,image=ubuntu-1710-artful-v20180315,image-project=ubuntu-os-cloud \\\n --container-image docker.io/busybox:1.27 \\\n --container-mount-disk mount-path=\"/disks/data-disk\",name=my-data-disk,mode=ro \\\n --container-mount-disk mount-path=\"/disks/scratch-disk\",name=my-scratch-disk\n```\nNote that the `--disk` flag attaches `my-data-disk` , the `--create-disk` flag creates and attaches `my-scatch-disk` , and the `--container-mount-disk` flag mounts the attached disks to the container. Because a `mode` is not specified for `my-scratch-disk` , that disk is mounted to the container in read/write mode by default.\nUse the `gcloud compute instances update-container` command with the `--container-mount-disk` flag to mount additional attached disks or to modify existing disk mounts.\nUse the `--remove-container-mounts` flag to remove a disk volume mount with the specified mount path. The following example changes the mount mode of `my-data-disk` to read/write and removes the disk mount with `mount-path=\"/disks/scratch-disk\"` .\n```\ngcloud compute instances update-container busybox-vm \\\n --container-mount-disk mount-path=\"/disks/data-disk\",name=my-data-disk,mode=rw \\\n --remove-container-mounts \"/disks/scratch-disk\"\n```\nIf the mount path that you pass to the `--remove-container-mounts` flag does not exist, it is silently ignored.\n## Publishing container ports\nVMs with containers use the [host network mode](https://docs.docker.com/engine/reference/run/#network-settings) , where a container shares the host's network stack and all interfaces from the host are available to the container.\n**Note:** This is equivalent of passing the `--network=\"host\"` flag when using the `docker run` command. Learn more about [container network settings and host mode](https://docs.docker.com/engine/reference/run/#network-settings) .\nContainer ports have a one-to-one mapping to the host VM ports. For example, a container port 80 maps to the host VM port 80. Compute Engine does not support the port publishing ( `-p` ) flag, and you do not have to specify it for the mapping to work.\nTo publish a container's ports, [configure firewall rules](/compute/docs/vpc/using-firewalls) to enable access to the host VM instance's ports. The corresponding ports of the container are accessible automatically, according to the firewall rules.\n**Example: Publishing port 80 for an NGINX container**\nThe following example shows how to create a VM instance with an NGINX container and allow traffic to the container's port 80.\n- Create a VM instance with an NGINX container:```\ngcloud compute instances create-with-container nginx-vm \\\n --container-image gcr.io/cloud-marketplace/google/nginx1:1.15 \\\n --tags http-server\n```The container shares the host VM's network stack, and the container's port 80 is published to the host VM's port 80. The `http-server` tag is used as a target tag for the firewall rule, created in the next step.\n- Create a firewall rule to enable connections to port 80 of the VM instance. The following firewall rule allows HTTP connections to VM instances with the `http-server` tag.```\ngcloud compute firewall-rules create allow-http \\\n --allow tcp:80 --target-tags http-server\n```The container automatically starts receiving traffic on port 80. You do not need to perform any additional configuration.You can create firewall rules for host VM protocol:port combinations where the protocol is `tcp` or `udp` . These rules effectively govern access from outside the VM to the corresponding container ports.## What's next\n- Learn how to [deploy Docker containers on Compute Engine](/compute/docs/containers/deploying-containers) .\n- Learn about [Container-optimized OS](/container-optimized-os/docs) .", "guide": "Compute Engine"}