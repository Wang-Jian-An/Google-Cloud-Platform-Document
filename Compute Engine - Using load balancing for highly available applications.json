{"title": "Compute Engine - Using load balancing for highly available applications", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Using load balancing for highly available applications\nThis tutorial explains how to use load balancing with a regional managed instance group to redirect traffic away from busy or unavailable VM instances, allowing you to provide high availability even during a zonal outage.\nA [regional managed instance group](/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups) distributes an application on multiple instances across multiple zones. A [global load balancer](/load-balancing/docs/load-balancing-overview) directs traffic across multiple regions via a single IP address. By using both of these services to distribute your application across multiple zones, you can help ensure that your application is available even in extreme cases, like a zonal disruption.\nLoad balancers can be used to direct a variety of traffic types. This tutorial shows you how to create a global load balancer that directs external HTTP traffic, but much of the content of this tutorial is still relevant to other types of load balancers. To learn about other types of traffic that can be directed with a load balancer, see [Types of Cloud Load Balancing](/load-balancing/docs/load-balancing-overview#types-of-cloud-load-balancing) .\nThis tutorial includes detailed steps for launching a web application on a regional managed instance group, configuring network access, creating a load balancer for directing traffic to the web application, and observing the load balancer by simulating a zonal outage. Depending on your experience with these features, this tutorial takes about 45 minutes to complete.", "content": "## Objectives\n- Launch a demo web application on a regional managed instance group.\n- Configure a global load balancer that directs HTTP traffic across multiple zones.\n- Observe the effects of the load balancer by simulating a zonal outage.\n## CostsIn this document, you use the following billable components of Google Cloud:- Compute Engine\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . ## Before you begin\n## Application architectureThe application includes the following Compute Engine components:- [VPC network](/vpc/docs/overview#vpc_networks) : a virtual network within Google Cloud that can provide global connectivity via its own routes and firewall rules.\n- [Firewall rule](/vpc/docs/firewalls) : a Google Cloud firewall lets you allow or deny traffic to your instances.\n- [Instance template](/compute/docs/instance-templates) : a template used to create each VM instance in the managed instance group.\n- [Regional managed instance group](/compute/docs/instance-groups#managed_instance_groups) : a group of VM instances running the same application across multiple zones.\n- [Global static external IP address](/compute/docs/ip-addresses#externaladdresses) : a static IP address that is accessible on external networks and can be attached to a global resource.\n- [Global load balancer](/load-balancing/docs/load-balancing-overview#global_versus_regional_load_balancing) : a load balancer that allows backend instances to be distributed across multiple regions. Use a global load balancer when your users need access to the same applications and content, and you want to provide access using a single anycast IP address.\n- [Health check](/load-balancing/docs/health-check-concepts) : a policy used by the load balancer to evaluate the responsiveness of the application on each VM instance.\n## Launching the web applicationThis tutorial uses a web application that is stored on GitHub. If you would like learn more about how the application was implemented, see the [GoogleCloudPlatform/python-docs-samples](https://github.com/GoogleCloudPlatform/python-docs-samples/tree/master/compute/managed-instances/demo) repository on GitHub.\nLaunch the web application on every VM in an instance group by including a startup script in an instance template. Additionally, run the instance group in a dedicated VPC network to keep this tutorial's firewall rules from interfering with any existing resources running in your project.\n### Create a VPC networkUsing a VPC network protects existing resources in your project from being affected by the resources that you will create for this tutorial. A VPC network is also required to [restrict incoming traffic](#restricting_incoming_traffic) so that it must go through the load balancer.\nCreate a VPC network to encapsulate the firewall rules for the demo web application:- In the Google Cloud console, go to the **VPC networks** page. [Go to VPC networks](https://console.cloud.google.com/networking/networks) \n- Click **Create VPC Network** .\n- Under **Name** , enter `web-app-vpc` .\n- Set **Subnet creation mode** to **Automatic** . **Note:** Use auto mode network for fast, convenient set up. In production, it's recommended that you use [custom mode networks](/solutions/best-practices-vpc-design#custom-mode) instead. For more information, see [Considerations for automode networks](/vpc/docs/vpc#auto-mode-considerations) .\n- At the bottom of the page, click **Create** .\nWait until the VPC network has finished being created before continuing.\n### Create a firewall ruleAfter the VPC network is created, set up a firewall rule to allow HTTP traffic to the VPC network:\n **Note:** For convenience, create a wide-access firewall rule. But, for production applications, you should implement firewall rules that follow the security best practice of least privilege. For more information, see the [best practices for network security](/architecture/best-practices-vpc-design#network_security) .- In the Google Cloud console, go to the **Firewalls** page. [Go to Firewalls](https://console.cloud.google.com/networking/firewalls/list) \n- Click **Create firewall rule** .\n- Under **Name** , enter `allow-web-app-http` .\n- Set **Network** to `web-app-vpc` .\n- Under **Targets** , select **All instances in the network** .\n- Set **Source filter** to `IP ranges` .\n- Under **Source IP ranges** , enter `0.0.0.0/0` to allow access for all IP addresses.\n- Under **Ports and protocols** , select **Specified protocols and ports** . Check **tcp** and enter `80` to [allow access for HTTP traffic](/load-balancing/docs/https/setting-up-https) .\n- Click **Create** .\n### Create an instance templateCreate a template that you will use to create a group of VM instances. Each instance created from the template launches a demo web application via a startup script.- In the Google Cloud console, go to the **Instance templates** page. [Go to Instance templates](https://console.cloud.google.com/compute/instanceTemplates) \n- Click **Create instance template** .\n- Under **Name** , enter `load-balancing-web-app-template` .\n- Under **Machine configuration** , set the **Machine type** to `e2-micro` .\n- Under **Firewall** , select **Allow HTTP traffic** .\n- Click **Networking, disks, security, management, sole tenancy** to see the advanced settings.\n- Click the **Management** tab. Under **Automation** , enter the following **Startup script** .```\nsudo apt update && sudo apt -y install git gunicorn3 python3-pip\ngit clone https://github.com/GoogleCloudPlatform/python-docs-samples.git\ncd python-docs-samples/compute/managed-instances/demo\nsudo pip3 install -r requirements.txt\nsudo gunicorn3 --bind 0.0.0.0:80 app:app --daemon\n```The script gets, installs, and launches the web application at instance startup.\n- Click the **Networking** tab. Under **Network** , select `web-app-vpc` . This forces each instance created with this template to run on the previously created network.\n- Click **Create** .\nWait until the template has finished being created before continuing.\n### Create a regional managed instance groupTo run the web application, use the instance template to create a regional managed instance group:- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups/) \n- Click **Create instance group** .\n- Select **New managed instance group (stateless)** .\"\n- For **Name** , enter `load-balancing-web-app-group` .\n- For **Instance template** , select `load-balancing-web-app-template` .\n- Set **Number of instances** to `6` . If this field is disabled, turn off autoscaling first. **Pro Tip:** When creating a regional managed instance group, Compute Engine recommends that you provision enough instances so that, if all of the instances in any one zone are unavailable, the remaining instances still meet the minimum number of instances that you require. However, provisioning more instances than you need might incur additional costs. For more information, see [Selecting instance group size to ensure availability](/compute/docs/instance-groups/regional-migs#overprovision) .\n- For **Location** , select **Multiple zones** . **Pro Tip:** To ensure your application is available during extreme events, like zonal outages, Compute Engine recommends that you [distribute your application across multiple zones](/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups) .\n- For **Region** , select **us-central1** .\n- For **Zones** , select the following zones from the drop-down list:- **us-central1-b** \n- **us-central1-c** \n- **us-central1-f** \n- Select **Allow instance redistribution** .\n- For **Autoscaling mode** , select **Off: do not autoscale** .\n- Click **Create** . This redirects you back to the **Instance groups** page. **Note:** You might need to wait a few minutes until all of the instances in the group are running and ready to display the web application.\n- To verify that your instances are running the demo web application correctly:- From the **Instance groups** page, click`load-balancing-web-app-group`to see the instances in that group.\n- Under **External IP** , click an IP address to connect that instance. A new browser tab opens displaying the demo web application: **Note:** If you are unable to connect to the web application after a few minutes, check the instance status and network settings:- Verify that the instance group is ready. After the  instance is running, you might need to wait a few minutes for the  startup script to finish running.\n- Verify that the instance group is running on the`web-app-vpc`network and that the instance template  has **Allow HTTP traffic** enabled. Then, verify that the`allow-web-app-http`firewall rule was created  correctly.\nWhen you are done, close the browser tab for the demo web application.## Configuring the load balancerTo use a load balancer to direct traffic to your web application, you must reserve an external IP address to receive all incoming traffic. Then, create a load balancer that accepts traffic from that IP address and redirects that traffic to the instance group.\n### Reserve a static IP addressUse a [global static external IP address](/compute/docs/ip-addresses#externaladdresses) to provide the load balancer with a single point of entry for receiving all user traffic. Compute Engine preserves static IP addresses even if you change or delete any affiliated Google Cloud resources. This allows the web application to always have the same entry point, even if other parts of the web application might change.- In the Google Cloud console, go to the **External IP addresses** page. [Go to External IP addresses](https://console.cloud.google.com/addresses/list/) \n- Click **Reserve static address** .\n- Under **Name** , enter `web-app-ipv4` .\n- Set **IP version** to **IPv4** .\n- Set **Type** to **Global** .\n- Click **Reserve** .\n### Create a load balancerThis section explains the steps required to create a global load balancer that directs HTTP traffic.\nThis load balancer uses a frontend to receive incoming traffic and a backend to distribute this traffic to healthy instances. Because the load balancer is made of multiple components, this task is divided into several parts:- Backend configuration\n- Frontend configuration\n- Review and finalize\nComplete all the steps to create the load balancer.\n **Note:** For simplicity, this tutorial uses an HTTP load balancer. To learn how to support HTTPS and HTTP/2, see [Creating content-based HTTP(S) load balancing](/load-balancing/docs/https/content-based-example) . For other types of traffic, see [Choosing a load balancer](/load-balancing/docs/choosing-load-balancer) .- In the Google Cloud console, go to the **Create a load balancer** page. [Go to Create a load balancer](https://console.cloud.google.com/networking/loadbalancing/add) \n- In the **Application Load Balancer (HTTP/S)** section, click **Start configuration** .\n- Under **Internet facing or internal only** , select **From Internet to my VMs** . Then, click **Continue** .\n- For the **Name** of the load balancer, enter `web-app-load-balancer` .\n- In the left panel of the **Create global external Application Load Balancer** page, click **Backend configuration** .\n- Click **Create or select backend services & backend buckets** to open a drop-down menu. Click **Backend services** , then click **Create a backend service** .\n- In the new window, for the **Name** of the backend application, enter`web-app-backend`.\n- Set **Instance group** to`load-balancing-web-app-group`.\n- Set **Port numbers** to`80`. This [allows HTTP traffic](/load-balancing/docs/https/setting-up-https) between the load balancer and the instance group.\n- Under **Balancing mode** , select **Utilization** .\n- Click **Done** to create the backend.\n- Create the health check for the backend of the load balancer: **Pro Tip:** Health checks are used for both load balancing and [autohealing](/compute/docs/instance-groups#autohealing) , but for different purposes:- Health checks for load balancing are used for detecting unresponsive instances and directing traffic away from them.\n- Health checks for autohealing are used for detecting and recreating failed instances.\nUse separate health checks for load balancing and for autohealing. Using the same health check for these services would remove the distinction between unresponsive instances and failed instances, causing unnecessary latency and/or unavailability for your users. For more information, see [ Health check concepts](/load-balancing/docs/health-check-concepts) .- Under **Health check** , select **Create a health check** (or **Create another health check** ) from the drop-down menu. A new window opens.\n- In the new window under **Name** , enter`web-app-load-balancer-check`.\n- Set the **Protocol** to **HTTP** .\n- Under **Port** , enter`80`.\n- For this tutorial, set the **Request path** to`/health`, which is a path that the demo web application is set up to respond to.\n- Set the following **Health criteria** :- Set **Check interval** to`3`seconds. This defines the amount of time from the start of one probe to the start of the next one.\n- Set **Timeout** to`3`seconds. This defines the amount of time that Google Cloud waits for a response to a probe. Its value must be less than or equal to the check interval.\n- Set **Healthy Threshold** to`2`consecutive successes. This defines the number of sequential probes that must succeed in order for the instance to be considered healthy.\n- Set **Unhealthy Threshold** to`2`consecutive failures. This defines the number of sequential probes that must fail in order for the instance to be considered unhealthy.\n **Pro Tip:** For information about refining the **Check interval** and **Timeout** values for your own application, see [How health checks work](/load-balancing/docs/health-check-concepts#probes) .For detailed information about optimizing and measuring latency, see [ Optimizing Application Latency with Load Balancing](/load-balancing/docs/tutorials/optimize-app-latency) \n- Click **Save and continue** to create the health check.\n- Click **Create** to create the backend service.\n- In the left panel of the **Create global external Application Load Balancer** page, click **Frontend configuration** .\n- On the **Frontend configuration** page, under **Name** , enter`web-app-ipv4-frontend`.\n- Set the **Protocol** to`HTTP`.\n- Set the **IP version** to`IPv4`.\n- Set the **IP address** to`web-app-ipv4`.\n- Set the **Port** to`80`.\n- Click **Done** to create the frontend.\n- Verify your load balancing settings before creating the load balancer:- In the left panel of the **Create global external Application Load Balancer** page, click **Review and finalize** .\n- On the **Review and finalize** page, verify the following **Backend** settings:- The **Backend service** is`web-app-backend`.\n- The **Endpoint protocol** is`HTTP`.\n- The **Health check** is`web-app-load-balancer-check`.\n- The **Instance group** is`load-balancing-web-app-group`.\n- On the same page, verify that **Frontend** uses an IP address with a **Protocol** of `HTTP` .\n- In the left panel of the **Create global external Application Load Balancer** page, click **Create** to finish creating the load balancer.\nYou might need to wait a few minutes for the load balancer to finish being created.## Simulating a zonal outageYou can observe the functionality of the load balancer by simulating the widespread unavailability of a zonal outage. This simulation works by forcing all of the instances located in a specified zone to report an unhealthy status on the `/health` request path. When these instances report an unhealthy status, they fail the load balancing health check, prompting the load balancer to stop directing traffic to these instances.- Monitor which zones the load balancer is directing traffic to.- In the Google Cloud console, go to **Cloud Shell** . [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) Cloud Shell opens in a pane of the Google Cloud console. It can take a few seconds for the session to initialize. **Pro Tip:** You can open Cloud Shell from any Google Cloud console page by using the **Activate Cloud Shell** button.\n- Save the static external IP address of your load balancer:- Get the external IP address from the [frontend forwarding rule](/load-balancing/docs/forwarding-rule-concepts#https_lb) of the load balancer by entering the following command in your terminal:```\ngcloud compute forwarding-rules describe web-app-ipv4-frontend --global\n```Copy the `` from the output:```\nIPAddress: EXTERNAl_IP_ADDRESS\n...\n```\n- Create a local bash variable:```\nexport LOAD_BALANCER_IP=EXTERNAl_IP_ADDRESS\n```where `` is the external IP address that you copied.\n- To monitor which zones the load balancer is directing traffic to, run the following bash script:```\nwhile true\ndo\n  BODY=$(curl -s \"$LOAD_BALANCER_IP\")\n  NAME=$(echo -n \"$BODY\" | grep \"load-balancing-web-app-group\" | perl -pe 's/.+?load-balancing-web-app-group-(.+?)<.+/\\1/')\n  ZONE=$(echo -n \"$BODY\" | grep \"us-\" | perl -pe 's/.+?(us-.+?)<.+/\\1/')\n  echo $ZONE\ndone\n```This script continuously attempts to connect to the web application via the IP address for the frontend of the load balancer, and outputs which zone the web application is running from for each connection.The resulting output should include zones `us-central1-b` , `us-central1-c` , and `us-central1-f` :```\nus-central1-f\nus-central1-b\nus-central1-c\nus-central1-f\nus-central1-f\nus-central1-c\nus-central1-f\nus-central1-c\nus-central1-c\n```Keep this terminal open. **Note:** This monitor should run continuously. But, you can stop it at any time by pressing `Control+C` in the terminal.\n- While your monitor is running, begin simulating the zonal outage.- In Cloud Shell, [open a second terminal session](/shell/docs/starting-cloud-shell#opening_multiple_sessions) by clicking theadd **Add** button.\n- Create a local bash variable for the project ID:```\nexport PROJECT_ID=PROJECT_ID\n```where `` is the project ID for your current project, which is displayed on each new line in the Cloud Shell:```\nuser@cloudshell:~ (PROJECT_ID)$\n```\n- Create a local bash variable for the zone that you want to disable. To simulate a failure of zone `us-central1-f` , use the following command:```\nexport DISABLE_ZONE=us-central1-f\n```Then, run the following bash script. This script causes the demo web application instances in the disabled zone to output unhealthy responses to the load balancer health check. Unhealthy responses prompt the load balancer to direct traffic away from these instances.```\nexport MACHINES=$(gcloud --project=$PROJECT_ID compute instances list --filter=\"zone:($DISABLE_ZONE)\" --format=\"csv(name,networkInterfaces[0].accessConfigs[0].natIP)\" | grep \"load-balancing-web-app-group\")\nfor i in $MACHINES;\ndo\n NAME=$(echo \"$i\" | cut -f1 -d,)\n IP=$(echo \"$i\" | cut -f2 -d,)\n echo \"Simulating zonal failure for zone $DISABLE_ZONE, instance $NAME\"\n curl -q -s \"http://$IP/makeUnhealthy\" >/dev/null --retry 2\ndone\n```After a short delay, the load balancer stops directing traffic to the unhealthy zones, so the output from the first terminal window stops listing zone `us-central1-f` :```\nus-central1-c\nus-central1-c\nus-central1-c\nus-central1-b\nus-central1-b\nus-central1-c\nus-central1-b\nus-central1-c\nus-central1-c\n```This indicates that the load balancer is directing traffic only to the healthy, responsive instances. **Note:** Optionally, you can repeat this step to simulate failures of zones `us-central1-b` and `us-central1-c` .Keep both terminals open.\n- In the second terminal, create a local bash variable for the zone that you want to restore. To restore traffic to zone `us-central1-f` , use the following command:```\nexport ENABLE_ZONE=us-central1-f\n```Then, run the following bash script. This script causes the demo web application instances in the enabled zone to output healthy responses to the load balancer health check. Healthy responses prompt the load balancer to begin distributing traffic back toward these instances.```\nexport MACHINES=$(gcloud --project=$PROJECT_ID compute instances list --filter=\"zone:($ENABLE_ZONE)\" --format=\"csv(name,networkInterfaces[0].accessConfigs[0].natIP)\" | grep \"load-balancing-web-app-group\")\nfor i in $MACHINES;\ndo\n NAME=$(echo \"$i\" | cut -f1 -d,)\n IP=$(echo \"$i\" | cut -f2 -d,)\n echo \"Simulating zonal restoration for zone $ENABLE_ZONE, instance $NAME\"\n curl -q -s \"http://$IP/makeHealthy\" >/dev/null --retry 2\ndone\n```After a few minutes, the output from the first terminal window gradually lists zone `us-central1-f` again:```\nus-central1-b\nus-central1-b\nus-central1-c\nus-central1-f\nus-central1-c\nus-central1-c\nus-central1-b\nus-central1-c\nus-central1-f\n```This indicates that the load balancer is directing incoming traffic to all zones again. **Note:** If you also disabled zone `us-central1-b` or zone `us-central1-c` , you can repeat this step to restore traffic to them.Close both terminals when you have finished.## (Optional) Restricting incoming trafficWhen you created the regional managed instance group, you could access each instance directly through its external ephemeral IP address. However, now that you have prepared a load balancer and static external IP address, you might want to modify the network firewall so that incoming traffic go through the load balancer.\nIf you want to restrict incoming traffic to the load balancer, modify the network firewall to disable the ephemeral external IP address for each instance.\n **Note:** The zonal outage simulation will stop working after you restrict incoming traffic to the load balancer. To make all the instances in a specific zone healthy or unhealthy, the simulation needs to specify which instances it connects to.- Edit the firewall rule to restrict HTTP traffic so that the web application can only be accessed by using the load balancer:- In the Google Cloud console, go to the **Firewalls** page. [Go to Firewalls](https://console.cloud.google.com/networking/firewalls/list) \n- Under **Name** , click `allow-web-app-http` .\n- Click **Edit** .\n- Modify the **Source IP ranges** to only allow health check probes:- Delete`0.0.0.0/0`.\n- On the same line, enter`130.211.0.0/22`and press **Tab** .\n- On the same line, enter`35.191.0.0/16`and press **Tab** .\n **Note:** Health check probes from the load balancer come from addresses in the ranges `130.211.0.0/22` and `35.191.0.0/16` . For this tutorial, your health check uses the HTTP protocol, so the firewall rule should allow connections to port 80. For more information on firewall rules for health checks, see [firewall rules for load balancing](/load-balancing/docs/health-checks#firewall_rules) .\n- Click **Save** .\n- Verify that you cannot connect to the web application by using the ephemeral external IP address for a specific instance:- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups/) \n- Click `load-balancing-web-app-group` to see the instances in that group.\n- Under **External IP** , click an IP address to connect that instance. A new browser tab opens, but the web application does not open. (Eventually, the page will show a timeout error).When you are done, close the browser tab for the instance.\n- Verify that you can connect to the web application by using the load balancer:- In the Google Cloud console, go to the **Load balancing** page. [Go to Load balancing](https://console.cloud.google.com/networking/loadbalancing/list) \n- Under **Name** , click `web-app-load-balancer` to expand the load balancer you just created.\n- To connect to the web-app via the external static IP addresses, look under **Frontend** and **IP:Port** , and copy the IP address. Then, open a new browser tab and paste the IP address into the address bar. This should display the demo web application:Notice that, whenever you refresh the page, the load balancer connects to different instances in different zones. This happens because you are not connecting to an instance directly; you are connecting to the load balancer, which selects the instance you are redirected to.When you are done, close the browser tab for the demo web application.## Clean up\nAfter you finish the tutorial, you can clean up the resources that you created so that they stop using quota and incurring charges. The following sections describe how to delete or turn off these resources.If you created a separate project for this tutorial, delete the entire project. Otherwise, if the project has resources that you want to keep, only delete the resources created in this tutorial.\n### Deleting the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n### Deleting specific resources- In the Google Cloud console, go to the **Load balancing** page. [Go to Load balancing](https://console.cloud.google.com/networking/loadbalancing/list) \n- Click the checkbox next to `web-app-load-balancer` .\n- Click delete **Delete** at the top of the page.\n- In the new window, select all checkboxes. Then, click **Delete load balancerand selected resources** to confirm the deletion.\n **Note:** Wait until the load balancer is deleted before deleting the static external IP address.- In the Google Cloud console, go to the **External IP addresses** page. [Go to External IP addresses](https://console.cloud.google.com/addresses/list/) \n- Click the checkbox next to `web-app-ipv4` .\n- Click delete **Release static address** at the top of the page. In the new window, click **Delete** to confirm the deletion.\n **Note:** Wait until the load balancer is deleted before deleting the instance group.- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups/list) \n- Select the checkbox for   your`load-balancing-web-app-group`instance group.\n- To delete the instance group, clickdelete **Delete** .\n **Note:** You must finish deleting the instance group before deleting the instance template. You cannot delete an instance template if a managed instance group is using it.- In the Google Cloud console, go to the **Instance Templates** page. [Go to Instance templates](https://console.cloud.google.com/compute/instanceTemplates) \n- Click the checkbox next to `load-balancing-web-app-template` .\n- Click delete **Delete** at the top of the page. In the new window, click **Delete** to confirm the deletion.\n **Note:** You must finish deleting the instance group before deleting the VPC network. You cannot delete a VPC network if other resources still uses it.- In the Google Cloud console, go to the **VPC networks** page. [Go to VPC networks](https://console.cloud.google.com/networking/networks) \n- Click `web-app-vpc` .\n- Click delete **Delete** at the top of the page. In the new window, click **Delete** to confirm the deletion.\n## What's next\n- Try another tutorial:- [Using autohealing for highly available applications](/compute/docs/tutorials/high-availability-autohealing) .\n- [Using autoscaling for highly scalable applications](/compute/docs/tutorials/high-scalability-autoscaling) .\n- Learn more about [Managed Instance Groups](/compute/docs/instance-groups) .\n- Learn more about [Load Balancing](/load-balancing/docs/load-balancing-overview) .\n- Learn more about [Optimizing Application Latency with Load Balancing](/load-balancing/docs/tutorials/optimize-app-latency) .\n- Learn more about [Designing Robust Systems](/compute/docs/tutorials/robustsystems) .\n- Learn more about [Building Scalable and Resilient Web Applications on Google Cloud](/solutions/scalable-and-resilient-apps) .", "guide": "Compute Engine"}