{"title": "Cloud Architecture Center - Using Apigee with the Cloud Healthcare API", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Using Apigee with the Cloud Healthcare API\nLast reviewed 2022-03-08 UTC\nThe [Cloud Healthcare API](/healthcare/docs) is a fully managed, enterprise-scale [Fast Healthcare Interoperability Resources (FHIR)](https://hl7.org/FHIR/) datastore for your healthcare data that meets industry-specific security, privacy, and compliance requirements. It has a fully compliant FHIR datastore and FHIR API. The service lets you run AI and ML algorithms against your data to build intelligent healthcare solutions.\nThis tutorial shows you how to connect [Apigee](/apigee/docs) with the Cloud Healthcare API. It assumes that you have working knowledge of Apigee, the Cloud Healthcare API, and FHIR (pronounced ). Read this tutorial if you're an API developer responsible for designing and implementing FHIR-based solutions.\nApigee lets enterprises design, secure, analyze, and scale APIs anywhere with visibility and control. It has the following two components:- [Apigee Runtime](/apigee/docs/api-platform/get-started/what-apigee#componentsofapigeeedge-edgeapiservices) , which enables enterprise-wide API management.\n- [Developer portal](/apigee/docs/api-platform/publish/intro-portals) , which enables you to onboard API consumers and to publish API documentation. For example, Developer portal lets developers register their FHIR apps. It can also host interactive FHIR API documentation.\nThe Cloud Healthcare API specializes in FHIR data. However, it doesn't have built-in API-management capabilities. Apigee lets you expose FHIR APIs in a controlled, secure way that aligns with the rest of your organization's APIs.\n **Note:** Screenshots appear beneath the instructions they represent.", "content": "## ArchitectureTypical consumers for Cloud Healthcare API data include web applications, system-to-system connections, and mobile device applications. The following high-level diagram shows an API consumer calling the Apigee FHIR API proxy to retrieve patient data from Cloud Healthcare API.## Objectives\n- Create and deploy a shared flow that holds common configuration values.\n- Create and deploy an API proxy that can connect to Cloud Healthcare API and retrieve patient FHIR data.\n- Create and deploy a basic OAuth 2.0 client credentials API proxy.\n- Create an API product configuration.\n- Create a developer profile and a developer application configuration.\n- Test the API with cURL.\n- Learn about other Apigee features.\n## CostsThis tutorial uses the following non-billable components of Google Cloud:- [Apigee 60-day trial](/apigee/pricing) \nIn this document, you use the following billable components of Google Cloud:- [Cloud Healthcare API](/products/calculator#id=ee1b21a5-7ea7-4dab-ac9e-71753ce3cbb6) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Provision an Apigee trial instance by following the [Apigee provisioning](/apigee/docs/api-platform/get-started/provisioning-intro) instructions. You can also use an existing Apigee paid instance.\n- Create a Cloud Healthcare API [dataset and datastore](/healthcare/docs/quickstarts) .\n- [Generate sample R4 FHIR data](https://github.com/synthetichealth/synthea#generate-synthetic-patients) .\n- [Load the data into the datastore](/healthcare/docs/how-tos/fhir-import-export) .\n- [Create a service account](/iam/docs/creating-managing-service-accounts#creating) in the same Google Cloud project as the Apigee instance. Add the following roles to the service account.- Service account name:`healthcareapi-sa`\n- Roles:- FHIR store viewer\n- FHIR resource editor\n- If your Cloud Healthcare API instance is in a different Google Cloud project than the Apigee instance, add the service account to the project [through IAM](/iam/docs/creating-managing-service-accounts) .\nThe API proxy uses the service account to connect to the Cloud Healthcare API.\n## Create a common configuration shared flowThe shared flow you create in this section holds common configuration values. Once you create the shared flow, other proxies can use it.- From the Apigee menu, in the **Develop** section, select **Shared Flows** . Click **Create New** .\n- Name the shared flow`common-config`. Click **Create** .\n- Click the **Develop** tab. Click theicon in the **Policies** section. Select **Assign Message** from the list.\n- Set the name to `AM-ConfigValues` . Click **Add** , as shown in the following image. \n- Click the **AM-ConfigValues** policy. Copy and paste the following XML code:```\n\u00a0 \u00a0<AssignMessage continueOnError=\"false\" enabled=\"true\" name=\"AM-ConfigValues\">\u00a0 \u00a0 <DisplayName>AM-ConfigValues</DisplayName>\u00a0 \u00a0 <AssignVariable>\u00a0 \u00a0 \u00a0 \u00a0 <Name>gcp.scopes</Name>\u00a0 \u00a0 \u00a0 \u00a0 <Value>https://www.googleapis.com/auth/cloud-platform</Value>\u00a0 \u00a0 </AssignVariable>\u00a0 \u00a0 <AssignVariable>\u00a0 \u00a0 \u00a0 \u00a0 <Name>gcp.healthcareapi-path</Name>\u00a0 \u00a0 \u00a0 \u00a0 <Value>projects/PROJECT_ID/locations/REGION/datasets/DATASET_NAME/fhirStores/FHIRSTORE_NAME</Value>\u00a0 \u00a0 </AssignVariable>\u00a0 \u00a0 <AssignVariable>\u00a0 \u00a0 \u00a0 \u00a0 <Name>gcp.proxy-domain</Name>\u00a0 \u00a0 \u00a0 \u00a0 <Value>api.domain.com</Value>\u00a0 \u00a0 </AssignVariable>\u00a0 \u00a0 <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\u00a0 \u00a0 <AssignTo createNew=\"false\" transport=\"http\" type=\"request\"/></AssignMessage>\n```- Populate the`gcp.healthcareapi-path`with the full path to your Cloud Healthcare API datastore. The path is listed in the **Datastore details** section of the Cloud Healthcare API datastore.\n- Populate the `gcp.proxy-domain` with the domain name containing your API endpoint. The domain name was configured during the provisioning of the Apigee instance\u2014for example, `api.company.com` or `api.subdomain.company.com` , as shown in the following image. \n- To add the policy to the default shared flow, click **default** in the **Shared Flows** section. Drag the **AM-ConfigValues** policy to the empty space in the flow, as shown in the following image. \n- Click **Save** to save the shared flow.\n- To deploy the shared flow, click the **Deploy** drop-down button, and then click the **Deploy {Version}** button next to the environment.Deploying the shared flow makes it available to the FHIR API proxy.\n## Create an FHIR API proxyIn this section, you use the Apigee API management tool to create an FHIR API proxy that exposes Cloud Healthcare FHIR resources. An API proxy makes the FHIR data available through your chosen domain and path. You also add additional logic that secures and manages the API calls.- From the Apigee menu, in the **Develop** section, select **API Proxies** . Click **Create New** .\n- Select **Reverse Proxy** . Use the following values:- **Name:** `fhir-r4-api-v1`\n- **Base path:** `/v1/fhir/r4`\n- **Target:** `https://healthcare.googleapis.com/v1/{gcp.healthcareapi-path}/fhir`\n- **Security: Authorization: OAuth 2.0:** Select\n- **Security: Browser: Add CORS Headers** : Select\n- Click **Create** to create the proxy. Click **Edit\nProxy** to see the proxy's edit page.\n- Click the icon next to the **Policies** section to create a shared flow policy to reference the `common-config` shared flow you created previously.- Select **FlowCallout** . Enter the following details and select`common-config`from the list:- **FlowCallout:** - **Name:** `FC-Common-Config`\n- **Shared Flow:** `common-config`\n- Drag the `FC-Common-Config` policy to the `default PreFlow` proxy endpoint so it appears after the **Remove Header Authorization** policy, as shown in the following image. \nWhen the Cloud Healthcare API returns FHIR data, the data contains references to internal URLs. The proxy should substitute the internal URLs with the external domain name. To make the substitution, you can use a JavaScript policy. This replacement works by extracting the response content, replacing the URL with a global search option, and then resetting the response content.- In Apigee, add the JavaScript policy to the proxy. Click the icon next to the **Policies** section and select the JavaScript policy from the list, as shown in the following image. Enter the following values:- **Name:** `JS-Replace-URL`\n- **Script Name:** `JS-Replace-URL.js`\n \n- Within the **Resources** section and the **jsc** subsection, select **JS-Replace-URL.js** . Making this selection shows the contents of the JavaScript file, as shown in the following image. Copy and paste the following JavaScript code:```\n// Gets JSON responsevar responseData = response.content;// Get the Cloud Healthcare API path and proxy domain variables that are set in the common-config shared flowvar hcaPath = context.getVariable(\"gcp.healthcareapi-path\");var proxyDomain = context.getVariable(\"gcp.proxy-domain\");// Build URLs and Pathsvar targetPath = \"https://healthcare.googleapis.com/v1/\" + hcaPath + \"/fhir\";var targetPathRegExp = new RegExp(targetPath, 'g');var proxyUrl = \"https://\" + proxyDomain + context.getVariable(\"proxy.basepath\");// Replace HCA URL with API URLresponseData = responseData.replace(targetPathRegExp, proxyUrl);// Set target responsecontext.setVariable(\"response.content\", responseData);\n``` \n- Expand the **Proxy Endpoints > default > PostFlow** section. Drag the JavaScript policy to the **Response** section, as shown in the following image. \nWhen the proxy calls the Cloud Healthcare API, it [authenticates with service account credentials](/apigee/docs/api-platform/security/google-auth/overview) . To authenticate, set the authentication mechanism to use an access token. When the proxy is deployed, specify the service account you want to use.- To use the service account credentials, expand the **Target Endpoints >default > PreFlow** section. Add an **<Authentication>** section to the **HttpTargetConnection** section of the XML file:```\n\u00a0 \u00a0 \u00a0 \u00a0</TargetEndpoint>\u00a0 \u00a0 \u00a0 \u00a0 \u2026\u2026\u2026\u00a0 \u00a0 <HTTPTargetConnection>\u00a0 \u00a0 \u00a0 \u00a0 <URL>https://healthcare.googleapis.com/v1/{gcp.healthcareapi-path}/fhir</URL>\u00a0 \u00a0 \u00a0 \u00a0 <Authentication>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <GoogleAccessToken>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <Scopes>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <Scope>https://www.googleapis.com/auth/cloud-platform</Scope>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 </Scopes>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 </GoogleAccessToken>\u00a0 \u00a0 \u00a0 \u00a0 </Authentication>\u00a0 \u00a0 </HTTPTargetConnection></TargetEndpoint>\n```\n- Click **Save** to save the proxy.\n- Click the **Deploy** drop-down, and then click **Deploy{Version}** next to the environment where you want to deploy the API proxy.\nWhen you deploy the API proxy, the page prompts you to enter an optional service account. Enter the service account that you created in [Before You Begin](#before-you-begin) earlier in this document.\nSetting the service account enables Apigee to connect to the Cloud Healthcare API using the service account identity. It also calls the Google authentication service to get a token.\nFor more information about using Google authentication, see [Using Google authentication](/apigee/docs/api-platform/security/google-auth/overview) .\nDeploying the proxy makes the proxy endpoint live. Once it's live, it's available at the URL that the Apigee instance was configured for.## Create an OAuth 2.0 API proxyThe FHIR API proxy that you created in a previous step is protected by an access token. Without this protection, the API is open to the public. One of the techniques you can use to protect an API is creating an OAuth 2.0 API proxy. In this section, you create a basic OAuth 2.0 API proxy using the client credentials grant type. You use the proxy to get an access token. You use the token to access the FHIR API.- From the **Apigee** menu, under the **Develop** section, select **API Proxies** . Click **Create New** .\n- Create a new API proxy with the following options:- **No Target:** Select\n- **Name:** `oauth-api-v1`\n- **Base path:** `/oauth2`\n- **Security: Authorization: Passthrough (no authorization):** Select\n- Click **Create** to create the proxy.\n- Click **Edit Proxy** to see the proxy's edit page.\n- Add a new conditional flow for the API resource: `/token` , as shown in the following image.- Click theicon next to the **Proxy\nEndpoints > Default** section.\n- Enter the following values:- **Flow Name:** Get-Access-Token\n- **Condition Type:** Path and Verb\n- **Path:** `/token`\n- **Verb:** `POST`\n- Click **Add** . \nAdd an OAuth v2.0 policy to the proxy.- Click the **Develop** tab.\n- Click theicon next to the **Policies** section.\n- Select **OAuth v2.0** from the list. Click **Add** .\n- Click the newly added policy and enter the following XML:```\n<OAuthV2 continueOnError=\"false\" enabled=\"true\" name=\"OAuth-v20\">\u00a0 \u00a0 <!-- This policy generates an OAuth 2.0 access token using the client_credentials grant type -->\u00a0 \u00a0 <Operation>GenerateAccessToken</Operation>\u00a0 \u00a0 <!-- This is in milliseconds, so expire in an hour -->\u00a0 \u00a0 <ExpiresIn>3600000</ExpiresIn>\u00a0 \u00a0 <SupportedGrantTypes>\u00a0 \u00a0 \u00a0 \u00a0 <GrantType>client_credentials</GrantType>\u00a0 \u00a0 </SupportedGrantTypes>\u00a0 \u00a0 <GrantType>request.queryparam.grant_type</GrantType>\u00a0 \u00a0 <GenerateResponse/></OAuthV2>\n```\nAdd the OAuth v2.0 policy to the `/token` flow in the API proxy, as shown in the following image.- Expand the **Proxy Endpoints > default** section and click the **Get-AccessToken** flow.\n- Drag the **OAuth-v2.0** policy to the **Request** area of the flow. \n- Click **Save** to save the proxy.\n- Click the **Deploy** drop-down, and then click **Deploy{Version}** next to the environment where you want to deploy the API proxy.\n- Deploying the proxy makes the proxy endpoint live and available. You can now call it at the URL that the Apigee instance was configured for.\n## Create an API product, developer profile, and developer applicationIn the previous section, you created an FHIR API. In this section, you package the proxy into an API product, then create a developer profile and a developer application to test that API.\nAs an API provider, you create [API products](/apigee/docs/api-platform/publish/what-api-product) to bundle your API proxies and make them available to application developers to consume.- To create an [API product](/apigee/docs/api-platform/publish/create-api-products#add) , click **Publish > Apigee > API Products** , then click **Create** , as shown in the following image.\n- Enter the following values:- **Name:** FHIR R4 API\n- **Display Name:** FHIR R4 API\n- **Access:** Public\n- **Environment:** Select the environment that you deployed the shared flows and proxies to.\n- **Automatically approve access requests:** Select\n- **Operations:** Click the **Add an Operation** button and fill in the following fields:- **API Proxy:** `fhir-r4-api-v1 proxy`\n- **Operation:** `/**`\n- **Methods:** `GET, POST, PUT, DELETE, OPTIONS`\n- Click **Save** . \nApigee lets you look at both the exposing and consuming side of the API. This tutorial focuses on building the API and securely exposing the FHIR data. Creating a developer profile lets you test the consuming side of the API.\nThis part of the tutorial shows you how to create an app that consumes the API.\nTo [create a developer profile](/apigee/docs/api-platform/publish/adding-developers-your-api-product#add) , from the Apigee menu, complete the following steps:- Click **Publish > Developers** .\n- Click **Developer** .\n- Enter the following values (or use your own):- **First Name:** App\n- **Last Name:** Developer\n- **Username:** appdeveloper\n- **Email:** Enter an email address where you can receive email.\nA developer might be working on several different applications that each need their own API key. The API key represents the combination of a developer's application and the API product that the developer's application needs to access.\nTo [create a developer app](/apigee/docs/api-platform/publish/creating-apps-surface-your-api) , from the Apigee menu, build an application profile:- Click **Publish Apps** .\n- Click **App** .\n- Enter the following values, as shown in the following image:- **Name:** FHIR R4 App\n- **Display Name:** FHIR R4 App\n- **Developer:** \n- Click **Add product** .- Select the API product that you created (`FHIR R4 API)`.\n- Set the status to **Approved** .\n- Click **Create** . \n## Test the API callTo test the API call, use the [cURL](https://curl.se/) tool. Run cURL from the command line or from Cloud Shell:- From the Apigee menu, click **Publish > Apps** . Click the app`FHIR R4 App`that was created previously.\n- From the **Credentials** section, click the **Show** link for both the key and the secret. The credentials display, as shown in the following image. \n- Open a [base64 encoding tool](https://www.base64encode.org/) . Copy the key and secret into the following format and base64 encode the string.- `key:secret`\n- **Result Example:** `a2V5MjN4ZGRzcnNlcjM0c2Q6c2VjcmV0M2Y0NHJ3NTNzZGY=`\n- Use cURL to call the OAuth 2.0 proxy to retrieve the access token. The access token is in the JSON response of the API call.```\ncurl -X POST https://{api-domain-name}/oauth2/token?grant_type=client_credentials -H \"Authorization: Basic {base64string}\"\n```The output is similar to the following:```\n{\u00a0 \"refresh_token_expires_in\" : \"0\",\u00a0 \"api_product_list\" : \"[FHIR R4 API]\",\u00a0 \"api_product_list_json\" : [ \"FHIR R4 API\" ],\u00a0 \"organization_name\" : \"apigee-org-name\",\u00a0 \"developer.email\" : \"appdeveloper@google.com\",\u00a0 \"token_type\" : \"BearerToken\",\u00a0 \"issued_at\" : \"1623419965745\",\u00a0 \"client_id\" : \"CUH07Q1EAmd1hqf94a13PF1oGBG3wtTi\",\u00a0 \"access_token\" : \"1n3Bh7yIWxTRYGord4xAOmqiZsHf\",\u00a0 \"application_name\" : \"a619aa68-f34f-4f1c-9511-c6abda60464f\",\u00a0 \"scope\" : \"\",\u00a0 \"expires_in\" : \"3599\",\u00a0 \"refresh_count\" : \"0\",\u00a0 \"status\" : \"approved\"}\n```\n- Copy the data in the `access_token` field that appears in the preceding output example. You use it in the next step.\n- Call the FHIR API to retrieve a list of patients:- Use the`access_token`value from the`OAuth 2.0`call response in the`Authorization`header.\n- Add the`/Patient`FHIR resource at the end of the URL.\n- The response is a list of all patients:\n```\ncurl https://{api-domain-name}/v1/fhir/r4/Patient -H \"Authorization: Bearer {access_token}\"{\u00a0 \"entry\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"fullUrl\": \"https://{api-domain-name}/v1/fhir/r4/Patient/619e4e4b-2a02-478c-9ef4-cc2c40e84189\",\u00a0 \u00a0 \u00a0 \"resource\": {\u00a0 \u00a0 \u00a0 \u00a0 \"address\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u2026\u2026\u2026\u2026..\u00a0 \u00a0 }\u00a0 ]}\n```\n- Call the FHIR API to retrieve the information for one patient:- From the previous API call, select a patient ID.\n- Append the patient ID to the end of the`/Patient`resource.\n- The response returns the data for the selected patient:\n```\ncurl https://{api-domain-name}/v1/fhir/r4/Patient/(id) -H \"Authorization: Bearer {access_token}\"{\u00a0 \"entry\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"fullUrl\": \"https://{api-domain-name}/v1/fhir/r4/Patient/619e4e4b-2a02-478c-9ef4-cc2c40e84189\",\u00a0 \u00a0 \u00a0 \"resource\": {\u00a0 \u00a0 \u00a0 \u00a0 \"address\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u2026\u2026\u2026\u2026..\u00a0 \u00a0 }\u00a0 ]}\n```\nTry calling other FHIR resources. There are over 100 [FHIR resources](https://www.hl7.org/fhir/resourcelist.html) available\u2014for example: `/Practitioner` , `/Encounter` , `/ExplanationOfBenefit` , `/Coverage` .\n```\n\u00a0 \u00a0 curl https://{api-domain-name}/v1/fhir/r4/Practitioner -H \"Authorization: Bearer {access_token}\"\u00a0 \u00a0 curl https://{api-domain-name}/v1/fhir/r4/Encounter -H \"Authorization: Bearer {access_token}\"\n```\nThis tutorial shows you how to connect to the Google Cloud Healthcare API with Apigee.\nThere are other things you can do with Apigee, like impose quotas and rate limiting, view analytics, publish to the developer portal, and customize the developer portal.## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\nThere is no charge for the Apigee trial. The Apigee trial expires and deletes on its own after 60 days. To avoid incurring charges to your Google Cloud account for the resources used in this tutorial, do the following:\n### Delete the FHIR storeTo delete the FHIR datastore, see [Deleting a FHIR store](/healthcare/docs/how-tos/fhir#deleting_a_fhir_store) .- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- If the project that you plan to delete is attached to an organization,  expand the **Organization** list in the **Name** column.\n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n## What's next\n- Learn more about [adding policies](/apigee/docs/api-platform/develop/policy-attachment-and-enforcement) to an API proxy.\n- Learn more about [debugging](/apigee/docs/api-platform/debug/trace-overview) API proxies using the trace feature.\n- Learn more about the features of the [Cloud Healthcare API](/healthcare-api/docs/concepts/introduction) .\n- Learn more about working with additional [FHIR resources](/healthcare-api/docs/how-tos/fhir-resources) .\n- Learn more about the [HealthAPIx Solution](/solutions/apigee-health-apix) that uses Apigee and the Cloud Healthcare API.", "guide": "Cloud Architecture Center"}