{"title": "Compute Engine - How to Set Up MySQL on Google Compute Engine", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - How to Set Up MySQL on Google Compute Engine\nLast reviewed 2021-11-23 UTC\nYou have several options for deploying MySQL as part of your Google Cloud project. You can use Cloud SQL, Google Cloud Marketplace, or manually install MySQL on Compute Engine.\n [Cloud SQL](/sql/docs/introduction) offers MySQL as a web service. You can use Cloud SQL to host your MySQL database in Google's cloud, and let Google Cloud handle administrative duties like replication, patch management, and database management.\n [Cloud Marketplace](/marketplace/?q=mysql) provides a simple click-to-deploy interface that makes it easy to install MySQL onto a Compute Engine instance. Cloud Marketplace includes not only a standalone MySQL installation, but also several web development stacks that use MySQL, including LAMP stacks, LEMP stacks, and Percona MySQL clusters.\nIf you prefer to manually install and customize MySQL, you can use Compute Engine to create a MySQL database in a matter of minutes. This document provides guidance on which option to choose and walks through the manual installation of a MySQL database on Compute Engine.", "content": "## How to choose the right MySQL deployment optionCloud SQL is a great option if you want the convenience of having Google Cloud take care of the backend database and server administration chores. For example, Cloud SQL provides automated backups and point-in-time recovery. Moreover, your data is replicated across multiple zones for greater availability and resiliency.\nYou might prefer to install MySQL on Compute Engine if you require a MySQL feature that is not supported by Cloud SQL. For example, Cloud SQL does not support user defined functions or the SUPER privilege. For more information, see [the Cloud SQL FAQ](/sql/faq#supportmysqlfeatures) .\nIf you decide to install MySQL on Compute Engine, you can either use Cloud Marketplace to deploy a MySQL installation, or you can manually install MySQL on a Compute Engine instance. Cloud Marketplace provides a convenient way to deploy MySQL as part of larger development stacks. Cloud Marketplace offers several options for MySQL installations, including a standalone MySQL installation, LAMP stacks, LEMP stacks, Nginx Stacks, a Percona MySQL Cluster installation, and several other options.\nIf the Cloud Marketplace offerings don't meet your needs, you can manually install MySQL on a Compute Engine instance. You might, for example, want to deploy MySQL on a custom image that you have created, or you might want to have complete control of the installation process.\nTo manually install MySQL on a Compute Engine instance, you need only create a Compute Engine instance and install MySQL directly onto the instance.\nFor more information about each option, see the following resources:- For Cloud SQL, see the [Cloud SQL for MySQL documentation](/sql/docs/mysql) .\n- For Cloud Marketplace, see the options for MySQL installations in the Google Cloud console: [Go to Cloud Marketplace](https://console.cloud.google.com/marketplace/browse?q=mysql) \n- For manual installation of MySQL on a Compute Engine instance, see the remainder of this document.\n## Objectives\n- Create a Compute Engine instance\n- Install MySQL\n- Connect to MySQL\n## Prerequisites\n- Create a new project in the [Google Cloud console](https://console.cloud.google.com/project) . You can use an existing project, but creating a new project makes cleanup easier.You can complete all of the steps in this document using the Google Cloud console, but if you prefer to use the gcloud CLI, follow these steps to enable the Compute Engine API and install the Google Cloud CLI.\n- Use the Google Cloud console to [enable the Compute Engine API](https://console.cloud.google.com/flows/enableapi?apiid=compute_component) .\n- Install the [gcloud CLI](/sdk/docs) .\n- Configure your workspace to make commands less verbose. Substitute your project's values for `` , `` , and `` in the following commands. For the full list of zones, see [Available regions & zones](/compute/docs/regions-zones/regions-zones#available) .```\ngcloud config set project PROJECT_ID\ngcloud config set compute/region REGION\ngcloud config set compute/zone ZONE\n```\n **Important:** This tutorial uses Compute Engine, which is a billable component of Google Cloud. Use the [Pricing Calculator](/products/calculator) to generate a cost estimate based on your projected usage. New Google Cloud users may be eligible for a [free trial](/free-trial) .## Create a Compute Engine instanceCreate a Compute Engine instance for MySQL and establish an SSH connection to the newly created instance. The default operating system is Debian version 10. If you prefer to use a different operating system for this tutorial, you can choose from the options described on the [public images](/compute/docs/images) page in the Compute Engine documentation.\nTo create a Compute Engine instance in the [Google Cloud console](https://console.cloud.google.com/) :- In the Google Cloud console, go to the **Compute Engine VMinstances** page. [Go to Compute Engine VM instances](https://console.cloud.google.com/compute/instances) .\n- Select your newly created project and click **Continue** .\n- Click **Create instance** ( **New instance** if you have existing instances). Name the instance **mysql-test** .\n- To specify an operating system other than the default value, in the **Boot disk** section, click **Change** to configure the properties for the boot disk. In the **Public images** tab, select an operating system and then click **Save** .\n- To conform with security best practices, create your instance without an external IP address.Expand **Advance options** and expand **Networking** . Under **Networkinterfaces** , expand the **default** interface, and in the **ExternalIPv4 address** menu, select **None** . **Note:** Your instance will need to reach public package repositories during the MySQL installation. To allow internet access, configure Cloud NAT to manage network address translation.\n- Click **Create** .\nTo set up and manage network address translation with Cloud NAT:- In the Google Cloud console, go to the **Cloud NAT** page. [Go to Cloud NAT](https://console.cloud.google.com/net-services/nat/list) \n- Click **Get started** or **Create Cloud NAT gateway** .\n- For **Gateway name** , enter `nat-simple-configuration` .\n- For the **VPC network** for the NAT gateway, choose **default** .\n- For the **Region** for the NAT gateway, choose the region you chose above.\n- For **Cloud Router** , choose **Create new router** .\n- In the dialog, provide a **Name** for the router, `nat-router-simple-configuration` , and click **Create** .\n- Click **Advanced configuration** .\n- Under **Stackdriver logging** , select **Translation and errors** . This sends all logs to Cloud Logging.\n- Click **Create** .\nTo establish an SSH connection:- On the **VM instances** page, find your new VM instance in the list.\n- In the **Connect** column, click **SSH** . The SSH terminal opens in a browser window.\n- To create a Compute Engine instance, use the `gcloud compute instances create` command. To specify the operating system, add the `--image-family` parameter followed by the [image family](/compute/docs/images/image-families-best-practices#how-to-use) or the `--image` parameter followed by the image name for a specific image version. For example, to use the most recent image from the Debian 10 family, add `--image-family debian-10` . When using public images, the [image project](/sdk/gcloud/reference/compute/instances/create#--image-project) must be provided using the `--image-project` parameter.```\ngcloud compute instances create \\\n --image-family debian-10 \\\n --image-project debian-cloud \\\n --no-address \\\n mysql-test\n``` **Note:** To conform with security best practices, the `--no-address` option creates this instance without an external IP address. However, your instance will need to reach public package repositories during the MySQL installation. To allow internet access, configure Cloud NAT to manage network address translation.\n- Create a simple Cloud Router.```\ngcloud compute routers create nat-router-simple-configuration \\\n --network=default\n```\n- Set up and manage network address translation with Cloud NAT.```\ngcloud compute routers nats create nat-simple-configuration \\\n --router=nat-router-simple-configuration \\\n --auto-allocate-nat-external-ips \\\n --nat-all-subnet-ip-ranges \\\n --enable-logging\n```\n- Connect to the instance using `ssh` .```\ngcloud compute ssh \\\n --tunnel-through-iap \\\n mysql-test\n```The SSH connections is made via TCP forwarding that is handled by [Identity-Aware Proxy (IAP)](/iap/docs/tcp-forwarding-overview) . **Note:** Depending on your VPC network configuration or organization policies, it may be necessary to [prepare your project for IAP TCP forwarding](/iap/docs/using-tcp-forwarding) .\n## Install MySQLThe following steps describe how to install MySQL on your Compute Engine instance.\n **These instructions install MySQL 8 or 5.7.** \nVersions 10 and later of Debian contain MariaDB instead of MySQL as part of its package management system. MariaDB maintains compatilibity with the MySQL protocol, but has an independently evolving feature set. For more details, see [MariaDB vs. MySQL](https://mariadb.com/database-topics/mariadb-vs-mysql/) .\nTo install MySQL, download the release package and manually install using the `dpkg` commmand.- Install the `wget` dependency.```\nsudo apt-get install -y wget\n```\n- Download the MySQL Community Server release package.```\nexport DEB_FILE=mysql-apt-config_0.8.20-1_all.deb\ncd /tmp\ncurl -L --output ${DEB_FILE} \\\n  https://dev.mysql.com/get/${DEB_FILE}\n```\n- Verify the integrity of the release package file.```\ncat > ${DEB_FILE}.md5 << EOL\n799bb0aefb93d30564fa47fc5d089aeb ${DEB_FILE}\nEOL\nmd5sum --check ${DEB_FILE}.md5\n```The authenticity and integrity of the file are verified if you see the following output.```\nmysql-apt-config_0.8.20-1_all.deb: OK\n```\n- After you have verified the file, add the MySQL package to the local package repository.```\nsudo dpkg -i ${DEB_FILE}\n```You are prompted to confirm the installation options including the MySQL version.\n- With the top **MySQL Server & Cluster** menu option selected, press **Return** and then use the arrow keys to choose a server version.This guide expects you to choose either MySQL 8.0 or 5.7. Press **Return** on your keyboard after you have selected the version.\n- When you are satisfied with the options selected in the configuration menu, use the arrow keys to select `Ok` in the menu and presss **Return** on your keyboard.\n- Update the package cache.```\nsudo apt-get update\n```If you receive a GPG error similar to , import the missing GPG key(s) with a command that follows this pattern:```\nsudo apt-key adv \\\n --keyserver keyserver.ubuntu.com \\\n --recv-keys 467B942D3A79BD29\n```In the demonstrative error message, the missing public key is `467B942D3A79BD29` ; provide this value with the `--recv-keys` option.Repeat the command to update the package cache.\n- Install MySQL. The installation process starts the MySQL service for you.```\nsudo apt-get -y install mysql-community-server\n```You are prompted to provide some details for the installation such as the root password.\n **These instructions install MySQL 8 or 5.7.** \nBy Default, some versions of Debian, such as Debian 9, install MariaDB as the default MySQL server. MariaDB is designed to be largely compatible with MySQL and can be invoked using the same commands. For details on how MariaDB differs from standard MySQL, see [Moving from MySQL to MariaDB in Debian 9](https://mariadb.com/kb/en/library/moving-from-mysql-to-mariadb-in-debian-9/) .\nTo install MySQL, follow these instructions:- Download the MySQL Community Server release package.```\nexport DEB_FILE=mysql-apt-config_0.8.17-1_all.deb\ncd /tmp\ncurl -L --output ${DEB_FILE} \\\n  https://dev.mysql.com/get/${DEB_FILE}\n```\n- Verify the integrity of the release package file.```\ncat > ${DEB_FILE}.md5 << EOL\n9e393c991311ead61dcc8313aab8e230 ${DEB_FILE}\nEOL\nmd5sum --check ${DEB_FILE}.md5\n```The authenticity and integrity of the file are verified if you see the following output.```\nmysql-apt-config_0.8.17-1_all.deb: OK\n```\n- After you have verified the file, add the MySQL package to the local package repository.```\nsudo dpkg -i ${DEB_FILE}\n```You are prompted to confirm the installation options including the MySQL version.\n- With the top **MySQL Server & Cluster** menu option selected, press **Return** and then use the arrow keys to choose a server version.This guide expects you to choose either MySQL 8.0 or 5.7. Press **Return** on your keyboard after you have selected the version.\n- When you are satisfied with the options selected in the configuration menu, use the arrow keys to select `Ok` in the menu and presss **Return** on your keyboard.\n- Update the package cache.```\nsudo apt-get update\n```If you receive a GPG error similar to , import the missing GPG key(s) with a command that follows this pattern:```\nsudo apt-key adv \\\n --keyserver keyserver.ubuntu.com \\\n --recv-keys 467B942D3A79BD29\n```In the demonstrative error message, the missing public key is `467B942D3A79BD29` ; provide this value with the `--recv-keys` option.Repeat the command to update the package cache.\n- Install MySQL. The installation process starts the MySQL service for you.```\nsudo apt-get -y install mysql-community-server\n```\nFor **Ubuntu 1804 and earlier** these instructions install **MySQL 5.7** . For **Ubuntu 2004 and later** these instructions install **MySQL 8** .- Update the `apt-get` package manager.```\nsudo apt-get update\n```\n- Install MySQL. The installation process starts the MySQL service for you.```\nsudo apt-get -y install mysql-server\n```\n- By default in Ubuntu distributions, mysql authenticates the `root` user with the `auth_socket` plugin. Run this query to verify this default configuration:```\necho \"SELECT user, authentication_string, plugin, host\n  FROM mysql.user WHERE user='root' ;\" \\\n  | sudo mysql -t -u root\n```The output shows that the `root` user connecting from `localhost` will use the `auth_socket` plugin:```\n+------+-----------------------+-------------+-----------+\n| user | authentication_string | plugin  | host  |\n+------+-----------------------+-------------+-----------+\n| root |      | auth_socket | localhost |\n+------+-----------------------+-------------+-----------+\n```\n- Change this setting, and change the root password to one that is difficult to guess:```\nexport PASSWORD=`uuidgen`; echo \"Root password is : $PASSWORD\"\necho \"ALTER USER 'root'@'localhost'\n  IDENTIFIED WITH mysql_native_password BY '$PASSWORD'\" \\\n  | sudo mysql -u root\n```The output contains the new root password:```\nRoot password is : 25fe2177-778a-414f-b80e-5fb8c8671de3\n```\n **These instructions install MySQL 8.** \nVersion 7 of CentOS and RHEL contain MariaDB instead of MySQL as part of its package management system. To install MySQL, you must first update the package manager.- Download the MySQL Community Server release package.```\nexport RPM_FILE=mysql80-community-release-el7-4.noarch.rpm\ncd /tmp\ncurl -L --output ${RPM_FILE} \\\n  https://dev.mysql.com/get/${RPM_FILE}\n```\n- Verify the integrity of the release package file.```\ncat > ${RPM_FILE}.md5 << EOL\n8b55d5fc443660fab90f9dc328a4d9ad ${RPM_FILE}\nEOL\nmd5sum --check ${RPM_FILE}.md5\n```The authenticity and integrity of the file are verified if you see the following output.```\nmysql80-community-release-el7-4.noarch.rpm: OK\n```\n- Update the package manager to include MySQL.```\nsudo rpm -Uvh ${RPM_FILE}\n```\n- Install MySQL.```\nsudo yum -y install mysql-community-server\n```\n- Start MySQL server.```\nsudo /usr/bin/systemctl start mysqld\n```\n- Obtain the temporary root password from server logs```\nsudo cat /var/log/mysqld.log | grep -i 'temporary password'\n```\n **These instructions install MySQL 8.** \nVersion 8 of Rocky Linux, CentOS Stream, and RHEL contain MariaDB instead of MySQL as part of its package management system. To install MySQL, you must first update the package manager.- Download the MySQL Community Server release package.```\nexport RPM_FILE=mysql80-community-release-el8-2.noarch.rpm\ncd /tmp\ncurl -L --output ${RPM_FILE} \\\n  https://dev.mysql.com/get/${RPM_FILE}\n```\n- Verify the integrity of the release package file.```\ncat > ${RPM_FILE}.md5 << EOL\n0ba3feb1c9ee35d30e5ae683accaf54b ${RPM_FILE}\nEOL\nmd5sum --check ${RPM_FILE}.md5\n```The authenticity and integrity of the file are verified if you see the following output.```\nmysql80-community-release-el8-2.noarch.rpm: OK\n```\n- Update the package manager to include MySQL.```\nsudo rpm -iUvh ${RPM_FILE}\n```\n- Install MySQL. During the installation, disable the AppStream repository, so that the installation will use the community server.```\nsudo yum module disable -y mysql\nsudo yum install -y \\\n --disablerepo=appstream \\\n mysql-community-server\n```\n- Start MySQL server.```\nsudo /usr/bin/systemctl start mysqld\n```\n- Obtain the temporary root password from server logs```\nsudo cat /var/log/mysqld.log | grep -i 'temporary password'\n```\n## Improve MySQL installation securityTo improve the security of your MySQL installation, run the `mysql_secure_installation` command. If you didn't set a password during the installation process, create a password in this step. For more information about this command, see the MySQL documentation for [mysql_secure_installation](https://dev.mysql.com/doc/refman/5.0/en/mysql-secure-installation.html) .\n```\nsudo mysql_secure_installation\n```## Connect to MySQLThe following steps describe how to connect to MySQL from your `mysql-test` instance.\n- Connect to MySQL using the MySQL client.```\nsudo mysql -u root -p\n``` **Note:** In most cases, you should use a non-root user account to access your MySQL database. For details on adding a user account, see [Adding User Accounts](https://dev.mysql.com/doc/refman/8.0/en/creating-accounts.html) in the MySQL documentation.When you connect to MySQL, the prompt changes to `mysql>` .You can then run MySQL commands. For example, the following command shows the threads running, including the current connection.```\nmysql> SHOW processlist;\n``````\n+----+-----------------+-----------+------+---------+------+------------------------+------------------+\n| Id | User   | Host  | db | Command | Time | State     | Info    |\n+----+-----------------+-----------+------+---------+------+------------------------+------------------+\n| 5 | event_scheduler | localhost | NULL | Daemon | 1889 | Waiting on empty queue | NULL    |\n| 14 | root   | localhost | NULL | Query | 0 | init     | show processlist |\n+----+-----------------+-----------+------+---------+------+------------------------+------------------+\n2 rows in set (0.00 sec)\n```You can use the following command to generate a list of users.```\nmysql> SELECT User, Host, authentication_string FROM mysql.user;\n``````\n+------------------+-----------+------------------------------------------------------------------------+\n| User    | Host  | authentication_string             |\n+------------------+-----------+------------------------------------------------------------------------+\n| mysql.infoschema | localhost | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |\n| mysql.session | localhost | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |\n| mysql.sys  | localhost | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |\n| root    | localhost | $A$005$,BS{G+*#cVYxb6x40q0aFS5dp2/Kz6u2vennR5qe0eBKVA/6VW5B   |\n+------------------+-----------+------------------------------------------------------------------------+\n4 rows in set (0.00 sec)\n```\n- When you are done running commands, use the `exit` command to quit out of the MySQL client, and then use `exit` again to sign out of the Compute Engine instance.```\nmysql> exit\n``````\nBye\n```\n- Connect to MySQL using the MySQL client.```\nsudo mysql -u root -p\n``` **Note:** In most cases, you should use a non-root user account to access your MySQL database. For details on adding a user account, see [Adding User Accounts](https://dev.mysql.com/doc/refman/8.0/en/creating-accounts.html) in the MySQL documentation.When you connect to MySQL, the prompt changes to `mysql>` .You can then run MySQL commands. For example, the following command shows the threads running, including the current connection.```\nmysql> SHOW processlist;\n``````\n+----+------+-----------+------+---------+------+-------+------------------+\n| Id | User | Host  | db | Command | Time | State | Info    |\n+----+------+-----------+------+---------+------+-------+------------------+\n| 51 | root | localhost | NULL | Query | 0 | NULL | show processlist |\n+----+------+-----------+------+---------+------+-------+------------------+\n1 row in set (0.00 sec)\n```You can use the following command to generate a list of users.```\nmysql> SELECT User, Host, authentication_string FROM mysql.user;\n``````\n+---------------+-----------+-------------------------------------------+\n| User   | Host  | authentication_string      |\n+---------------+-----------+-------------------------------------------+\n| root   | localhost | *A047B05AAB007B33F8F2BD1FD404661D167D6348 |\n| mysql.session | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n| mysql.sys  | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n+---------------+-----------+-------------------------------------------+\n3 rows in set (0.00 sec)\n```\n- When you are done running commands, use the `exit` command to quit out of the MySQL client, and then use `exit` again to sign out of the Compute Engine instance.```\nmysql> exit\n``````\nBye\n```\n## Cleaning up\nAfter you finish the tutorial, you can clean up the resources that you created so that they stop using quota and incurring charges. The following sections describe how to delete or turn off these resources.\n### Deleting the project\nThe easiest way to eliminate billing is to delete the project that you created for the tutorial.\nTo delete the project:\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.### Deleting instances\nTo delete a Compute Engine instance:\n- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Select the checkbox for   the instance that you want to delete.\n- To delete the instance, clickmore_vert **More actions** , click **Delete** ,  and then follow the instructions.\n## What's nextYou've now seen how to install MySQL server on Compute Engine. To see more complex applications that use MySQL, browse the [wide variety of development stacks](/marketplace/?q=mysql) on Cloud Marketplace that use MySQL.\nIf your requirements include high availability and scalability, consider installing [MySQL Cluster](https://www.mysql.com/products/cluster/) on Compute Engine. MySQL Cluster provides high availability and scalability through shared-nothing clustering and auto-sharding. Cloud Marketplace provides a click-to-deploy option for [Percona](/marketplace/?q=percona) , an open source solution for MySQL clustering.\nAnother open source solution for MySQL scalability is [Vitess](http://vitess.io/) , which has served all YouTube database traffic since 2011. Vitess is well-suited for applications that run in containers. For more information on using Vitess in a containerized environment, see [Running Vitess on Kubernetes](http://vitess.io/getting-started/) .\nFor more information about MySQL, see the [official MySQL documentation](https://dev.mysql.com/doc) .\nExplore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Compute Engine"}