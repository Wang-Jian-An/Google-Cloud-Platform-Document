{"title": "Apigee - Enable non-SNI and HTTP clients", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Enable non-SNI and HTTP clients\nYou are currently viewing version 1.3 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nThis topic explains how to enable non-SNI clients, HTTP clients, and a combination of both for use with Apigee hybrid.\n", "content": "## \nHow to configure a non-SNI client\n[Server Name Indication](https://en.wikipedia.org/wiki/Server_Name_Indication)\n[Cloud Load Balancing](https://cloud.google.com/load-balancing/docs)\n- Create an ApigeeRoute custom resource definition (CRD). Be sure that`enableNonSniClient`is set to`true`:```\napiVersion: apigee.cloud.google.com/v1alpha1\nkind: ApigeeRoute\nmetadata:\n name: route_name\n namespace: apigee\nspec:\n hostnames:\n - \"*\"\n ports:\n - number: 443\n protocol: HTTPS\n tls:\n  credentialName: credential_name\n  mode: SIMPLE\n  #optional\n  minProtocolVersion: TLS_AUTO\n selector:\n app: istio-ingressgateway\n enableNonSniClient: true\n```Where:- is the name you give to the CRD.\n- is the name of a Kubernetes Secret deployed to the cluster   that contains TLS credentials   for your virtualhost.\n- `hostname`must be set to the wildcard \"*\". **Note: ** Do not create two ApigeeRoute objects with a wildcard \"*\" hostname.- Open your overrides file and make the change described in the next step.\n- For each environment group, add the ApigeeRoute name to the`additionalGateways`property. For example:```\nvirtualhosts:\n - name: default\n sslCertPath: ./certs/fullchain.pem\n sslKeyPath: ./certs/privkey.pem\n additionalGateways: [\"route_name\"]\n```\n- Save the CRD file. For example:`ApigeeRoute.yaml`\n- Apply the CRD to the cluster:```\nkubectl apply -f ApigeeRoute.yaml -n apigee\n```\n- Apply the change to`virtualhosts`:```\n$APIGEECTL_HOME/apigeectl apply -f overrides.yaml --settings virtualhosts --env $ENVIRONMENT\n```## \n Usage notes\n- **What happens if the cluster has more than one org?** Since the ingress is at the cluster level for a given port (443), and there can only  be one key/cert pair for the ApigeeRoute CRD, all orgs must share the same key/cert pair.\n- **What happens if the cluster has more than one environment group. Will it work\n if the virtual hosts share the same key/cert pair?** All hostnames across all environment groups must use the same key/cert pair.\n- **Why are we creating an ApigeeRoute instead of Gateway?\n** ApigeeRoutes can be validated by Apigee; however, [Gateway](https://istio.io/latest/docs/reference/config/networking/gateway/) (the Istio CRD) cannot be.  Technically, even Gateway can work, but we can prevent potential configuration mistakes  (through a validation webhook).## \n Enable HTTP clients\nThis section explains support for HTTP clients for use with Apigee hybrid.\n**Note:** We do not recommend enabling port 80. All transmission, especially API traffic, should be over TLS (1.2 or higher).\n- Create an ApigeeRoute custom resource definition (CRD). For example:```\napiVersion: apigee.cloud.google.com/v1alpha1\nkind: ApigeeRoute\nmetadata:\n name: route_name\n namespace: apigee\nspec:\n hostnames:\n - \"*\"\n ports:\n - number: 80\n protocol: HTTP\n selector:\n app: istio-ingressgateway\n enableNonSniClient: true\n```Where:- is the name you give to the CRD.\n- `hostnames`must be set to the wildcard \"*\". **Note: ** Do not create two ApigeeRoute objects with a wildcard \"*\" hostname.\n- Open your overrides file and make the change described in the next step.\n- For each environment group, add the ApigeeRoute name to the`additionalGateways`property. For example:```\nvirtualhosts:\n - name: default\n sslCertPath: ./certs/fullchain.pem\n sslKeyPath: ./certs/privkey.pem\n additionalGateways: [\"route_name\"]\n```\n- Save the CRD file. For example:`ApigeeRoute.yaml`\n- Apply the CRD to the cluster:```\nkubectl apply -f ApigeeRoute.yaml -n apigee\n```\n- Apply the change to`virtualhosts`:```\n$APIGEECTL_HOME/apigeectl apply -f overrides.yaml --settings virtualhosts --env $ENVIRONMENT\n```## \n Enable support for both non-SNI and HTTP clients\nThis section explains how to enable **both** non-SNI (port 443) and HTTP (port 80) clients for use with Apigee hybrid.\n**Note:** We do not recommend enabling port 80. All transmission, especially API traffic, should be over TLS (1.2 or higher).\n- Create an ApigeeRoute custom resource definition (CRD). For example:```\napiVersion: apigee.cloud.google.com/v1alpha1\nkind: ApigeeRoute\nmetadata:\n name: route_name\n namespace: apigee\nspec:\n hostnames:\n - \"*\"\n ports:\n - number: 443\n protocol: HTTPS\n tls:\n  credentialName: credential_name\n  mode: SIMPLE\n  #optional\n  minProtocolVersion: TLS_AUTO\n - number: 80\n protocol: HTTP\n selector:\n app: istio-ingressgateway\n enableNonSniClient: true\n```Where:- is the name you give to the CRD.\n- `hostnames`must be set to the wildcard \"*\". **Note: ** Do not create two ApigeeRoute objects with a wildcard \"*\" hostname.\n- is the name of a Kubernetes Secret deployed to the cluster   that contains TLS credentials   for your virtualhost.\n- Open your overrides file and make the change described in the next step.\n- For each environment group, add the ApigeeRoute name to the`additionalGateways`property. For example:```\nvirtualhosts:\n - name: default\n sslCertPath: ./certs/fullchain.pem\n sslKeyPath: ./certs/privkey.pem\n additionalGateways: [\"route_name\"]\n```\n- Save the CRD file. For example:`ApigeeRoute.yaml`\n- Apply the CRD to the cluster:```\nkubectl apply -f ApigeeRoute.yaml -n apigee\n```\n- Apply the change to`virtualhosts`:```\n$APIGEECTL_HOME/apigeectl apply -f overrides.yaml --settings virtualhosts --env $ENVIRONMENT\n```", "guide": "Apigee"}