{"title": "Vertex AI - Feature attributions for forecasting", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Feature attributions for forecasting\n", "content": "## Introduction\nThis page provides a brief conceptual overview of the feature attribution methods available with Vertex AI. For an in-depth technical discussion, see our [AI Explanations Whitepaper](https://storage.googleapis.com/cloud-ai-whitepapers/AI%20Explainability%20Whitepaper.pdf) .\nGlobal feature importance (model feature attributions) shows you how much each feature impacts a model. The values are provided as a percentage for each feature: the higher the percentage, the more impact the feature had on model training. For example, after reviewing the global feature importance for your model, you may come to the following conclusion: \"The model sees that the previous month's sales are usually the strongest predictor of the next month's sales. Factors such as customer count and promotions are important, but they are less important than the sales figures.\"\nTo view the global feature importance for your model, examine the [evaluation metrics](/vertex-ai/docs/tabular-data/forecasting/evaluate-model) .\nLocal feature attributions for time series models indicate how much each feature in a model contributed to a prediction. They measure a feature's contribution to a prediction relative to an input baseline. For numerical features such as sales, the baseline input is the median sales. For categorical features such as the product name, the baseline input is the most common product name. The sum of all attributions is **not** the prediction. The sum indicates how much the prediction differs from the baseline (that is, all inputs are baseline inputs).\nFeature attributions are determined based on forecasts made for . An example forecast is as follows: The required number of counterfactuals scales with the number of columns and the number of paths (service generated). The resulting number of predictions may be orders of magnitude larger than in a normal prediction task and the expected run time scales accordingly.\nYou can use [Forecasting with AutoML](/vertex-ai/docs/tabular-data/forecasting/overview) or [Tabular Workflow for Forecasting](/vertex-ai/docs/tabular-data/tabular-workflows/forecasting) to generate and query local feature attributions. Forecasting with AutoML supports [batch predictions](/vertex-ai/docs/tabular-data/forecasting/get-predictions) only. Tabular Workflow for Forecasting supports both [batch predictions](/vertex-ai/docs/tabular-data/tabular-workflows/forecasting-batch-predictions) and [online predictions](/vertex-ai/docs/tabular-data/tabular-workflows/forecasting-online-predictions) .\n## Advantages\nIf you inspect specific instances, and also aggregate feature attributions across your training dataset, you can get deeper insight into how your model works. Consider the following advantages:\n- **Debugging models** : Feature attributions can help detect issues in the data that standard model evaluation techniques would usually miss.\n- **Optimizing models** : You can identify and remove features that are less important, which can result in more efficient models.\n## Conceptual limitations\nConsider the following limitations of feature attributions:\n- Feature attributions, including local feature importance for AutoML, are specific to individual predictions. Inspecting the feature attributions for an individual prediction may provide good insight, but the insight may not be generalizable to the entire class for that individual instance, or the entire model.To get more generalizable insight for AutoML models, refer to the model feature importance. To get more generalizable insight for other models, aggregate attributions over subsets over your dataset, or the entire dataset.\n- Each attribution only shows how much the feature affected the prediction for that particular example. A single attribution might not reflect the overall behavior of the model. To understand approximate model behavior on an entire dataset, aggregate attributions over the entire dataset.\n- Although feature attributions can help with model debugging, they do not always indicate clearly whether an issue arises from the model or from the data that the model is trained on. Use your best judgment, and diagnose common data issues to narrow the space of potential causes.\n- The attributions depend entirely on the model and data used to train the model. They can only reveal the patterns the model found in the data, and can't detect any fundamental relationships in the data. The presence or absence of a strong attribution to a certain feature doesn't mean there is or is not a relationship between that feature and the target. The attribution merely shows that the model is or is not using the feature in its predictions.\n- Attributions alone cannot tell if your model is fair, unbiased, or of sound quality. Carefully evaluate your training data and evaluation metrics in addition to the attributions.\nFor more information about limitations, see the [AI Explanations Whitepaper](https://storage.googleapis.com/cloud-ai-whitepapers/AI%20Explainability%20Whitepaper.pdf) .\n## Improving feature attributions\nThe following factors have the highest impact on feature attributions:\n- The attribution methods approximate the Shapley value. You can increase the precision of the approximation by increasing the number of paths for the sampled Shapley method. As a result, the attributions could change dramatically.\n- The attributions only express how much the feature affected the change in prediction value, relative to the baseline value. Be sure to choose a meaningful baseline, relevant to the question you're asking of the model. Attribution values and their interpretation might change significantly as you switch baselines.You can view the path count and the baselines in the Explanation Parameters and Metadata.\n## View explanation metadata and parameters\nThe Explanation Parameters and Metadata contain the following:\n- **static_value** : Theused to generate explanations.\n- **pathCount** : The number of, a factor in the amount of time it takes to generate feature attributions.\n- **historical_values** , **prediction_values** : Columns available at forecast.\n- **historical_values** : Columns unavailable at forecast.\nThe model can be viewed using the Vertex AI REST API and includes the explanation spec.\nBefore using any of the request data, make the following replacements:- : Region where your model is stored\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : The ID of the\nHTTP method and URL:\n```\nGET https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT/locations/LOCATION/models/MODEL_ID\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\ncurl -X GET \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ \"https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT/locations/LOCATION/models/MODEL_ID\n\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method GET ` -Headers $headers ` -Uri \"https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT/locations/LOCATION/models/MODEL_ID\n\" | Select-Object -Expand Content\n```\nYou should see output similar to the following for a trained AutoML model.\n## Algorithm\nVertex AI provides feature attributions using , a cooperative game theory algorithm that assigns credit to each player in a game for a particular outcome. Applied to machine learning models, this means that each model feature is treated as a \"player\" in the game and credit is assigned in proportion to the outcome of a particular prediction. For structured data models, Vertex AI uses a sampling approximation of exact Shapley Values called .\nFor in-depth information about how the sampled Shapley method works, read the paper [Bounding the Estimation Error of Sampling-based Shapley Value Approximation](https://arxiv.org/abs/1306.4265) .\n## What's next\nThe following resources provide further useful educational material:\n- [Interpretable Machine Learning: Shapley values](https://christophm.github.io/interpretable-ml-book/shapley.html) \n- [Introduction to Shapley values](https://www.kaggle.com/dansbecker/shap-values#Introduction)", "guide": "Vertex AI"}