{"title": "Vertex AI - Use Terraform to create a user-managed notebooks instance", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Use Terraform to create a user-managed notebooks instance\nVertex AI Workbench user-managed notebooks is [deprecated](/vertex-ai/docs/deprecations) . On January 30, 2025, support for  user-managed notebooks will end and the ability to create user-managed notebooks instances  will be removed. Existing instances will continue to function  but patches, updates, and upgrades won't be available. To continue using  Vertex AI Workbench, we recommend that you [migrate your user-managed notebooks instances to Vertex AI Workbench instances](/vertex-ai/docs/workbench/user-managed/migrate-to-instances) .\nIn this tutorial, you learn how to create a Terraform configuration file and provision a user-managed notebooks instance in Vertex AI in [Service account mode](/vertex-ai/docs/workbench/user-managed/manage-access-jupyterlab#service-account) .\nUse the following tools to complete the steps in this tutorial:\n- **Terraform CLI** : Terraform is preinstalled in the Cloud Shell. You don't need to install Terraform separately to use the Terraform CLI commands.\n- **Cloud Shell Editor** : Use the Cloud Shell Editor to create and manage your Terraform configuration file, and manage the folder structure.\n- **Cloud Shell terminal** : Use the Cloud Shell terminal to run the following Terraform CLI commands, such as [terraform init](https://developer.hashicorp.com/terraform/cli/commands/init) , [terraform plan](https://developer.hashicorp.com/terraform/cli/commands/plan) , [terraform apply](https://developer.hashicorp.com/terraform/cli/commands/apply) , and [terraform destroy](https://developer.hashicorp.com/terraform/cli/commands/destroy) .", "content": "## Before you begin\nBefore you can build the infrastructure for Vertex AI resources using Terraform, set up a Google Cloud project and a development environment. This section also describes how to enable the Vertex AI API, which Terraform uses to interact with the resources in your project.\n### Required roles\nIf you created the project, you have the [Owner](/iam/docs/understanding-roles#owner) ( `roles/owner` ) IAM role on the project, which includes all required permissions. Skip to the next section. If you didn't create the project yourself, continue in this section.\nTo ensure that your user account has the necessary  permissions to create a Vertex AI Workbench user-managed notebooks instance by using Terraform,   ask your administrator to grant your user account the  following IAM roles on the project:\n- Notebooks Admin ( [roles/notebooks.admin](/vertex-ai/docs/workbench/user-managed/iam#notebooks.admin) ) for creating and deleting instances in Vertex AI Workbench.\n- Service Account User ( [roles/iam.serviceAccountUser](/iam/docs/understanding-roles#iam.serviceAccountUser) ) for running operations as a service account. This tutorial doesn't specify a service account, so your user-managed notebooks instance uses the default Compute Engine service account.\n- Service Usage Consumer ( [roles/serviceusage.serviceUsageConsumer](/iam/docs/understanding-roles#serviceusage.serviceUsageConsumer) ) for inspecting service states and operations, and consuming quota and billing for project resources.\nFor more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nYour administrator might also be able to give your user account  the required permissions through [custom  roles](/iam/docs/creating-custom-roles) or other [predefined  roles](/iam/docs/understanding-roles) .\n## Create the folder structure and Terraform configuration file\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- In the Cloud Shell terminal, run the following command to set the home directory as the active directory:```\ncd\n```\n- Run the following command to create a new folder named`terraform`:```\nmkdir terraform\n```\n- [Launch the Cloud Shell Editor.](/shell/docs/launching-cloud-shell-editor) \n- In the **Explorer** pane, right-click the`terraform`folder and then click **New File** .\n- Enter`main.tf`as the filename and click **OK** .## Define the infrastructure in the Terraform configuration file\n- Open the `main.tf` file in the Cloud Shell Editor.\n- Replace the and placeholders in the following Terraform configuration sample, and then copy the sample to the `main.tf` file:```\nresource \"google_project_service\" \"notebooks\" {\u00a0 provider \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = google\u00a0 service \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"notebooks.googleapis.com\"\u00a0 disable_on_destroy = false}resource \"google_notebooks_instance\" \"basic_instance\" {\u00a0 project \u00a0 \u00a0 \u00a0= \"PROJECT_ID\"\u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 = \"notebooks-instance-basic\"\u00a0 provider \u00a0 \u00a0 = google\u00a0 location \u00a0 \u00a0 = \"LOCATION\"\u00a0 machine_type = \"e2-medium\"\u00a0 vm_image {\u00a0 \u00a0 project \u00a0 \u00a0 \u00a0= \"deeplearning-platform-release\"\u00a0 \u00a0 image_family = \"tf-ent-2-9-cu113-notebooks\"\u00a0 }\u00a0 depends_on = [\u00a0 \u00a0 google_project_service.notebooks\u00a0 ]}\n```- : Enter the Google Cloud project ID.\n- : Enter a region and zone for the user-managed notebooks instance. For example, `us-west2-b` . For best network performance, select the region that is geographically closest to you. See the available [user-managed notebooks locations](/vertex-ai/docs/general/locations#user-managed-notebooks-locations) .\n- Save the `main.tf` file.## Initialize the working directory containing the Terraform configuration file\n- To open the Cloud Shell terminal, on the toolbar of the Cloud Shell Editor, click **Open Terminal** .\n- In the Cloud Shell terminal, run the following command to set the `terraform` folder as the current working directory:```\ncd ~/terraform\n```\n- Run the following command:```\nterraform init\n```\n- Terraform initializes the working directory. The following output appears:```\nTerraform has been successfully initialized!\nYou may now begin working with Terraform. Try running \"terraform plan\" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n``` **Note:** You need to run `terraform init` every time you update any configuration file in the Terraform working directory.## Preview the execution plan based on the Terraform configuration\nThe Terraform execution plan indicates the changes that Terraform plans to make to the Vertex AI infrastructure and services.\nRun the following command to view the Terraform execution plan.\n```\nterraform plan\n```\nIf prompted to authorize Cloud Shell, click **Authorize** . Cloud Shell uses the user's credentials by default upon authorizing.\nYou'll see output similar to the following:\n```\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the followingsymbols:\u00a0 + createTerraform will perform the following actions:\u00a0 # google_notebooks_instance.basic_instance will be created\u00a0 + resource \"google_notebooks_instance\" \"basic_instance\" {\u00a0 \u00a0 \u00a0 + create_time \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 + id \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= (known after apply)\u00a0 \u00a0 \u00a0 + labels \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= (known after apply)\u00a0 \u00a0 \u00a0 + location \u00a0 \u00a0 \u00a0 \u00a0= \"us-west2-b\"\u00a0 \u00a0 \u00a0 + machine_type \u00a0 \u00a0= \"e2-medium\"\u00a0 \u00a0 \u00a0 + name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"notebooks-instance-basic\"\u00a0 \u00a0 \u00a0 + network \u00a0 \u00a0 \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 + project \u00a0 \u00a0 \u00a0 \u00a0 = \"my_project\"\u00a0 \u00a0 \u00a0 + proxy_uri \u00a0 \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 + service_account = (known after apply)\u00a0 \u00a0 \u00a0 + state \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 + subnet \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= (known after apply)\u00a0 \u00a0 \u00a0 + update_time \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 + shielded_instance_config {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + enable_integrity_monitoring = (known after apply)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + enable_secure_boot \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= (known after apply)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + enable_vtpm \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 + vm_image {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + image_family = \"tf-ent-2-9-cu113-notebooks\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + project \u00a0 \u00a0 \u00a0= \"deeplearning-platform-release\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 # google_project_service.notebooks will be created\u00a0 + resource \"google_project_service\" \"notebooks\" {\u00a0 \u00a0 \u00a0 + disable_on_destroy = false\u00a0 \u00a0 \u00a0 + id \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 + project \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= (known after apply)\u00a0 \u00a0 \u00a0 + service \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"notebooks.googleapis.com\"\u00a0 \u00a0 }Plan: 2 to add, 0 to change, 0 to destroy.\n```\n- `my_project` indicates the Google Cloud project ID that you specified.\n- `us-west2-b` indicates the region and zone for the user-managed notebooks instance that you specified.## Apply the changes proposed in the execution plan\n- Run the following command to apply the changes from the execution plan to the Vertex AI infrastructure and create the user-managed notebooks instance:```\nterraform apply\n```\n- You'll see output similar to the following:```\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the followingsymbols:\u00a0 + createTerraform will perform the following actions:\u00a0 # google_notebooks_instance.basic_instance will be created\u00a0 + resource \"google_notebooks_instance\" \"basic_instance\" {\u00a0 \u00a0 \u00a0 + create_time \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 + id \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= (known after apply)\u00a0 \u00a0 \u00a0 + labels \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= (known after apply)\u00a0 \u00a0 \u00a0 + location \u00a0 \u00a0 \u00a0 \u00a0= \"us-west2-b\"\u00a0 \u00a0 \u00a0 + machine_type \u00a0 \u00a0= \"e2-medium\"\u00a0 \u00a0 \u00a0 + name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"notebooks-instance-basic\"\u00a0 \u00a0 \u00a0 + network \u00a0 \u00a0 \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 + project \u00a0 \u00a0 \u00a0 \u00a0 = \"my_project\"\u00a0 \u00a0 \u00a0 + proxy_uri \u00a0 \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 + service_account = (known after apply)\u00a0 \u00a0 \u00a0 + state \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 + subnet \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= (known after apply)\u00a0 \u00a0 \u00a0 + update_time \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 + shielded_instance_config {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + enable_integrity_monitoring = (known after apply)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + enable_secure_boot \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= (known after apply)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + enable_vtpm \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 + vm_image {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + image_family = \"tf-ent-2-9-cu113-notebooks\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + project \u00a0 \u00a0 \u00a0= \"deeplearning-platform-release\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 # google_project_service.notebooks will be created\u00a0 + resource \"google_project_service\" \"notebooks\" {\u00a0 \u00a0 \u00a0 + disable_on_destroy = false\u00a0 \u00a0 \u00a0 + id \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = (known after apply)\u00a0 \u00a0 \u00a0 + project \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= (known after apply)\u00a0 \u00a0 \u00a0 + service \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"notebooks.googleapis.com\"\u00a0 \u00a0 }Plan: 2 to add, 0 to change, 0 to destroy.Do you want to perform these actions?\u00a0 Terraform will perform the actions described above.\u00a0 Only 'yes' will be accepted to approve.\u00a0 Enter a value:\n```- `my_project` indicates the Google Cloud project ID that you specified.\n- `us-west2-b` indicates the region and zone for the user-managed notebooks instance that you specified.\n- Type `yes` and press **Enter** . You'll see output similar to the following:```\nApply complete! Resources: 2 added, 0 changed, 0 destroyed.\n```## View your user-managed notebooks instance\nIn the Google Cloud console, go to the **User-managed notebooks** page.\n[Go to User-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/user-managed)\nThe new notebook named \"notebooks-instance-basic\" appears listed in the table. Note that the new user-managed notebooks instance might take a few minutes to get provisioned after you run `terraform apply` .\n## Clean up your project\nClean up the Google Cloud resources that you created during this tutorial. Follow these steps to avoid incurring unexpected charges from some of the resources:\n- In the Cloud Shell terminal, run the following command to set the `terraform` folder as the current working directory:```\ncd ~/terraform\n```\n- To delete the Vertex AI resources that you created based on your Terraform configuration, run the following command:```\nterraform destroy\n```\n- You'll see output similar to the following:```\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\u00a0 - destroyTerraform will perform the following actions:\u00a0 # google_notebooks_instance.basic_instance will be destroyed\u00a0 - resource \"google_notebooks_instance\" \"basic_instance\" {\u00a0 \u00a0 \u00a0 - create_time \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"2022-12-01T21:14:05.065893475Z\" -> null\u00a0 \u00a0 \u00a0 - id \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"projects/my_project/locations/us-west2-b/instances/notebooks-instance-basic\" -> null\u00a0 \u00a0 \u00a0 - install_gpu_driver \u00a0 \u00a0 = false -> null\u00a0 \u00a0 \u00a0 - labels \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - \"goog-caip-notebook\" = \"\"\u00a0 \u00a0 \u00a0 \u00a0 } -> null\u00a0 \u00a0 \u00a0 - location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"us-west2-b\" -> null\u00a0 \u00a0 \u00a0 - machine_type \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"e2-medium\" -> null\u00a0 \u00a0 \u00a0 - name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"notebooks-instance-basic\" -> null\u00a0 \u00a0 \u00a0 - network \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"https://www.googleapis.com/compute/v1/projects/my_project/global/networks/default\" -> null\u00a0 \u00a0 \u00a0 - no_proxy_access \u00a0 \u00a0 \u00a0 \u00a0= false -> null\u00a0 \u00a0 \u00a0 - no_public_ip \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = false -> null\u00a0 \u00a0 \u00a0 - project \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"my_project\" -> null\u00a0 \u00a0 \u00a0 - service_account \u00a0 \u00a0 \u00a0 \u00a0= \"329223940713-compute@developer.gserviceaccount.com\" -> null\u00a0 \u00a0 \u00a0 - service_account_scopes = [] -> null\u00a0 \u00a0 \u00a0 - state \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"PROVISIONING\" -> null\u00a0 \u00a0 \u00a0 - subnet \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"https://www.googleapis.com/compute/v1/projects/my_project/regions/us-west2/subnetworks/default\" -> null\u00a0 \u00a0 \u00a0 - tags \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = [] -> null\u00a0 \u00a0 \u00a0 - update_time \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"2022-12-01T21:14:19.048432376Z\" -> null\u00a0 \u00a0 \u00a0 - shielded_instance_config {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - enable_integrity_monitoring = true -> null\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - enable_secure_boot \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= false -> null\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - enable_vtpm \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = true -> null\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 - vm_image {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - image_family = \"tf-ent-2-9-cu113-notebooks\" -> null\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - project \u00a0 \u00a0 \u00a0= \"deeplearning-platform-release\" -> null\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 # google_project_service.notebooks will be destroyed\u00a0 - resource \"google_project_service\" \"notebooks\" {\u00a0 \u00a0 \u00a0 - disable_on_destroy = false -> null\u00a0 \u00a0 \u00a0 - id \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"my_project/notebooks.googleapis.com\" -> null\u00a0 \u00a0 \u00a0 - project \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"my_project\" -> null\u00a0 \u00a0 \u00a0 - service \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"notebooks.googleapis.com\" -> null\u00a0 \u00a0 }Plan: 0 to add, 0 to change, 2 to destroy.Do you really want to destroy all resources?\u00a0 Terraform will destroy all your managed infrastructure, as shown above.\u00a0 There is no undo. Only 'yes' will be accepted to confirm.\u00a0 Enter a value:\n```- `my_project` indicates the Google Cloud project ID that you specified.\n- `us-west2-b` indicates the region and zone for the user-managed notebooks instance that you specified.\n- Type `yes` and press **Enter** . You'll see output similar to the following:```\nDestroy complete! Resources: 2 destroyed.\n```\n- To verify that the user-managed notebooks instance was deleted, go to the **User-managed notebooks** page. [Go to User-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/user-managed) \n- [Launch the Cloud Shell Editor.](/shell/docs/launching-cloud-shell-editor) \n- To delete the `terraform` folder and its contents, right-click the `terraform` folder in the **Explorer** pane and then click **Delete** .\n- When prompted, click **OK** to confirm.## More ways to use Terraform in Vertex AI\nThis tutorial showed you how to use Terraform by creating only one configuration file and provisioning infrastructure based on one Terraform resource. You can also use Terraform in the following ways:\n- Add multiple Terraform resources to the same Terraform configuration file. For a list of Terraform resources for Vertex AI, see [Terraform resources available for Vertex AI](/vertex-ai/docs/start/use-terraform-vertex-ai#terraform_resources_vertex_ai) .\n- Create a directory structure comprising multiple folders and Terraform configuration files. For example, you can create a separate folder and Terraform configuration file for each type of Terraform resource.## What's next\n- [Learn more about the google_notebooks_instance Terraform resource in the Terraform registry](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/notebooks_environment) .\n- Learn more about [user-managed notebooks](/vertex-ai/docs/workbench/user-managed/introduction) and [Vertex AI Workbench](/vertex-ai/docs/workbench/introduction) .\n- [Install Terraform](https://developer.hashicorp.com/terraform/downloads) on your local command-line interface.\n- Learn more about Terraform on the [Terraform Developer website](https://developer.hashicorp.com/terraform/) .\n- Refer to Terraform resource documentation in the [Terraform registry](https://registry.terraform.io/providers/hashicorp/google/latest/docs/) .", "guide": "Vertex AI"}