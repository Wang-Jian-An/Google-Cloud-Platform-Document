{"title": "Vertex AI - Get TabNet batch predictions", "url": "https://cloud.google.com/vertex-ai/docs/tabular-data/tabular-workflows/tabnet-batch-predictions", "abstract": "# Vertex AI - Get TabNet batch predictions\nThis page shows you how to make a batch prediction request to your trained classification or regression model using the Google Cloud console or the Vertex AI API.\nA batch prediction request is an asynchronous request (as opposed to [online prediction](/vertex-ai/docs/tabular-data/tabular-workflows/tabnet-online-predictions) , which is a synchronous request). You request batch predictions directly from the model resource without needing to deploy the model to an endpoint. For tabular data, use batch predictions when you don't require an immediate response and want to process accumulated data by using a single request.\nTo make a batch prediction request, you specify an [input source](#input_data) and an [output format](#output_format) where Vertex AI stores predictions results.\n**Note:** To minimize processing time when you use the Google Cloud console to create batch predictions, we recommend that you select input and output locations that are in the same region as your model. If you use the API to create batch predictions, send requests to a service endpoint (such as `https://us-central1-aiplatform.googleapis.com` ) that is in the same region or geographically close to your input and output locations.\n", "content": "## Before you begin\nBefore you can make a batch prediction request, you must first [train](/vertex-ai/docs/tabular-data/tabular-workflows/tabnet-train) a model.\n## Input data\nThe input data for batch prediction requests is the data that your model uses to make predictions. For classification or regression models, you can provide input data in one of two formats:\n- BigQuery tables\n- CSV objects in Cloud Storage\nWe recommend that you use the same format for your input data as you used for training the model. For example, if you trained your model using data in BigQuery, it is best to use a BigQuery table as the input for your batch prediction. Because Vertex AI treats all CSV input fields as strings, mixing training and input data formats may cause errors.\nYour data source must contain tabular data that includes all of the columns, in any order, that were used to train the model. You can include columns that were not in the training data, or that were in the training data but excluded from use for training. These extra columns are included in the output but don't affect the prediction results.\n### Input data requirements\nIf you choose a BigQuery table as the input, you must ensure the following:- BigQuery data source tables must be no larger than 100 GB.\n- If the table is in a different project, you must grant the`BigQuery Data Editor`role to the Vertex AI service account in that project.\nIf you choose a CSV object in Cloud Storage as the input, you must ensure the following:- The data source must begin with a header row with the column names.\n- Each data source object must not be larger than 10 GB. You can include multiple files, up to a maximum amount of 100 GB.\n- If the Cloud Storage bucket is in a different project, you must grant the`Storage Object Creator`role to the Vertex AI service account in that project.\n- You must enclose all strings in double quotation marks (\").## Output format\nThe output format of your batch prediction request doesn't need to be the same as the format that you used for the input. For example, if you used BigQuery table as the input, you can output the results to a CSV object in Cloud Storage.\n## Make a batch prediction request to your model\nTo make batch prediction requests, you can use the Google Cloud console or the Vertex AI API. The input data source can be CSV objects stored in a Cloud Storage bucket or BigQuery tables. Depending on the amount of data that you submit as input, a batch prediction task can take some time to complete.\nUse the Google Cloud console to request a batch prediction.- In the Google Cloud console, in the Vertex AI section, go to  the **Batch predictions** page. [Go to the Batch predictions page](https://console.cloud.google.com/vertex-ai/batch-predictions) \n- Click **Create** to open the **New batch prediction** window.\n- For **Define your batch prediction** , complete the following steps:- Enter a name for the batch prediction.\n- For **Model name** , select the name of the model to use for this   batch prediction.\n- For **Version** , select the model version to use for this   batch prediction.\n- For **Select source** , select whether your source input data is a CSV   file on Cloud Storage or a table in BigQuery.- For CSV files, specify the Cloud Storage location where your CSV   input file is located.\n- For BigQuery tables, specify the project ID where the   table is located, the BigQuery dataset ID, and the   BigQuery table or view ID.\n- For the **Output** , select **CSV** or **BigQuery** .- For CSV, specify the Cloud Storage bucket where   Vertex AI stores your output.\n- For BigQuery, you can specify a project ID or an existing   dataset:- To specify the project ID, enter the project ID in the **Google\n    Cloud project ID** field. Vertex AI creates a new output    dataset for you.\n- To specify an existing dataset, enter its BigQuery path    in the **Google Cloud project ID** field, such as`bq://projectid.datasetid`.- Optional: [Model Monitoring](/vertex-ai/docs/model-monitoring/overview) analysis for batch predictions is available in [Preview](/products#product-launch-stages) . See the [Prerequisites](/vertex-ai/docs/model-monitoring/model-monitoring-batch-predictions#prerequisites) for adding skew detection configuration to your batch  prediction job.- Click to toggle on **Enable model monitoring for this batch prediction** .\n- Select a **Training data source** . Enter the data path or location for   the training data source that you selected.\n- Optional: Under **Alert thresholds** , specify thresholds at which to trigger alerts.\n- For **Notification emails** , enter one or more comma-separated email   addresses to receive alerts when a model exceeds an alerting threshold.\n- Optional: For **Notification channels** , add [Cloud Monitoring](/monitoring/support/notification-options) channels to receive alerts when a model exceeds an alerting threshold.   You can select existing Cloud Monitoring channels or create a new   one by clicking **Manage notification channels** . The Console   supports PagerDuty, Slack, and Pub/Sub notification   channels.- Click **Create** .\nYou use the [batchPredictionJobs.create](/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs/create) method to request a batch prediction.\nBefore using any of the request data, make the following replacements:- : Region where Model is stored and batch prediction job is executed. For example,`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) \n- : Display name for the batch job\n- : The ID for the model to use for making predictions\n- : Reference to the BigQuery data source. In the form:```\nbq://bqprojectId.bqDatasetId.bqTableId\n```\n- : Reference to the BigQuery destination (where the  predictions will be written). Specify the project ID and, **optionally** ,  an existing dataset ID. If you specify just the project ID,  Vertex AI creates a new output dataset for you. Use the  following form:```\nbq://bqprojectId.bqDatasetId\n```\n- : The machine resources to be used for this batch prediction job. [Learn more](/vertex-ai/docs/predictions/configure-compute) .\n- : The starting number of nodes for this batch prediction job.  The node count can be increased or decreased as required by load, up to the maximum number of  nodes, but will never fall below this number.\n- : The maximum number of nodes for this batch prediction job. The  node count can be increased or decreased as required by load, but will never exceed the  maximum. Optional, defaults to 10.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/batchPredictionJobs\n```\nRequest JSON body:\n```\n{\n \"displayName\": \"BATCH_JOB_NAME\",\n \"model\": \"MODEL_ID\",\n \"inputConfig\": {\n \"instancesFormat\": \"bigquery\",\n \"bigquerySource\": {\n  \"inputUri\": \"INPUT_URI\"\n }\n },\n \"outputConfig\": {\n \"predictionsFormat\": \"bigquery\",\n \"bigqueryDestination\": {\n  \"outputUri\": \"OUTPUT_URI\"\n }\n },\n \"dedicatedResources\": {\n \"machineSpec\": {\n  \"machineType\": \"MACHINE_TYPE\",\n  \"acceleratorCount\": \"0\"\n },\n \"startingReplicaCount\": STARTING_REPLICA_COUNT,\n \"maxReplicaCount\": MAX_REPLICA_COUNT\n },\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/batchPredictionJobs\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/batchPredictionJobs\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/batchPredictionJobs/67890\",\n \"displayName\": \"batch_job_1 202005291958\",\n \"model\": \"projects/12345/locations/us-central1/models/5678\",\n \"state\": \"JOB_STATE_PENDING\",\n \"inputConfig\": {\n \"instancesFormat\": \"bigquery\",\n \"bigquerySource\": {\n  \"inputUri\": \"INPUT_URI\"\n }\n },\n \"outputConfig\": {\n \"predictionsFormat\": \"bigquery\",\n \"bigqueryDestination\": {\n  \"outputUri\": bq://12345\n }\n },\n \"dedicatedResources\": {\n \"machineSpec\": {\n  \"machineType\": \"n1-standard-32\",\n  \"acceleratorCount\": \"0\"\n },\n \"startingReplicaCount\": 2,\n \"maxReplicaCount\": 6\n },\n \"manualBatchTuningParameters\": {\n \"batchSize\": 4\n },\n \"generateExplanation\": false,\n \"outputInfo\": {\n \"bigqueryOutputDataset\": \"bq://12345.reg_model_2020_10_02_06_04\n }\n \"state\": \"JOB_STATE_PENDING\",\n \"createTime\": \"2020-09-30T02:58:44.341643Z\",\n \"updateTime\": \"2020-09-30T02:58:44.341643Z\",\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\nIn the following sample, replace\nand\nwith `bigquery`. To learn how to replace the other placeholders, see the `REST & CMD LINE` tab of this section.\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/CreateBatchPredictionJobBigquerySample.java) \n```\nimport com.google.cloud.aiplatform.v1.BatchPredictionJob;import com.google.cloud.aiplatform.v1.BigQueryDestination;import com.google.cloud.aiplatform.v1.BigQuerySource;import com.google.cloud.aiplatform.v1.JobServiceClient;import com.google.cloud.aiplatform.v1.JobServiceSettings;import com.google.cloud.aiplatform.v1.LocationName;import com.google.cloud.aiplatform.v1.ModelName;import com.google.gson.JsonObject;import com.google.protobuf.Value;import com.google.protobuf.util.JsonFormat;import java.io.IOException;public class CreateBatchPredictionJobBigquerySample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"PROJECT\";\u00a0 \u00a0 String displayName = \"DISPLAY_NAME\";\u00a0 \u00a0 String modelName = \"MODEL_NAME\";\u00a0 \u00a0 String instancesFormat = \"INSTANCES_FORMAT\";\u00a0 \u00a0 String bigquerySourceInputUri = \"BIGQUERY_SOURCE_INPUT_URI\";\u00a0 \u00a0 String predictionsFormat = \"PREDICTIONS_FORMAT\";\u00a0 \u00a0 String bigqueryDestinationOutputUri = \"BIGQUERY_DESTINATION_OUTPUT_URI\";\u00a0 \u00a0 createBatchPredictionJobBigquerySample(\u00a0 \u00a0 \u00a0 \u00a0 project,\u00a0 \u00a0 \u00a0 \u00a0 displayName,\u00a0 \u00a0 \u00a0 \u00a0 modelName,\u00a0 \u00a0 \u00a0 \u00a0 instancesFormat,\u00a0 \u00a0 \u00a0 \u00a0 bigquerySourceInputUri,\u00a0 \u00a0 \u00a0 \u00a0 predictionsFormat,\u00a0 \u00a0 \u00a0 \u00a0 bigqueryDestinationOutputUri);\u00a0 }\u00a0 static void createBatchPredictionJobBigquerySample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String displayName,\u00a0 \u00a0 \u00a0 String model,\u00a0 \u00a0 \u00a0 String instancesFormat,\u00a0 \u00a0 \u00a0 String bigquerySourceInputUri,\u00a0 \u00a0 \u00a0 String predictionsFormat,\u00a0 \u00a0 \u00a0 String bigqueryDestinationOutputUri)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 JobServiceSettings settings =\u00a0 \u00a0 \u00a0 \u00a0 JobServiceSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEndpoint(\"us-central1-aiplatform.googleapis.com:443\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (JobServiceClient client = JobServiceClient.create(settings)) {\u00a0 \u00a0 \u00a0 JsonObject jsonModelParameters = new JsonObject();\u00a0 \u00a0 \u00a0 Value.Builder modelParametersBuilder = Value.newBuilder();\u00a0 \u00a0 \u00a0 JsonFormat.parser().merge(jsonModelParameters.toString(), modelParametersBuilder);\u00a0 \u00a0 \u00a0 Value modelParameters = modelParametersBuilder.build();\u00a0 \u00a0 \u00a0 BigQuerySource bigquerySource =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BigQuerySource.newBuilder().setInputUri(bigquerySourceInputUri).build();\u00a0 \u00a0 \u00a0 BatchPredictionJob.InputConfig inputConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BatchPredictionJob.InputConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInstancesFormat(instancesFormat)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setBigquerySource(bigquerySource)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 BigQueryDestination bigqueryDestination =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BigQueryDestination.newBuilder().setOutputUri(bigqueryDestinationOutputUri).build();\u00a0 \u00a0 \u00a0 BatchPredictionJob.OutputConfig outputConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BatchPredictionJob.OutputConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setPredictionsFormat(predictionsFormat)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setBigqueryDestination(bigqueryDestination)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 String modelName = ModelName.of(project, location, model).toString();\u00a0 \u00a0 \u00a0 BatchPredictionJob batchPredictionJob =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BatchPredictionJob.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDisplayName(displayName)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setModel(modelName)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setModelParameters(modelParameters)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInputConfig(inputConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setOutputConfig(outputConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 LocationName parent = LocationName.of(project, location);\u00a0 \u00a0 \u00a0 BatchPredictionJob response = client.createBatchPredictionJob(parent, batchPredictionJob);\u00a0 \u00a0 \u00a0 System.out.format(\"response: %s\\n\", response);\u00a0 \u00a0 \u00a0 System.out.format(\"\\tName: %s\\n\", response.getName());\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\nIn the following sample, set the `instances_format` and `predictions_format` parameters to `\"bigquery\"`. To learn how to set the other parameters, see the `REST & CMD LINE` tab of this section.\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/snippets/job_service/create_batch_prediction_job_bigquery_sample.py) \n```\nfrom google.cloud import aiplatform_v1beta1from google.protobuf import json_formatfrom google.protobuf.struct_pb2 import Valuedef create_batch_prediction_job_bigquery_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 display_name: str,\u00a0 \u00a0 model_name: str,\u00a0 \u00a0 instances_format: str,\u00a0 \u00a0 bigquery_source_input_uri: str,\u00a0 \u00a0 predictions_format: str,\u00a0 \u00a0 bigquery_destination_output_uri: str,\u00a0 \u00a0 location: str = \"us-central1\",\u00a0 \u00a0 api_endpoint: str = \"us-central1-aiplatform.googleapis.com\",):\u00a0 \u00a0 # The AI Platform services require regional API endpoints.\u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 # Initialize client that will be used to create and send requests.\u00a0 \u00a0 # This client only needs to be created once, and can be reused for multiple requests.\u00a0 \u00a0 client = aiplatform_v1beta1.JobServiceClient(client_options=client_options)\u00a0 \u00a0 model_parameters_dict = {}\u00a0 \u00a0 model_parameters = json_format.ParseDict(model_parameters_dict, Value())\u00a0 \u00a0 batch_prediction_job = {\u00a0 \u00a0 \u00a0 \u00a0 \"display_name\": display_name,\u00a0 \u00a0 \u00a0 \u00a0 # Format: 'projects/{project}/locations/{location}/models/{model_id}'\u00a0 \u00a0 \u00a0 \u00a0 \"model\": model_name,\u00a0 \u00a0 \u00a0 \u00a0 \"model_parameters\": model_parameters,\u00a0 \u00a0 \u00a0 \u00a0 \"input_config\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"instances_format\": instances_format,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"bigquery_source\": {\"input_uri\": bigquery_source_input_uri},\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"output_config\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"predictions_format\": predictions_format,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"bigquery_destination\": {\"output_uri\": bigquery_destination_output_uri},\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 # optional\u00a0 \u00a0 \u00a0 \u00a0 \"generate_explanation\": True,\u00a0 \u00a0 }\u00a0 \u00a0 parent = f\"projects/{project}/locations/{location}\"\u00a0 \u00a0 response = client.create_batch_prediction_job(\u00a0 \u00a0 \u00a0 \u00a0 parent=parent, batch_prediction_job=batch_prediction_job\u00a0 \u00a0 )\u00a0 \u00a0 print(\"response:\", response)\n```\nYou use the [batchPredictionJobs.create](/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs/create) method to request a batch prediction.\nBefore using any of the request data, make the following replacements:- : Region where Model is stored and batch prediction job is executed. For example,`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) \n- : Display name for the batch job\n- : The ID for the model to use for making predictions\n- : Paths (URIs) to the Cloud Storage buckets containing the training data.  There can be more than one. Each URI has the form:```\ngs://bucketName/pathToFileName\n```\n- : Path to a Cloud Storage destination where the  predictions will be written. Vertex AI writes batch predictions to a timestamped  subdirectory of this path. Set this value to a string with the following format:```\ngs://bucketName/pathToOutputDirectory\n```\n- : The machine resources to be used for this batch prediction job. [Learn more](/vertex-ai/docs/predictions/configure-compute) .\n- : The starting number of nodes for this batch prediction job.  The node count can be increased or decreased as required by load, up to the maximum number of  nodes, but will never fall below this number.\n- : The maximum number of nodes for this batch prediction job. The  node count can be increased or decreased as required by load, but will never exceed the  maximum. Optional, defaults to 10.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/batchPredictionJobs\n```\nRequest JSON body:\n```\n{\n \"displayName\": \"BATCH_JOB_NAME\",\n \"model\": \"MODEL_ID\",\n \"inputConfig\": {\n \"instancesFormat\": \"csv\",\n \"gcsSource\": {\n  \"uris\": [  URI1,...\n  ]\n },\n },\n \"outputConfig\": {\n \"predictionsFormat\": \"csv\",\n \"gcsDestination\": {\n  \"outputUriPrefix\": \"OUTPUT_URI_PREFIX\"\n }\n },\n \"dedicatedResources\": {\n \"machineSpec\": {\n  \"machineType\": \"MACHINE_TYPE\",\n  \"acceleratorCount\": \"0\"\n },\n \"startingReplicaCount\": STARTING_REPLICA_COUNT,\n \"maxReplicaCount\": MAX_REPLICA_COUNT\n },\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/batchPredictionJobs\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/batchPredictionJobs\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT__ID/locations/LOCATION_ID/batchPredictionJobs/67890\",\n \"displayName\": \"batch_job_1 202005291958\",\n \"model\": \"projects/12345/locations/us-central1/models/5678\",\n \"state\": \"JOB_STATE_PENDING\",\n \"inputConfig\": {\n \"instancesFormat\": \"csv\",\n \"gcsSource\": {\n  \"uris\": [  \"gs://bp_bucket/reg_mode_test\"\n  ]\n }\n },\n \"outputConfig\": {\n \"predictionsFormat\": \"csv\",\n \"gcsDestination\": {\n  \"outputUriPrefix\": \"OUTPUT_URI_PREFIX\"\n }\n },\n \"dedicatedResources\": {\n \"machineSpec\": {\n  \"machineType\": \"n1-standard-32\",\n  \"acceleratorCount\": \"0\"\n },\n \"startingReplicaCount\": 2,\n \"maxReplicaCount\": 6\n },\n \"manualBatchTuningParameters\": {\n \"batchSize\": 4\n }\n \"outputInfo\": {\n \"gcsOutputDataset\": \"OUTPUT_URI_PREFIX/prediction-batch_job_1 202005291958-2020-09-30T02:58:44.341643Z\"\n }\n \"state\": \"JOB_STATE_PENDING\",\n \"createTime\": \"2020-09-30T02:58:44.341643Z\",\n \"updateTime\": \"2020-09-30T02:58:44.341643Z\",\n}\n```\n## Retrieve batch prediction results\nVertex AI sends the output of batch predictions to the destination that you specified, which can be either BigQuery or Cloud Storage.\nIf you are using BigQuery, the output of batch prediction is stored in an output dataset. If you had provided a dataset to Vertex AI, the name of the dataset ( ) is the name you had provided earlier. If you did not provide an output dataset, Vertex AI created one for you. You can find its name ( ) with the following steps:- In the Google Cloud console, go to the Vertex AI **Batch predictions** page. [Go to the Batch predictions page](https://console.cloud.google.com/vertex-ai/batch-predictions) \n- Select the prediction you created.\n- The output dataset is given in **Export location** . The dataset name is  formatted as follows:`prediction_` `` `_` ``\nThe output dataset contains one or more of the following three output tables:- Predictions tableThis table contains a row for every row in your input data where a  prediction was requested (that is, where = null).\n- Errors tableThis table contains a row for each non-critical error encountered  during batch prediction. Each non-critical error corresponds with a row  in the input data that Vertex AI could not return a forecast for.\nThe name of the table ( ) is formed by  appending `predictions_` with the timestamp of when the batch prediction  job started: `predictions_` `` \nTo retrieve predictions, go to the BigQuery page.\n [Go to BigQuery](https://console.cloud.google.com/bigquery) \nThe format of the query depends on your model type:\n **Classification:** \n```\nSELECT predicted_TARGET_COLUMN_NAME.classes AS classes,\npredicted_TARGET_COLUMN_NAME.scores AS scores\nFROM BQ_DATASET_NAME.BQ_PREDICTIONS_TABLE_NAME\n```\n `classes` is the list of potential classes, and `scores` are the corresponding confidence scores.\n **Regression:** \n```\nSELECT predicted_TARGET_COLUMN_NAME.value\nFROM BQ_DATASET_NAME.BQ_PREDICTIONS_TABLE_NAME\n```\nIf your model uses probabilistic inference, `predicted_` `` `.value` contains the minimizer of the optimization objective. For example, if your optimization objective is `minimize-rmse` , `predicted_` `` `.value` contains the mean value. If it is `minimize-mae` , the `predicted_` `` `.value` contains the median value.\nIf your model uses probabilistic inference with quantiles, Vertex AI provides quantile values and predictions in addition to the minimizer of the optimization objective. Quantile values are set during model training. Quantile predictions are the prediction values associated with the quantile values.\nYou can find feature importance in the predictions  table as well. To access importance for a feature , run the following query:\n```\nSELECT predicted_TARGET_COLUMN_NAME.feature_importance.BQ_FEATURE_NAME FROM BQ_DATASET_NAME.BQ_PREDICTIONS_TABLE_NAME\n \n```\nThe name of the table (\n) is formed by appending\n`errors_`\nwith the timestamp of when the batch prediction job started:\n`errors_` ``\nTo retrieve the errors validation table:\n- In the console, go to the BigQuery page. [Go to BigQuery](https://console.cloud.google.com/bigquery) \n- Run the following query:```\nSELECT * FROM BQ_DATASET_NAME.BQ_ERRORS_TABLE_NAME\n  \n```\nThe errors are stored in the following columns:\n- errors_.code\n- errors_.message\nIf you specified Cloud Storage as your output destination, the results of your batch prediction request are returned as CSV objects in a new folder in the bucket you specified. The name of the folder is the name of your model, prepended with \"prediction-\" and appended with the timestamp of when the batch prediction job started. You can find the Cloud Storage folder name in the **Batch predictions** tab for your model.\nThe Cloud Storage folder contains two kinds of objects:\n- **Prediction objects** The prediction objects are named `predictions_1.csv`, `predictions_2.csv`,  and so on. They contain a header row with the column names, and a row for  every prediction returned. In the prediction objects,  Vertex AI returns your prediction data and creates one or  more new columns for the prediction results based on your model type:- **Classification** : For each potential value of your target column, a   column named`` `_` `` `_score`is added to the results. This column contains the score, or confidence   estimate, for that value.\n- **Regression** : The predicted value for that row is returned in a column   named`predicted_` ``. The prediction   interval is not returned for CSV output.\n- **Error objects** The error objects are named `errors_1.csv`, `errors_2.csv`, and so on.  They contain a header row, and a row for every row in your input data that  Vertex AI could not return a prediction (for example, if a  non-nullable feature was null) for.\nNote: If the results are large, it is split into multiple objects.\nFeature importance is not available for batch prediction results returned in Cloud Storage.\n## Interpret prediction results\nClassification models return a confidence score.\nThe confidence score communicates how strongly your model associates each class or label with a test item. The higher the number, the higher the model's confidence that the label should be applied to that item. You decide how high the confidence score must be for you to accept the model's results.Regression models return a prediction value.\nIf your model uses probabilistic inference, the `value` field contains the minimizer of the optimization objective. For example, if your optimization objective is `minimize-rmse` , the `value` field contains the mean value. If it is `minimize-mae` , the `value` field contains the median value.\nIf your model uses probabilistic inference with quantiles, Vertex AI provides quantile values and predictions in addition to the minimizer of the optimization objective. Quantile values are set during model training. Quantile predictions are the prediction values associated with the quantile values.\nFor batch prediction results stored in BigQuery, TabNet provides inherent model interpretability by giving users insight into which features it used to help make its decision. The algorithm utilizes [attention](https://proceedings.neurips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf) , which learns to selectively enhance the influence of some features while diminishing the influence of others through a weighted average. For a particular decision, TabNet decides in a stepwise fashion how much importance to place on each feature. It then combines each of the steps to create a final prediction. The attention is multiplicative, where larger values indicate that the feature played a larger role in the prediction and a value of zero means that the feature played no role in that decision. Because TabNet uses multiple decision steps, the attention placed on the features across all of the steps are linearly combined after appropriate scaling. This linear combination across all of TabNet's decision steps is the total feature importance that TabNet provides you.\n## What's next\n- Learn how to [export your model](/vertex-ai/docs/export/export-model-tabular) .\n- Learn about [pricing for batch predictions](/vertex-ai/docs/tabular-data/tabular-workflows/pricing) .", "guide": "Vertex AI"}