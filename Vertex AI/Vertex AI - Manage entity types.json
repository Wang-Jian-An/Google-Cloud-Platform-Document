{"title": "Vertex AI - Manage entity types", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Manage entity types\nTo learn more,  run the \"Example Feature Store workflow with sample data\" Jupyter notebook in one of the following  environments: [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/feature_store/sdk-feature-store.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Ffeature_store%2Fsdk-feature-store.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/feature_store/sdk-feature-store.ipynb)\nLearn how to create, list, and delete entity types.\n", "content": "## Create an entity type\nCreate an entity type so that you can create its related features.- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- From the action bar, click **Create entity type** to open the **Create\n entity type** pane.\n- Select a region from the **Region** drop-down list that includes the featurestore where you want to create an entity type.\n- Select a featurestore.\n- Specify a name for the entity type.\n- If you want to include a description for the entity type, enter a description.\n- To enable feature value monitoring ( [Preview](/products#product-launch-stages) ), set monitoring to **Enabled** and then specify the snapshot interval in days. This monitoring configuration applies to all features under this entity type. For more information, see [Feature value monitoring](/vertex-ai/docs/featurestore/monitoring#feature) .\n- Click **Create** .\nThe following sample creates a new featurestore and then uses the [google_vertex_ai_featurestore_entitytype](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/vertex_ai_featurestore_entitytype) Terraform resource to create an entity type named `featurestore_entitytype` within that feature store.\nTo learn how to apply or remove a Terraform configuration, see [Basic Terraform commands](/docs/terraform/basic-commands) .\n [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/HEAD/vertex_ai/featurestore_entitytype/main.tf) \n```\n# Featurestore name must be unique for the projectresource \"random_id\" \"featurestore_name_suffix\" {\u00a0 byte_length = 8}resource \"google_vertex_ai_featurestore\" \"featurestore\" {\u00a0 name \u00a0 = \"featurestore_${random_id.featurestore_name_suffix.hex}\"\u00a0 region = \"us-central1\"\u00a0 labels = {\u00a0 \u00a0 environment = \"testing\"\u00a0 }\u00a0 online_serving_config {\u00a0 \u00a0 fixed_node_count = 1\u00a0 }\u00a0 force_destroy = true}output \"featurestore_id\" {\u00a0 value = google_vertex_ai_featurestore.featurestore.id}resource \"google_vertex_ai_featurestore_entitytype\" \"entity\" {\u00a0 name = \"featurestore_entitytype\"\u00a0 labels = {\u00a0 \u00a0 environment = \"testing\"\u00a0 }\u00a0 featurestore = google_vertex_ai_featurestore.featurestore.id\u00a0 monitoring_config {\u00a0 \u00a0 snapshot_analysis {\u00a0 \u00a0 \u00a0 disabled = false\u00a0 \u00a0 }\u00a0 }\u00a0 depends_on = [google_vertex_ai_featurestore.featurestore]}\n```To create an entity type, send a POST request by using the [featurestores.entityTypes.create](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes/create) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- : Description of the entity type.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes?entityTypeId=ENTITY_TYPE_ID\n```\nRequest JSON body:\n```\n{\n \"description\": \"DESCRIPTION\"\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes?entityTypeId=ENTITY_TYPE_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes?entityTypeId=ENTITY_TYPE_ID\" | Select-Object -Expand Content\n```\nYou should see output similar to the following. You can use the in the response to [get the status](/vertex-ai/docs/general/long-running-operations) of the operation.\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/bikes/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.v1.CreateEntityTypeOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2021-03-02T00:04:13.039166Z\",\n  \"updateTime\": \"2021-03-02T00:04:13.039166Z\"\n }\n }\n}\n```\nTo learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/create_entity_type_sample.py) \n```\nfrom google.cloud import aiplatformdef create_entity_type_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 entity_type_id: str,\u00a0 \u00a0 featurestore_name: str,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 my_entity_type = aiplatform.EntityType.create(\u00a0 \u00a0 \u00a0 \u00a0 entity_type_id=entity_type_id, featurestore_name=featurestore_name\u00a0 \u00a0 )\u00a0 \u00a0 my_entity_type.wait()\u00a0 \u00a0 return my_entity_type\n```The client library for Vertex AI is included when you install the Vertex AI SDK for Python. To learn how to install the Vertex AI SDK for Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/install-sdk) . For more information, see the [ Vertex AI SDK for Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/snippets/feature_store_service/create_entity_type_sample.py) \n```\nfrom google.cloud import aiplatformdef create_entity_type_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 featurestore_id: str,\u00a0 \u00a0 entity_type_id: str,\u00a0 \u00a0 description: str = \"sample entity type\",\u00a0 \u00a0 location: str = \"us-central1\",\u00a0 \u00a0 api_endpoint: str = \"us-central1-aiplatform.googleapis.com\",\u00a0 \u00a0 timeout: int = 300,):\u00a0 \u00a0 # The AI Platform services require regional API endpoints, which need to be\u00a0 \u00a0 # in the same region or multi-region overlap with the Feature Store location.\u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 # Initialize client that will be used to create and send requests.\u00a0 \u00a0 # This client only needs to be created once, and can be reused for multiple requests.\u00a0 \u00a0 client = aiplatform.gapic.FeaturestoreServiceClient(client_options=client_options)\u00a0 \u00a0 parent = f\"projects/{project}/locations/{location}/featurestores/{featurestore_id}\"\u00a0 \u00a0 create_entity_type_request = aiplatform.gapic.CreateEntityTypeRequest(\u00a0 \u00a0 \u00a0 \u00a0 parent=parent,\u00a0 \u00a0 \u00a0 \u00a0 entity_type_id=entity_type_id,\u00a0 \u00a0 \u00a0 \u00a0 entity_type=aiplatform.gapic.EntityType(description=description),\u00a0 \u00a0 )\u00a0 \u00a0 lro_response = client.create_entity_type(request=create_entity_type_request)\u00a0 \u00a0 print(\"Long running operation:\", lro_response.operation.name)\u00a0 \u00a0 create_entity_type_response = lro_response.result(timeout=timeout)\u00a0 \u00a0 print(\"create_entity_type_response:\", create_entity_type_response)\n```Before trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/CreateEntityTypeSample.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.aiplatform.v1.CreateEntityTypeOperationMetadata;import com.google.cloud.aiplatform.v1.CreateEntityTypeRequest;import com.google.cloud.aiplatform.v1.EntityType;import com.google.cloud.aiplatform.v1.FeaturestoreName;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class CreateEntityTypeSample {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 String entityTypeId = \"YOUR_ENTITY_TYPE_ID\";\u00a0 \u00a0 String description = \"YOUR_ENTITY_TYPE_DESCRIPTION\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 int timeout = 300;\u00a0 \u00a0 createEntityTypeSample(\u00a0 \u00a0 \u00a0 \u00a0 project, featurestoreId, entityTypeId, description, location, endpoint, timeout);\u00a0 }\u00a0 static void createEntityTypeSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 String entityTypeId,\u00a0 \u00a0 \u00a0 String description,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint,\u00a0 \u00a0 \u00a0 int timeout)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 EntityType entityType = EntityType.newBuilder().setDescription(description).build();\u00a0 \u00a0 \u00a0 CreateEntityTypeRequest createEntityTypeRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CreateEntityTypeRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(FeaturestoreName.of(project, location, featurestoreId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEntityType(entityType)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEntityTypeId(entityTypeId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<EntityType, CreateEntityTypeOperationMetadata> entityTypeFuture =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.createEntityTypeAsync(createEntityTypeRequest);\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Operation name: %s%n\", entityTypeFuture.getInitialFuture().get().getName());\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to finish...\");\u00a0 \u00a0 \u00a0 EntityType entityTypeResponse = entityTypeFuture.get(timeout, TimeUnit.SECONDS);\u00a0 \u00a0 \u00a0 System.out.println(\"Create Entity Type Response\");\u00a0 \u00a0 \u00a0 System.out.format(\"Name: %s%n\", entityTypeResponse.getName());\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/create-entity-type-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const entityTypeId = 'YOUR_ENTITY_TYPE_ID';// const description = 'YOUR_ENTITY_TYPE_DESCRIPTION';// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function createEntityType() {\u00a0 // Configure the parent resource\u00a0 const parent = `projects/${project}/locations/${location}/featurestores/${featurestoreId}`;\u00a0 const entityType = {\u00a0 \u00a0 description: description,\u00a0 };\u00a0 const request = {\u00a0 \u00a0 parent: parent,\u00a0 \u00a0 entityTypeId: entityTypeId,\u00a0 \u00a0 entityType: entityType,\u00a0 };\u00a0 // Create EntityType request\u00a0 const [operation] = await featurestoreServiceClient.createEntityType(\u00a0 \u00a0 request,\u00a0 \u00a0 {timeout: Number(timeout)}\u00a0 );\u00a0 const [response] = await operation.promise();\u00a0 console.log('Create entity type response');\u00a0 console.log(`Name : ${response.name}`);\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}createEntityType();\n```\n## List entity types\nList all entity types in a featurestore.\n- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- In the features table, view the **Entity type** column to see the entity types in your project for the selected region.\nTo list entity types, send a GET request by using the [featurestores.entityTypes.list](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes/list) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\nHTTP method and URL:\n```\nGET https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\ncurl -X GET \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method GET ` -Headers $headers ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"entityTypes\": [ {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID_1\",\n  \"description\": \"ENTITY_TYPE_DESCRIPTION\",\n  \"createTime\": \"2021-02-25T01:20:43.082628Z\",\n  \"updateTime\": \"2021-02-25T01:20:43.082628Z\",\n  \"etag\": \"AMEw9yOBqKIdbBGZcxdKLrlZJAf9eTO2DEzcE81YDKA2LymDMFB8ucRbmKwKo2KnvOg=\"\n },\n {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID_2\",\n  \"description\": \"ENTITY_TYPE_DESCRIPTION\",\n  \"createTime\": \"2021-02-25T01:34:26.198628Z\",\n  \"updateTime\": \"2021-02-25T01:34:26.198628Z\",\n  \"etag\": \"AMEw9yNuv-ILYG8VLLm1lgIKc7asGIAVFErjvH2Cyc_wIQm7d6DL4ZGv59cwZmxTumU=\"\n }\n ]\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/ListEntityTypesSample.java) \n```\nimport com.google.cloud.aiplatform.v1.EntityType;import com.google.cloud.aiplatform.v1.FeaturestoreName;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import com.google.cloud.aiplatform.v1.ListEntityTypesRequest;import java.io.IOException;public class ListEntityTypesSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 listEntityTypesSample(project, featurestoreId, location, endpoint);\u00a0 }\u00a0 static void listEntityTypesSample(\u00a0 \u00a0 \u00a0 String project, String featurestoreId, String location, String endpoint) throws IOException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 ListEntityTypesRequest listEntityTypeRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ListEntityTypesRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(FeaturestoreName.of(project, location, featurestoreId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 System.out.println(\"List Entity Types Response\");\u00a0 \u00a0 \u00a0 for (EntityType element :\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.listEntityTypes(listEntityTypeRequest).iterateAll()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(element);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/list-entity-types-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function listEntityTypes() {\u00a0 // Configure the parent resource\u00a0 const parent = `projects/${project}/locations/${location}/featurestores/${featurestoreId}`;\u00a0 const request = {\u00a0 \u00a0 parent: parent,\u00a0 };\u00a0 // List EntityTypes request\u00a0 const [response] = await featurestoreServiceClient.listEntityTypes(\u00a0 \u00a0 request,\u00a0 \u00a0 {timeout: Number(timeout)}\u00a0 );\u00a0 console.log('List entity types response');\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}listEntityTypes();\n```To learn how to install and use the Vertex AI SDK for Python, see [Use the Vertex AI SDK for Python](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) . For more information, see the [Vertex AI SDK for Python API reference documentation.](/python/docs/reference/aiplatform/latest)\n## Delete an entity type\nDelete an entity type. If you use the Google Cloud console, Vertex AI Feature Store (Legacy) deletes the entity type and all of its contents. If you use the API, enable the `force` query parameter to delete the entity type and all of its contents.\n- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- In the features table, view the **Entity type** column and find the entity type to delete.\n- Click the name of the entity type.\n- From the action bar, click **Delete** .\n- Click **Confirm** to delete the entity type.\nTo delete an entity type, send a DELETE request by using the [featurestores.entityTypes.delete](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes/delete) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- : Whether to delete the entity type even if  it contains features. The`force`query parameter is optional and  is`false`by default.\nHTTP method and URL:\n```\nDELETE https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID?force=BOOLEAN\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\ncurl -X DELETE \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID?force=BOOLEAN\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method DELETE ` -Headers $headers ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID?force=BOOLEAN\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.v1.DeleteOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2021-02-26T17:32:56.008325Z\",\n  \"updateTime\": \"2021-02-26T17:32:56.008325Z\"\n }\n },\n \"done\": true,\n \"response\": {\n \"@type\": \"type.googleapis.com/google.protobuf.Empty\"\n }\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/DeleteEntityTypeSample.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.aiplatform.v1.DeleteEntityTypeRequest;import com.google.cloud.aiplatform.v1.DeleteOperationMetadata;import com.google.cloud.aiplatform.v1.EntityTypeName;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import com.google.protobuf.Empty;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class DeleteEntityTypeSample {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 String entityTypeId = \"YOUR_ENTITY_TYPE_ID\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 int timeout = 300;\u00a0 \u00a0 deleteEntityTypeSample(project, featurestoreId, entityTypeId, location, endpoint, timeout);\u00a0 }\u00a0 static void deleteEntityTypeSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 String entityTypeId,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint,\u00a0 \u00a0 \u00a0 int timeout)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 DeleteEntityTypeRequest deleteEntityTypeRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DeleteEntityTypeRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EntityTypeName.of(project, location, featurestoreId, entityTypeId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setForce(true)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<Empty, DeleteOperationMetadata> operationFuture =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.deleteEntityTypeAsync(deleteEntityTypeRequest);\u00a0 \u00a0 \u00a0 System.out.format(\"Operation name: %s%n\", operationFuture.getInitialFuture().get().getName());\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to finish...\");\u00a0 \u00a0 \u00a0 operationFuture.get(timeout, TimeUnit.SECONDS);\u00a0 \u00a0 \u00a0 System.out.format(\"Deleted Entity Type.\");\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/delete-entity-type-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const entityTypeId = 'YOUR_ENTITY_TYPE_ID';// const force = <BOOLEAN>;// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function deleteEntityType() {\u00a0 // Configure the name resource\u00a0 const name = `projects/${project}/locations/${location}/featurestores/${featurestoreId}/entityTypes/${entityTypeId}`;\u00a0 const request = {\u00a0 \u00a0 name: name,\u00a0 \u00a0 force: Boolean(force),\u00a0 };\u00a0 // Delete EntityType request\u00a0 const [operation] = await featurestoreServiceClient.deleteEntityType(\u00a0 \u00a0 request,\u00a0 \u00a0 {timeout: Number(timeout)}\u00a0 );\u00a0 const [response] = await operation.promise();\u00a0 console.log('Delete entity type response');\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}deleteEntityType();\n```To learn how to install and use the Vertex AI SDK for Python, see [Use the Vertex AI SDK for Python](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) . For more information, see the [Vertex AI SDK for Python API reference documentation.](/python/docs/reference/aiplatform/latest)\n## What's next\n- Learn how to manage [features](/vertex-ai/docs/featurestore/managing-features) .\n- Learn how to [monitor feature values imported overtime](/vertex-ai/docs/featurestore/monitoring#feature) .\n- View the Vertex AI Feature Store (Legacy) [entity typesquota](/vertex-ai/quotas#featurestore) .\n- [Troubleshoot](/vertex-ai/docs/general/troubleshooting#feature-store) common Vertex AI Feature Store (Legacy) issues.", "guide": "Vertex AI"}