{"title": "Vertex AI - Save a notebook to GitHub", "url": "https://cloud.google.com/vertex-ai/docs/workbench/user-managed/save-to-github", "abstract": "# Vertex AI - Save a notebook to GitHub\n# Save a notebook to GitHub\nVertex AI Workbench user-managed notebooks is [deprecated](/vertex-ai/docs/deprecations) . On January 30, 2025, support for  user-managed notebooks will end and the ability to create user-managed notebooks instances  will be removed. Existing instances will continue to function  but patches, updates, and upgrades won't be available. To continue using  Vertex AI Workbench, we recommend that you [migrate your user-managed notebooks instances to Vertex AI Workbench instances](/vertex-ai/docs/workbench/user-managed/migrate-to-instances) .\nTo back up your user-managed notebooks instance and make it available to others, save the contents of your user-managed notebooks instance to GitHub.\n", "content": "## Create a GitHub repository\nIf you don't already have a [GitHub](https://github.com/) repository, you must create one.\nWhen you create your GitHub repository make sure that your GitHub repository can be cloned by selecting the **Initialize this repository with a README** checkbox.\n## Clone your GitHub repository in your user-managed notebooks instance\nTo clone your GitHub repository in your user-managed notebooks instance, complete the following steps:\n- In your GitHub repository, click the **Code** button, and then click the **Local** tab.\n- Copy the **HTTPS** URL.\n- In the Google Cloud console, go to the **User-managed notebooks** page. [Go to User-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/user-managed) \n- Click **Open JupyterLab** to open your user-managed notebooks instance.\n- In the JupyterLab folder **File Browser** , select the folder where you want to clone the GitHub repository. For example, the home folder. \n- In JupyterLab, select **Git\u00a0> Clone a Repository** .\n- If prompted, enter your credentials.- If you use a GitHub username and password, enter your GitHub username and password.\n- If you use two-factor authentication with GitHub, create and use a [personal access token](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line) .\n- In the **Clone a repo** dialog, paste the HTTPS URL for your GitHub repository. \n- Click **Clone** .## Configure your user-managed notebooks instance with your GitHub user information\n- In JupyterLab, select **Git\u00a0> Open Git Repository in Terminal** to open a Git terminal window.\n- In the Git terminal window, enter the following commands to configure your Git username and email:```\ngit config --global user.name \"YOUR_NAME\"\ngit config --global user.email \"YOUR_EMAIL\"\n```\n- If your GitHub account requires SSH authentication, complete the following steps to connect your account:- From your Git terminal in your user-managed notebooks instance, follow GitHub's [instructions for generating a new SSH key](https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) .\n- Follow the [instructions for adding that SSH key to your GitHubaccount](https://help.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account) .\n- Close the Git terminal window.## Add your committed files to your GitHub repository\n- Your user-managed notebooks instance shows your repository as a new folder. If you don't see your cloned GitHub repository as a folder, click the **Refresh FileList** button. \n- Double-click your repository folder to open it.\n- Add a new notebook to your user-managed notebooks instance.To add a notebook file, you can use the menu or the Launcher.\n- To add a new notebook file from the menu, select **File\u00a0> New\u00a0> Notebook** . \n- In the **Select kernel** dialog, select the kernel for your new notebook, for example, **Python 3** , and then click **Select** .Your new notebook file opens.\n- To add a new notebook file from the Launcher, select **File\u00a0> New\u00a0> Launcher** .\n- Click the tile for the kernel you want to use. Your new notebook file opens.- Rename your new notebook file.\n- Select **File\u00a0> Rename notebook** . The **Rename file** dialog opens.\n- In the **New name** field, change `Untitled.ipynb` to something meaningful, such as `install.ipynb` .\n- Click **Rename** .\n- Right-click the `Untitled.ipynb` tab and then click **Rename notebook** . The **Rename file** dialog opens.\n- In the **New name** field, change `Untitled.ipynb` to something meaningful, such as `install.ipynb` .\n- Click **Rename** .- Select the **Git** tab. Your new notebook is listed in the **Untracked** grouping.\n- To add the new notebook as a file for your GitHub repository, right-click the new notebook and select **Track** . On the **Git** tab, your notebook is now added to the **Staged** grouping.\n- To commit your new notebook to your GitHub repository, on the **Git** tab, add a commit comment and click **Commit** .\n- To open a Git terminal window, select **Git\u00a0> Open Git repository in terminal** .\n- In the Git terminal window, enter the `git push` command.- If you use a GitHub username and password, when prompted, enter your GitHub username and password.\n- If you use two-factor authentication with GitHub, [create a personal access token](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line) to use.\nWhen the `git push` command completes, your committed files are in your GitHub repository.", "guide": "Vertex AI"}