{"title": "Vertex AI - Control access to Vertex AI Feature Store (Legacy) resources", "url": "https://cloud.google.com/vertex-ai/docs/featurestore/resource-policy", "abstract": "# Vertex AI - Control access to Vertex AI Feature Store (Legacy) resources\nYou can control access to Vertex AI Feature Store (Legacy) resources by setting IAM policies at different levels of the [resource hierarchy](/iam/docs/resource-hierarchy-access-control) . For example:\n- A project-level policy IAM applies to all resources in a project. You can set a project-level policy to grant permissions to users to read all featurestores in your project.\n- A resource-level IAM policy lets you specify which users can access specific resources. For a subset of users, you can set a resource-level policy to grant write permissions to specific featurestores in your project.\nYou can set resource-level Identity and Access Management (IAM) policies on the following Vertex AI Feature Store (Legacy) resources:\n- **Featurestore** : When you set an Identity and Access Management policy on a featurestore, the policy applies to the featurestore and all entity types created in that featurestore.\n- **Entity type** : When you set an Identity and Access Management policy on an entity type, the policy applies only to the entity type and the featurestore where the entity type is created.\nAn IAM [policy](/iam/docs/policies#structure) includes one or more role bindings that define which IAM roles are associated with which principals. A role is a collection of permissions that you grant to a principal. Vertex AI provides [predefined roles](/vertex-ai/docs/general/access-control#predefined-roles) that you can use in your policies. Or, you can create your own custom roles.\n", "content": "## Considerations\nYou can't set conditional resource policies. For example, you can't create a policy that grants access to any resource that has or will have a name starting with a particular string like `testing` .\n## Sample use case\nAs an example, imagine your organization has two sets of users. One set manages your core infrastructure in a DevOps admin role. Another set manages particular entity types and their features, such as a data engineer.\nA DevOps admin manages featurestores and entity types at the project level. When data engineers request a new entity type, a DevOps admin can create and delegate ownership of that entity type to the data engineers. Data engineers can freely manage features in the entity types they own, but they can't operate on the featurestore or other entity types. This control, for example, lets DevOps admins limit access to entity types that contain sensitive information.\nIn this scenario, the DevOps admin has the `aiplatform.featurestoreAdmin` role at the project level. Then, when a data engineer requests a new entity type, the administrator [creates a new entity type](/vertex-ai/docs/featurestore/managing-entity-types) and then assigns the `aiplatform.entityTypeOwner` role to the data engineer at the entity type level (as a resource-level policy).\n### Get IAM policy\nYou can view the current IAM policy on a featurestore or entity type by using the Google Cloud console or API.\n- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- In the features table, select a featurestore or an entity type from the **Featurestore** or **Entity type** column.\n- Click **Permissions** .\n- To show resource-level permissions, turn off **Show inherited\n permissions** .Principals who have access to the selected resource are grouped by  role.\n- Expand a role to see which principals are assigned to that role.\nTo get the IAM policy from a resource, send a POST request that uses the [getIamPolicy](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes/getIamPolicy) method. The following example gets an entity type policy.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:getIamPolicy\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d \"\" \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:getIamPolicy\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:getIamPolicy\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwXTmICm7mI\",\n \"bindings\": [ {\n  \"role\": \"roles/aiplatform.entityTypeOwner\",\n  \"members\": [  \"user:example@example.com\"\n  ]\n }\n ]\n}\n```### Set an IAM policy\nYou can set an IAM policy on a featurestore or entity type.\n- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- In the features table, select a featurestore or an entity type from the **Featurestore** or **Entity type** column.\n- Click **Permissions** .\n- Click **Add principal** .\n- Specify a principal and one or more roles to associate with the principal.\n- Click **Save** .\nTo set the IAM policy on a resource, send a POST request that uses the [setIamPolicy](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes/setIamPolicy) method. The following example sets a policy on an entity type.\nSetting an IAM policy overrides any existing policy (changes are not appended). If you want to modify a resource's existing policy, use the `getIamPolicy` method to get its existing policy and then make modifications. Include your modified policy along with the `etag` in your `setIamPolicy` request.\nIf you receive a `409` error code, there was a concurrent `SetIamPolicy` request that updated the policy. Make a `GetIamPolicy` to get the policy's updated etag, and then retry the `SetIamPolicy` request by including the new etag.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- : An IAM role that includes the permissions  to grant, such as`roles/aiplatform.featurestoreDataViewer`.\n- : The principal that is granted the role's  permissions, such as`user:myuser@example.com`.\n- : A string value that is used to prevent simultaneous  updates of a policy from overwriting each other. This value is returned as  part of the`getIamPolicy`response.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:setIamPolicy\n```\nRequest JSON body:\n```\n{\n \"policy\": {\n \"bindings\": [  {\n  \"role\": \"ROLE\",\n  \"members\": [   \"PRINCIPAL\"\n  ]\n  },\n  ...\n ],\n \"etag\": \"ETAG\"\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:setIamPolicy\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:setIamPolicy\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwXTmICm7mI\",\n \"bindings\": [ {\n  \"role\": \"roles/aiplatform.entityTypeOwner\",\n  \"members\": [  \"user:user1@example.com\"\n  ]\n },\n {\n  \"role\": \"roles/aiplatform.featurestoreDataViewer\",\n  \"members\": [  \"user:user2@example.com\",\n  \"user:user3@example.com\"\n  ]\n },\n {\n  \"role\": \"roles/aiplatform.featurestoreDataWriter\",\n  \"members\": [  \"user:user4@example.com\",\n  ]\n }\n ]\n}\n```### Verify IAM permissions for a resource\nYou can verify whether the currently authenticated user has specific IAM permissions for a featurestore or entity type.\nTo verify whether a user has specific IAM permissions for a resource, send a POST request that uses the [testIamPermissions](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes/testIamPermissions) method. The following example lets you test whether the currently authenticated user has a set of IAM permissions for an entity type.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:testIamPermissions -d\n```\nRequest JSON body:\n```\n{\n \"permissions\": [ \"aiplatform.googleapis.com/entityTypes.get\",\n \"aiplatform.googleapis.com/entityTypes.readFeatureValues\",\n \"aiplatform.googleapis.com/entityTypes.writeFeatureValues\"\n ]\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:testIamPermissions -d\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID:testIamPermissions -d\" | Select-Object -Expand Content\n```You should receive a JSON response similar to the following. The response includes only those permissions from the request JSON body which are available to the currently authenticated user.\n```\n{\n \"permissions\": [ \"aiplatform.googleapis.com/entityTypes.get\",\n \"aiplatform.googleapis.com/entityTypes.readFeatureValues\",\n \"aiplatform.googleapis.com/entityTypes.writeFeatureValues\"\n ]\n}\n```", "guide": "Vertex AI"}