{"title": "Vertex AI - Create Vertex AI Vizier studies", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Create Vertex AI Vizier studies\nThis page describes how to make API requests to Vertex AI Vizier by using Python. For information about how Vertex AI Vizier works, see [Vertex AI Vizier overview](/vertex-ai/docs/vizier/overview) .\nTo see an example of optimizing multiple objectives as part of a more comprehensive workflow,  run the \"Optimizing multiple objectives\" Jupyter notebook in one of the following  environments: [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/vizier/gapic-vizier-multi-objective-optimization.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fvizier%2Fgapic-vizier-multi-objective-optimization.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/vizier/gapic-vizier-multi-objective-optimization.ipynb)\n", "content": "## Before you begin\n- [Install the Vertex AI SDK for Python.](/vertex-ai/docs/start/client-libraries) \n## Define constants\nTo define constants, run the following commands, replacing `` and `` with your region and project ID. Create your own study name or use the suggested values.\n```\nimport jsonimport datetimefrom google.cloud import aiplatformREGION = \"REGION\"PROJECT_ID = \"PROJECT_ID\"# The following placeholder variables are automatically filled in.STUDY_DISPLAY_NAME = '{}_study_{}'.format(PROJECT_ID.replace('-', ''), datetime.datetime.now().strftime('%Y%m%d_%H%M%S')) #@param {type: 'string'}ENDPOINT = REGION + '-aiplatform.googleapis.com'PARENT = 'projects/{}/locations/{}'.format(PROJECT_ID, REGION)\n```\n## Construct API requests\nThe following command-line API requests are written in Python.\n### Create a study\nA is a series of experiments, or , that help you optimize your hyperparameters or parameters.\nIn the following example, the goal is to maximize `y = x^2` with `x` in the range of [-10. 10]. This example has only one parameter and uses an easily calculated function to help demonstrate how to use Vertex AI Vizier.\n```\nparam_x = {\u00a0 \u00a0 'parameter_id': 'x',\u00a0 \u00a0 'double_value_spec': {\u00a0 \u00a0 \u00a0 \u00a0 'min_value': -10.0,\u00a0 \u00a0 \u00a0 \u00a0 'max_value': 10.0\u00a0 \u00a0 }}metric_y = {\u00a0 \u00a0 'metric_id': 'y',\u00a0 \u00a0 'goal': 'MAXIMIZE'}study = {\u00a0 \u00a0 'display_name': STUDY_DISPLAY_NAME,\u00a0 \u00a0 'study_spec': {\u00a0 \u00a0 \u00a0 'algorithm': 'RANDOM_SEARCH',\u00a0 \u00a0 \u00a0 'parameters': [param_x],\u00a0 \u00a0 \u00a0 'metrics': [metric_y],\u00a0 \u00a0 }}\n```\nTo create the study by using your study configuration, send the following request through `VizierServiceClient` . Use the returned `STUDY_NAME` to query the study.\n```\nvizier_client = aiplatform.gapic.VizierServiceClient(client_options=dict(api_endpoint=ENDPOINT))study = vizier_client.create_study(parent=PARENT, study=study)STUDY_NAME = study.name\n```\n### View your study\nAfter your study is created, you can find the study in the Google Cloud console, in the Vertex AI section, on the **Experiments** page.\n[Go to the Experiments page](https://console.cloud.google.com/vertex-ai/experiments)\n### Get a study\nTo get a study, send the following request.\n```\nvizier_client.get_study({'name': STUDY_NAME})\n```\n### List studies\nTo list studies in a specific project and region, send the following request:\n```\nvizier_client.list_studies({'parent': PARENT})\n```\n### Get suggested trials\nTo get a trial suggestion from Vertex AI Vizier, create a request that contains a `` and a `` . Pass this information to Vertex AI Vizier by sending the request.\nCreate the request using the following commands. Change `` to the number of suggestions that you want to get from each request.\n```\nsuggest_response = vizier_client.suggest_trials({\u00a0 \u00a0 'parent': STUDY_NAME,\u00a0 \u00a0 'suggestion_count': SUGGEST_COUNT,\u00a0 \u00a0 'client_id': CLIENT_ID\u00a0 \u00a0 })\n```\n`suggest_trials` starts a long-running operation to generate the trial. The response lets you know that Vertex AI Vizier is working on the trial suggestions.\nTo wait for the returned result, use the `result()` function .\n```\nsuggest_response.result().trials\n```\nThe following format shows an example trial. This trial suggests using value `0.1` for the parameter `x` .\n```\nname: \"TRIAL_ID\"state: ACTIVEparameters {\u00a0 parameter_id: \"x\"\u00a0 value {\u00a0 \u00a0 number_value: 0.1\u00a0 }}start_time {\u00a0 seconds: 1618011215}\n```\nUse the `` from the previous response to get the trial:\n```\nvizier_client.get_trial({\u00a0 \u00a0 \u00a0 \u00a0 'name': TRIAL_ID\u00a0 \u00a0 \u00a0 })\n```\n### Evaluate the results\nAfter receiving your trial suggestions, evaluate each trial and record each result as a .\nFor example, if the function you are trying to optimize is `y = x^2` , then you evaluate the function using the trial's suggested value of `x` . Using a suggested value of `0.1` , the function evaluates to `y = 0.1 * 0.1` , which results in `0.01` .\n### Add a measurement\nAfter evaluating your trial suggestion to get a measurement, add this measurement to your trial.\nUse the following commands to store your measurement and send the request. In this example, replace `` with the measurement. If the function you are optimizing is `y = x^2` , and the suggested value of `x` is `0.1` , the result is `0.01` .\n```\nvizier_client.add_trial_measurement({\u00a0 \u00a0 \u00a0 \u00a0 'trial_name': TRIAL_ID,\u00a0 \u00a0 \u00a0 \u00a0 'measurement': {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'metrics': [{'metric_id': 'y', 'value':RESULT }]\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 })\n```\n**Note:** If the evaluation is a multiple-step process and can produce more than one intermediate measurement, you can call the method multiple times by using different `stepCount` and `metrics` values. For example, if you are training a machine learning model, you can report an intermediate measurement for each [epoch](https://developers.google.com/machine-learning/glossary#epoch) .\n### Complete a trial\nAfter you've added all measurements for a trial, you must complete the trial by sending a command.\nWhen you complete the trial, you can either send a command to only complete the trial or you can send a command to add a final measurement and complete the trial.\nTo complete a trial without adding a final measurement, send the following request:\n```\nvizier_client.complete_trial({\u00a0 \u00a0 \u00a0 'name': TRIAL_ID\u00a0 })\n```\nTo complete a trial and include a final measurement, use the following commands, replacing `` with the final measurement.\n```\nvizier_client.complete_trial({\u00a0 \u00a0 \u00a0 'name': TRIAL_ID\u00a0 \u00a0 \u00a0 'final_measurement': {\u00a0 \u00a0 \u00a0 \u00a0 'metrics': [{'metric_id': 'y', 'value': RESULT}]\u00a0 \u00a0 \u00a0 }\u00a0 })\n```\n### List trials\nTo list trials in a specific study, send the following request:\n```\nvizier_client.list_trials({\u00a0 \u00a0 'parent': STUDY_NAME})\n```\nAfter you complete all the pending trials, you can call `suggestTrials` for more suggestions, and repeat the trial evaluation process.\n### List optimal trials\nThe following example shows `list_optimal_trials` , which returns the pareto-optimal trials for a multiple-objective study or the optimal trials for a single-objective study:\n```\nvizier_client.list_optimal_trials({\u00a0 \u00a0 'parent': STUDY_NAME})\n```\n## What's next\n- Check the REST reference for [studies](/vertex-ai/docs/reference/rest/v1/projects.locations.studies) .", "guide": "Vertex AI"}