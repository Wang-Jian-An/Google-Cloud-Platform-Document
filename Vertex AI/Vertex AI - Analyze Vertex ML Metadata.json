{"title": "Vertex AI - Analyze Vertex ML Metadata", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Analyze Vertex ML Metadata\nYou can use Vertex ML Metadata to track and analyze the metadata produced by your machine learning (ML) systems. By tracking this metadata, it becomes easier to analyze the behavior of your ML system. This can help you understand changes in your system's performance, or it can help you compare the artifacts that your ML system produced.\nIf you are new to Vertex ML Metadata, read the introduction to Vertex ML Metadata to [learn more](/vertex-ai/docs/ml-metadata/introduction) about tracking and analyzing your ML workflow's metadata.\nLearn how to query for the Vertex ML Metadata that you want to analyze in the following ways:\n- [Query](#filtering) for all,, orthat match your filtering criteria.\n- [Query](#inputs-and-outputs) for an execution's input and output artifacts along with the, used to connect the artifacts to the execution.\n- [Query](#lineage) for a's lineage subgraph. This query returns a context's artifacts and executions, along with the events that connect artifacts to executions.\nAre you using Vertex AI Pipelines? Check out this [step-by-step tutorial](https://codelabs.developers.google.com/vertex-mlmd-pipelines#0) for a guide on analyzing metadata from pipeline executions.\n", "content": "## Query for artifacts, executions, and contexts\nYou can use the Vertex AI SDK for Python or the REST API to query for artifacts, executions, and contexts records using filters to create queries like the following:\n- Which versions of a trained model achieved a certain quality threshold?\n- Which dataset is used in a given pipeline?\nThe following sections demonstrate how to [create filters](#filters) and how to query for [artifacts](#list-artifacts) , [executions](#list-executions) , and [contexts](#list-contexts) .\n### Overview of filter syntax\nThe following sections describe how to use filters to query for artifacts, executions, and contexts.\nThe following fields are supported when filtering artifacts, executions, and contexts.\n| Unnamed: 0 | Artifact | Execution | Context |\n|:-------------|-----------:|------------:|----------:|\n| name   |  nan |   nan |  nan |\n| display_name |  nan |   nan |  nan |\n| schema_title |  nan |   nan |  nan |\n| create_time |  nan |   nan |  nan |\n| update_time |  nan |   nan |  nan |\n| metadata  |  nan |   nan |  nan |\n| state  |  nan |   nan |  nan |\n| uri   |  nan |   nan |  nan |\nYour filter must be wrapped in quotation marks. Any quotes that are a part of your filter must be escaped with a backslash.\nYou can use the following comparison operators in your filters: `=` , `!=` , `<` , `>` , `>=` , `<=` .\nFor example, the following filters to find all artifacts where the display name is **my_artifact** .\n```\ndisplay_name=\\\"my_artifact\\\"\n```\n```\n\"display_name=\\\"my_artifact\\\"\"\n```\nFor string fields, you can use wildcard filtering with the `*` character.\nFor timestamp fields such as `create_time` and `update_time` , you must format the date using RFC 3339 format \u2014 for example:\n```\ncreate_time=\\\"2021-05-11T12:30:00-08:00\\\"\n```\n```\n\"create_time=\\\"2021-05-11T12:30:00-08:00\\\"\"\n```\nYou can use `AND` and `OR` logical operators to combine filters to create a complex query.\nThe following example demonstrates how to query for artifacts of type `ai_platform.model` and a `metadata` field `precision` with a numeric value greater than 0.9.\n```\nschema_title=\\\"ai_platform.Model\\\"+AND+metadata.precision.number_value>0.9\n```\n```\n\"create_time=\\\"schema_title=\\\"ai_platform.Model\\\" AND metadata.precision.number_value>0.9\"\n```\nThe `metadata` field is an instance of [google.protobuf.Struct](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Struct) whose format is defined in the schema specified in the `schema_title` field. `google.protobuf.Struct` is a data structure that maps keys to [google.protobuf.Value](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#value) instances. The [google.protobuf.Value](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#value) data structure stores values in different fields depending on their data type. For example:\n- strings are stored as`metadata.` `` `.string_value`,\n- numbers are stored as`metadata.` `` `.number_value`,\n- booleans are stored as`metadata.` `` `.bool_value`.To filter on `metadata` , you must use the traversal operator to traverse to the field that you want to filter on. The traversal operator uses the following format.\n```\nmetadata.FIELD_NAME.TYPE_NAME=\\\"FILTER_VALUE\\\"\n```\n```\n\"metadata.FIELD_NAME.TYPE_NAME=\\\"FILTER_VALUE\\\"\"\n```\nFor example, consider a metadata structure like the following:\n```\n{\n \"field_1\": 5,\n \"field_2\": \"example\",\n \"field_3\": {\n  ...\n },\n \"field_4\": [],\n \"field_5\": true,\n}\n```\nThe following queries illustrate how to use the traversal operator to filter on this example metadata.\n- Filter for records that have `metadata.field_1` with a value less than **5** .\n```\nmetadata.field_1.number_value<5\n```\n```\n\"metadata.field_1.number_value<5\"\n```\n- Filter for records that have `metadata.field_2` with a value equal to **example** .\n```\nmetadata.field_2.string_value=\\\"example\\\"\n```\n```\n\"metadata.field_2.string_value=\\\"example\\\"\"\n```\n- Filter for records that have `metadata.field_5` with a value equal to **true** .\n```\nmetadata.field_5.bool_value=true\n```\n```\n\"metadata.field_5.bool_value=true\"\n```\n**Note:** You can filter only on scalar value fields, such as strings, numbers, or booleans. You can't filter on struct or list fields.\nYou can use the operator to find contexts that are the parent or child of a specified context.\nThe has operator uses the following format:\n- `\"parent_contexts:\\\"` `` `\\\"\"`\n- `\"child_contexts:\\\"` `` `\\\"\"`\nThe context name must be the context's full resource name, like the following: `project/` `` `/locations/` `` `/metadataStores/` `` `/contexts/` `` .\nThe following filters demonstrate how to use the has operator:\n- Filter for all contexts that are children of the specified pipeline.\n```\nparent_contexts:\\\"project/12345/locations/us-central1/metadataStores/default/contexts/pipeline_1\\\"\n```\n```\n\"parent_contexts:\\\"project/12345/locations/us-central1/metadataStores/default/contexts/pipeline_1\\\"\"\n```\n- Filter for all contexts that are a parent of the specified pipeline.\n```\nchild_contexts:\\\"project/12345/locations/us-central1/metadataStores/default/contexts/pipeline_1\\\"\n```\n```\n\"child_contexts:\\\"project/12345/locations/us-central1/metadataStores/default/contexts/pipeline_1\\\"\"\n```\nYou can use the `in_context()` function to filter for artifacts or executions that are associated with a context. You can use the `with_execution()` function to filter for specific artifacts or contexts that are associated with an execution. Similarly you can use the `with_artifact()` function to filter for specific executions or contexts that are associated with an artifact.\nThe filter functions are used in the following format.\n- `\"in_context(\\\"` `` `\\\")\"`\n- `\"with_execution(\\\"` `` `\\\")\"`\n- `\"with_artifact(\\\"` `` `\\\")\"`\nThe context, the execution, and the artifact names must be the full resource name, like the following.\n- `project/` `` `/locations/` `` `/metadataStores/` `` `/contexts/` ``\n- `project/` `` `/locations/` `` `/metadataStores/` `` `/executions/` ``\n- `project/` `` `/locations/` `` `/metadataStores/` `` `/artifacts/` ``\nThe following example demonstrates how to filter for objects that are in the specified pipeline.\n```\nin_context(\\\"project/12345/locations/us-central1/metadataStores/default/contexts/pipeline_1\\\")\n```\n```\n\"in_context(\\\"project/12345/locations/us-central1/metadataStores/default/contexts/pipeline_1\\\")\"\n```\nYou can use a wildcard `*` in the filter functions to filter on parameters of each resource. For example you can use the following to filter all executions that act on a `system.model` artifact type.\n```\nwith_artifact(\\\"*\\\",\\\"schema_title='name.model'\\\")\n```\n```\n\"with_artifact(\\\"*\\\",\\\"schema_title='name.model'\\\")\"\n```\nOther supported parameters that you can filter on are as follows\n- `input=true/false`: Filter input or output artifact types.\n- `event_time`: Filter executions or artifacts event times.\n- All other [supported filter fields](#filters) \nYou can combine the fields with [logical operands](#logical_operators) to construct complex filter queries. Note that the maximum supported nested function depth is 5.\n### Query for artifacts\nArtifacts, such as datasets and models, represent data used or produced by your ML workflow. Use the following instructions to query for artifacts.\nBefore using any of the request data, make the following replacements:- : Your region.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : The metadata store ID where the artifact is created. The default metadata store is named`default`.\n- : (Optional) The maximum number of artifacts to return. If this value is not specified, the service returns a maximum of 100 records.\n- : (Optional) A page token from a previous [MetadataService.ListArtifacts](/vertex-ai/docs/reference/rest/v1/projects.locations.metadataStores.artifacts/list) call. Specify this token to get the next page of results.\n- : Specifies the conditions required to include an artifact in the result set.\nHTTP method and URL:\n```\nGET https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/artifacts?pageSize=PAGE_SIZE&pageToken=PAGE_TOKEN&filter=FILTER\n```\nTo send your request, expand one of these options:You should see output similar to the following. is the ID of the artifact record.\n```\n{\n \"artifacts\": [ {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/default/artifacts/ARTIFACT_ID\",\n  \"displayName\": \"Example artifact\",\n  \"uri\": \"gs://your_bucket_name/artifacts/dataset.csv\",\n  \"etag\": \"67891011\",\n  \"createTime\": \"2021-05-18T00:33:13.833Z\",\n  \"updateTime\": \"2021-05-18T00:33:13.833Z\",\n  \"state\": \"LIVE\",\n  \"schemaTitle\": \"system.Dataset\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {\n  \"payload_format\": \"CSV\"\n  },\n  \"description\": \"Description of the example artifact.\"\n },\n {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/artifacts/ARTIFACT_ID\",\n  \"displayName\": \"Another example artifact\",\n  \"uri\": \"gs://your_bucket_name/artifacts/dataset-2.csv\",\n  \"etag\": \"67891012\",\n  \"createTime\": \"2021-05-18T00:29:24.344Z\",\n  \"updateTime\": \"2021-05-18T00:29:24.344Z\",\n  \"state\": \"LIVE\",\n  \"schemaTitle\": \"system.Dataset\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {\n  \"payload_format\": \"CSV\"\n  },\n  \"description\": \"Description of the other example artifact.\"\n }\n ]\n}\n```\n### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/experiment_tracking/list_artifact_sample.py) \n```\ndef list_artifact_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 display_name_filter: Optional[str] = \"display_name=\\\"my_model_*\\\"\",\u00a0 \u00a0 create_date_filter: Optional[str] = \"create_time>\\\"2022-06-11\\\"\",\u00a0 \u00a0 order_by: Optional[str] = None,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 combined_filters = f\"{display_name_filter} AND {create_date_filter}\"\u00a0 \u00a0 return aiplatform.Artifact.list(\u00a0 \u00a0 \u00a0 \u00a0 filter=combined_filters,\u00a0 \u00a0 \u00a0 \u00a0 order_by=order_by,\u00a0 \u00a0 )\n```\n- `project`: Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) . You can find these IDs in the Google Cloud console [welcome](https://console.cloud.google.com/welcome) page.\n- `location`: See [List of available   locations](/vertex-ai/docs/general/locations) .\n- `display_name_filter`: Filter to be applied to display name while listing the resources with the format \"display_name=\\\"my_filter\\\"\" .\n- `create_date_filter`: Filter to be applied to create_date name while listing the resources with the format \"create_time>\\\"2022-06-11T12:30:00-08:00\\\"\",.\n### Query for executions\nExecutions represent a step in your ML workflow, such as preprocessing data or training a model. Use the following instructions to query for executions.\nBefore using any of the request data, make the following replacements:- : Your region.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : The metadata store ID where the execution is created. The default metadata store is named`default`.\n- : (Optional) The maximum number of artifacts to return. If this value is not specified, the service returns a maximum of 100 records.\n- : (Optional) A page token from a previous [MetadataService.ListArtifacts](/vertex-ai/docs/reference/rest/v1/projects.locations.metadataStores.artifacts/list) call. Specify this token to get the next page of results.\n- : Specifies the conditions required to include an execution in the result set.\nHTTP method and URL:\n```\nGET https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/executions?pageSize=PAGE_SIZE&pageToken=PAGE_TOKEN&filter=FILTER\n```\nTo send your request, expand one of these options:You should see output similar to the following. is the ID of the execution record.\n```\n{\n \"executions\": [ {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/executions/EXECUTION_ID\",\n  \"displayName\": \"Example execution 1\",\n  \"etag\": \"67891011\",\n  \"createTime\": \"2021-05-18T00:06:56.177Z\",\n  \"updateTime\": \"2021-05-18T00:06:56.177Z\",\n  \"schemaTitle\": \"system.Run\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {},\n  \"description\": \"Description of the example execution.\"\n },\n {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/executions/EXECUTION_ID\",\n  \"displayName\": \"Example execution 2\",\n  \"etag\": \"67891011\",\n  \"createTime\": \"2021-05-18T00:04:49.659Z\",\n  \"updateTime\": \"2021-05-18T00:04:49.659Z\",\n  \"schemaTitle\": \"system.Run\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {},\n  \"description\": \"Description of the example execution.\"\n }\n ]\n}\n```\n### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/experiment_tracking/list_execution_sample.py) \n```\ndef list_execution_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 display_name_filter: Optional[str] = \"display_name=\\\"my_execution_*\\\"\",\u00a0 \u00a0 create_date_filter: \u00a0Optional[str] = \"create_time>\\\"2022-06-11T12:30:00-08:00\\\"\",):\u00a0 \u00a0 aiplatform.init(\u00a0 \u00a0 \u00a0 \u00a0 project=project,\u00a0 \u00a0 \u00a0 \u00a0 location=location)\u00a0 \u00a0 combined_filters = f\"{display_name_filter} AND {create_date_filter}\"\u00a0 \u00a0 return aiplatform.Execution.list(filter=combined_filters)\n```\n- `project`: Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) . You can find these IDs in the Google Cloud console [welcome](https://console.cloud.google.com/welcome) page.\n- `location`: See [List of available   locations](/vertex-ai/docs/general/locations) .\n- `display_name_filter`: Filter to be applied to display name while listing the resources with the format \"display_name=\\\"my_filter\\\"\" .\n- `create_date_filter`: Filter to be applied to create_date name while listing the resources with the format \"create_time>\\\"2022-06-11T12:30:00-08:00\\\"\",.\n### Query for contexts\nContexts let you group sets of executions, artifacts, and other contexts. Use the following instructions to query for contexts.\nBefore using any of the request data, make the following replacements:- : Your region.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : The metadata store ID where the context is created. The default metadata store is named`default`.\n- : (Optional) The maximum number of artifacts to return. If this value is not specified, the service returns a maximum of 100 records.\n- : (Optional) A page token from a previous [MetadataService.ListArtifacts](/vertex-ai/docs/reference/rest/v1/projects.locations.metadataStores.artifacts/list) call. Specify this token to get the next page of results.\n- : Specifies the conditions required to include a context in the result set.\nHTTP method and URL:\n```\nGET https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/contexts?pageSize=PAGE_SIZE&pageToken=PAGE_TOKEN&filter=FILTER\n```\nTo send your request, expand one of these options:You should see output similar to the following. is the ID of the context record.\n```\n{\n \"contexts\": [ {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/contexts/CONTEXT_ID\",\n  \"displayName\": \"Experiment 1\",\n  \"etag\": \"67891011\",\n  \"createTime\": \"2021-05-18T22:36:02.153Z\",\n  \"updateTime\": \"2021-05-18T22:36:02.153Z\",\n  \"parentContexts\": [],\n  \"schemaTitle\": \"system.Experiment\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {}\n },\n {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/contexts/CONTEXT_ID\",\n  \"displayName\": \"Pipeline run 1\",\n  \"etag\": \"67891011\",\n  \"createTime\": \"2021-05-18T22:35:02.600Z\",\n  \"updateTime\": \"2021-05-18T22:35:02.600Z\",\n  \"parentContexts\": [],\n  \"schemaTitle\": \"system.PipelineRun\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {}\n }\n ]\n}\n```\n## Query for an execution's input and output artifacts\nUse the following instructions to query for the artifacts and executions in the specified context, along with the events that connect artifacts to executions.\n### Vertex AI SDK for Python\nThis Python SDK sample involves querying for an execution's input artifacts.### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/experiment_tracking/get_execution_input_artifacts_sample.py) \n```\ndef get_execution_input_artifacts_sample(\u00a0 \u00a0 execution: aiplatform.Execution):\u00a0 \u00a0 return execution.get_input_artifacts()\n```\nThis Python SDK sample involves querying for an execution's output artifacts.### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/experiment_tracking/get_execution_output_artifacts_sample.py) \n```\ndef get_execution_output_artifacts_sample(\u00a0 \u00a0 execution: aiplatform.Execution):\u00a0 \u00a0 return execution.get_output_artifacts()\n```\n### REST\nThis REST sample includes querying for both an execution's input and output artifacts.\nBefore using any of the request data, make the following replacements:- : Your region.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : The metadata store ID where the execution is created. The default metadata store is named`default`.\n- : The ID of the execution record.\nHTTP method and URL:\n```\nGET https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/executions/EXECUTION_ID:queryExecutionInputsAndOutputs\n```\nTo send your request, expand one of these options:You should see output similar to the following. is The ID of the execution record. If the execution ID is not specified, Vertex ML Metadata created a unique identifier for this execution. is the ID of the artifact record.\n```\n{\n \"artifacts\": [ {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/artifacts/ARTIFACT_ID\",\n  \"displayName\": \"Example artifact\",\n  \"uri\": \"gs://your_bucket_name/artifacts/dataset.csv\",\n  \"etag\": \"678901011\",\n  \"createTime\": \"2021-05-18T00:29:24.344Z\",\n  \"updateTime\": \"2021-05-18T00:29:24.344Z\",\n  \"state\": \"LIVE\",\n  \"schemaTitle\": \"system.Dataset\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {\n  \"payload_format\": \"CSV\"\n  },\n  \"description\": \"Description of the example artifact.\"\n },\n {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/artifacts/ARTIFACT_ID\",\n  \"displayName\": \"Example artifact 2\",\n  \"uri\": \"gs://your_bucket_name/artifacts/dataset.csv\",\n  \"etag\": \"678901011\",\n  \"createTime\": \"2021-05-18T00:33:13.833Z\",\n  \"updateTime\": \"2021-05-18T00:33:13.833Z\",\n  \"state\": \"LIVE\",\n  \"schemaTitle\": \"system.Dataset\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {\n  \"payload_format\": \"CSV\"\n  },\n  \"description\": \"Description of the example artifact.\"\n }\n ],\n \"executions\": [ {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/executions/EXECUTION_ID\",\n  \"displayName\": \"Example execution 1\",\n  \"etag\": \"678901011\",\n  \"createTime\": \"2021-05-18T00:04:49.659Z\",\n  \"updateTime\": \"2021-05-18T00:04:49.659Z\",\n  \"schemaTitle\": \"system.Run\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {},\n  \"description\": \"Description of the example execution.\"\n }\n ],\n \"events\": [ {\n  \"artifact\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/artifacts/ARTIFACT_ID\",\n  \"execution\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/executions/EXECUTION_ID\",\n  \"eventTime\": \"2021-05-18T00:04:49.659Z\",,\n  \"type\": \"INPUT\",\n },\n {\n  \"artifact\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/artifacts/ARTIFACT_ID\",\n  \"execution\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/executions/EXECUTION_ID\",\n  \"eventTime\": \"2021-05-18T00:04:49.659Z\",,\n  \"type\": \"OUTPUT\",\n }\n ]\n}\n```\n## Query for a context's lineage subgraph\nUse the following instructions to query for the artifacts and executions in the specified context, along with the events that connect artifacts to executions.\nBefore using any of the request data, make the following replacements:- : Your region.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : The metadata store ID where the execution is created. The default metadata store is named`default`.\n- : (Optional) The ID of the context record.\nHTTP method and URL:\n```\nGET https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/contexts/CONTEXT_ID:queryContextLineageSubgraph\n```\nTo send your request, expand one of these options:You should see output similar to the following. is The ID of the execution record. If the execution ID is not specified, Vertex ML Metadata created a unique identifier for this execution. is the ID of the artifact record.\n```\n{\n \"artifacts\": [ {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/artifacts/ARTIFACT_ID\",\n  \"displayName\": \"Example artifact\",\n  \"uri\": \"gs://your_bucket_name/artifacts/dataset.csv\",\n  \"etag\": \"678901011\",\n  \"createTime\": \"2021-05-18T00:29:24.344Z\",\n  \"updateTime\": \"2021-05-18T00:29:24.344Z\",\n  \"state\": \"LIVE\",\n  \"schemaTitle\": \"system.Dataset\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {\n  \"payload_format\": \"CSV\"\n  },\n  \"description\": \"Description of the example artifact.\"\n },\n {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/artifacts/ARTIFACT_ID\",\n  \"displayName\": \"Example artifact 2\",\n  \"uri\": \"gs://your_bucket_name/artifacts/dataset.csv\",\n  \"etag\": \"678901011\",\n  \"createTime\": \"2021-05-18T00:33:13.833Z\",\n  \"updateTime\": \"2021-05-18T00:33:13.833Z\",\n  \"state\": \"LIVE\",\n  \"schemaTitle\": \"system.Dataset\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {\n  \"payload_format\": \"CSV\"\n  },\n  \"description\": \"Description of the example artifact.\"\n }\n ],\n \"executions\": [ {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/executions/EXECUTION_ID\",\n  \"displayName\": \"Example execution 1\",\n  \"etag\": \"678901011\",\n  \"createTime\": \"2021-05-18T00:04:49.659Z\",\n  \"updateTime\": \"2021-05-18T00:04:49.659Z\",\n  \"schemaTitle\": \"system.Run\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {},\n  \"description\": \"Description of the example execution.\"\n }\n ],\n \"events\": [ {\n  \"artifact\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/artifacts/ARTIFACT_ID\",\n  \"execution\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/executions/EXECUTION_ID\",\n  \"eventTime\": \"2021-05-18T00:04:49.659Z\",,\n  \"type\": \"INPUT\",\n },\n {\n  \"artifact\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/artifacts/ARTIFACT_ID\",\n  \"execution\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/executions/EXECUTION_ID\",\n  \"eventTime\": \"2021-05-18T00:04:49.659Z\",,\n  \"type\": \"OUTPUT\",\n }\n ]\n}\n```\n## What's next\n- [Get started tracking your Vertex ML Metadata](/vertex-ai/docs/ml-metadata/tracking) .", "guide": "Vertex AI"}