{"title": "Vertex AI - Reduce forecasting bias with hierarchical aggregation", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Reduce forecasting bias with hierarchical aggregation\nTo see an example of how to create hierarchical forecasting models using AutoML and perform batch prediction,  run the \"AutoML training hierarchical forecasting for batch prediction\" Jupyter notebook in one of the following  environments: [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/automl/sdk_automl_forecasting_hierarchical_batch.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fautoml%2Fsdk_automl_forecasting_hierarchical_batch.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/automl/sdk_automl_forecasting_hierarchical_batch.ipynb)\nThis page explains what hierarchical forecasting is, what its objectives are, and shows you some training strategies that you can employ to reduce bias in your forecasting models.\nFor detailed instructions on how to configure hierarchical forecasting when training your forecasting model using the API, see [Train a forecast model](/vertex-ai/docs/tabular-data/forecasting/train-model#api) .\n", "content": "## What is hierarchical forecasting\nTime series are often structured in a nested hierarchy. For example, the entire inventory of products that a retailer sells can be divided into categories of products. The categories can be further divided into individual products. When forecasting future sales, the forecasts for the products of a category should add up to the forecast for the category itself, and so forth up the hierarchy.\nSimilarly, the time dimension of a single time series can also exhibit a hierarchy. For example, forecasted sales for an individual product at the day level should add up to the product's forecasted weekly sales. The following figure shows this group and temporal hierarchy as a matrix:\nHierarchical forecasting has three objectives:\n- **Reduce overall bias** to improve metrics over all time series (total sales).\n- **Reduce temporal bias** to improve metrics over the horizon (season sales).\n- **Reduce group level bias** to improve metrics over a group of time series (item sales).\nIn Vertex AI, hierarchical forecasting takes into account the hierarchical structure of time series by incorporating additional [loss](https://developers.google.com/machine-learning/glossary#loss) terms for aggregated predictions.\n```\nHierarchical loss = (1 x loss) +\n     (temporal total weight x temporal total loss) +\n     (group total weight x group total loss) +\n     (group temporal total weight x group temporal total loss)\n```\nFor example, if the hierarchical group is \"category\", the predictions at the \"category\" level is the sum of predictions for all \"products\" in the category. If the objective of the model is mean absolute error (MAE), the loss would include the MAE for predictions at both the \"product\" and \"category\" levels. This helps to improve the consistency of forecasts at different levels of the hierarchy, and in some cases, may even improve metrics at the lowest level.\n## Configure hierarchical aggregation for model training\nYou can configure hierarchical aggregation when training your forecast models by configuring [AutoMLForecastingTrainingJob](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.AutoMLForecastingTrainingJob) in the [Vertex AI SDK](/vertex-ai/docs/start/client-libraries) or by [configuring hierarchyConfig in the Vertex AI API](/vertex-ai/docs/tabular-data/forecasting/train-model#api) .\nAvailable parameters for `AutoMLForecastingTrainingJob` and `hierarchyConfig` include:\n- `group_columns`\n- `group_total_weight`\n- `temporal_total_weight`\n- `group_temporal_total_weight`\nThe parameters allow for different combinations of group and time aggregated losses. They also allow you to assign weights to increase the priority of minimizing the aggregated loss relative to the individual loss. For example, if the weight is set to `2.0` , it will be weighted twice as much as the individual loss.\n### group_columns\nColumn names in your training input table that identify the grouping for the hierarchy level. The column(s) must be `time_series_attribute_columns` . If the group column is not set, all time series will be treated as part of the same group and is aggregated over all time series.\n### group_total_weight\nWeight of the group aggregated loss relative to the individual loss. Disabled if set to `0.0` or is not set.\n### temporal_total_weight\nWeight of the time aggregated loss relative to the individual loss. Disabled if set to `0.0` or is not set.\n### group_temporal_total_weight\nWeight of the total (group x time) aggregated loss relative to the individual loss. Disabled if set to `0.0` or is not set. If the group column is not set, all time series will be treated as part of the same group and is aggregated over all time series.\n## Strategies to reduce bias\nConsider starting with one type of aggregation (group or time) with a weight of `10.0` , and then halve or double the value based on the results.\n### Reduce overall bias\nIn fine-grained forecasts for distributing stock across stores where weighted absolute percentage error (WAPE) at the product x store x date level are used as a forecasting metric, forecasts often underpredict at the aggregate levels. To compensate for this overall bias, you can try the following:\n- Set`group_total_weight`to`10.0`.\n- Leave`group_columns`unset.\n- Leave other weights unset.\nThis aggregates over all time series and reduces overall bias.\n### Reduce temporal bias\nIn long term planning, forecasts may be made at a product x region x week level, but the relevant metrics may be measured with respect to seasonal totals. To compensate for this temporal bias, you can try the following:\n- Set`temporal_total_weight`to`10.0`.\n- Leave`group_columns`unset.\n- Leave other weights unset.\nThis aggregates over all dates in the horizon of a time series, and reduces temporal bias.\n### Reduce group level bias\nFor forecasts that are multi-purpose in the replenishment process, fine grained forecasts at the product x store x date or week level may be aggregated up to product x distribution center x date levels for distribution or product category x date levels for materials orders. To do this, perform the following:\n- Set`group_total_weight`to`10.0`.\n- Set`group_columns`, for example, [\"region\"] or [\"region\", \"category\"]. Setting multiple group columns uses their combined value to define the group. For best results, use group columns with 100 or fewer distinct combined values.\n- Leave other weights unset.\nThis aggregates over all time series in the same group for the same date, and reduces bias at the group level.\n## Limits\n- Only one level of time series aggregation is supported. If more than one grouping column is specified, such as \"product, store\", the time series is in the same group only if they share the same values of both \"product\" and \"store\".\n- We recommend using 100 or fewer groups.## What's next\n- [Evaluate your model](/vertex-ai/docs/tabular-data/forecasting/evaluate-model) .", "guide": "Vertex AI"}