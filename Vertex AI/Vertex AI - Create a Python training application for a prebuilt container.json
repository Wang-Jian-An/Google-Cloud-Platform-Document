{"title": "Vertex AI - Create a Python training application for a prebuilt container", "url": "https://cloud.google.com/vertex-ai/docs/training/create-python-pre-built-container", "abstract": "# Vertex AI - Create a Python training application for a prebuilt container\nBefore you can perform custom training with a prebuilt container, you must create a [Python sourcedistribution](https://packaging.python.org/en/latest/overview/#python-source-distributions) that contains your training application and upload it to a Cloud Storage bucket that your Google Cloud project can access.\n**Note:** Vertex AI and the Google Cloud console sometimes refer to a source distribution as a \"package,\" which is short for [\"distributionpackage\"](https://packaging.python.org/glossary/#term-Distribution-Package) . Each source distribution can contain one or more [\"importpackages\"](https://packaging.python.org/glossary/#term-Import-Package) . This document uses the term \"package\" to refer to import packages.\n", "content": "## Alternatives to creating a source distribution\nThis guide walks through manually creating a source distribution and uploading it to Cloud Storage. Before you follow the guide, consider the following alternative workflows, which might be more convenient for some cases:\n- If you want to train using code on your local computer and reduce the amount of manual packaging work as much as possible, then we recommend that you use the Google Cloud CLI's feature. This feature lets you build a Docker container image, push it to Container Registry, and create a `CustomJob` resource based on the container image, all with a single command. Learn more in the [guide to creating a CustomJob](/vertex-ai/docs/training/create-custom-job#create) .To use autopackaging, you must install Docker on your local computer. This option only lets you create a `CustomJob` , not a `TrainingPipeline` or `HyperparameterTuningJob` resource. (Learn about the [differences between custom training resources](/vertex-ai/docs/training/custom-training-methods) .)\n- To further customize your container image and to run your code in a container locally before running it on Vertex AI, you can use the gcloud CLI's `local-run` command to [containerize your code and runit locally](/vertex-ai/docs/training/containerize-run-code-local) . Then you can manually [push the image to Artifact Registry orContainer Registry](/vertex-ai/docs/training/create-custom-container#build-and-push-container) .To use the `local-run` command, you must install Docker on your local computer.\n- If you can write your training code in a single Python script, then you can use the [Vertex AI SDK for Python](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) 's [CustomJob class](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.CustomJob) to create a custom job or [CustomTrainingJob class](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.CustomTrainingJob) to create a [custom TrainingPipeline](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.CustomJob) . Your training code is automatically packaged as a source distribution and uploaded to Cloud Storage.\n- For the most flexibility, you can manually [create a custom containerimage](/vertex-ai/docs/training/create-custom-container) and push it to Artifact Registry or Container Registry.\nIf none of the preceding options fit your use case, or if you prefer to manually package your training application as a source distribution, follow the rest of this guide.\n## Before you begin\nBefore preparing your training application to run in the cloud, complete the the following steps:\n- Develop your training application using a machine learning (ML) framework available in one of Vertex AI's [prebuilt containers fortraining](/vertex-ai/docs/training/pre-built-containers) . Make sure that your training application meets the [training coderequirements](/vertex-ai/docs/training/code-requirements) .If you are writing the training application from scratch, we recommend that you organize your code according to the [application structure](#structure) described in a following section of this document.\n- [Create a Cloud Storage bucket](/storage/docs/creating-buckets) in the same Google Cloud project where you plan to use Vertex AI. You will store your training application in this bucket. (While it is possible to use a bucket in a different Google Cloud bucket, this requires additional configuration outside the scope of this guide.)For the best performance, ensure that the Cloud Storage bucket is in the [location](/vertex-ai/docs/general/locations) where you plan to use Vertex AI.\n- Know all of the Python libraries that your training application depends on, whether they're custom dependencies or freely available through [PyPI](https://pypi.python.org/pypi) .## Application structure\nWhen you perform custom training using a prebuilt container, you must specify your training code according to the following requirements:\n- Provide the code as one or more Python source distributions.If you use the Vertex AI API to start custom training, specify these in the [packageUris field](/vertex-ai/docs/reference/rest/v1/CustomJobSpec#PythonPackageSpec) .\n- Create a module in one of these source distributions that acts as the entrypoint for training.If you use the Vertex AI API to start custom training, specify this in the [pythonModulefield](/vertex-ai/docs/reference/rest/v1/CustomJobSpec#PythonPackageSpec) .\nAs long as you meet these requirements, you can structure your training application in any way you like. However, we recommend that you build a single Python source distribution by organizing your code in the following structure (which is frequently used in Vertex AI samples):\n- Use a main project directory, containing your `setup.py` file. See the following section for guidance about this file's contents.\n- Within the main project directory, create a subdirectory named `trainer/` that serves as the main package for your training code.\n- Within `trainer/` , create a module named `task.py` that serves as the entrypoint for your training code.\n- To support `trainer/task.py` , create any additional Python modules that you want in the `trainer/` package, and create any additional subdirectories with that additional code that you want in the main project directory.\n- Create an [__init__.pyfile](https://docs.python.org/3/reference/import.html#regular-packages) in each subdirectory to make it a package.\nThe rest of this guide assumes that your code is organized according to this structure.\n## Create a source distribution\nBuilding Python source distributions is an expansive topic that is largely beyond the scope of this documentation. For convenience, this section provides an overview of using [Setuptools](https://setuptools.readthedocs.io/en/latest/) to build a source distribution to use with Vertex AI. There are other libraries you can use to do the same thing.\n- Create a `setup.py` file that tells Setuptools how to create the source distribution. A basic `setup.py` includes the following:- Import statements for `setuptools.find_packages` and `setuptools.setup` .\n- A call to `setuptools.setup` with (at a minimum) these parameters set:- `name` set to the name of your source distribution.\n- `version` set to the version number of this build of your source distribution.\n- `install_requires` set to a list of dependencies that are required by your application, with version requirements, like `'docutils>=0.3'` .\n- `packages` set to `find_packages()` . This tells Setuptools to include all subdirectories of the parent directory that contain an `__init__.py` file as packages.\n- `include_package_data` set to `True` .The following example shows a basic `setup.py` file for a training application:```\nfrom setuptools import find_packagesfrom setuptools import setupsetup(\u00a0 \u00a0 name='trainer',\u00a0 \u00a0 version='0.1',\u00a0 \u00a0 packages=find_packages(),\u00a0 \u00a0 include_package_data=True,\u00a0 \u00a0 description='My training application.')\n```\n- Run the following command to create a source distribution, `dist/trainer-0.1.tar.gz` :```\npython setup.py sdist --formats=gztar\n```\n### Python application dependencies\nDependencies are packages that you `import` in your code. Your application may have many dependencies that it needs to make it work.\nFor each replica in your custom training job, your code runs in a container with many common Python dependencies already installed. Check the dependencies included in the [prebuilt container](/vertex-ai/docs/training/pre-built-containers) that you plan to use for training and note any of your dependencies that are not already installed. You only need to complete the following steps for dependencies that are not already installed in the prebuilt container.\nThere are 2 types of dependencies that you may need to add:\n- dependencies, which are common distribution packages available on [PyPI](https://pypi.python.org/pypi) \n- dependencies, such as packages that you developed yourself, or those internal to an organization.\nThe sections below describe the procedure for each type.\nYou can specify your application's standard dependencies as part of its `setup.py` script. Vertex AI uses `pip` to install your training application on the replicas that it allocates for your job. The [pip install](https://pip.pypa.io/en/stable/user_guide/#installing-packages) command looks for configured dependencies and installs them.\nThe following example shows a `setup.py` similar to the one from a previous section. However, this `setup.py` tells Vertex AI to install `some_PyPI_package` when it installs the training application:\n```\nfrom setuptools import find_packagesfrom setuptools import setupREQUIRED_PACKAGES = ['some_PyPI_package>=1.0']setup(\u00a0 \u00a0 name='trainer',\u00a0 \u00a0 version='0.1',\u00a0 \u00a0 install_requires=REQUIRED_PACKAGES,\u00a0 \u00a0 packages=find_packages(),\u00a0 \u00a0 include_package_data=True,\u00a0 \u00a0 description='My training application.')\n```\nYou can specify your application's custom dependencies by passing their paths as part of your job configuration. You need the URI of the source distribution of each dependency. The custom dependencies must be in a Cloud Storage location. Vertex AI uses [pip install](https://pip.pypa.io/en/stable/user_guide/#installing-packages) to install custom dependencies, so they can have standard dependencies of their own in their `setup.py` scripts.\nEach URI you include is the path to a source distribution, formatted as a tarball ( `.tar.gz` ) or as a wheel ( `.whl` ). Vertex AI installs each dependency using [pip install](https://pip.pypa.io/en/stable/user_guide/#installing-packages) on each replica that it allocates for your training job.\nIf you use the Vertex AI API to start custom training, specify the Cloud Storage URIs to these dependencies along with your training application in the [packageUrisfield](/vertex-ai/docs/reference/rest/v1/CustomJobSpec#PythonPackageSpec) .\n## Python modules\nYour application can contain multiple modules (Python files). You must identify the module that contains your application entry point. The training service runs that module by invoking Python, just as you would run it locally.\nFor example, if you follow the recommended structure from a preceding section, your main module is `task.py` . Since it's inside an import package (directory with an `__init__.py` file) named `trainer` , the fully qualified name of this module is `trainer.task` . So if you use the Vertex AI API to start custom training, set the [moduleNamefield](/vertex-ai/docs/reference/rest/v1/CustomJobSpec#PythonPackageSpec) to `trainer.task` .\nRefer to the [Python guide topackages](https://docs.python.org/3/tutorial/modules.html#packages) for more information about modules.\n## Upload your source distribution to Cloud Storage\nYou can use the [gsutil](/storage/docs/gsutil) tool to upload your source distribution and any custom dependencies to a Cloud Storage bucket. For example:\n```\ngsutil cp dist/trainer-0.1.tar.gz CLOUD_STORAGE_DIRECTORY\n```\nReplace with the URI (beginning with `gs://` and ending with `/` ) of a Cloud Storage directory in a bucket that your Google Cloud project can access.\nTo learn about other ways to upload your source distribution to Cloud Storage, read [Uploadingobjects](/storage/docs/uploading-objects) in the Cloud Storage documentation.\n## What's next\n- Learn about additional [training coderequirements](/vertex-ai/docs/training/code-requirements) for custom training.\n- Learn how to [create a custom training job](/vertex-ai/docs/training/create-custom-job) or a [custom training pipeline](/vertex-ai/docs/training/create-training-pipeline) that uses your training application.", "guide": "Vertex AI"}