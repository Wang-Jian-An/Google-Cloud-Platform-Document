{"title": "Vertex AI - Encode image data using Base64", "url": "https://cloud.google.com/vertex-ai/docs/general/base64", "abstract": "# Vertex AI - Encode image data using Base64\nYou can provide image data for prediction to the Vertex AI API by sending the image data as base64-encoded text.\n", "content": "## Using the command line\nWithin a gRPC request, you can simply write binary data out directly; however, JSON is used when making a REST request. JSON is a text format that does not directly support binary data, so you will need to convert such binary data into text using [Base64](https://en.wikipedia.org/wiki/Base64) encoding.\nMost development environments contain a native `base64` utility to encode a binary into ASCII text data. To encode a file:\nEncode the file using the `base64` command line tool, making sure to  prevent line-wrapping by using the `-w 0` flag:\n```\nbase64 INPUT_FILE -w 0 > OUTPUT_FILE\n```\nEncode the file using the `base64` command line tool:\n```\nbase64 -i INPUT_FILE -o OUTPUT_FILE\n```\nEncode the file using the `Base64.exe` tool:\n```\nBase64.exe -e INPUT_FILE > OUTPUT_FILE\n```\nEncode the file using the `Convert.ToBase64String` method:\n```\n[Convert]::ToBase64String([IO.File]::ReadAllBytes(\"./INPUT_FILE\")) > OUTPUT_FILE\n```\nCreate a JSON request file, inlining the base64-encoded data:\n```\n{\u00a0 \"instances\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"content\": \"BASE64_ENCODED_DATA\"\u00a0 \u00a0 }\u00a0 ],\u00a0 \"parameters\": {\u00a0 \u00a0 \"confidenceThreshold\": DECIMAL,\u00a0 \u00a0 \"maxPredictions\": INTEGER\u00a0 }}\n```\n## Using client libraries\nEmbedding binary data into requests through text editors is neither desirable or practical. In practice, you will be embedding base64 encoded files within client code. All supported programming languages have built-in mechanisms for base64 encoding content.\n```\n# Import the base64 encoding library.import base64# Pass the image data to an encoding function.def encode_image(image):\u00a0 \u00a0 with open(image, \"rb\") as image_file:\u00a0 \u00a0 \u00a0 \u00a0 encoded_string = base64.b64encode(image_file.read())\u00a0 \u00a0 return encoded_string\n```\n```\n// Read the file into memory.var fs = require('fs');var imageFile = fs.readFileSync('/path/to/file');// Convert the image data to a Buffer and base64 encode it.var encoded = Buffer.from(imageFile).toString('base64');\n```\n```\n// Import the Base64 encoding library.import org.apache.commons.codec.binary.Base64;// Encode the image.byte[] imageData = Base64.encodeBase64(imageFile.getBytes());String encodedString = Base64.getEncoder().encodeToString(imageData);\n```\n```\nimport (\u00a0 \u00a0 \"bufio\"\u00a0 \u00a0 \"encoding/base64\"\u00a0 \u00a0 \"io\"\u00a0 \u00a0 \"os\")// Open image file.f, _ := os.Open(\"image.jpg\")// Read entire image into byte slice.reader := bufio.NewReader(f)content, _ := io.ReadAll(reader)// Encode image as base64.base64.StdEncoding.EncodeToString(content)\n```", "guide": "Vertex AI"}