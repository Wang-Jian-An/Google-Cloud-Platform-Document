{"title": "Vertex AI - Customer-managed encryption keys", "url": "https://cloud.google.com/vertex-ai/docs/workbench/instances/cmek", "abstract": "# Vertex AI - Customer-managed encryption keys\n# Customer-managed encryption keys\nBy default, Google Cloud automatically [encrypts data when it is atrest](/security/encryption/default-encryption) using encryption keys managed by Google. If you have specific compliance or regulatory requirements related to the keys that protect your data, you can use [customer-managedencryption keys (CMEK)](/kms/docs/cmek) for your Vertex AI Workbench instances.\nThis page describes some specific benefits and limitations of using CMEK with Vertex AI Workbench and shows how to configure a new Vertex AI Workbench instance to use CMEK.\nFor information about CMEK in general, including when and why to enable it, see [Customer-managed encryption keys](/kms/docs/cmek) .\n", "content": "## Benefits of CMEK\nIn general, CMEK is most useful if you need full control over the keys used to encrypt your data. With CMEK, you can manage your keys within Cloud Key Management Service. For example, you can rotate or disable a key or you can set up a rotation schedule by using the Cloud KMS API.\nWhen you run a Vertex AI Workbench instance, your instance runs on a virtual machine (VM) managed by Vertex AI Workbench. When you enable CMEK for a Vertex AI Workbench instance, Vertex AI Workbench uses the key that you designate, rather than a key managed by Google, to encrypt data on the boot disks of the VM.\nThe CMEK key encrypt metadata, like the instance's name and region, associated with your Vertex AI Workbench instance. Metadata associated with Vertex AI Workbench instances is always encrypted using Google's default encryption mechanism.\n## Limitations of CMEK\nTo decrease latency and to prevent cases where resources depend on services that are spread across multiple failure domains, Google recommends that you protect regional Vertex AI Workbench instances with keys in the same location.\n- You can encrypt regional Vertex AI Workbench instances by using keys in the same location or in the global location. For example, you can encrypt data in a disk in zone`us-west1-a`by using a key in`us-west1`or`global`.\n- You can encrypt global instances by using keys in any location.\n- [](None) Configuring CMEK for Vertex AI Workbenchautomatically configure CMEK for other Google Cloud products that you use. To use CMEK to encrypt data in other Google Cloud products, you must complete additional configuration.## Configure CMEK for your Vertex AI Workbench instance\nThe following sections describe how to create a key ring and key in Cloud Key Management Service, grant the service account encrypter and decrypter permissions for your key, and create a Vertex AI Workbench instance that uses CMEK.\n### Before you begin\nWe recommend using a setup that supports a [separation ofduties](/kms/docs/separation-of-duties) . To configure CMEK for Vertex AI Workbench, you can use two separate Google Cloud projects:\n- A Cloud KMS project: a project for managing your encryption key\n- A Vertex AI Workbench project: a project for accessing Vertex AI Workbench instances and interacting with any other Google Cloud products that you need for your use case\nAlternatively, you can use a single Google Cloud project. To do so, use the same project for all of the following tasks.\n[Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n```\ngcloud init\n```\n**Note:** You can run the gcloud CLI in  the Google Cloud console without installing the Google Cloud CLI. To run the  gcloud CLI in the Google Cloud console, [use  Cloud Shell](https://console.cloud.google.com/?cloudshell=true) .### Create a key ring and key\nWhen you create a key ring and key, keep the following requirements in mind:\n- When you choose your key ring's location, use either `global` or the location where your Vertex AI Workbench instance will be.\n- Make sure to create your key ring and key in your Cloud KMS project.\nTo create a key ring and a key, see [Create symmetric encryption keys](/kms/docs/creating-keys) .\n### Grant Vertex AI Workbench permissions\nTo use CMEK for your Vertex AI Workbench instance, you must grant your Vertex AI Workbench instance permission to encrypt and decrypt data using your key. You grant this permission to your project's [service agent](/iam/docs/service-agents) and the Compute Engine service account.\nTo find the specific accounts for your Vertex AI Workbench project, use the Google Cloud console.\n- In the Google Cloud console, go to the **IAM** page [Go to IAM](https://console.cloud.google.com/iam-admin/iam) \n- Select **Include Google-provided role grants** .\n- Find the members that match the following email address formats. Make note of the email addresses, and use them in the following steps.- Your project's service agent's email address looks like the following:```\nservice-NOTEBOOKS_PROJECT_NUMBER@gcp-sa-notebooks.iam.gserviceaccount.com\n```\n- The Compute Engine service account's email address looks like the following:```\nservice-NOTEBOOKS_PROJECT_NUMBER@compute-system.iam.gserviceaccount.com\n```\nReplace `` with the [projectnumber](/resource-manager/docs/cloud-platform-resource-hierarchy#projects) for your Vertex AI Workbench project.To grant these accounts permission to encrypt and decrypt data using your key, you can use the Google Cloud console or the Google Cloud CLI.\n- In the Google Cloud console, go to the **Cryptographic keys** page. [Go to Cryptographic keys](https://console.cloud.google.com/security/kms?project=_) \n- Select your Cloud KMS project.\n- Click the name of the key ring that you created in [Create a key ring and key](#creating-key-ring-and-key) . The **Key ring details** page opens.\n- Select the checkbox for the key that you created in [Create a key ring and key](#creating-key-ring-and-key) . If an info panel labeled with the name of your key isn't already open, click **Show info panel** .\n- In the info panel, click person_add **Add member** . The **Add members to \"KEY_NAME\"** dialog opens. In this dialog, do the following:- In the **New members** field, enter your project's service agent's email address:```\nservice-NOTEBOOKS_PROJECT_NUMBER@gcp-sa-notebooks.iam.gserviceaccount.com\n```\n- In the **Select a role** list, click **Cloud KMS** and then select the **Cloud KMS CryptoKey Encrypter/Decrypter** role.\n- Click **Save** .\n- Repeat these steps for the Compute Engine service agent:```\nservice-NOTEBOOKS_PROJECT_NUMBER@compute-system.iam.gserviceaccount.com\n```\n- To grant your project's service agent permission to encrypt and decrypt data using your key, run the following command:```\ngcloud kms keys add-iam-policy-binding KEY_NAME \\\n --keyring=KEY_RING_NAME \\\n --location=REGION \\\n --project=KMS_PROJECT_ID \\\n --member=serviceAccount:service-NOTEBOOKS_PROJECT_NUMBER@gcp-sa-notebooks.iam.gserviceaccount.com \\\n --role=roles/cloudkms.cryptoKeyEncrypterDecrypter\n```Replace the following:- ``: the name of the key that you created in [Create a key ring and key](#creating-key-ring-and-key) \n- ``: the key ring that you created in [Create a key ring and key](#creating-key-ring-and-key) \n- ``: the region where you created your key ring\n- ``: the ID of your Cloud KMS project\n- ``: the project number of your Vertex AI Workbench project, which you noted in the preceding section as part of a service account email address.\n- To grant the Compute Engine service account permission to encrypt and decrypt data using your key, run the following command:```\ngcloud kms keys add-iam-policy-binding KEY_NAME \\\n --keyring=KEY_RING_NAME \\\n --location=REGION \\\n --project=KMS_PROJECT_ID \\\n --member=serviceAccount:service-NOTEBOOKS_PROJECT_NUMBER@compute-system.iam.gserviceaccount.com \\\n --role=roles/cloudkms.cryptoKeyEncrypterDecrypter\n```### Create a Vertex AI Workbench instance with CMEK\nAfter you have granted your Vertex AI Workbench instance permission to encrypt and decrypt data using your key, you can create a Vertex AI Workbench instance that encrypts data using this key.\nThe following example shows how to encrypt and decrypt data using your key by using the Google Cloud console.\nTo create a Vertex AI Workbench instance with a customer-managed encryption key:\n- In the Google Cloud console, go to the **Instances** page. [Go to Instances](https://console.cloud.google.com/vertex-ai/workbench/instances) \n- Click add_box **Create new** .\n- In the **New instance** dialog, click **Advanced options** .\n- In the **Create instance** dialog, in the **Details** section, provide the following information for your new instance:- **Name** : a name for your new instance\n- **Region** : the region that your key and key ring are in\n- **Zone** : a zone within the region that you selected\n- In the **Disks** section, in **Encryption** , select **Customer-managed encryption key (CMEK)** .\n- Click **Select a customer-managed key** .- If the customer-managed key that you want to use is in the list, select it.\n- If the customer-managed key that you want to use isn't in the list, enter the resource ID for your customer-managed key. The resource ID for your customer-managed key looks like the following:```\nprojects/NOTEBOOKS_PROJECT_NUMBER/locations/global/keyRings/KEY_RING_NAME/cryptoKeys/KEY_NAME\n```Replace the following:- ``: the ID of your Vertex AI Workbench project\n- ``: the key ring that you created in [Create a key ring and key](#creating-key-ring-and-key) \n- ``: the name of the key that you created in [Create a key ring and key](#creating-key-ring-and-key) \n- Complete the rest of the instance creation dialog, and then click **Create** .## What's next\n- Learn more about [CMEK on Google Cloud](/kms/docs/cmek) .\n- Learn [how to use CMEK with other Google Cloudproducts](/kms/docs/using-other-products) .", "guide": "Vertex AI"}