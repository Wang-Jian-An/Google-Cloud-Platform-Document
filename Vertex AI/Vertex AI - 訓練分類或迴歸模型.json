{"title": "Vertex AI - \u8a13\u7df4\u5206\u985e\u6216\u8ff4\u6b78\u6a21\u578b", "url": "https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/train-model?hl=zh-cn", "abstract": "# Vertex AI - \u8a13\u7df4\u5206\u985e\u6216\u8ff4\u6b78\u6a21\u578b\n\u672c\u9801\u9762\u4ecb\u7d39\u5982\u4f55\u4f7f\u7528 Google Cloud \u63a7\u5236\u6aaf\u6216 Vertex AI API \u6839\u64da\u8868\u683c\u6578\u64da\u96c6\u8a13\u7df4\u5206\u985e\u6216\u8ff4\u6b78\u6a21\u578b\u3002\n", "content": "## \u6e96\u5099\u5de5\u4f5c\n\u5728\u8a13\u7df4\u6a21\u578b\u4e4b\u524d\uff0c\u60a8\u5fc5\u9808\u5148\u5b8c\u6210\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n- [\u6e96\u5099\u8a13\u7df4\u6578\u64da](https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/prepare-data?hl=zh-cn) \n- [\u5275\u5efa Vertex AI \u6578\u64da\u96c6](https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/create-dataset?hl=zh-cn) \u3002## \u8a13\u7df4\u6a21\u578b\n- \u5728 Google Cloud \u63a7\u5236\u6aaf\u7684 Vertex AI \u90e8\u5206\u4e2d\uff0c\u524d\u5f80 **\u6578\u64da\u96c6** \u9801\u9762\u3002 [\u8f49\u5230\u201c\u6578\u64da\u96c6\u201d\u9801\u9762](https://console.cloud.google.com/vertex-ai/datasets?hl=zh-cn) \n- \u9ede\u64ca\u8981\u7528\u65bc\u8a13\u7df4\u6a21\u578b\u7684\u6578\u64da\u96c6\u7684\u540d\u7a31\uff0c\u4ee5\u6253\u958b\u5176\u8a73\u60c5\u9801\u9762\u3002\n- \u5982\u679c\u60a8\u7684\u6578\u64da\u985e\u578b\u4f7f\u7528\u8a3b\u91cb\u96c6\uff0c\u8acb\u9078\u64c7\u8981\u7528\u65bc\u6b64\u6a21\u578b\u7684\u8a3b\u91cb\u96c6\u3002\n- \u9ede\u64ca **\u8a13\u7df4\u65b0\u6a21\u578b** \u3002\n- \u9078\u64c7 **\u5176\u4ed6** \u3002\n- \u5728 **\u8a13\u7df4\u65b0\u6a21\u578b** \u9801\u9762\u4e2d\uff0c\u5b8c\u6210\u4ee5\u4e0b\u6b65\u9a5f\uff1a- \u9078\u64c7\u6a21\u578b\u8a13\u7df4\u65b9\u6cd5\u3002- `AutoML`\u975e\u5e38\u9069\u5408\u5404\u7a2e\u7528\u4f8b\u3002\n\u9ede\u64ca **\u7e7c\u7e8c** \u3002\n- \u8f38\u5165\u65b0\u6a21\u578b\u7684\u986f\u793a\u540d\u3002\n- \u9078\u64c7\u76ee\u6a19\u5217\u3002\u76ee\u6a19\u5217\u662f\u6a21\u578b\u5c07\u9810\u6e2c\u7684\u503c\u3002\u8a73\u7d30\u77ad\u89e3 [\u76ee\u6a19\u5217\u8981\u6c42](https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/prepare-data?hl=zh-cn#data-structure) \u3002\n- **\u53ef\u9078** \uff1a\u5982\u9700\u5c07\u6e2c\u8a66\u6578\u64da\u96c6\u5c0e\u51fa\u5230 BigQuery\uff0c\u8acb\u9078\u4e2d **\u5c07\u6e2c\u8a66\u6578\u64da\u96c6\u5c0e\u51fa\u5230 BigQuery** \u4e26\u63d0\u4f9b\u8868\u7684\u540d\u7a31\u3002\n- **\u53ef\u9078** \uff1a\u5982\u9700\u9078\u64c7\u5982\u4f55\u5728\u8a13\u7df4\u96c6\u3001\u6e2c\u8a66\u96c6\u548c\u9a57\u8b49\u96c6\u4e4b\u9593\u62c6\u5206\u6578\u64da\uff0c\u8acb\u6253\u958b **\u9ad8\u7d1a\u9078\u9805** \u3002\u60a8\u53ef\u4ee5\u5f9e\u4ee5\u4e0b\u6578\u64da\u62c6\u5206\u9078\u9805\u4e2d\u9032\u884c\u9078\u64c7\uff1a- **\u96a8\u6a5f** \uff08\u9ed8\u8a8d\uff09\uff1aVertex AI \u6703\u96a8\u6a5f\u9078\u64c7\u8207\u6bcf\u500b\u6578\u64da\u96c6\u95dc\u806f\u7684\u884c\u3002\u9ed8\u8a8d\u60c5\u6cc1\u4e0b\uff0cVertex AI \u9078\u64c7 80% \u7684\u6578\u64da\u884c\u5206\u914d\u7d66\u8a13\u7df4\u96c6\u300110% \u5206\u914d\u7d66\u9a57\u8b49\u96c6\u300110% \u5206\u914d\u7d66\u6e2c\u8a66\u96c6\u3002\n- **\u624b\u52d5** \uff1aVertex AI \u6703\u6839\u64da\u6578\u64da\u62c6\u5206\u5217\u4e2d\u7684\u503c\u7232\u6bcf\u500b\u6578\u64da\u96c6\u9078\u64c7\u6578\u64da\u884c\u3002\u63d0\u4f9b\u6578\u64da\u62c6\u5206\u5217\u7684\u540d\u7a31\u3002\n- **\u6309\u6642\u9593\u9806\u5e8f** \uff1aVertex AI \u6839\u64da\u6642\u9593\u5217\u4e2d\u7684\u6642\u9593\u6233\u62c6\u5206\u6578\u64da\u3002\u63d0\u4f9b\u6642\u9593\u5217\u7684\u540d\u7a31\u3002\n\u8a73\u7d30\u77ad\u89e3 [\u6578\u64da\u62c6\u5206](https://cloud.google.com/vertex-ai/docs/tabular-data/data-splits?hl=zh-cn) \u3002\n- \u9ede\u64ca **\u7e7c\u7e8c** \u3002\n- **\u53ef\u9078** \uff1a\u9ede\u64ca **\u751f\u6210\u7d71\u8a08\u4fe1\u606f** \u3002\u751f\u6210\u7d71\u8a08\u4fe1\u606f\u6703\u586b\u5145 **\u8f49\u63db** \u4e0b\u62c9\u83dc\u55ae\u3002\n- \u5728\u201c\u8a13\u7df4\u9078\u9805\u201d\u9801\u9762\u4e0a\uff0c\u67e5\u770b\u5217\u5217\u8868\uff0c\u4e26\u5f9e\u8a13\u7df4\u4e2d\u6392\u9664\u4efb\u4f55\u4e0d\u61c9\u7528\u65bc\u8a13\u7df4\u6a21\u578b\u7684\u5217\u3002\n- \u67e5\u770b\u7232\u5305\u542b\u7684\u7279\u5fb5\u9078\u64c7\u7684\u8f49\u63db\uff0c\u4ee5\u53ca\u662f\u5426\u5141\u8a31\u7121\u6548\u6578\u64da\uff0c\u4e26\u9032\u884c\u4efb\u4f55\u6240\u9700\u66f4\u65b0\u3002\u8a73\u7d30\u77ad\u89e3 [\u8f49\u63db](https://cloud.google.com/vertex-ai/docs/datasets/data-types-tabular?hl=zh-cn#transformations) \u548c [\u7121\u6548\u6578\u64da](https://cloud.google.com/vertex-ai/docs/datasets/data-types-tabular?hl=zh-cn#null-values) \u3002\n- \u5982\u679c\u8981\u6307\u5b9a\u6b0a\u91cd\u5217\uff0c\u6216\u66f4\u6539\u9ed8\u8a8d\u7684\u512a\u5316\u76ee\u6a19\uff0c\u8acb\u6253\u958b **\u9ad8\u7d1a\u9078\u9805** \u4e26\u9032\u884c\u9078\u64c7\u3002\u8a73\u7d30\u77ad\u89e3 [\u6b0a\u91cd\u5217](https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/prepare-data?hl=zh-cn#weight) \u548c [\u512a\u5316\u76ee\u6a19](https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/train-model?hl=zh-cn#optimization-objectives) \u3002\n- \u9ede\u64ca **\u7e7c\u7e8c** \u3002\n- \u5728 **\u8a08\u7b97\u548c\u50f9\u683c** \u7a97\u53e3\u4e2d\uff0c\u914d\u7f6e\u5982\u4e0b\uff1a\u8f38\u5165\u6a21\u578b\u8a13\u7df4\u7684\u6700\u5927\u5c0f\u6642\u6578\u3002\u6b64\u8a2d\u7f6e\u6709\u52a9\u65bc\u9650\u5236\u8a13\u7df4\u8cbb\u7528\u3002\u5be6\u969b\u6240\u7528\u7684\u6642\u9593\u53ef\u80fd\u8d85\u904e\u6b64\u503c\uff0c\u56e0\u7232\u5275\u5efa\u65b0\u6a21\u578b\u6d89\u53ca\u5176\u4ed6\u64cd\u4f5c\u3002\u5efa\u8b70\u7684\u8a13\u7df4\u6642\u9593\u8207\u8a13\u7df4\u6578\u64da\u7684\u5927\u5c0f\u6709\u95dc\u3002 \u4e0b\u8868\u6309\u884c\u6578\u986f\u793a\u4e86\u5efa\u8b70\u7684\u8a13\u7df4\u6642\u9593\u7bc4\u570d\uff1b\u5217\u6578\u8f03\u591a\u5247\u6240\u9700\u8a13\u7df4\u6642\u9593\u66f4\u9577\u3002| \u884c    | \u5efa\u8b70\u7684\u8a13\u7df4\u6642\u9593 |\n|:-----------------|:-----------------|\n| \u5c11\u65bc 10 \u842c  | 1 - 3 \u5c0f\u6642  |\n| 10 \u842c - 100 \u842c | 1 - 6 \u5c0f\u6642  |\n| 100 \u842c - 1000 \u842c | 1 - 12 \u5c0f\u6642  |\n| \u8d85\u904e 1000 \u842c  | 3 - 24 \u5c0f\u6642  |\u5982\u9700\u77ad\u89e3\u8a13\u7df4\u50f9\u683c\uff0c\u8acb\u53c3\u95b1 [\u50f9\u683c\u9801\u9762](https://cloud.google.com/vertex-ai/pricing?hl=zh-cn#tabular-data) \u3002\n- \u9ede\u64ca **\u958b\u59cb\u8a13\u7df4** \u3002\u6a21\u578b\u8a13\u7df4\u53ef\u80fd\u9700\u8981\u5e7e\u500b\u5c0f\u6642\uff0c\u5177\u9ad4\u53d6\u6c7a\u65bc\u6578\u64da\u7684\u5927\u5c0f\u548c\u8907\u96dc\u6027\uff0c\u4ee5\u53ca\u8a13\u7df4\u9810\u7b97\uff08\u5982\u679c\u6307\u5b9a\uff09\u3002\u60a8\u53ef\u4ee5\u95dc\u9589\u6b64\u6a19\u7c64\u9801\uff0c\u7a0d\u5f8c\u518d\u8fd4\u56de\u3002\u6a21\u578b\u5b8c\u6210\u8a13\u7df4\u5f8c\uff0c\u60a8\u6703\u6536\u5230\u96fb\u5b50\u90f5\u4ef6\u3002Cloud Storage \u6216 BigQuery \u4e2d\u7684\u8868\u683c\u8a13\u7df4\u6578\u64da\u4e0d\u6703\u5c0e\u5165 Vertex AI\u3002\uff08\u5f9e\u672c\u5730\u6587\u4ef6\u5c0e\u5165\u6642\uff0c\u7cfb\u7d71\u6703\u5c07\u5176\u5c0e\u5165\u5230 Cloud Storage \u4e2d\u3002\uff09\u7576\u60a8\u4f7f\u7528\u8868\u683c\u6578\u64da\u5275\u5efa\u6578\u64da\u96c6\u6642\uff0c\u6578\u64da\u6703\u8207\u6578\u64da\u96c6\u95dc\u806f\u3002\u5275\u5efa\u6578\u64da\u96c6\u5f8c\uff0c\u60a8\u5c0d Cloud Storage \u6216 BigQuery \u4e2d\u7684\u6578\u64da\u6e90\u6240\u505a\u7684\u66f4\u6539\u6703\u7d0d\u5165\u4f7f\u7528\u8a72\u6578\u64da\u96c6\u8a13\u7df4\u7684\u6a21\u578b\u4e2d\u3002\u5728\u6a21\u578b\u8a13\u7df4\u958b\u59cb\u6642\uff0c\u5c07\u622a\u53d6\u6578\u64da\u96c6\u7684\u5feb\u7167\u3002\nCloud Storage \u6216 BigQuery \u4e2d\u7684\u8868\u683c\u8a13\u7df4\u6578\u64da\u4e0d\u6703\u5c0e\u5165 Vertex AI\u3002\uff08\u5f9e\u672c\u5730\u6587\u4ef6\u5c0e\u5165\u6642\uff0c\u7cfb\u7d71\u6703\u5c07\u5176\u5c0e\u5165\u5230 Cloud Storage \u4e2d\u3002\uff09\u7576\u60a8\u4f7f\u7528\u8868\u683c\u6578\u64da\u5275\u5efa\u6578\u64da\u96c6\u6642\uff0c\u6578\u64da\u6703\u8207\u6578\u64da\u96c6\u95dc\u806f\u3002\u5275\u5efa\u6578\u64da\u96c6\u5f8c\uff0c\u60a8\u5c0d Cloud Storage \u6216 BigQuery \u4e2d\u7684\u6578\u64da\u6e90\u6240\u505a\u7684\u66f4\u6539\u6703\u7d0d\u5165\u4f7f\u7528\u8a72\u6578\u64da\u96c6\u8a13\u7df4\u7684\u6a21\u578b\u4e2d\u3002\u5728\u6a21\u578b\u8a13\u7df4\u958b\u59cb\u6642\uff0c\u5c07\u622a\u53d6\u6578\u64da\u96c6\u7684\u5feb\u7167\u3002\n\u9078\u64c7\u8868\u683c\u6578\u64da\u985e\u578b\u76ee\u6a19\u3002\u9078\u64c7\u8a9e\u8a00\u6216\u74b0\u5883\u6a19\u7c64\u9801\uff1a\u60a8\u53ef\u4ee5\u4f7f\u7528 [trainingPipelines.create](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.trainingPipelines/create?hl=zh-cn) \u547d\u4ee4\u8a13\u7df4\u6a21\u578b\u3002\n\u8a13\u7df4\u6a21\u578b\u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- \uff1a\u60a8\u7684\u5340\u57df\u3002\n- \uff1a\u60a8\u7684 [\u9805\u76ee ID](https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=zh-cn#identifiers) \u3002\n- \uff1a\u7232\u6b64\u64cd\u4f5c\u5275\u5efa\u7684\u8a13\u7df4\u6d41\u6c34\u7dda\u7684\u986f\u793a\u540d\u7a31\u3002\n- \uff1a\u60a8\u5e0c\u671b\u6b64\u6a21\u578b\u9810\u6e2c\u7684\u5217\uff08\u503c\uff09\u3002\n- \uff1a\uff08\u53ef\u9078\uff09\u6b0a\u91cd\u5217\u3002 [\u77ad\u89e3\u8a73\u60c5](https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/prepare-data?hl=zh-cn#weight) \u3002\n- \uff1a\u60a8\u5e0c\u671b\u6a21\u578b\u8a13\u7df4\u7684\u6700\u9577\u6642\u9593\uff0c\u4ee5\u6beb\u7bc0\u9ede\u6642\u7232\u55ae\u4f4d\uff081,000 \u6beb\u7bc0\u9ede\u6642\u7b49\u65bc\u4e00\u7bc0\u9ede\u6642\uff09\u3002\n- \uff1a\u50c5\u7576\u60a8\u4e0d\u5e0c\u671b\u9810\u6e2c\u985e\u578b\u7684\u9ed8\u8a8d\u512a\u5316\u76ee\u6a19\u6642\uff0c\u624d\u9700\u8981\u3002 [\u77ad\u89e3\u8a73\u60c5](https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/train-model?hl=zh-cn#optimization-objectives) \u3002\n- \uff1a\u5c07\u7232\u7528\u65bc\u8a13\u7df4\u6a21\u578b\u7684\u6bcf\u4e00\u5217\u63d0\u4f9b\u8f49\u63db\u985e\u578b\u3002 [\u77ad\u89e3\u8a73\u60c5](https://cloud.google.com/vertex-ai/docs/datasets/data-types-tabular?hl=zh-cn#transformations) \u3002\n- \uff1a\u5177\u6709\u6307\u5b9a\u8f49\u63db\u985e\u578b\u7684\u5217\u7684\u540d\u7a31\u3002\u5fc5\u9808\u6307\u5b9a\u7528\u65bc\u8a13\u7df4\u6a21\u578b\u7684\u6bcf\u4e00\u5217\u3002\n- \uff1a\u65b0\u8a13\u7df4\u6a21\u578b\u7684\u986f\u793a\u540d\u7a31\u3002\n- \uff1a\u8a13\u7df4\u6578\u64da\u96c6\u7684 ID\u3002\n- \u60a8\u53ef\u4ee5\u63d0\u4f9b`Split`\u5c0d\u8c61\u4f86\u63a7\u5236\u6578\u64da\u62c6\u5206\u3002\u5982\u9700\u77ad\u89e3\u5982\u4f55\u63a7\u5236\u6578\u64da\u62c6\u5206\uff0c\u8acb\u53c3\u95b1 [\u4f7f\u7528 REST \u63a7\u5236\u6578\u64da\u62c6\u5206](#data-split) \u3002\n- \uff1a\u81ea\u52d5\u751f\u6210\u7684 [\u9805\u76ee\u7de8\u865f](https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=zh-cn#identifiers) \nHTTP \u65b9\u6cd5\u548c\u7db2\u5740\uff1a\n```\nPOST https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT/locations/LOCATION/trainingPipelines\n```\n\u8acb\u6c42 JSON \u6b63\u6587\uff1a\n```\n{\n \"displayName\": \"TRAININGPIPELINE_DISPLAY_NAME\",\n \"trainingTaskDefinition\": \"gs://google-cloud-aiplatform/schema/trainingjob/definition/automl_tabular_1.0.0.yaml\",\n \"trainingTaskInputs\": {\n  \"targetColumn\": \"TARGET_COLUMN\",\n  \"weightColumn\": \"WEIGHT_COLUMN\",\n  \"predictionType\": \"classification\",\n  \"trainBudgetMilliNodeHours\": TRAINING_BUDGET,\n  \"optimizationObjective\": \"OPTIMIZATION_OBJECTIVE\",\n  \"transformations\": [   {\"TRANSFORMATION_TYPE_1\": {\"column_name\" : \"COLUMN_NAME_1\"} },\n   {\"TRANSFORMATION_TYPE_2\": {\"column_name\" : \"COLUMN_NAME_2\"} },\n   ...\n },\n \"modelToUpload\": {\"displayName\": \"MODEL_DISPLAY_NAME\"},\n \"inputDataConfig\": {\n  \"datasetId\": \"DATASET_ID\",\n }\n}\n```\n\u5982\u9700\u767c\u9001\u60a8\u7684\u8acb\u6c42\uff0c\u8acb\u5c55\u958b\u4ee5\u4e0b\u9078\u9805\u4e4b\u4e00\uff1a\u60a8\u61c9\u8a72\u6536\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\u7684 JSON \u97ff\u61c9\uff1a\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/us-central1/trainingPipelines/4567\",\n \"displayName\": \"myModelName\",\n \"trainingTaskDefinition\": \"gs://google-cloud-aiplatform/schema/trainingjob/definition/automl_tabular_1.0.0.yaml\",\n \"modelToUpload\": {\n \"displayName\": \"myModelName\"\n },\n \"state\": \"PIPELINE_STATE_PENDING\",\n \"createTime\": \"2020-08-18T01:22:57.479336Z\",\n \"updateTime\": \"2020-08-18T01:22:57.479336Z\"\n}\n```\n\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300aVertex AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Java \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Vertex AI Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Vertex AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/CreateTrainingPipelineTabularClassificationSample.java) \n```\nimport com.google.cloud.aiplatform.util.ValueConverter;import com.google.cloud.aiplatform.v1.DeployedModelRef;import com.google.cloud.aiplatform.v1.EnvVar;import com.google.cloud.aiplatform.v1.FilterSplit;import com.google.cloud.aiplatform.v1.FractionSplit;import com.google.cloud.aiplatform.v1.InputDataConfig;import com.google.cloud.aiplatform.v1.LocationName;import com.google.cloud.aiplatform.v1.Model;import com.google.cloud.aiplatform.v1.ModelContainerSpec;import com.google.cloud.aiplatform.v1.PipelineServiceClient;import com.google.cloud.aiplatform.v1.PipelineServiceSettings;import com.google.cloud.aiplatform.v1.Port;import com.google.cloud.aiplatform.v1.PredefinedSplit;import com.google.cloud.aiplatform.v1.PredictSchemata;import com.google.cloud.aiplatform.v1.TimestampSplit;import com.google.cloud.aiplatform.v1.TrainingPipeline;import com.google.cloud.aiplatform.v1.schema.trainingjob.definition.AutoMlTablesInputs;import com.google.cloud.aiplatform.v1.schema.trainingjob.definition.AutoMlTablesInputs.Transformation;import com.google.cloud.aiplatform.v1.schema.trainingjob.definition.AutoMlTablesInputs.Transformation.AutoTransformation;import com.google.rpc.Status;import java.io.IOException;import java.util.ArrayList;public class CreateTrainingPipelineTabularClassificationSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String modelDisplayName = \"YOUR_DATASET_DISPLAY_NAME\";\u00a0 \u00a0 String datasetId = \"YOUR_DATASET_ID\";\u00a0 \u00a0 String targetColumn = \"TARGET_COLUMN\";\u00a0 \u00a0 createTrainingPipelineTableClassification(project, modelDisplayName, datasetId, targetColumn);\u00a0 }\u00a0 static void createTrainingPipelineTableClassification(\u00a0 \u00a0 \u00a0 String project, String modelDisplayName, String datasetId, String targetColumn)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 PipelineServiceSettings pipelineServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 PipelineServiceSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEndpoint(\"us-central1-aiplatform.googleapis.com:443\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (PipelineServiceClient pipelineServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 PipelineServiceClient.create(pipelineServiceSettings)) {\u00a0 \u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 \u00a0 LocationName locationName = LocationName.of(project, location);\u00a0 \u00a0 \u00a0 String trainingTaskDefinition =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"gs://google-cloud-aiplatform/schema/trainingjob/definition/automl_tables_1.0.0.yaml\";\u00a0 \u00a0 \u00a0 // Set the columns used for training and their data types\u00a0 \u00a0 \u00a0 Transformation transformation1 =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(AutoTransformation.newBuilder().setColumnName(\"sepal_width\").build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 Transformation transformation2 =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(AutoTransformation.newBuilder().setColumnName(\"sepal_length\").build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 Transformation transformation3 =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(AutoTransformation.newBuilder().setColumnName(\"petal_length\").build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 Transformation transformation4 =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(AutoTransformation.newBuilder().setColumnName(\"petal_width\").build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 ArrayList<Transformation> transformationArrayList = new ArrayList<>();\u00a0 \u00a0 \u00a0 transformationArrayList.add(transformation1);\u00a0 \u00a0 \u00a0 transformationArrayList.add(transformation2);\u00a0 \u00a0 \u00a0 transformationArrayList.add(transformation3);\u00a0 \u00a0 \u00a0 transformationArrayList.add(transformation4);\u00a0 \u00a0 \u00a0 AutoMlTablesInputs autoMlTablesInputs =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AutoMlTablesInputs.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTargetColumn(targetColumn)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setPredictionType(\"classification\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addAllTransformations(transformationArrayList)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTrainBudgetMilliNodeHours(8000)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 FractionSplit fractionSplit =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FractionSplit.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTrainingFraction(0.8)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setValidationFraction(0.1)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTestFraction(0.1)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 InputDataConfig inputDataConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputDataConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDatasetId(datasetId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFractionSplit(fractionSplit)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 Model modelToUpload = Model.newBuilder().setDisplayName(modelDisplayName).build();\u00a0 \u00a0 \u00a0 TrainingPipeline trainingPipeline =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TrainingPipeline.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDisplayName(modelDisplayName)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTrainingTaskDefinition(trainingTaskDefinition)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTrainingTaskInputs(ValueConverter.toValue(autoMlTablesInputs))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInputDataConfig(inputDataConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setModelToUpload(modelToUpload)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 TrainingPipeline trainingPipelineResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pipelineServiceClient.createTrainingPipeline(locationName, trainingPipeline);\u00a0 \u00a0 \u00a0 System.out.println(\"Create Training Pipeline Tabular Classification Response\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\tName: %s\\n\", trainingPipelineResponse.getName());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tDisplay Name: %s\\n\", trainingPipelineResponse.getDisplayName());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\tTraining Task Definition: %s\\n\", trainingPipelineResponse.getTrainingTaskDefinition());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\tTraining Task Inputs: %s\\n\", trainingPipelineResponse.getTrainingTaskInputs());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\tTraining Task Metadata: %s\\n\", trainingPipelineResponse.getTrainingTaskMetadata());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tState: %s\\n\", trainingPipelineResponse.getState());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tCreate Time: %s\\n\", trainingPipelineResponse.getCreateTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tStart Time: %s\\n\", trainingPipelineResponse.getStartTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tEnd Time: %s\\n\", trainingPipelineResponse.getEndTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tUpdate Time: %s\\n\", trainingPipelineResponse.getUpdateTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tLabels: %s\\n\", trainingPipelineResponse.getLabelsMap());\u00a0 \u00a0 \u00a0 InputDataConfig inputDataConfigResponse = trainingPipelineResponse.getInputDataConfig();\u00a0 \u00a0 \u00a0 System.out.println(\"\\tInput Data Config\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tDataset Id: %s\\n\", inputDataConfigResponse.getDatasetId());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tAnnotations Filter: %s\\n\", inputDataConfigResponse.getAnnotationsFilter());\u00a0 \u00a0 \u00a0 FractionSplit fractionSplitResponse = inputDataConfigResponse.getFractionSplit();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tFraction Split\");\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\t\\tTraining Fraction: %s\\n\", fractionSplitResponse.getTrainingFraction());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\t\\tValidation Fraction: %s\\n\", fractionSplitResponse.getValidationFraction());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTest Fraction: %s\\n\", fractionSplitResponse.getTestFraction());\u00a0 \u00a0 \u00a0 FilterSplit filterSplit = inputDataConfigResponse.getFilterSplit();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tFilter Split\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTraining Fraction: %s\\n\", filterSplit.getTrainingFilter());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tValidation Fraction: %s\\n\", filterSplit.getValidationFilter());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTest Fraction: %s\\n\", filterSplit.getTestFilter());\u00a0 \u00a0 \u00a0 PredefinedSplit predefinedSplit = inputDataConfigResponse.getPredefinedSplit();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tPredefined Split\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tKey: %s\\n\", predefinedSplit.getKey());\u00a0 \u00a0 \u00a0 TimestampSplit timestampSplit = inputDataConfigResponse.getTimestampSplit();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tTimestamp Split\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTraining Fraction: %s\\n\", timestampSplit.getTrainingFraction());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tValidation Fraction: %s\\n\", timestampSplit.getValidationFraction());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTest Fraction: %s\\n\", timestampSplit.getTestFraction());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tKey: %s\\n\", timestampSplit.getKey());\u00a0 \u00a0 \u00a0 Model modelResponse = trainingPipelineResponse.getModelToUpload();\u00a0 \u00a0 \u00a0 System.out.println(\"\\tModel To Upload\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tName: %s\\n\", modelResponse.getName());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tDisplay Name: %s\\n\", modelResponse.getDisplayName());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tDescription: %s\\n\", modelResponse.getDescription());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tMetadata Schema Uri: %s\\n\", modelResponse.getMetadataSchemaUri());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tMeta Data: %s\\n\", modelResponse.getMetadata());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tTraining Pipeline: %s\\n\", modelResponse.getTrainingPipeline());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tArtifact Uri: %s\\n\", modelResponse.getArtifactUri());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tSupported Deployment Resources Types: %s\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 modelResponse.getSupportedDeploymentResourcesTypesList().toString());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tSupported Input Storage Formats: %s\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 modelResponse.getSupportedInputStorageFormatsList().toString());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tSupported Output Storage Formats: %s\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 modelResponse.getSupportedOutputStorageFormatsList().toString());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tCreate Time: %s\\n\", modelResponse.getCreateTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tUpdate Time: %s\\n\", modelResponse.getUpdateTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tLables: %s\\n\", modelResponse.getLabelsMap());\u00a0 \u00a0 \u00a0 PredictSchemata predictSchemata = modelResponse.getPredictSchemata();\u00a0 \u00a0 \u00a0 System.out.println(\"\\tPredict Schemata\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tInstance Schema Uri: %s\\n\", predictSchemata.getInstanceSchemaUri());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tParameters Schema Uri: %s\\n\", predictSchemata.getParametersSchemaUri());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tPrediction Schema Uri: %s\\n\", predictSchemata.getPredictionSchemaUri());\u00a0 \u00a0 \u00a0 for (Model.ExportFormat supportedExportFormat :\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 modelResponse.getSupportedExportFormatsList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"\\tSupported Export Format\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tId: %s\\n\", supportedExportFormat.getId());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ModelContainerSpec containerSpec = modelResponse.getContainerSpec();\u00a0 \u00a0 \u00a0 System.out.println(\"\\tContainer Spec\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tImage Uri: %s\\n\", containerSpec.getImageUri());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tCommand: %s\\n\", containerSpec.getCommandList());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tArgs: %s\\n\", containerSpec.getArgsList());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tPredict Route: %s\\n\", containerSpec.getPredictRoute());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tHealth Route: %s\\n\", containerSpec.getHealthRoute());\u00a0 \u00a0 \u00a0 for (EnvVar envVar : containerSpec.getEnvList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tEnv\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tName: %s\\n\", envVar.getName());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tValue: %s\\n\", envVar.getValue());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 for (Port port : containerSpec.getPortsList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tPort\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tContainer Port: %s\\n\", port.getContainerPort());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 for (DeployedModelRef deployedModelRef : modelResponse.getDeployedModelsList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"\\tDeployed Model\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tEndpoint: %s\\n\", deployedModelRef.getEndpoint());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tDeployed Model Id: %s\\n\", deployedModelRef.getDeployedModelId());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 Status status = trainingPipelineResponse.getError();\u00a0 \u00a0 \u00a0 System.out.println(\"\\tError\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tCode: %s\\n\", status.getCode());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tMessage: %s\\n\", status.getMessage());\u00a0 \u00a0 }\u00a0 }}\n```\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300aVertex AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Node.js \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Vertex AI Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Vertex AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/create-training-pipeline-tabular-classification.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const datasetId = 'YOUR_DATASET_ID';// const modelDisplayName = 'YOUR_MODEL_DISPLAY_NAME';// const trainingPipelineDisplayName = 'YOUR_TRAINING_PIPELINE_DISPLAY_NAME';// const targetColumn = 'YOUR_TARGET_COLUMN';// const project = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION';const aiplatform = require('@google-cloud/aiplatform');const {definition} =\u00a0 aiplatform.protos.google.cloud.aiplatform.v1.schema.trainingjob;// Imports the Google Cloud Pipeline Service Client libraryconst {PipelineServiceClient} = aiplatform.v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: 'us-central1-aiplatform.googleapis.com',};// Instantiates a clientconst pipelineServiceClient = new PipelineServiceClient(clientOptions);async function createTrainingPipelineTablesClassification() {\u00a0 // Configure the parent resource\u00a0 const parent = `projects/${project}/locations/${location}`;\u00a0 const transformations = [\u00a0 \u00a0 {auto: {column_name: 'sepal_width'}},\u00a0 \u00a0 {auto: {column_name: 'sepal_length'}},\u00a0 \u00a0 {auto: {column_name: 'petal_length'}},\u00a0 \u00a0 {auto: {column_name: 'petal_width'}},\u00a0 ];\u00a0 const trainingTaskInputsObj = new definition.AutoMlTablesInputs({\u00a0 \u00a0 targetColumn: targetColumn,\u00a0 \u00a0 predictionType: 'classification',\u00a0 \u00a0 transformations: transformations,\u00a0 \u00a0 trainBudgetMilliNodeHours: 8000,\u00a0 \u00a0 disableEarlyStopping: false,\u00a0 \u00a0 optimizationObjective: 'minimize-log-loss',\u00a0 });\u00a0 const trainingTaskInputs = trainingTaskInputsObj.toValue();\u00a0 const modelToUpload = {displayName: modelDisplayName};\u00a0 const inputDataConfig = {\u00a0 \u00a0 datasetId: datasetId,\u00a0 \u00a0 fractionSplit: {\u00a0 \u00a0 \u00a0 trainingFraction: 0.8,\u00a0 \u00a0 \u00a0 validationFraction: 0.1,\u00a0 \u00a0 \u00a0 testFraction: 0.1,\u00a0 \u00a0 },\u00a0 };\u00a0 const trainingPipeline = {\u00a0 \u00a0 displayName: trainingPipelineDisplayName,\u00a0 \u00a0 trainingTaskDefinition:\u00a0 \u00a0 \u00a0 'gs://google-cloud-aiplatform/schema/trainingjob/definition/automl_tables_1.0.0.yaml',\u00a0 \u00a0 trainingTaskInputs,\u00a0 \u00a0 inputDataConfig,\u00a0 \u00a0 modelToUpload,\u00a0 };\u00a0 const request = {\u00a0 \u00a0 parent,\u00a0 \u00a0 trainingPipeline,\u00a0 };\u00a0 // Create training pipeline request\u00a0 const [response] =\u00a0 \u00a0 await pipelineServiceClient.createTrainingPipeline(request);\u00a0 console.log('Create training pipeline tabular classification response');\u00a0 console.log(`Name : ${response.name}`);\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}createTrainingPipelineTablesClassification();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u6216\u66f4\u65b0 Python\uff0c\u8acb\u53c3\u95b1 [\u5b89\u88dd Python \u7248 Vertex AI SDK](https://cloud.google.com/vertex-ai/docs/start/use-vertex-ai-python-sdk?hl=zh-cn) \u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [   Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/create_training_pipeline_tabular_classification_sample.py) \n```\ndef create_training_pipeline_tabular_classification_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 display_name: str,\u00a0 \u00a0 dataset_id: str,\u00a0 \u00a0 location: str = \"us-central1\",\u00a0 \u00a0 model_display_name: str = None,\u00a0 \u00a0 target_column: str = \"target_column\",\u00a0 \u00a0 training_fraction_split: float = 0.8,\u00a0 \u00a0 validation_fraction_split: float = 0.1,\u00a0 \u00a0 test_fraction_split: float = 0.1,\u00a0 \u00a0 budget_milli_node_hours: int = 8000,\u00a0 \u00a0 disable_early_stopping: bool = False,\u00a0 \u00a0 sync: bool = True,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 tabular_classification_job = aiplatform.AutoMLTabularTrainingJob(\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name, optimization_prediction_type=\"classification\"\u00a0 \u00a0 )\u00a0 \u00a0 my_tabular_dataset = aiplatform.TabularDataset(dataset_name=dataset_id)\u00a0 \u00a0 model = tabular_classification_job.run(\u00a0 \u00a0 \u00a0 \u00a0 dataset=my_tabular_dataset,\u00a0 \u00a0 \u00a0 \u00a0 target_column=target_column,\u00a0 \u00a0 \u00a0 \u00a0 training_fraction_split=training_fraction_split,\u00a0 \u00a0 \u00a0 \u00a0 validation_fraction_split=validation_fraction_split,\u00a0 \u00a0 \u00a0 \u00a0 test_fraction_split=test_fraction_split,\u00a0 \u00a0 \u00a0 \u00a0 budget_milli_node_hours=budget_milli_node_hours,\u00a0 \u00a0 \u00a0 \u00a0 model_display_name=model_display_name,\u00a0 \u00a0 \u00a0 \u00a0 disable_early_stopping=disable_early_stopping,\u00a0 \u00a0 \u00a0 \u00a0 sync=sync,\u00a0 \u00a0 )\u00a0 \u00a0 model.wait()\u00a0 \u00a0 print(model.display_name)\u00a0 \u00a0 print(model.resource_name)\u00a0 \u00a0 print(model.uri)\u00a0 \u00a0 return model\n```\n\u9078\u64c7\u8a9e\u8a00\u6216\u74b0\u5883\u6a19\u7c64\u9801\uff1a\u60a8\u53ef\u4ee5\u4f7f\u7528 [trainingPipelines.create](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.trainingPipelines/create?hl=zh-cn) \u547d\u4ee4\u8a13\u7df4\u6a21\u578b\u3002\n\u8a13\u7df4\u6a21\u578b\u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- \uff1a\u60a8\u7684\u5340\u57df\u3002\n- \uff1a\u60a8\u7684 [\u9805\u76ee ID](https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=zh-cn#identifiers) \u3002\n- \uff1a\u7232\u6b64\u64cd\u4f5c\u5275\u5efa\u7684\u8a13\u7df4\u6d41\u6c34\u7dda\u7684\u986f\u793a\u540d\u7a31\u3002\n- \uff1a\u60a8\u5e0c\u671b\u6b64\u6a21\u578b\u9810\u6e2c\u7684\u5217\uff08\u503c\uff09\u3002\n- \uff1a\uff08\u53ef\u9078\uff09\u6b0a\u91cd\u5217\u3002 [\u77ad\u89e3\u8a73\u60c5](https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/prepare-data?hl=zh-cn#weight) \u3002\n- \uff1a\u60a8\u5e0c\u671b\u6a21\u578b\u8a13\u7df4\u7684\u6700\u9577\u6642\u9593\uff0c\u4ee5\u6beb\u7bc0\u9ede\u6642\u7232\u55ae\u4f4d\uff081,000 \u6beb\u7bc0\u9ede\u6642\u7b49\u65bc\u4e00\u7bc0\u9ede\u6642\uff09\u3002\n- \uff1a\u50c5\u7576\u60a8\u4e0d\u5e0c\u671b\u9810\u6e2c\u985e\u578b\u7684\u9ed8\u8a8d\u512a\u5316\u76ee\u6a19\u6642\uff0c\u624d\u9700\u8981\u3002 [\u77ad\u89e3\u8a73\u60c5](https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/train-model?hl=zh-cn#optimization-objectives) \u3002\n- \uff1a\u5c07\u7232\u7528\u65bc\u8a13\u7df4\u6a21\u578b\u7684\u6bcf\u4e00\u5217\u63d0\u4f9b\u8f49\u63db\u985e\u578b\u3002 [\u77ad\u89e3\u8a73\u60c5](https://cloud.google.com/vertex-ai/docs/datasets/data-types-tabular?hl=zh-cn#transformations) \u3002\n- \uff1a\u5177\u6709\u6307\u5b9a\u8f49\u63db\u985e\u578b\u7684\u5217\u7684\u540d\u7a31\u3002\u5fc5\u9808\u6307\u5b9a\u7528\u65bc\u8a13\u7df4\u6a21\u578b\u7684\u6bcf\u4e00\u5217\u3002\n- \uff1a\u65b0\u8a13\u7df4\u6a21\u578b\u7684\u986f\u793a\u540d\u7a31\u3002\n- \uff1a\u8a13\u7df4\u6578\u64da\u96c6\u7684 ID\u3002\n- \u60a8\u53ef\u4ee5\u63d0\u4f9b`Split`\u5c0d\u8c61\u4f86\u63a7\u5236\u6578\u64da\u62c6\u5206\u3002\u5982\u9700\u77ad\u89e3\u5982\u4f55\u63a7\u5236\u6578\u64da\u62c6\u5206\uff0c\u8acb\u53c3\u95b1 [\u4f7f\u7528 REST \u63a7\u5236\u6578\u64da\u62c6\u5206](#data-split) \u3002\n- \uff1a\u81ea\u52d5\u751f\u6210\u7684 [\u9805\u76ee\u7de8\u865f](https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=zh-cn#identifiers) \nHTTP \u65b9\u6cd5\u548c\u7db2\u5740\uff1a\n```\nPOST https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT/locations/LOCATION/trainingPipelines\n```\n\u8acb\u6c42 JSON \u6b63\u6587\uff1a\n```\n{\n \"displayName\": \"TRAININGPIPELINE_DISPLAY_NAME\",\n \"trainingTaskDefinition\": \"gs://google-cloud-aiplatform/schema/trainingjob/definition/automl_tabular_1.0.0.yaml\",\n \"trainingTaskInputs\": {\n  \"targetColumn\": \"TARGET_COLUMN\",\n  \"weightColumn\": \"WEIGHT_COLUMN\",\n  \"predictionType\": \"regression\",\n  \"trainBudgetMilliNodeHours\": TRAINING_BUDGET,\n  \"optimizationObjective\": \"OPTIMIZATION_OBJECTIVE\",\n  \"transformations\": [   {\"TRANSFORMATION_TYPE_1\": {\"column_name\" : \"COLUMN_NAME_1\"} },\n   {\"TRANSFORMATION_TYPE_2\": {\"column_name\" : \"COLUMN_NAME_2\"} },\n   ...\n },\n \"modelToUpload\": {\"displayName\": \"MODEL_DISPLAY_NAME\"},\n \"inputDataConfig\": {\n  \"datasetId\": \"DATASET_ID\",\n }\n}\n```\n\u5982\u9700\u767c\u9001\u60a8\u7684\u8acb\u6c42\uff0c\u8acb\u5c55\u958b\u4ee5\u4e0b\u9078\u9805\u4e4b\u4e00\uff1a\u60a8\u61c9\u8a72\u6536\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\u7684 JSON \u97ff\u61c9\uff1a\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/us-central1/trainingPipelines/4567\",\n \"displayName\": \"myModelName\",\n \"trainingTaskDefinition\": \"gs://google-cloud-aiplatform/schema/trainingjob/definition/automl_tabular_1.0.0.yaml\",\n \"modelToUpload\": {\n \"displayName\": \"myModelName\"\n },\n \"state\": \"PIPELINE_STATE_PENDING\",\n \"createTime\": \"2020-08-18T01:22:57.479336Z\",\n \"updateTime\": \"2020-08-18T01:22:57.479336Z\"\n}\n```\n\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300aVertex AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Java \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Vertex AI Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Vertex AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/CreateTrainingPipelineTabularRegressionSample.java) \n```\nimport com.google.cloud.aiplatform.util.ValueConverter;import com.google.cloud.aiplatform.v1.DeployedModelRef;import com.google.cloud.aiplatform.v1.EnvVar;import com.google.cloud.aiplatform.v1.FilterSplit;import com.google.cloud.aiplatform.v1.FractionSplit;import com.google.cloud.aiplatform.v1.InputDataConfig;import com.google.cloud.aiplatform.v1.LocationName;import com.google.cloud.aiplatform.v1.Model;import com.google.cloud.aiplatform.v1.ModelContainerSpec;import com.google.cloud.aiplatform.v1.PipelineServiceClient;import com.google.cloud.aiplatform.v1.PipelineServiceSettings;import com.google.cloud.aiplatform.v1.Port;import com.google.cloud.aiplatform.v1.PredefinedSplit;import com.google.cloud.aiplatform.v1.PredictSchemata;import com.google.cloud.aiplatform.v1.TimestampSplit;import com.google.cloud.aiplatform.v1.TrainingPipeline;import com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlTablesInputs;import com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlTablesInputs.Transformation;import com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlTablesInputs.Transformation.AutoTransformation;import com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlTablesInputs.Transformation.TimestampTransformation;import com.google.rpc.Status;import java.io.IOException;import java.util.ArrayList;public class CreateTrainingPipelineTabularRegressionSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String modelDisplayName = \"YOUR_DATASET_DISPLAY_NAME\";\u00a0 \u00a0 String datasetId = \"YOUR_DATASET_ID\";\u00a0 \u00a0 String targetColumn = \"TARGET_COLUMN\";\u00a0 \u00a0 createTrainingPipelineTableRegression(project, modelDisplayName, datasetId, targetColumn);\u00a0 }\u00a0 static void createTrainingPipelineTableRegression(\u00a0 \u00a0 \u00a0 String project, String modelDisplayName, String datasetId, String targetColumn)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 PipelineServiceSettings pipelineServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 PipelineServiceSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEndpoint(\"us-central1-aiplatform.googleapis.com:443\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (PipelineServiceClient pipelineServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 PipelineServiceClient.create(pipelineServiceSettings)) {\u00a0 \u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 \u00a0 LocationName locationName = LocationName.of(project, location);\u00a0 \u00a0 \u00a0 String trainingTaskDefinition =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"gs://google-cloud-aiplatform/schema/trainingjob/definition/automl_tables_1.0.0.yaml\";\u00a0 \u00a0 \u00a0 // Set the columns used for training and their data types\u00a0 \u00a0 \u00a0 ArrayList<Transformation> tranformations = new ArrayList<>();\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(AutoTransformation.newBuilder().setColumnName(\"STRING_5000unique_NULLABLE\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(AutoTransformation.newBuilder().setColumnName(\"INTEGER_5000unique_NULLABLE\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(AutoTransformation.newBuilder().setColumnName(\"FLOAT_5000unique_NULLABLE\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(AutoTransformation.newBuilder().setColumnName(\"FLOAT_5000unique_REPEATED\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(AutoTransformation.newBuilder().setColumnName(\"NUMERIC_5000unique_NULLABLE\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(AutoTransformation.newBuilder().setColumnName(\"BOOLEAN_2unique_NULLABLE\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTimestamp(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TimestampTransformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setColumnName(\"TIMESTAMP_1unique_NULLABLE\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInvalidValuesAllowed(true))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(AutoTransformation.newBuilder().setColumnName(\"DATE_1unique_NULLABLE\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(AutoTransformation.newBuilder().setColumnName(\"TIME_1unique_NULLABLE\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTimestamp(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TimestampTransformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setColumnName(\"DATETIME_1unique_NULLABLE\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInvalidValuesAllowed(true))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AutoTransformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setColumnName(\"STRUCT_NULLABLE.STRING_5000unique_NULLABLE\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AutoTransformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setColumnName(\"STRUCT_NULLABLE.INTEGER_5000unique_NULLABLE\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AutoTransformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setColumnName(\"STRUCT_NULLABLE.FLOAT_5000unique_NULLABLE\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AutoTransformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setColumnName(\"STRUCT_NULLABLE.FLOAT_5000unique_REQUIRED\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AutoTransformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setColumnName(\"STRUCT_NULLABLE.FLOAT_5000unique_REPEATED\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AutoTransformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setColumnName(\"STRUCT_NULLABLE.NUMERIC_5000unique_NULLABLE\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 tranformations.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Transformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAuto(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AutoTransformation.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setColumnName(\"STRUCT_NULLABLE.TIMESTAMP_1unique_NULLABLE\"))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 AutoMlTablesInputs trainingTaskInputs =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AutoMlTablesInputs.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addAllTransformations(tranformations)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTargetColumn(targetColumn)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setPredictionType(\"regression\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTrainBudgetMilliNodeHours(8000)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDisableEarlyStopping(false)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // supported regression optimisation objectives: minimize-rmse,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // minimize-mae, minimize-rmsle\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setOptimizationObjective(\"minimize-rmse\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 FractionSplit fractionSplit =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FractionSplit.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTrainingFraction(0.8)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setValidationFraction(0.1)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTestFraction(0.1)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 InputDataConfig inputDataConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputDataConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDatasetId(datasetId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFractionSplit(fractionSplit)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 Model modelToUpload = Model.newBuilder().setDisplayName(modelDisplayName).build();\u00a0 \u00a0 \u00a0 TrainingPipeline trainingPipeline =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TrainingPipeline.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDisplayName(modelDisplayName)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTrainingTaskDefinition(trainingTaskDefinition)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTrainingTaskInputs(ValueConverter.toValue(trainingTaskInputs))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInputDataConfig(inputDataConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setModelToUpload(modelToUpload)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 TrainingPipeline trainingPipelineResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pipelineServiceClient.createTrainingPipeline(locationName, trainingPipeline);\u00a0 \u00a0 \u00a0 System.out.println(\"Create Training Pipeline Tabular Regression Response\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\tName: %s\\n\", trainingPipelineResponse.getName());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tDisplay Name: %s\\n\", trainingPipelineResponse.getDisplayName());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\tTraining Task Definition: %s\\n\", trainingPipelineResponse.getTrainingTaskDefinition());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\tTraining Task Inputs: %s\\n\", trainingPipelineResponse.getTrainingTaskInputs());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\tTraining Task Metadata: %s\\n\", trainingPipelineResponse.getTrainingTaskMetadata());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tState: %s\\n\", trainingPipelineResponse.getState());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tCreate Time: %s\\n\", trainingPipelineResponse.getCreateTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tStart Time: %s\\n\", trainingPipelineResponse.getStartTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tEnd Time: %s\\n\", trainingPipelineResponse.getEndTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tUpdate Time: %s\\n\", trainingPipelineResponse.getUpdateTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tLabels: %s\\n\", trainingPipelineResponse.getLabelsMap());\u00a0 \u00a0 \u00a0 InputDataConfig inputDataConfigResponse = trainingPipelineResponse.getInputDataConfig();\u00a0 \u00a0 \u00a0 System.out.println(\"\\tInput Data Config\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tDataset Id: %s\\n\", inputDataConfigResponse.getDatasetId());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tAnnotations Filter: %s\\n\", inputDataConfigResponse.getAnnotationsFilter());\u00a0 \u00a0 \u00a0 FractionSplit fractionSplitResponse = inputDataConfigResponse.getFractionSplit();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tFraction Split\");\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\t\\tTraining Fraction: %s\\n\", fractionSplitResponse.getTrainingFraction());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\t\\tValidation Fraction: %s\\n\", fractionSplitResponse.getValidationFraction());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTest Fraction: %s\\n\", fractionSplitResponse.getTestFraction());\u00a0 \u00a0 \u00a0 FilterSplit filterSplit = inputDataConfigResponse.getFilterSplit();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tFilter Split\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTraining Fraction: %s\\n\", filterSplit.getTrainingFilter());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tValidation Fraction: %s\\n\", filterSplit.getValidationFilter());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTest Fraction: %s\\n\", filterSplit.getTestFilter());\u00a0 \u00a0 \u00a0 PredefinedSplit predefinedSplit = inputDataConfigResponse.getPredefinedSplit();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tPredefined Split\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tKey: %s\\n\", predefinedSplit.getKey());\u00a0 \u00a0 \u00a0 TimestampSplit timestampSplit = inputDataConfigResponse.getTimestampSplit();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tTimestamp Split\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTraining Fraction: %s\\n\", timestampSplit.getTrainingFraction());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tValidation Fraction: %s\\n\", timestampSplit.getValidationFraction());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTest Fraction: %s\\n\", timestampSplit.getTestFraction());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tKey: %s\\n\", timestampSplit.getKey());\u00a0 \u00a0 \u00a0 Model modelResponse = trainingPipelineResponse.getModelToUpload();\u00a0 \u00a0 \u00a0 System.out.println(\"\\tModel To Upload\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tName: %s\\n\", modelResponse.getName());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tDisplay Name: %s\\n\", modelResponse.getDisplayName());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tDescription: %s\\n\", modelResponse.getDescription());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tMetadata Schema Uri: %s\\n\", modelResponse.getMetadataSchemaUri());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tMeta Data: %s\\n\", modelResponse.getMetadata());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tTraining Pipeline: %s\\n\", modelResponse.getTrainingPipeline());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tArtifact Uri: %s\\n\", modelResponse.getArtifactUri());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tSupported Deployment Resources Types: %s\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 modelResponse.getSupportedDeploymentResourcesTypesList().toString());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tSupported Input Storage Formats: %s\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 modelResponse.getSupportedInputStorageFormatsList().toString());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tSupported Output Storage Formats: %s\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 modelResponse.getSupportedOutputStorageFormatsList().toString());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tCreate Time: %s\\n\", modelResponse.getCreateTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tUpdate Time: %s\\n\", modelResponse.getUpdateTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tLables: %s\\n\", modelResponse.getLabelsMap());\u00a0 \u00a0 \u00a0 PredictSchemata predictSchemata = modelResponse.getPredictSchemata();\u00a0 \u00a0 \u00a0 System.out.println(\"\\tPredict Schemata\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tInstance Schema Uri: %s\\n\", predictSchemata.getInstanceSchemaUri());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tParameters Schema Uri: %s\\n\", predictSchemata.getParametersSchemaUri());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tPrediction Schema Uri: %s\\n\", predictSchemata.getPredictionSchemaUri());\u00a0 \u00a0 \u00a0 for (Model.ExportFormat supportedExportFormat :\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 modelResponse.getSupportedExportFormatsList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"\\tSupported Export Format\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tId: %s\\n\", supportedExportFormat.getId());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ModelContainerSpec containerSpec = modelResponse.getContainerSpec();\u00a0 \u00a0 \u00a0 System.out.println(\"\\tContainer Spec\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tImage Uri: %s\\n\", containerSpec.getImageUri());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tCommand: %s\\n\", containerSpec.getCommandList());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tArgs: %s\\n\", containerSpec.getArgsList());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tPredict Route: %s\\n\", containerSpec.getPredictRoute());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tHealth Route: %s\\n\", containerSpec.getHealthRoute());\u00a0 \u00a0 \u00a0 for (EnvVar envVar : containerSpec.getEnvList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tEnv\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tName: %s\\n\", envVar.getName());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tValue: %s\\n\", envVar.getValue());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 for (Port port : containerSpec.getPortsList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tPort\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tContainer Port: %s\\n\", port.getContainerPort());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 for (DeployedModelRef deployedModelRef : modelResponse.getDeployedModelsList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"\\tDeployed Model\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tEndpoint: %s\\n\", deployedModelRef.getEndpoint());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tDeployed Model Id: %s\\n\", deployedModelRef.getDeployedModelId());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 Status status = trainingPipelineResponse.getError();\u00a0 \u00a0 \u00a0 System.out.println(\"\\tError\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tCode: %s\\n\", status.getCode());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tMessage: %s\\n\", status.getMessage());\u00a0 \u00a0 }\u00a0 }}\n```\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300aVertex AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Node.js \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Vertex AI Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Vertex AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/create-training-pipeline-tabular-regression.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const datasetId = 'YOUR_DATASET_ID';// const modelDisplayName = 'YOUR_MODEL_DISPLAY_NAME';// const trainingPipelineDisplayName = 'YOUR_TRAINING_PIPELINE_DISPLAY_NAME';// const targetColumn = 'YOUR_TARGET_COLUMN';// const project = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION';const aiplatform = require('@google-cloud/aiplatform');const {definition} =\u00a0 aiplatform.protos.google.cloud.aiplatform.v1.schema.trainingjob;// Imports the Google Cloud Pipeline Service Client libraryconst {PipelineServiceClient} = aiplatform.v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: 'us-central1-aiplatform.googleapis.com',};// Instantiates a clientconst pipelineServiceClient = new PipelineServiceClient(clientOptions);async function createTrainingPipelineTablesRegression() {\u00a0 // Configure the parent resource\u00a0 const parent = `projects/${project}/locations/${location}`;\u00a0 const transformations = [\u00a0 \u00a0 {auto: {column_name: 'STRING_5000unique_NULLABLE'}},\u00a0 \u00a0 {auto: {column_name: 'INTEGER_5000unique_NULLABLE'}},\u00a0 \u00a0 {auto: {column_name: 'FLOAT_5000unique_NULLABLE'}},\u00a0 \u00a0 {auto: {column_name: 'FLOAT_5000unique_REPEATED'}},\u00a0 \u00a0 {auto: {column_name: 'NUMERIC_5000unique_NULLABLE'}},\u00a0 \u00a0 {auto: {column_name: 'BOOLEAN_2unique_NULLABLE'}},\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 timestamp: {\u00a0 \u00a0 \u00a0 \u00a0 column_name: 'TIMESTAMP_1unique_NULLABLE',\u00a0 \u00a0 \u00a0 \u00a0 invalid_values_allowed: true,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 \u00a0 {auto: {column_name: 'DATE_1unique_NULLABLE'}},\u00a0 \u00a0 {auto: {column_name: 'TIME_1unique_NULLABLE'}},\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 timestamp: {\u00a0 \u00a0 \u00a0 \u00a0 column_name: 'DATETIME_1unique_NULLABLE',\u00a0 \u00a0 \u00a0 \u00a0 invalid_values_allowed: true,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 \u00a0 {auto: {column_name: 'STRUCT_NULLABLE.STRING_5000unique_NULLABLE'}},\u00a0 \u00a0 {auto: {column_name: 'STRUCT_NULLABLE.INTEGER_5000unique_NULLABLE'}},\u00a0 \u00a0 {auto: {column_name: 'STRUCT_NULLABLE.FLOAT_5000unique_NULLABLE'}},\u00a0 \u00a0 {auto: {column_name: 'STRUCT_NULLABLE.FLOAT_5000unique_REQUIRED'}},\u00a0 \u00a0 {auto: {column_name: 'STRUCT_NULLABLE.FLOAT_5000unique_REPEATED'}},\u00a0 \u00a0 {auto: {column_name: 'STRUCT_NULLABLE.NUMERIC_5000unique_NULLABLE'}},\u00a0 \u00a0 {auto: {column_name: 'STRUCT_NULLABLE.BOOLEAN_2unique_NULLABLE'}},\u00a0 \u00a0 {auto: {column_name: 'STRUCT_NULLABLE.TIMESTAMP_1unique_NULLABLE'}},\u00a0 ];\u00a0 const trainingTaskInputsObj = new definition.AutoMlTablesInputs({\u00a0 \u00a0 transformations,\u00a0 \u00a0 targetColumn,\u00a0 \u00a0 predictionType: 'regression',\u00a0 \u00a0 trainBudgetMilliNodeHours: 8000,\u00a0 \u00a0 disableEarlyStopping: false,\u00a0 \u00a0 optimizationObjective: 'minimize-rmse',\u00a0 });\u00a0 const trainingTaskInputs = trainingTaskInputsObj.toValue();\u00a0 const modelToUpload = {displayName: modelDisplayName};\u00a0 const inputDataConfig = {\u00a0 \u00a0 datasetId: datasetId,\u00a0 \u00a0 fractionSplit: {\u00a0 \u00a0 \u00a0 trainingFraction: 0.8,\u00a0 \u00a0 \u00a0 validationFraction: 0.1,\u00a0 \u00a0 \u00a0 testFraction: 0.1,\u00a0 \u00a0 },\u00a0 };\u00a0 const trainingPipeline = {\u00a0 \u00a0 displayName: trainingPipelineDisplayName,\u00a0 \u00a0 trainingTaskDefinition:\u00a0 \u00a0 \u00a0 'gs://google-cloud-aiplatform/schema/trainingjob/definition/automl_tables_1.0.0.yaml',\u00a0 \u00a0 trainingTaskInputs,\u00a0 \u00a0 inputDataConfig,\u00a0 \u00a0 modelToUpload,\u00a0 };\u00a0 const request = {\u00a0 \u00a0 parent,\u00a0 \u00a0 trainingPipeline,\u00a0 };\u00a0 // Create training pipeline request\u00a0 const [response] =\u00a0 \u00a0 await pipelineServiceClient.createTrainingPipeline(request);\u00a0 console.log('Create training pipeline tabular regression response');\u00a0 console.log(`Name : ${response.name}`);\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}createTrainingPipelineTablesRegression();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u6216\u66f4\u65b0 Python\uff0c\u8acb\u53c3\u95b1 [\u5b89\u88dd Python \u7248 Vertex AI SDK](https://cloud.google.com/vertex-ai/docs/start/use-vertex-ai-python-sdk?hl=zh-cn) \u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [   Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/create_training_pipeline_tabular_regression_sample.py) \n```\ndef create_training_pipeline_tabular_regression_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 display_name: str,\u00a0 \u00a0 dataset_id: str,\u00a0 \u00a0 location: str = \"us-central1\",\u00a0 \u00a0 model_display_name: str = \"my_model\",\u00a0 \u00a0 target_column: str = \"target_column\",\u00a0 \u00a0 training_fraction_split: float = 0.8,\u00a0 \u00a0 validation_fraction_split: float = 0.1,\u00a0 \u00a0 test_fraction_split: float = 0.1,\u00a0 \u00a0 budget_milli_node_hours: int = 8000,\u00a0 \u00a0 disable_early_stopping: bool = False,\u00a0 \u00a0 sync: bool = True,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 tabular_regression_job = aiplatform.AutoMLTabularTrainingJob(\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name, optimization_prediction_type=\"regression\"\u00a0 \u00a0 )\u00a0 \u00a0 my_tabular_dataset = aiplatform.TabularDataset(dataset_name=dataset_id)\u00a0 \u00a0 model = tabular_regression_job.run(\u00a0 \u00a0 \u00a0 \u00a0 dataset=my_tabular_dataset,\u00a0 \u00a0 \u00a0 \u00a0 target_column=target_column,\u00a0 \u00a0 \u00a0 \u00a0 training_fraction_split=training_fraction_split,\u00a0 \u00a0 \u00a0 \u00a0 validation_fraction_split=validation_fraction_split,\u00a0 \u00a0 \u00a0 \u00a0 test_fraction_split=test_fraction_split,\u00a0 \u00a0 \u00a0 \u00a0 budget_milli_node_hours=budget_milli_node_hours,\u00a0 \u00a0 \u00a0 \u00a0 model_display_name=model_display_name,\u00a0 \u00a0 \u00a0 \u00a0 disable_early_stopping=disable_early_stopping,\u00a0 \u00a0 \u00a0 \u00a0 sync=sync,\u00a0 \u00a0 )\u00a0 \u00a0 model.wait()\u00a0 \u00a0 print(model.display_name)\u00a0 \u00a0 print(model.resource_name)\u00a0 \u00a0 print(model.uri)\u00a0 \u00a0 return model\n```## \u4f7f\u7528 REST \u63a7\u5236\u6578\u64da\u62c6\u5206\u60a8\u53ef\u4ee5\u63a7\u5236\u5728\u8a13\u7df4\u96c6\u3001\u9a57\u8b49\u96c6\u548c\u6e2c\u8a66\u96c6\u4e4b\u9593\u62c6\u5206\u8a13\u7df4\u6578\u64da\u7684\u65b9\u5f0f\u3002\u4f7f\u7528 Vertex AI API \u6642\uff0c\u8acb\u4f7f\u7528 [Split \u5c0d\u8c61](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.trainingPipelines?hl=zh-cn#InputDataConfig) \u4f86\u78ba\u5b9a\u6578\u64da\u62c6\u5206\u3002 `Split` \u5c0d\u8c61\u53ef\u4ee5\u5305\u542b\u5728 `inputDataConfig` \u5c0d\u8c61\u4e2d\u4f5c\u7232\u591a\u7a2e\u5c0d\u8c61\u985e\u578b\u4e2d\u7684\u4e00\u7a2e\uff0c\u5176\u4e2d\u6bcf\u7a2e\u985e\u578b\u90fd\u63d0\u4f9b\u4e00\u7a2e\u4e0d\u540c\u7684\u8a13\u7df4\u6578\u64da\u62c6\u5206\u65b9\u5f0f\u3002\n\u53ef\u7528\u65bc\u62c6\u5206\u6578\u64da\u7684\u65b9\u6cd5\u53d6\u6c7a\u65bc\u6578\u64da\u985e\u578b\uff1a- `FractionSplit` \uff1a- \uff1a\u8981\u7528\u65bc\u8a13\u7df4\u96c6\u7684\u8a13\u7df4\u6578\u64da\u7684\u6bd4\u4f8b\u3002\n- \uff1a\u8981\u7528\u65bc\u9a57\u8b49\u96c6\u7684\u8a13\u7df4\u6578\u64da\u7684\u6bd4\u4f8b\u3002\n- \uff1a\u8981\u7528\u65bc\u6e2c\u8a66\u96c6\u7684\u8a13\u7df4\u6578\u64da\u7684\u6bd4\u4f8b\u3002\n\u5982\u679c\u6307\u5b9a\u4e86\u4efb\u4e00\u6bd4\u4f8b\uff0c\u5247\u5fc5\u9808\u6307\u5b9a\u6240\u6709\u6bd4\u4f8b\u3002\u9019\u4e9b\u6bd4\u4f8b\u4e4b\u548c\u5fc5\u9808\u7b49\u65bc 1.0\u3002 [\u77ad\u89e3\u8a73\u60c5](https://cloud.google.com/vertex-ai/docs/tabular-data/data-splits?hl=zh-cn) \u3002```\n\"fractionSplit\": {\n\"trainingFraction\": TRAINING_FRACTION,\n\"validationFraction\": VALIDATION_FRACTION,\n\"testFraction\": TEST_FRACTION\n},\n```\n- `PredefinedSplit` \uff1a- \uff1a\u5305\u542b\u6578\u64da\u62c6\u5206\u503c\uff08`TRAIN`\u3001`VALIDATION`\u3001`TEST`\uff09\u7684\u5217\u3002\n\u4f7f\u7528\u62c6\u5206\u5217\u7232\u6bcf\u884c\u624b\u52d5\u6307\u5b9a\u6578\u64da\u62c6\u5206\u3002 [\u77ad\u89e3\u8a73\u60c5](https://cloud.google.com/vertex-ai/docs/tabular-data/data-splits?hl=zh-cn) \u3002```\n\"predefinedSplit\": {\n \"key\": DATA_SPLIT_COLUMN\n},\n```\n- `TimestampSplit` \uff1a- \uff1a\u8981\u7528\u65bc\u8a13\u7df4\u96c6\u7684\u8a13\u7df4\u6578\u64da\u7684\u767e\u5206\u6bd4\u3002\u9ed8\u8a8d\u503c\u7232 0.80\u3002\n- \uff1a\u8981\u7528\u65bc\u9a57\u8b49\u96c6\u7684\u8a13\u7df4\u6578\u64da\u7684\u767e\u5206\u6bd4\u3002\u9ed8\u8a8d\u503c\u7232 0.10\u3002\n- \uff1a\u8981\u7528\u65bc\u6e2c\u8a66\u96c6\u7684\u8a13\u7df4\u6578\u64da\u7684\u767e\u5206\u6bd4\u3002\u9ed8\u8a8d\u503c\u7232 0.10\u3002\n- \uff1a\u5305\u542b\u6642\u9593\u6233\u7684\u5217\u3002\n\u5982\u679c\u6307\u5b9a\u4e86\u4efb\u4e00\u6bd4\u4f8b\uff0c\u5247\u5fc5\u9808\u6307\u5b9a\u6240\u6709\u6bd4\u4f8b\u3002\u9019\u4e9b\u6bd4\u4f8b\u4e4b\u548c\u5fc5\u9808\u7b49\u65bc 1.0\u3002 [\u77ad\u89e3\u8a73\u60c5](https://cloud.google.com/vertex-ai/docs/tabular-data/data-splits?hl=zh-cn) \u3002```\n\"timestampSplit\": {\n \"trainingFraction\": TRAINING_FRACTION,\n \"validationFraction\": VALIDATION_FRACTION,\n \"testFraction\": TEST_FRACTION,\n \"key\": TIME_COLUMN\n}\n```## \u5206\u985e\u6216\u8ff4\u6b78\u6a21\u578b\u7684\u512a\u5316\u76ee\u6a19\n\u5728\u8a13\u7df4\u6a21\u578b\u6642\uff0cVertex AI \u6703\u6839\u64da\u6a21\u578b\u985e\u578b\u548c\u7528\u65bc\u76ee\u6a19\u5217\u7684\u6578\u64da\u985e\u578b\u9078\u64c7\u9ed8\u8a8d\u512a\u5316\u76ee\u6a19\u3002\n| \u512a\u5316\u76ee\u6a19    | API \u503c      | \u5728\u4ec0\u9ebc\u60c5\u6cc1\u4e0b\u4f7f\u7528\u8a72\u76ee\u6a19              |\n|:---------------------|:-----------------------------|:----------------------------------------------------------------------------|\n| AUC ROC    | maximize-au-roc    | \u6700\u5927\u5316\u63a5\u6536\u8005\u64cd\u4f5c\u7279\u5fb5 (ROC) \u66f2\u7dda\u4e0b\u7684\u9762\u7a4d\u3002\u5340\u5206\u4e0d\u540c\u7684\u985e\u5225\u3002\u4e8c\u5143\u5206\u985e\u7684\u9ed8\u8a8d\u503c\u3002 |\n| \u5c0d\u6578\u640d\u5931    | minimize-log-loss   | \u4f7f\u9810\u6e2c\u6982\u7387\u5118\u53ef\u80fd\u6e96\u78ba\u3002\u50c5\u9650\u65bc\u652f\u6301\u7684\u591a\u985e\u5225\u5206\u985e\u76ee\u6a19\u3002       |\n| AUC PR    | maximize-au-prc    | \u6700\u5927\u5316\u7cbe\u78ba\u7387/\u53ec\u56de\u7387\u66f2\u7dda\u4e0b\u7684\u9762\u7a4d\u3002\u512a\u5316\u4e0d\u5e38\u898b\u985e\u5225\u7684\u9810\u6e2c\u7d50\u679c\u3002     |\n| \u7279\u5b9a\u53ec\u56de\u7387\u4e0b\u7684\u7cbe\u78ba\u7387 | maximize-precision-at-recall | \u512a\u5316\u7279\u5b9a\u53ec\u56de\u503c\u4e0b\u7684\u7cbe\u78ba\u7387\u3002             |\n| \u7279\u5b9a\u7cbe\u78ba\u7387\u4e0b\u7684\u53ec\u56de\u7387 | maximize-recall-at-precision | \u512a\u5316\u7279\u5b9a\u7cbe\u78ba\u7387\u4e0b\u7684\u53ec\u56de\u7387\u3002             |\n| \u512a\u5316\u76ee\u6a19 | API \u503c   | \u5728\u4ec0\u9ebc\u60c5\u6cc1\u4e0b\u4f7f\u7528\u8a72\u76ee\u6a19                      |\n|:-----------|:---------------|:-----------------------------------------------------------------------------------------------------------|\n| \u5747\u65b9\u6839\u8aa4\u5dee | minimize-rmse | \u6700\u5927\u9650\u5ea6\u964d\u4f4e\u5747\u65b9\u6839\u8aa4\u5dee (RMSE)\u3002\u6e96\u78ba\u6355\u6349\u66f4\u591a\u6975\u503c\u3002\u9ed8\u8a8d\u503c\u3002             |\n| MAE  | minimize-mae | \u6700\u5927\u9650\u5ea6\u964d\u4f4e\u5e73\u5747\u7d55\u5c0d\u8aa4\u5dee (MAE)\u3002\u5c07\u6975\u503c\u8996\u7232\u5c0d\u6a21\u578b\u5f71\u97ff\u8f03\u5c0f\u7684\u96e2\u7fa3\u503c\u3002           |\n| RMSLE  | minimize-rmsle | \u6700\u5927\u9650\u5ea6\u964d\u4f4e\u5747\u65b9\u6839\u5c0d\u6578\u8aa4\u5dee (RMSLE)\u3002\u6839\u64da\u76f8\u5c0d\u8aa4\u5dee\u800c\u4e0d\u662f\u7d55\u5c0d\u8aa4\u5dee\u4f86\u5224\u932f\u3002\u9069\u7528\u65bc\u9810\u6e2c\u503c\u548c\u5be6\u969b\u503c\u90fd\u975e\u5e38\u5927\u7684\u60c5\u6cc1\u3002 |\n## \u5f8c\u7e8c\u6b65\u9a5f\n- [\u8a55\u4f30\u6a21\u578b](https://cloud.google.com/vertex-ai/docs/tabular-data/classification-regression/evaluate-model?hl=zh-cn) \u3002\n- \u77ad\u89e3\u5982\u4f55 [\u5c0e\u51fa\u6a21\u578b](https://cloud.google.com/vertex-ai/docs/export/export-model-tabular?hl=zh-cn) \u3002", "guide": "Vertex AI"}