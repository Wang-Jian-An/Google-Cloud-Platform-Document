{"title": "Vertex AI - Tracking classes", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Tracking classes\nThe Vertex AI SDK for Python includes classes to help with visualization, measurements, and tracking. These classes can be grouped into three types:\n- Classes that use metadata to track resources in your machine learning (ML) workflow\n- Classes that are used for Vertex AI Experiments\n- Classes that are used for a Vertex AI TensorBoard\nThe following topics provide an overview of the classes related to tracking and monitoring an ML workflow in Vertex AI SDK for Python.\n", "content": "## Metadata classes\nYou can use the Vertex AI SDK for Python to create Vertex ML Metadata to help you track and analyze the metadata in your ML workflow. For more information, see [Introduction to Vertex ML Metadata](/vertex-ai/docs/ml-metadata/introduction) .\n### Artifact\nThe [Artifact](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Artifact) class represents the metadata in an artifact in Vertex AI. An artifact is a discrete entity or piece of data that's produced by an ML workflow. Examples of an artifact are a [dataset](/vertex-ai/docs/datasets/overview) , a [model](/vertex-ai/docs/training-overview) , and an [input file](/vertex-ai/docs/video-data/classification/prepare-data#input-files) . For more information, see [Track executions and artifacts](/vertex-ai/docs/experiments/track-executions-artifacts) .\nWhen you create an [Artifact](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Artifact) resource, you need to specify its schema. Each type of an artifact has a unique schema. For example, the `system.Dataset` schema represents a dataset and the `system.Metrics` schema represents evaluation metrics. For more information, see [How to use system schemas](/vertex-ai/docs/ml-metadata/system-schemas#how_to_use_system_schemas) .\nThe following sample code shows how to create an [Artifact](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Artifact) resource that represents a model:\n```\nmodel_artifact = aiplatform.Artifact.create(\u00a0 \u00a0 \u00a0 \u00a0 schema_title=\"system.Model\",\u00a0 \u00a0 \u00a0 \u00a0 display_name=PREPROCESSED_DATASET_NAME,\u00a0 \u00a0 \u00a0 \u00a0 uri=PREPROCESSED_DATASET_URI,\n```\n### Execution\nThe [Execution](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Execution) class represents the metadata in an execution in Vertex AI. An execution is a step in an ML workflow. Examples of an execution are data processing, training, and model evaluation. An execution can consume artifacts, such as a dataset, and produce an artifact, such as a model.\nUse [aiplatform.start_execution](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform#google_cloud_aiplatform_start_execution) to create an [Execution](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Execution) resource. After you create an [Execution](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Execution) resource, use the same [aiplatform.start_execution](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform#google_cloud_aiplatform_start_execution) method with its `resume` parameter set to `True` to resume it.\nThe following sample code shows how to create an [Execution](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Execution) resource:\n```\nwith aiplatform.start_execution(schema_title='system.ContainerExecution',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 display_name='trainer') as execution:\u00a0 \u00a0 execution.assign_input_artifacts([my_artifact])\u00a0 \u00a0 model = aiplatform.Artifact.create(uri='gs://my-uri', schema_title='system.Model')\u00a0 \u00a0 execution.assign_output_artifacts([model])\n```\n## Vertex AI Experiments classes\nYou can use the Vertex AI SDK for Python to create and run Vertex AI Experiments. Use Vertex AI Experiments to track logged metrics and parameters to help you analyze and optimize your ML workflow. For more information, see [Introduction toVertex AI Experiments](/vertex-ai/docs/experiments/intro-vertex-ai-experiments) .\nTo learn more about how to use the [Experiment](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Experiment) and [ExperimentRun](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.ExperimentRun) classes, try one of the following tutorials:\n- [Build Vertex AI Experiments lineage for custom training](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/experiments/build_model_experimentation_lineage_with_prebuild_code.ipynb) \n- [Track parameters and metrics for locally trained models](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/experiments/comparing_local_trained_models.ipynb) \n- [Compare pipeline runs with Vertex AI Experiments](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/experiments/comparing_pipeline_runs.ipynb) \n- [Get started with Vertex AI Experiments](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/experiments/get_started_with_vertex_experiments.ipynb) \n### Experiment\nThe [Experiment](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Experiment) class represents an experiment in Vertex AI. Use an experiment to analyze its [experiment runs](/vertex-ai/docs/experiments/create-manage-exp-run) and [pipeline runs](/vertex-ai/docs/pipelines/run-pipeline) with different configurations, such as multiple input artifacts and hyperparameters.\nThere are two ways to create an [Experiment](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Experiment) resource:\n- The preferred way to create an [Experiment](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Experiment) is by specifying a name for your experiment as a parameter when you call [aiplatform.init](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform#google_cloud_aiplatform_init) :```\n# In a real world scenario it's likely you would specify more parameters# when you call aiplatform.init. This sample shows only how to use the# parameter used to create an Experiment.# Specify a name for the experimentEXPERIMENT_NAME = \"your-experiment-name\"# Create the experimentaiplatform.init(experiment=EXPERIMENT_NAME)\n```\n- You can also create an [Experiment](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Experiment) by calling [aiplatform.Experiment.create](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Experiment#google_cloud_aiplatform_Experiment_create) . [aiplatform.Experiment.create](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Experiment#google_cloud_aiplatform_Experiment_create) creates the [Experiment](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Experiment) resource but doesn't set it to a global environment. Because of this, you can't run the experiment with [aiplatform.start_run](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform#google_cloud_aiplatform_start_run) . The following sample code shows how to use [aiplatform.Experiment.create](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Experiment#google_cloud_aiplatform_Experiment_create) to create an experiment and then run the experiment:```\n# Specify a name for the experimentEXPERIMENT_NAME = \"your-experiment-name\"EXPERIMENT_RUN_NAME = \"your-run\"# Create the experimentexperiment = aiplatform.Experiment.create(experiment_name=EXPERIMENT_NAME)experiment_run = aiplatform.ExperimentRun.create(EXPERIMENT_RUN_NAME, experiment=EXPERIMENT_NAME)\n```\n### ExperimentRun\nThe [ExperimentRun](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.ExperimentRun) class represents a run of an experiment.\nThe following sample code shows how to create and start an experiment run, then use it to get information about your experiment. To delete the experiment run, get a reference to the [ExperimentRun](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.ExperimentRun) instance and call its [delete](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.ExperimentRun#google_cloud_aiplatform_ExperimentRun_delete) method.\n```\n# Specify your project name, location, experiment name, and run namePROJECT_NAME = \"my-project\"LOCATION = \"us-central1\"EXPERIMENT_NAME = \"experiment-1\"RUN_NAME = \"run-1\"# Create the experiment to runaiplatform.init(experiment_name=EXPERIMENT_NAME,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 project=PROJECT_NAME,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 location=LOCATION)# Create and run an ExperimentRun resource. Next, you can use it to get# information about your experiment. For example, you can log parameters and# metrics with specified key-value pairs.with aiplatform.start_run(RUN_NAME):\u00a0 \u00a0 \u00a0aiplatform.log_params({'learning_rate': 0.1, 'dropout_rate': 0.2})\u00a0 \u00a0 \u00a0aiplatform.log_metrics({'accuracy': 0.9, 'recall': 0.8})# Get a reference to the ExperimentRun resource, get the parameters logged to # the run, get the summary metrics logged to the run, then delete it.with aiplatform.start_run(RUN_NAME, resume=True) as run:\u00a0 \u00a0 \u00a0run.get_params()\u00a0 \u00a0 \u00a0run.get_metrics()\u00a0 \u00a0 \u00a0run.delete()\n```\n## Vertex AI TensorBoard classes\nThe Vertex AI SDK for Python includes classes to work with a managed version of the open source [Vertex AI TensorBoard](https://www.tensorflow.org/tensorboard/get_started) . Vertex AI TensorBoard is a tool used to monitor measurements and visualizations during your ML workflow. For more information, see [Get started withVertex AI TensorBoard](/vertex-ai/docs/experiments/tensorboard-introduction) .\nTo learn more about using the Vertex AI SDK for Python to work with Vertex AI TensorBoard, try one of the following notebook tutorials:\n- [Profile model training performance using Vertex AI TensorBoard Profiler](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/custom/custom_training_tensorboard_profiler.ipynb) \n- [Vertex AI TensorBoard custom training with a custom container.](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/tensorboard/tensorboard_custom_training_with_custom_container.ipynb) \n- [Vertex AI TensorBoard custom training with prebuilt container](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/tensorboard/tensorboard_custom_training_with_prebuilt_container.ipynb) \n- [Vertex AI TensorBoard hyperparameter tuning with the HParams Dashboard](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/tensorboard/tensorboard_hyperparameter_tuning_with_hparams.ipynb) \n- [Profile a model's training performance using Vertex AI TensorBoard Profiler](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/tensorboard/tensorboard_profiler_custom_training.ipynb) \n- [Profile a model's training performance using Vertex AI TensorBoard Profiler in custom training with a prebuilt container](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/tensorboard/tensorboard_profiler_custom_training_with_prebuilt_container.ipynb) \n- [Profile a model's training performance using Vertex AI TensorBoard Profiler in custom training with a prebuilt container](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/tensorboard/tensorboard_profiler_custom_training_with_prebuilt_container.ipynb) \n### Tensorboard\nThe [Tensorboard](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Tensorboard) class represents a managed resource that stores Vertex AI TensorBoard experiments. You need to create a [Tensorboard](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Tensorboard) instance before the experiments can be visualized. You can create more than one [Tensorboard](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Tensorboard) instance in a Google Cloud project.\nThe following sample code shows how to create a [Tensorboard](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Tensorboard) instance:\n```\n# Specify your project name, location, and the name of your TensorboardPROJECT_NAME = \"my-project\"LOCATION = \"us-central1\"TENSORBOARD_NAME = \"my-tensorboard\"aiplatform.init(project=PROJECT_NAME, location=LOCATION)tensorboard = aiplatform.Tensorboard.create(\u00a0 \u00a0 display_name=TENSORBOARD_NAME,\u00a0 \u00a0 project=PROJECT_NAME,\u00a0 \u00a0 location=LOCATION,)\n```\n### TensorboardExperiment\nThe [TensorboardExperiment](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.TensorboardExperiment) represents a group of [TensorboardRun](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.TensorboardRun) objects. A [TensorboardRun](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.TensorboardRun) instance represents the results of a training job run in a Tensorboard.\n### TensorboardRun\nAn instance of the [TensorboardRun](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.TensorboardRun) class maps to a training job run in a Tensorboard with a specified set of hyperparameters, a model definition, a dataset, and more.\n### TensorboardTimeSeries\nThe [TensorboardTimeSeries](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.TensorboardTimeSeries) class represents a series produced in training runs.\n## What's next\n- Learn about the [Vertex AI SDK](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) .", "guide": "Vertex AI"}