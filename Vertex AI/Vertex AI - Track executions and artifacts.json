{"title": "Vertex AI - Track executions and artifacts", "url": "https://cloud.google.com/vertex-ai/docs/experiments/track-executions-artifacts", "abstract": "# Vertex AI - Track executions and artifacts\nVertex AI Experiments supports tracking both executions and . Executions are steps in an ML workflow that include but aren't limited to data preprocessing, training, and model evaluation. Executions can consume artifacts such as datasets and produce artifacts such as models.\nThe following sample uses the ` [create](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform#google_cloud_aiplatform_Artifact_create) ` method of the Artifact Class.#", "content": "## Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/experiment_tracking/create_artifact_sample.py) \n```\ndef create_artifact_sample(\u00a0 \u00a0 schema_title: str,\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 uri: Optional[str] = None,\u00a0 \u00a0 resource_id: Optional[str] = None,\u00a0 \u00a0 display_name: Optional[str] = None,\u00a0 \u00a0 schema_version: Optional[str] = None,\u00a0 \u00a0 description: Optional[str] = None,\u00a0 \u00a0 metadata: Optional[Dict] = None,):\u00a0 \u00a0 artifact = aiplatform.Artifact.create(\u00a0 \u00a0 \u00a0 \u00a0 schema_title=schema_title,\u00a0 \u00a0 \u00a0 \u00a0 uri=uri,\u00a0 \u00a0 \u00a0 \u00a0 resource_id=resource_id,\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name,\u00a0 \u00a0 \u00a0 \u00a0 schema_version=schema_version,\u00a0 \u00a0 \u00a0 \u00a0 description=description,\u00a0 \u00a0 \u00a0 \u00a0 metadata=metadata,\u00a0 \u00a0 \u00a0 \u00a0 project=project,\u00a0 \u00a0 \u00a0 \u00a0 location=location,\u00a0 \u00a0 )\u00a0 \u00a0 return artifact\n```\n- `schema_title`: Required. Identifies the schema title used by the resource.\n- `project`: Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) . You can find these IDs in the Google Cloud console [welcome](https://console.cloud.google.com/welcome) page.\n- `location`: See [List of   available locations](/vertex-ai/docs/general/locations) .\n- `uri`: Optional. URI of artifact's location.\n- `resource_id`: Optional. The`resource_id`portion of the Artifact name with   the format. This is globally unique in a metadataStore:`projects/123/locations/us-central1/metadataStores/<metadata_store_id>/artifacts/<resource_id>`.\n- `display_name`: Optional. The user-defined name of the   resource.\n- `schema_version`: Optional. Specifies the version used   by the resource. If not set, defaults to use the latest version.\n- `description`: Optional. Describes the purpose of the   resource to be created.\n- `metadata`: Optional. Contains the metadata information   that will be stored in the resource.The following sample uses the ` [start_execution](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform#google_cloud_aiplatform_start_execution) ` method.### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/experiment_tracking/start_execution_sample.py) \n```\ndef start_execution_sample(\u00a0 \u00a0 schema_title: str,\u00a0 \u00a0 display_name: str,\u00a0 \u00a0 input_artifacts: List[aiplatform.Artifact],\u00a0 \u00a0 output_artifacts: List[aiplatform.Artifact],\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 resource_id: Optional[str] = None,\u00a0 \u00a0 metadata: Optional[Dict[str, Any]] = None,\u00a0 \u00a0 schema_version: Optional[str] = None,\u00a0 \u00a0 resume: bool = False,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 with aiplatform.start_execution(\u00a0 \u00a0 \u00a0 \u00a0 schema_title=schema_title,\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name,\u00a0 \u00a0 \u00a0 \u00a0 resource_id=resource_id,\u00a0 \u00a0 \u00a0 \u00a0 metadata=metadata,\u00a0 \u00a0 \u00a0 \u00a0 schema_version=schema_version,\u00a0 \u00a0 \u00a0 \u00a0 resume=resume,\u00a0 \u00a0 ) as execution:\u00a0 \u00a0 \u00a0 \u00a0 execution.assign_input_artifacts(input_artifacts)\u00a0 \u00a0 \u00a0 \u00a0 execution.assign_output_artifacts(output_artifacts)\u00a0 \u00a0 \u00a0 \u00a0 return execution\n```\n- `schema_title`: Identifies the schema title used by the resource.\n- `display_name`: The user-defined name of the resource.\n- `input_artifacts`: Artifacts to assign as    input.\n- `output_artifacts`: Artifacts as outputs to this    Execution.\n- `project`: Your project ID. You can find these in the Google Cloud console [welcome](https://console.cloud.google.com/welcome) page.\n- `location`: See [List of   available locations](/vertex-ai/docs/general/locations) .\n- `resource_id`: Optional. The`resource_id`portion of the Artifact name with the format. This is globally unique in a metadataStore: projects/123/locations/us-central1/metadataStores/<metadata_store_id>/artifacts/<resource_id>.\n- `schema_version`: Optional. Specifies the version used    by the resource. If not set, defaults to use the latest version.\n- `metadata`: Optional. Contains the metadata information    that will be stored in the resource.\n- `resume`: bool.Note: When the optional `resume` parameter    is specified as `TRUE` , the previously started run resumes.    When not specified, `resume` defaults to `FALSE` and a new    run is created.\n### Notebook samples\n- [Compare models trained and evaluated locally](/vertex-ai/docs/experiments/user-journey/uj-compare-models)", "guide": "Vertex AI"}