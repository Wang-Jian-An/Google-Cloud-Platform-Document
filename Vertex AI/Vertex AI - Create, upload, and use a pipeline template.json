{"title": "Vertex AI - Create, upload, and use a pipeline template", "url": "https://cloud.google.com/vertex-ai/docs/pipelines/create-pipeline-template", "abstract": "# Vertex AI - Create, upload, and use a pipeline template\nA pipeline template is a resource that you can use to publish a workflow definition so that it can be reused multiple times, by a single user or by [multiple users](/artifact-registry/docs/access-control#grant-repo) .\nThe Kubeflow Pipelines SDK registry client is a new client interface that you can use with a compatible registry server, such as Artifact Registry, for version control of your Kubeflow Pipelines (KFP) templates. For more information, see [Use the template in a Kubeflow Pipelines SDK registry client](#use-the-template-in-kfp-client) .\nThis page shows you how to:\n- Create a KFP pipeline template\n- Use the Kubeflow Pipelines SDK registry client to upload the template to a pipeline template repository\n- Use the template in the Kubeflow Pipelines client", "content": "## Before you begin\nBefore you build and run your pipeline, use the following instructions to set up your Google Cloud project and development environment in the Google Cloud console.\n- Install v2 or later of the [Kubeflow Pipelines SDK](https://www.kubeflow.org/docs/components/pipelines/sdk/install-sdk/) . (Optional) Before installing, run the following command to see which version of the [Kubeflow Pipelines SDK](https://www.kubeflow.org/docs/components/pipelines/sdk/install-sdk/) is currently installed:```\n\u00a0 pip freeze | grep kfp\n``` **Note:** To upgrade to the latest version of the [Kubeflow Pipelines SDK](https://www.kubeflow.org/docs/components/pipelines/sdk/install-sdk/) , run the following command: `pip install kfp --upgrade` If an updated version is available, running this command uninstalls your currently installed version and installs the latest version.\n- Install v1.15.0 or later of the [Vertex AI SDK for Python](/python/docs/reference/aiplatform/latest) . (Optional) Before installing, run the following command to see which version of the [Vertex AI SDK for Python](/python/docs/reference/aiplatform/latest) is currently installed:```\n\u00a0 pip freeze | grep google-cloud-aiplatform\n``` **Note:** To upgrade to the latest version of the [Vertex AI SDK for Python](/python/docs/reference/aiplatform/latest) , run the following command: `pip install google-cloud-aiplatform --upgrade` If an updated version is available, running this command uninstalls your currently installed version and installs the latest version.\n- (Optional) Install 390.0.0 or later of the [Google Cloud CLI](/sdk/docs/install) .\n- [Enable the Artifact Registry API](/artifact-registry/docs/enable-service) .## Configuring permissions\nIf you have not already set up your gcloud CLI project for Vertex AI Pipelines, follow the instructions in [Configure your Google Cloud project for Vertex AI Pipelines](/vertex-ai/docs/pipelines/configure-project) .\nAdditionally, assign the following predefined Identity and Access Management permissions to use Artifact Registry as the template registry:\n- `roles/artifactregistry.admin`: Assign this role to create and manage a repository.\n- `roles/artifactregistry.repoAdmin`or`roles/artifactregistry.writer`: Assign any of these roles to manage templates inside a repository.\n- `roles/artifactregistry.reader`: Assign this role to download templates from a repository.\n- `roles/artifactregistry.reader`: Assign this role to a [service account associated with Vertex AI Pipelines](/vertex-ai/docs/pipelines/configure-project#service-account) to create a pipeline run from a template.\nFor more information about predefined Identity and Access Management roles for Artifact Registry, see [Predefined Artifact Registry roles](/artifact-registry/docs/access-control#roles) .\nUse the following sample to assign roles:\n```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=PRINCIPAL \\\n --role=ROLE\n```\nReplace the following:\n- : The project where you want to create the pipeline.\n- : The principal to which you are adding permissions.\n- : The Identity and Access Management role that you want to grant to the principal.\nSee [Roles and permissions](/artifact-registry/docs/access-control#permissions) in the [Artifact Registry documentation](/artifact-registry/docs) for more information about the following:\n- [Granting project-wide permissions](/artifact-registry/docs/access-control#grant-project) \n- [Granting repository-specific permissions](/artifact-registry/docs/access-control#grant-repo) \n- [Granting basic Identity and Access Management roles to individual users](/artifact-registry/docs/access-control#basic) ## Create a repository in Artifact Registry\nNext you'll create a repository in Artifact Registry for your pipeline templates.\n- Open **Vertex AI Pipelines** in the Google Cloud console. [Go to Vertex AI Pipelines](https://console.cloud.google.com/vertex-ai/pipelines) \n- Click the **Your templates** tab.\n- To open the **Select repository** pane, click **Select repository** .\n- Click **Create repository** .\n- Specify `quickstart-kfp-repo` as the repository name.\n- Under **Format** , select `Kubeflow Pipelines` .\n- Under **Location Type** , select **Region** .\n- In the **Region** drop-down list, select `us-central1` . **Note:** The example commands and configuration in these instructions use `us-central1` , but you can use any of the supported regions.\n- Click **Create** .\nRun the following command to create a repository.\nBefore using any of the command data below, make the following replacements:- : The location or region where you want to create the repository, for example,`us-central1`\nExecute the [gcloud artifacts repositories create](/sdk/gcloud/reference/artifacts/repositories/create) command:\n## Create a template\nUse the following code sample to define a pipeline with a single component. For information about how to define a pipeline using KFP, see [Build a Pipeline](/vertex-ai/docs/pipelines/build-pipeline) .\n```\nfrom kfp import dslfrom kfp import compiler@dsl.component()def hello_world(text: str) -> str:\u00a0 \u00a0 print(text)\u00a0 \u00a0 return text@dsl.pipeline(name='hello-world', description='A simple intro pipeline')def pipeline_hello_world(text: str = 'hi there'):\u00a0 \u00a0 \"\"\"Pipeline that passes small pipeline parameter string to consumer op.\"\"\"\u00a0 \u00a0 consume_task = hello_world(\u00a0 \u00a0 \u00a0 \u00a0 text=text) \u00a0# Passing pipeline parameter as argument to consumer opcompiler.Compiler().compile(\u00a0 \u00a0 pipeline_func=pipeline_hello_world,\u00a0 \u00a0 package_path='hello_world_pipeline.yaml')\n```\nWhen you run the sample, the `compiler.Compiler().compile(...)` statement compiles the \"hello-world\" pipeline into the local YAML file named `hello_world_pipeline.yaml` .\n## Upload the template\n- Open **Vertex AI Pipelines** in the Google Cloud console. [Go to Vertex AI Pipelines](https://console.cloud.google.com/vertex-ai/pipelines/) \n- Click **Upload** to open the **Upload pipeline or component** pane.\n- In the **Repository** drop-down list, select the `quickstart-kfp-repo` repository.\n- Specify a **Name** for the pipeline template.\n- In the **File** field, click **Choose** to select and upload the compiled pipeline template YAML from your local file system.\n- After you upload the pipeline template, it is listed on the **Your templates** page. [Go to Your templates](https://console.cloud.google.com/vertex-ai/pipelines/templates) \n- To configure your Kubeflow Pipelines SDK registry client, run the following commands:```\nfrom kfp.registry import RegistryClientclient = RegistryClient(host=f\"https://us-central1-kfp.pkg.dev/PROJECT_ID/quickstart-kfp-repo\")\n```\n- Upload the compiled YAML file to your repository in Artifact Registry.```\ntemplateName, versionName = client.upload_pipeline(\u00a0 file_name=\"hello_world_pipeline.yaml\",\u00a0 tags=[\"v1\", \"latest\"],\u00a0 extra_headers={\"description\":\"This is an example pipeline template.\"})\n```\n- To verify that the template was uploaded:- Open **Vertex AI Pipelines** in the Google Cloud console. [Go to Vertex AI Pipelines](https://console.cloud.google.com/vertex-ai/pipelines/) \n- Click the **Your templates** tab.\n- Click **Select repository** .\n- From the list, select the `quickstart-kfp-repo` repository, and then click **Select** .\n- You should find the uploaded template package `hello-world` from the list.\n- To view list of versions of the pipeline template, click the `hello-world` template.\n- To view the pipeline topology, click the version.\n## Use the template in Vertex AI\nAfter you've uploaded your pipeline template to your repository in Artifact Registry, it is ready to be used in Vertex AI Pipelines.\n### Create a staging bucket for your template\nBefore you can use your pipeline template, you'll need to create a Cloud Storage bucket for staging pipeline runs.\nTo create the bucket, follow the instructions in [Configure a Cloud Storage bucket for pipeline artifacts](/vertex-ai/docs/pipelines/configure-project#storage) and then run the following command:\n```\nSTAGING_BUCKET=\"gs://BUCKET_NAME\"\n```\nReplace with the name of the bucket you just created.\n### Create a pipeline run from your template\nYou can use the Vertex AI SDK for Python or the Google Cloud console to create a pipeline run from your template in Artifact Registry.\n- Open **Vertex AI Pipelines** in the Google Cloud console. [Go to Vertex AI Pipelines](https://console.cloud.google.com/vertex-ai/pipelines) \n- Click the **Your templates** tab.\n- To open the **Select repository** pane, click **Select repository** .\n- Select the `quickstart-kfp-repo` repository, and then click **Select** .\n- Click the `hello-world` package.\n- Next to the `4f245e8f9605` version, click **Create Run** .\n- Click **Runtime Configuration** .\n- Enter the following under **Cloud Storage location** :```\ngs://BUCKET_NAME\n```Replace with the name of the bucket you created for staging your pipeline runs.\n- Click **Submit** .\nRun the following commands, replacing with the Google Cloud project that this pipeline runs in.\n```\nfrom google.cloud import aiplatform# Initialize the aiplatform packageaiplatform.init(\u00a0 \u00a0 project=\"PROJECT_ID\",\u00a0 \u00a0 location='us-central1',\u00a0 \u00a0 staging_bucket=STAGING_BUCKET)# Create a job via version id.job = aiplatform.PipelineJob(\u00a0 \u00a0 display_name=\"hello-world-latest\",\u00a0 \u00a0 template_path=\"https://us-central1-kfp.pkg.dev/PROJECT_ID/quickstart-kfp-repo/hello-world/\" + \\\u00a0 \u00a0 \u00a0 \u00a0 versionName)# Or via tag.job = aiplatform.PipelineJob(\u00a0 \u00a0 display_name=\"hello-world-latest\",\u00a0 \u00a0 template_path=\"https://us-central1-kfp.pkg.dev/PROJECT_ID/quickstart-kfp-repo/hello-world/v1\")job.submit()\n```\n### View created pipeline runs\nYou can view the runs created by a specific pipeline version in the Vertex AI SDK for Python.\n- Open **Vertex AI Pipelines** in the Google Cloud console. [Go to Vertex AI Pipelines](https://console.cloud.google.com/vertex-ai/pipelines) \n- Click the **Your templates** tab.\n- Click **Select repository** .\n- From the list, select the `quickstart-kfp-repo` repository, and then click **Select** .\n- To view list of versions for the `hello-world` pipeline template, click the `hello world` template.\n- Click the desired version for which you want to view pipeline runs.\n- To view pipeline runs for the selected version, click **View Runs** and then click the **Runs** tab.\nTo list the pipelines runs, run the [pipelineJobs.list](/vertex-ai/docs/reference/rest/v1/projects.locations.pipelineJobs/list) command as shown in one or more of the following examples:\n```\n\u00a0 from google.cloud import aiplatform\u00a0 # To filter all runs created from a specific version\u00a0 filter = 'template_uri:\"https://us-central1-kfp.pkg.dev/PROJECT_ID/quickstart-kfp-repo/hello-world/*\" AND ' + \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0'template_metadata.version=\"%s\"' % versionName\u00a0 aiplatform.PipelineJob.list(filter=filter)\u00a0 # To filter all runs created from a specific version tag\u00a0 filter = 'template_uri=\"https://us-central1-kfp.pkg.dev/PROJECT_ID/quickstart-kfp-repo/hello-world/latest\"'\u00a0 aiplatform.PipelineJob.list(filter=filter)\u00a0 # To filter all runs created from a package\u00a0 filter = 'template_uri:\"https://us-central1-kfp.pkg.dev/PROJECT_ID/quickstart-kfp-repo/hello-world/*\"'\u00a0 aiplatform.PipelineJob.list(filter=filter)\u00a0 # To filter all runs created from a repo\u00a0 filter = 'template_uri:\"https://us-central1-kfp.pkg.dev/PROJECT_ID/quickstart-kfp-repo/*\"'\u00a0 aiplatform.PipelineJob.list(filter=filter)\n```\n## Use the template in a Kubeflow Pipelines SDK registry client\nYou can use a Kubeflow Pipelines SDK registry client together with Artifact Registry to download and use your pipeline template.\n- To list the resources in the repository, run the following commands:```\ntemplatePackages = client.list_packages()templatePackage = client.get_package(package_name = \"hello-world\")versions = client.list_versions(package_name=\"hello-world\")version = client.get_version(package_name=\"hello-world\", version=versionName)tags = client.list_tags(package_name = \"hello-world\")tag = client.get_tag(package_name = \"hello-world\", tag=\"latest\")\n```For the complete list of available methods and documents, see the `proto` files in the Artifact Registry [GitHub repo](https://github.com/googleapis/googleapis/tree/master/google/devtools/artifactregistry/v1) .\n- To download the template to your local file system, run the following commands:```\n# Sample 1filename = client.download_pipeline(\u00a0 package_name = \"hello-world\",\u00a0 version = versionName)# Sample 2filename = client.download_pipeline(\u00a0 package_name = \"hello-world\",\u00a0 tag = \"v1\")# Sample 3filename = client.download_pipeline(\u00a0 package_name = \"hello-world\",\u00a0 tag = \"v1\",\u00a0 file_name = \"hello-world-template.yaml\")\n```## Use the Artifact Registry REST API\nThe following sections summarize how to use the [Artifact Registry REST API](/artifact-registry/docs/reference/rest) to manage your pipeline templates in your Artifact Registry repository.\n### Upload a pipeline template using the Artifact Registry REST API\nYou can upload a pipeline template by creating an HTTP request using the parameter values described in this section, where:\n- is the Google Cloud project that this pipeline runs in.\n- is the ID of your Artifact Registry repository.```\ncurl -X POST \\\u00a0 \u00a0 -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0 -F tags=v1,latest \\\u00a0 \u00a0 -F content=@pipeline_spec.yaml \\\u00a0 \u00a0 https://us-central1-kfp.pkg.dev/PROJECT_ID/REPO_ID\n```\nThe request is an HTTP or HTTPS multipart request. It must include the authentication token in the request header. For more information, see [gcloud auth print-access-token](/sdk/gcloud/reference/auth/print-access-token) .\nThe payload of the request is the contents of the `pipeline_spec.yaml` file (or .zip package). The recommended size limit is 10 MiB.\nThe package name is taken from the `pipeline_spec.pipeline_info.name` entry in the `pipeline_spec.yaml` file. The package name uniquely identifies the package and is immutable across versions. It can be between 4 and 128 characters long and must match the following regular expression: `^[a-z0-9][a-z0-9-]{3,127}$` .\nThe package `tags` are a list of up to eight comma-separated tags. Each tag must match the following regular expression: `^[a-zA-Z0-9\\-._~:@+]{1,128}$` .\nIf a tag exists and points to a pipeline that's already been uploaded, the tag is updated to point to the pipeline that you're currently uploading. For example, if the `latest` tag points to a pipeline you've already uploaded, and you upload a new version with `--tag=latest` , the `latest` tag is removed from the previously uploaded pipeline and assigned to the new pipeline you're uploading.\nIf the pipeline you're uploading is identical to a pipeline you've previously uploaded, the upload succeeds. The uploaded pipeline's metadata, including its version tags, is updated to match the parameter values of your upload request.\nIf the upload request succeeds, it returns an `HTTP OK` status. The body of the response is as follows:\n```\n{packageName}/{versionName=sha256:abcdef123456...}\n```\nwhere `versionName` is the sha256 digest of `pipeline_spec.yaml` formatted as a hex string.\n### Download a pipeline template using the Artifact Registry REST API\nYou can download a pipeline template by creating an HTTP request using the parameter values described in this section, where:\n- is the Google Cloud project that this pipeline runs in.\n- is the ID of your Artifact Registry repository.\n- is the package ID of your uploaded template.\n- is the version tag.\n- is the template version in the format of`sha256:abcdef123456...`.\nFor standard Artifact Registry download, you should form the download link as follows:\n```\nurl = https://us-central1-kfp.pkg.dev/PROJECT_ID/REPO_ID/PACKAGE_ID/VERSIONurl = https://us-central1-kfp.pkg.dev/PROJECT_ID/REPO_ID/PACKAGE_ID/TAG\n```\n```\ncurl -X GET \\\u00a0 \u00a0 -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0 https://us-central1-kfp.pkg.dev/PROJECT_ID/REPO_ID/PACKAGE_ID/VERSION\n```\nYou can replace with and download the same template, as shown in the following example:\n```\ncurl -X GET \\\u00a0 \u00a0 -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0 https://us-central1-kfp.pkg.dev/PROJECT_ID/REPO_ID/PACKAGE_ID/TAG\n```\nIf the download request succeeds, it returns an `HTTP OK` status. The body of the response is the contents of the `pipeline_spec.yaml` file.\n## Reference links\n- [Artifact Registry - Repository overview](/artifact-registry/docs/repositories) for more information about how to manage your repositories.\n- [Repository API](/artifact-registry/docs/reference/rest/v1/projects.locations.repositories) - [format](/artifact-registry/docs/reference/rest/v1/projects.locations.repositories#format) keyword is \"KFP\"\n- [Package API](/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.packages) \n- [Version API](/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.packages.versions) \n- [Tag API](/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.packages.tags) \n- [Proto definitions on GitHub](https://github.com/googleapis/googleapis/tree/master/google/devtools/artifactregistry/v1)", "guide": "Vertex AI"}