{"title": "Vertex AI - Create a secure user-managed notebooks instance in a VPC network", "url": "https://cloud.google.com/vertex-ai/docs/workbench/user-managed/vpc-standalone", "abstract": "# Vertex AI - Create a secure user-managed notebooks instance in a VPC network\nVertex AI Workbench user-managed notebooks is [deprecated](/vertex-ai/docs/deprecations) . On January 30, 2025, support for  user-managed notebooks will end and the ability to create user-managed notebooks instances  will be removed. Existing instances will continue to function  but patches, updates, and upgrades won't be available. To continue using  Vertex AI Workbench, we recommend that you [migrate your user-managed notebooks instances to Vertex AI Workbench instances](/vertex-ai/docs/workbench/user-managed/migrate-to-instances) .This tutorial is intended for enterprise data scientists, researchers, and network administrators. It shows how to secure a user-managed notebooks instance by creating it in a Virtual Private Cloud (VPC) network.\nA [VPC network](/vpc/docs/overview) is a virtual version of a physical network that is implemented inside of Google's production network. It is a private network, with its own private IP addresses, subnets, and network gateways. In the enterprise, VPC networks are used to protect data and instances by controlling access to them from other networks and from the internet.\nThe VPC network in this tutorial is a standalone network. However, you can share a VPC network from one project (called a host project) to other projects in your Google Cloud organization. To learn more about which type of VPC network to use, see [Single VPC network and Shared VPC](https://cloud.google.com/architecture/best-practices-vpc-design#single_vpc_network_and) .\nFollowing network security best practices, the VPC network in this tutorial uses a combination of [Cloud Router](/network-connectivity/docs/router/concepts/overview) , [Cloud NAT](/nat/docs/overview) , and [Private Google Access](/vpc/docs/private-google-access) to secure the instance in the following ways:- The user-managed notebooks instance doesn't have an external IP address.\n- The instance has outbound internet access through a regional Cloud Router and Cloud NAT gateway so that you can install software packages or other dependencies. Cloud NAT allows outbound connections and the inbound responses to those connections. It doespermit unsolicited inbound requests from the internet.\n- The instance uses Private Google Access to reach the external IP addresses of Google APIs and services.\nThe tutorial also shows how to do the following:- Create a post-startup script to automatically clone a GitHub repo into the newly created user-managed notebooks instance.\n- Use [Cloud Monitoring](/vertex-ai/docs/general/monitoring-metrics) to monitor the user-managed notebooks instance.\n- Use the [Compute Engine](/compute/docs/instances/schedule-instance-start-stop) API to start and stop the instance automatically to optimize costs.\n", "content": "## Objectives\n- Create a VPC network and add a subnet that has Private Google Access enabled.\n- Create a Cloud Router and Cloud NAT for the VPC network.\n- Create a user-managed notebooks instance in the subnet, using a post-startup script that clones the [Google Cloud Generative AI](https://github.com/GoogleCloudPlatform/generative-ai/) GitHub repository.\n- Enable Cloud Monitoring for the instance.\n- Create a VM instance schedule and attach it to the instance.\n## CostsIn this document, you use the following billable components of Google Cloud:- [Cloud NAT](/nat/pricing) \n- [Compute Engine](/compute/all-pricing) \n- [Cloud Storage](/storage/pricing) \n- [Vertex AI](/vertex-ai/pricing) \n- [Virtual Private Cloud](/vpc/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, go to the project selector page. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- Select or create a Google Cloud project.\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Open [Cloud Shell](/shell/docs/launching-cloud-shell-editor) to execute the commands listed  in this tutorial. Cloud Shell is an interactive shell environment  for Google Cloud that lets you manage your projects and resources from  your web browser.\n- [Go to Cloud Shell](https://ssh.cloud.google.com/cloudshell/editor) \n- In the Cloud Shell, set the current project to your Google Cloud project ID and store the same project ID into the`projectid`shell variable:```\n projectid=\"PROJECT_ID\"\n gcloud config set project ${projectid}\n```Replacewith your project ID. If necessary, you can locate your project ID in the Google Cloud console. For more information, see [Find your project ID](/vertex-ai/docs/tutorials/tabular-bq-prediction/prerequisites#find-project-id) .\n- Enable the IAM, Compute Engine, Notebooks, Cloud Storage, and Vertex AI APIs:```\ngcloud services enable iam.googleapis.com \u00a0compute.googleapis.com notebooks.googleapis.com storage.googleapis.com aiplatform.googleapis.com\n```\n- Grant roles to your Google Account. Run the following command once for each of the following   IAM roles: `roles/compute.networkAdmin, roles/compute.securityAdmin, roles/compute.instanceAdmin, roles/notebooks.admin, roles/resourcemanager.projectIamAdmin, roles/iam.serviceAccountAdmin, roles/iam.serviceAccountUser, roles/storage.Admin` ```\ngcloud projects add-iam-policy-binding PROJECT_ID --member=\"user:EMAIL_ADDRESS\" --role=ROLE\n```- Replace``with your project ID.\n- Replace``with your email address.\n- Replace``with each individual role.## Create and configure a standalone VPC\n- Create a VPC network named `securevertex-vpc` :```\ngcloud compute networks create securevertex-vpc --subnet-mode=custom\n```\n- Create a subnet named `securevertex-subnet-a` , with a primary IPv4 range of `10.10.10.0/29` :```\ngcloud compute networks subnets create securevertex-subnet-a --range=10.10.10.0/29 --network=securevertex-vpc --region=us-central1 --enable-private-ip-google-access\n```If desired, you can supply a different value for the `--range` parameter. However, the minimum prefix length for a single notebook is 29. For more information, see [IPv4 subnet ranges](/vpc/docs/subnets#ipv4-ranges) .\n- Create a regional Cloud Router named `cloud-router-us-central1` :```\ngcloud compute routers create cloud-router-us-central1 --network securevertex-vpc --region us-central1\n```\n- Create a regional Cloud NAT gateway named `cloud-nat-us-central1` :```\ngcloud compute routers nats create cloud-nat-us-central1 --router=cloud-router-us-central1 --auto-allocate-nat-external-ips --nat-all-subnet-ip-ranges --region us-central1\n```\n## Create a Cloud Storage bucket\n- Create the Cloud Storage bucket:```\ngcloud storage buckets create --location=us-central1 --uniform-bucket-level-access gs://BUCKET_NAME\n```Replace with a unique bucket name.\n- Set the `BUCKET_NAME` shell variable and verify that it was entered correctly:```\nBUCKET_NAME=BUCKET_NAMEecho $BUCKET_NAME\n```Replace with the bucket name.\n## Create and upload a post-startup script\n- To create the script, use a text editor such as `vi` or `nano` to create a file named `poststartup.sh` .\n- Paste the following shell script into the file:```\n#! /bin/bashecho \"Current user: id\" >> /tmp/notebook_config.log 2>&1echo \"Changing dir to /home/jupyter\" >> /tmp/notebook_config.log 2>&1cd /home/jupyterecho \"Cloning generative-ai from github\" >> /tmp/notebook_config.log 2>&1su - jupyter -c \"git clone https://github.com/GoogleCloudPlatform/generative-ai.git\" >> /tmp/notebook_config.log 2>&1echo \"Current user: id\" >> /tmp/notebook_config.log 2>&1echo \"Installing python packages\" >> /tmp/notebook_config.log 2&1su - jupyter -c \"pip install --upgrade --no-warn-conflicts --no-warn-script-location --user \\\u00a0 \u00a0 \u00a0google-cloud-bigquery \\\u00a0 \u00a0 \u00a0google-cloud-pipeline-components \\\u00a0 \u00a0 \u00a0google-cloud-aiplatform \\\u00a0 \u00a0 \u00a0seaborn \\\u00a0 \u00a0 \u00a0kfp\" >> /tmp/notebook_config.log 2>&1\n```\n- Save the file.\n- Upload the file to your Cloud Storage bucket:```\ngcloud storage cp poststartup.sh gs://$BUCKET_NAME\n```\n## Create a custom service accountWhen you create a user-managed notebooks instance, we strongly recommend that you clear the **Use Compute Engine default service account** checkbox and specify a custom service account. The Compute Engine default service account (and thus anyone you specify as an instance user) is granted the Editor role ( `roles/editor` ) on your project. You can disable this behavior by [disabling automatic role grants for default serviceaccounts](/resource-manager/docs/organization-policy/restricting-service-accounts#disable_service_account_default_grants) .- Create a custom service account named `user-managed-notebook-sa` :```\ngcloud iam service-accounts create user-managed-notebook-sa \\--display-name=\"user-managed-notebook-sa\" \n```\n- Assign the Storage Object Viewer IAM role to the service account:```\ngcloud projects add-iam-policy-binding $projectid --member=\"serviceAccount:user-managed-notebook-sa@$projectid.iam.gserviceaccount.com\" --role=\"roles/storage.objectViewer\"\n```\n- Assign the Vertex AI User IAM role to the service account:```\ngcloud projects add-iam-policy-binding $projectid --member=\"serviceAccount:user-managed-notebook-sa@$projectid.iam.gserviceaccount.com\" --role=\"roles/aiplatform.user\"\n```\n## Create a user-managed notebooks instance\n- In the Google Cloud console, go to the **User-managed notebooks** page. [Go to User-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/user-managed) \n- Click add_box **Create new** , and then select **Advanced Options** .The **Create instance** page opens.\n- On the **Create instance** page, in the **Details** section, provide the following information for your new instance and then click **Continue** :- **Name** : Provide a name for your new instance, or accept the default.\n- **Region** : Select **us-central1** .\n- **Zone** : Select **us-central1-a** .\n- In the **Environment** section, provide the following and then click **Continue** :- **Post-startup script** : Click **Browse** , double-click the`poststartup.sh`file, click it one more time, and then click **Select** .\n- In the **Machine type** section, provide the following and then click **Continue** :- **Shielded VM** : Select the following checkboxes:- **Secure Boot** \n- **Virtual Trusted Platform Module (vTPM)** \n- **Integrity monitoring** \n- In the **Disks** section, make sure that **Google-managed encryption key** is selected, and then click **Continue** :\n- In the **Networking** section, provide the following and then click **Continue** :- **Networking** : Select **Network in this project** and complete the following steps:- In the **Network** field, select **securevertex-vpc** .\n- In the **Subnetwork** field, select **securevertex-subnet-a** .\n- Clear the **Assign external IP address** checkbox. Not assigning an external IP address prevents the instance from receiving unsolicited communication from the internet or other VPC networks.\n- Select the **Allow proxy access** checkbox.\n- In the **IAM and security** section, provide the following and then click **Continue** :- **IAM and security** : To grant a single user access to the instance's JupyterLab interface, complete the following steps:- Select **Single user** .\n- In the **User email** field, enter the email address for a single user account. If you're creating the instance for someone else, the following conditions apply:- You (the instance creator) don't have access to the instance's JupyterLab interface. But you still control the instance, and you can start, stop, or delete it.\n- After you create the instance, you need to grant the user the Service Account User role (`roles/iam.serviceAccountUser`) on the instance's service account. See [Optional: Grant the Service Account User role to the instance user](#grant-sa-user-role) .\n- Clear the **Use Compute Engine default service account** checkbox. This step is important, because the Compute Engine default service account (and thus the single user you just specified) is granted the Editor role (`roles/editor`) on your project.\n- In the **Service account email** field, enter `user-managed-notebook-sa@$projectid.iam.gserviceaccount.com` . (This is the custom service account email address that you created earlier.) This service account has limited permissions.To learn more about granting access, see [Manage access to a user-managed notebooks instance's JupyterLab interface](/vertex-ai/docs/workbench/user-managed/manage-access-jupyterlab) .\n- **Security options** : Clear the following checkbox:- **Root access to the instance** \nSelect the following checkbox:- **nbconvert** [nbconvert](https://nbconvert.readthedocs.io/en/latest/) lets users export and download a notebook file as a different file type, such as HTML, PDF, or LaTeX. This setting is required by some of the notebooks in the [Google Cloud Generative AI](https://github.com/GoogleCloudPlatform/generative-ai/) GitHub repo.\nClear the following checkbox:- **File downloading** \nSelect the following checkbox, unless you're in a production environment:- **Terminal access** This enables terminal access to your instance from within the JupyterLab user interface.\n- In the **System health** section, select **Environment auto-upgrade** and provide the following:- In **Reporting** , select the following checkboxes:- **Report system health** \n- **Report custom metrics to Cloud Monitoring** \n- **Install Cloud Monitoring** \n- **Report DNS status for required Google domains** \n- Click **Create** .\n## Optional: Grant the Service Account User role to the instance userIf you're creating the user-managed notebooks instance for another user, you must grant them the [Service Account User role](/iam/docs/service-accounts#user-role) ( `roles/iam.serviceAccountUser` ) on the `user-managed-notebook-sa` custom service account as follows:\n```\ngcloud iam service-accounts add-iam-policy-binding \\\u00a0 \u00a0 user-managed-notebook-sa@PROJECT_ID.iam.gserviceaccount.com \\\u00a0 \u00a0 --member=\"user:USER_EMAIL\" \\\u00a0 \u00a0 --role=\"roles/iam.serviceAccountUser\"\n```\nReplace the following values:- : the project ID\n- : the email address for the user\n## Verify that the user-managed notebooks instance was createdVertex AI Workbench creates a user-managed notebooks instance based on your specified properties and automatically starts the instance.\nWhen the instance is ready to use, Vertex AI Workbench activates an **Open JupyterLab** link. This link is accessible only to the single user that you specified at instance creation time.\nOpen the instance in JupyterLab and verify that the cloned [Google Cloud Generative AI](https://github.com/GoogleCloudPlatform/generative-ai/) GitHub repo is present.- In the Google Cloud console, go to the **User-managed notebooks** page. [Go to User-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/user-managed) \n- In the list of user-managed notebooks instances, click the **Open JupyterLab** link for the instance you created.In the folder list, you'll see a `generative-ai` folder. This folder contains the cloned GitHub repo.\n## Monitor health status through MonitoringYou can monitor the system and application metrics for your user-managed notebooks instances by using the Google Cloud console. To learn more about instance monitoring and about creating custom metrics, see [Monitor health status](/vertex-ai/docs/workbench/user-managed/monitor-health) .- In the Google Cloud console, go to the **User-managed notebooks** page. [Go to User-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/user-managed) \n- Click the name of the user-managed notebooks instance that you want to view the metrics for.\n- On the **Notebook details** page, click the **Monitoring** tab. Review the **CPU Utilization** and **Network Bytes** for your notebook instance. To learn how to interpret these metrics, see [Review resource metrics](/compute/docs/instances/observe-monitor-vms#review_resource_metrics) .If you just created the instance, you won't see any data right away. Wait a few minutes and refresh the console tab.\n## Create a VM instance schedule for your user-managed notebooks instanceBecause a user-managed notebooks instance is a Compute Engine VM instance, you can use Compute Engine APIs to create a VM instance schedule for it.\nUse a VM instance schedule to start and stop your user-managed notebooks instance. During the hours when the instance is stopped, you pay only for Cloud Storage costs.\nYou can attach an instance schedule to any VM instance that's in the same region, so you can use the same instance schedule to control all your user-managed notebooks instances in the region.\nTo learn more about VM instance schedules, see [Scheduling a VM instance to start and stop](/compute/docs/instances/schedule-instance-start-stop) .\n### Create a custom IAM roleAs a security best practice, we recommend creating a custom IAM role that has only the following permissions and assigning it to the Compute Engine default service account:- `compute.instances.start`\n- `compute.instances.stop`\n- Inside Cloud Shell, create a custom role named `Vm_Scheduler` and include the necessary permissions: [Go to Cloud Shell](https://ssh.cloud.google.com/cloudshell/editor) ```\ngcloud iam roles create Vm_Scheduler --project=$projectid \\--title=vm-scheduler-notebooks \\--permissions=\"compute.instances.start,compute.instances.stop\" --stage=ga \n```\n- Describe the custom role:```\ngcloud iam roles describe Vm_Scheduler --project=$projectid\n```\n### Assign the role to the Compute Engine default service accountTo give the Compute Engine default service account permission to start and stop your user-managed notebooks instances, you need to assign the `Vm_Scheduler` custom role to it.\nThe Compute Engine default service account for your project has the following email address: `PROJECT_NUMBER-compute@developer.gserviceaccount.com` , where `PROJECT_NUMBER` is your project number.- Identify your project number and store it in the `project_number` shell variable:```\nproject_number=$(gcloud projects describe $projectid --format 'get(projectNumber)')echo $project_number\n```\n- Assign the custom role to the default service account:```\ngcloud projects add-iam-policy-binding $projectid --member=\"serviceAccount:$project_number-compute@developer.gserviceaccount.com\" --role=\"projects/$projectid/roles/Vm_Scheduler\"\n```\n### Create and attach the scheduleTo create an instance schedule that starts your user-managed notebooks instance at 7 AM and stops them at 6 PM:- Create a start and stop schedule named `optimize-notebooks` :```\ngcloud compute resource-policies create instance-schedule optimize-notebooks \\--region=us-central1 \\--vm-start-schedule='0 7 * * *' \\--vm-stop-schedule='0 18 * * *' \\--timezone=TIME_ZONE\n```Replace with the location-based IANA time zone for this instance schedule, for example, `America/Chicago` . If omitted, the default value `UTC` is used. For more information, see [time zone](/compute/docs/instances/schedule-instance-start-stop#time_zone) .\n- Identify the name of your user-managed notebooks instance by running the following command and noting the `NAME` value that it returns:```\ngcloud compute instances list\n```\n- Store the name in the `notebook_vm` shell variable:```\nnotebook_vm=NOTEBOOK_VM_NAMEecho $notebook_vm\n```Replace with your user-managed notebooks instance name.\n- Attach the instance schedule to your user-managed notebooks instance:```\ngcloud compute instances add-resource-policies $notebook_vm \\\u00a0 --resource-policies=optimize-notebooks \\\u00a0 --zone=us-central1-a\n```\n- Describe the instance schedule:```\ngcloud compute resource-policies describe optimize-notebooks \\\u00a0 --region=us-central1\n```\nYou can verify if the instance schedule runs successfully by checking the [Compute Engine audit logs](/compute/docs/logging/audit-logging) for the instance schedule resource policy and the attached VM instance. You might need to wait for up to 15 minutes after the scheduled time for each operation.## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this tutorial, either [delete the project](/resource-manager/docs/creating-managing-projects#shutting_down_projects) that contains the resources, or keep the project and delete the individual resources.\nYou can delete the individual resources in the project as follows:- In the Google Cloud console, go to the **User-managed notebooks** page. [Go to User-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/user-managed) \n- Select your user-managed notebook instance.\n- Click **Delete** .\n- In the Cloud Shell, delete the remaining individual resources by executing the following commands. [Go to Cloud Shell](https://ssh.cloud.google.com/cloudshell/editor) ```\ngcloud compute routers delete cloud-router-us-central1 --region=us-central1 --quietgcloud compute routers nats delete cloud-nat-us-central1 --region=us-central1 --router=cloud-router-us-central1 --quietgcloud compute instances remove-resource-policies $notebook_vm \\\u00a0 --resource-policies=optimize-notebooks \\\u00a0 --zone=us-central1-a --quietgcloud compute resource-policies delete optimize-notebooks --region=us-central1 --quietgcloud compute instances delete $notebook_vm --zone=us-central1-a --quietgcloud compute networks subnets delete securevertex-subnet-a --region=us-central1 --quiet gcloud iam service-accounts delete user-managed-notebook-sa@$projectid.iam.gserviceaccount.com --quiet gcloud projects remove-iam-policy-binding $projectid --member=\"serviceAccount:$project_number-compute@developer.gserviceaccount.com\" --role=\"projects/$projectid/roles/Vm_Scheduler\"gcloud iam roles delete Vm_Scheduler --project=$projectidgcloud compute networks delete securevertex-vpc --quiet \n```\n## What's next\n- Work through the [Vertex AI create a secure user-managed notebook](https://codelabs.developers.google.com/codelabs/vertex-notebook) codelab.\n- Learn how to [use VPC Service Controls to set up a user-managed notebooksinstance within a service perimeter](/vertex-ai/docs/workbench/user-managed/service-perimeter) .\n- Learn about [Best practices and reference architectures for VPC design](https://cloud.google.com/architecture/best-practices-vpc-design) .\n- Learn more about [Protecting confidential data in Vertex AI Workbench user-managed notebooks](https://cloud.google.com/architecture/protecting-confidential-data-in-ai-platform-notebooks) .", "guide": "Vertex AI"}