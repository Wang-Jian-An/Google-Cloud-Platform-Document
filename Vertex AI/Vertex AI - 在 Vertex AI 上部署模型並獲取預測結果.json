{"title": "Vertex AI - \u5728 Vertex AI \u4e0a\u90e8\u7f72\u6a21\u578b\u4e26\u7372\u53d6\u9810\u6e2c\u7d50\u679c", "url": "https://cloud.google.com/vertex-ai/docs/open-source/ray-on-vertex-ai/deploy-predict?hl=zh-cn", "abstract": "# Vertex AI - \u5728 Vertex AI \u4e0a\u90e8\u7f72\u6a21\u578b\u4e26\u7372\u53d6\u9810\u6e2c\u7d50\u679c\n**    \u9810\u89bd     ** \u672c\u7522\u54c1\u6216\u529f\u80fd\u9808\u9075\u5b88 [\u670d\u52d9\u5c08\u7528\u689d\u6b3e](https://cloud.google.com/terms/service-terms?hl=zh-cn#1) \u7684\u201c\u901a\u7528\u670d\u52d9\u689d\u6b3e\u201d\u90e8\u5206\u4e2d\u7684\u201c\u975e\u6b63\u5f0f\u7248\u7522\u54c1\u689d\u6b3e\u201d\u3002 \u6b63\u5f0f\u767c\u4f48\u524d\u7522\u54c1\u548c\u529f\u80fd\u201c\u6309\u539f\u6a23\u201d\u63d0\u4f9b\uff0c\u53ef\u80fd\u50c5\u63d0\u4f9b\u6709\u9650\u652f\u6301\u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u767c\u4f48\u968e\u6bb5\u8aaa\u660e](https://cloud.google.com/products?hl=zh-cn#product-launch-stages) \u3002\n\u5728 Vertex AI \u4e0a\u7684 Ray \u96c6\u7fa3\u4e2d\u8a13\u7df4\u6a21\u578b\u5f8c\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6d41\u7a0b\u7232\u5728\u7dda\u9810\u6e2c\u8acb\u6c42\u90e8\u7f72\u6a21\u578b\uff1a\n- \u5f9e [Ray \u6aa2\u67e5\u9ede](https://docs.ray.io/en/latest/tune/tutorials/tune-trial-checkpoints.html) \u5c0e\u51fa\u6a21\u578b\u3002\n- \u5c07\u6a21\u578b\u4e0a\u50b3\u5230 [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction?hl=zh-cn) \u3002\n- \u5c07\u6a21\u578b\u90e8\u7f72\u5230\u7aef\u9ede\u3002\n- \u767c\u51fa\u9810\u6e2c\u8acb\u6c42\u3002\n[Ray on Vertex AI \u6982\u89bd](https://cloud.google.com/vertex-ai/docs/open-source/ray-on-vertex-ai/overview?hl=zh-cn)\n[\u8a2d\u7f6e](https://cloud.google.com/vertex-ai/docs/open-source/ray-on-vertex-ai/set-up?hl=zh-cn)\n\u672c\u90e8\u5206\u4e2d\u7684\u6b65\u9a5f\u5047\u5b9a\u60a8\u5728\u4ea4\u4e92\u5f0f Python \u74b0\u5883\u4e2d\u4f7f\u7528 Ray on Vertex AI SDK\u3002\n", "content": "## \u5c0e\u5165\u4e26\u521d\u59cb\u5316 Ray on Vertex AI \u5ba2\u6236\u7aef\n\u5982\u679c\u60a8\u5df2\u9023\u63a5\u5230 Vertex AI \u4e0a\u7684 Ray \u96c6\u7fa3\uff0c\u8acb\u91cd\u5553\u5167\u6838\u4e26\u904b\u884c\u4ee5\u4e0b\u4ee3\u78bc\u3002\u9023\u63a5\u6642\u5fc5\u9808\u63a1\u7528 `runtime_env` \u8b8a\u91cf\u624d\u80fd\u904b\u884c\u5728\u7dda\u9810\u6e2c\u547d\u4ee4\u3002\n```\nimport rayfrom google.cloud import aiplatform# The CLUSTER_RESOURCE_NAME is the one returned from vertex_ray.create_ray_cluster.address = 'vertex_ray://{}'.format(CLUSTER_RESOURCE_NAME)# Initialize Vertex AI to retrieve projects for downstream operations.aiplatform.init(staging_bucket=BUCKET_URI)# Shutdown cluster and reconnect with required dependencies in the runtime_env.ray.shutdown()\n```\n\u5176\u4e2d\uff1a\n- \uff1aRay on Vertex AI \u96c6\u7fa3\u7684\u5b8c\u6574\u8cc7\u6e90\u540d\u7a31\uff0c\u8a72\u540d\u7a31\u5728\u6574\u500b\u9805\u76ee\u4e2d\u5fc5\u9808\u662f\u552f\u4e00\u7684\u3002\n- \u662f\u7528\u65bc\u5b58\u5132\u6a21\u578b\u5de5\u4ef6\u7684 Cloud Storage \u5b58\u5132\u6876\u3002## \u8a13\u7df4\u6a21\u578b\u4e26\u5c07\u5176\u5c0e\u51fa\u5230 Vertex AI Model Registry\n\u5f9e Ray \u6aa2\u67e5\u9ede\u5c0e\u51fa Vertex AI \u6a21\u578b\u4e26\u5c07\u6a21\u578b\u4e0a\u50b3\u5230 Vertex AI Model Registry\u3002\n```\nimport numpy as npfrom ray.air import session, CheckpointConfig, ScalingConfigfrom ray.air.config import RunConfigfrom ray.train.tensorflow import TensorflowCheckpoint, TensorflowTrainerfrom ray.tune.syncer import SyncConfigimport tensorflow as tffrom vertex_ray.predict import tensorflow# Required dependencies at runtimeruntime_env = {\u00a0 \"pip\": [\u00a0 \u00a0 \u00a0 \"ray==2.4.0\", # pin the Ray version to prevent it from being overwritten\u00a0 \u00a0 \u00a0 \"tensorflow\",\u00a0 \u00a0 \u00a0 \"IPython\",\u00a0 \u00a0 \u00a0 \"numpy\",\u00a0 ],}# Initialize \u00a0Ray on Vertex AI client for remote cluster connectionray.init(address=address, runtime_env=runtime_env)# Define a TensorFlow model.def create_model():\u00a0 model = tf.keras.Sequential([tf.keras.layers.Dense(1, activation=\"linear\", input_shape=(4,))])\u00a0 model.compile(optimizer=\"Adam\", loss=\"mean_squared_error\", metrics=[\"mse\"])\u00a0 return modeldef train_func(config):\u00a0 n = 100\u00a0 # Create a fake dataset\u00a0 # data \u00a0 : X - dim = (n, 4)\u00a0 # target : Y - dim = (n, 1)\u00a0 X = np.random.normal(0, 1, size=(n, 4))\u00a0 Y = np.random.uniform(0, 1, size=(n, 1))\u00a0 strategy = tf.distribute.experimental.MultiWorkerMirroredStrategy()\u00a0 with strategy.scope():\u00a0 \u00a0 \u00a0 model = create_model()\u00a0 \u00a0 \u00a0 print(model)\u00a0 for epoch in range(config[\"num_epochs\"]):\u00a0 \u00a0 \u00a0 model.fit(X, Y, batch_size=20)\u00a0 \u00a0 \u00a0 model.save(\"temp/my_model\")\u00a0 \u00a0 \u00a0 checkpoint = TensorflowCheckpoint.from_saved_model(\"temp/my_model\")\u00a0 \u00a0 \u00a0 session.report({}, checkpoint=checkpoint)trainer = TensorflowTrainer(\u00a0 train_func,\u00a0 train_loop_config={\"num_epochs\": 5},\u00a0 scaling_config=ScalingConfig(num_workers=1),\u00a0 run_config=RunConfig(\u00a0 \u00a0 \u00a0 checkpoint_config=CheckpointConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 num_to_keep=1 \u00a0# Keep all checkpoints.\u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 sync_config=SyncConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 upload_dir=f'{BUCKET_URI}/ray_results/tensorflow',\u00a0 \u00a0 \u00a0 ),\u00a0 ),)# Train the model.result = trainer.fit()# Register the trained model to Vertex AI Model Registry.vertex_model = tensorflow.register_tensorflow(\u00a0 result.checkpoint,)\n```\n```\nfrom vertex_ray.predict import sklearnfrom ray.train.sklearn import SklearnCheckpointvertex_model = sklearn.register_sklearn(\u00a0 SklearnCheckpoint.from_checkpoint(result.checkpoint))\n```\n```\nfrom vertex_ray.predict import xgboostfrom ray.train.xgboost import XGBoostCheckpointvertex_model = xgboost.register_xgboost(\u00a0 XGBoostCheckpoint.from_checkpoint(result.checkpoint))\n```\n## \u90e8\u7f72\u6a21\u578b\n\u5c07\u6a21\u578b\u90e8\u7f72\u5230\u5728\u7dda\u7aef\u9ede\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u5c07\u6a21\u578b\u90e8\u7f72\u5230\u7aef\u9ede](https://cloud.google.com/vertex-ai/docs/general/deployment?hl=zh-cn) \u3002\n```\nDEPLOYED_NAME = model.display_name + \"-endpoint\"TRAFFIC_SPLIT = {\"0\": 100}MACHINE_TYPE = \"n1-standard-4\"endpoint = vertex_model.deploy(\u00a0 \u00a0 deployed_model_display_name=DEPLOYED_NAME,\u00a0 \u00a0 traffic_split=TRAFFIC_SPLIT,\u00a0 \u00a0 machine_type=MACHINE_TYPE,)\n```\n\u5176\u4e2d\uff1a\n- \uff08\u53ef\u9078\uff09 \uff1a\u6240\u90e8\u7f72\u6a21\u578b\u7684\u986f\u793a\u540d\u7a31\u3002\u5982\u679c\u5728\u5275\u5efa\u6642\u672a\u63d0\u4f9b\uff0c\u5247\u7cfb\u7d71\u6703\u4f7f\u7528\u6a21\u578b\u7684 `display_name` \u3002\n- \uff08\u53ef\u9078\uff09 \uff1a\u5f9e\u6240\u90e8\u7f72\u6a21\u578b\u7684 ID \u5230\u6b64\u7aef\u9ede\u6d41\u91cf\u4e2d\u61c9\u8f49\u767c\u5230\u6240\u90e8\u7f72\u6a21\u578b\u7684\u767e\u5206\u6bd4\u7684\u6620\u5c04\u3002\u5982\u679c\u6240\u90e8\u7f72\u6a21\u578b\u7684 ID \u672a\u5728\u6b64\u6620\u5c04\u4e2d\u5217\u51fa\uff0c\u5247\u5b83\u4e0d\u6703\u6536\u5230\u6d41\u91cf\u3002\u6d41\u91cf\u767e\u5206\u6bd4\u503c\u7684\u7e3d\u548c\u5fc5\u9808\u7b49\u65bc 100\uff0c\u6216\u8005\u5982\u679c\u7aef\u9ede\u7576\u524d\u4e0d\u63a5\u53d7\u4efb\u4f55\u6d41\u91cf\uff0c\u5247\u6620\u5c04\u5fc5\u9808\u7232\u7a7a\u3002\u6240\u90e8\u7f72\u7684\u6a21\u578b\u7684\u9375\u662f `\"0\"` \u3002\u4f8b\u5982 `{\"0\": 100}` \u3002\n- \uff08\u53ef\u9078\uff09 \uff1a [\u6307\u5b9a\u8a08\u7b97\u8cc7\u6e90](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute?hl=zh-cn#specify) \u3002## \u767c\u51fa\u9810\u6e2c\u8acb\u6c42\n\u5411\u7aef\u9ede\u767c\u9001\u9810\u6e2c\u8acb\u6c42\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u5f9e\u81ea\u5b9a\u7fa9\u8a13\u7df4\u6a21\u578b\u7372\u53d6\u5728\u7dda\u9810\u6e2c\u7d50\u679c](https://cloud.google.com/vertex-ai/docs/predictions/get-online-predictions?hl=zh-cn) \u3002\n```\npred_request = [\u00a0 \u00a0 [ 1.7076793 , 0.23412449, 0.95170785, -0.10901471],\u00a0 \u00a0 [-0.81881499, 0.43874669, -0.25108584, 1.75536031]]endpoint.predict(pred_request)\n```\n\u60a8\u61c9\u8a72\u6703\u5f97\u5230\u5982\u4e0b\u6240\u793a\u7684\u8f38\u51fa\uff1a\n```\nPrediction(predictions=[0.7891440987586975, 0.5843208432197571],\u00a0deployed_model_id='3829557218101952512',\u00a0model_version_id='1',\u00a0model_resource_name='projects/123456789/locations/us-central1/models/123456789101112',\u00a0explanations=None)\n```\n## \u5f8c\u7e8c\u6b65\u9a5f\n- [\u67e5\u770b Vertex AI \u4e0a\u7684 Ray \u96c6\u7fa3\u7684\u65e5\u8a8c](https://cloud.google.com/vertex-ai/docs/open-source/ray-on-vertex-ai/view-logs?hl=zh-cn) \n- [\u522a\u9664 Ray \u96c6\u7fa3](https://cloud.google.com/vertex-ai/docs/open-source/ray-on-vertex-ai/delete-cluster?hl=zh-cn)", "guide": "Vertex AI"}