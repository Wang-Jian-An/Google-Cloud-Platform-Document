{"title": "Vertex AI - Tabular data overview", "url": "https://cloud.google.com/vertex-ai/docs/tabular-data/overview", "abstract": "# Vertex AI - Tabular data overview\nVertex AI lets you perform machine learning with tabular data using simple processes and interfaces. You can create the following model types for your tabular data problems:\n- **Binary classification** models predict a binary outcome (one of two classes). Use this model type for yes or no questions. For example, you might want to build a binary classification model to predict whether a customer would buy a subscription. Generally, a binary classification problem requires less data than other model types.\n- **Multi-class classification** models predict one class from three or more discrete classes. Use this model type for categorization. For example, as a retailer, you might want to build a multi-class classification model to segment customers into different personas.\n- **Regression** models predict a continuous value. For example, as a retailer, you might want to build a regression model to predict how much a customer will spend next month.\n- **Forecasting** models predict a sequence of values. For example, as a retailer, you might want to forecast daily demand of your products for the next 3 months so that you can appropriately stock product inventories in advance.\nFor an introduction to machine learning with tabular data, see [Introduction to Tabular Data](/vertex-ai/docs/tabular-data/tabular101) . For further information about Vertex AI solutions, see [Vertex AI solutions for classification and regression](#classification-regression) and [Vertex AI solutions for forecasting](#forecasting) .\n", "content": "## A note about fairness\nGoogle is committed to making progress in following [responsible AI practices](https://ai.google/responsibilities/responsible-ai-practices/) . To this end, our ML products, including AutoML, are designed around core principles such as [fairness](https://cloud.google.com/inclusive-ml#fairness-in-ml-automl) and [human-centered machine learning](https://medium.com/google-design/human-centered-machine-learning-a770d10562cd) . For more information about best practices for mitigating bias when building your own ML system, see [Inclusive ML guide - AutoML](https://cloud.google.com/inclusive-ml) .\n## Vertex AI solutions for classification and regression\nVertex AI offers the following solutions for classification and regression:\n- [Tabular Workflow for End-to-End AutoML](#workflow-automl) \n- [Tabular Workflow for TabNet](#workflow-tabnet) \n- [Tabular Workflow for Wide & Deep](#workflow-wide-and-deep) \n- [Classification and regression with AutoML](#cr-automl) \n### Tabular Workflow for End-to-End AutoML\nTabular Workflow for End-to-End AutoML is a complete AutoML pipeline for classification and regression tasks. It is similar to the [AutoML API](/vertex-ai/docs/tabular-data/classification-regression/overview) , but allows you to choose what to control and what to automate. Instead of having controls for the pipeline, you have controls for in the pipeline. These pipeline controls include:\n- Data splitting\n- Feature engineering\n- Architecture search\n- Model training\n- Model ensembling\n- Model distillation\n- Supports **large datasets** that are multiple TB in size and have up to 1000 columns.\n- Allows you to **improve stability and lower training time** by limiting the search space of architecture types or skipping architecture search.\n- Allows you to **improve training speed** by manually selecting the hardware used for training and architecture search.\n- Allows you to **reduce model size and improve latency** with distillation or by changing the ensemble size.\n- Each AutoML component can be inspected in a powerful pipelines graph interface that lets you see the transformed data tables, evaluated model architectures, and many more details.\n- Each AutoML component gets extended flexibility and transparency, such as being able to customize parameters, hardware, view process status, logs, and more.To learn more about Tabular Workflows, see [Tabular Workflows on Vertex AI](/vertex-ai/docs/tabular-data/tabular-workflows/overview) . To learn more about Tabular Workflow for End-to-End AutoML, see [Tabular Workflow for End-to-End AutoML](/vertex-ai/docs/tabular-data/tabular-workflows/e2e-automl) .\n### Tabular Workflow for TabNet\n**    Preview     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nTabular Workflow for TabNet is a pipeline that you can use to train classification or regression models. [TabNet](https://arxiv.org/abs/1908.07442) uses [sequential attention](https://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf) to choose which features to reason from at each decision step. This promotes interpretability and more efficient learning because the learning capacity is used for the most salient features.\n- Automatically selects the appropriate hyperparameter search space based on the dataset size, prediction type, and training budget.\n- Integrated with Vertex AI. The trained model is a Vertex AI model. You can run batch predictions or deploy the model for online predictions right away.\n- Provides inherent model interpretability. You can get insight into which features TabNet used to make its decision.\n- Supports GPU training.To learn more about Tabular Workflows, see [Tabular Workflows on Vertex AI](/vertex-ai/docs/tabular-data/tabular-workflows/overview) . To learn more about Tabular Workflow for TabNet, see [Tabular Workflow for TabNet](/vertex-ai/docs/tabular-data/tabular-workflows/tabnet) .\n### Tabular Workflow for Wide & Deep\n**    Preview     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nTabular Workflow for Wide & Deep is a pipeline that you can use to train classification or regression models. [Wide & Deep](https://arxiv.org/abs/1606.07792) jointly trains wide linear models and deep neural networks. It combines the benefits of memorization and generalization. In some online experiments, the results showed that Wide & Deep significantly increased Google store application acquisitions compared with wide-only and deep-only models.\n- Integrated with Vertex AI. The trained model is a Vertex AI model. You can run batch predictions or deploy the model for online predictions right away.To learn more about Tabular Workflows, see [Tabular Workflows on Vertex AI](/vertex-ai/docs/tabular-data/tabular-workflows/overview) . To learn more about Tabular Workflow for Wide & Deep, see [Tabular Workflow for Wide & Deep](/vertex-ai/docs/tabular-data/tabular-workflows/wide-and-deep) .\n### Classification and regression with AutoML\nVertex AI offers integrated, fully managed pipelines for end-to-end classification or regression tasks. Vertex AI searches for the optimal set of hyperparameters, trains multiple models with multiple sets of hyperparameters and then creates a single, final model from an ensemble of the top models. Vertex AI considers [neural networks](https://developers.google.com/machine-learning/glossary#neural_network) and boosted trees for the model types.- Easy to use: model type, model parameters, and hardware are chosen for you.\nFor further information, see [Classification and Regression Overview](/vertex-ai/docs/tabular-data/classification-regression/overview) .\n## Vertex AI solutions for forecasting\nVertex AI offers the following solutions for forecasting:\n- [Tabular Workflow for Forecasting](#workflow-forecasting) \n- [Forecasting with AutoML](#f-automl) \n- [Forecasting with BigQuery ML ARIMA_PLUS](#arima) \n- [Forecasting with Prophet](#prophet) \n### Tabular Workflow for Forecasting\n**    Preview     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nTabular Workflow for Forecasting is the complete pipeline for forecasting tasks. It is similar to the [AutoML API](/vertex-ai/docs/tabular-data/forecasting/overview) , but allows you to choose what to control and what to automate. Instead of having controls for the pipeline, you have controls for in the pipeline. These pipeline controls include:\n- Data splitting\n- Feature engineering\n- Architecture search\n- Model training\n- Model ensembling\n- Supports **large datasets** that are up to 1TB in size and have up to 200 columns.\n- Allows you to **improve stability and lower training time** by limiting the search space of architecture types or skipping architecture search.\n- Allows you to **improve training speed** by manually selecting the hardware used for training and architecture search.\n- For some model training methods, allows you to **reduce model size and improve latency** by changing the ensemble size.\n- Each component can be inspected in a powerful pipelines graph interface that lets you see the transformed data tables, evaluated model architectures and many more details.\n- Each component gets extended flexibility and transparency, such as being able to customize parameters, hardware, view process status, logs and more.To learn more about Tabular Workflows, see [Tabular Workflows on Vertex AI](/vertex-ai/docs/tabular-data/tabular-workflows/overview) . To learn more about Tabular Workflow for Forecasting, see [Tabular Workflow for Forecasting](/vertex-ai/docs/tabular-data/tabular-workflows/forecasting) .\n### Forecasting with AutoML\nVertex AI offers an integrated, fully managed pipeline for end-to-end forecasting tasks. Vertex AI searches for the optimal set of hyperparameters, trains multiple models with multiple sets of hyperparameters, and then creates a single, final model from an ensemble of the top models. You can choose between [Time series Dense Encoder (TiDE)](https://arxiv.org/abs/2304.08424) , [Temporal Fusion Transformer (TFT)](https://ai.googleblog.com/2021/12/interpretable-deep-learning-for-time.html) , [AutoML (L2L)](https://ai.googleblog.com/2020/12/using-automl-for-time-series-forecasting.html) , and Seq2Seq+ for your model training method. Vertex AI considers only [neural networks](https://developers.google.com/machine-learning/glossary#neural_network) for the model type.- Easy to use: model parameters and hardware are chosen for you.\nFor further information, see [Forecasting Overview](/vertex-ai/docs/tabular-data/forecasting/overview) .\n### Forecasting with BigQuery ML ARIMA_PLUS\n[BigQuery ML ARIMA_PLUS](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create-time-series) is a univariate forecasting model. As a statistical model, it is faster to train than a [model based on neural networks](/vertex-ai/docs/tabular-data/forecasting/overview) . We recommend training a BigQuery ML ARIMA_PLUS model if you need to perform many quick iterations of model training or if you need an inexpensive baseline to measure other models against.\nLike [Prophet](/vertex-ai/docs/tabular-data/forecasting-prophet) , BigQuery ML ARIMA_PLUS attempts to decompose each time series into trends, seasons, and holidays, producing a forecast using the aggregation of these models' predictions. One of the many differences, however, is that BQML ARIMA+ uses ARIMA to model the trend component, while Prophet attempts to fit a curve using a piecewise logistic or linear model.\nGoogle Cloud offers a pipeline for training a BigQuery ML ARIMA_PLUS model and a pipeline for getting batch predictions from a BigQuery ML ARIMA_PLUS model. Both pipelines are instances of [Vertex AI Pipelines](/vertex-ai/docs/pipelines/introduction) from [Google Cloud Pipeline Components](/vertex-ai/docs/pipelines/components-introduction) (GCPC).- Easy to use: model parameters and hardware are chosen for you.\n- Fast: model training gives a low-cost baseline to compare other models against.\nFor further information, see [Forecasting with ARIMA+](/vertex-ai/docs/tabular-data/forecasting-arima/overview) .\n### Forecasting with Prophet\nProphet is a forecasting model maintained by Meta. See the [Prophet paper](https://peerj.com/preprints/3190/) for algorithm details and the [documentation](https://facebook.github.io/prophet/docs/quick_start.html) for more information about the library.\nLike [BigQuery ML ARIMA_PLUS](/vertex-ai/docs/tabular-data/forecasting-arima/overview) , Prophet attempts to decompose each time series into trends, seasons, and holidays, producing a forecast using the aggregation of these models' predictions. An important difference, however, is that BQML ARIMA+ uses ARIMA to model the trend component, while Prophet attempts to fit a curve using a piecewise logistic or linear model.\nGoogle Cloud offers a pipeline for training a Prophet model and a pipeline for getting batch predictions from a Prophet model. Both pipelines are instances of [Vertex AI Pipelines](/vertex-ai/docs/pipelines/introduction) from [Google Cloud Pipeline Components](/vertex-ai/docs/pipelines/components-introduction) (GCPC).\nIntegration of Prophet with Vertex AI means that you can do the following:\n- Use Vertex AI [data splitting](/vertex-ai/docs/tabular-data/forecasting/prepare-data#split) and [windowing strategies](/vertex-ai/docs/tabular-data/forecasting/train-model#forecast-window) .\n- Read data from either BigQuery tables or CSVs stored in Cloud Storage. Vertex AI expects each row to have the same format as [Vertex AI Forecasting](/vertex-ai/docs/tabular-data/forecasting/prepare-data) .\nAlthough Prophet is a multivariate model, Vertex AI supports only a univariate version of it.- Flexible: you can improve training speed by selecting the hardware used for training\nFor further information, see [Forecasting with Prophet](/vertex-ai/docs/tabular-data/forecasting-prophet) .\n## What's next\n- Learn about [machine learning with tabular data](/vertex-ai/docs/tabular-data/tabular101) .\n- Learn about [classification and regression with AutoML](/vertex-ai/docs/tabular-data/classification-regression/overview) .\n- Learn about [forecasting with AutoML](/vertex-ai/docs/tabular-data/forecasting/overview) .\n- Learn about [forecasting with Prophet](/vertex-ai/docs/tabular-data/forecasting-prophet) .\n- Learn about [forecasting with BigQuery ML ARIMA_PLUS](/vertex-ai/docs/tabular-data/forecasting-arima/overview) .\n- Learn about [Tabular Workflows](/vertex-ai/docs/tabular-data/tabular-workflows/overview) .", "guide": "Vertex AI"}