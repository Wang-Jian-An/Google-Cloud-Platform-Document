{"title": "Vertex AI - Configure secrets with Secret Manager", "url": "https://cloud.google.com/vertex-ai/docs/pipelines/secret-manager", "abstract": "# Vertex AI - Configure secrets with Secret Manager\nYou can use Secret Manager's Python client with Vertex AI Pipelines to access secrets stored on Secret Manager.\n#", "content": "## Create a secret using Google Cloud console\n- [Enable the Secret Manager API](http://console.cloud.google.com/apis/library/secretmanager.googleapis.com) in Google Cloud console.\n- Go to the **Secret Manager** page in the Cloud console. [Go to the Secret Manager page](https://console.cloud.google.com/security/secret-manager) \n- On the Secret Manager page, click **Create Secret** .\n- On the **Create secret** page, under Name, enter a name for the secret (for example `universe-secret).\n- To add a secret version when creating the initial secret, in the **Secret value** field, enter a value for the secret (for example `42` ).\n- Choose your region.\n- Click the **Create secret** button.\n### Build and run a pipeline with Python function based components\nThe following is a sample component that prints out the previously created secret.\n- Grant the service account that runs the pipeline with secrete manager permission. See the \"Configure a service account with granular permissions\" section of [Configure your Google Cloud project for Vertex AI Pipelines](/vertex-ai/docs/pipelines/configure-project#service-account) for more information.\n- Using Kubeflow Pipelines SDK, build a simple pipeline with one task.```\n\u00a0from kfp import compiler\u00a0from kfp import dsl\u00a0# A simple component that prints a secret stored in Secret Manager\u00a0# Be sure to specify \"google-cloud-secret-manager\" as one of packages_to_install\u00a0@dsl.component(\u00a0 \u00a0 \u00a0packages_to_install=['google-cloud-secret-manager']\u00a0)\u00a0def print_secret_op(project_id: str, secret_id: str, version_id: str) -> str:\u00a0 \u00a0 \u00a0from google.cloud import secretmanager\u00a0 \u00a0 \u00a0secret_client = secretmanager.SecretManagerServiceClient()\u00a0 \u00a0 \u00a0secret_name = f'projects/{project_id}/secrets/{secret_id}/versions/{version_id}'\u00a0 \u00a0 \u00a0response = secret_client.access_secret_version(request={\"name\": secret_name})\u00a0 \u00a0 \u00a0payload = response.payload.data.decode(\"UTF-8\")\u00a0 \u00a0 \u00a0answer = \"The secret is: {}\".format(payload)\u00a0 \u00a0 \u00a0print(answer)\u00a0 \u00a0 \u00a0return answer\u00a0# A simple pipeline that contains a single print_secret task\u00a0@dsl.pipeline(\u00a0 \u00a0 \u00a0name='secret-manager-demo-pipeline')\u00a0def secret_manager_demo_pipeline(project_id: str, secret_id: str, version_id: str):\u00a0 \u00a0 \u00a0print_secret_task = print_secret_op(project_id, secret_id, version_id)\u00a0# Compile the pipeline\u00a0compiler.Compiler().compile(pipeline_func=secret_manager_demo_pipeline,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0package_path='secret_manager_demo_pipeline.yaml')\n```\n- Run the pipeline using the Vertex AI SDK.```\n\u00a0from google.cloud import aiplatform\u00a0parameter_values = {\u00a0 \u00a0 \u00a0\"project_id\": PROJECT_ID,\u00a0 \u00a0 \u00a0\"secret_id\": SECRET_ID,\u00a0 \u00a0 \u00a0\"version_id\": VERSION_ID\u00a0}\u00a0aiplatform.init(\u00a0 \u00a0 \u00a0project=PROJECT_ID,\u00a0 \u00a0 \u00a0location=REGION,\u00a0)\u00a0job = aiplatform.PipelineJob(\u00a0 \u00a0 \u00a0display_name=f'test-secret-manager-pipeline',\u00a0 \u00a0 \u00a0template_path='secret_manager_demo_pipeline.yaml',\u00a0 \u00a0 \u00a0pipeline_root=PIPELINE_ROOT,\u00a0 \u00a0 \u00a0enable_caching=False,\u00a0 \u00a0 \u00a0parameter_values=parameter_values\u00a0)\u00a0job.submit(\u00a0 \u00a0 \u00a0service_account=SERVICE_ACCOUNT\u00a0)\n```Replace the following:- : The Google Cloud project that this pipeline runs in.\n- : The secret id created in previous steps (for example`universe-secret`).\n- : The version name of the secret.\n- : The region that this pipeline runs in.\n- : Specify a Cloud Storage URI that your pipelines service account can access. The artifacts of your pipeline runs are stored within the pipeline root.\n- : The email address of the service account you created with Secret Manager Accessor permission.In the output of the `job.submit()` function, you should be able to click the link that brings you to view the pipeline execution in the Google Cloud console.", "guide": "Vertex AI"}