{"title": "Vertex AI - Data classes", "url": "https://cloud.google.com/vertex-ai/docs/python-sdk/data-classes", "abstract": "# Vertex AI - Data classes\nThe Vertex AI SDK includes classes that store and read data used to train a model. Each data-related class represents a Vertex AI managed dataset that has structured data, unstructured data, or Vertex AI Feature Store data. After you create a dataset, you use it to train your model.\nThe following topics provide brief explanations of each data-related class in the Vertex AI SDK. The topic for each class includes a code example that shows how to create an instance of that class. After you create a dataset, you can use its ID to retrieve it:\n```\ndataset = aiplatform.ImageDataset('projects/my-project/location/my-region/datasets/{DATASET_ID}')\n```\n", "content": "## Structured data classes\nThe following classes work with structured data, which is organized in rows and columns. Structured data is often used to store numbers, dates, values, and strings.\n### TabularDataset\nUse this class to work with tabular datasets. You can use a CSV file, BigQuery, or a pandas [DataFrame](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html) to create a tabular dataset. For more information about paging through BigQuery data, see [Read data with BigQuery API using pagination](/bigquery/docs/paging-results) . For more information about tabular data, see [Tabular data](/vertex-ai/docs/training-overview#tabular_data) .\nThe following code shows you how to create a tabular dataset by importing a CSV file.\n```\nmy_dataset = aiplatform.TabularDataset.create(\u00a0 \u00a0 display_name=\"my-dataset\", gcs_source=['gs://path/to/my/dataset.csv'])\n```\nThe following code shows you how to create a tabular dataset by importing a CSV file in two distinct steps.\n```\nmy_dataset = aiplatform.TextDataset.create(\u00a0 \u00a0 display_name=\"my-dataset\")my_dataset.import(\u00a0 \u00a0 gcs_source=['gs://path/to/my/dataset.csv']\u00a0 \u00a0 import_schema_uri=aiplatform.schema.dataset.ioformat.text.multi_label_classification)\n```\nIf you create a tabular dataset with a pandas [DataFrame](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html) , you need to use a BigQuery table to stage the data for Vertex AI:\n```\nmy_dataset = aiplatform.TabularDataset.create_from_dataframe(\u00a0 \u00a0 df_source=my_pandas_dataframe,\u00a0 \u00a0 staging_path=f\"bq://{bq_dataset_id}.table-unique\")\n```\n### TimeSeriesDataset\nUse this class to work with time series datasets. A time series is a dataset that contains data recorded at different time intervals. The dataset includes time and at least one variable that's dependent on time. You use a time series dataset for forecasting predictions. For more information, see [Forecasting overview](/vertex-ai/docs/tabular-data/forecasting/overview) .\nYou can create a managed time series dataset from CSV files in a Cloud Storage bucket or from a BigQuery table.\nThe following code shows you how to create a `TimeSeriesDataset` by importing a CSV data source file that has the time series dataset:\n```\nmy_dataset = aiplatform.TimeSeriesDataset.create(\u00a0 \u00a0 display_name=\"my-dataset\", gcs_source=['gs://path/to/my/dataset.csv'])\n```\nThe following code shows you how to create a `TimeSeriesDataset` by importing a BigQuery table file that has the time series dataset:\n```\nmy_dataset = aiplatform.TimeSeriesDataset.create(\u00a0 \u00a0 display_name=\"my-dataset\", bq_source=['bq://path/to/my/bigquerydataset.train'])\n```\n## Unstructured data classes\nThe following classes work with unstructured data, which can't be stored in a traditional relational database. It's often stored as audio, text, video files, or as a NoSQL database.\n### ImageDataset\nUse this class to work with a managed image dataset. To create a managed image dataset, you need a data source file in CSV format and a schema file in YAML format. A schema is optional for a custom model. The CSV file and the schema are accessed in Cloud Storage buckets.\nUse image data for the following objectives:\n- Single-label classification. For more information, see [Prepare image training data for single-label classification](/vertex-ai/docs/image-data/classification/prepare-data#single-label-classification) .\n- Multi-label classification. For more information, see [Prepare image training data for multi-label classification](/vertex-ai/docs/image-data/classification/prepare-data#multi-label-classification) .\n- Object detection. For more information, see [Prepare image training data for object detection](/vertex-ai/docs/image-data/object-detection/prepare-data) .\nThe following code shows you how to create image dataset by importing a CSV data source file and a YAML schema file. The schema file you use depends on whether your image dataset is used for single-label classification, multi-label classification, or object detection.\n```\nmy_dataset = aiplatform.ImageDataset.create(\u00a0 \u00a0 display_name=\"my-image-dataset\",\u00a0 \u00a0 gcs_source=['gs://path/to/my/image-dataset.csv'],\u00a0 \u00a0 import_schema_uri=['gs://path/to/my/schema.yaml']\u00a0 \u00a0 )\n```\n### TextDataset\nUse this class to work with a managed text dataset. To create a text dataset, you need a data source in CSV format and a schema in YAML format. A schema is optional for a custom model. The CSV file and the schema are accessed in Cloud Storage buckets.\nUse text data for the following objectives:\n- Classification. For more information, see [Prepare text training data for classification](/vertex-ai/docs/text-data/classification/prepare-data) .\n- Entity extraction. For more information, see [Prepare text training data for entity extraction](/vertex-ai/docs/text-data/entity-extraction/prepare-data) .\n- Sentiment analysis. For more information, see [Prepare text training data for sentiment analysis](/vertex-ai/docs/text-data/sentiment-analysis/prepare-data) .\nThe following code shows you how to create a text dataset by importing a CSV data source file and a YAML schema file. The schema file you use depends on whether your text dataset is used for classification, entity extraction, or sentiment analysis.\n```\nmy_dataset = aiplatform.TextDataset.create(\u00a0 \u00a0 display_name=\"my-image-dataset\",\u00a0 \u00a0 gcs_source=['gs://path/to/my/text-dataset.csv'],\u00a0 \u00a0 import_schema_uri=['gs://path/to/my/schema.yaml']\u00a0 \u00a0 )\n```\n### VideoDataset\nUse this class to work with a managed video dataset. To create a video dataset, you need a CSV data source file and a schema in YAML format. The CSV file and the schema are accessed in Cloud Storage buckets.\nUse video data for the following objectives:\n- Classification. For more information, see [Classification schema files](/vertex-ai/docs/video-data/classification/prepare-data#schema_files) .\n- Action recognition. For more information, see [Action recognition schema files](/vertex-ai/docs/video-data/action-recognition/prepare-data#schema_files) .\n- Object tracking. For more information, see [Object tracking schema files](/vertex-ai/docs/video-data/object-tracking/prepare-data#schema_files) .\nThe following code shows you how to create a dataset to train a video classification model by importing a CSV data source file. The schema file you use depends on whether you use your video dataset for action classification, recognition, or object tracking.\n```\nmy_dataset = aiplatform.VideoDataset.create(\u00a0 \u00a0 gcs_source=['gs://path/to/my/dataset.csv'],\u00a0 \u00a0 import_schema_uri=['gs://aip.schema.dataset.ioformat.video.classification.yaml'])\n```\n## Vertex AI Feature Store data classes\nVertex AI Feature Store is a managed service used to store, serve, manage, and share ML features at scale.\nVertex AI Feature Store uses a time series data model composed of three classes that maintain features as they change over time. The three classes are organized in the following hierarchical order:\nFor more information about the Vertex AI Feature Store data model, see [Data model and resources](/vertex-ai/docs/featurestore/concepts) . To learn about Vertex AI Feature Store data source requirements, see [Source datarequirements](/vertex-ai/docs/featurestore/source-data) .\nThe following classes are used with Vertex AI Feature Store data:\n### Featurestore\nThe featurestore resource, represented by the [Featurestore](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Featurestore) class, is the top-level class in the Vertex AI Feature Store data model hierarchy. The next level resource in the data model is entity type, which is a collection of semantically related features that you create. The following are some of the [Featurestore](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Featurestore) methods that work with entity types:\nUse the [Featurestore](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Featurestore) . [create_entity_type](/python/docs/reference/aiplatform/latest/google.cloud.aiplatformFeaturestore#google_cloud_aiplatform_Featurestore_create_entity_type) method with an `entity_type_id` to create an entity type resource. An entity type resource is represented by the `EntityType` class. The `entity_type_id` is alphanumeric and must be unique in a featurestore. The following is an example of how you can create an entity type:\n```\nentity_type = aiplatform.featurestore.create_entity_type(\u00a0 \u00a0 \u00a0 \u00a0 entity_type_id=my_entity_type_name, description=my_entity_type_description\u00a0 \u00a0 \u00a0 \u00a0 )\n```\nUse one of three [Featurestore](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Featurestore) methods to serve entity data items:\n- [batch_serve_to_bq](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Featurestore#google_cloud_aiplatform_Featurestore_batch_serve_to_bq) serves data to a BigQuery table.\n- [batch_serve_to_df](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Featurestore#google_cloud_aiplatform_Featurestore_batch_serve_to_df) serves data to a pandas [DataFrame](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html) .\n- [batch_serve_to_gcs](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Featurestore#google_cloud_aiplatform_Featurestore_batch_serve_to_gcs) serves data to a CSV file or a TensorFlow [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord#tfrecords_format_details) file.\n### EntityType\nThe [EntityType](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.EntityType) class represents an entity type resource, which is a collection of semantically related features that you define. For example, a music service might have the entity types `musical_artist` and `user` . You can use use the [FeatureStore.create_entity_type](#feature-store-create-entity-type) method or the [EntityType.create](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.EntityType#google_cloud_aiplatform_EntityType_create) method to create an entity type. The following code shows how to use [EntityType.create](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.EntityType#google_cloud_aiplatform_EntityType_create) :\n```\nentity_type = aiplatform.EntityType.create(\u00a0 \u00a0 \u00a0 \u00a0 entity_type_id=my_entity_type_name, featurestore_name=featurestore_name\u00a0 \u00a0 )\n```\n### Feature\nThe [Feature](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Feature) class represents a feature resource which is a measurable property or attribute of an entity type. For example, the `musical_artist` entity type might have features, such as `date_of_birth` and `last_name` , to track various properties of musical artists. Features must be unique to an entity type, but don't need to be globally unique.\nWhen you create a [Feature](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Feature) , you must specify its value type (for example, `BOOL_ARRAY` , `DOUBLE` , `DOUBLE_ARRAY` , or `STRING` ). The following code shows an example of how to to create a feature:\n```\nmy_feature = aiplatform.Feature.create(\u00a0 \u00a0 feature_id='my_feature_id',\u00a0 \u00a0 value_type='INT64',\u00a0 \u00a0 entity_type_name='my_entity_type_id',\u00a0 \u00a0 featurestore_id='my_featurestore_id',)\n```\n## What's next\n- Learn about the [Vertex AI SDK](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) .", "guide": "Vertex AI"}