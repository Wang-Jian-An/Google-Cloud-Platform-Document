{"title": "Vertex AI - Model classes", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Model classes\nThe Vertex AI SDK includes the [Model](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Model) class to work with a model that you train and then use for predictions. The SDK also includes the [ModelEvaluation](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.ModelEvaluation) class to evaluate metrics on trained AutoML models. For more information about models, see [Trainand use your own models](/vertex-ai/docs/training-overview) .\n#", "content": "## Model\nThe [Model](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Model) class represents a trained model that is registered in the Vertex AI Model Registry. You use a trained model to generate predictions.\nUse the [aiplatform.Model()](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Model#parameters) method to find and return a reference to a model. You can specify a model using its name or ID. Because more than one model in a project can share the same name, we recommend specifying a model with its model ID. The following code sample shows how to use a model ID to find and return a reference to an existing model:\n```\nMODEL_ID=\"my-sample-model-ID\"model = aiplatform.Model(model_name=MODEL_ID)\n```\nAfter you have a reference to a trained model, you can use the [properties](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Model#properties) and [methods](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Model#methods) of the [Model](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Model) to work with it and get predictions.\nTo create a model resource that's registered in the Vertex AI Model Registry, call the `run` method on a training job class. The following methods create a model, train the model, register the model in the Vertex AI Model Registry, then return a reference to the model.\n- [AutoMLForecastingTrainingJob.run](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.AutoMLForecastingTrainingJob#google_cloud_aiplatform_AutoMLForecastingTrainingJob_run) \n- [AutoMLImageTrainingJob.run](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.AutoMLImageTrainingJob#google_cloud_aiplatform_AutoMLImageTrainingJob_run) \n- [AutoMLTabularTrainingJob.run](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.AutoMLTabularTrainingJob#google_cloud_aiplatform_AutoMLTabularTrainingJob_run) \n- [AutoMLTextTrainingJob.run](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.AutoMLTextTrainingJob#google_cloud_aiplatform_AutoMLTextTrainingJob_run) \n- [AutoMLVideoTrainingJob.run](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.AutoMLVideoTrainingJob#google_cloud_aiplatform_AutoMLVideoTrainingJob_run) \n- [CustomContainerTrainingJob.run](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.CustomContainerTrainingJob#google_cloud_aiplatform_CustomContainerTrainingJob_run) \n- [CustomPythonPackageTrainingJob.run](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.CustomPythonPackageTrainingJob#google_cloud_aiplatform_CustomPythonPackageTrainingJob_run) \n- [CustomTrainingJob.run](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.CustomTrainingJob#google_cloud_aiplatform_CustomTrainingJob_run) \nThe following sample code shows you how to create a `CustomTrainingJob` resource and then use its `run` method to create a model, train the model, register the model in the Vertex AI Model Registry, and return a reference to the model:\n```\n# Create a custom training job using a scriptjob = aiplatform.CustomTrainingJob(\u00a0 \u00a0 display_name=\"my-training-job\",\u00a0 \u00a0 script_path=\"task.py\",\u00a0 \u00a0 container_uri=\"us-docker.pkg.dev/vertex-ai/training/tf-cpu.2-8:latest\",\u00a0 \u00a0 requirements=[\"google-cloud-bigquery>=2.20.0\", \"db-dtypes\", \"protobuf<3.20.0\"],\u00a0 \u00a0 model_serving_container_image_uri=\"us-docker.pkg.dev/vertex-ai/prediction/tf2-cpu.2-8:latest\",)# Create and train your model using a BigQuery dataset. The method# returns a reference to the trained model.model = job.run(\u00a0 \u00a0 dataset=dataset,\u00a0 \u00a0 model_display_name=\"my-model-name\",\u00a0 \u00a0 bigquery_destination=f\"bq://{project_id}\",\u00a0 \u00a0 args=CMDARGS,)\n```\nTo create a model that's not registered to the Vertex AI Model Registry, use the [CustomJob](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.CustomJob) class and its `run` method. The [CustomJob.run](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.CustomJob#google_cloud_aiplatform_CustomJob_run) method trains a model, but it doesn't register the model in the Vertex AI Model Registry and it doesn't return a reference to the model.\nIf you use the `CustomJob` class, you need to use a script to write your model to a location such as a Cloud Storage bucket. For more information, see [Export a trained ML model](/vertex-ai/docs/training/code-requirements#export) .\nIf you have a model that isn't registered with the Vertex AI Model Registry, then you need to register it so you can manage your model's lifecycle. Vertex AI Model Registry is a central repository that provides an overview of your models so you can manage them. For more information, see [Introduction to Vertex AI Model Registry](/vertex-ai/docs/model-registry/introduction) .\nThe Vertex AI SDK includes the following methods to import a model to the Vertex AI Model Registry. Click one of the methods to learn more about it in the Vertex AI SDK reference guide.\n- [Model.upload](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Model#google_cloud_aiplatform_Model_upload) \n- [Model.upload_scikit_learn_model_file](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Model#google_cloud_aiplatform_Model_upload_scikit_learn_model_file) \n- [Model.upload_tensorflow_saved_model](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Model#google_cloud_aiplatform_Model_upload_tensorflow_saved_model) \n- [Model.upload_xgboost_model_file](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Model#google_cloud_aiplatform_Model_upload_xgboost_model_file) After you register a model, you need to deploy the model to an endpoint before you can use it for predictions. Use the [Model.deploy](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.Model#google_cloud_aiplatform_Model_deploy) method to deploy your model to an [Endpoint](/vertex-ai/docs/python-sdk/prediction-classes#endpoint) . For more information, see [Deploy a model to an endpoint](/vertex-ai/docs/general/deployment) .\n### ModelEvaluation\nUse the [ModelEvaluation](/python/docs/reference/aiplatform/latest/google.cloud.aiplatform.ModelEvaluation) class to get evaluation metrics for AutoML models, such as precision and recall, to help determine the performance of your models. For more information, see [Modelevaluation in Vertex AI](/vertex-ai/docs/evaluation/introduction) .\nThe following code sample shows how to list all evaluations for a model with model ID `model-id` that's in a project with a project ID of `my-project` and that's in the `us-central1` region:\n```\nmodel = aiplatform.Model('projects/my-project/locations/us-central1/models/{model-id}')evaluations = model.list_model_evaluations()\n```\nThe following code sample shows how to get the model evaluation for a model with model ID `model-id` that's in a project with a project ID of `my-project` and that's in the `us-central1` region:\n```\nmodel = aiplatform.Model('projects/my-project/locations/us-central1/models/{model-id}')# Return the first evaluation with no arguments. You can also specify a model# using its model ID.evaluation = model.get_model_evaluation()eval_metrics = evaluation.metrics\n```\nTo create a reference to a model evaluation, use its resource name or model ID and the evaluation ID. The following code sample shows how to create a reference to a model evaluation using its resource name:\n```\nevaluation = aiplatform.ModelEvaluation(\u00a0 evaluation_name='projects/my-project/locations/us-central1/\u00a0 \u00a0 models/{model-id}/evaluations/{evaluation-id}')eval_metrics = evaluation.metrics\n```\nThe following code sample shows how to create a reference to a model evaluation using the model ID and the evaluation ID:\n```\nevaluation.metrics = aiplatform.ModelEvaluation(\u00a0 evaluation_name={evaluation-id},\u00a0 model_id={model-id})eval_metrics = evaluation.metrics\n```\n## What's next\n- Learn about the [Vertex AI SDK](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) .", "guide": "Vertex AI"}