{"title": "Vertex AI - \u8a13\u7df4\u6587\u672c\u5206\u985e\u6a21\u578b", "url": "https://cloud.google.com/vertex-ai/docs/text-data/classification/train-model?hl=zh-cn", "abstract": "# Vertex AI - \u8a13\u7df4\u6587\u672c\u5206\u985e\u6a21\u578b\n\u672c\u9801\u9762\u4ecb\u7d39\u77ad\u5982\u4f55\u4f7f\u7528 Google Cloud \u63a7\u5236\u6aaf\u6216 Vertex AI API \u6839\u64da\u6587\u672c\u6578\u64da\u96c6\u8a13\u7df4 AutoML \u5206\u985e\u6a21\u578b\u3002\n", "content": "## \u8a13\u7df4 AutoML \u6a21\u578b\n- \u5728 Google Cloud \u63a7\u5236\u6aaf\u7684 Vertex AI \u90e8\u5206\u4e2d\uff0c\u524d\u5f80 **\u6578\u64da\u96c6** \u9801\u9762\u3002 [\u8f49\u5230\u201c\u6578\u64da\u96c6\u201d\u9801\u9762](https://console.cloud.google.com/vertex-ai/datasets?hl=zh-cn) \n- \u9ede\u64ca\u8981\u7528\u65bc\u8a13\u7df4\u6a21\u578b\u7684\u6578\u64da\u96c6\u7684\u540d\u7a31\uff0c\u4ee5\u6253\u958b\u5176\u8a73\u60c5\u9801\u9762\u3002\n- \u9ede\u64ca **\u8a13\u7df4\u65b0\u6a21\u578b** \u3002 **\u6ce8\u610f** \uff1a\u60a8\u53ef\u4ee5\u5728\u700f\u89bd\u5668\u4e2d\u8f38\u5165 [model.new](https://model.new) \uff0c\u4ee5\u76f4\u63a5\u524d\u5f80\u6a21\u578b\u5275\u5efa\u9801\u9762\u3002\n- \u8a13\u7df4\u65b9\u6cd5\u9078\u64c7 radio_button_checked **AutoML** \u3002\n- \u9ede\u64ca **\u7e7c\u7e8c** \u3002\n- \u8f38\u5165\u6a21\u578b\u7684\u540d\u7a31\u3002\n- \u5982\u679c\u60a8\u8981\u624b\u52d5\u8a2d\u7f6e\u8a13\u7df4\u6578\u64da\u7684\u62c6\u5206\u65b9\u5f0f\uff0c\u8acb\u5c55\u958b **\u9ad8\u7d1a\u9078\u9805** \uff0c\u7136\u5f8c\u9078\u64c7\u6578\u64da\u62c6\u5206\u9078\u9805\u3002 [\u77ad\u89e3\u8a73\u60c5](https://cloud.google.com/vertex-ai/docs/general/ml-use?hl=zh-cn) \u3002\n- \u9ede\u64ca **\u958b\u59cb\u8a13\u7df4** \u3002\u6a21\u578b\u8a13\u7df4\u53ef\u80fd\u9700\u8981\u5e7e\u500b\u5c0f\u6642\uff0c\u5177\u9ad4\u53d6\u6c7a\u65bc\u6578\u64da\u7684\u5927\u5c0f\u548c\u8907\u96dc\u6027\uff0c\u4ee5\u53ca\u8a13\u7df4\u9810\u7b97\uff08\u5982\u679c\u6307\u5b9a\uff09\u3002\u60a8\u53ef\u4ee5\u95dc\u9589\u6b64\u6a19\u7c64\u9801\uff0c\u7a0d\u5f8c\u518d\u8fd4\u56de\u3002\u6a21\u578b\u5b8c\u6210\u8a13\u7df4\u5f8c\uff0c\u60a8\u6703\u6536\u5230\u96fb\u5b50\u90f5\u4ef6\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u5728\u4ee5\u4e0b\u67d0\u500b\u74b0\u5883\u4e2d\u904b\u884c\u201c\u5275\u5efa\u3001\u8a13\u7df4\u548c\u90e8\u7f72 AutoML \u6587\u672c\u5206\u985e\u6a21\u578b\u201dJupyter \u7b46\u8a18\u672c\uff1a [\u5728 Colab \u4e2d\u904b\u884c](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/automl/automl-text-classification.ipynb?hl=zh-cn) | [\u5728 Vertex AI Workbench \u7528\u6236\u7ba1\u7406\u7684\u7b46\u8a18\u672c\u4e2d\u6253\u958b](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fautoml%2Fautoml-text-classification.ipynb&hl=zh-cn) | [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/automl/automl-text-classification.ipynb) \n\u9078\u64c7\u8a9e\u8a00\u6216\u74b0\u5883\u6a19\u7c64\u9801\uff1a\u5275\u5efa\u4e00\u500b `TrainingPipeline` \u5c0d\u8c61\u4f86\u8a13\u7df4\u6a21\u578b\u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- \uff1a\u5c07\u5728\u5176\u4e2d\u5275\u5efa\u6a21\u578b\u7684\u5340\u57df\uff0c\u4f8b\u5982`us-central1`\n- \uff1a\u60a8\u7684 [\u9805\u76ee ID](https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=zh-cn#identifiers) \n- \uff1a\u5728\u754c\u9762\u4e2d\u986f\u793a\u7684\u6a21\u578b\u540d\u7a31\n- \uff1a\u4e00\u500b\u5e03\u723e\u503c\uff0c\u6307\u793a Vertex AI \u662f\u5426\u8a13\u7df4\u591a\u6a19\u7c64\u6a21\u578b\uff1b\u9ed8\u8a8d\u503c\u7232`false`\uff08\u55ae\u6a19\u7c64\u6a21\u578b\uff09\n- \uff1a\u6578\u64da\u96c6\u7684 ID\n- \uff1a\u81ea\u52d5\u751f\u6210\u7684 [\u9805\u76ee\u7de8\u865f](https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=zh-cn#identifiers) \nHTTP \u65b9\u6cd5\u548c\u7db2\u5740\uff1a\n```\nPOST https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT/locations/LOCATION/trainingPipelines\n```\n\u8acb\u6c42 JSON \u6b63\u6587\uff1a\n```\n{\n \"displayName\": \"MODEL_DISPLAY_NAME\",\n \"trainingTaskDefinition\": \"gs://google-cloud-aiplatform/schema/trainingjob/definition/automl_text_classification_1.0.0.yaml\",\n \"trainingTaskInputs\": {\n \"multiLabel\": MULTI-LABEL\n },\n \"modelToUpload\": {\n \"displayName\": \"MODEL_DISPLAY_NAME\"\n },\n \"inputDataConfig\": {\n \"datasetId\": \"DATASET_ID\"\n }\n}\n```\n\u5982\u9700\u767c\u9001\u60a8\u7684\u8acb\u6c42\uff0c\u8acb\u5c55\u958b\u4ee5\u4e0b\u9078\u9805\u4e4b\u4e00\uff1a\u60a8\u61c9\u8a72\u6536\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\u7684 JSON \u97ff\u61c9\uff1a\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/us-central1/trainingPipelines/PIPELINE_ID\",\n \"displayName\": \"MODEL_DISPLAY_NAME\",\n \"inputDataConfig\": {\n \"datasetId\": \"DATASET_ID\"\n },\n \"trainingTaskDefinition\": \"gs://google-cloud-aiplatform/schema/trainingjob/definition/automl_text_classification_1.0.0.yaml\",\n \"trainingTaskInputs\": {\n \"multiLabel\": MULTI-LABEL\n },\n \"modelToUpload\": {\n \"displayName\": \"MODEL_DISPLAY_NAME\"\n },\n \"state\": \"PIPELINE_STATE_PENDING\",\n \"createTime\": \"2020-04-18T01:22:57.479336Z\",\n \"updateTime\": \"2020-04-18T01:22:57.479336Z\"\n}\n```\n\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300aVertex AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Java \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Vertex AI Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Vertex AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/CreateTrainingPipelineTextClassificationSample.java) \n```\nimport com.google.cloud.aiplatform.util.ValueConverter;import com.google.cloud.aiplatform.v1.DeployedModelRef;import com.google.cloud.aiplatform.v1.EnvVar;import com.google.cloud.aiplatform.v1.FilterSplit;import com.google.cloud.aiplatform.v1.FractionSplit;import com.google.cloud.aiplatform.v1.InputDataConfig;import com.google.cloud.aiplatform.v1.LocationName;import com.google.cloud.aiplatform.v1.Model;import com.google.cloud.aiplatform.v1.Model.ExportFormat;import com.google.cloud.aiplatform.v1.ModelContainerSpec;import com.google.cloud.aiplatform.v1.PipelineServiceClient;import com.google.cloud.aiplatform.v1.PipelineServiceSettings;import com.google.cloud.aiplatform.v1.Port;import com.google.cloud.aiplatform.v1.PredefinedSplit;import com.google.cloud.aiplatform.v1.PredictSchemata;import com.google.cloud.aiplatform.v1.TimestampSplit;import com.google.cloud.aiplatform.v1.TrainingPipeline;import com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlTextClassificationInputs;import com.google.rpc.Status;import java.io.IOException;public class CreateTrainingPipelineTextClassificationSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String trainingPipelineDisplayName = \"YOUR_TRAINING_PIPELINE_DISPLAY_NAME\";\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String datasetId = \"YOUR_DATASET_ID\";\u00a0 \u00a0 String modelDisplayName = \"YOUR_MODEL_DISPLAY_NAME\";\u00a0 \u00a0 createTrainingPipelineTextClassificationSample(\u00a0 \u00a0 \u00a0 \u00a0 project, trainingPipelineDisplayName, datasetId, modelDisplayName);\u00a0 }\u00a0 static void createTrainingPipelineTextClassificationSample(\u00a0 \u00a0 \u00a0 String project, String trainingPipelineDisplayName, String datasetId, String modelDisplayName)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 PipelineServiceSettings pipelineServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 PipelineServiceSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEndpoint(\"us-central1-aiplatform.googleapis.com:443\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (PipelineServiceClient pipelineServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 PipelineServiceClient.create(pipelineServiceSettings)) {\u00a0 \u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 \u00a0 String trainingTaskDefinition =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"gs://google-cloud-aiplatform/schema/trainingjob/definition/\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"automl_text_classification_1.0.0.yaml\";\u00a0 \u00a0 \u00a0 LocationName locationName = LocationName.of(project, location);\u00a0 \u00a0 \u00a0 AutoMlTextClassificationInputs trainingTaskInputs =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AutoMlTextClassificationInputs.newBuilder().setMultiLabel(false).build();\u00a0 \u00a0 \u00a0 InputDataConfig trainingInputDataConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputDataConfig.newBuilder().setDatasetId(datasetId).build();\u00a0 \u00a0 \u00a0 Model model = Model.newBuilder().setDisplayName(modelDisplayName).build();\u00a0 \u00a0 \u00a0 TrainingPipeline trainingPipeline =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TrainingPipeline.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDisplayName(trainingPipelineDisplayName)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTrainingTaskDefinition(trainingTaskDefinition)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTrainingTaskInputs(ValueConverter.toValue(trainingTaskInputs))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInputDataConfig(trainingInputDataConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setModelToUpload(model)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 TrainingPipeline trainingPipelineResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pipelineServiceClient.createTrainingPipeline(locationName, trainingPipeline);\u00a0 \u00a0 \u00a0 System.out.println(\"Create Training Pipeline Text Classification Response\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\tName: %s\\n\", trainingPipelineResponse.getName());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tDisplay Name: %s\\n\", trainingPipelineResponse.getDisplayName());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\tTraining Task Definition %s\\n\", trainingPipelineResponse.getTrainingTaskDefinition());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\tTraining Task Inputs: %s\\n\", trainingPipelineResponse.getTrainingTaskInputs());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\tTraining Task Metadata: %s\\n\", trainingPipelineResponse.getTrainingTaskMetadata());\u00a0 \u00a0 \u00a0 System.out.format(\"State: %s\\n\", trainingPipelineResponse.getState());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tCreate Time: %s\\n\", trainingPipelineResponse.getCreateTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tStartTime %s\\n\", trainingPipelineResponse.getStartTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tEnd Time: %s\\n\", trainingPipelineResponse.getEndTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tUpdate Time: %s\\n\", trainingPipelineResponse.getUpdateTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\tLabels: %s\\n\", trainingPipelineResponse.getLabelsMap());\u00a0 \u00a0 \u00a0 InputDataConfig inputDataConfig = trainingPipelineResponse.getInputDataConfig();\u00a0 \u00a0 \u00a0 System.out.println(\"\\tInput Data Config\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tDataset Id: %s\", inputDataConfig.getDatasetId());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tAnnotations Filter: %s\\n\", inputDataConfig.getAnnotationsFilter());\u00a0 \u00a0 \u00a0 FractionSplit fractionSplit = inputDataConfig.getFractionSplit();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tFraction Split\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTraining Fraction: %s\\n\", fractionSplit.getTrainingFraction());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tValidation Fraction: %s\\n\", fractionSplit.getValidationFraction());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTest Fraction: %s\\n\", fractionSplit.getTestFraction());\u00a0 \u00a0 \u00a0 FilterSplit filterSplit = inputDataConfig.getFilterSplit();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tFilter Split\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTraining Filter: %s\\n\", filterSplit.getTrainingFilter());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tValidation Filter: %s\\n\", filterSplit.getValidationFilter());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTest Filter: %s\\n\", filterSplit.getTestFilter());\u00a0 \u00a0 \u00a0 PredefinedSplit predefinedSplit = inputDataConfig.getPredefinedSplit();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tPredefined Split\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tKey: %s\\n\", predefinedSplit.getKey());\u00a0 \u00a0 \u00a0 TimestampSplit timestampSplit = inputDataConfig.getTimestampSplit();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tTimestamp Split\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTraining Fraction: %s\\n\", timestampSplit.getTrainingFraction());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tValidation Fraction: %s\\n\", timestampSplit.getValidationFraction());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tTest Fraction: %s\\n\", timestampSplit.getTestFraction());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tKey: %s\\n\", timestampSplit.getKey());\u00a0 \u00a0 \u00a0 Model modelResponse = trainingPipelineResponse.getModelToUpload();\u00a0 \u00a0 \u00a0 System.out.println(\"\\tModel To Upload\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tName: %s\\n\", modelResponse.getName());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tDisplay Name: %s\\n\", modelResponse.getDisplayName());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tDescription: %s\\n\", modelResponse.getDescription());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tMetadata Schema Uri: %s\\n\", modelResponse.getMetadataSchemaUri());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tMetadata: %s\\n\", modelResponse.getMetadata());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tTraining Pipeline: %s\\n\", modelResponse.getTrainingPipeline());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tArtifact Uri: %s\\n\", modelResponse.getArtifactUri());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tSupported Deployment Resources Types: %s\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 modelResponse.getSupportedDeploymentResourcesTypesList());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tSupported Input Storage Formats: %s\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 modelResponse.getSupportedInputStorageFormatsList());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\tSupported Output Storage Formats: %s\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 modelResponse.getSupportedOutputStorageFormatsList());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tCreate Time: %s\\n\", modelResponse.getCreateTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tUpdate Time: %s\\n\", modelResponse.getUpdateTime());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tLabels: %sn\\n\", modelResponse.getLabelsMap());\u00a0 \u00a0 \u00a0 PredictSchemata predictSchemata = modelResponse.getPredictSchemata();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tPredict Schemata\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tInstance Schema Uri: %s\\n\", predictSchemata.getInstanceSchemaUri());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\t\\tParameters Schema Uri: %s\\n\", predictSchemata.getParametersSchemaUri());\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\t\\t\\tPrediction Schema Uri: %s\\n\", predictSchemata.getPredictionSchemaUri());\u00a0 \u00a0 \u00a0 for (ExportFormat exportFormat : modelResponse.getSupportedExportFormatsList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tSupported Export Format\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tId: %s\\n\", exportFormat.getId());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ModelContainerSpec modelContainerSpec = modelResponse.getContainerSpec();\u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tContainer Spec\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tImage Uri: %s\\n\", modelContainerSpec.getImageUri());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tCommand: %s\\n\", modelContainerSpec.getCommandList());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tArgs: %s\\n\", modelContainerSpec.getArgsList());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tPredict Route: %s\\n\", modelContainerSpec.getPredictRoute());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tHealth Route: %s\\n\", modelContainerSpec.getHealthRoute());\u00a0 \u00a0 \u00a0 for (EnvVar envVar : modelContainerSpec.getEnvList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\t\\tEnv\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\t\\tName: %s\\n\", envVar.getName());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\t\\tValue: %s\\n\", envVar.getValue());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 for (Port port : modelContainerSpec.getPortsList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\t\\tPort\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\t\\tContainer Port: %s\\n\", port.getContainerPort());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 for (DeployedModelRef deployedModelRef : modelResponse.getDeployedModelsList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"\\t\\tDeployed Model\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tEndpoint: %s\\n\", deployedModelRef.getEndpoint());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\t\\tDeployed Model Id: %s\\n\", deployedModelRef.getDeployedModelId());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 Status status = trainingPipelineResponse.getError();\u00a0 \u00a0 \u00a0 System.out.println(\"\\tError\");\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tCode: %s\\n\", status.getCode());\u00a0 \u00a0 \u00a0 System.out.format(\"\\t\\tMessage: %s\\n\", status.getMessage());\u00a0 \u00a0 }\u00a0 }}\n```\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300aVertex AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Node.js \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Vertex AI Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Vertex AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/create-training-pipeline-text-classification.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const datasetId = 'YOUR_DATASET_ID';// const modelDisplayName = 'YOUR_MODEL_DISPLAY_NAME';// const trainingPipelineDisplayName = 'YOUR_TRAINING_PIPELINE_DISPLAY_NAME';// const project = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION';const aiplatform = require('@google-cloud/aiplatform');const {definition} =\u00a0 aiplatform.protos.google.cloud.aiplatform.v1.schema.trainingjob;// Imports the Google Cloud Pipeline Service Client libraryconst {PipelineServiceClient} = aiplatform.v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: 'us-central1-aiplatform.googleapis.com',};// Instantiates a clientconst pipelineServiceClient = new PipelineServiceClient(clientOptions);async function createTrainingPipelineTextClassification() {\u00a0 // Configure the parent resource\u00a0 const parent = `projects/${project}/locations/${location}`;\u00a0 const trainingTaskInputObj = new definition.AutoMlTextClassificationInputs({\u00a0 \u00a0 multiLabel: false,\u00a0 });\u00a0 const trainingTaskInputs = trainingTaskInputObj.toValue();\u00a0 const modelToUpload = {displayName: modelDisplayName};\u00a0 const inputDataConfig = {datasetId: datasetId};\u00a0 const trainingPipeline = {\u00a0 \u00a0 displayName: trainingPipelineDisplayName,\u00a0 \u00a0 trainingTaskDefinition:\u00a0 \u00a0 \u00a0 'gs://google-cloud-aiplatform/schema/trainingjob/definition/automl_text_classification_1.0.0.yaml',\u00a0 \u00a0 trainingTaskInputs,\u00a0 \u00a0 inputDataConfig,\u00a0 \u00a0 modelToUpload,\u00a0 };\u00a0 const request = {\u00a0 \u00a0 parent,\u00a0 \u00a0 trainingPipeline,\u00a0 };\u00a0 // Create training pipeline request\u00a0 const [response] =\u00a0 \u00a0 await pipelineServiceClient.createTrainingPipeline(request);\u00a0 console.log('Create training pipeline text classification response :');\u00a0 console.log(`Name : ${response.name}`);\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}createTrainingPipelineTextClassification();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u6216\u66f4\u65b0 Python\uff0c\u8acb\u53c3\u95b1 [\u5b89\u88dd Python \u7248 Vertex AI SDK](https://cloud.google.com/vertex-ai/docs/start/use-vertex-ai-python-sdk?hl=zh-cn) \u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/create_training_pipeline_text_classification_sample.py) \n```\ndef create_training_pipeline_text_classification_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 display_name: str,\u00a0 \u00a0 dataset_id: str,\u00a0 \u00a0 model_display_name: Optional[str] = None,\u00a0 \u00a0 multi_label: bool = False,\u00a0 \u00a0 training_fraction_split: float = 0.8,\u00a0 \u00a0 validation_fraction_split: float = 0.1,\u00a0 \u00a0 test_fraction_split: float = 0.1,\u00a0 \u00a0 budget_milli_node_hours: int = 8000,\u00a0 \u00a0 disable_early_stopping: bool = False,\u00a0 \u00a0 sync: bool = True,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 job = aiplatform.AutoMLTextTrainingJob(\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name,\u00a0 \u00a0 \u00a0 \u00a0 prediction_type=\"classification\",\u00a0 \u00a0 \u00a0 \u00a0 multi_label=multi_label,\u00a0 \u00a0 )\u00a0 \u00a0 text_dataset = aiplatform.TextDataset(dataset_id)\u00a0 \u00a0 model = job.run(\u00a0 \u00a0 \u00a0 \u00a0 dataset=text_dataset,\u00a0 \u00a0 \u00a0 \u00a0 model_display_name=model_display_name,\u00a0 \u00a0 \u00a0 \u00a0 training_fraction_split=training_fraction_split,\u00a0 \u00a0 \u00a0 \u00a0 validation_fraction_split=validation_fraction_split,\u00a0 \u00a0 \u00a0 \u00a0 test_fraction_split=test_fraction_split,\u00a0 \u00a0 \u00a0 \u00a0 budget_milli_node_hours=budget_milli_node_hours,\u00a0 \u00a0 \u00a0 \u00a0 disable_early_stopping=disable_early_stopping,\u00a0 \u00a0 \u00a0 \u00a0 sync=sync,\u00a0 \u00a0 )\u00a0 \u00a0 model.wait()\u00a0 \u00a0 print(model.display_name)\u00a0 \u00a0 print(model.resource_name)\u00a0 \u00a0 print(model.uri)\u00a0 \u00a0 return model\n```\n## \u4f7f\u7528 REST \u63a7\u5236\u6578\u64da\u62c6\u5206\u60a8\u53ef\u4ee5\u63a7\u5236\u5728\u8a13\u7df4\u96c6\u3001\u9a57\u8b49\u96c6\u548c\u6e2c\u8a66\u96c6\u4e4b\u9593\u62c6\u5206\u8a13\u7df4\u6578\u64da\u7684\u65b9\u5f0f\u3002\u4f7f\u7528 Vertex AI API \u6642\uff0c\u8acb\u4f7f\u7528 [Split \u5c0d\u8c61](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.trainingPipelines?hl=zh-cn#InputDataConfig) \u4f86\u78ba\u5b9a\u6578\u64da\u62c6\u5206\u3002 `Split` \u5c0d\u8c61\u53ef\u4ee5\u5305\u542b\u5728 `InputConfig` \u5c0d\u8c61\u4e2d\u4f5c\u7232\u591a\u7a2e\u5c0d\u8c61\u985e\u578b\u4e2d\u7684\u4e00\u7a2e\uff0c\u5176\u4e2d\u6bcf\u7a2e\u985e\u578b\u90fd\u63d0\u4f9b\u4e00\u7a2e\u4e0d\u540c\u7684\u8a13\u7df4\u6578\u64da\u62c6\u5206\u65b9\u5f0f\u3002\u60a8\u53ea\u80fd\u9078\u64c7\u4e00\u7a2e\u65b9\u6cd5\u3002- `FractionSplit`:- \uff1a\u8981\u7528\u65bc\u8a13\u7df4\u96c6\u7684\u8a13\u7df4\u6578\u64da\u7684\u6bd4\u4f8b\u3002\n- \uff1a\u8981\u7528\u65bc\u9a57\u8b49\u96c6\u7684\u8a13\u7df4\u6578\u64da\u7684\u6bd4\u4f8b\u3002\u4e0d\u7528\u65bc\u8996\u983b\u6578\u64da\u3002\n- \uff1a\u8981\u7528\u65bc\u6e2c\u8a66\u96c6\u7684\u8a13\u7df4\u6578\u64da\u7684\u6bd4\u4f8b\u3002\n\u5982\u679c\u6307\u5b9a\u4e86\u4efb\u4e00\u6bd4\u4f8b\uff0c\u5247\u5fc5\u9808\u6307\u5b9a\u6240\u6709\u6bd4\u4f8b\u3002\u9019\u4e9b\u6bd4\u4f8b\u4e4b\u548c\u5fc5\u9808\u7b49\u65bc 1.0\u3002 [\u6bd4\u4f8b\u7684\u9ed8\u8a8d\u503c](https://cloud.google.com/vertex-ai/docs/general/ml-use?hl=zh-cn#default) \u6703\u56e0\u6578\u64da\u985e\u578b\u800c\u7570\u3002 [\u77ad\u89e3\u8a73\u60c5](https://cloud.google.com/vertex-ai/docs/general/ml-use?hl=zh-cn#percentages) \u3002```\n\"fractionSplit\": {\n \"trainingFraction\": TRAINING_FRACTION,\n \"validationFraction\": VALIDATION_FRACTION,\n \"testFraction\": TEST_FRACTION\n},\n```\n- `FilterSplit`\uff1a\n- \uff1a\u8207\u6b64\u904e\u6ffe\u689d\u4ef6\u5339\u914d\u7684\u6578\u64da\u9805\u7528\u65bc\u8a13\u7df4\u96c6\u3002\n- \uff1a\u8207\u6b64\u904e\u6ffe\u689d\u4ef6\u5339\u914d\u7684\u6578\u64da\u9805\u7528\u65bc\u9a57\u8b49\u96c6\u3002\u5c0d\u65bc\u8996\u983b\u6578\u64da\uff0c\u8a72\u503c\u5fc5\u9808\u7232\u201c-\u201d\u3002\n- \uff1a\u8207\u6b64\u904e\u6ffe\u689d\u4ef6\u5339\u914d\u7684\u6578\u64da\u9805\u7528\u65bc\u6e2c\u8a66\u96c6\u3002\n- \u9019\u4e9b\u904e\u6ffe\u689d\u4ef6\u53ef\u4ee5\u8207 `ml_use` \u6a19\u7c64\u6216\u61c9\u7528\u65bc\u6578\u64da\u7684\u4efb\u4f55\u6a19\u7c64\u7d50\u5408\u4f7f\u7528\u3002\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u4f7f\u7528 [ml-use \u6a19\u7c64](https://cloud.google.com/vertex-ai/docs/general/ml-use?hl=zh-cn#ml-use) \u548c [\u5176\u4ed6\u6a19\u7c64](https://cloud.google.com/vertex-ai/docs/general/ml-use?hl=zh-cn#filter) \u4f86\u904e\u6ffe\u6578\u64da\u3002\n- \u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u5c07 `filterSplit` \u5c0d\u8c61\u8207 `ml_use` \u6a19\u7c64\u7d50\u5408\u4f7f\u7528\uff0c\u5176\u4e2d\u5305\u542b\u9a57\u8b49\u96c6\uff1a\n- ```\n\"filterSplit\": {\n\"trainingFilter\": \"labels.aiplatform.googleapis.com/ml_use=training\",\n\"validationFilter\": \"labels.aiplatform.googleapis.com/ml_use=validation\",\n\"testFilter\": \"labels.aiplatform.googleapis.com/ml_use=test\"\n}\n```", "guide": "Vertex AI"}