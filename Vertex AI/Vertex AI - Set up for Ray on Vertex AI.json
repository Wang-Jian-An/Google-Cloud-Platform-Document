{"title": "Vertex AI - Set up for Ray on Vertex AI", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Set up for Ray on Vertex AI\n**    Preview     ** This product or feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA products and features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nBefore you begin with Ray on Vertex AI, follow the steps to set up your Google project, Vertex AI SDK for Python, and VPC peering network:\n- Follow the steps at [Set up a project and a developmentenvironment](/vertex-ai/docs/start/cloud-environment) to set up billing for your project, enable the Vertex AI API, and install the gcloud CLI.\n- If you haven't already, enable the Compute Engine API and Service Networking API : [Enable the APIs](https://console.cloud.google.com/apis/enableflow?apiid=compute.googleapis.com,servicenetworking.googleapis.com) \n- Prerequisite: You should know how to develop programs using [open sourceRay](https://docs.ray.io/en/latest/ray-overview/index.html) .\n- [Set up a VPC peering network](/vertex-ai/docs/general/vpc-peering) and private services connection to access Vertex AI. To connect to the Ray head node on the Ray cluster on Vertex AI using the using the Vertex AI SDK for Python, the connecting environment (for example, Compute Engine VM or Vertex AI Workbench notebook) must be on the same peered VPC network.- If you're using Ray on Vertex AI in the Google Cloud console, you can set up your private services access connection while [creating the Ray cluster on Vertex AI](/vertex-ai/docs/open-source/ray-on-vertex-ai/create-cluster) .\n- The best setup for Ray on Vertex AI is one auto mode VPC network per project. You may encounter issues if you use a custom mode VPC network or use multiple VPC networks to create clusters in the same project.\n- The Vertex AI SDK for Python used here is a version of the Vertex AI SDK for Python that includes the functionality of the [RayClient](https://docs.ray.io/en/latest/cluster/running-applications/job-submission/ray-client.html) , Ray BigQuery connector, Ray Serve on Vertex AI, and Ray cluster management on Vertex AI.- If you're using Ray on Vertex AI in the Google Cloud console, a Colab Enterprise notebook guides you through the Vertex AI SDK for Python installation process after you [create a Ray cluster on Vertex AI](/vertex-ai/docs/open-source/ray-on-vertex-ai/create-cluster) .\n- If you're using Ray on Vertex AI in the Vertex AI Workbench or other interactive Python environment, install the Vertex AI SDK for Python:```\n# The latest image in the Ray cluster includes Ray 2.4\n# The latest supported Python version is Python 3.10.\n$ pip install google-cloud-aiplatform[ray]\n```After you install the SDK, restart the kernel before you import packages. **Note:** If you use a Vertex AI Workbench notebook as the client environment and use the [Deep Learning VM](/deep-learning-vm/docs/introduction) as the machine image, Ray and the Vertex AI SDK for Python are pre-installed in the Python, TensorFlow Enterprise\n- The maximum total number of nodes in the Ray cluster on Vertex AI you can scale up to ( `M` ) depends on the initial total number of nodes you set up ( `N` ). After you create the Ray on Vertex AI cluster, you can scale the total number of nodes to any amount between `P` and `M` inclusive, where `P` is the number of pools in your cluster.Assuming `f(x) = min(29, (32 - ceiling(log2(x)))` , use the following formulas to make sure you don't exceed the maximum number of nodes ( `M` ):- `f(2 * M) = f(2 * N)`\n- `f(64 * M) = f(64 * N)`\n- `f(max(32, 16 + M)) = f(max(32, 16 + N))`\n- (Optional) If you plan to read from BigQuery, you need to [create anew BigQuery dataset](/bigquery/docs/datasets) or use an existing dataset. **Note:** If you run code on your Ray cluster on Vertex AI cluster that interacts with Google services like BigQuery, the [Vertex AI Custom Code Service Agent](/vertex-ai/docs/general/access-control#service-agents) is used to authenticate.", "content": "## Supported locations\nThe [Feature availability](/vertex-ai/docs/general/locations#americas_1) table for Custom model training lists the available locations for Ray on Vertex AI.\n## What's next\n- [Create a Ray cluster on Vertex AI](/vertex-ai/docs/open-source/ray-on-vertex-ai/create-cluster)", "guide": "Vertex AI"}