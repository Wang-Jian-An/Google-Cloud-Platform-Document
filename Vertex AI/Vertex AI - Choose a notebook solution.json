{"title": "Vertex AI - Choose a notebook solution", "url": "https://cloud.google.com/vertex-ai/docs/workbench/notebook-solution", "abstract": "# Vertex AI - Choose a notebook solution\n# Choose a notebook solution\nThis page describes the differences between Vertex AI's notebook environment options so that you can choose the best one for your project.\nVertex AI provides two notebook environment solutions:\n- **Colab Enterprise:** A collaborative, managed notebook environment with the security and compliance capabilities of Google Cloud. If your project's priorities are to collaborate with others and to avoid spending time managing infrastructure, Colab Enterprise might be the best option for you. See the following [Colab Enterprise](#colab-enterprise) section.\n- **Vertex AI Workbench:** A Jupyter notebook-based environment provided through virtual machine (VM) instances with features that support the entire data science workflow. If your project's priorities are control and customizability, Vertex AI Workbench might be the best option for you. See the following [Vertex AI Workbench](#vertex-ai-workbench) section.", "content": "## Colab Enterprise\nLearn about a few of Colab Enterprise's strengths in the sections that follow. For more information, see [Introduction toColab Enterprise](/colab/docs/introduction) .\n### Share and collaborate\nColab Enterprise lets you share notebooks and collaborate with others. You can share a notebook with a single user, Google group, or Google Workspace domain. You control this access through Identity and Access Management (IAM).\n### Managed compute\nColab Enterprise lets you work in notebooks without having to manage infrastructure. Colab Enterprise provisions a runtime for you when you need it. If you want to, you can configure runtimes for specific needs, but Colab Enterprise starts them for you and shuts them down when you no longer need them.\n### Integrated into the Google Cloud console\nColab Enterprise's integrations with Google Cloud services make it easier to use notebooks that interact with those services. You can use Colab Enterprise from within the Google Cloud console, with features built into both Vertex AI and BigQuery.\n### Inline code completion\nVertex AI lets you write code with [Duet AI](/duet-ai/docs/overview) assistance. Use the inline code completion suggestions to complete coding projects faster. To learn more, see [write code with Duet AIassistance](/colab/docs/use-code-completion) .\n## Vertex AI Workbench\nLearn about a few of Vertex AI Workbench's strengths in the sections that follow. For more information, see [Introduction toVertex AI Workbench](/vertex-ai/docs/workbench/introduction) .\n### Instance types\nVertex AI Workbench provides several [Jupyter notebook](https://jupyter.org/) -based instance types for your data science workflow:\n- **Vertex AI Workbench instances** : An option that combines the workflow-oriented integrations of a managed notebooks instance with the customizability of a user-managed notebooks instance.\n- **Vertex AI Workbench managed notebooks** ( [deprecated](/vertex-ai/docs/deprecations) ): Google-managed environments with integrations and features that help you set up and work in an end-to-end notebook-based production environment.\n- **Vertex AI Workbench user-managed notebooks** ( [deprecated](/vertex-ai/docs/deprecations) ): [Deep Learning VM Images](/deep-learning-vm/docs) instances that are heavily customizable and are therefore ideal for users who need a lot of control over their environment.\nAll of the Vertex AI Workbench options provide the following:\n- Prepackaged with [JupyterLab](https://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html) .\n- A preinstalled suite of deep learning packages, including support for the TensorFlow and PyTorch frameworks.\n- Support for GPU accelerators.\n- The ability to sync with a [GitHub](https://github.com/) repository.\n- Google Cloud authentication and authorization.\n### Vertex AI Workbench instances\nVertex AI Workbench instances might be a good choice if you need the workflow-oriented integrations of managed notebooks and the customizability of user-managed notebooks.\nVertex AI Workbench instances use [kernels](https://jupyterlab.readthedocs.io/en/stable/user/documents_kernels.html) based on conda environments. You can add a conda environment to your Vertex AI Workbench instance, and the environment appears as a kernel in your instance's JupyterLab interface.\nAdding conda environments lets you use kernels that aren't available in the default Vertex AI Workbench instance. For example, you can add conda environments for R and Apache Beam. Or you can add conda environments for specific earlier versions of the available frameworks, such as TensorFlow, PyTorch, or Python.\nFor more information, see [Add a conda environment](/vertex-ai/docs/workbench/instances/add-environment) .\nYou can work more efficiently by accessing your data without leaving the JupyterLab interface.\nFrom within JupyterLab's navigation menu on a Vertex AI Workbench instance, you can [use theCloud Storage integration](/vertex-ai/docs/workbench/instances/cloud-storage) to browse data and other files that you have access to.\nAlso from within the navigation menu, you can [use theBigQuery integration](/vertex-ai/docs/workbench/instances/bigquery) to browse tables that you have access to, write queries, preview results, and load data into your notebook.\nYou can [set a notebook to run on a recurringschedule](/vertex-ai/docs/workbench/instances/schedule-notebook-run-quickstart) . Even while your instance is shut down, Vertex AI Workbench will run your notebook file and save the results for you to look at and share with others.\nTo help manage costs, you can set your Vertex AI Workbench instance to shut down after being idle for a specific time period. For more information, see [Idle shutdown](/vertex-ai/docs/workbench/instances/idle-shutdown) .\nTo help ensure that your Vertex AI Workbench instance is working properly, you can [monitor the healthstatus](/vertex-ai/docs/workbench/instances/monitor-health) .\nVertex AI Workbench provides API methods for modifying the underlying VM through the Notebooks API.\n**Note:** You can't edit the underlying VM of an instance by using  the Google Cloud console or the Compute Engine API.\n### Vertex AI Workbench managed notebooks\nVertex AI Workbench managed notebooks is [deprecated](/vertex-ai/docs/deprecations) . On January 30, 2025, support for  managed notebooks will end and the ability to create managed notebooks instances  will be removed. Existing instances will continue to function  but patches, updates, and upgrades won't be available. To continue using  Vertex AI Workbench, we recommend that you [migrate your managed notebooks instances to Vertex AI Workbench instances](/vertex-ai/docs/workbench/managed/migrate-to-instances) .\nManaged notebooks are usually a good choice if you want to use a notebook for data exploration, analysis, modeling, or as part of an end-to-end data science workflow.\nManaged notebooks instances let you perform workflow-oriented tasks without leaving the JupyterLab interface. They also have many integrations and features for implementing your data science workflow.\nThe following are some of the integrations and features that are included in managed notebooks.\nIn a managed notebooks instance, your JupyterLab interface is where you specify what compute resources your code will run on, for example, how many vCPUs or GPUs and how much RAM, and what framework you want to run the code in. You can write your code first, and then choose how to run it without leaving JupyterLab or restarting your instance. For quick tests of your code, you can scale your hardware down and then scale it back up to run your code against more data.\nYour managed notebooks instance includes many common data science frameworks to choose from, such as TensorFlow and PyTorch, but you can also add custom Docker container images to your instance. Your custom containers appear as kernels in your instance's JupyterLab interface.\nFor more information, see [Add a custom container toa managed notebooks instance](/vertex-ai/docs/workbench/managed/custom-container) .\nYou can access your data without leaving the JupyterLab interface.\nFrom within JupyterLab's navigation menu on a managed notebooks instance, you can [use theCloud Storage integration](/vertex-ai/docs/workbench/managed/cloud-storage) to browse data and other files that you have access to.\nAlso from within the navigation menu, you can [use theBigQuery integration](/vertex-ai/docs/workbench/managed/bigquery) to browse tables that you have access to, write queries, preview results, and load data into your notebook.\nYou can [set a notebook to run on a recurringschedule](/vertex-ai/docs/workbench/managed/schedule-managed-notebooks-run-quickstart) . Even while your instance is shut down, Vertex AI Workbench will run your notebook file and save the results for you to look at and share with others.\nYou can process data quickly by [running a notebookon a Dataproc cluster](/vertex-ai/docs/workbench/managed/dataproc) . After your cluster is set up, you can run a notebook file on it without leaving the JupyterLab interface.\nTo help manage costs, you can set your managed notebooks instance to shut down after being idle for a specific time period. For more information, see [Idle shutdown](/vertex-ai/docs/workbench/managed/idle-shutdown) .\n### Vertex AI Workbench user-managed notebooks\nVertex AI Workbench user-managed notebooks is [deprecated](/vertex-ai/docs/deprecations) . On January 30, 2025, support for  user-managed notebooks will end and the ability to create user-managed notebooks instances  will be removed. Existing instances will continue to function  but patches, updates, and upgrades won't be available. To continue using  Vertex AI Workbench, we recommend that you [migrate your user-managed notebooks instances to Vertex AI Workbench instances](/vertex-ai/docs/workbench/user-managed/migrate-to-instances) .\nUser-managed notebooks can be a good choice for users who require extensive customization or who need a lot of control over their environment.\nUser-managed notebooks instances are Deep Learning VM instances. You choose specific details about your virtual machine (VM) instance when you create your user-managed notebooks instance. For example, you select your machine type and the framework for your user-managed notebooks instance when you create it. You can change your instance's machine type after creation, though this requires a restart of your instance.\nOn your user-managed notebooks instance, you can make manual modifications like updating software and package versions. Changing the framework on your instance is a more involved process.\nBecause user-managed notebooks instances are exposed as Compute Engine instances, you can customize them in the same ways that you can customize Compute Engine instances. For more information, see the [Compute Engine documentation](/compute/docs) .\nFor users who have specific networking and security needs, user-managed notebooks can be the best option.\nBoth user-managed notebooks and managed notebooks support VPC Service Controls, but you have more control over a user-managed notebooks instance's VM. This makes it easier to configure user-managed notebooks instances manually to satisfy some specific networking and security needs.\nTo help ensure that your user-managed notebooks instance is working properly, you can [monitor the healthstatus](/vertex-ai/docs/workbench/user-managed/monitor-health) .\n## What's next\nTo get started, create one of the following:\n- [A Colab Enterprisenotebook](/colab/docs/create-console-quickstart) .\n- [A Vertex AI Workbench instance](/vertex-ai/docs/workbench/instances/create) .\n- [A managed notebooksinstance](/vertex-ai/docs/workbench/managed/create-instance) .\n- [A user-managed notebooksinstance](/vertex-ai/docs/workbench/user-managed/create-new) .", "guide": "Vertex AI"}