{"title": "Vertex AI - Set up VPC Network Peering", "url": "https://cloud.google.com/vertex-ai/docs/general/vpc-peering", "abstract": "# Vertex AI - Set up VPC Network Peering\nYou can configure Vertex AI to peer with [Virtual Private Cloud (VPC)](/vpc/docs/vpc-peering) to connect directly with certain resources in Vertex AI, including:\n- [Custom training](/vertex-ai/docs/training/using-private-ip) \n- [NFS shares for custom training](/vertex-ai/docs/training/train-nfs-share) \n- [Private prediction endpoints](/vertex-ai/docs/predictions/using-private-endpoints) \n- [Vector matching online queries](/vertex-ai/docs/vector-search/setup/vpc#vpc-network-peering-setup) \n- [Pipelines](/vertex-ai/docs/pipelines/use-components#set_up) \n- [Managed notebooks instances](/vertex-ai/docs/workbench/managed/networking) \nThis guide shows how to set up [VPC Network Peering](/vpc/docs/vpc-peering) to peer your network with Vertex AI resources. This guide is recommended for networking administrators who are already familiar with Google Cloud networking concepts.\n", "content": "## Overview\nThis guide covers the following tasks:\n- Configure [private services access](/vpc/docs/configure-private-services-access) for the VPC. This establishes a peering connection between your VPC and Google's shared VPC network.\n- Consider the IP range you need to reserve for Vertex AI.\n- If applicable, export custom routes so that Vertex AI can import them.## Before you begin\n- Select a VPC that you want to peer with Vertex AI resources.\n- Select or create a Google Cloud project to use for Vertex AI.\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the Compute Engine API, Vertex AI API, and Service Networking APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=compute.googleapis.com,aiplatform.googleapis.com,servicenetworking.googleapis.com) \n- Optionally, you can use [Shared VPC](/vpc/docs/shared-vpc) . If you use Shared VPC, you usually use Vertex AI in a separate Google Cloud project than your VPC host project. Enable the Compute Engine API and Service Networking APIs in both projects. Learn how to [provision Shared VPC](/vpc/docs/provisioning-shared-vpc) .\n- Install the [gcloud CLI](/sdk/docs) if you want to run the`gcloud`examples in this guide.\n### Required roles\nIf you are not a project owner or editor, make sure you have the [Compute Network Admin role](/compute/docs/access/iam#compute.networkAdmin) ( `roles/compute.networkAdmin` ), which includes the required roles you need to manage networking resources.\n### Peering with an on-premises network\nFor VPC Network Peering with an on-premises network, there are additional steps:\n- Connect your on-premises network to your VPC. You can use a [VPN tunnel](/network-connectivity/docs/vpn/how-to/adding-a-tunnel) or [Interconnect](/interconnect/docs/how-to/choose-type) .\n- Set up [custom routes](/vpc/docs/routes#custom-routes) from the VPC to your on-premises network.\n- Export your custom routes so that Vertex AI can import them.## Set up private services access for your VPC\nWhen you set up private services access, you establish a private connection between your network and a network owned by Google or a third party service ( ). In this case, Vertex AI is a service producer. To set up [private services access](/vpc/docs/configure-private-services-access) , you [reserve an IP range](#reserving-ip-ranges) for service producers, and then create a peering connection with Vertex AI.\nIf you already have a VPC with [private services access](/vpc/docs/configure-private-services-access) configured, move on to [exporting custom routes](#export-custom-routes) .\n- Set environment variables for your project ID, the name of your reserved range, and the name of your network. If you use Shared VPC, use the project ID of your VPC host project. Otherwise, use the project ID of Google Cloud project you use for Vertex AI.\n- [Enable the required APIs](#before_you_begin) . If you use Shared VPC, see [Use Shared VPC withVertex AI](#shared-vpc) .\n- Set a reserved range using [gcloud compute addresses create](/sdk/gcloud/reference/compute/addresses/create) .\n- Establish a peering connection between your VPC host project and Google's Service Networking, using [gcloud services vpc-peerings connect](/sdk/gcloud/reference/services/vpc-peerings/connect) .For [private prediction endpoints](/vertex-ai/docs/predictions/using-private-endpoints) , we recommended reserving at least a `/21` block for the subnet for model hosting. Reserving a smaller block can result in deployment errors due to insufficient IP addresses. You can choose to [use non-RFC 1918 addresses for deployment](/vertex-ai/docs/predictions/using-private-endpoints#non-rfc-1918-example) .```\nPROJECT_ID=YOUR_PROJECT_IDgcloud config set project $PROJECT_ID# This is for display only; you can name the range anything.PEERING_RANGE_NAME=google-reserved-rangeNETWORK=YOUR_NETWORK_NAME# NOTE: `prefix-length=16` means a CIDR block with mask /16 will be# reserved for use by Google services, such as Vertex AI.gcloud compute addresses create $PEERING_RANGE_NAME \\\u00a0 --global \\\u00a0 --prefix-length=16 \\\u00a0 --description=\"peering range for Google service\" \\\u00a0 --network=$NETWORK \\\u00a0 --purpose=VPC_PEERING# Create the VPC connection.gcloud services vpc-peerings connect \\\u00a0 --service=servicenetworking.googleapis.com \\\u00a0 --network=$NETWORK \\\u00a0 --ranges=$PEERING_RANGE_NAME \\\u00a0 --project=$PROJECT_ID\n```\nLearn more about [private services access](/vpc/docs/private-services-access) .\n**Note:** Vertex AI uses the same Private Services Access as [Cloud SQL](/sql/docs/sqlserver/configure-private-services-access) . If you configure both in the same VPC, ensure that you allocate enough IP addresses for both services.\n### Use Shared VPC with Vertex AI\nIf you use Shared VPC in your project, see how to [Provision Shared VPC](/vpc/docs/provisioning-shared-vpc) and make sure to complete the following steps:\n- Enable the Compute Engine API and Service Networking APIs in the host and service project. Vertex AI API must be enabled for the service project.\n- Create the VPC Network Peering connection between your VPC and Google services within the host project.\n- During Vertex AI creation, you must specify the name of the network that you want Vertex AI to have access to Shared VPC.\n- Verify that the service or user account used has the role [Compute Network User role](/compute/docs/access/iam#compute.networkUser) ( `roles/compute.networkUser` ).\n### Reserve IP ranges for Vertex AI\nWhen you reserve an IP range for service producers, the range can be used by Vertex AI and other services. If you connect with multiple service producers using the same range, allocate a larger range to accommodate them, in order to avoid IP exhaustion.\nRead about [estimated IP ranges to reserve for using private IP with differenttypes of custom training jobs](/vertex-ai/docs/training/using-private-ip#reserving-ip-ranges) .\nIf a job is launched with the parameter below, it will launch in a Google-managed network that is peered to your VPC and other networks attached to it:\n`--network = \"projects/${host_project}/global/networks/${network}\"`\nAny jobs that don't need to access your networks can be launched without this declaration, thus preserving your IP allocations.\n## Export custom routes\nIf you use custom routes, you need to export them so that Vertex AI can import them. If you don't use custom routes, skip this section.\nTo export custom routes, you [update the peering connection](/vpc/docs/using-vpc-peering#update-peer-connection) in your VPC. Exporting custom routes sends all [eligible static and dynamic routes](/vpc/docs/vpc-peering#considerations) that are in your VPC network, such as routes to your on-premises network, to service producers' networks (Vertex AI in this case). This establishes the necessary connections and allows training jobs to send traffic back to your on-premises network.\nEnsure that your on-premises network has routes to the IP address ranges allocated for Vertex AI so that responses are correctly routed back to Vertex AI. For example, use Cloud Router custom route advertisements that include the Vertex AI IP address ranges.\nLearn more about [private connections with on-premises networks](/vpc/docs/private-services-access#on-premises-connectivity) .\n- Go to the VPC Network Peering page in the Google Cloud console. [Go to the VPC Network Peering page](https://console.cloud.google.com/networking/peering/list) \n- Select the peering connection to update.\n- Click **Edit** .\n- Select **Export custom routes** .\n- Find the name of the peering connection to update. If you have multiple peering connections, omit the `--format` flag.```\ngcloud services vpc-peerings list \\\n --network=$NETWORK \\\n --service=servicenetworking.googleapis.com \\\n --project=$PROJECT_ID \\\n --format \"value(peering)\"\n```\n- Update the peering connection to export custom routes.```\ngcloud compute networks peerings update PEERING-NAME \\\n --network=$NETWORK \\\n --export-custom-routes \\\n --project=$PROJECT_ID\n```## Check the status of your peering connections\nTo see that peering connections are active, you can list them using\n```\ngcloud compute networks peerings list --network $NETWORK\n```\nYou should see that the state of the peering you just created is `ACTIVE` . Learn more about [active peering connections](/vpc/docs/using-vpc-peering#step_3_vpc_network_peering_becomes_active) .\n## Troubleshooting\nThis section lists some common issues for configuring VPC Network Peering with Vertex AI.\n- When you configure Vertex AI to use a Shared VPC network, specify the network URI in the following way.\"projects/ /global/networks/ \"\n- If you specify a [Shared VPC network](/vpc/docs/provisioning-shared-vpc#setting_up) for Vertex AI to use, then make sure that any user or Service Account actors for Vertex AI in the service project have `compute.networkUser` role granted in your host project.\n- Make sure that you've allocated a sufficient IP range for all service producers your network connects to, including Vertex AI.\n- If you encounter the error messages `IP_SPACE_EXHAUSTED` , `RANGES_EXHAUSTED` , or `PEERING_RANGE_EXHAUSTED` you must increase the amount of available IP addresses for the `servicenetworking` reservation in your network. You can [add a newrange](/vpc/docs/configure-private-services-access#modifying-connection) to the existing VPC Network Peering configuration or delete some Vertex AI resources to release allocated IP addresses.\n- Connection Timeouts: After exporting custom routes, connections from Vertex AI will be routed through your network to reach endpoints in other networks. However, those endpoints may not route through your network to send responses to Vertex AI. Make sure that you also add static or dynamic routes in those networks for the return-path to the Vertex AI allocated IP range.\n- Connection Timeouts / Host Unreachable errors: Since [transitive peering is not supported](/vpc/docs/vpc-peering#transit-network) , connections from Vertex AI will not be able to reach endpoints in other networks that are directly peered to your network, even with \"Export custom routes\" enabled. Work with your network administrator to make sure that there are no attempts to route directly your network from one directly peered network to another. If needed, you may replace one of these peering hops with a solution that supports static or dynamic routes.\n- Host Unreachable DNS errors: If your Vertex AI job needs to resolve hostnames in your VPC, ensure that you have completed the configuration to [Share private DNS zones with service producers](/vpc/docs/configure-private-services-access#dns-peering) .\nFor additional troubleshooting information, refer to [VPC Network Peering troubleshooting guide](/vpc/docs/using-vpc-peering#troubleshooting) .\n## What's next\n- Learn [how to use private IP for custom training](/vertex-ai/docs/training/using-private-ip) .\n- Learn [how to use private endpoints for prediction](/vertex-ai/docs/predictions/using-private-endpoints) .\n- Learn more about [VPC Network Peering](/vpc/docs/vpc-peering) .\n- See [reference architectures and best practices](/solutions/best-practices-vpc-design#shared-service) for VPC design.", "guide": "Vertex AI"}