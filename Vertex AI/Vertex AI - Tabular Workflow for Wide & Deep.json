{"title": "Vertex AI - Tabular Workflow for Wide & Deep", "url": "https://cloud.google.com/vertex-ai/docs/tabular-data/tabular-workflows/wide-and-deep", "abstract": "# Vertex AI - Tabular Workflow for Wide & Deep\n**    Preview     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nThis document provides an overview of the Tabular Workflow for Wide & Deep pipelines and components. To learn how to train a model with Wide & Deep, see [Train a model with Wide & Deep](/vertex-ai/docs/tabular-data/tabular-workflows/wide-and-deep-train) .\n[Wide & Deep](https://arxiv.org/abs/1606.07792) jointly trains wide linear models and deep neural networks. It combines the benefits of memorization and generalization. In some online experiments, the results showed that Wide & Deep significantly increased Google store application acquisitions compared with wide-only and deep-only models.\n", "content": "## Benefits- Integrated with Vertex AI. The trained model is a Vertex AI model. You can run batch predictions or deploy the model for online predictions right away.\n## Wide & Deep on Vertex AI Pipelines\nTabular Workflow for Wide & Deep is a managed instance of Vertex AI Pipelines.\n[Vertex AI Pipelines](/vertex-ai/docs/pipelines/introduction) is a serverless service that runs Kubeflow pipelines. You can use pipelines to automate and monitor your machine learning and data preparation tasks. Each step in a pipeline performs part of the pipeline's workflow. For example, a pipeline can include steps to split data, transform data types, and train a model. Since steps are instances of pipeline components, steps have inputs, outputs, and a container image. Step inputs can be set from the pipeline's inputs or they can depend on the output of other steps within this pipeline. These dependencies define the pipeline's workflow as a directed acyclic graph.\nTwo versions of the Tabular Workflow for Wide & Deep are available:\n- [HyperparameterTuningJob](#hyperparametertuningjob) searches for the best set of hyperparameter values to use for model training.\n- [CustomJob](#customjob) lets you specify the hyperparameter values to use for model training. If you know exactly which hyperparameter values you need, you can specify them instead of searching for them and save on training resources.## Overview of Wide & Deep CustomJob pipeline and components\nThe Wide & Deep CustomJob pipeline can be illustrated by the following diagram:\nThe pipeline components are:\n- **feature-transform-engine** : Perform feature engineering. See [Feature Transform Engine](/vertex-ai/docs/tabular-data/tabular-workflows/feature-engineering) for details.\n- **split-materialized-data** : Split the materialized data into a training set, an evaluation set, and a test set.Input:- Materialized data`materialized_data`.\nOutput:- Materialized training split`materialized_train_split`.\n- Materialized evaluation split`materialized_eval_split`.\n- Materialized test set`materialized_test_split`.\n- **wide-and-deep-trainer** : Perform model training.Input:- Instance baseline`instance_baseline`.\n- Training schema`training_schema`.\n- Transform output`transform_output`.\n- Materialized train split`materialized_train_split`.\n- Materialized evaluation split`materialized_eval_split`.\n- Materialized test set`materialized_test_split`.\nOutput:- Final model\n- **automl-tabular-infra-validator** : Validate the trained model by sending a prediction request and checking whether it completes successfully.\n- **model-upload** : Upload the model from the user's Cloud Storage bucket to Vertex AI as a Vertex AI model.\n- **condition-run-evaluation-2** : **Optional** . Use the test set to calculate evaluation metrics. Runs only when`run_evaluation`is set to`true`.## Overview of Wide & Deep HyperparameterTuningJob pipeline and components\nThe Wide & Deep HyperparameterTuningJob pipeline can be illustrated by the following diagram:- **feature-transform-engine** : Perform feature engineering. See [Feature Transform Engine](/vertex-ai/docs/tabular-data/tabular-workflows/feature-engineering) for details.\n- **split-materialized-data** : Split the materialized data into a training set, an evaluation set, and a test set.Input:- Materialized data`materialized_data`.\nOutput:- Materialized training split`materialized_train_split`.\n- Materialized evaluation split`materialized_eval_split`.\n- Materialized test set`materialized_test_split`.\n- **get-wide-and-deep-study-spec-parameters** : Generate the study spec based on a configuration of the training pipeline. If the user provides values for`study_spec_parameters_override`, use those values to override the study spec values.Input:- Optional override of study spec parameters`study_spec_parameters_override`.\nOutput:- Final list of hyperparameters and their ranges for the hyperparameter tuning job.\n- **wide-and-deep-hyperparameter-tuning-job** : Perform one or more trials of hyperparameter tuning.Input:- Instance baseline`instance_baseline`.\n- Training schema`training_schema`.\n- Transform output`transform_output`.\n- Materialized train split`materialized_train_split`.\n- Materialized evaluation split`materialized_eval_split`.\n- Materialized test set`materialized_test_split`.\n- List of hyperparameters and their ranges for the hyperparameter tuning job.\n- **get-best-hyperparameter-tuning-job-trial** : Select the model from the best hyperparameter tuning job trial of the previous step.Output:- Final model\n- **automl-tabular-infra-validator** : Validate the trained model by sending a prediction request and checking whether it completes successfully.\n- **model-upload** : Upload the model from the user's Cloud Storage bucket to Vertex AI as a Vertex AI model.\n- **condition-run-evaluation-2** : **Optional** . Use the test set to calculate evaluation metrics. Runs only when`run_evaluation`is set to`true`.## What's next\n- [Train a model with Wide & Deep](/vertex-ai/docs/tabular-data/tabular-workflows/wide-and-deep-train) .", "guide": "Vertex AI"}