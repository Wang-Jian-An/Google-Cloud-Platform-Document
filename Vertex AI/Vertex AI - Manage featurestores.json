{"title": "Vertex AI - Manage featurestores", "url": "https://cloud.google.com/vertex-ai/docs/featurestore/managing-featurestores", "abstract": "# Vertex AI - Manage featurestores\nTo learn more,  run the \"Example Feature Store workflow with sample data\" Jupyter notebook in one of the following  environments: [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/feature_store/sdk-feature-store.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Ffeature_store%2Fsdk-feature-store.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/feature_store/sdk-feature-store.ipynb)\nLearn how to create, list, describe, update, and delete featurestores. A featurestore is a top-level container for entity types, features, and feature values.\n", "content": "## Online and offline storage\nVertex AI Feature Store (Legacy) uses two storage methods classified as and , which are [priced](/vertex-ai/pricing#featurestore) differently. All featurestores have offline storage and optionally, online storage.\nOnline storage retains the latest timestamp values of your features to efficiently handle online serving requests. When you run an import job by using the API, you can control the job if the data is written to the online store. Skipping the online store prevents any load on the online serving nodes. For example, when you run backfill jobs, you can disable writes to the online store and write only to the offline store. For more information, see the `disableOnlineServing` flag in the [APIreference](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes/importFeatureValues) .\nVertex AI Feature Store (Legacy) uses offline storage to store data until the data reaches the [retention limit](/vertex-ai/docs/quotas#featurestore) or until you delete the data. You can store unlimited data in the offline store. You can control offline storage costs by managing how much data you keep. You can also override the default online store data retention limit for your featurestore and the offline data retention limit for an entity type. [Learn moreabout Vertex AI Feature Store (Legacy) quotas andlimits](/vertex-ai/docs/quotas#featurestore) .\nUse the Google Cloud console to view the amount of online and offline storage you are currently using. [View](/vertex-ai/docs/general/monitoring-metrics#featurestore) your featurestore's **Total online storage** and **Total offline storage** monitoring metrics to determine your usage.\n## Online serving nodes\nOnline serving nodes provide the compute resources used to store and serve feature values for low-latency online serving. These nodes are always running even when they aren't serving data. You are [charged](/vertex-ai/pricing#featurestore) for each node hour.\nThe storage limit for online serving nodes is 5 TB per node. [Learn more about Vertex AI Feature Store (Legacy) quotas and limits](/vertex-ai/docs/quotas#featurestore) .\n**Note:** The storage limit is measured in binary terabytes (TB), where 1 TB is 2 bytes. This unit of measurement is also known as a [tebibyte (TiB)](https://en.wikipedia.org/wiki/Tebibyte) .\nThe number of online serving nodes that you require is directly proportional to the following two factors:\n- The number of online serving requests (queries per second) that the featurestore receives.\n- The number of import jobs that write to online storage.\nBoth factors contribute to the CPU utilization and performance of the nodes. From the Google Cloud console, view the [metrics](/vertex-ai/docs/general/monitoring-metrics#featurestore) of the following:\n- **Queries per second** : Number of queries per second to your featurestore.\n- **Node count** : Number of your online serving nodes.\n- **CPU utilization** : CPU utilization of your nodes.\nIf CPU utilization is consistently high, consider increasing the number of online serving nodes for your featurestore.\n### Test performance of online serving nodes\nYou can test the performance of online serving nodes for real-time feature serving. This lets you ensure that the featurestore has sufficient machine resources to perform within predetermined QPS or latency thresholds. You can perform these tests based on various benchmarking parameters, such as QPS, latency, and API. For guidelines and best practices to test the performance of online serving nodes, see [Test the performance of online serving nodes for real-time serving](/vertex-ai/docs/featurestore/best-practices#online_serving_benchmarking) in [Best practices for Vertex AI Feature Store (Legacy)](/vertex-ai/docs/featurestore/best-practices) .\nAdditionally, you can use the [Vertex AI Benchmarker open source tool](https://github.com/google/vertex-ai-benchmarker/blob/main/README.md) to load test the performance of your feature store resources. The Vertex AI Benchmarker open source tool consists of a Python command-line tool and a Java worker.\n**Caution:** Using the Vertex AI Benchmarker framework with production resources can lead to rate limiting, quota limits, and other production issues. Use this tool in an environment designated for testing.\n### Scaling Options\nYou can switch between the following options to configure your number of online serving nodes:\n- **Autoscaling** If you choose autoscaling, the featurestore automatically changes the number of nodes based on CPU utilization. Autoscaling reviews traffic patterns to maintain performance and optimize your cost by adding nodes when the traffic increases and removing nodes when the traffic decreases.Autoscaling performs well for traffic patterns that experience gradual growth and decline. If you use Vertex AI Feature Store (Legacy) extensively for traffic patterns that encounter frequent load fluctuations, use autoscaling to improve cost efficiency. **Caution:** Autoscaling isn't effective for managing sudden bursts of traffic. For more information, see [Additional considerations for autoscaling](#additional_considerations) . If you are expecting sudden bursts of traffic, set the `minNodeCount` flag to a threshold that is high enough to handle the bursts. For more information, see [Scaling](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores#scaling) in the [API reference](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores#scaling) .\n- **Allocating a fixed node count** If you allocate a fixed node count, Vertex AI Feature Store (Legacy) maintains a consistent number of nodes regardless of the traffic patterns. The fixed node count keeps costs predictable, and the nodes should perform well when there are enough nodes to handle the traffic. You can manually change the fixed node count to handle changes in traffic patterns.\n### Additional considerations for autoscaling\nIf you choose autoscaling, there are four additional points to consider that include:\n- After adding online serving nodes, the online store needs time to rebalance the data. It can take up to 20 minutes under load before you see a significant improvement in performance. As a result, scaling the number of nodes might not help for short bursts of traffic. This limitation applies for both manual scaling and autoscaling.\n- If you submit online serving requests to the featurestore without online serving nodes, the operation returns an error.\n### Turn off online serving in your featurestore\nIf you don't require online serving and want to prevent incurring changes for online serving nodes, set the number of online serving nodes to zero. To turn off online serving in your featurestore, set the following configuration:\n- If you're using autoscaling, remove the `scaling` parameter.\n- Set the fixed number of online serving nodes to `0` .\nFor more information about how to create a featurestore, see [Create a featurestore](/vertex-ai/docs/featurestore/managing-featurestores#create_featurestore) . For more information about how to modify the configuration of an existing featurestore, see [Update a featurestore](/vertex-ai/docs/featurestore/managing-featurestores#update) .\nIf you set the number of online serving nodes to `0` , the entire online store, including its data, is deleted. If you want to temporarily turn off your online store and then restore it, you must reimport the deleted data.\nFor example, if you set the online serving node count for your featurestore to `0` and then provision online serving nodes by setting the node count to `1` or higher, Vertex AI Feature Store (Legacy) doesn't migrate the deleted feature data to the online store. To repopulate your online store, you must reimport your data. One way to reimport your data is to export the historical data before you disable online serving nodes, and then import the exported data after you provision the nodes.\nWhen you provision online serving nodes, you must wait for the operation to complete before importing new data. In-progress import jobs resume only after the online serving node provisioning is complete.\nIf you submit an online serving request to the featurestore without online serving nodes, the request returns an error.\n## Create a featurestore\nCreate a featurestore resource to contain entity types and features. The location of your featurestore must be in the same location as your source data. For example, if your featurestore is in `us-central,` you can import data from files in Cloud Storage buckets that are in `us-central1` or in the US multi-region location, though source data from dual-region buckets isn't supported. Similarly for BigQuery, you can import data from tables that are in `us-central1` or in the US multi-region location. For more information, see [Source datarequirements](/vertex-ai/docs/featurestore/source-data) .\nVertex AI Feature Store (Legacy) availability can vary by location. For more information, see [Feature availability](/vertex-ai/docs/general/locations#feature-availability) .\n**Note:** Billing for a featurestore instance starts when it is created and continues as long as it is serving requests or idle. For more information, see the [pricing page](/vertex-ai/pricing#featurestore) .\nYou can create a featurestore using the Google Cloud console if a featurestore isn't already created in the Google Cloud project for the selected region. If a featurestore already exists for the project and region, use another method.\nTo create a featurestore using the Google Cloud console:- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Click **Create featurestore** \n- Specify a name for the featurestore.\n- If you want to turn on online serving for the featurestore, click the **Turn on online serving** toggle and set the scaling options.For more information about online serving and scaling options, see [Online serving nodes](#onlineservingnodes) \n- Click **Create** .The following sample uses the [google_vertex_ai_featurestore](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/vertex_ai_featurestore) Terraform resource to create a featurestore with a fixed node count. The name of the featurestore is `featurestore_xxxxxxxx` , where `xxxxxxxx` is a randomly generated alphanumeric identifier.\nTo learn how to apply or remove a Terraform configuration, see [Basic Terraform commands](/docs/terraform/basic-commands) .\n [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/HEAD/vertex_ai/featurestore/main.tf) \n```\n# Featurestore name must be unique for the projectresource \"random_id\" \"featurestore_name_suffix\" {\u00a0 byte_length = 8}resource \"google_vertex_ai_featurestore\" \"main\" {\u00a0 name \u00a0 = \"featurestore_${random_id.featurestore_name_suffix.hex}\"\u00a0 region = \"us-central1\"\u00a0 labels = {\u00a0 \u00a0 environment = \"testing\"\u00a0 }\u00a0 online_serving_config {\u00a0 \u00a0 fixed_node_count = 1\u00a0 }\u00a0 force_destroy = true}\n```To create a featurestore, send a POST request by using the [featurestores.create](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores/create) method.\nThe following sample creates a featurestore with a fixed node count of `1` . The node count specifies the number of online serving nodes, which affects the number of online serving requests that the featurestore can handle. The latency could increase if the number of nodes cannot support the number of incoming requests.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is created. For example,`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID for the featurestore.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores?featurestoreId=FEATURESTORE_ID\n```\nRequest JSON body:\n```\n{\n \"online_serving_config\": {\n \"fixed_node_count\": 1\n },\n \"labels\": {\n \"environment\": \"testing\"\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores?featurestoreId=FEATURESTORE_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores?featurestoreId=FEATURESTORE_ID\" | Select-Object -Expand Content\n```\nYou should see output similar to the following. You can use the in the response to [get the status](/vertex-ai/docs/general/long-running-operations) of the operation.\n```\n{\n\"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.v1.CreateFeaturestoreOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2021-02-26T00:44:40.722474Z\",\n  \"updateTime\": \"2021-02-26T00:44:40.722474Z\"\n }\n }\n}\n```\nTo learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/create_featurestore_sample.py) \n```\nfrom google.cloud import aiplatformdef create_featurestore_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 featurestore_id: str,\u00a0 \u00a0 online_store_fixed_node_count: int = 1,\u00a0 \u00a0 sync: bool = True,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 fs = aiplatform.Featurestore.create(\u00a0 \u00a0 \u00a0 \u00a0 featurestore_id=featurestore_id,\u00a0 \u00a0 \u00a0 \u00a0 online_store_fixed_node_count=online_store_fixed_node_count,\u00a0 \u00a0 \u00a0 \u00a0 sync=sync,\u00a0 \u00a0 )\u00a0 \u00a0 fs.wait()\u00a0 \u00a0 return fs\n```The client library for Vertex AI is included when you install the Vertex AI SDK for Python. To learn how to install the Vertex AI SDK for Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/install-sdk) . For more information, see the [ Vertex AI SDK for Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/snippets/feature_store_service/create_featurestore_sample.py) \n```\nfrom google.cloud import aiplatformdef create_featurestore_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 featurestore_id: str,\u00a0 \u00a0 fixed_node_count: int = 1,\u00a0 \u00a0 location: str = \"us-central1\",\u00a0 \u00a0 api_endpoint: str = \"us-central1-aiplatform.googleapis.com\",\u00a0 \u00a0 timeout: int = 1200,):\u00a0 \u00a0 # The AI Platform services require regional API endpoints, which need to be\u00a0 \u00a0 # in the same region or multi-region overlap with the Feature Store location.\u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 # Initialize client that will be used to create and send requests.\u00a0 \u00a0 # This client only needs to be created once, and can be reused for multiple requests.\u00a0 \u00a0 client = aiplatform.gapic.FeaturestoreServiceClient(client_options=client_options)\u00a0 \u00a0 parent = f\"projects/{project}/locations/{location}\"\u00a0 \u00a0 create_featurestore_request = aiplatform.gapic.CreateFeaturestoreRequest(\u00a0 \u00a0 \u00a0 \u00a0 parent=parent,\u00a0 \u00a0 \u00a0 \u00a0 featurestore_id=featurestore_id,\u00a0 \u00a0 \u00a0 \u00a0 featurestore=aiplatform.gapic.Featurestore(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 online_serving_config=aiplatform.gapic.Featurestore.OnlineServingConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fixed_node_count=fixed_node_count,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 )\u00a0 \u00a0 lro_response = client.create_featurestore(request=create_featurestore_request)\u00a0 \u00a0 print(\"Long running operation:\", lro_response.operation.name)\u00a0 \u00a0 create_featurestore_response = lro_response.result(timeout=timeout)\u00a0 \u00a0 print(\"create_featurestore_response:\", create_featurestore_response)\n```Before trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/CreateFeaturestoreSample.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.aiplatform.v1beta1.CreateFeaturestoreOperationMetadata;import com.google.cloud.aiplatform.v1beta1.CreateFeaturestoreRequest;import com.google.cloud.aiplatform.v1beta1.Featurestore;import com.google.cloud.aiplatform.v1beta1.Featurestore.OnlineServingConfig;import com.google.cloud.aiplatform.v1beta1.Featurestore.OnlineServingConfig.Scaling;import com.google.cloud.aiplatform.v1beta1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1beta1.FeaturestoreServiceSettings;import com.google.cloud.aiplatform.v1beta1.LocationName;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class CreateFeaturestoreSample {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 int minNodeCount = 1;\u00a0 \u00a0 int maxNodeCount = 5;\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 int timeout = 900;\u00a0 \u00a0 createFeaturestoreSample(\u00a0 \u00a0 \u00a0 \u00a0 project, featurestoreId, minNodeCount, maxNodeCount, location, endpoint, timeout);\u00a0 }\u00a0 static void createFeaturestoreSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 int minNodeCount,\u00a0 \u00a0 \u00a0 int maxNodeCount,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint,\u00a0 \u00a0 \u00a0 int timeout)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 OnlineServingConfig.Builder builderValue =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 OnlineServingConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setScaling(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Scaling.newBuilder().setMinNodeCount(minNodeCount).setMaxNodeCount(maxNodeCount));\u00a0 \u00a0 \u00a0 Featurestore featurestore =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Featurestore.newBuilder().setOnlineServingConfig(builderValue).build();\u00a0 \u00a0 \u00a0 String parent = LocationName.of(project, location).toString();\u00a0 \u00a0 \u00a0 CreateFeaturestoreRequest createFeaturestoreRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CreateFeaturestoreRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(parent)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFeaturestore(featurestore)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFeaturestoreId(featurestoreId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<Featurestore, CreateFeaturestoreOperationMetadata> featurestoreFuture =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.createFeaturestoreAsync(createFeaturestoreRequest);\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Operation name: %s%n\", featurestoreFuture.getInitialFuture().get().getName());\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to finish...\");\u00a0 \u00a0 \u00a0 Featurestore featurestoreResponse = featurestoreFuture.get(timeout, TimeUnit.SECONDS);\u00a0 \u00a0 \u00a0 System.out.println(\"Create Featurestore Response\");\u00a0 \u00a0 \u00a0 System.out.format(\"Name: %s%n\", featurestoreResponse.getName());\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/create-featurestore-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const minNodeCount = <MINIMUM_NO_OF_NODES>;// const maxNodeCount = <MAXIMUM_NO_OF_NODES>;// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} =\u00a0 require('@google-cloud/aiplatform').v1beta1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function createFeaturestore() {\u00a0 // Configure the parent resource\u00a0 const parent = `projects/${project}/locations/${location}`;\u00a0 const featurestore = {\u00a0 \u00a0 onlineServingConfig: {\u00a0 \u00a0 \u00a0 scaling: {\u00a0 \u00a0 \u00a0 \u00a0 minNodeCount: minNodeCount,\u00a0 \u00a0 \u00a0 \u00a0 maxNodeCount: maxNodeCount,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 };\u00a0 const request = {\u00a0 \u00a0 parent: parent,\u00a0 \u00a0 featurestore: featurestore,\u00a0 \u00a0 featurestoreId: featurestoreId,\u00a0 };\u00a0 // Create Featurestore request\u00a0 const [operation] = await featurestoreServiceClient.createFeaturestore(\u00a0 \u00a0 request,\u00a0 \u00a0 {timeout: Number(timeout)}\u00a0 );\u00a0 const [response] = await operation.promise();\u00a0 console.log('Create featurestore response');\u00a0 console.log(`Name : ${response.name}`);\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}createFeaturestore();\n```### Create a featurestore that uses a CMEK\nBefore you begin, if you don't have an existing CMEK (customer-managed encryption key), [use Cloud Key Management Service to configure a customer-managed encryptionkey and set up permissions](/vertex-ai/docs/general/cmek#configure-cmek) . The following sample creates a featurestore that uses a CMEK key.\nIf Vertex AI loses permission to the associated CMEK key, any resources and values within featurestores that were encrypted by that key become inaccessible until Vertex AI can use that key again.\nAfter 30 days, if Vertex AI still doesn't have access to the CMEK key, Vertex AI deletes all of the featurestores that were encrypted with that key. When creating new featurestores, you can't reuse those featurestores names.\nUse another method. You cannot create a featurestore from the Google Cloud console.Before using any of the request data, make the following replacements:- : Region where the featurestore is created. For example,`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID for the featurestore.\n- : The project ID or project number that contains  your CMEK.\n- : The name of the Cloud Key Management Service key ring that your  encryption key is on.\n- : The name of the encryption key to use.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores?featurestoreId=FEATURESTORE_ID\n```\nRequest JSON body:\n```\n{\n \"online_serving_config\": {\n \"fixed_node_count\": 1\n },\n \"encryption_spec\":{\n \"kms_key_name\": \"projects/CMEK_PROJECT/locations/LOCATION_ID/keyRings/KEY_RING/cryptoKeys/KEY_NAME\"\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores?featurestoreId=FEATURESTORE_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores?featurestoreId=FEATURESTORE_ID\" | Select-Object -Expand Content\n```\nYou should see output similar to the following. You can use the in the response to [get the status](/vertex-ai/docs/general/long-running-operations) of the operation.\n```\n{\n\"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.v1.CreateFeaturestoreOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2021-02-26T00:44:40.722474Z\",\n  \"updateTime\": \"2021-02-26T00:44:40.722474Z\"\n }\n }\n}\n```\n## List featurestores\nList all featurestores in a project.\n- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- In the features table, view the **Featurestore** column to see the featurestores in your project for the selected region.\nTo list featurestores for a particular region in your project, send a GET request by using the [featurestores.list](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores/list) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\nHTTP method and URL:\n```\nGET https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\ncurl -X GET \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method GET ` -Headers $headers ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"featurestores\": [ {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/test\",\n  \"createTime\": \"2021-02-26T00:44:44.216805Z\",\n  \"updateTime\": \"2021-02-26T00:44:44.364916Z\",\n  \"etag\": \"AMEw9yNL0s7qZh8lZVZ5T3BEuhoEgFR7JmjbbCSAkRZjeKDXkkIYnxxA4POe5BWT8cCn\",\n  \"labels\": {\n  \"environment\": \"testing\"\n  },\n  \"onlineServingConfig\": {\n  \"fixedNodeCount\": 2\n  },\n  \"state\": \"STABLE\"\n },\n {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/featurestore_demo\",\n  \"createTime\": \"2021-02-25T00:39:40.598781Z\",\n  \"updateTime\": \"2021-02-25T00:39:40.744038Z\",\n  \"etag\": \"AMEw9yO_e0vm-9W_yeCz4rJm-XnnEMYQ-vQesevxya_sz-FckuysnDwo3cEXHdWWSeda\",\n  \"labels\": {\n  \"environment\": \"testing\"\n  },\n  \"onlineServingConfig\": {\n  \"fixedNodeCount\": 3\n  },\n  \"state\": \"STABLE\"\n }\n ]\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/ListFeaturestoresSample.java) \n```\nimport com.google.cloud.aiplatform.v1.Featurestore;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import com.google.cloud.aiplatform.v1.ListFeaturestoresRequest;import com.google.cloud.aiplatform.v1.LocationName;import java.io.IOException;public class ListFeaturestoresSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 listFeaturestoresSample(project, location, endpoint);\u00a0 }\u00a0 static void listFeaturestoresSample(String project, String location, String endpoint)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 ListFeaturestoresRequest listFeaturestoresRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ListFeaturestoresRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(LocationName.of(project, location).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 System.out.println(\"List Featurestores Response\");\u00a0 \u00a0 \u00a0 for (Featurestore element :\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.listFeaturestores(listFeaturestoresRequest).iterateAll()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(element);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/list-featurestores-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function listFeaturestores() {\u00a0 // Configure the parent resource\u00a0 const parent = `projects/${project}/locations/${location}`;\u00a0 const request = {\u00a0 \u00a0 parent: parent,\u00a0 };\u00a0 // List featurestores request\u00a0 const [response] = await featurestoreServiceClient.listFeaturestores(\u00a0 \u00a0 request,\u00a0 \u00a0 {timeout: Number(timeout)}\u00a0 );\u00a0 console.log('List featurestores response');\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}listFeaturestores();\n```To learn how to install and use the Vertex AI SDK for Python, see [Use the Vertex AI SDK for Python](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) . For more information, see the [Vertex AI SDK for Python API reference documentation.](/python/docs/reference/aiplatform/latest)\n## View featurestore details\nGet details about a featurestore such as its name and online serving configuration. If you use the Google Cloud console, you can also view [Cloud Monitoring metrics](/vertex-ai/docs/general/monitoring-metrics#featurestore) for featurestores.\n- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- In the features table, view the **Featurestore** column and find the featurestore that you want to view information for.\n- Click the name of the featurestore to view its Monitoring metrics.\n- Click the **Properties** tab to view the featurestore's online serving configuration.\nTo get details about a single featurestore, send a GET request by using the [featurestores.get](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores/get) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\nHTTP method and URL:\n```\nGET https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\ncurl -X GET \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method GET ` -Headers $headers ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID\",\n \"createTime\": \"2021-02-25T00:39:40.598781Z\",\n \"updateTime\": \"2021-02-25T00:39:40.744038Z\",\n \"etag\": \"AMEw9yNy_b4IaMIvw1803ZT38cpUtjfwlyLkR709oBCY6pQrm6dHophLcqhrvsNqkQQZ\",\n \"onlineServingConfig\": {\n \"fixedNodeCount\": 3\n },\n \"state\": \"STABLE\"\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/GetFeaturestoreSample.java) \n```\nimport com.google.cloud.aiplatform.v1beta1.Featurestore;import com.google.cloud.aiplatform.v1beta1.FeaturestoreName;import com.google.cloud.aiplatform.v1beta1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1beta1.FeaturestoreServiceSettings;import com.google.cloud.aiplatform.v1beta1.GetFeaturestoreRequest;import java.io.IOException;public class GetFeaturestoreSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 getFeaturestoreSample(project, featurestoreId, location, endpoint);\u00a0 }\u00a0 static void getFeaturestoreSample(\u00a0 \u00a0 \u00a0 String project, String featurestoreId, String location, String endpoint) throws IOException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 GetFeaturestoreRequest getFeaturestoreRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GetFeaturestoreRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(FeaturestoreName.of(project, location, featurestoreId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 Featurestore featurestore = featurestoreServiceClient.getFeaturestore(getFeaturestoreRequest);\u00a0 \u00a0 \u00a0 System.out.println(\"Get Featurestore Response\");\u00a0 \u00a0 \u00a0 System.out.println(featurestore);\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/get-featurestore-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function getFeaturestore() {\u00a0 // Configure the parent resource\u00a0 const name = `projects/${project}/locations/${location}/featurestores/${featurestoreId}`;\u00a0 const request = {\u00a0 \u00a0 name: name,\u00a0 };\u00a0 // Get Featurestore request\u00a0 const [response] = await featurestoreServiceClient.getFeaturestore(\u00a0 \u00a0 request,\u00a0 \u00a0 {timeout: Number(timeout)}\u00a0 );\u00a0 console.log('Get featurestore response');\u00a0 console.log(`Name : ${response.name}`);\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}getFeaturestore();\n```\nTo learn how to install and use the Vertex AI SDK for Python, see [Use the Vertex AI SDK for Python](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) . For more information, see the [Vertex AI SDK for Python API reference documentation.](/python/docs/reference/aiplatform/latest)\n## Update a featurestore\nUpdate a featurestore, for example, to change the number of online serving nodes or update labels on a featurestore.\nYou can update only the number of online serving nodes. To update labels, use the API.- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- In the features table, view the **Featurestore** column and click the name of the featurestore to update.\n- Click **Edit configuration** to open the **Edit featurestore\n configuration** pane.\n- Edit the featurestore configuration.\n- Click **Update** to apply your changes.\nTo update a featurestore, send a PATCH request by using the [featurestores.patch](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores/patch) method.\nThe following sample updates the number of online serving nodes to `2` for the featurestore. All other settings remain the same.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\nHTTP method and URL:\n```\nPATCH https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID\n```\nRequest JSON body:\n```\n{\n \"online_serving_config\": {\n \"fixed_node_count\": 2\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X PATCH \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method PATCH ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID\" | Select-Object -Expand Content\n```\nYou should see output similar to the following. You can use the in the response to [get the status](/vertex-ai/docs/general/long-running-operations) of the operation.\n```\n{\n\"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.v1.UpdateFeaturestoreOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2021-03-18T21:12:08.373664Z\",\n  \"updateTime\": \"2021-03-18T21:12:08.373664Z\"\n }\n }\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/UpdateFeaturestoreSample.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.aiplatform.v1beta1.Featurestore;import com.google.cloud.aiplatform.v1beta1.Featurestore.OnlineServingConfig;import com.google.cloud.aiplatform.v1beta1.Featurestore.OnlineServingConfig.Scaling;import com.google.cloud.aiplatform.v1beta1.FeaturestoreName;import com.google.cloud.aiplatform.v1beta1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1beta1.FeaturestoreServiceSettings;import com.google.cloud.aiplatform.v1beta1.UpdateFeaturestoreOperationMetadata;import com.google.cloud.aiplatform.v1beta1.UpdateFeaturestoreRequest;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class UpdateFeaturestoreSample {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 int minNodeCount = 2;\u00a0 \u00a0 int maxNodeCount = 4;\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 int timeout = 300;\u00a0 \u00a0 updateFeaturestoreSample(\u00a0 \u00a0 \u00a0 \u00a0 project, featurestoreId, minNodeCount, maxNodeCount, location, endpoint, timeout);\u00a0 }\u00a0 static void updateFeaturestoreSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 int minNodeCount,\u00a0 \u00a0 \u00a0 int maxNodeCount,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint,\u00a0 \u00a0 \u00a0 int timeout)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 OnlineServingConfig.Builder builderValue =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 OnlineServingConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setScaling(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Scaling.newBuilder().setMinNodeCount(minNodeCount).setMaxNodeCount(maxNodeCount));\u00a0 \u00a0 \u00a0 Featurestore featurestore =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Featurestore.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(FeaturestoreName.of(project, location, featurestoreId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setOnlineServingConfig(builderValue)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 UpdateFeaturestoreRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UpdateFeaturestoreRequest.newBuilder().setFeaturestore(featurestore).build();\u00a0 \u00a0 \u00a0 OperationFuture<Featurestore, UpdateFeaturestoreOperationMetadata> updateFeaturestoreFuture =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.updateFeaturestoreAsync(request);\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Operation name: %s%n\", updateFeaturestoreFuture.getInitialFuture().get().getName());\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to finish...\");\u00a0 \u00a0 \u00a0 Featurestore featurestoreResponse = updateFeaturestoreFuture.get(timeout, TimeUnit.SECONDS);\u00a0 \u00a0 \u00a0 System.out.println(\"Update Featurestore Response\");\u00a0 \u00a0 \u00a0 System.out.format(\"Name: %s%n\", featurestoreResponse.getName());\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/update-featurestore-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const minNodeCount = <MINIMUM_NO_OF_NODES>;// const maxNodeCount = <MAXIMUM_NO_OF_NODES>;// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} =\u00a0 require('@google-cloud/aiplatform').v1beta1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function updateFeaturestore() {\u00a0 // Configure the parent resource\u00a0 const parent = `projects/${project}/locations/${location}/featurestores/${featurestoreId}`;\u00a0 const featurestore = {\u00a0 \u00a0 name: parent,\u00a0 \u00a0 onlineServingConfig: {\u00a0 \u00a0 \u00a0 scaling: {\u00a0 \u00a0 \u00a0 \u00a0 minNodeCount: minNodeCount,\u00a0 \u00a0 \u00a0 \u00a0 maxNodeCount: maxNodeCount,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 };\u00a0 const request = {\u00a0 \u00a0 featurestore: featurestore,\u00a0 };\u00a0 // Update Featurestore request\u00a0 const [operation] = await featurestoreServiceClient.updateFeaturestore(\u00a0 \u00a0 request,\u00a0 \u00a0 {timeout: Number(timeout)}\u00a0 );\u00a0 const [response] = await operation.promise();\u00a0 console.log('Update featurestore response');\u00a0 console.log(`Name : ${response.name}`);\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}updateFeaturestore();\n```To learn how to install and use the Vertex AI SDK for Python, see [Use the Vertex AI SDK for Python](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) . For more information, see the [Vertex AI SDK for Python API reference documentation.](/python/docs/reference/aiplatform/latest)\n## Delete a featurestore\nDelete a featurestore. If the featurestore includes existing entity types and features, enable the `force` query parameter to delete the featurestore and all of its contents.\nUse another method. You cannot delete a featurestore from the Google Cloud console.To delete a featurestore and all of its content, send a DELETE request by using the [featurestores.delete](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores/delete) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : Whether to delete the featurestore even if it contains  entity types and features. The`force`query parameter is  optional and is`false`by default.\nHTTP method and URL:\n```\nDELETE https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID?force=BOOLEAN\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\ncurl -X DELETE \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID?force=BOOLEAN\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method DELETE ` -Headers $headers ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID?force=BOOLEAN\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/operations/OPERATIONS_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.v1.DeleteOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2021-05-03T17:50:21.813112Z\",\n  \"updateTime\": \"2021-05-03T17:50:21.813112Z\"\n }\n },\n \"done\": true,\n \"response\": {\n \"@type\": \"type.googleapis.com/google.protobuf.Empty\"\n }\n}\n```\nTo learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/delete_featurestore_sample.py) \n```\nfrom google.cloud import aiplatformdef delete_featurestore_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 featurestore_name: str,\u00a0 \u00a0 sync: bool = True,\u00a0 \u00a0 force: bool = True,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 fs = aiplatform.featurestore.Featurestore(featurestore_name=featurestore_name)\u00a0 \u00a0 fs.delete(sync=sync, force=force)\n```The client library for Vertex AI is included when you install the Vertex AI SDK for Python. To learn how to install the Vertex AI SDK for Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/install-sdk) . For more information, see the [ Vertex AI SDK for Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/snippets/feature_store_service/delete_featurestore_sample.py) \n```\nfrom google.cloud import aiplatformdef delete_featurestore_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 featurestore_id: str,\u00a0 \u00a0 location: str = \"us-central1\",\u00a0 \u00a0 api_endpoint: str = \"us-central1-aiplatform.googleapis.com\",\u00a0 \u00a0 timeout: int = 1200,):\u00a0 \u00a0 # The AI Platform services require regional API endpoints, which need to be\u00a0 \u00a0 # in the same region or multi-region overlap with the Feature Store location.\u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 # Initialize client that will be used to create and send requests.\u00a0 \u00a0 # This client only needs to be created once, and can be reused for multiple requests.\u00a0 \u00a0 client = aiplatform.gapic.FeaturestoreServiceClient(client_options=client_options)\u00a0 \u00a0 name = client.featurestore_path(\u00a0 \u00a0 \u00a0 \u00a0 project=project, location=location, featurestore=featurestore_id\u00a0 \u00a0 )\u00a0 \u00a0 response = client.delete_featurestore(name=name)\u00a0 \u00a0 print(\"Long running operation:\", response.operation.name)\u00a0 \u00a0 delete_featurestore_response = response.result(timeout=timeout)\u00a0 \u00a0 print(\"delete_featurestore_response:\", delete_featurestore_response)\n```Before trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/DeleteFeaturestoreSample.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.aiplatform.v1.DeleteFeaturestoreRequest;import com.google.cloud.aiplatform.v1.DeleteOperationMetadata;import com.google.cloud.aiplatform.v1.FeaturestoreName;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import com.google.protobuf.Empty;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class DeleteFeaturestoreSample {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 boolean useForce = true;\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 int timeout = 60;\u00a0 \u00a0 deleteFeaturestoreSample(project, featurestoreId, useForce, location, endpoint, timeout);\u00a0 }\u00a0 static void deleteFeaturestoreSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 boolean useForce,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint,\u00a0 \u00a0 \u00a0 int timeout)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 DeleteFeaturestoreRequest deleteFeaturestoreRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DeleteFeaturestoreRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(FeaturestoreName.of(project, location, featurestoreId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setForce(useForce)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<Empty, DeleteOperationMetadata> operationFuture =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.deleteFeaturestoreAsync(deleteFeaturestoreRequest);\u00a0 \u00a0 \u00a0 System.out.format(\"Operation name: %s%n\", operationFuture.getInitialFuture().get().getName());\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to finish...\");\u00a0 \u00a0 \u00a0 operationFuture.get(timeout, TimeUnit.SECONDS);\u00a0 \u00a0 \u00a0 System.out.format(\"Deleted Featurestore.\");\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/delete-featurestore-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const force = <BOOLEAN>;// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function deleteFeaturestore() {\u00a0 // Configure the name resource\u00a0 const name = `projects/${project}/locations/${location}/featurestores/${featurestoreId}`;\u00a0 const request = {\u00a0 \u00a0 name: name,\u00a0 \u00a0 force: Boolean(force),\u00a0 };\u00a0 // Delete Featurestore request\u00a0 const [operation] = await featurestoreServiceClient.deleteFeaturestore(\u00a0 \u00a0 request,\u00a0 \u00a0 {timeout: Number(timeout)}\u00a0 );\u00a0 const [response] = await operation.promise();\u00a0 console.log('Delete featurestore response');\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}deleteFeaturestore();\n```\n## What's next\n- Learn how to manage [entity types](/vertex-ai/docs/featurestore/managing-entity-types) and [features](/vertex-ai/docs/featurestore/managing-features) .\n- [Troubleshoot](/vertex-ai/docs/general/troubleshooting#feature-store) common Vertex AI Feature Store (Legacy) issues.", "guide": "Vertex AI"}