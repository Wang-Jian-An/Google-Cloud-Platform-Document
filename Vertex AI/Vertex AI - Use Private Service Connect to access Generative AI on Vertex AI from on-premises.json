{"title": "Vertex AI - Use Private Service Connect to access Generative AI on Vertex AI from on-premises", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Use Private Service Connect to access Generative AI on Vertex AI from on-premises\nOn-premises hosts can reach Generative AI on Vertex AI either through the public internet or privately through a hybrid networking architecture that uses Private Service Connect (PSC) over Cloud VPN or Cloud Interconnect. Both options offer SSL/TLS encryption. However, the private option offers much better performance and is therefore recommended for critical applications.\nIn this tutorial, you use [High-Availability VPN (HA VPN)](/network-connectivity/docs/vpn/concepts/overview#ha-vpn) to access Generative AI on Vertex AI both publicly, through Cloud NAT; and privately, between two Virtual Private Cloud (VPC) networks that can serve as a basis for multi-cloud and on-premises private connectivity.\nThis tutorial is intended for enterprise network administrators, data scientists, and researchers who are familiar with Vertex AI, VPC, the Google Cloud console, and the [Cloud Shell](/shell/docs/how-cloud-shell-works) . Familiarity with [Generative AI on Vertex AI](/vertex-ai/generative-ai/docs/learn/overview) is helpful but not required.\n \n", "content": "## Objectives\n- Create two VPC networks, as shown in the preceding diagram:- One (`onprem-vpc`) represents an on-premises network.\n- The other (`vertex-networking-vpc`) is for accessing the REST API for Generative AI on Vertex AI.\n- Deploy HA VPN gateways, Cloud VPN tunnels, and Cloud Routers to connect`vertex-networking-vpc`and`onprem-vpc`.\n- Create a Private Service Connect (PSC) endpoint to forward requests to the GenAI REST API.\n- Configure a Cloud Router custom route advertisement in`vertex-networking-vpc`to announce routes for the Private Service Connect endpoint to`onprem-vpc`.\n- Create a Compute Engine VM instance in`onprem-vpc`to represent a client application that sends requests to the GenAI REST API over HA VPN.\n## CostsIn this document, you use the following billable components of Google Cloud:- [Artifact Registry](/artifact-registry/pricing) \n- [Cloud NAT](/nat/pricing) \n- [Cloud Storage](/storage/pricing) \n- [Cloud VPN](/network-connectivity/pricing#vpn-pricing) \n- [Compute Engine](/compute/all-pricing) \n- [Vertex AI](/vertex-ai/pricing) \n- [Virtual Private Cloud](/vpc/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, go to the project selector page. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- Select or create a Google Cloud project.\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- If you aren't the project owner, the project owner must grant  you the`roles/resourcemanager.projectIamAdmin`IAM role. You need to have this role in order to  grant IAM roles and permissions to yourself and  to service accounts.\n- Open [Cloud Shell](/shell/docs/launching-cloud-shell-editor) to execute the commands listed  in this tutorial. Cloud Shell is an interactive shell environment  for Google Cloud that lets you manage your projects and resources from  your web browser.\n- In the Cloud Shell, set the current project to your Google Cloud project ID and store the same project ID into the`projectid`shell variable:```\n projectid=\"PROJECT_ID\"\n gcloud config set project ${projectid}\n```Replacewith your project ID. If necessary, you can locate your project ID in the Google Cloud console. For more information, see [Find your project ID](/vertex-ai/docs/tutorials/tabular-bq-prediction/prerequisites#find-project-id) .\n- Grant roles to your Google Account. Run the following command once for each of the following   IAM roles: `roles/compute.instanceAdmin.v1,  roles/compute.networkAdmin,  roles/compute.securityAdmin,  roles/dns.admin,  roles/iap.tunnelResourceAccessor,  roles/iam.serviceAccountCreator,  roles/iam.serviceAccountUser,  roles/iam.serviceAccountDeleter,  roles/resourcemanager.projectIamAdmin,  roles/servicedirectory.editor,  roles/servicemanagement.quotaAdmin,  roles/aiplatform.user` ```\ngcloud projects add-iam-policy-binding PROJECT_ID --member=\"user:EMAIL_ADDRESS\" --role=ROLE\n```- Replace``with your project ID.\n- Replace``with your email address.\n- Replace``with each individual role.\n- Enable the DNS,  IAM,  Compute Engine,  Service Usage,  and Vertex AI APIs:```\ngcloud services enable dns.googleapis.com iam.googleapis.com compute.googleapis.com serviceusage.googleapis.com aiplatform.googleapis.com\n```## Create two VPC networks: vertex-networking-vpc and onprem-vpcIn this section, you create two VPC networks: one to be the primary network for accessing the Vertex AI generative AI (also known as GenAI) API, and the other to simulate the on-premises network.\n### Create the VPC networks\n- Create the VPC network for accessing the GenAI API ( `vertex-networking-vpc` ):```\ngcloud compute networks create vertex-networking-vpc --subnet-mode custom\n```\n- Create the VPC network to simulate the on-premises network ( `onprem-vpc` ):```\ngcloud compute networks create onprem-vpc --subnet-mode custom\n```\n- In the `onprem-vpc` network, create a subnet named `onprem-vpc-subnet1` , with a primary IPv4 range of `172.16.10.0/24` :```\ngcloud compute networks subnets create onprem-vpc-subnet1 \\\u00a0 \u00a0--range 172.16.10.0/24 \\\u00a0 \u00a0--network onprem-vpc \\\u00a0 \u00a0--region us-central1\n```\n- In the Google Cloud console, go to the **Networks in current project** tab in the **VPC network** page. [Go to VPC network](https://console.cloud.google.com/networking/networks/list?pageTab=CURRENT_PROJECT_NETWORKS) \n- In the list of VPC networks, verify that the two networks have been created: `vertex-networking-vpc` and `onprem-vpc` .\n- In the **VPC network** page, click the **Subnets in current project** tab.\n- In the list of VPC subnets, verify that the `onprem-vpc-subnet1` subnet has been created in the `onprem-vpc` network.\n## Configure hybrid connectivityIn this section, you create two HA VPN gateways that are connected to each other. One resides in the `vertex-networking-vpc` VPC network. The other resides in the `onprem-vpc` VPC network. Each gateway contains a Cloud Router and a pair of VPN tunnels.\n### Create the HA VPN gateways\n- In the Cloud Shell, create the HA VPN gateway for the `vertex-networking-vpc` VPC network:```\ngcloud compute vpn-gateways create vertex-networking-vpn-gw1 \\\u00a0 \u00a0--network vertex-networking-vpc \\\u00a0 \u00a0--region us-central1\n```\n- Create the HA VPN gateway for the `onprem-vpc` VPC network:```\ngcloud compute vpn-gateways create onprem-vpn-gw1 \\\u00a0 \u00a0--network onprem-vpc \\\u00a0 \u00a0--region us-central1\n```\n- In the Google Cloud console, go to the **Cloud VPN Gateways** tab in the **VPN** page. [Go to VPN](https://console.cloud.google.com/hybrid/vpn?tab=gateways) \n- In the list of VPN gateways, verify that the two gateways ( `vertex-networking-vpn-gw1` and `onprem-vpn-gw1` ) have been created and that each one has two IP addresses.\n### Create Cloud Routers\n- In the Cloud Shell, create a Cloud Router for the `vertex-networking-vpc` VPC network:```\ngcloud compute routers create vertex-networking-vpc-router1 \\\u00a0 \u00a0--region us-central1\\\u00a0 \u00a0--network vertex-networking-vpc \\\u00a0 \u00a0--asn 65001\n```\n- Create a Cloud Router for the `onprem-vpc` VPC network:```\ngcloud compute routers create onprem-vpc-router1 \\\u00a0 \u00a0--region us-central1\\\u00a0 \u00a0--network onprem-vpc\\\u00a0 \u00a0--asn 65002\n```\n### Add a Cloud NAT gateway to the onprem-vpc VPC networkIn this step, you add a Cloud NAT gateway to the Cloud Router for the `onprem-vpc` VPC network. A Cloud NAT gateway provides outgoing connectivity for Compute Engine virtual machine (VM) instances that don't have external IP addresses.- In the Cloud Shell, add a Cloud NAT gateway to the `onprem-vpc-router1` Cloud Router:```\ngcloud compute routers nats create us-central-cloudnat-onprem \\\u00a0 \u00a0--router=onprem-vpc-router1 \\\u00a0 \u00a0--auto-allocate-nat-external-ips \\\u00a0 \u00a0--nat-all-subnet-ip-ranges \\\u00a0 \u00a0--region us-central1\n```\n- In the Google Cloud console, go to the **Cloud Routers** page. [Go to Cloud Routers](https://console.cloud.google.com/hybrid/routers/list) \n- In the Cloud Router list, verify that `vertex-networking-vpc-router1` and `onprem-vpc-router1` have been created. You may need to refresh the Google Cloud console browser tab to see the new values.\n- In the Cloud Router list, click `onprem-vpc-router1` .\n- In the **Router details** page, verify that the `us-central-cloudnat-onprem` Cloud NAT gateway has been created.\n### Create VPN tunnels\n- In the `vertex-networking-vpc` network, create a VPN tunnel called `vertex-networking-vpc-tunnel0` :```\ngcloud compute vpn-tunnels create vertex-networking-vpc-tunnel0 \\\u00a0 \u00a0--peer-gcp-gateway onprem-vpn-gw1 \\\u00a0 \u00a0--region us-central1 \\\u00a0 \u00a0--ike-version 2 \\\u00a0 \u00a0--shared-secret [ZzTLxKL8fmRykwNDfCvEFIjmlYLhMucH] \\\u00a0 \u00a0--router vertex-networking-vpc-router1 \\\u00a0 \u00a0--vpn-gateway vertex-networking-vpn-gw1 \\\u00a0 \u00a0--interface 0\n```\n- In the `vertex-networking-vpc` network, create a VPN tunnel called `vertex-networking-vpc-tunnel1` :```\ngcloud compute vpn-tunnels create vertex-networking-vpc-tunnel1 \\\u00a0 \u00a0--peer-gcp-gateway onprem-vpn-gw1 \\\u00a0 \u00a0--region us-central1 \\\u00a0 \u00a0--ike-version 2 \\\u00a0 \u00a0--shared-secret [bcyPaboPl8fSkXRmvONGJzWTrc6tRqY5] \\\u00a0 \u00a0--router vertex-networking-vpc-router1 \\\u00a0 \u00a0--vpn-gateway vertex-networking-vpn-gw1 \\\u00a0 \u00a0--interface 1\n```\n- In the `onprem-vpc` network, create a VPN tunnel called `onprem-vpc-tunnel0` :```\ngcloud compute vpn-tunnels create onprem-vpc-tunnel0 \\\u00a0 \u00a0--peer-gcp-gateway vertex-networking-vpn-gw1 \\\u00a0 \u00a0--region us-central1\\\u00a0 \u00a0--ike-version 2 \\\u00a0 \u00a0--shared-secret [ZzTLxKL8fmRykwNDfCvEFIjmlYLhMucH] \\\u00a0 \u00a0--router onprem-vpc-router1 \\\u00a0 \u00a0--vpn-gateway onprem-vpn-gw1 \\\u00a0 \u00a0--interface 0\n```\n- In the `onprem-vpc` network, create a VPN tunnel called `onprem-vpc-tunnel1` :```\ngcloud compute vpn-tunnels create onprem-vpc-tunnel1 \\\u00a0 \u00a0--peer-gcp-gateway vertex-networking-vpn-gw1 \\\u00a0 \u00a0--region us-central1\\\u00a0 \u00a0--ike-version 2 \\\u00a0 \u00a0--shared-secret [bcyPaboPl8fSkXRmvONGJzWTrc6tRqY5] \\\u00a0 \u00a0--router onprem-vpc-router1 \\\u00a0 \u00a0--vpn-gateway onprem-vpn-gw1 \\\u00a0 \u00a0--interface 1\n```\n- In the Google Cloud console, go to the **VPN** page. [Go to VPN](https://console.cloud.google.com/hybrid/vpn) \n- In the list of VPN tunnels, verify that the four VPN tunnels have been created.\n## Establish BGP sessionsCloud Router uses Border Gateway Protocol (BGP) to exchange routes between your VPC network (in this case, `vertex-networking-vpc` ) and your on-premises network (represented by `onprem-vpc` ). On Cloud Router, you configure an interface and a BGP peer for your on-premises router. The interface and BGP peer configuration together form a BGP session. In this section, you create two BGP sessions for `vertex-networking-vpc` and two for `onprem-vpc` .\nOnce you've configured the interfaces and BGP peers between your routers, they will automatically start exchanging routes.\n### Establish BGP sessions for vertex-networking-vpc\n- In the Cloud Shell, in the `vertex-networking-vpc` network, create a BGP interface for `vertex-networking-vpc-tunnel0` :```\ngcloud compute routers add-interface vertex-networking-vpc-router1 \\\u00a0 \u00a0--interface-name if-tunnel0-to-onprem \\\u00a0 \u00a0--ip-address 169.254.0.1 \\\u00a0 \u00a0--mask-length 30 \\\u00a0 \u00a0--vpn-tunnel vertex-networking-vpc-tunnel0 \\\u00a0 \u00a0--region us-central1\n```\n- In the `vertex-networking-vpc` network, create a BGP peer for `bgp-onprem-tunnel0` :```\ngcloud compute routers add-bgp-peer vertex-networking-vpc-router1 \\\u00a0 \u00a0--peer-name bgp-onprem-tunnel0 \\\u00a0 \u00a0--interface if-tunnel0-to-onprem \\\u00a0 \u00a0--peer-ip-address 169.254.0.2 \\\u00a0 \u00a0--peer-asn 65002 \\\u00a0 \u00a0--region us-central1\n```\n- In the `vertex-networking-vpc` network, create a BGP interface for `vertex-networking-vpc-tunnel1` :```\ngcloud compute routers add-interface vertex-networking-vpc-router1 \\\u00a0 \u00a0--interface-name if-tunnel1-to-onprem \\\u00a0 \u00a0--ip-address 169.254.1.1 \\\u00a0 \u00a0--mask-length 30 \\\u00a0 \u00a0--vpn-tunnel vertex-networking-vpc-tunnel1 \\\u00a0 \u00a0--region us-central1\n```\n- In the `vertex-networking-vpc` network, create a BGP peer for `bgp-onprem-tunnel1` :```\ngcloud compute routers add-bgp-peer vertex-networking-vpc-router1 \\\u00a0 \u00a0--peer-name bgp-onprem-tunnel1 \\\u00a0 \u00a0--interface if-tunnel1-to-onprem \\\u00a0 \u00a0--peer-ip-address 169.254.1.2 \\\u00a0 \u00a0--peer-asn 65002 \\\u00a0 \u00a0--region us-central1\n```\n### Establish BGP sessions for onprem-vpc\n- In the `onprem-vpc` network, create a BGP interface for `onprem-vpc-tunnel0` :```\ngcloud compute routers add-interface onprem-vpc-router1 \\\u00a0 \u00a0--interface-name if-tunnel0-to-vertex-networking-vpc \\\u00a0 \u00a0--ip-address 169.254.0.2 \\\u00a0 \u00a0--mask-length 30 \\\u00a0 \u00a0--vpn-tunnel onprem-vpc-tunnel0 \\\u00a0 \u00a0--region us-central1\n```\n- In the `onprem-vpc` network, create a BGP peer for `bgp-vertex-networking-vpc-tunnel0` :```\ngcloud compute routers add-bgp-peer onprem-vpc-router1 \\\u00a0 \u00a0--peer-name bgp-vertex-networking-vpc-tunnel0 \\\u00a0 \u00a0--interface if-tunnel0-to-vertex-networking-vpc \\\u00a0 \u00a0--peer-ip-address 169.254.0.1 \\\u00a0 \u00a0--peer-asn 65001 \\\u00a0 \u00a0--region us-central1\n```\n- In the `onprem-vpc` network, create a BGP interface for `onprem-vpc-tunnel1` :```\ngcloud compute routers add-interface onprem-vpc-router1 \u00a0\\\u00a0 \u00a0--interface-name if-tunnel1-to-vertex-networking-vpc \\\u00a0 \u00a0--ip-address 169.254.1.2 \\\u00a0 \u00a0--mask-length 30 \\\u00a0 \u00a0--vpn-tunnel onprem-vpc-tunnel1 \\\u00a0 \u00a0--region us-central1\n```\n- In the `onprem-vpc` network, create a BGP peer for `bgp-vertex-networking-vpc-tunnel1` :```\ngcloud compute routers add-bgp-peer onprem-vpc-router1 \\\u00a0 \u00a0--peer-name bgp-vertex-networking-vpc-tunnel1 \\\u00a0 \u00a0--interface if-tunnel1-to-vertex-networking-vpc \\\u00a0 \u00a0--peer-ip-address 169.254.1.1 \\\u00a0 \u00a0--peer-asn 65001 \\\u00a0 \u00a0--region us-central1\n```\n### Validate BGP session creation\n- In the Google Cloud console, go to the **VPN** page. [Go to VPN](https://console.cloud.google.com/hybrid/vpn/list) \n- In the list of VPN tunnels, verify that the value in the **BGP session status** column for each of the tunnels has changed from **Configure BGP session** to **BGP established** . You may need to refresh the Google Cloud console browser tab to see the new values.\n## Create the Private Service Connect (PSC) endpointIn this section, you create a Private Service Connect (PSC) endpoint for Google APIs that VM instances in the `onprem-vpc` network will use to access the GenAI API from your `onprem-vpc` network.\nA is an internal IP address in the `onprem-vpc` network that can be directly accessed by clients in that network. This endpoint is created by deploying a forwarding rule that directs network traffic that matches the PSC endpoint's IP address to a bundle of Google APIs: specifically, the [all-apis](/vpc/docs/about-accessing-google-apis-endpoints#supported-apis) bundle.\nThe PSC endpoint's IP address ( `192.168.0.1` ) will be advertised from the `vertex-networking-vpc-router` Cloud Router as a custom route advertisement to the `onprem-vpc` network in a later step.- Reserve a global internal IP address to assign to the endpoint:```\ngcloud compute addresses create psc-googleapi-ip \\\u00a0 \u00a0--global \\\u00a0 \u00a0--purpose=PRIVATE_SERVICE_CONNECT \\\u00a0 \u00a0--addresses=192.168.0.1 \\\u00a0 \u00a0--network=vertex-networking-vpc\n```\n- Create the endpoint, along with a forwarding rule that connects the endpoint to Google APIs and services:```\ngcloud compute forwarding-rules create pscvertex \\\u00a0 \u00a0--global \\\u00a0 \u00a0--network=vertex-networking-vpc\\\u00a0 \u00a0--address=psc-googleapi-ip \\\u00a0 \u00a0--target-google-apis-bundle=all-apis\n```\n- List the configured PSC endpoints and verify that the `pscvertex` endpoint was created:```\ngcloud compute forwarding-rules list \u00a0\\\u00a0 \u00a0--filter target=\"(all-apis OR vpc-sc)\" --global\n```\n- Get the details of the configured PSC endpoint and verify that the IP address is `192.168.0.1` :```\ngcloud compute forwarding-rules describe \\\u00a0 \u00a0pscvertex --global\n```\n## Create custom route advertisements for vertex-networking-vpcIn this section, you create a [custom route advertisement](/network-connectivity/docs/router/how-to/advertising-custom-ip) for `vertex-networking-vpc-router1` (the Cloud Router for `vertex-networking-vpc` ) to advertise the PSC endpoint's IP address to the `onprem-vpc` network.- In the Google Cloud console, go to the **Cloud Routers** page. [Go to Cloud Routers](https://console.cloud.google.com/hybrid/routers/list) \n- In the Cloud Router list, click `vertex-networking-vpc-router1` .\n- On the **Router details** page, click edit **Edit** .\n- In the **Advertised routes** section, for **Routes** , select **Create custom routes** .\n- Select the **Advertise all subnets visible to the Cloud Router** checkbox to continue advertising the subnets available to the Cloud Router. Enabling this option mimics the behavior of Cloud Router in default advertisement mode.\n- Click **Add a custom route** .\n- For **Source** , select **Custom IP range** .\n- For **IP address range** , enter the following IP address:```\n192.168.0.1\n```\n- For **Description** , enter the following text:```\nCustom route to advertise Private Service Connect endpoint IP address\n```\n- Click **Done** , and then click **Save** .\n### Validate that onprem-vpc has learned the advertised routes\n- In the Google Cloud console, go to the **Routes** page. [Go to Routes](https://console.cloud.google.com/networking/routes/list) \n- On the **Effective routes** tab, do the following:- For **Network** , choose`onprem-vpc`.\n- For **Region** , choose`us-central1 (Iowa)`.\n- Click **View** .\n- In the list of routes, verify that there are entries whose names begin with `onprem-vpc-router1-bgp-vertex-networking-vpc-tunnel0` and `onprem-vpc-router1-bgp-vfertex-networking-vpc-tunnel1` , and that both of them have a **Destination IP range** of `192.168.0.1/32` . ( `192.168.0.1` is the PSC endpoint's IP address.)If these entries don't appear right away, wait a few minutes, and then refresh the Google Cloud console browser tab.## Configure a VM instance in the on-premises networkIn this section, you create a Compute Engine VM instance in the `onprem-vpc` VPC network. This VM instance simulates an on-premises client that connects to the PSC endpoint and accesses the GenAI API.\n### Create a user-managed service accountIn this tutorial, you create a user-managed service account following Compute Engine and IAM [best practices](/iam/docs/service-account-types#default) .- In the Cloud Shell, run the following commands, replacing with your project ID:```\nprojectid=PROJECT_IDgcloud config set project ${projectid}\n```\n- Create the service account:```\ngcloud iam service-accounts create user-managed-sa\n```\n- Assign the [Vertex AI User (roles/aiplatform.user)](/iam/docs/understanding-roles#aiplatform.user) IAM role to the service account:```\ngcloud projects add-iam-policy-binding $projectid \\\u00a0 \u00a0--member=\"serviceAccount:user-managed-sa@$projectid.iam.gserviceaccount.com\" \\\u00a0 \u00a0--role=\"roles/aiplatform.user\"\n```\n### Create the on-prem-client VM instanceIn this step you create the VM instance, which uses the Private Service Connect IP address ( `192.168.0.1` ) to access Google APIs over HA VPN.\nTo allow Identity-Aware Proxy (IAP) to connect to your VM instances, you create a firewall rule that:- Applies to all VM instances that you want to make accessible through IAP. (In this case, there's only`on-prem-client`.)\n- Allows TCP traffic through port 22 from the IP range`35.235.240.0/20`. This range contains all IP addresses that IAP uses for [TCP forwarding](/iap/docs/using-tcp-forwarding#gcloud) .\n- Create the `on-prem-client` VM instance. The following command also installs the `tcpdump` and `dnsutils` packages, which contain the `tcpdump` and `dig` utilities that you'll use later to validate your API requests:```\ngcloud compute instances create on-prem-client \\\u00a0 \u00a0--zone=us-central1-a \\\u00a0 \u00a0--image-family=debian-11 \\\u00a0 \u00a0--image-project=debian-cloud \\\u00a0 \u00a0--subnet=onprem-vpc-subnet1 \\\u00a0 \u00a0--scopes=https://www.googleapis.com/auth/cloud-platform \\\u00a0 \u00a0--no-address \\\u00a0 \u00a0--shielded-secure-boot \\\u00a0 \u00a0--service-account=user-managed-sa@$projectid.iam.gserviceaccount.com \\\u00a0 \u00a0--metadata startup-script=\"#! /bin/bash\u00a0 \u00a0 \u00a0 sudo apt-get update\u00a0 \u00a0 \u00a0 sudo apt-get install tcpdump dnsutils -y\"\n```\n- Create an IAP firewall rule named `ssh-iap-on-prem-vpc` :```\ngcloud compute firewall-rules create ssh-iap-on-prem-vpc \\\u00a0 \u00a0--network onprem-vpc \\\u00a0 \u00a0--allow tcp:22 \\\u00a0 \u00a0--source-ranges=35.235.240.0/20\n```\n## Validate public internet access to Generative AI on Vertex AIIn this section, you log into the `on-prem-client` VM instance using Identity-Aware Proxy, and then you validate public connectivity to Vertex AI APIs (including GenAI) by running the `dig` command against the public Vertex AI domain ( `us-central1-aiplatform.googleapis.com` ).- In the Cloud Shell (Tab One), run the following commands, replacing with your project ID:```\nprojectid=PROJECT_IDgcloud config set project ${projectid}\n```\n- Log into the `on-prem-client` VM instance using IAP:```\ngcloud compute ssh on-prem-client --project=$projectid --zone=us-central1-a --tunnel-through-iap\n```\n- Run the `dig` command:```\ndig us-central1-aiplatform.googleapis.com\n```You should see `dig` output similar to the following, where the IP addresses in the answer section are public IP addresses:```\n; <<>> DiG 9.16.44-Debian <<>> us-central1.aiplatfom.googleapis.com;; global options: +cmd;; Got answer:;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 42506;; flags: qr rd ra; QUERY: 1, ANSWER: 16, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 512;; QUESTION SECTION:;us-central1.aiplatfom.googleapis.com. IN A;; ANSWER SECTION:us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0173.194.192.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0142.250.152.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0172.217.219.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0209.85.146.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0209.85.147.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0142.250.125.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0142.250.136.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0142.250.148.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0209.85.200.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0209.85.234.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0142.251.171.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0108.177.112.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0142.250.128.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0142.251.6.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a0172.217.212.95us-central1.aiplatfom.googleapis.com. 300 IN A \u00a074.125.124.95;; Query time: 8 msec;; SERVER: 169.254.169.254#53(169.254.169.254);; WHEN: Wed Sep 27 04:10:16 UTC 2023;; MSG SIZE \u00a0rcvd: 321\n```\n## Configure and validate private access to Generative AI on Vertex AIIn this section, you configure private access to Generative AI on Vertex AI so that when you send requests to the public service endpoint ( `us-central1-aiplatform.googleapis.com` ), they are redirected to your PSC endpoint instead. The PSC endpoint in turn forwards the request to\n### Update the /etc/hosts file to point to the PSC endpointIn this step, you add a line to the `/etc/hosts` file that causes requests sent to the public service endpoint ( `us-central1-aiplatform.googleapis.com` ) to be redirected to the PSC endpoint ( `192.168.0.1` ).- In the `on-prem-client` VM instance (Tab One), use a text editor such as [vim](https://www.cs.cmu.edu/%7E15131/f17/topics/vim/vim-cheatsheet.pdf) or [nano](https://www.nano-editor.org/dist/latest/cheatsheet.html) to open the `/etc/hosts` file:```\nsudo vim /etc/hosts\n```\n- Add the following line to the file:```\n192.168.0.1 us-central1-aiplatform.googleapis.com\n```This line assigns the PSC endpoint's IP address ( `192.168.0.1` ) to the fully qualified domain name for the Vertex AI Google API ( `us-central1-aiplatform.googleapis.com` ).The edited file should look like this:```\n127.0.0.1 \u00a0 \u00a0 \u00a0 localhost::1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 localhost ip6-localhost ip6-loopbackff02::1 \u00a0 \u00a0 \u00a0 \u00a0 ip6-allnodesff02::2 \u00a0 \u00a0 \u00a0 \u00a0 ip6-allrouters192.168.0.1 us-central1-aiplatform.googleapis.com \u00a0# Added by you172.16.10.6 on-prem-client.us-central1-a.c.vertex-genai-400103.internal on-prem-client \u00a0# Added by Google169.254.169.254 metadata.google.internal \u00a0# Added by Google\n```\n- Save the file as follows:- If you're using`vim`, press the`Esc`key, and then type`:wq`to save the file and exit.\n- If you're using`nano`, type`Control+O`and press`Enter`to save the file, and then type`Control+X`to exit.\n- Ping the Vertex AI endpoint as follows:```\nping us-central1-aiplatform.googleapis.com\n```The `ping` command should return the following output. `192.168.0.1` is the PSC endpoint IP address:```\nPING us-central1-aiplatform.googleapis.com (192.168.0.1) 56(84) bytes of data.\n```\n- Type `Control+C` to exit from `ping` .\n- Run the following `tcpdump` command to validate DNS resolution and IP data path when you send an online prediction request to the endpoint:```\n\u00a0sudo tcpdump -i any port 53 -n or host 192.168.0.1\n```\n### Create the private requestIn this step you create a text file named `request.json` that contains the payload for a sample `curl` request that you send to the GenAI REST API. For more information about sample requests, see [Sample request](/vertex-ai/generative-ai/docs/model-reference/text#sample_request) .- Keeping the `tcpdump` command running in Tab One, open a new Cloud Shell session (Tab Two) by clicking add **open a new tab** in Cloud Shell.\n- In the new Cloud Shell session (Tab Two), run the following commands, replacing with your project ID:```\nprojectid=PROJECT_IDgcloud config set project ${projectid}\n```\n- Log into the `on-prem-client` VM instance using IAP:```\ngcloud compute ssh on-prem-client --project=$projectid --zone=us-central1-a --tunnel-through-iap\n```\n- Run the following commands, replacing with your project ID:```\nprojectid=PROJECT_IDgcloud config set project ${projectid}\n```\n- Use a text editor such as `vim` or `nano` to create a new file named `request.json` that contains the following text:```\n{\u00a0 \u00a0\"instances\": [\u00a0 \u00a0 \u00a0 { \"prompt\": \"Give me ten interview questions for the role of program manager.\"}\u00a0 \u00a0],\u00a0 \u00a0\"parameters\": {\u00a0 \u00a0 \u00a0 \"temperature\": 0.2,\u00a0 \u00a0 \u00a0 \"maxOutputTokens\": 256,\u00a0 \u00a0 \u00a0 \"topK\": 40,\u00a0 \u00a0 \u00a0 \"topP\": 0.95\u00a0 \u00a0}}\n```\n- Run the following command to send a request to the PSC endpoint, which forwards the request to the GenAI API. When the endpoint receives the response, it forwards that back to the `on-prem-client` VM:```\ncurl -X POST \\\u00a0 \u00a0-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0-H \"Content-Type: application/json; charset=utf-8\" \\\u00a0 \u00a0-d @request.json \\\u00a0 \u00a0\"https://us-central1-aiplatform.googleapis.com/v1/projects/$projectid/locations/us-central1/publishers/google/models/text-bison:predict\"\n```You should see a response similar to the following example:```\n{\u00a0 \u00a0\"predictions\": [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"content\": \" 1. **What is your experience in managing programs?**\\n2. **What are your strengths and weaknesses as a program manager?**\\n3. **What is your approach to managing a program?**\\n4. **How do you handle risks and challenges in a program?**\\n5. **How do you communicate with stakeholders in a program?**\\n6. **How do you measure the success of a program?**\\n7. **What is your experience in working with cross-functional teams?**\\n8. **What is your experience in managing budgets and resources?**\\n9. **What is your experience in managing change in a program?**\\n10. **What are your career goals as a program manager?**\",\u00a0 \u00a0 \u00a0 \"citationMetadata\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"citations\": []\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"safetyAttributes\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"categories\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"Finance\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"Health\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"blocked\": false,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"scores\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0.6,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0.1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0],\u00a0 \u00a0\"metadata\": {\u00a0 \u00a0 \u00a0 \"tokenMetadata\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"outputTokenCount\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"totalBillableCharacters\": 505,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"totalTokens\": 153\u00a0 \u00a0 \u00a0 \u00a0 \u00a0},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"inputTokenCount\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"totalBillableCharacters\": 54,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"totalTokens\": 12\u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0}}\n```\n- In Tab One, verify that the PSC endpoint IP address ( `192.168.0.1` ) was used to access Vertex AI APIs from the `on-prem-client` VM instance (subnet `172.16.10.0/28` ).From the `tcpdump` terminal in Cloud Shell Tab One, you can see that a DNS lookup to `us-central1-aiplatform.googleapis.com` isn't needed, because the line that you added to the `/etc/hosts` file takes precedence, and the PSC endpoint's IP address ( `192.168.0.1` ) is used in the data path.You should see `tcpdump` output similar to the following:```\n23:48:49.938797 ens4 \u00a0Out IP 172.16.10.9.38578 > 192.168.0.1.443: Flags [P.], seq 2054:2093, ack 6264, win 501, options [nop,nop,TS val 2943864305 ecr 2340789954], length 3923:48:49.938947 ens4 \u00a0Out IP 172.16.10.9.38578 > 192.168.0.1.443: Flags [P.], seq 2093:2117, ack 6264, win 501, options [nop,nop,TS val 2943864305 ecr 2340789954], length 2423:48:49.939839 ens4 \u00a0Out IP 172.16.10.9.38578 > 192.168.0.1.443: Flags [F.], seq 2117, ack 6264, win 501, options [nop,nop,TS val 2943864306 ecr 2340789954], length 023:48:49.940292 ens4 \u00a0In \u00a0IP 192.168.0.1.443 > 172.16.10.9.38578: Flags [.], ack 2117, win 272, options [nop,nop,TS val 2340789958 ecr 2943864305], length 023:48:49.940437 ens4 \u00a0In \u00a0IP 192.168.0.1.443 > 172.16.10.9.38578: Flags [F.], seq 6264, ack 2117, win 272, options [nop,nop,TS val 2340789958 ecr 2943864305], length 023:48:49.940442 ens4 \u00a0Out IP 172.16.10.9.38578 > 192.168.0.1.443: Flags [.], ack 6265, win 501, options [nop,nop,TS val 2943864307 ecr 2340789958], length 023:48:49.941193 ens4 \u00a0In \u00a0IP 192.168.0.1.443 > 172.16.10.9.38578: Flags [.], ack 2118, win 272, options [nop,nop,TS val 2340789959 ecr 2943864306], length 0\n```## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this tutorial, either [delete the project](/resource-manager/docs/creating-managing-projects#shutting_down_projects) that contains the resources, or keep the project and delete the individual resources.\nYou can delete the individual resources in the project by running the following commands in the Cloud Shell:\n```\n\u00a0 \u00a0projectid=PROJECT_ID\u00a0 \u00a0gcloud config set project ${projectid}\n```\n```\n\u00a0 \u00a0gcloud compute firewall-rules delete ssh-iap-on-prem-vpc --quiet\n```\n```\n\u00a0 \u00a0gcloud compute instances delete on-prem-client --zone=us-central1-a --quiet\n```\n```\n\u00a0 \u00a0gcloud iam service-accounts delete user-managed-sa@$projectid.iam.gserviceaccount.com --quiet\n```\n```\n\u00a0 \u00a0gcloud compute forwarding-rules delete pscvertex --global --quiet\n```\n```\n\u00a0 \u00a0gcloud compute addresses delete psc-googleapi-ip --global --quiet\n```\n```\n\u00a0 \u00a0gcloud compute vpn-tunnels delete vertex-networking-vpc-tunnel0 vertex-networking-vpc-tunnel1 onprem-vpc-tunnel0 onprem-vpc-tunnel1 --region=us-central1 --quiet\n```\n```\n\u00a0 \u00a0gcloud compute routers nats delete us-central-cloudnat-onprem --router=onprem-vpc-router1 --region=us-central1 --quiet\n```\n```\n\u00a0 \u00a0gcloud compute routers delete vertex-networking-vpc-router1 onprem-vpc-router1 --region=us-central1 --quiet\n```\n```\n\u00a0 \u00a0gcloud compute vpn-gateways delete vertex-networking-vpn-gw1 onprem-vpn-gw1 --region=us-central1 --quiet\n```\n```\n\u00a0 \u00a0gcloud compute networks subnets delete onprem-vpc-subnet1 --region=us-central1 --quiet\n```\n```\n\u00a0 \u00a0gcloud compute networks delete onprem-vpc --quiet\n```\n```\n\u00a0 \u00a0gcloud compute networks delete vertex-networking-vpc --quiet\n```## What's next\n- Learn about [enterprise networking options for accessing Vertex AI endpoints and services](/vertex-ai/docs/general/netsec-overview) \n- Learn how to [Access published services through endpoints](/vpc/docs/configure-private-service-connect-services) .\n- Learn [how Private Service Connect works](/vpc/docs/private-service-connect-architecture) and why it offers significant performance benefits.\n- Learn more [About accessing Google APIs through endpoints](/vpc/docs/about-accessing-google-apis-endpoints) .\n- Learn how and why to [use a DNS forwarding zone](/dns/docs/zones/zones-overview#forwarding_zones) instead of updating the`/etc/hosts`file in large scale and [production environments](https://codelabs.developers.google.com/codelabs/vertex-psc-googleapis#17) .\n- Learn more about [custom route advertisements](/network-connectivity/docs/router/concepts/overview#route-advertisement) .", "guide": "Vertex AI"}