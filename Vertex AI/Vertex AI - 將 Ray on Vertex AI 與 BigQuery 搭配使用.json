{"title": "Vertex AI - \u5c07 Ray on Vertex AI \u8207 BigQuery \u642d\u914d\u4f7f\u7528", "url": "https://cloud.google.com/vertex-ai/docs/open-source/ray-on-vertex-ai/bigquery-integration?hl=zh-cn", "abstract": "# Vertex AI - \u5c07 Ray on Vertex AI \u8207 BigQuery \u642d\u914d\u4f7f\u7528\n**    \u9810\u89bd     ** \u672c\u7522\u54c1\u6216\u529f\u80fd\u9808\u9075\u5b88 [\u670d\u52d9\u5c08\u7528\u689d\u6b3e](https://cloud.google.com/terms/service-terms?hl=zh-cn#1) \u7684\u201c\u901a\u7528\u670d\u52d9\u689d\u6b3e\u201d\u90e8\u5206\u4e2d\u7684\u201c\u975e\u6b63\u5f0f\u7248\u7522\u54c1\u689d\u6b3e\u201d\u3002 \u6b63\u5f0f\u767c\u4f48\u524d\u7522\u54c1\u548c\u529f\u80fd\u201c\u6309\u539f\u6a23\u201d\u63d0\u4f9b\uff0c\u53ef\u80fd\u50c5\u63d0\u4f9b\u6709\u9650\u652f\u6301\u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u767c\u4f48\u968e\u6bb5\u8aaa\u660e](https://cloud.google.com/products?hl=zh-cn#product-launch-stages) \u3002\n\u5728 Vertex AI \u4e0a\u904b\u884c Ray \u61c9\u7528\u6642\uff0c\u60a8\u53ef\u4ee5\u5c07 [BigQuery](https://cloud.google.com/bigquery/docs/introduction?hl=zh-cn) \u7528\u4f5c\u96f2\u6578\u64da\u5eab\u3002\u672c\u90e8\u5206\u4ecb\u7d39\u5982\u4f55\u5f9e Vertex AI \u4e0a\u7684 Ray \u96c6\u7fa3\u5c0d BigQuery \u6578\u64da\u5eab\u9032\u884c\u8b80\u53d6\u548c\u5beb\u5165\u64cd\u4f5c\u3002\u672c\u90e8\u5206\u4e2d\u7684\u6b65\u9a5f\u5047\u5b9a\u60a8\u4f7f\u7528\u7684\u662f Python \u7248 Vertex AI SDK \u7248\u672c\uff0c\u5176\u4e2d\u5305\u542b\u4ea4\u4e92\u5f0f Python \u74b0\u5883\u4e2d\u7684 [Ray \u5ba2\u6236\u7aef](https://docs.ray.io/en/latest/cluster/running-applications/job-submission/ray-client.html) \u529f\u80fd\u3002\n\u5982\u679c\u8981\u5f9e BigQuery \u6578\u64da\u96c6\u8b80\u53d6\u6578\u64da\uff0c\u60a8\u61c9\u8a72 [\u65b0\u5efa BigQuery \u6578\u64da\u96c6](https://cloud.google.com/bigquery/docs/datasets?hl=zh-cn) \u6216\u4f7f\u7528\u73fe\u6709\u6578\u64da\u96c6\u3002\n", "content": "## \u5c0e\u5165\u4e26\u521d\u59cb\u5316 Ray on Vertex AI \u5ba2\u6236\u7aef\n\u5982\u679c\u60a8\u5df2\u9023\u63a5\u5230 Vertex AI \u4e0a\u7684 Ray \u96c6\u7fa3\uff0c\u8acb\u91cd\u5553\u5167\u6838\u4e26\u904b\u884c\u4ee5\u4e0b\u4ee3\u78bc\u3002\u9023\u63a5\u6642\u5fc5\u9808\u63a1\u7528 `runtime_env` \u8b8a\u91cf\u624d\u80fd\u904b\u884c BigQuery \u547d\u4ee4\u3002\n```\nimport rayfrom google.cloud import aiplatform# The CLUSTER_RESOURCE_NAME is the one returned from vertex_ray.create_ray_cluster.address = 'vertex_ray://{}'.format(CLUSTER_RESOURCE_NAME)runtime_env = {\u00a0 \u00a0 \"pip\":\u00a0 \u00a0 \u00a0 \u00a0[\"google-cloud-aiplatform[ray]\"]\u00a0 }ray.init(address=address, runtime_env=runtime_env)\n```\n## \u5f9e BigQuery \u4e2d\u8b80\u53d6\u6578\u64da\n\u8b80\u53d6 BigQuery \u6578\u64da\u96c6\u4e2d\u7684\u6578\u64da\u3002\n**\u6ce8\u610f** \uff1a\u67e5\u8a62\u97ff\u61c9\u5927\u5c0f\u7684\u4e0a\u9650\u7232 10 GB\u3002\n```\nfrom vertex_ray import BigQueryDatasourceaiplatform.init()dataset = \"DATASET\"parallelism = NUM_BLOCKSquery = \"SQL_QUERY\"ds = ray.data.read_datasource(\u00a0 \u00a0 BigQueryDatasource(),\u00a0 \u00a0 dataset=dataset,\u00a0 \u00a0 parallelism=parallelism,\u00a0 \u00a0 query=query)ds.fully_executed()\n```\n\u5176\u4e2d\uff1a\n- \uff1aGoogle Cloud \u9805\u76ee ID\n- \uff1aBigQuery \u6578\u64da\u96c6\u3002\u5fc5\u9808\u63a1\u7528 `dataset.table` \u683c\u5f0f\u3002\u5982\u679c\u63d0\u4f9b\u67e5\u8a62\uff0c\u5247\u8a2d\u7f6e\u7232 `None` \u3002\n- \uff1a\u4e00\u500b\u6574\u6578\uff0c\u5c07\u5f71\u97ff\u4e26\u884c\u5275\u5efa\u7684\u8b80\u53d6\u4efb\u52d9\u6578\u3002\u5275\u5efa\u7684\u8b80\u53d6\u6d41\u6578\u53ef\u80fd\u5c11\u65bc\u60a8\u8acb\u6c42\u7684\u6578\u91cf\u3002\n- \uff1a\u5305\u542b\u8981\u5f9e BigQuery \u6578\u64da\u5eab\u8b80\u53d6\u7684 SQL \u67e5\u8a62\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u4e0d\u9700\u8981\u67e5\u8a62\uff0c\u5247\u8a2d\u7f6e\u7232 `None` \u3002## \u8f49\u63db\u6578\u64da\n\u4f7f\u7528 pyrow \u6216 Pandas \u66f4\u65b0\u548c\u522a\u9664 BigQuery \u8868\u4e2d\u7684\u884c\u548c\u5217\u3002\u5982\u679c\u60a8\u60f3\u4f7f\u7528 Pandas \u8f49\u63db\uff0c\u5efa\u8b70\u5c07\u8f38\u5165\u985e\u578b\u4fdd\u7559\u7232 pyrow \u985e\u578b\uff0c\u4e26\u8f49\u63db\u7232\u7528\u6236\u5b9a\u7fa9\u7684\u51fd\u6578 (UDF) \u4e2d\u7684 Pandas \u985e\u578b\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u6355\u7372 UDF \u4e2d\u7684\u4efb\u4f55 Pandas \u8f49\u63db\u985e\u578b\u932f\u8aa4\u3002\n```\nimport pandas as pdimport pyarrow as padef filter_batch(table: pa.Table) -> pa.Table:\u00a0 \u00a0 df = table.to_pandas(types_mapper={pa.int64(): pd.Int64Dtype()}.get)\u00a0 \u00a0 # PANDAS_TRANSFORMATIONS_HERE\u00a0 \u00a0 return pa.Table.from_pandas(df)ds = ds.map_batches(filter_batch, batch_format=\"pyarrow\").random_shuffle()ds.fully_executed()# You can repartition before writing to determine the number of write blocksds = ds.repartition(4)ds.fully_executed()\n```\n## \u5c07\u6578\u64da\u5beb\u5165 BigQuery\n\u5c07\u6578\u64da\u63d2\u5165 BigQuery \u6578\u64da\u96c6\u3002\n```\ndataset = \"DATASET\"ds.write_datasource(\u00a0 \u00a0 BigQueryDatasource(),\u00a0 \u00a0 dataset=dataset)\n```\n\u5176\u4e2d\uff1a\n- \uff1aGoogle Cloud \u9805\u76ee ID\n- \uff1aBigQuery \u6578\u64da\u96c6\u3002\u5fc5\u9808\u63a1\u7528 `dataset.table` \u683c\u5f0f\u3002## \u5f8c\u7e8c\u6b65\u9a5f\n- [\u5728 Vertex AI \u4e0a\u90e8\u7f72\u6a21\u578b\u4e26\u7372\u53d6\u9810\u6e2c\u7d50\u679c](https://cloud.google.com/vertex-ai/docs/open-source/ray-on-vertex-ai/deploy-predict?hl=zh-cn) \n- [\u67e5\u770b Vertex AI \u4e0a\u7684 Ray \u96c6\u7fa3\u7684\u65e5\u8a8c](https://cloud.google.com/vertex-ai/docs/open-source/ray-on-vertex-ai/view-logs?hl=zh-cn) \n- [\u522a\u9664 Ray \u96c6\u7fa3](https://cloud.google.com/vertex-ai/docs/open-source/ray-on-vertex-ai/delete-cluster?hl=zh-cn)", "guide": "Vertex AI"}