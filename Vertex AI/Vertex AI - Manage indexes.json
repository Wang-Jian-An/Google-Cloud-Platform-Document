{"title": "Vertex AI - Manage indexes", "url": "https://cloud.google.com/vertex-ai/docs/vector-search/create-manage-index", "abstract": "# Vertex AI - Manage indexes\nThe following sections describe how to configure, create, list, and delete your indexes.\n", "content": "## Index overview\nAn index is a file or files consisting of your embedding vectors. These vectors are made from large amounts of data you want to deploy and query with Vector Search. With Vector Search, you can create two types of indexes, depending on how you plan to update them with your data. You can create an index designed for [batch updates](#create-index-batch) , or an index designed for [streaming your updates](#create-stream-index) .\nA batch index is for when you want to update your index in a batch, with data which has been stored over a set amount of time, like systems which are processed weekly or monthly. A streaming index is when you want index data to be updated as new data is added to your datastore, for instance, if you have a bookstore and want to show new inventory online as soon as possible. Which type you choose is important, since setup and requirements are different.\n## Configure index parameters\nBefore you [create an index](/vertex-ai/docs/reference/rest/v1/projects.locations.indexes/create) , configure the parameters for your index.\nFor example, create a file named `index_metadata.json` :\n```\n{\n \"contentsDeltaUri\": \"gs://BUCKET_NAME/path\",\n \"config\": {\n \"dimensions\": 100,\n \"approximateNeighborsCount\": 150,\n \"distanceMeasureType\": \"DOT_PRODUCT_DISTANCE\",\n \"shardSize\": \"SHARD_SIZE_MEDIUM\",\n \"algorithm_config\": {\n  \"treeAhConfig\": {\n  \"leafNodeEmbeddingCount\": 5000,\n  \"leafNodesToSearchPercent\": 3\n  }\n }\n }\n}\n```\nYou can find the definition for each of these fields in [Configuring indexes](/vertex-ai/docs/vector-search/configuring-indexes) .\n## Create an index\n### Index size\nIndex data is split into equal parts called shards for processing. When you create an index, you must specify the size of the shards to use. The supported sizes are as follows:\n- `SHARD_SIZE_SMALL`: 2 GiB per shard.\n- `SHARD_SIZE_MEDIUM`: 20 GiB per shard.\n- `SHARD_SIZE_LARGE`: 50 GiB per shard.\nThe machine types that you can use to deploy your index ( [using public endpoints](/vertex-ai/docs/vector-search/deploy-index-public) or [using VPC endpoints](/vertex-ai/docs/vector-search/deploy-index-vpc) ) depends on the shard size of the index. The following table shows the shard sizes that each machine type supports:\n| Machine type | SHARD_SIZE_SMALL | SHARD_SIZE_MEDIUM | SHARD_SIZE_LARGE |\n|:----------------|:-------------------|:--------------------|:-------------------|\n| n1-standard-16 | nan    | nan     | nan    |\n| n1-standard-32 | nan    | nan     | nan    |\n| e2-standard-2 | (default)   | nan     | nan    |\n| e2-standard-16 | nan    | (default)   | nan    |\n| e2-highmem-16 | nan    | nan     | (default)   |\n| n2d-standard-32 | nan    | nan     | nan    |\nTo learn how shard size and machine type affect pricing, see the [Vertex AI pricing page](/vertex-ai/pricing#vectorsearch) .\n### Create an index for batch update\nUse these instructions to create and deploy your index. If you don't have your embeddings ready yet, you can skip to [Create an empty batch index](#create-empty-index-batch) . With this option, no embeddings data is required at index creation time.\nTo [create an index](/vertex-ai/docs/reference/rest/v1/projects.locations.indexes/create) :\nBefore using any of the command data below, make the following replacements:- : The local path to the metadata file.\n- : Display name for the index.\n- : The region where you are using Vertex AI.\n- : Your Google Cloud [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\nExecute the  following  command:\nYou should receive a response similar to the following:\n```\nYou can poll for the status of the operation for the response\nto include \"done\": true. Use the following example to poll the status.\n $ gcloud ai operations describe 1234567890123456789 --project=my-test-project --region=us-central1\n```\nSee [gcloud ai operations](/sdk/gcloud/reference/ai/operations/describe) to learn more about the `describe` command.Before using any of the request data, make the following replacements:- : The Cloud Storage directory path of the index content.\n- : Display name for the index.\n- : The region where you are using Vertex AI.\n- : Your Google Cloud [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : Your project's automatically generated [project number](/resource-manager/docs/creating-managing-projects#identifiers) .\nHTTP method and URL:\n```\nPOST https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/indexes\n```\nRequest JSON body:\n```\n{\n \"display_name\": \"INDEX_NAME\",\n \"metadata\": {\n \"contentsDeltaUri\": \"INPUT_DIR\",\n \"config\": {\n  \"dimensions\": 100,\n  \"approximateNeighborsCount\": 150,\n  \"distanceMeasureType\": \"DOT_PRODUCT_DISTANCE\",\n  \"algorithm_config\": {\n  \"treeAhConfig\": {\n   \"leafNodeEmbeddingCount\": 500,\n   \"leafNodesToSearchPercent\": 7\n  }\n  }\n }\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/indexes/INDEX_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.v1.CreateIndexOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2022-01-08T01:21:10.147035Z\",\n  \"updateTime\": \"2022-01-08T01:21:10.147035Z\"\n }\n }\n}\n```\nThe following sample uses the [google_vertex_ai_index](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/vertex_ai_index) Terraform resource to create an index for batch updates.\nTo learn how to apply or remove a Terraform configuration, see [Basic Terraform commands](/docs/terraform/basic-commands) .\n [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/HEAD/vertex_ai/index/main.tf) \n```\n# Cloud Storage bucket name must be uniqueresource \"random_id\" \"bucket_name_suffix\" {\u00a0 byte_length = 8}# Create a Cloud Storage bucketresource \"google_storage_bucket\" \"bucket\" {\u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"vertex-ai-index-bucket-${random_id.bucket_name_suffix.hex}\"\u00a0 location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"us-central1\"\u00a0 uniform_bucket_level_access = true}# Create index contentresource \"google_storage_bucket_object\" \"data\" {\u00a0 name \u00a0 \u00a0= \"contents/data.json\"\u00a0 bucket \u00a0= google_storage_bucket.bucket.name\u00a0 content = <<EOF{\"id\": \"42\", \"embedding\": [0.5, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"cat\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"feline\"]}]}{\"id\": \"43\", \"embedding\": [0.6, 1.0], \"restricts\": [{\"namespace\": \"class\", \"allow\": [\"dog\", \"pet\"]},{\"namespace\": \"category\", \"allow\": [\"canine\"]}]}EOF}resource \"google_vertex_ai_index\" \"default\" {\u00a0 region \u00a0 \u00a0 \u00a0 = \"us-central1\"\u00a0 display_name = \"sample-index-batch-update\"\u00a0 description \u00a0= \"A sample index for batch update\"\u00a0 labels = {\u00a0 \u00a0 foo = \"bar\"\u00a0 }\u00a0 metadata {\u00a0 \u00a0 contents_delta_uri = \"gs://${google_storage_bucket.bucket.name}/contents\"\u00a0 \u00a0 config {\u00a0 \u00a0 \u00a0 dimensions \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= 2\u00a0 \u00a0 \u00a0 approximate_neighbors_count = 150\u00a0 \u00a0 \u00a0 distance_measure_type \u00a0 \u00a0 \u00a0 = \"DOT_PRODUCT_DISTANCE\"\u00a0 \u00a0 \u00a0 algorithm_config {\u00a0 \u00a0 \u00a0 \u00a0 tree_ah_config {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 leaf_node_embedding_count \u00a0 \u00a0= 500\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 leaf_nodes_to_search_percent = 7\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 index_update_method = \"BATCH_UPDATE\"\u00a0 timeouts {\u00a0 \u00a0 create = \"2h\"\u00a0 \u00a0 update = \"1h\"\u00a0 }}\n```To learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/vector_search/vector_search_create_index_sample.py) \n```\ndef vector_search_create_index(\u00a0 \u00a0 project: str, location: str, display_name: str, gcs_uri: Optional[str] = None) -> None:\u00a0 \u00a0 \"\"\"Create a vector search index.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project (str): Required. Project ID\u00a0 \u00a0 \u00a0 \u00a0 location (str): Required. The region name\u00a0 \u00a0 \u00a0 \u00a0 display_name (str): Required. The index display name\u00a0 \u00a0 \u00a0 \u00a0 gcs_uri (str): Optional. The Google Cloud Storage uri for index content\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # Initialize the Vertex AI client\u00a0 \u00a0 aiplatform.init(project=project, location=location, staging_bucket=gcs_uri)\u00a0 \u00a0 # Create Index\u00a0 \u00a0 index = aiplatform.MatchingEngineIndex.create_tree_ah_index(\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name,\u00a0 \u00a0 \u00a0 \u00a0 description=\"Matching Engine Index\",\u00a0 \u00a0 \u00a0 \u00a0 dimensions=100,\u00a0 \u00a0 \u00a0 \u00a0 approximate_neighbors_count=150,\u00a0 \u00a0 \u00a0 \u00a0 leaf_node_embedding_count=500,\u00a0 \u00a0 \u00a0 \u00a0 leaf_nodes_to_search_percent=7,\u00a0 \u00a0 \u00a0 \u00a0 index_update_method=\"batch_update\", \u00a0# Options: stream_update, batch_update\u00a0 \u00a0 \u00a0 \u00a0 distance_measure_type=aiplatform.matching_engine.matching_engine_index_config.DistanceMeasureType.DOT_PRODUCT_DISTANCE,\u00a0 \u00a0 )\u00a0 \u00a0 print(index.name)\n```Use these instructions to create an index for batch updates.- In the Vertex AI section of the Google Cloud console, go to  the **Deploy and Use** section. Select **Vector Search** [Go to  Vector Search](https://console.cloud.google.com/vertex-ai/matching-engine/indexes) \n- Click **add_box\n  Create new index** to open the **Index** pane. The **Create a new index** pane appears.\n- In the **Display name** field, provide a name to uniquely identify  your index.\n- In the **Description** field, provide a description for what the  index is for.\n- In the **Region** field, select a region from the drop-down.\n- In the Cloud Storage field, search and select the Cloud Storage  folder where your vector data is stored.\n- In the **Algorithm type** drop-down, select the algorithm type that  Vector Search uses for efficient search. If you select the  treeAh algorithm, enter the approximate neighbors count.\n- In the **Dimensions** field, enter the number of dimensions of your  input vectors.\n- In the **Update method** field, select **Batch** .\n- In the **Shard size** field, select from the drop-down the shard  size you want.\n- Click **Create** . Your new index appears in your list of indexes  once it's ready. Note: Build time can take up to an hour to complete.To create and deploy your index right away, you can create an empty batch index. With this option, no embeddings data is required at index creation time.\nTo create an empty index, the request is almost identical to creating an index for batch updates. The difference is you remove the `contentsDeltaUri` field, since you aren't linking a data location. Here's an empty batch index example:\n```\n{\n \"display_name\": INDEX_NAME,\n \"indexUpdateMethod\": \"BATCH_UPDATE\",\n \"metadata\": {\n \"config\": {\n  \"dimensions\": 100,\n  \"approximateNeighborsCount\": 150,\n  \"distanceMeasureType\": \"DOT_PRODUCT_DISTANCE\",\n  \"algorithm_config\": {\n  \"treeAhConfig\": {\n   \"leafNodeEmbeddingCount\": 500,\n   \"leafNodesToSearchPercent\": 7\n  }\n  }\n }\n }\n}\n \n```\n### Create an index for streaming updates\nUse these instructions to create and deploy your streaming index. If you don't have your embeddings ready yet, skip to [Create an empty index for streaming updates](#create-stream-index-empty) . With this option, no embeddings data is required at index creation time.\nBefore using any of the request data, make the following replacements:- : Display name for the index.\n- : A description of the index.\n- : The Cloud Storage directory path of the index content.\n- : Number of dimensions of the embedding vector.\n- : Your Google Cloud [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : Your project's automatically generated [project number](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : The region where you are using Vertex AI.\nHTTP method and URL:\n```\nPOST https://ENDPOINT-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/indexes\n```\nRequest JSON body:\n```\n{\n displayName: \"INDEX_NAME\",\n description: \"DESCRIPTION\",\n metadata: {\n  contentsDeltaUri: \"INPUT_DIR\",\n  config: {\n  dimensions: \"DIMENSIONS\",\n  approximateNeighborsCount: 150,\n  distanceMeasureType: \"DOT_PRODUCT_DISTANCE\",\n  algorithmConfig: {treeAhConfig: {leafNodeEmbeddingCount: 10000, leafNodesToSearchPercent: 2}}\n  },\n },\n indexUpdateMethod: \"STREAM_UPDATE\"\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.ui.CreateIndexOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2023-12-05T23:17:45.416117Z\",\n  \"updateTime\": \"2023-12-05T23:17:45.416117Z\",\n  \"state\": \"RUNNING\",\n  \"worksOn\": [  \"projects/PROJECT_NUMBER/locations/LOCATION/indexes/INDEX_ID\"\n  ]\n }\n }\n}\n```\nUse these instructions to create an index for streaming updates in the Google Cloud console.\nTo [create an index](/vertex-ai/docs/reference/rest/v1/projects.locations.indexes/create)  [ availablefor Streaming Updates requires similar steps to setting up a Batch Update index,except you need to set indexUpdateMethod to STREAM_UPDATE.](None) \n [](None) \n- [](None) \n- [In the Vertex AI section of the Google Cloud console, go to the Deploy and Use section. Select Vector Search](None) [](None)  [Go to  Vector Search](https://console.cloud.google.com/vertex-ai/matching-engine/indexes) \n- Click **add_box\n  Create new index** to open the **Index** pane. The **Create a new index** pane appears.\n- In the **Display name** field, provide a name to uniquely identify your index.\n- In the **Description** field, provide a description for what the index is for.\n- In the **Region** field, select a region from the drop-down.\n- In the Cloud Storage field, search and select the Cloud Storage folder where your   vector data is stored.\n- In the **Algorithm type** drop-down, select the algorithm type that Vector Search  will use to perform your search. If you select the  treeAh algorithm, enter the approximate neighbors count.\n- In the **Dimensions** field, enter the number of dimensions of your input vectors.\n- In the **Update method** field, select **Stream** .\n- In the **Shard size** field, select from the drop-down the shard size you want.\n- Click **Create** . Your new index appears in your list of indexes once it's ready.  Note: Build time can take up to an hour to complete.\nTo learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/vector_search/vector_search_create_index_sample.py) \n```\ndef vector_search_create_index(\u00a0 \u00a0 project: str, location: str, display_name: str, gcs_uri: Optional[str] = None) -> None:\u00a0 \u00a0 \"\"\"Create a vector search index.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project (str): Required. Project ID\u00a0 \u00a0 \u00a0 \u00a0 location (str): Required. The region name\u00a0 \u00a0 \u00a0 \u00a0 display_name (str): Required. The index display name\u00a0 \u00a0 \u00a0 \u00a0 gcs_uri (str): Optional. The Google Cloud Storage uri for index content\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # Initialize the Vertex AI client\u00a0 \u00a0 aiplatform.init(project=project, location=location, staging_bucket=gcs_uri)\u00a0 \u00a0 # Create Index\u00a0 \u00a0 index = aiplatform.MatchingEngineIndex.create_tree_ah_index(\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name,\u00a0 \u00a0 \u00a0 \u00a0 description=\"Matching Engine Index\",\u00a0 \u00a0 \u00a0 \u00a0 dimensions=100,\u00a0 \u00a0 \u00a0 \u00a0 approximate_neighbors_count=150,\u00a0 \u00a0 \u00a0 \u00a0 leaf_node_embedding_count=500,\u00a0 \u00a0 \u00a0 \u00a0 leaf_nodes_to_search_percent=7,\u00a0 \u00a0 \u00a0 \u00a0 index_update_method=\"batch_update\", \u00a0# Options: stream_update, batch_update\u00a0 \u00a0 \u00a0 \u00a0 distance_measure_type=aiplatform.matching_engine.matching_engine_index_config.DistanceMeasureType.DOT_PRODUCT_DISTANCE,\u00a0 \u00a0 )\u00a0 \u00a0 print(index.name)\n```\nTo create and deploy your index right away, you can create an empty index for streaming. With this option, no embeddings data is required at index creation time.\nTo create an empty index, the request is almost identical to creating an index for streaming. The difference is you remove the `contentsDeltaUri` field, since you aren't linking a data location. Here's an empty streaming index example:\n```\n{\n \"display_name\": INDEX_NAME,\n \"indexUpdateMethod\": \"STREAM_UPDATE\",\n \"metadata\": {\n \"config\": {\n  \"dimensions\": 100,\n  \"approximateNeighborsCount\": 150,\n  \"distanceMeasureType\": \"DOT_PRODUCT_DISTANCE\",\n  \"algorithm_config\": {\n  \"treeAhConfig\": {\n   \"leafNodeEmbeddingCount\": 500,\n   \"leafNodesToSearchPercent\": 7\n  }\n  }\n }\n }\n}\n \n```\n## List indexes\nBefore using any of the command data below, make the following replacements:- : Display name for the index.\n- : The region where you are using Vertex AI.\n- : Your Google Cloud [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\nExecute the  following  command:\nYou should receive a response similar to the following:\n```\nYou can poll for the status of the operation for the response\nto include \"done\": true. Use the following example to poll the status.\n $ gcloud ai operations describe 1234567890123456789 --project=my-test-project --region=us-central1\n```\nSee [gcloud ai operations](/sdk/gcloud/reference/ai/operations/describe) to learn more about the `describe` command.Before using any of the request data, make the following replacements:- : Display name for the index.\n- : The region where you are using Vertex AI.\n- : Your Google Cloud [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : Your project's automatically generated [project number](/resource-manager/docs/creating-managing-projects#identifiers) .\nHTTP method and URL:\n```\nGET https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/indexes\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"indexes\": [ {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/indexes/INDEX_ID\",\n  \"displayName\": \"INDEX_NAME\",\n  \"metadataSchemaUri\": \"gs://google-cloud-aiplatform/schema/matchingengine/metadata/nearest_neighbor_search_1.0.0.yaml\",\n  \"metadata\": {\n  \"config\": {\n   \"dimensions\": 100,\n   \"approximateNeighborsCount\": 150,\n   \"distanceMeasureType\": \"DOT_PRODUCT_DISTANCE\",\n   \"featureNormType\": \"NONE\",\n   \"algorithmConfig\": {\n   \"treeAhConfig\": {\n    \"maxLeavesToSearch\": 50,\n    \"leafNodeCount\": 10000\n   }\n   }\n  }\n  },\n  \"etag\": \"AMEw9yNU8YX5IvwuINeBkVv3yNa7VGKk11GBQ8GkfRoVvO7LgRUeOo0qobYWuU9DiEc=\",\n  \"createTime\": \"2020-11-08T21:56:30.558449Z\",\n  \"updateTime\": \"2020-11-08T22:39:25.048623Z\"\n }\n ]\n}\n```\nUse these instructions to view a list of your indexes.- In the Vertex AI section of the Google Cloud console, go to  the **Deploy and Use** section. Select **Vector Search** [Go to  Vector Search](https://console.cloud.google.com/vertex-ai/matching-engine/indexes) \n- A list of your active indexes is displayed.## Tuning the index\nTuning the index requires setting the configuration parameters that impact the performance of deployed indexes, especially recall and latency. These parameters are set when you first create the index. You can [use brute-force indexes](#brute-force-index) to measure recall.\n### Configuration parameters that impact recall and latency\n- `distanceMeasureType`The following values are supported:- `SQUARED_L2_DISTANCE`: Euclidean L2 distance\n- `L1_DISTANCE`: Manhattan L1 distance\n- `COSINE_DISTANCE`: Cosine distance defined as '1 - cosine similarity'\n- `DOT_PRODUCT_DISTANCE`: vDot product distance, defined as a negative of the dot product. This is the default value.\nIn most cases, the embedding vectors used for similarity matching are computed by using metric learning models (also called or ). These models use a distance metric to compute the contrastive loss function. Ideally, the value of the `distanceMeasureType` parameter for the matching index matches the distance measure used by the model that produced the embedding vectors.\n- `approximateNeighborsCount`The default number of neighbors to find by using approximate search before exact reordering is performed. Exact reordering is a procedure where results returned by an approximate search algorithm are reordered by a more expensive distance computation. Increasing this value increases recall, which can create a proportionate increase in latency.\n- `treeAhConfig.leafNodesToSearchPercent`The percentage of leaves to be searched for each query. Increasing this value increases recall, which can also create a proportionate increase in latency. The default value is `10` or 10% of the leaves.\n- `treeAhConfig.leafNodeEmbeddingCount`The number of embeddings for each leaf node. By default, this number is set to `1000` .This parameter does not have a linear correlation to recall. Increasing or decreasing the value of the `treeAhConfig.leafNodeEmbeddingCount` parameter doesn't always increase or decrease recall. Experiment to find the optimal value. Changing the value of the `treeAhConfig.leafNodeEmbeddingCount` parameter generally has less effect than changing the value of the other parameters.\n### Using a brute-force index to measure recall\nTo get the exact nearest neighbors, use indexes with the brute-force algorithm. The brute-force algorithm provides 100% recall at the expense of higher latency. Using a brute-force index to measure recall is usually not a good choice for production serving, but you might find it useful for evaluating the recall of various indexing options offline.\nTo create an index with the brute-force algorithm, specify `brute_force_config` in the index metadata:\n```\ncurl -X POST -H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer `gcloud auth print-access-token`\" \\\nhttps://us-central1-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/us-central1/indexes \\\n-d '{\n displayName: \"'${DISPLAY_NAME}'\",\n description: \"'${DESCRIPTION}'\",\n metadata: {\n  contentsDeltaUri: \"'${INPUT_DIR}'\",\n  config: {\n   dimensions: 100,\n   approximateNeighborsCount: 150,\n   distanceMeasureType: \"DOT_PRODUCT_DISTANCE\",\n   featureNormType: \"UNIT_L2_NORM\",\n   algorithmConfig: {\n    bruteForceConfig: {}\n   }\n  },\n },\n}'\n```\n## Delete an index\n**Note:** You can't delete the `index` until all its `index.deployed_indexes` have been undeployed.\nBefore using any of the command data below, make the following replacements:- : The ID of the index.\n- : The region where you are using Vertex AI.\n- : Your Google Cloud [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\nExecute the  following  command:Before using any of the request data, make the following replacements:- : The ID of the index.\n- : The region where you are using Vertex AI.\n- : Your Google Cloud [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : Your project's automatically generated [project number](/resource-manager/docs/creating-managing-projects#identifiers) .\nHTTP method and URL:\n```\nDELETE https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT_NUMBER/locations/LOCATION/indexes/INDEX_ID\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/indexes/INDEX_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.v1.DeleteOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2022-01-08T02:35:56.364956Z\",\n  \"updateTime\": \"2022-01-08T02:35:56.364956Z\"\n }\n },\n \"done\": true,\n \"response\": {\n \"@type\": \"type.googleapis.com/google.protobuf.Empty\"\n }\n}\n```\nUse these instructions to delete one or more indexes.- In the Vertex AI section of the Google Cloud console, go to  the **Deploy and Use** section. Select **Vector Search** [Go to  Vector Search](https://console.cloud.google.com/vertex-ai/matching-engine/indexes) \n- A list of your active indexes is displayed.\n- To delete an index, go to themore_vertoptions  menu that is in the same row as the index and select **Delete** .## What's next\n- Learn how to [Configure indexes](/vertex-ai/docs/vector-search/configuring-indexes) \n- Learn how to [Deploy and manage public index endpoints](/vertex-ai/docs/vector-search/deploy-index-public) \n- Learn how to [Deploy and manage index endpoints in a VPC network](/vertex-ai/docs/vector-search/deploy-index-vpc) \n- Learn how to [Update and rebuild your index](/vertex-ai/docs/vector-search/update-rebuild-index) \n- Learn how to [Monitor an index](/vertex-ai/docs/vector-search/monitor)", "guide": "Vertex AI"}