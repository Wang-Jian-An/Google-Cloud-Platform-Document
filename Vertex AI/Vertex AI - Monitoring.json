{"title": "Vertex AI - Monitoring", "url": "https://cloud.google.com/vertex-ai/docs/featurestore/monitoring", "abstract": "# Vertex AI - Monitoring\nTo learn more,  run the \"Example Feature Store workflow with sample data\" Jupyter notebook in one of the following  environments: [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/feature_store/sdk-feature-store.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Ffeature_store%2Fsdk-feature-store.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/feature_store/sdk-feature-store.ipynb)\nIn Vertex AI Feature Store (Legacy), you can monitor and set alerts on featurestores and features. For example, an operations team might monitor a featurestore to track its CPU utilization. Feature owners, such as data scientists, might monitor feature values to detect drift over time.\nThe methods for monitoring featurestores and features are described in the following sections:\n- [Featurestore monitoring](#featurestore) \n- [Feature monitoring](#feature) ", "content": "## Featurestore monitoring\nVertex AI Feature Store (Legacy) reports metrics about your featurestore to Cloud Monitoring such as the CPU load, storage capacity, and request latencies. Vertex AI collects and reports these metrics for you. You do not need to configure or enable featurestore monitoring.\nTo configure thresholds and notifications, use Cloud Monitoring. For example, you can set an alert if the average CPU load exceeds 70%, which might require you to increase the number of featurestore nodes.\nYou can also view featurestore metrics in the Vertex AI section of the Google Cloud console to see trends over time. For some charts, the console shows aggregated or calculated values to make the information easier to consume. You can always view the raw data in Cloud Monitoring.\nFor more information, see [Vertex AI Feature Store (Legacy) monitoringmetrics](/vertex-ai/docs/general/monitoring-metrics) on the Vertex AI Cloud Monitoring page.\n## Feature value monitoring\nFeature value monitoring enables you to track how much a feature's value distribution changes in a featurestore. The following types of feature value monitoring are supported:\n- [](None) **Snapshot Analysis** : Vertex AI Feature Store (Legacy) takes periodic snapshots of your feature values. Over time, as you ingest more data, you might notice the distribution of your feature values change. This change indicates that any models using those features might need to be retrained. You can specify a threshold so that anomalies are logged in the Cloud Logging console whenever the distribution deviation crosses the threshold.For datasets exceeding 5 million entity IDs, Vertex AI Feature Store (Legacy) generates snapshots based on 5 million randomly selected entity IDs within the time window that you specified as the number of staleness days.\n- **Import Feature Analysis** : Each `ImportFeatureValues` operation generates distribution statistics for the values ingested into Vertex AI Feature Store (Legacy). You can choose to detect anomalies by comparing your distribution statistics with the previously imported feature value distribution or, if enabled, the snapshot distribution.For datasets exceeding 5 million instances, Vertex AI Feature Store (Legacy) generates snapshots based on randomly selected data, as follows:- If the number instances within the ingested dataset exceeds 5 million but does not exceed 50 million, then the snapshot is generated based on 5 million randomly selected instances.\n- If the number of instances within the ingested dataset exceeds 50 million, then the snapshot is generated based on 10% of the instances, selected randomly.**Note:** A snapshot based on randomly selected samples improves cost efficiency. However, such a snapshot might not fully represent the feature value distribution of the entire dataset, compared to a snapshot that represents the entire dataset.\nFor example, consider a feature that collects prices of recently sold homes and then feeds the values into a model for predicting the price of a house. The prices of recently sold homes might drift significantly over time, or the batch of imported values might contain data that deviates significantly from the training data. Vertex AI Feature Store (Legacy) alerts you of this change. You can then retrain your model to use the latest information.\n### Set a monitoring configuration\nTo start monitoring, you can define a monitoring configuration on an entity type, which enables monitoring for all features of the following types:\n- `BOOL`\n- `STRING`\n- `DOUBLE`\n- `INT64`\nYou can set the monitoring configuration when you create an entity type. You can also choose to opt out of monitoring for specific features by setting the `disableMonitoring` property. The entity type monitoring configuration specifies the following:\n- Whether to enable monitoring. Monitoring is disabled by default.\n- Thresholds used to detect anomalies. Default threshold is 0.3.\n- Lookback window in addition to the interval between snapshots (for snapshot analysis). Default value is 21.\n- Whether to enable import feature analysis. Default is disabled.\nFor more information, see the [FeaturestoreMonitoringConfig](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes#featurestoremonitoringconfig) type in the API reference.\nThe following example creates an entity type, where feature monitoring is enabled:\nOnly [snapshot analysis](#snapshot_analysis) is supported from the UI.- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- Click **Create Entity Type** .\n- Flip the **Feature monitoring** section to **Enabled** .\n- Enter the number of days between snapshots in the **Monitoring time interval** field.The monitoring job for an entity type or feature runs at the nearest round hour following the time of the day when you enable monitoring for the entity type or feature. For example, if you enable monitoring at 10:30 PM on Monday and specify two days as the monitoring time interval, the first monitoring job runs at 11 PM on Wednesday.\n- Enter the number of days to look back for each snapshot in the **Monitoring lookback window** field.\n- Enter the number for the threshold used for detecting anomalies for numerical features in the **Numerical alerting threshold** field.\n- Enter the number for the threshold used for detecting anomalies for categorical features in this EntityType in the **Categorical alerting threshold** field.For more information about detecting feature value anomalies, see [View feature value anomalies](#view_feature_value_anomalies) .\n- Click **Create** .\n- In the features table, click an entity type.\n- To add new features to the entity, click **Add Features** .\n- To opt out of monitoring for a specific feature, toggle off **Enable monitoring** .\nTo create an entity type, send a POST request by using the [entityTypes.create](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes/create) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- : The interval duration between snapshots in days.\n- : The number of days to look back when taking snapshots.\n- : The threshold to detect anomalies for numerical features under this entity type. Statistics deviation is calculated by the Jenson-Shannon divergence.\n- : The threshold to detect anomalies for categorical features under this entity type. Statistics deviation is calculated by the L-Infinity distance.\n- : The state indicating whether to enable import feature analysis.\n- : The baseline for import feature analysis if enabled.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes?entityTypeId=ENTITY_TYPE_ID\n```\nRequest JSON body:\n```\n{\n \"monitoringConfig\": {\n \"snapshotAnalysis\": {\n  \"monitoringIntervalDays\": \"DURATION\"\n  \"stalenessDays\": \"STALENESS_DAYS\"\n }\n },\n \"numericalThresholdConfig\": {\n \"value\": \"NUMERICAL_THRESHOLD_VALUE\"\n },\n \"categoricalThresholdConfig\": {\n \"value\": \"CATEGORICAL_THRESHOLD_VALUE\"\n },\n \"importFeatureAnalysis\": {\n \"state\": \"IMPORT_FEATURE_ANALYSIS_STATE\",\n \"anomalyDetectionBaseline\": \"IMPORT_FEATURE_ANALYSIS_BASELINE\"\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes?entityTypeId=ENTITY_TYPE_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes?entityTypeId=ENTITY_TYPE_ID\" | Select-Object -Expand Content\n```\nYou should see output similar to the following. You can use the in the response to [get the status](/vertex-ai/docs/general/long-running-operations) of the operation.\n```\n{\n \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.ui.CreateEntityTypeOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2022-04-29T20:29:05.206525Z\",\n  \"updateTime\": \"2022-04-29T20:29:05.206525Z\"\n }\n }\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/CreateEntityTypeMonitoringSample.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.aiplatform.v1.CreateEntityTypeOperationMetadata;import com.google.cloud.aiplatform.v1.CreateEntityTypeRequest;import com.google.cloud.aiplatform.v1.EntityType;import com.google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig;import com.google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.SnapshotAnalysis;import com.google.cloud.aiplatform.v1.FeaturestoreName;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class CreateEntityTypeMonitoringSample {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 String entityTypeId = \"YOUR_ENTITY_TYPE_ID\";\u00a0 \u00a0 String description = \"YOUR_ENTITY_TYPE_DESCRIPTION\";\u00a0 \u00a0 int monitoringIntervalDays = 1;\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 int timeout = 300;\u00a0 \u00a0 createEntityTypeMonitoringSample(\u00a0 \u00a0 \u00a0 \u00a0 project,\u00a0 \u00a0 \u00a0 \u00a0 featurestoreId,\u00a0 \u00a0 \u00a0 \u00a0 entityTypeId,\u00a0 \u00a0 \u00a0 \u00a0 description,\u00a0 \u00a0 \u00a0 \u00a0 monitoringIntervalDays,\u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 endpoint,\u00a0 \u00a0 \u00a0 \u00a0 timeout);\u00a0 }\u00a0 static void createEntityTypeMonitoringSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 String entityTypeId,\u00a0 \u00a0 \u00a0 String description,\u00a0 \u00a0 \u00a0 int monitoringIntervalDays,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint,\u00a0 \u00a0 \u00a0 int timeout)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 FeaturestoreMonitoringConfig featurestoreMonitoringConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreMonitoringConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSnapshotAnalysis(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SnapshotAnalysis.newBuilder().setMonitoringIntervalDays(monitoringIntervalDays))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 EntityType entityType =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EntityType.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDescription(description)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setMonitoringConfig(featurestoreMonitoringConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 CreateEntityTypeRequest createEntityTypeRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CreateEntityTypeRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(FeaturestoreName.of(project, location, featurestoreId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEntityType(entityType)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEntityTypeId(entityTypeId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<EntityType, CreateEntityTypeOperationMetadata> entityTypeFuture =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.createEntityTypeAsync(createEntityTypeRequest);\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Operation name: %s%n\", entityTypeFuture.getInitialFuture().get().getName());\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to finish...\");\u00a0 \u00a0 \u00a0 EntityType entityTypeResponse = entityTypeFuture.get(timeout, TimeUnit.SECONDS);\u00a0 \u00a0 \u00a0 System.out.println(\"Create Entity Type Monitoring Response\");\u00a0 \u00a0 \u00a0 System.out.format(\"Name: %s%n\", entityTypeResponse.getName());\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/create-entity-type-monitoring-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const entityTypeId = 'YOUR_ENTITY_TYPE_ID';// const description = 'YOUR_ENTITY_TYPE_DESCRIPTION';// const duration = <MONITORING_INTERVAL_IN_SECONDS>;// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} =\u00a0 require('@google-cloud/aiplatform').v1beta1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function createEntityTypeMonitoring() {\u00a0 // Configure the parent resource\u00a0 const parent = `projects/${project}/locations/${location}/featurestores/${featurestoreId}`;\u00a0 const entityType = {\u00a0 \u00a0 description: description,\u00a0 \u00a0 monitoringConfig: {\u00a0 \u00a0 \u00a0 snapshotAnalysis: {\u00a0 \u00a0 \u00a0 \u00a0 monitoringInterval: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: Number(duration),\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 };\u00a0 const request = {\u00a0 \u00a0 parent: parent,\u00a0 \u00a0 entityTypeId: entityTypeId,\u00a0 \u00a0 entityType: entityType,\u00a0 };\u00a0 // Create EntityType request\u00a0 const [operation] = await featurestoreServiceClient.createEntityType(\u00a0 \u00a0 request,\u00a0 \u00a0 {timeout: Number(timeout)}\u00a0 );\u00a0 const [response] = await operation.promise();\u00a0 console.log('Create entity type monitoring response');\u00a0 console.log(`Name : ${response.name}`);\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}createEntityTypeMonitoring();\n```To learn how to install and use the Vertex AI SDK for Python, see [Use the Vertex AI SDK for Python](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) . For more information, see the [Vertex AI SDK for Python API reference documentation.](/python/docs/reference/aiplatform/latest)\nThe following example creates a new feature with monitoring turned off:\nTo create a feature, send a POST request by using the [features.create](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features/create) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- : ID of the feature.\n- : The value type of the feature.\n- : Set to true to explicitly opt out of monitoring.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID?featureId=/FEATURE_ID\n```\nRequest JSON body:\n```\n{\n \"disableMonitoring\": \"DISABLE_MONITORING\",\n \"valueType\": \"VALUE_TYPE\"\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID?featureId=/FEATURE_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID?featureId=/FEATURE_ID\" | Select-Object -Expand Content\n```\nYou should see output similar to the following. You can use the in the response to [get the status](/vertex-ai/docs/general/long-running-operations) of the operation.\n```\n{\n \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.ui.CreateFeatureOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2022-04-29T20:29:05.206525Z\",\n  \"updateTime\": \"2022-04-29T20:29:05.206525Z\"\n }\n }\n}\n```\n### Update monitoring configuration\nYou can set the monitoring configuration when updating an entity type. You can also choose to opt out of monitoring for specific features by setting the `disableMonitoring` property.\nThe following example updates the monitoring configuration for an existing entity type and specific features for that entity type:\nOnly [snapshot analysis](#snapshot_analysis) is supported from the UI.- In the Vertex AI section of the Google Cloud console, go to the **Features** page.\n- Select a region from the **Region** drop-down list.\n- In the features table, view the **Entity type** column to find the entity type to update.\n- Click the name of the entity type name to view the entity details page.\n- From the action bar, click **Edit Info** .\n- In **Monitoring time interval** , enter the number of days between snapshots.The monitoring job for an entity type or feature runs at the nearest round hour following the time of the day when you enable monitoring for the entity type or feature. For example, if you enable monitoring at 10:30 PM on Monday and specify two days as the monitoring time interval, the first monitoring job runs at 11 PM on Wednesday.\n- Click **Update** .\n- Similarly, in the features table, view the **Features** column to find the feature to update.\n- Click the feature name to view the details page.\n- From the action bar, click **Edit Info** .\n- To opt out of monitoring for a specific feature, toggle off **Monitoring enabled** .\nTo update an entity type, send a PATCH request by using the [entityTypes.patch](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes/patch) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- : The interval duration between snapshots in days.\n- : The number of days to look back when taking snapshots.\n- : The threshold to detect anomalies for numerical features under this entity type. Statistics deviation is calculated by the Jenson-Shannon divergence.\n- : The threshold to detect anomalies for categorical features under this entity type. Statistics deviation is calculated by the L-Infinity distance.\n- : The state indicating whether to enable import feature analysis.\n- : The baseline indicating ????\nHTTP method and URL:\n```\nPATCH https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID\n```\nRequest JSON body:\n```\n{\n \"monitoringConfig\": {\n \"snapshotAnalysis\": {\n  \"monitoringIntervalDays\": \"DURATION_IN_DAYS\",\n  \"stalenessDays\": \"STALENESS_DAYS\"\n }\n },\n \"numericalThresholdConfig\": {\n \"value\": \"NUMERICAL_THRESHOLD_VALUE\"\n },\n \"categoricalThresholdConfig\": {\n \"value\": \"CATEGORICAL_THRESHOLD_VALUE\"\n },\n \"importFeatureAnalysis\": {\n \"state\": \"IMPORT_FEATURE_ANALYSIS_STATE\",\n \"anomalyDetectionBaseline\": \"IMPORT_FEATURE_ANALYSIS_BASELINE\"\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X PATCH \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method PATCH ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID\",\n \"createTime\": \"2021-07-22T23:18:31.339972Z\",\n \"updateTime\": \"2021-07-29T22:24:40.221821Z\",\n \"etag\": \"AMEw9yPGDpwUwHx39gIDIg5mTQz65GMhnYHRzRslVPonm1g8xTnsTC5YUibmWo2MIuI=\",\n \"monitoringConfig\": {\n \"snapshotAnalysis\": {\n  \"monitoringIntervalDays\": \"DURATION_IN_DAYS\",\n  \"stalenessDays\": \"STALENESS_DAYS\"\n }\n },\n \"numericalThresholdConfig\": {\n \"value\": \"NUMERICAL_THRESHOLD_VALUE\"\n },\n \"categoricalThresholdConfig\": {\n \"value\": \"CATEGORICAL_THRESHOLD_VALUE\"\n },\n \"importFeatureAnalysis\": {\n \"state\": \"IMPORT_FEATURE_ANALYSIS_STATE\",\n \"anomalyDetectionBaseline\": \"IMPORT_FEATURE_ANALYSIS_BASELINE\"\n }\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/UpdateEntityTypeMonitoringSample.java) \n```\nimport com.google.cloud.aiplatform.v1.EntityType;import com.google.cloud.aiplatform.v1.EntityTypeName;import com.google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig;import com.google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.SnapshotAnalysis;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import com.google.cloud.aiplatform.v1.UpdateEntityTypeRequest;import java.io.IOException;public class UpdateEntityTypeMonitoringSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 String entityTypeId = \"YOUR_ENTITY_TYPE_ID\";\u00a0 \u00a0 int monitoringIntervalDays = 1;\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 updateEntityTypeMonitoringSample(\u00a0 \u00a0 \u00a0 \u00a0 project, featurestoreId, entityTypeId, monitoringIntervalDays, location, endpoint);\u00a0 }\u00a0 static void updateEntityTypeMonitoringSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 String entityTypeId,\u00a0 \u00a0 \u00a0 int monitoringIntervalDays,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 FeaturestoreMonitoringConfig featurestoreMonitoringConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreMonitoringConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSnapshotAnalysis(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SnapshotAnalysis.newBuilder().setMonitoringIntervalDays(monitoringIntervalDays))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 EntityType entityType =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EntityType.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EntityTypeName.of(project, location, featurestoreId, entityTypeId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setMonitoringConfig(featurestoreMonitoringConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 UpdateEntityTypeRequest updateEntityTypeRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UpdateEntityTypeRequest.newBuilder().setEntityType(entityType).build();\u00a0 \u00a0 \u00a0 EntityType entityTypeResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.updateEntityType(updateEntityTypeRequest);\u00a0 \u00a0 \u00a0 System.out.println(\"Update Entity Type Monitoring Response\");\u00a0 \u00a0 \u00a0 System.out.println(entityTypeResponse);\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/update-entity-type-monitoring-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const entityTypeId = 'YOUR_ENTITY_TYPE_ID';// const duration = <MONITORING_INTERVAL_IN_SECONDS>;// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} =\u00a0 require('@google-cloud/aiplatform').v1beta1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function updateEntityTypeMonitoring() {\u00a0 // Configure the name resource\u00a0 const name = `projects/${project}/locations/${location}/featurestores/${featurestoreId}/entityTypes/${entityTypeId}`;\u00a0 // Constructing the monitoring configuration\u00a0 const monitoringConfig = {\u00a0 \u00a0 snapshotAnalysis: {\u00a0 \u00a0 \u00a0 monitoringInterval: {\u00a0 \u00a0 \u00a0 \u00a0 seconds: Number(duration),\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 };\u00a0 // Constructing the entityType\u00a0 const entityType = {\u00a0 \u00a0 name: name,\u00a0 \u00a0 monitoringConfig: monitoringConfig,\u00a0 };\u00a0 const request = {\u00a0 \u00a0 entityType: entityType,\u00a0 };\u00a0 // Update EntityType request\u00a0 const [response] = await featurestoreServiceClient.updateEntityType(\u00a0 \u00a0 request,\u00a0 \u00a0 {timeout: Number(timeout)}\u00a0 );\u00a0 console.log('Update entity type monitoring response');\u00a0 console.log(`Name : ${response.name}`);\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}updateEntityTypeMonitoring();\n```\nThe following example turns off monitoring for an existing feature:\nTo update a feature, send a PATCH request by using the [features.patch](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features/patch) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- : ID of the feature to update.\n- : Set to true to explicitly opt out of monitoring.\nHTTP method and URL:\n```\nPATCH https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID\n```\nRequest JSON body:\n```\n{\n \"disableMonitoring\": \"DISABLE_MONITORING\"\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X PATCH \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method PATCH ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID\",\n \"valueType\": \"FEATURE_VALUE_TYPE\",\n \"createTime\": \"2021-07-22T23:18:31.339972Z\",\n \"updateTime\": \"2021-07-29T22:24:40.221821Z\",\n \"etag\": \"AMEw9yPGDpwUwHx39gIDIg5mTQz65GMhnYHRzRslVPonm1g8xTnsTC5YUibmWo2MIuI=\",\n \"disableMonitoring\": \"DISABLE_MONITORING\"\n}\n```### View feature value distributions\nUse the Google Cloud console to view the distribution of feature values over time.\n- In the Vertex AI section of the Google Cloud console, go to the **Features** page. [Go to theFeatures page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- To view the feature value distributions for all features of an entity type, in the **Entity type** column, click the entity type. **Note:** The entity type features table displays the feature value distribution statistics for a feature only if monitoring is enabled for that feature. When a feature value is updated, the information in this table is not updated until monitoring runs at least once. This delay depends on the monitoring time interval configured for the snapshot analysis. For more information, see [Set a monitoring configuration](#set_a_monitoring_configuration) .\n- To view feature value distribution metrics for a feature:- In the **Feature** column, click the feature.\n- Click **Metrics** tab to view the feature value distribution metrics.\n **Note:** You can view feature distribution metrics only if monitoring is enabled for a feature. On the **Feature properties** tab, verify that the **Status** field under **Feature monitoring** shows `Enabled` . All other feature monitoring settings are inherited from the parent entity type.### View feature value anomalies\nIf the feature value distribution deviates beyond the specified threshold in a monitoring pipeline, it's considered an anomaly. There are two types of anomalies\u2014training-serving skew and drift. To calculate the deviation, Vertex AI compares the latest feature values in production with a baseline.\n- To detect training-serving skew, Vertex AI compares the latest feature values in production with the statistical distribution of feature values in the training data. In this case, the statistical distribution of feature values in the training data is considered as the baseline distribution. [Learn more about training-serving skew.](/vertex-ai/docs/featurestore/overview#mitigate_training_serving_skew) \n- To detect drift, Vertex AI compares the latest feature values in production with the statistical distribution of feature values from the most recent monitoring run that occurred at least one hour ago. In this case, the statistical distribution of feature values from the most recent monitoring run is considered as the baseline distribution. [Learn more about drift.](/vertex-ai/docs/featurestore/overview#detect_drift) \nIn both cases, the baseline distribution is compared to the latest feature values in production to calculate a distance score.\n- For categorical features, the distance score is calculated using the [L-infinity distance](https://en.wikipedia.org/wiki/Chebyshev_distance) . In this case, if the distance score exceeds the threshold you specify in the **Categorical alerting threshold** field, it's identified as an anomaly.\n- For numerical features, the distance score is calculated using the [Jensen-Shannon divergence](https://en.wikipedia.org/wiki/Jensen%E2%80%93Shannon_divergence) . In this case, if the distance score exceeds the threshold you specify in the **Numerical alerting threshold** field, it's identified as an anomaly.\nIn either case, the anomaly might be a training-serving skew or a drift, depending on the baseline distribution used to calculate the distance score. An anomaly log is written to Cloud Logging with the log name `featurestore_log` . You can sync the logs to any downstream service Cloud Logging supports, such as Pub/Sub.\nFor more information about setting the alert thresholds, see [Create an entity type with monitoring enabled](#create_an_entity_type_with_monitoring) .\n```\nlogName=\"projects/model-monitoring-demo/logs/aiplatform.googleapis.com%2FFfeaturestore_log\"resource.labels.resource_container=<project_number>resource.labels.featurestore_id=<featurestore_id>\n```\n```\n{\u00a0 \"insertId\": \"ktbx5jf7vdn7b\",\u00a0 \"jsonPayload\": {\u00a0 \u00a0 \"threshold\": 0.001,\u00a0 \u00a0 \"featureName\": \"projects/<project_number>/locations/us-central1/featurestores/<featurestore_id>/entityTypes/<entity_type_id>/features/<feature_id>\",\u00a0 \u00a0 \"deviation\": 1,\u00a0 \u00a0 \"@type\": \"type.googleapis.com/google.cloud.aiplatform.logging.FeatureAnomalyLogEntry\",\u00a0 \u00a0 \"objective\": \"Featurestore Monitoring Snapshot Drift Anomaly\"\u00a0 },\u00a0 \"resource\": {\u00a0 \u00a0 \"type\": \"aiplatform.googleapis.com/Featurestore\",\u00a0 \u00a0 \"labels\": {\u00a0 \u00a0 \u00a0 \"resource_container\": \"<project_number>\",\u00a0 \u00a0 \u00a0 \"location\": \"us-central1\",\u00a0 \u00a0 \u00a0 \"featurestore_id\": \"<featurestore_id>\"\u00a0 \u00a0 }\u00a0 },\u00a0 \"timestamp\": \"2022-02-06T00:54:06.455501Z\",\u00a0 \"severity\": \"WARNING\",\u00a0 \"logName\": \"projects/model-monitoring-demo/logs/aiplatform.googleapis.com%2Ffeaturestore_log\",\u00a0 \"receiveTimestamp\": \"2022-02-06T00:54:06.476107155Z\"}\n```\n### Monitor offline storage write errors for streaming ingestion\nUse the Google Cloud console to monitor write errors to the offline storage during streaming ingestion.\nYou can monitor the **Offline storage write for streaming write** metric for Vertex AI Feature Store (Legacy) in the **Metrics Explorer** .\n- In the Google Cloud console, go to the **Metrics Explorer** : [Go to the Metrics Explorer](https://console.cloud.google.com/monitoring/metrics-explorer) \n- In toolbar, select the **Explorer** tab.\n- In the **Configuration** tab, specify the data to appear on the chart:- **Resource & Metric** : Select the metric **Vertex AI Feature Store - Offline storage write for streaming write** .\n- **Group by** : Select `error_code` .\n- **Minimum alignment period** : Specifies the minimum time interval for aligning the data in the chart.\n- After you update these fields, the chart displays the offline storage write errors for the various error codes.After you generate the chart, you can add it to your custom dashboard. For more information, see see [Save a chart for future reference](/monitoring/charts/metrics-explorer#save) .You can view the log entries for your featurestore, including logs generated during offline store write errors, in the **Logs Explorer** .\n- In the Google Cloud console, go to the **Logs Explorer** : [Go to the Logs Explorer](https://console.cloud.google.com/logs/query) \n- In the **Query builder** , add the following query parameters and then click **Run query** :- **Resource** : Select **Vertex AI Feature Store** .\n- **Log name** : Under **Vertex AI API** , select`aiplatform.googlapis.com/featurestore_log`.", "guide": "Vertex AI"}