{"title": "Vertex AI - Model versioning with Model Registry", "url": "https://cloud.google.com/vertex-ai/docs/model-registry/versioning", "abstract": "# Vertex AI - Model versioning with Model Registry\nModel versioning lets you create multiple versions of the same model. With model versioning, you can organize your models in a way that helps navigate and understand which changes had what effect on the models. With Model Registry you can view your models and all of their versions in a single view. You can drill down into specific model versions and see exactly how they performed.\n", "content": "## Import a new model version\nFrom the Model Registry, you can import a model as a new version of an existing model.\n- In the Google Cloud console, go to the **Model Registry** page. [Go to Model Registry](https://console.cloud.google.com/vertex-ai/models) \n- On the top of the page, select **Import** .\n- Select **Import as new version** .\n- From the drop-down, select the model this is a new version of. Add an optional version description.\n- Optionally set this model as the default version. The default version is preselected  whenever the model is used for prediction (although you can still select other versions).\n- Select your Region.\n- Select **Continue** .\n- From the Model settings, define what container you want to use. You can select to  import model artifacts into a new pre-built container or import into an existing custom container.  To learn more about containers, see [Import models to Vertex AI](https://cloud.google.com/vertex-ai/docs/model-registry/import-model) .\n- Select **Continue** .\n- Optional: Add explainability support to your model.\n- Select **Import** .\nBefore using any of the request data, make the following replacements:- : The project ID.\n- : The location.\n- : The model name.\n- : The path to the directory containing the model artifact and any of its supporting files.\n- : Docker image to be used as the custom container for serving predictions.\n- : The resource name of the model into which to upload the version.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/models:upload\n```\nRequest JSON body:\n```\n{\n \"model\": {\n \"displayName\": \"MODEL_DISPLAY_NAME\",\n \"artifactUri\": \"ARTIFACT_URI\",\n \"containerSpec\": {\n  \"imageUri\": \"IMAGE_URI\"\n }\n },\n \"parentModel\": \"PARENT_MODEL\"\n}\n```\nTo send your request, expand one of these options:You should receive a successful status code (2xx) and an empty response. \n### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/model_registry/upload_new_model_version_using_custom_training_pipeline_sample.py) \n```\nfrom typing import Listfrom google.cloud import aiplatformdef upload_new_model_version_using_custom_training_pipeline(\u00a0 \u00a0 display_name: str,\u00a0 \u00a0 script_path: str,\u00a0 \u00a0 container_uri,\u00a0 \u00a0 model_serving_container_image_uri: str,\u00a0 \u00a0 dataset_id: str,\u00a0 \u00a0 replica_count: int,\u00a0 \u00a0 machine_type: str,\u00a0 \u00a0 accelerator_type: str,\u00a0 \u00a0 accelerator_count: int,\u00a0 \u00a0 parent_model: str,\u00a0 \u00a0 args: List[str],\u00a0 \u00a0 model_version_aliases: List[str],\u00a0 \u00a0 model_version_description: str,\u00a0 \u00a0 is_default_version: bool,\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,):\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Uploads a new model version using a custom training pipeline.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 display_name: The display name of the model version.\u00a0 \u00a0 \u00a0 \u00a0 script_path: The path to the Python script that trains the model.\u00a0 \u00a0 \u00a0 \u00a0 container_uri: The URI of the container to use for training.\u00a0 \u00a0 \u00a0 \u00a0 model_serving_container_image_uri: The URI of the serving container image to use.\u00a0 \u00a0 \u00a0 \u00a0 dataset_id: The ID of the dataset to use for training.\u00a0 \u00a0 \u00a0 \u00a0 replica_count: The number of replicas to use for training.\u00a0 \u00a0 \u00a0 \u00a0 machine_type: The machine type to use for training.\u00a0 \u00a0 \u00a0 \u00a0 accelerator_type: The accelerator type to use for training.\u00a0 \u00a0 \u00a0 \u00a0 accelerator_count: The number of accelerators to use for training.\u00a0 \u00a0 \u00a0 \u00a0 parent_model: The parent resource name of an existing model.\u00a0 \u00a0 \u00a0 \u00a0 args: A list of arguments to pass to the training script.\u00a0 \u00a0 \u00a0 \u00a0 model_version_aliases: The aliases of the model version to create.\u00a0 \u00a0 \u00a0 \u00a0 model_version_description: The description of the model version.\u00a0 \u00a0 \u00a0 \u00a0 is_default_version: Whether the model version is the default version.\u00a0 \u00a0 \u00a0 \u00a0 project: The project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The region name.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 \u00a0 The new version of the model.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # Initialize the client.\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 # Create the training job.\u00a0 \u00a0 # This job will upload a new, non-default version of the my-training-job model\u00a0 \u00a0 job = aiplatform.CustomTrainingJob(\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name,\u00a0 \u00a0 \u00a0 \u00a0 script_path=script_path,\u00a0 \u00a0 \u00a0 \u00a0 container_uri=container_uri,\u00a0 \u00a0 \u00a0 \u00a0 model_serving_container_image_uri=model_serving_container_image_uri,\u00a0 \u00a0 )\u00a0 \u00a0 # Create dataset\u00a0 \u00a0 # This examples uses a TabularDataset, but you can use any dataset type.\u00a0 \u00a0 dataset = aiplatform.TabularDataset(dataset_id) if dataset_id else None\u00a0 \u00a0 # Run the training job.\u00a0 \u00a0 model = job.run(\u00a0 \u00a0 \u00a0 \u00a0 dataset=dataset,\u00a0 \u00a0 \u00a0 \u00a0 args=args,\u00a0 \u00a0 \u00a0 \u00a0 replica_count=replica_count,\u00a0 \u00a0 \u00a0 \u00a0 machine_type=machine_type,\u00a0 \u00a0 \u00a0 \u00a0 accelerator_type=accelerator_type,\u00a0 \u00a0 \u00a0 \u00a0 accelerator_count=accelerator_count,\u00a0 \u00a0 \u00a0 \u00a0 parent_model=parent_model,\u00a0 \u00a0 \u00a0 \u00a0 model_version_aliases=model_version_aliases,\u00a0 \u00a0 \u00a0 \u00a0 model_version_description=model_version_description,\u00a0 \u00a0 \u00a0 \u00a0 is_default_version=is_default_version,\u00a0 \u00a0 )\u00a0 \u00a0 return model\n```\n## Train a new model version\nFrom the Model Registry, you can train a new version of a model.\nFrom the Model Registry, you can create a version of an existing model. To learn more about how to add or create a model version in your training pipeline, see [CustomJob and model upload](https://cloud.google.com/vertex-ai/docs/training/create-training-pipeline#custom-job-model-upload) \n- In the Google Cloud console, go to the **Model Registry** page. [Go to Model Registry](https://console.cloud.google.com/vertex-ai/models) \n- On the top of the page, select **Create** . Enter the training method details and select  the model training method.\n- Click **Continue** .\n- Under Model details, select the **Train new version** option. From the dropdown  select the model you are adding a new version to. Add a description of the  version. Click **Continue** .\n- From the **Compute and pricing** section, enter your budget and select **Start training** when you're ready. When the model training completes, the new version is visible from the Model Registry.\nBefore using any of the request data, make the following replacements:- : A display name for the trainingPipeline\n- : The training task's parameter(s).\n- : The resource name of the model into which to upload the version.\nHTTP method and URL:\n```\nPOST https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/trainingPipelines\n```\nRequest JSON body:\n```\n{\n \"displayName\": \"TRAINING_PIPELINE_NAME\",\n \"trainingTaskDefinition\": \"gs://google-cloud-aiplatform/schema/trainingjob/definition/custom_task_1.0.0.yaml\",\n \"trainingTaskInputs\":\"TRAINING_TASK_INPUT\"\n },\n \"modelToUpload\": {\n \"displayName\": \"MODEL_DISPLAY_NAME\",\n \"containerSpec\": {\n  \"imageUri\": \"IMAGE_URI\"\n },\n },\n \"parentModel\": \"PARENT_MODEL\",\n```\nTo send your request, expand one of these options:You should receive a successful status code (2xx) and an empty response. \n### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/model_registry/create_default_model_sample.py) \n```\nfrom google.cloud import aiplatformdef create_default_model_sample(model_id: str, project: str, location: str):\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Initialize a Model resource to represent an existing model version with alias 'default'.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 model_id: The ID of the model to initialize. Parent resource name of the model is also accepted.\u00a0 \u00a0 \u00a0 \u00a0 project: The project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The region name.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 \u00a0 Model resource.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # Initialize the client.\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 # Initialize the Model resource with the ID 'model_id'. The parent_name of the Model resource can be also\u00a0 \u00a0 # 'projects/<your-project-id>/locations/<your-region>/models/<your-model-id>'\u00a0 \u00a0 default_model = aiplatform.Model(model_name=model_id)\u00a0 \u00a0 return default_model\n```\n## How to view a list of all versions of a model\nFrom a model version's details page, you can choose to deploy and test your model, set up batch prediction, and evaluate depending on the model type. You can also view the dataset used to train the model version directly from the version details page.\nFrom the Model Registry, you can view a list of all versions of a model. This can help you gain at a glance insight and helps with model organization.\n- In the Google Cloud console, go to the **Model Registry** page. [Go to Model Registry](https://console.cloud.google.com/vertex-ai/models) \n- Under the Name column, select the name of a model which has multiple versions. The versions page opens.\n- A list of all versions and their associated version IDs is displayed.\nBefore using any of the request data, make the following replacements:- : The project ID associated to this model\n- : The region where you are using Vertex AI.\n- : The ID associated with a specific model.\nHTTP method and URL:\n```\nGET https://LOCATION-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION/models/MODEL_ID\n```\nTo send your request, expand one of these options:You should receive a successful status code (2xx) and an empty response. \n### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/model_registry/list_model_versions_with_model_registry_sample.py) \n```\nfrom google.cloud import aiplatformdef list_model_versions_sample(model_id: str, project: str, location: str):\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 List all model versions of a model.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 model_id: The ID of the model to list. Parent resource name of the model is also accepted.\u00a0 \u00a0 \u00a0 \u00a0 project: The project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The region name.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 \u00a0 versions: List of model versions.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # Initialize the client.\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 # Initialize the Model Registry resource with the ID 'model_id'.The parent_name of Model resource can be also\u00a0 \u00a0 # 'projects/<your-project-id>/locations/<your-region>/models/<your-model-id>'\u00a0 \u00a0 model_registry = aiplatform.models.ModelRegistry(model=model_id)\u00a0 \u00a0 # List all model versions of the model.\u00a0 \u00a0 versions = model_registry.list_versions()\u00a0 \u00a0 return versions\n```\n## How to view model version details\nFrom the Model Registry you can see your models and all of your model versions. When selecting a model from the Model Registry, the detail page displays model details and specific model version details. From the details screen, you can evaluate and test your model version, run a batch prediction, or deploy the model to an endpoint for online prediction.\nUse the following instructions to view your model details page. To view version details, click the version name.- In the Google Cloud console, go to the **Model Registry** page. [Go to Model Registry](https://console.cloud.google.com/vertex-ai/models) \n- From the Vertex AI Model Registry, click a model name to open the model details page.\n- A list of all versions and their associated version IDs displays. You see model versions separated by row. Model version details include the version ID, the model alias, status, description, and labels.\n- To view the details of one of the model versions, select a version ID. The model details page opens\n- From the details page you can evaluate, deploy and test, use batch prediction, and take a closer look at the version details. Additionally, from this page you can use [ Vertex AI Model Evaluation](https://cloud.google.com/vertex-ai/docs/evaluation/introduction) to compare your model versions.\n \n### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/model_registry/get_model_version_info_sample.py) \n```\nfrom google.cloud import aiplatformdef get_model_version_info_sample(\u00a0 \u00a0 model_id: str, version_id: str, project: str, location: str):\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Get model version info.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 model_id: The ID of the model.\u00a0 \u00a0 \u00a0 \u00a0 version_id: The version ID of the model version.\u00a0 \u00a0 \u00a0 \u00a0 project: The project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The region name.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 \u00a0 VersionInfo resource.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # Initialize the client.\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 # Initialize the Model Registry resource with the ID 'model_id'.The parent_name of Model resource can be also\u00a0 \u00a0 # 'projects/<your-project-id>/locations/<your-region>/models/<your-model-id>'\u00a0 \u00a0 model_registry = aiplatform.models.ModelRegistry(model=model_id)\u00a0 \u00a0 # Get model version info with the version 'version_id'.\u00a0 \u00a0 model_version_info = model_registry.get_version_info(version=version_id)\u00a0 \u00a0 return model_version_info\n```", "guide": "Vertex AI"}