{"title": "Vertex AI - Create and use custom schemas", "url": "https://cloud.google.com/vertex-ai/docs/ml-metadata/custom-schemas", "abstract": "# Vertex AI - Create and use custom schemas\nIn addition to the pre-defined system schemas, Vertex ML Metadata provides an extensible data model through custom schemas. Custom schemas are user-defined MetadataSchemas. Use custom schemas to type check metadata properties and to query resources by schema, for example, \"list all Artifacts of type `MyCustomModel` .\nTo define a custom schema, you must create a MetadataSchema resource within a specific MetadataStore that describes the expected schema. The schema format is a subset of the [OpenAPI 3.0 specification](https://swagger.io/specification/#schema-object) {class: external}, with the restriction that the top-level schema must be of type `object` . All OpenAPI 3.0 supported [data types](https://swagger.io/docs/specification/data-models/data-types/) (for example, integer, number, string, boolean, array, object) are supported as properties of this top-level schema object. A restriction is that each field under the properties section can be assigned to only one data type. Mixed types are not supported. Advanced data requirements such as Minimum, Maximum, Multiples, and string formats are also not supported.\n**Note:** Fields in the schema are always considered optional when the system performs type checking. When you create new metadata resources, you can still include fields that are not defined in the schema.\n", "content": "## How to register your own custom schemas\nThe process to create a custom MetadataSchema is similar to creating new metadata resources. The following instructions show how to create a sample MetadataSchema. MetadataSchemas are scoped only to their associated MetadataStore.\nBefore using any of the request data, make the following replacements:- : The region of your MetadataStore.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) or number.\n- : The metadata store ID where the MetadataSchema is created. The default metadata store is named`default`. Unless a new MetadataStore is required, you can use the default store.\n- : (Optional) The ID of the MetadataSchema record. If the ID is not specified, Vertex ML Metadata creates a unique identifier for this MetadataSchema .\n- : The title of the schema that describes the metadata field. The title of the schema must meet the format `\n- : (Optional) The version of the schema that describes the metadata field.`schema_version`must be a string of three numbers separated by periods, for example, 1.0.0, 1.0.1. This format helps order and compare versions..\n- : The type of metadata resource to which the created schema applies. Types are:`ARTIFACT_TYPE`,`EXECUTION_TYPE`, or`CONTEXT_TYPE`.\n- : The detailed schema to create.\n- : (Optional) A human readable string, that describes the purpose of the execution to be created..\n- : (Optional) The ID of the artifact record. If the artifact ID is not specified, Vertex ML Metadata creates a unique identifier for this artifact..\n- : (Optional) The user-defined name of the artifact..\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STOREmetadataSchemas?metadata_schema_id=METADATA_SCHEMA_ID\n```\nRequest JSON body:\n```\n{\n \"schemaVersion\": \"0.0.1\",\n \"schema\": \"title: test.Experiment\\ntype: object\",\n \"schemaType\": \"CONTEXT_TYPE\",\n}\n```\nTo send your request, expand one of these options:You should see output similar to the following. You can use the is the ID of the MetadataSchema record.\n```\n{\n \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/metadataSchemas/METADATA_SCHEMA_ID\",\n \"schemaVersion\": \"0.0.1\",\n \"schema\": \"title: test.Experiment\\ntype: object\",\n \"schemaType\": \"CONTEXT_TYPE\",\n \"createTime\": \"2021-04-06T05:24:04.575481815Z\"\n}\n```\nSubsequent calls to create, get, or list Artifacts can then refer to this schema by specifying the name (demo.Artifact) in the schema_title field and version (0.0.1) in the schema_version of the Artifact resource. For more information about how to create, get, or list metadata resources, see [Track Vertex ML Metadata](/vertex-ai/docs/ml-metadata/tracking) .\n## Version your schemas\nAll MetadataSchema resources are versioned. A user can create a schema that uses the same schema_title as another schema but a different schema_version. To create a metadataSchema resource with a different version, a user can provide a different version number and modified schema content.\nThe following example creates a 0.0.2 version of the demo.Artifact schema:\n```\nsample_schema_versioned = aip.MetadataSchema()sample_schema_versioned.schema_type = aip.MetadataSchema.MetadataSchemaType.ARTIFACT_TYPEsample_schema_versioned.schema =\"title: demo.Artifact\\ntype: object\\nproperties:\\n \u00a0framework:\\n \u00a0 \u00a0type: string\\n \u00a0 \u00a0description: \\\"The framework type\\\"\\n \u00a0model_version:\\n \u00a0 \u00a0type: integer\\n \u00a0 \u00a0description: \\\"The version of the model\\\"\"sample_schema_versioned.schema_version = \"0.0.2\"sample_schema_versioned.description = \"sample schema 2\"store_client.create_metadata_schema(parent=metadata_store.name, metadata_schema=sample_schema_versioned)\n```\nFields in the schema are always considered optional, so there is no backward or forward compatibility between versions of the same schema_title. Users can still use the schema_title to filter and group resources for analysis. For more information about how to use filter functions, see [Analyzing Vertex ML Metadata](/vertex-ai/docs/ml-metadata/analyzing) .\n## What's next\n- [Get started tracking your Vertex ML Metadata](/vertex-ai/docs/ml-metadata/tracking) .", "guide": "Vertex AI"}