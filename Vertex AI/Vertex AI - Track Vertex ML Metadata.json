{"title": "Vertex AI - Track Vertex ML Metadata", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Track Vertex ML Metadata\nVertex ML Metadata lets you track and analyze the metadata produced by your machine learning (ML) workflows. If you are new to Vertex ML Metadata, read the introduction to Vertex ML Metadata to [learn more](/vertex-ai/docs/ml-metadata/introduction) about tracking and analyzing your ML workflow's metadata.\nThis guide demonstrates how to log metadata using the following process:\n- [Create](#create-execution) anthat represents a step in your ML workflow.\n- [Look up](#look-up-artifact) existingto find any inputthat are already written to your metadata store.\n- [Create artifacts](#create-artifact) for your execution's inputs that are not already written to your metadata store, and any outputs produced by this execution.\n- [Create](#create-event) to represent the relationship between your execution, and its input and output artifacts.\n- Optionally, [add your execution and artifacts](#add-to-context) to a . Use a context to group together sets of executions and artifacts. For example, if you are experimenting to find the best set of hyperparameters to train a model, each experiment may be a different execution with its own set of parameters and metrics. You can compare the executions within a context to find the experiment that produced the best model.Before you can add execution and artifacts to a context, you must [create a context](#create-context) .\nThere are two ways of creating Vertex ML Metadata assets. You can either use REST commands or the Vertex AI SDK for Python. The Python SDK simplifies creation and discovery of various asset types. When creating executions using Python, the payload does not have to be constructed manually.\n", "content": "## Before you begin\nThe first time that you use Vertex ML Metadata in a Google Cloud project, Vertex AI creates your project's Vertex ML Metadata store.\nIf you want your metadata encrypted using a customer-managed encryption key (CMEK), you need to create your metadata store using a CMEK before using Vertex ML Metadata to track or analyze metadata. Use the [create ametadata store that uses a CMEK](/vertex-ai/docs/ml-metadata/configure) instructions to configure your project's metadata store.\n## Create an execution\nExecutions represent a step in your ML workflow. Use the following instructions to create an execution.\nBefore using any of the request data, make the following replacements:- : Your region.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : The metadata store ID where the execution is created. The default metadata store is named`default`.\n- : The ID of the execution record. If the execution ID is not specified, Vertex ML Metadata creates a unique identifier for this execution.\n- : The execution's display name. This field may contain up to 128 Unicode characters.\n- : (Optional) A value from the [State enumeration](/vertex-ai/docs/reference/rest/v1/projects.locations.metadataStores.executions#Execution.State) that represents the current state of the execution. This field is managed by client applications. Vertex ML Metadata does not check the validity of state transitions.\n- : The title of the schema that describes the metadata field. The title of the schema must meet the format `\n- : (Optional) The version of the schema that describes the metadata field.`schema_version`must be a string of three numbers separated by periods, for example, 1.0.0, 1.0.1. This format helps order and compare versions.\n- : (Optional) Properties that describe the execution, such as the execution parameters.\n- : (Optional) A human readable string, that describes the purpose of the execution to be created..\n- : Optional. User-defined metadata for organizing your executions.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/executions?executionId=EXECUTION_ID\n```\nRequest JSON body:\n```\n{\n \"displayName\": \"DISPLAY_NAME\",\n \"state\": \"EXECUTION_STATE\",\n \"schemaTitle\": \"METADATA_SCHEMA_TITLE\",\n \"schemaVersion\": \"METADATA_SCHEMA_VERSION\",\n \"metadata\": {\n METADATA\n },\n \"labels\": {\"LABEL_1\":\"LABEL_2\"},\n \"description\": \"DESCRIPTION\"\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/executions/EXECUTION_ID\",\n \"displayName\": \"Example Execution\",\n \"etag\": \"67891011\",\n \"labels\": {\n \"test_label\": \"test_label_value\"\n },\n \"createTime\": \"2021-05-18T00:04:49.659Z\",\n \"updateTime\": \"2021-05-18T00:04:49.659Z\",\n \"schemaTitle\": \"system.Run\",\n \"schemaVersion\": \"0.0.1\",\n \"metadata\": {},\n \"description\": \"Description of the example execution.\"\n}\n```\n### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/experiment_tracking/create_execution_with_sdk_sample.py) \n```\ndef create_execution_sample(\u00a0 \u00a0 display_name: str,\u00a0 \u00a0 input_artifacts: List[aiplatform.Artifact],\u00a0 \u00a0 output_artifacts: List[aiplatform.Artifact],\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 execution_id: Optional[str] = None,\u00a0 \u00a0 metadata: Optional[Dict[str, Any]] = None,\u00a0 \u00a0 schema_version: Optional[str] = None,\u00a0 \u00a0 description: Optional[str] = None,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 with execution_schema.ContainerExecution(\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name,\u00a0 \u00a0 \u00a0 \u00a0 execution_id=execution_id,\u00a0 \u00a0 \u00a0 \u00a0 metadata=metadata,\u00a0 \u00a0 \u00a0 \u00a0 schema_version=schema_version,\u00a0 \u00a0 \u00a0 \u00a0 description=description,\u00a0 \u00a0 ).create() as execution:\u00a0 \u00a0 \u00a0 \u00a0 execution.assign_input_artifacts(input_artifacts)\u00a0 \u00a0 \u00a0 \u00a0 execution.assign_output_artifacts(output_artifacts)\u00a0 \u00a0 \u00a0 \u00a0 return execution\n```\n- `display_name`: The execution's display name. This field may contain up to 128 Unicode characters.\n- `input_artifacts`: A list of one or more instances of aiplatform.Artifact representing an input artifact.\n- `output_artifacts`:A list of one or more instances of aiplatform.Artifact representing an output Artifact.\n- `project`: Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) . You can find these IDs in the Google Cloud console [welcome](https://console.cloud.google.com/welcome) page.\n- `location`: See [List of available   locations](/vertex-ai/docs/general/locations) .\n- `execution_id`: The ID of the execution record. If the execution ID is not specified, Vertex ML Metadata creates a unique identifier for this execution.\n- `metadata`: Properties that describe the execution, such as the execution parameters.\n- `schema_version`:The version of the schema that describes the metadata field.\n- `description`: (Optional) A human readable string, that describes the purpose of the execution to be created.## Look up an existing artifact\nArtifacts represent data used or produced by your ML workflow, such as datasets and models. Use the following instructions to look-up an existing artifact.\nBefore using any of the request data, make the following replacements:- : Your region.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : The metadata store ID where the artifact is created. The default metadata store is named`default`.\n- : (Optional) The maximum number of artifacts to return. If this value is not specified, the service returns a maximum of 100 records.\n- : (Optional) A page token from a previous [MetadataService.ListArtifacts](/vertex-ai/docs/reference/rest/v1/projects.locations.metadataStores.artifacts/list) call. Specify this token to get the next page of results.\n- : Specifies the conditions required to include an artifact in the result set.\nHTTP method and URL:\n```\nGET https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/artifacts?pageSize=PAGE_SIZE&pageToken=PAGE_TOKEN&filter=FILTER\n```\nTo send your request, expand one of these options:You should see output similar to the following. is the ID of the artifact record.\n```\n{\n \"artifacts\": [ {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/default/artifacts/ARTIFACT_ID\",\n  \"displayName\": \"Example artifact\",\n  \"uri\": \"gs://your_bucket_name/artifacts/dataset.csv\",\n  \"etag\": \"67891011\",\n  \"createTime\": \"2021-05-18T00:33:13.833Z\",\n  \"updateTime\": \"2021-05-18T00:33:13.833Z\",\n  \"state\": \"LIVE\",\n  \"schemaTitle\": \"system.Dataset\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {\n  \"payload_format\": \"CSV\"\n  },\n  \"description\": \"Description of the example artifact.\"\n },\n {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION/metadataStores/METADATA_STORE/artifacts/ARTIFACT_ID\",\n  \"displayName\": \"Another example artifact\",\n  \"uri\": \"gs://your_bucket_name/artifacts/dataset-2.csv\",\n  \"etag\": \"67891012\",\n  \"createTime\": \"2021-05-18T00:29:24.344Z\",\n  \"updateTime\": \"2021-05-18T00:29:24.344Z\",\n  \"state\": \"LIVE\",\n  \"schemaTitle\": \"system.Dataset\",\n  \"schemaVersion\": \"0.0.1\",\n  \"metadata\": {\n  \"payload_format\": \"CSV\"\n  },\n  \"description\": \"Description of the other example artifact.\"\n }\n ]\n}\n```\n### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/experiment_tracking/list_artifact_sample.py) \n```\ndef list_artifact_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 display_name_filter: Optional[str] = \"display_name=\\\"my_model_*\\\"\",\u00a0 \u00a0 create_date_filter: Optional[str] = \"create_time>\\\"2022-06-11\\\"\",\u00a0 \u00a0 order_by: Optional[str] = None,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 combined_filters = f\"{display_name_filter} AND {create_date_filter}\"\u00a0 \u00a0 return aiplatform.Artifact.list(\u00a0 \u00a0 \u00a0 \u00a0 filter=combined_filters,\u00a0 \u00a0 \u00a0 \u00a0 order_by=order_by,\u00a0 \u00a0 )\n```\n- `project`: Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) . You can find these IDs in the Google Cloud console [welcome](https://console.cloud.google.com/welcome) page.\n- `location`: See [List of available   locations](/vertex-ai/docs/general/locations) .\n- `display_name_filter`: Filter to be applied to display name while listing the resources with the format \"display_name=\\\"my_filter\\\"\" .\n- `create_date_filter`: Filter to be applied to create_date name while listing the resources with the format \"create_time>\\\"2022-06-11T12:30:00-08:00\\\"\",.## Create an artifact\nUse the following instructions to create an artifact.\nBefore using any of the request data, make the following replacements:- : Your region.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : The metadata store ID where the artifact is created. The default metadata store is named`default`.\n- : (Optional) The ID of the artifact record. If the artifact ID is not specified, Vertex ML Metadata creates a unique identifier for this artifact.\n- : (Optional) The user-defined name of the artifact.\n- : (Optional) The location where the artifact is stored\n- : (Optional) A value from the [State enumeration](/vertex-ai/docs/reference/rest/v1/projects.locations.metadataStores.artifacts#Artifact.State) that represents the current state of the artifact. This field is managed by client applications. Vertex ML Metadata does not check the validity of state transitions.\n- : The title of the schema that describes the metadata field. The title of the schema must meet the format `\n- : (Optional) The version of the schema that describes the metadata field.`schema_version`must be a string of three numbers separated by periods, for example, 1.0.0, 1.0.1. This format helps order and compare versions.\n- : (Optional.) Properties that describe the artifact, such as the type of dataset.\n- : (Optional) A human readable string, that describes the purpose of the execution to be created.\n- :Optional. User-defined metadata for organizing your artifacts.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/artifacts?artifactId=ARTIFACT_ID\n```\nRequest JSON body:\n```\n{\n \"displayName\": \"DISPLAY_NAME\",\n \"uri\": \"URI\",\n \"state\": \"ARTIFACT_STATE\",\n \"schemaTitle\": \"METADATA_SCHEMA_TITLE\",\n \"schemaVersion\": \"METADATA_SCHEMA_VERSION\",\n \"metadata\": {\n METADATA\n },\n \"labels\": {\"LABEL_1\":\"LABEL_2\"},\n \"description\": \"DESCRIPTION\"\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/default/artifacts/ARTIFACT_ID\",\n \"displayName\": \"Example artifact\",\n \"uri\": \"gs://your_bucket_name/artifacts/dataset.csv\",\n \"etag\": \"67891011\",\n \"labels\": {\n \"test_label\": \"test_label_value\"\n },\n \"createTime\": \"2021-05-18T00:29:24.344Z\",\n \"updateTime\": \"2021-05-18T00:29:24.344Z\",\n \"state\": \"LIVE\",\n \"schemaTitle\": \"system.Dataset\",\n \"schemaVersion\": \"0.0.1\",\n \"metadata\": {\n \"payload_format\": \"CSV\"\n },\n \"description\": \"Description of the example artifact.\"\n}\n```\n### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/experiment_tracking/create_artifact_with_sdk_sample.py) \n```\ndef create_artifact_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 uri: Optional[str] = None,\u00a0 \u00a0 artifact_id: Optional[str] = None,\u00a0 \u00a0 display_name: Optional[str] = None,\u00a0 \u00a0 schema_version: Optional[str] = None,\u00a0 \u00a0 description: Optional[str] = None,\u00a0 \u00a0 metadata: Optional[Dict] = None,):\u00a0 \u00a0 system_artifact_schema = artifact_schema.Artifact(\u00a0 \u00a0 \u00a0 \u00a0 uri=uri,\u00a0 \u00a0 \u00a0 \u00a0 artifact_id=artifact_id,\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name,\u00a0 \u00a0 \u00a0 \u00a0 schema_version=schema_version,\u00a0 \u00a0 \u00a0 \u00a0 description=description,\u00a0 \u00a0 \u00a0 \u00a0 metadata=metadata,\u00a0 \u00a0 )\u00a0 \u00a0 return system_artifact_schema.create(project=project, location=location,)\n```\n- `project`: Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) . You can find these IDs in the Google Cloud console [welcome](https://console.cloud.google.com/welcome) page.\n- `location`: See [List of available   locations](/vertex-ai/docs/general/locations) .\n- `uri`: (Optional) The Uniform Resource Identifier for the artifact file if one exists. May be empty if there is no actual artifact file.\n- `artifact_id`: (Optional) The ID of the artifact record. If the artifact ID is not specified, Vertex ML Metadata creates a unique identifier for this artifact.\n- `display_name`: (Optional) The user-defined name of the artifact.\n- `schema_version`: The version of the schema that describes the metadata field.\n- `description`: (Optional) A human readable string, that describes the purpose of the artifact to be created.\n- `metadata`: Properties that describe the artifact, such as the artifact parameters.## Create events to link artifacts to an execution\nEvents represent the relationship between an execution and its inputs and output artifacts. Use the following instructions to create events to link artifacts to an execution.\nBefore using any of the request data, make the following replacements:- : Your region.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : The metadata store ID where the execution is created. The default metadata store is named`default`.\n- : The ID of the execution record.\n- : The resource name of the artifact. The resource name is formatted as follows: `projects/` `` `/locations/` `` `/metadataStores/` `` `/artifacts/` `` \n- : (Optional) A value from the [EventType Enumeration](/vertex-ai/docs/reference/rest/v1/Event#type) that specifies if the artifact is an input or output of the execution.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/executions/EXECUTION_ID:addExecutionEvents\n```\nRequest JSON body:\n```\n{\n \"events\": [ {\n  \"artifact\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/artifacts/ARTIFACT_ID\",\n  \"type\": \"EVENT_TYPE\"\n }\n ]\n}\n```\nTo send your request, expand one of these options:You should receive a successful status code (2xx) and an empty response.\n### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/experiment_tracking/create_execution_with_sdk_sample.py) \n```\ndef create_execution_sample(\u00a0 \u00a0 display_name: str,\u00a0 \u00a0 input_artifacts: List[aiplatform.Artifact],\u00a0 \u00a0 output_artifacts: List[aiplatform.Artifact],\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 execution_id: Optional[str] = None,\u00a0 \u00a0 metadata: Optional[Dict[str, Any]] = None,\u00a0 \u00a0 schema_version: Optional[str] = None,\u00a0 \u00a0 description: Optional[str] = None,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 with execution_schema.ContainerExecution(\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name,\u00a0 \u00a0 \u00a0 \u00a0 execution_id=execution_id,\u00a0 \u00a0 \u00a0 \u00a0 metadata=metadata,\u00a0 \u00a0 \u00a0 \u00a0 schema_version=schema_version,\u00a0 \u00a0 \u00a0 \u00a0 description=description,\u00a0 \u00a0 ).create() as execution:\u00a0 \u00a0 \u00a0 \u00a0 execution.assign_input_artifacts(input_artifacts)\u00a0 \u00a0 \u00a0 \u00a0 execution.assign_output_artifacts(output_artifacts)\u00a0 \u00a0 \u00a0 \u00a0 return execution\n```\n- `input_artifacts`: A list of one or more instances of aiplatform.Artifact representing an input artifact.\n- `output_artifacts`: A list of one or more instances of aiplatform.Artifact representing an output Artifact.\n- `project`: Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) . You can find these IDs in the Google Cloud console [welcome](https://console.cloud.google.com/welcome) page.\n- `location`: See [List of available   locations](/vertex-ai/docs/general/locations) .\n- `execution_id`: The ID of the execution record. If the execution ID is not specified, Vertex ML Metadata creates a unique identifier for this execution.\n- `metadata`Properties that describe the execution, such as the execution parameters.\n- `schema_version`: The version of the schema that describes the metadata field.\n- `description`: (Optional) A human readable string, that describes the purpose of the execution to be created.## Create a context\nContexts let you group sets of artifacts and executions together. Use the following instructions to create a context. Note that Vertex AI Experiments creates a context that automatically logs artifacts and executions against that context, (see [Create or delete an experiment](/vertex-ai/docs/experiments/create-experiment) ).\nBefore using any of the request data, make the following replacements:- : Your region.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- :The metadata store ID where the execution is created. The default metadata store is named`default`.\n- : (Optional) The ID of the context record. If the context ID is not specified,  Vertex ML Metadata created a unique identifier for this context\n- : The context's display name. This field may contain up to 128 Unicode characters.\n- : Specify the resource name for any parent contexts. A context can not have more than 10 parent contexts.\n- : The title of the schema that describes the metadata field. The title of the schema must meet the format `\n- : (Optional) The version of the schema that describes the metadata field.`schema_version`must be a string of three numbers separated by periods, for example, 1.0.0, 1.0.1. This format helps order and compare versions.\n- : Properties that describe the context, such as the context parameters..\n- :(Optional) A human readable string, that describes the purpose of the execution to be created.\n- : Optional. User-defined metadata for organizing your contexts.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/contexts?contextId=CONTEXT_ID\n```\nRequest JSON body:\n```\n{\n \"displayName\": \"DISPLAY_NAME:\",\n \"parentContexts\": [ \"PARENT_CONTEXT_1\",\n \"PARENT_CONTEXT_2\"\n ],\n \"schemaTitle\": \"METADATA_SCHEMA_TITLE\",\n \"schemaVersion\": \"METADATA_SCHEMA_VERSION\",\n \"metadata\": {\n METADATA\n },\n \"labels\": {\"LABEL_1\":\"LABEL_2\"},\n \"description\": \"DESCRIPTION\"\n}\n```\nTo send your request, expand one of these options:You should see output similar to the following. is the ID of the context record.\n```\n{\n \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/contexts/CONTEXT_ID\",\n \"displayName\": \"Example context:\",\n \"etag\": \"67891011\",\n \"labels\": {\n \"test_label\": \"test_label_value\"\n },\n \"createTime\": \"2021-05-18T01:52:51.642Z\",\n \"updateTime\": \"2021-05-18T01:52:51.642Z\",\n \"schemaTitle\": \"system.Experiment\",\n \"schemaVersion\": \"0.0.1\",\n \"metadata\": {},\n \"description\": \"Description of the example context.\"\n}\n```\n### Python [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/experiment_tracking/create_context_with_sdk_sample.py) \n```\ndef create_context_sample(\u00a0 \u00a0 display_name: str,\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 context_id: Optional[str] = None,\u00a0 \u00a0 metadata: Optional[Dict[str, Any]] = None,\u00a0 \u00a0 schema_version: Optional[str] = None,\u00a0 \u00a0 description: Optional[str] = None,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 return context_schema.Experiment(\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name,\u00a0 \u00a0 \u00a0 \u00a0 context_id=context_id,\u00a0 \u00a0 \u00a0 \u00a0 metadata=metadata,\u00a0 \u00a0 \u00a0 \u00a0 schema_version=schema_version,\u00a0 \u00a0 \u00a0 \u00a0 description=description,\u00a0 \u00a0 ).create()\n```\n- `display_name`: The context's display name. This field may contain up to 128 Unicode characters.\n- `project`: Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) . You can find these IDs in the Google Cloud console [welcome](https://console.cloud.google.com/welcome) page.\n- `location`: See [List of available   locations](/vertex-ai/docs/general/locations) .\n- `context_id`: (Optional) The ID of the context record.\n- `metadata`Properties that describe the context, such as the context parameters.\n- `schema_version`: The version of the schema that describes the metadata field.\n- `description`: (Optional) A human readable string, that describes the purpose of the context to be created.## Add artifacts and executions to a context\nUse the following instructions to add artifacts and executions to a context.\nBefore using any of the request data, make the following replacements:- : Your region.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : The metadata store ID where the execution is created. The default metadata store is named`default`.\n- : (Optional) The ID of the context record.\n- Specify the resource name for any artifacts that you want to add to this  context. The resource name is formatted like the following:`projects/` `` `/locations/` `` `/metadataStores/` `` `/artifacts/` ``\n- Specify the resource name for any executions that you want to add to this  context. The resource name is formatted like the following:`projects/` `` `/locations/` `` `/metadataStores/` `` `/executions/` ``\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/contexts/CONTEXT:addContextArtifactsAndExecutions\n```\nRequest JSON body:\n```\n{\n \"artifacts\": [ \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/artifacts/ARTIFACT_ID\"\n ],\n \"executions\": [ \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/METADATA_STORE/executions/EXECUTION_ID\"\n ]\n}\n```\nTo send your request, expand one of these options:You should receive a successful status code (2xx) and an empty response.\n## Notebooks\nTo learn more,  run the following Jupyter notebooks in the environment of your choice:\n- \"Track metrics and parameters for Vertex AI custom training jobs, and perform detailed analysis\": [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/ml_metadata/sdk-metric-parameter-tracking-for-custom-jobs.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fml_metadata%2Fsdk-metric-parameter-tracking-for-custom-jobs.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/ml_metadata/sdk-metric-parameter-tracking-for-custom-jobs.ipynb) \n- \"Track metrics and parameters for ML training jobs and analyze this metadata using Vertex AI SDK\": [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/ml_metadata/sdk-metric-parameter-tracking-for-locally-trained-models.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fml_metadata%2Fsdk-metric-parameter-tracking-for-locally-trained-models.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/ml_metadata/sdk-metric-parameter-tracking-for-locally-trained-models.ipynb) \n- \"Track artifacts and metrics across Vertex AI Pipelines runs using Vertex ML Metadata\": [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/ml_metadata/vertex-pipelines-ml-metadata.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fml_metadata%2Fvertex-pipelines-ml-metadata.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/ml_metadata/vertex-pipelines-ml-metadata.ipynb)\n## What's next\n- [Get started analyzing your Vertex ML Metadata](/vertex-ai/docs/ml-metadata/analyzing) .", "guide": "Vertex AI"}