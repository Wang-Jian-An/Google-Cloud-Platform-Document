{"title": "Vertex AI - \u4f7f\u7528\u81ea\u5b9a\u7fa9\u5bb9\u5668\u9032\u884c\u9810\u6e2c", "url": "https://cloud.google.com/vertex-ai/docs/predictions/use-custom-container?hl=zh-cn", "abstract": "# Vertex AI - \u4f7f\u7528\u81ea\u5b9a\u7fa9\u5bb9\u5668\u9032\u884c\u9810\u6e2c\n\u5982\u9700\u81ea\u5b9a\u7fa9 Vertex AI \u5982\u4f55\u901a\u904e\u81ea\u5b9a\u7fa9\u8a13\u7df4\u7684\u6a21\u578b\u57f7\u884c\u5728\u7dda\u9810\u6e2c\uff0c\u8acb\u5728\u5275\u5efa `Model` \u8cc7\u6e90\u6642\u6307\u5b9a\u81ea\u5b9a\u7fa9\u5bb9\u5668\uff0c\u800c\u4e0d\u662f [\u9810\u69cb\u5efa\u5bb9\u5668](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers?hl=zh-cn) \u3002\u4f7f\u7528\u81ea\u5b9a\u7fa9\u5bb9\u5668\u6642\uff0cVertex AI \u6703\u5728\u6bcf\u500b\u9810\u6e2c\u7bc0\u9ede\u4e0a\u904b\u884c\u60a8\u9078\u64c7\u7684 Docker \u5bb9\u5668\u3002\n\u51fa\u65bc\u4ee5\u4e0b\u4efb\u4f55\u539f\u56e0\u8003\u616e\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u81ea\u5b9a\u7fa9\u5bb9\u5668\uff1a\n- \u5f9e\u4f7f\u7528\u4e0d\u662f\u4f5c\u7232 [\u9810\u69cb\u5efa\u5bb9\u5668](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers?hl=zh-cn) \u63d0\u4f9b\u7684\u6846\u67b6\u8a13\u7df4\u7684\u6a5f\u5668\u5b78\u7fd2\u6a21\u578b\u63d0\u4f9b\u9810\u6e2c\n- \u5c0d\u9810\u6e2c\u8acb\u6c42\u9032\u884c\u9810\u8655\u7406\u6216\u5c0d\u6a21\u578b\u751f\u6210\u7684\u9810\u6e2c\u9032\u884c\u5f8c\u8655\u7406\n- \u904b\u884c\u4ee5\u60a8\u9078\u64c7\u7684\u7de8\u7a0b\u8a9e\u8a00\u7de8\u5beb\u7684\u9810\u6e2c\u670d\u52d9\u5668\n- \u5b89\u88dd\u8981\u7528\u65bc\u81ea\u5b9a\u7fa9\u9810\u6e2c\u7684\u4f9d\u8cf4\u9805\n\u672c\u6307\u5357\u4ecb\u7d39\u5982\u4f55\u5275\u5efa\u4f7f\u7528\u81ea\u5b9a\u7fa9\u5bb9\u5668\u7684 `Model` \u3002\u672c\u6307\u5357\u672a\u63d0\u4f9b\u6709\u95dc\u8a2d\u8a08\u548c\u5275\u5efa Docker \u5bb9\u5668\u6620\u50cf\u7684\u8a73\u7d30\u8aaa\u660e\u3002\n", "content": "## \u6e96\u5099\u5bb9\u5668\u6620\u50cf\n\u8981\u5275\u5efa\u4f7f\u7528\u81ea\u5b9a\u7fa9\u5bb9\u5668\u7684 `Model` \uff0c\u60a8\u5fc5\u9808\u63d0\u4f9b Docker \u5bb9\u5668\u6620\u50cf\u4f5c\u7232\u8a72\u5bb9\u5668\u7684\u57fa\u790e\u3002\u6b64\u5bb9\u5668\u6620\u50cf\u5fc5\u9808\u6eff\u8db3 [\u81ea\u5b9a\u7fa9\u5bb9\u5668\u8981\u6c42](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements?hl=zh-cn) \u4e2d\u6240\u8ff0\u7684\u8981\u6c42\u3002\n\u5982\u679c\u60a8\u8a08\u5283\u4f7f\u7528\u7b2c\u4e09\u65b9\u4fe1\u4efb\u7684\u73fe\u6709\u5bb9\u5668\u6620\u50cf\uff0c\u5247\u53ef\u4ee5\u8df3\u904e\u4e0b\u9762\u7684\u4e00\u5230\u5169\u500b\u90e8\u5206\u3002\n### \u5275\u5efa\u5bb9\u5668\u6620\u50cf\n\u8a2d\u8a08\u548c\u69cb\u5efa\u6eff\u8db3 [\u5bb9\u5668\u6620\u50cf\u8981\u6c42](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements?hl=zh-cn#image) \u7684 Docker \u5bb9\u5668\u6620\u50cf\u3002\n\u5982\u9700\u77ad\u89e3\u8a2d\u8a08\u548c\u69cb\u5efa Docker \u5bb9\u5668\u6620\u50cf\u7684\u57fa\u790e\u77e5\u8b58\uff0c\u8acb\u53c3\u95b1 [Docker \u6587\u6a94\u5feb\u901f\u5165\u9580](https://docs.docker.com/get-started/)\n### \u5c07\u5bb9\u5668\u6620\u50cf\u63a8\u9001\u5230 Artifact Registry\n\u5c07\u5bb9\u5668\u6620\u50cf\u63a8\u9001\u5230 [Artifact Registry](https://cloud.google.com/artifact-registry/docs/overview?hl=zh-cn) \u88fd\u54c1\u5eab\u3002\n\u77ad\u89e3\u5982\u4f55 [\u5c07\u5bb9\u5668\u6620\u50cf\u63a8\u9001\u5230 Artifact Registry](https://cloud.google.com/artifact-registry/docs/docker/pushing-and-pulling?hl=zh-cn) \u3002\n## \u5275\u5efa Model\n\u8981\u5275\u5efa\u4f7f\u7528\u81ea\u5b9a\u7fa9\u5bb9\u5668\u7684 `Model` \uff0c\u8acb\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\u4e4b\u4e00\uff1a\n- [\u5c0e\u5165\u81ea\u5b9a\u7fa9\u8a13\u7df4\u7684\u6a21\u578b](https://cloud.google.com/vertex-ai/docs/model-registry/import-model?hl=zh-cn) \u3002\n- [\u5275\u5efa\u904b\u884c CustomJob \u7684 TrainingPipeline \u4e26\u5c07\u751f\u6210\u7684\u5de5\u4ef6\u4f5c\u7232 Model \u5c0e\u5165\u3002](https://cloud.google.com/vertex-ai/docs/training/create-training-pipeline?hl=zh-cn#custom-job-model-upload) \n\u4ee5\u4e0b\u5404\u90e8\u5206\u4ecb\u7d39\u4e86\u5728\u4ee5\u4e0a\u8ff0\u65b9\u5f0f\u5275\u5efa `Model` \u6642\u5982\u4f55\u914d\u7f6e\u8207\u81ea\u5b9a\u7fa9\u5bb9\u5668\u76f8\u95dc\u7684 API \u5b57\u6bb5\u3002\n### \u8207\u5bb9\u5668\u76f8\u95dc\u7684 API \u5b57\u6bb5\n\u5275\u5efa `Model` \u6642\uff0c\u8acb\u52d9\u5fc5\u4f7f\u7528\u81ea\u5b9a\u7fa9\u5bb9\u5668\u8a73\u7d30\u4fe1\u606f\uff08\u800c\u4e0d\u662f [\u9810\u69cb\u5efa\u5bb9\u5668](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers?hl=zh-cn) \uff09\u914d\u7f6e [containerSpec \u5b57\u6bb5](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.models?hl=zh-cn#Model.FIELDS.container_spec) \u3002\n\u60a8\u5fc5\u9808\u5728 `Model.containerSpec` \u5b57\u6bb5\u4e2d\u6307\u5b9a [ModelContainerSpec \u6d88\u606f](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.models?hl=zh-cn#modelcontainerspec) \u3002\u5728\u6b64\u6d88\u606f\u4e2d\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\u4ee5\u4e0b\u5b50\u5b57\u6bb5\uff1a\n\u9664\u4e86\u60a8\u5728 `Model.containerSpec.env` \u5b57\u6bb5\u4e2d\u8a2d\u7f6e\u7684\u8b8a\u91cf\u4e4b\u5916\uff0cVertex AI \u6703\u6839\u64da\u60a8\u7684\u914d\u7f6e\u8a2d\u7f6e\u4e00\u4e9b\u5176\u4ed6\u8b8a\u91cf\u3002\u8a73\u7d30\u77ad\u89e3\u5982\u4f55 [\u5728\u9019\u4e9b\u5b57\u6bb5\u4e2d\u548c\u5bb9\u5668\u7684\u5165\u53e3\u9ede\u547d\u4ee4\u4e2d\u4f7f\u7528\u9019\u4e9b\u74b0\u5883\u8b8a\u91cf](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements?hl=zh-cn#variables) \u3002\n### \u6a21\u578b\u5c0e\u5165\u793a\u4f8b\n\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u5728\u5c0e\u5165\u6a21\u578b\u6642\u6307\u5b9a\u8207\u5bb9\u5668\u76f8\u95dc\u7684 API \u5b57\u6bb5\u3002\n**\u6ce8\u610f** \uff1a\u5982\u679c\u60a8\u4f7f\u7528 `TrainingPipeline` \u5275\u5efa `Model` \uff0c\u5247\u5fc5\u9808\u5728\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u4e2d\u6307\u5b9a\u9019\u4e9b\u5b57\u6bb5\u3002\u60a8\u7121\u6cd5\u4f7f\u7528 Google Cloud CLI \u5275\u5efa `TrainingPipeline` \u3002 [\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u5275\u5efa\u81ea\u5b9a\u7fa9 TrainingPipeline \u8cc7\u6e90\u3002](https://cloud.google.com/vertex-ai/docs/training/create-training-pipeline?hl=zh-cn)\n\u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528 [gcloud ai models upload \u547d\u4ee4](https://cloud.google.com/sdk/gcloud/reference/ai/models/upload?hl=zh-cn) \uff1a\n```\ngcloud ai models upload \\\u00a0 --region=LOCATION \\\u00a0 --display-name=MODEL_NAME \\\u00a0 --container-image-uri=IMAGE_URI \\\u00a0 --container-command=COMMAND \\\u00a0 --container-args=ARGS \\\u00a0 --container-ports=PORTS \\\u00a0 --container-env-vars=ENV \\\u00a0 --container-health-route=HEALTH_ROUTE \\\u00a0 --container-predict-route=PREDICT_ROUTE \\\u00a0 --container-shared-memory-size-mb=SHARED_MEMORY_SIZE \\\u00a0 --container-startup-probe-exec=STARTUP_PROBE_EXEC \\\u00a0 --container-startup-probe-period-seconds=STARTUP_PROBE_PERIOD \\\u00a0 --container-startup-probe-timeout-seconds=STARTUP_PROBE_TIMEOUT \\\u00a0 --container-health-probe-exec=HEALTH_PROBE_EXEC \\\u00a0 --container-health-probe-period-seconds=HEALTH_PROBE_PERIOD \\\u00a0 --container-health-probe-timeout-seconds=HEALTH_PROBE_TIMEOUT \\\u00a0 --artifact-uri=PATH_TO_MODEL_ARTIFACT_DIRECTORY\n```\n`--container-image-uri` \u6a19\u8a8c\u662f\u5fc5\u9700\u7684\uff1b\u4ee5 `--container-` \u958b\u982d\u7684\u6240\u6709\u5176\u4ed6\u6a19\u8a8c\u90fd\u662f\u53ef\u9078\u7684\u3002\u5982\u9700\u77ad\u89e3\u9019\u4e9b\u5b57\u6bb5\u7684\u503c\uff0c\u8acb\u53c3\u95b1 [\u672c\u6307\u5357\u7684\u4e0a\u4e00\u90e8\u5206](#fields) \u3002\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300aVertex AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Java \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Vertex AI Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Vertex AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/UploadModelSample.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.aiplatform.v1.LocationName;import com.google.cloud.aiplatform.v1.Model;import com.google.cloud.aiplatform.v1.ModelContainerSpec;import com.google.cloud.aiplatform.v1.ModelServiceClient;import com.google.cloud.aiplatform.v1.ModelServiceSettings;import com.google.cloud.aiplatform.v1.UploadModelOperationMetadata;import com.google.cloud.aiplatform.v1.UploadModelResponse;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class UploadModelSample {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String modelDisplayName = \"YOUR_MODEL_DISPLAY_NAME\";\u00a0 \u00a0 String metadataSchemaUri =\u00a0 \u00a0 \u00a0 \u00a0 \"gs://google-cloud-aiplatform/schema/trainingjob/definition/custom_task_1.0.0.yaml\";\u00a0 \u00a0 String imageUri = \"YOUR_IMAGE_URI\";\u00a0 \u00a0 String artifactUri = \"gs://your-gcs-bucket/artifact_path\";\u00a0 \u00a0 uploadModel(project, modelDisplayName, metadataSchemaUri, imageUri, artifactUri);\u00a0 }\u00a0 static void uploadModel(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String modelDisplayName,\u00a0 \u00a0 \u00a0 String metadataSchemaUri,\u00a0 \u00a0 \u00a0 String imageUri,\u00a0 \u00a0 \u00a0 String artifactUri)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 ModelServiceSettings modelServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 ModelServiceSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEndpoint(\"us-central1-aiplatform.googleapis.com:443\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (ModelServiceClient modelServiceClient = ModelServiceClient.create(modelServiceSettings)) {\u00a0 \u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 \u00a0 LocationName locationName = LocationName.of(project, location);\u00a0 \u00a0 \u00a0 ModelContainerSpec modelContainerSpec =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ModelContainerSpec.newBuilder().setImageUri(imageUri).build();\u00a0 \u00a0 \u00a0 Model model =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Model.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDisplayName(modelDisplayName)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setMetadataSchemaUri(metadataSchemaUri)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setArtifactUri(artifactUri)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setContainerSpec(modelContainerSpec)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<UploadModelResponse, UploadModelOperationMetadata> uploadModelResponseFuture =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 modelServiceClient.uploadModelAsync(locationName, model);\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Operation name: %s\\n\", uploadModelResponseFuture.getInitialFuture().get().getName());\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to finish...\");\u00a0 \u00a0 \u00a0 UploadModelResponse uploadModelResponse = uploadModelResponseFuture.get(5, TimeUnit.MINUTES);\u00a0 \u00a0 \u00a0 System.out.println(\"Upload Model Response\");\u00a0 \u00a0 \u00a0 System.out.format(\"Model: %s\\n\", uploadModelResponse.getModel());\u00a0 \u00a0 }\u00a0 }}\n```\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300aVertex AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Node.js \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Vertex AI Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Vertex AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/upload-model.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0*/// const modelDisplayName = 'YOUR_MODEL_DISPLAY_NAME';// const metadataSchemaUri = 'YOUR_METADATA_SCHEMA_URI';// const imageUri = 'YOUR_IMAGE_URI';// const artifactUri = 'YOUR_ARTIFACT_URI';// const project = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION';// Imports the Google Cloud Model Service Client libraryconst {ModelServiceClient} = require('@google-cloud/aiplatform');// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: 'us-central1-aiplatform.googleapis.com',};// Instantiates a clientconst modelServiceClient = new ModelServiceClient(clientOptions);async function uploadModel() {\u00a0 // Configure the parent resources\u00a0 const parent = `projects/${project}/locations/${location}`;\u00a0 // Configure the model resources\u00a0 const model = {\u00a0 \u00a0 displayName: modelDisplayName,\u00a0 \u00a0 metadataSchemaUri: '',\u00a0 \u00a0 artifactUri: artifactUri,\u00a0 \u00a0 containerSpec: {\u00a0 \u00a0 \u00a0 imageUri: imageUri,\u00a0 \u00a0 \u00a0 command: [],\u00a0 \u00a0 \u00a0 args: [],\u00a0 \u00a0 \u00a0 env: [],\u00a0 \u00a0 \u00a0 ports: [],\u00a0 \u00a0 \u00a0 predictRoute: '',\u00a0 \u00a0 \u00a0 healthRoute: '',\u00a0 \u00a0 },\u00a0 };\u00a0 const request = {\u00a0 \u00a0 parent,\u00a0 \u00a0 model,\u00a0 };\u00a0 console.log('PARENT AND MODEL');\u00a0 console.log(parent, model);\u00a0 // Upload Model request\u00a0 const [response] = await modelServiceClient.uploadModel(request);\u00a0 console.log(`Long running operation : ${response.name}`);\u00a0 // Wait for operation to complete\u00a0 await response.promise();\u00a0 const result = response.result;\u00a0 console.log('Upload model response ');\u00a0 console.log(`\\tModel : ${result.model}`);}uploadModel();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u6216\u66f4\u65b0 Python\uff0c\u8acb\u53c3\u95b1 [\u5b89\u88dd Python \u7248 Vertex AI SDK](https://cloud.google.com/vertex-ai/docs/start/use-vertex-ai-python-sdk?hl=zh-cn) \u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [   Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/upload_model_sample.py) \n```\ndef upload_model_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 display_name: str,\u00a0 \u00a0 serving_container_image_uri: str,\u00a0 \u00a0 artifact_uri: Optional[str] = None,\u00a0 \u00a0 serving_container_predict_route: Optional[str] = None,\u00a0 \u00a0 serving_container_health_route: Optional[str] = None,\u00a0 \u00a0 description: Optional[str] = None,\u00a0 \u00a0 serving_container_command: Optional[Sequence[str]] = None,\u00a0 \u00a0 serving_container_args: Optional[Sequence[str]] = None,\u00a0 \u00a0 serving_container_environment_variables: Optional[Dict[str, str]] = None,\u00a0 \u00a0 serving_container_ports: Optional[Sequence[int]] = None,\u00a0 \u00a0 instance_schema_uri: Optional[str] = None,\u00a0 \u00a0 parameters_schema_uri: Optional[str] = None,\u00a0 \u00a0 prediction_schema_uri: Optional[str] = None,\u00a0 \u00a0 explanation_metadata: Optional[explain.ExplanationMetadata] = None,\u00a0 \u00a0 explanation_parameters: Optional[explain.ExplanationParameters] = None,\u00a0 \u00a0 sync: bool = True,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 model = aiplatform.Model.upload(\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name,\u00a0 \u00a0 \u00a0 \u00a0 artifact_uri=artifact_uri,\u00a0 \u00a0 \u00a0 \u00a0 serving_container_image_uri=serving_container_image_uri,\u00a0 \u00a0 \u00a0 \u00a0 serving_container_predict_route=serving_container_predict_route,\u00a0 \u00a0 \u00a0 \u00a0 serving_container_health_route=serving_container_health_route,\u00a0 \u00a0 \u00a0 \u00a0 instance_schema_uri=instance_schema_uri,\u00a0 \u00a0 \u00a0 \u00a0 parameters_schema_uri=parameters_schema_uri,\u00a0 \u00a0 \u00a0 \u00a0 prediction_schema_uri=prediction_schema_uri,\u00a0 \u00a0 \u00a0 \u00a0 description=description,\u00a0 \u00a0 \u00a0 \u00a0 serving_container_command=serving_container_command,\u00a0 \u00a0 \u00a0 \u00a0 serving_container_args=serving_container_args,\u00a0 \u00a0 \u00a0 \u00a0 serving_container_environment_variables=serving_container_environment_variables,\u00a0 \u00a0 \u00a0 \u00a0 serving_container_ports=serving_container_ports,\u00a0 \u00a0 \u00a0 \u00a0 explanation_metadata=explanation_metadata,\u00a0 \u00a0 \u00a0 \u00a0 explanation_parameters=explanation_parameters,\u00a0 \u00a0 \u00a0 \u00a0 sync=sync,\u00a0 \u00a0 )\u00a0 \u00a0 model.wait()\u00a0 \u00a0 print(model.display_name)\u00a0 \u00a0 print(model.resource_name)\u00a0 \u00a0 return model\n```\n\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u6a21\u578b\u5c0e\u5165\u6307\u5357](https://cloud.google.com/vertex-ai/docs/model-registry/import-model?hl=zh-cn) \u3002\n## \u767c\u9001\u9810\u6e2c\u8acb\u6c42\n\u5982\u9700\u5411 `Model` \u767c\u9001\u5728\u7dda\u9810\u6e2c\u8acb\u6c42\uff0c\u8acb\u6309\u7167 [\u5f9e\u81ea\u5b9a\u7fa9\u8a13\u7df4\u7684\u6a21\u578b\u7372\u53d6\u9810\u6e2c\u7d50\u679c](https://cloud.google.com/vertex-ai/docs/predictions/get-online-predictions?hl=zh-cn) \u4e2d\u7684\u8aaa\u660e\u64cd\u4f5c\u3002\u7121\u8ad6\u60a8\u662f\u5426\u4f7f\u7528\u81ea\u5b9a\u7fa9\u6a21\u578b\uff0c\u6b64\u904e\u7a0b\u90fd\u4e00\u6a23\u3002\n\u77ad\u89e3 [\u81ea\u5b9a\u7fa9\u5bb9\u5668\u7684\u9810\u6e2c\u8acb\u6c42\u548c\u97ff\u61c9\u8981\u6c42](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements?hl=zh-cn#prediction) \u3002\n## \u5f8c\u7e8c\u6b65\u9a5f\n- \u5982\u9700\u77ad\u89e3\u8a2d\u8a08\u8207 Vertex AI \u642d\u914d\u4f7f\u7528\u7684\u81ea\u5b9a\u7fa9\u5bb9\u5668\u6642\u8981\u8003\u616e\u7684\u6240\u6709\u4e8b\u9805\uff0c\u8acb\u53c3\u95b1 [\u81ea\u5b9a\u7fa9\u5bb9\u5668\u8981\u6c42](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements?hl=zh-cn) \u3002", "guide": "Vertex AI"}