{"title": "Vertex AI - Training parameters for forecast models", "url": "https://cloud.google.com/vertex-ai/docs/tabular-data/forecasting-parameters", "abstract": "# Vertex AI - Training parameters for forecast models\nThis page provides detailed information about the parameters used in forecast model training. To learn how to train a forecast model, see [Train a forecast model](/vertex-ai/docs/tabular-data/forecasting/train-model) and [Train a model with Tabular Workflow for Forecasting](/vertex-ai/docs/tabular-data/tabular-workflows/forecasting-train) .\n", "content": "## Model training methods\nYou can choose between the following methods for training your model:\n**Time series Dense Encoder (TiDE)** : Optimized dense [DNN](https://developers.google.com/machine-learning/glossary#deep-neural-network) -based encoder-decoder model. Great model quality with fast training and inference, especially for long contexts and horizons. [Learn more](https://arxiv.org/abs/2304.08424) .\n**Temporal Fusion Transformer (TFT)** : Attention-based [DNN](https://developers.google.com/machine-learning/glossary#deep-neural-network) model designed to produce high accuracy and interpretability by aligning the model with the general multi-horizon forecasting task. [Learn more](https://ai.googleblog.com/2021/12/interpretable-deep-learning-for-time.html) .\n**AutoML (L2L)** : A good choice for a wide range of use cases. [Learn more](https://ai.googleblog.com/2020/12/using-automl-for-time-series-forecasting.html) .\n**Seq2Seq+** : A good choice for experimentation. The algorithm is likely to converge faster than AutoML because its architecture is simpler and it uses a smaller search space. Our experiments find that Seq2Seq+ performs well with a small time budget and on datasets smaller than 1\u00a0GB in size.\n## Feature type and availability at forecast\nEvery column used for training a forecasting model must have a type: or . Covariates are further designated as available or unavailable at forecast time.\n| Series type | Available at forecast time | Description                                                   | Examples        | API fields      |\n|:--------------|:-----------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------|:--------------------------------|\n| Attribute  | Available     | An attribute is a static feature that does not change with time.                                      | Item color, product description.  | time_series_attribute_columns |\n| Covariate  | Available     | An exogenous variable that is expected to change over time. A covariate available at forecast time is a leading indicator. You must provide prediction data for this column for each point in the forecast horizon. | Holidays, planned promotions or events. | available_at_forecast_columns |\n| Covariate  | Not available    | A covariate not available at forecast time. You don't need to provide values for these features when creating a forecast.                        | Actual weather.       | unavailable_at_forecast_columns |\nLearn more about the relationship between feature availability and the [forecast horizon, context window, and forecast window](#forecast-window) .\n## Forecast horizon, context window, and forecast window\nForecasting features are divided into [static attributes and time-variant covariates](#feature-type) .\nWhen you train a forecasting model, you must specify which covariate training data is the most important to capture. This is expressed in the form of a **Forecast window** , which is a series of rows composed of the following:\n- The context or historical data, up to the time of prediction.\n- The horizon or rows used for prediction.\nTaken together, the rows in the window define a time-series instance that serves as a model input: it is what Vertex AI trains on, evaluates on, and uses for prediction. The row used to generate the window is the first row of the horizon and uniquely identifies the window in the time series.\nThe forecast horizon determines how far into the future the model forecasts the target value for each row of prediction data.\nThe context window sets how far back the model looks during training (and for forecasts). In other words, for each training datapoint, the context window determines how far back the model looks for predictive patterns. [Learn best practices](/vertex-ai/docs/tabular-data/bp-tabular#context-window) for finding a good value for the context window.\nFor example, if **Context window** = `14` and **Forecast horizon** = `7` , then each window example will have `14 + 7 = 21` rows.### Availability at forecast\nForecasting covariates can be divided into those that are available at forecast time and those that are unavailable at forecast time.\nWhen dealing with covariates that are at forecast time, Vertex AI considers covariate values from both the context window and the forecast horizon for training, evaluation, and prediction. When dealing with covariates that are at forecast time, Vertex AI considers covariate values from the context window but explicitly excludes covariate values from the forecast horizon.### Rolling window strategies\nVertex AI generates **Forecast windows** from the input data using a rolling window strategy. The default strategy is **Count** .\n- **Count** . The number of windows generated by Vertex AI must not exceed a user-provided maximum. If the number of rows in the input dataset is less than the maximum number of windows, every row is used to generate a window. Otherwise, Vertex AI performs random sampling to select the rows. The default value for the maximum number of windows is`100,000,000`. The maximum number of windows cannot exceed`100,000,000`.\n- **Stride** . Vertex AI uses one out of every X input rows to generate a window, up to a maximum of 100,000,000 windows. This option is useful for seasonal or periodic predictions. For example, you can limit forecasting to a single day of the week by setting the stride length value to`7`. The value can be between`1`and`1000`.\n- **Column** . You can add a column to your input data where the values are either`True`or`False`. Vertex AI generates a window for every input row where the value of the column is`True`. The`True`and`False`values can be set in any order, as long as the total count of`True`rows is less than`100,000,000`. Boolean values are preferred, but string values are also accepted. String values are not case sensitive.\nBy generating fewer than the default `100,000,000` windows, you can reduce the time required for preprocessing and model evaluation. Furthermore, window downsampling gives you more control over the distribution of windows seen during training. If used correctly, this may lead to improved and more consistent results.### How the context window and forecast horizon are used during training and forecasts\nSuppose you have data that is collected monthly, with a context window of 5 months and forecasting horizon of 5 months. Training your model with 12 months of data would result in the following sets of inputs and forecasts:\n- `[1-5]:[6-10]`\n- `[2-6]:[7-11]`\n- `[3-7]:[8-12]`\nAfter training, the model could be used to predict months 13 through 17:\n- `[8-12]:[13-17]`\nThe model uses only the data that falls into the context window to make the forecast. Any data you provide that falls outside of the context window is ignored.\nAfter data is collected for month 13, it can be used to predict through month 18:\n- `[9-13]:[14-18]`\nThis can continue into the future, as long as you are getting good results. Eventually, you could retrain the model with the new data. For example, if you retrained the model after adding 6 more months of data, the training data would be used as follows:\n- `[2-6]:[7-11]`\n- `[3-7]:[8-12]`\n- `[4-8]:[9-13]`\n- `[5-9]:[10-14]`\n- `[6-10]:[11-15]`\n- `[7-11]:[12-16]`\n- `[8-12]:[13-17]`\n- `[9-13]:[14-18]`\nYou can then use the model to predict month 19 through 23:\n- `[14-18]:[19-23]`\n## Optimization objectives for forecast models\nWhen you train a model, Vertex AI selects a default optimization objective based on your model type and the data type used for your target column. The following table provides some details about problems forecast models are best suited for:\n| Optimization objective | API value    | Use this objective if you want to...                                                |\n|:-------------------------|:-----------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| RMSE      | minimize-rmse   | Minimize root-mean-squared error (RMSE). Captures more extreme values accurately and is less biased when aggregating predictions. Default value.                     |\n| MAE      | minimize-mae   | Minimize mean-absolute error (MAE). Views extreme values as outliers with less impact on model.                                 |\n| RMSLE     | minimize-rmsle   | Minimize root-mean-squared log error (RMSLE). Penalizes error on relative size rather than absolute value. Useful when both predicted and actual values can be large.                |\n| RMSPE     | minimize-rmspe   | Minimize root-mean-squared percentage error (RMSPE). Captures a large range of values accurately. Similar to RMSE, but relative to target magnitude. Useful when the range of values is large.         |\n| WAPE      | minimize-wape-mae  | Minimize the combination of weighted absolute percentage error (WAPE) and mean-absolute-error (MAE). Useful when the actual values are low.                      |\n| Quantile loss   | minimize-quantile-loss | Minimize the scaled pinball loss of the defined quantiles to quantify uncertainty in estimates. Quantile predictions quantify the uncertainty of predictions. They measure the likelihood of a prediction being within a range. |\n## Holiday regions\nFor certain use cases, forecasting data can exhibit irregular behaviour on days that correspond to regional holidays. If you want your model to take this effect into account, select the geographical region or regions that correspond to your input data. During training, Vertex AI creates holiday categorical features within the model based on the date from the time column and the specified geographical regions.\nThe following is an excerpt of dates and holiday categorical features for the United States. Note that a categorical feature is assigned to the primary date, one or more preholiday days, and one or more postholiday days. For example, the primary date for Mother's Day in the US in 2013 was on May 12th. Mother's Day features are assigned to the primary date, six preholiday days and one postholiday day.\n| Date  | Holiday categorical feature |\n|:-----------|:------------------------------|\n| 2013-05-06 | MothersDay     |\n| 2013-05-07 | MothersDay     |\n| 2013-05-08 | MothersDay     |\n| 2013-05-09 | MothersDay     |\n| 2013-05-10 | MothersDay     |\n| 2013-05-11 | MothersDay     |\n| 2013-05-12 | MothersDay     |\n| 2013-05-13 | MothersDay     |\n| 2013-05-26 | US_MemorialDay    |\n| 2013-05-27 | US_MemorialDay    |\n| 2013-05-28 | US_MemorialDay    |\nAcceptable values for holiday regions include the following:\n- `GLOBAL`: Detects holidays for all world regions.\n- `NA`: Detects holidays for North America.\n- `JAPAC`: Detects holidays for Japan and Asia Pacific.\n- `EMEA`: Detects holidays for Europe, the Middle East and Africa.\n- `LAC`: Detects holidays for Latin America and the Caribbean.\n- [ISO 3166-1 Country codes](/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create-time-series#holiday_region) : Detects holidays for individual countries.\nTo view the full list of holiday dates for each geographic region, refer to the `holidays_and_events_for_forecasting` table in BigQuery. You can open this table via the Google Cloud console using the following steps:\n- In the Google Cloud console, in the BigQuery section, go to the **BigQuery Studio** page. [Go to BigQuery Studio](https://console.cloud.google.com/bigquery) \n- In the [Explorer panel](/bigquery/docs/bigquery-web-ui#explorer_panel) , open the`bigquery-public-data`project. If you can't find this project or to learn more, see [Open a public dataset](/bigquery/docs/quickstarts/query-public-dataset-console#open_a_public_dataset) .\n- Open the`ml_datasets`dataset.\n- Open the`holidays_and_events_for_forecasting`table.\nThe following is an excerpt from the `holidays_and_events_for_forecasting` table:", "guide": "Vertex AI"}