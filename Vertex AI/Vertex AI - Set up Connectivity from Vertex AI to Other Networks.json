{"title": "Vertex AI - Set up Connectivity from Vertex AI to Other Networks", "url": "https://cloud.google.com/vertex-ai/docs/general/hybrid-connectivity", "abstract": "# Vertex AI - Set up Connectivity from Vertex AI to Other Networks\nBe sure that you are familiar with the material at [VPC peerings](/vertex-ai/docs/general/vpc-peering) before reading this guide.\nBy default, the peering configuration only allows the peered Vertex AI network to reach endpoints in your local subnets. Exporting custom routes allows the producer network to reach other networks to which network has static or dynamic routes.\nBecause [transitive peering is not supported](/vpc/docs/vpc-peering#transit-network) , connections from Vertex AI is not able to reach endpoints in other networks that are directly peered to your network, even with \"Export custom routes\" enabled. In the example shown in the following diagram, packets can traverse Peering Connection #1 but not Peering Connection #2.\nTo enable Vertex AI to reach User Network #2, replace Peering Connection #2 with VPN #2 as shown in the following diagram.\nEnabling custom routes in Peering Connection #1 allows IP packets from the Vertex AI network to reach User Network #2.\nTo allow response packets from User Network #2 to be routed back to the Vertex AI network, the return route also needs to exist in the routing table for User Network #2. VPN routes are exchanged using Border Gateway Protocol (BGP) on Cloud Routers, we can [customize the BGP configuration](/network-connectivity/docs/router/how-to/advertising-custom-ip) in User #1 to advertise a route to the Vertex AI network range of `10.1.0.0/16` to its peer User Network #2.\nNote that you are able to edit both sides of the VPN #1 BGP configuration to allow the on-premises network and the Vertex AI network to learn routes to each other. Because there is no attempt to transmit forward-path packets from the Vertex AI network, nor the response packets over peering connections with respect to any single network, none of these forwarding attempts are explicitly blocked.\n", "content": "## Set up Connectivity from Vertex AI to the internet\nIf no network is specified when launching a workload, the workload runs in a separate Google-managed producer project.\nIf a network is specified, the workload runs in a producer project that is peered to the consumer project.\nBy default, the Vertex AI network has its own route to the internet and the producer network has its own default route to the internet.\nTo force outbound connections from the producer network to be routed through your network, you can enable [VPC Service Controls for peerings](/sdk/gcloud/reference/beta/services/vpc-peerings/enable-vpc-service-controls) . Note that this is a separate configuration from [VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/overview) .\nEnabling VPC Service Controls for peerings causes the following changes in the Vertex AI network:\n- Deletes the default internet route.\n- Creates a route for destination`199.36.153.4/30`with default internet gateway next hop.\n- Creates a Cloud DNS managed private zone for`*.googleapis.com`with appropriate records to map host names to one of those four addresses.\n- Authorizes that zone for the`servicenetworking`VPC network to use.\nWith this change in place, you can export the default route from your network to ensure that outbound connections to the internet are routed through your VPC network. This change also lets you apply any needed policies to the outbound traffic from Vertex AI.\n**Note:** Because enabling VPC Service Controls for peerings deletes the default route in the producer project, the workload doesn't have an external IP address. This means that these connections must be routed through a NAT instance or web proxy in your VPC network to access the Internet.\n### Working with VPC Service Controls\nIf a network is specified for the workload and [VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/overview) is enabled, the workload runs in a producer network that is peered to the consumer project and that is subject to the same policies as the consumer network.\nIf these policies block outbound traffic, then the workload similarly won't be able to reach the internet. In this case, you must follow the steps in the previous section to force outbound traffic from the workload to pass through a NAT instance in your VPC network.\n## Set up Connectivity from Vertex AI using proxies\nAnother pattern for controlling the outbound IP from Vertex AI is to force outbound connections from workloads to go through a web proxy that you control. This also allows inspection of outbound connections for compliance.\nHowever, using a third party proxy forces the user to manage the proxy's certificate to authentication complaints. Furthermore, these proxies may not propose a list of cipher suites that intersects with what Vertex AI SDKs and APIs expect.\nGoogle Cloud now offers a [Secure Web Proxy](https://cloud.google.com/secure-web-proxy/docs/overview) to facilitate this pattern. You may now follow the [Deploy a Secure Web Proxy instance](https://cloud.google.com/secure-web-proxy/docs/quickstart) quickstart guide and adapt your workloads to use that for outbounding connections. These connections will appear to originate from the proxy's source IP address.\n## Set up allowlists for API access\nFor transactions between Vertex AI workloads and Google APIs, you must allow access from the workloads to the IP ranges used by Google APIs. For this, you may run the provided [script to return IP addresses for default domains](https://cloud.google.com/vpc/docs/access-apis-external-ip#ip-addr-defaults) .", "guide": "Vertex AI"}