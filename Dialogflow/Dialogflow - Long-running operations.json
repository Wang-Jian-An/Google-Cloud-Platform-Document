{"title": "Dialogflow - Long-running operations", "url": "https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation", "abstract": "# Dialogflow - Long-running operations\nSome methods of the Dialogflow API return a long-running operation. These methods are asynchronous, and the operation may not be completed when the method returns a response. You can check on the status, wait for completion, or cancel operations.\n", "content": "## Wait for an operation to complete\nThe following shows how to wait for an operation to complete.\nTo poll an operation's status, call the `get` method for the [Operations](/dialogflow/cx/docs/reference/rest/v3/projects.locations.operations) resource. When the operation has completed, the `done` field is set to true.\n **Note:** If you have many operations to check, you should rate limit your calls or use the `list` method instead.\nBefore using any of the request data, make the following replacements:- : your [region ID](/dialogflow/cx/docs/concept/region) \n- : your Google Cloud project ID\n- : your operation ID\nHTTP method and URL:\n```\nGET https://REGION_ID-dialogflow.googleapis.com/v3/projects/PROJECT_ID/locations/REGION_ID/operations/OPERATION_ID\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_ID/locations/REGION_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.dialogflow.v3.SomeOperationType\",\n \"state\": \"DONE\"\n },\n \"done\": true,\n ...\n}\n```\nTo authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow-cx/src/main/java/dialogflow/cx/ExportAgent.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.dialogflow.cx.v3.AgentName;import com.google.cloud.dialogflow.cx.v3.AgentsClient;import com.google.cloud.dialogflow.cx.v3.AgentsSettings;import com.google.cloud.dialogflow.cx.v3.ExportAgentRequest;import com.google.cloud.dialogflow.cx.v3.ExportAgentResponse;import com.google.protobuf.Struct;import java.io.IOException;import java.util.concurrent.ExecutionException;public class ExportAgent {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String agentId = \"my-agent-id\";\u00a0 \u00a0 String location = \"my-location\";\u00a0 \u00a0 exportAgent(projectId, agentId, location);\u00a0 }\u00a0 public static void exportAgent(String projectId, String agentId, String location)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException {\u00a0 \u00a0 // Sets the api endpoint to specified location\u00a0 \u00a0 String apiEndpoint = String.format(\"%s-dialogflow.googleapis.com:443\", location);\u00a0 \u00a0 AgentsSettings agentsSettings = AgentsSettings.newBuilder().setEndpoint(apiEndpoint).build();\u00a0 \u00a0 // Note: close() needs to be called on the AgentsClient object to clean up resources\u00a0 \u00a0 // such as threads. In the example below, try-with-resources is used,\u00a0 \u00a0 // which automatically calls close().\u00a0 \u00a0 try (AgentsClient agentsClient = AgentsClient.create(agentsSettings)) {\u00a0 \u00a0 \u00a0 ExportAgentRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ExportAgentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(AgentName.of(projectId, location, agentId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Returns a future of the operation\u00a0 \u00a0 \u00a0 OperationFuture<ExportAgentResponse, Struct> future =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 agentsClient.exportAgentOperationCallable().futureCall(request);\u00a0 \u00a0 \u00a0 // get the export agent response after the operation is completed\u00a0 \u00a0 \u00a0 ExportAgentResponse response = future.get();\u00a0 \u00a0 \u00a0 System.out.println(response);\u00a0 \u00a0 }\u00a0 }}\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow-cx/long-running-operation.js) \n```\nconst {AgentsClient, protos} = require('@google-cloud/dialogflow-cx');const api_endpoint = `${location}-dialogflow.googleapis.com`;const client = new AgentsClient({apiEndpoint: api_endpoint});const exportAgentRequest =\u00a0 new protos.google.cloud.dialogflow.cx.v3.ExportAgentRequest();exportAgentRequest.name = `projects/${projectId}/locations/${location}/agents/${agentId}`;// exportAgent call returns a promise to a long running operationconst [operation] = await client.exportAgent(exportAgentRequest);// Waiting for the long running opporation to finishconst [response] = await operation.promise();// Prints the result of the operation when the operation is doneconsole.log(response);\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow-cx/long_running_operation.py) \n```\nfrom google.cloud.dialogflowcx_v3.services.agents.client import AgentsClientfrom google.cloud.dialogflowcx_v3.types.agent import ExportAgentRequestdef export_long_running_agent(project_id, agent_id, location):\u00a0 \u00a0 api_endpoint = f\"{location}-dialogflow.googleapis.com:443\"\u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 agents_client = AgentsClient(client_options=client_options)\u00a0 \u00a0 export_request = ExportAgentRequest()\u00a0 \u00a0 export_request.name = (\u00a0 \u00a0 \u00a0 \u00a0 f\"projects/{project_id}/locations/{location}/agents/{agent_id}\"\u00a0 \u00a0 )\u00a0 \u00a0 # export_agent returns a long running operation\u00a0 \u00a0 operation = agents_client.export_agent(request=export_request)\u00a0 \u00a0 # Returns the result of the operation when the operation is done\u00a0 \u00a0 return operation.result()\n```", "guide": "Dialogflow"}