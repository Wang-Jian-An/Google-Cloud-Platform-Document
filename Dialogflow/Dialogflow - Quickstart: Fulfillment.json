{"title": "Dialogflow - Quickstart: Fulfillment", "url": "https://cloud.google.com/dialogflow/es/docs/quick/fulfillment", "abstract": "# Dialogflow - Quickstart: Fulfillment\nThis guide shows you how to integrate your agent with your services using [fulfillment](/dialogflow/docs/fulfillment-overview) . Integrating your service allows you to take actions based on end-user expressions and send dynamic responses back to the end-user.\n**Note:** If you are using Google Assistant, check options on the [Google Assistant](/dialogflow/es/docs/integrations/aog) page.\n", "content": "## Before you begin\nIf you don't plan on using fulfillment, you can skip this quickstart.\nThese steps use [Cloud Functions](/functions/docs) and assume basic Node.js knowledge. If you want to create fulfillment using your own server or another language, see the more detailed [fulfillment documentation](/dialogflow/docs/fulfillment-overview) .\nYou should do the following before reading this guide:\n- Read [Dialogflow basics](/dialogflow/docs/basics) .\n- Perform [setup steps](/dialogflow/docs/quick/setup) .\n- Perform steps in the [Build an agent](/dialogflow/docs/quick/build-agent) quickstart guide. Steps below continue working on the same agent. If you no longer have that agent, you can download [build-agent-quickstart.zip](/static/dialogflow/es/docs/data/build-agent-quickstart.zip) and [import the file](/dialogflow/docs/agents-settings#export) .## The inline editor\nThe Dialogflow Console has a built-in code editor, called the [inline editor](/dialogflow/docs/fulfillment-inline-editor) that you can use to create fulfillment code and deploy the code to [Cloud Functions](/functions/docs) . Cloud Functions has associated charges, but the service is available for no charge up to a [significant number of monthly invocations](/functions/pricing) . Note that you still must register and provide a valid billing account. Cancel anytime.\nWhen you initially enable the inline editor, Node.js fulfillment code is pre-populated with default handlers for [default intents](/dialogflow/docs/intents-default) that are included for all agents. The code also has commented instructions for adding handlers for developer-defined intents.\nThe inline editor is intended for simple fulfillment testing and prototyping. Once you are ready to build a production application, you should create a [webhook service](/dialogflow/docs/fulfillment-webhook) .\n## Enable and deploy fulfillment with the Inline Editor\nTo enable and deploy the default fulfillment code using the Inline Editor:\n- Click **Fulfillment** in the left sidebar menu.\n- Toggle the **Inline Editor** to **Enabled** .\n- If you did not [enable billing in setup steps](/dialogflow/docs/quick/setup#billing) , you are prompted to enable billing now. Cloud Functions has associated charges, but the service is available for no charge up to a [significant number of monthly invocations](/functions/pricing) . Note that you still must register and provide a billing account. Cancel anytime.\n- Click **Deploy** at the bottom of the form, and wait until dialogs indicate that it has been deployed.\nFor each intent that requires fulfillment, you must enable fulfillment for the intent. To enable fulfillment for the Default Welcome Intent:\n- Click **Intents** in the left sidebar menu.\n- Click **Default Welcome Intent** .\n- Scroll down to the **Fulfillment** section and toggle **Enable webhook call for this intent** on. **Note:** Enabling fulfillment overrides responses set in the **Responses** section of the intent. If fulfillment fails, the entries in the **Responses** section will be used.\n- Click the **Save** button and wait until the **Agent Training** dialog indicates that training is complete.\nNow you can test your fulfillment in the simulator. Enter `Hi` in the simulator, and it responds with `Welcome to my agent!` . This response is sent from the fulfillment webhook you just deployed. In particular, the response came from this code:\n```\nfunction welcome(agent) {\n agent.add(`Welcome to my agent!`);\n}\n```\n## Create a custom fulfillment handler\nThe steps above use a handler supplied by the default inline editor code. To create a custom handler:\n- Enable fulfillment for the`get-agent-name`intent you created in previous steps.\n- Click **Fulfillment** in the left sidebar menu, and examine the code in the inline editor.\n- Find this line:```\nexports.dialogflowFirebaseFulfillment = functions.https.onRequest((request, response) => {\n```The `onRequest` function handles all requests from Dialogflow. Within the body of this function, specific handler functions are defined. These handler functions are invoked when associated intents are matched. For example, the function used in the previous section is `function welcome(agent)` .\n- Below the existing handlers, add this function for the `get-agent-name` intent:```\nfunction getAgentNameHandler(agent) {\u00a0 agent.add('From fulfillment: My name is Dialogflow!');}\n```\n- Below the handler function definitions, there are `intentMap.set()` calls. These calls associate specific handlers with intents by name. For example, `intentMap.set('Default Welcome Intent', welcome)` associates the `welcome` handler with the intent named `Default Welcome Intent` .\n- Below the existing `intentMap.set` calls, add this line for the `get-agent-name` intent:```\nintentMap.set('get-agent-name', getAgentNameHandler);\n```\n- Click **Deploy** at the bottom of the form.\n- Enter `What's your name?` in the simulator. The `From fulfillment: My name is Dialogflow!` response is sent from your new handler.## Access parameter values\nIn previous steps, you created a `set-language` intent to identify human and programming languages. The intent uses the `language` and `language-programming` parameters. In this section, you access values for these parameters in your fulfillment handler.\nTo add the handler:\n- Enable fulfillment for the`set-language`intent.\n- Click **Fulfillment** in the left sidebar menu.\n- Similar to steps above, add the following handler and `intentMap` call:```\nfunction languageHandler(agent) {\u00a0 \u00a0 const language = agent.parameters.language;\u00a0 \u00a0 const programmingLanguage = agent.parameters['language-programming'];\u00a0 \u00a0 if (language) {\u00a0 \u00a0 \u00a0 \u00a0 agent.add(`From fulfillment: Wow! I didn't know you knew ${language}`);\u00a0 \u00a0 } else if (programmingLanguage) {\u00a0 \u00a0 \u00a0 \u00a0 agent.add(`From fulfillment: ${programmingLanguage} is cool`);\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 agent.add(`From fulfillment: What language do you know?`);\u00a0 \u00a0 }}\n``````\nintentMap.set('set-language', languageHandler);\n```\n- Click **Deploy** .\nThis handler retrieves the parameters `language` and `language-programming` and stores them in variables. It retrieves these values from the `agent.parameters` attribute, which is an object that contains all of the parameter names and values that end-users specify in their requests.\nTo try it, enter `I know how to speak German` in the simulator.", "guide": "Dialogflow"}