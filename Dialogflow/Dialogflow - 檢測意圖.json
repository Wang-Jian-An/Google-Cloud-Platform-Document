{"title": "Dialogflow - \u6aa2\u6e2c\u610f\u5716", "url": "https://cloud.google.com/dialogflow/cx/docs/how/detect-intent-stream?hl=zh-cn", "abstract": "# Dialogflow - \u6aa2\u6e2c\u610f\u5716\n[quickstart](https://cloud.google.com/dialogflow/cx/docs/quick/api?hl=zh-cn#detect-intent) \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e9b\u57fa\u672c\u793a\u4f8b\uff0c\u5c55\u793a\u77ad\u5982\u4f55\u6aa2\u6e2c\u610f\u5716\u3002\u672c\u6307\u5357\u7232\u9ad8\u7d1a\u5834\u666f\u63d0\u4f9b\u4e86\u984d\u5916\u7684\u793a\u4f8b\u3002\n", "content": "## \u5f9e\u97f3\u983b\u8f38\u5165\u4e2d\u6aa2\u6e2c\u610f\u5716\n\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u6aa2\u6e2c\u97f3\u983b\u8f38\u5165\u7684\u610f\u5716\u3002\n\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow-cx/src/main/java/dialogflow/cx/DetectIntentAudioInput.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.cloud.dialogflow.cx.v3.AudioEncoding;import com.google.cloud.dialogflow.cx.v3.AudioInput;import com.google.cloud.dialogflow.cx.v3.DetectIntentRequest;import com.google.cloud.dialogflow.cx.v3.DetectIntentResponse;import com.google.cloud.dialogflow.cx.v3.InputAudioConfig;import com.google.cloud.dialogflow.cx.v3.QueryInput;import com.google.cloud.dialogflow.cx.v3.QueryResult;import com.google.cloud.dialogflow.cx.v3.SessionName;import com.google.cloud.dialogflow.cx.v3.SessionsClient;import com.google.cloud.dialogflow.cx.v3.SessionsSettings;import com.google.protobuf.ByteString;import java.io.FileInputStream;import java.io.IOException;public class DetectIntentAudioInput {\u00a0 // DialogFlow API Detect Intent sample with Audio input.\u00a0 public static void main(String[] args) throws IOException, ApiException {\u00a0 \u00a0 /** TODO (developer): replace these values with your own values */\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String locationId = \"global\";\u00a0 \u00a0 String agentId = \"my-agent-id\";\u00a0 \u00a0 String audioFileName = \"resources/book_a_room.wav\";\u00a0 \u00a0 int sampleRateHertz = 16000;\u00a0 \u00a0 /*\u00a0 \u00a0 \u00a0* A session ID is a string of at most 36 bytes in size.\u00a0 \u00a0 \u00a0* Your system is responsible for generating unique session IDs.\u00a0 \u00a0 \u00a0* They can be random numbers, hashed end-user identifiers,\u00a0 \u00a0 \u00a0* or any other values that are convenient for you to generate.\u00a0 \u00a0 \u00a0*/\u00a0 \u00a0 String sessionId = \"my-UUID\";\u00a0 \u00a0 String languageCode = \"en\";\u00a0 \u00a0 detectIntent(\u00a0 \u00a0 \u00a0 \u00a0 projectId, locationId, agentId, audioFileName, sampleRateHertz, sessionId, languageCode);\u00a0 }\u00a0 public static void detectIntent(\u00a0 \u00a0 \u00a0 String projectId,\u00a0 \u00a0 \u00a0 String locationId,\u00a0 \u00a0 \u00a0 String agentId,\u00a0 \u00a0 \u00a0 String audioFileName,\u00a0 \u00a0 \u00a0 int sampleRateHertz,\u00a0 \u00a0 \u00a0 String sessionId,\u00a0 \u00a0 \u00a0 String languageCode)\u00a0 \u00a0 \u00a0 throws IOException, ApiException {\u00a0 \u00a0 SessionsSettings.Builder sessionsSettingsBuilder = SessionsSettings.newBuilder();\u00a0 \u00a0 if (locationId.equals(\"global\")) {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(\"dialogflow.googleapis.com:443\");\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(locationId + \"-dialogflow.googleapis.com:443\");\u00a0 \u00a0 }\u00a0 \u00a0 SessionsSettings sessionsSettings = sessionsSettingsBuilder.build();\u00a0 \u00a0 // Instantiates a client by setting the session name.\u00a0 \u00a0 // Format:`projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>`\u00a0 \u00a0 // Note: close() needs to be called on the SessionsClient object to clean up resources\u00a0 \u00a0 // such as threads. In the example below, try-with-resources is used,\u00a0 \u00a0 // which automatically calls close().\u00a0 \u00a0 try (SessionsClient sessionsClient = SessionsClient.create(sessionsSettings)) {\u00a0 \u00a0 \u00a0 SessionName session =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SessionName.ofProjectLocationAgentSessionName(projectId, locationId, agentId, sessionId);\u00a0 \u00a0 \u00a0 // TODO : Uncomment if you want to print session path\u00a0 \u00a0 \u00a0 // System.out.println(\"Session Path: \" + session.toString());\u00a0 \u00a0 \u00a0 InputAudioConfig inputAudioConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAudioConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioEncoding(AudioEncoding.AUDIO_ENCODING_LINEAR_16)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSampleRateHertz(sampleRateHertz)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 try (FileInputStream audioStream = new FileInputStream(audioFileName)) {\u00a0 \u00a0 \u00a0 \u00a0 // Subsequent requests must **only** contain the audio data.\u00a0 \u00a0 \u00a0 \u00a0 // Following messages: audio chunks. We just read the file in fixed-size chunks. In reality\u00a0 \u00a0 \u00a0 \u00a0 // you would split the user input by time.\u00a0 \u00a0 \u00a0 \u00a0 byte[] buffer = new byte[4096];\u00a0 \u00a0 \u00a0 \u00a0 int bytes = audioStream.read(buffer);\u00a0 \u00a0 \u00a0 \u00a0 AudioInput audioInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioInput.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudio(ByteString.copyFrom(buffer, 0, bytes))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setConfig(inputAudioConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 QueryInput queryInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryInput.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudio(audioInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setLanguageCode(\"en-US\") // languageCode = \"en-US\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSession(session.toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryInput(queryInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 // Performs the detect intent request.\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentResponse response = sessionsClient.detectIntent(request);\u00a0 \u00a0 \u00a0 \u00a0 // Display the query result.\u00a0 \u00a0 \u00a0 \u00a0 QueryResult queryResult = response.getQueryResult();\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Detected Intent: %s (confidence: %f)\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getTranscript(), queryResult.getIntentDetectionConfidence());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow-cx/detect-intent-audio.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'my-project';// const location = 'global';// const agentId = 'my-agent';// const audioFileName = '/path/to/audio.raw';// const encoding = 'AUDIO_ENCODING_LINEAR_16';// const sampleRateHertz = 16000;// const languageCode = 'en'// Imports the Google Cloud Some API libraryconst {SessionsClient} = require('@google-cloud/dialogflow-cx');/**\u00a0* Example for regional endpoint:\u00a0* \u00a0 const location = 'us-central1'\u00a0* \u00a0 const client = new SessionsClient({apiEndpoint: 'us-central1-dialogflow.googleapis.com'})\u00a0*/const client = new SessionsClient();const fs = require('fs');const util = require('util');async function detectIntentAudio() {\u00a0 const sessionId = Math.random().toString(36).substring(7);\u00a0 const sessionPath = client.projectLocationAgentSessionPath(\u00a0 \u00a0 projectId,\u00a0 \u00a0 location,\u00a0 \u00a0 agentId,\u00a0 \u00a0 sessionId\u00a0 );\u00a0 console.info(sessionPath);\u00a0 // Read the content of the audio file and send it as part of the request.\u00a0 const readFile = util.promisify(fs.readFile);\u00a0 const inputAudio = await readFile(audioFileName);\u00a0 const request = {\u00a0 \u00a0 session: sessionPath,\u00a0 \u00a0 queryInput: {\u00a0 \u00a0 \u00a0 audio: {\u00a0 \u00a0 \u00a0 \u00a0 config: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audioEncoding: encoding,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sampleRateHertz: sampleRateHertz,\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 audio: inputAudio,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 languageCode,\u00a0 \u00a0 },\u00a0 };\u00a0 const [response] = await client.detectIntent(request);\u00a0 console.log(`User Query: ${response.queryResult.transcript}`);\u00a0 for (const message of response.queryResult.responseMessages) {\u00a0 \u00a0 if (message.text) {\u00a0 \u00a0 \u00a0 console.log(`Agent Response: ${message.text.text}`);\u00a0 \u00a0 }\u00a0 }\u00a0 if (response.queryResult.match.intent) {\u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 `Matched Intent: ${response.queryResult.match.intent.displayName}`\u00a0 \u00a0 );\u00a0 }\u00a0 console.log(\u00a0 \u00a0 `Current Page: ${response.queryResult.currentPage.displayName}`\u00a0 );}detectIntentAudio();\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow-cx/detect_intent_audio.py) \n```\ndef run_sample():\u00a0 \u00a0 # TODO(developer): Replace these values when running the function\u00a0 \u00a0 project_id = \"YOUR-PROJECT-ID\"\u00a0 \u00a0 # For more information about regionalization see https://cloud.google.com/dialogflow/cx/docs/how/region\u00a0 \u00a0 location_id = \"YOUR-LOCATION-ID\"\u00a0 \u00a0 # For more info on agents see https://cloud.google.com/dialogflow/cx/docs/concept/agent\u00a0 \u00a0 agent_id = \"YOUR-AGENT-ID\"\u00a0 \u00a0 agent = f\"projects/{project_id}/locations/{location_id}/agents/{agent_id}\"\u00a0 \u00a0 # For more information on sessions see https://cloud.google.com/dialogflow/cx/docs/concept/session\u00a0 \u00a0 session_id = str(uuid.uuid4())\u00a0 \u00a0 audio_file_path = \"YOUR-AUDIO-FILE-PATH\"\u00a0 \u00a0 # For more supported languages see https://cloud.google.com/dialogflow/es/docs/reference/language\u00a0 \u00a0 language_code = \"en-us\"\u00a0 \u00a0 detect_intent_audio(agent, session_id, audio_file_path, language_code)def detect_intent_audio(agent, session_id, audio_file_path, language_code):\u00a0 \u00a0 \"\"\"Returns the result of detect intent with an audio file as input.\u00a0 \u00a0 Using the same `session_id` between requests allows continuation\u00a0 \u00a0 of the conversation.\"\"\"\u00a0 \u00a0 session_path = f\"{agent}/sessions/{session_id}\"\u00a0 \u00a0 print(f\"Session path: {session_path}\\n\")\u00a0 \u00a0 client_options = None\u00a0 \u00a0 agent_components = AgentsClient.parse_agent_path(agent)\u00a0 \u00a0 location_id = agent_components[\"location\"]\u00a0 \u00a0 if location_id != \"global\":\u00a0 \u00a0 \u00a0 \u00a0 api_endpoint = f\"{location_id}-dialogflow.googleapis.com:443\"\u00a0 \u00a0 \u00a0 \u00a0 print(f\"API Endpoint: {api_endpoint}\\n\")\u00a0 \u00a0 \u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 session_client = SessionsClient(client_options=client_options)\u00a0 \u00a0 input_audio_config = audio_config.InputAudioConfig(\u00a0 \u00a0 \u00a0 \u00a0 audio_encoding=audio_config.AudioEncoding.AUDIO_ENCODING_LINEAR_16,\u00a0 \u00a0 \u00a0 \u00a0 sample_rate_hertz=24000,\u00a0 \u00a0 )\u00a0 \u00a0 with open(audio_file_path, \"rb\") as audio_file:\u00a0 \u00a0 \u00a0 \u00a0 input_audio = audio_file.read()\u00a0 \u00a0 audio_input = session.AudioInput(config=input_audio_config, audio=input_audio)\u00a0 \u00a0 query_input = session.QueryInput(audio=audio_input, language_code=language_code)\u00a0 \u00a0 request = session.DetectIntentRequest(session=session_path, query_input=query_input)\u00a0 \u00a0 response = session_client.detect_intent(request=request)\u00a0 \u00a0 print(\"=\" * 20)\u00a0 \u00a0 print(f\"Query text: {response.query_result.transcript}\")\u00a0 \u00a0 response_messages = [\u00a0 \u00a0 \u00a0 \u00a0 \" \".join(msg.text.text) for msg in response.query_result.response_messages\u00a0 \u00a0 ]\u00a0 \u00a0 print(f\"Response text: {' '.join(response_messages)}\\n\")\n```\n## \u4f7f\u7528\u4e8b\u4ef6\u8abf\u7528\u6aa2\u6e2c intent\n\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u901a\u904e\u4e8b\u4ef6\u8abf\u7528\u6aa2\u6e2c\u610f\u5716\u3002\n\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow-cx/src/main/java/dialogflow/cx/DetectIntentEventInput.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.cloud.dialogflow.cx.v3.DetectIntentRequest;import com.google.cloud.dialogflow.cx.v3.DetectIntentResponse;import com.google.cloud.dialogflow.cx.v3.EventInput;import com.google.cloud.dialogflow.cx.v3.QueryInput;import com.google.cloud.dialogflow.cx.v3.QueryResult;import com.google.cloud.dialogflow.cx.v3.SessionName;import com.google.cloud.dialogflow.cx.v3.SessionsClient;import com.google.cloud.dialogflow.cx.v3.SessionsSettings;import java.io.IOException;public class DetectIntentEventInput {\u00a0 // DialogFlow API Detect Intent sample with Event input.\u00a0 public static void main(String[] args) throws IOException, ApiException {\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String locationId = \"global\";\u00a0 \u00a0 String agentId = \"my-agent-id\";\u00a0 \u00a0 String sessionId = \"my-UUID\";\u00a0 \u00a0 String event = \"my-event-id\";\u00a0 \u00a0 String languageCode = \"en\";\u00a0 \u00a0 detectIntent(projectId, locationId, agentId, sessionId, event, languageCode);\u00a0 }\u00a0 public static void detectIntent(\u00a0 \u00a0 \u00a0 String projectId,\u00a0 \u00a0 \u00a0 String locationId,\u00a0 \u00a0 \u00a0 String agentId,\u00a0 \u00a0 \u00a0 String sessionId,\u00a0 \u00a0 \u00a0 String event,\u00a0 \u00a0 \u00a0 String languageCode)\u00a0 \u00a0 \u00a0 throws IOException, ApiException {\u00a0 \u00a0 SessionsSettings.Builder sessionsSettingsBuilder = SessionsSettings.newBuilder();\u00a0 \u00a0 if (locationId.equals(\"global\")) {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(\"dialogflow.googleapis.com:443\");\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(locationId + \"-dialogflow.googleapis.com:443\");\u00a0 \u00a0 }\u00a0 \u00a0 SessionsSettings sessionsSettings = sessionsSettingsBuilder.build();\u00a0 \u00a0 // Instantiates a client by setting the session name.\u00a0 \u00a0 // Format:`projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>`\u00a0 \u00a0 // Note: close() needs to be called on the SessionsClient object to clean up resources\u00a0 \u00a0 // such as threads. In the example below, try-with-resources is used,\u00a0 \u00a0 // which automatically calls close().\u00a0 \u00a0 try (SessionsClient sessionsClient = SessionsClient.create(sessionsSettings)) {\u00a0 \u00a0 \u00a0 SessionName session =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SessionName.ofProjectLocationAgentSessionName(projectId, locationId, agentId, sessionId);\u00a0 \u00a0 \u00a0 // TODO : Uncomment if you want to print session path\u00a0 \u00a0 \u00a0 // System.out.println(\"Session Path: \" + session.toString());\u00a0 \u00a0 \u00a0 EventInput.Builder eventInput = EventInput.newBuilder().setEvent(event);\u00a0 \u00a0 \u00a0 // Build the query with the EventInput and language code (en-US).\u00a0 \u00a0 \u00a0 QueryInput queryInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryInput.newBuilder().setEvent(eventInput).setLanguageCode(languageCode).build();\u00a0 \u00a0 \u00a0 // Build the DetectIntentRequest with the SessionName and QueryInput.\u00a0 \u00a0 \u00a0 DetectIntentRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSession(session.toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryInput(queryInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Performs the detect intent request.\u00a0 \u00a0 \u00a0 DetectIntentResponse response = sessionsClient.detectIntent(request);\u00a0 \u00a0 \u00a0 // Display the query result.\u00a0 \u00a0 \u00a0 QueryResult queryResult = response.getQueryResult();\u00a0 \u00a0 \u00a0 // TODO : Uncomment if you want to print queryResult\u00a0 \u00a0 \u00a0 System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 System.out.format(\"Triggering Event: %s \\n\", queryResult.getTriggerEvent());\u00a0 \u00a0 }\u00a0 }}\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow-cx/detect-intent-event.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*//**\u00a0* \u00a0Required. The name of the session this query is sent to.\u00a0* \u00a0Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent\u00a0* \u00a0ID>/sessions/<Session ID>` or `projects/<Project ID>/locations/<Location\u00a0* \u00a0ID>/agents/<Agent ID>/environments/<Environment ID>/sessions/<Session ID>`.\u00a0* \u00a0If `Environment ID` is not specified, we assume default 'draft'\u00a0* \u00a0environment.\u00a0* \u00a0It's up to the API caller to choose an appropriate `Session ID`. It can be\u00a0* \u00a0a random number or some type of session identifiers (preferably hashed).\u00a0* \u00a0The length of the `Session ID` must not exceed 36 characters.\u00a0* \u00a0For more information, see the sessions\u00a0* \u00a0guide (https://cloud.google.com/dialogflow/cx/docs/concept/session).\u00a0* \u00a0Note: Always use agent versions for production traffic.\u00a0* \u00a0See Versions and\u00a0* \u00a0environments (https://cloud.google.com/dialogflow/cx/docs/concept/version).\u00a0*//**\u00a0* Optional. The parameters of this query.\u00a0*/// const queryParams = {}/**\u00a0* \u00a0Required. The input specification. See https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3beta1/ConversationTurn#QueryInput for information about query inputs.\u00a0*/// const event = 'name-of-event-to-trigger';// Imports the Cx libraryconst {SessionsClient} = require('@google-cloud/dialogflow-cx');/**\u00a0* Example for regional endpoint:\u00a0* \u00a0 const location = 'us-central1'\u00a0* \u00a0 const client = new SessionsClient({apiEndpoint: 'us-central1-dialogflow.googleapis.com'})\u00a0*/// Instantiates a clientconst cxClient = new SessionsClient();async function detectIntentWithEventInput() {\u00a0 const sessionId = Math.random().toString(36).substring(7);\u00a0 const sessionPath = cxClient.projectLocationAgentSessionPath(\u00a0 \u00a0 projectId,\u00a0 \u00a0 location,\u00a0 \u00a0 agentId,\u00a0 \u00a0 sessionId\u00a0 );\u00a0 // Construct detect intent request\u00a0 const request = {\u00a0 \u00a0 session: sessionPath,\u00a0 \u00a0 queryInput: {\u00a0 \u00a0 \u00a0 event: {\u00a0 \u00a0 \u00a0 \u00a0 event: event,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 languageCode,\u00a0 \u00a0 },\u00a0 };\u00a0 // Send request and receive response\u00a0 const [response] = await cxClient.detectIntent(request);\u00a0 console.log(`Event Name: ${event}`);\u00a0 // Response message from the triggered event\u00a0 console.log('Agent Response: \\n');\u00a0 console.log(response.queryResult.responseMessages[0].text.text[0]);}detectIntentWithEventInput();\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow-cx/detect_intent_event.py) \n```\nimport uuidfrom google.cloud.dialogflowcx_v3.services.sessions import SessionsClientfrom google.cloud.dialogflowcx_v3.types import sessiondef run_sample():\u00a0 \u00a0 # TODO(developer): Update these values when running the function\u00a0 \u00a0 # project_id = \"YOUR-PROJECT-ID\"\u00a0 \u00a0 # location = \"YOUR-LOCATION-ID\"\u00a0 \u00a0 # agent_id = \"YOUR-AGENT-ID\"\u00a0 \u00a0 # event = \"YOUR-EVENT\"\u00a0 \u00a0 # language_code = \"YOUR-LANGUAGE-CODE\"\u00a0 \u00a0 project_id = \"dialogflow-cx-demo-1-348717\"\u00a0 \u00a0 location = \"global\"\u00a0 \u00a0 agent_id = \"8caa6b47-5dd7-4380-b86e-ea4301d565b0\"\u00a0 \u00a0 event = \"sys.no-match-default\"\u00a0 \u00a0 language_code = \"en-us\"\u00a0 \u00a0 detect_intent_with_event_input(\u00a0 \u00a0 \u00a0 \u00a0 project_id,\u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 agent_id,\u00a0 \u00a0 \u00a0 \u00a0 event,\u00a0 \u00a0 \u00a0 \u00a0 language_code,\u00a0 \u00a0 )def detect_intent_with_event_input(\u00a0 \u00a0 project_id,\u00a0 \u00a0 location,\u00a0 \u00a0 agent_id,\u00a0 \u00a0 event,\u00a0 \u00a0 language_code,):\u00a0 \u00a0 \"\"\"Detects intent using EventInput\"\"\"\u00a0 \u00a0 client_options = None\u00a0 \u00a0 if location != \"global\":\u00a0 \u00a0 \u00a0 \u00a0 api_endpoint = f\"{location}-dialogflow.googleapis.com:443\"\u00a0 \u00a0 \u00a0 \u00a0 print(f\"API Endpoint: {api_endpoint}\\n\")\u00a0 \u00a0 \u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 session_client = SessionsClient(client_options=client_options)\u00a0 \u00a0 session_id = str(uuid.uuid4())\u00a0 \u00a0 session_path = session_client.session_path(\u00a0 \u00a0 \u00a0 \u00a0 project=project_id,\u00a0 \u00a0 \u00a0 \u00a0 location=location,\u00a0 \u00a0 \u00a0 \u00a0 agent=agent_id,\u00a0 \u00a0 \u00a0 \u00a0 session=session_id,\u00a0 \u00a0 )\u00a0 \u00a0 # Construct detect intent request:\u00a0 \u00a0 event = session.EventInput(event=event)\u00a0 \u00a0 query_input = session.QueryInput(event=event, language_code=language_code)\u00a0 \u00a0 request = session.DetectIntentRequest(\u00a0 \u00a0 \u00a0 \u00a0 session=session_path,\u00a0 \u00a0 \u00a0 \u00a0 query_input=query_input,\u00a0 \u00a0 )\u00a0 \u00a0 response = session_client.detect_intent(request=request)\u00a0 \u00a0 response_text = response.query_result.response_messages[0].text.text[0]\u00a0 \u00a0 print(f\"Response: {response_text}\")\u00a0 \u00a0 return response_text\n```\n## \u901a\u904e\u8abf\u7528\u65b9\u89f8\u767c\u7684 intent \u5339\u914d\u6aa2\u6e2c intent\n\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u901a\u904e\u4f86\u96fb\u8005\u89f8\u767c\u7684\u610f\u5716\u5339\u914d\u4f86\u6aa2\u6e2c\u610f\u5716\u3002\n\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow-cx/src/main/java/dialogflow/cx/DetectIntentIntentInput.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.cloud.dialogflow.cx.v3.DetectIntentRequest;import com.google.cloud.dialogflow.cx.v3.DetectIntentResponse;import com.google.cloud.dialogflow.cx.v3.IntentInput;import com.google.cloud.dialogflow.cx.v3.QueryInput;import com.google.cloud.dialogflow.cx.v3.QueryResult;import com.google.cloud.dialogflow.cx.v3.SessionName;import com.google.cloud.dialogflow.cx.v3.SessionsClient;import com.google.cloud.dialogflow.cx.v3.SessionsSettings;import java.io.IOException;public class DetectIntentIntentInput {\u00a0 // DialogFlow API Detect Intent sample with Intent input.\u00a0 public static void main(String[] args) throws IOException, ApiException {\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String locationId = \"global\";\u00a0 \u00a0 String agentId = \"my-agent-id\";\u00a0 \u00a0 String sessionId = \"my-UUID\";\u00a0 \u00a0 String intent = \"my-intent-id\";\u00a0 \u00a0 String languageCode = \"en\";\u00a0 \u00a0 detectIntent(projectId, locationId, agentId, sessionId, intent, languageCode);\u00a0 }\u00a0 public static void detectIntent(\u00a0 \u00a0 \u00a0 String projectId,\u00a0 \u00a0 \u00a0 String locationId,\u00a0 \u00a0 \u00a0 String agentId,\u00a0 \u00a0 \u00a0 String sessionId,\u00a0 \u00a0 \u00a0 String intent,\u00a0 \u00a0 \u00a0 String languageCode)\u00a0 \u00a0 \u00a0 throws IOException, ApiException {\u00a0 \u00a0 SessionsSettings.Builder sessionsSettingsBuilder = SessionsSettings.newBuilder();\u00a0 \u00a0 if (locationId.equals(\"global\")) {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(\"dialogflow.googleapis.com:443\");\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(locationId + \"-dialogflow.googleapis.com:443\");\u00a0 \u00a0 }\u00a0 \u00a0 SessionsSettings sessionsSettings = sessionsSettingsBuilder.build();\u00a0 \u00a0 // Instantiates a client by setting the session name.\u00a0 \u00a0 // Format:`projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>`\u00a0 \u00a0 // Note: close() needs to be called on the SessionsClient object to clean up resources\u00a0 \u00a0 // such as threads. In the example below, try-with-resources is used,\u00a0 \u00a0 // which automatically calls close().\u00a0 \u00a0 try (SessionsClient sessionsClient = SessionsClient.create(sessionsSettings)) {\u00a0 \u00a0 \u00a0 SessionName session =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SessionName.ofProjectLocationAgentSessionName(projectId, locationId, agentId, sessionId);\u00a0 \u00a0 \u00a0 // TODO : Uncomment if you want to print session path\u00a0 \u00a0 \u00a0 // System.out.println(\"Session Path: \" + session.toString());\u00a0 \u00a0 \u00a0 IntentInput.Builder intentInput = IntentInput.newBuilder().setIntent(intent);\u00a0 \u00a0 \u00a0 // Build the query with the IntentInput and language code (en-US).\u00a0 \u00a0 \u00a0 QueryInput queryInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryInput.newBuilder().setIntent(intentInput).setLanguageCode(languageCode).build();\u00a0 \u00a0 \u00a0 // Build the DetectIntentRequest with the SessionName and QueryInput.\u00a0 \u00a0 \u00a0 DetectIntentRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSession(session.toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryInput(queryInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Performs the detect intent request.\u00a0 \u00a0 \u00a0 DetectIntentResponse response = sessionsClient.detectIntent(request);\u00a0 \u00a0 \u00a0 // Display the query result.\u00a0 \u00a0 \u00a0 QueryResult queryResult = response.getQueryResult();\u00a0 \u00a0 \u00a0 // TODO : Uncomment if you want to print queryResult\u00a0 \u00a0 \u00a0 System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Detected Intent: %s (confidence: %f)\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getIntent().getDisplayName(), queryResult.getIntentDetectionConfidence());\u00a0 \u00a0 }\u00a0 }}\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow-cx/detect-intent-with-intent-input.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*//**\u00a0* const projectId = 'your-project-id';\u00a0* const location = 'location';\u00a0* const agentId = 'your-agent-id';\u00a0* const languageCode = 'your-language-code';\u00a0*//**\u00a0* The input specification. See https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3beta1/ConversationTurn#QueryInput for information about query inputs.\u00a0*/// const intentId = 'unique-identifier-of-the-intent-to-trigger';// Imports the Cx libraryconst {\u00a0 SessionsClient,\u00a0 IntentsClient,} = require('@google-cloud/dialogflow-cx');/**\u00a0* Example for regional endpoint:\u00a0* \u00a0 const location = 'us-central1'\u00a0* \u00a0 const client = new SessionsClient({apiEndpoint: 'us-central1-dialogflow.googleapis.com'})\u00a0*/// Instantiates a Sessions clientconst sessionsClient = new SessionsClient();// Instantiates an Intents clientconst intentsClient = new IntentsClient();async function detectIntentWithIntentInput() {\u00a0 const sessionId = Math.random().toString(36).substring(7);\u00a0 // Creates session path\u00a0 const sessionPath = sessionsClient.projectLocationAgentSessionPath(\u00a0 \u00a0 projectId,\u00a0 \u00a0 location,\u00a0 \u00a0 agentId,\u00a0 \u00a0 sessionId\u00a0 );\u00a0 // Creates intent path. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>\u00a0 const intentPath = intentsClient.intentPath(\u00a0 \u00a0 projectId,\u00a0 \u00a0 location,\u00a0 \u00a0 agentId,\u00a0 \u00a0 intentId\u00a0 );\u00a0 // Construct detectIntent request\u00a0 const request = {\u00a0 \u00a0 session: sessionPath,\u00a0 \u00a0 queryInput: {\u00a0 \u00a0 \u00a0 intent: {\u00a0 \u00a0 \u00a0 \u00a0 intent: intentPath,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 languageCode,\u00a0 \u00a0 },\u00a0 };\u00a0 // Send request and receive response\u00a0 const [response] = await sessionsClient.detectIntent(request);\u00a0 // Display the name of the detected intent\u00a0 console.log('Intent Name: \\n');\u00a0 console.log(response.queryResult.intent.displayName);\u00a0 // Agent responds with fulfillment message of the detected intent\u00a0 console.log('Agent Response: \\n');\u00a0 console.log(response.queryResult.responseMessages[0].text.text[0]);}detectIntentWithIntentInput();\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow-cx/detect_intent_with_intent_input.py) \n```\nimport uuidfrom google.cloud.dialogflowcx_v3.services.intents import IntentsClientfrom google.cloud.dialogflowcx_v3.services.sessions import SessionsClientfrom google.cloud.dialogflowcx_v3.types import sessiondef run_sample():\u00a0 \u00a0 # TODO(developer): Update these values when running the function\u00a0 \u00a0 project_id = \"YOUR-PROJECT-ID\"\u00a0 \u00a0 location = \"YOUR-LOCATION-ID\"\u00a0 \u00a0 agent_id = \"YOUR-AGENT-ID\"\u00a0 \u00a0 intent_id = \"YOUR-INTENT-ID\"\u00a0 \u00a0 language_code = \"en-us\"\u00a0 \u00a0 detect_intent_with_intent_input(\u00a0 \u00a0 \u00a0 \u00a0 project_id,\u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 agent_id,\u00a0 \u00a0 \u00a0 \u00a0 intent_id,\u00a0 \u00a0 \u00a0 \u00a0 language_code,\u00a0 \u00a0 )def detect_intent_with_intent_input(\u00a0 \u00a0 project_id,\u00a0 \u00a0 location,\u00a0 \u00a0 agent_id,\u00a0 \u00a0 intent_id,\u00a0 \u00a0 language_code,):\u00a0 \u00a0 \"\"\"Returns the result of detect intent with sentiment analysis\"\"\"\u00a0 \u00a0 client_options = None\u00a0 \u00a0 if location != \"global\":\u00a0 \u00a0 \u00a0 \u00a0 api_endpoint = f\"{location}-dialogflow.googleapis.com:443\"\u00a0 \u00a0 \u00a0 \u00a0 print(f\"API Endpoint: {api_endpoint}\\n\")\u00a0 \u00a0 \u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 session_client = SessionsClient(client_options=client_options)\u00a0 \u00a0 session_id = str(uuid.uuid4())\u00a0 \u00a0 intents_client = IntentsClient()\u00a0 \u00a0 session_path = session_client.session_path(\u00a0 \u00a0 \u00a0 \u00a0 project=project_id,\u00a0 \u00a0 \u00a0 \u00a0 location=location,\u00a0 \u00a0 \u00a0 \u00a0 agent=agent_id,\u00a0 \u00a0 \u00a0 \u00a0 session=session_id,\u00a0 \u00a0 )\u00a0 \u00a0 intent_path = intents_client.intent_path(\u00a0 \u00a0 \u00a0 \u00a0 project=project_id,\u00a0 \u00a0 \u00a0 \u00a0 location=location,\u00a0 \u00a0 \u00a0 \u00a0 agent=agent_id,\u00a0 \u00a0 \u00a0 \u00a0 intent=intent_id,\u00a0 \u00a0 )\u00a0 \u00a0 intent = session.IntentInput(intent=intent_path)\u00a0 \u00a0 query_input = session.QueryInput(intent=intent, language_code=language_code)\u00a0 \u00a0 request = session.DetectIntentRequest(\u00a0 \u00a0 \u00a0 \u00a0 session=session_path,\u00a0 \u00a0 \u00a0 \u00a0 query_input=query_input,\u00a0 \u00a0 )\u00a0 \u00a0 response = session_client.detect_intent(request=request)\u00a0 \u00a0 response_text = []\u00a0 \u00a0 for response_message in response.query_result.response_messages:\u00a0 \u00a0 \u00a0 \u00a0 response_text.append(response_message.text.text)\u00a0 \u00a0 \u00a0 \u00a0 print(response_message.text.text)\u00a0 \u00a0 return response_text\n```\n## \u5553\u7528\u60c5\u611f\u5206\u6790\u5f8c\u6aa2\u6e2c\u610f\u5716\n\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u5728\u5553\u7528\u60c5\u611f\u5206\u6790\u7684\u60c5\u6cc1\u4e0b\u6aa2\u6e2c\u610f\u5716\u3002\n\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow-cx/src/main/java/dialogflow/cx/DetectIntentSentimentAnalysis.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.cloud.dialogflow.cx.v3.DetectIntentRequest;import com.google.cloud.dialogflow.cx.v3.DetectIntentResponse;import com.google.cloud.dialogflow.cx.v3.QueryInput;import com.google.cloud.dialogflow.cx.v3.QueryParameters;import com.google.cloud.dialogflow.cx.v3.QueryResult;import com.google.cloud.dialogflow.cx.v3.SessionName;import com.google.cloud.dialogflow.cx.v3.SessionsClient;import com.google.cloud.dialogflow.cx.v3.SessionsSettings;import com.google.cloud.dialogflow.cx.v3.TextInput;import com.google.common.collect.Maps;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.Map;public class DetectIntentSentimentAnalysis {\u00a0 public static void main(String[] args) throws IOException, ApiException {\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String locationId = \"global\";\u00a0 \u00a0 String agentId = \"my-agent-id\";\u00a0 \u00a0 String sessionId = \"my-UUID\";\u00a0 \u00a0 List<String> texts = new ArrayList<>(List.of(\"my-list\", \"of-texts\"));\u00a0 \u00a0 String languageCode = \"en\";\u00a0 \u00a0 detectIntent(projectId, locationId, agentId, sessionId, texts, languageCode);\u00a0 }\u00a0 // DialogFlow API Detect Intent sample with sentiment analysis.\u00a0 public static Map<String, QueryResult> detectIntent(\u00a0 \u00a0 \u00a0 String projectId,\u00a0 \u00a0 \u00a0 String locationId,\u00a0 \u00a0 \u00a0 String agentId,\u00a0 \u00a0 \u00a0 String sessionId,\u00a0 \u00a0 \u00a0 List<String> texts,\u00a0 \u00a0 \u00a0 String languageCode)\u00a0 \u00a0 \u00a0 throws IOException, ApiException {\u00a0 \u00a0 SessionsSettings.Builder sessionsSettingsBuilder = SessionsSettings.newBuilder();\u00a0 \u00a0 if (locationId.equals(\"global\")) {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(\"dialogflow.googleapis.com:443\");\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(locationId + \"-dialogflow.googleapis.com:443\");\u00a0 \u00a0 }\u00a0 \u00a0 SessionsSettings sessionsSettings = sessionsSettingsBuilder.build();\u00a0 \u00a0 Map<String, QueryResult> queryResults = Maps.newHashMap();\u00a0 \u00a0 // Instantiates a client by setting the session name.\u00a0 \u00a0 // Format:`projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>`\u00a0 \u00a0 // Note: close() needs to be called on the SessionsClient object to clean up resources\u00a0 \u00a0 // such as threads. In the example below, try-with-resources is used,\u00a0 \u00a0 // which automatically calls close().\u00a0 \u00a0 try (SessionsClient sessionsClient = SessionsClient.create(sessionsSettings)) {\u00a0 \u00a0 \u00a0 SessionName session =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SessionName.ofProjectLocationAgentSessionName(projectId, locationId, agentId, sessionId);\u00a0 \u00a0 \u00a0 // TODO : Uncomment if you want to print session path\u00a0 \u00a0 \u00a0 // System.out.println(\"Session Path: \" + session.toString());\u00a0 \u00a0 \u00a0 // Detect intents for each text input.\u00a0 \u00a0 \u00a0 for (String text : texts) {\u00a0 \u00a0 \u00a0 \u00a0 // Set the text (hello) for the query.\u00a0 \u00a0 \u00a0 \u00a0 TextInput.Builder textInput = TextInput.newBuilder().setText(text);\u00a0 \u00a0 \u00a0 \u00a0 // Build the query with the TextInput and language code (en-US).\u00a0 \u00a0 \u00a0 \u00a0 QueryInput queryInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryInput.newBuilder().setText(textInput).setLanguageCode(languageCode).build();\u00a0 \u00a0 \u00a0 \u00a0 // Build the query parameters to analyze the sentiment of the query.\u00a0 \u00a0 \u00a0 \u00a0 QueryParameters queryParameters =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryParameters.newBuilder().setAnalyzeQueryTextSentiment(true).build();\u00a0 \u00a0 \u00a0 \u00a0 // Build the DetectIntentRequest with the SessionName, QueryInput, and QueryParameters.\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSession(session.toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryInput(queryInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryParams(queryParameters)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 // Performs the detect intent request.\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentResponse response = sessionsClient.detectIntent(request);\u00a0 \u00a0 \u00a0 \u00a0 // Display the query result.\u00a0 \u00a0 \u00a0 \u00a0 QueryResult queryResult = response.getQueryResult();\u00a0 \u00a0 \u00a0 \u00a0 // TODO : Uncomment if you want to print queryResult\u00a0 \u00a0 \u00a0 \u00a0 // System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 \u00a0 // SentimentAnalysisResult sentimentAnalysisResult =\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 queryResult.getSentimentAnalysisResult();\u00a0 \u00a0 \u00a0 \u00a0 // Float score = sentimentAnalysisResult.getScore();\u00a0 \u00a0 \u00a0 \u00a0 queryResults.put(text, queryResult);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 return queryResults;\u00a0 }}\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow-cx/detect-intent-with-sentiment-analysis.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*//**\u00a0* \u00a0Required. The name of the session this query is sent to.\u00a0* \u00a0Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent\u00a0* \u00a0ID>/sessions/<Session ID>` or `projects/<Project ID>/locations/<Location\u00a0* \u00a0ID>/agents/<Agent ID>/environments/<Environment ID>/sessions/<Session ID>`.\u00a0* \u00a0If `Environment ID` is not specified, we assume default 'draft'\u00a0* \u00a0environment.\u00a0* \u00a0It's up to the API caller to choose an appropriate `Session ID`. It can be\u00a0* \u00a0a random number or some type of session identifiers (preferably hashed).\u00a0* \u00a0The length of the `Session ID` must not exceed 36 characters.\u00a0* \u00a0For more information, see the sessions\u00a0* \u00a0guide (https://cloud.google.com/dialogflow/cx/docs/concept/session).\u00a0* \u00a0Note: Always use agent versions for production traffic.\u00a0* \u00a0See Versions and\u00a0* \u00a0environments (https://cloud.google.com/dialogflow/cx/docs/concept/version).\u00a0*//**\u00a0* Optional. The parameters of this query.\u00a0*/// const queryParams = {}/**\u00a0* \u00a0Required. The input specification. See https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3beta1/ConversationTurn#QueryInput for information about query inputs.\u00a0*/// const text = 'text-of-your-query';// Imports the Cx libraryconst {SessionsClient} = require('@google-cloud/dialogflow-cx');/**\u00a0* Example for regional endpoint:\u00a0* \u00a0 const location = 'us-central1'\u00a0* \u00a0 const client = new SessionsClient({apiEndpoint: 'us-central1-dialogflow.googleapis.com'})\u00a0*/// Instantiates a clientconst cxClient = new SessionsClient();// Configures whether sentiment analysis should be performed. If not provided, sentiment analysis is not performed.const analyzeQueryTextSentiment = true;async function detectIntentWithSentimentAnalysis() {\u00a0 const sessionId = Math.random().toString(36).substring(7);\u00a0 const sessionPath = cxClient.projectLocationAgentSessionPath(\u00a0 \u00a0 projectId,\u00a0 \u00a0 location,\u00a0 \u00a0 agentId,\u00a0 \u00a0 sessionId\u00a0 );\u00a0 // Construct detect intent request\u00a0 const request = {\u00a0 \u00a0 session: sessionPath,\u00a0 \u00a0 queryInput: {\u00a0 \u00a0 \u00a0 text: {\u00a0 \u00a0 \u00a0 \u00a0 text: query,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 languageCode,\u00a0 \u00a0 },\u00a0 \u00a0 queryParams: {\u00a0 \u00a0 \u00a0 analyzeQueryTextSentiment: analyzeQueryTextSentiment,\u00a0 \u00a0 },\u00a0 };\u00a0 // Run request\u00a0 const [response] = await cxClient.detectIntent(request);\u00a0 console.log(`User Query: ${query}`);\u00a0 // Shows result of sentiment analysis (sentimentAnalysisResult)\u00a0 const sentimentAnalysis = response.queryResult.sentimentAnalysisResult;\u00a0 // Determines sentiment score of user query\u00a0 let sentiment;\u00a0 if (sentimentAnalysis.score < 0) {\u00a0 \u00a0 sentiment = 'negative';\u00a0 } else if (sentimentAnalysis.score > 0) {\u00a0 \u00a0 sentiment = 'positive';\u00a0 } else {\u00a0 \u00a0 sentiment = 'neutral';\u00a0 }\u00a0 console.log(\u00a0 \u00a0 `User input sentiment has a score of ${sentimentAnalysis.score}, which indicates ${sentiment} sentiment.`\u00a0 );}detectIntentWithSentimentAnalysis();\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow-cx/detect_intent_with_sentiment_analysis.py) \n```\nimport uuidfrom google.cloud.dialogflowcx_v3beta1.services.sessions import SessionsClientfrom google.cloud.dialogflowcx_v3beta1.types import sessiondef run_sample():\u00a0 \u00a0 # TODO(developer): Update these values when running the function\u00a0 \u00a0 project_id = \"YOUR-PROJECT-ID\"\u00a0 \u00a0 location = \"YOUR-LOCATION-ID\"\u00a0 \u00a0 agent_id = \"YOUR-AGENT-ID\"\u00a0 \u00a0 text = \"Perfect!\"\u00a0 \u00a0 language_code = \"en-us\"\u00a0 \u00a0 detect_intent_with_sentiment_analysis(\u00a0 \u00a0 \u00a0 \u00a0 project_id,\u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 agent_id,\u00a0 \u00a0 \u00a0 \u00a0 text,\u00a0 \u00a0 \u00a0 \u00a0 language_code,\u00a0 \u00a0 )def detect_intent_with_sentiment_analysis(\u00a0 \u00a0 project_id,\u00a0 \u00a0 location,\u00a0 \u00a0 agent_id,\u00a0 \u00a0 text,\u00a0 \u00a0 language_code,):\u00a0 \u00a0 \"\"\"Returns the result of detect intent with sentiment analysis\"\"\"\u00a0 \u00a0 client_options = None\u00a0 \u00a0 if location != \"global\":\u00a0 \u00a0 \u00a0 \u00a0 api_endpoint = f\"{location}-dialogflow.googleapis.com:443\"\u00a0 \u00a0 \u00a0 \u00a0 print(f\"API Endpoint: {api_endpoint}\\n\")\u00a0 \u00a0 \u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 session_client = SessionsClient(client_options=client_options)\u00a0 \u00a0 session_id = str(uuid.uuid4())\u00a0 \u00a0 session_path = session_client.session_path(\u00a0 \u00a0 \u00a0 \u00a0 project=project_id,\u00a0 \u00a0 \u00a0 \u00a0 location=location,\u00a0 \u00a0 \u00a0 \u00a0 agent=agent_id,\u00a0 \u00a0 \u00a0 \u00a0 session=session_id,\u00a0 \u00a0 )\u00a0 \u00a0 text_input = session.TextInput(text=text)\u00a0 \u00a0 query_input = session.QueryInput(text=text_input, language_code=language_code)\u00a0 \u00a0 query_params = session.QueryParameters(\u00a0 \u00a0 \u00a0 \u00a0 analyze_query_text_sentiment=True,\u00a0 \u00a0 )\u00a0 \u00a0 request = session.DetectIntentRequest(\u00a0 \u00a0 \u00a0 \u00a0 session=session_path,\u00a0 \u00a0 \u00a0 \u00a0 query_input=query_input,\u00a0 \u00a0 \u00a0 \u00a0 query_params=query_params,\u00a0 \u00a0 )\u00a0 \u00a0 response = session_client.detect_intent(request=request)\u00a0 \u00a0 score = response.query_result.sentiment_analysis_result.score\u00a0 \u00a0 print(\"Sentiment Score: {score}\")\u00a0 \u00a0 return score\n```\n## \u901a\u904e\u6587\u5b57\u8f49\u8a9e\u97f3\u97ff\u61c9\u6aa2\u6e2c\u610f\u5716\n\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u901a\u904e\u6587\u5b57\u8f49\u8a9e\u97f3\u97ff\u61c9\u6aa2\u6e2c\u610f\u5716\u3002\n\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow-cx/src/main/java/dialogflow/cx/DetectIntentSynthesizeTextToSpeechOutput.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.cloud.dialogflow.cx.v3.AudioEncoding;import com.google.cloud.dialogflow.cx.v3.AudioInput;import com.google.cloud.dialogflow.cx.v3.DetectIntentRequest;import com.google.cloud.dialogflow.cx.v3.DetectIntentResponse;import com.google.cloud.dialogflow.cx.v3.InputAudioConfig;import com.google.cloud.dialogflow.cx.v3.OutputAudioConfig;import com.google.cloud.dialogflow.cx.v3.OutputAudioEncoding;import com.google.cloud.dialogflow.cx.v3.QueryInput;import com.google.cloud.dialogflow.cx.v3.SessionName;import com.google.cloud.dialogflow.cx.v3.SessionsClient;import com.google.cloud.dialogflow.cx.v3.SessionsSettings;import com.google.cloud.dialogflow.cx.v3.SynthesizeSpeechConfig;import com.google.protobuf.ByteString;import java.io.FileInputStream;import java.io.IOException;public class DetectIntentSynthesizeTextToSpeechOutput {\u00a0 // DialogFlow API Detect Intent sample with synthesize TTS output.\u00a0 public static void main(String[] args) throws IOException, ApiException {\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String locationId = \"my-location-id\";\u00a0 \u00a0 String agentId = \"my-agent-id\";\u00a0 \u00a0 String audioFileName = \"my-audio-file-name\";\u00a0 \u00a0 int sampleRateHertz = 16000;\u00a0 \u00a0 String sessionId = \"my-session-id\";\u00a0 \u00a0 String languageCode = \"my-language-code\";\u00a0 \u00a0 detectIntent(\u00a0 \u00a0 \u00a0 \u00a0 projectId, locationId, agentId, audioFileName, sampleRateHertz, sessionId, languageCode);\u00a0 }\u00a0 public static void detectIntent(\u00a0 \u00a0 \u00a0 String projectId,\u00a0 \u00a0 \u00a0 String locationId,\u00a0 \u00a0 \u00a0 String agentId,\u00a0 \u00a0 \u00a0 String audioFileName,\u00a0 \u00a0 \u00a0 int sampleRateHertz,\u00a0 \u00a0 \u00a0 String sessionId,\u00a0 \u00a0 \u00a0 String languageCode)\u00a0 \u00a0 \u00a0 throws IOException, ApiException {\u00a0 \u00a0 SessionsSettings.Builder sessionsSettingsBuilder = SessionsSettings.newBuilder();\u00a0 \u00a0 if (locationId.equals(\"global\")) {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(\"dialogflow.googleapis.com:443\");\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(locationId + \"-dialogflow.googleapis.com:443\");\u00a0 \u00a0 }\u00a0 \u00a0 SessionsSettings sessionsSettings = sessionsSettingsBuilder.build();\u00a0 \u00a0 // Instantiates a client by setting the session name.\u00a0 \u00a0 // Format:`projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>`\u00a0 \u00a0 // Note: close() needs to be called on the SessionsClient object to clean up resources\u00a0 \u00a0 // such as threads. In the example below, try-with-resources is used,\u00a0 \u00a0 // which automatically calls close().\u00a0 \u00a0 try (SessionsClient sessionsClient = SessionsClient.create(sessionsSettings)) {\u00a0 \u00a0 \u00a0 SessionName session =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SessionName.ofProjectLocationAgentSessionName(projectId, locationId, agentId, sessionId);\u00a0 \u00a0 \u00a0 // TODO : Uncomment if you want to print session path\u00a0 \u00a0 \u00a0 // System.out.println(\"Session Path: \" + session.toString());\u00a0 \u00a0 \u00a0 InputAudioConfig inputAudioConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAudioConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioEncoding(AudioEncoding.AUDIO_ENCODING_LINEAR_16)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSampleRateHertz(sampleRateHertz)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 try (FileInputStream audioStream = new FileInputStream(audioFileName)) {\u00a0 \u00a0 \u00a0 \u00a0 // Subsequent requests must **only** contain the audio data.\u00a0 \u00a0 \u00a0 \u00a0 // Following messages: audio chunks. We just read the file in fixed-size chunks. In reality\u00a0 \u00a0 \u00a0 \u00a0 // you would split the user input by time.\u00a0 \u00a0 \u00a0 \u00a0 byte[] buffer = new byte[4096];\u00a0 \u00a0 \u00a0 \u00a0 int bytes = audioStream.read(buffer);\u00a0 \u00a0 \u00a0 \u00a0 AudioInput audioInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioInput.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudio(ByteString.copyFrom(buffer, 0, bytes))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setConfig(inputAudioConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 QueryInput queryInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryInput.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudio(audioInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setLanguageCode(\"en-US\") // languageCode = \"en-US\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 SynthesizeSpeechConfig speechConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SynthesizeSpeechConfig.newBuilder().setSpeakingRate(1.25).setPitch(10.0).build();\u00a0 \u00a0 \u00a0 \u00a0 OutputAudioConfig outputAudioConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 OutputAudioConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioEncoding(OutputAudioEncoding.OUTPUT_AUDIO_ENCODING_LINEAR_16)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSynthesizeSpeechConfig(speechConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSession(session.toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryInput(queryInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setOutputAudioConfig(outputAudioConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 // Performs the detect intent request.\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentResponse response = sessionsClient.detectIntent(request);\u00a0 \u00a0 \u00a0 \u00a0 // Display the output audio config retrieved from the response.\u00a0 \u00a0 \u00a0 \u00a0 OutputAudioConfig audioConfigFromResponse = response.getOutputAudioConfig();\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"Output Audio Config: %s \\n\", audioConfigFromResponse.toString());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow-cx/detect-intent-synthesize-tts-response.js) \n```\n// Imports the Cx libraryconst {SessionsClient} = require('@google-cloud/dialogflow-cx');/**\u00a0* TODO(developer): Uncomment the following lines before running the sample.\u00a0*/// const projectId = 'ID of GCP project associated with your Dialogflow agent';// const sessionId = `user specific ID of session, e.g. 12345`;// const query = `phrase(s) to pass to detect, e.g. I'd like to reserve a room for six people`;// const languageCode = 'BCP-47 language code, e.g. en-US';// const outputFile = `path for audio output file, e.g. ./resources/myOutput.wav`;// Instantiates a Sessions clientconst sessionsClient = new SessionsClient();// Define session pathconst sessionPath = sessionsClient.projectLocationAgentSessionPath(\u00a0 projectId,\u00a0 location,\u00a0 agentId,\u00a0 sessionId);const fs = require('fs');const util = require('util');async function detectIntentSynthesizeTTSResponse() {\u00a0 // Configuration of how speech should be synthesized. See https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/OutputAudioConfig#SynthesizeSpeechConfig\u00a0 const synthesizeSpeechConfig = {\u00a0 \u00a0 speakingRate: 1.25,\u00a0 \u00a0 pitch: 10.0,\u00a0 };\u00a0 // Constructs the audio query request\u00a0 const request = {\u00a0 \u00a0 session: sessionPath,\u00a0 \u00a0 queryInput: {\u00a0 \u00a0 \u00a0 text: {\u00a0 \u00a0 \u00a0 \u00a0 text: query,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 languageCode: languageCode,\u00a0 \u00a0 },\u00a0 \u00a0 outputAudioConfig: {\u00a0 \u00a0 \u00a0 audioEncoding: 'OUTPUT_AUDIO_ENCODING_LINEAR_16',\u00a0 \u00a0 \u00a0 synthesizeSpeechConfig: synthesizeSpeechConfig,\u00a0 \u00a0 },\u00a0 };\u00a0 // Sends the detectIntent request\u00a0 const [response] = await sessionsClient.detectIntent(request);\u00a0 // Output audio configurations\u00a0 console.log(\u00a0 \u00a0 `Speaking Rate: ${response.outputAudioConfig.synthesizeSpeechConfig.speakingRate}`\u00a0 );\u00a0 console.log(\u00a0 \u00a0 `Pitch: ${response.outputAudioConfig.synthesizeSpeechConfig.pitch}`\u00a0 );\u00a0 const audioFile = response.outputAudio;\u00a0 // Writes audio content to output file\u00a0 util.promisify(fs.writeFile)(outputFile, audioFile, 'binary');\u00a0 console.log(`Audio content written to file: ${outputFile}`);}detectIntentSynthesizeTTSResponse();\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow-cx/detect_intent_synthesize_tts_response.py) \n```\nimport uuidfrom google.cloud.dialogflowcx_v3.services.sessions import SessionsClientfrom google.cloud.dialogflowcx_v3.types import audio_configfrom google.cloud.dialogflowcx_v3.types import sessiondef run_sample():\u00a0 \u00a0 # TODO(developer): Update these values when running the function\u00a0 \u00a0 project_id = \"YOUR-PROJECT-ID\"\u00a0 \u00a0 location = \"YOUR-LOCATION-ID\"\u00a0 \u00a0 agent_id = \"YOUR-AGENT-ID\"\u00a0 \u00a0 text = \"YOUR-TEXT\"\u00a0 \u00a0 audio_encoding = \"YOUR-AUDIO-ENCODING\"\u00a0 \u00a0 language_code = \"YOUR-LANGUAGE-CODE\"\u00a0 \u00a0 output_file = \"YOUR-OUTPUT-FILE\"\u00a0 \u00a0 detect_intent_synthesize_tts_response(\u00a0 \u00a0 \u00a0 \u00a0 project_id,\u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 agent_id,\u00a0 \u00a0 \u00a0 \u00a0 text,\u00a0 \u00a0 \u00a0 \u00a0 audio_encoding,\u00a0 \u00a0 \u00a0 \u00a0 language_code,\u00a0 \u00a0 \u00a0 \u00a0 output_file,\u00a0 \u00a0 )def detect_intent_synthesize_tts_response(\u00a0 \u00a0 project_id,\u00a0 \u00a0 location,\u00a0 \u00a0 agent_id,\u00a0 \u00a0 text,\u00a0 \u00a0 audio_encoding,\u00a0 \u00a0 language_code,\u00a0 \u00a0 output_file,):\u00a0 \u00a0 \"\"\"Returns the result of detect intent with synthesized response.\"\"\"\u00a0 \u00a0 client_options = None\u00a0 \u00a0 if location != \"global\":\u00a0 \u00a0 \u00a0 \u00a0 api_endpoint = f\"{location}-dialogflow.googleapis.com:443\"\u00a0 \u00a0 \u00a0 \u00a0 print(f\"API Endpoint: {api_endpoint}\\n\")\u00a0 \u00a0 \u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 session_client = SessionsClient(client_options=client_options)\u00a0 \u00a0 session_id = str(uuid.uuid4())\u00a0 \u00a0 # Constructs the audio query request\u00a0 \u00a0 session_path = session_client.session_path(\u00a0 \u00a0 \u00a0 \u00a0 project=project_id,\u00a0 \u00a0 \u00a0 \u00a0 location=location,\u00a0 \u00a0 \u00a0 \u00a0 agent=agent_id,\u00a0 \u00a0 \u00a0 \u00a0 session=session_id,\u00a0 \u00a0 )\u00a0 \u00a0 text_input = session.TextInput(text=text)\u00a0 \u00a0 query_input = session.QueryInput(text=text_input, language_code=language_code)\u00a0 \u00a0 synthesize_speech_config = audio_config.SynthesizeSpeechConfig(\u00a0 \u00a0 \u00a0 \u00a0 speaking_rate=1.25,\u00a0 \u00a0 \u00a0 \u00a0 pitch=10.0,\u00a0 \u00a0 )\u00a0 \u00a0 output_audio_config = audio_config.OutputAudioConfig(\u00a0 \u00a0 \u00a0 \u00a0 synthesize_speech_config=synthesize_speech_config,\u00a0 \u00a0 \u00a0 \u00a0 audio_encoding=audio_config.OutputAudioEncoding[audio_encoding],\u00a0 \u00a0 )\u00a0 \u00a0 request = session.DetectIntentRequest(\u00a0 \u00a0 \u00a0 \u00a0 session=session_path,\u00a0 \u00a0 \u00a0 \u00a0 query_input=query_input,\u00a0 \u00a0 \u00a0 \u00a0 output_audio_config=output_audio_config,\u00a0 \u00a0 )\u00a0 \u00a0 response = session_client.detect_intent(request=request)\u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \"Speaking Rate: \"\u00a0 \u00a0 \u00a0 \u00a0 f\"{response.output_audio_config.synthesize_speech_config.speaking_rate}\"\u00a0 \u00a0 )\u00a0 \u00a0 print(\"Pitch: \" f\"{response.output_audio_config.synthesize_speech_config.pitch}\")\u00a0 \u00a0 with open(output_file, \"wb\") as fout:\u00a0 \u00a0 \u00a0 \u00a0 fout.write(response.output_audio)\u00a0 \u00a0 print(f\"Audio content written to file: {output_file}\")\n```\n## \u5728\u505c\u7528 webhook \u7684\u60c5\u6cc1\u4e0b\u6aa2\u6e2c intent\n\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u5728\u505c\u7528 webhook \u8abf\u7528\u7684\u60c5\u6cc1\u4e0b\u6aa2\u6e2c\u610f\u5716\u3002\n\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow-cx/src/main/java/dialogflow/cx/DetectIntentDisableWebhook.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.cloud.dialogflow.cx.v3.DetectIntentRequest;import com.google.cloud.dialogflow.cx.v3.DetectIntentResponse;import com.google.cloud.dialogflow.cx.v3.QueryInput;import com.google.cloud.dialogflow.cx.v3.QueryParameters;import com.google.cloud.dialogflow.cx.v3.QueryResult;import com.google.cloud.dialogflow.cx.v3.SessionName;import com.google.cloud.dialogflow.cx.v3.SessionsClient;import com.google.cloud.dialogflow.cx.v3.SessionsSettings;import com.google.cloud.dialogflow.cx.v3.TextInput;import com.google.common.collect.Maps;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.Map;public class DetectIntentDisableWebhook {\u00a0 public static void main(String[] args) throws IOException, ApiException {\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String locationId = \"global\";\u00a0 \u00a0 String agentId = \"my-agent-id\";\u00a0 \u00a0 String sessionId = \"my-UUID\";\u00a0 \u00a0 List<String> texts = new ArrayList<>(List.of(\"my-list\", \"of-texts\"));\u00a0 \u00a0 String languageCode = \"en\";\u00a0 \u00a0 detectIntent(projectId, locationId, agentId, sessionId, texts, languageCode);\u00a0 }\u00a0 // DialogFlow API Detect Intent sample with webhook disabled.\u00a0 public static Map<String, QueryResult> detectIntent(\u00a0 \u00a0 \u00a0 String projectId,\u00a0 \u00a0 \u00a0 String locationId,\u00a0 \u00a0 \u00a0 String agentId,\u00a0 \u00a0 \u00a0 String sessionId,\u00a0 \u00a0 \u00a0 List<String> texts,\u00a0 \u00a0 \u00a0 String languageCode)\u00a0 \u00a0 \u00a0 throws IOException, ApiException {\u00a0 \u00a0 SessionsSettings.Builder sessionsSettingsBuilder = SessionsSettings.newBuilder();\u00a0 \u00a0 if (locationId.equals(\"global\")) {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(\"dialogflow.googleapis.com:443\");\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(locationId + \"-dialogflow.googleapis.com:443\");\u00a0 \u00a0 }\u00a0 \u00a0 SessionsSettings sessionsSettings = sessionsSettingsBuilder.build();\u00a0 \u00a0 Map<String, QueryResult> queryResults = Maps.newHashMap();\u00a0 \u00a0 // Instantiates a client by setting the session name.\u00a0 \u00a0 // Format:`projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>`\u00a0 \u00a0 // Note: close() needs to be called on the SessionsClient object to clean up resources\u00a0 \u00a0 // such as threads. In the example below, try-with-resources is used,\u00a0 \u00a0 // which automatically calls close().\u00a0 \u00a0 try (SessionsClient sessionsClient = SessionsClient.create(sessionsSettings)) {\u00a0 \u00a0 \u00a0 SessionName session =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SessionName.ofProjectLocationAgentSessionName(projectId, locationId, agentId, sessionId);\u00a0 \u00a0 \u00a0 // TODO : Uncomment if you want to print session path\u00a0 \u00a0 \u00a0 // System.out.println(\"Session Path: \" + session.toString());\u00a0 \u00a0 \u00a0 // Detect intents for each text input.\u00a0 \u00a0 \u00a0 for (String text : texts) {\u00a0 \u00a0 \u00a0 \u00a0 // Set the text (hello) for the query.\u00a0 \u00a0 \u00a0 \u00a0 TextInput.Builder textInput = TextInput.newBuilder().setText(text);\u00a0 \u00a0 \u00a0 \u00a0 // Build the query with the TextInput and language code (en-US).\u00a0 \u00a0 \u00a0 \u00a0 QueryInput queryInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryInput.newBuilder().setText(textInput).setLanguageCode(languageCode).build();\u00a0 \u00a0 \u00a0 \u00a0 // Build the query parameters and setDisableWebhook to true.\u00a0 \u00a0 \u00a0 \u00a0 QueryParameters queryParameters =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryParameters.newBuilder().setDisableWebhook(true).build();\u00a0 \u00a0 \u00a0 \u00a0 // Build the DetectIntentRequest with the SessionName, QueryInput, and QueryParameters.\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSession(session.toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryInput(queryInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryParams(queryParameters)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(request.toString());\u00a0 \u00a0 \u00a0 \u00a0 // Performs the detect intent request.\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentResponse response = sessionsClient.detectIntent(request);\u00a0 \u00a0 \u00a0 \u00a0 // Display the query result.\u00a0 \u00a0 \u00a0 \u00a0 QueryResult queryResult = response.getQueryResult();\u00a0 \u00a0 \u00a0 \u00a0 // TODO : Uncomment if you want to print queryResult\u00a0 \u00a0 \u00a0 \u00a0 // System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 \u00a0 // System.out.format(\"Query Text: '%s'\\n\", queryResult.getText());\u00a0 \u00a0 \u00a0 \u00a0 // System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 \"Detected Intent: %s (confidence: %f)\\n\",\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 queryResult.getIntent().getDisplayName(),\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getIntentDetectionConfidence());\u00a0 \u00a0 \u00a0 \u00a0 queryResults.put(text, queryResult);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 return queryResults;\u00a0 }}\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow-cx/detect-intent-disabled-webhook.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'my-project';// const location = 'global';// const agentId = 'my-agent';// const query = 'Hello';// const languageCode = 'en'const {SessionsClient} = require('@google-cloud/dialogflow-cx');/**\u00a0* Example for regional endpoint:\u00a0* \u00a0 const location = 'us-central1'\u00a0* \u00a0 const client = new SessionsClient({apiEndpoint: 'us-central1-dialogflow.googleapis.com'})\u00a0*/const client = new SessionsClient();async function detectIntentText() {\u00a0 const sessionId = Math.random().toString(36).substring(7);\u00a0 const sessionPath = client.projectLocationAgentSessionPath(\u00a0 \u00a0 projectId,\u00a0 \u00a0 location,\u00a0 \u00a0 agentId,\u00a0 \u00a0 sessionId\u00a0 );\u00a0 console.info(sessionPath);\u00a0 const request = {\u00a0 \u00a0 session: sessionPath,\u00a0 \u00a0 queryParams: {\u00a0 \u00a0 \u00a0 disableWebhook: true,\u00a0 \u00a0 },\u00a0 \u00a0 queryInput: {\u00a0 \u00a0 \u00a0 text: {\u00a0 \u00a0 \u00a0 \u00a0 text: query,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 languageCode,\u00a0 \u00a0 },\u00a0 };\u00a0 const [response] = await client.detectIntent(request);\u00a0 console.log(`Detect Intent Request: ${request.queryParams.disableWebhook}`);\u00a0 for (const message of response.queryResult.responseMessages) {\u00a0 \u00a0 if (message.text) {\u00a0 \u00a0 \u00a0 console.log(`Agent Response: ${message.text.text}`);\u00a0 \u00a0 }\u00a0 }}detectIntentText();\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow-cx/detect_intent_disabled_webhook.py) \n```\nimport uuidfrom google.cloud.dialogflowcx_v3.services.sessions import SessionsClientfrom google.cloud.dialogflowcx_v3.types import sessiondef run_sample():\u00a0 \u00a0 # TODO(developer): Update these values when running the function\u00a0 \u00a0 project_id = \"YOUR-PROJECT-ID\"\u00a0 \u00a0 location = \"YOUR-LOCATION-ID\"\u00a0 \u00a0 agent_id = \"YOUR-AGENT-ID\"\u00a0 \u00a0 text = \"Perfect!\"\u00a0 \u00a0 language_code = \"en-us\"\u00a0 \u00a0 detect_intent_disabled_webhook(\u00a0 \u00a0 \u00a0 \u00a0 project_id,\u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 agent_id,\u00a0 \u00a0 \u00a0 \u00a0 text,\u00a0 \u00a0 \u00a0 \u00a0 language_code,\u00a0 \u00a0 )def detect_intent_disabled_webhook(\u00a0 \u00a0 project_id,\u00a0 \u00a0 location,\u00a0 \u00a0 agent_id,\u00a0 \u00a0 text,\u00a0 \u00a0 language_code,):\u00a0 \u00a0 \"\"\"Returns the result of detect intent with sentiment analysis\"\"\"\u00a0 \u00a0 client_options = None\u00a0 \u00a0 if location != \"global\":\u00a0 \u00a0 \u00a0 \u00a0 api_endpoint = f\"{location}-dialogflow.googleapis.com:443\"\u00a0 \u00a0 \u00a0 \u00a0 print(f\"API Endpoint: {api_endpoint}\\n\")\u00a0 \u00a0 \u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 session_client = SessionsClient(client_options=client_options)\u00a0 \u00a0 session_id = str(uuid.uuid4())\u00a0 \u00a0 session_path = session_client.session_path(\u00a0 \u00a0 \u00a0 \u00a0 project=project_id,\u00a0 \u00a0 \u00a0 \u00a0 location=location,\u00a0 \u00a0 \u00a0 \u00a0 agent=agent_id,\u00a0 \u00a0 \u00a0 \u00a0 session=session_id,\u00a0 \u00a0 )\u00a0 \u00a0 # Prepare request\u00a0 \u00a0 text_input = session.TextInput(text=text)\u00a0 \u00a0 query_input = session.QueryInput(text=text_input, language_code=language_code)\u00a0 \u00a0 query_params = session.QueryParameters(\u00a0 \u00a0 \u00a0 \u00a0 disable_webhook=True,\u00a0 \u00a0 )\u00a0 \u00a0 request = session.DetectIntentRequest(\u00a0 \u00a0 \u00a0 \u00a0 session=session_path,\u00a0 \u00a0 \u00a0 \u00a0 query_input=query_input,\u00a0 \u00a0 \u00a0 \u00a0 query_params=query_params,\u00a0 \u00a0 )\u00a0 \u00a0 response = session_client.detect_intent(request=request)\u00a0 \u00a0 print(f\"Detect Intent Request: {request.query_params.disable_webhook}\")\u00a0 \u00a0 response_text = []\u00a0 \u00a0 for message in response.query_result.response_messages:\u00a0 \u00a0 \u00a0 \u00a0 if message.text:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 curr_response_text = message.text.text\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(f\"Agent Response: {curr_response_text}\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response_text.append(curr_response_text)\u00a0 \u00a0 return response_text\n```\n## \u5e36\u6709\u97f3\u983b\u8f38\u5165\u7684\u6d41\u5f0f\u6aa2\u6e2c\u610f\u5716\n\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u5c07\u97f3\u983b\u8f38\u5165\u6d41\u5f0f\u50b3\u8f38\u5230\u6d41\u5f0f\u6aa2\u6e2c\u610f\u5716\u8acb\u6c42\u3002\n\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow-cx/src/main/java/dialogflow/cx/DetectIntentStream.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.api.gax.rpc.BidiStream;import com.google.cloud.dialogflow.cx.v3beta1.AudioEncoding;import com.google.cloud.dialogflow.cx.v3beta1.AudioInput;import com.google.cloud.dialogflow.cx.v3beta1.InputAudioConfig;import com.google.cloud.dialogflow.cx.v3beta1.OutputAudioConfig;import com.google.cloud.dialogflow.cx.v3beta1.OutputAudioEncoding;import com.google.cloud.dialogflow.cx.v3beta1.QueryInput;import com.google.cloud.dialogflow.cx.v3beta1.QueryResult;import com.google.cloud.dialogflow.cx.v3beta1.SessionName;import com.google.cloud.dialogflow.cx.v3beta1.SessionsClient;import com.google.cloud.dialogflow.cx.v3beta1.SessionsSettings;import com.google.cloud.dialogflow.cx.v3beta1.SsmlVoiceGender;import com.google.cloud.dialogflow.cx.v3beta1.StreamingDetectIntentRequest;import com.google.cloud.dialogflow.cx.v3beta1.StreamingDetectIntentResponse;import com.google.cloud.dialogflow.cx.v3beta1.SynthesizeSpeechConfig;import com.google.cloud.dialogflow.cx.v3beta1.VoiceSelectionParams;import com.google.protobuf.ByteString;import java.io.FileInputStream;import java.io.IOException;public abstract class DetectIntentStream {\u00a0 // DialogFlow API Detect Intent sample with audio files processes as an audio stream.\u00a0 public static void detectIntentStream(\u00a0 \u00a0 \u00a0 String projectId, String locationId, String agentId, String sessionId, String audioFilePath)\u00a0 \u00a0 \u00a0 throws ApiException, IOException {\u00a0 \u00a0 SessionsSettings.Builder sessionsSettingsBuilder = SessionsSettings.newBuilder();\u00a0 \u00a0 if (\"global\".equals(locationId)) {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(\"dialogflow.googleapis.com:443\");\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(locationId + \"-dialogflow.googleapis.com:443\");\u00a0 \u00a0 }\u00a0 \u00a0 SessionsSettings sessionsSettings = sessionsSettingsBuilder.build();\u00a0 \u00a0 // Instantiates a client by setting the session name.\u00a0 \u00a0 // Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>`\u00a0 \u00a0 // Using the same `sessionId` between requests allows continuation of the conversation.\u00a0 \u00a0 // Note: close() needs to be called on the SessionsClient object to clean up resources\u00a0 \u00a0 // such as threads. In the example below, try-with-resources is used,\u00a0 \u00a0 // which automatically calls close().\u00a0 \u00a0 try (SessionsClient sessionsClient = SessionsClient.create(sessionsSettings)) {\u00a0 \u00a0 \u00a0 SessionName session = SessionName.of(projectId, locationId, agentId, sessionId);\u00a0 \u00a0 \u00a0 // Instructs the speech recognizer how to process the audio content.\u00a0 \u00a0 \u00a0 // Note: hard coding audioEncoding and sampleRateHertz for simplicity.\u00a0 \u00a0 \u00a0 // Audio encoding of the audio content sent in the query request.\u00a0 \u00a0 \u00a0 InputAudioConfig inputAudioConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAudioConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioEncoding(AudioEncoding.AUDIO_ENCODING_LINEAR_16)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSampleRateHertz(16000) // sampleRateHertz = 16000\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Build the AudioInput with the InputAudioConfig.\u00a0 \u00a0 \u00a0 AudioInput audioInput = AudioInput.newBuilder().setConfig(inputAudioConfig).build();\u00a0 \u00a0 \u00a0 // Build the query with the InputAudioConfig.\u00a0 \u00a0 \u00a0 QueryInput queryInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryInput.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudio(audioInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setLanguageCode(\"en-US\") // languageCode = \"en-US\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Create the Bidirectional stream\u00a0 \u00a0 \u00a0 BidiStream<StreamingDetectIntentRequest, StreamingDetectIntentResponse> bidiStream =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sessionsClient.streamingDetectIntentCallable().call();\u00a0 \u00a0 \u00a0 // Specify sssml name and gender\u00a0 \u00a0 \u00a0 VoiceSelectionParams voiceSelection =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Voices that are available https://cloud.google.com/text-to-speech/docs/voices\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 VoiceSelectionParams.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(\"en-US-Standard-F\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSsmlGender(SsmlVoiceGender.SSML_VOICE_GENDER_FEMALE)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 SynthesizeSpeechConfig speechConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SynthesizeSpeechConfig.newBuilder().setVoice(voiceSelection).build();\u00a0 \u00a0 \u00a0 // Setup audio config\u00a0 \u00a0 \u00a0 OutputAudioConfig audioConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Output enconding explanation\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // https://cloud.google.com/dialogflow/cx/docs/reference/rpc/google.cloud.dialogflow.cx.v3#outputaudioencoding\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 OutputAudioConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioEncoding(OutputAudioEncoding.OUTPUT_AUDIO_ENCODING_UNSPECIFIED)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioEncodingValue(1)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSynthesizeSpeechConfig(speechConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // The first request must **only** contain the audio configuration:\u00a0 \u00a0 \u00a0 bidiStream.send(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 StreamingDetectIntentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSession(session.toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryInput(queryInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setOutputAudioConfig(audioConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 try (FileInputStream audioStream = new FileInputStream(audioFilePath)) {\u00a0 \u00a0 \u00a0 \u00a0 // Subsequent requests must **only** contain the audio data.\u00a0 \u00a0 \u00a0 \u00a0 // Following messages: audio chunks. We just read the file in fixed-size chunks. In reality\u00a0 \u00a0 \u00a0 \u00a0 // you would split the user input by time.\u00a0 \u00a0 \u00a0 \u00a0 byte[] buffer = new byte[4096];\u00a0 \u00a0 \u00a0 \u00a0 int bytes;\u00a0 \u00a0 \u00a0 \u00a0 while ((bytes = audioStream.read(buffer)) != -1) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioInput subAudioInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioInput.newBuilder().setAudio(ByteString.copyFrom(buffer, 0, bytes)).build();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryInput subQueryInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryInput.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudio(subAudioInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setLanguageCode(\"en-US\") // languageCode = \"en-US\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bidiStream.send(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 StreamingDetectIntentRequest.newBuilder().setQueryInput(subQueryInput).build());\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 // Tell the service you are done sending data.\u00a0 \u00a0 \u00a0 bidiStream.closeSend();\u00a0 \u00a0 \u00a0 for (StreamingDetectIntentResponse response : bidiStream) {\u00a0 \u00a0 \u00a0 \u00a0 QueryResult queryResult = response.getDetectIntentResponse().getQueryResult();\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"Query Text: '%s'\\n\", queryResult.getTranscript());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Detected Intent: %s (confidence: %f)\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getMatch().getIntent().getDisplayName(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getMatch().getConfidence());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow-cx/detect-intent-streaming.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'my-project';// const location = 'global';// const agentId = 'my-agent';// const audioFileName = '/path/to/audio.raw';// const encoding = 'AUDIO_ENCODING_LINEAR_16';// const sampleRateHertz = 16000;// const languageCode = 'en'// Imports the Google Cloud Some API libraryconst {SessionsClient} = require('@google-cloud/dialogflow-cx');/**\u00a0* Example for regional endpoint:\u00a0* \u00a0 const location = 'us-central1'\u00a0* \u00a0 const client = new SessionsClient({apiEndpoint: 'us-central1-dialogflow.googleapis.com'})\u00a0*/const client = new SessionsClient();const fs = require('fs');const util = require('util');const {Transform, pipeline} = require('stream');const pump = util.promisify(pipeline);async function detectIntentAudio() {\u00a0 const sessionId = Math.random().toString(36).substring(7);\u00a0 const sessionPath = client.projectLocationAgentSessionPath(\u00a0 \u00a0 projectId,\u00a0 \u00a0 location,\u00a0 \u00a0 agentId,\u00a0 \u00a0 sessionId\u00a0 );\u00a0 console.info(sessionPath);\u00a0 // Create a stream for the streaming request.\u00a0 const detectStream = client\u00a0 \u00a0 .streamingDetectIntent()\u00a0 \u00a0 .on('error', console.error)\u00a0 \u00a0 .on('data', data => {\u00a0 \u00a0 \u00a0 if (data.recognitionResult) {\u00a0 \u00a0 \u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `Intermediate Transcript: ${data.recognitionResult.transcript}`\u00a0 \u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 console.log('Detected Intent:');\u00a0 \u00a0 \u00a0 \u00a0 const result = data.detectIntentResponse.queryResult;\u00a0 \u00a0 \u00a0 \u00a0 console.log(`User Query: ${result.transcript}`);\u00a0 \u00a0 \u00a0 \u00a0 for (const message of result.responseMessages) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (message.text) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 console.log(`Agent Response: ${message.text.text}`);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 if (result.match.intent) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 console.log(`Matched Intent: ${result.match.intent.displayName}`);\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 console.log(`Current Page: ${result.currentPage.displayName}`);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 });\u00a0 // Write the initial stream request to config for audio input.\u00a0 const initialStreamRequest = {\u00a0 \u00a0 session: sessionPath,\u00a0 \u00a0 queryInput: {\u00a0 \u00a0 \u00a0 audio: {\u00a0 \u00a0 \u00a0 \u00a0 config: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audioEncoding: encoding,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sampleRateHertz: sampleRateHertz,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 synthesize_speech_config: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 voice: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set's the name and gender of the ssml voice\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name: 'en-GB-Standard-A',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ssml_gender: 'SSML_VOICE_GENDER_FEMALE',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 singleUtterance: true,\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 languageCode: languageCode,\u00a0 \u00a0 },\u00a0 };\u00a0 detectStream.write(initialStreamRequest);\u00a0 // Stream the audio from audio file to Dialogflow.\u00a0 await pump(\u00a0 \u00a0 fs.createReadStream(audioFileName),\u00a0 \u00a0 // Format the audio stream into the request format.\u00a0 \u00a0 new Transform({\u00a0 \u00a0 \u00a0 objectMode: true,\u00a0 \u00a0 \u00a0 transform: (obj, _, next) => {\u00a0 \u00a0 \u00a0 \u00a0 next(null, {queryInput: {audio: {audio: obj}}});\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 }),\u00a0 \u00a0 detectStream\u00a0 );}detectIntentAudio();\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow-cx/detect_intent_stream.py) \n```\ndef run_sample():\u00a0 \u00a0 # TODO(developer): Replace these values when running the function\u00a0 \u00a0 project_id = \"YOUR-PROJECT-ID\"\u00a0 \u00a0 # For more information about regionalization see https://cloud.google.com/dialogflow/cx/docs/how/region\u00a0 \u00a0 location_id = \"YOUR-LOCATION-ID\"\u00a0 \u00a0 # For more info on agents see https://cloud.google.com/dialogflow/cx/docs/concept/agent\u00a0 \u00a0 agent_id = \"YOUR-AGENT-ID\"\u00a0 \u00a0 agent = f\"projects/{project_id}/locations/{location_id}/agents/{agent_id}\"\u00a0 \u00a0 # For more information on sessions see https://cloud.google.com/dialogflow/cx/docs/concept/session\u00a0 \u00a0 session_id = uuid.uuid4()\u00a0 \u00a0 audio_file_path = \"YOUR-AUDIO-FILE-PATH\"\u00a0 \u00a0 # For more supported languages see https://cloud.google.com/dialogflow/es/docs/reference/language\u00a0 \u00a0 language_code = \"en-us\"\u00a0 \u00a0 detect_intent_stream(agent, session_id, audio_file_path, language_code)def detect_intent_stream(agent, session_id, audio_file_path, language_code):\u00a0 \u00a0 \"\"\"Returns the result of detect intent with streaming audio as input.\u00a0 \u00a0 Using the same `session_id` between requests allows continuation\u00a0 \u00a0 of the conversation.\"\"\"\u00a0 \u00a0 session_path = f\"{agent}/sessions/{session_id}\"\u00a0 \u00a0 print(f\"Session path: {session_path}\\n\")\u00a0 \u00a0 client_options = None\u00a0 \u00a0 agent_components = AgentsClient.parse_agent_path(agent)\u00a0 \u00a0 location_id = agent_components[\"location\"]\u00a0 \u00a0 if location_id != \"global\":\u00a0 \u00a0 \u00a0 \u00a0 api_endpoint = f\"{location_id}-dialogflow.googleapis.com:443\"\u00a0 \u00a0 \u00a0 \u00a0 print(f\"API Endpoint: {api_endpoint}\\n\")\u00a0 \u00a0 \u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 session_client = SessionsClient(client_options=client_options)\u00a0 \u00a0 input_audio_config = audio_config.InputAudioConfig(\u00a0 \u00a0 \u00a0 \u00a0 audio_encoding=audio_config.AudioEncoding.AUDIO_ENCODING_LINEAR_16,\u00a0 \u00a0 \u00a0 \u00a0 sample_rate_hertz=24000,\u00a0 \u00a0 )\u00a0 \u00a0 def request_generator():\u00a0 \u00a0 \u00a0 \u00a0 audio_input = session.AudioInput(config=input_audio_config)\u00a0 \u00a0 \u00a0 \u00a0 query_input = session.QueryInput(audio=audio_input, language_code=language_code)\u00a0 \u00a0 \u00a0 \u00a0 voice_selection = audio_config.VoiceSelectionParams()\u00a0 \u00a0 \u00a0 \u00a0 synthesize_speech_config = audio_config.SynthesizeSpeechConfig()\u00a0 \u00a0 \u00a0 \u00a0 output_audio_config = audio_config.OutputAudioConfig()\u00a0 \u00a0 \u00a0 \u00a0 # Sets the voice name and gender\u00a0 \u00a0 \u00a0 \u00a0 voice_selection.name = \"en-GB-Standard-A\"\u00a0 \u00a0 \u00a0 \u00a0 voice_selection.ssml_gender = (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audio_config.SsmlVoiceGender.SSML_VOICE_GENDER_FEMALE\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 synthesize_speech_config.voice = voice_selection\u00a0 \u00a0 \u00a0 \u00a0 # Sets the audio encoding\u00a0 \u00a0 \u00a0 \u00a0 output_audio_config.audio_encoding = (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audio_config.OutputAudioEncoding.OUTPUT_AUDIO_ENCODING_UNSPECIFIED\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 output_audio_config.synthesize_speech_config = synthesize_speech_config\u00a0 \u00a0 \u00a0 \u00a0 # The first request contains the configuration.\u00a0 \u00a0 \u00a0 \u00a0 yield session.StreamingDetectIntentRequest(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 session=session_path,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 query_input=query_input,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 output_audio_config=output_audio_config,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 # Here we are reading small chunks of audio data from a local\u00a0 \u00a0 \u00a0 \u00a0 # audio file. \u00a0In practice these chunks should come from\u00a0 \u00a0 \u00a0 \u00a0 # an audio input device.\u00a0 \u00a0 \u00a0 \u00a0 with open(audio_file_path, \"rb\") as audio_file:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 while True:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 chunk = audio_file.read(4096)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if not chunk:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # The later requests contains audio data.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audio_input = session.AudioInput(audio=chunk)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 query_input = session.QueryInput(audio=audio_input)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 yield session.StreamingDetectIntentRequest(query_input=query_input)\u00a0 \u00a0 responses = session_client.streaming_detect_intent(requests=request_generator())\u00a0 \u00a0 print(\"=\" * 20)\u00a0 \u00a0 for response in responses:\u00a0 \u00a0 \u00a0 \u00a0 print(f'Intermediate transcript: \"{response.recognition_result.transcript}\".')\u00a0 \u00a0 # Note: The result from the last response is the final transcript along\u00a0 \u00a0 # with the detected content.\u00a0 \u00a0 response = response.detect_intent_response\u00a0 \u00a0 print(f\"Query text: {response.query_result.transcript}\")\u00a0 \u00a0 response_messages = [\u00a0 \u00a0 \u00a0 \u00a0 \" \".join(msg.text.text) for msg in response.query_result.response_messages\u00a0 \u00a0 ]\u00a0 \u00a0 print(f\"Response text: {' '.join(response_messages)}\\n\")\n```\n## \u5553\u7528\u4e86\u90e8\u5206\u97ff\u61c9\u529f\u80fd\u7684\u6d41\u5f0f\u6aa2\u6e2c\u610f\u5716\n\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u4f7f\u7528\u5e36\u6709\u90e8\u5206\u97ff\u61c9\u7684\u6d41\u5f0f\u6aa2\u6e2c\u610f\u5716\u3002\n\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow-cx/src/main/java/dialogflow/cx/DetectIntentStreamingPartialResponse.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.api.gax.rpc.BidiStream;import com.google.cloud.dialogflow.cx.v3.AudioEncoding;import com.google.cloud.dialogflow.cx.v3.AudioInput;import com.google.cloud.dialogflow.cx.v3.InputAudioConfig;import com.google.cloud.dialogflow.cx.v3.OutputAudioConfig;import com.google.cloud.dialogflow.cx.v3.OutputAudioEncoding;import com.google.cloud.dialogflow.cx.v3.QueryInput;import com.google.cloud.dialogflow.cx.v3.SessionName;import com.google.cloud.dialogflow.cx.v3.SessionsClient;import com.google.cloud.dialogflow.cx.v3.SessionsSettings;import com.google.cloud.dialogflow.cx.v3.SsmlVoiceGender;import com.google.cloud.dialogflow.cx.v3.StreamingDetectIntentRequest;import com.google.cloud.dialogflow.cx.v3.StreamingDetectIntentResponse;import com.google.cloud.dialogflow.cx.v3.SynthesizeSpeechConfig;import com.google.cloud.dialogflow.cx.v3.VoiceSelectionParams;import com.google.protobuf.ByteString;import java.io.FileInputStream;import java.io.IOException;public class DetectIntentStreamingPartialResponse {\u00a0 // DialogFlow API Detect Intent sample with audio files\u00a0 // that processes as an audio stream.\u00a0 public static void detectIntentStreamingPartialResponse(\u00a0 \u00a0 \u00a0 String projectId, String locationId, String agentId, String sessionId, String audioFilePath)\u00a0 \u00a0 \u00a0 throws ApiException, IOException {\u00a0 \u00a0 SessionsSettings.Builder sessionsSettingsBuilder = SessionsSettings.newBuilder();\u00a0 \u00a0 if (locationId.equals(\"global\")) {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(\"dialogflow.googleapis.com:443\");\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(locationId + \"-dialogflow.googleapis.com:443\");\u00a0 \u00a0 }\u00a0 \u00a0 SessionsSettings sessionsSettings = sessionsSettingsBuilder.build();\u00a0 \u00a0 // Instantiates a client by setting the session name.\u00a0 \u00a0 // Format:`projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>`\u00a0 \u00a0 // Using the same `sessionId` between requests allows continuation of the conversation.\u00a0 \u00a0 // Note: close() needs to be called on the SessionsClient object to clean up resources\u00a0 \u00a0 // such as threads. In the example below, try-with-resources is used,\u00a0 \u00a0 // which automatically calls close().\u00a0 \u00a0 try (SessionsClient sessionsClient = SessionsClient.create(sessionsSettings)) {\u00a0 \u00a0 \u00a0 SessionName session = SessionName.of(projectId, locationId, agentId, sessionId);\u00a0 \u00a0 \u00a0 // Instructs the speech recognizer how to process the audio content.\u00a0 \u00a0 \u00a0 // Note: hard coding audioEncoding and sampleRateHertz for simplicity.\u00a0 \u00a0 \u00a0 // Audio encoding of the audio content sent in the query request.\u00a0 \u00a0 \u00a0 InputAudioConfig inputAudioConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAudioConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioEncoding(AudioEncoding.AUDIO_ENCODING_LINEAR_16)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSampleRateHertz(16000) // sampleRateHertz = 16000\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Build the AudioInput with the InputAudioConfig.\u00a0 \u00a0 \u00a0 AudioInput audioInput = AudioInput.newBuilder().setConfig(inputAudioConfig).build();\u00a0 \u00a0 \u00a0 // Build the query with the InputAudioConfig.\u00a0 \u00a0 \u00a0 QueryInput queryInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryInput.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudio(audioInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setLanguageCode(\"en-US\") // languageCode = \"en-US\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Create the Bidirectional stream\u00a0 \u00a0 \u00a0 BidiStream<StreamingDetectIntentRequest, StreamingDetectIntentResponse> bidiStream =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sessionsClient.streamingDetectIntentCallable().call();\u00a0 \u00a0 \u00a0 // Specify sssml name and gender\u00a0 \u00a0 \u00a0 VoiceSelectionParams voiceSelection =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Voices that are available https://cloud.google.com/text-to-speech/docs/voices\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 VoiceSelectionParams.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(\"en-GB-Standard-A\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSsmlGender(SsmlVoiceGender.SSML_VOICE_GENDER_FEMALE)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 SynthesizeSpeechConfig speechConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SynthesizeSpeechConfig.newBuilder().setVoice(voiceSelection).build();\u00a0 \u00a0 \u00a0 // Setup audio config\u00a0 \u00a0 \u00a0 OutputAudioConfig audioConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Output encoding explanation\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // https://cloud.google.com/dialogflow/cx/docs/reference/rpc/google.cloud.dialogflow.cx.v3#outputaudioencoding\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 OutputAudioConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioEncoding(OutputAudioEncoding.OUTPUT_AUDIO_ENCODING_UNSPECIFIED)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioEncodingValue(1)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSynthesizeSpeechConfig(speechConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 StreamingDetectIntentRequest streamingDetectIntentRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 StreamingDetectIntentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSession(session.toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryInput(queryInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEnablePartialResponse(true)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setOutputAudioConfig(audioConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 System.out.println(streamingDetectIntentRequest.toString());\u00a0 \u00a0 \u00a0 // The first request must **only** contain the audio configuration:\u00a0 \u00a0 \u00a0 bidiStream.send(streamingDetectIntentRequest);\u00a0 \u00a0 \u00a0 try (FileInputStream audioStream = new FileInputStream(audioFilePath)) {\u00a0 \u00a0 \u00a0 \u00a0 // Subsequent requests must **only** contain the audio data.\u00a0 \u00a0 \u00a0 \u00a0 // Following messages: audio chunks. We just read the file in fixed-size chunks. In reality\u00a0 \u00a0 \u00a0 \u00a0 // you would split the user input by time.\u00a0 \u00a0 \u00a0 \u00a0 byte[] buffer = new byte[4096];\u00a0 \u00a0 \u00a0 \u00a0 int bytes;\u00a0 \u00a0 \u00a0 \u00a0 while ((bytes = audioStream.read(buffer)) != -1) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioInput subAudioInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioInput.newBuilder().setAudio(ByteString.copyFrom(buffer, 0, bytes)).build();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryInput subQueryInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryInput.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudio(subAudioInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setLanguageCode(\"en-US\") // languageCode = \"en-US\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bidiStream.send(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 StreamingDetectIntentRequest.newBuilder().setQueryInput(subQueryInput).build());\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 // Tell the service you are done sending data.\u00a0 \u00a0 \u00a0 bidiStream.closeSend();\u00a0 \u00a0 \u00a0 // TODO: Uncomment to print detectIntentResponse.\u00a0 \u00a0 \u00a0 // \u00a0 for (StreamingDetectIntentResponse response : bidiStream) {\u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 QueryResult queryResult = response.getDetectIntentResponse().getQueryResult();\u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 System.out.format(\"Query Text: '%s'\\n\", queryResult.getTranscript());\u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 \u00a0 \u00a0 \"Detected Intent: %s (confidence: %f)\\n\",\u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getIntent()\u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 \u00a0 \u00a0 .getDisplayName(), queryResult.getIntentDetectionConfidence());\u00a0 \u00a0 \u00a0 // \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow-cx/streaming-detect-intent-partial-response.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'my-project';// const location = 'global';// const agentId = 'my-agent';// const audioFileName = '/path/to/audio.raw';// const encoding = 'AUDIO_ENCODING_LINEAR_16';// const sampleRateHertz = 16000;// const languageCode = 'en';const {SessionsClient} = require('@google-cloud/dialogflow-cx');/**\u00a0* Example for regional endpoint:\u00a0* \u00a0 const location = 'us-central1'\u00a0* \u00a0 const client = new SessionsClient({apiEndpoint: 'us-central1-dialogflow.googleapis.com'})\u00a0*/const client = new SessionsClient();const fs = require('fs');const util = require('util');const {Transform, pipeline} = require('stream');const pump = util.promisify(pipeline);async function streamingDetectIntentPartialResponse() {\u00a0 const sessionId = Math.random().toString(36).substring(7);\u00a0 const sessionPath = client.projectLocationAgentSessionPath(\u00a0 \u00a0 projectId,\u00a0 \u00a0 location,\u00a0 \u00a0 agentId,\u00a0 \u00a0 sessionId\u00a0 );\u00a0 const request = {\u00a0 \u00a0 session: sessionPath,\u00a0 \u00a0 queryInput: {\u00a0 \u00a0 \u00a0 audio: {\u00a0 \u00a0 \u00a0 \u00a0 config: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audio_encoding: encoding,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sampleRateHertz: sampleRateHertz,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 singleUtterance: true,\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 languageCode: languageCode,\u00a0 \u00a0 },\u00a0 \u00a0 enablePartialResponse: true,\u00a0 };\u00a0 const stream = await client.streamingDetectIntent();\u00a0 stream.on('data', data => {\u00a0 \u00a0 if (data.detectIntentResponse) {\u00a0 \u00a0 \u00a0 const result = data.detectIntentResponse.queryResult;\u00a0 \u00a0 \u00a0 for (const message of result.responseMessages) {\u00a0 \u00a0 \u00a0 \u00a0 if (message.text) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 console.log(`Agent Response: ${message.text.text}`);\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 });\u00a0 stream.on('error', err => {\u00a0 \u00a0 console.log(err);\u00a0 });\u00a0 stream.on('end', () => {\u00a0 \u00a0 /* API call completed */\u00a0 });\u00a0 stream.write(request);\u00a0 // Stream the audio from audio file to Dialogflow.\u00a0 await pump(\u00a0 \u00a0 fs.createReadStream(audioFileName),\u00a0 \u00a0 // Format the audio stream into the request format.\u00a0 \u00a0 new Transform({\u00a0 \u00a0 \u00a0 objectMode: true,\u00a0 \u00a0 \u00a0 transform: (obj, _, next) => {\u00a0 \u00a0 \u00a0 \u00a0 next(null, {queryInput: {audio: {audio: obj}}});\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 }),\u00a0 \u00a0 stream\u00a0 );}streamingDetectIntentPartialResponse();\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow-cx/streaming_detect_intent_partial_response.py) \n```\nimport uuidfrom google.cloud.dialogflowcx_v3.services.sessions import SessionsClientfrom google.cloud.dialogflowcx_v3.types import audio_configfrom google.cloud.dialogflowcx_v3.types import InputAudioConfigfrom google.cloud.dialogflowcx_v3.types import sessiondef run_sample():\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 TODO(developer): Modify these variables before running the sample.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 project_id = \"YOUR-PROJECT-ID\"\u00a0 \u00a0 location = \"YOUR-LOCATION-ID\"\u00a0 \u00a0 agent_id = \"YOUR-AGENT-ID\"\u00a0 \u00a0 audio_file_name = \"YOUR-AUDIO-FILE-PATH\"\u00a0 \u00a0 encoding = \"AUDIO_ENCODING_LINEAR_16\"\u00a0 \u00a0 sample_rate_hertz = 16000\u00a0 \u00a0 language_code = \"en\"\u00a0 \u00a0 streaming_detect_intent_partial_response(\u00a0 \u00a0 \u00a0 \u00a0 project_id,\u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 agent_id,\u00a0 \u00a0 \u00a0 \u00a0 audio_file_name,\u00a0 \u00a0 \u00a0 \u00a0 encoding,\u00a0 \u00a0 \u00a0 \u00a0 sample_rate_hertz,\u00a0 \u00a0 \u00a0 \u00a0 language_code,\u00a0 \u00a0 )def streaming_detect_intent_partial_response(\u00a0 \u00a0 project_id,\u00a0 \u00a0 location,\u00a0 \u00a0 agent_id,\u00a0 \u00a0 audio_file_name,\u00a0 \u00a0 encoding,\u00a0 \u00a0 sample_rate_hertz,\u00a0 \u00a0 language_code,):\u00a0 \u00a0 client_options = None\u00a0 \u00a0 if location != \"global\":\u00a0 \u00a0 \u00a0 \u00a0 api_endpoint = f\"{location}-dialogflow.googleapis.com:443\"\u00a0 \u00a0 \u00a0 \u00a0 print(f\"API Endpoint: {api_endpoint}\\n\")\u00a0 \u00a0 \u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 session_client = SessionsClient(client_options=client_options)\u00a0 \u00a0 session_id = str(uuid.uuid4())\u00a0 \u00a0 session_path = session_client.session_path(\u00a0 \u00a0 \u00a0 \u00a0 project=project_id,\u00a0 \u00a0 \u00a0 \u00a0 location=location,\u00a0 \u00a0 \u00a0 \u00a0 agent=agent_id,\u00a0 \u00a0 \u00a0 \u00a0 session=session_id,\u00a0 \u00a0 )\u00a0 \u00a0 def request_generator():\u00a0 \u00a0 \u00a0 \u00a0 audio_encoding = audio_config.AudioEncoding[encoding]\u00a0 \u00a0 \u00a0 \u00a0 config = InputAudioConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audio_encoding=audio_encoding,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sample_rate_hertz=sample_rate_hertz,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 single_utterance=True,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 audio_input = session.AudioInput(config=config)\u00a0 \u00a0 \u00a0 \u00a0 query_input = session.QueryInput(audio=audio_input, language_code=language_code)\u00a0 \u00a0 \u00a0 \u00a0 yield session.StreamingDetectIntentRequest(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 session=session_path,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 query_input=query_input,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 enable_partial_response=True,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 # Here we are reading small chunks of audio data from a local\u00a0 \u00a0 \u00a0 \u00a0 # audio file. \u00a0In practice these chunks should come from\u00a0 \u00a0 \u00a0 \u00a0 # an audio input device.\u00a0 \u00a0 \u00a0 \u00a0 with open(audio_file_name, \"rb\") as audio_file:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 while True:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 chunk = audio_file.read(4096)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if not chunk:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # The later requests contains audio data.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audio_input = session.AudioInput(audio=chunk, config=config)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 query_input = session.QueryInput(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audio=audio_input, language_code=language_code\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 yield session.StreamingDetectIntentRequest(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 session=session_path,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 query_input=query_input,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 enable_partial_response=True,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 responses = session_client.streaming_detect_intent(requests=request_generator())\u00a0 \u00a0 print(\"=\" * 20)\u00a0 \u00a0 for response in responses:\u00a0 \u00a0 \u00a0 \u00a0 print(f'Intermediate transcript: \"{response.recognition_result.transcript}\".')\u00a0 \u00a0 # Note: The result from the last response is the final transcript along\u00a0 \u00a0 # with the detected content.\u00a0 \u00a0 response = response.detect_intent_response\u00a0 \u00a0 print(f\"Query text: {response.query_result.transcript}\")\u00a0 \u00a0 response_messages = [\u00a0 \u00a0 \u00a0 \u00a0 \" \".join(msg.text.text) for msg in response.query_result.response_messages\u00a0 \u00a0 ]\u00a0 \u00a0 print(f\"Response text: {' '.join(response_messages)}\\n\")\n```", "guide": "Dialogflow"}