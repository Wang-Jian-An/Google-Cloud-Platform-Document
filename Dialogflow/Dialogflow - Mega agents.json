{"title": "Dialogflow - Mega agents", "url": "https://cloud.google.com/dialogflow/es/docs/agents-mega", "abstract": "# Dialogflow - Mega agents\nYou can combine multiple Dialogflow agents, called , into a single agent, called a . When you perform a detect intent request against a mega agent, all of the sub-agents are considered, and the best response from the sub-agents is returned.\nThere are a variety of reasons that you may want to use mega agents:\n- **Better governance** : If you have multiple teams building an agent, each team can be responsible for one sub-agent, which simplifies change conflicts across teams.\n- **More intents** : If you have agents with a large number of intents, you may approach the [intent count limit](/dialogflow/quotas) . In this case, you could create multiple sub-agents and one mega agent.", "content": "## Limitations\nThe following limitations apply to mega agents:\n- A mega agent and its sub-agents must be created in the same [region](/dialogflow/es/docs/how/region) .\n- Within one region, a mega agent and its sub-agents are all associated with different GCP projects.\n- A mega agent can have at most 10 sub-agents.\n- [Small talk](/dialogflow/docs/agents-small-talk) does not work for mega agents.\n- Sub-agent intent priority has no effect on intent matching when sending requests to a mega agent.\n- The [Google Assistant integration](/dialogflow/docs/integrations/aog) cannot be used with mega agent.\n- Partner built-in telephony integrations ( [AudioCodes](/dialogflow/docs/integrations/audiocodes) , [Avaya](/dialogflow/docs/integrations/avaya) , [Genesys](/dialogflow/docs/integrations/genesys) , [SignalWire](/dialogflow/docs/integrations/signalwire) , [Voximplant](/dialogflow/docs/integrations/voximplant) ) are not supported.\n- The mega agent does not support [fallback intents](/dialogflow/es/docs/intents-default#fallback) used as [follow-up intents](/dialogflow/es/docs/contexts-follow-up-intents) .## Creating sub-agents\nYou create sub-agents [like any other agent](/dialogflow/docs/quickstart-console) . Add any intents, contexts, entities, etc. as necessary to build your agents.\n## Creating or updating a mega agent\nYou can use the Dialogflow Console to create a mega agent and link it to sub-agents.\nDialogflow takes most agent settings from the mega agent into account and logs data to the mega agent. For example:\n- [Dialogflow takes agent-wide logging, sentiment, speech-to-text andtext-to-speech settings](/dialogflow/docs/agents-settings) from the mega agent.\n- Dialogflow stores [analytics](/dialogflow/docs/analytics) , [conversationhistory](/dialogflow/docs/history) and [data for the trainingtool](/dialogflow/docs/training) in the mega agent.\n**Warning:** Dialogflow ignores all resources in a mega agent except basic fallback intents. For example, other intents, follow-up fallback intents, contexts, and entities are all ignored.\n### 1. Create a mega agent\n- Go to the [Dialogflow ES Console](https://dialogflow.cloud.google.com) .\n- Click **Create Agent** in the left sidebar menu. (If you already have other agents, click the agent name, scroll to the bottom and click **Create new agent** .)\n- Enter your agent's name, default language, default time zone and GCP project.\n- Set the **Agent Type** as **Mega Agent** .\n- Click the **Create** button.\n### 2. Add and manage sub-agents\n- Click **Sub Agents** in the left sidebar menu.\n- Select a sub-agent you wish to add to the mega agent.\n- The sub-agent **Environment** defaults to **Draft** , but you can update this as needed.\n- If you want to use the **Knowledge Base** associated with the sub-agent, change the field from **Excluded** to **Included** .\n- Click **Save** .\n## Set up roles\nDepending on how you plan to use your mega agent, you need to grant specific [roles](/dialogflow/docs/access-control#roles) in your sub-agent projects, so the mega agent has permission to make calls to the sub-agents. To set up these roles:\n- Create the mega agent and sub-agent GCP projects as you normally would, and ensure you have enabled the \"Dialogflow API\" for each.\n- If you plan on [using the API](/dialogflow/docs/api-overview) to interact with your mega agent, you must grant a role on each of your sub-agent projects to the service account you use for mega agent API calls, and the role should have permission to make detect intent calls. The following [roles](/dialogflow/docs/access-control#roles) will provide this access: Project Owner, Project Editor, Dialogflow API Admin, or Dialogflow API Client. To get this service account's email address:- Visit the [IAM service account page](https://console.cloud.google.com/iam-admin/serviceaccounts) .\n- Select the project for your mega agent.\n- Either select a service account you already created for API calls or add a new service account that has the desired role. Follow the [setup instructions](/dialogflow/docs/quick/setup#auth) to create a new service account and download a private key.\n- Take note of the chosen service account email address. You will need this below.\n- If you plan on using any [integrations](/dialogflow/docs/integrations) for the mega agent, the [automatically created](/dialogflow/docs/access-control#auto-service-accounts) service- @gcp-sa-dialogflow.iam.gserviceaccount.com service account for the mega agent's project must have a role on that project that includes permission to make detect intent calls. The following [roles](/dialogflow/docs/access-control#roles) will provide this access: Project Owner, Project Editor, Dialogflow API Admin, or Dialogflow API Client. To get this service account's email address:- Visit the [IAM main page](https://console.cloud.google.com/iam-admin/iam) .\n- Select the project for your mega agent.\n- Enable the **Include Google-provided role grants** option on the right.\n- Find the service account that matches the pattern:service- @gcp-sa-dialogflow.iam.gserviceaccount.com.\n- Take note of the chosen service account email address. You will need this below.\n **Caution:** If this service account is not populated, you may need to send at least one request to your mega agent using an integration. You can use the [Dialogflow Messenger](/dialogflow/es/docs/integrations/dialogflow-messenger) integration as an easy way to do this, or you could setup your desired [integration](/dialogflow/es/docs/integrations) for the mega agent prior to configuring sub-agents. The Hangouts Chat, Dialogflow Messenger, Facebook Messenger, and Facebook Workplace integrations each automatically create this special service account.\n- For each sub-agent project, grant roles to the mega agent service accounts you collected above:- Visit the [IAM main page](https://console.cloud.google.com/iam-admin/iam) .\n- Select the project for your sub-agent.\n- [Grant the desired roles](/iam/docs/granting-roles-to-service-accounts) to your mega agent's service account email addresses on the project.\n## Detect intent\nTo detect intent, call the request like any other [detect intent request](/dialogflow/docs/quickstart-api#detect_intent) and use the mega agent's project ID. Dialogflow will consider all of the sub-agents, and the best response from the sub-agents is returned.\nFor example, consider the following sub-agents:\n| Sub-agent | Intent | Training Phrases          |\n|:------------|:---------|:--------------------------------------------------------|\n| Orders  | Books | \"I want to buy a book\" \"Add a book to my cart\"   |\n| Orders  | Hats  | \"I want to purchase a hat\" \"I want a hat\"    |\n| Account  | Balance | \"What is my balance?\" \"How much is left in my account?\" |\n| Account  | Address | \"I want to change my address\" \"I have a new address\" |\nIf an end-user says \"I want to buy a hat please\", a detect intent request sent to the mega agent will result in a match for the `Hats` intent in the `Orders` agent.\nTo specify one or more sub-agents for a detect intent request, set the `subAgents` field of [QueryParameters](/dialogflow/docs/reference/rest/v2/QueryParameters) . For example, the REST JSON for this request would look like:\n```\n{\n \"queryInput\": {\n \"text\": {\n  \"text\": \"reserve a meeting room for six people\",\n  \"languageCode\": \"en-US\"\n }\n },\n \"queryParams\": {\n \"subAgents\": [  {\"project\": \"projects/sub-agent-1-project-id\"},\n  {\"project\": \"projects/sub-agent-2-project-id\"}\n ]\n }\n}\n```\n## Invoking events\nTo [invoke an event from a webhook service](/dialogflow/docs/events-custom#invoke_event_from_webhook) , you can specify the sub-agent for the intent you wish to trigger. Use the following event name format:\n```\nsub-agent-project-id.event-name\n```\nFor example, if the sub-agent project ID is `123` , and the event name is `alarm` for the desired intent, use `123.alarm` for the event name.\nIf you do not specify a sub-agent for the event, the event will be sent back to the sub-agent that contains the previously matched intent.\n**Note:** When specifying sub-agents for events, you should only use the mega agent for detect intent requests, and you should not send detect intent requests directly to sub-agents.\n## Setting output context\nTo set output contexts from a webhook service, you can specify the sub-agent that the context belongs to. Use the following format:\n```\nprojects/mega_agent_project_id/agent/sessions/session_id/contexts/sub_agent_project_id.context_name\n```\nFor example, if the session is `projects/mega_agent_project_id/agent/sessions/session_id` , and you want to set a context named `music_context` for a sub-agent with project ID `sub_project_1` , you can set the output context with the following name:\n```\nprojects/mega_agent_project_id/agent/sessions/session_id/contexts/sub_project_1.music_context\n```\nIf you don't specify a sub-agent prefix for the context name, the system will consider it as a context of the mega agent.\n## Context lifespan\nWhen a context becomes active, the [context lifespan](/dialogflow/es/docs/contexts-input-output#lifespan) normally determines how many conversational turns will occur before the context becomes inactive. Essentially, the runtime lifespan of an active context is decremented for each conversational turn after it becomes active.\nThis behavior may be different for mega agents. During a conversation, intents from different sub-agents may be matched for each conversational turn. When an intent from a sub-agent is matched, and the intent has an output context, the lifetime of this context is only decremented for further matches of intents in the same sub-agent.\nFor example, an intent match occurs in sub-agent **A** , and the intent has an output context which activates a context. Any matches of intents in sub-agent **B** do not decrement the runtime lifespan for the active context that was originated in sub-agent **A** .\n## Versions and Environments\n[Versions and environments](/dialogflow/es/docs/agents-versions) on the mega agent level allow you to create different snapshots of the mega agent's fallback intent and set diffent webhooks and Text-to-Speech settings for different mega agent's environments.\nSettings on the mega agent's **Sub Agents** console page are not included in the mega agent's versions and environments. Mega agent requests always triger sub-agents' environments [specified](#2_add_and_manage_sub-agents) on that page at that moment.", "guide": "Dialogflow"}