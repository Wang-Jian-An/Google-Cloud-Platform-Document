{"title": "Dialogflow - \u5275\u5efa\u7db2\u7d61\u9264\u5b50\u670d\u52d9", "url": "https://cloud.google.com/dialogflow/cx/docs/tutorials/deploy/webhook?hl=zh-cn", "abstract": "# Dialogflow - \u5275\u5efa\u7db2\u7d61\u9264\u5b50\u670d\u52d9\n\u60a8\u5728\u4e0a\u4e00\u6b65\u4e2d\u5275\u5efa\u7684\u9810\u69cb\u5efa\u4ee3\u7406\u9700\u8981\u4e00\u500b [webhook](https://cloud.google.com/dialogflow/cx/docs/concept/webhook?hl=zh-cn) \u3002\u672c\u6559\u7a0b\u4e2d\u4f7f\u7528 [Cloud Functions](https://cloud.google.com/functions/docs?hl=zh-cn) \u4f86\u8a17\u7ba1 webhook\uff0c\u56e0\u7232\u5b83\u7c21\u55ae\u6613\u7528\u3002\u4e0d\u904e\uff0c\u60a8\u9084\u53ef\u4ee5\u901a\u904e\u5176\u4ed6\u8a31\u591a\u65b9\u5f0f\u8a17\u7ba1 webhook \u670d\u52d9\u3002\u8a72\u793a\u4f8b\u4e5f\u4f7f\u7528 Go \u7de8\u7a0b\u8a9e\u8a00\uff0c\u4f46\u60a8\u53ef\u4ee5\u4f7f\u7528 [Cloud Functions \u652f\u6301\u7684\u8a9e\u8a00](https://cloud.google.com/functions/docs/concepts/exec?hl=zh-cn) \u3002\n", "content": "## \u5275\u5efa\u51fd\u6578\n\u60a8\u53ef\u4ee5\u901a\u904e Google Cloud \u63a7\u5236\u6aaf\u5275\u5efa Cloud Functions \u51fd\u6578\uff08 [\u67e5\u770b\u6587\u6a94](https://support.google.com/cloud/answer/3465889?ref_topic=3340599&hl=zh-cn) \uff0c [\u6253\u958b\u63a7\u5236\u6aaf](https://console.cloud.google.com/?hl=zh-cn) \uff09\u3002\u5982\u9700\u7232\u672c\u6559\u7a0b\u5275\u5efa\u51fd\u6578\uff0c\u8acb\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n- \u60a8\u7684 Dialogflow \u4ee3\u7406\u548c\u51fd\u6578\u5fc5\u9808\u4f4d\u65bc\u540c\u4e00\u9805\u76ee\u4e2d\uff0c\u9019\u4e00\u9ede\u975e\u5e38\u91cd\u8981\u3002\u9019\u662f Dialogflow \u8981 [\u5b89\u5168\u8a2a\u554f\u51fd\u6578](https://cloud.google.com/dialogflow/cx/docs/concept/webhook?hl=zh-cn#gcf) \u7684\u6700\u7c21\u55ae\u65b9\u6cd5\u3002\u5728\u5275\u5efa\u51fd\u6578\u4e4b\u524d\uff0c\u8acb\u5f9e Google Cloud \u63a7\u5236\u6aaf\u4e2d\u9078\u64c7\u60a8\u7684\u9805\u76ee\u3002 [\u8f49\u5230\u201c\u9805\u76ee\u9078\u64c7\u5668\u201d](https://console.cloud.google.com/projectselector2/home/dashboard?hl=zh-cn) \n- \u6253\u958b Cloud Functions \u6982\u89bd\u9801\u9762\u3002 [\u8f49\u5230 Cloud Functions \u6982\u89bd](https://console.cloud.google.com/functions/list?hl=zh-cn) \n- \u9ede\u64ca **\u5275\u5efa\u51fd\u6578** \uff0c\u4e26\u8a2d\u7f6e\u4ee5\u4e0b\u5b57\u6bb5\uff1a- **\u74b0\u5883** \uff1a\u7b2c 1 \u4ee3\n- **\u51fd\u6578\u540d\u7a31** \uff1atutorials-telecommunications-webhook\n- **\u5340\u57df** \uff1a\u5982\u679c\u60a8\u7232\u4ee3\u7406\u6307\u5b9a\u4e86\u5340\u57df\uff0c\u8acb\u4f7f\u7528\u540c\u4e00\u5340\u57df\u3002\n- **HTTP Trigger type** \uff1aHTTP\n- **\u7db2\u5740** \uff1a\u9ede\u64ca\u6b64\u8655\u7684\u8907\u88fd\u6309\u9215\u4e26\u4fdd\u5b58\u76f8\u61c9\u7684\u503c\u3002 \u914d\u7f6e webhook \u6642\u9700\u8981\u4f7f\u7528\u6b64\u7db2\u5740\u3002\n- **Authentication** \uff1a\u9700\u8981\u8eab\u4efd\u9a57\u8b49\n- **Require HTTPS** \uff08\u9700\u8981 HTTPS\uff09\uff1a\u9078\u4e2d\n- \u9ede\u64ca **\u4fdd\u5b58** \u3002\n- \u9ede\u64ca **\u4e0b\u4e00\u6b65** \uff08\u60a8\u4e0d\u9700\u8981\u7279\u6b8a\u7684\u904b\u884c\u6642\u3001\u69cb\u5efa\u3001\u9023\u63a5\u6216\u5b89\u5168\u8a2d\u7f6e\uff09\u3002\n- \u8a2d\u7f6e\u4ee5\u4e0b\u5b57\u6bb5\uff1a- **Runtime** \uff1a\u9078\u64c7\u6700\u65b0\u7684 Go \u904b\u884c\u6642\u3002\n- **\u6e90\u4ee3\u78bc** \uff1a\u5167\u5d4c\u7de8\u8f2f\u5668\n- **\u5165\u53e3\u9ede** \uff1aHandleWebhookRequest\n- \u5c07\u4ee3\u78bc\u66ff\u63db\u7232\u4ee5\u4e0b\u4ee3\u78bc\uff1a```\npackage cxtwhimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"encoding/json\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"net/http\"\u00a0 \u00a0 \u00a0 \u00a0 \"os\"\u00a0 \u00a0 \u00a0 \u00a0 \"strings\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/spanner\"\u00a0 \"google.golang.org/grpc/codes\")// client is a Spanner client, created only once to avoid creation// for every request.// See: https://cloud.google.com/functions/docs/concepts/go-runtime#one-time_initializationvar client *spanner.Clientfunc init() {\u00a0 \u00a0 \u00a0 \u00a0 // If using a database, these environment variables will be set.\u00a0 \u00a0 \u00a0 \u00a0 pid := os.Getenv(\"PROJECT_ID\")\u00a0 \u00a0 \u00a0 \u00a0 iid := os.Getenv(\"SPANNER_INSTANCE_ID\")\u00a0 \u00a0 \u00a0 \u00a0 did := os.Getenv(\"SPANNER_DATABASE_ID\")\u00a0 \u00a0 \u00a0 \u00a0 if pid != \"\" && iid != \"\" && did != \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 db := fmt.Sprintf(\"projects/%s/instances/%s/databases/%s\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pid, iid, did)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"Creating Spanner client for %s\", db)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var err error\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Use the background context when creating the client,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // but use the request context for calls to the client.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // See: https://cloud.google.com/functions/docs/concepts/go-runtime#contextcontext\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 client, err = spanner.NewClient(context.Background(), db)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"spanner.NewClient: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }}type fulfillmentInfo struct {\u00a0 \u00a0 \u00a0 \u00a0 Tag string `json:\"tag\"`}type sessionInfo struct {\u00a0 \u00a0 \u00a0 \u00a0 Session \u00a0 \u00a0string \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `json:\"session\"`\u00a0 \u00a0 \u00a0 \u00a0 Parameters map[string]interface{} `json:\"parameters\"`}type text struct {\u00a0 \u00a0 \u00a0 \u00a0 Text []string `json:\"text\"`}type responseMessage struct {\u00a0 \u00a0 \u00a0 \u00a0 Text text `json:\"text\"`}type fulfillmentResponse struct {\u00a0 \u00a0 \u00a0 \u00a0 Messages []responseMessage `json:\"messages\"`}// webhookRequest is used to unmarshal a WebhookRequest JSON object. Note that// not all members need to be defined--just those that you need to process.// As an alternative, you could use the types provided by the Dialogflow protocol buffers:// https://pkg.go.dev/google.golang.org/genproto/googleapis/cloud/dialogflow/cx/v3#WebhookRequesttype webhookRequest struct {\u00a0 \u00a0 \u00a0 \u00a0 FulfillmentInfo fulfillmentInfo `json:\"fulfillmentInfo\"`\u00a0 \u00a0 \u00a0 \u00a0 SessionInfo \u00a0 \u00a0 sessionInfo \u00a0 \u00a0 `json:\"sessionInfo\"`}// webhookResponse is used to marshal a WebhookResponse JSON object. Note that// not all members need to be defined--just those that you need to process.// As an alternative, you could use the types provided by the Dialogflow protocol buffers:// https://pkg.go.dev/google.golang.org/genproto/googleapis/cloud/dialogflow/cx/v3#WebhookResponsetype webhookResponse struct {\u00a0 \u00a0 \u00a0 \u00a0 FulfillmentResponse fulfillmentResponse `json:\"fulfillmentResponse\"`\u00a0 \u00a0 \u00a0 \u00a0 SessionInfo \u00a0 \u00a0 \u00a0 \u00a0 sessionInfo \u00a0 \u00a0 \u00a0 \u00a0 `json:\"sessionInfo\"`}// detectCustomerAnomaly handles same-named tag.func detectCustomerAnomaly(ctx context.Context, request webhookRequest) (\u00a0 \u00a0 \u00a0 \u00a0 webhookResponse, error) {\u00a0 \u00a0 \u00a0 \u00a0 // Create session parameters that are populated in the response.\u00a0 \u00a0 \u00a0 \u00a0 // This example hard codes values, but a real system\u00a0 \u00a0 \u00a0 \u00a0 // might look up this value in a database.\u00a0 \u00a0 \u00a0 \u00a0 p := map[string]interface{}{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"anomaly_detect\": \u00a0 \u00a0 \u00a0 \u00a0\"false\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"purchase\": \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"device protection\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"purchase_amount\": \u00a0 \u00a0 \u00a0 \"12.25\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"bill_without_purchase\": \"54.34\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"total_bill\": \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"66.59\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"first_month\": \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"January 1\",\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Build and return the response.\u00a0 \u00a0 \u00a0 \u00a0 response := webhookResponse{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SessionInfo: sessionInfo{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parameters: p,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return response, nil}// validatePhoneLine handles same-named tag.func validatePhoneLine(ctx context.Context, request webhookRequest) (\u00a0 \u00a0 \u00a0 \u00a0 webhookResponse, error) {\u00a0 \u00a0 \u00a0 \u00a0 // Create session parameters that are populated in the response.\u00a0 \u00a0 \u00a0 \u00a0 // This example hard codes values, but a real system\u00a0 \u00a0 \u00a0 \u00a0 // might look up this value in a database.\u00a0 \u00a0 \u00a0 \u00a0 p := map[string]interface{}{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"domestic_coverage\": \u00a0 \"true\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"phone_line_verified\": \"true\",\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Build and return the response.\u00a0 \u00a0 \u00a0 \u00a0 response := webhookResponse{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SessionInfo: sessionInfo{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parameters: p,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return response, nil}// cruisePlanCoverage handles same-named tag.func cruisePlanCoverage(ctx context.Context, request webhookRequest) (\u00a0 \u00a0 \u00a0 \u00a0 webhookResponse, error) {\u00a0 \u00a0 \u00a0 \u00a0 // Get the existing parameter values\u00a0 \u00a0 \u00a0 \u00a0 port := request.SessionInfo.Parameters[\"destination\"].(string)\u00a0 \u00a0 \u00a0 \u00a0 port = strings.ToLower(port)\u00a0 \u00a0 \u00a0 \u00a0 // Check if the port is covered\u00a0 \u00a0 \u00a0 \u00a0 covered := \"false\"\u00a0 \u00a0 \u00a0 \u00a0 if client != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // A Spanner client exists, so access the database.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // See: https://pkg.go.dev/cloud.google.com/go/spanner#ReadOnlyTransaction.ReadRow\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 row, err := client.Single().ReadRow(ctx,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Destinations\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 spanner.Key{port},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 []string{\"Covered\"})\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if spanner.ErrCode(err) == codes.NotFound {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"Port %s not found\", port)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return webhookResponse{}, err\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // A row was returned, so check the value\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var c bool\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err := row.Column(0, &c)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return webhookResponse{}, err\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if c {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 covered = \"true\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // No Spanner client exists, so use hardcoded list of ports.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 coveredPorts := map[string]bool{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"anguilla\": true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"canada\": \u00a0 true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mexico\": \u00a0 true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _, ok := coveredPorts[port]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if ok {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 covered = \"true\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Create session parameters that are populated in the response.\u00a0 \u00a0 \u00a0 \u00a0 // This example hard codes values, but a real system\u00a0 \u00a0 \u00a0 \u00a0 // might look up this value in a database.\u00a0 \u00a0 \u00a0 \u00a0 p := map[string]interface{}{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"port_is_covered\": covered,\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Build and return the response.\u00a0 \u00a0 \u00a0 \u00a0 response := webhookResponse{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SessionInfo: sessionInfo{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parameters: p,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return response, nil}// internationalCoverage handles same-named tag.func internationalCoverage(ctx context.Context, request webhookRequest) (\u00a0 \u00a0 \u00a0 \u00a0 webhookResponse, error) {\u00a0 \u00a0 \u00a0 \u00a0 // Get the existing parameter values\u00a0 \u00a0 \u00a0 \u00a0 destination := request.SessionInfo.Parameters[\"destination\"].(string)\u00a0 \u00a0 \u00a0 \u00a0 destination = strings.ToLower(destination)\u00a0 \u00a0 \u00a0 \u00a0 // Hardcoded list of covered international monthly destinations\u00a0 \u00a0 \u00a0 \u00a0 coveredMonthly := map[string]bool{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"anguilla\": \u00a0true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"australia\": true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"brazil\": \u00a0 \u00a0true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"canada\": \u00a0 \u00a0true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"chile\": \u00a0 \u00a0 true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"england\": \u00a0 true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"france\": \u00a0 \u00a0true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"india\": \u00a0 \u00a0 true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"japan\": \u00a0 \u00a0 true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mexico\": \u00a0 \u00a0true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"singapore\": true,\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Hardcoded list of covered international daily destinations\u00a0 \u00a0 \u00a0 \u00a0 coveredDaily := map[string]bool{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"brazil\": \u00a0 \u00a0true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"canada\": \u00a0 \u00a0true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"chile\": \u00a0 \u00a0 true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"england\": \u00a0 true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"france\": \u00a0 \u00a0true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"india\": \u00a0 \u00a0 true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"japan\": \u00a0 \u00a0 true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mexico\": \u00a0 \u00a0true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"singapore\": true,\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Check coverage\u00a0 \u00a0 \u00a0 \u00a0 coverage := \"neither\"\u00a0 \u00a0 \u00a0 \u00a0 _, monthly := coveredMonthly[destination]\u00a0 \u00a0 \u00a0 \u00a0 _, daily := coveredDaily[destination]\u00a0 \u00a0 \u00a0 \u00a0 if monthly && daily {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 coverage = \"both\"\u00a0 \u00a0 \u00a0 \u00a0 } else if monthly {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 coverage = \"monthly_only\"\u00a0 \u00a0 \u00a0 \u00a0 } else if daily {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 coverage = \"daily_only\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Create session parameters that are populated in the response.\u00a0 \u00a0 \u00a0 \u00a0 // This example hard codes values, but a real system\u00a0 \u00a0 \u00a0 \u00a0 // might look up this value in a database.\u00a0 \u00a0 \u00a0 \u00a0 p := map[string]interface{}{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"coverage\": coverage,\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Build and return the response.\u00a0 \u00a0 \u00a0 \u00a0 response := webhookResponse{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SessionInfo: sessionInfo{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parameters: p,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return response, nil}// cheapestPlan handles same-named tag.func cheapestPlan(ctx context.Context, request webhookRequest) (\u00a0 \u00a0 \u00a0 \u00a0 webhookResponse, error) {\u00a0 \u00a0 \u00a0 \u00a0 // Create session parameters that are populated in the response.\u00a0 \u00a0 \u00a0 \u00a0 // This example hard codes values, but a real system\u00a0 \u00a0 \u00a0 \u00a0 // might look up this value in a database.\u00a0 \u00a0 \u00a0 \u00a0 p := map[string]interface{}{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"monthly_cost\": \u00a0 70,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"daily_cost\": \u00a0 \u00a0 100,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"suggested_plan\": \"monthly\",\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Build and return the response.\u00a0 \u00a0 \u00a0 \u00a0 response := webhookResponse{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SessionInfo: sessionInfo{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parameters: p,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return response, nil}// Define a type for handler functions.type handlerFn func(ctx context.Context, request webhookRequest) (\u00a0 \u00a0 \u00a0 \u00a0 webhookResponse, error)// Create a map from tag to handler function.var handlers map[string]handlerFn = map[string]handlerFn{\u00a0 \u00a0 \u00a0 \u00a0 \"detectCustomerAnomaly\": detectCustomerAnomaly,\u00a0 \u00a0 \u00a0 \u00a0 \"validatePhoneLine\": \u00a0 \u00a0 validatePhoneLine,\u00a0 \u00a0 \u00a0 \u00a0 \"cruisePlanCoverage\": \u00a0 \u00a0cruisePlanCoverage,\u00a0 \u00a0 \u00a0 \u00a0 \"internationalCoverage\": internationalCoverage,\u00a0 \u00a0 \u00a0 \u00a0 \"cheapestPlan\": \u00a0 \u00a0 \u00a0 \u00a0 \u00a0cheapestPlan,}// handleError handles internal errors.func handleError(w http.ResponseWriter, err error) {\u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"ERROR: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 http.Error(w,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Sprintf(\"ERROR: %v\", err),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 http.StatusInternalServerError)}// HandleWebhookRequest handles WebhookRequest and sends the WebhookResponse.func HandleWebhookRequest(w http.ResponseWriter, r *http.Request) {\u00a0 \u00a0 \u00a0 \u00a0 var request webhookRequest\u00a0 \u00a0 \u00a0 \u00a0 var response webhookResponse\u00a0 \u00a0 \u00a0 \u00a0 var err error\u00a0 \u00a0 \u00a0 \u00a0 // Read input JSON\u00a0 \u00a0 \u00a0 \u00a0 if err = json.NewDecoder(r.Body).Decode(&request); err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 handleError(w, err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"Request: %+v\", request)\u00a0 \u00a0 \u00a0 \u00a0 // Get the tag from the request, and call the corresponding\u00a0 \u00a0 \u00a0 \u00a0 // function that handles that tag.\u00a0 \u00a0 \u00a0 \u00a0 tag := request.FulfillmentInfo.Tag\u00a0 \u00a0 \u00a0 \u00a0 if fn, ok := handlers[tag]; ok {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response, err = fn(r.Context(), request)\u00a0 \u00a0 \u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = fmt.Errorf(\"Unknown tag: %s\", tag)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 handleError(w, err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"Response: %+v\", response)\u00a0 \u00a0 \u00a0 \u00a0 // Send response\u00a0 \u00a0 \u00a0 \u00a0 if err = json.NewEncoder(w).Encode(&response); err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 handleError(w, err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 }}\n```\n- \u9ede\u64ca **\u90e8\u7f72** \u3002\n- \u7b49\u5f85\u72c0\u614b\u6307\u793a\u5668\u986f\u793a\u51fd\u6578\u5df2\u6210\u529f\u90e8\u7f72\u3002\u7b49\u5f85\u671f\u9593\uff0c\u8acb\u6aa2\u67e5\u60a8\u525b\u525b\u90e8\u7f72\u7684\u4ee3\u78bc\u3002## \u7232\u4ee3\u7406\u914d\u7f6e webhook\n\u73fe\u5728\uff0cWebhook \u4ee5\u670d\u52d9\u5f62\u5f0f\u5b58\u5728\uff0c\u60a8\u9700\u8981\u5c07\u6b64 Webhook \u8207\u60a8\u7684\u4ee3\u7406\u76f8\u95dc\u806f\u3002\u5982\u9700\u7232\u4ee3\u7406\u914d\u7f6e webhook\uff0c\u8acb\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n- \u6253\u958b [Dialogflow CX \u63a7\u5236\u6aaf](https://dialogflow.cloud.google.com/cx/projects?hl=zh-cn) \u3002\n- \u9078\u64c7\u60a8\u7684 Google Cloud \u9805\u76ee\u3002\n- \u9078\u64c7\u60a8\u7684\u4ee3\u7406\u3002\n- \u9078\u64c7 **\u7ba1\u7406** \u6a19\u7c64\u9801\u3002\n- \u9ede\u64ca **\u7db2\u7d61\u9264\u5b50** \u3002\n- \u9ede\u64ca\u73fe\u6709\u7684 webhook\uff08\u7531\u9810\u69cb\u5efa\u4ee3\u7406\u5275\u5efa\uff09\u3002\n- \u5c07 **\u7db2\u7d61\u9264\u5b50\u7db2\u5740** \u66f4\u65b0\u7232\u60a8\u5728\u5275\u5efa\u51fd\u6578\u6642\u4fdd\u5b58\u7684\u7db2\u7d61\u9264\u5b50\u7db2\u5740\u3002\n- \u5c07 **\u5b50\u985e\u578b** \u8a2d\u7f6e\u7232\u201c\u6a19\u6e96\u201d\u3002\n- \u9ede\u64ca **\u4fdd\u5b58** \u3002## \u8a66\u7528\u4ee3\u7406\n\u60a8\u73fe\u5728\u53ef\u4ee5\u8a66\u7528\u4ee3\u7406\u4e86\u3002 \u9ede\u64ca **\u6e2c\u8a66\u4ee3\u7406** \u6309\u9215\u4ee5\u6253\u958b\u6a21\u64ec\u5668\u3002 \u5617\u8a66\u8207\u5ba2\u670d\u4eba\u54e1\u9032\u884c\u4ee5\u4e0b\u5c0d\u8a71\uff1a\n| \u8f2a\u6d41\u5c0d\u8a71 | \u4f60    | \u4ee3\u7406                                               |\n|-----------:|:-----------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|   1 | \u60a8\u597d    | \u60a8\u597d\uff01\u6211\u662f\u865b\u64ec\u96fb\u4fe1\u5ba2\u670d\u3002\u6211\u53ef\u4ee5\u5e6b\u52a9\u60a8\u89e3\u6c7a\u7d50\u7b97\u548c\u8a08\u5283\u554f\u984c\u3001\u6392\u67e5\u554f\u984c\uff0c\u4ee5\u53ca\u6dfb\u52a0\u65c5\u884c\u548c\u904a\u8f2a\u8a08\u5283\u3002\u60a8\u73fe\u5728\u9700\u8981\u4ec0\u9ebc\u5e6b\u52a9\uff1f                    |\n|   2 | \u6211\u60f3\u6dfb\u52a0\u904a\u8f2a\u8a08\u5283 | \u8b93\u6211\u770b\u770b\u60a8\u3002\u60a8\u5411\u6211\u5011\u63d0\u4f9b\u7684\u624b\u6a5f\u865f\u78bc\u662f\u591a\u5c11\uff1f                                     |\n|   3 | 123-123-1234  | \u60a8\u4e58\u5750\u904a\u8f2a\u591a\u5c11\u5929\uff1f                                           |\n|   4 | 7    | \u9078\u9805 1 \u5305\u62ec\u8a9e\u97f3\u548c\u6587\u5b57\u3002\u8cbb\u7528\u7232 [XX] \u7f8e\u5143/\u5929\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u9ede\u64ca\u6b64\u8655 [\u7db2\u5740]\u3002\u9078\u9805 2 \u5305\u62ec\u901a\u8a71\u3001\u77ed\u4fe1\u548c\u6578\u64da\u6d41\u91cf\u3002\u8cbb\u7528\u7232 [XX] \u7f8e\u5143/\u5929\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u9ede\u64ca\u6b64\u8655 [\u7db2\u5740]\u3002\u60a8\u60f3\u8981\u6dfb\u52a0\u54ea\u500b\u90f5\u8f2a\u5957\u9910\uff1f |\n|   5 | \u9078\u9805 1   | \u77e5\u9053\u4e86\u3002\u6211\u5df2\u5c07\u8a72\u65b9\u6848\u6dfb\u52a0\u5230\u4f60\u7684\u8cec\u865f\u3002\u5728\u4e58\u8239\u904a\u89bd\u6642\uff0c\u60a8\u53ef\u80fd\u9084\u9700\u8981\u5728\u9678\u5730\u4e0a\u63d0\u4f9b\u4fdd\u96aa\u3002\u60a8\u5c07\u5728\u54ea\u500b\u7aef\u53e3\u505c\u4e0b\u4f86\uff1f                      |\n|   6 | \u58a8\u897f\u54e5   | \u60a8\u5728\u90a3\u88cf\u505c\u7559\u4e86\u591a\u5c11\u5929\uff1f                                          |\n|   7 | 3    | \u597d\u6d88\u606f\uff01\u58a8\u897f\u54e5\u63d0\u4f9b\u514d\u8cbb\u7684\u9678\u5730\u670d\u52d9\u3002\u5927\u529f\u544a\u6210\uff01\u60a8\u73fe\u5728\u9084\u9700\u8981\u5176\u4ed6\u65b9\u9762\u7684\u5e6b\u52a9\u55ce\uff1f                             |\n\u6b64\u7279\u5b9a\u5c0d\u8a71\u7531 `Cruise Plan` \u6d41\u7ba1\u7406\u3002\n\u5728\u7b2c 6 \u8f2a\u5c0d\u8a71\u6642\uff0c\u60a8\u63d0\u4f9b\u201cMexico\u201d\u4f5c\u7232\u76ee\u6a19\u7aef\u53e3\u3002\u7cfb\u7d71\u6703\u4ee5 `Collect Port` \u9801\u9762\u7684 `destination` \u548c `trip_duration` \u8868\u55ae\u53c3\u6578\u7684\u5f62\u5f0f\u6355\u7372\u76ee\u6a19\u7aef\u53e3\u548c\u5929\u6578\u3002\u700f\u89bd\u4ee3\u7406\u4ee5\u67e5\u627e\u9019\u4e9b\u53c3\u6578\u5b9a\u7fa9\u3002\n\u5728 `Collect Port` \u9801\u9762\u4e2d\uff0c\u6709\u4e00\u500b\u7528\u65bc\u586b\u5beb\u8868\u55ae\u7684\u689d\u4ef6\u8def\u7531\uff1a `$page.params.status = \"FINAL\"` \u3002\u63d0\u4f9b\u5169\u500b\u8868\u55ae\u53c3\u6578\u5f8c\uff0c\u7cfb\u7d71\u6703\u8abf\u7528\u6b64\u8def\u7531\u3002\u6b64\u8def\u7531\u6703\u8abf\u7528\u60a8\u7684\u7db2\u7d61\u9264\u5b50\uff0c\u4e26\u5411\u60a8\u7684\u7db2\u7d61\u9264\u5b50\u63d0\u4f9b `cruisePlanCoverage` \u6a19\u8a18\u3002\u5982\u679c\u6aa2\u67e5\u4e0a\u9762\u7684 webhook \u4ee3\u78bc\uff0c\u5c31\u6703\u767c\u73fe\u6b64\u4ee3\u78bc\u89f8\u767c\u4e86\u8abf\u7528\u540c\u4e00\u500b\u5df2\u547d\u540d\u51fd\u6578\u3002\n\u6b64\u51fd\u6578\u78ba\u5b9a\u65b9\u6848\u662f\u5426\u6db5\u84cb\u63d0\u4f9b\u7684\u76ee\u7684\u5730\u3002\u8a72\u51fd\u6578\u6703\u6aa2\u67e5\u7279\u5b9a\u74b0\u5883\u8b8a\u91cf\u662f\u5426\u8a2d\u7f6e\u4e86\u7528\u65bc\u9023\u63a5\u5230\u6578\u64da\u5eab\u7684\u4fe1\u606f\u3002 \u5982\u679c\u672a\u8a2d\u7f6e\u9019\u4e9b\u74b0\u5883\u8b8a\u91cf\uff0c\u5247\u8a72\u51fd\u6578\u5c07\u4f7f\u7528\u786c\u7de8\u78bc\u7684\u76ee\u7684\u5730\u5217\u8868\u3002\u5728\u5f8c\u7e8c\u6b65\u9a5f\u4e2d\uff0c\u60a8\u5c07\u66f4\u6539\u51fd\u6578\u7684\u74b0\u5883\uff0c\u4f7f\u5176\u5f9e\u6578\u64da\u5eab\u4e2d\u6aa2\u7d22\u6578\u64da\uff0c\u4ee5\u9a57\u8b49\u76ee\u7684\u5730\u7684\u65b9\u6848\u8986\u84cb\u7387\u3002\n## \u554f\u984c\u6392\u67e5\n\u7db2\u7d61\u9264\u5b50\u4ee3\u78bc\u5305\u542b\u65e5\u8a8c\u8a18\u9304\u8a9e\u53e5\u3002\u5982\u679c\u60a8\u9047\u5230\u554f\u984c\uff0c\u8acb\u5617\u8a66 [\u67e5\u770b\u51fd\u6578\u65e5\u8a8c](https://cloud.google.com/functions/docs/monitoring/logging?hl=zh-cn) \u3002\n## \u66f4\u591a\u4fe1\u606f\n\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u4e0a\u8ff0\u6b65\u9a5f\uff0c\u8acb\u53c3\u95b1\uff1a\n- [Cloud Functions Go \u5feb\u901f\u5165\u9580](https://cloud.google.com/functions/docs/console-quickstart-1st-gen?hl=zh-cn)", "guide": "Dialogflow"}