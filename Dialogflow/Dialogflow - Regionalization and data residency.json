{"title": "Dialogflow - Regionalization and data residency", "url": "https://cloud.google.com/dialogflow/es/docs/how/region", "abstract": "# Dialogflow - Regionalization and data residency\nDialogflow provides [data residency](https://cloud.google.com/blog/products/identity-security/meet-data-residency-requirements-with-google-cloud) to keep your [data-at-rest](#data-at-rest) physically within a geographical [region or location](/about/locations) . When a region is specified, your data-at-rest is not replicated outside the region. Pricing is the same for all regions.\nRegions are used for the following reasons:\n- Your system may have regulatory or policy requirements that govern where your data must reside.\n- Your network latencies may be improved when the data is in the same region as your customers. For example, If UK customers use`europe-west2`, they can expect better latency.\n**Note:** Dialogflow regionalization and data residency does not apply to [data-in-use](https://en.wikipedia.org/wiki/Data_in_use) or [data-in-transit](https://en.wikipedia.org/wiki/Data_in_transit) .\n", "content": "## Data-at-rest\nAll Dialogflow developer user and end-user data is included in [data-at-rest](https://en.wikipedia.org/wiki/Data_at_rest) . For example:\n- All agent resources set with console or API (intents, entities, etc.)\n- All agent settings set with console or API\n- Query history\n- Validation results\n- Model creation tasks\n- Training tasks\n- Long-running operation tasks## Available regions\nDialogflow provides the following regions:\n| Country grouping | Geographical location         | Region ID             |\n|:-------------------|:--------------------------------------------------------|:------------------------------------------------------------|\n| Europe    | Belgium             | europe-west1            |\n| Europe    | London             | europe-west2            |\n| Asia Pacific  | Sydney             | australia-southeast1          |\n| Asia Pacific  | Tokyo             | asia-northeast1            |\n| Global    | Dialogflow serving is global, data-at-rest is within US | global (preferred), us (deprecated), or no region (default) |\n**Note:** Calls to the `global` region may have higher latency when called from outside of the US. Please prefer a more specific region that is closer to your services and end-users, if possible.\n## Select a region with the console\nThe top left area of the [Dialogflow ES Console](https://dialogflow.cloud.google.com) has a drop-down for region selection. Every agent has an immutable region that is specified upon creation. When you select a region from the console, you can only list or create agents for the selected region. The default region is `us` .\n**Note:** You can create one agent per region for a Google Cloud project.\n## Select a region with the API\nIf your agent was created in a non-default region, you must specify that region when calling the API for either design-time or runtime requests.\nTo provide a region, you supply a `location` parameter to API requests. For REST calls, do both of the following:\n- Provide the`location`URL path parameter.\n- Use the region-specific hostname of the form`REGION_ID-dialogflow.googleapis.com`. For example:`asia-northeast1-dialogflow.googleapis.com`. If the region specified in the hostname does not match the region specified in the URL path, the request will be rejected.\nFor client libraries, see the [client library documentation](/dialogflow/docs/reference/libraries/overview) . You need to do the following:\n- Set the Dialogflow service endpoint to:```\nREGION_ID-dialogflow.googleapis.com:443\n```\n- Set the session name to:```\nprojects/PROJECT_ID/locations/REGION_ID/agent/sessions/SESSION_ID\n```\nFor example:\nBefore using any of the request data, make the following replacements:- : your Google Cloud project ID\n- : a region ID, example:`europe-west2`\n- : a session ID\nHTTP method and URL:\n```\nPOST https://REGION_ID-dialogflow.googleapis.com/v2/projects/PROJECT_ID/locations/REGION_ID/agent/sessions/SESSION_ID:detectIntent\n```\nRequest JSON body:\n```\n{\n \"query_input\": {\n \"text\": {\n  \"text\": \"I want a pony.\",\n  \"language_code\": \"en-US\"\n }\n }\n}\n```\nTo send your request, expand one of these options:To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow/snippets/src/main/java/com/example/dialogflow/DetectIntentWithLocation.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.cloud.dialogflow.v2beta1.DetectIntentResponse;import com.google.cloud.dialogflow.v2beta1.QueryInput;import com.google.cloud.dialogflow.v2beta1.QueryResult;import com.google.cloud.dialogflow.v2beta1.SessionName;import com.google.cloud.dialogflow.v2beta1.SessionsClient;import com.google.cloud.dialogflow.v2beta1.SessionsSettings;import com.google.cloud.dialogflow.v2beta1.TextInput;import com.google.common.collect.Maps;import java.io.IOException;import java.util.List;import java.util.Map;public class DetectIntentWithLocation {\u00a0 // DialogFlow API Detect Intent sample with text inputs.\u00a0 public static Map<String, QueryResult> detectIntentWithLocation(\u00a0 \u00a0 \u00a0 String projectId,\u00a0 \u00a0 \u00a0 String locationId,\u00a0 \u00a0 \u00a0 List<String> texts,\u00a0 \u00a0 \u00a0 String sessionId,\u00a0 \u00a0 \u00a0 String languageCode)\u00a0 \u00a0 \u00a0 throws IOException, ApiException {\u00a0 \u00a0 SessionsSettings sessionsSettings =\u00a0 \u00a0 \u00a0 \u00a0 SessionsSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEndpoint(locationId + \"-dialogflow.googleapis.com:443\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 Map<String, QueryResult> queryResults = Maps.newHashMap();\u00a0 \u00a0 // Instantiates a client\u00a0 \u00a0 try (SessionsClient sessionsClient = SessionsClient.create(sessionsSettings)) {\u00a0 \u00a0 \u00a0 // Set the session name using the projectId (my-project-id), locationId and sessionId (UUID)\u00a0 \u00a0 \u00a0 SessionName session =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SessionName.ofProjectLocationSessionName(projectId, locationId, sessionId);\u00a0 \u00a0 \u00a0 System.out.println(\"Session Path: \" + session.toString());\u00a0 \u00a0 \u00a0 // Detect intents for each text input\u00a0 \u00a0 \u00a0 for (String text : texts) {\u00a0 \u00a0 \u00a0 \u00a0 // Set the text (hello) and language code (en-US) for the query\u00a0 \u00a0 \u00a0 \u00a0 TextInput.Builder textInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TextInput.newBuilder().setText(text).setLanguageCode(languageCode);\u00a0 \u00a0 \u00a0 \u00a0 // Build the query with the TextInput\u00a0 \u00a0 \u00a0 \u00a0 QueryInput queryInput = QueryInput.newBuilder().setText(textInput).build();\u00a0 \u00a0 \u00a0 \u00a0 // Performs the detect intent request\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentResponse response = sessionsClient.detectIntent(session, queryInput);\u00a0 \u00a0 \u00a0 \u00a0 // Display the query result\u00a0 \u00a0 \u00a0 \u00a0 QueryResult queryResult = response.getQueryResult();\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"Query Text: '%s'\\n\", queryResult.getQueryText());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Detected Intent: %s (confidence: %f)\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getIntent().getDisplayName(), queryResult.getIntentDetectionConfidence());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Fulfillment Text: '%s'\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getFulfillmentMessagesCount() > 0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ? queryResult.getFulfillmentMessages(0).getText()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : \"Triggered Default Fallback Intent\");\u00a0 \u00a0 \u00a0 \u00a0 queryResults.put(text, queryResult);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 return queryResults;\u00a0 }}\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow/detect_intent_texts_with_location.py) \n```\ndef detect_intent_texts_with_location(\u00a0 \u00a0 project_id, location_id, session_id, texts, language_code):\u00a0 \u00a0 \"\"\"Returns the result of detect intent with texts as inputs.\u00a0 \u00a0 Using the same `session_id` between requests allows continuation\u00a0 \u00a0 of the conversation.\"\"\"\u00a0 \u00a0 from google.cloud import dialogflow\u00a0 \u00a0 session_client = dialogflow.SessionsClient(\u00a0 \u00a0 \u00a0 \u00a0 client_options={\"api_endpoint\": f\"{location_id}-dialogflow.googleapis.com\"}\u00a0 \u00a0 )\u00a0 \u00a0 session = (\u00a0 \u00a0 \u00a0 \u00a0 f\"projects/{project_id}/locations/{location_id}/agent/sessions/{session_id}\"\u00a0 \u00a0 )\u00a0 \u00a0 print(f\"Session path: {session}\\n\")\u00a0 \u00a0 for text in texts:\u00a0 \u00a0 \u00a0 \u00a0 text_input = dialogflow.TextInput(text=text, language_code=language_code)\u00a0 \u00a0 \u00a0 \u00a0 query_input = dialogflow.QueryInput(text=text_input)\u00a0 \u00a0 \u00a0 \u00a0 response = session_client.detect_intent(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 request={\"session\": session, \"query_input\": query_input}\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 print(\"=\" * 20)\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Query text: {response.query_result.query_text}\")\u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 f\"Detected intent: {response.query_result.intent.display_name} (confidence: {response.query_result.intent_detection_confidence,})\\n\"\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Fulfillment text: {response.query_result.fulfillment_text}\\n\")\n```No preface\n **C#** : Please follow the [C# setup instructions](/dialogflow/docs/reference/libraries) on the client libraries page  and then visit the [Dialogflow reference documentation for .NET.](https://googleapis.github.io/google-cloud-dotnet/docs/Google.Cloud.Dialogflow.V2/index.html) \n **PHP** : Please follow the [PHP setup instructions](/dialogflow/docs/reference/libraries) on the client libraries page  and then visit the [Dialogflow reference documentation for PHP.](/php/docs/reference/cloud-dialogflow/latest) \n **Ruby** : Please follow the [Ruby setup instructions](/dialogflow/docs/reference/libraries) on the client libraries page  and then visit the [Dialogflow reference documentation for Ruby.](https://googleapis.dev/ruby/google-cloud-dialogflow/latest/Google/Cloud/Dialogflow.html)\n**Caution:** As described in the [setup documentation](/dialogflow/es/docs/quick/setup#auth-env) , you should use the`GOOGLE_APPLICATION_CREDENTIALS`environment variable to provide your client libraries with credentials. However, if you need to manually provide a credentials file in your code, you need to take one additional step when calling a regionalized endpoint. Set the scope to`https://www.googleapis.com/auth/cloud-platform`when generating your authentication credentials. For example, this is accomplished in Java when creating a`GoogleCredentials`object:```\nGoogleCredentials.fromStream(new FileInputStream(\"credential_file\"))\n .createScoped(\"https://www.googleapis.com/auth/cloud-platform\")\n \n```\n## Cloud logging\nSee the [Cloud logging guide](/dialogflow/es/docs/logging) to control the region in which logs are stored.\n## Limitations\nWhen a non-default region is selected in the Dialogflow Console, the following features are not available:\n- [Integrations](/dialogflow/es/docs/integrations) \n- [Knowledge Connectors](/dialogflow/es/docs/knowledge-connectors) \n- [Prebuilt Agents](/dialogflow/es/docs/agents-prebuilt) \n- [Small Talk](/dialogflow/es/docs/agents-small-talk) \n- [Training tool](/dialogflow/es/docs/training#tool) \nThe [APIs Explorer](https://developers.google.com/explorer-help/) , found on many [REST reference documents](/dialogflow/es/docs/reference/rest) , only supports the `global` region for API calls.", "guide": "Dialogflow"}