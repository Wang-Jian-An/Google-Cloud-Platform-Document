{"title": "Dialogflow - Legacy Dialogflow Messenger", "url": "https://cloud.google.com/dialogflow/cx/docs/concept/integration/legacy-dialogflow-messenger", "abstract": "# Dialogflow - Legacy Dialogflow Messenger\n**Caution:** Legacy Dialogflow Messenger is now deprecated. Use the new [Dialogflow Messenger](/dialogflow/cx/docs/concept/integration/dialogflow-messenger) .\n**Caution:** Only use Legacy Dialogflow Messenger if the data provided by your agent is public. Once this integration is enabled, any unauthenticated individual may be able to query your agent.\nThe Legacy Dialogflow Messenger integration provides a customizable chat dialog for your agent that can be embedded in your website. The chat dialog is implemented as a dialog window that can be opened and closed by your end-user. When opened, the chat dialog appears above your content in the lower right side of the screen.\n", "content": "## Migrating to the new Dialogflow Messenger\nThe new version of Dialogflow Messenger provides authentication to control agent query access and more user interface configuration options. It is recommended that all users of the legacy version migrate to the new version.\nIf you enabled the Dialogflow Messenger integration before August 29, 2023, you may still be using the legacy version. To determine whether you are using the legacy version, examine the messenger HTML code embedded on your website. If you see the following script, you are using the legacy version:\n```\nhttps://www.gstatic.com/dialogflow-console/fast/messenger-cx/bootstrap.js?v=1\n```\nTo migrate to the new version:\n- Delete all HTML, CSS, and JavaScript messenger code from your website.\n- Follow the instructions for the [new Dialogflow Messenger integration](/dialogflow/cx/docs/concept/integration/dialogflow-messenger) .## HTML customizations\nYou can customize various aspects for how the chat dialog appears and behaves. The `df-messenger` HTML element has the following attributes:\n| Attribute  | Input policy | Value                                                             |\n|:--------------|:---------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| agent-id  | Required  | Agent ID associated with the Dialogflow agent. This is prepopulated with your agent ID.                                        |\n| chat-icon  | Optional  | Icon used for the chat dialog open button. The Dialogflow icon is the default. This field must be a public URL. The icon size should be 36px by 36px.                         |\n| chat-title | Required  | Title displayed at the top of the chat dialog. This is prepopulated with your agent's name.                                       |\n| df-cx   | Required  | Indicates that interaction is with a CX agent. Use \"true\" as the value.                                            |\n| expand  | Optional  | Boolean attribute that sets the chat dialog to be open when the page loads. By default, the chat dialog is closed when the page loads.                            |\n| intent  | Optional  | A custom event that will be invoked when the chat dialog is opened. You can use an event handler that will be called for this event and will produce the first agent message.                   |\n| language-code | Required  | Default language code for the first intent. This is prepopulated with the agent's default language.                                     |\n| location  | Required  | The agent's region.                                                         |\n| session-id | Optional  | A session ID. If this is not supplied, the integration will generate a unique ID for each chat dialog.                                    |\n| user-id  | Optional  | Can be used to track a user across sessions. You can pass the value to Dialogflow through the queryParams.payload.userId field in a detect intent request, and Dialogflow provides this value to you through the WebhookRequest.payload.userId field. |\n| wait-open  | Optional  | Boolean attribute that delays the custom event defined in the intent attribute until the dialog is actually opened.                                 |\n## CSS customizations\nYou can customize the style of your chat dialog by setting [CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) .\n**Caution:** Color customization will not render in Internet Explorer 11, as it does not support CSS variables. Default colors will be rendered instead.\nThe following CSS variables can be provided:\n| CSS variable         | Affected property             |\n|:---------------------------------------------|:-------------------------------------------------------------------|\n| df-messenger-bot-message      | Bubble background color for agent messages.      |\n| df-messenger-button-titlebar-color   | Color for the floating button and the titlebar of the chat dialog. |\n| df-messenger-button-titlebar-font-color  | Font color for the title in the titlebar.       |\n| df-messenger-chat-background-color   | Color for the chat dialog background.        |\n| df-messenger-font-color      | Font color for messages.           |\n| df-messenger-input-box-color     | Background color for the text input box.       |\n| df-messenger-input-font-color    | Font color for the text input box.         |\n| df-messenger-input-placeholder-font-color | Font color for placeholder text in text input box.     |\n| df-messenger-minimized-chat-close-icon-color | Color of the close icon in the closed chat view.     |\n| df-messenger-send-icon      | Color of the send icon in the text input box.      |\n| df-messenger-user-message     | Bubble background color for user messages.       |\nExample code:\n```\n<style>\u00a0 df-messenger {\u00a0 \u00a0--df-messenger-bot-message: #878fac;\u00a0 \u00a0--df-messenger-button-titlebar-color: #df9b56;\u00a0 \u00a0--df-messenger-chat-background-color: #fafafa;\u00a0 \u00a0--df-messenger-font-color: white;\u00a0 \u00a0--df-messenger-send-icon: #878fac;\u00a0 \u00a0--df-messenger-user-message: #479b3d;\u00a0 }</style>\n```\nThe settings above will result in:\n## JavaScript events\nDialogflow Messenger triggers a variety of events that you can create [event listeners](https://developer.mozilla.org/en-US/docs/Web/API/EventListener) for.\nThe [event target](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) for these events is the `df-messenger` element.\nTo add an event listener for the `df-messenger` element, add the following JavaScript code, where `event-type` is one of the event names described below:\n```\nconst dfMessenger = document.querySelector('df-messenger');dfMessenger.addEventListener('event-type', function (event) {\u00a0 // Handle event\u00a0 ...});\n```\nThe following event types are supported:\n### df-accordion-clicked\nThis event occurs when a user clicks an accordion element. The event structure looks like the following:\n```\nelement: {\u00a0 title: string,\u00a0 subtitle: string,\u00a0 image: {\u00a0 \u00a0 src: {rawUrl: string}\u00a0 },\u00a0 text: string}\n```\n### df-button-clicked\nThis event occurs when a user clicks a button element. The event structure looks like the following:\n```\nelement: {\u00a0 icon: {\u00a0 \u00a0 type: string,\u00a0 \u00a0 color: string\u00a0 },\u00a0 text: string,\u00a0 link: string,\u00a0 event: EventInput,\u00a0 payload: {}}\n```\n### df-chip-clicked\nThis event occurs when a user selects a suggestion chip. The event structure looks like the following:\n```\nquery: string // Text of the suggestion chip that was selected.\n```\n### df-info-card-clicked\nThis event occurs when the end-user clicks the information item in the titlebar. The event structure looks like the following:\n```\nelement: {\u00a0 title: string,\u00a0 image: {\u00a0 \u00a0 src: {rawUrl: string}\u00a0 },\u00a0 actionLink: string}\n```\n### df-list-element-clicked\nThis event occurs when a user clicks an item in a list. The event structure looks like the following:\n```\nelement: {\u00a0 title: string,\u00a0 subtitle: string,\u00a0 image: {\u00a0 \u00a0 src: {rawUrl}\u00a0 },\u00a0 event: {\u00a0 \u00a0 name: string\u00a0 },\u00a0 payload: {}}\n```\n### df-messenger-error\nThis event occurs when the Dialogflow API sends an error status code. The event structure looks like the following:\n```\nerror: {\u00a0 \"error\": {\u00a0 \u00a0 \"code\": <error_code>,\u00a0 \u00a0 \"message\": <error_message>,\u00a0 \u00a0 \"status\": <error_status>\u00a0 }}\n```\n### df-messenger-loaded\nThis event is triggered when the `df-messenger` element is fully loaded and initialized.\n### df-request-sent\nThis event occurs when a request is made to the Dialogflow API. This event, along with `df-response-received` , can be used to monitor request latency. The event structure looks like the following:\n```\nrequestBody: {\u00a0 \"queryParams\": {\u00a0 \u00a0 object(QueryParameters)\u00a0 },\u00a0 \"queryInput\": {\u00a0 \u00a0 object(QueryInput)\u00a0 },\u00a0 \"inputAudio\": string}\n```\n### df-response-received\nThis event occurs when a response is received from the Dialogflow API. The event structure looks like the following:\n```\nresponse: detectIntentResponse\n```\n### df-user-input-entered\nThis event occurs when the end-user enters a query. The event structure looks like the following:\n```\ninput: string // Text entered by user\n```\n## JavaScript functions\nThe `df-messenger` element provides [functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions) you can call to affect its behavior.\n**Note:** Before calling any of these functions, ensure that the `df-messenger` element is loaded by listening for the `dfMessengerLoaded` event described above.\n### renderCustomText\nThis function renders a simple text message, as if it came from Dialogflow as simple text response.\nFor example:\n```\nconst dfMessenger = document.querySelector('df-messenger');dfMessenger.renderCustomText('Custom text');\n```\n### renderCustomCard\nThis function renders a custom card, as if it came from Dialogflow fulfillment. The format of the custom payload response is defined in the [Fulfillment](#fulfillment) section.\nFor example:\n```\nconst dfMessenger = document.querySelector('df-messenger');const payload = [\u00a0 {\u00a0 \u00a0 \"type\": \"info\",\u00a0 \u00a0 \"title\": \"Info item title\",\u00a0 \u00a0 \"subtitle\": \"Info item subtitle\",\u00a0 \u00a0 \"image\": {\u00a0 \u00a0 \u00a0 \"src\": {\u00a0 \u00a0 \u00a0 \u00a0 \"rawUrl\": \"https://example.com/images/logo.png\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 },\u00a0 \u00a0 \"actionLink\": \"https://example.com\"\u00a0 }];dfMessenger.renderCustomCard(payload);\n```\n### showMinChat\nThis function shows a minimal version of message lists.\nFor example:\n```\nconst dfMessenger = document.querySelector('df-messenger');dfMessenger.showMinChat();\n```\n## Fulfillment\nWhen creating [fulfillment](/dialogflow/cx/docs/concept/fulfillment) , you can create **Text Responses** and **Custom Payloads** . The text responses are used for basic agent responses, and the custom payloads are used for rich responses. The custom payload format for all response types has the following basic structure:\n```\n{\u00a0 \"richContent\": [\u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"type-id\",\u00a0 \u00a0 \u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"type-id\",\u00a0 \u00a0 \u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ],\u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"type-id\",\u00a0 \u00a0 \u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"type-id\",\u00a0 \u00a0 \u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 ]}\n```\nNote that the `richContent` value allows one outer and multiple inner arrays. Responses within an inner array are bound together in a single visual card. When the outer array contains multiple inner arrays, multiple cards are shown\u2014one for each inner array.\nThe remaining subsections describe the various types of responses you can configure for a custom payload.\n### Info response type\nThe info response type is a simple title card that users can click or touch.\nThe following table describes the fields:\n| Name    | Type | Description      |\n|:-----------------|:-------|:-----------------------------------|\n| type    | string | Response type: \"info\"    |\n| title   | string | Card title       |\n| subtitle   | string | Card subtitle      |\n| image   | object | Image        |\n| image.src  | object | Image source      |\n| image.src.rawUrl | string | Public URL for image    |\n| actionLink  | string | URL to follow when card is clicked |\nFor example:\n```\n{\u00a0 \"richContent\": [\u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"info\",\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Info item title\",\u00a0 \u00a0 \u00a0 \u00a0 \"subtitle\": \"Info item subtitle\",\u00a0 \u00a0 \u00a0 \u00a0 \"image\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"src\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"rawUrl\": \"https://example.com/images/logo.png\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"actionLink\": \"https://example.com\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 ]}\n```\n### Description response type\nThe description response type is an informative card that can have multiple lines of text.\nThe following table describes the fields:\n| Name | Type   | Description             |\n|:-------|:--------------|:--------------------------------------------------------------|\n| type | string  | Response type: \"description\"         |\n| title | string  | Card title             |\n| text | array<string> | Array of strings, where each string is rendered on a new line |\nFor example:\n```\n{\u00a0 \"richContent\": [\u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"description\",\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Description title\",\u00a0 \u00a0 \u00a0 \u00a0 \"text\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"This is text line 1.\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"This is text line 2.\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 ]}\n```\n### Image response type\nThe image response type is an image card that users can click or touch.\nThe following table describes the fields:\n| Name    | Type | Description   |\n|:------------------|:-------|:-----------------------|\n| type    | string | Response type: \"image\" |\n| rawUrl   | string | Public URL for image |\n| accessibilityText | string | Alt text for image  |\nFor example:\n```\n{\u00a0 \"richContent\": [\u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"image\",\u00a0 \u00a0 \u00a0 \u00a0 \"rawUrl\": \"https://example.com/images/logo.png\",\u00a0 \u00a0 \u00a0 \u00a0 \"accessibilityText\": \"Example logo\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 ]}\n```\n### Button response type\nThe button response type is a small button with an icon that users can click or touch.\nThe following table describes the fields:\n| Name  | Type | Description              |\n|:-----------|:-------|:------------------------------------------------------------------|\n| type  | string | Response type: \"button\"           |\n| icon  | object | Icon for button             |\n| icon.type | string | Icon from the Material icon library. The default icon is an arrow |\n| icon.color | string | Color hexcode              |\n| text  | string | Button text              |\n| link  | string | URL to follow when button is clicked        |\n| event  | object | Dialogflow event that is triggered when the button is clicked. |\nFor example:\n```\n{\u00a0 \"richContent\": [\u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"button\",\u00a0 \u00a0 \u00a0 \u00a0 \"icon\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"chevron_right\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"color\": \"#FF9800\"\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"text\": \"Button text\",\u00a0 \u00a0 \u00a0 \u00a0 \"link\": \"https://example.com\",\u00a0 \u00a0 \u00a0 \u00a0 \"event\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 ]}\n```\n### List response type\nThe list response type is a card with multiple options users can select from.\nThe response contains an array of `list` and `divider` response types. The following table describes the `list` type:\n| Name  | Type | Description             |\n|:---------|:-------|:--------------------------------------------------------------|\n| type  | string | Response type: \"list\"           |\n| title | string | Option title             |\n| subtitle | string | Option subtitle            |\n| event | object | Dialogflow event that is triggered when the option is clicked |\nThe following table describes the `divider` type:\n| Name | Type | Description    |\n|:-------|:-------|:-------------------------|\n| type | string | Response type: \"divider\" |\nFor example:\n```\n{\u00a0 \"richContent\": [\u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"list\",\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"List item 1 title\",\u00a0 \u00a0 \u00a0 \u00a0 \"subtitle\": \"List item 1 subtitle\",\u00a0 \u00a0 \u00a0 \u00a0 \"event\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"divider\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"list\",\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"List item 2 title\",\u00a0 \u00a0 \u00a0 \u00a0 \"subtitle\": \"List item 2 subtitle\",\u00a0 \u00a0 \u00a0 \u00a0 \"event\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 ]}\n```\n### Accordion response type\nThe accordion response type is a small card that a user can click or touch to expand and reveal more text.\nThe following table describes the fields:\n| Name    | Type | Description    |\n|:-----------------|:-------|:---------------------------|\n| type    | string | Response type: \"accordion\" |\n| title   | string | Accordion title   |\n| subtitle   | string | Accordion subtitle   |\n| image   | object | Image      |\n| image.src  | object | Image source    |\n| image.src.rawUrl | string | Public URL for image  |\n| text    | string | Accordion text    |\nFor example:\n```\n{\u00a0 \"richContent\": [\u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"accordion\",\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Accordion title\",\u00a0 \u00a0 \u00a0 \u00a0 \"subtitle\": \"Accordion subtitle\",\u00a0 \u00a0 \u00a0 \u00a0 \"image\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"src\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"rawUrl\": \"https://example.com/images/logo.png\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"text\": \"Accordion text\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 ]}\n```\n### Suggestion chip response type\nThe suggestion chip response type provides the end-user with a list of clickable suggestion chips.\nThe following table describes the fields:\n| Name      | Type   | Description     |\n|:---------------------------|:--------------|:----------------------------|\n| type      | string  | Response type: \"chips\"  |\n| options     | array<object> | Array of Option objects  |\n| options[].text    | string  | Option text     |\n| options[].image   | object  | Option Image    |\n| options[].image.src  | object  | Option image source   |\n| options[].image.src.rawUrl | string  | Option public URL for image |\n| options[].link    | string  | Option link     |\nFor example:\n```\n{\u00a0 \"richContent\": [\u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"chips\",\u00a0 \u00a0 \u00a0 \u00a0 \"options\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"text\": \"Chip 1\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"image\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"src\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"rawUrl\": \"https://example.com/images/logo.png\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"link\": \"https://example.com\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"text\": \"Chip 2\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"image\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"src\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"rawUrl\": \"https://example.com/images/logo.png\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"link\": \"https://example.com\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 ]}\n```\n### Combining response types\nThe individual rich message elements for Dialogflow Messenger can be used to construct a custom card to fit your needs. Here's an example using some of the elements listed above:\n```\n{\u00a0 \"richContent\": [\u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"image\",\u00a0 \u00a0 \u00a0 \u00a0 \"rawUrl\": \"https://example.com/images/logo.png\",\u00a0 \u00a0 \u00a0 \u00a0 \"accessibilityText\": \"Dialogflow across platforms\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"info\",\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Dialogflow\",\u00a0 \u00a0 \u00a0 \u00a0 \"subtitle\": \"Build natural and rich conversational experiences\",\u00a0 \u00a0 \u00a0 \u00a0 \"actionLink\": \"https://cloud.google.com/dialogflow/docs\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"chips\",\u00a0 \u00a0 \u00a0 \u00a0 \"options\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"text\": \"Case Studies\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"link\": \"https://cloud.google.com/dialogflow/case-studies\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"text\": \"Docs\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"link\": \"https://cloud.google.com/dialogflow/docs\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 ]}\n```\n## Debugging\nTo test your agent with Dialogflow Messenger locally:\n- Embed the Dialogflow Messenger element in a page as described above.\n- Start a local HTTP server for that page with a specific port.\n- Access that page at`http://localhost:port_number`.", "guide": "Dialogflow"}