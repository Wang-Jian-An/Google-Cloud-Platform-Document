{"title": "Dialogflow - Manage knowledge bases", "url": "https://cloud.google.com/dialogflow/es/docs/how/knowledge-bases", "abstract": "# Dialogflow - Manage knowledge bases\n**    Beta     ** This product or feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA products and features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nA represents a collection of that you provide to Dialogflow. Your knowledge documents contain information that may be useful during conversations with end-users. Some Dialogflow features use knowledge bases when looking for a response to an end-user expression. This guide describes how to create and manage knowledge bases.\nA knowledge base [is applied at the agent level](/dialogflow/es/docs/data-level) .\n", "content": "## Before you begin\nYou should do the following before reading this guide:\n- Read [Dialogflow basics](/dialogflow/docs/basics) .\n- Perform [setup steps](/dialogflow/docs/quick/setup) .## Create a knowledge base\nThe samples below show you how to use the Dialogflow Console, REST API (including command line), or client libraries to create a knowledge base. To use the API, call the `create` method on the [KnowledgeBase](/dialogflow/docs/reference/common-types#knowledgebases) type.\nUse the Dialogflow Console to create a knowledge base:\n- Go to the [Dialogflow ES Console](https://dialogflow.cloud.google.com) \n- Select an agent\n- Click **Knowledge** on the left sidebar menu\n- Click **Create Knowledge Base** \n- Enter a knowledge base name\n- Click **Save** Before using any of the request data, make the following replacements:- : your GCP project ID\n- : desired knowledge base name\nHTTP method and URL:\n```\nPOST https://dialogflow.googleapis.com/v2beta1/projects/PROJECT_ID/knowledgeBases\n```\nRequest JSON body:\n```\n{\n \"displayName\": \"KNOWLEDGE_BASE_DISPLAY_NAME\"\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_ID/knowledgeBases/NDA4MTM4NzE2MjMwNDUxMjAwMA\",\n \"displayName\": \"KNOWLEDGE_BASE_DISPLAY_NAME\"\n}\n```\nTake note of the value of the `name` field. This is the name of your new knowledge base. The path segment after `knowledgeBases` is your new knowledge base ID. Save this ID for requests below.\nTo authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow/snippets/src/main/java/com/example/dialogflow/KnowledgeBaseManagement.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.cloud.dialogflow.v2.KnowledgeBase;import com.google.cloud.dialogflow.v2.KnowledgeBasesClient;import com.google.cloud.dialogflow.v2.LocationName;import java.io.IOException;public class KnowledgeBaseManagement {\u00a0 public static void main(String[] args) throws ApiException, IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"my-location\";\u00a0 \u00a0 // Set display name of the new knowledge base\u00a0 \u00a0 String knowledgeBaseDisplayName = \"my-knowledge-base-display-name\";\u00a0 \u00a0 // Create a knowledge base\u00a0 \u00a0 createKnowledgeBase(projectId, location, knowledgeBaseDisplayName);\u00a0 }\u00a0 // Create a Knowledge base\u00a0 public static void createKnowledgeBase(String projectId, String location, String displayName)\u00a0 \u00a0 \u00a0 throws ApiException, IOException {\u00a0 \u00a0 // Instantiates a client\u00a0 \u00a0 try (KnowledgeBasesClient knowledgeBasesClient = KnowledgeBasesClient.create()) {\u00a0 \u00a0 \u00a0 KnowledgeBase targetKnowledgeBase =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 KnowledgeBase.newBuilder().setDisplayName(displayName).build();\u00a0 \u00a0 \u00a0 LocationName parent = LocationName.of(projectId, location);\u00a0 \u00a0 \u00a0 KnowledgeBase createdKnowledgeBase =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 knowledgeBasesClient.createKnowledgeBase(parent, targetKnowledgeBase);\u00a0 \u00a0 \u00a0 System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 System.out.format(\"Knowledgebase created:\\n\");\u00a0 \u00a0 \u00a0 System.out.format(\"Display Name: %s\\n\", createdKnowledgeBase.getDisplayName());\u00a0 \u00a0 \u00a0 System.out.format(\"Name: %s\\n\", createdKnowledgeBase.getName());\u00a0 \u00a0 }\u00a0 }}\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow/detect.v2beta1.js) \n```\n// Imports the Dialogflow client libraryconst dialogflow = require('@google-cloud/dialogflow').v2beta1;// Instantiate a DialogFlow client.const client = new dialogflow.KnowledgeBasesClient();/**\u00a0* TODO(developer): Uncomment the following lines before running the sample.\u00a0*/// const projectId = 'ID of GCP project associated with your Dialogflow agent';// const displayName = `your knowledge base display name, e.g. myKnowledgeBase`;const formattedParent = 'projects/' + projectId;const knowledgeBase = {\u00a0 displayName: displayName,};const request = {\u00a0 parent: formattedParent,\u00a0 knowledgeBase: knowledgeBase,};const [result] = await client.createKnowledgeBase(request);console.log(`Name: ${result.name}`);console.log(`displayName: ${result.displayName}`);\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow/knowledge_base_management.py) \n```\ndef create_knowledge_base(project_id, display_name):\u00a0 \u00a0 \"\"\"Creates a Knowledge base.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project linked with the agent.\u00a0 \u00a0 \u00a0 \u00a0 display_name: The display name of the Knowledge base.\"\"\"\u00a0 \u00a0 from google.cloud import dialogflow_v2beta1 as dialogflow\u00a0 \u00a0 client = dialogflow.KnowledgeBasesClient()\u00a0 \u00a0 project_path = client.common_project_path(project_id)\u00a0 \u00a0 knowledge_base = dialogflow.KnowledgeBase(display_name=display_name)\u00a0 \u00a0 response = client.create_knowledge_base(\u00a0 \u00a0 \u00a0 \u00a0 parent=project_path, knowledge_base=knowledge_base\u00a0 \u00a0 )\u00a0 \u00a0 print(\"Knowledge Base created:\\n\")\u00a0 \u00a0 print(\"Display Name: {}\\n\".format(response.display_name))\u00a0 \u00a0 print(\"Name: {}\\n\".format(response.name))\n```\n## Add a document to the knowledge base\nYour new knowledge base currently has no documents, so you should add a document to it. See [Supported content](#supported-content) below for a description of all supported content options. You can use the [Cloud Storage FAQ](https://cloud.google.com/storage/docs/faq) document for this example.\n**Note:** Knowledge documents are only parsed when explicitly creating or updating them. If your source content changes after creating a knowledge document, you need to [update the knowledge document](#update) .\nThe samples below show you how to use the Dialogflow Console, REST API (including command line), or client libraries to create a knowledge document. To use the API, call the `create` method on the [Document](/dialogflow/docs/reference/common-types#documents) type.\nUse the Dialogflow Console to create a knowledge document:\n- If you are not continuing from steps above, navigate to your knowledge base settings:- Go to the [Dialogflow ES Console](https://dialogflow.cloud.google.com) \n- Select an agent\n- Click **Knowledge** on the left sidebar menu\n- Click your knowledge base name\n- Click **New Document** or **Create the first one** \n- Enter a document name\n- Select **text/html** for **Mime Type** \n- Select **FAQ** for **Knowledge Type** \n- Select **URL** for **Data Source** \n- Enter **https://cloud.google.com/storage/docs/faq** in the **URL** field\n- Click **CREATE** \nBefore using any of the request data, make the following replacements:- : your GCP project ID\n- : your knowledge base ID returned from previous request\n- : desired knowledge document name\nHTTP method and URL:\n```\nPOST https://dialogflow.googleapis.com/v2beta1/projects/PROJECT_ID/knowledgeBases/KNOWLEDGE_BASE_ID/documents\n```\nRequest JSON body:\n```\n{\n \"displayName\": \"DOCUMENT_DISPLAY_NAME\",\n \"mimeType\": \"text/html\",\n \"knowledgeTypes\": \"FAQ\",\n \"contentUri\": \"https://cloud.google.com/storage/docs/faq\"\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_ID/operations/ks-add_document-MzA5NTY2MTc5Mzg2Mzc5NDY4OA\"\n}\n```\nThe path segment after `operations` is your operation ID.\nTo authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow/snippets/src/main/java/com/example/dialogflow/DocumentManagement.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.api.gax.rpc.ApiException;import com.google.cloud.dialogflow.v2.CreateDocumentRequest;import com.google.cloud.dialogflow.v2.Document;import com.google.cloud.dialogflow.v2.Document.KnowledgeType;import com.google.cloud.dialogflow.v2.DocumentsClient;import com.google.cloud.dialogflow.v2.KnowledgeOperationMetadata;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class DocumentManagement {\u00a0 public static void createDocument(\u00a0 \u00a0 \u00a0 String knowledgeBaseName,\u00a0 \u00a0 \u00a0 String displayName,\u00a0 \u00a0 \u00a0 String mimeType,\u00a0 \u00a0 \u00a0 String knowledgeType,\u00a0 \u00a0 \u00a0 String contentUri)\u00a0 \u00a0 \u00a0 throws IOException, ApiException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // Instantiates a client\u00a0 \u00a0 try (DocumentsClient documentsClient = DocumentsClient.create()) {\u00a0 \u00a0 \u00a0 Document document =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Document.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDisplayName(displayName)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setContentUri(contentUri)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setMimeType(mimeType)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addKnowledgeTypes(KnowledgeType.valueOf(knowledgeType))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 CreateDocumentRequest createDocumentRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CreateDocumentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDocument(document)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(knowledgeBaseName)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<Document, KnowledgeOperationMetadata> response =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 documentsClient.createDocumentAsync(createDocumentRequest);\u00a0 \u00a0 \u00a0 Document createdDocument = response.get(300, TimeUnit.SECONDS);\u00a0 \u00a0 \u00a0 System.out.format(\"Created Document:\\n\");\u00a0 \u00a0 \u00a0 System.out.format(\" - Display Name: %s\\n\", createdDocument.getDisplayName());\u00a0 \u00a0 \u00a0 System.out.format(\" - Document Name: %s\\n\", createdDocument.getName());\u00a0 \u00a0 \u00a0 System.out.format(\" - MIME Type: %s\\n\", createdDocument.getMimeType());\u00a0 \u00a0 \u00a0 System.out.format(\" - Knowledge Types:\\n\");\u00a0 \u00a0 \u00a0 for (KnowledgeType knowledgeTypeId : document.getKnowledgeTypesList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\" \u00a0- %s \\n\", knowledgeTypeId.getValueDescriptor());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 System.out.format(\" - Source: %s \\n\", document.getContentUri());\u00a0 \u00a0 }\u00a0 }}\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow/detect.v2beta1.js) \n```\n// \u00a0 // Imports the Dialogflow client library// \u00a0 const dialogflow = require('@google-cloud/dialogflow').v2beta1;// \u00a0 // Instantiate a DialogFlow Documents client.// \u00a0 const client = new dialogflow.DocumentsClient({// \u00a0 \u00a0 projectId: projectId,// \u00a0 });// \u00a0 /**// \u00a0 \u00a0* TODO(developer): Uncomment the following lines before running the sample.// \u00a0 \u00a0*/// \u00a0 // const projectId = 'ID of GCP project associated with your Dialogflow agent';// \u00a0 // const knowledgeBaseFullName = `the full path of your knowledge base, e.g my-Gcloud-project/myKnowledgeBase`;// \u00a0 // const documentPath = `path of the document you'd like to add, e.g. https://dialogflow.com/docs/knowledge-connectors`;// \u00a0 // const documentName = `displayed name of your document in knowledge base, e.g. myDoc`;// \u00a0 // const knowledgeTypes = `The Knowledge type of the Document. e.g. FAQ`;// \u00a0 // const mimeType = `The mime_type of the Document. e.g. text/csv, text/html,text/plain, text/pdf etc.`;// \u00a0 const request = {// \u00a0 \u00a0 parent: knowledgeBaseFullName,// \u00a0 \u00a0 document: {// \u00a0 \u00a0 \u00a0 knowledgeTypes: [knowledgeTypes],// \u00a0 \u00a0 \u00a0 displayName: documentName,// \u00a0 \u00a0 \u00a0 contentUri: documentPath,// \u00a0 \u00a0 \u00a0 source: 'contentUri',// \u00a0 \u00a0 \u00a0 mimeType: mimeType,// \u00a0 \u00a0 },// \u00a0 };// \u00a0 const [operation] = await client.createDocument(request);// \u00a0 const [response] = await operation.promise();// \u00a0 console.log('Document created');// \u00a0 console.log(`Content URI...${response.contentUri}`);// \u00a0 console.log(`displayName...${response.displayName}`);// \u00a0 console.log(`mimeType...${response.mimeType}`);// \u00a0 console.log(`name...${response.name}`);// \u00a0 console.log(`source...${response.source}`);\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow/document_management.py) \n```\ndef create_document(\u00a0 \u00a0 project_id, knowledge_base_id, display_name, mime_type, knowledge_type, content_uri):\u00a0 \u00a0 \"\"\"Creates a Document.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project linked with the agent.\u00a0 \u00a0 \u00a0 \u00a0 knowledge_base_id: Id of the Knowledge base.\u00a0 \u00a0 \u00a0 \u00a0 display_name: The display name of the Document.\u00a0 \u00a0 \u00a0 \u00a0 mime_type: The mime_type of the Document. e.g. text/csv, text/html,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 text/plain, text/pdf etc.\u00a0 \u00a0 \u00a0 \u00a0 knowledge_type: The Knowledge type of the Document. e.g. FAQ,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EXTRACTIVE_QA.\u00a0 \u00a0 \u00a0 \u00a0 content_uri: Uri of the document, e.g. gs://path/mydoc.csv,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 http://mypage.com/faq.html.\"\"\"\u00a0 \u00a0 from google.cloud import dialogflow_v2beta1 as dialogflow\u00a0 \u00a0 client = dialogflow.DocumentsClient()\u00a0 \u00a0 knowledge_base_path = dialogflow.KnowledgeBasesClient.knowledge_base_path(\u00a0 \u00a0 \u00a0 \u00a0 project_id, knowledge_base_id\u00a0 \u00a0 )\u00a0 \u00a0 document = dialogflow.Document(\u00a0 \u00a0 \u00a0 \u00a0 display_name=display_name, mime_type=mime_type, content_uri=content_uri\u00a0 \u00a0 )\u00a0 \u00a0 document.knowledge_types.append(\u00a0 \u00a0 \u00a0 \u00a0 getattr(dialogflow.Document.KnowledgeType, knowledge_type)\u00a0 \u00a0 )\u00a0 \u00a0 response = client.create_document(parent=knowledge_base_path, document=document)\u00a0 \u00a0 print(\"Waiting for results...\")\u00a0 \u00a0 document = response.result(timeout=120)\u00a0 \u00a0 print(\"Created Document:\")\u00a0 \u00a0 print(\" - Display Name: {}\".format(document.display_name))\u00a0 \u00a0 print(\" - Knowledge ID: {}\".format(document.name))\u00a0 \u00a0 print(\" - MIME Type: {}\".format(document.mime_type))\u00a0 \u00a0 print(\" - Knowledge Types:\")\u00a0 \u00a0 for knowledge_type in document.knowledge_types:\u00a0 \u00a0 \u00a0 \u00a0 print(\" \u00a0 \u00a0- {}\".format(KNOWLEDGE_TYPES[knowledge_type]))\u00a0 \u00a0 print(\" - Source: {}\\n\".format(document.content_uri))\n```\nCreating a document is a long-running operation, so it may take a substantial amount of time to complete. You can poll the status of this operation to see if it has completed. Once completed, the operation contains the newly created document ID. Save this ID for future processing. For more information, see [Long-running operations](/dialogflow/docs/how/long-running-operations) .\n## Manage knowledge documents\n### Update knowledge document content\nIf you update your content referenced by a knowledge document, your knowledge document may not automatically refresh. Your content is only automatically refreshed if it is provided as a public URL and you have checked the **Enable Automatic Reload** option for the document.\nTo manually refresh Cloud Storage or public URL document content, call the `reload` method on the [Document](/dialogflow/docs/reference/common-types#documents) type.\nTo manually refresh uploaded raw content, use the `delete` and `create` methods on the [Document](/dialogflow/docs/reference/common-types#documents) type to re-create your document.\n### List knowledge documents\nYou can list all knowledge documents for your knowledge base. To use the API, call the `list` method on the [Document](/dialogflow/docs/reference/common-types#documents) type.\n### Delete knowledge documents\nYou can delete knowledge documents for your knowledge base. To use the API, call the `delete` method on the [Document](/dialogflow/docs/reference/common-types#documents) type. If you do not have the document ID, you can list the documents as described above.\n## Supported content\nThe following knowledge document types are supported:\n- **FAQ** : The document content contains question and answer pairs as either HTML or CSV. Typical FAQ HTML formats are parsed accurately, but unusual formats may fail to be parsed. CSV must have questions in the first column and answers in the second, with no header. Because of this explicit format, they are always parsed accurately.\n- **Extractive QA** : Documents for which unstructured text is extracted and used for question answering.\nThe following table shows the supported MIME types by and .\n| Knowledge Type \\ Source | Uploaded file (Document.content) (NOT recommended) | Uploaded file (Document.raw_content) (recommended) | File from Cloud Storage (Document.contentUri) | File from public URL (Document.contentUri) |\n|:--------------------------|:-----------------------------------------------------|:-----------------------------------------------------|:------------------------------------------------|:---------------------------------------------|\n| FAQ      | text/csv            | text/csv            | text/csv          | text/html         |\n| Extractive QA    | text/plain, text/html        | text/plain, text/html, application/pdf    | text/plain, text/html, application/pdf   | nan           |\nDocument content has the following known issues, limitations, and best practices:\nGeneral:\n- Files from public URLs must have been crawled by the Google search indexer, so that they exist in the search index. You can check this with the [Google Search Console](https://search.google.com/search-console) . Note that the indexer does not keep your content fresh. You must explicitly update your knowledge document when the source content changes.\n- CSV files must use commas as delimiters.\n- Confidence scores are not yet calibrated between FAQs and Knowledge Base Articles, so if you use both FAQ and Knowledge Base Articles, the best result may not always be the highest.\n- Dialogflow removes HTML tags from content when creating responses. Because of this, it's best to avoid HTML tags and use plain text when possible.\n- Google Assistant responses have a 640 character limit per chat bubble, so long answers are truncated when integrating with Google Assistant.\n- The maximum document size is 50 MB.\n- When using Cloud Storage files, you should either use public URIs or private URIs that your user account or service account has access to.\nSpecific to FAQ:\n- CSV must have questions in the first column and answers in the second, with no header.\n- Use CSV whenever possible, because CSV is parsed most accurately.\n- Public HTML content with a single QA pair is not supported.\n- The number of QA pairs in one document should not exceed 2000.\n- Duplicate questions with different answers is not supported.\n- You can use any FAQ document; the FAQ parser is capable of handling most FAQ formats.\nSpecific to Extractive QA:\n- Extractive QA is currently experimental. It is based on similar technologies that have been tried and tested at Google in products like Search and Assistant. [Send us your feedback](/dialogflow/docs/support) on how well it works for Dialogflow.\n- Content with dense text works best. Avoid content with many single sentence paragraphs.\n- Tables and lists are not supported.\n- The number of paragraphs in one document should not exceed 2000.\n- If an article is long (> 1000 words), try to break it down into multiple, smaller articles. If the article covers multiple issues, it can be broken into shorter articles covering the individual issues. If the article only covers one issue, then focus the article on the issue description and keep the issue resolution short.\n- Ideally, only the core content of an article should be provided (issue description and resolution). Additional content like author name, modification history, related links, and ads are not important.\n- Try to include a description for the issues an article can help with and/or sample queries that this article can answer.## Using Cloud Storage\nIf your content is not public, storing your content in [Cloud Storage](/storage/docs) is the recommended option. When creating knowledge documents, you provide the URLs for your Cloud Storage objects.\n### Creating Cloud Storage buckets and objects\nWhen creating the Cloud Storage bucket:\n- Be sure that you have selected the GCP project you use for Dialogflow.\n- Ensure that the user account or service account you normally use to access the Dialogflow API has [read permissions to the bucket objects](/storage/docs/access-control) .\n- Use the [Standard Storage class](/storage/docs/storage-classes#standard) .\n- Set the [bucket location](/storage/docs/locations) to a location nearest to your location. You will need the location ID (for example,`us-west1`) for some API calls, so take note of your choice.\nFollow the [Cloud Storage quickstart](/storage/docs/quickstart-console) instructions to create a bucket and upload files.\n### Supplying a Cloud Storage object to a knowledge base document\nTo supply your content:\n- Create a knowledge base as [described above](#create-kb) .\n- Create a knowledge document as [described above](#create-kd) . When calling the`create`method on the [Document](/dialogflow/docs/reference/common-types#documents) type, set the`contentUri`field to the URL of your Cloud Storage document. The format of this URL is`gs://bucket-name/object-name`.", "guide": "Dialogflow"}