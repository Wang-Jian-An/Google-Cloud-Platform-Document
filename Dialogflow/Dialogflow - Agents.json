{"title": "Dialogflow - Agents", "url": "https://cloud.google.com/dialogflow/cx/docs/concept/agent", "abstract": "# Dialogflow - Agents\nA is a virtual agent that handles concurrent conversations with your end-users. It is a natural language understanding module that understands the nuances of human language. Dialogflow translates end-user text or audio during a conversation to structured data that your apps and services can understand. You design and build a Dialogflow agent to handle the types of conversations required for your system.\nA Dialogflow agent is similar to a human call center agent. You train them both to handle expected conversation scenarios, and your training does not need to be overly explicit.\n", "content": "## Create an agent\n**Note:** You can create multiple CX agents for one [Google Cloud project](/resource-manager/docs/creating-managing-projects) .\nTo create an agent:\n- Open the [Dialogflow CX Console](https://dialogflow.cloud.google.com/cx/projects) .\n- Create or choose a Google Cloud project.\n- Click **Create agent** .\n- Select **Auto-generate** to create a [data store agent](/dialogflow/cx/docs/concept/data-store-agent) or select **Build your own** to create other kinds of agents.\n- Complete the form for basic agent settings:- You can choose any display name.\n- Select your preferred [location](/dialogflow/cx/docs/how/region#avail) . Click the **Edit** button if you want to change advanced [location settings](/dialogflow/cx/docs/how/region#location-settings) .\n- Select your preferred time zone.\n- Select the default language for your agent. You cannot change the default language for an agent once it is created.\n- Click **Save** .\nIf you have not already configured [location settings](/dialogflow/cx/docs/concept/region#location-settings) for your project, you must configure these settings with the console before creating agents with the API. Currently, you cannot configure location settings with the API.\nTo create an agent, see the `create` method for the `Agent` type.\n## Agent data\nDialogflow agents serve as top-level containers for settings and data for virtual agents.\nTo access an agent's data:\n- Open the [Dialogflow CX Console](https://dialogflow.cloud.google.com/cx/projects) .\n- Choose the Google Cloud project for the agent.\n- Find the agent in the list.\n- Click the agent display name.\n- Update flows, pages, etc. as described in other guides.\nSee the [guides](/dialogflow/cx/docs/concept) for the data you want to update.\nThe following data is associated with agents:\n- [Intents](/dialogflow/cx/docs/concept/intent) \n- [Entity types](/dialogflow/cx/docs/concept/entity) \n- [Webhooks](/dialogflow/cx/docs/concept/webhook) \n- [Flows](/dialogflow/cx/docs/concept/flow) \n- [Pages](/dialogflow/cx/docs/concept/page) \n- [Route groups](/dialogflow/cx/docs/concept/handler#group) \nFor more information about how data is applied at varying levels, see the [data application levels](/dialogflow/cx/docs/concept/data-level) .\n## Agent settings\nTo access agent settings:\n- Open the [Dialogflow CX Console](https://dialogflow.cloud.google.com/cx/projects) .\n- Choose your Google Cloud project.\n- Select your agent.\n- Click **Agent Settings** .\n- Update the settings as desired.\n- Click **Save** .\nSee the `get` and `patch/update` methods for the `Agent` type.\nThe following subsections describe the different categories of agent settings.\n### General settings\nThe following general settings are available for agents:\n- **Display name**  [link](#settings-general-display-name) A human-readable name for your agent.\n- **Time zone**  [link](#time-zone) The default time zone for your agent.\n- **Default language**  [link](#default-language) The default language supported by your agent. Once an agent is created, the default language cannot be changed. However, you can perform the following:- [Export](#export) your agent to the [JSON format](/dialogflow/cx/docs/reference/json-export) .\n- Unzip the downloaded file.\n- Find the`agent.json`file.\n- Update the`defaultLanguageCode`and`supportedLanguageCodes`fields to the desired values.\n- [Restore](/dialogflow/cx/docs/reference/json-export#restore) the agent to the same or different agent from step 1.\n- Update language-specific training phrases and entity values as needed.\n- **Agent lock**  [link](#agent-lock) - **Lock the agent** Indicates whether the agent is locked. A locked agent cannot be edited.\n- **Logging settings**  [link](#logging-settings) - **Enable Cloud Logging** Indicates whether [Cloud logging](/dialogflow/cx/docs/concept/logging) is enabled for the agent.\n- **Enable interaction logging** Indicates whether you would like Google to collect and store [redacted](/dialogflow/cx/docs/concept/security-settings) end-user queries for quality improvement. **Note:** Some features, such as [Experiments](/dialogflow/cx/docs/concept/experiments) , [Conversation history](/dialogflow/cx/docs/concept/conversation-history) , [BigQuery export](/dialogflow/cx/docs/concept/export-bq) , [Analytics](/dialogflow/cx/docs/concept/analytics) , and NLU model improvement require this setting to be enabled, as they rely on traffic logs.\n- **BigQuery export**  [link](#bigquery-export) - **Enable BigQuery export** Indicates whether [BigQuery export](/dialogflow/cx/docs/concept/export-bq) is enabled.\n- **BigQuery dataset** The BigQuery dataset name.\n- **BigQuery table** The BigQuery table name.\n- **Intent Suggestions**  [link](#intent-suggestions) You can enable [intent suggestions](/dialogflow/cx/docs/concept/intent#suggestions) .\n- **Custom payload template**  [link](#custom-payload-template) In this section, you can create descriptions and payloads for [custom payload templates](/dialogflow/cx/docs/concept/fulfillment#custom-payload-templates) .\n### ML settings\nDialogflow uses machine learning (ML) algorithms to understand end-user inputs, match them to intents, and extract structured data. Dialogflow learns from [training phrases](/dialogflow/cx/docs/concept/intent#tp) that you provide and the language models built into Dialogflow. Based on this data, it builds a model for making decisions about which intent should be matched to an end-user input. You can apply unique ML settings for each flow of an agent, and the model created by Dialogflow is unique for each flow.\nThe following agent-wide ML settings are available:\n- **Allow ML to correct spelling**  [link](#spelling-correction) If this is enabled and end-user input has a spelling or grammar mistake, an intent will be matched as though it was written correctly. The detect intent response will contain the corrected end-user input. For example, if an end-user enters \"I want an applle\", it will be processed as though the end-user entered \"I want an apple\". This also applies to matches involving both system and custom entities.Spell correction is available in English, French, German, Spanish, and Italian. It is available in all [Dialogflow CX regions](/dialogflow/cx/docs/concept/region) . **Note:** If original and corrected end-user input match different intents, the intent matching the original end-user input is selected.Warnings and best practices:- Spell correction can't correct ASR (automatic speech recognition) errors, so we don't recommend enabling it for agents using ASR inputs.\n- It is possible for corrected input to match the wrong intent. You can fix this by adding commonly mismatched phrases to [negative examples](/dialogflow/cx/docs/concept/intent#negative) .\n- Spell correction increases the agent's response time slightly.\n- If an agent is defined using domain-specific jargon, the corrections may be undesired.The following flow-specific ML settings are available:\n- **NLU type**  [link](#nlu-type) This can be one of:- **Advanced NLU** (default): Advanced NLU technology. This NLU type works better than standard, especially for large agents and flows.\n- **Standard NLU** : Standard NLU technology. Will [no longer receive quality improvements or new features](/dialogflow/docs/release-notes#February_20_2024) .\n- **Auto train**  [link](#auto-train) If enabled, the flow is trained whenever it is updated with the console. For large flows, this may cause console UI delays, so you should disable this setting and manually [train](/dialogflow/cx/docs/concept/flow#train) as-needed for large flows.\n- **Classification threshold**  [link](#classification-threshold) To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. This setting controls the minimum intent detection confidence required for an [intent match](/dialogflow/cx/docs/concept/intent#match) .If the confidence score for an intent match is less than the threshold value, then a [no-match event](/dialogflow/cx/docs/concept/handler#event-built-in) will be invoked. **Note:** Before adjusting this value, you should try adding [negative examples](/dialogflow/cx/docs/concept/intent#negative) .\n- **Training status**  [link](#training-status) Indicates whether the flow has been trained since the latest update to the flow data.\n- **Train NLU**  [link](#train-nlu) Use this button to manually train the flow.\n### Speech and IVR settings\nThe following speech settings are available:\n- **Text-to-Speech**  [link](#text-to-speech) - **Voice selection**  [link](#voice-selection) You can select the language and voice used for speech synthesis.You may enable [Custom voice](/text-to-speech/custom-voice/docs) for your agent by selecting the custom voice option from the voice selection dropbox and specify the custom voice name in the corresponding field. The custom voice name must follow the following pattern: `projects/` `` `/locations/` `` `/models/` `` .- If you are using telephony gateway, make sure the **Dialogflow Service Agent** service account`service-` `` `@gcp-sa-dialogflow.iam.gserviceaccount.com`is granted with \"AutoML Predictor\" in your custom voice project.\n- For regular API calls, make sure the service account used to call Dialogflow is granted with \"AutoML Predictor\" role in your custom voice project.\n- **Speech-to-Text**  [link](#speech-to-text) - **Enable auto speech adaptation**  [link](#auto-speech-adaptation) See [Auto speech adaptation](/dialogflow/cx/docs/concept/speech-adaptation#auto-adaptation) .\n- **Advanced speech settings**  [link](#advanced-speech-settings) **Note:** Advanced speech settings are only supported by [telephony integrations](/dialogflow/cx/docs/concept/integration) .This section provides additional, advanced settings for speech features. You can toggle these advanced settings off and on.These settings are available in agent settings (applies to entire agent), [flow settings](/dialogflow/cx/docs/concept/flow#settings) (applies to entire flow and overrides agent settings), [page settings](/dialogflow/cx/docs/concept/page#settings) (applies to page and overrides flow and agent settings), and [fulfillment settings](/dialogflow/cx/docs/concept/fulfillment#settings) (applies to fulfillment and overrides page, flow, and agent settings). A subset of these settings are available at each level, depending on the setting relevance for the level.Updated agent-level settings don't propagate to the flow, page, and fulfillment level when the **Customize** option is selected on these lower levels. If the **Customize** option emcompasses multiple settings and you want to update only some of them, you may also need to update other settings if you want them to be the same as the agent-level settings.- **Model selection (Speech-to-Text)**  [link](#stt-model-selection) Sets the speech model used for speech recognition. This setting is language-specific, so you can select different models for different languages. You can also check **Override request-level speech model** , which will cause the selected model to be used even if a runtime API call specifies a different model.For Dialogflow CX Phone Gateway, see [limitations](/dialogflow/cx/docs/concept/integration/phone-gateway#limits) .For more information, see [Speech models](/dialogflow/cx/docs/concept/speech-models) .\n- **End of speech sensitivity**  [link](#end-of-speech-sensitivity) Controls the sensitivity for recognizing end of speech in end-user audio input. The value ranges from 0 (low sensitivity, less likely to end speech) to 100 (high sensitivity, more likely to end speech). **Note:** This setting only supports the `en-US` [language](/dialogflow/cx/docs/reference/language) tag unless you check the **Enable advanced timeout-based end of speech sensitivity** setting.\n- **Enable advanced timeout-based end of speech sensitivity**  [link](#advanced-end-of-speech-sensitivity) If this setting is enabled, the **End of speech sensitivity** setting value is used as a gauge to establish a relative audio silence time-out to determine the end of speech.If this setting is disabled (the default), the **End of speech sensitivity** setting value is used to determine the end of speech by the ML model provided by Google Cloud Speech-To-Text.While the **End of speech sensitivity** setting supports only the `en-US` [language](/dialogflow/cx/docs/reference/language) tag by default, the **Enable advanced timeout-based end of speech sensitivity** setting allows for configuring end of speech sensitivity for all languages and speech models supported by Dialogflow.\n- **No speech timeout**  [link](#no-speech-timeout) The time duration in seconds for which Dialogflow will stop waiting for end-user audio input. The default is 5 seconds, and the maximum value is 60 seconds. For this timeout, Dialogflow invokes a [no-input event](/dialogflow/cx/docs/concept/handler#event-built-in) .\n- **Barge-in**  [link](#barge-in) When enabled, an end-user can interrupt Dialogflow response audio. When interrupted, Dialogflow will stop sending audio, and it will process the next end-user input.If there are multiple messages in the [message queue](/dialogflow/cx/docs/concept/fulfillment#queue) , and a message was queued by a fulfillment associated with a page, flow, or agent that has barge-in enabled, then all following messages in the queue will also have barge-in enabled. In this case, The integration will stop playing audio for all of the queued messages with barge-in enabled.\n- **Allow cancellation of partial response playback**  [link](#partial-response-cancel) When [partial response](/dialogflow/cx/docs/concept/fulfillment#partial-response) is enabled, this setting allows cancellation of a partial response playback. If a message in the [message queue](/dialogflow/cx/docs/concept/fulfillment#queue) is created by a fulfillment that allows cancellation, playback of the message is cancelled if another message is added to the queue. This is useful when you want an initial message to start playback, but for that playback to be cancelled if a working webhook produces another message before playback of the initial message completes.\n- **Audio export bucket**  [link](#audio-export-bucket) If supplied, any audio data associated with a request will be saved to the Cloud Storage bucket:| Audio Saved           | Applicable requests               |\n|:------------------------------------------------------|:-----------------------------------------------------------------------------|\n| End-user audio input         | DetectIntent, StreamingDetectIntent, AnalyzeContent, StreamingAnalyzeContent |\n| Text-to-speech (TTS) audio synthesized for a response | AnalyzeContent, StreamingAnalyzeContent          |Grant the **Storage Object Creator** role to the following service accounts in your project:- To the service account of the format `one-click@df-cx-` `` `-` `` `.iam.gserviceaccount.com` if you use a [partner built-in telephony integration](/dialogflow/cx/docs/concept/integration#telephony-partner-built-in) .\n- To the service account of the format `service-` `` `@gcp-sa-dialogflow.iam.gserviceaccount.com` if you use the [Dialogflow CX Phone Gateway](/dialogflow/cx/docs/concept/integration/phone-gateway) integration. To find this service account in IAM, check the **Include Google-provided role grants** option.\n### Multimodal\nSee [Call companion](/dialogflow/cx/docs/concept/call-companion) .\n### Share settings\nSee [Access control](/dialogflow/cx/docs/concept/access-control) .\n### Languages settings\nAdd additional language support to your agent. For the full list of languages, see the [language reference](/dialogflow/cx/docs/reference/language) .\n### Security settings\nSee [Security settings](/dialogflow/cx/docs/concept/security-settings) .\n### Advanced settings\nCurrently, the only advanced setting is for [sentiment analysis](/dialogflow/cx/docs/concept/sentiment) .\n## Export and restore an agent\n**Note:** Dialogflow ES and Dialogflow CX agent types are incompatible. You cannot restore an incompatible agent.\nYou can export an agent to a file, and restore an agent with that file.\nAn agent export includes all agent data except the following:\n- [Flow versions](/dialogflow/cx/docs/concept/version) : Only the draft flows are exported to file.\n- [Environments](/dialogflow/cx/docs/concept/version) : Custom environments are not exported to file.\nAn agent restore overwrites all target agent data (including all flow versions) except the following:\n- [Environments](/dialogflow/cx/docs/concept/version) : All custom environments remain unchanged in the target agent. Flow versions referenced by custom environments in the target agent will continue to exist, as long as the associated environments exist. However, these stale flow versions are not listed or selectable flow versions for the agent.\n- [Vertex AI Conversation Apps](/generative-ai-app-builder/docs/agent-intro) : The association to a Vertex AI Conversation App remains unchanged in the target agent. (In other words, the value of`engine`in [GenAppBuilderSettings](/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents#GenAppBuilderSettings) ) This means that data store agents can only be restored into other existing data store agents, because the resulting agent also needs to have an association to a Vertex AI Conversation App.\n- [Vertex AI Conversation Data Stores](/generative-ai-app-builder/docs/agent-usage) : All references to data stores will be overwritten in the target agent according to the following rules:- If the target agent isn't associated with an App, then it's not possible to restore an agent with data store references into it. Trying to do so results in an error message. To fix that, you can either [create a new data store agent](/generative-ai-app-builder/docs/agent-usage#create_a_data_store_agent) from scratch. (Alternatively, you can turn your existing agent into a data store agent by adding a data store [state handler](/dialogflow/cx/docs/concept/handler) to it. In this case you'll be guided through adding an associated App to your agent.)\n- If the target agent is associated with an App, then all the data store references will be updated upon restore: their Google Cloud project ID and location will be updated to match the App of the target agent. The collection ID and data store ID will remain unchanged. This means that you need to add data stores for all the IDs with matching types into the App of the target agent prior to the restore operation.\nExample: if the source agent refers to a data store named `projects/123/locations/eu-west2/collections/default_collection/dataStores/myDataStore1` and the App of the target agent is named `projects/321/locations/us-east1/collections/default_collections/engines/app123` , then the resulting data store reference in the target agent will become: `projects/321/locations/us-east1/collections/default_collection/dataStores/myDataStore1`\n**Note:** in the API and in the contents of the exported data, a Vertex AI Conversation App is called a GenAppBuilder Engine. For example in an exported JSON Package you can find the name of the engine in the `agent.json` file under the key `genAppBuilderSettings.engine` .\nWhen exporting, you can select the export file format. If you are using source control versioning for your agent data, you should [export in the JSON format](/dialogflow/cx/docs/reference/json-export) . When you restore an agent, Dialogflow automatically determines the file format.\nTo export or restore an agent:\n- Open the [Dialogflow CX Console](https://dialogflow.cloud.google.com/cx/projects) .\n- Choose the Google Cloud project for the agent.\n- Click the optionmenu for an agent in the list.\n- Click the **Export** or **Restore** button.\n- Follow instructions to complete.\n**Note:** To restore a data store agent, make sure that the target agent was created as a [data store agent](/generative-ai-app-builder/docs/agent-usage#create_a_data_store_agent) .\nSee the `export` and `restore` methods for the `Agent` type.\nIf the agent size exceeds the [maximum limit](/dialogflow/quotas#size) , use the Cloud Storage option for agent export and restore.\nIf you use GitHub, also see the [GitHub export/restore guide](/dialogflow/cx/docs/concept/github) .\n## Delete an agent\n**Caution:** Deleting an agent **cannot** be undone. [Export](#export) your agent to keep a backup if necessary.\nIn order to delete an agent, you need a role that provides full access or edit access. See the [access control guide](/dialogflow/cx/docs/concept/access-control) for more information.\nTo delete an agent:\n- Open the [Dialogflow CX Console](https://dialogflow.cloud.google.com/cx/projects) .\n- Choose the Google Cloud project for the agent.\n- Click the optionmenu for an agent in the list.\n- Click the deletebutton.\n- Confirm deletion in the dialog.\nSee the `delete` method for the `Agent` type.\nIf you [delete your project](/resource-manager/docs/creating-managing-projects#shutting_down_projects) , all Dialogflow CX agents and data associated with the project are deleted immediately.", "guide": "Dialogflow"}