{"title": "Dialogflow - Host your agent", "url": "https://cloud.google.com/dialogflow/cx/docs/tutorials/deploy/host", "abstract": "# Dialogflow - Host your agent\nThe final step of this tutorial is to host your Dialogflow agent. [App Engine](/appengine/docs) is used for hosting, because it is simple to set up and scales well. The [Dialogflow Messenger](/dialogflow/cx/docs/concept/integration/dialogflow-messenger) integration is used for an agent user interface.\n", "content": "## Project configuration\nIdeally, your Dialogflow agent and the App Engine instance are both in the same project. Also, you must enable the Cloud Build API.\n- Before creating the instance, select your project from the Google Cloud console. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- Enable the Cloud Build API for the project. [Enable the Cloud Build API](https://console.cloud.google.com/flows/enableapi?apiid=cloudbuild.googleapis.com) ## Environment setup\nYou need to install and configure some things in order to develop a Go application for App Engine. Follow any steps you haven't already completed at [Setting up your development environment](/appengine/docs/standard/go/setting-up-environment) .\n## Create the web service code\nThe example code for this tutorial is written in Go, but you can use any language supported by App Engine. Create the following file structure anywhere on your local machine:\n- `go-app/`: directory for your Go service.- `templates/`: directory for your Go HTML templates.- `index.html`: Go HTML template.\n- `app.yaml`: Your service's configuration settings.\n- `main.go`: Your application code.The next three sections provide content for the three files.\n### Contents of the index.html file\nThis Go HTML template file contains the HTML for the homepage. Populate this file with the following contents:\n```\n<!DOCTYPE html><html lang=\"en-US\">\u00a0 <head>\u00a0 \u00a0 <meta charset=\"utf-8\">\u00a0 \u00a0 <meta name=\"viewport\" content=\"width=device-width\">\u00a0 \u00a0 <title>Tutorial agent</title>\u00a0 </head>\u00a0 <body>\u00a0 \u00a0 <p>Open the chat window in the bottom right corner.</p>\u00a0 </body></html>\n```\n### Contents of the app.yaml file\nThis is a configuration file which specifies your service's runtime environment settings. You can reference the [Go 1.12+ Runtime Environment document](/appengine/docs/standard/go/runtime) to see the list of supported Go versions. Populate this file with the following contents:\n```\nruntime: go116 \u00a0# or another supported version\n```\n### Contents of the main.go file\nThis file contains your application code. Populate this file with the following contents:\n```\n// Package main is the main packagepackage mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"net/http\"\u00a0 \u00a0 \u00a0 \u00a0 \"os\"\u00a0 \u00a0 \u00a0 \u00a0 \"text/template\")var templates *template.Templatefunc init() {\u00a0 \u00a0 \u00a0 \u00a0 templates = template.Must(template.New(\"\").ParseGlob(\"templates/*\"))}// indexHandler handles the homepage.func indexHandler(w http.ResponseWriter, r *http.Request) {\u00a0 \u00a0 \u00a0 \u00a0 if r.URL.Path != \"/\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 http.NotFound(w, r)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 if err := templates.ExecuteTemplate(w, \"index.html\", nil); err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(err)\u00a0 \u00a0 \u00a0 \u00a0 }}func main() {\u00a0 \u00a0 \u00a0 \u00a0 // Register the handlers\u00a0 \u00a0 \u00a0 \u00a0 http.HandleFunc(\"/\", indexHandler)\u00a0 \u00a0 \u00a0 \u00a0 port := os.Getenv(\"PORT\")\u00a0 \u00a0 \u00a0 \u00a0 if port == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port = \"8080\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"Defaulting to port %s\", port)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"Listening on port %s\", port)\u00a0 \u00a0 \u00a0 \u00a0 if err := http.ListenAndServe(\":\"+port, nil); err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(err)\u00a0 \u00a0 \u00a0 \u00a0 }}\n```\n## Deploy your web service\nYour code is now ready to deploy. These steps use the [gcloud tool](/sdk/gcloud) for deployment:\n- Ensure that gcloud is configured with the same project as your Dialogflow agent. To check the project:```\ngcloud config get-value project\n```To change the project:```\ngcloud config set project YOUR_PROJECT\n```\n- In your `go-app` directory where your `app.yaml` file is located, deploy your web service to App Engine using the following command:```\ngcloud app deploy\n```The command will prompt you for a region. Be sure to select the same region as your Dialogflow agent. The command will output the `target url` value, which is the URL for your web service.\n- To launch your browser and view your web service, you can open the target URL from the previous step, or run the following command:```\ngcloud app browse\n```## Setup Dialogflow Messenger\n**Note:** Make sure [billing is enabled](/dialogflow/cx/docs/quick/setup#billing) on your project before testing the integration.\nTo set up unauthenticated access to your Dialogflow Messenger agent:\n- Go to the [Dialogflow CX Console](https://dialogflow.cloud.google.com/cx/projects) .\n- Choose your Google Cloud project.\n- Select your agent.\n- Select the **Manage** tab.\n- Click **Integrations** in the left sidebar menu.\n- Click **Connect** on **Dialogflow Messenger** .\n- A configuration dialog opens.\n- If the integration was previously setup for this agent, you will see embeddable HTML code. Regardless of whether you want what authenticated or unauthenticated, click the **Disable...** button at the bottom of the dialog, so you can reconfigure the settings in the next step.\n- Select an **Environment** .\n- Select **Unauthenticated API** .\n- Select a style.\n- Optionally restrict domain access.\n- Click **Enable the unauthenticated API** .\n- The dialog will show the embeddable HTML code that can be embedded on your website. Copy this code.\n- Click **Done** .\n## Embed the agent in your web service\nPaste the embed code you copied above in your `index.html` file. The `<script>` and `<df-messenger>` HTML elements should be in the `<body>` element of your page.\nDeploy your web service app again with gcloud. Once deployed, you can interact with your agent through the webpage by clicking the chat icon in the lower right corner.\nYou now have a fully deployed Dialogflow agent! Try having a conversation with the agent.\n## Cleanup\nWhile going through the steps of this tutorial, [you created billable resources](/dialogflow/cx/docs/tutorials/deploy#cost) . To avoid incurring additional charges to your Google Cloud account:\n- [Delete your database instance](/spanner/docs/create-manage-instances#delete-instance) .\n- Delete your function:```\ngcloud functions delete tutorial-telecommunications-webhook\n```\n- [Disable your app](/appengine/docs/standard/go/console#disabling_an_application) .\n- [Delete your agent](/dialogflow/cx/docs/concept/agent#del) ## More information\nFor more information about the steps above, see:\n- [Building a Go App on App Engine](/appengine/docs/standard/go/building-app) \n- [Interactions with an integration](/dialogflow/cx/docs/quick/integration)", "guide": "Dialogflow"}