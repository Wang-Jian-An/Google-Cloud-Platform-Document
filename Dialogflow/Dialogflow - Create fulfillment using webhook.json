{"title": "Dialogflow - Create fulfillment using webhook", "url": "https://cloud.google.com/dialogflow/es/docs/tutorials/sequences/create-fulfillment-using-webhook", "abstract": "# Dialogflow - Create fulfillment using webhook\nWebhook fulfillment in Dialogflow gives us a lot of control over the flow of our agent. In this tutorial, you need a webhook to validate the alphanumeric sequences collected in the \"Sequence\" intent. The webhook will loop that intent repeatedly to collect a long sequence in more manageable iterations.\n", "content": "## Create a webhook with the inline editor\nDialogflow has an inline editor in the console that allows you to directly write code, which then can be deployed to run as a webhook on .\nTo create a webhook using Dialogflow's inline editor, follow these steps:\n- Click the **Fulfillment** tab on the navigation bar to go to the fulfillment page.\n- Toggle the inline editor's button to ENABLED.\n- Delete the existing content in the`package.json`tab of the inline editor.\n- Copy and paste the JSON content below to the `package.json` tab of the inline editor:```\n{\u00a0 \"name\": \"DialogflowFirebaseWebhook\",\u00a0 \"description\": \"Firebase Webhook dependencies for a Dialogflow agent.\",\u00a0 \"version\": \"0.0.1\",\u00a0 \"private\": true,\u00a0 \"license\": \"Apache Version 2.0\",\u00a0 \"author\": \"Google Inc.\",\u00a0 \"engines\": {\u00a0 \u00a0 \"node\": \"10\"\u00a0 },\u00a0 \"scripts\": {\u00a0 \u00a0 \"lint\": \"semistandard --fix \\\"**/*.js\\\"\",\u00a0 \u00a0 \"start\": \"firebase deploy --only functions\",\u00a0 \u00a0 \"deploy\": \"firebase deploy --only functions\"\u00a0 },\u00a0 \"dependencies\": {\u00a0 \u00a0 \"firebase-functions\": \"^2.0.2\",\u00a0 \u00a0 \"firebase-admin\": \"^5.13.1\"\u00a0 }}\n```\n- Delete the existing code in the `index.js` tab of the inline editor. \n- Copy and paste the code below to the `index.js` tab of the inline editor:```\n/**\u00a0* Copyright 2020 Google Inc. All Rights Reserved.\u00a0*\u00a0* Licensed under the Apache License, Version 2.0 (the \"License\");\u00a0* you may not use this file except in compliance with the License.\u00a0* You may obtain a copy of the License at\u00a0*\u00a0* \u00a0 \u00a0 \u00a0http://www.apache.org/licenses/LICENSE-2.0\u00a0*\u00a0* Unless required by applicable law or agreed to in writing, software\u00a0* distributed under the License is distributed on an \"AS IS\" BASIS,\u00a0* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\u00a0* See the License for the specific language governing permissions and\u00a0* limitations under the License.\u00a0*/'use strict';const functions = require('firebase-functions');// TODO: set this to the minimum valid length for your sequence.// There's no logic in here to enforce this length, but once the// user has said this many digits, the slot-filling prompt will// also instruct the user to say \"that's all\" to end the slot-filling.const MIN_SEQUENCE_LENGTH = 10;exports.dialogflowFirebaseFulfillment = functions.https.onRequest((request, response) => {\u00a0 let dfRequest = request.body;\u00a0 let action = dfRequest.queryResult.action;\u00a0 switch (action) {\u00a0 \u00a0 case 'handle-sequence':\u00a0 \u00a0 \u00a0 handleSequence(dfRequest, response);\u00a0 \u00a0 \u00a0 break;\u00a0 \u00a0 case 'validate-sequence':\u00a0 \u00a0 \u00a0 validateSequence(dfRequest, response);\u00a0 \u00a0 \u00a0 break;\u00a0 \u00a0 default:\u00a0 \u00a0 \u00a0 response.json({\u00a0 \u00a0 \u00a0 \u00a0 fulfillmentText: `Webhook for action \"${action}\" not implemented.`\u00a0 \u00a0 \u00a0 });\u00a0 }});////// Helper functions/* Send an SSML response.\u00a0* @param request: Dialogflow WebhookRequest JSON with camelCase keys.\u00a0* \u00a0 \u00a0 See https://cloud.google.com/dialogflow/es/docs/reference/common-types#webhookrequest\u00a0* @param response: Express JS response object\u00a0* @param ssml: SSML string.\u00a0* @example: sendSSML(request, response, 'hello')\u00a0* \u00a0 \u00a0 Will call response.json() with SSML payload '<speak>hello</speak>'\u00a0*/function sendSSML(request, response, ssml) {\u00a0 ssml = `<speak>${ssml}</speak>`;\u00a0 if (request.originalDetectIntentRequest.source == 'GOOGLE_TELEPHONY') {\u00a0 \u00a0 // Dialogflow Phone Gateway Response\u00a0 \u00a0 // see https://cloud.google.com/dialogflow/es/docs/reference/rpc/google.cloud.dialogflow.v2beta1#google.cloud.dialogflow.v2beta1.Intent.Message.TelephonySynthesizeSpeech\u00a0 \u00a0 response.json({\u00a0 \u00a0 \u00a0 fulfillmentMessages: [{\u00a0 \u00a0 \u00a0 \u00a0 platform: 'TELEPHONY',\u00a0 \u00a0 \u00a0 \u00a0 telephonySynthesizeSpeech: {ssml: ssml}\u00a0 \u00a0 \u00a0 }]\u00a0 \u00a0 });\u00a0 }\u00a0 else {\u00a0 \u00a0 // Some CCAI telephony partners accept SSML in a plain text response.\u00a0 \u00a0 // Check your specific integration and customize the payload here.\u00a0 \u00a0 response.json({\u00a0 \u00a0 \u00a0 fulfillmentText: ssml\u00a0 \u00a0 });\u00a0 }}/* Extract an output context from the incoming WebhookRequest.\u00a0* @param request: Dialogflow WebhookRequest JSON with camelCase keys.\u00a0* \u00a0 \u00a0 See https://cloud.google.com/dialogflow/es/docs/reference/common-types#webhookrequest\u00a0* @param name: A string\u00a0* @return: The context object if found, or undefined\u00a0* @see: https://cloud.google.com/dialogflow/es/docs/reference/rpc/google.cloud.dialogflow.v2#google.cloud.dialogflow.v2.Context\u00a0* \u00a0 \u00a0 and note this webhook uses JSON camelCase instead of RPC snake_case.\u00a0* @example:\u00a0* \u00a0 \u00a0 // Modify an existing output content\u00a0* \u00a0 \u00a0 let context = getOutputContext(request, 'some-context');\u00a0* \u00a0 \u00a0 context.lifespanCount = 5;\u00a0* \u00a0 \u00a0 context.parameters.some_parameter = 'new value';\u00a0* \u00a0 \u00a0 response.json({\u00a0* \u00a0 \u00a0 \u00a0 fulfillmentText: 'new value set',\u00a0* \u00a0 \u00a0 \u00a0 outputContexts: [context]\u00a0* \u00a0 \u00a0 });\u00a0*/function getOutputContext(request, name) {\u00a0 return request.queryResult.outputContexts.find(\u00a0 \u00a0 \u00a0 context => context.name.endsWith(`/contexts/${name}`)\u00a0 );}////// Action handler functions/*\u00a0* Fulfillment function for:\u00a0* \u00a0 \u00a0 actions: handle-sequence\u00a0* \u00a0 \u00a0 intents: \"Sequence\", \"Sequence - Edit\"\u00a0* @param request: Dialogflow WebhookRequest JSON with camelCase keys.\u00a0* \u00a0 \u00a0 See https://cloud.google.com/dialogflow/es/docs/reference/common-types#webhookrequest\u00a0* @param response: Express JS response object\u00a0*/function handleSequence(request, response) {\u00a0 let parameters = request.queryResult.parameters;\u00a0 let isSlotFilling = !request.queryResult.allRequiredParamsPresent;\u00a0 let isEditing = getOutputContext(request, 'editing-sequence');\u00a0 console.log(request.queryResult.action + ': ' + JSON.stringify(parameters));\u00a0 if (isSlotFilling) {\u00a0 \u00a0 // Prompt the user for the sequence\u00a0 \u00a0 let verbatim = `<prosody rate=\"slow\"><say-as interpret-as=\"verbatim\">${parameters.existing_sequence}</say-as></prosody>`;\u00a0 \u00a0 if (!parameters.existing_sequence && !parameters.new_sequence) {\u00a0 \u00a0 \u00a0 // Initial prompt\u00a0 \u00a0 \u00a0 response.json({\u00a0 \u00a0 \u00a0 \u00a0 fulfillmentText: \"What is your sequence? Please pause after a few characters so I can confirm as we go.\"\u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 }\u00a0 \u00a0 else if (!isEditing) {\u00a0 \u00a0 \u00a0 // Confirm what the system heard with the user. We customize the response\u00a0 \u00a0 \u00a0 // according to how many sequences we've heard to make the prompts less\u00a0 \u00a0 \u00a0 // verbose.\u00a0 \u00a0 \u00a0 if (!parameters.previous_sequence) {\u00a0 \u00a0 \u00a0 \u00a0 // after the first input\u00a0 \u00a0 \u00a0 \u00a0 sendSSML(request, response,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `Say \"no\" to correct me at any time. Otherwise, what comes after ${verbatim}`);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 else if (parameters.existing_sequence.length < MIN_SEQUENCE_LENGTH) {\u00a0 \u00a0 \u00a0 \u00a0 // we know there are more characters to go\u00a0 \u00a0 \u00a0 \u00a0 sendSSML(request, response,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `${verbatim} What's next?`);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 else {\u00a0 \u00a0 \u00a0 \u00a0 // we might have all we need\u00a0 \u00a0 \u00a0 \u00a0 sendSSML(request, response,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `${verbatim} What's next? Or say \"that's all\".`);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 else {\u00a0 \u00a0 \u00a0 // User just said \"no\"\u00a0 \u00a0 \u00a0 sendSSML(request, response,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `Let's try again. What comes after ${verbatim}`);\u00a0 \u00a0 }\u00a0 }\u00a0 else {\u00a0 \u00a0 // Slot filling is complete.\u00a0 \u00a0 // Construct the full sequence.\u00a0 \u00a0 let sequence = (parameters.existing_sequence || '') + (parameters.new_sequence || '');\u00a0 \u00a0 // Trigger the follow up event to get back into slot filling for the\u00a0 \u00a0 // next sequence.\u00a0 \u00a0 response.json({\u00a0 \u00a0 \u00a0 followupEventInput: {\u00a0 \u00a0 \u00a0 \u00a0 name: 'continue-sequence',\u00a0 \u00a0 \u00a0 \u00a0 parameters: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 existing_sequence: sequence,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 previous_sequence: parameters.existing_sequence || ''\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 });\u00a0 \u00a0 // TODO: CHALLENGE: consider validating the sequence here.\u00a0 \u00a0 // The user has already confirmed existing_sequence, so if you find a unique\u00a0 \u00a0 // record in your database with this existing_sequence prefix, you could send\u00a0 \u00a0 // a followUpEventInput like 'validated-sequence' to skip to the next part\u00a0 \u00a0 // of the flow. You could either create a new intent for this event, or\u00a0 \u00a0 // reuse the \"Sequence - done\" intent. If you reuse the \"done\" intent, you\u00a0 \u00a0 // could add another parameter \"assumed_sequence\" with value\u00a0 \u00a0 // \"#validated-sequence.sequence\", then modify the validateSequence function\u00a0 \u00a0 // below to customize the response for this case.\u00a0 }}/*\u00a0* Fulfillment function for:\u00a0* \u00a0 \u00a0 action: validate-sequence\u00a0* \u00a0 \u00a0 intents: \"Sequence - Done\"\u00a0* @param request: Dialogflow WebhookRequest JSON with camelCase keys.\u00a0* \u00a0 \u00a0 See https://cloud.google.com/dialogflow/es/docs/reference/common-types#webhookrequest\u00a0* @param response: Express JS response object\u00a0*/function validateSequence(request, response) {\u00a0 let parameters = request.queryResult.parameters;\u00a0 // TODO: add logic to validate the sequence and customize your response\u00a0 let verbatim = `<say-as interpret-as=\"verbatim\">${parameters.sequence}</say-as>`;\u00a0 sendSSML(request, response, `Thank you. Your sequence is ${verbatim}`);}\n```\n- Click **DEPLOY** .\nYou should now be able to test the integration by calling the agent. If you haven't already, now would be a good time to set up one of the one-click [telephony integrations](/dialogflow/docs/integrations) from our partners, or set up the Dialogflow Phone Gateway to test your agent over the phone.\n## Understanding the code\nAs the entrypoint to the webhook, the `dialogflowFirebaseFulfillment` function here is called everytime webhook is triggered. With each request, Dialogflow sends the \"action\" name you specified in the Dialogflow console for an intent. The code uses this action name to determine what webhook function to call, `handleSequence` or `validateSequence` .\n### Handle Sequence\n`handleSequence` is the core function for this tutorial. It is responsible for all aspects of the sequence slot-filling including:\n- Speaking the initial instructions when a session first enters the intent.\n- Repeating the sequence back before prompting for the next set.\n- Telling end-users how to correct the bot.\n- Recognizing when there are enough digits for a valid sequence and telling the end-user how to finalize the input (see `MIN_SEQUENCE_LENGTH' in the code).\n- Looping the slot-filling to collect multiple partial sequences.\n- Concatenating the partial sequences together into one long sequence.\n### Validate Sequence\n`validateSequence` is where you'll want to add a connection to your data store to validate the final sequence and return a custom message to the user based on that data. If you are building an order lookup agent, for example, you might customize the response here to say:\n`Thank you. Your order ${verbatim} will arrive on ${lookup.date} and will ${lookup.require_signature ? '' : 'not'} require a signature.`\nWhere `lookup` is some object you found in your data store for this order.\n### Helper functions\nThis example does not use any Dialogflow-specific dependencies. Instead, follow the [WebhookRequest reference](https://cloud.google.com/dialogflow/es/docs/reference/common-types#webhookrequest) for what to expect in `request.body` , and the [WebhookResponse reference](/dialogflow/es/docs/reference/common-types#webhookresponse) for what to respond with `response.json({...})` .\nThe code includes two helper functions to make it easier to:\n- Send the proper response JSON for the current platform by passing a string to`sendSSML`.\n- Look for an active Dialogflow context from the request by passing the context name to`getOutputContext`.## Further improvement\nThis should get you started on using webhook for advanced use-cases. You designed an agent that can loop a sequence prompt while an end-user speaks their sequence, reassuring along the way that the virtual agent is hearing them properly.\nHere are some ideas for improving the experience even more:\n- Change some of the webhook responses to match your brand. For example, instead of the generic \"What is your sequence?...\" prompt, you could edit the code to say \"What is your order number? You can find it on ...\" instead.\n- Consider adding another output context to the \"Sequence - Done\" intent, then create some new intents under that input context to allow users to ask follow-up questions about their order.\n- If you want to dive further into this use-case, do check out the`TODO: CHALLENGE`in the sample code above for how you might improve this experience even further for your users.", "guide": "Dialogflow"}