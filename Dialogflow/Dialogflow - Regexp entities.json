{"title": "Dialogflow - Regexp entities", "url": "https://cloud.google.com/dialogflow/es/docs/entities-regexp", "abstract": "# Dialogflow - Regexp entities\nSome entities need to match patterns rather than specific terms. For example, national identification numbers, IDs, license plates, and so on. With , you can provide [regular expressions](https://github.com/google/re2/wiki/Syntax) for matching.\n", "content": "## Where to find this data\nWhen building an agent, it is most common to use the Dialogflow ES Console ( [visit documentation](/dialogflow/docs/console) , [open console](https://dialogflow.cloud.google.com) ). The instructions below focus on using the console. To access entity data:\n- Go to the [Dialogflow ES Console](https://dialogflow.cloud.google.com) .\n- Select an agent.\n- Select **Entities** in the left sidebar menu.\nIf you are building an agent using the API instead of the console, see the [EntityTypes reference](/dialogflow/docs/reference/common-types#entitytypes) . The API field names are similar to the console field names. The instructions below highlight any important differences between the console and the API.\n## Compound regular expressions\nEach regexp entity corresponds to a single pattern, but you can provide multiple regular expressions if they all represent variations of a single pattern. During agent training, all regular expressions of a single entity are combined with the alternation operator ( `|` ) to form one .\nFor example, if you provide the following regular expressions for a phone number:\n- `^[2-9]\\d{2}-\\d{3}-\\d{4}$`\n- `^(1?(-?\\d{3})-?)?(\\d{3})(-?\\d{4})$`\nThe compound regular expression becomes:\n- `^[2-9]\\d{2}-\\d{3}-\\d{4}$|^(1?(-?\\d{3})-?)?(\\d{3})(-?\\d{4})$`\nThe ordering of regular expressions matters. Each of the regular expressions in the compound regular expression are processed in order. Searching stops once a valid match is found. For example, for an end user expression of \"Seattle\":\n- `Sea|Seattle`matches \"Sea\"\n- `Seattle|Sea`matches \"Seattle\"## Special handling for speech recognition\n**Note:** Enabling [auto speech adaptation](/dialogflow/es/docs/speech-adaptation) is recommended when using regexp entities. Also see the speech adaptation [regexp-specific guidelines](/dialogflow/es/docs/speech-adaptation#regexp-entities) .\nIf your agent uses speech recognition (also known as audio input, speech-to-text, or STT), your regular expressions will need special handling when matching letters and numbers. A spoken end-user utterance is first processed by the speech recognizer before entities are matched. When an utterance contains a series of letters or numbers, the recognizer may pad each character with spaces. In addition, the recognizer may interpret digits in word form. For example, an end-user utterance of \"My ID is 123\" may be recognized as any of the following:\n- \"My ID is 123\"\n- \"My ID is 1 2 3\"\n- \"My ID is one two three\"\nTo accommodate three digit numbers, you could use the following regular expressions:\n```\n\\d{3}\n```\n```\n\\d \\d \\d\n```\n```\n(zero|one|two|three|four|five|six|seven|eight|nine) (zero|one|two|three|four|five|six|seven|eight|nine) (zero|one|two|three|four|five|six|seven|eight|nine)\n```\n## Create a regexp entity\nTo create a regexp entity:\n- Open an existing entity or create a new one.\n- Check **Regexp entity** .\n- Enter one or more regular expressions in the entries table.\n- Click **Save** .If you are using the API to create or update entities, use `KIND_REGEXP` for the entity kind field.\n## Limitations\nThe following limitations apply:\n- [Fuzzy matching](/dialogflow/docs/entities-fuzzy) cannot be enabled for regexp entities. These features are mutually exclusive.\n- Each agent can have a maximum of 50 regexp entities.\n- The [compound regular expression](#compound) for an entity has a maximum length of 1024 characters.", "guide": "Dialogflow"}