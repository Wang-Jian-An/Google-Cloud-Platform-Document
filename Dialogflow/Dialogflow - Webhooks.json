{"title": "Dialogflow - Webhooks", "url": "https://cloud.google.com/dialogflow/cx/docs/concept/webhook", "abstract": "# Dialogflow - Webhooks\nA webhook can either be a or a . With a standard webhook, the request and response fields are defined by Dialogflow. With a flexible webhook, you define the request and response fields.\n", "content": "## Standard webhooks\nWith standard webhooks, you use Dialogflow-defined request and response messages. The request message provides many details about the session. For example, current active page, recent matched intent, session parameter values, and agent-defined responses are all included.\n### Standard webhook request\nWhen a [fulfillment](/dialogflow/cx/docs/concept/fulfillment) with a webhook is called, Dialogflow sends an HTTPS POST webhook request to your webhook service. The body of this request is a `WebhookRequest` JSON object with information about the session.\nSome [integrations](/dialogflow/cx/docs/concept/integration) populate the `WebhookRequest.payload` field with additional information. For example, the [Dialogflow CX phone gateway integration](/dialogflow/cx/docs/concept/integration/phone-gateway#payload) provides the end-user caller ID.\nSee the [WebhookRequest(V3)](/dialogflow/cx/docs/reference/rest/v3/WebhookRequest) or [WebhookRequest(V3Beta1)](/dialogflow/cx/docs/reference/rest/v3beta1/WebhookRequest) reference documentation for details.\n### Standard webhook response\nOnce your webhook service receives a webhook request, it needs to send a webhook response. The following limitations apply to your response:\n- The response must occur within a timeout that you configure when [creating the webhook resource](#create) , otherwise the request will time out.\n- The response must be less than or equal to 64 KiB in size.\nSee the [WebhookResponse(V3)](/dialogflow/cx/docs/reference/rest/v3/WebhookResponse) or [WebhookResponse(V3Beta1)](/dialogflow/cx/docs/reference/rest/v3beta1/WebhookResponse) reference documentation for details.\n### Standard webhook resource settings\nThe following describes webhook resource settings for standard webhooks:\n| Term       | Definition                                                       |\n|:-----------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Display name     | The name shown in the console for the webhook.                                              |\n| Webhook timeout    | When Dialogflow sends a webhook request to your webhook service, it may timeout while waiting for a response. This setting controls that timeout in seconds. If a timeout occurs, Dialogflow invokes a webhook.error.timeout event. |\n| Type       | Set to Service directory if you are using service directory for private network access, otherwise set to Generic web service.                          |\n| Webhook URL     | Provide the URL address for your webhook service.                                             |\n| Subtype      | Set to Standard                                                      |\n| Environment-specific webhook | You can provide environment-specific webhooks.                                              |\n| Authentication    | See the authentication section.                                                  |\n| Custom CA certificate  | This is used to upload custom CA certificates.                                              |\n## Flexible webhooks\nWith flexible webhooks, you define the request HTTP method, request URL parameters, and fields of the request and response messages. The request can only provide selected parameter values, and the response can only provide parameter override values. This limitation is actually beneficial, because it simplifies the interface between the agent and the webhook. There is rarely a need to communicate anything other than session parameter values between an agent and a webhook. It also simplifies your webhook implementation, because the request and response messages only contain what you need, and you can provide unique webhook messages for various scenarios.\n### Flexible webhook request\nWhen creating the webhook resource for your agent, you can specify the following for webhook requests:\n- The HTTP method used for webhook requests sent to your webhook service.\n- Session parameter values that Dialogflow should send to your webhook service using the URL.\n- If you choose`POST`,`PUT`, or`PATCH`as the method, you can specify session parameter values that Dialogflow should send to your webhook service through the request JSON body.\nTo send session parameter values using the request URL or JSON body, use [parameter references](/dialogflow/cx/docs/concept/parameter#use) as you normally would. You do not need to URL-escape the parameter reference, and you do not wrap the reference in quotations. At runtime, Dialogflow will URL-escape the parameter value as needed. A list or composite value will be provided as JSON.\nWhen using a parameter reference in the JSON body, you must wrap the reference in quotations, regardless of the parameter's type. If the parameter is actually a numeric scalar, list, or composite value, Dialogflow will remove the quotes when sending the request at runtime to preserve the parameter's datatype. String scalar types will remained quoted. If a numeric scalar, list, or composite value is referenced within a string value (for example: \"This is a number: $session.params.size\"), the parameter will be treated as a string (\"This is a number: 3\").\nFor example, you can provide the `fruit` and `size` session parameter values to the request URL like this:\n```\nhttps://your-webhook-service.com/handler?f=$session.params.fruit&s=$session.params.size\n```\nAnd, to the request JSON body like this:\n```\n{\u00a0 \"fruitParameter\": \"$session.params.fruit\",\u00a0 \"sizeParameter\": \"$session.params.size\"}\n```\n### Flexible webhook response\nWhen creating the webhook resource for your agent, you can specify session parameters that Dialogflow should set to specific fields of the webhook response at runtime.\nThe following limitations apply to your response:\n- The response must occur within a timeout that you configure when [creating the webhook resource](#create) , otherwise the request will time out.\n- The response must be less than or equal to 64 KiB in size.\nUse the following format to specify a scalar, list, or composite field:\n```\n$.fully.qualified.path.to.field\n```\nFor example, consider the following JSON response:\n```\n{\u00a0 \"routes\" : [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"legs\" : [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"distance\" : {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"text\" : \"2,064 mi\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"value\" : 3321004\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\nTo specify the \"value\" field, use the following:\n```\n$.routes[0].legs[0].distance.value\n```\n### Flexible webhook resource settings\nThe following describes webhook resource settings for flexible webhooks:\n| Term       | Definition                                                       |\n|:-----------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Display name     | The name shown in the console for the webhook.                                              |\n| Webhook timeout    | When Dialogflow sends a webhook request to your webhook service, it may timeout while waiting for a response. This setting controls that timeout in seconds. If a timeout occurs, Dialogflow invokes a webhook.error.timeout event. |\n| Type       | Set to Service directory if you are using service directory for private network access, otherwise set to Generic web service.                          |\n| Webhook URL     | Provide the URL address for your webhook service, which may include references to session parameters.                                |\n| Subtype      | Set to Flexible                                                      |\n| Method      | Set the HTTP method for the webhook request.                                              |\n| Request body     | Provide the request JSON body as described above.                                             |\n| Response configuration  | Provide the session parameters that should be set to response fields as described above.                                   |\n| Environment-specific webhook | You can provide environment-specific webhooks.                                              |\n| Authentication    | See the authentication section.                                                  |\n| Custom CA certificate  | This is used to upload custom CA certificates.                                              |\n## Webhook service requirements\nThe following requirements must be met by your webhook service:\n- It must handle HTTPS requests. HTTP is not supported. If you host your webhook service on Google Cloud Platform using a [Compute](/products/compute) or [Serverless Computing](/serverless) solution, see the product documentation for serving with HTTPS. For other hosting options, see [Get an SSL certificate for your domain](https://support.google.com/domains/answer/7630973) .\n- Its URL for requests must be publicly accessible, unless it is hosted as a [Cloud Function](#gcf) or it is accessed as a [Service directory](#sd) webhook.\n- It must handle requests and responses as described in the [standard webhook](#standard) or [flexible webhook](#flexible) section.\n- If your agent does not integrate with [Service Directory private network access](/dialogflow/cx/docs/concept/webhook#sd) , webhook calls are considered outside the service perimeter and are blocked when enabling VPC Service Controls. Limited endpoints are supported by **Service Directory** ; refer to [Service Directory](/service-directory/docs/private-network-access-overview) for details.## Authentication\n**Note:** Dialogflow cannot make any guarantees about IP ranges for machines that send webhook requests. Rather than restricting access via IP range, you should use one of the authentication methods listed below.\nIt's important to secure your webhook service, so that only you or your Dialogflow agent are authorized to make requests. This is configured when [creating a webhook resource](#create) . Dialogflow CX supports the following mechanisms for authentication:\n| Term         | Definition                                                                                |\n|:--------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Authentication headers    | For webhook settings, you can specify optional HTTP header key-value pairs. If supplied, Dialogflow adds these HTTP headers to webhook requests. It is common to provide a single pair with a key of authorization. The header values support session parameter references and system function parsing like in static response messages. |\n| Basic auth with username and password | For webhook settings, you can specify optional login username and password values. If supplied, Dialogflow adds an authorization HTTP header to webhook requests. This header is of the form: \"authorization: Basic <base 64 encoding of the string username:password>\".                 |\n| Third-party OAuth      | You can specify the Third-party OAuth configuration so that Dialogflow exchanges an access token from the OAuth provider and adds it in the authorization HTTP header. Only client credential flow is supported.                               |\n| Service agent access tokens   | You can select access token in Service agent auth to use service agent access tokens for authentication. This can be used to access other Google Cloud APIs.                                            |\n| Service agent ID tokens    | You can select ID token in Service agent auth to use service agent ID tokens for authentication. This can be used to access Cloud Function and Cloud Run services. If no other authentication options are used, this is enabled by default.                        |\n| Mutual TLS authentication    | See the Mutual TLS authentication documentation.                                                                       |\n**Note:** If multiple authentication options are enabled, higher priority options take precedence. Priority order of authentication options: **Authentication headers** , **Basic Auth** , **Third-party OAuth** , **Service Agent Auth** .\n## HTTPS certificate verification\nDialogflow by default uses Google's default trust store to verify HTTPS certificates. If you intend to use certificates not recognized by Google's default trust store for your HTTPS server, such as self-signed certificates or custom root certificates, please refer to [Custom CA certificates](/dialogflow/cx/docs/concept/custom-ca) .\n## Environment-specific webhooks\nIf you are using [environments](/dialogflow/cx/docs/concept/version) to isolate production systems from development systems (recommended), you can configure your webhooks to be environment-specific. For each webhook resource you define, you can provide unique URL and authentication settings for each environment that you have defined for the agent.\nThis allows you to safely develop and test your webhook code updates before deploying them to production.\n## Create or edit webhook resources\nOnce you have a running, you need to create a in your agent that has connectivity and authentication information. After creation, you can also edit webhook resource settings at any time.\nTo create or edit a webhook resource:\n- Open the [Dialogflow CX Console](https://dialogflow.cloud.google.com/cx/projects) .\n- Choose your Google Cloud project.\n- Select your agent.\n- Select the **Manage** tab.\n- Click **Webhooks** .\n- Click **Create** or click a webhook resource in the list to edit.\n- Enter [standard webhook resource settings](#settings) or [flexible webhook resource settings](#flexible-settings) .\n- Click **Save** .\nTo create a webhook resource, see the `create` method for the `Webhook` type. To edit a webhook resource (except for environment-specific settings), see the `patch` or `update` method for the `Webhook` type. \nTo edit the environment-specific settings for a webhook, see the `patch` or `update` method for the `Environment` type.\n## Webhook errors\nIf your webhook service encounters an error while handling a webhook request, your webhook code should return one of the following HTTP status codes:\n- `400`Bad Request\n- `401`Unauthorized\n- `403`Forbidden\n- `404`Not found\n- `500`Server fault\n- `503`Service Unavailable\nIn any of the following error situations, Dialogflow invokes a webhook error or timeout [built-in event](/dialogflow/cx/docs/concept/handler#event-built-in) and continues processing as usual:\n- Response timeout exceeded.\n- Error status code received.\n- Response is invalid.\n- Webhook service is unavailable.\nIn addition, if the webhook service call was triggered by a detect intent API call, the `queryResult.webhookStatuses` field in the detect intent response contains the webhook status information.\n## Using Cloud Functions\n**Note:** This section describes how to use Cloud Functions for Dialogflow webhooks. Keeping your functions secure is recommended. However, if you choose to authenticate with URL-based username and password, or HTTP headers, you should [allow unauthenticated access](/functions/docs/securing/managing-access-iam#allowing_unauthenticated_http_function_invocation) to your function.\nDialogflow integrates with [Cloud Functions](/functions/docs) , so you can easily create a secure, serverless webhook. If you create a function that resides in the same project as your agent, your agent can securely call your webhook without needing any special configuration.\nHowever, there are two situations in which you must manually setup this integration:\n- The **Dialogflow Service Agent** [service account](/iam/docs/understanding-service-accounts) with the following address must exist for your agent project:```\nservice-agent-project-number@gcp-sa-dialogflow.iam.gserviceaccount.com\n```This special service account and the associated key is normally created automatically when you create the first agent for a project. If your agent was created before November 01, 2020, you may trigger creation of this special service account:- Create a new agent for the project.\n- Execute the following command:```\ngcloud beta services identity create --service=dialogflow.googleapis.com --project=agent-project-id\n```\n- If your webhook function resides in a different project than the agent, you must provide the **Cloud Functions Invoker** [IAM role](/iam/docs/understanding-roles) to the **Dialogflow Service Agent** service account in your function's project.## Using containerized webhooks and the Go ezcx framework\nIf you would like to implement a containerized webhook using Go, see the [Go ezcx framework](https://github.com/googleCloudPlatform/ezcx) . This framework can simplify many of the steps required when creating a webhook.\n## Using Service Directory for private network access\nDialogflow integrates with [Service Directory private network access](/service-directory/docs/private-network-access-overview) , so it can connect to webhook targets inside your VPC network. This keeps the traffic within the Google Cloud network and enforces [IAM](/iam/docs/overview) and [VPC Service Controls](/vpc-service-controls/docs/overview) .\n**Note:** Using Cloud Functions for Dialogflow webhooks is currently not supported when in VPC Service Controls perimeter or in Service Directory.\nTo set up a webhook targeting a private network:\n- Follow [Service Directory private network configuration](/service-directory/docs/configuring-private-network-access) to configure your VPC network and Service Directory endpoint. **Note:** Dialogflow caches Service Directory information for 90 seconds. This means that if you update the Service Directory endpoint, it will take 90 seconds for the change to occur. In addition, if you are setting up multiple endpoints for redundancy, Dialogflow might send traffic through a failing endpoint for 90 seconds.\n- The **Dialogflow Service Agent**  [service account](/iam/docs/understanding-service-accounts) with the following address must exist for your agent project:```\nservice-agent-project-number@gcp-sa-dialogflow.iam.gserviceaccount.com\n```Grant the **Dialogflow Service Agent** service account the following IAM roles:- `servicedirectory.viewer`of the Service Directory project\n- `servicedirectory.pscAuthorizedService`of the network project\n- Provide Service Directory Service along with the URL and optional authentication information when creating the webhook.\nSee the `serviceDirectory` field for the `Webhook` type. \nTo troubleshoot issues, you can set up a [private uptime check](/monitoring/uptime-checks/private-checks) to check that your Service Directory is correctly configured.\n## Service agent auth\nDialogflow can generate an [ID token](/docs/authentication/token-types#id) or [access token](/docs/authentication/token-types#access) using [Dialogflow service agent](/iam/docs/service-agents#dialogflow-service-agent) .\nThe token is added in the authorization HTTP header when Dialogflow calls a webhook.\n### ID token\nAn ID token can be used to access Cloud Function and Cloud Run services after you grant Invoker role to\n```\nservice-agent-project-number@gcp-sa-dialogflow.iam.gserviceaccount.com\n```\nAny webhook can also optionally validate the token using Google client libraries or open source libraries like [github.com/googleapis/google-auth-library-nodejs](https://github.com/googleapis/google-auth-library-nodejs) .\n### Access token\nAn access token can be used to access other Google Cloud APIs after you grant required roles to\n```\nservice-agent-project-number@gcp-sa-dialogflow.iam.gserviceaccount.com\n```\n## Samples and troubleshooting\nSee the [webhook how-to guide](/dialogflow/cx/docs/how/webhook) .", "guide": "Dialogflow"}