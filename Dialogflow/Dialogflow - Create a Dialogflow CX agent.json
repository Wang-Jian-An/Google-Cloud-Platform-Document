{"title": "Dialogflow - Create a Dialogflow CX agent", "url": "https://cloud.google.com/dialogflow/cx/docs/quick/build-agent", "abstract": "# Dialogflow - Create a Dialogflow CX agent\n# Create a Dialogflow CX agent\nThis guide shows you how to use the Dialogflow CX Console to build and test a simple shirt ordering agent. When interacting with this agent, you can ask for the store location, get store hours, or make a shirt order.\nYour completed agent for this guide will be graphed by the console like the following:", "content": "## Before you beginYou should do the following before reading this guide:- Read [Dialogflow CX basics](/dialogflow/cx/docs/basics) .\n- Perform [setup steps](/dialogflow/cx/docs/quick/setup) .\n## Create an agentCreate a new agent for this guide:- Open the [Dialogflow CX Console](https://dialogflow.cloud.google.com/cx/projects) .\n- Create or choose a project.\n- Click **Create agent** .\n- Select **Build your own** .\n- Complete the form for basic agent settings:- You can choose any display name.\n- Select your preferred [location](/dialogflow/cx/docs/how/region#avail) . Click the **Edit** button if you want to change advanced [location settings](/dialogflow/cx/docs/how/region#location-settings) .\n- Select your preferred time zone.\n- Select the default language for your agent.\n- Optionally enable Stackdriver logging.\n- Click **Save** .\n## Optional agent importThis guide walks you through the steps to build a simple shirt ordering agent. If you would like to skip the console steps, you can [download the agent](/static/dialogflow/cx/docs/data/agent-shirts-1-flow.zip) and [import it](/dialogflow/cx/docs/concept/agent#export) .## Default flow and intentsThe following flow and intents are created automatically for a new agent. You can find the intents by clicking **Manage** , then **Intents** . You can find the flow by clicking **Build** .\n| Term     | Definition                                                             |\n|:------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Default Welcome Intent | The Default Welcome Intent has simple training phrases like \"Hi\" or \"Hello\" that are meant to match initial end-user input. You can edit this intent as desired.                       |\n| Default Negative Intent | The Default Negative Intent can be used to add training phrases to this intent that act as negative examples.                                    |\n| Default Start Flow  | The Default Start Flow can be used as your only flow. It is the only flow that will be used in this guide. For more complex agents, you can add more flows. This flow has a default intent route with the Default Welcome Intent as an intent requirement. |\n### Test the default welcome response messageThe default flow and intents can handle a basic conversation with only a welcome message. To test your new agent:- Click the **Test Agent** button to open the simulator.\n- Enter`hello`in the text entry and press enter.\n- The agent responds with a default welcome response.\n- Close the simulator.\nThe following steps were taken by the agent for this end-user input:- When you provided input, the [Default Start Flow](/dialogflow/cx/docs/concept/flow#start) was the active flow, and the [flow's start page](/dialogflow/cx/docs/concept/flow#start-page) was the active page. Each of the state handlers applied to the active flow were [in scope](/dialogflow/cx/docs/concept/handler#scope) , so the agent evaluated them.\n- One of the evaluated routes has the **Default Welcome Intent** as an intent requirement. Your input matched this intent, so the route was called.\n- The called route has several fulfillment response messages. The agent picked one at random and added it to the [response queue](/dialogflow/cx/docs/concept/fulfillment#queue) .\n- The called route has no transition target, so the active flow and page did not change.\n- The agent responded with the contents of the response queue.\n### Edit the welcome response messageYou can change this welcome message. To edit the welcome response message:- Click the **Build** tab.\n- Select the **Default Start Flow** in the **Flows** section.\n- Click the **Start** node in the graph. This is the start page for the **Default Start Flow** .\n- Find the intent route with the **Default Welcome Intent** as an intent requirement and click it. This opens a panel to edit the intent route information.\n- Find the fulfillment section and delete all response messages, then add`Hello, this is a shirt ordering virtual agent. How can I help you?`as the only response.\n- Click **Save** .\n- Close the intent route editing panel.### Test the updated welcome response messageTo test your updated response:- Click the **Test Agent** button to open the simulator.\n- Enter`hello`in the text entry and press enter.\n- The agent responds with your new message.\n- Close the simulator.\n## Store location pageA Dialogflow CX conversation (session) can be described and visualized as a [state machine](https://en.wikipedia.org/wiki/Finite-state_machine) . The states of a CX session are represented by [pages](/dialogflow/cx/docs/concept/page) . So far, you only have one page, so the agent is not very useful. In this section, you create another page that handles questions about the store's location.\n### Create the location intentAn [intent](/dialogflow/cx/docs/concept/intent) categorizes an end-user's intention for one conversation turn. To create an intent that is matched when end-user input requests the store's location:- Select the **Manage** tab.\n- Click **Intents** .\n- Click **Create** .\n- Enter`store.location`for the intent display name.\n- Enter the following training phrases:- `Where is the store?`\n- `Directions`\n- `Tell me the address`\n- `Where do I pick up my order?`\n- `How do I get there?`\n- `Where is the store located?`\n- `What street are you on?`\n- `What is your address?`\n- `How do I get to your store?`\n- `Where are you located?`\n- Click **Save** .### Create the location pageNow create the new page. You can add an to this page that gets called whenever the page becomes active. This entry fulfillment should have a response message that provides the store's location. To create the store location page:- Click the **Build** tab.\n- Select the **Default Start Flow** in the **Flows** section.\n- Click the addbutton in the **Pages** section. A text entry for the page display name appears.\n- Enter`Store Location`for the display name of the page and press enter.\n- Click the optionsbutton next to the page display name.\n- Select **Edit** to open the page editing panel.\n- Find **Entry fulfillment** and click **Edit fulfillment** .\n- Enter`Our store is located at 1007 Mountain Drive, Gotham City, NJ.`in the **Agent Says** field.\n- Click **Save** .\n- Close the page editing panel.### Add a location intent route to the flowNow you need to create a route that has the store location page as a transition target. When this route is called, the session transitions to the store location page. This route is applied to the **Default Start Flow** , so it is in scope as long as the flow is active. For a single-flow agent, this means that the route is always in scope. At any point in the conversation, the end-user can ask for the store location, and this route will be called.\nTo create this route:- Click the **Build** tab.\n- Select the **Default Start Flow** in the **Flows** section.\n- Click the **Start** node in the graph. This is the start page for the **Default Start Flow** .\n- Add the following intent route:- **Intent** :`store.location`\n- **Transition Page** :`Store Location`\n- Click **Save** .\n- Close the intent route editing panel.\nWhen you close the editing panel, notice that your new page has a node on the graph. The arrow from the **Start** node to the **Store Location** node indicates how the session can transition from node to node.\n### Test the store location pageTo test your page:- Click the **Test Agent** button to open the simulator.\n- Enter`What is the store location?`and press enter.\n- The agent provides the address.\n- Close the simulator.\nThe following steps were taken by the agent for the end-user input:- When you provided input, the [Default Start Flow](/dialogflow/cx/docs/concept/flow#start) was the active flow, and the [flow's start page](/dialogflow/cx/docs/concept/flow#start-page) was the active page. Each of the state handlers applied to the active flow were [in scope](/dialogflow/cx/docs/concept/handler#scope) , so the agent evaluated them.\n- One of the evaluated routes has **store.location** as an intent requirement. Your input matched this intent, so the route was called.\n- The called route has no fulfillment response messages, so it added nothing to the response queue.\n- The called route has a transition target, so the active page changed to the **Store Location** page.\n- The **Store Location** page has an entry fulfillment, so the response message for the fulfillment was added to the response queue (the address).\n- The agent responded with the contents of the response queue.\n## Store hours page using inline creationIn this section, you create a **Store Hours** page that handles end-user questions about store hours. In previous sections, you created pages and intents from the **Build** and **Manage** tabs. This section shows you a faster way of creating these types with inline creation.\nTo inline create an intent route, intent, and page:- Click the **Start** node in the graph.\n- Click the **Intent route** addbutton. The intent route editing panel opens.\n- In the **Intent** section, select **New intent** . The intent editing panel opens.\n- Create a `store.hours` intent with the following training phrases:- `What are your store hours?`\n- `What time do you close?`\n **Note:** Outside of this example, production agents must have a minimum of 10 training phrases per intent.\n- Click **Save** to save the intent. The intent editing panel closes.\n- Scroll down to the **Transition** section in the intent route editing panel.\n- For **Page** transition, select **New page** .\n- Enter `Store Hours` in the text entry that appears.\n- Click **Save** . The new page appears on the graph, because there is now a transition that leads to it.\n- Close the intent route editing panel.\n- Add an entry fulfillment that provides the store hours, similar to steps taken for **Store Location** .\n- Close any open editing panels.\n## Order item pageNext, you will create a page that uses [form parameters](/dialogflow/cx/docs/concept/parameter#form) . When the end-user requests a new shirt order, the session will transition to this page. When active, this page collects a size and color for the shirt order.\n### Create a custom entity type for shirt size [Entity types](/dialogflow/cx/docs/concept/entity) are used to control how data from end-user input is extracted. Dialogflow provides predefined system entities that can match many common types of data. For example, there are system entities for matching dates, times, colors, email addresses, and so on. You can also create your own custom entities for matching custom data.\nFor this agent, you can use a system entity for the shirt color, but you need to create a custom entity for the shirt size. The size entity type should have the following entity entries:\n| Entity | Synonyms     |\n|:---------|:-------------------------|\n| small | small, tiny, little  |\n| medium | medium, regular, average |\n| large | large, big, giant  |\nTo create this entity:- Select the **Manage** tab.\n- Click **Entity Types** .\n- Click **+Create** .\n- Set the display name to`size`.\n- Add the entity entries listed in the table above.\n- Click **Save** .\n### Create an order intent with intent parametersYou need an intent that is matched when the end-user requests a new shirt order. This intent should also optionally capture the desired shirt color and/or size provided by the end-user in case they provide that info up front.\n [Parameters](/dialogflow/cx/docs/concept/parameter) are used to capture and reference values that have been supplied by the end-user during a session. Each parameter has a display name and an entity type. Unlike raw end-user input, parameters are structured data that can easily be used to perform some logic or generate responses.\nYou control how end-user data is extracted with intent matching by [annotating](https://cloud.google.com/dialogflow/cx/docs/concept/intent#annot) parts of your training phrases and configuring the associated [intent parameters](/dialogflow/cx/docs/concept/parameter#intent) . For example, consider a training phrase like \"What is the forecast tomorrow for Tokyo?\" You should annotate \"tomorrow\" with a `date` parameter and \"Tokyo\" with a `location` parameter. When you annotate parts of a training phrase, Dialogflow recognizes that these parts are just examples of actual values that will be provided by end-users at runtime. For an end-user input like \"What is the forecast on Friday for Sydney?\", Dialogflow would extract the `date` parameter from \"Friday\" and the `location` parameter from \"Sydney\".\nTo annotate a training phrase with the console:- Select the part of the training phrase that you want to annotate.\n- Select the desired entity type from the list.\n- A parameter is created for you in the parameter table below.\nCreate an intent similar to steps you followed above. Name this intent `order.new` . For each phrase that contains a color, annotate the color with a `color` parameter and the `@sys.color` system entity type. For each phrase that contains a shirt size, annotate the size with a `size` parameter and the `@size` custom entity type you created in prior steps. Your training phrases and parameters should look similar to the following:\n### Create an order pageCreate the new order page following steps similar to prior steps:- Display name:`New Order`\n- Entry fulfillment:`Ok, let's start a new order.`\n### Add a form to the order pageFor each page, you can define a [form](/dialogflow/cx/docs/concept/parameter#form) , which is a list of parameters that should be collected from the end-user for the page. The agent interacts with the end-user for multiple conversation turns, until it has collected all of the required , which are also known as . For each form parameter, you also provide that the agent uses to request that information from the end-user. This process is called .\nWhen an end-user supplies intent parameters for an intent match, the intent parameters become [session parameters](/dialogflow/cx/docs/concept/parameter#session) . When a page initially becomes active, all of its form parameters are pre-filled with any like-named session parameters. So, if the end-user supplies size or color when the **order.new** intent is matched, these values will be automatically filled for the form.\nFor the new order page, you need to define two required form parameters:\n| Required | Display name | Entity type | Is list     | Prompt      |\n|:-----------|:---------------|:--------------|:------------------------|:---------------------------|\n| check_box | color   | @sys.color | check_box_outline_blank | What color would you like? |\n| check_box | size   | @size   | check_box_outline_blank | What size do you want?  |\nTo add this form:- Click the **New Order** page in the graph.\n- Click the **Parameters** addbutton. The parameters editing panel opens.\n- Add the parameters as described in the table above.\n- Click **Save** .\n- Close the parameters editing panel.\n### Add a order intent route to the flowSimilar to steps you followed above, add a route to the **Default Start Flow** . This route should be called when the end-user wants to make a new order:- Intent: **order.new** \n- Transition Target page: **New Order** \n## Confirmation pageYour final page will just confirm the order and end the session.\n### Create the confirmation pageCreate a confirmation page with a response that uses the session parameters to confirm the order:- Display name:`Order Confirmation`\n- Entry fulfillment:`You can pick up your order for a $session.params.size $session.params.color shirt in 7 to 10 business days. Goodbye.`\n### Add condition routes to the order pageYou can also use [conditions](/dialogflow/cx/docs/reference/condition) to determine whether a route is called. Conditions are commonly used to check whether a form is complete, or they are configured to always be called when evaluated.\nTo set conditions in the CX console, check the [Set conditions](/dialogflow/cx/docs/concept/handler#cond) documentation.\nAdd the following route to the order page, which will be called when the order page form is filled. Note how this condition route uses parameter references in its response to the end-user and how it transitions the session to the **Order Confirmation** page.- **Condition** :`$page.params.status = \"FINAL\"`\n- **Agent Says** :`You have selected a $session.params.size, $session.params.color shirt.`\n- **Transition Page** :`Order Confirmation`\nAdd the following route to the order page, which will be called for each conversational turn in which the page is active and the condition route is evaluated. When the condition above is evaluated and called, the page becomes inactive, so this condition route is not evaluated:- **Condition** :`true`\n- **Agent Says** :`I'd like to collect a bit more information from you.`\n### Create a condition route to end the sessionAdd the following condition route to the **Confirm Order** page to end the session once that page has become active and its entry fulfillment is processed:- **Condition** :`true`\n- **Transition Target** : **Page** :`End Session`\n### Test the completed agentTest the agent with the following dialogue:\n| Dialogue                                       | Explanation                                                                                                                                                                                                    |\n|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------||\n| End-user: Hi Agent: Hello, this is a shirt ordering virtual agent. How can I help you?                   | The Default Welcome Intent route in the Default Start Flow is called. The fulfillment for this state handler (\"Hello, this...\") is added to the response queue. The agent sends the response queue to the end-user.                                                                                                                                                 |\n| End-user: I want to buy a blue shirt Agent: Ok, let's start a new order. Agent: I'd like to collect a bit more information from you. Agent: What size do you want? | The order.new intent route in the Default Start Flow is evaluated. The order.new intent is matched, and the color intent parameter is set to \"blue\". The session transitions to the New Order page, and the color intent parameter becomes a session parameter. The New Order page has an entry fulfillment (\"Ok, let's start...\"), so this is added to the response queue. The color session parameter is used to fill the like-named form parameter. The true condition route in the New Order page is evaluated and called. It has a response message (\"I'd like to collect...\"), so this is added to the response queue. The pages's form is not filled, so the agent uses the size prompt (\"What size...\") and adds this to the response queue. The agent sends the response queue to the end-user. |\n| End-user: large Agent: You have selected a large, blue shirt. Agent: You can pick up your order for a large blue shirt in 7 to 10 business days. Goodbye.   | The end-user input fills the size parameter requested by the agent in the previous conversation turn. The form completion route in the New Order page is evaluated and called. It has a fulfillment (\"You have selected...\"), which is added to the response queue with its parameter references resolved to actual values supplied by the end-user. The session transitions to the Order Confirmation page. The Order Confirmation page has an entry fulfillment (\"You can pick up...\"), which is added to the response queue. The agent sends the response queue to the end-user. The session transitions to End Session.                                             |## ProductionizationBefore running your agent in production, be sure to implement the [productionization best practices](/dialogflow/cx/docs/concept/best-practices#prod) .## What's next\n- Learn more about [Dialogflow CX agents](/dialogflow/cx/docs/concept/agent)", "guide": "Dialogflow"}