{"title": "Dialogflow - Parameters", "url": "https://cloud.google.com/dialogflow/cx/docs/concept/parameter", "abstract": "# Dialogflow - Parameters\n[entity type](/dialogflow/cx/docs/concept/entity)\nCX parameters are similar to [ES parameters](/dialogflow/docs/intents-actions-parameters) , but the utility and scope has been expanded, and the syntax to reference parameters has changed.\n", "content": "## Define, reference, set, and get parameters\nThere are four general ways in which parameters are used:\n- **Define at design-time** : During design-time, you use either the console or the API to define parameters. For example, you can define an intent parameter and use it in a training phrase to indicate end-user input that should be extracted.\n- **Reference at design-time** : Parameter references are variables that hold parameter values to be extracted at runtime. During design-time, you use either the console or the API to reference parameters in various data types. For example, you can reference a session parameter in a static fulfillment response for a route.\n- **Set at runtime** : At runtime, the Dialogflow service, your service that calls the API, and your webhook service can all set parameter values. For example, the Dialogflow service sets the value of an intent parameter when an end-user input matches the intent, and the input contains parameter data.\n- **Get at runtime** : At runtime, your parameter references contain the parameter values that have been set, and you can use the API or a webhook to get the parameter values. For example, when an intent is matched and your webhook is called, your webhook service receives the parameter values for the intent.## Parameter naming\nThe following rules apply to parameter naming:\n- Use the following characters:`[A-Z]`,`[a-z]`,`[0-9]`,`.`,`-`,`_`\n- Parameter names are case insensitive, so Dialogflow treats`Apple`and`apple`as the same parameter. Webhook and API client code should also treat parameter names as case insensitive, because there is no case guarantee for parameter names returned by Dialogflow.## Parameter value types\nParameter values support multiple value types. The [sessions section](#session-ref) below describes how to reference each parameter value type. The following types are supported:\n| Type  | Description                                |\n|:----------|:-------------------------------------------------------------------------------------------------------------------------------------------|\n| Scalar | A single numeric or string value.                           |\n| Composite | A JSON object populated by matching a composite entity, or by filling of an intent parameter, which contains original and resolved fields. |\n| List  | A list of scalar or composite values populated for a parameter configured as a list. See the Is List options below.      |\n## Parameter empty string and null values\nYou can set string parameter values to `\"\"` , which sets the parameter to the empty string.\nYou can set any parameter value to `null` , which indicates that the parameter has not been set.\n## Parameter original values\nWhen text is matched to a particular entity at runtime, it is often resolved to a value that is more convenient for processing. For example, the word \"apples\" in end-user input may be resolved as \"apple\" for a fruit entity.\nAll [value types](#types) for [intent parameter references](#intent-ref) can reference either the original or resolved value.\nOnly composite value types for [session parameter references](#session-ref) can reference the original value.\n## Intent parameters\n[Intents](/dialogflow/cx/docs/concept/intent) use parameters to extract data provided by end-users when intents are matched. The following data is used to define an intent parameter:\n- **Name** (also known as **ID** or **Display Name** ): A name that identifies the parameter.\n- **Entity Type** : The [entity type](/dialogflow/cx/docs/concept/entity) associated with the parameter.\n- **Is List** : If true, the parameter is treated as a list of values.\n- **Redact in log** : If true, end-user provided parameter data is [redacted](#redact) .\n### Define intent parameters\nIntent parameters are defined at design-time when creating [intent data](/dialogflow/cx/docs/concept/intent) or when [annotating training phrases](/dialogflow/cx/docs/concept/intent#annot) .\n### Reference intent parameters\n**Note:** Due to the short-lived lifespan of intent parameter values, it is usually recommended to use [session parameter references](#session-ref) instead of intent parameter references.\nIntent parameter references can be used in static fulfillment response messages of [intent routes](/dialogflow/cx/docs/concept/handler#route) .\nYou can reference either the [original value](#original) or the resolved value.\nTo reference a parameter for the currently matched intent, use one of the following formats:\n```\n$intent.params.parameter-id.original\n$intent.params.parameter-id.resolved\n```\nFor example, if the parameter ID is `date` , you can reference the resolved value as `$intent.params.date.resolved` .\n### Set intent parameters\nWhen an end-user input matches an intent at runtime, any parameter used by an [annotation](/dialogflow/cx/docs/concept/intent#annot) for the associated training phrase is set by Dialogflow.\nThe fulfillment for an intent route can use a [fulfillment parameter preset](/dialogflow/cx/docs/concept/fulfillment#param-preset) to set an intent parameter value at runtime.\n### Get intent parameters\nDuring the conversational turn in which an intent is matched, your code can access the intent parameter values.\nInteractions with the API will return the intent parameter values. See the `detectIntent` method's `queryResult.parameters` response field for the `Session` type.\nWebhook's receive intent parameter values. See the `intentInfo.parameters` field in the [Webhook request](/dialogflow/cx/docs/concept/webhook#webhook-request) .\n## Form parameters\nFor each page, you can define a , which is a list of parameters that should be collected from the end-user for the page. The agent interacts with the end-user for multiple conversation turns, until it has collected all of the required , which are also known as . The agent collects these parameters in the order defined on the page. For each required form parameter, you also provide that the agent uses to request that information from the end-user. This process is called .\nFor example, you might create a form that collects the end-user's name and telephone number for a `Collect Customer Info` page.\nCX form filling is similar to [ES slot filling](/dialogflow/docs/intents-actions-parameters#required) .\nThe following data is used to define a form parameter:\n| Console option name          | API field chain            | Description                                                              |\n|:--------------------------------------------------------|:-------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Display name           | Page.form.parameters[].displayName       | A name that identifies the parameter.                                                        |\n| Entity type            | Page.form.parameters[].entityType       | The entity type associated with the parameter.                                                      |\n| Required            | Page.form.parameters[].required        | Indicates whether the parameter is required. Required parameters must be filled before form filling concludes, and the agent will prompt the end-user for values. See the Set form parameters section below for details.           |\n| Default Value (only visible when Required is unchecked) | Page.form.parameters[].defaultValue       | The default value of an optional parameter. See the Set form parameters section below for details.                                         |\n| Is list             | Page.form.parameters[].isList        | If true, the parameter is treated as a list of values.                                                    |\n| Redact in log           | Page.form.parameters[].redact        | If true, end-user provided parameter data is redacted.                                                    |\n| Initial prompt fulfillment        | Page.form.parameters[].fillBehavior.initialPromptFulfillment | Initial prompts in the form of fulfillment to request a required parameter value from the end-user. See the Set form parameters section below for details.                           |\n| Reprompt event handlers         | Page.form.parameters[].fillBehavior.repromptEventHandlers | These are used when the agent needs to reprompt the end-user to fill the parameter after a failed attempt. See Form filling reprompt handlers. If no reprompt event handlers are defined, the agent will reprompt with the initial prompts after a failed attempt. |\n| DTMF             | Not available            | See the DTMF section below.                                                          |\n### Define and manage form parameters\nForm parameters are defined at design-time when creating a [page](/dialogflow/cx/docs/concept/page) .\nTo change the form parameter order with the console, click the **Parameters** section title on the page, then drag parameter rows in the parameter table.\nTo delete a form parameter, click the **Parameters** section title on the page, hover your mouse over a parameter, then click the delete button.\n### Reference form parameters\nForm parameter references are not used directly. You can only check the fill status of individual form parameters or the form as a whole. You can use these form status references in a [condition](/dialogflow/cx/docs/reference/condition) requirement of a [condition route](/dialogflow/cx/docs/concept/handler#route) .\nTo check whether the current page's complete form is filled, use the following condition:\n```\n$page.params.status = \"FINAL\"\n```\nTo check whether a particular form parameter was filled in the last turn, use the following condition:\n```\n$page.params.parameter-id.status = \"UPDATED\"\n```\n### Set form parameters\nForm parameter values can be set in a variety of ways. The following subsections describe each mechanism for setting form parameter values.\nYou can provide default values for optional form parameters. When form filling starts, all unset optional form parameters are set to their default values. These values can be initialized or overridden by some of the mechanisms below.\nIf a parameter is required, its default value is ignored.\n**Note:** You can define page entry fulfillment to inform the end-user that you will be collecting parameter values one by one, however you need to define a prompt for each required parameter separately.\nDialogflow automatically sets parameter values provided by the end-user during form filling. The agent collects required parameters in the order defined on the page. The agent prompts the end-user for required values using the initial prompt fulfillment you provide for each required parameter. Optional parameters will not trigger prompts.\nIf a required parameter value is not provided by the end-user after an agent prompt, the initial prompt will be repeated unless a different behavior is defined in the [reprompt handlers](#form-reprompt) . If there are multiple initial text prompts defined, the agent behavior is the same as the behavior for any [fulfillment text responses](/dialogflow/cx/docs/concept/fulfillment#text) .\n**Note:** If the end-user provides multiple parameter values in a single conversation turn during form filling, usually only one form parameter is set. However, if the same parameters are defined as [intent parameters](#intent) in an intent referenced in the same flow, Dialogflow may set multiple form parameters in a single conversation turn. This behavior is an optimization of NLU which may or may not occur during a conversation, so this behavior should not be relied on.\nWhen a parameter of any type is set at runtime, the parameter is written to the session and becomes a [session parameter](#session) .\nWhen a page initially becomes active, and during its active period, any form parameter with the same name as a session parameter is automatically set to the session parameter value.\nThis can happen with a matched intent parameter in an [intent route](/dialogflow/cx/docs/concept/handler#route) or [parameter propagation](#prop) .\nIntent and session parameter propagation is the only mechanism to set optional form parameters to values from end-user input, but this mechanism can also set or override required form parameter values.\nFulfillment for a route, event handler, or [form reprompt](#form-reprompt) can use a [fulfillment parameter preset](/dialogflow/cx/docs/concept/fulfillment#param-preset) to set a form parameter value at runtime. A fulfillment parameter preset will override a parameter value, including parameter default values.\nYour webhook can set the values of form parameters at runtime. See the `pageInfo.formInfo.parameterInfo` field in the [Webhook response](/dialogflow/cx/docs/concept/webhook#webhook-response) .\n### Get form parameters\nInteractions with the API will return the form parameter values. See the `detectIntent` method's `queryResult.parameters` response field for the `Session` type.\nWebhook's receive form parameter values. See the `pageInfo.formInfo.parameterInfo` field in the [Webhook request](/dialogflow/cx/docs/concept/webhook#webhook-request) .\n### Form filling reprompt handlers\nReprompt handlers, also known as [parameter-level event handlers](/dialogflow/cx/docs/concept/handler#event-parameter) , are used to define complex parameter prompt behavior for required parameters. For example, reprompt handlers can be used to alter the prompt when the end-user fails to provide a value after the initial prompt, and to transition to another page after N failed attempts.\nIf no reprompt handlers are defined, the initial prompt will be used to reprompt the end-user as needed.\nIf the end-user responds with unexpected input, a `sys.no-match-*` or `sys.no-input-*` event is invoked, and any reprompt handlers defined for these events are called.\nLike other event handlers, a reprompt handler is a type of [state handler](/dialogflow/cx/docs/concept/handler) that can be configured with one or both of:\n- A fulfillment to provide an end-user reprompt message and/or a [parameter preset](/dialogflow/cx/docs/concept/fulfillment#param-preset) .\n- A transition target to change the current page.## Session parameters\nWhen a parameter of any type is set at runtime, the parameter is written to the session and becomes a . These parameters are not explicitly defined at design-time. You can reference these session parameters at any point during a session.\n### Reference session parameters\nSession parameter references can be used in the static response messages for the following types of [fulfillment](/dialogflow/cx/docs/concept/fulfillment) :\n- Page entry fulfillment\n- Route fulfillment\n- Event handler fulfillment\n- Form prompt fulfillment\n- Form reprompt fulfillment\nThe references can also be used in:\n- [Webhook header values](/dialogflow/cx/docs/concept/webhook#auth) for authentication.\n- [Flexible webhook requests](/dialogflow/cx/docs/concept/webhook#flexible) , for sending parameter values to a webhook.\nTo reference a session parameter, use the following formats:\nTo access a parameter with a scalar entity type:\n```\n$session.params.parameter-id\n```\nFor example, if the parameter ID is `date` , you can reference the value as `$session.params.date` .- To access a member of a parameter with a composite entity type:```\n$session.params.parameter-id.member-name\n```For example, if the parameter ID is `location` , you can reference the `zip-code` member value as `$session.params.location.zip-code` .\n- To access the [original value](#original) of a parameter with a composite entity type:```\n$session.params.parameter-id.original\n```\n- To access the full object of a parameter with a composite entity type, use the [IDENTITY system function](/dialogflow/cx/docs/reference/system-functions#func-identity) .\n- To access a complete list of elements:```\n$session.params.parameter-id\n```For example, if the list parameter ID is `colors` and the values extracted from a user query are `[\"red\", \"blue\", \"yellow\"]` , you can reference all the values as `$session.params.colors` .\n- To access the ith element of a list parameter:```\n$session.params.parameter-id[i]\n```For example, if the list parameter ID is `colors` , you can reference the first value as `$session.params.colors[0]` .\n### Set session parameters\nWhen form filling is done, the filled parameters are written to the session by Dialogflow.\nFulfillment for a route, event handler, or [form reprompt](#form-reprompt) can use a [fulfillment parameter preset](/dialogflow/cx/docs/concept/fulfillment#param-preset) to set a session parameter value at runtime.\nYour webhook can set the values of session parameters at runtime. See the `sessionInfo.parameters` field in the [standard webhook response](/dialogflow/cx/docs/concept/webhook#webhook-response) or see [flexible webhook response](/dialogflow/cx/docs/concept/webhook#flexible-webhook-response) .\nInteractions with the API can set session parameter values. See the `detectIntent` method's `queryParams.parameters` request field for the `Session` type.\n### Get session parameters\nInteractions with the API will return the session parameter values. See the `detectIntent` method's `queryResult.parameters` response field for the `Session` type.\nWebhook's receive session parameter values. See the `sessionInfo.parameters` field in the [Webhook request](/dialogflow/cx/docs/concept/webhook#webhook-request) .\n## Parameter propagation\nWhen an end-user input provides a parameter value, the parameter may be propagated to other levels:\n- When an intent parameter is set by an intent match, like-named form parameters for the active page are set to the same value. The entity type of the parameter is dictated by the intent parameter definition.\n- When an intent parameter is set by an intent match, or a form parameter is set while filling a form, the parameter becomes a session parameter.## DTMF for telephony integrations\nYou can enable and configure DTMF (Dual-tone multi-frequency signaling) for a parameter. Once enabled, an end-user for an agent using a telephony [integration](/dialogflow/cx/docs/concept/integration) can use the telephone keypad to provide parameter values.\nTo reduce ambiguity, DTMF input can be interpreted in both normal and DTMF-specific (recommended) forms:\n- The normal form is simply the keypad values as entered by the end-user. For example,`123#`.\n- The DTMF-specific form converts the input to`dtmf_digits_[digits]`, where`[digits]`is the original DTMF digits with`*`replaced with`star`and`#`replaced with`pound`. For example,`123#`is interpreted as`dtmf_digits_123pound`.\nWhen matching entity types for a parameter, Dialogflow will try to match both the normal and DTMF-specific forms. When an entity type is used for DTMF input, it is recommended that you define synonyms like `dtmf_digits_123` to improve NLU matching.\nIf the DTMF input does not meet the termination condition (either it has not reached the max digit length or it has not been terminated by the finish digit), the Dialogflow agent will keep waiting for more input. During this period, if [no-speech timeout](/dialogflow/cx/docs/concept/agent#settings-speech) is triggered, the agent will instead invoke a [no-input event](/dialogflow/cx/docs/concept/handler#event-built-in) . If only a speech utterance is detected, the agent matches against the speech input. If both speech and DTMF input are detected, the speech input is dropped and only the DTMF input is considered.\nTo enable and customize DTMF for a parameter:\n- Enable **Advanced settings** from the [agent speech and IVR settings](/dialogflow/cx/docs/concept/agent#settings-speech) if you have not already enabled them.\n- Create a [page parameter](/dialogflow/cx/docs/concept/parameter#form) .\n- In the parameter pane, toggle **Enable DTMF** on.\n- Set **Max digits** to the maximum number of digits the end-user can provide for this parameter.\n- Set **Finish digit** to the keypad value that will terminate DTMF input for the parameter. It is common to use`#`for this setting. The finish digit is not added to the Dialogflow query on the agent, so if finish digit is # and the input is 123#, then the actual query input will be '123'\nWhen building your agent, you can test DTMF inputs in the [simulator](/dialogflow/cx/docs/concept/console#simulator-input) .\n## Flow-scoped parameters\ncan be defined as [fulfillment parameter presets](/dialogflow/cx/docs/concept/fulfillment#param-preset) or [form parameters](#form) . These parameters can only be referenced while the flow they are defined in is active, and they are not persisted into the session parameters.\nTo define or reference a flow-scoped parameter, use the following syntax:\n```\n$flow.parameter-name\n```\nFor example, if the parameter name is `date` , you can define or reference the parameter as `$flow.date` .\nNote that using a prefix of `$` when defining parameters is different than other parameter types that do not use `$` for parameter definitions.\nAn example flow-scoped parameter definition:\n### Flow-scoped parameter value lifetime\n**Note:** If you want to ensure that parameter values are retained during a session, it is simpler to use session parameters.\nIt is uncommon, but in certain advanced cases, you may need to understand how flow-scoped parameter values are retained (or discarded) when a flow becomes inactive, then active again.\nWhether flow-scoped parameter values are retained when a flow becomes inactive, then active again depends on the [flow stack](/dialogflow/cx/docs/concept/handler#handler-flow-stack) and flow on the stack.\n- When flow A transitions to flow B using a specific transition target, flow A (parent flow) remains on the stack, flow A retains its flow-scoped parameter values, and a new instance of flow B (child flow) is added to the stack.\n- When a child flow transitions back to a parent flow using a [symbolic transition target](/dialogflow/cx/docs/concept/handler#symbolic) (for example, END_FLOW), the child flow is removed from the stack, all child flow-scoped parameter values are discarded, and all parent flow-scoped parameter values are retained.\n- Using a series of transitions with specific transition targets, the flow stack can contain multiple instances of one flow type. Each instance of the flow type has unique flow-scoped parameter values. For example: A1 -> B1 -> C1 -> B2, where A, B, and C are flow types, and the numbers denote instances of those flow types. In this example, B1 and B2 are different instances of flow B, and have unique flow-scoped parameters.\nExamples:\n| Transitions                                                    | Outcome                                   |\n|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------|\n| Flow A (A1) becomes active. Flow B (B1) becomes active using a specific transition target. Flow B transitions back to the flow A (A1) that initiated it using a symbolic transition target.        | Flow A retains the parameter values.                           |\n| Flow A (A1) becomes active. Flow B (B1) becomes active using a specific transition target. Flow B transitions to a new instance of flow A (A2) using a specific transition target.          | The new instance of flow A (A2) at the top of the stack does not have access to the parameter values of flow A (A1) at the bottom of the stack. |\n| Flow A (A1) becomes active. Flow B (B1) becomes active using a specific transition target. Flow A (A1) becomes active using a symbolic transition target. Flow B (B2) becomes active using a specific transition target. | Flow B (B2) does not retain parameter values that were set while it was active after the second transition (B1).        |\n## Request-scoped parameters\nare short-lived parameters created by Dialogflow that can only be referenced during the lifecycle of the current request, and are not persisted into the session parameters.\nRequest-scoped parameters are generated by Dialogflow for the following features.\n### Language and user input\nYou can access the language code and user input associated with the request using:\n| Reference     | Description                                                                     |\n|:---------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| $request.language   | Language code specified in QueryInput.language_code.                                                          |\n| $request.resolved-language | The actual language code used by the agent during processing. The resolved language can be different from the language specified in the request. For example, if the agent only supports \"en\", while the language specified in the request is \"en-US\", the resolved language would be \"en\". |\n| $request.user-utterance | The current user utterance specified in the request.                                                          |\n### Custom Payload\nWhen `QueryParameters.payload` is set, you can access the corresponding parameter via `$request.payload.param-id` .\n### Sentiment Analysis\nThe following sentiment references are available when sentiment analysis is enabled:\n| Reference     | Type | Description                                                                        |\n|:-----------------------------|:--------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| $request.sentiment.score  | Number | Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).                                                       |\n| $request.sentiment.magnitude | Number | Indicates the overall strength of emotion (both positive and negative) between 0.0 and +inf. Unlike score, magnitude is not normalized; each expression of emotion within the end-user input (both positive and negative) contributes to the input's magnitude. Longer inputs may have greater magnitudes. |\n| $request.sentiment.succeeded | Boolean | True if sentiment analysis succeeded, false otherwise.                                                              |\n## Parameter redaction\n**Note:** At this time, only text parameter values are redacted.\nFor any intent or form parameter, you can enable parameter redaction, which will redact end-user runtime parameter data from logs and Dialogflow internal storage. Redacted parameters are shown as `$parameter-name_redacted` in logs.\nFor example, consider an end-user input of \"My address is \" that results in an parameter being sent to \"1600 Amphitheatre Parkway\". The logged text will be \"My address is $address_redacted\".\nTo enable parameter redaction:\nCheck the **Redact in log** checkbox when creating or updating a parameter.\nSet the `parameters[].redact` field to true for the `Intent` type. \nSet the `form.parameters[].redact` field to true for the `Page` type.\nAs an alternative, you can [redact all parameters of a specific entity type](/dialogflow/cx/docs/concept/entity-options#redact) .", "guide": "Dialogflow"}