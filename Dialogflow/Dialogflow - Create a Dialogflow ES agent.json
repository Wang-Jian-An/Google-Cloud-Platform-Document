{"title": "Dialogflow - Create a Dialogflow ES agent", "url": "https://cloud.google.com/dialogflow/es/docs/quick/build-agent", "abstract": "# Dialogflow - Create a Dialogflow ES agent\n# Create a Dialogflow ES agent\nThis guide shows you how to use the Dialogflow Console to build and test a simple agent.", "content": "## Before you beginYou should do the following before reading this guide:- Read [Dialogflow basics](/dialogflow/docs/basics) .\n- Perform [setup steps](/dialogflow/docs/quick/setup) .\n## Create an agent\nIf you have not already created an agent, create one now:- Go to the [Dialogflow ES Console](https://dialogflow.cloud.google.com) .\n- If requested, sign in to the Dialogflow Console.  See [Dialogflow console overview](/dialogflow/docs/console) for more information.\n- Click **Create Agent** in the left sidebar menu.  (If you already have other agents, click the agent name,  scroll to the bottom and click **Create new agent** .)\n- Enter your agent's name, default language, and default time zone.\n- If you have already created a project, enter that project.  If you want to allow the Dialogflow Console to create the project,  select **Create a new Google project** .\n- Click the **Create** button.\n## Import the example file to your agentThe steps in this guide make assumptions about your agent, so you need to [import](/dialogflow/docs/agents-settings#export) an agent prepared for this guide. When importing, these steps use the option, which overwrites all agent settings, intents, and entities.\nThe agent prepared for this guide is a new agent, with no user-defined intents or entities.\nTo import the file, follow these steps:- Download the [new-agent.zip](/static/dialogflow/es/docs/data/new-agent.zip) file.\n- Go to the [Dialogflow ES Console](https://dialogflow.cloud.google.com) .\n- Select your agent.\n- Click the  settingsbutton  next to the agent name.\n- Select the **Export and Import** tab.\n- Select **Restore From Zip** and follow instructions to restore the zip file that you downloaded.\n## Intents [Intents](/dialogflow/docs/intents-overview) categorize an end-user's intention for one conversation turn. For each agent, you define many intents, where your combined intents can handle a complete conversation.\n### Default intentsWhen you create an agent, two [default intents](/dialogflow/docs/intents-default) are created for you:- **Default Welcome Intent** : This intent is matched when the end-user begins a conversation with your agent. This intent should return a response that lets the end-user know what your agent does or what they can say to begin a conversation.\n- **Default Fallback Intent** : This intent is matched when the agent cannot match the end-user expression to any other intent.\nTo see these intents, go to the intent list for your agent:- Go to the [Dialogflow ES Console](https://dialogflow.cloud.google.com) .\n- Select the agent you just created.\n- Click **Intents** in the left sidebar menu.\nThe middle of [the console](/dialogflow/docs/console) shows the list of intents for the agent.\n### Test the Default Fallback IntentThe Dialogflow simulator is on the right side of the console. With the simulator, you can test your agent by speaking or typing messages.\nTry the agent now:- Click the **Try it now** field.\n- Type`What is your name?`.\n- Press enter.\nThe agent's response appears in the **Default Response** section. Since your input didn't match any intent, the Default Fallback Intent was matched, and you received one of the default replies.\n### Create a new intentThe steps in this section create an intent that can answer the question \"what is your name?\". For each intent, you define many [training phrases](/dialogflow/docs/intents-training-phrases) . A training phrase is an example of what an end-user might type or say to your agent, also known as an . You should define many training phrases that provide Dialogflow with a variety of expressions that should match an intent.\nCreate an intent:- Click the add intentaddbutton next to **Intents** in the left sidebar menu.\n- Enter`get-agent-name`in the **Intent name** field.\n- In the **Training Phrases** section, click **Add training phrases** .\n- Enter the following training phrases, pressing enter after each entry:- `What is your name?`\n- `Do you have a name?`\n- `Tell me your name`\n **Note:** In most cases, you should enter at least 10-20 (depending on complexity of intent) training phrases for reliable intent matching.\n- In the **Responses** section, enter the following in the **Text Response** section:- `My name is Dialogflow!`\n- Click the **Save** button and wait until the **Agent Training** dialog indicates that training is complete.\n### Test your intentIn the simulator, type `What's your name?` and press enter.\nYour agent responds to the expression correctly, even though the expression was a little different from the training phrases you supplied.\nDialogflow uses training phrases as examples for a machine learning model to match end-user expressions to intents. The model checks the expression against every intent in the agent, gives every intent a score, and the highest scoring intent is matched. If the highest scoring intent has a very low score, the fallback intent is matched.## Parameters and entities\nWhen an intent is matched at runtime, Dialogflow provides the extracted values from the end-user expression as\n [parameters](/dialogflow/docs/intents-actions-parameters#params) \n. Each parameter has a type, called the\n [entity type](/dialogflow/docs/entities-overview) \n, which dictates exactly how the data is extracted. Unlike raw end-user input, parameters are structured data that can easily be used to perform some logic or generate responses.\nWhen building an agent, you control how data is extracted by [annotating parts of your training phrases](/dialogflow/docs/intents-training-phrases#annotation) and configuring the associated parameters.\n### Create parametersCreate a new intent with parameters:- Click the plusaddbutton next to **Intents** in the left sidebar menu.\n- Name the intent`set-language`at the top of the intent form.\n- Add the following training phrases:- `I know English`\n- `I speak French`\n- `I know how to write in German`\n- Click the **Save** button and wait until the **Agent Training** dialog indicates that training is complete.\nDialogflow automatically detects parameters in training phrases that are recognized as [system entities](/dialogflow/docs/entities-system) . These are entities provided by Dialogflow for many common data types like location, color, and date.\n **Note:** If your training phrases are not automatically annotated, you can [manually annotate them](/dialogflow/docs/intents-training-phrases#annotation) .\nBelow the **Training phrases** section, Dialogflow creates a row in the **Action & parameters** table:\n- **Required:** The checkbox is not checked, so this parameter is optional.\n- **Parameter Name:** This parameter is automatically named`language`, because the parameter is recognized as a language.\n- **Entity:** This is the entity type. It is recognized as a`@sys.language`system entity.\n- **Value:** This is the identifier you use when referencing the value of this parameter.\n- **Is List:** The checkbox is not checked, so the parameter is not a list.\n### Use parameter data in a responseThe value of a parameter can be used in your responses. For example, you can use the `$language` parameter reference in your responses when building an agent. At runtime, it will be replaced with the language specified in the end-user expression.\nAdd a response that uses a parameter:- Scroll down to the **Responses** section.\n- Add the following text response:`Wow! I didn't know you knew $language.`\n- Click the **Save** button and wait until the **Agent Training** dialog indicates that training is complete.\n### Test your parameterIn the simulator, enter `I know Russian` .\nYou can see that Dialogflow correctly extracts the `language` parameter with the value `Russian` , and `Russian` was correctly inserted where the parameter reference was used in the response.\n### Create your own entitiesIn most cases, you have specific data you need to gather from users that isn't provided by system entities. You can create [custom entities](/dialogflow/docs/entities-custom) to handle this.\nCreate a custom entity:- Click the add entityaddbutton next to **Entities** in the left sidebar menu.\n- Enter`language-programming`for the name of the entity.\n- Add the following entity entries (rows):| Reference Value | Synonyms     |\n|:------------------|:---------------------------|\n| JavaScript  | JavaScript, js, ECMAScript |\n| Java    | Java      |\n| Python   | Python, py     |\n- Click the **Save** button and wait until the **Agent Training** dialog indicates that training is complete.\nDialogflow can handle simple things like plurality and capitalization, but you should add all possible synonyms for your entries. The more you add, the better your agent can determine your entities.\n### Use your new entityAdd training phrases to the `set-language` intent that make use of the new entity:- Click **Intents** in the left sidebar menu.\n- Click the`set-language`intent.\n- Add the following training phrases:- `I know javascript`\n- `I know how to code in Java`\n- Notice that the programming languages in these training phrases are automatically annotated and added to parameters in the **Action and Parameters** section.\n- In the **Responses** section, add the following second text response:`$language-programming is an excellent programming language.`.\n- Click the **Save** button and wait until the **Agent Training** dialog indicates that training is complete.\n **Note:** If your training phrases are not automatically annotated, you can [manually annotate them](/dialogflow/docs/intents-training-phrases#annotation) .\n### Test your new entityIn the simulator, enter `I know how to code in py` .\nYou can see that Dialogflow correctly extracted `py` for the `language-programming` parameter, identified it as the `Python` entity, and inserted the value in the response.## ContextsTo control the flow of the conversation, you can use [context](/dialogflow/docs/contexts-overview) .\n### Add a follow-up intent [Follow-up intents](/dialogflow/docs/contexts-follow-up-intents) provide a simple way to control a conversation without having to create and manage contexts manually.\nWhen you create a follow-up intent, an [output context](/dialogflow/docs/contexts-input-output#output_contexts) is added to the parent intent and an [input context](/dialogflow/docs/contexts-input-output#input_contexts) of the same name is added to the child intent. This means that the follow-up intent is matched only when the parent intent is matched in the previous conversational turn.\nAdd a custom follow-up intent to the `set-language` intent:- Select the`set-language`intent you created in previous steps.\n- In the **Response** section, update the text response:- `Wow! I didn't know you knew $language. How long have you known $language?`\n- Click the **Save** button and wait until the **Agent Training** dialog indicates that training is complete.\n- Click **Intents** in the left sidebar menu.\n- Hover over the`set-language`intent and click **Add follow-up intent** .\n- Click **custom** in the revealed list.\n- Click the **Save** button and wait until the **Agent Training** dialog indicates that training is complete.\nDialogflow automatically names the follow-up intent `set-language - custom` .\n### Intent matching with follow-up intentsFollow-up intents are only matched after the parent intent has been matched. Since the `set-language - custom` intent is only matched after the `set-language` intent, you can assume that the user has just been asked the question `How long have you known $language?` . Now you can add training phrases for likely user answers to that question:- Click **Intents** in the left sidebar menu.\n- Click the`set-language - custom`intent.\n- Add the following training phrases:- `3 years`\n- `about 4 days`\n- `for 5 years`\n- Click the **Save** button and wait until the **Agent Training** dialog indicates that training is complete.\n### Test your follow-up intentEnter `I know French` in the simulator, then answer the question `How long have you known French` with `about 2 weeks` .\nDespite there being no response for the second expression ( `about 2 weeks` ), you can see the expression is matched to the correct intent ( `set-language - custom` ), and the duration parameter is correctly parsed ( `2 weeks` ).\n### Intents and contextsInspect the `set-language` intent to see that `set-language-followup` is listed as an output context and is prefaced by the number 2. This number is called the [lifespan](/dialogflow/docs/contexts-input-output#lifespan) .After the `set-language` intent is matched, the `set-language-followup` context is active and attached to the conversation for turns (lifespan of 2). Therefore, when the user responds to the question, `How long have you known $language?` , the `set-language-followup` context is active.\nInspect the `set-language - custom` intent to see that `set-language-followup` is listed as an input context, which is the same as the output context for the `set-language` intent.\nAny intents with an input context that matches an active context are heavily favored when Dialogflow [matches intents](/dialogflow/docs/intents-matching) .\n### Contexts and parametersContexts store parameter values, and you can access the values of parameters defined in the `set-language` intent when its output context is active.\nIn the `set-language - custom` intent, you only asked for the duration the user has known the language, and not the referenced language itself.\nTo reference the language in the response:- Update the`set-language - custom`intent text response to`I can't believe you've known #set-language-followup.language for $duration!`\n- Click the **Save** button and wait until the **Agent Training** dialog indicates that training is complete.\nThe `#set-language-followup.language` reference is known as a [parameter reference for an active context](/dialogflow/docs/intents-actions-parameters#context) .\n### Test the context parameterEnter `I know French` in the simulator, and then respond to the question with `1 week` . Notice that the `language` parameter value is retrieved from the context.## ProductionizationBefore running your agent in production, be sure to implement the [productionization best practices](/dialogflow/es/docs/best-practices#prod) .## What's nextTry the [fulfillment quickstart](/dialogflow/es/docs/quick/fulfillment) .", "guide": "Dialogflow"}