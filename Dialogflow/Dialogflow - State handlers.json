{"title": "Dialogflow - State handlers", "url": "https://cloud.google.com/dialogflow/cx/docs/concept/handler", "abstract": "# Dialogflow - State handlers\n| Term      | Definition                                                 |\n|:--------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Handler requirements  | These are the requirements that must be satisfied for the handler to have any effect on the session. A handler is said to be called when it satisfies its requirements and affects the session in some way. |\n| Handler fulfillment  | If a handler is called, an optional fulfillment is used to create responses for end-users. These responses are either defined in static agent data or retrieved dynamically from your webhook service.  |\n| Handler transition target | If a handler is called, an optional transition target is used to change the current page. The next page can only be a flow start page or a page within the currently active flow.       |\nThere are two types of state handlers with differing handler requirements:\n| Term   | Definition                                                               |\n|:---------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Routes   | Routes are called when an end-user input matches an intent and/or some condition on the session status is met. A route with an intent requirement is also called an intent route. A route with only a condition requirement is also called a condition route.   |\n| Event handlers | Event handlers are called when an event is invoked. Some built-in events are triggered when unexpected end-user input is received, or when a webhook error occurs. You can also define custom events that you invoke when something happens outside the conversation. |\nThere are three steps to processing a state handler:\n| Term   | Definition                                                                            |\n|:--------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 1. Scope  | A handler must be in scope to have any effect on the session. The scope is determined by whether a handler is applied to a flow, a page, or a form parameter; and by whether the associated flow is active, the associated page is active, or the agent is currently attempting to fill the associated form parameter. |\n| 2. Evaluation | Each handler in scope is evaluated in order. If a handler's requirements are met, it passes evaluation.                                                    |\n| 3. Call  | If a handler is in scope and passes evaluation, it is called. Any associated fulfillment is called, and any associated transition target is applied to the session.                                     |\n", "content": "## Scope\nIn order for a handler to be evaluated, it must be in . Handler scope is an important and powerful tool that helps you control the conversation. By controlling the scope of a handler, you can control:\n| X   | Item                |\n|:-------------|:-------------------------------------------------------------------|\n| double_arrow | When an intent can be matched          |\n| double_arrow | When a condition should be checked         |\n| double_arrow | When a certain event can be handled        |\n| double_arrow | When a page transition can occur         |\n| double_arrow | When a static fulfillment response is provided      |\n| double_arrow | When a webhook-enabled fulfillment is called for dynamic responses |\nThe scope is determined by whether a handler is applied to a flow, a page, or a form parameter; and by whether the associated flow is active, the associated page is active, or the agent is currently attempting to fill the associated form parameter.\nThe detailed scoping rules are as follows:\n- Routes applied to the active flow:- If the current page is the [flow start page](/dialogflow/cx/docs/concept/flow#start-page) , they are in scope.\n- If the current page is not the flow start page, they are only in scope if they have an intent requirement.\n- Routes applied to the current page are in scope.\n- Event handlers applied to the active flow are in scope.\n- Event handlers applied to the current page are in scope.\n- Event handlers applied to a form parameter that the agent is currently attempting to fill are in scope.## Routes\nRoutes have two requirements, and one or both must be provided. If both requirements are provided, they both must be satisfied in order to call the route:\n| Term     | Definition                                     |\n|:----------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Intent requirement | An intent which must be matched to end-user input for the current conversational turn. When a route has an intent requirement, it is called an intent route. |\n| Condition requirement | A condition which must be met. When a route has a condition requirement, it is called a condition route.              |\nYou can apply routes to flows ( ) and pages ( ). For example, you might use routes in the following situations:\n| X   | Item                                |\n|:-------------|:------------------------------------------------------------------------------------------------------------------------------------|\n| double_arrow | When end-user input matches an intent, the match should trigger a static fulfillment response.          |\n| double_arrow | When end-user input matches an intent, the match should trigger a webhook-enabled fulfillment for a dynamic response.    |\n| double_arrow | When end-user input has provided the final required form parameter a condition check triggers a session transition to another page. |\n| double_arrow | When end-user input has provided a specific form parameter a condition check triggers a static fulfillment response.    |\n| double_arrow | A condition check set to true that forces a page transition.                  |\n### Intent propagation\nNormally, when a route is called due to a matched intent, the intent is . A consumed intent cannot be matched again, unless new end-user input triggers a new intent match. However, it is possible to propagate an intent match from one flow to another in the following scenario:\n- A route in`flow F1`has`intent I1`as a requirement and`flow F2`as a transition target.\n- `Flow F2`has a route that also has`intent I1`as a requirement.\nIn this case, when the route in `flow F1` is called, `intent I1` is matched twice for a single end-user input, and both routes are called.\nPropagating intents is useful to:\n| X   | Item                                |\n|:-------------|:-----------------------------------------------------------------------------------------------------------------------------------|\n| double_arrow | Change the current page to a specific page in another flow (transition target flow's route has a specific transition target page). |\n| double_arrow | Create an entry message for a flow's start page (transition target flow's route has a fulfillment).        |\n### Route groups\nWhen building an agent, you may find that many pages have a common set of routes. To make routes reusable, you can define . You can create these group resources reusable either within the flow or the entire agent.\nFor example, you may want your flow to handle end-user input like \"I want to add a topping to my pizza\" and \"I want to change my drink size\". These inputs should be handled when any one of multiple pages of the flow are active. You could define two routes with intents to handle these inputs for all relevant pages, but this is a lot of duplicated work. Instead, you can define the route group once, and add a reference to the group on all relevant pages.\nare route group resources that are created with a flow as parent. They are reusable within the flow.\nare route group resources that are created with an agent as parent. They are reusable within the entire agent, but disallow routes that transition to a non [symbolic](#symbolic) page as target.\n### Flow-level routes\nare routes that are applied to a flow by adding them to the flow start page. These types of handlers have the following use cases:\n| X   | Item                    |\n|:-------------|:-----------------------------------------------------------------------------------|\n| double_arrow | Handlers with an intent or condition requirement in scope for the flow start page. |\n| double_arrow | Handlers with an intent requirement in scope for all pages within the flow.  |\nTo create flow-level routes from the console:\n- Open the flow start page.\n- Click the addaddbutton in the **Routes** heading.\n- The route editing panel opens.\n- Provide route fields.\n- Click **Save** .\nTo reorder flow-level routes from the console:\n- Open the flow start page.\n- Click the **Routes** heading.\n- The route list panel opens.\n- Drag routes in the desired order. Alternatively, click the optionmore_vertmenu, then select **Move To** .\nTo delete flow-level routes from the console:\n- Open the flow start page.\n- Click the **Routes** heading.\n- The route list panel opens.\n- Click the optionmore_vertmenu.\n- Select **Delete** .\n### Page-level routes\nare routes that are applied to a page. These types of handlers have the following use cases:\n| X   | Item                      |\n|:-------------|:------------------------------------------------------------------------------------------|\n| double_arrow | Handlers with an intent or condition requirement in scope when specific pages are active. |\nTo create page-level routes from the console:\n- Open the page (not the flow start page).\n- Click the addaddbutton in the **Routes** heading.\n- The route editing panel opens.\n- Provide route fields.\n- Click **Save** .\nTo reorder page-level routes from the console:\n- Open the page (not the flow start page).\n- Click the **Routes** heading.\n- The route list panel opens.\n- Drag routes in the desired order. Alternatively, click the optionmore_vertmenu, then select **Move To** .\nTo delete page-level routes from the console:\n- Open the page (not the flow start page).\n- Click the **Routes** heading.\n- The route list panel opens.\n- Click the optionmore_vertmenu.\n- Select **Delete** .## Event handlers\nEvent handlers have one requirement in order to be called:\n| Term    | Definition                                                                    |\n|:------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Event requirement | An event which must be invoked. Events are identified by their name. Some built-in events are invoked when unexpected end-user input is received, or when a webhook error occurs. You can also define custom events that you invoke when something happens outside of the conversation. |\nYou can apply event handlers to flows ( ), pages ( ), and parameters ( ). For example, you might use event handlers in the following situations:\n| X   | Item                                  |\n|:-------------|:------------------------------------------------------------------------------------------------------------------------------------------|\n| double_arrow | When end-user input does not match any intents, a no-match event handler provides a specific static fulfillment response.     |\n| double_arrow | A timer expires in your system, and you want to provide reminder information to the end-user with a specific static fulfillment response. |\n### Flow-level event handlers\nare event handlers that are applied to a flow. These types of handlers have the following use cases:\n| X   | Item                   |\n|:-------------|:------------------------------------------------------------------------------|\n| double_arrow | Handlers with an event requirement in scope for the flow start page.   |\n| double_arrow | Handlers with an event requirement in scope for all pages within the flow. |\n| double_arrow | Handling unexpected end-user input, shared by all pages in a flow.   |\n| double_arrow | Handling webhook errors, shared by all pages in a flow.      |\n| double_arrow | Handling custom events invoked by your system, shared by all pages in a flow. |\nEvery flow has event handlers for the `no-match` and `no-input` [built-in events](#event-built-in) . These event handlers are automatically created when you create a flow, and they cannot be deleted.\nTo create flow-level event handlers from the console:\n- Open the flow start page.\n- Click the addaddbutton in the **Event handlers** heading.\n- The event handler panel opens.\n- Provide event handler fields.\n- Click **Save** .\nTo delete flow-level event handlers from the console:\n- Open the flow start page.\n- Click the **Event handlers** heading.\n- The event handler list panel opens.\n- Hover your mouse over an event handler, then click the deletedeletebutton.\n### Page-level event handlers\nare event handlers that are applied to a page. These types of handlers have the following use cases:\n| X   | Item                  |\n|:-------------|:----------------------------------------------------------------------------|\n| double_arrow | Handlers with an event requirement in scope when specific pages are active. |\n| double_arrow | Handling unexpected end-user input, specific to a page.      |\n| double_arrow | Handling webhook errors, specific to a page.        |\n| double_arrow | Handling custom events invoked by your system, specific to a page.   |\nTo create page-level event handlers from the console:\n- Open a page (not the flow start page).\n- If there is no **Event handlers** heading, click **Add state handler** , select **Event handlers** , then click **Apply** .\n- Click the addaddbutton in the **Event handlers** heading.\n- The event handler panel opens.\n- Provide event handler fields.\n- Click **Save** .\nTo delete page-level event handlers from the console:\n- Open a page (not the flow start page).\n- Click the **Event handlers** heading.\n- The event handler list panel opens.\n- Hover your mouse over an event handler, then click the deletedeletebutton.\n### Parameter-level event handlers\nare event handlers that are applied to a form parameter. They are also known as [reprompt handlers](/dialogflow/cx/docs/concept/parameter#form-reprompt) . These event handlers do not allow custom events, as they are specifically intended to handle invalid end-user input during form filling.\nThese types of handlers have the following use cases:\n| X   | Item                   |\n|:-------------|:------------------------------------------------------------------------------|\n| double_arrow | The end-user did not provide valid input when asked to fill a form parameter. |\nTo create parameter-level event handlers from the console:\n- Open a page that contains form parameters.\n- Click a parameter.\n- The parameter panel opens.\n- Scroll down to the **Reprompt event handlers** section, then click **Add event handler** .\n- The event handler panel opens.\n- Provide event handler fields.\n- Click **Save** .\nTo delete parameter-level event handlers from the console:\n- Open a page that contains form parameters.\n- Click a parameter.\n- The parameter panel opens.\n- Scroll down to the **Reprompt event handlers** section.\n- Hover your mouse over an event handler, then click the deletedeletebutton.\n### Built-in events\n**Note:** There are important best practices for built-in error events described in the [agent design best practices guide](/dialogflow/cx/docs/concept/agent-design#errors) .\nThe following events are built-in and are invoked by Dialogflow. Some events are restricted to certain levels.\n| Event name     | Flow-level | Page-level | Parameter-level | Invoked when                                                                                    |\n|:-----------------------------|:-------------|:-------------|:------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| sys.no-match-default   | \u2714   | \u2714   | \u2714     | For flow or page level: end-user input does not match any intents for handlers that are in scope.For parameter level: end-user input does not satisfy the form parameter.                                            |\n| sys.no-match-[1-6]   | \u2714   | \u2714   | \u2714     | If you provide handlers for any of these numerically ordered events, they are invoked instead of sys.no-match-default and in order: sys.no-match-1, sys.no-match-2, ...                                             |\n| sys.no-input-default   | \u2714   | \u2714   | \u2714     | End-user input was not received. This can be invoked when: Dialogflow receives empty end-user text input.Dialogflow receives empty end-user audio input or the input does not contain any recognized speech.A no speech timeout occurs before end-user audio input contains any recognized speech.              |\n| sys.no-input-[1-6]   | \u2714   | \u2714   | \u2714     | If you provide handlers for any of these numerically ordered events, they are invoked instead of sys.no-input-default and in order: sys.no-input-1, sys.no-input-2, ...                                             |\n| sys.invalid-parameter  | nan   | nan   | \u2714     | Invoked when a webhook response invalidates the parameter by setting WebhookResponse.pageInfo.formInfo.parameterInfo.state to INVALID.                                                     |\n| sys.long-utterance   | \u2714   | \u2714   | \u2714     | End-user input exceeds the maximum allowed length (256 characters). If not provided, Dialogflow treats long user utterance as no-match. For streaming audio inputs, this event is triggered only after the client closes the audio stream.                            |\n| webhook.error    | \u2714   | \u2714   | nan    | The webhook call returned an error. This event is only invoked: 1) if there is no fine-grained webhook event handler (e.g. webhook.error.timeout) that matches the webhook error code, 2) if there is no transition target set in the original route that called the fulfillment with the failing webhook. See the evaluation order section for details. |\n| webhook.error.timeout  | \u2714   | \u2714   | nan    | The webhook call timed out. A webhook event will only be invoked if there is no transition target set in the original route that called the fulfillment with the failing webhook. See the evaluation order section for details.                               |\n| webhook.error.bad-request | \u2714   | \u2714   | nan    | The webhook returned 400 Bad Request. A webhook event will only be invoked if there is no transition target set in the original route that called the fulfillment with the failing webhook. See the evaluation order section for details.                            |\n| webhook.error.rejected  | \u2714   | \u2714   | nan    | The webhook returned 401 Unauthorized or 403 Forbidden. A webhook event will only be invoked if there is no transition target set in the original route that called the fulfillment with the failing webhook. See the evaluation order section for details.                        |\n| webhook.error.unavailable | \u2714   | \u2714   | nan    | The webhook returned 503 Service Unavailable. A webhook event will only be invoked if there is no transition target set in the original route that called the fulfillment with the failing webhook. See the evaluation order section for details.                          |\n| webhook.error.not-found  | \u2714   | \u2714   | nan    | The webhook call failed because the webhook URL was unreachable. A webhook event will only be invoked if there is no transition target set in the original route that called the fulfillment with the failing webhook. See the evaluation order section for details.                      |\n| flow-cancelled    | \u2714   | \u2714   | nan    | End-user requested cancellation of flow. This event is triggered by the End Flow With Cancellation page, see the END_FLOW_WITH_CANCELLATION symbolic transition target.                                             |\n| flow-failed     | \u2714   | \u2714   | nan    | This flow wasn't able to complete the given task. This event is triggered by the End Flow With Failure page, see the END_FLOW_WITH_FAILURE symbolic transition target.                                             |\n| flow-failed-human-escalation | \u2714   | \u2714   | nan    | End-user requested to talk to human agents. This event is triggered by the End Flow With Human Escalation page, see the END_FLOW_WITH_HUMAN_ESCALATION symbolic transition target.                                          |\n### Custom events\nYou can create custom events and event handlers. Custom events are used to handle things that happen outside the conversation with the end-user. For example, the end-user clicked a button, a certain amount of time has passed, available inventory has changed during the conversation, and so on.\nEvents are simply identified by name. You should avoid using event names that start with `sys.` or `webhook.` to avoid conflict with built-in events.\nTo invoke an event with the API, see the `queryInput.event` field of the `detectIntent` method for the `Session` type.## Evaluation order\nHandlers are evaluated in a specific order. The following general rules apply:\n- Only handlers in [scope](#scope) are evaluated.\n- Only handlers whose requirements are satisfied can be called.\n- If a handler without a transition target is called, evaluation of the list of handlers continues. Due to this rule, multiple fulfillments can add multiple messages to the [response queue](/dialogflow/cx/docs/concept/fulfillment#queue) .\n- If a handler with a transition target is called, evaluation of the list of handlers ends.\n- If a handler with fulfillment is called, and the fulfillment results in a webhook error:- If the handler has a transition target defined, the webhook silently fails.\n- If an event handler is in scope for the event, it handles the event and evaluation of the list of handlers ends.\n- If no event handler is in scope for the event, the webhook silently fails.\n- When an intent requirement is satisfied, the intent is consumed, so only the first route handler found for the intent can be called (See [intent propagation](#intent-prop) for the exceptions).\n- When a condition requirement is satisfied, the condition is not consumed, so multiple routes with the condition can be called.\n- When an event requirement is satisfied, the event is consumed, so only the first event handler found for the event can be called.\n- The [handler call stack](#call-stack) can affect evaluation order.\nThere are three phases to the evaluation:\n- Routes that have an intent requirement are evaluated in this order:- **Page-level** : Individual routes applied to the current page, in the order supplied.\n- **Page-level groups** : [Route groups](#route-group) applied to the current page, in the order supplied.\n- **Flow-level** : Routes applied to the active flow, in the order supplied.\n- **Flow-level groups** : [Route groups](#route-group) applied to the active flow, in the order supplied.\n- Routes with only a condition requirement are evaluated in this order:- **Page-level** : Individual routes applied to the current page, in the order supplied.\n- **Page-level groups** : [Route groups](#route-group) applied to the current page, in the order supplied.\n- **Flow-level (Only if the current page is the\nflow start page)** : Routes applied to the active flow, in the order supplied.\n- **Flow-level groups (Only if the current page is the\nflow start page)** : [Route groups](#route-group) applied to the active flow, in the order supplied.\n- Event handlers are evaluated in this order:- **Parameter-level** : Event handlers applied to the current page's form parameter that the agent is currently attempting to fill (reprompt handlers), in the order supplied.\n- **Page-level** : Event handlers applied to the current page, in the order supplied.\n- **Flow-level** : Event handlers applied to the active flow, in the order supplied.\n## Symbolic transition targets\nWhen entering a transition target for a handler, you can enter specific flows or pages, but you can also enter symbolic transition targets:\n| Symbolic transition target  | Description                                                              |\n|:-------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| START_PAGE      | Transition to the like-named active flow's start page.                                                   |\n| END_FLOW      | End the currently active flow and transition back to the page that caused a transition to the current flow. Also see Handler call stack and flow stack limit.                         |\n| END_FLOW_WITH_CANCELLATION  | End the currently active flow and transition back to the page that caused a transition to the current flow. The calling page can handle this transition with the flow-cancelled built-in event. Also see Handler call stack and flow stack limit.    |\n| END_FLOW_WITH_FAILURE   | End the currently active flow and transition back to the page that caused a transition to the current flow. The calling page can handle this transition with the flow-failed built-in event. Also see Handler call stack and flow stack limit.     |\n| END_FLOW_WITH_HUMAN_ESCALATION | End the currently active flow and transition back to the page that caused a transition to the current flow. The calling page can handle this transition with the flow-failed-human-escalation built-in event. Also see Handler call stack and flow stack limit. |\n| END_SESSION     | Clear current session and transition to the special page named END_SESSION. The next user input will restart the session at the start page of the Default Start Flow.                       |\n| PREVIOUS_PAGE     | Transition to the previous page that caused a transition to the current page. The page state from the previous page will be restored after transition.                           |\n| CURRENT_PAGE     | Re-transition to the current page. This can be useful if you want the agent to repeat something.                                        |\n## Handler call stack and flow stack limit\nWhen a session transitions from flow to flow with specific transition targets, each flow is pushed onto the flow [stack](https://en.wikipedia.org/wiki/Stack_(abstract_data_type)) .\n### Handler call stack\nWhen a session transitions to `END_FLOW` , it returns back to the calling page that caused a transition to the completed flow. In this situation, the handler call stack is preserved. All handlers that were previously evaluated from the calling page will be skipped, and the remaining handlers will be evaluated in order.\nFor example:\n- Page **P** has three handlers in this order: **H1** , **H2** , **H3** .\n- **H1** is evaluated, but it does not cause a transition.\n- **H2** is evaluated, and it causes a transition to flow **F** .\n- A page in flow **F** transitions to`END_FLOW`.\n- The session returns to Page **P** , which becomes active again with a preserved state.\n- The handler evaluation in page **P** continues from the status it preserved, thus **H3** is evaluated.\n### Flow stack limit\nMaximum flow stack limit is 25. Exceeding the maximum stack limit may cause flows to be popped from the stack, leading to unexpected behavior when using the `END_FLOW` transition. To avoid these potential issues, minimize the number of flow-to-flow transitions preceding the `END_FLOW` transition.\nIf the flow stack is empty, the `END_FLOW` transition ends the session.\n## Set conditions\nTo set [conditions](/dialogflow/cx/docs/reference/condition) with the console, you supply condition rules with one of three logical options:\n- Match AT LEAST ONE rule (OR)\n- Match EVERY rule (AND)\n- Customize expression\nAs a convenience, you can use the AND/OR options to create simple or compound conditions for parameter values.\nYou can use the free form **Customize expression** option for all types of conditions, including [system functions](/dialogflow/cx/docs/reference/condition#func) and [boolean constants](/dialogflow/cx/docs/reference/condition#bool-const) .\nFor example, to set a condition that has a 10% chance of passing evaluation, select the **Customize expression** option and enter `$sys.func.rand() < 0.1` in the **Condition** field:", "guide": "Dialogflow"}