{"title": "Dialogflow - Data store agents", "url": "https://cloud.google.com/dialogflow/vertex/docs/concept/data-store-agent", "abstract": "# Dialogflow - Data store agents\n**Note:** Data store agents are excluded from the [Dialogflow SLA](/dialogflow/sla) .\nData store agents are a special type of Dialogflow agent that can provide LLM generated agent responses based on your website content and uploaded data.\nTo create this agent, you provide [data stores](/dialogflow/vertex/docs/concept/data-store) when creating the agent.\nA data store agent has special [state handlers](/dialogflow/cx/docs/concept/handler) called . Using these data store handlers, your data store agent can have conversations about the content with your end-users.\n", "content": "## Limitations\nThe following limitations apply:\n- This feature currently only supports select languages in GA. See the data store column in the [language reference](/dialogflow/cx/docs/reference/language) .\n- Only the following [regions](/dialogflow/cx/docs/concept/region#avail) are supported:`global`,`us`multi-region, and`eu`multi-region.\n### Access control\nIf you are the project owner, you have all the permissions needed to create a data store agent. If you are not the project owner, you must have the following roles:\n- Dialogflow Admin\n- Discovery Engine Admin\nFor more information, see the [Dialogflow access control guide](/dialogflow/cx/docs/concept/access-control) .\n## Create a data store agent\nTo create a data store agent:\n- If you have not already, follow the Dialogflow [setup](/dialogflow/cx/docs/quick/setup) instructions.\n- Go to the Vertex AI Conversation console: [Vertex AI Conversation console](https://console.cloud.google.com/gen-app-builder/) \n- Select your project from the console drop-down.\n- If you have not already activated the API, read and agree to the Terms of Service, then click **Continue and activatethe API** .\n- Click **Create a New App** or **New App** .\n- Select **Chat** .\n- Provide your company name in the **Agent configurations** section.\n- Expand the time zone and language settings section.\n- Select a time zone.\n- Select a [default language](/dialogflow/cx/docs/reference/language) .\n- Provide an agent name in the **Your agent name** section.\n- Select a [region or multi-region](/dialogflow/cx/docs/concept/region) in the **Location of your agent** section.\n- Click **Continue** .\n- Connect a [data store](/dialogflow/vertex/docs/concept/data-store) to your agent by doing one of the following:- Select an existing data store that you [previously created](/dialogflow/vertex/docs/concept/data-store#create) .\n- Create a new data store:- Click **Create New Data Store** .\n- Choose a data [source](/dialogflow/vertex/docs/concept/data-store#sources) .\n- Provide data and configuration for the data store source you selected. Your data store location should correspond to the [agent location](/dialogflow/cx/docs/concept/region) .\n- Click **Create** to create the data store.\n- Select your new data store.\n- Click **Create** .\n- Your agent is now created, and you are automatically redirected to the **Available data stores** page, where you can add more data stores as needed.\n- If you have created a new data store for a website, you must [verify your domain](/generative-ai-app-builder/docs/domain-verification) .\n- To open your agent with Dialogflow CX, click **Preview** in the left panel. In the [Dialogflow CX console](/dialogflow/cx/docs/concept/console) , you can [edit or add data store handlers](#add-existing-agent) , [deploy your agent](#deploy) , and optionally add [flows](/dialogflow/cx/docs/concept/flow) that will handle scenarios not covered by the data stores.## Test your agent\n**Note:** It can take up to 4 hours for new data store web content to be indexed and properly handled by your agent.\nYou can use the [Dialogflow CX simulator](/dialogflow/cx/docs/concept/console#simulator) to test your agent.\n## Improve the agent's generative responses\nIf you find some responses during testing don't meet your expectations, try the following.\nYou can overwrite an answer by adding an [FAQ entry](/dialogflow/vertex/docs/concept/data-store#structured) for a specific question.\nFurther customizations are available for your agent in the [Dialogflow Console](/dialogflow/cx/docs/concept/console) . To navigate to the console, click the name of your agent in the list of agents available in the console. Then, open the Dialogflow **Agent Settings** page and navigate to the **ML** tab, and then the **Generative AI** sub-tab. The following customizations are available:\n### Grounding confidence\nFor each response generated from the content of your connected data stores, we evaluate a confidence level, which gauges the confidence that all information in the response is supported by information in the data stores. You can customize which types of responses to allow by selecting the lowest confidence level you are comfortable with. If a response comes back with a strictly lower confidence than that level, it won't be shown.\nThere are 5 confidence levels to choose from: very low, low, medium, high, and very high.\n### Data store prompt\nYou have the option to add additional information about the agent that can improve the quality of answers generated from data store content and make them feel more like your brand:\n- **Agent name** - what the agent should call itself. If you leave it unset, the default value **AI Assistant** will be used.\n- **Agent identity** - what the agent persona will be. If you leave it unset, the default value **AI Assistant** will be used.\n- **Company name** should be set to the name of your company. This should have already been set as part of the agent creation flow, but is adjustable as needed. It is recommended to set this field correctly (and especially not leave it empty), lest quality of generated answers suffer.\n- **Company description** stands for a short description of what the company does or offers.\n- **Agent scope** - where the agent is meant to be used. If you leave it unset, the default value **on the company website** will be used.\nOnce you've filled out this section partially or fully, you can inspect on the right side, under **Your prompt** , the short paragraph that was derived from these settings and that will be used as part of answer generation.\n### Banned phrases\nYou have the option to define specific phrases which shouldn't be allowed. If the generated response (or for that matter, the content going into the prompt used to generate the response, for example the last user utterance) contains any of the banned phrases verbatim, then that response won't be shown.\n### Data store model selection and summarization prompt\nWhen a user query is processed, the agent performs a search of the data stores to find good sources. The agent then sends the user query and sources found to the LLM, which performs a summarization.\nYou can select which model to use for summarization and optionally provide your own prompt.\nYou can select the generative model used by a data store agent for the summarization generative request. If none gets selected, text-bison@001 is used. The following table contains the available options:\n| Model Identifier      | Language Support       |\n|:--------------------------------------|:-----------------------------------------|\n| text-bison@001      | Available in all supported languages. |\n| text-bison@002      | Available in all supported languages. |\n| text-bison@001 tuned (conversational) | Only English is supported at the moment. |\n| text-bison@001 tuned (informational) | Only English is supported at the moment. |\n| gemini-pro       | Available in all supported languages. |\n**Note:** Providing a custom prompt may influence the quality of answers either positively or negatively. You are responsible for the quality of answers.\nYou can provide your own prompt for the summarization LLM call. The prompt is a text template that may contain predefined placeholders. The placeholders will be replaced with the appropriate values at runtime and the final text will be sent to the LLM.\nThe placeholders are as follows:\n- `$original-query`: The user's query text.\n- `$rewritten-query`: Dialogflow uses a rewriter module to rewrite the original user query into a more accurate format.\n- `$sources` : Dialogflow uses Enterprise Search to search for sources based on the user's query. The found sources are rendered in a specific format:```\n[1] title of first sourcecontent of first source[2] title of second sourcecontent of first source\n```\n- `$conversation` : The conversation history is rendered in the following format:```\nHuman: user's first queryAI: answer to user's first queryHuman: user's second queryAI: answer to user's second query\n```\nA custom prompt should instruct the LLM to return \"NOT_ENOUGH_INFORMATION\" when it cannot provide an answer. The agent will transform this constant to a user friendly message for the user.\n## Deploy your agent\nThere are many ways to deploy your agent:\n- The simplest option is to use a [Dialogflow CX integration](/dialogflow/cx/docs/concept/integration) , which provides a user interface for your agent. Each integration provides instructions for deployment.\n- The [DialogflowMessenger](/dialogflow/cx/docs/concept/integration/dialogflow-messenger) integration is a particularly good option for data store agents. It has built-in options for generative features.\n- You can create your own user interface and [use the Dialogflow CX API for interactions](/dialogflow/cx/docs/quick/api) . Your user interface implementation is in control of deployment.## Track your agent's performance\nYou can monitor your agents [conversation history](/dialogflow/cx/docs/concept/conversation-history) and you can use the [analytics tool](/dialogflow/cx/docs/concept/analytics) for agent statistics.\n## Special intents\nIn addition to handling questions about the content you provide, the data store agent can handle the following types of questions:\n- **Agent identification** : Handles questions like \"Who are you?\" or \"Are you human?\".\n- **Escalate to a human agent** : Handles questions like \"I want to talk to a human\" or \"I want to talk to a real person\".\nThis is accomplished by automatically generated [intents](/dialogflow/cx/docs/concept/intent) and [intent routes](/dialogflow/cx/docs/concept/handler#route) .\n## Hybrid agents\nIf you have an existing Dialogflow CX agent, you can upgrade this agent to a , which combines the power of precise conversation controls (flows, parameters, intents, conditions, transitions, and so on) with data store handler generative features.\nAs part of this upgrade, you may wish to delete or temporarily disable intent routes (while testing data store handlers) for certain conversation scenarios from your agent, because the data store handlers can handle those scenarios more simply.\nThe following scenarios are recommended for data store handlers:\n- Questions that can be answered by your organization's documents or website.\n- FAQs that do not require database lookups.\nThe following scenarios are not recommended for data store handlers:\n- Content that does not have answers to desired questions.\n- Questions that require database lookups or server requests.\n- Scenarios that require data redaction.\n- Scenarios that require deterministic agent responses.\nDialogflow evaluates end-user input in the following order of preference:\n- Intent match for [routes in scope](/dialogflow/cx/docs/concept/handler#route) \n- FAQ data store content\n- Unstructured data store content## Input evaluation order\nDialogflow evaluates end-user input in the following order for hybrid agents:\n- Parameter input while form filling.\n- Intent matches for [routes in scope](/dialogflow/cx/docs/concept/handler#route) .\n- Data store handler with FAQ data store content.\n- Data store handler with unstructured data store content.## Add or edit data store handlers for an existing agent\nData store handlers are a special type of Dialogflow state handler. This means that you can apply them to flows or pages, and that they are evaluated using the same [scope rules](/dialogflow/cx/docs/concept/handler#scope) .\nTo add or edit a data store handler:\n- Go to the [Dialogflow CX Console](https://dialogflow.cloud.google.com/cx/projects) .\n- Select your Google Cloud project.\n- Select the agent.\n- Select the flow associated with the data store handler. This is commonly the [default start flow](/dialogflow/cx/docs/concept/flow#start) .\n- Select the page associated with the data store handler. This is commonly the [start page](/dialogflow/cx/docs/concept/flow#start-page) .\n- Click **Add state handler** in the page data, then select **data store** .\n- If you need to create a data store, you will be taken to the Vertex AI Search and Conversation user interface. See the [data store information](/dialogflow/vertex/docs/concept/data-store) to help you make selections.\n- If you already have a data store, click **Edit data store** .\n- Make updates as needed and save when you are complete. See information below about data store specific settings.\n### Agent responses\nIn the **Agent responses** section, you can provide custom responses that reference generative answers. Use `$request.knowledge.questions[0]` in the **Agent says** section to provide the generative answer.\n### Data store response options\nYou can update the **Link maximum** field to indicate the maximum number of supplemental links that should be provided by the generative answers.\n## Handle conversation digressions\nAn end-user may ask clarifying questions during a conversation. For example, during credit card information collection, they may want to clarify what a CVV is. In this case, your agent should answer the question and return to collecting the necessary credit card information. To accomplish this, you can create a data store handler with data stores that answer the question, apply that handler to the flow start page of the flow that handles credit card information collection, and set a transition target for this handler to return to the \"current page\".\n## Handle undesired intent matches\nIf your agent is matching intents when it should be using a data store handler, you can try the following to correct this:\n- Delete or modify training phrases that are vague, so that all of your training phrases precisely handle the desired intention and do not conflict with your data store content.\n- Use [negative examples](/dialogflow/cx/docs/concept/intent#negative) to avoid intent matching.## Data store filtering\nIn some cases, you may only want certain data stores available for queries, depending on session parameter values. For example, you may have unique data stores for product categories. To accomplish data store filtering for product categories:\n- Set session parameters to product categories.\n- Create condition routes that check the values of the session parameters and transition to a specific page that has the desired data store handler.\n- The data store handler should transition back to the calling page, so that the conversation can continue.## Personalization\nTo make generative answers more relevant to end-users, you can provide Dialogflow with information about users.\nThis information is provided as JSON. There is no expected schema, so you are free to define the object properties. This JSON is sent to the large language model as-is, so descriptive property names and values lead to the best results.\nFor example:\n```\n{\u00a0 \"subscription plan\": \"Business Premium Plus\",\u00a0 \"devices owned\": [\u00a0 \u00a0 {\"model\": \"Google Pixel 7\"},\u00a0 \u00a0 {\"model\": \"Google Pixel Tablet\"}\u00a0 ]}\n```\n### Personalizing with the Dialogflow API\nYou can provide this data to Dialogflow when sending detect intent requests. This information must be provided in every detect intent request, because it is not persisted in the session.\nProvide this information in the `queryParams.endUserMetadata` field in the `Sessions.detectIntent` method.### Personalizing with Dialogflow Messenger\nYou can provide this data to the Dialogflow Messenger integration. See the [setContext](/dialogflow/cx/docs/concept/integration/dialogflow-messenger#setcontext) method.\n## Search configuration\nTo have better control over the agent behavior and improve the quality of the answers, boost and filter search configurations are exposed to let you boost, bury and filter documents.\nBoost controls enable you to change search result ranking by applying a boost value (greater than zero for higher ranking, less than zero for lower ranking) to specific documents.\nFilter controls let you to either keep or remove search results based on the specified filter criteria.\nThis information is provided as JSON to Dialogflow requests. The format of the JSON depends on the search control type.\n### Boost control\nThe following search configuration describes a boost control:\n```\n\"searchConfig\": {\u00a0 \"boostSpecs\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"dataStores\": [ \"DATASTORE_ID\" ],\u00a0 \u00a0 \u00a0 \"spec\": [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"conditionBoostSpecs\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"condition\": \"CONDITION\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"boost\": \"1.0\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\n**Note:** `DATASTORE_ID` is the full name of the datastore: , `CONDITION` must follow the Vertex AI Search and Conversation's [filter expression syntax](/generative-ai-app-builder/docs/filter-search-metadata#filter-expression-syntax) . and the [boost value](/generative-ai-app-builder/docs/configure-serving-controls#boost) must be between -1.0 and 1.0.\n### Filter control\nThe following search configuration describes a filter control:\n```\n\"searchConfig\": {\u00a0 \"filterSpecs\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"dataStores\": [ \"DATASTORE_ID\" ],\u00a0 \u00a0 \u00a0 \"filter\": \"CONDITION\"\u00a0 \u00a0 }\u00a0 ]}\n```\n**Note:** `DATASTORE_ID` is the full name of the datastore: , and `CONDITION` must follow the Vertex AI Search and Conversation's [filter expression syntax](/generative-ai-app-builder/docs/filter-search-metadata#filter-expression-syntax) .\n### Setup search configuration with the Dialogflow API\nYou can provide this data to Dialogflow when sending detect intent requests. This information must be provided in every detect intent request, because it is not persisted in the session.\nProvide this information in the `queryParams.searchConfig` field in the `Sessions.detectIntent` method.### Setup search configuration with Dialogflow Messenger\nYou can provide this data to the Dialogflow Messenger integration.\nTo apply a search control, the following snippet needs to be added to the DF messenger code when embedding it into a website:\n```\n<script>\u00a0 document.addEventListener('df-messenger-loaded', () => {\u00a0 \u00a0 const dfMessenger = document.querySelector('df-messenger');\u00a0 \u00a0 const searchConfig = { ... }\u00a0 \u00a0 dfMessenger.setQueryParameters(searchConfig);\u00a0 });</script>\n```\nSee the [setQueryParameters](/dialogflow/cx/docs/concept/integration/dialogflow-messenger#setqueryparameters) method.", "guide": "Dialogflow"}