{"title": "Dialogflow - \u5f9e\u97f3\u983b\u8f38\u5165\u6d41\u4e2d\u6aa2\u6e2c\u610f\u5716", "url": "https://cloud.google.com/dialogflow/es/docs/how/detect-intent-stream?hl=zh-cn", "abstract": "# Dialogflow - \u5f9e\u97f3\u983b\u8f38\u5165\u6d41\u4e2d\u6aa2\u6e2c\u610f\u5716\n\u672c\u9801\u9762\u4ecb\u7d39\u5982\u4f55\u4f7f\u7528 API \u5c07\u97f3\u983b\u8f38\u5165\u6d41\u5f0f\u50b3\u8f38\u7d66\u6aa2\u6e2c\u610f\u5716\u8acb\u6c42\u3002Dialogflow \u6703\u8655\u7406\u97f3\u983b\u4e26\u5c07\u5176\u8f49\u63db\u7232\u6587\u5b57\uff0c\u7136\u5f8c\u518d\u5617\u8a66\u5339\u914d\u610f\u5716\u3002\u9019\u7a2e\u8f49\u63db\u7a31\u7232\u97f3\u983b\u8f38\u5165\u3001\u8a9e\u97f3\u8b58\u5225 \u6216 \u8a9e\u97f3\u8f49\u6587\u5b57 (STT)\u3002\n**\u6ce8\u610f** \uff1aRPC API \u548c\u5ba2\u6236\u7aef\u5eab\u652f\u6301\u6d41\u5f0f\u50b3\u8f38\uff0c\u4f46 REST API \u4e0d\u652f\u6301\u3002\n", "content": "## \u6e96\u5099\u5de5\u4f5c\n\u6b64\u529f\u80fd\u50c5\u9069\u7528\u65bc\u4f7f\u7528 API [\u8207\u6700\u7d42\u7528\u6236\u4e92\u52d5](https://cloud.google.com/dialogflow/docs/api-overview?hl=zh-cn) \u7684\u60c5\u6cc1\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f [\u96c6\u6210](https://cloud.google.com/dialogflow/docs/integrations?hl=zh-cn) \u670d\u52d9\uff0c\u5247\u53ef\u4ee5\u8df3\u904e\u672c\u6307\u5357\u3002\n\u5728\u95b1\u8b80\u672c\u6307\u5357\u4e4b\u524d\uff0c\u8acb\u5148\u5b8c\u6210\u4ee5\u4e0b\u4e8b\u9805\uff1a\n- \u95b1\u8b80 [Dialogflow \u57fa\u790e\u77e5\u8b58](https://cloud.google.com/dialogflow/docs/basics?hl=zh-cn) \u3002\n- \u57f7\u884c [\u8a2d\u7f6e\u6b65\u9a5f](https://cloud.google.com/dialogflow/docs/quick/setup?hl=zh-cn) \u3002## \u5275\u5efa\u4ee3\u7406\n\u5982\u679c\u5c1a\u672a\u5275\u5efa\u4ee3\u7406\uff0c\u8acb\u7acb\u5373\u5275\u5efa\u4e00\u500b\uff1a- \u8f49\u5230 [Dialogflow ES \u63a7\u5236\u6aaf](https://dialogflow.cloud.google.com?hl=zh-cn) \u3002\n- \u5982\u679c\u7cfb\u7d71\u8981\u6c42\u767b\u9304 Dialogflow \u63a7\u5236\u6aaf\uff0c\u8acb\u767b\u9304\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Dialogflow \u63a7\u5236\u6aaf\u6982\u89bd](https://cloud.google.com/dialogflow/docs/console?hl=zh-cn) \u3002\n- \u9ede\u64ca\u5de6\u5074\u908a\u6b04\u83dc\u55ae\u4e2d\u7684 **\u5275\u5efa\u4ee3\u7406** (Create Agent)\u3002\u5982\u679c\u60a8\u5df2\u6709\u5176\u4ed6\u4ee3\u7406\uff0c\u8acb\u9ede\u64ca\u4ee3\u7406\u540d\u7a31\uff0c\u6efe\u52d5\u5230\u5e95\u90e8\uff0c\u7136\u5f8c\u9ede\u64ca **\u5275\u5efa\u65b0\u4ee3\u7406** (Create new agent)\u3002\n- \u8f38\u5165\u60a8\u7684\u4ee3\u7406\u540d\u7a31\u3001\u9ed8\u8a8d\u8a9e\u8a00\u548c\u9ed8\u8a8d\u6642\u5340\u3002\n- \u5982\u679c\u60a8\u5df2\u7d93\u5275\u5efa\u4e86\u9805\u76ee\uff0c\u8acb\u8f38\u5165\u8a72\u9805\u76ee\u3002\u5982\u679c\u8981\u5141\u8a31 Dialogflow \u63a7\u5236\u6aaf\u5275\u5efa\u9805\u76ee\uff0c\u8acb\u9078\u64c7 **\u5275\u5efa\u65b0 Google \u9805\u76ee** (Create a new Google project)\u3002\n- \u9ede\u64ca **\u5275\u5efa** (Create) \u6309\u9215\u3002## \u5c07\u793a\u4f8b\u6587\u4ef6\u5c0e\u5165\u4ee3\u7406\n\u672c\u6307\u5357\u4e2d\u7684\u6b65\u9a5f\u5c0d\u60a8\u7684\u4ee3\u7406\u9032\u884c\u4e86\u5047\u8a2d\uff0c\u56e0\u6b64\u60a8\u9700\u8981 [import](https://cloud.google.com/dialogflow/docs/agents-settings?hl=zh-cn#export) \u7232\u672c\u6307\u5357\u6e96\u5099\u7684\u4ee3\u7406\u3002 \u5c0e\u5165\u6642\uff0c\u9019\u4e9b\u6b65\u9a5f\u4f7f\u7528 \u201c\u6062\u5fa9\u201d(restore) \u9078\u9805\uff0c\u8a72\u9078\u9805\u6703\u8986\u84cb\u6240\u6709\u4ee3\u7406\u8a2d\u7f6e\u3001\u610f\u5716\u548c\u5be6\u9ad4\u3002\n\u5982\u9700\u5c0e\u5165\u6587\u4ef6\uff0c\u8acb\u6309\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff1a\n- \u4e0b\u8f09 [room-booking-agent.zip](https://cloud.google.com/static/dialogflow/es/docs/data/room-booking-agent.zip?hl=zh-cn) \u6587\u4ef6\u3002\n- \u8f49\u5230 [Dialogflow ES \u63a7\u5236\u6aaf](https://dialogflow.cloud.google.com?hl=zh-cn) \u3002\n- \u9078\u64c7\u60a8\u7684\u4ee3\u7406\u3002\n- \u9ede\u64ca\u4ee3\u7406\u540d\u7a31\u65c1\u908a\u7684\u8a2d\u7f6e\u6309\u9215\u3002\n- \u9078\u64c7 **\u5c0e\u51fa\u548c\u5c0e\u5165** \u6a19\u7c64\u9801\u3002\n- \u9078\u64c7 **\u5f9e ZIP \u6587\u4ef6\u6062\u5fa9** (Restore from ZIP)\uff0c\u7136\u5f8c\u6309\u7167\u8aaa\u660e\u6062\u5fa9\u4e0b\u8f09\u7684 zip \u6587\u4ef6\u3002## \u6d41\u5f0f\u50b3\u8f38\u57fa\u790e\u77e5\u8b58\n[Session](https://cloud.google.com/dialogflow/docs/reference/common-types?hl=zh-cn#sessions) \u985e\u578b\u7684 `streamingDetectIntent` \u65b9\u6cd5\u8fd4\u56de\u96d9\u5411 gRPC \u6d41\u5f0f\u50b3\u8f38\u5c0d\u8c61\u3002\u6b64\u5c0d\u8c61\u7684\u53ef\u7528\u65b9\u6cd5\u96a8\u8a9e\u8a00\u800c\u8b8a\uff0c\u56e0\u6b64\u8acb\u53c3\u95b1\u8207\u60a8\u7684\u5ba2\u6236\u7aef\u5eab\u76f8\u61c9\u7684\u53c3\u8003\u6587\u6a94\uff0c\u4ee5\u77ad\u89e3\u8a73\u60c5\u3002\n\u6d41\u5f0f\u50b3\u8f38\u5c0d\u8c61\u7528\u65bc\u4f75\u767c\u6536\u767c\u6578\u64da\u3002\u4f7f\u7528\u6b64\u5c0d\u8c61\uff0c\u5ba2\u6236\u7aef\u53ef\u5c07\u97f3\u983b\u5167\u5bb9\u6d41\u5f0f\u50b3\u8f38\u5230 Dialogflow\uff0c\u4e26\u540c\u6642\u5075\u807d `StreamingDetectIntentResponse` \u3002\n`streamingDetectIntent` \u65b9\u6cd5\u7684 `query_input.audio_config.single_utterance` \u53c3\u6578\u6703\u5f71\u97ff\u8a9e\u97f3\u8b58\u5225\uff1a\n- \u5982\u679c\u7232`false`\uff08\u9ed8\u8a8d\u503c\uff09\uff0c\u5247\u5728\u5ba2\u6236\u7aef\u95dc\u9589\u6578\u64da\u6d41\u4e4b\u524d\uff0c\u4e0d\u6703\u505c\u6b62\u8a9e\u97f3\u8b58\u5225\u3002\n- \u5982\u679c\u7232`true`\uff0c\u5247 Dialogflow \u5c07\u6aa2\u6e2c\u8f38\u5165\u97f3\u983b\u4e2d\u7684\u55ae\u7368\u4e00\u689d\u8a71\u8a9e\u3002Dialogflow \u6aa2\u6e2c\u5230\u97f3\u983b\u7684\u8a9e\u97f3\u505c\u6b62\u6216\u66ab\u505c\u6642\uff0c\u5b83\u6703\u505c\u6b62\u8a9e\u97f3\u8b58\u5225\uff0c\u4e26\u5411\u5ba2\u6236\u7aef\u767c\u9001`StreamingDetectIntentResponse`\u53ca`END_OF_SINGLE_UTTERANCE`\u7684\u8b58\u5225\u7d50\u679c\u3002\u6536\u5230`END_OF_SINGLE_UTTERANCE`\u5f8c\uff0cDialogflow \u6703\u5ffd\u7565\u8a72\u6d41\u4e2d\u5411\u5176\u767c\u9001\u7684\u4efb\u4f55\u97f3\u983b\u3002\n\u5728\u96d9\u5411\u6d41\u5f0f\u50b3\u8f38\u4e2d\uff0c\u5ba2\u6236\u7aef\u53ef\u4ee5 \u534a\u95dc\u9589\u6d41\u5f0f\u5c0d\u8c61\uff0c\u4ee5\u544a\u77e5\u670d\u52d9\u5668\u5b83\u4e0d\u6703\u518d\u7e7c\u7e8c\u767c\u9001\u6578\u64da\u3002\u4f8b\u5982\uff0c\u5728 Java \u548c Go \u4e2d\uff0c\u6b64\u65b9\u6cd5\u7a31\u7232 `closeSend` \u3002\u5728\u4ee5\u4e0b\u60c5\u6cc1\u4e0b\uff0c\u534a\u95dc\u9589\uff08\u4e26\u975e\u53d6\u6d88\uff09\u6578\u64da\u6d41\u975e\u5e38\u91cd\u8981\uff1a\n- \u5ba2\u6236\u7aef\u5df2\u5b8c\u6210\u6578\u64da\u767c\u9001\u3002\n- \u5ba2\u6236\u7aef\u914d\u7f6e\u7232`single_utterance`\u8a2d\u7232 true\uff0c\u4e26\u4e14\u6536\u5230\u4e86`StreamingDetectIntentResponse`\u4ee5\u53ca\u8b58\u5225\u7d50\u679c`END_OF_SINGLE_UTTERANCE`\u3002\n\u95dc\u9589\u6578\u64da\u6d41\u5f8c\uff0c\u5ba2\u6236\u7aef\u61c9\u6839\u64da\u9700\u8981\u4f7f\u7528\u65b0\u6578\u64da\u6d41\u767c\u8d77\u65b0\u8acb\u6c42\u3002\n## \u6d41\u5f0f\u50b3\u8f38\u6aa2\u6e2c\u610f\u5716\n\u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528 [Session](https://cloud.google.com/dialogflow/docs/reference/common-types?hl=zh-cn#sessions) \u985e\u578b\u7684 `streamingDetectIntent` \u65b9\u6cd5\u6d41\u5f0f\u50b3\u8f38\u97f3\u983b\u3002\n\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/dialogflow/detect_intent/detect_intent.go) \n```\nfunc DetectIntentStream(projectID, sessionID, audioFile, languageCode string) (string, error) {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 sessionClient, err := dialogflow.NewSessionsClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return \"\", err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer sessionClient.Close()\u00a0 \u00a0 \u00a0 \u00a0 if projectID == \"\" || sessionID == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return \"\", errors.New(fmt.Sprintf(\"Received empty project (%s) or session (%s)\", projectID, sessionID))\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 sessionPath := fmt.Sprintf(\"projects/%s/agent/sessions/%s\", projectID, sessionID)\u00a0 \u00a0 \u00a0 \u00a0 // In this example, we hard code the encoding and sample rate for simplicity.\u00a0 \u00a0 \u00a0 \u00a0 audioConfig := dialogflowpb.InputAudioConfig{AudioEncoding: dialogflowpb.AudioEncoding_AUDIO_ENCODING_LINEAR_16, SampleRateHertz: 16000, LanguageCode: languageCode}\u00a0 \u00a0 \u00a0 \u00a0 queryAudioInput := dialogflowpb.QueryInput_AudioConfig{AudioConfig: &audioConfig}\u00a0 \u00a0 \u00a0 \u00a0 queryInput := dialogflowpb.QueryInput{Input: &queryAudioInput}\u00a0 \u00a0 \u00a0 \u00a0 streamer, err := sessionClient.StreamingDetectIntent(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return \"\", err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 f, err := os.Open(audioFile)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return \"\", err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer f.Close()\u00a0 \u00a0 \u00a0 \u00a0 go func() {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audioBytes := make([]byte, 1024)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 request := dialogflowpb.StreamingDetectIntentRequest{Session: sessionPath, QueryInput: &queryInput}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = streamer.Send(&request)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _, err := f.Read(audioBytes)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err == io.EOF {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 streamer.CloseSend()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 request = dialogflowpb.StreamingDetectIntentRequest{InputAudio: audioBytes}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = streamer.Send(&request)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }()\u00a0 \u00a0 \u00a0 \u00a0 var queryResult *dialogflowpb.QueryResult\u00a0 \u00a0 \u00a0 \u00a0 for {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response, err := streamer.Recv()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err == io.EOF {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 recognitionResult := response.GetRecognitionResult()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 transcript := recognitionResult.GetTranscript()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Printf(\"Recognition transcript: %s\\n\", transcript)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult = response.GetQueryResult()\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fulfillmentText := queryResult.GetFulfillmentText()\u00a0 \u00a0 \u00a0 \u00a0 return fulfillmentText, nil}\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow/snippets/src/main/java/com/example/dialogflow/DetectIntentStream.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.api.gax.rpc.BidiStream;import com.google.cloud.dialogflow.v2.AudioEncoding;import com.google.cloud.dialogflow.v2.InputAudioConfig;import com.google.cloud.dialogflow.v2.QueryInput;import com.google.cloud.dialogflow.v2.QueryResult;import com.google.cloud.dialogflow.v2.SessionName;import com.google.cloud.dialogflow.v2.SessionsClient;import com.google.cloud.dialogflow.v2.StreamingDetectIntentRequest;import com.google.cloud.dialogflow.v2.StreamingDetectIntentResponse;import com.google.protobuf.ByteString;import java.io.FileInputStream;import java.io.IOException;class DetectIntentStream {\u00a0 // DialogFlow API Detect Intent sample with audio files processes as an audio stream.\u00a0 static void detectIntentStream(String projectId, String audioFilePath, String sessionId)\u00a0 \u00a0 \u00a0 throws IOException, ApiException {\u00a0 \u00a0 // String projectId = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 // String audioFilePath = \"path_to_your_audio_file\";\u00a0 \u00a0 // Using the same `sessionId` between requests allows continuation of the conversation.\u00a0 \u00a0 // String sessionId = \"Identifier of the DetectIntent session\";\u00a0 \u00a0 // Instantiates a client\u00a0 \u00a0 try (SessionsClient sessionsClient = SessionsClient.create()) {\u00a0 \u00a0 \u00a0 // Set the session name using the sessionId (UUID) and projectID (my-project-id)\u00a0 \u00a0 \u00a0 SessionName session = SessionName.of(projectId, sessionId);\u00a0 \u00a0 \u00a0 // Instructs the speech recognizer how to process the audio content.\u00a0 \u00a0 \u00a0 // Note: hard coding audioEncoding and sampleRateHertz for simplicity.\u00a0 \u00a0 \u00a0 // Audio encoding of the audio content sent in the query request.\u00a0 \u00a0 \u00a0 InputAudioConfig inputAudioConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAudioConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioEncoding(AudioEncoding.AUDIO_ENCODING_LINEAR_16)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setLanguageCode(\"en-US\") // languageCode = \"en-US\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSampleRateHertz(16000) // sampleRateHertz = 16000\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Build the query with the InputAudioConfig\u00a0 \u00a0 \u00a0 QueryInput queryInput = QueryInput.newBuilder().setAudioConfig(inputAudioConfig).build();\u00a0 \u00a0 \u00a0 // Create the Bidirectional stream\u00a0 \u00a0 \u00a0 BidiStream<StreamingDetectIntentRequest, StreamingDetectIntentResponse> bidiStream =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sessionsClient.streamingDetectIntentCallable().call();\u00a0 \u00a0 \u00a0 // The first request must **only** contain the audio configuration:\u00a0 \u00a0 \u00a0 bidiStream.send(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 StreamingDetectIntentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSession(session.toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryInput(queryInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 try (FileInputStream audioStream = new FileInputStream(audioFilePath)) {\u00a0 \u00a0 \u00a0 \u00a0 // Subsequent requests must **only** contain the audio data.\u00a0 \u00a0 \u00a0 \u00a0 // Following messages: audio chunks. We just read the file in fixed-size chunks. In reality\u00a0 \u00a0 \u00a0 \u00a0 // you would split the user input by time.\u00a0 \u00a0 \u00a0 \u00a0 byte[] buffer = new byte[4096];\u00a0 \u00a0 \u00a0 \u00a0 int bytes;\u00a0 \u00a0 \u00a0 \u00a0 while ((bytes = audioStream.read(buffer)) != -1) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bidiStream.send(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 StreamingDetectIntentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInputAudio(ByteString.copyFrom(buffer, 0, bytes))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 // Tell the service you are done sending data\u00a0 \u00a0 \u00a0 bidiStream.closeSend();\u00a0 \u00a0 \u00a0 for (StreamingDetectIntentResponse response : bidiStream) {\u00a0 \u00a0 \u00a0 \u00a0 QueryResult queryResult = response.getQueryResult();\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"Intent Display Name: %s\\n\", queryResult.getIntent().getDisplayName());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"Query Text: '%s'\\n\", queryResult.getQueryText());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Detected Intent: %s (confidence: %f)\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getIntent().getDisplayName(), queryResult.getIntentDetectionConfidence());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Fulfillment Text: '%s'\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getFulfillmentMessagesCount() > 0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ? queryResult.getFulfillmentMessages(0).getText()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : \"Triggered Default Fallback Intent\");\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow/detect.js) \n```\nconst fs = require('fs');const util = require('util');const {Transform, pipeline} = require('stream');const {struct} = require('pb-util');const pump = util.promisify(pipeline);// Imports the Dialogflow libraryconst dialogflow = require('@google-cloud/dialogflow');// Instantiates a session clientconst sessionClient = new dialogflow.SessionsClient();// The path to the local file on which to perform speech recognition, e.g.// /path/to/audio.raw const filename = '/path/to/audio.raw';// The encoding of the audio file, e.g. 'AUDIO_ENCODING_LINEAR_16'// const encoding = 'AUDIO_ENCODING_LINEAR_16';// The sample rate of the audio file in hertz, e.g. 16000// const sampleRateHertz = 16000;// The BCP-47 language code to use, e.g. 'en-US'// const languageCode = 'en-US';const sessionPath = sessionClient.projectAgentSessionPath(\u00a0 projectId,\u00a0 sessionId);const initialStreamRequest = {\u00a0 session: sessionPath,\u00a0 queryInput: {\u00a0 \u00a0 audioConfig: {\u00a0 \u00a0 \u00a0 audioEncoding: encoding,\u00a0 \u00a0 \u00a0 sampleRateHertz: sampleRateHertz,\u00a0 \u00a0 \u00a0 languageCode: languageCode,\u00a0 \u00a0 },\u00a0 },};// Create a stream for the streaming request.const detectStream = sessionClient\u00a0 .streamingDetectIntent()\u00a0 .on('error', console.error)\u00a0 .on('data', data => {\u00a0 \u00a0 if (data.recognitionResult) {\u00a0 \u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 \u00a0 `Intermediate transcript: ${data.recognitionResult.transcript}`\u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 console.log('Detected intent:');\u00a0 \u00a0 \u00a0 const result = data.queryResult;\u00a0 \u00a0 \u00a0 // Instantiates a context client\u00a0 \u00a0 \u00a0 const contextClient = new dialogflow.ContextsClient();\u00a0 \u00a0 \u00a0 console.log(` \u00a0Query: ${result.queryText}`);\u00a0 \u00a0 \u00a0 console.log(` \u00a0Response: ${result.fulfillmentText}`);\u00a0 \u00a0 \u00a0 if (result.intent) {\u00a0 \u00a0 \u00a0 \u00a0 console.log(` \u00a0Intent: ${result.intent.displayName}`);\u00a0 \u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 console.log(' \u00a0No intent matched.');\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 const parameters = JSON.stringify(struct.decode(result.parameters));\u00a0 \u00a0 \u00a0 console.log(` \u00a0Parameters: ${parameters}`);\u00a0 \u00a0 \u00a0 if (result.outputContexts && result.outputContexts.length) {\u00a0 \u00a0 \u00a0 \u00a0 console.log(' \u00a0Output contexts:');\u00a0 \u00a0 \u00a0 \u00a0 result.outputContexts.forEach(context => {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 const contextId =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 contextClient.matchContextFromProjectAgentSessionContextName(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 context.name\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 const contextParameters = JSON.stringify(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 struct.decode(context.parameters)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 console.log(` \u00a0 \u00a0${contextId}`);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 console.log(` \u00a0 \u00a0 \u00a0lifespan: ${context.lifespanCount}`);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 console.log(` \u00a0 \u00a0 \u00a0parameters: ${contextParameters}`);\u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 });// Write the initial stream request to config for audio input.detectStream.write(initialStreamRequest);// Stream an audio file from disk to the Conversation API, e.g.// \"./resources/audio.raw\"await pump(\u00a0 fs.createReadStream(filename),\u00a0 // Format the audio stream into the request format.\u00a0 new Transform({\u00a0 \u00a0 objectMode: true,\u00a0 \u00a0 transform: (obj, _, next) => {\u00a0 \u00a0 \u00a0 next(null, {inputAudio: obj});\u00a0 \u00a0 },\u00a0 }),\u00a0 detectStream);\n```\u8981\u5411 Dialogflow \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow/detect_intent_stream.py) \n```\ndef detect_intent_stream(project_id, session_id, audio_file_path, language_code):\u00a0 \u00a0 \"\"\"Returns the result of detect intent with streaming audio as input.\u00a0 \u00a0 Using the same `session_id` between requests allows continuation\u00a0 \u00a0 of the conversation.\"\"\"\u00a0 \u00a0 from google.cloud import dialogflow\u00a0 \u00a0 session_client = dialogflow.SessionsClient()\u00a0 \u00a0 # Note: hard coding audio_encoding and sample_rate_hertz for simplicity.\u00a0 \u00a0 audio_encoding = dialogflow.AudioEncoding.AUDIO_ENCODING_LINEAR_16\u00a0 \u00a0 sample_rate_hertz = 16000\u00a0 \u00a0 session_path = session_client.session_path(project_id, session_id)\u00a0 \u00a0 print(\"Session path: {}\\n\".format(session_path))\u00a0 \u00a0 def request_generator(audio_config, audio_file_path):\u00a0 \u00a0 \u00a0 \u00a0 query_input = dialogflow.QueryInput(audio_config=audio_config)\u00a0 \u00a0 \u00a0 \u00a0 # The first request contains the configuration.\u00a0 \u00a0 \u00a0 \u00a0 yield dialogflow.StreamingDetectIntentRequest(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 session=session_path, query_input=query_input\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 # Here we are reading small chunks of audio data from a local\u00a0 \u00a0 \u00a0 \u00a0 # audio file. \u00a0In practice these chunks should come from\u00a0 \u00a0 \u00a0 \u00a0 # an audio input device.\u00a0 \u00a0 \u00a0 \u00a0 with open(audio_file_path, \"rb\") as audio_file:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 while True:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 chunk = audio_file.read(4096)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if not chunk:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # The later requests contains audio data.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 yield dialogflow.StreamingDetectIntentRequest(input_audio=chunk)\u00a0 \u00a0 audio_config = dialogflow.InputAudioConfig(\u00a0 \u00a0 \u00a0 \u00a0 audio_encoding=audio_encoding,\u00a0 \u00a0 \u00a0 \u00a0 language_code=language_code,\u00a0 \u00a0 \u00a0 \u00a0 sample_rate_hertz=sample_rate_hertz,\u00a0 \u00a0 )\u00a0 \u00a0 requests = request_generator(audio_config, audio_file_path)\u00a0 \u00a0 responses = session_client.streaming_detect_intent(requests=requests)\u00a0 \u00a0 print(\"=\" * 20)\u00a0 \u00a0 for response in responses:\u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'Intermediate transcript: \"{}\".'.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response.recognition_result.transcript\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 # Note: The result from the last response is the final transcript along\u00a0 \u00a0 # with the detected content.\u00a0 \u00a0 query_result = response.query_result\u00a0 \u00a0 print(\"=\" * 20)\u00a0 \u00a0 print(\"Query text: {}\".format(query_result.query_text))\u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \"Detected intent: {} (confidence: {})\\n\".format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 query_result.intent.display_name, query_result.intent_detection_confidence\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 )\u00a0 \u00a0 print(\"Fulfillment text: {}\\n\".format(query_result.fulfillment_text))\n```No preface\n **C#** \uff1a \u8acb\u6309\u7167\u5ba2\u6236\u7aef\u5eab\u9801\u9762\u4e0a\u7684 [C# \u8a2d\u7f6e\u8aaa\u660e](https://cloud.google.com/dialogflow/docs/reference/libraries?hl=zh-cn) \u64cd\u4f5c\uff0c\u7136\u5f8c\u8a2a\u554f [.NET \u7248 Dialogflow \u53c3\u8003\u6587\u6a94](https://googleapis.github.io/google-cloud-dotnet/docs/Google.Cloud.Dialogflow.V2/index.html) \u3002\n **PHP** \uff1a \u8acb\u6309\u7167\u5ba2\u6236\u7aef\u5eab\u9801\u9762\u4e0a\u7684 [PHP \u8a2d\u7f6e\u8aaa\u660e](https://cloud.google.com/dialogflow/docs/reference/libraries?hl=zh-cn) \u64cd\u4f5c\uff0c\u7136\u5f8c\u8a2a\u554f [PHP \u7248 Dialogflow \u53c3\u8003\u6587\u6a94](https://cloud.google.com/php/docs/reference/cloud-dialogflow/latest?hl=zh-cn) \u3002\n **Ruby \u7248** \uff1a \u8acb\u6309\u7167\u5ba2\u6236\u7aef\u5eab\u9801\u9762\u4e0a\u7684 [Ruby \u8a2d\u7f6e\u8aaa\u660e](https://cloud.google.com/dialogflow/docs/reference/libraries?hl=zh-cn) \u64cd\u4f5c\uff0c\u7136\u5f8c\u8a2a\u554f [Ruby \u7248 Dialogflow \u53c3\u8003\u6587\u6a94](https://googleapis.dev/ruby/google-cloud-dialogflow/latest/Google/Cloud/Dialogflow.html) \u3002\n## \u793a\u4f8b\n\u5982\u9700\u77ad\u89e3\u5f9e\u700f\u89bd\u5668\u9ea5\u514b\u98a8\u6d41\u5f0f\u50b3\u8f38\u5230 Dialogflow \u7684\u6700\u4f73\u505a\u6cd5\uff0c\u8acb\u53c3\u95b1 [\u793a\u4f8b\u9801\u9762](https://cloud.google.com/dialogflow/docs/tutorials/samples?hl=zh-cn) \u3002", "guide": "Dialogflow"}