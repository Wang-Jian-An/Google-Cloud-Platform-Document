{"title": "Dialogflow - Detect intent with sentiment analysis", "url": "https://cloud.google.com/dialogflow/es/docs/how/sentiment", "abstract": "# Dialogflow - Detect intent with sentiment analysis\nSentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral. When making a detect intent request, you can specify that sentiment analysis be performed, and the response will contain sentiment analysis values.\nThe Natural Language API is used by Dialogflow to perform this analysis. For more information on that API and documentation on interpreting Dialogflow sentiment analysis results:\n- [Sentiment Analysis](https://cloud.google.com/natural-language/docs/basics#sentiment_analysis) \n- [Interpreting sentiment analysis values](https://cloud.google.com/natural-language/docs/basics#interpreting_sentiment_analysis_values) \n**Note:** In cases where the sentiment analysis score is 0, the returned `sentimentAnalysisResult` field will be empty. If you prefer explicit 0 values in the response, see the `$outputDefaults` [system parameter](https://cloud.google.com/apis/docs/system-parameters#definitions) .\n", "content": "## Supported languages\nFor a list of supported languages, see the **sentiment** column on the [languages](/dialogflow/docs/reference/language) page. If you request sentiment analysis for an unsupported language, your detect intent request does not fail, but the `QueryResult.diagnostic_info` field contains error information.\n## Before you begin\nThis feature is only applicable when using the API for [end-user interactions](/dialogflow/docs/api-overview) . If you are using an [integration](/dialogflow/docs/integrations) , you can skip this guide.\nYou should do the following before reading this guide:\n- Read [Dialogflow basics](/dialogflow/docs/basics) .\n- Perform [setup steps](/dialogflow/docs/quick/setup) .## Create an agent\nIf you have not already created an agent, create one now:- Go to the [Dialogflow ES Console](https://dialogflow.cloud.google.com) .\n- If requested, sign in to the Dialogflow Console.  See [Dialogflow console overview](/dialogflow/docs/console) for more information.\n- Click **Create Agent** in the left sidebar menu.  (If you already have other agents, click the agent name,  scroll to the bottom and click **Create new agent** .)\n- Enter your agent's name, default language, and default time zone.\n- If you have already created a project, enter that project.  If you want to allow the Dialogflow Console to create the project,  select **Create a new Google project** .\n- Click the **Create** button.## Import the example file to your agent\nThe steps in this guide make assumptions about your agent, so you need to [import](/dialogflow/docs/agents-settings#export) an agent prepared for this guide. When importing, these steps use the option, which overwrites all agent settings, intents, and entities.\nTo import the file, follow these steps:\n- Download the [room-booking-agent.zip](/static/dialogflow/es/docs/data/room-booking-agent.zip) file.\n- Go to the [Dialogflow ES Console](https://dialogflow.cloud.google.com) .\n- Select your agent.\n- Click the  settingsbutton  next to the agent name.\n- Select the **Export and Import** tab.\n- Select **Restore From Zip** and follow instructions to restore the zip file that you downloaded.## Agent settings for sentiment analysis\nYou can trigger sentiment analysis per detect intent request, or you can configure your agent to always return sentiment analysis results.\n**Note:** Even if an agent is configured to use sentiment analysis, [Actions on Google](https://developers.google.com/actions/dialogflow/) requests will not receive sentiment analysis results.\nTo enable sentiment analysis for all queries:\n- Go to the [Dialogflow ES Console](https://dialogflow.cloud.google.com) .\n- Select an agent.\n- Click the settingsbutton next to the agent name.\n- Select the **Advanced** tab.\n- Toggle **Enable sentiment analysis for the current query** on.## Use the Dialogflow simulator\nYou can interact with the agent and receive sentiment analysis results via the [Dialogflow simulator](/dialogflow/docs/console#simulator) :\n- Type \"Thank you for helping me.\"\n- See the **SENTIMENT** section at the bottom of the simulator. It should show a positive sentiment score.\n- Next, type \"It didn't work at all.\" in the simulator.\n- See the **SENTIMENT** section at the bottom of the simulator. It should show a negative sentiment score.\n**Note:** When a very negative sentiment is returned, you may want to hand off unsatisfied users to live agents, or to get a better understanding of which intents lead to the highest customer sentiment. An example of a handoff implementation can be found on [GitHub](https://github.com/dialogflow/agent-human-handoff-nodejs)\n## Detect intent\nTo detect intent, call the `detectIntent` method on the [Sessions](/dialogflow/es/docs/reference/common-types#sessions) type.\nCall the\n`detectIntent`\nmethod and provide the\n`sentimentAnalysisRequestConfig`\nfield.\nBefore using any of the request data, make the following replacements:- : your Google Cloud project ID\n- : a session ID\nHTTP method and URL:\n```\nPOST https://dialogflow.googleapis.com/v2/projects/PROJECT_ID/agent/sessions/SESSION_ID:detectIntent\n```\nRequest JSON body:\n```\n{\n \"queryParams\": {\n \"sentimentAnalysisRequestConfig\": {\n  \"analyzeQueryTextSentiment\": true\n }\n },\n \"queryInput\": {\n \"text\": {\n  \"text\": \"please reserve an amazing meeting room for six people\",\n  \"languageCode\": \"en-US\"\n }\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"responseId\": \"747ee176-acc5-46be-8d9a-b7ef9c2b9199\",\n \"queryResult\": {\n \"queryText\": \"please reserve an amazing meeting room for six people\",\n \"action\": \"room.reservation\",\n \"parameters\": {\n  \"date\": \"\",\n  \"duration\": \"\",\n  \"guests\": 6,\n  \"location\": \"\",\n  \"time\": \"\"\n },\n \"fulfillmentText\": \"I can help with that. Where would you like to reserve a room?\",\n ...\n \"sentimentAnalysisResult\": {\n  \"queryTextSentiment\": {\n  \"score\": 0.8,\n  \"magnitude\": 0.8\n  }\n }\n }\n}\n```\nNotice that the `sentimentAnalysisResult` field contains `score` and `magnitude` values.\nTo authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow/snippets/src/main/java/com/example/dialogflow/DetectIntentWithSentimentAnalysis.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.cloud.dialogflow.v2.DetectIntentRequest;import com.google.cloud.dialogflow.v2.DetectIntentResponse;import com.google.cloud.dialogflow.v2.QueryInput;import com.google.cloud.dialogflow.v2.QueryParameters;import com.google.cloud.dialogflow.v2.QueryResult;import com.google.cloud.dialogflow.v2.SentimentAnalysisRequestConfig;import com.google.cloud.dialogflow.v2.SessionName;import com.google.cloud.dialogflow.v2.SessionsClient;import com.google.cloud.dialogflow.v2.TextInput;import com.google.common.collect.Maps;import java.io.IOException;import java.util.List;import java.util.Map;public class DetectIntentWithSentimentAnalysis {\u00a0 public static Map<String, QueryResult> detectIntentSentimentAnalysis(\u00a0 \u00a0 \u00a0 String projectId, List<String> texts, String sessionId, String languageCode)\u00a0 \u00a0 \u00a0 throws IOException, ApiException {\u00a0 \u00a0 Map<String, QueryResult> queryResults = Maps.newHashMap();\u00a0 \u00a0 // Instantiates a client\u00a0 \u00a0 try (SessionsClient sessionsClient = SessionsClient.create()) {\u00a0 \u00a0 \u00a0 // Set the session name using the sessionId (UUID) and projectID (my-project-id)\u00a0 \u00a0 \u00a0 SessionName session = SessionName.of(projectId, sessionId);\u00a0 \u00a0 \u00a0 System.out.println(\"Session Path: \" + session.toString());\u00a0 \u00a0 \u00a0 // Detect intents for each text input\u00a0 \u00a0 \u00a0 for (String text : texts) {\u00a0 \u00a0 \u00a0 \u00a0 // Set the text (hello) and language code (en-US) for the query\u00a0 \u00a0 \u00a0 \u00a0 TextInput.Builder textInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TextInput.newBuilder().setText(text).setLanguageCode(languageCode);\u00a0 \u00a0 \u00a0 \u00a0 // Build the query with the TextInput\u00a0 \u00a0 \u00a0 \u00a0 QueryInput queryInput = QueryInput.newBuilder().setText(textInput).build();\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 SentimentAnalysisRequestConfig sentimentAnalysisRequestConfig =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SentimentAnalysisRequestConfig.newBuilder().setAnalyzeQueryTextSentiment(true).build();\u00a0 \u00a0 \u00a0 \u00a0 QueryParameters queryParameters =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryParameters.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSentimentAnalysisRequestConfig(sentimentAnalysisRequestConfig)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest detectIntentRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSession(session.toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryInput(queryInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryParams(queryParameters)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 // Performs the detect intent request\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentResponse response = sessionsClient.detectIntent(detectIntentRequest);\u00a0 \u00a0 \u00a0 \u00a0 // Display the query result\u00a0 \u00a0 \u00a0 \u00a0 QueryResult queryResult = response.getQueryResult();\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"Query Text: '%s'\\n\", queryResult.getQueryText());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Detected Intent: %s (confidence: %f)\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getIntent().getDisplayName(), queryResult.getIntentDetectionConfidence());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Fulfillment Text: '%s'\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getFulfillmentMessagesCount() > 0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ? queryResult.getFulfillmentMessages(0).getText()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : \"Triggered Default Fallback Intent\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Sentiment Score: '%s'\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getSentimentAnalysisResult().getQueryTextSentiment().getScore());\u00a0 \u00a0 \u00a0 \u00a0 queryResults.put(text, queryResult);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 return queryResults;\u00a0 }}\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow/detect-intent-sentiment.v2.js) \n```\n// Imports the Dialogflow client libraryconst dialogflow = require('@google-cloud/dialogflow').v2;// Instantiate a DialogFlow client.const sessionClient = new dialogflow.SessionsClient();/**\u00a0* TODO(developer): Uncomment the following lines before running the sample.\u00a0*/// const projectId = 'ID of GCP project associated with your Dialogflow agent';// const sessionId = `user specific ID of session, e.g. 12345`;// const query = `phrase(s) to pass to detect, e.g. I'd like to reserve a room for six people`;// const languageCode = 'BCP-47 language code, e.g. en-US';// Define session pathconst sessionPath = sessionClient.projectAgentSessionPath(\u00a0 projectId,\u00a0 sessionId);async function detectIntentandSentiment() {\u00a0 // The text query request.\u00a0 const request = {\u00a0 \u00a0 session: sessionPath,\u00a0 \u00a0 queryInput: {\u00a0 \u00a0 \u00a0 text: {\u00a0 \u00a0 \u00a0 \u00a0 text: query,\u00a0 \u00a0 \u00a0 \u00a0 languageCode: languageCode,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 \u00a0 queryParams: {\u00a0 \u00a0 \u00a0 sentimentAnalysisRequestConfig: {\u00a0 \u00a0 \u00a0 \u00a0 analyzeQueryTextSentiment: true,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 };\u00a0 // Send request and log result\u00a0 const responses = await sessionClient.detectIntent(request);\u00a0 console.log('Detected intent');\u00a0 const result = responses[0].queryResult;\u00a0 console.log(` \u00a0Query: ${result.queryText}`);\u00a0 console.log(` \u00a0Response: ${result.fulfillmentText}`);\u00a0 if (result.intent) {\u00a0 \u00a0 console.log(` \u00a0Intent: ${result.intent.displayName}`);\u00a0 } else {\u00a0 \u00a0 console.log(' \u00a0No intent matched.');\u00a0 }\u00a0 if (result.sentimentAnalysisResult) {\u00a0 \u00a0 console.log('Detected sentiment');\u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 ` \u00a0Score: ${result.sentimentAnalysisResult.queryTextSentiment.score}`\u00a0 \u00a0 );\u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 ` \u00a0Magnitude: ${result.sentimentAnalysisResult.queryTextSentiment.magnitude}`\u00a0 \u00a0 );\u00a0 } else {\u00a0 \u00a0 console.log('No sentiment Analysis Found');\u00a0 }\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow/detect_intent_with_sentiment_analysis.py) \n```\ndef detect_intent_with_sentiment_analysis(project_id, session_id, texts, language_code):\u00a0 \u00a0 \"\"\"Returns the result of detect intent with texts as inputs and analyzes the\u00a0 \u00a0 sentiment of the query text.\u00a0 \u00a0 Using the same `session_id` between requests allows continuation\u00a0 \u00a0 of the conversation.\"\"\"\u00a0 \u00a0 from google.cloud import dialogflow\u00a0 \u00a0 session_client = dialogflow.SessionsClient()\u00a0 \u00a0 session_path = session_client.session_path(project_id, session_id)\u00a0 \u00a0 print(\"Session path: {}\\n\".format(session_path))\u00a0 \u00a0 for text in texts:\u00a0 \u00a0 \u00a0 \u00a0 text_input = dialogflow.TextInput(text=text, language_code=language_code)\u00a0 \u00a0 \u00a0 \u00a0 query_input = dialogflow.QueryInput(text=text_input)\u00a0 \u00a0 \u00a0 \u00a0 # Enable sentiment analysis\u00a0 \u00a0 \u00a0 \u00a0 sentiment_config = dialogflow.SentimentAnalysisRequestConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 analyze_query_text_sentiment=True\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 # Set the query parameters with sentiment analysis\u00a0 \u00a0 \u00a0 \u00a0 query_params = dialogflow.QueryParameters(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sentiment_analysis_request_config=sentiment_config\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 response = session_client.detect_intent(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 request={\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"session\": session_path,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"query_input\": query_input,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"query_params\": query_params,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 print(\"=\" * 20)\u00a0 \u00a0 \u00a0 \u00a0 print(\"Query text: {}\".format(response.query_result.query_text))\u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Detected intent: {} (confidence: {})\\n\".format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response.query_result.intent.display_name,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response.query_result.intent_detection_confidence,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 print(\"Fulfillment text: {}\\n\".format(response.query_result.fulfillment_text))\u00a0 \u00a0 \u00a0 \u00a0 # Score between -1.0 (negative sentiment) and 1.0 (positive sentiment).\u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Query Text Sentiment Score: {}\\n\".format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response.query_result.sentiment_analysis_result.query_text_sentiment.score\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Query Text Sentiment Magnitude: {}\\n\".format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response.query_result.sentiment_analysis_result.query_text_sentiment.magnitude\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 )\n```", "guide": "Dialogflow"}