{"title": "Dialogflow - \u4f7f\u7528\u7db2\u7d61\u9264\u5b50\u5275\u5efa fulfillment", "url": "https://cloud.google.com/dialogflow/es/docs/tutorials/sequences/create-fulfillment-using-webhook?hl=zh-cn", "abstract": "# Dialogflow - \u4f7f\u7528\u7db2\u7d61\u9264\u5b50\u5275\u5efa fulfillment\nDialogflow \u4e2d\u7684\u7db2\u7d61\u9264\u5b50 fulfilment \u4f7f\u6211\u5011\u80fd\u5920\u66f4\u597d\u5730\u63a7\u5236\u4ee3\u7406\u6d41\u3002\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u60a8\u9700\u8981\u4e00\u500b\u7db2\u7d61\u9264\u5b50\u4f86\u9a57\u8b49\u5728\u201c\u5e8f\u5217\u201d\u610f\u5716\u4e2d\u6536\u96c6\u7684\u5b57\u6bcd\u6578\u5b57\u5e8f\u5217\u3002\u8a72\u7db2\u7d61\u9264\u5b50\u6703\u53cd\u8986\u8f2a\u8a62\u8a72\u610f\u5716\uff0c\u4ee5\u4fbf\u5728\u66f4\u6613\u65bc\u7ba1\u7406\u7684\u8fed\u4ee3\u4e2d\u6536\u96c6\u9577\u5e8f\u5217\u3002\n", "content": "## \u4f7f\u7528\u5167\u5d4c\u7de8\u8f2f\u5668\u5275\u5efa\u7db2\u7d61\u9264\u5b50\nDialogflow \u5728\u63a7\u5236\u6aaf\u4e2d\u6709\u4e00\u500b\u5167\u5d4c\u7de8\u8f2f\u5668\uff0c\u4f7f\u60a8\u53ef\u4ee5\u76f4\u63a5\u5beb\u5165 NodeJS \u4ee3\u78bc\uff0c\u7136\u5f8c\u5c07\u5176\u90e8\u7f72\u4f5c\u7232\u7db2\u7d61\u9264\u5b50\u5728 Cloud Functions \u4e0a\u904b\u884c \u3002\n\u5982\u9700\u4f7f\u7528 Dialogflow \u7684\u5167\u5d4c\u7de8\u8f2f\u5668\u5275\u5efa\u7db2\u7d61\u9264\u5b50\uff0c\u8acb\u6309\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff1a\n- \u9ede\u64ca\u5c0e\u822a\u6b04\u4e0a\u7684 **Fulfillment** \u6a19\u7c64\u9801\uff0c\u8f49\u5230\u201cFulfillment\u201d\u9801\u9762\u3002\n- \u5c07\u5167\u5d4c\u7de8\u8f2f\u5668\u7684\u6309\u9215\u5207\u63db\u7232\u201c\u5df2\u5553\u7528\u201d(ENABLED)\u3002\n- \u522a\u9664\u5167\u5d4c\u7de8\u8f2f\u5668\u7684`package.json`\u6a19\u7c64\u9801\u4e2d\u7684\u73fe\u6709\u5167\u5bb9\u3002\n- \u5c07\u4ee5\u4e0b JSON \u5167\u5bb9\u8907\u88fd\u4e26\u7c98\u8cbc\u5230\u5167\u5d4c\u7de8\u8f2f\u5668\u7684 `package.json` \u6a19\u7c64\u9801\u4e2d\uff1a```\n{\u00a0 \"name\": \"DialogflowFirebaseWebhook\",\u00a0 \"description\": \"Firebase Webhook dependencies for a Dialogflow agent.\",\u00a0 \"version\": \"0.0.1\",\u00a0 \"private\": true,\u00a0 \"license\": \"Apache Version 2.0\",\u00a0 \"author\": \"Google Inc.\",\u00a0 \"engines\": {\u00a0 \u00a0 \"node\": \"10\"\u00a0 },\u00a0 \"scripts\": {\u00a0 \u00a0 \"lint\": \"semistandard --fix \\\"**/*.js\\\"\",\u00a0 \u00a0 \"start\": \"firebase deploy --only functions\",\u00a0 \u00a0 \"deploy\": \"firebase deploy --only functions\"\u00a0 },\u00a0 \"dependencies\": {\u00a0 \u00a0 \"firebase-functions\": \"^2.0.2\",\u00a0 \u00a0 \"firebase-admin\": \"^5.13.1\"\u00a0 }}\n```\n- \u522a\u9664\u5167\u5d4c\u7de8\u8f2f\u5668\u7684 `index.js` \u6a19\u7c64\u9801\u4e2d\u7684\u73fe\u6709\u4ee3\u78bc\u3002 \n- \u5c07\u4ee5\u4e0b\u4ee3\u78bc\u8907\u88fd\u4e26\u7c98\u8cbc\u5230\u5167\u5d4c\u7de8\u8f2f\u5668\u7684 `index.js` \u9801\u6a19\u7c64\u4e2d\uff1a```\n/**\u00a0* Copyright 2020 Google Inc. All Rights Reserved.\u00a0*\u00a0* Licensed under the Apache License, Version 2.0 (the \"License\");\u00a0* you may not use this file except in compliance with the License.\u00a0* You may obtain a copy of the License at\u00a0*\u00a0* \u00a0 \u00a0 \u00a0http://www.apache.org/licenses/LICENSE-2.0\u00a0*\u00a0* Unless required by applicable law or agreed to in writing, software\u00a0* distributed under the License is distributed on an \"AS IS\" BASIS,\u00a0* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\u00a0* See the License for the specific language governing permissions and\u00a0* limitations under the License.\u00a0*/'use strict';const functions = require('firebase-functions');// TODO: set this to the minimum valid length for your sequence.// There's no logic in here to enforce this length, but once the// user has said this many digits, the slot-filling prompt will// also instruct the user to say \"that's all\" to end the slot-filling.const MIN_SEQUENCE_LENGTH = 10;exports.dialogflowFirebaseFulfillment = functions.https.onRequest((request, response) => {\u00a0 let dfRequest = request.body;\u00a0 let action = dfRequest.queryResult.action;\u00a0 switch (action) {\u00a0 \u00a0 case 'handle-sequence':\u00a0 \u00a0 \u00a0 handleSequence(dfRequest, response);\u00a0 \u00a0 \u00a0 break;\u00a0 \u00a0 case 'validate-sequence':\u00a0 \u00a0 \u00a0 validateSequence(dfRequest, response);\u00a0 \u00a0 \u00a0 break;\u00a0 \u00a0 default:\u00a0 \u00a0 \u00a0 response.json({\u00a0 \u00a0 \u00a0 \u00a0 fulfillmentText: `Webhook for action \"${action}\" not implemented.`\u00a0 \u00a0 \u00a0 });\u00a0 }});////// Helper functions/* Send an SSML response.\u00a0* @param request: Dialogflow WebhookRequest JSON with camelCase keys.\u00a0* \u00a0 \u00a0 See https://cloud.google.com/dialogflow/es/docs/reference/common-types#webhookrequest\u00a0* @param response: Express JS response object\u00a0* @param ssml: SSML string.\u00a0* @example: sendSSML(request, response, 'hello')\u00a0* \u00a0 \u00a0 Will call response.json() with SSML payload '<speak>hello</speak>'\u00a0*/function sendSSML(request, response, ssml) {\u00a0 ssml = `<speak>${ssml}</speak>`;\u00a0 if (request.originalDetectIntentRequest.source == 'GOOGLE_TELEPHONY') {\u00a0 \u00a0 // Dialogflow Phone Gateway Response\u00a0 \u00a0 // see https://cloud.google.com/dialogflow/es/docs/reference/rpc/google.cloud.dialogflow.v2beta1#google.cloud.dialogflow.v2beta1.Intent.Message.TelephonySynthesizeSpeech\u00a0 \u00a0 response.json({\u00a0 \u00a0 \u00a0 fulfillmentMessages: [{\u00a0 \u00a0 \u00a0 \u00a0 platform: 'TELEPHONY',\u00a0 \u00a0 \u00a0 \u00a0 telephonySynthesizeSpeech: {ssml: ssml}\u00a0 \u00a0 \u00a0 }]\u00a0 \u00a0 });\u00a0 }\u00a0 else {\u00a0 \u00a0 // Some CCAI telephony partners accept SSML in a plain text response.\u00a0 \u00a0 // Check your specific integration and customize the payload here.\u00a0 \u00a0 response.json({\u00a0 \u00a0 \u00a0 fulfillmentText: ssml\u00a0 \u00a0 });\u00a0 }}/* Extract an output context from the incoming WebhookRequest.\u00a0* @param request: Dialogflow WebhookRequest JSON with camelCase keys.\u00a0* \u00a0 \u00a0 See https://cloud.google.com/dialogflow/es/docs/reference/common-types#webhookrequest\u00a0* @param name: A string\u00a0* @return: The context object if found, or undefined\u00a0* @see: https://cloud.google.com/dialogflow/es/docs/reference/rpc/google.cloud.dialogflow.v2#google.cloud.dialogflow.v2.Context\u00a0* \u00a0 \u00a0 and note this webhook uses JSON camelCase instead of RPC snake_case.\u00a0* @example:\u00a0* \u00a0 \u00a0 // Modify an existing output content\u00a0* \u00a0 \u00a0 let context = getOutputContext(request, 'some-context');\u00a0* \u00a0 \u00a0 context.lifespanCount = 5;\u00a0* \u00a0 \u00a0 context.parameters.some_parameter = 'new value';\u00a0* \u00a0 \u00a0 response.json({\u00a0* \u00a0 \u00a0 \u00a0 fulfillmentText: 'new value set',\u00a0* \u00a0 \u00a0 \u00a0 outputContexts: [context]\u00a0* \u00a0 \u00a0 });\u00a0*/function getOutputContext(request, name) {\u00a0 return request.queryResult.outputContexts.find(\u00a0 \u00a0 \u00a0 context => context.name.endsWith(`/contexts/${name}`)\u00a0 );}////// Action handler functions/*\u00a0* Fulfillment function for:\u00a0* \u00a0 \u00a0 actions: handle-sequence\u00a0* \u00a0 \u00a0 intents: \"Sequence\", \"Sequence - Edit\"\u00a0* @param request: Dialogflow WebhookRequest JSON with camelCase keys.\u00a0* \u00a0 \u00a0 See https://cloud.google.com/dialogflow/es/docs/reference/common-types#webhookrequest\u00a0* @param response: Express JS response object\u00a0*/function handleSequence(request, response) {\u00a0 let parameters = request.queryResult.parameters;\u00a0 let isSlotFilling = !request.queryResult.allRequiredParamsPresent;\u00a0 let isEditing = getOutputContext(request, 'editing-sequence');\u00a0 console.log(request.queryResult.action + ': ' + JSON.stringify(parameters));\u00a0 if (isSlotFilling) {\u00a0 \u00a0 // Prompt the user for the sequence\u00a0 \u00a0 let verbatim = `<prosody rate=\"slow\"><say-as interpret-as=\"verbatim\">${parameters.existing_sequence}</say-as></prosody>`;\u00a0 \u00a0 if (!parameters.existing_sequence && !parameters.new_sequence) {\u00a0 \u00a0 \u00a0 // Initial prompt\u00a0 \u00a0 \u00a0 response.json({\u00a0 \u00a0 \u00a0 \u00a0 fulfillmentText: \"What is your sequence? Please pause after a few characters so I can confirm as we go.\"\u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 }\u00a0 \u00a0 else if (!isEditing) {\u00a0 \u00a0 \u00a0 // Confirm what the system heard with the user. We customize the response\u00a0 \u00a0 \u00a0 // according to how many sequences we've heard to make the prompts less\u00a0 \u00a0 \u00a0 // verbose.\u00a0 \u00a0 \u00a0 if (!parameters.previous_sequence) {\u00a0 \u00a0 \u00a0 \u00a0 // after the first input\u00a0 \u00a0 \u00a0 \u00a0 sendSSML(request, response,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `Say \"no\" to correct me at any time. Otherwise, what comes after ${verbatim}`);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 else if (parameters.existing_sequence.length < MIN_SEQUENCE_LENGTH) {\u00a0 \u00a0 \u00a0 \u00a0 // we know there are more characters to go\u00a0 \u00a0 \u00a0 \u00a0 sendSSML(request, response,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `${verbatim} What's next?`);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 else {\u00a0 \u00a0 \u00a0 \u00a0 // we might have all we need\u00a0 \u00a0 \u00a0 \u00a0 sendSSML(request, response,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `${verbatim} What's next? Or say \"that's all\".`);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 else {\u00a0 \u00a0 \u00a0 // User just said \"no\"\u00a0 \u00a0 \u00a0 sendSSML(request, response,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `Let's try again. What comes after ${verbatim}`);\u00a0 \u00a0 }\u00a0 }\u00a0 else {\u00a0 \u00a0 // Slot filling is complete.\u00a0 \u00a0 // Construct the full sequence.\u00a0 \u00a0 let sequence = (parameters.existing_sequence || '') + (parameters.new_sequence || '');\u00a0 \u00a0 // Trigger the follow up event to get back into slot filling for the\u00a0 \u00a0 // next sequence.\u00a0 \u00a0 response.json({\u00a0 \u00a0 \u00a0 followupEventInput: {\u00a0 \u00a0 \u00a0 \u00a0 name: 'continue-sequence',\u00a0 \u00a0 \u00a0 \u00a0 parameters: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 existing_sequence: sequence,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 previous_sequence: parameters.existing_sequence || ''\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 });\u00a0 \u00a0 // TODO: CHALLENGE: consider validating the sequence here.\u00a0 \u00a0 // The user has already confirmed existing_sequence, so if you find a unique\u00a0 \u00a0 // record in your database with this existing_sequence prefix, you could send\u00a0 \u00a0 // a followUpEventInput like 'validated-sequence' to skip to the next part\u00a0 \u00a0 // of the flow. You could either create a new intent for this event, or\u00a0 \u00a0 // reuse the \"Sequence - done\" intent. If you reuse the \"done\" intent, you\u00a0 \u00a0 // could add another parameter \"assumed_sequence\" with value\u00a0 \u00a0 // \"#validated-sequence.sequence\", then modify the validateSequence function\u00a0 \u00a0 // below to customize the response for this case.\u00a0 }}/*\u00a0* Fulfillment function for:\u00a0* \u00a0 \u00a0 action: validate-sequence\u00a0* \u00a0 \u00a0 intents: \"Sequence - Done\"\u00a0* @param request: Dialogflow WebhookRequest JSON with camelCase keys.\u00a0* \u00a0 \u00a0 See https://cloud.google.com/dialogflow/es/docs/reference/common-types#webhookrequest\u00a0* @param response: Express JS response object\u00a0*/function validateSequence(request, response) {\u00a0 let parameters = request.queryResult.parameters;\u00a0 // TODO: add logic to validate the sequence and customize your response\u00a0 let verbatim = `<say-as interpret-as=\"verbatim\">${parameters.sequence}</say-as>`;\u00a0 sendSSML(request, response, `Thank you. Your sequence is ${verbatim}`);}\n```\n- \u9ede\u64ca **\u90e8\u7f72** (DEPLOY)\u3002\n\u73fe\u5728\uff0c\u60a8\u61c9\u8a72\u53ef\u4ee5\u901a\u904e\u8abf\u7528\u4ee3\u7406\u4f86\u6e2c\u8a66\u96c6\u6210\u4e86\u3002\u5982\u679c\u60a8\u5c1a\u672a\u57f7\u884c\u6b64\u64cd\u4f5c\uff0c\u5efa\u8b70\u60a8\u7acb\u5373\u8a2d\u7f6e\u6211\u5011\u7684\u5408\u4f5c\u4f19\u4f34\u63d0\u4f9b\u7684\u4e00\u9375\u5f0f [\u96fb\u8a71\u96c6\u6210](https://cloud.google.com/dialogflow/docs/integrations?hl=zh-cn) \uff0c\u6216\u8a2d\u7f6e Dialogflow Phone Gateway \u4f86\u901a\u904e\u96fb\u8a71\u6e2c\u8a66\u4ee3\u7406\u3002\n## \u77ad\u89e3\u4ee3\u78bc\n\u4f5c\u7232\u7db2\u7d61\u9264\u5b50\u7684\u5165\u53e3\u9ede\uff0c\u6bcf\u6b21\u89f8\u767c\u7db2\u7d61\u9264\u5b50\u6642\uff0c\u90fd\u6703\u8abf\u7528\u6b64\u8655\u7684 `dialogflowFirebaseFulfillment` \u51fd\u6578\u3002\u5c0d\u65bc\u6bcf\u500b\u8acb\u6c42\uff0cDialogflow \u90fd\u6703\u767c\u9001\u60a8\u5728 Dialogflow \u63a7\u5236\u6aaf\u4e2d\u7232\u610f\u5716\u6307\u5b9a\u7684\u201c\u64cd\u4f5c\u201d\u540d\u7a31\u3002\u4ee3\u78bc\u6703\u4f7f\u7528\u6b64\u64cd\u4f5c\u540d\u7a31\u4f86\u78ba\u5b9a\u8981\u8abf\u7528\u7684\u7db2\u7d61\u9264\u5b50\u51fd\u6578\uff08 `handleSequence` \u6216 `validateSequence` \uff09\u3002\n### \u8655\u7406\u5e8f\u5217\n`handleSequence` \u662f\u672c\u6559\u7a0b\u7684\u6838\u5fc3\u529f\u80fd\u3002\u5b83\u8ca0\u8cac\u5e8f\u5217\u69fd\u4f4d\u586b\u5145\u7684\u6240\u6709\u65b9\u9762\uff0c\u5305\u62ec\uff1a\n- \u7576\u6703\u8a71\u9996\u6b21\u8f38\u5165\u610f\u5716\u6642\u8b80\u51fa\u521d\u59cb\u8aaa\u660e\u3002\n- \u5148\u91cd\u8907\u8a72\u5e8f\u5217\uff0c\u7136\u5f8c\u518d\u63d0\u793a\u4e0b\u4e00\u7d44\u3002\n- \u544a\u77e5\u6700\u7d42\u7528\u6236\u5982\u4f55\u66f4\u6b63\u804a\u5929\u6a5f\u5668\u4eba\u3002\n- \u8b58\u5225\u6709\u6548\u5e8f\u5217\u4f55\u6642\u5177\u6709\u8db3\u5920\u7684\u6578\u4f4d\uff0c\u4e26\u544a\u77e5\u6700\u7d42\u7528\u6236\u5982\u4f55\u6700\u5f8c\u78ba\u5b9a\u8f38\u5165\uff08\u8acb\u53c3\u95b1\u4ee3\u78bc\u4e2d\u7684\u201cMIN_SEQUENCE_LENGTH\u201d\uff09\u3002\n- \u5faa\u74b0\u69fd\u4f4d\u586b\u5145\uff0c\u4ee5\u6536\u96c6\u591a\u500b\u90e8\u5206\u5e8f\u5217\u3002\n- \u5c07\u90e8\u5206\u5e8f\u5217\u9023\u63a5\u6210\u4e00\u500b\u9577\u5e8f\u5217\u3002\n### \u9a57\u8b49\u5e8f\u5217\n\u4f7f\u7528 `validateSequence` \u6642\uff0c\u60a8\u9700\u8981\u6dfb\u52a0\u8207\u6578\u64da\u5b58\u5132\u5340\u7684\u9023\u63a5\uff0c\u4ee5\u9a57\u8b49\u6700\u7d42\u5e8f\u5217\u4e26\u6839\u64da\u8a72\u6578\u64da\u8fd4\u56de\u81ea\u5b9a\u7fa9\u6d88\u606f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u8981\u69cb\u5efa\u8a02\u55ae\u67e5\u8a62\u4ee3\u7406\uff0c\u53ef\u4ee5\u5728\u6b64\u8655\u81ea\u5b9a\u7fa9\u97ff\u61c9\uff0c\u4f8b\u5982\uff1a\n`Thank you. Your order ${verbatim} will arrive on ${lookup.date} and will ${lookup.require_signature ? '' : 'not'} require a signature.`\n\u5176\u4e2d\uff0c `lookup` \u662f\u60a8\u5728\u6578\u64da\u5b58\u5132\u5340\u4e2d\u627e\u5230\u7684\u8207\u6b64\u8a02\u55ae\u76f8\u95dc\u7684\u67d0\u500b\u5c0d\u8c61\u3002\n### \u8f14\u52a9\u51fd\u6578\n\u6b64\u793a\u4f8b\u4e0d\u4f7f\u7528\u4efb\u4f55\u7279\u5b9a\u65bc Dialogflow \u7684\u4f9d\u8cf4\u9805\u3002\u8acb\u6539\u7232\u9075\u5faa [WebhookRequest \u53c3\u8003\u6587\u6a94](https://cloud.google.com/dialogflow/es/docs/reference/common-types?hl=zh-cn#webhookrequest) \u77ad\u89e3 `request.body` \u4e2d\u7684\u9810\u671f\u5167\u5bb9\uff0c\u4e26\u9075\u5faa [WebhookResponse \u53c3\u8003\u6587\u6a94](https://cloud.google.com/dialogflow/es/docs/reference/common-types?hl=zh-cn#webhookresponse) \u4f86\u4e86\u89e3\u8981\u4f7f\u7528 `response.json({...})` \u97ff\u61c9\u7684\u5167\u5bb9\u3002\n\u6b64\u4ee3\u78bc\u5305\u542b\u5169\u500b\u8f14\u52a9\u51fd\u6578\uff0c\u66f4\u6613\u65bc\uff1a\n- \u901a\u904e\u5c07\u5b57\u7b26\u4e32\u50b3\u905e\u7d66`sendSSML`\uff0c\u91dd\u5c0d\u7576\u524d\u5e73\u81fa\u767c\u9001\u6b63\u78ba\u7684\u97ff\u61c9 JSON\u3002\n- \u901a\u904e\u5c07\u4e0a\u4e0b\u6587\u540d\u7a31\u50b3\u905e\u7d66`getOutputContext`\uff0c\u5f9e\u8acb\u6c42\u4e2d\u67e5\u627e\u6709\u6548\u7684 Dialogflow \u4e0a\u4e0b\u6587\u3002## \u9032\u4e00\u6b65\u6539\u9032\n\u9019\u53ef\u4ee5\u5e6b\u52a9\u60a8\u958b\u59cb\u4f7f\u7528\u7db2\u7d61\u9264\u5b50\u4f86\u5be6\u73fe\u9ad8\u7d1a\u4f7f\u7528\u5834\u666f\u3002\u60a8\u8a2d\u8a08\u4e86\u4e00\u500b\u4ee3\u7406\uff0c\u8a72\u4ee3\u7406\u53ef\u5728\u6700\u7d42\u7528\u6236\u8aaa\u51fa\u5176\u5e8f\u5217\u6642\u5faa\u74b0\u986f\u793a\u5e8f\u5217\u63d0\u793a\uff0c\u5f9e\u800c\u78ba\u4fdd\u865b\u64ec\u4ee3\u7406\u80fd\u5920\u6b63\u78ba\u5730\u807d\u5230\u5b83\u5011\u3002\n\u4ee5\u4e0b\u662f\u4e00\u4e9b\u9032\u4e00\u6b65\u6539\u9032\u9ad4\u9a57\u7684\u65b9\u6cd5\uff1a\n- \u66f4\u6539\u4e00\u4e9b\u7db2\u7d61\u9264\u5b50\u97ff\u61c9\uff0c\u4ee5\u8207\u60a8\u7684\u54c1\u724c\u76f8\u7b26\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4fee\u6539\u4ee3\u78bc\uff0c\u6307\u5b9a\u201c\u60a8\u7684\u8a02\u55ae\u865f\u662f\u4ec0\u9ebc\uff1f\u201d\uff0c\u800c\u4e0d\u662f\u5bec\u6cdb\u7684\u201c\u60a8\u7684\u5e8f\u5217\u662f\u4ec0\u9ebc\uff1f\u201d\u60a8\u53ef\u4ee5\u6539\u7232\u5728...\u201d\u4e0a\u67e5\u627e\u3002\n- \u8003\u616e\u5411\u201c\u5e8f\u5217 - \u5b8c\u6210\u201d\u610f\u5716\u6dfb\u52a0\u5176\u4ed6\u8f38\u51fa\u4e0a\u4e0b\u6587\uff0c\u7136\u5f8c\u5728\u8a72\u8f38\u5165\u4e0a\u4e0b\u6587\u4e0b\u5275\u5efa\u4e00\u4e9b\u65b0\u610f\u5716\uff0c\u4ee5\u4fbf\u7528\u6236\u53ef\u4ee5\u5c31\u5176\u8a02\u55ae\u7e7c\u7e8c\u63d0\u554f\u3002\n- \u5982\u679c\u60a8\u60f3\u6df1\u5165\u77ad\u89e3\u6b64\u4f7f\u7528\u5834\u666f\uff0c\u8acb\u67e5\u770b\u4e0a\u9762\u793a\u4f8b\u4ee3\u78bc\u4e2d\u7684`TODO: CHALLENGE`\uff0c\u77ad\u89e3\u5982\u4f55\u9032\u4e00\u6b65\u6539\u9032\u7528\u6236\u9ad4\u9a57\u3002", "guide": "Dialogflow"}