{"title": "Dialogflow - Service use best practices", "url": "https://cloud.google.com/dialogflow/cx/docs/concept/best-practices", "abstract": "# Dialogflow - Service use best practices\nThis guide provides best practices for using the Dialogflow service. These guidelines are designed for greater efficiency and accuracy as well as optimal response times from the service.\nYou should also see the [general agent design](/dialogflow/cx/docs/concept/agent-design) guide for all agent types, and the [voice agent design](/dialogflow/cx/docs/concept/voice-agent-design) guide specifically for designing voice agents.\n", "content": "## Productionization\nBefore running your agent in production, be sure to implement the following best practices:\n- [Use agent versions](#agent-version) \n- [Reuse session clients](#session-client-reuse) \n- [Implement error handling with retries](#retries) ## Agent versions\nYou should always use agent versions for your production traffic. See [Versions and environments](/dialogflow/cx/docs/concept/version) for details.\n## Create agent backup\nKeep an up-to-date [exported](/dialogflow/cx/docs/concept/agent#export) agent backup. This will allow you to quickly recover if you or your team members accidentally delete the agent or the project.\n## Client reuse\nYou can improve the performance of your application by reusing `*Client` client library instances for the duration of your application's execution lifetime.\nMost importantly, you can improve the performance of detect intent API calls by reusing a `SessionsClient` client library instance.\nFor more information on this, see the [Best Practices with Client Libraries guide](/apis/docs/client-libraries-best-practices#reuse_client_objects_and_sessions) .\n## API error retries\nWhen calling API methods, you may receive error responses. There are some errors which should be retried, because they are often due to transient issues. There are two types of errors:\n- [Cloud API errors](/apis/design/errors) .\n- Errors sent from your [webhook service](/dialogflow/cx/docs/concept/webhook#errors) .\nIn addition, you should implement an [exponential backoff](https://en.wikipedia.org/wiki/Exponential_backoff) for retries. This allows your system to find an acceptable rate while the API service is under heavy load.\n### Cloud API errors\nIf you are using a Google supplied [client library](/dialogflow/cx/docs/reference/library/overview) , Cloud API error retries with exponential backoff are implemented for you.\nIf you have implemented your own client library using REST or gRPC, you must implement retries for your client. For information on the errors that you should or should not retry, see [API Improvement Proposals: Automatic retry configuration](https://google.aip.dev/194) .\n### Webhook errors\nIf your API call triggers a webhook call, your webhook may return an error. Even if you are using a Google supplied client library, webhook errors will not be retried automatically. Your code should retry `503 Service Unavailable` errors received from your webhook. See the [webhook service](/dialogflow/cx/docs/concept/webhook#errors) documentation for information on the types of webhook errors and how to check for them.\n## Load testing\nIt is a best practice to execute load testing for your system before you release code to production. Consider these points before implementing your load tests:\n| Summary    | Details                                                                              |\n|:-----------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Ramp up load.   | Your load test must ramp up the load applied to the Dialogflow service. The service is not designed to handle abrupt bursts of load, which are rarely experienced with real traffic. It takes time for the service to adjust to load demands, so ramp up the request rate slowly, until your test achieves the desired load. |\n| API calls are charged. | You will be charged for API calls during a test, and the calls will be limited by project quota.                                                        |\n| Use test doubles.  | You may not need to call the API during your load test. If the purpose of your load test is to determine how your system handles load, it is often best to use a test double in place of actual calls to the API. Your test double can simulate the behavior of the API under load.           |\n| Use retries.   | Your load test must perform retries with a backoff.                                                                   |\n## Calling Dialogflow securely from an end-user device\nYou should never store your private keys used to access the Dialogflow API on an end-user device. This applies to storing keys on the device directly and to hard coding keys in applications. When your client application needs to call the Dialogflow API, it should send requests to a developer-owned proxy service on a secure platform. The proxy service can make the actual, authenticated Dialogflow calls.\nFor example, you should not create a mobile application that calls Dialogflow directly. Doing so would require you to store private keys on an end-user device. Your mobile application should instead pass requests through a secure proxy service.\n**Note:** Some Dialogflow integrations, like Dialogflow Messenger, provide both client code and a proxy service, similar to the description above. The proxy service only responds to requests when the integration is enabled. To improve utility of these integrations, the proxy service may not require authentication. The proxy service API is limited to a small subset of Dialogflow API methods that are required for the integration. In addition, the proxy service never provides Google Cloud or Dialogflow administrative API access without requiring authentication. This limited proxy API reduces the vulnerability for abuse.", "guide": "Dialogflow"}