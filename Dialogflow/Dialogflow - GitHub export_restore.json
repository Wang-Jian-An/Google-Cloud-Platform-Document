{"title": "Dialogflow - GitHub export/restore", "url": "https://cloud.google.com/dialogflow/cx/docs/concept/github", "abstract": "# Dialogflow - GitHub export/restore\nDialogflow CX integrates with GitHub. This integration makes it easy to [export your agent to JSON](/dialogflow/cx/docs/reference/json-export) for a push to GitHub, and to pull from GitHub for an [agent restore](/dialogflow/cx/docs/concept/agent#export) . The JSON exported format pushed to GitHub is the expanded zip file contents of the exported agent.\nUsing this feature allows you to take advantage of GitHub source control features like:\n- Agent change reviews using [code review tools](https://github.com/features/code-review) \n- Examine agent diffs using [diff tools](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-comparing-branches-in-pull-requests) \n- [Merges](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request) \n- And so on", "content": "## Limitations\nThe following limitations apply:\n- GitHub has a [rate limit](https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting) for the number of requests per hour (5000 for non-enterprise accounts, 15,000 for enterprise accounts). If your agent push exceeds this limit, the Dialogflow console will report the rate limit error. You can retry the push after an hour.\n- GitHub APIs have a limitation on the number of files that can be updated in a single commit. If the number of files exceeds 500, you may not be able to push to GitHub from Dialogflow. In such cases, you can exportthe agent as a zip and use the Git CLI on your machine to push the agent files to GitHub. This limitation will be addressed in a later Dialogflow release.\n- Private access [self-hosted](https://docs.github.com/en/enterprise-server/admin/overview/about-github-enterprise-server) repos are not supported, because Dialogflow cannot access these repos.\n- The GitHub repository cannot contain any files other than the agent files exported by agent export. Any other files in the repository will be removed on every push.## Configuration\nTo configure this integration:\n- Open the [Dialogflow CX Console](https://dialogflow.cloud.google.com/cx/projects) .\n- Choose your Google Cloud project.\n- Select your agent.\n- Click the **Manage** tab.\n- Click **Git** in the **Testing & Deployment** section.\n- Click **Add Git integration** , and a configuration dialog opens.\n- Enter the following:- Display name for the GitHub connection.\n- GitHub repository URL (for example:`https://api.github.com/repos/<repository_owner>/<repository_name>`).\n- Add GitHub branches your agent will be interacting with. You can designate a branch as the default branch by clicking the star icon next to it.\n- [GitHub personal token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) cannot be viewed once set, only updates are supported. If you use a fine-grained personal access token, you need the following [permissions](https://docs.github.com/en/rest/overview/permissions-required-for-fine-grained-personal-access-tokens) access:- **Repository Permissions > Contents** : Read and write\n- **Repository Permissions > Metadata** : Read-only (should be auto-selected after selecting Contents permission)\n- Click **Connect** .\nThis configuration can be changed at any time by clicking on the edit icon.\n## Push and restore\nOnce configured, you can push/pull your agent to/from GitHub.\nThe **Push** button is used to export your agent and make a commit to the GitHub branch selected in the Git branch dropdown. This commit will consist of the entire agent and not specific changes, and will delete any existing files in the repository.\nFor new repositories, make sure that there is at least one commit from GitHub before using the push option in the Dialogflow console.\nUsers with **Dialogflow Reader** roles have the ability to push to GitHub repositories. To prevent unwanted pushes, configure these agents with read-only personal access tokens.\nThe **Restore** button is used to pull your agent data from the GitHub branch selected in the Git branch dropdown and restore your Dialogflow agent from this data. This will overwrite your agent in the same way that any agent restore behaves.\n## Example use case\nThe following example illustrates how this feature can be used by multiple people to propose different agent changes to a production agent.\nConsider that your agent uses the following GitHub branches:\n- **Prod** : branch for your production agent\n- **Dev1** : branch for agent development\n- **Dev2** : another branch for agent development\nUser 1 wants to propose agent changes and takes the following steps:\n- Export the production agent to a new agent.\n- Make the desired changes to this agent copy.\n- Test the changes.\n- Push the altered agent to the **Dev1** branch.\n- Create a merge request to the **Prod** branch.\nUser 2 wants to propose agent changes and takes the following steps:\n- Export the production agent to a new agent.\n- Make the desired changes to this agent copy.\n- Test the changes.\n- Push the altered agent to the **Dev2** branch.\n- Create a merge request to the **Prod** branch.\nUser 3 reviews merge requests from both users and takes the following steps:\n- Resolve conflicts.\n- Commits approved changes.\n- Restores the production GitHub branch to the production Dialogflow agent.", "guide": "Dialogflow"}