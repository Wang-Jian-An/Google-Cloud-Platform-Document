{"title": "Dialogflow - Webhook service", "url": "https://cloud.google.com/dialogflow/es/docs/fulfillment-webhook", "abstract": "# Dialogflow - Webhook service\nTo use fulfillment in a production system, you should implement and deploy a webhook service. To handle fulfillment, your webhook service needs to accept JSON requests and return JSON responses as specified in this guide. The detailed processing flow for fulfillment and webhooks is described in the [fulfillment overview document](/dialogflow/docs/fulfillment-overview) .\n", "content": "## Webhook service requirements\nThe following requirements must be met by your webhook service:\n- It must handle HTTPS requests. HTTP is not supported. If you host your webhook service on Google Cloud Platform using a [Compute](/products/compute) or [Serverless Computing](/serverless) solution, see the product documentation for serving with HTTPS. For other hosting options, see [Get an SSL certificate for your domain](https://support.google.com/domains/answer/7630973) .\n- Its URL for requests must be publicly accessible.\n- It must handle POST requests with a JSON [WebhookRequest](#webhook_request) body.\n- It must respond to`WebhookRequest`requests with a JSON [WebhookResponse](#webhook_response) body.## Authentication\n**Note:** Dialogflow cannot make any guarantees about IP ranges for machines that send webhook requests. Rather than restricting access via IP range, you should use one of the authentication methods listed below.\nIt's important to secure your webhook service, so that only you or your Dialogflow agent are authorized to make requests. Dialogflow supports the following mechanisms for authentication:\n| Term         | Definition                                                                                       |\n|:----------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Login username and password    | For webhook settings, you can specify optional login username and password values. If supplied, Dialogflow adds an authorization HTTP header to webhook requests. This header is of the form: \"authorization: Basic <base 64 encoding of the string username:password>\".                       |\n| Authentication headers     | For webhook settings, you can specify optional HTTP header key-value pairs. If supplied, Dialogflow adds these HTTP headers to webhook requests. It is common to provide a single pair with a key of authorization.                                     |\n| Cloud Functions built-in authentication | You can use the built-in authentication when using Cloud Functions. In order to use this type of authentication, do not supply login username, login password, or authorization headers. If you do supply any of these fields, these fields will be used for authentication rather than the built-in authentication.            |\n| Service identity tokens     | You can use service identity tokens for authentication. If you do not supply login username, login password, or a header with a key of authorization, Dialogflow automatically assumes that service identity tokens should be used and adds an authorization HTTP header to webhook requests. This header is of the form: \"authorization: Bearer <identity token>\". |\n| Mutual TLS authentication    | See the Mutual TLS authentication documentation.                                                                             |\n## Webhook request\nWhen an intent configured for fulfillment is matched, Dialogflow sends an HTTPS POST webhook request to your webhook service. The body of this request is a JSON object with information about the matched intent.\nIn addition to the end-user query, many integrations also send some information about the end-user as well. For example, an ID to uniquely identify the user. This information can be accessed via the `originalDetectIntentRequest` field in the webhook request, which will contain the information sent from the integration platform.\nSee the [WebhookRequest](/dialogflow/docs/reference/common-types#webhookrequest) reference documentation for details.\nHere is a sample request:\n```\n{\n \"responseId\": \"response-id\",\n \"session\": \"projects/project-id/agent/sessions/session-id\",\n \"queryResult\": {\n \"queryText\": \"End-user expression\",\n \"parameters\": {\n  \"param-name\": \"param-value\"\n },\n \"allRequiredParamsPresent\": true,\n \"fulfillmentText\": \"Response configured for matched intent\",\n \"fulfillmentMessages\": [  {\n  \"text\": {\n   \"text\": [   \"Response configured for matched intent\"\n   ]\n  }\n  }\n ],\n \"outputContexts\": [  {\n  \"name\": \"projects/project-id/agent/sessions/session-id/contexts/context-name\",\n  \"lifespanCount\": 5,\n  \"parameters\": {\n   \"param-name\": \"param-value\"\n  }\n  }\n ],\n \"intent\": {\n  \"name\": \"projects/project-id/agent/intents/intent-id\",\n  \"displayName\": \"matched-intent-name\"\n },\n \"intentDetectionConfidence\": 1,\n \"diagnosticInfo\": {},\n \"languageCode\": \"en\"\n },\n \"originalDetectIntentRequest\": {}\n}\n```\n## Webhook response\nOnce your webhook receives a webhook request, it needs to send a webhook response. The body of this response is a JSON object with the following information:\n- The [response](/dialogflow/docs/intents-responses) that Dialogflow returns to the end-user.\n- Updates to [contexts](/dialogflow/docs/contexts-overview) active for the conversation.\n- A [follow-up event](/dialogflow/docs/events-overview) to trigger an intent match.\n- A [custom payload](/dialogflow/docs/intents-rich-messages#custom) to be sent to the [integration](/dialogflow/docs/integrations) or [detect intent client](/dialogflow/docs/api-overview#detect-intent) \nThe following limitations apply to your response:\n- The response must occur within 10 seconds for [Google Assistant](/dialogflow/docs/integrations/aog) applications or 5 seconds for all other applications, otherwise the request will time out.\n- The response must be less than or equal to 64 KiB in size.\nSee the [WebhookResponse](/dialogflow/docs/reference/common-types#webhookresponse) reference documentation for details.\n### Text response\nExample for a [text response](/dialogflow/docs/intents-rich-messages#text) :\n```\n{\n \"fulfillmentMessages\": [ {\n  \"text\": {\n  \"text\": [   \"Text response from webhook\"\n  ]\n  }\n }\n ]\n}\n```\n### Card response\nExample for a [card response](/dialogflow/docs/intents-rich-messages#card) :\n```\n{\n \"fulfillmentMessages\": [ {\n  \"card\": {\n  \"title\": \"card title\",\n  \"subtitle\": \"card text\",\n  \"imageUri\": \"https://example.com/images/example.png\",\n  \"buttons\": [   {\n   \"text\": \"button text\",\n   \"postback\": \"https://example.com/path/for/end-user/to/follow\"\n   }\n  ]\n  }\n }\n ]\n}\n```\n### Google Assistant response\nExample for a [Google Assistant response](/dialogflow/docs/intents-rich-messages#aog) :\n```\n{\n \"payload\": {\n \"google\": {\n  \"expectUserResponse\": true,\n  \"richResponse\": {\n  \"items\": [   {\n   \"simpleResponse\": {\n    \"textToSpeech\": \"this is a Google Assistant response\"\n   }\n   }\n  ]\n  }\n }\n }\n}\n```\n### Context\nExample that sets [output context](/dialogflow/docs/contexts-input-output#output_contexts) :\n```\n{\n \"fulfillmentMessages\": [ {\n  \"text\": {\n  \"text\": [   \"Text response from webhook\"\n  ]\n  }\n }\n ],\n \"outputContexts\": [ {\n  \"name\": \"projects/project-id/agent/sessions/session-id/contexts/context-name\",\n  \"lifespanCount\": 5,\n  \"parameters\": {\n  \"param-name\": \"param-value\"\n  }\n }\n ]\n}\n```\n### Event\nExample that invokes a [custom event](/dialogflow/docs/events-custom) :\n```\n{\n \"followupEventInput\": {\n \"name\": \"event-name\",\n \"languageCode\": \"en-US\",\n \"parameters\": {\n  \"param-name\": \"param-value\"\n }\n }\n}\n```\n### Session entity\nExample that sets a [session entity](/dialogflow/docs/entities-session) :\n```\n{\n \"fulfillmentMessages\": [ {\n  \"text\": {\n  \"text\": [   \"Choose apple or orange\"\n  ]\n  }\n }\n ],\n \"sessionEntityTypes\":[ {\n  \"name\":\"projects/project-id/agent/sessions/session-id/entityTypes/fruit\",\n  \"entities\":[  {\n   \"value\":\"APPLE_KEY\",\n   \"synonyms\":[   \"apple\",\n   \"green apple\",\n   \"crabapple\"\n   ]\n  },\n  {\n   \"value\":\"ORANGE_KEY\",\n   \"synonyms\":[   \"orange\"\n   ]\n  }\n  ],\n  \"entityOverrideMode\":\"ENTITY_OVERRIDE_MODE_OVERRIDE\"\n }\n ]\n}\n```\n### Custom payload\nExample that provides a custom payload:\n```\n{\n \"fulfillmentMessages\": [ {\n  \"payload\": {\n  \"facebook\": { // for Facebook Messenger integration\n   \"attachment\": {\n   \"type\": \"\",\n   \"payload\": {}\n   }\n  },\n  \"slack\": { // for Slack integration\n   \"text\": \"\",\n   \"attachments\": []\n  },\n  \"richContent\": [ // for Dialogflow Messenger integration\n   [   {\n    \"type\": \"image\",\n    \"rawUrl\": \"https://example.com/images/logo.png\",\n    \"accessibilityText\": \"Example logo\"\n   }\n   ]\n  ],\n  // custom integration payload here\n  }\n }\n ]\n}\n```\n## Enable and manage fulfillment\nTo enable and manage fulfillment for your agent with the console:\n- Go to the [Dialogflow ES Console](https://dialogflow.cloud.google.com) .\n- Select an agent.\n- Select **Fulfillment** in the left sidebar menu.\n- Toggle the **Webhook** field to **Enabled** .\n- Provide the details for your webhook service in the form. If your webhook doesn't require authentication, leave the authentication fields blank.\n- Click **Save** at the bottom of the page.To enable and manage fulfillment for your agent with the API, see the [agent reference](/dialogflow/docs/reference/common-types#agents) . The `getFulfillment` and `updateFulfillment` methods can be used to manage fulfillment settings.\nTo enable fulfillment for an intent with the console:\n- Select **Intents** in the left sidebar menu.\n- Select an intent.\n- Scroll down to the **Fulfillment** section.\n- Toggle **Enable webhook call for this intent** to on.\n- Click **Save** .\nTo enable fulfillment for an intent with the API, see the [intents reference](/dialogflow/docs/reference/common-types#intents) . Set the `webhookState` field to `WEBHOOK_STATE_ENABLED` .\n## Webhook errors\nIf your webhook service encounters an error, it should return one of the following HTTP status codes:\n- `400`Bad Request\n- `401`Unauthorized\n- `403`Forbidden\n- `404`Not found\n- `500`Server fault\n- `503`Service Unavailable\nIn any of the following error situations, Dialogflow responds to the end-user with the built-in response configured for the intent currently matched:\n- Response timeout exceeded.\n- Error status code received.\n- Response is invalid.\n- Webhook service is unavailable.\nIn addition, if the intent match was triggered by a [detect intent API call](/dialogflow/docs/api-overview#detect-intent) , the `status` field in the detect intent response contains the webhook error information. For example:\n```\n\"status\": {\u00a0 \u00a0 \"code\": 206,\u00a0 \u00a0 \"message\": \"Webhook call failed. <details of the error...>\"}\n```\n## Using Cloud Functions\nThere are a few ways to use Cloud Functions for fulfillment. The Dialogflow [inline editor](/dialogflow/es/docs/fulfillment-inline-editor) integrates with [Cloud Functions](/functions/docs) . When you use the inline editor to create and edit your webhook code, Dialogflow establishes a secure connection to your Cloud Function.\nYou also have the option to use a Cloud Function not created by the inline editor (perhaps because you want to use a language other than Node.js). If the Cloud Function resides in the same project as your agent, your agent can call your webhook without needing any special configuration.\nHowever, there are two situations in which you must manually setup this integration:\n- The **Dialogflow Service Agent** [service account](/iam/docs/understanding-service-accounts) with the following address must exist for your agent project:```\nservice-agent-project-number@gcp-sa-dialogflow.iam.gserviceaccount.com\n```This special service account and the associated key is normally created automatically when you create the first agent for a project. If your agent was created before May 10, 2021, you may need to trigger creation of this special service account with the following:- Create a new agent for the project.\n- Execute the following command:```\ngcloud beta services identity create --service=dialogflow.googleapis.com --project=agent-project-id\n```\n- If your webhook function resides in a different project than the agent, you must provide the **Cloud Functions Invoker** [IAM role](/iam/docs/understanding-roles) to the **Dialogflow Service Agent** service account in your function's project.## Service identity tokens\nWhen Dialogflow calls a webhook, it provides a [Google identity token](https://developers.google.com/identity/sign-in/web/backend-auth) with the request. Any webhook can optionally validate the token using Google client libraries or open source libraries like [github.com/googleapis/google-auth-library-nodejs](https://github.com/googleapis/google-auth-library-nodejs) . For example, you can verify the `email` of the ID token as:\n```\nservice-agent-project-number@gcp-sa-dialogflow.iam.gserviceaccount.com\n```\n## Samples\nThe following samples show how to receive a `WebhookRequest` and send a `WebhookResponse` . These samples reference intents created in the [quickstart](/dialogflow/docs/quick/build-agent) .\nTo authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n```\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\ntype intent struct {\n\tDisplayName string `json:\"displayName\"`\n}\ntype queryResult struct {\n\tIntent intent `json:\"intent\"`\n}\ntype text struct {\n\tText []string `json:\"text\"`\n}\ntype message struct {\n\tText text `json:\"text\"`\n}\n// webhookRequest is used to unmarshal a WebhookRequest JSON object. Note that\n// not all members need to be defined--just those that you need to process.\n// As an alternative, you could use the types provided by\n// the Dialogflow protocol buffers:\n// https://godoc.org/google.golang.org/genproto/googleapis/cloud/dialogflow/v2#WebhookRequest\ntype webhookRequest struct {\n\tSession  string  `json:\"session\"`\n\tResponseID string  `json:\"responseId\"`\n\tQueryResult queryResult `json:\"queryResult\"`\n}\n// webhookResponse is used to marshal a WebhookResponse JSON object. Note that\n// not all members need to be defined--just those that you need to process.\n// As an alternative, you could use the types provided by\n// the Dialogflow protocol buffers:\n// https://godoc.org/google.golang.org/genproto/googleapis/cloud/dialogflow/v2#WebhookResponse\ntype webhookResponse struct {\n\tFulfillmentMessages []message `json:\"fulfillmentMessages\"`\n}\n// welcome creates a response for the welcome intent.\nfunc welcome(request webhookRequest) (webhookResponse, error) {\n\tresponse := webhookResponse{\n\t\tFulfillmentMessages: []message{\n\t\t\t{\n\t\t\t\tText: text{\n\t\t\t\t\tText: []string{\"Welcome from Dialogflow Go Webhook\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\treturn response, nil\n}\n// getAgentName creates a response for the get-agent-name intent.\nfunc getAgentName(request webhookRequest) (webhookResponse, error) {\n\tresponse := webhookResponse{\n\t\tFulfillmentMessages: []message{\n\t\t\t{\n\t\t\t\tText: text{\n\t\t\t\t\tText: []string{\"My name is Dialogflow Go Webhook\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\treturn response, nil\n}\n// handleError handles internal errors.\nfunc handleError(w http.ResponseWriter, err error) {\n\tw.WriteHeader(http.StatusInternalServerError)\n\tfmt.Fprintf(w, \"ERROR: %v\", err)\n}\n// HandleWebhookRequest handles WebhookRequest and sends the WebhookResponse.\nfunc HandleWebhookRequest(w http.ResponseWriter, r *http.Request) {\n\tvar request webhookRequest\n\tvar response webhookResponse\n\tvar err error\n\t// Read input JSON\n\tif err = json.NewDecoder(r.Body).Decode(&request); err != nil {\n\t\thandleError(w, err)\n\t\treturn\n\t}\n\tlog.Printf(\"Request: %+v\", request)\n\t// Call intent handler\n\tswitch intent := request.QueryResult.Intent.DisplayName; intent {\n\tcase \"Default Welcome Intent\":\n\t\tresponse, err = welcome(request)\n\tcase \"get-agent-name\":\n\t\tresponse, err = getAgentName(request)\n\tdefault:\n\t\terr = fmt.Errorf(\"Unknown intent: %s\", intent)\n\t}\n\tif err != nil {\n\t\thandleError(w, err)\n\t\treturn\n\t}\n\tlog.Printf(\"Response: %+v\", response)\n\t// Send response\n\tif err = json.NewEncoder(w).Encode(&response); err != nil {\n\t\thandleError(w, err)\n\t\treturn\n\t}\n}\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow/snippets/src/main/dialogflow/Example.java) \n```\n// TODO: add GSON dependency to Pom file// (https://mvnrepository.com/artifact/com.google.code.gson/gson/2.8.5)// TODO: Uncomment the line bellow before running cloud function// package com.example;import com.google.cloud.functions.HttpFunction;import com.google.cloud.functions.HttpRequest;import com.google.cloud.functions.HttpResponse;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.google.gson.JsonObject;import com.google.gson.JsonParser;import java.io.BufferedWriter;public class Example implements HttpFunction {\u00a0 public void service(HttpRequest request, HttpResponse response) throws Exception {\u00a0 \u00a0 JsonParser parser = new JsonParser();\u00a0 \u00a0 Gson gson = new GsonBuilder().create();\u00a0 \u00a0 JsonObject job = gson.fromJson(request.getReader(), JsonObject.class);\u00a0 \u00a0 String str =\u00a0 \u00a0 \u00a0 \u00a0 job.getAsJsonObject(\"queryResult\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .getAsJsonObject(\"intent\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .getAsJsonPrimitive(\"displayName\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .toString();\u00a0 \u00a0 JsonObject o = null;\u00a0 \u00a0 String a = '\"' + \"Default Welcome Intent\" + '\"';\u00a0 \u00a0 String b = '\"' + \"get-agent-name\" + '\"';\u00a0 \u00a0 String responseText = \"\";\u00a0 \u00a0 if (str.equals(a)) {\u00a0 \u00a0 \u00a0 responseText = '\"' + \"Hello from a Java GCF Webhook\" + '\"';\u00a0 \u00a0 } else if (str.equals(b)) {\u00a0 \u00a0 \u00a0 responseText = '\"' + \"My name is Flowhook\" + '\"';\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 responseText = '\"' + \"Sorry I didn't get that\" + '\"';\u00a0 \u00a0 }\u00a0 \u00a0 o =\u00a0 \u00a0 \u00a0 \u00a0 parser\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .parse(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"{\\\"fulfillmentMessages\\\": [ { \\\"text\\\": { \\\"text\\\": [ \"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + responseText\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" ] } } ] }\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .getAsJsonObject();\u00a0 \u00a0 BufferedWriter writer = response.getWriter();\u00a0 \u00a0 writer.write(o.toString());\u00a0 }}\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow/webhook.js) \n```\nconst functions = require('@google-cloud/functions-framework');// TODO: Add handleWebhook to 'Entry point' in the Google Cloud Functionfunctions.http('handleWebhook', (request, response) => {\u00a0 const tag = request.body.queryResult.intent.displayName;\u00a0 let jsonResponse = {};\u00a0 if (tag === 'Default Welcome Intent') {\u00a0 \u00a0 //fulfillment response to be sent to the agent if the request tag is equal to \"welcome tag\"\u00a0 \u00a0 jsonResponse = {\u00a0 \u00a0 \u00a0 fulfillment_messages: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 text: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //fulfillment text response to be sent to the agent\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 text: ['Hello from a GCF Webhook'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 };\u00a0 } else if (tag === 'get-name') {\u00a0 \u00a0 //fulfillment response to be sent to the agent if the request tag is equal to \"welcome tag\"\u00a0 \u00a0 jsonResponse = {\u00a0 \u00a0 \u00a0 fulfillment_messages: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 text: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //fulfillment text response to be sent to the agent\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 text: ['My name is Flowhook'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 };\u00a0 } else {\u00a0 \u00a0 jsonResponse = {\u00a0 \u00a0 \u00a0 //fulfillment text response to be sent to the agent if there are no defined responses for the specified tag\u00a0 \u00a0 \u00a0 fulfillment_messages: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 text: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ////fulfillment text response to be sent to the agent\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 text: [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `There are no fulfillment responses defined for \"${tag}\"\" tag`,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 };\u00a0 }\u00a0 response.send(jsonResponse);});\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow/webhook.py) \n```\n# TODO: change the default Entry Point text to handleWebhookimport functions_framework@functions_framework.httpdef handleWebhook(request):\u00a0 \u00a0 req = request.get_json()\u00a0 \u00a0 responseText = \"\"\u00a0 \u00a0 intent = req[\"queryResult\"][\"intent\"][\"displayName\"]\u00a0 \u00a0 if intent == \"Default Welcome Intent\":\u00a0 \u00a0 \u00a0 \u00a0 responseText = \"Hello from a GCF Webhook\"\u00a0 \u00a0 elif intent == \"get-agent-name\":\u00a0 \u00a0 \u00a0 \u00a0 responseText = \"My name is Flowhook\"\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 responseText = f\"There are no fulfillment responses defined for Intent {intent}\"\u00a0 \u00a0 # You can also use the google.cloud.dialogflowcx_v3.types.WebhookRequest protos instead of manually writing the json object\u00a0 \u00a0 res = {\"fulfillmentMessages\": [{\"text\": {\"text\": [responseText]}}]}\u00a0 \u00a0 return res\n```", "guide": "Dialogflow"}