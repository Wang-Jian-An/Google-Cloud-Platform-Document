{"title": "Dialogflow - Quickstart: Interactions with the API", "url": "https://cloud.google.com/dialogflow/cx/docs/quick/api", "abstract": "# Dialogflow - Quickstart: Interactions with the API\nFor each conversational turn, an takes place. During an interaction, an end-user sends input to Dialogflow, and Dialogflow sends a response. You have two options when implementing your system to handle interactions: using the API or using an integration.\nWhen using the API, your system needs to handle the following:\n- Build an agent.\n- Provide a user interface for end-users.\n- Call the Dialogflow API for each conversational turn to send end-user input to the API.\n- Unless your agent responses are purely static (uncommon), you need to host a [webhook service](/dialogflow/cx/docs/concept/webhook) to handle webhook-enabled [fulfillment](/dialogflow/cx/docs/concept/fulfillment) .\nWhen using an [integration](/dialogflow/cx/docs/concept/integration) , your system only needs to handle the following:\n- Build an agent.\n- Optionally implement a webhook service.\nThe following diagram shows the steps that take place for one conversational turn of a session.\n**Note:** Communications between your systems and integrations, and Dialogflow are [encrypted in transit](/docs/security/encryption-in-transit) . Also, Google internal component communications are encrypted using [Application Layer Transport Security (ALTS)](/docs/security/encryption-in-transit/application-layer-transport-security) .- The end-user types or says something, known as.\n- Your user interface or integration system receives the input and forwards it to the Dialogflow API in a detect intent request.\n- The Dialogflow API receives the detect intent request. It matches the input to an intent or form parameter, sets parameters as needed, and updates session state. If it needs to call a webhook-enabled fulfillment, it sends a webhook request to your webhook service, otherwise, go to step 6.\n- Your webhook service receives the webhook request. Your service takes any actions necessary, like calling external APIs, querying or updating a database, etc.\n- Your webhook service builds a response and sends a webhook response back to Dialogflow.\n- Dialogflow creates a detect intent response. If a webhook was called, it uses the response provided in the webhook response. If no webhook was called, it uses the static response defined in the agent. Dialogflow sends a detect intent response to your user interface or integration system.\n- Your user interface or integration system receives the detect intent response and forwards the text or audio response to the end-user.\n- The end-user sees or hears the response.", "content": "## Guide purpose\nThis guide shows you how to call the API for one conversational turn for an agent that is not using an integration (step 2 from diagram above). This guide show you how to implement a user interface for your end-user.\n## Before you begin\nYou should do the following before reading this guide:\n- Read [Dialogflow CX basics](/dialogflow/cx/docs/basics) .\n- Perform [setup steps](/dialogflow/cx/docs/quick/setup) .\n- Create a new agent or continue using the agent you created in [Build an agent](/dialogflow/cx/docs/quick/build-agent) .## Collect IDs\nThe samples below require several IDs as input. To find your project ID, region ID, and agent ID:\n- Open the [Dialogflow CX Console](https://dialogflow.cloud.google.com/cx/projects) .\n- Select your Google Cloud project to open the agent selector.\n- Click the optionmenu for an agent in the list.\n- Click the copy namebutton.\n- This copies the full identifying name of your agent, which includes your project ID, region ID, and agent ID in the form:projects/ /locations/ /agents/ \nYou also need a session ID. A [session](/dialogflow/cx/docs/concept/session) represents a conversation between a Dialogflow agent and an end-user. You create a unique session ID at the beginning of a conversation and use it for each turn of the conversation. For the purpose of trying the API, you can use any string ID that is at most 36 bytes, like `test-session-123` .\n## Call detect intent\nThe following samples call the `Sessions.detectIntent` method.\nBefore using any of the request data, make the following replacements:- : your Google Cloud project ID\n- : your agent ID\n- : your [region ID](/dialogflow/cx/docs/concept/region) \n- : your [session ID](/dialogflow/cx/docs/concept/session) \n- : the end-user input\nHTTP method and URL:\n```\nPOST https://REGION_ID-dialogflow.googleapis.com/v3/projects/PROJECT_ID/locations/REGION_ID/agents/AGENT_ID/sessions/SESSION_ID:detectIntent\n```\nRequest JSON body:\n```\n{\n \"queryInput\": {\n \"text\": {\n  \"text\": \"END_USER_INPUT\"\n },\n \"languageCode\": \"en\"\n },\n \"queryParams\": {\n \"timeZone\": \"America/Los_Angeles\"\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"responseId\": \"38e8f23d-eed2-445e-a3e7-149b242dd669\",\n \"queryResult\": {\n \"text\": \"I want to buy a shirt\",\n \"languageCode\": \"en\",\n \"responseMessages\": [  {\n  \"text\": {\n   \"text\": [   \"Ok, let's start a new order.\"\n   ]\n  }\n  },\n  {\n  \"text\": {\n   \"text\": [   \"I'd like to collect a bit more information from you.\"\n   ]\n  }\n  },\n  {\n  \"text\": {\n   \"text\": [   \"What color would you like?\"\n   ]\n  }\n  },\n  {}\n ],\n \"currentPage\": {\n  \"name\": \"projects/PROJECT_ID/locations/us-central1/agents/133b0350-f2d2-4928-b0b3-5b332259d0f7/flows/00000000-0000-0000-0000-000000000000/pages/ce0b88c4-9292-455c-9c59-ec153dad94cc\",\n  \"displayName\": \"New Order\"\n },\n \"intent\": {\n  \"name\": \"projects/PROJECT_ID/locations/us-central1/agents/133b0350-f2d2-4928-b0b3-5b332259d0f7/intents/0adebb70-a727-4687-b8bc-fbbc2ac0b665\",\n  \"displayName\": \"order.new\"\n },\n \"intentDetectionConfidence\": 1,\n \"diagnosticInfo\": { ... },\n \"match\": {\n  \"intent\": {\n  \"name\": \"projects/PROJECT_ID/locations/us-central1/agents/133b0350-f2d2-4928-b0b3-5b332259d0f7/intents/0adebb70-a727-4687-b8bc-fbbc2ac0b665\",\n  \"displayName\": \"order.new\"\n  },\n  \"resolvedInput\": \"I want to buy a shirt\",\n  \"matchType\": \"INTENT\",\n  \"confidence\": 1\n }\n }\n}\n```\nTo authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow-cx/src/main/java/dialogflow/cx/DetectIntent.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.cloud.dialogflow.cx.v3beta1.DetectIntentRequest;import com.google.cloud.dialogflow.cx.v3beta1.DetectIntentResponse;import com.google.cloud.dialogflow.cx.v3beta1.QueryInput;import com.google.cloud.dialogflow.cx.v3beta1.QueryResult;import com.google.cloud.dialogflow.cx.v3beta1.SessionName;import com.google.cloud.dialogflow.cx.v3beta1.SessionsClient;import com.google.cloud.dialogflow.cx.v3beta1.SessionsSettings;import com.google.cloud.dialogflow.cx.v3beta1.TextInput;import com.google.common.collect.Maps;import java.io.IOException;import java.util.List;import java.util.Map;public class DetectIntent {\u00a0 // DialogFlow API Detect Intent sample with text inputs.\u00a0 public static Map<String, QueryResult> detectIntent(\u00a0 \u00a0 \u00a0 String projectId,\u00a0 \u00a0 \u00a0 String locationId,\u00a0 \u00a0 \u00a0 String agentId,\u00a0 \u00a0 \u00a0 String sessionId,\u00a0 \u00a0 \u00a0 List<String> texts,\u00a0 \u00a0 \u00a0 String languageCode)\u00a0 \u00a0 \u00a0 throws IOException, ApiException {\u00a0 \u00a0 SessionsSettings.Builder sessionsSettingsBuilder = SessionsSettings.newBuilder();\u00a0 \u00a0 if (locationId.equals(\"global\")) {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(\"dialogflow.googleapis.com:443\");\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 sessionsSettingsBuilder.setEndpoint(locationId + \"-dialogflow.googleapis.com:443\");\u00a0 \u00a0 }\u00a0 \u00a0 SessionsSettings sessionsSettings = sessionsSettingsBuilder.build();\u00a0 \u00a0 Map<String, QueryResult> queryResults = Maps.newHashMap();\u00a0 \u00a0 // Instantiates a client.\u00a0 \u00a0 // Note: close() needs to be called on the SessionsClient object to clean up resources\u00a0 \u00a0 // such as threads. In the example below, try-with-resources is used,\u00a0 \u00a0 // which automatically calls close().\u00a0 \u00a0 try (SessionsClient sessionsClient = SessionsClient.create(sessionsSettings)) {\u00a0 \u00a0 \u00a0 // Set the session name using the projectID (my-project-id), locationID (global), agentID\u00a0 \u00a0 \u00a0 // (UUID), and sessionId (UUID).\u00a0 \u00a0 \u00a0 SessionName session =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SessionName.ofProjectLocationAgentSessionName(projectId, locationId, agentId, sessionId);\u00a0 \u00a0 \u00a0 // TODO : Uncomment if you want to print session path\u00a0 \u00a0 \u00a0 // System.out.println(\"Session Path: \" + session.toString());\u00a0 \u00a0 \u00a0 // Detect intents for each text input.\u00a0 \u00a0 \u00a0 for (String text : texts) {\u00a0 \u00a0 \u00a0 \u00a0 // Set the text (hello) for the query.\u00a0 \u00a0 \u00a0 \u00a0 TextInput.Builder textInput = TextInput.newBuilder().setText(text);\u00a0 \u00a0 \u00a0 \u00a0 // Build the query with the TextInput and language code (en-US).\u00a0 \u00a0 \u00a0 \u00a0 QueryInput queryInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryInput.newBuilder().setText(textInput).setLanguageCode(languageCode).build();\u00a0 \u00a0 \u00a0 \u00a0 // Build the DetectIntentRequest with the SessionName and QueryInput.\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DetectIntentRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSession(session.toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryInput(queryInput)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 \u00a0 // Performs the detect intent request.\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentResponse response = sessionsClient.detectIntent(request);\u00a0 \u00a0 \u00a0 \u00a0 // Display the query result.\u00a0 \u00a0 \u00a0 \u00a0 QueryResult queryResult = response.getQueryResult();\u00a0 \u00a0 \u00a0 \u00a0 // TODO : Uncomment if you want to print queryResult\u00a0 \u00a0 \u00a0 \u00a0 // System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 \u00a0 // System.out.format(\"Query Text: '%s'\\n\", queryResult.getText());\u00a0 \u00a0 \u00a0 \u00a0 // System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 \"Detected Intent: %s (confidence: %f)\\n\",\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 queryResult.getIntent().getDisplayName(),\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getIntentDetectionConfidence());\u00a0 \u00a0 \u00a0 \u00a0 queryResults.put(text, queryResult);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 return queryResults;\u00a0 }}\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow-cx/detect-intent-text.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'my-project';// const location = 'global';// const agentId = 'my-agent';// const query = 'Hello';// const languageCode = 'en'// Imports the Google Cloud Some API libraryconst {SessionsClient} = require('@google-cloud/dialogflow-cx');/**\u00a0* Example for regional endpoint:\u00a0* \u00a0 const location = 'us-central1'\u00a0* \u00a0 const client = new SessionsClient({apiEndpoint: 'us-central1-dialogflow.googleapis.com'})\u00a0*/const client = new SessionsClient();async function detectIntentText() {\u00a0 const sessionId = Math.random().toString(36).substring(7);\u00a0 const sessionPath = client.projectLocationAgentSessionPath(\u00a0 \u00a0 projectId,\u00a0 \u00a0 location,\u00a0 \u00a0 agentId,\u00a0 \u00a0 sessionId\u00a0 );\u00a0 const request = {\u00a0 \u00a0 session: sessionPath,\u00a0 \u00a0 queryInput: {\u00a0 \u00a0 \u00a0 text: {\u00a0 \u00a0 \u00a0 \u00a0 text: query,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 languageCode,\u00a0 \u00a0 },\u00a0 };\u00a0 const [response] = await client.detectIntent(request);\u00a0 for (const message of response.queryResult.responseMessages) {\u00a0 \u00a0 if (message.text) {\u00a0 \u00a0 \u00a0 console.log(`Agent Response: ${message.text.text}`);\u00a0 \u00a0 }\u00a0 }\u00a0 if (response.queryResult.match.intent) {\u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 `Matched Intent: ${response.queryResult.match.intent.displayName}`\u00a0 \u00a0 );\u00a0 }\u00a0 console.log(\u00a0 \u00a0 `Current Page: ${response.queryResult.currentPage.displayName}`\u00a0 );}detectIntentText();\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow-cx/detect_intent_texts.py) \n```\ndef run_sample():\u00a0 \u00a0 # TODO(developer): Replace these values when running the function\u00a0 \u00a0 project_id = \"YOUR-PROJECT-ID\"\u00a0 \u00a0 # For more information about regionalization see https://cloud.google.com/dialogflow/cx/docs/how/region\u00a0 \u00a0 location_id = \"YOUR-LOCATION-ID\"\u00a0 \u00a0 # For more info on agents see https://cloud.google.com/dialogflow/cx/docs/concept/agent\u00a0 \u00a0 agent_id = \"YOUR-AGENT-ID\"\u00a0 \u00a0 agent = f\"projects/{project_id}/locations/{location_id}/agents/{agent_id}\"\u00a0 \u00a0 # For more information on sessions see https://cloud.google.com/dialogflow/cx/docs/concept/session\u00a0 \u00a0 session_id = uuid.uuid4()\u00a0 \u00a0 texts = [\"Hello\"]\u00a0 \u00a0 # For more supported languages see https://cloud.google.com/dialogflow/es/docs/reference/language\u00a0 \u00a0 language_code = \"en-us\"\u00a0 \u00a0 detect_intent_texts(agent, session_id, texts, language_code)def detect_intent_texts(agent, session_id, texts, language_code):\u00a0 \u00a0 \"\"\"Returns the result of detect intent with texts as inputs.\u00a0 \u00a0 Using the same `session_id` between requests allows continuation\u00a0 \u00a0 of the conversation.\"\"\"\u00a0 \u00a0 session_path = f\"{agent}/sessions/{session_id}\"\u00a0 \u00a0 print(f\"Session path: {session_path}\\n\")\u00a0 \u00a0 client_options = None\u00a0 \u00a0 agent_components = AgentsClient.parse_agent_path(agent)\u00a0 \u00a0 location_id = agent_components[\"location\"]\u00a0 \u00a0 if location_id != \"global\":\u00a0 \u00a0 \u00a0 \u00a0 api_endpoint = f\"{location_id}-dialogflow.googleapis.com:443\"\u00a0 \u00a0 \u00a0 \u00a0 print(f\"API Endpoint: {api_endpoint}\\n\")\u00a0 \u00a0 \u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 session_client = SessionsClient(client_options=client_options)\u00a0 \u00a0 for text in texts:\u00a0 \u00a0 \u00a0 \u00a0 text_input = session.TextInput(text=text)\u00a0 \u00a0 \u00a0 \u00a0 query_input = session.QueryInput(text=text_input, language_code=language_code)\u00a0 \u00a0 \u00a0 \u00a0 request = session.DetectIntentRequest(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 session=session_path, query_input=query_input\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 response = session_client.detect_intent(request=request)\u00a0 \u00a0 \u00a0 \u00a0 print(\"=\" * 20)\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Query text: {response.query_result.text}\")\u00a0 \u00a0 \u00a0 \u00a0 response_messages = [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \" \".join(msg.text.text) for msg in response.query_result.response_messages\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Response text: {' '.join(response_messages)}\\n\")\n```\n## Productionization\nBefore running your agent in production, be sure to implement the [productionization best practices](/dialogflow/cx/docs/concept/best-practices#prod) .", "guide": "Dialogflow"}