{"title": "Dialogflow - Quickstart: Interactions with the API", "url": "https://cloud.google.com/dialogflow/es/docs/quick/api", "abstract": "# Dialogflow - Quickstart: Interactions with the API\nIf you are not using an [integration](/dialogflow/docs/integrations) , you must write code to interact with end-users. For each conversational turn, your code calls the Dialogflow API to query your agent. This guide shows you how to interact with an agent by using the REST API at the command line and by using the client libraries.\n", "content": "## Before you begin\nIf you do not plan on using the API, you can skip this quickstart.\nYou should do the following before reading this guide:\n- Understand [Dialogflow basics](/dialogflow/docs/basics) .\n- Perform [setup steps](/dialogflow/docs/quick/setup) .\n- Perform steps in the [Build an agent](/dialogflow/docs/quick/build-agent) quickstart guide. Steps below continue working on the agent you started in that guide. If you no longer have that agent, you can download [build-agent-quickstart.zip](/static/dialogflow/es/docs/data/build-agent-quickstart.zip) and [import the file](/dialogflow/docs/agents-settings#export) .## Sessions\nA represents a conversation between a Dialogflow agent and an end-user. You create a session at the beginning of a conversation and use it for each turn of the conversation. Once the conversation has ended, you discontinue using the session.\nYou should not use the same session for concurrent conversations with different end-users. Dialogflow maintains the currently active contexts for each active session. Session data is stored by Dialogflow for 20 minutes.\nEach session is determined unique by a session ID generated by your system. You create a new session by providing a new session ID in a [detect intent request](/dialogflow/docs/api-overview#detect-intent) . A session ID is a string of at most 36 bytes in size. Your system is responsible for generating unique session IDs. They can be random numbers, hashed end-user identifiers, or any other values that are convenient for you to generate.\n## Detect intent\nWhen you use the API for interactions, your service interacts directly with the end-user. For each conversational turn, your service sends end-user expressions to Dialogflow by calling the `detectIntent` or `streamingDetectIntent` method of the [Sessions](/dialogflow/docs/reference/common-types#sessions) type. Dialogflow responds with information about the matched intent, the action, the parameters, and the response defined for the intent. Your service performs actions as needed (for example, database queries or external API calls) and sends a message to the end-user. This process continues until the conversation has ended.\nThe following samples show how to detect intent. Each sample accepts a subset of the following inputs:\n- **Project ID** : Use the project ID for the project you created in the [setup steps](/dialogflow/docs/quick/setup) .\n- **Session ID** : For the purpose of testing an agent, you can use anything. For example, \"123456789\" is frequently used by samples.\n- **Text or texts** : This is the single end-user expression or list of end-user expressions. If multiple expressions are supplied, the sample code calls detect intent for each expression. Try using \"I know french\".\n- **Language code** : The language code for the end-user expression. Use \"en-US\" for this example agent.\nTo detect intent, call the\n`detectIntent`\nmethod on the\n`Sessions`\nresource.\nBefore using any of the request data, make the following replacements:- : your Google Cloud project ID\n- : a session ID\nHTTP method and URL:\n```\nPOST https://dialogflow.googleapis.com/v2/projects/PROJECT_ID/agent/sessions/SESSION_ID:detectIntent\n```\nRequest JSON body:\n```\n{\n \"query_input\": {\n \"text\": {\n  \"text\": \"I know french\",\n  \"language_code\": \"en-US\"\n }\n }\n}\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"responseId\": \"856510ca-f617-4e25-b0bb-a26c0a59e030-19db3199\",\n \"queryResult\": {\n \"queryText\": \"I know french\",\n \"parameters\": {\n  \"language\": \"French\",\n  \"language-programming\": \"\"\n },\n \"allRequiredParamsPresent\": true,\n \"fulfillmentText\": \"Wow! I didn't know you knew French. How long have you known French?\",\n \"fulfillmentMessages\": [  {\n  \"text\": {\n   \"text\": [   \"Wow! I didn't know you knew French. How long have you known French?\"\n   ]\n  }\n  }\n ],\n \"outputContexts\": [  {\n  \"name\": \"projects/PROJECT_ID/agent/sessions/123456789/contexts/set-language-followup\",\n  \"lifespanCount\": 2,\n  \"parameters\": {\n   \"language\": \"French\",\n   \"language.original\": \"french\",\n   \"language-programming\": \"\",\n   \"language-programming.original\": \"\"\n  }\n  }\n ],\n \"intent\": {\n  \"name\": \"projects/PROJECT_ID/agent/intents/fe45022f-e58a-484f-96e8-1cbd6628f648\",\n  \"displayName\": \"set-language\"\n },\n \"intentDetectionConfidence\": 1,\n \"languageCode\": \"en\"\n }\n}\n```\nNote the following about the response:- The`queryResult.intent`field contains the matched intent.\n- The value of the`queryResult.fulfillmentMessages`field contains the intent response. This is the response that your system should forward to the end-user.\n- The value of the`queryResult.parameters`field contains the parameters extracted from the end-user expression.\n- The`queryResult.outputContext`field contains the active context.\nTo authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/dialogflow/detect_intent/detect_intent.go) \n```\nfunc DetectIntentText(projectID, sessionID, text, languageCode string) (string, error) {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 sessionClient, err := dialogflow.NewSessionsClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return \"\", err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer sessionClient.Close()\u00a0 \u00a0 \u00a0 \u00a0 if projectID == \"\" || sessionID == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return \"\", errors.New(fmt.Sprintf(\"Received empty project (%s) or session (%s)\", projectID, sessionID))\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 sessionPath := fmt.Sprintf(\"projects/%s/agent/sessions/%s\", projectID, sessionID)\u00a0 \u00a0 \u00a0 \u00a0 textInput := dialogflowpb.TextInput{Text: text, LanguageCode: languageCode}\u00a0 \u00a0 \u00a0 \u00a0 queryTextInput := dialogflowpb.QueryInput_Text{Text: &textInput}\u00a0 \u00a0 \u00a0 \u00a0 queryInput := dialogflowpb.QueryInput{Input: &queryTextInput}\u00a0 \u00a0 \u00a0 \u00a0 request := dialogflowpb.DetectIntentRequest{Session: sessionPath, QueryInput: &queryInput}\u00a0 \u00a0 \u00a0 \u00a0 response, err := sessionClient.DetectIntent(ctx, &request)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return \"\", err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 queryResult := response.GetQueryResult()\u00a0 \u00a0 \u00a0 \u00a0 fulfillmentText := queryResult.GetFulfillmentText()\u00a0 \u00a0 \u00a0 \u00a0 return fulfillmentText, nil}\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/dialogflow/snippets/src/main/java/com/example/dialogflow/DetectIntentTexts.java) \n```\nimport com.google.api.gax.rpc.ApiException;import com.google.cloud.dialogflow.v2.DetectIntentResponse;import com.google.cloud.dialogflow.v2.QueryInput;import com.google.cloud.dialogflow.v2.QueryResult;import com.google.cloud.dialogflow.v2.SessionName;import com.google.cloud.dialogflow.v2.SessionsClient;import com.google.cloud.dialogflow.v2.TextInput;import com.google.common.collect.Maps;import java.io.IOException;import java.util.List;import java.util.Map;public class DetectIntentTexts {\u00a0 // DialogFlow API Detect Intent sample with text inputs.\u00a0 public static Map<String, QueryResult> detectIntentTexts(\u00a0 \u00a0 \u00a0 String projectId, List<String> texts, String sessionId, String languageCode)\u00a0 \u00a0 \u00a0 throws IOException, ApiException {\u00a0 \u00a0 Map<String, QueryResult> queryResults = Maps.newHashMap();\u00a0 \u00a0 // Instantiates a client\u00a0 \u00a0 try (SessionsClient sessionsClient = SessionsClient.create()) {\u00a0 \u00a0 \u00a0 // Set the session name using the sessionId (UUID) and projectID (my-project-id)\u00a0 \u00a0 \u00a0 SessionName session = SessionName.of(projectId, sessionId);\u00a0 \u00a0 \u00a0 System.out.println(\"Session Path: \" + session.toString());\u00a0 \u00a0 \u00a0 // Detect intents for each text input\u00a0 \u00a0 \u00a0 for (String text : texts) {\u00a0 \u00a0 \u00a0 \u00a0 // Set the text (hello) and language code (en-US) for the query\u00a0 \u00a0 \u00a0 \u00a0 TextInput.Builder textInput =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TextInput.newBuilder().setText(text).setLanguageCode(languageCode);\u00a0 \u00a0 \u00a0 \u00a0 // Build the query with the TextInput\u00a0 \u00a0 \u00a0 \u00a0 QueryInput queryInput = QueryInput.newBuilder().setText(textInput).build();\u00a0 \u00a0 \u00a0 \u00a0 // Performs the detect intent request\u00a0 \u00a0 \u00a0 \u00a0 DetectIntentResponse response = sessionsClient.detectIntent(session, queryInput);\u00a0 \u00a0 \u00a0 \u00a0 // Display the query result\u00a0 \u00a0 \u00a0 \u00a0 QueryResult queryResult = response.getQueryResult();\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"====================\");\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"Query Text: '%s'\\n\", queryResult.getQueryText());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Detected Intent: %s (confidence: %f)\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getIntent().getDisplayName(), queryResult.getIntentDetectionConfidence());\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Fulfillment Text: '%s'\\n\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 queryResult.getFulfillmentMessagesCount() > 0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ? queryResult.getFulfillmentMessages(0).getText()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 : \"Triggered Default Fallback Intent\");\u00a0 \u00a0 \u00a0 \u00a0 queryResults.put(text, queryResult);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 return queryResults;\u00a0 }}\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/dialogflow/detect.js) \n```\n/**\u00a0* TODO(developer): UPDATE these variables before running the sample.\u00a0*/// projectId: ID of the GCP project where Dialogflow agent is deployed// const projectId = 'PROJECT_ID';// sessionId: String representing a random number or hashed user identifier// const sessionId = '123456';// queries: A set of sequential queries to be send to Dialogflow agent for Intent Detection// const queries = [// \u00a0 'Reserve a meeting room in Toronto office, there will be 5 of us',// \u00a0 'Next monday at 3pm for 1 hour, please', // Tell the bot when the meeting is taking place// \u00a0 'B' \u00a0// Rooms are defined on the Dialogflow agent, default options are A, B, or C// ]// languageCode: Indicates the language Dialogflow agent should use to detect intents// const languageCode = 'en';// Imports the Dialogflow libraryconst dialogflow = require('@google-cloud/dialogflow');// Instantiates a session clientconst sessionClient = new dialogflow.SessionsClient();async function detectIntent(\u00a0 projectId,\u00a0 sessionId,\u00a0 query,\u00a0 contexts,\u00a0 languageCode) {\u00a0 // The path to identify the agent that owns the created intent.\u00a0 const sessionPath = sessionClient.projectAgentSessionPath(\u00a0 \u00a0 projectId,\u00a0 \u00a0 sessionId\u00a0 );\u00a0 // The text query request.\u00a0 const request = {\u00a0 \u00a0 session: sessionPath,\u00a0 \u00a0 queryInput: {\u00a0 \u00a0 \u00a0 text: {\u00a0 \u00a0 \u00a0 \u00a0 text: query,\u00a0 \u00a0 \u00a0 \u00a0 languageCode: languageCode,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 };\u00a0 if (contexts && contexts.length > 0) {\u00a0 \u00a0 request.queryParams = {\u00a0 \u00a0 \u00a0 contexts: contexts,\u00a0 \u00a0 };\u00a0 }\u00a0 const responses = await sessionClient.detectIntent(request);\u00a0 return responses[0];}async function executeQueries(projectId, sessionId, queries, languageCode) {\u00a0 // Keeping the context across queries let's us simulate an ongoing conversation with the bot\u00a0 let context;\u00a0 let intentResponse;\u00a0 for (const query of queries) {\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 console.log(`Sending Query: ${query}`);\u00a0 \u00a0 \u00a0 intentResponse = await detectIntent(\u00a0 \u00a0 \u00a0 \u00a0 projectId,\u00a0 \u00a0 \u00a0 \u00a0 sessionId,\u00a0 \u00a0 \u00a0 \u00a0 query,\u00a0 \u00a0 \u00a0 \u00a0 context,\u00a0 \u00a0 \u00a0 \u00a0 languageCode\u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 \u00a0 console.log('Detected intent');\u00a0 \u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 \u00a0 `Fulfillment Text: ${intentResponse.queryResult.fulfillmentText}`\u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 \u00a0 // Use the context from this response for next queries\u00a0 \u00a0 \u00a0 context = intentResponse.queryResult.outputContexts;\u00a0 \u00a0 } catch (error) {\u00a0 \u00a0 \u00a0 console.log(error);\u00a0 \u00a0 }\u00a0 }}executeQueries(projectId, sessionId, queries, languageCode);\n```To authenticate to Dialogflow, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/dialogflow/detect_intent_texts.py) \n```\ndef detect_intent_texts(project_id, session_id, texts, language_code):\u00a0 \u00a0 \"\"\"Returns the result of detect intent with texts as inputs.\u00a0 \u00a0 Using the same `session_id` between requests allows continuation\u00a0 \u00a0 of the conversation.\"\"\"\u00a0 \u00a0 from google.cloud import dialogflow\u00a0 \u00a0 session_client = dialogflow.SessionsClient()\u00a0 \u00a0 session = session_client.session_path(project_id, session_id)\u00a0 \u00a0 print(\"Session path: {}\\n\".format(session))\u00a0 \u00a0 for text in texts:\u00a0 \u00a0 \u00a0 \u00a0 text_input = dialogflow.TextInput(text=text, language_code=language_code)\u00a0 \u00a0 \u00a0 \u00a0 query_input = dialogflow.QueryInput(text=text_input)\u00a0 \u00a0 \u00a0 \u00a0 response = session_client.detect_intent(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 request={\"session\": session, \"query_input\": query_input}\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 print(\"=\" * 20)\u00a0 \u00a0 \u00a0 \u00a0 print(\"Query text: {}\".format(response.query_result.query_text))\u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Detected intent: {} (confidence: {})\\n\".format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response.query_result.intent.display_name,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response.query_result.intent_detection_confidence,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 print(\"Fulfillment text: {}\\n\".format(response.query_result.fulfillment_text))\n```No preface\n **C#** : Please follow the [C# setup instructions](/dialogflow/docs/reference/libraries) on the client libraries page  and then visit the [Dialogflow reference documentation for .NET.](https://googleapis.github.io/google-cloud-dotnet/docs/Google.Cloud.Dialogflow.V2/index.html) \n **PHP** : Please follow the [PHP setup instructions](/dialogflow/docs/reference/libraries) on the client libraries page  and then visit the [Dialogflow reference documentation for PHP.](/php/docs/reference/cloud-dialogflow/latest) \n **Ruby** : Please follow the [Ruby setup instructions](/dialogflow/docs/reference/libraries) on the client libraries page  and then visit the [Dialogflow reference documentation for Ruby.](https://googleapis.dev/ruby/google-cloud-dialogflow/latest/Google/Cloud/Dialogflow.html)\n## Productionization\nBefore running your agent in production, be sure to implement the [productionization best practices](/dialogflow/es/docs/best-practices#prod) .", "guide": "Dialogflow"}