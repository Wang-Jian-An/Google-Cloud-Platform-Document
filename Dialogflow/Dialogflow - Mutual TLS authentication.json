{"title": "Dialogflow - Mutual TLS authentication", "url": "https://cloud.google.com/dialogflow/es/docs/fulfillment-mtls", "abstract": "# Dialogflow - Mutual TLS authentication\nThe network traffic initiated by Dialogflow for webhook requests is sent on a public network. To ensure that traffic is both secure and trusted in both directions, Dialogflow optionally supports [Mutual TLS authentication (mTLS)](https://en.wikipedia.org/wiki/Mutual_authentication) . During Dialogflow's standard [TLS handshake](https://hpbn.co/transport-layer-security-tls/#tls-handshake) , your webhook server presents a certificate that can be validated by Dialogflow, either by following the [Certificate Authority chain](https://hpbn.co/transport-layer-security-tls/#chain-of-trust-and-certificate-authorities) or by comparing the certificate to a [Custom CA certificate](/dialogflow/cx/docs/concept/custom-ca) . By enabling mTLS on your webhook server, it will be able to authenticate the [Google certificate](https://pki.goog/roots.pem) presented by Dialogflow to your webhook server for validation, completing the establishment of mutual trust.\n", "content": "## Requesting mTLS\nTo request mTLS:\n- Prepare your webhook HTTPS server to request the client certificate during the TLS handshake.\n- Your webhook server should verify the client certificate upon receiving it.\n- Install a certificate chain for your webhook server, which can be mutually trusted by both client and server. Applications connecting to Google services should trust all the Certificate Authorities listed by [Google Trust Services](https://pki.goog/faq/#faq-27) . You can download root certs from: [https://pki.goog/](https://pki.goog/) . **Note:** Dialogflow does not support customizing the client certificates presented to webhook servers.## Sample call to a webhook server using mTLS\nThis example uses the agent shown in the quickstart with a [webhook](/dialogflow/cx/docs/concept/webhook) server running [openssl](https://www.openssl.org/docs/manmaster/man1/openssl.html) .\n- Sample setup- A Dialogflow ES agent that greets the end user and queries a  webhook pointing to a standalone web server.\n- A private key for TLS communication in a file named`key.pem`.\n- A certificate chain signed by a [publicly-trusted  CA (Certificate Authority)](/load-balancing/docs/ssl-certificates/self-managed-certs#use_a_publicly-trusted_ca) in a file named`fullchain.pem`.\n- Execute the [openssl s_server](https://www.openssl.org/docs/manmaster/man1/openssl-s_server.html) program in the server machine.```\nsudo openssl s_server -key key.pem -cert fullchain.pem -accept 443 -verify 1\n```\n- A request is sent to the agent from a client machine. For this example, the request is  \"Hi\". This request can be sent using the Dialogflow Console, or  through an API call.\n- Output of [openssl s_server](https://www.openssl.org/docs/manmaster/man1/openssl-s_server.html) in the server machine.```\nverify depth is 1\nUsing default temp DH parameters\nACCEPT\ndepth=2 C = US, O = Google Trust Services LLC, CN = GTS Root R1\nverify return:1\ndepth=1 C = US, O = Google Trust Services LLC, CN = GTS CA 1D4\nverify return:1\ndepth=0 CN = *.dialogflow.com\nverify return:1\n-----BEGIN SSL SESSION PARAMETERS----MII...\n-----END SSL SESSION PARAMETERS----Client certificate\n-----BEGIN CERTIFICATE----MII...\n-----END CERTIFICATE----subject=CN = *.dialogflow.com\nissuer=C = US, O = Google Trust Services LLC, CN = GTS CA 1D4\nShared ciphers:TLS_AES_128_GCM_SHA256:...\nSignature Algorithms: ECDSA+SHA256:...\nShared Signature Algorithms: ECDSA+SHA256:...\nPeer signing digest: SHA256\nPeer signature type: RSA-PSS\nSupported Elliptic Groups: 0x6A6A:...\nShared Elliptic groups: X25519:...\nCIPHER is TLS_AES_128_GCM_SHA256\nSecure Renegotiation IS NOT supported\nPOST /dialogflowFulfillment HTTP/1.1\nauthorization: Bearer ey...\ncontent-type: application/json\nHost: www.example.com\nContent-Length: 1011\nConnection: keep-alive\nAccept: */*\nUser-Agent: Google-Dialogflow\nAccept-Encoding: gzip, deflate, br\n{\n \"responseId\": \"96c0029a-149d-4f5d-b225-0b0bb0f0c8d9-afbcf665\",\n \"queryResult\": {\n \"queryText\": \"Hi\",\n \"action\": \"input.welcome\",\n \"parameters\": {\n },\n \"allRequiredParamsPresent\": true,\n \"outputContexts\": [{\n  \"name\": \"projects/PROJECT-ID/agent/sessions/58ab33f3-b57a-aae9-fb23-8306242d4871/contexts/__system_counters__\",\n  \"parameters\": {\n  \"no-input\": 0.0,\n  \"no-match\": 0.0\n  }\n }],\n \"intent\": {\n  \"name\": \"projects/PROJECT-ID/agent/intents/399277d6-2ed7-4329-840d-8baa0f60480e\",\n  \"displayName\": \"Default Welcome Intent\"\n },\n \"intentDetectionConfidence\": 1.0,\n \"languageCode\": \"en\",\n \"sentimentAnalysisResult\": {\n  \"queryTextSentiment\": {\n  \"score\": 0.2,\n  \"magnitude\": 0.2\n  }\n }\n },\n \"originalDetectIntentRequest\": {\n \"source\": \"DIALOGFLOW_CONSOLE\",\n \"payload\": {\n }\n },\n \"session\": \"projects/PROJECT-ID/agent/sessions/58ab33f3-b57a-aae9-fb23-8306242d4871\"\n}ERROR\nshutting down SSL\nCONNECTION CLOSED\n  \n```## Best Practice\nTo make sure that webhook requests are initiated from your own Dialogflow agents, you should verify the Bearer [service identity token](/dialogflow/cx/docs/concept/webhook#id-token) from the request's Authorization header. Alternatively, you can verify a session parameter provided previously by an authentication server on your side.\n## Errors\nIf the client certificate validation fails (for example, the webhook server does not trust the client certificate), the TLS handshake fails and the session terminates.\nCommon error messages:\n| Error message                  | Explanation                                                        |\n|:-------------------------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Failed to verify client's certificate: x509: certificate signed by unknown authority | Dialogflow sends its client certificate to the external webhook, but the external webhook cannot verify it. This may be because the external webhook didn't install the CA chain correctly. All root CAs from Google should be trusted. |", "guide": "Dialogflow"}