{"title": "Dialogflow - Quickstart: Create a webhook", "url": "https://cloud.google.com/dialogflow/cx/docs/quick/webhook", "abstract": "# Dialogflow - Quickstart: Create a webhook\nThis guide shows you how to use a [webhook](/dialogflow/cx/docs/concept/webhook) , so your agent can be more dynamic. [Cloud Functions](/functions/docs) are used to host the webhook due to their simplicity, but there are many other ways that you could host a webhook service. The example also uses the Go programming language, but you can use any [language supported by Cloud Functions](/functions/docs/concepts/exec) . You will not need to edit the code for this guide.\nThe example webhook code does the following:\n- Reads parameter values from the webhook request.\n- Writes a parameter value to the webhook response.\n- Provides a text response in the webhook response.", "content": "## Before you begin\nIf you don't plan on using webhooks, you can skip this quickstart.\nYou should do the following before reading this guide:\n- Read [Dialogflow CX basics](/dialogflow/cx/docs/basics) .\n- Perform [setup steps](/dialogflow/cx/docs/quick/setup) .\n- Perform steps in the [Build an agent](/dialogflow/cx/docs/quick/build-agent) quickstart guide. Steps below continue working on the same agent. If you no longer have that agent, you can [download the agent](/static/dialogflow/cx/docs/data/agent-shirts-1-flow.zip) and [restore it](/dialogflow/cx/docs/concept/agent#export) .## Create the Cloud Function\nCloud Functions can be created with the Google Cloud console ( [visit documentation](https://support.google.com/cloud/answer/3465889?ref_topic=3340599) , [open console](https://console.cloud.google.com/) ). To create a function for this guide:\n- It is important that your Dialogflow agent and the function are both in the same project. This is the easiest way for Dialogflow to have [secure access to your function](/dialogflow/cx/docs/concept/webhook#gcf) . To select your project, [go to the project selector](https://console.cloud.google.com/projectselector2/home/dashboard) .\n- Go to the [Cloud Functions overview page](https://console.cloud.google.com/functions/list) .\n- Click **Create Function** , and set the following fields:- **Environment** : 1st gen\n- **Function name** : shirts-agent-webhook\n- **Region** : If you specified a region for your agent, use the same region.\n- **HTTP Trigger type** : HTTP\n- **URL** : Click the copy button here and save the value. You will need this URL when configuring the webhook.\n- **Authentication** : Require authentication\n- **Require HTTPS** : checked\n- Click **Save** .\n- Click **Next** (You do not need special runtime, build, connections, or security settings).\n- Set the following fields:- **Runtime** : Select the latest Go runtime.\n- **Source code** : Inline Editor\n- **Entry point** : HandleWebhookRequest\n- Replace the code with the following:```\n// Package cxwh contains an example Dialogflow CX webhook\npackage cxwh\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\ntype fulfillmentInfo struct {\n\tTag string `json:\"tag\"`\n}\ntype sessionInfo struct {\n\tSession string     `json:\"session\"`\n\tParameters map[string]interface{} `json:\"parameters\"`\n}\ntype text struct {\n\tText []string `json:\"text\"`\n}\ntype responseMessage struct {\n\tText text `json:\"text\"`\n}\ntype fulfillmentResponse struct {\n\tMessages []responseMessage `json:\"messages\"`\n}\n// webhookRequest is used to unmarshal a WebhookRequest JSON object. Note that\n// not all members need to be defined--just those that you need to process.\n// As an alternative, you could use the types provided by the Dialogflow protocol buffers:\n// https://pkg.go.dev/google.golang.org/genproto/googleapis/cloud/dialogflow/cx/v3#WebhookRequest\ntype webhookRequest struct {\n\tFulfillmentInfo fulfillmentInfo `json:\"fulfillmentInfo\"`\n\tSessionInfo  sessionInfo  `json:\"sessionInfo\"`\n}\n// webhookResponse is used to marshal a WebhookResponse JSON object. Note that\n// not all members need to be defined--just those that you need to process.\n// As an alternative, you could use the types provided by the Dialogflow protocol buffers:\n// https://pkg.go.dev/google.golang.org/genproto/googleapis/cloud/dialogflow/cx/v3#WebhookResponse\ntype webhookResponse struct {\n\tFulfillmentResponse fulfillmentResponse `json:\"fulfillmentResponse\"`\n\tSessionInfo   sessionInfo   `json:\"sessionInfo\"`\n}\n// confirm handles webhook calls using the \"confirm\" tag.\nfunc confirm(request webhookRequest) (webhookResponse, error) {\n\t// Create a text message that utilizes the \"size\" and \"color\"\n\t// parameters provided by the end-user.\n\t// This text message is used in the response below.\n\tt := fmt.Sprintf(\"You can pick up your order for a %s %s shirt in 5 days.\",\n\t\trequest.SessionInfo.Parameters[\"size\"],\n\t\trequest.SessionInfo.Parameters[\"color\"])\n\t// Create session parameters that are populated in the response.\n\t// The \"cancel-period\" parameter is referenced by the agent.\n\t// This example hard codes the value 2, but a real system\n\t// might look up this value in a database.\n\tp := map[string]interface{}{\"cancel-period\": \"2\"}\n\t// Build and return the response.\n\tresponse := webhookResponse{\n\t\tFulfillmentResponse: fulfillmentResponse{\n\t\t\tMessages: []responseMessage{\n\t\t\t\t{\n\t\t\t\t\tText: text{\n\t\t\t\t\t\tText: []string{t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tSessionInfo: sessionInfo{\n\t\t\tParameters: p,\n\t\t},\n\t}\n\treturn response, nil\n}\n// handleError handles internal errors.\nfunc handleError(w http.ResponseWriter, err error) {\n\tw.WriteHeader(http.StatusInternalServerError)\n\tfmt.Fprintf(w, \"ERROR: %v\", err)\n}\n// HandleWebhookRequest handles WebhookRequest and sends the WebhookResponse.\nfunc HandleWebhookRequest(w http.ResponseWriter, r *http.Request) {\n\tvar request webhookRequest\n\tvar response webhookResponse\n\tvar err error\n\t// Read input JSON\n\tif err = json.NewDecoder(r.Body).Decode(&request); err != nil {\n\t\thandleError(w, err)\n\t\treturn\n\t}\n\tlog.Printf(\"Request: %+v\", request)\n\t// Get the tag from the request, and call the corresponding\n\t// function that handles that tag.\n\t// This example only has one possible tag,\n\t// but most agents would have many.\n\tswitch tag := request.FulfillmentInfo.Tag; tag {\n\tcase \"confirm\":\n\t\tresponse, err = confirm(request)\n\tdefault:\n\t\terr = fmt.Errorf(\"Unknown tag: %s\", tag)\n\t}\n\tif err != nil {\n\t\thandleError(w, err)\n\t\treturn\n\t}\n\tlog.Printf(\"Response: %+v\", response)\n\t// Send response\n\tif err = json.NewEncoder(w).Encode(&response); err != nil {\n\t\thandleError(w, err)\n\t\treturn\n\t}\n}\n```\n- Click **Deploy** .\n- Wait until the status indicator shows that the function has successfully deployed. While waiting, examine the code you just deployed. Code comments describe important details.## Create the webhook\nNow that the webhook exists as a Cloud function, you will associate this webhook with your agent. To create the webhook for your agent:\n- Open the [Dialogflow CX Console](https://dialogflow.cloud.google.com/cx/projects) .\n- Choose your Google Cloud project.\n- Select your agent.\n- Select the **Manage** tab.\n- Click **Webhooks** .\n- Click **Create** .\n- Complete the following fields:- **Display name** : shirts-agent-webhook\n- **Webhook URL** : Provide the webhook URL you saved when creating the function.\n- **Subtype** : Standard.\n- All other fields use default values.\n- Click **Save** .## Use the webhook\nNow that the webhook is available to the agent, you will make use of the webhook in [fulfillment](/dialogflow/cx/docs/concept/fulfillment) . The **Order Confirmation** page has an entry fulfillment, which currently has a static text response. To update the fulfillment to use your webhook:\n- Select the **Build** tab.\n- Click the **Order Confirmation** page to expand the page on the agent builder graph.\n- Click the **Entry Fulfillment** field on the page to open the fulfillment panel.\n- Delete the existing text response under the **Agent says** heading. When you hover the text, the deletebutton appears.\n- Click **Enable webhook** .\n- Select the`shirts-agent-webhook`option from the **Webhook** dropdown menu.\n- Enter`confirm`for the **Tag** field.\n- Click **Save** .\n- Close the fulfillment panel.The deployed webhook code sends a response that creates a [parameter](/dialogflow/cx/docs/concept/parameter) named `cancel-period` . Update the agent to reference this parameter in the final agent response for the same **Order Confirmation** page:\n- Click the condition [route](/dialogflow/cx/docs/concept/handler) shown with a`true`condition to open the route panel.\n- Scroll down to the **Fulfillment** section of the route panel, and add the following text response under the **Agent says** heading:`You can cancel your order within $session.params.cancel-period days. Goodbye.`\n- Click **Save** .\n- Close the route panel.\n## Test the agent in the simulator\nYour agent and webhook are ready to test with the [simulator](/dialogflow/cx/docs/concept/console#simulator) :\n- Click **Test Agent** .\n- Enter`I want to buy a large red shirt`and press enter.\nSince you provided both a size and color, you gave the agent everything it needs to create a shirt order, so it transitions directly to the **Order Confirmation** page.\nThe following describes the agent responses:\n| Response             | Explanation                                                             |\n|:------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Okay, let's start a new order.        | When the New Order page became active, the entry fulfillment was called. The response was triggered from this fulfillment.                                 |\n| You have selected a large, red shirt.      | When all form parameters have been provided for the New Order page, the condition route checking for form completion is called. The response was triggered from the fulfillment for this route. This route also transitions to the Order Confirmation page. |\n| You can pick up your order for a large red shirt in 5 days. | The entry fulfillment for the Order Confirmation page calls the webhook. See the confirm function in the webhook code. That function creates this text response, and it uses the parameters provided in the webhook request.        |\n| You can cancel your order within 2 days. Goodbye.   | The Order Confirmation page has a condition route with a condition that is always true. This response is triggered by the fulfillment for that route. Note that the response makes use of the parameter set by the webhook in the webhook response.   |", "guide": "Dialogflow"}