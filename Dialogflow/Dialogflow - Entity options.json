{"title": "Dialogflow - Entity options", "url": "https://cloud.google.com/dialogflow/cx/docs/concept/entity-options", "abstract": "# Dialogflow - Entity options\nThere are several entity options that change the behavior of entity matching and data extraction. These options are pre-configured for [system entities](/dialogflow/cx/docs/concept/entity-system) , so you can not change them for system entities. However, you can change them for your own [custom entities](/dialogflow/cx/docs/concept/entity-custom) . You can create different kinds of entities, depending on the options selected:\n- [Map entity](#map) \n- [List entity](#list) \n- [Composite entity](#comp) (a special kind of list entity)\n- [Regexp entity](#regexp) \nThere are other options that do not determine the kind of entity, but do affect the behavior of entity matching:\n- [Automated expansion](#expansion) \n- [Fuzzy matching](#fuzzy) \n- [Redact in log](#redact) \n- [Entity exclusions](#exclusion) \nThis document describes each of these options.\n", "content": "## Where to find this data\nWhen building an agent, it is most common to use the Dialogflow CX Console ( [visit documentation](/dialogflow/cx/docs/concept/console) , [open console](https://dialogflow.cloud.google.com/cx/projects) ). The instructions below focus on using the console. To access entity options data:\n- Open the [Dialogflow CX Console](https://dialogflow.cloud.google.com/cx/projects) .\n- Choose your GCP project.\n- Select your agent.\n- Select the **Manage** tab.\n- Click **Entity Types** .\n- See the following options for any existing entities (some of these may only be visible after expanding **Advanced options** ):- **Entities only (no synonyms)** \n- **Regexp entities** \n- **Automatically add entities** \n- **Fuzzy matching** \n- **Redact in log** \n- **Entity exclusions** If you are building an agent using the API instead of the console, see the `EntityType` type. The API field names are similar to the console field names. The instructions below highlight any important differences between the console and the API.## Map entity\nprovide a map from reference values to synonyms for each reference value. Each map entity entry contains a single reference value and a list of synonyms. For example, each of the following rows are entity entries for a `size` entity type:\n| Reference value | Synonyms    |\n|:------------------|:-----------------------|\n| S     | S, small, tiny, little |\n| M     | M, medium, average  |\n| L     | L, large, huge, big |\nNotice that the reference value is included in the synonym list for each entity entry above. In order for a reference value to be matched, it needs to be included as a synonym itself. When you initially enter a reference value with the console, it is automatically added as a synonym.\nIf any of the synonyms are matched for an end-user input part, the associated reference value is extracted for the match and is used to resolve the associated [parameter](/dialogflow/cx/docs/concept/parameter) value.\nIt is okay for the reference value to be omitted from the synonym list. This just means that it is not matched to an end-user input part, but it is used as the extracted value when one of its synonyms is matched. This is desirable when you use special strings for reference values that are not typed or spoken by end-users.\nMany system entities are map entities. For example, the `@sys.date` system entity matches common date inputs like \"January 1, 2015\" or \"The first of January of 2015\". Both of those inputs are mapped to a reference value in ISO-8601 format: \"2015-01-01T12:00:00-03:00\".\nTo create a map entity:\n- Using the console, uncheck the **Regexp entities** option and uncheck the **Entities only** option.\n- Using the API, set the`EntityType.kind`field to`KIND_MAP`.## List entity\nprovide a list of single value entity entries. They do not have reference values and synonyms. For example, each of the following rows are entity entries for a `material` entity type:\n| Value |\n|:--------|\n| fabric |\n| wood |\n| metal |\nIf any value is matched for an end-user input part, the value is extracted for the match and is used to resolve the associated [parameter](/dialogflow/cx/docs/concept/parameter) value.\nMany system entities are list entities. For example, the `@sys.color` system entity matches common color inputs like \"red\" or \"blue\". When a color is matched, the extracted value does not map to any reference value. For example, shades of red, such as \"scarlet\" or \"crimson\", are not mapped to \"red\" and are extracted as their original values \"scarlet\" and \"crimson\".\nTo create a list entity:\n- Using the console, uncheck the **Regexp entities** option and check the **Entities only** option.\n- Using the API, set the`EntityType.kind`field to`KIND_LIST`.## Composite entity\nA is a special kind of list entity. Entity entries for list entities typically contain simple words or phrases, but they may also contain other entity types. When an entity type is referenced in another entity type, the reference is called an . When a list entity contains aliases to other entity types, it is called a composite entity.\nWhen creating an alias, you supply the name of the referenced entity type and a property name of your choosing. When a composite entity is matched at runtime, the extracted value is returned as a JSON object, with alias property names used as JSON property names. The format for entering an alias is:\n```\n@entity-name:property-name\n```\nFor example, you could create a `place` entity type that matches either a city or a state with the following entity entries:\n| Value    |\n|:---------------------|\n| @sys.geo-city:city |\n| @sys.geo-state:state |\nIf an end-user input contains a \"Nashville\" part, the `place` entity type is matched. The extracted value is returned as: `{\"city\": \"Nashville\"}` .\nYou can also use multiple entity aliases in an entity entry. Consider the following `move` custom entity type that contains aliases to a `direction` entity type and the `@sys.number` system entity type:\n**Direction custom map entity type:**\n| Reference value | Synonyms     |\n|:------------------|:--------------------------|\n| forward   | forward, forwards   |\n| back    | back, backward, backwards |\n**Move custom list entity type:**\n| Value          |\n|:---------------------------------------------|\n| @sys.number:steps steps @direction:direction |\nIf the `move` entity is matched to an end-user input that contains \"five steps backward\", the `move` entity will be matched. The extracted value is returned as: `{\"steps\": 5, \"direction\": \"back\"}` .\nMany system entities are composite entities. For example, the `@sys.unit-currency` system entity is used for matching amounts of money with a currency name. It matches end-user inputs like \"50 euros\" or \"twenty dollars and five cents\". The extracted value is returned as a JSON object like: `{\"amount\": 50, \"currency\": \"EUR\"}`\n## Regexp entity\nWith , you can provide regular expressions for matching. For more information, see [Regexp entities](/dialogflow/cx/docs/concept/entity-regexp) .\nTo create a regexp entity:\n- Using the console, check the **Regexp entities** option.\n- Using the API, set the`EntityType.kind`field to`KIND_REGEXP`.## Automated expansion (automatically add entities)\nYou can enable automated expansion for a custom entity type. When enabled, your agent can recognize values that have not been explicitly provided. For example, consider a shopping list entity type:\n| Value  |\n|:----------|\n| bread  |\n| butter |\n| milk  |\n| apple  |\n| ice cream |\nIf an end-user input is \"I need to buy some carrots\", \"carrots\" will be matched for this entity type, even though it's not provided. The agent recognizes that \"carrots\" is contextually similar to other values.\nYou should follow the best practices when considering automated expansion:\n- Enabling automated expansion doesn't guarantee entity extraction. For a finite list, you should provide the complete list instead of providing a partial list and enabling automated expansion.\n- If you enable automated expansion in more than one entity, it may cause conflicts and unexpected classification results.\n- To ensure better parameter extraction quality, it is crucial to provide diverse training data which cover all the use-cases in which a given entity can be found in the expected agent's traffic. With not enough examples, automated entities expansion might not work as expected.\nTo enable automated expansion:\n- Using the console, check the **Automatically add entities** option.\n- Using the API, set the`EntityType.autoExpansionMode`field to`AUTO_EXPANSION_MODE_DEFAULT`.## Fuzzy matching\nYou can enable for a custom entity. With fuzzy matching enabled, the ordering of the words in a value or synonym does not matter. For more information, see [Fuzzy matching](/dialogflow/cx/docs/concept/entity-fuzzy) .\nTo enable fuzzy matching:\n- Using the console, check the **Fuzzy matching** option.\n- Using the API, set the`EntityType.enableFuzzyExtraction`field to`true`.## Redact in log\nIf you enable entity redaction, all runtime extracted parameter values for the entity type will be redacted when logging.\nAs an alternative, you can [redact individual parameters](/dialogflow/cx/docs/concept/parameter#redact) .\n## Entity exclusions\nYou can add entity exclusions, which are phrases that shouldn't be matched. For example, if you have a size entity type with entity (an adjective), you might consider adding (a noun) as an exclusion.", "guide": "Dialogflow"}