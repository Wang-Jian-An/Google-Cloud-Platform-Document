{"title": "Docs - Intelligent Products Essentials reference architecture", "url": "https://cloud.google.com/architecture/intelligent-products-essentials-architecture", "abstract": "# Docs - Intelligent Products Essentials reference architecture\nLast reviewed 2022-07-01 UTC\nThis document describes a reference architecture for technical decision makers who want to connect devices and build IoT apps on Google Cloud using [Intelligent Products Essentials](/solutions/intelligent-products) .\nManufacturers want to continuously improve their products by adding intelligent capabilities that delight customers and monetize new features. This document helps architects tasked with designing intelligent product systems on Google Cloud that is scalable, reliable, secure, and cost-effective.\nGoogle Cloud provides capabilities for connecting, ingesting, storing, analyzing, and retrieving data from products to build in artificial intelligence and machine learning capabilities, such as a personalized product ownership app or a digital twin simulation. This document presents an overview of an architecture, its high-level components, integration topics, and general design considerations. The architecture includes the following:\n- [Firebase](https://firebase.google.com/) for user app hosting\n- [BigQuery](/bigquery) and [Looker](https://looker.com/) for analytics and business intelligence (BI)\n- [Cloud Run](/run) and [Firestore](/firestore) for microservices infrastructure", "content": "## Architecture\nThe following diagram shows the overall architecture, including the following components:\n- Device telemetry streaming\n- Microservices\n- Analytics and business intelligence\n- User app\n- Anomaly detectionThe diagram uses the following terms:\n- **Edge** : The constrained-device edge or smart device edge as defined in the [Linux Foundation continuum](https://www.lfedge.org/2020/08/18/breaking-down-the-edge-continuum/) .\n- **Telemetry** : Read-only data about the environment, usually collected through sensors. This data is often referred to as(data that comes from facial recognition, image recognition, gesture recognition, speech recognition, natural language processing, and emotion recognition).\n- **CRM** : Customer relationship management.\n- **ERP** : Enterprise resource planning.\nThe numbered components in this architecture diagram are discussed in detail in the following sections. The architecture provides the foundation for analysis of device data (and fleets of devices), product anomaly detection, predictive maintenance, and enhancing the product owner experience.\nAlthough this document provides some integration recommendations, it doesn't provide details such as device power and hardware, local operating system, compute and storage, and LAN/WAN communications.\n### Component 1: Device telemetry streaming\nThe device telemetry streaming component handles the streaming of device telemetry data.\nAn optional global, high-frequency, low-latency MQTT/HTTP bridge hands off data to [Pub/Sub](/pubsub) , a global asynchronous messaging service. [Cloud Run](/run) then streams the messages to BigQuery for storage, archival, and analytics.\nThe following diagram shows the subcomponents of the device telemetry streaming component:### Component 2: Microservices\nThe microservices component includes the device, customer, and user app microservices, as shown in the following diagram:\nThe Device API microservice enables device interactions such as device provisioning by the manufacturer, updating device configuration, and viewing device status. The Device Registry API runs on Cloud Run and stores device data in a Firestore database instance.\nThe Customer API microservice provides an API for customer information relevant to the product ownership experience, such as a unique customer ID for reference and customer name. The Customer API runs on Cloud Run. Data is stored in a Firestore database instance.\nThe User app API microservice provides an API for use by user apps. It runs on Cloud Run and combines ownership data which is stored in Firestore with customer and device data from the customer and device API microservices respectively.\nThe Ingestion component is a function that loads microservice data stored in Firestore into the data warehouse, BigQuery. It runs periodically in Cloud Run triggered by Cloud Scheduler.\n### Component 3: Analytics and business intelligence\nThe following diagram shows the analytics and business intelligence (BI) component:\nData is extracted from various sources such as device registry and device telemetry components and optionally other enterprise data sources such as CRM, ERP, and service management. The architecture uses BigQuery as the data warehouse and Looker for visualization.\n### Component 4: User app\nThe following diagram shows the subcomponents of the user app component, which is a web and mobile app for the product user:\nFirebase provides app development capabilities such as hosting, messaging, authentication, application analytics, and A/B testing. The app communciates with the user app API microservice described above.\n### Component 5: Anomaly detection\nAn anomaly detection service runs in Cloud Run and uses Timeseries Insights API or other backends to analyze telemetry data. When an anomaly is detected, the services generates a records in the data warehouse as well as alerts in Pub/Sub that can be used by various subscribers.\n## Integrating with other systems\nThis section recommends options from Google Cloud partners and other parties for user edge functions such as IoT clients and OTA solutions.\n### MLOps with Intelligent products\nWith device telemetry and other data in BigQuery and Cloud Storage, implement [MLOps with intelligent products](https://cloud.google.com/architecture/mlops-intelligent-products-essentials) with [Vertex AI](/vertex-ai) for an end-to-end machine-learning lifecycle: prepare, build, validate, deploy, and operate ML models.\n### Existing and third-party IoT providers\nThe architecture integrates with existing and third-party IoT deployments. For example, you might already have an IoT implementation with IoT hardware, edge software, and an IoT backend either on-premises or in the cloud.\nThe following diagram shows how you can integrate existing IoT services with the architecture:\nTelemetry data is sent from the service provider edge to [Pub/Sub](/pubsub) messaging and pre-processed with a service like Dataflow. The device registry information is periodically ingested in batch (ETL/ELT) operations into the data warehouse (BigQuery) for analytics.\n### Edge IoT client\nMQTT and HTTP messaging are common protocols to send telemetry from devices to third-party IoT cloud services. Clients can publish telemetry events with MQTT by using a standard MQTT client.\n### OTA updates\nTo implement OTA updates, the architecture integrates with various OTA solutions, such as open source Mender and [Hawkbit](https://www.eclipse.org/hawkbit/) .\n## What's next\n- [MLOps with Intelligent Products Essentials](https://cloud.google.com/architecture/mlops-intelligent-products-essentials) \n- Need more information? [Contact us](/contact?direct=true) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Docs"}