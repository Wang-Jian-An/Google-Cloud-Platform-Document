{"title": "Docs - Setting up a Pub/Sub proxy for mobile clients on GKE", "url": "https://cloud.google.com/architecture/setting-up-a-pubsub-proxy-for-mobile-clients-on-gke", "abstract": "# Docs - Setting up a Pub/Sub proxy for mobile clients on GKE\nThis tutorial shows you how to publish messages from mobile or client-side apps to [Pub/Sub](/pubsub/docs/overview) by using a proxy that handles authentication and authorization logic instead of client-side credentials.\nWhile you can authenticate messages from the client to Pub/Sub by using [Identity and Access Management (IAM)](/iam/docs/overview) , such long-lived credentials never expire. In client-side apps, these credentials can be discovered through techniques like [app decompiling and reverse engineering](https://wikipedia.org/wiki/Radare2) .\nInstead, you can offload authentication and authorization logic to a proxy that performs the following tasks:- Authenticates incoming requests to validate the user.\n- Forwards requests to Pub/Sub along with appropriate IAM permissions.\nThis tutorial shows how to implement a Pub/Sub proxy on Google Kubernetes Engine (GKE). This tutorial is intended for application developers and system architects who define and implement the design for mobile or client-side applications. It assumes you understand [fundamental Kubernetes concepts](https://kubernetes.io/docs/concepts/) and are familiar with [Cloud Endpoints](/endpoints) .", "content": "## Request flow for this tutorialTo understand how Pub/Sub fits into a streaming pipeline, consider a clickstream analysis. In this use case, you might want to understand how users interact with your mobile app. To gain these insights, you capture user activity in real time. The following diagram shows the flow of data.The data captured by the app is pushed to Pub/Sub through a proxy. Pub/Sub can have subscribers downstream, such as Dataflow or Dataproc, which aggregate the data so that you can perform meaningful analysis.\nThe following diagram shows a detailed view of the request flow that this tutorial follows.The next sections explain how the various components in this diagram interact.\n### User authenticationMobile apps can use various methods to authenticate users. The authentication flow is specific to your app. This tutorial shows one such solution for authenticating users. An [implementation of this solution](https://github.com/GoogleCloudPlatform/solutions-pubsub-proxy-rest) accompanies this tutorial.\n### Requests from the client app to the Pub/Sub proxyThe app backend generates a short-lived authentication token that the client stores locally (for example, by using the [Android Keystore system](https://developer.android.com/training/articles/keystore) or [iOS keychain services](https://developer.apple.com/documentation/security/keychain_services) ). This tutorial uses [OpenID Connect (OIDC) ID tokens](https://developers.google.com/identity/protocols/OpenIDConnect) to authenticate the client app. Google issues and signs the OIDC ID token.\nThe client-side app sends a request to the Pub/Sub proxy by using the OIDC ID token. The Pub/Sub proxy validates the token and forwards the request to Pub/Sub along with the appropriate IAM credentials.\n **Caution:** If you plan to store sensitive information such as authentication tokens on the client side, read about storing secrets in [Android](https://developer.android.com/training/articles/keystore) and [iOS](https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/storing_keys_in_the_secure_enclave) devices. The storage and management of tokens is outside the scope of this tutorial.\n### Publishing messagesAfter the client app is successfully authenticated, the Pub/Sub proxy sends a [publish request](/pubsub/docs/publisher#publish) to Pub/Sub. Using IAM, Pub/Sub helps ensure that the caller (the Pub/Sub proxy) has the right [permissions](/pubsub/docs/access-control) to send publish requests. In this tutorial, the Pub/Sub proxy uses the [Compute Engine default service account](/compute/docs/access/service-accounts#default_service_account) to authenticate with Pub/Sub. The Compute Engine default service account has the [Editor](/iam/docs/understanding-roles#basic) IAM role ( `roles/editor` ), which provides [publisher access](/iam/docs/understanding-roles#pubsub-roles) to the Pub/Sub proxy.## Objectives\n- Create a GKE cluster to run a Pub/Sub proxy.\n- Create a Pub/Sub topic.\n- Deploy the Pub/Sub proxy.\n- Configure Endpoints to authenticate requests to the Pub/Sub proxy.\n- Verify that messages are published to Pub/Sub.\n## CostsIn this document, you use the following billable components of Google Cloud:- [Pub/Sub](/pubsub/pricing) \n- [GKE](/kubernetes-engine/pricing) \n- [Cloud Build](/build/pricing) \n- [Endpoints](/endpoints/pricing) \n- [Container Registry](/container-registry/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, go to the project selector page. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- Select or create a Google Cloud project. **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project.\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- Define the environment variables that you need for this tutorial:```\n export PROJECT=$(gcloud config get-value project)\n export REGION=us-central1\n export ZONE=${REGION}-b\n export CLUSTER=pubsub-proxy\n export TOPIC=proxy-test\n export SERVICE_ACCOUNT=publish-test\n export ENDPOINTS_SERVICE=\"pubtest.endpoints.${PROJECT}.cloud.goog\"\n export GENERATE_TOKEN=\"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts\"\n```\n- Enable the APIs for Cloud Build, Compute Engine, Google Kubernetes Engine, Artifact Analysis, Container Registry, Endpoints, Service Management, Service Control, and Pub/Sub:```\n gcloud services enable \\\n  cloudbuild.googleapis.com \\\n  compute.googleapis.com \\\n  container.googleapis.com \\\n  containeranalysis.googleapis.com \\\n  containerregistry.googleapis.com \\\n  endpoints.googleapis.com \\\n  servicemanagement.googleapis.com \\\n  servicecontrol.googleapis.com \\\n  pubsub.googleapis.com\n```\n## Creating a Pub/Sub topic\n- In Cloud Shell, create a Pub/Sub topic that you publish messages to:```\ngcloud pubsub topics create $TOPIC\n```\n## Creating a GKE cluster\n- In Cloud Shell, create a GKE cluster:```\ngcloud container clusters create $CLUSTER \\\u00a0 \u00a0 --zone $ZONE \\\u00a0 \u00a0 --scopes \"https://www.googleapis.com/auth/cloud-platform\"\n```\n- Get credentials for the running cluster:```\ngcloud container clusters get-credentials $CLUSTER \\\u00a0 \u00a0 --zone $ZONE \\\u00a0 \u00a0 --project $PROJECT\n```\n## Building a container image\n- In Cloud Shell, clone the code repository:```\ngit clone https://github.com/GoogleCloudPlatform/solutions-pubsub-proxy-rest\n```\n- Use Cloud Build to build a container image from source, and then save it in Container Registry:```\ncd solutions-pubsub-proxy-rest && \\\u00a0 \u00a0 gcloud builds submit --tag gcr.io/$PROJECT/pubsub-proxy:v1\n```\n## Creating a static external IP address\n- In Cloud Shell, create a static external IP address that is later assigned to the Pub/Sub proxy load balancer:```\ngcloud compute addresses create service-ip --region $REGION\n```\n- Store the static IP address in an environment variable, `PROXY_IP` :```\nPROXY_IP=$(gcloud compute addresses describe service-ip \\\u00a0 \u00a0 --region $REGION --format='value(address)')\n```\n## Deploying EndpointsThe Pub/Sub proxy uses [Endpoints](/endpoints/docs/openapi/architecture-overview) to authenticate requests from users. Endpoints uses the [Extensible Service Proxy (ESP)](/endpoints/docs/openapi/specify-proxy-startup-options) to provide API management features such as [authentication](/endpoints/docs/openapi/authentication-method) , [monitoring](/endpoints/docs/openapi/monitoring-your-api) , [tracing](/endpoints/docs/openapi/tracing) , and [API lifecycle management](/endpoints/docs/openapi/lifecycle-management) . This tutorial uses Endpoints only for authenticating incoming requests to the Pub/Sub proxy.\nIn this tutorial, you deploy ESP as a [sidecar](https://www.oreilly.com/library/view/designing-distributed-systems/9781491983638/ch02.html) with the Pub/Sub proxy. ESP intercepts and authenticates incoming requests before it forwards them to the Pub/Sub proxy.- In Cloud Shell, replace the `[PROJECT_ID]` placeholder with your Google Cloud project ID in the `openapi.yaml` file:```\nsed -i -e \"s/\\[PROJECT_ID\\]/$PROJECT/g\" openapi.yaml\n```\n- In the OpenAPI manifest file, replace the `[IP_ADDRESS]` placeholder with the value of `PROXY_IP` :```\nsed -i -e \"s/\\[IP_ADDRESS\\]/$PROXY_IP/g\" openapi.yaml\n```\n- Deploy the OpenAPI service definition to Endpoints:```\ngcloud endpoints services deploy openapi.yaml\n```The preceding command creates the following:- A [managed service](/service-infrastructure/docs/glossary) with the name that you have specified in the host field of the`openapi.yaml`file (`pubtest.endpoints.` `` `.cloud.goog`), where``is the ID of your Google Cloud project.\n- A DNS A record that uses the service name and the Pub/Sub proxy load balancer [IP address](#creating_a_static_external_ip_address) mapping that is defined in the`x-google-endpoints`extension in the`openapi.yaml`file.\nDuring deployment, you see a warning that you can ignore because this tutorial uses OIDC ID tokens for authentication instead of API keys.```\nWARNING: openapi.yaml: Operation 'post' in path '/publish': Operation does\nnot require an API key; callers may invoke the method without specifying an\nassociated API-consuming project. To enable API key all the\nSecurityRequirement Objects\n(https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#security-requirement-object)\ninside security definition must reference at least one SecurityDefinition\nof type : 'apiKey'.\n```\n- Check to see if the service is deployed correctly:```\ngcloud endpoints services describe ${ENDPOINTS_SERVICE}\n```The output is similar to the following:```\n[...]\nproducerProjectId: project-id\nserviceConfig:\n documentation:\n summary: Pub/Sub proxy exposed as an Endpoint API\n[...]\n name: pubtest.endpoints.project-id.cloud.goog\n title: PubSub Proxy\n usage: {}\nserviceName: pubtest.endpoints.project-id.cloud.goog\n```In the output:- ``: The ID of your Google Cloud project.## Deploying a proxy\n- In Cloud Shell, generate a self-signed SSL certificate to allow HTTPS connections to the proxy. **Note:** This step creates a self-signed certificate for the domain name that Endpoints provides ( `pubtest.endpoints.` `` `.cloud.goog` ). However, you can also [use your own domain name](/endpoints/docs/openapi/serving-apis-from-domains) to expose the Pub/Sub proxy.```\nopenssl req -x509 -nodes -days 365 \\\u00a0 \u00a0 -newkey rsa:2048 -keyout ./nginx.key \\\u00a0 \u00a0 -out ./nginx.crt \\\u00a0 \u00a0 -subj \"/CN=${ENDPOINTS_SERVICE}\"\n```\n- Create a Kubernetes secret by using the SSL certificate and private key:```\nkubectl create secret generic nginx-ssl \\\u00a0 \u00a0 --from-file=./nginx.crt \\\u00a0 \u00a0 --from-file=./nginx.key\n```\n- Replace the `[PROJECT_ID]` placeholder in the deployment manifest file with your Google Cloud project ID:```\nsed -i -e \"s/\\[PROJECT_ID\\]/$PROJECT/g\" kube/deployment.yaml\n```\n- Replace the `[IP_ADDRESS]` placeholder in the service manifest file with the value of `PROXY_IP` :```\nsed -i -e \"s/\\[IP_ADDRESS\\]/$PROXY_IP/g\" kube/service.yaml\n```\n- Deploy the proxy:```\nkubectl apply -f kube/\n```\n- Verify that the deployment is successful:```\nkubectl rollout status deployment/pubsub-proxy\n```The output is similar to the following:```\n[...]\ndeployment \"pubsub-proxy\" successfully rolled out\n```\n- Ensure that two containers (ESP and Pub/Sub proxy) are running in the Pod:```\nkubectl get pods $(kubectl get pod \\\u00a0 \u00a0 -l app=pubsub-proxy \\\u00a0 \u00a0 -o jsonpath=\"{.items[0].metadata.name}\") \\\u00a0 \u00a0 -o jsonpath={.spec.containers[*].name}\n```The output is similar to the following:```\nesp pubsub-proxy\n```\n- Watch for the value of `EXTERNAL-IP` to change from `<pending>` to the [static external IP address](#creating_a_static_external_ip_address) that you created earlier:```\nkubectl get svc pubsub-proxy -w\n```The output is similar to the following:```\nNAME   TYPE   CLUSTER-IP EXTERNAL-IP PORT(S)  AGE\npubsub-proxy LoadBalancer 10.7.247.212 <pending>  443:31104/TCP 6m32s\npubsub-proxy LoadBalancer 10.7.247.212 <PROXY_IP> 443:31104/TCP 6m5s\n```To stop watching, press `CTRL+C` .After the Pub/Sub proxy is successfully deployed, it is exposed at `https://${ENDPOINTS_SERVICE}/publish` . It might take a few minutes for the new DNS configuration to propagate.\n- Verify the DNS configuration:```\nwatch nslookup ${ENDPOINTS_SERVICE}\n```The output is similar to the following:```\nServer: 169.254.169.254\nAddress: 169.254.169.254#53\nNon-authoritative answer:\nName: pubtest.endpoints.project-id.cloud.goog\nAddress: gke-load-balancer-ip\n```In the output:- ``: The IP address of your GKE load balancer (proxy IP).\nTo stop watching, press `CTRL+C` .\nIf any of the preceding steps results in an error, see the [troubleshooting steps](#troubleshooting) .## Generating an authentication tokenThe following procedure for generating an authentication token is intended as an example. For your production environment, you need a way for users to generate their own authentication tokens. For example, you can find sample code for obtaining an OIDC ID token programmatically in the [Identity-Aware Proxy documentation](/iap/docs/authentication-howto#authenticating_from_a_mobile_app) .\nTo generate an authentication token, do the following:- Create a Google Cloud service account for which you generate an OIDC ID token:```\ngcloud iam service-accounts create \\\u00a0 \u00a0 $SERVICE_ACCOUNT \\\u00a0 \u00a0 --display-name $SERVICE_ACCOUNT\n```\n- Get the email identity of the service account:```\nSA_EMAIL=${SERVICE_ACCOUNT}@${PROJECT}.iam.gserviceaccount.com\n```\n- Grant the [Service Account Token Creator](/iam/docs/understanding-roles#service-accounts-roles) IAM role ( `roles/iam.serviceAccountTokenCreator` ) for the service account:```\ngcloud iam service-accounts add-iam-policy-binding $SA_EMAIL \\\u00a0 \u00a0 --member user:$(gcloud config get-value account) \\\u00a0 \u00a0 --role roles/iam.serviceAccountTokenCreator\n``` **Note:** It takes a few minutes for the policy update to take effect. Wait for 2-3 minutes before you proceed to the next step.\n- Using the [IAM credentials API](/iam/credentials/reference/rest/v1/projects.serviceAccounts/generateIdToken) , generate an OIDC ID token.```\nTOKEN=$(curl -s ${GENERATE_TOKEN}/${SA_EMAIL}:generateIdToken \\\u00a0 \u00a0 -H \"Content-Type: application/json\" \\\u00a0 \u00a0 -H \"Authorization: Bearer $(gcloud auth application-default print-access-token)\" \\\u00a0 \u00a0 -d '{\"audience\": \"'${ENDPOINTS_SERVICE}'\", \"includeEmail\": \"true\"}' | jq -r \".token\")\n```The Endpoints service name is specified in the `audience` field. The `audience` claim identifies the recipient that the token is intended for.\n- Verify that the token is successfully created:```\necho $TOKEN\n```The [JSON Web Token](https://jwt.io/introduction/) (JWT) is similar to the following:```\neyJhbGciOiJSUzI1NiIsImtpZCI6IjY4NjQyODlm[...].eyJhdWQiOiJwdWJ0ZXN0LmVuZHBvaW50cy52aXR\nhbC1vY3RhZ29uLTEwOTYxMi5jbG91ZC5nb[...].SjBI4TZjZAlYo6lFKkrvfAcVUp_AJzFKoSsjNbmD_n[...]\n```\n## Calling Pub/Sub by using a proxy\n- In Cloud Shell, publish a test message:```\ncurl -i -k -X POST https://${ENDPOINTS_SERVICE}/publish \\\u00a0 \u00a0 -H \"Authorization: Bearer $TOKEN\" \\\u00a0 \u00a0 -H \"Content-Type: application/json\" \\\u00a0 \u00a0 -d '{\"topic\": \"'$TOPIC'\", \"messages\": [ {\"attributes\": {\"key1\": \"value1\", \"key2\" : \"value2\"}, \"data\": \"test data\"}]}'\n``` **Note:** Because this tutorial uses a self-signed certificate, you can turn off certificate verification for the `curl` command by using the `-k` or `-- insecure` option. When you deploy to production, get an SSL/TLS certificate from a public certificate authority if you do not already have one. If you want to deploy the API by using a custom domain, you need to configure Cloud Endpoints Portal and the DNS settings in your domain name registrar as described in [Setting up a custom domain](/endpoints/docs/frameworks/dev-portal-setup-custom-domain) .The output is similar to the following:```\nHTTP/2 200\nserver: nginx\ndate: Sun, 02 Jun 2019 03:53:46 GMT\n...\n```\n- Check whether the message successfully published to the Pub/Sub topic:```\nkubectl logs -f --tail=5 deployment/pubsub-proxy -c pubsub-proxy\n```The Pub/Sub proxy deployment logs display the message `Successfully published` :```\n2019-06-02 03:49:39.723:INFO:oejs.Server:main: Started @2554ms\nJun 02, 2019 3:53:44 AM com.google.pubsub.proxy.publish.PublishMessage\ngetPublisher\nINFO: Creating new publisher for: proxy-test\nJun 02, 2019 3:53:47 AM\ncom.google.pubsub.proxy.publish.PublishMessage$1 onSuccess\nINFO: Successfully published: 569006136173844\n```\n## Troubleshooting\n- In Cloud Shell, check the state of both containers in the Pub/Sub proxy Pod:```\nkubectl describe pods $(kubectl get pod -l app=pubsub-proxy \\\u00a0 \u00a0 -o jsonpath=\"{.items[0].metadata.name}\")\n```In the log output, the status of the containers is `Running` :```\n[...]\nContainers:\n esp:\n[...]\n State: Running\n Started: Fri, 21 Jun 2019 16:41:30 +0530\n Ready: True\n Restart Count: 0\n[...]\n pubsub-proxy:\n State: Running\n  Started: Fri, 21 Jun 2019 16:41:42 +0530\n Ready: True\n Restart Count: 0\n[...]\n```\n- (Optional) Check the container logs to see whether there are other errors. For example, to check the Pub/Sub proxy logs, run the following command:```\nkubectl logs -f --tail=10 deployment/pubsub-proxy -c pubsub-proxy\n```\nFor help with troubleshooting, see the following documents:- [Troubleshooting Endpoints with GKE](/endpoints/docs/openapi/troubleshoot-gke-deployment) \n- [Troubleshooting JWT validation](/endpoints/docs/frameworks/python/troubleshoot-jwt) \n- [Troubleshooting response errors](/endpoints/docs/openapi/troubleshoot-response-errors) \n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this tutorial, you can delete the Google Cloud project that you created for this tutorial, or delete the resources associated with this tutorial.\n### Delete the Google Cloud projectThe easiest way to eliminate billing is to delete the project you created for the tutorial.- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n### Delete the resourcesIf you want to keep the Google Cloud project that you used in this tutorial, delete the individual resources:- In Cloud Shell, delete the GKE cluster:```\ngcloud container clusters delete $CLUSTER --zone $ZONE --async\n```\n- Delete downloaded code, artifacts, and other dependencies:```\ncd .. && rm -rf solutions-pubsub-proxy-rest\n```\n- Delete the image in Container Registry:```\ngcloud container images list-tags \\\u00a0 \u00a0 gcr.io/$PROJECT/pubsub-proxy \\\u00a0 \u00a0 --format 'value(digest)' | \\\u00a0 \u00a0 xargs -I {} gcloud container images delete \\\u00a0 \u00a0 --force-delete-tags --quiet \\\u00a0 \u00a0 gcr.io/${PROJECT}/pubsub-proxy@sha256:{}\n```\n- Delete the Pub/Sub topic:```\ngcloud pubsub topics delete $TOPIC\n```\n- Delete the service account:```\ngcloud iam service-accounts delete $SA_EMAIL\n```\n- Delete Endpoints:```\ngcloud endpoints services delete ${ENDPOINTS_SERVICE}\n```\n- Delete the static IP address:```\ngcloud compute addresses delete service-ip --region $REGION\n```\n## What's next\n- Learn about [authentication with Endpoints](/endpoints/docs/openapi/authentication-method) .\n- Learn about [architecture for using Pub/Sub for long-running tasks](/solutions/using-cloud-pub-sub-long-running-tasks) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Docs"}