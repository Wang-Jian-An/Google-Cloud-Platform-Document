{"title": "Docs - Deploy image processing using microservices and asynchronous messaging", "url": "https://cloud.google.com/architecture/image-processing-using-microservices-and-asynchronous-messaging/deployment", "abstract": "# Docs - Deploy image processing using microservices and asynchronous messaging\nLast reviewed 2023-07-17 UTC\nThis document describes how to implement the reference architecture that's described in [Integrate microservices with Pub/Sub and GKE](/architecture/image-processing-using-microservices-and-asynchronous-messaging) . The architecture is designed to handle long-running processes by using containers and asynchronous messaging.\nThe document uses an example photo-sharing application that generates photo thumbnails. You deploy the application using Google Kubernetes Engine (GKE) and use Pub/Sub to invoke long-running processes asynchronously. You also use Pub/Sub notifications for Cloud Storage to add side jobs without modifying the application's code.\nThe application is containerized by Cloud Build and stored in Artifact Registry. It uses Cloud Vision to detect inappropriate images.\n", "content": "## Architecture\nThe following diagram illustrates the design of the example photo album application that implements the [reference architecture](/architecture/image-processing-using-microservices-and-asynchronous-messaging#architecture) .\n**Figure 1.** Architecture for image processing that's based on using containers and asynchronous messaging.\nThe preceding diagram illustrates how the thumbnail is generated:\n- A client uploads an image to the application.\n- The application stores the image in [Cloud Storage](/storage/pricing) .\n- A request is generated for the thumbnail.\n- The thumbnail generator generates the thumbnail.\n- The successful response is sent to the photo album application.\n- The successful response is sent to the client and you can find the thumbnail in [Cloud Storage](/storage/pricing) .\nThe following diagram shows how the application implements thumbnail generation as a separate service in an asynchronous manner.\n**Figure 2.** Architecture of the thumbnail extraction process.\nYou use Pub/Sub to send service requests to the thumbnail generation service. This new architecture makes the service call asynchronous so that a thumbnail is created in the background after the application sends the response back to a client. This design also allows the thumbnail generation service to scale so that multiple jobs can run in parallel.\n## Objectives\n- Deploy an example photo album application on GKE.\n- Make asynchronous service calls from the application.\n- Use Pub/Sub notifications for Cloud Storage to trigger the application when a new file is uploaded to the Cloud Storage bucket.\n- Use Pub/Sub to perform more tasks without modifying the application.## Costs\nIn this document, you use the following billable components of Google Cloud:\n- [Cloud Storage](/storage/pricing) \n- [Cloud SQL](/sql/pricing) \n- [Pub/Sub](/pubsub/pricing) \n- [Compute Engine instances used by GKE](/kubernetes-engine/pricing) \n- [Cluster-management fee for GKE](https://cloud.google.com/kubernetes-engine/pricing#cluster_management_fee_and_free_tier) \n- [Cloud Load Balancing](/vpc/network-pricing#lb) \n- [Cloud Build](/build/pricing) \n- [Artifact Registry](/artifact-registry) \n- [Vision](/vision) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) .\nWhen you finish building the example application, you can avoid continued billing by deleting the resources you created. For more information, see [Clean up](#clean-up) .\n## Before you begin\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n## Set up the environment\nIn this section, you assign default settings for values that are used throughout the document. If you close your Cloud Shell session, you lose these environment settings.\n- In Cloud Shell, set your default Google Cloud project:```\ngcloud config set project PROJECT_ID\n```Replace `` with your Google Cloud project ID.\n- Set your default Compute Engine region:```\ngcloud config set compute/region REGION\nexport REGION=REGION\n```Replace `` with a region that is close to you. For more information, see [Regions and zones](/compute/docs/regions-zones) .\n- Set your default Compute Engine zone:```\ngcloud config set compute/zone ZONE\nexport ZONE=ZONE\n```Replace `` with a zone that is close to you.\n- Download the example application files and set your current directory:```\ngit clone https://github.com/GoogleCloudPlatform/gke-photoalbum-example\ncd gke-photoalbum-example\n```## Create a Cloud Storage bucket and upload the default thumbnail image\n- In Cloud Shell, create a Cloud Storage bucket to store the original images and thumbnails:```\nexport PROJECT_ID=$(gcloud config get-value project)\ngsutil mb -c regional -l ${REGION} gs://${PROJECT_ID}-photostore\n```\n- Upload the default thumbnail file:```\ngsutil cp ./application/photoalbum/images/default.png \\\n gs://${PROJECT_ID}-photostore/thumbnails/default.png\n```- The uploaded images are stored in the following format:`gs://` `` `-photostore/` ``, where``represents the name of the image file that is uploaded.\n- The generated thumbnails are stored in the following format:`gs://` `` `-photostore/thumbnails/` ``.\n- The original image and the corresponding thumbnail have the same``value, but the thumbnail is stored in the`thumbnails`bucket.\n- While the thumbnail is being created, the following `default.png` placeholder thumbnail image is displayed in the photo album application. \n- Make the thumbnail file public:```\ngsutil acl ch -u AllUsers:R \\\n gs://${PROJECT_ID}-photostore/thumbnails/default.png\n```## Create a Cloud SQL instance and a MySQL database\n- In Cloud Shell, create the Cloud SQL instance:```\ngcloud sql instances create photoalbum-db --region=${REGION} \\\n --database-version=MYSQL_8_0\n```\n- Retrieve the connection name:```\ngcloud sql instances describe photoalbum-db \\\n --format=\"value(connectionName)\"\n```Make a note of the name because you'll use it later.\n- Set the password for the `root@%` MySQL user:```\ngcloud sql users set-password root --host=% --instance=photoalbum-db \\\n --password=PASSWORD\n```Replace `` with a secure password for the `root@%` user.\n- Connect to the Cloud SQL instance:```\ngcloud sql connect photoalbum-db --user=root --quiet\n```When you're prompted, enter the password that you set up in the preceding step.\n- Create a database called `photo_db` , where the user is `appuser` and the password is `pas4appuser` :```\ncreate database photo_db;\ncreate user 'appuser'@'%' identified by 'pas4appuser';\ngrant all on photo_db.* to 'appuser'@'%' with grant option;\nflush privileges;\n```\n- Confirm the result and exit from MySQL:```\nshow databases;\nselect user from mysql.user;\nexit\n```In the output, confirm that the `photo_db` database and the `appuser` user are created:```\nmysql> show databases;\n+--------------------+\n| Database   |\n+--------------------+\n| information_schema |\n| mysql    |\n| performance_schema |\n| photo_db   |\n| sys    |\n+--------------------+\n5 rows in set (0.16 sec)\nmysql> \\t\nOutfile disabled.\nmysql> select user from mysql.user;\n+-------------------+\n| user    |\n+-------------------+\n| appuser   |\n| cloudsqlreplica |\n| cloudsqlsuperuser |\n| root    |\n| cloudsqlexport |\n| cloudsqlimport |\n| cloudsqloneshot |\n| root    |\n| cloudsqlexport |\n| cloudsqlimport |\n| cloudsqloneshot |\n| root    |\n| cloudsqlapplier |\n| cloudsqlimport |\n| mysql.infoschema |\n| mysql.session  |\n| mysql.sys   |\n| root    |\n+-------------------+\n18 rows in set (0.16 sec)\nmysql> exit\nBye\n```## Create a Pub/Sub topic and a subscription\n- In Cloud Shell, create a Pub/Sub topic called `thumbnail-service` :```\ngcloud pubsub topics create thumbnail-service\n```The photo album application sends requests to the thumbnail generation service by publishing a message on the `thumbnail-service` topic.\n- Create a Pub/Sub subscription called `thumbnail-workers` :```\ngcloud pubsub subscriptions create --topic thumbnail-service thumbnail-workers\n```The thumbnail generation service receives requests from the `thumbnail-workers` subscription.## Create a GKE cluster\n- In Cloud Shell, create a GKE cluster that has permission to call APIs:```\ngcloud container clusters create \"photoalbum-cluster\" \\\n --scopes \"https://www.googleapis.com/auth/cloud-platform\" \\\n --num-nodes \"5\"\n```\n- Get access credentials configured so that you can manage the cluster using the `kubectl` command in later steps:```\ngcloud container clusters get-credentials photoalbum-cluster\n```\n- Show the list of nodes:```\nkubectl get nodes\n```In the output, confirm that there are five nodes whose `STATUS` value is `Ready` :```\nNAME            STATUS ROLES AGE  VERSION\ngke-photoalbum-cluster-default-pool-d637570a-2pfh Ready <none> 2m55s v1.24.10-gke.2300\ngke-photoalbum-cluster-default-pool-d637570a-3rm4 Ready <none> 2m55s v1.24.10-gke.2300\ngke-photoalbum-cluster-default-pool-d637570a-f7l4 Ready <none> 2m55s v1.24.10-gke.2300\ngke-photoalbum-cluster-default-pool-d637570a-qb2z Ready <none> 2m53s v1.24.10-gke.2300\ngke-photoalbum-cluster-default-pool-d637570a-rvnp Ready <none> 2m54s v1.24.10-gke.2300\n```## Create the Artifact Registry repository\n- In Cloud Shell, create a repository to store container images:```\ngcloud artifacts repositories create photoalbum-repo \\\n --repository-format=docker \\\n --location=us-central1 \\\n --description=\"Docker repository\"\n```## Build images for the application\n- In a text editor, open the `application/photoalbum/src/auth_decorator.py` file and update the username and password:```\nUSERNAME = 'username'\nPASSWORD = 'passw0rd'\n```\n- In Cloud Shell, build an image for the photo album application by using the Cloud Build service:```\ngcloud builds submit ./application/photoalbum -t \\\n us-central1-docker.pkg.dev/${PROJECT_ID}/photoalbum-repo/photoalbum-app\n```\n- Build an image for the `thumbnail-worker` thumbnail generation service by using the Cloud Build service:```\ngcloud builds submit ./application/thumbnail -t \\\n us-central1-docker.pkg.dev/${PROJECT_ID}/photoalbum-repo/thumbnail-worker\n```## Deploy the photo album application\n- In Cloud Shell, update the Kubernetes Deployment manifests for the photo album and the thumbnail generator with values from your environment:```\nconnection_name=$(gcloud sql instances describe photoalbum-db \\\n --format \"value(connectionName)\")\ndigest_photoalbum=$(gcloud container images describe \\\n us-central1-docker.pkg.dev/${PROJECT_ID}/photoalbum-repo/photoalbum-app:latest --format \\\n \"value(image_summary.digest)\")\nsed -i.bak -e \"s/\\[PROJECT_ID\\]/${PROJECT_ID}/\" \\\n -e \"s/\\[CONNECTION_NAME\\]/${connection_name}/\" \\\n -e \"s/\\[DIGEST\\]/${digest_photoalbum}/\" \\\n config/photoalbum-deployment.yaml\ndigest_thumbnail=$(gcloud container images describe \\\n us-central1-docker.pkg.dev/${PROJECT_ID}/photoalbum-repo/thumbnail-worker:latest --format \\\n \"value(image_summary.digest)\")\nsed -i.bak -e \"s/\\[PROJECT_ID\\]/${PROJECT_ID}/\" \\\n -e \"s/\\[CONNECTION_NAME\\]/${connection_name}/\" \\\n -e \"s/\\[DIGEST\\]/${digest_thumbnail}/\" \\\n  config/thumbnail-deployment.yaml\n```\n- Create deployment resources to launch the photo album application and the thumbnail generation service:```\nkubectl create -f config/photoalbum-deployment.yaml\nkubectl create -f config/thumbnail-deployment.yaml\n```\n- Create a service resource to assign an external IP address to the application:```\nkubectl create -f config/photoalbum-service.yaml\n```\n- Check the results for the pods:```\nkubectl get pods\n```In the output, confirm that there are three pods for each `photoalbum-app` and `thumbail-worker` pod and that their `STATUS` value is `Running` :```\nNAME        READY  STATUS RESTARTS AGE\nphotoalbum-app-555f7cbdb7-cp8nw  2/2  Running 0   2m\nphotoalbum-app-555f7cbdb7-ftlc6  2/2  Running 0   2m\nphotoalbum-app-555f7cbdb7-xsr4b  2/2  Running 0   2m\nthumbnail-worker-86bd95cd68-728k5 2/2  Running 0   2m\nthumbnail-worker-86bd95cd68-hqxqr 2/2  Running 0   2m\nthumbnail-worker-86bd95cd68-xnxhc 2/2  Running 0   2m\n```The `thumbnail-worker` pods subscribe thumbnail generation requests from the `thumbnail-workers` subscription. For more information, see how the `callback` function is used in the [source code](https://github.com/GoogleCloudPlatform/gke-photoalbum-example/blob/master/application/thumbnail/src/worker.py) .\n- Check the results for the services:```\nkubectl get services\n```In the output, confirm that there is an external IP address in the `EXTERNAL-IP` column for the `photoalbum-service` service. It might take a few minutes until the services are all running.```\nNAME     TYPE   CLUSTER-IP  EXTERNAL-IP  PORT(S)  AGE\nkubernetes   ClusterIP  10.23.240.1  <none>   443/TCP  20m\nphotoalbum-service LoadBalancer 10.23.253.241 146.148.111.115 80:32657/TCP 2m\n```Make a note of the external IP address because it's used later. In this example, it's `146.148.111.115` .## Test the photo album application\n- To access the deployed application in a web browser, go to the following URL and enter the username and password that you previously set up:```\nhttp://EXTERNAL_IP\n```Replace `` with the IP address that you copied in the previous step.\n- To upload an image file, click **Upload** . The thumbnail placeholder appears on the screen.In the background, the thumbnail generation service creates a thumbnail of the uploaded image. To see the generated thumbnail, click **Refresh** . The Cloud Vision API adds image labels that it detects. To see the original image, click the thumbnail.## Add an inappropriate-image detection feature\nThe following image illustrates how you can use Pub/Sub notifications for Cloud Storage to trigger a service that detects inappropriate content. This feature blurs the image when a new file with inappropriate content is stored in the Cloud Storage bucket.\nIn the preceding image, the service uses the [Safe Search Detection](/vision/docs/detecting-safe-search) feature from Vision API to detect inappropriate content within an image.\nThe photo application triggers the thumbnail generator and the image checker asynchronously. As a result, there is no guarantee that they will be executed in a specific order. If the thumbnail generation occurs before the image is blurred, you might see an inappropriate thumbnail for a short while. However, the image checker eventually blurs both the inappropriate image and the inappropriate thumbnail.\n### Create a Pub/Sub topic, subscription, and notification\n- In Cloud Shell, create a Pub/Sub topic called `safeimage-service` :```\ngcloud pubsub topics create safeimage-service\n```\n- Create a Pub/Sub subscription called `safeimage-workers` :```\ngcloud pubsub subscriptions create --topic safeimage-service \\\n safeimage-workers\n```\n- Configure a [Pub/Sub notification](/storage/docs/pubsub-notifications) so that a message is sent to the `safeimage-service` topic when a new file is uploaded to the Cloud Storage bucket:```\ngsutil notification create -t safeimage-service -f json \\\n gs://${PROJECT_ID}-photostore\n```\n### Build and deploy the worker image\n- In Cloud Shell, build a container image for the `safeimage-workers` subscription by using Cloud Build:```\ngcloud builds submit ./application/safeimage \\\n -t us-central1-docker.pkg.dev/${PROJECT_ID}/photoalbum-repo/safeimage-worker\n```\n- Update the Kubernetes Deployment manifests for the safe-image service with your Google Cloud project ID, Cloud SQL connection name, and container image digests:```\ndigest_safeimage=$(gcloud container images describe \\\n us-central1-docker.pkg.dev/${PROJECT_ID}/photoalbum-repo/safeimage-worker:latest --format \\\n \"value(image_summary.digest)\")\nsed -i.bak -e \"s/\\[PROJECT_ID\\]/${PROJECT_ID}/\" \\\n -e \"s/\\[CONNECTION_NAME\\]/${connection_name}/\" \\\n -e \"s/\\[DIGEST\\]/${digest_safeimage}/\" \\\n config/safeimage-deployment.yaml\n```\n### Create a deployment resource\n- Create a deployment resource called `safeimage-deployment` to deploy the `safeimage-service` topic:```\nkubectl create -f config/safeimage-deployment.yaml\n```\n- Check the results:```\nkubectl get pods\n```In the output, confirm that there are three `safeimage-worker` pods whose `STATUS` value is `Running` .```\nNAME        READY  STATUS RESTARTS AGE\nphotoalbum-app-555f7cbdb7-cp8nw  2/2  Running 0   30m\nphotoalbum-app-555f7cbdb7-ftlc6  2/2  Running 0   30m\nphotoalbum-app-555f7cbdb7-xsr4b  2/2  Running 8   30m\nsafeimage-worker-7dc8c84f54-6sqzs 1/1  Running 0   2m\nsafeimage-worker-7dc8c84f54-9bskw 1/1  Running 0   2m\nsafeimage-worker-7dc8c84f54-b7gtp 1/1  Running 0   2m\nthumbnail-worker-86bd95cd68-9wrpv 2/2  Running 0   30m\nthumbnail-worker-86bd95cd68-kbhsn 2/2  Running 2   30m\nthumbnail-worker-86bd95cd68-n4rj7 2/2  Running 0   30m\n```The `safeimage-worker` pods subscribe ro inappropriate-image detection requests from the `safeimage-workers` subscription. For more information, see how the `callback` function is used in the [source code](https://github.com/GoogleCloudPlatform/gke-photoalbum-example/blob/master/application/safeimage/src/worker.py) .\n### Test the inappropriate-image detection feature\nIn this section, you upload a test image to verify that the [Safe Search Detection](/vision/docs/detecting-safe-search) feature blurs out an inappropriate image. The test image is a picture of a girl who's dressed up as a zombie (licensed under [a CC0 license from Pixaby](https://pixabay.com/service/license/) ).\n- [Download the test image](https://cdn.pixabay.com/photo/2014/10/24/06/11/zombie-500828_1280.jpg) .\n- To upload the image, go to`http://` ``, and then click **Upload** .\n- Click **Refresh** . The application displays a blurred thumbnail. To see that the uploaded image is also blurred, click the thumbnail.## Clean up\nIf you don't want to keep the Google Cloud resources that you created for the example application, you can remove them so you won't be billed for them in the future. You can either delete the project entirely or delete cluster resources and then delete the cluster.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.### Delete the individual resources\nInstead of deleting the project, you can delete the individual resources that you created.\n- Delete resources from GKE:```\nkubectl delete -f config/safeimage-deployment.yaml\nkubectl delete -f config/photoalbum-service.yaml\nkubectl delete -f config/thumbnail-deployment.yaml\nkubectl delete -f config/photoalbum-deployment.yaml\n```\n- Delete the cluster from GKE:```\ngcloud container clusters delete photoalbum-cluster --quiet\n```\n- Delete the repository from Artifact Registry:```\ngcloud artifacts repositories delete photoalbum-repo --location us-central1 --quiet\n```\n- Delete subscriptions and topics from Pub/Sub:```\ngcloud pubsub subscriptions delete safeimage-workers\ngcloud pubsub topics delete safeimage-service\ngcloud pubsub subscriptions delete thumbnail-workers\ngcloud pubsub topics delete thumbnail-service\n```\n- Delete the Cloud SQL instance:```\ngcloud sql instances delete photoalbum-db --quiet\n```\n- Delete the Cloud Storage bucket:```\ngsutil rm -r gs://${PROJECT_ID}-photostore\ngsutil rm -r gs://${PROJECT_ID}_cloudbuild\n```\n- Delete the files:```\ncd ..\nrm -rf gke-photoalbum-example\n```## What's next\n- Read about [DevOps](https://dora.dev/) , and learn more about the [Architecture](https://dora.dev/devops-capabilities/technical/loosely-coupled-architecture/) capability that's related to this reference architecture.\n- Take the [DevOps quick check](https://www.devops-research.com/quickcheck.html) to understand where you stand in comparison with the rest of the industry.\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .", "guide": "Docs"}