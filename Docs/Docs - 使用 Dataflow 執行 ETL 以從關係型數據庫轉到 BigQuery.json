{"title": "Docs - \u4f7f\u7528 Dataflow \u57f7\u884c ETL \u4ee5\u5f9e\u95dc\u4fc2\u578b\u6578\u64da\u5eab\u8f49\u5230 BigQuery", "url": "https://cloud.google.com/architecture/performing-etl-from-relational-database-into-bigquery?hl=zh-cn", "abstract": "# Docs - \u4f7f\u7528 Dataflow \u57f7\u884c ETL \u4ee5\u5f9e\u95dc\u4fc2\u578b\u6578\u64da\u5eab\u8f49\u5230 BigQuery\nLast reviewed 2022-08-21 UTC\n\u672c\u6559\u7a0b\u6f14\u793a\u77ad\u5982\u4f55\u4f7f\u7528 Dataflow \u5f9e\u806f\u6a5f\u4e8b\u52d9\u8655\u7406 (OLTP) \u95dc\u4fc2\u578b\u6578\u64da\u5eab\u4e2d\u63d0\u53d6\u3001\u8f49\u63db\u548c\u52a0\u8f09 (ETL) \u6578\u64da\u5230 BigQuery \u4ee5\u9032\u884c\u5206\u6790\u3002\n\u672c\u6559\u7a0b\u9069\u7528\u65bc\u5c0d [BigQuery](https://cloud.google.com/bigquery?hl=zh-cn) \u7684\u5206\u6790\u67e5\u8a62\u529f\u80fd\u548c [Dataflow](https://cloud.google.com/dataflow?hl=zh-cn) \u7684\u6279\u8655\u7406\u529f\u80fd\u611f\u8208\u8da3\u7684\u6578\u64da\u5eab\u7ba1\u7406\u54e1\u3001\u904b\u7dad\u5c08\u696d\u4eba\u54e1\u548c\u96f2\u67b6\u69cb\u5e2b\u3002\nOLTP \u6578\u64da\u5eab\u901a\u5e38\u662f\u95dc\u4fc2\u578b\u6578\u64da\u5eab\uff0c\u7528\u65bc\u7232\u96fb\u5b50\u5546\u52d9\u7db2\u7ad9\u3001\u8edf\u4ef6\u5373\u670d\u52d9 (SaaS) \u61c9\u7528\u6216\u904a\u6232\u7b49\u5b58\u5132\u4fe1\u606f\u548c\u6d41\u7a0b\u4e8b\u52d9\u3002OLTP \u6578\u64da\u5eab\u901a\u5e38\u91dd\u5c0d\u9700\u8981 [ACID \u5c6c\u6027](https://wikipedia.org/wiki/ACID_(computer_science)) \u7684\u4e8b\u52d9\u9032\u884c\u4e86\u512a\u5316\uff1a\u539f\u5b50\u6027\u3001\u4e00\u81f4\u6027\u3001\u9694\u96e2\u6027\u53ca\u8010\u7528\u6027\uff0c\u4e26\u4e14\u901a\u5e38\u5177\u6709\u9ad8\u5ea6\u898f\u7bc4\u5316\u7684\u67b6\u69cb\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6578\u64da\u5009\u5eab\u5f80\u5f80\u7d93\u904e\u512a\u5316\u4ee5\u7528\u65bc\u6578\u64da\u6aa2\u7d22\u548c\u5206\u6790\uff0c\u800c\u4e0d\u662f\u4e8b\u52d9\uff0c\u4e14\u901a\u5e38\u5177\u6709\u53cd\u898f\u7bc4\u5316\u7684\u67b6\u69cb\u3002\u901a\u5e38\uff0c\u5c0d OLTP \u6578\u64da\u5eab\u4e2d\u7684\u6578\u64da\u9032\u884c\u53cd\u898f\u7bc4\u5316\u6703\u4f7f\u5176\u66f4\u9069\u7528\u65bc BigQuery \u4e2d\u7684\u5206\u6790\u3002", "content": "## \u76ee\u6a19\u672c\u6559\u7a0b\u5c55\u793a\u4e86\u5169\u7a2e\u57f7\u884c ETL \u4ee5\u5c07\u898f\u7bc4\u5316 RDBMS \u6578\u64da\u8f49\u63db\u7232\u53cd\u898f\u7bc4\u5316 BigQuery \u6578\u64da\u7684\u65b9\u6cd5\uff1a- \u4f7f\u7528 BigQuery \u4f86\u52a0\u8f09\u548c\u8f49\u63db\u6578\u64da\u3002\u4f7f\u7528\u6b64\u65b9\u6cd5\u53ef\u5c07\u5c11\u91cf\u6578\u64da\u4e00\u6b21\u6027\u52a0\u8f09\u5230 BigQuery \u4e2d\u9032\u884c\u5206\u6790\u3002\u5728\u5c0d\u5927\u578b\u6216\u591a\u500b\u6578\u64da\u96c6\u4f7f\u7528\u81ea\u52d5\u5316\u4e4b\u524d\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6b64\u65b9\u6cd5\u5c0d\u6578\u64da\u96c6\u9032\u884c\u539f\u578b\u8a2d\u8a08\u3002\n- \u4f7f\u7528 Dataflow \u4f86\u52a0\u8f09\u3001\u8f49\u63db\u548c\u6e05\u7406\u6578\u64da\u3002\u4f7f\u7528\u6b64\u65b9\u6cd5\u53ef\u4ee5\u52a0\u8f09\u5927\u91cf\u6578\u64da\u3001\u5f9e\u591a\u500b\u6578\u64da\u6e90\u52a0\u8f09\u6578\u64da\uff0c\u6216\u8005\u4ee5\u589e\u91cf\u65b9\u5f0f\u6216\u81ea\u52d5\u52a0\u8f09\u6578\u64da\u3002\n## \u8cbb\u7528\nTitles in dynamic includes are not used anywhere, and we should avoid paying to translate them\u5728\u672c\u6587\u6a94\u4e2d\uff0c\u60a8\u5c07\u4f7f\u7528 Google Cloud \u7684\u4ee5\u4e0b\u6536\u8cbb\u7d44\u4ef6\uff1a- [Compute Engine](https://cloud.google.com/compute/pricing?hl=zh-cn) \n- [Cloud Storage](https://cloud.google.com/storage/pricing?hl=zh-cn) \n- [Dataflow](https://cloud.google.com/dataflow/pricing?hl=zh-cn) \n- [BigQuery](https://cloud.google.com/bigquery/pricing?hl=zh-cn) \n\u60a8\u53ef\u4f7f\u7528 [\u50f9\u683c\u8a08\u7b97\u5668](https://cloud.google.com/products/calculator?hl=zh-cn) \u6839\u64da\u60a8\u7684\u9810\u8a08\u4f7f\u7528\u60c5\u6cc1\u4f86\u4f30\u7b97\u8cbb\u7528\u3002 \nTitles in dynamic includes are not used anywhere, and we should avoid paying to translate them\u5b8c\u6210\u672c\u6587\u6a94\u4e2d\u63cf\u8ff0\u7684\u4efb\u52d9\u5f8c\uff0c\u60a8\u53ef\u4ee5\u901a\u904e\u522a\u9664\u6240\u5275\u5efa\u7684\u8cc7\u6e90\u4f86\u907f\u514d\u7e7c\u7e8c\u8a08\u8cbb\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u6e05\u7406](#clean-up) \u3002## \u6e96\u5099\u5de5\u4f5c- Titles in dynamic includes are not used anywhere, and we should avoid paying to translate them## \u4f7f\u7528 MusicBrainz \u6578\u64da\u96c6\u672c\u6559\u7a0b\u4f9d\u8cf4\u65bc MusicBrainz \u6578\u64da\u5eab\u4e2d\u8868\u7684 JSON \u5feb\u7167\uff0c\u8a72\u6578\u64da\u5eab\u57fa\u65bc PostgreSQL \u69cb\u5efa\uff0c\u5305\u542b\u6709\u95dc\u6240\u6709 MusicBrainz \u97f3\u6a02\u7684\u4fe1\u606f\u3002 [MusicBrainz \u67b6\u69cb](https://musicbrainz.org/doc/MusicBrainz_Database/Schema) \u5305\u542b\u7684\u4e00\u4e9b\u5143\u7d20\u5982\u4e0b\uff1a- \u97f3\u6a02\u4eba\n- \u767c\u884c\u7d44\n- \u767c\u884c\u7248\u672c\n- \u9304\u88fd\u5167\u5bb9\n- \u4f5c\u54c1\n- \u6a19\u7c64\n- \u9019\u4e9b\u5be6\u9ad4\u4e4b\u9593\u7684\u8a31\u591a [\u95dc\u4fc2](https://musicbrainz.org/doc/Relationships) \u3002\nMusicBrainz \u67b6\u69cb\u5305\u62ec\u4e09\u500b\u76f8\u95dc\u7684\u8868\uff1a `artist` \u3001 `recording` \u548c `artist_credit_name` \u3002 `artist_credit` \u8868\u793a\u53c3\u8207\u67d0\u500b\u9304\u88fd\u5167\u5bb9\u8868\u6f14\u7684\u97f3\u6a02\u4eba\uff0c\u800c `artist_credit_name` \u8868\u4e2d\u7684\u884c\u901a\u904e `artist_credit` \u503c\u5c07\u9304\u88fd\u5167\u5bb9\u8207\u5176\u5c0d\u61c9\u7684\u97f3\u6a02\u4eba\u95dc\u806f\u3002\n\u672c\u6559\u7a0b\u63d0\u4f9b\u7684 PostgreSQL \u8868\u5df2\u7d93\u63d0\u53d6\u7232\u4ee5\u63db\u884c\u7b26\u5206\u9694\u7684 JSON \u683c\u5f0f\u4e26\u5b58\u5132\u5728\u516c\u5171 Cloud Storage \u5b58\u5132\u6876\u4e2d\uff1a `gs://solutions-public-assets/bqetl` \u3002\n\u5982\u679c\u60f3\u8981\u81ea\u884c\u57f7\u884c\u6b64\u6b65\u9a5f\uff0c\u60a8\u9700\u8981\u64c1\u6709\u4e00\u500b\u5305\u542b MusicBrainz \u6578\u64da\u96c6\u7684 PostgreSQL \u6578\u64da\u5eab\uff0c\u4e26\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5c0e\u51fa\u6bcf\u500b\u8868\uff1a\n```\nhost=POSTGRES_HOSTuser=POSTGRES_USERdatabase=POSTGRES_DATABASEfor table in artist recording artist_credit_namedo\u00a0 \u00a0 pg_cmd=\"\\\\copy (select row_to_json(r) from (select * from ${table}) r ) to exported_${table}.json\"\u00a0 \u00a0 psql -w -h ${host} -U ${user} -d ${db} -c $pg_cmd\u00a0 \u00a0 # clean up extra '\\' characters\u00a0 \u00a0 sed -i -e 's/\\\\\\\\/\\\\/g' exported_${table}.jsondone\n```## \u65b9\u6cd5 1\uff1a\u4f7f\u7528 BigQuery \u57f7\u884c ETL\u4f7f\u7528\u6b64\u65b9\u6cd5\u53ef\u5c07\u5c11\u91cf\u6578\u64da\u4e00\u6b21\u6027\u52a0\u8f09\u5230 BigQuery \u4e2d\u9032\u884c\u5206\u6790\u3002\u5728\u5c0d\u5927\u578b\u6216\u591a\u500b\u6578\u64da\u96c6\u4f7f\u7528\u81ea\u52d5\u5316\u4e4b\u524d\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6b64\u65b9\u6cd5\u5c0d\u6578\u64da\u96c6\u9032\u884c\u539f\u578b\u8a2d\u8a08\u3002\n### \u5275\u5efa BigQuery \u6578\u64da\u96c6\u5982\u9700\u5275\u5efa BigQuery \u6578\u64da\u96c6\uff0c\u8acb\u5206\u5225\u5c07\u5404\u500b MusicBrainz \u8868\u52a0\u8f09\u5230 BigQuery \u4e2d\uff0c\u7136\u5f8c\u806f\u63a5\u52a0\u8f09\u7684\u8868\uff0c\u4f7f\u6bcf\u4e00\u884c\u90fd\u5305\u542b\u60a8\u60f3\u8981\u7684\u6578\u64da\u95dc\u806f\u3002\u60a8\u5c07\u806f\u63a5\u7d50\u679c\u5b58\u5132\u5728\u65b0\u7684 BigQuery \u8868\u683c\u4e2d\u3002\u7136\u5f8c\uff0c\u60a8\u53ef\u4ee5\u522a\u9664\u52a0\u8f09\u7684\u539f\u59cb\u8868\u3002- \u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\uff0c\u6253\u958b BigQuery\u3002 [\u6253\u958b BigQuery](https://console.cloud.google.com/bigquery?hl=zh-cn) \n- \u5728 **\u63a2\u7d22\u5668** \u9762\u677f\u4e2d\uff0c\u9ede\u64ca\u9805\u76ee\u540d\u7a31\u65c1\u908a\u7684\u83dc\u55ae \uff0c\u7136\u5f8c\u9ede\u64ca **\u5275\u5efa\u6578\u64da\u96c6** \u3002\n- \u5728 **\u5275\u5efa\u6578\u64da\u96c6** \u5c0d\u8a71\u6846\u4e2d\uff0c\u5b8c\u6210\u4ee5\u4e0b\u6b65\u9a5f\uff1a- \u5728 **\u6578\u64da\u96c6 ID** \u5b57\u6bb5\u4e2d\uff0c\u8f38\u5165`musicbrainz`\u3002\n- \u5c07 **\u6578\u64da\u4f4d\u7f6e** \u8a2d\u7f6e\u7232 **us** \u3002\n- \u9ede\u64ca **\u5275\u5efa\u6578\u64da\u96c6** \u3002\n### \u5c0e\u5165 MusicBrainz \u8868\u5c0d\u65bc\u6bcf\u500b MusicBrainz \u8868\uff0c\u8acb\u57f7\u884c\u4ee5\u4e0b\u6b65\u9a5f\u5c07\u8868\u6dfb\u52a0\u5230\u60a8\u5275\u5efa\u7684\u6578\u64da\u96c6\u4e2d\uff1a- \u5728 Google Cloud \u63a7\u5236\u6aaf\u7684 BigQuery **\u63a2\u7d22\u5668** \u9762\u677f\u4e2d\uff0c\u5c55\u958b\u60a8\u7684\u9805\u76ee\u540d\u7a31\u6240\u5728\u7684\u884c\u4ee5\u986f\u793a\u65b0\u5275\u5efa\u7684`musicbrainz`\u6578\u64da\u96c6\u3002\n- \u9ede\u64ca`musicbrainz`\u6578\u64da\u96c6\u65c1\u908a\u7684\u83dc\u55ae\uff0c\u7136\u5f8c\u9ede\u64ca **\u5275\u5efa\u8868** \u3002\n- \u5728 **\u5275\u5efa\u6578\u64da\u96c6** \u5c0d\u8a71\u6846\u4e2d\uff0c\u5b8c\u6210\u4ee5\u4e0b\u6b65\u9a5f\uff1a- \u5728 **\u57fa\u65bc\u4ee5\u4e0b\u6578\u64da\u5275\u5efa\u8868** \u4e0b\u62c9\u5217\u8868\u4e2d\uff0c\u9078\u64c7 **Google Cloud Storage** \u3002\n- \u5728 **\u5f9e GCS \u5b58\u5132\u6876\u4e2d\u9078\u64c7\u6587\u4ef6** \u5b57\u6bb5\u4e2d\uff0c\u8f38\u5165\u6578\u64da\u6587\u4ef6\u7684\u8def\u5f91\uff1a```\nsolutions-public-assets/bqetl/artist.json\n```\n- \u5728 **\u6587\u4ef6\u683c\u5f0f** \u90e8\u5206\u4e2d\uff0c\u9078\u64c7 **JSONL\uff08\u4ee5\u63db\u884c\u7b26\u5206\u9694\u7684 JSON\uff09** \u3002\n- \u78ba\u4fdd **\u9805\u76ee** \u5305\u542b\u60a8\u7684\u9805\u76ee\u540d\u7a31\u3002\n- \u78ba\u4fdd **\u6578\u64da\u96c6** \u7232 `musicbrainz` \u3002\n- \u5c0d\u65bc **\u8868** \uff0c\u8f38\u5165\u8868\u540d\u7a31 `artist` \u3002\n- \u5728 **\u8868\u985e\u578b** \u4e2d\uff0c\u4f7f **\u539f\u751f\u8868** \u8655\u65bc\u9078\u4e2d\u72c0\u614b\u3002\n- \u5728 **\u67b6\u69cb** \u90e8\u5206\u4e0b\u65b9\uff0c\u9ede\u64ca\u4ee5\u958b\u5553 **\u4ee5\u6587\u672c\u5f62\u5f0f\u4fee\u6539** \u3002\n- [\u4e0b\u8f09 artist \u67b6\u69cb\u6587\u4ef6](https://storage.googleapis.com/solutions-public-assets/bqetl/artist_schema.json) \u4e26\u5728\u6587\u672c\u7de8\u8f2f\u5668\u6216\u67e5\u770b\u5668\u4e2d\u6253\u958b\u5b83\u3002\n- \u5c07 **\u67b6\u69cb** \u90e8\u5206\u7684\u5167\u5bb9\u66ff\u63db\u7232\u60a8\u4e0b\u8f09\u7684\u67b6\u69cb\u6587\u4ef6\u7684\u5167\u5bb9\u3002\n- \u9ede\u64ca **\u5275\u5efa\u8868** \uff1a\n- \u7b49\u5f85\u52a0\u8f09\u4f5c\u696d\u5b8c\u6210\u3002\n- \u52a0\u8f09\u5b8c\u6210\u5f8c\uff0c\u65b0\u8868\u5c07\u986f\u793a\u5728\u6578\u64da\u96c6\u4e0b\u3002\n- \u91cd\u8907\u7b2c 1 \u6b65\u5230\u7b2c 5 \u6b65\uff0c\u4ee5\u5275\u5efa\u5305\u542b\u4ee5\u4e0b\u66f4\u6539\u7684 `artist_credit_name` \u8868\uff1a- \u7232\u6e90\u6578\u64da\u6587\u4ef6\u4f7f\u7528\u4ee5\u4e0b\u8def\u5f91\uff1a```\nsolutions-public-assets/bqetl/artist_credit_name.json\n```\n- \u4f7f\u7528 `artist_credit_name` \u4f5c\u7232 **\u8868** \u540d\u7a31\u3002\n- \u4e0b\u8f09 [artist_credit_name \u67b6\u69cb\u6587\u4ef6](https://storage.googleapis.com/solutions-public-assets/bqetl/artist_credit_name_schema.json) \u4e26\u4f7f\u7528\u8a72\u67b6\u69cb\u7684\u5167\u5bb9\u3002\n- \u91cd\u8907\u7b2c 1 \u6b65\u5230\u7b2c 5 \u6b65\uff0c\u4ee5\u5275\u5efa\u5305\u542b\u4ee5\u4e0b\u66f4\u6539\u7684 `recording` \u8868\uff1a- \u7232\u6e90\u6578\u64da\u6587\u4ef6\u4f7f\u7528\u4ee5\u4e0b\u8def\u5f91\uff1a```\nsolutions-public-assets/bqetl/recording.json\n```\n- \u4f7f\u7528 `recording` \u4f5c\u7232 **\u8868** \u540d\u7a31\u3002\n- \u4e0b\u8f09 [recording \u67b6\u69cb\u6587\u4ef6](https://storage.googleapis.com/solutions-public-assets/bqetl/recording_schema.json) \uff0c\u4e26\u4f7f\u7528\u8a72\u67b6\u69cb\u7684\u5167\u5bb9\u3002\n### \u624b\u52d5\u5c0d\u6578\u64da\u9032\u884c\u53cd\u898f\u7bc4\u5316\u7232\u4e86\u5c0d\u6578\u64da\u9032\u884c\u53cd\u898f\u7bc4\u5316\uff0c\u8acb\u5c07\u6578\u64da\u806f\u63a5\u5230\u4e00\u500b\u65b0\u7684 BigQuery \u8868\u683c\u4e2d\uff0c\u8a72\u8868\u4e2d\u6bcf\u4f4d\u97f3\u6a02\u4eba\u7684\u6bcf\u4e00\u689d\u9304\u88fd\u5167\u5bb9\u5404\u4f54\u4e00\u884c\uff0c\u4e26\u4e14\u5305\u62ec\u60a8\u5e0c\u671b\u4fdd\u7559\u7528\u65bc\u5206\u6790\u7684\u9078\u5b9a\u5143\u6578\u64da\u3002- \u5982\u679c BigQuery \u67e5\u8a62\u7de8\u8f2f\u5668\u672a\u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\u6253\u958b\uff0c\u8acb\u9ede\u64ca **\u7de8\u5beb\u65b0\u67e5\u8a62** \u3002\n- \u8907\u88fd\u4ee5\u4e0b\u67e5\u8a62\u4e26\u5c07\u5176\u7c98\u8cbc\u5230 **\u67e5\u8a62\u7de8\u8f2f\u5668** \u4e2d\uff1a```\nSELECT\u00a0 \u00a0 artist.id,\u00a0 \u00a0 artist.gid AS artist_gid,\u00a0 \u00a0 artist.name AS artist_name,\u00a0 \u00a0 artist.area,\u00a0 \u00a0 recording.name AS recording_name,\u00a0 \u00a0 recording.length,\u00a0 \u00a0 recording.gid AS recording_gid,\u00a0 \u00a0 recording.videoFROM\u00a0 \u00a0 `musicbrainz.artist` AS artistINNER JOIN\u00a0 \u00a0 `musicbrainz.artist_credit_name` AS artist_credit_nameON\u00a0 \u00a0 artist.id = artist_credit_name.artistINNER JOIN\u00a0 \u00a0 `musicbrainz.recording` AS recordingON\u00a0 \u00a0 artist_credit_name.artist_credit = recording.artist_credit\n```\n- \u9ede\u64ca **\u66f4\u591a** \u4e0b\u62c9\u5217\u8868\uff0c\u7136\u5f8c\u9078\u64c7 **\u67e5\u8a62\u8a2d\u7f6e** \u3002\n- \u5728 **\u67e5\u8a62\u8a2d\u7f6e** \u5c0d\u8a71\u6846\u4e2d\uff0c\u5b8c\u6210\u4ee5\u4e0b\u6b65\u9a5f\uff1a- \u9078\u64c7 **\u7232\u67e5\u8a62\u7d50\u679c\u8a2d\u7f6e\u76ee\u6a19\u8868** \u3002\n- \u5728 **\u6578\u64da\u96c6** \u4e2d\uff0c\u8f38\u5165`musicbrainz`\u4e26\u9078\u64c7\u9805\u76ee\u4e2d\u7684\u6578\u64da\u96c6\u3002\n- \u5728 **\u8868 ID** \u4e2d\uff0c\u8f38\u5165`recordings_by_artists_manual`\u3002\n- \u5c0d\u65bc **\u76ee\u6a19\u8868\u7684\u5beb\u5165\u8a2d\u7f6e** \uff0c\u9ede\u64ca **\u8986\u84cb\u8868** \u3002\n- \u9078\u4e2d **\u5141\u8a31\u5927\u578b\u7d50\u679c\uff08\u7121\u5927\u5c0f\u9650\u5236\uff09** \u8907\u9078\u6846\u3002\n- \u9ede\u64ca **\u4fdd\u5b58** \u3002\n- \u9ede\u64ca **\u904b\u884c** \u3002\u67e5\u8a62\u5b8c\u6210\u5f8c\uff0c\u67e5\u8a62\u7d50\u679c\u6578\u64da\u5728\u65b0\u5275\u5efa\u7684 BigQuery \u8868\u683c\u4e2d\u6309\u7167\u6bcf\u4f4d\u97f3\u6a02\u4eba\u7684\u6b4c\u66f2\u9032\u884c\u7d44\u7e54\uff0c\u4e26\u5728 **\u67e5\u8a62\u7d50\u679c** \u4e2d\u986f\u793a\u7d50\u679c\u793a\u4f8b\uff0c\u4f8b\u5982\uff1a| \u884c |  id | artist_gid | artist_name      | area | recording_name          | length | recording_gid | video |\n|-----:|-------:|:-------------|:---------------------------------|-------:|:-----------------------------------------------------|---------:|:----------------|:--------|\n| 1 | 97546 | 125ec42a... | unknown       | 240 | Horo Gun Toireamaid H\u00f9gan Fhathast Air    | 174106 | c8bbe048...  | False |\n| 2 | 266317 | 2e7119b5... | Capella Istropolitana   | 189 | Concerto Grosso in D minor, op. 2 no. 3: II. Adagio | 134000 | af0f294d...  | False |\n| 3 | 628060 | 34cd3689... | Conspirare      | 5196 | Liturgy, op. 42: 9. Praise the Lord from the Heavens | 126933 | 8bab920d...  | False |\n| 4 | 423877 | 54401795... | Boys Air Choir     | 1178 | Nunc Dimittis          | 190000 | 111611eb...  | False |\n| 5 | 394456 | 9914f9f9... | L\u2019Orchestre de la Suisse Romande | 23036 | Concert Waltz no. 2, op. 51       | 509960 | b16742d1...  | False |\n## \u65b9\u6cd5 2\uff1a\u4f7f\u7528 Dataflow \u57f7\u884c ETL \u4ee5\u8f49\u5230 BigQuery\u5728\u672c\u6559\u7a0b\u7684\u9019\u4e00\u90e8\u5206\u4e2d\uff0c\u60a8\u5c07\u4f7f\u7528\u793a\u4f8b\u7a0b\u5e8f\u901a\u904e Dataflow \u6d41\u6c34\u7dda\u5c07\u6578\u64da\u52a0\u8f09\u5230 BigQuery \u4e2d\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 BigQuery \u754c\u9762\u3002\u7136\u5f8c\u4f7f\u7528 Beam \u7de8\u7a0b\u6a21\u578b\u5c0d\u6578\u64da\u9032\u884c\u53cd\u898f\u7bc4\u5316\u548c\u6e05\u7406\uff0c\u4ee5\u4fbf\u52a0\u8f09\u5230 BigQuery \u4e2d\u3002\n\u958b\u59cb\u4e4b\u524d\uff0c\u8acb\u67e5\u770b\u76f8\u95dc\u6982\u5ff5\u548c\u793a\u4f8b\u4ee3\u78bc\u3002\n### \u67e5\u770b\u6982\u5ff5\u96d6\u7136\u672c\u4f8b\u4e2d\u7684\u6578\u64da\u898f\u6a21\u5f88\u5c0f\u4e26\u4e14\u53ef\u4ee5\u4f7f\u7528 BigQuery \u754c\u9762\u5feb\u901f\u4e0a\u50b3\uff0c\u4f46\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 Dataflow \u57f7\u884c ETL\u3002\u7576\u60a8\u57f7\u884c\u5927\u898f\u6a21\u806f\u63a5\u6642\uff0c\u4f7f\u7528 Dataflow \u800c\u975e BigQuery \u754c\u9762\u4f86\u57f7\u884c ETL \u4ee5\u8f49\u5230 BigQuery\uff0c\u5927\u898f\u6a21\u806f\u63a5\u662f\u6307\u8655\u7406\u7d04\u6709 500-5000 \u5217\u3001\u8d85\u904e 10 TB \u7684\u6578\u64da\u4ee5\u5b8c\u6210\u4ee5\u4e0b\u76ee\u6a19\uff1a- \u60a8\u5e0c\u671b\u5728\u6578\u64da\u52a0\u8f09\u5230 BigQuery \u4e4b\u5f8c\u4fbf\u9032\u884c\u6e05\u7406\u6216\u8f49\u63db\uff0c\u800c\u4e0d\u662f\u5b58\u5132\u6578\u64da\u4e26\u5728\u5b58\u5132\u4e4b\u5f8c\u9032\u884c\u806f\u63a5\u3002\u56e0\u6b64\uff0c\u4f7f\u7528\u6b64\u65b9\u6cd5\u9084\u5177\u6709\u8f03\u4f4e\u7684\u5b58\u5132\u8981\u6c42\uff0c\u56e0\u7232\u6578\u64da\u53ea\u6703\u4ee5\u806f\u63a5\u548c\u8f49\u63db\u72c0\u614b\u5b58\u5132\u5728 BigQuery \u4e2d\u3002\n- \u60a8\u8a08\u5283\u9032\u884c\u81ea\u5b9a\u7fa9\u6578\u64da\u6e05\u7406\uff08\u4e0d\u80fd\u53ea\u901a\u904e SQL \u4f86\u5be6\u73fe\uff09\u3002\n- \u60a8\u8a08\u5283\u5728\u52a0\u8f09\u904e\u7a0b\u4e2d\u5c07\u8a72\u6578\u64da\u8207 OLTP \u5916\u90e8\u7684\u6578\u64da\uff08\u4f8b\u5982\u65e5\u8a8c\u6216\u9060\u7a0b\u8a2a\u554f\u7684\u6578\u64da\uff09\u7d44\u5408\u5728\u4e00\u8d77\u3002\n- \u60a8\u8a08\u5283\u4f7f\u7528\u6301\u7e8c\u96c6\u6210\u6216\u6301\u7e8c\u90e8\u7f72 (CI/CD) \u4f86\u5be6\u73fe\u6578\u64da\u52a0\u8f09\u908f\u8f2f\u7684\u6e2c\u8a66\u548c\u90e8\u7f72\u81ea\u52d5\u5316\u3002\n- \u60a8\u671f\u671b\u96a8\u7740\u6642\u9593\u7684\u63a8\u79fb\u9010\u6b65\u8fed\u4ee3\u548c\u589e\u5f37/\u6539\u9032 ETL \u6d41\u7a0b\u3002\n- \u60a8\u8a08\u5283\u4ee5\u589e\u91cf\u65b9\u5f0f\u6dfb\u52a0\u6578\u64da\uff0c\u800c\u4e0d\u662f\u57f7\u884c\u4e00\u6b21\u6027 ETL\u3002\n\u4ee5\u4e0b\u662f\u793a\u4f8b\u7a0b\u5e8f\u5275\u5efa\u7684\u6578\u64da\u6d41\u6c34\u7dda\u5716\u8868\uff1a\u5728\u793a\u4f8b\u4ee3\u78bc\u4e2d\uff0c\u8a31\u591a\u6d41\u6c34\u7dda\u6b65\u9a5f\u88ab\u5206\u7d44\u6216\u5c01\u88dd\u5230\u7c21\u4fbf\u65b9\u6cd5\u4e2d\uff0c\u7d66\u5b9a\u63cf\u8ff0\u6027\u540d\u7a31\uff0c\u4e26\u91cd\u5fa9\u4f7f\u7528\u3002\u5728\u4ee5\u4e0a\u5716\u8868\u4e2d\uff0c\u91cd\u8907\u4f7f\u7528\u7684\u6b65\u9a5f\u7531\u865b\u7dda\u6846\u8d77\u3002\n### \u67e5\u770b\u6d41\u6c34\u7dda\u4ee3\u78bc\u6b64\u4ee3\u78bc\u5275\u5efa\u4e00\u500b\u57f7\u884c\u4ee5\u4e0b\u6b65\u9a5f\u7684\u6d41\u6c34\u7dda\uff1a- \u5c07\u60a8\u8981\u5728\u806f\u63a5\u4e2d\u4f7f\u7528\u7684\u6bcf\u500b\u8868\u5f9e\u516c\u5171 Cloud Storage \u5b58\u5132\u6876\u52a0\u8f09\u5230\u5b57\u7b26\u4e32\u7684 `PCollection` \u96c6\u5408\u4e2d\u3002\u6bcf\u500b\u5143\u7d20\u5305\u542b\u8868\u4e2d\u4ee5 JSON \u8868\u793a\u7684\u4e00\u884c\u3002 [  src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) ```\npublic static PCollection<String> loadText(Pipeline p, String name) {\u00a0 BQETLOptions options = (BQETLOptions) p.getOptions();\u00a0 String loadingBucket = options.getLoadingBucketURL();\u00a0 String objectToLoad = storedObjectName(loadingBucket, name);\u00a0 return p.apply(name, TextIO.read().from(objectToLoad));}\n```\n- \u5c07\u9019\u4e9b JSON \u5b57\u7b26\u4e32\u8f49\u63db\u7232 `MusicBrainzDataObject` \u5c0d\u8c61\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u7136\u5f8c\u901a\u904e\u5176\u4e2d\u4e00\u500b\u5217\u503c\uff08\u5982\u4e3b\u9375\u6216\u5916\u9375\uff09\u7d44\u7e54\u5c0d\u8c61\u8868\u793a\u5f62\u5f0f\u3002 [  src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) ```\npublic static PCollection<KV<Long, MusicBrainzDataObject>> loadTableFromText(\u00a0 \u00a0 PCollection<String> text, String name, String keyName) {\u00a0 final String namespacedKeyname = name + \"_\" + keyName;\u00a0 return text.apply(\u00a0 \u00a0 \u00a0 \"load \" + name,\u00a0 \u00a0 \u00a0 MapElements.into(new TypeDescriptor<KV<Long, MusicBrainzDataObject>>() {})\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .via(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (String input) -> {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MusicBrainzDataObject datum = JSONReader.readObject(name, input);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Long key = (Long) datum.getColumnValue(namespacedKeyname);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return KV.of(key, datum);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }));}\n```\n- \u6839\u64da\u5171\u540c\u97f3\u6a02\u4eba\u806f\u63a5\u5217\u8868\u3002 `artist_credit_name` \u5c07\u97f3\u6a02\u4eba\u5718\u968a\u8207\u5176\u9304\u88fd\u5167\u5bb9\u9032\u884c\u95dc\u806f\uff0c\u5e77\u5305\u542b\u97f3\u6a02\u4eba\u5916\u9375\u3002 `artist_credit_name` \u8868\u4f5c\u7232\u9375\u503c `KV` \u5c0d\u8c61\u5217\u8868\u9032\u884c\u52a0\u8f09\u3002 `K` \u6210\u54e1\u7232\u97f3\u6a02\u4eba\u3002 [  src/main/java/com/google/cloud/bqetl/BQETLSimple.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/BQETLSimple.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/BQETLSimple.java) ```\nPCollection<MusicBrainzDataObject> artistCredits =\u00a0 \u00a0 MusicBrainzTransforms.innerJoin(\"artists with artist credits\", artists, artistCreditName);\n```\n- \u4f7f\u7528 `MusicBrainzTransforms.innerJoin()` \u65b9\u6cd5\u806f\u63a5\u5217\u8868\u3002 [  src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) ```\npublic static PCollection<MusicBrainzDataObject> innerJoin(\u00a0 \u00a0 String name,\u00a0 \u00a0 PCollection<KV<Long, MusicBrainzDataObject>> table1,\u00a0 \u00a0 PCollection<KV<Long, MusicBrainzDataObject>> table2) {\u00a0 final TupleTag<MusicBrainzDataObject> t1 = new TupleTag<MusicBrainzDataObject>() {};\u00a0 final TupleTag<MusicBrainzDataObject> t2 = new TupleTag<MusicBrainzDataObject>() {};\u00a0 PCollection<KV<Long, CoGbkResult>> joinedResult = group(name, table1, table2, t1, t2);\n```- \u6309\u8981\u806f\u63a5\u7684\u9375\u6210\u54e1\u5c0d`KV`\u5c0d\u8c61\u7684\u96c6\u5408\u9032\u884c\u5206\u7d44\u3002\u9019\u6703\u751f\u6210\u5e36\u6709\u9577\u9375\uff08`artist.id`\u5217\u503c\uff09\u7684`KV`\u5c0d\u8c61\u7684`PCollection`\uff0c\u4e26\u751f\u6210`CoGbkResult`\uff08\u4ee3\u8868\u6839\u64da\u9375\u7d50\u679c\u5408\u4f75\u5206\u7d44\uff09\u3002`CoGbkResult`\u5c0d\u8c61\u662f\u5c0d\u8c61\u5217\u8868\u7684\u5143\u7d44\uff0c\u5176\u5177\u6709\u7b2c\u4e00\u548c\u7b2c\u4e8c\u500b`PCollections`\u96c6\u5408\u7684\u5171\u540c\u9375\u503c\u3002\u5728\u904b\u884c`group`\u65b9\u6cd5\u4e2d\u7684`CoGroupByKey`\u64cd\u4f5c\u4e4b\u524d\uff0c\u8a72\u5143\u7d44\u901a\u904e\u7232\u6bcf\u500b`PCollection`\u914d\u88fd\u7684 Tuple \u6a19\u8a18\u53ef\u4ee5\u9032\u884c\u5c0b\u5740\u3002\n- \u5c07\u6bcf\u500b\u5c0d\u8c61\u5339\u914d\u5408\u4f75\u5230\u8868\u793a\u806f\u63a5\u7d50\u679c\u7684 `MusicBrainzDataObject` \u5c0d\u8c61\u4e2d\u3002 [  src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) ```\nPCollection<List<MusicBrainzDataObject>> mergedResult =\u00a0 \u00a0 joinedResult.apply(\u00a0 \u00a0 \u00a0 \u00a0 \"merge join results\",\u00a0 \u00a0 \u00a0 \u00a0 MapElements.into(new TypeDescriptor<List<MusicBrainzDataObject>>() {})\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .via(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (KV<Long, CoGbkResult> group) -> {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 List<MusicBrainzDataObject> result = new ArrayList<>();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Iterable<MusicBrainzDataObject> leftObjects = group.getValue().getAll(t1);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Iterable<MusicBrainzDataObject> rightObjects = group.getValue().getAll(t2);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 leftObjects.forEach(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (MusicBrainzDataObject l) ->\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 rightObjects.forEach(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (MusicBrainzDataObject r) -> result.add(l.duplicate().merge(r))));\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return result;\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }));\n```\n- \u5c07\u96c6\u5408\u91cd\u65b0\u7d44\u7e54\u7232 `KV` \u5c0d\u8c61\u5217\u8868\u4ee5\u958b\u59cb\u4e0b\u4e00\u6b21\u806f\u63a5\u3002\u6b64\u6642\uff0c `K` \u503c\u7232 `artist_credit` \u5217\uff0c\u7528\u65bc\u806f\u63a5\u9304\u88fd\u5167\u5bb9\u8868\u3002 [  src/main/java/com/google/cloud/bqetl/BQETLSimple.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/BQETLSimple.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/BQETLSimple.java) ```\nPCollection<KV<Long, MusicBrainzDataObject>> artistCreditNamesByArtistCredit =\u00a0 \u00a0 MusicBrainzTransforms.by(\"artist_credit_name_artist_credit\", artistCredits);\n```\n- \u5c07\u7d50\u679c\u8207\u6309 `MusicBrainzDataObject` \u7d44\u7e54\u7684\u5df2\u52a0\u8f09\u7684\u9304\u88fd\u5167\u5bb9\u96c6\u5408\u9032\u884c\u806f\u63a5\uff0c\u7372\u5f97 `artist_credit.id` \u5c0d\u8c61\u7684\u6700\u7d42\u751f\u6210\u96c6\u5408\u3002 [  src/main/java/com/google/cloud/bqetl/BQETLSimple.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/BQETLSimple.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/BQETLSimple.java) ```\nPCollection<MusicBrainzDataObject> artistRecordings =\u00a0 \u00a0 MusicBrainzTransforms.innerJoin(\u00a0 \u00a0 \u00a0 \u00a0 \"joined recordings\", artistCreditNamesByArtistCredit, recordingsByArtistCredit);\n```\n- \u5c07\u751f\u6210\u7684 `MusicBrainzDataObjects` \u5c0d\u8c61\u6620\u5c04\u5230 `TableRows` \u3002 [  src/main/java/com/google/cloud/bqetl/BQETLSimple.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/BQETLSimple.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/BQETLSimple.java) ```\nPCollection<TableRow> tableRows =\u00a0 \u00a0 MusicBrainzTransforms.transformToTableRows(artistRecordings, bqTableSchema);\n```\n- \u5c07\u751f\u6210\u7684 `TableRows` \u5beb\u5165 BigQuery\u3002 [  src/main/java/com/google/cloud/bqetl/BQETLSimple.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/BQETLSimple.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/BQETLSimple.java) ```\ntableRows.apply(\u00a0 \u00a0 \"Write to BigQuery\",\u00a0 \u00a0 BigQueryIO.writeTableRows()\u00a0 \u00a0 \u00a0 \u00a0 .to(options.getBigQueryTablename())\u00a0 \u00a0 \u00a0 \u00a0 .withSchema(bqTableSchema)\u00a0 \u00a0 \u00a0 \u00a0 .withCustomGcsTempLocation(StaticValueProvider.of(options.getTempLocation()))\u00a0 \u00a0 \u00a0 \u00a0 .withWriteDisposition(BigQueryIO.Write.WriteDisposition.WRITE_TRUNCATE)\u00a0 \u00a0 \u00a0 \u00a0 .withCreateDisposition(BigQueryIO.Write.CreateDisposition.CREATE_IF_NEEDED));\n```\n\u5982\u9700\u8a73\u7d30\u77ad\u89e3 Beam \u6d41\u6c34\u7dda\u7de8\u7a0b\u6a5f\u5236\uff0c\u8acb\u53c3\u95b1\u4ee5\u4e0b\u6709\u95dc [\u7de8\u7a0b\u6a21\u578b](https://cloud.google.com/dataflow/docs/concepts/beam-programming-model?hl=zh-cn) \u7684\u4e3b\u984c\uff1a- [PCollection](https://beam.apache.org/documentation/programming-guide/#pcollections) \n- [\u5f9e\u6587\u672c\u6587\u4ef6\uff08\u5305\u62ec Cloud Storage\uff09\u52a0\u8f09\u6578\u64da](https://beam.apache.org/documentation/programming-guide/#pipeline-io) \n- [ParDo \u548c MapElements \u7b49\u8f49\u63db](https://beam.apache.org/documentation/programming-guide/#core-beam-transforms) \n- [\u806f\u63a5\u548c GroupByKey](https://beam.apache.org/documentation/programming-guide/#groupbykey) \n- [BigQuery IO](https://beam.apache.org/documentation/io/built-in/google-bigquery/) \n\u5728\u67e5\u770b\u5b8c\u4ee3\u78bc\u57f7\u884c\u7684\u6b65\u9a5f\u5f8c\uff0c\u60a8\u53ef\u4ee5\u904b\u884c\u6d41\u6c34\u7dda\u3002\n### \u5275\u5efa Cloud Storage \u5b58\u5132\u6876\n### \u904b\u884c\u6d41\u6c34\u7dda\u4ee3\u78bc\n- \u5728 Google Cloud Console \u4e2d\uff0c\u6253\u958b Cloud Shell\u3002 [\u6253\u958b Cloud Shell](https://console.cloud.google.com/?cloudshell=true&hl=zh-cn) \n- \u8a2d\u7f6e\u9805\u76ee\u548c\u6d41\u6c34\u7dda\u8173\u672c\u7684\u74b0\u5883\u8b8a\u91cf```\nexport PROJECT_ID=PROJECT_IDexport REGION=us-central1export DESTINATION_TABLE=recordings_by_artists_dataflowexport DATASET=musicbrainz\n```\u5c07 \u66ff\u63db\u7232 Google Cloud \u9805\u76ee\u7684\u9805\u76ee ID\u3002\n- \u78ba\u4fdd `gcloud` \u6b63\u5728\u4f7f\u7528\u60a8\u5728\u672c\u6559\u7a0b\u958b\u982d\u90e8\u5206\u5275\u5efa\u6216\u9078\u64c7\u7684\u9805\u76ee\uff1a```\ngcloud config set project $PROJECT_ID\n```\n- \u9075\u5faa\u6700\u5c0f\u6b0a\u9650\u5b89\u5168\u539f\u5247\uff0c\u7232 Dataflow \u6d41\u6c34\u7dda\u5275\u5efa\u670d\u52d9\u8cec\u865f\uff0c\u4e26\u50c5\u6388\u4e88\u5176\u6240\u9700\u7684\u6b0a\u9650\uff1a `musicbrainz` \u6578\u64da\u96c6\u4e0a\u7684 `roles/dataflow.worker` \u3001 `roles/bigquery.jobUser` \u548c `dataEditor` \u89d2\u8272\uff1a```\ngcloud iam service-accounts create musicbrainz-dataflowexport SERVICE_ACCOUNT=musicbrainz-dataflow@${PROJECT_ID}.iam.gserviceaccount.comgcloud projects add-iam-policy-binding ${PROJECT_ID} \\\u00a0 \u00a0 --member=serviceAccount:${SERVICE_ACCOUNT} \\\u00a0 \u00a0 --role=roles/dataflow.workergcloud projects add-iam-policy-binding ${PROJECT_ID} \\\u00a0 \u00a0 --member=serviceAccount:${SERVICE_ACCOUNT} \\\u00a0 \u00a0 --role=roles/bigquery.jobUserbq query \u00a0--use_legacy_sql=false \\\u00a0 \u00a0 \"GRANT \\`roles/bigquery.dataEditor\\` ON SCHEMA musicbrainz\u00a0 \u00a0 \u00a0TO 'serviceAccount:${SERVICE_ACCOUNT}'\"\n```\n- \u7232 Dataflow \u6d41\u6c34\u7dda\u5275\u5efa\u4e00\u500b\u5b58\u5132\u6876\u4ee5\u7528\u65bc\u81e8\u6642\u6587\u4ef6\uff0c\u4e26\u5411\u5176\u6388\u4e88 `musicbrainz-dataflow` \u670d\u52d9\u8cec\u865f\u7684 `Owner` \u6b0a\u9650\uff1a```\nexport DATAFLOW_TEMP_BUCKET=gs://temp-bucket-${PROJECT_ID}gsutil mb -l us ${DATAFLOW_TEMP_BUCKET}gsutil acl ch -u ${SERVICE_ACCOUNT}:O ${DATAFLOW_TEMP_BUCKET}\n```\n- \u514b\u9686\u5305\u542b Dataflow \u4ee3\u78bc\u7684\u4ee3\u78bc\u5eab\uff1a```\ngit clone https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample.git\n```\n- \u5207\u63db\u5230\u793a\u4f8b\u76ee\u9304\uff1a```\ncd bigquery-etl-dataflow-sample\n```\n- \u7de8\u8b6f\u4e26\u904b\u884c Dataflow \u4f5c\u696d\uff1a```\n./run.sh simple\n```\u904b\u884c\u8a72\u4f5c\u696d\u5927\u7d04\u9700\u8981 10 \u5206\u9418\u6642\u9593\u3002\n- \u5982\u9700\u67e5\u770b\u6d41\u6c34\u7dda\u7684\u9032\u5ea6\uff0c\u8acb\u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\u9032\u5165 **Dataflow** \u9801\u9762\u3002 [\u9032\u5165 Dataflow](https://console.cloud.google.com/dataflow?hl=zh-cn) \u4f5c\u696d\u7684\u72c0\u614b\u986f\u793a\u5728\u72c0\u614b\u5217\u4e2d\u3002\u72c0\u614b\u7232 **\u6210\u529f** \u8868\u793a\u4f5c\u696d\u5df2\u5b8c\u6210\u3002\n- \uff08\u53ef\u9078\uff09\u5982\u9700\u67e5\u770b\u4f5c\u696d\u5716\u8868\u4e26\u8a73\u7d30\u77ad\u89e3\u6b65\u9a5f\uff0c\u8acb\u9ede\u64ca\u4f5c\u696d\u540d\u7a31\uff08\u4f8b\u5982 `etl-into-bigquery-bqetlsimple` \uff09\u3002\n- \u4f5c\u696d\u5b8c\u6210\u5f8c\uff0c\u9032\u5165 **BigQuery** \u9801\u9762\u3002 [\u8f49\u5230 BigQuery](https://console.cloud.google.com/bigquery?hl=zh-cn) \n- \u5982\u9700\u5728\u65b0\u8868\u4e0a\u904b\u884c\u67e5\u8a62\uff0c\u8acb\u5728 **\u67e5\u8a62\u7de8\u8f2f\u5668** \u7a97\u683c\u4e2d\u8f38\u5165\u4ee5\u4e0b\u5167\u5bb9\uff1a```\nSELECT artist_name, artist_gender, artist_area, recording_name, recording_lengthFROM musicbrainz.recordings_by_artists_dataflowWHERE artist_area is NOT NULL\u00a0 \u00a0 \u00a0 AND artist_gender IS NOT NULLLIMIT 1000;\n```\u7d50\u679c\u7a97\u683c\u5c07\u986f\u793a\u4e00\u7d44\u7d50\u679c\uff0c\u5982\u4e0b\u6240\u793a\uff1a| \u884c | artist_name | artist_gender | artist_area | recording_name   | recording_length |\n|-----:|:--------------|----------------:|--------------:|:-------------------------|-------------------:|\n| 1 | mirin   |    2 |   107 | Sylphia     |    264000 |\n| 2 | mirin   |    2 |   107 | Dependence    |    208000 |\n| 3 | Gaudiburschen |    1 |   81 | Die H\u00e4nde zum Himmel  |    210000 |\n| 4 | Sa4   |    1 |   331 | Ein Tag aus meiner Sicht |    221000 |\n| 5 | Dpat   |    1 |   7326 | Cutthroat    |    249000 |\n| 6 | Dpat   |    1 |   7326 | Deloused     |    178000 |\u5be6\u969b\u8f38\u51fa\u53ef\u80fd\u6703\u6709\u6240\u4e0d\u540c\uff0c\u56e0\u7232\u7d50\u679c\u672a\u6392\u5e8f\u3002\n### \u6e05\u7406\u6578\u64da\u63a5\u4e0b\u4f86\uff0c\u8acb\u5c0d Dataflow \u6d41\u6c34\u7dda\u7a0d\u505a\u66f4\u6539\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u52a0\u8f09\u5c0d\u7167\u8868\u4e26\u5c07\u5176\u4f5c\u7232\u8f14\u52a9\u8f38\u5165\u9032\u884c\u8655\u7406\uff0c\u5982\u4e0b\u5716\u6240\u793a\u3002\u7576\u60a8\u67e5\u8a62\u751f\u6210\u7684 BigQuery \u8868\u6642\uff0c\u5982\u679c\u4e0d\u624b\u52d5\u67e5\u627e MusicBrainz \u6578\u64da\u5eab\u7684 `area` \u8868\u4e2d\u7684\u5340\u57df\u6578\u5b57 ID\uff0c\u5247\u5f88\u96e3\u78ba\u5b9a\u97f3\u6a02\u4eba\u4f86\u81ea\u54ea\u88cf\u3002\u9019\u6703\u4f7f\u5f97\u5206\u6790\u67e5\u8a62\u7d50\u679c\u8b8a\u5f97\u8907\u96dc\u3002\n\u540c\u6a23\uff0c\u97f3\u6a02\u4eba\u6027\u5225\u4e5f\u986f\u793a\u7232 ID\uff0c\u4f46\u6574\u500b MusicBrainz \u6027\u5225\u8868\u50c5\u5305\u542b\u4e09\u884c\u3002\u7232\u4e86\u89e3\u6c7a\u6b64\u554f\u984c\uff0c\u60a8\u53ef\u4ee5\u5728 Dataflow \u6d41\u6c34\u7dda\u4e2d\u6dfb\u52a0\u4e00\u500b\u6b65\u9a5f\uff0c\u4ee5\u4f7f\u7528 MusicBrainz `area` \u548c `gender` \u8868\u5c07 ID \u6620\u5c04\u5230\u5176\u6b63\u78ba\u7684\u6a19\u7c64\u3002\n`artist_area` \u548c `artist_gender` \u8868\u5305\u542b\u7684\u884c\u6578\u660e\u986f\u5c11\u65bc\u97f3\u6a02\u4eba\u6216\u9304\u88fd\u5167\u5bb9\u6578\u64da\u8868\u3002\u5f8c\u7e8c\u8868\u4e2d\u7684\u5143\u7d20\u6578\u91cf\u5206\u5225\u53d7\u5230\u5730\u7406\u5340\u57df\u6578\u91cf\u6216\u6027\u5225\u6578\u91cf\u7684\u9650\u5236\u3002\n\u56e0\u6b64\uff0c\u67e5\u627e\u6b65\u9a5f\u6703\u4f7f\u7528\u7a31\u7232 [\u8f14\u52a9\u8f38\u5165](https://beam.apache.org/documentation/programming-guide/#side-inputs) \u7684 Dataflow \u529f\u80fd\u3002\n\u8f14\u52a9\u8f38\u5165\u4f5c\u7232\u6309\u884c\u5206\u9694\u7684 JSON \u6587\u4ef6\uff08\u5728\u5305\u542b Musicbrainz \u6578\u64da\u96c6\u7684\u516c\u958b Cloud Storage \u5b58\u5132\u6876\u4e2d\uff09\u7684\u8868\u5c0e\u51fa\uff0c\u4e26\u4e14\u53ef\u901a\u904e\u4e00\u500b\u6b65\u9a5f\u7528\u4f86\u5c0d\u9336\u6578\u64da\u9032\u884c\u53cd\u898f\u7bc4\u5316\u3002\n### \u67e5\u770b\u7528\u65bc\u5411\u6d41\u6c34\u7dda\u6dfb\u52a0\u8f14\u52a9\u8f38\u5165\u7684\u4ee3\u78bc\u5728\u904b\u884c\u6d41\u6c34\u7dda\u4e4b\u524d\uff0c\u8acb\u67e5\u770b\u4ee3\u78bc\u4ee5\u4fbf\u6df1\u5165\u77ad\u89e3\u65b0\u6b65\u9a5f\u3002\n\u6b64\u4ee3\u78bc\u6f14\u793a\u77ad\u5982\u4f55\u4f7f\u7528\u8f14\u52a9\u8f38\u5165\u9032\u884c\u6578\u64da\u6e05\u7406\u3002 `MusicBrainzTransforms` \u985e\u7232\u4f7f\u7528\u8f14\u52a9\u8f38\u5165\u5c07\u5916\u9375\u503c\u6620\u5c04\u5230\u6a19\u7c64\u63d0\u4f9b\u4e86\u66f4\u591a\u4fbf\u5229\u3002 `MusicBrainzTransforms` \u5eab\u63d0\u4f9b\u4e86\u4e00\u7a2e\u5275\u5efa\u5167\u90e8\u67e5\u627e\u985e\u7684\u65b9\u6cd5\u3002\u8a72\u67e5\u627e\u985e\u7684\u4f5c\u7528\u662f\u63cf\u8ff0\u6bcf\u500b\u5c0d\u7167\u8868\u4ee5\u53ca\u7528\u6a19\u7c64\u548c\u53ef\u8b8a\u9577\u5ea6\u53c3\u6578\u66ff\u63db\u7684\u5b57\u6bb5\u3002 `keyKey` \u662f\u5305\u542b\u67e5\u627e\u9375\u7684\u5217\u540d\uff0c `valueKey` \u662f\u5305\u542b\u5c0d\u61c9\u6a19\u7c64\u7684\u5217\u540d\u3002\n [  src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) \n```\npublic static LookupDescription lookup(\u00a0 \u00a0 String objectName, String keyKey, String valueKey, String... destinationKeys) {\u00a0 return new LookupDescription(objectName, keyKey, valueKey, destinationKeys);}\n```\n\u6bcf\u500b\u8f14\u52a9\u8f38\u5165\u90fd\u4f5c\u7232\u55ae\u500b\u6620\u5c04\u5c0d\u8c61\u9032\u884c\u52a0\u8f09\uff0c\u7528\u65bc\u67e5\u627e ID \u7684\u5c0d\u61c9\u6a19\u7c64\u3002\n\u9996\u5148\uff0c\u5c0d\u7167\u8868\u7684 JSON \u6700\u521d\u52a0\u8f09\u5230\u5177\u6709\u7a7a\u547d\u540d\u7a7a\u9593\u7684 `MusicBrainzDataObjects` \uff0c\u7136\u5f8c\u8f49\u63db\u7232\u5f9e `Key` \u5217\u503c\u5230 `Value` \u5217\u503c\u7684\u6620\u5c04\u3002\n [  src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) \n```\npublic static PCollectionView<Map<Long, String>> loadMapFromText(\u00a0 \u00a0 PCollection<String> text, String name, String keyKey, String valueKey) {\u00a0 // column/Key names are namespaced in MusicBrainzDataObject\u00a0 String keyKeyName = name + \"_\" + keyKey;\u00a0 String valueKeyName = name + \"_\" + valueKey;\u00a0 PCollection<KV<Long, String>> entries =\u00a0 \u00a0 \u00a0 text.apply(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"sideInput_\" + name,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MapElements.into(new TypeDescriptor<KV<Long, String>>() {})\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .via(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (String input) -> {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MusicBrainzDataObject object = JSONReader.readObject(name, input);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Long key = (Long) object.getColumnValue(keyKeyName);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String value = (String) object.getColumnValue(valueKeyName);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return KV.of(key, value);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }));\u00a0 return entries.apply(View.asMap());}\n```\n\u6240\u6709\u9019\u4e9b `Map` \u5c0d\u8c61\u90fd\u901a\u904e\u5176 `destinationKey` \uff08\u8a72\u9375\u5c07\u66ff\u63db\u7232\u67e5\u627e\u503c\uff09\u7684\u503c\u52a0\u5165\u4e00\u500b `Map` \u3002\n [  src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) \n```\nList<SimpleEntry<List<String>, PCollectionView<Map<Long, String>>>> mapSideInputs =\u00a0 \u00a0 new ArrayList<>();for (LookupDescription mapper : mappers) {\u00a0 PCollectionView<Map<Long, String>> mapView =\u00a0 \u00a0 \u00a0 loadMap(text.getPipeline(), mapper.objectName, mapper.keyKey, mapper.valueKey);\u00a0 List<String> destKeyList =\u00a0 \u00a0 \u00a0 mapper.destinationKeys.stream()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .map(destinationKey -> name + \"_\" + destinationKey)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .collect(Collectors.toList());\u00a0 mapSideInputs.add(new SimpleEntry<>(destKeyList, mapView));}\n```\n\u7136\u5f8c\uff0c\u5728\u5f9e JSON \u8f49\u63db\u97f3\u6a02\u4eba\u5c0d\u8c61\u6642\uff0c `destinationKey` \u7684\u503c\uff08\u4ee5\u6578\u5b57\u958b\u982d\uff09\u5c07\u66ff\u63db\u7232\u5176\u6a19\u7c64\u3002\n [  src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) \n```\nMap<Long, String> sideInputMap = c.sideInput(mapping.getValue());List<String> keyList = mapping.getKey();keyList.forEach(\u00a0 \u00a0 (String key) -> {\u00a0 \u00a0 \u00a0 Long id = (Long) result.getColumnValue(key);\u00a0 \u00a0 \u00a0 if (id != null) {\u00a0 \u00a0 \u00a0 \u00a0 String label = sideInputMap.get(id);\u00a0 \u00a0 \u00a0 \u00a0 if (label == null) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 label = \"\" + id;\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 result.replace(key, label);\n```\n\u5982\u9700\u6dfb\u52a0 `artist_area` \u548c `artist_gender` \u5b57\u6bb5\u7684\u89e3\u78bc\uff0c\u8acb\u5b8c\u6210\u4ee5\u4e0b\u6b65\u9a5f\uff1a- \u5728 Cloud Shell \u4e2d\uff0c\u78ba\u4fdd\u7232\u6d41\u6c34\u7dda\u8173\u672c\u8a2d\u7f6e\u4e86\u74b0\u5883\uff1a```\nexport PROJECT_ID=PROJECT_IDexport REGION=us-central1export DESTINATION_TABLE=recordings_by_artists_dataflow_sideinputsexport DATASET=musicbrainzexport DATAFLOW_TEMP_BUCKET=gs://temp-bucket-${PROJECT_ID}export SERVICE_ACCOUNT=musicbrainz-dataflow@${PROJECT_ID}.iam.gserviceaccount.com\n```\u5c07 \u66ff\u63db\u7232 Google Cloud \u9805\u76ee\u7684\u9805\u76ee ID\u3002\n- \u904b\u884c\u6d41\u6c34\u7dda\u4ee5\u5275\u5efa\u5177\u6709\u89e3\u78bc\u5340\u57df\u548c\u97f3\u6a02\u4eba\u6027\u5225\u7684\u8868\uff1a```\n./run.sh simple-with-lookups\n```\n- \u548c\u4e4b\u524d\u4e00\u6a23\uff0c\u8981\u67e5\u770b\u6d41\u6c34\u7dda\u7684\u9032\u5ea6\uff0c\u8acb\u9032\u5165 **Dataflow** \u9801\u9762\u3002 [\u9032\u5165 Dataflow](https://console.cloud.google.com/dataflow?hl=zh-cn) \u6d41\u6c34\u7dda\u5c07\u9700\u8981\u7d04 10 \u5206\u9418\u624d\u80fd\u5b8c\u6210\u3002\n- \u4f5c\u696d\u5b8c\u6210\u5f8c\uff0c\u9032\u5165 **BigQuery** \u9801\u9762\u3002 [\u8f49\u5230 BigQuery](https://console.cloud.google.com/bigquery?hl=zh-cn) \n- \u57f7\u884c\u5305\u542b `artist_area` \u548c `artist_gender` \u7684\u76f8\u540c\u67e5\u8a62\uff1a```\nSELECT artist_name, artist_gender, artist_area, recording_name, recording_length\u00a0 FROM musicbrainz.recordings_by_artists_dataflow_sideinputs\u00a0WHERE artist_area is NOT NULL\u00a0 \u00a0AND artist_gender IS NOT NULL\u00a0LIMIT 1000;\n```\u5728\u8f38\u51fa\u4e2d\uff0c `artist_area` \u548c `artist_gender` \u73fe\u5728\u5df2\u89e3\u78bc\uff1a| \u884c | artist_name | artist_gender | artist_area | recording_name   | recording_length |\n|-----:|:--------------|:----------------|:--------------|:-------------------------|-------------------:|\n| 1 | mirin   | Female   | Japan   | Sylphia     |    264000 |\n| 2 | mirin   | Female   | Japan   | Dependence    |    208000 |\n| 3 | Gaudiburschen | Male   | Germany  | Die H\u00e4nde zum Himmel  |    210000 |\n| 4 | Sa4   | Male   | Hamburg  | Ein Tag aus meiner Sicht |    221000 |\n| 5 | Dpat   | Male   | Houston  | Cutthroat    |    249000 |\n| 6 | Dpat   | Male   | Houston  | Deloused     |    178000 |\u5be6\u969b\u8f38\u51fa\u53ef\u80fd\u6703\u6709\u6240\u4e0d\u540c\uff0c\u56e0\u7232\u7d50\u679c\u672a\u6392\u5e8f\u3002\n### \u512a\u5316 BigQuery \u67b6\u69cb\u5728\u672c\u6559\u7a0b\u7684\u6700\u5f8c\u4e00\u90e8\u5206\uff0c\u60a8\u5c07\u904b\u884c\u4e00\u500b\u6d41\u6c34\u7dda\uff0c\u8a72\u6d41\u6c34\u7dda\u6703\u4f7f\u7528\u5d4c\u5957\u5b57\u6bb5\u751f\u6210\u66f4\u512a\u5316\u7684\u8868\u67b6\u69cb\u3002\n\u8acb\u82b1\u9ede\u6642\u9593\u67e5\u770b\u7528\u65bc\u751f\u6210\u8a72\u8868\u9019\u4e00\u512a\u5316\u7248\u672c\u7684\u4ee3\u78bc\u3002\n\u4e0b\u5716\u5c55\u793a\u4e86\u4e00\u500b\u7a0d\u6709\u4e0d\u540c\u7684 Dataflow \u6d41\u6c34\u7dda\uff0c\u5b83\u5c07\u97f3\u6a02\u4eba\u7684\u9304\u88fd\u5167\u5bb9\u5d4c\u5957\u5728\u6bcf\u500b\u97f3\u6a02\u4eba\u884c\u4e2d\uff0c\u800c\u4e0d\u662f\u5275\u5efa\u91cd\u8907\u7684\u97f3\u6a02\u4eba\u884c\u3002\u6578\u64da\u7684\u7576\u524d\u8868\u793a\u5f62\u5f0f\u5448\u5c55\u5e73\u72c0\u614b\u3002\u4e5f\u5c31\u662f\u8aaa\uff0c\u6bcf\u500b\u8a18\u9304\u7684\u9304\u88fd\u5167\u5bb9\u5c0d\u61c9\u4e00\u884c\uff0c\u5176\u4e2d\u5305\u62ec\u4f86\u81ea BigQuery \u67b6\u69cb\u7684\u6240\u6709\u97f3\u6a02\u4eba\u7684\u5143\u6578\u64da\uff0c\u4ee5\u53ca\u6240\u6709\u9304\u88fd\u5167\u5bb9\u548c `artist_credit_name` \u5143\u6578\u64da\u3002\u9019\u7a2e\u5c55\u5e73\u5316\u8868\u793a\u5f62\u5f0f\u81f3\u5c11\u6709\u5169\u500b\u7f3a\u9ede\uff1a- \u5b83\u6703\u7232\u6bcf\u500b\u8a18\u5165\u97f3\u6a02\u4eba\u7684\u9304\u88fd\u5167\u5bb9\u91cd\u8907`artist`\u5143\u6578\u64da\uff0c\u9019\u6703\u589e\u52a0\u6240\u9700\u7684\u5b58\u5132\u7a7a\u9593\u3002\n- \u7576\u60a8\u5c07\u6578\u64da\u5c0e\u51fa\u7232 JSON \u6642\uff0c\u5b83\u6703\u5c0e\u51fa\u91cd\u8907\u8a72\u6578\u64da\u7684\u6578\u7d44\uff0c\u800c\u4e0d\u662f\u5177\u6709\u5d4c\u5957\u9304\u88fd\u5167\u5bb9\u6578\u64da\u7684\u97f3\u6a02\u4eba\uff0c\u4f46\u5f8c\u8005\u53ef\u80fd\u7e94\u662f\u60a8\u60f3\u8981\u7684\u7d50\u679c\u3002\n\u5728\u6c92\u6709\u4efb\u4f55\u6027\u80fd\u640d\u5931\u4e14\u4e0d\u4f7f\u7528\u984d\u5916\u5b58\u5132\u7a7a\u9593\u7684\u60c5\u6cc1\u4e0b\uff0c\u60a8\u53ef\u4ee5\u901a\u904e\u5c0d Dataflow \u6d41\u6c34\u7dda\u9032\u884c\u4e00\u4e9b\u66f4\u6539\uff0c\u5c07\u9304\u88fd\u5167\u5bb9\u5b58\u5132\u7232\u6bcf\u500b\u97f3\u6a02\u4eba\u8a18\u9304\u4e2d\u7684\u91cd\u8907\u5b57\u6bb5\uff0c\u800c\u4e0d\u662f\u6bcf\u884c\u5b58\u5132\u4e00\u500b\u9304\u88fd\u5167\u5bb9\u3002\n\u6d41\u6c34\u7dda\u4e0d\u662f\u901a\u904e `artist_credit_name.artist` \u5c07\u9304\u88fd\u5167\u5bb9\u8207\u97f3\u6a02\u4eba\u4fe1\u606f\u9032\u884c\u806f\u63a5\uff0c\u800c\u662f\u5728\u97f3\u6a02\u4eba\u5c0d\u8c61\u4e2d\u5275\u5efa\u5d4c\u5957\u7684\u9304\u88fd\u5167\u5bb9\u5217\u8868\u3002\n [  src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) \n```\npublic static PCollection<MusicBrainzDataObject> nest(\u00a0 \u00a0 PCollection<KV<Long, MusicBrainzDataObject>> parent,\u00a0 \u00a0 PCollection<KV<Long, MusicBrainzDataObject>> child,\u00a0 \u00a0 String nestingKey) {\u00a0 final TupleTag<MusicBrainzDataObject> parentTag = new TupleTag<MusicBrainzDataObject>() {};\u00a0 final TupleTag<MusicBrainzDataObject> childTag = new TupleTag<MusicBrainzDataObject>() {};\u00a0 PCollection<KV<Long, CoGbkResult>> joinedResult =\u00a0 \u00a0 \u00a0 group(\"nest \" + nestingKey, parent, child, parentTag, childTag);\u00a0 return joinedResult.apply(\u00a0 \u00a0 \u00a0 \"merge join results \" + nestingKey,\u00a0 \u00a0 \u00a0 MapElements.into(new TypeDescriptor<MusicBrainzDataObject>() {})\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .via(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (KV<Long, CoGbkResult> group) -> {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MusicBrainzDataObject parentObject = group.getValue().getOnly(parentTag);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Iterable<MusicBrainzDataObject> children = group.getValue().getAll(childTag);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 List<MusicBrainzDataObject> childList = new ArrayList<>();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 children.forEach(childList::add);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 parentObject = parentObject.duplicate();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 parentObject.addColumnValue(\"recordings\", childList);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return parentObject;\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }));}\n```\n\u57f7\u884c\u6279\u91cf\u63d2\u5165\u64cd\u4f5c\u6642\uff0cBigQuery API \u7684 [\u884c\u5927\u5c0f\u4e0a\u9650](https://cloud.google.com/bigquery/quotas?hl=zh-cn#query_jobs) \u7232 100 MB\uff0c\u6d41\u5f0f\u63d2\u5165\u4e0a\u9650\u7232 10 MB\uff0c\u56e0\u6b64\u4ee3\u78bc\u6703\u5c07\u7d66\u5b9a\u8a18\u9304\u7684\u5d4c\u5957\u9304\u88fd\u5167\u5bb9\u6578\u91cf\u9650\u5236\u7232 1,000 \u500b\u5143\u7d20\uff0c\u4ee5\u78ba\u4fdd\u4e0d\u6703\u9054\u5230\u6b64\u9650\u5236\u3002\u5982\u679c\u7d66\u5b9a\u7684\u97f3\u6a02\u4eba\u64c1\u6709\u8d85\u904e 1,000 \u500b\u9304\u88fd\u5167\u5bb9\uff0c\u5247\u4ee3\u78bc\u5c07\u8907\u88fd\u8a72\u884c\uff08\u5305\u62ec `artist` \u5143\u6578\u64da\uff09\uff0c\u4e26\u7e7c\u7e8c\u5c07\u9304\u88fd\u5167\u5bb9\u6578\u64da\u5d4c\u5957\u5728\u8907\u88fd\u884c\u4e2d\u3002\n [  src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java ](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/bigquery-etl-dataflow-sample/blob/HEAD/src/main/java/com/google/cloud/bqetl/mbdata/MusicBrainzTransforms.java) \n```\nprivate static List<TableRow> toTableRows(\u00a0 \u00a0 MusicBrainzDataObject mbdo, Map<String, Object> serializableSchema) {\u00a0 TableRow row = new TableRow();\u00a0 List<TableRow> result = new ArrayList<>();\u00a0 Map<String, List<MusicBrainzDataObject>> nestedLists = new HashMap<>();\u00a0 Set<String> keySet = serializableSchema.keySet();\u00a0 /*\u00a0 \u00a0* \u00a0construct a row object without the nested objects\u00a0 \u00a0*/\u00a0 int maxListSize = 0;\u00a0 for (String key : keySet) {\u00a0 \u00a0 Object value = serializableSchema.get(key);\u00a0 \u00a0 Object fieldValue = mbdo.getColumnValue(key);\u00a0 \u00a0 if (fieldValue != null) {\u00a0 \u00a0 \u00a0 if (value instanceof Map) {\u00a0 \u00a0 \u00a0 \u00a0 @SuppressWarnings(\"unchecked\")\u00a0 \u00a0 \u00a0 \u00a0 List<MusicBrainzDataObject> list = (List<MusicBrainzDataObject>) fieldValue;\u00a0 \u00a0 \u00a0 \u00a0 if (list.size() > maxListSize) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 maxListSize = list.size();\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 nestedLists.put(key, list);\u00a0 \u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 row.set(key, fieldValue);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 /*\u00a0 \u00a0* add the nested objects but break up the nested objects across duplicate rows if nesting\u00a0 \u00a0* limit exceeded\u00a0 \u00a0*/\u00a0 TableRow parent = row.clone();\u00a0 Set<String> listFields = nestedLists.keySet();\u00a0 for (int i = 0; i < maxListSize; i++) {\u00a0 \u00a0 parent = (parent == null ? row.clone() : parent);\u00a0 \u00a0 final TableRow parentRow = parent;\u00a0 \u00a0 nestedLists.forEach(\u00a0 \u00a0 \u00a0 \u00a0 (String key, List<MusicBrainzDataObject> nestedList) -> {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (nestedList.size() > 0) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (parentRow.get(key) == null) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 parentRow.set(key, new ArrayList<TableRow>());\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 @SuppressWarnings(\"unchecked\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 List<TableRow> childRows = (List<TableRow>) parentRow.get(key);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 @SuppressWarnings(\"unchecked\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Map<String, Object> map = (Map<String, Object>) serializableSchema.get(key);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 childRows.add(toChildRow(nestedList.remove(0), map));\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 if ((i > 0) && (i % BIGQUERY_NESTING_LIMIT == 0)) {\u00a0 \u00a0 \u00a0 result.add(parent);\u00a0 \u00a0 \u00a0 parent = null;\u00a0 \u00a0 }\u00a0 }\u00a0 if (parent != null) {\u00a0 \u00a0 result.add(parent);\u00a0 }\u00a0 return result;}\n```\n\u4e0b\u5716\u986f\u793a\u4e86\u6d41\u6c34\u7dda\u7684\u4f86\u6e90\u3001\u8f49\u63db\u548c\u63a5\u6536\u5668\u3002\n \n\u5927\u591a\u6578\u60c5\u6cc1\u4e0b\uff0c\u6b65\u9a5f\u540d\u7a31\u5728\u4ee3\u78bc\u4e2d\u4f5c\u7232 `apply` \u65b9\u6cd5\u8abf\u7528\u7684\u4e00\u90e8\u5206\u63d0\u4f9b\u3002\n\u82e5\u8981\u5275\u5efa\u6b64\u512a\u5316\u6d41\u6c34\u7dda\uff0c\u8acb\u5b8c\u6210\u4ee5\u4e0b\u6b65\u9a5f\uff1a- \u5728 Cloud Shell \u4e2d\uff0c\u78ba\u4fdd\u7232\u6d41\u6c34\u7dda\u8173\u672c\u8a2d\u7f6e\u4e86\u74b0\u5883\uff1a```\nexport PROJECT_ID=PROJECT_IDexport REGION=us-central1export DESTINATION_TABLE=recordings_by_artists_dataflow_nestedexport DATASET=musicbrainzexport DATAFLOW_TEMP_BUCKET=gs://temp-bucket-${PROJECT_ID}export SERVICE_ACCOUNT=musicbrainz-dataflow@${PROJECT_ID}.iam.gserviceaccount.com\n```\n- \u904b\u884c\u6d41\u6c34\u7dda\u4ee5\u5d4c\u5957\u97f3\u6a02\u4eba\u884c\u4e2d\u7684\u9304\u88fd\u5167\u5bb9\u884c\uff1a```\n./run.sh nested\n```\n- \u548c\u4e4b\u524d\u4e00\u6a23\uff0c\u8981\u67e5\u770b\u6d41\u6c34\u7dda\u7684\u9032\u5ea6\uff0c\u8acb\u9032\u5165 **Dataflow** \u9801\u9762\u3002 [\u9032\u5165 Dataflow](https://console.cloud.google.com/dataflow?hl=zh-cn) \u6d41\u6c34\u7dda\u5c07\u9700\u8981\u7d04 10 \u5206\u9418\u624d\u80fd\u5b8c\u6210\u3002\n- \u4f5c\u696d\u5b8c\u6210\u5f8c\uff0c\u9032\u5165 **BigQuery** \u9801\u9762\u3002 [\u8f49\u5230 BigQuery](https://console.cloud.google.com/bigquery?hl=zh-cn) \n- \u5f9e\u5d4c\u5957\u5728 BigQuery \u7684\u8868\u4e2d\u67e5\u8a62\u5b57\u6bb5\uff1a```\nSELECT artist_name, artist_gender, artist_area, artist_recordingsFROM musicbrainz.recordings_by_artists_dataflow_nestedWHERE artist_area IS NOT NULL\u00a0 \u00a0 \u00a0 AND artist_gender IS NOT NULLLIMIT 1000;\n```\u5728\u8f38\u51fa\u4e2d\uff0c `artist_recordings` \u986f\u793a\u7232\u53ef\u5c55\u958b\u7684\u5d4c\u5957\u884c\uff1a| \u884c | artist_name | artist_gender | artist_area | artist_recordings |\n|-----:|:--------------|:----------------|:--------------|:--------------------|\n| 1 | mirin   | Female   | Japan   | (5 rows)   |\n| 3 | Gaudiburschen | Male   | Germany  | (1 row)    |\n| 4 | Sa4   | Male   | Hamburg  | (10 rows)   |\n| 6 | Dpat   | Male   | Houston  | (9 rows)   |\u5be6\u969b\u8f38\u51fa\u53ef\u80fd\u6703\u6709\u6240\u4e0d\u540c\uff0c\u56e0\u7232\u7d50\u679c\u672a\u6392\u5e8f\u3002\n- \u904b\u884c\u67e5\u8a62\u4ee5\u5f9e `STRUCT` \u63d0\u53d6\u503c\u4e26\u4f7f\u7528\u9019\u4e9b\u503c\u4f86\u904e\u6ffe\u7d50\u679c\uff0c\u4f8b\u5982\u5c0d\u65bc\u64c1\u6709\u5305\u542b\u201cJustin\u201d\u4e00\u8a5e\u7684\u9304\u88fd\u5167\u5bb9\u7684\u97f3\u6a02\u4eba\uff1a```\nSELECT artist_name,\u00a0 \u00a0 \u00a0 \u00a0artist_gender,\u00a0 \u00a0 \u00a0 \u00a0artist_area,\u00a0 \u00a0 \u00a0 \u00a0ARRAY(SELECT artist_credit_name_name\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0FROM UNNEST(recordings_by_artists_dataflow_nested.artist_recordings)) AS artist_credit_name_name,\u00a0 \u00a0 \u00a0 \u00a0ARRAY(SELECT recording_name\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0FROM UNNEST(recordings_by_artists_dataflow_nested.artist_recordings)) AS recording_name\u00a0FROM musicbrainz.recordings_by_artists_dataflow_nested,\u00a0 \u00a0 \u00a0 UNNEST(recordings_by_artists_dataflow_nested.artist_recordings) AS artist_recordings_structWHERE artist_recordings_struct.recording_name LIKE \"%Justin%\"LIMIT 1000;\n```\u5728\u8f38\u51fa\u4e2d\uff0c `artist_credit_name_name` \u548c `recording_name` \u986f\u793a\u7232\u53ef\u5c55\u958b\u7684\u5d4c\u5957\u884c\uff0c\u4f8b\u5982\uff1a| \u884c | artist_name  | artist_gender | artist_area | artist_credit_name_name | recording_name         |\n|:-----|:------------------|:----------------|:--------------|:--------------------------|:-----------------------------------------------|\n| 1 | Damonkenutz  | nan    | nan   | (1 row)     | 1\u00a0Yellowpants\u00a0(Justin\u00a0Martin\u00a0remix)   |\n| 3 | Fabian   | Male   | Germany  | (10+ rows)    | 1\u00a0Heatwave          |\n| . | nan    | nan    | nan   | nan      | 2\u00a0Starlight\u00a0Love        |\n| . | nan    | nan    | nan   | nan      | 3\u00a0Dreams\u00a0To\u00a0Wishes        |\n| . | nan    | nan    | nan   | nan      | 4\u00a0Last\u00a0Flight\u00a0(Justin\u00a0Faust\u00a0remix)    |\n| . | nan    | nan    | nan   | nan      | ...           |\n| 4 | Digital Punk Boys | nan    | nan   | (6 rows)     | 1\u00a0Come\u00a0True         |\n| . | nan    | nan    | nan   | nan      | 2\u00a0We\u00a0Are...\u00a0(Punkgirlz\u00a0remix\u00a0by\u00a0Justin\u00a0Famous) |\n| . | nan    | nan    | nan   | nan      | 3\u00a0Chaos\u00a0(short\u00a0cut)       |\n| . | nan    | nan    | nan   | nan      | ...           |\u5be6\u969b\u8f38\u51fa\u53ef\u80fd\u6703\u6709\u6240\u4e0d\u540c\uff0c\u56e0\u7232\u7d50\u679c\u672a\u6392\u5e8f\u3002\n## \u6e05\u7406\u7232\u907f\u514d\u56e0\u672c\u6559\u7a0b\u4e2d\u4f7f\u7528\u7684\u8cc7\u6e90\u5c0e\u81f4\u60a8\u7684 Google Cloud \u8cec\u865f\u7522\u751f\u8cbb\u7528\uff0c\u8acb\u522a\u9664\u5305\u542b\u9019\u4e9b\u8cc7\u6e90\u7684\u9805\u76ee\uff0c\u6216\u8005\u4fdd\u7559\u9805\u76ee\u4f46\u522a\u9664\u5404\u500b\u8cc7\u6e90\u3002\n### \u522a\u9664\u9805\u76ee- Titles in dynamic includes are not used anywhere, and we should avoid paying to translate them\n- **\u8b66\u544a** \uff1a\u522a\u9664\u9805\u76ee\u6703\u7522\u751f\u4ee5\u4e0b\u5f71\u97ff- **\u9805\u76ee\u4e2d\u7684\u6240\u6709\u5167\u5bb9\u90fd\u6703\u88ab\u522a\u9664\u3002** \u5982\u679c\u60a8\u5c07\u73fe\u6709\u9805\u76ee\u7528\u65bc\u672c\u6587\u6a94\u4e2d\u7684\u4efb\u52d9\uff0c\u5247\u522a\u9664\u8a72\u9805\u76ee\u5f8c\uff0c\u9084\u5c07\u522a\u9664\u60a8\u5df2\u5728\u8a72\u9805\u76ee\u4e2d\u5b8c\u6210\u7684\u4efb\u4f55\u5176\u4ed6\u5de5\u4f5c\u3002\n- **\u81ea\u5b9a\u7fa9\u9805\u76ee ID \u4e1f\u5931\u3002** \u5275\u5efa\u6b64\u9805\u76ee\u6642\uff0c\u60a8\u53ef\u80fd\u5275\u5efa\u4e86\u8981\u5728\u5c07\u4f86\u4f7f\u7528\u7684\u81ea\u5b9a\u7fa9\u9805\u76ee ID\u3002\u8981\u4fdd\u7559\u4f7f\u7528\u8a72\u9805\u76ee ID \u7684\u7db2\u5740\uff08\u4f8b\u5982`appspot.com`\u7db2\u5740\uff09\uff0c\u8acb\u522a\u9664\u9805\u76ee\u5167\u7684\u6240\u9078\u8cc7\u6e90\uff0c\u800c\u4e0d\u662f\u522a\u9664\u6574\u500b\u9805\u76ee\u3002\n- \u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\uff0c\u9032\u5165 **\u7ba1\u7406\u8cc7\u6e90** \u9801\u9762\u3002 [\u8f49\u5230\u201c\u7ba1\u7406\u8cc7\u6e90\u201d](https://console.cloud.google.com/iam-admin/projects?hl=zh-cn) \n- \u5728\u9805\u76ee\u5217\u8868\u4e2d\uff0c\u9078\u64c7\u8981\u522a\u9664\u7684\u9805\u76ee\uff0c\u7136\u5f8c\u9ede\u64ca **\u522a\u9664** \u3002\n- \u5728\u5c0d\u8a71\u6846\u4e2d\u8f38\u5165\u9805\u76ee ID\uff0c\u7136\u5f8c\u9ede\u64ca **\u95dc\u9589** \u4ee5\u522a\u9664\u9805\u76ee\u3002\n### \u9010\u500b\u522a\u9664\u8cc7\u6e90\u8acb\u6309\u7167\u76f8\u61c9\u6b65\u9a5f\u9010\u500b\u522a\u9664\u8cc7\u6e90\uff0c\u800c\u975e\u522a\u9664\u6574\u500b\u9805\u76ee\u3002- Titles in dynamic includes are not used anywhere, and we should avoid paying to translate them\n- \u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\uff0c\u524d\u5f80 Cloud Storage **\u5b58\u5132\u5206\u5340** \u9801\u9762\u3002 [\u9032\u5165\u201c\u5b58\u5132\u6876\u201d](https://console.cloud.google.com/storage/browser?hl=zh-cn) \n- \u9ede\u64ca\u8981\u522a\u9664\u7684\u5b58\u5132\u6876\u5c0d\u61c9\u7684\u8907\u9078\u6846\u3002\n- \u5982\u9700\u522a\u9664\u5b58\u5132\u6876\uff0c\u8acb\u9ede\u64cadelete **\u522a\u9664** \uff0c\u7136\u5f8c\u6309\u7167\u8aaa\u660e\u64cd\u4f5c\u3002- \u6253\u958b BigQuery \u7db2\u9801\u754c\u9762\u3002 [\u6253\u958b BIGQUERY](https://bigquery.cloud.google.com/?hl=zh-cn) \n- \u9078\u64c7\u60a8\u5728\u672c\u6559\u7a0b\u4e2d\u5275\u5efa\u7684 BigQuery \u6578\u64da\u96c6\u3002\n- \u9ede\u64ca **\u522a\u9664** \u3002\n## \u5f8c\u7e8c\u6b65\u9a5f\n- \u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u7232 BigQuery \u7de8\u5beb\u67e5\u8a62\u3002 [\u67e5\u8a62\u6578\u64da](https://cloud.google.com/bigquery/querying-data?hl=zh-cn) \u4ecb\u7d39\u77ad\u5982\u4f55\u904b\u884c\u540c\u6b65\u548c\u7570\u6b65\u67e5\u8a62\u4ee5\u53ca\u5982\u4f55\u5275\u5efa\u7528\u6236\u5b9a\u7fa9\u51fd\u6578 (UDF) \u7b49\u3002\n- \u77ad\u89e3 BigQuery \u8a9e\u6cd5\u3002BigQuery \u4f7f\u7528\u985e\u4f3c SQL \u7684\u8a9e\u6cd5\uff0c\u5982\u9700\u77ad\u89e3\u6b64\u8a9e\u6cd5\uff0c\u8acb\u53c3\u95b1 [\u67e5\u8a62\u53c3\u8003\uff08\u820a\u7248 SQL\uff09](https://cloud.google.com/bigquery/query-reference?hl=zh-cn) \u3002\n- \u63a2\u7d22\u6709\u95dc Google Cloud \u7684\u53c3\u8003\u67b6\u69cb\u3001\u5716\u8868\u548c\u6700\u4f73\u505a\u6cd5\u3002\u67e5\u770b\u6211\u5011\u7684 [Cloud Architecture Center](https://cloud.google.com/architecture?hl=zh-cn) \u3002", "guide": "Docs"}