{"title": "Docs - Optimize storage performance", "url": "https://cloud.google.com/architecture/framework/performance-optimization/storage", "abstract": "# Docs - Optimize storage performance\nLast reviewed 2023-07-14 UTC\nThis document in the [Google Cloud Architecture Framework](/architecture/framework) provides recommendations to help you optimize the performance of your storage resources in Google Cloud.\n", "content": "## Cloud Storage\nThis section provides best practices to help you optimize the performance of your [Cloud Storage](/storage) operations.\n### Assess bucket performance\nAssess the performance of your Cloud Storage buckets by using the [gsutil perfdiag](/storage/docs/gsutil/commands/perfdiag) command. This command tests the performance of the specified bucket by sending a series of read and write requests with files of different sizes. You can tune the test to match the usage pattern of your applications. Use the diagnostic report that the command generates to set performance expectations and identify potential bottlenecks.\n### Cache frequently accessed objects\nTo improve the read latency for frequently accessed objects that are publicly accessible, you can configure such objects to be cached. Although caching can improve performance, stale content could be served if a cache has the old version of an object.\n### Scale requests efficiently\nAs the request rate for a bucket increases, Cloud Storage automatically increases the I/O capacity for the bucket by distributing the request load across multiple servers. To achieve optimal performance when scaling requests, follow the [best practices](/storage/docs/request-rate#best-practices) for ramping up request rates and distributing load evenly.\n### Enable multithreading and multiprocessing\nWhen you use `gsutil` to upload numerous small files, you can improve the performance of the operation by using the `-m` option. This option causes the upload request to be implemented as a batched, parallel (that is, multithreaded and multiprocessing) operation. Use this option only when you perform operations over a fast network connection. For more information, see the documentation for the `-m` option in [Global Command-Line Options](/storage/docs/gsutil/addlhelp/GlobalCommandLineOptions#options) .\n### Upload large files as composites\nTo upload large files, you can use a strategy called . With this strategy, the large file is split into chunks, which are uploaded in parallel and then recomposed in the cloud. Parallel composite uploads can be faster than regular upload operations when network bandwidth and disk speed are not limiting factors. However, this strategy has some limitations and cost implications. For more information, see [Parallel composite uploads](/storage/docs/uploads-downloads#parallel-composite-uploads) .\n## Persistent disks and local SSDs\nThis section provides best practices to help you optimize the performance of your [Persistent Disks](/persistent-disk) and [Local SSDs](/local-ssd) that are attached to Compute Engine VMs.\nThe performance of persistent disks and local SSDs depends on the disk type and size, VM machine type, and number of vCPUs. Use the following guidelines to manage the performance of your persistent disks and local SSDs:\n- When you provision block storage for your VMs, choose disk types and disk sizes that are appropriate for your workload. For more information, see [Configure disks to meet performance requirements](/compute/docs/disks/performance) .\n- Benchmark the block storage performance. For more information, see the following documentation:- [Benchmarking persistent disk performance](/compute/docs/disks/benchmarking-pd-performance) \n- [Benchmarking local SSD performance](/compute/docs/disks/benchmarking-local-ssd-performance) \n- Optimize the performance of your persistent disks and local SSDs. For more information, see the following documentation:- [Optimizing persistent disk performance](/compute/docs/disks/optimizing-pd-performance) \n- [Optimizing local SSD performance](/compute/docs/disks/optimizing-local-ssd-performance) \n## Filestore\nThis section provides best practices to help you optimize the performance of your [Filestore](/filestore) instances. You can use Filestore to provision fully managed Network File System (NFS) file servers for Compute Engine VMs and GKE clusters.\n- When you provision a Filestore instance, choose a [service tier](/filestore/docs/performance#expected_performance) that meets the performance and capacity requirements of your workload.\n- For client VMs that run cache-dependent workloads, use a machine type that helps optimize the network performance of the Filestore instance. For more information, see [Recommended client machine type](/filestore/docs/performance#client-machine) .\n- To optimize the performance of Filestore instances for client VMs that run Linux, Google recommends specific NFS mount settings. For more information, see [Linux client mount options](/filestore/docs/performance#linux_client_mount_options) .\n- To minimize network latency, provision your Filestore instances in [regions and zones](/filestore/docs/regions) that are close to where you plan to use the instances.\n- Monitor the performance of your Filestore instances, and set up alerts by using [Cloud Monitoring](/filestore/docs/monitoring-instances) .## What's next\nReview the best practices for optimizing the performance of your compute, networking, database, and analytics resources:\n- [Optimize compute performance](/architecture/framework/performance-optimization/compute) .\n- [Optimize networking performance](/architecture/framework/performance-optimization/networking) .\n- [Optimize database performance](/architecture/framework/performance-optimization/databases) .\n- [Optimize analytics performance](/architecture/framework/performance-optimization/analytics) .", "guide": "Docs"}