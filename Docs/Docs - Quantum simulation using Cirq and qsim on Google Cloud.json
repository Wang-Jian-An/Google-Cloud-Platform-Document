{"title": "Docs - Quantum simulation using Cirq and qsim on Google Cloud", "url": "https://cloud.google.com/architecture/quantum-simulation-on-google-cloud-with-cirq-qsim", "abstract": "# Docs - Quantum simulation using Cirq and qsim on Google Cloud\nThis tutorial demonstrates how to simulate a quantum circuit by using [Cirq](https://github.com/quantumlib/Cirq) and [qsim](https://quantumai.google/qsim) on Google Cloud.\nIn this tutorial, you learn how to install Cirq and qsim in a [Docker container](https://www.docker.com/resources/what-container) on a [Compute Engine](/compute) virtual machine (VM) instance and view the results. You then run simulations of a quantum circuit in a [Project Jupyter](https://jupyter.org/) environment and interactively in the container. You also learn how to enable [Colaboratory (Colab)](https://colab.sandbox.google.com/notebooks/intro.ipynb) as a notebook platform.\nA fully capable [quantum computer](https://wikipedia.org/wiki/Quantum_computing) will not be generally available for several years. However, quantum circuit simulation is a viable alternative. This tutorial shows how to obtain the computing resources that are required to simulate a large quantum circuit.\nThe tutorial is for quantum simulation practitioners. It assumes you're familiar with the fundamentals of quantum computing and the simulation of quantum circuits, and with the limitations imposed by the memory requirements of large quantum circuits.\nExplaining the concepts of quantum computing is beyond the scope of this tutorial. Excellent resources on that subject include the [Cirq section of Google's Quantum AI website](https://quantumai.google/cirq) and the textbook [Quantum Computation and Quantum Information](https://www.cambridge.org/core/books/quantum-computation-and-quantum-information/01E10196D0A682A6AEFFEA52D53BE9AE) by Michael A. Nielsen and Isaac L. Chuang.", "content": "## Objectives\n- Create a container-optimized VM.\n- Provide a basic integration to the Colab notebook platform.\n- Run simulations in a Docker container that has Jupyter and qsim installed.\n- Run a sample circuit.\n## CostsIn this document, you use the following billable components of Google Cloud:- [Compute Engine](/compute/all-pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the Compute Engine API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=compute.googleapis.com) \n## Creating a Compute Engine VM instanceIn the following steps, you create a container-optimized VM instance that you use to run the qsim quantum simulations.- In the Google Cloud console, go to the Compute Engine **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- To create a VM instance, click **Create** : \n- On the **New VM instance** page, fill out the following options in sequence:- For **Name** , enter a descriptive name\u2014for example,`qsim-1`.\n- For **Region** and **Zone** , select options from the drop-down lists.This tutorial uses `us-east4` for the region and `us-east4-c` for the zone. Although your selection isn't important for this tutorial, you might account for latency and availability. For more information, see [Available regions and zones](/compute/docs/regions-zones#available) .\n- For **Machine configuration** , click **General purpose** , and then in the **Series** drop-down list, select **N2** .Quantum simulation requires powerful processors such as the N2, N1, and C2 processors. If you prefer another machine type, [other options are available](/blog/products/compute/choose-the-right-google-compute-engine-machine-type-for-you) .\n- For **Machine type** , select **n2-standard-16** .The `n2-standard-16` [machine type](/blog/products/compute/choose-the-right-google-compute-engine-machine-type-for-you) has 16 vCPUs and 64\u00a0GB of memory.At this point, the machine settings for this tutorial look similar to the following: \n- In the **Boot disk** section, click **Change** .- In the **Operating system** drop-down list, select [Container Optimized OS](/container-optimized-os/docs/concepts/features-and-benefits) .Leave the other settings as their default values.\n- Click **Select** . \n- For **Firewall** , select **Allow HTTP traffic** and **Allow HTTPS traffic** .\n- Click **Create** .\n## Connecting your VM to ColabThis tutorial focuses on how to run simulations on your Compute Engine VM by using Colab as your frontend interface. Colab lets you write and run Python code in your web browser. Colab has several benefits:- It requires no configuration.\n- It offers free access to GPUs.\n- It lets you share Jupyter notebooks while enabling all the security-related features of Google Google Drive.\nAt this point in the tutorial, you created a VM with sufficient resources to run your quantum simulation environment. To access this VM from Colab, you need to create a security-enhanced connection, which the following sections describe.\n### Activate gcloudTo connect your VM to Colab, you need to forward the default Jupyter port ( `8888` ) to your localhost. [Port forwarding](https://wikipedia.org/wiki/Port_forwarding) to a Google Cloud VM requires that you have the Google Cloud CLI installed on your local computer. The gcloud CLI lets you access the Google Cloud CLI. For more information, see the guide for [installing the gcloud CLI](/sdk/docs/install) .\nIn the following steps, you initialize the environment on your local computer to enable port forwarding from a VM instance on Google Cloud to your local machine. You run these commands from a terminal window on your local machine.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n```\n- In your local terminal window, set the project properties:```\n$ gcloud init\n```When you're prompted, enter the name of your Google Cloud project and the zone where you created your VM.\n- View the `gcloud` configuration:```\n$ gcloud config list\n```The output is similar to the following:```\nregion = us-east4\nzone = us-east4-c\n[core]\naccount = wellhello@gargle.com\ndisable_usage_reporting = False\nproject = quantum-22222\n```\n### Connect your local machine to your VM through port forwardingThe next step is to connect to your VM through port forwarding by using a `gcloud` command.- In your local terminal window, use the `gcloud` SSH command to connect to your VM with port `8888` forwarded to your local machine:```\n$ gcloud compute ssh INSTANCE_NAME -- -L 8888:localhost:8888\n```Replace `` with the name of your VM instance that you created for this tutorial.The command prompt from your VM is displayed:```\nwellhello@qsim-1 ~ $\n```\nFor detailed instructions on how to connect Colab to a VM through port forwarding, see the [Colab local runtimes guide](https://research.google.com/colaboratory/local-runtimes.html) .## Running simulations in your Docker containerAt this point in the tutorial, you can run simulations in your Docker container.\n### Run the container that has Jupyter and qsim installed\n- At the command prompt, start the container:```\n$ docker run -v `pwd`:/HOME_DIRECTORY -p 8888:8888 gcr.io/quantum-builds/github.com/quantumlib/jupyter_qsim:latest\n```Replace `` with the home directory of your VM instance\u2014for example, `homedir` .The output ends with lines similar to the following:```\n...\nTo access the notebook, open this file in a browser:\nfile:///root/.local/share/jupyter/runtime/nbserver-1-open.html\nOr copy and paste one of these URLs:\nhttp://e1f7a7cca9fa:8888/?token=aa16e1b6d3f51c58928037d34cc6854dac47347dd4c0eae5\nor http://127.0.0.1:8888/?token=aa16e1b6d3f51c58928037d34cc6854dac47347dd4c0eae5\n```If you get an error that permission is denied, you might need to [run Docker with the sudo command](https://docs.docker.com/engine/reference/run/#general-form) .\n- Copy the last URL in the output, and then replace `127.0.0.1` with `localhost` .Save this revised URL for steps that come later in this tutorial. This URL points to your local runtime, which is running as a Docker container on your VM.\n### Connect Colab to your local runtimeAt this point, you have a VM running a Docker container with a Jupyter server. The Jupyter port ( `8888` ) is forwarded to your local machine. The final step is to connect Colab to the local `8888` port as if the Jupyter runtime was on your local machine.\nIn the following steps, you get a notebook running in Colab, with the runtime hosted on your container VM:- In a web browser, open the [Get started with qsimcirq](https://colab.research.google.com/github/quantumlib/qsim/blob/master/docs/tutorials/qsimcirq.ipynb) Colab notebook.\n- After the notebook loads, click **Connect** , and then click **Connect to local runtime** : \n- In the **Local connection settings** dialog, paste the URL that you saved in the preceding section into the **Backend URL** field, and then click **Connect** : After you receive the following success message, you can run the cells in the notebook: \n### Simulate a large quantum circuitThis tutorial provides a large circuit as a simulation example. The circuit has 32 qubits and a depth of 14 gate operations.- Before you simulate the circuit, make sure you followed the steps to [connect Colab to your local runtime](#colab-local-runtime) . If you use the default runtime, the circuit fails.\n- In Colab, open the [Simulate large quantumcircuit](https://colab.research.google.com/github/quantumlib/qsim/blob/master/docs/tutorials/q32d14.ipynb) notebook.The notebook contains guidance for simulating the circuit.\n## Connecting to Jupyter directlyIf you prefer not to use Colab to simulate the circuit, you can use the Jupyter server on your VM.\nAfter you forward port `8888` and start the container on your Compute Engine VM, you can connect directly to Jupyter without using Colab. This approach doesn't give you access to some convenient features in Colab. However, it can be helpful for some use cases\u2014for example, if you're restricted from using Drive to store code.- In a web browser on your local machine, paste the URL that you copied when you connected Colab to your local runtime.The URL looks similar to the following:`http://127.0.0.1:8888/?token=7191178ae9aa4ebe1698b07bb67dea1d289cfd0e0b960373`The Jupyter interface is displayed: \n- Go to **qsim > docs > tutorials** .The `qsimcirq.ipynb` notebook is displayed: \n- To load the `qsimcirq.ipynb` notebook, click the filename.You can run cells such as the following: If you want to save and modify the notebook, you can do the following:- If you plan to keep the VM that you created for this tutorial, then you can save the notebook to your VM. Click **File > Save As** , and then save the file to the home directory of your VM.\n- If you plan to delete your VM, you can download the notebook from your VM or save it directly from your web browser: ## Running a sample circuit interactivelyIf you prefer not to use a notebook environment for your simulation, you can interact directly with the Python interpreter that's running in your Docker container. In the following sections, you connect to the container, and then you build and simulate a virtual quantum circuit.\n### Connect to your Docker container\n- In your local terminal window, open a second shell session to your VM:```\n$ gcloud compute ssh INSTANCE_NAME\n```Replace `` with the name of the VM that you created for this tutorial. This tutorial uses `qsim-1` .\n- Find the container ID:```\n$ docker ps\n```The output is similar to the following:```\nCONTAINER ID  IMAGE          COMMAND     CREATED    STATUS    PORTS     NAMES\n8ab217d640a3  gcr.io/quantum-291919/jupyter_qsim:latest \"jupyter-notebook --\u2026\" 2 hours ago   Up 2 hours   0.0.0.0:8888->8888/tcp dazzling_lovelace\n```The container ID is a UID that looks similar to `8ab217d640a3` . Copy the ID, which you need for the next step.\n- Connect to the container:```\n$ docker exec -it CONTAINER_ID /bin/bash\n```Replace `` with the value that you copied in the preceding step.\n### Build the circuit\n- In the second local shell session that you opened in the preceding section, run Python 3:```\n$ python3\n```\n- In the VM window, import the Cirq and qsim libraries and build the circuit:```\nimport cirqimport qsimcirqqubit = cirq.GridQubit(0, 0) \u00a0# Pick a qubit.# Create a circuitcircuit = cirq.Circuit(\u00a0 \u00a0 cirq.X(qubit)**0.5, \u00a0# Square root of NOT.)print(\"Circuit:\")print(circuit)\n```The output is the following:```\n(0, 0): \u2500\u2500\u2500X^0.5\u2500\u2500\u2500\n```\n### Run the circuitThe following step demonstrates what the circuit does when you use qsim for the simulation:- In your VM terminal window, run the simulation:```\nsimulator = qsimcirq.QSimSimulator()result = simulator.simulate(circuit)print(\"Result:\")print(result)\n```The output is the following:```\nmeasurements: (no measurements)\noutput vector: (0.5+0.5j)|0\u27e9 + (0.5-0.5j)|1\u27e9\n```\n### Exit the container\n- To exit the container, press twice.The output is similar to the following:```\n[root@79804d33f250 /]# exit\n```\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this tutorial, do the following:- Delete the project.\n- Stop or delete the VM.\n### Delete the projectUnless you want to continue using the Google Cloud project that you created for this tutorial, we recommend deleting the project.- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n### Stop or delete the VMTo stop or delete the VM used in this tutorial, do the following:- In the Google Cloud console, go to the Compute Engine **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Select the VM that you want to stop or delete.\n- Do one of the following:- To stop the VM, clickstop **Stop** .\n- To delete the VM, clickdelete **Delete** .## What's next\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Docs"}