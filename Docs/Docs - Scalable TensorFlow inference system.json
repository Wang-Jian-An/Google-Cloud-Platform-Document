{"title": "Docs - Scalable TensorFlow inference system", "url": "https://cloud.google.com/architecture/scalable-tensorflow-inference-system", "abstract": "# Docs - Scalable TensorFlow inference system\nLast reviewed 2023-11-02 UTC\nThis reference architecture series describes how you can design and deploy a high performance online inference system for deep learning models by using an [NVIDIA\u00ae T4 GPU](https://www.nvidia.com/en-us/data-center/tesla-t4/) and [Triton Inference Server](https://developer.nvidia.com/triton-inference-server) .\nUsing this architecture, you can create a system that uses machine learning models and can leverage GPU acceleration. [Google Kubernetes Engine (GKE)](/kubernetes-engine) lets you scale the system according to a growing number of clients. You can improve throughput and reduce the latency of the system by applying the optimization techniques that are described in this series.\nThis series is intended for developers who are familiar with Google Kubernetes Engine and machine learning (ML) frameworks, including TensorFlow and [NVIDIA TensorRT](https://developer.nvidia.com/tensorrt) .\nThe following documents are included in this series:\n- Reference architecture: Scalable TensorFlow inference system (this document)\n- Deployment: [Deploy a scalable TensorFlow inference system](/architecture/scalable-tensorflow-inference-system/deployment) \n- Measure and tune deployment: [Measure and tune performance of a TensorFlow inference system](/architecture/scalable-tensorflow-inference-system/measure-deployment) ", "content": "## Architecture\nThe following diagram shows the architecture of the inference system.\nThis architecture includes the following components:\n- **Cloud Load Balancing:** Sends the request traffic to the GKE cluster that's closest to the client.\n- **GKE cluster:** Contains the cluster nodes and monitoring servers. If clients send requests from multiple regions, you can deploy GKE clusters to multiple regions. You [deploy the Locust load testing tool](/architecture/scalable-tensorflow-inference-system/measure-deployment#deploy-load-testing-tool) on the same cluster.\n- **Cluster nodes with GPU accelerator:** Contains Triton Inference Server Pods; a single Pod is deployed for each node (a single GPU cannot be shared with multiple Pods).\n- **Triton Inference Server:** Serves ResNet-50 models that you create. The server provides an inference service through an HTTP or [gRPC](https://grpc.io/) endpoint. The inference service allows remote clients to request inferencing for any model that's being managed by the server.\n- **NVIDIA T4:** Improves inference performance. There must be one NVIDIA T4 for each Pod. This GPU features [Tensor Cores](https://www.nvidia.com/en-us/data-center/tensor-cores/) , which are specialized processing units that support and accelerate INT8 and FP16 calculations.\n- **Monitoring servers:** Collect metrics data on GPU utilization and memory usage from Triton. You use [Prometheus](https://prometheus.io/) for event monitoring and alerting. You use [Grafana](https://grafana.com/) to visualize and analyze performance data stored in Prometheus.## Design considerations\nThe following guidelines can help you to develop an architecture that meets your organization's requirements for reliability and performance.\n### Reliability\nThis architecture uses [GKE](/kubernetes-engine) for scalability and flexible resource management.\nBy deploying the system on GKE, you can scale the system according to the number of clients. You can deploy GKE clusters to multiple regions and increase the number of nodes in the cluster.\n### Performance optimization\nWhen you [tune performance](/architecture/scalable-tensorflow-inference-system/measure-deployment) , follow these general guidelines:\n- Define performance metrics and target performance according to the use case of the system.\n- Measure baseline performance before applying performance tuning.\n- Apply one change and observe the improvement. If you apply multiple changes at a time, you cannot tell which change caused the improvement.\n- Collect appropriate metrics to understand performance characteristics and decide on a next action for performance tuning.\nUsing the guidelines, you measure the performance improvement made by the following factors:\n- **TensorRT (graph optimization).** TensorRT applies graph optimizations for NVIDIA T4. For example, it automatically modifies deep learning models so that they can be processed with Tensor Core. First, you observe the inference performance without TensorRT as a baseline. Then, you observe the performance improvement after applying the TensorRT graph optimization.\n- **FP16 conversion.** NVIDIA T4 supports FP32 (32-bit floating point) and FP16 for floating-point calculations. When you convert the precision of variables from the default FP32 to FP16, you can improve the inference performance.\n- **INT8 quantization.** Quantization is an optimization technique for deep learning models that improves the computation performance on GPUs. NVIDIA T4 supports INT8 (8-bit integer) variable types for quantization. Compared to the conversion to FP16, INT8 quantization can provide improved performance but potentially reduce accuracy. However, TensorRT uses a calibration process that minimizes the information loss during calculations.\n- **Batch size and number of instance groups.** You can adjust the batch size and number of instance groups by using Triton. For example, when you set a batch size to 16, inference requests are stored in a batch queue and 16 requests are processed as a single batch. Likewise, if you set a number of instance groups to 4, multiple requests are processed with 4 threads in parallel. In this scenario, there are 16 requests in each batch, and 4 threads processing in parallel, which means that 64 requests are processed simultaneously on a single GPU.Increasing the number of instance groups allows TensorRT to achieve higher GPU utilization. At the same time, by adjusting the batch size, you let Triton optimize calculations on the GPU. For example, it can combine multiple calculations from different requests into a single computational task on Tensor Cores.## Deployment\nTo deploy this architecture, see [Deploy a scalable TensorFlow inference system](/architecture/scalable-tensorflow-inference-system/deployment) .\nTo measure and tune the deployment, see [Measure and tune performance of a TensorFlow inference system](/architecture/scalable-tensorflow-inference-system/measure-deployment) .\n## What's next\n- Learn more about [Google Kubernetes Engine (GKE)](/kubernetes-engine) .\n- Learn more about [Cloud Load Balancing](/load-balancing) .\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .", "guide": "Docs"}