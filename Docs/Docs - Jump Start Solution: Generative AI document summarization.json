{"title": "Docs - Jump Start Solution: Generative AI document summarization", "url": "https://cloud.google.com/architecture/ai-ml/generative-ai-document-summarization", "abstract": "# Docs - Jump Start Solution: Generative AI document summarization\nLast reviewed 2023-07-21 UTC\nThis guide helps you understand, deploy, and use the [Generative AI document summarization](https://console.cloud.google.com/products/solutions/details/generative-ai-document-summarization) solution, which leverages Vertex AI Generative AI Large Language Models (LLM) to process and summarize documents on demand.\nThis solution deploys a pipeline that is triggered when you add a new PDF document to your Cloud Storage bucket. The pipeline extracts text from your document, creates a summary from the extracted text, and stores the summary in a database for you to view and search.\nThis guide is intended for developers who have some background with large language models. It assumes that you're familiar with basic cloud concepts, though not necessarily Google Cloud. Experience with Terraform is helpful.\n**Note:** This solution helps you explore the capabilities of Google Cloud. The solution is not intended to be used as is for production environments. For information about designing and setting up production-grade environments in Google Cloud, see [Landing zone design in Google Cloud](/architecture/landing-zones) and [Google Cloud setup checklist](/docs/enterprise/setup-checklist) .\n", "content": "## Objectives\nThis solution guide helps you do the following:\n- Understand how the Generative AI document summarization application works.\n- Deploy an application that orchestrates the documentation summarization process.\n- Trigger the pipeline with a PDF upload and view a generated summary.## Products used\nThis section describes the products that the solution uses.\n| Component    | Product description                                                 | Purpose in this solution                  |\n|:------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------|\n| Cloud Storage   | An enterprise-ready service that provides low-cost, no-limit object storage for diverse data types.                             | Stores the PDF documents and extracted text.             |\n| Eventarc    | A service that manages the flow of state changes (events) between decoupled microservices, routing events to various destinations while managing delivery, security, authorization, observability, and error handling. | Watches for new documents in the Cloud Storage bucket and triggers an event in Cloud Functions. |\n| Cloud Functions   | A lightweight serverless compute service that lets you create single-purpose, standalone functions that respond to Google Cloud events without the need to manage a server or runtime environment.      | Orchestrates the document processing steps.              |\n| Vision AI    | Fully managed development environment to create your own computer vision applications or derive insights from images and videos.                      | Extracts the text from the PDF document using Optical Character Recognition (OCR).    |\n| Vertex AI Generative AI | Generative AI support on Vertex AI gives you access to Google's large generative AI models so you can test, tune, and deploy them for use in your AI-powered applications.            | Creates a summary from the extracted text stored in Cloud Storage.        |\n| BigQuery    | A fully managed, highly scalable data warehouse with built-in machine learning capabilities.                               | Handles the storage of the generated summary.             |\n## Cost\nFor an estimate of the cost of the Google Cloud resources that the generative AI document summarization solution uses, see the precalculated estimate in the [Google Cloud Pricing Calculator](https://cloud.google.com/products/calculator#id=78888c9b-02ac-4130-9327-fecd7f4cfb11) .\nUse the estimate as a starting point to calculate the cost of your deployment. You can modify the estimate to reflect any configuration changes that you plan to make for the resources that are used in the solution.\nThe precalculated estimate is based on assumptions for certain factors, including the following:\n- The Google Cloud locations where the resources are deployed.\n- The amount of time that the resources are used.\n- The amount of data stored in Cloud Storage.\n- The number of times the document summarization application is invoked.## Architecture\nThis solution deploys a document summarization application using code that already exists. The following diagram shows the architecture of the application infrastructure:\nYou can invoke the application in two ways: through the console tutorial or through a Jupyter notebook.\n### Request flow\nThe request processing flow of the document summarization application depends on how users invoke the service. The following steps are numbered as shown in the preceding architecture diagram.\nYou can start the document summarization application in two ways:\n- Follow a tutorial on a Jupyter notebook:1. Upload a PDF \u2014 either through Vertex AI Workbench or Colaboratory.2. The uploaded PDF file is sent to a function running on Cloud Functions. This function runs the document summarization process.3. The Cloud Functions function uses Vision AI to extract all text from the PDF file.4. The Cloud Functions function stores the extracted text inside a Cloud Storage bucket.5. The Cloud Functions function uses Vertex AI PaLM API to summarize the extracted text.6. The Cloud Functions function stores the textual summaries of PDFs inside a BigQuery table.\n- Interact directly with the Google Cloud services:7. Upload a PDF file directly to a Cloud Storage bucket \u2014 for instance, through the Google Cloud console or Google Cloud CLI. This upload triggers Eventarc to begin the Document Processing phase.8. As a result of the direct upload to Cloud Storage, Eventarc triggers the Document Processing phase (steps 3-6), handled by Cloud Functions.## Deploy the solution\nThis section guides you through the process of deploying the solution.\n### Create or choose a Google Cloud project\nWhen you deploy the solution, you choose the [Google Cloud project](/resource-manager/docs/creating-managing-projects) where the resources are deployed. When you're deciding whether to use an existing project or to create a new project, consider the following factors:\n- If you create a project for the solution, then when you no longer need the deployment, you can delete the project and avoid continued billing. If you use an existing project, you must delete the deployment when you no longer need it.\n- Using a new project can help avoid conflicts with previously provisioned resources, such as resources that are used for production workloads.\nIf you want to deploy the solution in a new project, create the project you begin the deployment.\nTo create a project, complete the following steps:\n- In the Google Cloud console, go to the project selector page. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- To begin creating a   Google Cloud project, click **Create project** .\n- Name your project. Make a note of your generated project ID.\n- Edit the other fields as needed.\n- To create the project, click **Create** .### Get the required IAM permissions\nTo start the deployment process, you need the Identity and Access Management (IAM) permissions that are listed in the following table. If you have the `roles/owner` [basic role](/iam/docs/understanding-roles#basic) for the project in which you plan to deploy the solution, then you already have all the necessary permissions. If you don't have the `roles/owner` role, then ask your administrator to grant these permissions (or the roles that include these permissions) to you.\n| IAM permission required       | Predefined role that includes the required permissions  |\n|:--------------------------------------------------|:------------------------------------------------------------|\n| serviceusage.services.enable      | Service Usage Admin (roles/serviceusage.serviceUsageAdmin) |\n| iam.serviceAccounts.create      | Service Account Admin (roles/iam.serviceAccountAdmin)  |\n| resourcemanager.projects.setIamPolicy    | Project IAM Admin (roles/resourcemanager.projectIamAdmin) |\n| config.deployments.create config.deployments.list | Cloud Infrastructure Manager Admin (roles/config.admin) |\nWhen you initiate the deployment process, a [service account](/iam/docs/service-accounts) is created to deploy the solution on your behalf (and to delete the deployment later if you choose). This service account is assigned certain IAM permissions ; that is, the permissions are revoked automatically after the solution deployment and deletion operations are completed. Google recommends that after you delete the deployment, you delete the service account, as described later in this guide.### Choose a deployment method\nTo help you deploy this solution with minimal effort, a Terraform configuration is provided in GitHub. The Terraform configuration defines all the Google Cloud resources that are required for the solution.\nYou can deploy the solution by using one of the following methods:\n- **Through the console** : Use this method if you want to try the solution with the default configuration and see how it works. Cloud Build deploys all the resources that are required for the solution. When you no longer need the deployed solution, you can delete it through the console. Any resources that you create after you deploy the solution might need to be deleted separately.To use this deployment method, follow the instructions in [Deploy through the console](#deploy-from-console) .\n- **Using the Terraform CLI** : Use this method if you want to customize the solution or if you want to automate the provisioning and management of the resources by using the infrastructure as code (IaC) approach. Download the Terraform configuration from GitHub, optionally customize the code as necessary, and then deploy the solution by using the Terraform CLI. After you deploy the solution, you can continue to use Terraform to manage the solution.To use this deployment method, follow the instructions in [Deploy using the Terraform CLI](#deploy-using-terraform) .\n### Deploy through the console\nComplete the following steps to deploy the preconfigured solution.\n**Note:** If you want to customize the solution or automate the provisioning and management of the solution by using the infrastructure as code (IaC) approach, then see [Deploy using the Terraform CLI](#deploy-using-terraform) .\n- In the Google Cloud Jump Start Solutions catalog, go to the **Generative AI document summarization** solution. [Go to the Generative AI document summarization solution](https://console.cloud.google.com/products/solutions/details/generative-ai-document-summarization) \n- Review the information that's provided on the page, such as the estimated cost of the solution and the estimated deployment time.\n- When you're ready to start deploying the solution, click **Deploy** .A step-by-step interactive guide is displayed.\n- Complete the steps in the interactive guide.Note the name that you enter for the deployment. This name is required later when you delete the deployment.When you click **Deploy** , the **Solution deployments** page is displayed. The **Status** field on this page shows **Deploying** .\n- Wait for the solution to be deployed.If the deployment fails, the **Status** field shows **Failed** . You can use the Cloud Build log to diagnose the errors. For more information, see [Errors when deploying through the console](#console-deploy-errors) .After the deployment is completed, the **Status** field changes to **Deployed** .\nNext, to try the solution out yourself, see [Explore the solution](#explore-solution) .\nWhen you no longer need the solution, you can delete the deployment to avoid continued billing for the Google Cloud resources. For more information, see [Delete the deployment](#delete-deployment) .\n### Deploy using the Terraform CLI\nThis section describes how you can customize the solution or automate the provisioning and management of the solution by using the Terraform CLI. Solutions that you deploy by using the Terraform CLI are not displayed in the **Solution deployments** page in the Google Cloud console.\n**Note:** If you want to deploy the solution with the default configuration to see how it works, then follow the instructions in [Deploy through the console](#deploy-from-console) .\nYou can run Terraform either in Cloud Shell or on your local host. This guide describes how to run Terraform in Cloud Shell, which has Terraform preinstalled and configured to authenticate with Google Cloud.\nThe Terraform code for this solution is available in a GitHub repository.\n- Clone the GitHub repository to Cloud Shell. [](https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https://github.com/GoogleCloudPlatform/terraform-gen-ai-document-summarization) A prompt is displayed to confirm downloading the GitHub repository to Cloud Shell.\n- Click **Confirm** .Cloud Shell is launched in a separate browser tab, and the Terraform code is downloaded to the `$HOME/cloudshell_open` directory of your Cloud Shell environment.\n- In Cloud Shell, check whether the current working directory is `$HOME/cloudshell_open/terraform-gen-ai-document-summarization/` . This is the directory that contains the Terraform configuration files for the solution. If you need to change to that directory, run the following command:```\ncd $HOME/cloudshell_open/terraform-gen-ai-document-summarization/\n```\n- Initialize Terraform by running the following command:```\nterraform init\n```Wait until you see the following message:```\nTerraform has been successfully initialized!\n```The Terraform code that you downloaded includes variables that you can use to customize the deployment based on your requirements. For example, you can specify the Google Cloud project and the region where you want the solution to be deployed.\n- Make sure that the current working directory is `$HOME/cloudshell_open/terraform-gen-ai-document-summarization/` . If it isn't, go to that directory.\n- In the same directory, create a text file named `terraform.tfvars` .\n- In the `terraform.tfvars` file, copy the following code snippet, and set values for the required variables.- Follow the instructions that are provided as comments in the code snippet.\n- This code snippet includes only the variables for which youset values. The Terraform configuration includes other variables that have default values. To review all the variables and the default values, see the`variables.tf`file that's available in the`$HOME/cloudshell_open/terraform-gen-ai-document-summarization/`directory.\n- Make sure that each value that you set in the`terraform.tfvars`file matches the variable [type](https://www.terraform.io/docs/language/values/variables.html#type-constraints) as declared in the`variables.tf`file. For example, if the type that\u2019s defined for a variable in the`variables.tf`file is`bool`, then you must specify`true`or`false`as the value of that variable in the`terraform.tfvars`file.\n```\n# This is an example of the terraform.tfvars file.# The values in this file must match the variable types declared in variables.tf.# The values in this file override any defaults in variables.tf.# ID of the project in which you want to deploy the solutionproject_id = \"PROJECT_ID\"\n```- Make sure that the current working directory is `$HOME/cloudshell_open/terraform-gen-ai-document-summarization/` . If it isn't, go to that directory.\n- Verify that the Terraform configuration has no errors:```\nterraform validate\n```If the command returns any errors, make the required corrections in the configuration and then run the `terraform validate` command again. Repeat this step until the command returns the following message:```\nSuccess! The configuration is valid.\n```\n- Review the resources that are defined in the configuration:```\nterraform plan\n```\n- If you didn't create the `terraform.tfvars` file as described earlier, Terraform prompts you to enter values for the variables that don't have default values. Enter the required values.The output of the `terraform plan` command is a list of the resources that Terraform provisions when you apply the configuration.If you want to make any changes, edit the configuration and then run the `terraform validate` and `terraform plan` commands again.When no further changes are necessary in the Terraform configuration, deploy the resources.\n- Make sure that the current working directory is `$HOME/cloudshell_open/terraform-gen-ai-document-summarization/` . If it isn't, go to that directory.\n- Apply the Terraform configuration:```\nterraform apply\n```\n- If you didn't create the `terraform.tfvars` file as described earlier, Terraform prompts you to enter values for the variables that don't have default values. Enter the required values.Terraform displays a list of the resources that will be created.\n- When you're prompted to perform the actions, enter `yes` .Terraform displays messages showing the progress of the deployment.If the deployment can't be completed, Terraform displays the errors that caused the failure. Review the error messages and update the configuration to fix the errors. Then run the `terraform apply` command again. For help with troubleshooting Terraform errors, see [Errors when deploying the solution using the Terraform CLI](#tf-deploy-errors) .After all the resources are created, Terraform displays the following message:```\nApply complete!\n```\nNext, you can [explore the solution](#explore-solution) and see how it works.\nWhen you no longer need the solution, you can delete the deployment to avoid continued billing for the Google Cloud resources. For more information, see [Delete the deployment](#delete-deployment) .\n## Explore the solution\nOnce the solution is deployed, you can upload a PDF document and view a summary of the document in BigQuery. You can do this either in the console or through a Jupyter notebook.\nTo view the Google Cloud resources that are deployed and their configuration, take an interactive tour in the console.\n [Start the tour](https://console.cloud.google.com/products/solutions/deployments?walkthrough_id=solutions-in-console--generative-ai--document-summarization-gcf_tour#step_index=1) \nSelect a platform to open the Jupyter notebook:- [Google Colab](https://colab.research.google.com/github/GoogleCloudPlatform/terraform-google-gen-ai-document-summarization/blob/main/notebook/gen_ai_jss.ipynb) \n- [GitHub](https://github.com/GoogleCloudPlatform/terraform-genai-doc-summarization/blob/main/notebook/gen_ai_jss.ipynb) ## Delete the deployment\nWhen you no longer need the solution deployment, to avoid continued billing for the resources that you created, delete the deployment.\n### Delete through the console\nUse this procedure if you deployed the solution through the console.\n- In the Google Cloud console, go to the **Solution deployments** page. [Go to Solution deployments](https://console.cloud.google.com/products/solutions/deployments) \n- Select the project that contains the deployment that you want to delete.\n- Locate the deployment that you want to delete.\n- Click more_vert **Actions** and then select **Delete** .\n- Enter the name of the deployment and then click **Confirm** .The **Status** field shows **Deleting** .If the deletion fails, see the troubleshooting guidance in [Error when deleting a deployment](#error-deleting-deployment) .\nWhen you no longer need the Google Cloud project that you used for the solution, you can delete the project. For more information, see [Optional: Delete the project](#delete-project) .\n### Delete using the Terraform CLI\nUse this procedure if you deployed the solution by using the Terraform CLI.\n- In Cloud Shell, make sure that the current working directory is `$HOME/cloudshell_open/terraform-gen-ai-document-summarization/` . If it isn't, go to that directory.\n- Remove the resources that were provisioned by Terraform:```\nterraform destroy\n```Terraform displays a list of the resources that will be destroyed.\n- When you're prompted to perform the actions, enter `yes` .Terraform displays messages showing the progress. After all the resources are deleted, Terraform displays the following message:```\nDestroy complete!\n```If the deletion fails, see the troubleshooting guidance in [Error when deleting a deployment](#error-deleting-deployment) .\nWhen you no longer need the Google Cloud project that you used for the solution, you can delete the project. For more information, see [Optional: Delete the project](#delete-project) .\n### Optional: Delete the project\nIf you deployed the solution in a new Google Cloud project, and if you no longer need the project, then delete it by completing the following steps:\n**Caution:** If you delete a project, all the resources in the project are permanently deleted.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you want to delete, and then  click **Delete** .\n- At the prompt, type the project ID, and then click **Shut down** .\nIf you decide to retain the project, then delete the service account that was created for this solution, as described in the next section.\n### Optional: Delete the service account\nIf you deleted the project that you used for the solution, then skip this section.\nAs mentioned earlier in this guide, when you deployed the solution, a service account was created on your behalf. The service account was assigned certain IAM permissions ; that is, the permissions were revoked automatically after the solution deployment and deletion operations were completed, but the service account isn't deleted. Google recommends that you delete this service account.\n- If you deployed the solution through the Google Cloud console, go to the [Solution deployments](https://console.cloud.google.com/products/solutions/deployments) page. (If you're already on that page, refresh the browser.) A process is triggered in the background to delete the service account. No further action is necessary.\n- If you deployed the solution by using the Terraform CLI, complete the following steps:- In the Google Cloud console, go to the **Service accounts** page. [Go to Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select the project that you used for the solution.\n- Select the service account that you want to delete.The email ID of the service account that was created for the solution is in the following format:```\ngoog-sc-DEPLOYMENT_NAME-NNN@PROJECT_ID.iam.gserviceaccount.com\n```The email ID contains the following values:- : the name of the deployment.\n- : a random 3-digit number.\n- : the ID of the project in which you deployed the solution.\n- Click **Delete** .\n## Troubleshoot errors\nThe actions that you can take to diagnose and resolve errors depend on the deployment method and the complexity of the error.\n### Errors when deploying through the console\nIf the deployment fails when you use the console, do the following:\n- Go to the **Solution deployments** page.If the deployment failed, the **Status** field shows **Failed** .\n- View the details of the errors that caused the failure:- Click more_vert **Actions** .\n- Select **View Cloud Build logs** .\n- Review the Cloud Build log and take appropriate action to resolve the issue that caused the failure.\n### Errors when deploying using the Terraform CLI\nIf the deployment fails when you use Terraform, the output of the `terraform apply` command includes error messages that you can review to diagnose the problem.\nThe examples in the following sections show deployment errors that you might encounter when you use Terraform.\nIf you create a project and then immediately attempt to deploy the solution in the new project, the deployment might fail with an error like the following:\n```\nError: Error creating Network: googleapi: Error 403: Compute Engine API has not\nbeen used in project PROJECT_ID before or it is disabled. Enable it by visiting\nhttps://console.developers.google.com/apis/api/compute.googleapis.com/overview?project=PROJECT_ID\nthen retry. If you enabled this API recently, wait a few minutes for the action\nto propagate to our systems and retry.\n```\nIf this error occurs, wait a few minutes and then run the `terraform apply` command again.\nWhen you run the `terraform apply` command, a `cannot assign requested address` error might occur, with a message like the following:\n```\nError: Error creating service account:\n Post \"https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts:\n dial tcp [2001:db8:ffff:ffff::5f]:443:\n connect: cannot assign requested address\n```\nIf this error occurs, run the `terraform apply` command again.\nIf you modify resource arguments in your `main.tf` file using unsupported values, an error like the following occurs:\n```\nError: Error creating Instance: googleapi: Error 400: Provided Redis version is\nnot supported: REDIS_5_X\n\u2502 com.google.apps.framework.request.StatusException:\n <eye3 title='INVALID_ARGUMENT'/>\n generic::INVALID_ARGUMENT: Provided Redis version is not supported: REDIS_5_X\nDetails:\n\u2502 [\u2502 {\n\u2502  \"@type\": \"type.googleapis.com/google.rpc.BadRequest\",\n\u2502  \"fieldViolations\": [\u2502  {\n\u2502   \"description\": \"Invalid value: REDIS_5_X\",\n\u2502   \"field\": \"instance.redis_version\"\n\u2502  }\n\u2502  ]\n\u2502 }\n\u2502 ]\n\u2502\n\u2502 with google_redis_instance.main,\n\u2502 on main.tf line 96, in resource \"google_redis_instance\" \"main\":\n\u2502 96: resource \"google_redis_instance\" \"main\" {\n```\nIn this case, the intent was to use Redis version 5, but the value specified for the `instance.redis_version` argument ( `REDIS_5_X` ) in the `main.tf` file is not valid. The correct value is `REDIS_5_0` , as enumerated in the [Memorystore REST API documentation](/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_version) .\n### Error when deleting a deployment\nIn certain cases, attempts to delete a deployment might fail:\n- After deploying a solution through the console, if you change any resource that was provisioned by the solution, and if you then try to delete the deployment, the deletion might fail. The **Status** field on the **Solution deployments** page shows **Failed** , and the Cloud Build log shows the cause of the error.\n- After deploying a solution by using the Terraform CLI, if you change any resource by using a non-Terraform interface (for example, the console), and if you then try to delete the deployment, the deletion might fail. The messages in the output of the`terraform destroy`command show the cause of the error.\nReview the error logs and messages, identify and delete the resources that caused the error, and then try deleting the deployment again.\nIf a console-based deployment doesn't get deleted and if you can't diagnose the error by using the Cloud Build log, then you can delete the deployment by using the Terraform CLI, as described in the next section.\n### Delete a console-based deployment by using the Terraform CLI\nThis section describes how to delete a console-based deployment if errors occur when you try to delete it through the console. In this approach, you download the Terraform configuration for the deployment that you want to delete and then use the Terraform CLI to delete the deployment.\n- Identify the region where the deployment's Terraform code, logs, and other data are stored. This region might be different from the region that you selected while deploying the solution.- In the Google Cloud console, go to the **Solution deployments** page. [Go to Solution deployments](https://console.cloud.google.com/products/solutions/deployments) \n- Select the project that contains the deployment that you want to delete.\n- In the list of deployments, identify the row for the deployment that you want to delete.\n- Click expand_more **View all rowcontent** .\n- In the **Location** column, note the location, as highlighted in the following example: \n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- Create environment variables for the project ID, region, and name of the deployment that you want to delete:```\nexport REGION=\"REGION\"export PROJECT_ID=\"PROJECT_ID\"export DEPLOYMENT_NAME=\"DEPLOYMENT_NAME\"\n```In these commands, replace the following:- : the location that you noted earlier in this procedure.\n- : the ID of the project where you deployed the solution.\n- : the name of the deployment that you want to delete.\n- Get the ID of the latest revision of the deployment that you want to delete:```\nexport REVISION_ID=$(curl \\\u00a0 \u00a0 -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0 -H \"Content-Type: application/json\" \\\u00a0 \u00a0 \"https://config.googleapis.com/v1alpha2/projects/${PROJECT_ID}/locations/${REGION}/deployments/${DEPLOYMENT_NAME}\" \\\u00a0 \u00a0 | jq .latestRevision -r)\u00a0 \u00a0 echo $REVISION_ID\n```The output is similar to the following:```\nprojects/PROJECT_ID/locations/REGION/deployments/DEPLOYMENT_NAME/revisions/r-0\n```\n- Get the Cloud Storage location of the Terraform configuration for the deployment:```\nexport CONTENT_PATH=$(curl \\\u00a0 \u00a0 -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0 -H \"Content-Type: application/json\" \\\u00a0 \u00a0 \"https://config.googleapis.com/v1alpha2/${REVISION_ID}\" \\\u00a0 \u00a0 | jq .applyResults.content -r)\u00a0 \u00a0 echo $CONTENT_PATH\n```The following is an example of the output of this command:```\ngs://PROJECT_ID-REGION-blueprint-config/DEPLOYMENT_NAME/r-0/apply_results/content\n```\n- Download the Terraform configuration from Cloud Storage to Cloud Shell:```\ngsutil cp -r $CONTENT_PATH $HOMEcd $HOME/content/\n```Wait until the `Operation completed` message is displayed, as shown in the following example:```\nOperation completed over 45 objects/268.5 KiB\n```\n- Initialize Terraform:```\nterraform init\n```Wait until you see the following message:```\nTerraform has been successfully initialized!\n```\n- Remove the deployed resources:```\nterraform destroy\n```Terraform displays a list of the resources that will be destroyed.If any warnings about undeclared variables are displayed, ignore the warnings.\n- When you're prompted to perform the actions, enter `yes` .Terraform displays messages showing the progress. After all the resources are deleted, Terraform displays the following message:```\nDestroy complete!\n```\n- Delete the deployment artifact:```\ncurl -X DELETE \\\u00a0 \u00a0 -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0 -H \"Content-Type: application/json\" \\\u00a0 \u00a0 \"https://config.googleapis.com/v1alpha2/projects/${PROJECT_ID}/locations/${REGION}/deployments/${DEPLOYMENT_NAME}?force=true&delete_policy=abandon\"\n```\n- Wait a few seconds and then verify that the deployment artifact was deleted:```\ncurl -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0 -H \"Content-Type: application/json\" \\\u00a0 \u00a0 \"https://config.googleapis.com/v1alpha2/projects/${PROJECT_ID}/locations/${REGION}/deployments/${DEPLOYMENT_NAME}\" \\\u00a0 \u00a0 | jq .error.message\n```If the output shows `null` , wait a few seconds and then run the command again.After the deployment artifact is deleted, a message as shown in the following example is displayed:```\nResource 'projects/PROJECT_ID/locations/REGION/deployments/DEPLOYMENT_NAME' was not found\n```\n### Submit feedback\nJump Start Solutions are for informational purposes only and are not officially supported products. Google may change or remove solutions without notice.\nTo troubleshoot errors, review the Cloud Build logs and the Terraform output.\nTo submit feedback, do the following:\n- For documentation, in-console tutorials, or the solution, use the **Send Feedback** button on the page.\n- For unmodified Terraform code, create issues in the [GitHub repository](https://github.com/GoogleCloudPlatform/terraform-gen-ai-document-summarization) . GitHub issues are reviewed on a best-effort basis and are not intended for general usage questions.\n- For issues with the products that are used in the solution, contact [Cloud Customer Care](/support-hub) .## What's next\n- Learn more about [Vertex AI Generative AI](/vertex-ai/docs/generative-ai/learn/overview) .", "guide": "Docs"}