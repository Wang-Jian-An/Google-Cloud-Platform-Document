{"title": "Docs - Cloud bursting pattern", "url": "https://cloud.google.com/architecture/hybrid-multicloud-patterns-and-practices/cloud-bursting-pattern?hl=zh-cn", "abstract": "# Docs - Cloud bursting pattern\nLast reviewed 2023-12-14 UTC\nInternet applications can experience extreme fluctuations in usage. While most enterprise applications don't face this challenge, many enterprises must deal with a different kind of bursty workload: batch or CI/CD jobs.\nThis architecture pattern relies on a redundant deployment of applications across multiple computing environments. The goal is to increase capacity, resiliency, or both.\nWhile you can accommodate bursty workloads in a data-center-based computing environment by overprovisioning resources, this approach might not be cost effective. With batch jobs, you can optimize use by stretching their execution over longer time periods, although delaying jobs isn't practical if they're time sensitive.\nThe idea of the pattern is to use a private computing environment for the baseline load and burst to the cloud temporarily when you need extra capacity.\nIn the preceding diagram, when data capacity is at its limit in an on-premises private environment, the system can gain extra capacity from a Google Cloud environment when needed.\nThe key drivers of this pattern are saving money and reducing the time and effort needed to respond to scale requirement changes. With this approach, you only pay for the resources used when handling extra loads. That means you don't need to overprovision your infrastructure. Instead you can take advantage of on-demand cloud resources and scale them to fit the demand, and any predefined metrics. As a result, your company might avoid service interruptions during peak demand times.\nA potential requirement for cloud bursting scenarios is workload portability. When you allow workloads to be deployed to multiple environments, you must abstract away the differences between the environments. For example, Kubernetes gives you the ability to achieve consistency at the workload level across diverse environments that use different infrastructures. For more information, see [GKE Enterprise hybrid environment reference architecture](/anthos/docs/architecture/anthos-hybrid-environment) .\n", "content": "## Design considerations\nThe cloud bursting pattern applies to interactive and batch workloads. When you're dealing with interactive workloads, however, you must determine how to distribute requests across environments:\n- You can route incoming user requests to a load balancer that runs in the existing data center, and then have the load balancer distribute requests across the local and cloud resources.This approach requires the load balancer or another system that is running in the existing data center to also track the resources that are allocated in the cloud. The load balancer or another system must also initiate the automatic upscaling or downscaling of resources. Using this approach you can decommission all cloud resources during times of low activity. However, implementing mechanisms to track resources might exceed the capabilities of your load balancer solutions, and therefore increase overall complexity.\n- Instead of implementing mechanisms to track resources, you can use Cloud Load Balancing with a hybrid connectivity [network endpoint group (NEG)](/load-balancing/docs/negs/hybrid-neg-concepts) backend. You use this load balancer to route [internal client requests](/load-balancing/docs/l7-internal#load_balancing_with_hybrid_connectivity) or [external client requests](/load-balancing/docs/negs/hybrid-neg-concepts#public_clients) to backends that are located both on-premises and in Google Cloud and that are based on different metrics, like [weight-based traffic splitting](/load-balancing/docs/https/traffic-management-global#traffic_actions_weight-based_traffic_splitting) . Also you can scale backends based on [load balancing serving capacity](/compute/docs/autoscaler/scaling-load-balancing#scaling_based_on_https_load_balancing_serving_capacity) for workloads in Google Cloud. For more information, see [Traffic management overview for global external Application Load Balancer](/load-balancing/docs/https/traffic-management-global) .This approach has several additional benefits, such as taking advantage of Google Cloud Armor [DDoS protection capabilities](/armor/docs/advanced-network-ddos) , WAF, and caching content at the cloud edge using [Cloud CDN](/cdn/docs/overview) . However, you need to size the hybrid network connectivity to handle the additional traffic.\n- As highlighted in [Workload portability](/architecture/hybrid-multicloud-patterns/other-considerations#workload_portability) , an application might be portable to a different environment with minimal changes to achieve workload consistency, but that doesn't mean that the application performs equally the same in both environments. Differences in underlying compute, infrastructure security capabilities, or networking infrastructure, along with proximity to dependent services, typically determine performance. Through testing, you can have more accurate visibility and understand the performance expectations.\n- You can use cloud infrastructure services to build an environment to host your applications without portability. Use the following approaches to handle client requests when traffic is redirected during peak demand times:- Use consistent tooling to monitor and manage these two environments.\n- Ensure consistent workload versioning and that your data sources are current.\n- You might need to add automation to provision the cloud environment and reroute traffic when demand increases and the cloud workload is expected to accept client requests for your application.\n- If you intend to shut down all Google Cloud resources during times of low demand, using DNS routing policies primarily for traffic load balancing might not always be optimal. This is mainly because:- Resources can require some time to initialize before they can serve users.\n- DNS updates tend to propagate slowly over the internet.\nAs a result:- Users might be routed to the Cloud environment even when no resources are available to process their requests.\n- Users might keep being routed to the on-premises environment temporarily while DNS updates propagate across the internet.With Cloud DNS, you can choose the [DNS policy and routing policy](/dns/docs/policies-overview) that align with your solution architecture and behavior such as [geolocation DNS routing policies](/architecture/global-load-balancing-architectures-for-dns-routing-policies#global-dns-endpoint-for-a-hybrid-service) . Cloud DNS also supports health checks for internal passthrough Network Load Balancer, and internal Application Load Balancer. In which case, you could incorporate it with your overall hybrid DNS setup that's based on this pattern.\nIn some scenarios, you can use Cloud DNS to distribute client requests with health checks on Google Cloud, like when using internal Application Load Balancers or [cross-region internal Application Load Balancers](/load-balancing/docs/l7-internal#high_availability_and_cross-region_failover) . In this scenario, Cloud DNS checks the overall health of the internal Application Load Balancer, which itself checks the health of the backend instances. For more information, see [Manage DNS routing policies and health checks](/dns/docs/zones/manage-routing-policies) .\nYou can also use [Cloud DNS split horizon](/dns/docs/zones/zones-overview#split-horizon) . Cloud DNS split horizon is an approach for setting up DNS responses or records to the specific location or network of the DNS query originator for the same domain name. This approach is commonly used to address requirements where an application is designed to offer both a private and a public experience, each with unique features. The approach also helps to distribute traffic load across environments.\nGiven these considerations, cloud bursting generally lends itself better to batch workloads than to interactive workloads.\n## Advantages\nKey advantages of the cloud bursting architecture pattern include:\n- Cloud bursting lets you reuse existing investments in data centers and private computing environments. This reuse can either be permanent or in effect until existing equipment becomes due for replacement, at which point you might consider a full migration.\n- Because you no longer have to maintain excess capacity to satisfy peak demands, you might be able to increase the use and cost effectiveness of your private computing environments.\n- Cloud bursting lets you run batch jobs in a timely fashion without the need for overprovisioning compute resources.## Best practices\nWhen implementing cloud bursting, consider the following best practices:\n- To ensure that workloads running in the cloud can access resources in the same fashion as workloads running in an on-premises environment, use the [meshed pattern](/architecture/hybrid-multicloud-secure-networking-patterns/meshed-pattern) with the least privileged security access principle. If the workload design permits it, you can allow access only from the cloud to the on-premises computing environment, not the other way round.\n- To minimize latency for communication between environments, pick a [Google Cloud region](/about/locations) that is geographically close to your private computing environment. For more information, see [Best practices for Compute Engine regions selection](/solutions/best-practices-compute-engine-region-selection) .\n- When using cloud bursting for batch workloads only, reduce the security attack surface by keeping all Google Cloud resources private. Disallow any direct access from the internet to these resources, even if you're using Google Cloud external load balancing to provide the entry point to the workload.\n- Select the [DNS policy and routing policy](/dns/docs/policies-overview) that aligns with your architecture pattern and the targeted solution behavior.- As part of this pattern, you can apply the design of your DNS policies permanently or when you need extra capacity using another environment during peak demand times.\n- You can use geolocation DNS routing policies to have a global DNS endpoint for your regional load balancers. This tactic has many [use cases for geolocation DNS routing policies](/architecture/global-load-balancing-architectures-for-dns-routing-policies#use-cases-for-geolocation-dns-routing-policies) , including hybrid applications that use Google Cloud alongside an on-premises deployment where Google Cloud region exists.\n- If you need to provide different records for the same DNS queries, you can use split horizon DNS\u2014for example, queries from internal and external clients.For more information, see [reference architectures for hybrid DNS](/dns/docs/best-practices#reference_architectures_for_hybrid_dns) \n- To ensure that DNS changes are propagated quickly, configure your DNS with a reasonably short [time to live value](/dns/docs/overview#propagation_of_changes) so that you can reroute users to standby systems when you need extra capacity using cloud environments.\n- For jobs that aren't highly time critical, and don't store data locally, consider using [Spot VM instances](/compute/docs/instances/spot) , which are substantially cheaper than regular VM instances. A prerequisite, however, is that if the VM job is preempted, the system must be able to automatically restart the job.\n- Use containers to achieve workload portability where applicable. Also, GKE Enterprise can be a key enabling technology for that design. For more information, see [GKE Enterprise hybrid environment reference architecture](/anthos/docs/architecture/anthos-hybrid-environment) .\n- Monitor any traffic sent from Google Cloud to a different computing environment. This traffic is subject to [outbound data transfer charges](/vpc/network-pricing#internet_egress) .\n- If you plan to use this architecture long term with high outbound data transfer volume, consider using Cloud Interconnect. Cloud Interconnect can help to optimize the connectivity performance and might reduce outbound data transfer charges for traffic that meets certain conditions. For more information, see [Cloud Interconnect pricing](/network-connectivity/docs/interconnect/pricing) .\n- When Cloud Load Balancing is used, you should use its [application capacity optimizations abilities ](/load-balancing/docs/tutorials/about-capacity-optimization-with-global-lb) where applicable. Doing so can help you address some of the capacity challenges that can occur in globally distributed applications.\n- Authenticate the people who use your systems by [establishing common identity](/architecture/authenticating-corporate-users-in-a-hybrid-environment) between environments so that systems can securely authenticate across environment boundaries.\n- To protect sensitive information, encrypting all communications in transit is highly recommended. If encryption is required at the connectivity layer, various options are available based on the selected hybrid connectivity solution. These options include VPN tunnels, HA VPN over Cloud Interconnect, and MACsec for Cloud Interconnect.", "guide": "Docs"}