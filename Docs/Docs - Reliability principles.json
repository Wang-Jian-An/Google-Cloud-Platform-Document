{"title": "Docs - Reliability principles", "url": "https://cloud.google.com/architecture/framework/reliability/principles", "abstract": "# Docs - Reliability principles\nLast reviewed 2023-08-08 UTC\nThis document in the [Architecture Framework](/architecture/framework) explains some of the core principles to run reliable services on a cloud platform. These principles help to create a common understanding as you read additional sections of the Architecture Framework that show you how some of the Google Cloud products and features support reliable services.\n", "content": "## Key terminology\nThere are several common terms associated with reliability practices. These may be familiar to many readers. However, for a refresher see the detailed descriptions at the [Terminology](/architecture/framework/reliability/terminology) page.\n## Core principles\nGoogle's approach to reliability is based on the following core principles.\n### Reliability is your top feature\nNew product features are sometimes your top priority in the short term. However, reliability is your top product feature in the long term, because if the product is too slow or is unavailable over a long period of time, your users might leave, making other product features irrelevant.\n### Reliability is defined by the user\nFor user-facing workloads, measure the user experience. The user must be happy with how your service performs. For example, measure the success ratio of user requests, not just server metrics like CPU usage.\nFor batch and streaming workloads, you might need to measure key performance indicators (KPIs) for data throughput, such as rows scanned per time window, instead of server metrics such as disk usage. Throughput KPIs can help ensure a daily or quarterly report required by the user finishes on time.\n### 100% reliability is the wrong target\nYour systems should be reliable enough that users are happy, but not excessively reliable such that the investment is unjustified. Define SLOs that set the reliability threshold you want, then use error budgets to manage the appropriate rate of change.\nApply the design and operational principles in this framework to a product only if the SLO for that product or application justifies the cost.\n### Reliability and rapid innovation are complementary\nUse error budgets to achieve a balance between system stability and developer agility. The following guidance helps you determine when to move fast or slow:\n- When an adequate error budget is available, you can innovate rapidly and improve the product or add product features.\n- When the error budget is diminished, slow down and focus on reliability features.## Design and operational principles\nTo maximize system reliability, the following design and operational principles apply. Each of these principles is discussed in detail in the rest of the Architecture Framework reliability category.\n### Define your reliability goals\nThe best practices covered in this section of the Architecture Framework include the following:\n- Choose appropriate SLIs.\n- Set SLOs based on the user experience.\n- Iteratively improve SLOs.\n- Use strict internal SLOs.\n- Use error budgets to manage development velocity.\nFor more information, see [Define your reliability goals](/architecture/framework/reliability/define-goals) in the Architecture Framework reliability category.\n### Build observability into your infrastructure and applications\nThe following design principle is covered in this section of the Architecture Framework:\n- Instrument your code to maximize observability.\nFor more information, see [Build observability into your infrastructure and applications](/architecture/framework/reliability/observability-infrastructure-applications) in the Architecture Framework reliability category.\n### Design for scale and high availability\nThe following design principles are covered in this section of the Architecture Framework:\n- Create redundancy for higher availability.\n- Replicate data across regions for disaster recovery.\n- Design a multi-region architecture for resilience to regional outages.\n- Eliminate scalability bottlenecks.\n- Degrade service levels gracefully when overloaded.\n- Prevent and mitigate traffic spikes.\n- Sanitize and validate inputs.\n- Fail safe in a way that preserves system function.\n- Design API calls and operational commands to be retryable.\n- Identify and manage system dependencies.\n- Minimize critical dependencies.\n- Ensure that every change can be rolled back.\nFor more information, see [Design for scale and high availability](/architecture/framework/reliability/design-scale-high-availability) in the Architecture Framework reliability category.\n### Create reliable operational processes and tools\nThe following operational principles are covered in this section of the Architecture Framework:\n- Choose good names for applications and services.\n- Implement progressive rollouts with canary testing procedures.\n- Spread out traffic for timed promotion and launches.\n- Automate the build, test, and deployment process.\n- Defend against operator error.\n- Test failure recovery procedures.\n- Conduct disaster recovery tests.\n- Practice chaos engineering.\nFor more information, see [Create reliable operational processes and tools](/architecture/framework/reliability/create-operational-processes-tools) in the Architecture Framework reliability category.\n### Build efficient alerts\nThe following operational principles are covered in this section of the Architecture Framework:\n- Optimize alert delays.\n- Alert on symptoms, not causes.\n- Alert on outliers, not averages.\nFor more information, see [Build efficient alerts](/architecture/framework/reliability/build-efficient-alerts) in the Architecture Framework reliability category.\n### Build a collaborative incident management process\nThe following operational principles are covered in this section of the Architecture Framework:\n- Assign clear service ownership.\n- Reduce time to detect (TTD) with well tuned alerts.\n- Reduce time to mitigate (TTM) with incident management plans and training.\n- Design dashboard layouts and content to minimize TTM.\n- Document diagnostic procedures and mitigation for known outage scenarios.\n- Use blameless postmortems to learn from outages and prevent recurrences.\nFor more information, see [Build a collaborative incident management process](/architecture/framework/reliability/build-incident-management-process) in the Architecture Framework reliability category.\n## What's next\n- [Define your reliability goals](/architecture/framework/reliability/define-goals) (next document in this series)\nExplore other categories in the [Architecture Framework](/architecture/framework) such as system design, operational excellence, security, privacy, and compliance.", "guide": "Docs"}