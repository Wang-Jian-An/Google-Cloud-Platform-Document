{"title": "Docs - Select and implement a storage strategy", "url": "https://cloud.google.com/architecture/framework/system-design/storage", "abstract": "# Docs - Select and implement a storage strategy\nLast reviewed 2023-07-17 UTC\nThis document in the [Google Cloud Architecture Framework](/architecture/framework) provides best practices to deploy your system based on storage. You learn how to select a storage strategy and how to manage storage, access patterns, and workloads.\nTo facilitate data exchange and securely back up and store data, organizations need to choose a storage plan based on workload, [input/output operations per second (IOPS)](https://wikipedia.org/wiki/IOPS) , latency, retrieval frequency, location, capacity, and format (block, file, and object).\n[Cloud Storage](/storage/docs/introduction) provides reliable, secure object storage services, including the following:\n- Built-in redundancy options to protect your data against equipment failure and to ensure data availability during data center maintenance.\n- Data transfer options, including the following:- [Storage Transfer Service](/storage/transfer) \n- [Transfer Appliance](/transfer-appliance) \n- [BigQuery Data Transfer Service](/bigquery/docs/dts-introduction) \n- [Migration to Google Cloud: Transferring your large datasets](/architecture/migration-to-google-cloud-transferring-your-large-datasets) \n- [Storage classes](/storage/docs/storage-classes) to support your workloads.\n- Calculated checksums for all Cloud Storage operations that enable Google to verify reads and writes.\nIn Google Cloud, IOPS scales according to your provisioned storage space. Storage types like Persistent Disk require manual replication and backup because they are zonal or regional. By contrast, [object storage](/learn/what-is-object-storage) is highly available and it automatically replicates data across a single region or across multiple regions.\n", "content": "## Storage type\nThis section provides best practices for choosing a storage type to support your system.\n### Evaluate options for high-performance storage needs\nEvaluate persistent disks or local solid-state drives (SSD) for compute applications that require high-performance storage. [Cloud Storage](/storage/docs) is an immutable object store with versioning. Using Cloud Storage with [Cloud CDN](/cdn/docs) helps optimize for cost, especially for frequently accessed static objects.\n[Filestore](/filestore/docs) supports multi-write applications that need high-performance shared space. Filestore also supports legacy and modern applications that require [POSIX](https://wikipedia.org/wiki/POSIX) -like file operations through [Network File System](https://wikipedia.org/wiki/Network_File_System) (NFS) mounts.\nCloud Storage supports use cases such as creating data lakes and addressing archival requirements. Make tradeoff decisions based on how you choose [Cloud Storage class](/storage/docs/storage-classes) due to access and retrieval costs, especially when you configure retention policies. For more information, see [Design an optimal storage strategy for your cloud workload](/architecture/storage-advisor) .\nAll storage options are by default encrypted at rest and in-transit using Google-managed keys. For storage types such as Persistent Disk and Cloud Storage, you can either supply your own key or manage them through [Cloud Key Management Service (Cloud KMS)](/kms/docs) . Establish a strategy for handling such keys before you employ them on production data.\n### Choose Google Cloud services to support storage design\nTo learn about the Google Cloud services that support storage design, use the following table:\n| Google Cloud service  | Description                                                                                                                                |\n|:---------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Cloud Storage    | Provides global storage and retrieval of any amount of data at any time. You can use Cloud Storage for multiple scenarios including serving website content, storing data for archival and disaster recovery, or distributing large data objects to users through direct download. For more information, see the following: Cloud Storage best practices Bucket locations Storage classes Cloud Storage FUSE                               |\n| Persistent Disk   | A high-performance block storage for Google Cloud. Persistent Disk provides SSD and hard disk drive (HDD) storage that you can attach to instances running in Compute Engine or Google Kubernetes Engine (GKE). Regional disks provide durable storage and replication of data between two zones in the same region. If you need higher IOPS and low latency, Google Cloud offers Filestore. Local SSDs are physically attached to the server that hosts your virtual machine instance. You can use local SSDs as temporary disk space. |\n| Filestore     | A managed file storage service for applications that require a file system interface and a shared file system for data. Filestore gives users a seamless experience for standing up managed Network Attached Storage (NAS) with their Compute Engine and GKE instances.                                                                 |\n| Cloud Storage for Firebase | Built for app developers who need to store and serve user-generated content, such as photos or videos. All your files are stored in Cloud Storage buckets, so they are accessible from both Firebase and Google Cloud.                                                                             |\n### Choose a storage strategy\nTo select a storage strategy that meets your application requirements, use  the following table:\n| Use case                                   | Recommendations             |\n|:--------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------|\n| You want to store data at scale at the lowest cost, and access performance is not an issue.              | Cloud Storage             |\n| You are running compute applications that need immediate storage. For more information, see Optimizing Persistent Disk and Local SSD performance. | Persistent Disk or Local SSD         |\n| You are running high-performance workloads that need read and write access to shared space.              | Filestore              |\n| You have high-performance computing (HPC) or high-throughput computing (HTC) use cases.               | Using clusters for large-scale technical computing in the cloud |\n### Choose active or archival storage based on storage access needs\nA [storage class](/storage/docs/storage-classes) is a piece of [metadata](/storage/docs/metadata) that is used by every object. For data that is served at a high rate with high availability, use the Standard Storage class. For data that is infrequently accessed and can tolerate slightly lower availability, use the Nearline Storage, Coldline Storage, or Archive Storage class. For more information about cost considerations for choosing a storage class, see [Cloud Storage pricing](/storage/pricing) .\n### Evaluate storage location and data protection needs for Cloud Storage\nFor a Cloud Storage bucket located in a region, data contained within it is automatically replicated across zones within the region. Data replication across zones protects the data if there is a zonal failure within a region.\nCloud Storage also offers locations that are redundant across regions, which means data is replicated across multiple, geographically separate data centers. For more information, see [Bucket locations](/storage/docs/locations) .\n### Use Cloud CDN to improve static object delivery\nTo optimize the cost to retrieve objects and minimize access latency, use [Cloud CDN](/cdn/docs) . Cloud CDN uses the Cloud Load Balancing [external Application Load Balancer](/load-balancing/docs/https) to provide routing, health checking, and anycast IP address support. For more information, see [Setting up Cloud CDN with cloud buckets](/cdn/docs/setting-up-cdn-with-bucket#send-traffic) .\n## Storage access pattern and workload type\nThis section provides best practices for choosing storage access patterns and workload types to support your system.\n### Use Persistent Disk to support high-performance storage access\nData access patterns depend on how you design system performance. Cloud Storage provides scalable storage, but it isn't an ideal choice when you run heavy compute workloads that need high throughput access to large amounts of data. For high-performance storage access, use [Persistent Disk](/persistent-disk) .\n### Use exponential backoff when implementing retry logic\nUse exponential backoff when implementing retry logic to handle 5XX, 408, and 429 errors. Each Cloud Storage bucket is provisioned with initial I/O capacity. For more information, see [Request rate and access distribution guidelines](/storage/docs/request-rate) . Plan a gradual ramp-up for retry requests.\n## Storage management\nThis section provides best practices for storage management to support your system.\n### Assign unique names to every bucket\nMake every bucket name unique across the Cloud Storage namespace. Don't include sensitive information in a bucket name. Choose bucket and object names that are difficult to guess. For more information, see the [bucket naming guidelines](/storage/docs/buckets#naming) and [Object naming guidelines](/storage/docs/objects#naming) .\n### Keep Cloud Storage buckets private\nUnless there is a business-related reason, ensure that your Cloud Storage bucket isn't anonymously or publicly accessible. For more information, see [Overview of access control](/storage/docs/access-control#public_access_prevention) .\n### Assign random object names to distribute load evenly\nAssign random object names to facilitate performance and avoid [hotspotting](/spanner/docs/schema-design#primary-key-prevent-hotspots) . Use a randomized prefix for objects where possible. For more information, see [Use a naming convention that distributes load evenly across key ranges](/storage/docs/request-rate#naming-convention) .\n### Use public access prevention\nTo prevent access at the organization, folder, project, or bucket level, use public access prevention. For more information, see [Using public access prevention.](/storage/docs/using-public-access-prevention)\n## What's next\nLearn about [Google Cloud database services](/architecture/framework/system-design/databases#key-services) and best practices, including the following:\n- [Select](/architecture/framework/system-design/databases#select-database) and [migrate your database](/architecture/framework/system-design/databases#data-migration) .\n- Manage [database encryption](/architecture/framework/system-design/databases#encryption) .\n- Manage database [networking and access](/architecture/framework/system-design/databases#access) .\nExplore other categories in the [Architecture Framework](/architecture/framework) such as reliability, operational excellence, and security, privacy, and compliance.", "guide": "Docs"}