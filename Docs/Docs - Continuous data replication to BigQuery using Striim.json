{"title": "Docs - Continuous data replication to BigQuery using Striim", "url": "https://cloud.google.com/architecture/partners/continuous-data-replication-bigquery-striim?hl=zh-cn", "abstract": "# Docs - Continuous data replication to BigQuery using Striim\nLast reviewed 2024-02-13 UTC\nBy: Edward Bell, Solutions Architect,\n [Striim, Inc](https://www.striim.com/) \n.\nThis tutorial demonstrates how to migrate a MySQL database to [BigQuery](/bigquery) using Striim. Striim is a comprehensive streaming [extract, transform, and load (ETL)](https://wikipedia.org/wiki/Extract,_transform,_load) platform that enables online database migrations and continuous streaming replication from on-premises and cloud data sources to Google Cloud data services.\nThis tutorial focuses on the implementation of a continuous replication from [Cloud SQL for MySQL](/sql/docs/mysql) to BigQuery. It is intended for database administrators, IT professionals, and data architects interested in taking advantage of BigQuery capabilities.\n", "content": "## Objectives\n- Launch the Stiim for BigQuery free trial.\n- Use Striim to continuously replicate from Cloud SQL for MySQL to BigQuery.## CostsIn this document, you use the following billable components of Google Cloud:- [Cloud SQL for MySQL](/sql/pricing) \n- [BigQuery](/bigquery/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nThis tutorial also uses Striim, which includes a trial period. You can find Striim in the [Cloud Marketplace](https://console.cloud.google.com/marketplace/details/striim/striim) .\nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the Compute Engine and BigQuery APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=compute.googleapis.com,bigquery.googleapis.com) \n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Set the default compute zone to `us-central1-a` :```\ngcloud config set compute/zone us-central1-aexport COMPUTE_ZONE=us-central1-a\n```This zone is where you deploy your database. For more information about zones, see [Geography and regions](/docs/geography-and-regions) .\n## Create a Cloud SQL for MySQL instanceYou create a Cloud SQL for MySQL instance that you later connect to Striim. In this case, the instance acts as the source transactional system that you later replicate. In a real-world scenario, the source database can be one of many transactional database systems.- In Cloud Shell, create the environment variables to create the instance:```\nCSQL_NAME=striim-sql-srcCSQL_USERNAME=striim-userCSQL_USER_PWD=$(openssl rand -base64 18)CSQL_ROOT_PWD=$(openssl rand -base64 18)\n```If you close the Cloud Shell session, you lose the variables.\n- Make a note of the `CSQL_USER_PWD` and `CSQL_ROOT_PWD` passwords generated by the following commands:```\necho $CSQL_USER_PWD and echo $CSQL_ROOT_PWD\n```\n- Create the Cloud SQL for MySQL instance:```\ngcloud sql instances create $CSQL_NAME \\\u00a0 \u00a0 --root-password=$CSQL_ROOT_PWD --zone=$COMPUTE_ZONE \\\u00a0 \u00a0 --tier=db-n1-standard-2 --enable-bin-log\n```\n- Create a Cloud SQL for MySQL user that Striim can connect to:```\ngcloud sql users create $CSQL_USERNAME --instance $CSQL_NAME \\\u00a0 \u00a0 --password $CSQL_USER_PWD --host=%\n```The Cloud SQL for MySQL database is set up for Striim to read.\n- Find the IP address of the Cloud SQL for MySQL instance and make a note of it:```\ngcloud sql instances describe $CSQL_NAME --format='get(ipAddresses.ipAddress)'\n```\n## Set up StriimTo set up an instance of the Striim server software, you use the Cloud Marketplace.- In the Google Cloud console, go to the **Striim** page in the Cloud Marketplace. [Go to Striim in the Cloud Marketplace](https://console.cloud.google.com/marketplace/details/striim/striim) \n- Click **Launch** .\n- In the **New Striim Deployment** window, complete the following fields:- Select the project that you created or selected to use for this tutorial.\n- In the **Zone** drop-down menu, select **us-central1-a** .\n- If you accept the terms for service, select the **I accept theGoogle Cloud Marketplace Terms of Service** checkbox. Terms of Service** checkbox.Cloud Marketplace solutions typically come with various resources that launch to support the software. Review the monthly billing estimate before launching the solution.\n- Leave all other settings at their default values.\n- Click **Deploy** .\n- In the Google Cloud console, go to the **Deployments** page. [Go to Deployments](https://console.cloud.google.com/dm/deployments) \n- To review the deployment details of the Striim instance, click the name of the Striim instance. Make a note of the name of the deployment and the name of the VM that has deployed.\n- To allow Striim to communicate with Cloud SQL for MySQL, [add the Striim server's IP address](/sql/docs/mysql/connect-external-app) to the Cloud SQL for MySQL instance's authorized networks:```\nSTRIIMVM_NAME=STRIIM_VM_NAME\nSTRIIMVM_ZONE=us-central1-a\ngcloud sql instances patch $CSQL_NAME \\\n --authorized-networks=$(gcloud compute instances describe $STRIIM_VM_NAME \\\n --format='get(networkInterfaces[0].accessConfigs[0].natIP)' \\\n --zone=$STRIIMVM_ZONE)\n```Replace the following:- ``: the name of the VM that you deployed with Striim.\n- In the Google Cloud console, on the deployment instance details page, click **Visit the site** to open the Striim web UI.\n- In the Striim configuration wizard, configure the following:- Review the end-user license agreement. If you accept the terms, click **Accept Striim EULA and Continue** .\n- Enter your contact information.\n- Enter the Cluster Name, Admin, Sys, and Striim Key passwords of your choice. Make a note of these passwords. Click **Save and Continue** .\n- Leave the key field blank to enable the trial, and then click **Save and Continue** .\n- Click **Launch** . It takes about a minute for Striim to be configured. When done, click **Log In** .\n- To log in to the Striim administrator console, log in with the `admin` user and the administrator password that you previously set. Keep this window open because you return to it in a later step.\n### Set up Connector/JUse [MySQL Connector/J](https://dev.mysql.com/downloads/connector/j/5.1.html) to connect Striim to your Cloud SQL for MySQL instance. As of this writing, 5.1.49 is the latest version of Connector/J.- In the Google Cloud console, go to the **Deployments** page. [Go to Deployments](https://console.cloud.google.com/dm/deployments) \n- For the Striim instance, click **SSH** to automatically connect to the instance.\n- Download the Connector/J to the instance and extract it:```\nwget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.49.tar.gztar -xvzf mysql-connector-java-5.1.49.tar.gz\n```\n- Copy the file to the Striim library path, allow it to be executable, and change ownership of the file that you downloaded:```\nsudo cp ~/mysql-connector-java-5.1.49/mysql-connector-java-5.1.49.jar /opt/striim/libsudo chmod +x /opt/striim/lib/mysql-connector-java-5.1.49.jarsudo chown striim /opt/striim/lib/mysql-connector-java-5.1.49.jar\n```\n- To recognize the new library, restart the Striim server:```\nsudo systemctl stop striim-nodesudo systemctl stop striim-dbmssudo systemctl start striim-dbmssudo systemctl start striim-node\n```\n- Go back to the browser window with the administration console in it. Reload the page, and then log in using the `admin` user credentials.It can take a couple minutes for the server to complete its restart from the previous step, so you might get a browser error during that time. If you encounter an error, reload the page and log in again.\n## Load sample transactions to Cloud SQLBefore you can configure your first Striim app, load transactions into the MySQL instance.- In Cloud Shell, connect to the instance using the Cloud SQL for MySQL instance credentials that you previously set:```\ngcloud sql connect $CSQL_NAME --user=$CSQL_USERNAME\n```\n- Create a sample database and load some transactions into it:```\nCREATE DATABASE striimdemo;USE striimdemo;CREATE TABLE ORDERS (ORDER_ID Integer, ORDER_DATE VARCHAR(50), ORDER_MODE VARCHAR(8), CUSTOMER_ID Integer, ORDER_STATUS Integer, ORDER_TOTAL Float, SALES_REP_ID Integer, PROMOTION_ID Integer, PRIMARY KEY (ORDER_ID));INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1001, 1568927976017, 'In-Store', 1001, 9, 34672.59, 331, 9404);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1002, 1568928036017, 'In-Store', 1002, 1, 28133.14, 619, 2689);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1003, 1568928096017, 'CompanyB', 1003, 1, 37367.95, 160, 30888);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1004, 1568928156017, 'CompanyA', 1004, 1, 7737.02, 362, 89488);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1005, 1568928216017, 'CompanyA', 1005, 9, 15959.91, 497, 78454);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1006, 1568928276017, 'In-Store', 1006, 1, 82531.55, 399, 22488);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1007, 1568928336017, 'CompanyA', 1007, 7, 52929.61, 420, 66256);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1008, 1568928396017, 'Online', 1008, 1, 26912.56, 832, 7262);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1009, 1568928456017, 'CompanyA', 1009, 1, 97706.08, 124, 12185);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1010, 1568928516017, 'CompanyB', 1010, 1, 47539.16, 105, 17868);\n```\n- To check the upload, count the records to ensure that 10 records were inserted:```\nSELECT COUNT(*) FROM ORDERS;\n```\n- Leave the Cloud SQL for MySQL instance:```\nExit\n```\n## Create a BigQuery target datasetIn this section, you create a BigQuery dataset, and load service account credentials so that Striim can write to the target database from the Google Cloud console.- In Cloud Shell, create a BigQuery dataset:```\nbq --location=US mk -d \\--description \"Test Target for Striim.\" striimdemo\n```For this tutorial, you deploy BigQuery in the US.\n- Create a new target table:```\nbq mk \\\u00a0 \u00a0 --table \\\u00a0 \u00a0 --description \"Striim Table\" \\\u00a0 \u00a0 --label organization:striimlab striimdemo.orders order_id:INTEGER,order_date:STRING,order_mode:STRING,customer_id:INTEGER,order_status:INTEGER,order_total:FLOAT,sales_rep_id:INTEGER,promotion_id:INTEGER\n```\n- Create a service account for Striim to connect to BigQuery:```\ngcloud iam service-accounts create striim-bq \\\u00a0 \u00a0 --display-name striim-bqexport sa_striim_bq=$(gcloud iam service-accounts list \\\u00a0 \u00a0 --filter=\"displayName:striim-bq\" --format='value(email)')export PROJECT=$(gcloud info \\\u00a0 \u00a0 --format='value(config.project)')gcloud projects add-iam-policy-binding $PROJECT \\\u00a0 \u00a0 --role roles/bigquery.dataEditor \\\u00a0 \u00a0 --member serviceAccount:$sa_striim_bqgcloud projects add-iam-policy-binding $PROJECT \\\u00a0 \u00a0 --role roles/bigquery.user --member serviceAccount:$sa_striim_bqgcloud iam service-accounts keys create ~/striim-bq-key.json \\\u00a0 \u00a0 --iam-account $sa_striim_bq\n```A key called `striim-bq-key.json` is created in your home path.\n- Move the newly generated key to the server:```\ngcloud compute scp ~/striim-bq-key.json $STRIIM_VM_NAME:~ \\\u00a0 \u00a0 --zone=$COMPUTE_ZONE\n```\n- Move the key to the `/opt/striim` directory:```\ngcloud compute ssh \\\u00a0 \u00a0 --zone=$COMPUTE_ZONE $STRIIM_VM_NAME \\\u00a0 \u00a0 -- 'sudo cp ~/striim-bq-key.json /opt/striim && sudo chown striim /opt/striim/striim-bq-key.json'\n```You are now ready to create a Striim app.\n## Create an online database migrationAn online database migration moves data from a source database (either on-premises or hosted on a cloud provider) to a target database or data warehouse in Google Cloud. The source database remains fully accessible by the business app and with minimal performance impact on the source database during this time.\nIn an online migration, you perform an initial bulkload, and also continuously capture any changes. You then synchronize the two databases to ensure that data isn't lost.\nIf you want to focus on creating a change data capture (CDC) pipeline, see the [Create a continuous Cloud SQL for MySQL to BigQuery data pipeline](#create_a_continuous_data_pipeline_from_cloud_sql_for_mysql_to_bigquery) section.\n### Create the source connection\n- In the Google Cloud console, on the instance details page, click **Visit the site** to open the Striim web UI.\n- In the Striim web UI, click **Apps** .\n- Click **Add App** .\n- Click **Start from Scratch** .\n- In the **Name** field, enter `MySQLToBigQuery_initLoad` .\n- In the **Namespace** drop-down menu, select the default **Adminnamespace** . This label is used to organize your apps.\n- Click **Save** .\n- On the **Flow Designer** page, to do a one-time initial bulkload of data, from the **Sources** pane, drag **Database** to the flow design palette in the center of the screen and enter the following connection properties:- In the **Name** field, enter`mysql_source`.\n- Leave the **Adapter** field at the default value of **DatabaseReader** .\n- In the **Connection URL** field, enter`jdbc:mysql://` `` `:3306/striimdemo`. Replace``with the IP address of the Cloud SQL instance that you created in the [previous section](#create_a_cloud_sql_for_mysql_instance) .\n- In the **Username** field, enter the username that you set as the`CSQL_USER`environment variable,`striim-user`.\n- In the **Password** field, enter the`CSQL_USER_PWD`value that you made a note of when you [created a Cloud SQL for MySQL instance](#create_a_cloud_sql_for_mysql_instance) .\n- To see more configuration properties, click **Show optional\nproperties** .\n- In the **Tables** field, enter`striimdemo.ORDERS`.\n- For **Output to** , select **New output** .\n- In the **New output** field, enter`stream_CloudSQLMySQLInitLoad`.\n- Click **Save** .\n- To test the configuration settings to make sure that Striim can successfully connect to Cloud SQL for MySQL, click **Created** , and then select **Deploy App** .\n- In the **Deployment** window, you can specify that you want to run parts of your app on some of your deployment topology. For this tutorial, select **Default** , and click **Deploy** .\n- To preview your data as it flows through the Striim pipeline, click waves **mysql_source DataBase reader** , and then click remove_red_eye **Preview on run** .\n- Click **Deployed** , and then click **Start App** .The Striim app starts running, and data flows through the pipeline. If there are any errors, there is an issue connecting to the source database because there is only a source component in the pipeline. If you see your app successfully run, but no data flows through, typically that means that you don't have any data in your database.\n- After you've successfully connected to your source database and tested that it can read data, click **Running** , and then select **Stop App** .\n- Click **Stopped** , and then select **Undeploy App** . You are now ready to connect this flow to BigQuery.\n### Perform an initial load into BigQuery\n- In the Striim web UI, click waves **mysql_source Database reader** .\n- Click add **Connect to next component** , select **Connect next Targetcomponent** , and then complete the following fields:- In the **Name** field, enter`bq_target`.\n- In the **Adapter** field, enter`BigQueryWriter`.\n- The **Tables property** is a source/target pair separated by commas. It is in the format of`srcSchema1.srcTable1,tgtSchema1.tgtTable1;srcSchema2.srcTable2,tgtSchema2.tgtTable2`. For this tutorial, enter`striimdemo.ORDERS,striimdemo.orders`.\n- The **Service Account Key** requires a fully qualified path and name of the key file that was previously generated. For this tutorial, enter`/opt/striim/striim-bq-key.json`.\n- In the **Project ID** field, enter your Google Cloud project ID.\n- Click **Save** .\n- To deploy the app and preview the data flow, do the following:- Click **Created** , and then select **Deploy App** .\n- In the **Deployment** window, select **Default** , and then click **Deploy** .\n- To preview your data as it flows through the Striim pipeline, clickwaves **mysql_source Database reader** , and then clickremove_red_eye **Preview on run** .\n- Click **Deployed** , and then click **Start App** .\n- In the Google Cloud console, go to the **BigQuery** page. [Go to BigQuery](https://console.cloud.google.com/bigquery) \n- Click the **striimdemo** database.\n- In the query editor, enter `SELECT COUNT(*) AS ORDERS, AVG(ORDER_TOTAL) AS ORDERS_AVE, SUM(ORDER_TOTAL) AS ORDERS_SUM FROM striimdemo.orders;` and then click **Run** . It can take up to 90 seconds for the transactions to fully replicate to BigQuery due to the default configuration settings. After it's successfully replicated, the results table outputs the average order of `43148.952` and the total size of the orders, `431489.52` .You have successfully set up your Striim environment and pipeline to perform a batch load.\n## Create a continuous data pipeline from Cloud SQL for MySQL to BigQueryWith an initial one-time bulkload in place, you can now set up a continuous replication pipeline. This pipeline is similar to the bulk pipeline that you created, but with a different source object.\n### Create a CDC source\n- In the Striim web UI, click **Home** .\n- Clickadd **Apps** .\n- Click **Start from Scratch** .\n- In the **Name** field, enter`MySQLToBigQuery_cdc`.\n- In the **Namespace** drop-down menu, select **Admin namespace** .\n- On the **Flow Designer** page, drag a **MySQL CDC** source reader to the center of the design palette.\n- Configure your new MySQL CDC source with the following information:- In the **Name** field, enter`mysql_cdc_source`.\n- Leave the **Adapter** field at the default value of **MysqlReader** .\n- In the **Connection URL** field, enter`jdbc:mysql://` `` `:3306/striimdemo`.\n- Enter the username and password that you used in the previous section.\n- To see more configuration properties, click **Show optional\nproperties** .\n- In the **Tables** field, enter`striimdemo.ORDERS`.\n- For **Output to** , select **New output.** \n- In the **New output** field, enter`stream_CloudSQLMySQLCDCLoad`.\n- Click **Save** .\n### Load new transactions into BigQuery\n- In the Striim web UI, clickwaves **MysqlReader** .\n- Click add **Connect to next component** , and then select **Connect nextTarget component** .- In the **Name** field, enter`bq_cdc_target`.\n- In the **Adapter** field, enter`BigQueryWriter`.\n- The **Tables property** is a source/target pair separated by commas. It is in the format of `srcSchema1.srcTable1,tgtSchema1.tgtTable1;srcSchema2.srcTable2,tgtSchema2.tgtTable2` . For this tutorial, use `striimdemo.ORDERS,striimdemo.orders` .\n- The **Service Account Key** requires a fully qualified path and name of the key file that was previously generated. For this tutorial, enter `/opt/striim/striim-bq-key.json`\n- In the **Project ID** field, enter your Google Cloud project ID.\n- Click **Save** .\n- To deploy the app and preview the data flow, do the following:- Click **Created** , and then select **Deploy App** .\n- In the **Deployment** window, select **Default** , and then click **Deploy** .\n- To preview your data as it flows through the Striim pipeline, clickwaves **MysqlReader** , and then clickremove_red_eye **Preview on Run** .\n- Click **Deployed** , and then click **Start App** .\n- In Cloud Shell, connect to your Cloud SQL for MySQL instance:```\ngcloud sql connect $CSQL_NAME --user=$CSQL_USERNAME\n```\n- Connect to your database and load new transactions into it:```\nUSE striimdemo;INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1011, 1568928576017, 'In-Store', 1011, 9, 13879.56, 320, 88252);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1012, 1568928636017, 'CompanyA', 1012, 1, 19729.99, 76, 95203);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1013, 1568928696017, 'In-Store', 1013, 5, 7286.68, 164, 45162);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1014, 1568928756017, 'Online', 1014, 1, 87268.61, 909, 70407);INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_MODE, CUSTOMER_ID, ORDER_STATUS, ORDER_TOTAL, SALES_REP_ID, PROMOTION_ID) VALUES (1015, 1568928816017, 'CompanyB', 1015, 1, 69744.13, 424, 79401);\n```\n- In the Striim web UI, on the **Transactions view** page, transactions now populate the page and show that data is flowing.\n- In the Google Cloud console, go to the **BigQuery** page. [Go to BigQuery](https://console.cloud.google.com/bigquery) \n- Click the **striimdemo** database.\n- To verify that your data is successfully replicated, in the **QueryEditor** enter `SELECT COUNT(*) AS ORDERS, AVG(ORDER_TOTAL) AS ORDERS_AVE, SUM(ORDER_TOTAL) AS ORDERS_SUM FROM striimdemo.orders;` and then click **Run** . The results table outputs the average order of `43148.952` and the total size of the orders, `431489.52` .It can take up to 90 seconds for the transactions to fully replicate to BigQuery due to the default configuration settings.\nCongratulations, you have successfully set up a streaming replication pipeline from Cloud SQL for MySQL to BigQuery.## Clean up\nThe easiest way to eliminate billing is to delete the Google Cloud project you created for the tutorial. Alternatively, you can delete the individual resources.### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n## What's next\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .\n- Look at the [Google Cloud Data Migration content](/db-migration) .\n- To learn about Striim, [visit the website](http://www.striim.com) , [schedule a demo](https://go2.striim.com/demo-region-select) with a Striim technologist, and subscribe to the [Striim blog](http://www.striim.com/blog) .\n- To learn how to set up continuous data movement from Oracle to BigQuery, see [Oracle to Google BigQuery \u2013 Continuous Movement of On-Premises Data via CDC](https://www.striim.com/blog/2018/09/oracle-to-google-bigquery/) and the [Move Oracle to Google BigQuery in Real Time](https://www.striim.com/blog/2018/09/oracle-to-google-bigquery/) video.", "guide": "Docs"}