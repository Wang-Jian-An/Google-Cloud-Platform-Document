{"title": "Docs - Build observability into your infrastructure and applications", "url": "https://cloud.google.com/architecture/framework/reliability/observability-infrastructure-applications", "abstract": "# Docs - Build observability into your infrastructure and applications\nLast reviewed 2023-08-21 UTC\nThis document in the [Google Cloud Architecture Framework](/architecture/framework) provides best practices to add observability into your services so that you can better understand your service performance and quickly identify issues. Observability includes monitoring, logging, tracing, profiling, debugging, and similar systems.\nMonitoring is at the base of the [service reliability hierarchy in the Google SRE Handbook](https://sre.google/sre-book/part-III-practices/) . Without proper monitoring, you can't tell whether an application works correctly.\n", "content": "## Instrument your code to maximize observability\nA well-designed system aims to have the right amount of observability that starts in its development phase. Don't wait until an application is in production before you start to observe it. Instrument your code and consider the following guidance:\n- To debug and troubleshoot efficiently, think about what log and trace entries to write out, and what metrics to monitor and export. Prioritize by the most likely or frequent failure modes of the system.\n- Periodically audit and prune your monitoring. Delete unused or useless dashboards, graphs, alerts, tracing, and logging to eliminate clutter.\n[Google Cloud Observability](/products/operations) provides real-time monitoring, [hybrid multi-cloud monitoring and logging](/architecture/hybrid-and-multi-cloud-monitoring-and-logging-patterns) (such as for AWS and Azure), plus tracing, profiling, and debugging. Google Cloud Observability can also [auto-discover and monitor microservices](/stackdriver/docs/solutions/slo-monitoring/microservices) running on App Engine or in a service mesh like Istio.\nIf you generate lots of application data, you can [optimize large-scale ingestion of analytics events logs with BigQuery](/architecture/optimized-large-scale-analytics-ingestion) . BigQuery is also suitable for persisting and analyzing high-cardinality timeseries data from your monitoring framework. This approach is useful because it lets you run arbitrary queries at a lower cost rather than trying to design your monitoring perfectly from the start, and decouples reporting from monitoring. You can create reports from the data using [Looker Studio](https://lookerstudio.google.com/overview) or [Looker](/looker) .\n## Recommendations\nTo apply the guidance in the Architecture Framework to your own environment, follow these recommendations:\n- Implement monitoring early, such as before you initiate a migration or before you deploy a new application to a production environment.\n- Disambiguate between application issues and underlying cloud issues. Use the [Monitoring API](/apis/docs/monitoring) , or other [Cloud Monitoring](/monitoring/api/metrics_gcp) products and the [Google Cloud Status Dashboard](https://status.cloud.google.com/) .\n- Define an observability strategy beyond monitoring that includes tracing, profiling, and debugging.\n- Regularly clean up observability artifacts that you don't use or that don't provide value, such as unactionable alerts.\n- If you generate large amounts of observability data, send application events to a data warehouse system such as BigQuery.## What's next\n- [Design for scale and high availability](/architecture/framework/reliability/design-scale-high-availability) (next document in this series)\nExplore other categories in the [Architecture Framework](/architecture/framework) such as system design, operational excellence, security, privacy, and compliance.", "guide": "Docs"}