{"title": "Docs - Migrate from AWS to Google Cloud: Migrate from Amazon EC2 to Compute Engine", "url": "https://cloud.google.com/architecture/migrate-amazon-ec2-to-compute-engine", "abstract": "# Docs - Migrate from AWS to Google Cloud: Migrate from Amazon EC2 to Compute Engine\nLast reviewed 2023-10-13 UTC\nGoogle Cloud provides tools, products, guidance, and professional services to migrate virtual machines (VMs) along with their data from Amazon Elastic Compute Cloud (Amazon EC2) to [Compute Engine](/compute) . This document discusses how to design, implement, and validate a plan to migrate from Amazon EC2 to Compute Engine.\nThe discussion in this document is intended for cloud administrators who want details about how to plan and implement a migration process. It's also intended for decision-makers who are evaluating the opportunity to migrate and who want to explore what migration might look like.\nThis document is part of a multi-part series about migrating from AWS to Google Cloud that includes the following documents:\n- [Get started](/architecture/migration-from-aws-get-started) \n- Migrate from Amazon EC2 to Compute Engine (this document)\n- [Migrate from Amazon S3 to Cloud Storage](/architecture/migrate-amazon-s3-to-cloud-storage) \n- [Migrate from Amazon Elastic Kubernetes Service (Amazon EKS) to Google Kubernetes Engine](/architecture/migrate-amazon-eks-to-gke) \nThis series assumes that you've read and are familiar with the following documents:\n- [Migrate to Google Cloud: Choose your migration path](/architecture/migration) : presents the Migration to Google Cloud series and helps you understand how each piece of the series relates to other documents.\n- [Migrate to Google Cloud: Get started](/solutions/migration-to-gcp-getting-started) : describes the general migration framework that you follow in this migration.\n- [Migrate to Google Cloud: Best practices for validating a migration plan](/architecture/migration-to-google-cloud-best-practices) : describes potential changes and improvements to your migration plan.\nThe following diagram illustrates the path of your migration journey. For migration scenarios, the Deploy phase is equivalent to performing a migration process.\nYou might migrate from Amazon EC2 to Compute Engine in a series of iterations\u2014for example, you might migrate some workloads first and others later. For each separate migration iteration, you follow the phases of the general migration framework:\n- Assess and discover your workloads and data.\n- Plan and build a foundation on Google Cloud.\n- Migrate your workloads and data to Google Cloud.\n- Optimize your Google Cloud environment.\nFor more information about the phases of this framework, see [Migrate to Google Cloud: Get started](/solutions/migration-to-gcp-getting-started) .\n", "content": "## Assess the source environment\nIn the assessment phase, you determine the requirements and dependencies of the resources that you want to migrate from Amazon EC2 to Compute Engine.\nThe assessment phase consists of the following tasks:\n- Build a comprehensive inventory of your workloads.\n- Catalog your workloads according to their properties and dependencies.\n- Train and educate your teams about Google Cloud.\n- Build experiments and proofs of concept on Google Cloud.\n- Calculate the total cost of ownership (TCO) of the target environment.\n- Decide on the order and priority of the workloads that you want to migrate.\nFor more information about the assessment phase and these tasks, see [Migrate to Google Cloud: Assess and discover your workloads](/solutions/migration-to-gcp-assessing-and-discovering-your-workloads) . The following sections are based on information in that document.\n### Build an inventory of your Amazon EC2 instances\nTo scope your migration, you create an inventory of your Amazon EC2 instances. You can then use the inventory to assess your deployment and operational processes for deploying workloads on those instances.\nTo build the inventory of your Amazon EC2 instances, we recommend that you use [StratoZone](/migrate/stratozone/docs/about-stratozone) . StratoZone lets you import data from Amazon EC2 and other AWS resources by running an [open source data-collection script](https://github.com/GoogleCloudPlatform/aws-to-stratozone-export) . StratoZone then recommends relevant Google Cloud services that you can migrate to.\nWhen you run the AWS data-collection script, we recommend that you do the following:\n- Assess the data-collection script's codebase to evaluate what data the script collects.\n- Run the data-collection script by using an instance of [AWS CloudShell](https://aws.amazon.com/cloudshell/) . Using the shell avoids the need to generate, distribute, and maintain authentication keys to run the data-collection script in other runtime environments.\n- Run the data-collection script by impersonating an account that has minimal, read-only permissions. Using read-only permissions avoids any accidental modifications to your AWS resources.\n- If appropriate, anonymize personally identifiable information (PII) from the reports that the data-collection script generates, such as the IP addresses of your Amazon EC2 instances.\nFor more information about assessing your AWS environment by using StratoZone, see [Import data from other cloud providers](/migrate/stratozone/docs/import-data-scripts) .\nAfter assessing your environment using StratoZone, we recommend that you generate a migration fit assessment report by using the Fit Assessment Tool. For more information, see [Collect guest data from Amazon EC2 instances for fit assessment](/migrate/containers/docs/mfit-aws-collection-tutorial) .\nThe data that StratoZone and the Fit Assessment Tool provides might not fully capture the dimensions that you're interested in. In that case, you can integrate that data with the results from other data-collection mechanisms that you create that are based on AWS APIs, AWS developer tools, and the AWS command-line interface.\nIn addition to the data that you get from the StratoZone script and the Fit Assessment Tool, consider the following data points for each Amazon EC2 instance that you want to migrate:\n- Deployment region and zone.\n- Instance type and size.\n- The Amazon Machine Image (AMI) that the instance is launching from.\n- The instance hostname, and how other instances and workloads use this hostname to communicate with the instance.\n- The instance tags as well as metadata and user data.\n- The instance virtualization type.\n- The instance purchase option, such as on-demand purchase or spot purchase.\n- How the instance stores data, such as using instance stores and Amazon EBS volumes.\n- The instance tenancy configuration.\n- Whether the instance is in a specific placement group.\n- Whether the instance is in a specific autoscaling group.\n- The security groups that the instance belongs to.\n- Any AWS Network Firewall configuration that involves the instance.\n- Whether the workloads that run on the instance are protected by AWS Shield and AWS WAF.\n- Whether you're controlling the processor state of your instance, and how the workloads that run on the instance depend on the processor state.\n- The configuration of the instance I/O scheduler.\n- How you're exposing workloads that run on the instance to clients that run in your AWS environment (such as other workloads) and to external clients.\n### Assess your deployment and operational processes\nAfter you build the inventory of your Amazon EC2 instances, we recommend that you assess your deployment and operational processes. It's vital to have a clear understanding of how your deployment and operational processes work. These are a fundamental part of the practices that prepare and maintain your production environment and the workloads that run there.\nConsider how you complete the following tasks:\n- **Provision and configure your AWS resources** . To prepare your AWS environment, you might have designed and implemented processes that provision and configure resources. For example, you might be using AWS CloudFormation or [Terraform](https://www.terraform.io/) along with configuration management tools to provision and configure your AWS cloud resources.\n- **Generate AMIs for your Amazon EC2 instances** . It's important to assess how you're generating AMIs and what kind of customization you apply to these AMIs. This information helps you ensure that you provide a suitable runtime environment for your workloads. For example, you might be installing operating system (OS) packages or tuning the configuration of the OS.\n- **Generate the artifacts that you deploy on your Amazon EC2 instances** . To deploy your workloads on Amazon EC2, you might be generating deployable artifacts such as packaged workloads and container images. Gathering information about how you're generating these artifacts helps you ensure that the generated artifacts are suitable for deployment on Google Cloud. For example, if you're producing artifacts that you store in an artifact registry on AWS, you must consider how to make these artifacts available in your Google Cloud environment.\n- **Deploy artifacts on your Amazon EC2 instances** . After you generate deployable artifacts, you might deploy them on Amazon EC2. We recommend that you assess each deployment process. The assessment helps ensure that your deployment processes are compatible with Google Cloud. It also helps you understand the effort that will be necessary to eventually refactor the processes. For example, if your deployment processes work only with Amazon EC2, you might need to refactor them to target your Google Cloud environment.\n- **Inject runtime configuration** . You might be injecting runtime configuration for your instances, such as initializing environment variables and other configuration values for specific Amazon EC2 instances, runtime environments, or workload deployments. To help ensure that your runtime configuration injection processes work on Google Cloud, we recommend that you assess how you have the workloads configured on Amazon EC2.\nAfter you assess your deployment and operational processes, we also recommend that you assess how these processes can facilitate your migration to Google Cloud and how they help you reduce the scope and the risk of your migration. For example, you might refactor your artifact-build processes to store artifacts in both AWS and in Google Cloud while the migration is underway. Having artifacts in both environments lets you focus on migrating Amazon EC2 instances without having to implement artifact-build processes in the target Google Cloud environment at the start of the migration process.\n### Complete the assessment\nAfter you build the inventories from your Amazon EC2 environment, complete the rest of the activities of the assessment phase as described in [Migrate to Google Cloud: Assess and discover your workloads](/solutions/migration-to-gcp-assessing-and-discovering-your-workloads) .\n## Plan and build your foundation\nIn the plan and build phase, you provision and configure the infrastructure to do the following:\n- Support your workloads in your Google Cloud environment.\n- Connect your AWS environment and your Google Cloud environment to complete the migration.\n### Build your foundation on Google Cloud\nThe plan and build phase is composed of the following tasks:\n- Build a resource hierarchy.\n- Configure identity and access management.\n- Set up billing.\n- Set up network connectivity.\n- Harden your security.\n- Set up logging, monitoring, and alerting.\nFor more information about each of these tasks, see [Migrate to Google Cloud: Build your foundation](/architecture/migration-to-google-cloud-building-your-foundation) .\n## Migrate your workloads\nTo migrate your workloads from Amazon EC2 to Compute Engine, you do the following:\n- Migrate VMs from Amazon EC2 to Compute Engine.\n- Expose workloads that run on Compute Engine to clients.\n- Refactor deployment and operational processes to target Google Cloud instead of targeting Amazon EC2.\nThe following sections provide details about each of these tasks.\n### Migrate your VMs to Compute Engine\nTo migrate VMs from Amazon EC2 to Compute Engine, we recommend that you use [Migrate to Virtual Machines](/migrate/virtual-machines/docs) , which is a fully managed service. For more information, see [Migration journey with Migrate to VMs](/migrate/virtual-machines/docs/5.0/discover/migrating-vms-migrate-for-compute-engine-getting-started) .\nAs part of the migration, Migrate for VMs migrates Amazon EC2 instances in their current state, apart from [required configuration changes](/migrate/virtual-machines/docs/5.0/resources/vm-adaptations) . If your Amazon EC2 instances run customized Amazon EC2 AMIs, Migrate for VMs migrates these customizations to Compute Engine instances. However, if you want to make your infrastructure reproducible, you might need to apply equivalent customizations by building [Compute Engine operating system images](/compute/docs/images) as part of your [deployment and operational processes](#refactor-deployment-and-operational-processes) , as explained later in this document. You can also [import your Amazon EC2 AMIs into Compute Engine](/compute/docs/import/import-aws-image) .\n### Expose workloads that run on Compute Engine\nAfter you migrate your Amazon EC2 instances to Compute Engine instances, you might need to provision and configure your Google Cloud environment to expose the workloads to clients.\nGoogle Cloud offers secure and reliable services and products for exposing your workloads to clients. For workloads that run on your Compute Engine instances, you configure resources for the following categories:\n- Firewalls\n- Traffic load balancing\n- DNS names, zones, and records\n- [DDoS](https://en.wikipedia.org/wiki/Denial-of-service_attack#Distributed_DoS) protection and web application firewalls\nFor each of these categories, you can start by implementing a baseline configuration that's similar to how you configured AWS services and resources in the equivalent category. You can then iterate on the configuration and use additional features that are provided by Google Cloud services.\nThe following sections explain how to provision and configure Google Cloud resources in these categories, and how they map to AWS resources in similar categories.\nIf you configured AWS security groups and AWS Network Firewall policies and rules, you can configure [Cloud Next Generation Firewall policies and rules](/vpc/docs/about-firewalls) . You can also provision [VPC Service Controls rules](/vpc-service-controls/docs/overview) to regulate network traffic inside your VPC. You can use VPC Service Controls to block unwanted network connections to your Compute Engine instances, and to help mitigate the risk of data exfiltration.\nFor example, if you use AWS security groups to allow or deny connections to your Amazon EC2 instances, you can configure similar [Virtual Private Cloud (VPC) firewall rules](/vpc/docs/firewalls) that apply to your Compute Engine instances.\nIf you've configured Elastic Load Balancing (ELB) in your AWS environment, you can configure [Cloud Load Balancing](/load-balancing/docs/load-balancing-overview) to distribute network traffic to help improve the scalability of your workloads in Google Cloud. Cloud Load Balancing supports several global and regional [load balancing products](/load-balancing/docs/load-balancing-overview#summary-of-google-cloud-load-balancers) that work at different layers of the [OSI model](https://wikipedia.org/wiki/OSI_model) , such as at the transport layer and at the application layer. You can [choose a load balancing product](/load-balancing/docs/choosing-load-balancer) that's suitable for the requirements of your workloads.\nCloud Load Balancing also supports [configuring Transport Layer Security (TLS) to encrypt network traffic](/load-balancing/docs/ssl-certificates) . When you configure TLS for Cloud Load Balancing, you can use [self-managed or Google-managed TLS certificates](/load-balancing/docs/ssl-certificates#certificate-types) , depending on your requirements.\nIf you use Amazon Route 53 in your AWS environment, you can use the following in Google Cloud:\n- [Cloud Domains](/domains/docs/overview) to register your DNS domains.\n- [Cloud DNS](/dns/docs/overview) to manage your [public and private DNS zones](/dns/docs/zones/zones-overview) and your [DNS records](/dns/docs/records-overview) .\nFor example, if you registered a domain by using Amazon Route 53, you can [transfer the domain registration to Cloud Domains](/domains/docs/transfer-domain-from-another-registrar) . Similarly, if you configured public and private DNS zones using Amazon Route 53, you can [migrate that configuration to Cloud DNS](/dns/docs/migrating) .\nIf you configured AWS Shield and AWS WAF in your AWS environment, you can use [Google Cloud Armor](/armor/docs/cloud-armor-overview) to help protect your Google Cloud workloads from DDoS attacks and from common exploits.\n### Refactor deployment and operational processes\nAfter you migrate your VMs to Compute Engine, you refactor your processes to do the following:\n- Provision and configure resources in your Google Cloud environment instead of provisioning AWS resources such as Amazon EC2 instances and Amazon EC2 AMIs.\n- Build, deploy, and configure workloads in Compute Engine instead of deploying workloads in Amazon EC2.\nYou gathered information about these processes during the [assessment phase](#assess-your-deployment-and-operational-processes) earlier in this process.\nThe type of refactoring that you need to consider for these processes depends on how you designed and implemented them. The refactoring also depends on what you want the end state to be for each process. For example, consider the following:\n- You might have implemented these processes in your AWS environment and you intend to design and implement similar processes in Google Cloud.\n- You might have implemented these processes in another, third-party environment outside your AWS environment. In this case, you need to refactor these processes to target your Google Cloud environment instead of your AWS environment.\n- A combination of the previous approaches.\nRefactoring deployment and operational processes can be complex and can require significant effort. If you try to perform these tasks as part of the VM migration, the migration can become complex, and it can expose you to risks. After you assess your deployment and operational processes, you likely have an understanding of their design and complexity. If you estimate that you require substantial effort to refactor your deployment and operational processes, we recommend that you consider refactoring these processes as part of a separate, dedicated project.\nFor more information about how to design and implement deployment processes on Google Cloud, see the following documents:\n- [Migrate to Google Cloud: Deploy your workloads](/architecture/migration-to-gcp-deploying-your-workloads) \n- [Migrate to Google Cloud: Migrate from manual deployments to automated, containerized deployments](/architecture/migration-to-google-cloud-automated-containerized-deployments) ## Optimize your environment after migration\nWhen you complete all of the migration phases, the migration is considered done. However, your Google Cloud environment might need further optimizations. For more information, see [Migration journey with Migrate to VMs: Optimize your environment](/migrate/virtual-machines/docs/5.0/discover/migrating-vms-migrate-for-compute-engine-getting-started#optimize_your_environment_after_migration) .\n## What's next\n- Learn [how to migrate from Amazon S3 to Cloud Storage](/architecture/migrate-amazon-s3-to-cloud-storage) .\n- Read about [other AWS to Google Cloud migration journeys](/architecture/migration-from-aws-get-started) .\n- Learn [how to compare AWS and Azure services to Google Cloud](/free/docs/aws-azure-gcp-service-comparison) .\n- Learn when to [find help for your migrations](/architecture/migration-to-gcp-getting-started#finding_help) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Docs"}