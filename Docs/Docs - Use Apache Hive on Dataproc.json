{"title": "Docs - Use Apache Hive on Dataproc", "url": "https://cloud.google.com/architecture/using-apache-hive-on-cloud-dataproc", "abstract": "# Docs - Use Apache Hive on Dataproc\nLast reviewed 2023-05-08 UTC\n**Important:** We recommend that you use [Dataproc Metastore](/dataproc-metastore/docs) . to manage Hive metadata on Google Cloud, rather than the legacy workflow described in the deployment.\nThis reference architecture describes the benefits of using [Apache Hive](https://hive.apache.org/) on [Dataproc](/dataproc) in an efficient and flexible way by storing Hive data in [Cloud Storage](/storage) and hosting the Hive metastore in a [MySQL](https://www.mysql.com/) database on [Cloud SQL](/sql) .\nThis document is intended for cloud architects and data engineers who are interested in deploying Apache Hive on Dataproc and the Hive Metastore in Cloud SQL.\n", "content": "## Architecture\nThe following diagram shows the lifecycle of a Hive query.\nIn the diagram, the lifecycle of a Hive query follows these steps:\n- Thesubmits a query to a Hive server that runs in an ephemeral Dataproc cluster.\n- Theprocesses the query and requests metadata from the metastore service.\n- Thefetches Hive metadata from Cloud SQL through the Cloud SQL Proxy.\n- Theloads data from thelocated in a [regional bucket](/storage/docs/bucket-locations#location-r) in Cloud Storage.\n- The Hive server returns the result to the.## Design alternatives\nThe following section presents a potential design alternative for this architecture.\n### Multi-regional architecture\nConsider using a multi-regional architecture if you need to run Hive servers in different geographic regions. In that case, you should create separate Dataproc clusters that are dedicated to hosting the metastore service and that reside in the same region as the Cloud SQL instance.\nThe metastore service can sometimes send high volumes of requests to the MySQL database, so it is critical to keep the metastore service geographically close to the MySQL database in order to minimize impact on performance. In comparison, the Hive server typically sends far fewer requests to the metastore service. Therefore, it can be more acceptable for the Hive server and the metastore service to reside in different regions despite the increased latency.\nThe metastore service can run only on Dataproc master nodes, not on worker nodes. Dataproc enforces a minimum of two worker nodes in standard clusters and in [high-availability clusters](/dataproc/docs/concepts/configuring-clusters/high-availability) .\nTo avoid wasting resources on unused worker nodes, you can create a [single-node](/dataproc/docs/concepts/configuring-clusters/single-node-clusters) cluster for the metastore service instead. To achieve high availability, you can create multiple single-node clusters.\nThe Cloud SQL proxy needs to be installed only on the metastore service clusters, because only the metastore service clusters need to directly connect to the Cloud SQL instance. The Hive servers then point to the metastore service clusters by setting the `hive.metastore.uris` [property](https://cwiki.apache.org/confluence/display/Hive/AdminManual+Metastore+Administration#AdminManualMetastoreAdministration-AdditionalConfigurationParameters) to the comma-separated list of URIs. For example:\n```\nthrift://metastore1:9083,thrift://metastore2:9083\n```\nYou can also [consider using a dual-region or multi-region bucket](/storage/docs/bucket-locations#considerations) if the Hive data needs to be accessed from Hive servers that are located in multiple locations. The choice between different bucket location types depends on your use case. You must balance latency, availability, and costs.\nThe following diagram shows an example of a multi-regional architecture.\nAs you can see, the multi-regional scenario is slightly more complex and much more robust. The [deployment guide for this reference architecture](/architecture/using-apache-hive-on-cloud-dataproc/deployment) uses a single-region scenario.\n### Advantages of a multi-regional architecture\nSeparating compute and storage resources offers some advantages:\n- Flexibility and agility: You can tailor [cluster configurations](/dataproc/docs/concepts#configuring-clusters) for specific Hive workloads and scale each cluster independently up and down as needed.\n- Cost savings: You can spin up an [ephemeral cluster](/solutions/migration/hadoop/hadoop-gcp-migration-overview#moving_to_an_ephemeral_model) when you need to run a Hive job and then delete it when the job completes. The resources that your jobs require are active only when they're being used, so you pay only for what you use. You can also use [preemptible VMs](/dataproc/docs/concepts/compute/preemptible-vms) for noncritical data processing or to create very large clusters at a lower total cost.\n- Resilience: For simplicity, this reference architecture uses only one master instance. To increase resilience in production workloads, you should consider creating a cluster with three master instances by using Dataproc's [high availability mode](/dataproc/docs/concepts/configuring-clusters/high-availability) .## Cost optimization\nThis reference architecture and deployment uses the following billable components of Google Cloud:\n- Dataproc\n- Cloud Storage\n- Cloud SQL\nYou can use the [pricing calculator](/products/calculator) to generate a cost estimate based on your projected usage.\nNew Google Cloud users might be eligible for a [free trial](/free-trial) .\n## Deployment\nTo deploy this architecture, see [Deploy Apache Hive on Dataproc](/architecture/using-apache-hive-on-cloud-dataproc/deployment) .\n## What's next\n- Try [BigQuery](/bigquery) , Google's serverless, highly scalable, low-cost enterprise data warehouse.\n- Check out this [guide](/solutions/migration/hadoop/hadoop-gcp-migration-overview) on migrating Hadoop workloads to Google Cloud.\n- Check out this [initialization action](https://github.com/GoogleCloudDataproc/initialization-actions/tree/master/hive-hcatalog) for more details on how to use [Hive HCatalog](https://cwiki.apache.org/confluence/display/Hive/HCatalog) on Dataproc.\n- Learn how to configure Cloud SQL for [high availability](/sql/docs/mysql/configure-ha) to increase service reliability.\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .", "guide": "Docs"}