{"title": "Docs - Deploy Apache Guacamole on GKE and Cloud SQL", "url": "https://cloud.google.com/architecture/deploy-guacamole-gke/deployment", "abstract": "# Docs - Deploy Apache Guacamole on GKE and Cloud SQL\nLast reviewed 2023-11-15 UTC\nThis document describes how you deploy [Apache Guacamole on GKE and Cloud SQL](/architecture/deploy-guacamole-gke) .\nThese instructions are intended for server administrators and engineers who want to host Guacamole on GKE and Cloud SQL. The document assumes you are familiar with deploying workloads to Kubernetes and Cloud SQL for MySQL. We recommend that you be familiar with Identity and Access Management and Google Compute Engine as well.\n", "content": "## Architecture\nThe following diagram shows how a Google Cloud load balancer is configured with IAP, to protect an instance of the Guacamole client running in GKE:\nThe Guacamole client connects to the guacd backend service, which brokers remote desktop connections to one or more Compute Engine VMs. The scripts also deploy a Cloud SQL instance to manage configuration data for Guacamole.\nFor details, see [Apache Guacamole on GKE and Cloud SQL](/architecture/deploy-guacamole-gke) .\n## Objectives\n- Deploy the infrastructure by using Terraform.\n- Create a Guacamole database in Cloud SQL.\n- Deploy Guacamole to a GKE Cluster by using Skaffold.\n- Test a connection to a VM through Guacamole.## Costs\nIn this document, you use the following billable components of Google Cloud:\n- [Compute Engine](https://cloud.google.com/compute/all-pricing) \n- [GKE](https://cloud.google.com/kubernetes-engine/pricing) \n- [Cloud SQL](https://cloud.google.com/sql/pricing) \n- [Artifact Registry](https://cloud.google.com/artifact-registry/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) .\nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .\n## Before you begin\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the Resource Manager, Service Usage, Artifact Registry, and Compute Engine APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=cloudresourcemanager.googleapis.com,serviceusage.googleapis.com,compute.googleapis.com,artifactregistry.googleapis.com) \n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) ## Deploy the infrastructure\nIn this section, you use Terraform to deploy the following resources:\n- Virtual Private Cloud\n- A firewall rule\n- A GKE cluster\n- An Artifact Registry repository\n- Cloud SQL for MySQL\n- A VM for managing the MySQL database\n- Service accounts\nThe Terraform configuration also enables the use of IAP in your project.\n- In Cloud Shell, clone the GitHub repository:```\ngit clone https://github.com/GoogleCloudPlatform/guacamole-on-gcp.git\n```\n- Deploy the required infrastructure by using Terraform:```\ncd guacamole-on-gcp/tf-infraunset GOOGLE_CLOUD_QUOTA_PROJECTterraform init -upgradeterraform apply\n```\n- Follow the instructions to enter your Google Cloud project ID.\n- To approve Terraform's request to deploy resources to your project, enter `yes` .Deploying all resources takes several minutes to complete.## Deploy the Guacamole database\nIn this section, you create the Guacamole database and tables in Cloud SQL for MySQL, and populate the database with the administrator user information.\n- In Cloud Shell, set environment variables and find the database root password:```\ncd ..source bin/read-tf-output.sh\n```Make a note of the database root password; you need it in the following steps.The script reads output variables from the Terraform run and sets the following environment variables, which are used throughout this procedure:```\nCLOUD_SQL_INSTANCEZONEREGIONDB_MGMT_VMPROJECT_IDGKE_CLUSTERGUACAMOLE_URLSUBNET\n```\n- Copy the `create-schema.sql` and `insert-admin-user.sql` script files to the database management VM, and then connect to the VM:```\ngcloud compute scp \\\u00a0 \u00a0 --tunnel-through-iap \\\u00a0 \u00a0 --zone=$ZONE \\\u00a0 \u00a0 create-schema.sql \\\u00a0 \u00a0 insert-admin-user.sql \\\u00a0 \u00a0 $DB_MGMT_VM:gcloud compute ssh $DB_MGMT_VM \\\u00a0 \u00a0 --zone=$ZONE \\\u00a0 \u00a0 --tunnel-through-iap\n```A console session to the Database Management VM through Cloud Shell is now established.\n- Install MySQL client tools:```\nsudo apt-get updatesudo apt-get install -y mariadb-client\n```\n- Connect to Cloud SQL and create the database. When prompted for a password, use the root password you noted earlier in this section.```\nexport CLOUD_SQL_PRIVATE_IP=$(curl http://metadata.google.internal/computeMetadata/v1/instance/attributes/cloud_sql_ip -H \"Metadata-Flavor: Google\")mysql -h $CLOUD_SQL_PRIVATE_IP -u root -p\n```\n- Grant the database user permissions over the newly created database:```\nCREATE DATABASE guacamole;USE guacamole;GRANT SELECT,INSERT,UPDATE,DELETE ON guacamole.* TO 'guac-db-user';FLUSH PRIVILEGES;SOURCE create-schema.sql;SOURCE insert-admin-user.sql;quit\n```\n- After the MySQL commands finish running, exit the VM SSH session:```\nexit\n```## Deploy Guacamole to GKE by using Skaffold\nIn this section, you deploy the Guacamole application to the GKE cluster, by using [Skaffold](https://skaffold.dev/) . Skaffold handles the workflow for building, pushing, and deploying the Guacamole images to the GKE clusters.\n- In Cloud Shell, deploy the GKE configuration by using terraform:```\ncd tf-k8sterraform init -upgradeterraform apply -parallelism=1\n```\n- Get credentials for the GKE cluster:```\ngcloud container clusters get-credentials \\\u00a0 \u00a0 --region $REGION $GKE_CLUSTER\n```\n- Run Skaffold from the root of the cloned git repository:```\ncd ..skaffold --default-repo $REGION-docker.pkg.dev/$PROJECT_ID/guac-repo run\n```The Skaffold tool builds container images for Guacamole through [Google Cloud Build](https://skaffold.dev/docs/builders/build-environments/cloud-build/) (the command line includes a flag that specifies which repository to push the images to). The tool also runs a [kustomize](https://kustomize.io/) step to generate Kubernetes ConfigMaps and Secrets based on the output of the Terraform run.\n- Verify that the certificate was provisioned:```\nkubectl get -w managedcertificates/guacamole-client-cert \\-n guacamole \\-o jsonpath=\"{.spec.domains[0]} is {.status.domainStatus[0].status}\"\n```Provisioning the certificate can take up to 60 minutes to complete.\n- Once the certificate is provisioned, you can visit your URL in a browser.- View the URL from the terraform output:```\necho $GUACAMOLE_URL\n```\n- In a browser window, enter the URL that you got in the previous step.\n- When IAP prompts you, sign in with your Google credentials.After you sign in, you are logged into Guacamole with administrative privileges, based on the `insert-admin-user.sql` script you ran previously in this procedure. **Note:** The OAuth configuration created by this procedure is set to [internal](https://support.google.com/cloud/answer/6158849) . This means you must use a Google Account in the same organization as the one you used to deploy Guacamole in this procedure; otherwise, you receive an `HTTP/403 org_internal` error. If your browser session is already signed into a different Google Account, try connecting to the URL in an incognito mode tab.You can now add additional users based on their email address through the Guacamole user interface. For details, see [Administration in the Guacamole documentation](https://guacamole.apache.org/doc/gug/administration.html) . These additional users also require permissions through Google IAM, with the `IAP-secured Web App User` role.\n## Test a connection to a VM\nAfter you deploy, configure, and successfully sign in to Guacamole, you can create a Windows VM and connect to the newly created VM through Guacamole.\n### Create a VM\n- In Cloud Shell, create a Windows VM to test connections to:```\nexport TEST_VM=windows-vmgcloud compute instances create $TEST_VM \\\u00a0 \u00a0 --project=$PROJECT_ID \\\u00a0 \u00a0 --zone=$ZONE \\\u00a0 \u00a0 --machine-type=n1-standard-1 \\\u00a0 \u00a0 --subnet=$SUBNET \\\u00a0 \u00a0 --no-address \\\u00a0 \u00a0 --image-family=windows-2019 \\\u00a0 \u00a0 --image-project=windows-cloud \\\u00a0 \u00a0 --boot-disk-size=50GB \\\u00a0 \u00a0 --boot-disk-type=pd-standard \\\u00a0 \u00a0 \u2014-shielded-secure-boot\n```After running the command, you may need to wait a few minutes for Windows to finish initializing, before you proceed to the next step.\n- Reset the Windows password for the VM you just created:```\ngcloud compute reset-windows-password $TEST_VM \\\u00a0 \u00a0 --user=admin \\\u00a0 \u00a0 --zone=$ZONE\n```\n### Add a new connection to the VM\n- In a browser window, enter the Guacamole instance URL from [Deploy Guacamole to GKE using Skaffold](#deploy-guacamole-to-gke-by-using-skaffold) , and then sign in through IAP.\n- In the Guacamole UI, click your username, and then click **Settings** .\n- Under the **Connections** tab, click **New Connection** .- In the **Name** field, enter a name for the connection.\n- In the **Location** field, enter the location for the connection.\n- From the **Protocol** drop-down list, select **RDP** .\n- Under **Network** , in the **Hostname** field, enter the name of the VM you created, `windows-vm` .Your project DNS resolves this hostname to the instance's internal IP address. **Note:** If you choose to create your VM in a different zone than your Guacamole GKE cluster, you need to fully qualify the VM name. For details, see [Internal DNS](/compute/docs/internal-dns) .\n- In the **Authentication** section, set the following fields:- **Username:** `admin`\n- **Password:** the password you got when you reset the password for the VM\n- **Security mode:** `NLA`(Network Level Authentication)\n- **Ignore server certificate:** select the checkboxCompute Engine Windows VMs are provisioned with a self-signed certificate for Remote Desktop Services, so you need to instruct Guacamole to ignore certificate validation issues.\n- Click **Save** .\n- Click your username, and select **Home** .\n- Click the connection you just created to test connectivity. After a few seconds, you should see the desktop of the VM instance.\nFor more details on configuring Guacamole, see the [Apache Guacamole Manual](https://guacamole.apache.org/doc/gug/) .\n## Clean up\nTo avoid incurring charges to your Google Cloud account for the resources used in this procedure, either delete the project that contains the resources, or keep the project and delete the individual resources.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.### Delete the new resources\nAs an alternative to deleting the entire project, you can delete the individual resources created during this procedure. Note that the OAuth Consent Screen configuration cannot be removed from a project, only modified.\n- In Cloud Shell, use terraform to delete the resources:```\ncd ~/guacamole-on-gcp/tf-k8sterraform destroycd ~/guacamole-on-gcp/tf-infraterraform destroygcloud compute instances delete $TEST_VM \u2013-zone=$ZONE\n```## What's next\n- Review the GKE guidance on [Hardening your cluster's security](/kubernetes-engine/docs/how-to/hardening-your-cluster) .\n- Review [Encrypt secrets at the application layer](/kubernetes-engine/docs/how-to/encrypting-secrets) to learn how to boost security for secrets, such as database credentials and OAuth credentials.\n- Review [IAM Conditions](/iam/docs/conditions-overview) to learn how to provide more granular control over user access to Guacamole.\n- Understand more about how IAP integration works by reviewing the custom authentication provider in the [GitHub repository](https://github.com/GoogleCloudPlatform/guacamole-on-gcp) .\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .", "guide": "Docs"}