{"title": "Docs - Patterns for automated compliance testing using Chef InSpec", "url": "https://cloud.google.com/architecture/patterns-automated-compliance-testing-chef-inspec", "abstract": "# Docs - Patterns for automated compliance testing using Chef InSpec\nLast reviewed 2023-11-24 UTC\nThis document describes patterns for automating policy and compliance checks for your Google Cloud resources using [Chef InSpec](https://community.chef.io/tools/chef-inspec/) , an open source infrastructure testing framework. This document is for architects and DevOps practitioners who want to integrate continuous compliance testing into their software development workflow.\n", "content": "## Policy and compliance in Google Cloud\nGoogle Cloud provides a range of tools to help you enforce and audit policy and compliance requirements:\n| Service      | Description                                                                                                                                                                                                    |\n|:----------------------------||\n| Resource hierarchy   | You can use the resource hierarchy to map your company's operational structure to Google Cloud, and to manage access control and permissions for groups of related resources. You can define groups of related resources, and apply consistent controls to all resources in the group. For example, you can group all of your Google Cloud projects that are subject to Payment Card Industry Data Security Standard (PCI DSS) compliance into a particular folder. You can then apply relevant controls to all projects in that folder.                                                                    |\n| Organization Policy Service | You use the Organization Policy Service to define constraints that limit the availability or functionality of Google Cloud services. For example, you can use the resource location constraint to limit the set of regions where location-based resources like virtual machines can be created. The Organization Policy Service works together with the resource hierarchy. You can apply organization policies at different levels of the hierarchy. For example, you can define an organization policy for your projects that are subject to PCI compliance and apply the policy to the PCI folder.                                                     |\n| Security Command Center  | You can use Security Command Center for centralized visibility of all your Google Cloud resources. Security Command Center automatically analyses your cloud resources for known vulnerabilities and provides a single user interface and data platform to aggregate and manage security findings. Security Health Analytics can provide monitoring and reporting for compliance standards like PCI DSS, and industry standards like the Center for Internet Security (CIS) benchmark. You can view the reports in a compliance dashboard and then export them. Security Command Center integrates with several third-party security sources and provides an API so you can add and manage your custom findings. Security Command Center provides a unified interface for all your security and compliance findings. |\n| Config Sync     | If you use GKE Enterprise, you can use Config Sync to keep your Kubernetes clusters in sync with configurations defined in a Git repository. The Git repository acts as the single source of truth for your cluster configuration and policies. Config Sync continuously audits your GKE Enterprise environment to identify and fix clusters that deviate from the configuration defined in your repository.                                                                                                    |\n| Policy Controller   | If you use GKE Enterprise, you can use Policy Controller, a Kubernetes dynamic admission controller, to enforce fully programmable policies for your clusters. Using Policy Controller, you can prevent the creation of objects within your clusters that don't satisfy your policy requirements. For example, you can create policies to enforce Pod security.                                                                                                               |\n## Introducing Chef InSpec\n[Chef InSpec](https://community.chef.io/tools/chef-inspec/) is an open source infrastructure testing framework with a human-readable domain-specific language (DSL) for specifying compliance, security, and policy requirements.\nWith Chef InSpec, you can do the following:\n- Define compliance requirements as code and test your cloud infrastructure against those requirements.\n- Enable development teams to add application-specific tests and assess the compliance of their applications to security policies before pushing changes to the production environment.\n- Automate compliance verification in CI/CD pipelines and as part of the release process.\n- Test your Google Cloud infrastructure in the same way that you test your infrastructure in other cloud environments.\nGoogle Cloud provides several resources to help you get started with Chef InSpec:\n- The [Google Cloud InSpec resource pack](https://github.com/inspec/inspec-gcp) contains the baseline resources for writing Chef InSpec tests against Google Cloud objects.\n- The [Google Cloud InSpec CIS profile](https://github.com/GoogleCloudPlatform/inspec-gcp-cis-benchmark) contains a set of Chef InSpecs tests that assess the security posture of your Google Cloud projects against the Center for Internet Security (CIS) Benchmark.## Best practices for using Chef InSpec with Google Cloud\nThe following are general best practices for using Chef InSpec:\n- Define and adopt a process for fixing the violations discovered by your Chef InSpec tests. Chef InSpec highlights violations to your policy and compliance requirements, but it doesn't perform any remediation.\n- Grant appropriate [IAM](/iam) permissions to the service account that you use to run the Chef InSpec tests. For example, if you are testing Cloud Storage buckets, the service account must have the appropriate [IAM roles for Cloud Storage](/storage/docs/access-control/iam-roles) .\n- Configure Chef InSpec [reporters](https://docs.chef.io/inspec/reporters/) to produce formatted reports that describe the tests and results. You can store these reports to provide a historical record. You can also use these reports as inputs to your other security and compliance tools. For example, you can [Integrate Chef InSpec and Security Command Center](#integrating-chef-inspec-and-security-command-center) .\n- Group related Chef InSpec tests into [profiles](https://docs.chef.io/inspec/profiles/) . You can create different profiles for different use cases. For example, you might run a comprehensive, end-to-end profile as part of your scheduled nightly tests. Or, you might run a shorter, more focused profile in response to real-time events.\n### Write Chef InSpec tests\nYou write Chef InSpec tests using the [Chef InSpec DSL](https://docs.chef.io/inspec/dsl_inspec/) , which is a Ruby DSL for writing audit controls.\nThe following code shows a control for validating attributes of Cloud Storage buckets:\n```\ncontrol 'policy_gcs_bucket' do\u00a0title 'Cloud Storage bucket policy'\u00a0desc 'Compliance policy checks for Cloud Storage bucket'\u00a0impact 'medium'\u00a0google_storage_buckets(project: project_id).bucket_names.each do |bucket|\u00a0 \u00a0describe \"[#{project_id}] Cloud Storage Bucket #{bucket}\" do\u00a0 \u00a0 \u00a0subject { google_storage_bucket(name: bucket) }\u00a0 \u00a0 \u00a0its('storage_class') { should eq 'STANDARD' }\u00a0 \u00a0 \u00a0its('location') { should be_in ['EUROPE-WEST2', 'EU'] }\u00a0 \u00a0 \u00a0end\u00a0 \u00a0end\u00a0end\n```\nThe control specifies the following information:\n- Metadata that describes the control\n- Impact or severity of failures\n- Policy checks that verify attributes of each Cloud Storage bucket in your project\n### Run Chef InSpec tests with Cloud Build\nThe patterns described in this document use [Cloud Build](/cloud-build/docs/overview) and the Chef InSpec [container image](https://hub.docker.com/r/chef/inspec) to run the InSpec tests. By using Cloud Build, you can run container images, and chain build steps together to form a pipeline. For example, you can run the Chef InSpec tests in one build step, and then export or analyze the generated reports in a subsequent step. However, using Cloud Build is not required. You can integrate Chef InSpec with whatever tools you use.\nThe following [Cloud Build configuration file](/cloud-build/docs/build-config) shows a pipeline with two build steps:\n```\nsteps:- id: 'run-inspec-cis'\u00a0 name: chef/inspec:latest\u00a0 entrypoint: '/bin/sh'\u00a0 args:\u00a0 \u00a0- '-c'\u00a0 \u00a0- |\u00a0 \u00a0 \u00a0inspec exec https://github.com/GoogleCloudPlatform/inspec-gcp-cis-benchmark.git \\\u00a0 \u00a0 \u00a0--target gcp:// \\\u00a0 \u00a0 \u00a0--input gcp_project_id=${PROJECT_ID} \\\u00a0 \u00a0 \u00a0--reporter cli json:/workspace/report.json \\\u00a0 \u00a0 \u00a0--chef-license accept || touch fail.marker- id: 'store-report'\u00a0 name: gcr.io/cloud-builders/gsutil:latest\u00a0 args:\u00a0 \u00a0- cp\u00a0 \u00a0- /workspace/report.json\u00a0 \u00a0- gs://${_REPORTS_BUCKET}/cis-report-${BUILD_ID}.json\n```\nThe first step runs the [Google Cloud CIS benchmark](https://github.com/GoogleCloudPlatform/inspec-gcp-cis-benchmark) tests and generates a report in JSON format. The build step uses the `chef/inspec` container image, and fetches the tests from the public Google Cloud CIS GitHub repository. The second build step copies the generated report to a Cloud Storage bucket.\nFor simplicity, the preceding example references the `latest` tag for all the container images. To help make your builds reproducible, we recommend that you reference a specific, fixed container image version, rather than a rolling one, such as `latest` .\nIf any of the tests fail, Chef InSpec returns an error. Instead of failing the build, the first build step writes a `fail.marker` file and the second build step runs even if any of the Chef InSpec tests fail. If you want to explicitly fail the build to highlight the errors, you can check for the `fail.marker` file in a final build step, and fail the build if it exists.\n## Analyze Chef InSpec reports\nYou can configure Chef InSpec [reporters](https://docs.chef.io/inspec/reporters/) to produce formatted reports that describe the InSpec tests and results. You can store these reports to provide a historical record. You can also use these reports as inputs to your other security and compliance tools, or to generate visualizations or alerts. The patterns described later in this document recommend storing your Chef InSpec reports in a Cloud Storage bucket.\nThe following diagram shows how you can store the reports and automatically trigger further action.\nAdding the report to a Cloud Storage bucket generates an event. You can trigger further action or analysis of the report in response to this event. In the preceding diagram, you trigger a Cloud Function that writes details of the Chef InSpec tests to BigQuery and another Cloud Function that adds findings to Security Command Center.\n### Integrate Chef InSpec and Security Command Center\nSecurity Command Center is the canonical security and risk database for Google Cloud. Security Command Center provides centralized visibility of all your Google Cloud resources, and automatically analyses your cloud resources for known vulnerabilities. We recommend enabling Security Command Center for your organization.\nYou can add the results of your Chef InSpec tests to Security Command Center. Security Command Center acts as the centralized data platform to aggregate and manage security findings from multiple sources.\nSecurity Command Center includes [Security Health Analytics](/security-command-center/docs/concepts-vulnerabilities-findings) . Security Health Analytics automatically scans your Google Cloud projects and resources for common vulnerabilities. For example, Security Health Analytics runs scans that assess your projects against the CIS Google Cloud Foundation 1.0 benchmark. You can also run a similar set of tests using the [Google Cloud InSpec CIS profile](https://github.com/GoogleCloudPlatform/inspec-gcp-cis-benchmark) . You should compare the scope of your Chef InSpec tests such that the tests don't duplicate the checks performed by Security Health Analytics.\nThere are several ways to add Chef InSpec findings to Security Command Center:\n- Use [Chef Automate for Security Command Center](https://console.cloud.google.com/marketplace/details/chefsoftware/chef-automate-integration-for-google-cscc) to provide automatic integration of Chef InSpec test results into Security Command Center.\n- Use the [Security Command Center API](/security-command-center/docs/how-to-programmatic-access) to create a [custom source](/security-command-center/docs/how-to-api-create-manage-security-sources) for Chef InSpec, and then [create findings](/security-command-center/docs/how-to-api-create-manage-findings) to capture any violations discovered by your Chef InSpec tests.## Patterns\nThis section describes patterns for integrating Chef InSpec into your day-to-day operations. You can combine these patterns to achieve continuous compliance testing.\n### Schedule Chef InSpec tests\nIn this pattern, you run your set of Chef InSpec tests on a fixed schedule. We recommend this fixed schedule approach as a good way to get started with Chef InSpec because you can introduce Chef InSpec tests without modifying your existing processes.\nThe following diagram shows how you can run your tests on a schedule.\nIn the preceding diagram, you create a [Cloud Scheduler](/scheduler/docs) job that runs with your preferred frequency. Each time your job runs, it triggers a Cloud Build pipeline that runs your Chef InSpec tests and outputs the test report to Cloud Storage. For more information, see [Scheduling builds](/build/docs/automating-builds/schedule-builds) .\nThis pattern has the following benefits:\n- You can introduce Chef InSpec tests with minimum changes to your existing processes.\n- You can use Chef InSpec tests independently of any process that you use to provision and manage your infrastructure and apps.\nThis pattern has the following limitations:\n- The Chef InSpec tests are decoupled from your infrastructure provisioning, which makes it harder to attribute particular changes to failed Chef InSpec tests.\n- The Chef InSpec tests run only periodically, so there might be some delay before you identify compliance or policy violations\n### Integrate directly with your CI/CD pipelines\nMany organizations automate the provisioning and management of their infrastructure by using tools like [Terraform](https://www.terraform.io/) or [Config Connector](/config-connector/docs) . Typically, infrastructure is created or changed only as part of a CI/CD pipeline. For more information about CI/CD concepts on Google Cloud, see [Modern CI/CD with GKE Enterprise](/solutions/modern-cicd-anthos-user-guide) .\nIn this pattern, you add Chef InSpec tests as additional steps in your infrastructure deployment pipelines so that you can validate your infrastructure whenever you run your deployment pipeline. You can fail the build if there are any compliance violations.\nThe following diagram shows a common workflow where the deployment pipeline is triggered based on a commit that includes infrastructure changes.\nIn the preceding diagram, the infrastructure changes are applied to a test or staging environment, and then the Chef InSpec tests are run against that environment. If all Chef InSpec checks are compliant, you can merge and apply the infrastructure changes to the production environment, and the Chef InSpec tests run again against the production environment.\nThis pattern has the following benefits:\n- The Chef InSpec tests are integrated directly into your deployment process so violations are quickly identified.\n- If the Chef InSpec tests don't pass, you can explicitly fail the deployment.\nThis pattern has the following limitations:\n- The Chef InSpec tests are directly integrated with your build pipelines, so the team that manages your build pipeline must understand the Chef InSpec tests\n- If you have multiple builds that require Chef InSpec tests, you must add Chef InSpec steps into each individual build, which might make it more difficult to maintain and scale your Chef InSpec efforts.\n### Integrate indirectly with your CI/CD pipelines\nThis pattern is similar to the previous pattern, but instead of directly running your Chef InSpec tests as a step within your deployment pipeline, you run your Chef InSpec tests in a separate pipeline. This separate pipeline is triggered by your deployment pipelines. You can keep your Chef InSpec logic separate from your infrastructure pipelines, but still run your compliance and policy tests as part of your deployment workflow.\nCloud Build automatically generates [build notifications](/cloud-build/docs/subscribe-build-notifications) when your build's state changes\u2014for example, when your build is created, when your build transitions to a working state, and when your build completes. The notification messages are published to a [Pub/Sub](/pubsub) topic and contain information about the build, including the individual build steps and their arguments.\nThe following diagram shows how you can create a [Cloud Function](/functions) that is automatically triggered whenever a message is published to the build notification Pub/Sub topic.\nIn the preceding diagram, the function can inspect the build notification message, and then trigger your Chef InSpec pipeline when required. For example, you only want to trigger the Chef InSpec pipeline in response to successful builds that contain particular build steps.\nThis pattern has the following benefits:\n- The Chef InSpec tests are independent of your deployment pipelines. The teams that manage the deployment pipelines don't need to interact with Chef InSpec.\n- You can centralize your Chef InSpec tests, making it easier to maintain and scale your Chef InSpec efforts.\n- You can selectively run the Chef InSpec tests depending on the results and output of the upstream builds.\nThis pattern has the following limitations:\n- You must write and maintain code to parse and analyze the build notification messages to determine whether to run your Chef InSpec tests and to pass parameters to your Chef InSpec tests.\n- Cloud Build notifications are published to a Pub/Sub topic in the same project. If you have builds in multiple projects, you need to deploy the Cloud Function to each project.\n### Trigger Chef InSpec tests in response to Cloud Asset Inventory notifications\n[Cloud Asset Inventory](/asset-inventory/docs/overview) provides an inventory of all your Google Cloud resources. You can use Cloud Asset Inventory to search, analyze, and export your assets and asset metadata across your Google Cloud projects, folders, and organization. You can also use Cloud Asset Inventory to send real-time [notifications](/asset-inventory/docs/monitoring-asset-changes) about changes to your cloud resources and policies.\nThe following diagram shows how you can run your Chef InSpec tests based on notifications from Cloud Asset Inventory.\nThe preceding diagram shows how you can get near real-time feedback on any new or updated cloud resources that are not compliant. You can filter the notifications so that you are notified only for changes to certain types of resources. You can use these notifications to trigger targeted, resource-specific Chef InSpec tests. For example, you run a particular set of tests whenever a Cloud Storage bucket is created, and run a different set of Chef InSpec tests when an IAM policy is updated.\nThis pattern has the following benefits:\n- You can trigger targeted, resource-specific Chef InSpec tests depending on the particular changes to your cloud assets.\n- Cloud Asset Inventory notifications are delivered in near real time, so any compliance or policy violations are quickly identified.\n- You can use this pattern independently of any process that you use to provision and manage your infrastructure. The Chef InSpec tests are run regardless of whether infrastructure is created or changed by an individual developer or a CI/CD pipeline.\n- Cloud Asset Inventory can generate notifications about changes to your resources across your whole organization or from selected folders or projects. You can execute particular sets of Chef InSpec tests depending on the folder or project the change originated from.\n- You can use this pattern alongside the other patterns. For example, many organizations don't have automated deployments in place for their development or sandbox environments. You can use this pattern to perform selected policy checks on these environments, while integrating with your CI/CD pipelines for your production and staging environments.\nThis pattern has the following limitations:\n- This pattern might not be practical if there is a large volume of changes to your cloud assets because your Chef InSpec tests might be triggered by each change.\n- You must write and maintain code to parse and analyze the Cloud Asset Inventory notification messages to determine whether to run your Chef InSpec tests## What's next\n- Try the [Cloud Shell walkthrough](https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2FGoogleCloudPlatform%2Finspec-gcp-cis-benchmark&cloudshell_tutorial=walkthrough.md) to quickly install Chef InSpec in your Cloud Shell instance and scan infrastructure in your Google Cloud projects against the CIS Benchmark.\n- Visit the Google Cloud [Compliance resource center](/security/compliance) .\n- Read [enterprise foundations blueprint](/architecture/security-foundations) .\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .", "guide": "Docs"}