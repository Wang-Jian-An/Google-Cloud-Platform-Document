{"title": "Docs - Migrate WebSphere applications to containers with Migrate to Containers", "url": "https://cloud.google.com/architecture/migrating-was-apps-to-containers-with-migrate-for-anthos", "abstract": "# Docs - Migrate WebSphere applications to containers with Migrate to Containers\nLast reviewed 2021-12-22 UTC\nThis document is for application owners and cloud architects looking to migrate Java applications running on [IBM WebSphere Application Server](https://www.ibm.com/cloud/websphere-application-server) (WAS) to containers running in [Google Kubernetes Engine (GKE)](/kubernetes-engine/docs) or [GKE Enterprise](/anthos/docs) . It guides you through the process to migrate WAS traditional applications to containers from a source environment that is on-premises, in a private hosting environment, or in another cloud provider. It also highlights the benefits of using [Migrate to Containers](/migrate/anthos) to automate your migration.\nYou should have prior WebSphere knowledge before trying to migrate WebSphere VMs to containers with Migrate to Containers.\nThis document also contains important points for you to consider when planning a WAS application migration to containers. It's part of a multi-part series about migrating to Google Cloud. If you're interested in an overview of the series, see [Migration to Google Cloud: Choosing your migration path](/solutions/migration-to-gcp-choosing-your-path) .\nRead this document if you're planning to migrate WAS traditional applications running a compatible WAS on a [compatible operating system](/migrate/anthos/docs/compatible-os-versions) , such as Linux, from a [supported source environment](/migrate/anthos/docs/migration-prerequisites#supported_vm_source_platforms) to a [GKE or GKE Enterprise environment](/migrate/anthos/docs/getting-started) with Migrate to Containers. These source environments can include the following:\n- A [Compute Engine](/compute) environment\n- A [VMware vSphere](https://www.vmware.com/products/vsphere.html) environment\n- A [Microsoft Azure VM](https://azure.microsoft.com/en-us/services/virtual-machines/) environment\n- An [Amazon Elastic Compute Cloud (Amazon EC2)](https://aws.amazon.com/ec2/) environment\nMigrate to Containers automates the use of [IBM Migration Toolkit for Application Binaries](https://www.ibm.com/support/pages/migration-toolkit-application-binaries) to discover, inspect, and migrate all your WAS traditional applications in your WAS traditional virtual machines. It then splits those WAS traditional applications into individual [WebSphere traditional containers](https://hub.docker.com/r/ibmcom/websphere-traditional) .\nMigrating WAS traditional applications using Migrate to Containers requires a small footprint (minimums of 1-GB RAM and 2-GB image size) and reduced licensing costs (up to 70% off a WAS Network Deployment subscription).\nBy migrating WAS traditional applications with Migrate to Containers, you [benefit from several aspects](/migrate/anthos/docs/anthos-migrate-benefits) of a containerized environment. There are the reduced licensing costs discussed previously. There is also the ability to future-proof further modernization into built-in cloud frameworks by creating [WAS Liberty](https://www.ibm.com/cloud/websphere-liberty) or [Open Liberty](https://openliberty.io/) containers for your applications.\nWAS Liberty is a lightweight production runtime for rapid web- and cloud-based application development and deployment. It is built on the open source Open Liberty project. Companies use both WAS Liberty and Open Liberty to build cloud-based Java microservices.\nMigrating to GKE Enterprise or GKE offloads WAS Network Deployment manager functionality to the following products:\n- [Kubernetes](https://kubernetes.io/docs/home/) \n- [Anthos Service Mesh](/service-mesh/docs) \n- [Config Sync](/anthos-config-management/docs/config-sync-overview) \n- [Google Cloud operations](/products/operations#section-4) \nThe following diagram shows how GKE or GKE Enterprise manages centralized functionality (high availability, workload placement, and centralized configuration, for example) which was previously managed by WAS Network Deployment. Application-specific configuration is managed at Docker image build time. Using a Docker-image-based configuration enables repeatability and automation through CI/CD processes.\nMigrating WAS traditional applications to containers with Migrate to Containers is one of the possible steps in your [workload modernization journey](/solutions/migration-to-gcp-getting-started#improve_and_move) . Migrating helps you to both transform the applications so they run in a cloud environment and avoid the expensive rewrites needed to modernize WAS traditional applications.\nIdeal migration candidates are applications running on supported WebSphere Network Deployment, WebSphere Base, or supported Java versions for which modernization through a complete rewrite is too expensive\u2014in terms of resources\u2014or isn't possible at all. To learn more about ideal migration candidates, see [Migrating VMs to containers with Migrate to Containers](/architecture/migrating-vms-to-containers-with-migrate-for-anthos) .\n", "content": "## Design the migration to Google Cloud\nTo migrate your WAS traditional applications from your source environment to containers running in Google Cloud, follow the framework described in the [Migration to Google Cloud series](/solutions/migration-to-gcp-getting-started) .\nThe following diagram illustrates the path of your migration journey:\nThe framework illustrated in the preceding diagram has four phases:\n- **Assess:** In this phase, you assess your source environment, assess the applications that you want to migrate to Google Cloud, and assess which WAS traditional applications are suitable for migration.\n- **Plan:** In this phase, you create the basic infrastructure for Migrate to Containers, such as provisioning the resource hierarchy and setting up network access.\n- **Deploy:** In this phase, you migrate the WAS traditional applications from the source environment to GKE or GKE Enterprise with Migrate to Containers.\n- **Optimize:** In this phase, you begin to take advantage of the cloud technologies and capabilities.## Assess the source environment and applications\nIn the [assessment phase](/solutions/migration-to-gcp-assessing-and-discovering-your-workloads) , you gather information about your source environment and the applications that you want to migrate. Doing so helps you rightsize the resources that you need\u2014both for the migration and your target environment.\nIn the assessment phase, you:\n- Build a comprehensive inventory of your applications.\n- Catalog your applications according to their properties and dependencies.\n- Train and educate your teams on Google Cloud.\n- Build an experiment and proof of concept on Google Cloud.\n- Calculate the total cost of ownership (TCO) of the target environment.\n- Choose the applications that you want to migrate first.\nThe following sections rely on [Migration to Google Cloud: Assessing and discovering your workloads](/solutions/migration-to-gcp-assessing-and-discovering-your-workloads) . However, they provide information that is specific to assessing the WAS traditional applications that you want to migrate to containers with Migrate to Containers.\n### Build your inventories\nTo scope your migration, you must understand your WAS traditional environment. To understand your environment, gather information about your applications and their dependencies.\n[Building an inventory of your apps](/solutions/migration-to-gcp-assessing-and-discovering-your-workloads#building_an_inventory_of_your_apps) describes how to build an inventory of your workloads in your WAS traditional environment and their dependencies. Follow that guidance and build your inventories. When you're done with that work, continue reading this document.\nNow that you've built an inventory of your workloads and their dependencies, you refine the inventory. Assess the aspects and features that are of interest to your organization when it migrates its WAS traditional applications with Migrate to Containers.\nBefore assessing your WAS environment for migration, complete the assessment work in [Migrating VMs to containers with Migrate to Containers](/architecture/migrating-vms-to-containers-with-migrate-for-anthos#assessing_the_source_environment_and_workloads) and [Migration to Google Cloud: Assessing and discovering your workloads](/architecture/migration-to-gcp-assessing-and-discovering-your-workloads) . When you're done with that work, complete the inventory of your workloads.\nTo complete the inventory of your workloads, consider the following:\n- **Operating systems running in your WAS VMs:** Gather information about the operating systems and their licenses running in your WAS VMs, and ensure that the operating system is a 64-bit Linux operating system listed in [Compatible operating systems and Kubernetes versions](/migrate/anthos/docs/compatible-os-versions) .\n- **WAS versions running your applications:** Gather information about the WAS versions running your applications, and ensure their compatibility with Migrate to Containers. Migrate to Containers supports migrating traditional WAS applications (WebSphere Application Server traditional 8.5.5.x, and WebSphere Application Server traditional 9.0.5.x versions) for both [WAS base](https://www.ibm.com/docs/en/was) and [WAS Network Deployment](https://www.ibm.com/docs/was-nd) environments.\n- **Applications deployed in your WAS:** Assess which applications are deployed in each WAS. Then map the dependencies between your applications, and between your applications and external services. Next, gather information about the configuration sources of your applications. For example, are you using:- Environment variables\n- Non-standard WAS installation paths\n- LDAP user registries\n- Security role mappings\n- Modifications to apply a class to your loader order\n- **Migrate to Containers fit score:** Assess if your WAS traditional applications are fit to migrate with Migrate to Containers. Migrate to Containers provides a [fit assessment tool](/migrate/anthos/docs/fit-assessment) that you can run on your WAS traditional applications to compute a fit score. Migrate to Containers has a set of minimal requirements to successfully migrate WAS traditional applications. It also has some limitations when automating WAS traditional applications migration. You can address these limitations by manually configurating the applications when you migrate them.\n- **Authentication:** WAS provides several authentication mechanisms such as [Simple WebSphere Authentication Mechanism](https://www.ibm.com/docs/en/was/9.0.5?topic=mechanism-simple-websphere-authentication-deprecated) (SWAM), [ Lightweight Third Party Authentication](https://www.ibm.com/docs/en/was/9.0.5?topic=mechanism-lightweight-third-party-authentication) (LTPA), and [Kerberos](https://www.ibm.com/docs/en/was/9.0.5?topic=mechanism-kerberos-krb5-authentication-support-security) . You can only configure one user registry implementation as the active user registry of the WAS security domain. Migrate to Containers doesn't automatically migrate authentication details. That means configuring authentication normally requires some manual configuration during migration.\n- **Data Access (JDBC):** The J2EE connector architecture defines a standard resource adapter that connects WAS to enterprise information systems. The adapter provides connectivity between the enterprise information system, the application server, and the applications. Migrate to Containers automatically migrates the JDBC configuration to the modernized WAS container. Ensure that you have enabled connectivity between your migrated applications and the existing data stores.\n- **Messaging (JMS):** WAS supports asynchronous communication through the Java Messaging Service (JMS) programming interface. Migrate to Containers automatically migrates JMS configuration information. However, some manual migration work is required for specific configurations, like SSL.\n- **Mail:** WAS supports sending emails through the JavaMail API. Migrate to Containers doesn't automatically migrate JavaMail configuration files. Manually configure these files during the migration phase.\n### Complete the assessment\nAfter building the inventories related to your environment and your WAS traditional workloads, complete the rest of the assessment phase activities documented in [Migration to Google Cloud: Assessing and discovering your workloads](/solutions/migration-to-gcp-assessing-and-discovering-your-workloads) . When you're done with that work, continue reading this document.\n## Plan and build your foundation\nAfter following the guidance in [Planning and building your foundation when migrating VMs](/architecture/migrating-vms-to-containers-with-migrate-for-anthos) , complete your WAS foundation:\n- [Confirm the name of the Cloud Storage bucket](/migrate/anthos/docs/data-repos#configuring_an_artifacts_repository) .\n- Upload the `binaryAppScanner.jar` file available as part of the [IBM WebSphere Application Server Migration Toolkit for Application Binaries](https://www.ibm.com/support/pages/migration-toolkit-application-binaries) by following these steps:- Download the [binaryAppScannerInstaller.jar installer file](https://www.ibm.com/support/pages/migration-toolkit-application-binaries) . You must accept the license agreement as part of the download.\n- Run the following command to extract the binaryAppScanner.jar file and to accept the License Agreement:```\njava -jar binaryAppScannerInstaller.jar --acceptLicense --verbose\n```\n- Specify the target directory for the extraction\u2014for example, `/tmp` . The installer creates a directory named `/wamt` within the target directory.\n- Navigate to the `/wamt` directory\u2014for example:```\ncd /tmp/wamt\n```\n- Upload the `binaryAppScanner.jar` file to the root of a Cloud Storage bucket:```\ngsutil cp binaryAppScanner.jar gs://BUCKET_NAME\n```Where is the name of your Cloud Storage bucket.[Set up Migrate to Containers](/migrate/anthos/docs/setting-up-overview) describes how to provision and configure Migrate to Containers and its dependencies. Follow that guidance to set up Migrate to Containers.\nWhen you're done with that work, continue reading this document.\n## Migrate your WAS traditional applications to containers\nTo learn more about the deployment phase of the migration, follow the guidance in [Migrating your VMs to containers](/architecture/migrating-vms-to-containers-with-migrate-for-anthos) .\n### Generate and review the migration plan\nCreate a Migrate to Containers migration plan for your WAS traditional applications:\n- **Configure the source environments as Migrate to Containers\nmigration sources:** To migrate your WAS traditional applications, Migrate to Containers needs information about the source environments where your VMs run. You gathered that information by performing the tasks described in the [Build your inventories](#build-your-inventories) section within this document. For more information about configuring source environments, see [Adding a migration source](/migrate/anthos/docs/adding-a-migration-source) .\n- **Create migration plans:** To specify which WAS traditional applications you want to migrate from a source environment to a supported target environment, create a migration plan\u2014for example, you can configure where you want to store your persistent data.For more information about creating and monitoring migration plans, see [Creating a migration](/migrate/anthos/docs/creating-a-migration#creating_a_migration) .To create the migration you must use the command line. You cannot use Google Cloud console. The full command is as follows:```\nmigctl migration create my-migration\u00a0 --source my-was-src\u00a0 --vm-id PROJECT_ID\u00a0 --intent Image\u00a0 --os-type Linux\u00a0 --app-type websphere-traditional\n```Where is the ID assigned to your migration project and `Image` is the value for the intent flag. You use 'Image' because of the stateless nature of the workload.\n- **Review and customize migration plans:** After generating migration plans for each of the VMs you want to migrate, review and customize each migration plan to ensure that it fits your requirements. For more information about customizing migration plans, see [Customizing a migration plan](/migrate/anthos/docs/customizing-a-migration-plan) .\n### Generate migration artifacts and deployment descriptors\nTo generate the target WAS artifacts for your applications, Migrate to Containers extracts the applications running in the VMs you configured in the migration plans. It then creates several artifacts and places them in a Cloud Storage bucket. Migrate to Containers also generates the deployment descriptors that you can customize and use to deploy instances of the container images in the target environment.\nFor each migrated application, Migrate to Containers creates a folder containing [Docker](https://www.docker.com/) context, the application binaries, a build script, and a WAS configuration script.\nYou can monitor the progress of the container artifacts you create and migrate. For more information about monitoring a migration, see [Monitoring migrated workloads](/migrate/anthos/docs/monitoring-migrated-workloads) .\n### Verify and validate the generated resources and descriptors\nAfter you generate container artifacts and deployment descriptors with Migrate to Containers, review and update those artifacts and descriptors to ensure that they meet your requirements\u2014for example, consider the following aspects:\n- **Container image descriptors:** Review the container image descriptors that you generated with Migrate to Containers and verify that they are adequate for the container workload. If you need to update the container image descriptors, see [Building an application image](https://github.com/WASdev/ci.docker.websphere-traditional#building-an-application-image) . You can [add properties](https://github.com/WASdev/ci.docker.websphere-traditional#building-an-application-image) , and [install iFixes](https://github.com/WASdev/ci.docker.websphere-traditional#installing-ifixes) .\n- **Application-level logging:** Migrate to Containers automatically writes WAS logs in the JSON format. To change to basic logging, see [Logging configuration](https://github.com/WASdev/ci.docker.websphere-traditional#building-an-application-image) .\nFor more information about reviewing container artifacts and deployment descriptors, see [Reviewing generated deployment files](/migrate/anthos/docs/review-deployment-files) .\n### Deploy and validate the containerized workloads to GKE or GKE Enterprise\nWhen the deployment descriptors for your workloads are ready, you:\n- **Build an application container image:** Build an application container image for your migrated workload in the application artifacts folder that you would like to build:```\nbash ./build.sh\n```\n- **Deploy your migrated applications in the target environment:** Deploy your migrated applications:```\nkubectl apply -f deployment_spec.yaml\n```\n- **Monitor your migrated workloads:** After deploying your WAS traditional application container, you can gather information about how they are performing in the target environment. For more information, see [Monitoring migrated workloads](/migrate/anthos/docs/monitoring-migrated-workloads) .\n- **Integrate your migrated workloads:** Once the workloads you deployed in the target environment work, integrate the container artifact generation and deployment processes of the workloads with your [deployment processes and pipelines](/solutions/migration-to-gcp-deploying-your-workloads) . If you don't currently have an automated deployment process in place and are [manually deploying your workloads](/solutions/migration-to-gcp-deploying-your-workloads#deploy_manually) , it's recommended that you [migrate from manual deployments to automated deployments](/solutions/migration-to-google-cloud-automated-containerized-deployments) .\n### Uninstall Migrate to Containers\nAfter you complete the migration of your workloads with Migrate to Containers, it's recommended that you:\n- Ensure that you have all the references to the [artifacts that Migrate to Containers generated during the migration](/migrate/anthos/docs/migctl-reference#migctl-migration-get-artifacts) .\n- [Uninstall Migrate to Containers](/migrate/anthos/docs/how-to#uninstalling-migrate-for-anthos) .\nWhen you're done with the work described in this section, return to this document.\n## Optimize your environment after you migrate\nTo complete your migration, see the guidelines at [Optimizing your environment after migration](/architecture/migrating-vms-to-containers-with-migrate-for-anthos) .\nYou can perform these WAS-specific optimizations for your migrated WAS traditional applications:\n- **Externalize your configuration:** When you build a traditional WAS container, there might be configuration changes between environments. To avoid rebuilding the container for each environment, it's recommended that you externalize the WAS configuration into properties and use ConfigMaps to set those properties at container start-up.\n- **Securing your sensitive data:** Passwords and any other sensitive data should be put into [Kubernetes Secrets](https://kubernetes.io/docs/concepts/configuration/secret/) . Use Kubernetes secrets to replace configuration placeholders at container start-up.## What's next\n- Read about best practices for [building](/architecture/best-practices-for-building-containers) and [operating](/architecture/best-practices-for-operating-containers) containers.\n- Read about [best practices for running cost-optimized Kubernetes applications on GKE](/architecture/best-practices-for-running-cost-effective-kubernetes-applications-on-gke) .\n- [Migrating VMs to containers with Migrate to Containers](/architecture/migrating-vms-to-containers-with-migrate-for-anthos) \n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Docs"}