{"title": "Docs - Core principles of system design", "url": "https://cloud.google.com/architecture/framework/system-design/principles", "abstract": "# Docs - Core principles of system design\nLast reviewed 2023-08-05 UTC\nThis document in the [Google Cloud Architecture Framework](/architecture/framework) describes the core principles of system design. A robust system design is secure, reliable, scalable, and independent. It lets you make iterative and reversible changes without disrupting the system, minimize potential risks, and improve operational efficiency. To achieve a robust system design, we recommend that you follow four core principles.\n", "content": "## Document everything\nWhen you start to move your workloads to the cloud or build your applications, a major blocker to success is lack of documentation of the system. Documentation is especially important for correctly visualizing the architecture of your current deployments.\nA properly documented cloud architecture establishes a common language and standards, which enable cross-functional teams to communicate and collaborate effectively. It also provides the information that's necessary to identify and guide future design decisions. Documentation should be written with your use cases in mind, to provide context for the design decisions.\nOver time, your design decisions will evolve and change. The change history provides the context that your teams require to align initiatives, avoid duplication, and measure performance changes effectively over time. Change logs are particularly valuable when you onboard a new cloud architect who is not yet familiar with your current system design, strategy, or history.\n## Simplify your design and use fully managed services\nSimplicity is crucial for system design. If your architecture is too complex to understand, it will be difficult to implement the design and manage it over time. Where feasible, use fully managed services to minimize the risks, time, and effort associated with managing and maintaining baseline systems.\nIf you're already running your workloads in production, test with managed services to see how they might help to reduce operational complexities. If you're developing new workloads, then start simple, establish a minimal viable product (MVP), and resist the urge to over-engineer. You can identify exceptional use cases, iterate, and improve your systems incrementally over time.\n## Decouple your architecture\nDecoupling is a technique that's used to separate your applications and service components into smaller components that can operate independently. For example, you might break up a monolithic application stack into separate service components. In a decoupled architecture, an application can run its functions independently, regardless of the various dependencies.\nA decoupled architecture gives you increased flexibility to do the following:\n- Apply independent upgrades.\n- Enforce specific security controls.\n- Establish reliability goals for each subsystem.\n- Monitor health.\n- Granularly control performance and cost parameters.\nYou can start decoupling early in your design phase or incorporate it as part of your system upgrades as you scale.\n## Use a stateless architecture\nA stateless architecture can increase both the reliability and scalability of your applications.\nStateful applications rely on various dependencies to perform tasks, such as locally cached data. Stateful applications often require additional mechanisms to capture progress and restart gracefully. Stateless applications can perform tasks without significant local dependencies by using shared storage or cached services. A stateless architecture enables your applications to scale up quickly with minimum boot dependencies. The applications can withstand hard restarts, have lower downtime, and provide better performance for end users.\nThe system design category describes recommendations to make your applications stateless or to utilize cloud-native features to improve capturing machine state for your stateful applications.\n## What's next\n- [Select geographic regions to support your business applications](/architecture/framework/system-design/geographic-zones-regions) .\n- [Manage cloud resources](/architecture/framework/system-design/resource-management) .\n- [Choose and manage compute](/architecture/framework/system-design/compute) .\n- [Design your network infrastructure](/architecture/framework/system-design/networking) .\n- [Select and implement a storage strategy](/architecture/framework/system-design/storage) .\n- [Optimize your database](/architecture/framework/system-design/databases) .\n- [Analyze your data](/architecture/framework/system-design/data-analytics) .\n- [Implement machine learning](/architecture/framework/system-design/ai-ml) .\n- [Design your cloud workloads for sustainability](/architecture/framework/system-design/sustainability) .", "guide": "Docs"}