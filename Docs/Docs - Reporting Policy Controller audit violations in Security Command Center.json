{"title": "Docs - Reporting Policy Controller audit violations in Security Command Center", "url": "https://cloud.google.com/architecture/reporting-policy-controller-audit-violations-security-command-center", "abstract": "# Docs - Reporting Policy Controller audit violations in Security Command Center\nLast reviewed 2023-04-17 UTC\nThis tutorial shows platform security administrators how to view and manage policy violations for Kubernetes resources alongside [other vulnerability and security findings](/security-command-center/docs/concepts-vulnerabilities-findings) in [Security Command Center](/security-command-center) . In this tutorial, you can use either [Policy Controller](/anthos-config-management/docs/concepts/policy-controller) or [Open Policy Agent (OPA) Gatekeeper](https://github.com/open-policy-agent/gatekeeper) .", "content": "## Architecture [Policy Controller](/anthos-config-management/docs/concepts/policy-controller) checks, audits, and enforces your Kubernetes cluster resources' compliance with policies related to security, regulations, or business rules. Policy Controller is built from the [OPA Gatekeeper open source project](https://github.com/open-policy-agent/gatekeeper) .\nThe [audit functionality](https://open-policy-agent.github.io/gatekeeper/website/docs/audit) in Policy Controller and OPA Gatekeeper lets you implement detective controls that periodically evaluate resources against policies. If an issue is detected, the controls create violations for resources that don't conform to the policies. These violations are stored in the cluster, and you can query them using Kubernetes tools such as `kubectl` .\nTo make these violations visible and to help you take actions, you can use Security Command Center. Security Command Center provides a dashboard and APIs for surfacing, understanding, and remediating security and data risks across an organization for Google Cloud resources, Kubernetes resources, and hybrid or multi-cloud resources.\nSecurity Command Center displays possible security risks and policy violations, called [findings](/security-command-center/docs/reference/rest/v1/organizations.sources.findings) . Findings come from [sources](/security-command-center/docs/reference/rest/v1/organizations.sources) , which are mechanisms that can detect and report risks and violations. Security Command Center includes [built-in services](/security-command-center/docs/concepts-security-command-center-overview) , and you can add third-party sources and your own sources.\nThis tutorial and associated source code shows you how to create a source and findings in Security Command Center for Policy Controller and OPA Gatekeeper policy violations.\nThe following diagram shows the architecture that is implemented in this tutorial:As the preceding diagram shows, in this tutorial you create a source in Security Command Center using a command-line tool. You deploy a controller to a Google Kubernetes Engine (GKE) cluster to synchronize Policy Controller and OPA Gatekeeper constraint violations to findings in Security Command Center.\nIf you want to see how to synchronize policy violations for Google Cloud resources, try out our tutorial about how to [create policy-compliant Google Cloud resources using Config Connector and Policy Controller](/solutions/policy-compliant-resources) .\n## Objectives\n- Create a policy and a resource that violates the policy.\n- Create a source in Security Command Center.\n- Create a finding in Security Command Center from an OPA Gatekeeper policy violation using a command-line tool.\n- Deploy a controller to the GKE cluster to periodically synchronize findings in Security Command Center from OPA Gatekeeper policy violations.\n- View findings in your terminal and in the Google Cloud console.\n## CostsIn this document, you use the following billable components of Google Cloud:- [Container Registry](/container-registry/pricing) \n- [Google Kubernetes Engine (GKE)](/kubernetes-engine/pricing) \n- [Security Command Center](/security-command-center/pricing#standard_tier_pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- To complete this tutorial, you must have an appropriate editor role for Security Command Center at the organization level, such as [Security Center Admin Editor](/security-command-center/docs/access-control) . Your organization administrator can [grant you this role](/resource-manager/docs/access-control-org) .\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) **Note:** If you use an environment other than Cloud Shell for this tutorial, you need a Linux or macOS terminal with the [gcloud CLI](/sdk/docs/install) , [curl](https://curl.haxx.se/download.html) , [jq](https://stedolan.github.io/jq/download/) and [kpt](https://kpt.dev/installation/) , installed, and credentials to use for [Application Default Credentials](/docs/authentication/provide-credentials-adc) . If you use a Compute Engine virtual machine instance, [assign the cloud-platform access scope to the instance](/compute/docs/access/create-enable-service-accounts-for-instances) .\n## Preparing the environment\n- In Cloud Shell, set the Google Cloud project that you want to use for this tutorial:```\ngcloud config set project PROJECT_ID\n```Replace `` with your Google Cloud project ID. When you run this command, Cloud Shell creates an exported environment variable called `GOOGLE_CLOUD_PROJECT` that contains your project ID.\n- Enable the Resource Manager, GKE, Security Command Center, and Service Usage APIs:```\ngcloud services enable \\\u00a0 \u00a0 cloudresourcemanager.googleapis.com \\\u00a0 \u00a0 container.googleapis.com \\\u00a0 \u00a0 securitycenter.googleapis.com \\\u00a0 \u00a0 serviceusage.googleapis.com\n```\n## Creating a GKE cluster\n- In Cloud Shell, create a GKE cluster with [Workload Identity](/kubernetes-engine/docs/how-to/workload-identity) enabled:```\ngcloud container clusters create gatekeeper-securitycenter-tutorial \\\u00a0 \u00a0 --enable-ip-alias \\\u00a0 \u00a0 --release-channel regular \\\u00a0 \u00a0 --workload-pool $GOOGLE_CLOUD_PROJECT.svc.id.goog \\\u00a0 \u00a0 --zone us-central1-f\n```This command creates the cluster in the `us-central1-f` zone. You can use a [different zone or region](/compute/docs/regions-zones) .\n- Grant yourself the `cluster-admin` [cluster role](https://kubernetes.io/docs/reference/access-authn-authz/rbac/) :```\nkubectl create clusterrolebinding cluster-admin-binding \\\u00a0 \u00a0 --clusterrole cluster-admin \\\u00a0 \u00a0 --user $(gcloud config get-value core/account)\n```You need this role later to create some of the Kubernetes resources used by the controller. You also need it if you install the open source OPA Gatekeeper distribution. **Note:** If you use a [private cluster](/kubernetes-engine/docs/how-to/private-clusters) in your own environment, do both of the following:- [Create a firewall rule to allow the cluster API server to connect to the cluster nodes on port 8443](/anthos-config-management/docs/how-to/installing-policy-controller) .  This firewall rule is required for the Policy Controller or OPA  Gatekeeper webhook to work correctly.\n- Configure [Cloud NAT](/nat/docs) for the region and Virtual Private Cloud (VPC) network where you created your  GKE cluster. For instance, if you created your  GKE cluster in the`us-central1-f`zone,  configure Cloud NAT for the`us-central1`region.  Your GKE cluster requires Cloud NAT to  pull container images from container registries outside  Google Cloud or outside your VPC network.## Installing the policy toolIf you have a [managed GKE cluster](/anthos/docs/setup/overview#requirements) , follow the instructions to install Policy Controller, otherwise install the OPA Gatekeeper distribution.\nInstall Policy Controller by following the [installation instructions](/anthos-config-management/docs/how-to/installing-policy-controller) .\nUse an audit interval of `60` seconds.- In Cloud Shell, define the OPA Gatekeeper version that you want to install:```\nGATEKEEPER_VERSION=v3.10.0\n```\n- Install OPA Gatekeeper:```\nkubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/$GATEKEEPER_VERSION/deploy/gatekeeper.yaml\n```\n- Verify that OPA Gatekeeper is installed:```\nkubectl rollout status deploy gatekeeper-controller-manager \\\u00a0 \u00a0 -n gatekeeper-system\n```When the installation completes, the output displays `deployment \"gatekeeper-controller-manager\" successfully rolled out` .\n## Creating a policyA policy in Policy Controller and OPA Gatekeeper consists of a [constraint template](https://github.com/open-policy-agent/frameworks/tree/master/constraint#what-is-a-constraint-template) and a [constraint](https://github.com/open-policy-agent/frameworks/tree/master/constraint#what-is-a-constraint) . The constraint template contains the policy logic. The constraint specifies where the policy applies and specifies input parameters for the policy logic.\nIn this section, you create a policy for Kubernetes Pods and a Pod that violates the policy.- In Cloud Shell, clone the OPA Gatekeeper library repository, go to the repository directory, and check out a known commit:```\ngit clone https://github.com/open-policy-agent/gatekeeper-library.git \\\u00a0 \u00a0 ~/gatekeeper-librarycd ~/gatekeeper-librarygit checkout 1da0facae99658accb73c291cb79f497fcddf641\n```\n- Create a Pod called `nginx-disallowed` in the `default` namespace:```\nkubectl apply -f library/general/allowedrepos/samples/repo-must-be-openpolicyagent/example_disallowed.yaml\n```The following is the manifest that you apply to create the Pod: [  library/general/allowedrepos/samples/repo-must-be-openpolicyagent/example_disallowed.yaml ](https://github.com/open-policy-agent/gatekeeper-library/blob/1da0facae99658accb73c291cb79f497fcddf641/library/general/allowedrepos/samples/repo-must-be-openpolicyagent/example_disallowed.yaml) [View on GitHub](https://github.com/open-policy-agent/gatekeeper-library/blob/1da0facae99658accb73c291cb79f497fcddf641/library/general/allowedrepos/samples/repo-must-be-openpolicyagent/example_disallowed.yaml) ```\napiVersion: v1kind: Podmetadata:\u00a0 name: nginx-disallowedspec:\u00a0 containers:\u00a0 \u00a0 - name: nginx\u00a0 \u00a0 \u00a0 image: nginx\u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 limits:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: \"100m\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memory: \"30Mi\"\n```This Pod uses a container image from a repository that isn't approved by the policy.\n- Create a constraint template called `k8sallowedrepos` :```\nkubectl apply -f library/general/allowedrepos/template.yaml\n```The following is the constraint template manifest: [  library/general/allowedrepos/template.yaml ](https://github.com/open-policy-agent/gatekeeper-library/blob/1da0facae99658accb73c291cb79f497fcddf641/library/general/allowedrepos/template.yaml) [View on GitHub](https://github.com/open-policy-agent/gatekeeper-library/blob/1da0facae99658accb73c291cb79f497fcddf641/library/general/allowedrepos/template.yaml) ```\napiVersion: templates.gatekeeper.sh/v1beta1kind: ConstraintTemplatemetadata:\u00a0 name: k8sallowedrepos\u00a0 annotations:\u00a0 \u00a0 description: >- \u00a0 \u00a0 \u00a0 Requires container images to begin with a string from the specified list.spec:\u00a0 crd:\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 names:\u00a0 \u00a0 \u00a0 \u00a0 kind: K8sAllowedRepos\u00a0 \u00a0 \u00a0 validation:\u00a0 \u00a0 \u00a0 \u00a0 # Schema for the `parameters` field\u00a0 \u00a0 \u00a0 \u00a0 openAPIV3Schema:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: object\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 properties:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 repos:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 description: The list of prefixes a container image is allowed to have.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: array\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 items:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: string\u00a0 targets:\u00a0 \u00a0 - target: admission.k8s.gatekeeper.sh\u00a0 \u00a0 \u00a0 rego: |\u00a0 \u00a0 \u00a0 \u00a0 package k8sallowedrepos\u00a0 \u00a0 \u00a0 \u00a0 violation[{\"msg\": msg}] {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 container := input.review.object.spec.containers[_]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 satisfied := [good | repo = input.parameters.repos[_] ; good = startswith(container.image, repo)]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 not any(satisfied)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 msg := sprintf(\"container <%v> has an invalid image repo <%v>, allowed repos are %v\", [container.name, container.image, input.parameters.repos])\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 violation[{\"msg\": msg}] {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 container := input.review.object.spec.initContainers[_]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 satisfied := [good | repo = input.parameters.repos[_] ; good = startswith(container.image, repo)]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 not any(satisfied)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 msg := sprintf(\"container <%v> has an invalid image repo <%v>, allowed repos are %v\", [container.name, container.image, input.parameters.repos])\u00a0 \u00a0 \u00a0 \u00a0 }\n```\n- Create a constraint called `repo-is-openpolicyagent` :```\nkubectl apply -f library/general/allowedrepos/samples/repo-must-be-openpolicyagent/constraint.yaml\n```The following is the constraint manifest: [  library/general/allowedrepos/samples/repo-must-be-openpolicyagent/constraint.yaml ](https://github.com/open-policy-agent/gatekeeper-library/blob/1da0facae99658accb73c291cb79f497fcddf641/library/general/allowedrepos/samples/repo-must-be-openpolicyagent/constraint.yaml) [View on GitHub](https://github.com/open-policy-agent/gatekeeper-library/blob/1da0facae99658accb73c291cb79f497fcddf641/library/general/allowedrepos/samples/repo-must-be-openpolicyagent/constraint.yaml) ```\napiVersion: constraints.gatekeeper.sh/v1beta1kind: K8sAllowedReposmetadata:\u00a0 name: repo-is-openpolicyagentspec:\u00a0 match:\u00a0 \u00a0 kinds:\u00a0 \u00a0 \u00a0 - apiGroups: [\"\"]\u00a0 \u00a0 \u00a0 \u00a0 kinds: [\"Pod\"]\u00a0 \u00a0 namespaces:\u00a0 \u00a0 \u00a0 - \"default\"\u00a0 parameters:\u00a0 \u00a0 repos:\u00a0 \u00a0 \u00a0 - \"openpolicyagent/\"\n```\n## Auditing constraintsThe [audit controller](https://open-policy-agent.github.io/gatekeeper/website/docs/audit) in Policy Controller and OPA Gatekeeper periodically evaluates resources against constraints. This auditing lets you detect policy-violating resources that were created before you created the constraint.- In Cloud Shell, view violations for all constraints by querying using the `constraint` [category](https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#categories) :```\nkubectl get constraint -o json | jq '.items[].status.violations'\n```The output is the following:```\n[ {\n \"enforcementAction\": \"deny\",\n \"kind\": \"Pod\",\n \"message\": \"container <nginx> has an invalid image repo <nginx>, allowed repos are [\\\"openpolicyagent\\\"]\",\n \"name\": \"nginx-disallowed\",\n \"namespace\": \"default\"\n }\n]\n```There is a violation for the Pod that you created before you created the constraint. If you see `null` instead of the preceding output, the Policy Controller or OPA Gatekeeper audit hasn't run since you created the constraint. By default, the audit runs every minute. Wait a minute and try again. **Note:** Policy Controller and OPA Gatekeeper have a [default limit on the number of reported violations per constraint](https://open-policy-agent.github.io/gatekeeper/website/docs/audit#configuring-audit) .\n## Creating a Security Command Center sourceSecurity Command Center records [findings](/security-command-center/docs/how-to-api-list-findings) against [sources](/security-command-center/docs/how-to-configure-security-command-center) . Follow these steps to create a source for findings from Policy Controller and OPA Gatekeeper:- In Cloud Shell, create a Google service account and store the service account name in an environment variable:```\nSOURCES_ADMIN_SA=$(gcloud iam service-accounts create \\\u00a0 \u00a0 securitycenter-sources-admin \\\u00a0 \u00a0 --display-name \"Security Command Center sources admin\" \\\u00a0 \u00a0 --format 'value(email)')\n```You use this Google service account to administer Security Command Center sources.\n- Define an environment variable that contains your [Google Cloud organization ID](/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id) :```\nORGANIZATION_ID=$(gcloud projects get-ancestors $GOOGLE_CLOUD_PROJECT \\\u00a0 \u00a0 --format json | jq -r '.[] | select (.type==\"organization\") | .id')\n```\n- Grant the [Security Center Sources Admin](/iam/docs/understanding-roles#security-center-roles) role to the sources admin Google service account at the organization level:```\ngcloud organizations add-iam-policy-binding $ORGANIZATION_ID \\\u00a0 \u00a0 --member \"serviceAccount:$SOURCES_ADMIN_SA\" \\\u00a0 \u00a0 --role roles/securitycenter.sourcesAdmin\n```This role provides the [securitycenter.sources.*](/iam/docs/permissions-reference) permissions that are required to administer sources.\n- Grant the [Service Usage Consumer](/iam/docs/understanding-roles#service-usage-roles) role to the sources admin Google service account at the organization level:```\ngcloud organizations add-iam-policy-binding $ORGANIZATION_ID \\\u00a0 \u00a0 --member \"serviceAccount:$SOURCES_ADMIN_SA\" \\\u00a0 \u00a0 --role roles/serviceusage.serviceUsageConsumer\n```This role provides the [serviceusage.services.use](/iam/docs/permissions-reference) permission to use projects in the organization for quota and billing purposes.\n- Grant yourself the [Service Account Token Creator role](/iam/docs/understanding-roles#service-accounts-roles) for the sources admin Google service account:```\ngcloud iam service-accounts add-iam-policy-binding \\\u00a0 \u00a0 $SOURCES_ADMIN_SA \\\u00a0 \u00a0 --member \"user:$(gcloud config get-value account)\" \\\u00a0 \u00a0 --role roles/iam.serviceAccountTokenCreator\n```This role allows your user identity to [impersonate, or act as, the Google service account](/iam/docs/impersonating-service-accounts) .\n- Download the latest version of the [gatekeeper-securitycenter](https://github.com/GoogleCloudPlatform/gatekeeper-securitycenter) command-line tool for your platform and make it executable:```\nVERSION=v0.4.0curl -Lo gatekeeper-securitycenter \"https://github.com/GoogleCloudPlatform/gatekeeper-securitycenter/releases/download/${VERSION}/gatekeeper-securitycenter_$(uname -s)_$(uname -m)\"chmod +x gatekeeper-securitycenter\n```\n- Use the `gatekeeper-securitycenter` tool to create a Security Command Center source for your organization. Capture the full source name in an environment variable.```\nexport SOURCE_NAME=$(./gatekeeper-securitycenter sources create \\\u00a0 \u00a0 --organization $ORGANIZATION_ID \\\u00a0 \u00a0 --display-name \"Gatekeeper\" \\\u00a0 \u00a0 --description \"Reports violations from Policy Controller audits\" \\\u00a0 \u00a0 --impersonate-service-account $SOURCES_ADMIN_SA | jq -r '.name')\n```This command creates a source with the display name `Gatekeeper` . This display name is visible in Security Command Center. You can use a different display name and description.If you get a response with the error message, `The caller does not have permission` , wait a minute, and then try again. This error can happen if the [Identity and Access Management (IAM) bindings](/iam/docs/policies) haven't taken effect yet.\n## Creating findings using the command lineYou can create Security Command Center findings from Policy Controller and OPA Gatekeeper constraint violations using the `gatekeeper-securitycenter` tool as part of a build pipeline or scheduled task.- In Cloud Shell, create a Google service account and store the service account name in an environment variable:```\nFINDINGS_EDITOR_SA=$(gcloud iam service-accounts create \\\u00a0 \u00a0 gatekeeper-securitycenter \\\u00a0 \u00a0 --display-name \"Security Command Center Gatekeeper findings editor\" \\\u00a0 \u00a0 --format 'value(email)')\n```You use this Google service account to create findings for your Security Command Center source.\n- Grant the [Security Center Findings Editor](/iam/docs/understanding-roles#security-center-roles) role to the Google service account for the source:```\n./gatekeeper-securitycenter sources add-iam-policy-binding \\\u00a0 \u00a0 --source $SOURCE_NAME \\\u00a0 \u00a0 --member \"serviceAccount:$FINDINGS_EDITOR_SA\" \\\u00a0 \u00a0 --role roles/securitycenter.findingsEditor \\\u00a0 \u00a0 --impersonate-service-account $SOURCES_ADMIN_SA\n```This role provides the [securitycenter.findings.*](/iam/docs/permissions-reference) permissions required to create and edit findings. When you run this command, you impersonate the sources admin Google service account.\n- Grant the [Service Usage Consumer](/iam/docs/understanding-roles#service-usage-roles) role to the findings editor Google service account at the organization level:```\ngcloud organizations add-iam-policy-binding $ORGANIZATION_ID \\\u00a0 \u00a0 --member \"serviceAccount:$FINDINGS_EDITOR_SA\" \\\u00a0 \u00a0 --role roles/serviceusage.serviceUsageConsumer\n```\n- Grant your user identity the [Service Account Token Creator role](/iam/docs/understanding-roles#service-accounts-roles) for the findings editor Google service account:```\ngcloud iam service-accounts add-iam-policy-binding \\\u00a0 \u00a0 $FINDINGS_EDITOR_SA \\\u00a0 \u00a0 --member \"user:$(gcloud config get-value account)\" \\\u00a0 \u00a0 --role roles/iam.serviceAccountTokenCreator\n```\n- Print findings to the terminal instead of creating them in Security Command Center:```\n./gatekeeper-securitycenter findings sync --dry-run=true\n```This command uses your current [kubeconfig context](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/) by default. If you want to use a different kubeconfig file, use the `--kubeconfig` flag.The output looks similar to the following:```\n[ {\n \"finding_id\": \"0be44bcf181ef03162eed40126a500a0\",\n \"finding\": {\n  \"resource_name\": \"https://API_SERVER/api/v1/namespaces/default/pods/nginx-disallowed\",\n  \"state\": 1,\n  \"category\": \"K8sAllowedRepos\",\n  \"external_uri\": \"https://API_SERVER/apis/constraints.gatekeeper.sh/v1beta1/k8sallowedrepos/repo-is-openpolicyagent\",\n  \"source_properties\": {\n  \"Cluster\": \"\",\n  \"ConstraintName\": \"repo-is-openpolicyagent\",\n  \"ConstraintSelfLink\": \"https://API_SERVER/apis/constraints.gatekeeper.sh/v1beta1/k8sallowedrepos/repo-is-openpolicyagent\",\n  \"ConstraintTemplateSelfLink\": \"https://API_SERVER/apis/templates.gatekeeper.sh/v1beta1/constrainttemplates/k8sallowedrepos\",\n  \"ConstraintTemplateUID\": \"e35b1c39-15f7-4a7a-afae-1637b44e81b2\",\n  \"ConstraintUID\": \"b904dddb-0a23-4f4f-81bb-0103de838d3e\",\n  \"Explanation\": \"container \\u003cnginx\\u003e has an invalid image repo \\u003cnginx\\u003e, allowed repos are [\\\"openpolicyagent\\\"]\",\n  \"ProjectId\": \"\",\n  \"ResourceAPIGroup\": \"\",\n  \"ResourceAPIVersion\": \"v1\",\n  \"ResourceKind\": \"Pod\",\n  \"ResourceName\": \"nginx-disallowed\",\n  \"ResourceNamespace\": \"default\",\n  \"ResourceSelfLink\": \"https://API_SERVER/api/v1/namespaces/default/pods/nginx-disallowed\",\n  \"ResourceStatusSelfLink\": \"\",\n  \"ResourceUID\": \"8ddd752f-e620-43ea-b966-4ae2ae507c67\",\n  \"ScannerName\": \"GATEKEEPER\"\n  },\n  \"event_time\": {\n  \"seconds\": 1606287680\n  }\n }\n }\n]\n```In the preceding output, `` is the IP address or hostname of your GKE cluster [API server](https://kubernetes.io/docs/concepts/overview/components/#kube-apiserver) .To learn what the fields mean, see the Security Command Center API [Finding resource](/security-command-center/docs/reference/rest/v1/organizations.sources.findings) page.\n- Create findings in Security Command Center:```\n./gatekeeper-securitycenter findings sync \\\u00a0 \u00a0 --source $SOURCE_NAME \\\u00a0 \u00a0 --impersonate-service-account $FINDINGS_EDITOR_SA\n```When you run this command, you impersonate the findings editor Google service account.The output includes `create finding` , which means that the `gatekeeper-securitycenter` command-line tool created a finding. The `findingID` attribute of that output contains the full name of the finding in the format:```\norganizations/ORGANIZATION_ID/sources/SOURCE_ID/findings/FINDING_ID\n```In this output:- ``is your Google Cloud organization ID\n- ``is your Security Command Center source ID\n- ``is the finding ID\nTo view the finding, see the [Viewing findings](#viewing-findings) section.If you get a response with the error message, `The caller does not have permission` , wait a minute, and then try again. This error can happen if the [Identity and Access Management (IAM) bindings](/iam/docs/policies) haven't taken effect yet.\n## Creating findings using a Kubernetes controllerYou can deploy `gatekeeper-securitycenter` as a [controller](https://kubernetes.io/docs/concepts/architecture/controller/) in your GKE cluster. This controller periodically checks for constraint violations and creates a finding in Security Command Center for each violation.\nIf the resource becomes compliant, the controller sets the state of the existing finding to [INACTIVE](/security-command-center/docs/reference/rest/v1/organizations.sources.findings#state) .- In Cloud Shell, create a [Workload Identity](/kubernetes-engine/docs/how-to/workload-identity) IAM policy binding to allow the `gatekeeper-securitycenter-controller` Kubernetes service account in the `gatekeeper-securitycenter` namespace to impersonate the findings editor Google service account:```\ngcloud iam service-accounts add-iam-policy-binding \\\u00a0 \u00a0 $FINDINGS_EDITOR_SA \\\u00a0 \u00a0 --member \"serviceAccount:$GOOGLE_CLOUD_PROJECT.svc.id.goog[gatekeeper-securitycenter/gatekeeper-securitycenter-controller]\" \\\u00a0 \u00a0 --role roles/iam.workloadIdentityUser\n```You create the Kubernetes service account and namespace when you deploy the controller.\n- Fetch the kpt package for the `gatekeeper-securitycenter` controller:```\nVERSION=v0.4.0kpt pkg get https://github.com/GoogleCloudPlatform/gatekeeper-securitycenter.git/manifests@$VERSION manifests\n```This command creates a directory called `manifests` that contains the resource manifests files for the controller. [kpt](https://kpt.dev) is a command-line tool that lets you manage, manipulate, customize, and apply Kubernetes resources. You use kpt in this tutorial to customize the resource manifests for your environment.\n- Set the Security Command Center source name:```\nkpt fn eval manifests \\\u00a0 \u00a0 --image gcr.io/kpt-fn/apply-setters:v0.2 -- \\\u00a0 \u00a0 \"source=$SOURCE_NAME\"\n```\n- Set the cluster name:```\nkpt fn eval manifests \\\u00a0 \u00a0 --image gcr.io/kpt-fn/apply-setters:v0.2 -- \\\u00a0 \u00a0 \"cluster=$(kubectl config current-context)\"\n```The controller adds the cluster name as a [source property](/security-command-center/docs/reference/rest/v1/organizations.sources.findings) to the findings that it creates in Security Command Center. If you have multiple clusters, this name helps you find which cluster a finding belongs to.\n- To bind the controller Kubernetes service account to the findings editor Google service account, add the Workload Identity annotation:```\nkpt fn eval manifests \\\u00a0 \u00a0 --image gcr.io/kpt-fn/set-annotations:v0.1.4 \\\u00a0 \u00a0 --match-kind ServiceAccount \\\u00a0 \u00a0 --match-name gatekeeper-securitycenter-controller \\\u00a0 \u00a0 --match-namespace gatekeeper-securitycenter -- \\\u00a0 \u00a0 \"iam.gke.io/gcp-service-account=$FINDINGS_EDITOR_SA\"\n```\n- Initialize the controller package:```\nkpt live init manifests\n```\n- Apply the controller resources to your cluster:```\nkpt live apply manifests --reconcile-timeout 3m --output table\n```This command creates the following resources in your cluster:- A namespace called`gatekeeper-securitycenter`.\n- A service account called`gatekeeper-securitycenter-controller`.\n- A cluster role that provides [get and list](https://kubernetes.io/docs/reference/access-authn-authz/authorization#determine-the-request-verb) access to all resources in all [API groups](https://kubernetes.io/docs/reference/using-api/api-overview/#api-groups) . This role is required because the controller retrieves the resources that caused policy violations.\n- A cluster role binding that grants the cluster role to the service account.\n- A deployment called`gatekeeper-securitycenter-controller-manager`.\n- A config map called`gatekeeper-securitycenter-config`that contains configuration values for the deployment.\nThe command also waits for the resources to be ready.\n- Verify that the controller can read constraint violations and communicate with the Security Command Center API by following the controller log:```\nkubectl logs deployment/gatekeeper-securitycenter-controller-manager \\\u00a0 \u00a0 --namespace gatekeeper-securitycenter --follow --all-containers\n```You see log entries with the message `syncing findings` .To stop following the log, press `Ctrl+C` .\n- To verify that the controller can create new findings, create a policy and a resource that violates the policy. The Pod uses image digests to refer to container images.Go to the OPA Gatekeeper library repository directory:```\ncd ~/gatekeeper-library\n```\n- Create a Pod called `opa-disallowed` in the `default` namespace:```\nkubectl apply --namespace default -f \\\u00a0 \u00a0 library/general/imagedigests/samples/container-image-must-have-digest/example_disallowed.yaml\n```The following is the manifest that you apply to create the Pod: [  library/general/imagedigests/samples/container-image-must-have-digest/example_disallowed.yaml ](https://github.com/open-policy-agent/gatekeeper-library/blob/1da0facae99658accb73c291cb79f497fcddf641/library/general/imagedigests/samples/container-image-must-have-digest/example_disallowed.yaml) [View on GitHub](https://github.com/open-policy-agent/gatekeeper-library/blob/1da0facae99658accb73c291cb79f497fcddf641/library/general/imagedigests/samples/container-image-must-have-digest/example_disallowed.yaml) ```\napiVersion: v1kind: Podmetadata:\u00a0 name: opa-disallowedspec:\u00a0 containers:\u00a0 \u00a0 - name: opa\u00a0 \u00a0 \u00a0 image: openpolicyagent/opa:0.9.2\u00a0 \u00a0 \u00a0 args:\u00a0 \u00a0 \u00a0 \u00a0 - \"run\"\u00a0 \u00a0 \u00a0 \u00a0 - \"--server\"\u00a0 \u00a0 \u00a0 \u00a0 - \"--addr=localhost:8080\"\n```This Pod specification refers to a container image by tag instead of by digest.\n- Create a constraint template called `k8simagedigests` :```\nkubectl apply -f library/general/imagedigests/template.yaml\n```The following is the constraint template manifest: [  library/general/imagedigests/template.yaml ](https://github.com/open-policy-agent/gatekeeper-library/blob/1da0facae99658accb73c291cb79f497fcddf641/library/general/imagedigests/template.yaml) [View on GitHub](https://github.com/open-policy-agent/gatekeeper-library/blob/1da0facae99658accb73c291cb79f497fcddf641/library/general/imagedigests/template.yaml) ```\napiVersion: templates.gatekeeper.sh/v1beta1kind: ConstraintTemplatemetadata:\u00a0 name: k8simagedigests\u00a0 annotations:\u00a0 \u00a0 description: >-\u00a0 \u00a0 \u00a0 Requires container images to contain a digest.\u00a0 \u00a0 \u00a0 https://kubernetes.io/docs/concepts/containers/images/spec:\u00a0 crd:\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 names:\u00a0 \u00a0 \u00a0 \u00a0 kind: K8sImageDigests\u00a0 targets:\u00a0 \u00a0 - target: admission.k8s.gatekeeper.sh\u00a0 \u00a0 \u00a0 rego: |\u00a0 \u00a0 \u00a0 \u00a0 package k8simagedigests\u00a0 \u00a0 \u00a0 \u00a0 violation[{\"msg\": msg}] {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 container := input.review.object.spec.containers[_]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 satisfied := [re_match(\"@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+\", container.image)]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 not all(satisfied)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 msg := sprintf(\"container <%v> uses an image without a digest <%v>\", [container.name, container.image])\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 violation[{\"msg\": msg}] {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 container := input.review.object.spec.initContainers[_]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 satisfied := [re_match(\"@[a-z0-9]+([+._-][a-z0-9]+)*:[a-zA-Z0-9=_-]+\", container.image)]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 not all(satisfied)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 msg := sprintf(\"initContainer <%v> uses an image without a digest <%v>\", [container.name, container.image])\u00a0 \u00a0 \u00a0 \u00a0 }\n```\n- Create a constraint called `container-image-must-have-digest` :```\nkubectl apply -f library/general/imagedigests/samples/container-image-must-have-digest/constraint.yaml\n```The following is the constraint manifest: [  library/general/imagedigests/samples/container-image-must-have-digest/constraint.yaml ](https://github.com/open-policy-agent/gatekeeper-library/blob/1da0facae99658accb73c291cb79f497fcddf641/library/general/imagedigests/samples/container-image-must-have-digest/constraint.yaml) [View on GitHub](https://github.com/open-policy-agent/gatekeeper-library/blob/1da0facae99658accb73c291cb79f497fcddf641/library/general/imagedigests/samples/container-image-must-have-digest/constraint.yaml) ```\napiVersion: constraints.gatekeeper.sh/v1beta1kind: K8sImageDigestsmetadata:\u00a0 name: container-image-must-have-digestspec:\u00a0 match:\u00a0 \u00a0 kinds:\u00a0 \u00a0 \u00a0 - apiGroups: [\"\"]\u00a0 \u00a0 \u00a0 \u00a0 kinds: [\"Pod\"]\u00a0 \u00a0 namespaces:\u00a0 \u00a0 \u00a0 - \"default\"\n```This constraint only applies to the `default` namespace.\n- Follow the controller log:```\nkubectl logs deployment/gatekeeper-securitycenter-controller-manager \\\u00a0 \u00a0 --namespace gatekeeper-securitycenter --follow --all-containers\n```After a few minutes, you see a log entry with the message `create finding` . This message means that the `gatekeeper-securitycenter` controller created a finding.To stop following the log, press `Ctrl+C` .\n- To verify that the controller can set the finding state to `INACTIVE` when a violation is no longer reported by Policy Controller or OPA Gatekeeper, delete the Pod called `opa-disallowed` in the `default` namespace:```\nkubectl delete pod opa-disallowed --namespace default\n```\n- Follow the controller log:```\nkubectl logs deployment/gatekeeper-securitycenter-controller-manager \\\u00a0 \u00a0 --namespace gatekeeper-securitycenter --follow --all-containers\n```After a few minutes, you see a log entry with the message `updating finding state` and the attribute `\"state\":\"INACTIVE\"` . This message means that the controller set the finding state to inactive.To stop following the log, press `Ctrl+C` .\n## Viewing findingsYou can view Security Command Center findings on the terminal and in the Google Cloud console.\n **Note:** It can take a few minutes for new findings and changes to existing findings to appear in Security Command Center. If you don't see the findings, wait a few minutes and try again.- In Cloud Shell, use the gcloud CLI to list findings for your organization and source:```\ngcloud scc findings list $ORGANIZATION_ID \\\u00a0 \u00a0 --source $(basename $SOURCE_NAME) \\\u00a0 \u00a0 --format json\n```You use the `basename` command to get the numeric source ID from the full source name.The output looks similar to the following:```\n[ {\n \"finding\": {\n  \"category\": \"K8sAllowedRepos\",\n  \"createTime\": \"2020-11-25T06:58:47.213Z\",\n  \"eventTime\": \"2020-11-25T06:58:20Z\",\n  \"externalUri\": \"https://API_SERVER/apis/constraints.gatekeeper.sh/v1beta1/k8sallowedrepos/repo-is-openpolicyagent\",\n  \"name\": \"organizations/ORGANIZATION_ID/sources/SOURCE_ID/findings/FINDING_ID\",\n  \"parent\": \"organizations/ORGANIZATION_ID/sources/SOURCE_ID\",\n  \"resourceName\": \"https://API_SERVER/api/v1/namespaces/default/pods/nginx-disallowed\",\n  \"securityMarks\": {\n  \"name\": \"organizations/ORGANIZATION_ID/sources/SOURCE_ID/findings/FINDING_ID/securityMarks\"\n  },\n  \"sourceProperties\": {\n  \"Cluster\": \"cluster-name\",\n  \"ConstraintName\": \"repo-is-openpolicyagent\",\n  \"ConstraintSelfLink\": \"https://API_SERVER/apis/constraints.gatekeeper.sh/v1beta1/k8sallowedrepos/repo-is-openpolicyagent\",\n  \"ConstraintTemplateSelfLink\": \"https://API_SERVER/apis/templates.gatekeeper.sh/v1beta1/constrainttemplates/k8sallowedrepos\",\n  \"ConstraintTemplateUID\": \"e35b1c39-15f7-4a7a-afae-1637b44e81b2\",\n  \"ConstraintUID\": \"b904dddb-0a23-4f4f-81bb-0103de838d3e\",\n  \"Explanation\": \"container <nginx> has an invalid image repo <nginx>, allowed repos are [\\\"openpolicyagent\\\"]\",\n  \"ProjectId\": \"\",\n  \"ResourceAPIGroup\": \"\",\n  \"ResourceAPIVersion\": \"v1\",\n  \"ResourceKind\": \"Pod\",\n  \"ResourceName\": \"nginx-disallowed\",\n  \"ResourceNamespace\": \"default\",\n  \"ResourceSelfLink\": \"https://API_SERVER/api/v1/namespaces/default/pods/nginx-disallowed\",\n  \"ResourceStatusSelfLink\": \"\",\n  \"ResourceUID\": \"8ddd752f-e620-43ea-b966-4ae2ae507c67\",\n  \"ScannerName\": \"GATEKEEPER\"\n  },\n  \"state\": \"ACTIVE\"\n },\n \"resource\": {\n  \"name\": \"https://API_SERVER/api/v1/namespaces/default/pods/nginx-disallowed\"\n }\n },\n {\n \"finding\": {\n  \"category\": \"K8sImageDigests\",\n  [...]\n }\n]\n```In this output:- ``is the IP address or hostname of your GKE cluster [API server](https://kubernetes.io/docs/concepts/overview/components/#kube-apiserver) \n- ``is your Google Cloud organization ID\n- ``is your Security Command Center source ID\n- ``is the finding ID\nTo learn what the finding attributes mean, see [the Finding resource in the Security Command Center API](/security-command-center/docs/reference/rest/v1/organizations.sources.findings) . **Note:** Some of the source properties are missing (empty) for some findings. This behavior is expected, because some resources contain more attributes than others. For instance, findings for Pod resources don't have a value for the `ResourceAPIGroup` source property because the Pod doesn't belong to a Kubernetes API group.\n- To view the findings in the Google Cloud console, go to the **Findings** tab of Security Command Center. [Go to Findings](https://console.cloud.google.com/security/command-center/findings) \n- Select your organization and click **Select** .\n- Click **View by** **Source type** .\n- In the **Source type** list, click **Gatekeeper** . If **Gatekeeper** isn't in the **Source type** list, clear any filters in the list of findings.\n- In the list of findings, click a finding to see the finding attributes and source properties.If a resource no longer causes a violation because of a change to the resource or the policy, the controller sets the finding state to . It can take a few minutes for this change to be visible in Security Command Center.By default, Security Command Center shows active findings. To see inactive findings, click **More options** , select **Include inactive findings** , and click **OK** .\n## Troubleshooting\n- If Policy Controller or OPA Gatekeeper don't report violations in the `status` field of the constraint objects, use Cloud Shell to view logs of the audit controller:```\nkubectl logs deployment/gatekeeper-audit --namespace gatekeeper-system \\\u00a0 \u00a0 --all-containers\n```\n- If the `gatekeeper-securitycenter` controller doesn't create findings in Security Command Center, you can view logs of the controller manager:```\nkubectl logs deployment/gatekeeper-securitycenter-controller-manager \\\u00a0 \u00a0 --namespace gatekeeper-securitycenter --all-containers\n```\n- If the `gatekeeper-securitycenter` command-line tool reports errors, you can increase the verbosity of the log output by setting the `DEBUG` environment variable to `true` before running the `gatekeeper-securitycenter` command:```\nexport DEBUG=true\n```\n- When using the `gatekeeper-securitycenter` command-line tool to create a source in Security Command Center, you might get an error message that ends with the following text:```\noauth2: cannot fetch token: 400 Bad RequestResponse: {\u00a0 \"error\": \"invalid_grant\",\u00a0 \"error_description\": \"Bad Request\"}\n```In this case, acquire new credentials for use with [Application Default Credentials](/docs/authentication/provide-credentials-adc) :```\ngcloud auth application-default login\n```Use the new credentials to try to create the source again.\nIf you run into other problems with this tutorial, we recommend that you review the following documents:- [OPA Gatekeeper debugging](https://open-policy-agent.github.io/gatekeeper/website/docs/debug) \n- [GKE troubleshooting](/kubernetes-engine/docs/troubleshooting) \n- [Troubleshooting Kubernetes clusters](https://kubernetes.io/docs/tasks/debug/debug-cluster/) \n## Automating the setupFor future deployments, you can automate the steps in this tutorial by following the instructions in the [gatekeeper-securitycenter GitHub repository](https://github.com/GoogleCloudPlatform/gatekeeper-securitycenter) .## Clean upTo avoid incurring further charges to your Google Cloud account for the resources used in this tutorial, delete the individual resources.\n### Delete the individual resources\n- In Cloud Shell, delete the GKE cluster:```\ngcloud container clusters delete gatekeeper-securitycenter-tutorial \\\u00a0 \u00a0 --zone us-central1-f --async --quiet\n```\n- Delete the `gatekeeper-library` files:```\nrm -rf ~/gatekeeper-library\n```\n- Delete the IAM policy bindings:```\nGOOGLE_CLOUD_PROJECT=$(gcloud config get-value core/project)ORGANIZATION_ID=$(gcloud projects get-ancestors $GOOGLE_CLOUD_PROJECT \\\u00a0 \u00a0 --format json | jq -r '.[] | select (.type==\"organization\") | .id')SOURCE_NAME=$(./gatekeeper-securitycenter sources list \\\u00a0 \u00a0 --organization \"$ORGANIZATION_ID\" \\\u00a0 \u00a0 --impersonate-service-account \"securitycenter-sources-admin@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com\" \\\u00a0 \u00a0 | jq -r \".[] | select (.display_name==\\\"Gatekeeper\\\") | .name\")./gatekeeper-securitycenter sources remove-iam-policy-binding \\\u00a0 \u00a0 --source $SOURCE_NAME \\\u00a0 \u00a0 --member \"serviceAccount:gatekeeper-securitycenter@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com\" \\\u00a0 \u00a0 --role roles/securitycenter.findingsEditor \\\u00a0 \u00a0 --impersonate-service-account securitycenter-sources-admin@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.comgcloud iam service-accounts remove-iam-policy-binding \\\u00a0 \u00a0 gatekeeper-securitycenter@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com \\\u00a0 \u00a0 --member \"serviceAccount:$GOOGLE_CLOUD_PROJECT.svc.id.goog[gatekeeper-securitycenter/gatekeeper-securitycenter-controller]\" \\\u00a0 \u00a0 --role roles/iam.workloadIdentityUsergcloud iam service-accounts remove-iam-policy-binding \\\u00a0 \u00a0 gatekeeper-securitycenter@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com \\\u00a0 \u00a0 --member \"user:$(gcloud config get-value account)\" \\\u00a0 \u00a0 --role roles/iam.serviceAccountTokenCreatorgcloud organizations remove-iam-policy-binding $ORGANIZATION_ID \\\u00a0 \u00a0 --member \"serviceAccount:gatekeeper-securitycenter@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com\" \\\u00a0 \u00a0 --role roles/serviceusage.serviceUsageConsumergcloud iam service-accounts remove-iam-policy-binding \\\u00a0 \u00a0 securitycenter-sources-admin@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com \\\u00a0 \u00a0 --member \"user:$(gcloud config get-value account)\" \\\u00a0 \u00a0 --role roles/iam.serviceAccountTokenCreatorgcloud organizations remove-iam-policy-binding $ORGANIZATION_ID \\\u00a0 \u00a0 --member \"serviceAccount:securitycenter-sources-admin@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com\" \\\u00a0 \u00a0 --role roles/serviceusage.serviceUsageConsumergcloud organizations remove-iam-policy-binding $ORGANIZATION_ID \\\u00a0 \u00a0 --member \"serviceAccount:securitycenter-sources-admin@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com\" \\\u00a0 \u00a0 --role roles/securitycenter.sourcesAdmin\n```\n- Delete the Google service accounts:```\ngcloud iam service-accounts delete --quiet \\\u00a0 \u00a0 gatekeeper-securitycenter@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.comgcloud iam service-accounts delete --quiet \\\u00a0 \u00a0 securitycenter-sources-admin@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com\n```## What's next\n- Learn how to [create policy-compliant Google Cloud resources using Config Connector and Policy Controller or OPA Gatekeeper](/solutions/policy-compliant-resources) .\n- Discover how to [run Policy Controller validation as part of a continuous integration pipeline in Cloud Build](/anthos-config-management/docs/how-to/app-policy-validation-ci-pipeline) .\n- Learn how to [set up notifications for Security Command Center findings](/security-command-center/docs/how-to-notifications) .\n- Learn more about how to [access Security Command Center using an SDK](/security-command-center/docs/how-to-programmatic-access) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Docs"}