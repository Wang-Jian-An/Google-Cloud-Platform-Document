{"title": "Docs - Decide the network design for your Google Cloud landing zone", "url": "https://cloud.google.com/architecture/landing-zones/decide-network-design", "abstract": "# Docs - Decide the network design for your Google Cloud landing zone\nLast reviewed 2023-09-11 UTC\nWhen you design your landing zone, you must choose a network design that works for your organization. This document describes four common network designs, and helps you choose the option that best meets your organization's requirements, and your organization's preference for centralized control or decentralized control. It's intended for network engineers, architects, and technical practitioners who are involved in creating the network design for your organization's landing zone.\nThis article is part of a series about [landing zones](/architecture/landing-zones) .\n", "content": "## Choose your network design\nThe network design that you choose depends primarily on the following factors:\n- **Centralized or decentralized control:** Depending on your organization's preferences, you must choose one of the following:- Centralize control over the network including IP addressing, routing, and firewalling between different workloads.\n- Give your teams greater autonomy in running their own environments and building network elements within their environments themselves.\n- **On-premises or hybrid cloud connectivity options:** All the network designs discussed in this document provide access from on-premises to cloud environments through [Cloud VPN](/network-connectivity/docs/vpn/concepts/overview) or [Cloud Interconnect](/network-connectivity/docs/interconnect/concepts/overview) . However, some designs require you to set up multiple connections in parallel, while others use the same connection for all workloads.\n- **Security requirements:** Your organization might require traffic between different workloads in Google Cloud to pass through centralized network appliances such as [next generation firewalls (NGFW)](https://en.wikipedia.org/wiki/Next-generation_firewall) . This constraint influences your Virtual Private Cloud (VPC) network design.\n- **Scalability:** Some designs might be better for your organization than others, based on the number of workloads that you want to deploy, and the number of virtual machines (VMs), internal load balancers, and other resources that they will consume.## Decision points for network design\nThe following flowchart shows the decisions that you must make to choose the best network design for your organization.\nThe preceding diagram guides you through the following questions:\n- Do you require [Layer 7](https://en.wikipedia.org/wiki/OSI_model#Layer_7:_Application_layer) inspection using network appliances between different workloads in Google Cloud?- If yes, see [Hub-and-spoke topology with centralized appliances](#option-2) .\n- If no, proceed to the next question.\n- Do many of your workloads require on-premises connectivity?- If yes, go to decision point 4.\n- If no, proceed to the next question.\n- Can your workloads communicate using private endpoints in a service producer and consumer model?- If yes, see [Expose services in a consumer-producer model with Private Service Connect](#option-4) .\n- If no, proceed to the next question.\n- Do you want to administer firewalling and routing centrally?- If yes, see [Shared VPC network for each environment](#option-1) .\n- If no, see [Hub-and-spoke topology without appliances](#option-3) .This chart is intended to help you make a decision, however, it can often be the case that multiple designs might be suitable for your organization. In these instances, we recommend that you choose the design that fits best with your use case.\n## Network design options\nThe following sections describe four common design options. We recommend option 1 for most use cases. The other designs discussed in this section are alternatives that apply to specific organizational edge-case requirements.\nThe best fit for your use case might also be a network that combines elements from multiple design options discussed in this section. For example, you can use [Shared VPC](/vpc/docs/shared-vpc) networks in hub-and-spoke topologies for better collaboration, centralized control, and to limit the number of VPC spokes. Or, you might design most workloads in a Shared VPC topology but isolate a small number of workloads in separate VPC networks that only expose services through a few defined endpoints using [Private Service Connect](/vpc/docs/private-service-connect) .\n**Note:** When the design options refer to connections to on-premises networks, you can use the same concepts for connections to other cloud service providers (CSPs).\n### Option 1: Shared VPC network for each environment\nWe recommend this network design for most use cases. This design uses separate Shared VPC networks for each deployment environment that you have in Google Cloud (development, testing, and production). This design lets you centrally manage network resources in a common network and provides network isolation between the different environments.\nUse this design when the following is true:\n- You want central control over firewalling and routing rules.\n- You need a simple, scalable infrastructure.\n- You need centralized IP address space management.\nAvoid this design when the following is true:\n- You want developer teams to have full autonomy, including the ability to manage their own firewall rules, routing, and peering to other team networks.\n- You need Layer 7 inspection using NGFW appliances.\nThe following diagram shows an example implementation of this design.\nThe preceding diagram shows the following:\n- The on-premises network is spread across two geographical locations.\n- The on-premises network connects through redundant Cloud Interconnect instances to two separate Shared VPC networks, one for production and one for development.\n- The production and development environments are connected to both Cloud Interconnect instances with different [VLAN attachments](/network-connectivity/docs/interconnect/how-to/dedicated/creating-vlan-attachments) .\n- Each Shared VPC has service projects that host the workloads.\n- Firewall rules are centrally administered in the host project.\n- The development environment has the same VPC structure as the production environment.\nBy design, traffic from one environment cannot reach another environment. However, if specific workloads must communicate with each other, you can allow data transfer through controlled channels on-premises, or you can share data between applications with Google Cloud services like [Cloud Storage](/storage) or [Pub/Sub](/pubsub) . We recommend that you avoid directly connecting separated environments through VPC Network Peering, because it increases the risk of accidentally mixing data between the environments. Using VPC Network Peering between large environments also increases the risk of hitting [VPC quotas](/vpc/docs/quota#vpc-peering) around peering and peering groups.\nFor more information, see the following:\n- [Shared VPC overview](/vpc/docs/shared-vpc) \n- [Shared VPC architecture in the enterprise foundations guide](/architecture/security-foundations/networking#dual-shared-vpc-network-topology) \n- [Reference architecture in VPC design best practices](/architecture/best-practices-vpc-design#multiple-host-project-multiple-service-projects-multiple-shared-vpc) \n- [Terraform deployment stage: Networking with separate environments](https://github.com/GoogleCloudPlatform/cloud-foundation-fabric/tree/master/fast/stages/2-networking-d-separate-envs) as part of [Fabric FAST framework](https://github.com/GoogleCloudPlatform/cloud-foundation-fabric/tree/master/fast) \n- [Network stage for Terraform example foundation](https://github.com/terraform-google-modules/terraform-example-foundation/tree/master/3-networks-dual-svpc) using [Cloud Foundation toolkit](https://github.com/GoogleCloudPlatform/cloud-foundation-toolkit) \nTo implement this design option, see [Create option 1: Shared VPC network for each environment](/architecture/landing-zones/implement-network-design#option-1-shared-vpc-network-for-each-environment) .\n### Option 2: Hub-and-spoke topology with centralized appliances\nThis network design uses hub-and-spoke topology. A hub VPC network contains a set of appliance VMs such as NGFWs that are connected to the spoke VPC networks that contain the workloads. Traffic between the workloads, on-premises networks, or the internet is routed through appliance VMs for inspection and filtering.\nUse this design when the following is true:\n- You require Layer 7 inspection between different workloads or applications.\n- You have a corporate mandate that specifies the security appliance vendor for all traffic.\nAvoid this design when the following is true:\n- You don't require Layer 7 inspection for most of your workloads.\n- You want workloads on Google Cloud to not communicate at all with each other.\n- You only need Layer 7 inspection for traffic going to on-premises networks, as described in [Special use case with one shared VPC network on Google Cloud](/architecture/architecture-centralized-network-appliances-on-google-cloud#special_use_case_with_one_shared_vpc_network_on_google_cloud) .\nThe following diagram shows an example implementation of this pattern.\nThe preceding diagram shows the following:\n- A production environment which includes a hub VPC network and multiple spoke VPC networks that contain the workloads.\n- The spoke VPC networks are connected with the hub VPC network by using VPC Network Peering.\n- The hub VPC network has multiple instances of a virtual appliance in a managed instance group. Traffic to the managed instance group goes through an internal passthrough Network Load Balancer.\n- The spoke VPC networks communicate with each other through the virtual appliances by using static routes with the internal load balancer as the next hop.\n- Cloud Interconnect connects the transit VPC networks to on-premises locations.\n- On-premises networks are connected through the same Cloud Interconnects using separate VLAN attachments.\n- The transit VPC networks are connected to a separate network interface on the virtual appliances, which lets you inspect and filter all traffic to and from these networks by using your appliance.\n- The development environment has the same VPC structure as the production environment.\n- This setup doesn't use source network address translation (SNAT). SNAT isn't required because Google Cloud uses. For more information see [Symmetric hashing](/load-balancing/docs/internal/ilb-next-hop-overview#symmetric-hashing) .\nBy design, traffic from one spoke network cannot reach another spoke network. However, if specific workloads must communicate with each other, you can set up direct peering between the spoke networks using VPC Network Peering, or you can share data between applications with Google Cloud services like Cloud Storage or Pub/Sub.\nTo maintain low latency when the appliance communicates between workloads, the appliance must be in the same region as the workloads. If you use multiple regions in your cloud deployment, you can have one set of appliances and one hub VPC for each environment in each region. Alternatively, you can use [network tags with routes](/vpc/docs/add-remove-network-tags#interaction_with_routes) to have all instances communicate with the closest appliance.\n[Firewall rules](/vpc/docs/firewalls) can restrict the connectivity within the spoke VPC networks that contain workloads. Often, teams who administer the workloads also administer these firewall rules. For central policies, you can use [hierarchical firewall policies](/vpc/docs/firewall-policies) . If you require a central network team to have full control over firewall rules, consider centrally deploying those rules in all VPC networks by using a [GitOps approach](/architecture/managing-infrastructure-as-code) . In this case, restrict the IAM permissions to only those administrators who can change the firewall rules. Spoke VPC networks can also be Shared VPC networks if multiple teams deploy in the spokes.\nIn this design, we recommend that you use VPC Network Peering to connect the hub VPC network and spoke VPC networks because it adds minimum complexity. However, the maximum number of spokes is limited by the following:\n- The limit on [VPC Network Peering connections ](/vpc/docs/quota#vpc-peering) from a single VPC network.\n- Peering group limits such as the maximum number of forwarding rules for the internal TCP/UDP Load Balancing for each peering group.\nIf you expect to reach these limits, you can connect the spoke networks through Cloud VPN. Using Cloud VPN adds extra cost and complexity and each Cloud VPN tunnel has a bandwidth limit.\nFor more information, see the following:\n- [Centralized network appliances on Google Cloud](/architecture/architecture-centralized-network-appliances-on-google-cloud) \n- [Hub and spoke transitivity architecture in the enterprise foundations guide](/architecture/security-foundations/networking#hub-spoke-network-topology) \n- [Terraform deployment stage: Networking with Network Virtual Appliance](https://github.com/GoogleCloudPlatform/cloud-foundation-fabric/tree/master/fast/stages/2-networking-c-nva) as part of the Fabric FAST framework\n- [Terraform hub-and-spoke transitivity module](https://github.com/terraform-google-modules/terraform-example-foundation/tree/master/3-networks-hub-and-spoke/modules/transitivity) as part of the [example foundation](https://github.com/terraform-google-modules/terraform-example-foundation) \nTo implement this design option, see [Create option 2: Hub-and-spoke topology with centralized appliances](/architecture/landing-zones/implement-network-design#create_option_2_hub-and-spoke_topology_with_centralized_appliances) .\n### Option 3: Hub-and-spoke topology without appliances\nThis network design also uses a hub-and-spoke topology, with a hub VPC network that connects to on-premises networks and spoke VPC networks that contain the workloads. Because VPC Network Peering is non-transitive, spoke networks cannot communicate with each other directly.\nUse this design when the following is true:\n- You want workloads or environments in Google Cloud to not communicate with each other at all using internal IP addresses, but you do want them to share on-premises connectivity.\n- You want to give teams autonomy in managing their own firewall and routing rules.\nAvoid this design when the following is true:\n- You require Layer 7 inspection between workloads.\n- You want to centrally manage routing and firewall rules.\n- You require communications from on-premises services to managed services that are connected to the spokes through another VPC Network Peering, because VPC Network Peering is non-transitive.\nThe following diagram shows an example implementation of this design.\nThe preceding diagram shows the following:\n- A production environment which includes a hub VPC network and multiple spoke VPC networks that contain the workloads.\n- The spoke VPC networks are connected with the hub VPC network by using VPC Network Peering.\n- Connectivity to on-premises locations passes through Cloud Interconnect connections in the hub VPC network.\n- On-premises networks are connected through the Cloud Interconnect instances using separate VLAN attachments.\n- The development environment has the same VPC structure as the production environment.\nBy design, traffic from one spoke network cannot reach another spoke network. However, if specific workloads must communicate with each other, you can set up direct peering between the spoke networks using VPC Network Peering, or you can share data between applications with Google Cloud services like Cloud Storage or Pub/Sub.\nThis network design is often used in environments where teams act autonomously and there is no centralized control over firewall and routing rules. However, the scale of this design is limited by the following:\n- The limit on [VPC Network Peering connections from a single VPC network](/vpc/docs/quota#vpc-peering) \n- Peering group limits such as the maximum number of forwarding rules for the internal passthrough Network Load Balancer for each peering group\nTherefore, this design is not typically used in large organizations that have many separate workloads on Google Cloud.\nAs a variation to the design, you can use Cloud VPN instead of VPC Network Peering. Cloud VPN lets you increase the number of spokes, but adds a [bandwidth limit for each tunnel](/network-connectivity/docs/vpn/quotas#limits) and increases complexity and costs. When you use [custom route advertisements](/network-connectivity/docs/router/how-to/advertising-custom-ip) , Cloud VPN also allows for transitivity between the spokes without requiring you to directly connect all the spoke networks.\nFor more information, see the following:\n- [Hub-and-spoke network architecture](/architecture/deploy-hub-spoke-vpc-network-topology) \n- [Hub-and-spoke architecture in the enterprise foundations guide](/architecture/security-foundations/networking#hub-spoke-network-topology) \n- [Terraform deployment stage: Networking with VPC Network Peering](https://github.com/GoogleCloudPlatform/cloud-foundation-fabric/tree/master/fast/stages/2-networking-a-peering) as part of the Fabric FAST framework\n- [Terraform deployment stage: Networking with Cloud VPN](https://github.com/GoogleCloudPlatform/cloud-foundation-fabric/tree/master/fast/stages/2-networking-b-vpn) as part of Fabric FAST framework\nTo implement this design option, see [Create option 3: Hub-and-spoke topology without appliances](/architecture/landing-zones/implement-network-design#create_option_3_hub-and-spoke_topology_without_appliances) .\n### Option 4: Expose services in a consumer-producer model with Private Service Connect\nIn this network design, each team or workload gets their own VPC network, which can also be a Shared VPC network. Each VPC network is independently managed and uses [Private Service Connect](/vpc/docs/private-service-connect) to expose all the services that need to be accessed from outside the VPC network.\nUse this design when the following is true:\n- Workloads only communicate with each other and the on-premises environment through defined endpoints.\n- You want teams to be independent of each other, and manage their own IP address space, firewalls, and routing rules.\nAvoid this design when the following is true:\n- Communication between services and applications uses many different ports or channels, or ports and channels change frequently.\n- Communication between workloads uses protocols other than TCP or UDP.\n- You require Layer 7 inspection between workloads.\nThe following diagram shows an example implementation of this pattern.\nThe preceding diagram shows the following:\n- Separate workloads are located in separate projects and VPC networks.\n- A client VM in one VPC network can connect to a workload in another VPC network through a Private Service Connect endpoint.\n- The endpoint is attached to a service attachment in the VPC network where the service is located. The service attachment can be in a different region from the endpoint if the endpoint is configured for [global access](/vpc/docs/about-accessing-vpc-hosted-services-endpoints#global-access) .\n- The service attachment connects to the workload through Cloud Load Balancing.\n- Clients in the workload VPC can reach workloads that are located on-premises as follows:- The endpoint is connected to a service attachment in a transit VPC network.\n- The service attachment is connected to the on-premises network using Cloud Interconnect.\n- An internal Application Load Balancer is attached to the service attachment and uses a hybrid network endpoint group to balance traffic load between the endpoints that are located on-premises.\n- On-premises clients can also reach endpoints in the transit VPC network that connect to service attachments in the workload VPC networks.\nFor more information, see the following:\n- [Publish managed services using Private Service Connect](/vpc/docs/configure-private-service-connect-producer) \n- [Access published services through endpoints](/vpc/docs/configure-private-service-connect-services) \nTo implement this design option, see [Create option 4: Expose services in a consumer-producer model with Private Service Connect](/architecture/landing-zones/implement-network-design#option-4-psc) .\n## Best practices for network deployment\nAfter you choose the best network design for your use case, we recommend that for implement the following best practices:\n- [Use custom mode VPC networks](/architecture/best-practices-vpc-design#custom-mode) and delete the default network to have better control over your network's IP addresses.\n- [Limit external access](/architecture/best-practices-vpc-design#limit-access) by using Cloud NAT for resources that need internet access and reducing the use of public IP addresses to resources accessible through Cloud Load Balancing. For more information, see [building internet connectivity for private VMs](/architecture/building-internet-connectivity-for-private-vms) .\n- If you use Cloud Interconnect, make sure that you follow the recommended topologies for [non-critical](/network-connectivity/docs/interconnect/tutorials/non-critical-overview) or [production-level applications](/network-connectivity/docs/interconnect/tutorials/production-level-overview) . Use redundant connections to meet the SLA for the service. Alternatively, you can connect Google Cloud to on-premises networks through [Cloud VPN](/network-connectivity/docs/vpn/concepts/overview) .\n- Enforce the policies introduced in [limit external access by using an organization policy](/architecture/landing-zones/implement-network-design#limit_external_access_by_using_an_organization_policy) to restrict direct access to the internet from your VPC.\n- Use [hierarchical firewall policies](/vpc/docs/firewall-policies) to inherit firewall policies consistently across your organization or folders.\n- Follow [DNS best practices](/dns/docs/best-practices) for hybrid DNS between your on-premises network and Google Cloud.\nFor more information, see [Best practices and reference architectures for VPC design](/architecture/best-practices-vpc-design) .\n## What's next\n- [Implement your Google Cloud landing zone network design](/architecture/landing-zones/implement-network-design) \n- [Decide the security for your Google Cloud landing zone](/architecture/landing-zones/decide-security) (next document in this series).\n- Read [Best practices for VPC network design](/solutions/best-practices-vpc-design) .\n- Learn how to use [Centralized network appliances on Google Cloud](/architecture/architecture-centralized-network-appliances-on-google-cloud) .\n- Read more about [Private Service Connect](/vpc/docs/private-service-connect) .", "guide": "Docs"}