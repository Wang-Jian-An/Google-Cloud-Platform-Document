{"title": "Docs - Cymbal Bank application architecture", "url": "https://cloud.google.com/architecture/enterprise-application-blueprint/cymbal-bank", "abstract": "# Docs - Cymbal Bank application architecture\nLast reviewed 2023-12-20 UTC\n**    Preview     ** This product or feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA products and features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nThe blueprint includes a sample application that is named . Cymbal Bank demonstrates the best practices that are recommended for containerized applications. The Cymbal Bank application lets users create login accounts, sign in to their account, see their transaction history, make deposits, and transfer money to other users' accounts. Cymbal Bank services run as containers that connect to each other over [REST APIs](https://en.wikipedia.org/wiki/Representational_state_transfer) and [gRPC APIs](https://grpc.io/) .\nThe following diagram shows the Cymbal Bank application that is deployed on the blueprint developer platform.\nEach application is also a network service. Only the frontend application is exposed externally to the cluster through the [GKE Gateway controller](/kubernetes-engine/docs/concepts/gateway-api) . All applications run as distributed services through the use of [Anthos Service Mesh](/anthos/service-mesh) .\nFor more information about the services that are included in the Cymbal Bank application, see the [Cymbal Bank repository on GitHub](https://github.com/GoogleCloudPlatform/bank-of-anthos#service-architecture) .\n", "content": "## Cymbal Bank tenants\nTo provide separation between tenants, each tenant in the developer platform has one [team scope](/anthos/fleet-management/docs/team-management) and at least one fleet namespace. Tenants never share a namespace. To deploy Cymbal Bank, each tenant only needs one namespace. In more complex scenarios, a tenant can have several namespaces.\nTo illustrate how Cymbal Bank is deployed on the developer platform, this example assumes that there were three separate application development teams with different focus areas. The Terraform creates the following developer platform tenant for each of those teams:\n- **frontend tenant** : A development team that focuses on the website and mobile application backends.\n- **accounts tenant** : A development team that focuses on customer data.\n- **transactions tenant** : A team that manages the transaction services.## Cymbal Bank apps\nThe Cymbal Bank application consists of six microservices: `frontend, ledgerwriter, balancereader, transactionhistory, userservice` , and `contacts` . Each microservice is mapped to an application within the tenant that owns it.\nThe following table describes the mapping of the teams, team scope, fleet namespace, and microservices for Cymbal Bank. For the purpose of this mapping, this example assumes that Cymbal Bank is developed by three separate application operator teams. Teams manage a varying number of services. Each team is assigned a team scope.\n| Team    | Team scope | Fleet namespace | Application - Microservice | Kubernetes service account |\n|:------------------|:-------------|:------------------|:-----------------------------|:-----------------------------|\n| Frontend team  | frontend  | frontend   | frontend      | ksa-frontend     |\n| Transactions team | transactions | transactions  | ledgerwriter     | ksa-ledgerwriter    |\n| Transactions team | transactions | transactions  | balancereader    | ksa-balancereader   |\n| Transactions team | transactions | transactions  | transactionhistory   | ksa-transactionhistory  |\n| Accounts team  | accounts  | accounts   | userservice     | ksa-userservice    |\n| Accounts team  | accounts  | accounts   | contacts      | ksa-contacts     |\n## Cymbal Bank database structure\nCymbal Bank databases are deployed using [AlloyDB for PostgreSQL](/alloydb/docs/overview) . The databases are configured with a [highly available primary instance](/alloydb/docs/overview#ha) in one region with redundant nodes in different zones, and [cross-region replicas](/alloydb/docs/cross-region-replication/about-cross-region-replication) are used for disaster recovery. Cymbal Bank uses [IAM database authentication](/alloydb/docs/manage-iam-authn#enable) to allow services access to the databases. The databases are encrypted using [CMEK](/sql/docs/postgres/configure-cmek) . Two PostgreSQL databases are used: `ledger-db` for transactions and `accounts-db` for user accounts.\n## What's next\n- Read about [mapping BeyondProd security principles to the blueprint](/architecture/enterprise-application-blueprint/mapping-beyondprod-security-principles) (next document in this series).", "guide": "Docs"}