{"title": "Docs - Implementing Cloud Run canary deployments with Git branches and Cloud Build", "url": "https://cloud.google.com/architecture/implementing-cloud-run-canary-deployments-git-branches-cloud-build", "abstract": "# Docs - Implementing Cloud Run canary deployments with Git branches and Cloud Build\nLast reviewed 2023-05-26 UTC\nThis document shows you how to implement a deployment pipeline for Cloud Run that implements a progression of code from developer branches to production with automated canary testing and percentage-based traffic management. It is intended for platform administrators who are responsible for creating and managing CI/CD pipelines. This document assumes that you have a basic understanding of Git, Cloud Run, and CI/CD pipeline concepts.\nCloud Run lets you deploy and run your applications with little overhead or effort. Many organizations use robust release pipelines to move code into production. Cloud Run provides unique traffic management capabilities that let you implement advanced release management techniques with little effort.", "content": "## Objectives\n- Create your Cloud Run service\n- Enable a developer branch\n- Implement canary testing\n- Roll out safely to production\n## CostsIn this document, you use the following billable components of Google Cloud:- [Cloud Run](/run/pricing) \n- [Cloud Build](/build/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . ## Before you begin\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n## Preparing your environment\n- In Cloud Shell, create environment variables to use throughout this tutorial:```\nexport PROJECT_ID=$(gcloud config get-value project)export PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format='value(projectNumber)')\n```\n- Enable the following APIs:- Resource Manager\n- GKE\n- Cloud Build\n- Container Registry\n- Cloud Run\n```\ngcloud services enable \\\u00a0 \u00a0 cloudresourcemanager.googleapis.com \\\u00a0 \u00a0 container.googleapis.com \\\u00a0 \u00a0 secretmanager.googleapis.com \\\u00a0 \u00a0 cloudbuild.googleapis.com \\\u00a0 \u00a0 containerregistry.googleapis.com \\\u00a0 \u00a0 run.googleapis.com\n```\n- Grant the Cloud Run Admin role ( `roles/run.admin` ) to the Cloud Build service account```\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\u00a0 --member=serviceAccount:$PROJECT_NUMBER@cloudbuild.gserviceaccount.com \\\u00a0 --role=roles/run.admin\n```\n- Grant the IAM Service Account User role ( `roles/iam.serviceAccountUser` ) to the Cloud Build service account for the Cloud Run runtime service account```\ngcloud iam service-accounts add-iam-policy-binding \\$PROJECT_NUMBER-compute@developer.gserviceaccount.com \\\u00a0 --member=serviceAccount:$PROJECT_NUMBER@cloudbuild.gserviceaccount.com \\\u00a0 --role=roles/iam.serviceAccountUser\n```\n### Set Git valuesIf you haven't used Git in Cloud Shell previously, set the `user.name` and `user.email` values that you want to use:\n```\n\u00a0 \u00a0 git config --global user.email YOUR_EMAIL_ADDRESS \u00a0 \u00a0 git config --global user.name YOUR_USERNAME\u00a0 \u00a0 git config --global credential.helper store\n```- ``: The email used with your GitHub account\n- ``: Your GitHub user ID\nIf you're using MFA with GitHub, [create a personal access token](https://github.com/settings/tokens/new?scopes=repo%2Cread%3Auser%2Cread%3Aorg%2Cuser%3Aemail%2Cwrite&description=CloudRun%20Tutorial) and use it as your password when interacting with GitHub through the command-line.- Follow [this link to create an access token](https://github.com/settings/tokens/new?scopes=repo%2Cread%3Auser%2Cread%3Aorg%2Cuser%3Aemail%2Cwrite&description=CloudRun%20Tutorial) .\n- Leave the GitHub page open.\nStore your GitHub user ID in an environment variable for easier access:\n```\nexport GH_USER=YOUR_GITHUB_ID\n```\n### Fork the project repositoryTo create your own writeable version of the lab repository, fork the sample repository into your GitHub account [through the GitHub UI](https://github.com/GoogleCloudPlatform/software-delivery-workshop/fork) .\n### Clone the sample repositoryClone and prepare the sample repository:\n```\ngit clone https://github.com/$GH_USER/software-delivery-workshop.git cloudrun-progressioncd cloudrun-progression/labs/cloudrun-progression\n```## Connect your Git repository.Cloud Build lets you create and manage connections to source code repositories using the Google Cloud console. You can [create and manage connections](https://console.cloud.google.com/build/repositories) using either the first generation or second generation of Cloud Build repositories. This tutorial uses second generation Cloud Build repositories.\n### Grant required permissionsTo connect your GitHub host, grant the Cloud Build Connection Admin ( `roles/cloudbuild.connectionAdmin` ) role to your user account:\n```\nPN=$(gcloud projects describe ${PROJECT_ID} --format=\"value(projectNumber)\")CLOUD_BUILD_SERVICE_AGENT=\"service-${PN}@gcp-sa-cloudbuild.iam.gserviceaccount.com\"gcloud projects add-iam-policy-binding ${PROJECT_ID} \\\u00a0--member=\"serviceAccount:${CLOUD_BUILD_SERVICE_AGENT}\" \\\u00a0--role=\"roles/secretmanager.admin\"\n```\n### Create the host connection\n- Configure the Cloud Build repository connection:```\ngcloud alpha builds connections create github $GH_USER --region=us-central1\n```\n- Click the link provided in the output and follow the onscreen instructions to complete the connection.\n- Verify the installation of your GitHub connection:```\ngcloud alpha builds connections describe $GH_USER --region=us-central1\n```\n### Link the sample repositoryUsing the host connection you just configured, link in the sample repository you forked:\n```\n\u00a0gcloud alpha builds repositories create cloudrun-progression \\\u00a0 \u00a0 \u00a0--remote-uri=https://github.com/$GH_USER/software-delivery-workshop.git \\\u00a0 \u00a0 \u00a0--connection=$GH_USER \\\u00a0 \u00a0 \u00a0--region=us-central1\n```\n### Set repository name variableStore the repository name for later use:\n```\nexport REPO_NAME=projects/$PROJECT_ID/locations/us-central1/connections/$GH_USER/repositories/cloudrun-progression\n```## Deploy your Cloud Run serviceIn this section, you build and deploy the initial production application that you use throughout this tutorial.\n### Deploy the service\n- In Cloud Shell, build and deploy the application, including a service that requires authentication. To make a public service use the [--allow-unauthenticated flag](https://console.cloud.google.com/run/docs/authenticating/public) .```\n\u00a0 \u00a0 gcloud builds submit --tag gcr.io/$PROJECT_ID/hello-cloudrun \u00a0 \u00a0 gcloud run deploy hello-cloudrun \\\u00a0 \u00a0 \u00a0 --image gcr.io/$PROJECT_ID/hello-cloudrun \\\u00a0 \u00a0 \u00a0 --platform managed \\\u00a0 \u00a0 \u00a0 --region us-central1 \\\u00a0 \u00a0 \u00a0 --tag=prod -q\n```The output looks like the following:```\nDeploying container to Cloud Run service [hello-cloudrun] in project [sdw-mvp6] region [us-central1]\n\u2713 Deploying new service... Done.\n\u00a0\u00a0\u2713 Creating Revision...\n\u00a0\u00a0\u2713 Routing traffic...\nDone.\nService [hello-cloudrun] revision [hello-cloudrun-00001-tar] has been deployed and is serving 100 percent of traffic.\nService URL: https://hello-cloudrun-apwaaxltma-uc.a.run.app\nThe revision can be reached directly at https://prod---hello-cloudrun-apwaaxltma-uc.a.run.app\n```\nThe output includes the service URL and a unique URL for the revision. Your values will differ slightly from what's indicated here.\n### Validate the deployment\n- After the deployment is complete, view the newly deployed service on the [Revisions page](https://console.cloud.google.com/run/detail/us-central1/hello-cloudrun/revisions) in the Cloud Console.\n- In Cloud Shell, view the authenticated service response:```\nPROD_URL=$(gcloud run services describe hello-cloudrun --platform managed --region us-central1 --format=json | jq --raw-output \".status.url\")echo $PROD_URLcurl -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" $PROD_URL\n```\n## Enabling Branch DeploymentsIn this section, you enable a unique URL for development branches in Git.\n### Setup Branch TriggerEach branch is represented by a URL identified by the branch name. Commits to the branch trigger a deployment, and the updates are accessible at that same URL.- In Cloud Shell, set up the trigger:```\ngcloud alpha builds triggers create github \\--name=branchtrigger \\--repository=$REPO_NAME \\--branch-pattern='[^(?!.*main)].*' \\--build-config=labs/cloudrun-progression/branch-cloudbuild.yaml \\--region=us-central1\n```\n- To review the trigger, go to the [Cloud Build Triggers page](https://console.cloud.google.com/cloud-build/triggers;region=us-central1) in the Cloud Console.\n### Create changes on a branch\n- In Cloud Shell, create a new branch:```\ngit checkout -b new-feature-1\n```\n- Open the sample application using your favorite editor or using the Cloud Shell IDE:```\nedit app.py\n```\n- In the sample application, modify line 24 to indicate v1.1 instead of v1.0:```\n@app.route('/')def hello_world():\u00a0 \u00a0 return 'Hello World v1.1'\n```\n- To return to your terminal, click Open Terminal.\n### Execute the branch trigger\n- In Cloud Shell, commit the change and push to the remote repository:```\ngit add . && git commit -m \"updated\" && git push origin new-feature-1\n``` **Note:** Use the personal access token you created earlier for the password if you have 2FA enabled on GitHub.\n- To review the build in progress, go to the [Cloud Build Build history screen](https://console.cloud.google.com/cloud-build/builds) .\n- To review the new revision, after the build completes go to the [Cloud Run Revisions page](https://console.cloud.google.com/run/detail/us-central1/hello-cloudrun/revisions) in the Cloud Console:\n- In Cloud Shell, get the unique URL for this branch:```\nBRANCH_URL=$(gcloud run services describe hello-cloudrun --platform managed --region us-central1 --format=json | jq --raw-output \".status.traffic[] | select (.tag==\\\"new-feature-1\\\")|.url\")echo $BRANCH_URL\n```\n- Access the authenticated URL:```\ncurl -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" $BRANCH_URL\n```The updated response output looks like the following:```\nHello World v1.1\n```\n## Automate canary testingWhen code is released to production, it's common to release code to a small subset of live traffic before migrating all traffic to the new code base.\nIn this section, you implement a trigger that is activated when code is committed to the main branch. The trigger deploys the code to a unique canary URL and it routes 10% of all live traffic to the new revision.- In Cloud Shell, set up the branch trigger:```\ngcloud alpha builds triggers create github \\\u00a0 --name=maintrigger \\\u00a0 --repository=$REPO_NAME \\\u00a0 --branch-pattern=main \\\u00a0 --build-config=labs/cloudrun-progression/main-cloudbuild.yaml \\\u00a0 --region=us-central1\n```\n- To review the new trigger, go to the [Cloud Build Triggers page](https://console.cloud.google.com/cloud-build/triggers) in the Cloud Console.\n- In Cloud Shell, merge the branch to the main line and push to the remote repository:```\ngit checkout maingit merge new-feature-1git push origin main\n```\n- To review the build in progress, go to the [Cloud Build Builds page](https://console.cloud.google.com/cloud-build/builds) .\n- After the build is complete, to review the new revision, go to the [Cloud Run Revisions page](https://console.cloud.google.com/run/detail/us-central1/hello-cloudrun/revisions) in the Cloud Console. Note that 90% of the traffic is routed to prod, 10% to canary, and 0% to the branch revisions.\nReview the key lines of `main-cloudbuild.yaml` that implement the logic for the canary deploy.\nLines 39-45 deploy the new revision and use the tag flag to route traffic from the unique canary URL:\n```\ngcloud run deploy ${_SERVICE_NAME} \\--platform managed \\--region ${_REGION} \\--image gcr.io/${PROJECT_ID}/${_SERVICE_NAME} \\--tag=canary \\--no-traffic\n```\nLine 61 adds a static tag to the revision that notes the Git short SHA of the deployment:\n```\ngcloud beta run services update-traffic ${_SERVICE_NAME} --update-tags=sha-$SHORT_SHA=$${CANARY} --platform managed --region ${_REGION}\n```\nLine 62 updates the traffic to route 90% to production and 10% to canary:\n```\ngcloud run services update-traffic ${_SERVICE_NAME} --to-revisions=$${PROD}=90,$${CANARY}=10 --platform managed --region ${_REGION}\n```- In Cloud Shell, get the unique URL for the canary revision:```\nCANARY_URL=$(gcloud run services describe hello-cloudrun --platform managed --region us-central1 --format=json | jq --raw-output \".status.traffic[] | select (.tag==\\\"canary\\\")|.url\")echo $CANARY_URL\n```\n- Review the canary endpoint directly:```\ncurl -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" $CANARY_URL\n```\n- To see percentage-based responses, make a series of requests:```\nLIVE_URL=$(gcloud run services describe hello-cloudrun --platform managed --region us-central1 --format=json | jq --raw-output \".status.url\")for i in {0..20};do\u00a0 curl -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" $LIVE_URL; echo \\ndone\n```\n## Releasing to ProductionAfter the canary deployment is validated with a small subset of traffic, you release the deployment to the remainder of the live traffic.\nIn this section, you set up a trigger that is activated when you create a tag in the repository. The trigger migrates 100% of traffic to the already deployed revision based on the commit SHA of the tag. Using the commit sha ensures the revision validated with canary traffic is the revision utilized for the remainder of production traffic.- In Cloud Shell, set up the tag trigger:```\ngcloud alpha builds triggers create github \\\u00a0 --name=tagtrigger \\\u00a0 --repository=$REPO_NAME \\\u00a0 --tag-pattern=. \\\u00a0 --build-config=labs/cloudrun-progression/tag-cloudbuild.yaml \\\u00a0 --region=us-central1\n```\n- To review the new trigger, go to the [Cloud Build Triggers page](https://console.cloud.google.com/cloud-build/triggers) in the Cloud Console.\n- In Cloud Shell, create a new tag and push to the remote repository:```\ngit tag 1.1git push origin 1.1\n```\n- To review the build in progress, go to the [Cloud Build Build history screen](https://console.cloud.google.com/cloud-build/builds) in the Cloud Console.\n- After the build is complete, to review the new revision, go to the [Cloud Run Revisions page](https://console.cloud.google.com/run/detail/us-central1/hello-cloudrun/revisions) in the Cloud Console. Note that the revision is updated to indicate the prod tag and it is serving 100% of live traffic.\n- In Cloud Shell, to see percentage-based responses, make a series of requests:```\nLIVE_URL=$(gCloud Run services describe hello-cloudrun --platform managed --region us-central1 --format=json | jq --raw-output \".status.url\")for i in {0..20};do\u00a0 curl -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" $LIVE_URL; echo \\ndone\n```\n- Review the key lines of `tag-cloudbuild.yaml` that implement the production deployment logic.Line 37 updates the canary revision adding the prod tag. The deployed revision is now tagged for both prod and canary:```\ngcloud beta run services update-traffic ${_SERVICE_NAME} --update-tags=prod=$${CANARY} --platform managed --region ${_REGION}\n```Line 39 updates the traffic for the base service URL to route 100% of traffic to the revision tagged as prod:```\ngcloud run services update-traffic ${_SERVICE_NAME} --to-revisions=$${NEW_PROD}=100 --platform managed --region ${_REGION}\n```\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n## What's next\n- Review [Managing revisions with Cloud Run](/run/docs/managing/revisions) .\n- Review Cloud Run [Rollbacks, gradual rollouts, and traffic migration](/run/docs/rollouts-rollbacks-traffic-migration) .\n- Review [Using tags for accessing revisions](/run/docs/rollouts-rollbacks-traffic-migration#tags) .\n- Review [Creating and managing build triggers](/build/docs/automating-builds/create-manage-triggers) in Cloud Build.\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .", "guide": "Docs"}