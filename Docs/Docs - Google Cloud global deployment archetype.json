{"title": "Docs - Google Cloud global deployment archetype", "url": "https://cloud.google.com/architecture/deployment-archetypes/global", "abstract": "# Docs - Google Cloud global deployment archetype\nLast reviewed 2023-11-03 UTC\nThis section of the [Google Cloud deployment archetypes](/architecture/deployment-archetypes) guide describes the global deployment archetype.\nIn an architecture that's based on the global deployment archetype, the application runs in multiple Google Cloud regions across the globe. You can deploy the application either as a distributed location-unaware stack or as multiple regionally isolated stacks. In either case, a global [anycast](https://wikipedia.org/wiki/Anycast) load balancer distributes traffic to the appropriate region. The application writes data to, and reads from, a synchronously replicated database that's available in all the regions, like [Spanner with multi-region configuration](/spanner/docs/instance-configurations#multi-region-configurations) . Other components of the application stack can also be global, such as the cache and object store.\nThe following diagram shows the distributed location-unaware variant of the global deployment archetype:\nThe preceding diagram shows a location-unaware application stack, with frontend and backend instances (typically microservices) that are distributed across multiple zones in three Google Cloud regions. A global anycast load balancer distributes incoming traffic to an appropriate frontend instance. This distribution is based on the availability and capacity of the instances and their geographical proximity to the source of the traffic. A cross-region internal load balancer distributes traffic from the frontend instances to appropriate backend instances based on their availability and capacity. The application uses a database that is synchronously replicated and available across regions.\nThe following diagram shows a variant of the global deployment archetype with regionally isolated application stacks:\nThe preceding diagram shows regionally isolated application stacks that run in multiple zones in two Google Cloud regions. This topology is similar to the [multi-regional deployment archetype](/architecture/deployment-archetypes/multiregional) , but it uses a global anycast load balancer instead of DNS routing. The global load balancer distributes incoming traffic to a frontend in the region that's nearest to the user. Both the application stacks write data to, and read from, a database that is synchronously replicated and available across both the regions. If an outage occurs in any one of the two regions, the global load balancer sends user requests to a frontend in the other region.\n", "content": "## Use cases\nThe following sections provide examples of use cases for which the global deployment archetype is an appropriate choice.\n### Highly available application for a global audience\nWe recommend the global deployment archetype for applications that serve users across the world and, therefore, need high availability and robustness against outages in multiple regions.\n### Opportunity to optimize cost and simplify operations\nWith the global deployment archetype, you can use highly available global resources like a global load balancer and a global database. Compared to a multi-regional deployment, a global deployment can help lower costs and simplify operations because you provision and manage fewer resources.\n## Design considerations\nWhen you build an architecture that's based on the global deployment archetype, consider the following design factors.\n### Storage, replication, and networking costs\nIn a globally distributed architecture, the volume of cross-location network traffic can be high compared to a regional deployment. You might also store and replicate more data. When you build an architecture that's based on the global deployment archetype, consider the potentially higher cost for data storage and networking. For business-critical applications, the availability advantage of a globally distributed architecture might outweigh the higher networking and storage costs.\n### Managing changes to global resources\nThe opportunity to use highly available global resources can help you to optimize cost and simplify operations. However, to ensure that the global resources don't become single points of failure (SPOF), you must carefully [manage configuration changes to global resources](/architecture/infra-reliability-guide/building-blocks#careful_management_of_changes_to_global_resources) .\n## Example architecture\nFor an example architecture that's based on the global deployment archetype with multiple regionally isolated stacks, see [Multi-region deployment with global load balancing](/architecture/infra-reliability-guide/design#multi-region-deployment-with-global-load-balancing) in \"Design reliable infrastructure for your workloads in Google Cloud.\"", "guide": "Docs"}