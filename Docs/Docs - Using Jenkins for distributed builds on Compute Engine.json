{"title": "Docs - Using Jenkins for distributed builds on Compute Engine", "url": "https://cloud.google.com/architecture/using-jenkins-for-distributed-builds-on-compute-engine", "abstract": "# Docs - Using Jenkins for distributed builds on Compute Engine\nThis tutorial shows you how to:- Create a Jenkins continuous integration system to run your builds using on-demand Jenkins agents in Compute Engine.\n- Store your build artifacts in Cloud Storage.\n- Apply a lifecycle policy to move older build artifacts in Cloud Storage to less expensive storage options.\n", "content": "## ArchitectureThe following diagram outlines the tutorial architecture.In the diagram, a service account is added to Jenkins for it to be able to create agent instances and push artifacts to Cloud Storage for long-term storage. Jenkins provisions the instances on the fly as it runs builds. As the build artifacts get older, they move through various storage classes to limit their retention cost.## Objectives\n- Create a base image with [Packer](https://www.packer.io/docs) for running your Jenkins builds.\n- Provision Jenkins using [Cloud Marketplace](/marketplace/docs) .\n- Configure Jenkins to deploy ephemeral build agents.\n- Upload build artifacts to Cloud Storage.\n- Configure lifecycle policies to optimize your Cloud Storage costs.\n## CostsIn this document, you use the following billable components of Google Cloud:- Compute Engine\n- Cloud Storage\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nUse the [Pricing Calculator](/products/calculator) to generate a cost estimate based on your projected usage.## Before you begin\n## Setting up your environmentIn this section, you configure the infrastructure and identities required to complete the tutorial. You execute the rest of the tutorial from inside Cloud Shell.\n [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n### Configure IAMCreate an Identity and Access Management (IAM) service account to delegate permissions to Jenkins. This account enables Jenkins to store data in Cloud Storage and launch instances in Compute Engine. Jenkins runs your builds in ephemeral instances and stores build artifacts in Cloud Storage.\n- Create the service account itself:```\ngcloud iam service-accounts create jenkins --display-name jenkins\n```\n- Store the service account email address and your current Google Cloud project ID in environment variables for use in later commands:```\nexport SA_EMAIL=$(gcloud iam service-accounts list \\\n --filter=\"displayName:jenkins\" --format='value(email)')\nexport PROJECT=$(gcloud info --format='value(config.project)')\n```\n- Bind the following roles to your service account:```\ngcloud projects add-iam-policy-binding $PROJECT \\\n --role roles/storage.admin --member serviceAccount:$SA_EMAIL\ngcloud projects add-iam-policy-binding $PROJECT --role roles/compute.instanceAdmin.v1 \\\n --member serviceAccount:$SA_EMAIL\ngcloud projects add-iam-policy-binding $PROJECT --role roles/compute.networkAdmin \\\n --member serviceAccount:$SA_EMAIL\ngcloud projects add-iam-policy-binding $PROJECT --role roles/compute.securityAdmin \\\n --member serviceAccount:$SA_EMAIL\ngcloud projects add-iam-policy-binding $PROJECT --role roles/iam.serviceAccountActor \\\n --member serviceAccount:$SA_EMAIL\n```\nNow that you've granted the service account the appropriate permissions, you need to create and download its key. Keep the key in a safe place. You'll use it later step when you configure the JClouds plugin to authenticate with the Compute Engine API.- Create the key file:```\ngcloud iam service-accounts keys create jenkins-sa.json --iam-account $SA_EMAIL\n```\n- In Cloud Shell, click **More** , and then click **Download file** .\n- Type `jenkins-sa.json` .\n- Click **Download** to save the file locally.\n### Create a Jenkins agent imageNext, you create a reusable Compute Engine image that contains the software and tools needed to run as a Jenkins executor.Later in this tutorial, you use [Packer](https://www.packer.io/intro#what-is-packer) to build your images, which requires the `ssh` command to communicate with your build instances. To enable SSH access, create and upload an SSH key in Cloud Shell:- Create a SSH key pair. If one already exists, this command uses that key pair; otherwise, it creates a new one:```\nls ~/.ssh/id_rsa.pub || ssh-keygen -N \"\"\n```\n- Add the Cloud Shell public SSH key to your project's [metadata](/compute/docs/connect/add-ssh-keys#add_ssh_keys_to_project_metadata) :```\ngcloud compute project-info describe \\\n --format=json | jq -r '.commonInstanceMetadata.items[] | select(.key == \"ssh-keys\") | .value' > sshKeys.pub\necho \"$USER:$(cat ~/.ssh/id_rsa.pub)\" >> sshKeys.pub\ngcloud compute project-info add-metadata --metadata-from-file ssh-keys=sshKeys.pub\n```\nThe next step is to use [Packer](http://packer.io) to create a baseline virtual machine (VM) image for your build agents, which act as ephemeral build executors in Jenkins. The most basic Jenkins agent only requires Java to be installed. You can customize your image by adding shell commands in the `provisioners` section of the Packer configuration or by adding other [Packer provisioners](https://www.packer.io/docs/provisioners) .- In Cloud Shell, download and unpack the most recent release of Packer. The following example uses Packer 1.7.10. You can [check the Hashicorp website](https://www.packer.io/downloads) to see if there's a more recent version:```\nwget https://releases.hashicorp.com/packer/1.7.10/packer_1.7.10_linux_amd64.zip\nunzip packer_1.7.10_linux_amd64.zip\n```\n- Create the configuration file for your Packer image builds:```\nexport PROJECT=$(gcloud info --format='value(config.project)')\ncat > jenkins-agent.json <<EOF\n{\n \"builders\": [ {\n  \"type\": \"googlecompute\",\n  \"project_id\": \"$PROJECT\",\n  \"source_image_family\": \"ubuntu-2004-lts\",\n  \"source_image_project_id\": \"ubuntu-os-cloud\",\n  \"zone\": \"us-central1-a\",\n  \"disk_size\": \"50\",\n  \"image_name\": \"jenkins-agent-{{timestamp}}\",\n  \"image_family\": \"jenkins-agent\",\n  \"ssh_username\": \"ubuntu\"\n }\n ],\n \"provisioners\": [ {\n  \"type\": \"shell\",\n  \"inline\": [\"sudo apt-get update && sudo apt-get install -y default-jdk\"]\n }\n ]\n}\nEOF\n```\n- Build the image by running Packer:```\n./packer build jenkins-agent.json\n```When the build completes, the name of the disk image is displayed with the format `jenkins-agent-[TIMESTAMP]` , where `[TIMESTAMP]` is the epoch time when the build started.```\n==> Builds finished. The artifacts of successful builds are:\n--> googlecompute: A disk image was created: jenkins-agent-1612997575\n```\n## Installing JenkinsIn this section, you use [Cloud Marketplace](/marketplace) to provision a Jenkins instance. You customize this instance to use the agent image you created in the previous section.- Go to the [Cloud Marketplace solution for Jenkins](https://console.cloud.google.com/marketplace/details/bitnami-launchpad/jenkins?q=jenkins) .\n- Click **Launch** .\n- Change the **Machine Type** field to **4 vCPUs 15 GB Memory, n1-standard-4** . \n- Click **Deploy** and wait for your Jenkins instance to finish being provisioned. When it is finished, you will see: \n- Open your Jenkins instance in the browser by clicking the **Site Address** link.\n- Log in to Jenkins using the **Admin user** and **Admin password** displayed in the details pane. \nYour Jenkins instance is now ready to use.## Configuring Jenkins pluginsJenkins requires plugins to create on-demand agents in Compute Engine and to store artifacts in Cloud Storage. You need to install and configure these plugins.\n### Install plugins\n- In the Jenkins UI, select **Manage Jenkins** .\n- Click **Manage Plugins** .\n- Click the **Available** tab.\n- Use the **Filter** bar to find the following plugins and select the boxes next to them:- Compute Engine plugin\n- Cloud Storage plugin\nThe following image shows the Cloud Storage plugin selected: \n- Click **Download now and install after restart** .\n- Click the **Restart Jenkins when installation is complete and no jobs arerunning** checkbox. Jenkins restarts and completes the plugin installations.\n### Create plugin credentialsYou need to create `Google Credentials` for your new plugins:- Log in to Jenkins again, and click **Manage Jenkins** .\n- Click **Credentials** .\n- Click **Jenkins** under **Store** .\n- In the main pane of the UI, click **Global credentials (unrestricted)** .\n- Create the Google credentials:- Click **Add Credentials** .\n- Set **Kind** to **Google Service Account from private key** .\n- In the **Project Name** field, enter your Google Cloud project ID.\n- Click **Choose file** .\n- Select the`jenkins-sa.json`file that you previously downloaded from Cloud Shell.\n- Click **OK** . \n- Click **Jenkins** .\n### Configure the Compute Engine pluginConfigure the Compute Engine plugin with the credentials it uses to provision your agent instances.- Click **Manage Jenkins** .\n- Click **Manage Nodes and Clouds** .\n- Click **Configure Clouds** .\n- Click **Add a new Cloud** .\n- Click **Compute Engine** .\n- Set the following settings and replace `[YOUR_PROJECT_ID]` with your Google Cloud project ID:- **Name** :`gce`\n- **Project ID** :`[YOUR_PROJECT_ID]`\n- **Instance Cap** :`8`\n- Choose the service account from the **Service Account Credentials** drop-down list. It is listed as your Google Cloud project ID.\n### Configure Jenkins instance configurationsNow that the Compute Engine plugin is configured, you can configure Jenkins instance configurations for the various build configurations you'd like.- On the **Configure Clouds** page, click **Add** for **Instance Configurations** .\n- Enter the following **General** settings:- **Name** :`ubuntu-2004`\n- **Description** :`Ubuntu agent`\n- **Labels** :`ubuntu-2004`\n- Enter the following for **Location** settings:- **Region<** :`us-central1`\n- **Zone** :`us-central1-f`\n- Click **Advanced** .\n- For **Machine Configuration** , choose the **Machine Type** of **n1-standard-1** .\n- Under **Networking** , choose the following settings:- **Network** : Leave at default setting.\n- **Subnetwork** : Leave at default setting.\n- Select **Attach External IP?** .\n- Select the following for **Boot Disk** settings:- For **Image project** , choose your Google Cloud project.\n- For **Image name** , select the image you built earlier using Packer.\n- Click **Save** to persist your configuration changes. \n## Creating a Jenkins job to test the configurationJenkins is configured to automatically launch an instance when a job is triggered that requires an agent with the `ubuntu-2004` label. Create a job that tests whether the configuration is working as expected.- Click **Create new job** in the Jenkins interface.\n- Enter`test`as the item name.\n- Click **Freestyle project** , and then click **OK** .\n- Select the **Execute concurrent builds if necessary** and **Restrict\nwhere this project can run** boxes.\n- In the **Label Expression** field, enter`ubuntu-2004`.\n- In the **Build** section, click **Add build step** .\n- Click **Execute Shell** .\n- In the command box, enter a test string:```\necho \"Hello world!\"\n``` \n- Click **Save** .\n- Click **Build Now** to start a build. \n## Uploading build artifacts to Cloud StorageYou might want to store build artifacts for future analysis or testing. Configure your Jenkins job to generate an artifact and upload it to Cloud Storage. The build log is uploaded to the same bucket.- In Cloud Shell, create a storage bucket for your artifacts:```\nexport PROJECT=$(gcloud info --format='value(config.project)')\ngsutil mb gs://$PROJECT-jenkins-artifacts\n```\n- In the job list in the Jenkins UI, click **test** .\n- Click **Configure** .\n- Under **Build** , set the **Command** text field to:```\nenv > build_environment.txt\n```\n- Under **Post-build Actions** , click **Add post-build action** .\n- Click **Cloud Storage Plugin** .\n- In the **Storage Location** field, enter your artifact path, substituting your Google Cloud project ID for `[YOUR_PROJECT_ID]` :```\ngs://[YOUR_PROJECT_ID]-jenkins-artifacts/$JOB_NAME/$BUILD_NUMBER\n```\n- Click **Add Operation** .\n- Click **Classic Upload** .\n- In the **File Pattern** field, enter `build_environment.txt` .\n- In the **Storage Location** field, enter your storage path, substituting your Google Cloud project ID for `[YOUR_PROJECT_ID]` :```\ngs://[YOUR_PROJECT_ID]-jenkins-artifacts/$JOB_NAME/$BUILD_NUMBER\n``` \n- Click **Save** .\n- Click **Build Now** to start a new build. The build runs on the Compute Engine instance that you provisioned previously. When the build completes, it uploads the artifact file, `build_environment.txt` , to the configured Cloud Storage bucket.\n- In Cloud Shell, view the build artifact using `gsutil` :```\nexport PROJECT=$(gcloud info --format='value(config.project)')\ngsutil cat gs://$PROJECT-jenkins-artifacts/test/2/build_environment.txt\n```\n## Configuring object lifecycle managementYou're more likely to access recent build artifacts. To save costs on infrequently accessed objects, use [object lifecycle management](/storage/docs/lifecycle) to move your artifacts from higher-performance [storage classes](/storage/docs/storage-classes) to lower-cost and higher-latency storage classes.- In Cloud Shell, create the [lifecycle configuration](/storage/docs/lifecycle#configuration) file to transition all objects to [Nearline](/storage/docs/storage-classes#nearline) storage after 30 days and Nearline objects to [Coldline](/storage/docs/storage-classes#coldline) storage after 365 days.```\ncat > artifact-lifecycle.json <<EOF\n{\n\"lifecycle\": {\n \"rule\": [ {\n \"action\": {\n  \"type\": \"SetStorageClass\",\n  \"storageClass\": \"NEARLINE\"\n },\n \"condition\": {\n  \"age\": 30,\n  \"matchesStorageClass\": [\"MULTI_REGIONAL\", \"STANDARD\", \"DURABLE_REDUCED_AVAILABILITY\"]\n }\n },\n {\n \"action\": {\n  \"type\": \"SetStorageClass\",\n  \"storageClass\": \"COLDLINE\"\n },\n \"condition\": {\n  \"age\": 365,\n  \"matchesStorageClass\": [\"NEARLINE\"]\n }\n }\n]\n}\n}\nEOF\n```\n- Upload the configuration file to your artifact storage bucket:```\nexport PROJECT=$(gcloud info --format='value(config.project)')\ngsutil lifecycle set artifact-lifecycle.json gs://$PROJECT-jenkins-artifacts\n```\n## Clean up\n- Delete any Jenkins agents that are still running:```\ngcloud compute instances list --filter=metadata.jclouds-group=ubuntu-2004 --uri | xargs gcloud compute instances delete\n```\n- Using Cloud Deployment Manager, delete the Jenkins instance:```\ngcloud deployment-manager deployments delete jenkins-1\n```\n- Delete the Cloud Storage bucket:```\nexport PROJECT=$(gcloud info --format='value(config.project)')\ngsutil -m rm -r gs://$PROJECT-jenkins-artifacts\n```\n- Delete the service account:```\nexport SA_EMAIL=$(gcloud iam service-accounts list --filter=\"displayName:jenkins\" --format='value(email)')\ngcloud iam service-accounts delete $SA_EMAIL\n```\n## What's next\n- [Learn about continuous deployment with Jenkins](/solutions/continuous-delivery-jenkins-kubernetes-engine) \n- [Deploy Jenkins to Kubernetes Engine](/solutions/jenkins-on-kubernetes-engine-tutorial) \n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Docs"}