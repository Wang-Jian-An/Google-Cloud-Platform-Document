{"title": "Docs - Customizing Cloud Logging logs for Google Kubernetes Engine with Fluentd", "url": "https://cloud.google.com/architecture/customizing-stackdriver-logs-fluentd", "abstract": "# Docs - Customizing Cloud Logging logs for Google Kubernetes Engine with Fluentd\nLast reviewed 2022-10-03 UTC\nThis tutorial describes how to customize [Fluentd](https://www.fluentd.org/) logging for a [Google Kubernetes Engine](/kubernetes-engine) cluster. You'll learn how to host your own configurable Fluentd daemonset to send logs to Cloud Logging, instead of selecting the cloud logging option when creating the Google Kubernetes Engine (GKE) cluster, which does not allow configuration of the Fluentd daemon.\n **Note:** This tutorial is for the Fluentd-based Legacy Logging agent. For customizing the Fluent Bit-based Ops Agent on virtual machines, see [Configure the Ops Agent](/logging/docs/agent/ops-agent/configuration) . For customizing Fluent Bit on GKE, see [customizing fluentbit](/community/tutorials/kubernetes-engine-customize-fluentbit) .", "content": "## Objectives\n- Deploy your own Fluentd daemonset on a Google Kubernetes Engine cluster, configured to log data to [Cloud Logging](/logging) . We assume that you are already familiar with [Kubernetes](https://kubernetes.io/docs/home/) .\n- Customize GKE logging to remove sensitive data from the Cloud Logging logs.\n- Customize GKE logging to add node-level events to the Cloud Logging logs.\n## CostsThis tutorial uses billable components of Google Cloud, including:- A three-node [Google Kubernetes Engine](/kubernetes-engine) cluster.\nThe [Pricing Calculator](/products/calculator#id=38ec76f1-971f-41b5-8aec-a04e732129cc) estimates the cost of this environment at around $1.14 for 8 hours.## Before you begin\n## Initializing common variablesYou must define several variables that control where elements of the infrastructure are deployed.- Using a text editor, edit the following script, substituting your project ID for `[YOUR_PROJECT_ID]` . The script sets the region to `us-east-1` . If you make any changes to the script, make sure that the zone values reference the region you specify.```\nexport region=us-east1\nexport zone=${region}-b\nexport project_id=[YOUR_PROJECT_ID]\n```\n- Go to Cloud Shell. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Copy the script into your Cloud Shell window and run it.\n- Run the following commands to set the default zone and project ID so you don't have to specify these values in every subsequent command:```\ngcloud config set compute/zone ${zone}\ngcloud config set project ${project_id}\n```\n## Creating the GKE cluster\n- In Cloud Shell, clone the sample repository:```\ngit clone https://github.com/GoogleCloudPlatform/kubernetes-engine-customize-fluentd\n```The sample repository includes the Kubernetes manifests for the Fluentd daemonset and a test logging program that you deploy later in this tutorial.\n- Change your working directory to the cloned repository:```\ncd kubernetes-engine-customize-fluentd\n```\n- Create the GKE cluster with system logging and monitoring only:```\ngcloud container clusters create gke-with-custom-fluentd \\\n --zone us-east1-b \\\n --logging=SYSTEM \\\n --tags=gke-cluster-with-customized-fluentd \\\n --scopes=logging-write,storage-rw\n```\n## Deploying the test logger applicationBy default, the sample application that you deploy continuously emits random logging statements. The Docker container is built from the source code in the `test-logger` subdirectory.- In Cloud Shell, build the `test-logger` container image:```\ndocker build -t test-logger test-logger\n```\n- Tag the container before pushing to the registry:```\ndocker tag test-logger gcr.io/${project_id}/test-logger\n```\n- Push the container image:```\ndocker push gcr.io/${project_id}/test-logger\n```\n- Update the deployment file:```\nenvsubst < kubernetes/test-logger.yaml > kubernetes/test-logger-deploy.yaml\n```\n- Deploy the `test-logger` application to the GKE cluster:```\nkubectl apply -f kubernetes/test-logger-deploy.yaml\n```\n- View the status of the `test-logger` Pods:```\nkubectl get pods\n```\n- Repeat this command until the output looks like the following, with all three `test-logger` Pods running: \n## Deploying the Fluentd daemonset to your clusterNext you configure and deploy your Fluentd daemonset.\n **Note:** Because you have turned on system-only logging, a GKE-managed Fluentd daemonset has been deployed that is responsible for system logging. The Kubernetes manifests for Fluentd that you deploy in this procedure are modified versions of the ones available from the [Fluentd Daemonset for Kubernetes repository on GitHub](https://github.com/fluent/fluentd-kubernetes-daemonset) .- In Cloud Shell, deploy the Fluentd configuration:```\nkubectl apply -f kubernetes/fluentd-configmap.yaml\n```\n- Deploy the Fluentd daemonset:```\nkubectl apply -f kubernetes/fluentd-daemonset.yaml\n```\n- Check that the Fluentd Pods have started:```\nkubectl get pods --namespace=kube-system\n```If they're running, you see output like the following: \n- Verify that you're seeing logs in Logging. In the console, on the left-hand side, select **Logging** > **Logs Explorer** and then select **Kubernetes Container** as a resource type in the **Resource** list.\n- Click **Run Query** .\n- In the **Logs field explorer** , select **test-logger** for **CONTAINER_NAME** : \n## Filtering information from the logfileThe next step is to specify that Fluentd should filter certain data so that it is not logged. For this tutorial, you filter out the Social Security numbers, credit card numbers, and email addresses. To make this update, you change the daemonset to use a different ConfigMap that contains these filters. You use Kubernetes rolling updates feature and preserve the old version of the ConfigMap.- Open the `kubernetes/fluentd-configmap.yaml` file in an editor.\n- Uncomment the lines between and not including the lines `\n### sample log scrubbing filters` and `\n### end sample log scrubbing filters` : [  kubernetes/fluentd-configmap.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-customize-fluentd/blob/HEAD/kubernetes/fluentd-configmap.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-customize-fluentd/blob/HEAD/kubernetes/fluentd-configmap.yaml) ```\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n### \u00a0\n### sample log scrubbing filters# \u00a0#replace social security numbers# <filter reform.**># \u00a0 @type record_transformer# \u00a0 enable_ruby true# \u00a0 <record># \u00a0 \u00a0 log ${record[\"log\"].gsub(/[0-9]{3}-*[0-9]{2}-*[0-9]{4}/,\"xxx-xx-xxxx\")}# \u00a0 </record># </filter># # replace credit card numbers that appear in the logs# <filter reform.**># \u00a0 @type record_transformer# \u00a0 enable_ruby true# \u00a0 <record># \u00a0 \u00a0 \u00a0log ${record[\"log\"].gsub(/[0-9]{4} *[0-9]{4} *[0-9]{4} *[0-9]{4}/,\"xxxx xxxx xxxx xxxx\")}# \u00a0 </record># </filter># # replace email addresses that appear in the logs# <filter reform.**># \u00a0 @type record_transformer# \u00a0 enable_ruby true# \u00a0 <record># \u00a0 \u00a0 log ${record[\"log\"].gsub(/[\\w+\\-]+@[a-z\\d\\-]+(\\.[a-z\\d\\-]+)*\\.[a-z]+/i,\"user@email.tld\")}# \u00a0 </record># </filter># \n### end sample log scrubbing filters\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n###\n```\n- Change the name of the ConfigMap from `fluentd-gcp-config` to `fluentd-gcp-config-filtered` by editing the `metadata.name` field: [  kubernetes/fluentd-configmap.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-customize-fluentd/blob/HEAD/kubernetes/fluentd-configmap.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-customize-fluentd/blob/HEAD/kubernetes/fluentd-configmap.yaml) ```\nname: fluentd-gcp-confignamespace: kube-systemlabels:\u00a0 k8s-app: fluentd-gcp-custom\n```\n- Save and close the file.\n## Updating the Fluentd daemonset to use the new configurationNow you change `kubernetes/fluentd-daemonset.yaml` to mount the ConfigMap `fluentd-gcp-config-filtered` instead of `fluentd-gcp-config` .- Open the `kubernetes/fluentd-daemonset.yaml` file in an editor.\n- Change the name of the ConfigMap from `fluentd-gcp-config` to `fluentd-gcp-config-filtered` by editing the `configMap.name` field: [  kubernetes/fluentd-daemonset.yaml ](https://github.com/GoogleCloudPlatform/kubernetes-engine-customize-fluentd/blob/HEAD/kubernetes/fluentd-daemonset.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/kubernetes-engine-customize-fluentd/blob/HEAD/kubernetes/fluentd-daemonset.yaml) ```\n- configMap:\u00a0 \u00a0 defaultMode: 420\u00a0 \u00a0 name: fluentd-gcp-config\u00a0 name: config-volume\n```\n- Deploy the new version of the ConfigMap to your cluster:```\nkubectl apply -f kubernetes/fluentd-configmap.yaml\n```\n- Roll out the new version of the daemonset:```\nkubectl apply -f kubernetes/fluentd-daemonset.yaml\n```\n- Roll out the update and wait for it to complete:```\nkubectl rollout status ds/fluentd-gcp --namespace=kube-system\n``` \n- When the rollout is complete, refresh the Logging logs and make sure that the Social Security number, credit card number, and email address data has been filtered out. \n## Logging node-level eventsIf you want events that happen on your GKE nodes to show up in Logging as well, add the following lines to your ConfigMap and follow the instructions described in the last section:\n```\n<source>\n @type systemd\n filters [{ \"SYSLOG_IDENTIFIER\": \"sshd\" }]\n pos_file /var/log/journal/gcp-journald-ssh.pos\n read_from_head true\n tag sshd\n</source>\n<source>\n @type systemd\n filters [{ \"SYSLOG_IDENTIFIER\": \"sudo\" }]\n pos_file /var/log/journal/gcp-journald-sudo.pos\n read_from_head true\n tag sudo\n</source>\n```\n **Note:** During a cluster upgrade, it is normal for the CPU usage on Fluentd to spike when there is an increased amount of logs on a node. Fluentd tries to process all logs as quickly as it can to send them to its target (Cloud Logging API). Any large spike in the generated logs can cause the CPU usage to increase up to the Pod's limit. We set this limit to make sure it doesn't consume the entire node's available resources.## Clean upAfter you've finished the tutorial, you can clean up the resources you created on Google Cloud so you won't be billed for them in the future.\n### Deleting the project\nThe easiest way to eliminate billing is to delete the project that you created for the tutorial.\nTo delete the project:\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.### Deleting the GKE clusterIf you don't want to delete the whole project, run the following command to delete the GKE cluster:\n```\ngcloud container clusters delete gke-with-custom-fluentd --zone us-east1-b\n```## What's next\n- Review [Fluentd](https://docs.fluentd.org/v1.0/articles/quickstart) documentation in more detail.\n- Review [Google Kubernetes Engine](/kubernetes-engine) documentation in more detail.\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Docs"}