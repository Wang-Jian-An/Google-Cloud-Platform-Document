{"title": "Docs - Architecture: Serverless content render", "url": "https://cloud.google.com/architecture/content-render-architecture", "abstract": "# Docs - Architecture: Serverless content render\nLast reviewed 2022-04-05 UTC\nThe following diagram describes a reference architecture for preparing and formatting content based on external data sources for high-volume serving of final content to web browsers and mobile applications.\nThe flow of events in the architecture is as follows:- Content variations are scheduled as tasks in Cloud Tasks.\n- Data is read from an external source, formatted, and stored in intermediate storage.\n- Client-specific render variations are queued as tasks.\n- Content is rendered and the rendered content forms are stored in Cloud Storage.\n- Cloud CDN serves content.", "content": "## Advantages\nThis section discusses the components and advantages that make up this architecture in more detail.### Schedule variationsAs shown in the following image, content forms can be based on several variations or queries of the external data source.These variations might be by user type, or geographic location. Cloud Scheduler is used to begin a new time-based set of these variations to capture new data from the external data source as it is updated. Content variations are then scheduled as tasks within Cloud Tasks.\n### Capture content and schedule renderContent capture involves consuming each of the content variation tasks in Cloud Run and making fetch calls to the external data sources, as shown in the following image.This raw or lightly processed data is stored in some form of intermediate storage, in this case a document database in the form of Datastore. This intermediate storage allows multiple rendering variations to consume data in the architecture, reducing redundant calls to the external data source.\nThis processing of each data-fetch task results in multiple rendered variations for each content type. These render variations are scheduled as a further set of tasks within Cloud Tasks for the next stage.\n## Use casesThis architecture is recommended for content-centric serving scenarios in media and gaming industries. These scenarios often involve serving high volumes of pre-structured content that has been optimized for specific client-side views. This use case might include interactive media, games, or other media content-viewing applications.\nThis content often incorporates data from external sources, where that data can be processed or combined before being incorporated into the custom structured content.\nThe high-volume serving path in this architecture is highly decoupled from the content preparation pipeline, resulting in cost efficiency and greater architecture resilience.\n## Render contentContent rendering consumes render variation tasks, as shown in the following image.For each task, Cloud Run retrieves the required set of data from the intermediate storage, and packages each render variation into a form that's optimized for client use (this might be media image maps, or specifically structured JSON content). Each of these final rendered variants is stored in Cloud Storage.## Serve contentThe rendered content in Cloud Storage is served efficiently through Cloud CDN to end-user web and mobile applications, as shown in the following image.This architecture is recommended for content-centric serving scenarios in media and gaming industries. These scenarios often involve serving high volumes of pre-structured content that has been optimized for specific client-side views. This use case might include interactive media, games, or other media content-viewing applications.\nThis content often incorporates data from external sources, where that data can be processed or combined before being incorporated into the custom structured content.\nThe high-volume serving path in this architecture is highly decoupled from the content preparation pipeline, resulting in cost efficiency and greater architecture resilience.\n## What's next\n- Learn how to secure CDN content with [deploying a Cloud CDN origin authentication proxy](/architecture/deploying-a-cloud-cdn-origin-authentication-proxy?) .\n- Learn how to automate increased durability of a low latency architecture component with [scheduling Memorystore for Redis database exports using Cloud Scheduler](/architecture/scheduling-memorystore-for-redis-database-exports-using-cloud-scheduler?) .\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .\n-", "guide": "Docs"}