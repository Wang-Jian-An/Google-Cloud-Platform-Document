{"title": "Docs - Migrate Tomcat applications to containers with Migrate to Containers", "url": "https://cloud.google.com/architecture/migrate-tomcat-to-containers-with-migrate-to-containers", "abstract": "# Docs - Migrate Tomcat applications to containers with Migrate to Containers\nLast reviewed 2022-06-17 UTC\nThis document is for application owners and cloud architects. This document describes how to migrate Java applications running on [Tomcat](https://tomcat.apache.org/) to containers running in [Google Kubernetes Engine (GKE)](/kubernetes-engine/docs) , [GKE Autopilot](/kubernetes-engine/docs/concepts/autopilot-overview) , [Cloud Run](/run) , or [GKE Enterprise](/anthos/docs) . You can use this process to migrate Tomcat applications from on-premises environments, private hosting environments, or other cloud providers. It also highlights the benefits of using [Migrate to Containers](/migrate/containers) to automate your migration.\nThis document assumes that you're familiar with the following products:\n- Java applications deployed on Tomcat application servers and running on Linux virtual machines (VMs).\n- Kubernetes concepts and the basic use of the [Kubernetes command-line tool](https://kubernetes.io/docs/reference/kubectl/) .\nThis document is part of a series about migrating to Google Cloud. For an overview of the series, see [Migration to Google Cloud: Choosing your migration path](/solutions/migration-to-gcp-choosing-your-path) .\nRead this document to migrate compatible Tomcat applications from a [supported source environment](/migrate/containers/docs/migration-prerequisites#supported_vm_source_platforms) to a [GKE, GKE Enterprise, or Cloud Run environment](/migrate/containers/docs/getting-started) , by using Migrate to Containers. These source environments can include the following:\n- A [Compute Engine](/compute) environment\n- A [VMware vSphere](https://www.vmware.com/products/vsphere.html) environment\n- A [Microsoft Azure VM](https://azure.microsoft.com/en-us/services/virtual-machines/) environment\n- An [Amazon Elastic Compute Cloud (Amazon EC2)](https://aws.amazon.com/ec2/) environment\nMigrate to Containers uses the [fit assessment tool](/migrate/containers/docs/fit-assessment) to discover, inspect, and migrate all your Tomcat applications in your Linux VMs. The tool splits the Tomcat applications into individual [Tomcat application containers](https://hub.docker.com/_/tomcat) . After migration, you can group some or all applications into a shared container image. The following diagram shows how Migrate to Containers splits and migrates the applications:\nMigrate to Containers offers the following benefits:\n- **Workload modernization:** provides the following capabilities:- [Microservices in containers](/learn/what-is-microservices-architecture) , which have a smaller base image size\n- [Service discovery](https://kubernetes.io/docs/concepts/services-networking/service/#discovering-services) \n- Elasticity, by using [Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/) and [HorizontalPodAutoscaler](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#what-is-the-horizontal-pod-autoscaler) \n- [Cloud Logging](/logging) \n- [Cloud Monitoring](/monitoring) \n- **Containerized environment:** containerizes existing VM-based applications. See [Benefits of migrating to containers](/migrate/containers/docs/anthos-migrate-benefits) .\n- **Official Tomcat image** : uses the [Tomcat official image](https://hub.docker.com/_/tomcat) by default, or you can update the migration or the Dockerfile to use your own. [Docker official images](https://docs.docker.com/docker-hub/official_images/) bring Docker best practices to your base images.\n- **Automatic applications splitting** : automatically suggests splitting each discovered application into an individual container while keeping Tomcat's original configuration.\n- **Secrets management** : discovers the keystores, truststores, and certificates used by your Tomcat server, and automatically generates Kubernetes primitives to externalize and mount them as [Kubernetes Secrets](https://kubernetes.io/docs/concepts/configuration/secret/) .\n- **Recommended logging changes** : automatically discovers common Java logging framework configuration files (such as log4j2, log4j, and logback), and suggests changes to align with logging on Kubernetes.\nMigrating Tomcat applications to containers with Migrate to Containers is one possible step in your [workload modernization journey](/solutions/migration-to-gcp-getting-started#improve_and_move) . Migrating helps you to transform your Tomcat applications so they run in a cloud environment. It also helps you avoid expensive rewrites.\nIdeal migration candidates are applications running on supported Tomcat and Java versions for which modernization through a complete rewrite is too expensive or too difficult.\n", "content": "## Design the migration to Google Cloud\nTo migrate your Tomcat applications from your source environment to containers running on Google Cloud, follow the framework described in the [Migration to Google Cloud series](/solutions/migration-to-gcp-getting-started) .\nThe following diagram illustrates the path of your migration journey:\nThe framework illustrated in the preceding diagram has four phases:\n- **Assess** : you assess your source environment, assess the applications that you want to migrate to Google Cloud, and assess which Tomcat applications are suitable for migration.\n- **Plan** : you create the basic infrastructure for Migrate to Containers, such as provisioning the resource hierarchy and setting up network access.\n- **Deploy** : you migrate the Tomcat applications from the source environment to GKE, GKE Autopilot, Cloud Run, or GKE Enterprise with Migrate to Containers.\n- **Optimize** : you begin to take advantage of the cloud technologies and capabilities.## Assessing the source environment and applications\nIn the assessment phase, you gather information about your source environment and the applications that you want to migrate. Doing so helps you rightsize the resources that you need\u2014both for the migration and your target environment.\nIn the assessment phase, you do the following:\n- Build a comprehensive inventory of your applications.\n- Catalog your applications according to their properties and dependencies.\n- Train and educate your teams on Google Cloud.\n- Build an experiment and proof of concept on Google Cloud.\n- Calculate the total cost of ownership (TCO) of the target environment.\n- Choose the applications that you want to migrate first.\nThe following sections are based on [Migration to Google Cloud: Assessing and discovering your workloads](/solutions/migration-to-gcp-assessing-and-discovering-your-workloads) . However, they provide information that is specific to assessing the Tomcat applications that you want to migrate to containers with Migrate to Containers.\n### Build your inventories\nTo scope your migration, you must understand your Tomcat environment. To understand your environment, gather information about your applications and their dependencies.\n[Building an inventory of your apps](/solutions/migration-to-gcp-assessing-and-discovering-your-workloads#building_an_inventory_of_your_apps) describes how to build an inventory of your workloads and their dependencies in your Tomcat environment. Follow that guidance and build your inventories. When you're done with that work, continue reading this document.\nAfter you've built an inventory of your workloads and their dependencies, you refine the inventory. Assess the aspects and features that interest your organization when it migrates its Tomcat applications with Migrate to Containers.\nBefore assessing your Tomcat environment for migration, complete the assessment work in [Migrating VMs to containers with Migrate to Containers](/architecture/migrating-vms-to-containers-with-migrate-for-anthos#assessing_the_source_environment_and_workloads) and [Migration to Google Cloud: Assessing and discovering your workloads](/architecture/migration-to-gcp-assessing-and-discovering-your-workloads) . When you're done with that work, complete the inventory of your workloads.\nTo complete the inventory of your workloads, consider the following:\n- **Operating systems running in your Tomcat instances** : Gather information about the operating systems and their licenses running in your Tomcat instances, and ensure that the operating systems are listed in [Compatible operating systems and Kubernetes versions](/migrate/containers/docs/compatible-os-versions) .\n- **Tomcat versions running your applications** : Gather information about the Tomcat versions running your applications, and ensure their [compatibility with Migrate to Containers](/migrate/containers/docs/public-preview/tomcat-migration#prerequisites) .\n- **Applications deployed in your Tomcat instances** : Assess which applications are deployed in each Tomcat instance. Then, map the dependencies between your applications, and between your applications and external services. Next, gather information about the configuration sources of your applications, which can include the following configurations:- Environment variables\n- Non-standard Tomcat installation paths\n- LDAP user registries\n- Java Database Connectivity (JDBC) connections\n- Tomcat proxy\n- Java proxy\n- **Migrate to Containers fit score** : Assess if your Tomcat applications are fit to migrate with Migrate to Containers. Migrate to Containers provides a [fit assessment tool](/migrate/containers/docs/fit-assessment) that yourun on the VMs hosting your Tomcat instances to compute a fit score and recommend a migration journey. Migrate to Containers uses a set of [assessment rules](/migrate/containers/docs/fit-assessment-rules) to successfully migrate Tomcat applications.\n- **Tomcat clustering** : [Tomcat clustering](https://tomcat.apache.org/tomcat-8.5-doc/cluster-howto.html) enables session replication across all Tomcat nodes in the cluster. Some clustering implementations, including the built-in`McastService`membership provider, don't work properly in Kubernetes due to lack of support for network-level multicast. That means that configuring Tomcat clustering requires some manual configuration during the migration. For more information, see [ClusteringCloud](https://cwiki.apache.org/confluence/display/TOMCAT/ClusteringCloud) on the Apache Tomcat wiki.\n- **Tomcat proxy** : In many real world scenarios, Tomcat might be configured to run behind a [reverse proxy](https://tomcat.apache.org/tomcat-8.5-doc/proxy-howto.html) . The main uses of a reverse proxy include the following:- **SSL offloading:** The termination of encrypted communications before passing the request to the intended backend server. SSL offloading may be replaced by [creating an Ingress with a Google-managed certificate](/kubernetes-engine/docs/how-to/managed-certs#creating_an_ingress_with_a_google-managed_certificate) .\n- **Caching:** Caching a local copy of a response lowers the burden on the backend server and decreases the response time for subsequent calls. Caching may be replaced by creating a [BackendConfig with Cloud CDN](/kubernetes-engine/docs/how-to/ingress-features#cloud_cdn) .\n- **Compression** : Compressing server responses reduces network bandwidth requirements. The default GKE ingress does not compress or decompress responses. You may use a [custom Ingress controller](/kubernetes-engine/docs/how-to/custom-ingress-controller) , such as [NGINX Ingress controller](https://kubernetes.github.io/ingress-nginx/) , and enable gzip compression by setting the [use-gzip](https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#use-gzip) option to`true`.\n- **Java proxy:** If you use a proxy server to control egress from Tomcat and Java applications, you can disable the Java proxy settings. Remove the proxy settings from the Java virtual machine (JVM) command-line options. Then, configure an Anthos Service Mesh (ASM) [egress gateway](/service-mesh/docs/security/egress-gateways-best-practices) to control egress networking from your Tomcat container.\n### Complete the assessment\nAfter building the inventories related to your environment and your Tomcat workloads, complete the rest of the assessment phase activities documented in [Migration to Google Cloud: Assessing and discovering your workloads](/solutions/migration-to-gcp-assessing-and-discovering-your-workloads) . When you're done with that work, continue reading this document.\n## Plan and build your foundation\nAfter following the guidance in [Planning and building your foundation](/architecture/migrating-vms-to-containers-with-migrate-for-anthos#planning_and_building_your_foundation) , complete your Tomcat foundation:\n- Confirm that your Tomcat workloads and source environment meet the prerequisites for [migrating a Tomcat workload](/migrate/containers/docs/public-preview/tomcat-migration#prerequisites) .\n- To complete the data collection phase, run **mfit** on the VMs running your Tomcat instances. For more information, see [Using the fit assessment tool](/migrate/containers/docs/fit-assessment) .\nTo provision and configure Migrate to Containers and its dependencies, see [Set up Migrate to Containers](/migrate/containers/docs/setting-up-overview) .\nWhen you're done with that work, continue reading this document.\n## Migrate your Tomcat applications to containers\nIn the deployment phase, use the following milestones to guide you.\n### Generate and review the migration plan\n[Create a Migrate to Containers migration plan](/migrate/containers/docs/tomcat/tomcat-creating-a-migration) for your Tomcat applications:\n- **Configure the source environments as Migrate to Containers\nmigration sources:** To migrate your Tomcat applications, Migrate to Containers needs information about the source environments where your VMs run. You gathered that information by performing the tasks described in the [Build your inventories](#build-your-inventories) section within this document. For more information about configuring source environments, see [Adding a migration source](/migrate/containers/docs/adding-a-migration-source) .\n- **Create a migration plan:** To specify which Tomcat applications you want to migrate from a source environment to a supported target environment, create a migration plan. For example, you can configure where you want to store your persistent data.For more information about creating and monitoring migration plans, see [Creating a migration](/migrate/containers/docs/creating-a-migration#creating_a_migration) . To create a migration plan for Tomcat applications, you use the [migctl command-line tool](/migrate/containers/docs/migctl-reference) as described in [Executing a migration](/migrate/containers/docs/tomcat/tomcat-executing-a-migration) .\n- **Review and customize migration plans:** After generating migration plans for each of the VMs you want to migrate, review and customize each plan to ensure that it fits your requirements. For more information about customizing migration plans, see [Customizing a migration plan](/migrate/containers/docs/tomcat/tomcat-customizing-a-migration-plan) .\n### Generate migration artifacts and deployment descriptors\nTo generate the target Tomcat artifacts for your applications, Migrate to Containers extracts the applications running in the VMs you configured in the migration plans. It then creates several artifacts and places them in a Cloud Storage bucket. Migrate to Containers also generates the deployment descriptors  that you can customize and use to deploy instances of the container images  in the target environment.\nFor each migrated application, Migrate to Containers creates a  folder containing the following:\n- [Dockerfile](https://docs.docker.com/engine/reference/builder/) \n- Application binaries\n- Tomcat configuration files\n- Build script\n- [Skaffold](https://skaffold.dev/) YAML, for building and deploying\n- (Optional)`secrets.sh`script\n- (Optional) logging archive\nYou can monitor the progress of the container artifacts you create and migrate. For more information about monitoring a migration, see [Monitoring migrated workloads](/migrate/containers/docs/monitoring-migrated-workloads) .\n### Verify and validate the generated resources and descriptors\nAfter you generate container artifacts and deployment descriptors with Migrate to Containers, review and update those artifacts and descriptors to ensure that they meet your requirements. For example, consider the following aspects:\n- **Container image descriptors** : Review the container image descriptors that you generated with Migrate to Containers and verify that they are sufficient for the container workload. If you need to update the base container image, update the`FROM`value in the generated Dockerfile. You may also change the`CATALINA_OPTS`environment variable in the Dockerfile to set or change JVM environment variables.\n- **Application-level logging** : Migrate to Containers automatically generates a modified logging archive, which you can use to modify your logging setting to write logs to the console instead of local files.\nFor more information about reviewing container artifacts and deployment descriptors, see [Review the artifacts](/migrate/containers/docs/tomcat/tomcat-build-container-image#review_the_artifacts) .\n### Deploy and validate the containerized workloads to GKE, GKE Autopilot, Cloud Run, or GKE Enterprise\nWhen the deployment descriptors for your workloads are ready, you can perform the following tasks:\n- **Build an application container image:** Build an application container image for your migrated workload. For instructions, see [Build the container image](/migrate/containers/docs/tomcat/tomcat-build-container-image#build_the_container_image) .\n- **Deploy your migrated applications in the target environment:** - To deploy your migrated applications to GKE, GKE Autopilot, or GKE Enterprise, follow the instructions in [Deploying a Tomcat workload to a target cluster](/migrate/containers/docs/tomcat/tomcat-deploying-workload) .\n- To deploy your migrated applications to Cloud Run, follow the instructions in [Deploying to Cloud Run](/build/docs/deploying-builds/deploy-cloud-run) .\n- **Monitor your migrated workloads:** After deploying your Tomcat application container, you can gather data about how they are performing in the target environment. For more information, see [Monitoring migrated workloads](/migrate/containers/docs/monitoring-migrated-workloads) .\n- **Integrate your migrated workloads:** After your workloads are deployed in the target environment, integrate the container artifact generation and deployment processes of the workloads with your [deployment processes and pipelines](/solutions/migration-to-gcp-deploying-your-workloads) . If you don't have an automated deployment process in place and are [manually deploying your workloads](/solutions/migration-to-gcp-deploying-your-workloads#deploy_manually) , we recommend that you [migrate from manual deployments to automated deployments](/solutions/migration-to-google-cloud-automated-containerized-deployments) .\n### Uninstall Migrate to Containers\nAfter you complete the migration of your workloads with Migrate to Containers, we recommend that you take the following actions:\n- Ensure that you have all the references to the [artifacts that Migrate to Containers generated](/migrate/containers/docs/migctl-reference#migctl-migration-get-artifacts) during the migration.\n- [Uninstall Migrate to Containers](/migrate/containers/docs/how-to#uninstalling-migrate-for-anthos) .## Optimize your environment after migration\nTo complete your migration, see [Optimizing your environment](/architecture/migration-to-google-cloud-optimizing-your-environment) .\nYou can perform these Tomcat-specific optimizations for your migrated Tomcat applications:\n- **Adjust your logging:** Unlike VMs where log files are normally written to the local file system, Kubernetes logs are normally streamed to`stdout`or`stderr`. The logs are then stored, analyzed, and queried through a dedicated backend, such as [Cloud Logging](/logging) . You can use the Migrate to Containers recommended changes in the`logConfigs`archive artifact or manually change your logging configuration to write logs to`stdout`or`stderr`.\n- **Securing your sensitive data:** Put passwords and any other sensitive data into [Kubernetes Secrets](https://kubernetes.io/docs/concepts/configuration/secret/) . Use Kubernetes secrets to replace configuration placeholders at container start-up.\n- **Tune your resource profile:** To help Kubernetes schedule your Pods efficiently, fine-tune your resource constraints for both [requests and limits](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits) . Fine tuning your resources to align with your JVM heap size is also critical to avoid out of memory (OOM) exceptions.\n- **Control Pod placement:** If your migrated Tomcat applications frequently communicate with each other, you may want to schedule them to run on the same nodes. If controlling pod placement would be beneficial for your migrated applications, see [Assigning Pods to Nodes](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/) .## What's next\n- Try a step-by-step [guide](https://github.com/GoogleCloudPlatform/migrate-for-anthos-gke/tree/main/guides/tomcat) for migrating a Tomcat application to a container.\n- Try a step-by-step [guide](https://github.com/GoogleCloudPlatform/migrate-for-anthos-gke/tree/main/guides/tomcat-multi-apps-with-httpd-proxy) for migrating multiple Tomcat applications running behind a reverse proxy to a container.\n- Read about best practices for [building](/architecture/best-practices-for-building-containers) and [operating](/architecture/best-practices-for-operating-containers) containers.\n- Read about [best practices for running cost-optimized Kubernetes applications on GKE](/architecture/best-practices-for-running-cost-effective-kubernetes-applications-on-gke) .\n- Read about [Microservices architecture](/learn/what-is-microservices-architecture) \n- [Migrating VMs to containers with Migrate to Containers](/architecture/migrating-vms-to-containers-with-migrate-for-anthos) .\n- [Migrating WebSphere applications to containers with Migrate to Containers](/architecture/migrating-was-apps-to-containers-with-migrate-for-anthos) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Docs"}