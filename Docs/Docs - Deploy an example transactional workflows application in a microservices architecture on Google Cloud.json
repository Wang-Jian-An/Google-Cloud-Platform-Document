{"title": "Docs - Deploy an example transactional workflows application in a microservices architecture on Google Cloud", "url": "https://cloud.google.com/architecture/deploy-example-transactional-workflows-microservices-architecture-google-cloud", "abstract": "# Docs - Deploy an example transactional workflows application in a microservices architecture on Google Cloud\nThis document describes how to deploy an example application using [Cloud Run](/run) , [Pub/Sub](/pubsub) , [Workflows](/workflows) , and [Firestore in Datastore mode (Datastore)](/datastore) . It's intended for application developers who want to implement transactional workflows in a microservices based application.\nThis document is part of a series that is composed of the following:- [Transactional workflows in a microservices architecture on Google Cloud](/architecture/transactional-workflows-microservices-architecture-google-cloud) : An architectural overview of the example transactional workflows application that you deploy in this tutorial.\n- Deploying an example transactional workflows application in a microservices architecture on Google Cloud (this document).\nThis example application that you deploy in this tutorial implements microservices for two architectural patterns:- A choreography-based saga\n- A synchronous orchestration\nThe application contains a web client. You can experiment with both of these patterns from the Google Cloud CLI and from the web client.", "content": "## Objectives\n- Deploy server-side components for the choreography-based saga architecture\n- Deploy server-side components for the synchronous orchestration architecture\n- Test the server-side components with the`curl`command\n- Deploy a web application and execute workflows through it\n## CostsIn this document, you use the following billable components of Google Cloud:- [Cloud Run](/run/pricing) \n- [Datastore](/datastore/pricing) \n- [Pub/Sub](/pubsub/pricing) \n- [Workflows](/workflows/pricing) \n- [Cloud Scheduler](/scheduler/pricing) \n- [Cloud Build](/build/pricing) \n- [Firebase](https://firebase.google.com/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the Cloud Services, Cloud Run, Workflows, Cloud Build, and Cloud Scheduler APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=run.googleapis.com, workflows.googleapis.com, cloudbuild.googleapis.com, cloudscheduler.googleapis.com) \n## Clone the source codeIn this section, you set your project ID and clone the source code in Cloud Shell.- In Cloud Shell, set your project ID:```\nPROJECT_ID=PROJECT_ID\n```Replace `` with the project ID of the Google Cloud project that you [created earlier](#before-you-begin) .\n- Set the project ID:```\ngcloud config set project $PROJECT_ID\n```\n- Clone the tutorial repository:```\ncd $HOMEgit clone https://github.com/GoogleCloudPlatform/transactional-microservice-examples\n```\n## Deploy server-side components for choreography-based saga architecturesIn this section, you deploy server-side components of the example application. The application implements choreography-based saga architectures such as microservices on Cloud Run, event publishing schedules on Cloud Scheduler, and Pub/Sub topics.\n### Build and deploy container images\n- In Cloud Shell, build a container image for the `Order` service named `order-async` and deploy it on Cloud Run:```\ncd $HOME/transactional-microservice-examples/services/order-asyncgcloud builds submit --tag gcr.io/$PROJECT_ID/order-service-asyncgcloud run deploy order-service-async \\\u00a0 --image gcr.io/$PROJECT_ID/order-service-async \\\u00a0 --platform=managed --region=us-central1 \\\u00a0 --no-allow-unauthenticated\n```\n- Build a container image for the `Customer` service named `customer-async` and deploy it on Cloud Run:```\ncd $HOME/transactional-microservice-examples/services/customer-asyncgcloud builds submit --tag gcr.io/$PROJECT_ID/customer-service-asyncgcloud run deploy customer-service-async \\\u00a0 --image gcr.io/$PROJECT_ID/customer-service-async \\\u00a0 --platform=managed --region=us-central1 \\\u00a0 --no-allow-unauthenticated\n```\n- Build a container image for the `event-publisher` service and deploy it on Cloud Run:```\ncd $HOME/transactional-microservice-examples/services/event-publishergcloud builds submit --tag gcr.io/$PROJECT_ID/event-publishergcloud run deploy event-publisher \\\u00a0 --image gcr.io/$PROJECT_ID/event-publisher \\\u00a0 --platform=managed --region=us-central1 \\\u00a0 --no-allow-unauthenticated \\\u00a0 --set-env-vars \"PROJECT_ID=$PROJECT_ID\"\n```\n### Create an index for DatastoreIn this section, you create an index for Datastore. This index is used by the `event-publisher` service to select the events that must be published.- In Google Cloud console, on the [Datastore](https://console.cloud.google.com/projectselector2/datastore/entities/query/kind?supportedpurview=project) menu, select **Datastore mode** .\n- Click **Choose where to store your data** and select `us-east1` as the location. Then, click **Create database** .\n- Create an index for Datastore:```\ncd $HOME/transactional-microservice-examples/services/event-publishergcloud datastore indexes create index.yaml --quiet\n```\n- In Google Cloud console, on the **Datastore** menu, select [Indexes](/datastore/docs/concepts/indexes) and wait for the status of the index to change from **Indexing** to **Serving** . This process might take a few minutes.\n### Create a service account to invoke microservices on Cloud Run\n- In Cloud Shell, create the `cloud-run-invoker` service account:```\nSERVICE_ACCOUNT_NAME=\"cloud-run-invoker\"SERVICE_ACCOUNT_EMAIL=${SERVICE_ACCOUNT_NAME}@${PROJECT_ID}.iam.gserviceaccount.comgcloud iam service-accounts create $SERVICE_ACCOUNT_NAME \\\u00a0 --display-name \"Cloud Run Invoker\"\n```You use this service account later in this tutorial to invoke the REST APIs for the microservices that run on Cloud Run.\n### Define a schedule to call the event publisher serviceIn this section, you define a schedule to invoke the event publisher named `event-publisher` at one-minute intervals.- In Cloud Shell, assign the `run.invoker` role to the `event publisher` service.```\nSERVICE_NAME=\"event-publisher\"gcloud run services add-iam-policy-binding $SERVICE_NAME \\\u00a0 --member=serviceAccount:$SERVICE_ACCOUNT_EMAIL \\\u00a0 --role=roles/run.invoker \\\u00a0 --platform=managed --region=us-central1\n```\n- Define a schedule to call the `Event publisher` service named `event-publisher` at one minute intervals by using the `cloud-run-invoker` service account:```\nSERVICE_NAME=\"event-publisher\"SERVICE_URL=$(gcloud run services list --platform managed \\\u00a0 --format=\"table[no-heading](URL)\"\u00a0 --filter=\"SERVICE:${SERVICE_NAME}\")SERVICE_URL=\"${SERVICE_URL}/api/v1/event/publish\"gcloud scheduler jobs create http event-publisher-scheduler \\\u00a0 --schedule='* * * * *' \\\u00a0 --http-method=GET \\\u00a0 --uri=$SERVICE_URL \\\u00a0 --oidc-service-account-email=$SERVICE_ACCOUNT_EMAIL \\\u00a0 --oidc-token-audience=$SERVICE_URL \\\u00a0 --location=us-central1\n```\n### Create Pub/Sub topics\n- In Cloud Shell, create the following Pub/Sub topics:```\ngcloud pubsub topics create order-service-eventgcloud pubsub topics create customer-service-event\n```\nThe `order-service-event` topic is used by the `Order` service and the `event-publisher` service to publish events from the `Order` service. The `customer-service-event` topic is used to publish events from the `Customer` service.\n### Define a topic to send event notifications to microservicesIn this section, you define the `push-subscription` topic to deliver messages in Pub/Sub topics to microservices.- In Cloud Shell, assign the `iam.serviceAccountTokenCreator` role to the project Pub/Sub service account:```\nPROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format \"value(projectNumber)\")gcloud projects add-iam-policy-binding $PROJECT_ID \\\u00a0 --member=serviceAccount:service-${PROJECT_NUMBER}@gcp-sa-pubsub.iam.gserviceaccount.com \\\u00a0 --role=roles/iam.serviceAccountTokenCreator\n```This command lets the service account create an access token to invoke microservices on Cloud Run.\n- Assign the `run.invoker` role to the `customer-service-async` service:```\nSERVICE_NAME=\"customer-service-async\"gcloud run services add-iam-policy-binding $SERVICE_NAME \\\u00a0 --member=serviceAccount:$SERVICE_ACCOUNT_EMAIL \\\u00a0 --role=roles/run.invoker \\\u00a0 --platform=managed --region=us-central1\n```\n- Create a `push-subscription` topic:```\nSERVICE_URL=$(gcloud run services list --platform managed \\\u00a0 --format=\"table[no-heading](URL)\" --filter=\"SERVICE:${SERVICE_NAME}\")SERVICE_URL=\"${SERVICE_URL}/api/v1/customer/pubsub\"gcloud pubsub subscriptions create push-order-to-customer \\\u00a0 --topic order-service-event \\\u00a0 --push-endpoint=$SERVICE_URL \\\u00a0 --push-auth-service-account=$SERVICE_ACCOUNT_EMAIL\n```This topic delivers messages in the `order-service-event` topic to the `Customer` service using the `cloud-run-invoker` service account.\n- Assign the `run.invoker` role to the `order-service-async` service:```\nSERVICE_NAME=\"order-service-async\"gcloud run services add-iam-policy-binding $SERVICE_NAME \\\u00a0 --member=serviceAccount:$SERVICE_ACCOUNT_EMAIL \\\u00a0 --role=roles/run.invoker \\\u00a0 --platform=managed --region=us-central1\n```\n- Create a `push-subscription` topic:```\nSERVICE_URL=$(gcloud run services list --platform managed \\\u00a0 --format=\"table[no-heading](URL)\" --filter=\"SERVICE:${SERVICE_NAME}\")SERVICE_URL=\"${SERVICE_URL}/api/v1/order/pubsub\"gcloud pubsub subscriptions create push-customer-to-order \\\u00a0 --topic customer-service-event \\\u00a0 --push-endpoint=$SERVICE_URL \\\u00a0 --push-auth-service-account=$SERVICE_ACCOUNT_EMAIL\n```The `push-subscription` topic delivers messages in the `customer-service-event` topic to the `Order` service by using the `cloud-run-invoker` service account.\n## Deploy server-side components for a synchronous orchestration architectureIn this section, you deploy the server-side components for the example application. These components implement a synchronous orchestration architecture on Cloud Run, as well as a workflow which is executed with Workflows.\n### Build and deploy container imagesIn this section, you build container images for microservices and deploy them on Cloud Run.- In Cloud Shell, build a container image for the `Order` service named `order-sync` and deploy it on Cloud Run:```\ncd $HOME/transactional-microservice-examples/services/order-syncgcloud builds submit --tag gcr.io/$PROJECT_ID/order-service-syncgcloud run deploy order-service-sync \\\u00a0 --image gcr.io/$PROJECT_ID/order-service-sync \\\u00a0 --platform=managed --region=us-central1 \\\u00a0 --no-allow-unauthenticated\n```\n- Build a container image for the `Customer` service named `customer-sync` and deploy it on Cloud Run:```\ncd $HOME/transactional-microservice-examples/services/customer-syncgcloud builds submit --tag gcr.io/$PROJECT_ID/customer-service-syncgcloud run deploy customer-service-sync \\\u00a0 --image gcr.io/$PROJECT_ID/customer-service-sync \\\u00a0 --platform=managed --region=us-central1 \\\u00a0 --no-allow-unauthenticated\n```\n- Build a container image for the `Order` processor service named `order-processor` and deploy it on Cloud Run:```\ncd $HOME/transactional-microservice-examples/services/order-processorgcloud builds submit --tag gcr.io/$PROJECT_ID/order-processor-servicegcloud run deploy order-processor-service \\\u00a0 --image gcr.io/$PROJECT_ID/order-processor-service \\\u00a0 --platform=managed --region=us-central1 \\\u00a0 --no-allow-unauthenticated \\\u00a0 --set-env-vars \"PROJECT_ID=$PROJECT_ID\"\n```\n### Create a service account to invoke microservices on Cloud RunIn this section, you reuse the `cloud-run-invoker` service account that you created in [Create a service account to invoke microservices on Cloud Run](#create-a-service-account-to-invoke-microservices-on-cloud-run) .\n### Deploy a workflow to process an order\n- In Cloud Shell, assign the `run.invoker` and `run.viewer` roles to the `cloud-run-invoker` service account for the `order-service-sync` service.```\nSERVICE_NAME=\"order-service-sync\"gcloud run services add-iam-policy-binding $SERVICE_NAME \\\u00a0 --member=serviceAccount:$SERVICE_ACCOUNT_EMAIL \\\u00a0 --role=roles/run.invoker \\\u00a0 --platform=managed --region=us-central1gcloud run services add-iam-policy-binding $SERVICE_NAME \\\u00a0 --member=serviceAccount:$SERVICE_ACCOUNT_EMAIL \\\u00a0 --role=roles/run.viewer \\\u00a0 --platform=managed --region=us-central1\n```\n- Assign `run.invoker` and `run.viewer` roles to the `cloud-run-invoker` service account for the `customer-service-sync` service:```\nSERVICE_NAME=\"customer-service-sync\"gcloud run services add-iam-policy-binding $SERVICE_NAME \\\u00a0 --member=serviceAccount:$SERVICE_ACCOUNT_EMAIL \\\u00a0 --role=roles/run.invoker \\\u00a0 --platform=managed --region=us-central1gcloud run services add-iam-policy-binding $SERVICE_NAME \\\u00a0 --member=serviceAccount:$SERVICE_ACCOUNT_EMAIL \\\u00a0 --role=roles/run.viewer \\\u00a0 --platform=managed --region=us-central1\n```\n- Use the `cloud-run-invoker` service account to deploy a workflow:```\nSERVICE_NAME=\"order-service-sync\"ORDER_SERVICE_URL=$(gcloud run services list --platform managed \\\u00a0 --format=\"table[no-heading](URL)\" --filter=\"SERVICE:${SERVICE_NAME}\")SERVICE_NAME=\"customer-service-sync\"CUSTOMER_SERVICE_URL=$(gcloud run services list --platform managed \\\u00a0 --format=\"table[no-heading](URL)\" --filter=\"SERVICE:${SERVICE_NAME}\")cd $HOME/transactional-microservice-examples/services/order-processorcp order_workflow.yaml.template order_workflow.yamlsed -i \"s#ORDER-SERVICE-URL#${ORDER_SERVICE_URL}#\" order_workflow.yamlsed -i \"s#CUSTOMER-SERVICE-URL#${CUSTOMER_SERVICE_URL}#\" order_workflow.yamlgcloud beta workflows deploy order_workflow \\\u00a0 --source=order_workflow.yaml \\\u00a0 --service-account=$SERVICE_ACCOUNT_EMAIL\n```\n## Test choreography-based saga architecture componentsIn this section, you test components deployed on the choreography-based saga architecture using the `curl` command.- In Cloud Shell, set environment variables that point to URLs of API endpoints for the `customer-service-async` and `order-service-async` microservices:```\nSERVICE_NAME=\"customer-service-async\"CUSTOMER_SERVICE_URL=$(gcloud run services list --platform managed \\\u00a0 --format=\"table[no-heading](URL)\" --filter=\"SERVICE:${SERVICE_NAME}\")SERVICE_NAME=\"order-service-async\"ORDER_SERVICE_URL=$(gcloud run services list --platform managed \\\u00a0 --format=\"table[no-heading](URL)\" --filter=\"SERVICE:${SERVICE_NAME}\")\n```\n### Create a customer entry\n- In Cloud Shell, create a customer ID named `customer01` by sending an API request to the `Customer` service named `customer-service-async` :```\ncurl -X POST -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" \\\u00a0 -H \"Content-Type: application/json\" \\\u00a0 -d '{\"customer_id\":\"customer01\", \"limit\":10000}' \\\u00a0 -s ${CUSTOMER_SERVICE_URL}/api/v1/customer/limit | jq .\n```The output is similar to the following:```\n{\u00a0 \"credit\": 0,\u00a0 \"customer_id\": \"customer01\",\u00a0 \"limit\": 10000}\n```\n### Submit an orderIn this section, you submit an order and trigger an order ID assignment for it.- In Cloud Shell, submit an order by sending an API request to the `Order` service named `order-service-async` :```\ncurl -X POST -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" \\\u00a0 -H \"Content-Type: application/json\" \\\u00a0 -d '{\"customer_id\":\"customer01\", \"number\":10}' \\\u00a0 -s ${ORDER_SERVICE_URL}/api/v1/order/create | jq .\n```In this case, you order 10 items by specifying the following: `\"number\": 10`The output is similar to the following:```\n{\u00a0 \"customer_id\": \"customer01\",\u00a0 \"number\": 10,\u00a0 \"order_id\": \"720d1305-b6fd-4f57-aaf4-fd2ca5bdfe1e\",\u00a0 \"status\": \"pending\"}\n```The `\"order_id\"` flag in the output shows the unique order ID which is assigned to the order. Copy this ID because you use it in the next step.\n- Set the order ID in an environment variable:```\nORDER_ID=ORDER_ID\n```Replace `` with the `\"order_id\"` flag that you copied in the previous step.\n### Check an order statusIn this section, you check how an order status changes.- In Cloud Shell, get the status of the order by sending an API request to the `Order` service named `order-service-async` :```\ncurl -X POST -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" \\\u00a0 -H \"Content-Type: application/json\" \\\u00a0 -d \"{\\\"customer_id\\\":\\\"customer01\\\", \\\"order_id\\\":\\\"$ORDER_ID\\\"}\" \\\u00a0 -s ${ORDER_SERVICE_URL}/api/v1/order/get | jq .\n```The output resembles the following:```\n{\u00a0 \"customer_id\": \"customer01\",\u00a0 \"number\": 10,\u00a0 \"order_id\": \"720d1305-b6fd-4f57-aaf4-fd2ca5bdfe1e\",\u00a0 \"status\": \"pending\"}\n```The `\"status\"` flag in the output shows the status of the order. If the transactional process is still running, the status is `\"pending\"` . In this case, wait a few minutes and check the status again by running the same command. When the transactional process is complete, the status shows as `\"accepted\"` .\n- Get customer information for the `customer01` customer ID:```\ncurl -X POST -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" \\\u00a0 -H \"Content-Type: application/json\" \\\u00a0 -d '{\"customer_id\":\"customer01\"}' \\\u00a0 -s ${CUSTOMER_SERVICE_URL}/api/v1/customer/get | jq .\n```The output resembles the following:```\n{\u00a0 \"credit\": 1000,\u00a0 \"customer_id\": \"customer01\",\u00a0 \"limit\": 10000}\n```The `\"credit\"` flag shows the current credit usage of the customer. It increases by 1,000 because the business logic for this transaction is to increase the credit by 100 for one item.You can repeat the order process by repeating the steps in [Submit an order](#submit-an-order) . If you order 100 items by specifying `\"number\": 100` , the final status of the order is `\"rejected\"` because the credit usage goes over the limit.\n## Test synchronous orchestration architecture componentsIn this section, you test the deployed components of the synchronous orchestration architecture using the `curl` command.- In Cloud Shell, set the environment variables that point to URLs for the API endpoints of the `customer-service-sync` , `order-service-sync` , and `order-processor-service` microservices:```\nSERVICE_NAME=\"customer-service-sync\"CUSTOMER_SERVICE_URL=$(gcloud run services list --platform managed \\\u00a0 --format=\"table[no-heading](URL)\" --filter=\"SERVICE:${SERVICE_NAME}\")SERVICE_NAME=\"order-service-sync\"ORDER_SERVICE_URL=$(gcloud run services list --platform managed \\\u00a0 --format=\"table[no-heading](URL)\" --filter=\"SERVICE:${SERVICE_NAME}\")SERVICE_NAME=\"order-processor-service\"ORDER_PROCESSOR_URL=$(gcloud run services list --platform managed \\\u00a0 --format=\"table[no-heading](URL)\" --filter=\"SERVICE:${SERVICE_NAME}\")\n```\n### Create a customer entry\n- In Cloud Shell send an API request to the `Customer` service named `customer-service-sync` to create a customer ID named `customer02` :```\ncurl -X POST -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" \\\u00a0 -H \"Content-Type: application/json\" \\\u00a0 -d '{\"customer_id\":\"customer02\", \"limit\":10000}' \\\u00a0 -s ${CUSTOMER_SERVICE_URL}/api/v1/customer/limit | jq .\n```The output resembles the following:```\n{\u00a0 \"credit\": 0,\u00a0 \"customer_id\": \"customer02\",\u00a0 \"limit\": 10000}\n```\n### Submit an orderIn this section, you submit an order and check the result.- In Cloud Shell, submit an order by sending an API request to `Order` service `order-processor-service` :```\ncurl -X POST -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" \\\u00a0 -H \"Content-Type: application/json\" \\\u00a0 -d '{\"customer_id\":\"customer02\", \"number\":10}' \\\u00a0 -s ${ORDER_PROCESSOR_URL}/api/v1/order/process | jq .\n```In this case, you order 10 items by specifying `\"number\": 10` .The output is similar to the following:```\n{\u00a0 \"customer_id\": \"customer02\",\u00a0 \"number\": 10,\u00a0 \"order_id\": \"fb6d5087-dd99-4d5a-84c2-0e381016b9d3\",\u00a0 \"status\": \"accepted\"}\n```Because the transactional workflow is conducted in a synchronous way, the client immediately sees the result. In this case, the final status is the following: `\"accepted\"`\n- Get the customer information with the customer ID of `customer02` :```\ncurl -X POST -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" \\\u00a0 -H \"Content-Type: application/json\" \\\u00a0 -d '{\"customer_id\":\"customer02\"}' \\\u00a0 -s ${CUSTOMER_SERVICE_URL}/api/v1/customer/get | jq .\n```The output is similar to the following:```\n{\u00a0 \"credit\": 1000,\u00a0 \"customer_id\": \"customer02\",\u00a0 \"limit\": 10000}\n```The credit usage of the customer increases by 1,000. To repeat the order process, repeat these steps. If you order 100 items by specifying the value `\"number\": 100` , the client immediately gets the result `\"rejected\"` because the credit usage goes over the limit.\n## Optional: Deploy a web applicationIn this section, as an optional extension to the tutorial, you deploy an example web application that executes the transactional workflow on top of microservices that you deployed in the previous section. You use [Firebase Hosting](https://firebase.google.com/docs/hosting) to deploy a web application that interacts with backend microservices running on Cloud Run.\nFirebase Hosting has built-in Cloud Run integration, which lets you host the web application and backend microservices services in the same domain. In other types of deployment, you may have Cross-Origin Resource Sharing (CORS) issues. For more information, see [Authenticating end users](/run/docs/authenticating/end-users#web_apps_authentication_and_cors) .Firebase Hosting integration does the following:- Hosts static assets for the web application.\n- Redirects access to APIs to the following backend services on Cloud Run:- `/customer-service-sync/*`to`customer-service-sync`\n- `/customer-service-async/*`to`customer-service-async`\n- `/order-service-sync/*`to`order-service-sync`\n- `/order-service-async/*`to`order-service-async`\n- `/order-processor-service/*`to`order-processor-service`\n- Returns static assets of the web application.\n### Set up FirebaseIn this section, you set up Firebase to host the web application on Firebase Hosting.- In Cloud Shell, update Node.js to the latest LTS version to use Firebase CLI:```\nnvm install lts/gallium\n```\n- Add Firebase resources to the existing Google Cloud project:```\nfirebase projects:addfirebase $PROJECT_ID\n```\n- Add a default project alias for Firebase CLI:```\njq -n --arg project_id $PROJECT_ID \\\u00a0 '{\"projects\": {\"default\":$project_id}}' > \\\u00a0 $HOME/transactional-microservice-examples/frontend/.firebaserc\n```\n### Deploy the web applicationIn this section, you deploy the web application on Firebase Hosting.- In Cloud Shell, build the web frontend application:```\ncd $HOME/transactional-microservice-examples/frontendyarn install && yarn build\n```\n- Deploy the web application on Firebase Hosting:```\nfirebase deploy\n```\n### Use the web application\n- Enter the hosting URL that you copied in the previous section into your browser. You see the homepage for the web application.\n### Initialize the web application with an identity tokenIn this section, you initialize the web application with your identity token and proceed to the **Shopping** page.- In Cloud Shell, print the identity token:```\ngcloud auth print-identity-token\n```\n- Copy the output of the previous command and paste it into the text box.\n- Click **Proceed** . You are redirected to the **Shopping** page if the identity token is valid.\n### Add items to a cart\n- In the web application, click **Add to cart** to add items to a cart.\n### Check items in a cart\n- In the web application, click the cart icon on the navigation bar to go to the **Checkout** page. You see items in the cart.\n### Submit an order using the asynchronous service\n- In the web application, click the shopping cart icon on the navigation bar to go to the **Checkout** page.\n- Click **Submit order (Async)** . You are redirected to the **Order history** page if the order is successfully submitted.\n### Submit an order using the synchronous service\n- In the web application, click the shopping cart icon on the navigation bar to go to the **Checkout** page.\n- Click **Submit order (Sync)** . You will be redirected to the **Order history** page if the order is successfully submitted.\n### Check the order history\n- In the web application, click **Orders** on the navigation bar to go to the **Order history** page.\n### Update the status of an incomplete order\n- In the web application, click **Orders** on the navigation bar to go to the **Order history** page.\n- Click the refresh icon for an individual order. The icon is shown only if the order is processed asynchronously and the status is`pending`.\n### Check a customer's current budget\n- In the web application, click the customer name ( **customer-number** ) on the navigation bar to go to their profile page.### Reset the state in the web application\n- In your browser, reload the web application. States like the items in the cart, the order history, and the customer information are reset, and you are redirected to the homepage.\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n## Delete individual resourcesIn this section, you delete the individual resources that you use in this tutorial.\n### Deactivate Firebase Hosting\n- In Cloud Shell, run the following command to stop serving Firebase Hosting traffic:```\n\u00a0firebase hosting:disable -f\n```\n### Delete services on Cloud Run\n- In Cloud Shell, delete services on Cloud Run:```\ngcloud run services delete order-service-async \\\u00a0 --platform=managed --region=us-central1 --quietgcloud run services delete customer-service-async \\\u00a0 --platform=managed --region=us-central1 --quietgcloud run services delete order-service-sync \\\u00a0 --platform=managed --region=us-central1 --quietgcloud run services delete customer-service-sync \\\u00a0 --platform=managed --region=us-central1 --quietgcloud run services delete order-processor-service \\\u00a0 --platform=managed --region=us-central1 --quietgcloud run services delete event-publisher \\\u00a0 --platform=managed --region=us-central1 --quiet\n```\n### Delete container images used by Cloud Run\n- In Cloud Shell, delete the container images that you created for this tutorial:```\ngcloud container images delete \\\u00a0 gcr.io/$PROJECT_ID/order-service-async --force-delete-tags --quietgcloud container images delete \\\u00a0 gcr.io/$PROJECT_ID/customer-service-async --force-delete-tags --quietgcloud container images delete \\\u00a0 gcr.io/$PROJECT_ID/event-publisher --force-delete-tags --quietgcloud container images delete \\\u00a0 gcr.io/$PROJECT_ID/order-service-sync --force-delete-tags --quietgcloud container images delete \\\u00a0 gcr.io/$PROJECT_ID/customer-service-sync --force-delete-tags --quietgcloud container images delete \\\u00a0 gcr.io/$PROJECT_ID/order-processor-service --force-delete-tags --quiet\n```\n### Delete the workflow\n- In Cloud Shell, delete the workflow:```\ngcloud beta workflows delete order_workflow --quiet\n```\n### Delete Pub/Sub subscriptions and topics\n- In Cloud Shell, delete the Pub/Sub subscriptions:```\ngcloud pubsub subscriptions delete push-customer-to-order --quietgcloud pubsub subscriptions delete push-order-to-customer --quiet\n```\n- Delete the Pub/Sub topics:```\ngcloud pubsub topics delete order-service-event --quietgcloud pubsub topics delete customer-service-event --quiet\n```\n### Delete records from Datastore\n- In the Google Cloud console, on the Datastore menu, open [Entities](https://console.cloud.google.com/datastore/entities) .\n- Check all entities in the`Customer`field.\n- Click **Delete** and then click **Confirm** to delete entities permanently.\n- Repeat steps 2 and 3 in this procedure for the following fields:.- `Event`\n- `Order`\n- `ProcessedEvent`\n### Delete the job on Cloud Scheduler\n- In Cloud Shell, delete the job that's running on Cloud Scheduler:```\ngcloud scheduler jobs delete event-publisher-scheduler --quiet \\\u00a0 --location=us-central1\n```\n### Delete the service account\n- In Cloud Shell, delete the service account:```\ngcloud iam service-accounts delete $SERVICE_ACCOUNT_EMAIL --quiet\n```\n### Delete tutorial assets\n- In Cloud Shell, delete the assets that you use for this tutorial:```\ncd $HOMErm -rf transactional-microservice-examples\n```## What's next\n- Read the following series to learn more about designing, building, and deploying microservices:- [Introduction to microservices](/architecture/microservices-architecture-introduction) \n- [Refactoring a monolith into microservices](/architecture/microservices-architecture-refactoring-monoliths) \n- [Interservice communication in a microservices setup](/architecture/microservices-architecture-interservice-communication) \n- [Distributed tracing in a microservices application](/architecture/microservices-architecture-distributed-tracing) \n- Read about the benefits and challenges of [both monoliths and microservices](/architecture/microservices-architecture-introduction) \n- Learn how to [define service boundaries and refactor monoliths](/architecture/microservices-architecture-refactoring-monoliths) .\n- Understand how to [distribute transactions between microservices](/architecture/microservices-architecture-interservice-communication) \n- Learn how to set up [distributed tracing in a polyglot environment](/architecture/microservices-architecture-distributed-tracing) \n- Read about how to implement [service meshes in a microservices architecture](/architecture/service-meshes-in-microservices-architecture) \n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .", "guide": "Docs"}