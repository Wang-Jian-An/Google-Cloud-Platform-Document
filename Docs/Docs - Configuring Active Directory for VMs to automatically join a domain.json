{"title": "Docs - Configuring Active Directory for VMs to automatically join a domain", "url": "https://cloud.google.com/architecture/configuring-active-directory-for-vms-to-automatically-join-the-domain", "abstract": "# Docs - Configuring Active Directory for VMs to automatically join a domain\nThis tutorial shows you how to configure Active Directory and [Compute Engine](/compute) so that Windows virtual machine (VM) instances can automatically join an Active Directory domain.\nAutomating the process of joining Windows VMs to Active Directory helps you simplify the process of provisioning Windows servers. The approach also allows you to take advantage of [autoscaling](/compute/docs/autoscaler) without sacrificing the benefits of using Active Directory to manage access and configuration.\nThis tutorial is intended for system admins and assumes that you are familiar with Active Directory and Google Cloud networking.\nThe configuration that you create in this tutorial can be the basis of additional work that you do with Windows Servers in Google Cloud. For example, when you've finished this tutorial, you can deploy ASP.NET applications with Windows Authentication in Windows containers.\nIf you're using Managed Microsoft AD and don't require [automatic cleanupof stale computeraccounts](/architecture/configuring-active-directory-for-vms-to-automatically-join-the-domain#scheduling_cleanup_of_stale_computer_accounts) , consider joining the Windows VMs using the automated domain join feature. For more information, see [Join a Windows VM automatically to adomain](/managed-microsoft-ad/docs/seamless-domain-join-gce) .", "content": "## Objectives\n- Deploy a Cloud Run app that enables VM instances from selected projects to automatically join your Active Directory domain.\n- Create a Cloud Scheduler job that periodically scans your Active Directory domain for stale computer accounts and removes them.\n- Test the setup by creating an autoscaled [managed instance group (MIGs)](/compute/docs/instance-groups#managed_instance_groups) of domain-joined VM instances.\n## CostsIn this document, you use the following billable components of Google Cloud:- [Compute Engine](/compute/all-pricing) \n- [Serverless VPC Access](/vpc/pricing#serverless-vpc-pricing) \n- [Cloud Run](/run/pricing) \n- [Container Registry](/container-registry/pricing) \n- [Secret Manager](/secret-manager/pricing) \n- [Cloud Scheduler](/scheduler/pricing) \nThe instructions in this document are designed to keep your resource usage within  the limits of Google Cloud's [Always Free](/free/docs/frequently-asked-questions#always-free) tier.  To generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . ## Before you beginThis tutorial assumes that you've already deployed Active Directory on Google Cloud by using [Managed Service for Microsoft Active Directory (Managed Microsoft AD)](/managed-microsoft-ad/docs/overview) or by deploying self-managed domain controllers on Google Cloud.\nTo complete this tutorial, ensure that you have the following:- Administrative access to your Active Directory domain, including the ability to create users, groups, and organizational units (OUs).\n- An unused /28\u00a0CIDR IP range in the VPC that your Active Directory domain controllers are deployed in. You use this IP range to configure Serverless VPC Access.\n- A subnet into which you deploy Windows instances. The subnet must be configured to use [Private Google Access](/vpc/docs/private-google-access) .\n **Note:** Private Google Access is required so that all VM instances in the subnet can access Cloud Run. If you don't enable Private Google Access, only VM instances with internet access will be able to automatically join your Active Directory domain.\nIf you use a self-managed domain controller, you also need the following:- A private DNS forwarding zone that [forwards DNS queries to your Active Directory domain controllers](/compute/docs/instances/windows/best-practices#use_cloud_dns_private_forwarding_zones) .\n## Implementing this approachIn an on-premises environment, you might rely on [answer files](https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs) ( `unattend.xml` ) and the [JoinDomain customization](https://docs.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/microsoft-windows-unattendedjoin-identification-joindomain) to automatically join new computers to a domain. Although you can use the same process in Google Cloud, this approach has several limitations:- Using a customized`unattend.xml`file requires that you maintain a custom [Compute Engine image](/compute/docs/images) . Keeping a custom image current using Windows Updates requires either ongoing maintenance or initial work to set up automation. Unless you need to maintain a custom image for other reasons, this extra effort might not be justified.\n- Using the`JoinDomain`customization ties an image to a single Active Directory domain because the domain name must be specified in`unattend.xml`. If you maintain multiple Active Directory domains or forests (for example, for separate testing and production environments), then you might need to maintain multiple custom images for each domain.\n- Joining a Windows computer to a domain requires user credentials that have permissions to create a computer object in the directory. If you use the`JoinDomain`customization in`unattend.xml`, you must embed these credentials as plaintext in`unattend.xml`. These embedded credentials can turn the image into a potential target for attackers. Although you can control access to the image by setting appropriate [Identity and Access Management (IAM) permissions](/compute/docs/images/managing-access-custom-images) , managing access to a custom image adds unnecessary complexity.\nThe approach that this tutorial takes does not use answer files and therefore does not require specially prepared images. Instead, you use the following [sysprep specialize scriptlet](/compute/docs/startupscript#providing_a_startup_script_for_windows_instances) when you create a VM instance:\n```\niex((New-Object System.Net.WebClient).DownloadString('https://[DOMAIN]'))\n```\nThis sysprep specialize scriptlet initiates a process that the following diagram illustrates.The process works as follows:- After a VM instance is created, Windows boots for the first time. As part of the [specialize configuration pass](https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/specialize) , Windows runs the sysprep specialize scriptlet. The specialize scriptlet invokes the`register-computer`Cloud Run app and downloads a PowerShell script that controls the domain joining process.\n- Windows invokes the downloaded PowerShell script.\n- The PowerShell script calls the metadata server to obtain an ID token that [securely identifies the VM instance](/compute/docs/instances/verifying-instance-identity) .\n- The script calls the`register-computer`app again, passing the ID token to authenticate itself.\n- The app validates the ID token and extracts the name, zone, and Google Cloud project ID of the VM instance.\n- The app verifies that the Active Directory domain is configured to permit VM instances from the given project to join the domain. To complete this verification, the app locates and connects to an Active Directory domain controller to check for an organizational unit (OU) whose name matches the Google Cloud project ID from the ID token. If a matching OU is found, then VM instances of the project are authorized to join the Active Directory domain in the given OU.\n- The app verifies that the Google Cloud project is configured to allow VM instances to join Active Directory. To complete this verification, the app checks whether it can access the VM instance by using the Compute Engine API.\n- If all checks pass successfully, the app prestages a computer account in Active Directory. The app saves the VM instance's name, zone, and ID as attributes in the computer account object so that it can be associated with the VM instance.\n- Using the [Kerberos set password protocol](https://support.microsoft.com/en-us/help/264480/description-of-password-change-protocols-in-windows) , the app then assigns a random password to the computer account.\n- The computer name and password are returned to the Windows instance over a TLS-secured channel.\n- Using the prestaged computer account, the PowerShell script joins the computer to the domain.\n- After the specialize configuration pass is complete, the machine reboots itself.\nThe remainder of this tutorial walks you through the steps that are required to set up automated domain joining.## Preparing the Active Directory domainFirst, you prepare your Active Directory domain. To complete this step, you need a machine that has administrative access to your Active Directory domain.\n### Optional: Limit who can join computers to the domainYou might want to restrict who can join computers to the domain. By default, the Group Policy Object (GPO) configuration for the Default Domain Controller Policy grants the [Add workstations to domain user right](https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/add-workstations-to-domain) to all authenticated users. Anyone with that user right can join computers to the domain. Because you are automating the process of joining computers to your Active Directory domain, universally granting this level of access is an unnecessary security risk.\n **Note:** If you use Managed Microsoft AD, only members of the [Cloud Service Domain Join Accounts](/managed-microsoft-ad/docs/objects) group are allowed to join computers to your domain by default.\nTo limit who can join computers to your Active Directory domain, change the default configuration of the Default Domain Controller Policy GPO:- [Using an RDP client](/compute/docs/instances/connecting-to-windows) , log in to a machine that has administrative access to your Active Directory domain.\n- Open the Group Policy Management Console (GPMC).\n- Go to **Forest** > **Domains** > **domain-name** > **Group Policy Objects** , where **domain-name** is the name of your Active Directory domain.\n- Right-click **Default Domain Controller Policy** and click **Edit** .\n- In the Group Policy Management Editor console, go to **Computer Configuration** > **Policies** > **Windows Settings** > **Security Settings** > **Local Policies** > **User Rights Assignment** .\n- Double-click **Add workstations to domain** .\n- In **Properties** , remove **Authenticated Users** from the list.\n- To let administrators join the domain manually (optional), click **Add user\nor group** , and then add an administrative group to the list.\n- Click **OK** .\nYou can now close the Group Policy Management Editor console and GPMC.\n### Initialize a directory structureYou now create an OU that serves as a container for all project-specific OUs:- [Using an RDP client](/compute/docs/instances/connecting-to-windows) , log in to a machine that has administrative access to your Active Directory domain.\n- Open an elevated PowerShell session.\n- Create a new organizational unit:```\n$ParentOrgUnitPath = (Get-ADDomain).ComputersContainer\n$ProjectsOrgUnitPath = New-ADOrganizationalUnit `\n -Name 'Projects' `\n -Path $ParentOrgUnitPath `\n -PassThru\n``` **Note:** Adjust the value of `$ParentOrgUnitPath` to create the OU in a location other than the default container.\n### Create an Active Directory user accountTo access Active Directory and prestage computer accounts, the `register-computer` app needs an Active Directory user account:- Create an Active Directory user account named `register-computer` , assign it a random password, and then place it in the `Projects` OU:```\n# Generate a random password\n$Password = [Guid]::NewGuid().ToString()+\"-\"+[Guid]::NewGuid().ToString()\n# Create user\n$UpnSuffix = (Get-ADDomain).DNSRoot\n$RegisterComputerUser = New-ADUser `\n -Name \"register-computer Cloud Run app\" `\n -GivenName \"Register\" `\n -Surname \"Computer\" `\n -Path $ProjectsOrgUnitPath `\n -SamAccountName \"register-computer\" `\n -UserPrincipalName \"register-computer@$UpnSuffix\" `\n -AccountPassword (ConvertTo-SecureString \"$Password\" -AsPlainText -Force) `\n -PasswordNeverExpires $True `\n -Enabled $True `\n -PassThru\n```\n- Grant the `register-computer` account the minimum set of permissions needed to manage computer accounts and groups in the `Projects` OU and sub-OUs:```\n$AcesForContainerAndDescendents = @(\n \"CCDC;Computer\",    # Create/delete computers\n \"CCDC;Group\"     # Create/delete users\n)\n$AcesForDescendents = @(\n \"LC;;Computer\" ,    # List child objects\n \"RC;;Computer\" ,    # Read security information\n \"WD;;Computer\" ,    # Change security information\n \"WP;;Computer\" ,    # Write properties\n \"RP;;Computer\" ,    # Read properties\n \"CA;Reset Password;Computer\", # ...\n \"CA;Change Password;Computer\", # ...\n \"WS;Validated write to service principal name;Computer\",\n \"WS;Validated write to DNS host name;Computer\",\n \"LC;;Group\",     # List child objects\n \"RC;;Group\",     # Read security information\n \"WD;;Group\",     # Change security information\n \"WP;;Group\",     # Write properties\n \"RP;;Group\"     # Read properties\n)\n$AcesForContainerAndDescendents | % { dsacls.exe $ProjectsOrgUnitPath /G \"${RegisterComputerUser}:${_}\" /I:T | Out-Null }\n$AcesForDescendents | % { dsacls.exe $ProjectsOrgUnitPath /G \"${RegisterComputerUser}:${_}\" /I:S | Out-Null }\n```The command might take a few minutes to complete.\n- Reveal the `Projects` OU path and the generated password of the `register-computer` Active Directory user account. Note the values because you will need them later.```\nWrite-Host \"Password: $Password\"\nWrite-Host \"Projects OU: $ProjectsOrgUnitPath\"\n```\n## Preparing the Google Cloud projectYou now configure your domain project:- If you use Managed Microsoft AD, your domain project is the project in which you deployed Managed Microsoft AD.\n- If you use self-managed Active Directory, your domain project is the project that runs your Active Directory domain controllers. In the case of a Shared VPC, this project must be the same as the VPC host project.\nYou use this domain project to do the following:- Create a Secret Manager secret that contains the password of the`register-computer`Active Directory user account.\n- Deploy [Serverless VPC Access](/vpc/docs/configure-serverless-vpc-access) to let Cloud Run access Active Directory.\n- Deploy the`register-computer`app.\n- Configure Cloud Scheduler so that it triggers cleanups of stale computer accounts.\nWe recommend that you grant access to the domain project on a least-privilege basis.\n### Create a Secret Manager secret\n- In the Google Cloud console, open Cloud Shell. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Launch PowerShell:```\npwsh\n```\n- Initialize the following variable, replacing `` with the ID of your domain project:```\n$DomainProjectId = \"domain-project-id\"\n```\n- Set the domain project as the default project:```\n& gcloud config set project $DomainProjectId\n```\n- Enable the Secret Manager API:```\n& gcloud services enable secretmanager.googleapis.com\n```\n- Enter the password of the `register-computer` Active Directory user account and store it in a Secret Manager secret:```\n$RegisterComputerCredential = (Get-Credential -Credential 'register-computer')\n$TempFile = New-TemporaryFile\nSet-Content $TempFile $($RegisterComputerCredential.GetNetworkCredential().Password) -NoNewLine\n& gcloud secrets create ad-password --data-file $TempFile\nRemove-Item $TempFile\n```\n### Deploy Serverless VPC AccessThe `register-computer` app needs to communicate with your Active Directory domain controllers. To let Cloud Run access resources in a VPC, you now configure [Serverless VPC Access](/vpc/docs/configure-serverless-vpc-access) :- Initialize the following variables:```\n$VpcName = \"vpc-name\"\n$ServerlessRegion = \"serverless-region\"\n$ServerlessIpRange = \"serverless-ip-range\"\n```Replace the following:- ``: The name of the VPC network that contains your Active Directory domain controllers.\n- `` : The region to deploy your Cloud Run in. Choose a region that supports both [Cloud Run](/run/docs/locations) and [Serverless VPC Access](/vpc/docs/configure-serverless-vpc-access#supported_regions) . The region does not have to be the same region as the one you plan to deploy VM instances in.\n- `` : Used by Serverless VPC Access to enable communication between Cloud Run and resources in your VPC. Set to an unreserved /28\u00a0CIDR IP range. It must not overlap with any existing subnets in your VPC network. **Note:** Use a CIDR IP range of the exact size of /28. Using different sizes is not supported.\n- Enable the Serverless VPC Access APIs:```\n& gcloud services enable vpcaccess.googleapis.com\n```\n- Deploy Serverless VPC Access:```\n& gcloud compute networks vpc-access connectors create serverless-connector `\n --network $VpcName `\n --region $ServerlessRegion `\n --range $ServerlessIpRange\n```\n### Grant access to Kerberos and LDAPAlthough Serverless VPC Access enables Cloud Run to access resources in your VPC, connectivity to the Kerberos and LDAP endpoints of your domain controllers is still subject to firewall rules.\nYou need to create a firewall rule that permits serverless resources to access your domain controllers by using the following protocols: LDAP (TCP/389), LDAPS (TCP/636), Kerberos (UDP/88, TCP/88), or Kerberos password change (UDP/464, TCP/464). You can apply the rule based on a [network tag](/vpc/docs/add-remove-network-tags) that you have assigned to your domain controllers, or you can apply it by using a service account.\n **Note:** If you are using Managed Microsoft AD, you can skip this step.\n- To apply the firewall rule, run one of the following commands in Cloud Shell:\n```\n& gcloud compute firewall-rules create allow-adkrb-from-serverless-to-dc `\n --direction INGRESS `\n --action allow `\n --rules udp:88,tcp:88,tcp:389,tcp:636,udp:464,tcp:464 `\n --source-ranges $ServerlessIpRange `\n --target-tags dc-tag `\n --network $VpcName `\n --project vpc-project-id `\n --priority 10000\n```\nReplace the following:- ``: The network tag assigned to your domain controller VMs.\n- ``: The ID of the project the VPC is defined in. If you use a [Shared VPC](/vpc/docs/shared-vpc) , use the VPC host project; otherwise, use the ID of the domain project.\n```\n& gcloud compute firewall-rules create allow-adkrb-from-serverless-to-dc `\n --direction INGRESS `\n --action allow `\n --rules udp:88,tcp:88,tcp:389,tcp:636,udp:464,tcp:464 `\n --source-ranges $ServerlessIpRange `\n --target-service-accounts dc-sa `\n --network $VpcName `\n --project vpc-project-id `\n --priority 10000\n```\nReplace the following:- ``: The email address of the service account that your domain controller VMs use.\n- ``: The ID of the project the VPC is defined in. If you use a [Shared VPC](/vpc/docs/shared-vpc) , use the VPC host project; otherwise, use the ID of the domain project.\n### Deploy the Cloud Run appYou now set up Cloud Build to deploy the `register-computer` app to Cloud Run:- In Cloud Shell, clone the GitHub repository:```\n& git clone https://github.com/GoogleCloudPlatform/gce-automated-ad-join.git\ncd gce-automated-ad-join/ad-joining\n```\n- Initialize the following variables:```\n$AdDomain = \"dns-domain-name\"\n$AdNetbiosDomain = \"netbios-domain-name\"\n$ProjectsOrgUnitPath = \"projects-ou-distinguished-name\"\n```Replace the following:- ``: The DNS domain name of your Active Directory domain.\n- ``: The NetBIOS name of your Active Directory domain.\n- ``: The distinguished name of your`Projects`OU.\n- Enable the Cloud Run and Cloud Build APIs:```\n& gcloud services enable run.googleapis.com cloudbuild.googleapis.com\n```\n- Create a service account `register-computer-app` for the Cloud Run app:```\n& gcloud iam service-accounts create register-computer-app `\n --display-name=\"register computer Cloud Run app\"\n```\n- Allow the Cloud Run service account to read the secret that contains the Active Directory password:```\n& gcloud secrets add-iam-policy-binding ad-password `\n --member \"serviceAccount:register-computer-app@$DomainProjectId.iam.gserviceaccount.com\" `\n --role \"roles/secretmanager.secretAccessor\"\n```\n- Grant Cloud Build the [necessary permissions](/run/docs/reference/iam/roles#additional-configuration) to deploy to Cloud Run:```\n$DomainProjectNumber = (gcloud projects describe $DomainProjectId --format='value(projectNumber)')\n& gcloud iam service-accounts add-iam-policy-binding register-computer-app@$DomainProjectId.iam.gserviceaccount.com `\n --member \"serviceAccount:$DomainProjectNumber@cloudbuild.gserviceaccount.com\" `\n --role \"roles/iam.serviceAccountUser\"\n& gcloud projects add-iam-policy-binding $DomainProjectId `\n --member \"serviceAccount:$DomainProjectNumber@cloudbuild.gserviceaccount.com\" `\n --role roles/run.admin\n```\n- Use the file `cloudbuild.yaml` as a template to create a custom Cloud Run build config that matches your environment:```\n$Build = (Get-Content cloudbuild.yaml)\n$Build = $Build.Replace('__SERVERLESS_REGION__', \"$ServerlessRegion\")\n$Build = $Build.Replace('__PROJECTS_DN__', \"$ProjectsOrgUnitPath\")\n$Build = $Build.Replace('__AD_DOMAIN__', \"$AdDomain\")\n$Build = $Build.Replace('__AD_NETBIOS_DOMAIN__', \"$AdNetbiosDomain\")\n$Build = $Build.Replace('__SERVICE_ACCOUNT_EMAIL__', \"register-computer-app@$DomainProjectId.iam.gserviceaccount.com\")\n$Build | Set-Content .\\cloudbuild.hydrated.yaml\n``` **Note:** The app provides additional configurable settings, such as using LDAPS instead of LDAP. For more information, see the app's [README.md](https://github.com/GoogleCloudPlatform/gce-automated-ad-join/blob/master/ad-joining/README.md) file. To apply additional configurations, edit the `cloudbuild.yaml` file and add the required environment variables to the `cloud-sdk` step arguments.\n- Build the app and deploy it to Cloud Run:```\n& gcloud builds submit . `\n --config cloudbuild.hydrated.yaml `\n --substitutions _IMAGE_TAG=$(git rev-parse --short HEAD)\n```The deployment can take a couple of minutes to complete. **Note:** If you keep the file `cloudbuild.hydrated.yaml` , you can later redeploy the app by re-running the preceding command.\n- Determine the URL of the Cloud Run app:```\n$RegisterUrl = (gcloud run services describe register-computer `\n --platform managed `\n --region $ServerlessRegion `\n --format=value`(status.url`))\nWrite-Host $RegisterUrl\n```Note the URL. You will need it whenever you create a VM instance that should be joined to Active Directory.\n- Invoke the Cloud Run app to verify that the deployment worked:```\nInvoke-RestMethod $RegisterUrl\n```A PowerShell script displays. The VM runs this script during the specialize phase that joins it to the domain.\n## Enabling a project for automatic domain joiningThe `register-computer` app does not allow VM instances to join an Active Directory domain unless the VM's project is enabled for automatic domain joining. This security measure helps prevent VMs that are connected to unauthorized projects from accessing your domain.\n **Note:** If you deployed Active Directory into a Shared VPC, we recommend that you [create a project](/resource-manager/docs/creating-managing-projects) for testing purposes and [attach the project to the Shared VPC](/vpc/docs/provisioning-shared-vpc#create-shared) . Deploying Serverless VPC Access creates a subnet in your VPC. You do not need to share this subnet when you attach service projects to the VPC host project.\nTo enable a project for automatic domain joining, you must do the following:- Create an OU in Active Directory whose name matches your Google Cloud project ID.\n- Grant the`register-computer`app access to the Google Cloud project.\nFirst, create the OU:- Using an RDP client, log in to a machine that has administrative access to your Active Directory domain.\n- In the Active Directory Users and Computers MMC snap-in, go to the`Projects`OU.\n- Right-click the OU and select **New** > **Organizational Unit** .\n- In the **New Object** dialog, enter the ID for the Google Cloud project to deploy your VMs in.\n- Click **OK** .\nNext, grant the `register-computer` app access to the Google Cloud project:- In Cloud Shell, launch PowerShell:```\npwsh\n```\n- Initialize the following variables:```\n$ProjectId = \"project-id\"\n$DomainProjectId = \"domain-project-id\"\n```Replace- ``with the ID of the Google Cloud project to deploy your VMs in\n- ``with the ID of your domain project\n- Grant the `register-computer-app` service account the `Compute Viewer` role on the project:```\n& gcloud projects add-iam-policy-binding $ProjectId `\n --member \"serviceAccount:register-computer-app@$DomainProjectId.iam.gserviceaccount.com\" `\n --role \"roles/compute.viewer\"\n```\nYour project is now ready to support automatic domain joining.## Testing domain joiningYou can now verify that the setup is working correctly by:- Creating a single VM instance that automatically joins the Active Directory domain\n- Creating a managed instance group of VM instances that automatically join the Active Directory domain\n### Create and join a single VM instanceCreate a VM instance that automatically joins the Active Directory domain:- Return to the PowerShell session in Cloud Shell and initialize the following variables:```\n$Region = \"vpc-region-to-deploy-vm\"\n$Zone = \"zone-to-deploy-vm\"\n$Subnet = \"vpc-subnet-to-deploy-vm\"\n$ServerlessRegion = \"serverless-region\"\n```Replace the following:- ``: The region to deploy the VM instance in.\n- ``: The subnet to deploy the VM instance in.\n- ``: The zone to deploy the VM instance in.\n- ``: The region you deployed the Cloud Run app in.\n- Set the default project and zone:```\n& gcloud config set project $ProjectId\n& gcloud config set compute/zone $Zone\n```\n- Lookup the URL of the Cloud Run app again:```\n$RegisterUrl = (gcloud run services describe register-computer `\n --platform managed `\n --region $ServerlessRegion `\n --format value`(status.url`) `\n --project $DomainProjectId)\n```\n- Create an instance by passing the specialize scriptlet that causes the VM to join the domain:\n```\n$VpchostProjectId = (gcloud compute shared-vpc get-host-project $ProjectId --format=value`(name`))\n& gcloud compute instances create join-01 `\n --image-family windows-2019-core `\n --image-project windows-cloud `\n --machine-type n1-standard-2 `\n --no-address `\n --subnet projects/$VpchostProjectId/regions/$Region/subnetworks/$Subnet `\n --metadata \"sysprep-specialize-script-ps1=iex((New-Object System.Net.WebClient).DownloadString('$RegisterUrl'))\"\n```\n```\n& gcloud compute instances create join-01 `\n --image-family=windows-2019-core `\n --image-project=windows-cloud `\n --machine-type=n1-standard-2 `\n --no-address `\n --subnet $Subnet `\n --metadata \"sysprep-specialize-script-ps1=iex((New-Object System.Net.WebClient).DownloadString('$RegisterUrl'))\"\n```\nIf you want to use a custom hostname, add a `--hostname` parameter to the command.If you use a Windows Server version prior to Windows Server 2019, [TLS 1.2 might be disabled by default](https://docs.microsoft.com/en-us/dotnet/framework/network-programming/tls#support-for-tls-12) , which can cause the specialize scriptlet to fail. To enable TLS 1.2, use the following scriptlet instead:```\n[Net.ServicePointManager]::SecurityProtocol=[Net.SecurityProtocolType]::Tls12;iex((New-Object System.Net.WebClient).DownloadString('$RegisterUrl'))\n``` **Note:** NetBIOS only supports computer names of [up to 15 characters](https://support.microsoft.com/en-gb/help/909264/naming-conventions-in-active-directory-for-computers-domains-sites-and) . If the hostname of a VM instance exceeds this maximum length, the specialize scriptlet automatically changes the computer name to a name that is unique and has less than 15 characters. When you create additional VM instances, make sure to keep the instance name below this character limit; otherwise, joining a VM instance to your domain is likely to fail.\n- Monitor the boot process:```\n& gcloud compute instances tail-serial-port-output join-01\n```After about one minute, the machine is joined to your Active Directory domain. The output is similar to the following:```\nDomain   : corp.example.com\nDomainController : dc-01.corp.example.com.\nOrgUnitPath  : OU=test-project-123,OU=Projects,DC=corp,DC=example,DC=com\nWARNING: The changes will take effect after you restart the computer\nComputer successfully joined to domain\n```To stop observing the boot process, press `CTRL+C` .\n- Using an RDP client, log in to a machine that has administrative access to your Active Directory domain.\n- Open the Active Directory Users and Computers MMC snap-in.\n- In the menu, ensure that **View** > **Advanced Features** is enabled.\n- Go to the OU named after the Google Cloud project ID that you created a VM instance in.\n- Double-click the`join-01`account.\n- In the **Properties** dialog, click the **Attribute Editor** tab.The computer account is annotated with additional LDAP attributes. These attributes let you track the association between the computer object and the Compute Engine instance.Verify that the list contains the following LDAP attributes and values.| LDAP attribute    | Value      |\n|:------------------------------|:-----------------------------|\n| msDS-cloudExtensionAttribute1 | Google Cloud project ID  |\n| msDS-cloudExtensionAttribute2 | Compute Engine zone   |\n| msDS-cloudExtensionAttribute3 | Compute Engine instance name |The `msDS-cloudExtensionAttribute` attributes are [general-purpose attributes](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-ada2/cc15b421-7a75-44b1-8fcc-eab98ee41d7a) and are not used by Active Directory itself.\nIf your VM instance failed to join the domain, check the log of the `register-computer` app:- In the Google Cloud console, go to Cloud Run. [Go to Cloud Run](https://console.cloud.google.com/run) \n- Click the `register-computer` app.\n- In the menu, click **Logs** .\nAfter you verify that the VM instance is joined to the Active Directory domain, you delete the instance.- Delete the instance:```\n& gcloud compute instances delete join-01 --quiet\n```\n### Create and join a managed instance groupYou can also verify that instances from a MIG can automatically join your domain.- Create an instance template by passing the specialize script that causes the VM to join the domain:\n```\n$VpchostProjectId = (gcloud compute shared-vpc get-host-project $ProjectId --format=value`(name`))\n& gcloud compute instance-templates create ad-2019core-n1-std-2 `\n --image-family windows-2019-core `\n --image-project windows-cloud `\n --no-address `\n --machine-type n1-standard-2 `\n --subnet projects/$VpchostProjectId/regions/$Region/subnetworks/$Subnet `\n --metadata \"sysprep-specialize-script-ps1=iex((New-Object System.Net.WebClient).DownloadString('$RegisterUrl'))\"\n```\n```\n& gcloud compute instance-templates create ad-2019core-n1-std-2 `\n --image-family windows-2019-core `\n --image-project windows-cloud `\n --no-address `\n --machine-type n1-standard-2 `\n --subnet projects/$ProjectId/regions/$Region/subnetworks/$Subnet `\n --metadata \"sysprep-specialize-script-ps1=iex((New-Object System.Net.WebClient).DownloadString('$RegisterUrl'))\"\n```\n- Create a managed instance group that uses the instance template:```\n& gcloud compute instance-groups managed create group-01 `\n --template ad-2019core-n1-std-2 `\n --size=3\n```\nWait a few minutes, and then use the Active Directory Users and Computers MMC snap-in to verify that four new objects have been created in Active Directory:- 3 computer accounts corresponding to the 3 VM instances of the managed instance group.\n- 1 group named`group-01`that contains the 3 computer accounts. If you plan to use [group managed service accounts](https://docs.microsoft.com/en-us/windows-server/security/group-managed-service-accounts/group-managed-service-accounts-overview) (gMSA), you can use this group to grant access to the gMSA.\n **Note:** NetBIOS only supports computer names of [up to 15 characters](https://support.microsoft.com/en-gb/help/909264/naming-conventions-in-active-directory-for-computers-domains-sites-and) . If the hostname of a VM instance exceeds this maximum length, the specialize scriptlet automatically changes the computer name to a name that is unique and has less than 15 characters. Make sure to use short names for managed instance groups so that the names of VM instances do not exceed 15 characters.\nAfter you verify that the VM instances from your MIGs can join your Active Directory domain, you can delete the managed group and instance template by following these steps:- In Cloud Shell, delete the instance group:```\n& gcloud compute instance-groups managed delete group-01 --quiet\n```\n- Delete the instance template:```\n& gcloud compute instance-templates delete ad-2019core-n1-std-2 --quiet\n```\n## Scheduling cleanup of stale computer accountsAutomating the process of joining computers to the domain reduces the effort to set up new servers and enables you to use domain-joined servers in managed instance groups. Over time, however, stale computer accounts can accumulate in the domain.\nTo prevent this accumulation, we recommend that you set up the `register-computer` app to periodically scan your Active Directory domain to find and automatically remove stale accounts.\nThe `register-computer` app can use the `msDS-cloudExtensionAttribute` attributes of computer accounts to identify which computer accounts are stale. These attributes contain the project, zone, and instance name of the corresponding VM instance in Compute Engine. For each computer account, the app can check if the corresponding VM instance is still available. If it is not, then the computer account is considered stale and removed.\nTo trigger a computer account cleanup, you invoke the `/cleanup` endpoint of the Cloud Run app. To prevent unauthorized users from triggering a cleanup, this request must be authenticated by using the `register-computer-app` service account.\n### Configure Cloud SchedulerThe following steps show you how to set up [Cloud Scheduler](/scheduler) in conjunction with [Pub/Sub](/pubsub) to automatically trigger a cleanup once every 24 hours:- In Cloud Shell, enable the Cloud Scheduler API in your domain project:```\n& gcloud services enable cloudscheduler.googleapis.com\n```\n- Set `AppEngineLocation` to a valid [App Engine location](/appengine/docs/locations) in which to deploy Cloud Scheduler:```\n$AppEngineLocation = \"location\"\n```Replace `` with the App Engine region that you selected for your VPC resources, for example, `us-central` . If that region is not available as an App Engine location, choose a location that is geographically close to you. For more information, see [Regions and zones](/compute/docs/regions-zones) .\n- Initialize App Engine:```\n& gcloud app create --region $AppEngineLocation --project $DomainProjectId\n```\n- Create a Cloud Scheduler job:```\n& gcloud scheduler jobs create http cleanup-computer-accounts `\n --schedule \"every 24 hours\" `\n --uri \"$RegisterUrl/cleanup\" `\n --oidc-service-account-email register-computer-app@$DomainProjectId.iam.gserviceaccount.com `\n --oidc-token-audience \"$RegisterUrl/\" `\n --project $DomainProjectId\n```This job calls the `register-computer` app once every 24 hours and uses the `register-computer-app` service account for authentication.\n### Trigger a cleanupTo verify your configuration for cleaning up stale computer accounts, you can trigger the Cloud Scheduler job manually.- In the Google Cloud console, go to Cloud Scheduler. [Go to Cloud Scheduler](https://console.cloud.google.com/cloudscheduler) \n- For the `cleanup-computer-accounts` job that you created, click **Run Now** .After a few seconds, the **Result** column displays **Success** , indicating that the cleanup completed successfully. If the result column does not update automatically within a few seconds, click the **Refresh** button.\nFor more details about which accounts were cleaned up, check the logs of the `register-computer` app.- In the Google Cloud console, go to Cloud Run. [Go to Cloud Run](https://console.cloud.google.com/run) \n- Click the `register-computer` app.\n- In the menu, click **Logs** .Log entries indicate that the computer accounts of the VM instances you used to test domain joining were identified as stale and removed.\n## Clean upIf you are using this tutorial as a baseline for other tutorials, read the other tutorials about when to run the cleanup steps in this tutorial.\nIf you do not want to keep the Google Cloud setup used for this tutorial, you can revert this setup by doing the following:- In Cloud Shell, delete the Cloud Scheduler job:```\n& gcloud scheduler jobs delete cleanup-computer-accounts `\n --project $DomainProjectId\n```\n- Delete the Cloud Run app:```\n& gcloud run services delete register-computer `\n --platform managed `\n --project $DomainProjectId `\n --region $ServerlessRegion\n```\n- Delete the Secret Manager secret:```\ngcloud secrets delete ad-password --project $DomainProjectId\n```\n- Delete the firewall rule for LDAP and Kerberos access:```\ngcloud compute firewall-rules delete allow-adkrb-from-serverless-to-dc --project=vpc-project-id\n```Replace `` with the ID of the project the VPC is defined in. If you use a [Shared VPC](/vpc/docs/shared-vpc) , use the VPC host project; otherwise, use the ID of the domain project.\n- Delete Serverless VPC Access:```\ngcloud compute networks vpc-access connectors delete serverless-connector --region $ServerlessRegion --quiet\n```\n### Revert Active Directory changes\n- Using an RDP client, log in to a machine that has administrative access to your Active Directory domain.\n- In the Active Directory Users and Computers MMC snap-in, go to the`Projects`OU.\n- Delete the`register-computer`Active Directory user account.\n- Delete the OU that you created for testing automated domain joining.\n## What's next\n- To join Windows VMs to a Managed Microsoft AD domain using automated domain join, see [Join a Windows VM automatically to a domain](/managed-microsoft-ad/docs/seamless-domain-join-gce) .\n- Review our [best practices for deploying an Active Directory resource forest on Google Cloud](/compute/docs/instances/windows/best-practices) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Docs"}