{"title": "Docs - Patterns and practices for identity and access governance on Google Cloud", "url": "https://cloud.google.com/architecture/patterns-practices-identity-access-governance-google-cloud", "abstract": "# Docs - Patterns and practices for identity and access governance on Google Cloud\nLast reviewed 2022-09-27 UTC\nThere are a number of Google Cloud products and services that you can use to help your organization develop an approach for identity governance and access management for applications and workloads running on Google Cloud. This document is intended for security administrators, operations managers, and enterprise architects who work in customer teams and who want to learn about these tools and controls and how to use them.\nThis document assumes that you have the following:\n- A Google Cloud project.\n- A user account with administrative access to manage Cloud Identity groups and users. You need this access to run the example procedures in this document.\n- A user account without administrative access to manage Cloud Identity groups and users. You need this account to test some of the controls that you set in the example procedures in this document.If you don't already have access to a Google Cloud project and administrative access to Cloud Identity, see [Creating a Google Cloud project](/resource-manager/docs/creating-managing-projects) and [Setting up Cloud Identity](/identity/docs/set-up-cloud-identity-admin) .", "content": "## Discovering unused accounts and permissions\nIt's a best practice to remove user accounts when they are no longer needed because unused (orphaned) user accounts and service accounts can pose a security risk. You can use Google Cloud [Policy Intelligence](/policy-intelligence) in the following ways to help your enterprise understand and reduce risk:\n- Helping administrators in your enterprise discover accounts and permissions that aren't being used anymore, for reasons like an employee has left the company or changed roles.\n- Helping to identify service accounts that have been abandoned after the completion of tasks.\n### View and apply IAM recommendations\nThe [IAM recommender](/iam/docs/recommender-overview) is part of the Policy Intelligence suite of tools and services. It uses machine learning (ML) to make smart access control recommendations to help you identify accounts that no longer need access to Google Cloud resources. You can then review the recommendations and decide whether to apply them. IAM recommender also helps you to maintain the principle of least privilege across all the members in your organization. In addition to providing recommendations, the [Recommender](/recommender/docs/overview) service uses ML to provide detailed [insights](/recommender/docs/insights/using-insights) . Insights are findings that highlight notable patterns in resource usage. For example, you can collect additional information about permission usage in your project, identify permissions that aren't being used and are no longer needed, and [identify unused service accounts](/iam/docs/service-account-overview#identify-unused) .\nIt's possible to view and apply IAM recommendations in the Google Cloud console at an enterprise-level scale. In the following example procedure, you use BigQuery to review and rightsize access permissions in your organization. To set up the BigQuery integration, you configure an export of recommendations made by IAM recommender to a BigQuery dataset. This data can then be queried and reviewed using visualization tools such as [Looker Studio](https://lookerstudio.google.com/overview) and [Looker](/looker) .\n### Implementation\n- In the Google Cloud console, on the project selector page, [select or create a Google Cloud project](https://console.cloud.google.com/projectselector2/home/dashboard?_ga=2.171331176.996626712.1613379397-1723329357.1612296386) .\n- BigQuery is automatically enabled in new projects. To activate BigQuery in a preexisting project, enable the BigQuery API. [ Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=bigquery) \n- Configure the BigQuery Data Transfer Service to pull data from IAM recommender. To learn more, see [Exporting recommendations to BigQuery](/recommender/docs/bq-export/export-recommendations-to-bq) .\n- Go to the BigQuery page. [ Go to BigQuery](https://console.cloud.google.com/bigquery) \n- Copy and paste the following query into the **Editor** field:```\nSELECT\u00a0 \u00a0recommendation_detailsFROM PROJECT_ID.DATASET.TABLE_NAMEWHERE recommender = \"google.iam.policy.Recommender\"AND recommender_subtype = \"REMOVE_ROLE\"\n```Replace the following:- ``: the Google Cloud project ID  that you are using to execute this example\n- ``: the name of the dataset that you selected when setting up the BigQuery Data Transfer Service job.\n- ``: the name of the table created by the BigQuery Data Transfer Service job.\nYou run this query to identify the `recommender_subtype` subtype of IAM Recommender `REMOVE_ROLE` recommendations.\n- Click **Run** . You use the query result to identify unused roles and rightsize IAM role bindings.You can save query results to Sheets. To learn more, see [Saving query results to Sheets](/bigquery/docs/writing-results#saving-query-results-to-sheets) .## Giving users the ability to request access to resources\nEnterprise administrators need the ability to let users request access to resources. Typically, these requests go through an approval process where a designated approver or a group of approvers must approve the request before access is given. [Google Groups](/iam/docs/overview#google_group) lets you apply an access policy to a collection of users, enabling you to follow the policy management best practice of giving access to resources based on group membership. This approach keeps policies relevant as join, move, and leave events occur through group membership changes.\nYou can give and change access controls for a whole group with Google Groups, instead of giving or changing access controls one at a time for individual users or service accounts. You can also easily add members to and remove members from a Google group instead of updating an IAM policy to add or remove users.\n### Set up resource access using Google Groups\nYou can create and manage a Google group using [Cloud Identity](/identity) . Cloud Identity is an identity as a service (IDaaS) solution that manages users and groups. You can also configure Cloud Identity to federate identities between Google and other identity providers, such as [Active Directory](/architecture/identity/federating-gcp-with-active-directory-introduction) and [Azure Active Directory](/architecture/identity/federating-gcp-with-azure-active-directory) . [Google Groups](/iam/docs/overview#google_group) also lets a user request membership to a group. This request is routed to group administrators who can then approve or decline that request. To learn more, see [Create a group and choose group settings](https://support.google.com/groups/answer/2464926) .\nWhen you create and manage a Google group to give access to Google Cloud resources, make sure to consider the implications of the settings that you select. Although we recommend that you minimize the number of users who can manage the group, we recommend that you set up more than one group administrator to always have access to the group. We also recommend that you restrict group membership to users in your organization.\n### Implementation\nIn this example procedure, you create a Google group and give the viewer group access to a sample Google Cloud project. Members that you add to this group (or that you give access to upon request) are able to view the sample Google Cloud project.\n### Create a sample Google group\nThe following steps assume that you have Cloud Identity configured. To learn more, see [Setting up Cloud Identity](/identity/docs/set-up-cloud-identity-admin) . Make sure that you have the permissions that you need to [manage](/iam/docs/groups-in-cloud-console) groups.\n- In the Google Cloud console, go to the **Groups** page. [ Go to Groups](https://console.cloud.google.com/iam-admin/groups) \n- Click **Create** .\n- Fill in the details for your group.To add members to the group, click **Add member** , then enter the email address for the member and choose their [Google Groups role](https://support.google.com/groups/answer/2464975) .When you're finished, click **Submit** to create the group.Group settings can only be managed within Google Groups. Click [Manage this group in Google Groups](https://groups.google.com/a/google.com/forum/#!forum/test2-payal) to configure group settings. To select who can join the group, in the **Who can join the group** menu, select **Organization users only** .\n- Click **Create Group** .\n### Grant the group access to a Google Cloud project\n- In the Google Cloud console, on the project selector page, [select or create a Google Cloud project](https://console.cloud.google.com/projectselector2/home/dashboard?_ga=2.171331176.996626712.1613379397-1723329357.1612296386) .\n- Open Cloud Shell: [ Go to Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Run the following command to give the group viewer access to the project:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\u00a0 \u00a0 --member=group:GROUP_EMAIL --role=roles/viewer\n```Replace the following:- ``: the email address of the group you created\n- ``: the ID of your Google Cloud project\n### Test the user access request process for users in your organization\nIn the following procedure, you use a test user account to demonstrate the steps that users in your organization use to request access to a Google group.\n- Sign in to [Google Groups](http://groups.google.com) as a non-administrative user. The group that you created in [Create a sample Google group](#create_a_sample_google_group) appears under **All Groups** . If the group doesn't appear, use search to find it.\n- To request access to the group, click **Ask to join group** .Once access is given, the non-administrative user account that you used to make the request should be able to view the Google Cloud `` project that the group has Viewer access to.## Giving time-bound access to Google Cloud resources\nThere might be situations when users in your enterprise require temporary, short-term access to Google Cloud resources. Short-term access is useful when developers need temporary access to Google Cloud resources to perform certain tasks. Short-term access also offers the following advantages:\n- Reducing administrative overhead.\n- Ensuring that the principle of least privilege and timely access is followed.\nBeing able to give this type of access is useful for administrators when users need access to resources in emergency situations that require quick and direct intervention. However, it can be difficult to manually track short-term access permissions and ensure that they are removed in a timely manner. Identity and Access Management (IAM) conditional access policies let you set temporary (expiring) access to Google Cloud resources using conditional role bindings, helping to reduce this overhead for administrators.\n### Use conditional role bindings and group membership expiration\nYou can add conditional role bindings to new or existing IAM policies to further control access to Google Cloud resources. Some examples of when you might use conditional role bindings to give a user or a group temporary access are as follows:\n- Access to a project that expires after a specified time.\n- Access to a project that recurs every month or quarter.\n- Access to Compute Engine instances to administer tasks such as stopping instances.\nWhen you use Google Groups to give users access to Google Cloud resources, you can use the [group membership expiration feature](/identity/docs/how-to/manage-expirations) to set expirations for group membership using the [Cloud Identity Groups API.](/identity/docs/how-to/setup) When the time that you specify has passed, users are removed from the group automatically.\n### Implementation\nYou can use a conditional role binding to give developers temporary access to administer a specific Compute Engine instance. In this example, the role binding is set to expire on December 31, 2021.\n- In Cloud Shell, set the following variables:```\nexport INSTANCE=create example-instance-1export ZONE=us-west1-bexport USER=USER_ID_TO_GIVE_TEMPORARY_ACCESS_TO\n```Replace `` with the username of the user in your organization that you want to give temporary access to.\n- Create a sample Compute Engine instance:```\ngcloud compute instances create $INSTANCE \\\u00a0 \u00a0 --zone $ZONE \\\u00a0 \u00a0 --machine-type g1-small\n```You give temporary access to this instance to a user in your organization in the following steps.\n- Give the user that you selected temporary access:```\ngcloud compute instances add-iam-policy-binding $INSTANCE \\\u00a0 \u00a0 --zone=$ZONE \\\u00a0 \u00a0 --member=\"user:$USER\" \\\u00a0 \u00a0 --role='roles/compute.instanceAdmin.v1' \\\u00a0 \u00a0 --condition='expression=request.time < timestamp(\"2022-01-01T00:00:00Z\"),title=expires_end_of_2021,description=Expires at midnight on 2021-12-31'\n```\n- Retain the Compute Engine instance that you create. You use this instance later in this document in [Managing privileged access](#managing_privileged_access) .Alternatively, you can delete the `example-instance-1` instance by running the following command:```\ngcloud compute instances delete $INSTANCE\n```## Logging lifecycle events related to identity\nIf you need to review IAM lifecycle events such as policy changes, service account creation, and service account assignments for auditing, [Cloud Audit Logs](/logging/docs/audit) can help. Administrators can use Cloud Audit Logs to look back at historical data for forensics and analysis. Analyzing audit logs can help you to understand access patterns and access anomalies. Audit log analysis can also be important for the following scenarios:\n- Analyzing permissions and access to resources during a data breach.\n- Analyzing production issues caused by a change in IAM policy, particularly if you want to verify which user or what process made the change.\nCloud Audit Logs stores information about the actions that users take, where the activity occurred, and when. Audit logs are classified as follows:\n- [Admin Activity](/logging/docs/audit#admin-activity) audit logs\n- [Data Access](/logging/docs/audit#data-access) audit logs\n- [System Event](/logging/docs/audit#system-event) audit logs\n- [Policy Denied ](/logging/docs/audit#policy_denied) audit logs\nWe recommend that you use the following audit logs for identity and access related administrative logging:\n- Admin Activity audit logs\n- Policy Denied audit logs\nAdmin Activity audit logs store changes made to Google Cloud resources such as projects, Compute Engine instances, and service accounts. The following are examples of events that Admin Activity audit logs store:\n- The creation of a service account.\n- A change in an IAM policy.\n- The download of a service account key.\nPolicy Denied audit logs record when a user or a service account is denied access to a Google Cloud service due to a security policy violation.\n### Set up Cloud Audit Logs for identity lifecycle events\nYou can view audit logs in the Google Cloud console or query the logs using the [Cloud Logging API](/logging/docs/reference/v2/rest/v2/entries/list) or the [command-line interface](/logging/docs/api/gcloud-logging#v2_api_commands) .\nAll audit logs have a [retention period](/logging/docs/audit#audit_log_retention) . If your enterprise needs to store audit logs for longer than the default retention period, you need to export the logs to BigQuery or other sink destinations by creating a [log sink](/logging/docs/audit#exporting_audit_logs) . Exporting logs to BigQuery lets you view a subset of data columns and selected data (over time or other dimensions), and do [aggregate analysis](/architecture/exporting-stackdriver-logging-for-security-and-access-analytics) .\n### Implementation\nThe following example procedure shows you how to query Google Cloud project logs to check if any of the following events have occurred:\n- There have been IAM policy changes.\n- New service accounts have been created.\n- New service account keys have been generated.\n### View changes to IAM policies\n- In the Google Cloud console, go to the **Logging** > **Logs Explorer** page.\n- On the **Logs Explorer** page, select an existing Google Cloud project.\n- Paste the following query into Query Builder:```\nlogName=\"projects/<PROJECT>/logs/cloudaudit.googleapis.com%2Factivity\" AND(resource.type=\"project\" OR resource.type=\"service_account\") ANDresource.labels.project_id=\"<PROJECT>\" AND(protoPayload.methodName=\"SetIamPolicy\" ORprotoPayload.methodName=\"google.iam.admin.v1.CreateServiceAccount\"ORprotoPayload.methodName=\"google.iam.admin.v1.CreateServiceAccountKey\")\n```Replace `` with your Google Cloud project ID.\n- Click **Run query** .\n### View changes to group membership\nChanges to Google group membership are tracked in Activity logs. To learn how to access these logs, see [Viewing group membership change logs](/iam/docs/groups-in-cloud-console#view-logs) .\n## Access certification\nThe [Policy Analyzer](/asset-inventory/docs/analyzing-iam-policy) can be used to help your enterprise verify that users have the appropriate access rights to Google Cloud resources on a set or periodic basis. This verification is important for compliance and audit purposes. It's also useful for security personnel and auditors to review which users have access to which resource and in what capacity. The Policy Analyzer helps you to identify which identities or principals (users, service accounts, groups, and domains) have access to which Google Cloud resources across the resource hierarchy in your organization. It also helps to identify what the type of access is. Some example questions that the Policy Analyzer can help you answer are as follows:\n- Which users can access a service account.\n- Which users can read data in a BigQuery dataset that contains personally identifiable information (PII).\nPolicy Analyzer can be used with the following methods:\n- Using the Google Cloud console.\n- Using APIs.\n- [Exporting Identity and Access Management (IAM) policies data](/asset-inventory/docs/analyzing-iam-policy-longrunning-bigquery) to BigQuery for asynchronous analysis.\n### Use Policy Analyzer to check user access\nThe following example queries show the type insights that you can gain into user access with the Policy Analyzer:\n- What roles or permissions a principal (user, service account, group, and domain) has; for example, checking what access a former employee has to your production project.\n- Which resources a user has access to; for example, the access a former employee has to your production project resources.\n- Which principals have a certain level of access to a resource; for example, which buckets a specific user can delete in a project.\n### Implementation\nIn the following example procedure, you use the Policy Analyzer to verify the permissions that a user has.\n- In Cloud Shell, enable the Cloud Asset API for the project: [ Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=cloudasset.googleapis.com) \n- Enter the following command to find out which resources a user can access:```\ngcloud asset analyze-iam-policy --organization=\"YOUR_ORG_ID\" \\\u00a0 \u00a0 --identity=\"user:USERNAME_TO_CERTIFY\"\n```Make the following replacements:- ``: your Google Cloud Organization ID\n- ``: the username of the user whose Google Cloud access permissions you want to verify.\n- Extract the IAM policy data to BigQuery. To learn more, see [Writing policy analysis to BigQuery](/asset-inventory/docs/analyzing-iam-policy-longrunning-bigquery) .## Managing privileged access\nSome users in your organization might need privileged access to certain Google Cloud resources to perform administrative tasks. For example, these users might need to manage specific Google Cloud projects, set up project billing and budgets, or administer Compute Engine instances.\nInstead of permanently granting users privileged access to resources, you can [let users request just-in-time privileged access](/architecture/manage-just-in-time-privileged-access-to-project) . Using just-in-time privileged access management can help you do the following:\n- Reduce the risk of someone accidentally modifying or deleting resources. For example, when users have privileged access only when it's needed, it helps prevent them from running scripts at other times that unintentionally affect resources that they shouldn't be able to change.\n- Create an audit trail that indicates why privileges were activated.\n- Conduct audits and reviews for analyzing past activity.\nAlternatively, you can grant privileged access to a service account and allow users to [impersonate the service account](/iam/docs/service-account-impersonation) .\n### Give privileged access to users\nBroadly, management of privileged access to enterprise users in Google Cloud can be summarized as follows:\n- Giving users in the enterprise the ability to request privileged access.\n- Reviewing [Cloud Audit Logs](/logging/docs/audit) to analyze privileged access requests and access patterns. Administrators can review privileged access patterns and detect anomalies using these logs. We recommend that enterprises consider exporting these logs to persist as necessary and appropriate for audit purposes.\n- Ensuring that privileged access either expires automatically or is reviewed periodically.\n[Enable 2-step verification](https://support.google.com/cloudidentity/answer/9176657) (also called multi-factor authentication) for all users that have privileged access to resources. You can also create fine-grained, attribute-based access control by using [Access Context Manager](/access-context-manager/docs/overview) , which enforces an extra layer of security when privileged access is used. For example, you can have an access level that specifies that users must be on the corporate network when using privileged access to resources.\n### Implementation\nIn this example procedure, you (as an administrator) create a Google group for privileged access to Compute Engine instances. You create a service account in Google Cloud that is given access to administer Compute Engine instances. You associate the group with the service account so that group members are able to impersonate the service account for the period that they are given membership to the privileged group.\n### Create a Google group for privileged access\n- As a Google Cloud administrator, select or create a Google Cloud project. [ Go to Manage Resources](https://console.cloud.google.com/cloud-resource-manager) \n- Enable billing for your project. [Enable Billing](/billing/docs/how-to/modify-project) \n- Follow the steps in [Giving users the ability to request access to resources](#giving_users_the_ability_to_request_access_to_resources) to create a new Google group.Name the group as follows: `elevated-compute-access`\n### Create a Google Cloud service account\n- In Cloud Shell, enable the IAM Service Account Credentials APIs for the project that you created in [Create a Google group for privileged access](/architecture/patterns-practices-identity-access-governance-google-cloud#create-a-google-group-for-privileged-access) . [ Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=iamcredentials.googleapis.com) \n- Set the following variables:```\nexport PROJECT_ID=$DEVSHELL_PROJECT_IDexport PRIV_SERVICE_ACCOUNT_NAME=elevated-compute-accessexport DELEGATE_GROUP=GROUP_EMAIL_ADDRESS\n```Replace `` with the full name of the Google group that you created.\n- Create the service account:```\ngcloud IAMservice-accounts create $PRIV_SERVICE_ACCOUNT_NAME \\\u00a0 \u00a0 --description=\"Elevated compute access\" \\\u00a0 \u00a0 --display-name=\"Elevated compute access\"\n```\n- Give the service account the compute administrator role:```\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\u00a0 \u00a0 --member=\"serviceAccount:$PRIV_SERVICE_ACCOUNT_NAME@$PROJECT_ID.iam.gserviceaccount.com\" \\\u00a0 \u00a0 --role=\"roles/compute.admin\"\n```\n- Give the Google group you created Service Usage consumer access for your project:```\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\u00a0 \u00a0 --member=\"group:$DELEGATE_GROUP\" \\\u00a0 \u00a0 --role=\"roles/serviceusage.serviceUsageConsumer\"\n```This permission lets the Google group members impersonate the service account that you created.\n- Give the Google group the ability to impersonate the service account you created:```\ngcloud IAMservice-accounts add-iam-policy-binding$PRIV_SERVICE_ACCOUNT_NAME@$PROJECT_ID.iam.gserviceaccount.com --member=\"group:$DELEGATE_GROUP\" --role=\"roles/iam.serviceAccountTokenCreator\"\n```\n- Skip this step if you created and retained a sample Compute Engine instance for the procedure in [Giving time-bound access to Google Cloud resources](#giving-time-bound-access-to-google-cloud-resources) . You can use the sample instance to run the steps in this example.Alternatively, use the following command to create a sample Compute Engine instance:```\ngcloud compute instances create example-instance-1 \\\u00a0 \u00a0 --zone us-west1-b \\\u00a0 \u00a0 --machine-type g1-small\n```You use the instances in this example to validate that users who are given membership to the privileged group can access the instance.\n### Enable audit logs\nAdministrators in your enterprise can enable Cloud Audit Logs to make sure that privileged access is logged and available for review and analysis. The procedure in this section shows you how to enable audit logging.\n- Get the current IAM policies for the project:```\ngcloud projects get-iam-policy $PROJECT_ID > /tmp/policy.yaml\n```\n- Modify the policy file to enable data access logs for Compute Engine API:```\ncat <<EOF >> /tmp/policy.yamlauditConfigs:- auditLogConfigs:\u00a0- logType: ADMIN_READ\u00a0- logType: DATA_READ\u00a0- logType: DATA_WRITE\u00a0service: compute.googleapis.comEOF\n```\n- Set the new policy:```\ngcloud projects set-iam-policy $PROJECT_ID /tmp/policy.yaml\n```\n### Test impersonation with the non-administrative user account\nYou can use the non-administrative user account to test the setup by requesting membership to the group and impersonating the service account once membership is given.\nThe procedure in this section shows you how enterprise users can request privileged access to Google Cloud resources. In this example procedure, the Google Cloud resources are the Compute Engine instances for a Google Cloud project. To demonstrate how users in your organization can impersonate a service account once they are given membership to the group, you request membership to relevant Google groups.\n- [Sign in](http://groups.google.com) to Google groups with the non-administrative user account and request membership to the`elevated-compute-access`group.\n- Use the same account to sign in to Google Cloud. You should have access to the group once an administrator approves the request. In this example procedure, it is assumed that your Group Membership request is approved. **Note:** Group administrators should give expiring membership to users as appropriate to specific business requirements in your enterprise. They must follow the guidance outlined in the [Cloud Identity API documentation](/identity/docs/reference/rest/v1beta1/groups.memberships#ExpiryDetail) . In this document, it's assumed that the user account that you use to set up the Google group in [Create a Google group for privileged access](/architecture/patterns-practices-identity-access-governance-google-cloud#create-a-google-group-for-privileged-access) is the group administrator.\n- In Cloud Shell, run the following command to set the default project:```\ngcloud config set project PROJECT_ID\n```Replace `` with the project ID that you created earlier in the [Create a Google group for privileged access](#create-a-google-group-for-privileged-access) section.\n- Attempt to list the Compute Engine instances in this project:```\ngcloud compute instances list\n```You see an error message informing you that your Google Cloud user doesn't have the permission to access Compute Engine resources.\n- Run the following command:```\ngcloud compute instances list--impersonate-service-account=elevated-compute-access@$PROJECT_ID.iam.gserviceaccount.com\n```This command lists the Compute Engine instances in the project by impersonating the service account that you gained access to when you were given membership to the `elevated-compute-access` Google group.You see the `example-instance-1` Compute Engine instance that you created with your administrator account.\n### Check audit logs\nAs a Google Cloud administrator, you can access and review the generated audit logs.\n- Sign in to the Google Cloud console with a user account that has administrative privileges to access audit logs.\n- In Cloud Logging, enter the following query to review data access logs:```\nlogName=\"projects/<PROJECT_ID>/logs/cloudaudit.googleapis.com%2Fdata_access\"ANDprotoPayload.authenticationInfo.principalEmail=\"elevated-compute-access@PROJECT_ID.iam.gserviceaccount.com\"\n```Replace `` with your project ID and then run the query.This query shows you which user in the Google group impersonated the service account to access the Compute Engine instance. It also shows you other relevant details such as when the service account was impersonated and the details of the request headers.\n- Review the audit log payload, specifically the `protoPayload.authenticationInfo` object in the payload. The username of the user who impersonated the service account is logged as the value of the `principalEmail` key of the `firstPartyPrincipal` object.\n- As an administrator, you can also review event-threat findings in the Security Command Center dashboard. To learn more about the Security Command Center, see [Using Event Threat Detection](/security-command-center/docs/how-to-use-event-threat-detection) .## What's next\n- Review [best practices for managing identity and access](/architecture/framework/security/identity-access) .\n- Discover how [Policy Intelligence](/policy-intelligence) offers smart access control for your Google Cloud resources.\n- Read about how you can [troubleshoot policy and access problems on Google Cloud](/vpc/docs/troubleshooting-policy-and-access-problems) \n- Read about best practices for [creating and managing Google Cloud service accounts](/iam/docs/understanding-service-accounts#best_practices) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Docs"}