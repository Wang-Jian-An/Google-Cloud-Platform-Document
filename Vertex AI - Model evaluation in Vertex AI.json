{"title": "Vertex AI - Model evaluation in Vertex AI", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Model evaluation in Vertex AI\nThe model evaluation provided by Vertex AI can fit in the typical machine learning workflow in several ways:\n- After you train your model, review model evaluation metrics before you deploy your model. You can compare evaluation metrics across multiple models to help you decide which model you should deploy.\n- After your model is deployed to production, periodically evaluate your model with new incoming data. If the evaluation metrics show that your model performance is degrading, consider re-training your model. This process is called .\nHow you interpret and use those metrics depends on your business need and the problem your model is trained to solve. For example, you might have a lower tolerance for false positives than for false negatives or the other way around. These kinds of questions affect which metrics you would focus on as you [iterateon your model](/vertex-ai/docs/training/evaluating-automl-models#iterate) .\n**Note:** The model evaluation functionality described on this page is separate from the [evaluation metrics](/vertex-ai/docs/training/evaluating-automl-models#evaluation_metrics_returned_by) that are automatically generated during the AutoML training process.\n", "content": "## Features\nTo evaluate a model with Vertex AI, you should have a trained model, a batch prediction output, and a ground truth dataset. The following is a typical model evaluation workflow using Vertex AI:\n- Train a model. You can do this in Vertex AI using AutoML or custom training.\n- Run a batch prediction job on the model to generate prediction results.\n- Prepare the data, which is the \"correctly labeled\" data as determined by humans. The ground truth is usually in the form of the test dataset you used during the model training process.\n- Run an evaluation job on the model, which evaluates the accuracy of the batch prediction results compared to the ground truth data.\n- Analyze the metrics that result from the evaluation job.\n- Iterate on your model to see you if you can improve your model's accuracy. You can run multiple evaluation jobs, and compare the results of multiple jobs across models or model versions.\nYou can run model evaluation in Vertex AI in several ways:\n- Create evaluations through the Vertex AI Model Registry in the Google Cloud console.\n- Use model evaluations from Vertex AI as a [pipeline component](/vertex-ai/docs/pipelines/model-evaluation-component) with Vertex AI Pipelines. You can create pipeline runs and templates that include model evaluations as a part of your automated MLOps workflow.You can run the [model evaluation component by itself](/vertex-ai/docs/pipelines/model-evaluation-component#without-batch) , or with other pipeline components such as the [batch predictioncomponent](/vertex-ai/docs/pipelines/batchprediction-component) .\nVertex AI supports evaluation of the following model types:\nYou can view and download schema files from the following Cloud Storage location:  [gs://google-cloud-aiplatform/schema/modelevaluation/](https://console.cloud.google.com/storage/browser/google-cloud-aiplatform/schema/modelevaluation) \n- **AuPRC** : The [areaunder the precision-recall (PR) curve](https://developers.google.com/machine-learning/glossary#pr-auc-area-under-the-pr-curve) , also referred to as average precision. This value ranges from zero to one, where a higher value indicates a higher-quality model.\n- **Log loss** : The cross-entropy between the model predictions and the target values. This ranges from zero to infinity, where a lower value indicates a higher-quality model.\n- **Confidence threshold** : A confidence score that determines which predictions to return. A model returns predictions that are at this value or higher. A higher confidence threshold increases precision but lowers recall. Vertex AI returns confidence metrics at different threshold values to show how the threshold affects [precision](https://developers.google.com/machine-learning/glossary#precision) and [recall](https://developers.google.com/machine-learning/glossary#recall) .\n- **Recall** : The fraction of predictions with this class that the model correctly predicted. Also called.\n- **Precision** : The fraction of classification predictions produced by the model that were correct.\n- **Confusion matrix** : A [confusionmatrix](https://developers.google.com/machine-learning/glossary#confusion-matrix) shows how often a model correctly predicted a result. For incorrectly predicted results, the matrix shows what the model predicted instead. The confusion matrix helps you understand where your model is \"confusing\" two results.\nYou can view and download schema files from the following Cloud Storage location:  [gs://google-cloud-aiplatform/schema/modelevaluation/](https://console.cloud.google.com/storage/browser/google-cloud-aiplatform/schema/modelevaluation) \n- **AuPRC** : The [areaunder the precision-recall (PR) curve](https://developers.google.com/machine-learning/glossary#pr-auc-area-under-the-pr-curve) , also referred to as average precision. This value ranges from zero to one, where a higher value indicates a higher-quality model.\n- **AuROC** : The [areaunder receiver operating characteristic curve](https://developers.google.com/machine-learning/glossary#auc-area-under-the-roc-curve) . This ranges from zero to one, where a higher value indicates a higher-quality model.\n- **Log loss** : The cross-entropy between the model predictions and the target values. This ranges from zero to infinity, where a lower value indicates a higher-quality model.\n- **Confidence threshold** : A confidence score that determines which predictions to return. A model returns predictions that are at this value or higher. A higher confidence threshold increases precision but lowers recall. Vertex AI returns confidence metrics at different threshold values to show how the threshold affects [precision](https://developers.google.com/machine-learning/glossary#precision) and [recall](https://developers.google.com/machine-learning/glossary#recall) .\n- **Recall** : The fraction of predictions with this class that the model correctly predicted. Also called.\n- **Recall at 1** : The recall (true positive rate) when only considering the label that has the highest prediction score and not below the confidence threshold for each example.\n- **Precision** : The fraction of classification predictions produced by the model that were correct.\n- **Precision at 1** : The precision when only considering the label that has the highest prediction score and not below the confidence threshold for each example.\n- **F1 score** : The harmonic mean of precision and recall. F1 is a useful metric if you're looking for a balance between precision and recall and there's an uneven class distribution.\n- **F1 score at 1** : The harmonic mean of recall at 1 and precision at 1.\n- **Confusion matrix** : A [confusionmatrix](https://developers.google.com/machine-learning/glossary#confusion-matrix) shows how often a model correctly predicted a result. For incorrectly predicted results, the matrix shows what the model predicted instead. The confusion matrix helps you understand where your model is \"confusing\" two results.\n- **True negative count** : The number of times a model correctly predicted a negative class.\n- **True positive count** : The number of times a model correctly predicted a positive class.\n- **False negative count** : The number of times a model mistakenly predicted a negative class.\n- **False positive count** : The number of times a model mistakenly predicted a positive class.\n- **False positive rate** : The fraction of incorrectly predicted results out of all predicted results.\n- **False positive rate at 1** : The false positive rate when only considering the label that has the highest prediction score and not below the confidence threshold for each example.\n- **Model feature attributions:** Vertex AI shows you how much each feature impacts a model. The values are provided as a percentage for each feature: the higher the percentage, the more impact the feature had on model training. Review this information to ensure that all of the most important features make sense for your data and business problem.You can view and download schema files from the following Cloud Storage location:  [gs://google-cloud-aiplatform/schema/modelevaluation/](https://console.cloud.google.com/storage/browser/google-cloud-aiplatform/schema/modelevaluation) \n- **MAE** : The mean absolute error (MAE) is the average absolute difference between the target values and the predicted values. This metric ranges from zero to infinity; a lower value indicates a higher quality model.\n- **RMSE** : The root-mean-squared error is the square root of the average squared difference between the target and predicted values. RMSE is more sensitive to outliers than MAE,so if you're concerned about large errors, then RMSE can be a more useful metric to evaluate. Similar to MAE, a smaller value indicates a higher quality model (0 represents a perfect predictor).\n- **RMSLE** : The root-mean-squared logarithmic error metric is similar to RMSE, except that it uses the natural logarithm of the predicted and actual values plus 1. RMSLE penalizes under-prediction more heavily than over-prediction. It can also be a good metric when you don't want to penalize differences for large prediction values more heavily than for small prediction values. This metric ranges from zero to infinity; a lower value indicates a higher quality model. The RMSLE evaluation metric is returned only if all label and predicted values are non-negative.\n- **r^2** : r squared (r^2) is the square of the Pearson correlation coefficient between the labels and predicted values. This metric ranges between zero and one. A higher value indicates a closer fit to the regression line.\n- **MAPE** : Mean absolute percentage error (MAPE) is the average absolute percentage difference between the labels and the predicted values. This metric ranges between zero and infinity; a lower value indicates a higher quality model.MAPE is not shown if the target column contains any 0 values. In this case, MAPE is undefined.\n- **Model feature attributions:** Vertex AI shows you how much each feature impacts a model. The values are provided as a percentage for each feature: the higher the percentage, the more impact the feature had on model training. Review this information to ensure that all of the most important features make sense for your data and business problem.You can view and download schema files from the following Cloud Storage location:  [gs://google-cloud-aiplatform/schema/modelevaluation/](https://console.cloud.google.com/storage/browser/google-cloud-aiplatform/schema/modelevaluation) \n- **MAE** : The mean absolute error (MAE) is the average absolute difference between the target values and the predicted values. This metric ranges from zero to infinity; a lower value indicates a higher quality model.\n- **RMSE** : The root-mean-squared error is the square root of the average squared difference between the target and predicted values. RMSE is more sensitive to outliers than MAE,so if you're concerned about large errors, then RMSE can be a more useful metric to evaluate. Similar to MAE, a smaller value indicates a higher quality model (0 represents a perfect predictor).\n- **RMSLE** : The root-mean-squared logarithmic error metric is similar to RMSE, except that it uses the natural logarithm of the predicted and actual values plus 1. RMSLE penalizes under-prediction more heavily than over-prediction. It can also be a good metric when you don't want to penalize differences for large prediction values more heavily than for small prediction values. This metric ranges from zero to infinity; a lower value indicates a higher quality model. The RMSLE evaluation metric is returned only if all label and predicted values are non-negative.\n- **r^2** : r squared (r^2) is the square of the Pearson correlation coefficient between the labels and predicted values. This metric ranges between zero and one. A higher value indicates a closer fit to the regression line.\n- **MAPE** : Mean absolute percentage error (MAPE) is the average absolute percentage difference between the labels and the predicted values. This metric ranges between zero and infinity; a lower value indicates a higher quality model.MAPE is not shown if the target column contains any 0 values. In this case, MAPE is undefined.\n- **WAPE** : Weighted absolute percentage error (WAPE) is the overall difference between the value predicted by a model and the values observed over the values observed. Compared to RMSE, WAPE is weighted towards the overall differences rather than individual differences, which can be highly influenced by low or intermittent values. A lower value indicates a higher quality model.\n- **RMSPE** : Root mean squared percentage error (RMPSE) shows RMSE as a percentage of the actual values instead of an absolute number. A lower value indicates a higher quality model.\n- **Quantile** : The percent quantile, which indicates the probability that an observed value will be below the predicted value. For example, at the 0.5 quantile, the observed values are expected to be lower than the predicted values 50% of the time.\n- **Observed quantile** : Shows the percentage of true values that were less than the predicted value for a given quantile.\n- **Scaled pinball loss** : The scaled pinball loss at a particular quantile. A lower value indicates a higher quality model at the given quantile.\nYou can view and download schema files from the following Cloud Storage location:  [gs://google-cloud-aiplatform/schema/modelevaluation/](https://console.cloud.google.com/storage/browser/google-cloud-aiplatform/schema/modelevaluation) \n- **AuPRC** : The [areaunder the precision-recall (PR) curve](https://developers.google.com/machine-learning/glossary#pr-auc-area-under-the-pr-curve) , also referred to as average precision. This value ranges from zero to one, where a higher value indicates a higher-quality model.\n- **Log loss** : The cross-entropy between the model predictions and the target values. This ranges from zero to infinity, where a lower value indicates a higher-quality model.\n- **Confidence threshold** : A confidence score that determines which predictions to return. A model returns predictions that are at this value or higher. A higher confidence threshold increases precision but lowers recall. Vertex AI returns confidence metrics at different threshold values to show how the threshold affects [precision](https://developers.google.com/machine-learning/glossary#precision) and [recall](https://developers.google.com/machine-learning/glossary#recall) .\n- **Recall** : The fraction of predictions with this class that the model correctly predicted. Also called.\n- **Recall at 1** : The recall (true positive rate) when only considering the label that has the highest prediction score and not below the confidence threshold for each example.\n- **Precision** : The fraction of classification predictions produced by the model that were correct.\n- **Precision at 1** : The precision when only considering the label that has the highest prediction score and not below the confidence threshold for each example.\n- **Confusion matrix** : A [confusionmatrix](https://developers.google.com/machine-learning/glossary#confusion-matrix) shows how often a model correctly predicted a result. For incorrectly predicted results, the matrix shows what the model predicted instead. The confusion matrix helps you understand where your model is \"confusing\" two results.\n- **F1 score** : The harmonic mean of precision and recall. F1 is a useful metric if you're looking for a balance between precision and recall and there's an uneven class distribution.\n- **F1 score at 1** : The harmonic mean of recall at 1 and precision at 1.\nYou can view and download schema files from the following Cloud Storage location:  [gs://google-cloud-aiplatform/schema/modelevaluation/](https://console.cloud.google.com/storage/browser/google-cloud-aiplatform/schema/modelevaluation) \n- **AuPRC** : The [areaunder the precision-recall (PR) curve](https://developers.google.com/machine-learning/glossary#pr-auc-area-under-the-pr-curve) , also referred to as average precision. This value ranges from zero to one, where a higher value indicates a higher-quality model.\n- **Confidence threshold** : A confidence score that determines which predictions to return. A model returns predictions that are at this value or higher. A higher confidence threshold increases precision but lowers recall. Vertex AI returns confidence metrics at different threshold values to show how the threshold affects [precision](https://developers.google.com/machine-learning/glossary#precision) and [recall](https://developers.google.com/machine-learning/glossary#recall) .\n- **Recall** : The fraction of predictions with this class that the model correctly predicted. Also called.\n- **Precision** : The fraction of classification predictions produced by the model that were correct.\n- **Confusion matrix** : A [confusionmatrix](https://developers.google.com/machine-learning/glossary#confusion-matrix) shows how often a model correctly predicted a result. For incorrectly predicted results, the matrix shows what the model predicted instead. The confusion matrix helps you understand where your model is \"confusing\" two results.\n- **F1 score** : The harmonic mean of precision and recall. F1 is a useful metric if you're looking for a balance between precision and recall and there's an uneven class distribution.## Notebook tutorials\n### AutoML: Tabular\nTo learn more,  run the following Jupyter notebooks in the environment of your choice:\n- \"Vertex AI: Evaluating batch prediction results from an AutoML Tabular classification model\": [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/automl_tabular_classification_model_evaluation.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fmodel_evaluation%2Fautoml_tabular_classification_model_evaluation.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/automl_tabular_classification_model_evaluation.ipynb) \n- \"Vertex AI Pipelines: Evaluating batch prediction results from AutoML Tabular regression model\": [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/automl_tabular_regression_model_evaluation.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fmodel_evaluation%2Fautoml_tabular_regression_model_evaluation.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/automl_tabular_regression_model_evaluation.ipynb)\n### AutoML: Text\nTo learn more,  run the \"Vertex AI Pipelines: AutoML text classification pipelines using google-cloud-pipeline-components\" Jupyter notebook in one of the following  environments: [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/automl_text_classification_model_evaluation.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fmodel_evaluation%2Fautoml_text_classification_model_evaluation.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/automl_text_classification_model_evaluation.ipynb)\n### AutoML: Video\nTo learn more,  run the \"Vertex AI Pipelines: Evaluating batch prediction results from AutoML Video classification model\" Jupyter notebook in one of the following  environments: [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/automl_video_classification_model_evaluation.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fmodel_evaluation%2Fautoml_video_classification_model_evaluation.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/automl_video_classification_model_evaluation.ipynb)\n### Custom training: Tabular\nTo learn more,  run the following Jupyter notebooks in the environment of your choice:\n- \"Vertex AI Pipelines: Evaluating BatchPrediction results from a Custom Tabular classification model\": [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/custom_tabular_classification_model_evaluation.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fmodel_evaluation%2Fcustom_tabular_classification_model_evaluation.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/custom_tabular_classification_model_evaluation.ipynb) \n- \"Vertex AI Pipelines: Evaluating batch prediction results from custom tabular regression model\": [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/custom_tabular_regression_model_evaluation.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fmodel_evaluation%2Fcustom_tabular_regression_model_evaluation.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/custom_tabular_regression_model_evaluation.ipynb)\n### Vertex AI Model Registry\nTo learn more,  run the \"Get started with importing a custom model evaluation to the Vertex AI Model Registry\" Jupyter notebook in one of the following  environments: [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/get_started_with_custom_model_evaluation_import.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fmodel_evaluation%2Fget_started_with_custom_model_evaluation_import.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_evaluation/get_started_with_custom_model_evaluation_import.ipynb)\n## What's next\n- Learn how to [perform model evaluation using Vertex AI](/vertex-ai/docs/evaluation/using-model-evaluation) .", "guide": "Vertex AI"}