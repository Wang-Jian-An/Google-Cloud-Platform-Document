{"title": "Apigee - Enabling Workload Identity with Helm charts", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Enabling Workload Identity with Helm charts\nThis topic explains how to enable Workload Identity for Apigee hybrid using Helm Charts.\nIf you are using `apigeectl` to install and manage Apigee hybrid, see [Enabling Workload Identity with apigeectl](/apigee/docs/hybrid/v1.11/enable-workload-identity) .\n**Note:** Apigee hybrid v.1.11 only supports Workload Identity federation on GKE.\n", "content": "## Overview\nWorkload Identity is a way for applications running within GKE (Google Kubernetes Engine) to access Google Cloud services. For overviews of Workload Identity, see:\n- [ Introducing Workload Identity: Better authentication for your GKE applications](https://cloud.google.com/blog/products/containers-kubernetes/introducing-workload-identity-better-authentication-for-your-gke-applications) \n- [Using Workload Identity](/kubernetes-engine/docs/how-to/workload-identity) \nA Google Cloud IAM service account is an identity that an application can use to make requests to Google APIs. These service accounts are referred to as GSA (Google Service Accounts) in the document. For more information about GSAs, see [Service accounts](/iam/docs/service-accounts) .\nSeparately, Kubernetes also has the concept of service accounts. A service account provides an identity for processes that run in a Pod. Kubernetes service accounts are Kubernetes resources, while Google service accounts are specific to Google Cloud. For information on Kubernetes service accounts, see [ Configure Service Accounts for Pods](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) in the Kubernetes documentation.\nApigee creates and uses a Kubernetes service account for each type of component when you first install the Helm charts for those components. Enabling Workload Identity allows the hybrid components to interact with the Kubernetes service accounts.\n### Environment variables used in these procedures\nThese procedures use the following environment variables. Either set these in your command shell or replace them in the code samples with the actual values:\n- **CLUSTER_LOCATION** : The region or zone of your Kubernetes cluster, for example:`us-west1`.\n- **CLUSTER_NAME** : The name of your cluster.\n- **ENV_NAME** : Then name of the Apigee environment.\n- **ORG_NAME** : The name of your Apigee organization.\n- **PROJECT_ID** : The ID of your Google Cloud project.\n- **NAMESPACE** : Your Apigee namespace (usually \"apigee\").\nVerify the environment variables:\n```\necho $PROJECT_ID\necho $ORG_NAME\necho $ENV_NAME\necho $NAMESPACE\necho $CLUSTER_LOCATION\necho $CLUSTER_NAME\nCLUSTER_NAME\n```\nInitialize any of the variables you need:\n```\nexport PROJECT_ID=my-project-id\nexport ORG_NAME=$PROJECT_ID\nexport ENV_NAME=my-environment-name\nexport NAMESPACE=apigee\nexport CLUSTER_LOCATION=my-cluster-location\nexport CLUSTER_NAME=hybrid-base-directory/apigeectl\n```\n## Workload Identity and service account key files\nWhen running Apigee hybrid on GKE, the standard practice is to create and download private keys ( `.json` files) for each of the service accounts. When using Workload Identity, you do not need to download service account private keys and add them to GKE clusters.\nIf you have downloaded service account key files as part of your Apigee hybrid installation, you can delete them after enabling Workload Identity. In most installations, they reside in the directory for each component's char.\n## Enable Workload Identity for Apigee hybrid\nFollow these instructions to configure Workload Identity for your project.\n**Note:** Workload Identity is only available for hybrid installations on GKE.\n### Migrated installation and Workload Identity\nIf you migrated your cluster from `apigeectl` management with the [Apigee hybrid Helm migration tool](/apigee/docs/hybrid/v1.11/helm-migration) , the overrides syntax for Workload Identity will have changed. You will need to check the following properties in your overrides file:\n- `namespace`is required. For example:```\ninstanceID: \"hybrid-instance-1\"\nnamespace: \"apigee\"\n```\n- The [gcp.workloadIdentity.enabled](/apigee/docs/hybrid/v1.11/config-prop-ref#gcp-workloadidentity-enabled) property replaces the [gcp.workloadIdentityEnabled](/apigee/docs/hybrid/v1.11/config-prop-ref#gcp-workloadidentityenabled) property. For example:```\ngcp:\n workloadIdentity:\n enabled: true\n```\n- For production installations, each component has a`gsa`property. The value for  these properties is the email address for the Google IAM service account for the corresponding  component. For example:```\nwatcher\n gsa: apigee-watcher@my-hybrid-project.iam.gserviceaccount.com\n```\n- For non-production installations, you can supply a single GSA in the [gcp.workloadIdentity.gsa](/apigee/docs/hybrid/v1.11/config-prop-ref#gcp-workloadidentity-gsa) property.```\ngcp\n workloadIdentity\n gsa: apigee-watcher@my-hybrid-project.iam.gserviceaccount.com\n```\n- With Helm charts for Apigee hybrid, mix prod and non-prod GSAs for Workload Identity. You  can specify a single for the [gcp.workloadIdentity.gsa](/apigee/docs/hybrid/v1.11/config-prop-ref#gcp-workloadidentity-gsa) propertyspecify individual GSAs for specific components. The values you provide for  the individual components will override the value you provide for`gcp.workloadIdentity.gsa`for that component only.\n### Prepare to configure Workload Identity\n- Verify that Workload Identity is enabled in your overrides file. It should be enabled at the overrides file and you should have values for the in the following configuration properties:- For all installations: [gcp.workloadIdentityEnabled](/apigee/docs/hybrid/v1.11/config-prop-ref#gcp-workloadidentityenabled) should be`true`. For example:```\ngcp:\n workloadIdentity:\n enabled: true\n```\n- For production installations:- [connectAgent.gsa](/apigee/docs/hybrid/v1.11/config-prop-ref#connectagent-gsa) \n- [envs.gsa.runtime](/apigee/docs/hybrid/v1.11/config-prop-ref#envs-gsa-runtime) \n- [envs.gsa.synchronizer](/apigee/docs/hybrid/v1.11/config-prop-ref#envs-gsa-synchronizer) \n- [envs.gsa.udca](/apigee/docs/hybrid/v1.11/config-prop-ref#envs-gsa-udca) \n- [logger.gsa](/apigee/docs/hybrid/v1.11/config-prop-ref#logger-gsa) \n- [mart.gsa](/apigee/docs/hybrid/v1.11/config-prop-ref#mart-gsa) \n- [metrics.gsa](/apigee/docs/hybrid/v1.11/config-prop-ref#metrics-gsa) \n- [udca.gsa](/apigee/docs/hybrid/v1.11/config-prop-ref#udca-gsa) \n- [watcher.gsa](/apigee/docs/hybrid/v1.11/config-prop-ref#watcher-gsa) \n- For non-production installations, supply the address of the non-prod GSA (with all needed  IAM roles) in the [gcp.workloadIdentity.gsa](/apigee/docs/hybrid/v1.11/config-prop-ref#gcp-workloadidentity-gsa) property.\n- Check that the current`gcloud`configuration is set to your Google Cloud project ID with the following command:```\ngcloud config get project\n```\n- If needed, set the current `gcloud` configuration:\n- ```\ngcloud config set project $PROJECT_ID\n```\n- Verify that Workload Identity is enabled for your GKE Cluster. When you created the cluster in [Step 1: Create a cluster](/apigee/docs/hybrid/v1.11/install-create-cluster#gke) , step 6 was to Enable Workload Identity. You can confirm if Workload Identity is enabled by running the following command:\n```\ngcloud container clusters describe $CLUSTER_NAME \\\n --region $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --flatten 'workloadIdentityConfig'\n``````\ngcloud container clusters describe $CLUSTER_NAME \\\n --zone $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --flatten 'workloadIdentityConfig'\n```\nYour output should look like the following:```\n --workloadPool: PROJECT_ID.svc.id.goog\n```If you see `null` instead in your results, run the following  command to enable Workload Identity for your cluster:\n```\ngcloud container clusters update $CLUSTER_NAME \\\n --workload-pool=$PROJECT_ID.svc.id.goog \\\n --project $PROJECT_ID \\\n --region $CLUSTER_LOCATION\n``````\ngcloud container clusters update $CLUSTER_NAME \\\n --workload-pool=$PROJECT_ID.svc.id.goog \\\n --zone $CLUSTER_LOCATION \\\n --project $PROJECT_ID\n```\n- Enable Workload Identity for each node pool with the following commands. This operation can  take up to 30 minutes for each node:\n```\ngcloud container node-pools update NODE_POOL_NAME \\\n -cluster=$CLUSTER_NAME \\\n --region $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --workload-metadata=GKE_METADATA\n``````\ngcloud container node-pools update NODE_POOL_NAME \\\n --cluster=$CLUSTER_NAME \\\n --zone $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --workload-metadata=GKE_METADATA\n```\nWhere is the name of each node pool. In most Apigee hybrid   installations, the two default node pools are named `apigee-data` and `apigee-runtime` .\n- Verify that Workload Identity is enabled on your node pools with the following commands:\n```\ngcloud container node-pools describe apigee-data \\\n --cluster $CLUSTER_NAME \\\n --region $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --flatten \"config:\"\n```\n```\ngcloud container node-pools describe apigee-runtime \\\n --cluster $CLUSTER_NAME \\\n --region $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --flatten \"config:\"\n``````\ngcloud container node-pools describe apigee-data \\\n --cluster $CLUSTER_NAME \\\n --zone $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --flatten \"config:\"\n```\n```\ngcloud container node-pools describe apigee-runtime \\\n --cluster $CLUSTER_NAME \\\n --zone $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --flatten \"config:\"\n```\nYour output should look something like:```\n--diskSizeGb: 100\ndiskType: pd-standard\n...\nworkloadMetadataConfig:\nmode: GKE_METADATA\n \n```\n### Configure Workload Identity\nUse the following procedure to enable Workload Identity for the following Hybrid components:\n- `apigee-telemetry`\n- `apigee-org`\n- `apigee-env`\nWhen you run the `helm upgrade` with the `--dry-run` flag for the `apigee-datastore` , `apigee-env` , `apigee-org` , and `apigee-telemetry` charts, the output will include the commands you will need to configure Workload Identity with the correct GSA and KSA names.\nFor example:\n```\nhelm upgrade datastore apigee-datastore/ \\\n --namespace $NAMESPACE \\\n -f overrides.yaml \\\n --dry-run\n```\n```\nNAME: datastore\n...\nFor C* backup GKE Workload Identity, please make sure to add the below membership to the IAM policy binding using the respective kubernetes SA (KSA).\ngcloud iam service-accounts add-iam-policy-binding \\\n  --role roles/iam.workloadIdentityUser \\\n  --member \"serviceAccount:my-project.svc.id.goog[apigee/apigee-cassandra-backup-sa]\" \\\n  --project :my-project\n```\n- Get the command to set up Workload Identity for`apigee-datastore`and run the command under`NOTES:`in the output.```\nhelm upgrade datastore apigee-datastore/ \\\n --namespace $NAMESPACE \\\n -f overrides.yaml \\\n --dry-run\n```\n- Get the commands to set up Workload Identity for`apigee-telemetry`and run the command under`NOTES:`in the output.```\nhelm upgrade telemetry apigee-telemetry/ \\\n --namespace $NAMESPACE \\\n -f overrides.yaml \\\n --dry-run\n```\n- Get the commands to set up Workload Identity for`apigee-org`and run the command under`NOTES:`in the output.```\nhelm upgrade $ORG_NAME apigee-org/ \\\n --namespace $NAMESPACE \\\n -f overrides.yaml \\\n --dry-run\n```\n- Get the commands to set up Workload Identity for`apigee-env`and run the command under`NOTES:`in the output.```\nhelm upgrade $ENV_NAME apigee-env/ \\\n --namespace $NAMESPACE \\\n --set env=ENV_NAME \\\n -f overrides.yaml \\\n --dry-run\n```Repeat this step for each environment in your installation.\n### Verify Workload Identity\n- Validate if the steps worked:```\ngcloud config set project $PROJECT_ID\n``````\nkubectl run --rm -it --image google/cloud-sdk:slim \\\n --namespace $NAMESPACE workload-identity-test\\\n -- gcloud auth list\n```If you don't see a command prompt, try pressing .If the steps were correctly run, you should see a response like the following:```\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Credentialed AccountsACTIVE \u00a0ACCOUNT* \u00a0 \u00a0 \u00a0 GSA@PROJECT_ID.iam.gserviceaccount.com\n```\n- If upgrading from a previous install, clean up secrets that contained service account private keys:```\nkubectl delete secrets -n $NAMESPACE $(k get secrets -n $NAMESPACE | grep svc-account | awk '{print $1}')\n```\n- Check logs:```\nkubectl logs -n $NAMESPACE -l app=apigee=synchronizer,env=$ENV_NAME,org=$ORG_NAME apigee-synchronizer\n```\n- (Optional) You can see the status of your Kubernetes service accounts in the **Kubernetes:\n Workloads Overview** page in the Google Cloud Console. [Go to Workloads](https://console.cloud.google.com/kubernetes/workload/overview) **Note:** You may see an error status for the`apigee-cassandra-backup`and`apigee-cassandra-restore`service accounts.  This is because you are not currently running backup or restore, and these processes have not  been fully configured yet. For more information on Cassandra backup and restore, see [feedbackCassandra backup overview](/apigee/docs/hybrid/v1.11/cassandra-backup-overview) .", "guide": "Apigee"}