{"title": "Apigee - Installing and managing Apigee hybrid with Helm charts", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Installing and managing Apigee hybrid with Helm charts\n**    Preview    \u2014 Installing Apigee hybrid with Helm charts ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\n**Note:** This preview document is applicable for  Apigee hybrid v1.10.x.\nThis document guides you through the step-by-step process of installing  Apigee hybrid v1.10 using Helm charts.\n#", "content": "## Version\nApigee hybrid Helm charts is for use with Apigee hybrid  v1.10.x. See [ Apigee hybrid release history](/apigee/docs/hybrid/supported-platforms#release-history) for the list of hybrid  releases.\n## Prerequisites\n- [Apigee hybrid](/apigee/docs/hybrid/v1.10/what-is-hybrid) 1.10.4\n- [  Helm](https://helm.sh/docs/intro/install/) v3.10+\n- Access to the Apigee hybrid Helm chart repository at:`oci://us-docker.pkg.dev/apigee-release/apigee-hybrid-helm-charts`\n- [gcloud CLI](/sdk/docs/install) \n- Creating and managing projects\n- A Kubernetes cluster for your Apigee hybrid installation. See:- [   Supported Kubernetes Platform and version](#supported-kubernetes) \n- [   Minimum cluster configurations](/apigee/docs/hybrid/v1.10/cluster-overview) \n## Scope\n- This release supports only Apigee hybrid version 1.10.4.\n- This release supports:- New Apigee hybrid installations.\n- Existing Apigee hybrid installations upgraded to version 1.10.4 and   migrated to Helm management using the [Apigee hybrid Helm migration   tool](/apigee/docs/hybrid/preview/helm-migration) .\n- This release supports:- [Basic Apigee hybrid installation](#basic-installation) \n- [Cassandra backup and restore](#cassandra-backup) \n- [Multi-region setup](#multi-region) **Note:** For management of existing Apigee hybrid clusters that were  launched with`apigeectl`, see [ Apigee hybrid Helm migration tool](/apigee/docs/hybrid/preview/com/apigee/docs/hybrid/preview/helm-migration) .\n## Supported Kubernetes platforms and versions\n| Platform | Versions   |\n|:-----------|:-----------------|\n| GKE  | 1.24, 1.25, 1.26 |\n| AKS  | 1.24, 1.25, 1.26 |\n| EKS  | 1.24, 1.25, 1.26 |\n| OpenShift | 4.11, 4.12  |\n## Limitations\n- Helm charts do not fully support CRDs; therefore, we will be using the`kubectl` ` **-k** `command for installing and upgrading them.  We aim to follow community and Google best practices around Kubernetes  management. CRD deployments through Helm have not yet reached a community  state where we see broad support, or requests for such a model. Therefore,  management of Apigee CRDs should be done using`kubectl`as  mentioned in this document.\n- In`apigeectl`, we have used files throughout`overrides.yaml`for service accounts and certs; however, Helm  does not support referencing files outside of the chart directory. Pick one  of the following options for service account and cert files:- Place copies of relevant files within each chart directory\n- Create symbolic links within each chart directory for each file, or a   folder. Helm will follow symbolic links out of the chart directory, but   will output a warning like the following:`apigee-operator/gsa -> ../gsa`\n- Use Kubernetes secrets. For example, for service accounts:```\nkubectl create secret generic SECRET_NAME \\\n --from-file=\"client_secret.json=CLOUD_IAM_FILE_NAME.json\" \\\n -n apigee\n```\n- Replace the following:\n- with the name of the [    Kubernetes secret](https://kubernetes.io/docs/concepts/configuration/secret/) you created.\n- .json with the name of the [   downloaded JSON file](/iam/docs/keys-create-delete#creating) .## Supported Kubernetes Platform and versions\nFor a list of supported platforms, see the v1.10 column in the [  Apigee hybrid supported platforms table](/apigee/docs/hybrid/supported-platforms#platforms) .\n## Permissions required\nThis table lists the resources and permissions required for Kubernetes and  Apigee.\nTo filter this table, do one or more of the following: select a category,  type a search term, or click a column heading to sort.See also:\n- [   Using RBAC Authorization](https://kubernetes.io/docs/reference/access-authn-authz/rbac/) \n- [   Determine the Request Verb](https://kubernetes.io/docs/reference/access-authn-authz/authorization/#determine-the-request-verb) ## Prepare for installation\nApigee hybrid charts are hosted in [Google Artifact Registry](/artifacts) :\n`oci://us-docker.pkg.dev/apigee-release/apigee-hybrid-helm-charts`\n### Pull Apigee Helm charts\nUsing the `pull` command, copy all of the Apigee hybrid Helm  charts to your local storage with the following command:\n```\nexport CHART_REPO=oci://us-docker.pkg.dev/apigee-release/apigee-hybrid-helm-charts\nexport CHART_VERSION=1.10.4\nhelm pull $CHART_REPO/apigee-operator --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-datastore --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-env --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-ingress-manager --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-org --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-redis --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-telemetry --version $CHART_VERSION --untar\nhelm pull $CHART_REPO/apigee-virtualhost --version $CHART_VERSION --untar\n```\n## Install Apigee hybrid\n### Installation sequence overview\nInstallation of components is done from left to  right in sequence as shown in the following figure. Components that are  stacked vertically in the figure can be installed together and in any order.  Once you have installed any component, you can update that component  individually and at any point; for example, replica, memory, CPU, and so on.### Prepare to install Apigee hybrid with Helm charts\n- Create the namespace that will be used for`apigee`resources.  This should match the namespace field in the`overrides.yaml`file. If this is not present in`overrides.yaml`, then the  default is`apigee`.- Check if the namespace already exists:```\nkubectl get namespace apigee\n```If the namespace exists, your output includes:```\n\u00a0 NAME \u00a0 \u00a0 STATUS \u00a0 AGE\u00a0 apigee \u00a0 Active \u00a0 1d\n```\n- If the namespace does not already exist, create it:```\nkubectl create namespace apigee\n```\n- Create the service accounts and assign the appropriate IAM roles to   them. Apigee hybrid uses the following service accounts:| Service account  | IAM roles     |\n|:--------------------|:----------------------------|\n| apigee-cassandra | Storage Object Admin  |\n| apigee-logger  | Logs Writer     |\n| apigee-mart   | Apigee Connect Agent  |\n| apigee-metrics  | Monitoring Metric Writer |\n| apigee-runtime  | No role required   |\n| apigee-synchronizer | Apigee Synchronizer Manager |\n| apigee-udca   | Apigee Analytics Agent  |\n| apigee-watcher  | Apigee Runtime Agent  |Apigee provides a tool, [create-service-account](/apigee/docs/hybrid/v1.10/create-service-account) , in the `apigee-operator/etc/tools` directory:```\nAPIGEE_HELM_CHARTS_HOME/\n\u2514\u2500\u2500 apigee-operator/\n \u2514\u2500\u2500 etc/\n  \u2514\u2500\u2500 tools/\n   \u2514\u2500\u2500 create-service-account\n```This tool creates the service accounts, assigns the IAM roles to   each account, and downloads the certificate files in JSON format for   each account.- Create the directory where you want to download the service account   cert files. You will specify this in the following command in the   place of.\n- You can create all the service accounts with a single command with   the following options:```\nAPIGEE_HELM_CHARTS_HOME/apigee-operator/etc/tools/create-service-account --env prod --dir SERVICE_ACCOUNTS_PATH\n```\n- List the names of your service accounts for your overrides file:```\nls service-accounts\n``````\nmy_project-apigee-cassandra.json \u00a0 \u00a0my_project-apigee-runtime.jsonmy_project-apigee-logger.json \u00a0 \u00a0 \u00a0 my_project-apigee-synchronizer.jsonmy_project-apigee-mart.json \u00a0 \u00a0 \u00a0 \u00a0 my_project-apigee-udca.jsonmy_project-apigee-metrics.json \u00a0 \u00a0 \u00a0my_project-apigee-watcher.json\n```For more information see:- [Step 4: Create service accounts](/apigee/docs/hybrid/v1.10/install-service-accounts#production) \n- [About service accounts](/apigee/docs/hybrid/v1.10/sa-about) \n- Before installing, look at the`overrides.yaml`file to verify the settings: **Important:** Apigee hybrid v1.10.4 has been updated with a critical   hotfix release. If you wish, you can apply the required configuration settings for the hotfix directly   in the configuration overrides file described in this step. If you add the upgrade configurations now, you   do not have to perform any further hotfix upgrades later. The configuration settings for the hotfix   (v1.10.4-hotfix.1) are listed in the [upgrade guide](https://cloud.google.com/apigee/docs/hybrid/preview/upgrade#install-hotfix-1) .   See also the release note for the hotfix release:- [hybrid v1.10.4-hotfix.1](/apigee/docs/hybrid/release-notes#hybrid_v1104-hotfix1) \n```\ninstanceID: UNIQUE_ID_TO_IDENTIFY_THIS_CLUSTERnamespace: apigee # required for Helm charts installation# By default, logger and metrics are enabled and requires below details# Google Cloud project and clustergcp:\u00a0 projectID: PROJECT_ID\u00a0 region: REGIONk8sCluster:\u00a0 name: CLUSTER_NAME\u00a0 region: REGIONorg: ORG_NAMEenvs:- name: \"ENV_NAME\"\u00a0 serviceAccountPaths:\u00a0 \u00a0 runtime: \"PATH_TO_RUNTIME_SVC_ACCOUNT\"\u00a0 \u00a0 synchronizer: \"PATH_TO_SYNCHRONIZER_SVC_ACCOUNT\"\u00a0 \u00a0 udca: \"PATH_TO_UDCA_SVC_ACCOUNT\"ingressGateways:- name: GATEWAY_NAME # maximum 17 characters, eg: \"ingress-1\". See Known issue 243167389.\u00a0 replicaCountMin: 1\u00a0 replicaCountMax: 2\u00a0 svcType: LoadBalancervirtualhosts:- name: ENV_GROUP_NAME\u00a0 selector:\u00a0 \u00a0 app: apigee-ingressgateway\u00a0 \u00a0 ingress_name: GATEWAY_NAME\u00a0 sslSecret: SECRET_NAMEmart:\u00a0 serviceAccountPath: \"PATH_TO_MART_SVC_ACCOUNT\"logger:\u00a0 enabled: TRUE_FALSE # lowercase without quotes, eg: true\u00a0 serviceAccountPath: \"PATH_TO_LOGGER_SVC_ACCOUNT\"metrics:\u00a0 enabled: TRUE_FALSE # lowercase without quotes, eg: true\u00a0 serviceAccountPath: \"PATH_TO_METRICS_SVC_ACCOUNT\"udca:\u00a0 serviceAccountPath: \"PATH_TO_UDCA_SVC_ACCOUNT\"connectAgent:\u00a0 serviceAccountPath: \"PATH_TO_MART_SVC_ACCOUNT\"watcher:\u00a0 serviceAccountPath: \"PATH_TO_WATCHER_SVC_ACCOUNT\"\n```This is the same overrides config you will use for this Helm installation. For more settings see the [Configuration property reference](/apigee/docs/hybrid/v1.10/config-prop-ref) .For more examples of overrides files, see [Step 6: Configure the hybrid runtime](/apigee/docs/hybrid/v1.10/install-configure-cluster#prod) .\n- Enable synchronizer access. This is a prerequisite for installing Apigee hybrid.- Check to see if synchronizer access is already enabled with the following commands:```\nexport TOKEN=$(gcloud auth print-access-token)\n``````\ncurl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n -H \"Content-Type:application/json\" \\\n \"https://apigee.googleapis.com/v1/organizations/ORG_NAME:getSyncAuthorization\" \\\n -d ''\n```Your output should look something like the following:```\n{\u00a0 \"identities\":[\u00a0 \u00a0 \u00a0\"serviceAccount:SYNCHRONIZER_SERVICE_ACCOUNT_ID\"\u00a0 ],\u00a0 \"etag\":\"BwWJgyS8I4w=\"}\n```\n- If the output does not include the service account ID, enable    synchronizer access. Your account must have the [    Apigee Organization Admin IAM role](/iam/docs/understanding-roles#apigee.admin) ( `roles/apigee.admin` ) to perform this task.```\ncurl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n -H \"Content-Type:application/json\" \\\n \"https://apigee.googleapis.com/v1/organizations/ORG_NAME:setSyncAuthorization\" \\\n -d '{\"identities\":[\"'\"serviceAccount:SYNCHRONIZER_SERVICE_ACCOUNT_ID\"'\"]}'\n```See [    Step 7: Enable Synchronizer access](/apigee/docs/hybrid/v1.10/install-enable-synchronizer-access) in the Apigee hybrid     installation documentation for more detailed information.\n- Install Cert Manager with the following command:```\nkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.1/cert-manager.yaml\n```\n- Install the Apigee CRDs: **Note:** From this step onwards, all commands should be run under the chart repo root. **Note:** This is the only supported method for installing Apigee CRDs. Do not use`kubectl apply`without`-k`, do not omit`--server-side`. **Note:** This step requires elevated cluster permissions.- Use the `kubectl` dry-run feature by running    the following command:```\nkubectl apply -k apigee-operator/etc/crds/default/ --server-side --force-conflicts --validate=false --dry-run=server\n```\n- After validating with the dry-run command, run the following command:```\nkubectl apply -k apigee-operator/etc/crds/default/ --server-side --force-conflicts --validate=false\n```\n- Validate the installation with the`kubectl get crds`command:```\nkubectl get crds | grep apigee\n```Your output should look something like the following:```\napigeedatastores.apigee.cloud.google.com     2023-10-09T14:48:30Z\napigeedeployments.apigee.cloud.google.com     2023-10-09T14:48:30Z\napigeeenvironments.apigee.cloud.google.com     2023-10-09T14:48:31Z\napigeeissues.apigee.cloud.google.com      2023-10-09T14:48:31Z\napigeeorganizations.apigee.cloud.google.com     2023-10-09T14:48:32Z\napigeeredis.apigee.cloud.google.com       2023-10-09T14:48:33Z\napigeerouteconfigs.apigee.cloud.google.com     2023-10-09T14:48:33Z\napigeeroutes.apigee.cloud.google.com      2023-10-09T14:48:33Z\napigeetelemetries.apigee.cloud.google.com     2023-10-09T14:48:34Z\ncassandradatareplications.apigee.cloud.google.com   2023-10-09T14:48:35Z\n```\n- Check the existing labels on the cluster nodes.   By default, Apigee schedules data pods on nodes with the label `cloud.google.com/gke-nodepool=apigee-data` and runtime pods   are scheduled on nodes with the label `cloud.google.com/gke-nodepool=apigee-runtime` . You can   customize your node pool labels in the `overrides.yaml` file.For more information, see [   Configuring dedicated node pools](/apigee/docs/hybrid/v1.10/configure-dedicated-nodes) .\n### Install the Apigee hybrid Helm charts\n**Note:** Before executing any of the Helm upgrade/install commands, use the Helm dry-run feature by adding`--dry-run`at the end of the command. See`helm -h`to list supported commands, options, and usage.\n**Important Migration tool: ** If you migrated your cluster   to Helm management with the [Apigee   hybrid Helm migration tool](/apigee/docs/hybrid/preview/helm-migration) , you have existing resources in your migrated cluster. To avoid accidentally deleting resources if the`helm upgrade`command fails, do not use the`\u2011\u2011atomic`flag.For example, in the first step, the command will be:```\nhelm upgrade operator apigee-operator/ \\\n --install \\\n --create-namespace \\\n --namespace apigee-system \\\n -f overrides.yaml\n```\n- Install Apigee Operator/Controller: **Note:** This step requires elevated cluster permissions. Run`helm -h`or`helm install -h`for details```\nhelm upgrade operator apigee-operator/ \\\n --install \\\n --create-namespace \\\n --namespace apigee-system \\\n --atomic \\\n -f overrides.yaml\n``` **Important: ** Omit the`\u2011\u2011atomic`flag for [migrated clusters](/apigee/docs/hybrid/preview/helm-migration) .Verify Apigee Operator installation:```\nhelm ls -n apigee-system\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 NAMESPACE \u00a0 \u00a0 \u00a0 REVISION \u00a0 \u00a0 \u00a0 \u00a0UPDATED \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 STATUS \u00a0 \u00a0 \u00a0 \u00a0 \u00a0CHART \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 APP VERSIONoperator \u00a0 \u00a0apigee-system \u00a0 3 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2023-06-26 00:42:44.492009 -0800 PST \u00a0 \u00a0deployed \u00a0 \u00a0 \u00a0 \u00a0apigee-operator-1.10.4 \u00a0 1.10.4\n```Verify it is up and running by checking its availability:```\nkubectl -n apigee-system get deploy apigee-controller-manager\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0READY \u00a0 UP-TO-DATE \u00a0 AVAILABLE \u00a0 AGEapigee-controller-manager \u00a0 1/1 \u00a0 \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a01 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 7d20h\n```\n- Install Apigee datastore:```\nhelm upgrade datastore apigee-datastore/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n``` **Important: ** Omit the`\u2011\u2011atomic`flag for [migrated clusters](/apigee/docs/hybrid/preview/helm-migration) .Verify `apigeedatastore` is up and running by checking its state:```\nkubectl -n apigee get apigeedatastore default\n``````\nNAME \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 \u00a0 AGEdefault \u00a0 running \u00a0 \u00a02d\n```\n- Install Apigee telemetry:```\nhelm upgrade telemetry apigee-telemetry/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n``` **Important: ** Omit the`\u2011\u2011atomic`flag for [migrated clusters](/apigee/docs/hybrid/preview/helm-migration) .Verify it is up and running by checking its state:```\nkubectl -n apigee get apigeetelemetry apigee-telemetry\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 STATE \u00a0 \u00a0 AGEapigee-telemetry \u00a0 running \u00a0 2d\n```\n- Install Apigee Redis:```\nhelm upgrade redis apigee-redis/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n``` **Important: ** Omit the`\u2011\u2011atomic`flag for [migrated clusters](/apigee/docs/hybrid/preview/helm-migration) .Verify it is up and running by checking its state:```\nkubectl -n apigee get apigeeredis default\n``````\nNAME \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 AGEdefault \u00a0 running \u00a0 2d\n```\n- Install Apigee ingress manager:```\nhelm upgrade ingress-manager apigee-ingress-manager/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n``` **Important: ** Omit the`\u2011\u2011atomic`flag for [migrated clusters](/apigee/docs/hybrid/preview/helm-migration) .Verify it is up and running by checking its availability:```\nkubectl -n apigee get deployment apigee-ingressgateway-manager\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0READY \u00a0 UP-TO-DATE \u00a0 AVAILABLE \u00a0 AGEapigee-ingressgateway-manager \u00a0 2/2 \u00a0 \u00a0 2 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2d\n```\n- Install Apigee organization:```\nhelm upgrade ORG_NAME apigee-org/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n``` **Important: ** Omit the`\u2011\u2011atomic`flag for [migrated clusters](/apigee/docs/hybrid/preview/helm-migration) .Verify it is up and running by checking the state of the respective org:```\nkubectl -n apigee get apigeeorg\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 AGEapigee-org1-xxxxx \u00a0 \u00a0 \u00a0 \u00a0 \u00a0running \u00a0 2d\n```\n- Install the environment.You must install one environment at a time. Specify the environment with `--set env=` :```\nhelm upgrade apigee-env-ENV_NAME apigee-env/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n --set env=ENV_NAME \\\n -f overrides.yaml\n``` **Important: ** Omit the`\u2011\u2011atomic`flag for [migrated clusters](/apigee/docs/hybrid/preview/helm-migration) .Verify it is up and running by checking the state of the respective env:```\nkubectl -n apigee get apigeeenv\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 \u00a0 AGE \u00a0 GATEWAYTYPEapigee-org1-dev-xxx \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0running \u00a0 \u00a0 2d\n```\n- Create the TLS certificates. You are required to provide TLS certificates for the runtime ingress gateway in your Apigee hybrid configuration.- Create the certificates. In a production environment, you will need to use signed certificates. You can use either a certificate and key pair or a Kubernetes secret.For demonstration and testing installation, the runtime gateway    can accept self-signed credentials. In the following example, [openssl](https://www.openssl.org/) is    used to generate the self-signed credentials:```\nopenssl req -nodes -new -x509 \\\n -keyout PATH_TO_CERTS_DIRECTORY/keystore_ENV_GROUP_NAME.key \\\n -out PATH_TO_CERTS_DIRECTORY/keystore_ENV_GROUP_NAME.pem \\\n -subj '/CN='YOUR_DOMAIN'' -days 3650\n```For more information, see [Step 5: Create TLS certificates](/apigee/docs/hybrid/v1.10/install-create-tls-certificates) .\n- Create the Kubernetes secret to reference the certs:```\nkubectl create secret generic NAME \\\n --from-file=\"cert=PATH_TO_CRT_FILE\" \\\n --from-file=\"key=PATH_TO_KEY_FILE\" \\\n -n apigee\n```\n- Install virtual host.You must install one environment group (virtualhost) at a time. Specify the environment group with `--set envgroup=` :```\n# repeat the following command for each env group mentioned in the overrides.yaml file\nhelm upgrade apigee-virtualhost-ENV_GROUP_NAME apigee-virtualhost/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n --set envgroup=ENV_GROUP_NAME \\\n -f overrides.yaml\n``` **Important: ** Omit the`\u2011\u2011atomic`flag for [migrated clusters](/apigee/docs/hybrid/preview/helm-migration) . **Note:** must be unique within the`apigee`namespace. For example, if you have a`prod`env and envgroup, you should set this name to`prod-envgroup`. The later env group name should still be`prod`.This creates ApigeeRouteConfig (ARC) which internally creates   ApigeeRoute (AR) once the Apigee watcher pulls env group related   details from the control plane. Therefore, check that the corresponding   AR's state is running:```\nkubectl -n apigee get arc\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATE \u00a0 AGEapigee-org1-dev-egroup \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2d\n``````\nkubectl -n apigee get ar\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0STATE \u00a0 \u00a0 AGEapigee-org1-dev-egroup-xxxxxx \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0running \u00a0 2d\n```## Additional use cases for Helm charts with Apigee hybrid\n### Cassandra backup and restore\n- To enable backup:- Update the Cassandra backup details in the `overrides.yaml` file:```\ncassandra:\u00a0 backup:\u00a0 \u00a0 enabled: true\u00a0 \u00a0 serviceAccountPath: PATH_TO_GSA_FILE\u00a0 \u00a0 dbStorageBucket: BUCKET_LINK\u00a0 \u00a0 schedule: \"45 23 * * 6\"\n``` **Note:** When using a Cloud Storage bucket, a Google Cloud    service account`apigee-cassandra-back`needs to be    created and have proper roles and/or permissions to write to the    bucket specified in`dbStorageBucket`.\n- Run the Helm upgrade on `apigee-datastore` chart:```\nhelm upgrade datastore apigee-datastore/ \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n``` **Important: ** Omit the`\u2011\u2011atomic`flag for [migrated clusters](/apigee/docs/hybrid/preview/helm-migration) .\n- Similarly, to enable restore:- Update the Cassandra restore details in the `overrides.yaml` file:```\ncassandra:\u00a0 restore:\u00a0 \u00a0 enabled: true\u00a0 \u00a0 snapshotTimestamp: TIMESTAMP\u00a0 \u00a0 serviceAccountPath: PATH_TO_GSA_FILE\u00a0 \u00a0 cloudProvider: \"CSI\"\n```\n- Run the Helm upgrade on `apigee-datastore` chart:```\nhelm upgrade datastore apigee-datastore/ \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n``` **Important: ** Omit the`\u2011\u2011atomic`flag for [migrated clusters](/apigee/docs/hybrid/preview/helm-migration) .See [Cassandra backup overview]() for more details on Cassandra backup and restore.\n### Multi-region expansion\nMulti-region setup with Helm charts requires the same prerequisites as the  current `apigeectl` procedures. For details, see [ Prerequisites](/apigee/docs/hybrid/v1.10/multi-region#prerequisites) for multi-region deployments.\nThe procedure to configure hybrid for multi-region is the same as the  existing procedure up through the process of configuring the multi-region  seed host and setting up the Kubernetes cluster and context.\nUse the following steps to configure the first region and prepare for configuring the second region:\n- Follow the steps in [  Configure Apigee hybrid for multi-region](/apigee/docs/hybrid/v1.10/multi-region#configure-apigee-hybrid-for-multi-region) to Configure the multi-region seed host on your platform.\n- For the first region created, get the pods in the apigee namespace:```\nkubectl get pods -o wide -n apigee\n```\n- Identify the multi-region seed host address for Cassandra in this region, for example`10.0.0.11`.\n- Prepare the `overrides.yaml` file for the second region and add in the seed host IP address as follows:```\ncassandra:\u00a0 multiRegionSeedHost: \"SEED_HOST_IP_ADDRESS\"\u00a0 datacenter: \"DATACENTER_NAME\"\u00a0 rack: \"RACK_NAME\"\u00a0 clusterName: CLUSTER_NAME\u00a0 hostNetwork: false\n```Replace the following:- with the seed host IP address, for example`10.0.0.11`.\n- with the datacenter name, for example`dc-2`.\n- with the rack name, for example`ra-1`.\n- with the name of your Apigee cluster. By default the value   is`apigeecluster`. If you use a different cluster name, you must specify a   value for [cassandra.clusterName](/apigee/docs/hybrid/preview/config-prop-ref#cassandra-clustername) .   This value must be the same in all regions.\nTo set up the new region:\n- Install `cert-manager` in region 2:```\nkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.1/cert-manager.yaml\n```\n- Create a Kubernetes secret for your service account.\n- Create a Kubernetes secret for your ingress certificate.\n- Copy your certificate from the existing cluster to the new cluster.  The new CA root is used by Cassandra and other hybrid components for mTLS.  Therefore, it is essential to have consistent certificates across the cluster.- Set the context to the original namespace:```\nkubectl config use-context ORIGINAL_CLUSTER_NAME\n```\n- Export the current namespace configuration to a file:```\nkubectl get namespace apigee -o yaml > apigee-namespace.yaml\n```\n- Export the `apigee-ca` secret to a file:```\nkubectl -n cert-manager get secret apigee-ca -o yaml > apigee-ca.yaml\n```\n- Set the context to the new region's cluster name:```\nkubectl config use-context NEW_CLUSTER_NAME\n```\n- Import the namespace configuration to the new cluster. Be sure to    update the namespace in the file if you're using a different    namespace in the new region:```\nkubectl apply -f apigee-namespace.yaml\n```\n- Import the secret to the new cluster:```\nkubectl -n cert-manager apply -f apigee-ca.yaml\n```\n- Now use Helm charts to install Apigee hybrid in the new region with   the following Helm Chart commands (as done in region 1): **Note:** You can use the same CRDs for consistency by using the   same folder where you have the charts downloaded, you can also keep   your overrides file unique between region 1 and 2 by naming your   overrides something unique such as`overrides2.yaml`, etc.```\nhelm upgrade operator apigee-operator \\\n --install \\\n --create-namespace \\\n --namespace apigee-system \\\n --atomic\n -f overrides-DATACENTER_NAME.yaml\nhelm upgrade datastore apigee-datastore \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides-DATACENTER_NAME.yaml\nhelm upgrade telemetry apigee-telemetry \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides-DATACENTER_NAME.yaml\nhelm upgrade redis apigee-redis \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides-DATACENTER_NAME.yaml\nhelm upgrade ingress-manager apigee-ingress-manager \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides-DATACENTER_NAME.yaml\nhelm upgrade ORG_NAME apigee-org \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides-DATACENTER_NAME.yaml\n# repeat the below command for each env mentioned on the overrides\nhelm upgrade apigee-env-ENV_NAME apigee-env/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n --set env=ENV_NAME \\\n -f overrides-DATACENTER_NAME.yaml\n# repeat the below command for each env group mentioned on the overrides\nhelm upgrade apigee-virtualhost-ENV_GROUP_NAME apigee-virtualhost/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n --set envgroup=ENV_GROUP_NAME \\\n -f overrides-DATACENTER_NAME.yaml\n``` **Important: ** Omit the`\u2011\u2011atomic`flag for [migrated clusters](/apigee/docs/hybrid/preview/helm-migration) .\n- Once all the components are installed, set up Cassandra on all the pods  in the new data centers. For instructions, see [  Configure Apigee hybrid for multi-region](/apigee/docs/hybrid/v1.9/multi-region#configure-apigee-hybrid-for-multi-region) , select your platform,   scroll to **Set up the new region** , and then locate step 5.\n- Once the data replication is complete and verified, update the seed hosts:- Remove`multiRegionSeedHost: 10.0.0.11`from`overrides-` `` `.yaml`.\n- Reapply the change to update the apigee datastore CR:```\nhelm upgrade datastore apigee-datastore/ \\\n --install \\\n --namespace apigee \\\n --atomic \\\n -f overrides-DATACENTER_NAME.yaml\n``` **Important: ** Omit the`\u2011\u2011atomic`flag for [migrated clusters](/apigee/docs/hybrid/preview/helm-migration) .\n### Hosting images privately\nInstead of relying on the public Google Cloud repository, you may optionally  want to host the images privately. Instead of overriding each component, you  can add hub details on the overrides:\n```\nhub: PRIVATE_REPO\n```\nFor example, if the following hub is provided, it will automatically resolve  the image path:\n```\nhub: private-docker-host.com\n```\nas:\n```\n## an example of internal component vs 3rd partycontainers:- name: apigee-udca\u00a0 image: private-docker-host.com/apigee-udca:1.10.4\u00a0 imagePullPolicy: IfNotPresentcontainers:- name: apigee-ingressgateway\u00a0 image: private-docker-host.com/apigee-asm-ingress:1.17.2-asm.8-distroless\u00a0 imagePullPolicy: IfNotPresent\n```\nTo display a list of the Apigee images hosted in the Google Cloud repository on the command line:\n```\n./apigee-operator/etc/tools/apigee-pull-push.sh --list\n```\n### Tolerations\nTo use the [ Taints and Tolerations feature of Kubernetes](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) , you must define the `tolerations` override property for each Apigee hybrid component.  The following components support defining tolerations:\n- `ao`\n- `apigeeIngressGateway`\n- `cassandra`\n- `cassandraSchemaSetup`\n- `cassandraSchemaValidation`\n- `cassandraUserSetup`\n- `connectAgent`\n- `istiod`\n- `logger`\n- `mart`\n- `metrics`\n- `mintTaskScheduler`\n- `redis`\n- `runtime`\n- `synchronizer`\n- `udca`\n- `Watcher`\nSee [  Configuration property reference](/apigee/docs/hybrid/v1.10/config-prop-ref) for more information about these   components.\nFor example, to apply the tolerations to the Apigee operator deployment:\n```\nao:\u00a0 tolerations:\u00a0 - key: \"key1\"\u00a0 \u00a0 operator: \"Equal\"\u00a0 \u00a0 value: \"value1\"\u00a0 \u00a0 effect: \"NoExecute\"\u00a0 \u00a0 tolerationSeconds: 3600\n```\nTo apply the tolerations to the Cassandra StatefulSet:\n```\ncassandra:\u00a0 tolerations:\u00a0 - key: \"key1\"\u00a0 \u00a0 operator: \"Equal\"\u00a0 \u00a0 value: \"value1\"\u00a0 \u00a0 effect: \"NoExecute\"\u00a0 \u00a0 tolerationSeconds: 3600\n```", "guide": "Apigee"}