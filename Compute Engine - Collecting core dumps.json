{"title": "Compute Engine - Collecting core dumps", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Collecting core dumps\nUse core dumps to analyze the causes of an unresponsive virtual machine (VM) instance.\nTo collect core dumps on Compute Engine, you must configure your VMs to receive a [Non-Maskable Interrupt (NMI)](https://en.wikipedia.org/wiki/Non-maskable_interrupt) signal, and then run a `SendDiagnosticInterrupt` command to prompt a kernel panic or blue screen in your operating system. A kernel panic or blue screen starts a core dump collection by the guest operating system. These core dumps can then be used for debugging purposes especially in scenarios that are hard to reproduce, such as a kernel freeze.\n", "content": "## Before you begin\n- Sending NMI signals are counted in the default **Queries** API quota. For more information, see [API rate limits](/compute/docs/api-rate-limits) .\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nTo use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```\n### Required roles\nTo ensure that your user or service account has the necessary  permission to send NMI signals to a VM,   ask your administrator to grant your user or service account the [Compute Instance Admin (v1) ](https://cloud.google.com/iam/docs/understanding-roles#compute.instanceAdmin.v1) ( `roles/compute.instanceAdmin.v1` ) IAM role on your project.    For more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nThis predefined role contains the `compute.instances.sendDiagnosticInterrupt` permission, which is   required to send NMI signals to a VM.\nYour administrator might also be able to give your user or service account   this permission  with [custom roles](/iam/docs/creating-custom-roles) or  other [predefined roles](/iam/docs/understanding-roles) .\n## Overview\nTo use core dumps to help debug an unresponsive VM or a security issue, you need to complete the following steps:\n- [Configure your VM](#configure-os) to generate core dumps\n- [Send an NMI signal](#send-nmi) to generate core dumps\n- [Review](#review-core-dumps) the core dumps## Limitations\nFor VMs that have Secure Boot enabled, you must disable Secure boot before you send an NMI interrupt signal. For instructions, see [Modifying Shielded VM options on a VM instance](/compute/docs/instances/modifying-shielded-vm#modify-shielded-vm-instance) .\n## Configure VM\nA VM's response to receiving an NMI interrupt signal depends on the VM's operating system configuration.\nEach operating system writes its core dump logs in a different location. For example in Ubuntu operating systems the crash dump file is saved to `/var/crash/` by default.\nTo configure your guest OS to generate a crash dump when an NMI signal is received, review the documentation for the supported operating system.\n| Operating system     | Links to instructions                            | Additional notes                                                                   |\n|:------------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Ubuntu        | Ubuntu: Kernel crash dump                           | For Linux VMs, you must configure the kernel to crash when it receives the NMI interrupt signal. To configure the kernel to crash, add the following to your configuration file: kernel.unknown_nmi_panic=1                    |\n| SUSE Linux Enterprise Server (SLES) | Configure crashkernel memory for kernel core dump analysis                   | For Linux VMs, you must configure the kernel to crash when it receives the NMI interrupt signal. To configure the kernel to crash, add the following to your configuration file: kernel.unknown_nmi_panic=1                    |\n| Red Hat Enterprise Linux (RHEL)  | Use both of the following documents: Handling a Non-Responsive Virtual Machine by Sending a Non-Maskable Interrupt Configuring kdump | For Linux VMs, you must configure the kernel to crash when it receives the NMI interrupt signal. To configure the kernel to crash, add the following to your configuration file: kernel.unknown_nmi_panic=1                    |\n| Container-Optimized OS (COS)  | Enabling Kernel Crash Dump on GCE COS Instances                      | Only COS 93 and later support kdump generation using NMI signal.                                                       |\n| Windows        | Generate a kernel or complete crash dump                        | Windows client VMs don't keep memory dump files unless they are members of an AD domain or the following is true: The registry sets AlwaysKeepMemoryDump to 1 The disk has more than 25\u00a0GB of free space For more information, see Kernel dump storage and clean up behavior in Windows 7 |\n## Send NMI to generate core dumps\nAfter you configure the VM, you can then send the NMI signal to the VM by using either the [Google Cloud CLI](/compute/docs/gcloud-compute) , or [REST](/compute/docs/reference/rest/v1) .\n**Note:** When you configure your VM to trigger kernel panic and generate crash dumps, the VM becomes unreachable after the NMI signal is sent. If you want to connect to the VM after the signal is sent, you need to restart the VM.\nTo send the NMI signal, use the [instances send-diagnostic-interrupt command](/sdk/gcloud/reference/compute/instances/send-diagnostic-interrupt) .\n```\ngcloud compute instances send-diagnostic-interrupt VM_NAME \\\n --zone=ZONE\n```\nReplace the following:- ``: instance ID or name of the VM that you want to collect core dumps from\n- ``: the zone where your VM is located\nThe output is similar to the following:\n```\n<Empty Response>\n```\nFor a complete list of outputs, see the next section in this document about \"NMI command responses\".- Optional. If not already available, create an API key. For more information about creating API keys, see [Creating an API key](/docs/authentication/api-keys#creating_an_api_key) .\n- To send the NMI signal, make a `POST` request to the [sendDiagnosticInterrupt method](/compute/docs/reference/rest/v1/instances/sendDiagnosticInterrupt) .```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances/VM_NAME/sendDiagnosticInterrupt?key=API_KEY\n```For, example, you can use the `curl` command to make the request as follows:```\ncurl --request POST 'https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances/VM_NAME/sendDiagnosticInterrupt?key=API_KEY' \\\n --header 'Authorization: Bearer $(gcloud auth print-access-token)' \\\n --header 'Accept: application/json' \\\n --compressed\n```Replace the following:- ``: ID of the project to create the VM in\n- ``: the zone where your VM is located\n- ``: instance ID or name of the VM that you want to collect core dumps from\n- ``: your API key\nThe output is similar to the following:```\n<Empty Response>\n```For a complete list of outputs, see the next section in this document about \"NMI command responses\".\n### NMI command responses\nOne of the following responses are returned when you attempt to send an NMI signal.\n| State | Body                  | Notes                                                                                               |\n|:--------|:-------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| SUCCESS | <Empty Response>               | SUCCESS shows that the NMI signal is delivered to the operating system. It does not guarantee that the core dump is collected, or that the VM shuts down or reboots. These behaviors are determined by the operating system configuration.                                      |\n| FAIL | UNSUPPORTED_OPERATION             | This occurs when the operating system fails to receive the NMI signal. There are multiple reasons for this. Common scenarios are that the VM is being live migrated or the VM is not properly configured to receive NMI signals. To resolve this, you can try the following: Verify that the VM is properly configured. See Configure VM. Wait and retry the SendDiagnosticInterrupt request. |\n| FAIL | Required 'compute.instances.sendDiagnosticInterrupt' permission for [..] | The command failed because the user making the request does not have sufficient permissions. To resolve this, you can assign a role to the user that contains the compute.instances.sendDiagnosticInterrupt permission.                                          |\n## Review core dumps\nReview the crash dump file in the configured or default location for your operating system.\nFor example in Ubuntu operating systems, by default, the crash dump file is saved to `/var/crash/` .", "guide": "Compute Engine"}