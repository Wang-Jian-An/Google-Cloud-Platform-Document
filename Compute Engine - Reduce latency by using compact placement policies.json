{"title": "Compute Engine - Reduce latency by using compact placement policies", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Reduce latency by using compact placement policies\nThis document explains how to reduce network latency among your virtual machine (VM) instances by creating and applying compact placement policies to them.\nA [compact placement policy](/compute/docs/instances/placement-policies-overview) specifies that your VMs should be physically placed closer to each other. This can help improve performance and reduce network latency among your VMs when, for example, you run high-performance computing (HPC), machine learning (ML), or database server workloads.\nYou can apply a compact placement policy when you:\n- Create or update a VM\n- Create a single-project reservation\n- Create an instance template. The instance template then applies the compact placement policy when you:- Create a VM\n- Create or update a managed instance group (MIG)\n- Create a single-project reservation\n", "content": "## Before you begin\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nTo use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```\n### Required roles\nTo get the permissions that you need to create and apply a compact placement policy to VMs,   ask your administrator to grant you the [Compute Instance Admin (v1) ](https://cloud.google.com/iam/docs/understanding-roles#compute.instanceAdmin.v1) ( `roles/compute.instanceAdmin.v1` ) IAM role on the VM or the project.    For more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nThis predefined role contains     the permissions required to create and apply a compact placement policy to VMs. To see the exact permissions that are   required, expand the **Required permissions** section:\nYou might also be able to get   these permissions  with [custom roles](/iam/docs/creating-custom-roles) or  other [predefined roles](/iam/docs/understanding-roles) .\n## Restrictions\nIn addition to the general [restrictions](/compute/docs/instances/placement-policies-overview#restrictions) for placement policies, compact placement policies also have the following restrictions:\n- For compact placement policies, you can use `max-distance` ( [Preview](/products#product-launch-stages) ) to better control how far apart to place your VMs. The following table outlines the supported number of VMs and [host maintenance policy](/compute/docs/instances/setting-vm-host-options#settingoptions) for each `max-distance` value:| max-distance value | Description                          | Maximum number of VMs | Supported host maintenance policy |\n|:---------------------|:----------------------------------------------------------------------------------------------------------------|------------------------:|:------------------------------------|\n| Unspecified   | Based on availability, the VMs are placed as close to each other as possible.         |      150 | Migrate or Terminate    |\n| 3     | The VMs are placed in adjacent clusters for low latency.              |     1500 | Migrate or Terminate    |\n| 2     | The VMs are placed in adjacent racks and experience lower network latency than VMs placed in adjacent clusters. |      150 | Terminate       |\n| 1     | The VMs are placed in the same rack and minimize network latency as much as possible.       |      22 | Terminate       | **Note:** The actual maximum number of VMs might be smaller, depending on the available resources for VM placement.\n- You can only apply a compact placement policy to A2, A3, C2, C3, C2D, C3D, G2, H3, N2, and N2D [machine series](/compute/docs/machine-resource) . If you use `max-distance` when creating a compact placement policy, you can't apply the policy to A3, G2, N2, and N2D machine series.\n- You can't apply compact placement policies to VMs that specify [sole-tenant nodes](/compute/docs/nodes) .\n- If you want to create a compact placement policy for a reservation, see the [additional requirements for reservations](/compute/docs/instances/reservations-overview#compact-placement-policy-requirements) .## Create a compact placement policy\nTo create a compact placement policy, use one of the following methods:\n- Recommended: **Without a fixed count** .You can apply a compact placement policy that doesn't specify a fixed count of VMs to an unspecified number of VMs. This makes the compact placement policy effective no matter the number of VMs you apply it to.\n- **With a fixed count** .You can apply a compact placement policy that specifies a fixed count of VMs only to an exact number of VMs. This makes the compact placement policy effective only if it's applied to the specified number of VMs.\nYou can create a compact placement policy using the gcloud CLI and Compute Engine API.\nTo create a compact placement policy, use the [gcloud compute resource-policies create group-placement command](/sdk/gcloud/reference/compute/resource-policies/create/group-placement) with the `--collocation=COLLOCATED` flag.\n```\ngcloud compute resource-policies create group-placement POLICY_NAME \\\n --collocation=COLLOCATED \\\n --project=PROJECT_ID \\\n --region=REGION\n```\nReplace the following:- `` : the name of the policy to create.\n- `` : the project ID of the project where you want to create the placement policy.\n- `` : the region where to create the policy. If you want to apply the compact placement policy to existing VMs, create the policy in a region that contains the zone where the VMs are located.\nOptionally, for better control over how far apart the VMs are placed when you have strict network latency requirements, you can create a compact placement policy using the [gcloud beta compute resource-policies create group-placement command](/sdk/gcloud/reference/beta/compute/resource-policies/create/group-placement) with the `--collocation=COLLOCATED` and `--max-distance` flags.\n **    Preview     ** This product or feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA products and features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .```\ngcloud beta compute resource-policies create group-placement POLICY_NAME \\\n --collocation=COLLOCATED \\\n --max-distance=MAX_DISTANCE \\\n --project=PROJECT_ID \\\n --region=REGION\n```\nReplace the following:- `` : the name of the compact placement policy to create.\n- `` : the maximum distance configuration for your VMs. The value must be between `1` , which specifies to place your VMs in the same rack for the lowest network latency possible, and `3` , which specifies to place your VMs in adjacent clusters. Depending on the machine type and zone specified in the VMs that you apply a compact placement policy to:- If a zone has capacity available, a compact placement policy with a higher `max-distance` value (such as `3` ) might cause your VMs to be placed closer to each other.\n- If a zone lacks capacity, a compact placement policy with a lower `max-distance` value (such as `1` ) is more likely to cause the application of the policy to one or more of your VMs to fail.\n- `` : the project ID of the project where you want to create the placement policy.\n- `` : the region where you want to create the policy.\nTo create a compact placement policy, make a `POST` request to the [resourcePolicies.insert method](/compute/docs/reference/rest/v1/resourcePolicies/insert) with the `collocation` field set to `COLLOCATED` .\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/regions/REGION/resourcePolicies{\u00a0 \"name\": \"POLICY_NAME\",\u00a0 \"groupPlacementPolicy\": {\u00a0 \u00a0 \"collocation\": \"COLLOCATED\"\u00a0 }}\n```\nReplace the following:- `` : the project ID of the project where you want to create the placement policy.\n- `` : the region where to create the placement policy. If you want to apply the compact placement policy to existing VMs, create the policy in a region that contains the zone where the VMs are located.\n- `` : the name of the compact placement policy to create.\nOptionally, for better control over how far apart the VMs are placed when you have strict network latency requirements, you can create a compact placement policy by making a `POST` request to the [beta.resourcePolicies.insert method](/compute/docs/reference/rest/beta/resourcePolicies/insert) with the `collocation` field set to `COLLOCATED` and the `max-distance` field.\n **    Preview     ** This product or feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA products and features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .```\nPOST https://compute.googleapis.com/compute/beta/projects/PROJECT_ID/regions/REGION/resourcePolicies{\u00a0 \"name\": \"POLICY_NAME\",\u00a0 \"groupPlacementPolicy\": {\u00a0 \u00a0 \"collocation\": \"COLLOCATED\",\u00a0 \u00a0 \"maxDistance\": \"MAX_DISTANCE\"\u00a0 }}\n```\nReplace the following:- `` : the project ID of the project where you want to create the policy.\n- `` : the region where you want to create the policy.\n- `` : the name of the compact placement policy to create.\n- `` : the maximum distance configuration for your VMs. The value must be between `1` , which specifies to place your VMs in the same rack for the lowest network latency possible, and `3` , which specifies to place your VMs in adjacent clusters. Depending on the machine type and zone specified in the VMs that you apply a compact placement policy to:- If a zone has capacity available, a compact placement policy with a higher `max-distance` value (such as `3` ) might cause your VMs to be placed closer to each other.\n- If a zone lacks capacity, a compact placement policy with a lower `max-distance` value (such as `1` ) is more likely to cause the application of the policy to one or more of your VMs to fail.You can create a compact placement policy that specifies a fixed count of VMs using the gcloud CLI and Compute Engine API.\nTo create a compact placement policy that specifies a fixed count of VMs, use the [gcloud compute resource-policies create group-placement command](/sdk/gcloud/reference/compute/resource-policies/create/group-placement) with the `--collocation=COLLOCATED` and `--vm-count` flags.\n```\ngcloud compute resource-policies create group-placement POLICY_NAME \\\n --collocation=COLLOCATED \\\n --project=PROJECT_ID \\\n --region=REGION \\\n --vm-count=VM_COUNT\n```\nReplace the following:- `` : the name of the policy to create.\n- `` : the project ID of the project where you want to create the placement policy.\n- `` : the region where to create the policy. If you want to apply the compact placement policy to existing VMs, create the policy in a region that contains the zone where the VMs are located.\n- `` : the exact number of VMs you can apply the compact placement policy to. The value must be between `1` and `150` , which is the maximum number of VMs you can apply a compact placement policy to.\nOptionally, for better control over how far apart the VMs are placed when you have strict network latency requirements, you can create a compact placement policy using the [gcloud beta compute resource-policies create group-placement command](/sdk/gcloud/reference/beta/compute/resource-policies/create/group-placement) with the `--collocation=COLLOCATED` , `--max-distance` , and `--vm-count` flags.\n **    Preview     ** This product or feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA products and features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .```\ngcloud beta compute resource-policies create group-placement POLICY_NAME \\\n --collocation=COLLOCATED \\\n --max-distance=MAX_DISTANCE \\\n --project=PROJECT_ID \\\n --region=REGION \\\n --vm-count=VM_COUNT\n```\nReplace the following:- `` : the name of the compact placement policy to create.\n- `` : the maximum distance configuration for your VMs. The value must be between `1` , which specifies to place your VMs in the same rack for the lowest network latency possible, and `3` , which specifies to place your VMs in adjacent clusters. Depending on the machine type and zone specified in the VMs that you apply a compact placement policy to:- If a zone has capacity available, a compact placement policy with a higher `max-distance` value (such as `3` ) might cause your VMs to be placed closer to each other.\n- If a zone lacks capacity, a compact placement policy with a lower `max-distance` value (such as `1` ) is more likely to cause the application of the policy to one or more of your VMs to fail.\n- `` : the project ID of the project where you want to create the placement policy.\n- `` : the region where you want to create the policy.\n- `` : the exact number of VMs that you can apply the compact placement policy to. The value must be between `1` and the maximum number of VMs that you can apply the placement policy to based on the `` value that you specify.\nTo create a compact placement policy that specifies a fixed count of VMs, make a `POST` request to the [resourcePolicies.insert method](/compute/docs/reference/rest/v1/resourcePolicies/insert) with the `collocation` field set to `COLLOCATED` and the `vmCount` field.\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/regions/REGION/resourcePolicies{\u00a0 \"name\": \"POLICY_NAME\",\u00a0 \"groupPlacementPolicy\": {\u00a0 \u00a0 \"collocation\": \"COLLOCATED\",\u00a0 \u00a0 \"vmCount\": \"VM_COUNT\"\u00a0 }}\n```\nReplace the following:- `` : the project ID of the project where you want to create the placement policy.\n- `` : the region where to create the placement policy. If you want to apply the compact placement policy to existing VMs, create the policy in a region that contains the zone where the VMs are located.\n- `` : the name of the compact placement policy to create.\n- `` : the exact number of VMs that you can apply the compact placement policy to. The value must be between `1` and `150` , which is the maximum number of VMs that you can apply a compact placement policy to.\nOptionally, for better control over how far apart the VMs are placed when you have strict network latency requirements, you can create a compact placement policy by making a `POST` request to the [beta.resourcePolicies.insert method](/compute/docs/reference/rest/beta/resourcePolicies/insert) with the `collocation` field set to `COLLOCATED` , the `max-distance` field, and the `vmCount` field.\n **    Preview     ** This product or feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA products and features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .```\nPOST https://compute.googleapis.com/compute/beta/projects/PROJECT_ID/regions/REGION/resourcePolicies{\u00a0 \"name\": \"POLICY_NAME\",\u00a0 \"groupPlacementPolicy\": {\u00a0 \u00a0 \"collocation\": \"COLLOCATED\",\u00a0 \u00a0 \"maxDistance\": \"MAX_DISTANCE\",\u00a0 \u00a0 \"vmCount\": \"VM_COUNT\"\u00a0 }}\n```\nReplace the following:- `` : the project ID of the project where you want to create the policy.\n- `` : the region where you want to create the policy.\n- `` : the name of the compact placement policy to create.\n- `` : the maximum distance configuration for your VMs. The value must be between `1` , which specifies to place your VMs in the same rack for the lowest network latency possible, and `3` , which specifies to place your VMs in adjacent clusters. Depending on the machine type and zone specified in the VMs that you apply a compact placement policy to:- If a zone has capacity available, a compact placement policy with a higher `max-distance` value (such as `3` ) might cause your VMs to be placed closer to each other.\n- If a zone lacks capacity, a compact placement policy with a lower `max-distance` value (such as `1` ) is more likely to cause the application of the policy to one or more of your VMs to fail.\n- `` : the exact number of VMs that you can apply the compact placement policy to. The value must be between `1` and the maximum number of VMs that you can apply the placement policy to based on the `` value that you specify.## Apply compact placement policies\nYou can apply a compact placement policy to an existing VM, or when you create VMs, instance templates, MIGs, or reservations of VMs.\nTo create a Compute Engine resource that specifies a compact placement policy, select one of the following methods:\n- [ Apply a compact placement policy to an existing VM](#apply-to-vm) .\n- [ Create a VM that specifies a compact placement policy](#create-vm) .\n- [ Create VMs in bulk that specify a compact placement policy](#create-bulk-vms) .\n- [ Create an instance template that specifies a compact placement policy](#create-instance-template) .\n- [ Apply a compact placement policy to the VMs in a MIG](#apply-mig) .\nIf you want to specify a compact placement policy when creating a single-project reservation by specifying properties directly, see [Create a reservation for a single project](/compute/docs/instances/reservations-single-project#specify-vm-properties) instead.\nAfter a compact placement policy is applied to a VM, you can [verify the physical location of a VM](#verify-vm-location) in relation to other VMs that specify the same policy.\n### Apply a compact placement policy to an existing VM\nYou can apply a compact placement policy to an existing VM using the gcloud CLI and Compute Engine API.\nBefore applying a compact placement policy to an existing VM, make sure of the following:\n- The VM and the compact placement policy are located in the same project.\n- The VM is located within the region where the compact placement policy exists.\n- The VM specifies a supported [machine series and host maintenance policy](#restrictions) .\nOtherwise, applying the compact placement policy to an existing VM fails.\nTo apply a compact placement policy to an existing VM, use the [gcloud compute instances add-resource-policies command](/sdk/gcloud/reference/compute/instances/add-resource-policies) with the `--resource-policies` flag.\n```\ngcloud compute instances add-resource-policies VM_NAME \\\n --project=PROJECT_ID \\\n --resource-policies=POLICY_NAME \\\n --zone=ZONE\n```\nReplace the following:- `` : the name of an existing VM.\n- `` : the project ID of the project where the compact placement policy and the VM are located.\n- `` : the name of an existing compact placement policy.\n- `` : the zone where the VM is located.\nTo apply a compact placement policy to an existing VM, make a `POST` request to the [instances.addResourcePolicies method](/compute/docs/reference/rest/v1/instances/addResourcePolicies) with the `resourcePolicies` field.\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances/VM_NAME/addResourcePolicies{\u00a0 \"resourcePolicies\": [\u00a0 \u00a0 \"projects/PROJECT_ID/regions/REGION/resourcePolicies/POLICY_NAME\"\u00a0 ]}\n```\nReplace the following:- `` : the project ID of the project where the compact placement policy and the VM are located.\n- `` : the zone where the VM exists, which must be within the region where the compact placement policy is located.\n- `` : the name of an existing VM.\n- `` : the region where the compact placement policy is located.\n- `` : the name of an existing compact placement policy.\n### Create a VM that specifies a compact placement policy\nYou can create a VM that specifies an existing compact placement policy using the gcloud CLI and Compute Engine API.\nTo create a VM that specifies a compact placement policy, use the [gcloud compute instances create command](/sdk/gcloud/reference/compute/instances/create) with the `--resource-policies` flag.\nFor example, to create a VM that specifies a `c2d-standard-2` machine type, run the following command:\n```\ngcloud compute instances create VM_NAME \\\n --machine-type=c2d-standard-2 \\\n --maintenance-policy=MAINTENANCE_POLICY \\\n --project=PROJECT_ID \\\n --resource-policies=POLICY_NAME \\\n --zone=ZONE\n```\nReplace the following:- `` : the name of the VM to create.\n- `` : the [host maintenance policy](/compute/docs/instances/setting-vm-host-options#available_host_maintenance_properties) of the VM. If the compact placement policy you specify uses a `max-distance` value of `1` or `2` , you can only specify `TERMINATE` . Otherwise, you can specify either `MIGRATE` or `TERMINATE` .\n- `` : the project ID of the project where the compact placement policy is located.\n- `` : the name of an existing compact placement policy.\n- `` : the zone where to create the VM. You can only create a VM in a zone that is within the region of the compact placement policy you specify.\nTo create a VM that specifies a compact placement policy, make a `POST` request to the [instances.insert method](/compute/docs/reference/rest/v1/instances/insert) with the `resourcePolicies` field.\nFor example, to create a VM that specifies a `c2d-standard-2` machine type, make the following `POST` request:\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances{\u00a0 \"machineType\": \"zones/ZONE/machineTypes/c2d-standard-2\",\u00a0 \"name\": \"VM_NAME\",\u00a0 \"resourcePolicies\": [\u00a0 \u00a0 \"projects/PROJECT_ID/regions/REGION/resourcePolicies/POLICY_NAME\"\u00a0 ],\u00a0 \"scheduling\": {\u00a0 \u00a0 \"onHostMaintenance\": \"MAINTENANCE_POLICY\"\u00a0 }}\n```\nReplace the following:- `` : the project ID of the project where the compact placement policy is located.\n- `` : the zone where to create the VM and where the machine type is located. You can only create a VM in a zone that is within the region of the compact placement policy you specify.\n- `` : the name of the VM to create.\n- `` : the region where the compact placement policy is located.\n- `` : the name of an existing compact placement policy.\n- `` : the [host maintenance policy](/compute/docs/instances/setting-vm-host-options#available_host_maintenance_properties) of the VM. If the compact placement policy you specify uses a `max-distance` value of `1` or `2` , you can only specify `TERMINATE` . Otherwise, you can specify either `MIGRATE` or `TERMINATE` .\nFor more information about the configuration options and the IAM roles to create a VM, see [Create and start a VM instance](/compute/docs/instances/create-start-instance) .\n### Create VMs in bulk that specify a compact placement policy\nYou can create VMs in bulk that specify an existing compact placement policy using the gcloud CLI and Compute Engine API.\nTo create VMs in bulk that specify a compact placement policy, use the [gcloud compute instances bulk create command](/sdk/gcloud/reference/compute/instances/bulk/create) with the `--resource-policies` flag.\nFor example, to create VMs in bulk that all specify a `c2d-standard-2` machine type and the same compact placement policy, run the following command:\n```\ngcloud compute instances bulk create \\\n --async \\\n --count=COUNT \\\n --machine-type=c2d-standard-2 \\\n --maintenance-policy=MAINTENANCE_POLICY \\\n --name-pattern=NAME_PATTERN \\\n --project=PROJECT_ID \\\n --resource-policies=POLICY_NAME \\\n --zone=ZONE\n```\nReplace the following:- `` : the number of VMs to create.\n- `` : the [host maintenance policy](/compute/docs/instances/setting-vm-host-options#available_host_maintenance_properties) of the VM. If the compact placement policy you specify uses a `max-distance` value of `1` or `2` , you can only specify `TERMINATE` . Otherwise, you can specify either `MIGRATE` or `TERMINATE` .\n- `` : the name pattern for the VMs to create. Use the hash character ( `#` ) to replace it with a sequence of numbers. For example, specifying `vm-#` creates VMs with names `vm-1` , `vm-2` , and so on, up to the number of VMs specified in `` .\n- `` : the project ID of the project where the compact placement policy is located.\n- `` : the name of an existing compact placement policy.\n- `` : the zone where to bulk create the VMs. You can only create VMs in zones that are within the region of the compact placement policy you specify.\nTo create VMs in bulk that specify a compact placement policy, make a `POST` request to the [instances.bulkInsert method](/compute/docs/reference/rest/v1/instances/bulkInsert) with the `resourcePolicies` field.\nFor example, to create VMs in bulk that all specify a `c2d-standard-2` machine type and the same compact placement policy, make the following `POST` request:\n```\nPOST https://www.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances/bulkInsert{\u00a0 \"count\": \"COUNT\",\u00a0 \"machineType\": \"zones/ZONE/machineTypes/c2d-standard-2\",\u00a0 \"namePattern\": \"NAME_PATTERN\",\u00a0 \"instanceProperties\": {\u00a0 \u00a0 \"resourcePolicies\": [\u00a0 \u00a0 \u00a0 \"projects/PROJECT_ID/regions/REGION/resourcePolicies/POLICY_NAME\"\u00a0 \u00a0 ],\u00a0 \u00a0 \"scheduling\": {\u00a0 \u00a0 \u00a0 \"onHostMaintenance\": \"MAINTENANCE_POLICY\"\u00a0 \u00a0 }\u00a0 }}\n```\nReplace the following:- `` : the project ID of the project where the compact placement policy is located.\n- `` : the zone where to bulk create the VMs and where the machine type is located. You can only create VMs in zones that are within the region of the compact placement policy you specify.\n- `` : the number of VMs to create.\n- `` : the name pattern for the VMs to create. Use the hash character ( `#` ) to replace it with a sequence of numbers. For example, specifying `vm-#` creates VMs with names `vm-1` , `vm-2` , and so on, up to the number of VMs specified in `` .\n- `` : the region where the compact placement policy is located.\n- `` : the name of an existing compact placement policy.\n- `` : the [host maintenance policy](/compute/docs/instances/setting-vm-host-options#available_host_maintenance_properties) of the VM. If the compact placement policy you specify uses a `max-distance` value of `1` or `2` , you can only specify `TERMINATE` . Otherwise, you can specify either `MIGRATE` or `TERMINATE` .\nFor more information about the configuration options or the IAM roles to create VMs in bulk, see [Create VMs in bulk](/compute/docs/instances/multiple/create-in-bulk) .\n### Create an instance template that specifies a compact placement policy\nYou can create an instance template that specifies an existing compact placement policy using the gcloud CLI and Compute Engine API.\nAfter you create an instance template, you can use it to do the following:\n- [Apply a compact placement policy to VMs in a managed instance group](#apply-mig) .\n- [Create a VM from an instance template](/compute/docs/instances/create-vm-from-instance-template) .\n- [Create a reservation for a single project](/compute/docs/instances/reservations-single-project#specify-instance-template) .\n**Caution:** Placement policies are [regional resources](/compute/docs/regions-zones/global-regional-zonal-resources#regionalresources) . If you specify a placement policy when creating an instance template, the policy restricts the use of the template to the region where it is located. For example, if you create a compact placement policy in region `us-central1` and include the policy in an instance template, you can only use the template to create MIGs, VMs, or reservations of VMs within the same region.\nTo create an instance template that specifies a compact placement policy, use the [gcloud compute instance-templates create command](/sdk/gcloud/reference/compute/instance-templates/create) with the `--resource-policies` flag.\nFor example, to create an instance template that specifies a `c2d-standard-2` machine type and an existing compact placement policy, run the following command:\n```\ngcloud compute instance-templates create INSTANCE_TEMPLATE_NAME \\\n --machine-type=c2d-standard-2 \\\n --maintenance-policy=MAINTENANCE_POLICY \\\n --project=PROJECT_ID \\\n --resource-policies=POLICY_NAME\n```\nReplace the following:- `` : the name of the instance template.\n- `` : the [host maintenance policy](/compute/docs/instances/setting-vm-host-options#available_host_maintenance_properties) of the VM. If the compact placement policy you specify uses a `max-distance` value of `1` or `2` , you can only specify `TERMINATE` . Otherwise, you can specify either `MIGRATE` or `TERMINATE` .\n- `` : the project ID of the project where the compact placement policy you want to apply to the instance template is located.\n- `` : the name of an existing compact placement policy.\nTo create an instance template that specifies a compact placement policy, make a `POST` request to the [instanceTemplates.insert method](/compute/docs/reference/rest/v1/instanceTemplates/insert) . In the request body, specify the `resourcePolicies` field.\nFor example, to create an instance template that specifies a `c2d-standard-2` machine type and an existing compact placement policy, make the following `POST` request:\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/global/instanceTemplates{\u00a0 \"name\": \"INSTANCE_TEMPLATE_NAME\",\u00a0 \"machineType\": \"zones/ZONE/machineTypes/c2d-standard-2\",\u00a0 \"properties\": {\u00a0 \u00a0 \"resourcePolicies\": {\u00a0 \u00a0 \u00a0 \"POLICY_NAME\"\u00a0 \u00a0 },\u00a0 \u00a0 \"scheduling\": {\u00a0 \u00a0 \u00a0 \"onHostMaintenance\": \"MAINTENANCE_POLICY\"\u00a0 \u00a0 }\u00a0 }}\n```\nReplace the following:- `` : the project ID of the project where the compact placement policy you want to apply to the instance template is located.\n- `` : the zone where the machine type is located.\n- `` : the name of the instance template.\n- `` : the name of an existing compact placement policy.\n- `` : the [host maintenance policy](/compute/docs/instances/setting-vm-host-options#available_host_maintenance_properties) of the VM. If the compact placement policy you specify uses a `max-distance` value of `1` or `2` , you can only specify `TERMINATE` . Otherwise, you can specify either `MIGRATE` or `TERMINATE` .\nFor more information about the configuration options to create an instance template, see [Create instance templates](/compute/docs/instance-templates/create-instance-templates) .\n### Apply a compact placement policy to the VMs in a MIG\nAfter you [create an instance template](#create-instance-template) that specifies a compact placement policy, you can use the template to do the following:\n- [Create a MIG that specifies the same compact placement policy](#apply-new-mig) .\n- [Apply the compact placement policy to an existing MIG](#apply-existing-mig) .\nIf you want to apply a compact placement policy to a MIG, creating or applying the policy to a regional MIG with the  [distribution shape](/compute/docs/instance-groups/regional-mig-distribution-shape) is recommended. This way, whenever a regional MIG needs to scale out by creating VMs, it selects the zone where to create the VMs based on your reservations, quotas, and hardware requirements.\n**Note:** If you want to apply the same compact placement policies to multiple MIGs, the placement policy restricts the total number of VMs you can apply the policy to. To overcome this limitation, create separate instance templates that each specify a compact placement policy with duplicate properties, and then use one template per MIG only.\nYou can create a MIG using an instance template that specifies a compact placement policy using the gcloud CLI and Compute Engine API.\nTo create a MIG using an instance template that specifies a compact placement policy, use the [gcloud compute instance-groups managed create command](/sdk/gcloud/reference/compute/instance-groups/managed/create) with the `--template` flag.\nFor example, to create a regional MIG with an distribution shape, run the following command:\n```\ngcloud compute instance-groups managed create MIG_NAME \\\n --project=PROJECT_ID \\\n --region=REGION \\\n --size=SIZE \\\n --target-distribution-shape=any-single-zone \\\n --template=INSTANCE_TEMPLATE_NAME\n```\nReplace the following:- `` : the name of the MIG to create.\n- `` : the project ID of the project where the compact placement policy and the instance template that specifies the placement policy is located.\n- `` : the region where to create the MIG, which must match with the region where the compact placement policy is located.\n- `` : the size of the MIG.\n- `` : the name of an existing instance template that specifies a compact placement policy.\nTo create a MIG using an instance template that specifies a compact placement policy, make a `POST` request to the [instanceGroupManagers.insert](/compute/docs/reference/rest/v1/instanceGroupManagers/insert) or [regionInstanceGroupManagers.insert](/compute/docs/reference/rest/v1/regionInstanceGroupManagers/insert) methods with the `instanceTemplate` field set to the name of the existing template.\nFor example, to create a regional MIG with default VM properties and the distribution shape, make the following `POST` request:\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/regions/REGION/instanceGroupManagers{\u00a0 \"name\": \"MIG_NAME\",\u00a0 \"instanceTemplate\": \"global/instanceTemplates/INSTANCE_TEMPLATE_NAME\",\u00a0 \"distributionPolicy\": {\u00a0 \u00a0 \"targetShape\": \"ANY_SINGLE_ZONE\"\u00a0 },\u00a0 \"targetSize\": SIZE}\n```\nReplace the following:- `` : the project ID of the project where the compact placement policy and the instance template that specifies the placement policy are located.\n- `` : the region where to create the MIG, which must match with the region where the compact placement policy is located.\n- `` : the name of the MIG to create.\n- `` : the name of an existing instance template that specifies a compact placement policy.\n- `` : the size of the MIG.\nFor more information about the configuration options and the IAM roles to create MIGs, see [Basic scenarios for creating MIGs](/compute/docs/instance-groups/creating-groups-of-managed-instances) .\nYou can apply a compact placement policy to an existing MIG using an instance template that specifies the same placement policy using the gcloud CLI and Compute Engine API.\nTo update a MIG to use an instance template that specifies a compact placement policy, use the [gcloud compute instance-groups managed rolling-action start-update command](/sdk/gcloud/reference/compute/instance-groups/managed/rolling-action/start-update) with the `--version=template` flag.\nFor example, to update a regional MIG to use an instance template that specifies a compact placement policy and replace the existing VMs from the MIG with new VMs that specify the template's properties, run the following command:\n```\ngcloud compute instance-groups managed rolling-action start-update MIG_NAME \\\n --project=PROJECT_ID \\\n --region=REGION \\\n --type=proactive \\\n --version=template=INSTANCE_TEMPLATE_NAME\n```\nReplace the following:- `` : the name of an existing MIG.\n- `` : the project ID of the project where the MIG, the compact placement policy, and the instance template that specifies the placement policy are located.\n- `` : the region where the MIG is located. You can only apply the compact placement policy to a MIG that is in the same region.\n- `` : the name of an existing instance template that specifies a compact placement policy.\nTo update a MIG to use an instance template that specifies a compact placement policy, and automatically apply the properties of the template and the placement policy to existing VMs in the MIG, make a `PATCH` request to the [instanceGroupManagers.insert](/compute/docs/reference/rest/v1/instanceGroupManagers/insert) or [regionInstanceGroupManagers.insert](/compute/docs/reference/rest/v1/regionInstanceGroupManagers/insert) with the `instanceTemplate` field.\nFor example, to update a regional MIG to use an instance template that specifies a compact placement policy and replace the existing VMs from the MIG with new VMs that specify the template's properties, make the following `PATCH` request:\n```\nPATCH https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/regions/REGION/instanceGroupManagers/MIG_NAME{\u00a0 \"instanceTemplate\": \"global/instanceTemplates/INSTANCE_TEMPLATE_NAME\",\u00a0 \"updatePolicy\": {\u00a0 \u00a0 \"type\": \"PROACTIVE\"\u00a0 }}\n```\nReplace the following:- `` : the project ID of the project where the MIG, the compact placement policy, and the instance template that specifies the placement policy are located.\n- `` : the region where the MIG is located. You can only apply the compact placement policy to a MIG that is in the same region.\n- `` : the name of an existing MIG.\n- `` : the name of an existing instance template that specifies a compact placement policy.\nFor more information about the configuration options and the IAM roles to update the VMs in a MIG, see [Update and apply new configurations to VMs in a MIG](/compute/docs/instance-groups/updating-migs) .\n## Verify the physical location of a VM\nAfter you apply a compact placement policy to a VM, you can view how the compact placement policy affected its physical location in relation to other VMs that specify the same policy. This helps you determine if the compact placement policy was correctly applied to a VM and map which VMs are the closest to each other.\nYou can verify the physical location of a VM that specifies a placement policy using the gcloud CLI and Compute Engine API.\nTo view the physical location of a VM that specifies a compact placement policy, use the [gcloud compute instances describe command](/sdk/gcloud/reference/compute/instances/describe) with the `--format` flag.\n```\ngcloud compute instances describe VM_NAME \\\n --format=\"table[box,title=VM-Position](resourcePolicies.scope():sort=1,resourceStatus.physicalHost:label=location)\" \\\n --project=PROJECT_ID \\\n --zone=ZONE\n```\nReplace the following:- `` : the name of an existing VM.\n- `` : the project ID of the project where the VM is located.\n- `` : the zone where the VM is located.\nThe output is similar to the following:\n```\nVM-Position\nRESOURCE_POLICIES: us-central1/resourcePolicies/example-policy']\nPHYSICAL_HOST: /CCCCCCC/BBBBBB/AAAA\n```\nThe value for the `PHYSICAL_HOST` field is composed by three parts. These parts each represent the cluster, rack, and host where the VM is located.\nWhen comparing the position of two VMs that specify the same compact placement policy, the more parts in the `PHYSICAL_HOST` field the VMs share, the closer they are located to each other. For example, if two VMs both specify one of the following sample values for the `PHYSICAL_HOST` field:- ` **/CCCCCCC/** ` `xxxxxx/xxxx` : the two VMs are placed in the same cluster, which equals a `max-distance` value of `2` . VMs placed in the same cluster experience low network latency.\n- ` **/CCCCCCC/BBBBBB/** ` `xxxx` : the two VMs are placed in the same rack, which equals a `max-distance` value of `1` . VMs placed in the same rack experience lower network latency than VMs placed in the same cluster.\n- ` **/CCCCCCC/BBBBBB/AAAA** ` : the two VMs share the same host. VMs placed in the same host minimize network latency as much as possible.\nTo view the physical location of a VM that specifies a compact placement policy, make a `GET` request to the [instances.get method](/compute/docs/reference/rest/v1/instances/get) .\n```\nGET https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances/VM_NAME\n```\nReplace the following:- `` : the project ID of the project where the the VM is located.\n- `` : the zone where the VM is located.\n- `` : the name of an existing VM that specifies a placement policy.\nThe output is similar to the following:\n```\n{...\"resourcePolicies\": [\u00a0 \"https://www.googleapis.com/compute/v1/projects/example-project/regions/us-central1/resourcePolicies/example-policy\"],\"resourceStatus\": {\u00a0 \"physicalHost\": \"/xxxxxxxx/xxxxxx/xxxxx\"},...}\n```\nThe value for the `physicalHost` field is composed by three parts. These parts each represent the cluster, rack, and host where the VM is located.\nWhen comparing the position of two VMs that specify the same compact placement policy, the more parts in the `physicalHost` field the VMs share, the closer they are located to each other. For example, if two VMs both specify one of the following sample values for the `physicalHost` field:- ` **/CCCCCCC/** ` `xxxxxx/xxxx` : the two VMs are placed in the same cluster, which equals a `max-distance` value of `2` . VMs placed in the same cluster experience low network latency.\n- ` **/CCCCCCC/BBBBBB/** ` `xxxx` : the two VMs are placed in the same rack, which equals a `max-distance` value of `1` . VMs placed in the same rack experience lower network latency than VMs placed in the same cluster.\n- ` **/CCCCCCC/BBBBBB/AAAA** ` : the two VMs share the same host. VMs placed in the same host minimize network latency as much as possible.## What's next?\n- Learn how to [view placement policies](/compute/docs/instances/view-placement-policies) .\n- Learn how to [replace, remove, or delete placement policies](/compute/docs/instances/manage-placement-policies) .\n- Learn how to do the following with a VM that specifies a placement policy:- [View the status of the VM](/compute/docs/instances/checking-instance-status) .\n- [Connect to the VM](/compute/docs/instances/connecting-to-instance) .", "guide": "Compute Engine"}