{"title": "Cloud Build - Deploy to Compute Engine", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Cloud Build - Deploy to Compute Engine\nThis guide explains how to perform zero-downtime blue/green deployments on Compute Engine Managed Instance Groups (MIGs) using Cloud Build and Terraform.\nCloud Build enables you to automate a variety of developer processes, including building and deploying applications to various Google Cloud runtimes such as Compute Engine, [Google Kubernetes Engine](/build/docs/deploying-builds/deploy-gke) , [GKE Enterprise](/anthos/multicluster-management/gateway/tutorials/cloud-build-integration) , and [Cloud Functions](/build/docs/deploying-builds/deploy-functions) .\n [Compute Engine MIGs](/compute/docs/instance-groups) enable you to operate applications on multiple identical Virtual Machines (VMs). You can make your workloads scalable and highly available by taking advantage of automated MIG services, including: autoscaling, autohealing, regional (multiple zone) deployment, and automatic updating. Using the blue/green continuous deployment model, you will learn how to gradually transfer user traffic from one MIG (blue) to another MIG (green), both of which are running in production.", "content": "## Design overviewThe following diagram shows the blue/green deployment model used by the code sample described in this document:\n \nAt a high level, this model includes the following components:- Two Compute Engine VM pools: Blue and Green.\n- Three external HTTP(S) load balancers:- A Blue/Green load balancer, that routes traffic from end users to either the Blue or the Green pool of VM instances.\n- A Blue load balancer that routes traffic from QA engineers and developers to the Blue VM instance pool.\n- A Green load balancer that routes traffic from QA engineers and developers to the Green instance pool.\n- Two sets of users:- End users who have access to the Blue/Green load balancer, which points them to either the Blue or the Green instance pool.\n- QA engineers and developers who require access to both sets of pools for development and testing purposes. They can access both the Blue and the Green load balancers, which routes them to the Blue Instance pool and the Green instance pool respectively.\nThe Blue and the Green VMs pools are implemented as Compute Engine MIGs, and external IP addresses are routed into the VMs in the MIG using external HTTP(s) load balancers. The code sample described in this document uses Terraform to configure this infrastructure.\nThe following diagram illustrates the developer operations that happens in the deployment:\n \nIn the diagram above, the red arrows represent the bootstrapping flow that occurs when you set up the deployment infrastructure for the first time, and the blue arrows represent the GitOps flow that occurs during every deployment.\nTo set up this infrastructure, you run a setup script that starts the bootstrap process and sets up the components for the GitOps flow.\nThe setup script executes a Cloud Build pipeline that performs the following operations:- Creates a repository in [Cloud Source Repositories](/source-repositories/docs) named`copy-of-gcp-mig-simple`and copies the source code from the GitHub sample repository to the repository in Cloud Source Repositories.\n- Creates two [Cloud Build triggers](/build/docs/triggers) named`apply`and`destroy`.\n **Note:** Cloud Build supports first-class integration with GitHub, GitLab, and Bitbucket. Cloud Source Repositories is used in this sample for demonstration purposes.\nThe `apply` trigger is attached to a Terraform file named `main.tfvars` in the Cloud Source Repositories. This file contains the Terraform variables representing the blue and the green load balancers.\nTo set up the deployment, you update the variables in the `main.tfvars` file. The `apply` trigger runs a Cloud Build pipeline that executes `tf_apply` and performs the following operations:- Creates two Compute Engine MIGs (one for green and one for blue), four Compute Engine VM instances (two for the green MIG and two for the blue MIG), the three load balancers (blue, green, and the splitter), and three public IP addresses.\n- Prints out the IP addresses that you can use to see the deployed applications in the blue and the green instances.\nThe destroy trigger is triggered manually to delete all the resources created by the apply trigger.## Objectives\n- Use Cloud Build and Terraform to set up external HTTP(S) load balancers with Compute Engine VM instance group backends.\n- Perform blue/green deployments on the VM instances.\n## CostsIn this document, you use the following billable components of Google Cloud:- [Compute Engine](/compute/all-pricing) \n- [Cloud Build](/build/pricing) \n- [Cloud Source Repositories](/source-repositories/pricing) \n- [Cloud Load Balancing](/load-balancing/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n## Trying it out\n- Run the setup script from the Google code sample repository:```\nbash <(curl https://raw.githubusercontent.com/GoogleCloudPlatform/cloud-build-samples/main/mig-blue-green/setup.sh)\n```\n- When the setup script asks for user consent, enter **yes** .The script finishes running in a few seconds.\n- In the Google Cloud console, open the Cloud Build **Build history** page: [Open the Build history page](https://console.cloud.google.com/cloud-build) \n- Click on the latest build.You see the **Build details** page, which shows a Cloud Build pipeline with three build steps: the first build step creates a repository in Cloud Source Repositories, the second step clones the contents of the sample repository in GitHub to Cloud Source Repositories, and the third step adds two build triggers.\n- Open Cloud Source Repositories: [  Open Cloud Source Repositories](https://source.cloud.google.com/repos) \n- From the repositories list, click `copy-of-gcp-mig-simple` .In the **History** tab at the bottom of the page, you'll see one commit with the description `A copy of https://github.com/GoogleCloudPlatform/cloud-build-samples.git` made by Cloud Build to create a repository named `copy-of-gcp-mig-simple` .\n- Open the Cloud Build **Triggers** page: [Open Triggers page](https://console.cloud.google.com/cloud-build/triggers) \n- You'll see two build triggers named `apply` and `destroy` . The `apply` trigger is attached to the `infra/main.tfvars` file in the `main` branch. This trigger is executed anytime the file is updated. The `destroy` trigger is a manual trigger.\n- To start the deploy process, update the `infra/main.tfvars` file:- In your terminal window, create and navigate into a folder named `deploy-compute-engine` :```\nmkdir ~/deploy-compute-enginecd ~/deploy-compute-engine\n```\n- Clone the `copy-of-gcp-mig-simple` repo:```\ngcloud source repos clone copy-of-mig-blue-green\n```\n- Navigate into the cloned directory:```\ncd ./copy-of-mig-blue-green\n```\n- Update `infra/main.tfvars` to replace blue with green:```\nsed -i'' -e 's/blue/green/g' infra/main.tfvars\n```\n- Add the updated file:```\ngit add .\n```\n- Commit the file:```\ngit commit -m \"Promote green\"\n```\n- Push the file:```\ngit push\n```Making changes to `infra/main.tfvars` triggers the execution of the `apply` trigger, which starts the deployment.\n- Open Cloud Source Repositories: [  Open Cloud Source Repositories](https://source.cloud.google.com/repos) \n- From the repositories list, click `copy-of-gcp-mig-simple` .You'll see the commit with the description `Promote green` in the **History** tab at the bottom of the page.\n- To view the execution of the `apply` trigger, open the **Build history** page in the Google Cloud console: [Open the Build history page](https://console.cloud.google.com/cloud-build) \n- Open the **Build details** page by clicking on the first build.You will see the `apply` trigger pipeline with two build steps. The first build step executes Terraform apply to create the Compute Engine and load balancing resources for the deployment. The second build step prints out the IP address where you can see the application running.\n- Open the IP address corresponding to the green MIG in a browser. You'll see a screenshot similar to the following showing the deployment: \n- Go to the Compute Engine **Instance group** page to see the Blue and the Green instance groups: [Open the Instance group page](https://console.cloud.google.com/compute/instanceGroups/list) \n- Open the **VM instances** page to see the four VM instances: [Open the VM Instance page](https://console.cloud.google.com/compute/instances) \n- Open the **External IP addresses** page to see the three load balancers: [Open the External IP addresses page](https://console.cloud.google.com/networking/addresses/list) \n## Understanding the codeSource code for this code sample includes:- Source code related to the setup script.\n- Source code related to the Cloud Build pipelines.\n- Source code related to the Terraform templates.\n### Setup script`setup.sh` is the setup script that runs the bootstrap process and creates the components for the blue/green deployment. The script performs the following operations:- Enables the Cloud Build, Resource Manager, Compute Engine, and Cloud Source Repositories APIs.\n- Grants the`roles/editor`IAM role to the Cloud Build service account in your project. This role is required for Cloud Build to create and set up the necessary GitOps components for the deployment.\n- Grants the`roles/source.admin`IAM role to the Cloud Build service account in your project. This role is required for the Cloud Build service account to create the Cloud Source Repositories in your project and clone the contents of the sample GitHub repository to your Cloud Source Repositories.\n- Generates a Cloud Build pipeline named `bootstrap.cloudbuild.yaml` inline, that:- Creates a new repository in Cloud Source Repositories.\n- Copies the source code from the sample GitHub repository to the new repository in Cloud Source Repositories.\n- Creates the apply and destroy build triggers.\n [  mig-blue-green/setup.sh ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/setup.sh) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/setup.sh) \n```\nset -eBLUE='\\033[1;34m'RED='\\033[1;31m'GREEN='\\033[1;32m'NC='\\033[0m'echo -e \"\\n${GREEN}\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\"echo -e \"# \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0#\"echo -e \"# \u00a0Zero-Downtime Blue/Green VM Deployments Using \u00a0 \u00a0 #\"echo -e \"# \u00a0Managed Instance Groups, Cloud Build & Terraform \u00a0#\"echo -e \"# \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0#\"echo -e \"\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##${NC}\\n\"echo -e \"\\nSTARTED ${GREEN}setup.sh:${NC}\"echo -e \"\\nIt's ${RED}safe to re-run${NC} this script to ${RED}recreate${NC} all resources.\\n\"echo \"> Checking GCP CLI tool is installed\"gcloud --version > /dev/null 2>&1readonly EXPLICIT_PROJECT_ID=\"$1\"readonly EXPLICIT_CONSENT=\"$2\"if [ -z \"$EXPLICIT_PROJECT_ID\" ]; then\u00a0 \u00a0 echo \"> No explicit project id provided, trying to infer\"\u00a0 \u00a0 PROJECT_ID=\"$(gcloud config get-value project)\"else\u00a0 \u00a0 PROJECT_ID=\"$EXPLICIT_PROJECT_ID\"fiif [ -z \"$PROJECT_ID\" ]; then\u00a0 \u00a0 echo \"ERROR: GCP project id was not provided as parameter and could not be inferred\"\u00a0 \u00a0 exit 1else\u00a0 \u00a0 readonly PROJECT_NUM=\"$(gcloud projects describe $PROJECT_ID --format='value(projectNumber)')\"\u00a0 \u00a0 if [ -z \"$PROJECT_NUM\" ]; then\u00a0 \u00a0 \u00a0 \u00a0 echo \"ERROR: GCP project number could not be determined\"\u00a0 \u00a0 \u00a0 \u00a0 exit 1\u00a0 \u00a0 fi\u00a0 \u00a0 echo -e \"\\nYou are about to:\"\u00a0 \u00a0 echo -e \" \u00a0* modify project ${RED}${PROJECT_ID}/${PROJECT_NUM}${NC}\"\u00a0 \u00a0 echo -e \" \u00a0* ${RED}enable${NC} various GCP APIs\"\u00a0 \u00a0 echo -e \" \u00a0* make Cloud Build ${RED}editor${NC} of your project\"\u00a0 \u00a0 echo -e \" \u00a0* ${RED}execute${NC} Cloud Builds and Terraform plans to create\"\u00a0 \u00a0 echo -e \" \u00a0* ${RED}4 VMs${NC}, ${RED}3 load balancers${NC}, ${RED}3 public IP addresses${NC}\"\u00a0 \u00a0 echo -e \" \u00a0* incur ${RED}charges${NC} in your billing account as a result\\n\"fiif [ \"$EXPLICIT_CONSENT\" == \"yes\" ]; then\u00a0 echo \"Proceeding under explicit consent\"\u00a0 readonly CONSENT=\"$EXPLICIT_CONSENT\"else\u00a0 \u00a0 echo -e \"Enter ${BLUE}'yes'${NC} if you want to proceed:\"\u00a0 \u00a0 read CONSENTfiif [ \"$CONSENT\" != \"yes\" ]; then\u00a0 \u00a0 echo -e \"\\nERROR: Aborted by user\"\u00a0 \u00a0 exit 1else\u00a0 \u00a0 echo -e \"\\n......................................................\"\u00a0 \u00a0 echo -e \"\\n> Received user consent\"fi\n## Executes action with one randomly delayed retry.#function do_with_retry {\u00a0 \u00a0 COMMAND=\"$@\"\u00a0 \u00a0 echo \"Trying $COMMAND\"\u00a0 \u00a0 (eval $COMMAND && echo \"Success on first try\") || ( \\\u00a0 \u00a0 \u00a0 \u00a0 echo \"Waiting few seconds to retry\" &&\u00a0 \u00a0 \u00a0 \u00a0 sleep 10 && \\\u00a0 \u00a0 \u00a0 \u00a0 echo \"Retrying $COMMAND\" && \\\u00a0 \u00a0 \u00a0 \u00a0 eval $COMMAND \\\u00a0 \u00a0 )}echo \"> Enabling required APIs\"# Some of these can be enabled later with Terraform, but I personally# prefer to do all API enablement in one place with gcloud.gcloud services enable \\\u00a0 \u00a0 --project=$PROJECT_ID \\\u00a0 \u00a0 cloudbuild.googleapis.com \\\u00a0 \u00a0 cloudresourcemanager.googleapis.com \\\u00a0 \u00a0 compute.googleapis.com \\\u00a0 \u00a0 sourcerepo.googleapis.com \\\u00a0 \u00a0 --no-user-output-enabled \\\u00a0 \u00a0 --quietecho \"> Adding Cloud Build to roles/editor\"gcloud projects add-iam-policy-binding \\\u00a0 \u00a0 \"$PROJECT_ID\" \\\u00a0 \u00a0 --member=\"serviceAccount:$PROJECT_NUM@cloudbuild.gserviceaccount.com\" \\\u00a0 \u00a0 --role='roles/editor' \\\u00a0 \u00a0 --condition=None \\\u00a0 \u00a0 --no-user-output-enabled \\\u00a0 \u00a0 --quietecho \"> Adding Cloud Build to roles/source.admin\"gcloud projects add-iam-policy-binding \\\u00a0 \u00a0 \"$PROJECT_ID\" \\\u00a0 \u00a0 --member=\"serviceAccount:$PROJECT_NUM@cloudbuild.gserviceaccount.com\" \\\u00a0 \u00a0 --condition=None \\\u00a0 \u00a0 --role='roles/source.admin' \\\u00a0 \u00a0 --no-user-output-enabled \\\u00a0 \u00a0 --quietecho \"> Configuring bootstrap job\"rm -rf \"./bootstrap.cloudbuild.yaml\"cat <<'EOT_BOOT' > \"./bootstrap.cloudbuild.yaml\"tags:- \"mig-blue-green-bootstrapping\"steps:- id: create_new_cloud_source_repo\u00a0 name: \"gcr.io/cloud-builders/gcloud\"\u00a0 script: |\u00a0 \u00a0 #!/bin/bash\u00a0 \u00a0 set -e\u00a0 \u00a0 echo \"(Re)Creating source code repository\"\u00a0 \u00a0 gcloud source repos delete \\\u00a0 \u00a0 \u00a0 \u00a0 \"copy-of-mig-blue-green\" \\\u00a0 \u00a0 \u00a0 \u00a0 --quiet || true\u00a0 \u00a0 gcloud source repos create \\\u00a0 \u00a0 \u00a0 \u00a0 \"copy-of-mig-blue-green\" \\\u00a0 \u00a0 \u00a0 \u00a0 --quiet- id: copy_demo_source_into_new_cloud_source_repo\u00a0 name: \"gcr.io/cloud-builders/gcloud\"\u00a0 env:\u00a0 \u00a0 - \"PROJECT_ID=$PROJECT_ID\"\u00a0 \u00a0 - \"PROJECT_NUMBER=$PROJECT_NUMBER\"\u00a0 script: |\u00a0 \u00a0 #!/bin/bash\u00a0 \u00a0 set -e\u00a0 \u00a0 readonly GIT_REPO=\"https://github.com/GoogleCloudPlatform/cloud-build-samples.git\"\u00a0 \u00a0 echo \"Cloning demo source repo\"\u00a0 \u00a0 mkdir /workspace/from/\u00a0 \u00a0 cd /workspace/from/\u00a0 \u00a0 git clone $GIT_REPO ./original\u00a0 \u00a0 cd ./original\u00a0 \u00a0 echo \"Cloning new empty repo\"\u00a0 \u00a0 mkdir /workspace/to/\u00a0 \u00a0 cd /workspace/to/\u00a0 \u00a0 gcloud source repos clone \\\u00a0 \u00a0 \u00a0 \u00a0 \"copy-of-mig-blue-green\"\u00a0 \u00a0 cd ./copy-of-mig-blue-green\u00a0 \u00a0 echo \"Making a copy\"\u00a0 \u00a0 cp -r /workspace/from/original/mig-blue-green/* ./\u00a0 \u00a0 echo \"Setting git identity\"\u00a0 \u00a0 git config user.email \\\u00a0 \u00a0 \u00a0 \u00a0 \"$PROJECT_NUMBER@cloudbuild.gserviceaccount.com\"\u00a0 \u00a0 git config user.name \\\u00a0 \u00a0 \u00a0 \u00a0 \"Cloud Build\"\u00a0 \u00a0 echo \"Commit & push\"\u00a0 \u00a0 git add .\u00a0 \u00a0 git commit \\\u00a0 \u00a0 \u00a0 \u00a0 -m \"A copy of $GIT_REPO\"\u00a0 \u00a0 git push- id: add_pipeline_triggers\u00a0 name: \"gcr.io/cloud-builders/gcloud\"\u00a0 env:\u00a0 \u00a0 - \"PROJECT_ID=$PROJECT_ID\"\u00a0 script: |\u00a0 \u00a0 #!/bin/bash\u00a0 \u00a0 set -e\u00a0 \u00a0 echo \"(Re)Creating destroy trigger\"\u00a0 \u00a0 gcloud builds triggers delete \"destroy\" --quiet || true\u00a0 \u00a0 gcloud builds triggers create manual \\\u00a0 \u00a0 \u00a0 \u00a0 --name=\"destroy\" \\\u00a0 \u00a0 \u00a0 \u00a0 --repo=\"https://source.developers.google.com/p/$PROJECT_ID/r/copy-of-mig-blue-green\" \\\u00a0 \u00a0 \u00a0 \u00a0 --branch=\"master\" \\\u00a0 \u00a0 \u00a0 \u00a0 --build-config=\"pipelines/destroy.cloudbuild.yaml\" \\\u00a0 \u00a0 \u00a0 \u00a0 --repo-type=CLOUD_SOURCE_REPOSITORIES \\\u00a0 \u00a0 \u00a0 \u00a0 --quiet\u00a0 \u00a0 echo \"(Re)Creating apply trigger\"\u00a0 \u00a0 gcloud builds triggers delete \"apply\" --quiet || true\u00a0 \u00a0 gcloud builds triggers create cloud-source-repositories \\\u00a0 \u00a0 \u00a0 \u00a0 --name=\"apply\" \\\u00a0 \u00a0 \u00a0 \u00a0 --repo=\"copy-of-mig-blue-green\" \\\u00a0 \u00a0 \u00a0 \u00a0 --branch-pattern=\"master\" \\\u00a0 \u00a0 \u00a0 \u00a0 --build-config=\"pipelines/apply.cloudbuild.yaml\" \\\u00a0 \u00a0 \u00a0 \u00a0 --included-files=\"infra/main.tfvars\" \\\u00a0 \u00a0 \u00a0 \u00a0 --quietEOT_BOOTecho \"> Waiting API enablement propagation\"do_with_retry \"(gcloud builds list --project \"$PROJECT_ID\" --quiet && gcloud compute instances list --project \"$PROJECT_ID\" --quiet && gcloud source repos list --project \"$PROJECT_ID\" --quiet) > /dev/null 2>&1\" > /dev/null 2>&1echo \"> Executing bootstrap job\"gcloud beta builds submit \\\u00a0 \u00a0 --project \"$PROJECT_ID\" \\\u00a0 \u00a0 --config ./bootstrap.cloudbuild.yaml \\\u00a0 \u00a0 --no-source \\\u00a0 \u00a0 --no-user-output-enabled \\\u00a0 \u00a0 --quietrm ./bootstrap.cloudbuild.yamlecho -e \"\\n${GREEN}All done. Now you can:${NC}\"echo -e \" \u00a0* manually run 'apply' and 'destroy' triggers to manage deployment lifecycle\"echo -e \" \u00a0* commit change to 'infra/main.tfvars' and see 'apply' pipeline trigger automatically\"echo -e \"\\n${GREEN}Few key links:${NC}\"echo -e \" \u00a0* Dashboard: https://console.cloud.google.com/home/dashboard?project=$PROJECT_ID\"echo -e \" \u00a0* Repo: https://source.cloud.google.com/$PROJECT_ID/copy-of-mig-blue-green\"echo -e \" \u00a0* Cloud Build Triggers: https://console.cloud.google.com/cloud-build/triggers;region=global?project=$PROJECT_ID\"echo -e \" \u00a0* Cloud Build History: https://console.cloud.google.com/cloud-build/builds?project=$PROJECT_ID\"echo -e \"\\n.............................\"echo -e \"\\n${GREEN}COMPLETED!${NC}\"\n```\n### Cloud Build pipelines`apply.cloudbuild.yaml` and `destroy.cloudbuild.yaml` are the Cloud Build config files that the setup script uses to set up the resources for the GitOps flow. `apply.cloudbuild.yaml` contains two build steps:- `tf_apply build`build step that calls the function`tf_install_in_cloud_build_step`, which installs Terraform.`tf_apply`that creates the resources used in the GitOps flow. The functions`tf_install_in_cloud_build_step`and`tf_apply`are defined in`bash_utils.sh`and the build step uses the`source`command to call them.\n- `describe_deployment`build step that calls the function`describe_deployment`that prints out the IP addresses of the load balancers.\n`destroy.cloudbuild.yaml` calls `tf_destroy` that deletes all the resources created by `tf_apply` .\nThe functions `tf_install_in_cloud_build_step` , `tf_apply` , `describe_deployment` , and `tf_destroy` are defined in the file `bash_utils.sh` . The build config files use the `source` command to call the functions.\n [  mig-blue-green/pipelines/apply.cloudbuild.yaml ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/pipelines/apply.cloudbuild.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/pipelines/apply.cloudbuild.yaml) \n```\nsteps:\u00a0 - id: run-terraform-apply\u00a0 \u00a0 name: \"gcr.io/cloud-builders/gcloud\"\u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 - \"PROJECT_ID=$PROJECT_ID\"\u00a0 \u00a0 script: |\u00a0 \u00a0 \u00a0 #!/bin/bash\u00a0 \u00a0 \u00a0 set -e\u00a0 \u00a0 \u00a0 source /workspace/lib/bash_utils.sh\u00a0 \u00a0 \u00a0 tf_install_in_cloud_build_step\u00a0 \u00a0 \u00a0 tf_apply\u00a0 - id: describe-deployment\u00a0 \u00a0 name: \"gcr.io/cloud-builders/gcloud\"\u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 - \"PROJECT_ID=$PROJECT_ID\"\u00a0 \u00a0 script: |\u00a0 \u00a0 \u00a0 #!/bin/bash\u00a0 \u00a0 \u00a0 set -e\u00a0 \u00a0 \u00a0 source /workspace/lib/bash_utils.sh\u00a0 \u00a0 \u00a0 describe_deploymenttags:\u00a0 - \"mig-blue-green-apply\"\n```\n [  mig-blue-green/pipelines/destroy.cloudbuild.yaml ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/pipelines/destroy.cloudbuild.yaml) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/pipelines/destroy.cloudbuild.yaml) \n```\nsteps:\u00a0 - id: run-terraform-destroy\u00a0 \u00a0 name: \"gcr.io/cloud-builders/gcloud\"\u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 - \"PROJECT_ID=$PROJECT_ID\"\u00a0 \u00a0 script: |\u00a0 \u00a0 \u00a0 #!/bin/bash\u00a0 \u00a0 \u00a0 set -e\u00a0 \u00a0 \u00a0 source /workspace/lib/bash_utils.sh\u00a0 \u00a0 \u00a0 tf_install_in_cloud_build_step\u00a0 \u00a0 \u00a0 tf_destroytags:\u00a0 - \"mig-blue-green-destroy\"\n```\nThe following code shows the function `tf_install_in_cloud_build_step` that's defined in `bash_utils.sh` . The build config files call this function to install Terraform on the fly. It creates a Cloud Storage bucket to record the Terraform status.\n [  mig-blue-green/lib/bash_utils.sh ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/lib/bash_utils.sh) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/lib/bash_utils.sh) \n```\nfunction tf_install_in_cloud_build_step {\u00a0 \u00a0 echo \"Installing deps\"\u00a0 \u00a0 apt update\u00a0 \u00a0 apt install \\\u00a0 \u00a0 \u00a0 \u00a0 unzip \\\u00a0 \u00a0 \u00a0 \u00a0 wget \\\u00a0 \u00a0 \u00a0 \u00a0 -y\u00a0 \u00a0 echo \"Manually installing Terraform\"\u00a0 \u00a0 wget https://releases.hashicorp.com/terraform/1.3.4/terraform_1.3.4_linux_386.zip\u00a0 \u00a0 unzip -q terraform_1.3.4_linux_386.zip\u00a0 \u00a0 mv ./terraform /usr/bin/\u00a0 \u00a0 rm -rf terraform_1.3.4_linux_386.zip\u00a0 \u00a0 echo \"Verifying installation\"\u00a0 \u00a0 terraform -v\u00a0 \u00a0 echo \"Creating Terraform state storage bucket $BUCKET_NAME\"\u00a0 \u00a0 gcloud storage buckets create \\\u00a0 \u00a0 \u00a0 \u00a0 \"gs://$BUCKET_NAME\" || echo \"Already exists...\"\u00a0 \u00a0 echo \"Configure Terraform provider and state bucket\"cat <<EOT_PROVIDER_TF > \"/workspace/infra/provider.tf\"terraform {\u00a0 required_version = \">= 0.13\"\u00a0 backend \"gcs\" {\u00a0 \u00a0 bucket = \"$BUCKET_NAME\"\u00a0 }\u00a0 required_providers {\u00a0 \u00a0 google = {\u00a0 \u00a0 \u00a0 source \u00a0= \"hashicorp/google\"\u00a0 \u00a0 \u00a0 version = \">= 3.77, < 5.0\"\u00a0 \u00a0 }\u00a0 }}EOT_PROVIDER_TF\u00a0 \u00a0 echo \"$(cat /workspace/infra/provider.tf)\"}\n```\nThe following code snippet shows the function `tf_apply` that's defined in `bash_utils.sh` . It first calls `terraform init` that loads all modules and custom libraries and then runs `terraform apply` to load the variables from the `main.tfvars` file.\n [  mig-blue-green/lib/bash_utils.sh ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/lib/bash_utils.sh) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/lib/bash_utils.sh) \n```\nfunction tf_apply {\u00a0 \u00a0 echo \"Running Terraform init\"\u00a0 \u00a0 terraform \\\u00a0 \u00a0 \u00a0 \u00a0 -chdir=\"$TF_CHDIR\" \\\u00a0 \u00a0 \u00a0 \u00a0 init\u00a0 \u00a0 echo \"Running Terraform apply\"\u00a0 \u00a0 terraform \\\u00a0 \u00a0 \u00a0 \u00a0 -chdir=\"$TF_CHDIR\" \\\u00a0 \u00a0 \u00a0 \u00a0 apply \\\u00a0 \u00a0 \u00a0 \u00a0 -auto-approve \\\u00a0 \u00a0 \u00a0 \u00a0 -var project=\"$PROJECT_ID\" \\\u00a0 \u00a0 \u00a0 \u00a0 -var-file=\"main.tfvars\"}\n```\nThe following code snippet shows the function `describe_deployment` that's defined in `bash_utils.sh` . It uses `gcloud compute addresses describe` to fetch the IP addresses of the load balancers using the name and prints them out.\n [  mig-blue-green/lib/bash_utils.sh ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/lib/bash_utils.sh) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/lib/bash_utils.sh) \n```\nfunction describe_deployment {\u00a0 \u00a0 NS=\"ns1-\"\u00a0 \u00a0 echo -e \"Deployment configuration:\\n$(cat infra/main.tfvars)\"\u00a0 \u00a0 echo -e \\\u00a0 \u00a0 \u00a0 \"Here is how to connect to:\" \\\u00a0 \u00a0 \u00a0 \"\\n\\t* active color MIG: http://$(gcloud compute addresses describe ${NS}splitter-address-name --region=us-west1 --format='value(address)')/\" \\\u00a0 \u00a0 \u00a0 \"\\n\\t* blue color MIG: http://$(gcloud compute addresses describe ${NS}blue-address-name --region=us-west1 --format='value(address)')/\" \\\u00a0 \u00a0 \u00a0 \"\\n\\t* green color MIG: http://$(gcloud compute addresses describe ${NS}green-address-name --region=us-west1 --format='value(address)')/\"\u00a0 \u00a0 echo \"Good luck!\"}\n```\nThe following code snippet shows the function `tf_destroy` that's defined in `bash_utils.sh` . It calls `terraform init` that loads all modules and custom libraries and then runs `terraform destroy` that unloads the Terraform variables.\n [  mig-blue-green/lib/bash_utils.sh ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/lib/bash_utils.sh) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/lib/bash_utils.sh) \n```\nfunction tf_destroy {\u00a0 \u00a0 echo \"Running Terraform init\"\u00a0 \u00a0 terraform \\\u00a0 \u00a0 \u00a0 \u00a0 -chdir=\"$TF_CHDIR\" \\\u00a0 \u00a0 \u00a0 \u00a0 init\u00a0 \u00a0 echo \"Running Terraform destroy\"\u00a0 \u00a0 terraform \\\u00a0 \u00a0 \u00a0 \u00a0 -chdir=\"$TF_CHDIR\" \\\u00a0 \u00a0 \u00a0 \u00a0 destroy \\\u00a0 \u00a0 \u00a0 \u00a0 -auto-approve \\\u00a0 \u00a0 \u00a0 \u00a0 -var project=\"$PROJECT_ID\" \\\u00a0 \u00a0 \u00a0 \u00a0 -var-file=\"main.tfvars\"}\n```\n### Terraform templatesYou'll find all the Terraform configuration files and variables in the `copy-of-gcp-mig-simple/infra/` folder.- `main.tf`: this is the Terraform configuration file\n- `main.tfvars`: this file defines the Terraform variables.\n- `mig/`and`splitter/`: these folders contain the modules that define the load balancers. The`mig/`folder contains the Terraform configuration file that defines the MIG for the Blue and the Green load balancers. The Blue and the Green MIGs are identical, therefore they are defined once and instantiated for the blue and the green objects. The Terraform configuration file for the splitter load balancer is in the`splitter/`folder .\nThe following code snippet shows the contents of `infra/main.tfvars` . It contains three variables: two that determine what application version to deploy to the Blue and the Green pools and a variable for the active color: Blue or Green. Changes to this file triggers the deployment.\n [  mig-blue-green/infra/main.tfvars ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/infra/main.tfvars) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/infra/main.tfvars) \n```\nMIG_VER_BLUE \u00a0 \u00a0 = \"v1\"MIG_VER_GREEN \u00a0 \u00a0= \"v1\"MIG_ACTIVE_COLOR = \"blue\"\n```\nThe following is a code snippet from `infra/main.tf` . In this snippet:- A variable is defined for the Google Cloud project.\n- Google is set as the Terraform provider.\n- A variable is defined for namespace. All objects created by Terraform are prefixed with this variable so that multiple versions of the application can be deployed in the same project and the object names don't collide with each other.\n- Variables`MIG_VER_BLUE`,`MIG_VER_BLUE`, and`MIG_ACTIVE_COLOR`are the bindings for the variables in the`infra/main.tfvars`file.\n [  mig-blue-green/infra/main.tf ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/infra/main.tf) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/infra/main.tf) \n```\nvariable \"project\" {\u00a0 type \u00a0 \u00a0 \u00a0 \u00a0= string\u00a0 description = \"GCP project we are working in.\"}provider \"google\" {\u00a0 project = var.project\u00a0 region \u00a0= \"us-west1\"\u00a0 zone \u00a0 \u00a0= \"us-west1-a\"}variable \"ns\" {\u00a0 type \u00a0 \u00a0 \u00a0 \u00a0= string\u00a0 default \u00a0 \u00a0 = \"ns1-\"\u00a0 description = \"The namespace used for all resources in this plan.\"}variable \"MIG_VER_BLUE\" {\u00a0 type \u00a0 \u00a0 \u00a0 \u00a0= string\u00a0 description = \"Version tag for 'blue' deployment.\"}variable \"MIG_VER_GREEN\" {\u00a0 type \u00a0 \u00a0 \u00a0 \u00a0= string\u00a0 description = \"Version tag for 'green' deployment.\"}variable \"MIG_ACTIVE_COLOR\" {\u00a0 type \u00a0 \u00a0 \u00a0 \u00a0= string\u00a0 description = \"Active color (blue | green).\"}\n```\nThe following code snippet from `infra/main.tf` shows the instantiation of the splitter module. This module takes in the active color so that the splitter load balancer knows which MIG to deploy the application.\n [  mig-blue-green/infra/main.tf ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/infra/main.tf) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/infra/main.tf) \n```\nmodule \"splitter-lb\" {\u00a0 source \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"./splitter\"\u00a0 project \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= var.project\u00a0 ns \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"${var.ns}splitter-\"\u00a0 active_color \u00a0 \u00a0 \u00a0 \u00a0 = var.MIG_ACTIVE_COLOR\u00a0 instance_group_blue \u00a0= module.blue.google_compute_instance_group_manager_default.instance_group\u00a0 instance_group_green = module.green.google_compute_instance_group_manager_default.instance_group}\n```\nThe following code snippet from `infra/main.tf` defines two identical modules for Blue and Green MIGs. It takes in the color, the network, and the subnetwork which are defined in the splitter module.\n [  mig-blue-green/infra/main.tf ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/infra/main.tf) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/infra/main.tf) \n```\nmodule \"blue\" {\u00a0 source \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"./mig\"\u00a0 project \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= var.project\u00a0 app_version \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= var.MIG_VER_BLUE\u00a0 ns \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = var.ns\u00a0 color \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"blue\"\u00a0 google_compute_network \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = module.splitter-lb.google_compute_network\u00a0 google_compute_subnetwork \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= module.splitter-lb.google_compute_subnetwork_default\u00a0 google_compute_subnetwork_proxy_only = module.splitter-lb.google_compute_subnetwork_proxy_only}module \"green\" {\u00a0 source \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = \"./mig\"\u00a0 project \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= var.project\u00a0 app_version \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= var.MIG_VER_GREEN\u00a0 ns \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = var.ns\u00a0 color \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"green\"\u00a0 google_compute_network \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = module.splitter-lb.google_compute_network\u00a0 google_compute_subnetwork \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= module.splitter-lb.google_compute_subnetwork_default\u00a0 google_compute_subnetwork_proxy_only = module.splitter-lb.google_compute_subnetwork_proxy_only}\n```\nThe file `splitter/main.tf` defines the objects that are created for the splitter MIG. The following is a code snippet from `splitter/main.tf` that contains the logic to switch between the Green and the Blue MIG. It's backed by the service `google_compute_region_backend_service` , which can route traffic to two backend regions: `var.instance_group_blue` or `var.instance_group_green` . `capacity_scaler` defines how much of the traffic to route.\nThe following code routes 100% of the traffic to the specified color, but you can update this code for canary deployment to route the traffic to a subset of the users.\n [  mig-blue-green/infra/splitter/main.tf ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/infra/splitter/main.tf) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/infra/splitter/main.tf) \n```\nresource \"google_compute_region_backend_service\" \"default\" {\u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= local.l7-xlb-backend-service\u00a0 region \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"us-west1\"\u00a0 load_balancing_scheme = \"EXTERNAL_MANAGED\"\u00a0 health_checks \u00a0 \u00a0 \u00a0 \u00a0 = [google_compute_region_health_check.default.id]\u00a0 protocol \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"HTTP\"\u00a0 session_affinity \u00a0 \u00a0 \u00a0= \"NONE\"\u00a0 timeout_sec \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = 30\u00a0 backend {\u00a0 \u00a0 group \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = var.instance_group_blue\u00a0 \u00a0 balancing_mode \u00a0= \"UTILIZATION\"\u00a0 \u00a0 capacity_scaler = var.active_color == \"blue\" ? 1 : 0\u00a0 }\u00a0 backend {\u00a0 \u00a0 group \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = var.instance_group_green\u00a0 \u00a0 balancing_mode \u00a0= \"UTILIZATION\"\u00a0 \u00a0 capacity_scaler = var.active_color == \"green\" ? 1 : 0\u00a0 }}\n```\nThe file `mig/main.tf` defines the objects pertaining to the Blue and the Green MIGs. The following code snippet from this file defines the Compute Engine instance template that's used to create the VM pools. Note that this instance template has the Terraform lifecycle property set to `create_before_destroy` . This is because, when updating the version of the pool, you cannot use the template to create the new version of the pools when it is still being used by the previous version of the pool. But if the older version of the pool is destroyed before creating the new template, there'll be a period of time when the pools are down. To avoid this scenario, we set the Terraform lifecycle to `create_before_destroy` so that the newer version of a VM pool is created first before the older version is destroyed.\n [  mig-blue-green/infra/mig/main.tf ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/infra/mig/main.tf) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/mig-blue-green/infra/mig/main.tf) \n```\nresource \"google_compute_instance_template\" \"default\" {\u00a0 name = local.l7-xlb-backend-template\u00a0 disk {\u00a0 \u00a0 auto_delete \u00a0= true\u00a0 \u00a0 boot \u00a0 \u00a0 \u00a0 \u00a0 = true\u00a0 \u00a0 device_name \u00a0= \"persistent-disk-0\"\u00a0 \u00a0 mode \u00a0 \u00a0 \u00a0 \u00a0 = \"READ_WRITE\"\u00a0 \u00a0 source_image = \"projects/debian-cloud/global/images/family/debian-10\"\u00a0 \u00a0 type \u00a0 \u00a0 \u00a0 \u00a0 = \"PERSISTENT\"\u00a0 }\u00a0 labels = {\u00a0 \u00a0 managed-by-cnrm = \"true\"\u00a0 }\u00a0 machine_type = \"n1-standard-1\"\u00a0 metadata = {\u00a0 \u00a0 startup-script = <<EOF\u00a0 \u00a0 #! /bin/bash\u00a0 \u00a0 sudo apt-get update\u00a0 \u00a0 sudo apt-get install apache2 -y\u00a0 \u00a0 sudo a2ensite default-ssl\u00a0 \u00a0 sudo a2enmod ssl\u00a0 \u00a0 vm_hostname=\"$(curl -H \"Metadata-Flavor:Google\" \\\u00a0 \u00a0 http://169.254.169.254/computeMetadata/v1/instance/name)\"\u00a0 \u00a0 sudo echo \"<html><body style='font-family: Arial; margin: 64px; background-color: light${var.color};'><h3>Hello, World!<br><br>version: ${var.app_version}<br>ns: ${var.ns}<br>hostname: $vm_hostname</h3></body></html>\" | \\\u00a0 \u00a0 tee /var/www/html/index.html\u00a0 \u00a0 sudo systemctl restart apache2\u00a0 \u00a0 EOF\u00a0 }\u00a0 network_interface {\u00a0 \u00a0 access_config {\u00a0 \u00a0 \u00a0 network_tier = \"PREMIUM\"\u00a0 \u00a0 }\u00a0 \u00a0 network \u00a0 \u00a0= var.google_compute_network.id\u00a0 \u00a0 subnetwork = var.google_compute_subnetwork.id\u00a0 }\u00a0 region = \"us-west1\"\u00a0 scheduling {\u00a0 \u00a0 automatic_restart \u00a0 = true\u00a0 \u00a0 on_host_maintenance = \"MIGRATE\"\u00a0 \u00a0 provisioning_model \u00a0= \"STANDARD\"\u00a0 }\u00a0 tags = [\"load-balanced-backend\"]\u00a0 # NOTE: the name of this resource must be unique for every update;\u00a0 # \u00a0 \u00a0 \u00a0 this is wy we have a app_version in the name; this way\u00a0 # \u00a0 \u00a0 \u00a0 new resource has a different name vs old one and both can\u00a0 # \u00a0 \u00a0 \u00a0 exists at the same time\u00a0 lifecycle {\u00a0 \u00a0 create_before_destroy = true\u00a0 }}\n```## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\n### Delete individual resources\n- Delete the Compute Engine resources created by the apply trigger:- Open the Cloud Build **Triggers** page: [Open Triggers page](https://console.cloud.google.com/cloud-build/triggers) \n- In the **Triggers** table, locate the row corresponding to the **destroy** trigger, and click **Run** . When the trigger completes execution, the resources created by the **apply** trigger are deleted.\n- Delete the resources created during bootstrapping by running the following command in your terminal window:```\nbash <(curl https://raw.githubusercontent.com/GoogleCloudPlatform/cloud-build-samples/main/mig-blue-green/teardown.sh)\n```\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- Delete a Google Cloud project:\n- ```\ngcloud projects delete PROJECT_ID\n```\n## What's next\n- Learn more about [build triggers](/build/docs/triggers) .\n- Learn how to [view build provenance](/build/docs/securing-builds/view-build-provenance) .", "guide": "Cloud Build"}