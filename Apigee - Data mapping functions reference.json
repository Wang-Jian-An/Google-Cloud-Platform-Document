{"title": "Apigee - Data mapping functions reference", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Data mapping functions reference\n**Announcement:** Application Integration is now available for your Google Cloud project. You can now use both Apigee Integration and Application Integration within the same Google Cloud project. [Learn more](/apigee/docs/api-platform/integration/using-application-integration)\n", "content": "## \n Supported mapping functions\n### ADD function\n| Function Name | Description          | Usage  | Input parameter | Return value   |\n|:----------------|:-------------------------------------------------|:-----------|:------------------|:------------------------|\n| ADD    | Adds the specified number to an existing number. | ADD(value) | Number to add. | Sum of the two numbers. |\n**Sample data** : `$var1$ = 15`\n**Usage** : `$var1$.ADD(5)`\n**Output** : `20`\n### AND function\n| Function Name | Description               | Usage  | Input parameter | Return value |\n|:----------------|:--------------------------------------------------------------------|:-----------|:------------------|:---------------|\n| AND    | Performs the logical AND operation on the specified boolean values. | AND(value) | A boolean value. | A boolean.  |\n**Sample data** : `$var1$ = TRUE`\n**Usage** : `$var1$.AND(TRUE)`\n**Output** : `TRUE`\n### APPEND_ALL function\n| Function Name | Description         | Usage       | Input parameter                                      | Return value     |\n|:----------------|:----------------------------------------------|:--------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------|\n| APPEND_ALL  | Appends all the specified values to an array. | APPEND_ALL(value1, value2, ...) | Values to append. The data type of the value to append should match the data type of the array. For example, for a String array you can append only string values. | Array with the appended values. |\n**Sample data** : `$var1$ = {3,6,8,1}`\n**Usage** : `$var1$.APPEND_ALL(7,9,15)`\n**Output** : `{3,6,8,1,7,9,15}`\n**Sample data** : `$var1$ = {True,False,True}`\n**Usage** : `$var1$.APPEND_ALL(False,True)`\n`False`\n`True`\n**Output** : `{True,False,True,False,True}`\n**Sample data** : `$var1$ = {\"Hello\",\"Apigee\"}`\n**Usage** : `$var1$.APPEND_ALL(\"Integrations\",\"Test\")`\n`Integrations`\n`Test`\n**Output** : `{\"Hello\",\"Apigee\",\"Integrations\",\"Test\"}`\n### APPEND_ELEMENT function\n| Function Name | Description       | Usage     | Input parameter | Return value       |\n|:----------------|:------------------------------------|:----------------------|:------------------|:--------------------------------------|\n| APPEND_ELEMENT | Appends an element to a JSON array. | APPEND_ELEMENT(value) | Value to append. | JSON array with the appended element. |\n**Sample data** : `$var1$ = [\"first\", \"second\", \"third\", \"fourth\"]`\n**Usage** : `$var1$.APPEND_ELEMENT(\"fifth\")`\n`fifth`\n`var1`\n**Output** : `[\"first\", \"second\", \"third\", \"fourth\", \"fifth\"]` .\n### APPEND function\n| Function Name | Description        | Usage   | Input parameter                                      | Return value     |\n|:----------------|:-----------------------------------------|:--------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------------------|\n| APPEND   | Appends the specified value to an array. | APPEND(value) | Value to append. The data type of the value to append should match the data type of the array. For example, for a Boolean array you can append only True or False. | Array with the appended value. |\n**Sample data** : `$var1$ = {3,6,8,1}`\n**Usage** : `$var1$.APPEND(7)`\n**Output** : `{3,6,8,1,7}`\n**Sample data** : `$var1$ = {True,False,True}`\n**Usage** : `$var1$.APPEND(True)`\n**Output** : `{True,False,True,True}`\n**Sample data** : `$var1$ = {\"Hello\",\"Apigee\"}`\n**Usage** : `$var1$.APPEND(\"Integrations\")`\n`Integrations`\n**Output** : `{\"Hello\",\"Apigee\",\"Integrations\"}`\n### AVG function\n| Function Name | Description              | Usage | Input parameter | Return value                |\n|:----------------|:----------------------------------------------------------------|:--------|------------------:|:---------------------------------------------------------------------------|\n| AVG    | Calculates the numerical average of all the values in an array. | AVG() |    nan | Average of all the values in an array. The return value is of type Double. |\n**Sample data** : `$var1$ = {2,4,9,3}`\n**Usage** : `$var1$.AVG()`\n**Output** : `4.5`\n**Sample data** : `$var1$ = {2.0,6.1,3.9}`\n**Usage** : `$var1$.AVG()`\n**Output** : `4.0`\n### CEIL function\n| Function Name | Description                  | Usage | Input parameter | Return value |\n|:----------------|:--------------------------------------------------------------------------------|:--------|------------------:|:---------------|\n| CEIL   | Computes the smallest integer that is greater than or equal to the given input. | CEIL() |    nan | An integer. |\n**Sample data** : `$var1$ = {3.4}`\n**Usage** : `$var1$.CEIL()`\n**Output** : `4`\n### CONCAT function\n| Function Name | Description             | Usage   | Input parameter      | Return value   |\n|:----------------|:-------------------------------------------------------------|:--------------|:-------------------------------------|:---------------------|\n| CONCAT   | Concatenates the specified characters to an existing string. | CONCAT(value) | String of characters to concatenate. | Concatenated string. |\n**Sample data** : `$var1$ = \"HelloApigee\"`\n**Usage** : `$var1$.CONCAT(\"Integrations\")`\n`Integrations`\n**Output** : `HelloApigeeIntegrations`\n### CONTAINS function\n| Function Name | Description                  | Usage   | Input parameter | Return value              |\n|:----------------|:--------------------------------------------------------------------------------|:----------------|:------------------|:-----------------------------------------------------------------|\n| CONTAINS  | Checks the occurrence of the specified value in a given string or string array. | CONTAINS(value) | Value to search. | A boolean. Returns TRUE if a match is found and FALSE otherwise. |\n**Sample data** : `$var1$ = \"Hello Apigee Integrations\"`\n**Usage** : `$var1$.CONTAINS(\"xyz\")`\n`xyz`\n**Output** : `FALSE`\n### DECODE_BASE64_STRING function\n| Function Name  | Description        | Usage     | Input parameter | Return value   |\n|:---------------------|:------------------------------------------|:-----------------------|------------------:|:------------------------|\n| DECODE_BASE64_STRING | Decodes a base64 string to UTF-8 charset. | DECODE_BASE64_STRING() |    nan | A decoded UTF-8 string. |\n**Sample data** : `$var1$ = \"SGVsbG8gSW50ZWdyYXRpb24h\"`\n**Usage** : `$var1$.DECODE_BASE64_STRING()`\n**Output** : `Hello Integration!`\n### DIVIDE function\n| Function Name | Description           | Usage   | Input parameter    | Return value      |\n|:----------------|:----------------------------------------------------|:--------------|:----------------------------|:------------------------------------|\n| DIVIDE   | Divides an existing number by the specified number. | DIVIDE(value) | Divide by number (divisor). | Quotient of the division operation. |\n**Sample data** : `$var1$ = 16`\n**Usage** : `$var1$.DIVIDE(3)`\n**Output** : `5`\n### EQUALS function\n| Function Name | Description           | Usage   | Input parameter | Return value                     |\n|:----------------|:------------------------------------------------------|:--------------|:------------------|:------------------------------------------------------------------------------------------------|\n| EQUALS   | Compares the specified value with the existing value. | EQUALS(value) | Value to compare. | A boolean. Returns TRUE if the specified value matches the existing value and FALSE otherwise. |\n**Sample data** : `$var1$ = \"Apigee Integrations\"`\n**Usage** : `$var1$.EQUALS(\"Apigee Integrations\")`\n**Output** : `TRUE`\n**Sample data** : `$var1$ = 34`\n**Usage** : `$var1$.EQUALS(23)`\n**Output** : `FALSE`\n### EQUALS_IGNORE_CASE function\n| Function Name  | Description           | Usage      | Input parameter | Return value                         |\n|:-------------------|:------------------------------------------------------|:--------------------------|:------------------|:----------------------------------------------------------------------------------------------------------------|\n| EQUALS_IGNORE_CASE | Compares the specified value with the existing value. | EQUALS_IGNORE_CASE(value) | Value to compare. | A boolean. Returns TRUE if the specified value matches the existing value (ignoring case) and FALSE otherwise. |\n**Sample data** : `$var1$ = \"Apigee Integrations\"`\n**Usage** : `$var1$.EQUALS_IGNORE_CASE(\"apigee integrations\")`\n`apigee integrations`\n**Output** : `TRUE`\n### EPOCH_TO_HUMAN_READABLE_TIME function\n| Function Name    | Description                | Usage          | Input parameter                                                                                                                                            | Return value         |\n|:-----------------------------|:--------------------------------------------------------------------------|:--------------------------------------------||:----------------------------------------------|\n| EPOCH_TO_HUMAN_READABLE_TIME | Converts Unix epoch time (in milliseconds) to human-readable time format. | EPOCH_TO_HUMAN_READABLE_TIME (value, value) | This function takes the following arguments: First argument (string): Timestamp format pattern such as hh:mm:ss. Second argument (string): Target timezone. Valid values include UTC, UTC with offset, GMT, and other time zone names. Only the values UTC and GMT can be specified in the short form. For any other time zone, you must specify the full time zone name. For example, if you want to specify the \"Australia/Melbourne\" time zone, you must specify Australia/Melbourne as the value and not AEDT. For a full list of timezone names, see List of tz database time zones. | Converted timestamp in human-readable format. |\n**Sample data:** `$var1$ = 1667494335011`\n**Usage 1:** `$var1$.EPOCH_TO_HUMAN_READABLE_TIME(\"EEE, d MMM yyyy HH:mm:ss z\",\"UTC\")`\nConvert var1 to a human-readable timestamp of format in UTC timezone.\n**Output:** `Thu, 3 Nov 2022 16:52:15 UTC`\n**Usage 2:** `$var1$.EPOCH_TO_HUMAN_READABLE_TIME(\"EEE, yy-MM-dd HH:mm:ss,SSS\",\"GMT\")`\nConvert var1 to a human-readable timestamp of format in GMT timezone.\n**Output:** `Thu, 22-11-03 16:52:15,011`\n**Usage 3:** `$var1$.EPOCH_TO_HUMAN_READABLE_TIME(\"EEE, yy-MM-dd HH:mm:ss,SSS ZZZZ\",\"America/Los_Angeles\")`\nConvert var1 to a human-readable timestamp of format in America/Los_Angeles timezone.\n**Output:** `Thu, 22-11-03 09:52:15,011 GMT-07:00`\n### EXPONENT function\n| Function Name | Description                | Usage   | Input parameter | Return value          |\n|:----------------|:--------------------------------------------------------------------------|:----------------|:------------------|:---------------------------------------------------|\n| EXPONENT  | Calculates the value of an existing number raised to the specified power. | EXPONENT(value) | Power value.  | Value of the number raised to the specified power. |\n**Sample data** : `$var1$ = 5`\n**Usage** : `$var1$.EXPONENT(3)`\n**Output** : `125`\n### FILTER function\n| Function Name | Description                                                          | Usage                                                                                             | Input parameter          | Return value           |\n|:----------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------|:------------------------------------------------------|\n| FILTER   | Filters the array elements that satisfy a given filter condition. Note that a filter condition must evaluate to TRUE or FALSE. A filter condition includes one or more transformation functions applied on the current array iteration element. | FILTER(~objn -> Variable or Value) Where ~objn indicates the current array element for which you want to apply the transformation functions. By default, the value for n starts from 1. For JSON arrays with schema, you can use a dot (.) notation following the current array element to directly access the nested property of the that array element. For example, ~objn.PROPERTY. | A filter condition that evaluates to TRUE or FALSE. | An array of elements that match the filter condition. |\n**Sample data** : `$var1$ = { \"sara@example.com\", \"bola@example.com\", \"222larabrown@gmail.com\", \"dana@examplepetstore.com\", \"cloudysanfrancisco@gmail.com\"}`\n**Usage** : `$var1$.FILTER(~obj1-> ~obj1.CONTAINS(\"@gmail.com\"))`\nFilter the string elements which contain in .\n**Output** : `{\"222larabrown@gmail.com\",\"cloudysanfrancisco@gmail.com\"}`\n**Sample data** :\n```\n $var1$ = {\n \"citynames\": [ {\n  \"city\": \"Abbeville\",\n  \"state\": \"Louisiana\"\n },\n {\n  \"city\": \"Aberdeen\",\n  \"state\": \"Maryland\"\n },\n {\n  \"city\": \"Benicia\",\n  \"state\": \"California\"\n },\n {\n  \"city\": \"Chehalis\",\n  \"state\": \"Washington\"\n },\n {\n  \"city\": \"Aberdeen\",\n  \"state\": \"Washington\"\n },\n {\n  \"city\": \"Aberdeen\",\n  \"state\": \"Mississippi\"\n },\n {\n  \"city\": \"Cheektowaga\",\n  \"state\": \"New York\"\n }\n ]\n}\n```\n**Usage** :\n```\nvar1.citynames\n.FILTER(~obj1-> \n ~obj1\n .GET_PROPERTY(\"city\")\n .EQUALS(\"Aberdeen\")\n)\n```\nFilter the elements which have the city as in .\n**Output** :\n```\n [{\n \"city\": \"Aberdeen\",\n \"state\": \"Maryland\"\n },\n {\n \"city\": \"Aberdeen\",\n \"state\": \"Washington\"\n },\n {\n \"city\": \"Aberdeen\",\n \"state\": \"Mississippi\"\n }]\n```\n**Sample data** :\n```\n $var1$ =\n{\n \"products\": [ {\n  \"PA\": \"Integrations\",\n  \"users\": [  {\n   \"name\": \"Ariel\",\n   \"role\": [   \"editor\",\n   \"approver\"\n   ]\n  },\n  {\n   \"name\": \"Dana\",\n   \"role\": [   \"admin\",\n   \"deployer\"\n   ]\n  },\n  {\n   \"name\": \"Lee\",\n   \"role\": [   \"viewer\"\n   ]\n  }\n  ]\n },\n {\n  \"PA\": \"Apigee\",\n  \"users\": [  {\n   \"name\": \"Mahan\",\n   \"role\": [   \"editor\",\n   \"admin\",\n   \"deployer\"\n   ]\n  },\n  {\n   \"name\": \"Quinn\",\n   \"role\": [   \"invoker\"\n   ]\n  }\n  ]\n },\n {\n  \"PA\": \"Connectors\",\n  \"users\": [  {\n   \"name\": \"Kiran\",\n   \"role\": [   \"invoker\",\n   \"admin\",\n   \"deployer\"\n   ]\n  },\n  {\n   \"name\": \"Sasha\",\n   \"role\": [   \"admin\"\n   ]\n  }\n  ]\n }\n ]\n}\n```\n**Usage** :\n```\n var1.products\n .FOR_EACH(~obj1 ->\n  ~obj1\n .SET_PROPERTY(\n  ~obj1\n  .GET_PROPERTY(\"users\")\n  .FILTER(~obj2 ->\n  ~obj2\n  .GET_PROPERTY(\"role\")\n  .TO_STRING()\n  .CONTAINS(\"admin\")\n  )\n  , \n \"users\"\n )\n )  \n```\nFilter the elements which contain in of .\n**Output** :\n```\n [{\n  \"PA\": \"Integrations\",\n  \"users\": [{\n  \"name\": \"Dana\",\n  \"role\": [\"admin\", \"deployer\"]\n  }]\n }, {\n  \"PA\": \"Apigee\",\n  \"users\": [{\n  \"name\": \"Mahan\",\n  \"role\": [\"editor\", \"admin\", \"deployer\"]\n  }]\n }, {\n  \"PA\": \"Connectors\",\n  \"users\": [{\n  \"name\": \"Kiran\",\n  \"role\": [\"invoker\", \"admin\", \"deployer\"]\n  }, {\n  \"name\": \"Sasha\",\n  \"role\": [\"admin\"]\n  }]\n }]\n```### FLATTEN function\n| Function Name | Description                | Usage  | Input parameter | Return value   |\n|:----------------|:-------------------------------------------------------------------------|:----------|------------------:|:------------------------|\n| FLATTEN   | Flattens a JSON array recursively to create a new one-dimensional array. | FLATTEN() |    nan | A flattened JSON array. |\n**Sample data** : `$var1$ = [[1, 2], [3, 4]]`\n**Usage** : `$var1$.FLATTEN()`\n**Output** : `[1, 2, 3 ,4]`\n### FLOOR function\n| Function Name | Description                  | Usage | Input parameter | Return value |\n|:----------------|:--------------------------------------------------------------------------------|:--------|------------------:|:---------------|\n| FLOOR   | Computes the greatest integer that is less than or equal to the provided input. | FLOOR() |    nan | An integer. |\n**Sample data** : `$var1$ = {27.6}`\n**Usage** : `$var1$.FLOOR()`\n**Output** : `27`\n### FOR_EACH function\n| Function Name | Description                | Usage                                                                                             | Input parameter   | Return value   |\n|:----------------|:---------------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------|:----------------------|\n| FOR_EACH  | Applies one or more transformation functions for each element in an array. | FOR_EACH(~objn -> Variable or Value) Where ~objn indicates the current array iteration element for which you want to apply the transformation functions. By default, the value for n starts from 1. For JSON arrays with schema, you can use a dot (.) notation following to the current array element to directly access the nested property of the that array element. See example. | Transformation functions. | An array of elements. |\n**Sample data** : `$var1$ = {\"Alex\",\"Bola\",\"Charlie\",\"Dana\",\"Hao\"}`\n**Usage** : `$var1$.FOR_EACH(~obj1-> ~obj1.CONCAT(\"@gmail.com\"))`\nConcat the value to .\n**Output** : `{ \"Alex@gmail.com\", \"Bola@gmail.com\", \"Charlie@gmail.com\", \"Dana@gmail.com\", \"Hao@gmail.com\" }`\n**Sample data** :\n```\n $var1$ =\n{\n \"employeeDetails\": [ {\n  \"name\": \"Alex\"\n },\n {\n  \"name\": \"Bola\"\n },\n {\n  \"name\": \"Charlie\"\n }\n ]\n}\n```\n**Usage** : `$var1$.employeeDetails.FOR_EACH(~obj1-> ~obj1.SET_PROPERTY(\"Google\",\"company\"))`\nAdd the property to .\n**Output** :\n```\n[ {\n \"name\": \"Alex\",\n \"company\": \"Google\"\n },\n {\n \"name\": \"Bola\",\n \"company\": \"Google\"\n },\n {\n \"name\": \"Charlie\",\n \"company\": \"Google\"\n }\n]\n```\n**Sample data** :\n```\n $var1$ =\n{\n \"employeeDetails\": [ {\n  \"name\": \"Alex\",\n  \"details\": [  {\n   \"age\": \"27\",\n   \"address\": \"1800 Amphibious Blvd. Mountain View, CA 94045\"\n  }\n  ]\n },\n {\n  \"name\": \"Bob\",\n  \"details\": [  {\n   \"age\": \"25\",\n   \"address\": \"8 Rue du Nom Fictif 341 Paris\"\n  }\n  ]\n }\n ],\n \"deptDetails\": [ {\n  \"id1\": \"HR\"\n },\n {\n  \"id2\": \"Finance\"\n },\n {\n  \"id3\": \"Sales\"\n }\n ]\n}\n```\n**Usage** : `$var1$.employeeDetails.FOR_EACH(~obj1-> ~obj1.GET_PROPERTY(\"details\").FOR_EACH(~obj2-> ~obj2.SET_PROPERTY(\"dd/mm/yyyy\", \"dob\")))`\nAdd the placeholder property to in .\n**Output** :\n```\n [ [  {\n  \"age\": \"27\",\n  \"address\": \"1800 Amphibious Blvd. Mountain View, CA 94045\",\n  \"dob\": \"dd/mm/yyyy\"\n  }\n ],\n [  {\n  \"age\": \"25\",\n  \"address\": \"8 Rue du Nom Fictif 341 Paris\",\n  \"dob\": \"dd/mm/yyyy\"\n  }\n ]\n ]\n```\n**Sample data** :\n```\n  $var1$ =\n  {\"citynames\": [  {\n  \"city\": \"Abbeville\",\n  \"info\": {\n    \"pincode\": 29620,\n    \"state\": \"South Carolina\",\n    \"location\" : {\n      \"lat\" : \"50.1055 N\",\n      \"lon\": \"1.8368 E\" \n    }  \n   } \n  },\n  {\n  \"city\": \"Aberdeen\",\n  \"info\": {\n    \"pincode\": AB10,\n    \"state\": \"Scotland\",\n    \"location\" : {\n      \"lat\" : \"57.1499 N\",\n      \"lon\": \"2.0938 W\" \n    }  \n   } \n  },\n  {\n  \"city\": \"Benicia\",\n \"info\": {\n    \"pincode\": 94510,\n    \"state\": \"California\",\n    \"location\" : {\n      \"lat\" : \"38.0494 N\",\n      \"lon\": \"122.1586 W\" \n    }  \n   } \n  }\n ]\n }\n```\n**Usage** : `$var1$.citynames.FOR_EACH(~obj1-> ~obj1.city.CONCAT(\",\").CONCAT(~obj1.info.location.lat).CONCAT(\",\").CONCAT(~obj1.info.location.lon))`\nConcat the nested properties of using a separator (,) in .\n**Output** :\n```\n[ \"Abbeville,50.1055 N,1.8368 E\",\n \"Aberdeen,57.1499 N,2.0938 W\",\n \"Benicia,38.0494 N,122.1586 W\"\n]\n```\n**Sample data** :\n```\n  $var2$ =\n  {\n  \"cityName\": \"$~obj1.city$\",\n  \"latitude\": \"$~obj1.info.location.lat$\",\n  \"longitude\": \"$~obj1.info.location.lon$\"\n  }\n \n```\n```\n  $var1$ =\n  {\"citynames\": [  {\n  \"city\": \"Abbeville\",\n  \"info\": {\n    \"pincode\": 29620,\n    \"state\": \"South Carolina\",\n    \"location\" : {\n      \"lat\" : \"50.1055 N\",\n      \"lon\": \"1.8368 E\" \n    }  \n   } \n  },\n  {\n  \"city\": \"Aberdeen\",\n  \"info\": {\n    \"pincode\": AB10,\n    \"state\": \"Scotland\",\n    \"location\" : {\n      \"lat\" : \"57.1499 N\",\n      \"lon\": \"2.0938 W\" \n    }  \n   } \n  },\n  {\n  \"city\": \"Benicia\",\n \"info\": {\n    \"pincode\": 94510,\n    \"state\": \"California\",\n    \"location\" : {\n      \"lat\" : \"38.0494 N\",\n      \"lon\": \"122.1586 W\" \n    }  \n   } \n  }\n ]\n }\n \n```\n**Usage** : `$var1$.citynames.FOR_EACH(~obj1-> $var2$.RESOLVETEMPLATE())`\nResolves references of `~obj1` in , where `~obj1` is the current iterating element of .\n**Output** :\n```\n[ {\n \"cityName\": \"Abbeville\",\n \"latitude\": \"50.1055 N\",\n \"longitude\": \"1.8368 E\",\n }\n {\n \"cityName\": \"Aberdeen\",\n \"latitude\": \"57.1499 N\",\n \"longitude\": \"2.0938 W\",\n }\n {\n \"cityName\": \"Benicia\",\n \"latitude\": \"38.0494 N\",\n \"longitude\": \"122.1586 W\",\n }\n \n]\n```### GET_ELEMENT function\n| Function Name | Description                                              | Usage    | Input parameter    | Return value   |\n|:----------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-------------------|:----------------------------|:----------------------|\n| GET_ELEMENT  | Returns the element at the specified index in a JSON array. In the array, the first value is available at index 0 and the last value is available at index n-1 where n is the size of the array. | GET_ELEMENT(value) | Index value of the element. | Value of the element. |\n**Sample data** : `$var1$ = [\"first\", \"second\", \"third\", \"fourth\"]`\n**Usage** : `$var1$.GET_ELEMENT(2)`\n`2`\n**Output** : `third`\n### GET_PROPERTY function\n| Function Name | Description             | Usage    | Input parameter | Return value   |\n|:----------------|:--------------------------------------------------------------|:--------------------|:------------------|:-----------------------|\n| GET_PROPERTY | Returns the value of the specified property in a JSON object. | GET_PROPERTY(value) | Property name. | Value of the property. |\n**Sample data** : `$var1$ = {\"productId\": 23,\"productName\": \"radio\"}`\n**Usage** : `$var1$.GET_PROPERTY(\"productId\")`\n`productId`\n**Output** : `23`\n### GET function\n| Function Name | Description                                            | Usage  | Input parameter    | Return value                                       |\n|:----------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------|:-----------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| GET    | Returns the value in an array at a specified index. In an array, the first value is available at index 0 and the last value is available at index n-1 where n is the size of the array. | GET(value) | Index value of type Integer. | Value at a given index of an array. The return type depends on the data type of the array. For example, for an integer array, this function returns an integer value. |\n**Sample data** : `$var1$ = {11,6,7,2,15,8}`\n**Usage** : `$var1$.GET(3)`\n**Output** : `2`\n**Sample data** : `$var1$ = {\"Hello\", \"Test\", \"Apigee\", \"Integrations\", \"API Trigger\", \"Cloud\"}`\n**Usage** : `$var1$.GET(5)`\n**Output** : `Cloud`\n### GREATER_THAN_EQUAL_TO function\n| Function Name   | Description               | Usage      | Input parameter   | Return value                         |\n|:----------------------|:----------------------------------------------------------------------|:-----------------------------|:------------------------|:-------------------------------------------------------------------------------------------------------------|\n| GREATER_THAN_EQUAL_TO | Checks if an integer is greater than or equal to the specified value. | GREATER_THAN_EQUAL_TO(value) | Integer value to check. | A boolean. Returns TRUE if an integer is greater than or equal to the specified value, and FALSE otherwise. |\n**Sample data** : `$var1$ = 35`\n**Usage** : `$var1$.GREATER_THAN_EQUAL_TO(15)`\n**Output** : `TRUE`\n### GREATER_THAN function\n| Function Name | Description              | Usage    | Input parameter | Return value                        |\n|:----------------|:-------------------------------------------------------------------|:--------------------|:------------------|:----------------------------------------------------------------------------------------------------------|\n| GREATER_THAN | Checks if an existing number is greater than the specified number. | GREATER_THAN(value) | Number to check. | A boolean. Returns TRUE if the existing number is greater than the specified value, and FALSE otherwise. |\n**Sample data** : `$var1$ = 25`\n**Usage** : `$var1$.GREATER_THAN(27)`\n**Output** : `FALSE`\n### LENGTH function\n| Function Name | Description                       | Usage | Input parameter | Return value   |\n|:----------------|:------------------------------------------------------------------------------------------------------|:---------|------------------:|:----------------------|\n| LENGTH   | Calculates the length of a string. The length of a string is the number of characters in the string. | LENGTH() |    nan | Length of the string. |\n**Sample data** : `$var1$ = \"Hello Apigee Test\"`\n**Usage** : `$var1$.LENGTH()`\n**Output** : `17`\n### LESS_THAN_EQUAL_TO function\n| Function Name  | Description              | Usage      | Input parameter   | Return value                        |\n|:-------------------|:-------------------------------------------------------------------|:--------------------------|:------------------------|:----------------------------------------------------------------------------------------------------------|\n| LESS_THAN_EQUAL_TO | Checks if an integer is less than or equal to the specified value. | LESS_THAN_EQUAL_TO(value) | Integer value to check. | A boolean. Returns TRUE if an integer is less than or equal to the specified value, and FALSE otherwise. |\n**Sample data** : `$var1$ = 35`\n**Usage** : `$var1$.LESS_THAN_EQUAL_TO(15)`\n**Output** : `FALSE`\n### LESS_THAN function\n| Function Name | Description              | Usage   | Input parameter | Return value                       |\n|:----------------|:----------------------------------------------------------------|:-----------------|:------------------|:--------------------------------------------------------------------------------------------------------|\n| LESS_THAN  | Checks if an existing number is less than the specified number. | LESS_THAN(value) | Number to check. | A boolean. Returns TRUE if the existing number is less than the specified number, and FALSE otherwise. |\n**Sample data** : `$var1$ = 25`\n**Usage** : `$var1$.LESS_THAN(27)`\n`27`\n**Output** : `TRUE`\n### MAX function\n| Function Name | Description       | Usage | Input parameter | Return value    |\n|:----------------|:-------------------------------------|:--------|------------------:|:---------------------------|\n| MAX    | Finds the highest value in an array. | MAX() |    nan | Highest value in an array. |\n**Sample data** : `$var1$ = {5,8,2,1}`\n**Usage** : `$var1$.MAX()`\n**Output** : `8`\n**Sample data** : `$var1$ = {2.5,6.1,4.9}`\n**Usage** : `$var1$.MAX()`\n**Output** : `6.1`\n### MERGE function\n| Function Name | Description                                | Usage  | Input parameter  | Return value    |\n|:----------------|:------------------------------------------------------------------------------------------------------------------------------------------|:-------------|:---------------------|:---------------------------|\n| MERGE   | Merges two JSON variables (objects or arrays). If same value is present in both the variables, the function removes the duplicate value. | MERGE(value) | JSON value to merge. | A JSON object or an array. |\n**Sample data** : `$var1$ = {\"productId\": 23}`\n**Usage** : `$var1$.MERGE({\"productName\":\"radio\"})`\n`{\"productName\":\"radio\"}`\n**Output** : {\"productId\": 23,\"productName\": \"radio\"}\n**Sample data** : `$var1$ = [\"first\", \"second\", \"third\"]`\n**Usage** : `$var1$.MERGE([4,5])`\n`[4,5]`\n**Output** : `[\"first\", \"second\", \"third\",4,5]`\n### MIN function\n| Function Name | Description       | Usage | Input parameter | Return value    |\n|:----------------|:------------------------------------|:--------|------------------:|:--------------------------|\n| MIN    | Finds the lowest value in an array. | MIN() |    nan | Lowest value in an array. |\n**Sample data** : `$var1$ = {5,8,2,1}`\n**Usage** : `$var1$.MIN()`\n**Output** : `1`\n**Sample data** : `$var1$ = {2.5,6.1,4.9}`\n**Usage** : `$var1$.MIN()`\n**Output** : `2.5`\n### MOD function\n| Function Name | Description                | Usage  | Input parameter  | Return value       |\n|:----------------|:------------------------------------------------------------------------|:-----------|:----------------------|:-------------------------------------|\n| MOD    | Divides two values and returns the remainder of the division operation. | MOD(value) | Value of the divisor. | Remainder of the division operation. |\n**Sample data** : `$var1$ = 90`\n**Usage** : `$var1$.MOD(3)`\n`3`\n**Output** : `0`\n### MULTIPLY function\n| Function Name | Description           | Usage   | Input parameter  | Return value   |\n|:----------------|:-------------------------------------------------------|:----------------|:--------------------|:------------------------|\n| MULTIPLY  | Multiplies an existing number by the specified number. | MULTIPLY(value) | Number to multiply. | Product of two numbers. |\n**Sample data** : `$var1$ = 10`\n**Usage** : `$var1$.MULTIPLY(3)`\n**Output** : `30`\n### NAND function\n| Function Name | Description               | Usage  | Input parameter | Return value |\n|:----------------|:---------------------------------------------------------------------|:------------|:------------------|:---------------|\n| NAND   | Performs the logical NAND operation on the specified boolean values. | NAND(value) | A boolean value. | A boolean.  |\n**Sample data** : `$var1$ = TRUE`\n**Usage** : `$var1$.NAND(TRUE)`\n**Output** : `FALSE`\n### NOR function\n| Function Name | Description               | Usage  | Input parameter | Return value |\n|:----------------|:--------------------------------------------------------------------|:-----------|:------------------|:---------------|\n| NOR    | Performs the logical NOR operation on the specified boolean values. | NOR(value) | A boolean value. | A boolean.  |\n**Sample data** : `$var1$ = FALSE`\n**Usage** : `$var1$.NOR(FALSE)`\n**Output** : `TRUE`\n### NOT function\n| Function Name | Description        | Usage | Input parameter | Return value |\n|:----------------|:-----------------------------------------|:--------|------------------:|:---------------|\n| NOT    | Returns the opposite value of a boolean. | NOT() |    nan | A boolean.  |\n**Sample data** : `$var1$ = FALSE`\n**Usage** : `$var1$.NOT()`\n**Output** : `TRUE`\n### OR function\n| Function Name | Description              | Usage  | Input parameter | Return value |\n|:----------------|:-------------------------------------------------------------------|:----------|:------------------|:---------------|\n| OR    | Performs the logical OR operation on the specified boolean values. | OR(value) | A boolean value. | A boolean.  |\n**Sample data** : `$var1$ = FALSE`\n**Usage** : `$var1$.OR(TRUE)`\n**Output** : `TRUE`\n### REMOVE function\n| Function Name | Description        | Usage   | Input parameter | Return value          |\n|:----------------|:-------------------------------------------|:--------------|:------------------|:--------------------------------------------------|\n| REMOVE   | Removes the specified value from an array. | REMOVE(value) | Value to remove. | Updated array after remvoing the specified value. |\n**Sample data** : `$var1$ = {\"Hello\",\"Apigee\",\"Integrations\"}`\n**Usage** : `$var1$.REMOVE(\"Integrations\")`\n`Integrations`\n**Output** : `{\"Hello\",\"Apigee\"}`\n### REMOVE_AT function\n| Function Name | Description            | Usage   | Input parameter   | Return value          |\n|:----------------|:---------------------------------------------------------|:-----------------|:--------------------------|:----------------------------------------------------|\n| REMOVE_AT  | Removes an element from an array at the specified index. | REMOVE_AT(value) | Index value in the array. | Updated array after remvoing the specified element. |\n**Sample data** : `$var1$ = {\"Hello\",\"Apigee\",\"Integrations\"}`\n**Usage** : `$var1$.REMOVE_AT(1)`\n**Output** : `{\"Hello\",\"Integrations\"}`\n### REMOVE_PROPERTY function\n| Function Name | Description       | Usage     | Input parameter | Return value                   |\n|:----------------|:---------------------------------------|:-----------------------|:------------------|:---------------------------------------------------------------------------------------|\n| REMOVE_PROPERTY | Removes a property from a JSON object. | REMOVE_PROPERTY(value) | Property name. | Updated JSON object after removing the specified property and its corresponding value. |\n**Sample data** :\n```\n$var1$ =\n{\n \"name\": \"Alex\",\n \"address\": {\n \"street\": \"1800 Amphibious Blvd\",\n \"city\": \"Mountain View\",\n \"state\": \"CA\",\n \"pincode\": \"94045\"\n }\n} \n```\n**Usage** : `$var1$.REMOVE_PROPERTY(\"address.street\")`\nRemove the address.street property from the JSON.\n**Output** :\n```\n{\n \"name\": \"Alex\",\n \"address\": {\n \"city\": \"Mountain View\",\n \"state\": \"CA\",\n \"pincode\": \"94045\"\n }\n}\n```### REPLACE_ALL function\n| Function Name | Description            | Usage      | Input parameter                                               | Return value        |\n|:----------------|:---------------------------------------------------------|:--------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------|\n| REPLACE_ALL  | Replaces all the occurrences of a substring in a string. | REPLACE_ALL(value, value) | This function takes the following arguments: First argument: String to match in the existing string. Second argument: The replacement string. Note: The maximum size of the replacement string is 10 KB. | Updated string with the replaced values. |\n**Sample data** : `$var1$ = \"HelloApigee\"`\n**Usage** : `$var1$.REPLACE_ALL(\"Apigee\", \"Google\")`\n**Output** : `HelloGoogle`\n### RESOLVE_TEMPLATE function\n| Function Name | Description                 | Usage    | Input parameter | Return value           |\n|:-----------------|:------------------------------------------------------------------------------|:-------------------|------------------:|:-----------------------------------------------------|\n| RESOLVE_TEMPLATE | Resolves references in a template string that contains $variable$ references. | RESOLVE_TEMPLATE() |    nan | Resolved template with the reference variable value. |\n**Sample data** :\n```\n$var1$ =\n{\n \"name\": \"Alex\",\n \"address\": \"$var2$\",\n \"age\": \"25\"\n}\n```\n```\n$var2$ =\n{\n \"street\": \"1800 Amphibious Blvd\",\n \"city\": \"Mountain View\",\n \"state\": \"CA\",\n \"pincode\": \"94045\"\n}\n```\n**Usage** : `$var1$.RESOLVE_TEMPLATE()`\nResolve var2 variable reference in var1.\n**Output** :\n```\n{\n \"name\": \"Alex\",\n \"address\": {\n \"street\": \"1800 Amphibious Blvd\",\n \"city\": \"Mountain View\",\n \"state\": \"CA\",\n \"pincode\": \"94045\"\n },\n \"age\": \"25\"\n}\n```\n**Sample data** :\n- `$var1$ = Hello $var2$`\n- `$var2$ = World`**Usage** : `$var1$.RESOLVE_TEMPLATE()`\nResolve var2 variable reference in var1.\n**Output** : `Hello World`\n### ROUND function\n| Function Name | Description        | Usage | Input parameter | Return value |\n|:----------------|:----------------------------------------|:--------|------------------:|:---------------|\n| ROUND   | Rounds a number to the nearest integer. | ROUND() |    nan | An integer. |\n**Sample data** : `$var1$ = 15.6`\n**Usage** : `$var1$.ROUND()`\n**Output** : `16`\n### SET function\n| Function Name | Description             | Usage   | Input parameter | Return value                                         | Unnamed: 5   |\n|:----------------|:------------------------------------------------------------|:-----------------|------------------:|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------|\n| SET    | Updates the value of a string array at the specified index. | SET(value,value) |    nan | This function takes the following arguments: First argument (integer): Index of the string array where the value should be updated. Second argument: The replacement string. | Updated string array. |\n**Sample data** : `$var1$ = {\"Hello\",\"World\",\"Integrations\"}`\n**Usage** : `$var1$.SET(2,\"Apigee\")`\n**Output** : `{\"Hello\",\"World\",\"Apigee\"}`\n### SET_PROPERTY function\n| Function Name | Description         | Usage    | Input parameter   | Return value           |\n|:----------------|:---------------------------------------------|:--------------------|:-------------------------|:--------------------------------------------------------|\n| SET_PROPERTY | Adds or updates a property in a JSON object. | SET_PROPERTY(value) | Property name and value. | A JSON object with the newly added or updated property. |\n**Sample data** : `$var1$ = {\"productId\":23}`\n**Usage** : `$var1$.SET_PROPERTY(\"radio\",\"productName\")`\n**Output** : `{\"productId\":23,\"productName\":\"radio\"}` .\n**Sample data** : `$var1$ = {\"productId\":23}`\n**Usage** : `$var1$.SET_PROPERTY({\"productName\",\"radio\"},\"productDetails\")`\n**Output** : `{\"productId\":23,\"productDetails\":{\"productName\":\"radio\"}}` .\n**Sample data** : `$var1$ = {\"productId\":23}`\n**Usage** : `$var1$.SET_PROPERTY(\"34\",\"productId\")`\n`productId`\n**Output** : `{\"productId\":34}` .\n### SIZE function\n| Function Name | Description        | Usage | Input parameter | Return value       |\n|:----------------|:-------------------------------------------|:--------|------------------:|:--------------------------------------|\n| SIZE   | Counts the number of elements in an array. | SIZE() |    nan | Total number of elements in an array. |\n**Sample data** : `$var1$ = {\"Hello\", \"Apigee\", \"Integrations\"}`\n**Usage** : `$var1$.SIZE()`\n**Output** : `3`\n**Sample data** : `$var1$ = {5,8,2,1,7}`\n**Usage** : `$var1$.SIZE()`\n**Output** : `5`\n### SPLIT function\n| Function Name | Description          | Usage  | Input parameter              | Return value |\n|:----------------|:--------------------------------------------------|:-------------|:--------------------------------------------------------------------|:----------------|\n| SPLIT   | Splits a string based on the specified delimiter. | SPLIT(value) | A character or a sequence of characters to use to split the string. | A string array. |\n**Sample data** : `$var1$ = \"Hello Apigee Integrations\"`\n**Usage** : `$var1$.SPLIT(\" \")`\n**Output** : `{\"Hello\",\"Apigee\",\"Integrations\"}`\n**Sample data** : `$var1$ = \"Test,Integrations\"`\n**Usage** : `$var1$.SPLIT(\",\")`\n**Output** : `{\"Test\",\"Integrations\"}`\n### SUBSTRING function\n| Function Name | Description                       | Usage     | Input parameter                         | Return value        |\n|:----------------|:-------------------------------------------------------------------------------------------------------|:------------------------|:-------------------------------------------------------------------------------------------------------------------|:------------------------------------------|\n| SUBSTRING  | Returns the substring of the current string from the start index inclusive to the end index exclusive. | SUBSTRING(value, value) | This function takes the following arguments: First argument: Start index value. Second argument: End index value. | String between the start and end indexes. |\n**Sample data** : `$var1$ = \"HelloApigee\"`\n**Usage** : `$var1$.SUBSTRING(1, 5)`\n**Output** : `ello`\n### SUBTRACT function\n| Function Name | Description            | Usage   | Input parameter  | Return value    |\n|:----------------|:--------------------------------------------------------|:----------------|:--------------------|:---------------------------|\n| SUBTRACT  | Subtracts the specified number from an existing number. | SUBTRACT(value) | Number to subtract. | Difference of two numbers. |\n**Sample data** : `$var1$ = 10`\n**Usage** : `$var1$.SUBTRACT(15)`\n**Output** : `-5`\n### SUM function\n| Function Name | Description      | Usage | Input parameter | Return value                                       |\n|:----------------|:---------------------------------|:--------|------------------:|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| SUM    | Adds all the values in an array. | SUM() |    nan | Sum of all the numbers in an array. The return type depends on the type of the array. For example, for an array of type Double, the return type is a double value. |\n**Sample data** : `$var1$ = {5,8,2,1}`\n**Usage** : `$var1$.SUM()`\n**Output** : `16`\n### TO_BASE_64 function\n| Function Name | Description            | Usage  | Input parameter | Return value    |\n|:----------------|:-----------------------------------------------------------|:-------------|------------------:|:-------------------------|\n| TO_BASE_64  | Encodes a string to base64 format using the UTF-8 charset. | TO_BASE_64() |    nan | A base64 encoded string. |\n**Sample data** : `$var1$ = \"Hello World!\"`\n**Usage** : `$var1$.TO_BASE_64()`\n**Output** : `SGVsbG8gV29ybGQh`\n### TO_BOOLEAN_ARRAY function\n| Function Name | Description        | Usage    | Input parameter | Return value  |\n|:-----------------|:------------------------------------------|:-------------------|------------------:|:-----------------|\n| TO_BOOLEAN_ARRAY | Converts a JSON array to a boolean array. | TO_BOOLEAN_ARRAY() |    nan | A boolean array. |\n**Sample data** : `$var1$ = [\"true\", \"false\", \"false\"]`\n**Usage** : `$var1$.TO_BOOLEAN_ARRAY()`\n**Output** : `{true, false, false}`\n### TO_BOOLEAN function\n| Function Name | Description        | Usage  | Input parameter | Return value                        |\n|:----------------|:------------------------------------------|:-------------|------------------:|:------------------------------------------------------------------------------------------------------------|\n| TO_BOOLEAN  | Converts a string to a boolean data type. | TO_BOOLEAN() |    nan | A boolean. If a string has the value true or false, this function returns the corresponding boolean value. |\n**Sample data** : `$var1$ = \"true\"`\n**Usage** : `$var1$.TO_BOOLEAN()`\n**Output** : `TRUE`\n**Sample data** : `$var1$ = \"FALSE\"`\n**Usage** : `$var1$.TO_BOOLEAN()`\n**Output** : `FALSE`\n### TO_DOUBLE_ARRAY function\n| Function Name | Description        | Usage    | Input parameter | Return value |\n|:----------------|:-----------------------------------------|:------------------|------------------:|:----------------|\n| TO_DOUBLE_ARRAY | Converts a JSON array to a double array. | TO_DOUBLE_ARRAY() |    nan | A double array. |\n**Sample data** : `$var1$ = [1.3, 4.8, 7.9]`\n**Usage** : `$var1$.TO_DOUBLE_ARRAY()`\n**Output** : `{1.3, 4.8, 7.9}`\n### TO_DOUBLE function\n| Function Name | Description         | Usage  | Input parameter | Return value |\n|:----------------|:---------------------------------------------|:------------|------------------:|:---------------|\n| TO_DOUBLE  | Converts a string or an integer to a double. | TO_DOUBLE() |    nan | A double.  |\n**Sample data** : `$var1$ = \"2.5\"`\n**Usage** : `$var1$.TO_DOUBLE()`\n**Output** : `2.5`\n**Sample data** : `$var1$ = 22`\n**Usage** : `$var1$.TO_DOUBLE()`\n**Output** : `22.0`\n### TO_INT_ARRAY function\n| Function Name | Description        | Usage   | Input parameter | Return value  |\n|:----------------|:-------------------------------------------|:---------------|------------------:|:------------------|\n| TO_INT_ARRAY | Converts a JSON array to an integer array. | TO_INT_ARRAY() |    nan | An integer array. |\n**Sample data** : `$var1$ = [3, 8, 9]`\n**Usage** : `$var1$.TO_INT_ARRAY()`\n**Output** : `{3, 8, 9}`\n### TO_INT function\n| Function Name | Description      | Usage | Input parameter | Return value |\n|:----------------|:---------------------------------|:---------|------------------:|:---------------|\n| TO_INT   | Converts a string to an integer. | TO_INT() |    nan | An integer. |\n**Sample data** : `$var1$ = \"35\"`\n**Usage** : `$var1$.TO_INT()`\n**Output** : `35`\n### TO_JSON function\n| Function Name | Description         | Usage  | Input parameter | Return value |\n|:----------------|:---------------------------------------------|:----------|------------------:|:---------------|\n| TO_JSON   | Converts the current value to a JSON object. | TO_JSON() |    nan | A JSON object. |\n**Sample data** : `$var1$ = \"{product: \"cake\", id: 21, price: 5}\"`\n**Usage** : `$var1$.TO_JSON()`\n**Output** : `{product: \"cake\", id: 21, price: 5}`\n**Note:** If your JSON schema has an array with both **integer** and **number** elements, using JSON schema version 4 might lead to unexpected errors at runtime. To prevent the error, set the schema to version 7 or greater. For example,`\"$schema\": \"http://json-schema.org/draft-07/schema#\"`.\n### TO_LOWERCASE function\n| Function Name | Description           | Usage   | Input parameter | Return value        |\n|:----------------|:------------------------------------------------------|:---------------|------------------:|:-------------------------------------------|\n| TO_LOWERCASE | Converts all the characters in a string to lowercase. | TO_LOWERCASE() |    nan | A string with all characters in lowercase. |\n**Sample data** : `$var1$ = \"Integrations TEST\"`\n**Usage** : `$var1$.TO_LOWERCASE()`\n**Output** : `integrations test`\n### TO_SET function\n| Function Name | Description       | Usage | Input parameter | Return value     |\n|:----------------|:--------------------------------------|:---------|------------------:|:-----------------------------|\n| TO_SET   | Removes duplicate values in an array. | TO_SET() |    nan | An array with unique values. |\n**Sample data** : `$var1$ = {\"Hello\",\"World\",\"Apigee\",\"World\"}`\n**Usage** : `$var1$.TO_SET()`\n**Output** : `{\"Hello\",\"World\",\"Apigee\"}`\n**Sample data** : `$var1$ = (2,6,9,12,6,8,10,6,12)`\n**Usage** : `$var1$.TO_SET()`\n**Output** : `2,6,9,12,8,10`\n### TO_STRING_ARRAY function\n| Function Name | Description        | Usage    | Input parameter | Return value |\n|:----------------|:-----------------------------------------|:------------------|------------------:|:----------------|\n| TO_STRING_ARRAY | Converts a JSON array to a string array. | TO_STRING_ARRAY() |    nan | A string array. |\n**Sample data** : `$var1$ = [[1, 2], [3, 4]]`\n**Usage** : `$var1$.TO_STRING_ARRAY()`\n**Output** : `[\"[1, 2]\", \"[3, 4]\"]`\n### TO_STRING function\n| Function Name | Description        | Usage  | Input parameter | Return value |\n|:----------------|:-----------------------------------------|:------------|------------------:|:---------------|\n| TO_STRING  | Converts a number or a JSON to a string. | TO_STRING() |    nan | A string.  |\n**Sample data** : `$var1$ = 235`\n**Usage** : `$var1$.TO_STRING()`\n**Output** : `235`\n**Sample data** :\n```\n$var1$ =\n{\n \"dbIntegers\": [1.0, 2.0, 3.0, 4.0],\n \"dbString\": \"test\"\n}\n```\n**Usage** : `$var1$.TO_STRING()`\n**Output** :\n```\n{\n \"dbIntegers\": [ 1,\n 2,\n 3,\n 4\n ],\n \"dbString\": \"test\"\n}\n \n```### TO_UPPERCASE function\n| Function Name | Description           | Usage   | Input parameter | Return value        |\n|:----------------|:------------------------------------------------------|:---------------|------------------:|:-------------------------------------------|\n| TO_UPPERCASE | Converts all the characters in a string to uppercase. | TO_UPPERCASE() |    nan | A string with all characters in uppercase. |\n**Sample data** : `$var1$ = \"Integrations Test\"`\n**Usage** : `$var1$.TO_UPPERCASE()`\n**Output** : `INTEGRATIONS TEST`\n### XNOR function\n| Function Name | Description               | Usage  | Input parameter | Return value |\n|:----------------|:---------------------------------------------------------------------|:------------|:------------------|:---------------|\n| XNOR   | Performs the logical XNOR operation on the specified boolean values. | XNOR(value) | A boolean value. | A boolean.  |\n**Sample data** : `$var1$ = FALSE`\n**Usage** : `$var1$.XNOR(TRUE)`\n**Output** : `FALSE`\n### XOR function\n| Function Name | Description               | Usage  | Input parameter | Return value |\n|:----------------|:--------------------------------------------------------------------|:-----------|:------------------|:---------------|\n| XOR    | Performs the logical XOR operation on the specified boolean values. | XOR(value) | A boolean value. | A boolean.  |\n**Sample data** : `$var1$ = TRUE`\n**Usage** : `$var1$.XOR(FALSE)`\n**Output** : `TRUE`\n## \n Supported base functions\n### GENERATE_UUID function\n| Function Name | Description    | Usage   | Input parameter | Return value |\n|:----------------|:-------------------------|:----------------|------------------:|:---------------|\n| GENERATE_UUID | Generates a random UUID. | GENERATE_UUID() |    nan | A string  |\n**Usage** : `GENERATE_UUID()`\n**Output** : `57547434-b572-4aaa-8da6-e6768850baa3`\n### GET_EXECUTION_ID function\n| Function Name | Description           | Usage    | Input parameter | Return value |\n|:-----------------|:-----------------------------------------------------|:-------------------|------------------:|:---------------|\n| GET_EXECUTION_ID | Returns the execution ID of the current integration. | GET_EXECUTION_ID() |    nan | A string  |\n**Usage** : `GET_EXECUTION_ID()`\n**Output** : `83fb009a-0152-433d-a3b6-e38118335308`\n### GET_INTEGRATION_NAME function\n| Function Name  | Description         | Usage     | Input parameter | Return value |\n|:---------------------|:---------------------------------------------|:-----------------------|------------------:|:---------------|\n| GET_INTEGRATION_NAME | Returns the name of the current integration. | GET_INTEGRATION_NAME() |    nan | A string  |\n**Usage** : `GET_INTEGRATION_NAME()`\n**Output** : `demo_integration`\n### GET_INTEGRATION_REGION function\n| Function Name   | Description         | Usage     | Input parameter | Return value |\n|:-----------------------|:-----------------------------------------------|:-------------------------|------------------:|:---------------|\n| GET_INTEGRATION_REGION | Returns the region of the current integration. | GET_INTEGRATION_REGION() |    nan | A string  |\n**Usage** : `GET_INTEGRATION_REGION()`\n**Output** : `us-east1`\n### GET_PROJECT_ID function\n| Function Name | Description              | Usage   | Input parameter | Return value |\n|:----------------|:----------------------------------------------------------------|:-----------------|------------------:|:---------------|\n| GET_PROJECT_ID | Returns the Google Cloud project ID of the current integration. | GET_PROJECT_ID() |    nan | A string  |\n**Usage** : `GET_PROJECT_ID()`\n**Output** : `demo-gcp-ip`\n### INT_LIST function\n| Function Name | Description                                 | Usage     | Input parameter                           | Return value  |\n|:----------------|:----------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------|:---------------------------------------------------------------------------------------------------------------------------|:-----------------|\n| INT_LIST  | Returns an integer list between the specified values. The returned list is inclusive of the starting value and exclusive of the ending value. | INT_LIST(value, value) | This function takes the following arguments: First argument: starting integer value Second argument: ending integer value | An integer array |\n**Usage** : `INT_LIST(\u201c12\u201d, \u201c20\u201d)`\nReturns a list of integers between 12 and 20.\n**Output** : `12, 13, 14, 15, 16, 17, 18, 19`\n### NOW_IN_MILLIS function\n| Function Name | Description                | Usage   | Input parameter | Return value     |\n|:----------------|:------------------------------------------------------------------------|:----------------|------------------:|:--------------------------------|\n| NOW_IN_MILLIS | Returns the current Unix epoch time of the integration in milliseconds. | NOW_IN_MILLIS() |    nan | Unix epoch time in milliseconds |\n**Note:** When you format dates using the`java.time.format.DateTimeFormatter`class, ensure that you format the year in lowercase (`yyyy`) instead of uppercase (`YYYY`). The year in uppercase (`YYYY`) represents the year of the current week, whereas in lowercase (`yyyy`) represents the calendar year.\n**Usage** : `NOW_IN_MILLIS().EPOCH_TO_HUMAN_READABLE_TIME(\"d MMM yyyy HH:mm:ss:SSS z\",\"GMT\")`\nReturns Unix epoch `1657783580839` and converts it to human-readable format.\n**Output** : `14 Jul 2022 07:26:20:839 GMT`", "guide": "Apigee"}