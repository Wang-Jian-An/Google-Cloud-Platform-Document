{"title": "Cloud SQL - Use IAM Conditions", "url": "https://cloud.google.com/sql/docs/postgres/iam-conditions", "abstract": "# Cloud SQL - Use IAM Conditions\nIAM Conditions allows you to define and enforce conditional, attribute-based access control for Google Cloud resources, including Cloud SQL instances. For more information about IAM Conditions, see the [Overview ofIAM Conditions](/iam/docs/conditions-overview) page.\n", "content": "## Introduction\nIn Cloud SQL, you can enforce conditional access based on the following attributes:\n- Date/time attributes: Used to set temporary (expiring), scheduled, or limited-duration access to Cloud SQL resources. For example, you can allow a user to access a database instance until a specified date. You can use date/time attributes at any level of the resource hierarchy. For more information, see [Configuring temporary access](/iam/docs/configuring-temporary-access) .\n- Resource attributes: Used to configure conditional access based on a tag, resource name, resource type, or resource service attribute. In Cloud SQL, you can use attributes of database instances to configure conditional access. For example, you can allow a user to only access instances with a specific tag. For more information, see [Configuring resource-based access](/iam/docs/configuring-resource-based-access) .\nUse cases include:\n- Allowing users to connect to specific instances.\n- Allowing users to create instances with specific prefixes or suffixes (for example, \"test\").\n- Limiting access to backup operations for test instances\n- Allowing users to delete development and test instances, but not production instances.\n- Allowing users to perform administrative operations on certain dates or at certain times.## Allow users to connect to specific instances\nSuppose you want to let a user or service account have permission to connect to one specific Cloud SQL instance only. You can include an IAM Condition in the IAM policy binding that grants that account the permissions of a Cloud SQL role.\nBy default, the predefined Cloud SQL Client role ( `roles/cloudsql.client` ), which contains the `cloudsql.instances.connect` permission, authorizes its member to connect to all Cloud SQL instances in a project. By introducing an IAM Condition into the policy binding, you can grant permission to just the named instance.\nThis example shows how to modify the existing IAM binding for the project to give a service account a Cloud SQL Client role for a specific instance.\nThis example uses the following variables:- : Your Google Cloud project.\n- : The name of the instance you want to grant  access to.\n- In the Google Cloud console, go to the **IAM** page. [Go to IAM](https://console.cloud.google.com/iam-admin/iam) \n- Click **Add** .\n- In the **New Members** input box, enter the service account email.\n- Click the **Role** dropdown list and select the **Cloud SQL Client** role.\n- Click **Add condition** .\n- Enter a title and description.\n- Select the **Condition Editor** tab.\n- In the **Condition Builder** section:- For **Condition type - Resource - Name** , enter`projects/` `` `/instances/` ``\n- Ensure that the **AND** conditional is selected.\n- For **Condition type - Resource - Service** , select`sqladmin.googleapis.com`.\n- Click **Save** to save the condition.\n- Click **Save** to save the policy.\nThis example shows how to modify the existing IAM policy  binding for the project to give a specific service account the  Cloud SQL Client role, but only for a specific instance.\nThis example uses the following variables:- : Your Google Cloud project.\n- : The name of the instance you want to grant  access to.\n- : The complete email address of the  service account whose access you want to modify.\n- Get the existing IAM policy bindings and output it to the file`bindings.json`:\n- ```\ngcloud projects get-iam-policy PROJECT_ID --format=json > bindings.json\n```\n- Add the following conditional role binding to the`bindings.json`file:```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/cloudsql.client\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"serviceAccount:SERVICE_ACCOUNT_EMAIL\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \"expression\": \"resource.name == 'projects/PROJECT_ID/instances/INSTANCE_ID'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 && resource.service == 'sqladmin.googleapis.com'\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 3}\n```\n- Update the IAM policy with the new`bindings.json`file.```\ngcloud projects set-iam-policy PROJECT_ID bindings.json\n```\nTo allow users to connect to specific instances, use a [Terraform google_iam_policy data resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/data-sources/iam_policy) and a [google_project_iam_policy  Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/google_project_iam#google_project_iam_policy) .\nIf you delete the `google_project_iam_policy` resource, anyone who doesn't have organization-level access to your Google Cloud project is locked out of the project. As a result, they can't access any resources associated with the project.Use this resource only for Google Cloud projects that are fully managed by Terraform. If you use the resource, we strongly recommend that you import the policy before deleting it. This way, if any issues occur, you can reinstate the policy.\n [  cloud_sql/instance_iam_condition/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/instance_iam_condition/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/instance_iam_condition/main.tf) \n```\ndata \"google_iam_policy\" \"sql_iam_policy\" {\n binding {\n role = \"roles/cloudsql.client\"\n members = [  \"serviceAccount:${google_project_service_identity.gcp_sa_cloud_sql.email}\",\n ]\n condition {\n  expression = \"resource.name == 'projects/${data.google_project.project.project_id}/instances/${google_sql_database_instance.default.name}' && resource.type == 'sqladmin.googleapis.com/Instance'\"\n  title  = \"created\"\n  description = \"Cloud SQL instance creation\"\n }\n }\n}\nresource \"google_project_iam_policy\" \"project\" {\n project  = data.google_project.project.project_id\n policy_data = data.google_iam_policy.sql_iam_policy.policy_data\n}\n```To apply your Terraform configuration in a Google Cloud project, complete the steps in the following sections.## Prepare Cloud Shell\n- Launch [Cloud Shell](https://shell.cloud.google.com/) .\n- Set the default Google Cloud project  where you want to apply your Terraform configurations.You only need to run this command once per project, and you can run it in any directory.```\nexport GOOGLE_CLOUD_PROJECT=PROJECT_ID\n```Environment variables are overridden if you set explicit values in the Terraform  configuration file.\n## Prepare the directoryEach Terraform configuration file must have its own directory (also called a ).- In [Cloud Shell](https://shell.cloud.google.com/) , create a directory and a new  file within that directory. The filename must have the`.tf`extension\u2014for example`main.tf`. In this  tutorial, the file is referred to as`main.tf`.```\nmkdir DIRECTORY && cd DIRECTORY && touch main.tf\n```\n- If you are following a tutorial, you can copy the sample code in each section or step.Copy the sample code into the newly created `main.tf` .Optionally, copy the code from GitHub. This is recommended  when the Terraform snippet is part of an end-to-end solution.\n- Review and modify the sample parameters to apply to your environment.\n- Save your changes.\n- Initialize Terraform. You only need to do this once per directory.```\nterraform init\n```Optionally, to use the latest Google provider version, include the `-upgrade` option:```\nterraform init -upgrade\n```\n## Apply the changes\n- Review the configuration and verify that the resources that Terraform is going to create or  update match your expectations:```\nterraform plan\n```Make corrections to the configuration as necessary.\n- Apply the Terraform configuration by running the following command and entering`yes`at the prompt:```\nterraform apply\n```Wait until Terraform displays the \"Apply complete!\" message.\n- [Open your Google Cloud project](https://console.cloud.google.com/) to view  the results. In the Google Cloud console, navigate to your resources in the UI to make sure  that Terraform has created or updated them.\n **Note:** Terraform samples typically assume that the required APIs are enabled in your Google Cloud project.To delete your changes, do the following:- To disable deletion protection, in your Terraform configuration file set the`deletion_protection`argument to`false`.```\ndeletion_protection = \"false\"\n```\n- Apply the updated Terraform configuration by running the following command and    entering`yes`at the prompt:```\nterraform apply\n```\n- Remove resources previously applied with your Terraform configuration by running the following command and entering `yes` at the prompt:```\nterraform destroy\n```## Limit access to backup operations for test instances\nSuppose your service's topology is configured so that all test instances have a prefix of `test` (for example, `test-instance-1` ), and all production instances have a prefix of `prod` (for example, `prod-instance-1` ).\nYou can limit access to backup operations to your test instances for a user or a service account. Limiting access includes restricting `CREATE` , `GET` , `LIST` , or `DELETE` operations to backups for your test instances.\n- In the Google Cloud console, go to the **IAM** page. [Go to IAM](https://console.cloud.google.com/iam-admin/iam) \n- Click the **PRINCIPALS** tab.\n- Locate the user's email address or service account (principal) to which you want to restrict access.\n- Click the **Edit principal** icon to the right of the principal. This icon appears as a pencil.\n- In the **Edit permissions** dialog box, click **ADD ANOTHER ROLE** .\n- In the **Filter** field of the subsequent dialog box, enter `Cloud SQL Admin` . Then, select the **Cloud SQL Admin** role that appears.The **Edit permissions** dialog box is active, and the **Cloud SQL Admin** role now appears in the dialog box.\n- To the right of the **Cloud SQL Admin** role, click the **Add condition** link.\n- In the **Edit condition** dialog box, supply the following information:- In the **Title** field, enter a name for the condition that you're adding to limit access to backup operations for test instances. For example, you can enter`Limit access to backup operations`.\n- Click the **CONDITION EDITOR** tab, and then add the following condition:```\nresource.type == \"sqladmin.googleapis.com/BackupRun\" && resource.name.startsWith(\"projects/PROJECT_ID/instances/test\")\u00a0 \u00a0 \n```This condition limits the scope of the Cloud SQL Admin role for the principal that you selected to those resources that have resource names that start with`projects/` `` `/instances/test`. Also, replace theplaceholder variable with the name of your Google Cloud project.- Click **SAVE** .\n- In the **Edit permissions** dialog box, click **SAVE** .\nThis example uses the following variables:- : Your Google Cloud project.\n- : The user's email address.\n- :The complete email address of the  service account whose access you want to limit.\n- Limit the scope of the `cloudsql.admin` role for a user who has an email address of .The scope of the role is limited to those resources that have resource names that start with `projects/` `` `/instances/test` .```\ngcloud projects add-iam-policy-binding PROJECT_ID \\ --member=user:USER_EMAIL \\--role=roles/cloudsql.admin \\--condition=expression=\"resource.type == \\\"sqladmin.googleapis.com/BackupRun\\\" && resource.name.startsWith(\\\"projects/PROJECT_ID/instances/test-instance-1\\\")\",title=\"test\"\u00a0 \u00a0 \n```\n- **OR** \n- Limit the scope of the `cloudsql.admin` role for a user who's logged in with a service account of .```\ngcloud projects add-iam-policy-binding PROJECT_ID \\ --member=serviceAccount:SERVICE_ACCOUNT_EMAIL \\--role=roles/cloudsql.admin \\--condition=expression=\"resource.type == \\\"sqladmin.googleapis.com/BackupRun\\\" && resource.name.startsWith(\\\"projects/PROJECT_ID/instances/test-instance-1\\\")\",title=\"test\"\u00a0 \u00a0 \n```\n## Allow users to delete test instances, but not production instances\nSuppose you want to allow a service account to delete test instances, but not production instances. You can do this by using tags, and by adding the following two policy bindings for the service account:\n- A Cloud SQL Editor role on the resource where you granted the role, and its descendants. If granted on the project the role applies to all of the instances in the project. The Cloud SQL Editor role does not contain the`cloudsql.instances.delete`permission.\n- A Cloud SQL Admin role on instances with the`test`tag.\n- In the Google Cloud console, go to the **IAM** page. [Go to IAM](https://console.cloud.google.com/iam-admin/iam) \n- Click **Add** .\n- In the **New Members** field, enter the service account email.\n- Click the **Role** dropdown list and select the **Cloud SQL Editor** role. Add nothing further for this role.\n- Click **Save** to save the condition.\n- Click the **Role** menu for the same account and select  the **Cloud Cloud SQL Admin** role.\n- Click **Add condition** .\n- Enter a title and description.\n- Select the **Condition Editor** tab.\n- In the **Condition Builder** section:- For **Condition type - Resource - Name** , enter a name for the condition.\n- For **Condition type - Resource - Service** , select`sqladmin.googleapis.com`.\n- For **Condition type - Resource - Tag** , enter the Tag key namespaced  name. For this example, the **Operator** is`matches`and the value is`815471563813/env/test`.\n- Click **Save** to save the condition.\n- Click **Save** to save the policy.\nThis example uses the following variables:- : Your Google Cloud project.\n- : Your Cloud SQL instance.\n- : The region your Cloud SQL instance is in.\n- : The ID of the organization to be the parent  resource to this tag key; for example: 12345678901. To learn how to get  your organization ID, see [Creating and managing organizations](/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id) .\n- :The complete email address of the  service account whose access you want to modify.\n- Create a tag key named `env` with tag values `prod` and `test`. For more  information, see [ Creating and defining a new tag](/resource-manager/docs/tags/tags-creating-and-managing#creating) .```\ngcloud alpha resource-manager tags keys create env \\--parent=organizations/ORGANIZATION_IDgcloud alpha resource-manager tags values create prod \\--parent=envgcloud alpha resource-manager tags values create test \\--parent=env\u00a0 \u00a0 \n```\n- Attach the `env` tag with value `test` to your test environment  Cloud SQL instances. For more information, see the [ Cloud SQL tags](/sql/docs/postgres/tags) page.\n- ```\ngcloud alpha resource-manager tags bindings create \\--tag-value=test \\--parent=//sqladmin.googleapis.com/projects/PROJECT_ID/instances/INSTANCE_ID \\--location=REGION\u00a0 \n```\n- Get the existing IAM policy bindings and output it to the file`bindings.json`:```\ngcloud projects get-iam-policy PROJECT_ID --format=json >> bindings.json\n```\n- Add the following conditional bindings to the`bindings.json`file:```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/cloudsql.editor\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"serviceAccount:SERVICE_ACCOUNT_EMAIL\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/cloudsql.admin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"serviceAccount:SERVICE_ACCOUNT_EMAIL\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \"expression\": \"resource.matchTag('ORGANIZATION_ID/env', 'test')\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\"\u00a0 \"version\": 3}\n```\n- Update the IAM policy bindings with the new`bindings.json`file.```\ngcloud projects set-iam-policy PROJECT_ID bindings.json\n```", "guide": "Cloud SQL"}