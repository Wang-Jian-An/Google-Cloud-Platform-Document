{"title": "Cloud SQL - \u5f9e Cloud Build \u9023\u63a5", "url": "https://cloud.google.com/sql/docs/postgres/connect-build?hl=zh-cn", "abstract": "# Cloud SQL - \u5f9e Cloud Build \u9023\u63a5\n\u672c\u9801\u9762\u4ecb\u7d39\u4e86\u5f9e Cloud Build \u4e2d\u904b\u884c\u7684\u670d\u52d9\u9023\u63a5\u5230 Cloud SQL \u5be6\u4f8b\u7684\u76f8\u95dc\u4fe1\u606f\u548c\u793a\u4f8b\u3002\nCloud SQL \u662f\u4e00\u9805\u5168\u4ee3\u7ba1\u5f0f\u6578\u64da\u5eab\u670d\u52d9\uff0c\u53ef\u5e6b\u52a9\u60a8\u5728\u96f2\u7aef\u8a2d\u7f6e\u3001\u7dad\u8b77\u3001\u7ba1\u7406\u548c\u63a7\u5236\u95dc\u4fc2\u578b\u6578\u64da\u5eab\u3002\n[Cloud Build](https://cloud.google.com/build/docs/overview?hl=zh-cn) \u670d\u52d9\u8b93\u60a8\u5728 Google Cloud \u57fa\u790e\u67b6\u69cb\u4e0a\u57f7\u884c\u69cb\u5efa\u3002\n", "content": "## \u8a2d\u7f6e Cloud SQL \u5be6\u4f8b\n- \u5982\u679c\u60a8\u8981\u5f9e\u67d0\u500b Google Cloud \u9805\u76ee\u9023\u63a5\uff0c\u5247\u5728\u8a72\u9805\u76ee\u4e2d\u5553\u7528 Cloud SQL Admin API\uff08\u5982\u679c\u60a8\u5c1a\u672a\u57f7\u884c\u6b64\u64cd\u4f5c\uff09\uff1aTitles in dynamic includes are not used anywhere, and we should avoid paying to translate them [\u5553\u7528 API](https://console.cloud.google.com/flows/enableapi?apiid=sqladmin&%3Bredirect=https%3A%2F%2Fconsole.cloud.google.com&hl=zh-cn) \n- [\u5275\u5efa\u4e00\u500b Cloud SQL for PostgreSQL \u5be6\u4f8b](https://cloud.google.com/sql/docs/postgres/create-instance?hl=zh-cn) \u3002\u9ed8\u8a8d\u60c5\u6cc1\u4e0b\uff0cCloud SQL \u6703\u7232\u65b0\u5be6\u4f8b\u5206\u914d\u516c\u5171 IP \u5730\u5740\u3002  \u60a8\u9084\u53ef\u4ee5\u9078\u64c7\u5206\u914d\u5c08\u7528 IP \u5730\u5740\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u9019\u5169\u7a2e\u5730\u5740\u7684\u9023\u63a5\u65b9\u6848\uff0c\u8acb\u53c3\u95b1 [\u9023\u63a5\u6982\u89bd](https://cloud.google.com/sql/docs/postgres/connect-overview?hl=zh-cn) \u9801\u9762\u3002## \u914d\u7f6e Cloud Build\n\u78ba\u4fdd\u60a8\u7684 [Cloud Build \u670d\u52d9\u8cec\u865f](https://cloud.google.com/build/docs/cloud-build-service-account?hl=zh-cn) \u5177\u6709 [\u9023\u63a5\u5230 Cloud SQL \u5be6\u4f8b\u6240\u9700\u7684 IAM \u89d2\u8272\u548c\u6b0a\u9650](https://cloud.google.com/sql/docs/mysql/project-access-control?hl=zh-cn#roles) \u3002Cloud Build \u670d\u52d9\u8cec\u865f\u5728 Google Cloud \u63a7\u5236\u6aaf [IAM](https://console.cloud.google.com/iam-admin?hl=zh-cn) \u9801\u9762\u4e0a\u4f5c\u7232 **\u4e3b\u8cec\u865f** `[YOUR-PROJECT-NUMBER]@cloudbuild.gserviceaccount.com` \u5217\u51fa\u3002\n\u5982\u9700\u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\u67e5\u770b\u6b64\u670d\u52d9\u8cec\u865f\uff0c\u8acb\u9078\u4e2d **\u5305\u62ec Google \u63d0\u4f9b\u7684\u89d2\u8272\u6388\u6b0a** \u8907\u9078\u6846\u3002\n\u60a8\u7684 Cloud Build \u670d\u52d9\u8cec\u865f\u9700\u8981\u4ee5\u4e0b\u67d0\u500b [IAM \u89d2\u8272](https://cloud.google.com/iam/docs/understanding-roles?hl=zh-cn#cloud-sql-roles) \uff1a- `Cloud SQL Client`\uff08\u9996\u9078\uff09\n- `Cloud SQL Admin`\n\u6216\u8005\uff0c\u60a8\u4e5f\u53ef\u4ee5\u624b\u52d5\u5206\u914d\u4e0b\u5217 IAM \u6b0a\u9650\uff1a\n- `cloudsql.instances.connect`\n- `cloudsql.instances.get`\n\u5982\u679c Cloud Build \u670d\u52d9\u8cec\u865f\u8207 Cloud SQL \u5be6\u4f8b\u5c6c\u65bc\u4e0d\u540c\u9805\u76ee\uff0c\u5247\u9700\u8981\u7232\u9019\u5169\u500b\u9805\u76ee\u6dfb\u52a0 Cloud SQL Admin API \u548c IAM \u6b0a\u9650\u3002\u5982\u9700\u901a\u904e\u5c08\u7528 IP \u9023\u63a5\u5230 Cloud SQL \u5be6\u4f8b\uff0cCloud Build \u5fc5\u9808\u8207 Cloud SQL \u5be6\u4f8b\u4f4d\u65bc\u540c\u4e00 VPC \u7db2\u7d61\u4e2d\u3002\u5982\u9700\u9032\u884c\u914d\u7f6e\uff0c\u8acb\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n- \u5728 [Cloud SQL \u5be6\u4f8b\u7684 VPC \u7db2\u7d61\u8207\u670d\u52d9\u63d0\u4f9b\u65b9\u7db2\u7d61](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment?hl=zh-cn#setup-private-connection) \u4e4b\u9593\u8a2d\u7f6e\u5c08\u7528\u9023\u63a5\u3002\n- \u5275\u5efa [Cloud Build \u5c08\u7528\u6c60](https://cloud.google.com/build/docs/private-pools/create-manage-private-pools?hl=zh-cn#creating_a_new_private_pool) \u3002\n\u914d\u7f6e\u5b8c\u6210\u5f8c\uff0c\u7576\u69cb\u5efa\u5728\u6c60\u4e2d\u904b\u884c\u6642\uff0c\u60a8\u7684\u61c9\u7528\u5c07\u80fd\u5920\u4f7f\u7528\u5be6\u4f8b\u7684\u5c08\u7528 IP \u5730\u5740\u548c\u7aef\u53e3 `5432` \u76f4\u63a5\u9023\u63a5\u3002\n## \u9023\u63a5\u5230 Cloud SQL\n\u914d\u7f6e Cloud Build \u5f8c\uff0c\u60a8\u53ef\u4ee5\u9023\u63a5\u5230 Cloud SQL \u5be6\u4f8b\u3002\n\u5c0d\u65bc\u516c\u5171 IP \u8def\u5f91\uff0cCloud Build \u540c\u6642\u652f\u6301 Unix \u548c TCP \u5957\u63a5\u5b57\u3002\n\u60a8\u53ef\u4ee5\u5728 Cloud Build \u6b65\u9a5f\u4e2d\u4f7f\u7528 Cloud SQL Auth \u4ee3\u7406\u4f86\u5141\u8a31\u8207\u6578\u64da\u5eab\u7684\u9023\u63a5\u3002\u6b64\u914d\u7f6e\u6703\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n- \u69cb\u5efa\u5bb9\u5668\u4e26\u5c07\u5176\u63a8\u9001\u5230 Container Registry\u3002 **\u6ce8\u610f** \uff1aContainer Registry \u5df2\u68c4\u7528\u30022024 \u5e74 1 \u6708 8 \u65e5\u4e4b\u524d\u672a\u4f7f\u7528 Container Registry \u7684\u7d44\u7e54\u9ed8\u8a8d\u5c07\u5728 Artifact Registry \u4e0a\u8a17\u7ba1\u65b0\u7684 gcr.io \u88fd\u54c1\u5eab\u30022024 \u5e74 5 \u6708 15 \u65e5\u4e4b\u5f8c\uff0c\u4e4b\u524d\u672a\u4f7f\u7528 Container Registry \u7684 Google Cloud \u9805\u76ee\u5c07\u50c5\u652f\u6301\u8a17\u7ba1\u548c\u7ba1\u7406 [Artifact Registry](https://cloud.google.com/artifact-registry/docs?hl=zh-cn) \u4e2d `gcr.io` \u7db2\u57df\u7684\u6620\u50cf\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Container Registry \u68c4\u7528](https://cloud.google.com/container-registry/docs/deprecations/container-registry-deprecation?hl=zh-cn) \u3002\n- \u69cb\u5efa\u7b2c\u4e8c\u500b\u5bb9\u5668\uff0c\u4e26\u5728 Cloud SQL Auth \u4ee3\u7406\u4e8c\u9032\u5236\u6587\u4ef6\u4e2d\u9032\u884c\u5fa9\u5236\u3002\n- Cloud Build \u69cb\u5efa\u7684\u5bb9\u5668\u4e0d\u9700\u8981\u63a8\u9001\u5230\u4efb\u4f55\u8a3b\u518a\u8868\uff0c\u4e26\u4e14 [\u6703\u5728\u69cb\u5efa\u5b8c\u6210\u6642\u88ab\u6368\u68c4](https://cloud.google.com/build/docs/build-config-file-schema?hl=zh-cn#images) \u3002\n- \u4f7f\u7528\u7b2c\u4e8c\u500b\u5bb9\u5668\u5553\u52d5 Cloud SQL Auth \u4ee3\u7406\u4e26\u904b\u884c\u6240\u6709\u9077\u79fb\u547d\u4ee4\u3002\n [  sql-proxy/cloudbuild.yaml ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/sql-proxy/cloudbuild.yaml) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/sql-proxy/cloudbuild.yaml) \n```\nsteps:\u00a0 - id: \"docker-build\"\u00a0 \u00a0 name: \"gcr.io/cloud-builders/docker\"\u00a0 \u00a0 args: [\"build\", \"-t\", \"${_IMAGE_NAME}\", \"sql-proxy/.\"]\u00a0 - id: \"docker-push\"\u00a0 \u00a0 name: \"gcr.io/cloud-builders/docker\"\u00a0 \u00a0 args: [\"push\", \"${_IMAGE_NAME}\"]\u00a0 - id: \"docker-layer\"\u00a0 \u00a0 name: \"gcr.io/cloud-builders/docker\"\u00a0 \u00a0 entrypoint: /bin/bash\u00a0 \u00a0 args:\u00a0 \u00a0 \u00a0 - '-c'\u00a0 \u00a0 \u00a0 - |\u00a0 \u00a0 \u00a0 \u00a0 echo \"FROM $_IMAGE_NAME\u00a0 \u00a0 \u00a0 \u00a0 COPY --from=gcr.io/cloud-sql-connectors/cloud-sql-proxy /cloud-sql-proxy /cloudsql/cloud-sql-proxy\" > Dockerfile-proxy;\u00a0 \u00a0 \u00a0 \u00a0 docker build -f Dockerfile-proxy -t ${_IMAGE_NAME}-proxy .\u00a0 # For TCP connections\u00a0 - id: \"migrate-tcp\"\u00a0 \u00a0 name: \"${_IMAGE_NAME}-proxy\"\u00a0 \u00a0 dir: sql-proxy\u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 - \"DATABASE_NAME=${_DATABASE_NAME}\"\u00a0 \u00a0 \u00a0 - \"DATABASE_USER=${_DATABASE_USER}\"\u00a0 \u00a0 \u00a0 - \"DATABASE_HOST=127.0.0.1\"\u00a0 \u00a0 \u00a0 - \"DATABASE_PORT=${_DATABASE_PORT}\"\u00a0 \u00a0 \u00a0 - \"DATABASE_TYPE=${_DATABASE_TYPE}\"\u00a0 \u00a0 secretEnv:\u00a0 \u00a0 \u00a0 - DATABASE_PASS\u00a0 \u00a0 entrypoint: /bin/bash\u00a0 \u00a0 args:\u00a0 \u00a0 \u00a0 - '-c'\u00a0 \u00a0 \u00a0 - |\u00a0 \u00a0 \u00a0 \u00a0 /cloudsql/cloud-sql-proxy --port ${_DATABASE_PORT} ${_INSTANCE_CONNECTION_NAME} & sleep 2;\u00a0 \u00a0 \u00a0 \u00a0 python migrate.py # for example\u00a0 # For Unix Socket connections\u00a0 - id: \"migrate-socket\"\u00a0 \u00a0 name: \"${_IMAGE_NAME}-proxy\"\u00a0 \u00a0 dir: sql-proxy\u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 - \"DATABASE_NAME=${_DATABASE_NAME}\"\u00a0 \u00a0 \u00a0 - \"DATABASE_USER=${_DATABASE_USER}\"\u00a0 \u00a0 \u00a0 - \"INSTANCE_CONNECTION_NAME=${_INSTANCE_CONNECTION_NAME}\"\u00a0 \u00a0 \u00a0 - \"DATABASE_TYPE=${_DATABASE_TYPE}\"\u00a0 \u00a0 secretEnv:\u00a0 \u00a0 \u00a0 - DATABASE_PASS\u00a0 \u00a0 entrypoint: /bin/bash\u00a0 \u00a0 args:\u00a0 \u00a0 \u00a0 - '-c'\u00a0 \u00a0 \u00a0 - |\u00a0 \u00a0 \u00a0 \u00a0 /cloudsql/cloud-sql-proxy --unix-socket /cloudsql ${_INSTANCE_CONNECTION_NAME} & sleep 2;\u00a0 \u00a0 \u00a0 \u00a0 if [ $_DATABASE_TYPE = 'mssql' ]; then echo \"MSSQL doesn't support Unix Sockets. Skippng.\"; exit 0; fi;\u00a0 \u00a0 \u00a0 \u00a0 python migrate.py # for example.options:\u00a0 dynamic_substitutions: truesubstitutions:\u00a0 _DATABASE_USER: myuser\u00a0 _DATABASE_NAME: mydatabase\u00a0 _INSTANCE_CONNECTION_NAME: ${PROJECT_ID}:us-central1:myinstance\u00a0 _DATABASE_PORT: '5432'\u00a0 _DATABASE_TYPE: postgres\u00a0 _DATABASE_PASSWORD_KEY: database_password\u00a0 _IMAGE_NAME: gcr.io/${PROJECT_ID}/sample-sql-proxyavailableSecrets:\u00a0 secretManager:\u00a0 \u00a0 - versionName: projects/$PROJECT_ID/secrets/${_DATABASE_PASSWORD_KEY}/versions/latest\u00a0 \u00a0 \u00a0 env: DATABASE_PASS\n```\n\u4e0a\u9762\u7684 Cloud Build \u4ee3\u78bc\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u5728\u90e8\u7f72\u4e0a\u8ff0\u793a\u4f8b\u61c9\u7528\u4ee5\u4f7f\u7528 Cloud SQL Auth \u4ee3\u7406\u548c Cloud Build \u66f4\u65b0\u5176 Cloud SQL \u6578\u64da\u5eab\u5f8c\u904b\u884c\u5047\u8a2d\u6027 **\u9077\u79fb** \u8173\u672c\u3002\u5982\u9700\u904b\u884c\u6b64 Cloud Build \u4ee3\u78bc\u793a\u4f8b\uff0c\u60a8\u9700\u8981\u57f7\u884c\u4ee5\u4e0b\u8a2d\u7f6e\u6b65\u9a5f\uff1a- \u5275\u5efa\u4e00\u500b\u540d\u7232`sql-proxy`\u7684\u6587\u4ef6\u593e\n- \u5728`sql-proxy`\u6587\u4ef6\u593e\u4e2d\u5275\u5efa`Dockerfile`\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u5176\u6587\u4ef6\u5167\u5bb9\u5c0d\u61c9\u7684\u4ee5\u4e0b\u55ae\u884c\u4ee3\u78bc\uff1a```\nFROM gcr.io/gcp-runtimes/ubuntu_20_0_4\n```\n- \u5728`sql-proxy`\u6587\u4ef6\u593e\u4e2d\u5275\u5efa`cloudbuild.yaml`\u6587\u4ef6\u3002\n- \u66f4\u65b0`cloudbuild.yaml`\u6587\u4ef6\uff1a\n- \u8907\u88fd\u4e0a\u9762\u7684 Cloud Build \u4ee3\u78bc\u793a\u4f8b\u4e26\u5c07\u5176\u7c98\u8cbc\u5230`cloudbuild.yaml`\u6587\u4ef6\u4e2d\u3002\n- \u79fb\u9664\u672a\u4f7f\u7528\u7684\u9023\u63a5\u65b9\u6cd5\u7684\u4ee3\u78bc\u584a\uff0c\u4ee5\u4f7f\u7528 TCP \u9023\u63a5\u6216 Unix \u5957\u63a5\u5b57\u9023\u63a5\u3002\n- \u5c07\u4ee5\u4e0b\u4f54\u4f4d\u503c\u66ff\u63db\u7232\u9805\u76ee\u4e2d\u4f7f\u7528\u7684\u503c\uff1a\n- `mydatabase`\n- `myuser`\n- `myinstance`\n- \u5728 [Secret Manager](https://console.cloud.google.com/security/secret-manager/?hl=zh-cn) \u4e2d\u5275\u5efa\u4e00\u500b\u540d\u7232`database_password`\u7684 Secret\u3002- \u7232\u4e86\u8b93 Cloud Build \u670d\u52d9\u8cec\u865f\u8a2a\u554f\u6b64 Secret\uff0c\u60a8\u5fc5\u9808\u5728 [IAM](https://console.cloud.google.com/iam-admin/iam?hl=zh-cn) \u4e2d\u5411\u5176\u6388\u4e88 [Secret Manager Secret Accessor](https://cloud.google.com/iam/docs/understanding-roles?hl=zh-cn#secret-manager-roles) \u89d2\u8272\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u4f7f\u7528 Secret Manager \u4e2d\u7684 Secret](https://cloud.google.com/build/docs/securing-builds/use-secrets?hl=zh-cn) \u3002\n- \u5728`sql-proxy`\u6587\u4ef6\u593e\u4e2d\u5275\u5efa **migrate.py** \u8173\u672c\u6587\u4ef6\u3002- \u8a72\u8173\u672c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u793a\u4f8b\u5f15\u7528\u4ee5\u4e0b\u74b0\u5883\u8b8a\u91cf\u548c`cloudbuild.yaml`\u6587\u4ef6\u4e2d\u5275\u5efa\u7684 Secret\uff1a\n- `os.getenv('DATABASE_NAME')`\n- `os.getenv('DATABASE_USER')`\n- `os.getenv('DATABASE_PASS')`\n- `os.getenv('INSTANCE_CONNECTION_NAME')`\n- \u5982\u9700\u5f15\u7528 Bash \u8173\u672c\u4e2d\u7684\u76f8\u540c\u8b8a\u91cf\uff08\u4f8b\u5982`migrate.sh`\uff09\uff0c\u8acb\u4f7f\u7528\u4ee5\u4e0b\u793a\u4f8b\uff1a\n- `$DATABASE_NAME`\n- `$DATABASE_USER`\n- `$DATABASE_PASS`\n- `$INSTANCE_CONNECTION_NAME`\n- \u904b\u884c\u4ee5\u4e0b [gcloud builds submit](https://cloud.google.com/sdk/gcloud/reference/builds/submit?hl=zh-cn) \u547d\u4ee4\uff0c\u4ee5\u4f7f\u7528 Cloud SQL Auth \u4ee3\u7406\u69cb\u5efa\u5bb9\u5668\uff0c\u5553\u52d5 Cloud SQL Auth \u4ee3\u7406\uff0c\u7136\u5f8c\u904b\u884c`migrate.py`\u8173\u672c\uff1a```\ngcloud builds submit --config cloudbuild.yaml\n```\n\u5c0d\u65bc\u5c08\u7528 IP \u8def\u5f91\uff0c\u60a8\u7684\u61c9\u7528\u6703\u901a\u904e\u5c08\u7528\u6c60\u76f4\u63a5\u9023\u63a5\u5230\u60a8\u7684\u5be6\u4f8b\u3002\u6b64\u65b9\u6cd5\u4f7f\u7528 TCP \u76f4\u63a5\u9023\u63a5\u5230 Cloud SQL \u5be6\u4f8b\uff0c\u7121\u9700\u4f7f\u7528 Cloud SQL Auth \u4ee3\u7406\u3002\n### \u4f7f\u7528 TCP \u9023\u63a5\u4f7f\u7528\u4f5c\u7232\u4e3b\u6a5f\u7684 Cloud SQL \u5be6\u4f8b\u7684\u5c08\u7528 IP \u5730\u5740\u548c\u7aef\u53e3 `5432` \u9032\u884c\u9023\u63a5\u3002\u5982\u9700\u77ad\u89e3 Web \u61c9\u7528\u74b0\u5883\u4e0b\u7684\u6b64\u4ee3\u78bc\u6bb5\uff0c\u8acb\u67e5\u770b [GitHub \u4e0a\u7684 README](https://github.com/GoogleCloudPlatform/python-docs-samples/tree/master/cloud-sql/postgres/sqlalchemy/README.md) \u3002\n [  cloud-sql/postgres/sqlalchemy/connect_tcp.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_tcp.py) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_tcp.py) \n```\nimport osimport sslimport sqlalchemydef connect_tcp_socket() -> sqlalchemy.engine.base.Engine:\u00a0 \u00a0 \"\"\"Initializes a TCP connection pool for a Cloud SQL instance of Postgres.\"\"\"\u00a0 \u00a0 # Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 # secure - consider a more secure solution such as\u00a0 \u00a0 # Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 # keep secrets safe.\u00a0 \u00a0 db_host = os.environ[\u00a0 \u00a0 \u00a0 \u00a0 \"INSTANCE_HOST\"\u00a0 \u00a0 ] \u00a0# e.g. '127.0.0.1' ('172.17.0.1' if deployed to GAE Flex)\u00a0 \u00a0 db_user = os.environ[\"DB_USER\"] \u00a0# e.g. 'my-db-user'\u00a0 \u00a0 db_pass = os.environ[\"DB_PASS\"] \u00a0# e.g. 'my-db-password'\u00a0 \u00a0 db_name = os.environ[\"DB_NAME\"] \u00a0# e.g. 'my-database'\u00a0 \u00a0 db_port = os.environ[\"DB_PORT\"] \u00a0# e.g. 5432\u00a0 \u00a0 pool = sqlalchemy.create_engine(\u00a0 \u00a0 \u00a0 \u00a0 # Equivalent URL:\u00a0 \u00a0 \u00a0 \u00a0 # postgresql+pg8000://<db_user>:<db_pass>@<db_host>:<db_port>/<db_name>\u00a0 \u00a0 \u00a0 \u00a0 sqlalchemy.engine.url.URL.create(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 drivername=\"postgresql+pg8000\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 username=db_user,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 password=db_pass,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 host=db_host,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port=db_port,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 database=db_name,\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 # ...\u00a0 \u00a0 )\u00a0 \u00a0 return pool\n```\u5982\u9700\u77ad\u89e3 Web \u61c9\u7528\u74b0\u5883\u4e0b\u7684\u6b64\u4ee3\u78bc\u6bb5\uff0c\u8acb\u67e5\u770b [GitHub \u4e0a\u7684 README](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/master/cloud-sql/postgres/servlet/README.md) \u3002\n\u6ce8\u610f\uff1a\n- CLOUD_SQL_CONNECTION_NAME \u61c9\u8868\u793a\u7232 <MY-PROJECT>:<INSTANCE-REGION>:<INSTANCE-NAME>\n- \u4f7f\u7528\u53c3\u6578 ipTypes=PRIVATE \u5c07\u5f37\u5236 SocketFactory \u8207\u5be6\u4f8b\u7684\u95dc\u806f\u5c08\u7528 IP \u9023\u63a5\n- \u5982\u9700\u67e5\u770b pom.xml \u6587\u4ef6\u7684 JDBC \u5957\u63a5\u5b57\u5de5\u5ee0\u7248\u672c\u7684\u8981\u6c42\uff0c\u8acb\u9ede\u64ca [\u6b64\u8655](https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory/blob/main/docs/jdbc-mysql.md) \u3002\n [  cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/TcpConnectionPoolFactory.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/TcpConnectionPoolFactory.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/TcpConnectionPoolFactory.java) \n```\nimport com.zaxxer.hikari.HikariConfig;import com.zaxxer.hikari.HikariDataSource;import javax.sql.DataSource;public class TcpConnectionPoolFactory extends ConnectionPoolFactory {\u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 // secure - consider a more secure solution such as\u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 // keep secrets safe.\u00a0 private static final String DB_USER = System.getenv(\"DB_USER\");\u00a0 private static final String DB_PASS = System.getenv(\"DB_PASS\");\u00a0 private static final String DB_NAME = System.getenv(\"DB_NAME\");\u00a0 private static final String INSTANCE_HOST = System.getenv(\"INSTANCE_HOST\");\u00a0 private static final String DB_PORT = System.getenv(\"DB_PORT\");\u00a0 public static DataSource createConnectionPool() {\u00a0 \u00a0 // The configuration object specifies behaviors for the connection pool.\u00a0 \u00a0 HikariConfig config = new HikariConfig();\u00a0 \u00a0 // The following URL is equivalent to setting the config options below:\u00a0 \u00a0 // jdbc:postgresql://<INSTANCE_HOST>:<DB_PORT>/<DB_NAME>?user=<DB_USER>&password=<DB_PASS>\u00a0 \u00a0 // See the link below for more info on building a JDBC URL for the Cloud SQL JDBC Socket Factory\u00a0 \u00a0 // https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory#creating-the-jdbc-url\u00a0 \u00a0 // Configure which instance and what database user to connect with.\u00a0 \u00a0 config.setJdbcUrl(String.format(\"jdbc:postgresql://%s:%s/%s\", INSTANCE_HOST, DB_PORT, DB_NAME));\u00a0 \u00a0 config.setUsername(DB_USER); // e.g. \"root\", \"postgres\"\u00a0 \u00a0 config.setPassword(DB_PASS); // e.g. \"my-password\"\u00a0 \u00a0 // ... Specify additional connection properties here.\u00a0 \u00a0 // ...\u00a0 \u00a0 // Initialize the connection pool using the configuration object.\u00a0 \u00a0 return new HikariDataSource(config);\u00a0 }}\n```\u5982\u9700\u77ad\u89e3 Web \u61c9\u7528\u74b0\u5883\u4e0b\u7684\u6b64\u4ee3\u78bc\u6bb5\uff0c\u8acb\u67e5\u770b [GitHub \u4e0a\u7684 README](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/master/cloud-sql/postgres/knex/README.md) \u3002\n [  cloud-sql/postgres/knex/connect-tcp.js ](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/connect-tcp.js) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/connect-tcp.js) \n```\nconst Knex = require('knex');const fs = require('fs');// createTcpPool initializes a TCP connection pool for a Cloud SQL// instance of Postgres.const createTcpPool = async config => {\u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 // secure - consider a more secure solution such as\u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 // keep secrets safe.\u00a0 const dbConfig = {\u00a0 \u00a0 client: 'pg',\u00a0 \u00a0 connection: {\u00a0 \u00a0 \u00a0 host: process.env.INSTANCE_HOST, // e.g. '127.0.0.1'\u00a0 \u00a0 \u00a0 port: process.env.DB_PORT, // e.g. '5432'\u00a0 \u00a0 \u00a0 user: process.env.DB_USER, // e.g. 'my-user'\u00a0 \u00a0 \u00a0 password: process.env.DB_PASS, // e.g. 'my-user-password'\u00a0 \u00a0 \u00a0 database: process.env.DB_NAME, // e.g. 'my-database'\u00a0 \u00a0 },\u00a0 \u00a0 // ... Specify additional properties here.\u00a0 \u00a0 ...config,\u00a0 };\u00a0 // Establish a connection to the database.\u00a0 return Knex(dbConfig);};\n```\u5982\u9700\u77ad\u89e3 Web \u61c9\u7528\u74b0\u5883\u4e0b\u7684\u6b64\u4ee3\u78bc\u6bb5\uff0c\u8acb\u67e5\u770b [GitHub \u4e0a\u7684 README](https://github.com/GoogleCloudPlatform/golang-samples/tree/master/cloudsql/postgres/database-sql/README.md) \u3002\n [  cloudsql/postgres/database-sql/connect_tcp.go ](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/connect_tcp.go) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/connect_tcp.go) \n```\npackage cloudsqlimport (\u00a0 \u00a0 \u00a0 \u00a0 \"database/sql\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"os\"\u00a0 \u00a0 \u00a0 \u00a0 // Note: If connecting using the App Engine Flex Go runtime, use\u00a0 \u00a0 \u00a0 \u00a0 // \"github.com/jackc/pgx/stdlib\" instead, since v5 requires\u00a0 \u00a0 \u00a0 \u00a0 // Go modules which are not supported by App Engine Flex.\u00a0 \u00a0 \u00a0 \u00a0 _ \"github.com/jackc/pgx/v5/stdlib\")// connectTCPSocket initializes a TCP connection pool for a Cloud SQL// instance of Postgres.func connectTCPSocket() (*sql.DB, error) {\u00a0 \u00a0 \u00a0 \u00a0 mustGetenv := func(k string) string {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 v := os.Getenv(k)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if v == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"Fatal Error in connect_tcp.go: %s environment variable not set.\", k)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return v\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 \u00a0 \u00a0 // secure - consider a more secure solution such as\u00a0 \u00a0 \u00a0 \u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 \u00a0 \u00a0 // keep secrets safe.\u00a0 \u00a0 \u00a0 \u00a0 var (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbUser \u00a0 \u00a0= mustGetenv(\"DB_USER\") \u00a0 \u00a0 \u00a0 // e.g. 'my-db-user'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbPwd \u00a0 \u00a0 = mustGetenv(\"DB_PASS\") \u00a0 \u00a0 \u00a0 // e.g. 'my-db-password'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbTCPHost = mustGetenv(\"INSTANCE_HOST\") // e.g. '127.0.0.1' ('172.17.0.1' if deployed to GAE Flex)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbPort \u00a0 \u00a0= mustGetenv(\"DB_PORT\") \u00a0 \u00a0 \u00a0 // e.g. '5432'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbName \u00a0 \u00a0= mustGetenv(\"DB_NAME\") \u00a0 \u00a0 \u00a0 // e.g. 'my-database'\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 dbURI := fmt.Sprintf(\"host=%s user=%s password=%s port=%s database=%s\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbTCPHost, dbUser, dbPwd, dbPort, dbName)\u00a0 \u00a0 \u00a0 \u00a0 // dbPool is the pool of database connections.\u00a0 \u00a0 \u00a0 \u00a0 dbPool, err := sql.Open(\"pgx\", dbURI)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"sql.Open: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // ...\u00a0 \u00a0 \u00a0 \u00a0 return dbPool, nil}\n```\u5982\u9700\u77ad\u89e3 Web \u61c9\u7528\u74b0\u5883\u4e0b\u7684\u6b64\u4ee3\u78bc\u6bb5\uff0c\u8acb\u67e5\u770b [GitHub \u4e0a\u7684 README](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/master/cloud-sql/mysql/README.md) \u3002\n [  cloud-sql/postgres/ConnectTcp.cs ](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/ConnectTcp.cs) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/ConnectTcp.cs) \n```\nusing Npgsql;using System;namespace CloudSql{\u00a0 \u00a0 public class PostgreSqlTcp\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 public static NpgsqlConnectionStringBuilder NewPostgreSqlTCPConnectionString()\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Equivalent connection string:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // \"Uid=<DB_USER>;Pwd=<DB_PASS>;Host=<INSTANCE_HOST>;Database=<DB_NAME>;\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var connectionString = new NpgsqlConnectionStringBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // secure - consider a more secure solution such as\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // keep secrets safe.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Host = Environment.GetEnvironmentVariable(\"INSTANCE_HOST\"), \u00a0 \u00a0 // e.g. '127.0.0.1'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set Host to 'cloudsql' when deploying to App Engine Flexible environment\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Username = Environment.GetEnvironmentVariable(\"DB_USER\"), // e.g. 'my-db-user'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Password = Environment.GetEnvironmentVariable(\"DB_PASS\"), // e.g. 'my-db-password'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Database = Environment.GetEnvironmentVariable(\"DB_NAME\"), // e.g. 'my-database'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // The Cloud SQL proxy provides encryption between the proxy and instance.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SslMode = SslMode.Disable,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 connectionString.Pooling = true;\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Specify additional properties here.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return connectionString;\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3 Web \u61c9\u7528\u74b0\u5883\u4e0b\u7684\u6b64\u4ee3\u78bc\u6bb5\uff0c\u8acb\u67e5\u770b [GitHub \u4e0a\u7684 README](https://github.com/GoogleCloudPlatform/ruby-docs-samples/tree/master/cloud-sql/postgres/activerecord/README.md) \u3002\n [  cloud-sql/postgres/activerecord/config/database_tcp.yml ](https://github.com/GoogleCloudPlatform/ruby-docs-samples/blob/HEAD/cloud-sql/postgres/activerecord/config/database_tcp.yml) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/ruby-docs-samples/blob/HEAD/cloud-sql/postgres/activerecord/config/database_tcp.yml) \n```\ntcp: &tcp\u00a0 adapter: postgresql\u00a0 # Configure additional properties here.\u00a0 # Note: Saving credentials in environment variables is convenient, but not\u00a0 # secure - consider a more secure solution such as\u00a0 # Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 # keep secrets safe.\u00a0 username: <%= ENV[\"DB_USER\"] %> \u00a0# e.g. \"my-database-user\"\u00a0 password: <%= ENV[\"DB_PASS\"] %> # e.g. \"my-database-password\"\u00a0 database: <%= ENV.fetch(\"DB_NAME\") { \"vote_development\" } %>\u00a0 host: <%= ENV.fetch(\"INSTANCE_HOST\") { \"127.0.0.1\" }%> # '172.17.0.1' if deployed to GAE Flex\u00a0 port: <%= ENV.fetch(\"DB_PORT\") { 5432 }%>\n```\u5982\u9700\u77ad\u89e3 Web \u61c9\u7528\u74b0\u5883\u4e0b\u7684\u6b64\u4ee3\u78bc\u6bb5\uff0c\u8acb\u67e5\u770b [GitHub \u4e0a\u7684 README](https://github.com/GoogleCloudPlatform/php-docs-samples/tree/main/cloud_sql/postgres/pdo/README.md) \u3002\n [  cloud_sql/postgres/pdo/src/DatabaseTcp.php ](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/cloud_sql/postgres/pdo/src/DatabaseTcp.php) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/cloud_sql/postgres/pdo/src/DatabaseTcp.php) \n```\nnamespace Google\\Cloud\\Samples\\CloudSQL\\Postgres;use PDO;use PDOException;use RuntimeException;use TypeError;class DatabaseTcp{\u00a0 \u00a0 public static function initTcpDatabaseConnection(): PDO\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // secure - consider a more secure solution such as\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // keep secrets safe.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $username = getenv('DB_USER'); // e.g. 'your_db_user'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $password = getenv('DB_PASS'); // e.g. 'your_db_password'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $dbName = getenv('DB_NAME'); // e.g. 'your_db_name'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $instanceHost = getenv('INSTANCE_HOST'); // e.g. '127.0.0.1' ('172.17.0.1' for GAE Flex)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Connect using TCP\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $dsn = sprintf('pgsql:dbname=%s;host=%s', $dbName, $instanceHost);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Connect to the database\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $conn = new PDO(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $dsn,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $username,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $password,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # ...\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 \u00a0 \u00a0 } catch (TypeError $e) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 throw new RuntimeException(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sprintf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'Invalid or missing configuration! Make sure you have set ' .\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '$username, $password, $dbName, and $instanceHost (for TCP mode). ' .\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'The PHP error was %s',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $e->getMessage()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $e->getCode(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $e\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 \u00a0 \u00a0 } catch (PDOException $e) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 throw new RuntimeException(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sprintf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'Could not connect to the Cloud SQL Database. Check that ' .\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'your username and password are correct, that the Cloud SQL ' .\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'proxy is running, and that the database exists and is ready ' .\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'for use. For more assistance, refer to %s. The PDO error was %s',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'https://cloud.google.com/sql/docs/postgres/connect-external-app',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $e->getMessage()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $e->getCode(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $e\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return $conn;\u00a0 \u00a0 }}\n```\n\u7136\u5f8c\uff0c\u60a8\u53ef\u4ee5\u5275\u5efa Cloud Build \u6b65\u9a5f\u4f86\u76f4\u63a5\u904b\u884c\u4ee3\u78bc\u3002\n [  sql-private-pool/cloudbuild.yaml ](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/sql-private-pool/cloudbuild.yaml) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/cloud-build-samples/blob/HEAD/sql-private-pool/cloudbuild.yaml) \n```\nsteps:\u00a0 - id: \"docker-build\"\u00a0 \u00a0 name: \"gcr.io/cloud-builders/docker\"\u00a0 \u00a0 args: [\"build\", \"-t\", \"${_IMAGE_NAME}\", \"sql-private-pool/.\"]\u00a0 - id: \"docker-push\"\u00a0 \u00a0 name: \"gcr.io/cloud-builders/docker\"\u00a0 \u00a0 args: [\"push\", \"${_IMAGE_NAME}\"]\u00a0 - id: \"migration\"\u00a0 \u00a0 name: \"${_IMAGE_NAME}\"\u00a0 \u00a0 dir: sql-private-pool\u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 - \"DATABASE_NAME=mydatabase\"\u00a0 \u00a0 \u00a0 - \"DATABASE_USER=myuser\"\u00a0 \u00a0 \u00a0 - \"DATABASE_HOST=${_DATABASE_HOST}\"\u00a0 \u00a0 \u00a0 - \"DATABASE_TYPE=${_DATABASE_TYPE}\"\u00a0 \u00a0 secretEnv:\u00a0 \u00a0 \u00a0 - DATABASE_PASS\u00a0 \u00a0 entrypoint: python \u00a0 # for example\u00a0 \u00a0 args: [\"migrate.py\"] # for exampleoptions:\u00a0 pool:\u00a0 \u00a0 name: projects/$PROJECT_ID/locations/us-central1/workerPools/private-pool\u00a0 dynamic_substitutions: truesubstitutions:\u00a0 _DATABASE_PASSWORD_KEY: database_password\u00a0 _DATABASE_TYPE: postgres\u00a0 _IMAGE_NAME: gcr.io/${PROJECT_ID}/sample-private-poolavailableSecrets:\u00a0 secretManager:\u00a0 \u00a0 - versionName: projects/$PROJECT_ID/secrets/${_DATABASE_PASSWORD_KEY}/versions/latest\u00a0 \u00a0 \u00a0 env: DATABASE_PASS\n```\n\u4e0a\u9762\u7684 Cloud Build \u4ee3\u78bc\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u5728\u90e8\u7f72\u4e0a\u8ff0\u793a\u4f8b\u61c9\u7528\u4ee5\u4f7f\u7528 Cloud Build \u66f4\u65b0\u5176 Cloud SQL \u6578\u64da\u5eab\u5f8c\u904b\u884c\u5047\u8a2d\u6027 **\u9077\u79fb** \u8173\u672c\u3002\u5982\u9700\u904b\u884c\u6b64 Cloud Build \u4ee3\u78bc\u793a\u4f8b\uff0c\u60a8\u9700\u8981\u57f7\u884c\u4ee5\u4e0b\u8a2d\u7f6e\u6b65\u9a5f\uff1a- \u5275\u5efa\u4e00\u500b\u540d\u7232`sql-private-pool`\u7684\u6587\u4ef6\u593e\n- \u5728`sql-private-pool`\u6587\u4ef6\u593e\u4e2d\u5275\u5efa`Dockerfile`\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u5176\u6587\u4ef6\u5167\u5bb9\u5c0d\u61c9\u7684\u4ee5\u4e0b\u55ae\u884c\u4ee3\u78bc\uff1a```\nFROM gcr.io/gcp-runtimes/ubuntu_20_0_4\n```\n- \u5728`sql-private-pool`\u6587\u4ef6\u593e\u4e2d\u5275\u5efa`cloudbuild.yaml`\u6587\u4ef6\u3002\n- \u66f4\u65b0`cloudbuild.yaml`\u6587\u4ef6\uff1a\n- \u8907\u88fd\u4e0a\u9762\u7684 Cloud Build \u4ee3\u78bc\u793a\u4f8b\u4e26\u5c07\u5176\u7c98\u8cbc\u5230`cloudbuild.yaml`\u6587\u4ef6\u4e2d\u3002\n- \u5c07\u4ee5\u4e0b\u4f54\u4f4d\u503c\u66ff\u63db\u7232\u9805\u76ee\u4e2d\u4f7f\u7528\u7684\u503c\uff1a\n- `mydatabase`\n- `myuser`\n- `databasehost`\uff0c\u63a1\u7528`host:port`\u7684\u5f62\u5f0f\u3002\n- \u5728 [Secret Manager](https://console.cloud.google.com/security/secret-manager/?hl=zh-cn) \u4e2d\u5275\u5efa\u4e00\u500b\u540d\u7232`database_password`\u7684 Secret\u3002- \u7232\u4e86\u8b93 Cloud Build \u670d\u52d9\u8cec\u865f\u8a2a\u554f\u6b64 Secret\uff0c\u60a8\u5fc5\u9808\u5728 [IAM](https://console.cloud.google.com/iam-admin/iam?hl=zh-cn) \u4e2d\u5411\u5176\u6388\u4e88 [Secret Manager Secret Accessor](https://cloud.google.com/iam/docs/understanding-roles?hl=zh-cn#secret-manager-roles) \u89d2\u8272\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u4f7f\u7528 Secret Manager \u4e2d\u7684 Secret](https://cloud.google.com/build/docs/securing-builds/use-secrets?hl=zh-cn) \u3002\n- \u5728`sql-proxy`\u6587\u4ef6\u593e\u4e2d\u5275\u5efa **migrate.py** \u8173\u672c\u6587\u4ef6\u3002- \u8a72\u8173\u672c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u793a\u4f8b\u5f15\u7528\u4ee5\u4e0b\u74b0\u5883\u8b8a\u91cf\u548c`cloudbuild.yaml`\u6587\u4ef6\u4e2d\u5275\u5efa\u7684 Secret\uff1a\n- `os.getenv('DATABASE_NAME')`\n- `os.getenv('DATABASE_USER')`\n- `os.getenv('DATABASE_PASS')`\n- `os.getenv('DATABASE_HOST')`\n- \u5982\u9700\u5f15\u7528 Bash \u8173\u672c\u4e2d\u7684\u76f8\u540c\u8b8a\u91cf\uff08\u4f8b\u5982`migrate.sh`\uff09\uff0c\u8acb\u4f7f\u7528\u4ee5\u4e0b\u793a\u4f8b\uff1a\n- `$DATABASE_NAME`\n- `$DATABASE_USER`\n- `$DATABASE_PASS`\n- `$DATABASE_HOST`\n- \u904b\u884c\u4ee5\u4e0b [gcloud builds submit](https://cloud.google.com/sdk/gcloud/reference/builds/submit?hl=zh-cn) \u547d\u4ee4\uff0c\u4ee5\u4f7f\u7528 Cloud SQL Auth \u4ee3\u7406\u69cb\u5efa\u5bb9\u5668\uff0c\u5553\u52d5 Cloud SQL Auth \u4ee3\u7406\uff0c\u7136\u5f8c\u904b\u884c`migrate.py`\u8173\u672c\uff1a```\ngcloud builds submit --config cloudbuild.yaml\n```## \u6700\u4f73\u505a\u6cd5\u548c\u5176\u4ed6\u4fe1\u606f\n\u5728\u672c\u5730\u6e2c\u8a66\u61c9\u7528\u6642\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 [Cloud SQL Auth \u4ee3\u7406](https://cloud.google.com/sql/docs/postgres/sql-proxy?hl=zh-cn) \u3002\u5982\u9700\u77ad\u89e3\u8a73\u7d30\u8aaa\u660e\uff0c\u8acb\u53c3\u95b1 [\u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528 Cloud SQL Auth \u4ee3\u7406](https://cloud.google.com/sql/docs/mysql/connect-instance-auth-proxy?hl=zh-cn) \u3002\n\u60a8\u4e5f\u53ef\u4ee5 [\u901a\u904e Docker \u5bb9\u5668\u4f7f\u7528 Cloud SQL \u4ee3\u7406](https://cloud.google.com/sql/docs/postgres/connect-docker?hl=zh-cn) \u9032\u884c\u6e2c\u8a66\u3002\n### \u6578\u64da\u5eab\u67b6\u69cb\u9077\u79fb\n\u901a\u904e\u5c07 Cloud Build \u914d\u7f6e\u7232\u9023\u63a5\u5230 Cloud SQL\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u60a8\u90e8\u7f72\u5230\u4efb\u4f55\u5176\u4ed6\u7121\u670d\u52d9\u5668\u5e73\u81fa\u7684\u76f8\u540c\u4ee3\u78bc\u5728 Cloud Build \u4e2d\u904b\u884c\u6578\u64da\u5eab\u67b6\u69cb\u9077\u79fb\u4efb\u52d9\u3002\n### \u4f7f\u7528 Secret Manager\n\u60a8\u53ef\u4ee5\u4f7f\u7528 [Secret Manager](https://cloud.google.com/build/docs/securing-builds/use-secrets?hl=zh-cn) \u5728\u69cb\u5efa\u4e2d\u5305\u542b\u654f\u611f\u4fe1\u606f\u3002", "guide": "Cloud SQL"}