{"title": "Cloud SQL - Configure SSL/TLS certificates", "url": "https://cloud.google.com/sql/docs/postgres/configure-ssl-instance", "abstract": "# Cloud SQL - Configure SSL/TLS certificates\nThis page describes how to configure an instance to use SSL/TLS. You can also learn more about [how Cloud SQL uses self-managed SSL/TLS certificates](/sql/docs/postgres/authorize-ssl) to securely connect to Cloud SQL instances.\n", "content": "## Overview\nCloud SQL creates a server certificate ( `server-ca.pem` ) automatically when you create your instance. We recommend that you [enforce all connections to use SSL/TLS](#enforcing-ssl) .\n**Note:** Cloud SQL recommends mutual authentication, which involves using certificates to authenticate both the client and server. Enforcing SSL/TLS encryption with valid client certificates makes mutual TLS required for all clients. However, if SSL/TLS is not enforced with valid client certificates, connecting with non-mutual TLS using the server certificate is still possible.For more information, consult [the documentation for your database engine](https://www.postgresql.org/docs/current/ssl-tcp.html#SSL-SERVER-FILES) .\nA change to SSL mode configuration applies only to new connections. If you enforce SSL and your instance has existing unencrypted connections, then the connections stay connected and unencrypted. To close any unencrypted connections and enforce SSL on all connections, you must restart your instance.\n**Note:** If your Cloud SQL instance is using a public IP address, you need to add the IP addresses of your PostgreSQL clients as [authorized networks](/sql/docs/postgres/authorize-networks) when [configuring SSL/TLS](/sql/docs/postgres/configure-ssl-instance) .\n### Enforce SSL/TLS encryption\nYou can use the [SSL mode](/sql/docs/postgres/admin-api/rest/v1/instances#ipconfiguration) setting to enforce SSL encryption in the following ways:\n- Allow both non-SSL/non-TLS and SSL/TLS connections. The client certificate isn't verified for SSL/TLS connections. This is the default.\n- Only allow connections encrypted with SSL/TLS. The client certificate isn't verified for SSL connections.\n- Only allow connections encrypted with SSL/TLS and with valid client certificates.\nIf you select **Allow non-SSL/non-TLS and SSL/TLS connections** for your Cloud SQL instance, SSL/TLS connections are accepted, as well as unencrypted and unsecure connections. If you do not require SSL/TLS for all connections, unencrypted connections are still allowed. For this reason, if you are accessing your instance using public IP, we strongly recommend that you enforce SSL for all connections.\nYou can connect either directly to instances by using SSL/TLS certificates, or you can connect by using the [Cloud SQL Auth Proxy](/sql/docs/postgres/connect-auth-proxy) or [Cloud SQL Connectors](/sql/docs/postgres/connect-connectors) . If you connect by using Cloud SQL Auth Proxy or Cloud SQL Connectors, then the connections are automatically encrypted with SSL/TLS. With Cloud SQL Auth Proxy and Cloud SQL Connectors, client and server identities are also automatically verified regardless of the SSL mode setting.\n**Note:** We recommend that you update instances using [SSL mode](/sql/docs/postgres/admin-api/rest/v1/instances#ipconfiguration) instead of using the legacy `require-ssl` parameter. If you update the SSL enforcement configuration on an existing instance, make sure that the values don't conflict with the [require-ssl](/sql/docs/postgres/admin-api/rest/v1/instances#ipconfiguration) parameter.\nTo enable requiring SSL/TLS, do the following:\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- To open the **Overview** page of an instance, click the instance name.\n- Click **Connections** from the SQL navigation menu.\n- Select the **Security** tab.\n- Select one of the following:- **Allow unencrypted network traffic (not recommended)** \n- **Allow only SSL connections.** This option only allows    connections using SSL/TLS encryption. Certificates aren't    validated.\n- **Require trusted client certificates.** This option only    allows connections from clients that use a valid client certificate    and are SSL encrypted.    If a client or user connects using [IAM database authentication](/sql/docs/postgres/iam-authentication) ,    then they must use either the Cloud SQL Auth Proxy or Cloud SQL Connectors    to enforce client identity verification.```\n gcloud sql instances patch INSTANCE_NAME \\\n --ssl-mode=SSL_ENFORCEMENT_MODE\n \n```\nReplace with one of the following  options:\n- `ALLOW_UNENCRYPTED_AND_ENCRYPTED`allows non-SSL/non-TLS and  SSL/TLS connections. For SSL connections, the client certificate is not  verified. This is the default value.\n- `ENCRYPTED_ONLY`only allows connections encrypted with  SSL/TLS. The client certificate isn't verified for SSL connections.\n- `TRUSTED_CLIENT_CERTIFICATE_REQUIRED`only allows  connections encrypted with SSL/TLS and with valid client certificates.   If a client or user connects using [IAM database authentication](/sql/docs/postgres/iam-authentication) ,  then they must use either the Cloud SQL Auth Proxy or Cloud SQL Connectors  to enforce client identity verification.For more information, see\n [ Settings for Cloud SQL for PostgreSQL](/sql/docs/PostgreSQL/instance-settings#ssl_mode) \n.\nTo enforce SSL/TLS encryption, use a [Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance) :\n [  cloud_sql/postgres_instance_ssl_cert/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_ssl_cert/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_ssl_cert/main.tf) \n```\nresource \"google_sql_database_instance\" \"postgres_instance\" {\n name    = \"postgres-instance\"\n region   = \"asia-northeast1\"\n database_version = \"POSTGRES_14\"\n settings {\n tier = \"db-custom-2-7680\"\n ip_configuration {\n  # The following SSL enforcement options only allow connections encrypted with SSL/TLS and with\n  # valid client certificates. Please check the API reference for other SSL enforcement options:\n  # https://cloud.google.com/sql/docs/postgres/admin-api/rest/v1beta4/instances#ipconfiguration\n  require_ssl = \"true\"\n  ssl_mode = \"TRUSTED_CLIENT_CERTIFICATE_REQUIRED\"\n }\n }\n # set `deletion_protection` to true, will ensure that one cannot accidentally delete this instance by\n # use of Terraform whereas `deletion_protection_enabled` flag protects this instance at the GCP level.\n deletion_protection = false\n}\n```To apply your Terraform configuration in a Google Cloud project, complete the steps in the following sections.## Prepare Cloud Shell\n- Launch [Cloud Shell](https://shell.cloud.google.com/) .\n- Set the default Google Cloud project  where you want to apply your Terraform configurations.You only need to run this command once per project, and you can run it in any directory.```\nexport GOOGLE_CLOUD_PROJECT=PROJECT_ID\n```Environment variables are overridden if you set explicit values in the Terraform  configuration file.\n## Prepare the directoryEach Terraform configuration file must have its own directory (also called a ).- In [Cloud Shell](https://shell.cloud.google.com/) , create a directory and a new  file within that directory. The filename must have the`.tf`extension\u2014for example`main.tf`. In this  tutorial, the file is referred to as`main.tf`.```\nmkdir DIRECTORY && cd DIRECTORY && touch main.tf\n```\n- If you are following a tutorial, you can copy the sample code in each section or step.Copy the sample code into the newly created `main.tf` .Optionally, copy the code from GitHub. This is recommended  when the Terraform snippet is part of an end-to-end solution.\n- Review and modify the sample parameters to apply to your environment.\n- Save your changes.\n- Initialize Terraform. You only need to do this once per directory.```\nterraform init\n```Optionally, to use the latest Google provider version, include the `-upgrade` option:```\nterraform init -upgrade\n```\n## Apply the changes\n- Review the configuration and verify that the resources that Terraform is going to create or  update match your expectations:```\nterraform plan\n```Make corrections to the configuration as necessary.\n- Apply the Terraform configuration by running the following command and entering`yes`at the prompt:```\nterraform apply\n```Wait until Terraform displays the \"Apply complete!\" message.\n- [Open your Google Cloud project](https://console.cloud.google.com/) to view  the results. In the Google Cloud console, navigate to your resources in the UI to make sure  that Terraform has created or updated them.\n **Note:** Terraform samples typically assume that the required APIs are enabled in your Google Cloud project.To delete your changes, do the following:- To disable deletion protection, in your Terraform configuration file set the`deletion_protection`argument to`false`.```\ndeletion_protection = \"false\"\n```\n- Apply the updated Terraform configuration by running the following command and    entering`yes`at the prompt:```\nterraform apply\n```\n- Remove resources previously applied with your Terraform configuration by running the following command and entering `yes` at the prompt:```\nterraform destroy\n```\n- Before using any of the request data, make the following replacements:- : The project ID\n- : Use one of the following options:- `ALLOW_UNENCRYPTED_AND_ENCRYPTED`: allows non-SSL/non-TLS and SSL/TLS connections. For SSL connections, the client certificate isn't verified. This is the default value.\n- `ENCRYPTED_ONLY`: only allows connections encrypted with SSL/TLS.\n- `TRUSTED_CLIENT_CERTIFICATE_REQUIRED`: only allows connections encrypted with SSL/TLS and with valid client certificates.  If a client or user connects using [IAM database authentication](/sql/docs/postgres/iam-authentication) ,  then they must use either the Cloud SQL Auth Proxy or Cloud SQL Connectors  to enforce client identity verification.\n- : The instance ID\nHTTP method and URL:\n```\nPATCH https://sqladmin.googleapis.com/v1/projects/PROJECT_ID/instances/INSTANCE_ID\n```\nRequest JSON body:\n```\n{\n \"settings\": {\n \"ipConfiguration\": {\"sslMode\": \"SSL_ENFORCEMENT_MODE\"}\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n- Before using any of the request data, make the following replacements:- : The project ID\n- : Use one of the following options:- `ALLOW_UNENCRYPTED_AND_ENCRYPTED`: allows non-SSL/non-TLS and SSL/TLS connections. For SSL connections, the client certificate isn't verified. This is the default value.\n- `ENCRYPTED_ONLY`: only allows connections encrypted with SSL/TLS.\n- `TRUSTED_CLIENT_CERTIFICATE_REQUIRED`: only allows connections encrypted with SSL/TLS and with valid client certificates.  If a client or user connects using [IAM database authentication](/sql/docs/postgres/iam-authentication) ,  then they must use either the Cloud SQL Auth Proxy or Cloud SQL Connectors  to enforce client identity verification.\n- : The instance ID\nHTTP method and URL:\n```\nPATCH https://sqladmin.googleapis.com/sql/v1beta4/projects/PROJECT_ID/instances/INSTANCE_ID\n```\nRequest JSON body:\n```\n{\n \"settings\": {\n \"ipConfiguration\": {\"sslMode\": \"SSL_ENFORCEMENT_MODE\"}\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:## Server certificates\nCloud SQL creates a server certificate automatically when you create your instance. As long as the server certificate is valid, you do not need to actively [manage your server certificate](/sql/docs/postgres/manage-ssl-instance) . However, the certificate has an expiration date of 10 years; after that date, it is no longer valid, and clients are not able to establish a secure connection to your instance using that certificate. You're periodically notified that the server certificate is nearing expiration. The notifications are sent the following number of days before the expiration date: 90, 30, 10, 2, and 1.\nYou can get information about your server certificate, such as when it was created and when it expires, or manually create a new one.\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- To open the **Overview** page of an instance, click the instance name.\n- Click **Connections** from the SQL navigation menu.\n- Select the **Security** tab.\n- Scroll down to the **Manage server certificates** section.You can see the expiration date of your server certificate in the  table.\n- Get information about the service certificate:```\ngcloud beta sql ssl server-ca-certs list \\--instance=INSTANCE_NAME\n```\n- Create a server certificate:```\ngcloud beta sql ssl server-ca-certs create \\--instance=INSTANCE_NAME\n```\n- Download the certificate information to a local PEM file:```\ngcloud beta sql ssl server-ca-certs list \\--format=\"value(cert)\" \\--instance=INSTANCE_NAME > \\FILE_PATH/FILE_NAME.pem\n```\n- Update all of your clients to use the new information by  copying the downloaded file to your client host machines, replacing the  existing`server-ca.pem`files.\nTo provide server certificate information as an output, use a [Terraform data source](https://registry.terraform.io/providers/hashicorp/google/latest/docs/data-sources/sql_ca_certs) :- Add the following to your Terraform configuration file:```\n data \"google_sql_ca_certs\" \"ca_certs\" {\n  instance = google_sql_database_instance.default.name\n }\n locals {\n  furthest_expiration_time = reverse(sort([for k, v in data.google_sql_ca_certs.ca_certs.certs : v.expiration_time]))[0]\n  latest_ca_cert   = [for v in data.google_sql_ca_certs.ca_certs.certs : v.cert if v.expiration_time == local.furthest_expiration_time]\n }\n output \"db_latest_ca_cert\" {\n  description = \"Latest CA certificate used by the primary database server\"\n  value  = local.latest_ca_cert\n  sensitive = true\n }\n \n```\n- To create the`server-ca.pem`file, run the following command:```\n terraform output db_latest_ca_cert > server-ca.pem\n \n```## Client certificates\n### Create a new client certificate\nYou can create up to 10 client certificates for each instance. To create client certificates, you must have the [Cloud SQL Admin IAM role](/sql/docs/mysql/iam-roles) .\nHere are some important things to know about client certificates:\n- If you lose the private key for a certificate, you must create a new one; the private key cannot be recovered.\n- By default, the client certificate has an expiration date of 10 years.\n- You are not notified when client certificates are nearing expiration.\n- Your Cloud SQL instance must be in the running state to create a SSL certificate.\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- To open the **Overview** page of an instance, click the instance name.\n- Click **Connections** from the SQL navigation menu.\n- Select the **Security** tab.\n- Click **Create client certificate** .\n- In the **Create a client certificate** dialog box, add a unique  name.\n- Click **Create** .\n- In the first section of the **New SSL certificate created** dialog box, click **Download client-key.pem** to download the private  key to a file named`client-key.pem`. **Important:** Store this private key securely. If you lose it, you must create a new client certificate.\n- In the second section, click **Download client-cert.pem** to download  the client certificate to a file named`client-cert.pem`.\n- In the third section, click **Download server-ca.pem** to download  the server certificate to a file named`server-ca.pem`.\n- Click **Close** .\n- Create a client certificate using the [ssl client-certs create](/sdk/gcloud/reference/sql/ssl/client-certs/create) command:```\ngcloud sql ssl client-certs create CERT_NAME client-key.pem \\--instance=INSTANCE_NAME\n``` **Important:** Store this private key securely. If you lose it, you must create a new client certificate.\n- Retrieve the public key for the certificate you just created  and copy it into the `client-cert.pem` file with the [ssl client-certs describe](/sdk/gcloud/reference/sql/ssl/client-certs/describe) command:```\ngcloud sql ssl client-certs describe CERT_NAME \\--instance=INSTANCE_NAME \\--format=\"value(cert)\" > client-cert.pem\n```\n- Copy the server certificate into the `server-ca.pem` file  using the [instances describe](/sdk/gcloud/reference/sql/instances/describe) command:```\ngcloud sql instances describe INSTANCE_NAME \\--format=\"value(serverCaCert.cert)\" > server-ca.pem\n```\nTo create a client certificate, use a [Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_ssl_cert) :\n [  cloud_sql/postgres_instance_ssl_cert/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_ssl_cert/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_ssl_cert/main.tf) \n```\nresource \"google_sql_ssl_cert\" \"postgres_client_cert\" {\n common_name = \"postgres_common_name\"\n instance = google_sql_database_instance.postgres_instance.name\n}\n```\n- Create an SSL/TLS certificate, giving it a unique name for this instance:Before using any of the request data, make the following replacements:- : The project ID\n- : The instance ID\n- : The client cert name\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/v1/projects/project-id/instances/instance-id/sslCerts\n```\nRequest JSON body:\n```\n{\n \"commonName\" : \"client-cert-name\"\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n- Copy all of the certificate contents within the quotation marks (but not the quotation marks themselves) from the response into local files as follows:- Copy`serverCaCert.cert`into`server-ca.pem`.\n- Copy`clientCert.cert`into`client-cert.pem`.\n- Copy`certPrivateKey`into`client-key.pem`.\n **Important:** Store this private key securely. If you lose it, you must create a new client certificate.\n- Create an SSL/TLS certificate, giving it a unique name for this instance:Before using any of the request data, make the following replacements:- : The project ID\n- : The instance ID\n- : The client cert name\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances/instance-id/sslCerts\n```\nRequest JSON body:\n```\n{\n \"commonName\" : \"client-cert-name\"\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n- Copy all of the certificate contents within the quotation marks (but not the quotation marks themselves) from the response into local files as follows:- Copy`serverCaCert.cert`into`server-ca.pem`.\n- Copy`clientCert.cert`into`client-cert.pem`.\n- Copy`certPrivateKey`into`client-key.pem`.\n **Important:** Store this private key securely. If you lose it, you must create a new client certificate.\nAt this point, you have:\n- A server certificate saved as`server-ca.pem`.\n- A client public key certificate saved as`client-cert.pem`.\n- A client private key saved as`client-key.pem`.\n`sslrootcert`\n`sslcert`\n`sslkey`\n[Connecting with psql client](/sql/docs/postgres/connect-admin-ip#connect)\n## What's next\n- [Manage](/sql/docs/postgres/manage-ssl-instance) SSL/TLS certificates on your Cloud SQL instance.\n- Learn more about [how encryption is handled in Google Cloud](/security/encryption-in-transit) .\n- [Connect](/sql/docs/postgres/connect-admin-ip#connect-ssl) to your Cloud SQL instance using SSL/TLS certificates.\n- Learn more about [how PostgreSQL uses SSL/TLS certificates](https://www.postgresql.org/docs/current/static/libpq-ssl.html) .", "guide": "Cloud SQL"}