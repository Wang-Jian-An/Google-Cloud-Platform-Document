{"title": "Cloud SQL - Configure private services access", "url": "https://cloud.google.com/sql/docs/postgres/configure-private-services-access", "abstract": "# Cloud SQL - Configure private services access\nThis page describes how to configure [private services access](/vpc/docs/private-services-access) in your VPC network.\n**Private services access** is implemented as a [VPC peering connection](/vpc/docs/vpc-peering) between your [VPC network](/vpc/docs/vpc) and the where your Cloud SQL instance resides. The private connection enables VM instances in your VPC network and the services that you access to communicate exclusively by using internal IP addresses. VM instances don't need Internet access or external IP addresses to reach services that are available through **private services access** .\n", "content": "## Before you begin\nCloud SQL requires **private services access** for each VPC network that's used for private IP connections. To manage a **private services access** connection, the user should have the following IAM permissions:\n- `compute.networks.list`\n- `compute.addresses.create`\n- `compute.addresses.list`\n- `servicenetworking.services.addPeering`\nIf you don't have these permissions, then you can get insufficient-permissions errors.\nIf you're using a [Shared VPC network](/vpc/docs/shared-vpc) , then you must also:\n- Add your user to the host project.\n- Assign the same four permissions to that user on the host project.\n- Grant the`compute.globalAddresses.list`IAM permission to the user.\nIf you're using`gcloud`to [allocate an IP address range](#allocate-ip-address-range) , then you don't have to assign the`compute.globalAddresses.list`permission to the user.\n## Configure private services access for Cloud SQL\n**Important:** When you create a private connection between your VPC network and the Cloud SQL service, it becomes available for use by any Google service that supports private services access. If you later delete the private connection, you remove private connectivity to your Cloud SQL instances and . Removing the private connection does not delete or deprovision any resources.\nThere are two parts to the private services access configuration process:\n- Selecting an existing, or allocating a new IP address range.You also have the option of allowing Google to allocate the range for  you. In this case, Google will automatically allocate an IP range of  prefix-length /20 and use the name **default-ip-range** .If you're going to create instances in multiple regions or for different  database types, then you must have a minimum /24 range of IP addresses available  for each region or database type. This includes other applications such as [Filestore](/filestore/docs) or [Memorystore](/memorystore/docs) . For a new region or database type, Cloud SQL must have a free /24 range.\n- Creating a private connection from your VPC network to the  underlying service producer network.\n### Allocate an IP address range\n- In the Google Cloud console, go to the **VPC networks** page. [Go to VPC networks](https://console.cloud.google.com/networking/networks) \n- Select the VPC network that you want to use.\n- Select thetab.\n- Select thetab.\n- Click.\n- For theof the allocated range, specify`google-managed-services-VPC_NETWORK_NAME`, where`VPC_NETWORK_NAME`is  the name of the VPC network you are connecting (for  example,`google-managed-services-default`). Theis optional.\n- Select theoption, then enter the IP address range to allocate, in CIDR notation.\n- Clickto create the allocated range.\nDo one of the following:- To specify an address range and a prefix length (subnet mask), use the`addresses`and`prefix-length`flags. For example, to allocate the CIDR  block`192.168.0.0/16`, specify`192.168.0.0`for the address and`16`for the prefix length.\n- ```\n\u00a0 \u00a0 \u00a0 \u00a0 gcloud compute addresses create google-managed-services-VPC_NETWORK_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 --global \\\u00a0 \u00a0 \u00a0 \u00a0 --purpose=VPC_PEERING \\\u00a0 \u00a0 \u00a0 \u00a0 --addresses=192.168.0.0 \\\u00a0 \u00a0 \u00a0 \u00a0 --prefix-length=16 \\\u00a0 \u00a0 \u00a0 \u00a0 --network=projects/PROJECT_ID/global/networks/VPC_NETWORK_NAME\u00a0 \u00a0 \u00a0 \u00a0 \n```\n- To specify a prefix length (subnet mask) only, use the`prefix-length`flag. When you omit the address range, Google Cloud  automatically selects an unused address range in your VPC  network. The following example selects an unused IP address range with a`16`bit prefix length.\n- ```\n\u00a0 \u00a0 \u00a0 \u00a0 gcloud compute addresses create google-managed-services-VPC_NETWORK_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 --global \\\u00a0 \u00a0 \u00a0 \u00a0 --purpose=VPC_PEERING \\\u00a0 \u00a0 \u00a0 \u00a0 --prefix-length=16 \\\u00a0 \u00a0 \u00a0 \u00a0 --network=projects/PROJECT_ID/global/networks/VPC_NETWORK_NAME\u00a0 \u00a0 \u00a0 \u00a0 \n```\nReplace `VPC_NETWORK_NAME` with the name of your VPC  network, such as `my-vpc-network` .\nThe following example allocates an IP range that allows resources in the  VPC network `my-vpc-network` to connect to Cloud SQL  instances using private IP.\n```\n\u00a0 \u00a0 gcloud compute addresses create google-managed-services-my-vpc-network \\\u00a0 \u00a0 --global \\\u00a0 \u00a0 --purpose=VPC_PEERING \\\u00a0 \u00a0 --prefix-length=16 \\\u00a0 \u00a0 --network=projects/myprojectid/global/networks/myvpcnetwork \\\u00a0 \u00a0 --project=my-project\u00a0 \u00a0 \n```To allocate an IP address range, use a [Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/compute_global_address) .\n [  cloud_sql/postgres_instance_private_ip/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_private_ip/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_private_ip/main.tf) \n```\nresource \"google_compute_global_address\" \"private_ip_address\" {\n name   = \"private-ip-address\"\n purpose  = \"VPC_PEERING\"\n address_type = \"INTERNAL\"\n prefix_length = 16\n network  = google_compute_network.peering_network.id\n}\n```To apply your Terraform configuration in a Google Cloud project, complete the steps in the following sections.## Prepare Cloud Shell\n- Launch [Cloud Shell](https://shell.cloud.google.com/) .\n- Set the default Google Cloud project  where you want to apply your Terraform configurations.You only need to run this command once per project, and you can run it in any directory.```\nexport GOOGLE_CLOUD_PROJECT=PROJECT_ID\n```Environment variables are overridden if you set explicit values in the Terraform  configuration file.\n## Prepare the directoryEach Terraform configuration file must have its own directory (also called a ).- In [Cloud Shell](https://shell.cloud.google.com/) , create a directory and a new  file within that directory. The filename must have the`.tf`extension\u2014for example`main.tf`. In this  tutorial, the file is referred to as`main.tf`.```\nmkdir DIRECTORY && cd DIRECTORY && touch main.tf\n```\n- If you are following a tutorial, you can copy the sample code in each section or step.Copy the sample code into the newly created `main.tf` .Optionally, copy the code from GitHub. This is recommended  when the Terraform snippet is part of an end-to-end solution.\n- Review and modify the sample parameters to apply to your environment.\n- Save your changes.\n- Initialize Terraform. You only need to do this once per directory.```\nterraform init\n```Optionally, to use the latest Google provider version, include the `-upgrade` option:```\nterraform init -upgrade\n```\n## Apply the changes\n- Review the configuration and verify that the resources that Terraform is going to create or  update match your expectations:```\nterraform plan\n```Make corrections to the configuration as necessary.\n- Apply the Terraform configuration by running the following command and entering`yes`at the prompt:```\nterraform apply\n```Wait until Terraform displays the \"Apply complete!\" message.\n- [Open your Google Cloud project](https://console.cloud.google.com/) to view  the results. In the Google Cloud console, navigate to your resources in the UI to make sure  that Terraform has created or updated them.\n **Note:** Terraform samples typically assume that the required APIs are enabled in your Google Cloud project.Remove resources previously applied with your Terraform configuration by running the following command and entering `yes` at the prompt:\n```\nterraform destroy\n```\n### Create a private connection\n- In the Google Cloud console, go to the **VPC networks** page. [Go to VPC networks](https://console.cloud.google.com/networking/networks) \n- Select the VPC network that you want to use.\n- Select the **Private service connection** tab.\n- Select the **Private connections to services** tab.\n- Click **Create connection** to create a private connection between your network and a service producer.\n- For the **Assigned allocation** , select one or more existing allocated ranges that are not being used by other service producers.\n- Click **Connect** to create the connection.\n- Create a private connection.```\ngcloud services vpc-peerings connect \\--service=servicenetworking.googleapis.com \\--ranges=google-managed-services-VPC_NETWORK_NAME \\--network=VPC_NETWORK_NAME \\--project=PROJECT_ID\n```The command initiates a long-running Cloud SQL instance operation, returning an operation ID.\n- Check whether the operation was successful.```\ngcloud services vpc-peerings operations describe \\--name=OPERATION_ID\n```\nYou can specify more than one allocated range when you create a private connection. For example, if a range has been exhausted, you can assign additional allocated ranges. The service uses IP addresses from all the provided ranges in the order that you specified.\nTo create a private connection, use a [Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/service_networking_connection) .\n [  cloud_sql/postgres_instance_private_ip/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_private_ip/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_private_ip/main.tf) \n```\nresource \"google_service_networking_connection\" \"default\" {\n network     = google_compute_network.peering_network.id\n service     = \"servicenetworking.googleapis.com\"\n reserved_peering_ranges = [google_compute_global_address.private_ip_address.name]\n}\n```\nA service account in the `service-` `` `@service-networking.iam.gserviceaccount.com` format is granted the `servicenetworking.serviceAgent` role while the private connection is created because the account is provisioned [just-in-time](/service-infrastructure/docs/service-networking/getting-started#enabling_the_service) .\nIf you see an error about either the `compute.globalAddresses.list` permission or the `compute.projects.get` permission for the project, run this `gcloud` command:\n```\ngcloud projects add-iam-policy-binding HOST_PROJECT_NAME \\\u00a0 \u00a0 --member=serviceAccount:service-HOST_PROJECT_NUMBER@service-networking.iam.gserviceaccount.com \\\u00a0 \u00a0 --role=roles/servicenetworking.serviceAgent\n```\n### Change the private service access configuration\nYou can change the allocated address range of a private service connection without modifying any existing Cloud SQL instances. To change the private IP address of an existing Cloud SQL instance, follow [these steps](#change-private-ip) .\nTo change the allocated address range:\n- In the Google Cloud console, go to the **VPC networks** page. [Go to VPC networks](https://console.cloud.google.com/networking/networks) \n- Select the VPC network that you want to use.\n- Select the **Private service connection** tab.\n- Select the **Allocated IP ranges for services** tab.\n- Select the name of the range you want to delete.\n- Click **Release** .\n- Click **Allocate IP range** .\n- Create a new range with the same name and new rangeThe name matters because the private connection has already been established using that address name.\n **Note:** After modifying or removing an allocated address range, update VPC peerings. Use the following command, and make sure to use the `--force` argument:\n```\ngcloud services vpc-peerings update \\--network=VPC_NETWORK_NAME \\--ranges=ALLOCATED_RANGES \\--service=servicenetworking.googleapis.com \\--force\n```\nCloud SQL does not automatically delete the old subnet with the old IP range. The range is marked as unusable and cannot be used again in the project. This allows existing instances to stay in that subnet. To permanently remove the subnet, all Cloud SQL instances using an address in the range must be deleted. The subnet is deleted four days after the last instance in the subnet is deleted.\n### Change the private IP address of an existing Cloud SQL instance\nTo change the private IP address of an existing Cloud SQL instance, move the instance from its original network to a temporary VPC network. Then, [change the private service accessconfiguration](#change-psa-config) of the instance's original network and move the Cloud SQL instance back to its original network.\nTo move to a different VPC network, follow all but the final step (moving the instance back) in the following procedure. In this case, the `` is the new VPC network. Also, [deletethe old private connection](/vpc/docs/configure-private-services-access#removing-connection) . It can take a few days for the deleted private connection to disappear from the Google Cloud console.\nIf the Cloud SQL instance is hosted in a Shared VPC network, the `` variables used in the following instructions must be the host project's VPC network names. To specify a network with a Shared VPC network, use the full URL of the network\u2014for example, `projects/HOST_PROJECT/global/networks/NETWORK_NAME` .\n- In the Google Cloud console, go to the **VPC networks** page. [Go to VPC networks](https://console.cloud.google.com/networking/networks) \n- [Create a temporary VPC network](/vpc/docs/create-modify-vpc-networks#creating_networks) .\n- [Create an IP allocation in the temporary VPC network](/vpc/docs/configure-private-services-access#procedure) .\n- [Create a private connection in the temporary VPC network](/vpc/docs/configure-private-services-access#creating-connection) .\n- Move the Cloud SQL instance to the temporary VPC network.```\ngcloud beta sql instances patch INSTANCE_ID \\\u00a0 --project=PROJECT_ID \\\u00a0 --network=projects/PROJECT_ID/global/networks/TEMPORARY_VPC_NETWORK_NAME \\\u00a0 --no-assign-ip\n```\n- [Change the private service access configuration](#change-psa-config) in the original network to add a new allocated range or delete existing ones.\n- Move the Cloud SQL instance back to the original VPC network.```\ngcloud beta sql instances patch INSTANCE_ID \\\u00a0 --project=PROJECT_ID \\\u00a0 --network=projects/PROJECT_ID/global/networks/ORIGINAL_VPC_NETWORK_NAME \\\u00a0 --no-assign-ip\n```", "guide": "Cloud SQL"}