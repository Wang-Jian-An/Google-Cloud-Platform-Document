{"title": "Cloud SQL - Manage users with IAM database authentication", "url": "https://cloud.google.com/sql/docs/postgres/add-manage-iam-users", "abstract": "# Cloud SQL - Manage users with IAM database authentication\nThis page describes how to add a user or service account that uses IAM database authentication to a database and how to manage those user and service accounts. For more information about the IAM integration, see [IAM authentication](/sql/docs/postgres/iam-authentication) .\n", "content": "## Before you begin\n- Enable the Cloud Key Management Service API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=cloudkms.googleapis.com) \n- Make sure you have the Cloud SQL Admin role on your user account. [ Go to the IAM page](https://console.cloud.google.com/iam-admin/iam) \n- [Enable IAM database authentication](/sql/docs/postgres/create-edit-iam-instances#configuring_existing_instances_for) on your Cloud SQL instance.\n- Make sure to grant IAM access to users that need it for  each project that contains databases that users need to access. See [Granting, changing, and revoking access to resources](/iam/docs/granting-changing-revoking-access#access-control-via-console) .\n- Make sure you have added a [service account](/iam/docs/creating-managing-service-accounts) for each service that requires access to databases in the project.## Add an IAM user or service account to the database\n**Note: ** The`@`sign and domain name are truncated by Cloud SQL. Don't add two users with the same email name but different domain names.\nYou must create a new database user for each IAM user you want to have access to the database instance. The database username must be the IAM user's email address, for example, `test-user@example.com` .\nWhen using REST commands, the username must use quotes because it contains special characters ( `@` and `.` ).\nService accounts use the format `service-account-name@project-id.iam.gserviceaccount.com` .\nTo add an IAM user or service account, you add a new database user and select IAM as the authentication method:\n**Note:** When you use the Google Cloud console to  add a new IAM user to a Cloud SQL instance, Cloud SQL  automatically grants the Cloud SQL Instance User role to the user for all  instances and databases in the project. The IAM policy  binding is automatically added for the user. You can see this role on the  account if you view the [IAM roles](https://console.cloud.google.com/iam-admin/iam) in the  Google Cloud console.- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- To open the **Overview** page of an instance, click the instance name.\n- Select **Users** from the SQL navigation menu.\n- Click **Add user account** . The **Add a user account to\n instance instance_name** tab opens.\n- Click the **Cloud IAM** radio button.\n- Add the email address for the user or service account you want to add in the **Principal** field. **Note: ** Due to the length limit on a database username, for service  accounts, Cloud SQL truncates the`.gserviceaccount.com`suffix in the email. For example, the username for the service account`sa-name@project-id.iam.gserviceaccount.com`becomes`sa-name@project-id.iam`.\n- Click **Add** . The user is now in the user list.\n- If the user isn't assigned to the **Cloud SQL Instance User** role, then a icon appears to the left of the username.To give the user login privileges, click the icon, and then select **Add IAM role** . The icon no longer appears. The user is now a member of the role.\n **Create a user account** \nUse the email, such as `test-user@example.com` , to identify the user.\nReplace the following:- : The email address for the user.\n- : The name of the instance you want to authorize the user to access.\n```\ngcloud sql users create USERNAME \\--instance=INSTANCE_NAME \\--type=cloud_iam_user\n```\n **Create a service account** \nReplace the following:- : The email address of the service account. **Note: ** Due to the length limit on a database username, you need to  omit the`.gserviceaccount.com`suffix in the email. For  example, the username for the service account`sa-name@project-id.iam.gserviceaccount.com`should be`sa-name@project-id.iam`.\n- : The name of the instance you want to authorize the service account to access.\n```\ngcloud sql users create SERVICE_ACCT \\--instance=INSTANCE_NAME \\--type=cloud_iam_service_account\n```To add IAM user and service accounts on an instance with IAM database authentication enabled, use a [Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance) .\n [  cloud_sql/postgres_instance_iam_db_auth/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_iam_db_auth/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_iam_db_auth/main.tf) \n```\nresource \"google_sql_database_instance\" \"default\" {\n name    = \"postgres-db-auth-instance-name-test\"\n region   = \"us-west4\"\n database_version = \"POSTGRES_14\"\n settings {\n tier = \"db-custom-2-7680\"\n database_flags {\n  name = \"cloudsql.iam_authentication\"\n  value = \"on\"\n }\n }\n # set `deletion_protection` to true, will ensure that one cannot accidentally\n # delete this instance by use of Terraform whereas\n # `deletion_protection_enabled` flag protects this instance at the GCP level.\n deletion_protection = false\n}\n# Specify the email address of the IAM user to add to the instance\n# This resource does not create a new IAM user account; this account must\n# already exist\nresource \"google_sql_user\" \"iam_user\" {\n name  = \"test-user@example.com\"\n instance = google_sql_database_instance.default.name\n type  = \"CLOUD_IAM_USER\"\n}\n# Specify the email address of the IAM service account to add to the instance\n# This resource does not create a new IAM service account; this service account\n# must already exist\n# Create a new IAM service account\nresource \"google_service_account\" \"default\" {\n account_id = \"cloud-sql-postgres-sa\"\n display_name = \"Cloud SQL for Postgres Service Account\"\n}\nresource \"google_sql_user\" \"iam_service_account_user\" {\n # Note: for PostgreSQL only, Google Cloud requires that you omit the\n # \".gserviceaccount.com\" suffix\n # from the service account email due to length limits on database usernames.\n name  = trimsuffix(google_service_account.default.email, \".gserviceaccount.com\")\n instance = google_sql_database_instance.default.name\n type  = \"CLOUD_IAM_SERVICE_ACCOUNT\"\n}\n```To apply your Terraform configuration in a Google Cloud project, complete the steps in the following sections.## Prepare Cloud Shell\n- Launch [Cloud Shell](https://shell.cloud.google.com/) .\n- Set the default Google Cloud project  where you want to apply your Terraform configurations.You only need to run this command once per project, and you can run it in any directory.```\nexport GOOGLE_CLOUD_PROJECT=PROJECT_ID\n```Environment variables are overridden if you set explicit values in the Terraform  configuration file.\n## Prepare the directoryEach Terraform configuration file must have its own directory (also called a ).- In [Cloud Shell](https://shell.cloud.google.com/) , create a directory and a new  file within that directory. The filename must have the`.tf`extension\u2014for example`main.tf`. In this  tutorial, the file is referred to as`main.tf`.```\nmkdir DIRECTORY && cd DIRECTORY && touch main.tf\n```\n- If you are following a tutorial, you can copy the sample code in each section or step.Copy the sample code into the newly created `main.tf` .Optionally, copy the code from GitHub. This is recommended  when the Terraform snippet is part of an end-to-end solution.\n- Review and modify the sample parameters to apply to your environment.\n- Save your changes.\n- Initialize Terraform. You only need to do this once per directory.```\nterraform init\n```Optionally, to use the latest Google provider version, include the `-upgrade` option:```\nterraform init -upgrade\n```\n## Apply the changes\n- Review the configuration and verify that the resources that Terraform is going to create or  update match your expectations:```\nterraform plan\n```Make corrections to the configuration as necessary.\n- Apply the Terraform configuration by running the following command and entering`yes`at the prompt:```\nterraform apply\n```Wait until Terraform displays the \"Apply complete!\" message.\n- [Open your Google Cloud project](https://console.cloud.google.com/) to view  the results. In the Google Cloud console, navigate to your resources in the UI to make sure  that Terraform has created or updated them.\n **Note:** Terraform samples typically assume that the required APIs are enabled in your Google Cloud project.To delete your changes, do the following:- To disable deletion protection, in your Terraform configuration file set the`deletion_protection`argument to`false`.```\ndeletion_protection = \"false\"\n```\n- Apply the updated Terraform configuration by running the following command and    entering`yes`at the prompt:```\nterraform apply\n```\n- Remove resources previously applied with your Terraform configuration by running the following command and entering `yes` at the prompt:```\nterraform destroy\n```\n **Create a user account** \nBefore using any of the request data, make the following replacements:- : Your project ID\n- : The instance ID for the instance you are adding the user to\n- : The email address for the user\n- : The ID for the operation\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/v1/projects/project-id/instances/instance-id/users\n```\nRequest JSON body:\n```\n{\n \"name\": \"username\",\n \"type\": \"CLOUD_IAM_USER\"\n }\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"kind\": \"sql#operation\",\n \"targetLink\": \"https://sqladmin.googleapis.com/v1/projects/project-id/instances/instance-id\",\n \"status\": \"DONE\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2020-02-07T22:44:16.656Z\",\n \"startTime\": \"2020-02-07T22:44:16.686Z\",\n \"endTime\": \"2020-02-07T22:44:20.437Z\",\n \"operationType\": \"CREATE_USER\",\n \"name\": \"operation-id\",\n \"targetId\": \"instance-id\",\n \"selfLink\": \"https://sqladmin.googleapis.com/v1/projects/project-id/operations/operation-id\",\n \"targetProject\": \"project-id\"\n}\n```\n **Create a service account** \nBefore using any of the request data, make the following replacements:- : Your service account email **Note: ** Due to the length limit on a database username, you need to omit the`.gserviceaccount.com`suffix in the email. For example, the username for the  service account`sa-name@project-id.iam.gserviceaccount.com`should be`sa-name@project-id.iam`.\n- : Your project ID\n- : The instance ID for the instance you are adding the service account to\n- : The ID for the operation\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/v1/projects/project-id/instances/instance-id/users\n```\nRequest JSON body:\n```\n{\n \"name\": \"service-acct\",\n \"type\": \"CLOUD_IAM_SERVICE_ACCOUNT\"\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n\"kind\": \"sql#operation\",\n \"targetLink\": \"https://sqladmin.googleapis.com/v1/projects/project-id/instances/instance-id\",\n \"status\": \"DONE\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2020-11-20T04:08:00.211Z\",\n \"startTime\": \"2020-11-20T04:08:00.240Z\",\n \"endTime\": \"2020-11-20T04:08:02.003Z\",\n \"operationType\": \"CREATE_USER\",\n \"name\": \"operation-id\",\n \"targetId\": \"instance-id\",\n \"selfLink\": \"https://sqladmin.googleapis.com/v1/projects/project-id/operations/operation-id\",\n \"targetProject\": \"project-id\"\n}\n```\n **Create a user account** \nBefore using any of the request data, make the following replacements:- : Your project ID\n- : The instance ID for the instance you are adding the user to\n- : The email address for the user\n- : The ID for the operation\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances/instance-id/users\n```\nRequest JSON body:\n```\n{\n \"name\": \"username\",\n \"type\": \"CLOUD_IAM_USER\"\n }\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"kind\": \"sql#operation\",\n \"targetLink\": \"https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances/instance-id\",\n \"status\": \"DONE\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2020-02-07T22:44:16.656Z\",\n \"startTime\": \"2020-02-07T22:44:16.686Z\",\n \"endTime\": \"2020-02-07T22:44:20.437Z\",\n \"operationType\": \"CREATE_USER\",\n \"name\": \"operation-id\",\n \"targetId\": \"instance-id\",\n \"selfLink\": \"https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/operations/operation-id\",\n \"targetProject\": \"project-id\"\n}\n```\n **Create a service account** \nBefore using any of the request data, make the following replacements:- : Your service account email **Note: ** Due to the length limit on a database username, you need to omit the`.gserviceaccount.com`suffix in the email. For example, the service account email  for the service account`sa-name@project-id.iam.gserviceaccount.com`should be  provided as`sa-name@project-id.iam`.\n- : Your project ID\n- : The instance ID for the instance you are adding the service account to\n- : The ID for the operation\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances/instance-id/users\n```\nRequest JSON body:\n```\n{\n \"name\": \"service-acct\",\n \"type\": \"CLOUD_IAM_SERVICE_ACCOUNT\"\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n\"kind\": \"sql#operation\",\n \"targetLink\": \"https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances/instance-id\",\n \"status\": \"DONE\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2020-11-20T04:08:00.211Z\",\n \"startTime\": \"2020-11-20T04:08:00.240Z\",\n \"endTime\": \"2020-11-20T04:08:02.003Z\",\n \"operationType\": \"CREATE_USER\",\n \"name\": \"operation-id\",\n \"targetId\": \"instance-id\",\n \"selfLink\": \"https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/operations/operation-id\",\n \"targetProject\": \"project-id\"\n}\n```\n## Add an IAM policy binding to a user or service account\nThis procedure adds a policy binding to the IAM policy of a specific project, given a project ID and the binding. The binding command consists of a member, a role, and an optional condition.\nThe database username must be the IAM user's email address, for example `test-user@example.com` . It must use quotes because it contains special characters ( `@` and `.` ).\n- In the Google Cloud console, go to the **IAM** page. [Go to IAM](https://console.cloud.google.com/iam-admin/iam) \n- Click **Add** .\n- In **New members** , enter an email address. You can add  individual users, service accounts, or groups as members, but every project  must have at least one principal as a member.\n- In **Role** , navigate to **Cloud SQL** and  select **Cloud SQL Instance User** and **Cloud SQL Client** .\n- For individual users and service accounts, select **Cloud SQL Client** .\n- Click **Save** .\nRun ` [gcloud projects add-iam-policy-binding](/sdk/gcloud/reference/projects/add-iam-policy-binding) ` with the `--role=roles/cloudsql.instanceUser` flag.\n **Add a policy binding to a user account** \nReplace the following:- : The ID for the project you want to authorize the  user to use.\n- : The email address for the user.\n```\n\u00a0 gcloud projects add-iam-policy-binding PROJECT_ID \\\u00a0 \u00a0 --member=user:USERNAME \\\u00a0 \u00a0 --role=roles/cloudsql.instanceUser\u00a0 \n```\nRun the ` [gcloud projects add-iam-policy-binding](/sdk/gcloud/reference/projects/add-iam-policy-binding) ` again with the flag.\n **Add a policy binding to a service account** \nReplace the following:- : The ID for the project you want to authorize the  user to use.\n- : The email address for the service  account.\n```\n\u00a0 gcloud projects add-iam-policy-binding PROJECT_ID \\\u00a0 \u00a0 --member=serviceAccount:SERVICE_ACCT \\\u00a0 \u00a0 --role=roles/cloudsql.instanceUser\u00a0 \n```\nRun the ` [gcloud projects add-iam-policy-binding](/sdk/gcloud/reference/projects/add-iam-policy-binding) ` again with the flag.To add the required policy-binding to the IAM user and service accounts, use a [Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance) .\n [  cloud_sql/postgres_instance_iam_db_auth/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_iam_db_auth/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_iam_db_auth/main.tf) \n```\ndata \"google_project\" \"project\" {\n}\nresource \"google_project_iam_binding\" \"cloud_sql_user\" {\n project = data.google_project.project.project_id\n role = \"roles/cloudsql.instanceUser\"\n members = [ \"user:test-user@example.com\",\n \"serviceAccount:${google_service_account.default.email}\"\n ]\n}\nresource \"google_project_iam_binding\" \"cloud_sql_client\" {\n project = data.google_project.project.project_id\n role = \"roles/cloudsql.client\"\n members = [ \"user:test-user@example.com\",\n \"serviceAccount:${google_service_account.default.email}\"\n ]\n}\n```To apply your Terraform configuration in a Google Cloud project, complete the steps in the following sections.## Prepare Cloud Shell\n- Launch [Cloud Shell](https://shell.cloud.google.com/) .\n- Set the default Google Cloud project  where you want to apply your Terraform configurations.You only need to run this command once per project, and you can run it in any directory.```\nexport GOOGLE_CLOUD_PROJECT=PROJECT_ID\n```Environment variables are overridden if you set explicit values in the Terraform  configuration file.\n## Prepare the directoryEach Terraform configuration file must have its own directory (also called a ).- In [Cloud Shell](https://shell.cloud.google.com/) , create a directory and a new  file within that directory. The filename must have the`.tf`extension\u2014for example`main.tf`. In this  tutorial, the file is referred to as`main.tf`.```\nmkdir DIRECTORY && cd DIRECTORY && touch main.tf\n```\n- If you are following a tutorial, you can copy the sample code in each section or step.Copy the sample code into the newly created `main.tf` .Optionally, copy the code from GitHub. This is recommended  when the Terraform snippet is part of an end-to-end solution.\n- Review and modify the sample parameters to apply to your environment.\n- Save your changes.\n- Initialize Terraform. You only need to do this once per directory.```\nterraform init\n```Optionally, to use the latest Google provider version, include the `-upgrade` option:```\nterraform init -upgrade\n```\n## Apply the changes\n- Review the configuration and verify that the resources that Terraform is going to create or  update match your expectations:```\nterraform plan\n```Make corrections to the configuration as necessary.\n- Apply the Terraform configuration by running the following command and entering`yes`at the prompt:```\nterraform apply\n```Wait until Terraform displays the \"Apply complete!\" message.\n- [Open your Google Cloud project](https://console.cloud.google.com/) to view  the results. In the Google Cloud console, navigate to your resources in the UI to make sure  that Terraform has created or updated them.\n **Note:** Terraform samples typically assume that the required APIs are enabled in your Google Cloud project.To delete your changes, do the following:- To disable deletion protection, in your Terraform configuration file set the`deletion_protection`argument to`false`.```\ndeletion_protection = \"false\"\n```\n- Apply the updated Terraform configuration by running the following command and    entering`yes`at the prompt:```\nterraform apply\n```\n- Remove resources previously applied with your Terraform configuration by running the following command and entering `yes` at the prompt:```\nterraform destroy\n```\nGrant the `cloudsql.instanceUser` and `cloudsql.client` roles to both types of accounts by editing the JSON or YAML binding policy  returned by the ` [get-iam-policy](/iam/docs/granting-changing-revoking-access#getting-policy) ` command. Note that this policy  change does not take effect until you [set the updated policy](/iam/docs/granting-changing-revoking-access#setting-policy) .\n```\n\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/cloudsql.instanceUser\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"user:test-user@example.com\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"serviceAccount:service1@sql.iam.gserviceaccount.com\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/cloudsql.client\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"user:test-user@example.com\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"serviceAccount:service1@sql.iam.gserviceaccount.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\n```\n## Grant database privileges to the IAM user\nWhen a user or service account connects to a database, they can run queries against any database objects whose access has been granted to [PUBLIC](https://www.postgresql.org/docs/current/static/ddl-priv.html) .\nIf they need additional access, more privileges can be granted using the GRANT statement. See the [GRANT](https://www.postgresql.org/docs/current/static/sql-grant.html) reference page for a complete list of privileges you can grant to users and service accounts. Run GRANT from the command line.\nReplace the following:\n- : The email address for the user. You must use quotes around the email because it contains special characters (`@`and`.`)\n- : The name of the table that you want to give the user access to.\n```\ngrant select on TABLE_NAME to \"USERNAME\";\n```\n## Remove an IAM user or service account from the database\nTo remove a user or service account from the database, you delete the account from the instance:\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- To open the **Overview** page of an instance, click the instance name.\n- Select **Users** from the SQL navigation menu.\n- Clickmore_vertfor the user you want to remove.\n- Select **Remove** . This revokes access to this instance only.\n **Revoke a user** \nUse the email, such as `test-user@example.com` , to identify the user.\nReplace the following:- : The email address without the @domain name.\n- : The name of the instance you want to remove the user from.\n```\ngcloud sql users delete USERNAME \\--instance=INSTANCE_NAME\n```\n **Delete the service account** \nReplace the following:- : The email address of the service account.\n- : The name of the instance you want to remove the  user from.\n```\ngcloud sql users delete SERVICE_ACCT \\--instance=INSTANCE_NAME\n```The following request uses the [users.delete](/sql/docs/postgres/admin-api/rest/v1/users/delete) method to delete the specified user account.\nBefore using any of the request data, make the following replacements:- : Your project ID\n- : The desired instance ID\n- : The email address for the user or service account\nHTTP method and URL:\n```\nDELETE https://sqladmin.googleapis.com/v1/projects/PROJECT_ID/instances/INSTANCE_ID/users?host=&name=USERNAME\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"kind\": \"sql#operation\",\n \"targetLink\": \"https://sqladmin.googleapis.com/v1/projects/PROJECT_ID/instances/INSTANCE_ID\",\n \"status\": \"DONE\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2020-02-07T22:38:41.217Z\",\n \"startTime\": \"2020-02-07T22:38:41.217Z\",\n \"endTime\": \"2020-02-07T22:38:44.801Z\",\n \"operationType\": \"DELETE_USER\",\n \"name\": \"OPERATION_ID\",\n \"targetId\": \"INSTANCE_ID\",\n \"selfLink\": \"https://sqladmin.googleapis.com/v1/projects/PROJECT_ID/operations/OPERATION_ID\",\n \"targetProject\": \"PROJECT_ID\"\n}\n```\nThe following request uses the [users.delete](/sql/docs/postgres/admin-api/rest/v1beta4/users/delete) method to delete the specified user account.\nBefore using any of the request data, make the following replacements:- : Your project ID\n- : The desired instance ID\n- : The email address for the user or service account\nHTTP method and URL:\n```\nDELETE https://sqladmin.googleapis.com/sql/v1beta4/projects/PROJECT_ID/instances/INSTANCE_ID/users?host=&name=USERNAME\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"kind\": \"sql#operation\",\n \"targetLink\": \"https://sqladmin.googleapis.com/sql/v1beta4/projects/PROJECT_ID/instances/INSTANCE_ID\",\n \"status\": \"DONE\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2020-02-07T22:38:41.217Z\",\n \"startTime\": \"2020-02-07T22:38:41.217Z\",\n \"endTime\": \"2020-02-07T22:38:44.801Z\",\n \"operationType\": \"DELETE_USER\",\n \"name\": \"OPERATION_ID\",\n \"targetId\": \"INSTANCE_ID\",\n \"selfLink\": \"https://sqladmin.googleapis.com/sql/v1beta4/projects/PROJECT_ID/operations/OPERATION_ID\",\n \"targetProject\": \"PROJECT_ID\"\n}\n```\n## View login information in audit logs\nYou can enable audit logs to capture IAM logins to the database. When there are login issues, you can use the audit logs to diagnose the problem.\n**Note:** Audit Logging incurs extra costs. For more information, see [Pricing for logging data](/logging#pricing) .\nOnce configured, you can [view Data Access audit logs](/logging/docs/audit#data-access) of successful logins using the **Logs Explorer** .\nFor example, a log might have information similar to the following:\n```\n{\u00a0insertId: \"...\"\u00a0logName: \"projects/.../logs/cloudaudit.googleapis.com%2Fdata_access\"\u00a0protoPayload: {\u00a0 @type: \"type.googleapis.com/google.cloud.audit.AuditLog\"\u00a0 authenticationInfo: {\u00a0 \u00a0principalEmail: \"...\"\u00a0 }\u00a0 authorizationInfo: [\u00a0 \u00a00: {\u00a0 \u00a0 granted: true\u00a0 \u00a0 permission: \"cloudsql.instances.login\"\u00a0 \u00a0 resource: \"instances/...\"\u00a0 \u00a0 resourceAttributes: {\u00a0 \u00a0 }\u00a0 \u00a0}\u00a0 ]\u00a0 methodName: \"cloudsql.instances.login\"\u00a0 request: {\u00a0 \u00a0@type: \"type.googleapis.com/google.cloud.sql.authorization.v1.InstancesLoginRequest\"\u00a0 \u00a0clientIpAddress: \"...\"\u00a0 \u00a0database: \"...\"\u00a0 \u00a0databaseSessionId: ...\u00a0 \u00a0instance: \"projects/.../locations/us-central1/instances/...\"\u00a0 \u00a0user: \"...\"\u00a0 }\u00a0 requestMetadata: {\u00a0 \u00a0callerIp: \"...\"\u00a0 \u00a0destinationAttributes: {\u00a0 \u00a0}\u00a0 \u00a0requestAttributes: {\u00a0 \u00a0 auth: {\u00a0 \u00a0 }\u00a0 \u00a0 time: \"...\"\u00a0 \u00a0}\u00a0 }\u00a0 resourceName: \"instances/...\"\u00a0 serviceName: \"cloudsql.googleapis.com\"\u00a0 status: {\u00a0 }\u00a0}\u00a0receiveTimestamp: \"...\"\u00a0resource: {\u00a0 labels: {\u00a0 \u00a0database_id: \"...:...\"\u00a0 \u00a0project_id: \"...\"\u00a0 \u00a0region: \"us-central\"\u00a0 }\u00a0 type: \"cloudsql_database\"\u00a0}\u00a0severity: \"INFO\"\u00a0timestamp: \"...\"}\n```\n## Troubleshoot a login failure\nWhen an attempt to log in fails, PostgreSQL returns a minimal error message for security reasons. For example:\n```\nPGPASSWORD=not-a-password psql --host=... --username=... --dbname=...psql: error: could not connect to server: FATAL: \u00a0Cloud SQL IAM user authentication failed for user \"...\"FATAL: \u00a0pg_hba.conf rejects connection for host \"...\", user \"...\", database \"...\", SSL off\n```\nYou can review the PostgreSQL error logs for more details about the error. For more information, see [Viewing Logs](/sql/docs/postgres/logging) .\nFor example, for the previous error, the following log entry explains the action you can take to resolve the problem.\n```\nF ... [152172]: [1-1] db=...,user=... FATAL: \u00a0Cloud SQL IAM user authentication failed for user \"...\"I ... [152172]: [2-1] db=...,user=... DETAIL: \u00a0Request is missing required authentication credential. Expected OAuth 2 access token, log in cookie or other valid authentication credential. See https://developers.google.com/identity/sign-in/web/devconsole-project.\n```\nCheck the error message you receive. If the message does not indicate that you used \"Cloud SQL IAM user authentication\" or \"Cloud SQL IAM service account authentication,\" verify that the database user type used to log in is either `CLOUD_IAM_USER` or `CLOUD_IAM_SERVICE_ACCOUNT` . You can use the Google Cloud console or the [gcloud sqlusers list](/sdk/gcloud/reference/beta/sql/users/list) command to check this. For an IAM user, verify that the database username is the IAM user's email.\nIf you used IAM database authentication, check the details of the error message. You can find the error message in the database error log. If it indicates the access token (OAuth 2.0) you sent as a password was invalid, you can use the [gcloud auth application-default print-access-token](/sdk/gcloud/reference/auth/application-default/print-access-token) `gcloud` command to find details of the token, as follows:\n```\ncurl -H \"Content-Type: application/x-www-form-urlencoded\" \\-d \"access_token=$(gcloud auth application-default print-access-token)\" \\https://www.googleapis.com/oauth2/v1/tokeninfo\n```\nVerify that the token is for the intended IAM user or service account and has not expired.\nIf the details indicate a lack of permission, then verify the IAM user or service account is granted the `cloudsql.instances.login` permission using the predefined `Cloud SQL Instance User` role or custom role in the IAM policy of the instance's project. Use the IAM [Policy Troubleshooter](/iam/docs/troubleshooting-access) for additional help.\nIf a login fails due to IAM database authentication unavailability, the user can log in using the default PostgreSQL user and password. This method of logging in still gives the user access to the entire database. Verify that the connection is a secured connection.\n## What's next\n- Learn more about [IAM database authentication](/sql/docs/postgres/authentication) .\n- Learn how to [log in to a Cloud SQL database](/sql/docs/postgres/iam-logins) .\n- Learn how to [configure instances for IAM database authentication](/sql/docs/postgres/create-edit-iam-instances) .", "guide": "Cloud SQL"}