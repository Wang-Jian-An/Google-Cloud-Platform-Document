{"title": "Cloud SQL - Legacy configuration for high availability", "url": "https://cloud.google.com/sql/docs/mysql/configure-legacy-ha", "abstract": "# Cloud SQL - Legacy configuration for high availability\nThis page describes the legacy configuration for a MySQL instance for high availability.\nIn a [legacy HA configuration](/sql/docs/mysql/high-availability#legacy_mysql_high_availability_option) , a Cloud SQL for MySQL instance uses a failover replica to add high availability to the instance. This feature isn't available in Google Cloud console. The new configuration doesn't use failover replicas. Instead, it uses Google's [regional persistent disks](/compute/docs/disks#repds) , which synchronously replicate data at the block-level between two zones in a region.\nFor more information about the current high availability configuration, see [Overview of the High Availability Configuration](/sql/docs/mysql/high-availability) .\n**Note:** Cloud SQL plans to discontinue support for legacy HA instances in the future and will soon be announcing a date to do so. Currently, legacy HA instances are still covered by the [Cloud SQL SLA](/sql/sla) . We recommend you [upgrade](/sql/docs/mysql/configure-legacy-ha#update-from-legacy) your existing legacy HA instances to regional persistent disk HA instances and create new instances using regional persistent disk HA as soon as possible.\n", "content": "## Update an instance from legacy to current high availability\nTo update your instance from the legacy to the new high-availability configuration, do the following:\n- Delete the failover replica on the MySQL instances you want to update. See [Disabling high availability on an instance](#disable-ha-legacy) .\n- Configure the instance to use the current version of high availability. See [Configuring an existing instance for high availability](/sql/docs/mysql/configure-ha#ha-existing) .## Legacy configuration: Create a new instance configured for high availability\nWhen you create an instance, you can configure it for high availability; Cloud SQL creates the failover replica at the same time that it creates the primary. The legacy feature isn't available in the Google Cloud console. Instead, use [gcloud CLI](/sdk/gcloud) or cURL commands.\n**Note:** For information about using parallel replication for performance improvements, see [Configuring parallel replication](/sql/docs/mysql/replication/manage-replicas#configuring-parallel-replication) .\nTo create an instance configured for high availability:\n- Create the primary instance and its failover replica:```\ngcloud sql instances create PRIMARY_INSTANCE_NAME \\--backup-start-time=BACKUP_WINDOW_START_TIME \\--failover-replica-name=FAILOVER_REPLICA_NAME \\--cpu=CPU \\--database-version=DATABASE_VERSION \\--memory=MEMORY \\--enable-bin-log\n```The backup window start time is in the format `HH:MM` .Make sure that you replace the placeholder with  MySQL 5.6 or MySQL 5.7 ( `--database-version=MYSQL_5_6` or `--database-version=MYSQL_5_7` ).If you don't specify a version  for the `database-version` parameter, then MySQL 8.0 is selected,  by default. The legacy configuration for high  availability for MySQL doesn't support version 8.0.For a complete list of available parameters, see the [gcloud sql instances create](/sdk/gcloud/reference/sql/instances/create) reference page.\n- Configure the root user on the primary instance:```\ngcloud sql users set-password root --host=% \\--instance PRIMARY_INSTANCE_NAME \\--password PASSWORD\n```The failover replica is created with the same CPU and MEMORY as the primary instance. You can change the failover replica's CPU and MEMORY later, but it must be at least as large as the primary instance.\n- Create the primary instance and its failover replica:```\ngcloud auth loginACCESS_TOKEN=\"$(gcloud auth print-access-token)\"curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0--header 'Content-Type: application/json' \\\u00a0 \u00a0 \u00a0--data '{\"name\":\"PRIMARY_INSTANCE_NAME\", \"region\":\"REGION\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"settings\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"tier\":\"MACHINE_TYPE\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"backupConfiguration\": {\"binaryLogEnabled\": true, \"enabled\": true}},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"failoverReplica\": {\"name\": \"FAILOVER_REPLICA_NAME\"}}' \\\u00a0 \u00a0 \u00a0-X POST \\\u00a0 \u00a0 \u00a0https://www.googleapis.com/sql/v1beta4/projects/PROJECT-ID/instances\n```For the complete list of parameters for the request, see the [instances:insert](/sql/docs/mysql/admin-api/rest/v1beta4/instances/insert) page.\n- When the primary instance finishes initializing, update the root password on the primary instance:```\ngcloud auth loginACCESS_TOKEN=\"$(gcloud auth print-access-token)\"curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0--header 'Content-Type: application/json' \\\u00a0 \u00a0 \u00a0--data '{\"name\": \"root\", \"host\": \"%\", \"password\": \"ROOT_PASSWORD\"}' \\\u00a0 \u00a0 \u00a0'https://www.googleapis.com/sql/v1beta4/projects/PROJECT-ID/instances/INSTANCE_NAME/users?host=%25&name=root'\n```This change is automatically propagated to the replica.## Legacy configuration: Configure an existing instance for high availability\nConfiguring an existing instance for high availability causes a few minutes of downtime while the instance is reconfigured.\nTo configure an existing instance for high availability:\n- Check the status of the primary instance:```\ngcloud sql instances describe PRIMARY_INSTANCE_NAME\n```If the `databaseReplicationEnabled` property is `true` ,  the instance is a replica; you cannot create a failover replica for  a replica.\n- If the`enabled`property under`backupConfiguration`is`false`, enable backups for the primary instance now:```\ngcloud sql instances patch PRIMARY_INSTANCE_NAME \\--backup-start-time HH:MM\n```The `backup-start-time` parameter is specified in 24-hour  time, in the UTC\u00b100 time zone, and specifies the start of a 4-hour  backup window. Backups can start any time during the backup window.\n- If the`binaryLogEnabled`property is`false`,  enable binary logs:```\ngcloud sql instances patch PRIMARY_INSTANCE_NAME \\--enable-bin-log\n```Enabling binary logs causes the instance to be restarted.\n- Create the replica:```\ngcloud sql instances create FAILOVER_REPLICA_NAME \\--master-instance-name=PRIMARY_INSTANCE_NAME \\--replica-type=FAILOVER\n```\n- Check the status of the primary instance:```\ngcloud auth loginACCESS_TOKEN=\"$(gcloud auth print-access-token)\"curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0-X GET \\\u00a0 \u00a0 \u00a0https://www.googleapis.com/sql/v1beta4/projects/PROJECT-ID/instances/PRIMARY_INSTANCE_NAME?fields=settings\n```The output will contain the `backupConfiguration` , for example:```\n\"backupConfiguration\": {\n \"kind\": \"sql#backupConfiguration\",\n \"startTime\": \"12:00\",\n \"enabled\": true,\n \"binaryLogEnabled\": true\n}\n```\n- If either`enabled`or`binaryLogEnabled`are`false`, use the [patch](/sql/docs/mysql/admin-api/rest/v1beta4/instances/patch) method of the instances resource to enable them both.  Specify the properties of the backup configuration you want to keep as  is and those you want to change.To enable backups, set `enabled` to `true` and the `startTime` to a value which is the   start of the backup window. To enable binary logging, set `binaryLogEnabled` to `true` .```\ngcloud auth loginACCESS_TOKEN=\"$(gcloud auth print-access-token)\"curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0--header 'Content-Type: application/json' \\\u00a0 \u00a0 \u00a0--data '{\"settings\" : {\"backupConfiguration\" : {\"startTime\": \"HH:MM\", \"enabled\": true, \"binaryLogEnabled\": true}}}' \\\u00a0 \u00a0 \u00a0-X PATCH \\\u00a0 \u00a0 \u00a0https://www.googleapis.com/sql/v1beta4/projects/PROJECT-ID/instances/PRIMARY_INSTANCE_NAME/\n```\n- Use the [insert](/sql/docs/mysql/admin-api/rest/v1beta4/instances/insert) method of the instances resource to create the failover replica.```\ngcloud auth loginACCESS_TOKEN=\"$(gcloud auth print-access-token)\"curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0--header 'Content-Type: application/json' \\\u00a0 \u00a0 \u00a0--data '{\"name\": \"REPLICA_NAME\", \"masterInstanceName\": \"PRIMARY_INSTANCE_NAME\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"region\": \"PRIMARY_IMSTANCE_REGION\", \"databaseVersion\": \"PRIMARY_DATABASE_VERSION\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"replicaConfiguration\": {\"failoverTarget\": true},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"settings\": {\"tier\":\"MACHINE_TYPE\"}}' \\\u00a0 \u00a0 \u00a0-X POST \\\u00a0 \u00a0 \u00a0https://www.googleapis.com/sql/v1beta4/projects/PROJECT-ID/instances\n````MACHINE_TYPE` must be at least as large as the machine type of the primary instance.## Initiate failover\nTesting failover is optional, but is recommended so that you can see how your application responds in the event of a failover.\n**Note:** This feature helps you test your application's response to an automatic failover. Make sure your instance has completed any previous failover (so it is responding to connection requests) before you trigger another failover.\nTo learn more about failovers, see the [Failover overview](/sql/docs/mysql/high-availability#failover-overview) .\nInitiate the failover:\n```\ngcloud sql instances failover PRIMARY_INSTANCE_NAME\n```\n- Describe the primary instance to get the value of the`settingsVersion`field.```\ngcloud auth loginACCESS_TOKEN=\"$(gcloud auth print-access-token)\"curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0-X GET \\\u00a0 \u00a0 \u00a0https://www.googleapis.com/sql/v1beta4/projects/PROJECT-ID/instances/PRIMARY_INSTANCE_NAME\n```\n- Initiate the failover:```\ngcloud auth loginACCESS_TOKEN=\"$(gcloud auth print-access-token)\"curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0--header 'Content-Type: application/json' \\\u00a0 \u00a0 \u00a0--data '{\"failoverContext\":{\"settingsVersion\":\"SETTINGS_VERSION\"}}' \\\u00a0 \u00a0 \u00a0-X POST \\\u00a0 \u00a0 \u00a0https://www.googleapis.com/sql/v1beta4/projects/PROJECT-ID/instances/PRIMARY_INSTANCE_NAME/failover\n```\nThe instance fails over and is not available to serve data for a few minutes.\n## Legacy configuration: Create an alert for replication lag\nThe time required for a failover operation depends on the amount of replication lag when the failover is initiated. You can use Cloud Monitoring in the Google Cloud console to alert you when replication lag exceeds a threshold.\n**Note:** Failover downtime caused by replication lag greater than 1200 seconds is not counted against the SLA for the instance.\nFor more information about replication lag, search for \"seconds_behind_master\" on the [SHOW SLAVE STATUS Syntax](https://dev.mysql.com/doc/refman/5.7/en/show-slave-status.html) page in the MySQL documentation.\nFor more information about Cloud Monitoring, see [the Cloud Monitoring documentation](/monitoring/docs) .\n**Note:** A newly created Cloud SQL instance can take time to appear in the Cloud Monitoring interface. If you don't see a new instance, then check again in an hour.\n### Legacy configuration: Set an alert for a specific failover replica\n- In the navigation panel of the Google Cloud console, select **Monitoring** , and then select **Alerting** .\n- Click **Create Alerting Policy** .\n- Enter a descriptive name for your alert.\n- Select **Metric Threshold** and click **Next** to open the Target tab.\n- For **Resource Type** , select **Cloud SQL** .\n- For **Applies To** , select **Single** , then select your failover replica.\n- Click **Next** to open the Configuration tab.\n- Enter the following values:| Field  | Value              |\n|:-----------|:------------------------------------------------------------|\n| If Metric | Seconds Behind Master          |\n| Condition | above              |\n| Thresholds | 120 (or whatever value is appropriate for your environment) |\n| For  | 3 minutes             |\n- Select your **Notification** methods, and click **Save Condition** .\n### Legacy configuration: Set an alert for a group of failover replicas\nIf you plan to create multiple failover replicas in the same project, it could be easier to set the alert for the entire group, rather than on each failover replica individually. To create a group for monitoring, use a suffix for the failover replicas' names, such as \"-failover\". Make sure you don't use this suffix for any other types of Cloud SQL instances.\n**Create your failover replica group:**\n- In the Google Cloud console, go to the **Monitoring** page. [Go to Monitoring](https://console.cloud.google.com/monitoring) \n- From the upper menu bar, select **Groups** > **Create...** .\n- Enter a descriptive name for your group.\n- Leave **Name** and **Contains** selected, and enter your name substring.\n- Click **Save Group** . The summary page for the new group opens.\n- Confirm that the expected instances are included in the group.\n**Note:** If you open the **Groups Overview** page, where all existing groups are listed, then your group shows 0 instances. This is because Cloud Monitoring uses the term \"instances\" to mean VMs and VM clusters. Cloud SQL instances are shown under .\n**Create the alert for the failover replica group:**\n- In the navigation panel of the Google Cloud console, select **Monitoring** , and then select **Alerting** .\n- Click **Create Alerting Policy** .\n- Enter a descriptive name for your group alert.\n- Select **Metric Threshold** and click **Next** to open the Target tab.\n- For **Resource Type** , select **Cloud SQL** .\n- For **Applies To** , select **Group** , then select your failover group.\n- Leave **Any Member Violates** selected and click **Next** to open the Configuration tab.\n- Enter the following values:| Field  | Value              |\n|:-----------|:------------------------------------------------------------|\n| If Metric | Seconds Behind Master          |\n| Condition | above              |\n| Thresholds | 120 (or whatever value is appropriate for your environment) |\n| For  | 3 minutes             |\n- Select your desired **Notification** methods, and click **Save Condition** .\n### Legacy configuration: Disable high availability on an instance\nYou need to delete the failover replica instance to remove high availability from the primary instance.\nBefore you perform this procedure, make sure there are no operations currently running on the primary instance.\nTo disable high availability:\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- Select the failover instance associated with the instance you want to  disable high availability on.\n- On the **Instance details** page, click **Delete** .\n- In the **Delete Replica** window, retype the name of failover  instance.\n- Click **Delete** . The configuration for the original instance changes  to zonal.For reference information, see\n` [gcloud sql instances delete](/sdk/gcloud/reference/sql/instances/delete) `\n.\n```\ngcloud sql instances delete FAILOVER_REPLICA_NAME\n```\nThe following request uses the\n` [instances:delete](/sql/docs/mysql/admin-api/rest/v1beta4/instances/delete) `\nmethod to delete the instance.\n```\ngcloud auth loginACCESS_TOKEN=\"$(gcloud auth print-access-token)\"curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0--header 'Content-Type: application/json'\\\u00a0 \u00a0 \u00a0 -X DELETE\\https://www.googleapis.com/sql/v1beta4/projects/PROJECT-ID/instances/INSTANCE_NAME\n```\n## What's next\n- Learn more about [how the high availability configuration works](/sql/docs/mysql/high-availability) .\n- Test how your application responds to lost connections by [restarting your instance](/sql/docs/mysql/start-stop-restart-instance) .\n- Learn more about [managing your database connections](/sql/faq#connections) .\n- Learn more about [Cloud Monitoring](/monitoring/docs) .\n- [Create read replicas](/sql/docs/mysql/replication) for your instance.", "guide": "Cloud SQL"}