{"title": "Cloud SQL - Configure Cloud SQL and the external server for replication", "url": "https://cloud.google.com/sql/docs/postgres/replication/configure-replication-from-external", "abstract": "# Cloud SQL - Configure Cloud SQL and the external server for replication\nThis page describes how to configure your external server for replication to Cloud SQL, create a source representation instance on Cloud SQL, and replicate the data to Cloud SQL. You need to go through all the steps on this page before proceeding to the replication steps.\nAn alternative to the steps described on this page is the [Database Migration Service](/database-migration/docs) , which offers continuous replication or one-time database migration from an external server to Cloud SQL.\n[Fast migration for Cloud SQL](/sql/docs/postgres/faq#data-migration) is now available. This feature improves the performance of data migrations from an external source to a destination Cloud SQL instance.\n", "content": "## Before you begin\n### Terminology\n- **External server.** The PostgreSQL server external to Cloud SQL that you want to replicate data from. It's also referred to as the source database or the external database server. It can be another Cloud SQL instance or any other database server, such as on-premises, Amazon Relational Database Service (RDS), and so on.\n- **Source representation instance.** A mock of a Cloud SQL instance that represents the external server to the Cloud SQL replica. It's visible in the Google Cloud console and appears like a regular Cloud SQL instance, but it doesn't contain data, require configuration or maintenance, or affect billing.\n- **Cloud SQL replica.** The Cloud SQL instance that replicates from the external server. Also known as the external primary read replica.\n- **Replication user account.** The PostgreSQL user account on the external server with sufficient permissions to allow replication between the external server and the Cloud SQL replica.\n- **Managed import.** The process of importing data directly from the external server to the Cloud SQL replica. In this situation, Cloud SQL connects to the external server using the replication user account and runs the data dump directly on the external server to import data to the Cloud SQL replica.\n### Set up a Google Cloud project\n- Make sure you have the Cloud SQL Admin, Storage Admin, and  Compute Viewer roles on your user account. [ Go to the IAM page](https://console.cloud.google.com/iam-admin/iam) \n### Install the Google Cloud SDK\nTo configure replication, [install Google Cloud SDK](/sdk/install) for your external server. You might want to install the SDK on your external server unless it's already installed elsewhere.\n## Set up the external server for replication\nCloud SQL supports continuous migrations from source databases to Cloud SQL destination databases.\nSupported source databases for PostgreSQL include:\n- Self-managed (on premises or on any cloud VM that you fully control) PostgreSQL 9.4,  9.5, 9.6, 10, 11, 12, 13, 14, and 15\n- Amazon RDS 9.6.10+, 10.5+, 11.1+, 12, 13, and 14\n- Amazon Aurora 10.11+, 11.6+, 12.4+, and 13.3+\n- Cloud SQL 9.6, 10, 11, 12, 13, 14, and 15Configuring your source requires configuring both the source instance and underlying source databases.\n### External server checklist\nIf the Cloud SQL replica is enabled with a private IP address because the outgoing private IP address isn't static, configure the external server's firewall to allow the  internal IP range allocated for the [private services access](/vpc/docs/configure-private-services-access) of the VPC network that the Cloud SQL  replica uses as its private network.\nThe source database server's firewall must be configured to allow the entire **internal IP range** allocated for the **private service connection** of the VPC network that the Cloud SQL destination instance uses as the **privateNetwork** field of its [ipConfiguration settings](/sql/docs/postgres/replication/replication-from-external#setup-replica-instance) .\nTo find the **internal IP range** :\n- In the Google Cloud console, go to the **VPC networks** page. [Go to the VPC networks page](https://console.cloud.google.com/networking/networks/list) \n- Select the VPC network that you want to use.\n- Click the **Private service connection** tab.## Configure your source instance\nTo configure your source instance, follow these steps:\n- If your source instance does not include the`postgres`database, create it.\n- [Install the pglogical package](https://github.com/2ndQuadrant/pglogical) on the source instance.\n- Set the following parameters, as needed.If the source PostgreSQL instance is Amazon RDS, include these parameters in [ a new parameter group](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithParamGroups.html#USER_WorkingWithParamGroups.Creating) and attach the parameter group to the instance.- If the source is Cloud SQL, set the `cloudsql.logical_decoding` and `cloudsql.enable_pglogical` flags to `on` .To enable flags in Cloud SQL, see [Configuring database flags](/sql/docs/postgres/flags) . **Note:** The`pglogical`extension can log credentials in plain text on the source instance. This behavior is caused by the extension, and is unrelated to Cloud SQL.\n- Set `shared_preload_libraries` to include `pglogical` by using the following command:```\nALTER SYSTEM SET shared_preload_libraries = 'pglogical';\u00a0 \u00a0 \u00a0 \n``` **Note:** To view a list of the existing libraries for your  instance, run the`show shared_preload_libraries`command.\n- Set `wal_level` to `logical` by using the  following command:```\n\u00a0 \u00a0 ALTER SYSTEM SET wal_level = 'logical';\u00a0 \u00a0 \n```If the source PostgreSQL instance is Amazon RDS, to enable WAL logs at   the `logical` level, set the `rds.logical_replication` parameter to `1` .\n- Set `wal_sender_timeout` to `0` by using the  following command:```\nALTER SYSTEM SET wal_sender_timeout = 0;\n```The value `0` disables the timeout mechanism that's used to  terminate inactive replication connections.\n- Set [max_replication_slots](https://www.postgresql.org/docs/current/static/runtime-config-replication.html) to the maximum number of replication slots that the source instance can  support. Use the following command, after replacing with the number:```\nALTER SYSTEM SET max_replication_slots = #;\n```Cloud SQL requires one slot for each database that's migrated.  Specify at least the number of subscriptions expected to connect, with  some reserves for table synchronization.For example, if the source instance has 5 databases and 2 migration  jobs are created for the source, then the number of replication slots must  be at least 5 * 2 = 10, in addition to the number of replication slots  that you already use.\n- Set [max_wal_senders](https://www.postgresql.org/docs/current/static/runtime-config-replication.html) to at least the same as `max_replication_slots` , in addition to the  number of senders already used on your instance. Use the following command,  replacing with the total number of WAL sender processes running  simultaneously:```\nALTER SYSTEM SET max_wal_senders = #;\n```For example, if the `max_replication_slots` parameter is set  to `10` , and you're already using 2 senders, then the number  of WAL sender processes running at the same time would be 10 + 2 = 12.\n- Set [max_worker_processes](https://www.postgresql.org/docs/current/static/runtime-config-resource.html) to at least the number of databases in the source instance, in addition to  the number of worker processes already used on your instance. Use the  following command, after replacing with the total number:```\nALTER SYSTEM SET max_worker_processes = #;\n```\n- The parameters that you're setting in this step apply  to a PostgreSQL database server that's running. You can also make these  changes persistent by including them in the `postgresql.conf` file.\n- If the Cloud SQL replica will use a private IP, configure the  external server's firewall to allow the internal IP range allocated for the [private services access](/vpc/docs/configure-private-services-access) of the VPC network of the replica.\n- To apply the configuration changes, restart the source instance.\n### Enable replication delay monitoring for PostgreSQL versions preceding 9.6\nIf you're migrating from a PostgreSQL version lower than 9.6, then the replication delay metric isn't available by default. You can use one of three alternatives to track this metric and ensure minimal downtime when you promote the database:\n- **Option 1** : Enable the Cloud SQL external server to track the replication delay by granting access to a specific query. Using a user with the `SUPERUSER` privilege, perform the following:- Define the following function to allow the external server to query for the replication delay.```\nCREATE OR REPLACE FUNCTION pg_stat_replication_user()RETURNS TABLE (pid \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 integer \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0,usesysid \u00a0 \u00a0 \u00a0 \u00a0 \u00a0oid \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0,username \u00a0 \u00a0 \u00a0 \u00a0 \u00a0name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0,application_name \u00a0text \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ,client_addr \u00a0 \u00a0 \u00a0 inet \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ,client_hostname \u00a0 text \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ,client_port \u00a0 \u00a0 \u00a0 integer \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0,backend_start \u00a0 \u00a0 timestamp with time zone ,backend_xmin \u00a0 \u00a0 \u00a0xid \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0,state \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 text \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ,sent_location \u00a0 \u00a0 pg_lsn \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ,write_location \u00a0 \u00a0pg_lsn \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ,flush_location \u00a0 \u00a0pg_lsn \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ,replay_location \u00a0 pg_lsn \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ,sync_priority \u00a0 \u00a0 integer \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0,sync_state \u00a0 \u00a0 \u00a0 \u00a0text)LANGUAGE SQLSECURITY DEFINERAS $$\u00a0SELECT *\u00a0FROM pg_catalog.pg_stat_replication;$$;\n```\n- Grant the `EXECUTE` permission to the user by running the following commands:- `REVOKE EXECUTE ON FUNCTION pg_stat_replication_user() FROM public;`\n- `GRANT EXECUTE ON FUNCTION pg_stat_replication_user() to {replication_user};`\n- **Option 2** : Grant the `SUPERUSER` privilege directly to the user used to connect to the source instance. This allows the external server to read the replication delay directly.\n- **Option 3** : Track the replication delay independently by using the following query: **Note:** For PostgreSQL versions earlier than 10, run this command as a`superuser`.```\n\u00a0 \u00a0 SELECT current_timestamp, application_name,\u00a0 \u00a0 pg_xlog_location_diff(pg_current_xlog_location(), pg_stat_replication.sent_location) AS sent_location_lag,\u00a0 \u00a0 pg_xlog_location_diff(pg_current_xlog_location(), pg_stat_replication.write_location) AS write_location_lag,\u00a0 \u00a0 pg_xlog_location_diff(pg_current_xlog_location(), pg_stat_replication.flush_location) AS flush_location_lag,\u00a0 \u00a0 pg_xlog_location_diff(pg_current_xlog_location(), pg_stat_replication.replay_location) AS replay_location_lag\u00a0 \u00a0 FROM pg_stat_replication\u00a0 \u00a0 WHERE application_name like 'cloudsql%';\u00a0 \n```In this option, Cloud SQL doesn't reflect the replication delay metric in the graphs or API responses.## Configure your source databases\nThe Cloud SQL external server migrates all databases under your source instance other than the following:\n- For on-premise sources: template databases`template0`and`template1`\n- For Amazon RDS sources:`template0`,`template1`, and`rdsadmin`\n- For Cloud SQL sources: template databases`template0`and`template1`\nDo the following on each database in your source instance that isn't included in the preceding list:\n- To install the `pglogical` extension, run the following command on every database on your source instance:```\nCREATE EXTENSION IF NOT EXISTS pglogical\n```For tables that don't have primary keys, Cloud SQL supports the migration of the initial snapshot and `INSERT` statements during the change data capture (CDC) phase. Migrate `UPDATE` and `DELETE` statements manually. **Note:** See [Debugging and other tools](/database-migration/docs/postgres/debugging-tools) to learn how to generate a query to list tables in a PostgreSQL database without primary keys. You must [alter these tables](https://www.postgresql.org/docs/current/static/sql-altertable.html) so that they have a primary key each. For tables that don't have primary keys, only the initial snapshot and`INSERT`statements are migrated. **Note:** For PostgreSQL 9.4, install the `pglogical_origin` extension on every database by running the following commands:```\nCREATE EXTENSION IF NOT EXISTS pglogical_origin;CREATE EXTENSION IF NOT EXISTS pglogical;\n```\n- Connect to the instance and run the following commands to set privileges for the user on each of the migrated databases, as well as the default `postgres` database.The user that you use to connect to the source instance is configured as the user in the [Connection Profiles](https://console.cloud.google.com/dbmigration/connection-profiles) page. You can create a new user or reuse an existing one.- On all schemas on each database to migrate, except for the information schema and schemas starting with `pg_` , run the following command:```\nGRANT USAGE on SCHEMA schema to username;GRANT SELECT on ALL SEQUENCES in SCHEMA schema to username;GRANT SELECT on ALL TABLES in SCHEMA schema to username;\n```\n- On each database to migrate, run the following command:```\nGRANT USAGE on SCHEMA pglogical to PUBLIC;\n```\n- To get replication information from source databases,on all databases, run the following command:```\nGRANT SELECT on ALL TABLES in SCHEMA pglogical to username;\n```\n- If your source is Amazon RDS, run the following command:```\nGRANT rds_replication to username;\n```Otherwise, run the following command:```\nALTER USER username with REPLICATION;\n```\n## Set up a source representation instance\nThe source representation instance references the external server. It contains only the request data from the external server. Create the request data and use it in a `curl` command that creates the source representation instance in Cloud SQL.\n### Create the request data\nThe request data contains basic information about your external server in JSON format. The request data can be configured for a Cloud SQL replica on a public or private network and should contain this information:\n```\n\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"name\": \"SOURCE_NAME\",\u00a0 \u00a0 \u00a0 \"region\": \"REGION\",\u00a0 \u00a0 \u00a0 \"databaseVersion\": \"DATABASE_VERSION\",\u00a0 \u00a0 \u00a0 \"onPremisesConfiguration\": {\u00a0 \u00a0 \u00a0 \u00a0 \"hostPort\": \"SOURCE_HOST\",\u00a0 \u00a0 \u00a0 \u00a0 \"username\": \"USERNAME\",\u00a0 \u00a0 \u00a0 \u00a0 \"password\": \"PASSWORD\",\u00a0 \u00a0 \u00a0 \u00a0 \"caCertificate\": \"SOURCE_CERT\",\u00a0 \u00a0 \u00a0 \u00a0 \"clientCertificate\": \"CLIENT_CERT\",\u00a0 \u00a0 \u00a0 \u00a0 \"clientKey\": \"CLIENT_KEY\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\n```\n```\n// example of source.json for external server that// - initiates replication from a Cloud SQL managed import// - doesn't use SSL/TSL{\u00a0 \"name\": \"cloudsql-source-instance\",\u00a0 \"region\": \"us-central1\",\u00a0 \"databaseVersion\": \"POSTGRES_9_6\",\u00a0 \"onPremisesConfiguration\": {\u00a0 \u00a0 \"hostPort\": \"192.0.2.0:3306\",\u00a0 \u00a0 \"username\": \"replicationUser\",\u00a0 \u00a0 \"password\": \"486#@%*@\"\u00a0 }}\n```\n| Property   | Description                                          |\n|:-----------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| SOURCE_NAME  | The name of the source representation instance to create.                              |\n| REGION   | The region where you want the source representation instance to reside.                           |\n| DATABASE_VERSION | The database version running on your external server. The options are POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, POSTGRES_14, or POSTGRES_15.   |\n| SOURCE HOST  | The IPv4 address and port for the external server, or the the DNS address for the external server. If the external server is hosted on Cloud SQL, the port is 5432.    |\n| USERNAME   | The replication user account on the external server.                               |\n| PASSWORD   | The password for the replication user account.                                 |\n| BUCKET   | The name of the bucket that contains the dump file. Include only if you're setting up replication with a dump file that exists in a Cloud Storage bucket.      |\n| DUMP_FILE  | A file in the bucket that contains the data from the external server.                           |\n| CLIENT_CA_CERT | The CA certificate on the external server. Include only if SSL/TLS is used on the external server.                    |\n| CLIENT_CERT  | The client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server.       |\n| CLIENT_KEY  | The private key file for the client certificate on the external server. Required only for server-client authentication. Include only if SSL/TLS is used on the external server. |\n### Create a source representation instance\nBefore you start this step, [create a JSON file that contains your source request data](#create-source-request) .\nThen, to create the source representation instance in Cloud SQL, open a terminal and run the following commands:\n```\n\u00a0 \u00a0 gcloud auth login\u00a0 \u00a0 ACCESS_TOKEN=\"$(gcloud auth print-access-token)\"\u00a0 \u00a0 curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0--header 'Content-Type: application/json' \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0--data @JSON_PATH \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0-X POST \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0https://sqladmin.googleapis.com/sql/v1beta4/projects/PROJECT-ID/instances\n```\n```\ngcloud auth loginACCESS_TOKEN=\"$(gcloud auth print-access-token)\"curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0--header 'Content-Type: application/json' \\\u00a0 \u00a0 \u00a0--data @./source.json \\\u00a0 \u00a0 \u00a0-X POST \\\u00a0 \u00a0 \u00a0https://sqladmin.googleapis.com/sql/v1beta4/projects/MyProject/instances\n```\n| Property | Description                  |\n|:-----------|:----------------------------------------------------------------------------------|\n| PROJECT_ID | The ID for your project in Google Cloud.           |\n| JSON_PATH | The path to the JSON file that contains the request data for the external server. |\n## Update a source representation instance\nIf you update the [request data](/sql/docs/postgres/replication/configure-replication-from-external#create-source-request) from the external server, you can update the existing source representation instance to use the modified values.\n### Modify the request data\nUpdate the request data to include any fields that have changed. This includes the `hostPort` , `username` , `password` , `caCertificate` , `clientCertificate` , and `clientKey` fields. After updating the request data, use it in a `curl` command to update the instance in Cloud SQL.\nThe following example shows updating the `username` and `password` fields with a different username and password:\n```\n\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"name\": \"SOURCE_NAME\",\u00a0 \u00a0 \u00a0 \"region\": \"REGION\",\u00a0 \u00a0 \u00a0 \"databaseVersion\": \"DATABASE_VERSION\",\u00a0 \u00a0 \u00a0 \"onPremisesConfiguration\": {\u00a0 \u00a0 \u00a0 \u00a0 \"username\": \"NEW_USERNAME\",\u00a0 \u00a0 \u00a0 \u00a0 \"password\": \"NEW_PASSWORD\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\n```\n```\n// example of source.json for external server that// - initiates replication from a Cloud SQL managed import// - doesn't use SSL/TSL{\u00a0 \"name\": \"cloudsql-source-instance\",\u00a0 \"region\": \"us-central1\",\u00a0 \"databaseVersion\": \"POSTGRES_9_6\",\u00a0 \"onPremisesConfiguration\": {\u00a0 \u00a0 \"username\": \"newReplicationUser\",\u00a0 \u00a0 \"password\": \"525#@%*@\"\u00a0 }}\n```\n| Property   | Description                                       |\n|:-----------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| SOURCE_NAME  | The name of the source representation instance.                              |\n| REGION   | The region where the source representation instance resides.                           |\n| DATABASE_VERSION | The database version running on your external server. The options are POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, POSTGRES_14, or POSTGRES_15. |\n| NEW_USERNAME  | The new replication user account on the external server.                            |\n| NEW_PASSWORD  | The password for the new account.                                 |\n### Modify a source representation instance\nBefore you start this step, [create a JSON file that contains your modified request data](#modify-source-request) .\nThen, to modify the source representation instance in Cloud SQL, open a terminal and run the following commands:\n```\n\u00a0 \u00a0 gcloud auth login\u00a0 \u00a0 ACCESS_TOKEN=\"$(gcloud auth print-access-token)\"\u00a0 \u00a0 curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0--header 'Content-Type: application/json' \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0--data @JSON_PATH \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0-X PATCH \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0https://sqladmin.googleapis.com/sql/v1beta4/projects/PROJECT-ID/instances/SOURCE_NAME\n```\n```\ngcloud auth loginACCESS_TOKEN=\"$(gcloud auth print-access-token)\"curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0--header 'Content-Type: application/json' \\\u00a0 \u00a0 \u00a0--data @./source.json \\\u00a0 \u00a0 \u00a0-X PATCH \\\u00a0 \u00a0 \u00a0https://sqladmin.googleapis.com/sql/v1beta4/projects/MyProject/instances/cloudsql-source-instance\n```\n| Property | Description                  |\n|:------------|:----------------------------------------------------------------------------------|\n| PROJECT_ID | The ID for your project in Google Cloud.           |\n| JSON_PATH | The path to the JSON file that contains the request data for the external server. |\n| SOURCE_NAME | The name of the source representation instance.         |\n## Set up a Cloud SQL replica\nThe Cloud SQL replica eventually contains the data from the external server. In this step, you create the request data and use it in a `curl` command that creates the Cloud SQL replica in Cloud SQL.\n### Create the request data\nThe request data contains basic information about your external server and Cloud SQL replica in JSON format. The request data can be configured for a Cloud SQL replica on a public or private network and should contain this information:\n```\n\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"settings\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"tier\": \"TIER\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"dataDiskSizeGb\": \"DISK_SIZE\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"ipConfiguration\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"privateNetwork\": \"projects/PROJECT_ID/global/networks/NETWORK_NAME\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"availabilityType\": \"AVAILABILITY_TYPE\"\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"masterInstanceName\": \"SOURCE_REPRESENTATION_INSTANCE_NAME\",\u00a0 \u00a0 \u00a0 \u00a0 \"region\": \"SOURCE_REGION\",\u00a0 \u00a0 \u00a0 \u00a0 \"databaseVersion\": \"DATABASE_VERSION\",\u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"REPLICA_NAME\"\u00a0 \u00a0 }\n```\n```\n\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"settings\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"tier\": \"db-custom-4-15360\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"dataDiskSizeGb\": \"100\"\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"masterInstanceName\": \"source-instance\",\u00a0 \u00a0 \u00a0 \u00a0 \"region\": \"us-central1\",\u00a0 \u00a0 \u00a0 \u00a0 \"databaseVersion\": \"POSTGRES_14\",\u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"replica-instance\"\u00a0 \u00a0 }\n```\n| Property       | Description                                                                                                                                                       |\n|:------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| TIER        | The type of machine to host your replica instance. If you do not know which machine type to use, start with db-custom-2-7680. You can change its size and other supported values later if needed.                                                                                                          |\n| DISK_SIZE       | The storage size for the Cloud SQL replica, in GB.                                                                                                                                              |\n| PROJECT_ID       | The ID of your project in Google Cloud. Include ipConfiguration only if the Cloud SQL replica is on a private network.                                                                                                                             |\n| NETWORK_NAME      | The name of the private network to use with the Cloud SQL replica.                                                                                                                                          |\n| AVAILABILITY_TYPE     | The availability type of the Cloud SQL replica. By default, the value is ZONAL. To make the replica HA, set the value to REGIONAL. To learn about the allowed values, see SqlAvailabilityType. After you create an external server HA replica, you cannot change it to a non-HA replica. This is true conversely as well. You cannot change an external server non-HA replica to an HA replica. Manual failover might lead to unrecoverable migration if attempted when the instance is still loading the initial data, or to temporary downtime if the instance is already replicating from the source. Check the replication status. |\n| SOURCE_REPRESENTATION_INSTANCE_NAME | The name of the source representation instance.                                                                                                                                              |\n| SOURCE_REGION      | The region assigned to the source representation instance.                                                                                                                                            |\n| DATABASE_VERSION     | The database version to use with the Cloud SQL replica. The options for this version are POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, POSTGRES_14, or POSTGRES_15. Match the database version running on your external server, or set the value to no more than one version later.                                                                                |\n| REPLICA_NAME      | The name of the Cloud SQL replica to create.                                                                                                                                               |\n### Create the Cloud SQL replica\nBefore you start this step, [create a JSON file that contains your replica request data](#create-replica-request) . Then, to create a Cloud SQL replica, open a Cloud Shell terminal and run these commands:\n```\n\u00a0 \u00a0 gcloud auth login\u00a0 \u00a0 ACCESS_TOKEN=\"$(gcloud auth print-access-token)\"\u00a0 \u00a0 curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0--header 'Content-Type: application/json' \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0--data @JSON_PATH \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0-X POST \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0https://sqladmin.googleapis.com/sql/v1beta4/projects/PROJECT-ID/instances\n```\n```\n\u00a0 \u00a0 gcloud auth login\u00a0 \u00a0 ACCESS_TOKEN=\"$(gcloud auth print-access-token)\"\u00a0 \u00a0 curl --header \"Authorization: Bearer ${ACCESS_TOKEN}\" \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0--header 'Content-Type: application/json' \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0--data @./replica.json \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0-X POST \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0https://sqladmin.googleapis.com/sql/v1beta4/projects/MyProject/instances\n```\n| Property | Description                     |\n|:-----------|:-----------------------------------------------------------------------------------------------|\n| PROJECT_ID | The ID of your project in Google Cloud, which must be the same as that of the source instance. |\n| JSON_PATH | The path to the JSON file that contains the request data for the Cloud SQL replica.   |\n### Verify your setup\nTo ensure your instances were set up correctly, go to the [Cloud SQL Instances page](https://console.cloud.google.com/sql/instances) .\nYou should see your source representation instance and the Cloud SQL replica, in a listing similar to the following:\n| Instance ID      | Type      | Public IP  |\n|:-----------------------------------|:--------------------------|:----------------|\n| (-) source-representation-instance | Database external primary | 10.68.48.3:5432 |\n| replica-instance     | Database read replica  | 34.66.48.59  |\nAlso make sure that you have the `cloudsql.instances.migrate` permission on the Cloud SQL replica. This permission is included in the `cloudsql.admin` or `cloudsql.editor` [IAM roles](/sql/docs/postgres/iam-roles) .\n### Add users to the Cloud SQL replica\n**Note:** You can skip this step if you do not need to add any additional database user accounts to the Cloud SQL replica.\nYou cannot import database user accounts from the external server, but you can [create them on a Cloud SQL replica](/sql/docs/postgres/create-manage-users) . Do this before you replicate from the external server.\n### Get the Cloud SQL replica's outgoing IP address\nYou can use the outgoing IP address of the Cloud SQL replica to create a secure connection between the external server and the Cloud SQL replica. You won't be charged for this IP address.\nTo get the outgoing IP address for the replica, do the following:- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- Next to the Cloud SQL replica's public IP address, hold the pointer over the **More info** tooltip and retrieve the outgoing IP address.Note that the outgoing IP address is not the IP address displayed in the main listing for the replica in the Google Cloud console.\nTo get the outgoing IP address for the replica, run the following command:\n```\ngcloud sql instances describe REPLICA_NAME --format=\"default(ipAddresses)\"\n```\n| Property  | Description                    |\n|:-------------|:-----------------------------------------------------------------------------------------|\n| REPLICA_NAME | The name of the Cloud SQL replica whose outgoing public IP address you want to retrieve. |\n### Allow incoming connections on the external server\nThe Cloud SQL replica needs to connect to the external server for replication to succeed. You must configure the network firewall for your external server to accept connections from the Cloud SQL replica's [outgoing IP address](#outgoing-ip) if the following conditions apply:\n- The external server is behind a firewall or some other network restriction.\n- Your Cloud SQL replica is using a public IP.\nTo connect to the Cloud SQL replica, you use the replica's primary IP address. This IP address is displayed in the Google Cloud console.\n### Update the source representation instance to allow replication to the Cloud SQL replica\nAfter you set up the source representation instance for the Cloud SQL replica, you might need to [update the source representation instance](/sql/docs/postgres/edit-instance) . For example, these scenarios require an update to your configurations:\n- The host, port, or IP of the external server changes.\n- You want to use a different PostgreSQL replication user.\n- The password of the PostgreSQL replication user changes.\n- The SSL certificates used to securely connect to the external server change.## Seed the Cloud SQL replica\nFor the initial loading of data from the external server into the Cloud SQL replica, use a managed import. It uses a service that extracts data from the external server and imports it into the Cloud SQL instance directly. For more information, see [Using a managed import to set up replication from external databases](/sql/docs/postgres/replication/managed-import-replication-from-external) .\n## Monitor replication\nWhen the Cloud SQL replica finishes the initial data load, it connects to the external server and applies all updates that were made after the export operation. [Confirm your replication status](/sql/docs/postgres/replication/manage-replicas#check_replication_status) .\nIt's important to check the replication status before promoting the replica to a standalone instance. If the replication process isn't successfully completed, a promoted replica doesn't have all the changes from your external server.\nIf replication delay is not trending toward 0, [take steps to address it](/sql/docs/postgres/troubleshooting#highlag) . You might want to check these metrics: `/postgresql/external_sync/initial_sync_complete` , `postgresql/external_sync/max_replica_byte_lag` , and `database/replication/state` . View the list of [Cloud SQL metrics](/sql/docs/postgres/admin-api/metrics) .\nOnce the Cloud SQL replica has caught up with the external server and there's no replication delay on the Cloud SQL replica, connect to your database. Run the appropriate database commands to make sure that the contents are as expected when compared with the external server. Retain your external server until the necessary validations are done.\n## Set up a cascading replica\nAfter migration, you can create cascading read replicas under your Cloud SQL replica before promoting the Cloud SQL replica.\nTo create a cascading replica, run the following commands:\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- Click the **Replicas** tab for the replica that will act as a parent for the replica that you want to create.\n- Click **Create replica** .\n- On the **Create read replica** page, update the instance ID, and any other configuration options, including the name,  region, and zone.\n- Click **Create** .Cloud SQL creates a replica. You're returned to the instance page for the  parent replica.\n- Follow steps 4-6 for each new cascading replica that you want to create.\n- Create the new replica by specifying your Cloud SQL replica as the primary instance using the [--master-instance-name](/sql/docs/postgres/replication/sdk/gcloud/reference/sql/instances/create) flag:```\ngcloud sql instances create REPLICA_NAME \\\u00a0 \u00a0 \u00a0 --master-instance-name=PARENT_REPLICA_NAME \\\n```Replace the following:- : the unique ID for the replica that you are creating\n- : the name of the Cloud SQL replica- After the replica is created, you can see that the changes made to the primary instance are replicated through all the replicas in the cascading replicas chain.\n- To create a replica under the parent replica, edit the following JSON code sample and save it to a file called`request.json`:```\n{\u00a0 \"masterInstanceName\": \"EXTERNAL_SERVER_REPLICA_NAME\",\u00a0 \"project\": \"PROJECT_ID\",\u00a0 \"name\": \"REPLICA_NAME\",\u00a0 \"region\": \"REPLICA_REGION\",\u00a0 \"settings\":\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"tier\": \"MACHINE_TYPE\",\u00a0 \u00a0 }}\n```\n- Run the following command:```\ncurl -X POST-H \"Authorization: Bearer \"$(gcloud auth print-access-token)-H \"Content-Type: application/json; charset=utf-8\"-d @request.json\"https://sqladmin.googleapis.com/v1/projects/PROJECT_ID/instances\"\n```## Promote the replica\nPromote your replica by following these steps:\n- [Promote the replica to a primary instance](/sql/docs/postgres/replication/manage-replicas#promote-replica) .\n- [Add read replicas to your instance](/sql/docs/postgres/replication/create-replica#create-2nd-gen) .\n- Optional: [Configure your instance for high availability (HA)](/sql/docs/postgres/configure-ha#ha-existing) . To prevent additional downtime, you can enable HA while [setting up a replica](/sql/docs/mysql/replication/configure-replication-from-external#setup-replica-instance) by setting`AVAILABILITY_TYPE`to`REGIONAL`.## What's next\n- Learn how to use a [managed import to set up replication from external databases](/sql/docs/postgres/replication/managed-import-replication-from-external) .", "guide": "Cloud SQL"}