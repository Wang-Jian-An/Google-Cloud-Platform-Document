{"title": "Cloud SQL - Authorize with SSL/TLS certificates", "url": "https://cloud.google.com/sql/docs/postgres/authorize-ssl", "abstract": "# Cloud SQL - Authorize with SSL/TLS certificates\nThis page describes how Cloud SQL uses self-managed Secure Socket Layer (SSL)/Transport Layer Security(TLS) certificates to securely connect to Cloud SQL instances.\nSSL/TLS provides security when connecting to Cloud SQL.SSL/TLS is automatically provided when using:- The [ Cloud SQL Auth Proxy](/sql/docs/postgres/connect-auth-proxy) \n- The [ Cloud SQL Connectors](/sql/docs/postgres/connect-connectors) \n- The built-in mechanisms in the [ App Engine](/appengine/docs) environments.\nIn these situations, self-managed SSL/TLS certificates are not required.If requiring SSL/TLS certificates is enabled, then all connections must use certificates, a Cloud SQL Connector library, or the Cloud SQL Auth Proxy, whether using public or private IP.\n", "content": "## Overview\nCloud SQL supports connecting to an instance using the Transport Layer Security (SSL/TLS) protocol. Data in transit inside a physical boundary controlled by or on behalf of Google is generally authenticated but might not be encrypted by default. If you connect to an instance using its public IP address, you must [enforce SSL/TLS certificates](#enforcing-ssl) so that the data is secure during transmission. SSL/TLS is the standard protocol for encryption of data sent over the internet. If your data isn't encrypted, anyone can examine your packets and read confidential information.\nThe safest method of encryption is called asymmetrical cryptography; this requires two cryptographic keys, one public and one private. Essentially, you use the public key to encrypt the data, and use the private key to decrypt it. Both the server and the client machines have the same set of client keys.\nIn Cloud SQL, the public key is named `client-cert.pem` and the private key is named `client-key.pem` . The server also generates its own certificate, called `server-ca.pem` .\nYour application requires all three keys to connect successfully. Store these keys securely; anyone with access to these keys could potentially connect or intercept your data. You can't retrieve the private key from the server later, so if you lose it, you need to create new client certificates to replace the ones previously in use. Likewise, when the server generates a new `server-ca.pem` file, you need to download it and store it on the PostgreSQL client's host machine, replacing the existing file.\n**Note:** Cloud SQL recommends mutual authentication, which involves using certificates to authenticate both the client and server. Enforcing SSL/TLS encryption as described below will make mutual TLS required for all clients. However, if SSL/TLS is not enforced, connecting with non-mutual TLS using the server certificate is still possible.For more information, see [the documentation for your database engine](https://www.postgresql.org/docs/current/ssl-tcp.html#SSL-SERVER-FILES) .\n## SSL/TLS certificates\nA server Certificate Authority (CA) certificate is required in SSL connections. Cloud SQL creates a server certificate automatically when you create your instance. As long as the server certificate is valid, you do not need to actively [manage your server certificate](/sql/docs/postgres/manage-ssl-instance#manage-server-certs) . However, the certificate has an expiration date of 10 years; after that date, it is no longer valid, and clients are not able to establish a secure connection to your instance using that certificate. You can also [manually create a new one](/sql/docs/postgres/configure-ssl-instance#server-certs) .\n[create client certificates](/sql/docs/postgres/configure-ssl-instance#client-certs)\n## How server certificate rotation works\nCloud SQL provides a way to [rotate your server certificate](/sql/docs/postgres/manage-ssl-instance#rotate) , so a new certificate can be seamlessly swapped in before the old certificate expires.\nAbout three months before the server certificate expires for a Cloud SQL instance, the project owners receive an email from Cloud SQL, stating that the certificate rotation process has begun for that instance. The email provides the name of the instance, and says that Cloud SQL has added a new server certificate to the project. The existing server certificate continues to function normally. In effect, the instance has two server certificates during this period.\nBefore the current certificate expires, download the new `server-ca.pem` file, which contains the certificate information for both the current and the new server certificates. Update your PostgreSQL clients to use the new file, by copying it to all of your PostgreSQL client host machines, replacing the existing file.\nAfter all of your PostgreSQL clients have been updated, send a [command](/sql/docs/postgres/manage-ssl-instance#rotate) to the Cloud SQL instance to rotate to the new server certificate. Once that is done, the old server certificate is no longer recognized, and only the new server certificate can be used.\n### Enforce SSL/TLS encryption\n[enforce SSL](/sql/docs/postgres/configure-ssl-instance#enforcing-ssl)\n### Use authorized networks\nIf your Cloud SQL instance is using a public IP address, you need to add the IP addresses of your PostgreSQL clients as [authorized networks](/sql/docs/postgres/authorize-networks) when [configuring SSL/TLS](/sql/docs/postgres/configure-ssl-instance) .\nIn this case, PostgreSQL clients are only authorized to connect if their IP addresses are added to this list. The IP addresses can limited to a single endpoint or consist of a range in CIDR format. For example: `10.50.51.3` or `10.50.51.0/26` .\n### SSL certificate expiry\nSSL certificates associated with Cloud SQL instances come with an expiry period of 10 years. On expiry, perform SSL [certificate rotation](/sql/docs/postgres/manage-ssl-instance#rotate) . You can also [reset](/sql/docs/postgres/manage-ssl-instance#reset) the SSL configuration of your Cloud SQL instance at any time.\n### What's next\n- [Configure SSL/TLS](/sql/docs/postgres/configure-ssl-instance) on your Cloud SQL instance.\n- Learn more about [how encryption is handled in Google Cloud](/security/encryption-in-transit) .\n- [Connect using SSL/TLS](/sql/docs/postgres/connect-admin-ip#connect-ssl) to your Cloud SQL instance.\n- [Manage SSL/TLS](/sql/docs/postgres/manage-ssl-instance) on your Cloud SQL instance.\nLearn more about [how PostgreSQL uses SSL/TLS](https://www.postgresql.org/docs/current/static/libpq-ssl.html) .", "guide": "Cloud SQL"}