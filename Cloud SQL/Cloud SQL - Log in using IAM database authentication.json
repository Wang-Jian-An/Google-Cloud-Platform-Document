{"title": "Cloud SQL - Log in using IAM database authentication", "url": "https://cloud.google.com/sql/docs/postgres/iam-logins", "abstract": "# Cloud SQL - Log in using IAM database authentication\nThis page describes how users and service accounts can log in to Cloud SQL databases using Cloud SQL IAM database authentication. For more information, see [IAM authentication](/sql/docs/postgres/iam-authentication) .\n", "content": "## Before you begin\n- Configure the instance to use IAM database authentication. For more information, see [Configure new instances for IAM database authentication](/sql/docs/postgres/create-edit-iam-instances#configure-iam-db-instance) .\n- Add an IAM user to the database. For more information, see [Add an IAM user or service account to the database](/sql/docs/postgres/add-manage-iam-users#creating-a-database-user) .\n- Add the [roles/cloudsql.instanceUser](/sql/docs/postgres/iam-roles) IAM role to your IAM user. It's a predefined role that contains the necessary Cloud SQL IAM`cloudsql.instances.login`permission. You need this permission to login to a database instance with IAM database authentication. For more information, see [Roles and permissions](/sql/docs/postgres/roles-and-permissions#introduction) .\n- When an IAM user is added to a database, the new database user has no privileges to any database by default. You need to use the`GRANT`command to give the IAM database user any required permissions. For more information, see [Grant database privileges to the IAM User](/sql/docs/postgres/add-manage-iam-users#grant-db-privileges) .## Log in with automatic IAM database authentication\nYou can configure a Cloud SQL connector to automatically handle authentication to the Cloud SQL instance on behalf of a user or an application. Connectors include the Cloud SQL Auth Proxy, the Go connector, the Java connector, and the Python connector, all of which support automatic IAM database authentication. When using a Cloud SQL connector with automatic IAM database authentication, the IAM account that you use to start the connector must be the same account that authenticates the database.\n**Note: ** While the Cloud SQL Auth Proxy can listen on any port, it creates outgoing or egress connections to your Cloud SQL instance only on port 3307. Because the Cloud SQL Auth Proxy calls APIs through the `sqladmin.googleapis.com` domain name, and this domain name doesn't have a fixed IP address, all egress TCP connections on port 443 must be allowed.If your client machine has an outbound firewall policy, then make sure it allows outgoing connections to port 3307 on your Cloud SQL instance's IP address. For more information, see [Options for authenticating the Cloud SQL Auth Proxy](/sql/docs/postgres/connect-auth-proxy#authentication-options) .\nTo log in using automatic IAM database authentication:\n**Important:** If you use the `cloud_sql_proxy` binary or the `--enable_iam_login` flag to start the Cloud SQL Auth Proxy, then you are using v1 of the Cloud SQL Auth Proxy. Migrate to v2, `cloud-sql-proxy` , and use the `--auto-iam-authn` flag for IAM database authentication. For more information about migrating to v2, see [Migrating from v1 to v2](https://github.com/GoogleCloudPlatform/cloud-sql-proxy/blob/main/migration-guide.md) .- Authenticate to Google Cloud. **User** Authenticate to Google Cloud using Application Default Credentials (ADC).Use the [gcloud auth application-default login](/sdk/gcloud/reference/auth/application-default/login) command. For more information, see [Set up Application Default Credentials](/docs/authentication/provide-credentials-adc) . **Service account** To authenticate to Google Cloud using ADC with a service account, you can use service account impersonation or use a service account key. To use service account impersonation, replace , and run the following command:```\ngcloud auth application-default login --impersonate-service-account SERVICE_ACCOUNT_EMAIL_ADDRESS\n```For more information, see [Set up Application Default Credentials](/docs/authentication/provide-credentials-adc) .\n- Start the Cloud SQL Auth Proxy with the `--auto-iam-authn` flag.Replace the following:- : The connection string to identify a Cloud SQL instance. If you use a port other than the default PostgreSQL port, then specify the port number. For more information on how to find and construct this string, see [Options for authenticating the Cloud SQL Auth Proxy](/sql/docs/postgres/connect-auth-proxy#authentication-options) .\n```\n./cloud-sql-proxy --auto-iam-authn INSTANCE_CONNECTION_NAME\n```For more information on how to start the proxy, see [Start the Cloud SQL Auth Proxy](/sql/docs/postgres/connect-auth-proxy#start-proxy) . **Warning:** If you run the Cloud SQL Auth Proxy as a service, keep in mind that it requests the access tokens on behalf of your applications. For this reason, ensure that only trusted users are able to access the address and port or the Unix socket that the Cloud SQL Auth Proxy is listening on.\n- When you are ready to connect to the instance by using the Cloud SQL Auth Proxy, log in with the `psql` client.Replace the following:- : IP address used by the Cloud SQL Auth Proxy. By default, the Cloud SQL Auth Proxy uses the localhost address of`127.0.0.1`, but you can assign a different IP address when you start the Cloud SQL Auth Proxy.\n- : For an IAM, the username is the full email address of the user. For a service account, this is the service account's email without the`.gserviceaccount.com`domain suffix.\n- : Optional. If you specified a different port in the instance connection string, then specify that port number.\n- : The name of the database to connect to.\nRun the following command:```\npsql -h HOSTNAME \\\u00a0-U USERNAME \\\u00a0--port PORT_NUMBER \\\u00a0--dbname=DATABASE_NAME\u00a0\n```For more information on how to connect to the Cloud SQL Auth Proxy, see [Connect with the psql client](/sql/docs/postgres/connect-auth-proxy#connect-to-proxy) . [  cloudsql/postgres/database-sql/connect_connector_iam_authn.go ](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/connect_connector_iam_authn.go) [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/connect_connector_iam_authn.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"database/sql\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"net\"\u00a0 \u00a0 \u00a0 \u00a0 \"os\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/cloudsqlconn\"\u00a0 \u00a0 \u00a0 \u00a0 \"github.com/jackc/pgx/v5\"\u00a0 \u00a0 \u00a0 \u00a0 \"github.com/jackc/pgx/v5/stdlib\")func connectWithConnectorIAMAuthN() (*sql.DB, error) {\u00a0 \u00a0 \u00a0 \u00a0 mustGetenv := func(k string) string {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 v := os.Getenv(k)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if v == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"Warning: %s environment variable not set.\", k)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return v\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 \u00a0 \u00a0 // secure - consider a more secure solution such as\u00a0 \u00a0 \u00a0 \u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 \u00a0 \u00a0 // keep secrets safe.\u00a0 \u00a0 \u00a0 \u00a0 var (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbUser \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = mustGetenv(\"DB_IAM_USER\") \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// e.g. 'service-account-name@project-id.iam'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbName \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = mustGetenv(\"DB_NAME\") \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// e.g. 'my-database'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 instanceConnectionName = mustGetenv(\"INSTANCE_CONNECTION_NAME\") // e.g. 'project:region:instance'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 usePrivate \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = os.Getenv(\"PRIVATE_IP\")\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 d, err := cloudsqlconn.NewDialer(context.Background(), cloudsqlconn.WithIAMAuthN())\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"cloudsqlconn.NewDialer: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 var opts []cloudsqlconn.DialOption\u00a0 \u00a0 \u00a0 \u00a0 if usePrivate != \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 opts = append(opts, cloudsqlconn.WithPrivateIP())\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 dsn := fmt.Sprintf(\"user=%s database=%s\", dbUser, dbName)\u00a0 \u00a0 \u00a0 \u00a0 config, err := pgx.ParseConfig(dsn)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 config.DialFunc = func(ctx context.Context, network, instance string) (net.Conn, error) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return d.Dial(ctx, instanceConnectionName, opts...)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 dbURI := stdlib.RegisterConnConfig(config)\u00a0 \u00a0 \u00a0 \u00a0 dbPool, err := sql.Open(\"pgx\", dbURI)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"sql.Open: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return dbPool, nil}\n``` [  cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectorIamAuthnConnectionPoolFactory.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectorIamAuthnConnectionPoolFactory.java) [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectorIamAuthnConnectionPoolFactory.java) \n```\nimport com.zaxxer.hikari.HikariConfig;import com.zaxxer.hikari.HikariDataSource;import javax.sql.DataSource;public class ConnectorIamAuthnConnectionPoolFactory extends ConnectionPoolFactory {\u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 // secure - consider a more secure solution such as\u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 // keep secrets safe.\u00a0 private static final String INSTANCE_CONNECTION_NAME =\u00a0 \u00a0 \u00a0 System.getenv(\"INSTANCE_CONNECTION_NAME\");\u00a0 private static final String DB_IAM_USER = System.getenv(\"DB_IAM_USER\");\u00a0 private static final String DB_NAME = System.getenv(\"DB_NAME\");\u00a0 public static DataSource createConnectionPool() {\u00a0 \u00a0 // The configuration object specifies behaviors for the connection pool.\u00a0 \u00a0 HikariConfig config = new HikariConfig();\u00a0 \u00a0 // The following URL is equivalent to setting the config options below:\u00a0 \u00a0 // jdbc:postgresql:///<DB_NAME>?cloudSqlInstance=<INSTANCE_CONNECTION_NAME>&\u00a0 \u00a0 // socketFactory=com.google.cloud.sql.postgres.SocketFactory&user=<DB_IAM_USER>&\u00a0 \u00a0 // password=password\u00a0 \u00a0 // See the link below for more info on building a JDBC URL for the Cloud SQL JDBC Socket Factory\u00a0 \u00a0 // https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory#creating-the-jdbc-url\u00a0 \u00a0 // Configure which instance and what database to connect with.\u00a0 \u00a0 config.setJdbcUrl(String.format(\"jdbc:postgresql:///%s\", DB_NAME));\u00a0 \u00a0 config.addDataSourceProperty(\"socketFactory\", \"com.google.cloud.sql.postgres.SocketFactory\");\u00a0 \u00a0 config.addDataSourceProperty(\"cloudSqlInstance\", INSTANCE_CONNECTION_NAME);\u00a0 \u00a0 // If connecting using automatic database authentication, follow the instructions for\u00a0 \u00a0 // connecting using the connector, but set the DB_IAM_USER value to an IAM user or\u00a0 \u00a0 // service account that has been given access to the database.\u00a0 \u00a0 // See https://cloud.google.com/sql/docs/postgres/iam-logins for more details.\u00a0 \u00a0 config.addDataSourceProperty(\"enableIamAuth\", \"true\");\u00a0 \u00a0 config.addDataSourceProperty(\"user\", DB_IAM_USER);\u00a0 \u00a0 // Password must be set to a nonempty value to bypass driver validation errors.\u00a0 \u00a0 config.addDataSourceProperty(\"password\", \"password\");\u00a0 \u00a0 // Explicitly set sslmode to disable to prevent driver from hanging.\u00a0 \u00a0 // The Java Connector will handle SSL so it is unneccesary to enable it at the driver level.\u00a0 \u00a0 config.addDataSourceProperty(\"sslmode\", \"disable\");\u00a0 \u00a0 // ... Specify additional connection properties here.\u00a0 \u00a0 // ...\u00a0 \u00a0 // Initialize the connection pool using the configuration object.\u00a0 \u00a0 return new HikariDataSource(config);\u00a0 }}\n``` [  r2dbc/postgres/src/test/java/com/google/cloud/sql/core/R2dbcPostgresIamAuthIntegrationTests.java ](https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory/blob/HEAD/r2dbc/postgres/src/test/java/com/google/cloud/sql/core/R2dbcPostgresIamAuthIntegrationTests.java) [View on GitHub](https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory/blob/HEAD/r2dbc/postgres/src/test/java/com/google/cloud/sql/core/R2dbcPostgresIamAuthIntegrationTests.java) \n```\nprivate static final String CONNECTION_NAME = System.getenv(\"POSTGRES_IAM_CONNECTION_NAME\");private static final String DB_NAME = System.getenv(\"POSTGRES_DB\");private static final String DB_USER = System.getenv(\"POSTGRES_IAM_USER\");\u00a0 // Set up ConnectionFactoryOptions\u00a0 ConnectionFactoryOptions options =\u00a0 \u00a0 \u00a0 ConnectionFactoryOptions.builder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .option(DRIVER, \"gcp\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .option(PROTOCOL, \"postgresql\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Password must be set to a nonempty value to bypass driver validation errors\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .option(PASSWORD, \"password\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .option(USER, DB_USER)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .option(DATABASE, DB_NAME)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .option(HOST, CONNECTION_NAME)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .option(ENABLE_IAM_AUTH, true)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 // Initialize connection pool\u00a0 ConnectionFactory connectionFactory = ConnectionFactories.get(options);\u00a0 ConnectionPoolConfiguration configuration =\u00a0 \u00a0 \u00a0 ConnectionPoolConfiguration.builder(connectionFactory).build();\u00a0 this.connectionPool = new ConnectionPool(configuration);\n``` [  cloud-sql/postgres/sqlalchemy/connect_connector_auto_iam_authn.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_connector_auto_iam_authn.py) [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_connector_auto_iam_authn.py) \n```\nimport osfrom google.cloud.sql.connector import Connector, IPTypesimport pg8000import sqlalchemydef connect_with_connector_auto_iam_authn() -> sqlalchemy.engine.base.Engine:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Initializes a connection pool for a Cloud SQL instance of Postgres.\u00a0 \u00a0 Uses the Cloud SQL Python Connector with Automatic IAM Database Authentication.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 # secure - consider a more secure solution such as\u00a0 \u00a0 # Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 # keep secrets safe.\u00a0 \u00a0 instance_connection_name = os.environ[\u00a0 \u00a0 \u00a0 \u00a0 \"INSTANCE_CONNECTION_NAME\"\u00a0 \u00a0 ] \u00a0# e.g. 'project:region:instance'\u00a0 \u00a0 db_iam_user = os.environ[\"DB_IAM_USER\"] \u00a0# e.g. 'sa-name@project-id.iam'\u00a0 \u00a0 db_name = os.environ[\"DB_NAME\"] \u00a0# e.g. 'my-database'\u00a0 \u00a0 ip_type = IPTypes.PRIVATE if os.environ.get(\"PRIVATE_IP\") else IPTypes.PUBLIC\u00a0 \u00a0 # initialize Cloud SQL Python Connector object\u00a0 \u00a0 connector = Connector()\u00a0 \u00a0 def getconn() -> pg8000.dbapi.Connection:\u00a0 \u00a0 \u00a0 \u00a0 conn: pg8000.dbapi.Connection = connector.connect(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 instance_connection_name,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"pg8000\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 user=db_iam_user,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 db=db_name,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 enable_iam_auth=True,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ip_type=ip_type,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 return conn\u00a0 \u00a0 # The Cloud SQL Python Connector can be used with SQLAlchemy\u00a0 \u00a0 # using the 'creator' argument to 'create_engine'\u00a0 \u00a0 pool = sqlalchemy.create_engine(\u00a0 \u00a0 \u00a0 \u00a0 \"postgresql+pg8000://\",\u00a0 \u00a0 \u00a0 \u00a0 creator=getconn,\u00a0 \u00a0 \u00a0 \u00a0 # ...\u00a0 \u00a0 )\u00a0 \u00a0 return pool\n```\nTo open an interactive example for Cloud SQL Python Connector, click [here](https://colab.research.google.com/github/GoogleCloudPlatform/cloud-sql-python-connector/blob/main/samples/notebooks/postgres_python_connector.ipynb#scrollTo=GCsS4f5UCYUa) .\n## Log in with manual IAM database authentication\n**Note:** If you plan to use the Cloud SQL Auth Proxy, the Go connector, the Java connector, or the Python connector, then see [Log in with automatic IAM database authentication](/sql/docs/postgres/iam-logins#log-in-with-automatic) .\nA user or an application can authenticate to the database using IAM by manually requesting an access token from Google Cloud and presenting it to the database. Using the [gcloud CLI](/sdk/gcloud) , you can explicitly request an [OAuth 2.0](https://developers.google.com/identity/protocols/oauth2) token with the Cloud SQL Admin API scope that is used to log in to the database. When you log in as a database user with manual IAM database authentication, you use your email address as the username and the access token as the password. You can use this method with either a direct connection to the database or with a Cloud SQL connector.\nIn this procedure, you authenticate to Google Cloud, request an access token, and then connect to the database by passing in the token as the password for the IAM database user. Use these steps to connect without the [Cloud SQL Auth Proxy](/sql/docs/sql-proxy) .\nFor these steps, you must:\nIf you are connecting to an instance with public IP, authorize external access to the instance. For more information, see [Authorize your machine's IP address for public IP](/sql/docs/postgres/authorize-networks#console) .\nIf you are connecting to an instance with private IP, run the command within the Virtual Private Cloud (VPC) network.\nUse the [gcloud sql generate-login-token](/sdk/gcloud/reference/sql/generate-login-token) command to generate your authentication token.\nTo log in using manual IAM database authentication:\n- Authenticate to Google Cloud. **User** Authenticate to IAM using [gcloud auth login](/sdk/gcloud/reference/auth/login) . For more information, see [Authorize with a user account](/sdk/docs/authorizing#user-account) . **Service account** Authenticate to IAM using [gcloud auth activate-service-account](/sdk/gcloud/reference/auth/activate-service-account) . For more information, see [Authorize with a service account](/sdk/docs/authorizing#service-account) .\n- Request the access token, and log in with a client. **Warning:** You can use your OAuth 2.0 token to make authenticated requests on your behalf. Make sure to keep it secure, and be careful where you store it.Replace the following:- : The IP address of the instance, either the public IP address or private IP address.\n- : For an IAM, the username is the full email address of the user. For a service account, this is the service account's email without the`.gserviceaccount.com`domain suffix.\n- : The name of the database to connect to.\n```\n\u00a0PGPASSWORD=`gcloud sql generate-login-token` \\\u00a0psql \"sslmode=require \\\u00a0hostaddr=HOSTNAME \\\u00a0user=USERNAME \\\u00a0dbname=DATABASE_NAME\" \\\u00a0--no-password\u00a0\n```If [ssl_mode](/sql/docs/postgres/configure-ssl-instance#enforcing-ssl) on your Cloud SQL instance is configured to `TRUSTED_CLIENT_CERTIFICATE_REQUIRED` , then we recommend that you [log in with automatic IAM database authentication](#log-in-with-automatic) to enforce client identity validation. **Note:** The OAuth 2.0 token can't be entered or pasted directly into a password field, because that token is longer than the field's maximum size. Use an environment variable to pass the authentication token to the command. The provided command is for Unix/Linux environments. If you use Microsoft Windows, substitute Windows environment variable settings.## What's next\n- Learn more about [IAM database authentication](/sql/docs/postgres/iam-authentication) .\n- Learn how to [enable and view login information in audit logs](/sql/docs/postgres/add-manage-iam-users#viewing-login-audit-logs) .\n- Learn how to [create users and service accounts that use Cloud SQL IAM database authentication](/sql/docs/postgres/add-manage-iam-users#creating-a-database-user) .\n- Learn how to [manage users and service accounts for IAM database authentication](/sql/docs/postgres/add-manage-iam-users) .", "guide": "Cloud SQL"}