{"title": "Cloud SQL - Connect from Cloud Run", "url": "https://cloud.google.com/sql/docs/postgres/connect-run", "abstract": "# Cloud SQL - Connect from Cloud Run\nThis page contains information and examples for connecting to a Cloud SQL instance from a service running in Cloud Run.\n**For step-by-step instructions on running a Cloud Run sample web application connected to Cloud SQL,** see the [quickstart for connecting from Cloud Run](/sql/docs/postgres/connect-instance-cloud-run) .\nCloud SQL is a fully-managed database service that helps you set up, maintain, manage, and administer your relational databases in the cloud.\n[Cloud Run](/run/docs/overview/what-is-cloud-run) is a managed compute platform that lets you run containers directly on top of Google Cloud infrastructure.\n", "content": "## Set up a Cloud SQL instance\n- Enable the Cloud SQL Admin API in the Google Cloud project that you are connecting from, if you haven't already done so: [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=sqladmin&redirect=https://console.cloud.google.com) \n- [Create a Cloud SQL for PostgreSQL instance](/sql/docs/postgres/create-instance) .By default, Cloud SQL assigns a public IP address to a new  instance.  You also have the option to assign a private IP address. For more  information about the connectivity options for both, see the [ Connecting Overview](/sql/docs/postgres/connect-overview) page.## Configure Cloud Run\n[Compare the two network egress methods](/run/docs/configuring/vpc-connect-comparison)\n- Make sure that the instance created earlier has a public IP address. You can verify this on the **Overview** page for your instance in the [Google Cloud console](https://console.cloud.google.com/sql) . If you need to add one, see the [Configuring public IP page](/sql/docs/postgres/configure-ip) for instructions.\n- Get thefor your instance. This can be found on the **Overview** page for your instance in the [Google Cloud console](https://console.cloud.google.com/sql) or by running the following command:`gcloud sql instances describe` ``.\n- [ Configure the service account](/run/docs/configuring/services/service-accounts) for your service. Make sure that the service account has the appropriate [Cloud SQL roles and permissions to connect to Cloud SQL](/sql/docs/mysql/project-access-control#roles) .\n- The service account for your service needs one of the following\n- [IAM roles](/iam/docs/understanding-roles#cloud-sql-roles) \n- :- `Cloud SQL Client`(preferred)\n- `Cloud SQL Admin`- Or, you can manually assign the following IAM permissions:- `cloudsql.instances.connect`\n- `cloudsql.instances.get` **Note:** If the authorizing service account belongs to a different project than the one containing the Cloud SQL instance, you must- Enable the Cloud SQL Admin API in both the projects.\n- Add the IAM permissions for the service account in the project containing the Cloud SQL instance.Like any configuration change, setting a new configuration for the Cloud SQL connection leads to the creation of a new Cloud Run revision. Subsequent revisions will also automatically get this Cloud SQL connection unless you make explicit updates to change it.\n- [Go to Cloud Run](https://console.cloud.google.com/run) \n- Start configuring the service:- If you are adding a Cloud SQL connection to a new service:You need to have your service containerized and uploaded to the       Container Registry or Artifact Registry. If you don't already have one, see these       instructions about [building and deploying](/run/docs/quickstarts/build-and-deploy/deploy-python-service) a       container image.\n- If you are adding Cloud SQL connections to an existing service:- Click on the service name.\n- Click on the **Edit and Deploy New Revision** tab.\n- Enable connecting to a Cloud SQL instance: **Note:** If your application is written in    Java you can skip this step, since you do this in the Java    Cloud SQL Connector.- Click **\nContainer, Variables & Secrets, Connections, Security\n** .\n- Click on the **Container** tab.\n- Scroll down to **Cloud SQL connections** \n- Click on **Add connection** \n- Click on **Enable the Cloud SQL Admin** button if you have not yet enabled the Cloud SQL Admin    API.\n- If you are adding a connection to a Cloud SQL instance in your project,     select the desired Cloud SQL instance from the dropdown menu.\n- If you are using a Cloud SQL instance from another project, select **custom connection string** in the dropdown and then enter the full      instance connection name in the format.\n- If you are deleting a connection, hover your cursor to the right of the      connection to display the Trash icon, and click it.\n- Click **Create** or **Deploy** .\nBefore using any of the commands below, make the following replacements:- with the image you are deploying\n- with the name of your Cloud Run service\n- with the instance connection name of    your Cloud SQL instance, or a comma delimited list of    connection names.If you are deploying a new container, use the following command:```\ngcloud run deploy \\\u00a0 --image=IMAGE \\\u00a0 --add-cloudsql-instances=INSTANCE_CONNECTION_NAME\n```If you are updating an existing service, use the following command:```\ngcloud run services update SERVICE_NAME \\\u00a0 --add-cloudsql-instances=INSTANCE_CONNECTION_NAME\n```\nThe following code creates a base Cloud Run container, with a connected Cloud SQL instance.\n [  run/connect_cloud_sql/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/run/connect_cloud_sql/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/run/connect_cloud_sql/main.tf) \n```\nresource \"google_cloud_run_v2_service\" \"default\" {\u00a0 name \u00a0 \u00a0 = \"cloudrun-service\"\u00a0 location = \"us-central1\"\u00a0 template {\u00a0 \u00a0 containers {\u00a0 \u00a0 \u00a0 image = \"us-docker.pkg.dev/cloudrun/container/hello:latest\" # Image to deploy\u00a0 \u00a0 \u00a0 volume_mounts {\u00a0 \u00a0 \u00a0 \u00a0 name \u00a0 \u00a0 \u00a0 = \"cloudsql\"\u00a0 \u00a0 \u00a0 \u00a0 mount_path = \"/cloudsql\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 volumes {\u00a0 \u00a0 \u00a0 name = \"cloudsql\"\u00a0 \u00a0 \u00a0 cloud_sql_instance {\u00a0 \u00a0 \u00a0 \u00a0 instances = [google_sql_database_instance.default.connection_name]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 client \u00a0 \u00a0 = \"terraform\"\u00a0 depends_on = [google_project_service.secretmanager_api, google_project_service.cloudrun_api, google_project_service.sqladmin_api]}\n```\n- Apply the changes by entering`terraform apply`.\n- Verify the changes by checking the [Cloud Run](/run) service, clicking the **Revisions** tab, and then the **Connections** tab.If the authorizing service account belongs to a different project than the one containing the Cloud SQL instance, do the following:\n- In both projects, enable the Cloud SQL Admin API.\n- For the service account in the project that contains the Cloud SQL instance, add the [IAM permissions](/sql/docs/mysql/roles-and-permissions#serverless-roles-permissions) .Direct VPC egress and connectors use private IP addresses to handle communication to your VPC network. To connect directly with private IP addresses using one of these egress methods, do the following:\n- Make sure that the Cloud SQL instance created previously has a private IP address. To add an internal IP address, see [Configure private IP](/sql/docs/postgres/configure-private-ip) .\n- [Configure your egress method](/run/docs/configuring/connecting-vpc) to connect to the same VPC network as your Cloud SQL instance. Note the following conditions:\n- Direct VPC egress and Serverless VPC Access both support  communication to VPC networks connected using [Cloud VPN](/vpn/docs) and [VPC Network Peering](/vpc/docs/using-vpc-peering) .\n- Direct VPC egress and Serverless VPC Access don't support [legacy networks](/vpc/docs/legacy) .\n- Unless you're using [ Shared VPC](/vpc/docs/configure-serverless-vpc-access#shared-vpc) , a connector must share the same project and  region as the resource that uses it, although the connector can send traffic  to resources in different regions.\n- Connect using your instance's private IP address and port`5432`.## Connect to Cloud SQL\nAfter you configure Cloud Run, you can connect to your Cloud SQL instance.\nFor public IP paths, Cloud Run provides encryption and connects using the [Cloud SQL Auth Proxy](/sql/docs/postgres/sql-proxy) in two ways:\n- Through [Unix sockets](#connect-unix-socket) \n- By using a [Cloud SQL connector](#connect-connectors) \n### Use Secret ManagerGoogle recommends that you use [Secret Manager](/secret-manager) to store sensitive information such as SQL credentials. You can [pass secrets as environment variables or mount as a volume](/run/docs/configuring/secrets) with Cloud Run.\nAfter [creating a secret](/secret-manager/docs/creating-and-accessing-secrets#create) in  Secret Manager, update an existing service, with the following command:```\ngcloud run services update SERVICE_NAME \\\u00a0 --add-cloudsql-instances=INSTANCE_CONNECTION_NAME\u00a0 --update-env-vars=INSTANCE_CONNECTION_NAME=INSTANCE_CONNECTION_NAME_SECRET \\\u00a0 --update-secrets=DB_USER=DB_USER_SECRET:latest \\\u00a0 --update-secrets=DB_PASS=DB_PASS_SECRET:latest \\\u00a0 --update-secrets=DB_NAME=DB_NAME_SECRET:latest\n```The following creates secret resources to securely hold the database user, password, and name values using `google_secret_manager_secret` and `google_secret_manager_secret_version` . Note that you must update the project compute service account to have access to each secret.\n [  run/connect_cloud_sql/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/run/connect_cloud_sql/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/run/connect_cloud_sql/main.tf) \n```\n# Create dbuser secretresource \"google_secret_manager_secret\" \"dbuser\" {\u00a0 secret_id = \"dbusersecret\"\u00a0 replication {\u00a0 \u00a0 auto {}\u00a0 }\u00a0 depends_on = [google_project_service.secretmanager_api]}# Attaches secret data for dbuser secretresource \"google_secret_manager_secret_version\" \"dbuser_data\" {\u00a0 secret \u00a0 \u00a0 \u00a0= google_secret_manager_secret.dbuser.id\u00a0 secret_data = \"secret-data\" # Stores secret as a plain txt in state}# Update service account for dbuser secretresource \"google_secret_manager_secret_iam_member\" \"secretaccess_compute_dbuser\" {\u00a0 secret_id = google_secret_manager_secret.dbuser.id\u00a0 role \u00a0 \u00a0 \u00a0= \"roles/secretmanager.secretAccessor\"\u00a0 member \u00a0 \u00a0= \"serviceAccount:${data.google_project.project.number}-compute@developer.gserviceaccount.com\" # Project's compute service account}\n``` [  run/connect_cloud_sql/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/run/connect_cloud_sql/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/run/connect_cloud_sql/main.tf) \n```\n# Create dbpass secretresource \"google_secret_manager_secret\" \"dbpass\" {\u00a0 secret_id = \"dbpasssecret\"\u00a0 replication {\u00a0 \u00a0 auto {}\u00a0 }\u00a0 depends_on = [google_project_service.secretmanager_api]}# Attaches secret data for dbpass secretresource \"google_secret_manager_secret_version\" \"dbpass_data\" {\u00a0 secret \u00a0 \u00a0 \u00a0= google_secret_manager_secret.dbpass.id\u00a0 secret_data = \"secret-data\" # Stores secret as a plain txt in state}# Update service account for dbpass secretresource \"google_secret_manager_secret_iam_member\" \"secretaccess_compute_dbpass\" {\u00a0 secret_id = google_secret_manager_secret.dbpass.id\u00a0 role \u00a0 \u00a0 \u00a0= \"roles/secretmanager.secretAccessor\"\u00a0 member \u00a0 \u00a0= \"serviceAccount:${data.google_project.project.number}-compute@developer.gserviceaccount.com\" # Project's compute service account}\n``` [  run/connect_cloud_sql/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/run/connect_cloud_sql/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/run/connect_cloud_sql/main.tf) \n```\n# Create dbname secretresource \"google_secret_manager_secret\" \"dbname\" {\u00a0 secret_id = \"dbnamesecret\"\u00a0 replication {\u00a0 \u00a0 auto {}\u00a0 }\u00a0 depends_on = [google_project_service.secretmanager_api]}# Attaches secret data for dbname secretresource \"google_secret_manager_secret_version\" \"dbname_data\" {\u00a0 secret \u00a0 \u00a0 \u00a0= google_secret_manager_secret.dbname.id\u00a0 secret_data = \"secret-data\" # Stores secret as a plain txt in state}# Update service account for dbname secretresource \"google_secret_manager_secret_iam_member\" \"secretaccess_compute_dbname\" {\u00a0 secret_id = google_secret_manager_secret.dbname.id\u00a0 role \u00a0 \u00a0 \u00a0= \"roles/secretmanager.secretAccessor\"\u00a0 member \u00a0 \u00a0= \"serviceAccount:${data.google_project.project.number}-compute@developer.gserviceaccount.com\" # Project's compute service account}\n```\nUpdate the main Cloud Run resource to include the new secrets.\n [  run/connect_cloud_sql/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/run/connect_cloud_sql/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/run/connect_cloud_sql/main.tf) \n```\nresource \"google_cloud_run_v2_service\" \"default\" {\u00a0 name \u00a0 \u00a0 = \"cloudrun-service\"\u00a0 location = \"us-central1\"\u00a0 template {\u00a0 \u00a0 containers {\u00a0 \u00a0 \u00a0 image = \"us-docker.pkg.dev/cloudrun/container/hello:latest\" # Image to deploy\u00a0 \u00a0 \u00a0 # Sets a environment variable for instance connection name\u00a0 \u00a0 \u00a0 env {\u00a0 \u00a0 \u00a0 \u00a0 name \u00a0= \"INSTANCE_CONNECTION_NAME\"\u00a0 \u00a0 \u00a0 \u00a0 value = google_sql_database_instance.default.connection_name\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 # Sets a secret environment variable for database user secret\u00a0 \u00a0 \u00a0 env {\u00a0 \u00a0 \u00a0 \u00a0 name = \"DB_USER\"\u00a0 \u00a0 \u00a0 \u00a0 value_source {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 secret_key_ref {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 secret \u00a0= google_secret_manager_secret.dbuser.secret_id # secret name\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 version = \"latest\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# secret version number or 'latest'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 # Sets a secret environment variable for database password secret\u00a0 \u00a0 \u00a0 env {\u00a0 \u00a0 \u00a0 \u00a0 name = \"DB_PASS\"\u00a0 \u00a0 \u00a0 \u00a0 value_source {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 secret_key_ref {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 secret \u00a0= google_secret_manager_secret.dbpass.secret_id # secret name\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 version = \"latest\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# secret version number or 'latest'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 # Sets a secret environment variable for database name secret\u00a0 \u00a0 \u00a0 env {\u00a0 \u00a0 \u00a0 \u00a0 name = \"DB_NAME\"\u00a0 \u00a0 \u00a0 \u00a0 value_source {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 secret_key_ref {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 secret \u00a0= google_secret_manager_secret.dbname.secret_id # secret name\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 version = \"latest\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# secret version number or 'latest'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 volume_mounts {\u00a0 \u00a0 \u00a0 \u00a0 name \u00a0 \u00a0 \u00a0 = \"cloudsql\"\u00a0 \u00a0 \u00a0 \u00a0 mount_path = \"/cloudsql\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 volumes {\u00a0 \u00a0 \u00a0 name = \"cloudsql\"\u00a0 \u00a0 \u00a0 cloud_sql_instance {\u00a0 \u00a0 \u00a0 \u00a0 instances = [google_sql_database_instance.default.connection_name]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 client \u00a0 \u00a0 = \"terraform\"\u00a0 depends_on = [google_project_service.secretmanager_api, google_project_service.cloudrun_api, google_project_service.sqladmin_api]}\n```\nApply the changes by entering `terraform apply` .\nThe example command uses the secret version, ; however, Google recommends [pinning the secret](/secret-manager/docs/best-practices#administration) to a specific version, .\nFor private IP paths, your application connects directly to your instance through a VPC network. This method uses TCP to connect directly to the Cloud SQL instance without using the Cloud SQL Auth Proxy.\n### Connect with TCPConnect using the private IP address of your Cloud SQL instance as the host and port `5432` .To see this snippet in the context of a web application, view [the README on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/tree/master/cloud-sql/postgres/sqlalchemy/README.md) .\n [  cloud-sql/postgres/sqlalchemy/connect_tcp.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_tcp.py) [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_tcp.py) \n```\nimport osimport sslimport sqlalchemydef connect_tcp_socket() -> sqlalchemy.engine.base.Engine:\u00a0 \u00a0 \"\"\"Initializes a TCP connection pool for a Cloud SQL instance of Postgres.\"\"\"\u00a0 \u00a0 # Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 # secure - consider a more secure solution such as\u00a0 \u00a0 # Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 # keep secrets safe.\u00a0 \u00a0 db_host = os.environ[\u00a0 \u00a0 \u00a0 \u00a0 \"INSTANCE_HOST\"\u00a0 \u00a0 ] \u00a0# e.g. '127.0.0.1' ('172.17.0.1' if deployed to GAE Flex)\u00a0 \u00a0 db_user = os.environ[\"DB_USER\"] \u00a0# e.g. 'my-db-user'\u00a0 \u00a0 db_pass = os.environ[\"DB_PASS\"] \u00a0# e.g. 'my-db-password'\u00a0 \u00a0 db_name = os.environ[\"DB_NAME\"] \u00a0# e.g. 'my-database'\u00a0 \u00a0 db_port = os.environ[\"DB_PORT\"] \u00a0# e.g. 5432\u00a0 \u00a0 pool = sqlalchemy.create_engine(\u00a0 \u00a0 \u00a0 \u00a0 # Equivalent URL:\u00a0 \u00a0 \u00a0 \u00a0 # postgresql+pg8000://<db_user>:<db_pass>@<db_host>:<db_port>/<db_name>\u00a0 \u00a0 \u00a0 \u00a0 sqlalchemy.engine.url.URL.create(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 drivername=\"postgresql+pg8000\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 username=db_user,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 password=db_pass,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 host=db_host,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port=db_port,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 database=db_name,\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 # ...\u00a0 \u00a0 )\u00a0 \u00a0 return pool\n```To see this snippet in the context of a web application, view [the README on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/master/cloud-sql/postgres/servlet/README.md) .\nNote:\n- CLOUD_SQL_CONNECTION_NAME should be represented as    <MY-PROJECT>:<INSTANCE-REGION>:<INSTANCE-NAME>\n- Using the argument ipTypes=PRIVATE will force the SocketFactory    to connect with an instance's associated private IP\n- See the JDBC socket factory version requirements for the pom.xml    file [ here ](https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory/blob/main/docs/jdbc-mysql.md) .\n [  cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/TcpConnectionPoolFactory.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/TcpConnectionPoolFactory.java) [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/TcpConnectionPoolFactory.java) \n```\nimport com.zaxxer.hikari.HikariConfig;import com.zaxxer.hikari.HikariDataSource;import javax.sql.DataSource;public class TcpConnectionPoolFactory extends ConnectionPoolFactory {\u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 // secure - consider a more secure solution such as\u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 // keep secrets safe.\u00a0 private static final String DB_USER = System.getenv(\"DB_USER\");\u00a0 private static final String DB_PASS = System.getenv(\"DB_PASS\");\u00a0 private static final String DB_NAME = System.getenv(\"DB_NAME\");\u00a0 private static final String INSTANCE_HOST = System.getenv(\"INSTANCE_HOST\");\u00a0 private static final String DB_PORT = System.getenv(\"DB_PORT\");\u00a0 public static DataSource createConnectionPool() {\u00a0 \u00a0 // The configuration object specifies behaviors for the connection pool.\u00a0 \u00a0 HikariConfig config = new HikariConfig();\u00a0 \u00a0 // The following URL is equivalent to setting the config options below:\u00a0 \u00a0 // jdbc:postgresql://<INSTANCE_HOST>:<DB_PORT>/<DB_NAME>?user=<DB_USER>&password=<DB_PASS>\u00a0 \u00a0 // See the link below for more info on building a JDBC URL for the Cloud SQL JDBC Socket Factory\u00a0 \u00a0 // https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory#creating-the-jdbc-url\u00a0 \u00a0 // Configure which instance and what database user to connect with.\u00a0 \u00a0 config.setJdbcUrl(String.format(\"jdbc:postgresql://%s:%s/%s\", INSTANCE_HOST, DB_PORT, DB_NAME));\u00a0 \u00a0 config.setUsername(DB_USER); // e.g. \"root\", \"postgres\"\u00a0 \u00a0 config.setPassword(DB_PASS); // e.g. \"my-password\"\u00a0 \u00a0 // ... Specify additional connection properties here.\u00a0 \u00a0 // ...\u00a0 \u00a0 // Initialize the connection pool using the configuration object.\u00a0 \u00a0 return new HikariDataSource(config);\u00a0 }}\n```To see this snippet in the context of a web application, view [the README on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/master/cloud-sql/postgres/knex/README.md) .\n [  cloud-sql/postgres/knex/connect-tcp.js ](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/connect-tcp.js) [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/connect-tcp.js) \n```\nconst Knex = require('knex');const fs = require('fs');// createTcpPool initializes a TCP connection pool for a Cloud SQL// instance of Postgres.const createTcpPool = async config => {\u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 // secure - consider a more secure solution such as\u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 // keep secrets safe.\u00a0 const dbConfig = {\u00a0 \u00a0 client: 'pg',\u00a0 \u00a0 connection: {\u00a0 \u00a0 \u00a0 host: process.env.INSTANCE_HOST, // e.g. '127.0.0.1'\u00a0 \u00a0 \u00a0 port: process.env.DB_PORT, // e.g. '5432'\u00a0 \u00a0 \u00a0 user: process.env.DB_USER, // e.g. 'my-user'\u00a0 \u00a0 \u00a0 password: process.env.DB_PASS, // e.g. 'my-user-password'\u00a0 \u00a0 \u00a0 database: process.env.DB_NAME, // e.g. 'my-database'\u00a0 \u00a0 },\u00a0 \u00a0 // ... Specify additional properties here.\u00a0 \u00a0 ...config,\u00a0 };\u00a0 // Establish a connection to the database.\u00a0 return Knex(dbConfig);};\n```To see this snippet in the context of a web application, view [the README on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/tree/master/cloudsql/postgres/database-sql/README.md) .\n [  cloudsql/postgres/database-sql/connect_tcp.go ](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/connect_tcp.go) [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/connect_tcp.go) \n```\npackage cloudsqlimport (\u00a0 \u00a0 \u00a0 \u00a0 \"database/sql\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"os\"\u00a0 \u00a0 \u00a0 \u00a0 // Note: If connecting using the App Engine Flex Go runtime, use\u00a0 \u00a0 \u00a0 \u00a0 // \"github.com/jackc/pgx/stdlib\" instead, since v5 requires\u00a0 \u00a0 \u00a0 \u00a0 // Go modules which are not supported by App Engine Flex.\u00a0 \u00a0 \u00a0 \u00a0 _ \"github.com/jackc/pgx/v5/stdlib\")// connectTCPSocket initializes a TCP connection pool for a Cloud SQL// instance of Postgres.func connectTCPSocket() (*sql.DB, error) {\u00a0 \u00a0 \u00a0 \u00a0 mustGetenv := func(k string) string {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 v := os.Getenv(k)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if v == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"Fatal Error in connect_tcp.go: %s environment variable not set.\", k)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return v\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 \u00a0 \u00a0 // secure - consider a more secure solution such as\u00a0 \u00a0 \u00a0 \u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 \u00a0 \u00a0 // keep secrets safe.\u00a0 \u00a0 \u00a0 \u00a0 var (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbUser \u00a0 \u00a0= mustGetenv(\"DB_USER\") \u00a0 \u00a0 \u00a0 // e.g. 'my-db-user'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbPwd \u00a0 \u00a0 = mustGetenv(\"DB_PASS\") \u00a0 \u00a0 \u00a0 // e.g. 'my-db-password'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbTCPHost = mustGetenv(\"INSTANCE_HOST\") // e.g. '127.0.0.1' ('172.17.0.1' if deployed to GAE Flex)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbPort \u00a0 \u00a0= mustGetenv(\"DB_PORT\") \u00a0 \u00a0 \u00a0 // e.g. '5432'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbName \u00a0 \u00a0= mustGetenv(\"DB_NAME\") \u00a0 \u00a0 \u00a0 // e.g. 'my-database'\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 dbURI := fmt.Sprintf(\"host=%s user=%s password=%s port=%s database=%s\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbTCPHost, dbUser, dbPwd, dbPort, dbName)\u00a0 \u00a0 \u00a0 \u00a0 // dbPool is the pool of database connections.\u00a0 \u00a0 \u00a0 \u00a0 dbPool, err := sql.Open(\"pgx\", dbURI)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"sql.Open: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // ...\u00a0 \u00a0 \u00a0 \u00a0 return dbPool, nil}\n```To see this snippet in the context of a web application, view [the README on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/master/cloud-sql/mysql/README.md) .\n [  cloud-sql/postgres/ConnectTcp.cs ](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/ConnectTcp.cs) [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/ConnectTcp.cs) \n```\nusing Npgsql;using System;namespace CloudSql{\u00a0 \u00a0 public class PostgreSqlTcp\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 public static NpgsqlConnectionStringBuilder NewPostgreSqlTCPConnectionString()\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Equivalent connection string:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // \"Uid=<DB_USER>;Pwd=<DB_PASS>;Host=<INSTANCE_HOST>;Database=<DB_NAME>;\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var connectionString = new NpgsqlConnectionStringBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // secure - consider a more secure solution such as\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // keep secrets safe.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Host = Environment.GetEnvironmentVariable(\"INSTANCE_HOST\"), \u00a0 \u00a0 // e.g. '127.0.0.1'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set Host to 'cloudsql' when deploying to App Engine Flexible environment\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Username = Environment.GetEnvironmentVariable(\"DB_USER\"), // e.g. 'my-db-user'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Password = Environment.GetEnvironmentVariable(\"DB_PASS\"), // e.g. 'my-db-password'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Database = Environment.GetEnvironmentVariable(\"DB_NAME\"), // e.g. 'my-database'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // The Cloud SQL proxy provides encryption between the proxy and instance.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SslMode = SslMode.Disable,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 connectionString.Pooling = true;\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Specify additional properties here.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return connectionString;\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }}\n```To see this snippet in the context of a web application, view [the README on GitHub](https://github.com/GoogleCloudPlatform/ruby-docs-samples/tree/master/cloud-sql/postgres/activerecord/README.md) .\n [  cloud-sql/postgres/activerecord/config/database_tcp.yml ](https://github.com/GoogleCloudPlatform/ruby-docs-samples/blob/HEAD/cloud-sql/postgres/activerecord/config/database_tcp.yml) [View on GitHub](https://github.com/GoogleCloudPlatform/ruby-docs-samples/blob/HEAD/cloud-sql/postgres/activerecord/config/database_tcp.yml) \n```\ntcp: &tcp\u00a0 adapter: postgresql\u00a0 # Configure additional properties here.\u00a0 # Note: Saving credentials in environment variables is convenient, but not\u00a0 # secure - consider a more secure solution such as\u00a0 # Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 # keep secrets safe.\u00a0 username: <%= ENV[\"DB_USER\"] %> \u00a0# e.g. \"my-database-user\"\u00a0 password: <%= ENV[\"DB_PASS\"] %> # e.g. \"my-database-password\"\u00a0 database: <%= ENV.fetch(\"DB_NAME\") { \"vote_development\" } %>\u00a0 host: <%= ENV.fetch(\"INSTANCE_HOST\") { \"127.0.0.1\" }%> # '172.17.0.1' if deployed to GAE Flex\u00a0 port: <%= ENV.fetch(\"DB_PORT\") { 5432 }%>\n```To see this snippet in the context of a web application, view [the README on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/tree/main/cloud_sql/postgres/pdo/README.md) .\n [  cloud_sql/postgres/pdo/src/DatabaseTcp.php ](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/cloud_sql/postgres/pdo/src/DatabaseTcp.php) [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/cloud_sql/postgres/pdo/src/DatabaseTcp.php) \n```\nnamespace Google\\Cloud\\Samples\\CloudSQL\\Postgres;use PDO;use PDOException;use RuntimeException;use TypeError;class DatabaseTcp{\u00a0 \u00a0 public static function initTcpDatabaseConnection(): PDO\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // secure - consider a more secure solution such as\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // keep secrets safe.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $username = getenv('DB_USER'); // e.g. 'your_db_user'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $password = getenv('DB_PASS'); // e.g. 'your_db_password'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $dbName = getenv('DB_NAME'); // e.g. 'your_db_name'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $instanceHost = getenv('INSTANCE_HOST'); // e.g. '127.0.0.1' ('172.17.0.1' for GAE Flex)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Connect using TCP\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $dsn = sprintf('pgsql:dbname=%s;host=%s', $dbName, $instanceHost);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Connect to the database\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $conn = new PDO(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $dsn,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $username,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $password,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # ...\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 \u00a0 \u00a0 } catch (TypeError $e) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 throw new RuntimeException(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sprintf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'Invalid or missing configuration! Make sure you have set ' .\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '$username, $password, $dbName, and $instanceHost (for TCP mode). ' .\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'The PHP error was %s',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $e->getMessage()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $e->getCode(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $e\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 \u00a0 \u00a0 } catch (PDOException $e) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 throw new RuntimeException(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sprintf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'Could not connect to the Cloud SQL Database. Check that ' .\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'your username and password are correct, that the Cloud SQL ' .\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'proxy is running, and that the database exists and is ready ' .\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'for use. For more assistance, refer to %s. The PDO error was %s',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'https://cloud.google.com/sql/docs/postgres/connect-external-app',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $e->getMessage()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $e->getCode(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 $e\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return $conn;\u00a0 \u00a0 }}\n```\n## Best practices and other information\nYou can use the [Cloud SQL Auth Proxy](/sql/docs/postgres/sql-proxy) when testing your application locally. See the [quickstart for using the Cloud SQL Auth Proxy](/sql/docs/mysql/connect-instance-auth-proxy) for detailed instructions.\nYou can also test using the [Cloud SQL Proxy via a docker container](/sql/docs/postgres/connect-docker) .\n### Connection Pools\n[Managing database connections](/sql/docs/postgres/manage-connections)\n### Connection Limits\n[Cloud SQL Quotas and Limits](/sql/docs/quotas#fixed-limits)\nCloud Run container instances are limited to 100 connections to a Cloud SQL database. Each instance of a Cloud Run service or job can have 100 connections to the database, and as this service or job scales, the total number of connections per deployment can grow.\nYou can limit the maximum number of connections used per instance by using a connection pool. For more detailed examples on how to limit the number of connections, see the [ Managing database connections](/sql/docs/postgres/manage-connections#count) page.\n### API Quota Limits\n[API quota limits](https://console.cloud.google.com/iam-admin/quotas?service=sqladmin.googleapis.com)\n[cap or increase the numberof Cloud Run instances](/run/docs/configuring/max-instances)\n## What's next\n- Learn more about [Cloud Run](/run/docs) .\n- Learn more about [building and deploying](/run/docs/quickstarts/build-and-deploy) container images.\n- See a [complete example in Python for using Cloud Run with PostgreSQL](https://github.com/GoogleCloudPlatform/python-docs-samples/tree/master/cloud-sql/postgres/sqlalchemy) .", "guide": "Cloud SQL"}