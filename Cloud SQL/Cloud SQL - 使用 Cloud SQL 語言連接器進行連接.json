{"title": "Cloud SQL - \u4f7f\u7528 Cloud SQL \u8a9e\u8a00\u9023\u63a5\u5668\u9032\u884c\u9023\u63a5", "url": "https://cloud.google.com/sql/docs/postgres/connect-connectors?hl=zh-cn", "abstract": "# Cloud SQL - \u4f7f\u7528 Cloud SQL \u8a9e\u8a00\u9023\u63a5\u5668\u9032\u884c\u9023\u63a5\nCloud SQL \u9023\u63a5\u5668\u662f\u5728\u9023\u63a5\u5230 Cloud SQL \u5be6\u4f8b\u6642\u63d0\u4f9b\u52a0\u5bc6\u548c\u57fa\u65bc Identity and Access Management (IAM) \u7684\u6388\u6b0a\u7684\u5eab\u3002Cloud SQL \u9023\u63a5\u5668\u7121\u6cd5\u63d0\u4f9b Cloud SQL \u5be6\u4f8b\u7684\u7db2\u7d61\u8def\u5f91\uff08\u5982\u679c\u5c1a\u4e0d\u5b58\u5728\uff09\u3002\n\u9023\u63a5\u5230 Cloud SQL \u5be6\u4f8b\u7684\u5176\u4ed6\u65b9\u6cd5\u5305\u62ec [\u4f7f\u7528\u6578\u64da\u5eab\u5ba2\u6236\u7aef](https://cloud.google.com/sql/docs/postgres/connect-admin-ip?hl=zh-cn) \u6216 [Cloud SQL Auth \u4ee3\u7406](https://cloud.google.com/sql/docs/postgres/sql-proxy?hl=zh-cn) \u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u9023\u63a5\u5230 Cloud SQL \u5be6\u4f8b\uff0c\u8acb\u53c3\u95b1 [\u9023\u63a5\u9078\u9805\u7c21\u4ecb](https://cloud.google.com/sql/docs/postgres/connect-overview?hl=zh-cn) \u9801\u9762\u3002\n\u672c\u9801\u9762\u4ecb\u7d39\u4e86\u4ee5\u4e0b Cloud SQL \u9023\u63a5\u5668\uff1a\n- Cloud SQL Java \u9023\u63a5\u5668\n- Cloud SQL Python \u9023\u63a5\u5668 [\uff08\u5728 Colab \u4e2d\u6253\u958b\uff09](https://colab.research.google.com/github/GoogleCloudPlatform/cloud-sql-python-connector/blob/main/samples/notebooks/postgres_python_connector.ipynb?hl=zh-cn) \n- Cloud SQL Go \u9023\u63a5\u5668\n- Cloud SQL Node.js \u9023\u63a5\u5668", "content": "## \u512a\u52e2\n\u4f7f\u7528 Cloud SQL \u9023\u63a5\u5668\u5177\u6709\u4ee5\u4e0b\u512a\u52e2\uff1a\n- **IAM \u6388\u6b0a** \uff1a\u4f7f\u7528 IAM \u6b0a\u9650\u4f86\u63a7\u5236\u8ab0\u6216\u4ec0\u9ebc\u53ef\u4ee5\u9023\u63a5\u5230\u60a8\u7684 Cloud SQL \u5be6\u4f8b\u3002\n- **\u4fbf\u5229** \uff1a\u7121\u9700\u7ba1\u7406 SSL \u8b49\u66f8\u3001\u914d\u7f6e\u9632\u706b\u7246\u898f\u5247\u6216\u5553\u7528\u5df2\u7372\u6388\u6b0a\u7684\u7db2\u7d61\u3002\n- **IAM \u6578\u64da\u5eab\u8eab\u4efd\u9a57\u8b49** \uff1a\u652f\u6301 [Cloud SQL \u7684\u81ea\u52d5 IAM \u6578\u64da\u5eab\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/sql/docs/postgres/authentication?hl=zh-cn) \u529f\u80fd\u3002\n## \u9808\u77e5\u4e8b\u9805\n- \u5553\u7528 Cloud SQL Admin API\u3002Titles in dynamic includes are not used anywhere, and we should avoid paying to translate them [\u5553\u7528 API](https://console.cloud.google.com/flows/enableapi?apiid=sqladmin&%3Bredirect=https%3A%2F%2Fconsole.cloud.google.com&hl=zh-cn) \n- \u5275\u5efa\u4e00\u500b Cloud SQL \u5be6\u4f8b\uff0c\u5305\u62ec\u914d\u7f6e\u9ed8\u8a8d\u7528\u6236\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u5275\u5efa\u5be6\u4f8b\uff0c\u8acb\u53c3\u95b1 [\u5275\u5efa\u5be6\u4f8b](https://cloud.google.com/sql/docs/postgres/create-instance?hl=zh-cn) \u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u914d\u7f6e\u9ed8\u8a8d\u7528\u6236\uff0c\u8acb\u53c3\u95b1 [\u7232\u9ed8\u8a8d\u7528\u6236\u8cec\u865f\u8a2d\u7f6e\u5bc6\u78bc](https://cloud.google.com/sql/docs/postgres/create-manage-users?hl=zh-cn#user-root) \u3002\n- \u914d\u7f6e\u9023\u63a5\u5230 Cloud SQL \u5be6\u4f8b\u6240\u9700\u7684 [\u89d2\u8272\u548c\u6b0a\u9650](https://cloud.google.com/sql/docs/mysql/roles-and-permissions?hl=zh-cn) \u3002 **\u6ce8\u610f** \uff1a\u5982\u679c\u6388\u6b0a IAM \u4e3b\u8cec\u865f\u6240\u5c6c\u7684\u9805\u76ee\u4e0d\u540c\u65bc\u5305\u542b Cloud SQL \u5be6\u4f8b\u7684\u9805\u76ee\uff0c\u5247\u60a8\u5fc5\u9808\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a- \u5728\u9019\u5169\u500b\u9805\u76ee\u4e2d\u5553\u7528 Cloud SQL Admin API\u3002\n- \u7232\u5305\u542b Cloud SQL \u5be6\u4f8b\u7684\u9805\u76ee\u4e2d\u7684 IAM \u4e3b\u8cec\u865f\u6dfb\u52a0 IAM \u6b0a\u9650\u3002\n## \u8a2d\u7f6e\nCloud SQL Java \u9023\u63a5\u5668\u662f\u5728\u9023\u63a5\u5230 Cloud SQL \u5be6\u4f8b\u6642\u63d0\u4f9b\u57fa\u65bc IAM \u7684\u6388\u6b0a\u548c\u52a0\u5bc6\u7684\u5eab\u3002\u5b83 \u7121\u6cd5\u63d0\u4f9b Cloud SQL \u5be6\u4f8b\u7684\u7db2\u7d61\u8def\u5f91\uff08\u5982\u679c\u5c1a\u4e0d\u5b58\u5728\uff09\u3002\n### \u5b89\u88dd\u5982\u9700\u77ad\u89e3\u6709\u95dc\u69cb\u5efa JDBC \u548c R2DBC \u9a45\u52d5\u7a0b\u5e8f\u4e26\u8207 Cloud SQL Java \u9023\u63a5\u5668\u642d\u914d\u4f7f\u7528\u7684\u8aaa\u660e\uff0c\u8acb\u53c3\u95b1\u4ee5\u4e0b\u93c8\u63a5\uff1a- JDBC\uff1a [\u4f7f\u7528 JDBC \u9023\u63a5\u5230 Cloud SQL](https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory/blob/main/docs/jdbc.md) \u3002\n- R2DBC\uff1a [\u4f7f\u7528 R2DBC \u9023\u63a5\u5230 Cloud SQL](https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory/blob/main/docs/r2dbc.md) \u3002\n\u5982\u9700\u67e5\u770b\u5728\u61c9\u7528\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u6b64\u5eab\u7684\u793a\u4f8b\uff0c\u8acb\u53c3\u95b1\u76f8\u95dc [\u793a\u4f8b\u61c9\u7528](https://cloud.google.com/sql/docs/postgres/manage-connections?hl=zh-cn#java) \u3002\n### \u8eab\u4efd\u9a57\u8b49\u6b64\u5eab\u4f7f\u7528 [\u61c9\u7528\u9ed8\u8a8d\u6191\u64da](https://developers.google.com/identity/protocols/application-default-credentials?hl=zh-cn) \u5c0d Cloud SQL \u670d\u52d9\u5668\u7684\u9023\u63a5\u9032\u884c\u8eab\u4efd\u9a57\u8b49\u3002\n\u5982\u9700\u5728\u672c\u5730\u6fc0\u6d3b\u6191\u64da\uff0c\u8acb\u4f7f\u7528\u4ee5\u4e0b [gcloud](https://cloud.google.com/sdk/gcloud/?hl=zh-cn) \u547d\u4ee4\uff1a\n```\n\u00a0 \u00a0 gcloud auth application-default login\u00a0 \u00a0 \n```\n### \u9023\u63a5 IntelliJ\u5982\u9700 [\u5c07 IntelliJ \u9023\u63a5](https://jetbrains.com/help/idea/connecting-to-a-database.html#mysql) \u5230\u60a8\u7684 Cloud SQL \u5be6\u4f8b\uff0c\u60a8\u9700\u8981\u5c07\u5eab\u4f5c\u7232\u5305\u542b\u4f9d\u8cf4\u9805\u7684 jar \u6dfb\u52a0\u5230\u9a45\u52d5\u7a0b\u5e8f\u8a2d\u7f6e\u9801\u9762\u4e0a\u7684 **\u5176\u4ed6\u6587\u4ef6** \u90e8\u5206\u4e2d\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5728 [Cloud SQL Java \u9023\u63a5\u5668\u7248\u672c](https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory/releases) \u9801\u9762\u4e0a\u627e\u5230\u9810\u69cb\u5efa\u7684 fat jar \u4f86\u5be6\u73fe\u6b64\u76ee\u7684\u3002Cloud SQL Python \u9023\u63a5\u5668\u662f\u4e00\u500b\u5eab\uff0c\u53ef\u8207\u6578\u64da\u5eab\u9a45\u52d5\u7a0b\u5e8f\u7d50\u5408\u4f7f\u7528\uff0c\u4ee5\u5141\u8a31\u5177\u6709\u8db3\u5920\u6b0a\u9650\u7684\u7528\u6236\u9023\u63a5\u5230 Cloud SQL \u6578\u64da\u5eab\uff0c\u800c\u7121\u9700\u624b\u52d5\u5c07 IP \u5217\u5165\u8a31\u53ef\u540d\u55ae\u6216\u7ba1\u7406 SSL \u8b49\u66f8\u3002\n\u5982\u9700\u67e5\u770b\u4f7f\u7528 Cloud SQL Python \u9023\u63a5\u5668\u7684\u4ea4\u4e92\u5f0f\u793a\u4f8b\uff0c\u8acb\u6253\u958b [Cloud SQL Python \u9023\u63a5\u5668\u7b46\u8a18\u672c](https://colab.research.google.com/github/GoogleCloudPlatform/cloud-sql-python-connector/blob/main/samples/notebooks/postgres_python_connector.ipynb?hl=zh-cn) \u3002\n\u76ee\u524d\u652f\u6301\u7684 PostgreSQL \u9a45\u52d5\u7a0b\u5e8f\u662f [pg8000](https://github.com/tlocke/pg8000) \u3002\n### \u5b89\u88dd\u5982\u9700\u5b89\u88dd\u6700\u65b0\u7248\u672c\uff0c\u8acb\u6309\u7167 [\u9019\u4e9b\u8aaa\u660e](https://github.com/GoogleCloudPlatform/cloud-sql-python-connector#how-to-install-this-connector) \u64cd\u4f5c\u3002### \u8eab\u4efd\u9a57\u8b49\u6b64\u5eab\u4f7f\u7528 [\u61c9\u7528\u9ed8\u8a8d\u6191\u64da](https://developers.google.com/identity/protocols/application-default-credentials?hl=zh-cn) \u5c0d Cloud SQL \u670d\u52d9\u5668\u7684\u9023\u63a5\u9032\u884c\u8eab\u4efd\u9a57\u8b49\u3002\n\u5982\u9700\u5728\u672c\u5730\u6fc0\u6d3b\u6191\u64da\uff0c\u8acb\u4f7f\u7528\u4ee5\u4e0b [gcloud](https://cloud.google.com/sdk/gcloud/?hl=zh-cn) \u547d\u4ee4\uff1a\n```\n\u00a0 \u00a0 gcloud auth application-default login\u00a0 \u00a0 \n```Cloud SQL Go \u9023\u63a5\u5668\u662f\u5c08\u7232\u8207 Go \u8a9e\u8a00\u642d\u914d\u4f7f\u7528\u800c\u8a2d\u8a08\u7684 Cloud SQL \u9023\u63a5\u5668\u3002\u7232\u4e86\u63d0\u9ad8\u5b89\u5168\u6027\uff0c\u8a72\u9023\u63a5\u5668\u5728\u5ba2\u6236\u7aef\u9023\u63a5\u5668\u8207\u670d\u52d9\u5668\u7aef\u4ee3\u7406\u4e4b\u9593\u4f7f\u7528\u7d93\u904e\u624b\u52d5\u8eab\u4efd\u9a57\u8b49\u7684\u53ef\u9760 TLS 1.3 \u52a0\u5bc6\uff0c\u800c\u7121\u9700\u8003\u616e\u6578\u64da\u5eab\u5354\u8b70\u3002\n### \u5b89\u88dd\u60a8\u53ef\u4ee5\u4f7f\u7528 `go get` \u5b89\u88dd\u6b64\u5eab\uff1a\n```\n\u00a0 \u00a0 go get cloud.google.com/go/cloudsqlconn\u00a0 \u00a0 \n```Node.js \u9023\u63a5\u5668\u662f\u5c08\u7232\u8207 Node.js \u904b\u884c\u6642\u642d\u914d\u4f7f\u7528\u800c\u8a2d\u8a08\u7684\u5eab\uff0c\u53ef\u8b93\u60a8\u5b89\u5168\u5730\u9023\u63a5\u5230 Cloud SQL \u5be6\u4f8b\u3002\n### \u5b89\u88dd\u60a8\u53ef\u4ee5\u4f7f\u7528 `npm install` \u5b89\u88dd\u6b64\u5eab\uff1a\n```\n\u00a0 \u00a0 npm install @google-cloud/cloud-sql-connector\u00a0 \u00a0 \n```\n## \u4f7f\u7528\u60c5\u6cc1\n\u5982\u9700\u77ad\u89e3 Web \u61c9\u7528\u74b0\u5883\u4e0b\u7684\u6b64\u4ee3\u78bc\u6bb5\uff0c\u8acb\u67e5\u770b [GitHub \u4e0a\u7684 README](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/master/cloud-sql/postgres/servlet/README.md) \u3002\n [  cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectorConnectionPoolFactory.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectorConnectionPoolFactory.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectorConnectionPoolFactory.java) \n```\nimport com.zaxxer.hikari.HikariConfig;import com.zaxxer.hikari.HikariDataSource;import javax.sql.DataSource;public class ConnectorConnectionPoolFactory extends ConnectionPoolFactory {\u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 // secure - consider a more secure solution such as\u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 // keep secrets safe.\u00a0 private static final String INSTANCE_CONNECTION_NAME =\u00a0 \u00a0 \u00a0 System.getenv(\"INSTANCE_CONNECTION_NAME\");\u00a0 private static final String INSTANCE_UNIX_SOCKET = System.getenv(\"INSTANCE_UNIX_SOCKET\");\u00a0 private static final String DB_USER = System.getenv(\"DB_USER\");\u00a0 private static final String DB_PASS = System.getenv(\"DB_PASS\");\u00a0 private static final String DB_NAME = System.getenv(\"DB_NAME\");\u00a0 public static DataSource createConnectionPool() {\u00a0 \u00a0 // The configuration object specifies behaviors for the connection pool.\u00a0 \u00a0 HikariConfig config = new HikariConfig();\u00a0 \u00a0 // The following URL is equivalent to setting the config options below:\u00a0 \u00a0 // jdbc:postgresql:///<DB_NAME>?cloudSqlInstance=<INSTANCE_CONNECTION_NAME>&\u00a0 \u00a0 // socketFactory=com.google.cloud.sql.postgres.SocketFactory&user=<DB_USER>&password=<DB_PASS>\u00a0 \u00a0 // See the link below for more info on building a JDBC URL for the Cloud SQL JDBC Socket Factory\u00a0 \u00a0 // https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory#creating-the-jdbc-url\u00a0 \u00a0 // Configure which instance and what database user to connect with.\u00a0 \u00a0 config.setJdbcUrl(String.format(\"jdbc:postgresql:///%s\", DB_NAME));\u00a0 \u00a0 config.setUsername(DB_USER); // e.g. \"root\", _postgres\"\u00a0 \u00a0 config.setPassword(DB_PASS); // e.g. \"my-password\"\u00a0 \u00a0 config.addDataSourceProperty(\"socketFactory\", \"com.google.cloud.sql.postgres.SocketFactory\");\u00a0 \u00a0 config.addDataSourceProperty(\"cloudSqlInstance\", INSTANCE_CONNECTION_NAME);\u00a0 \u00a0 // The ipTypes argument can be used to specify a comma delimited list of preferred IP types\u00a0 \u00a0 // for connecting to a Cloud SQL instance. The argument ipTypes=PRIVATE will force the\u00a0 \u00a0 // SocketFactory to connect with an instance's associated private IP.\u00a0 \u00a0 config.addDataSourceProperty(\"ipTypes\", \"PUBLIC,PRIVATE\");\u00a0 \u00a0 // ... Specify additional connection properties here.\u00a0 \u00a0 // ...\u00a0 \u00a0 // Initialize the connection pool using the configuration object.\u00a0 \u00a0 return new HikariDataSource(config);\u00a0 }}\n```\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u4f7f\u7528\u8a72\u5eab\uff0c\u8acb\u53c3\u95b1 [\u5982\u4f55\u4f7f\u7528\u6b64\u9023\u63a5\u5668](https://github.com/GoogleCloudPlatform/cloud-sql-python-connector#how-to-use-this-connector) \u3002\u67e5\u770b GitHub \u4e0a\u7684\u793a\u4f8b\u9023\u63a5\u6e2c\u8a66\u4ee3\u78bc\u3002\n [  cloud-sql/postgres/sqlalchemy/connect_connector.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_connector.py) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_connector.py) \n```\nimport osfrom google.cloud.sql.connector import Connector, IPTypesimport pg8000import sqlalchemydef connect_with_connector() -> sqlalchemy.engine.base.Engine:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Initializes a connection pool for a Cloud SQL instance of Postgres.\u00a0 \u00a0 Uses the Cloud SQL Python Connector package.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 # secure - consider a more secure solution such as\u00a0 \u00a0 # Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 # keep secrets safe.\u00a0 \u00a0 instance_connection_name = os.environ[\u00a0 \u00a0 \u00a0 \u00a0 \"INSTANCE_CONNECTION_NAME\"\u00a0 \u00a0 ] \u00a0# e.g. 'project:region:instance'\u00a0 \u00a0 db_user = os.environ[\"DB_USER\"] \u00a0# e.g. 'my-db-user'\u00a0 \u00a0 db_pass = os.environ[\"DB_PASS\"] \u00a0# e.g. 'my-db-password'\u00a0 \u00a0 db_name = os.environ[\"DB_NAME\"] \u00a0# e.g. 'my-database'\u00a0 \u00a0 ip_type = IPTypes.PRIVATE if os.environ.get(\"PRIVATE_IP\") else IPTypes.PUBLIC\u00a0 \u00a0 # initialize Cloud SQL Python Connector object\u00a0 \u00a0 connector = Connector()\u00a0 \u00a0 def getconn() -> pg8000.dbapi.Connection:\u00a0 \u00a0 \u00a0 \u00a0 conn: pg8000.dbapi.Connection = connector.connect(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 instance_connection_name,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"pg8000\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 user=db_user,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 password=db_pass,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 db=db_name,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ip_type=ip_type,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 return conn\u00a0 \u00a0 # The Cloud SQL Python Connector can be used with SQLAlchemy\u00a0 \u00a0 # using the 'creator' argument to 'create_engine'\u00a0 \u00a0 pool = sqlalchemy.create_engine(\u00a0 \u00a0 \u00a0 \u00a0 \"postgresql+pg8000://\",\u00a0 \u00a0 \u00a0 \u00a0 creator=getconn,\u00a0 \u00a0 \u00a0 \u00a0 # ...\u00a0 \u00a0 )\u00a0 \u00a0 return pool\n```\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u4f7f\u7528\u8a72\u5eab\uff0c\u8acb\u53c3\u95b1 [\u7528\u6cd5](https://github.com/GoogleCloudPlatform/cloud-sql-go-connector#usage) \u3002\u67e5\u770b GitHub \u4e0a\u7684\u793a\u4f8b\u9023\u63a5\u6e2c\u8a66\u4ee3\u78bc\u3002\n [  cloudsql/postgres/database-sql/connect_connector.go ](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/connect_connector.go) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/connect_connector.go) \n```\npackage cloudsqlimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"database/sql\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"net\"\u00a0 \u00a0 \u00a0 \u00a0 \"os\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/cloudsqlconn\"\u00a0 \u00a0 \u00a0 \u00a0 \"github.com/jackc/pgx/v5\"\u00a0 \u00a0 \u00a0 \u00a0 \"github.com/jackc/pgx/v5/stdlib\")func connectWithConnector() (*sql.DB, error) {\u00a0 \u00a0 \u00a0 \u00a0 mustGetenv := func(k string) string {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 v := os.Getenv(k)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if v == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"Fatal Error in connect_connector.go: %s environment variable not set.\\n\", k)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return v\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 \u00a0 \u00a0 // secure - consider a more secure solution such as\u00a0 \u00a0 \u00a0 \u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 \u00a0 \u00a0 // keep passwords and other secrets safe.\u00a0 \u00a0 \u00a0 \u00a0 var (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbUser \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = mustGetenv(\"DB_USER\") \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// e.g. 'my-db-user'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbPwd \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= mustGetenv(\"DB_PASS\") \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// e.g. 'my-db-password'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbName \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = mustGetenv(\"DB_NAME\") \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// e.g. 'my-database'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 instanceConnectionName = mustGetenv(\"INSTANCE_CONNECTION_NAME\") // e.g. 'project:region:instance'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 usePrivate \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = os.Getenv(\"PRIVATE_IP\")\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 dsn := fmt.Sprintf(\"user=%s password=%s database=%s\", dbUser, dbPwd, dbName)\u00a0 \u00a0 \u00a0 \u00a0 config, err := pgx.ParseConfig(dsn)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 var opts []cloudsqlconn.Option\u00a0 \u00a0 \u00a0 \u00a0 if usePrivate != \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 opts = append(opts, cloudsqlconn.WithDefaultDialOptions(cloudsqlconn.WithPrivateIP()))\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 d, err := cloudsqlconn.NewDialer(context.Background(), opts...)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Use the Cloud SQL connector to handle connecting to the instance.\u00a0 \u00a0 \u00a0 \u00a0 // This approach does *NOT* require the Cloud SQL proxy.\u00a0 \u00a0 \u00a0 \u00a0 config.DialFunc = func(ctx context.Context, network, instance string) (net.Conn, error) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return d.Dial(ctx, instanceConnectionName)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 dbURI := stdlib.RegisterConnConfig(config)\u00a0 \u00a0 \u00a0 \u00a0 dbPool, err := sql.Open(\"pgx\", dbURI)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"sql.Open: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return dbPool, nil}\n```\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u4f7f\u7528\u8a72\u5eab\uff0c\u8acb\u53c3\u95b1 [ \u7528\u6cd5](https://github.com/GoogleCloudPlatform/cloud-sql-nodejs-connector#usage) \u3002\n [  cloud-sql/postgres/knex/connect-connector.js ](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/connect-connector.js) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/connect-connector.js) \n```\nconst Knex = require('knex');const {Connector} = require('@google-cloud/cloud-sql-connector');// In case the PRIVATE_IP environment variable is defined then we set// the ipType=PRIVATE for the new connector instance, otherwise defaults// to public ip type.const getIpType = () =>\u00a0 process.env.PRIVATE_IP === '1' || process.env.PRIVATE_IP === 'true'\u00a0 \u00a0 ? 'PRIVATE'\u00a0 \u00a0 : 'PUBLIC';// connectWithConnector initializes connection pool for a Cloud SQL instance// of Postgres using the Cloud SQL Node.js Connector.const connectWithConnector = async config => {\u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 // secure - consider a more secure solution such as\u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 // keep secrets safe.\u00a0 const connector = new Connector();\u00a0 const clientOpts = await connector.getOptions({\u00a0 \u00a0 instanceConnectionName: process.env.INSTANCE_CONNECTION_NAME,\u00a0 \u00a0 ipType: getIpType(),\u00a0 });\u00a0 const dbConfig = {\u00a0 \u00a0 client: 'pg',\u00a0 \u00a0 connection: {\u00a0 \u00a0 \u00a0 ...clientOpts,\u00a0 \u00a0 \u00a0 user: process.env.DB_USER, // e.g. 'my-user'\u00a0 \u00a0 \u00a0 password: process.env.DB_PASS, // e.g. 'my-user-password'\u00a0 \u00a0 \u00a0 database: process.env.DB_NAME, // e.g. 'my-database'\u00a0 \u00a0 },\u00a0 \u00a0 // ... Specify additional properties here.\u00a0 \u00a0 ...config,\u00a0 };\u00a0 // Establish a connection to the database.\u00a0 return Knex(dbConfig);};\n```\n## \u554f\u984c\u6392\u67e5\n### \u9a45\u52d5\u7a0b\u5e8f\u7248\u672c\n\u78ba\u4fdd\u4f7f\u7528\u6700\u65b0\u7248\u672c\u7684 Cloud SQL \u9023\u63a5\u5668\u548c\u6578\u64da\u5eab\u9a45\u52d5\u7a0b\u5e8f\uff0c\u4ee5\u907f\u514d\u4e0d\u517c\u5bb9\u3002\u67d0\u4e9b\u8f03\u4f4e\u7248\u672c\u7684\u9a45\u52d5\u7a0b\u5e8f\u4e0d\u53d7\u652f\u6301\u3002\n### \u9023\u63a5\u8def\u5f91\nCloud SQL \u9023\u63a5\u5668\u53ef\u63d0\u4f9b\u9023\u63a5\u6388\u6b0a\uff0c\u4f46\u4e0d\u63d0\u4f9b\u65b0\u7684\u9023\u63a5\u8def\u5f91\u3002\u4f8b\u5982\uff0c\u5982\u9700\u4f7f\u7528\u5c08\u7528 IP \u5730\u5740\u9023\u63a5\u5230 Cloud SQL \u5be6\u4f8b\uff0c\u60a8\u7684\u61c9\u7528\u5fc5\u9808\u5df2\u5177\u6709 VPC \u8a2a\u554f\u6b0a\u9650\u3002\n### \u8abf\u8a66\u9023\u63a5\u554f\u984c\n\u5982\u9700\u7372\u5f97\u9023\u63a5\u554f\u984c\u65b9\u9762\u7684\u66f4\u591a\u5e6b\u52a9\uff0c\u8acb\u53c3\u95b1 [\u554f\u984c\u6392\u67e5](https://cloud.google.com/sql/docs/postgres/troubleshooting?hl=zh-cn#connectivity) \u548c [\u8abf\u8a66\u9023\u63a5\u554f\u984c](https://cloud.google.com/sql/docs/postgres/debugging-connectivity?hl=zh-cn) \u9801\u9762\u3002\n## \u5f8c\u7e8c\u6b65\u9a5f- \u8acb\u53c3\u95b1 [GitHub \u4e0a\u7684 Cloud SQL Java \u9023\u63a5\u5668\u4e3b\u9801](https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory) \u3002\n- \u8acb\u53c3\u95b1 [GitHub \u4e0a\u7684 Cloud SQL Python \u9023\u63a5\u5668\u4e3b\u9801](https://github.com/GoogleCloudPlatform/cloud-sql-python-connector) \u3002\n- \u8a73\u7d30\u77ad\u89e3 [Cloud SQL Auth \u4ee3\u7406](https://cloud.google.com/sql/docs/postgres/sql-proxy?hl=zh-cn) \u3002\n- \u8a73\u7d30\u77ad\u89e3 [IAM](https://cloud.google.com/iam/docs/overview?hl=zh-cn) \u3002\n- \u77ad\u89e3 [\u652f\u6301\u9078\u9805](https://cloud.google.com/sql/docs/support?hl=zh-cn) \u3002", "guide": "Cloud SQL"}