{"title": "Cloud SQL - Configure external replicas", "url": "https://cloud.google.com/sql/docs/postgres/replication/configure-external-replica", "abstract": "# Cloud SQL - Configure external replicas\n[pglogical extension](/sql/docs/postgres/replication/configure-logical-replication)\n`logical decoding`\nFor more information about the external replica configuration, see [About external replication](/sql/docs/postgres/replication#external-read-replicas) .\n", "content": "## Set up the external replica configuration\n### Before you begin\nBefore you start this task, you must have a Cloud SQL instance and an external PostgreSQL instance that meets the [requirements for externalreplicas](/sql/docs/postgres/replication#external-read-replicas) .\n### Configure the primary instance\n- Go to the [Cloud SQL Instances page](https://console.cloud.google.com/sql/instances) in the Google Cloud console.\n- Enable access on the primary instance for the IP address of the external replica.For information about enabling IP access, see [Configuring access for IP connections](/sql/docs/postgres/configure-ip) .\n- Record the public IP address and the public outgoing IP address of the primary instance for later use. You can find these values on the instance's **Overview** page.\n- Click the Cloud Shell iconin the upper right corner.\n- At the Cloud Shell prompt, use the built-in PostgreSQL client to connect to your primary instance:```\n\u00a0 \u00a0gcloud sql connect PRIMARY_INSTANCE_NAME \\--user=postgres\u00a0 \u00a0\u00a0 \u00a0\n```\n- Enter your root password. You should then see the postgres prompt.\n- Create a PostgreSQL user with the`REPLICATION`attribute.```\nCREATE USER REPLICATION_USER WITH REPLICATION IN ROLE cloudsqlsuperuser LOGIN PASSWORD 'REPLICATION_USER_PASSWORD';\u00a0 \u00a0\n```\n- Install and configure the pglogical extension:Edit the Cloud SQL instance to add and set the following flags:- `cloudsql.enable_pglogical`\n- `cloudsql.logical_decoding`\n- `max_replication_slots`\n- `max_worker_processes`\n- `max_wal_senders`\n- For more information about these flags, see the [PostgreSQL resources](/sql/docs/postgres/replication/configure-logical-replication#postgresql-resources) page.\nRestart the database, then login, change to the replication_user,  create the `pglogical` extension:```\nCREATE EXTENSION pglogical;\u00a0 \u00a0\n```\n- Create a pglogical node:A pglogical _node_ represents a physical PostgreSQL instance, and stores connection details for that instance.```\nSELECT pglogical.create_node(\u00a0 node_name := 'provider',\u00a0 dsn := 'host=PRIMARY_PUBLIC_IP_ADDRESS port=5432 dbname=DATABASE_NAME user=REPLICATION_USER password=REPLICATION_USER_PASSWORD'\u00a0 \u00a0);\u00a0 \u00a0\n```\n- If you are starting with a new database, create the same database and tables on both the primary and replica instances. For example:```\nCREATE DATABASE test;\\connect test;CREATE TABLE replica_test (id SERIAL PRIMARY KEY, data text);INSERT INTO replica_test (data) VALUES ('apple'), ('banana'), ('cherry');CREATE EXTENSION pglogical;\n```\n- If you already have a database on the primary instance, you must create the same on the replica. To do this, export the database from the primary instance to a Cloud Storage bucket and import it into the replica. Learn more about [ Exporting data from Cloud SQL to a SQL dump file in Cloud Storage](/sql/docs/postgres/import-export/exporting#cloud-sql) .\n- To support replicating different sets of data to different destinations, pglogical has the concept of a replication set. For example, to add a table to the default replication set:```\nSELECT pglogical.replication_set_add_table('default', 'replica_test', true);\u00a0 \u00a0\n```\n### Configure the external replica\n- Create a special user for replication and grant replication privileges:```\nCREATE USER REPLICATION_USER WITH REPLICATION SUPERUSER LOGIN PASSWORD 'REPLICATION_USER_PASSWORD';\u00a0 \u00a0\n```\n- If you are starting with a new database, use theto create the same database and  tables on both the primary and replica instances. For example:```\nCREATE DATABASE test;\\connect test;CREATE TABLE replica_test (id SERIAL PRIMARY KEY, data text);INSERT INTO replica_test (data) VALUES ('apple'), ('banana'), ('cherry');\u00a0 \n```\n- If you are seeding the external replica instance with a file you exported file from the primary instance, download the exported file from Cloud Storage. If your external replica is on a Compute Engine instance, you can download the file using the`gsutil`command:```\ngsutil cp gs://BUCKET_NAME/DUMP_FILE_NAME .\u00a0 \u00a0 \n```\n- Import the file into your database.```\npsql --user=postgres --password < DUMP_FILE_NAME.\n```\n- Install`pglogical`according to your OS. For  example, on Debian systems running PostgreSQL version 13,`sudo apt-get install postgresql-13-pglogical`.\n- Login to the database as the replication_user and set the  following parameters:```\nALTER SYSTEM SET shared_preload_libraries = 'pglogical';ALTER SYSTEM SET max_replication_slots = #; (where # is the same as you set on the primary).ALTER SYSTEM SET max_worker_processes = #; (where # is the same as you set on the primary).# Logout of the database and restart it. For example,# sudo /etc/init.d/postgresql restart# Log back in the database as the replication_user.# Since the pglogical extension is created local to each database, you need to# execute CREATE EXTENSION pglogical in each database you create, so if you# haven't already done that:CREATE EXTENSION pglogical;\u00a0 \u00a0For more information about these flags, see the PostgreSQL resources page.\u00a0 \n```\n- Create a pglogical node:```\nSELECT pglogical.create_node(\u00a0 node_name := 'subscriber',\u00a0 dsn := 'host=REPLICA_PUBLIC_IP_ADDRESS port=5432 dbname=DATABASE_NAME user=REPLICATION_USER password=REPLICATION_USER_PASSWORD'\u00a0 );\u00a0 \n```\n- Create a pglogical subscription:```\nSELECT pglogical.create_subscription(\u00a0 \u00a0 subscription_name := 'SUBSCRIPTION_NAME',\u00a0 \u00a0 provider_dsn := 'host=PRIMARY_PUBLIC_IP_ADDRESS port=5432 dbname=DATABASE_NAME user=REPLICATION_USER password=REPLICATION_USER_PASSWORD');\u00a0 \n```\n- Check the status of the subscription:```\nSELECT * FROM pglogical.show_subscription_status('SUBSCRIPTION_NAME');\u00a0 \u00a0\n```\n- If the status appears as`replicating`, then the setup is  successful.\n- Insert some data into the primary and check the replica to make sure  the data appears there as well.## Troubleshoot\n[Troubleshooting pglogical](/sql/docs/postgres/replication/configure-logical-replication#troubleshooting-pglogical)\n## What's next\n- Learn how to [manage replicas](/sql/docs/postgres/replication/manage-replicas) .\n- Learn about [requirements and best practices for the external replica configuration](/sql/docs/postgres/replication#external-read-replicas) .\n- Learn more about [PostgreSQL replication](https://www.postgresql.org/docs/current/static/logical-replication.html) .\n- Learn more about [replication options](https://dev.mysql.com/doc/refman/5.7/en/replication-options.html) .\n- Learn more about [checking replication status](https://dev.mysql.com/doc/refman/5.7/en/replication-administration-status.html) .\n- Learn more about [replicating from an external server](/sql/docs/postgres/replication/replication-from-external) .", "guide": "Cloud SQL"}