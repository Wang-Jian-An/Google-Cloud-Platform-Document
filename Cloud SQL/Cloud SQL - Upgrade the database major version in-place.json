{"title": "Cloud SQL - Upgrade the database major version in-place", "url": "https://cloud.google.com/sql/docs/postgres/upgrade-major-db-version-inplace", "abstract": "# Cloud SQL - Upgrade the database major version in-place\nThis page describes how to upgrade the database major version by upgrading your Cloud SQL instance in-place rather than [by migrating data](/sql/docs/postgres/upgrade-major-db-version-migrate) .\n", "content": "## Introduction\nDatabase software providers periodically release new major versions that contain new features, performance improvements, and security enhancements. Cloud SQL takes in [new versions](/sql/docs/postgres/db-versions) after they're released. After Cloud SQL offers support for a new major version, you can upgrade your instances to keep your database updated.\nYou can upgrade the database version of an instance in-place or by [migratingdata](/sql/docs/postgres/upgrade-major-db-version-migrate) . In-place upgrades are a simpler way to upgrade your instance's major version. You don't need to migrate data or change application connection strings. With in-place upgrades, you can retain the name, IP address, and other settings of your current instance after the upgrade. In-place upgrades don't require you to move data files and can be completed faster. In some cases, the downtime is shorter than what migrating your data entails.\n[pg_upgrade](https://www.postgresql.org/docs/14/static/pgupgrade.html)\n## Plan a major version upgrade\n- Choose a target major version.See the [list of versions that Cloud SQL supports](/sql/docs/postgres/db-versions) .\n- Consider the features offered in each database major version and address incompatibilities.- [PostgreSQL 15](https://www.postgresql.org/docs/15/release-15.html) \n- [PostgreSQL 14](https://www.postgresql.org/docs/14/static/release-14.html) \n- [PostgreSQL 13](https://www.postgresql.org/docs/13/static/release-13.html) \n- [PostgreSQL 12](https://www.postgresql.org/docs/12/static/release-12.html) \n- [PostgreSQL 11](https://www.postgresql.org/docs/11/static/release-11.html) \n- [PostgreSQL 10](https://www.postgresql.org/docs/10/static/release-10.html) \nNew major versions introduce incompatible changes that might require you to modify the application code, the schema, or the database settings. Before you can upgrade your database instance, review the release notes of your target major version to determine the incompatibilities that you must address. **Note:** When upgrading Cloud SQL for PostgreSQL from version 10, you must skip version 11.\n- Test the upgrade with a dry run.Perform a dry run of the end-to-end upgrade process in a test environment before you upgrade the production database. You can [clone your instance](/sql/docs/postgres/clone-instance) to create an identical copy of the data on which to test the upgrade process.In addition to validating that the upgrade completes successfully, run tests to ensure that the application behaves as expected on the upgraded database. **Note:** Ensure that you have enough disk space before running a major version upgrade. If you haven't enabled [automatic storage increases](/sql/docs/postgres/instance-settings#automatic-storage-increase-2ndgen) , take note of the disk storage used by the upgraded dry run instance. This helps you determine whether you need to increase the storage capacity for the production instance before upgrading.\n- Decide on a time to upgrade.Upgrading requires the instance to become unavailable for a period of time. Plan to upgrade during a time period when database activity is low.## Prepare for a major version upgrade\nBefore you upgrade, complete the following steps.\n- Check the `LC_COLLATE` value for the `template` and `postgres` databases. The  character set for each database must be `en_US.UTF8` .If the `LC_COLLATE` value for the `template` and `postgres` databases isn't `en_US.UTF8` , then the major version upgrade fails. To fix this, if either database  has a character set other than `en_US.UTF8` , then change the `LC_COLLATE` value to `en_US.UTF8` before you perform the upgrade.To change the encoding of a database:- Dump your database.\n- Drop your database.\n- Create a new database with the different encoding (for this example,`en_US.UTF8`).\n- Reload your data.\n- Manage your read replicas.Cloud SQL for PostgreSQL does not support cross-version replication, which means that you cannot upgrade the primary instance while the instance is replicating to the read replicas. Before upgrading, either disable replication for each read replica or delete the read replicas.\n- If Cloud SQL is the logical replication source, disable`pglogical`extension replication as follows. You can enable it again after  the upgrade. If Cloud SQL is the logical replication target,  these steps are not required.- Disable the subscription and disconnect the replica from the provider by using the following command:```\nSELECT * FROM pglogical.alter_subscription_disable(subscription_name name, immediate bool);\n```Replace `name` with the name of the existing subscription.Set the value of the `immediate` parameter to `true` if  the subscription needs to be disabled immediately. By default, the value  is `false` and the subscription is disabled only after the  current transaction ends.For example:```\npostgres=> SELECT * FROM pglogical.alter_subscription_disable('test_sub', true);\u00a0alter_subscription_disable----------------------------\u00a0t(1 row)\n```\n- Drop the replication slot by connecting to the publisher or the  Cloud SQL primary instance and running the following command:```\nSELECT pg_drop_replication_slot(slot_name) FROM pg_replication_slots\u00a0 WHERE slot_name IN (SELECT slot_name FROM pg_replication_slots);\n```For example:```\npostgres=> SELECT pg_drop_replication_slot(slot_name) FROM pg_replication_slotspostgres-> \u00a0 \u00a0WHERE slot_name IN (SELECT slot_name FROM pg_replication_slots);-[ RECORD 1 ]------------+-pg_drop_replication_slot |postgres=>\n```\n- Manage your remaining [PostgreSQL extensions](/sql/docs/postgres/extensions) .Most extensions work on the upgraded database major version. Drop any  extensions that are no longer supported in your target version. For  example, drop the `chkpass` extension if you're upgrading to  PostgreSQL 11 or later versions.You can manually upgrade [PostGIS](/sql/docs/postgres/extensions#postgis) and its related extensions to their latest supported versions.  If your PostGIS version is older than 3.1, use the following  command to upgrade  the PostGIS extension:```\n\u00a0 \u00a0 ALTER EXTENSION postgis UPDATE TO '3.1.7';\n``` **Note:** Don't use the following command for  upgrading PostGIS versions that are older than 3.1. This command  upgrades PostGIS to version 3.2.3, which Cloud SQL doesn't support.```\n\u00a0 \u00a0 SELECT postgis_extensions_upgrade();\n```Sometimes, upgrading from PostGIS versions 2.x can create a situation where there are leftover database objects that aren't associated with the PostGIS extension. This can block the upgrade operation. For information about resolving this issue, see [Fixing a broken postgis raster install](https://postgis.net/documentation/tips/tip-removing-raster-from-2-3/) .To learn more about upgrading your PostGIS extensions, see [Upgrading PostGIS](https://postgis.net/workshops/postgis-intro/upgrades.html#upgrading-postgis) .  For issues associated  with upgrading PostGIS, see [Check the version of your PostgreSQL instance](#check-postgresql-instance-version) . **Note:** If you've enabled the [PostGIS](https://postgis.net/) extension, then you can't upgrade to PostgreSQL 15. Remove the extension, perform the upgrade, and then reinstall the extension.\n- Manage your custom database flags. Check the names of any custom database  flags that you configured for your PostgreSQL instance. For issues associated  with these flags, see [Check the custom flags for your PostgreSQL instance](#check-postgresql-custom-flags) .\n- When performing an upgrade from one major version to another, attempt to connect to each database to see if there are any compatibility issues. Ensure that your databases can connect to each other. Check the`datallowconn`field for each database to ensure that a connection is allowed. A`t`value means that it's allowed, and an`f`value indicates that a connection can't be established.\n- If you use the [Datadog](https://www.datadoghq.com/) installation to upgrade your Cloud SQL instance to PostgreSQL 10 or later versions, then before you perform the upgrade, drop the [pg_stat_activity()](https://www.postgresql.org/docs/current/monitoring-stats.html#MONITORING-PG-STAT-ACTIVITY-VIEW) function.## Known limitations\nThe following limitations affect in-place major version upgrades for Cloud SQL for PostgreSQL:\n- Upgrading instances that have more than 1,000 databases from one version to another might take a long time and time out.\n- Use the`select * from pg_largeobject_metadata;`statement to query for the number of large objects in each PostgreSQL database of your Cloud SQL instance. If the result from all of your databases is more than 10 million large objects, then the upgrade fails. Cloud SQL rolls back to the previous version of your database.## Upgrade the database major version in-place\nWhen you initiate an upgrade operation, Cloud SQL first checks the configuration of your instance to ensure that it's compatible for an upgrade. After verifying your configuration, Cloud SQL makes your instance unavailable, makes a pre-upgrade backup, performs the upgrade, makes your instance available, and makes a post-upgrade backup.\n**Note:** To upgrade replicas or instances that have replicas, you must use `gcloud` , the API, or Terraform.\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- To open the **Overview** page of an instance, click the instance name.\n- Click **Edit** .\n- In the **Instance info** section, click the **Upgrade** button and  confirm that you want to go to the upgrade page.\n- On the **Choose a database version** page, click the **Database version for\n upgrade** list and select one of the available database major versions.\n- Click **Continue** .\n- In the **Instance ID** box, enter the name of the instance and then click the **Start upgrade** button.The operation takes several minutes to complete.\nVerify that the upgraded database major version appears below the instance name on the instance **Overview** page.\n- Start the upgrade.Use the [gcloud sql instances patch](/sdk/gcloud/reference/sql/instances/patch) command with the `--database-version` flag.Before running the command, replace the following:- : The name of the instance.\n- : The enum for the database major version,  which must be greater than the current version. See the available [database version enums](/sql/docs/postgres/admin-api/rest/v1/SqlDatabaseVersion) .\n```\ngcloud sql instances patch INSTANCE_NAME \\--database-version=DATABASE_VERSION\n```Major version upgrades take several minutes to complete. You might see a message indicating that the operation is taking longer than expected. You can either ignore this message or run the [gcloud sql operations wait](/sdk/gcloud/reference/sql/operations/wait) command to dismiss the message.\n- Get the upgrade operation name.Use the [gcloud sql operations list](/sdk/gcloud/reference/sql/operations/list) command with the `--instance` flag.Before running the command, replace the variable with the name of the instance.```\ngcloud sql operations list --instance=INSTANCE_NAME\n```\n- Monitor the status of the upgrade.Use the [gcloud sql operations describe](/sdk/gcloud/reference/sql/operations/describe) command.Before running the command, replace the variable with the upgrade operation name retrieved in the previous step.```\ngcloud sql operations describe OPERATION\n```\n- Start the in-place upgrade.Use a PATCH request with the [instances:patch](/sql/docs/postgres/admin-api/rest/v1/instances/patch) method.Before using any of the request data, replace these variables:- : The ID of the project.\n- : The name of the instance.\nHTTP method and URL:```\nPOST https://sqladmin.googleapis.com/sql/v1/projects/project-id/instances/instance_name\n```Request JSON body:```\n{\u00a0 \"databaseVersion\": enum DATABASE_VERSION}\n```Replace with the enum for the database major version,  which must be greater than the current version. See the available [database version enums](/sql/docs/postgres/admin-api/rest/v1/SqlDatabaseVersion) .Send your request using curl or PowerShell. See [Edit instances](/sql/docs/sqlserver/edit-instance#rest-v1) .\n- Get the upgrade operation name.Use a GET request with the [operations.list](/sql/docs/postgres/admin-api/rest/v1/operations/list) method after replacing with the ID of the project.HTTP method and URL:```\nGET https://sqladmin.googleapis.com/sql/v1/projects/project-id/operations\n```\n- Monitor the status of the upgrade.Use a GET request with the [operations.get](/sql/docs/postgres/admin-api/rest/v1/operations/get) method after replacing the following variables:- : The ID of the project.\n- : The upgrade operation name retrieved in the  previous step.\nHTTP method and URL:```\nGET https://sqladmin.googleapis.com/sql/v1/projects/project-id/operation/operation_name\n```\nTo update the version of the database, use a [Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance) and the Terraform provider for Google Cloud, version [4.34.0 or later](https://github.com/hashicorp/terraform-provider-google/releases) .\n [  cloud_sql/postgres_database_instance/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_database_instance/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_database_instance/main.tf) \n```\nresource \"google_sql_database_instance\" \"instance\" {\n name    = \"postgres-instance\"\n region   = \"us-central1\"\n database_version = \"POSTGRES_14\"\n settings {\n tier = \"db-custom-2-7680\"\n }\n # set `deletion_protection` to true, will ensure that one cannot accidentally delete this instance by\n # use of Terraform whereas `deletion_protection_enabled` flag protects this instance at the GCP level.\n deletion_protection = false\n}\n```To apply your Terraform configuration in a Google Cloud project, complete the steps in the following sections.## Prepare Cloud Shell\n- Launch [Cloud Shell](https://shell.cloud.google.com/) .\n- Set the default Google Cloud project  where you want to apply your Terraform configurations.You only need to run this command once per project, and you can run it in any directory.```\nexport GOOGLE_CLOUD_PROJECT=PROJECT_ID\n```Environment variables are overridden if you set explicit values in the Terraform  configuration file.\n## Prepare the directoryEach Terraform configuration file must have its own directory (also called a ).- In [Cloud Shell](https://shell.cloud.google.com/) , create a directory and a new  file within that directory. The filename must have the`.tf`extension\u2014for example`main.tf`. In this  tutorial, the file is referred to as`main.tf`.```\nmkdir DIRECTORY && cd DIRECTORY && touch main.tf\n```\n- If you are following a tutorial, you can copy the sample code in each section or step.Copy the sample code into the newly created `main.tf` .Optionally, copy the code from GitHub. This is recommended  when the Terraform snippet is part of an end-to-end solution.\n- Review and modify the sample parameters to apply to your environment.\n- Save your changes.\n- Initialize Terraform. You only need to do this once per directory.```\nterraform init\n```Optionally, to use the latest Google provider version, include the `-upgrade` option:```\nterraform init -upgrade\n```\n## Apply the changes\n- Review the configuration and verify that the resources that Terraform is going to create or  update match your expectations:```\nterraform plan\n```Make corrections to the configuration as necessary.\n- Apply the Terraform configuration by running the following command and entering`yes`at the prompt:```\nterraform apply\n```Wait until Terraform displays the \"Apply complete!\" message.\n- [Open your Google Cloud project](https://console.cloud.google.com/) to view  the results. In the Google Cloud console, navigate to your resources in the UI to make sure  that Terraform has created or updated them.\n **Note:** Terraform samples typically assume that the required APIs are enabled in your Google Cloud project.To delete your changes, do the following:- To disable deletion protection, in your Terraform configuration file set the`deletion_protection`argument to`false`.```\ndeletion_protection = \"false\"\n```\n- Apply the updated Terraform configuration by running the following command and    entering`yes`at the prompt:```\nterraform apply\n```\n- Remove resources previously applied with your Terraform configuration by running the following command and entering `yes` at the prompt:```\nterraform destroy\n```\nWhen you place an in-place upgrade request, Cloud SQL first performs a pre-upgrade check. If Cloud SQL determines that your instance isn't ready for an upgrade, your upgrade request fails with a message suggesting how you can address the issue. See also [Troubleshoot a major versionupgrade](#troubleshoot) .\n**Note:** Cloud SQL automatically provisions your instance on the default minor version.\n### Automatic upgrade backups\nWhen you perform a major version upgrade, Cloud SQL automatically makes two on-demand backups, called upgrade backups:\n- The first upgrade backup is the, which is made immediately before starting the upgrade. You can use this backup to restore your database instance to its state on the previous version.\n- The second upgrade backup is the, which is made immediately after new writes are allowed to the upgraded database instance.\nWhen you [view your list ofbackups](/sql/docs/postgres/backup-recovery/backing-up#viewbackups) , the upgrade backups are listed with type `On-demand` . Upgrade backups are labeled so that you can identify them easily. For example, if you're upgrading from PostgreSQL 9.6 to PostgreSQL 13, your pre-upgrade backup is labeled `Pre-upgrade backup, POSTGRES_9_6 to POSTGRES_13.` and your post-upgrade backup `Post-upgrade backup, POSTGRES_13 from POSTGRES_9_6.`\nAs with other on-demand backups, upgrade backups persist until you delete them or delete the instance. If you have PITR enabled, you can't delete your upgrade backups while they're in your retention window. If you need to delete your upgrade backups, you must disable PITR or wait until your upgrade backups are no longer in your retention window.\n## Complete the major version upgrade\nOnce you've finished upgrading your primary instance, perform the following steps to complete your upgrade:\n- Enable`pglogical`replication if your instance used it before  the upgrade. Doing this automatically creates the necessary replication slot.- Drop the`pglogical`subscription on the destination replica  by using the following command:```\nselect pglogical.drop_subscription(subscription_name name);\n```Replace `name` with the name of the existing subscription.For example:```\npostgres=> select pglogical.drop_subscription(subscription_name := 'test_sub');-[ RECORD 1 ]-----+--drop_subscription | 1\n```\n- Recreate the pglogical subscription on the destination (replica) by  providing connection details as follows to the Cloud SQL primary instance:```\nSELECT pglogical.create_subscription(\u00a0 \u00a0 subscription_name := 'test_sub',\u00a0 \u00a0 provider_dsn := 'host=primary-ip port=5432 dbname=postgres user=replication_user password=replicapassword'); \n```For example:```\npostgres=> SELECT pglogical.create_subscription(postgres(> \u00a0 \u00a0 subscription_name := 'test_sub',postgres(> \u00a0 \u00a0 provider_dsn := 'host=10.58.64.90 port=5432 dbname=postgres user=postgres password=postgres'postgres(> );-[ RECORD 1 ]-------+-----------create_subscription | 2769129391\n```\n- Check the status of the subscription by using the following command:```\nSELECT * FROM pglogical.show_subscription_status('test_sub');\n```\n- Test the replication by performing write transactions and verifying that  the changes are visible on the destination.\n- Upgrade the read replicas.If you stopped replication to read replicas, upgrade them one by one.  You can use any of the methods used to upgrade the primary instance.  When you upgrade a replica, Cloud SQL recreates it preserving the  IP addresses, refreshes it with the latest data from the primary, and  restarts the replica.Note: You cannot upgrade your read replicas until after  you've upgraded your primary instance.If you deleted your read replicas prior to upgrading your primary, you can create new read replicas, which are automatically provisioned on the upgraded database version.\n- Refresh the database statistics.Run `ANALYZE` on your primary instance to update the system statistics after the upgrade. Accurate statistics ensure that the PostgreSQL query planner processes queries optimally. Missing statistics can lead to bad query plans, which in turn might degrade performance and take up excessive memory.\n- Perform acceptance tests.You should run tests to ensure that the upgraded system performs as expected.## Troubleshoot a major version upgrade\nCloud SQL returns an error message if you attempt an invalid upgrade command, for example, if your instance contains invalid database flags for the new version.\nIf your upgrade request fails, check the syntax of your upgrade request. If the request has a valid structure, try looking into the following suggestions.\n### View pre-upgrade check failures\nPre-upgrade check failures are issues or errors that Cloud SQL detects during the pre-upgrade verification or validation process. These failures occur before the actual upgrade process begins and are meant to identify potential problems or incompatibilities that can affect the success of the upgrade.\nPre-upgrade check failures are displayed for the following categories:\n- Incompatible extensions: detect PostgreSQL extensions that aren't compatible with the destination version of the instance.\n- Unsupported dependencies: identify dependencies that aren't supported anymore or need to be updated.\n- Data format incompatibilities: verify data inconsistencies that arise from various factors, including differences in version-specific data structures, alterations in encoding and collation, modifications to data types, and adjustments to the system catalog.\nThe following table lists pre-upgrade check failures and their error messages:\n| Pre-upgrade check failure                        | Error message                                                           |\n|:-----------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Cloud SQL detects an unknown data type.                    | Please remove the following usages of 'Unknown' data types before attempting an upgrade: (database: db_name, relation: rel_name, attribute: attr_name)                        |\n| When upgrading to PostgreSQL 12 or later versions, Cloud SQL detects the 'sql_identifier' data type.     | Please remove the following usages of 'sql_identifier' data types before attempting an upgrade: (database: db_name, relation: rel_name, attribute: attr_name)                       |\n| Cloud SQL detects the reg* data type.                     | Please remove the following usages of 'reg*' data types before attempting an upgrade: (database: db_name, relation: rel_name, attribute: attr_name)                         |\n| Cloud SQL detects that the LC_COLLATE value for the postgres database is a character set that's other than en_US.UTF8. | Please change the 'LC_COLLATE' value of the postgres database to 'en_US.UTF8' before attempting an upgrade                                   |\n| Cloud SQL detects tables that have object identifiers (OIDs).               | Please remove the following usages of tables with OIDs before attempting an upgrade: (database: db_name, relation: rel_name)                               |\n| Cloud SQL detects composite data types.                    | Please remove the following usages of 'composite' data types before attempting an upgrade: (database: db_name, relation: rel_name, attribute: attr_name)                        |\n| Cloud SQL detects user-defined postfix operators.                  | Please remove the following usages of 'composite' data types before attempting an upgrade: (database: db_name, operation id: op_id, operation namespace: op_namespace, operation name: op_name, type namespace: type_namespace, type name: type_name) |\n| Cloud SQL detects incompatible polymorphic functions.                 | Please remove the following usages of 'incompatible polymorphic' functions before attempting an upgrade: (database: db_name, object kind: obj_kind, object name: obj_name)                   |\n| Cloud SQL detects user-defined encoding conversions.                 | Please remove the following usages of user-defined encoding conversions before attempting an upgrade: (database: db_name, namespace name: namespace_name, encoding conversions name: encod_name)              |\n### View upgrade logs\nIf any issues occur with a valid upgrade request, Cloud SQL publishes error logs to `projects/` `` `/logs/cloudsql.googleapis.com%2Fpostgres-upgrade.log` . Each log entry contains a label with the instance identifier to help you identify the instance with the upgrade error. Look for such upgrade errors and resolve them.\nTo view error logs, follow these steps:\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- To open the **Overview** page of an instance, click the instance name.\n- In the **Operations and logs** pane of the instance **Overview** page, click the **View PostgreSQL error logs** link.The [Logs Explorer](/logging/docs/view/logs-viewer-interface) page opens.\n- View logs as follows:- To list all error logs in a project, select the log name in the **Log\nname** log filter.\nFor more information on query filters, see [Advanced queries](/logging/docs/view/advanced-queries) .- To filter the upgrade error logs for a single instance, enter the following query in the **Search all fields** box, after replacing``\nwith the project ID followed by the instance name in this format: `project_id:instance_name` .```\nresource.type=\"cloudsql_database\"resource.labels.database_id=\"DATABASE_ID\"logName : \"projects/PROJECT_ID/logs/cloudsql.googleapis.com%2Fpostgres-upgrade.log\"\n```For example, to filter the upgrade error logs by an instance named `shopping-db` running in the project `buylots` , use the following query filter:```\n\u00a0resource.type=\"cloudsql_database\"\u00a0resource.labels.database_id=\"buylots:shopping-db\"\u00a0logName : \"projects/buylots/logs/cloudsql.googleapis.com%2Fpostgres-upgrade.log\"\u00a0```\n```\nLog entries with the `pg_upgrade_dump` prefix indicate that an upgrade error had occurred. For example:\n```\npg_upgrade_dump: error: query failed: ERROR: out of shared memoryHINT: You might need to increase max_locks_per_transaction.\n```\nAdditionally, log entries labeled with a `.txt` secondary filename might list other errors that you might want to resolve before attempting the upgrade again.\nAll filenames are found in the `postgres-upgrade.log` file. To locate a file name, look at the `labels.FILE_NAME` field.\nFilenames that might contain errors to resolve include:\n- `tables_with_oids.txt:`This file contains tables that are  listed with object identifiers (OIDs). Either delete the tables or modify  them so that they don't use OIDs.\n- `tables_using_composite.txt:`This file contains tables that  are listed using system-defined composite types. Either delete the tables  or modify them so that they don't use these composite types.\n- `tables_using_unknown.txt:`This file contains tables that are  listed using the`UNKNOWN`data type. Either delete the tables or  modify them so that they don't use this data type.\n- `tables_using_sql_identifier.txt:`This file contains tables that  are listed using the`SQL_IDENTIFIER`data type. Either delete the  tables or modify them so that they don't use this data type.\n- `tables_using_reg.txt:`This file contains tables that are listed  using the`REG*`data type (for example,`REGCOLLATION`or`REGNAMESPACE`). Either delete the tables or modify them so  that they don't use this data type.\n- `postfix_ops.txt:`This file contains tables that are listed  using postfix (right-unary) operators. Either delete the tables or modify  them so that they don't use these operators.\n### Check the memory\nIf the instance has insufficient shared memory, you might see this error message: `ERROR: out of shared memory.` This error is more likely to occur if you have in excess of 10,000 tables.\nBefore you attempt an upgrade, set the value of the [max_locks_per_transaction](https://www.postgresql.org/docs/current/static/runtime-config-locks.html#GUC-MAX-LOCKS-PER-TRANSACTION) flag to approximately twice the number of tables in the instance. The instance is restarted when you change the value of this flag.\n### Check the connections capacity\nIf your instance has insufficient connection capacity, you might see this error message: `ERROR: Insufficient connections.`\nCloud SQL recommends that you increase the [max_connections](https://www.postgresql.org/docs/current/static/runtime-config-connection.html#GUC-MAX-CONNECTIONS) flag value by the number of databases in your instance. The instance is restarted when you change the value of this flag.\n### Check the version of your PostgreSQL instance\nIf you're using version 9.6, 10, or 11 of a Cloud SQL for PostgreSQL instance, and you enabled the PostGIS extension for the instance, then upgrading PostGIS might fail because of a permission issue. To resolve this issue, use [self-service maintenance](/sql/docs/postgres/self-service-maintenance) to roll out the latest systems manager (SSM) image. This gives you the permission to upgrade PostGIS.\n### Check the custom flags for your PostgreSQL instance\nIf you're upgrading to a PostgreSQL instance, version 14 or higher, then check the names of any custom [database flagsthat you configured](/sql/docs/postgres/flags) for the instance. This is because PostgreSQL [placedadditional restrictions on allowed names for custom parameters](https://github.com/postgres/postgres/blob/master/src/backend/utils/misc/guc.c) .\nThe first character of a custom database flag must be alphabetic (A-Z or a-z). All subsequent characters can be alphanumeric, the underscore (_) special character, or the dollar sign ($) special character.\n### Remove extensions\nIf you're upgrading your Cloud SQL instance from version 10 to version 14, then you might see this error message: `pg_restore: error: could not execute query: ERROR: role \"16447\" does not exist` .\nTo resolve this issue, follow these steps:\n- Remove the [pg_stat_statements](https://www.postgresql.org/docs/current/pgstatstatements.html) and [pgstattuple](https://www.postgresql.org/docs/current/pgstattuple.html) extensions.\n- Perform the upgrade.\n- Reinstall the extensions.## Restore to the previous major version\nIf your upgraded database system doesn't perform as expected, you might need to restore your instance to the previous version. You do so by restoring your pre-upgrade backup to a Cloud SQL recovery instance, which is a new instance running the pre-upgrade version.\nTo restore to the previous version, perform the following steps:\n- Identify your pre-upgrade backup.See [Automatic upgrade backups](#upgrade-backups) .\n- Create a recovery instance. [Create a new Cloud SQLinstance](/sql/docs/postgres/create-instance) using the major version that Cloud SQL was running when the pre-upgrade backup was made. Set the same [flags](/sql/docs/postgres/flags) and [instancesettings](/sql/docs/postgres/instance-settings) that the original instance uses.\n- Restore your pre-upgrade backup. [Restore](/sql/docs/postgres/backup-recovery/restoring#restorebackups-another-instance) your pre-upgrade backup to the recovery instance. This might take several minutes to complete.\n- Add your read replicas.If you were using read replicas, add them individually.\n- Connect your application.Having recovered your database system, update your application with details about the recovery instance and its read replicas. You can resume serving traffic on the pre-upgrade version of your database.## FAQs\nThe following questions might come up when upgrading the database major version.\n## What's next\n- Learn about [options for connecting to an instance](/sql/docs/postgres/external-connection-methods) .\n- Learn about [importing and exporting data](/sql/docs/postgres/import-export) .\n- Learn more about [setting database flags](/sql/docs/postgres/flags) .", "guide": "Cloud SQL"}