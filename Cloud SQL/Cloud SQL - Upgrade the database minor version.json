{"title": "Cloud SQL - Upgrade the database minor version", "url": "https://cloud.google.com/sql/docs/mysql/upgrade-minor-db-version", "abstract": "# Cloud SQL - Upgrade the database minor version\nThis page describes how to set the database minor version of an instance. For supported versions, see [Database versions and version policies](/sql/docs/mysql/db-versions) .\n**Note:** To upgrade the major database version, see [Upgrade the MySQL major version for an instance](/sql/docs/mysql/upgrade-major-db-version-migrate) .\nWith each new minor version, database providers release new features, security patches, bug fixes, and performance improvements. Additionally, Cloud SQL regularly updates your minor version during maintenance.\nHowever, MySQL 8.0 doesn't support downgrading. As such, minor version upgrades aren't automatically included with [routine maintenance](/sql/docs/mysql/maintenance) . You can specify the minor version for Cloud SQL for MySQL 8.0 while creating an instance or later through an upgrade process, both of which are described on this page.\nBefore upgrading to a new MySQL 8.0 minor version, familiarize yourself with the changes. See [MySQL 8.0 Release Notes](https://dev.mysql.com/doc/relnotes/mysql/8.0/en/) . If you use Cloud SQL for MySQL 5.6 or 5.7, Cloud SQL automatically manages your instance's minor version. When you provision a new instance, Cloud SQL automatically configures your instance with the latest database version available. During routine maintenance, Cloud SQL automatically upgrades your instance to the latest supported version.\nTo upgrade the database minor version of your MySQL 8.0 instance, you need to update your instance with your preferred minor version, which must be greater than the currently installed minor version. You cannot revert to an unspecified minor version after an instance has been provisioned.\n#", "content": "## Before you upgrade\nMySQL 8.0 doesn't allow downgrades. So, before you upgrade your primary instance, follow these steps to ensure that your data is safe.\n- **Test your upgrade in a staging environment.** - Create a clone of your production instance to serve as a staging instance. This creates a new database instance, with the same major and minor versions.\n- Perform a minor version upgrade on the staging instance.\n- Run workload tests to verify that the upgrade was successful and that your application performs as expected. When testing is successful, proceed to upgrade your read replica instances.\n- **Upgrade your read replica instances.** - [Upgrade](#minor-ver-upgrade) all read replicas in the database to the target minor version.\n- Verify that your application works as expected.\n- **Back up your primary instance.** As with any significant database update, make a backup of your primary instance.\n### Upgrade the minor version\nYou can specify the database minor version of an existing instance by using `gcloud` or the REST API. Perform minor version upgrades at a time when the database isn't in use. The instance is restarted during the operation, which causes downtime. If the currently installed version is higher than the requested version, the request is rejected.\n**Note:** Concurrent updates, such as updating the disk size or the memory of an instance, aren't permitted while upgrading the database minor version.\nUse the [gcloud sql instances patch](/sdk/gcloud/reference/sql/instances/patch) command with the `--database-version` flag.\nReplace the following variables before running the command:- : The name of the instance.\n- : The database version of the instance. If  you don't specify this flag, the default major version is used.\n```\ngcloud sql instances patch INSTANCE_NAME \\--database-version=DATABASE_VERSION\n```Use a PATCH request with the [instances:patch](/sql/docs/mysql/admin-api/rest/v1/instances/patch) method and the `databaseVersion` flag.\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The instance ID\n- : The database version to upgrade to.\nHTTP method and URL:\n```\nPATCH https://sqladmin.googleapis.com/v1/projects/PROJECT-ID/instances/INSTANCE-ID\n```\nRequest JSON body:\n```\n{\n \"databaseVersion\": \"DATABASE_VERSION\"\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"kind\": \"sql#operation\",\n \"targetLink\": \"https://content-sqladmin.googleapis.com/v1/projects/PROJECT-ID/instances/INSTANCE-ID\",\n \"status\": \"PENDING\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2022-07-17T20:23:15.540Z\",\n \"operationType\": \"UPDATE\",\n \"name\": \"fa3f7304-ccf6-4d2f-a6f5-24df00000032\",\n \"targetId\": \"INSTANCE-ID\",\n \"selfLink\": \"https://content-sqladmin.googleapis.com/v1/projects/PROJECT-ID/operations/fa3f7304-ccf6-4d2f-a6f5-24df00000032\",\n \"targetProject\": \"PROJECT-ID\"\n}\n```\nUse a PATCH request with the [instances:patch](/sql/docs/mysql/admin-api/rest/v1beta4/instances/patch) method and the `databaseVersion` flag.\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The instance ID\n- : The database version to upgrade to.\nHTTP method and URL:\n```\n https://sqladmin.googleapis.com/v1beta4/projects/PROJECT-ID/instances/INSTANCE-ID\n```\nRequest JSON body:\n```\n{\n \"databaseVersion\": \"DATABASE_VERSION\"\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"kind\": \"sql#operation\",\n \"targetLink\": \"https://content-sqladmin.googleapis.com/v1beta4/projects/PROJECT-ID/instances/INSTANCE-ID\",\n \"status\": \"PENDING\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2022-07-17T20:23:15.540Z\",\n \"operationType\": \"UPDATE\",\n \"name\": \"fa3f7304-ccf6-4d2f-a6f5-24df00000032\",\n \"targetId\": \"INSTANCE-ID\",\n \"selfLink\": \"https://content-sqladmin.googleapis.com/v1beta4/projects/PROJECT-ID/operations/fa3f7304-ccf6-4d2f-a6f5-24df00000032\",\n \"targetProject\": \"PROJECT-ID\"\n}\n```\n## Check the database minor installed version\nWhen you [view the instance summary information](/sql/docs/mysql/instance-info#info) , the database minor installed version is visible in the Configuration section.\n## Roll back an upgrade\nWhile testing an upgrade, if you notice an issue, you might want to roll back your database to recover the database instance running the previous minor version.\nTo restore a pre-upgrade backup, complete the following steps:\n- Provision a recovery database instance on the previous minor version.\n- Configure settings on the recovery database instance to the pre-upgrade state.\n- Restore the pre-upgrade backup you took to the recovery instance.\n**Note:** When [restoring an instance from a backup](/sql/docs/mysql/backup-recovery/restoring#restorebackups) to a target instance, the installed version of the backup is compared to the installed version of the target database instance. Because MySQL 8.0 doesn't allow downgrades, if the backup has an installed version greater than that of the target, the restore request is rejected.\nAs an alternative to restoring a backup, [perform a point-in-time recovery](/sql/docs/mysql/backup-recovery/pitr#perform-pitr) and create a new instance.", "guide": "Cloud SQL"}