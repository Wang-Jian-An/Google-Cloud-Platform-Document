{"title": "Cloud SQL - Configure private IP", "url": "https://cloud.google.com/sql/docs/postgres/configure-private-ip", "abstract": "# Cloud SQL - Configure private IP\nThis page describes how to configure a Cloud SQL instance to use private IP.\nFor information about how private IP works, as well as environment and management requirements, see [Private IP](/sql/docs/postgres/private-ip) .\n", "content": "## Before you begin\n### API and IAM requirements\n- You must enable the [ Service Networking API](https://console.cloud.google.com/apis/library/servicenetworking.googleapis.com) for your Google Cloud project.\n- If you are using a [Shared VPC network](/vpc/docs/shared-vpc) ,  you also need to enable this API for the host project.\n- In order to manage a private services access connection, the user must  have the following Identity and Access Management (IAM) permissions. If you don't have the required  permissions you can get insufficient-permissions errors.- `compute.networks.list`\n- `compute.addresses.create`\n- `compute.addresses.list`\n- `servicenetworking.services.addPeering`\nIf you are using a [Shared VPC network](/vpc/docs/shared-vpc) ,  you also need to add your user to the host project and assign the same  permissions to the user on the host project.\n### Private services access\nWhen you [create a new Virtual Private Cloud (VPC) network](/vpc/docs/create-modify-vpc-networks) in your project, you need to [configure private services access](/sql/docs/postgres/configure-private-services-access#configure-access) to allocate an IP address range and create a private service connection. This allows resources in the VPC network to connect to Cloud SQL instances. The Google Cloud console provides [a wizard](#new-private-instance) to help you set up this configuration.\nAssigning different VPC networks to Cloud SQL for PostgreSQL instances with private IP addresses provides better isolation than attaching all of them to the`default`VPC network.\n## Configure an instance to use private IP\nYou can configure a Cloud SQL instance to use private IP when you create the instance, or for an existing instance.\nAfter you configure an instance to use private IP, you cannot disable private IP connectivity for that instance.If you choose to let Cloud SQL allocate your private IP for an instance, the addresses for all instances you later configure in that VPC network are automatically allocated in the same IP address range.\nFor each project, there's an internal limit for the number of different network-region combinations in which Cloud SQL instances can be setup with Private Services Access. To avoid reaching this limit, we recommend reusing existing available networks.\n### Configure private IP for a new instance\nTo configure a Cloud SQL instance to use private IP when creating an instance:\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- Click **Create instance** .\n- Expand **Show configuration options** .\n- Expand **Connections** .\n- Select **Private IP** .A drop-down list shows the available VPC networks in your  project. If your project is the service project of a [Shared VPC](https://cloud.google.com/vpc/docs/shared-vpc) , then VPC networks from the host project are also shown.\n- Select the VPC network you want to use.\n- If you see a message indicating that you need to set up a private service  connection, do the following:\n- Click **Set up connection** .\n- In the **Allocate an IP range** section, select one of the following  options:- Select one or more existing IP ranges or create a new one from the   dropdown. The dropdown includes previously allocated ranges, if there   are any, or you can select **Allocate a new IP range** and enter a   new range and name.\n- **Use an automatically allocated IP range in your network** .\n **Note: ** You can specify an address range only for   a primary instance, not for a read replica or clone.\n- Click **Continue** .\n- Click **Create connection** .\n- Verify that you see the message:`Private service connection for  network` `` `has been successfully  created`.\n- Optionally, you can specify an allocated IP range for your instances to use for connections.- Expand **Show allocated IP range option** .\n- Select an IP range from the drop-down menu.\n- Optional. If you want to allow other Google Cloud services, such as  BigQuery, to access data in Cloud SQL and make queries against  this data over a private IP connection, then select **Private path for\n Google Cloud services** .\n- Finish configuring your instance.\n- Click **Create instance** .\nBefore you create an instance using a private IP address, ensure that your project is configured for [ private services access](https://cloud.google.com/sql/docs/postgres/configure-private-services-access) .\nBefore using any of the request data, make the following replacements:- ``: The instance ID\n- ``: The project ID\n- `` : The project ID of the VPC network **Note: ** If the VPC network is a Shared VPC, then``must be the ID of the Shared VPC service project, and``must be the ID of the Shared VPC host project.\n- ``: The name of the VPC network\n- ``:If specified, sets a range name for which an IP range is allocated. The range name must comply with [RFC-1035](https://datatracker.ietf.org/doc/html/rfc1035) and contain 1-63 characters.\n- ``: The version of the PostgreSQL database (for example,`POSTGRES_14`)\n- ``: The number of CPUs\n- ``: The amount of memory (in GB)\n- ``: The region nameTo specify the name of your VPC network, use the\n`--network`\nparameter. To disable public IP, use the\n`--no-assign-ip`\nflag.\nAlso, optionally, use the `--enable-google-private-path` parameter to allow other Google Cloud services such as BigQuery to access data in Cloud SQL and make queries against this data over a private IP connection. This parameter is valid only if:\n- You use the`--no-assign-ip`parameter.\n- You use the`--network`parameter to specify the name of the VPC network that you want to use to create a private connection.\n **Note:** After you create an instance, you can't assign an allocated range name for that instance. After you assign a range to an instance, you can't modify the range.\n```\ngcloud beta sql instances create INSTANCE_ID \\--project=PROJECT_ID \\--network=projects/NETWORK_PROJECT_ID/global/networks/VPC_NETWORK_NAME \\--no-assign-ip \\--allocated-ip-range-name=RANGE_NAME \\--enable-google-private-path \\--database-version=DATABASE_VERSION \\--cpu=NUMBER_OF_CPU \\--memory=MEMORY_IN_GB \\--region=REGION_NAME\n```To configure private IP for a new instance, use the following Terraform resources:\n- [google_compute_network](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/compute_network) \n- [google_compute_global_address](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/compute_global_address) \n- [google_service_networking_connection](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/service_networking_connection) \n- [google_sql_database_instance](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance) [  cloud_sql/postgres_instance_private_ip/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_private_ip/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_private_ip/main.tf) \n```\nresource \"google_compute_network\" \"peering_network\" {\n name     = \"private-network\"\n auto_create_subnetworks = \"false\"\n}\nresource \"google_compute_global_address\" \"private_ip_address\" {\n name   = \"private-ip-address\"\n purpose  = \"VPC_PEERING\"\n address_type = \"INTERNAL\"\n prefix_length = 16\n network  = google_compute_network.peering_network.id\n}\nresource \"google_service_networking_connection\" \"default\" {\n network     = google_compute_network.peering_network.id\n service     = \"servicenetworking.googleapis.com\"\n reserved_peering_ranges = [google_compute_global_address.private_ip_address.name]\n}\nresource \"google_sql_database_instance\" \"default\" {\n name    = \"private-ip-sql-instance\"\n region   = \"us-central1\"\n database_version = \"POSTGRES_14\"\n depends_on = [google_service_networking_connection.default]\n settings {\n tier = \"db-custom-2-7680\"\n ip_configuration {\n  ipv4_enabled = \"false\"\n  private_network = google_compute_network.peering_network.id\n }\n }\n # set `deletion_protection` to true, will ensure that one cannot accidentally delete this instance by\n # use of Terraform whereas `deletion_protection_enabled` flag protects this instance at the GCP level.\n deletion_protection = false\n}\nresource \"google_compute_network_peering_routes_config\" \"peering_routes\" {\n peering    = google_service_networking_connection.default.peering\n network    = google_compute_network.peering_network.name\n import_custom_routes = true\n export_custom_routes = true\n}\n# [START cloud_sql_postgres_instance_private_ip_dns]\n## Uncomment this block after adding a valid DNS suffix\n# resource \"google_service_networking_peered_dns_domain\" \"default\" {\n# name  = \"example-com\"\n# network = google_compute_network.peering_network.id\n# dns_suffix = \"example.com.\"\n# service = \"servicenetworking.googleapis.com\"\n# }\n```To apply your Terraform configuration in a Google Cloud project, complete the steps in the following sections.## Prepare Cloud Shell\n- Launch [Cloud Shell](https://shell.cloud.google.com/) .\n- Set the default Google Cloud project  where you want to apply your Terraform configurations.You only need to run this command once per project, and you can run it in any directory.```\nexport GOOGLE_CLOUD_PROJECT=PROJECT_ID\n```Environment variables are overridden if you set explicit values in the Terraform  configuration file.\n## Prepare the directoryEach Terraform configuration file must have its own directory (also called a ).- In [Cloud Shell](https://shell.cloud.google.com/) , create a directory and a new  file within that directory. The filename must have the`.tf`extension\u2014for example`main.tf`. In this  tutorial, the file is referred to as`main.tf`.```\nmkdir DIRECTORY && cd DIRECTORY && touch main.tf\n```\n- If you are following a tutorial, you can copy the sample code in each section or step.Copy the sample code into the newly created `main.tf` .Optionally, copy the code from GitHub. This is recommended  when the Terraform snippet is part of an end-to-end solution.\n- Review and modify the sample parameters to apply to your environment.\n- Save your changes.\n- Initialize Terraform. You only need to do this once per directory.```\nterraform init\n```Optionally, to use the latest Google provider version, include the `-upgrade` option:```\nterraform init -upgrade\n```\n## Apply the changes\n- Review the configuration and verify that the resources that Terraform is going to create or  update match your expectations:```\nterraform plan\n```Make corrections to the configuration as necessary.\n- Apply the Terraform configuration by running the following command and entering`yes`at the prompt:```\nterraform apply\n```Wait until Terraform displays the \"Apply complete!\" message.\n- [Open your Google Cloud project](https://console.cloud.google.com/) to view  the results. In the Google Cloud console, navigate to your resources in the UI to make sure  that Terraform has created or updated them.\n **Note:** Terraform samples typically assume that the required APIs are enabled in your Google Cloud project.To delete your changes, do the following:- To disable deletion protection, in your Terraform configuration file set the`deletion_protection`argument to`false`.```\ndeletion_protection = \"false\"\n```\n- Apply the updated Terraform configuration by running the following command and    entering`yes`at the prompt:```\nterraform apply\n```\n- Remove resources previously applied with your Terraform configuration by running the following command and entering `yes` at the prompt:```\nterraform destroy\n```\nCreate a new instance with a private IP address:\nBefore using any of the request data, make the following replacements:- The project ID\n- The instance ID\n- Specify the name of the Virtual Private Cloud (VPC) network that  you want to use for this instance. Private services access must already be configured for the  network.\n- If specified, sets a range name for which an IP range  is allocated. The range name must comply with [RFC-1035](https://tools.ietf.org/html/rfc1035) and contain 1-63 characters.\n- For public IP connections, specify the connections from authorized  networks that can connect to your instance.\nFor the `ipv4Enabled` parameter, set the value to `true` if you're using a public IP address for your instance or `false` if your instance has a private IP address.\nIf you set the `enablePrivatePathForGoogleCloudServices` parameter to `true` ,  then you allow other Google Cloud services, such as BigQuery, to access data in  Cloud SQL and make queries against this data over a private IP connection. By setting this parameter to `false` , other Google Cloud services can't access data in Cloud SQL over a private IP connection.\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/v1/projects/PROJECT_ID/instances\n```\nRequest JSON body:\n```\n{\n \"name\": \"INSTANCE_ID\",\n \"region\": \"region\",\n \"databaseVersion\": \"database-version\",\n \"settings\": {\n \"tier\": \"machine-type\",\n \"ipConfiguration\": {\n  \"ipv4Enabled\": false,\n  \"privateNetwork\": \"projects/PROJECT_ID/global/networks/VPC_NETWORK_NAME\",\n  \"allocatedIpRange\": \"RANGE_NAME\"\n  \"authorizedNetworks\": [AUTHORIZED_NETWORKS],\n  \n  \"enablePrivatePathForGoogleCloudServices\": true\n  \n }\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:Create a new instance with a private IP address:\nBefore using any of the request data, make the following replacements:- The project ID\n- The instance ID\n- Specify the name of the Virtual Private Cloud (VPC) network that  you want to use for this instance. Private services access must already be configured for the  network.\n- If specified, sets a range name for which an IP range  is allocated. The range name must comply with [RFC-1035](https://tools.ietf.org/html/rfc1035) and contain 1-63 characters.\n- For public IP connections, specify the connections from authorized  networks that can connect to your instance.\nFor the `ipv4Enabled` parameter, set the value to `true` if you're using a public IP address for your instance or `false` if your instance has a private IP address.\nIf you set the `enablePrivatePathForGoogleCloudServices` parameter to `true` ,  then you allow other Google Cloud services, such as BigQuery, to access data in  Cloud SQL and make queries against this data over a private IP connection. By setting this parameter to `false` , other Google Cloud services can't access data in Cloud SQL over a private IP connection.\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/v1beta4/projects/PROJECT_ID/instances\n```\nRequest JSON body:\n```\n{\n \"name\": \"INSTANCE_ID\",\n \"region\": \"region\",\n \"databaseVersion\": \"database-version\",\n \"settings\": {\n \"tier\": \"machine-type\",\n \"ipConfiguration\": {\n  \"ipv4Enabled\": false,\n  \"privateNetwork\": \"projects/PROJECT_ID/global/networks/VPC_NETWORK_NAME\",\n  \"allocatedIpRange\": \"RANGE_NAME\"\n  \"authorizedNetworks\": [AUTHORIZED_NETWORKS],\n  \n  \"enablePrivatePathForGoogleCloudServices\": true\n  \n }\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n### Configure private IP for an existing instance\nConfiguring an existing Cloud SQL instance to use private IP causes the instance to restart, resulting in downtime.\n**Note:** You can't assign a private IP address for an existing Cloud SQL instance in a Shared VPC network. You also can't assign an allocated range name for an existing instance.\nTo configure an existing instance to use private IP:\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- To open the **Overview** page of an instance, click the instance name.\n- Select **Connections** from the Cloud SQL navigation menu.\n- Select the **Private IP** checkbox.A drop-down list shows the available networks in your project.\n- Select the VPC network you want to use:\n- If you see **Private service connection required** :\n- Click **Set up connection** .\n- In the **Allocate an IP range** section, choose one of the following options:- Select one or more existing IP ranges or create a new one from the   dropdown. The dropdown includes previously allocated ranges, if there   are any, or you can select **Allocate a new IP range** and enter a   new range and name.\n- Use an automatically allocated IP range in your network.\n **Note: ** You can specify an address range only for   a primary instance, not for a read replica or clone.\n- Click **Continue** .\n- Click **Create connection** .\n- Verify that you see the **Private service connection for\n  network VPC_NETWORK_NAME has been successfully created** status.\n- Optional. If you want to allow other Google Cloud services, such as  BigQuery, to access data in Cloud SQL and make queries against  this data over a private IP connection, then select the **Private path for Google Cloud\n services** check box.\n- Click **Save** .\nEnsure your project is configured for [ private services access](https://cloud.google.com/sql/docs/postgres/configure-private-services-access) .\nUpdate your Cloud SQL instance by using the `--network` parameter to specify the name of your selected VPC network.\n```\ngcloud beta sql instances patch INSTANCE_ID \\--project=PROJECT_ID \\--network=projects/NETWORK_PROJECT_ID/global/networks/VPC_NETWORK_NAME \\--no-assign-ip \\--enable-google-private-path\n```Create a new instance with a private IP address:\nBefore using any of the request data, make the following replacements:- The project ID\n- The instance ID\n- Specify the name of the Virtual Private Cloud (VPC) network that  you want to use for this instance. Private services access must already be configured for the  network.\n- If specified, sets a range name for which an IP range  is allocated. The range name must comply with [RFC-1035](https://tools.ietf.org/html/rfc1035) and contain 1-63 characters.\n- For public IP connections, specify the connections from authorized  networks that can connect to your instance.\nFor the `ipv4Enabled` parameter, set the value to `true` if you're using a public IP address for your instance or `false` if your instance has a private IP address.\nIf you set the `enablePrivatePathForGoogleCloudServices` parameter to `true` ,  then you allow other Google Cloud services, such as BigQuery, to access data in  Cloud SQL and make queries against this data over a private IP connection. By setting this parameter to `false` , other Google Cloud services can't access data in Cloud SQL over a private IP connection.\nHTTP method and URL:\n```\nPATCH https://sqladmin.googleapis.com/sql/v1/projects/PROJECT_ID/instances/INSTANCE_ID\n```\nRequest JSON body:\n```\n{\n \"settings\":\n {\n \"ipConfiguration\": {\n  \"ipv4Enabled\": false,\n  \"privateNetwork\": \"projects/PROJECT_ID/global/networks/VPC_NETWORK_NAME\",\n  \"allocatedIpRange\": \"RANGE_NAME\"\n  \"authorizedNetworks\": [AUTHORIZED_NETWORKS],\n  \n  \"enablePrivatePathForGoogleCloudServices\": true\n  \n }\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:Create a new instance with a private IP address:\nBefore using any of the request data, make the following replacements:- The project ID\n- The instance ID\n- Specify the name of the Virtual Private Cloud (VPC) network that  you want to use for this instance. Private services access must already be configured for the  network.\n- If specified, sets a range name for which an IP range  is allocated. The range name must comply with [RFC-1035](https://tools.ietf.org/html/rfc1035) and contain 1-63 characters.\n- : For public IP connections, specify the connections from authorized  networks that can connect to your instance.\nFor the `ipv4Enabled` parameter, set the value to `true` if you're using a public IP address for your instance or `false` if your instance has a private IP address.\nIf you set the `enablePrivatePathForGoogleCloudServices` parameter to `true` ,  then you allow other Google Cloud services, such as BigQuery, to access data in  Cloud SQL and make queries against this data over a private IP connection. By setting this parameter to `false` , other Google Cloud services can't access data in Cloud SQL over a private IP connection.\nHTTP method and URL:\n```\nPATCH https://sqladmin.googleapis.com/sql/v1beta4/projects/PROJECT_ID/instances/INSTANCE_ID\n```\nRequest JSON body:\n```\n{\n \"settings\":\n {\n \"ipConfiguration\": {\n  \"ipv4Enabled\": false,\n  \"privateNetwork\": \"projects/PROJECT_ID/global/networks/VPC_NETWORK_NAME\",\n  \"allocatedIpRange\": \"RANGE_NAME\"\n  \"authorizedNetworks\": [AUTHORIZED_NETWORKS],\n  \n  \"enablePrivatePathForGoogleCloudServices\": true\n  \n }\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n## Connect to an instance using its Private IP\nYou use [private services access](https://cloud.google.com/sql/docs/postgres/configure-private-services-access) to connect to Cloud SQL instances from Compute Engine or Google Kubernetes Engine instances in the same VPC network (defined here as sources) or from outside of that network (an source).\n### Connect from an internal source\nTo connect from a source in the same Google Cloud project as your Cloud SQL instance, such as the [Cloud SQL Auth Proxy](/sql/docs/postgres/sql-proxy) running on a Compute Engine resource, that resource must be in the same VPC network where private services access has been established for the Cloud SQL instance.\nTo connect from a serverless source, such as [App Engine standard environment](/sql/docs/postgres/connect-app-engine-standard#connecting_to) , [Cloud Run](/sql/docs/postgres/connect-run#connecting_to) , or [Cloud Functions](/sql/docs/postgres/connect-functions#connecting_to) , your application or function connects directly to your instance through Serverless VPC Access without the Cloud SQL Auth Proxy.\n### Connect from an external source\nIf an external network (for example, an on-premises network or a VPC network), is connected to the VPC network to which your Cloud SQL instance is connected, then you can use [Cloud VPN](/network-connectivity/docs/vpn) or [Cloud Interconnect](/network-connectivity/docs/interconnect) to connect to the instance from a client in the external network.\nTo permit connections from an external network, do the following:\n- Ensure your VPC network is connected to the external  network using a [ Cloud VPN tunnel](/network-connectivity/docs/vpn/concepts/overview) or a VLAN attachment for [ Dedicated Interconnect](/network-connectivity/docs/interconnect/how-to/dedicated/provisioning-overview) or [ Partner Interconnect](/network-connectivity/docs/interconnect/how-to/partner/provisioning-overview) .\n- Ensure the Border Gateway Protocol (BGP) sessions on the  Cloud Routers managing your Cloud VPN tunnels and  Cloud Interconnect attachments (VLANs) have received specific  prefixes (destinations) from your on-premises network.Default routes (destination 0.0.0.0/0) cannot be imported into the  Cloud SQL VPC network because that network has its own  local default route. Local routes for a destination are used even  though the Cloud SQL peering is configured to import custom routes from  your VPC network.\n- [ Identify the peering connections](/vpc/docs/configure-private-services-access#listing-connections) produced by the private services connection. Depending on the service, the private services connection might create one or more of the following peering connections, but not necessarily all of them:- `cloudsql-mysql-googleapis-com`\n- `cloudsql-postgres-googleapis-com`\n- `servicenetworking-googleapis-com`\n- [ Update all of the peering connections ](/vpc/docs/using-vpc-peering#update-peer-connection) to enable **Export custom\n routes** .\n- [ Identify the allocated range](/vpc/docs/configure-private-services-access#listing_allocated_ip_address_ranges) used by the private services connection.\n- [ Create a Cloud Router custom route advertisement](/network-connectivity/docs/router/how-to/advertising-custom-ip) for the allocated range on the Cloud Routers managing BGP sessions for your Cloud VPN tunnels or Cloud Interconnect attachments (VLANs).\n- **Note: ** If you're using a [non-RFC 1918 IP address range](/vpc/docs/subnets#valid-ranges) for your application, then to allow access from this range, [configure the authorized network](/sql/docs/postgres/authorize-networks) for your instance.\n### Connect from Cloud Shell\nCloud Shell doesn't support connecting to a Cloud SQL instance that has only a private IP address.\n### Connect from non-RFC 1918 IP addresses\n[RFC 1918](https://tools.ietf.org/html/rfc1918) specifies IP addresses that are assigned to be used internally (that is, within an organization) and will not route on the Internet. Specifically, these are:\n- 10.0.0.0/8\n- 172.16.0.0/12\n- 192.168.0.0/16\nConnections to a Cloud SQL instance using a private IP address are automatically authorized for [RFC 1918address ranges](/vpc/docs/subnets#valid-ranges) . This way, all private clients can access the database without going through the proxy.\n**Note:** You must configure all the non-RFC 1918 IP address ranges as [authorized networks](/sql/docs/postgres/authorize-networks) of the Cloud SQL for PostgreSQL instances. Alternatively, you can connect to your instance using the [Cloud SQL Auth Proxy client](/sql/docs/postgres/sql-proxy) .\nTo connect from a non-RFC 1918 IP address, you must set per-instance IP authorization to allow traffic from non-RFC 1918 IP address ranges.\nFor example, use a `gcloud` command like the following:\n```\ngcloud sql instances patch INSTANCE_NAME \\--authorized-networks=192.88.99.0/24,11.0.0.0/24\n```\n**Note:** This command overwrites all existing authorized networks, so you must include all desired authorized networks.\nCloud SQL doesn't learn non-RFC 1918 subnet routes from your VPC network by default. You need to update the network peering to Cloud SQL to export any non-RFC 1918 routes.\n```\ngcloud compute networks peerings update cloudsql-postgres-googleapis-com \\--network=VPC_NETWORK_NAME \\--export-subnet-routes-with-public-ip \\--project=PROJECT_ID\n```\n- Replace the following:\n- `cloudsql-postgres-googleapis-com`is a **Private Service Connection** name from your [VPC network](https://console.cloud.google.com/networking/networks/) page.Select your network, then look for the **Private Service Connection** section.\n- ``is the name of your VPC network.\n- ``is the ID of the project of the VPC network. If you're using Shared VPC, then use the host project ID.\nTo mitigate IP address exhaustion, you can use [privately used public IP addresses](/vpc/docs/subnets#pupi-addresses) .\nIf you want to configure your instance in a privately used public IP address range, then enable `export-subnet-routes-with-public-ip` on the network peering between your network and the Cloud SQL network.\n```\ngcloud compute networks peerings update cloudsql-postgres-googleapis-com \\--network=VPC_NETWORK_NAME \\--export-subnet-routes-with-public-ip \\--project=PROJECT_ID\n```\n- Replace the following:\n- `cloudsql-postgres-googleapis-com`is a **Private Service Connection** name from your [VPC network](https://console.cloud.google.com/networking/networks/) page.Select your network, and then look for the **Private Service Connection** section.\n- ``is the name of your VPC network.\n- ``is the ID of the project of the VPC network. If you're using Shared VPC, then use the host project ID.If your instance is configured in a privately used public IP address range and you want to connect to it, then enable `import-subnet-routes-with-public-ip` on the network peering between your network and the Cloud SQL network.\n```\ngcloud compute networks peerings update cloudsql-postgres-googleapis-com \\--network=VPC_NETWORK_NAME \\--import-subnet-routes-with-public-ip \\--project=PROJECT_ID\n```\n- Replace the following:\n- `cloudsql-postgres-googleapis-com`is a **Private Service Connection** name from your [VPC network](https://console.cloud.google.com/networking/networks/) page.Select your network, then look for the **Private Service Connection** section.\n- ``is the name of your VPC network.\n- ``is the ID of the project of the VPC network. Use the host project ID if you're using Shared VPC.## Troubleshoot\nSee [ troubleshooting](/sql/docs/postgres/troubleshooting#connectivity) for known connectivity issues, and also [debugging connection issues](/sql/docs/postgres/debugging-connectivity) for help with self-diagnostics.\n## What's next\n- Learn more about [private IP](/sql/docs/postgres/private-ip) .\n- Learn more about [private services access](/vpc/docs/private-services-access) .\n- See how to use [VPC Service Controls](/sql/docs/postgres/admin-api/configure-service-controls) to add a service perimeter.\n- Learn more about [configuring private services access](/vpc/docs/configure-private-services-access) .\n- Learn more about [configuring private services access for Cloud SQL](/sql/docs/postgres/configure-private-services-access#configure-access) .\n- Learn more about [Cloud VPN](/network-connectivity/docs/vpn/concepts/overview) .\n- Learn more about [VPC networks](/vpc/docs/vpc) .\n- Learn more about [VPC Network Peering](/vpc/docs/vpc-peering) .\n- Learn more about [Shared VPC](/vpc/docs/shared-vpc) .", "guide": "Cloud SQL"}