{"title": "Cloud SQL - \u7ba1\u7406\u6578\u64da\u5eab\u9023\u63a5", "url": "https://cloud.google.com/sql/docs/postgres/manage-connections?hl=zh-cn", "abstract": "# Cloud SQL - \u7ba1\u7406\u6578\u64da\u5eab\u9023\u63a5\n\u672c\u9801\u9762\u63d0\u4f9b\u6700\u4f73\u505a\u6cd5\u548c\u7279\u5b9a\u8a9e\u8a00\u7684\u4ee3\u78bc\u793a\u4f8b\uff0c\u5e6b\u52a9\u60a8\u5275\u5efa\u9ad8\u6548\u5730\u4f7f\u7528 Cloud SQL \u6578\u64da\u5eab\u9023\u63a5\u7684\u61c9\u7528\u3002\n\u9019\u4e9b\u793a\u4f8b\u6458\u81ea GitHub \u4e0a\u63d0\u4f9b\u7684\u5b8c\u6574 Web \u61c9\u7528\u3002 [\u77ad\u89e3\u8a73\u60c5](#app-links) \u3002\n**\u5982\u9700\u77ad\u89e3\u904b\u884c\u9023\u63a5\u5230 Cloud SQL \u7684\u793a\u4f8b Web \u61c9\u7528\u7684\u5206\u6b65\u8aaa\u660e** \uff0c\u8acb\u9ede\u64ca\u8207\u60a8\u7684\u74b0\u5883\u6240\u5c0d\u61c9\u7684\u93c8\u63a5\uff1a\n- [\u5f9e\u672c\u5730\u8a08\u7b97\u6a5f\u9023\u63a5\u5feb\u901f\u5165\u9580](https://cloud.google.com/sql/docs/postgres/connect-instance-local-computer?hl=zh-cn) \n- [\u5f9e Compute Engine \u9023\u63a5\u5feb\u901f\u5165\u9580](https://cloud.google.com/sql/docs/postgres/connect-instance-compute-engine?hl=zh-cn) \n- [\u5f9e Cloud Run \u9023\u63a5\u5feb\u901f\u5165\u9580](https://cloud.google.com/sql/docs/postgres/connect-instance-cloud-run?hl=zh-cn) \n- [\u5f9e Cloud Functions \u9023\u63a5\u5feb\u901f\u5165\u9580](https://cloud.google.com/sql/docs/postgres/connect-instance-cloud-functions?hl=zh-cn) \n- [\u5f9e Google Kubernetes Engine \u9023\u63a5\u5feb\u901f\u5165\u9580](https://cloud.google.com/sql/docs/postgres/connect-instance-kubernetes?hl=zh-cn) ", "content": "## \u9023\u63a5\u6c60\n\u9023\u63a5\u6c60\u662f\u6578\u64da\u5eab\u9023\u63a5\u7684\u7de9\u5b58\uff0c\u5171\u4eab\u548c\u91cd\u8907\u4f7f\u7528\u7de9\u5b58\u4e2d\u7684\u9023\u63a5\u53ef\u4ee5\u7e2e\u77ed\u9023\u63a5\u5ef6\u9072\u6642\u9593\u4e26\u63d0\u9ad8\u6027\u80fd\u3002\u7576\u61c9\u7528\u9700\u8981\u4f7f\u7528\u6578\u64da\u5eab\u9023\u63a5\u6642\uff0c\u5b83\u6703\u5f9e\u9023\u63a5\u6c60\u4e2d\u66ab\u501f\u4e00\u500b\uff0c\u4e26\u5728\u7528\u5b8c\u4e4b\u5f8c\u653e\u56de\u6c60\u4e2d\uff0c\u4f9b\u4e0b\u6b21\u9700\u8981\u9023\u63a5\u6642\u91cd\u8907\u4f7f\u7528\u3002## \u6253\u958b\u548c\u95dc\u9589\u9023\u63a5\n\u4f7f\u7528\u9023\u63a5\u6c60\u6642\u5fc5\u9808\u6b63\u78ba\u5730\u6253\u958b\u548c\u95dc\u9589\u9023\u63a5\uff0c\u4ee5\u4fbf\u5728\u7528\u5b8c\u9023\u63a5\u5f8c\u59cb\u7d42\u5c07\u5176\u653e\u56de\u6c60\u4e2d\u3002\u672a\u653e\u56de\uff08\u4e5f\u7a31\u7232\u201c\u5916\u6cc4\u201d\uff09\u7684\u9023\u63a5\u7121\u6cd5\u91cd\u8907\u4f7f\u7528\uff0c\u6703\u9020\u6210\u8cc7\u6e90\u6d6a\u8cbb\u4e26\u53ef\u80fd\u5c0e\u81f4\u61c9\u7528\u51fa\u73fe\u6027\u80fd\u74f6\u9838\u3002\n[  cloud-sql/postgres/sqlalchemy/app.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/app.py) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/app.py) \n```\n# Preparing a statement before hand can help protect against injections.stmt = sqlalchemy.text(\u00a0 \u00a0 \"INSERT INTO votes (time_cast, candidate) VALUES (:time_cast, :candidate)\")try:\u00a0 \u00a0 # Using a with statement ensures that the connection is always released\u00a0 \u00a0 # back into the pool at the end of statement (even if an error occurs)\u00a0 \u00a0 with db.connect() as conn:\u00a0 \u00a0 \u00a0 \u00a0 conn.execute(stmt, parameters={\"time_cast\": time_cast, \"candidate\": team})\u00a0 \u00a0 \u00a0 \u00a0 conn.commit()except Exception as e:\u00a0 \u00a0 # If something goes wrong, handle the error in this section. This might\u00a0 \u00a0 # involve retrying or adjusting parameters depending on the situation.\u00a0 \u00a0 # ...\n``` [  cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/IndexServlet.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/IndexServlet.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/IndexServlet.java) \n```\n// Using a try-with-resources statement ensures that the connection is always released back// into the pool at the end of the statement (even if an error occurs)try (Connection conn = pool.getConnection()) {\u00a0 // PreparedStatements can be more efficient and project against injections.\u00a0 String stmt = \"INSERT INTO votes (time_cast, candidate) VALUES (?, ?);\";\u00a0 try (PreparedStatement voteStmt = conn.prepareStatement(stmt);) {\u00a0 \u00a0 voteStmt.setTimestamp(1, now);\u00a0 \u00a0 voteStmt.setString(2, team);\u00a0 \u00a0 // Finally, execute the statement. If it fails, an error will be thrown.\u00a0 \u00a0 voteStmt.execute();\u00a0 }} catch (SQLException ex) {\u00a0 // If something goes wrong, handle the error in this section. This might involve retrying or\u00a0 // adjusting parameters depending on the situation.\u00a0 // ...}\n``` [  cloud-sql/postgres/knex/index.js ](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/index.js) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/index.js) \n```\n/**\u00a0* Insert a vote record into the database.\u00a0*\u00a0* @param {object} pool The Knex connection object.\u00a0* @param {object} vote The vote record to insert.\u00a0* @returns {Promise}\u00a0*/const insertVote = async (pool, vote) => {\u00a0 try {\u00a0 \u00a0 return await pool('votes').insert(vote);\u00a0 } catch (err) {\u00a0 \u00a0 throw Error(err);\u00a0 }};\n``` [  cloud-sql/postgres/ConnectTcp.cs ](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/ConnectTcp.cs) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/ConnectTcp.cs) \n```\nusing Npgsql;using System;namespace CloudSql{\u00a0 \u00a0 public class PostgreSqlTcp\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 public static NpgsqlConnectionStringBuilder NewPostgreSqlTCPConnectionString()\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Equivalent connection string:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // \"Uid=<DB_USER>;Pwd=<DB_PASS>;Host=<INSTANCE_HOST>;Database=<DB_NAME>;\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var connectionString = new NpgsqlConnectionStringBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // secure - consider a more secure solution such as\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // keep secrets safe.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Host = Environment.GetEnvironmentVariable(\"INSTANCE_HOST\"), \u00a0 \u00a0 // e.g. '127.0.0.1'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set Host to 'cloudsql' when deploying to App Engine Flexible environment\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Username = Environment.GetEnvironmentVariable(\"DB_USER\"), // e.g. 'my-db-user'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Password = Environment.GetEnvironmentVariable(\"DB_PASS\"), // e.g. 'my-db-password'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Database = Environment.GetEnvironmentVariable(\"DB_NAME\"), // e.g. 'my-database'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // The Cloud SQL proxy provides encryption between the proxy and instance.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SslMode = SslMode.Disable,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 connectionString.Pooling = true;\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Specify additional properties here.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return connectionString;\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }}\n``` [  cloudsql/postgres/database-sql/cloudsql.go ](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/cloudsql.go) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/cloudsql.go) \n```\ninsertVote := \"INSERT INTO votes(candidate, created_at) VALUES($1, NOW())\"_, err := db.Exec(insertVote, team)\n``` [  cloud-sql/postgres/activerecord/app/controllers/votes_controller.rb ](https://github.com/GoogleCloudPlatform/ruby-docs-samples/blob/HEAD/cloud-sql/postgres/activerecord/app/controllers/votes_controller.rb) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/ruby-docs-samples/blob/HEAD/cloud-sql/postgres/activerecord/app/controllers/votes_controller.rb) \n```\n@vote = Vote.new candidate: candidate# ActiveRecord creates and executes your SQL and automatically# handles the opening and closing of the database connection.if @vote.save\u00a0 render json: \"Vote successfully cast for \\\"#{@vote.candidate}\\\" at #{@vote.time_cast} PST!\"else\u00a0 render json: @vote.errors, status: :unprocessable_entityend\n``` [  cloud_sql/postgres/pdo/src/Votes.php ](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/cloud_sql/postgres/pdo/src/Votes.php) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/cloud_sql/postgres/pdo/src/Votes.php) \n```\n// Use prepared statements to guard against SQL injection.$sql = 'INSERT INTO votes (time_cast, candidate) VALUES (NOW(), :voteValue)';try {\u00a0 \u00a0 $statement = $conn->prepare($sql);\u00a0 \u00a0 $statement->bindParam('voteValue', $value);\u00a0 \u00a0 $res = $statement->execute();} catch (PDOException $e) {\u00a0 \u00a0 throw new RuntimeException(\u00a0 \u00a0 \u00a0 \u00a0 'Could not insert vote into database. The PDO exception was ' .\u00a0 \u00a0 \u00a0 \u00a0 $e->getMessage(),\u00a0 \u00a0 \u00a0 \u00a0 $e->getCode(),\u00a0 \u00a0 \u00a0 \u00a0 $e\u00a0 \u00a0 );}\n```\n **\u6ce8\u610f** \uff1a\u5927\u591a\u6578 PHP \u61c9\u7528\u90fd\u4e0d\u662f\u9577\u6642\u9593\u904b\u884c\u7684\u61c9\u7528\u3002\u5b83\u5011\u5f9e\u8acb\u6c42\u8655\u7406\u958b\u59cb\u6642\u5553\u52d5\uff0c\u4e26\u5728\u8acb\u6c42\u8655\u7406\u7d50\u675f\u6642\u95dc\u505c\u3002\u6578\u64da\u5eab\u9023\u63a5\u5728\u61c9\u7528\u95dc\u505c\u6642\u95dc\u9589\u3002\n## \u9023\u63a5\u6578\n\u6bcf\u500b\u6578\u64da\u5eab\u9023\u63a5\u90fd\u6703\u4f7f\u7528\u5ba2\u6236\u7aef\u548c\u670d\u52d9\u5668\u7aef\u8cc7\u6e90\u3002\u6b64\u5916\uff0cCloud SQL \u5b58\u5728\u4e00\u500b\u4e0d\u80fd\u8d85\u51fa\u7684\u7e3d\u9023\u63a5\u6578\u91cf\u9650\u5236\u3002\u5275\u5efa\u548c\u4f7f\u7528\u7684\u9023\u63a5\u8d8a\u5c11\uff0c\u958b\u92b7\u5c31\u8d8a\u4f4e\uff0c\u9084\u6709\u52a9\u65bc\u78ba\u4fdd\u4e0d\u8d85\u904e\u9023\u63a5\u6578\u4e0a\u9650\u3002\n[  cloud-sql/postgres/sqlalchemy/connect_tcp.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_tcp.py) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_tcp.py) \n```\n# Pool size is the maximum number of permanent connections to keep.pool_size=5,# Temporarily exceeds the set pool_size if no connections are available.max_overflow=2,# The total number of concurrent connections for your application will be# a total of pool_size and max_overflow.\n``` [  cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectionPoolFactory.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectionPoolFactory.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectionPoolFactory.java) \n```\n// maximumPoolSize limits the total number of concurrent connections this pool will keep. Ideal// values for this setting are highly variable on app design, infrastructure, and database.config.setMaximumPoolSize(5);// minimumIdle is the minimum number of idle connections Hikari maintains in the pool.// Additional connections will be established to meet this value unless the pool is full.config.setMinimumIdle(5);\n``` [  cloud-sql/postgres/knex/index.js ](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/index.js) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/index.js) \n```\n// 'max' limits the total number of concurrent connections this pool will keep. Ideal// values for this setting are highly variable on app design, infrastructure, and database.config.pool.max = 5;// 'min' is the minimum number of idle connections Knex maintains in the pool.// Additional connections will be established to meet this value unless the pool is full.config.pool.min = 5;\n``` [  cloud-sql/postgres/Startup.cs ](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/Startup.cs) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/Startup.cs) \n```\n// MaxPoolSize sets maximum number of connections allowed in the pool.connectionString.MaxPoolSize = 5;// MinPoolSize sets the minimum number of connections in the pool.connectionString.MinPoolSize = 0;\n``` [  cloudsql/postgres/database-sql/cloudsql.go ](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/cloudsql.go) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/cloudsql.go) \n```\n// Set maximum number of connections in idle connection pool.db.SetMaxIdleConns(5)// Set maximum number of open connections to the database.db.SetMaxOpenConns(7)\n``` [  cloud-sql/postgres/activerecord/config/database_tcp.yml ](https://github.com/GoogleCloudPlatform/ruby-docs-samples/blob/HEAD/cloud-sql/postgres/activerecord/config/database_tcp.yml) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/ruby-docs-samples/blob/HEAD/cloud-sql/postgres/activerecord/config/database_tcp.yml) \n```\n# 'pool' is the maximum number of permanent connections to keep.pool: 5\n```\n [PDO](https://www.php.net/manual/en/book.pdo.php) \u76ee\u524d\u4e0d\u63d0\u4f9b\u4efb\u4f55\u529f\u80fd\u4f86\u914d\u7f6e\u9023\u63a5\u9650\u5236\u3002\n## \u6307\u6578\u9000\u907f\u7b97\u6cd5\n\u5982\u679c\u60a8\u7684\u61c9\u7528\u5617\u8a66\u9023\u63a5\u5230\u6578\u64da\u5eab\u4f46\u672a\u6210\u529f\uff0c\u5247\u8868\u793a\u6578\u64da\u5eab\u53ef\u80fd\u66ab\u6642\u4e0d\u53ef\u7528\u3002\u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u767c\u9001\u91cd\u8907\u7684\u9023\u63a5\u8acb\u6c42\u6703\u6d6a\u8cbb\u8cc7\u6e90\u3002\u6700\u597d\u7b49\u5f85\u4e00\u6bb5\u6642\u9593\u5f8c\u518d\u767c\u9001\u5176\u4ed6\u9023\u63a5\u8acb\u6c42\uff0c\u7559\u51fa\u6642\u9593\u8b93\u6578\u64da\u5eab\u518d\u6b21\u53ef\u4f9b\u8a2a\u554f\u3002\u4f7f\u7528\u6307\u6578\u9000\u907f\u7b97\u6cd5\u6216\u5176\u4ed6\u5ef6\u9072\u6a5f\u5236\u4f86\u5be6\u73fe\u6b64\u76ee\u6a19\u3002\n\u53ea\u6709\u5728\u9996\u6b21\u9023\u63a5\u6216\u9996\u6b21\u5f9e\u6c60\u4e2d\u7372\u53d6\u9023\u63a5\u6642\uff0c\u9019\u7a2e\u91cd\u8a66\u7e94\u6709\u610f\u7fa9\u3002\u5982\u679c\u932f\u8aa4\u767c\u751f\u5728\u4e8b\u52d9\u7684\u4e2d\u9593\uff0c \u61c9\u7528\u5fc5\u9808\u57f7\u884c\u91cd\u8a66\uff0c\u4e26\u4e14\u5fc5\u9808\u5f9e\u4e8b\u52d9\u7684\u958b\u59cb\u91cd\u8a66\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u60a8\u7684\u6c60\u914d\u7f6e\u6b63\u78ba\uff0c\u5982\u679c\u9023\u63a5\u4e1f\u5931\uff0c\u61c9\u7528\u4ecd\u53ef\u80fd\u6703\u9047\u5230\u932f\u8aa4\u3002\n[  cloud-sql/postgres/sqlalchemy/connect_tcp.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_tcp.py) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_tcp.py) \n```\n# SQLAlchemy automatically uses delays between failed connection attempts,# but provides no arguments for configuration.\n``` [  cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectionPoolFactory.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectionPoolFactory.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectionPoolFactory.java) \n```\n// Hikari automatically delays between failed connection attempts, eventually reaching a// maximum delay of `connectionTimeout / 2` between attempts.\n``` [  cloud-sql/postgres/knex/index.js ](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/index.js) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/index.js) \n```\n// 'knex' uses a built-in retry strategy which does not implement backoff.// 'createRetryIntervalMillis' is how long to idle after failed connection creation before trying againconfig.pool.createRetryIntervalMillis = 200; // 0.2 seconds\n``` [  cloud-sql/postgres/Startup.cs ](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/Startup.cs) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/Startup.cs) \n```\nPolicy\u00a0 \u00a0 .Handle<NpgsqlException>()\u00a0 \u00a0 .WaitAndRetry(new[]\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 TimeSpan.FromSeconds(1),\u00a0 \u00a0 \u00a0 \u00a0 TimeSpan.FromSeconds(2),\u00a0 \u00a0 \u00a0 \u00a0 TimeSpan.FromSeconds(5)\u00a0 \u00a0 })\u00a0 \u00a0 .Execute(() => connection.Open());\n```\n [database/sql](http://go-database-sql.org/) \u8edf\u4ef6\u5305\u76ee\u524d\u672a\u63d0\u4f9b\u4efb\u4f55\u7528\u65bc\u914d\u7f6e\u6307\u6578\u9000\u907f\u7b97\u6cd5\u7684\u529f\u80fd\u3002\n [  cloud-sql/postgres/activerecord/config/database_tcp.yml ](https://github.com/GoogleCloudPlatform/ruby-docs-samples/blob/HEAD/cloud-sql/postgres/activerecord/config/database_tcp.yml) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/ruby-docs-samples/blob/HEAD/cloud-sql/postgres/activerecord/config/database_tcp.yml) \n```\n# ActiveRecord automatically uses delays between failed connection attempts,# but provides no arguments for configuration.\n```\n [PDO](https://www.php.net/manual/en/book.pdo.php) \u76ee\u524d\u672a\u63d0\u4f9b\u4efb\u4f55\u7528\u65bc\u914d\u7f6e\u6307\u6578\u9000\u907f\u7b97\u6cd5\u7684\u529f\u80fd\u3002\n## \u9023\u63a5\u8d85\u6642\n\u5617\u8a66\u9023\u63a5\u6642\u5931\u6557\u7684\u539f\u56e0\u6709\u5f88\u591a\u3002\u53ef\u80fd\u662f\u7db2\u7d61\u901a\u4fe1\u51fa\u4e86\u554f\u984c\uff0c\u4e5f\u53ef\u80fd\u662f\u6578\u64da\u5eab\u66ab\u6642\u7121\u6cd5\u97ff\u61c9\u3002\u8acb\u78ba\u4fdd\u60a8\u7684\u61c9\u7528\u53ef\u4ee5\u6b63\u5e38\u8655\u7406\u9023\u63a5\u4e2d\u65b7\u6216\u9023\u63a5\u5931\u6557\u7684\u60c5\u6cc1\u3002\n[  cloud-sql/postgres/sqlalchemy/connect_tcp.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_tcp.py) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_tcp.py) \n```\n# 'pool_timeout' is the maximum number of seconds to wait when retrieving a# new connection from the pool. After the specified amount of time, an# exception will be thrown.pool_timeout=30, \u00a0# 30 seconds\n``` [  cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectionPoolFactory.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectionPoolFactory.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectionPoolFactory.java) \n```\n// setConnectionTimeout is the maximum number of milliseconds to wait for a connection checkout.// Any attempt to retrieve a connection from this pool that exceeds the set limit will throw an// SQLException.config.setConnectionTimeout(10000); // 10 seconds// idleTimeout is the maximum amount of time a connection can sit in the pool. Connections that// sit idle for this many milliseconds are retried if minimumIdle is exceeded.config.setIdleTimeout(600000); // 10 minutes\n``` [  cloud-sql/postgres/knex/index.js ](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/index.js) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/index.js) \n```\n// 'acquireTimeoutMillis' is the number of milliseconds before a timeout occurs when acquiring a// connection from the pool. This is slightly different from connectionTimeout, because acquiring// a pool connection does not always involve making a new connection, and may include multiple retries.// when making a connectionconfig.pool.acquireTimeoutMillis = 60000; // 60 seconds// 'createTimeoutMillis` is the maximum number of milliseconds to wait trying to establish an// initial connection before retrying.// After acquireTimeoutMillis has passed, a timeout exception will be thrown.config.pool.createTimeoutMillis = 30000; // 30 seconds// 'idleTimeoutMillis' is the number of milliseconds a connection must sit idle in the pool// and not be checked out before it is automatically closed.config.pool.idleTimeoutMillis = 600000; // 10 minutes\n``` [  cloud-sql/postgres/Startup.cs ](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/Startup.cs) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/Startup.cs) \n```\n// Timeout sets the time to wait (in seconds) while// trying to establish a connection before terminating the attempt.connectionString.Timeout = 15;\n```\n [database/sql](http://go-database-sql.org/) \u8edf\u4ef6\u5305\u76ee\u524d\u4e0d\u63d0\u4f9b\u4efb\u4f55\u7528\u4f86\u914d\u7f6e\u9023\u63a5\u8d85\u6642\u7684\u529f\u80fd\u3002\u5728\u9a45\u52d5\u7a0b\u5e8f\u7d1a\u5225\u914d\u7f6e\u8d85\u6642\u3002\n [  cloud-sql/postgres/activerecord/config/database_tcp.yml ](https://github.com/GoogleCloudPlatform/ruby-docs-samples/blob/HEAD/cloud-sql/postgres/activerecord/config/database_tcp.yml) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/ruby-docs-samples/blob/HEAD/cloud-sql/postgres/activerecord/config/database_tcp.yml) \n```\n# 'timeout' is the maximum number of seconds to wait when retrieving a# new connection from the pool. After the specified amount of time, an# ActiveRecord::ConnectionTimeoutError will be raised.timeout: 5000\n``` [  cloud_sql/postgres/pdo/src/DatabaseTcp.php ](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/cloud_sql/postgres/pdo/src/DatabaseTcp.php) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/cloud_sql/postgres/pdo/src/DatabaseTcp.php) \n```\n// Here we set the connection timeout to five seconds and ask PDO to// throw an exception if any errors occur.[\u00a0 \u00a0 PDO::ATTR_TIMEOUT => 5,\u00a0 \u00a0 PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,]\n```\n## \u9023\u63a5\u6642\u9577\n\u9650\u5236\u9023\u63a5\u7684\u751f\u547d\u9031\u671f\u9577\u5ea6\u6709\u52a9\u65bc\u9632\u6b62\u88ab\u62cb\u68c4\u7684\u9023\u63a5\u4e0d\u65b7\u7d2f\u52a0\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u9023\u63a5\u6c60\u4f86\u9650\u5236\u9023\u63a5\u7684\u751f\u547d\u9031\u671f\u3002\n[  cloud-sql/postgres/sqlalchemy/connect_tcp.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_tcp.py) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_tcp.py) \n```\n# 'pool_recycle' is the maximum number of seconds a connection can persist.# Connections that live longer than the specified amount of time will be# re-establishedpool_recycle=1800, \u00a0# 30 minutes\n``` [  cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectionPoolFactory.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectionPoolFactory.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectionPoolFactory.java) \n```\n// maxLifetime is the maximum possible lifetime of a connection in the pool. Connections that// live longer than this many milliseconds will be closed and reestablished between uses. This// value should be several minutes shorter than the database's timeout value to avoid unexpected// terminations.config.setMaxLifetime(1800000); // 30 minutes\n```\n\u201c [knex](https://github.com/knex/knex) \u201dNode.js \u5eab\u76ee\u524d\u672a\u63d0\u4f9b\u4efb\u4f55\u529f\u80fd\u4f86\u63a7\u5236\u9023\u63a5\u6642\u9577\u3002\n [  cloud-sql/postgres/Startup.cs ](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/Startup.cs) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/cloud-sql/postgres/Startup.cs) \n```\n// ConnectionIdleLifetime sets the time (in seconds) to wait before// closing idle connections in the pool if the count of all// connections exceeds MinPoolSize.connectionString.ConnectionIdleLifetime = 300;\n``` [  cloudsql/postgres/database-sql/cloudsql.go ](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/cloudsql.go) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/cloudsql.go) \n```\n// Set Maximum time (in seconds) that a connection can remain open.db.SetConnMaxLifetime(1800 * time.Second)\n```\n [ActiveRecord](https://github.com/rails/rails/tree/master/activerecord) \u76ee\u524d\u672a\u63d0\u4f9b\u4efb\u4f55\u529f\u80fd\u4f86\u63a7\u5236\u9023\u63a5\u6642\u9577\u3002\n [PDO](https://www.php.net/manual/en/book.pdo.php) \u76ee\u524d\u672a\u63d0\u4f9b\u4efb\u4f55\u529f\u80fd\u4f86\u63a7\u5236\u9023\u63a5\u6642\u9577\u3002\n## \u67e5\u770b\u5b8c\u6574\u61c9\u7528\n\u8981\u67e5\u770b\u5b8c\u6574\u61c9\u7528\uff0c\u8acb\u9ede\u64ca\u4e0b\u9762\u7684\u93c8\u63a5\u3002\n\u67e5\u770b Python \u7de8\u7a0b\u8a9e\u8a00\u7684 [\u5b8c\u6574\u61c9\u7528](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/master/cloud-sql/postgres/sqlalchemy/README.md) \u3002\n\u67e5\u770b Java \u7de8\u7a0b\u8a9e\u8a00\u7684 [\u5b8c\u6574\u61c9\u7528](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/cloud-sql/postgres/servlet) \u3002\n\u67e5\u770b Node.js \u7de8\u7a0b\u8a9e\u8a00\u7684 [\u5b8c\u6574\u61c9\u7528](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/master/cloud-sql/mysql/mysql/README.md) \u3002\n\u67e5\u770b C# \u7de8\u7a0b\u8a9e\u8a00\u7248\u672c\u7684 [\u5b8c\u6574\u61c9\u7528](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/master/cloud-sql/postgres/README.md) \u3002\n\u67e5\u770b Go \u7de8\u7a0b\u8a9e\u8a00\u7248\u672c\u7684 [\u5b8c\u6574\u61c9\u7528](https://github.com/GoogleCloudPlatform/golang-samples/blob/master/cloudsql/postgres/database-sql/README.md) \u3002\n\u67e5\u770b Ruby \u7de8\u7a0b\u8a9e\u8a00\u7248\u672c\u7684 [\u5b8c\u6574\u61c9\u7528](https://github.com/GoogleCloudPlatform/ruby-docs-samples/tree/master/cloud-sql/postgres/activerecord) \u3002\n\u67e5\u770b PHP \u7de8\u7a0b\u8a9e\u8a00\u7684 [\u5b8c\u6574\u61c9\u7528](https://github.com/GoogleCloudPlatform/php-docs-samples/tree/main/cloud_sql/postgres/pdo) \u3002\n## \u5f8c\u7e8c\u6b65\u9a5f\n- \u8a73\u7d30\u77ad\u89e3 [\u5c08\u7528 IP](https://cloud.google.com/sql/docs/postgres/private-ip?hl=zh-cn) \u3002\n- \u77ad\u89e3 Cloud SQL \u548c App Engine \u7684 [\u914d\u984d\u548c\u9650\u5236](https://cloud.google.com/sql/docs/postgres/quotas?hl=zh-cn) \u3002\n- \u77ad\u89e3\u4f7f\u7528 Cloud SQL \u7684 [\u6700\u4f73\u505a\u6cd5](https://cloud.google.com/sql/docs/postgres/best-practices?hl=zh-cn) \u3002\n- \u8a73\u7d30\u77ad\u89e3\u5982\u4f55 [\u5f9e\u5916\u90e8\u61c9\u7528\u5efa\u7acb\u9023\u63a5](https://cloud.google.com/sql/docs/postgres/connect-external-app?hl=zh-cn) \u3002", "guide": "Cloud SQL"}