{"title": "Cloud SQL - \u5ba2\u6236\u7aef\u52a0\u5bc6\u529f\u80fd\u7c21\u4ecb", "url": "https://cloud.google.com/sql/docs/postgres/client-side-encryption?hl=zh-cn", "abstract": "# Cloud SQL - \u5ba2\u6236\u7aef\u52a0\u5bc6\u529f\u80fd\u7c21\u4ecb\n\u672c\u9801\u9762\u4ecb\u7d39\u5982\u4f55\u5728 Cloud SQL \u4e0a\u57f7\u884c\u5ba2\u6236\u7aef\u52a0\u5bc6\u529f\u80fd\u3002\n", "content": "## \u6982\u89bd\n\u5ba2\u6236\u7aef\u52a0\u5bc6\u529f\u80fd\u662f\u5728\u5c07\u6578\u64da\u5beb\u5165 Cloud SQL \u4e4b\u524d\u52a0\u5bc6\u6578\u64da\u7684\u884c\u7232\u3002\u60a8\u53ef\u4ee5\u4ee5\u53ea\u6709\u61c9\u7528\u80fd\u89e3\u5bc6\u7684\u65b9\u5f0f\u52a0\u5bc6 Cloud SQL \u6578\u64da\u3002\n\u5982\u9700\u5553\u7528\u5ba2\u6236\u7aef\u52a0\u5bc6\u529f\u80fd\uff0c\u60a8\u6709\u4ee5\u4e0b\u9078\u64c7\uff1a\n- \u4f7f\u7528\u5b58\u5132\u5728 Cloud Key Management Service (Cloud KMS) \u4e2d\u7684\u52a0\u5bc6\u5bc6\u9470\u3002\n- \u4f7f\u7528\u5728\u61c9\u7528\u4e2d\u672c\u5730\u5b58\u5132\u7684\u52a0\u5bc6\u5bc6\u9470\u3002\n\u5728\u672c\u4e3b\u984c\u4e2d\uff0c\u6211\u5011\u5c07\u4ecb\u7d39\u5982\u4f55\u4f7f\u7528\u7b2c\u4e00\u500b\u9078\u9805\uff0c\u9019\u7a2e\u65b9\u5f0f\u63d0\u4f9b\u6700\u7121\u7e2b\u7684\u5bc6\u9470\u7ba1\u7406\u9078\u9805\u3002\u6211\u5011\u5728 Cloud KMS \u4e2d\u5275\u5efa\u52a0\u5bc6\u9375\uff0c\u4e26\u4f7f\u7528 Google \u7684\u958b\u6e90\u52a0\u5bc6\u5eab [Tink](https://github.com/google/tink) \u5be6\u73fe [\u4fe1\u5c01\u52a0\u5bc6](https://cloud.google.com/kms/docs/envelope-encryption?hl=zh-cn) \u3002\n### \u7232\u4ec0\u9ebc\u9700\u8981\u5ba2\u6236\u7aef\u52a0\u5bc6\uff1f\n\u5982\u679c\u60a8\u8981\u4fdd\u8b77\u5217\u7d1a\u5225 \u4e2d\u7684 Cloud SQL \u6578\u64da\uff0c\u5247\u9700\u8981\u5ba2\u6236\u7aef\u52a0\u5bc6\u3002\u5047\u8a2d\u60a8\u6709\u4e00\u500b\u5305\u542b\u59d3\u540d\u548c\u4fe1\u7528\u5361\u865f\u7684\u8868\u3002\u60a8\u5e0c\u671b\u6388\u4e88\u7528\u6236\u5c0d\u8a72\u8868\u7684\u8a2a\u554f\u6b0a\u9650\uff0c\u4f46\u53c8\u4e0d\u5e0c\u671b\u4ed6\u5011\u67e5\u770b\u4fe1\u7528\u5361\u865f\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u5ba2\u6236\u7aef\u52a0\u5bc6\u4f86\u52a0\u5bc6\u5361\u865f\u3002\u53ea\u8981\u7528\u6236\u672a\u88ab\u6388\u4e88\u5c0d Cloud KMS \u4e2d\u52a0\u5bc6\u5bc6\u9470\u7684\u8a2a\u554f\u6b0a\u9650\uff0c\u5176\u4fbf\u7121\u6cd5\u8b80\u53d6\u4fe1\u7528\u5361\u4fe1\u606f\u3002\n### \u4f7f\u7528 Cloud KMS \u5275\u5efa\u5bc6\u9470\n\u85c9\u52a9 Cloud KMS\uff0c\u60a8\u53ef\u4ee5\u5728 Google Cloud Platform \u4e0a\u5275\u5efa\u548c\u7ba1\u7406\u5bc6\u9470\u3002\nCloud KMS \u652f\u6301\u8a31\u591a\u4e0d\u540c\u7684\u5bc6\u9470\u985e\u578b\u3002\u5c0d\u65bc\u5ba2\u6236\u7aef\u52a0\u5bc6\uff0c\u60a8\u9700\u8981\u5275\u5efa [\u5c0d\u7a31\u5bc6\u9470](https://cloud.google.com/kms/docs/creating-keys?hl=zh-cn) \u3002\n\u5982\u9700\u5411\u60a8\u7684\u61c9\u7528\u6388\u4e88\u5c0d Cloud KMS \u4e2d\u9375\u7684\u8a2a\u554f\u6b0a\u9650\uff0c\u60a8\u9700\u8981\u56ae\u61c9\u7528\u4f7f\u7528\u7684\u670d\u52d9\u8cec\u865f\u6388\u4e88 `cloudkms.cryptoKeyEncrypterDecrypter` \u89d2\u8272\u3002\u5728 gcloud \u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u57f7\u884c\u6b64\u64cd\u4f5c\uff1a\n```\ngcloud kms keys add-iam-policy-binding key \\--keyring=key-ring \\--location=location \\--member=serviceAccount:service-account-name@example.domain.com \\--role=roles/cloudkms.cryptoKeyEncrypterDecrypter\n```\n\u96d6\u7136\u60a8\u53ef\u4ee5\u4f7f\u7528 KMS \u5bc6\u9470\u76f4\u63a5 [\u52a0\u5bc6\u6578\u64da](https://cloud.google.com/kms/docs/encrypt-decrypt?hl=zh-cn) \uff0c\u4f46\u6211\u5011\u5728\u6b64\u8655\u4f7f\u7528\u66f4\u7232\u9748\u6d3b\u7684\u89e3\u6c7a\u65b9\u6848\u2014\u4fe1\u5c01\u52a0\u5bc6\u3002 \u85c9\u52a9\u6b64\u65b9\u6848\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u52a0\u5bc6\u9577\u5ea6\u8d85\u904e 64KB \u7684\u6d88\u606f\uff0c\u9019\u662f Cloud Key Management Service API \u53ef\u4ee5\u652f\u6301\u7684\u6700\u5927\u6d88\u606f\u5927\u5c0f\u3002\n### Cloud KMS \u4fe1\u5c01\u52a0\u5bc6\n\u5728\u4fe1\u5c01\u52a0\u5bc6\u4e2d\uff0cKMS \u5bc6\u9470\u5145\u7576\u5bc6\u9470\u52a0\u5bc6\u5bc6\u9470 (KEK)\u3002\u4e5f\u5c31\u662f\u8aaa\uff0c\u8a72\u52a0\u5bc6\u5bc6\u9470\u53ef\u7528\u65bc\u52a0\u5bc6\u6578\u64da\u52a0\u5bc6\u5bc6\u9470 (DEK)\uff0c\u800c DEK \u5247\u53ef\u7528\u65bc\u52a0\u5bc6\u5be6\u969b\u6578\u64da\u3002\n\u5728 Cloud KMS \u4e2d\u5275\u5efa KEK \u4e4b\u5f8c\uff0c\u5982\u8981\u5c0d\u6bcf\u689d\u6d88\u606f\u9032\u884c\u52a0\u5bc6\uff0c\u60a8\u9700\u8981\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n- \u5728\u672c\u5730\u751f\u6210\u6578\u64da\u52a0\u5bc6\u5bc6\u9470 (DEK)\u3002\n- \u5728\u672c\u5730\u4f7f\u7528\u6b64 DEK \u5c0d\u6d88\u606f\u9032\u884c\u52a0\u5bc6\u3002\n- \u8abf\u7528 Cloud KMS \u4f7f\u7528 KEK \u52a0\u5bc6\uff08\u5c01\u88dd\uff09DEK\u3002\n- \u5b58\u5132\u52a0\u5bc6\u5f8c\u7684\u6578\u64da\u548c\u5c01\u88dd\u5f8c\u7684 DEK\u3002\n\u5728\u672c\u4e3b\u984c\u4e2d\uff0c\u6211\u5011\u4f7f\u7528 Tink\uff0c\u800c\u4e0d\u662f\u5f9e\u982d\u958b\u59cb\u5be6\u65bd\u4fe1\u5c01\u52a0\u5bc6\u3002\n### Tink\nTink \u662f\u4e00\u500b\u591a\u8a9e\u8a00\u7684\u8de8\u5e73\u81fa\u5eab\uff0c\u63d0\u4f9b\u9ad8\u7d1a\u52a0\u5bc6 API\u3002\u5982\u9700\u4f7f\u7528 Tink \u7684\u4fe1\u5c01\u52a0\u5bc6\u5c0d\u6578\u64da\u9032\u884c\u52a0\u5bc6\uff0c\u8acb\u7232 Tink \u63d0\u4f9b\u4e00\u500b\u6307\u5411 Cloud KMS \u4e2d\u7684 KEK \u7684\u5bc6\u9470 URI\uff0c\u4e26\u63d0\u4f9b\u5141\u8a31 Tink \u4f7f\u7528 KEK \u7684\u6191\u64da\u3002Tink \u751f\u6210 DEK\u3001\u52a0\u5bc6\u6578\u64da\u3001\u5c01\u88dd DEK\uff0c\u7136\u5f8c\u8fd4\u56de\u5305\u542b\u52a0\u5bc6\u6578\u64da\u548c\u5c01\u88dd DEK \u7684\u55ae\u500b\u5bc6\u6587\u3002\nTink \u652f\u6301\u5728 C++\u3001Java\u3001Go \u548c Python \u4e2d\u4f7f\u7528 AEAD API \u9032\u884c\u4fe1\u5c01\u52a0\u5bc6\uff1a\n```\npublic interface Aead{\u00a0 byte[] encrypt(final byte[] plaintext, final byte[] associatedData)\u00a0 throws\u2026\u00a0 byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)\u00a0 throws\u2026}\n```\n\u9664\u4e86\u666e\u901a\u7684\u6d88\u606f/\u5bc6\u6587\u53c3\u6578\uff0c\u52a0\u5bc6\u548c\u89e3\u5bc6\u65b9\u6cd5\u9084\u652f\u6301\u53ef\u9078\u95dc\u806f\u7684\u6578\u64da\u3002\u6b64\u53c3\u6578\u53ef\u7528\u65bc\u5c07\u5bc6\u6587\u8207\u90e8\u5206\u6578\u64da\u95dc\u806f\u3002\u4f8b\u5982\uff0c\u5047\u8a2d\u60a8\u6709\u4e00\u500b\u5305\u542b\u5b57\u6bb5 `user-id` \u548c\u5b57\u6bb5 `encrypted-medical-history` \u7684\u6578\u64da\u5eab\u3002\u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u5728\u52a0\u5bc6\u91ab\u7642\u8a18\u9304\u6642\uff0c\u5b57\u6bb5 `user-id` \u53ef\u80fd\u6703\u7528\u4f5c\u95dc\u806f\u6578\u64da\u3002\u9019\u6a23\u53ef\u78ba\u4fdd\u653b\u64ca\u8005\u7121\u6cd5\u5c07\u4e00\u500b\u7528\u6236\u7684\u91ab\u7642\u8a18\u9304\u8f49\u79fb\u5230\u53e6\u4e00\u500b\u7528\u6236\u3002\u5b83\u9084\u7528\u65bc\u5728\u904b\u884c\u67e5\u8a62\u6642\u9a57\u8b49\u6578\u64da\u884c\u662f\u5426\u6b63\u78ba\u3002\n## \u793a\u4f8b\n\u5728\u672c\u90e8\u5206\u4e2d\uff0c\u6211\u5011\u5c07\u8a73\u7d30\u4ecb\u7d39\u4f7f\u7528\u5ba2\u6236\u7aef\u52a0\u5bc6\u7684\u9078\u7968\u4fe1\u606f\u6578\u64da\u5eab\u7684\u793a\u4f8b\u4ee3\u78bc\u3002\u8a72\u793a\u4f8b\u4ee3\u78bc\u6f14\u793a\u77ad\u5982\u4f55\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n- \u5275\u5efa\u6578\u64da\u5eab\u8868\u548c\u9023\u63a5\u6c60\n- \u8a2d\u7f6e Tink \u4ee5\u9032\u884c\u4fe1\u5c01\u52a0\u5bc6\n- \u4f7f\u7528 Tink \u7684\u4fe1\u5c01\u52a0\u5bc6\u548c Cloud KMS \u4e2d\u7684 KEK \u52a0\u5bc6\u548c\u89e3\u5bc6\u6578\u64da\n### \u6e96\u5099\u5de5\u4f5c\n- \u6309\u7167\u4ee5\u4e0b\u9019\u4e9b [\u8aaa\u660e](https://cloud.google.com/sql/docs/postgres/create-instance?hl=zh-cn) \u5275\u5efa Cloud SQL \u5be6\u4f8b\u3002\u8acb\u8a18\u4e0b\u60a8\u5275\u5efa\u7684\u9023\u63a5\u5b57\u7b26\u4e32\u3001\u6578\u64da\u5eab\u7528\u6236\u548c\u6578\u64da\u5eab\u5bc6\u78bc\u3002\n- \u6309\u7167\u9019\u4e9b [\u8aaa\u660e](https://cloud.google.com/sql/docs/postgres/create-manage-databases?hl=zh-cn) \u7232\u60a8\u7684\u61c9\u7528\u5275\u5efa\u6578\u64da\u5eab\u3002 \u8a18\u4e0b\u6578\u64da\u5eab\u540d\u7a31\u3002\n- \u6309\u7167\u9019\u4e9b [\u8aaa\u660e](https://cloud.google.com/kms/docs/creating-keys?hl=zh-cn) \u7232\u60a8\u7684\u61c9\u7528\u5275\u5efa KMS \u5bc6\u9470\u3002\u8907\u88fd\u5df2\u5275\u5efa\u9375\u7684\u8cc7\u6e90\u540d\u7a31\u3002\n- \u6309\u7167\u9019\u4e9b [\u8aaa\u660e](https://cloud.google.com/sql/docs/postgres/connect-external-app?hl=zh-cn#4_if_required_by_your_authentication_method_create_a_service_account) \u5275\u5efa\u5177\u6709\u201cCloud SQL Client\u201d\u6b0a\u9650\u7684\u670d\u52d9\u8cec\u865f\u3002\n- \u6309\u7167\u9019\u4e9b [\u8aaa\u660e](https://cloud.google.com/kms/docs/iam?hl=zh-cn) \uff0c\u5c07\u8a72\u9375\u7684\u201cCloud KMS CryptoKey Encrypter/Decrypter\u201d\u6b0a\u9650\u6dfb\u52a0\u5230\u60a8\u7684\u670d\u52d9\u8cec\u865f\u3002\n### \u5275\u5efa\u4e00\u500b\u9023\u63a5\u6c60\u4e26\u5728\u6578\u64da\u5eab\u4e2d\u5275\u5efa\u4e00\u500b\u65b0\u8868\u3002\n[  cloud-sql/postgres/client-side-encryption/src/main/java/cloudsql/tink/CloudSqlConnectionPool.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/src/main/java/cloudsql/tink/CloudSqlConnectionPool.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/src/main/java/cloudsql/tink/CloudSqlConnectionPool.java) \n```\nimport com.zaxxer.hikari.HikariConfig;import com.zaxxer.hikari.HikariDataSource;import java.security.GeneralSecurityException;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.SQLException;import javax.sql.DataSource;public class CloudSqlConnectionPool {\u00a0 public static DataSource createConnectionPool(String dbUser, String dbPass, String dbName,\u00a0 \u00a0 \u00a0 String instanceConnectionName) throws GeneralSecurityException {\u00a0 \u00a0 HikariConfig config = new HikariConfig();\u00a0 \u00a0 config.setJdbcUrl(String.format(\"jdbc:postgresql:///%s\", dbName));\u00a0 \u00a0 config.setUsername(dbUser); // e.g. \"root\", \"postgres\"\u00a0 \u00a0 config.setPassword(dbPass); // e.g. \"my-password\"\u00a0 \u00a0 config.addDataSourceProperty(\"socketFactory\", \"com.google.cloud.sql.postgres.SocketFactory\");\u00a0 \u00a0 config.addDataSourceProperty(\"cloudSqlInstance\", instanceConnectionName);\u00a0 \u00a0 DataSource pool = new HikariDataSource(config);\u00a0 \u00a0 return pool;\u00a0 }\u00a0 public static void createTable(DataSource pool, String tableName) throws SQLException {\u00a0 \u00a0 // Safely attempt to create the table schema.\u00a0 \u00a0 try (Connection conn = pool.getConnection()) {\u00a0 \u00a0 \u00a0 String stmt = String.format(\"CREATE TABLE IF NOT EXISTS %s ( \"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"vote_id SERIAL NOT NULL, time_cast timestamp NOT NULL, team CHAR(6) NOT NULL,\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"voter_email BYTEA, PRIMARY KEY (vote_id) );\", tableName);\u00a0 \u00a0 \u00a0 try (PreparedStatement createTableStatement = conn.prepareStatement(stmt);) {\u00a0 \u00a0 \u00a0 \u00a0 createTableStatement.execute();\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n``` [  cloud-sql/postgres/client-side-encryption/snippets/cloud_sql_connection_pool.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/snippets/cloud_sql_connection_pool.py) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/snippets/cloud_sql_connection_pool.py) \n```\nimport sqlalchemydef init_tcp_connection_engine(\u00a0 \u00a0 db_user: str, db_pass: str, db_name: str, db_host: str) -> sqlalchemy.engine.base.Engine:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Creates a connection to the database using tcp socket.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # Remember - storing secrets in plaintext is potentially unsafe. Consider using\u00a0 \u00a0 # something like https://cloud.google.com/secret-manager/docs/overview to help keep\u00a0 \u00a0 # secrets secret.\u00a0 \u00a0 # Extract host and port from db_host\u00a0 \u00a0 host_args = db_host.split(\":\")\u00a0 \u00a0 db_hostname, db_port = host_args[0], int(host_args[1])\u00a0 \u00a0 pool = sqlalchemy.create_engine(\u00a0 \u00a0 \u00a0 \u00a0 # Equivalent URL:\u00a0 \u00a0 \u00a0 \u00a0 # postgresql+pg8000://<db_user>:<db_pass>@<db_host>:<db_port>/<db_name>\u00a0 \u00a0 \u00a0 \u00a0 sqlalchemy.engine.url.URL.create(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 drivername=\"postgresql+pg8000\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 username=db_user, \u00a0# e.g. \"my-database-user\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 password=db_pass, \u00a0# e.g. \"my-database-password\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 host=db_hostname, \u00a0# e.g. \"127.0.0.1\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port=db_port, \u00a0# e.g. 5432\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 database=db_name, \u00a0# e.g. \"my-database-name\"\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 )\u00a0 \u00a0 print(\"Created TCP connection pool\")\u00a0 \u00a0 return pooldef init_unix_connection_engine(\u00a0 \u00a0 db_user: str,\u00a0 \u00a0 db_pass: str,\u00a0 \u00a0 db_name: str,\u00a0 \u00a0 instance_connection_name: str,\u00a0 \u00a0 db_socket_dir: str,) -> sqlalchemy.engine.base.Engine:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Creates a connection to the database using unix socket.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # Remember - storing secrets in plaintext is potentially unsafe. Consider using\u00a0 \u00a0 # something like https://cloud.google.com/secret-manager/docs/overview to help keep\u00a0 \u00a0 # secrets secret.\u00a0 \u00a0 pool = sqlalchemy.create_engine(\u00a0 \u00a0 \u00a0 \u00a0 # Equivalent URL:\u00a0 \u00a0 \u00a0 \u00a0 # mpostgresql+pg8000://<db_user>:<db_pass>@/<db_name>?unix_socket=<socket_path>/<cloud_sql_instance_name>\u00a0 \u00a0 \u00a0 \u00a0 sqlalchemy.engine.url.URL.create(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 drivername=\"postgresql+pg8000\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 username=db_user, \u00a0# e.g. \"my-database-user\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 password=db_pass, \u00a0# e.g. \"my-database-password\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 database=db_name, \u00a0# e.g. \"my-database-name\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 query={\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"unix_sock\": \"{}/{}/.s.PGSQL.5432\".format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 db_socket_dir, instance_connection_name \u00a0# e.g. \"/cloudsql\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ) \u00a0# i.e \"<PROJECT-NAME>:<INSTANCE-REGION>:<INSTANCE-NAME>\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 )\u00a0 \u00a0 print(\"Created Unix socket connection pool\")\u00a0 \u00a0 return pooldef init_db(\u00a0 \u00a0 db_user: str,\u00a0 \u00a0 db_pass: str,\u00a0 \u00a0 db_name: str,\u00a0 \u00a0 table_name: str,\u00a0 \u00a0 instance_connection_name: str = None,\u00a0 \u00a0 db_socket_dir: str = None,\u00a0 \u00a0 db_host: str = None,) -> sqlalchemy.engine.base.Engine:\u00a0 \u00a0 \"\"\"Starts a connection to the database and creates voting table if it doesn't exist.\"\"\"\u00a0 \u00a0 if db_host:\u00a0 \u00a0 \u00a0 \u00a0 db = init_tcp_connection_engine(db_user, db_pass, db_name, db_host)\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 db = init_unix_connection_engine(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 db_user, db_pass, db_name, instance_connection_name, db_socket_dir\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 # Create tables (if they don't already exist)\u00a0 \u00a0 with db.connect() as conn:\u00a0 \u00a0 \u00a0 \u00a0 conn.execute(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 f\"CREATE TABLE IF NOT EXISTS {table_name} \"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"( vote_id SERIAL NOT NULL, time_cast timestamp NOT NULL, \"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"team VARCHAR(6) NOT NULL, voter_email BYTEA, \"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"PRIMARY KEY (vote_id) );\"\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 print(f\"Created table {table_name} in db {db_name}\")\u00a0 \u00a0 return db\n```### \u4f7f\u7528 Tink \u521d\u59cb\u5316\u4fe1\u5305 AEAD \u57fa\u5143\u3002\n[  cloud-sql/postgres/client-side-encryption/src/main/java/cloudsql/tink/CloudKmsEnvelopeAead.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/src/main/java/cloudsql/tink/CloudKmsEnvelopeAead.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/src/main/java/cloudsql/tink/CloudKmsEnvelopeAead.java) \n```\nimport com.google.crypto.tink.Aead;import com.google.crypto.tink.KmsClient;import com.google.crypto.tink.aead.AeadConfig;import com.google.crypto.tink.aead.AeadKeyTemplates;import com.google.crypto.tink.aead.KmsEnvelopeAead;import com.google.crypto.tink.integration.gcpkms.GcpKmsClient;import java.security.GeneralSecurityException;public class CloudKmsEnvelopeAead {\u00a0 public static Aead get(String kmsUri) throws GeneralSecurityException {\u00a0 \u00a0 AeadConfig.register();\u00a0 \u00a0 // Create a new KMS Client\u00a0 \u00a0 KmsClient client = new GcpKmsClient().withDefaultCredentials();\u00a0 \u00a0 // Create an AEAD primitive using the Cloud KMS key\u00a0 \u00a0 Aead gcpAead = client.getAead(kmsUri);\u00a0 \u00a0 // Create an envelope AEAD primitive.\u00a0 \u00a0 // This key should only be used for client-side encryption to ensure authenticity and integrity\u00a0 \u00a0 // of data.\u00a0 \u00a0 return new KmsEnvelopeAead(AeadKeyTemplates.AES128_GCM, gcpAead);\u00a0 }}\n``` [  cloud-sql/postgres/client-side-encryption/snippets/cloud_kms_env_aead.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/snippets/cloud_kms_env_aead.py) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/snippets/cloud_kms_env_aead.py) \n```\nimport loggingimport tinkfrom tink import aeadfrom tink.integration import gcpkmslogger = logging.getLogger(__name__)def init_tink_env_aead(key_uri: str, credentials: str) -> tink.aead.KmsEnvelopeAead:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Initiates the Envelope AEAD object using the KMS credentials.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 aead.register()\u00a0 \u00a0 try:\u00a0 \u00a0 \u00a0 \u00a0 gcp_client = gcpkms.GcpKmsClient(key_uri, credentials)\u00a0 \u00a0 \u00a0 \u00a0 gcp_aead = gcp_client.get_aead(key_uri)\u00a0 \u00a0 except tink.TinkError as e:\u00a0 \u00a0 \u00a0 \u00a0 logger.error(\"Error initializing GCP client: %s\", e)\u00a0 \u00a0 \u00a0 \u00a0 raise e\u00a0 \u00a0 # Create envelope AEAD primitive using AES256 GCM for encrypting the data\u00a0 \u00a0 # This key should only be used for client-side encryption to ensure authenticity and integrity\u00a0 \u00a0 # of data.\u00a0 \u00a0 key_template = aead.aead_key_templates.AES256_GCM\u00a0 \u00a0 env_aead = aead.KmsEnvelopeAead(key_template, gcp_aead)\u00a0 \u00a0 print(f\"Created envelope AEAD Primitive using KMS URI: {key_uri}\")\u00a0 \u00a0 return env_aead\n```### \u52a0\u5bc6\u6578\u64da\u4e26\u5c07\u5176\u63d2\u5165\u6578\u64da\u5eab\u3002\n[  cloud-sql/postgres/client-side-encryption/src/main/java/cloudsql/tink/EncryptAndInsertData.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/src/main/java/cloudsql/tink/EncryptAndInsertData.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/src/main/java/cloudsql/tink/EncryptAndInsertData.java) \n```\nimport com.google.crypto.tink.Aead;import java.security.GeneralSecurityException;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.SQLException;import java.sql.Timestamp;import java.util.Date;import javax.sql.DataSource;public class EncryptAndInsertData {\u00a0 public static void main(String[] args) throws GeneralSecurityException, SQLException {\u00a0 \u00a0 // Saving credentials in environment variables is convenient, but not secure - consider a more\u00a0 \u00a0 // secure solution such as Cloud Secret Manager to help keep secrets safe.\u00a0 \u00a0 String dbUser = System.getenv(\"DB_USER\"); // e.g. \"root\", \"postgres\"\u00a0 \u00a0 String dbPass = System.getenv(\"DB_PASS\"); // e.g. \"mysupersecretpassword\"\u00a0 \u00a0 String dbName = System.getenv(\"DB_NAME\"); // e.g. \"votes_db\"\u00a0 \u00a0 String instanceConnectionName =\u00a0 \u00a0 \u00a0 \u00a0 System.getenv(\"INSTANCE_CONNECTION_NAME\"); // e.g. \"project-name:region:instance-name\"\u00a0 \u00a0 String kmsUri = System.getenv(\"CLOUD_KMS_URI\"); // e.g. \"gcp-kms://projects/...path/to/key\u00a0 \u00a0 // Tink uses the \"gcp-kms://\" prefix for paths to keys stored in Google Cloud KMS. For more\u00a0 \u00a0 // info on creating a KMS key and getting its path, see\u00a0 \u00a0 // https://cloud.google.com/kms/docs/quickstart\u00a0 \u00a0 String team = \"TABS\";\u00a0 \u00a0 String tableName = \"votes\";\u00a0 \u00a0 String email = \"hello@example.com\";\u00a0 \u00a0 // Initialize database connection pool and create table if it does not exist\u00a0 \u00a0 // See CloudSqlConnectionPool.java for setup details\u00a0 \u00a0 DataSource pool =\u00a0 \u00a0 \u00a0 \u00a0 CloudSqlConnectionPool.createConnectionPool(dbUser, dbPass, dbName, instanceConnectionName);\u00a0 \u00a0 CloudSqlConnectionPool.createTable(pool, tableName);\u00a0 \u00a0 // Initialize envelope AEAD\u00a0 \u00a0 // See CloudKmsEnvelopeAead.java for setup details\u00a0 \u00a0 Aead envAead = CloudKmsEnvelopeAead.get(kmsUri);\u00a0 \u00a0 encryptAndInsertData(pool, envAead, tableName, team, email);\u00a0 }\u00a0 public static void encryptAndInsertData(\u00a0 \u00a0 \u00a0 DataSource pool, Aead envAead, String tableName, String team, String email)\u00a0 \u00a0 \u00a0 throws GeneralSecurityException, SQLException {\u00a0 \u00a0 try (Connection conn = pool.getConnection()) {\u00a0 \u00a0 \u00a0 String stmt =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"INSERT INTO %s (team, time_cast, voter_email) VALUES (?, ?, ?);\", tableName);\u00a0 \u00a0 \u00a0 try (PreparedStatement voteStmt = conn.prepareStatement(stmt); ) {\u00a0 \u00a0 \u00a0 \u00a0 voteStmt.setString(1, team);\u00a0 \u00a0 \u00a0 \u00a0 voteStmt.setTimestamp(2, new Timestamp(new Date().getTime()));\u00a0 \u00a0 \u00a0 \u00a0 // Use the envelope AEAD primitive to encrypt the email, using the team name as\u00a0 \u00a0 \u00a0 \u00a0 // associated data. This binds the encryption of the email to the team name, preventing\u00a0 \u00a0 \u00a0 \u00a0 // associating an encrypted email in one row with a team name in another row.\u00a0 \u00a0 \u00a0 \u00a0 byte[] encryptedEmail = envAead.encrypt(email.getBytes(), team.getBytes());\u00a0 \u00a0 \u00a0 \u00a0 voteStmt.setBytes(3, encryptedEmail);\u00a0 \u00a0 \u00a0 \u00a0 // Finally, execute the statement. If it fails, an error will be thrown.\u00a0 \u00a0 \u00a0 \u00a0 voteStmt.execute();\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(String.format(\"Successfully inserted row into table %s\", tableName));\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n``` [  cloud-sql/postgres/client-side-encryption/snippets/encrypt_and_insert_data.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/snippets/encrypt_and_insert_data.py) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/snippets/encrypt_and_insert_data.py) \n```\nimport datetimeimport loggingimport osimport sqlalchemyimport tinkfrom .cloud_kms_env_aead import init_tink_env_aeadfrom .cloud_sql_connection_pool import init_dblogger = logging.getLogger(__name__)def main() -> None:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Connects to the database, encrypts and inserts some data.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 db_user = os.environ[\"DB_USER\"] \u00a0# e.g. \"root\", \"postgres\"\u00a0 \u00a0 db_pass = os.environ[\"DB_PASS\"] \u00a0# e.g. \"mysupersecretpassword\"\u00a0 \u00a0 db_name = os.environ[\"DB_NAME\"] \u00a0# e.g. \"votes_db\"\u00a0 \u00a0 # Set if connecting using TCP:\u00a0 \u00a0 db_host = os.environ[\"DB_HOST\"] \u00a0# e.g. \"127.0.0.1\"\u00a0 \u00a0 # Set if connecting using Unix sockets:\u00a0 \u00a0 db_socket_dir = os.environ.get(\"DB_SOCKET_DIR\", \"/cloudsql\")\u00a0 \u00a0 instance_connection_name = os.environ[\"INSTANCE_CONNECTION_NAME\"]\u00a0 \u00a0 # e.g. \"project-name:region:instance-name\"\u00a0 \u00a0 credentials = os.environ.get(\"GOOGLE_APPLICATION_CREDENTIALS\", \"\")\u00a0 \u00a0 key_uri = \"gcp-kms://\" + os.environ[\"GCP_KMS_URI\"]\u00a0 \u00a0 # e.g. \"gcp-kms://projects/...path/to/key\u00a0 \u00a0 # Tink uses the \"gcp-kms://\" prefix for paths to keys stored in Google\u00a0 \u00a0 # Cloud KMS. For more info on creating a KMS key and getting its path, see\u00a0 \u00a0 # https://cloud.google.com/kms/docs/quickstart\u00a0 \u00a0 table_name = \"votes\"\u00a0 \u00a0 team = \"TABS\"\u00a0 \u00a0 email = \"hello@example.com\"\u00a0 \u00a0 env_aead = init_tink_env_aead(key_uri, credentials)\u00a0 \u00a0 db = init_db(\u00a0 \u00a0 \u00a0 \u00a0 db_user,\u00a0 \u00a0 \u00a0 \u00a0 db_pass,\u00a0 \u00a0 \u00a0 \u00a0 db_name,\u00a0 \u00a0 \u00a0 \u00a0 table_name,\u00a0 \u00a0 \u00a0 \u00a0 instance_connection_name,\u00a0 \u00a0 \u00a0 \u00a0 db_socket_dir,\u00a0 \u00a0 \u00a0 \u00a0 db_host,\u00a0 \u00a0 )\u00a0 \u00a0 encrypt_and_insert_data(db, env_aead, table_name, team, email)def encrypt_and_insert_data(\u00a0 \u00a0 db: sqlalchemy.engine.base.Engine,\u00a0 \u00a0 env_aead: tink.aead.KmsEnvelopeAead,\u00a0 \u00a0 table_name: str,\u00a0 \u00a0 team: str,\u00a0 \u00a0 email: str,) -> None:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Inserts a vote into the database with email address previously encrypted using\u00a0 \u00a0 a KmsEnvelopeAead object.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 time_cast = datetime.datetime.now(tz=datetime.timezone.utc)\u00a0 \u00a0 # Use the envelope AEAD primitive to encrypt the email, using the team name as\u00a0 \u00a0 # associated data. Encryption with associated data ensures authenticity\u00a0 \u00a0 # (who the sender is) and integrity (the data has not been tampered with) of that\u00a0 \u00a0 # data, but not its secrecy. (see RFC 5116 for more info)\u00a0 \u00a0 encrypted_email = env_aead.encrypt(email.encode(), team.encode())\u00a0 \u00a0 # Verify that the team is one of the allowed options\u00a0 \u00a0 if team != \"TABS\" and team != \"SPACES\":\u00a0 \u00a0 \u00a0 \u00a0 logger.error(f\"Invalid team specified: {team}\")\u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 # Preparing a statement before hand can help protect against injections.\u00a0 \u00a0 stmt = sqlalchemy.text(\u00a0 \u00a0 \u00a0 \u00a0 f\"INSERT INTO {table_name} (time_cast, team, voter_email)\"\u00a0 \u00a0 \u00a0 \u00a0 \" VALUES (:time_cast, :team, :voter_email)\"\u00a0 \u00a0 )\u00a0 \u00a0 # Using a with statement ensures that the connection is always released\u00a0 \u00a0 # back into the pool at the end of statement (even if an error occurs)\u00a0 \u00a0 with db.connect() as conn:\u00a0 \u00a0 \u00a0 \u00a0 conn.execute(stmt, time_cast=time_cast, team=team, voter_email=encrypted_email)\u00a0 \u00a0 print(f\"Vote successfully cast for '{team}' at time {time_cast}!\")\n```### \u67e5\u8a62\u6578\u64da\u5eab\u4e26\u89e3\u5bc6\u5b58\u5132\u7684\u6578\u64da\u3002\n[  cloud-sql/postgres/client-side-encryption/src/main/java/cloudsql/tink/QueryAndDecryptData.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/src/main/java/cloudsql/tink/QueryAndDecryptData.java) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/src/main/java/cloudsql/tink/QueryAndDecryptData.java) \n```\nimport com.google.crypto.tink.Aead;import java.security.GeneralSecurityException;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Timestamp;import javax.sql.DataSource;public class QueryAndDecryptData {\u00a0 public static void main(String[] args) throws GeneralSecurityException, SQLException {\u00a0 \u00a0 // Saving credentials in environment variables is convenient, but not secure - consider a more\u00a0 \u00a0 // secure solution such as Cloud Secret Manager to help keep secrets safe.\u00a0 \u00a0 String dbUser = System.getenv(\"DB_USER\"); // e.g. \"root\", \"postgres\"\u00a0 \u00a0 String dbPass = System.getenv(\"DB_PASS\"); // e.g. \"mysupersecretpassword\"\u00a0 \u00a0 String dbName = System.getenv(\"DB_NAME\"); // e.g. \"votes_db\"\u00a0 \u00a0 String instanceConnectionName =\u00a0 \u00a0 \u00a0 \u00a0 System.getenv(\"INSTANCE_CONNECTION_NAME\"); // e.g. \"project-name:region:instance-name\"\u00a0 \u00a0 String kmsUri = System.getenv(\"CLOUD_KMS_URI\"); // e.g. \"gcp-kms://projects/...path/to/key\u00a0 \u00a0 // Tink uses the \"gcp-kms://\" prefix for paths to keys stored in Google Cloud KMS. For more\u00a0 \u00a0 // info on creating a KMS key and getting its path, see\u00a0 \u00a0 // https://cloud.google.com/kms/docs/quickstart\u00a0 \u00a0 String tableName = \"votes123\";\u00a0 \u00a0 // Initialize database connection pool and create table if it does not exist\u00a0 \u00a0 // See CloudSqlConnectionPool.java for setup details\u00a0 \u00a0 DataSource pool =\u00a0 \u00a0 \u00a0 \u00a0 CloudSqlConnectionPool.createConnectionPool(dbUser, dbPass, dbName, instanceConnectionName);\u00a0 \u00a0 CloudSqlConnectionPool.createTable(pool, tableName);\u00a0 \u00a0 // Initialize envelope AEAD\u00a0 \u00a0 // See CloudKmsEnvelopeAead.java for setup details\u00a0 \u00a0 Aead envAead = CloudKmsEnvelopeAead.get(kmsUri);\u00a0 \u00a0 // Insert row into table to test\u00a0 \u00a0 // See EncryptAndInsert.java for setup details\u00a0 \u00a0 EncryptAndInsertData.encryptAndInsertData(\u00a0 \u00a0 \u00a0 \u00a0 pool, envAead, tableName, \"SPACES\", \"hello@example.com\");\u00a0 \u00a0 queryAndDecryptData(pool, envAead, tableName);\u00a0 }\u00a0 public static void queryAndDecryptData(DataSource pool, Aead envAead, String tableName)\u00a0 \u00a0 \u00a0 throws GeneralSecurityException, SQLException {\u00a0 \u00a0 try (Connection conn = pool.getConnection()) {\u00a0 \u00a0 \u00a0 String stmt =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"SELECT team, time_cast, voter_email FROM %s ORDER BY time_cast DESC LIMIT 5\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tableName);\u00a0 \u00a0 \u00a0 try (PreparedStatement voteStmt = conn.prepareStatement(stmt); ) {\u00a0 \u00a0 \u00a0 \u00a0 ResultSet voteResults = voteStmt.executeQuery();\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Team\\tTime Cast\\tEmail\");\u00a0 \u00a0 \u00a0 \u00a0 while (voteResults.next()) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String team = voteResults.getString(1);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Timestamp timeCast = voteResults.getTimestamp(2);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Postgres pads CHAR fields with spaces. These will need to be removed before\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // decrypting.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String aad = voteResults.getString(1).trim();\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Use the envelope AEAD primitive to encrypt the email, using the team name as\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // associated data. This binds the encryption of the email to the team name, preventing\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // associating an encrypted email in one row with a team name in another row.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 String email = new String(envAead.decrypt(voteResults.getBytes(3), aad.getBytes()));\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.println(String.format(\"%s\\t%s\\t%s\", team, timeCast, email));\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n``` [  cloud-sql/postgres/client-side-encryption/snippets/query_and_decrypt_data.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/snippets/query_and_decrypt_data.py) [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/client-side-encryption/snippets/query_and_decrypt_data.py) \n```\nimport osimport sqlalchemyimport tinkfrom .cloud_kms_env_aead import init_tink_env_aeadfrom .cloud_sql_connection_pool import init_dbfrom .encrypt_and_insert_data import encrypt_and_insert_datadef main() -> None:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Connects to the database, inserts encrypted data and retrieves encrypted data.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 db_user = os.environ[\"DB_USER\"] \u00a0# e.g. \"root\", \"postgres\"\u00a0 \u00a0 db_pass = os.environ[\"DB_PASS\"] \u00a0# e.g. \"mysupersecretpassword\"\u00a0 \u00a0 db_name = os.environ[\"DB_NAME\"] \u00a0# e.g. \"votes_db\"\u00a0 \u00a0 # Set if connecting using TCP:\u00a0 \u00a0 db_host = os.environ[\"DB_HOST\"] \u00a0# e.g. \"127.0.0.1\"\u00a0 \u00a0 # Set if connecting using Unix sockets:\u00a0 \u00a0 db_socket_dir = os.environ.get(\"DB_SOCKET_DIR\", \"/cloudsql\")\u00a0 \u00a0 instance_connection_name = os.environ[\"INSTANCE_CONNECTION_NAME\"]\u00a0 \u00a0 # e.g. \"project-name:region:instance-name\"\u00a0 \u00a0 credentials = os.environ.get(\"GOOGLE_APPLICATION_CREDENTIALS\", \"\")\u00a0 \u00a0 key_uri = \"gcp-kms://\" + os.environ[\"GCP_KMS_URI\"]\u00a0 \u00a0 # e.g. \"gcp-kms://projects/...path/to/key\u00a0 \u00a0 # Tink uses the \"gcp-kms://\" prefix for paths to keys stored in Google\u00a0 \u00a0 # Cloud KMS. For more info on creating a KMS key and getting its path, see\u00a0 \u00a0 # https://cloud.google.com/kms/docs/quickstart\u00a0 \u00a0 table_name = \"votes\"\u00a0 \u00a0 team = \"TABS\"\u00a0 \u00a0 email = \"hello@example.com\"\u00a0 \u00a0 env_aead = init_tink_env_aead(key_uri, credentials)\u00a0 \u00a0 db = init_db(\u00a0 \u00a0 \u00a0 \u00a0 db_user,\u00a0 \u00a0 \u00a0 \u00a0 db_pass,\u00a0 \u00a0 \u00a0 \u00a0 db_name,\u00a0 \u00a0 \u00a0 \u00a0 table_name,\u00a0 \u00a0 \u00a0 \u00a0 instance_connection_name,\u00a0 \u00a0 \u00a0 \u00a0 db_socket_dir,\u00a0 \u00a0 \u00a0 \u00a0 db_host,\u00a0 \u00a0 )\u00a0 \u00a0 encrypt_and_insert_data(db, env_aead, table_name, team, email)\u00a0 \u00a0 query_and_decrypt_data(db, env_aead, table_name)def query_and_decrypt_data(\u00a0 \u00a0 db: sqlalchemy.engine.base.Engine,\u00a0 \u00a0 env_aead: tink.aead.KmsEnvelopeAead,\u00a0 \u00a0 table_name: str,) -> list[tuple[str]]:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Retrieves data from the database and decrypts it using the KmsEnvelopeAead object.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 with db.connect() as conn:\u00a0 \u00a0 \u00a0 \u00a0 # Execute the query and fetch all results\u00a0 \u00a0 \u00a0 \u00a0 recent_votes = conn.execute(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 f\"SELECT team, time_cast, voter_email FROM {table_name} \"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"ORDER BY time_cast DESC LIMIT 5\"\u00a0 \u00a0 \u00a0 \u00a0 ).fetchall()\u00a0 \u00a0 \u00a0 \u00a0 print(\"Team\\tEmail\\tTime Cast\")\u00a0 \u00a0 \u00a0 \u00a0 output = []\u00a0 \u00a0 \u00a0 \u00a0 for row in recent_votes:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 team = row[0]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Postgres pads CHAR fields with spaces. These will need to be removed before\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # decrypting.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 aad = team.rstrip()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Use the envelope AEAD primitive to decrypt the email, using the team name as\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # associated data. Encryption with associated data ensures authenticity\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # (who the sender is) and integrity (the data has not been tampered with) of that\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # data, but not its secrecy. (see RFC 5116 for more info)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 email = env_aead.decrypt(row[2], aad.encode()).decode()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 time_cast = row[1]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Print recent votes\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(f\"{team}\\t{email}\\t{time_cast}\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 output.append((team, email, time_cast))\u00a0 \u00a0 return output\n```- \u60a8\u9084\u53ef\u4ee5\u5728 [\u5be6\u4f8b](https://cloud.google.com/sql/docs/postgres/instance-access-control?hl=zh-cn#instanceaccess) \u6216 [\u6578\u64da\u5eab](https://cloud.google.com/sql/docs/postgres/instance-access-control?hl=zh-cn#MySQLaccess) \u7d1a\u5c64\u9650\u5236\u8a2a\u554f\u6b0a\u9650\u3002 [\u21a9](#fnref1)", "guide": "Cloud SQL"}