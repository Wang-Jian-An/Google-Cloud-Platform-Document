{"title": "Cloud SQL - Connect to Cloud SQL for SQL Server from Google Kubernetes Engine", "url": "https://cloud.google.com/sql/docs/sqlserver/connect-instance-kubernetes", "abstract": "# Cloud SQL - Connect to Cloud SQL for SQL Server from Google Kubernetes Engine\n# Connect to Cloud SQL for SQL Server from Google Kubernetes Engine\nThis page shows you how to deploy a sample app on [Google Kubernetes Engine (GKE)](/kubernetes-engine/docs/concepts/kubernetes-engine-overview) connected to a SQL Server instance using the Google Cloud console and a client application. The resources created in this quickstart typically cost less than one dollar (USD), assuming you complete the steps, including the clean up, in a timely manner.", "content": "## Before you begin **Note:** The name you use for your project must be between 4 and 30 characters. When you type the name, the form suggests a project ID, which you can edit. The project ID must be between 6 and 30 characters, with a lowercase letter as the first character. You can use a dash, lowercase letter, or digit for the remaining characters, but the last character cannot be a dash.- Enable the Google Cloud APIs necessary to run a Cloud SQL sample app on GKE.\nClick **Enable APIs** to enable the APIs required for this quickstart.\n [Enable APIs](https://console.cloud.google.com/flows/enableapi?apiid=compute.googleapis.com,sqladmin.googleapis.com,container.googleapis.com,artifactregistry.googleapis.com,cloudbuild.googleapis.com) \nThis enables the following APIs:- Compute Engine API\n- Cloud SQL Admin API\n- Google Kubernetes Engine API\n- Artifact Registry API\n- Cloud Build API\nClick the following button to open Cloud Shell, which provides   command-line access to your Google Cloud resources directly from the browser.   Cloud Shell can be used to run the `gcloud` commands presented throughout this quickstart.\n [Open Cloud Shell](/console/sql/instances?cloudshell=true) \nRun the [gcloud services enable](/sdk/gcloud/reference/services/enable) command   as follows using Cloud Shell to enable the APIs required for this quickstart.:\n```\ngcloud services enable compute.googleapis.com sqladmin.googleapis.com \\\u00a0 \u00a0 \u00a0container.googleapis.com artifactregistry.googleapis.com cloudbuild.googleapis.com\n```\nThis command enables the following APIs:- Compute Engine API\n- Cloud SQL Admin API\n- GKE API\n- Artifact Registry API\n- Cloud Build API\n## Set up Cloud SQL\n### Create a Cloud SQL instance### Create a database- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- Select`quickstart-instance`.\n- From the SQL navigation menu, select **Databases** .\n- Click **Create database** .\n- In the **Database name** field of the **New database** dialog  box, enter`quickstart-db`.\n- Click **Create** .Run the [gcloud sql databases create](/sdk/gcloud/reference/sql/databases/create) command to create a database.\n```\ngcloud sql databases create quickstart-db --instance=quickstart-instance\n```\n## Create a GKE cluster- In the Google Cloud console, go to the **Google Kubernetes Engine** page. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes) \n- Click **Create** .\n- Click **Configure** for GKE Autopilot.\n- For **Name** , specify the cluster name as`gke-cloud-sql-quickstart`.\n- Click **Create** .\nRun the [gcloud container clusters create-auto](/sdk/gcloud/reference/container/clusters/create-auto) command to create the cluster.\n```\ngcloud container clusters create-auto gke-cloud-sql-quickstart \\\u00a0 \u00a0 --region us-central1\n```\n## Clone a Cloud SQL sample app into Cloud Shell EditorWith a Cloud SQL instance, a database, and a GKE cluster, you can now clone and configure a sample application to connect to your Cloud SQL instance. The remaining steps in this quickstart require using the `gcloud` and [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) command-line tools. Both tools are pre-installed in Cloud Shell.\n- In Cloud Shell Editor, open the sample app's source code. [Open Cloud Shell Editor](/console/cloudshell/open?git_repo=https://github.com/GoogleCloudPlatform/golang-samples&working_dir=cloudsql/sqlserver/database-sql) \n- In the`Open in Cloud Shell`dialog, click **Confirm** to   download the sample app code and open the sample app directory in Cloud Shell Editor.\n- In Cloud Shell Editor, open the sample app's source code. [Open Cloud Shell Editor](/console/cloudshell/open?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&working_dir=cloud-sql/sqlserver/servlet) \n- In the`Open in Cloud Shell`dialog, click **Confirm** to   download the sample app code and open the sample app directory in Cloud Shell Editor.\n- In Cloud Shell Editor, open the sample app's source code. [Open Cloud Shell Editor](/console/cloudshell/open?git_repo=https://github.com/GoogleCloudPlatform/nodejs-docs-samples&working_dir=cloud-sql/sqlserver/mssql) \n- In the`Open in Cloud Shell`dialog, click **Confirm** to   download the sample app code and open the sample app directory in Cloud Shell Editor.\n- In Cloud Shell Editor, open the sample app's source code. [Open Cloud Shell Editor](/console/cloudshell/open?git_repo=https://github.com/GoogleCloudPlatform/python-docs-samples&working_dir=cloud-sql/sql-server/sqlalchemy) \n- In the`Open in Cloud Shell`dialog, click **Confirm** to   download the sample app code and open the sample app directory in Cloud Shell Editor.\n## Enable the GKE clusterEnable the GKE cluster you just created as the default cluster to be used for the remaining commands in this quickstart.\nRun the\n [gcloud container clusters get-credentials](/sdk/gcloud/reference/container/clusters/get-credentials) \ncommand as follows to enable the GKE cluster.\n```\ngcloud container clusters get-credentials gke-cloud-sql-quickstart \\\u00a0 --region us-central1\n```\n## Set up a service account\nCreate and configure a Google Cloud service account to be used by GKE so that it has the **Cloud SQL Client** role with permissions to connect to Cloud SQL.- Run the [gcloud iam service-accounts create](/sdk/gcloud/reference/iam/service-accounts/create) command as follows to create a new service account:```\ngcloud iam service-accounts create gke-quickstart-service-account \\\u00a0 --display-name=\"GKE Quickstart Service Account\"\n```\n- Run the [gcloud projects add-iam-policy-binding](/sdk/gcloud/reference/projects/add-iam-policy-binding) command as follows to add the **Cloud SQL Client** role to the    Google Cloud service account you just created. Replacewith the project ID.```\ngcloud projects add-iam-policy-binding YOUR_PROJECT_ID \\\u00a0 --member=\"serviceAccount:gke-quickstart-service-account@YOUR_PROJECT_ID.iam.gserviceaccount.com\" \\\u00a0 --role=\"roles/cloudsql.client\"\n```\n- The sample app uses logging, so run the [gcloud projects add-iam-policy-binding](/sdk/gcloud/reference/projects/add-iam-policy-binding) command as follows to add the **Log Writer** role to the    Google Cloud service account you just created. Replacewith the project ID.```\ngcloud projects add-iam-policy-binding YOUR_PROJECT_ID \\\u00a0 --member=\"serviceAccount:gke-quickstart-service-account@YOUR_PROJECT_ID.iam.gserviceaccount.com\" \\\u00a0 --role=\"roles/logging.logWriter\"\n```\nCreate a Kubernetes service account configured to have access to Cloud SQL  by binding it to the Google Cloud service account using [Workload Identity](/kubernetes-engine/docs/how-to/workload-identity) .- Create a Kubernetes Service Account.- Update the [service-account.yaml](https://github.com/GoogleCloudPlatform/golang-samples/blob/main/cloudsql/sqlserver/database-sql/service-account.yaml) file in Cloud Shell Editor.    Replace`<YOUR-KSA-NAME>`with`ksa-cloud-sql`.\n- Run the [kubectl apply](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#apply) command as follows in Cloud Shell:```\nkubectl apply -f service-account.yaml\n```\n- Run the [gcloud iam service-accounts add-iam-policy-binding](/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) command as follows to enable IAM binding of the Google Cloud Service Account   and the Kubernetes Service Account. Make the following replacements:- with the project ID.\n- with`default`,    which is the default namespace for clusters created in GKE.\n- with`ksa-cloud-sql`.\n```\ngcloud iam service-accounts add-iam-policy-binding \\\u00a0 --role=\"roles/iam.workloadIdentityUser\" \\\u00a0 --member=\"serviceAccount:YOUR_PROJECT_ID.svc.id.goog[YOUR_K8S_NAMESPACE/YOUR_KSA_NAME]\" \\\u00a0 gke-quickstart-service-account@YOUR_PROJECT_ID.iam.gserviceaccount.com\n```\n- Run the [kubectl annotate](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#annotate) command as follows to annotate the Kubernetes Service Account with IAM binding. Make the following replacements:- with`ksa-cloud-sql`.\n- with the project ID.\n```\nkubectl annotate serviceaccount \\\u00a0 YOUR_KSA_NAME \u00a0\\\u00a0 iam.gke.io/gcp-service-account=gke-quickstart-service-account@YOUR_PROJECT_ID.iam.gserviceaccount.com\n```\n## Configure secrets\nRun the [kubectl create secret generic](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-em-secret-generic-em-) command as follows to create Kubernetes secrets for the database, user,  and user password to be used by the sample app. The values of each secret  are based on the values specified in the previous steps of this quickstart.  Replace with the password of the `sqlserver` root user that was created in the [Create a Cloud SQL instance](#create-instance) step.\n```\nkubectl create secret generic gke-cloud-sql-secrets \\\u00a0 --from-literal=database=quickstart-db \\\u00a0 --from-literal=username=sqlserver \\\u00a0 --from-literal=password=DB_PASS\n```\n## Build the sample app\n- Run the following [gcloud artifacts repositories create](/sdk/gcloud/reference/artifacts/repositories/create) command in Cloud Shell to create a repository in the Artifact Registry  namedin the same region as your cluster.  Replacewith the project ID.```\ngcloud artifacts repositories create gke-cloud-sql-repo \\\u00a0 --project=YOUR_PROJECT_ID \\\u00a0 --repository-format=docker \\\u00a0 --location=us-central1 \\\u00a0 --description=\"GKE Quickstart sample app\"\n```\n- Run the [gcloud builds submit](/sdk/gcloud/reference/builds/submit) command as follows in Cloud Shell to build a Docker container and publish it to Artifact Registry.   Replacewith the project ID.```\ngcloud builds submit \\\u00a0 --tag us-central1-docker.pkg.dev/YOUR_PROJECT_ID/gke-cloud-sql-repo/gke-sql .\n```\n- Run the following [gcloud artifacts repositories create](/sdk/gcloud/reference/artifacts/repositories/create) command in Cloud Shell to create a repository in the Artifact Registry  namedin the same region as your cluster.  Replacewith the project ID.```\ngcloud artifacts repositories create gke-cloud-sql-repo \\\u00a0 --project=YOUR_PROJECT_ID \\\u00a0 --repository-format=docker \\\u00a0 --location=us-central1 \\\u00a0 --description=\"GKE Quickstart sample app\"\n```\n- Run the`mvn`command as follows in Cloud Shell to build a Docker container and publish it to Artifact Registry.   Replacewith the project ID.```\nmvn clean package com.google.cloud.tools:jib-maven-plugin:2.8.0:build \\\u00a0 -Dimage=us-central1-docker.pkg.dev/YOUR_PROJECT_ID/gke-cloud-sql-repo/gke-sql \\\u00a0 -DskipTests -Djib.to.credHelper=gcloud\n```\n- Run the following [gcloud artifacts repositories create](/sdk/gcloud/reference/artifacts/repositories/create) command in Cloud Shell to create a repository in the Artifact Registry  namedin the same region as your cluster.  Replacewith the project ID.```\ngcloud artifacts repositories create gke-cloud-sql-repo \\\u00a0 --project=YOUR_PROJECT_ID \\\u00a0 --repository-format=docker \\\u00a0 --location=us-central1 \\\u00a0 --description=\"GKE Quickstart sample app\"\n```\n- Run the [gcloud builds submit](/sdk/gcloud/reference/builds/submit) command as follows in Cloud Shell to build a Docker container and publish it to Artifact Registry.   Replacewith the project ID.```\ngcloud builds submit \\\u00a0 --tag us-central1-docker.pkg.dev/YOUR_PROJECT_ID/gke-cloud-sql-repo/gke-sql .\n```\n- Run the following [gcloud artifacts repositories create](/sdk/gcloud/reference/artifacts/repositories/create) command in Cloud Shell to create a repository in the Artifact Registry  namedin the same region as your cluster.  Replacewith the project ID.```\ngcloud artifacts repositories create gke-cloud-sql-repo \\\u00a0 --project=YOUR_PROJECT_ID \\\u00a0 --repository-format=docker \\\u00a0 --location=us-central1 \\\u00a0 --description=\"GKE Quickstart sample app\"\n```\n- Run the [gcloud builds submit](/sdk/gcloud/reference/builds/submit) command as follows in Cloud Shell to build a Docker container and publish it to Artifact Registry.   Replacewith the project ID.```\ngcloud builds submit \\\u00a0 --tag us-central1-docker.pkg.dev/YOUR_PROJECT_ID/gke-cloud-sql-repo/gke-sql .\n```\n## Deploy the sample app## Clean upTo avoid incurring charges to your Google Cloud account for   the resources used on this page, follow these steps.- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- Select the`quickstart-instance`instance to open the **Instance details** page.\n- In the icon bar at the top of the page, click **Delete** .\n- In the **Delete instance** dialog box, type`quickstart-instance`, and then click **Delete** to delete the instance.\n- In the Google Cloud console, go to the **Google Kubernetes Engine** page. [Go to Google Kubernetes Engine](https://console.cloud.google.com/kubernetes) \n- Click the checkbox next to the`gke-cloud-sql-quickstart`service name.\n- Click the **Delete** button at the top of the Google Kubernetes Engine page.\n### Optional cleanup stepsIf you're not using the Google Cloud service account you created for this quickstart, you can remove it.- In the Google Cloud console, go to the **IAM** page. [Go to IAM](https://console.cloud.google.com/iam-admin/iam) \n- Select the checkbox for the IAM account named`gke-quickstart-service-account`.\n- Click **Remove** and confirm the removal.\nIf you're not using the APIs that were enabled as part of this quickstart, you can disable them.- APIs that were enabled within this quickstart:- Compute Engine API\n- Cloud SQL Admin API\n- Google Kubernetes Engine API\n- Artifact Registry API\n- Cloud Build API- In the Google Cloud console, go to the **APIs** page. [Go to APIs](https://console.cloud.google.com/apis) \n- Select any API that you would like to disable and then click the **Disable API** button.\n## What's next\nBased on your needs, you can learn more about\n [creating Cloud SQL instances](/sql/docs/sqlserver/create-instance) \n.\nYou also can learn about creating [SQL Server users](/sql/docs/sqlserver/create-manage-users) and [databases](/sql/docs/sqlserver/create-manage-databases) for your Cloud SQL instance.\nAlso see the [Cloud SQL pricing information](/sql/docs/sqlserver/pricing) .\nLearn more about:- All of the [connectivity options](/sql/docs/sqlserver/connect-overview#connection_options) in Cloud SQL.\n- Configuring your Cloud SQL instance with a [public IP](/sql/docs/sqlserver/configure-ip) address.\n- Configuring your Cloud SQL instance with a [private IP](/sql/docs/sqlserver/configure-private-ip) address.\nAdditionally, you can learn about connecting to a Cloud SQL instance from other Google Cloud applications:- [From an application running on App Engine standard environment](/sql/docs/sqlserver/connect-app-engine) \n- [From an application running on Compute Engine](/sql/docs/sqlserver/connect-compute-engine) \n- [From an application running on GKE](/sql/docs/sqlserver/connect-kubernetes-engine) \n- [From Cloud Functions](/sql/docs/sqlserver/connect-functions) \n- [From Cloud Run](/sql/docs/sqlserver/connect-run)", "guide": "Cloud SQL"}