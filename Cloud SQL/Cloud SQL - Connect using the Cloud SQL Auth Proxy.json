{"title": "Cloud SQL - Connect using the Cloud SQL Auth Proxy", "url": "https://cloud.google.com/sql/docs/postgres/connect-auth-proxy", "abstract": "# Cloud SQL - Connect using the Cloud SQL Auth Proxy\nThis page describes how to connect to your Cloud SQL instance using the Cloud SQL Auth Proxy.\nFor more information about how the Cloud SQL Auth Proxy works, see [About the Cloud SQL Auth Proxy](/sql/docs/postgres/sql-proxy) .\n", "content": "## Overview\nUsing the [Cloud SQL Auth Proxy](/sql/docs/postgres/sql-proxy) is the recommended method for connecting to a Cloud SQL instance. The Cloud SQL Auth Proxy:\n- Works with both public and private IP endpoints\n- Validates connections using credentials for a user or service account\n- Wraps the connection in a SSL/TLS layer that's authorized for a Cloud SQL instance\nSome Google Cloud services and applications use the Cloud SQL Auth Proxy to provide connections for public IP paths with encryption and authorization, including:\n- [App Engine standard environment](/sql/docs/postgres/connect-app-engine-standard) \n- [App Engine flexible environment](/sql/docs/postgres/connect-app-engine-flexible) \n- [Cloud Functions](/sql/docs/postgres/connect-functions) \n- [Cloud Run](/sql/docs/postgres/connect-run) Applications running in [Google Kubernetes Engine](/sql/docs/postgres/connect-kubernetes-engine#proxy) can connect using the Cloud SQL Auth Proxy.\n**Note:** For connecting from Google Kubernetes Engine, we recommend running the Cloud SQL Auth Proxy in a `sidecar` pattern, as an [additional container](/sql/docs/postgres/connect-kubernetes-engine#run_the_as_a_sidecar) that shares a pod with your application. Also see the related [quickstart](/sql/docs/postgres/connect-instance-kubernetes) .\nSee the [Quickstart for usingthe Cloud SQL Auth Proxy](/sql/docs/mysql/connect-instance-auth-proxy) for a basic introduction to its usage.\nYou can also connect, with or without the Cloud SQL Auth Proxy, using a psql client [from a local machine or Compute Engine](/sql/docs/postgres/connect-admin-ip) .\n## Before you begin\nBefore you can connect to a Cloud SQL instance, do the following:- For a user or service account, make sure the account has the  Cloud SQL Client role. This role contains the`cloudsql.instances.connect`permission,  which authorizes a principal to connect to all Cloud SQL instances  in a project. [  Go to the IAM page](https://console.cloud.google.com/iam-admin/iam) \n- You can optionally include an [IAM condition](/sql/docs/mysql/project-access-control#allow_users_to_connect_to_specific_instances) in the IAM policy binding that grants the account permission  to connect only to one specific Cloud SQL instance.- Enable the Cloud SQL Admin API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=sqladmin) \n- Install and initialize the [gcloud CLI](/sdk/docs/install) .\n- Optional. Install the [Cloud SQL Auth Proxy Docker client](#connecting-docker) .## Download the Cloud SQL Auth Proxy\n- Download the Cloud SQL Auth Proxy:```\ncurl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.linux.amd64\n```\n- Make the Cloud SQL Auth Proxy executable:```\nchmod +x cloud-sql-proxy\n```\n- Download the Cloud SQL Auth Proxy:```\ncurl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.linux.386\n```\n- If the`curl`command is not found, run`sudo apt install curl`and repeat the download command.\n- Make the Cloud SQL Auth Proxy executable:```\nchmod +x cloud-sql-proxy\n```\n- Download the Cloud SQL Auth Proxy:```\ncurl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.darwin.amd64\n```\n- Make the Cloud SQL Auth Proxy executable:```\nchmod +x cloud-sql-proxy\n```\n- Download the Cloud SQL Auth Proxy:```\n\u00a0 curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.darwin.arm64\u00a0 \n```\n- Make the Cloud SQL Auth Proxy executable:```\n\u00a0 chmod +x cloud-sql-proxy\u00a0 \n```Right-click\n [https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.x64.exe](https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.x64.exe) \nand select\n **Save Link As** \nto download the Cloud SQL Auth Proxy. Rename the file to\n`cloud-sql-proxy.exe`\n.\nRight-click\n [https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.x86.exe](https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.x86.exe) \nand select\n **Save Link As** \nto download the Cloud SQL Auth Proxy. Rename the file to\n`cloud-sql-proxy.exe`\n.\nThe Cloud SQL Auth Proxy has different container images, such as `distroless` , `alpine` , and `buster` . The default Cloud SQL Auth Proxy container image uses [distroless](https://github.com/GoogleContainerTools/distroless) , which contains no shell. If you need a shell or related tools, then download an image based on `alpine` or `buster` . For more information, see [Cloud SQL Auth Proxy Container Images](https://github.com/GoogleCloudPlatform/cloudsql-proxy#container-images) .\nYou can pull the latest image to your local machine using Docker by using the following command:\n```\ndocker pull gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.10.1\n```\n **Note** : The Cloud SQL Auth Proxy uses a repository that supports the`gcr.io`domain but serves images from Artifact Registry. For more information, see [Transition from Container Registry](/artifact-registry/docs/transition/transition-from-gcr) .\nFor other operating systems not included here, you can\n [compile the Cloud SQL Auth Proxy from source](http://github.com/GoogleCloudPlatform/cloudsql-proxy) \n.\n## Start the Cloud SQL Auth Proxy\nDepending on your language and environment, you can start the Cloud SQL Auth Proxy using TCP sockets, Unix sockets, or the Cloud SQL Auth Proxy Docker image. The Cloud SQL Auth Proxy binary connects to one or more Cloud SQL instances specified on the command line, and opens a local connection as either TCP or a Unix socket. Other applications and services, such as your application code or database management client tools, can connect to Cloud SQL instances through those TCP or Unix socket connections.\n**Warning:** Be careful when binding the Cloud SQL Auth Proxy to an external interface. Anyone with access to that interface/port will be authorized to connect to your instance.\nFor TCP connections, the Cloud SQL Auth Proxy listens on `localhost` ( `127.0.0.1` ) by default. So, when you specify `--port PORT_NUMBER` for an instance, the local connection is at `127.0.0.1:PORT_NUMBER` .\nAlternatively, you can specify a different address for the local connection. For example, here's how to make the Cloud SQL Auth Proxy listen at `0.0.0.0:1234` for the local connection:\n```\n./cloud-sql-proxy --address 0.0.0.0 --port 1234 INSTANCE_CONNECTION_NAME\n```- Copy your . This can be found on the **Overview** page for your instance in the [Google Cloud console](https://console.cloud.google.com/sql) . or by running the following command:```\n\u00a0 \u00a0 gcloud sql instances describe INSTANCE_NAME --format='value(connectionName)'\n```.For example: .\n- If the instance has both public and private IP configured, and you want the  Cloud SQL Auth Proxy to use the [private IP](/sql/docs/postgres/configure-private-ip) address,  you must provide the following option when you start the Cloud SQL Auth Proxy:```\n--private-ip\n```\n- If you are using a service account to authenticate the Cloud SQL Auth Proxy, note the location on your client machine of the private key file that was created when you created the service account.\n- Start the Cloud SQL Auth Proxy.Some possible Cloud SQL Auth Proxy invocation strings:- Using Cloud SDK authentication:```\n./cloud-sql-proxy --port 5432 INSTANCE_CONNECTION_NAME\n```The specified port must not already be in use, for example, by a local database server.\n- Using a service account and explicitly including the name of the instance connection (recommended for production environments):```\n./cloud-sql-proxy \\--credentials-file PATH_TO_KEY_FILE INSTANCE_CONNECTION_NAME &\n```\nFor more information about Cloud SQL Auth Proxy options, see [Options for authenticating the Cloud SQL Auth Proxy](/sql/docs/postgres/connect-auth-proxy#authentication-options) and [Options for specifying instances](/sql/docs/postgres/connect-auth-proxy#instances-options) .\n **Note:** The Cloud SQL Auth Proxy currently does not support Unix sockets on Windows, so this option is only available for Linux and macOS platforms.\nThe Cloud SQL Auth Proxy can listen on a Unix socket, which is a Posix standard mechanism for using a folder to manage communication between two processes running on the same host. Advantages to using Unix sockets are improved security and lower latency, however, you cannot access a Unix socket from an external machine.\n **Note: ** The PostgreSQL standard requires a `.s.PGSQL.5432` suffix in the socket path. Some libraries apply this suffix automatically, but others require you to specify the socket path as follows:```\n\u00a0 /cloudsql/INSTANCE_CONNECTION_NAME/.s.PGSQL.5432\u00a0 \n```\nTo create and use a Unix socket, the target directory must exist and both the Cloud SQL Auth Proxy and application must have read and write access to it.- If you are using explicit instance specification, copy your. You can find this on the **Overview** page for your instance in the [Google Cloud console](https://console.cloud.google.com/sql) or by running the following command:```\ngcloud sql instances describe INSTANCE_NAME --format='value(connectionName)'\n```For example: .\n- Create the directory where the Cloud SQL Auth Proxy sockets will live:```\nsudo mkdir /cloudsql; sudo chmod 777 /cloudsql\n```\n- If you are using a service account to authenticate the Cloud SQL Auth Proxy, note the location on your client machine of the private key file that was created when you created the service account.\n- Open a new Cloud Shell terminal window and start the Cloud SQL Auth Proxy.Some possible Cloud SQL Auth Proxy invocation strings:- Using a service account and explicitly including the name of the instance connection (recommended for production environments):```\n./cloud-sql-proxy --unix-socket /cloudsql--credentials-file PATH_TO_KEY_FILE INSTANCE_CONNECTION_NAME &\n```\n- Using Cloud SDK authentication and automatic instance discovery:```\n./cloud-sql-proxy --unix-socket /cloudsql &\n```\nStart the Cloud SQL Auth Proxy in its own Cloud Shell terminal so you can monitor its output without it mixing with the output from other programs.For more information about Cloud SQL Auth Proxy options, see [Options for authenticating the Cloud SQL Auth Proxy](/sql/docs/postgres/connect-auth-proxy#authentication-options) and [Options for specifying instances](/sql/docs/postgres/connect-auth-proxy#instances-options) .\n- **NOTE:** When using a unix socket to connect to Cloud SQL using the Cloud SQL Auth Proxy, make sure the socket  filename's length does not surpass the system's limit. It depends on the system, but it's usually  between 91-108 characters. On Linux, the length is usually defined as 108, and you can use the  following command to check:```\ncat /usr/include/linux/un.h | grep \"define UNIX_PATH_MAX\"\n```\nTo run the Cloud SQL Auth Proxy in a Docker container, use the Cloud SQL Auth Proxy Docker image available from the [Google Container Registry](/container-registry) .\nYou can start the Cloud SQL Auth Proxy using either TCP sockets or Unix sockets, with the commands shown below. The options use an as the connection string to identify a Cloud SQL instance. You can find the on the **Overview** page for your instance in the [Google Cloud console](https://console.cloud.google.com/sql) . or by running the following command:\n```\ngcloud sql instances describe INSTANCE_NAME\n```\n.\nFor example: `myproject:myregion:myinstance` .\nNote: The Cloud SQL Auth Proxy doesn't support listening on Unix domain sockets on Windows.\nDepending on your language and environment, you can start the Cloud SQL Auth Proxy  using either TCP sockets or Unix sockets. Unix sockets are not supported  for applications written in the Java programming language or for the Windows  environment.```\ndocker run -d \\\\\u00a0 -v PATH_TO_KEY_FILE:/path/to/service-account-key.json \\\\\u00a0 -p 127.0.0.1:5432:5432 \\\\\u00a0 gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.10.1 \\\\\u00a0 --address 0.0.0.0 --port 5432 \\\\\u00a0 --credentials-file /path/to/service-account-key.json INSTANCE_CONNECTION_NAME\n```\nIf you're using the credentials provided by your Compute Engine instance,  don't include the `--credentials-file` parameter and the `-v :/path/to/service-account-key.json` line.\nAlways specify `127.0.0.1` prefix in -p so that the Cloud SQL Auth Proxy is not  exposed outside the local host. The \"0.0.0.0\" in the instances parameter  is required to make the port accessible from outside of the Docker  container.```\ndocker run -d -v /cloudsql:/cloudsql \\\\\u00a0 -v PATH_TO_KEY_FILE:/path/to/service-account-key.json \\\\\u00a0 gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.10.1 --unix-socket=/cloudsql \\\\\u00a0 --credentials-file /path/to/service-account-key.json INSTANCE_CONNECTION_NAME\n```\nIf you're using the credentials provided by your Compute Engine instance,  don't include the `--credentials-file` parameter and the `-v :/path/to/service-account-key.json` line.\nIf you are using a container optimized image, use a writeable directory  in place of `/cloudsql` , for example:\n```\n-v /mnt/stateful_partition/cloudsql:/cloudsql\n```\nYou can specify more than one instance, separated by commas.  You can also use [Compute Engine metadata](/compute/docs/metadata) to  dynamically determine the instances to connect to. [Learn more about the Cloud SQL Auth Proxy parameters.](/sql/docs/postgres/sql-proxy#flags)\n## Connect with the psql client\nInstall the psql client from the package manager:\n```\nsudo apt-get updatesudo apt-get install postgresql-client\n```Install the psql client from the package manager:\n```\nsudo yum install postgresql\n```Install the psql client from the package manager:\n```\nsudo zypper install postgresql\n```\n- Download the PostgreSQL Core Distribution for your platform from the [PostgreSQL Downloads page](https://www.postgresql.org/download/) .The Core Distribution includes the psql client.\n- Install the PostgreSQL database, following the directions on the download page.\nThe connection string you use depends on whether you started the Cloud SQL Auth Proxy using a TCP socket or a UNIX socket or Docker.\n- Start the psql client:```\npsql \"host=127.0.0.1 sslmode=disable dbname=DB_NAME user=USERNAME\"\n```Even though the `sslmode` parameter is set to `disable` , the Cloud SQL Auth Proxy does  provide an encrypted connection.When you connect using TCP sockets, the Cloud SQL Auth Proxy is accessed through `127.0.0.1` .\n- If prompted, enter the password.\n- The psql prompt appears.\n- Start the psql client:```\npsql \"sslmode=disable host=/cloudsql/INSTANCE_CONNECTION_NAME dbname=DB_NAME user=USERNAME\"\n```Even though the `sslmode` parameter is set to `disable` , the Cloud SQL Auth Proxy does  provide an encrypted connection.\n- Enter the password.\n- The psql prompt appears.\nNeed help? For help troubleshooting the proxy, see [Troubleshooting Cloud SQL Auth Proxy connections](/sql/docs/postgres/connect-auth-proxy#troubleshooting) , or see our [Cloud SQL Support](/sql/docs/postgres/getting-support) page.\n## Connect with an application\nYou can connect to the Cloud SQL Auth Proxy from any language that enables you to connect to a Unix or TCP socket. Below are some code snippets from complete examples on GitHub to help you understand how they work together in your application.## Additional topics\n### Cloud SQL Auth Proxy command-line arguments\nThe examples above cover the most common use cases, but the Cloud SQL Auth Proxy also has other configuration options that can be set with command-line arguments. For help on command-line arguments, use the `--help` flag to view the latest documentation:\n```\n./cloud-sql-proxy --help\n```\nSee the [README on the Cloud SQL Auth Proxy GitHub repository](https://github.com/GoogleCloudPlatform/cloudsql-proxy/blob/master/README.md) for additional examples of how to use Cloud SQL Auth Proxy command-line options.\n### Options for authenticating the Cloud SQL Auth Proxy\nWhen you authenticate the Cloud SQL Auth Proxy, you enable it to access Google Cloud on behalf of your application, using a set of Google credentials. This is separate from database user authentication. [IAM user database authentication](/sql/docs/postgres/iam-logins) is integrated with the Cloud SQL Auth Proxy.\nAll of these options use an as the connection string to identify a Cloud SQL instance. You can find the on the **Overview** page for your instance in the [Google Cloud console](https://console.cloud.google.com/sql) . or by running the following command:\n`gcloud sql instances describe --project` `` `` `` .\nFor example: `gcloud sql instances describe --project myproject myinstance` .\nSome of these options use a JSON credentials file that includes the RSA private key for the account. For instructions on creating a JSON credentials file for a service account, see [Creating a service account](/sql/docs/postgres/connect-auth-proxy#create-service-account) .\nThe Cloud SQL Auth Proxy provides several alternatives for authentication, depending on your environment. The Cloud SQL Auth Proxy checks for each of the following items, in the following order, using the first one it finds to attempt to authenticate:\n- Use a [service account](/sql/docs/postgres/connect-auth-proxy#create-service-account) to create and download the associated JSON file, and set the`--credentials-file`flag to the path of the file when you start the Cloud SQL Auth Proxy. The service account must have the [required permissions](/sql/docs/postgres/roles-and-permissions#proxy-roles-permissions) for the Cloud SQL instance.To use this option on the command-line, invoke the `cloud-sql-proxy` command with the `--credentials-file` flag set to the path and filename of a JSON credential file. The path can be absolute, or relative to the current working directory. For example:```\n./cloud-sql-proxy --credentials-file PATH_TO_KEY_FILE \\INSTANCE_CONNECTION_NAME\u00a0 \n```For detailed instructions about adding IAM roles to a service account, see [Granting Roles to Service Accounts](/iam/docs/granting-roles-to-service-accounts) .For more information about the roles Cloud SQL supports, see [IAM roles for Cloud SQL](/sql/docs/postgres/iam-roles) .\n- [Create an access token](https://developers.google.com/oauthplayground/) and invoke the`cloud-sql-proxy`command with the`--token`flag set to an OAuth 2.0 access token. For example:```\n./cloud-sql-proxy --token ACCESS_TOKEN \\INSTANCE_CONNECTION_NAME\u00a0 \n```\n- This option is similar to using the`--credentials-file`flag, except you specify the JSON credential file you set in the`GOOGLE_APPLICATION_CREDENTIALS`environment variable instead of using the`--credentials-file`command-line argument.\n- If you have installed the [gcloud CLI](/sdk/gcloud) and have authenticated with your personal account, the Cloud SQL Auth Proxy can use the same account credentials. This method is especially helpful for getting a development environment up and running.To enable the Cloud SQL Auth Proxy to use your gcloud CLI credentials, use the following command to authenticate the gcloud CLI:```\ngcloud auth application-default login\n```\n- If you are connecting to Cloud SQL from a Compute Engine instance, the Cloud SQL Auth Proxy can use the service account associated with the Compute Engine instance. If the service account has the [required permissions](/sql/docs/postgres/roles-and-permissions#proxy-roles-permissions) for the Cloud SQL instance, the Cloud SQL Auth Proxy authenticates successfully.If the Compute Engine instance is in the same project as the Cloud SQL instance, the default service account for the Compute Engine instance has the necessary permissions for authenticating the Cloud SQL Auth Proxy. If the two instances are in different projects, you must add the Compute Engine instance's service account to the project containing the Cloud SQL instance.\n- If the Cloud SQL Auth Proxy cannot find credentials in any of the places covered earlier, it follows the logic documented in [Setting Up Authentication for Server to Server ProductionApplications](/docs/authentication/production) . Some environment (such as Compute Engine, App Engine, and others) provide a default service account that your application can use to authenticate by default. If you use a default service account, it must have the permissions outlined in [roles and permissions](/sql/docs/mysql/roles-and-permissions#proxy-roles-permissions) For more information about Google Cloud's approach to authentication, see [Authentication overview](/docs/authentication) .\n### Create a service account\nIf you are connecting from Compute Engine, make sure your VM has the proper`scope`to connect using the Cloud SQL Admin API. [Configure the service account](/compute/docs/access/create-enable-service-accounts-for-instances#changeserviceaccountandscopes) to have either of the following access scopes:- https://www.googleapis.com/auth/sqlservice.admin\n- https://www.googleapis.com/auth/cloud-platform\n- In the Google Cloud console, go to the **Service accounts** page. [Go to Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts/) \n- Select the project that contains your Cloud SQL instance.\n- Click **Create service account** .\n- In the **Service account name** field, enter a descriptive name for the service account.\n- Change the **Service account ID** to a unique, recognizable value and then click **Create and continue** .\n- Click the **Select a role** field and select one of the following roles:- **Cloud SQL > Cloud SQL Client** \n- **Cloud SQL > Cloud SQL Editor** \n- **Cloud SQL > Cloud SQL Admin** \n- **Note:** To create a service account with the required permissions, you must have`resourcemanager.projects.setIamPolicy`permission. This permission is included in the  Project Owner, Project IAM Admin, and Organization Administrator roles.You must also have enabled the Cloud SQL Admin API. If you are using the legacy project  roles (Viewer, Editor, Owner), the service account must have at least the Editor role.- Click **Done** to finish creating the service account.\n- Click the action menu for your new service account and then select **Manage keys** .\n- Click the **Add key** drop-down menu and then click **Create new key** .\n- Confirm that the key type is JSON and then click **Create** .The private key file is downloaded to your machine. You can move it to another  location. Keep the key file secure.\n### Use the Cloud SQL Auth Proxy with private IP\nTo connect to a Cloud SQL instance using private IP, the Cloud SQL Auth Proxy must be on a resource with access to the same VPC network as the instance.\nThe Cloud SQL Auth Proxy uses IP to establish a connection with your Cloud SQL instance. By default, the Cloud SQL Auth Proxy attempts to connect using a public IPv4 address.\nIf your Cloud SQL instance has only private IP or the instance has both public and private IP configured, and you want the Cloud SQL Auth Proxy to use the private IP address, then you must provide the following option when you start the Cloud SQL Auth Proxy:\n```\n--private-ip\n```\n### Use the Cloud SQL Auth Proxy with instances that have Private Service Connect enabled\nYou can use the Cloud SQL Auth Proxy to connect to a Cloud SQL instance with Private Service Connect enabled.\nThe Cloud SQL Auth Proxy is a connector that provides secure access to this instance without a need for authorized networks or for configuring SSL.\nTo allow Cloud SQL Auth Proxy client connections, you must set up a [DNS record](/dns/docs/records-overview) which matches the recommended [DNS name](/sql/docs/postgres/configure-private-service-connect#configure-dns) that's provided for the instance. The DNS record is a mapping between a DNS resource and a domain name.\nFor more information about using the Cloud SQL Auth Proxy to connect to instances with Private Service Connect enabled, see [Connect using the Cloud SQL Auth Proxy](/sql/docs/postgres/configure-private-service-connect#connect-cloud-sql-auth-proxy) .\n### Run the Cloud SQL Auth Proxy in a separate process\nRunning the Cloud SQL Auth Proxy in a separate Cloud Shell terminal process can be useful, to avoid mixing its console output with output from other programs. Use the syntax shown below to invoke the Cloud SQL Auth Proxy in a separate process.\nOn Linux or macOS, use a trailing `&` on the command line to launch the Cloud SQL Auth Proxy in a separate process:\n```\n./cloud-sql-proxy INSTANCE_CONNECTION_NAME\u00a0 --credentials-file PATH_TO_KEY_FILE &\n```\nIn Windows PowerShell, use the `Start-Process` command to launch the Cloud SQL Auth Proxy in a separate process:\n```\nStart-Process --filepath \"cloud-sql-proxy.exe\"\u00a0 --ArgumentList \"\u00a0 --credentials-file PATH_TO_KEY_FILEINSTANCE_CONNECTION_NAME\"\n```\n### Run the Cloud SQL Auth Proxy in a Docker container\nTo run the Cloud SQL Auth Proxy in a Docker container, use the Cloud SQL Auth Proxy Docker image available from the [Google Container Registry](/container-registry) . You can install the Cloud SQL Auth Proxy Docker image with this `gcloud` command:\n```\ndocker pull gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.10.1\n```\nYou can start the Cloud SQL Auth Proxy using either TCP sockets or Unix sockets, with the commands shown below.\n**Note:** Unix sockets are not supported for applications written in the Java programming language or for the Windows environment.\n```\n\u00a0 \u00a0 docker run -d \\\u00a0 \u00a0 \u00a0 -v PATH_TO_KEY_FILE:/path/to/service-account-key.json \\\u00a0 \u00a0 \u00a0 -p 127.0.0.1:5432:5432 \\\u00a0 \u00a0 \u00a0 gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.10.1 \\\u00a0 \u00a0 \u00a0 --credentials-file /path/to/service-account-key.json \\\u00a0 \u00a0 \u00a0 INSTANCE_CONNECTION_NAME\n``````\n\u00a0 \u00a0 docker run -d \\\u00a0 \u00a0 \u00a0 -v /PATH_TO_HOST_TARGET:/PATH_TO_GUEST_TARGET \\\u00a0 \u00a0 \u00a0 -v PATH_TO_KEY_FILE:/path/to/service-account-key.json \\\u00a0 \u00a0 \u00a0 gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.10.1 --unix-socket /cloudsql \\\u00a0 \u00a0 \u00a0 --credentials-file /path/to/service-account-key.json/PATH_TO_KEY_FILE \\\u00a0 \u00a0 \u00a0 INSTANCE_CONNECTION_NAME\n```\nIf you are using a container optimized image, use a writeable directory in place of `/cloudsql` , for example:\n```\nv /mnt/stateful_partition/cloudsql:/cloudsql\n```\nIf you are using the credentials provided by your Compute Engine instance, do not include the `credential_file` parameter and the `-v` `` `:/path/to/service-account-key.json` line.\n### Running the Cloud SQL Auth Proxy as a service\nRunning the Cloud SQL Auth Proxy as a background service is an option for local development and production workloads. In development, when you need to access your Cloud SQL instance, you can start the service in the background and stop it when you're finished.\nFor production workloads, the Cloud SQL Auth Proxy doesn't currently provide built-in support for running as a Windows service, but third-party service managers can be used to run it as a service. For example, you can use [NSSM](http://nssm.cc/) to configure the Cloud SQL Auth Proxy as a Windows service, and NSSM monitors the Cloud SQL Auth Proxy and restarts it automatically if it stops responding. See the [NSSM documentation](http://nssm.cc/usage) for more information.\n**Note:** If you run the Cloud SQL Auth Proxy as a service, keep in mind that it uses a secure connection to communicate with Cloud SQL instances, but connections from your application to the Cloud SQL Auth Proxy are not encrypted. For this reason, ensure that only trusted users are able to access the address and port that the Cloud SQL Auth Proxy is listening on.\n### Enforce the use of the Cloud SQL Auth Proxy\nEnable the use of the Cloud SQL Auth Proxy in Cloud SQL using [ConnectorEnforcement](/sql/docs/mysql/admin-api/rest/v1beta4/instances#connectorenforcement) .\nThe following command enforces the use of Cloud SQL connectors.\n```\n\u00a0 \u00a0 gcloud sql instances patch INSTANCE_NAME \\\u00a0 \u00a0 --connector-enforcement REQUIRED\u00a0 \n```\nTo disable the enforcement, use the following line of code: `--connector-enforcement NOT_REQUIRED` The update doesn't trigger a restart.The following command enforces the use of Cloud SQL connectors\nBefore using any of the request data, make the following replacements:- : The project ID.\n- : The instance ID.\nHTTP method and URL:\n```\nPATCH https://sqladmin.googleapis.com/v1/projects/project-id/instances/instance-id\n```\nRequest JSON body:\n```\n{\n \"settings\": {      \n \"connectorEnforcement\": \"REQUIRED\" \n }            \n} \n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"kind\": \"sql#operation\",\n \"targetLink\": \"https://sqladmin.googleapis.com/v1/projects/project-id/instances/instance-id\",\n \"status\": \"PENDING\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2020-01-16T02:32:12.281Z\",\n \"operationType\": \"UPDATE\",\n \"name\": \"operation-id\",\n \"targetId\": \"instance-id\",\n \"selfLink\": \"https://sqladmin.googleapis.com/v1/projects/project-id/operations/operation-id\",\n \"targetProject\": \"project-id\"\n}\n```\nTo disable the enforcement, use `\"connectorEnforcement\": \"NOT_REQUIRED\"` instead. The update does not trigger a restart.The following command enforces the use of Cloud SQL connectors.\nBefore using any of the request data, make the following replacements:- : The project ID.\n- : The instance ID.\nHTTP method and URL:\n```\nPATCH https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances/instance-id\n```\nRequest JSON body:\n```\n{\n \"settings\": {\n \"connectorEnforcement\": \"REQUIRED\"\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"kind\": \"sql#operation\",\n \"targetLink\": \"https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances/instance-id\",\n \"status\": \"PENDING\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2020-01-16T02:32:12.281Z\",\n \"operationType\": \"UPDATE\",\n \"name\": \"operation-id\",\n \"targetId\": \"instance-id\",\n \"selfLink\": \"https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/operations/operation-id\",\n \"targetProject\": \"project-id\"\n}\n```\nTo disable the enforcement, use `\"connectorEnforcement\": \"NOT_REQUIRED\"` instead. The update does not trigger a restart.\n## Tips for working with Cloud SQL Auth Proxy\n### Invoke the Cloud SQL Auth Proxy\nAll of the sample proxy invocations start the Cloud SQL Auth Proxy in the background, so a prompt is returned. Reserve that Cloud Shell terminal for the Cloud SQL Auth Proxy, to avoid having its output mixed with the output from other programs. Also, the output from the Cloud SQL Auth Proxy can help you diagnose connection problems, so it can be helpful to capture in a log file. If you do not start the Cloud SQL Auth Proxy in the background, the output goes to stdout unless redirected.\nYou do not have to use `/cloudsql` as the directory for the Cloud SQL Auth Proxy sockets. (That directory name was chosen to minimize differences with App Engine connection strings.) If you change the directory name, however, keep the overall length to a minimum; it is incorporated in a longer string that has a length limit imposed by the operating system. It depends on the system, but it's usually between 91-108 characters. On Linux, the length is usually defined as 108, and you can use the following command to check:\n```\ncat /usr/include/linux/un.h | grep \"define UNIX_PATH_MAX\"\n```\n### Use the Cloud SQL Auth Proxy to connect to multiple instances\nYou can use one local Cloud SQL Auth Proxy client to connect to multiple Cloud SQL instances. The way you do this depends on whether you are using Unix sockets or TCP.\nTo connect the Cloud SQL Auth Proxy to multiple instances, you provide each instance connection name as an argument to the Cloud SQL Auth Proxy, in a space-separated list. The Cloud SQL Auth Proxy connects to each instance when it starts.\nYou connect to each instance using its socket, in the specified directory.\nFor example:\n```\n\u00a0 \u00a0 \u00a0 ./cloud-sql-proxy --unix-socket /cloudsql \\\u00a0 \u00a0 \u00a0 myProject:us-central1:myInstance myProject:us-central1:myInstance2 &\u00a0 \u00a0 \u00a0 psql -U myUser -h /cloudsql/myProject:us-central1:myInstance2\u00a0 \n```When you connect using TCP, you specify a port on your machine for the Cloud SQL Auth Proxy to listen on for each Cloud SQL instance. When connecting to multiple Cloud SQL instances, each port specified must be unique and available for use on your machine.\nFor example:\n```\n\u00a0 \u00a0 # Start the Cloud SQL Auth Proxy to connect to two different Cloud SQL instances\u00a0 \u00a0 # Give the Cloud SQL Auth Proxy a unique port on your machine to use for each Cloud SQL instance.\u00a0 \u00a0 ./cloud-sql-proxy \"myProject:us-central1:myInstance?port=5432\" \\\u00a0 \u00a0 \"myProject:us-central1:myInstance2?port=1234\"\u00a0 \u00a0 # Connect to \"myInstance\" using port 5432 on your machine:\u00a0 \u00a0 psql -U myUser -h 127.0.0.1 \u00a0--port 5432\u00a0 \u00a0 # Connect to \"myInstance2\" using port 1234 on your machine:\u00a0 \u00a0 psql -U myUser -h 127.0.0.1 \u00a0--port 1234\u00a0 \n```\n### Cloud SQL Auth Proxy invocations and psql client connection strings\nYou can use Cloud SQL Auth Proxy invocations and connection strings, for example, in commands for a PostgreSQL user `myUser` , for the `myInstance` instance, located in `us-central1` , in the `myProject` project.\n[gcloud CLI](/sdk/gcloud)\n```\n\u00a0 \u00a0 ./cloud-sql-proxy --unix-socket /cloudsql &\u00a0 \u00a0 psql -U myUser -h /cloudsql/myProject:us-central1:myInstance\u00a0\n```\n[gcloud CLI](/sdk/gcloud)\n```\n\u00a0 \u00a0 ./cloud-sql-proxy --unix-socket /cloudsql &\u00a0 \u00a0 psql -U myUser -h /cloudsql/myProject:us-central1:myInstance\n```\n```\n\u00a0 \u00a0 ./cloud-sql-proxy --unix-socket /cloudsql myProject:us-central1:myInstance &\u00a0 \u00a0 psql -U myUser -h /cloudsql/myProject:us-central1:myInstance\n```\n```\n\u00a0 \u00a0 ./cloud-sql-proxy \"myProject:us-central1:myInstance?port=5432\" &\u00a0 \u00a0 psql -U myUser -h 127.0.0.1\n```\n```\n\u00a0 \u00a0 cloud-sql-proxy.exe \"myProject:us-central1:myInstance?port=5432\"\u00a0 \u00a0 psql -U myUser -h 127.0.0.1\n```\n**Note:** 5432 is the default port used for the `psql` client. If you use a different port number, you must specify it when you start the `psql` client by using the `--port` parameter.\nFor more information about Cloud SQL Auth Proxy options and connection strings, see the [Cloud SQL Auth Proxy GitHub page](https://github.com/GoogleCloudPlatform/cloudsql-proxy) .\n## Troubleshoot Cloud SQL Auth Proxy connections\nThe Cloud SQL Auth Proxy Docker image is based on a specific version of the Cloud SQL Auth Proxy. When a new version of the Cloud SQL Auth Proxy becomes available, pull the new version of the Cloud SQL Auth Proxy Docker image to keep your environment up to date. You can see the current version of the Cloud SQL Auth Proxy by checking the [Cloud SQL Auth Proxy GitHub releases page](https://github.com/GoogleCloudPlatform/cloudsql-proxy/releases) .\nIf you are having trouble connecting to your Cloud SQL instance using the Cloud SQL Auth Proxy, here are a few things to try to find what's causing the problem.\n- Check the Cloud SQL Auth Proxy output.Often, the Cloud SQL Auth Proxy output can help you determine the source of the problem and how to solve it. Pipe the output to a file, or watch the Cloud Shell terminal where you started the Cloud SQL Auth Proxy.\n- If you are getting a `403 notAuthorized` error, and you are using a service account to authenticate the Cloud SQL Auth Proxy, make sure the service account has the correct [permissions](/sql/docs/postgres/roles-and-permissions) .You can check the service account by searching for its ID on the [IAM page](https://console.cloud.google.com/iam-admin) . It must have the `cloudsql.instances.connect` permission. The `Cloud SQL Admin` , `Client` and `Editor` predefined roles have this permission.\n- If you are connecting from App Engine and are getting a `403 notAuthorized` error, check the `app.yaml` value `cloud_sql_instances` for a misspelled or incorrect instance connection name. Instance connection names are always in the format `PROJECT:REGION:INSTANCE` .Also, check that the App Engine service account (for example, $PROJECT_ID@appspot.gserviceaccount.com) has the Cloud SQL Client IAM role.If the App Engine service lives in one project (project A) and the database lives in another (project B), this error means the App Engine service account has not been given the Cloud SQL Client IAM role in the project with the database (project B).\n- Make sure to enable the Cloud SQL Admin API.If it is not, you see output like `Error 403: Access Not Configured` in your Cloud SQL Auth Proxy logs.\n- If you are including multiple instances in your instances list, make sure you are using a comma as a delimiter, with no spaces. If you are using TCP, make sure you are specifying different ports for each instance.\n- If you are connecting using UNIX sockets, confirm that the sockets were created by listing the directory you provided when you started the Cloud SQL Auth Proxy.\n- If you have an outbound firewall policy, make sure it allows connections to port 3307 on the target Cloud SQL instance. **Note:** The Cloud SQL Auth Proxy uses 3307 to connect to the Cloud SQL Auth Proxy server. Port `5432` is the default port for the PostgreSQL protocol over a direct TCP connection (not using the Cloud SQL Auth Proxy).\n- You can confirm that the Cloud SQL Auth Proxy started correctly by looking in the logs under the **Operations > Logging > Logs explorer** section of the Google Cloud console. A successful operation looks like the following:```\n2021/06/14 15:47:56 Listening on /cloudsql/$PROJECT_ID:$REGION:$INSTANCE_NAME/5432 for $PROJECT_ID:$REGION:$INSTANCE_NAME2021/06/14 15:47:56 Ready for new connections\n```\n- Quota issues: When the Cloud SQL Admin API quota is breached, the Cloud SQL Auth Proxy starts up with the following error message:```\nThere was a problem when parsing a instance configuration but ignoring dueto the configuration. Error: googleapi: Error 429: Quota exceeded for quotametric 'Queries' and limit 'Queries per minute per user' of service'sqladmin.googleapis.com' for consumer 'project_number:$PROJECT_ID.,rateLimitExceeded\n```Once an application connects to the proxy, the proxy reports the following error:```\nfailed to refresh the ephemeral certificate for $INSTANCE_CONNECTION_NAME:googleapi: Error 429: Quota exceeded for quota metric 'Queries' and limit'Queries per minute per user' of service 'sqladmin.googleapis.com' forconsumer 'project_number:$PROJECT_ID., rateLimitExceeded\n```Solution: Either identify the source of the quota problem, for example, an application is misusing the connector and unnecessarily creating new connections, or contact support to request an increase to the Cloud SQL Admin API quota. If the quota error appears on startup, you must re-deploy the application to restart the proxy. If the quota error appears after startup, a re-deploy is unnecessary.## What's next- Learn more about the [Cloud SQL Auth Proxy](/sql/docs/postgres/sql-proxy) .\n- Learn more about [Identity and Access Management (IAM)](/iam/docs/overview) .\n- Learn more about [Service Accounts](/iam/docs/understanding-service-accounts) .\n- Learn about the [two levels of access control](/sql/docs/postgres/instance-access-control) for Cloud SQL instances.\n- Create [users](/sql/docs/postgres/create-manage-users) and [databases](/sql/docs/postgres/create-manage-databases) .\n- Learn about [ connecting to your instance from your application](/sql/docs/postgres/instance-access-control#instanceaccess) .\n- Learn about [the psql Client](https://www.postgresql.org/docs/current/static/app-psql.html) .\n- Learn about [options for support](/sql/docs/support) .", "guide": "Cloud SQL"}