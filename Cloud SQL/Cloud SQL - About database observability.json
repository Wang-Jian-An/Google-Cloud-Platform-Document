{"title": "Cloud SQL - About database observability", "url": "https://cloud.google.com/sql/docs/postgres/observability", "abstract": "# Cloud SQL - About database observability\nDatabase observability is a measure of how accurately you can infer the internal state of a database system based on the data, or telemetry, that it generates in logs, metrics, and traces.\nDiagnosing and troubleshooting issues in an application can be particularly difficult and time-consuming when a database is involved. Telemetry collection is crucially important. Telemetry, when enriched with application context, can make database instances more understandable, observable, and easier to maintain. You can identify issues and problematic trends easily and remedy them early, without having to incur costly downtime. Moreover, by using such data, you can configure newer database instances to collect the right kind of data from the moment they start.\nYou can use data effectively and proactively to prevent issues and focus on strategic innovation. Good telemetry collection is particularly useful in the [DevOps model](https://cloud.google.com/devops) , where database generalists need to independently analyze telemetry to monitor, evaluate, and optimize the performance and health of their rapidly evolving applications.\nGoogle Cloud offers several powerful features spanning the four iterative observability stages to help you maintain the health of your Cloud SQL database.\n", "content": "## Automated telemetry collection\nTo achieve observability goals, we start by collecting telemetry, preferably through an automated process. When collected over a period, telemetry helps establish a baseline for metrics under different load conditions.\nGoogle Cloud services automatically generate observability data, including metrics, logs, and traces, which can help provide a complete observability overview.\n- [Cloud Monitoring](/monitoring/docs/monitoring-overview) collects measurements of your service and of the Google Cloud resources that you use. Cloud SQL uses built-in memory custom agents to collect query telemetry, resulting in a lower impact on performance and eliminating the need for agent maintenance or security overhead.\n- [Cloud Logging](/logging/docs/overview) collects logging data from common application components. For Cloud SQL, see also [View instance logs](/sql/docs/postgres/logging) .\n- [Cloud Trace](/trace/docs/overview) collects latency data and executed query plans from applications to help you track how requests propagate through your application. You can compare these latency distributions over time or across versions. Cloud Trace alerts you when it detects a significant shift in the latency profile of your application when it's instrumented to use Cloud Trace.\n[Sqlcommenter](https://google.github.io/sqlcommenter/spec/) , an [OpenTelemetry](https://cloud.google.com/learn/what-is-opentelemetry) library for databases helps you monitor your databases through the lens of an application. Sqlcommenter automatically instruments ORMs to augment SQL statements with tags and allows OpenTelemetry trace context information to be propagated to the database.\nWith tags and trace application context in databases, it's easy to correlate application code with database performance and troubleshoot microservices-based architectures.\n## Database monitoring\nProper monitoring helps you determine whether your application is working optimally. Implement monitoring early, such as before you initiate a migration or deploy a new application to a production environment. Disambiguate between application issues and underlying cloud issues.\nThe [Cloud SQL System insights dashboard](/sql/docs/postgres/use-system-insights) considers several important signals of overall database health and performance.\nThe dashboard shows graphs for several important metrics, which help you gain insights into issues, such as throughput, latency, and cost. These insights help you respond proactively as your application needs change. You can compare current performance against past trends and identify anomalies that might need investigation.\nThe Cloud SQL [Overview page](/sql/docs/postgres/monitor-instance#monitoring-overview) shows graphs for some of the key metrics.\nCloud SQL also helps you [compare metrics](/sql/docs/postgres/monitor-instance#monitoring-multiple) for selected instances.\nYou can use Cloud Monitoring to create [custom dashboards](/monitoring/charts/dashboards) that help you monitor metrics and to [set up alert policies](/monitoring/alerts/using-alerting-ui#viewing_policies) so that you can receive timely notifications.\n## Database and query analysis\nThe Cloud SQL [Query insights](/sql/docs/postgres/using-query-insights) tool provides monitoring and diagnostics that let you detect and fix query performance problems.\nQuery insights dashboards help you identify query performance problems early and let you move from detection to resolution by using a single interface. Built-in, visual query plans assist you in troubleshooting issues to find the root cause. You can also use in-context, end-to-end application tracing to find the source of a problematic query.\nQuery insights provides application-centric monitoring that helps you diagnose performance problems for applications built using object-relational mappings (ORMs). You can tag queries with business logic that the query is associated with, such as payment, inventory, business analytics, or shipping. Query insights can integrate with your existing APM tools, letting you monitor and troubleshoot query problems using your favorite tool.\nThe Query insights tool uses [sqlcommenter](https://google.github.io/sqlcommenter/spec/) to automatically instrument your ORMs. This instrumentation helps you identify the application code that's causing problems. Query insights supports [OpenTelemetry](https://opentelemetry.io/) standards and makes the query metrics and traces data available for your APM tools through the [Google Cloud Observability](https://cloud.google.com/products/operations) API.\nQuery insights integrates with [Cloud Monitoring](https://cloud.google.com/monitoring) , letting you create custom dashboards and alerts on query metrics or tags and receive notifications using email, SMS, Slack, PagerDuty, and more.\n## Database tuning\nYou can iteratively [troubleshoot and tune](/sql/docs/postgres/best-practices#tuning-monitoring) your database.\nCloud SQL recommenders help you analyze the current usage of your database and provide [recommendations](/recommender/docs/key-concepts#recommendations) and [insights](/recommender/docs/insights/using-insights#insights) based on heuristic methods and machine learning.\nCloud SQL recommenders are briefly described as follows:\n| Name          | Description                                         |\n|:--------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Out-of-disk recommender      | Reduce the risk of downtime that might be caused by your Cloud SQL instances running out of disk space.                  |\n| Idle instance recommender     | Reduce costs by shutting down Cloud SQL instances that are inadvertently idle.                        |\n| Overprovisioned instance recommender  | Reduce costs by resizing Cloud SQL instances that are unnecessarily large for a given workload.                    |\n| Underprovisioned instance recommender  | Avoid bottlenecks from high CPU and memory usage and minimize the likelihood of out-of-memory events by resizing Cloud SQL instances that have high CPU and/or memory usage. |\n| High transaction ID utilization recommender | Optimize the performance of your instance by avoiding potential transaction ID wraparound for Cloud SQL for PostgreSQL instances.           |\n## What's next\n- View the list of [Cloud SQL metrics](/sql/docs/postgres/admin-api/metrics) .\n- [Use Query insights to improve query performance](/sql/docs/postgres/using-query-insights) .\n- [Use System insights to improve instance performance](/sql/docs/postgres/use-system-insights) .\n- View the video: [Introducing Cloud SQL insights](https://www.youtube.com/watch?v=qN7x3ngwz1o) .\n- Read the launch blog: [Database observability for developers: introducing Cloud SQL insights](https://cloud.google.com/blog/products/databases/get-ahead-of-database-performance-issues-with-cloud-sql-insights) .\n- Read the blog: [Boost your query performance troubleshooting skills with Cloud SQL Insights](https://cloud.google.com/blog/topics/developers-practitioners/boost-your-query-performance-troubleshooting-skills-cloud-sql-insights) .\n- Read the blog: [Enable query tagging with Sqlcommenter](https://cloud.google.com/blog/topics/developers-practitioners/enable-query-tagging-sqlcommenter-understand-application-impact-database-performance) .\n- Learn more about [Cloud Logging](/logging/docs/overview) and [Cloud Monitoring](/monitoring/docs/monitoring-overview) . See also [View instance logs](/sql/docs/postgres/logging) .\n- [Troubleshoot and tune](/sql/docs/postgres/best-practices#tuning-monitoring) your database instance.\n- Learn more about [Google Cloud recommenders](/recommender/docs/overview) .", "guide": "Cloud SQL"}