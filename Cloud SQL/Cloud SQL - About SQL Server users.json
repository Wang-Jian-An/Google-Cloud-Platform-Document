{"title": "Cloud SQL - About SQL Server users", "url": "https://cloud.google.com/sql/docs/sqlserver/users", "abstract": "# Cloud SQL - About SQL Server users\nThis page describes how Cloud SQL works with SQL Server users and roles. SQL Server roles enable you to control the access and capabilities of users who access a SQL Server instance.\nFor information about creating and managing Cloud SQL users, see [Creatingand managing users](/sql/docs/sqlserver/create-manage-users) .\n**Note:** See [Other SQL Server users](#other-users) for additional information about users you create using Cloud SQL.\n", "content": "## SQL Server roles and users\nSQL Server roles can be a single role, or they can function as a group of roles.\nA user is a role with the ability to log in (the role has the `LOGIN` permission). All roles created by Cloud SQL have the `LOGIN` permission, so Cloud SQL uses the terms \"role\" and \"user\" interchangeably. However, if you create a role with the client, it does not necessarily have the `LOGIN` permission.\nAll SQL Server users must have a password. Thus, you cannot log in with a user that lacks a password.\n## Superusers and system stored procedures\nCloud SQL for SQL Server is a managed service, so it restricts access to certain system stored procedures and tables that require advanced privileges. In Cloud SQL, you cannot create or have access to users with superuser permissions.\n**Note:** The `sysadmin` role is not supported. Therefore, you cannot run system stored procedures that require the `sysadmin` role. As one of the many examples, you cannot run the `sp_OADestroy` stored procedure because it requires the `sysadmin` role.\n## Default SQL Server users\nWhen you create a new Cloud SQL for SQL Server instance, the default `sqlserver` user is already created for you, although you must set its password.\nThe `sqlserver` user is part of the `CustomerDbRootRole` role, and its permissions (privileges) include the following:\n- `ALTER ANY CONNECTION`\n- `ALTER ANY LOGIN`\n- `ALTER ANY SERVER ROLE`\n- `ALTER SERVER STATE`\n- `ALTER TRACE`\n- `CONNECT SQL`\n- `CREATE ANY DATABASE`\n- `CREATE SERVER ROLE`\n- `VIEW ANY DATABASE`\n- `VIEW ANY DEFINITION`\n- `VIEW SERVER STATE`\nYou can also add [cloudsql enable linked servers](/sql/docs/sqlserver/linked-servers) to your instance if you want to use it with linked servers. This flag grants the following permission to your server:\n- `ALTER ANY LINKED SERVER`\n**Note:** Cloud SQL for SQL Server doesn't support the `sysadmin` and `dbcreator` roles. Therefore, due to unavailable permissions, automated schema deployment using a [DACPAC](https://docs.microsoft.com/en-us/sql/relational-databases/data-tier-applications/data-tier-applications?view=sql-server-ver16) isn't supported.\n## Granting server permissions\nWhen you grant privileges using any [GRANTcommand](https://docs.microsoft.com/sql/t-sql/statements/grant-server-permissions-transact-sql?view=sql-server-ver15) , you must pass `CustomerDbRootRole` as, for example, the value of `grantor_principal` .\nThe following `GRANT ALTER ANY LOGIN` example is **valid** :\n```\nGRANT ALTER ANY LOGIN TO [Account] AS CustomerDbRootRole\n```\nThe following `GRANT ALTER ANY LOGIN` example is **invalid** :\n```\nGRANT ALTER ANY LOGIN TO [Account]\n```\n## Other SQL Server users\nYou can [create other SQL Server users](/sql/docs/sqlserver/create-manage-users) or roles. All users you create using Cloud SQL are granted the same database permissions as the `sqlserver` login. However, if you use a different process to create a user (rather than creating it using Cloud SQL), the user won't have the same permissions as the customer administrator accounts or the `sqlserver` user. For example, if you use the [createlogin](https://learn.microsoft.com/en-us/sql/t-sql/statements/create-login-transact-sql?view=sql-server-ver16) process, and add the login to the `CustomerDbRootRole` server role, the user won't have the same permissions as the customer administrator accounts or the `sqlserver` user. Therefore, you can use Cloud SQL to create a user if you intend the user to have the same database permissions as the `sqlserver` login. To validate the difference in permissions between any two accounts, you can use the following function: [sys.fn_my_permissions](https://learn.microsoft.com/en-us/sql/relational-databases/system-functions/sys-fn-my-permissions-transact-sql?view=sql-server-ver16) .\n**Note:** For reading audit files, Cloud SQL grants specific permissions to the `sqlserver` login, and that user can grant those permissions to other users. See [Creating server audits](/sql/docs/sqlserver/db-audit#creating-server-audits) .\n### Database imports: owner permissions\nWhen you import a database, the treatment of the owner varies as follows, based on the type of owner:\n- **For an existing login that isn't sa:** Cloud SQL keeps that owner and creates a user called`sqlserver`that maps to the login`sqlserver`. Cloud SQL grants the`CONTROL`and`ALTER ANY USER`permissions to that`sqlserver`user.\n- **For unknown logins, or logins that were system-created:** Cloud SQL transfers ownership of the database to the`sqlserver`login.\n### Changing permissions for users\nThe [ALTERROLE](https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-role-transact-sql) command is available for changing user permissions. If you create a new user with a client, you can associate it with a different role or provide different permissions.\n## Troubleshooting\n### Error accessing database\nWhen trying to access to a database you created, as a user you created, you get the following error:\n```\nThe server principal USERNAME is not able to access thedatabase DATABASE_NAME under the current security context.\n```\nThe user is not a member of the database.\nConnect to the database as the `sqlserver` user and add the new user, then [give the new user the db_owner role](https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-addrolemember-transact-sql?view=sql-server-2017) for the database. For example:\n```\nEXEC sp_adduser 'user';EXEC sp_addrolemember 'db_owner', 'user'\n```\n## What's next\n- [Configure the user for your instance](/sql/docs/sqlserver/create-manage-users#user-root) .\n- [Create and manage users](/sql/docs/sqlserver/create-manage-users) .\n- [Create and managedatabases](/sql/docs/sqlserver/create-manage-databases) .", "guide": "Cloud SQL"}