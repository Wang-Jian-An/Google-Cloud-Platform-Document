{"title": "Cloud SQL - Authorize with authorized networks", "url": "https://cloud.google.com/sql/docs/postgres/authorize-networks", "abstract": "# Cloud SQL - Authorize with authorized networks\nThis page describes how to use the authorized networks settings for connecting to Cloud SQL instances that use IP addresses.\n", "content": "## Configure authorized networks\nYour client application's IP address or address range must be configured as `authorized networks` for the following conditions:\n- Your client application is connecting directly to a Cloud SQL instance on its public IP address.\n- Your client application is connecting directly to a Cloud SQL instance on its private IP address, and your client's IP address is a [non-RFC 1918 address](/vpc/docs/subnets#valid-ranges) The IP address can be either a single endpoint or consist of a range in [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) .\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- To open the **Overview** page of an instance, click the instance name.\n- From the SQL navigation menu, select **Connections** .\n- Click the **Network** tab.\n- Select the **Public IP** checkbox.\n- Click **Add a network** .\n- In the **Name** field, enter a name for the **New network** .\n- In the **Network*** field, enter the public IPv4 address or address  range from which you want to allow connections.For the address range, you must use a valid [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) (for example, 10.10.10.0/24).\n- Click **Done** .\n- Click **Save** .\nConfiguring authorized networks replaces the existing authorized networks  list.\n```\ngcloud sql instances patch INSTANCE_ID \\--authorized-networks=NETWORK_RANGE_1,NETWORK_RANGE_2...\u00a0 \u00a0 \n```To configure authorized networks, use a [Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance) .\n [  cloud_sql/postgres_instance_authorized_network/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_authorized_network/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_authorized_network/main.tf) \n```\nresource \"google_sql_database_instance\" \"default\" {\n name    = \"postgres-instance-with-authorized-network\"\n region   = \"us-central1\"\n database_version = \"POSTGRES_14\"\n settings {\n tier = \"db-custom-2-7680\"\n ip_configuration {\n  authorized_networks {\n  name   = \"Network Name\"\n  value   = \"192.0.2.0/24\"\n  expiration_time = \"3021-11-15T16:19:00.094Z\"\n  }\n }\n }\n # set `deletion_protection` to true, will ensure that one cannot accidentally delete this instance by\n # use of Terraform whereas `deletion_protection_enabled` flag protects this instance at the GCP level.\n deletion_protection = false\n}\n```To apply your Terraform configuration in a Google Cloud project, complete the steps in the following sections.## Prepare Cloud Shell\n- Launch [Cloud Shell](https://shell.cloud.google.com/) .\n- Set the default Google Cloud project  where you want to apply your Terraform configurations.You only need to run this command once per project, and you can run it in any directory.```\nexport GOOGLE_CLOUD_PROJECT=PROJECT_ID\n```Environment variables are overridden if you set explicit values in the Terraform  configuration file.\n## Prepare the directoryEach Terraform configuration file must have its own directory (also called a ).- In [Cloud Shell](https://shell.cloud.google.com/) , create a directory and a new  file within that directory. The filename must have the`.tf`extension\u2014for example`main.tf`. In this  tutorial, the file is referred to as`main.tf`.```\nmkdir DIRECTORY && cd DIRECTORY && touch main.tf\n```\n- If you are following a tutorial, you can copy the sample code in each section or step.Copy the sample code into the newly created `main.tf` .Optionally, copy the code from GitHub. This is recommended  when the Terraform snippet is part of an end-to-end solution.\n- Review and modify the sample parameters to apply to your environment.\n- Save your changes.\n- Initialize Terraform. You only need to do this once per directory.```\nterraform init\n```Optionally, to use the latest Google provider version, include the `-upgrade` option:```\nterraform init -upgrade\n```\n## Apply the changes\n- Review the configuration and verify that the resources that Terraform is going to create or  update match your expectations:```\nterraform plan\n```Make corrections to the configuration as necessary.\n- Apply the Terraform configuration by running the following command and entering`yes`at the prompt:```\nterraform apply\n```Wait until Terraform displays the \"Apply complete!\" message.\n- [Open your Google Cloud project](https://console.cloud.google.com/) to view  the results. In the Google Cloud console, navigate to your resources in the UI to make sure  that Terraform has created or updated them.\n **Note:** Terraform samples typically assume that the required APIs are enabled in your Google Cloud project.To delete your changes, do the following:- To disable deletion protection, in your Terraform configuration file set the`deletion_protection`argument to`false`.```\ndeletion_protection = \"false\"\n```\n- Apply the updated Terraform configuration by running the following command and    entering`yes`at the prompt:```\nterraform apply\n```\n- Remove resources previously applied with your Terraform configuration by running the following command and entering `yes` at the prompt:```\nterraform destroy\n```\nConfiguring authorized networks replaces the existing authorized networks  list.\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The instance ID\n- An authorized ip address or range\n- Another authorized ip address or range\nHTTP method and URL:\n```\nPATCH https://sqladmin.googleapis.com/v1/projects/project-id/instances/instance-id\n```\nRequest JSON body:\n```\n{\n \"settings\":\n {\n \"ipConfiguration\":\n {\n  \"authorizedNetworks\":\n  [{\"value\": \"network_range_1\"}, {\"value\": \"network_range_2\"}]\n }\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:Configuring authorized networks replaces the existing authorized networks  list.\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The instance ID\n- An authorized ip address or range\n- Another authorized ip address or range\nHTTP method and URL:\n```\nPATCH https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances/instance-id\n```\nRequest JSON body:\n```\n{\n \"settings\":\n {\n \"ipConfiguration\":\n {\n  \"authorizedNetworks\":\n  [{\"value\": \"network_range_1\"}, {\"value\": \"network_range_2\"}]\n }\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n## Limitations\nSome IP address ranges can't be added as authorized networks.\n| Address range | Notes                           |\n|:----------------|:-----------------------------------------------------------------------------------------------------------------|\n| 10.0.0.0/8  | RFC 1918 address range. These are automatically and implicitly included in the authorized networks by Cloud SQL |\n| 172.16.0.0/12 | RFC 1918 address range. These are automatically and implicitly included in the authorized networks by Cloud SQL |\n| 192.168.0.0/16 | RFC 1918 address range. These are automatically and implicitly included in the authorized networks by Cloud SQL |\n**Note:** The authorized networks list is implemented on the Cloud SQL instance VM by a local firewall. Learn more about [managingconnections](/sql/docs/postgres/manage-connections) .\n## What's next\n- Learn more about [instance access control](/sql/docs/postgres/instance-access-control) .\n- [Configure your instance](/sql/docs/postgres/configure-ssl-instance) to use SSL/TLS.\n- [Connect to your instance](/sql/docs/postgres/connect-admin-ip#connect-ssl) with the psql client using SSL/TLS.", "guide": "Cloud SQL"}