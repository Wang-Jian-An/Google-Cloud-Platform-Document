{"title": "Cloud SQL - Audit for PostgreSQL using pgAudit", "url": "https://cloud.google.com/sql/docs/postgres/pg-audit", "abstract": "# Cloud SQL - Audit for PostgreSQL using pgAudit\nThis page describes database auditing using the [pgAudit](https://www.pgaudit.org/) extension, which helps you configure many of the logs often required to comply with government, financial, and ISO certifications.\n**Important:** Audit logs are temporarily written to the disk of their instance, taking up disk space. Disk space is affected before logs are sent to Cloud Logging, as described on this page. Therefore, before using this feature, review the [Limitations section](#limitations) .\nFor general information about PostgreSQL extensions in Cloud SQL, see [PostgreSQL extensions](/sql/docs/postgres/extensions) .\n", "content": "## Overview\nDatabase auditing in Cloud SQL for PostgreSQL is available through the open-source pgAudit extension.\nUsing this extension, you can selectively record and track SQL operations performed against a given database instance. The extension provides you with auditing capabilities to monitor and record a select subset of operations.\nThe pgAudit extension applies to executed SQL commands and queries. In contrast, [Cloud Audit Logs](/logging/docs/audit) should be used to audit administrative and maintenance operations done on a Cloud SQL instance.\nSee the [Audit logs](/sql/docs/postgres/audit-logging#overview) page for more information about audit logging in Cloud SQL.\n## Set up database auditing in Cloud SQL\n**Note:** Enabling the pgAudit extension can lead to increased data storage requirements if a service disruption occurs. To ensure durability of pgAudit log records in the event of unexpected storage issues, we recommend that you [enable automatic storage increases](/sql/docs/postgres/instance-settings#automatic-storage-increase-2ndgen) when using pgAudit.\nThe steps for audit logging using the pgAudit extension include:\n- Enabling the`cloudsql.enable_pgaudit`flag in Cloud SQL.\n- Running a command to create the pgAudit extension.\n- Setting values for the`pgaudit.log`flag.\n**Important: ** Cloud SQL doesn't support using Terraform to create the pgAudit extension. Use a [psql client](#running-create-extension) to create this extension.The default value for the `pgaudit.log` flag is `none` . To use the pgAudit extension, you must [setvalues for this flag](#set-pgaudit-flag-values) .\nAfter you set up database auditing, you can view the logs and, if necessary, disable logging.\n### Set up auditing\nThis section describes the basics of setting up database auditing operations.\nIn Cloud SQL, you use database flags for many operations, including adjusting PostgreSQL parameters and configuring an instance. The `cloudsql.enable_pgaudit` flag enables auditing for a given database instance. You can change the value of the `cloudsql.enable_pgaudit` flag through the Google Cloud console or through the `gcloud` command.\n**Note:** Changing the value of the `cloudsql.enable_pgaudit` flag [restarts](/sql/docs/postgres/start-stop-restart-instance#restart) the instance.\nUse the [standard instructions for flags](/sql/docs/postgres/flags) to enable the `cloudsql.enable_pgaudit` flag, setting the value to `on` . For example, to use the `gcloud` command, specify the following, substituting your instance name for `[INSTANCE_NAME]` :\n```\ngcloud sql instances patch [INSTANCE_NAME] --database-flags cloudsql.enable_pgaudit=on\n```\nThe `cloudsql.enable_pgaudit` flag is listed with the other [supported flags](/sql/docs/postgres/flags#list-flags-postgres) and it is specific to Cloud SQL.\nAfter enabling the database flag, run the `CREATE EXTENSION` command using a compatible psql client. The following command creates the pgAudit extension for all databases in a Cloud SQL instance:\n```\nCREATE EXTENSION pgaudit;\n```\nUse the [standard instructions for flags](/sql/docs/postgres/flags) to set values for the `pgaudit.log` flag.\nFor example, to turn on auditing for all database operations on an instance, you can use the following `gcloud` command:\n```\n\u00a0 gcloud sql instances patch [INSTANCE_NAME] --database-flags \\\u00a0 cloudsql.enable_pgaudit=on,pgaudit.log=all\n```\nTo configure auditing settings for the database, follow the procedures under the [Customizing database audit logging](#customizing-database-audit-logging) section.\n### View database audit logs\nTo view audit logs, [enable](/logging/docs/audit/configure-data-access) Data Access audit logs for your project. The generated pgAudit logs for a given instance are sent to Cloud Logging as [Data Access audit logs](/logging/docs/audit#data-access) . Users can view the generated pgAudit logs through the [Logs Explorer](/logging/docs/view/logs-explorer-interface) application.\nIn the [Logs Explorer](/logging/docs/view/logs-explorer-interface) application, the pgAudit logs can be viewed by selecting the **cloudaudit.googleapis.com/data_access** log filter.\nAlternatively, you can use the following query to show all pgAudit logs for a given Cloud SQL project:\n```\nresource.type=\"cloudsql_database\"logName=\"projects/<your-project-name>/logs/cloudaudit.googleapis.com%2Fdata_access\"protoPayload.request.@type=\"type.googleapis.com/google.cloud.sql.audit.v1.PgAuditEntry\"\n```\nEach pgAudit log entry in the [Data Access audit logs](/logging/docs/audit#data-access) has fields representing the information collected for a query.\nHere is an example:\n```\n{\n protoPayload: {\n @type: \"type.googleapis.com/google.cloud.audit.AuditLog\"\n methodName: \"cloudsql.instances.query\"\n request: {\n  @type: \"type.googleapis.com/google.cloud.sql.audit.v1.PgAuditEntry\"\n  auditClass: \"READ\"\n  auditType: \"SESSION\"\n  chunkCount: \"1\"\n  chunkIndex: \"1\"\n  command: \"SELECT\"\n  database: \"finance\"\n  databaseSessionId: 2209692\n  parameter: \"[not logged]\"\n  statement: \"SELECT * FROM revenue\"\n  statementId: 2\n  substatementId: 1\n  user: \"alice\"\n }\n }\n}\n```\nThe following are descriptions of the fields in the Data Access audit logs:\n- **auditClass** . The type of the statement that is logged. Possible values are`READ`,`WRITE`,`FUNCTION`,`ROLE`,`DDL`,`MISC`, and`MISC_SET`.\n- **auditType** .`SESSION`or`OBJECT`.\n- **chunkCount** . Chunking can occur on the data provided in the`parameter`and`statement`fields. The`chunkCount`field indicates the total number of chunks. Also see the description of the`chunkIndex`field.\n- **chunkIndex** . Specifies the index number of the data chunks in the`parameter`and`statement`fields (in the current`request`container). The initial number is`1`. Also see the description of the`chunkCount`field.\n- **command** . For example,`ALTER TABLE`or`SELECT`.\n- **parameter** . The`chunkIndex`field can determine the contents of this field; see the description of the`chunkIndex`field. If the value for`pgaudit.log_parameter`is set, the`parameter`field can contain the statement parameters as quoted CSV data. If there are no parameters, this field contains`[none]`. Otherwise, this field contains`[not logged]`.\n- **statement** . Statement that was executed on the backend. The`chunkIndex`field can determine the contents of the`statement`field; see the description of the`chunkIndex`field.\n- **statementId** . Unique statement ID for this session. Each statement ID represents a backend call. Statement IDs are sequential, even if some statements are not logged.\n- **substatementId** . Sequential ID for each sub-statement within the main statement.\nSome of these fields also are described in the [pgAudit documentation](https://github.com/pgaudit/pgaudit/blob/master/README.md#format) .\n### Disable auditing\nTo disable database auditing, set the value of the `cloudsql.enable_pgaudit` flag to `off` . The value can be changed through the Google Cloud console or through the `gcloud` command. Use the [standard instructions for flags](/sql/docs/postgres/flags) to disable the `cloudsql.enable_pgaudit` flag.\n**Note:** Changing the value of the `cloudsql.enable_pgaudit` flag causes a [restart](/sql/docs/postgres/start-stop-restart-instance#restart) of the instance.\nAdditionally, run the `DROP EXTENSION` command, using a compatible psql client, to remove the extension state:\n```\nDROP EXTENSION pgaudit;\n```\n## Customize database audit logging in Cloud SQL\nThis section describes ways to customize the auditing behavior of a database instance.\n**Important:** Before using procedures in this section, ensure that you initially followed the steps for [setting up database auditing](#setting-up-database-auditing) , including [running the command to create the pgAudit extension](#running-create-extension) .\nFor additional capabilities of the extension, review the [pgAudit documentation](https://github.com/pgaudit/pgaudit/blob/master/README.md/) .\n### Requirement for superuser privileges\nIn Cloud SQL, extensions can only be created by users that are part of the `cloudsqlsuperuser` role. When you create a new PostgreSQL instance, the default PostgreSQL user is created for you (although you must set the user's password). The default PostgreSQL user is part of the `cloudsqlsuperuser` role. For more information, see [PostgreSQL users](/sql/docs/postgres/users) .\n### Configure auditing for all database operations on the instance\nTo configure auditing for all databases in an instance, you must apply pgAudit settings at the system level. The system-level audit parameters can be set only as database flags through the Google Cloud console or the `gcloud` command. For example, to turn on auditing for all database operations on an instance, you can use the following `gcloud` command:\n```\n\u00a0 gcloud sql instances patch [INSTANCE_NAME] --database-flags \\\u00a0 cloudsql.enable_pgaudit=on,pgaudit.log=all\n```\n### Configure specific operations on all instance databases\nFor auditing on all instance databases, you can use the Google Cloud console or the `gcloud` command. For example, to turn on auditing for only read and write operations on the instance, you can use the following `gcloud` command. This example uses a [list-based syntax](/sdk/gcloud/reference/topic/escaping) for specifying multiple values:\n```\n\u00a0 gcloud sql instances patch [INSTANCE_NAME] \\\u00a0 --database-flags ^:^cloudsql.enable_pgaudit=on:pgaudit.log=read,write\n```\nThe command overwrites the existing database flags.\n**Note:** To add new flags while retaining the existing ones, specify the values for all of the flags. Any flags not specified are set to their default values. For information about setting flags, including through the Google Cloud console, see [Setting a database flag](/sql/docs/postgres/flags#setting_a_database_flag) .\n### Configure auditing for a specific database\nTo configure auditing for a specific database, set the pgAudit parameters at the database-level. For example, the following SQL command can be used to turn on read/write auditing for a database named `finance` :\n```\nfinance=> ALTER DATABASE finance SET pgaudit.log = 'read,write';\n```\n### Configure auditing for a relation\nAuditing for a relation is narrower than auditing for a specific database.\nWhen you audit for a relation, a unique auditor role is assigned to the `pgaudit.role` parameter. Any object or relation that is granted to this role is logged.\nFor example, to configure auditing for all `SELECT` queries on the `salary` relation within the `employee` database, you can use these commands:\n```\nemployee=> CREATE ROLE auditor WITH NOLOGIN;employee=> ALTER DATABASE employee SET pgaudit.role = 'auditor';employee=> GRANT SELECT ON salary TO auditor;\n```\nYou also can audit a subset of columns for a given relation.\nFor example, the following command configures audit logging to occur only when the columns `income` and `tax_status` are accessed from the `salary` relation:\n```\nemployee=> GRANT SELECT(income, tax_status) ON salary TO auditor;\n```\n### Configure auditing for a database user\nYou can turn on auditing for a specific user by setting the `pgaudit.log` parameter on a per `ROLE` level.\nFor example, the following SQL command sets auditing for all database operations executed by the user `Alice` :\n```\nfinance=> ALTER ROLE alice SET pgaudit.log = 'all';\n```\n## Tips for audit management in Cloud SQL\nWhen you customize audit behavior, remember the following:\n- When the database flag`cloudsql.enable_pgaudit`is turned off, audit logging is immediately stopped. However, the applied pgAudit settings (for example, the`pgaudit.log`parameter settings) are preserved, unless they are explicitly removed.\n- The database instance is restarted whenever the database flag value for`cloudsql.enable_pgaudit`is changed.\n- Database users created through explicit`CREATE ROLE`commands lack the privilege to modify audit settings. Only database users created through the Google Cloud console and the`gcloud`command can modify audit settings.\n- When you enable both session audit logging and object audit logging, statements pertaining to both are added to logs. Session logging and object logging don't cancel or modify each other.## Limitations of the pgAudit extension in Cloud SQL for PostgreSQL\nAudit logs are temporarily written to the disk of their instance, taking up disk space before the logs are sent to Cloud Logging. Therefore, review all of the following information before using this feature:\n- The log ingestion rate is 4 MB per second. When the load from log generation exceeds the ingestion rate, the following can occur:- Unwanted growth in disk usage can occur.\n- Disk space can be exhausted.\n- If you have enabled this feature and you run many queries that meet your audit criteria, disk usage can grow too fast.\n- Before using this feature, plan to:- [Enable automatic storage increases](/sql/docs/postgres/instance-settings#automatic-storage-increase-2ndgen) .\n- Monitor the overall disk usage; the load from log generation cannot separately be monitored. Use the **cloudsql.googleapis.com/database/disk/utilization** metric in the [Metrics explorer](https://console.cloud.google.com/monitoring/metrics-explorer) .\n- If necessary, reduce disk usage by running fewer queries or reducing auditing.\n- If the available disk space is exhausted, audit logs for some queries may be lost.", "guide": "Cloud SQL"}