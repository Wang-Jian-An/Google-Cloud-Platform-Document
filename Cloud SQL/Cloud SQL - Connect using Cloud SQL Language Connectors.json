{"title": "Cloud SQL - Connect using Cloud SQL Language Connectors", "url": "https://cloud.google.com/sql/docs/postgres/connect-connectors", "abstract": "# Cloud SQL - Connect using Cloud SQL Language Connectors\nThe Cloud SQL Connectors are libraries that provide encryption and Identity and Access Management (IAM)-based authorization when connecting to a Cloud SQL instance. They can't provide a network path to a Cloud SQL instance if one is not already present.\nOther ways to connect to a Cloud SQL instance include [using a database client](/sql/docs/postgres/connect-admin-ip) or the [Cloud SQL Auth Proxy](/sql/docs/postgres/sql-proxy) . See the [About connection options](/sql/docs/postgres/connect-overview) page for more information about connecting to a Cloud SQL instance.\nThis page discusses the following Cloud SQL Connectors:\n- The Cloud SQL Java Connector\n- The Cloud SQL Python Connector [(Open in Colab)](https://colab.research.google.com/github/GoogleCloudPlatform/cloud-sql-python-connector/blob/main/samples/notebooks/postgres_python_connector.ipynb) \n- The Cloud SQL Go Connector\n- The Cloud SQL Node.js Connector", "content": "## Benefits\nUsing a Cloud SQL connector provides the following  benefits:\n- **IAM authorization:** Uses   IAM permissions to control who or   what can connect to your Cloud SQL instances.\n- **Convenience:** Removes the requirement to manage   SSL certificates, configure firewall rules, or enable authorized   networks.\n- **IAM database authentication** : Provides   support for [Cloud SQL's automatic   IAM database authentication](/sql/docs/postgres/authentication) feature.\n## Before you begin\n- Enable the Cloud SQL Admin API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=sqladmin&redirect=https://console.cloud.google.com) \n- Create a Cloud SQL instance, including configuring the default user.For more information about creating instances, see [Create instances](/sql/docs/postgres/create-instance) .For more information about configuring the default user, see [Set the password for the default user account](/sql/docs/postgres/create-manage-users#user-root) .\n- Configure the [roles and permissions](/sql/docs/mysql/roles-and-permissions) required to connect to a Cloud SQL instance. **Note:** If the authorizing IAM principal belongs to a different project than the one that contains the Cloud SQL instance, then you must do the following:- Enable the Cloud SQL Admin API in both the projects.\n- Add the IAM permissions for the IAM principal in the project that contains the Cloud SQL instance.\n## Setup\nThe Cloud SQL Java Connector is a library that provides  IAM-based authorization and encryption when connecting to a  Cloud SQL instance. It can provide a network path to a  Cloud SQL instance if one is not already present.\n### InstallationFor instructions on building and using the drivers for JDBC and R2DBC  with the Cloud SQL Java Connector, see the following links:- JDBC: [Connecting to Cloud SQL using JDBC](https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory/blob/main/docs/jdbc.md) .\n- R2DBC: [Connecting to Cloud SQL using R2DBC](https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory/blob/main/docs/r2dbc.md) .\nFor examples of this library being used in the context of an application, check out these [sample applications](/sql/docs/postgres/manage-connections#java) .\n### AuthenticationThis library uses [Application Default Credentials](https://developers.google.com/identity/protocols/application-default-credentials) to authenticate the connection to the Cloud SQL server.\nTo activate credentials locally, use the following [gcloud](https://cloud.google.com/sdk/gcloud/) command:\n```\n\u00a0 \u00a0 gcloud auth application-default login\u00a0 \u00a0 \n```\n### Connect with IntellijIn order to [connect IntelliJ](https://jetbrains.com/help/idea/connecting-to-a-database.html#mysql) to your Cloud SQL instance, you will need to add the library as a jar with dependencies in the **Additional Files** section on the driver settings page. For example, prebuilt fat jars can be found on the [Cloud SQL Java Connector Releases](https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory/releases) page for this purpose.The Cloud SQL Python Connector is a library that can be used alongside a  database driver to allow users with sufficient permissions to connect to a  Cloud SQL database without having to manually allowlist IPs or manage  SSL certificates.\nFor interactive examples of using the Cloud SQL Python Connector, open the [Cloud SQL Python Connector notebook](https://colab.research.google.com/github/GoogleCloudPlatform/cloud-sql-python-connector/blob/main/samples/notebooks/postgres_python_connector.ipynb) .\nThe currently supported driver for PostgreSQL is [pg8000](https://github.com/tlocke/pg8000) .\n### InstallationTo install the latest release, follow [these instructions](https://github.com/GoogleCloudPlatform/cloud-sql-python-connector#how-to-install-this-connector) .### AuthenticationThis library uses [Application Default Credentials](https://developers.google.com/identity/protocols/application-default-credentials) to authenticate the connection to the Cloud SQL server.\nTo activate credentials locally, use the following [gcloud](https://cloud.google.com/sdk/gcloud/) command:\n```\n\u00a0 \u00a0 gcloud auth application-default login\u00a0 \u00a0 \n```The Cloud SQL Go connector is a Cloud SQL connector designed for use with  the Go language. For improved security, this connector uses robust,  manually authenticated TLS 1.3 encryption between the client connector  and the server-side proxy, independent of the database protocol.\n### InstallationYou can install this repo with `go get` :\n```\n\u00a0 \u00a0 go get cloud.google.com/go/cloudsqlconn\u00a0 \u00a0 \n```The Node.js Connector is a library designed for use with the Node.js  runtime that allows you to connect securely to your Cloud SQL instance.\n### InstallationYou can install the library with `npm install` :\n```\n\u00a0 \u00a0 npm install @google-cloud/cloud-sql-connector\u00a0 \u00a0 \n```\n## Usage\nTo see this snippet in the context of a web application, view [the README on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/master/cloud-sql/postgres/servlet/README.md) .\n [  cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectorConnectionPoolFactory.java ](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectorConnectionPoolFactory.java) [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/cloud-sql/postgres/servlet/src/main/java/com/example/cloudsql/ConnectorConnectionPoolFactory.java) \n```\nimport com.zaxxer.hikari.HikariConfig;import com.zaxxer.hikari.HikariDataSource;import javax.sql.DataSource;public class ConnectorConnectionPoolFactory extends ConnectionPoolFactory {\u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 // secure - consider a more secure solution such as\u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 // keep secrets safe.\u00a0 private static final String INSTANCE_CONNECTION_NAME =\u00a0 \u00a0 \u00a0 System.getenv(\"INSTANCE_CONNECTION_NAME\");\u00a0 private static final String INSTANCE_UNIX_SOCKET = System.getenv(\"INSTANCE_UNIX_SOCKET\");\u00a0 private static final String DB_USER = System.getenv(\"DB_USER\");\u00a0 private static final String DB_PASS = System.getenv(\"DB_PASS\");\u00a0 private static final String DB_NAME = System.getenv(\"DB_NAME\");\u00a0 public static DataSource createConnectionPool() {\u00a0 \u00a0 // The configuration object specifies behaviors for the connection pool.\u00a0 \u00a0 HikariConfig config = new HikariConfig();\u00a0 \u00a0 // The following URL is equivalent to setting the config options below:\u00a0 \u00a0 // jdbc:postgresql:///<DB_NAME>?cloudSqlInstance=<INSTANCE_CONNECTION_NAME>&\u00a0 \u00a0 // socketFactory=com.google.cloud.sql.postgres.SocketFactory&user=<DB_USER>&password=<DB_PASS>\u00a0 \u00a0 // See the link below for more info on building a JDBC URL for the Cloud SQL JDBC Socket Factory\u00a0 \u00a0 // https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory#creating-the-jdbc-url\u00a0 \u00a0 // Configure which instance and what database user to connect with.\u00a0 \u00a0 config.setJdbcUrl(String.format(\"jdbc:postgresql:///%s\", DB_NAME));\u00a0 \u00a0 config.setUsername(DB_USER); // e.g. \"root\", _postgres\"\u00a0 \u00a0 config.setPassword(DB_PASS); // e.g. \"my-password\"\u00a0 \u00a0 config.addDataSourceProperty(\"socketFactory\", \"com.google.cloud.sql.postgres.SocketFactory\");\u00a0 \u00a0 config.addDataSourceProperty(\"cloudSqlInstance\", INSTANCE_CONNECTION_NAME);\u00a0 \u00a0 // The ipTypes argument can be used to specify a comma delimited list of preferred IP types\u00a0 \u00a0 // for connecting to a Cloud SQL instance. The argument ipTypes=PRIVATE will force the\u00a0 \u00a0 // SocketFactory to connect with an instance's associated private IP.\u00a0 \u00a0 config.addDataSourceProperty(\"ipTypes\", \"PUBLIC,PRIVATE\");\u00a0 \u00a0 // ... Specify additional connection properties here.\u00a0 \u00a0 // ...\u00a0 \u00a0 // Initialize the connection pool using the configuration object.\u00a0 \u00a0 return new HikariDataSource(config);\u00a0 }}\n```See [  How to use this Connector](https://github.com/GoogleCloudPlatform/cloud-sql-python-connector#how-to-use-this-connector) for detailed instructions on using the library. View example connection test code on GitHub.\n [  cloud-sql/postgres/sqlalchemy/connect_connector.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_connector.py) [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/cloud-sql/postgres/sqlalchemy/connect_connector.py) \n```\nimport osfrom google.cloud.sql.connector import Connector, IPTypesimport pg8000import sqlalchemydef connect_with_connector() -> sqlalchemy.engine.base.Engine:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Initializes a connection pool for a Cloud SQL instance of Postgres.\u00a0 \u00a0 Uses the Cloud SQL Python Connector package.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 # secure - consider a more secure solution such as\u00a0 \u00a0 # Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 # keep secrets safe.\u00a0 \u00a0 instance_connection_name = os.environ[\u00a0 \u00a0 \u00a0 \u00a0 \"INSTANCE_CONNECTION_NAME\"\u00a0 \u00a0 ] \u00a0# e.g. 'project:region:instance'\u00a0 \u00a0 db_user = os.environ[\"DB_USER\"] \u00a0# e.g. 'my-db-user'\u00a0 \u00a0 db_pass = os.environ[\"DB_PASS\"] \u00a0# e.g. 'my-db-password'\u00a0 \u00a0 db_name = os.environ[\"DB_NAME\"] \u00a0# e.g. 'my-database'\u00a0 \u00a0 ip_type = IPTypes.PRIVATE if os.environ.get(\"PRIVATE_IP\") else IPTypes.PUBLIC\u00a0 \u00a0 # initialize Cloud SQL Python Connector object\u00a0 \u00a0 connector = Connector()\u00a0 \u00a0 def getconn() -> pg8000.dbapi.Connection:\u00a0 \u00a0 \u00a0 \u00a0 conn: pg8000.dbapi.Connection = connector.connect(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 instance_connection_name,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"pg8000\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 user=db_user,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 password=db_pass,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 db=db_name,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ip_type=ip_type,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 return conn\u00a0 \u00a0 # The Cloud SQL Python Connector can be used with SQLAlchemy\u00a0 \u00a0 # using the 'creator' argument to 'create_engine'\u00a0 \u00a0 pool = sqlalchemy.create_engine(\u00a0 \u00a0 \u00a0 \u00a0 \"postgresql+pg8000://\",\u00a0 \u00a0 \u00a0 \u00a0 creator=getconn,\u00a0 \u00a0 \u00a0 \u00a0 # ...\u00a0 \u00a0 )\u00a0 \u00a0 return pool\n```See [  Usage](https://github.com/GoogleCloudPlatform/cloud-sql-go-connector#usage) for detailed instructions on using the library. View example connection test code on GitHub.\n [  cloudsql/postgres/database-sql/connect_connector.go ](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/connect_connector.go) [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/cloudsql/postgres/database-sql/connect_connector.go) \n```\npackage cloudsqlimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"database/sql\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"net\"\u00a0 \u00a0 \u00a0 \u00a0 \"os\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/cloudsqlconn\"\u00a0 \u00a0 \u00a0 \u00a0 \"github.com/jackc/pgx/v5\"\u00a0 \u00a0 \u00a0 \u00a0 \"github.com/jackc/pgx/v5/stdlib\")func connectWithConnector() (*sql.DB, error) {\u00a0 \u00a0 \u00a0 \u00a0 mustGetenv := func(k string) string {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 v := os.Getenv(k)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if v == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"Fatal Error in connect_connector.go: %s environment variable not set.\\n\", k)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return v\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 \u00a0 \u00a0 \u00a0 // secure - consider a more secure solution such as\u00a0 \u00a0 \u00a0 \u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 \u00a0 \u00a0 \u00a0 // keep passwords and other secrets safe.\u00a0 \u00a0 \u00a0 \u00a0 var (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbUser \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = mustGetenv(\"DB_USER\") \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// e.g. 'my-db-user'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbPwd \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= mustGetenv(\"DB_PASS\") \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// e.g. 'my-db-password'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dbName \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = mustGetenv(\"DB_NAME\") \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// e.g. 'my-database'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 instanceConnectionName = mustGetenv(\"INSTANCE_CONNECTION_NAME\") // e.g. 'project:region:instance'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 usePrivate \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 = os.Getenv(\"PRIVATE_IP\")\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 dsn := fmt.Sprintf(\"user=%s password=%s database=%s\", dbUser, dbPwd, dbName)\u00a0 \u00a0 \u00a0 \u00a0 config, err := pgx.ParseConfig(dsn)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 var opts []cloudsqlconn.Option\u00a0 \u00a0 \u00a0 \u00a0 if usePrivate != \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 opts = append(opts, cloudsqlconn.WithDefaultDialOptions(cloudsqlconn.WithPrivateIP()))\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 d, err := cloudsqlconn.NewDialer(context.Background(), opts...)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Use the Cloud SQL connector to handle connecting to the instance.\u00a0 \u00a0 \u00a0 \u00a0 // This approach does *NOT* require the Cloud SQL proxy.\u00a0 \u00a0 \u00a0 \u00a0 config.DialFunc = func(ctx context.Context, network, instance string) (net.Conn, error) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return d.Dial(ctx, instanceConnectionName)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 dbURI := stdlib.RegisterConnConfig(config)\u00a0 \u00a0 \u00a0 \u00a0 dbPool, err := sql.Open(\"pgx\", dbURI)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"sql.Open: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return dbPool, nil}\n```For detailed instructions on using the library, see [ Usage](https://github.com/GoogleCloudPlatform/cloud-sql-nodejs-connector#usage) .\n [  cloud-sql/postgres/knex/connect-connector.js ](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/connect-connector.js) [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/cloud-sql/postgres/knex/connect-connector.js) \n```\nconst Knex = require('knex');const {Connector} = require('@google-cloud/cloud-sql-connector');// In case the PRIVATE_IP environment variable is defined then we set// the ipType=PRIVATE for the new connector instance, otherwise defaults// to public ip type.const getIpType = () =>\u00a0 process.env.PRIVATE_IP === '1' || process.env.PRIVATE_IP === 'true'\u00a0 \u00a0 ? 'PRIVATE'\u00a0 \u00a0 : 'PUBLIC';// connectWithConnector initializes connection pool for a Cloud SQL instance// of Postgres using the Cloud SQL Node.js Connector.const connectWithConnector = async config => {\u00a0 // Note: Saving credentials in environment variables is convenient, but not\u00a0 // secure - consider a more secure solution such as\u00a0 // Cloud Secret Manager (https://cloud.google.com/secret-manager) to help\u00a0 // keep secrets safe.\u00a0 const connector = new Connector();\u00a0 const clientOpts = await connector.getOptions({\u00a0 \u00a0 instanceConnectionName: process.env.INSTANCE_CONNECTION_NAME,\u00a0 \u00a0 ipType: getIpType(),\u00a0 });\u00a0 const dbConfig = {\u00a0 \u00a0 client: 'pg',\u00a0 \u00a0 connection: {\u00a0 \u00a0 \u00a0 ...clientOpts,\u00a0 \u00a0 \u00a0 user: process.env.DB_USER, // e.g. 'my-user'\u00a0 \u00a0 \u00a0 password: process.env.DB_PASS, // e.g. 'my-user-password'\u00a0 \u00a0 \u00a0 database: process.env.DB_NAME, // e.g. 'my-database'\u00a0 \u00a0 },\u00a0 \u00a0 // ... Specify additional properties here.\u00a0 \u00a0 ...config,\u00a0 };\u00a0 // Establish a connection to the database.\u00a0 return Knex(dbConfig);};\n```\n## Troubleshoot\n### Driver versions\nMake sure you are using the latest version of the Cloud SQL Connectors and your database driver to avoid incompatibilities. Some older versions of drivers are not supported\n### Connection paths\nThe Cloud SQL Connectors provide authorization for connections, but they don't provide new paths to connectivity. For example, in order to connect to a Cloud SQL instance using a Private IP address, your application must already have VPC access.\n### Debug connection issues\nFor additional help with connection issues, see the [Troubleshoot](/sql/docs/postgres/troubleshooting#connectivity) and [Debug connection issues](/sql/docs/postgres/debugging-connectivity) pages.\n## What's next- See the [Cloud SQL Java Connector home page on GitHub](https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory) .\n- See the [Cloud SQL Python Connector home page on GitHub](https://github.com/GoogleCloudPlatform/cloud-sql-python-connector) .\n- Learn more about the [Cloud SQL Auth Proxy](/sql/docs/postgres/sql-proxy) .\n- Learn more about [IAM](/iam/docs/overview) .\n- Learn about [options for support](/sql/docs/support) .", "guide": "Cloud SQL"}