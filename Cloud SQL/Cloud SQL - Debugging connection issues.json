{"title": "Cloud SQL - Debugging connection issues", "url": "https://cloud.google.com/sql/docs/debugging-connectivity", "abstract": "# Cloud SQL - Debugging connection issues\n", "content": "## Introduction\nGenerally, connection issues fall into one of the following three areas:\n- Connecting - are you able to reach your instance over the network?\n- Authorizing - are you authorized to connect to the instance?\n- Authenticating - does the database accept your database credentials?\nEach of those can be further broken down into different paths for investigation. The following section includes examples of questions you can ask yourself to help further narrow down the issue:\n## Connection issues checklist\n- **Connecting** \n- Private IP\n- Have you [enabled the Service Networking API](https://console.cloud.google.com/apis/library/servicenetworking.googleapis.com) for your project?\n- Are you [using a Shared VPC](/sql/docs/mysql/configure-private-ip#api_and_iam_requirements) ?\n- Does your user or service account have the [required IAM permissions](/sql/docs/mysql/private-ip#api_and_iam_requirements) to manage a private services access connection?\n- Is [private services access connection](/sql/docs/mysql/configure-private-services-access) configured for your project?\n- Did you [allocate an IP address range](/sql/docs/mysql/configure-private-services-access#allocating_an_ip_address_range) for the private connection?\n- Did your [allocated IP address ranges](/sql/docs/mysql/private-ip#allocated_ip_address_rangese) contain at least a /24 space for every region where you are planning to create mysql instances?\n- If you are specifying an [allocated IP address range](/sql/docs/mysql/private-ip#allocated_ip_address_rangese) for your mysql instances, does the range contain at least a /24 space for every region where you are planning to create mysql instances in this range?\n- Is the [private connection](/sql/docs/mysql/configure-private-services-access#creating_a_private_connection) created?\n- If the private connection was changed, were the [vpc-peerings](/sql/docs/mysql/configure-private-services-access#change-psa-config) updated?\n- Do the [VPC logs](/vpc/docs/flow-logs) indicate any errors?\n- Is your source machine's IP a [non-RFC 1918 address](/sql/docs/mysql/configure-private-ip#non-rfc1918) ?\n- Public IP\n- Is your source IP listed as an [authorized network](/sql/docs/mysql/configure-ip#add) ?\n- Are SSL/TLS certificates [required](/sql/docs/mysql/authorize-ssl#enforcing_ssltls_encryption) ?\n- Does your user or service account have the [required IAM permissions](/sql/docs/mysql/roles-and-permissions#introduction) to connect to a Cloud SQL instance?\n- **Authorizing** \n- Cloud SQL Auth Proxy\n- Is the Cloud SQL Auth Proxy [up to date](/sql/docs/mysql/sql-proxy#keep-current) ?\n- Is the Cloud SQL Auth Proxy [running](/sql/docs/mysql/connect-auth-proxy#start-the-cloud-sql-proxy) ?\n- Is the instance [connection name](https://console.cloud.google.com/sql/instances) formed correctly in the [Cloud SQL Auth Proxy connection command](/sql/docs/mysql/connect-auth-proxy#connect-to-the-cloud-sql-proxy) ?\n- Have you checked the Cloud SQL Auth Proxy output? Pipe the output to a file, or watch the Cloud Shell terminal where you started the Cloud SQL Auth Proxy.\n- Does your user or service account have the [required IAM permissions](/sql/docs/mysql/roles-and-permissions#introduction) to connect to a Cloud SQL instance?\n- Have you [enabled the Cloud SQL Admin API](https://console.cloud.google.com/apis/library/sqladmin.googleapis.com) for your project?\n- If you have an outbound firewall policy, make sure it allows connections to port 3307 on the target Cloud SQL instance.\n- If you are connecting using UNIX domain sockets, confirm that the sockets were created by listing the directory specified with the **-dir** when you started the Cloud SQL Auth Proxy.\n- Cloud SQL connectors and language-specific code\n- Is the [connection string](/sql/docs/mysql/connect-overview#languages) formed correctly?\n- Have you compared your code with the [sample code](/sql/docs/mysql/connect-overview#languages) for your programming language?\n- Are you using a runtime or framework for which we don't have [sample code](/sql/docs/mysql/connect-overview#languages) ?\n- If so, have you [looked to the community](/sql/docs/mysql/getting-support#get_support_from_the_community) for relevant reference material?\n- Self-managed SSL/TLS certificates\n- Is the client certificate [installed](/sql/docs/mysql/authorize-ssl#overview) on the source machine?\n- Is the client certificate spelled correctly in the [connection arguments](/sql/docs/mysql/connect-admin-ip#connect-ssl) ?\n- Is the client certificate [still valid](/sql/docs/mysql/authorize-ssl#ssltls_certificates) ?\n- Are you getting errors when [connecting using SSL](/sql/docs/mysql/connect-admin-ip#connect-ssl) ?\n- Is the server certificate [still valid](#cert) ?\n- Authorized networks\n- Is the [source IP address](/sql/docs/mysql/configure-ip#add) included?\n- Are you using a [non-RFC 1918 IP address](/sql/docs/mysql/configure-private-ip#non-rfc1918) ?\n- Are you using an [unsupported IP address](/sql/docs/mysql/authorize-networks#limitations) ?\n- Connection failures\n- Are you [authorized to connect](#authorizing) ?\n- Are you seeing [connection limit](#limits) errors?\n- Is your application [closing connections](#aborted-connection) properly?\n- **Authenticating** \n- Native database authentication (username/password)\n- Are you seeing [access denied](#how-connect) errors?\n- Are the [username and password](/sql/docs/mysql/create-manage-users#creating) correct?\n- IAM database authentication\n- Have you [enabled the cloudsql.iam_authentication flag ](/sql/docs/postgres/create-edit-iam-instances#configuring_existing_instances_for) on your instance?\n- Did you [add a policy binding](/sql/docs/postgres/add-manage-iam-users#creating-a-database-user) for the account?\n- Are you using the Cloud SQL Auth Proxy with the [-enable_iam_login or an Oauth 2.0 token](/sql/docs/postgres/add-manage-iam-users#troubleshooting-a-login-failure) as the database password?\n- If using a service account, are you using the [shortened email name](/sql/docs/postgres/add-manage-iam-users#creating-a-database-user) ?\n- Learn more about [IAM database authentication in PostgreSQL](/sql/docs/mysql/authentication) .## Error messages\nFor specific API error messages, see the [Error messages](/sql/docs/error-messages) reference page.\n## Additional connectivity troubleshooting\nFor other issues, see the [Connectivity](/sql/docs/mysql/troubleshooting#connectivity) section in the troubleshooting page.\n## Common connection issues\n### Verify that your application is closing connections properly\nIf you see errors containing \" `Aborted connection nnnn to db:` \", it usually indicates that your application is not stopping connections properly. Network issues can also cause this error. The error does not mean that there are problems with your Cloud SQL instance. You are also encouraged to run `tcpdump` to inspect the packets to track down the source of the problem.\nFor examples of best practices for connection management, see [Managing database connections](/sql/docs/mysql/manage-connections) .\n### Verify that your certificates have not expired\nIf your instance is configured to use SSL, go to the [Cloud SQL Instances page](https://console.cloud.google.com/sql/instances) in the Google Cloud console and open the instance. Open its **Connections** page, select the **Security** tab and make sure that your server certificate is valid. If it has expired, you must add a new certificate and rotate to it.### Verify that you are authorized to connect\nIf your connections are failing, check that you are authorized to connect:\n- If you are having trouble connecting using an IP address, for example, you are connecting from your on-premises environment with the mysql client, then make sure that the IP address you are connecting from [is authorized to connect](/sql/docs/mysql/configure-ip) to the Cloud SQL instance.Connections to a Cloud SQL instance using a private IP address are automatically authorized for [RFC 1918address ranges](/vpc/docs/subnets#valid-ranges) . This way, all private clients can access the database without going through the Cloud SQL Auth Proxy. Non-RFC 1918 address ranges must be configured as [authorized networks](/sql/docs/mysql/authorize-networks) .Cloud SQL doesn't learn Non-RFC 1918 subnet routes from your VPC by default. You need to update the network peering to Cloud SQL to export any Non-RFC 1918 routes. For example:```\ngcloud compute networks peerings update cloudsql-mysql-googleapis-com \\--network=NETWORK \\--export-subnet-routes-with-public-ip \\--project=PROJECT_ID\n```\n- Here's your [current IP address](http://www.google.com#q=whats+my+ip) .\n- Try the [gcloud sql connect](/sdk/gcloud/reference/sql/connect) command to connect to your instance. This command authorizes your IP address for a short time. You can run this command in an environment with [gcloud CLI](/sdk/gcloud) and mysql client installed. You can also run this command in [Cloud Shell](/shell/docs) , which is available in the Google Cloud console and has [gcloud CLI](/sdk/gcloud) and the mysql client pre-installed. Cloud Shell provides a Compute Engine instance that you can use to connect to Cloud SQL.\n- Temporarily allow all IP addresses to connect to an instance. For IPv4 authorize`0.0.0.0/0`(for IPv6, authorize`::/0`. **Note:** Authorizing all IP addresses opens your database to any client that tries to connect. If you have sensitive or proprietary data in your database, don't use this method to investigate connectivity issues.\n### Verify how you connect\n```\nERROR 1045 (28000): Access denied for user 'root'@'1.2.3.4' (using password: NO)\n```\nwhen you connect, verify that you are providing a password.\nIf you get an error message like:\n```\nERROR 1045 (28000): Access denied for user 'root'@'1.2.3.4' (using password: YES)\n```\nwhen you connect, verify that you are using the correct password and that you are connecting over SSL if the instance requires it.### Determine how connections are being initiated\nYou can see information about your current connections by connecting to your database and running the following command:\n```\nSHOW PROCESSLIST;\n```\nConnections that show an IP address, such as `1.2.3.4` , are connecting using IP. Connections with `cloudsqlproxy~1.2.3.4` are using the Cloud SQL Auth Proxy, or else they originated from App Engine. Connections from `localhost` may be used by some internal Cloud SQL processes.\n### Connection limits\nThere are no QPS limits for Cloud SQL instances. However, there are connection, size, and App Engine specific limits in place. See [Quotas and Limits](/sql/docs/mysql/quotas) .\nDatabase connections consume resources on the server and the connecting application. Always use good connection management practices to minimize your application's footprint and reduce the likelihood of exceeding Cloud SQL [connection limits](/sql/docs/mysql/quotas#configurable-limits) . For more information, see [Managing database connections](/sql/docs/mysql/manage-connections) .\n### Show connections and threads\nIf you get the \"too many connections\" error message, or want to find out what is happening on an instance, you can show the number of connections and threads with `SHOW PROCESSLIST` .\nFrom a [MySQL client](/sql/docs/mysql/connect-admin-ip) , run:\n```\nmysql> SHOW PROCESSLIST;\n```\nYou get output similar to the following:\n```\n+----+-----------+--------------+-----------+---------+------+-------+----------------------+\n| Id | User  | Host   | db  | Command | Time | State | Info     |\n+----+-----------+--------------+-----------+---------+------+-------+----------------------+\n| 3 | user-name | client-IP | NULL  | Query | 0 | NULL | SHOW processlist  |\n| 5 | user-name | client-IP | guestbook | Sleep | 1 |  | SELECT * from titles |\n| 17 | user-name | client-IP | employees | Query | 0 | NULL | SHOW processlist  |\n+----+-----------+--------------+-----------+---------+------+-------+----------------------+\n3 rows in set (0.09 sec)\n```\nFor information about how to interpret the columns returned from `PROCESSLIST` , see the [MySQL reference](https://dev.mysql.com/doc/refman/5.7/en/show-processlist.html) .\nTo get a thread count, you can use:\n```\nmysql> SHOW STATUS WHERE Variable_name = 'Threads_connected';\n```\nYou get output similar to the following:\n```\n+-------------------+-------+\n| Variable_name  | Value |\n+-------------------+-------+\n| Threads_connected | 7  |\n+-------------------+-------+\n1 row in set (0.08 sec)\n```\n### Connections timeout (from Compute Engine)\nConnections with a Compute Engine instance timeout after 10 minutes of inactivity, which can affect long-lived unused connections between your Compute Engine instance and your Cloud SQL instance. For more information, see [Networking and Firewalls](/compute/docs/networks-and-firewalls) in the Compute Engine documentation.\nTo keep long-lived unused connections alive, you can set the [TCP keepalive](http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html) . The following commands set the TCP keepalive value to one minute and make the configuration permanent across instance reboots.\nDisplay the current tcp_keepalive_time value.\n```\ncat /proc/sys/net/ipv4/tcp_keepalive_time\n```\nSet tcp_keepalive_time to 60 seconds and make it permanent across reboots.\n```\necho 'net.ipv4.tcp_keepalive_time = 60' | sudo tee -a /etc/sysctl.conf\n```\nApply the change.\n```\nsudo /sbin/sysctl --load=/etc/sysctl.conf\n```\nDisplay the tcp_keepalive_time value to verify the change was applied.\n```\ncat /proc/sys/net/ipv4/tcp_keepalive_time\n```\n### Connect with IPv6\nIf you get either of the error messages\n```\nCan't connect to MySQL server on '2001:1234::4321' (10051)\nCan't connect to MySQL server on '2001:1234::4321' (101)\n```\nwhen you connect it is likely that you are attempting to connect to the IPv6 address of your instance but do not have IPv6 available on your workstation. You can verify whether IPv6 is functional on your workstation by going to [ipv6.google.com](https://ipv6.google.com/) . If it does not load then you do not have IPv6 available. Connect to the IPv4 address or your Cloud SQL instance instead. You may need to [add an IPv4 address to your instance](/sql/docs/mysql/configure-ip) first.\n## Tools for debugging connectivity\n**Note:** Tools that are based on the Internet Control Message Protocol (ICMP), such as `ping` and `traceroute` , do not work with Cloud SQL. Do not use these tools for troubleshooting because they can return false negatives.\n### tcpdump\nThe `tcpdump` is a tool to capture packets. It's highly encouraged to run `tcpdump` to capture and inspect the packets between your host and the Cloud SQL instances when you are debugging the connectivity problems.\n### Locate your local IP address\nIf you don't know the local address of your host, then run the `ip -br address show` command. On Linux, this shows the network interface, the status of the interface, the local IP, and MAC addresses. For example: `eth0    UP    10.128.0.7/32 fe80::4001:aff:fe80:7/64` .\nAlternatively, you can run `ipconfig` or `ifconfig` to see the status of your network interfaces.\n### Test with Connectivity Test\n[Connectivity Test](https://cloud.google.com/network-intelligence-center/docs/connectivity-tests) is a diagnostics tool that lets you check connectivity between endpoints in your network. It analyzes your configuration and in some cases performs run-time verification. It supports [Cloud SQL](https://cloud.google.com/network-intelligence-center/docs/connectivity-tests/concepts/test-google-managed-services) now. Follow [these instructions](https://cloud.google.com/network-intelligence-center/docs/connectivity-tests/how-to/running-connectivity-tests) to run tests with your Cloud SQL instances.\n### Test your connection\nYou can use the mysql client to test your ability to connect from your local environment. For more information, see [Connecting the mysql client using IP addresses](/sql/docs/mysql/connect-admin-ip) and [Connecting the mysql client using the Cloud SQL Auth Proxy](/sql/docs/mysql/connect-auth-proxy) .### Determine the IP address for your application\nTo determine the IP address of a computer running your application so you can authorize access to your Cloud SQL instance from that address, use one of the following options:\n- If the computer is not behind a proxy or firewall, log in to the computer and use the [What is my IP?](http://ipv4.whatismyv6.com/) site to determine its IP address.\n- If the computer is behind a proxy or firewall, log in to the computer and use a tool or service like [whatismyipaddress.com](https://www.whatismyip.com/proxy-check/) to determine its true IP address.\n### Open local ports\nTo verify that your host is listening on the ports you think it is, run the `ss -tunlp4` command. This tells you what ports are open and listening. For example, if you have a MySQL database running, then port 3306 should be up and listening. For SSH, you should see port 22. For example, if you have a PostgreSQL database running, then port 5432 should be up and listening. For SSH, you should see port 22.\n### All local port activity\nUse the `netstat` command to see all the local port activity. For example, `netstat -lt` shows all the currently active ports.\n### Connect to your Cloud SQL instance using telnet\nTo verify that you can connect to your Cloud SQL instance using `TCP` , run the `telnet` command. Telnet attempts to connect to the IP address and port you give it.\n`telnet 35.193.198.159 3306`\n`telnet 35.193.198.159 5432`\nOn success, you see the following: ``\n`Trying 35.193.198.159...`\n`Connected to 35.193.198.159.` .\nOn failure, you see `telnet` hangs until you force-close the attempt: ``\n`Trying 35.193.198.159...`\n`^C.` .\n### Client authentication\nClient authentication is controlled by a configuration file, which is named `pg_hba.conf` (HBA stands for host-based authentication).\nMake sure the replication connections section of the `pg_hba.conf` file on the source database is updated to accept connections from the Cloud SQL VPC's IP address range.\n### Cloud Logging\nCloud SQL and Cloud SQL use Cloud Logging. See the [Cloud Logging documentation](/logging/docs) for complete information and review the [Cloud SQL sample queries](/logging/docs/view/query-library-preview#sql-filters) .\nYou can view logs for Cloud SQL instances and other Google Cloud projects such as Cloud VPN or Compute Engine instances. To view logs for your Cloud SQL instance log entries:\n- In the Google Cloud console, go to the **Cloud Logging** page. [Go to Cloud Logging](https://console.cloud.google.com/logs/query) \n- Select an existing Cloud SQL project at the top of the page.\n- In the Query builder, add the following:\n- Resource: Select **Cloud SQL Database** . In the dialog, select a   Cloud SQL instance.\n- Log names: Scroll to the Cloud SQL section and select   appropriate log files for your instance. For example:- cloudsql.googlapis.com/mysql-general.log\n- cloudsql.googleapis.com/mysql.err\n- cloudsql.googleapis.com/postgres.log\n- Severity: Select a log level.\n- Time range: Select a preset or create a custom range.Use the [gcloud logging](/sdk/gcloud/reference/logging/read) command to view log entries. In the example below, replace `` . The [limit](/sdk/gcloud/reference/logging/read#--limit) flag is an optional parameter that indicates the maximum number of entries to return.\n```\ngcloud logging read \"projects/PROJECT_ID/logs/cloudsql.googleapis.com/mysql-general.log\" \\--limit=10\n```\n```\ngcloud logging read \"projects/PROJECT_ID/logs/cloudsql.googleapis.com/postgres.log\" \\--limit=10\n```\n### Private IP addresses\nConnections to a Cloud SQL instance using a private IP address are automatically authorized for [RFC 1918address ranges](/vpc/docs/subnets#valid-ranges) . Non-RFC 1918 address ranges must be configured in Cloud SQL as [authorizednetworks](/sql/docs/mysql/authorize-networks) . You also need to update the network peering to Cloud SQL to export any Non-RFC 1918 routes. For example:\n```\ngcloud compute networks peerings update cloudsql-mysql-googleapis-com --network=NETWORK --export-subnet-routes-with-public-ip --project=PROJECT_ID\n```### VPN troubleshooting\nSee the [Cloud VPN troubleshooting](/vpn/docs/support/troubleshooting#common_problems_and_solutions) page.", "guide": "Cloud SQL"}