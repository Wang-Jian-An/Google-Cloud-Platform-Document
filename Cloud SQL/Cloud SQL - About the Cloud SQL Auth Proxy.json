{"title": "Cloud SQL - About the Cloud SQL Auth Proxy", "url": "https://cloud.google.com/sql/docs/postgres/sql-proxy", "abstract": "# Cloud SQL - About the Cloud SQL Auth Proxy\nThis page summarizes the Cloud SQL Auth Proxy and describes how to use it to establish authorized, encrypted, and secured connections to your instances.\n**For step-by-step instructions on using the Cloud SQL Auth Proxy,** follow the link for your environment:\n- [Quickstart for using the Cloud SQL Auth Proxy](/sql/docs/postgres/quickstart-proxy-test) \n- [How to connect using the Cloud SQL Auth Proxy](/sql/docs/postgres/connect-auth-proxy) \n- [How to connect using the Cloud SQL Auth Proxy from GKE](/sql/docs/postgres/connect-kubernetes-engine) \nYou do not need to use the Cloud SQL Auth Proxy or configure SSL to connect to Cloud SQL from [App Engine standard environment](/sql/docs/postgres/connect-app-engine-standard) or [App Engine flexible environment](/sql/docs/postgres/connect-app-engine-flexible) .\n", "content": "## Benefits of the Cloud SQL Auth Proxy\nThe **Cloud SQL Auth Proxy** is a Cloud SQL connector that provides secure access to your instances without a need for [Authorized networks](/sql/docs/postgres/configure-ip) or for [configuring SSL](/sql/docs/postgres/configure-ssl-instance) .\nThe Cloud SQL Auth Proxy and [other Cloud SQL Connectors](/sql/docs/postgres/connect-connectors) have the following benefits:\n- **Secure connections:** The Cloud SQL Auth Proxy automatically encrypts traffic to and from the database using TLS 1.3 with a 256-bit AES cipher. SSL certificates are used to verify client and server identities, and are independent of database protocols; you won't need to manage SSL certificates.\n- **Easier connection authorization:** The Cloud SQL Auth Proxy uses IAM permissions to control who and what can connect to your Cloud SQL instances. Thus, the Cloud SQL Auth Proxy handles authentication with Cloud SQL, removing the need to provide static IP addresses.\n- **IAM database authentication** . Optionally, the Cloud SQL Auth Proxy supports an automatic refresh of OAuth 2.0 access tokens. For information about this functionality, see [Cloud SQL IAM database authentication](/sql/docs/postgres/authentication) .\nThe Cloud SQL Auth Proxy does not provide a new connectivity path; it relies on existing IP connectivity. To connect to a Cloud SQL instance using [private IP](/sql/docs/postgres/private-ip) , the Cloud SQL Auth Proxy must be on a resource with access to the same VPC network as the instance.\nIf you're using the Java, Python, or Go languages, then [connect with the corresponding connector](/sql/docs/postgres/connect-connectors) instead of with the Cloud SQL Auth proxy.\n## How the Cloud SQL Auth Proxy works\nThe Cloud SQL Auth Proxy works by having a local client running in the local environment. Your application communicates with the Cloud SQL Auth Proxy with the standard database protocol used by your database.\nThe Cloud SQL Auth Proxy uses a secure tunnel to communicate with its companion process running on the server. Each connection established through the Cloud SQL Auth Proxy creates one connection to the Cloud SQL instance.\nWhen an application connects to Cloud SQL Auth Proxy, it checks whether an existing connection between it and the target Cloud SQL instance is available. If a connection does not exist, it calls Cloud SQL Admin APIs to obtain an ephemeral SSL certificate and uses it to connect to Cloud SQL. Ephemeral SSL certificates expire in approximately an hour. Cloud SQL Auth Proxy refreshes these certificates before they expire.\nWhile the Cloud SQL Auth Proxy can listen on any port, it creates outgoing or egress connections to your Cloud SQL instance only on port 3307. Because Cloud SQL Auth Proxy calls APIs through the domain name `sqladmin.googleapis.com` , which does not have a fixed IP address, all egress TCP connections on port 443 must be allowed. If your client machine has an outbound firewall policy, make sure it allows outgoing connections to port 3307 on your Cloud SQL instance's IP.\nThe Cloud SQL Auth Proxy doesn't provide [connection pooling](/sql/docs/postgres/manage-connections#pools) , but can be paired with other connection pooling to increase efficiency.\n**Note:** The connection between the client applications and the Cloud SQL Auth Proxy client on the client machine is not encrypted. We recommend that you run the proxy on the same machine that contains your workload.\nThe following diagram shows how the Cloud SQL Auth Proxy connects to Cloud SQL:\n## Requirements for using the Cloud SQL Auth Proxy\nTo use the Cloud SQL Auth Proxy, you must meet the following requirements:\n- The Cloud SQL Admin API must be enabled.\n- You must provide the Cloud SQL Auth Proxy with [Google Cloud authentication credentials](/sql/docs/postgres/connect-auth-proxy#authentication-options) .\n- You must provide the Cloud SQL Auth Proxy with a valid database user account and password.\n- The instance must either have a public IPv4 address, or be configured to use [private IP](/sql/docs/postgres/private-ip) .The public IP address does not need to be accessible to any external address (it does not need to be added as an authorized network address).## Download and install the Cloud SQL Auth Proxy\n- Download the Cloud SQL Auth Proxy:```\ncurl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.linux.amd64\n```\n- Make the Cloud SQL Auth Proxy executable:```\nchmod +x cloud-sql-proxy\n```\n- Download the Cloud SQL Auth Proxy:```\ncurl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.linux.386\n```\n- If the`curl`command is not found, run`sudo apt install curl`and repeat the download command.\n- Make the Cloud SQL Auth Proxy executable:```\nchmod +x cloud-sql-proxy\n```\n- Download the Cloud SQL Auth Proxy:```\ncurl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.darwin.amd64\n```\n- Make the Cloud SQL Auth Proxy executable:```\nchmod +x cloud-sql-proxy\n```\n- Download the Cloud SQL Auth Proxy:```\n\u00a0 curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.darwin.arm64\u00a0 \n```\n- Make the Cloud SQL Auth Proxy executable:```\n\u00a0 chmod +x cloud-sql-proxy\u00a0 \n```Right-click\n [https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.x64.exe](https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.x64.exe) \nand select\n **Save Link As** \nto download the Cloud SQL Auth Proxy. Rename the file to\n`cloud-sql-proxy.exe`\n.\nRight-click\n [https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.x86.exe](https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.x86.exe) \nand select\n **Save Link As** \nto download the Cloud SQL Auth Proxy. Rename the file to\n`cloud-sql-proxy.exe`\n.\nThe Cloud SQL Auth Proxy has different container images, such as `distroless` , `alpine` , and `buster` . The default Cloud SQL Auth Proxy container image uses [distroless](https://github.com/GoogleContainerTools/distroless) , which contains no shell. If you need a shell or related tools, then download an image based on `alpine` or `buster` . For more information, see [Cloud SQL Auth Proxy Container Images](https://github.com/GoogleCloudPlatform/cloudsql-proxy#container-images) .\nYou can pull the latest image to your local machine using Docker by using the following command:\n```\ndocker pull gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.10.1\n```\n **Note** : The Cloud SQL Auth Proxy uses a repository that supports the`gcr.io`domain but serves images from Artifact Registry. For more information, see [Transition from Container Registry](/artifact-registry/docs/transition/transition-from-gcr) .\nFor other operating systems not included here, you can\n [compile the Cloud SQL Auth Proxy from source](http://github.com/GoogleCloudPlatform/cloudsql-proxy) \n.\n## Cloud SQL Auth Proxy startup options\nWhen you start the Cloud SQL Auth Proxy, you provide it with the following information:\n- What Cloud SQL instances to establish connections to\n- Where it will listen for data coming from your application to be sent to Cloud SQL\n- Where it will find the credentials it will use to authenticate your application to Cloud SQL\n- If required, which IP address type to use.\nThe Cloud SQL Auth Proxy startup options you provide determine whether it will listen on a TCP port or on a Unix socket. If it is listening on a Unix socket, it creates the socket at the location you choose; usually, the /cloudsql/ directory. For TCP, the Cloud SQL Auth Proxy listens on `localhost` by default.\nRun the `cloud-sql-proxy` executable with the argument `--help` to view the complete list of startup options.\n**Note:** The Cloud SQL Auth Proxy does not support Unix sockets on Windows. Linux-based operating systems have a maximum socket path length of 108 characters. If the total length of the path exceeds this length, you cannot connect.\nYou can install the Cloud SQL Auth Proxy anywhere in your local environment. The location of the Cloud SQL Auth Proxy binaries does not impact where it listens for data from your application.\nFor more information about how to start the Cloud SQL Auth Proxy, see [Start the Cloud SQL Auth Proxy](/sql/docs/postgres/connect-auth-proxy#start-proxy) .\n## Use a service account for authentication\nThe Cloud SQL Auth Proxy requires authenticating as a Cloud SQL IAM identity to authorize your connections to a Cloud SQL instance.\nThe advantage of using a service account for this purpose is that you can create a credential file specifically for the Cloud SQL Auth Proxy, and it is explicitly and permanently linked to the Cloud SQL Auth Proxy as long as it is running. For this reason, using a service account is the recommended method for production instances not running on a Compute Engine instance.\nThe credential file can be duplicated in a system image if you need to invoke the Cloud SQL Auth Proxy from multiple machines.\nTo use this method, you must create and manage the credential file. Only users with the `resourcemanager.projects.setIamPolicy` permission (such as project owners) can create the service account. If your Google Cloud user does not have this permission, you must have someone else create the service account for you, or use another method to authenticate the Cloud SQL Auth Proxy.\nLearn how to [ Create a service account](/sql/docs/postgres/connect-auth-proxy#create-service-account) .\n### Required permissions for service accounts\nWhen you use a service account to provide the credentials for the Cloud SQL Auth Proxy, you must create it with sufficient permissions. If you are using the finer-grained [Identity Access and Management](/sql/docs/postgres/iam-roles) (IAM) roles to manage your Cloud SQL permissions, you must give the service account a role that includes the `cloudsql.instances.connect` permission. The predefined Cloud SQL roles that include this permission are:\n- Cloud SQL Client\n- Cloud SQL Editor\n- Cloud SQL Admin\nIf you are using the legacy project roles (Viewer, Editor, Owner), the service account must have at least the Editor role.\n## Options for specifying Cloud SQL instances\nThere are several ways to tell the Cloud SQL Auth Proxy which instances you want to connect to. Some are explicit and some are implicit. In some configurations, you do not have to tell the Cloud SQL Auth Proxy ahead of time which instances you want to connect to, because the Cloud SQL Auth Proxy connects based on connection requests.\nYour options for instance specification depend on your operating system and environment:\n| Option             | Benefits                    | Caveats and Requirements                                       | Linux/macOS (Unix\u00a0sockets) | Java      | Windows     | Notes                    |\n|:-------------------------------------------------------|:-------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------|:---------------------------|:---------------------------|:----------------------------------------------------------------------------------|\n| Automatic instance discovery       | No need to specify instances; sockets created for all instances in default project. | Cloud SQL Auth Proxy API usage is increased. Must have gcloud CLI installed and authenticated, with a default project set. Must restart Cloud SQL Auth Proxy to add new instance. | Supported     | No       | No       | Not recommended for production instances.           |\n| Instances specified on Cloud SQL Auth Proxy invocation | Instance list known and static.              | Must restart Cloud SQL Auth Proxy to add new instance.                                | Supported     | Supported with TCP sockets | Supported with TCP sockets | For multiple instances, use a comma-separated list, with no spaces. Learn more. |\n[See sample invocations and connection strings](/sql/docs/postgres/connect-auth-proxy#invocations)\n### Keep the Cloud SQL Auth Proxy up to date\nGoogle occasionally releases new versions of the Cloud SQL Auth Proxy. You can see what the current version is by checking the [Cloud SQL Auth Proxy GitHub releases page](https://github.com/GoogleCloudPlatform/cloudsql-proxy/releases) . Future proxy releases will also be noted in the [Google Groups Cloud SQL announce](https://groups.google.com/forum/#!forum/google-cloud-sql-announce) forum.\n**Note:** you must be running version 1.12 or later to connect using [private IP](/sql/docs/postgres/private-ip) .\n### API usage\nThe Cloud SQL Auth Proxy issues requests to the Cloud SQL Admin API. These requests count against the API quota for your project.\nThe highest API usage occurs when you start the Cloud SQL Auth Proxy. While the Cloud SQL Auth Proxy is running, it issues 2 API calls per hour per connected instance.\n### Cloud SQL Auth Proxy parameters and flags\nThe Cloud SQL Auth Proxy accepts several flags and parameters when it is started. These options determine where and how the Cloud SQL Auth Proxy creates the sockets it uses for communicating with Cloud SQL, and how it authenticates.\nFor help with Cloud SQL Auth Proxy options, see the following information:\n- [Options for authenticating the Cloud SQL Auth Proxy](/sql/docs/postgres/connect-auth-proxy#authentication-options) \n- [Options for specifying Cloud SQL instances](#instances-options) \n- [Example Cloud SQL Auth Proxy invocations](/sql/docs/postgres/connect-auth-proxy#invocations) \n- [Cloud SQL Auth Proxy GitHub page](https://github.com/GoogleCloudPlatform/cloudsql-proxy) \n- The Cloud SQL Auth Proxy help, displayed with`./cloud-sql-proxy --help`## Use the Cloud SQL Auth Proxy in a production environment\nWhen you are using the Cloud SQL Auth Proxy in a production environment, there are some steps you can take to ensure that the Cloud SQL Auth Proxy provides the required availability for your application.\n### Ensure that the Cloud SQL Auth Proxy is run as a persistent service\nIf the Cloud SQL Auth Proxy process is stopped, all existing connections through it are dropped, and your application cannot create any more connections to the Cloud SQL instance with the Cloud SQL Auth Proxy. To prevent this scenario, be sure to run the Cloud SQL Auth Proxy as a persistent service, so that if the Cloud SQL Auth Proxy exits for any reason, it is automatically restarted. This can be accomplished by using a service such as `systemd` , `upstart` , or `supervisor` . For the Windows operating system, run the Cloud SQL Auth Proxy as a Windows Service. In general, make sure the Cloud SQL Auth Proxy has the same uptime requirements as your application process.\n**Note:** The Cloud SQL Auth Proxy is a Windows executable but is not a Windows Service. There are several tools available that can wrap a regular application binary as a service.\n### How many copies of the Cloud SQL Auth Proxy your application needs\nThere is no need to create a proxy process for every application process; many application processes can share a single Cloud SQL Auth Proxy process. Run one Cloud SQL Auth Proxy client process per workstation or virtual machine.\nIf you are using auto-scaling for virtual machines, ensure that the Cloud SQL Auth Proxy is included in your virtual machine configuration, so that whenever a new virtual machine is started, it has its own Cloud SQL Auth Proxy process.\nIt is up to you to manage how many connections your application requires, whether by limiting or pooling the connections. The Cloud SQL Auth Proxy does not place any limitations on new connection rates or persistent connection count.\n### Reduce Cloud SQL Auth Proxy output\nIf you need to reduce the size of the Cloud SQL Auth Proxy log, you can do so by setting `--quiet` when you start the Cloud SQL Auth Proxy. Keep in mind, however, that doing so reduces the effectiveness of the Cloud SQL Auth Proxy output in diagnosing connection issues.\n### How failover affects the Cloud SQL Auth Proxy\nIf you are running the Cloud SQL Auth Proxy on an instance configured for High Availability, and a failover occurs, connections through the Cloud SQL Auth Proxy are affected the same way as connections over IP: all existing connections are lost, and the application must establish new connections. However, no manual intervention is required; the application can continue using the same connection strings it was before.\n### Keep the Cloud SQL Auth Proxy Docker image up to date\nThe Cloud SQL Auth Proxy Docker image is based on a specific version of the Cloud SQL Auth Proxy. When a new version of the Cloud SQL Auth Proxy becomes available, pull the new version of the Cloud SQL Auth Proxy Docker image to keep your environment up to date. You can see the current version of the Cloud SQL Auth Proxy by checking the [Cloud SQL Auth Proxy GitHub releases page](https://github.com/GoogleCloudPlatform/cloudsql-proxy/releases) .\n### How to enforce use of the Cloud SQL Auth Proxy\nYou can enforce the use of the Cloud SQL Auth Proxy in Cloud SQL instance connections using [ConnectorEnforcement](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/instances#ConnectorEnforcement) . With connector enforcement, direct database connection are rejected.\nTo use connector enforcement, you use the `ConnectorEnforcement` field in the `instances` API.\nFor more information, see [Edit instances](https://cloud.google.com/sql/docs/postgres/edit-instance) .\n## About the Cloud SQL Proxy Operator\nCloud SQL Proxy Operator is an open-source Kubernetes operator that automates connecting workloads in a GKE cluster to Cloud SQL databases. The Cloud SQL Auth Proxy Operator utilizes a custom resource AuthProxyWorkload that specifies the Cloud SQL Auth Proxy configuration for a specific workload. The Cloud SQL Auth Proxy Operator reads this resource and adds a Cloud SQL Auth Proxy container with the required configuration to the appropriate workloads.\nWhen you install the operator in your GKE cluster and configure your workloads and Cloud SQL instances, the Cloud SQL Auth Proxy Operator automatically configures the Cloud SQL Auth Proxy and connects the GKE workloads to your Cloud SQL instances.\nCloud SQL Auth Proxy Operator also checks the status of the Cloud SQL Auth Proxy. If the Cloud SQL Auth Proxy is unable to connect, the Cloud SQL Auth Proxy Operator outputs debugging information, and provides you with guidance to troubleshoot and repair common configuration issues.\nFor more information, see [Connect using the Cloud SQL Proxy Operator](/sql/docs/postgres/connect-proxy-operator) .\n## What's next\n- [Learn more about the Cloud SQL Auth Proxy](https://github.com/GoogleCloudPlatform/cloudsql-proxy) .", "guide": "Cloud SQL"}