{"title": "Cloud SQL - Replication lag", "url": "https://cloud.google.com/sql/docs/postgres/replication/replication-lag", "abstract": "# Cloud SQL - Replication lag\nThis page describes how to troubleshoot and fix replication lag for Cloud SQL read replicas.\n", "content": "## Overview\n[PostgreSQL streaming replication](https://www.postgresql.org/docs/current/warm-standby.html#STREAMING-REPLICATION)\nReplication lag can happen in a few scenarios, such as:\n- The primary instance can't send the changes fast enough to the replica.\n- The replica can't receive the changes quickly enough.\n- The replica can't apply the changes quickly enough.\n`network_lag`\n`replica_lag`\n`replica_lag`\n`replica_byte_lag`\n[Monitor replication lag](#metrics)\n## Optimize queries and schema\nThis section suggests some common query and schema optimizations you can make to improve replication performance.\n### Long-running queries in the read replica\nLong-running queries in the replica might block replication for Cloud SQL. You might want to have separate replicas for online transaction processing (OLTP) and online analytical processing (OLAP) purposes and only send long-running queries to the OLAP replica.\nConsider adjusting the `max_standby_archive_delay` and `max_standby_streaming_delay` flags for your replica.\nIf you suspect VACUUM is the culprit, and query cancellation is not acceptable, consider setting the `hot_standby_feedback` flag in the replica.\nReview [PostgreSQL Hot Standby documentation](https://www.postgresql.org/docs/current/hot-standby.html#HOT-STANDBY-CONFLICT) for more information.\n### Exclusive locks due to DDL\nData definition language (DDL) commands, such as `ALTER TABLE` and `CREATE INDEX` , can cause replication lag in the replica due to exclusive locks. To avoid lock contention, consider scheduling DDL execution during times when the query load is lower on the replicas.\n[PostgreSQL Hot Standby documentation](https://www.postgresql.org/docs/current/hot-standby.html#HOT-STANDBY-CONFLICT)\n### Overloaded replica\nIf a read replica is receiving too many queries, replication could be blocked. Consider splitting the reads among multiple replicas to reduce the load on each one.\nTo avoid query spikes, consider throttling replica read queries in your application logic or in a proxy layer if you use one.\nIf there are spikes of activity on the primary instance, consider spreading out updates.\n### Monolithic primary database\nConsider sharding the primary database vertically (or horizontally) to prevent one or more lagging tables from holding back all the other tables.\n## Monitor replication lag\nYou can use the `replica_lag` and `network_lag` metrics to monitor replication lag and identify whether the cause of the lag is in the primary database, the network, or the replica.\n| Metric                    | Description                                                                                                                                                                            |\n|:------------------------------------------------------------------------------------||\n| Replication lag (cloudsql.googleapis.com/database/replication/replica_lag)   | The number of seconds that the replica's state is lagging behind the state of the primary instance. This is the difference between the current time and the original timestamp at which the primary database committed the transaction that is currently being applied on the replica. In particular, writes might be counted as lagging even if they have been received by the replica, if the replica hasn't yet applied the write to the database. This metric is calculated using now() - pg_last_xact_replay_timestamp() in the replica. This is an approximation. If replication is broken, the replica doesn't know how far ahead the primary database is and this metric would not indicate total lag. |\n| Lag bytes (cloudsql.googleapis.com/database/postgres/replication/replica_byte_lag) | The amount of bytes by which the replica's state is lagging behind the state of the primary database. replica_byte_lag exports 4 time series, and the replica_lag_type label can indicate any of the following: sent_location: Indicates how many bytes of WAL have been generated, but haven't yet been sent to the replica. write_location: Write minus sent lag shows WAL bytes in the network, that have been sent out but not yet written in the replica. flush_location: Flush minus write lag shows WAL bytes written in the replica but not yet flushed in the replica. replay_location: Shows total lag in bytes. Replay minus flush lag indicates replay delay.           |\n| Network lag (cloudsql.googleapis.com/database/replication/network_lag)    | The amount of time in, seconds that it takes from commit in the primary database to reach the WAL receiver in the replica. If the network_lag is zero, or negligible, but the replica_lag is high, it indicates that the WAL receiver is not able to apply replication changes fast enough.                                                                                                       |\n## Verify replication\n```\nselect status, last_msg_receipt_time from pg_stat_wal_receiver;\n```\nIf replication is happening, you see the status `streaming` and a recent last_msg_receipt_time:\n```\npostgres=> select status, last_msg_receipt_time from pg_stat_wal_receiver;\u00a0 status \u00a0 | \u00a0 \u00a0 last_msg_receipt_time-----------+-------------------------------\u00a0streaming | 2020-01-21 20:19:51.461535+00(1 row)\n```\nIf replication is not happening, an empty result is returned:\n```\npostgres=> select status, last_msg_receipt_time from pg_stat_wal_receiver;\u00a0status | last_msg_receipt_time--------+-----------------------(0 rows)\n```", "guide": "Cloud SQL"}