{"title": "Cloud SQL - Cloud SQL built-in database authentication", "url": "https://cloud.google.com/sql/docs/postgres/built-in-authentication", "abstract": "# Cloud SQL - Cloud SQL built-in database authentication\nThis page describes how built-in authentication works on Cloud SQL instances and how database administrators can set password policies for local database users.\n", "content": "## Introduction\nAuthentication is the process of verifying the identity of a user who is attempting to access an instance. Cloud SQL uses the following types of authentication for database users:\n- The database's built-in authentication uses a username and a password to authenticate local database users. The current page describes this type of authentication.\n- IAM database authentication uses IAM to authenticate a user. For more information, see [Overview of Cloud SQL IAM database authentication](/sql/docs/postgres/authentication) .\nAlthough IAM database authentication is more secure and reliable, you might prefer to use built-in authentication or a hybrid authentication model that includes both authentication types.\nYou might create and manage local database users locally within a database to allow specific persons or applications to access a database. Such database users own the objects they create in the database. Cloud SQL offers strong built-in password enforcement. You can define and enable such enforcement through password policies.\n**Note:** Password policies don't apply to hashed passwords.\n## Instance password policies\nYou can set a password policy at the instance level when you [create an instance](/sql/docs/postgres/create-instance) .\nA password policy for an instance can include the following options:\n- **Minimum length** : specify the minimum number of characters that   the password must have.\n- **Password complexity** : check if the password is a  combination of lowercase, uppercase, numeric, and non-alphanumeric  characters.\n- **Restrict password reuse** : specify the number of previous passwords that you can't reuse.\n- **Disallow username** : prevent the use of the username in the password.\n- **Set password change interval** : specify the minimum duration   after which you can change the password.You need to explicitly enable a password policy at the instance level. You can modify it later by [editing the instance](/sql/docs/postgres/edit-instance) .\n**Note:** When you enable a password policy, due to password policy verification, statements that create users or change user passwords cause additional latency usually spanning less than 200ms.\n## User password policies\nWhile [creating a user](/sql/docs/postgres/create-manage-users#creating) , you can set the following password usage restrictions:\n- **Set password to expire** : specify the number of days after which the password expires and you need to create a new one.\n- **Lock after failed attempts** : specify the number of times that you can try the password incorrectly before the account is locked.\nYou can also modify user password policies.\nThe status of a user, indicating whether their password has expired or they're locked out, is visible when you [list the users](/sql/docs/postgres/create-manage-users#list_users) of the instance. You can unlock users and change the password from the Users page.\n## Cloud SQL built-in authentication for read replicas\nYou manage password policies for replicas on the primary instance. You can't separately modify password policies for read replicas.\nWhen you promote an instance, you need to re-enable the instance password policy, along with the policy options.\n## What's next\n- [Create an instance and set the password policy](/sql/docs/postgres/create-instance) .\n- [Create users with built-in authentication](/sql/docs/postgres/create-manage-users) .", "guide": "Cloud SQL"}