{"title": "Cloud SQL - Use customer-managed encryption keys (CMEK)", "url": "https://cloud.google.com/sql/docs/postgres/configure-cmek", "abstract": "# Cloud SQL - Use customer-managed encryption keys (CMEK)\nThis page describes how to set up a service account and keys for customer-managed encryption keys, and how to create an instance that uses a customer-managed encryption key. To learn more about using customer-managed encryption keys with Cloud SQL, see [Overview of customer-managed encryption keys](/sql/docs/postgres/cmek) .\n", "content": "## Before you begin\n- Make sure you have the Cloud SQL Admin role on your user account. [ Go to the IAM page](https://console.cloud.google.com/iam-admin/iam) \n- Enable the Cloud Key Management Service API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=cloudkms.googleapis.com) \n- Enable the Cloud SQL Admin API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=sqladmin) \n## Workflow for creating a Cloud SQL instance with CMEK\n- [Create a service account](#service-account) for each project that requires customer-managed encryption keys.\n- [Create a keyring and key](#key) , and set the location for each key. The location is the Google Cloud region.\n- [Grant the service account access to the key](#grantkey) .\n- Copy or write down the key ID (KMS_KEY_ID) and location for the key, and the ID (KMS_KEYRING_ID) for the keyring. You need this information when granting the service account access to the key.\n- Go to a project and [create a Cloud SQL instance](#createcmekinstance) with the following options:- The same location as the customer-managed encryption key\n- The customer-managed key configuration\n- The customer-managed encryption key IDYour Cloud SQL instance is now enabled with CMEK.\n## Create a service account\nYou need to create a service account for each project that requires customer-managed encryption keys.\nTo allow a user to manage service accounts, grant one of the following roles:\n- Service Account User (`roles/iam.serviceAccountUser`): Includes permissions to list service accounts, get details about a service account, and impersonate a service account.\n- Service Account Admin (`roles/iam.serviceAccountAdmin`): Includes permissions to list service accounts and get details about a service account. Also includes permissions to create, update, and delete service accounts, and to view or change the Cloud SQL for PostgreSQL policy on a service account.\nCurrently, you can only use [gcloud CLI](/sdk/gcloud) commands to create the type of service account you need for customer-managed encryption keys. If you are using the Console, Cloud SQL automatically creates this service account for you.\n```\ngcloud beta services identity create \\--service=sqladmin.googleapis.com \\--project=PROJECT_ID\n```To create a service account, use a [Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/project_service_identity) .\n [  cloud_sql/postgres_instance_cmek/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_cmek/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_cmek/main.tf) \n```\nresource \"google_project_service_identity\" \"gcp_sa_cloud_sql\" {\n provider = google-beta\n service = \"sqladmin.googleapis.com\"\n}\n```To apply your Terraform configuration in a Google Cloud project, complete the steps in the following sections.## Prepare Cloud Shell\n- Launch [Cloud Shell](https://shell.cloud.google.com/) .\n- Set the default Google Cloud project  where you want to apply your Terraform configurations.You only need to run this command once per project, and you can run it in any directory.```\nexport GOOGLE_CLOUD_PROJECT=PROJECT_ID\n```Environment variables are overridden if you set explicit values in the Terraform  configuration file.\n## Prepare the directoryEach Terraform configuration file must have its own directory (also called a ).- In [Cloud Shell](https://shell.cloud.google.com/) , create a directory and a new  file within that directory. The filename must have the`.tf`extension\u2014for example`main.tf`. In this  tutorial, the file is referred to as`main.tf`.```\nmkdir DIRECTORY && cd DIRECTORY && touch main.tf\n```\n- If you are following a tutorial, you can copy the sample code in each section or step.Copy the sample code into the newly created `main.tf` .Optionally, copy the code from GitHub. This is recommended  when the Terraform snippet is part of an end-to-end solution.\n- Review and modify the sample parameters to apply to your environment.\n- Save your changes.\n- Initialize Terraform. You only need to do this once per directory.```\nterraform init\n```Optionally, to use the latest Google provider version, include the `-upgrade` option:```\nterraform init -upgrade\n```\n## Apply the changes\n- Review the configuration and verify that the resources that Terraform is going to create or  update match your expectations:```\nterraform plan\n```Make corrections to the configuration as necessary.\n- Apply the Terraform configuration by running the following command and entering`yes`at the prompt:```\nterraform apply\n```Wait until Terraform displays the \"Apply complete!\" message.\n- [Open your Google Cloud project](https://console.cloud.google.com/) to view  the results. In the Google Cloud console, navigate to your resources in the UI to make sure  that Terraform has created or updated them.\n **Note:** Terraform samples typically assume that the required APIs are enabled in your Google Cloud project.\nThe previous command returns a service account name. You use this service account name during the procedure in [Granting the service account access to the key](#grantkey) .\n## Create a key\n**Note:** You can use an externally managed key with CMEK using the Cloud EKM service to [make the key available](/kms/docs/ekm) through Cloud KMS.\nYou can create the key in the same Google Cloud project as the Cloud SQL instance or in a separate user project. The Cloud KMS key ring location must match the region where you want to create Cloud SQL instance. A multi-region or global region key **will not** work. The Cloud SQL instance create request fails if the regions don't match.\n**Warning:** Never delete the primary key version that you initially use when you create your instance. You can't restore the backup for the instance if the key version that was originally used when the instance was created is destroyed. Even when the key version is rotated, the original key version must be maintained. If it is destroyed, it can't be re-created.\n**Note:** Sometimes, a Cloud SQL instance enabled with CMEK has the Cloud KMS key hosted in a different cloud project. For this scenario, when you enable VPC-SC, you must add the KMS key hosting project to the security perimeter.\n**Note:** Cloud KMS usage is subject to a [quota](/kms/quotas) . GKE calls the Cloud KMS API every time it performs a cryptographic operation. Confirm that you have enough quota to enable application-layer secrets encryption for your application.\nTo create a Cloud KMS key:\n- In the Google Cloud console, go to the **Key management** page. [Go to Key management](https://console.cloud.google.com/security/kms/keyrings) \n- Click **Create key ring** .\n- Add a **Key ring name** . Note this name because you need it  when granting the service account access to the key.\n- Add a **Key ring location** .\n- Click **Create** . The **Create key** page opens.\n- Add a **Key name** .\n- Select a **Purpose** (symmetric or asymmetric).\n- Select a **Rotation period** and **Starting on date** .\n- Click **Create** .\n- On the **Keys** table, click the three dots in the last column, and  select **Copy Resource ID** or write it down. This is the  KMS_KEY_ID. You need the KMS_KEY_ID when granting the key access  to the service account.\n- Create a new key ring.```\ngcloud kms keyrings create KMS_KEYRING_ID \\--location=GCP_REGION\u00a0 \n```Write down this name because you need it when granting the key access to  the service account.\n- Create a key on the key ring.```\ngcloud kms keys create KMS_KEY_ID \\--location=GCP_REGION \\--keyring=KMS_KEYRING_ID \\--purpose=encryption\u00a0 \n```Write down this name because you need it when granting the key access to  the service account.\nTo create a keyring, use a [Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/kms_key_ring) .\n [  cloud_sql/postgres_instance_cmek/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_cmek/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_cmek/main.tf) \n```\nresource \"google_kms_key_ring\" \"keyring\" {\n provider = google-beta\n name  = \"keyring-name\"\n location = \"us-central1\"\n}\n```\nTo create a key, use a [Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/kms_crypto_key) .\n [  cloud_sql/postgres_instance_cmek/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_cmek/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_cmek/main.tf) \n```\nresource \"google_kms_crypto_key\" \"key\" {\n provider = google-beta\n name  = \"crypto-key-name\"\n key_ring = google_kms_key_ring.keyring.id\n purpose = \"ENCRYPT_DECRYPT\"\n}\n```\nApply the Terraform configuration:\n```\nterraform apply\n```\n## Grant the service account access to the key\nYou only need to perform this procedure if you are using gcloud or the API.\nTo grant the service account access:\n```\ngcloud kms keys add-iam-policy-binding KMS_KEY_ID \\--location=GCP_REGION \\--keyring=KMS_KEYRING_ID \\--member=serviceAccount:service-PROJECT_NUMBER@gcp-sa-cloud-sql.iam.gserviceaccount.com \\--role=roles/cloudkms.cryptoKeyEncrypterDecrypter\n```To grant access to the key, use a [Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/google_kms_crypto_key_iam#google_kms_crypto_key_iam_binding) .\n [  cloud_sql/postgres_instance_cmek/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_cmek/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_cmek/main.tf) \n```\nresource \"google_kms_crypto_key_iam_binding\" \"crypto_key\" {\n provider  = google-beta\n crypto_key_id = google_kms_crypto_key.key.id\n role   = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\"\n members = [ \"serviceAccount:${google_project_service_identity.gcp_sa_cloud_sql.email}\",\n ]\n}\n```\nApply the Terraform configuration:\n```\nterraform apply\n```\n## Create a Cloud SQL instance with CMEK\n**Note:** You can't enable customer-managed encryption keys on existing instances.\nTo create an instance with customer-managed encryption keys:\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- Click **Create instance** .\n- Choose the database engine.\n- Enter a name for the instance. Do not include sensitive or personally  identifiable information in your instance name; it is externally visible.  You do not need to include the project ID in the instance name. This is  created automatically where appropriate (for example, in the log files).\n- Enter the password for the`'root'@'%'`user.\n- Set the region for your instance.  Place your instance in the same region as the resources that access it. In  most cases, you don't need to specify a zone.\n- In the **Configuration options** section, select all your  configurations options until you reach **Machine type and storage** .\n- Expand **Machine type and storage** .\n- In the **Encryption** section, select **Customer-managed key** .\n- Select the KMS key from the dropdown menu or manually enter the  KMS_KEY_ID. Only KMS keys in the same project and region as the  instance are displayed. To choose a KMS key belonging to a different project  but in the same region, select **Don't see your key? Enter key resource\n ID** and enter the KMS_KEY_ID captured earlier.\n- If the service account does not have permission to encrypt/decrypt with  the selected key, a message displays. If this happens, click **Grant** to  grant the service account the`roles/cloudkms.cryptoKeyEncrypterDecrypter>`IAM role on the selected KMS key.\n- Once the configuration options are selected, click **Create** .\n- You see a message explaining the implications of using customer-managed  encryption key. Read and acknowledge it to proceed further with instance  creation.\n```\ngcloud sql instances create INSTANCE_NAME \\--project=PROJECT_ID \\--disk-encryption-key=KMS_KEY_ID \\--database-version=VERSION \\--cpu=NUMBER_CPUS \\--memory=MEMORY_SIZE \\--region=REGION \\--root-password=INSERT-PASSWORD-HERE\n```To create an instance with CMEK, use a [Terraform resource](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/sql_database_instance) .\n [  cloud_sql/postgres_instance_cmek/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_cmek/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/cloud_sql/postgres_instance_cmek/main.tf) \n```\nresource \"google_sql_database_instance\" \"postgres_instance_with_cmek\" {\n name    = \"postgres-instance-cmek\"\n provider   = google-beta\n region    = \"us-central1\"\n database_version = \"POSTGRES_14\"\n encryption_key_name = google_kms_crypto_key.key.id\n settings {\n tier = \"db-custom-2-7680\"\n }\n # set `deletion_protection` to true, will ensure that one cannot accidentally delete this instance by\n # use of Terraform whereas `deletion_protection_enabled` flag protects this instance at the GCP level.\n deletion_protection = false\n}\n```To delete your changes, do the following:- To disable deletion protection, in your Terraform configuration file set the`deletion_protection`argument to`false`.```\ndeletion_protection = \"false\"\n```\n- Apply the updated Terraform configuration by running the following command and    entering`yes`at the prompt:```\nterraform apply\n```\n- Remove resources previously applied with your Terraform configuration by running the following command and entering `yes` at the prompt:```\nterraform destroy\n```To create an instance with customer-managed encryption keys, pass\n`diskEncryptionConfiguration`\nto the command.\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The instance ID\n- : The region\n- : Emum version string (for example, POSTGRES_12)\n- : The ID you received from creating a key.\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/v1/projects/project-id/instances\n```\nRequest JSON body:\n```\n{\n \"name\":\"instance-id\",\n \"region\":\"region\",\n \"databaseVersion\": \"database-version\",\n \"diskEncryptionConfiguration\" :\n {\n  \"kmsKeyName\" : \"kms-resource-id\"\n },\n \"settings\":\n {\n  \"backupConfiguration\":\n  {\n   \"pointInTimeRecoveryEnabled\": true,\n   \"enabled\":true\n  }\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"kind\": \"sql#operation\",\n \"targetLink\": \"https://sqladmin.googleapis.com/v1/projects/project-id/instances\",\n \"status\": \"PENDING\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2020-01-16T02:32:12.281Z\",\n \"operationType\": \"UPDATE\",\n \"name\": \"operation-id\",\n \"targetId\": \"instance-id\",\n \"selfLink\": \"https://sqladmin.googleapis.com/v1/projects/project-id/operations/operation-id\",\n \"targetProject\": \"project-id\"\n}\n```\nThis example uses\n [instances:insert](/sql/docs/postgres/admin-api/rest/v1/instances/insert) \n.\nTo create an instance with customer-managed encryption keys, pass\n`diskEncryptionConfiguration`\nto the command.\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The instance ID\n- : The region\n- : Emum version string (for example, POSTGRES_12)\n- : The ID you received from creating a key.\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances\n```\nRequest JSON body:\n```\n{\n \"name\":\"instance-id\",\n \"region\":\"region\",\n \"databaseVersion\": \"database-version\",\n \"diskEncryptionConfiguration\" :\n {\n  \"kmsKeyName\" : \"kms-resource-id\"\n },\n \"settings\":\n {\n  \"backupConfiguration\":\n  {\n   \"pointInTimeRecoveryEnabled\": true,\n   \"enabled\":true\n  }\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"kind\": \"sql#operation\",\n \"targetLink\": \"https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances\",\n \"status\": \"PENDING\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2020-01-16T02:32:12.281Z\",\n \"operationType\": \"UPDATE\",\n \"name\": \"operation-id\",\n \"targetId\": \"instance-id\",\n \"selfLink\": \"https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/operations/operation-id\",\n \"targetProject\": \"project-id\"\n}\n```\nThis example uses\n [instances:insert](/sql/docs/postgres/admin-api/rest/v1beta4/instances/insert) \n.\n## Create a backup for a CMEK-enabled instance\nWhen you create a backup of a Cloud SQL instance, the backup is encrypted with the same primary key version as the primary instance's customer-managed key.\nSee [Creating and managing on-demand and automatic backups](/sql/docs/postgres/backup-recovery/backing-up) .\nYou will see a message on the **Create a backup** form that says: \"Your backup will be encrypted with the primary version of this instance's customer-managed encryption key. If anyone destroys or disables this key version, all backup data encrypted using that key version will be permanently lost. You can check the primary version for the key in Cloud KMS.\"\nOn the backups page, the list of backups enabled with customer-managed encryption keys have two extra columns. One column that shows that the backup is for a CMEK-enabled instance, and a column that displays the key version used to encrypt the backup.\n## Create a replica for a CMEK-enabled instance\nWhen you create a read replica of a Cloud SQL instance in the same region, it inherits the same customer-managed encryption key as the parent instance. If you create a read replica in a different region, you are given a new list of customer-managed encryption keys to select from. Each region uses its own set of keys.\nSee [Creating read replicas](/sql/docs/postgres/replication/create-replica) .\nOn the **Create read replica** page, you see the following information:\n- The **Encryption** shows **customer-managed** .\n- The **Encryption key** for the replica is displayed.\n- There is a message saying \"Your replica will be encrypted with the primary instance's customer-managed key. If anyone destroys this key, all data encrypted with it will be permanently lost.\"\nFor a cross-region replica, you see the following message:\n\"Your cross-region replica will be encrypted with the selected customer-managed key. If anyone destroys this key, all data encrypted with it will be permanently lost.\"\n## Create a clone of a CMEK-enabled instance\nWhen you create a clone of Cloud SQL instance, it inherits the same customer-managed encryption key as the one used to encrypt the source instance.\nSee [Cloning instances](/sql/docs/postgres/clone-instance) .\nOn the **Create clone** page, you see the following information:\n- The **Encryption** shows **customer-managed** .\n- The **Encryption key** for the clone is displayed.\n- There is a message saying \"Your clone will be encrypted with the source instance's customer-managed key. If anyone destroys this key, all data encrypted with it will be permanently lost.\"## View key information for a CMEK-enabled instance\nOnce you successfully create a Cloud SQL instance, you can look at the instance list or the instance overview page to see that it was created using a customer-managed encryption key. The details also show the key that was used to create the instance.\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- In the Instances list, scroll to the right until you see the **Encryption** column. In this column, you see **Google-managed** and **Customer-managed** .\n- Click an instance name to open its **Overview** page. The customer-managed encryption key is listed in the **Configuration** pane.## Re-encrypt an existing CMEK-enabled instance or replica\nYou can re-encrypt your existing Cloud SQL instances and replicas with the latest primary key version. For more information about re-encrypting your existing CMEK-enabled instance or replica, see [About keys](/sql/docs/mysql/cmek#about_keys) .\n### Obtain the new primary key version\n- To re-encrypt your instance or replica with a new version, you'll need the new primary key version. If you need a new key version for your instances, you'll need to rotate your key using Cloud Key Management Service. To rotate your primary key, see [Rotate a key](/kms/docs/rotate-key) .\n- After your key rotation is complete, wait for the primary key change to be propagated before you re-encrypt your instances. If your key version change isn't consistent, your instance will continue to use the old key version after re-encryption. For more information, see [Consistency of key versions](/kms/docs/consistency#key_versions) .\n### Re-encrypt your CMEK-enabled instance\nAfter key rotation is complete, re-encrypt your existing CMEK-enabled instance or replica.\n**Note:** If your new key version isn't consistent across Cloud SQL, the instance continues using the old key version after re-encryption.\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- To open the **Overview** page of an instance, click the instance name.\n- In the **Configuration** section, click **Re-encrypt instance** .\n- In the dialog that appears, confirm your selection by   clicking **Re-encrypt** .\nTo re-encrypt the instance or replica, run the following command:\n```\ngcloud sql instances reencrypt INSTANCE_NAME\n```\nReplace\n`INSTANCE_NAME`\nwith name of the instance or replica you are re-encrypting.\nTo re-encrypt your instance or replica with your new key, run the following command:\n```\n\u00a0 \u00a0 POST https://sqladmin.googleapis.com/v1/projects/PROJECT_ID/instances/INSTANCE_ID/reencrypt\n```\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The instance ID\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/v1/projects/PROJECT_ID/instances/INSTANCE_ID/reencrypt\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"kind\": \"sql#operation\",\n \"targetLink\": \"https://sqladmin.googleapis.com/v1/projects/project-id/instances/instance-id\",\n \"status\": \"PENDING\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2023-06-28T21:19:09.503Z\",\n \"operationType\": \"REENCRYPT\",\n \"name\": \"operation-id\",\n \"targetId\": \"instance-id\",\n \"selfLink\": \"https://sqladmin.googleapis.com/v1/projects/project-id/operations/operation-id\",\n \"targetProject\": \"project-id\"\n}\n```To re-encrypt your instance or replica with your new key, run the following command:\n```\n\u00a0 \u00a0 POST https://sqladmin.googleapis.com/v1beta4/projects/PROJECT_ID/instances/INSTANCE_ID/reencrypt\n```\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The instance ID\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/sql/v1beta4/projects/PROJECT_ID/instances/INSTANCE_ID/reencrypt\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"kind\": \"sql#operation\",\n \"targetLink\": \"https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances/instance-id\",\n \"status\": \"PENDING\",\n \"user\": \"user@example.com\",\n \"insertTime\": \"2023-06-28T21:22:13.663Z\",\n \"operationType\": \"REENCRYPT\",\n \"name\": \"operation-id\",\n \"targetId\": \"instance-id\",\n \"selfLink\": \"https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/operations/operation-id\",\n \"targetProject\": \"project-id\"\n}\n```\n### Automatic re-encryption backups\nWhen you re-encrypt a primary instance with a new primary key version, Cloud SQL automatically creates an on-demand backup called the re-encryption backup.\nIn your [list of backups](/sql/docs/%7Bdb_type%7D/backup-recovery/backing-up#viewbackups) for your Cloud SQL instance, the re-encryption backup is listed as type `on-demand` and labeled with `backup created automatically for data before CMEK re-encryption` .\nAs with other on-demand backups, re-encryption backups persist until you delete them or delete the instance.\n### Re-encryption limitations\nWhen you re-encrypt an instance, keep note of the following limitations:\n- You can't perform any other admin operations on the instance while the re-encryption operation is going on.\n- The re-encryption operation triggers a downtime that depends on the instance or replica size.\n- Replicas of an instance aren't re-encrypted when an instance is en-encrypted. You need to re-encrypt each replica separately.\n- Backups aren't automatically re-encrypted with the new key version when you re-encrypt your instance. To restore the backup or point-in-time-recovery to a time after the backup is taken, you'll need to keep the Cloud KMS key version the backup is encrypted with.\nFor troubleshooting, see the [Re-encryption troubleshooting table](/sql/docs/postgres/configure-cmek#re-encryption-troubleshooting-table) .\n## Use Cloud External Key Manager (Cloud EKM)\nTo protect data in Cloud SQL instances, you can use keys that you manage within a supported external key management partner. For more information, see [Cloud External Key Manager](/kms/docs/ekm) , including the [Considerations](/kms/docs/ekm#considerations) section.\nWhen you are ready to create a Cloud EKM key, see [Managing Cloud EKM keys](/kms/docs/ekm) . After a key is created, provide the key name when you create a Cloud SQL instance.\nYou can use Key Access Justifications (KAJ) as part of Cloud EKM. KAJ enables you to view the reason for each Cloud EKM request. Additionally, based on the justification provided, you can automatically approve or deny a request. To learn more, see the [Overview](/assured-workloads/key-access-justifications/docs/overview) .\nThus, KAJ provides extra control over your data by providing a justification for each attempt to decrypt the data.\nGoogle lacks control over the availability of keys in an external key management partner system.\n**Warning:** If an external key is deleted or cannot be recovered, any Cloud SQL instances encrypted with that key become permanently inaccessible.\n## Disable and re-enable key versions\nSee the following topics:\n- [Disable an enabled key version](/kms/docs/enable-disable#disable_an_enabled_key_version) \n- [Enable a disabled key version](/kms/docs/enable-disable#enable_a_disabled_key_version) ## Troubleshoot\nThis section describes things to try when you get an error message while setting up or using CMEK-enabled instances.\nCloud SQL administrator operations, such as create, clone, or update, might fail due to Cloud KMS errors, and missing roles or permissions. Common reasons for failure include a missing Cloud KMS key version, a disabled or destroyed Cloud KMS key version, insufficient IAM permissions to access the Cloud KMS key version, or the Cloud KMS key version is in a different region than the Cloud SQL instance. Use the following troubleshooting table to diagnose and resolve common problems.\n| For this error...              | The issue might be...                                           | Try this...                                                      |\n|:----------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Per-product, per-project service account not found     | The service account name is incorrect.                                      | Make sure you created a service account for the correct user project. GO TO THE SERVICE ACCOUNTS PAGE.                               |\n| Cannot grant access to the service account       | The user account does not have permission to grant access to this key version.                            | Add the Organization Administrator role on your user or service account. GO TO THE IAM ACCOUNTS PAGE                                |\n| Cloud KMS key version is destroyed         | The key version is destroyed.                                         | If the key version is destroyed, you cannot use it to encrypt or decrypt data.                                     |\n| Cloud KMS key version is disabled          | The key version is disabled.                                         | Re-enable the Cloud KMS key version. GO TO THE CRYPTO KEYS PAGE                                         |\n| Insufficient permission to use the Cloud KMS key      | The cloudkms.cryptoKeyEncrypterDecrypter role is missing on the user or service account you are using to run operations on Cloud SQL instances, or the Cloud KMS key version doesn't exist. | Add the cloudkms.cryptoKeyEncrypterDecrypter role on your user or service account. GO TO THE IAM ACCOUNTS PAGE If the role is already on your account, see Creating a key to learn how to create a new key version. See note. |\n| Cloud KMS key is not found           | The key version does not exist.                                        | Create a new key version. See Creating a key. See note.                                           |\n| Cloud SQL instance and Cloud KMS key version are in different regions | The Cloud KMS key version and Cloud SQL instance must be in the same region. It does not work if the Cloud KMS key version is in a global region or multi-region.       | Create a key version in the same region where you want to create instances. See Creating a key. See note.                              |\n**Note: ** If the instance is in a failed state during the`create`operation, you must delete it, add the role to the account you are using, and create a new instance with an active Cloud KMS key version.\n| For this error...                                       | The issue might be...             | Try this...                              |\n|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------|\n| CMEK resource re-encryption failed because the Cloud KMS key is inaccessible. Please ensure that the primary key version is enabled and the permission is granted properly. | The key version isn't enabled or doesn't have the proper permissions. | Re-enable the Cloud KMS key version: GO TO THE CRYPTO KEYS PAGE Confirm it has proper permissions: GO TO THE IAM ACCOUNTS PAGE |\n| CMEK resource re-encryption failed due to server internal error. Please retry later                       | There is a server internal error.          | Retry re-encryption. For more information, see Re-encrypt an existing CMEK-enabled instance or replica       |\n## What's next\n- [Configure access to the instance](/sql/docs/postgres/instance-access-control) .\n- [Connect to the instance with a client](/sql/docs/postgres/connect-admin-ip) .\n- [Create a database on the instance](/sql/docs/postgres/create-manage-databases) .\n- [Import data into the instance](/sql/docs/postgres/import-export) .\n- [Create users on the instance](/sql/docs/postgres/create-manage-users) .\n- [Learn more about instance settings](/sql/docs/postgres/instance-settings) .\n- Learn how to add [key access justifications](/assured-workloads/key-access-justifications/docs/overview) to your keys.", "guide": "Cloud SQL"}