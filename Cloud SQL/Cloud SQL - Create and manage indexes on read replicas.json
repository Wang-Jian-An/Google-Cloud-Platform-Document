{"title": "Cloud SQL - Create and manage indexes on read replicas", "url": "https://cloud.google.com/sql/docs/mysql/replication/read-replica-indexes", "abstract": "# Cloud SQL - Create and manage indexes on read replicas\nThis page describes how to add and drop indexes on Cloud SQL read replicas. While a replica is normally read-only, there might be times you want to create [secondary indexes](https://dev.mysql.com/doc/refman/8.0/en/innodb-index-types.html) on tables for reporting purposes. Cloud SQL offers a set of [storedprocedures](/sql/docs/mysql/stored-procedures) for managing these indexes.\n", "content": "## Terminology\n- **Clustered index.** The main index on a MySQL table that physically orders the rows on disk. When you define a primary key on a table, MySQL uses it as the clustered index. There can only be one clustered index on a table.\n- **Secondary index.** An additional index on a MySQL table that optimizes query performance.## Stored procedures for indexes\nCloud SQL includes two stored procedures in the `mysql` schema that you can use to add and drop secondary indexes on a MySQL read replica. Note that while these procedures can run on a primary source instance, they are designed for read replicas.\nFor the `idxType` and `idxOption` parameters, consult the documentation for the major version of MySQL running on the Cloud SQL instance.\n## Examples\n### Correct Usage\nHere are some example invocations of the procedures. Suppose we have a table with the following definition.\n```\nCREATE TABLE sampletest.t1(\u00a0 \u00a0id int(10) unsigned NOT NULL AUTO_INCREMENT,\u00a0 \u00a0first_name varchar(64) NOT NULL,\u00a0 \u00a0last_name varchar(64) NOT NULL,\u00a0 \u00a0license_id int NOT NULL,\u00a0 \u00a0PRIMARY KEY (id),\u00a0 \u00a0KEY idx_fname (first_name)) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\nIf you wanted to create a regular index named `t1_fname_lname` on the `first_name` and `last_name` columns, you would execute the following:\n```\ncall mysql.addSecondaryIdxOnReplica('', 't1_fname_lname', 'sampletest.t1', 'first_name, last_name', '')\n```\nIf you also wanted to create a unique index named `t1_license_id` on the `license_id` column with the comment \"unique license id,\" you would execute the following:\n```\ncall mysql.addSecondaryIdxOnReplica('unique', 't1_license_id', 'sampletest.t1', 'license_id', 'comment \\\"unique license id\\\"')\n```\nIf you then wanted to drop the t1_fname_lname index, you would execute the following:\n```\ncall mysql.dropSecondaryIdxOnReplica('t1_fname_lname', 'sampletest.t1', '')\n```\n### Incorrect Usage\nThe following attempt to create an index on the `first_name` and `last_name` columns fails due to the outer parentheses in the idxDefinition parameter.\n```\ncall mysql.addSecondaryIdxOnReplica('', 't1_extra_parenthesis', 'sampletest.t1', '(first_name, last_name)', '')\n```\nYou can only add indexes on customer created tables. The following attempt to create an index on the host column of the mysql.servers table fails.\n```\ncall mysql.addSecondaryIdxOnReplica('', 'idx_invalid', 'mysql.servers', 'host', '')\n```\nYou can only use the `dropSecondaryIdxOnReplica` procedure to drop indexes previously created using the `addSecondaryIdxOnReplica` procedure. For example, the following call to drop the existing `idx_fname` index fails.\n```\ncall mysql.dropSecondaryIdxOnReplica('idx_fname', 'sampletest.t1', '')\n```\nSQL injection in these procedure calls will fail. For example, the following SQL injection with a comment sequence will fail.\n```\ncall mysql.addSecondaryIdxOnReplica(\\\"user 'a'@'%' --\\\", 'idx_fname', 'sampletest.t1', 'first_name', '')\n```\nSimilarly, this SQL injection attempt with a delimiter fails.\n```\ncall mysql.addSecondaryIdxOnReplica('', 'idx_fname', 'sampletest.t1', 'first_name', ';flush status')\n```\n## Recreation of read replicas\nOccasionally, when there's an issue, Cloud SQL recreates a read replica from the primary source in order to quickly recover the instance. Indexes created on the read replica prior to a recreate operation are not persisted. It is the responsibility of the customer to recreate these indexes using the stored procedures on the read replica.\n## What's next\n- [Connecting using a database client from a local machine or Compute Engine](/sql/docs/mysql/connect-admin-ip)", "guide": "Cloud SQL"}