{"title": "Cloud SQL - Troubleshoot", "url": "https://cloud.google.com/sql/docs/postgres/troubleshooting", "abstract": "# Cloud SQL - Troubleshoot\nCheck if your question or problem has already been addressed on one of the following pages:\n- [FAQ](/sql/faq) \n- [Known issues](/sql/docs/postgres/known-issues) \n- [Error messages](/sql/docs/postgres/error-messages) \n- [Diagnose issues](/sql/docs/postgres/diagnose-issues) \n- [Debug connection issues](/sql/docs/postgres/debugging-connectivity) Topics in this page include:\n- [Backup and recovery](#backups) \n- [Cancel import and export](#cancel-import-export) \n- [Cloning](#cloning) \n- [Connectivity](#connectivity) \n- [Creating instances](#creating-instances) \n- [Flags](#flags) \n- [High availability](#ha) \n- [Import and export](#import-export) \n- [Logging](#logging) \n- [Managing instances](#managing-instances) \n- [Replication](#replication) ", "content": "## Backup and recovery\n| Issue                                          | Troubleshooting                                                                                                                                                                        |\n|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------||\n| You can't see the current operation's status.                                | The Google Cloud console reports only success or failure when the operation is done. It isn't designed to show warnings or other updates. Run the gcloud sql operations list command to list all operations for the given Cloud SQL instance.                                                                                                                |\n| You want to find out who issued an on-demand backup operation.                            | The user interface doesn't show the user who started an operation. Look in the logs and filter by text to find the user. You may need to use audit logs for private information. Relevant log files include: cloudsql.googleapis.com/postgres.log If Cloud Audit Logs is enabled and you have the required permissions to view them, cloudaudit.googleapis.com/activity may also be available.                                                                           |\n| After an instance is deleted, you can't take a backup of the instance.                          | After an instance is purged, no data recovery is possible. However, if the instance is restored, then its backups are also restored. For more information on recovering a deleted instance, see Recovery backups. If you have done an export operation, create a new instance and then do an import operation to recreate the database. Exports are written to Cloud Storage and imports are read from there.                                                                       |\n| An automated backup is stuck for many hours and can't be canceled.                           | Backups can take a long time depending on the database size. If you really need to cancel the operation, you can ask customer support to force restart the instance.                                                                                                                                   |\n| A restore operation can fail when one or more users referenced in the SQL dump file don't exist.                   | Before restoring a SQL dump, all the database users who own objects or were granted permissions on objects in the dumped database must exist in the target database. If they don't, the restore operation fails to recreate the objects with the original ownership or permissions. Create the database users before restoring the SQL dump.                                                                                        |\n| You want to increase the number of days that you can keep automatic backups from seven to 30 days, or longer.                | You can configure the number of automated backups to retain, from 1 to 365. Automated backups get pruned regularly based on the retention value configured. Unfortunately, this means that the currently visible backups are the only automated backups you can restore from. To keep backups indefinitely, you can create an on-demand backup, as they are not deleted in the same way as automated backups. On-demand backups remain indefinitely. That is, they remain until they're deleted or the instance they belong to is deleted. Because that type of backup is not deleted automatically, it can affect billing.                   |\n| An automated backup failed and you didn't receive an email notification.                          | To have Cloud SQL notify you of the backup's status, configure a log-based alert.                                                                                                                                                        |\n| An instance is repeatedly failing because it is cycling between the failure and backup restore states. Attempts to connect to and use the database following restore fail. | There could be too many open connections. Too many connections can result from errors that occur in the middle of a connection where there are no autovacuum settings to clean up dead connections. Cycling can occur if any custom code is using retry logic that doesn't stop after a few failures. There could be too much traffic. Use connection pooling and other best practices for connectivity. Things to try: Verify that the database is set up for autovacuum. Check if there is any connection retry logic set up in custom code. Turn down traffic until the database recovers and then slowly turn traffic back up.                  |\n| You find you are missing data when performing a backup/restore operation.                         | Tables were created as unlogged. For example: CREATE UNLOGGED TABLE .... These tables are not included in a restore from a backup: The contents of unlogged tables doesn't survive failover on an HA instance. Unlogged tables don't survive postgres crashes. Unlogged tables are not replicated to read replicas. Unlogged tables are automatically wiped during backup restore. The solution is to avoid using unlogged tables if you want to restore those tables through a backup. If you're restoring from a database that already has unlogged tables, then you can dump the database to a file, and reload the data after modifying the dumped file to ALTER TABLE to SET LOGGED on those tables. |\n## Cancel import and export\n| Issue                                   | Troubleshooting                                   |\n|:------------------------------------------------------------------------------------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Error message: You can't cancel operation [operation-ID] because this operation isn't in progress.            | You're trying to cancel an import or export operation that's completed, failed, or cancelled. If the operation is running, you can cancel it.   |\n| Error message: You can't cancel operation [operation-ID] because Cloud SQL doesn't support the cancellation of an [operation-type] operation. | Cloud SQL doesn't support the cancellation of the operation because it has an operation type other than IMPORT or EXPORT.        |\n| Error message: The [operation-type] operation isn't cancelled. Wait and retry in a few seconds.            | Cloud SQL can't cancel the import or export operation at this time. Try again in a few seconds. If the problem persists, contact Google Cloud Support. |\n## Clone\n| Issue                                            | Troubleshooting                                                                                                               |\n|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Cloning fails with constraints/sql.restrictAuthorizedNetworks error.                            | The cloning operation is blocked by the Authorized Networks configuration. Authorized Networks are configured for public IP addresses in the Connectivity section of the Google Cloud console, and cloning is not permitted due to security considerations. Remove all Authorized Networks entries from the Cloud SQL instance if you can. Otherwise, create a replica without any Authorized Networks entries.              |\n| Error message: Failed to create subnetwork. Couldn't find free blocks in allocated IP ranges. Please allocate new ranges for this service provider. Help Token: [help-token-id]. | You're trying to use the Google Cloud console to clone an instance with a private IP address, but you didn't specify the allocated IP range that you want to use and the source instance isn't created with the specified range. As a result, the cloned instance is created in a random range. Use gcloud to clone the instance and provide a value for the --allocated-ip-range-name parameter. For more information, see Cloning an instance with a private IP. |\n## Connect\n| Issue         | Troubleshooting                                                                                                                                                                             |\n|:---------------------------------------||\n| Aborted connection.     | The issue might be: Networking instability. No response to TCP keep-alive commands (either the client or the server isn't responsive, possibly overloaded) The database engine connection lifetime was exceeded and the server ends the connection. Applications must tolerate network failures and follow best practices such as connection pooling and retrying. Most connection poolers catch these errors where possible. Otherwise the application must either retry or fail gracefully. For connection retry, we recommend the following methods: Exponential backoff. Increase the time interval between each retry, exponentially. Add randomized backoff also. Combining these methods helps reduce throttling. |\n| Certificate verify failed.    | The client certificates have expired or the path to the certificates isn't correct. Regenerate the certificates by recreating them.                                                                                                                                                |\n| FATAL: database 'user' does not exist. | gcloud sql connect --user only works with the default postgres user. Connect with the default user, then change users.                                                                                                                                                  |\n| You want to find out who is connected. | Log into the database and run this command: SELECT datname, usename, application_name as appname, client_addr, state, now() - backend_start as conn_age, now() - state_change as last_activity_age FROM pg_stat_activity WHERE backend_type = 'client backend' ORDER BY 6 DESC LIMIT 20                                                                                                           |\n## Create instances\n| Issue                                     | Troubleshooting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n|:------------------------------------------------------------------------------------------------------------------------------------------------------||\n| Error message: Failed to create subnetwork. Couldn't find free blocks in allocated IP ranges. Please allocate new ranges for this service provider. | There are no more available addresses in the allocated IP range. There can be several possible scenarios: The size of the allocated IP range for the private service connection is smaller than /24. The size of the allocated IP range for the private service connection is too small for the number of Cloud SQL instances. The requirement on the size of allocated IP range will be larger if instances are created in multiple regions. See allocated range size To resolve this issue, you can either expand the existing allocated IP range or allocate an additional IP range to the private service connection. For more information, see Allocate an IP address range. If you used the --allocated-ip-range-name flag while creating the Cloud SQL instance, you may only expand the specified IP range. If you're allocating a new range, take care that the allocation doesn't overlap with any existing allocations. After creating a new IP range, update the vpc peering with the following command: gcloud services vpc-peerings update \\ --service=servicenetworking.googleapis.com \\ --ranges=OLD_RESERVED_RANGE_NAME,NEW_RESERVED_RANGE_NAME \\ --network=VPC_NETWORK \\ --project=PROJECT_ID \\ --force If you're expanding an existing allocation, take care to increase only the allocation range and not decrease it. For example, if the original allocation was 10.0.10.0/24, then make the new allocation at least 10.0.10.0/23. In general, if starting from a /24 allocation, decrementing the /mask by 1 for each condition (additional instance type group, additional region) is a good rule of thumb. For example, if trying to create both instance type groups on the same allocation, going from /24 to /23 is enough. After expanding an existing IP range, update the vpc peering with following command: gcloud services vpc-peerings update \\ --service=servicenetworking.googleapis.com \\ --ranges=RESERVED_RANGE_NAME \\ --network=VPC_NETWORK \\ --project=PROJECT_ID |\n| Error message: Failed to create subnetwork. Router status is temporarily unavailable. Please try again later. Help Token: [token-ID].    | Try to create the Cloud SQL instance again.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n## Export\n| Issue                                     | Troubleshooting                                                                                                                                                                          |\n|:--------------------------------------------------------------------------------------------------------------------------------------------------------||\n| HTTP Error 409: Operation failed because another operation was already in progress.                 | There is already a pending operation for your instance. Only one operation is allowed at a time. Try your request after the current operation is complete.                                                                                                                                       |\n| HTTP Error 403: The service account does not have the required permissions for the bucket.                | Ensure that the bucket exists and the service account for the Cloud SQL instance (which is performing the export) has the Storage Object Creator role (roles/storage.objectCreator) to allow export to the bucket. See IAM roles for Cloud Storage.                                                                                                                |\n| CSV export worked but SQL export failed.                            | CSV and SQL formats do export differently. The SQL format exports the entire database, and likely takes longer to complete. The CSV format lets you define which elements of the database to include in the export. Use CSV exports to export only what you need.                                                                                                            |\n| Export is taking too long.                                | Cloud SQL does not support concurrent synchronous operations. Use export offloading. At a high level, in export offloading, instead of issuing an export on the source instance, Cloud SQL spins up an offload instance to perform the export. Export offloading has several advantages, including increased performance on the source instance and the unblocking of administrative operations while the export is running. With export offloading, total latency can increase by the amount of time it takes to bring up the offload instance. Generally, for reasonably sized exports, latency is not significant. However, if your export is small enough, then you may notice the increase in latency. |\n| Create Extension error.                                 | The dump file contains references to unsupported extension. Edit the dump file to remove the references.                                                                                                                                                   |\n| Error using pg_dumpall.                                 | Using the pg_dumpall utility with the --global flag requires the superuser role, but this role isn't supported in Cloud SQL for PostgreSQL. To prevent errors from occurring while performing export operations that include user names, also use the --no-role-passwords flag.                                                                                                         |\n| The export operation times out before exporting anything, and you see the error message Could not receive data from client: Connection reset by peer. | If Cloud Storage does not receive any data within a certain time frame, typically around seven minutes, the connection resets. It's possible the initial export query is taking too long to run. Do a manual export using the pg_dump tool.                                                                                                                  |\n| You want exports to be automated.                              | Cloud SQL does not provide a way to automate exports. You could build your own automated export system using Google Cloud products such as Cloud Scheduler, Pub/Sub, and Cloud Functions, similar to this article on automating backups.                                                                                                                   |\n## Flags\n| Issue                 | Troubleshooting                                                                                                                           |\n|:----------------------------------------------------------------------||\n| You set the time zone for a session, but it expires when you log off. | Connect to the database and set the database time zone to the one you want, either per user or per database. In Cloud SQL for PostgreSQL, you can specify the following. These settings remain after a session is closed, mimicking a .conf configuration: ALTER DATABASE dbname SET TIMEZONE TO 'timezone'; ALTER USER username SET TIMEZONE TO 'timezone'; These settings apply only to new connections to the database. To see the change to the time zone, disconnect from the instance and then reconnect to it. |\n## High availability\n| Issue                            | Troubleshooting                               |\n|:--------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------|\n| You can't find the metrics for a manual failover.                 | Only automatic failovers go into the metrics.                        |\n| Cloud SQL instance resources (CPU and RAM) are near 100% usage, causing the high availability instance to go down. | The instance machine size is too small for the load. Edit the instance to upgrade to a larger machine size to get more CPUs and memory. |\n## Import\n| Issue                       | Troubleshooting                                                                                                                                                                                                            |\n|:----------------------------------------------------------------------------------------------||\n| Error message: permission denied for schema public           | For PostgreSQL versions 15 and later, if the target database is created from template0, then importing data might fail. To resolve this issue, provide public schema privileges to the cloudsqlsuperuser user by running the GRANT ALL ON SCHEMA public TO cloudsqlsuperuser SQL command.                                                                                                                                          |\n| HTTP Error 409: Operation failed because another operation was already in progress.   | There is already a pending operation for your instance. Only one operation is allowed at a time. Try your request after the current operation is complete.                                                                                                                                                                         |\n| The import operation is taking too long.              | Too many active connections can interfere with import operations. Close unused operations. Check the CPU and memory usage of your Cloud SQL instance to make sure there are plenty of resources available. The best way to ensure maximum resources for the import is to restart the instance before beginning the operation. A restart: Closes all connections. Ends any tasks that may be consuming resources.                                                                                                           |\n| An import operation can fail when one or more users referenced in the dump file don't exist. | Before importing a dump file, all the database users who own objects or were granted permissions on objects in the dumped database must exist in the target database. If they don't, the import operation fails to recreate the objects with the original ownership or permissions. Create the database users before importing.                                                                                                                               |\n| After importing data, the size of your data disk usage is much higher.      | There may be an unexpected disk usage after importing data. This usage may be because of using point-in-time recovery. To resolve this, after you import data, disable point-in-time recovery if you want to delete logs and recover storage. Keep in mind that decreasing the storage used doesn't shrink the size of the storage provisioned for the instance.                                                                                                                       |\n| Error message: GRANT stderr: ERROR: must be member of role ROLE_NAME       | This error message appears if you try to import a SQL dump file that's uploaded in Cloud Storage to a Cloud SQL database, and the import job has run for about four days. ROLE_NAME is a custom database role defined in the source PostgreSQL database. The default cloudsqlsuperuser user imports the SQL dump file. However, this user might not belong to the ROLE_NAME role. To resolve this issue, complete the following steps: Create the ROLE_NAME role in the destination database where you're importing the SQL dump file. Don't use the cloudsqlsuperuser user to import the file. Instead, in the destination database, specify a user who's a member of the ROLE_NAME role. To specify the user, run the following command: gcloud sql import sql INSTANCE URI [--async] [--database=DATABASE, -d DATABASE] [--user=USER] [GCLOUD_WIDE_FLAG \u2026] |\n## Logging\n| Issue               | Troubleshooting                                                                                                                                                                                   |\n|:-----------------------------------------------------------------||\n| Logging uses a lot of CPU and memory on your Cloud SQL instance. | Logging needs to be tuned. The log_statement flag can be set to none and the logging_collector flag can be set to off. If logging is still occurring, there may be other log-related flags that can be tuned. You can edit the instance to modify these flags.                                                                                                                       |\n| Audit logs are not found.          | Data-Access logs are only written if the operation is an authenticated user-driven API call that creates, modifies, or reads user-created data, or if the operation accesses configuration files or metadata of resources.                                                                                                                                |\n| Operations information is not found in logs.      | You want to find more information about an operation. For example, a user was deleted but you can't find out who did it. The logs show the operation started but don't provide any more information. You must enable audit logging for detailed and personal identifying information (PII) like this to be logged.                                                                                                         |\n| Log files are hard to read.          | You'd rather view the logs as json or text.You can use the gcloud logging read command along with linux post-processing commands to download the logs. To download the logs as JSON: gcloud logging read \\ \"resource.type=cloudsql_database \\ AND logName=projects/PROJECT_ID \\ /logs/cloudsql.googleapis.com%2FLOG_NAME\" \\ --format json \\ --project=PROJECT_ID \\ --freshness=\"1d\" \\ > downloaded-log.json To download the logs as TEXT: gcloud logging read \\ \"resource.type=cloudsql_database \\ AND logName=projects/PROJECT_ID \\ /logs/cloudsql.googleapis.com%2FLOG_NAME\" \\ --format json \\ --project=PROJECT_ID \\ --freshness=\"1d\"| jq -rnc --stream 'fromstream(1|truncate_stream(inputs)) \\ | .textPayload' \\ --order=asc > downloaded-log.txt |\n| Query logs are not found in PostgreSQL logs.      | You need to enable the pgaudit flags. From a terminal, connect to your database: gcloud sql connect INSTANCE_NAME Run this command to create the extension: CREATE EXTENSION pgaudit; Exit the database, and from a terminal run the following command: gcloud sql instances patch INSTANCE_NAME \\ --database-flags=cloudsql.enable_pgaudit=on,pgaudit.log=all                                                                                              |\n## Manage instances\n| Issue                | Troubleshooting                                                                                                                                                                                                            |\n|:---------------------------------------------------------------------||\n| You want to find out what queries are running now.     | Connect to the database and run the following query: SELECT datname, usename, application_name as appname, client_addr, state, now() - backend_start as conn_age, now() - xact_start as xact_age, now() - query_start as query_age, now() - state_change as last_activity_age, wait_event_type, wait_event, query FROM pg_stat_activity WHERE state <> 'idle' ORDER BY 8 DESC LIMIT 20;                                                                                                              |\n| You want to find out what units are being used for a specific field. | Connect to the database and run the following query (using your own FIELD_NAME): SELECT name, setting, unit FROM pg_settings WHERE name = 'FIELD_NAME'.                                                                                                                                                                          |\n| You want to find the current value of a database setting.   | Connect to the database and run the following query (using your own SETTING_NAME): SHOW SETTING_NAME; Run SHOW ALL; to see all settings.                                                                                                                                                                              |\n| You want to stop a blocked background process.      | The user needs to have the pg_signal_backend role. Run the following commands: GRANT pg_signal_backend TO USERNAME; Find the process ID of the blocked or stuck process: SELECT pid, usename, state, query FROM pg_stat_activity; Stop a running or idle process using these commands: SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE usename = 'USERNAME'; SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE usename = 'USERNAME';                                                                                               |\n| Instance is nearing 100% consumption of transaction IDs.    | Your internal monitoring warns that the instance is nearing 100% consumption of transaction IDs. You want to avoid transaction wraparound, which can block writes. The autovacuum job might be blocked, or might not be reclaiming the transaction IDs fast enough to keep up with the workload. In order to avoid any outages due to transaction wraparound problem, you can review these self-servicing tips for dealing with TXID wraparound. For general tuning advice, see Optimizing, monitoring, and troubleshooting vacuum operations in PostgreSQL.                                                                        |\n| Temporary storage increased automatic storage.      | Automatic storage is enabled. Restart deletes the temporary files but not reduce the storage. Only customer support can reset the instance size.                                                                                                                                                                            |\n| Data is being automatically deleted.         | Most likely a script is running somewhere in your environment. Look in the logs around the time of the deletion and see if there's a rogue script running from a dashboard or another automated process.                                                                                                                                                              |\n| The instance cannot be deleted.          | You might see the error message ERROR: (gcloud.sql.instances.delete) HTTP Error 409: The instance or operation is not in an appropriate state to handle the request, or the instance may have a INSTANCE_RISKY_FLAG_CONFIG flag status. Some possible explanations include: Another operation is in progress. Cloud SQL operations do not run concurrently. Wait for the other operation to complete. The INSTANCE_RISKY_FLAG_CONFIG warning is triggered whenever at least one beta flag is being used. Remove the risky flag settings and restart the instance                                                                      |\n| The instance is stuck due to large temporary data size.    | The system can create many temporary tables at one time, depending on the queries and the load. Unfortunately, you can't shrink the ibtmp1 file by any method other than restarting the service. One mitigation option is to create the temporary table with ROW_FORMAT=COMPRESSED, so it is stored in file-per-table tablespaces in the temporary file directory. However, the downside is performance costs associated with creating and removing a file-per-table tablespace for each temporary table.                                                                                    |\n| Fatal error during upgrade.           | Logs may reveal more, but in any case customer support may be needed to force re-create the instance.                                                                                                                                                                                      |\n| Instance is stuck on restart after running out of disk space.  | Automatic storage increase capability isn't enabled. If your instance runs out of storage, and the automatic storage increase capability isn't enabled, your instance goes offline. To avoid this issue, you can edit the instance to enable automatic storage increase.                                                                                                                                             |\n| Your on-premises primary instance is stuck.       | Google Cloud can't help with instances that are not in Cloud SQL.                                                                                                                                                                                                |\n| Slow shutdown on restart.           | When an instance shuts down, any outstanding connections that don't end within 60 seconds make the shutdown unclean. By having connections that last less than 60 seconds, most unclean shutdowns can be avoided, including connections from the database command prompt. If you keep these connections open for hours or days, shutdowns can be unclean.                                                                                                                         |\n| A user cannot be deleted.           | The user probably has objects in the database that depend on it. You need to drop those objects or reassign them to another user. Find out which objects are dependent on the user, then drop or reassign those objects to a different user. This thread on Stack Exchange discusses how to find the objects owned by the user.                                                                                                                               |\n| Particular queries are running slow.         | Queries can be slow for many reasons, mostly due to specific database aspects. One reason that can involve Cloud SQL is network latency, when the source (writer or reader) resource and the destination (Cloud SQL) resource are in different regions. Refer to general performance tips in particular. For slow database inserts, updates, or deletes, consider the following actions: Check the locations of the writer and database; sending data a long distance introduces latency. Check the location of the reader and database; latency affects read performance even more than write performance To reduce the latency the recommendation is to locate both the source and destination resources in the same region.                               |\n| Out of memory is indicated but monitoring charts don't show that. | An instance can fail and report Out of memory but the Google Cloud console or Cloud Monitoring charts seem to show there's still memory remaining. There are other factors beside your workload that can impact memory usage, such as the number of active connections and internal overhead processes. These aren't always reflected in the monitoring charts. Ensure that the instance has enough overhead to account for your workload plus some additional overhead.                                                                                             |\n| Recovering a deleted instance.          | All data on an instance, including backups, is permanently lost when that instance is deleted. To preserve your data, export it to Cloud Storage before you delete an instance. The Cloud SQL Admin role includes the permission to delete the instance. To prevent accidental deletion, grant this role only as needed.                                                                                                                                 |\n| You want to rename an existing Cloud SQL instance.     | Renaming an existing instance is not supported. There are other ways to accomplish the goal by creating a new instance. You can clone the instance you want to rename and set a new name for the cloned instance. This allows you to create the new instance without having to import data manually. Just as when creating a new instance, the cloned instance has a new IP address. You can export data from your instance into a Cloud Storage bucket, create a new instance with the new name you want, and then import the data into the new instance. In both cases, you can delete your old instance after the operation is done. We recommend going with the cloning route since it has no impact on performance and doesn't require you to redo any instance configuration settings such as flags, machine type, storage size and memory. |\n| Error when deleting an instance.          | If deletion protection is enabled for an instance, confirm your plans to delete the instance. Then disable deletion protection before deleting the instance.                                                                                                                                                                         |\n## Replication\n| Issue             | Troubleshooting                                                                                                                                                                                                                               |\n|:--------------------------------------------------------||\n| Read replica didn't start replicating on creation.  | There's probably a more specific error in the log files. Inspect the logs in Cloud Logging to find the actual error.                                                                                                                                                                                                      |\n| Unable to create read replica - invalidFlagValue error. | One of the flags in the request is invalid. It could be a flag you provided explicitly or one that was set to a default value. First, check that the value of the max_connections flag is greater than or equal to the value on the primary. If the max_connections flag is set appropriately, inspect the logs in Cloud Logging to find the actual error.                                                                                                                                           |\n| Unable to create read replica - unknown error.   | There's probably a more specific error in the log files. Inspect the logs in Cloud Logging to find the actual error. If the error is: set Service Networking service account as servicenetworking.serviceAgent role on consumer project, then disable and re-enable the Service Networking API. This action creates the service account necessary to continue with the process.                                                                                                                                      |\n| Disk is full.           | The primary instance disk size can become full during replica creation. Edit the primary instance to upgrade it to a larger disk size.                                                                                                                                                                                                 |\n| Disk space increases significantly.      | A slot that's not actively used to track data causes PostgreSQL to hold onto WAL segments indefinitely, causing the disk space to grow indefinitely. If you use the logical replication and decoding features in Cloud SQL, replication slots are created and dropped automatically. Unused replication slots can be detected by querying the pg_replication_slots system view and filtering on the active column. Unused slots can be dropped to remove WAL segments using the pg_drop_replication_slot command.                                                                                                       |\n| The replica instance is using too much memory.   | The replica uses temporary memory to cache often-requested read operations, which can lead it to use more memory than the primary instance. Restart the replica instance to reclaim the temporary memory space.                                                                                                                                                                               |\n| Replication stopped.         | The maximum storage limit was reached and automatic storage increase isn't enabled. Edit the instance to enable automatic storage increase.                                                                                                                                                                                                |\n| Replication lag is consistently high.     | The write load is too high for the replica to handle. Replication lag takes place when the SQL thread on a replica is unable to keep up with the IO thread. Some kinds of queries or workloads can cause temporary or permanent high replication lag for a given schema. Some of the typical causes of replication lag are: Slow queries on the replica. Find and fix them. All tables must have a unique/primary key. Every update on such a table without a unique/primary key causes full table scans on th replica. Queries like DELETE ... WHERE field < 50000000 cause replication lag with row-based replication since a huge number of updates are piled up on the replica. Some possible solutions include: Edit the instance to increase the size of the replica. Reduce the load on the database. Send read traffic to the read replica. Index the tables. Identify and fix slow write queries. Recreate the replica. |\n| Errors when rebuilding indexes in PostgreSQL 9.6.  | You get an error from PostgreSQL informing you that you need to rebuild a particular index. This can be done only on the primary instance. If you create a new replica instance, you soon get the same error again. Hash indexes are not propagated to replicas in PostgreSQL versions below 10. If you must use hash indexes, upgrade to PostgreSQL 10+. Otherwise, if you also want to use replicas, don't use hash indexes in PostgreSQL 9.6.                                                                                                                      |\n| Query on the primary instance is always running.  | After creating a replica, the query SELECT * from pg_stat_activity where state = 'active' and pid = XXXX and username = 'cloudsqlreplica' is expected to run continuously on your primary instance.                                                                                                                                                                                  |\n| Replica creation fails with timeout.     | Long-running uncommitted transactions on the primary instance can cause read replica creation to fail. Recreate the replica after stopping all running queries.                                                                                                                                                                                           |", "guide": "Cloud SQL"}