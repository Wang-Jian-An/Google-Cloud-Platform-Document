{"title": "Cloud SQL - Learn about using private IP", "url": "https://cloud.google.com/sql/docs/postgres/private-ip", "abstract": "# Cloud SQL - Learn about using private IP\nThis page provides information about using private IP with Cloud SQL. For step-by-step instructions for configuring a Cloud SQL instance to use private IP, see [Configuring private IP](/sql/docs/postgres/configure-private-ip) .\nFor production-ready Cloud SQL networking solutions with Terraform, see [Simplified Networking Solutions](https://github.com/GoogleCloudPlatform/terraform-google-cloudsqlnetworking/tree/main) .\n", "content": "## Overview\nConfiguring a Cloud SQL instance to use private IP requires [private services access](/vpc/docs/private-services-access) . Private services access lets you create private connections between your [VPC network](/vpc/docs/vpc) and the . Google entities that offer services, such as Cloud SQL, are called service producers. Each Google service creates a subnet in which to provision resources. The subnet's IP address range is typically a /24 CIDR block that is chosen by the service and comes from the allocated IP address range.\nPrivate connections make services reachable without going through the internet or using external IP addresses. For this reason, private IP provides lower network latency than public IP.\nYou use private services access to connect to Cloud SQL instances:\n- From internal sources with access to your VPC network.\n- From external sources over a [VPN tunnel](/database-migration/docs/mysql/configure-connectivity-vpns) , a [reverse SSH tunnel](/database-migration/docs/mysql/configure-connectivity-reverse-ssh-tunnel) , or a [Cloud Interconnect](/network-connectivity/docs/interconnect) to your VPC network.\nYou can connect to private IP addresses across regions. You can also connect using a [Shared VPC](/vpc/docs/shared-vpc) between projects.\n## Allocated IP address ranges\nTo use Cloud SQL instances in a VPC network with private IP, you need to allocate IP address ranges to set up [private services access](/vpc/docs/private-services-access) for this VPC. To organize your Cloud SQL instances, you might want to allocate multiple IP address ranges for the private connection. When you configure a Cloud SQL instance for private IP, you could select both the VPC network and the allocated IP address range.\n### Allocated range size\nPlease allocate large enough IP ranges for Cloud SQL and other Google managed services you plan to use, each of them would require dedicated IP blocks from the allocated ranges. The minimum size is a single /24 block (256 addresses), but the recommended size is a /16 block (65,536 addresses).\nWhen you [allocate an IP address range](/sql/docs/postgres/configure-private-services-access#allocating_an_ip_address_range) , you need to take into consideration the number of instances you plan to create.\n| Subnet mask | Addresses | Usable Cloud SQL Instances |\n|:--------------|------------:|-----------------------------:|\n| /24   |   256 |       50 |\n| /23   |   512 |       100 |\n| /22   |  1024 |       200 |\n| /21   |  2048 |       400 |\n| /20   |  4096 |       800 |\nCloud SQL uses /24 CIDR ranges as a range unit, and each unit can only be used for Cloud SQL instances in a single region. So even if only two Cloud SQL instances are going to be created, but in different regions there must be at least 2 /24 CIDR ranges.\nAdditionally, if a project started using Cloud SQL before Apr 1 2021, Postgres instances can't share the same range unit with MySQL and SQL Server instances, and need their own in every region. Newer projects aren't subject to this limitation.\n## Set up private services access for your network\nWhen you configure private IP connectivity for the first time on a specific VPC network, you need to perform a one-time procedure to set up [private services access for Cloud SQL](/sql/docs/postgres/configure-private-services-access) .\nAfter you have established private services access, you can create a Cloud SQL instance configured to use private IP or configure private IP for an existing Cloud SQL instance. See [Configuring private IP](/sql/docs/postgres/configure-private-ip) for step-by-step instructions.\nAny time you change an established connection, you need to [update vpc-peerings](/sql/docs/postgres/configure-private-services-access#change-psa-config) as well.\n## Requirements for Private IP\nTo use private IP, your network and application environment must meet the following requirements. In addition, setting up private IP for the first time requires extra IAM permissions.\n### Application environment requirements\n- If you are connecting from GKE, you must be running GKE 1.8 or higher on a [VPC-native](/kubernetes-engine/docs/how-to/alias-ips) cluster.\n### API and IAM requirements\n- You must enable the [ Service Networking API](https://console.cloud.google.com/apis/library/servicenetworking.googleapis.com) for your project.\n- If you are using a [Shared VPC network](/vpc/docs/shared-vpc) ,  you also need to enable the Service Networking API for the host project.\n- In order to manage a private services access connection, your user must  have the following IAM permissions. If the user doesn't have the required  permissions you can get insufficient-permissions errors.- `compute.networks.list`\n- `compute.addresses.create`\n- `compute.addresses.list`\n- `servicenetworking.services.addPeering`\nIf you're using a [Shared VPC  network](/vpc/docs/shared-vpc) , you also need to add the same user and assign the same  permissions on the host project.## Example\nIn the following example, the customer VPC network allocated the `10.240.0.0/16` address range for Google services and established a private connection that uses the allocated range. Each Google service (for example, Cloud SQL), creates a subnet from the allocated block to provision new resources in a given region, such as Cloud SQL instances.- The private connection is assigned the`10.240.0.0/16`allocated range. From this allocation, Google services can create subnets where new resources are provisioned.\n- On the Google services side of the private connection, Google creates a project for the customer. The project is isolated, meaning no other customers share it and the customer is billed for only the resources the customer provisions.\n- Each Google service creates a subnet in which to provision resources. The subnet's IP address range is typically a`/24`CIDR block that is chosen by the service and comes from the allocated IP address range. You can't modify the service producer's subnet. A service provisions new resources in existing regional subnets that were previously created by that service. If a subnet is full, the service creates a new subnet in the same region.\n- VM instances in the customer's network can access service resources in any region if the service supports it. Some services might not support cross-region communication. View the relevant service's documentation for more information.\n- [Outbound data transfer costs](/vpc/network-pricing#general) for cross-regional traffic, where a VM instance communicates with resources in a different region, still apply.\n- The Cloud SQL instance is assigned the IP address`10.240.0.2`. In the Customer VPC network, requests with a destination of`10.240.0.2`are routed to the private connection over to the service producer's network. After reaching the service network, the service network contains routes that direct the request to the correct resource.\n- Traffic between VPC networks travels internally within Google's network, not through the public internet.## Network issues\nCloud SQL allocates a /24 subnet from the private services access IP range for each region. For example, placing PostgreSQL instances in two regions requires that the allocated IP address ranges include at least two available subnets of size /24.\nConnections to a Cloud SQL instance using a private IP address are automatically authorized for [RFC 1918address ranges](/vpc/docs/subnets#valid-ranges) . This way, all private clients can access the database without going through the Cloud SQL Auth Proxy.\n**Note:** You must configure all the Non-RFC 1918 IP address ranges as [authorized networks](/sql/docs/postgres/authorize-networks) of the Cloud SQL for PostgreSQL instances. Alternatively, you can connect to your instance using the [Cloud SQL Auth Proxy client](/sql/docs/postgres/sql-proxy) .\nCloud SQL doesn't learn Non-RFC 1918 subnet routes from your VPC by default. You need to update the network peering to Cloud SQL to export any Non-RFC 1918 routes.\n## Security\nTraffic over private services access is provided with a certain level of encryption. For more information, see [Google Cloud's virtual network encryption and authentication](/security/encryption-in-transit#virtual-network) .\nThe [Cloud SQL Auth Proxy](/sql/docs/postgres/sql-proxy) can be configured to connect using Private IP and provides authentication using IAM credentials and end to end encryption using a rotating SSL/TLS certificate.\nIf your security requirements mandate self-managed SSL/TLS certificates that you manage, see the instructions in [Configuring SSL/TLS](/sql/docs/postgres/configure-ssl-instance) .\nCreating one VPC network for each instance with a private IP address provides better network isolation than putting all instances in the \"default\" VPC network.\n## Multiple VPC Connectivity\nCloud SQL supports private IP addresses through [private service access](/sql/docs/postgres/configure-private-services-access) . When you create a Cloud SQL instance, Cloud SQL creates the instance within its own virtual private cloud (VPC), called the Cloud SQL VPC. Enabling private IP requires [setting up a peering connection](/sql/docs/postgres/private-ip#example) between the Cloud SQL VPC and your VPC network. This allows resources in your VPC network to access the internal IP addresses of your Cloud SQL resources in the Cloud SQL VPC network.\nUsing [VPC Network Peering](/vpc/docs/vpc-peering) , Cloud SQL implements private service access internally, which allows internal IP addresses to connect across two VPC networks regardless of whether they belong to the same project or organization. However, since VPC Network Peering isn't transitive, it only broadcasts routes between the two VPCs that are directly peered. If you have an additional VPC, it won't be able to access your Cloud SQL resources using the connection set up with your original VPC.\nTo mitigate this limitation and connect your Cloud SQL instance to multiple VPCs using private IP addresses, you can use the following connection options:\n- Connect using custom route advertisements\n- Connect using an intermediate proxy (SOCKS5)\n- Connect using Cloud SQL Auth Proxy as a service\nFor more information how to connect multiple VPCs, see [Connect your instance to multiple VPCs](/sql/docs/postgres/connect-multiple-vpcs) .\n## Quick reference for Private IP topics\nWhen you manage Cloud SQL instances using private IP, some of the following topics might be of interest:\n| Topic      | Discussion                                                                                                                                                                   |\n|:-----------------------------||\n| Shared VPC networks   | You can create Cloud SQL instances with private IP addresses in a Shared VPC network. However, you can't assign a private IP address in a Shared VPC network to an existing Cloud SQL instance.                                                                                                                     |\n| Regions      | You can connect through private IP across regions.                                                                                                                                                         |\n| Legacy networks    | You can't connect to the private IP of a Cloud SQL instance from a legacy network. Legacy networks don't support VPC network peering or private services access.                                                                                                                             |\n| Removing a private IP  | After you configure a Cloud SQL instance to use private IP, you can't remove the private IP capability from that instance.                                                                                                                                       |\n| Public and private IP  | You can use both public IP and private IP to connect to the same Cloud SQL instance. Neither connection method affects the other.                                                                                                                                     |\n| Existing Cloud SQL instances | You can configure an instance to use private IP at instance creation time. You can also configure an existing instance to use private IP. Configuring an existing instance to use private IP, or changing the network it's connected to, causes the instance to be restarted, resulting in a few minutes of downtime.                                                                                        |\n| Static IP addresses   | For public and private IP addresses, the incoming address of the Cloud SQL instance is static; it doesn't change. The outgoing address isn't always static, except for outgoing public IP addresses of external server replicas which are always static.                                                                                                      |\n| Replicas      | A replica inherits its private IP status from its primary instance. You can't configure private IP directly on a replica. If you're connecting to a replica using a private IP address, you don't need to create an additional VPC private connection for the replica as it's also inherited from the primary instance.                                                                                       |\n| The Cloud SQL Auth Proxy  | To connect to a Cloud SQL instance using private IP, the Cloud SQL Auth Proxy must be on a resource with access to the same VPC network as the instance. If the instance has both IP types enabled, the Cloud SQL Auth Proxy defaults to using the public IP. To ensure it's using private IP, you need to pass the -ip_address_types=PRIVATE flag to the Cloud SQL Auth Proxy. Learn more.                                                                      |\n| Serverless VPC Access  | To connect from a serverless source, such as App Engine standard environment, Cloud Run, or Cloud Functions, your application or function connects directly to your instance through Serverless VPC Access without the Cloud SQL Auth Proxy.                                                                                                          |\n| VPC Network Peering   | A connection that uses private services access relies on VPC Network Peering. However, you don't create the VPC Network Peering explicitly, because the peering is internal to Google Cloud. After you create the private services access connection, you can see its underlying VPC Network Peering on the VPC Network Peering page in the Google Cloud console, but don't delete it unless you want to remove the private connection. Learn more about VPC Network Peering. Important: Deleting the underlying VPC Network Peering for a private services access connection removes private connectivity for all resources that are using it and all services it's connected to. |\n| VPC Service Controls   | VPC Service Controls improve your ability to mitigate the risk of data exfiltration. With VPC Service Controls, you create perimeters around the Cloud SQL instance. VPC Service Controls restrict access to resources within the perimeter from the outside. Only clients and resources within the perimeter can interact with one another. For more information, see the Overview of VPC Service Controls. Also review the Cloud SQL limitations when using VPC Service Controls. To use VPC Service Controls with Cloud SQL, see Configuring VPC Service Controls.                          |\n| Transitive peering   | Only directly peered networks can communicate. Transitive peering isn't supported. In other words, if VPC network N1 is peered with N2 and N3, but N2 and N3 aren't directly connected, VPC network N2 can't communicate with VPC network N3 over VPC Network Peering. Clients in one project can connect to Cloud SQL instances in multiple projects using Shared VPC networks.                                                                        |\n| Moving Cloud SQL instances | Cloud SQL instances can only be moved between networks owned by the project in which they reside. Additionally, Cloud SQL instances can neither be moved between projects, nor can they be moved between networks hosted by different projects.                                                                                                         |\n## What's next\n- See how to [configure private IP](/sql/docs/postgres/configure-private-ip) .\n- Learn more about [private services access](/vpc/docs/private-services-access) .\n- See how to [configure private services access](/sql/docs/postgres/configure-private-services-access) for Cloud SQL instances.\n- Learn more about [Cloud VPN](/network-connectivity/docs/vpn/concepts/overview) .\n- Learn more about [VPC networks](/vpc/docs/vpc) .\n- Learn more about [VPC Network Peering](/vpc/docs/vpc-peering) .\n- Learn more about [Shared VPC](/vpc/docs/shared-vpc) .\n- Learn more about [Cloud SQL Auth Proxy](/sql/docs/postgres/sql-proxy) .", "guide": "Cloud SQL"}