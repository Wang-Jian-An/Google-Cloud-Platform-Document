{"title": "Cloud SQL - About restoring an instance", "url": "https://cloud.google.com/sql/docs/postgres/backup-recovery/restore", "abstract": "# Cloud SQL - About restoring an instance\nThis page provides information to review before restoring an instance from a backup or performing a point-in-time recovery (PITR).\n**Note:** This page contains features related to Cloud SQL editions. For more information about Cloud SQL editions, see [Introduction to Cloud SQL editions](/sql/docs/postgres/editions-intro) .\n", "content": "## What happens during a restore?\nFor Cloud SQL Enterprise edition and Cloud SQL Enterprise Plus edition, you can restore an instance from a backup. You can also restore backups across instances of different editions.\nWhen you restore an instance, the following data from the primary instance are restored to the new instance:\n- Databases\n- Users\n**Note:** The flags from the primary instance are not restored. Any flags previously set on the target instance are retained after the restore.\nThe restore operation causes the instance to restart.\n## PITR\nPoint-in-time recovery (PITR) helps you recover an instance to a specific point in time. For example, if an error causes a loss of data, you can recover a database to its state before the error occurred.\nPITR always creates a new instance; you can't perform a PITR to an existing instance. The new instance inherits the settings of the source instance, similar to how [clone creation](/sql/docs/postgres/clone-instance) works.\nPITR uses [write-ahead logging (WAL)](https://www.postgresql.org/docs/current/wal-intro.html) archiving. By default, PITR is enabled for Cloud SQL Enterprise Plus edition instances.\n**Caution:** If you deactivate and re-enable PITR, then any existing logs are deleted, and you won't be able to perform PITR earlier than the time that you re-enabled it. Enabling PITR requires restarting the database.\nFor step-by-step instructions for performing PITR, see [Use point-in-time recovery (PITR)](/sql/docs/postgres/backup-recovery/pitr) .\n### Restore an unavailable instance\nYou can use PITR to restore a Cloud SQL instance that isn't available. PITR typically offers a recovery point objective (RPO) of five minutes or less.\nIf the instance is unavailable, then you can use the API to [check for the latest time](/sql/docs/postgres/backup-recovery/pitr#get-the-latest-recovery-time) to which you can restore the instance and perform the recovery to that time. If the zone in which the instance is configured isn't accessible, then you can [clone the instance to a different zone](/sql/docs/postgres/clone-instance#clone-unavailable-instance) .\nSuppose a Cloud SQL instance becomes unavailable at 4 PM EST. If the latest recovery time is at 3:55 PM EST, then you can recover the instance up to this time.\n## General tips about performing a restore\nWhen you restore an instance from a backup, whether to the same instance or to a different instance, keep in mind the following items:\n- The restore operation overwrites all data on the target instance.\n- The target instance is unavailable for connections during the restore operation; existing connections are lost.\n- If you are restoring to an instance with read replicas, you must delete all replicas and recreate them after the restore operation completes.\n- The restore operation restarts the instance.\nFor step-by-step instructions for performing a restore, see:\n- [Restoring an instance](/sql/docs/postgres/backup-recovery/restoring) ## Tips and requirements for restoring to a different instance\nWhen you are restoring a backup to a different instance, keep in mind the following restrictions and best practices:\n- The target instance must have the same database version as the instance from which the backup was taken.\n- Cloud SQL always sets the storage capacity of the target instance to the maximum value of the size of both the configured disk and the backup disk. The backup disk is the size of the disk when the backup is taken.\n- The storage capacity of the target instance must be at least as large as the of the instance being backed up. The amount of storage used does not matter. You can see the storage capacity of the instance in the console [Cloud SQLinstances page](https://console.cloud.google.com/sql/instances) .\n- The target instance must be in the `RUNNABLE` state.\n- The target instance can have a different number of cores or amount of memory than the instance from which the backup was taken.\n- The target instance can be in a different region from the source instance.\n- During an outage, you can still retrieve a list of backups in a particular project. See [Viewing backups during an outage](/sql/docs/postgres/backup-recovery/backing-up#backuplist) .## Restore rate limitations\nYou are allowed a maximum of three restore operations every 30 minutes per instance per region per project. If a restore operation fails, it does not count towards this quota. If you reach the limit, the operation fails with an error message that tells you when you can run the operation again.\nLet's take a look at how Cloud SQL performs rate limiting for restores.\nCloud SQL uses tokens from a bucket to determine how many restore operations are available at any one time. For each backup, there's a bucket for each target project and target region. The target instances from the same project share one bucket if they are in the same region. There's a maximum of three tokens in each bucket that you can use for restore operations. Every 10 minutes, a new token is added to the bucket. If the bucket is full, the token overflows.\nEach time you issue a restore operation, a token is granted from the bucket. If the operation succeeds, the token is removed from the bucket. If it fails, the token is returned to the bucket. The following diagram shows how this works:\nFor example, in the following figure, Backup1, Backup2, and Backup3 are the backups from the same source instance.- Each backup (Backup1, Backup2, and Backup3) has its own bucket of tokens for restore operations that target different instances in Project 1 in Region A (Bucket11A, Bucket21A, and Bucket31A). Because each backup has its own bucket, you can restore each backup to the same instance three times every thirty minutes.\n- Each backup has a bucket for a separate project and for a separate region. For example, if there are five projects in a region, there are five buckets for that backup in that region, one in each project. In the previous figure, we have two projects in region A: Project 1 and Project n.- Backup1 has two buckets of tokens for restore operations in Region A. One bucket for Project 1 (Bucket11A), and one bucket for Project n (Bucket1nA).\n- Similarly, Backup3 has two buckets for restore operations in Region A. One for Project 1 (Bucket31A) and one for Project n (Bucket3nA).\n- Backup3 has one bucket in Region B, for Project1, because all instances in the same target project and the same target region share one bucket.## What's next\n- [Perform a restore from a backup](/sql/docs/postgres/backup-recovery/restoring#restorebackups) \n- [Use point-in-time recovery (PITR)](/sql/docs/postgres/backup-recovery/pitr)", "guide": "Cloud SQL"}