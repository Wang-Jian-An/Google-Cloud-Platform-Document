{"title": "Cloud SQL - Connect from Compute Engine", "url": "https://cloud.google.com/sql/docs/postgres/connect-compute-engine", "abstract": "# Cloud SQL - Connect from Compute Engine\nThis page describes how to use the psql client, installed on a Compute Engine instance, to connect to Cloud SQL.\nYou can use private IP, public IP, the Cloud SQL Auth Proxy, or the Cloud SQL Auth Proxy Docker image.\n**For step-by-step instructions on running a Compute Engine sample webapplication connected to Cloud SQL,** see the [quickstart for connectingfrom Compute Engine](/sql/docs/postgres/connect-instance-compute-engine) .\n", "content": "## Before you begin\nThis task does not include instructions for setting up your Compute Engine instance. If you need help with creating and configuring a Compute Engine instance, see the [Compute Engine documentation](/compute/docs/instances/create-start-instance) .\nEnsure your Compute Engine VM has the proper`scope`to connect using the Cloud SQL Admin API. [Configure the service account](/compute/docs/access/create-enable-service-accounts-for-instances#changeserviceaccountandscopes) to have either of the following access scopes:- https://www.googleapis.com/auth/sqlservice.admin\n- https://www.googleapis.com/auth/cloud-platform\nTo connect to Cloud SQL from a Compute Engine instance using private IP, private services access must be set up for your environment and your Cloud SQL instance must be configured to use private IP. Your Compute Engine instance must be in the same region as your Cloud SQL instance, and on the network configured for a private connection. [Learn more](/sql/docs/postgres/configure-private-ip) .### 1. Configure your instance to use private IPUse the instructions in [Configuring Private IP Connectivity](/sql/docs/postgres/configure-private-ip) .\n### 2. Open a Cloud Shell terminal connection to your Compute Engine instance.Use the appropriate instructions, depending on the instance's operating  system:- For Linux, see [  Connecting to Linux VMs](/compute/docs/instances/connecting-to-instance) .\n- For Windows, see [  Connecting to Windows VMs](/compute/docs/instances/connecting-to-windows) .If your Compute Engine instance is running either an RHEL or a  CentOS public image, SELinux might block the proxy connection. If this  happens, you must configure the SELinux feature to allow the connection.\nFor more information about SELinux for RHEL, see [  the RHEL documentation](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/selinux_users_and_administrators_guide/index) .  For more information about SELinux for CentOS, see [the CentOS documentation](https://wiki.centos.org/HowTos/SELinux) .\n### 3. Install the psql client on the Compute Engine instance,\n if it is not already installed.Install the psql client from the package manager:\n```\nsudo apt-get updatesudo apt-get install postgresql-client\n```Install the psql client from the package manager:\n```\nsudo yum install postgresql\n```Install the psql client from the package manager:\n```\nsudo zypper install postgresql\n```\n- Download the PostgreSQL Core Distribution for your platform from the [PostgreSQL Downloads page](https://www.postgresql.org/download/) .The Core Distribution includes the psql client.\n- Install the PostgreSQL database, following the directions on the download page.\n### 4. Connect with the psql client.```\npsql -h CLOUD_SQL_PRIVATE_IP_ADDRESS -U USERNAME\n```\nYou can find the private IP address on the [Cloud SQL instances page](https://console.cloud.google.com/sql/instances/) or by running the following `gcloud` command:\n```\ngcloud sql instances list\n```\n **To connect using public IP:** ### 1. Add a static IPv4 IP address to the Compute Engine instance, if it\n does not already have one.You cannot connect to Compute Engine using IPv6. For information about adding a  static IP address, see [ Reserving a new static external IP address](/compute/docs/configure-instance-ip-addresses#reserve_new_static) in the Compute Engine  documentation.\n### 2. Authorize the static IP address of the Compute Engine instance\n as a network that can connect to your Cloud SQL instance.For more information, see [Configuring access for public IP connections](/sql/docs/postgres/configure-ip) .\n **Note** : Grant authorization only  forIP addresses. Ephemeral IP addresses are temporary;  granting them access to your instance creates a security risk because they  could be reassigned to a different Compute Engine user later.\n### 3. Open a Cloud Shell terminal connection to your Compute Engine instance.Use the appropriate instructions, depending on the instance's operating  system:- For Linux, see [  Connecting to Linux VMs](/compute/docs/instances/connecting-to-instance) .\n- For Windows, see [  Connecting to Windows VMs](/compute/docs/instances/connecting-to-windows) .If your Compute Engine instance is running either an RHEL or a  CentOS public image, SELinux might block the proxy connection. If this  happens, you must configure the SELinux feature to allow the connection.\nFor more information about SELinux for RHEL, see [  the RHEL documentation](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/selinux_users_and_administrators_guide/index) .  For more information about SELinux for CentOS, see [the CentOS documentation](https://wiki.centos.org/HowTos/SELinux) .\n### 4. Install the psql client on the Compute Engine instance,\n if it is not already installed.Install the psql client from the package manager:\n```\nsudo apt-get updatesudo apt-get install postgresql-client\n```Install the psql client from the package manager:\n```\nsudo yum install postgresql\n```Install the psql client from the package manager:\n```\nsudo zypper install postgresql\n```\n- Download the PostgreSQL Core Distribution for your platform from the [PostgreSQL Downloads page](https://www.postgresql.org/download/) .The Core Distribution includes the psql client.\n- Install the PostgreSQL database, following the directions on the download page.\n### 5. Connect with the psql client.```\npsql -h CLOUD_SQL_PUBLIC_IP_ADDR -U USERNAME\n```\nYou can find the public IP address on the [Cloud SQL instances page](https://console.cloud.google.com/sql/instances/) or by running the following `gcloud` command:\n```\ngcloud sql instances list\n```\nFor an example of how to connect using SSL, see [Connecting with SSL](/sql/docs/postgres/connect-admin-ip#connect-ssl) .\n### 6. The psql prompt appears.\n### 7. If you need to keep unused connections alive:Set the [TCP keepalive](http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html) .\nFor more information, see [  Communicating between your instances and the Internet](/compute/docs/troubleshooting#communicatewithinternet) in the  Compute Engine documentation.\nConnections are kept alive automatically  for instances.\n **To connect using the Cloud SQL Auth Proxy from Compute Engine:** ### 1. Enable the Cloud SQL Admin API.\n [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=sqladmin&redirect=https://console.cloud.google.com) \n### 2. Create a service account. **Note: ** If your Compute Engine instance has  either the **Full API access** or **Cloud SQL Admin API** scope, you  can skip this step; you do not need to provide a certificate file when you  start the Cloud SQL Auth Proxy.\nIf you are connecting from Compute Engine, make sure your VM has the proper`scope`to connect using the Cloud SQL Admin API. [Configure the service account](/compute/docs/access/create-enable-service-accounts-for-instances#changeserviceaccountandscopes) to have either of the following access scopes:- https://www.googleapis.com/auth/sqlservice.admin\n- https://www.googleapis.com/auth/cloud-platform\n- In the Google Cloud console, go to the **Service accounts** page. [Go to Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts/) \n- Select the project that contains your Cloud SQL instance.\n- Click **Create service account** .\n- In the **Service account name** field, enter a descriptive name for the service account.\n- Change the **Service account ID** to a unique, recognizable value and then click **Create and continue** .\n- Click the **Select a role** field and select one of the following roles:- **Cloud SQL > Cloud SQL Client** \n- **Cloud SQL > Cloud SQL Editor** \n- **Cloud SQL > Cloud SQL Admin** \n- **Note:** To create a service account with the required permissions, you must have`resourcemanager.projects.setIamPolicy`permission. This permission is included in the  Project Owner, Project IAM Admin, and Organization Administrator roles.You must also have enabled the Cloud SQL Admin API. If you are using the legacy project  roles (Viewer, Editor, Owner), the service account must have at least the Editor role.- Click **Done** to finish creating the service account.\n- Click the action menu for your new service account and then select **Manage keys** .\n- Click the **Add key** drop-down menu and then click **Create new key** .\n- Confirm that the key type is JSON and then click **Create** .The private key file is downloaded to your machine. You can move it to another  location. Keep the key file secure.\nIf the Compute Engine instance is in a different project than the  Cloud SQL instance, ensure that its service account has the proper  permissions in the project that contains the Cloud SQL instance:\n- Go to the Compute Engine instances listing in the Google Cloud console. [Go to the Compute Engine instances listing](https://console.cloud.google.com/compute/instances) \n- If needed, select the project associated with the Compute Engine   instance.\n- Select the Compute Engine instance to display its properties.\n- In the Compute Engine instance properties, copy the name of   the service account.\n- Go to the **IAM & Admin Projects** page in the Google Cloud console. [Go to the IAM & Admin Projects page](https://console.cloud.google.com/iam-admin/iam/project) \n- Select the project that contains the Cloud SQL instance.\n- Search for the service account name.\n- If the service account is already there, and it has a role that includes the `cloudsql.instances.connect` permission, you can proceed to [step 4](#open-terminal) .The `Cloud SQL Client` , `Cloud SQL Editor` and `Cloud SQL Admin` roles all provide the necessary permission, as do the legacy `Editor` and `Owner` project roles.\n- Otherwise, add the service account by clicking **Add** .\n- In the **Add principals** dialog, provide the name of the service account   and select a role that include the `cloudsql.instances.connect` permission   (any Cloud SQL predefined role other than Viewer will work).Alternatively, you can use the basic Editor role by selecting **Project > Editor** , but the Editor role includes permissions across Google Cloud.If you do not see these roles, your Google Cloud user might not have the `resourcemanager.projects.setIamPolicy` permission.  You can check your permissions by going to the [IAM page](https://console.cloud.google.com/iam-admin) in the  Google Cloud console and searching for your user id.\n- Click **Add** .You now see the service account listed with    the specified role.### 3. Open a terminal connection to your Compute Engine instance.Use the appropriate instructions, depending on the instance's operating  system:- For Linux, see [  Connecting to Linux Instances](/compute/docs/instances/connecting-to-instance#gcetools) .\n- For Windows, see [  Connecting to Windows Instances](/compute/docs/instances/connecting-to-windows) .If your Compute Engine instance is running either an RHEL or a  CentOS public image, SELinux might block the proxy connection. If this  happens, you must configure the SELinux feature to allow the connection.\nFor more information about SELinux for RHEL, see [  the RHEL documentation](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/selinux_users_and_administrators_guide/index) .  For more information about SELinux for CentOS, see [the CentOS documentation](https://wiki.centos.org/HowTos/SELinux) .\n### 4. Install the psql client on the Compute Engine instance,\n if it is not already installed.Install the psql client from the package manager:\n```\nsudo apt-get updatesudo apt-get install postgresql-client\n```Install the psql client from the package manager:\n```\nsudo yum install postgresql\n```Install the psql client from the package manager:\n```\nsudo zypper install postgresql\n```\n- Download the PostgreSQL Core Distribution for your platform from the [PostgreSQL Downloads page](https://www.postgresql.org/download/) .The Core Distribution includes the psql client.\n- Install the PostgreSQL database, following the directions on the download page.\n### 5. Install the Cloud SQL Auth Proxy on the Compute Engine instance.- Download the Cloud SQL Auth Proxy:```\ncurl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.linux.amd64\n```\n- Make the Cloud SQL Auth Proxy executable:```\nchmod +x cloud-sql-proxy\n```\n- Download the Cloud SQL Auth Proxy:```\ncurl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.linux.386\n```\n- If the`curl`command is not found, run`sudo apt install curl`and repeat the download command.\n- Make the Cloud SQL Auth Proxy executable:```\nchmod +x cloud-sql-proxy\n```Right-click\n [https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.x64.exe](https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.x64.exe) \nand select\n **Save Link As** \nto download the Cloud SQL Auth Proxy. Rename the file to\n`cloud-sql-proxy.exe`\n.\nRight-click\n [https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.x86.exe](https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.10.1/cloud-sql-proxy.x86.exe) \nand select\n **Save Link As** \nto download the Cloud SQL Auth Proxy. Rename the file to\n`cloud-sql-proxy.exe`\n.\nThe Cloud SQL Auth Proxy has different container images, such as `distroless` , `alpine` , and `buster` . The default Cloud SQL Auth Proxy container image uses [distroless](https://github.com/GoogleContainerTools/distroless) , which contains no shell. If you need a shell or related tools, then download an image based on `alpine` or `buster` . For more information, see [Cloud SQL Auth Proxy Container Images](https://github.com/GoogleCloudPlatform/cloudsql-proxy#container-images) .\nYou can pull the latest image to your local machine using Docker by using the following command:\n```\ndocker pull gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.10.1\n```\n **Note** : The Cloud SQL Auth Proxy uses a repository that supports the`gcr.io`domain but serves images from Artifact Registry. For more information, see [Transition from Container Registry](/artifact-registry/docs/transition/transition-from-gcr) .\nFor other operating systems not included here, you can\n [compile the Cloud SQL Auth Proxy from source](http://github.com/GoogleCloudPlatform/cloudsql-proxy) \n.\n### 6. Start the Cloud SQL Auth Proxy. **Note: ** If your Compute Engine instance has  either the **Full API access** or **Cloud SQL Admin API** scope,  you do not need to provide a certificate file when you  start the Cloud SQL Auth Proxy.\nDepending on your language and environment, you can start the Cloud SQL Auth Proxy using TCP sockets, Unix sockets, or the Cloud SQL Auth Proxy Docker image. The Cloud SQL Auth Proxy binary connects to one or more Cloud SQL instances specified on the command line, and opens a local connection as either TCP or a Unix socket. Other applications and services, such as your application code or database management client tools, can connect to Cloud SQL instances through those TCP or Unix socket connections.\n **Warning:** Be careful when binding the Cloud SQL Auth Proxy to an external interface. Anyone with access to that interface/port will be authorized to connect to your instance.For TCP connections, the Cloud SQL Auth Proxy listens on `localhost` ( `127.0.0.1` ) by default. So, when you specify `--port PORT_NUMBER` for an instance, the local connection is at `127.0.0.1:PORT_NUMBER` .\nAlternatively, you can specify a different address for the local connection. For example, here's how to make the Cloud SQL Auth Proxy listen at `0.0.0.0:1234` for the local connection:\n```\n./cloud-sql-proxy --address 0.0.0.0 --port 1234 INSTANCE_CONNECTION_NAME\n```- Copy your . This can be found on the **Overview** page for your instance in the [Google Cloud console](https://console.cloud.google.com/sql) . or by running the following command:```\n\u00a0 \u00a0 gcloud sql instances describe INSTANCE_NAME --format='value(connectionName)'\n```.For example: .\n- If the instance has both public and private IP configured, and you want the  Cloud SQL Auth Proxy to use the [private IP](/sql/docs/postgres/configure-private-ip) address,  you must provide the following option when you start the Cloud SQL Auth Proxy:```\n--private-ip\n```\n- If you are using a service account to authenticate the Cloud SQL Auth Proxy, note the location on your client machine of the private key file that was created when you created the service account.\n- Start the Cloud SQL Auth Proxy.Some possible Cloud SQL Auth Proxy invocation strings:- Using Cloud SDK authentication:```\n./cloud-sql-proxy --port 5432 INSTANCE_CONNECTION_NAME\n```The specified port must not already be in use, for example, by a local database server.\n- Using a service account and explicitly including the name of the instance connection (recommended for production environments):```\n./cloud-sql-proxy \\--credentials-file PATH_TO_KEY_FILE INSTANCE_CONNECTION_NAME &\n```\nFor more information about Cloud SQL Auth Proxy options, see [Options for authenticating the Cloud SQL Auth Proxy](/sql/docs/postgres/connect-auth-proxy#authentication-options) and [Options for specifying instances](/sql/docs/postgres/connect-auth-proxy#instances-options) .\n **Note:** The Cloud SQL Auth Proxy currently does not support Unix sockets on Windows, so this option is only available for Linux and macOS platforms.\nThe Cloud SQL Auth Proxy can listen on a Unix socket, which is a Posix standard mechanism for using a folder to manage communication between two processes running on the same host. Advantages to using Unix sockets are improved security and lower latency, however, you cannot access a Unix socket from an external machine.\n **Note: ** The PostgreSQL standard requires a `.s.PGSQL.5432` suffix in the socket path. Some libraries apply this suffix automatically, but others require you to specify the socket path as follows:```\n\u00a0 /cloudsql/INSTANCE_CONNECTION_NAME/.s.PGSQL.5432\u00a0 \n```\nTo create and use a Unix socket, the target directory must exist and both the Cloud SQL Auth Proxy and application must have read and write access to it.- If you are using explicit instance specification, copy your. You can find this on the **Overview** page for your instance in the [Google Cloud console](https://console.cloud.google.com/sql) or by running the following command:```\ngcloud sql instances describe INSTANCE_NAME --format='value(connectionName)'\n```For example: .\n- Create the directory where the Cloud SQL Auth Proxy sockets will live:```\nsudo mkdir /cloudsql; sudo chmod 777 /cloudsql\n```\n- If you are using a service account to authenticate the Cloud SQL Auth Proxy, note the location on your client machine of the private key file that was created when you created the service account.\n- Open a new Cloud Shell terminal window and start the Cloud SQL Auth Proxy.Some possible Cloud SQL Auth Proxy invocation strings:- Using a service account and explicitly including the name of the instance connection (recommended for production environments):```\n./cloud-sql-proxy --unix-socket /cloudsql--credentials-file PATH_TO_KEY_FILE INSTANCE_CONNECTION_NAME &\n```\n- Using Cloud SDK authentication and automatic instance discovery:```\n./cloud-sql-proxy --unix-socket /cloudsql &\n```\nStart the Cloud SQL Auth Proxy in its own Cloud Shell terminal so you can monitor its output without it mixing with the output from other programs.For more information about Cloud SQL Auth Proxy options, see [Options for authenticating the Cloud SQL Auth Proxy](/sql/docs/postgres/connect-auth-proxy#authentication-options) and [Options for specifying instances](/sql/docs/postgres/connect-auth-proxy#instances-options) .\n- **NOTE:** When using a unix socket to connect to Cloud SQL using the Cloud SQL Auth Proxy, make sure the socket  filename's length does not surpass the system's limit. It depends on the system, but it's usually  between 91-108 characters. On Linux, the length is usually defined as 108, and you can use the  following command to check:```\ncat /usr/include/linux/un.h | grep \"define UNIX_PATH_MAX\"\n```\nTo run the Cloud SQL Auth Proxy in a Docker container, use the Cloud SQL Auth Proxy Docker image available from the [Google Container Registry](/container-registry) .\nYou can start the Cloud SQL Auth Proxy using either TCP sockets or Unix sockets, with the commands shown below. The options use an as the connection string to identify a Cloud SQL instance. You can find the on the **Overview** page for your instance in the [Google Cloud console](https://console.cloud.google.com/sql) . or by running the following command:\n```\ngcloud sql instances describe INSTANCE_NAME\n```\n.\nFor example: `myproject:myregion:myinstance` .\nNote: The Cloud SQL Auth Proxy doesn't support listening on Unix domain sockets on Windows.\nDepending on your language and environment, you can start the Cloud SQL Auth Proxy  using either TCP sockets or Unix sockets. Unix sockets are not supported  for applications written in the Java programming language or for the Windows  environment.```\ndocker run -d \\\\\u00a0 -v PATH_TO_KEY_FILE:/path/to/service-account-key.json \\\\\u00a0 -p 127.0.0.1:5432:5432 \\\\\u00a0 gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.10.1 \\\\\u00a0 --address 0.0.0.0 --port 5432 \\\\\u00a0 --credentials-file /path/to/service-account-key.json INSTANCE_CONNECTION_NAME\n```\nIf you're using the credentials provided by your Compute Engine instance,  don't include the `--credentials-file` parameter and the `-v :/path/to/service-account-key.json` line.\nAlways specify `127.0.0.1` prefix in -p so that the Cloud SQL Auth Proxy is not  exposed outside the local host. The \"0.0.0.0\" in the instances parameter  is required to make the port accessible from outside of the Docker  container.```\ndocker run -d -v /cloudsql:/cloudsql \\\\\u00a0 -v PATH_TO_KEY_FILE:/path/to/service-account-key.json \\\\\u00a0 gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.10.1 --unix-socket=/cloudsql \\\\\u00a0 --credentials-file /path/to/service-account-key.json INSTANCE_CONNECTION_NAME\n```\nIf you're using the credentials provided by your Compute Engine instance,  don't include the `--credentials-file` parameter and the `-v :/path/to/service-account-key.json` line.\nIf you are using a container optimized image, use a writeable directory  in place of `/cloudsql` , for example:\n```\n-v /mnt/stateful_partition/cloudsql:/cloudsql\n```\nYou can specify more than one instance, separated by commas.  You can also use [Compute Engine metadata](/compute/docs/metadata) to  dynamically determine the instances to connect to. [Learn more about the Cloud SQL Auth Proxy parameters.](/sql/docs/postgres/sql-proxy#flags) \n### 7. Start the psql session.The connection string you use depends on whether you started the Cloud SQL Auth Proxy using a TCP socket or a UNIX socket or Docker.\n- Start the psql client:```\npsql \"host=127.0.0.1 sslmode=disable dbname=DB_NAME user=USERNAME\"\n```Even though the `sslmode` parameter is set to `disable` , the Cloud SQL Auth Proxy does  provide an encrypted connection.When you connect using TCP sockets, the Cloud SQL Auth Proxy is accessed through `127.0.0.1` .\n- If prompted, enter the password.\n- The psql prompt appears.\n- Start the psql client:```\npsql \"sslmode=disable host=/cloudsql/INSTANCE_CONNECTION_NAME dbname=DB_NAME user=USERNAME\"\n```Even though the `sslmode` parameter is set to `disable` , the Cloud SQL Auth Proxy does  provide an encrypted connection.\n- Enter the password.\n- The psql prompt appears.\nNeed help? For help troubleshooting the proxy, see [Troubleshooting Cloud SQL Auth Proxy connections](/sql/docs/postgres/connect-auth-proxy#troubleshooting) , or see our [Cloud SQL Support](/sql/docs/postgres/getting-support) page.\n## What's next- Get help [ troubleshooting connection issues](/sql/docs/postgres/connect-auth-proxy#troubleshooting) for the Cloud SQL Auth Proxy.\n- Create [users](/sql/docs/postgres/create-manage-users) and [databases](/sql/docs/postgres/create-manage-databases) .\n- Learn more about [private IP](/sql/docs/postgres/private-ip) .\n- Learn about [ options for connecting to your instance from your application](/sql/docs/postgres/connect-overview#external-connection-methods) .\n- Learn about [the psql  client](https://www.postgresql.org/docs/current/static/app-psql.html) .\n- Learn about [options for support](/sql/docs/support) .", "guide": "Cloud SQL"}