{"title": "Cloud SQL - Manage read replicas", "url": "https://cloud.google.com/sql/docs/postgres/replication/manage-replicas", "abstract": "# Cloud SQL - Manage read replicas\nThis page describes how to manage read replicas. These operations include disabling and enabling replication, promoting a replica, configuring parallel replication, and checking the replication status.\nFor more information about how replication works, see [Replication in Cloud SQL](/sql/docs/postgres/replication) .\n", "content": "## Disable replication\nBy default, a replica starts with replication enabled. However, you can disable replication, for example, to debug or analyze the state of an instance. When you are ready, you explicitly re-enable replication. Disabling or re-enabling replication doesn't restart the replica instance.\nDisabling replication does not stop the replica instance; it becomes a read-only instance that is no longer replicating from its primary instance. You continue to be charged for the instance. On the disabled replica, you can re-enable replication, delete the replica, or promote the replica to a stand-alone instance.\nTo disable replication:\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- Select a replica instance by clicking its name.\n- Click **Disable replication** in the button bar.\n- Click **OK** .\n```\ngcloud sql instances patch REPLICA_NAME \\--no-enable-database-replication\n```To execute this cURL command at a command line prompt, you acquire an access token by using the [gcloud auth print-access-token](/sdk/gcloud/reference/auth/application-default/print-access-token) command. You can also use the [ APIs Explorer on the Instances:patch page](/sql/docs/postgres/admin-api/rest/v1beta4/instances/patch) to send the REST API request.\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The name of the replica instance\nHTTP method and URL:\n```\nPATCH https://sqladmin.googleapis.com/v1/projects/project-id/instances/replica-name\n```\nRequest JSON body:\n```\n{\n \"settings\":\n {\n \"databaseReplicationEnabled\": \"False\"\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:To execute this cURL command at a command line prompt, you acquire an access token by using the [gcloud auth print-access-token](/sdk/gcloud/reference/auth/application-default/print-access-token) command. You can also use the [ APIs Explorer on the Instances:patch page](/sql/docs/postgres/admin-api/rest/v1beta4/instances/patch) to send the REST API request.\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The name of the replica instance\nHTTP method and URL:\n```\nPATCH https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances/replica-name\n```\nRequest JSON body:\n```\n{\n \"settings\":\n {\n \"databaseReplicationEnabled\": \"False\"\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n## Enable replication\nIf a replica has not been replicating for a long time, it will take longer for it to catch up to the primary instance. In this case, delete the replica and create a new one.\nTo enable replication:\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- Select a replica instance by clicking its name.\n- Click **Enable replication** .\n- Click **Ok** .\n```\ngcloud sql instances patch REPLICA_NAME \\--enable-database-replication\n```To execute this cURL command at a command line prompt, you acquire an access token by using the [gcloud auth print-access-token](/sdk/gcloud/reference/auth/application-default/print-access-token) command. You can also use the [ APIs Explorer on the Instances:patch page](/sql/docs/postgres/admin-api/rest/v1beta4/instances/patch) to send the REST API request.\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The name of the replica instance\nHTTP method and URL:\n```\nPATCH https://sqladmin.googleapis.com/v1/projects/project-id/instances/replica-name\n```\nRequest JSON body:\n```\n{\n \"settings\":\n {\n \"databaseReplicationEnabled\": \"True\"\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:To execute this cURL command at a command line prompt, you acquire an access token by using the [gcloud auth print-access-token](/sdk/gcloud/reference/auth/application-default/print-access-token) command. You can also use the [ APIs Explorer on the Instances:patch page](/sql/docs/postgres/admin-api/rest/v1beta4/instances/patch) to send the REST API request.\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The name of the replica instance\nHTTP method and URL:\n```\nPATCH https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances/replica-name\n```\nRequest JSON body:\n```\n{\n \"settings\":\n {\n \"databaseReplicationEnabled\": \"True\"\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n## Promote a replica\nPromoting a read replica stops replication and converts the instance to a standalone Cloud SQL primary instance with read and write capabilities.\nWhen promoted, read replicas are automatically configured with backups, but they aren't automatically configured as high availability (HA) instances. You can enable high availability after promoting the replica just as you would for any non-replica instance. Configuring a read replica for high availability is done the same way as for a primary instance. Learn more about [configuring the instance for high availability](/sql/docs/postgres/configure-ha#ha-existing) .\nSee [Promotingreplicas for regional migration or disaster recovery](/sql/docs/postgres/replication/cross-region-replicas) to learn more about use cases for cross-region replicas.\nBefore promoting a read replica, if the primary is still available and serving clients, you should do the following:\n- Stop all writes to the primary instance.\n- [Check the replication status](#replication-status) of the replica (follow the instructions in the **psql Client** tab).\n- Verify that the replica is replicating, and then wait until the replication lag reported by the`replay_lag`metric is 0.\nOtherwise, a newly promoted instance may be missing some transactions that were committed to the primary instance.\nTo promote a replica to a standalone instance:\n- In the Google Cloud console, go to the **Cloud SQL Instances** page. [Go to Cloud SQL Instances](https://console.cloud.google.com/sql) \n- Select a replica instance by clicking its name.\n- Click **Promote replica** .\n- Click **Ok** .\n```\ngcloud sql instances promote-replica REPLICA_NAME\u00a0 \n```To execute this cURL command at a command line prompt, you acquire an access token by using the [gcloud auth print-access-token](/sdk/gcloud/reference/auth/application-default/print-access-token) command. You can also use the [ APIs Explorer on the Instances:promoteReplica page](/sql/docs/postgres/admin-api/rest/v1beta4/instances/promoteReplica) to send the REST API request.\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The name of the replica instance\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/v1/projects/project-id/instances/replica-name/promoteReplica\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:To execute this cURL command at a command line prompt, you acquire an access token by using the [gcloud auth print-access-token](/sdk/gcloud/reference/auth/application-default/print-access-token) command. You can also use the [ APIs Explorer on the Instances:promoteReplica page](/sql/docs/postgres/admin-api/rest/v1beta4/instances/promoteReplica) to send the REST API request.\nBefore using any of the request data, make the following replacements:- : The project ID\n- : The name of the replica instance\nHTTP method and URL:\n```\nPOST https://sqladmin.googleapis.com/sql/v1beta4/projects/project-id/instances/replica-name/promoteReplica\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\nConfirm that the promoted instance is configured correctly. In particular, consider [configuring the instance for high availability](/sql/docs/configure-ha#ha-existing) if needed.\n## Check replication status\nWhen you view a replica instance using the Google Cloud console or log into the instance using an administration client, you get details about replication, including status and metrics. When you use the [gcloud CLI](/sdk/gcloud) , you get a brief summary of the replication configuration.\nBefore checking the replication status for a Cloud SQL replica instance, use the [gcloud sql instances describe](https://cloud.google.com/sdk/gcloud/reference/sql/instances/describe) command to display the status of the instance. As a result, you can see whether replication is enabled for the replica instance.\nThe following metrics are available for replica instances. ( [Learn more](/sql/docs/mysql/monitor-instance#available-metrics) about additional metrics available for all instances, including non-replica instances.)\n| Metric                       | Description                                                                                                                                                                                                                                                        |\n|:------------------------------------------------------------------------------------------------||\n| Replication\u00a0State (cloudsql.googleapis.com/database/replication/state)       | Indicates whether replication is actively streaming logs from the primary to the replica. Possible values are: Running Stopped Error This metric reports Running if: pg_catalog.pg_stat_wal_receiver reports a status of \"streaming\", and pg_catalog.pg_is_wal_replay_paused() reports \"f\" (false). For more information, see The Statistics Collector and System Administration Functions in the PostgreSQL Reference Manual.                                                                                                                                                 |\n| Replication\u00a0Lag (cloudsql.googleapis.com/database/replication/replica_lag)      | The amount of time that the replica's state is lagging behind the state of the primary instance. This is the difference between (1) the current time and (2) the original timestamp at which the primary committed the transaction that is currently being applied on the replica. In particular, writes may be counted as lagging even if they have been received by the replica, if the replica has not yet applied the write to the database. For cascading replicas, each primary-replica pair is monitored separately and there's no single metric that yields the end-to-end (primary to replica) lag. For more information, see Replication lag.                                                                                           |\n| Lag\u00a0Bytes (cloudsql.googleapis.com/database/postgresql/replication/replica_byte_lag)   | Reports the number of bytes by which the read replica lags the primary. Four time series are produced for each replica, showing the number of bytes in the primary's write-ahead log that have not yet been\u2026 sent_location: \u2026sent to the replica write_location: \u2026written to disk by the replica flush_location: \u2026flushed to disk by the replica replay_location: \u2026replayed by the replica These metrics serve different purposes; for example, replay_location gives an indication of the replication lag (the number of transactions committed to the primary that have not yet been applied to the replica), while flush_location gives an indication of the number of transactions that have not been recorded durably on the replica instance. These metrics are computed by comparing pg_catalog.pg_current_wal_lsn() to one of the following fields from pg_stat_replication: sent_lsn, write_lsn, flush_lsn, or replay_lsn. For more information, see The Statistics Collector in the PostgreSQL Reference Manual. |\n| Max\u00a0Lag\u00a0Bytes (cloudsql.googleapis.com/database/postgresql/external_sync/max_replica_byte_lag) | For a replica of an external primary, reports the maximum replication lag (in bytes) over all databases that are being replicated to this instance. For each database, this is defined as the number of bytes in the primary's write-ahead log that have not been confirmed to be received by the replica. This metric is computed by sending a query to the primary to compare pg_catalog.pg_current_wal_lsn() to the value of confirmed_flush_lsn for each database being replicated to this replica instance. For more information, see The Statistics Collector in the PostgreSQL Reference Manual.                                                                                                       |\nTo check replication status:\nCloud SQL reports the `Replication State` metric on the [default Cloud SQL monitoring dashboard](https://console.cloud.google.com/monitoring/dashboards/resourceList/cloudsql_database) .\nTo view other metrics for in-region and cross-region replicas, and  replicas of external servers, create a custom dashboard and add the metrics  you wish to monitor to it:- In the Google Cloud console, go to the **Monitoring** page. [Go to Monitoring](https://console.cloud.google.com/monitoring) \n- Select the **Dashboards** tab.\n- Click **Create dashboard** .\n- Give the dashboard a name and click OK.\n- Click **Add chart** .\n- For **Resource Type** select **Cloud SQL Database** .\n- Do any of the following:\n- **To monitor the replication state metric** : in the **Select a\n  metric** field, type`Replication state`. Then add a filter  for`state = \"Running\"`. The chart shows 1 if replication is  running and 0 otherwise.\n- **To monitor the replication lag, in bytes, for a read replica** : in  the **Select a metric** field, type`Lag Bytes`. Then add  a filter on`replica_lag_type = \"replay_location\"`. The chart  shows the number of bytes associated with transactions that have been  committed on the primary but have not yet been replayed on the  replica.\n- **To monitor the replication lag, in bytes, for a replica of an\n  external primary** : in the **Select a metric** field, type`Max Lag Bytes`. The chart shows the number of bytes  associated with transactions that have been committed on the primary but  have not yet been confirmed received by the replica.For a replica instance, check the replication status with:\n```\ngcloud sql instances describe REPLICA_NAME\n```\nIn the output, look for the properties `databaseReplicationEnabled` and `masterInstanceName` .\nFor a primary instance, check if there are replicas with:\n```\ngcloud sql instances describe PRIMARY_INSTANCE_NAME\n```\nIn the output, look for the property `replicaNames` .Some replication status metrics are produced by the primary and some  are produced by the replica. For the following steps, connect to the  replica or primary instance (as directed below) with a PostgreSQL  client.\nFor information, see [Connection options for external applications](/sql/docs/postgres/external-connection-methods) .- To check the replica's status **from the primary instance** :```\nselect * from pg_stat_replication;\n```Look for the following metrics in the output of the command:- `client_addr`: The IP address of the replica   instance.\n- `state`: Indicates whether the SQL thread for executing   events in the relay log is running. The value is`streaming`when replication is started.\n- `replay_lag`: The number of bytes that the replica SQL   thread is behind the primary instance. The value is`O`or   a small number of bytes.\n- To check the replica's status **from the replica instance** :```\nselect * from pg_stat_wal_receiver;\n```Look for the following metrics in the output of the command:- `sender_host`: The IP address of the primary   instance.\n- `status`: Indicates whether the SQL thread for executing   events in the relay log is running. The value is`streaming`when replication is started.\n- `last_msg_send_time`and`last_msg_receipt_time`: The difference between these two   timestamps is the lag time.\nTo check whether replication has been paused:```\nselect pg_is_wal_replay_paused();\n```The value is `t` if replication is paused and `f` otherwise.To check whether there are transactions that have been received from   the primary but not yet applied:```\n# for PostgreSQL 9.6select pg_catalog.pg_last_xlog_receive_location(), pg_catalog.pg_last_xlog_replay_location();# for PostgreSQL 10 and aboveselect pg_catalog.pg_last_wal_receive_lsn(), pg_catalog.pg_last_wal_replay_lsn();\n```If the two values are equal, then the replica has processed all of the   transactions it has received from the primary.\nFor more details about the output from these commands, see the  PostgreSQL documentation on [The  Statistics Collector](https://www.postgresql.org/docs/current/static/monitoring-stats.html) .\n## Troubleshoot\n| Issue             | Troubleshooting                                                                                                                                                                                                                               |\n|:--------------------------------------------------------||\n| Read replica didn't start replicating on creation.  | There's probably a more specific error in the log files. Inspect the logs in Cloud Logging to find the actual error.                                                                                                                                                                                                      |\n| Unable to create read replica - invalidFlagValue error. | One of the flags in the request is invalid. It could be a flag you provided explicitly or one that was set to a default value. First, check that the value of the max_connections flag is greater than or equal to the value on the primary. If the max_connections flag is set appropriately, inspect the logs in Cloud Logging to find the actual error.                                                                                                                                           |\n| Unable to create read replica - unknown error.   | There's probably a more specific error in the log files. Inspect the logs in Cloud Logging to find the actual error. If the error is: set Service Networking service account as servicenetworking.serviceAgent role on consumer project, then disable and re-enable the Service Networking API. This action creates the service account necessary to continue with the process.                                                                                                                                      |\n| Disk is full.           | The primary instance disk size can become full during replica creation. Edit the primary instance to upgrade it to a larger disk size.                                                                                                                                                                                                 |\n| Disk space increases significantly.      | A slot that's not actively used to track data causes PostgreSQL to hold onto WAL segments indefinitely, causing the disk space to grow indefinitely. If you use the logical replication and decoding features in Cloud SQL, replication slots are created and dropped automatically. Unused replication slots can be detected by querying the pg_replication_slots system view and filtering on the active column. Unused slots can be dropped to remove WAL segments using the pg_drop_replication_slot command.                                                                                                       |\n| The replica instance is using too much memory.   | The replica uses temporary memory to cache often-requested read operations, which can lead it to use more memory than the primary instance. Restart the replica instance to reclaim the temporary memory space.                                                                                                                                                                               |\n| Replication stopped.         | The maximum storage limit was reached and automatic storage increase isn't enabled. Edit the instance to enable automatic storage increase.                                                                                                                                                                                                |\n| Replication lag is consistently high.     | The write load is too high for the replica to handle. Replication lag takes place when the SQL thread on a replica is unable to keep up with the IO thread. Some kinds of queries or workloads can cause temporary or permanent high replication lag for a given schema. Some of the typical causes of replication lag are: Slow queries on the replica. Find and fix them. All tables must have a unique/primary key. Every update on such a table without a unique/primary key causes full table scans on th replica. Queries like DELETE ... WHERE field < 50000000 cause replication lag with row-based replication since a huge number of updates are piled up on the replica. Some possible solutions include: Edit the instance to increase the size of the replica. Reduce the load on the database. Send read traffic to the read replica. Index the tables. Identify and fix slow write queries. Recreate the replica. |\n| Errors when rebuilding indexes in PostgreSQL 9.6.  | You get an error from PostgreSQL informing you that you need to rebuild a particular index. This can be done only on the primary instance. If you create a new replica instance, you soon get the same error again. Hash indexes are not propagated to replicas in PostgreSQL versions below 10. If you must use hash indexes, upgrade to PostgreSQL 10+. Otherwise, if you also want to use replicas, don't use hash indexes in PostgreSQL 9.6.                                                                                                                      |\n| Query on the primary instance is always running.  | After creating a replica, the query SELECT * from pg_stat_activity where state = 'active' and pid = XXXX and username = 'cloudsqlreplica' is expected to run continuously on your primary instance.                                                                                                                                                                                  |\n| Replica creation fails with timeout.     | Long-running uncommitted transactions on the primary instance can cause read replica creation to fail. Recreate the replica after stopping all running queries.                                                                                                                                                                                           |\n## What's next\n- Learn how to [create a read replica](/sql/docs/postgres/replication/create-replica) .\n- Learn more about [requirements and best practices for replication](/sql/docs/postgres/replication) .", "guide": "Cloud SQL"}