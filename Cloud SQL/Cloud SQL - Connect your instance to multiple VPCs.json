{"title": "Cloud SQL - Connect your instance to multiple VPCs", "url": "https://cloud.google.com/sql/docs/postgres/connect-multiple-vpcs", "abstract": "# Cloud SQL - Connect your instance to multiple VPCs\nThis page describes how to connect to your Cloud SQL instance across transitively peered VPCs.\nCloud SQL offers the following ways to connect your Cloud SQL instance to multiple VPCs using private IP:\n- [Connect using custom route advertisements](#custom-route) \n- [Connect using an intermediate proxy (SOCKS5)](#intermediate-proxy) \n- [Connect using Proxy as a service](#proxy-service) \n- [Connect using Private Service Connect ](#connect-psc) \nTo learn more about your Cloud SQL instance and multiple VPCs, see [Cloud SQL instance across multiple VPCs]() .\n", "content": "## Connect using custom route advertisements\nYou can use [Cloud Router](/network-connectivity/docs/router/concepts/overview) to manually advertise routes between two networks that go through an intermediate VPC to connect multiple VPCs to your Cloud SQL instance. The two VPCs must be connected using a virtual private network (VPN), Cloud Interconnect , or any other [Cloud Router](/network-connectivity/docs/router/concepts/overview) supported network.\nWith custom route advertisements, your Cloud SQL VPC, , is connected to your main VPC, , using an intermediate VPC, . You can configure shared routes between these networks in the following ways:\n- You can use Cloud Router to manually advertise routes between two networks that go through an intermediate VPC. For more information on how to configure Cloud Router to manually advertise routes, see [Transit network](/vpc/docs/vpc-peering#transit-network) .\n- You can create two [HA VPC gateways](/network-connectivity/docs/vpn/concepts/topologies#2-gcp-gateways) that connect to each other to bridge the two different VPCs and configure Cloud Router to share routes between them. For more information on how to set up HA VPC gateways, see [Create HA VPC gateways to connect VPC networks](/network-connectivity/docs/vpn/how-to/creating-ha-vpn2#creating-ha-gw-2-gw-and-tunnel) .\nWe recommend using custom route advertisements to connect multiple VPCs to your Cloud SQL instance using [Cloud Router](/network-connectivity/docs/router/concepts/overview) .\n## Connect using an intermediate proxy (SOCKS5)\nYou can set up an intermediate proxy, such as SOCKS5 proxy, on an intermediate VPC along with the [Cloud SQL Auth Proxy](/sql/docs/postgres/proxy) in your main VPC between the client and your Cloud SQL instance. This enables the intermediate node to forward encrypted traffic from the Cloud SQL Auth Proxy to the Cloud SQL instance.\nTo use an intermediate proxy to connect to multiple VPCs, follow these steps:\n- Install and configure a SOCKS5 server on your intermediate VM. An example of a SOCKS5 server is [Dante](https://www.inet.no/dante/) .\n- Configure the SOCKS5 server using any port to bind to your VM's`ens4`network interface for both external and internal connections.\n- [Configure your VPC's firewall](/vpc/docs/firewalls) to allow TCP traffic from the appropriate IP address or range to the SOCKS server's configured port.\n- Install the Cloud SQL Auth Proxy on your external client.\n- Run the Cloud SQL Auth Proxy on your external client with the `ALL_PROXY` environment variable set to the intermediary VM's IP address and port set to the one used by the SOCKS server.```\nALL_PROXY=socks5://$IP_ADDRESS:$PORT cloud-sql-proxy $INSTANCE_CONNECTION_NAME\n```To run this command, replace the following variables:- `INSTANCE_CONNECTION_NAME`: your Cloud SQL instance name in`project:region:instance-id`format.\n- `IP_ADDRESS`: your connection IP address. If you're connecting from a peered VPC, use the intermediary VM's internal IP address. Otherwise, use its external IP address.\n- `PORT`: the port used by your connection.\nFor example, the following code configures the Cloud SQL Auth Proxy to connect to the instance using a SOCKS server running on the IP address `198.51.100.1` and on port `1080` :.```\nALL_PROXY=socks5://198.51.100.1:1080 cloud-sql-proxy $INSTANCE_CONNECTION_NAME\n```\n[psql](/sql/docs/postgres/connect-admin-ip)\n```\n```psql -h 127.0.0.1 -p 5432 -U postgres```\n```\nThe performance of a SOCKS5 proxy is dependent on the available CPU and memory. For larger setups or where more applications will be using the proxy, you may need to deploy more instances of the SOCKS5 proxy.\n## Connect using the Cloud SQL Auth Proxy as a service\nYou can install and run the Cloud SQL Auth Proxy on your intermediate VPC instead of your external client and enable secure connections by pairing it with a protocol-aware proxy, also known as a connection pooler. Examples of connection poolers include [PGbouncer](https://www.pgbouncer.org/) , or [Pgpool-II](https://pgpool.net/) (PostgreSQL only).\nThis connection method allows your applications to securely connect directly to the pooler using a configured SSL. The pooler passes databases queries to your Cloud SQL instance using the Cloud SQL Auth Proxy.\n**Note:** You'll need to set up your own secure connection. These connections aren't secured by Cloud SQL.\n## Connect using Private Service Connect\n[Private Service Connect](/sql/docs/postgres/about-private-service-connect) allows you to connect to multiple VPC networks across different projects or organizations. You can use Private Service Connect to connect to either a primary instance or any of its read replicas. For more information about Private Service Connect, see [Private Service Connect overview](/sql/docs/postgres/about-private-service-connect) .\nTo connect across multiple VPCs using Private Service Connect, see [Connect to an instance using Private Service Connect](/sql/docs/postgres/configure-private-service-connect) .", "guide": "Cloud SQL"}