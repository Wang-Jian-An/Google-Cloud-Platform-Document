{"title": "Cloud SQL - About customer-managed encryption keys (CMEK)", "url": "https://cloud.google.com/sql/docs/postgres/cmek", "abstract": "# Cloud SQL - About customer-managed encryption keys (CMEK)\nThis page describes how customer-managed encryption keys work with Cloud SQL. To use this feature right away, see [Using customer-managed encryption keys (CMEK)](/sql/docs/postgres/configure-cmek) .\n", "content": "## Is CMEK right for me?\nCustomer-managed encryption keys are intended for organizations that have sensitive or regulated data that requires them to manage their own encryption keys.\n## Google-managed encryption versus customer-managed encryption\nThe CMEK feature lets you use your own cryptographic keys for data at rest in Cloud SQL. After adding customer-managed encryption keys, whenever an API call is made, Cloud SQL uses your key to access data.\nCloud SQL uses Google-managed data encryption keys (DEK) and key encryption keys (KEK) to encrypt Cloud SQL. There are two levels of encryption:\n- The DEK encrypts data.\n- The KEK encrypts the DEK.\nThe Cloud SQL instance stores the encrypted DEK alongside the encrypted data on the PD and Google manages the Google KEK. With customer-managed encryption keys, you create a key that wraps the Google KEK. Customer-managed encryption keys let you create, revoke, and delete the KEK.\nCustomer-managed encryption keys, including software, hardware, and external keys, are all managed through the [Cloud Key Management Service API](/kms/docs/reference/rest) .\nThe diagrams below show how [data-at-rest encryption](/security/encryption/default-encryption) works inside a Cloud SQL instance when using default Google encryption versus customer-managed encryption keys.\nWhen decrypting data wrapped with customer-managed encryption keys, Cloud SQL uses the KEK to decrypt the DEK and the unencrypted DEK to decrypt data-at-rest.\n**Note:** Customer-managed encryption keys differ from Customer-Supplied Encryption Keys (CSEK), which let you specify the of the encryption key. Customer-managed encryption keys let you create and manage a key using Cloud KMS, and assign keys to specific resources across Google Cloud. Cloud SQL does not support CSEK.\n## When does Cloud SQL interact with CMEK keys?\n| 0     | 1                                                                 |\n|:------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Operation   | Notes                                                                |\n| Instance creation | During instance creation, you configure the instance to use customer- managed encryption keys.                                          |\n| Backup creation | During backups for a CMEK-enabled instance, customer-managed encryption keys encrypt user data, such as user queries and responses. Backups from a CMEK-enabled instance inherit its encryption with same Cloud KMS key as the source instance.     |\n| Instance restore | During restores for a CMEK-enabled instance, Cloud SQL uses the key to access data on the backup instance being restored. When restoring to a different instance, the target instance can use a different key for encryption.          |\n| Replica creation | When you create a read replica of a Cloud SQL instance in the same region, it inherits the CMEK from the parent instance. If you create a read replica in a different region, you must select a CMEK from the other region. Each region uses its own set of keys. |\n| Clone creation | Clones from a CMEK-enabled instance inherit CMEK encryption with same Cloud KMS key as the source instance.                                       |\n| Instance update | During updates to a CMEK-enabled instance, Cloud SQL checks the CMEK key.                                               |\n## What locations support CMEK-enabled Cloud SQL instances?\nCMEK is available in all Cloud SQL [instance locations](/sql/docs/mysql/locations) .\n**Note:** The Cloud KMS key ring location must match the region where you want to create a Cloud SQL instance. A multi-region or global region key **will not** work. A request for creating a Cloud SQL instance fails if the regions don't match.\n## About service accounts\nWhen your Cloud SQL instances have CMEK enabled, you need to use a service account to request key access from Cloud KMS.\nTo use a customer-managed encryption key on a project, you must have a service account and you must grant the customer-managed encryption key access to the service account. The service account must exist inside of the project. The service account is visible in all regions.\nIf you use the Console to create an instance, Cloud SQL automatically creates the service account when you first choose the **Customer-managed key** option (if a service account does not already exist). You don't need to have special permissions on your user account when Cloud SQL automatically creates the service account.\n## About keys\nIn Cloud KMS, you need to create a keyring with a cryptographic key, set with a location. When you create a new Cloud SQL instance, you select this key to encrypt the instance.\nYou need to know the key ID and key region when you create new Cloud SQL instances that use customer-managed encryption keys. You must put new Cloud SQL instances in the same region as the customer-managed encryption key associated with the instance. You can create one project for both keys and Cloud SQL instances, or different projects for each.\nCustomer-managed encryption keys use the following format:\n```\nprojects/[CMEK_ENABLED_PROJECT]/locations/[REGION]/keyRings/[RING_NAME]/cryptoKeys/[KEYNAME]\n```\nIf Cloud SQL is unable to access the key (such as if you disable the key version), Cloud SQL suspends the instance. Once the key becomes accessible again, Cloud SQL automatically resumes the instance.\nWhen you rotate keys, instances that are encrypted with that key aren't automatically re-encrypted with the new primary key version. You can re-encrypt any existing CMEK primary instance or replica with the new primary key version. For more information about how to re-encrypt a Cloud SQL instance or replica after a key rotation, see [Re-encrypt an existing CMEK-enabled instance or replica](/sql/docs/postgres/configure-cmek#reencrypt) .\n**Note:** Automated and manual backups use the latest primary key version.\n**Warning: ** Never destroy the key version that you initially used to encrypt your instance. If you destroy it, you also destroy the backups created from the instance, because the key is used to decrypt the backup. Even when the key version is rotated, you must maintain the original key. If it is destroyed, it can't be re-created. You must also never destroy the key version that was used when creating the backup.\n### External key managers\nYou can use keys stored in external key managers, such as Fortanix, Ionic, or Thales, as your customer-managed encryption keys. To learn how to use external keys with Cloud KMS, see [Cloud External Key Manager (Cloud EKM)](/kms/docs/ekm) .\n### Key Access Justifications\nYou can use Key Access Justifications (KAJ) as part of Cloud EKM. KAJ enables you to view the reason for each Cloud EKM request. Additionally, based on the justification provided, you can automatically approve or deny a request. To learn more, see the [Overview](/cloud-provider-access-management/key-access-justifications/docs/overview) .\nThus, KAJ provides extra control over your data by providing a justification for each attempt to decrypt the data.\nFor related information about using your keys with Cloud SQL instances, see [Creating a Cloud SQL instance with CMEK](/sql/docs/postgres/configure-cmek#createcmekinstance) .\n## How do I make CMEK-encrypted data permanently inaccessible?\n**Warning:** You have complete control over keys and data access. Once you destroy a key version that is associated with a Cloud SQL instance, Google can't get the data back. However, if you disable the key version, you can re-enable it to get the data back.\nYou might have situations where you want to permanently destroy data encrypted with CMEK. To do this, you destroy the customer-managed encryption key version. You can't destroy the keyring or key, but you can destroy key versions of the key.\n## How do I export and import data from and to a CMEK-enabled instance?\nIf you want your data to remain encrypted with a customer-managed key during an export or import, you must set a customer-managed encryption key on the Cloud Storage bucket before exporting data to it. There are no special requirements or restrictions to importing data to a new instance when the data was previously stored on an instance enabled with a customer-managed encryption key.\n## Restrictions\nThe following restrictions apply when using customer-managed encryption keys:\n- You can't enable customer-managed encryption keys on an existing instance.\n- You can't assign a different key to a replica in the same region as the primary instance. For cross-region replicas, you need to create a new key for the replica region.\n- You can't assign a different key to a clone.\n- You can't use customer-managed encryption keys to encrypt:- External servers (external primary instances and external replicas)\n- Instance metadata, such as the instance ID, database version, machine type, flags, backup schedule, etc.\n- You can't use customer-managed encryption keys to encrypt user data in transit, such as user queries and responses.## What's next\n- Learn about [encryption at rest in Google Cloud Platform](/security/encryption/default-encryption) .\n- Learn how to [create an instance with CMEK enabled](/sql/docs/postgres/configure-cmek) .\n- Learn about [Cloud Key Management Service (Cloud KMS)](/kms/docs) .\n- Learn about [Quotas for Cloud KMS resources](/kms/quotas#quotas_all) .\n- Learn about [IAM service accounts](/iam/docs/service-accounts) .\n- Learn how to add [key access justifications](/cloud-provider-access-management/key-access-justifications/docs/overview) to your keys.\n- Find [other products](/kms/docs/using-other-products) that use CMEK.", "guide": "Cloud SQL"}