{"title": "Apigee - Use a private image repository with apigeectl", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Use a private image repository with apigeectl\n**Note:** These procedures include instructions for using`apigeectl`. If you are using Helm charts to manage Apigee hybrid, see [Use a private image repository with Helm charts](/apigee/docs/hybrid/v1.11/container-images-helm) .\nThis document explains how to configure Apigee hybrid to use images from a private container image repository.\n", "content": "## \n Overview\nAll Apigee hybrid runtime images are hosted in the [ Google Cloud Container Registry](/container-registry) (GCR). If for any reason you wish to employ a private image container repository, you can download the images from GCR, push them to your private repository, and override the default image locations in your `overrides.yaml` file.\n## \n Configuration steps\nFollow these steps to use a private image container repository for the Apigee hybrid images. To perform these steps and successfully use the images in your private repository, you must be familiar with the [Apigee hybrid installation procedure](/apigee/docs/hybrid/v1.11/install-before-begin) . In a typical scenario, you would plan to configure the private repository as part of a fresh hybrid installation.\n- Push the Apigee hybrid images from GCR to your private repository. We recommend that you use the [apigee-push-pull](/apigee/docs/hybrid/v1.11/apigee-pull-push) utility to accomplish this step.If you prefer to do this step manually, you need to have [Docker](https://docs.docker.com/get-started/) installed and use the `docker pull` command as follows. Be sure to append the correct tag  to each image name. For example, the tag for `apigee-synchronizer` is `1.11.1` ,  as shown below.- Get an up to date list of all images in your current   project with the`--list`option of the [apigee-pull-push.sh utility](/apigee/docs/hybrid/v1.11/apigee-pull-push) in the`apigeectl/tools/`directory:```\napigee-pull-push.sh --list\n```\n- Your output should look something like:\n- ```\napigee:\n  gcr.io/apigee-release/hybrid/apigee-mart-server:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-synchronizer:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-runtime:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-hybrid-cassandra-client:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-hybrid-cassandra:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-cassandra-backup-utility:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-udca:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-connect-agent:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-watcher:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-operators:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-installer:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-redis:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-diagnostics-collector:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-diagnostics-runner:1.11.1\n  gcr.io/apigee-release/hybrid/apigee-mint-task-scheduler:1.11.1\nthird party:\n  gcr.io/apigee-release/hybrid/apigee-stackdriver-logging-agent:1.10.1\n  cr.io/apigee-release/hybrid/apigee-prom-prometheus:v2.48.0\n  gcr.io/apigee-release/hybrid/apigee-stackdriver-prometheus-sidecar:0.9.0\n  gcr.io/apigee-release/hybrid/apigee-kube-rbac-proxy:v0.15.0\n  gcr.io/apigee-release/hybrid/apigee-envoy:v1.27.0\n  gcr.io/apigee-release/hybrid/apigee-prometheus-adapter:v0.11.2\n  gcr.io/apigee-release/hybrid/apigee-asm-ingress:1.17.8-asm.4-distroless\n  gcr.io/apigee-release/hybrid/apigee-asm-istiod:1.17.8-asm.4-distroless\n  gcr.io/apigee-release/hybrid/apigee-fluent-bit:2.2.0\n```\n- Pull the images needed for the`apigee-system`and``namespaces with the`docker pull`command. For example:```\ndocker pull gcr.io/apigee-release/hybrid/apigee-installer:1.11.1\n```The following list shows the images needed for each namespace:\n### apigee-system namespace- `apigee-installer`\n- `apigee-kube-rbac-proxy`\n- `apigee-operators`### Your apigee namespace- `apigee-asm-ingress`\n- `apigee-asm-istiod`\n- `apigee-cassandra-backup-utility`\n- `apigee-connect-agent`\n- `apigee-diagnostics-collector`\n- `apigee-diagnostics-runner`\n- `apigee-envoy`\n- `apigee-fluent-bit`\n- `apigee-hybrid-cassandra-client`\n- `apigee-hybrid-cassandra`\n- `apigee-mart-server`\n- `apigee-prom-prometheus`\n- `apigee-prometheus-adapter`\n- `apigee-redis`\n- `apigee-runtime`\n- `apigee-stackdriver-logging-agent`\n- `apigee-stackdriver-prometheus-sidecar`\n- `apigee-synchronizer`\n- `apigee-udca`\n- `apigee-watcher`- After you pull and tag the images, push them to your private repository. See [docker   push](https://docs.docker.com/engine/reference/commandline/push/) .\n- Create a Kubernetes Secret in the`apigee`and`apigee-system`namespaces.If these namespaces do not exist in your cluster, you must create them before performing this step.For steps to create the Secret, see [Create a Secret by providing credentials on the command line](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-secret-by-providing-credentials-on-the-command-line) .  For example, to create a secret in the `apigee-system` namespace:```\nkubectl create secret docker-registry SECRET_NAME -n apigee-system \\\n --docker-server=YOUR_REGISTRY_SERVER \\\n --docker-username=YOUR_DOCKER_USERNAME \\\n --docker-email=YOUR_DOCKER_EMAIL \\\n --docker-password=\"YOUR_DOCKER_PASSWORD)\"\n```To create a Secret in the `apigee` namespace:```\nkubectl create secret docker-registry SECRET_NAME -n apigee \\\n --docker-server=YOUR_REGISTRY_SERVER \\\n --docker-username=YOUR_DOCKER_USERNAME \\\n --docker-email=YOUR_DOCKER_EMAIL \\\n --docker-password=\"YOUR_DOCKER_PASSWORD)\"\n```\n- Add the Secret to your`overrides.yaml`file. Creation of the overrides file  is described in the hybrid installation steps. See [Configure the cluster](/apigee/docs/hybrid/v1.11/install-configure-cluster) for details.```\nimagePullSecrets:\n - name: SECRET_NAME\n```\n- Update your`overrides.yaml`file with image URLs for the images stored in your private repository. Each component that is stored in the repository has an`image:url`element. Use this element to specify the URL of each component image. For example:```\nmart:\n serviceAccountPath: /installdir/hybrid-files/service-accounts/hybrid-apigee-non-prod.json\n image:\n url: my-docker.pkg.dev/hybrid-1/registry-name/apigee-mart-server\n```Follow this pattern to update each top-level hybrid component in your `overrides.yaml` file with its  private repository image URL. A complete example overrides file is provided with your hybrid installation in ` **$APIGEECTL_HOME** ` `/examples/private-overrides.yaml` directory. **Note: ** You only need to update the`url`property. You can accept the default values for  the`tag`and`pullPolicy`properties. For a complete list of components and their configuration properties,  see also [Configuration property reference](/apigee/docs/hybrid/v1.11/config-prop-ref) .\nYou can now complete a new hybrid installation using the private images, or update your existing installation. See the [Apigee hybrid installation steps](/apigee/docs/hybrid/v1.11/install-before-begin) for more information.\n## \n Installing cert-manager from a private repository\nTo install `cert-manager` from your private repository, see [Installing with Helm](https://cert-manager.io/docs/installation/helm/) . It is important that you install the same version of `cert-manager` as specified in the [Apigee hybrid installation](/apigee/docs/hybrid/v1.11/install-cert-manager) instructions to ensure compatibility.", "guide": "Apigee"}