{"title": "Apigee - Data Transformer functions", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Data Transformer functions\n**Announcement:** Application Integration is now available for your Google Cloud project. You can now use both Apigee Integration and Application Integration within the same Google Cloud project. [Learn more](/apigee/docs/api-platform/integration/using-application-integration)\n**    Preview    \u2014 Data Transformer Script task ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nThis page describes the additional set of predefined Jsonnet functions for [Data Transformer Script](/application-integration/docs/configure-data-transformer-script-task) task available in Apigee Integration.\nTo use the following predefined functions, you must import the `functions` library in your script. Importing the `functions` library lets you use both the standard Jsonnet functions and the predefined **Data Transformer** functions.\nFor information about the Jsonnet standard functions, see [Jsonnet Standard Library](https://jsonnet.org/ref/stdlib.html) .\n", "content": "## Array functions### \nAverage\n| 0    | 1                |\n|:----------------|:----------------------------------------------------------------|\n| Syntax   | avg(arr)              |\n| Description  | Calculates the numerical average of all the values in an array. |\n| Input parameter | arr: The input array.           |\n| Return type  | DOUBLE               |\n| Output   | Returns the average of all the values in the array.    |### \nContains\n| 0    | 1               |\n|:----------------|:------------------------------------------------------------|\n| Syntax   | contains(arr, elem)           |\n| Description  | Checks the occurrence of the specified element in an array. |\n| Input parameter | arr: The input array. elem: The array element to search. |\n| Return type  | BOOLEAN              |\n| Output   | Returns TRUE if a match is found and FALSE otherwise.  |### \nMax Array\n| 0    | 1            |\n|:----------------|:----------------------------------------------|\n| Syntax   | maxArray(arr)         |\n| Description  | Finds the highest value in an array.   |\n| Input parameter | arr: The input array.       |\n| Return type  | The data type of the input array.    |\n| Output   | Returns the highest value found in the array. |### \nMin Array\n| 0    | 1           |\n|:----------------|:---------------------------------------------|\n| Syntax   | minArray(arr)        |\n| Description  | Finds the lowest value in an array.   |\n| Input parameter | arr: The input array.      |\n| Return type  | The data type of the input array.   |\n| Output/th>  | Returns the lowest value found in the array. |### \nRemove\n| 0    | 1                |\n|:----------------|:----------------------------------------------------------------|\n| Syntax   | remove(arr, elem)            |\n| Description  | Removes the specified element from an array.     |\n| Input parameter | arr: The input array. elem: The array element to remove.  |\n| Return type  | The data type of the input array.        |\n| Output   | Returns the updated array after removing the specified element. |### \nRemove At\n| 0    | 1                  |\n|:----------------|:------------------------------------------------------------------------|\n| Syntax   | removeAt(arr, index)             |\n| Description  | Removes an element from an array at the specified index.    |\n| Input parameter | arr: The input array. index: The array index of the element to remove. |\n| Return type  | The data type of the input array.          |\n| Output   | Returns the updated array after removing the specified element.   |### \nSum\n| 0    | 1             |\n|:----------------|:--------------------------------------------------|\n| Syntax   | sum(arr)           |\n| Description  | Adds all the values in an array.     |\n| Input parameter | arr: The input array.        |\n| Return type  | The data type of the input array.     |\n| Output   | Returns the sum of all the elements in the array. |### \nGroupBy\n| 0    | 1                                                    |\n|:----------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax   | groupBy(array, function)                                              |\n| Description  | Creates an object composed of keys generated from the results of running each element of array through the iteratee function. For example, f.groupBy([1,1.3,1.8],std.floor) would generate {\"1\": [1,1.3,1.8]}. |\n| Input parameter | array: The collection that the method iterates over. function: The function that is invoked for every element in the array.                     |\n| Return type  | JSON                                                   |\n| Output   | Returns the composed aggregate object.                                           |### \nZip\n| 0    | 1                                                                                   |\n|:----------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax   | zip([arrays])                                                                                |\n| Description  | It create an array of grouped elements, the first of which contains the first elements of the given arrays, the second of which contains the second element of the given arrays, and so on. For example, f.zip([[1, \"one\", \"I\"],[2, \"two\", \"II\"],[3, \"three\", \"III\"]]) would generate [[1,2,3],[\"one\", \"two\", \"three\"],[\"I\", \"II\", \"III\"]]. |\n| Input parameter | [arrays]: This parameter holds the arrays to process.                                                                      |\n| Return type  | array                                                                                  |\n| Output   | Returns the new array of regrouped elements.                                                                        |### \nUnzip\n| 0    | 1                                                                             |\n|:----------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax   | unzip(array)                                                                          |\n| Description  | It creates an array of grouped elements. Accepts an array of grouped elements and also creates an array regrouping the elements to their pre-zip configuration. For example, f.unzip([[1, \"one\", \"I\"],[2, \"two\", \"II\"],[3, \"three\", \"III\"]]) would generate [[1,2,3],[\"one\", \"two\", \"three\"],[\"I\", \"II\", \"III\"]]. |\n| Input parameter | array: This parameter holds the array of grouped elements to process.                                                            |\n| Return type  | array                                                                            |\n| Output   | Returns the new array of regrouped elements.                                                                  |\n## Aggregate functions### \nXNOR\n| 0    | 1                 |\n|:----------------|:-------------------------------------------------------------------|\n| Syntax   | xnor(a, b)               |\n| Description  | Performs a logical XNOR operation on the specified boolean values. |\n| Input parameter | a: A boolean value. b: A boolean value.       |\n| Return type  | BOOLEAN               |\n| Output   | Returns the XNOR of the two given booleans.      |### \nXor\n| 0    | 1                 |\n|:----------------|:------------------------------------------------------------------|\n| Syntax   | xor(a, b)               |\n| Description  | Performs a logical XOR operation on the specified boolean values. |\n| Input parameter | a: A boolean value. b: A boolean value.       |\n| Return type  | BOOLEAN               |\n| Output   | Returns the XOR of the two given booleans.      |\n## Hash functions### \nSHA1\n| 0    | 1                                                   |\n|:----------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax   | sha1(str)                                                 |\n| Description  | Computes the cryptographic hash of the input STRING using the Secure Hash Algorithm 1 (SHA-1) algorithm. Warning: SHA1 is no longer considered secure. For increased security, use another hashing function. |\n| Input parameter | str: The input string.                                              |\n| Return type  | BYTES                                                  |\n| Output   | Returns a 160 bit (20-byte) hash value.                                          |### \nSHA256\n| 0    | 1                           |\n|:----------------|:-------------------------------------------------------------------------------------------------------------|\n| Syntax   | sha256(str)                         |\n| Description  | Computes the cryptographic hash of the input STRING using the Secure Hash Algorithm 256 (SHA-256) algorithm. |\n| Input parameter | str: The input string.                      |\n| Return type  | BYTES                          |\n| Output   | Returns a 256 bit (32-byte) hash value.                  |### \nSHA512\n| 0    | 1                           |\n|:----------------|:-------------------------------------------------------------------------------------------------------------|\n| Syntax   | sha512(str)                         |\n| Description  | Computes the cryptographic hash of the input STRING using the Secure Hash Algorithm 512 (SHA-512) algorithm. |\n| Input parameter | str: The input string.                      |\n| Return type  | BYTES                          |\n| Output   | Returns a 512 bit (64-byte) hash value.                  |### \nSHA3\n| 0    | 1                          |\n|:----------------|:---------------------------------------------------------------------------------------------------------|\n| Syntax   | sha3(str)                        |\n| Description  | Computes the cryptographic hash of the input STRING using the Secure Hash Algorithm 3 (SHA-3) algorithm. |\n| Input parameter | str: The input string.                     |\n| Return type  | BYTES                         |\n| Output   | Returns a 512 bit (64-byte) hash value.                 |\n## JSON functions### \nManifest XML\n| 0    | 1                                                                                 |\n|:----------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax   | manifestXml(json, format = \"badgerfish\", indent_output = false)                                                                 |\n| Description  | Converts the specified input JSON object into a XML string.                                                                  |\n| Input parameter | json: The input JSON object. format: The input JSON representation format. Note: The default JSON representation format used is BadgerFish. The manifestXml() function currently only supports BadgerFish format. indent_output: Boolean input to indicate if the output XML string should be indented. Default value is False. |\n| Return type  | STRING                                                                               |\n| Output   | Returns the XML string of the provided JSON object representation.                                                                |### \nObject Remove Key\n| 0    | 1                      |\n|:----------------|:---------------------------------------------------------------------------------------|\n| Syntax   | objectRemoveKey(obj, key)                |\n| Description  | Removes a property from a JSON object.             |\n| Input parameter | obj: The input JSON object. key: The JSON property to remove.       |\n| Return type  | JSON                     |\n| Output   | Updated JSON object after removing the specified property and its corresponding value. |### \nParse XML\n| 0    | 1                                                    |\n|:----------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax   | parseXml(xml, format = \"badgerfish\")                                           |\n| Description  | Parses the specified input XML string into a JSON object.                                      |\n| Input parameter | xml: The input XML string. format: The output JSON representation format. Note: The default JSON representation format used is BadgerFish. The parseXml() function currently only supports BadgerFish format. |\n| Return type  | JSON                                                   |\n| Output   | Returns the JSON object representation of the provided XML string.                                    |### \nParse CSV With Header\n| 0    | 1                                                                                      |\n|:----------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax   | parseCsvWithHeader(input, delimiter = \",\", overwrite_duplicate_headers = true)                                                                  |\n| Description  | Parse given input csv string as json. The first row would be considered as header. For example, f.parseCsvWithHeader(\"index,product,company\\n1,Application Integration,Google\\n2,Pubsub,Google\") would generate [{\"index\": \"1\", \"product\": \"Application Integration\", \"company\": \"Google\"},{\"index\": \"2\", \"product\": \"Pubsub\", \"company\": \"Google\"}]. |\n| Input parameter | input: The CSV string to be parsed. delimiter: Delimiter string to be used. Default value is ','. overwrite_duplicate_headers: Option to overwrite values for the duplicate headers. If set to false, duplicate header would be renamed. Default value is true.                      |\n| Return type  | JSON                                                                                     |\n| Output   | Returns the json representation of given csv string.                                                                         |### \nManifest CSV\n| 0    | 1                                                                        |\n|:----------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax   | manifestCsv(json, headers = null)                                                                |\n| Description  | Convert given json into csv string. For example, f.manifestCsv([{\"index\": \"1\", \"product\": \"Application Integration\", \"company\": \"Google\"},{\"index\": \"2\", \"product\": \"Pubsub\", \"company\": \"Google\"}]) would generate index,product,company\\n1,Application Integration,Google\\n2,Pubsub,Google. |\n| Input parameter | json: JSON to be converted into csv. headers: Headers list for csv output. If no value is provided, it would use all the headers.                                       |\n| Return type  | STRING                                                                      |\n| Output   | Returns the csv string from json in given format.                                                            |\n## Mathematical functions### \nIs Decimal\n| 0    | 1               |\n|:----------------|:-------------------------------------------------------------|\n| Syntax   | isDecimal(num)            |\n| Description  | Checks if the given number is a decimal.      |\n| Input parameter | num: The input number.          |\n| Return type  | BOOLEAN              |\n| Output   | Returns TRUE if the number is a decimal and FALSE otherwise. |### \nIs Even\n| 0    | 1              |\n|:----------------|:--------------------------------------------------------|\n| Syntax   | isEven(num)            |\n| Description  | Checks if the given number is even.      |\n| Input parameter | num: The input number.         |\n| Return type  | BOOLEAN             |\n| Output   | Returns TRUE if the number is even and FALSE otherwise. |### \nIs Integer\n| 0    | 1                |\n|:----------------|:--------------------------------------------------------------|\n| Syntax   | isInteger(num)            |\n| Description  | Checks if the given number is an integer.      |\n| Input parameter | num: The input number.          |\n| Return type  | BOOLEAN              |\n| Output   | Returns TRUE if the number is an integer and FALSE otherwise. |### \nIs Odd\n| 0    | 1              |\n|:----------------|:-------------------------------------------------------|\n| Syntax   | isOdd(num)            |\n| Description  | Checks if the given number is odd.      |\n| Input parameter | num: The input number.         |\n| Return type  | BOOLEAN            |\n| Output   | Returns TRUE if the number is odd and FALSE otherwise. |### \nRandom Number\n| 0    | 1                                |\n|:----------------|:--------------------------------------------------------------------------------------------------------------------------------|\n| Syntax   | randomNumber(lowerBound, upperBound)                       |\n| Description  | Generates a random real number between a specified range.                  |\n| Input parameter | lowerBound: Lower range value (inclusive). Default value is 0. upperBound: Higher range value (exclusive). Default value is 1. |\n| Return type  | A real number.                             |\n| Output   | Returns a random real number between lowerBound and upperBound.                 |### \nRound\n| 0    | 1           |\n|:----------------|:--------------------------------------------|\n| Syntax   | round(input)        |\n| Description  | Rounds off a number to the nearest integer. |\n| Input parameter | input: A value to round off.    |\n| Return type  | INTEGER          |\n| Return value | Returns the nearest rounded off integer. |\n## String functions### \nEquals Ignore Case\n| 0    | 1                         |\n|:----------------|:----------------------------------------------------------------------------------------------------|\n| Syntax   | equalsIgnoreCase(str1, str2)                  |\n| Description  | Compare the two given string values irrespective of the string case (lower or upper).    |\n| Input parameter | str1: An input string. str2: An input string.              |\n| Return type  | BOOLEAN                        |\n| Output   | Returns TRUE if the specified value matches the existing value (ignoring case) and FALSE otherwise. |### \nIs Empty\n| 0    | 1              |\n|:----------------|:---------------------------------------------------------|\n| Syntax   | isEmpty(str)            |\n| Description  | Checks if the length of the given string is 0.   |\n| Input parameter | str: The input string.         |\n| Return type  | BOOLEAN             |\n| Output   | Returns TRUE if the string is empty and FALSE otherwise. |### \nMatch\n| 0    | 1                                 |\n|:----------------|:----------------------------------------------------------------------------------------------------------------------------------|\n| Syntax   | match(str, regexp)                            |\n| Description  | Retrieves the result of matching a string against a regular expression.               |\n| Input parameter | str: Input string. regexp: The re2 regular expression.                   |\n| Return type  | ARRAY                                |\n| Output   | Returns an array of all substrings of str that match the regular expression, regexp. Returns an empty array if there is no match. |### \nTrim\n| 0    | 1                   |\n|:----------------|:----------------------------------------------------------------------------|\n| Syntax   | trim(str)                 |\n| Description  | Removes all the leading and trailing spaces of a given string.    |\n| Input parameter | str: The input string.              |\n| Return type  | STRING                  |\n| Output   | Returns a copy of the string, with leading and trailing whitespace removed. |\n## Timestamp functions### \nDate Format\n| 0    | 1                                                                                                   |\n|:----------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax   | dateFormat(timestamp, format_string, timezone, current_format)                                                                                   |\n| Description  | Formats a timestamp according to the specified format_string.                                                                                    |\n| Input parameter | timestamp: The input timestamp. format_string: The new timestamp format. See Supported timestamp format elements for a list of format elements that can be used to form the new timestamp format string. timezone: The timezone of the provided input timestamp. Default value is UTC. current_format: The format which would be used to parse the provided input timestamp. Default value is E (epoch). |\n| Return type  | STRING                                                                                                 |\n| Output   | Returns a new string after converting the input timestamp based on the specified format_string.                                                                           |\nThe following table lists the supported format elements for the **dateFormat()** function:\n| Format element | Description                    | Example  |\n|:-----------------|:-----------------------------------------------------------------------------------------|:-------------|\n| YYYY    | 4-digit year.                   | 2023   |\n| YY    | Last 2 digits of the year.                | 23   |\n| MMMM    | Name of the month in titlecase.               | March  |\n| MMM    | Abbreviated name of the month in titlecase.            | Mar   |\n| MM    | Month from 01 to 12.                  | 03   |\n| M    | Month from 1 to 12.                  | 3   |\n| DDDD    | Name of the day in titlecase.               | Monday  |\n| DDD    | Abbreviated name of the day.                | Mon   |\n| DD    | Day from 01 to 31.                  | 06   |\n| D    | Day from 1 to 31.                  | 6   |\n| HH    | Hour in 24 hour format from 00 to 23.             | 15   |\n| hh    | Hour in 12 hour format from 01 to 12.             | 03   |\n| h    | Hour in 12 hour format from 1 to 12.              | 3   |\n| mm    | Minute from 00 to 59.                 | 04   |\n| m    | Minute from 0 to 59.                  | 4   |\n| ss    | Seconds from 00 to 59.                 | 08   |\n| s    | Seconds from 0 to 59.                 | 8   |\n| FFFFFFFFF  | Fractional seconds with 9 digits, including zeros, on the right of the specified digits. | 00.123456789 |\n| FFFFFFFF   | Fractional seconds with 8 digits, including zeros, on the right of the specified digits. | 00.12345678 |\n| FFFFFFF   | Fractional seconds with 7 digits, including zeros, on the right of the specified digits. | 00.1234567 |\n| FFFFFF   | Fractional seconds with 6 digits, including zeros, on the right of the specified digits. | 00.123456 |\n| FFFFF   | Fractional seconds with 5 digits, including zeros, on the right of the specified digits. | 00.12345  |\n| FFFF    | Fractional seconds with 4 digits, including zeros, on the right of the specified digits. | 00.1234  |\n| FFF    | Fractional seconds with 3 digits, including zeros, on the right of the specified digits. | 00.123  |\n| FF    | Fractional seconds with 2 digits, including zeros, on the right of the specified digits. | 00.12  |\n| F    | Fractional seconds with 1 digits, including zeros, on the right of the specified digits. | 00.1   |\n| fffffffff  | Fractional seconds with 9 digits.              | 987654321 |\n| ffffffff   | Fractional seconds with 8 digits.              | 98765432  |\n| fffffff   | Fractional seconds with 7 digits.              | 9876543  |\n| ffffff   | Fractional seconds with 6 digits.              | 987654  |\n| fffff   | Fractional seconds with 5 digits.              | 98765  |\n| ffff    | Fractional seconds with 4 digits.              | 9876   |\n| fff    | Fractional seconds with 3 digits.              | 987   |\n| ff    | Fractional seconds with 2 digits.              | 98   |\n| f    | Fractional seconds with 1 digits.              | 9   |\n| tt    | Meridian indicator (morning or evening). When formatting, this is either AM or PM.  | PM   |\n| t    | Short meridian indicator (morning or evening). Maps to the lowercase am or pm.   | pm   |\n| K    | Time zone name.                   | PST   |\n| kk    | Time zone in \u00b1xx:xx format.                | -8:00:00  |\n| k    | Timezone in \u00b1xxxx format.                | -8000  |### \nIs Leap Year\n| 0    | 1               |\n|:----------------|:-------------------------------------------------------------|\n| Syntax   | isLeapYear(year)            |\n| Description  | Checks if the given year is a leap year.      |\n| Input parameter | year: The input year (real number).       |\n| Return type  | BOOLEAN              |\n| Output   | Returns TRUE if the year is a leap year and FALSE otherwise. |### \nNow In Millis\n| 0    | 1                  |\n|:----------------|:-----------------------------------------------------------------------|\n| Syntax   | nowInMillis()               |\n| Description  | Returns the current Unix epoch time of an integration in milliseconds. |\n| Input parameter | nan                 |\n| Return type  | INT64                 |\n| Output   | Returns the current Unix epoch time in milliseconds.     |\n## Utility functions### \nUUID\n| 0    | 1                                                                                 |\n|:----------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Syntax   | uuid()                                                                                |\n| Description  | Generates a random universally unique identifier (UUID) as a STRING. The returned STRING consists of 32 hexadecimal digits in five groups separated by hyphens in the form 8-4-4-4-12. The hexadecimal digits represent 122 random bits and 6 fixed bits, in compliance with RFC 4122 section 4.4. The returned STRING is lowercase. |\n| Input parameter | nan                                                                                 |\n| Return type  | STRING                                                                                |\n| Output   | Returns the generated UUID in string format.                                                                       |\n### \nIntegration name\n| 0    | 1           |\n|:----------------|:---------------------------------------------|\n| Syntax   | getIntegrationName()       |\n| Description  | Get the name of the current integration.  |\n| Input parameter | nan           |\n| Return type  | STRING          |\n| Output   | Returns the name of the current integration. |\n### \nIntegration region\n| 0    | 1            |\n|:----------------|:-----------------------------------------------|\n| Syntax   | getIntegrationRegion()       |\n| Description  | Get the region of the current integration.  |\n| Input parameter | nan           |\n| Return type  | STRING           |\n| Output   | Returns the region of the current integration. |\n### \nIntegration version ID\n| 0    | 1                |\n|:----------------|:---------------------------------------------------------------|\n| Syntax   | getIntegrationVersionId()          |\n| Description  | Get the integration version ID of the current integration.  |\n| Input parameter | nan               |\n| Return type  | STRING               |\n| Output   | Returns the integration version ID of the current integration. |\n### \nIntegration version number\n| 0    | 1              |\n|:----------------|:-------------------------------------------------------|\n| Syntax   | getIntegrationVersionNumber()       |\n| Description  | Get the version number of the current integration.  |\n| Input parameter | nan             |\n| Return type  | NUMBER             |\n| Output   | Returns the version number of the current integration. |\n### \nExecution ID\n| 0    | 1                |\n|:----------------|:---------------------------------------------------------------|\n| Syntax   | getExecutionId()            |\n| Description  | Get execution ID of the current integration execution.   |\n| Input parameter | nan               |\n| Return type  | STRING               |\n| Output   | Returns the execution ID of the current integration execution. |\n### \nProject ID\n| 0    | 1                |\n|:----------------|:----------------------------------------------------------------|\n| Syntax   | getProjectId()             |\n| Description  | Get the Google Cloud project ID of the current integration.  |\n| Input parameter | nan                |\n| Return type  | STRING               |\n| Output   | Returns the Google Cloud project ID of the current integration. |", "guide": "Apigee"}