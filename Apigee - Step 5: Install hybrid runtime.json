{"title": "Apigee - Step 5: Install hybrid runtime", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Step 5: Install hybrid runtime\nYou are currently viewing version 1.3 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\n", "content": "## \n Enable synchronizer access\nTo enable synchronizer access:\n- Create a Google Cloud service account and add the **Apigee Organization Admin** role  to it. This service account will be used to authenticate an API call that you will make  in a later step. An easy way to create the service account is through the GCP console.  For instructions, see [ Creating and managing service accounts](https://cloud.google.com/iam/docs/creating-managing-service-accounts#iam-service-accounts-create-gcloud) in the GCP documentation.For example, the following `gcloud` commands will create the service account and  assign the **Apigee Organization Admin** to it:- Create the account:```\ngcloud iam service-accounts create apigee-org-admin \\\n --display-name=\"apigee-org-admin\"\n```Where is the name of the service account you are creating.   \" `apigee-org-admin` \" is recommended for this tutorial.\n- Assign the **Apigee Org Admin** role to the service account:```\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n --member=\"serviceAccount:apigee-org-admin@$PROJECT_ID.iam.gserviceaccount.com\" \\\n --role=\"roles/apigee.admin\"\n```Where:- is the name of your Google Cloud project that you created in [Step 2: Create a Google Cloud project](/apigee/docs/hybrid/v1.3/precog-gcpproject) .\n- is the name of the service account you just created.\n- **roles/apigee.admin** is the **Apigee Org Admin** role.\n- Download the service account key to your system. Use the following command to make download the  key into your`service-accounts/`directory. For more information see the instructions in [ Creating service account keys](https://cloud.google.com/iam/docs/creating-managing-service-account-keys#iam-service-account-keys-create-gcloud) in the GCP documentation.- Make sure you are in the`` `/hybrid-files/`directory.\n- Download the key:```\ngcloud iam service-accounts keys create ./service-accounts/$PROJECT_ID-apigee-org-admin.json \\\n --iam-account apigee-org-admin@$PROJECT_ID.iam.gserviceaccount.com\n```The output should look something like:```\ncreated key [a0b1c2d3e4f5a0b1c2d3e4f5a0b1c2d3e4f5a0b1] of type [json] as [./service-accounts/hybridexample-apigee-org-admin.json] for [apigee-org-admin@my-hybrid.iam.gserviceaccount.com]\n$ \n```\n- Verify the path to the Apigee Org Admin service account key with the following command:```\nls service-accounts/*admin*\n```The result should look something like the following:```\nservice-accounts/hybrid-example-apigee-org-admin.json\n```\n- Create an **ORG_ADMIN_ACCOUNT** environment variable with the name of the key file.  For example:```\nexport ORG_ADMIN_ACCOUNT=\"hybrid-example-2-apigee-org-admin.json\"\n```\n- Execute the following commands to get a token:```\nexport GOOGLE_APPLICATION_CREDENTIALS=./service-accounts/$ORG_ADMIN_ACCOUNT\nexport TOKEN=$(gcloud auth application-default print-access-token)\n```\n- Get the email address for your`apigee-synchronizer`service account with the following command:```\ngcloud iam service-accounts list --filter \"apigee-synchronizer\"\n```If it matches the pattern `apigee-synchronizer` ` **$ORG_NAME** ` `.iam.gserviceaccount.com` , you  can use that pattern in the next step.\n- Call the [setSyncAuthorization](/apigee/docs/reference/apis/apigee/rest/v1/organizations/setSyncAuthorization) API to  enable the required permissions for Synchronizer using the following command:```\ncurl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n -H \"Content-Type:application/json\" \\\n \"https://apigee.googleapis.com/v1/organizations/$ORG_NAME:setSyncAuthorization\" \\\n -d '{\"identities\":[\"'\"serviceAccount:apigee-synchronizer@$ORG_NAME.iam.gserviceaccount.com\"'\"]}'\n```Where:- **$ORG_NAME** : The name of your hybrid organization.\n- **apigee-synchronizer$ORG_NAME.iam.gserviceaccount.com** : The email   address of the apigee-syncnronizer service account.\n- To verify that the service account was set, use the following command to call the API to get a list of service accounts:```\ncurl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n -H \"Content-Type:application/json\" \\\n \"https://apigee.googleapis.com/v1/organizations/$ORG_NAME:getSyncAuthorization\" \\\n -d ''\n```The output looks similar to the following:```\n{\n \"identities\":[  \"serviceAccount:my-synchronizer-manager-service_account@my_project_id.iam.gserviceaccount.com\"\n ],\n \"etag\":\"BwWJgyS8I4w=\"\n}\n```## \n Apply the configuration to the cluster\nUse the following steps to install Apigee hybrid into your cluster:\n- Be sure that you are in the`` `/hybrid-files`directory.\n- Verify that`kubectl`is set to the correct context using the following command.  The current context should be set to the cluster to which you are deploying Apigee hybrid.```\nkubectl config get-contexts\n```\n- Verify that the`KUBECONFIG`variable is set using the following command.   If not, see [   Prerequisites](/apigee/docs/hybrid/v1.3/install-download-cert-manager-istio-aws-gke#prerequisites) .```\necho $KUBECONFIG\n```\n- Do ainitialization. Execute the`init`command with the`--dry-run`flag. Doing a dry run lets you check for any errors before any  changes are made to the cluster.In hybrid version 1.3, the syntax of the `--dry-run` flag depends on the  version of `kubectl` you are running. Check the version of `kubectl` with  the following command:```\nkubectl version\n``` `kubectl` version 1.17 and older:```\n$APIGEECTL_HOME/apigeectl init -f overrides/overrides.yaml --dry-run=true\n``` `kubectl` version 1.18 and newer:```\n$APIGEECTL_HOME/apigeectl init -f overrides/overrides.yaml --dry-run=client\n```\n- If there are no errors, execute the`init`command as follows:```\n$APIGEECTL_HOME/apigeectl init -f overrides/overrides.yaml\n```The `init` command installs the [Apigee deployment services](/apigee/docs/hybrid/v1.3/apigee-deployment-services) Apigee Deployment Controller and Apigee Admission Webhook.\n- To check the status of the deployment, you can use the following commands:```\n$APIGEECTL_HOME/apigeectl check-ready -f overrides/overrides.yaml\nkubectl get pods -n apigee-system\nkubectl get pods -n istio-system\n```When the pods are ready, go to the next step.\n- Do ainstall. Execute the`apply`command with the`--dry-run`flag. `kubectl` version 1.17 and older:```\n$APIGEECTL_HOME/apigeectl apply -f overrides/overrides.yaml --dry-run=true\n``` `kubectl` version 1.18 and newer:```\n$APIGEECTL_HOME/apigeectl apply -f overrides/overrides.yaml --dry-run=client\n```\n- If there are no errors, you can apply the [  Apigee-specific runtime components](/apigee/docs/hybrid/v1.3/what-is-hybrid#about-the-runtime-plane) to the cluster with the following command:```\n$APIGEECTL_HOME/apigeectl apply -f overrides/overrides.yaml\n```\n- To check the status of the deployment, run the following command:```\n$APIGEECTL_HOME/apigeectl check-ready -f overrides/overrides.yaml\n```Repeat this step until the pods are all ready. The pods may take several minutes to start up.## \n Enable Apigee Connect\nApigee Connect manages communication between the Apigee management plane and MART in the runtime plane. For more information see [Using Apigee Connect](/apigee/docs/hybrid/v1.3/apigee-connect) .\nTo enable Apigee Connect, do the following steps:\n- On the command line, get your `gcloud` authentication credentials, as the following example shows:```\nTOKEN=$(gcloud auth print-access-token)\n```To check that your token was populated, use `echo` , as the following example shows:```\necho $TOKEN\n```This should display your token as an encoded string.For more information, see [gcloud command-line tool overview](https://cloud.google.com/sdk/gcloud/) .\n- Use the following command to see if Apigee Connect is enabled for your organization.```\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n \"https://apigee.googleapis.com/v1/organizations/$ORG_NAME\"\n```Where **$ORG_NAME** is the ID of your organization.If the output contains the following:```\n  \"name\" : \"features.mart.connect.enabled\",\n  \"value\" : \"true\"\n```Apigee Connect is enabled and you can skip the rest of this section.\n- Enable Apigee Connect with the following command:```\ncurl -H \"Authorization: Bearer $TOKEN\" -X PUT \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"name\" : \"'\"$ORG_NAME\"'\",\n \"properties\" : {\n  \"property\" : [ {\n  \"name\" : \"features.hybrid.enabled\",\n  \"value\" : \"true\"\n  }, {\n  \"name\" : \"features.mart.connect.enabled\",\n  \"value\" : \"true\"\n  } ]\n }\n }' \\\n \"https://apigee.googleapis.com/v1/organizations/$ORG_NAME\"\n```If the output contains the following properties, Apigee Connect was successfully enabled:```\n  {\n  \"name\": \"features.mart.connect.enabled\",\n  \"value\": \"true\"\n  },\n  {\n  \"name\": \"features.hybrid.enabled\",\n  \"value\": \"true\"\n  }\n```The output should look something like the following:```\n{\n \"name\": \"hybrid-example-2\",\n \"createdAt\": \"1594409699772\",\n \"lastModifiedAt\": \"1594776283697\",\n \"environments\": [ \"example-env\"\n ],\n \"properties\": {\n \"property\": [  {\n  \"name\": \"features.mart.connect.enabled\",\n  \"value\": \"true\"\n  },\n  {\n  \"name\": \"features.hybrid.enabled\",\n  \"value\": \"true\"\n  }\n ]\n },\n \"analyticsRegion\": \"us-central1\",\n \"runtimeType\": \"HYBRID\",\n \"subscriptionType\": \"TRIAL\"\n}\n```\n**Congratulations!** You've successfully installed Apigee hybrid. You are now ready to test it.", "guide": "Apigee"}