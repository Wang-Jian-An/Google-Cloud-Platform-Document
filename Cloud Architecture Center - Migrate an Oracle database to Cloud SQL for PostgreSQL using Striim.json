{"title": "Cloud Architecture Center - Migrate an Oracle database to Cloud SQL for PostgreSQL using Striim", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Migrate an Oracle database to Cloud SQL for PostgreSQL using Striim\nLast reviewed 2021-06-28 UTC\nIn this tutorial, you use [Striim](https://www.striim.com/) to migrate [Oracle\u00ae Database Enterprise Edition 18c](https://docs.oracle.com/en/database/oracle/oracle-database/18/) or later from either an on-premises environment or a cloud environment to a [Cloud SQL for PostgreSQL](/sql) instance on Google Cloud. The tutorial uses tables in the Oracle [HR sample schema](https://docs.oracle.com/en/database/oracle/oracle-database/18/comsc/introduction-to-sample-schemas.html#GUID-4DE9844F-0B28-4713-9AFC-CCD8D6249D76) .\nThis tutorial is for enterprise database architects, database engineers, and data owners who plan to use Striim to migrate or replicate Oracle databases to Cloud SQL for PostgreSQL. You should have a basic understanding of how to use Striim to build pipelines. You should also be familiar with the [Striim web UI](https://www.striim.com/docs/en/web-ui-guide.html) , Striim's [key concepts](https://www.striim.com/docs/en/striim-concepts.html) , and how to create an application using [Striim's Flow Designer](https://www.striim.com/docs/en/creating-and-modifying-apps-using-the-flow-designer.html) .\nStriim is a Google Cloud database migration technology partner. Striim simplifies online migrations by using a drag-and-drop interface to set up continuous data movement between databases. For migrations to Google Cloud, Striim offers a non-intrusive streaming platform for extract, transform, and load (ETL) that's efficient to deploy and straightforward to iterate. To build the migration pipeline, you use [Striim's Flow Designer](https://www.striim.com/docs/en/creating-and-modifying-apps-using-the-flow-designer.html) throughout this tutorial.\nIf database migration is not something you are familiar with, see [this tech talk from Cloud Next '19](https://www.youtube.com/watch?v=PDFC7XpGAVU) .", "content": "## ArchitectureDatabase migration using Striim involves two stages of sequential data movement:- **Stage 1:** A one-time, initial replication of the Oracle database.\n- **Stage 2:** The continuous replication of every change committed on the source database system thereafter by using change data capture (CDC).\nThe following diagram illustrates a basic deployment architecture:This architecture involves running the Striim application on a Compute Engine instance. It connects to an Oracle database that's hosted on-premises or in the cloud, and writes data to a Cloud SQL for PostgreSQL instance on Google Cloud.\nTo avoid any network or connectivity issues between the Striim and Cloud SQL instances, use the same network for both instances. You can [deploy Striim from Google Cloud Marketplace on a Compute Engine instance](https://www.striim.com/docs/en/subscribe-to-striim-in-the-google-cloud-platform-marketplace.html) or, if you need high-availablilty, you can deploy Striim [as a cluster](https://www.striim.com/docs/platform/en/creating-a-cluster-in-centos.html) .\nFor this tutorial, deploy from Cloud Marketplace.\nThe advantage of deploying Striim from Cloud Marketplace is that it lets you connect to various databases and data sources using their built-in [adapters](https://www.striim.com/docs/en/using-source-and-target-adapters-in-applications.html) . You can connect the adapters by using Flow Designer, Striim's interactive, drag-and-drop interface, to form an [acyclic graph](https://mathworld.wolfram.com/AcyclicGraph.html) . This graph is also known as a or a .\nThe migration use case in this tutorial uses three Striim adapters:- [Database Reader](https://www.striim.com/docs/en/database-reader.html) : Reads data from the Oracle source database during the initial load stage.\n- [Oracle Reader](https://www.striim.com/docs/en/oracle-database-cdc.html) : Reads data using [LogMiner](https://docs.oracle.com/en/database/oracle/oracle-database/19/sutil/oracle-logminer-utility.html) from the Oracle source database during the continuous data replication stage.\n- [Database Writer](https://www.striim.com/docs/en/database-writer.html) : Writes data to the Cloud SQL for PostgreSQL database during the initial load and during the continuous data replication.\n## Objectives\n- Prepare your Oracle database as a source database for migration or replication.\n- Prepare a Cloud SQL for PostgreSQL database as the target database for migration or replication.\n- Fulfill the prerequisites for installing and running Striim.\n- Convert the schema of the Oracle database to the corresponding schema in PostgreSQL.\n- Perform the initial load from your Oracle database to Cloud SQL for PostgreSQL.\n- Set up the continuous replication from your Oracle database to Cloud SQL for PostgreSQL.\n## Costs\nIn this document, you use the following billable components of Google Cloud:- [Compute Engine](/compute/all-pricing) \n- [Cloud SQL for PostgreSQL](/sql/pricing#pg-pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nThe Striim solution in Cloud Marketplace offers a limited-term free-trial license. When the trial expires, usage charges are billed to your Google Cloud account. You can also obtain Striim licenses directly from Striim for on-premises deployment and in a Compute Engine virtual machine (VM). You also might incur costs that are associated with running an Oracle database outside Google Cloud.## Before you beginThis tutorial assumes you already have the following:- An Oracle Database Enterprise Edition 18c or later for Linux x86-64 that you want to migrate.\n- A Compute Engine running CentOS that has Striim installed. You can deploy Striim through the [Google Cloud Marketplace](https://console.cloud.google.com/marketplace/product/striim/striim) solution.\n## Preparing the Oracle databaseThe following sections discuss configuration changes that you might need to connect to your Oracle database and migrate it with Striim. For configuration details, see [Basic Oracle Configuration Task](https://www.striim.com/docs/en/oracle-database-cdc.html) .\n### Choose the source for Oracle CDCWhile there are different Oracle CDC sources, this tutorial uses [LogMiner](https://docs.oracle.com/en/database/oracle/oracle-database/19/sutil/oracle-logminer-utility.html#GUID-3417B738-374C-4EE3-B15C-3A66E01AE2B5) . You can read about alternate options in [Alternate Oracle CDC sources](#alternate_oracle_cdc_sources) .\n### Prepare the Oracle Database Enterprise Edition 18c (or later)To prepare the Oracle database, follow the instructions on [Striim documentation page](https://www.striim.com/docs/en/oracle-database-cdc.html#UUID-abbbed49-2cbf-2e36-0fd9-6771ee8c9e61) for the following steps:- Enable Striim's`archivelog`.\n- Enable Striim supplemental log data.\n- Enable Striim primary key logging.\n- Create an Oracle user with LogMiner privileges for Striim.To run these steps, you must be connected to the container database (CDB), regardless of whether you're migrating a CDB or a pluggable database (PDB). We recommend installing and using [SQL*Plus](https://docs.oracle.com/cd/B14117_01/server.101/b12170/qstart.htm) to interact with the Oracle database.\n- Create a Striim [quiescemarker table](https://www.striim.com/docs/en/oracle-database-cdc.html#UUID-7203a015-ebec-d36a-cce2-0403a78cccdc) .Striim's Oracle Reader adapter for CDC needs a table for storing metadata when it quiesces an application. If you use LogMiner as a source for CDC (as this tutorial does), then you need the quiescemarker table. You must be connected to the CDB when following the steps to create the table.\n- Establish network connectivity between your Oracle database and the Striim instance.By default, the [Oracle listener](https://docs.oracle.com/cd/B10501_01/network.920/a96580/listener.htm) is on port `1521` . Ensure that the IP address for the Striim instance is allowed to connect to the Oracle listener port and that no firewall rules block it. The port on which the Oracle listener is configured is in the `$ORACLE_HOME/network/admin/tnsnames.ora` file.\n- Note the [system change number (SCN) for the Oracle database](https://docs.oracle.com/cd/E11882_01/server.112/e40540/transact.htm#CNCPT039) .The SCN is an internal timestamp that's used to reference changes made to a database.On your Oracle database, get the oldest SCN:```\nSELECT MIN(start_scn) FROM gv$transaction;\n```Copy this number. You'll need it later in the continuous replication pipeline steps.\n## Preparing the Striim instanceFor information about the operating systems that Striim supports, see [system requirements](https://www.striim.com/docs/platform/en/system-requirements.html) . To use the Oracle Reader with LogMiner, [put the Oracle JDBC driver in the Java classpath](https://www.striim.com/docs/en/striim-forwarding-agent-installation-and-configuration.html#UUID-98295fd7-5aa5-4ba8-3fd2-82785fce6592) in your Striim instance. Perform the following steps on each Striim server that runs an Oracle Reader adapter:- Log in to [your Oracle account](https://www.oracle.com/cloud/sign-in.html) , and then [download the ojdbc8.jar file](https://www.oracle.com/database/technologies/jdbc-ucp-122-downloads.html#license-lightbox) on your local machine.- If you don't have an Oracle account, [create one](https://profile.oracle.com/myprofile/account/create-account.jspx) .\n- Click the **Download** link for the `ojdbc8.jar` file.- Click **I reviewed and accept the Oracle License Agreement** to download the file, if you accept the license terms.\n- In Cloud Shell, create a Cloud Storage bucket, and upload the `.jar` file to it:```\ngsutil mb -b on -l REGION gs://BUCKET_NAMEgsutil cp PATH/ojdbc8.jar gs://BUCKET_NAME\n```Replace the following:- : the region where you want to create the Cloud Storage Bucket\n- : the name of the Cloud Storage bucket where you want to store the [ojdbc8.jar](https://www.oracle.com/database/technologies/jdbc-ucp-122-downloads.html#license-lightbox) file\n- : the path to where you downloaded the`ojdbc8.jar`file\nAfter the file is saved on your local machine, we recommend that you upload the `.jar` file to a [Cloud Storage](/storage) bucket so that you can download it to any instance.\n- [Open an SSH session with your Striim instance](/compute/docs/instances/connecting-to-instance#console) ,  and then download the `.jar` file onto your Striim instance and place it  in the `/opt/striim/lib` directory:```\nsudo su - striim gsutil cp gs://BUCKET_NAME/ojdbc8.jar /opt/striim/lib\n```\n- Verify that the `ojdbc8.jar` file has the correct file permissions:```\n\u00a0sudo ls -l /opt/striim/lib/ojdbc8.jar\n```The output should appear as follows:`-rwxrwx--- striim striim`\n- (Optional) If the `.jar` file doesn't have the preceding permissions, set the correct permissions:```\nsudo chmod 770 /opt/striim/lib/ojdbc8.jarsudo chown striim /opt/striim/lib/ojdbc8.jarsudo chgrp striim /opt/striim/lib/ojdbc8.jar\n```\n- Stop and restart Striim.After making any configuration changes (such as the preceding permission changes), you must restart Striim.- If you're using the CentOS 7 Linux distribution, stop Striim:```\nsudo systemctl stop striim-nodesudo systemctl stop striim-dbms\n```\n- If you're using the CentOS 7 Linux distribution, start Striim:```\nsudo systemctl start striim-dbmssudo systemctl start striim-node\n```\nIf you want to learn more about stopping and restarting Striim for a different operating system, see [Starting and stopping Striim](https://www.striim.com/docs/platform/en/starting-and-stopping-striim-platform.html) \n- [Install the psql client](/sql/docs/postgres/connect-admin-ip#install-mysql-client) on the Striim instance.You use this client to connect to the Cloud SQL instance and create schemas later in this tutorial.\n## Preparing the Cloud SQL for PostgreSQL schemaWhen you copy or continuously replicate tabular data from one database to another, Striim typically requires that the target database contains corresponding tables with the correct schema. Google Cloud doesn't have a utility to prepare the schema, but you can use the [schema conversion utility from Striim](https://striim.com/docs/platform/en/using-the-schema-conversion-utility.html) or an open source utility like [ora2pg](/community/tutorials/migrate-oracle-postgres-using-ora2pg) .\n### Maintain foreign keys during the initial loadDuring the initial load phase, pay attention to the treatment of foreign keys. Foreign keys establish the relationship between the tables in a relational database. The out-of-order creation or insertion of a foreign key into the target database might destroy the relationship between the two tables. If the integrity between the two databases is compromised, errors might occur. Therefore, it's important to output all foreign key declarations into a separate file during the schema export later in this section.\nDuring continuous replication in CDC pipelines, the source database events are propagated to the target database in the order they occur. If you correctly maintain foreign keys on your source, foreign key operations replicate from the source to the target database in the same order.\nIn contrast, the initial load pipeline defaults to loading your tables in alphabetical order. If you don't disable foreign keys before the initial load, foreign key violation errors occur. To replicate data during the initial load from the source database tables to the target tables on Cloud SQL for PostgreSQL, you must disable foreign key constraints on the tables. Otherwise, the constraints might be violated during the replication process.\nAs of June 2021, Cloud SQL for PostgreSQL doesn't support configuration options to disable foreign key constraints.\nTo handle foreign key constraints:- Output all foreign key declarations into a separate file during the schema export.\n- Create table schemas in the Cloud SQL for PostgreSQL database without the foreign key constraints.\n- Complete the initial data replication.\n- Apply the foreign key constraints on the tables.\n- Create the continuous replication pipeline.\nThis tutorial offers two options for schema conversion, which the following sections explain:- The [Striim schema conversion utility](https://striim.com/docs/platform/en/using-the-schema-conversion-utility.html) (recommended)\n- The [Oracle to PostgreSQL database schema converter (Ora2Pg)](http://ora2pg.darold.net/documentation.html) \n### Convert the schema using Striim's schema conversion utilityUse Striim's schema conversion utility to prepare Cloud SQL for PostgreSQL to integrate data with the target schema and create tables that reflect the source Oracle database.\nThe Striim schema conversion tool converts the following source objects into equivalent target objects:- Tables\n- Primary keys\n- Data types\n- Unique constraints\n- `NOT NULL`constraints\n- Foreign keys\nUsing Striim's schema conversion utility, you can analyze the source database and generate DDL scripts to create equivalent schemas in the target database.\nWe recommend that you manually create the schema in the target database by using the generated DDL scripts. It's easiest to select a subset of your tables, export the schema, and then import the schema into your target Cloud SQL for PostgreSQL database.\nThe following example demonstrates how to get your target Cloud SQL for PostgreSQL database ready for the initial load by importing your schema using Striim's schema conversion utility:- [Open an SSH connection](/compute/docs/instances/connecting-to-instance#console) to your Striim instance.\n- Go to the `/opt/striim` directory:```\ncd /opt/striim\n```\n- List all arguments:```\nbin/schemaConversionUtility.sh --help\n```\n- Run the schema conversion utility and include the flags that are appropriate for your use case:```\nbin/schemaConversionUtility.sh \\-s=oracle \\-d=SOURCE_DATABASE_CONNECTION_URL \\-u=SOURCE_DATABASE_USERNAME \\-p=SOURCE_DATABASE_PASSWORD \\-b=SOURCE_TABLES_TO_CONVERT \\-t=postgres \\-f=false\n```Replace the following:- : connection URL for Oracle database\u2014for example,`\"jdbc:oracle:thin:@12.123.123.12:1521/APPSPDB.WORLD\"`or`\"jdbc:oracle:thin:@12.123.123.12:1521:XE\"`\n- : Oracle username to use to connect to the Oracle database\n- : Oracle password to use to connect to the Oracle database\n- : table names from the source database that are used to convert schemas\nMake sure that you use the `-f=false` argument. This argument exports the foreign key declarations into a separate file.The output folder might contain some or all of the following files. For more details on these files, see [Striim's schema conversion utility documentation](https://striim.com/docs/platform/en/using-the-schema-conversion-utility.html) .| Output filename        | Description                 |\n|:----------------------------------------------|:-------------------------------------------------------------------------------|\n| converted_tables.sql       | Contains all the converted tables that don't require any coercion    |\n| converted_tables_with_striim_intelligence.sql | Contains all the converted tables that have been converted with some coercion |\n| conversion_failed_tables.sql     | Contains tables where conversion was attempted, but a mapping was not obtained |\n| converted_foreignkey.sql      | Contains all foreign key constraint declarations        |\n| conversion_failed_foreignkey.sql    | Contains all failed foreign key conversions         |\n| conversion_report.txt       | Contains a verbose report of the schema conversion        |In this tutorial, you use the `converted_tables.sql` file to create equivalent tables in the Cloud SQL for PostgreSQL database without any foreign key constraints. After the initial replication, you use the `converted_foreignkey.sql` file to apply the foreign key constraints.\n### Convert the schema using Ora2PgAnother option for converting Oracle table schemas to equivalent PostgreSQL schemas is the Ora2Pg utility. You can install this utility on a separate Google Cloud VM.\nThe Ora2Pg utility converts the Oracle schema and exports the DDL statements that are required to create equivalent tables in the PostgreSQL database. These DDL statements are exported in an output file that is named `output.sql` .\nDuring the schema export, you export and save all foreign key declarations into a separate file by using the following flag in the Ora2Pg configuration file:\n`FILE_PER_FKEYS 1`\nBy default, foreign keys are exported into the main output file ( `output.sql` ). When you enable the `FILE_PER_FKEYS` flag ( `1` ), foreign keys are exported into a separate file named `FKEYS_output.sql` .\nIn this tutorial, you use the `output.sql` file to create equivalent tables in the Cloud SQL for PostgreSQL database without any foreign key constraints. After the initial replication, you use the `FKEY_output.sql` file to apply the foreign key constraints.## Preparing the Cloud SQL for PostgreSQL instanceTo enable Striim to write data to a Cloud SQL for PostgreSQL instance, you need to create a Cloud SQL instance. You also need to create the database tables and the schema that Striim writes to:- In Cloud Shell, [create a Cloud SQL for PostgreSQL instance](/sql/docs/postgres/create-instance#gcloud) . We recommend that you configure Cloud SQL to use a [private IP address](/sql/docs/postgres/private-ip) . Use the [--network parameter](/sql/docs/postgres/configure-private-ip) to configure this address:```\n$INSTANCE_NAME=INSTANCE_NAME\ngcloud beta sql instances create INSTANCE_NAME \\\n --database-version=POSTGRES_12 \\\n --network=NETWORK \\\n --cpu=NUMBER_CPUS \\\n --memory=MEMORY_SIZE \\\n --region=REGION\n```Replace the following:- : the instance name\n- : the name of the VPC network that you use for this instance\n- : number of vCPUs in the instance\n- : amount of memory for the instance. For example, 3072MiB or 9GiB. GiB is assumed if you do not specify the unit.\n- : the region where you created the Cloud Storage bucket\n- [Create a username and password](/sql/docs/postgres/create-manage-users#creating) on the Cloud SQL instance:```\nCLOUD_SQL_USERNAME=CLOUD_SQL_USERNAMEgcloud sql users create $CLOUD_SQL_USERNAME \\\u00a0 --instance=$INSTANCE_NAME \\\u00a0 --password=CLOUD_SQL_PASSWORD\n```Replace the following:- : a username for your Cloud SQL instance\n- : the password for the Cloud SQL username\nThis user is granted ownership of the PostgreSQL tables. Striim also uses this user's credentials to connect to the Cloud SQL for PostgreSQL database.The schema files that are exported during the [schema conversion step](#convert_the_schema_using_striims_schema_conversion_utility) might have a DDL statement that grants ownership to a user, as in the following example:```\nCREATE SCHEMA <SCHEMA_NAME>;\nALTER SCHEMA <SCHEMA_NAME> OWNER TO <USER>;\n```You might need to replace `SCHEMA_NAME` with `CLOUD_SQL_SCHEMA` and `USER` with the `CLOUD_SQL_USERNAME` created earlier.\n- Create a PostgreSQL database```\nCLOUD_SQL_DATABASE_NAME=CLOUD_SQL_DATABASE_NAMEgcloud sql databases create $CLOUD_SQL_DATABASE_NAME \\\u00a0 --instance=$INSTANCE_NAME\n```Replace the following:- : PostgreSQL database name\n- Configure the Cloud SQL for PostgreSQL database to allow access from the Striim instance. Connectivity options depend on whether you configured the Cloud SQL instance to use a public or private IP address.- If you configured a public IP address, [add the Striim's instance IP address as an authorized address on the Cloud SQL instance](/sql/docs/mysql/configure-ip#add) . The following screenshot shows how to do that from the Google Cloud console: \n- If you configured a [private IP address](/sql/docs/postgres/private-ip) , the available [connectivity options](/sql/docs/postgres/configure-private-ip#connecting_to_an_instance_using_its_private_ip) depend on whether or not the Cloud SQL instance and the Striim instance are on the same VPC network.- If your Striim instance is on the same VPC network as your Cloud SQL instance, the Striim instance can establish connection with the Cloud SQL instance.The following screenshot shows that the Cloud SQL instance is associated with the default VPC network. If the Striim instance was also created on the default VPC network, it can privately connect with the Cloud SQL instance. \n- If your Striim instance is on a different VPC network than your Cloud SQL instance, [configure private service access](/sql/docs/postgres/configure-private-services-access) on your Striim instance's VPC network.\n- Create table schemas without foreign key constraints in the Cloud SQL for PostgreSQL database.- To export `output.sql` during the [schema conversion step](#convert_the_schema_using_striims_schema_conversion_utility) , use the `output.sql` file to create the schemas.\n- To export `converted_tables.sql` during the schema conversion step, use the `converted_tables.sql` file to create the schemas.You can run either script by using any PostgreSQL client with connectivity to the Cloud SQL for PostgreSQL instance. However, we recommend using the PostgreSQL client you installed earlier on the Striim instance.\n- [Open an SSH session with your Striim instance](/compute/docs/instances/connecting-to-instance#console) .\n- Create the schemas:```\npsql -h HOSTNAME -p CLOUD_SQL_PORT -d CLOUD_SQL_DATABASE_NAME -U CLOUD_SQL_USERNAME -f PATH_TO_MAIN_SQL_FILE\n```Replace the following:- : IP address of the Cloud SQL instance\n- : port of the Cloud SQL instance to connect to\u2014by default this port is`5432`\n- : path to the main script on the Striim instance\nFor example:`psql -h 12.123.123.123 -d testdb -U hr -p 5432 -f output.sql` **Note:** If you see the following error message: \"SCRAM authentication requires libpq version 10 or above\" manually reinstall PostgreSQL from the official [PostgreSQL Downloads](https://www.postgresql.org/download/) .\n- Verify that the tables were created:- Connect to the Cloud SQL for PostgreSQL database:```\npsql -h HOSTNAME -p 5432 -d CLOUD_SQL_DATABASE_NAME -UCLOUD_SQL_USERNAME\n```\n- List the tables in this database:```\n\\dt\n```The output is a list of tables that the table schema conversion script created in the previous step.\n- [Create a checkpointing table](https://www.striim.com/docs/platform/en/database-writer.html#UUID-7f411461-8c9b-3a93-08a8-d8fedea7fad4) on the Cloud SQL for PostgreSQL database:- Connect to the Cloud SQL for PostgreSQL database:```\npsql -h HOSTNAME -p 5432 -d CLOUD_SQL_DATABASE_NAME -UCLOUD_SQL_USERNAME\n```\n- Create the table:```\nCREATE TABLE chkpoint (id character varying(100) primary key,sourceposition bytea,pendingddl numeric(1),ddl text);\n```Striim needs this table to maintain checkpoints during the continuous replication process.## Loading the Oracle database to Cloud SQL for PostgreSQL databaseThis section describes the one-time, initial replication of the Oracle database to the Cloud SQL for PostgreSQL database.\n### Establish a connection to Oracle from StriimFollow the guidance in [Running Striim in Google Cloud](https://www.striim.com/docs/platform/en/running-striim-in-the-google-cloud-platform.html) . For the initial load, you use the [Striim Database Reader adapter](https://www.striim.com/docs/platform/en/oracle-database-cdc.html#UUID-4c87f956-0cd8-1c7d-407d-703c8822dd74) to connect to Oracle from Striim. You can also use [Striim's CDC wizard](https://www.striim.com/blog/striim-3-6-change-data-capture-wizards/) .- In the Striim Database Reader adapter, go to **Sources** , and then search for and select **Database** from the list.\n- Set the following properties in the **Database** window:- **Name:** identify this component of the migration pipeline.\n- **Adapter:** `DatabaseReader`\n- **Connection URL:** enter a unique string to connect to the Oracle database:```\njdbc:oracle:thin:@HOSTNAME:ORACLE_PORT:SID\n```OR```\njdbc:oracle:thin:@HOSTNAME:ORACLE_PORT/PDB_OR_CDB_SERVICE_NAME\n```Replace the following:- : Oracle database port (`1521`by default)\n- : Oracle database SID\n- : Oracle PDB or CDB service name: If your tables are in a PDB, use`PDB_SERVICE_NAME`; if they are in a CDB, use`CDB_SERVICE_NAME`.\nYou can find the port and service name in the `tnsnames.ora` file located at `$ORACLE_HOME/network/admin/tnsnames.ora` on the Oracle instance.\n- **Username** and **password:** Use the Oracle user ( `c\n##striim` user) you created in the prerequisite steps. Striim uses this username and password to connect to your Oracle database and read the tables.\n- **Tables:** For Oracle, the Database Reader also needs a list of table names to replicate. This property is specified in the Tables field under **Show optional properties** . The format for this property is as follows:```\nORACLE_SCHEMA.ORACLE_TABLE_NAME\n```Replace the following:- : Oracle schema name\n- : Oracle table names in that schema\nYou might also specify multiple tables and materialized views as a list separated by semicolons, or with the following wildcards:`%` : any series of characters`_` : any single characterFor example, `HR.%` reads all tables in the HR schema. At least one table must match the wildcard. Otherwise, the Database Reader fails with the following error:`Could not find tables specified in the database` **Note:** For initial development, we recommend testing with only one table.- **Quiesce On IL Completion:** Toggle this field to green by sliding it to the right to pause the pipeline when the initial load is complete.\n- **Output To:** Name the output of this adapter. Use a case-sensitive string without special characters or spaces.\n- Click **Save** . The adapter properties display: \n### Test the connectionNow that you have connected to Oracle from Striim, test the connection.- Click the **Created** drop-down list to test Striim connectivity to the Oracle database.\n- Click **Deploy App** .\n- Select the output of this adapter, and then click **Preview** to display the data in real time as Striim reads it from the source. \n- Click the **Deployed** drop-down list and then click **Start App** .\n- (Optional) Click the **Deployed** drop-down list and then click **Undeploy App** to fix any errors that occur.\n- (Optional) Click **Resume App** after all errors are fixed to restart the app.\n- Click the **default** deployment group.\n- Verify that the **Validate table mappings** option is toggled on, and then click **Deploy** .The preview data pane and the pipeline status change to **Quiesced** .\nAt this point in the tutorial, you have successfully verified that Striim is able to establish a connection to your Oracle database and to read the data within it.## Add a Cloud SQL for PostgreSQL database as a targetFor this migration, you write data to the Cloud SQL for PostgreSQL instance. Striim provides a generic database writer adapter, called [Database Writer](https://www.striim.com/docs/en/database-writer.html) , that you can use for the migration.- In Striim Flow Designer, go to **Targets** . Search for and select **Cloud SQL Postgres** from the list.\n- Drag **Database Writer** to the pipeline.\n- Set the following properties:- **Adapter:** `DatabaseWriter`\n- **Connection URL:** Enter a unique string to establish a connection to the Cloud SQL instance:```\njdbc:postgresql://CLOUD_SQL_IP_ADDRESS:CLOUD_SQL_PORT/CLOUD_SQL_DATABASE_NAME?stringtype=unspecified\n```Replace the following:- : IP address of the Cloud SQL instance\nFor example:```\njdbc:postgresql://12.123.12.12:5432/postgres?stringtype=unspecified\n```\n- **Username** and **password:** Enter the Cloud SQL username and password that you created earlier.\n- **Tables:** Create a mapping from your Oracle database table names to to Cloud SQL table names. Specify which Oracle database table is written to which Cloud SQL table. This mapping uses the following format:```\nORACLE_SCHEMA.ORACLE_TABLE_NAME,CLOUD_SQL_SCHEMA.CLOUD_SQL_TABLE_NAME\n```Replace the following:- : PostgreSQL schema name\n- : PostgreSQL table name\nTo map multiple tables, you can use the wildcard symbol (%) in the **Tables** field\u2014for example:```\nHR.%,hr.%\n```The required fields for Database Writer are marked in the following screenshot: \n### Deploy the migration pipelineAfter the migration pipeline is ready, deploy it from the Striim Flow Designer and start the application. You can also preview the data being replicated in real time. Use [Monitor reports](https://www.striim.com/docs/en/using-monitor-reports.html) to track the progress of the replication. To track the progress, select the **Application Progress** icon.\n - In the Striim Flow Designer, deploy the migration pipeline. Click the **Created** drop-down list, and then click **Deploy App** . After the initial load is complete, the pipeline status changes to `Quiesced` .\n- Click **Undeploy the app** to roll back the deployment.\n- Verify that the data load succeeded by checking the row count:```\nSELECT COUNT(*) FROM <TARGET CLOUD SQL TABLE>;\n```You should see a non-zero output. If you don't, the data load failed.\nThe initial data load from the Oracle database to Cloud SQL for PostgreSQL is atomic. Either the entire data load succeeds or the entire data load fails. If the initial load fails, you must [load the data again](#deploy-the-pipeline) .## Enabling foreign key constraints on the Cloud SQL for PostgreSQL tablesAfter the initial load is complete, enable the foreign key constraints on the target tables. Use the file with foreign key declarations ( `FKEY_output.sql` or `converted_foreignkey.sql` ) that you created during the [schema conversion](#convert_the_schema_using_striims_schema_conversion_utility) .- In Striim, [open an SSH session](/compute/docs/instances/connecting-to-instance#console) .\n- Create foreign key constraints on the tables:```\npsql -h HOSTNAME -d CLOUD_SQL_DATABASE_NAME -U CLOUD_SQL_USERNAME -pCLOUD_SQL_PORT -f PATH_TO_FOREIGN_KEY_FILE\n```Replace the following:- : Cloud SQL for PostgreSQL username\n- : : path to the script with foreign key constraints on the Striim instanceFor example:`psql -h 12.123.123.123 -d testdb -U hr -p 5432 -f output.sql`## Continuously replicating the Oracle database to Cloud SQL for PostgreSQLAfter you complete your initial data load, create a separate pipeline to replicate changes to the Oracle database. As long as it remains running, this pipeline also keeps the source database in sync with the target database.\n### Establish a connection to Oracle from StriimFor continuous replication, you use the [Striim Oracle Reader adapter](https://www.striim.com/docs/en/oracle-reader-properties.html) to connect from Striim to the Oracle database. This Striim adapter can read CDC data from Oracle.- In the Striim Oracle Reader adapter, navigate to **Sources** .\n- Search for **Oracle** , and select **Oracle CDC** from the list that populates.\n- Set the following properties:- **Connection URL:** ```\nHOSTNAME:ORACLE_PORT/SID\n```OR```\nHOSTNAME:ORACLE_PORT/CDB_SERVICE_NAME\n```Replace the following:- : Oracle's CDB service name\nThe connection URL is a unique string that's used to connect to the Oracle database. Unlike the Database Reader adapter used for the initial load, you use the CDB service name, regardless of whether your database tables are in a PDB or CDB.For example: `12.123.123.12:1521/ORCLCDB.WORLD` .\n- **Username/password:** Use the Oracle username ( `c\n##striim` user) you created in the prerequisite steps.This Oracle user must have the privileges to read your tables.\n- **Tables:** You also need a list of table names to replicate. The name is specified in the following format, based on whether the tables are in a CDB or PDB.For the CDB table:```\nORACLE_SCHEMA.ORACLE_TABLE_NAME\n```For the PDB table:```\nPDB_NAME.ORACLE_SCHEMA.ORACLE_TABLE_NAME\n```Replace the following:- : Oracle PDB name\nThis command replicates your CDB or PDB tables. You can find your `PDB_NAME` in the file `tnsnames.ora` located at `$ORACLE_HOME/network/admin/tnsnames.ora` on the Oracle instance.Remember, `PDB_NAME` and `PDB_SERVICE_NAME` are different. You used the `PDB_SERVICE_NAME` earlier in the section. View the `tnsnames.ora` file to get the PDB name:```\nsudo su - oracle // Login as oracle usercat \u00a0ORACLE_HOME/network/admin/tnsnames.ora\n```The following is an example of the `PDB_NAME` ( `APPSPDB` ) in the `tnsnames.ora` file:```\n APPSPDB =\n (DESCRIPTION =\n  (ADDRESS_LIST =\n  (ADDRESS = (PROTOCOL = TCP) (HOST = orainst) (PORT = 1521))\n  )\n  (CONNECT_DATA =\n  (SERVICE NAME = APPSPDB.WORLD)\n  )\n )\n```To specify multiple tables and materialized views as a list, separate the the table names or view names by semicolons or wildcards. At least one table must match the wildcard; otherwise the Oracle Reader fails with a `Could not find tables specified in the database` error. **Note:** We recommend that you initially test the connectivity with only one table.\n- **Start SCN:** For the continuous pipeline, you need to provide the Oracle database SCN. Striim needs it to start replicating all transactions. Enter the SCN value you generated earlier.- **Support PDB and CDB:** You can use a CDB or a PDB; expand **Show optional properties** and toggle the switch to the right.\n- **Quiesce marker table:** Use the table name you created earlier.The following screenshot provides an overview of the required fields for the Oracle Reader adapter: \n- **Test connection:** Click **Test connection** . The connection URL, username, and password are required to test database connectivity. If Striim is successfully able to establish a connection, a green check mark appears.\n- Test Striim's ability to read the Oracle database tables:- In the Oracle Reader adapter, select **Deploy app** .\n- Select the **default** deployment group.\n- Click **Deploy** .\n- Click the wave ( **Output** ) icon for this adapter. The eye ( **Preview** ) icon that appears is used to preview the data in real time as Striim reads it from the source.\n- Click **Start App** in the **Deployed** dropdown.If any errors occur, select **Undeploy App** from the same dropdown and fix the errors. After you fix the errors, click **Resume App** to restart the application.When the pipeline starts, the pipeline status updates to **Running** . Any new changes to the source table display in the preview window. Because the Oracle Reader adapter uses CDC, the only table changes that appear in the preview data pane are those that occur after the application was launched. \n### Verify the ability to read CDC data from OracleTo test if the adapter is able to read new changes, follow these instructions:- Use SQL statements to insert new transactions in the Oracle source tables.\n- Verify that the new transactions appear in the **Preview data** tab of Oracle Reader adapter.\n- Stop the application and click **Undeploy** . Now you are ready to move to the next step.\nUp to this point you haven't added a target adapter to the pipeline. No data is copied unless you add a target adapter. In the next section, you add a target adapter.## Add a Cloud SQL for PostgreSQL database as a targetIn order to write data to the Cloud SQL for PostgreSQL database, you need to add a Database Writer adapter to your pipeline. For the continuous replication pipeline, you use the same adapter that you used in the initial load pipeline.- In Striim Flow Designer, go to **Targets** , and search for and select **Cloud SQL Postgres** from the list.\n- Drag **Database Writer** to the pipeline.\n- Set the following properties:- **Adapter:** `DatabaseWriter` .\n- **Connection URL:** Enter the connection URL you entered to establish a connection to the Cloud SQL instance:\n```\njdbc:postgresql://CLOUD_SQL_IP_ADDRESS:CLOUD_SQL_PORT/CLOUD_SQL_DATABASE_NAME?stringtype=unspecified\n```For example:```\njdbc:postgresql://12.123.12.12:5432/postgres?stringtype=unspecified\n```- **Username** and **password:** Enter the Cloud SQL username and password that you created earlier.\n- **Tables:** Create a mapping from your Oracle database table names to Cloud SQL table names. Specify which Oracle database table is written to which Cloud SQL table. This mapping uses the following format:\n```\nORACLE_SCHEMA.ORACLE_TABLE_NAME,CLOUD_SQL_SCHEMA.CLOUD_SQL_TABLE_NAME\n```To map multiple tables, you can use the wildcard symbol (%) in the **Tables** field. For example:```\nHR.%,hr.%\n```In addition to those properties, you also need to set the following properties for the continuous replication pipeline:\n- Click **Show optional properties** .\n- Select the following value for the **Ignorable Exception Code** field:```\n23505,NO_OP_UPDATE,NO_OP_DELETE\n```Since you're starting the CDC pipeline from a historical point, there might be duplicates. Striim deduplicates on your target by using the previous ignorable exception code properties. Details on the exception codes can be found in the following table:| Exception code | Details                      |\n|:-----------------|:-----------------------------------------------------------------------------------------------|\n| 23505   | Duplicate primary key value violates unique constraint           |\n| NO_OP_UPDATE  | Couldn't update a row in the target (typically because there was no corresponding primary key) |\n| NO_OP_DELETE  | Couldn't delete a row in the target (typically because there was no corresponding primary key) |\n- Enter `chkpoint` in the **Check Point Table** field. Striim uses this table to store metadata associated with checkpointing the continuous replication pipeline.\n## Enabling recovery and encryptionBefore you deploy the CDC pipeline, we strongly recommend that you enable recovery. If the Striim application or the VM goes down, enabling recovery helps ensure that Striim can continue processing. This step also helps ensure exactly- once processing semantics. These semantics track the last-known-good read checkpoint on the source database, and the last-known-good write checkpoint on the target database. If an application or VM fails, Striim coordinates the two checkpoints to help ensure that no data was lost or duplicated. Recovery doesn't apply to initial load applications.\n### Enable recovery\n- In Striim Flow Designer, click the **Configuration** icon and then select **App Settings** .\n- Click **Recovery Interval** .\n- Type`5`and select **Second** from the drop-down list.\n- Click **enable encryption** . Striim encrypts all streams that move data between Striim servers, or from a forwarding agent, to a Striim server.\n### Enable encryption\n- In Striim Flow Designer, click the **Configuration** icon, select **App Settings** , and then under **Encryption** , select the checkbox.\nSee the [Striim website](https://www.striim.com/docs/en/recovering-applications.html) to learn more about Striim's recovery methods.## Enable logging exceptionsBefore you deploy the continuous replication pipeline, we recommend that you enable the [exception store](https://www.striim.com/docs/en/create-exceptionstore.html) in Striim. As part of the CDC application, there might be duplicates written by the initial load application. The Striim application ignores those errors, writes them to a store (for you to review and process) and continues processing.- In Striim Flow Designer, select the **Exceptions** icon. The icon shows an exclamation point between two curved arrows.\n- Click **Turn on** .\n## Deploy the pipelineAfter the pipeline is ready, you can deploy it and start the application. You can also preview the data as it's replicated in real time and view [monitor reports](https://www.striim.com/docs/en/using-monitor-reports.html) . When the pipeline successfully starts the continuous replication, the pipeline status changes to **Running** .- In the Oracle Reader adapter, select **Deploy app** .\n- Select the **default** deployment group.\n- Click **Deploy** .\nYou can keep the pipeline running for as long as you want to keep the Oracle tables in sync with the Cloud SQL tables.\nYou have finished the tutorial. If you are interested in learning about other Oracle CDC sources, the following section discusses them.## Alternate Oracle CDC sourcesIn addition to LogMiner, Striim's adapter can read Oracle databases from either [XStream](https://docs.oracle.com/en/database/oracle/oracle-database/19/xstrm/introduction-to-xstream.html) or [Oracle Golden Gate trail files](https://www.oracle.com/integration/goldengate/) .\nTo read from XStream, use Striim's [Oracle Reader adapter](https://www.striim.com/docs/platform/en/oracle-database-cdc.html#UUID-4c87f956-0cd8-1c7d-407d-703c8822dd74) . XStream may have better performance, but it requires a Golden Gate license and is only supported for [Oracle Database 11.2.0.4](https://docs.oracle.com/cd/E11882_01/server.112/e41360/chapter1_11204.htm#NEWFT379) .\nTo read Golden Gate trail files, use Striim's [GG Trail Reader adapter](https://www.striim.com/docs/platform/en/oracle-goldengate.html#UUID-9daf6652-a8c7-8d65-6f0f-da3e3181a9ad) .\nThe following table describes differences between LogMiner and XStream:\n| Oracle database CDC features             | Supported by LogMiner?              | Supported by XStream Out?     |\n|:-------------------------------------------------------------------------------|:----------------------------------------------------------------------------|:-------------------------------------------|\n| Reading data definition language (DDL), ROLLBACK, and uncommitted transactions | Yes                   | No           |\n| Using the DATA() and BEFORE() functions          | Yes                   | No           |\n| Using QUIESCE (see Console commands)           | Yes                   | No           |\n| Receiving CDC events               | Receives events in batches as defined by Oracle Reader's FetchSize property | Continuous reception of change data events |\n| Reading from tables containing unsupported types        | Won't read the table              | Reads the columns of supported types  |## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n## What's next\n- Check out the Striim documentation: [Oracle to Google Cloud PostgreSQL Migration Guide](https://www.striim.com/integrations/oracle-postgresql/) \n- Watch the video on [migrating Oracle Databases to Cloud SQL PostgreSQL](https://www.youtube.com/watch?v=PDFC7XpGAVU) .\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .\n **Oracle, Java, and MySQL are registered trademarks of Oracle and/or itsaffiliates. Other names may be trademarks of their respective owners.**", "guide": "Cloud Architecture Center"}