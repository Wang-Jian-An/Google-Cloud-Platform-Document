{"title": "Google Kubernetes Engine (GKE) - Ensure compatibility of TLS certificates before upgrading to GKE 1.29", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview", "abstract": "# Google Kubernetes Engine (GKE) - Ensure compatibility of TLS certificates before upgrading to GKE 1.29\nGKE clusters running version 1.29 or later don't support Transportation Layer Security (TLS) certificates signed with the [SHA-1algorithm](https://en.wikipedia.org/wiki/SHA-1) . To prevent impact to your clusters, you need to replace incompatible certificates of [webhook](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#configure-admission-webhooks-on-the-fly) and [extension APIserver](https://kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/#contacting-the-extension-apiserver) backends with certificates using [compatible signingalgorithms](#compatible-signing-algorithms) before upgrading your clusters to version 1.29.\n#", "content": "## Impact to clusters of this removal\nGKE [pauses automaticupgrades](/kubernetes-engine/docs/deprecations#how_kubernetes_deprecations_work_with) when it detects that a cluster is using certificates that are incompatible with version 1.29. After you replace the certificates with certificates using [compatible signing algorithms](#compatible-signing-algorithms) , or version 1.28 reaches [end of life](/kubernetes-engine/docs/release-schedule) , GKE resumes automatic upgrades.\nIf you don't replace the incompatible certificates before upgrading to 1.29, you could experience the following issues with your clusters:\n- GKE webhook backends that use TLS certificates signed with the SHA-1 algorithm will stop working due to authentication failure. Webhook calls will fail for the Kubernetes control plane communicating with your webhooks with incompatible certificates. Depending on your configuration, especially if you use admission webhooks, failure to contact a webhook might block resource creation on your cluster, such as Pod creation, which can be very disruptive.\n- Calls to APIs served by the extension API servers will fail.## Why Kubernetes is removing this capability\nGKE operates open source Kubernetes, which uses the [kube-apiserver component](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/) to contact your webhook and extension API server backends using TLS. The kube-apiserver component is written in the Go programming language.\nFrom Go version 1.18, Go started [rejecting TLS certificates signed with theSHA-1 algorithm](https://go.dev/doc/go1.18#sha1) , but left a debug switch `x509sha1=1` to enable the old behavior to ease the migration process. GKE version 1.24 was the first version built using Go version 1.18. GKE builds of Kubernetes had enabled this debug switch until version 1.29. The switch will be [removed in Go1.24](https://github.com/golang/go/issues/62048) . GKE 1.29 builds Kubernetes with the switch disabled to prepare for the future Go removal of the debug switch. After GKE upgrades your clusters to version 1.29, calls from your cluster's control plane to webhooks or extension API servers in the cluster that provide a TLS certificate signed with SHA-1 algorithm will fail.\n## Identify affected clusters\nGKE monitors your clusters and uses the [Recommenderservice](/recommender/docs/overview) to deliver guidance through insights and recommendations identifying clusters that have webhook or extension API server backends using TLS certificates signed with the SHA-1 algorithm. Or, you can use logs to identify calls to affected backends from your cluster.\n### How to get insights and recommendations\nFor clusters running version 1.24 or later, follow the instructions to [viewinsights andrecommendations](/kubernetes-engine/docs/deprecations/viewing-deprecation-insights-and-recommendations#view-insights-recs) . You can get insights using the gcloud CLI, or the Recommender API, filtering with the subtype `DEPRECATION_K8S_SHA_1_CERTIFICATE` .\n### How to get logs\nFor clusters running 1.24 or later with Cloud Logging [enabled](/stackdriver/docs/solutions/gke/installing#installing) , GKE provides a [Cloud Audit Logs log](/kubernetes-engine/docs/how-to/audit-logging#viewing_your_projects_admin_activity_log) to identify calls to affected backends from your cluster. You can use the following filter to search for the logs:\n```\nlogName =~ \"projects/.*/logs/cloudaudit.googleapis.com%2Factivity\"\nresource.type = \"k8s_cluster\"\noperation.producer = \"k8s.io\"\n\"insecure-sha1.invalid-cert.kubernetes.io\"\n```\nThe audit logs include the hostname of the affected backend. To learn more about how to interpret the results, see the next section.\n## Interpret the guidance from insights and recommendations\nA recommendation includes the hostname of the affected backend, and whether it is webhook or extension API server. Hostnames that refer to Services in the cluster follow the format `<service-name>.<namespace>.svc` .\nIf the affected backend certificate is from a webhook server, the hostname can either be a Service in the cluster, or a URL. To learn more, see [Contacting thewebhook](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#contacting-the-webhook) .\nIf the affected certificate is from an extension API server, the hostname is a Service in the cluster. To learn more, see the [Contacting the extensionapiserver](https://kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/#contacting-the-extension-apiserver) .\nAfter you have identified the affected backend, follow the instructions to [inspect the certificate of a Service](#inspect-cert-service) or [Inspect thecertificate of a URL backend](#inspect-url-backend) , depending on the type.\nIf your clusters have not called servers with affected certificates in the last 30 days, you won't see any recommendations.\nSee the following example list of recommendations:\n```\nRECOMMENDATION_ID      PRIMARY_IMPACT_CATEGORY RECOMMENDATION_STATE LAST_REFRESH_TIME    PRIORITY RECOMMENDER_SUBTYPE    DESCRIPTION\n26bfcb32-6f2a-407c-874f-8cf55b3af912 RELIABILITY    ACTIVE    2024-02-15T01:09:04.454456273Z P2  DEPRECATION_K8S_SHA_1_CERTIFICATE Update the webhook and/or extension API servers that use certificates signed with SHA-1 algorithm to use certificates with compatible signing algorithms prior to upgrading the cluster to version 1.29. [Learn more](https://cloud.google.com/kubernetes-engine/docs/deprecations/sha1-1-29#mitigate_the_risk_of_upgrading_to_129).\n```\nTo get details of the cluster and Service, [describe therecommendation](/kubernetes-engine/docs/how-to/optimize-with-recommenders#view-insights-recs) . The output for a Service named `example-webhook` in the `default` namespace is similar to the following:\n```\nassociatedInsights:\n- insight: projects/<CLUSTER_PROJECT_NUMBER>/locations/<CLUSTER_LOCATION>/insightTypes/google.container.DiagnosisInsight/insights/d76887a8-9eed-41a0-9459-d49dee43455e\ncontent:\n overview:\n featureDeprecationRecommendation:\n - featureName: x.509_certificate_signature_algorithm\n  featureReplacementValue: algorithm [compatible with GKE v1.29](https://cloud.google.com/kubernetes-engine/docs/deprecations/sha1-1-29#compatible-signing-algorithms)\n  featureValue: SHA1\n  stopServingVersion: '1.29'\n  targetType: hostname\n  targetValue: example-webhook.default.svc\n targetClusters:\n - clusterId: 3be916a554724c79a2314c8baee3fd57cf1c39df1ad34c3daf291db701b6d541\n  clusterUri: //container.googleapis.com/projects/<CLUSTER_PROJECT_NUMBER>/locations/<CLUSTER_LOCATION>/clusters/<CLUSTER_NAME>\ndescription: Update the webhook and/or extension API servers that use certificates\n signed with SHA-1 algorithm to use certificates with compatible signing algorithms\n prior to upgrading the cluster to version 1.29. [Learn more](https://cloud.google.com/kubernetes-engine/docs/deprecations/sha1-1-29#mitigate_the_risk_of_upgrading_to_129).\netag: '\"ad50aac8278951d5\"'\nlastRefreshTime: '2024-02-15T01:09:04.454456273Z'\nname: projects/<CLUSTER_PROJECT_NUMBER>/locations/<CLUSTER_LOCATION>/recommenders/google.container.DiagnosisRecommender/recommendations/26bfcb32-6f2a-407c-874f-8cf55b3af912\nprimaryImpact:\n category: RELIABILITY\n reliabilityProjection:\n risks:\n - SERVICE_DISRUPTION\npriority: P2\nrecommenderSubtype: DEPRECATION_K8S_SHA_1_CERTIFICATE\nstateInfo:\n state: ACTIVE\ntargetResources:\n- //container.googleapis.com/projects/<CLUSTER_PROJECT_NUMBER>/locations/<CLUSTER_LOCATION>/clusters/<CLUSTER_NAME>\n```\n### Inspect the certificate of a Service\nBoth webhooks and extension API servers can be backed by Services.\nAfter you have identified relevant backend Services to inspect, use the following instructions to inspect the certificate of each Service to check which certificates use the SHA-1 algorithm and need to be updated.\n- Find the selector and target port of the Service:```\nkubectl describe service --namespace=NAMESPACE SERVICE_NAME\n```Replace `` and `` with the values from `targetValue` .The output is similar to the following:```\nName: example-service\nNamespace: default\nLabels: run=nginx\nSelector: run=nginx\nType: ClusterIP\nIP: 172.21.xxx.xxx\nPort: 443\nTargetPort: 444\n```This output indicates that `example-service` has the selector `run=nginx` and target port `444` . **Note:** When the `TargetPort` is not included, it is the same value as the `Port` field.\n- Find a Pod matching the selector:```\nkubectl get pods --namespace=NAMESPACE --selector=run=nginx\n```The output is similar to the following:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0READY \u00a0 STATUS \u00a0 \u00a0RESTARTS \u00a0 AGEexample-pod \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a021m\n```This output indicates that the matching Pod is `example-pod` .\n- Set up a port forward from your `kubectl` localhost to the Pod: **Note:** These next commands use port `8888` , however you can pick a different port, as this port is chosen arbitrarily.```\nkubectl port-forward --namespace=NAMESPACE pods/example-pod 8888:SERVICE_TARGET_PORT &\n```Replace `` with the `TargetPort` value from the Service. If `TargetPort` is not included, use the `Port` value.\n- Use `openssl` to show the certificate that the Service uses:```\nopenssl s_client -connect localhost:8888 </dev/null | openssl x509 -noout -text\n```This example output shows a valid certificate signed with the [SHA-256 algorithm](https://en.wikipedia.org/wiki/SHA-2) :```\nCertificate:\n Data:\n  ...\n  Signature Algorithm: sha256WithRSAEncryption\n...\n Signature Algorithm: sha256WithRSAEncryption\n```This example output shows an invalid certificate signed with the SHA-1 algorithm:```\nCertificate:\n Data:\n  ...\n  Signature Algorithm: sha1WithRSAEncryption\n...\n Signature Algorithm: sha1WithRSAEncryption\n```If the output from the certificate is similar, you must update the certificate to use a [compatible signing algorithm](#compatible-signing-algorithms) . For example, if you use the `certificate.k8s.io` API to manage TLS certificates in your cluster, you can follow the instructions to [create a certificate signingrequest](https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/#create-a-certificate-signing-request) .To clean up the port forward running in the background, find the process and terminate it.\n- Run the following command to list the running processes:```\njobs\n```See the output to get the ID of the process to terminate:```\n[1]+ Running     kubectl port-forward pods/example-pod 8888:444 &\n```This example output indicates that the process ID is `1` .\n- Terminate the process, replacing `` :```\nkill %PROCESS_ID\n```See the following output:```\n[1]+ Terminated    kubectl port-forward pods/example 8888:444\n```This example output shows that the process was terminated.\n### Inspect the certificate of a URL backend\nIf the webhook uses a `url` backend, directly connect to the hostname specified in the URL. For example, if the URL is `https://example.com:123/foo/bar` , use the following `openssl` command to show the certificate that the backend uses:\n```\nopenssl s_client -connect example.com:123 </dev/null | openssl x509 -noout -text\n```\nThis example output shows a valid certificate signed with the [SHA-256 algorithm](https://en.wikipedia.org/wiki/SHA-2) :\n```\nCertificate:\n Data:\n  ...\n  Signature Algorithm: sha256WithRSAEncryption\n...\n Signature Algorithm: sha256WithRSAEncryption\n```\nThis example output shows an invalid certificate signed with the SHA-1 algorithm:\n```\nCertificate:\n Data:\n  ...\n  Signature Algorithm: sha1WithRSAEncryption\n...\n Signature Algorithm: sha1WithRSAEncryption\n```\nIf the output from the certificate is similar, you must update the certificate to use a [compatible signing algorithm](#compatible-signing-algorithms) . For example, if you use the `certificate.k8s.io` API to manage TLS certificates in your cluster, you can follow the instructions to [create a certificate signingrequest](https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/#create-a-certificate-signing-request) .\n## Mitigate the risk of upgrading to 1.29\nAfter you have identified affected clusters and their backend Services using certificates signed with SHA-1 algorithm, you must update the Services to use certificates with [compatible signingalgorithms](#compatible-signing-algorithms) prior to upgrading the clusters to version 1.29.\nAffected clusters are automatically detected by GKE and [won't beauto-upgraded](/kubernetes-engine/docs/deprecations#auto-upgrade-pause) to version 1.29 until either incompatible certificates are no longer used or version 1.28 reaches [end of life](/kubernetes-engine/docs/release-schedule) . Once 1.28 reaches end of life, the clusters will be auto-upgraded to 1.29.\n### Compatible signing algorithms\nGKE version 1.29 is compatible with supported algorithms in the Go x509 package. This includes the following algorithms:\n- `SHA256WithRSA`\n- `SHA384WithRSA`\n- `SHA512WithRSA`\n- `ECDSAWithSHA256`\n- `ECDSAWithSHA384`\n- `ECDSAWithSHA512`\n- `SHA256WithRSAPSS`\n- `SHA384WithRSAPSS`\n- `SHA512WithRSAPSS`\n- `PureEd25519`\nTo find available algorithms, see the [x509.go sourcefile](https://go.dev/src/crypto/x509/x509.go) and search for `UnknownSignatureAlgorithm SignatureAlgorithm = iota` . Algorithms that the Go x509 package supports are listed in the `const` block with this line. To find unsupported insecure signing algorithms, search for uses of `InsecureAlgorithmError` in the file.\n## Resources\nSee the following resources for additional information on this change:\n- Go 1.18 [release notes](https://go.dev/doc/go1.18#sha1) \n- Go 1.24 [x509sha1 debug switchremoval](https://golang.org/doc/go1.15#commonname) \n- Go x509 [supported algorithms](https://go.dev/src/crypto/x509/x509.go)", "guide": "Google Kubernetes Engine (GKE)"}