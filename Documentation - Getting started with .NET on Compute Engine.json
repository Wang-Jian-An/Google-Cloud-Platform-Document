{"title": "Documentation - Getting started with .NET on Compute Engine", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Documentation - Getting started with .NET on Compute Engine\nThis tutorial shows how to get started with Compute Engine. Follow this tutorial by deploying a Hello World .NET web app to Compute Engine. For help getting started with App Engine, see the [App Engine standard environment](/dotnet/getting-started/tutorial-app) .", "content": "## Objectives\n- Deploy a Hello World sample app to a single Compute Engine instance.## CostsIn this document, you use the following billable components of Google Cloud:- [Compute Engine](/compute/all-pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . ## Before you begin- Install [.NET  Core SDK 2.1](https://dotnet.microsoft.com/download/dotnet-core/2.1) or later on your local machine running [Microsoft Windows](https://www.microsoft.com/en-us/windows) .\n- Install [Web Deploy 3.6](https://www.iis.net/downloads/microsoft/web-deploy) or later on your local machine running [Microsoft Windows](https://www.microsoft.com/en-us/windows) .\n## Running the app locally\n- [Download and unzip](https://github.com/GoogleCloudPlatform/getting-started-dotnet/archive/master.zip) or clone the sample repository from github:```\ngit clone https://github.com/GoogleCloudPlatform/getting-started-dotnet.git\n```\n- In a PowerShell window, go into the `HelloWorld` directory:```\ncd getting-started-dotnet\\HelloWorld\n```\n- Start a local web server:```\ndotnet run\n```\n- Open a web browser to `localhost:8080` .In your web browser, you see some Hello World text, served from your local machine.\n- When you're ready to move on, stop the local web server by pressing .\n## Deploying to a single instanceThis section walks you through running a single instance of your app on Compute Engine.\n### Create and configure a Compute Engine instance\nFrom Google Cloud Marketplace, you can launch an instance of Windows running Microsoft IIS on Compute Engine.- In the Google Cloud console, go to the **ASP.NET Framework** Cloud Marketplace page. [Go to Cloud Marketplace](/console/marketplace/details/click-to-deploy-images/aspnet) \n- Click **Launch** .\n- Leave the settings set to their default values, and click **Deploy** .Wait for the Compute Engine instance to deploy. It usually takes about 5 minutes to deploy.\n- To display resource information, click **VM instance** .\n- To edit the VM instance, click **Manage Resource** .\n- Click **Set Windows password** , and then make a note of the username.\n- Copy the new Windows password, and then click **Close** .\n- In the **VM instance details** page, make a note of the external IP address.\n- On your local Windows machine, edit the file `HelloWorld/Properties/PublishProfiles/ComputeEngine.pubxml` .\n- Enter your VM instance's external IP address between `<MSDeployServiceURL>` and `</MSDeployServiceURL>` . For example, `<MSDeployServiceURL>203.0.113.22</MSDeployServiceURL>`\n- Enter the instance's username that you previously noted between `<UserName>` and `</UserName>` .\n- Save your changes to the `ComputeEngine.pubxml` file.\n- In a PowerShell window, publish your app to the Compute Engine instance:```\ndotnet publish -c Release `\n /p:PublishProfile=Properties\\PublishProfiles\\ComputeEngine.pubxml `\n \"/p:Password=YOUR-PASSWORD\"\n```Replace `` with the password you previously copied.\n- Open a web browser to your instance's external IP address.In your web browser, you see some Hello World text, served from your Compute Engine instance.### Manage and monitor an instanceYou can use the Google Cloud console to monitor and manage your instance.- To view all of the logs generated by your Compute Engine resources, go to the **Logs Explorer** page. [Go to Logs Explorer](https://console.cloud.google.com/logs?service=compute.googleapis.com)  [Cloud Logging](/logging) is automatically configured to gather logs from various common services, including `syslog` .\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n### Delete the individual resources```\ngcloud compute instances delete my-app-instance --zone=YOUR_ZONE --delete-disks=allgcloud compute firewall-rules delete default-allow-http-80\n```## What's next\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .\n- For other .NET resources for building your apps, see the following:- Manage and monitor your Instance Group deployment at [Compute Engine > Instance groups](https://console.cloud.google.com/compute/instanceGroups) .\n- Manage your load balancing configuration, including URL maps and backend services, at [Network services > Load balancing](https://console.cloud.google.com/net-services/loadbalancing/list) .* Handling sessions with Firestore* Authenticating users with Identity-Aware Proxy* Building serverless apps with Pub/Sub and Cloud Functions\n- [Deploy an app to Google Kubernetes Engine](/kubernetes-engine/docs/quickstarts/deploy-app-container-image) \n- Explore other [Google Cloud services](/) .", "guide": "Documentation"}