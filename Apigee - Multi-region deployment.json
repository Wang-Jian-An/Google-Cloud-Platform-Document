{"title": "Apigee - Multi-region deployment", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Multi-region deployment\nYou are currently viewing version 1.6 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nThis topic describes a multi-region deployment for Apigee hybrid on GKE, Anthos GKE deployed on-prem, RedHat OpenShift, and on Microsoft\u00ae Azure Kubernetes Service (AKS). Select your platform in the prerequisites and procedures.\nTopologies for multi-region deployment include the following:\n- **Active-Active** : When you have applications deployed in multiple geographic  locations and you require low latency API response  for your deployments. You have the option to deploy hybrid in multiple geographic  locations nearest to your clients. For example: US West Coast, US East Coast, Europe, APAC.\n- **Active-Passive** : When you have a primary region and a failover or disaster  recovery region.\nThe regions in a multi-region hybrid deployment communicate via Cassandra, as the following image shows:\n", "content": "## Prerequisites\nBefore configuring hybrid for multiple regions, you must complete the following prerequisites:- Set up Kubernetes clusters in multiple regions with differentblocks\n- Set up cross-region communication\n- Cassandra Multi Region requirements:- Make sure the pod network namespace has connectivity across the regions, including    firewalls, vpn, vpc peering and vNet peering. This is the case for most GKE installations.\n- If the pod network namespace does not have connectivity between clusters (the clusters    are running in \"island network mode\"), enable the Kubernetes`hostNetwork`feature by setting`cassandra.hostNetwork: true`in the overrides file for all of    the regions in your Apigee hybrid multi-regions installation.For information on the Kubernetes `hostNetwork` feature, see [Host    namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces) in the Kubernetes documentation.\n- Enable`hostNetwork`on existing clusters before expanding your    multi-region configuration to new regions.\n- When`hostNetwork`is enabled, make sure worker nodes can perform reverse    DNS lookup. Apigee cassandra uses both forward and reverse DNS lookup to obtain the host    IP while starting. **Tip:** If the DNS resolution is not working, try this workaround.Add a static host entry in `/etc/hosts` file of each cassandra worker node    similar to the following:```\necho -e \"\\\\n127.0.1.1 ${HOSTNAME}\" >> \"/etc/hosts\"\n```or```\n\"\\\\nWORKER-NODE-IP ${HOSTNAME}\" >> \"/etc/hosts\"\n```\n- Open Cassandra ports 7000 and 7001 between Kubernetes clusters across all regions to    enable worker nodes across regions and datacenters to communicate. See [Configure ports](/apigee/docs/hybrid/v1.6/ports) .\nFor detailed information, see [Kubernetes](https://kubernetes.io) documentation.\n **NOTE:** Apigee recommends that you ensure that your servers'  times are synchronized.Several features such as expiration and token revocation  rely on accurate system times. If you host the runtime components in different datacenters,  then be sure that the system times are synchronized.You can use a tool such as `ntpdate` to verify that server   times are synchronized.Before configuring hybrid for multiple regions, you must complete the following prerequisites:- Set up Kubernetes clusters in multiple regions with differentblocks\n- Set up cross-region communication\n- Cassandra Multi Region requirements:- If the pod network namespace does not have connectivity between clusters (the clusters    are running in \"island network mode\", the default case in GKE on-prem installations), enable    the Kubernetes`hostNetwork`feature by setting`cassandra.hostNetwork: true`in the overrides file for all of the regions in    your Apigee hybrid multi-regions installation.For information on the Kubernetes `hostNetwork` feature, see [Host    namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces) in the Kubernetes documentation.\n- Enable`hostNetwork`on existing clusters before expanding your    multi-region configuration to new regions.\n- When`hostNetwork`is enabled, make sure worker nodes can perform reverse    DNS lookup. Apigee cassandra uses both forward and reverse DNS lookup to obtain the host    IP while starting. **Tip:** If the DNS resolution is not working, try this workaround.Add a static host entry in `/etc/hosts` file of each cassandra worker node    similar to the following:```\necho -e \"\\\\n127.0.1.1 ${HOSTNAME}\" >> \"/etc/hosts\"\n```or```\n\"\\\\nWORKER-NODE-IP ${HOSTNAME}\" >> \"/etc/hosts\"\n```\n- Open Cassandra ports 7000 and 7001 between Kubernetes clusters across all regions to    enable worker nodes across regions and datacenters to communicate. See [Configure ports](/apigee/docs/hybrid/v1.6/ports) .\nFor detailed information, see [Kubernetes](https://kubernetes.io) documentation.\n **NOTE:** Apigee recommends that you ensure that your servers'  times are synchronized.Several features such as expiration and token revocation  rely on accurate system times. If you host the runtime components in different datacenters,  then be sure to synchronize the system times.You can use a tool such as `ntpdate` to verify that server   times are synchronized.Before configuring hybrid for multiple regions, you must complete the following prerequisites:- Follow the [hybrid installation  guide](/apigee/docs/hybrid/v1.6/precog-overview) for any prerequisites like Google Cloud and org configuration   before moving to cluster setup steps.\n- Cassandra Multi Region requirements:- If the pod network namespace does not have connectivity between clusters (the clusters    are running in \"island network mode\", the default case in AKS installations), enable    the Kubernetes`hostNetwork`feature by setting`cassandra.hostNetwork: true`in the overrides file for all of the regions in    your Apigee hybrid multi-regions installation.For information on the Kubernetes `hostNetwork` feature, see [Host   namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces) in the Kubernetes documentation.\n- Enable`hostNetwork`on existing clusters before expanding your    multi-region configuration to new regions.\n- When`hostNetwork`is enabled, make sure worker nodes can perform reverse    DNS lookup. Apigee cassandra uses both forward and reverse DNS lookup to obtain the host   IP while starting. **Tip:** If the DNS resolution is not working, try this workaround.Add a static host entry in `/etc/hosts` file of each cassandra worker node    similar to the following:```\necho -e \"\\\\n127.0.1.1 ${HOSTNAME}\" >> \"/etc/hosts\"\n```or```\n\"\\\\nWORKER-NODE-IP ${HOSTNAME}\" >> \"/etc/hosts\"\n```\n- Open Cassandra ports 7000 and 7001 between Kubernetes clusters across all regions to    enable worker nodes across regions and datacenters to communicate. See [Configure ports](/apigee/docs/hybrid/v1.6/ports) .\nFor detailed information, see [Kubernetes](https://kubernetes.io) documentation.\n **NOTE:** Apigee recommends that you ensure that your servers'  times are synchronized.Several features such as expiration and token revocation   rely on accurate system times. If you host the runtime components in different datacenters,   then be sure that the system times are synchronized.You can use a tool such as `ntpdate` to verify that server   times are synchronized.Before configuring hybrid for multiple regions, you must complete the following prerequisites:- Follow the [hybrid installation  guide](/apigee/docs/hybrid/v1.6/precog-overview) for any prerequisites like Google Cloud and org configuration   before moving to cluster setup steps.\n- Cassandra Multi Region requirements:- If the pod network namespace does not have connectivity between clusters (the clusters    are running in \"island network mode\", the default case in EKS installations), enable    the Kubernetes`hostNetwork`feature by setting`cassandra.hostNetwork: true`in the overrides file for all of the regions in    your Apigee hybrid multi-regions installation.For information on the Kubernetes `hostNetwork` feature, see [Host   namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces) in the Kubernetes documentation.\n- Enable`hostNetwork`on existing clusters before expanding your    multi-region configuration to new regions.\n- When`hostNetwork`is enabled, make sure worker nodes can perform reverse    DNS lookup. Apigee cassandra uses both forward and reverse DNS lookup to obtain the host   IP while starting. **Tip:** If the DNS resolution is not working, try this workaround.Add a static host entry in `/etc/hosts` file of each cassandra worker node    similar to the following:```\necho -e \"\\\\n127.0.1.1 ${HOSTNAME}\" >> \"/etc/hosts\"\n```or```\n\"\\\\nWORKER-NODE-IP ${HOSTNAME}\" >> \"/etc/hosts\"\n```\n- Open Cassandra ports 7000 and 7001 between Kubernetes clusters across all regions to    enable worker nodes across regions and datacenters to communicate. See [Configure ports](/apigee/docs/hybrid/v1.6/ports) .\nFor detailed information, see [Kubernetes](https://kubernetes.io) documentation.\n **NOTE:** Apigee recommends that you ensure that your servers'  times are synchronized.Several features such as expiration and token revocation   rely on accurate system times. If you host the runtime components in different datacenters,   then be sure that the system times are synchronized.You can use a tool such as `ntpdate` to verify that server   times are synchronized.Before configuring hybrid for multiple regions, you must complete the following prerequisites:- Follow the [hybrid installation  guide](/apigee/docs/hybrid/v1.6/precog-overview) for any prerequisites like Google Cloud and org configuration   before moving to cluster setup steps.\n- Cassandra Multi Region requirements:- If the pod network namespace does not have connectivity between clusters (the clusters    are running in \"island network mode\", the default case in OpenShift installations), enable    the Kubernetes`hostNetwork`feature by setting`cassandra.hostNetwork: true`in the overrides file for all of the regions in    your Apigee hybrid multi-regions installation.For information on the Kubernetes `hostNetwork` feature, see [Host   namespaces](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces) in the Kubernetes documentation.\n- Enable`hostNetwork`on existing clusters before expanding your    multi-region configuration to new regions.\n- When`hostNetwork`is enabled, make sure worker nodes can perform reverse    DNS lookup. Apigee cassandra uses both forward and reverse DNS lookup to obtain the host   IP while starting. **Tip:** If the DNS resolution is not working, try this workaround.Add a static host entry in `/etc/hosts` file of each cassandra worker node    similar to the following:```\necho -e \"\\\\n127.0.1.1 ${HOSTNAME}\" >> \"/etc/hosts\"\n```or```\n\"\\\\nWORKER-NODE-IP ${HOSTNAME}\" >> \"/etc/hosts\"\n```\n- Open Cassandra ports 7000 and 7001 between Kubernetes clusters across all regions to    enable worker nodes across regions and datacenters to communicate. See [Configure ports](/apigee/docs/hybrid/v1.6/ports) .\nFor detailed information, see [Kubernetes](https://kubernetes.io) documentation.\n **NOTE:** Apigee recommends that you ensure that your servers'  times are synchronized.Several features such as expiration and token revocation   rely on accurate system times. If you host the runtime components in different datacenters,   then be sure that the system times are synchronized.You can use a tool such as `ntpdate` to verify that server   times are synchronized.\n## \n Configure Apigee hybrid for multi-region\n**Important:** When expanding Apigee hybrid to  a new regional datacenter, be sure to install the same version of hybrid as you have in your existing  datacenter. Avoid running different versions of hybrid in multiple datacenters.\n### Configure the multi-region seed hostThis section describes how to expand the existing Cassandra cluster to a new region.  This setup allows the new region to bootstrap the cluster and join the existing  data center. Without this configuration, the multi-region Kubernetes clusters  would not know about each other.- Set the kubectl context to the original cluster before retrieving the seed name:```\nkubectl config use-context original-cluster-name\n```\n- Run the following [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) command to identify a seed host address for Cassandra in   the current region.A allows a new regional instance to find the   original cluster on the very first startup to learn the topology of the cluster.   The seed host address is designated as the contact point in the cluster.```\nkubectl get pods -o wide -n apigee\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0READY \u00a0 STATUS \u00a0 \u00a0 \u00a0RESTARTS \u00a0 AGE \u00a0 IP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0NODE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0NOMINATED NODEapigee-cassandra-default-0 \u00a0 \u00a0 \u00a0 \u00a01/1 \u00a0 \u00a0 Running \u00a0 \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a05d \u00a0 \u00a010.0.0.11 \u00a0 gke-k8s-dc-2-default-pool-a2206492-p55dapigee-cassandra-default-1 \u00a0 \u00a0 \u00a0 \u00a01/1 \u00a0 \u00a0 Running \u00a0 \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a05d \u00a0 \u00a010.0.2.4 \u00a0 \u00a0gke-k8s-dc-2-default-pool-e9daaab3-tjmzapigee-cassandra-default-2 \u00a0 \u00a0 \u00a0 \u00a01/1 \u00a0 \u00a0 Running \u00a0 \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a05d \u00a0 \u00a010.0.3.5 \u00a0 \u00a0gke-k8s-dc-2-default-pool-e589awq3-kjch\n```\n- Decide which of the IPs returned from the previous command will be the multi-region seed   host.\n- In data center 2, configure`cassandra.multiRegionSeedHost`and`cassandra.datacenter`in [Manage runtime plane components](/apigee/docs/hybrid/v1.6/customize-services) , where`multiRegionSeedHost`is one of the IPs returned by the   previous command:```\ncassandra:\u00a0 multiRegionSeedHost: seed_host_IP\u00a0 datacenter: data_center_name\u00a0 rack: rack_name\u00a0 hostNetwork: false\n```For example:```\ncassandra:\u00a0 multiRegionSeedHost: 10.0.0.11\u00a0 datacenter: \"dc-2\"\u00a0 rack: \"ra-1\"\u00a0 hostNetwork: false\n```\n- In the new data center/region, before you install hybrid, set the same TLS certificates and   credentials in`overrides_` `` `.yaml`as you set in the first region.NOTE: Be sure to use the same Cassandra TLS certificates and credentials   in the second data center as you provided in the original data center. The credentials you   set in the overrides file in the first data center must match the ones you specify in the   overrides file in the second data center. For details see [Configuring TLS for Cassandra](/apigee/docs/hybrid/v1.6/cassandra-tls) .\n### Set up the new regionAfter you configure the seed host, you can set up the new region.\n **To set up the new region:** - Copy your certificate from the existing cluster to the new cluster. The new CA root is    used by Cassandra and other hybrid components for mTLS. Therefore, it is essential to have    consistent certificates across the cluster.- Set the context to the original namespace:```\nkubectl config use-context original-cluster-name\n```\n- Export the current namespace configuration to a file:```\nkubectl get namespace namespace -o yaml > apigee-namespace.yaml\n```\n- Export the`apigee-ca`secret to a file:```\nkubectl -n cert-manager get secret apigee-ca -o yaml > apigee-ca.yaml\n```\n- Set the context to the new region's cluster name:```\nkubectl config use-context new-cluster-name\n```\n- Import the namespace configuration to the new cluster. Be sure to update the     \"namespace\" in the file if you're using a different namespace     in the new region:```\nkubectl apply -f apigee-namespace.yaml\n```\n- Import the secret to the new cluster:```\nkubectl -n cert-manager apply -f apigee-ca.yaml\n```\n- Install hybrid in the new region. Be sure that the`overrides_` `` `.yaml`file includes the same TLS certificates that are configured in the first region, as    explained in the previous section.Execute the following two commands to install hybrid in the new region: **Important:** When expanding Apigee hybrid to  a new regional datacenter, be sure to install the same version of hybrid as you have in your existing  datacenter. Avoid running different versions of hybrid in multiple datacenters.```\napigeectl init -f overrides_your_cluster_name.yaml\n``````\napigeectl apply -f overrides_your_cluster_name.yaml\n```\n- Verify the hybrid installation is successful by running the following command:```\napigeectl check-ready -f overrides_your_cluster_name.yaml\n```\n- Verify the Cassandra cluster setup by running the following command. The output should    show both the existing and new data centers. **Warning: ** If the output of this command does not show both the    existing and new data centers, the setup failed. In this case, **do not proceed\n    further** .To fix the problem, the hybrid installation on the new region must be    deleted and recreated. See [Uninstall hybrid runtime](https://cloud.google.com/apigee/docs/hybrid/v1.6/uninstall) . If     the setup fails, do not attempt to proceed further or attempt to join the cluster.```\nkubectl exec apigee-cassandra-default-0 -n apigee \\\n -- nodetool -u JMX_user -pw JMX_password status\n```Example showing a successful setup:```\nDatacenter: dc-1====================Status=Up/Down|/ State=Normal/Leaving/Joining/Moving-- \u00a0Address \u00a0 \u00a0 \u00a0 \u00a0Load \u00a0 \u00a0 \u00a0 Tokens \u00a0Owns \u00a0Host ID \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RackUN \u00a010.132.87.93 \u00a0 68.07 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 fb51465c-167a-42f7-98c9-b6eba1de34de \u00a0cUN \u00a010.132.84.94 \u00a0 69.9 GiB \u00a0 256 \u00a0 \u00a0 ? \u00a0 \u00a0 f621a5ac-e7ee-48a9-9a14-73d69477c642 \u00a0bUN \u00a010.132.84.105 \u00a076.95 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 0561086f-e95b-4232-ba6c-ad519ff30336 \u00a0dDatacenter: dc-2====================Status=Up/Down|/ State=Normal/Leaving/Joining/Moving-- \u00a0Address \u00a0 \u00a0 \u00a0 \u00a0Load \u00a0 \u00a0 \u00a0 Tokens \u00a0Owns \u00a0Host ID \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RackUN \u00a010.132.0.8 \u00a0 \u00a0 71.61 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 8894a98b-8406-45de-99e2-f404ab10b5d6 \u00a0cUN \u00a010.132.9.204 \u00a0 75.1 GiB \u00a0 256 \u00a0 \u00a0 ? \u00a0 \u00a0 afa0ffa3-630b-4f1e-b46f-fc3df988092e \u00a0aUN \u00a010.132.3.133 \u00a0 68.08 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 25ae39ab-b39e-4d4f-9cb7-de095ab873db \u00a0b\n```\n- Set up Cassandra on all the pods in the new data centers.- Get`apigeeorg`from the cluster with the following command:```\nkubectl get apigeeorg -n apigee -o json | jq .items[].metadata.name\n```For example:```\nEx: kubectl get apigeeorg -n apigee -o json | jq .items[].metadata.name\n\"rg-hybrid-b7d3b9c\"\n```\n- Create a cassandra data replication custom resource (`YAML`) file. The    file can have any name. In the following examples the file will have the name`datareplication.yaml`.The file must contain the following:```\napiVersion: apigee.cloud.google.com/v1alpha1\nkind: CassandraDataReplication\nmetadata:\n name: REGION_EXPANSION\n namespace: NAMESPACE\nspec:\n organizationRef: APIGEEORG_VALUE\n force: false\n source:\n region: SOURCE_REGION\n```Where:- is the name you are giving this metadata. You can     use any name.\n- is the same namespace that is provided in`overrides.yaml`. This is usually \"`apigee`\".\n- is the value output from the`kubectl get apigeeorg -n apigee -o json | jq .items[].metadata.name`command in the previous step. For example,`rg-hybrid-b7d3b9c`\n- is the datacenter name in the source region. This is     the value set for`cassandra:datacenter:`in your`overrides.yaml`.\nFor example:```\napiVersion: apigee.cloud.google.com/v1alpha1kind: CassandraDataReplicationmetadata:\u00a0 name: region-expansion\u00a0 namespace: apigeespec:\u00a0 organizationRef: rg-hybrid-b7d3b9c\u00a0 force: false\u00a0 source:\u00a0 \u00a0 region: \"dc-1\"\n```\n- Apply the`CassandraDataReplication`with the following command:```\nkubectl apply -f datareplication.yaml\n```\n- Verify the rebuild status using the following command. **Note: ** The rebuild operation can take up to several hours     depending on the data size.```\nkubectl -n apigee get apigeeds -o json | jq .items[].status.cassandraDataReplication\n```The results should look something like:```\n{\u00a0 \"rebuildDetails\": {\u00a0 \u00a0 \"apigee-cassandra-default-0\": {\u00a0 \u00a0 \u00a0 \"state\": \"complete\",\u00a0 \u00a0 \u00a0 \"updated\": 1623105760\u00a0 \u00a0 },\u00a0 \u00a0 \"apigee-cassandra-default-1\": {\u00a0 \u00a0 \u00a0 \"state\": \"complete\",\u00a0 \u00a0 \u00a0 \"updated\": 1623105765\u00a0 \u00a0 },\u00a0 \u00a0 \"apigee-cassandra-default-2\": {\u00a0 \u00a0 \u00a0 \"state\": \"complete\",\u00a0 \u00a0 \u00a0 \"updated\": 1623105770\u00a0 \u00a0 }\u00a0 },\u00a0 \"state\": \"complete\",\u00a0 \"updated\": 1623105770}\n```\n- Verify the rebuild processes from the logs. Also, verify the data size   using the`nodetool status`command:```\nkubectl logs apigee-cassandra-default-0 -f -n apigee\n``````\nkubectl exec apigee-cassandra-default-0 -n apigee -- nodetool -u JMX_user -pw JMX_password status\n```The following example shows example log entries:```\nINFO \u00a001:42:24 rebuild from dc: dc-1, (All keyspaces), (All tokens)INFO \u00a001:42:24 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Executing streaming plan for RebuildINFO \u00a001:42:24 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.1.45INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.1.45INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.4.36INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 1 files(0.432KiB), sending 0 files(0.000KiB)INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.1.45 is completeINFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.4.36INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.5.22INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 1 files(0.693KiB), sending 0 files(0.000KiB)INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.4.36 is completeINFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.5.22INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 3 files(0.720KiB), sending 0 files(0.000KiB)INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.5.22 is completeINFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] All sessions completed\n```\n- Update the seed hosts. Remove`multiRegionSeedHost: 10.0.0.11`from`overrides-` `` `.yaml`and reapply.Seed hosts are local cluster members. To boot up a    new region an external seed host is required. Once a region boots up you need    to change the seed hosts back to their local clusters in`overrides.yaml`and then    reapply the configuration.```\napigeectl apply -f overrides/overrides-DC_name.yaml\n```\n### Check the Cassandra cluster statusThe following command is useful to see if the cluster setup is successful in two  data centers. The command checks the nodetool status for the two regions.\n```\nkubectl exec apigee-cassandra-default-0 -n apigee -- nodetool -u JMX_user -pw JMX_password status\nDatacenter: dc-1\n=================\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n-- Address  Load  Tokens  Owns (effective) Host ID        Rack\nUN 10.12.1.45 112.09 KiB 256   100.0%   3c98c816-3f4d-48f0-9717-03d0c998637f ra-1\nUN 10.12.4.36 95.27 KiB 256   100.0%   0a36383d-1d9e-41e2-924c-7b62be12d6cc ra-1\nUN 10.12.5.22 88.7 KiB 256   100.0%   3561f4fa-af3d-4ea4-93b2-79ac7e938201 ra-1\nDatacenter: dc-2\n================\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n-- Address  Load  Tokens  Owns (effective) Host ID        Rack\nUN 10.0.4.33 78.69 KiB 256   0.0%    a200217d-260b-45cd-b83c-182b27ff4c99 ra-1\nUN 10.0.0.21 78.68 KiB 256   0.0%    9f3364b9-a7a1-409c-9356-b7d1d312e52b ra-1\nUN 10.0.1.26 15.46 KiB 256   0.0%    1666df0f-702e-4c5b-8b6e-086d0f2e47fa ra-1\n``` **Important:** When expanding Apigee hybrid to  a new regional datacenter, be sure to install the same version of hybrid as you have in your existing  datacenter. Avoid running different versions of hybrid in multiple datacenters.\n### Configure the multi-region seed hostThis section describes how to expand the existing Cassandra cluster to a new region.  This setup allows the new region to bootstrap the cluster and join the existing  data center. Without this configuration, the multi-region Kubernetes clusters  would not know about each other.- In the`overrides.yaml`file for your original cluster, make sure`cassandra:hostNetwork`is set to`true`. For example:```\ncassandra:\u00a0 hostNetwork: true\n```\n- Set the kubectl context to the original cluster before retrieving the seed name:```\nkubectl config use-context original-cluster-name\n```\n- Run the following [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) command to identify a seed host address for Cassandra in   the current region.A allows a new regional instance to find the   original cluster on the very first startup to learn the topology of the cluster.   The seed host address is designated as the contact point in the cluster.```\nkubectl get pods -o wide -n apigee\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0READY \u00a0 STATUS \u00a0 \u00a0 \u00a0RESTARTS \u00a0 AGE \u00a0 IP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0NODE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0NOMINATED NODEapigee-cassandra-default-0 \u00a0 \u00a0 \u00a0 \u00a01/1 \u00a0 \u00a0 Running \u00a0 \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a05d \u00a0 \u00a010.0.0.11 \u00a0 gke-k8s-dc-2-default-pool-a2206492-p55dapigee-cassandra-default-1 \u00a0 \u00a0 \u00a0 \u00a01/1 \u00a0 \u00a0 Running \u00a0 \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a05d \u00a0 \u00a010.0.2.4 \u00a0 \u00a0gke-k8s-dc-2-default-pool-e9daaab3-tjmzapigee-cassandra-default-2 \u00a0 \u00a0 \u00a0 \u00a01/1 \u00a0 \u00a0 Running \u00a0 \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a05d \u00a0 \u00a010.0.3.5 \u00a0 \u00a0gke-k8s-dc-2-default-pool-e589awq3-kjch\n```\n- Decide which of the IPs returned from the previous command will be the multi-region seed   host.\n- In data center 2, configure`cassandra.multiRegionSeedHost`in your overrides file, where`multiRegionSeedHost`is one   of the IPs returned by the previous command:```\ncassandra:\u00a0 hostNetwork: true\u00a0 multiRegionSeedHost: seed_host_IP\u00a0 datacenter: data_center_name\n```For example:```\ncassandra:\u00a0 hostNetwork: true\u00a0 multiRegionSeedHost: 10.0.0.11\u00a0 datacenter: \"dc-2\"\n```\n- In the new data center/region, before you install hybrid, set the same TLS certificates and   credentials in`overrides_` `` `.yaml`as you set in the first region.NOTE: Be sure to use the same Cassandra TLS certificates and credentials   in the second data center as you provided in the original data center. The credentials you   set in the overrides file in the first data center must match the ones you specify in the   overrides file in the second data center. For details see [Configuring TLS for Cassandra](/apigee/docs/hybrid/v1.6/cassandra-tls) .\n### Set up the new regionAfter you configure the seed host, you can set up the new region.\n **To set up the new region:** - Copy your certificate from the existing cluster to the new cluster. The new CA root is    used by Cassandra and other hybrid components for mTLS. Therefore, it is essential to have    consistent certificates across the cluster.- Set the context to the original namespace:```\nkubectl config use-context original-cluster-name\n```\n- Export the current namespace configuration to a file:```\nkubectl get namespace namespace -o yaml > apigee-namespace.yaml\n```\n- Export the`apigee-ca`secret to a file:```\nkubectl -n cert-manager get secret apigee-ca -o yaml > apigee-ca.yaml\n```\n- Set the context to the new region's cluster name:```\nkubectl config use-context new-cluster-name\n```\n- Import the namespace configuration to the new cluster. Be sure to update the     \"namespace\" in the file if you're using a different namespace     in the new region:```\nkubectl apply -f apigee-namespace.yaml\n```\n- Import the secret to the new cluster:```\nkubectl -n cert-manager apply -f apigee-ca.yaml\n```\n- Install hybrid in the new region. Be sure that the`overrides_` `` `.yaml`file includes the same TLS certificates that are configured in the first region, as    explained in the previous section.Execute the following two commands to install hybrid in the new region: **Important:** When expanding Apigee hybrid to  a new regional datacenter, be sure to install the same version of hybrid as you have in your existing  datacenter. Avoid running different versions of hybrid in multiple datacenters.```\napigeectl init -f overrides_your_cluster_name.yaml\n``````\napigeectl apply -f overrides_your_cluster_name.yaml\n```\n- Verify the hybrid installation is successful by running the following command:```\napigeectl check-ready -f overrides_your_cluster_name.yaml\n```\n- Verify the Cassandra cluster setup by running the following command. The output should    show both the existing and new data centers. **Warning: ** If the output of this command does not show both the    existing and new data centers, the setup failed. In this case, **do not proceed\n    further** .To fix the problem, the hybrid installation on the new region must be    deleted and recreated. See [Uninstall hybrid runtime](https://cloud.google.com/apigee/docs/hybrid/v1.6/uninstall) . If     the setup fails, do not attempt to proceed further or attempt to join the cluster.```\nkubectl exec apigee-cassandra-default-0 -n apigee \\\n -- nodetool -u JMX_user -pw JMX_password status\n```Example showing a successful setup:```\nDatacenter: dc-1====================Status=Up/Down|/ State=Normal/Leaving/Joining/Moving-- \u00a0Address \u00a0 \u00a0 \u00a0 \u00a0Load \u00a0 \u00a0 \u00a0 Tokens \u00a0Owns \u00a0Host ID \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RackUN \u00a010.132.87.93 \u00a0 68.07 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 fb51465c-167a-42f7-98c9-b6eba1de34de \u00a0cUN \u00a010.132.84.94 \u00a0 69.9 GiB \u00a0 256 \u00a0 \u00a0 ? \u00a0 \u00a0 f621a5ac-e7ee-48a9-9a14-73d69477c642 \u00a0bUN \u00a010.132.84.105 \u00a076.95 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 0561086f-e95b-4232-ba6c-ad519ff30336 \u00a0dDatacenter: dc-2====================Status=Up/Down|/ State=Normal/Leaving/Joining/Moving-- \u00a0Address \u00a0 \u00a0 \u00a0 \u00a0Load \u00a0 \u00a0 \u00a0 Tokens \u00a0Owns \u00a0Host ID \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RackUN \u00a010.132.0.8 \u00a0 \u00a0 71.61 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 8894a98b-8406-45de-99e2-f404ab10b5d6 \u00a0cUN \u00a010.132.9.204 \u00a0 75.1 GiB \u00a0 256 \u00a0 \u00a0 ? \u00a0 \u00a0 afa0ffa3-630b-4f1e-b46f-fc3df988092e \u00a0aUN \u00a010.132.3.133 \u00a0 68.08 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 25ae39ab-b39e-4d4f-9cb7-de095ab873db \u00a0b\n```\n- Set up Cassandra on all the pods in the new data centers.- Get`apigeeorg`from the cluster with the following command:```\nkubectl get apigeeorg -n apigee -o json | jq .items[].metadata.name\n```For example:```\nEx: kubectl get apigeeorg -n apigee -o json | jq .items[].metadata.name\n\"rg-hybrid-b7d3b9c\"\n```\n- Create a cassandra data replication custom resource (`YAML`) file. The    file can have any name. In the following examples the file will have the name`datareplication.yaml`.The file must contain the following:```\napiVersion: apigee.cloud.google.com/v1alpha1\nkind: CassandraDataReplication\nmetadata:\n name: REGION_EXPANSION\n namespace: NAMESPACE\nspec:\n organizationRef: APIGEEORG_VALUE\n force: false\n source:\n region: SOURCE_REGION\n```Where:- is the name you are giving this metadata. You can     use any name.\n- is the same namespace that is provided in`overrides.yaml`. This is usually \"`apigee`\".\n- is the value output from the`kubectl get apigeeorg -n apigee -o json | jq .items[].metadata.name`command in the previous step. For example,`rg-hybrid-b7d3b9c`\n- is the datacenter name in the source region. This is     the value set for`cassandra:datacenter:`in your`overrides.yaml`.\nFor example:```\napiVersion: apigee.cloud.google.com/v1alpha1kind: CassandraDataReplicationmetadata:\u00a0 name: region-expansion\u00a0 namespace: apigeespec:\u00a0 organizationRef: rg-hybrid-b7d3b9c\u00a0 force: false\u00a0 source:\u00a0 \u00a0 region: \"dc-1\"\n```\n- Apply the`CassandraDataReplication`with the following command:```\nkubectl apply -f datareplication.yaml\n```\n- Verify the rebuild status using the following command. **Note: ** The rebuild operation can take up to several hours     depending on the data size.```\nkubectl -n apigee get apigeeds -o json | jq .items[].status.cassandraDataReplication\n```The results should look something like:```\n{\u00a0 \"rebuildDetails\": {\u00a0 \u00a0 \"apigee-cassandra-default-0\": {\u00a0 \u00a0 \u00a0 \"state\": \"complete\",\u00a0 \u00a0 \u00a0 \"updated\": 1623105760\u00a0 \u00a0 },\u00a0 \u00a0 \"apigee-cassandra-default-1\": {\u00a0 \u00a0 \u00a0 \"state\": \"complete\",\u00a0 \u00a0 \u00a0 \"updated\": 1623105765\u00a0 \u00a0 },\u00a0 \u00a0 \"apigee-cassandra-default-2\": {\u00a0 \u00a0 \u00a0 \"state\": \"complete\",\u00a0 \u00a0 \u00a0 \"updated\": 1623105770\u00a0 \u00a0 }\u00a0 },\u00a0 \"state\": \"complete\",\u00a0 \"updated\": 1623105770}\n```\n- Verify the rebuild processes from the logs. Also, verify the data size   using the`nodetool status`command:```\nkubectl logs apigee-cassandra-default-0 -f -n apigee\n``````\nkubectl exec apigee-cassandra-default-0 -n apigee -- nodetool -u JMX_user -pw JMX_password status\n```The following example shows example log entries:```\nINFO \u00a001:42:24 rebuild from dc: dc-1, (All keyspaces), (All tokens)INFO \u00a001:42:24 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Executing streaming plan for RebuildINFO \u00a001:42:24 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.1.45INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.1.45INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.4.36INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 1 files(0.432KiB), sending 0 files(0.000KiB)INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.1.45 is completeINFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.4.36INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.5.22INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 1 files(0.693KiB), sending 0 files(0.000KiB)INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.4.36 is completeINFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.5.22INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 3 files(0.720KiB), sending 0 files(0.000KiB)INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.5.22 is completeINFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] All sessions completed\n```\n- Update the seed hosts. Remove`multiRegionSeedHost: 10.0.0.11`from`overrides-` `` `.yaml`and reapply.Seed hosts are local cluster members. To boot up a    new region an external seed host is required. Once a region boots up you need    to change the seed hosts back to their local clusters in`overrides.yaml`and then    reapply the configuration.```\napigeectl apply -f overrides/overrides-DC_name.yaml\n```\n### Check the Cassandra cluster statusThe following command is useful to see if the cluster setup is successful in two  data centers. The command checks the nodetool status for the two regions.\n```\nkubectl exec apigee-cassandra-default-0 -n apigee -- nodetool -u JMX_user -pw JMX_password status\nDatacenter: dc-1\n=================\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n-- Address  Load  Tokens  Owns (effective) Host ID        Rack\nUN 10.12.1.45 112.09 KiB 256   100.0%   3c98c816-3f4d-48f0-9717-03d0c998637f ra-1\nUN 10.12.4.36 95.27 KiB 256   100.0%   0a36383d-1d9e-41e2-924c-7b62be12d6cc ra-1\nUN 10.12.5.22 88.7 KiB 256   100.0%   3561f4fa-af3d-4ea4-93b2-79ac7e938201 ra-1\nDatacenter: dc-2\n================\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n-- Address  Load  Tokens  Owns (effective) Host ID        Rack\nUN 10.0.4.33 78.69 KiB 256   0.0%    a200217d-260b-45cd-b83c-182b27ff4c99 ra-1\nUN 10.0.0.21 78.68 KiB 256   0.0%    9f3364b9-a7a1-409c-9356-b7d1d312e52b ra-1\nUN 10.0.1.26 15.46 KiB 256   0.0%    1666df0f-702e-4c5b-8b6e-086d0f2e47fa ra-1\n``` **Important:** When expanding Apigee hybrid to  a new regional datacenter, be sure to install the same version of hybrid as you have in your existing  datacenter. Avoid running different versions of hybrid in multiple datacenters.\n### \n Create a virtual network in each region\nFollow the Azure recommendations for establishing cross-region communication here: [VNet-to-VNet: Connecting Virtual Networks in Azure across Different Regions](https://azure.microsoft.com/en-us/blog/vnet-to-vnet-connecting-virtual-networks-in-azure-across-different-regions/) .\n### \n Create multi-regional clusters\nSet up Kubernetes clusters in multiple regions with different blocks. See also [Step 1: Create a cluster](/apigee/docs/hybrid/v1.6/install-create-cluster) . Use the locations and virtual network names you created previously.\nOpen Cassandra ports 7000 and 7001 between Kubernetes clusters across all regions (7000  may be used as a backup option during troubleshooting)\n### Configure the multi-region seed hostThis section describes how to expand the existing Cassandra cluster to a new region.  This setup allows the new region to bootstrap the cluster and join the existing  data center. Without this configuration, the multi-region Kubernetes clusters  would not know about each other.- In the`overrides.yaml`file for your original cluster, make sure`cassandra:hostNetwork`is set to`true`. For example:```\ncassandra:\u00a0 hostNetwork: true\n```\n- Set the kubectl context to the original cluster before retrieving the seed name:```\nkubectl config use-context original-cluster-name\n```\n- Run the following [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) command to identify a seed host address for Cassandra in   the current region.A allows a new regional instance to find the   original cluster on the very first startup to learn the topology of the cluster.   The seed host address is designated as the contact point in the cluster.```\nkubectl get pods -o wide -n apigee | grep apigee-cassandra\n``````\napigee-cassandra-default-0 \u00a01/1 \u00a0 Running \u00a0 0 \u00a0 4d17h \u00a0 120.38.1.9 \u00a0aks-agentpool-21207753-vmss000000\n```\n- Decide which of the IPs returned from the previous command will be the multi-region seed   host. In this example, where only a single node cassandra cluster is running, the seed host   is`120.38.1.9`.\n- In data center 2, copy your overrides file to a new file whose name includes the cluster  name. For example,`overrides_` `` `.yaml`.\n- In data center 2, configure`cassandra.multiRegionSeedHost`and`cassandra.datacenter`in`overrides_` `` `.yaml`, where`multiRegionSeedHost`is one of the IPs returned by the  previous command:```\ncassandra:\u00a0 \u00a0 \u00a0multiRegionSeedHost: seed_host_IP\u00a0 \u00a0 \u00a0datacenter: data_center_name\u00a0 \u00a0 \u00a0rack: rack_name\u00a0 \u00a0 \u00a0hostNetwork: true\n```For example:```\ncassandra:\u00a0 multiRegionSeedHost: 120.38.1.9\u00a0 datacenter: \"dc-2\"\u00a0 rack: \"ra-1\"\u00a0 hostNetwork: true\n```\n- In the new data center/region, before you install hybrid, set the same TLS certificates and   credentials in`overrides_` `` `.yaml`as you set in the first region.NOTE: Be sure to use the same Cassandra TLS certificates and credentials   in the second data center as you provided in the original data center. The credentials you   set in the overrides file in the first data center must match the ones you specify in the   overrides file in the second data center. For details see [Configuring TLS for Cassandra](/apigee/docs/hybrid/v1.6/cassandra-tls) .\n### Set up the new regionAfter you configure the seed host, you can set up the new region.\n **To set up the new region:** - Copy your certificate from the existing cluster to the new cluster. The new CA root is    used by Cassandra and other hybrid components for mTLS. Therefore, it is essential to have    consistent certificates across the cluster.- Set the context to the original namespace:```\nkubectl config use-context original-cluster-name\n```\n- Export the current namespace configuration to a file:```\nkubectl get namespace namespace -o yaml > apigee-namespace.yaml\n```\n- Export the`apigee-ca`secret to a file:```\nkubectl -n cert-manager get secret apigee-ca -o yaml > apigee-ca.yaml\n```\n- Set the context to the new region's cluster name:```\nkubectl config use-context new-cluster-name\n```\n- Import the namespace configuration to the new cluster. Be sure to update the     \"namespace\" in the file if you're using a different namespace     in the new region:```\nkubectl apply -f apigee-namespace.yaml\n```\n- Import the secret to the new cluster:```\nkubectl -n cert-manager apply -f apigee-ca.yaml\n```\n- Install hybrid in the new region. Be sure that the`overrides_` `` `.yaml`file includes the same TLS certificates that are configured in the first region, as    explained in the previous section.Execute the following two commands to install hybrid in the new region: **Important:** When expanding Apigee hybrid to  a new regional datacenter, be sure to install the same version of hybrid as you have in your existing  datacenter. Avoid running different versions of hybrid in multiple datacenters.```\napigeectl init -f overrides_your_cluster_name.yaml\n``````\napigeectl apply -f overrides_your_cluster_name.yaml\n```\n- Verify the hybrid installation is successful by running the following command:```\napigeectl check-ready -f overrides_your_cluster_name.yaml\n```\n- Verify the Cassandra cluster setup by running the following command. The output should    show both the existing and new data centers. **Warning: ** If the output of this command does not show both the    existing and new data centers, the setup failed. In this case, **do not proceed\n    further** .To fix the problem, the hybrid installation on the new region must be    deleted and recreated. See [Uninstall hybrid runtime](https://cloud.google.com/apigee/docs/hybrid/v1.6/uninstall) . If     the setup fails, do not attempt to proceed further or attempt to join the cluster.```\nkubectl exec apigee-cassandra-default-0 -n apigee \\\n -- nodetool -u JMX_user -pw JMX_password status\n```Example showing a successful setup:```\nDatacenter: dc-1====================Status=Up/Down|/ State=Normal/Leaving/Joining/Moving-- \u00a0Address \u00a0 \u00a0 \u00a0 \u00a0Load \u00a0 \u00a0 \u00a0 Tokens \u00a0Owns \u00a0Host ID \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RackUN \u00a010.132.87.93 \u00a0 68.07 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 fb51465c-167a-42f7-98c9-b6eba1de34de \u00a0cUN \u00a010.132.84.94 \u00a0 69.9 GiB \u00a0 256 \u00a0 \u00a0 ? \u00a0 \u00a0 f621a5ac-e7ee-48a9-9a14-73d69477c642 \u00a0bUN \u00a010.132.84.105 \u00a076.95 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 0561086f-e95b-4232-ba6c-ad519ff30336 \u00a0dDatacenter: dc-2====================Status=Up/Down|/ State=Normal/Leaving/Joining/Moving-- \u00a0Address \u00a0 \u00a0 \u00a0 \u00a0Load \u00a0 \u00a0 \u00a0 Tokens \u00a0Owns \u00a0Host ID \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RackUN \u00a010.132.0.8 \u00a0 \u00a0 71.61 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 8894a98b-8406-45de-99e2-f404ab10b5d6 \u00a0cUN \u00a010.132.9.204 \u00a0 75.1 GiB \u00a0 256 \u00a0 \u00a0 ? \u00a0 \u00a0 afa0ffa3-630b-4f1e-b46f-fc3df988092e \u00a0aUN \u00a010.132.3.133 \u00a0 68.08 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 25ae39ab-b39e-4d4f-9cb7-de095ab873db \u00a0b\n```\n- Set up Cassandra on all the pods in the new data centers.- Get`apigeeorg`from the cluster with the following command:```\nkubectl get apigeeorg -n apigee -o json | jq .items[].metadata.name\n```For example:```\nEx: kubectl get apigeeorg -n apigee -o json | jq .items[].metadata.name\n\"rg-hybrid-b7d3b9c\"\n```\n- Create a cassandra data replication custom resource (`YAML`) file. The    file can have any name. In the following examples the file will have the name`datareplication.yaml`.The file must contain the following:```\napiVersion: apigee.cloud.google.com/v1alpha1\nkind: CassandraDataReplication\nmetadata:\n name: REGION_EXPANSION\n namespace: NAMESPACE\nspec:\n organizationRef: APIGEEORG_VALUE\n force: false\n source:\n region: SOURCE_REGION\n```Where:- is the name you are giving this metadata. You can     use any name.\n- is the same namespace that is provided in`overrides.yaml`. This is usually \"`apigee`\".\n- is the value output from the`kubectl get apigeeorg -n apigee -o json | jq .items[].metadata.name`command in the previous step. For example,`rg-hybrid-b7d3b9c`\n- is the datacenter name in the source region. This is     the value set for`cassandra:datacenter:`in your`overrides.yaml`.\nFor example:```\napiVersion: apigee.cloud.google.com/v1alpha1kind: CassandraDataReplicationmetadata:\u00a0 name: region-expansion\u00a0 namespace: apigeespec:\u00a0 organizationRef: rg-hybrid-b7d3b9c\u00a0 force: false\u00a0 source:\u00a0 \u00a0 region: \"dc-1\"\n```\n- Apply the`CassandraDataReplication`with the following command:```\nkubectl apply -f datareplication.yaml\n```\n- Verify the rebuild status using the following command. **Note: ** The rebuild operation can take up to several hours     depending on the data size.```\nkubectl -n apigee get apigeeds -o json | jq .items[].status.cassandraDataReplication\n```The results should look something like:```\n{\u00a0 \"rebuildDetails\": {\u00a0 \u00a0 \"apigee-cassandra-default-0\": {\u00a0 \u00a0 \u00a0 \"state\": \"complete\",\u00a0 \u00a0 \u00a0 \"updated\": 1623105760\u00a0 \u00a0 },\u00a0 \u00a0 \"apigee-cassandra-default-1\": {\u00a0 \u00a0 \u00a0 \"state\": \"complete\",\u00a0 \u00a0 \u00a0 \"updated\": 1623105765\u00a0 \u00a0 },\u00a0 \u00a0 \"apigee-cassandra-default-2\": {\u00a0 \u00a0 \u00a0 \"state\": \"complete\",\u00a0 \u00a0 \u00a0 \"updated\": 1623105770\u00a0 \u00a0 }\u00a0 },\u00a0 \"state\": \"complete\",\u00a0 \"updated\": 1623105770}\n```\n- Verify the rebuild processes from the logs. Also, verify the data size   using the`nodetool status`command:```\nkubectl logs apigee-cassandra-default-0 -f -n apigee\n``````\nkubectl exec apigee-cassandra-default-0 -n apigee -- nodetool -u JMX_user -pw JMX_password status\n```The following example shows example log entries:```\nINFO \u00a001:42:24 rebuild from dc: dc-1, (All keyspaces), (All tokens)INFO \u00a001:42:24 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Executing streaming plan for RebuildINFO \u00a001:42:24 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.1.45INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.1.45INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.4.36INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 1 files(0.432KiB), sending 0 files(0.000KiB)INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.1.45 is completeINFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.4.36INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.5.22INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 1 files(0.693KiB), sending 0 files(0.000KiB)INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.4.36 is completeINFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.5.22INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 3 files(0.720KiB), sending 0 files(0.000KiB)INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.5.22 is completeINFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] All sessions completed\n```\n- Update the seed hosts. Remove`multiRegionSeedHost: 10.0.0.11`from`overrides-` `` `.yaml`and reapply.Seed hosts are local cluster members. To boot up a    new region an external seed host is required. Once a region boots up you need    to change the seed hosts back to their local clusters in`overrides.yaml`and then    reapply the configuration.```\napigeectl apply -f overrides/overrides-DC_name.yaml\n```\n### Check the Cassandra cluster statusThe following command is useful to see if the cluster setup is successful in two  data centers. The command checks the nodetool status for the two regions.\n```\nkubectl exec apigee-cassandra-default-0 -n apigee -- nodetool -u JMX_user -pw JMX_password status\nDatacenter: dc-1\n=================\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n-- Address  Load  Tokens  Owns (effective) Host ID        Rack\nUN 10.12.1.45 112.09 KiB 256   100.0%   3c98c816-3f4d-48f0-9717-03d0c998637f ra-1\nUN 10.12.4.36 95.27 KiB 256   100.0%   0a36383d-1d9e-41e2-924c-7b62be12d6cc ra-1\nUN 10.12.5.22 88.7 KiB 256   100.0%   3561f4fa-af3d-4ea4-93b2-79ac7e938201 ra-1\nDatacenter: dc-2\n================\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n-- Address  Load  Tokens  Owns (effective) Host ID        Rack\nUN 10.0.4.33 78.69 KiB 256   0.0%    a200217d-260b-45cd-b83c-182b27ff4c99 ra-1\nUN 10.0.0.21 78.68 KiB 256   0.0%    9f3364b9-a7a1-409c-9356-b7d1d312e52b ra-1\nUN 10.0.1.26 15.46 KiB 256   0.0%    1666df0f-702e-4c5b-8b6e-086d0f2e47fa ra-1\n``` **Important:** When expanding Apigee hybrid to  a new regional datacenter, be sure to install the same version of hybrid as you have in your existing  datacenter. Avoid running different versions of hybrid in multiple datacenters.\n### Configure the multi-region seed hostThis section describes how to expand the existing Cassandra cluster to a new region.  This setup allows the new region to bootstrap the cluster and join the existing  data center. Without this configuration, the multi-region Kubernetes clusters  would not know about each other.- In the`overrides.yaml`file for your original cluster, make sure`cassandra:hostNetwork`is set to`true`. For example:```\ncassandra:\u00a0 hostNetwork: true\n```\n- Set the kubectl context to the original cluster before retrieving the seed name:```\nkubectl config use-context original-cluster-name\n```\n- Run the following [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) command to identify a seed host address for Cassandra in   the current region.A allows a new regional instance to find the   original cluster on the very first startup to learn the topology of the cluster.   The seed host address is designated as the contact point in the cluster.```\nkubectl get pods -o wide -n apigee\n``````\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0READY \u00a0 STATUS \u00a0 \u00a0 \u00a0RESTARTS \u00a0 AGE \u00a0 IP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0NODE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0NOMINATED NODEapigee-cassandra-default-0 \u00a0 \u00a0 \u00a0 \u00a01/1 \u00a0 \u00a0 Running \u00a0 \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a05d \u00a0 \u00a010.0.0.11 \u00a0 gke-k8s-dc-2-default-pool-a2206492-p55dapigee-cassandra-default-1 \u00a0 \u00a0 \u00a0 \u00a01/1 \u00a0 \u00a0 Running \u00a0 \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a05d \u00a0 \u00a010.0.2.4 \u00a0 \u00a0gke-k8s-dc-2-default-pool-e9daaab3-tjmzapigee-cassandra-default-2 \u00a0 \u00a0 \u00a0 \u00a01/1 \u00a0 \u00a0 Running \u00a0 \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a05d \u00a0 \u00a010.0.3.5 \u00a0 \u00a0gke-k8s-dc-2-default-pool-e589awq3-kjch\n```\n- Select the IP address of your source Cassandra host to use as the multi-region seed host. In   this example, this is the`apigee-cassandra-default-0`cluster is running, the seed host   is`10.0.0.11`.\n- In data center 2, copy your overrides file to a new file whose name includes the cluster  name. For example,`overrides_` `` `.yaml`.\n- In data center 2, configure`cassandra.multiRegionSeedHost`and`cassandra.datacenter`in`overrides_` `` `.yaml`, where`multiRegionSeedHost`is one of the IPs returned by the  previous command:```\ncassandra:\u00a0 \u00a0 \u00a0hostNetwork: true\u00a0 \u00a0 \u00a0multiRegionSeedHost: seed_host_IP # Cassandra pod IP address from the source region.\u00a0 \u00a0 \u00a0datacenter: data_center_name\n```For example:```\ncassandra:\u00a0 hostNetwork: true\u00a0 multiRegionSeedHost: 10.0.0.11\u00a0 datacenter: \"dc-2\"\n```\n- In the new data center/region, before you install hybrid, set the same TLS certificates and   credentials in`overrides_` `` `.yaml`as you set in the first region.NOTE: Be sure to use the same Cassandra TLS certificates and credentials   in the second data center as you provided in the original data center. The credentials you   set in the overrides file in the first data center must match the ones you specify in the   overrides file in the second data center. For details see [Configuring TLS for Cassandra](/apigee/docs/hybrid/v1.6/cassandra-tls) .\n### Set up the new regionAfter you configure the seed host, you can set up the new region.\n **To set up the new region:** - Copy your certificate from the existing cluster to the new cluster. The new CA root is    used by Cassandra and other hybrid components for mTLS. Therefore, it is essential to have    consistent certificates across the cluster.- Set the context to the original namespace:```\nkubectl config use-context original-cluster-name\n```\n- Export the current namespace configuration to a file:```\nkubectl get namespace namespace -o yaml > apigee-namespace.yaml\n```\n- Export the`apigee-ca`secret to a file:```\nkubectl -n cert-manager get secret apigee-ca -o yaml > apigee-ca.yaml\n```\n- Set the context to the new region's cluster name:```\nkubectl config use-context new-cluster-name\n```\n- Import the namespace configuration to the new cluster. Be sure to update the     \"namespace\" in the file if you're using a different namespace     in the new region:```\nkubectl apply -f apigee-namespace.yaml\n```\n- Import the secret to the new cluster:```\nkubectl -n cert-manager apply -f apigee-ca.yaml\n```\n- Install hybrid in the new region. Be sure that the`overrides_` `` `.yaml`file includes the same TLS certificates that are configured in the first region, as    explained in the previous section.Execute the following two commands to install hybrid in the new region: **Important:** When expanding Apigee hybrid to  a new regional datacenter, be sure to install the same version of hybrid as you have in your existing  datacenter. Avoid running different versions of hybrid in multiple datacenters.```\napigeectl init -f overrides_your_cluster_name.yaml\n``````\napigeectl apply -f overrides_your_cluster_name.yaml\n```\n- Verify the hybrid installation is successful by running the following command:```\napigeectl check-ready -f overrides_your_cluster_name.yaml\n```\n- Verify the Cassandra cluster setup by running the following command. The output should    show both the existing and new data centers. **Warning: ** If the output of this command does not show both the    existing and new data centers, the setup failed. In this case, **do not proceed\n    further** .To fix the problem, the hybrid installation on the new region must be    deleted and recreated. See [Uninstall hybrid runtime](https://cloud.google.com/apigee/docs/hybrid/v1.6/uninstall) . If     the setup fails, do not attempt to proceed further or attempt to join the cluster.```\nkubectl exec apigee-cassandra-default-0 -n apigee \\\n -- nodetool -u JMX_user -pw JMX_password status\n```Example showing a successful setup:```\nDatacenter: dc-1====================Status=Up/Down|/ State=Normal/Leaving/Joining/Moving-- \u00a0Address \u00a0 \u00a0 \u00a0 \u00a0Load \u00a0 \u00a0 \u00a0 Tokens \u00a0Owns \u00a0Host ID \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RackUN \u00a010.132.87.93 \u00a0 68.07 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 fb51465c-167a-42f7-98c9-b6eba1de34de \u00a0cUN \u00a010.132.84.94 \u00a0 69.9 GiB \u00a0 256 \u00a0 \u00a0 ? \u00a0 \u00a0 f621a5ac-e7ee-48a9-9a14-73d69477c642 \u00a0bUN \u00a010.132.84.105 \u00a076.95 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 0561086f-e95b-4232-ba6c-ad519ff30336 \u00a0dDatacenter: dc-2====================Status=Up/Down|/ State=Normal/Leaving/Joining/Moving-- \u00a0Address \u00a0 \u00a0 \u00a0 \u00a0Load \u00a0 \u00a0 \u00a0 Tokens \u00a0Owns \u00a0Host ID \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RackUN \u00a010.132.0.8 \u00a0 \u00a0 71.61 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 8894a98b-8406-45de-99e2-f404ab10b5d6 \u00a0cUN \u00a010.132.9.204 \u00a0 75.1 GiB \u00a0 256 \u00a0 \u00a0 ? \u00a0 \u00a0 afa0ffa3-630b-4f1e-b46f-fc3df988092e \u00a0aUN \u00a010.132.3.133 \u00a0 68.08 GiB \u00a0256 \u00a0 \u00a0 ? \u00a0 \u00a0 25ae39ab-b39e-4d4f-9cb7-de095ab873db \u00a0b\n```\n- Set up Cassandra on all the pods in the new data centers.- Get`apigeeorg`from the cluster with the following command:```\nkubectl get apigeeorg -n apigee -o json | jq .items[].metadata.name\n```For example:```\nEx: kubectl get apigeeorg -n apigee -o json | jq .items[].metadata.name\n\"rg-hybrid-b7d3b9c\"\n```\n- Create a cassandra data replication custom resource (`YAML`) file. The    file can have any name. In the following examples the file will have the name`datareplication.yaml`.The file must contain the following:```\napiVersion: apigee.cloud.google.com/v1alpha1\nkind: CassandraDataReplication\nmetadata:\n name: REGION_EXPANSION\n namespace: NAMESPACE\nspec:\n organizationRef: APIGEEORG_VALUE\n force: false\n source:\n region: SOURCE_REGION\n```Where:- is the name you are giving this metadata. You can     use any name.\n- is the same namespace that is provided in`overrides.yaml`. This is usually \"`apigee`\".\n- is the value output from the`kubectl get apigeeorg -n apigee -o json | jq .items[].metadata.name`command in the previous step. For example,`rg-hybrid-b7d3b9c`\n- is the datacenter name in the source region. This is     the value set for`cassandra:datacenter:`in your`overrides.yaml`.\nFor example:```\napiVersion: apigee.cloud.google.com/v1alpha1kind: CassandraDataReplicationmetadata:\u00a0 name: region-expansion\u00a0 namespace: apigeespec:\u00a0 organizationRef: rg-hybrid-b7d3b9c\u00a0 force: false\u00a0 source:\u00a0 \u00a0 region: \"dc-1\"\n```\n- Apply the`CassandraDataReplication`with the following command:```\nkubectl apply -f datareplication.yaml\n```\n- Verify the rebuild status using the following command. **Note: ** The rebuild operation can take up to several hours     depending on the data size.```\nkubectl -n apigee get apigeeds -o json | jq .items[].status.cassandraDataReplication\n```The results should look something like:```\n{\u00a0 \"rebuildDetails\": {\u00a0 \u00a0 \"apigee-cassandra-default-0\": {\u00a0 \u00a0 \u00a0 \"state\": \"complete\",\u00a0 \u00a0 \u00a0 \"updated\": 1623105760\u00a0 \u00a0 },\u00a0 \u00a0 \"apigee-cassandra-default-1\": {\u00a0 \u00a0 \u00a0 \"state\": \"complete\",\u00a0 \u00a0 \u00a0 \"updated\": 1623105765\u00a0 \u00a0 },\u00a0 \u00a0 \"apigee-cassandra-default-2\": {\u00a0 \u00a0 \u00a0 \"state\": \"complete\",\u00a0 \u00a0 \u00a0 \"updated\": 1623105770\u00a0 \u00a0 }\u00a0 },\u00a0 \"state\": \"complete\",\u00a0 \"updated\": 1623105770}\n```\n- Verify the rebuild processes from the logs. Also, verify the data size   using the`nodetool status`command:```\nkubectl logs apigee-cassandra-default-0 -f -n apigee\n``````\nkubectl exec apigee-cassandra-default-0 -n apigee -- nodetool -u JMX_user -pw JMX_password status\n```The following example shows example log entries:```\nINFO \u00a001:42:24 rebuild from dc: dc-1, (All keyspaces), (All tokens)INFO \u00a001:42:24 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Executing streaming plan for RebuildINFO \u00a001:42:24 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.1.45INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.1.45INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.4.36INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 1 files(0.432KiB), sending 0 files(0.000KiB)INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.1.45 is completeINFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.4.36INFO \u00a001:42:25 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Starting streaming to /10.12.5.22INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 1 files(0.693KiB), sending 0 files(0.000KiB)INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.4.36 is completeINFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889, ID#0] Beginning stream session with /10.12.5.22INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889 ID#0] Prepare completed. Receiving 3 files(0.720KiB), sending 0 files(0.000KiB)INFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] Session with /10.12.5.22 is completeINFO \u00a001:42:26 [Stream #3a04e810-580d-11e9-a5aa-67071bf82889] All sessions completed\n```\n- Update the seed hosts. Remove`multiRegionSeedHost: 10.0.0.11`from`overrides-` `` `.yaml`and reapply.Seed hosts are local cluster members. To boot up a    new region an external seed host is required. Once a region boots up you need    to change the seed hosts back to their local clusters in`overrides.yaml`and then    reapply the configuration.```\napigeectl apply -f overrides/overrides-DC_name.yaml\n```\n### Check the Cassandra cluster statusThe following command is useful to see if the cluster setup is successful in two  data centers. The command checks the nodetool status for the two regions.\n```\nkubectl exec apigee-cassandra-default-0 -n apigee -- nodetool -u JMX_user -pw JMX_password status\nDatacenter: dc-1\n=================\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n-- Address  Load  Tokens  Owns (effective) Host ID        Rack\nUN 10.12.1.45 112.09 KiB 256   100.0%   3c98c816-3f4d-48f0-9717-03d0c998637f ra-1\nUN 10.12.4.36 95.27 KiB 256   100.0%   0a36383d-1d9e-41e2-924c-7b62be12d6cc ra-1\nUN 10.12.5.22 88.7 KiB 256   100.0%   3561f4fa-af3d-4ea4-93b2-79ac7e938201 ra-1\nDatacenter: dc-2\n================\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n-- Address  Load  Tokens  Owns (effective) Host ID        Rack\nUN 10.0.4.33 78.69 KiB 256   0.0%    a200217d-260b-45cd-b83c-182b27ff4c99 ra-1\nUN 10.0.0.21 78.68 KiB 256   0.0%    9f3364b9-a7a1-409c-9356-b7d1d312e52b ra-1\nUN 10.0.1.26 15.46 KiB 256   0.0%    1666df0f-702e-4c5b-8b6e-086d0f2e47fa ra-1\n```\n## Troubleshooting\nSee [Cassandra data replication failure](/apigee/docs/api-platform/troubleshoot/playbooks/cassandra/cassandra-data-replication-failure) .", "guide": "Apigee"}