{"title": "Documentation - KRM API gkebackup.gke.io/v1 API", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - KRM API gkebackup.gke.io/v1 API\n", "content": "## gkebackup.gke.io/v1\nPackage v1 contains API Schema definitions for the gkebackup.gke.io v1 API group\n### BackupAllRestoreAll\nBackupAllRestoreAll defines strategy that back up everything selected in this component, and restore all of them during restoration.\n- [Strategy](#strategy)\n| Field       | Description                                                     |\n|:-------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| backupPreHooks HookSpec array | BackupPreHooks defines a list of hooks that should be executed before backing up all selected volumes of this component. They are usually all the quiesce steps. The execution target Pods are all Pods within this component. |\n| backupPostHooks HookSpec array | BackupPostHooks defines a list of hooks that should be executed after all volumes of this component are backed up. They are usually un-quiesce steps. The execution target Pods are all Pods within this component.   |\n| volumeSelector LabelSelector | VolumeSelector defines a label selector that is used to select persistent volumes that should be backed up and restored within this component. All persistent volumes will be selected if this is not provided.    |\n### BackupJobList\nBackupJobList contains a list of BackupJob\n| Field     | Description             |\n|:----------------------|:--------------------------------------------------------------|\n| apiVersion string  | gkebackup.gke.io/v1           |\n| kind string   | BackupJobList             |\n| metadata ListMeta  | Refer to Kubernetes API documentation for fields of metadata. |\n| items BackupJob array | nan               |\n### BackupJobSpec\nBackupJobSpec defines the desired state of BackupJob.\n- [BackupJob](#backupjob)\n| Field    | Description                         |\n|:------------------|:------------------------------------------------------------------------------------------------------------|\n| backupName string | BackupName is the control plane Backup name that the BackupJob is executing against. The name is immutable. |\n### BackupJobStatus\nBackupJobStatus defines the observed state of BackupJob.\n- [BackupJob](#backupjob)\n| Field    | Description                          |\n|:---------------------|:----------------------------------------------------------------------------------------------------------------|\n| phase BackupJobPhase | Phase is the current phase of backup.                   |\n| message string  | A human-readable message indicating details about why backup is in this state.         |\n| reason string  | Reason is a brief CamelCase string that describes any update and is meant for machine parsing and tidy display. |\n### BackupOneRestoreAll\nBackupOneRestoreAll defines strategy that only back up volumes from one Pod within this component, and they will be restored to all other Pods during restoration. This strategy should be used for application that are deployed in HA config of one primary and one or more secondaries. This strategy is exclusively applicable to StatefulSet components that use \"volumeClaimTemplate\" defined to provision volumes. If a component consists of multiple Deployments: - All the deployments must have exactly one replica. - All replicas must have the same number of persistent volumes. - All persistent volume must be defined in the same order. Those volumes are defined in .spec.template.spec.volumes, non-persistent volumes will be skipped. If a component consists of multiple StatefulSets: - All the StatefulSets must have the same number of volume claim templates. - All volume claim templates must follow the same order. They are defined in .spec.volumeClaimTemplates field.\n- [Strategy](#strategy)\n| Field       | Description                                                                                                             |\n|:-------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| backupTargetName string  | BackupTargetName specifies the name of preferred Deployment or StatefulSet that will be used for backup. We will select target Pod based on how this component is composed: - Multi-Deployment: pick the only Pod created by this Deployment. - Multi-StatefulSet: pick the 1st Pod created by the target StatefulSet. - Single-StatefulSet: pick the 2nd Pod created by the target StatefulSet.                |\n| backupPreHooks HookSpec array | BackupPreHooks defines a list of hooks that should be executed before backing up all selected volumes of this component. They are usually all the quiesce steps. Hooks will be only executed on selected backup Pod.                                                           |\n| backupPostHooks HookSpec array | BackupPostHooks defines a list of hooks that should be executed after all volumes of this component are backed up. They are usually un-quiesce steps. Hooks will be only executed on selected backup Pod.                                                              |\n| volumeSelector LabelSelector | VolumeSelector defines a label selector that is used to select all persistent volumes that should be backed up within the target Pod. It is possible that selector will select volumes outside of the target Pod, but only volumes belonging to the target Pod will be backed up. And those volume backups will be restored to all other volumes selected by the selector during restoration. All persistent volumes will be selected if this is not provided. |\n### Component\nComponent defines a subset of application resources and their backup and restore strategies. An individual component can be represented either by a list of StatefulSets or Deployments.\n- [ProtectedApplicationSpec](#protectedapplicationspec)\n| Field      | Description                                                       |\n|:---------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| name string    | Name is the unique name of this component.                                               |\n| resourceKind ResourceKind | ResourceKind specifies the kind of resources included in this component. The resource kind can only be \"Deployment\" or \"StatefulSet\" or \"Pod\". The \"Pod\" ResourceKind only supports the \"BackupAllRestoreAll\" strategy at this time. |\n| resourceNames string array | ResourceNames specifies names of resources which belong to this component. It should be a list of names of either Deployments, StatefulSets, or Pods based on what is defined in ResourceKind.          |\n| strategy Strategy   | Strategy specifies details of how to back up and restore this component.                                        |\n### DumpAndLoad\nDumpAndLoad defines strategy where backup and restore of a component is achieved via application specific tools for dumping and loading data, like mysqldump for MySQL or pg_dump for PostgreSQL. Dump files should be stored into a dedicated volume. And only the dedicated volume should be selected to be backed up for this strategy. Dump target and load target could be different. This strategy is exclusively applicable to StatefulSet components that use \"volumeClaimTemplate\" defined to provision volumes.\n- [Strategy](#strategy)\n| Field       | Description                                                                                                                |\n|:-------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| dumpTarget string    | DumpTarget specifies the name of preferred Deployment or StatefulSet that will be used to dump the component data. We will select target Pod based on how this component is composed: - Deployment(s): pick the only Pod created by target Deployment. - Single-StatefulSet: pick the 2nd Pod created by target StatefulSet if replica number is greater than 2. Otherwise, pick the only Pod. - Multi-StatefulSet: pick the 1st Pod created by the target StatefulSet. |\n| loadTarget string    | LoadTarget specifies the name of preferred Deployment or StatefulSet that will be used to load the component data. We will select target Pod based on how this component is composed: - Deployment(s): pick the only Pod created by target Deployment. - StatefulSet(s): always pick the 1st Pod created by target StatefulSet.                                   |\n| dumpHooks HookSpec array  | DumpHooks defines a list of hooks that are used to dump the data of this component into dedicated volume. The execution target Pod will be one of the Pods selected from DumpTarget.                                                                     |\n| backupPostHooks HookSpec array | BackupPostHooks defines a list of hooks that should be executed after dedicate dump volume is backed up. These are usually cleanup steps.                                                                                |\n| loadHooks HookSpec array  | LoadHooks defines a list of hooks that are used to load the data of this component from dedicated volume. It may also include cleanup steps after load is completed. The execution target Pod will be one of the Pod selected from LoadTarget.                                                       |\n| volumeSelector LabelSelector | VolumeSelector defines a label selector that should select dedicated volumes that are used to dump and load the application data. Only one volume should be selected in both DumpTarget and LoadTarget.                                                                 |\n### HookFailurePolicy\n`string` HookFailurePolicy defines the behavior if hook execution runs into error.\n- [HookSpec](#hookspec)\n### HookSpec\nHookSpec defines how a hook should be executed in which container, assuming target Pod has been selected.\n- [BackupAllRestoreAll](#backupallrestoreall) - [BackupOneRestoreAll](#backuponerestoreall) - [DumpAndLoad](#dumpandload)\n| Field      | Description                                   |\n|:--------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------|\n| name string    | Name of this hook to identify the status/error of hook execution.                      |\n| container string   | Container that this hook executes on. If unspecified, it will execute on the first container of the pod.            |\n| command string array  | Command to execute. The hook command to run. E.g., [\"/sbin/fsfreeze\", \"--freeze\"].                  |\n| timeoutSeconds integer | TimeoutSeconds defines the timeout of the hook in seconds. If unspecified, the default value is 30.             |\n| onError HookFailurePolicy | OnError indicates the behavior when the hook execution runs into an error. Valid values are [Ignore, Fail] and if unspecified, the value will be Fail. |\n### ProtectedApplication\nProtectedApplication is the Schema for the protectedapplications API.\n- [ProtectedApplicationList](#protectedapplicationlist)\n| Field        | Description             |\n|:----------------------------------|:--------------------------------------------------------------|\n| apiVersion string     | gkebackup.gke.io/v1           |\n| kind string      | ProtectedApplication           |\n| metadata ObjectMeta    | Refer to Kubernetes API documentation for fields of metadata. |\n| spec ProtectedApplicationSpec  | nan               |\n| status ProtectedApplicationStatus | nan               |\n### ProtectedApplicationError\nProtectedApplicationError contains detailed error information for this ProtectedApplication.\n- [ProtectedApplicationStatus](#protectedapplicationstatus)\n| Field   | Description                         |\n|:---------------|:---------------------------------------------------------------------------------------------------------------|\n| reason string | Reason is a brief CamelCase string that describes any error and is meant for machine parsing and tidy display. |\n| message string | Message is a human-readable message indicating details about the error.          |\n### ProtectedApplicationList\nProtectedApplicationList contains a list of ProtectedApplication.\n| Field       | Description             |\n|:---------------------------------|:--------------------------------------------------------------|\n| apiVersion string    | gkebackup.gke.io/v1           |\n| kind string      | ProtectedApplicationList          |\n| metadata ListMeta    | Refer to Kubernetes API documentation for fields of metadata. |\n| items ProtectedApplication array | nan               |\n### ProtectedApplicationSpec\nProtectedApplicationSpec defines relevant resources belong to a ProtectedApplication, and guidance of how the given application should be backed up or restored.\n- [ProtectedApplication](#protectedapplication)\n| Field        | Description                  |\n|:------------------------------------|:----------------------------------------------------------------------------------|\n| resourceSelection ResourceSelection | ResourceSelection specifies the resources belonging to this ProtectedApplication. |\n| components Component array   | Components defines all components of this protected application.     |\n### ProtectedApplicationStatus\nProtectedApplicationStatus defines the status of this ProtectedApplication.\n- [ProtectedApplication](#protectedapplication)\n| Field         | Description                                 |\n|:--------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------|\n| readyToBackup boolean     | ReadyToBackup indicates whether this ProtectedApplication is ready to backup. A ProtectedApplication is not ready if it contains any errors. |\n| error ProtectedApplicationError array | Errors contains all errors of this protected application, for example, one component config is invalid.          |\n### ResourceKind\n`string` ResourceKind defines kind of the resource.\n- [Component](#component)\n### ResourceSelection\nResourceSelection defines how to identify the resources belong to this application.\n- [ProtectedApplicationSpec](#protectedapplicationspec)\n| Field      | Description                                   |\n|:---------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------|\n| type ResourceSelectionType | Type of application source. Type can only be ApplicationName or Selector. This is the union discriminator.           |\n| applicationName string  | ApplicationName specifies the name of a sig-apps Application within the same namespace. This is the application the data protection spec applies to. |\n| selector LabelSelector  | Selector selects all the resources in the same namespace as the ProtectedApplication, and apply data protection spec to them.      |\n### ResourceSelectionType\n`string` ResourceSelectionType defines types of selection.\n- [ResourceSelection](#resourceselection)\n### RestoreJob\nRestoreJob is the Schema for the restorejobs API\n- [RestoreJobList](#restorejoblist)\n| Field     | Description             |\n|:------------------------|:--------------------------------------------------------------|\n| apiVersion string  | gkebackup.gke.io/v1           |\n| kind string    | RestoreJob             |\n| metadata ObjectMeta  | Refer to Kubernetes API documentation for fields of metadata. |\n| spec RestoreJobSpec  | nan               |\n| status RestoreJobStatus | nan               |\n### RestoreJobList\nRestoreJobList contains a list of RestoreJob\n| Field     | Description             |\n|:-----------------------|:--------------------------------------------------------------|\n| apiVersion string  | gkebackup.gke.io/v1           |\n| kind string   | RestoreJobList            |\n| metadata ListMeta  | Refer to Kubernetes API documentation for fields of metadata. |\n| items RestoreJob array | nan               |\n### RestoreJobSpec\nRestoreJobSpec defines the desired state of restoration.\n- [RestoreJob](#restorejob)\n| Field    | Description                         |\n|:-------------------|:---------------------------------------------------------------------------------------------------------------|\n| restoreName string | RestoreName is the control plane Restore name that the RestoreJob is executing against. The name is immutable. |\n### RestoreJobStatus\nRestoreJobStatus defines the observed state of a RestoreJob.\n- [RestoreJob](#restorejob)\n| Field     | Description                          |\n|:----------------------|:----------------------------------------------------------------------------------------------------------------|\n| phase RestoreJobPhase | Phase represents the current status of a backup.                |\n| message string  | Message is a human-readable message indicating details about why backup restoration is in this state.   |\n| reason string   | Reason is a brief CamelCase string that describes any update and is meant for machine parsing and tidy display. |\n### Strategy\nStrategy defines how to back up and restore for a particular component. It can only be either BackupAllRestoreAll, BackupOneRestoreAll or, DumpAndLoad.\n- [Component](#component)\n| Field         | Description                                                                                                                            |\n|:----------------------------------------||\n| type StrategyType      | Type of backup and restore strategy. The value can only be either BackupAllRestoreAll, BackupOneRestoreAll, or DumpAndLoad. Note: The \"Pod\" ResourceKind only supports BackupAllRestoreAll strategy. This is the union discriminator.                                                                      |\n| backupAllRestoreAll BackupAllRestoreAll | BackupAllRestoreAll defines strategy that back up everything selected in this component, and restore all of them during restoration.                                                                                              |\n| backupOneRestoreAll BackupOneRestoreAll | BackupOneRestoreAll defines strategy that only back up volumes from one Pod within this component, and they will be restored to all other Pods during restoration. This strategy should be used for application that are deployed in HA config of one primary and one or more secondaries. This strategy is exclusively applicable to StatefulSet components that use \"volumeClaimTemplate\" defined to provision volumes.                         |\n| dumpAndLoad DumpAndLoad     | DumpAndLoad defines strategy where backup and restore of a component is achieved via application specific tools for dumping and loading data, like mysqldump for MySQL or pg_dump for PostgreSQL. Dump files should be stored into a dedicated volume. And only the dedicated volume should be selected to be backed up for this strategy. Dump target and load target could be different. This strategy is exclusively applicable to StatefulSet components that use \"volumeClaimTemplate\" defined to provision volumes. |\n### StrategyType\n`string` StrategyType defines the types of backup and restore strategy of a component.\n- [Strategy](#strategy)", "guide": "Documentation"}