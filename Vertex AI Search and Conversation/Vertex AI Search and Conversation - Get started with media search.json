{"title": "Vertex AI Search and Conversation - Get started with media search", "url": "https://cloud.google.com/generative-ai-app-builder/docs/try-media-search?hl=zh-cn", "abstract": "# Vertex AI Search and Conversation - Get started with media search\n# Get started with media search\n **Note:** Media search is in Preview with allowlist.\nYou can quickly build a state-of-the-art media search app. Media search enables your audiences to discover content, with Google-quality results.\nIn this getting-started tutorial, you will use the [Movielens](https://grouplens.org/datasets/movielens/) dataset to demonstrate how to upload your media content catalog into Vertex AI Search. The Movielens dataset contains a catalog of movies (documents).\nAfter uploading the movie data, you'll create a search app and test it through the preview page.\nIf you completed the [Get started with media recommendations](/generative-ai-app-builder/docs/try-media-recommendations) tutorial and you still have the data store (suggested name `quickstart-media-data-store` ), then you can use that data store instead of creating another. In this case, you should begin the tutorial at [Create an app for media search](#create_an_app_for_media_search) .\nEstimated time to complete this tutorial: ~1 hour.\n", "content": "## Objectives\n- Learn how to import media documents to create a media data store.\n- Create, configure and test a search app.\nBefore following this tutorial, make sure you have done the steps in [Before youbegin](/generative-ai-app-builder/docs/before-you-begin) .To follow step-by-step guidance for this task directly in the Google Cloud console, click **Guide me** :\n [Guide me](https://console.cloud.google.com/gen-app-builder/?tutorial=generative-ai-app-builder--genappbuilder-media-search-intro) ## Before you begin\n## Prepare the dataset\nNote: If you completed the\n [Get started with media recommendations](/generative-ai-app-builder/docs/try-media-recommendations) \ntutorial and you still have the data store (suggested name\n`quickstart-media-data-store`\n), skip to\n [Create an app for media search](#create_an_app_for_media_search) \n.\nYou use the Cloud Shell to import the Movielens dataset and restructure the dataset for Vertex AI Search for media.\n### Open the Cloud Shell\n- Open [Google Cloud console](https://console.cloud.google.com/) .\n- Select your Google Cloud project.\n- Take note of the project ID in the **Project info** card on the dashboard page. You will need the project ID for the following procedures.\n- Click the **Activate Cloud Shell** button at the top of the console. A Cloud Shell session opens inside a new frame at the bottom of the Google Cloud console and displays a command-line prompt. \n### Import the datasetThe Movielens dataset is available in a public Cloud Storage bucket to make it easier to import.- Run the following using your project ID to set the default project for the command-line.```\ngcloud config set project PROJECT_ID\n```\n- Create a BigQuery dataset:```\nbq mk movielens\n```\n- Load `movies.csv` into a new `movies` BigQuery table:```\nbq load --skip_leading_rows=1 movielens.movies \\\u00a0 gs://cloud-samples-data/gen-app-builder/media-recommendations/movies.csv \\\u00a0 movieId:integer,title,genres\n```\n- Load `ratings.csv` into a new `ratings` BigQuery table:```\nbq load --skip_leading_rows=1 movielens.ratings \\\u00a0 gs://cloud-samples-data/gen-app-builder/media-recommendations/ratings.csv \\\u00a0 userId:integer,movieId:integer,rating:float,time:timestamp\n```\n### Create BigQuery viewsIn this step, you will restructure the Movielens dataset so it follows the expected format for media data stores.\nFor this guide, you will create fake `view-item` user events during the past 90 days from positive ratings ( `< 4` ).- Create a view that converts the movies table into the [Document schema](/generative-ai-app-builder/docs/media-documents#json-schemaimport-data-media-recommendations) :```\nbq mk --project_id=PROJECT_ID \\\u00a0--use_legacy_sql=false \\\u00a0--view '\u00a0 WITH t AS (\u00a0 \u00a0 SELECT\u00a0 \u00a0 \u00a0 CAST(movieId AS string) AS id,\u00a0 \u00a0 \u00a0 SUBSTR(title, 0, 128) AS title,\u00a0 \u00a0 \u00a0 SPLIT(genres, \"|\") AS categories\u00a0 \u00a0 \u00a0 FROM `PROJECT_ID.movielens.movies`)\u00a0 \u00a0 SELECT\u00a0 \u00a0 \u00a0 id, \"default_schema\" as schemaId, null as parentDocumentId,\u00a0 \u00a0 \u00a0 TO_JSON_STRING(STRUCT(title as title, categories as categories,\u00a0 \u00a0 \u00a0 CONCAT(\"http://mytestdomain.movie/content/\", id) as uri,\u00a0 \u00a0 \u00a0 \"2023-01-01T00:00:00Z\" as available_time,\u00a0 \u00a0 \u00a0 \"2033-01-01T00:00:00Z\" as expire_time,\u00a0 \u00a0 \u00a0 \"movie\" as media_type)) as jsonData\u00a0 \u00a0 FROM t;' \\movielens.movies_view\n```Now the new view has the schema that the Vertex AI Search and Conversation API expects.\n- Go to the **BigQuery** page in Google Cloud console. [Go to BigQuery](https://console.cloud.google.com/bigquery) \n- In the **Explorer** pane, expand your project name, expand the **movielens** dataset and click **movies_view** to open the query page for this view. \n- Go to the **Table explorer** tab.\n- In the **Generated query** pane, click the **Copy to query** button. The query editor opens.\n- Click **Run** to see movie data in the view that you created.\n- Create fictitious [user events](/generative-ai-app-builder/docs/user-events) from movie ratings by running the following Cloud Shell command:```\nbq mk --project_id=PROJECT_ID \\\u00a0--use_legacy_sql=false \\\u00a0--view '\u00a0WITH t AS (\u00a0 SELECT\u00a0 \u00a0 MIN(UNIX_SECONDS(time)) AS old_start,\u00a0 \u00a0 MAX(UNIX_SECONDS(time)) AS old_end,\u00a0 \u00a0 UNIX_SECONDS(TIMESTAMP_SUB(\u00a0 \u00a0 CURRENT_TIMESTAMP(), INTERVAL 90 DAY)) AS new_start,\u00a0 \u00a0 UNIX_SECONDS(CURRENT_TIMESTAMP()) AS new_end\u00a0 FROM `PROJECT_ID.movielens.ratings`)\u00a0 SELECT\u00a0 \u00a0 CAST(userId AS STRING) AS userPseudoId,\u00a0 \u00a0 \"view-item\" AS eventType,\u00a0 \u00a0 FORMAT_TIMESTAMP(\"%Y-%m-%dT%X%Ez\",\u00a0 \u00a0 TIMESTAMP_SECONDS(CAST(\u00a0 \u00a0 \u00a0 (t.new_start + (UNIX_SECONDS(time) - t.old_start) *\u00a0 \u00a0 \u00a0 (t.new_end - t.new_start) / (t.old_end - t.old_start))\u00a0 \u00a0 AS int64))) AS eventTime,\u00a0 \u00a0 [STRUCT(movieId AS id, null AS name)] AS documents,\u00a0 FROM `PROJECT_ID.movielens.ratings`, t\u00a0 WHERE rating >= 4;' \\\u00a0 movielens.user_events\n```\n## Activate Vertex AI Search and Conversation\n- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/start) \n- Read and agree to the Terms of Service, then click **Continue and activate the API** .\n## Create an app for media searchThe procedures in this section guide you through creating and deploying a media search app.- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/start) \n- Click .\n- On the **Create app** page, select **Search** .\n- Under **Content** , click **Media** .\n- In the **Your app name** field, enter a name for your app such as `quickstart-media-search` . Your app ID appears under the engine name.\n- Click **Continue** .\n- If you completed the [Get started with media recommendations](/generative-ai-app-builder/docs/try-media-recommendations) tutorial and you still have the data store (suggested name `quickstart-media-data-store` ), then select it and skip to [Preview search](#preview-search) .\n- If you don't have a data store that contains the movielens dataset, create a new data store and select it:- On the **Data stores** page, click **Create new data store** .\n- Enter a display name for your data store, such as `quickstart-media-data-store` , and then click **Create** .\n- Select the data store you just created, and then click **Create** to create your app. You will be redirected to the **Select a data source** page.## Import dataNext, import the movies and user events data that were formatted earlier.\n### Import documents\n- If you are not automatically redirected to the **Select a data source** page:- Open the **Documents** tab.\n- Click **Import Data** .\n- On the **Select a data source** page, select **BigQuery** .\n- Enter the name of the `movies` BigQuery view you created and click **Import** .```\nPROJECT_ID.movielens.movies_view\n```\n- Wait until all documents have been imported, which should take about 15 minutes. There should be 86537 documents when complete.You can check the **Activity** tab for the import operation status. When the import is complete, the import operation status changes to **Completed** .\n### Import user events\n- Open the **Events** tab.\n- Click **Import Events** .\n- Select **BigQuery** .\n- Enter the name of the `user_events` BigQuery view you created and click **Import** .```\nPROJECT_ID.movielens.user_events\n```\n- You can proceed to the next step before the events are imported, but the search results won't yet contain the full dataset.You can check the **Activity** tab for the operation status. The process takes about an hour to complete because you are importing millions of rows.\n## Preview and configure search\n- In the navigation menu, click .\n- In the **Search here** box, type the name of a movie, such as \"The Lord of the Rings\".\n- Notice that the search results are relevant to the movie title entered.\n- On this page, you can customize how the search widget displays the search result information. See [Configure results for the search widget](/generative-ai-app-builder/docs/configure-widget-attributes#configure_search_structured) to learn more.For media search apps, you can:- [Configure fields for search](/generative-ai-app-builder/docs/configure-search-attributes) \n- [Configure autocomplete](/generative-ai-app-builder/docs/configure-autocomplete) \n- [Configure search results](/generative-ai-app-builder/docs/configure-widget-attributes) \nAfter making changes click **Save and publish** to update the widget.\n## Deploy the search widget\n- In the navigation menu, click **Integration** .\n- Make sure the **Widget** tab is selected.\n- Select **JWT or OAuth based** as the widget authorization type.\n- In the **Domain** field, enter the domain name for web page where you will put the widget. For example, if you are going to copy the widget to the web page `example.com/ai.html` , enter `example.com` as the domain.\n- Click **Add** , and then click **Save** .\n- Copy the code snippet provided in the **Copy the following code to yourweb application** section.\n- In your codebase, generate an authorization token.\n- To pass the authorization token to your widget, use the \"Set authorization token\" code snippet provided in the **Copy the following codeto your web application** section and replace the text `<JWT or OAuth token provided by you backend>` with your authorization token.\n- For help integrating the search app into your web app, see the code samples at [Get search results](/generative-ai-app-builder/docs/preview-search-results) .\n## Clean upTo avoid incurring charges to your Google Cloud account for   the resources used on this page, follow these steps.\nYou can reuse the data store you created for media recommendations in the [Get started with media recommendations](/generative-ai-app-builder/docs/try-media-recommendations) tutorial.\nTry that tutorial before doing this clean up procedure.- To avoid unnecessary Google Cloud charges, use the [Google Cloud console](https://console.cloud.google.com/) to delete your project if you don't need it.\n- If you created a new project to learn about Vertex AI Search and Conversation and you no longer need the project, [delete the project](https://console.cloud.google.com/cloud-resource-manager) .\n- If you used an existing Google Cloud project, delete the resources you created to avoid incurring charges to your account. For more information, see [Delete an app](/generative-ai-app-builder/docs/delete-engine) , [Purge data from a data store](/generative-ai-app-builder/docs/delete-datastores) , and [Delete a data store](/generative-ai-app-builder/docs/delete-a-data-store) .\n- Follow the steps in [Turn off Vertex AI Search and Conversation](/generative-ai-app-builder/docs/turn-off-enterprise-search) .\n- If you created a BigQuery dataset, delete it in Cloud Shell:```\nbq rm --recursive --dataset movielens\n```\n## What's next\n- [Get started with media recommendations](/generative-ai-app-builder/docs/try-media-recommendations) \n- [Add the search widget to a web page](/generative-ai-app-builder/docs/add-widget) \n- [Introduction to Vertex AI Search](/generative-ai-app-builder/docs/enterprise-search-introduction) \n- [About apps and data stores](/generative-ai-app-builder/docs/create-datastore-ingest)", "guide": "Vertex AI Search and Conversation"}