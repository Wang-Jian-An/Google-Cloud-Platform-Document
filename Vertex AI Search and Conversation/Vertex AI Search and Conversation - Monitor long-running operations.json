{"title": "Vertex AI Search and Conversation - Monitor long-running operations", "url": "https://cloud.google.com/generative-ai-app-builder/docs/long-running-operations?hl=zh-cn", "abstract": "# Vertex AI Search and Conversation - Monitor long-running operations\nThis page describes how to manage the lifecycle of a long-running operation (LRO) in Vertex AI Search and Conversation.\nA [long-running operation](https://google.aip.dev/151) object is returned when a call to a method might take a long time to complete. For example, the Vertex AI Search and Conversation API creates a long-running operation when you call [documents.import](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.collections.dataStores.branches.documents/import) through the API or Client Libraries. The operation tracks the status of the processing job.\nYou can use the long-running operations methods that the Vertex AI Search and Conversation API provides to check the [status](https://google.aip.dev/216#common-states) of the operations. You can also list or poll operations.\nThe record of an operation is kept for approximately 30 days after the operation finishes, meaning that you cannot view or list an operation after that time.\n", "content": "## Get details about a long-running operation\nThe following show how to get details about an operation.\nTo get the status of and view details about a long-running operation, follow these steps:- Find the name of the operation in one of two ways:- After you've made a call to a method that returns a long-running operation, review the response.For example, if you call [documents.import](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.collections.dataStores.branches.documents/import) , the start of the response looks something like this:```\n{\u00a0 \"name\": \"projects/12345/locations/global/collections/default_collection/dataStores/my-datastore_4321/branches/0/operations/import-documents-56789\",\u00a0 \"metadata\": {\u00a0 \u00a0 \"@type\": \"type.googleapis.com/google.cloud.discoveryengine.v1beta.ImportDocumentsMetadata\"\u00a0 }}\n```The `name` value in the response provides the operation name, which can be used to query for the operation status. Don't include the quotes when you copy the operation name.\n- Get the operation name by [listing long-runningoperations](#list-lros) .\n- Call the [operations.get](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.collections.dataStores.branches.operations/get) method on the resource that created the operation:```\ncurl -X GET \\\u00a0 \u00a0 -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0 \"https://discoveryengine.googleapis.com/v1beta/OPERATION_NAME\"\n``` : The name of the operation from the previous step.The first lines of the response from the `GET` command look something like this:```\n{\u00a0 \"operations\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"name\": \"projects/12345/locations/global/collections/default_collection/dataStores/my-datastore_4321/branches/0/operations/import-documents-56789\",\u00a0 \u00a0 \u00a0 \"metadata\": {\u00a0 \u00a0 \u00a0 \u00a0 \"@type\": \"type.googleapis.com/google.cloud.discoveryengine.v1alpha.ImportDocumentsMetadata\",\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ]}\n```\nFor more information, see the [Vertex AI Search and Conversation Python API reference documentation](/python/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/discoveryengine/get_operation_sample.py) \n```\nfrom google.cloud import discoveryenginefrom google.longrunning import operations_pb2# TODO(developer): Uncomment these variables before running the sample.# Example: `projects/{project}/locations/{location}/collections/{default_collection}/dataStores/{search_engine_id}/branches/{0}/operations/{operation_id}`# operation_name = \"YOUR_OPERATION_NAME\"def get_operation_sample(operation_name: str) -> operations_pb2.Operation:\u00a0 \u00a0 # Create a client\u00a0 \u00a0 client = discoveryengine.DocumentServiceClient()\u00a0 \u00a0 # Make GetOperation request\u00a0 \u00a0 request = operations_pb2.GetOperationRequest(name=operation_name)\u00a0 \u00a0 operation = client.get_operation(request=request)\u00a0 \u00a0 # Print the Operation Information\u00a0 \u00a0 print(operation)\u00a0 \u00a0 return operation\n```\n## List long-running operations\nThe following show how to list the operations for a Google Cloud resource.\nTo list the long-running operations for a Google Cloud resource, follow this step:- Call the [operations.list](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.collections.dataStores.branches.operations/list) method:```\ncurl -X GET \\\u00a0 \u00a0 -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0 \"https://discoveryengine.googleapis.com/v1beta/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/operations\"\n``` : The ID of the Vertex AI Search and Conversation data store that was created with your engine. In the Google Cloud console URL, the data store ID appears after `engines/` and before `/data` .For more information, see the [Vertex AI Search and Conversation Python API reference documentation](/python/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/discoveryengine/list_operations_sample.py) \n```\nfrom typing import Optionalfrom google.cloud import discoveryenginefrom google.longrunning import operations_pb2# TODO(developer): Uncomment these variables before running the sample.# project_id = \"YOUR_PROJECT_ID\"# location = \"YOUR_PROCESSOR_LOCATION\" \u00a0# Options: \"global\"# search_engine_id = \"YOUR_SEARCH_ENGINE_ID\"# Create filter in https://google.aip.dev/160 syntax# operations_filter = \"YOUR_FILTER\"def list_operations_sample(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 search_engine_id: str,\u00a0 \u00a0 operations_filter: Optional[str] = None,) -> operations_pb2.ListOperationsResponse:\u00a0 \u00a0 # Create a client\u00a0 \u00a0 client = discoveryengine.DocumentServiceClient()\u00a0 \u00a0 # The full resource name of the search engine branch.\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/collections/default_collection/dataStores/{search_engine_id}\"\u00a0 \u00a0 # Make ListOperations request\u00a0 \u00a0 request = operations_pb2.ListOperationsRequest(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 filter=operations_filter,\u00a0 \u00a0 )\u00a0 \u00a0 # Make ListOperations request\u00a0 \u00a0 response = client.list_operations(request=request)\u00a0 \u00a0 # Print the Operation Information\u00a0 \u00a0 for operation in response.operations:\u00a0 \u00a0 \u00a0 \u00a0 print(operation)\u00a0 \u00a0 return response\n```\n## Poll a long-running operation\nThe following show how to poll the status of an operation.\nTo poll the long-running operation until it finishes, follow these steps:- Run the following command, which calls the [operations.get](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.collections.dataStores.branches.operations/get) method repeatedly, using a backoff of 10 seconds between each request:```\nwhile true; \\\u00a0 \u00a0 do curl -X GET \\\u00a0 \u00a0 -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0 \"https://discoveryengine.googleapis.com/v1beta/OPERATION_NAME\"; \\\u00a0 \u00a0 sleep 10; \\\u00a0 \u00a0 done\n``` : The operation name, found in [Get detailsabout a long-running operation](#get-details) . For example: `projects/12345/locations/global/collections/default_collection/dataStores/my-datastore_4321/branches/0/operations/import-documents-56789`\n- Stop the polling job ( `Control+Z` ) after the status shows `\"done\": true` .\nFor more information, see the [Vertex AI Search and Conversation Python API reference documentation](/python/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/discoveryengine/poll_operation_sample.py) \n```\nfrom time import sleepfrom google.cloud import discoveryenginefrom google.longrunning import operations_pb2# TODO(developer): Uncomment these variables before running the sample.# Example: `projects/{project}/locations/{location}/collections/{default_collection}/dataStores/{search_engine_id}/branches/{0}/operations/{operation_id}`# operation_name = \"YOUR_OPERATION_NAME\"def poll_operation_sample(\u00a0 \u00a0 operation_name: str, limit: int = 10) -> operations_pb2.Operation:\u00a0 \u00a0 # Create a client\u00a0 \u00a0 client = discoveryengine.DocumentServiceClient()\u00a0 \u00a0 # Make GetOperation request\u00a0 \u00a0 request = operations_pb2.GetOperationRequest(name=operation_name)\u00a0 \u00a0 for _ in range(limit):\u00a0 \u00a0 \u00a0 \u00a0 operation = client.get_operation(request=request)\u00a0 \u00a0 \u00a0 \u00a0 # Print the Operation Information\u00a0 \u00a0 \u00a0 \u00a0 print(operation)\u00a0 \u00a0 \u00a0 \u00a0 # Stop polling when Operation is no longer running\u00a0 \u00a0 \u00a0 \u00a0 if operation.done:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 # Wait 10 seconds before polling again\u00a0 \u00a0 \u00a0 \u00a0 sleep(10)\u00a0 \u00a0 return operation\n```", "guide": "Vertex AI Search and Conversation"}