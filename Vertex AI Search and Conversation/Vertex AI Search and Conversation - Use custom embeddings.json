{"title": "Vertex AI Search and Conversation - Use custom embeddings", "url": "https://cloud.google.com/generative-ai-app-builder/docs/bring-embeddings?hl=zh-cn", "abstract": "# Vertex AI Search and Conversation - Use custom embeddings\n**Note:** This feature is a Preview offering, subject to the \"Pre-GA Offerings Terms\" of the [GCP Service Specific Terms](https://cloud.google.com/terms/service-terms) . Pre-GA products and features may have limited support, and changes to pre-GA products and features may not be compatible with other pre-GA versions. For more information, see the [launch stage descriptions](https://cloud.google.com/products#product-launch-stages) . Further, by using this feature, you agree to the [Generative AI Preview terms and conditions](https://cloud.google.com/trustedtester/aitos) (\"Preview Terms\"). For this feature, you can process personal data as outlined in the [Cloud Data Processing Addendum](https://cloud.google.com/terms/data-processing-terms) , subject to applicable restrictions and obligations in the Agreement (as defined in the Preview Terms).\nIf you've already created your own custom vector embeddings for your data, you can upload them to Vertex AI Search and use them when querying with Vertex AI Search.\n**Caution:** For most use cases, Google recommends using the embeddings that are automatically provided by Vertex AI Search. Only use custom embeddings if you have advanced knowledge of creating embeddings.\nThis feature is available for data stores with structured data or unstructured data with metadata.\nBy default, Vertex AI Search automatically generates vector embeddings without any configuration necessary. If you aren't familiar with creating embeddings, Google recommends letting Vertex AI Search create and use embeddings for you. However, if you've created your own embeddings for your data, you might prefer to use them instead of those generated by Vertex AI Search, especially if your custom embeddings contain additional context that can enrich your search retrieval and ranking. For example:\n- Your embeddings have been trained on custom words, such as internal terms whose semantic similarity wouldn't be captured by training on public data\u2014for example, organization-specific terms that appear only in private documents.\n- You've created embeddings for user profiles and want to use these to create a personalized, semantically-relevant document ranking. You can use your embeddings to get personalization-based ranking, which can augment Google's document embeddings for relevance-based ranking.\nTo bring your own embeddings:\n- [Before you begin](#byb) : Check that your embeddings meet all requirements\n- [Ingest data with embeddings](#ingest) : Ingest your documents with their embeddings\n- [Update your schema](#schema) : Update your schema with your key property fields and dimension specifications\n- [Specify your embedding](#embedding-spec) : Specify your embedding either globally, or per search request.", "content": "## Before you begin\nBefore you begin, make sure your embeddings meet the following requirements:\n- Embeddings are supported for structured data and unstructured data with metadata\n- Embeddings must be provided as one-dimensional arrays\n- Embedding dimensionality must be between 1 and 768, inclusive\n- Embeddings are supported for text and images. Videos are not supported\n- Up to two fields can be tagged as embedding key property fields. You might use two fields for cases like A/B testing for your embeddings\n- Embedding field key property designations currently cannot be removed after they are set## Ingest data with embeddings\nYou can ingest a document's embeddings in one to two fields included as part of that document's data or metadata during document ingestion.\nTo ingest data with embeddings:\n- Prepare your data for ingestion depending on your type of data:- **Structured data** : When you prepare your data, include each document's embeddings as one-dimensional arrays in one to two fields in the document. You can provide up to two embeddings (for example, if A/B testing between embeddings). Each embedding must be provided in its own field in the document, for example: `\"example_embedding_vector\": [0.1, 0.2, 0.3 ...]`Follow the guidance for preparing structured data in the [Prepare data for ingesting](/generative-ai-app-builder/docs/prepare-data#structured) documentation.\n- **Unstructured data with metadata** : When you prepare your data, include each document's embedding as a one-dimensional array in a field in the document metadata. You can provide up to two embeddings (for example, when A/B testing between embeddings). Each embedding must be provided in its own field in the document metadata, for example: `\"example_embedding_vector\": [0.1, 0.2, 0.3 ...]`Follow the guidance for preparing unstructured data with metadata for your ingestion method (Cloud Storage or BigQuery) in the [Prepare data for ingesting](/generative-ai-app-builder/docs/prepare-data#unstructured) documentation.\n- Follow the instructions for your data type in [Create an engine and ingest data with Vertex AI Search](/generative-ai-app-builder/docs/create-engine-es) to ingest your documents with embeddings.\nNext, update your schema to use the correct embedding fields.\n## Update your schema\nUpdate your schema with key property mappings and dimensions for your embedding fields using either the Google Cloud console or the API.\nTo update your schema using the Google Cloud console, follow these steps:- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/engines) \n- In the navigation menu, click **Data stores** .\n- In the **Name** column, click the data store with the schema that you want to update.\n- Click the **Schema** tab to view the schema for your data.\n- Click the **Edit** button.\n- Find your embedding field in the schema and in the **Key properties** column, select **embedding_vector** as the key property for that field.If you have a second embedding field, repeat this step for that field.\n- In the **Dimension** column, enter the number of dimensions for that embedding field.If you have a second embedding field, repeat this step for that field.\n- Click **Save** to apply your schema changes.After updating your schema, it can take up to 24 hours to re-index depending on the size of your data store.\nTo update your schema using the API, follow these steps:- Following the **REST** instructions in [Update a schema](/generative-ai-app-builder/docs/update-schemas#update-schema) , specify the key property mapping and the number of dimensions for each embedding field:- `\"keyPropertyMapping\": \"embedding_vector\"`\n- `\"dimension\":` ``\nFor example, here is a formatted JSON schema with 768 dimensions for the field `example_embedding_vector` :```\n\u00a0 {\u00a0 \u00a0 \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\u00a0 \u00a0 \"type\": \"object\",\u00a0 \u00a0 \"properties\": {\u00a0 \u00a0 \u00a0 \"example_embedding_vector\": {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"array\",\u00a0 \u00a0 \u00a0 \u00a0 \"keyPropertyMapping\": 'embedding_vector',\u00a0 \u00a0 \u00a0 \u00a0 \"dimension\": 768,\u00a0 \u00a0 \u00a0 \u00a0 \"items\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"number\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\n```In an update schema request, the above formatted JSON would be included as a JSON string:```\n\u00a0 \"jsonSchema\": \"{\\\"$schema\\\":\\\"https://json-schema.org/draft/2020-12/schema\\\",\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"example_embedding_vector\\\":{\\\"type\\\":\\\"array\\\",\\\"keyPropertyMapping\\\":\\\"embedding_vector\\\",\\\"dimension\\\":768,\\\"items\\\":{\\\"type\\\":\\\"number\\\"}}}}\"\n```After updating your schema, it can take up to 24 hours to re-index depending on the size of your data store.\nNext, specify your embedding.\n## Specify your embedding\nAfter indexing from your schema update is completed, you can send search requests that include an embedding specification.\nThere are two ways to specify an embedding:\n- [Specify an embedding globally](#global) : To specify the same embedding to all search requests, update your serving settings to include an embedding specification using either Google Cloud console or the API.\n- [Specify an embedding per search request](#per-request) : Send`embeddingSpec`in each search request using the API. This overrides the global setting if it is set.\n### Specify an embedding globally\nYou can specify the same embedding across all search requests using the Google Cloud console or the API.\nTo provide the same embedding specification to all search requests, update your serving settings with an embedding specification.- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/engines) \n- Click **View** for the data store with the schema that you want to update.\n- Go to the **Configurations** page and click the **Serving** tab.\n- For **Embedding field path** , enter the name of the field that you have mapped to the embedding key property.\n- For **Ranking expression** , enter a function or functions to control the ranking of results. Variables are weighed according to the expression you enter. The ranking expression is a single function or multiple functions that are joined by `+` in the format `function, { \" + \", function }` .Supported functions are:- `` `* relevance_score`\n- `` `* dotProduct(` `` `)`\nThe following variables are accepted:- `relevance_score`: A predefined variable provided by Vertex AI Search to measure the relevance of a document. The score ranges from 0 to 1.0, bounds inclusive.\n- `dotProduct()`: A predefined function provided by Vertex AI Search. You must provide the same field name to this function as you did for`embeddingVector.fieldPath`.\nFor example:- `0.3 * relevance_score`\n- `0.5 * relevance_score + 0.3 * dotProduct(example_embedding_field)`\nTo provide the same embedding specification to all search requests, update `servingConfig` with the `embeddingConfig` .- Patch the `servingConfig` entity with the fields you want to update. Specify the fields that you're updating with `updateMask` .In the following example, `embeddingConfig` uses embeddings in the field `example_embedding_field` and gives a weight of 0.5 to `relevance_score` .```\ncurl -X PATCH \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json; charset=utf-8\" \\-d '{\u00a0 \u00a0 \u00a0 \"name\": \"projects/PROJECT_ID/locations/LOCATION/collections/default_collection/dataStores/DATA_STORE_ID/servingConfigs/default_search\",\u00a0 \u00a0 \u00a0 \"embeddingConfig\": {\u00a0 \u00a0 \u00a0 \u00a0 \"fieldPath\": \"example_embedding_field\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"ranking_expression\": \"0.5 * relevance_score\"\u00a0 \u00a0 }' \\'https://discoveryengine.googleapis.com/v1alpha/projects/PROJECT_ID/locations/LOCATION/collections/default_collection/dataStores/DATA_STORE_ID/servingConfigs/default_search?updateMask=embeddingConfig,rankingExpression'\n```- `fieldPath`: The name of the field that you have mapped to the embedding key property.\n- `ranking_expression`: Controls the ranking of results. Variables are weighed according to the expression you enter. The ranking expression is a single function or multiple functions that are joined by`+`in the format`function, { \" + \", function }`.\nSupported functions are:- `` `* relevance_score`\n- `` `* dotProduct(` `` `)`\nThe following variables are accepted:- `relevance_score`: A predefined variable provided by Vertex AI Search.\n- `dotProduct()`: A predefined function provided by Vertex AI Search. The dot product is normalized. You must provide the same field name to this function as you did for`embeddingVector.fieldPath`.\nFor example:- `0.3 * relevance_score`\n- `0.5 * relevance_score + 0.3 * dotProduct(example_embedding_field)`\n- When you send search requests, `servingConfig.embeddingConfig` is automatically included.If you send a search request that explicitly includes a different `embeddingSpec` , it overrides `servingConfig.embeddingConfig` . See the **Per request** instructions for how to provide embedding specifications for single search requests.\n### Specify an embedding per search request\nYou can provide an embedding specification for a single search request using the API. A per-request embedding specification overrides any global embedding specification.\n- Send a search request that includes `embeddingSpec` .The following example of `embeddingSpec` uses embeddings in the field `example_embedding_field` , specifies \"Example query\" as the input vector, and gives a weight of 0.5 to `relevance_score` and 0.3 to `example_embedding_field` when calculating ranking.```\n\u00a0 \"embeddingSpec\": {\u00a0 \u00a0 \"embeddingVectors\": [{\u00a0 \u00a0 \u00a0 \"fieldPath\": \"example_embedding_field\",\u00a0 \u00a0 \u00a0 \"vector\": [\u00a0 \u00a0 \u00a0 \u00a0 0.96241474,\u00a0 \u00a0 \u00a0 \u00a0 -0.45999944,\u00a0 \u00a0 \u00a0 \u00a0 0.108588696\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }]\u00a0 },\u00a0 \"ranking_expression\": \"0.5 * relevance_score + 0.3 * dotProduct(example_embedding_field)\"\n```- `fieldPath`: The name of the field that you have mapped to the embedding key property.\n- `vector`: The input vector provided as an array.\n- `ranking_expression` : Controls the ranking of results. Variables are weighed according to the expression you enter. The ranking expression is a single function or multiple functions that are joined by `+` in the format `function, { \" + \", function }` .Supported functions are:- `` `* relevance_score`\n- `` `* dotProduct(` `` `)`\nThe following variables are accepted:- `relevance_score`: A predefined variable provided by Vertex AI Search to measure the relevance of a document. The score ranges from 0 to 1.0, bounds inclusive.\n- `dotProduct()`: A predefined function provided by Vertex AI Search. You must provide the same field name to this function as you did for`embeddingVector.fieldPath`.\nFor example:- `0.3 * relevance_score`\n- `0.5 * relevance_score + 0.3 * dotProduct(example_embedding_field)`\n- Get results in the search response. Each search result includes its relevance score and dot product values. For example:```\n\"modelScores\": {\u00a0 \"dotProduct(example_embedding_field)\": [0.02150772698223591],\u00a0 \"relevance_score\": [ 0.8828125 ]}\n```- `dotProduct()`: The calculated dot product for the search result document.\n- `relevance_score`: The calculated relevance score for the search result document.\n## What's next\n- [Prepare data for ingesting](/generative-ai-app-builder/docs/prepare-data) \n- [Update a schema](/generative-ai-app-builder/docs/update-schemas#update-schema) \n- [Preview search results](/generative-ai-app-builder/docs/preview-search-results)", "guide": "Vertex AI Search and Conversation"}