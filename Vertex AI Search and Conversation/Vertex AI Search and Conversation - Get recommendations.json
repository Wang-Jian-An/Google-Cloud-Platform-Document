{"title": "Vertex AI Search and Conversation - Get recommendations", "url": "https://cloud.google.com/generative-ai-app-builder/docs/preview-recommendations?hl=zh-cn", "abstract": "# Vertex AI Search and Conversation - Get recommendations\nThis page shows how to preview recommendations using the Google Cloud console and get recommendations results using the API. See the REST tab for examples of API calls that can help you integrate recommendations into your app.\nThe procedure that you use depends on the type of recommendations you want and the type of data store that your recommendation app is connected to:\n- [Get media recommendations](#get-media-recommendations) \n- [Get generic recommendations for an app with structureddata](#structured-unstructured) \n- [Get generic recommendations for an app with unstructured data](#unstructured) \n- [Get generic recommendations for an app with website data](#web) \n**Note:** Depending on the amount of data, it can take hours after data ingestion until the preview feature works.\n", "content": "## Get media recommendations\nTo use the Google Cloud console to preview media recommendations, follow these steps:- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/start) \n- Click the name of the app for which you want to preview recommendations.\n- Click **Configurations** > **Training** . If **Ready to query** is **OK** , then the app is ready for preview.\n- Click **Preview** .\n- Click the **Document ID** field. A list of document IDs appears.\n- Click the document ID for the document that you want recommendations for. Alternatively, enter a document ID into the **Document ID** field.\n- Click **Select serving config** and select the serving config to preview.\n- Optional: Enter the visitor ID (also called the pseudo user ID) of a user for whom you have collected user events. If you leave this field blank or enter a non-existent visitor ID, you'll preview recommendations as a new user.\n- Click **Get recommendations** . A list of recommended documents appears.\n- Click a document to get document details.To use the API to get media recommendations, use the [servingConfigs.recommend](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.dataStores.servingConfigs/recommend) method:- Find your engine ID and serving config ID. If you already have your engine ID and serving config IDs, skip to step 2.- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/engines) \n- Click the name of the app.\n- In the navigation pane, click **Configurations** .\n- If you have only the serving config that was automatically created when you created your app, then your serving config ID and engine ID are the same. Skip to the next step.If you have multiple serving configs listed in the **Serving configs** tab, find the serving config that you want to get recommendations from. Your serving config ID is the value in the **ID** column.If you deleted the serving config that was automatically created when you created your app, and currently have only one serving config that you manually created, then go to the **Preview** page and click **Selectserving config** to view the serving config ID.\n- Click the **Training** tab. Your engine ID is the value in the **App ID** row.\n- Make sure the app is ready for previewing:- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/) \n- Click the name of the app.\n- Click **Configurations** > **Training** . If **Ready to query** is OK, then the app is ready for preview.\n- Get recommendations. **Note:** If your recommendation is not yet active or you want to test your method call, you can call this method with the `validateOnly` flag set to `true` . This call returns a placeholder result, and does not incur charges.```\ncurl -X POST \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json; charset=utf-8\" \\-d \u00a0'{\u00a0 \u00a0 \u00a0 \u00a0 \"validateOnly\": false,\u00a0 \u00a0 \u00a0 \u00a0 \"userEvent\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"eventType\": \"view-item\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"userPseudoId\": \"USER_PSEUDO_ID\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"documents\": [{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"id\": \"DOCUMENT_ID\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }],\u00a0 \u00a0 \u00a0 \u00a0 \"filter\": \"FILTER_STRING\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\u00a0 \u00a0 }' \\\u00a0 \"https://discoveryengine.googleapis.com/v1beta/projects/PROJECT_ID/locations/global/dataStores/DATA_STORE_ID/servingConfigs/SERVING_CONFIG_ID:recommend\"\n```- : The ID of your project.\n- : The ID of your data store.\n- : The ID of document that you want to preview recommendations for. Use the ID that you used for this document at the time you ingested your data.\n- : A pseudonymized identifier of the user. You can use an HTTP cookie for this field, which uniquely identifies a visitor on a single device. Don't set this field to the same identifier for multiple users\u2014this would combine their event histories and degrade model quality. Don't include personally identifiable information (PII) in this field.\n- : The ID of your serving config.\n- : Optional. A text field that lets you to filter on a specified set of fields, using filter expression syntax. The default value is an empty string, which means no filter is applied. For more information, see [Filter recommendations](/generative-ai-app-builder/docs/filter-recommendations) .\nYou should see results similar to the following:\n```\n{\u00a0 \"results\": [{\"id\": \"sample-id-1\"}, {\"id\": \"sample-id-2\"}],\u00a0 \"attributionToken\": \"abc123\"}\n```\nGoogle recommends associating attribution tokens, which we include with each search response and recommendation, with actions that a user takes in response to those search responses and recommendations. This can improve the quality of your search responses and recommendations over time. To do this, append `attributionToken` values to the URLs for each of the links that you display on your website for search responses or recommendations\u2014for example, `https://www.example.com/54321/?rtoken=abc123` . When a user clicks one of these links, include the `attributionToken` value in the user event that you record.\n## Get generic recommendations for an app with structured data\n**    Preview    \u2014 Recommendations (generic) ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nTo use the Google Cloud console to preview generic recommendations for your structured app, follow these steps:- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/start) \n- Click the name of the app for which you want to preview recommendations.\n- Click **Preview** .\n- Click the **Document ID** field. A list of document IDs appears.\n- Click the document ID for the document that you want recommendations for. Alternatively, enter a document ID into the **Document ID** field.\n- Click **Get recommendations** . A list of recommended documents appears.\n- Click a document to get document details.\nTo use the API to get generic recommendations for an app with structured data, use the [servingConfigs.recommend](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.dataStores.servingConfigs/recommend) method:- Find your engine ID. If you already have your engine ID, skip to step 2.- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/engines) \n- Click the name of the app.\n- Get the engine ID from the URL of the Google Cloud console. It is the text between `engines/` and `/data` . For example, if the URL contains```\ngen-app-builder/engines/demo_1234567890123/data/records\n```then the engine ID is `demo_1234567890123` .\n- Find your data store ID. If you already have your data store ID, skip to the next step.- In the Google Cloud console, go to the **Search and Conversation** page and in the navigation menu, click **Data stores** . [Go to the Data stores page](https://console.cloud.google.com/gen-app-builder/data-stores) \n- Click the name of your data store.\n- On the **Data** page for your data store, get the data store ID.\n- Make sure your engine is ready to previewing by polling the `GetEngine` method until it returns `\"servingState\":\"ACTIVE\"` . At that point the engine is ready for previewing.```\ncurl -X GET \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/engines/ENGINE_ID\n```- : The ID of your project.\n- : The ID of your engine.\n- Get recommendations.```\ncurl -X POST \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\-d '{\u00a0 \"userEvent\": { \"eventType\":\"view-item\", \"userPseudoId\":\"USER_PSEUDO_ID\", \"documents\":[{\"DOCUMENT_ID\":\"DOCUMENT_ID\"}]}}' \\\u00a0 \"https://discoveryengine.googleapis.com/v1beta/projects/PROJECT_ID/locations/global/dataStores/DATA_STORE_ID/servingConfigs/SERVING_CONFIG_ID:recommend\"\n```- : The ID of your project.\n- : The ID of your data store.\n- : The ID of document that you want to preview recommendations for. Use the ID that you used for this document at the time you ingested your data.\n- : A pseudonymized identifier of the user. You can use an HTTP cookie for this field, which uniquely identifies a visitor on a single device. Do not set this field to the same identifier for multiple users\u2014this would combine their event histories and degrade model quality. Do not include personally identifiable information (PII) in this field.\n- : The ID of your serving config. Your serving config ID is the same as your engine ID, so use your engine ID here.\n **Note:** Although Vertex AI Search and Conversation currently does not leverage the pseudonymized ID for personalization functionality, Google strongly recommends including this value now for future implementations of Vertex AI Search and Conversation.For more information, see the [Vertex AI Search and Conversation C# API reference documentation](/dotnet/docs/reference/Google.Cloud.DiscoveryEngine.V1Beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-dotnet/blob/HEAD/apis/Google.Cloud.DiscoveryEngine.V1Beta/Google.Cloud.DiscoveryEngine.V1Beta.GeneratedSnippets/RecommendationServiceClient.RecommendRequestObjectSnippet.g.cs) \n```\nusing Google.Cloud.DiscoveryEngine.V1Beta;using Google.Protobuf.WellKnownTypes;public sealed partial class GeneratedRecommendationServiceClientSnippets{\u00a0 \u00a0 /// <summary>Snippet for Recommend</summary>\u00a0 \u00a0 /// <remarks>\u00a0 \u00a0 /// This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 /// It will require modifications to work:\u00a0 \u00a0 /// - It may require correct/in-range values for request initialization.\u00a0 \u00a0 /// - It may require specifying regional endpoints when creating the service client as shown in\u00a0 \u00a0 /// \u00a0 https://cloud.google.com/dotnet/docs/reference/help/client-configuration#endpoint.\u00a0 \u00a0 /// </remarks>\u00a0 \u00a0 public void RecommendRequestObject()\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 RecommendationServiceClient recommendationServiceClient = RecommendationServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 RecommendRequest request = new RecommendRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServingConfigAsServingConfigName = ServingConfigName.FromProjectLocationDataStoreServingConfig(\"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\", \"[SERVING_CONFIG]\"),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserEvent = new UserEvent(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PageSize = 0,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Filter = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ValidateOnly = false,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Params = { { \"\", new Value() }, },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserLabels = { { \"\", \"\" }, },\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request\u00a0 \u00a0 \u00a0 \u00a0 RecommendResponse response = recommendationServiceClient.Recommend(request);\u00a0 \u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Go API reference documentation](/go/docs/reference/cloud.google.com/go/discoveryengine/latest/apiv1beta) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-go/blob/HEAD/internal/generated/snippets/discoveryengine/apiv1beta/RecommendationClient/Recommend/main.go) \n```\npackage mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryengine \"cloud.google.com/go/discoveryengine/apiv1beta\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryenginepb \"cloud.google.com/go/discoveryengine/apiv1beta/discoveryenginepb\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 // This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 \u00a0 \u00a0 // It will require modifications to work:\u00a0 \u00a0 \u00a0 \u00a0 // - It may require correct/in-range values for request initialization.\u00a0 \u00a0 \u00a0 \u00a0 // - It may require specifying regional endpoints when creating the service client as shown in:\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options\u00a0 \u00a0 \u00a0 \u00a0 c, err := discoveryengine.NewRecommendationClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Handle error.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer c.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &discoveryenginepb.RecommendRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Fill request struct fields.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // See https://pkg.go.dev/cloud.google.com/go/discoveryengine/apiv1beta/discoveryenginepb#RecommendRequest.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := c.Recommend(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Handle error.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // TODO: Use resp.\u00a0 \u00a0 \u00a0 \u00a0 _ = resp}\n```For more information, see the [Vertex AI Search and Conversation Java API reference documentation](/java/docs/reference/google-cloud-discoveryengine/latest/overview) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-java/blob/HEAD/java-discoveryengine/samples/snippets/generated/com/google/cloud/discoveryengine/v1beta/recommendationservice/recommend/SyncRecommend.java) \n```\nimport com.google.cloud.discoveryengine.v1beta.RecommendRequest;import com.google.cloud.discoveryengine.v1beta.RecommendResponse;import com.google.cloud.discoveryengine.v1beta.RecommendationServiceClient;import com.google.cloud.discoveryengine.v1beta.ServingConfigName;import com.google.cloud.discoveryengine.v1beta.UserEvent;import com.google.protobuf.Value;import java.util.HashMap;public class SyncRecommend {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 syncRecommend();\u00a0 }\u00a0 public static void syncRecommend() throws Exception {\u00a0 \u00a0 // This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 // It will require modifications to work:\u00a0 \u00a0 // - It may require correct/in-range values for request initialization.\u00a0 \u00a0 // - It may require specifying regional endpoints when creating the service client as shown in\u00a0 \u00a0 // https://cloud.google.com/java/docs/setup#configure_endpoints_for_the_client_library\u00a0 \u00a0 try (RecommendationServiceClient recommendationServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 RecommendationServiceClient.create()) {\u00a0 \u00a0 \u00a0 RecommendRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RecommendRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setServingConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServingConfigName.ofProjectLocationDataStoreServingConfigName(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\", \"[SERVING_CONFIG]\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setUserEvent(UserEvent.newBuilder().build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setPageSize(883849137)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFilter(\"filter-1274492040\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setValidateOnly(true)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .putAllParams(new HashMap<String, Value>())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .putAllUserLabels(new HashMap<String, String>())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 RecommendResponse response = recommendationServiceClient.recommend(request);\u00a0 \u00a0 }\u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Node.js API reference documentation](/nodejs/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-node/blob/HEAD/packages/google-cloud-discoveryengine/samples/generated/v1beta/recommendation_service.recommend.js) \n```\n/**\u00a0* This snippet has been automatically generated and should be regarded as a code template only.\u00a0* It will require modifications to work.\u00a0* It may require correct/in-range values for request initialization.\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*//**\u00a0* \u00a0Required. Full resource name of a\u00a0* \u00a0ServingConfig google.cloud.discoveryengine.v1beta.ServingConfig:\u00a0* \u00a0`projects/* /locations/global/collections/* /engines/* /servingConfigs/*`, or\u00a0* \u00a0`projects/* /locations/global/collections/* /dataStores/* /servingConfigs/*`\u00a0* \u00a0One default serving config is created along with your recommendation engine\u00a0* \u00a0creation. The engine ID will be used as the ID of the default serving\u00a0* \u00a0config. For example, for Engine\u00a0* \u00a0`projects/* /locations/global/collections/* /engines/my-engine`, you can use\u00a0* \u00a0`projects/* /locations/global/collections/* /engines/my-engine/servingConfigs/my-engine`\u00a0* \u00a0for your\u00a0* \u00a0RecommendationService.Recommend google.cloud.discoveryengine.v1beta.RecommendationService.Recommend \u00a0* \u00a0requests.\u00a0*/// const servingConfig = 'abc123'/**\u00a0* \u00a0Required. Context about the user, what they are looking at and what action\u00a0* \u00a0they took to trigger the Recommend request. Note that this user event\u00a0* \u00a0detail won't be ingested to userEvent logs. Thus, a separate userEvent\u00a0* \u00a0write request is required for event logging.\u00a0* \u00a0Don't set\u00a0* \u00a0UserEvent.user_pseudo_id google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id \u00a0* \u00a0or\u00a0* \u00a0UserEvent.user_info.user_id google.cloud.discoveryengine.v1beta.UserInfo.user_id \u00a0* \u00a0to the same fixed ID for different users. If you are trying to receive\u00a0* \u00a0non-personalized recommendations (not recommended; this can negatively\u00a0* \u00a0impact model performance), instead set\u00a0* \u00a0UserEvent.user_pseudo_id google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id \u00a0* \u00a0to a random unique ID and leave\u00a0* \u00a0UserEvent.user_info.user_id google.cloud.discoveryengine.v1beta.UserInfo.user_id \u00a0* \u00a0unset.\u00a0*/// const userEvent = {}/**\u00a0* \u00a0Maximum number of results to return. Set this property\u00a0* \u00a0to the number of recommendation results needed. If zero, the service will\u00a0* \u00a0choose a reasonable default. The maximum allowed value is 100. Values\u00a0* \u00a0above 100 will be coerced to 100.\u00a0*/// const pageSize = 1234/**\u00a0* \u00a0Filter for restricting recommendation results with a length limit of 5,000\u00a0* \u00a0characters. Currently, only filter expressions on the `filter_tags`\u00a0* \u00a0attribute is supported.\u00a0* \u00a0Examples:\u00a0* \u00a0 * `(filter_tags: ANY(\"Red\", \"Blue\") OR filter_tags: ANY(\"Hot\", \"Cold\"))`\u00a0* \u00a0 * `(filter_tags: ANY(\"Red\", \"Blue\")) AND NOT (filter_tags: ANY(\"Green\"))`\u00a0* \u00a0If `attributeFilteringSyntax` is set to true under the `params` field, then\u00a0* \u00a0attribute-based expressions are expected instead of the above described\u00a0* \u00a0tag-based syntax. Examples:\u00a0* \u00a0 * (launguage: ANY(\"en\", \"es\")) AND NOT (categories: ANY(\"Movie\"))\u00a0* \u00a0 * (available: true) AND\u00a0* \u00a0 \u00a0 (launguage: ANY(\"en\", \"es\")) OR (categories: ANY(\"Movie\"))\u00a0* \u00a0If your filter blocks all results, the API will return generic\u00a0* \u00a0(unfiltered) popular Documents. If you only want results strictly matching\u00a0* \u00a0the filters, set `strictFiltering` to True in\u00a0* \u00a0RecommendRequest.params google.cloud.discoveryengine.v1beta.RecommendRequest.params \u00a0* \u00a0to receive empty results instead.\u00a0* \u00a0Note that the API will never return\u00a0* \u00a0Document google.cloud.discoveryengine.v1beta.Document s with\u00a0* \u00a0`storageStatus` of `EXPIRED` or `DELETED` regardless of filter choices.\u00a0*/// const filter = 'abc123'/**\u00a0* \u00a0Use validate only mode for this recommendation query. If set to true, a\u00a0* \u00a0fake model will be used that returns arbitrary Document IDs.\u00a0* \u00a0Note that the validate only mode should only be used for testing the API,\u00a0* \u00a0or if the model is not ready.\u00a0*/// const validateOnly = true/**\u00a0* \u00a0Additional domain specific parameters for the recommendations.\u00a0* \u00a0Allowed values:\u00a0* \u00a0* `returnDocument`: Boolean. If set to true, the associated Document\u00a0* \u00a0 \u00a0 object will be returned in\u00a0* \u00a0 \u00a0 RecommendResponse.RecommendationResult.document google.cloud.discoveryengine.v1beta.RecommendResponse.RecommendationResult.document.\u00a0* \u00a0* `returnScore`: Boolean. If set to true, the recommendation 'score'\u00a0* \u00a0 \u00a0 corresponding to each returned Document will be set in\u00a0* \u00a0 \u00a0 RecommendResponse.RecommendationResult.metadata google.cloud.discoveryengine.v1beta.RecommendResponse.RecommendationResult.metadata.\u00a0* \u00a0 \u00a0 The given 'score' indicates the probability of a Document conversion\u00a0* \u00a0 \u00a0 given the user's context and history.\u00a0* \u00a0* `strictFiltering`: Boolean. True by default. If set to false, the service\u00a0* \u00a0 \u00a0 will return generic (unfiltered) popular Documents instead of empty if\u00a0* \u00a0 \u00a0 your filter blocks all recommendation results.\u00a0* \u00a0* `diversityLevel`: String. Default empty. If set to be non-empty, then\u00a0* \u00a0 \u00a0 it needs to be one of:\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`no-diversity`\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`low-diversity`\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`medium-diversity`\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`high-diversity`\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`auto-diversity`\u00a0* \u00a0 \u00a0 This gives request-level control and adjusts recommendation results\u00a0* \u00a0 \u00a0 based on Document category.\u00a0* \u00a0* `attributeFilteringSyntax`: Boolean. False by default. If set to true,\u00a0* \u00a0 \u00a0 the `filter` field is interpreted according to the new,\u00a0* \u00a0 \u00a0 attribute-based syntax.\u00a0*/// const params = [1,2,3,4]/**\u00a0* \u00a0The user labels applied to a resource must meet the following requirements:\u00a0* \u00a0* Each resource can have multiple labels, up to a maximum of 64.\u00a0* \u00a0* Each label must be a key-value pair.\u00a0* \u00a0* Keys have a minimum length of 1 character and a maximum length of 63\u00a0* \u00a0 \u00a0characters and cannot be empty. Values can be empty and have a maximum\u00a0* \u00a0 \u00a0length of 63 characters.\u00a0* \u00a0* Keys and values can contain only lowercase letters, numeric characters,\u00a0* \u00a0 \u00a0underscores, and dashes. All characters must use UTF-8 encoding, and\u00a0* \u00a0 \u00a0international characters are allowed.\u00a0* \u00a0* The key portion of a label must be unique. However, you can use the same\u00a0* \u00a0 \u00a0key with multiple resources.\u00a0* \u00a0* Keys must start with a lowercase letter or international character.\u00a0* \u00a0See Requirements for\u00a0* \u00a0labels (https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)\u00a0* \u00a0for more details.\u00a0*/// const userLabels = [1,2,3,4]// Imports the Discoveryengine libraryconst {RecommendationServiceClient} = require('@google-cloud/discoveryengine').v1beta;// Instantiates a clientconst discoveryengineClient = new RecommendationServiceClient();async function callRecommend() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 servingConfig,\u00a0 \u00a0 userEvent,\u00a0 };\u00a0 // Run request\u00a0 const response = await discoveryengineClient.recommend(request);\u00a0 console.log(response);}callRecommend();\n```For more information, see the [Vertex AI Search and Conversation PHP API reference documentation](/php/docs/reference/cloud-discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-php/blob/HEAD/DiscoveryEngine/samples/V1beta/RecommendationServiceClient/recommend.php) \n```\nuse Google\\ApiCore\\ApiException;use Google\\Cloud\\DiscoveryEngine\\V1beta\\Client\\RecommendationServiceClient;use Google\\Cloud\\DiscoveryEngine\\V1beta\\RecommendRequest;use Google\\Cloud\\DiscoveryEngine\\V1beta\\RecommendResponse;use Google\\Cloud\\DiscoveryEngine\\V1beta\\UserEvent;/**\u00a0* Makes a recommendation, which requires a contextual user event.\u00a0*\u00a0* @param string $formattedServingConfig Full resource name of a\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [ServingConfig][google.cloud.discoveryengine.v1beta.ServingConfig]:\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/&#42;/engines/&#42;/servingConfigs/*`, or\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/&#42;/dataStores/&#42;/servingConfigs/*`\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 One default serving config is created along with your recommendation engine\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 creation. The engine ID will be used as the ID of the default serving\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 config. For example, for Engine\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/&#42;/engines/my-engine`, you can use\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/&#42;/engines/my-engine/servingConfigs/my-engine`\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for your\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [RecommendationService.Recommend][google.cloud.discoveryengine.v1beta.RecommendationService.Recommend]\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests. Please see\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {@see RecommendationServiceClient::servingConfigName()} for help formatting this field.\u00a0* @param string $userEventEventType \u00a0 \u00a0 User event type. Allowed values are:\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Generic values:\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `search`: Search for Documents.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `view-item`: Detailed page view of a Document.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `view-item-list`: View of a panel or ordered list of Documents.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `view-home-page`: View of the home page.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `view-category-page`: View of a category page, e.g. Home > Men > Jeans\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Retail-related values:\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `add-to-cart`: Add an item(s) to cart, e.g. in Retail online shopping\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `purchase`: Purchase an item(s)\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Media-related values:\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `media-play`: Start/resume watching a video, playing a song, etc.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `media-complete`: Finished or stopped midway through a video, song, etc.\u00a0* @param string $userEventUserPseudoId \u00a0A unique identifier for tracking visitors.\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 For example, this could be implemented with an HTTP cookie, which should be\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 able to uniquely identify a visitor on a single device. This unique\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 identifier should not change if the visitor log in/out of the website.\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Do not set the field to the same fixed ID for different users. This mixes\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 the event history of those users together, which results in degraded model\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 quality.\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The field must be a UTF-8 encoded string with a length limit of 128\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The field should not contain PII or user-data. We recommend to use Google\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Analytics [Client\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ID](https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#clientId)\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for this field.\u00a0*/function recommend_sample(\u00a0 \u00a0 string $formattedServingConfig,\u00a0 \u00a0 string $userEventEventType,\u00a0 \u00a0 string $userEventUserPseudoId): void {\u00a0 \u00a0 // Create a client.\u00a0 \u00a0 $recommendationServiceClient = new RecommendationServiceClient();\u00a0 \u00a0 // Prepare the request message.\u00a0 \u00a0 $userEvent = (new UserEvent())\u00a0 \u00a0 \u00a0 \u00a0 ->setEventType($userEventEventType)\u00a0 \u00a0 \u00a0 \u00a0 ->setUserPseudoId($userEventUserPseudoId);\u00a0 \u00a0 $request = (new RecommendRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setServingConfig($formattedServingConfig)\u00a0 \u00a0 \u00a0 \u00a0 ->setUserEvent($userEvent);\u00a0 \u00a0 // Call the API and handle any network failures.\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 \u00a0 /** @var RecommendResponse $response */\u00a0 \u00a0 \u00a0 \u00a0 $response = $recommendationServiceClient->recommend($request);\u00a0 \u00a0 \u00a0 \u00a0 printf('Response data: %s' . PHP_EOL, $response->serializeToJsonString());\u00a0 \u00a0 } catch (ApiException $ex) {\u00a0 \u00a0 \u00a0 \u00a0 printf('Call failed with message: %s' . PHP_EOL, $ex->getMessage());\u00a0 \u00a0 }}/**\u00a0* Helper to execute the sample.\u00a0*\u00a0* This sample has been automatically generated and should be regarded as a code\u00a0* template only. It will require modifications to work:\u00a0* \u00a0- It may require correct/in-range values for request initialization.\u00a0* \u00a0- It may require specifying regional endpoints when creating the service client,\u00a0* \u00a0 \u00a0please see the apiEndpoint client configuration option for more details.\u00a0*/function callSample(): void{\u00a0 \u00a0 $formattedServingConfig = RecommendationServiceClient::servingConfigName(\u00a0 \u00a0 \u00a0 \u00a0 '[PROJECT]',\u00a0 \u00a0 \u00a0 \u00a0 '[LOCATION]',\u00a0 \u00a0 \u00a0 \u00a0 '[DATA_STORE]',\u00a0 \u00a0 \u00a0 \u00a0 '[SERVING_CONFIG]'\u00a0 \u00a0 );\u00a0 \u00a0 $userEventEventType = '[EVENT_TYPE]';\u00a0 \u00a0 $userEventUserPseudoId = '[USER_PSEUDO_ID]';\u00a0 \u00a0 recommend_sample($formattedServingConfig, $userEventEventType, $userEventUserPseudoId);}\n```For more information, see the [Vertex AI Search and Conversation Python API reference documentation](/python/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-python/blob/HEAD/packages/google-cloud-discoveryengine/samples/generated_samples/discoveryengine_v1beta_generated_recommendation_service_recommend_sync.py) \n```\n# This snippet has been automatically generated and should be regarded as a# code template only.# It will require modifications to work:# - It may require correct/in-range values for request initialization.# - It may require specifying regional endpoints when creating the service# \u00a0 client as shown in:# \u00a0 https://googleapis.dev/python/google-api-core/latest/client_options.htmlfrom google.cloud import discoveryengine_v1betadef sample_recommend():\u00a0 \u00a0 # Create a client\u00a0 \u00a0 client = discoveryengine_v1beta.RecommendationServiceClient()\u00a0 \u00a0 # Initialize request argument(s)\u00a0 \u00a0 user_event = discoveryengine_v1beta.UserEvent()\u00a0 \u00a0 user_event.event_type = \"event_type_value\"\u00a0 \u00a0 user_event.user_pseudo_id = \"user_pseudo_id_value\"\u00a0 \u00a0 request = discoveryengine_v1beta.RecommendRequest(\u00a0 \u00a0 \u00a0 \u00a0 serving_config=\"serving_config_value\",\u00a0 \u00a0 \u00a0 \u00a0 user_event=user_event,\u00a0 \u00a0 )\u00a0 \u00a0 # Make the request\u00a0 \u00a0 response = client.recommend(request=request)\u00a0 \u00a0 # Handle the response\u00a0 \u00a0 print(response)\n```\nFor more information, see the [Vertex AI Search and Conversation Ruby API reference documentation](/ruby/docs/reference/google-cloud-discovery_engine-v1beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-discovery_engine-v1beta/snippets/recommendation_service/recommend.rb) \n```\nrequire \"google/cloud/discovery_engine/v1beta\"\n### Snippet for the recommend call in the RecommendationService service\n## This snippet has been automatically generated and should be regarded as a code# template only. It will require modifications to work:# - It may require correct/in-range values for request initialization.# - It may require specifying regional endpoints when creating the service# client as shown in https://cloud.google.com/ruby/docs/reference.\n## This is an auto-generated example demonstrating basic usage of# Google::Cloud::DiscoveryEngine::V1beta::RecommendationService::Client#recommend.#def recommend\u00a0 # Create a client object. The client can be reused for multiple calls.\u00a0 client = Google::Cloud::DiscoveryEngine::V1beta::RecommendationService::Client.new\u00a0 # Create a request. To set request fields, pass in keyword arguments.\u00a0 request = Google::Cloud::DiscoveryEngine::V1beta::RecommendRequest.new\u00a0 # Call the recommend method.\u00a0 result = client.recommend request\u00a0 # The returned object is of type Google::Cloud::DiscoveryEngine::V1beta::RecommendResponse.\u00a0 p resultend\n```\n## Get generic recommendations for an app with unstructured data\n**    Preview    \u2014 Recommendations (generic) ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nTo use the Google Cloud console to preview generic recommendations, follow these steps:- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/start) \n- Click the name of the app for which you want to preview recommendations.\n- Click **Preview** .\n- Click the **URI** field. A list of URIs appears.\n- Click the URI for the document that you want recommendations for. Alternatively, enter a URI into the **URI** field.\n- Click **Get recommendations** . A list of URIs for recommended documents appears.\n- Click a URI to view the document.\nTo use the API to get generic recommendations for an app with unstructured data, follow these steps:- Find your engine ID. If you already have your engine ID, skip to step 2.- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/engines) \n- Click the name of the app.\n- Get the engine ID from the URL of the Google Cloud console. It is the text between `engines/` and `/data` . For example, if the URL contains```\ngen-app-builder/engines/demo_1234567890123/data/records\n```then the engine ID is `demo_1234567890123` .\n- Find your data store ID. If you already have your data store ID, skip to the next step.- In the Google Cloud console, go to the **Search and Conversation** page and in the navigation menu, click **Data stores** . [Go to the Data stores page](https://console.cloud.google.com/gen-app-builder/data-stores) \n- Click the name of your data store.\n- On the **Data** page for your data store, get the data store ID.\n- Make sure your engine is ready to previewing by polling the `GetEngine` method until it returns `\"servingState\":\"ACTIVE\"` . At that point the engine is ready for previewing.```\ncurl -X GET \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/engines/ENGINE_ID\n```- : The ID of your project.\n- : The ID of your engine.\n- Get recommendations.```\ncurl -X POST \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\-d '{\u00a0 \"userEvent\": { \"eventType\":\"view-item\", \"userPseudoId\":\"USER_PSEUDO_ID\", \"documents\":[{\"DOCUMENT_ID\":\"DOCUMENT_ID\"}]}}' \\\u00a0 \"https://discoveryengine.googleapis.com/v1beta/projects/PROJECT_ID/locations/global/dataStores/DATA_STORE_ID/servingConfigs/SERVING_CONFIG_ID:recommend\"\n```- : The ID of your project.\n- : The ID of the data store associated with your engine.\n- : The ID of document that you want to preview recommendations for. Use the document ID that you provided at the time you ingested your data.\n- : A pseudonymized identifier of the user. You can use an HTTP cookie for this field, which uniquely identifies a visitor on a single device. Do not set this field to the same identifier for multiple users\u2014this would combine their event histories and degrade model quality. Do not include personally identifiable information (PII) in this field.\n- : The ID of your serving config. Your serving config ID is the same as your engine ID, so use your engine ID here.\n **Note:** Although Vertex AI Search and Conversation currently does not leverage the pseudonymized ID for personalization functionality, Google strongly recommends including this value now for future implementations of Vertex AI Search and Conversation.For more information, see the [Vertex AI Search and Conversation C# API reference documentation](/dotnet/docs/reference/Google.Cloud.DiscoveryEngine.V1Beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-dotnet/blob/HEAD/apis/Google.Cloud.DiscoveryEngine.V1Beta/Google.Cloud.DiscoveryEngine.V1Beta.GeneratedSnippets/RecommendationServiceClient.RecommendRequestObjectSnippet.g.cs) \n```\nusing Google.Cloud.DiscoveryEngine.V1Beta;using Google.Protobuf.WellKnownTypes;public sealed partial class GeneratedRecommendationServiceClientSnippets{\u00a0 \u00a0 /// <summary>Snippet for Recommend</summary>\u00a0 \u00a0 /// <remarks>\u00a0 \u00a0 /// This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 /// It will require modifications to work:\u00a0 \u00a0 /// - It may require correct/in-range values for request initialization.\u00a0 \u00a0 /// - It may require specifying regional endpoints when creating the service client as shown in\u00a0 \u00a0 /// \u00a0 https://cloud.google.com/dotnet/docs/reference/help/client-configuration#endpoint.\u00a0 \u00a0 /// </remarks>\u00a0 \u00a0 public void RecommendRequestObject()\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 RecommendationServiceClient recommendationServiceClient = RecommendationServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 RecommendRequest request = new RecommendRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServingConfigAsServingConfigName = ServingConfigName.FromProjectLocationDataStoreServingConfig(\"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\", \"[SERVING_CONFIG]\"),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserEvent = new UserEvent(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PageSize = 0,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Filter = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ValidateOnly = false,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Params = { { \"\", new Value() }, },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserLabels = { { \"\", \"\" }, },\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request\u00a0 \u00a0 \u00a0 \u00a0 RecommendResponse response = recommendationServiceClient.Recommend(request);\u00a0 \u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Go API reference documentation](/go/docs/reference/cloud.google.com/go/discoveryengine/latest/apiv1beta) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-go/blob/HEAD/internal/generated/snippets/discoveryengine/apiv1beta/RecommendationClient/Recommend/main.go) \n```\npackage mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryengine \"cloud.google.com/go/discoveryengine/apiv1beta\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryenginepb \"cloud.google.com/go/discoveryengine/apiv1beta/discoveryenginepb\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 // This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 \u00a0 \u00a0 // It will require modifications to work:\u00a0 \u00a0 \u00a0 \u00a0 // - It may require correct/in-range values for request initialization.\u00a0 \u00a0 \u00a0 \u00a0 // - It may require specifying regional endpoints when creating the service client as shown in:\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options\u00a0 \u00a0 \u00a0 \u00a0 c, err := discoveryengine.NewRecommendationClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Handle error.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer c.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &discoveryenginepb.RecommendRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Fill request struct fields.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // See https://pkg.go.dev/cloud.google.com/go/discoveryengine/apiv1beta/discoveryenginepb#RecommendRequest.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := c.Recommend(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Handle error.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // TODO: Use resp.\u00a0 \u00a0 \u00a0 \u00a0 _ = resp}\n```For more information, see the [Vertex AI Search and Conversation Java API reference documentation](/java/docs/reference/google-cloud-discoveryengine/latest/overview) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-java/blob/HEAD/java-discoveryengine/samples/snippets/generated/com/google/cloud/discoveryengine/v1beta/recommendationservice/recommend/SyncRecommend.java) \n```\nimport com.google.cloud.discoveryengine.v1beta.RecommendRequest;import com.google.cloud.discoveryengine.v1beta.RecommendResponse;import com.google.cloud.discoveryengine.v1beta.RecommendationServiceClient;import com.google.cloud.discoveryengine.v1beta.ServingConfigName;import com.google.cloud.discoveryengine.v1beta.UserEvent;import com.google.protobuf.Value;import java.util.HashMap;public class SyncRecommend {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 syncRecommend();\u00a0 }\u00a0 public static void syncRecommend() throws Exception {\u00a0 \u00a0 // This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 // It will require modifications to work:\u00a0 \u00a0 // - It may require correct/in-range values for request initialization.\u00a0 \u00a0 // - It may require specifying regional endpoints when creating the service client as shown in\u00a0 \u00a0 // https://cloud.google.com/java/docs/setup#configure_endpoints_for_the_client_library\u00a0 \u00a0 try (RecommendationServiceClient recommendationServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 RecommendationServiceClient.create()) {\u00a0 \u00a0 \u00a0 RecommendRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RecommendRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setServingConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServingConfigName.ofProjectLocationDataStoreServingConfigName(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\", \"[SERVING_CONFIG]\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setUserEvent(UserEvent.newBuilder().build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setPageSize(883849137)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFilter(\"filter-1274492040\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setValidateOnly(true)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .putAllParams(new HashMap<String, Value>())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .putAllUserLabels(new HashMap<String, String>())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 RecommendResponse response = recommendationServiceClient.recommend(request);\u00a0 \u00a0 }\u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Node.js API reference documentation](/nodejs/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-node/blob/HEAD/packages/google-cloud-discoveryengine/samples/generated/v1beta/recommendation_service.recommend.js) \n```\n/**\u00a0* This snippet has been automatically generated and should be regarded as a code template only.\u00a0* It will require modifications to work.\u00a0* It may require correct/in-range values for request initialization.\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*//**\u00a0* \u00a0Required. Full resource name of a\u00a0* \u00a0ServingConfig google.cloud.discoveryengine.v1beta.ServingConfig:\u00a0* \u00a0`projects/* /locations/global/collections/* /engines/* /servingConfigs/*`, or\u00a0* \u00a0`projects/* /locations/global/collections/* /dataStores/* /servingConfigs/*`\u00a0* \u00a0One default serving config is created along with your recommendation engine\u00a0* \u00a0creation. The engine ID will be used as the ID of the default serving\u00a0* \u00a0config. For example, for Engine\u00a0* \u00a0`projects/* /locations/global/collections/* /engines/my-engine`, you can use\u00a0* \u00a0`projects/* /locations/global/collections/* /engines/my-engine/servingConfigs/my-engine`\u00a0* \u00a0for your\u00a0* \u00a0RecommendationService.Recommend google.cloud.discoveryengine.v1beta.RecommendationService.Recommend \u00a0* \u00a0requests.\u00a0*/// const servingConfig = 'abc123'/**\u00a0* \u00a0Required. Context about the user, what they are looking at and what action\u00a0* \u00a0they took to trigger the Recommend request. Note that this user event\u00a0* \u00a0detail won't be ingested to userEvent logs. Thus, a separate userEvent\u00a0* \u00a0write request is required for event logging.\u00a0* \u00a0Don't set\u00a0* \u00a0UserEvent.user_pseudo_id google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id \u00a0* \u00a0or\u00a0* \u00a0UserEvent.user_info.user_id google.cloud.discoveryengine.v1beta.UserInfo.user_id \u00a0* \u00a0to the same fixed ID for different users. If you are trying to receive\u00a0* \u00a0non-personalized recommendations (not recommended; this can negatively\u00a0* \u00a0impact model performance), instead set\u00a0* \u00a0UserEvent.user_pseudo_id google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id \u00a0* \u00a0to a random unique ID and leave\u00a0* \u00a0UserEvent.user_info.user_id google.cloud.discoveryengine.v1beta.UserInfo.user_id \u00a0* \u00a0unset.\u00a0*/// const userEvent = {}/**\u00a0* \u00a0Maximum number of results to return. Set this property\u00a0* \u00a0to the number of recommendation results needed. If zero, the service will\u00a0* \u00a0choose a reasonable default. The maximum allowed value is 100. Values\u00a0* \u00a0above 100 will be coerced to 100.\u00a0*/// const pageSize = 1234/**\u00a0* \u00a0Filter for restricting recommendation results with a length limit of 5,000\u00a0* \u00a0characters. Currently, only filter expressions on the `filter_tags`\u00a0* \u00a0attribute is supported.\u00a0* \u00a0Examples:\u00a0* \u00a0 * `(filter_tags: ANY(\"Red\", \"Blue\") OR filter_tags: ANY(\"Hot\", \"Cold\"))`\u00a0* \u00a0 * `(filter_tags: ANY(\"Red\", \"Blue\")) AND NOT (filter_tags: ANY(\"Green\"))`\u00a0* \u00a0If `attributeFilteringSyntax` is set to true under the `params` field, then\u00a0* \u00a0attribute-based expressions are expected instead of the above described\u00a0* \u00a0tag-based syntax. Examples:\u00a0* \u00a0 * (launguage: ANY(\"en\", \"es\")) AND NOT (categories: ANY(\"Movie\"))\u00a0* \u00a0 * (available: true) AND\u00a0* \u00a0 \u00a0 (launguage: ANY(\"en\", \"es\")) OR (categories: ANY(\"Movie\"))\u00a0* \u00a0If your filter blocks all results, the API will return generic\u00a0* \u00a0(unfiltered) popular Documents. If you only want results strictly matching\u00a0* \u00a0the filters, set `strictFiltering` to True in\u00a0* \u00a0RecommendRequest.params google.cloud.discoveryengine.v1beta.RecommendRequest.params \u00a0* \u00a0to receive empty results instead.\u00a0* \u00a0Note that the API will never return\u00a0* \u00a0Document google.cloud.discoveryengine.v1beta.Document s with\u00a0* \u00a0`storageStatus` of `EXPIRED` or `DELETED` regardless of filter choices.\u00a0*/// const filter = 'abc123'/**\u00a0* \u00a0Use validate only mode for this recommendation query. If set to true, a\u00a0* \u00a0fake model will be used that returns arbitrary Document IDs.\u00a0* \u00a0Note that the validate only mode should only be used for testing the API,\u00a0* \u00a0or if the model is not ready.\u00a0*/// const validateOnly = true/**\u00a0* \u00a0Additional domain specific parameters for the recommendations.\u00a0* \u00a0Allowed values:\u00a0* \u00a0* `returnDocument`: Boolean. If set to true, the associated Document\u00a0* \u00a0 \u00a0 object will be returned in\u00a0* \u00a0 \u00a0 RecommendResponse.RecommendationResult.document google.cloud.discoveryengine.v1beta.RecommendResponse.RecommendationResult.document.\u00a0* \u00a0* `returnScore`: Boolean. If set to true, the recommendation 'score'\u00a0* \u00a0 \u00a0 corresponding to each returned Document will be set in\u00a0* \u00a0 \u00a0 RecommendResponse.RecommendationResult.metadata google.cloud.discoveryengine.v1beta.RecommendResponse.RecommendationResult.metadata.\u00a0* \u00a0 \u00a0 The given 'score' indicates the probability of a Document conversion\u00a0* \u00a0 \u00a0 given the user's context and history.\u00a0* \u00a0* `strictFiltering`: Boolean. True by default. If set to false, the service\u00a0* \u00a0 \u00a0 will return generic (unfiltered) popular Documents instead of empty if\u00a0* \u00a0 \u00a0 your filter blocks all recommendation results.\u00a0* \u00a0* `diversityLevel`: String. Default empty. If set to be non-empty, then\u00a0* \u00a0 \u00a0 it needs to be one of:\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`no-diversity`\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`low-diversity`\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`medium-diversity`\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`high-diversity`\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`auto-diversity`\u00a0* \u00a0 \u00a0 This gives request-level control and adjusts recommendation results\u00a0* \u00a0 \u00a0 based on Document category.\u00a0* \u00a0* `attributeFilteringSyntax`: Boolean. False by default. If set to true,\u00a0* \u00a0 \u00a0 the `filter` field is interpreted according to the new,\u00a0* \u00a0 \u00a0 attribute-based syntax.\u00a0*/// const params = [1,2,3,4]/**\u00a0* \u00a0The user labels applied to a resource must meet the following requirements:\u00a0* \u00a0* Each resource can have multiple labels, up to a maximum of 64.\u00a0* \u00a0* Each label must be a key-value pair.\u00a0* \u00a0* Keys have a minimum length of 1 character and a maximum length of 63\u00a0* \u00a0 \u00a0characters and cannot be empty. Values can be empty and have a maximum\u00a0* \u00a0 \u00a0length of 63 characters.\u00a0* \u00a0* Keys and values can contain only lowercase letters, numeric characters,\u00a0* \u00a0 \u00a0underscores, and dashes. All characters must use UTF-8 encoding, and\u00a0* \u00a0 \u00a0international characters are allowed.\u00a0* \u00a0* The key portion of a label must be unique. However, you can use the same\u00a0* \u00a0 \u00a0key with multiple resources.\u00a0* \u00a0* Keys must start with a lowercase letter or international character.\u00a0* \u00a0See Requirements for\u00a0* \u00a0labels (https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)\u00a0* \u00a0for more details.\u00a0*/// const userLabels = [1,2,3,4]// Imports the Discoveryengine libraryconst {RecommendationServiceClient} = require('@google-cloud/discoveryengine').v1beta;// Instantiates a clientconst discoveryengineClient = new RecommendationServiceClient();async function callRecommend() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 servingConfig,\u00a0 \u00a0 userEvent,\u00a0 };\u00a0 // Run request\u00a0 const response = await discoveryengineClient.recommend(request);\u00a0 console.log(response);}callRecommend();\n```For more information, see the [Vertex AI Search and Conversation PHP API reference documentation](/php/docs/reference/cloud-discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-php/blob/HEAD/DiscoveryEngine/samples/V1beta/RecommendationServiceClient/recommend.php) \n```\nuse Google\\ApiCore\\ApiException;use Google\\Cloud\\DiscoveryEngine\\V1beta\\Client\\RecommendationServiceClient;use Google\\Cloud\\DiscoveryEngine\\V1beta\\RecommendRequest;use Google\\Cloud\\DiscoveryEngine\\V1beta\\RecommendResponse;use Google\\Cloud\\DiscoveryEngine\\V1beta\\UserEvent;/**\u00a0* Makes a recommendation, which requires a contextual user event.\u00a0*\u00a0* @param string $formattedServingConfig Full resource name of a\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [ServingConfig][google.cloud.discoveryengine.v1beta.ServingConfig]:\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/&#42;/engines/&#42;/servingConfigs/*`, or\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/&#42;/dataStores/&#42;/servingConfigs/*`\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 One default serving config is created along with your recommendation engine\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 creation. The engine ID will be used as the ID of the default serving\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 config. For example, for Engine\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/&#42;/engines/my-engine`, you can use\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/&#42;/engines/my-engine/servingConfigs/my-engine`\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for your\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [RecommendationService.Recommend][google.cloud.discoveryengine.v1beta.RecommendationService.Recommend]\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests. Please see\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {@see RecommendationServiceClient::servingConfigName()} for help formatting this field.\u00a0* @param string $userEventEventType \u00a0 \u00a0 User event type. Allowed values are:\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Generic values:\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `search`: Search for Documents.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `view-item`: Detailed page view of a Document.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `view-item-list`: View of a panel or ordered list of Documents.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `view-home-page`: View of the home page.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `view-category-page`: View of a category page, e.g. Home > Men > Jeans\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Retail-related values:\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `add-to-cart`: Add an item(s) to cart, e.g. in Retail online shopping\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `purchase`: Purchase an item(s)\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Media-related values:\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `media-play`: Start/resume watching a video, playing a song, etc.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `media-complete`: Finished or stopped midway through a video, song, etc.\u00a0* @param string $userEventUserPseudoId \u00a0A unique identifier for tracking visitors.\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 For example, this could be implemented with an HTTP cookie, which should be\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 able to uniquely identify a visitor on a single device. This unique\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 identifier should not change if the visitor log in/out of the website.\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Do not set the field to the same fixed ID for different users. This mixes\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 the event history of those users together, which results in degraded model\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 quality.\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The field must be a UTF-8 encoded string with a length limit of 128\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The field should not contain PII or user-data. We recommend to use Google\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Analytics [Client\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ID](https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#clientId)\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for this field.\u00a0*/function recommend_sample(\u00a0 \u00a0 string $formattedServingConfig,\u00a0 \u00a0 string $userEventEventType,\u00a0 \u00a0 string $userEventUserPseudoId): void {\u00a0 \u00a0 // Create a client.\u00a0 \u00a0 $recommendationServiceClient = new RecommendationServiceClient();\u00a0 \u00a0 // Prepare the request message.\u00a0 \u00a0 $userEvent = (new UserEvent())\u00a0 \u00a0 \u00a0 \u00a0 ->setEventType($userEventEventType)\u00a0 \u00a0 \u00a0 \u00a0 ->setUserPseudoId($userEventUserPseudoId);\u00a0 \u00a0 $request = (new RecommendRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setServingConfig($formattedServingConfig)\u00a0 \u00a0 \u00a0 \u00a0 ->setUserEvent($userEvent);\u00a0 \u00a0 // Call the API and handle any network failures.\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 \u00a0 /** @var RecommendResponse $response */\u00a0 \u00a0 \u00a0 \u00a0 $response = $recommendationServiceClient->recommend($request);\u00a0 \u00a0 \u00a0 \u00a0 printf('Response data: %s' . PHP_EOL, $response->serializeToJsonString());\u00a0 \u00a0 } catch (ApiException $ex) {\u00a0 \u00a0 \u00a0 \u00a0 printf('Call failed with message: %s' . PHP_EOL, $ex->getMessage());\u00a0 \u00a0 }}/**\u00a0* Helper to execute the sample.\u00a0*\u00a0* This sample has been automatically generated and should be regarded as a code\u00a0* template only. It will require modifications to work:\u00a0* \u00a0- It may require correct/in-range values for request initialization.\u00a0* \u00a0- It may require specifying regional endpoints when creating the service client,\u00a0* \u00a0 \u00a0please see the apiEndpoint client configuration option for more details.\u00a0*/function callSample(): void{\u00a0 \u00a0 $formattedServingConfig = RecommendationServiceClient::servingConfigName(\u00a0 \u00a0 \u00a0 \u00a0 '[PROJECT]',\u00a0 \u00a0 \u00a0 \u00a0 '[LOCATION]',\u00a0 \u00a0 \u00a0 \u00a0 '[DATA_STORE]',\u00a0 \u00a0 \u00a0 \u00a0 '[SERVING_CONFIG]'\u00a0 \u00a0 );\u00a0 \u00a0 $userEventEventType = '[EVENT_TYPE]';\u00a0 \u00a0 $userEventUserPseudoId = '[USER_PSEUDO_ID]';\u00a0 \u00a0 recommend_sample($formattedServingConfig, $userEventEventType, $userEventUserPseudoId);}\n```For more information, see the [Vertex AI Search and Conversation Python API reference documentation](/python/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-python/blob/HEAD/packages/google-cloud-discoveryengine/samples/generated_samples/discoveryengine_v1beta_generated_recommendation_service_recommend_sync.py) \n```\n# This snippet has been automatically generated and should be regarded as a# code template only.# It will require modifications to work:# - It may require correct/in-range values for request initialization.# - It may require specifying regional endpoints when creating the service# \u00a0 client as shown in:# \u00a0 https://googleapis.dev/python/google-api-core/latest/client_options.htmlfrom google.cloud import discoveryengine_v1betadef sample_recommend():\u00a0 \u00a0 # Create a client\u00a0 \u00a0 client = discoveryengine_v1beta.RecommendationServiceClient()\u00a0 \u00a0 # Initialize request argument(s)\u00a0 \u00a0 user_event = discoveryengine_v1beta.UserEvent()\u00a0 \u00a0 user_event.event_type = \"event_type_value\"\u00a0 \u00a0 user_event.user_pseudo_id = \"user_pseudo_id_value\"\u00a0 \u00a0 request = discoveryengine_v1beta.RecommendRequest(\u00a0 \u00a0 \u00a0 \u00a0 serving_config=\"serving_config_value\",\u00a0 \u00a0 \u00a0 \u00a0 user_event=user_event,\u00a0 \u00a0 )\u00a0 \u00a0 # Make the request\u00a0 \u00a0 response = client.recommend(request=request)\u00a0 \u00a0 # Handle the response\u00a0 \u00a0 print(response)\n```\nFor more information, see the [Vertex AI Search and Conversation Ruby API reference documentation](/ruby/docs/reference/google-cloud-discovery_engine-v1beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-discovery_engine-v1beta/snippets/recommendation_service/recommend.rb) \n```\nrequire \"google/cloud/discovery_engine/v1beta\"\n### Snippet for the recommend call in the RecommendationService service\n## This snippet has been automatically generated and should be regarded as a code# template only. It will require modifications to work:# - It may require correct/in-range values for request initialization.# - It may require specifying regional endpoints when creating the service# client as shown in https://cloud.google.com/ruby/docs/reference.\n## This is an auto-generated example demonstrating basic usage of# Google::Cloud::DiscoveryEngine::V1beta::RecommendationService::Client#recommend.#def recommend\u00a0 # Create a client object. The client can be reused for multiple calls.\u00a0 client = Google::Cloud::DiscoveryEngine::V1beta::RecommendationService::Client.new\u00a0 # Create a request. To set request fields, pass in keyword arguments.\u00a0 request = Google::Cloud::DiscoveryEngine::V1beta::RecommendRequest.new\u00a0 # Call the recommend method.\u00a0 result = client.recommend request\u00a0 # The returned object is of type Google::Cloud::DiscoveryEngine::V1beta::RecommendResponse.\u00a0 p resultend\n```\n## Get generic recommendations for an app with website data\n**    Preview    \u2014 Recommendations (generic) ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nTo use the Google Cloud console to preview generic recommendations for your website app, follow these steps:- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/start) \n- Click the name of the app for which you want to preview recommendations.\n- In the navigation menu, click **Preview** .\n- Click the **URI** field. A list of URLs from your website appears.\n- Click the URL for the web page that you want recommendations for. Alternatively, enter a URL from your website into the **URL** field.\n- Click **Get recommendations** . A list of URLs for recommended web pages appears.\n- Click a URL to view the web page.\nTo use the API to get generic recommendations for an app with website data, use the [servingConfigs.recommend](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.dataStores.servingConfigs/recommend) method:- Find your engine ID. If you already have your engine ID, skip to step 2.- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/engines) \n- Click the name of the app.\n- Get the engine ID from the URL of the Google Cloud console. It is the text between `engines/` and `/data` . For example, if the URL contains```\ngen-app-builder/engines/demo_1234567890123/data/records\n```then the engine ID is `demo_1234567890123` .\n- Find your data store ID. If you already have your data store ID, skip to the next step.- In the Google Cloud console, go to the **Search and Conversation** page and in the navigation menu, click **Data stores** . [Go to the Data stores page](https://console.cloud.google.com/gen-app-builder/data-stores) \n- Click the name of your data store.\n- On the **Data** page for your data store, get the data store ID.\n- Make sure your engine is ready to previewing by polling the `GetEngine` method until it returns `\"servingState\":\"ACTIVE\"` . At that point the engine is ready for previewing.```\ncurl -X GET \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/engines/ENGINE_ID\n```- : The ID of your project.\n- : The ID of your engine.\n- Get recommendations.```\ncurl -X POST \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\-d '{\u00a0 \"userEvent\": { \"eventType\":\"view-item\", \"userPseudoId\":\"USER_PSEUDO_ID\", \"documents\":[{\"uri\":\"WEBSITE_URL\"}]}}' \\\u00a0 \"https://discoveryengine.googleapis.com/v1beta/projects/PROJECT_ID/locations/global/dataStores/DATA_STORE_ID/servingConfigs/SERVING_CONFIG_ID:recommend\"\n```- : The ID of your project.\n- : The ID of your data store.\n- : The URL of the website that you want to preview recommendations for.\n- : A pseudonymized identifier of the user. You can use an HTTP cookie for this field, which uniquely identifies a visitor on a single device. Do not set this field to the same identifier for multiple users\u2014this would combine their event histories and degrade model quality. Do not include personally identifiable information (PII) in this field.\n- : The ID of your serving config. Your serving config ID is the same as your engine ID, so use your engine ID here.\n **Note:** Although Vertex AI Search and Conversation currently does not leverage the pseudonymized ID for personalization functionality, Google strongly recommends including this value now for future implementations of Vertex AI Search and Conversation.For more information, see the [Vertex AI Search and Conversation C# API reference documentation](/dotnet/docs/reference/Google.Cloud.DiscoveryEngine.V1Beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-dotnet/blob/HEAD/apis/Google.Cloud.DiscoveryEngine.V1Beta/Google.Cloud.DiscoveryEngine.V1Beta.GeneratedSnippets/RecommendationServiceClient.RecommendRequestObjectSnippet.g.cs) \n```\nusing Google.Cloud.DiscoveryEngine.V1Beta;using Google.Protobuf.WellKnownTypes;public sealed partial class GeneratedRecommendationServiceClientSnippets{\u00a0 \u00a0 /// <summary>Snippet for Recommend</summary>\u00a0 \u00a0 /// <remarks>\u00a0 \u00a0 /// This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 /// It will require modifications to work:\u00a0 \u00a0 /// - It may require correct/in-range values for request initialization.\u00a0 \u00a0 /// - It may require specifying regional endpoints when creating the service client as shown in\u00a0 \u00a0 /// \u00a0 https://cloud.google.com/dotnet/docs/reference/help/client-configuration#endpoint.\u00a0 \u00a0 /// </remarks>\u00a0 \u00a0 public void RecommendRequestObject()\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 RecommendationServiceClient recommendationServiceClient = RecommendationServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 RecommendRequest request = new RecommendRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServingConfigAsServingConfigName = ServingConfigName.FromProjectLocationDataStoreServingConfig(\"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\", \"[SERVING_CONFIG]\"),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserEvent = new UserEvent(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PageSize = 0,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Filter = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ValidateOnly = false,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Params = { { \"\", new Value() }, },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserLabels = { { \"\", \"\" }, },\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request\u00a0 \u00a0 \u00a0 \u00a0 RecommendResponse response = recommendationServiceClient.Recommend(request);\u00a0 \u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Go API reference documentation](/go/docs/reference/cloud.google.com/go/discoveryengine/latest/apiv1beta) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-go/blob/HEAD/internal/generated/snippets/discoveryengine/apiv1beta/RecommendationClient/Recommend/main.go) \n```\npackage mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryengine \"cloud.google.com/go/discoveryengine/apiv1beta\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryenginepb \"cloud.google.com/go/discoveryengine/apiv1beta/discoveryenginepb\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 // This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 \u00a0 \u00a0 // It will require modifications to work:\u00a0 \u00a0 \u00a0 \u00a0 // - It may require correct/in-range values for request initialization.\u00a0 \u00a0 \u00a0 \u00a0 // - It may require specifying regional endpoints when creating the service client as shown in:\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options\u00a0 \u00a0 \u00a0 \u00a0 c, err := discoveryengine.NewRecommendationClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Handle error.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer c.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &discoveryenginepb.RecommendRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Fill request struct fields.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // See https://pkg.go.dev/cloud.google.com/go/discoveryengine/apiv1beta/discoveryenginepb#RecommendRequest.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := c.Recommend(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Handle error.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // TODO: Use resp.\u00a0 \u00a0 \u00a0 \u00a0 _ = resp}\n```For more information, see the [Vertex AI Search and Conversation Java API reference documentation](/java/docs/reference/google-cloud-discoveryengine/latest/overview) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-java/blob/HEAD/java-discoveryengine/samples/snippets/generated/com/google/cloud/discoveryengine/v1beta/recommendationservice/recommend/SyncRecommend.java) \n```\nimport com.google.cloud.discoveryengine.v1beta.RecommendRequest;import com.google.cloud.discoveryengine.v1beta.RecommendResponse;import com.google.cloud.discoveryengine.v1beta.RecommendationServiceClient;import com.google.cloud.discoveryengine.v1beta.ServingConfigName;import com.google.cloud.discoveryengine.v1beta.UserEvent;import com.google.protobuf.Value;import java.util.HashMap;public class SyncRecommend {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 syncRecommend();\u00a0 }\u00a0 public static void syncRecommend() throws Exception {\u00a0 \u00a0 // This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 // It will require modifications to work:\u00a0 \u00a0 // - It may require correct/in-range values for request initialization.\u00a0 \u00a0 // - It may require specifying regional endpoints when creating the service client as shown in\u00a0 \u00a0 // https://cloud.google.com/java/docs/setup#configure_endpoints_for_the_client_library\u00a0 \u00a0 try (RecommendationServiceClient recommendationServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 RecommendationServiceClient.create()) {\u00a0 \u00a0 \u00a0 RecommendRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RecommendRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setServingConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServingConfigName.ofProjectLocationDataStoreServingConfigName(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\", \"[SERVING_CONFIG]\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setUserEvent(UserEvent.newBuilder().build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setPageSize(883849137)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFilter(\"filter-1274492040\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setValidateOnly(true)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .putAllParams(new HashMap<String, Value>())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .putAllUserLabels(new HashMap<String, String>())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 RecommendResponse response = recommendationServiceClient.recommend(request);\u00a0 \u00a0 }\u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Node.js API reference documentation](/nodejs/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-node/blob/HEAD/packages/google-cloud-discoveryengine/samples/generated/v1beta/recommendation_service.recommend.js) \n```\n/**\u00a0* This snippet has been automatically generated and should be regarded as a code template only.\u00a0* It will require modifications to work.\u00a0* It may require correct/in-range values for request initialization.\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*//**\u00a0* \u00a0Required. Full resource name of a\u00a0* \u00a0ServingConfig google.cloud.discoveryengine.v1beta.ServingConfig:\u00a0* \u00a0`projects/* /locations/global/collections/* /engines/* /servingConfigs/*`, or\u00a0* \u00a0`projects/* /locations/global/collections/* /dataStores/* /servingConfigs/*`\u00a0* \u00a0One default serving config is created along with your recommendation engine\u00a0* \u00a0creation. The engine ID will be used as the ID of the default serving\u00a0* \u00a0config. For example, for Engine\u00a0* \u00a0`projects/* /locations/global/collections/* /engines/my-engine`, you can use\u00a0* \u00a0`projects/* /locations/global/collections/* /engines/my-engine/servingConfigs/my-engine`\u00a0* \u00a0for your\u00a0* \u00a0RecommendationService.Recommend google.cloud.discoveryengine.v1beta.RecommendationService.Recommend \u00a0* \u00a0requests.\u00a0*/// const servingConfig = 'abc123'/**\u00a0* \u00a0Required. Context about the user, what they are looking at and what action\u00a0* \u00a0they took to trigger the Recommend request. Note that this user event\u00a0* \u00a0detail won't be ingested to userEvent logs. Thus, a separate userEvent\u00a0* \u00a0write request is required for event logging.\u00a0* \u00a0Don't set\u00a0* \u00a0UserEvent.user_pseudo_id google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id \u00a0* \u00a0or\u00a0* \u00a0UserEvent.user_info.user_id google.cloud.discoveryengine.v1beta.UserInfo.user_id \u00a0* \u00a0to the same fixed ID for different users. If you are trying to receive\u00a0* \u00a0non-personalized recommendations (not recommended; this can negatively\u00a0* \u00a0impact model performance), instead set\u00a0* \u00a0UserEvent.user_pseudo_id google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id \u00a0* \u00a0to a random unique ID and leave\u00a0* \u00a0UserEvent.user_info.user_id google.cloud.discoveryengine.v1beta.UserInfo.user_id \u00a0* \u00a0unset.\u00a0*/// const userEvent = {}/**\u00a0* \u00a0Maximum number of results to return. Set this property\u00a0* \u00a0to the number of recommendation results needed. If zero, the service will\u00a0* \u00a0choose a reasonable default. The maximum allowed value is 100. Values\u00a0* \u00a0above 100 will be coerced to 100.\u00a0*/// const pageSize = 1234/**\u00a0* \u00a0Filter for restricting recommendation results with a length limit of 5,000\u00a0* \u00a0characters. Currently, only filter expressions on the `filter_tags`\u00a0* \u00a0attribute is supported.\u00a0* \u00a0Examples:\u00a0* \u00a0 * `(filter_tags: ANY(\"Red\", \"Blue\") OR filter_tags: ANY(\"Hot\", \"Cold\"))`\u00a0* \u00a0 * `(filter_tags: ANY(\"Red\", \"Blue\")) AND NOT (filter_tags: ANY(\"Green\"))`\u00a0* \u00a0If `attributeFilteringSyntax` is set to true under the `params` field, then\u00a0* \u00a0attribute-based expressions are expected instead of the above described\u00a0* \u00a0tag-based syntax. Examples:\u00a0* \u00a0 * (launguage: ANY(\"en\", \"es\")) AND NOT (categories: ANY(\"Movie\"))\u00a0* \u00a0 * (available: true) AND\u00a0* \u00a0 \u00a0 (launguage: ANY(\"en\", \"es\")) OR (categories: ANY(\"Movie\"))\u00a0* \u00a0If your filter blocks all results, the API will return generic\u00a0* \u00a0(unfiltered) popular Documents. If you only want results strictly matching\u00a0* \u00a0the filters, set `strictFiltering` to True in\u00a0* \u00a0RecommendRequest.params google.cloud.discoveryengine.v1beta.RecommendRequest.params \u00a0* \u00a0to receive empty results instead.\u00a0* \u00a0Note that the API will never return\u00a0* \u00a0Document google.cloud.discoveryengine.v1beta.Document s with\u00a0* \u00a0`storageStatus` of `EXPIRED` or `DELETED` regardless of filter choices.\u00a0*/// const filter = 'abc123'/**\u00a0* \u00a0Use validate only mode for this recommendation query. If set to true, a\u00a0* \u00a0fake model will be used that returns arbitrary Document IDs.\u00a0* \u00a0Note that the validate only mode should only be used for testing the API,\u00a0* \u00a0or if the model is not ready.\u00a0*/// const validateOnly = true/**\u00a0* \u00a0Additional domain specific parameters for the recommendations.\u00a0* \u00a0Allowed values:\u00a0* \u00a0* `returnDocument`: Boolean. If set to true, the associated Document\u00a0* \u00a0 \u00a0 object will be returned in\u00a0* \u00a0 \u00a0 RecommendResponse.RecommendationResult.document google.cloud.discoveryengine.v1beta.RecommendResponse.RecommendationResult.document.\u00a0* \u00a0* `returnScore`: Boolean. If set to true, the recommendation 'score'\u00a0* \u00a0 \u00a0 corresponding to each returned Document will be set in\u00a0* \u00a0 \u00a0 RecommendResponse.RecommendationResult.metadata google.cloud.discoveryengine.v1beta.RecommendResponse.RecommendationResult.metadata.\u00a0* \u00a0 \u00a0 The given 'score' indicates the probability of a Document conversion\u00a0* \u00a0 \u00a0 given the user's context and history.\u00a0* \u00a0* `strictFiltering`: Boolean. True by default. If set to false, the service\u00a0* \u00a0 \u00a0 will return generic (unfiltered) popular Documents instead of empty if\u00a0* \u00a0 \u00a0 your filter blocks all recommendation results.\u00a0* \u00a0* `diversityLevel`: String. Default empty. If set to be non-empty, then\u00a0* \u00a0 \u00a0 it needs to be one of:\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`no-diversity`\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`low-diversity`\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`medium-diversity`\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`high-diversity`\u00a0* \u00a0 \u00a0 \u00a0* \u00a0`auto-diversity`\u00a0* \u00a0 \u00a0 This gives request-level control and adjusts recommendation results\u00a0* \u00a0 \u00a0 based on Document category.\u00a0* \u00a0* `attributeFilteringSyntax`: Boolean. False by default. If set to true,\u00a0* \u00a0 \u00a0 the `filter` field is interpreted according to the new,\u00a0* \u00a0 \u00a0 attribute-based syntax.\u00a0*/// const params = [1,2,3,4]/**\u00a0* \u00a0The user labels applied to a resource must meet the following requirements:\u00a0* \u00a0* Each resource can have multiple labels, up to a maximum of 64.\u00a0* \u00a0* Each label must be a key-value pair.\u00a0* \u00a0* Keys have a minimum length of 1 character and a maximum length of 63\u00a0* \u00a0 \u00a0characters and cannot be empty. Values can be empty and have a maximum\u00a0* \u00a0 \u00a0length of 63 characters.\u00a0* \u00a0* Keys and values can contain only lowercase letters, numeric characters,\u00a0* \u00a0 \u00a0underscores, and dashes. All characters must use UTF-8 encoding, and\u00a0* \u00a0 \u00a0international characters are allowed.\u00a0* \u00a0* The key portion of a label must be unique. However, you can use the same\u00a0* \u00a0 \u00a0key with multiple resources.\u00a0* \u00a0* Keys must start with a lowercase letter or international character.\u00a0* \u00a0See Requirements for\u00a0* \u00a0labels (https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)\u00a0* \u00a0for more details.\u00a0*/// const userLabels = [1,2,3,4]// Imports the Discoveryengine libraryconst {RecommendationServiceClient} = require('@google-cloud/discoveryengine').v1beta;// Instantiates a clientconst discoveryengineClient = new RecommendationServiceClient();async function callRecommend() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 servingConfig,\u00a0 \u00a0 userEvent,\u00a0 };\u00a0 // Run request\u00a0 const response = await discoveryengineClient.recommend(request);\u00a0 console.log(response);}callRecommend();\n```For more information, see the [Vertex AI Search and Conversation PHP API reference documentation](/php/docs/reference/cloud-discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-php/blob/HEAD/DiscoveryEngine/samples/V1beta/RecommendationServiceClient/recommend.php) \n```\nuse Google\\ApiCore\\ApiException;use Google\\Cloud\\DiscoveryEngine\\V1beta\\Client\\RecommendationServiceClient;use Google\\Cloud\\DiscoveryEngine\\V1beta\\RecommendRequest;use Google\\Cloud\\DiscoveryEngine\\V1beta\\RecommendResponse;use Google\\Cloud\\DiscoveryEngine\\V1beta\\UserEvent;/**\u00a0* Makes a recommendation, which requires a contextual user event.\u00a0*\u00a0* @param string $formattedServingConfig Full resource name of a\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [ServingConfig][google.cloud.discoveryengine.v1beta.ServingConfig]:\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/&#42;/engines/&#42;/servingConfigs/*`, or\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/&#42;/dataStores/&#42;/servingConfigs/*`\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 One default serving config is created along with your recommendation engine\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 creation. The engine ID will be used as the ID of the default serving\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 config. For example, for Engine\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/&#42;/engines/my-engine`, you can use\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/&#42;/engines/my-engine/servingConfigs/my-engine`\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for your\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [RecommendationService.Recommend][google.cloud.discoveryengine.v1beta.RecommendationService.Recommend]\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests. Please see\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {@see RecommendationServiceClient::servingConfigName()} for help formatting this field.\u00a0* @param string $userEventEventType \u00a0 \u00a0 User event type. Allowed values are:\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Generic values:\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `search`: Search for Documents.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `view-item`: Detailed page view of a Document.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `view-item-list`: View of a panel or ordered list of Documents.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `view-home-page`: View of the home page.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `view-category-page`: View of a category page, e.g. Home > Men > Jeans\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Retail-related values:\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `add-to-cart`: Add an item(s) to cart, e.g. in Retail online shopping\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `purchase`: Purchase an item(s)\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Media-related values:\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `media-play`: Start/resume watching a video, playing a song, etc.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * `media-complete`: Finished or stopped midway through a video, song, etc.\u00a0* @param string $userEventUserPseudoId \u00a0A unique identifier for tracking visitors.\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 For example, this could be implemented with an HTTP cookie, which should be\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 able to uniquely identify a visitor on a single device. This unique\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 identifier should not change if the visitor log in/out of the website.\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Do not set the field to the same fixed ID for different users. This mixes\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 the event history of those users together, which results in degraded model\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 quality.\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The field must be a UTF-8 encoded string with a length limit of 128\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.\u00a0*\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The field should not contain PII or user-data. We recommend to use Google\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Analytics [Client\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ID](https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#clientId)\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for this field.\u00a0*/function recommend_sample(\u00a0 \u00a0 string $formattedServingConfig,\u00a0 \u00a0 string $userEventEventType,\u00a0 \u00a0 string $userEventUserPseudoId): void {\u00a0 \u00a0 // Create a client.\u00a0 \u00a0 $recommendationServiceClient = new RecommendationServiceClient();\u00a0 \u00a0 // Prepare the request message.\u00a0 \u00a0 $userEvent = (new UserEvent())\u00a0 \u00a0 \u00a0 \u00a0 ->setEventType($userEventEventType)\u00a0 \u00a0 \u00a0 \u00a0 ->setUserPseudoId($userEventUserPseudoId);\u00a0 \u00a0 $request = (new RecommendRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setServingConfig($formattedServingConfig)\u00a0 \u00a0 \u00a0 \u00a0 ->setUserEvent($userEvent);\u00a0 \u00a0 // Call the API and handle any network failures.\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 \u00a0 /** @var RecommendResponse $response */\u00a0 \u00a0 \u00a0 \u00a0 $response = $recommendationServiceClient->recommend($request);\u00a0 \u00a0 \u00a0 \u00a0 printf('Response data: %s' . PHP_EOL, $response->serializeToJsonString());\u00a0 \u00a0 } catch (ApiException $ex) {\u00a0 \u00a0 \u00a0 \u00a0 printf('Call failed with message: %s' . PHP_EOL, $ex->getMessage());\u00a0 \u00a0 }}/**\u00a0* Helper to execute the sample.\u00a0*\u00a0* This sample has been automatically generated and should be regarded as a code\u00a0* template only. It will require modifications to work:\u00a0* \u00a0- It may require correct/in-range values for request initialization.\u00a0* \u00a0- It may require specifying regional endpoints when creating the service client,\u00a0* \u00a0 \u00a0please see the apiEndpoint client configuration option for more details.\u00a0*/function callSample(): void{\u00a0 \u00a0 $formattedServingConfig = RecommendationServiceClient::servingConfigName(\u00a0 \u00a0 \u00a0 \u00a0 '[PROJECT]',\u00a0 \u00a0 \u00a0 \u00a0 '[LOCATION]',\u00a0 \u00a0 \u00a0 \u00a0 '[DATA_STORE]',\u00a0 \u00a0 \u00a0 \u00a0 '[SERVING_CONFIG]'\u00a0 \u00a0 );\u00a0 \u00a0 $userEventEventType = '[EVENT_TYPE]';\u00a0 \u00a0 $userEventUserPseudoId = '[USER_PSEUDO_ID]';\u00a0 \u00a0 recommend_sample($formattedServingConfig, $userEventEventType, $userEventUserPseudoId);}\n```For more information, see the [Vertex AI Search and Conversation Python API reference documentation](/python/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-python/blob/HEAD/packages/google-cloud-discoveryengine/samples/generated_samples/discoveryengine_v1beta_generated_recommendation_service_recommend_sync.py) \n```\n# This snippet has been automatically generated and should be regarded as a# code template only.# It will require modifications to work:# - It may require correct/in-range values for request initialization.# - It may require specifying regional endpoints when creating the service# \u00a0 client as shown in:# \u00a0 https://googleapis.dev/python/google-api-core/latest/client_options.htmlfrom google.cloud import discoveryengine_v1betadef sample_recommend():\u00a0 \u00a0 # Create a client\u00a0 \u00a0 client = discoveryengine_v1beta.RecommendationServiceClient()\u00a0 \u00a0 # Initialize request argument(s)\u00a0 \u00a0 user_event = discoveryengine_v1beta.UserEvent()\u00a0 \u00a0 user_event.event_type = \"event_type_value\"\u00a0 \u00a0 user_event.user_pseudo_id = \"user_pseudo_id_value\"\u00a0 \u00a0 request = discoveryengine_v1beta.RecommendRequest(\u00a0 \u00a0 \u00a0 \u00a0 serving_config=\"serving_config_value\",\u00a0 \u00a0 \u00a0 \u00a0 user_event=user_event,\u00a0 \u00a0 )\u00a0 \u00a0 # Make the request\u00a0 \u00a0 response = client.recommend(request=request)\u00a0 \u00a0 # Handle the response\u00a0 \u00a0 print(response)\n```\nFor more information, see the [Vertex AI Search and Conversation Ruby API reference documentation](/ruby/docs/reference/google-cloud-discovery_engine-v1beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-discovery_engine-v1beta/snippets/recommendation_service/recommend.rb) \n```\nrequire \"google/cloud/discovery_engine/v1beta\"\n### Snippet for the recommend call in the RecommendationService service\n## This snippet has been automatically generated and should be regarded as a code# template only. It will require modifications to work:# - It may require correct/in-range values for request initialization.# - It may require specifying regional endpoints when creating the service# client as shown in https://cloud.google.com/ruby/docs/reference.\n## This is an auto-generated example demonstrating basic usage of# Google::Cloud::DiscoveryEngine::V1beta::RecommendationService::Client#recommend.#def recommend\u00a0 # Create a client object. The client can be reused for multiple calls.\u00a0 client = Google::Cloud::DiscoveryEngine::V1beta::RecommendationService::Client.new\u00a0 # Create a request. To set request fields, pass in keyword arguments.\u00a0 request = Google::Cloud::DiscoveryEngine::V1beta::RecommendRequest.new\u00a0 # Call the recommend method.\u00a0 result = client.recommend request\u00a0 # The returned object is of type Google::Cloud::DiscoveryEngine::V1beta::RecommendResponse.\u00a0 p resultend\n```", "guide": "Vertex AI Search and Conversation"}