{"title": "Vertex AI Search and Conversation - Get search results", "url": "https://cloud.google.com/generative-ai-app-builder/docs/preview-search-results?hl=zh-cn", "abstract": "# Vertex AI Search and Conversation - Get search results\nThis page shows how to preview search results using the Google Cloud console and get search results using the API. See the REST tab for examples of API calls that can help you integrate search into your app.\n**Note:** Depending on the amount of data, it can take hours after data ingestion until the preview feature works.\n", "content": "## Get search results for an app with website data\nTo use the Google Cloud console to preview search results for an app with website data, follow these steps:- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/start) \n- Click the name of the app that you want to edit.\n- Click **Preview** .\n- Open the **Preview** page in the console.\n- Type a search query.- If you enabled autocomplete, you see a list of autocomplete suggestions below the search bar as you type.\n- Click **Enter** to submit the query.- A list of search results appears below the search bar.\n- Each result contains a title, a snippet, and a URL.\n- Clicking a result opens that URL.\n- Click the arrow below the results list to load the next page of results.\nTo use the API to get search results for an app with website data, use the [servingConfigs.search](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.dataStores.servingConfigs/search) method:- Find your data store ID. If you already have your data store ID, skip to the next step.- In the Google Cloud console, go to the **Search and Conversation** page and in the navigation menu, click **Data stores** . [Go to the Data stores page](https://console.cloud.google.com/gen-app-builder/data-stores) \n- Click the name of your data store.\n- On the **Data** page for your data store, get the data store ID.\n- Get search results.```\ncurl -X POST -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1beta/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/servingConfigs/default_search:search\" \\-d '{\"servingConfig\": \"projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/servingConfigs/default_search\",\"query\": \"QUERY\",\"pageSize\": \"PAGE_SIZE\",\"offset\": \"OFFSET\",\"orderBy\": \"ORDER_BY\",\"params\": {\"user_country_code\": \"USER_COUNTRY_CODE\",\"searchType\": \"SEARCH_TYPE\"},\"filter\": \"FILTER\"\"contentSearchSpec\": {\u00a0 \u00a0\"searchResultMode\": \"RESULT_MODE\"\u00a0}}'\n```- : The ID of your project.\n- : The ID of your data store.\n- : The query text to search.\n- : The number of results returned by the search. The default value is 10.- Values below 1 throw an error.\n- Values above 100 cause the value to be set to 10.\n- : The starting index of the results. The default value is 0.For example, if the offset is 2, the page size is 10, and there are 15 results to return, results 2 through 12 are returned on the first page.\n- : The order in which the results are arranged. The attribute to sort on must have a numerical interpretation\u2014for example, price or date.\n- : The location of the user. This key-value pair is the only supported entry for the `params` map field. The default value is empty. For acceptable values, see [Country Codes](https://developers.google.com/custom-search/docs/json_api_reference#countryCodes) in the Programmable Search Engine JSON API reference documentation.\n- : The type of search to be performed. The default value is 0 for document search. The other supported value is 1 for image search.\n- : A text field for filtering your search using a filter expression. The default value is an empty string. For more information about using the `filter` field, see [Filter website search](/generative-ai-app-builder/docs/filter-website-search) .\n- : Determines whether search results are returned as full documents or in chunks. To get chunks, the data store must have document chunking turned on. Accepted values are `documents` and `chunks` . When chunking is turned on for a data store, the default value is `chunks` . Otherwise, the default is `documents` . For information about document chunking, see [Parse and chunk documents](/generative-ai-app-builder/docs/parse-chunk-documents) .For more information, see the [Vertex AI Search and Conversation C# API reference documentation](/dotnet/docs/reference/Google.Cloud.DiscoveryEngine.V1Beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-dotnet/blob/HEAD/apis/Google.Cloud.DiscoveryEngine.V1Beta/Google.Cloud.DiscoveryEngine.V1Beta.GeneratedSnippets/SearchServiceClient.SearchRequestObjectSnippet.g.cs) \n```\nusing Google.Api.Gax;using Google.Cloud.DiscoveryEngine.V1Beta;using Google.Protobuf.WellKnownTypes;using System;public sealed partial class GeneratedSearchServiceClientSnippets{\u00a0 \u00a0 /// <summary>Snippet for Search</summary>\u00a0 \u00a0 /// <remarks>\u00a0 \u00a0 /// This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 /// It will require modifications to work:\u00a0 \u00a0 /// - It may require correct/in-range values for request initialization.\u00a0 \u00a0 /// - It may require specifying regional endpoints when creating the service client as shown in\u00a0 \u00a0 /// \u00a0 https://cloud.google.com/dotnet/docs/reference/help/client-configuration#endpoint.\u00a0 \u00a0 /// </remarks>\u00a0 \u00a0 public void SearchRequestObject()\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 SearchServiceClient searchServiceClient = SearchServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 SearchRequest request = new SearchRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServingConfigAsServingConfigName = ServingConfigName.FromProjectLocationDataStoreServingConfig(\"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\", \"[SERVING_CONFIG]\"),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BranchAsBranchName = BranchName.FromProjectLocationDataStoreBranch(\"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\", \"[BRANCH]\"),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Query = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Offset = 0,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Filter = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 OrderBy = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FacetSpecs =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new SearchRequest.Types.FacetSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BoostSpec = new SearchRequest.Types.BoostSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Params = { { \"\", new Value() }, },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryExpansionSpec = new SearchRequest.Types.QueryExpansionSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SpellCorrectionSpec = new SearchRequest.Types.SpellCorrectionSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserPseudoId = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ImageQuery = new SearchRequest.Types.ImageQuery(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SafeSearch = false,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserInfo = new UserInfo(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserLabels = { { \"\", \"\" }, },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EmbeddingSpec = new SearchRequest.Types.EmbeddingSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ContentSearchSpec = new SearchRequest.Types.ContentSearchSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RankingExpression = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CanonicalFilter = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DataStoreSpecs =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new SearchRequest.Types.DataStoreSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request\u00a0 \u00a0 \u00a0 \u00a0 PagedEnumerable<SearchResponse, SearchResponse.Types.SearchResult> response = searchServiceClient.Search(request);\u00a0 \u00a0 \u00a0 \u00a0 // Iterate over all response items, lazily performing RPCs as required\u00a0 \u00a0 \u00a0 \u00a0 foreach (SearchResponse.Types.SearchResult item in response)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Do something with each item\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(item);\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Or iterate over pages (of server-defined size), performing one RPC per page\u00a0 \u00a0 \u00a0 \u00a0 foreach (SearchResponse page in response.AsRawResponses())\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Do something with each page of items\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"A page of results:\");\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 foreach (SearchResponse.Types.SearchResult item in page)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Do something with each item\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(item);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required\u00a0 \u00a0 \u00a0 \u00a0 int pageSize = 10;\u00a0 \u00a0 \u00a0 \u00a0 Page<SearchResponse.Types.SearchResult> singlePage = response.ReadPage(pageSize);\u00a0 \u00a0 \u00a0 \u00a0 // Do something with the page of items\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine($\"A page of {pageSize} results (unless it's the final page):\");\u00a0 \u00a0 \u00a0 \u00a0 foreach (SearchResponse.Types.SearchResult item in singlePage)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Do something with each item\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(item);\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Store the pageToken, for when the next page is required.\u00a0 \u00a0 \u00a0 \u00a0 string nextPageToken = singlePage.NextPageToken;\u00a0 \u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Go API reference documentation](/go/docs/reference/cloud.google.com/go/discoveryengine/latest/apiv1beta) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/discoveryengine/search.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryengine \"cloud.google.com/go/discoveryengine/apiv1beta\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryenginepb \"cloud.google.com/go/discoveryengine/apiv1beta/discoveryenginepb\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/api/iterator\")// search searches for a query in a search engine given the Google Cloud Project ID,// Location, and Search Engine ID.//// This example uses the default search engine.func search(projectID, location, searchEngineID, query string) error {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 // Create a client\u00a0 \u00a0 \u00a0 \u00a0 client, err := discoveryengine.NewSearchClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 // Full resource name of search engine serving config\u00a0 \u00a0 \u00a0 \u00a0 servingConfig := fmt.Sprintf(\"projects/%s/locations/%s/collections/default_collection/dataStores/%s/servingConfigs/default_serving_config\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectID, location, searchEngineID)\u00a0 \u00a0 \u00a0 \u00a0 searchRequest := &discoveryenginepb.SearchRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServingConfig: servingConfig,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Query: \u00a0 \u00a0 \u00a0 \u00a0 query,\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 it := client.Search(ctx, searchRequest)\u00a0 \u00a0 \u00a0 \u00a0 for {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resp, err := it.Next()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err == iterator.Done {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"%+v\\n\", resp)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```For more information, see the [Vertex AI Search and Conversation Java API reference documentation](/java/docs/reference/google-cloud-discoveryengine/latest/overview) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/discoveryengine/src/main/java/discoveryengine/v1/Search.java) \n```\nimport com.google.cloud.discoveryengine.v1.SearchRequest;import com.google.cloud.discoveryengine.v1.SearchResponse;import com.google.cloud.discoveryengine.v1.SearchServiceClient;import com.google.cloud.discoveryengine.v1.SearchServiceSettings;import com.google.cloud.discoveryengine.v1.ServingConfigName;import java.io.IOException;import java.util.concurrent.ExecutionException;public class Search {\u00a0 public static void main() throws IOException, ExecutionException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 // Project ID or project number of the Cloud project you want to use.\u00a0 \u00a0 String projectId = \"PROJECT_ID\";\u00a0 \u00a0 // Location of the data store. Options: \"global\", \"us\", \"eu\"\u00a0 \u00a0 String location = \"global\";\u00a0 \u00a0 // Collection containing the data store.\u00a0 \u00a0 String collectionId = \"default_collection\";\u00a0 \u00a0 // Data store ID.\u00a0 \u00a0 String dataStoreId = \"DATA_STORE_ID\";\u00a0 \u00a0 // Serving configuration. Options: \"default_search\"\u00a0 \u00a0 String servingConfigId = \"default_search\";\u00a0 \u00a0 // Search Query for the data store.\u00a0 \u00a0 String searchQuery = \"Google\";\u00a0 \u00a0 search(projectId, location, collectionId, dataStoreId, servingConfigId, searchQuery);\u00a0 }\u00a0 /** Performs a search on a given datastore. */\u00a0 public static void search(\u00a0 \u00a0 \u00a0 String projectId,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String collectionId,\u00a0 \u00a0 \u00a0 String dataStoreId,\u00a0 \u00a0 \u00a0 String servingConfigId,\u00a0 \u00a0 \u00a0 String searchQuery)\u00a0 \u00a0 \u00a0 throws IOException, ExecutionException {\u00a0 \u00a0 // For more information, refer to:\u00a0 \u00a0 // https://cloud.google.com/generative-ai-app-builder/docs/locations#specify_a_multi-region_for_your_data_store\u00a0 \u00a0 String endpoint = (location.equals(\"global\")) \u00a0 \u00a0 \u00a0 \u00a0 ? String.format(\"discoveryengine.googleapis.com:443\", location) \u00a0 \u00a0 \u00a0 \u00a0 : String.format(\"%s-discoveryengine.googleapis.com:443\", location);\u00a0 \u00a0 SearchServiceSettings settings =\u00a0 \u00a0 \u00a0 \u00a0 SearchServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the `searchServiceClient.close()` method on the client to safely\u00a0 \u00a0 // clean up any remaining background resources.\u00a0 \u00a0 try (SearchServiceClient searchServiceClient = SearchServiceClient.create(settings)) {\u00a0 \u00a0 \u00a0 SearchRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SearchRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setServingConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServingConfigName.formatProjectLocationCollectionDataStoreServingConfigName(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectId, location, collectionId, dataStoreId, servingConfigId))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQuery(searchQuery)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setPageSize(10)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 SearchResponse response = searchServiceClient.search(request).getPage().getResponse();\u00a0 \u00a0 \u00a0 for (SearchResponse.SearchResult element : response.getResultsList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Response content: \" + element);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Node.js API reference documentation](/nodejs/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/discoveryengine/search.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const location = 'YOUR_LOCATION'; \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Options: 'global', 'us', 'eu'// const collectionId = 'default_collection'; \u00a0 \u00a0 // Options: 'default_collection'// const dataStoreId = 'YOUR_DATA_STORE_ID' \u00a0 \u00a0 \u00a0 // Create in Cloud Console// const servingConfigId = 'default_config'; \u00a0 \u00a0 \u00a0// Options: 'default_config'// const searchQuery = 'Google';const {SearchServiceClient} = require('@google-cloud/discoveryengine').v1beta;// For more information, refer to:// https://cloud.google.com/generative-ai-app-builder/docs/locations#specify_a_multi-region_for_your_data_storeconst apiEndpoint =\u00a0 location === 'global'\u00a0 \u00a0 ? 'discoveryengine.googleapis.com'\u00a0 \u00a0 : `${location}-discoveryengine.googleapis.com`;// Instantiates a clientconst client = new SearchServiceClient({apiEndpoint: apiEndpoint});async function search() {\u00a0 // The full resource name of the search engine serving configuration.\u00a0 // Example: projects/{projectId}/locations/{location}/collections/{collectionId}/dataStores/{dataStoreId}/servingConfigs/{servingConfigId}\u00a0 // You must create a search engine in the Cloud Console first.\u00a0 const name = client.projectLocationCollectionDataStoreServingConfigPath(\u00a0 \u00a0 projectId,\u00a0 \u00a0 location,\u00a0 \u00a0 collectionId,\u00a0 \u00a0 dataStoreId,\u00a0 \u00a0 servingConfigId\u00a0 );\u00a0 const request = {\u00a0 \u00a0 pageSize: 10,\u00a0 \u00a0 query: searchQuery,\u00a0 \u00a0 servingConfig: name,\u00a0 };\u00a0 const IResponseParams = {\u00a0 \u00a0 ISearchResult: 0,\u00a0 \u00a0 ISearchRequest: 1,\u00a0 \u00a0 ISearchResponse: 2,\u00a0 };\u00a0 // Perform search request\u00a0 const response = await client.search(request, {\u00a0 \u00a0 // Warning: Should always disable autoPaginate to avoid iterate through all pages.\u00a0 \u00a0 //\u00a0 \u00a0 // By default NodeJS SDK returns an iterable where you can iterate through all\u00a0 \u00a0 // search results instead of only the limited number of results requested on\u00a0 \u00a0 // pageSize, by sending multiple sequential search requests page-by-page while\u00a0 \u00a0 // iterating, until it exhausts all the search results. This will be unexpected and\u00a0 \u00a0 // may cause high Search API usage and long wait time, especially when the matched\u00a0 \u00a0 // document numbers are huge.\u00a0 \u00a0 autoPaginate: false,\u00a0 });\u00a0 const results = response[IResponseParams.ISearchResponse].results;\u00a0 for (const result of results) {\u00a0 \u00a0 console.log(result);\u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation PHP API reference documentation](/php/docs/reference/cloud-discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-php/blob/HEAD/DiscoveryEngine/samples/V1beta/SearchServiceClient/search.php) \n```\nuse Google\\ApiCore\\ApiException;use Google\\ApiCore\\PagedListResponse;use Google\\Cloud\\DiscoveryEngine\\V1beta\\Client\\SearchServiceClient;use Google\\Cloud\\DiscoveryEngine\\V1beta\\SearchRequest;use Google\\Cloud\\DiscoveryEngine\\V1beta\\SearchResponse\\SearchResult;/**\u00a0* Performs a search.\u00a0*\u00a0* @param string $formattedServingConfig The resource name of the Search serving config, such as\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/default_collection/engines/&#42;/servingConfigs/default_serving_config`,\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 or\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 This field is used to identify the serving configuration name, set\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 of models used to make the search. Please see\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {@see SearchServiceClient::servingConfigName()} for help formatting this field.\u00a0*/function search_sample(string $formattedServingConfig): void{\u00a0 \u00a0 // Create a client.\u00a0 \u00a0 $searchServiceClient = new SearchServiceClient();\u00a0 \u00a0 // Prepare the request message.\u00a0 \u00a0 $request = (new SearchRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setServingConfig($formattedServingConfig);\u00a0 \u00a0 // Call the API and handle any network failures.\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 \u00a0 /** @var PagedListResponse $response */\u00a0 \u00a0 \u00a0 \u00a0 $response = $searchServiceClient->search($request);\u00a0 \u00a0 \u00a0 \u00a0 /** @var SearchResult $element */\u00a0 \u00a0 \u00a0 \u00a0 foreach ($response as $element) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf('Element data: %s' . PHP_EOL, $element->serializeToJsonString());\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 } catch (ApiException $ex) {\u00a0 \u00a0 \u00a0 \u00a0 printf('Call failed with message: %s' . PHP_EOL, $ex->getMessage());\u00a0 \u00a0 }}/**\u00a0* Helper to execute the sample.\u00a0*\u00a0* This sample has been automatically generated and should be regarded as a code\u00a0* template only. It will require modifications to work:\u00a0* \u00a0- It may require correct/in-range values for request initialization.\u00a0* \u00a0- It may require specifying regional endpoints when creating the service client,\u00a0* \u00a0 \u00a0please see the apiEndpoint client configuration option for more details.\u00a0*/function callSample(): void{\u00a0 \u00a0 $formattedServingConfig = SearchServiceClient::servingConfigName(\u00a0 \u00a0 \u00a0 \u00a0 '[PROJECT]',\u00a0 \u00a0 \u00a0 \u00a0 '[LOCATION]',\u00a0 \u00a0 \u00a0 \u00a0 '[DATA_STORE]',\u00a0 \u00a0 \u00a0 \u00a0 '[SERVING_CONFIG]'\u00a0 \u00a0 );\u00a0 \u00a0 search_sample($formattedServingConfig);}\n```For more information, see the [Vertex AI Search and Conversation Python API reference documentation](/python/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/discoveryengine/search_sample.py) \n```\nfrom typing import Listfrom google.api_core.client_options import ClientOptionsfrom google.cloud import discoveryengine_v1 as discoveryengine# TODO(developer): Uncomment these variables before running the sample.# project_id = \"YOUR_PROJECT_ID\"# location = \"YOUR_LOCATION\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Values: \"global\", \"us\", \"eu\"# engine_id = \"YOUR_APP_ID\"# search_query = \"YOUR_SEARCH_QUERY\"def search_sample(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 engine_id: str,\u00a0 \u00a0 search_query: str,) -> List[discoveryengine.SearchResponse]:\u00a0 \u00a0 # \u00a0For more information, refer to:\u00a0 \u00a0 # https://cloud.google.com/generative-ai-app-builder/docs/locations#specify_a_multi-region_for_your_data_store\u00a0 \u00a0 client_options = (\u00a0 \u00a0 \u00a0 \u00a0 ClientOptions(api_endpoint=f\"{location}-discoveryengine.googleapis.com\")\u00a0 \u00a0 \u00a0 \u00a0 if location != \"global\"\u00a0 \u00a0 \u00a0 \u00a0 else None\u00a0 \u00a0 )\u00a0 \u00a0 # Create a client\u00a0 \u00a0 client = discoveryengine.SearchServiceClient(client_options=client_options)\u00a0 \u00a0 # The full resource name of the search app serving config\u00a0 \u00a0 serving_config = f\"projects/{project_id}/locations/{location}/collections/default_collection/engines/{engine_id}/servingConfigs/default_config\"\u00a0 \u00a0 # Optional: Configuration options for search\u00a0 \u00a0 # Refer to the `ContentSearchSpec` reference for all supported fields:\u00a0 \u00a0 # https://cloud.google.com/python/docs/reference/discoveryengine/latest/google.cloud.discoveryengine_v1.types.SearchRequest.ContentSearchSpec\u00a0 \u00a0 content_search_spec = discoveryengine.SearchRequest.ContentSearchSpec(\u00a0 \u00a0 \u00a0 \u00a0 # For information about snippets, refer to:\u00a0 \u00a0 \u00a0 \u00a0 # https://cloud.google.com/generative-ai-app-builder/docs/snippets\u00a0 \u00a0 \u00a0 \u00a0 snippet_spec=discoveryengine.SearchRequest.ContentSearchSpec.SnippetSpec(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return_snippet=True\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 # For information about search summaries, refer to:\u00a0 \u00a0 \u00a0 \u00a0 # https://cloud.google.com/generative-ai-app-builder/docs/get-search-summaries\u00a0 \u00a0 \u00a0 \u00a0 summary_spec=discoveryengine.SearchRequest.ContentSearchSpec.SummarySpec(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 summary_result_count=5,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 include_citations=True,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ignore_adversarial_query=True,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ignore_non_summary_seeking_query=True,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 model_prompt_spec=discoveryengine.SearchRequest.ContentSearchSpec.SummarySpec.ModelPromptSpec(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 preamble=\"YOUR_CUSTOM_PROMPT\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 model_spec=discoveryengine.SearchRequest.ContentSearchSpec.SummarySpec.ModelSpec(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 version=\"stable\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 )\u00a0 \u00a0 # Refer to the `SearchRequest` reference for all supported fields:\u00a0 \u00a0 # https://cloud.google.com/python/docs/reference/discoveryengine/latest/google.cloud.discoveryengine_v1.types.SearchRequest\u00a0 \u00a0 request = discoveryengine.SearchRequest(\u00a0 \u00a0 \u00a0 \u00a0 serving_config=serving_config,\u00a0 \u00a0 \u00a0 \u00a0 query=search_query,\u00a0 \u00a0 \u00a0 \u00a0 page_size=10,\u00a0 \u00a0 \u00a0 \u00a0 content_search_spec=content_search_spec,\u00a0 \u00a0 \u00a0 \u00a0 query_expansion_spec=discoveryengine.SearchRequest.QueryExpansionSpec(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 condition=discoveryengine.SearchRequest.QueryExpansionSpec.Condition.AUTO,\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 spell_correction_spec=discoveryengine.SearchRequest.SpellCorrectionSpec(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mode=discoveryengine.SearchRequest.SpellCorrectionSpec.Mode.AUTO\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 )\u00a0 \u00a0 response = client.search(request)\u00a0 \u00a0 print(response)\u00a0 \u00a0 return response\n```\nFor more information, see the [Vertex AI Search and Conversation Ruby API reference documentation](/ruby/docs/reference/google-cloud-discovery_engine-v1beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-discovery_engine-v1beta/snippets/search_service/search.rb) \n```\nrequire \"google/cloud/discovery_engine/v1beta\"\n### Snippet for the search call in the SearchService service\n## This snippet has been automatically generated and should be regarded as a code# template only. It will require modifications to work:# - It may require correct/in-range values for request initialization.# - It may require specifying regional endpoints when creating the service# client as shown in https://cloud.google.com/ruby/docs/reference.\n## This is an auto-generated example demonstrating basic usage of# Google::Cloud::DiscoveryEngine::V1beta::SearchService::Client#search.#def search\u00a0 # Create a client object. The client can be reused for multiple calls.\u00a0 client = Google::Cloud::DiscoveryEngine::V1beta::SearchService::Client.new\u00a0 # Create a request. To set request fields, pass in keyword arguments.\u00a0 request = Google::Cloud::DiscoveryEngine::V1beta::SearchRequest.new\u00a0 # Call the search method.\u00a0 result = client.search request\u00a0 # The returned object is of type Gapic::PagedEnumerable. You can iterate\u00a0 # over elements, and API calls will be issued to fetch pages as needed.\u00a0 result.each do |item|\u00a0 \u00a0 # Each element is of type ::Google::Cloud::DiscoveryEngine::V1beta::SearchResponse::SearchResult.\u00a0 \u00a0 p item\u00a0 endend\n```\n## Get search results for an app with structured or unstructured data\nYou can preview search results from the Google Cloud console or get search results using the API.\n**Note:** Structured data search is in Preview.\nTo use the Google Cloud console to preview search results for an app with structured or unstructured data, follow these steps:- Open the **Preview** page in the console.\n- Type a search query.- If you enabled autocomplete in step 1, you'll see a list of autocomplete suggestions below the search bar as you type.\n- Click **Enter** to submit the query.- A list of search results appears below the search bar.\n- If no attribute mapping is defined in the **Configurations** page, each search result appears as a list of raw attribute names and values.\n- If any attribute mappings were saved in the **Configurations** page, the search results display the same images that you see in the **Configurations** page preview.\n- If any facets were specified in the **Configurations** page, they are displayed in the same way.\n- Click the arrow below the results list to load the next page of results.To use the API to get search results for an app with structured or unstructured data, use the [servingConfigs.search](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.dataStores.servingConfigs/search) method:- Find your data store ID. If you already have your data store ID, skip to the next step.- In the Google Cloud console, go to the **Search and Conversation** page and in the navigation menu, click **Data stores** . [Go to the Data stores page](https://console.cloud.google.com/gen-app-builder/data-stores) \n- Click the name of your data store.\n- On the **Data** page for your data store, get the data store ID.\n- Get search results.```\ncurl -X POST -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1beta/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/servingConfigs/default_search:search\" \\-d '{\"query\": \"QUERY\",\"userPseudoId\": \"USER_PSEUDO_ID\",\"pageSize\": \"PAGE_SIZE\",\"offset\": \"OFFSET\",\"orderBy\": \"ORDER_BY\",\"filter\": \"FILTER\",\"boostSpec\": \"BOOST_SPEC\",\"facetSpec\": \"FACET_SPEC\",\"queryExpansionSpec\": \"QUERY_EXPANSION_SPEC\",\"spellCorrectionSpec\": \"SPELL_CORRECTION_SPEC\",\"contentSearchSpec\": \"CONTENT_SEARCH_SPEC\"}'\n```- : The ID of your project.\n- : The ID your data store.\n- : The query text to search.\n- : Optional. This is a pseudonymized identifier for tracking a search visitor. Google strongly recommends using this field, which improves model performance and personalization quality. You can use an HTTP cookie for this field, which uniquely identifies a visitor on a single device. This identifier does not change when the visitor signs in or out of a website. Don't set this field to the same identifier for multiple users\u2014this would combine their event histories and degrade model quality. Don't include personally identifiable information (PII) in this field.\n- : Optional. The number of results returned by the search. The default value is 50 for structured and unstructured search and 10 for website search.- Values below 0 cause an error.\n- Values above 100 cause the value to be set to 100.\n- : Optional. The starting index of the results. The default value is 0.For example, if the offset is 2, the page size is 10, and there are 15 results to return, results 2 through 11 are returned on the first page.\n- : Optional. The order in which the results are  arranged.\n- : Optional. A text field for filtering your search using a filter expression. The default value is an empty string, which means no filter is applied.Example: `color: ANY(\"red\", \"blue\") AND score: IN(*, 100.0e)`For more information, see [Filter search for structured or unstructureddata](/generative-ai-app-builder/docs/filter-search-metadata) .\n- : Optional. Boost spec allows you to boost/bury documents. Values:- `BOOST`: A float between -1 and 1. When the value is negative, results will be demoted (they appear later in the results). When the value is positive, results will be promoted (they appear earlier in the results).\n- `CONDITION`: A text filter string for selecting which documents to apply boost/bury. Syntax is the same as that of.\n- : Optional. A facet specification to perform faceted search.\n- : Optional. A specification to determine under which conditions query expansion should occur. Default is `DISABLED` .\n- : Optional. Specification to determine under which conditions spell correction should occur. Default is `AUTO` .\n- : Optional. For getting snippets, extractive answers, extractive segments, and search summaries. For unstructured data only. For more information, see:- [Use snippets and extractive content](/generative-ai-app-builder/docs/snippets) \n- [Get search summaries](/generative-ai-app-builder/docs/get-search-summaries) \n- Viewing guided search results in the search response:Guided search results are returned with search responses for structured and unstructured search. The guided search result contains a list of extracted attribute key-value pairs based on search result documents. This allows users to refine their search results by using some attribute keys and values as filters.In this example response, the color green was used to refine search results by issuing a new search request with the filter field specified as `_gs.color: ANY(\"green\")` :```\n{\u2026\"guidedSearchResult\": {\u00a0 \"refinementAttributes\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"attributeKey\": \"_gs.color\"\u00a0 \u00a0 \u00a0 \"attributeValue\" : \"green\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"attributeKey\": \"_gs.category\"\u00a0 \u00a0 \u00a0 \"attributeValue\" : \"shoe\"\u00a0 \u00a0 }\u00a0 ]}\u2026}\n```\nFor more information, see the [Vertex AI Search and Conversation C# API reference documentation](/dotnet/docs/reference/Google.Cloud.DiscoveryEngine.V1Beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-dotnet/blob/HEAD/apis/Google.Cloud.DiscoveryEngine.V1Beta/Google.Cloud.DiscoveryEngine.V1Beta.GeneratedSnippets/SearchServiceClient.SearchRequestObjectSnippet.g.cs) \n```\nusing Google.Api.Gax;using Google.Cloud.DiscoveryEngine.V1Beta;using Google.Protobuf.WellKnownTypes;using System;public sealed partial class GeneratedSearchServiceClientSnippets{\u00a0 \u00a0 /// <summary>Snippet for Search</summary>\u00a0 \u00a0 /// <remarks>\u00a0 \u00a0 /// This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 /// It will require modifications to work:\u00a0 \u00a0 /// - It may require correct/in-range values for request initialization.\u00a0 \u00a0 /// - It may require specifying regional endpoints when creating the service client as shown in\u00a0 \u00a0 /// \u00a0 https://cloud.google.com/dotnet/docs/reference/help/client-configuration#endpoint.\u00a0 \u00a0 /// </remarks>\u00a0 \u00a0 public void SearchRequestObject()\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 SearchServiceClient searchServiceClient = SearchServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 SearchRequest request = new SearchRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServingConfigAsServingConfigName = ServingConfigName.FromProjectLocationDataStoreServingConfig(\"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\", \"[SERVING_CONFIG]\"),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BranchAsBranchName = BranchName.FromProjectLocationDataStoreBranch(\"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\", \"[BRANCH]\"),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Query = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Offset = 0,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Filter = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 OrderBy = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FacetSpecs =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new SearchRequest.Types.FacetSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BoostSpec = new SearchRequest.Types.BoostSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Params = { { \"\", new Value() }, },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryExpansionSpec = new SearchRequest.Types.QueryExpansionSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SpellCorrectionSpec = new SearchRequest.Types.SpellCorrectionSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserPseudoId = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ImageQuery = new SearchRequest.Types.ImageQuery(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SafeSearch = false,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserInfo = new UserInfo(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserLabels = { { \"\", \"\" }, },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EmbeddingSpec = new SearchRequest.Types.EmbeddingSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ContentSearchSpec = new SearchRequest.Types.ContentSearchSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 RankingExpression = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CanonicalFilter = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DataStoreSpecs =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new SearchRequest.Types.DataStoreSpec(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request\u00a0 \u00a0 \u00a0 \u00a0 PagedEnumerable<SearchResponse, SearchResponse.Types.SearchResult> response = searchServiceClient.Search(request);\u00a0 \u00a0 \u00a0 \u00a0 // Iterate over all response items, lazily performing RPCs as required\u00a0 \u00a0 \u00a0 \u00a0 foreach (SearchResponse.Types.SearchResult item in response)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Do something with each item\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(item);\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Or iterate over pages (of server-defined size), performing one RPC per page\u00a0 \u00a0 \u00a0 \u00a0 foreach (SearchResponse page in response.AsRawResponses())\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Do something with each page of items\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"A page of results:\");\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 foreach (SearchResponse.Types.SearchResult item in page)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Do something with each item\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(item);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required\u00a0 \u00a0 \u00a0 \u00a0 int pageSize = 10;\u00a0 \u00a0 \u00a0 \u00a0 Page<SearchResponse.Types.SearchResult> singlePage = response.ReadPage(pageSize);\u00a0 \u00a0 \u00a0 \u00a0 // Do something with the page of items\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine($\"A page of {pageSize} results (unless it's the final page):\");\u00a0 \u00a0 \u00a0 \u00a0 foreach (SearchResponse.Types.SearchResult item in singlePage)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Do something with each item\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(item);\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Store the pageToken, for when the next page is required.\u00a0 \u00a0 \u00a0 \u00a0 string nextPageToken = singlePage.NextPageToken;\u00a0 \u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Go API reference documentation](/go/docs/reference/cloud.google.com/go/discoveryengine/latest/apiv1beta) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/discoveryengine/search.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryengine \"cloud.google.com/go/discoveryengine/apiv1beta\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryenginepb \"cloud.google.com/go/discoveryengine/apiv1beta/discoveryenginepb\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/api/iterator\")// search searches for a query in a search engine given the Google Cloud Project ID,// Location, and Search Engine ID.//// This example uses the default search engine.func search(projectID, location, searchEngineID, query string) error {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 // Create a client\u00a0 \u00a0 \u00a0 \u00a0 client, err := discoveryengine.NewSearchClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 // Full resource name of search engine serving config\u00a0 \u00a0 \u00a0 \u00a0 servingConfig := fmt.Sprintf(\"projects/%s/locations/%s/collections/default_collection/dataStores/%s/servingConfigs/default_serving_config\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectID, location, searchEngineID)\u00a0 \u00a0 \u00a0 \u00a0 searchRequest := &discoveryenginepb.SearchRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServingConfig: servingConfig,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Query: \u00a0 \u00a0 \u00a0 \u00a0 query,\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 it := client.Search(ctx, searchRequest)\u00a0 \u00a0 \u00a0 \u00a0 for {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resp, err := it.Next()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err == iterator.Done {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"%+v\\n\", resp)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```For more information, see the [Vertex AI Search and Conversation Java API reference documentation](/java/docs/reference/google-cloud-discoveryengine/latest/overview) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/discoveryengine/src/main/java/discoveryengine/v1/Search.java) \n```\nimport com.google.cloud.discoveryengine.v1.SearchRequest;import com.google.cloud.discoveryengine.v1.SearchResponse;import com.google.cloud.discoveryengine.v1.SearchServiceClient;import com.google.cloud.discoveryengine.v1.SearchServiceSettings;import com.google.cloud.discoveryengine.v1.ServingConfigName;import java.io.IOException;import java.util.concurrent.ExecutionException;public class Search {\u00a0 public static void main() throws IOException, ExecutionException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 // Project ID or project number of the Cloud project you want to use.\u00a0 \u00a0 String projectId = \"PROJECT_ID\";\u00a0 \u00a0 // Location of the data store. Options: \"global\", \"us\", \"eu\"\u00a0 \u00a0 String location = \"global\";\u00a0 \u00a0 // Collection containing the data store.\u00a0 \u00a0 String collectionId = \"default_collection\";\u00a0 \u00a0 // Data store ID.\u00a0 \u00a0 String dataStoreId = \"DATA_STORE_ID\";\u00a0 \u00a0 // Serving configuration. Options: \"default_search\"\u00a0 \u00a0 String servingConfigId = \"default_search\";\u00a0 \u00a0 // Search Query for the data store.\u00a0 \u00a0 String searchQuery = \"Google\";\u00a0 \u00a0 search(projectId, location, collectionId, dataStoreId, servingConfigId, searchQuery);\u00a0 }\u00a0 /** Performs a search on a given datastore. */\u00a0 public static void search(\u00a0 \u00a0 \u00a0 String projectId,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String collectionId,\u00a0 \u00a0 \u00a0 String dataStoreId,\u00a0 \u00a0 \u00a0 String servingConfigId,\u00a0 \u00a0 \u00a0 String searchQuery)\u00a0 \u00a0 \u00a0 throws IOException, ExecutionException {\u00a0 \u00a0 // For more information, refer to:\u00a0 \u00a0 // https://cloud.google.com/generative-ai-app-builder/docs/locations#specify_a_multi-region_for_your_data_store\u00a0 \u00a0 String endpoint = (location.equals(\"global\")) \u00a0 \u00a0 \u00a0 \u00a0 ? String.format(\"discoveryengine.googleapis.com:443\", location) \u00a0 \u00a0 \u00a0 \u00a0 : String.format(\"%s-discoveryengine.googleapis.com:443\", location);\u00a0 \u00a0 SearchServiceSettings settings =\u00a0 \u00a0 \u00a0 \u00a0 SearchServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the `searchServiceClient.close()` method on the client to safely\u00a0 \u00a0 // clean up any remaining background resources.\u00a0 \u00a0 try (SearchServiceClient searchServiceClient = SearchServiceClient.create(settings)) {\u00a0 \u00a0 \u00a0 SearchRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SearchRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setServingConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServingConfigName.formatProjectLocationCollectionDataStoreServingConfigName(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectId, location, collectionId, dataStoreId, servingConfigId))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQuery(searchQuery)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setPageSize(10)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 SearchResponse response = searchServiceClient.search(request).getPage().getResponse();\u00a0 \u00a0 \u00a0 for (SearchResponse.SearchResult element : response.getResultsList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Response content: \" + element);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Node.js API reference documentation](/nodejs/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/discoveryengine/search.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const location = 'YOUR_LOCATION'; \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Options: 'global', 'us', 'eu'// const collectionId = 'default_collection'; \u00a0 \u00a0 // Options: 'default_collection'// const dataStoreId = 'YOUR_DATA_STORE_ID' \u00a0 \u00a0 \u00a0 // Create in Cloud Console// const servingConfigId = 'default_config'; \u00a0 \u00a0 \u00a0// Options: 'default_config'// const searchQuery = 'Google';const {SearchServiceClient} = require('@google-cloud/discoveryengine').v1beta;// For more information, refer to:// https://cloud.google.com/generative-ai-app-builder/docs/locations#specify_a_multi-region_for_your_data_storeconst apiEndpoint =\u00a0 location === 'global'\u00a0 \u00a0 ? 'discoveryengine.googleapis.com'\u00a0 \u00a0 : `${location}-discoveryengine.googleapis.com`;// Instantiates a clientconst client = new SearchServiceClient({apiEndpoint: apiEndpoint});async function search() {\u00a0 // The full resource name of the search engine serving configuration.\u00a0 // Example: projects/{projectId}/locations/{location}/collections/{collectionId}/dataStores/{dataStoreId}/servingConfigs/{servingConfigId}\u00a0 // You must create a search engine in the Cloud Console first.\u00a0 const name = client.projectLocationCollectionDataStoreServingConfigPath(\u00a0 \u00a0 projectId,\u00a0 \u00a0 location,\u00a0 \u00a0 collectionId,\u00a0 \u00a0 dataStoreId,\u00a0 \u00a0 servingConfigId\u00a0 );\u00a0 const request = {\u00a0 \u00a0 pageSize: 10,\u00a0 \u00a0 query: searchQuery,\u00a0 \u00a0 servingConfig: name,\u00a0 };\u00a0 const IResponseParams = {\u00a0 \u00a0 ISearchResult: 0,\u00a0 \u00a0 ISearchRequest: 1,\u00a0 \u00a0 ISearchResponse: 2,\u00a0 };\u00a0 // Perform search request\u00a0 const response = await client.search(request, {\u00a0 \u00a0 // Warning: Should always disable autoPaginate to avoid iterate through all pages.\u00a0 \u00a0 //\u00a0 \u00a0 // By default NodeJS SDK returns an iterable where you can iterate through all\u00a0 \u00a0 // search results instead of only the limited number of results requested on\u00a0 \u00a0 // pageSize, by sending multiple sequential search requests page-by-page while\u00a0 \u00a0 // iterating, until it exhausts all the search results. This will be unexpected and\u00a0 \u00a0 // may cause high Search API usage and long wait time, especially when the matched\u00a0 \u00a0 // document numbers are huge.\u00a0 \u00a0 autoPaginate: false,\u00a0 });\u00a0 const results = response[IResponseParams.ISearchResponse].results;\u00a0 for (const result of results) {\u00a0 \u00a0 console.log(result);\u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation PHP API reference documentation](/php/docs/reference/cloud-discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-php/blob/HEAD/DiscoveryEngine/samples/V1beta/SearchServiceClient/search.php) \n```\nuse Google\\ApiCore\\ApiException;use Google\\ApiCore\\PagedListResponse;use Google\\Cloud\\DiscoveryEngine\\V1beta\\Client\\SearchServiceClient;use Google\\Cloud\\DiscoveryEngine\\V1beta\\SearchRequest;use Google\\Cloud\\DiscoveryEngine\\V1beta\\SearchResponse\\SearchResult;/**\u00a0* Performs a search.\u00a0*\u00a0* @param string $formattedServingConfig The resource name of the Search serving config, such as\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/default_collection/engines/&#42;/servingConfigs/default_serving_config`,\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 or\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 `projects/&#42;/locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 This field is used to identify the serving configuration name, set\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 of models used to make the search. Please see\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {@see SearchServiceClient::servingConfigName()} for help formatting this field.\u00a0*/function search_sample(string $formattedServingConfig): void{\u00a0 \u00a0 // Create a client.\u00a0 \u00a0 $searchServiceClient = new SearchServiceClient();\u00a0 \u00a0 // Prepare the request message.\u00a0 \u00a0 $request = (new SearchRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setServingConfig($formattedServingConfig);\u00a0 \u00a0 // Call the API and handle any network failures.\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 \u00a0 /** @var PagedListResponse $response */\u00a0 \u00a0 \u00a0 \u00a0 $response = $searchServiceClient->search($request);\u00a0 \u00a0 \u00a0 \u00a0 /** @var SearchResult $element */\u00a0 \u00a0 \u00a0 \u00a0 foreach ($response as $element) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 printf('Element data: %s' . PHP_EOL, $element->serializeToJsonString());\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 } catch (ApiException $ex) {\u00a0 \u00a0 \u00a0 \u00a0 printf('Call failed with message: %s' . PHP_EOL, $ex->getMessage());\u00a0 \u00a0 }}/**\u00a0* Helper to execute the sample.\u00a0*\u00a0* This sample has been automatically generated and should be regarded as a code\u00a0* template only. It will require modifications to work:\u00a0* \u00a0- It may require correct/in-range values for request initialization.\u00a0* \u00a0- It may require specifying regional endpoints when creating the service client,\u00a0* \u00a0 \u00a0please see the apiEndpoint client configuration option for more details.\u00a0*/function callSample(): void{\u00a0 \u00a0 $formattedServingConfig = SearchServiceClient::servingConfigName(\u00a0 \u00a0 \u00a0 \u00a0 '[PROJECT]',\u00a0 \u00a0 \u00a0 \u00a0 '[LOCATION]',\u00a0 \u00a0 \u00a0 \u00a0 '[DATA_STORE]',\u00a0 \u00a0 \u00a0 \u00a0 '[SERVING_CONFIG]'\u00a0 \u00a0 );\u00a0 \u00a0 search_sample($formattedServingConfig);}\n```For more information, see the [Vertex AI Search and Conversation Python API reference documentation](/python/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/discoveryengine/search_sample.py) \n```\nfrom typing import Listfrom google.api_core.client_options import ClientOptionsfrom google.cloud import discoveryengine_v1 as discoveryengine# TODO(developer): Uncomment these variables before running the sample.# project_id = \"YOUR_PROJECT_ID\"# location = \"YOUR_LOCATION\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Values: \"global\", \"us\", \"eu\"# engine_id = \"YOUR_APP_ID\"# search_query = \"YOUR_SEARCH_QUERY\"def search_sample(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 engine_id: str,\u00a0 \u00a0 search_query: str,) -> List[discoveryengine.SearchResponse]:\u00a0 \u00a0 # \u00a0For more information, refer to:\u00a0 \u00a0 # https://cloud.google.com/generative-ai-app-builder/docs/locations#specify_a_multi-region_for_your_data_store\u00a0 \u00a0 client_options = (\u00a0 \u00a0 \u00a0 \u00a0 ClientOptions(api_endpoint=f\"{location}-discoveryengine.googleapis.com\")\u00a0 \u00a0 \u00a0 \u00a0 if location != \"global\"\u00a0 \u00a0 \u00a0 \u00a0 else None\u00a0 \u00a0 )\u00a0 \u00a0 # Create a client\u00a0 \u00a0 client = discoveryengine.SearchServiceClient(client_options=client_options)\u00a0 \u00a0 # The full resource name of the search app serving config\u00a0 \u00a0 serving_config = f\"projects/{project_id}/locations/{location}/collections/default_collection/engines/{engine_id}/servingConfigs/default_config\"\u00a0 \u00a0 # Optional: Configuration options for search\u00a0 \u00a0 # Refer to the `ContentSearchSpec` reference for all supported fields:\u00a0 \u00a0 # https://cloud.google.com/python/docs/reference/discoveryengine/latest/google.cloud.discoveryengine_v1.types.SearchRequest.ContentSearchSpec\u00a0 \u00a0 content_search_spec = discoveryengine.SearchRequest.ContentSearchSpec(\u00a0 \u00a0 \u00a0 \u00a0 # For information about snippets, refer to:\u00a0 \u00a0 \u00a0 \u00a0 # https://cloud.google.com/generative-ai-app-builder/docs/snippets\u00a0 \u00a0 \u00a0 \u00a0 snippet_spec=discoveryengine.SearchRequest.ContentSearchSpec.SnippetSpec(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return_snippet=True\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 # For information about search summaries, refer to:\u00a0 \u00a0 \u00a0 \u00a0 # https://cloud.google.com/generative-ai-app-builder/docs/get-search-summaries\u00a0 \u00a0 \u00a0 \u00a0 summary_spec=discoveryengine.SearchRequest.ContentSearchSpec.SummarySpec(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 summary_result_count=5,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 include_citations=True,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ignore_adversarial_query=True,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ignore_non_summary_seeking_query=True,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 model_prompt_spec=discoveryengine.SearchRequest.ContentSearchSpec.SummarySpec.ModelPromptSpec(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 preamble=\"YOUR_CUSTOM_PROMPT\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 model_spec=discoveryengine.SearchRequest.ContentSearchSpec.SummarySpec.ModelSpec(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 version=\"stable\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 )\u00a0 \u00a0 # Refer to the `SearchRequest` reference for all supported fields:\u00a0 \u00a0 # https://cloud.google.com/python/docs/reference/discoveryengine/latest/google.cloud.discoveryengine_v1.types.SearchRequest\u00a0 \u00a0 request = discoveryengine.SearchRequest(\u00a0 \u00a0 \u00a0 \u00a0 serving_config=serving_config,\u00a0 \u00a0 \u00a0 \u00a0 query=search_query,\u00a0 \u00a0 \u00a0 \u00a0 page_size=10,\u00a0 \u00a0 \u00a0 \u00a0 content_search_spec=content_search_spec,\u00a0 \u00a0 \u00a0 \u00a0 query_expansion_spec=discoveryengine.SearchRequest.QueryExpansionSpec(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 condition=discoveryengine.SearchRequest.QueryExpansionSpec.Condition.AUTO,\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 spell_correction_spec=discoveryengine.SearchRequest.SpellCorrectionSpec(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mode=discoveryengine.SearchRequest.SpellCorrectionSpec.Mode.AUTO\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 )\u00a0 \u00a0 response = client.search(request)\u00a0 \u00a0 print(response)\u00a0 \u00a0 return response\n```\nFor more information, see the [Vertex AI Search and Conversation Ruby API reference documentation](/ruby/docs/reference/google-cloud-discovery_engine-v1beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-discovery_engine-v1beta/snippets/search_service/search.rb) \n```\nrequire \"google/cloud/discovery_engine/v1beta\"\n### Snippet for the search call in the SearchService service\n## This snippet has been automatically generated and should be regarded as a code# template only. It will require modifications to work:# - It may require correct/in-range values for request initialization.# - It may require specifying regional endpoints when creating the service# client as shown in https://cloud.google.com/ruby/docs/reference.\n## This is an auto-generated example demonstrating basic usage of# Google::Cloud::DiscoveryEngine::V1beta::SearchService::Client#search.#def search\u00a0 # Create a client object. The client can be reused for multiple calls.\u00a0 client = Google::Cloud::DiscoveryEngine::V1beta::SearchService::Client.new\u00a0 # Create a request. To set request fields, pass in keyword arguments.\u00a0 request = Google::Cloud::DiscoveryEngine::V1beta::SearchRequest.new\u00a0 # Call the search method.\u00a0 result = client.search request\u00a0 # The returned object is of type Gapic::PagedEnumerable. You can iterate\u00a0 # over elements, and API calls will be issued to fetch pages as needed.\u00a0 result.each do |item|\u00a0 \u00a0 # Each element is of type ::Google::Cloud::DiscoveryEngine::V1beta::SearchResponse::SearchResult.\u00a0 \u00a0 p item\u00a0 endend\n```\n## Get search-as-you-type results for a media app\nYou can get search results for a media app using the API.\n**Note:** Media data search is in Preview with allowlist.\nFor media search, Vertex AI Search and Conversation offers two kinds of search behavior:\n- The user types the search query and presses enter. This is the default and is the same behavior as search in the widget and search for non-media (generic) apps. See [Get search results for an app with structured or unstructureddata](#structured-unstructured) .\n- A new search result is returned after each letter that the user enters. This is called search-as-you-type and is particularly helpful for users who are entering their search queries through more awkward interfaces such as the remote control for a television.\nTo get search-as-you-type results for a media app:\nUse the `servingConfigs.search` v1alpha method to get search results for a media app:- Find your data store ID. If you already have your data store ID, skip to the next step.- In the Google Cloud console, go to the **Search and Conversation** page and in the navigation menu, click **Data stores** . [Go to the Data stores page](https://console.cloud.google.com/gen-app-builder/data-stores) \n- Click the name of your data store.\n- On the **Data** page for your data store, get the data store ID.\n- Run the following curl command to get search-as-you-type results.All the fields except for `contentSearchSpec` can be used in conjunction with the `searchAsYouTypeSpec` field. For clarity, the optional fields have been omitted from the curl command. For the optional fields, see [Get searchresults for an app with structured or unstructureddata](#structured-unstructured) .```\ncurl -X POST -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1alpha/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/servingConfigs/default_search:search\" \\-d '{\"query\": \"QUERY\",\"searchAsYouTypeSpec\": {\"condition\": \"ENABLED\"}}'\n```- : The ID of your project.\n- : The ID your data store.\n- : The query text to search.\n## Next steps\n- [Add the search widget to a web page](/generative-ai-app-builder/docs/add-widget)", "guide": "Vertex AI Search and Conversation"}