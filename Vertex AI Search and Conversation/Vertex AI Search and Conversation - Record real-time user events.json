{"title": "Vertex AI Search and Conversation - Record real-time user events", "url": "https://cloud.google.com/generative-ai-app-builder/docs/record-user-events?hl=zh-cn", "abstract": "# Vertex AI Search and Conversation - Record real-time user events\nThis page describes how to record user events in real time. User events are required for media recommendations. If you don't use media recommendations, importing user events isn't required. However, recording user events is recommended for media search apps.\nFor the user event types that you can record, see the `eventType` field of the [userEvents](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.dataStores.userEvents) object. By ingesting user events, you can improve the quality of your recommendations as well as the ranking of your search results. Results with higher click-through rates are boosted, while results with lower click-through rates are buried. Don't record user events for documents that you have not yet imported. To import historical user events in bulk, see [Importhistorical user events](/generative-ai-app-builder/docs/import-user-events) .\nYou can record user events in the following ways:\n- [With a JavaScript pixel](#record-with-javascript-pixel) .\n- [With the userEvents.write method](#record-with-userevents-write-method) .\nFor the JSON representation for user events, see [userEvents](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.dataStores.userEvents) in the API reference.\n**Note:** The widget can't record user events.\n", "content": "## Before you begin\nBefore you import user events:\n- Create a data store and an app.\n- Review [About media user events](/generative-ai-app-builder/docs/user-events) for user event requirements.## Record real-time user events with a JavaScript pixel\nTo record user events with a JavaScript pixel:\n- [Create an API key](#create-key) for calls to the`usereEvents.Collect`method\n- See [JavaScript pixel example](#js-pixel-example) for an example of a JavaScript tag that collects user events\n### Create an API key\nAn API key is required if you use a JavaScript pixel to collect user events from users' browsers.\nTo create an API key for calls to the [userEvents.Collect](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.dataStores.userEvents/collect) method, complete the following steps:\n- In the Google Cloud console, go to the **Credentials** page. [Go to the Credentials page](https://console.cloud.google.com/apis/credentials) \n- In the project drop-down at the top of the Google Cloud console page, select your project (the project might already be selected).\n- Click **Create credentials** and then select **API key** . . Some user privacy settings are known to pass the referrer URL.- Take note of the generated API key, which you will use when calling user event logging.\n- For increased security, add an [HTTP restriction](/docs/authentication/api-keys#api_key_restrictions) to your API Key to restrict access to the Vertex AI Search and Conversation service at `https://discoveryengine.googleapis.com/*` .\n**Note:** The API key is only for authenticating the [userEvents.Collect](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.dataStores.userEvents/collect) method. Other Vertex AI Search and Conversation methods require OAuth 2.0 through a service account or a user account.\n### JavaScript pixel example\nThe following example records a `view-item` user event using a JavaScript pixel.\nFor the JSON representation for user events, see [userEvents](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.dataStores.userEvents) in the API reference.\n```\n<script type=\"text/javascript\">var user_event = {\u00a0 \"eventType\" : \"view-item\",\u00a0 \"userPseudoId\": \"USER_PSEUDO_ID\",\u00a0 \"userInfo\": {\u00a0 \u00a0 \u00a0 \"userId\": \"USER_ID\"\u00a0 },\u00a0 \"attributionToken\": \"ATTRIBUTION_TOKEN\",\u00a0 \"tagIds\": \"TAG_ID\",\u00a0 \"documents\": [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"id\": \"DOCUMENT_ID\"\u00a0 \u00a0 \u00a0 }\u00a0 ]};var _gre = _gre || {};// Credentials for project._gre.apiKey = '[API_KEY]';_gre.logEvent = user_event;_gre.projectId = 'PROJECT_ID';_gre.locationId = 'LOCATION_ID';_gre.dataStoreId = 'DATA_STORE_ID';(function() {\u00a0 var gre = document.createElement('script'); gre.type = 'text/javascript'; gre.async = true;\u00a0 gre.src = 'https://www.gstatic.com/discoveryengine/v1beta_event.js';\u00a0 var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gre, s);})();</script>\n```\n## Record real-time user events with the userEvents.write method\nYou can use the [userEvents.write](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.dataStores.userEvents/write) method to send user events directly to the API from your backend server.\nTo record user events, send a POST request to the `userEvents.write` method and provide the appropriate request body. For the JSON representation for user events, see [userEvents](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.dataStores.userEvents) in the API reference.\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/tmp/my-key.jsoncurl -X POST \\\u00a0 \u00a0 \u00a0-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0 \u00a0-H \"Content-Type: application/json; charset=utf-8\" \\\u00a0 \u00a0 \u00a0--data \"{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0'eventType': 'view-item',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0'userPseudoId': 'visitor0',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0'eventTime': '2020-01-01T03:33:33.000001Z',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0'tagIds': ['321'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0'attributionToken': 'ABC',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0'attributes': {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'example_text_attribute': {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'text': ['text_1', 'text_2']\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'example_number_attribute': {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0'numbers': [3.14, 42, 1.2345]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0'documents': [{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'id': 'abc'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0'userInfo': {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0'userId': 'abc',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0'userAgent': 'Mozilla/5.0'\u00a0 \u00a0 \u00a0 \u00a0 \u00a0},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0'pageInfo': {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'uri': 'http://example',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'referrerUri': 'http://example',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'pageViewId': 'currentPageUri'\u00a0 \u00a0 \u00a0 \u00a0 }}\" \\\\\"https://discoveryengine.googleapis.com/v1beta/projects/PROJECT_NUMBER/locations/global/dataStores/DATA_STORE_ID/userEvents:write\"\n```For more information, see the [Vertex AI Search and Conversation C# API reference documentation](/dotnet/docs/reference/Google.Cloud.DiscoveryEngine.V1Beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-dotnet/blob/HEAD/apis/Google.Cloud.DiscoveryEngine.V1/Google.Cloud.DiscoveryEngine.V1.GeneratedSnippets/UserEventServiceClient.WriteUserEventRequestObjectSnippet.g.cs) \n```\nusing Google.Cloud.DiscoveryEngine.V1;public sealed partial class GeneratedUserEventServiceClientSnippets{\u00a0 \u00a0 /// <summary>Snippet for WriteUserEvent</summary>\u00a0 \u00a0 /// <remarks>\u00a0 \u00a0 /// This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 /// It will require modifications to work:\u00a0 \u00a0 /// - It may require correct/in-range values for request initialization.\u00a0 \u00a0 /// - It may require specifying regional endpoints when creating the service client as shown in\u00a0 \u00a0 /// \u00a0 https://cloud.google.com/dotnet/docs/reference/help/client-configuration#endpoint.\u00a0 \u00a0 /// </remarks>\u00a0 \u00a0 public void WriteUserEventRequestObject()\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 UserEventServiceClient userEventServiceClient = UserEventServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 WriteUserEventRequest request = new WriteUserEventRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ParentAsDataStoreName = DataStoreName.FromProjectLocationDataStore(\"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\"),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserEvent = new UserEvent(),\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request\u00a0 \u00a0 \u00a0 \u00a0 UserEvent response = userEventServiceClient.WriteUserEvent(request);\u00a0 \u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Go API reference documentation](/go/docs/reference/cloud.google.com/go/discoveryengine/latest/apiv1beta) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-go/blob/HEAD/internal/generated/snippets/discoveryengine/apiv1/UserEventClient/WriteUserEvent/main.go) \n```\npackage mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryengine \"cloud.google.com/go/discoveryengine/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryenginepb \"cloud.google.com/go/discoveryengine/apiv1/discoveryenginepb\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 // This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 \u00a0 \u00a0 // It will require modifications to work:\u00a0 \u00a0 \u00a0 \u00a0 // - It may require correct/in-range values for request initialization.\u00a0 \u00a0 \u00a0 \u00a0 // - It may require specifying regional endpoints when creating the service client as shown in:\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options\u00a0 \u00a0 \u00a0 \u00a0 c, err := discoveryengine.NewUserEventClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Handle error.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer c.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &discoveryenginepb.WriteUserEventRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Fill request struct fields.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // See https://pkg.go.dev/cloud.google.com/go/discoveryengine/apiv1/discoveryenginepb#WriteUserEventRequest.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := c.WriteUserEvent(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Handle error.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // TODO: Use resp.\u00a0 \u00a0 \u00a0 \u00a0 _ = resp}\n```For more information, see the [Vertex AI Search and Conversation Java API reference documentation](/java/docs/reference/google-cloud-discoveryengine/latest/overview) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-java/blob/HEAD/java-discoveryengine/samples/snippets/generated/com/google/cloud/discoveryengine/v1/usereventservice/writeuserevent/SyncWriteUserEvent.java) \n```\nimport com.google.cloud.discoveryengine.v1.DataStoreName;import com.google.cloud.discoveryengine.v1.UserEvent;import com.google.cloud.discoveryengine.v1.UserEventServiceClient;import com.google.cloud.discoveryengine.v1.WriteUserEventRequest;public class SyncWriteUserEvent {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 syncWriteUserEvent();\u00a0 }\u00a0 public static void syncWriteUserEvent() throws Exception {\u00a0 \u00a0 // This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 // It will require modifications to work:\u00a0 \u00a0 // - It may require correct/in-range values for request initialization.\u00a0 \u00a0 // - It may require specifying regional endpoints when creating the service client as shown in\u00a0 \u00a0 // https://cloud.google.com/java/docs/setup#configure_endpoints_for_the_client_library\u00a0 \u00a0 try (UserEventServiceClient userEventServiceClient = UserEventServiceClient.create()) {\u00a0 \u00a0 \u00a0 WriteUserEventRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 WriteUserEventRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DataStoreName.ofProjectLocationDataStoreName(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setUserEvent(UserEvent.newBuilder().build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 UserEvent response = userEventServiceClient.writeUserEvent(request);\u00a0 \u00a0 }\u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Python API reference documentation](/python/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-python/blob/HEAD/packages/google-cloud-discoveryengine/samples/generated_samples/discoveryengine_v1_generated_user_event_service_write_user_event_sync.py) \n```\n# This snippet has been automatically generated and should be regarded as a# code template only.# It will require modifications to work:# - It may require correct/in-range values for request initialization.# - It may require specifying regional endpoints when creating the service# \u00a0 client as shown in:# \u00a0 https://googleapis.dev/python/google-api-core/latest/client_options.htmlfrom google.cloud import discoveryengine_v1def sample_write_user_event():\u00a0 \u00a0 # Create a client\u00a0 \u00a0 client = discoveryengine_v1.UserEventServiceClient()\u00a0 \u00a0 # Initialize request argument(s)\u00a0 \u00a0 request = discoveryengine_v1.WriteUserEventRequest(\u00a0 \u00a0 \u00a0 \u00a0 parent=\"parent_value\",\u00a0 \u00a0 )\u00a0 \u00a0 # Make the request\u00a0 \u00a0 response = client.write_user_event(request=request)\u00a0 \u00a0 # Handle the response\u00a0 \u00a0 print(response)\n```For more information, see the [Vertex AI Search and Conversation Ruby API reference documentation](/ruby/docs/reference/google-cloud-discovery_engine-v1beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-discovery_engine-v1/snippets/user_event_service/write_user_event.rb) \n```\nrequire \"google/cloud/discovery_engine/v1\"\n### Snippet for the write_user_event call in the UserEventService service\n## This snippet has been automatically generated and should be regarded as a code# template only. It will require modifications to work:# - It may require correct/in-range values for request initialization.# - It may require specifying regional endpoints when creating the service# client as shown in https://cloud.google.com/ruby/docs/reference.\n## This is an auto-generated example demonstrating basic usage of# Google::Cloud::DiscoveryEngine::V1::UserEventService::Client#write_user_event.#def write_user_event\u00a0 # Create a client object. The client can be reused for multiple calls.\u00a0 client = Google::Cloud::DiscoveryEngine::V1::UserEventService::Client.new\u00a0 # Create a request. To set request fields, pass in keyword arguments.\u00a0 request = Google::Cloud::DiscoveryEngine::V1::WriteUserEventRequest.new\u00a0 # Call the write_user_event method.\u00a0 result = client.write_user_event request\u00a0 # The returned object is of type Google::Cloud::DiscoveryEngine::V1::UserEvent.\u00a0 p resultend\n```", "guide": "Vertex AI Search and Conversation"}