{"title": "Vertex AI Search and Conversation - Search with follow-ups", "url": "https://cloud.google.com/generative-ai-app-builder/docs/multi-turn-search?hl=zh-cn", "abstract": "# Vertex AI Search and Conversation - Search with follow-ups\nThis page introduces search with follow-ups for Vertex AI Search and shows you how to implement it using API calls.\nIf you want to add search with follow-ups to the search widget, see [Configureresults for the search widget](/generative-ai-app-builder/docs/configure-widget-attributes#display-unstructured) .\nSearch with follow-ups applies to search apps with [unstructureddata](/generative-ai-app-builder/docs/create-datastore-ingest#unstructured-data) and [websites](/generative-ai-app-builder/docs/create-datastore-ingest#websites) .\nSearch with follow-ups doesn't apply to Vertex AI Conversation apps. Vertex AI Conversation apps use an agent that can have conversations about the content with your end-users. For more information about Vertex AI Conversation, see [Introduction toVertex AI Conversation](/generative-ai-app-builder/docs/agent-intro) .\n", "content": "## About search with follow-ups\nSearch with follow-ups is based on generative AI models. Search with follow-ups is different from the [regular unstructured datasearch](/generative-ai-app-builder/docs/preview-search-results#structured-unstructured) because search with follow-ups takes into account previous queries in the same search session.\nSearch with follow-ups supports the following:\n- **Natural language query processing:** It processes and understands human language input, identifies the intent behind a query, and returns relevant results.\n- **Context awareness:** It understands the context of prior interactions and provides context-aware answers.\n- **Multi-turn:** It allows users to ask follow-up questions and receive relevant responses.\n### Example of search with follow-ups\nThe following is an example of search with follow-ups. Suppose that you want to know about vacationing in Mexico:\n- **You:** When is the best time of the year to vacation in Mexico?\n- **Search with follow-ups:** The best time to vacation in Mexico is during the dry season, which runs from November to April.\n- **You:** What is the exchange rate?\n- **Search with follow-ups:** 1 USD is equal to approximately 17.65 Mexican pesos.\n- **You:** What's the average temperature in December?\n- **Search with follow-ups:** The average temperature varies from 70-78\u00b0F. Cancun's average is ~ 77\u00b0F.\nWith regular search, your question \"What is the exchange rate\"? wouldn't be answerable because regular search wouldn't know that you wanted the Mexican exchange rate. Similarly, a regular search wouldn't maintain context to give you temperatures for Mexico.\n### About conversations\nIn search with follow-ups, a conversation is made up of text queries provided by a user and responses provided by Vertex AI Search.\nThese query and response pairs are sometimes referred to as . In the preceding example, the second message is made up of \"What is the exchange rate?\" and \"1 USD is equal to approximately 17.65 Mexican pesos.\"\nThe conversations are stored in the same data store where the unstructured data is kept. In the data store, a conversation is represented by the [Conversationresource](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.dataStores.conversations) . In addition to containing the query and response messages, the conversation resource has:\n- A unique name (the conversation ID).\n- A state (in-progress or completed).\n- A user pseudo ID, which is a visitor ID that tracks the user. It can be assigned programmatically.\n- A start time and an end time.## Before you begin\nMake sure you satisfy the following prerequisites. Requirements vary depending on the type of app you have.\n- If you have an unstructured search app, make sure the following is turned on: [Advanced LLM features](/generative-ai-app-builder/docs/about-advanced-features#advanced-llm-features) \n- If you have a website search app, make sure the following are turned on:- [Enterprise edition features](/generative-ai-app-builder/docs/about-advanced-features#enterprise-features) \n- [Advanced LLM features](/generative-ai-app-builder/docs/about-advanced-features#advanced-llm-features) \n- [Advanced website indexing](/generative-ai-app-builder/docs/about-advanced-features#advanced-website-indexing) \n## Store conversations and get responses\nYou can use the command line or client libraries to generate search responses and to store the search-with-follow-ups conversation.\nTo use the command line to create a conversation and generate responses from the user's input, follow these steps:- Specify the data store where you want to store the conversation history:```\ncurl -X POST \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations\" \\-d '{\u00a0 \"user_pseudo_id\": \"USER_PSEUDO_ID\"}'\n```- : The project number or ID of your Google Cloud project\n- : The ID of the data store that is associated with your app.\n- : This is a unique identifier for tracking a search visitor. For example, you can implement this with an HTTP cookie, which uniquely identifies a visitor on a single device.\n- Generate a search response and add it to a new or existing conversation in your data store:```\ncurl -X POST \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations/CONVERSATION_ID:converse\" \\-d '{\u00a0 \"query\": { \"input\": \"FREE_TEXT\"}\u00a0 \"filter\": \"FILTER\"}'\n```- : The project number or ID of your Google Cloud project\n- : The ID of the data store that is associated with your app.\n- : A unique ID for the conversation, for example, `123456` . For a search-with-follow-ups conversation, use the same conversation ID in every turn.\n- : A free text string that contains the user's question\u2014for example, `what is bigquery?`\n- : A text field for filtering search using a filter expression. The default value is an empty string. The way you construct your filter varies depending on whether you have website data or unstructured data with metadata. For more information, see [Filtersearch with follow-ups](#filter-search-with-follow-ups) .\n- Repeat step 2 for each new question in the conversation.\nFor more information, see the [Vertex AI Search and Conversation Python API reference documentation](/python/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/discoveryengine/multi_turn_search_sample.py) \n```\nfrom typing import Listfrom google.api_core.client_options import ClientOptionsfrom google.cloud import discoveryengine_v1 as discoveryengine# TODO(developer): Uncomment these variables before running the sample.# project_id = \"YOUR_PROJECT_ID\"# location = \"YOUR_LOCATION\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Values: \"global\", \"us\", \"eu\"# data_store_id = \"YOUR_DATA_STORE_ID\"# search_queries = [\"YOUR_FIRST_SEARCH_QUERY\", \"YOUR_SECOND_SEARCH_QUERY\"]def multi_turn_search_sample(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 data_store_id: str,\u00a0 \u00a0 search_queries: List[str],) -> List[discoveryengine.ConverseConversationResponse]:\u00a0 \u00a0 # \u00a0For more information, refer to:\u00a0 \u00a0 # https://cloud.google.com/generative-ai-app-builder/docs/locations#specify_a_multi-region_for_your_data_store\u00a0 \u00a0 client_options = (\u00a0 \u00a0 \u00a0 \u00a0 ClientOptions(api_endpoint=f\"{location}-discoveryengine.googleapis.com\")\u00a0 \u00a0 \u00a0 \u00a0 if location != \"global\"\u00a0 \u00a0 \u00a0 \u00a0 else None\u00a0 \u00a0 )\u00a0 \u00a0 # Create a client\u00a0 \u00a0 client = discoveryengine.ConversationalSearchServiceClient(\u00a0 \u00a0 \u00a0 \u00a0 client_options=client_options\u00a0 \u00a0 )\u00a0 \u00a0 # Initialize Multi-Turn Session\u00a0 \u00a0 conversation = client.create_conversation(\u00a0 \u00a0 \u00a0 \u00a0 # The full resource name of the data store\u00a0 \u00a0 \u00a0 \u00a0 # e.g. projects/{project_id}/locations/{location}/dataStores/{data_store_id}\u00a0 \u00a0 \u00a0 \u00a0 parent=client.data_store_path(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 project=project_id, location=location, data_store=data_store_id\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 conversation=discoveryengine.Conversation(),\u00a0 \u00a0 )\u00a0 \u00a0 for search_query in search_queries:\u00a0 \u00a0 \u00a0 \u00a0 # Add new message to session\u00a0 \u00a0 \u00a0 \u00a0 request = discoveryengine.ConverseConversationRequest(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name=conversation.name,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 query=discoveryengine.TextInput(input=search_query),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 serving_config=client.serving_config_path(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 project=project_id,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 location=location,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 data_store=data_store_id,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 serving_config=\"default_config\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Options for the returned summary\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 summary_spec=discoveryengine.SearchRequest.ContentSearchSpec.SummarySpec(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Number of results to include in summary\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 summary_result_count=3,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 include_citations=True,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 response = client.converse_conversation(request)\u00a0 \u00a0 \u00a0 \u00a0 print(f\"Reply: {response.reply.summary.summary_text}\\n\")\u00a0 \u00a0 \u00a0 \u00a0 for i, result in enumerate(response.search_results, 1):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result_data = result.document.derived_struct_data\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(f\"[{i}]\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(f\"Link: {result_data['link']}\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(f\"First Snippet: {result_data['snippets'][0]['snippet']}\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"First Extractive Answer: \\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 f\"\\tPage: {result_data['extractive_answers'][0]['pageNumber']}\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 f\"\\tContent: {result_data['extractive_answers'][0]['content']}\\n\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 print(\"\\n\\n\")\n```\n## Filter search with follow-ups\nWhen making a query with search with follow-ups, you can include the `filter` field to restrict the pool of documents from which a response is derived. You construct your filter using filter expressions. The filter expressions that you use vary depending on whether you have website data or unstructured data with metadata.\n### Filter expressions for website data\nIf you have a data store with website data, you can filter your search with follow-ups query using the filter expressions in [Filter expressions withadvanced website indexing](/generative-ai-app-builder/docs/filter-website-search#filter-expressions-advanced-indexing) . After you construct your filter expression, use it for the value of the `filter` field in step 2 of [Store conversations and get responses](#store-conversations) .\n### Filter expressions for unstructured data with metadata\nIf you have a data store with unstructured data with metadata, you can filter your search with follow-ups query so that it returns documents based on the metadata fields that the documents contain. See [Filter search for structured orunstructured data](/generative-ai-app-builder/docs/filter-search-metadata) to understand how to use metadata to filter ordinary search (without follow-ups). You can use these same principles to use metadata to filter search with follow-ups. After you construct your filter expression, use it for the value of the `filter` field in step 2 of [Store conversations and get responses](#store-conversations) .\n## Configure the summary\nThe response message from search with follow ups is a generated summary returned in `summaryText` . There are various ways that you can configure the generated summary. These are described in the following sections:\n- [Get citations with search results](#get-citations) \n- [Ignore adversarial queries](#ignore-adversarial-queries) \n- [Ignore non-summary seeking queries](#ignore-non-summary-seeking-queries) \n- [Set the number of results to use in the summary](#result-count-for-summary) \n- [Get customized summaries](#custom-summaries) \n- [Apply SafeSearch to chat responses](#safe-search) \n### Get citations with search results\nCitations, when specified, are numbers that are placed inline in a search summary. These numbers indicate from which search results specific sentences in the summary are taken.\nTo get citations:\n- Follow the preceding [Store conversations and get chatresponses](#store-conversations) procedure except at step 2, run this command that includes the `summarySpec` field that sets `includeCitations` to true.```\ncurl -X POST \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations/CONVERSATION_ID:converse\" \\-d '{\u00a0 \"query\": { \"input\": \"FREE_TEXT\"},\u00a0 \"summarySpec\": { \"include_citations\": true }}'\n```\nCitation numbers are included in summary text. The citation numbers refer to the returned search results and are 1-indexed. For example, `[1]` means that the sentence is attributed to the first search result. `[2, 3]` means that the sentence is attributed to both the second and third search results.\n### Ignore adversarial queries\nAdversarial queries include negative comments or are designed to generate unsafe, policy-violating output. You can specify that no search summaries should be returned for adversarial queries. When an adversarial query is ignored, the `summaryText` property contains boilerplate text indicating that no search summary is returned. Search documents are returned for adversarial queries even though search summaries are not.\nTo specify that no search summaries should be returned for adversarial queries:\n- Follow the preceding [Store conversations and get chatresponses](#store-conversations) procedure except at step 2, run this command that includes the `summarySpec` field that sets `ignoreAdversarialQuery` to true.```\ncurl -X POST \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations/CONVERSATION_ID:converse\" \\-d '{\u00a0 \"query\": { \"input\": \"FREE_TEXT\"},\u00a0 \"summarySpec\": { \"ignoreAdversarialQuery\": true }}'\n```\n### Ignore non-summary seeking queries\nNon-summary seeking queries return results that are not suitable for summarization. For example, \"why is the sky blue\" and \"Who is the best soccer player in the world?\" are summary-seeking queries, but \"SFO airport\" and \"world cup 2026\" are not. They are most likely navigational queries. You can specify that no search summaries should be returned for non-summary seeking queries. Search documents are returned for non-summary seeking queries even though search summaries are not.\nTo specify that no search summaries should be returned for non-summary seeking queries:\n- Follow the preceding [Store conversations and get chatresponses](#store-conversations) procedure except at step 2, run this command that includes the `summarySpec` field that sets `ignoreNonSummarySeekingQuery` to true.```\ncurl -X POST \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations/CONVERSATION_ID:converse\" \\-d '{\u00a0 \"query\": { \"input\": \"FREE_TEXT\"},\u00a0 \"summarySpec\": { \"ignore_non_summary_seeking_query\": true }}'\n```\n### Set the number of results to use in the summary\nYou can specify the number of results to use in generating the summary. By default, if the `summaryResultCount` field is not set, all the results returned are used to generate the summary.\nTo set the number of top results to use for the summary:\n- Follow the preceding [Store conversations and get chatresponses](#store-conversations) procedure except at step 2, run this command that includes the `summarySpec` field that sets `summaryResultCount` .```\ncurl -X POST \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations/CONVERSATION_ID:converse\" \\-d '{\u00a0 \"query\": { \"input\": \"FREE_TEXT\"},\u00a0 \"summarySpec\": { \"summary_result_count\": NUMBER_OF_RESULTS }}'\n``` : The number of top results to generate the search summary from. If the number of results returned is less than `summaryResultCount` , the summary is generated from all of the results. The maximum value is `5` .\n### Get customized summaries\nYou can get customized summaries by providing natural-language instructions in the `modelPromptSpec.preamble` field when requesting a summary.\nYou can request customizations such as length and level of detail, style of output (such as \"simple\"), language of output, focus of answer, and format (such as tables, bullets, and XML).\nFor example, for the query \"What are the benefits of bigquery?\" you could enter customization instructions like the following examples:\n- Example instruction: `\"please show the answer format in an ordered list\"`Example answer:```\nThe benefits of BigQuery are:\n1. Increased business productivity\n2. IT staff productivity\n3. Reduced infrastructure costs\n4. Loading and exporting data are free\n```\n- Example instruction: `give a very detailed answer`Example answer:```\nBigQuery is a serverless, highly scalable, and cost-effective cloud data warehouse that enables businesses to analyze all their data very quickly. It is a fully managed service that takes care of provisioning, scaling, and managing the underlying infrastructure, so you can focus on analyzing your data. BigQuery is also integrated with other Google Cloud services, such as Google Kubernetes Engine, Cloud Data Fusion, and Cloud Dataproc, making it easy to build and deploy data pipelines.\nHere are some of the benefits of using BigQuery:\n* **Fast and scalable:** BigQuery can process petabytes of data very quickly, and it can scale to handle even the most demanding workloads. * **Cost-effective:** BigQuery is a very cost-effective way to store and analyze data. You only pay for the data that you use, and there are no upfront costs or commitments. * **Secure:** BigQuery is a secure platform that meets the needs of even the most security-conscious organizations. * **Easy to use:** BigQuery is easy to use, even for non-technical users. It has a simple and intuitive user interface, and it supports a variety of data sources. * **Integrated with other Google Cloud services:** BigQuery is integrated with other Google Cloud services, making it easy to build and deploy data pipelines.\nIf you are looking for a fast, scalable, and cost-effective way to analyze your data, then BigQuery is a great option.\n```\nTo get a customized summary:\n- Follow the preceding [Store conversations and get chatresponses](#store-conversations) procedure except at step 2, run this command that includes the `summarySpec` field that specifies the customization instruction in `modelPromptSpec.preamble` .```\n\u00a0 curl -X POST \\\u00a0 -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 -H \"Content-Type: application/json\" \\\u00a0 \"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations/CONVERSATION_ID:converse\" \\\u00a0 -d '{\u00a0 \u00a0 \"query\": { \"input\": \"FREE_TEXT\"},\u00a0 \u00a0 \"summarySpec\": {\u00a0 \u00a0 \u00a0 \"modelPromptSpec\": {\u00a0 \u00a0 \u00a0 \u00a0 \"preamble\": CUSTOMIZATION_INSTRUCTIONS\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }'\n```- : The instruction for customization, as a string.\n### Apply SafeSearch to chat responses\nSafeSearch can be used to filter out explicit, unsafe, policy-violating output content from summary responses. For more information about SafeSearch, see [Safety settings for Vertex AI Search](/generative-ai-app-builder/docs/responsible-ai#safety-settings-search) .\nTo apply safe search to a chat response:\n- Follow the preceding [Store conversations and get chatresponses](#store-conversations) procedure except at step 2, under the query specify `safe_search` .```\ncurl -X POST \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations/CONVERSATION_ID:converse\" \\-d '{\u00a0 \"query\": { \"input\": \"FREE_TEXT\"},\u00a0 \"safe_search\": true}'\n```## View and modify stored conversations\nYou can use the command line to get, delete, update, and list stored conversations.\n### Get a conversation from the data store\nTo get all the details about a specific conversation from a data store:\n- Run the following curl command:```\ncurl -X GET \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations/CONVERSATION_ID\"\n```- : The project number or ID of your Google Cloud project\n- :The ID of the data store that is associated with your app.\n- : The ID of the conversation\n### Delete a conversation from the data store\nBy default, conversations earlier than 60 days ago are automatically deleted. However, if you want to delete a particular conversation\u2014for example, if it accidentally contained sensitive content, then use this API call to delete it.\nTo delete a conversation from a data store:\n- Run the following curl command:```\ncurl -X DELETE \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations/CONVERSATION_ID\"\n```- : The project number or ID of your Google Cloud project\n- : The ID of the data store that is associated with your app.\n- : The ID of the conversation\nThe response from the `DELETE` command is like this:```\n{}\n```\n### Update a conversation\nThere are various reasons that you might want to update a conversation. For example, to do one of the following:\n- Mark a conversation as completed\n- Merge the messages from one conversation into another\n- Change the `user_pseudo_id`\nTo update the `state` in a conversation:\n- Run the following curl command:```\ncurl -X PATCH \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations/CONVERSATION_ID?updateMask=state\" \\-d '{\u00a0 \"state\": \"NEW_STATE\"}'\n```- : The project number or ID of your Google Cloud project\n- : The ID of the data store that is associated with your app.\n- : The ID of the conversation that you want to update\n- : The new value for the state\u2014for example, `COMPLETED`To update the `user_pseudo_id` in a conversation:\n- Run the following curl command:```\ncurl -X PATCH \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations/CONVERSATION_ID?updateMask=user_pseudo_id\" \\-d '{\u00a0 \"user_pseudo_id\": \"NEW_USER_PSEUDO_ID\"}'\n```- : The project number or ID of your Google Cloud project\n- : The ID of the data store that is associated with your app.\n- : The ID of the conversation that you want to update\n- : The new value for the user pseudo IDThe preceding command shows you how to change the `user_pseudo_id.` However, you can update other fields in the conversation by replacing `user_pseudo_id` with other fields in the [Conversationresource](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.dataStores.conversations#resource:-conversation) .\n### List all conversations\nTo list all conversations in a data store:\n- Run the following curl command:```\ncurl -X GET \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations\"\n```- : The project number or ID of your Google Cloud project\n- : The ID of the data store that is associated with your app.The response contains a list of conversations and the `next_page_token` . If no `next_page_token` is returned, there are no more conversations to list.\nDefault page size is 50.\n### List conversations by filter\nInstead of listing all the conversations in a data store, you might want to list all the open conversations or all the conversations associated with a particular user.\nFor example, you could present to the user their closed searches with an option to reopen one of them.\nTo do that, you list conversations that match a given filter: [user_pseudo_id](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.dataStores.conversations#resource:-conversation) or [state](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.dataStores.conversations#state) ( `IN_PROGRESS` or `COMPLETED` ).\nTo list conversations associated with a user or visitor:\n- Run the following curl command:```\ncurl -X GET \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations?filter=user_pseudo_id=USER_PSEUDO_ID\"\n```- : The project number or ID of your Google Cloud project\n- : The ID of the data store that is associated with your app.\n- : The pseudo ID of the user whose conversations you want to list.\nThe response from the `GET` command looks something like this:To list conversations in a particular state (open or closed) that are associated with a user or visitor:\n- Run the following curl command:```\ncurl -X GET \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/conversations?filter=user_pseudo_id=USER_PSEUDO_ID%20AND%20state=STATE\"\n```- : The project number or ID of your Google Cloud project\n- : The ID of the data store that is associated with your app.\n- : The pseudo ID of the user whose conversations you want to list.\n- : Whether the conversation is open or closed ( `IN_PROGRESS` or `COMPLETED` )\nThe response from the `GET` command looks something like this:\nFor general information about filtering syntax, see [AIP-160 Filtering](https://google.aip.dev/160) .\n## Related questions\n**Note:** This feature is a Preview offering, subject to the \"Pre-GA Offerings Terms\" of the [GCP Service Specific Terms](https://cloud.google.com/terms/service-terms) . Pre-GA products and features may have limited support, and changes to pre-GA products and features may not be compatible with other pre-GA versions. For more information, see the [launch stage descriptions](https://cloud.google.com/products#product-launch-stages) . Further, by using this feature, you agree to the [Generative AI Preview terms and conditions](https://cloud.google.com/trustedtester/aitos) (\"Preview Terms\"). For this feature, you can process personal data as outlined in the [Cloud Data Processing Addendum](https://cloud.google.com/terms/data-processing-terms) , subject to applicable restrictions and obligations in the Agreement (as defined in the Preview Terms).\nRelated questions is a Preview with allowlist feature that can return related questions in addition to search results.\nFor example, when you ask \"What is the best time of the year to vacation in Mexico?\", in addition to answering your question, the search suggests other questions that you might ask, such as \"What is the cheapest month to vacation in Mexico?\" and \"What are the tourist months in Mexico?\".\nIf you want your search app to return related questions, contact your Google account team and tell them which projects and apps you want related questions enabled for. If you are not using the default serving config, you need to provide the name of the serving config too.\nAfter the related questions feature is enabled, questions are returned as strings in the [ConverseConversationResponse](/generative-ai-app-builder/docs/reference/rest/v1beta/ConverseConversationResponse) .\n## More information\n- For more information about the `summaryResultCount` , `includeCitations` , `ignoreAdversarialQuery` , `ignoreNonSummarySeekingQuery` fields, see [SummarySpec](/generative-ai-app-builder/docs/reference/rest/v1/SummarySpec) in the Vertex AI Search and Conversation API documentation.\n- For more examples of getting search summaries, see [Getsummaries](/generative-ai-app-builder/docs/get-search-summaries) .", "guide": "Vertex AI Search and Conversation"}