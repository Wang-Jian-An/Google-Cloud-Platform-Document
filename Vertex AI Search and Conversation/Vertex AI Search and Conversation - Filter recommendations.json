{"title": "Vertex AI Search and Conversation - Filter recommendations", "url": "https://cloud.google.com/generative-ai-app-builder/docs/filter-recommendations?hl=zh-cn", "abstract": "# Vertex AI Search and Conversation - Filter recommendations\nIf you have a recommendations app that uses structured data, you can use document fields to filter your recommendation results. This page explains how to use document fields to filter a recommendation to a specific set of documents. Although the examples on this page are for media recommendations, the principles shown here are the same for generic recommendations. For more information about media and generic recommendations, see [About recommendations](/generative-ai-app-builder/docs/about-recommendations) .\n", "content": "## Before you begin\nMake sure you have created a recommendations app and data store. For more information, see [Create a media recommendations app and data store](/generative-ai-app-builder/docs/create-app-data-store-media-recommendations) or [Create a generic recommendations data store](/generative-ai-app-builder/docs/create-data-store-recommendations) .\n### Example documents\nReview these example media documents. You can refer back to these example documents as you read through this page.\n```\n{\"id\":\"1\",\"schemaId\":\"default_schema\",\"structData\":{\"title\":\"Toy Story (1995)\",\"categories\":[\"Adventure\",\"Animation\",\"Children\",\"Comedy\",\"Fantasy\"],\"uri\":\"http://mytestdomain.movie/content/1\",\"available_time\":\"2023-01-01T00:00:00Z\",\"media_type\":\"movie\"}}{\"id\":\"88125\",\"schemaId\":\"default_schema\",\"structData\":{\"title\":\"Harry Potter and the Deathly Hallows: Part 2 (2011)\",\"categories\":[\"Action\",\"Adventure\",\"Drama\",\"Fantasy\",\"Mystery\",\"IMAX\"],\"uri\":\"http://mytestdomain.movie/content/88125\",\"available_time\":\"2023-01-01T00:00:00Z\",\"media_type\":\"movie\"}}{\"id\":\"2857\",\"schemaId\":\"default_schema\",\"structData\":{\"title\":\"Yellow Submarine (1968)\",\"categories\":[\"Adventure\",\"Animation\",\"Comedy\",\"Fantasy\",\"Musical\"],\"uri\":\"http://mytestdomain.movie/content/2857\",\"available_time\":\"2023-01-01T00:00:00Z\",\"media_type\":\"movie\"}}{\"id\":\"60069\",\"schemaId\":\"default_schema\",\"structData\":{\"title\":\"WALL\u00b7E (2008)\",\"categories\":[\"Adventure\",\"Animation\",\"Children\",\"Romance\",\"Sci-Fi\"],\"uri\":\"http://mytestdomain.movie/content/60069\",\"available_time\":\"2023-01-01T00:00:00Z\",\"media_type\":\"movie\"}}\n```\n## Filter expressions\nUse filter expressions to define your recommendations filters.\n### Filter expressions syntax\nThe following [Extended Backus\u2013Naur form](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form#:%7E:text=In%20compute) summarizes the filter expression syntax that you can use to define your recommendations filters.\n```\n\u00a0 # A single expression or multiple expressions that are joined by \"AND\" or \"OR\".\u00a0 filter = expression, { \" AND \" | \"OR\", expression };\u00a0 # An expression can be prefixed with \"-\" or \"NOT\" to express a negation.\u00a0 expression = [ \"-\" | \"NOT \" ],\u00a0 \u00a0 # A parenthesized expression\u00a0 \u00a0 | \"(\", expression, \")\"\u00a0 \u00a0 # A simple expression applying to a textual field.\u00a0 \u00a0 # Function \"ANY\" returns true if the field contains any of the literals.\u00a0 \u00a0 textual_field, \":\", \"ANY\", \"(\", literal, { \",\", literal }, \")\"\u00a0 \u00a0 # OR filter by \"available\"\u00a0 \u00a0 available, \":\", \"true\",\u00a0 # A literal is any double-quoted string. You must escape backslash (\\) and\u00a0 # quote (\") characters.\u00a0 literal = double-quoted string;\u00a0 textual_field = see the tables below;\n```\n### Filter expressions restrictions\nThe following restrictions apply to filter expressions for recommendations:\n- The depth of embedding`AND`and`OR`operators in parentheses is limited. The logical expressions in the filter must be in [conjunctive normal form(CNF)](https://en.wikipedia.org/wiki/Conjunctive_normal_form) . The most complex supported logical expression can be an`AND`-connected list of clauses that only contain`OR`operators, such as:`(... OR ... OR ...) AND (... OR ...) AND (... OR ...)`\n- Expressions can be negated with the`NOT`keyword or with`-`. This only works with`ANY()`expressions with a single argument.\n- `available`restrictions must be at the top level. They cannot be used as part of an`OR`clause or a negation (`NOT`). You can only use`available: true`.\n- The maximum number of terms in the top-level`AND`clause is 20.\n- An`OR`clause can have up to 100 arguments that are included in`ANY()`expressions. If an`OR`clause has multiple`ANY()`expressions, their arguments all count toward this limit. For example,`categories: ANY(\"drama\", \"comedy\") OR categories: ANY(\"adventure\")`has three arguments.\n### Filter expressions examples\nThe following table shows valid and invalid filter expression examples. It also gives the reasons why the invalid examples are invalid.\n| Expression                   | Valid | Notes               |\n|:------------------------------------------------------------------------------------|:--------|:--------------------------------------------------------------|\n| language_code: ANY(\"en\", \"fr\")              | Yes  | nan               |\n| NOT language_code: ANY(\"en\")              | Yes  | nan               |\n| NOT language_code: ANY(\"en\", \"fr\")             | No  | Negates an ANY() with more than one argument.     |\n| language_code: ANY(\"en\", \"fr\") OR categories: ANY(\"drama\")       | Yes  | nan               |\n| (language_code: ANY(\"en\") OR language_code: ANY(\"fr\")) AND categories: ANY(\"drama\") | Yes  | nan               |\n| (language_code: ANY(\"en\") AND language_code: ANY(\"fr\")) OR categories: ANY(\"drama\") | No  | Not in conjunctive normal form.        |\n| (language_code: ANY(\"en\")) AND (available: true)         | Yes  | nan               |\n| (language_code: ANY(\"en\")) OR (available: true)          | No  | Combines available in an OR expression with other conditions. |\nThe following filter expression filters for documents that are in the drama or action category, that are not in English, and that are available:\n```\ncategories: ANY(\"drama\", \"action\") AND NOT language_code: ANY(\"en\") AND available: true\n```\n## Filtering limits\nEach filterable document field consumes some memory in each of your models. The following limits help prevent adverse effects on serving performance:\n- Up to 10 custom fields can be set as filterable in your schema.If more than 10 custom fields are found during app training, only 10 are used.\n- Up to 100,000,000 filterable field values can be present in your schema.You can estimate the total number of filterable field values in your schema by multiplying the number of documents in your schema by the number of filterable fields. If you exceed these limits, the following things happen:- You cannot set additional fields as filterable.\n- App training fails.\n## Filter recommendations\nTo filter media recommendations, follow these steps:\n- Find your data store ID. If you already have your data store ID, skip to the next step.- In the Google Cloud console, go to the **Search and Conversation** page and in the navigation menu, click **Data stores** . [Go to the Data stores page](https://console.cloud.google.com/gen-app-builder/data-stores) \n- Click the name of your data store.\n- On the **Data** page for your data store, get the data store ID.\n- Determine the document field or fields that you want to filter on. For example, for the documents in [Before you begin](#before-you-begin) , you could use the `categories` field as a filter.\n- To make the `categories` field filterable, do the following:- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/engines) \n- Click your recommendations app.\n- Click the **Schema** tab. This tab shows current field settings.\n- Click **Edit** .\n- If it's not already selected, select the **Filterable** checkbox in the **categories** row, and then click **Save** .\n- Wait six hours to allow time for your schema edit to propagate. After six hours, you can proceed to the following step.\n- To get a recommendation and filter on the `categories` field, run the following code at the command line:```\ncurl -X POST \\-H \"Authorization: Bearer $(gcloud auth application-default print-access-token)\" \\-H \"Content-Type: application/json; charset=utf-8\" \\-d '{\u00a0 \u00a0 \u00a0\"userEvent\": {\u00a0 \u00a0 \u00a0 \u00a0\"eventType\": \"EVENT_TYPE\",\u00a0 \u00a0 \u00a0 \u00a0\"userPseudoId\": \"USER_PSEUDO_ID\",\u00a0 \u00a0 \u00a0 \u00a0\"documents\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"id\": \"DOCUMENT_ID\"\u00a0 \u00a0 \u00a0 \u00a0}\u00a0 \u00a0 \u00a0},\u00a0 \u00a0 \u00a0\"params\": {\u00a0 \u00a0 \u00a0 \u00a0\"returnDocument\": true,\u00a0 \u00a0 \u00a0 \u00a0\"attributeFilteringSyntax\": true,\u00a0 \u00a0 \u00a0 \u00a0\"strictFiltering\": true\u00a0 \u00a0 \u00a0},\u00a0 \u00a0 \u00a0\"filter\": \"FILTER\"\u00a0 \u00a0}' \\\"https://discoveryengine.googleapis.com/v1beta/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/servingConfigs/SERVING_CONFIG_ID:recommend\"\n```- : The ID of your project.\n- : The ID of your data store.\n- : The ID of the document that you want to preview recommendations for. Use the ID that you used for this document at the time you ingested your data.\n- : The type of user event. For`eventType`values, see [UserEvent](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.dataStores.userEvents#UserEvent) .\n- : A pseudonymized identifier of the user. You can use an HTTP cookie for this field, which uniquely identifies a visitor on a single device. Don't set this field to the same identifier for multiple users. This would combine their event histories and degrade model quality. Don't include personally identifiable information (PII) in this field.\n- : The ID of your serving config. Your serving config ID is the same as your engine ID, so use your engine ID here.\n- : A text field that lets you to filter on a specified set of fields, using filter expression syntax. The default value is an empty string, which means no filter is applied.\nFor example, suppose you want a recommendation for a specific media-play user event, and you want to filter the recommendation results to contain only documents that are: (1) In the Children category, and (2) Currently available. You would do that by including the following statements with your call:- `\"eventType\": \"media-play\"`\n- `\"filter\": \"categories: ANY(\\\"Children\\\") AND available: true\"`\nFor more information, see the [recommend](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.collections.dataStores.servingConfigs/recommend) method.\nIn addition to filters, an app's diversification settings can also affect the number of results returned in a recommendation response. For more information, see [Diversify media recommendations](/generative-ai-app-builder/docs/diversify-recommendations) .", "guide": "Vertex AI Search and Conversation"}