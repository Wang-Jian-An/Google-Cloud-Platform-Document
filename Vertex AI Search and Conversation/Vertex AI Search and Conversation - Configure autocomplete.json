{"title": "Vertex AI Search and Conversation - Configure autocomplete", "url": "https://cloud.google.com/generative-ai-app-builder/docs/configure-autocomplete?hl=zh-cn", "abstract": "# Vertex AI Search and Conversation - Configure autocomplete\nThe suggestions that autocomplete generates vary depending on the type of data that the search app uses:\n- **Structured and unstructured data.** By default, autocomplete generates suggestions based on the content of documents in the data store. After document import, autocomplete takes a day or two to start generating suggestions. If you make autocomplete requests through the API, autocomplete can generate suggestions that are based on the search history or user events.\n- **Website data.** By default, autocomplete generates suggestions from the search history. Autocomplete requires real search traffic. After search traffic begins, autocomplete takes a day or two before generating suggestions. Suggestions can be generated from web-crawled data from public sites with the experimental [ advanced autocomplete document data model](#advanced-document) .\nThe autocomplete data model determines what type of data autocomplete uses to generate suggestions. There are four autocomplete models:\n- **Document.** The document model generates suggestions from user-imported documents. This model isn't available for website data.\n- **Completable Fields.** The completable fields model suggests text taken directly from structured data fields. Only those fields that are annotated with `completable` are used for autocomplete suggestions. This model is only available for structured data.\n- **Search history.** The search history model generates suggestions from the history of [SearchService.search](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.dataStores.servingConfigs/search#google.cloud.discoveryengine.v1alpha.SearchService.Search) API calls. Do not use this model if there is no traffic available for the [servingConfigs.search](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.collections.dataStores.servingConfigs/search) method.\n- **User event.** The user event model generates suggestions from user-imported search events.\nAutocomplete requests are sent using the [dataStores.completeQuery](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.dataStores/completeQuery) method.\nThe following table shows the autocomplete model types available for each data type.\n| Autocomplete data model | Data source             | Website data | Structured data | Unstructured data |\n|:--------------------------|:------------------------------------------------------------|:---------------|:------------------|:--------------------|\n| Document     | Imported by user           | nan   | \u2714* (default)  | \u2714 (default)   |\n| Completable fields  | Imported by user           | nan   | \u2714     | nan     |\n| Search history   | Automatically collected          | \u2714 (default) | \u2714     | \u2714     |\n| User events    | Imported by user or automatically collected by widget  | \u2714    | \u2714     | \u2714     |\n| Web-crawled content  | Crawled from content from public websites specified by user | \u2714**   | nan    | nan     |\n* : The document schema must contain \"title\" or \"description\" fields, or there must be fields that have been specified as \"title\" or \"description\" key properties. See [Update a schema for structured data](/generative-ai-app-builder/docs/update-schemas) .\n** : Web-crawled content can only be used as a data source if the experimental advanced autocomplete document data model is enabled. See [ Advanced autocomplete document data model](#advanced-document) .\nIf you don't want to use the default model for your data type, you can specify a different model when you send your autocomplete request. Autocomplete requests are sent using the `dataStores.completeQuery` method. For information, see [API instructions: Send an autocomplete request to choose adifferent model](#diff-model) .\n", "content": "## Autocomplete features\nVertex AI Search supports the following autocomplete features to show the most helpful predictions when searching:\n| Feature     | Description                                                  | Example or more information                     |\n|:--------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------|\n| Remove special characters | Remove non-standard characters from both suggestion data and typed queries. Dash - is the only standard character that's kept in the suggestion data and in the typed queries.        | Mt. Everest & Mt. Kilimanjaro \u2192 Mt Everest Mt Kilimanjaro.              |\n| Correct typos    | Correct word spellings that are typos.                                           | Milc \u2192 Milk.                         |\n| Remove unsafe terms  | Powered by Google Safe Search. Remove inappropriate queries. Supported in English (en), French (fr), German (de), Italian (it), Polish (pl), Portuguese (pt), Russian (ru), Spanish (es), and Ukranian (uk). | Text that's offensive, such as porn, racy, vulgar, violence.             |\n| Denylist     | Remove terms that are listed in the denylist.                                         | For more information, see Use an autocomplete denylist.              |\n| Deduplicate Terms   | Powered by AI-driven semantic understanding. For near-identical terms, either term matches, but only the more popular one is suggested.                  | Shoes for Women, Womens Shoes, and Womans Shoes are deduplicated, and only the most popular one is suggested. |\n| Tail match suggestions | Not available in US and EU multi-regions. Optional setting. If there are no autocomplete matches for the entire query, suggest matches for only the trailing word of the query.        | For more information, see Tail match suggestions.                |\n## Tail match suggestions\nTail match suggestions are made using exact prefix matching against the last word in a query string.\nFor example, say the query \"songs with he\" is sent in an autocomplete request. When tail matching is enabled, autocomplete might find that the full prefix \"songs with he\" does not have any matches. However, the last word in the query, \"he\", has an exact prefix match with \"hello world\" and \"hello kitty\". In that case, the returned suggestions are \"songs with hello world\" and \"songs with hello kitty\" because there are no full match suggestions.\nYou can use this feature to reduce empty suggestion results and increase suggestion diversity, making this especially useful in cases where data sources (user event count, search history, and document topic coverage) is limited. However, enabling tail match suggestions can reduce the overall quality of suggestions. Because tail match only matches the trailing word of the prefix, some returned suggestions might not make sense. For example, a query such as \"songs with he\" might get a tail match suggestion like \"songs with helpers guides\".\nTail match suggestions are only returned if:\n- `include_tail_suggestions` is set to `true` in the [dataStores.completeQuery](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.dataStores/completeQuery) request.\n- There are no full prefix match suggestions for the query.## Turn autocomplete on or off for a widget\nTo turn autocomplete on or off for a widget, follow these steps:\n- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/start) \n- Click the name of the app that you want to edit.\n- Click **Configurations** .\n- Click the **Widget** tab.\n- Toggle the **Enable autocomplete** option to turn this feature on or off. When you enable autocomplete, expect to wait a day or two before suggestions start.## Update autocomplete settings\nTo configure the autocomplete settings, follow these steps:\n- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/start) \n- Click the name of the app that you want to edit.\n- Click **Configure** .\n- Click the **Autocomplete** tab.\n- Enter or select new values for the autocomplete settings you want to update:- **Maximum number of suggestions:** The maximum number of autocomplete suggestions that can be offered for a query.\n- **Minimum length to trigger:** The minimum number of characters that can be typed before autocomplete suggestions are offered.\n- **Matching order** : The location in a query string that autocomplete can start matching its suggestions from.\n- **Autocomplete model** : The autocomplete data model used to generate the retrieved suggestions. This can be overridden in the [dataStores.completeQuery](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.dataStores/completeQuery) using the`queryModel`parameter.\n- Click **Save and publish.** Changes take effect within a few minutes for engines where autocomplete has already been turned on.## Update completable field annotations in schema\nTo turn on autocomplete for fields in structured data schema, follow these steps:\n- In the Google Cloud console, go to the **Search and Conversation** page. [Search and Conversation](https://console.cloud.google.com/gen-app-builder/start) \n- Click the name of the app that you want to edit. It must use structured data.\n- Click **Data** .\n- Click the **Schema** tab.\n- Click **Edit** to select the schema fields to mark as `completable` .\n- Click **Save** to save the updated field configurations. These suggestions take around a day to be generated and returned.## Send autocomplete requests\nThe following samples show how to send autocomplete requests.\nTo send an autocomplete request using the API, follow these steps:- Find your data store ID. If you already have your data store ID, skip to the next step.- In the Google Cloud console, go to the **Search and Conversation** page and in the navigation menu, click **Data stores** . [Go to the Data stores page](https://console.cloud.google.com/gen-app-builder/data-stores) \n- Click the name of your data store.\n- On the **Data** page for your data store, get the data store ID.\n- Call the [dataStores.completeQuery](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.dataStores/completeQuery) method.```\ncurl -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\"https://discoveryengine.googleapis.com/v1beta/projects/PROJECT_ID/locations/LOCATION/collections/default_collection/dataStores/DATA_STORE_ID:completeQuery?query=QUERY_STRING\"\n```- : The project number or ID of your Google Cloud project.\n- : The location of your data store: `us` , `eu` or `global` .\n- : The ID of the data store that is associated with your app.\n- : The typeahead input used to fetch suggestions.\n### Send an autocomplete request to a different modelTo send an autocomplete request with a different autocomplete data model, follow these steps:- Find your data store ID. If you already have your data store ID, skip to the next step.- In the Google Cloud console, go to the **Search and Conversation** page and in the navigation menu, click **Data stores** . [Go to the Data stores page](https://console.cloud.google.com/gen-app-builder/data-stores) \n- Click the name of your data store.\n- On the **Data** page for your data store, get the data store ID.\n- Call the [dataStores.completeQuery](/generative-ai-app-builder/docs/reference/rest/v1beta/projects.locations.dataStores/completeQuery) method.```\ncurl -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\"https://discoveryengine.googleapis.com/v1beta/projects/PROJECT_ID/locations/LOCATION/collections/default_collection/dataStores/DATA_STORE_ID:completeQuery?query=QUERY_STRING&query_model=AUTOCOMPLETE_MODEL\"\n```- : The project number or ID of your Google Cloud project.\n- : The location of your data store:`us`,`eu`or`global`.\n- : The unique ID of the data store that is associated with your app.\n- : The typeahead input used to fetch suggestions.\n- : The autocomplete data model to use for the request:`document`,`document-completable`,`search-history`, or`user-event`.For more information, see the [Vertex AI Search and Conversation C# API reference documentation](/dotnet/docs/reference/Google.Cloud.DiscoveryEngine.V1Beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-dotnet/blob/HEAD/apis/Google.Cloud.DiscoveryEngine.V1/Google.Cloud.DiscoveryEngine.V1.GeneratedSnippets/CompletionServiceClient.CompleteQueryRequestObjectSnippet.g.cs) \n```\nusing Google.Cloud.DiscoveryEngine.V1;public sealed partial class GeneratedCompletionServiceClientSnippets{\u00a0 \u00a0 /// <summary>Snippet for CompleteQuery</summary>\u00a0 \u00a0 /// <remarks>\u00a0 \u00a0 /// This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 /// It will require modifications to work:\u00a0 \u00a0 /// - It may require correct/in-range values for request initialization.\u00a0 \u00a0 /// - It may require specifying regional endpoints when creating the service client as shown in\u00a0 \u00a0 /// \u00a0 https://cloud.google.com/dotnet/docs/reference/help/client-configuration#endpoint.\u00a0 \u00a0 /// </remarks>\u00a0 \u00a0 public void CompleteQueryRequestObject()\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 CompletionServiceClient completionServiceClient = CompletionServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 CompleteQueryRequest request = new CompleteQueryRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DataStoreAsDataStoreName = DataStoreName.FromProjectLocationDataStore(\"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\"),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Query = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 QueryModel = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UserPseudoId = \"\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 IncludeTailSuggestions = false,\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request\u00a0 \u00a0 \u00a0 \u00a0 CompleteQueryResponse response = completionServiceClient.CompleteQuery(request);\u00a0 \u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Go API reference documentation](/go/docs/reference/cloud.google.com/go/discoveryengine/latest/apiv1beta) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-go/blob/HEAD/internal/generated/snippets/discoveryengine/apiv1/CompletionClient/CompleteQuery/main.go) \n```\npackage mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryengine \"cloud.google.com/go/discoveryengine/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 discoveryenginepb \"cloud.google.com/go/discoveryengine/apiv1/discoveryenginepb\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 // This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 \u00a0 \u00a0 // It will require modifications to work:\u00a0 \u00a0 \u00a0 \u00a0 // - It may require correct/in-range values for request initialization.\u00a0 \u00a0 \u00a0 \u00a0 // - It may require specifying regional endpoints when creating the service client as shown in:\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options\u00a0 \u00a0 \u00a0 \u00a0 c, err := discoveryengine.NewCompletionClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Handle error.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer c.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &discoveryenginepb.CompleteQueryRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Fill request struct fields.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // See https://pkg.go.dev/cloud.google.com/go/discoveryengine/apiv1/discoveryenginepb#CompleteQueryRequest.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := c.CompleteQuery(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // TODO: Handle error.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // TODO: Use resp.\u00a0 \u00a0 \u00a0 \u00a0 _ = resp}\n```For more information, see the [Vertex AI Search and Conversation Java API reference documentation](/java/docs/reference/google-cloud-discoveryengine/latest/overview) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-java/blob/HEAD/java-discoveryengine/samples/snippets/generated/com/google/cloud/discoveryengine/v1/completionservice/completequery/SyncCompleteQuery.java) \n```\nimport com.google.cloud.discoveryengine.v1.CompleteQueryRequest;import com.google.cloud.discoveryengine.v1.CompleteQueryResponse;import com.google.cloud.discoveryengine.v1.CompletionServiceClient;import com.google.cloud.discoveryengine.v1.DataStoreName;public class SyncCompleteQuery {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 syncCompleteQuery();\u00a0 }\u00a0 public static void syncCompleteQuery() throws Exception {\u00a0 \u00a0 // This snippet has been automatically generated and should be regarded as a code template only.\u00a0 \u00a0 // It will require modifications to work:\u00a0 \u00a0 // - It may require correct/in-range values for request initialization.\u00a0 \u00a0 // - It may require specifying regional endpoints when creating the service client as shown in\u00a0 \u00a0 // https://cloud.google.com/java/docs/setup#configure_endpoints_for_the_client_library\u00a0 \u00a0 try (CompletionServiceClient completionServiceClient = CompletionServiceClient.create()) {\u00a0 \u00a0 \u00a0 CompleteQueryRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CompleteQueryRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDataStore(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DataStoreName.ofProjectLocationDataStoreName(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"[PROJECT]\", \"[LOCATION]\", \"[DATA_STORE]\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQuery(\"query107944136\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQueryModel(\"queryModel-184930495\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setUserPseudoId(\"userPseudoId-1155274652\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setIncludeTailSuggestions(true)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 CompleteQueryResponse response = completionServiceClient.completeQuery(request);\u00a0 \u00a0 }\u00a0 }}\n```For more information, see the [Vertex AI Search and Conversation Node.js API reference documentation](/nodejs/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-node/blob/HEAD/packages/google-cloud-discoveryengine/samples/generated/v1/completion_service.complete_query.js) \n```\n/**\u00a0* This snippet has been automatically generated and should be regarded as a code template only.\u00a0* It will require modifications to work.\u00a0* It may require correct/in-range values for request initialization.\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*//**\u00a0* \u00a0Required. The parent data store resource name for which the completion is\u00a0* \u00a0performed, such as\u00a0* \u00a0`projects/* /locations/global/collections/default_collection/dataStores/default_data_store`.\u00a0*/// const dataStore = 'abc123'/**\u00a0* \u00a0Required. The typeahead input used to fetch suggestions. Maximum length is\u00a0* \u00a0128 characters.\u00a0*/// const query = 'abc123'/**\u00a0* \u00a0Specifies the autocomplete data model. This overrides any model specified\u00a0* \u00a0in the Configuration > Autocomplete section of the Cloud console. Currently\u00a0* \u00a0supported values:\u00a0* \u00a0* `document` - Using suggestions generated from user-imported documents.\u00a0* \u00a0* `search-history` - Using suggestions generated from the past history of\u00a0* \u00a0SearchService.Search google.cloud.discoveryengine.v1.SearchService.Search \u00a0* \u00a0API calls. Do not use it when there is no traffic for Search API.\u00a0* \u00a0* `user-event` - Using suggestions generated from user-imported search\u00a0* \u00a0events.\u00a0* \u00a0* `document-completable` - Using suggestions taken directly from\u00a0* \u00a0user-imported document fields marked as completable.\u00a0* \u00a0Default values:\u00a0* \u00a0* `document` is the default model for regular dataStores.\u00a0* \u00a0* `search-history` is the default model for site search dataStores.\u00a0*/// const queryModel = 'abc123'/**\u00a0* \u00a0A unique identifier for tracking visitors. For example, this could be\u00a0* \u00a0implemented with an HTTP cookie, which should be able to uniquely identify\u00a0* \u00a0a visitor on a single device. This unique identifier should not change if\u00a0* \u00a0the visitor logs in or out of the website.\u00a0* \u00a0This field should NOT have a fixed value such as `unknown_visitor`.\u00a0* \u00a0This should be the same identifier as\u00a0* \u00a0UserEvent.user_pseudo_id google.cloud.discoveryengine.v1.UserEvent.user_pseudo_id \u00a0* \u00a0and\u00a0* \u00a0SearchRequest.user_pseudo_id google.cloud.discoveryengine.v1.SearchRequest.user_pseudo_id.\u00a0* \u00a0The field must be a UTF-8 encoded string with a length limit of 128\u00a0* \u00a0characters. Otherwise, an `INVALID_ARGUMENT` error is returned.\u00a0*/// const userPseudoId = 'abc123'/**\u00a0* \u00a0Indicates if tail suggestions should be returned if there are no\u00a0* \u00a0suggestions that match the full query. Even if set to true, if there are\u00a0* \u00a0suggestions that match the full query, those are returned and no\u00a0* \u00a0tail suggestions are returned.\u00a0*/// const includeTailSuggestions = true// Imports the Discoveryengine libraryconst {CompletionServiceClient} = require('@google-cloud/discoveryengine').v1;// Instantiates a clientconst discoveryengineClient = new CompletionServiceClient();async function callCompleteQuery() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 dataStore,\u00a0 \u00a0 query,\u00a0 };\u00a0 // Run request\u00a0 const response = await discoveryengineClient.completeQuery(request);\u00a0 console.log(response);}callCompleteQuery();\n```For more information, see the [Vertex AI Search and Conversation Python API reference documentation](/python/docs/reference/discoveryengine/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-python/blob/HEAD/packages/google-cloud-discoveryengine/samples/generated_samples/discoveryengine_v1_generated_completion_service_complete_query_sync.py) \n```\n# This snippet has been automatically generated and should be regarded as a# code template only.# It will require modifications to work:# - It may require correct/in-range values for request initialization.# - It may require specifying regional endpoints when creating the service# \u00a0 client as shown in:# \u00a0 https://googleapis.dev/python/google-api-core/latest/client_options.htmlfrom google.cloud import discoveryengine_v1def sample_complete_query():\u00a0 \u00a0 # Create a client\u00a0 \u00a0 client = discoveryengine_v1.CompletionServiceClient()\u00a0 \u00a0 # Initialize request argument(s)\u00a0 \u00a0 request = discoveryengine_v1.CompleteQueryRequest(\u00a0 \u00a0 \u00a0 \u00a0 data_store=\"data_store_value\",\u00a0 \u00a0 \u00a0 \u00a0 query=\"query_value\",\u00a0 \u00a0 )\u00a0 \u00a0 # Make the request\u00a0 \u00a0 response = client.complete_query(request=request)\u00a0 \u00a0 # Handle the response\u00a0 \u00a0 print(response)\n```For more information, see the [Vertex AI Search and Conversation Ruby API reference documentation](/ruby/docs/reference/google-cloud-discovery_engine-v1beta/latest) .\nTo authenticate to Vertex AI Search and Conversation, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-discovery_engine-v1/snippets/completion_service/complete_query.rb) \n```\nrequire \"google/cloud/discovery_engine/v1\"\n### Snippet for the complete_query call in the CompletionService service\n## This snippet has been automatically generated and should be regarded as a code# template only. It will require modifications to work:# - It may require correct/in-range values for request initialization.# - It may require specifying regional endpoints when creating the service# client as shown in https://cloud.google.com/ruby/docs/reference.\n## This is an auto-generated example demonstrating basic usage of# Google::Cloud::DiscoveryEngine::V1::CompletionService::Client#complete_query.#def complete_query\u00a0 # Create a client object. The client can be reused for multiple calls.\u00a0 client = Google::Cloud::DiscoveryEngine::V1::CompletionService::Client.new\u00a0 # Create a request. To set request fields, pass in keyword arguments.\u00a0 request = Google::Cloud::DiscoveryEngine::V1::CompleteQueryRequest.new\u00a0 # Call the complete_query method.\u00a0 result = client.complete_query request\u00a0 # The returned object is of type Google::Cloud::DiscoveryEngine::V1::CompleteQueryResponse.\u00a0 p resultend\n```\n## Use an autocomplete denylist\nYou can use a denylist to prevent specific terms from appearing as autocomplete suggestions.\nFor example, take a pharmaceutical company. If a medication is no longer FDA-approved but is mentioned in documents in their data store, they might want to prevent that medication from appearing as a suggested query. The company could add the name of that medication to a denylist to prevent it from being suggested.\nThe following limits apply:\n- One denylist per data store\n- Uploading a denylist overwrites any existing denylist for that data store\n- Up to 1000 terms per denylist\n- Terms are case-insensitive\n- After importing a denylist, it takes 1-2 days to take effect\nEach entry of your denylist consists of a `blockPhrase` and `matchOperator` :\n- `blockPhrase`: Enter a string as your denylist term. Terms are case-insensitive.\n- `matchOperator`: Accepts the following values:- `EXACT_MATCH`: Prevents an exact match of the denylist term from appearing as a suggested query.\n- `CONTAINS`: Prevents any suggestion that contains the denylist term from appearing.The following is an example of a denylist with four entries:\n```\n{\u00a0 \u00a0 \"entries\": [\u00a0 \u00a0 \u00a0 \u00a0 {\"blockPhrase\":\"Oranges\",\"matchOperator\":\"CONTAINS\"},\u00a0 \u00a0 \u00a0 \u00a0 {\"blockPhrase\":\"bAd apples\",\"matchOperator\":\"EXACT_MATCH\"},\u00a0 \u00a0 \u00a0 \u00a0 {\"blockPhrase\":\"Cool as A Cucumber\",\"matchOperator\":\"EXACT_MATCH\"},\u00a0 \u00a0 \u00a0 \u00a0 {\"blockPhrase\":\"cherry pick\",\"matchOperator\":\"CONTAINS\"}\u00a0 \u00a0 ]}\n```\nPrior to importing a denylist, verify that the necessary [access controls](/generative-ai-app-builder/docs/access-control) are set for Discovery Engine editor access.\nDenylists can be imported either [from local JSON data](#denylist-local) or [from Cloud Storage](#denylist-storage) . To remove a denylist from a data store, [purge the denylist](#denylist-purge) .\n### Import a denylist from local JSON data\nTo import a denylist from a local JSON file containing your denylist, do the following:\n- Create your denylist in a local JSON file with the following format. Make sure each denylist entry is in a new line with no line breaks.```\n{\u00a0 \u00a0 \"inlineSource\": {\u00a0 \u00a0 \u00a0 \u00a0 \"entries\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 { \"blockPhrase\":\"TERM_1\",\"matchOperator\":\"MATCH_OPERATOR_1\" },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 { \"blockPhrase\":\"TERM_2\",\"matchOperator\":\"MATCH_OPERATOR_2\" }\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }}\n```\n- Make a POST request to the `suggestionDenyListEntries:import` method, providing the name of your JSON file.```\ncurl -X POST \\\u00a0 \u00a0 -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0 -H \"Content-Type: application/json; charset=utf-8\" \\\u00a0 \u00a0 --data @DENYLIST_FILE \\\u00a0 \"https://discoveryengine.googleapis.com/v1alpha/projects/PROJECT_ID/locations/LOCATION/dataStores/DATA_STORE_ID/suggestionDenyListEntries:import\"\n```- : The local path of the JSON file containing the denylist terms.\n- : The project number or ID of your Google Cloud project.\n- : The location of your data store:`us`,`eu`or`global`.\n- : The ID of the data store that is associated with your app.After importing your denylist, it takes 1-2 days to start filtering suggestions.\n### Import a denylist from Cloud Storage\nTo import a denylist from a JSON file in Cloud Storage, do the following:\n- Create your denylist in a JSON file with the following format and import to a Cloud Storage bucket. Make sure each denylist entry is in a new line with no line breaks.```\n{\u00a0 \u00a0 \"entries\": [\u00a0 \u00a0 \u00a0 \u00a0 { \"blockPhrase\":\"TERM_1\",\"matchOperator\":\"MATCH_OPERATOR_1\" },\u00a0 \u00a0 \u00a0 \u00a0 { \"blockPhrase\":\"TERM_2\",\"matchOperator\":\"MATCH_OPERATOR_2\" }\u00a0 \u00a0 ]}\n```\n- Create a local JSON file containing the [gcsSource](/generative-ai-app-builder/docs/reference/rest/v1/GcsSource) object. Use this to point to your denylist file's location in a Cloud Storage bucket.```\n\u00a0{\u00a0 \u00a0 \u00a0\"gcsSource\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"inputUris\": [ \"DENYLIST_STORAGE_LOCATION\" ]\u00a0 \u00a0 \u00a0}\u00a0}\n```- : The location of your denylist in Cloud Storage. You can enter only one URI. The URI must be entered in this format:`gs://` `` `/` ``.\n- Make a POST request to the `suggestionDenyListEntries:import` method, including the `gcsSource` object.```\ncurl -X POST \\\u00a0 \u00a0 -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0 -H \"Content-Type: application/json; charset=utf-8\" \\\u00a0 \u00a0 --data @GCS_SOURCE_FILE \\\u00a0 \u00a0\"https://discoveryengine.googleapis.com/v1alpha/projects/PROJECT_ID/locations/LOCATION/dataStores/DATA_STORE_ID/suggestionDenyListEntries:import\"\n```- : The local path of the file containing the`gcsSource`object that points to your denylist.\n- : The project number or ID of your Google Cloud project.\n- : The location of your data store:`us`,`eu`or`global`.\n- : The ID of the data store that is associated with your app.After importing your denylist, it takes 1-2 days to start filtering suggestions.\n### Purge a denylist\nTo purge a denylist from your data store, do the following:\n- Make a POST request to the `suggestionDenyListEntries:purge` method.```\ncurl -X POST \\\u00a0 \u00a0 -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\u00a0 \u00a0\"https://discoveryengine.googleapis.com/v1alpha/projects/PROJECT_ID/locations/LOCATION/dataStores/DATA_STORE_ID/suggestionDenyListEntries:purge\"\n```- : The project number or ID of your Google Cloud project.\n- : The location of your data store:`us`,`eu`or`global`.\n- : The ID of the data store that is associated with your app.\n## Experimental: Advanced autocomplete document data model\n**Note:** This feature is a Preview offering, subject to the \"Pre-GA Offerings Terms\" of the [GCP Service Specific Terms](https://cloud.google.com/terms/service-terms) . Pre-GA products and features may have limited support, and changes to pre-GA products and features may not be compatible with other pre-GA versions. For more information, see the [launch stage descriptions](https://cloud.google.com/products#product-launch-stages) . Further, by using this feature, you agree to the [Generative AI Preview terms and conditions](https://cloud.google.com/trustedtester/aitos) (\"Preview Terms\"). For this feature, you can process personal data as outlined in the [Cloud Data Processing Addendum](https://cloud.google.com/terms/data-processing-terms) , subject to applicable restrictions and obligations in the Agreement (as defined in the Preview Terms).\nVertex AI Search and Conversation provides an advanced data model for autocomplete. Based on the documents you import, this data model generates high-quality autocomplete suggestions by leveraging Google large language models.\nThis feature is experimental. If you're interested in using this feature, contact the Vertex AI Search and Conversation support team.", "guide": "Vertex AI Search and Conversation"}