{"title": "Vertex AI Search and Conversation - About media documents and data stores", "url": "https://cloud.google.com/generative-ai-app-builder/docs/media-documents?hl=zh-cn", "abstract": "# Vertex AI Search and Conversation - About media documents and data stores\nThis page provides information about documents and data stores for media. If you're using media recommendations or media search, review the required schema and fields for your documents and data stores on this page before uploading your data.\n**Note:** Media search is in Preview with allowlist.\n", "content": "## Overview\nA document is any item that you upload into a Vertex AI Search and Conversation data store. For media, a document typically contains metadata information about media content, such as videos, news articles, music files, or podcasts. The `Document` object in the API captures this metadata information.\nYour data store contains a collection of documents that you have uploaded. When you create a data store, you specify that it will contain media documents. Data stores for media can only be attached to media apps, not to other app types such as generic search and recommendations. Data stores are represented in the API by the `DataStore` resource.\nThe quality of the data that you upload has a direct effect on the quality of the results that media apps provide. In general, the more accurate and specific information you can provide, the higher quality your results.\n## JSON Schema for Document\nWhen using media, documents must use the predefined JSON schema for media.\nDocuments are uploaded with either a JSON or Struct data representation. Make sure the document JSON or Struct conforms to the following JSON schema. The JSON schema uses [JSON Schema 2020-12](https://json-schema.org/draft/2020-12/release-notes.html) for validation. For more about JSON Schema, also see the [JSON Schema specification documentation](https://json-schema.org/specification.html) at json-schema.org.\n```\n{\u00a0 \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\u00a0 \"type\": \"object\",\u00a0 \"properties\": {\u00a0 \u00a0 \"title\": {\u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 },\u00a0 \u00a0 \"description\": {\u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 },\u00a0 \u00a0 \"language_code\": {\u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 },\u00a0 \u00a0 \"categories\": {\u00a0 \u00a0 \u00a0 \"type\": \"array\",\u00a0 \u00a0 \u00a0 \"items\": {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 },\u00a0 \u00a0 \"uri\": {\u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 },\u00a0 \u00a0 \"images\": {\u00a0 \u00a0 \u00a0 \"type\": \"array\",\u00a0 \u00a0 \u00a0 \"items\": {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"object\",\u00a0 \u00a0 \u00a0 \u00a0 \"properties\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"uri\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"name\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 },\u00a0 \u00a0 \"media_type\": {\u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 },\u00a0 \u00a0 \"in_languages\": {\u00a0 \u00a0 \u00a0 \"type\": \"array\",\u00a0 \u00a0 \u00a0 \"items\": {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 },\u00a0 \u00a0 \"country_of_origin\": {\u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 },\u00a0 \u00a0 \"content_index\": {\u00a0 \u00a0 \u00a0 \"type\": \"integer\",\u00a0 \u00a0 },\u00a0 \u00a0 \"persons\": {\u00a0 \u00a0 \u00a0 \"type\": \"array\",\u00a0 \u00a0 \u00a0 \"items\": {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"object\",\u00a0 \u00a0 \u00a0 \u00a0 \"properties\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"name\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"role\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"custom_role\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"rank\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"integer\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"uri\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"required\": [\"name\", \"role\"],\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 },\u00a0 \u00a0 \"organizations\": {\u00a0 \u00a0 \u00a0 \"type\": \"array\",\u00a0 \u00a0 \u00a0 \"items\": {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"object\",\u00a0 \u00a0 \u00a0 \u00a0 \"properties\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"name\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"role\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"custom_role\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"rank\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"integer\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"uri\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"required\": [\"name\", \"role\"],\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 },\u00a0 \u00a0 \"hash_tags\": {\u00a0 \u00a0 \u00a0 \"type\": \"array\",\u00a0 \u00a0 \u00a0 \"items\": {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 },\u00a0 \u00a0 \"filter_tags\": {\u00a0 \u00a0 \u00a0 \"type\": \"array\",\u00a0 \u00a0 \u00a0 \"items\": {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 },\u00a0 \u00a0 \"duration\": {\u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 },\u00a0 \u00a0 \"content_rating\": {\u00a0 \u00a0 \u00a0 \"type\": \"array\",\u00a0 \u00a0 \u00a0 \"items\": {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 },\u00a0 \u00a0 \"aggregate_ratings\": {\u00a0 \u00a0 \u00a0 \"type\": \"array\",\u00a0 \u00a0 \u00a0 \"items\": {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"object\",\u00a0 \u00a0 \u00a0 \u00a0 \"properties\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"rating_source\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"rating_score\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"number\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"rating_count\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"integer\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"required\": [\"rating_source\"],\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 },\u00a0 \u00a0 \"available_time\": {\u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 },\u00a0 \u00a0 \"expire_time\": {\u00a0 \u00a0 \u00a0 \"type\": \"string\",\u00a0 \u00a0 },\u00a0 \u00a0 \"production_year\": {\u00a0 \u00a0 \u00a0 \"type\": \"integer\",\u00a0 \u00a0 }\u00a0 },\u00a0 \"required\": [\"title\", \"categories\", \"uri\", \"available_time\"],}\n```\n## Sample JSON Document object\nThe following example shows an example of a JSON `Document` object.\n```\n{\u00a0 \"title\": \"Test document title\",\u00a0 \"description\": \"Test document description\",\u00a0 \"language_code\": \"en-US\",\u00a0 \"categories\": [\u00a0 \u00a0 \"sports > clip\",\u00a0 \u00a0 \"sports > highlight\"\u00a0 ],\u00a0 \"uri\": \"http://www.example.com\",\u00a0 \"images\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"uri\": \"http://example.com/img1\",\u00a0 \u00a0 \u00a0 \"name\": \"image_1\"\u00a0 \u00a0 }\u00a0 ],\u00a0 \"media_type\": \"sports-game\",\u00a0 \"in_languages\": [\u00a0 \u00a0 \"en-US\"\u00a0 ],\u00a0 \"country_of_origin\": \"US\",\u00a0 \"content_index\": 0,\u00a0 \"persons\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"name\": \"sports person\",\u00a0 \u00a0 \u00a0 \"role\": \"player\",\u00a0 \u00a0 \u00a0 \"rank\": 0,\u00a0 \u00a0 \u00a0 \"uri\": \"http://example.com/person\"\u00a0 \u00a0 },\u00a0 ],\u00a0 \"organizations\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"name\": \"sports team\",\u00a0 \u00a0 \u00a0 \"role\": \"team\",\u00a0 \u00a0 \u00a0 \"rank\": 0,\u00a0 \u00a0 \u00a0 \"uri\": \"http://example.com/team\"\u00a0 \u00a0 },\u00a0 ],\u00a0 \"hash_tags\": [\u00a0 \u00a0 \"tag1\"\u00a0 ],\u00a0 \"filter_tags\": [\u00a0 \u00a0 \"filter_tag\"\u00a0 ],\u00a0 \"duration\": \"100s\",\u00a0 \"production_year\": 1900,\u00a0 \"content_rating\": [\u00a0 \u00a0 \"PG-13\"\u00a0 ],\u00a0 \"aggregate_ratings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"rating_source\": \"imdb\",\u00a0 \u00a0 \u00a0 \"rating_score\": 4.5,\u00a0 \u00a0 \u00a0 \"rating_count\": 1250\u00a0 \u00a0 }\u00a0 ],\u00a0 \"available_time\": \"2022-08-26T23:00:17Z\"}\n```\n## Document fields\nThis section lists the field values you provide when you create documents for your data store. The values should correspond to the values used in your internal document database, and should accurately reflect the item represented.\n### Document object fields\nThe following fields are top-level fields for the `Document` object. Also refer to these fields on the [Document reference page](/generative-ai-app-builder/docs/reference/rest/v1/projects.locations.collections.dataStores.branches.documents) .\n| Field   | Notes                                                      |\n|:-----------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| name    | The full, unique resource name of the document. Required for all Document methods except for create and import. During import, the name is automatically generated and does not need to be manually provided.    |\n| id    | The document ID used by your internal database. The ID field must be unique across your entire data store. The same value is used when you record a user event, and is also returned by the recommend and search methods. |\n| schemaId   | Required. The identifier of the schema located in the same data store. Should be set as \"default_schema\", which is automatically created when the default data store is created.           |\n| parentDocumentId | The ID of the parent document. For top-level (root) documents, parent_document_id can be empty or can point to itself. For child documents, parent_document_id should point to a valid root document.      |\n### Key properties\nThe following properties are defined using the predefined JSON Schema format for media.\nFor more information about JSON properties, see the Understanding JSON Schema documentation for [properties](https://json-schema.org/understanding-json-schema/reference/object.html) at json-schema.org.\nThe following table defines flat properties.\n| Field name | Notes                                                                                                                                     |\n|:--------------||\n| title   | String - required Document title from your database. A UTF-8 encoded string. Limited to 1000 characters.                                                                                                            |\n| categories | String - required Document categories. This property is repeated for supporting one document belonging to several parallel categories. Use the full category path for higher quality results. To represent the full path of a category, use the > symbol to separate hierarchies. If > is part of the category name, replace it with another character(s). For example: \"categories\": [ \"sports > highlight\" ] A document can contain at most 250 categories. Each category is a UTF-8 encoded string with a length limit of 5000 characters. |\n| uri   | String - required URI of the document. Length limit of 5000 characters.                                                                                                                    |\n| description | String - optional Description of the document. Length limit of 5000 characters.                                                                                                                  |\n| language_code | String - optional Language of the title/description and other string attributes. Use language tags defined by BCP 47. For document recommendation, this field is ignored and the text language is detected automatically. The document can include text in different languages, but duplicating documents to provide text in multiple languages can result in degraded performance. For document search this field is in use. It defaults to \"en-US\" if unset. For example, \"language_code\": \"en-US\".           |\nThe following table defines hierarchical key properties.\n| Field name | Notes                      |\n|:-------------|:--------------------------------------------------------------------------------------------|\n| images  | Object - optional - repeated Root key property for encapsulating image-related properties. |\n| images.uri | String - optional URI of the image. Length limit of 5,000 characters.      |\n| images.name | String - optional Name of the image. Length limit of 128 characters.      |\nThe following table defines flat key media properties.\n| Field name  | Notes                                                                                            |\n|:------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| duration   | String - optional Duration of the media content. Duration should be encoded as a string. Encoding should be the same as the google::protobuf::Duration JSON string encoding. For example: \"5s\", \"1m\"                                            |\n| available_time | String - required The time that the content is available to the end-users. This field identifies the freshness of a content for end-users. The timestamp should conform to RFC 3339 standard. For example: \"2022-08-26T23:00:17Z\"                                    |\n| expire_time  | String - optional The time that the content will expire for the end-users. This field identifies the freshness of a content for end-users. The timestamp should conform to RFC 3339 standard. For example: \"2032-12-31T23:00:17Z\"                                    |\n| media_type  | String - optional Top-level category. Supported types: episode, movie, concert, event, live-event, broadcast, tv-series, video-game, clip, vlog, audio, audio-book, music, album , articles, news, radio, podcast, book, sports-game                                   |\n| in_languages  | String - optional - repeated Language of the media contents. Use language tags defined by BCP 47. For example: \"in_languages\": [ \"en-US\"]                                                           |\n| country_of_origin | String - optional Media document country of origin. Length limit of 128 characters. For example: \"country_of_origin\": \"US\"                                                               |\n| content_index  | Int - optional Content index of the media document. Content index field can be used to order the documents relative to others. For example, episode number can be used as the content index. Content index should be a non-negative integer. For example: \"content_index\": 0                         |\n| filter_tags  | String - optional - repeated Filter tags for the document. At most 250 values are allowed per document with a length limit of 1000 characters. Otherwise, an INVALID_ARGUMENT error is returned. This tag can be used for filtering recommendation results by passing the tag as part of the RecommendRequest.filter. For example: \"filter_tags\": [ \"filter_tag\"]    |\n| hash_tags   | String - optional - repeated Hashtags for the document. At most 100 values are allowed per document, with a length limit of 5000 characters. For example: \"hash_tags\": [ \"soccer\", \"world cup\"]                                             |\n| content_rating | String - optional - repeated The content rating, used for content advisory systems and content filtering based on the audience. At most 100 values are allowed per document with a length limit of 128 characters. This tag can be used for filtering recommendation results by passing the tag as part of the RecommendRequest.filter. For example: content_rating: [\"PG-13\"] |\nThe following table defines hierarchical key media properties.\n| Field name      | Notes                                                                                                    |\n|:--------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| persons       | Object - optional - repeated Root key property for encapsulating the person-related properties. For example: \"persons\":[{\"name\":\"sports person\",\"role\":\"player\",\"rank\":0,\"uri\":\"http://example.com/person\"}]                                                 |\n| persons.name     | String - required Name of the person.                                                                                            |\n| persons.role     | String - required The role of the person in the media item. Supported values: director, actor, player, team, league, editor, author, character, contributor, creator, editor, funder, producer, provider, publisher, sponsor, translator, music-by, channel, custom-role If none of the supported values are applied to role, set role to custom-role and provide the value in the custom_role field.  |\n| persons.custom_role    | String - optional custom_role is set if and only if the role is set to be a custom-role. Must be a UTF-8 encoded string with a length limit of 128 characters. Must match the pattern: [a-zA-Z0-9][a-zA-Z0-9_]*.                                                |\n| persons.rank     | Int - optional Used for role ranking. For example, for first actor, role = \"actor\", rank = 1                                                                              |\n| persons.uri      | String - optional URI of the person.                                                                                            |\n| organizations     | Object - optional - repeated Root key property for encapsulating the organization-related properties. For example: \"organizations \":[{\"name\":\"sports team\",\"role\":\"team\",\"rank\":0,\"uri\":\"http://example.com/team\"}]                                               |\n| organizations.name    | String - required Name of the organization.                                                                                          |\n| organizations.role    | String - required The role of the organization in the media item. Supported values: director, actor, player, team, league, editor, author, character, contributor, creator, editor, funder, producer, provider, publisher, sponsor, translator, music-by, channel, custom-role If none of the supported values are applied to role, set role to custom-role and provide the value in the custom_role field. |\n| organizations.custom_role  | String - optional custom_role is set if and only if the role is set to be a custom-role. Must be a UTF-8 encoded string with a length limit of 128 characters. Must match the pattern: [a-zA-Z0-9][a-zA-Z0-9_]*.                                                |\n| organizations.rank    | String - optional Used for role ranking. For example, for first publisher: role = \"publisher\", rank = 1.                                                                           |\n| organizations.uri    | String - optional URI of the organization.                                                                                          |\n| aggregate_ratings    | Object - optional - repeated Root key property for encapsulating the aggregate_rating related properties.                                                                          |\n| aggregate_ratings.rating_source | String - required The source for rating. For example, imdb or rotten_tomatoes. Must be a UTF-8 encoded string with a length limit of 128 characters. Must match the pattern: [a-zA-Z0-9][a-zA-Z0-9_]*.                                                   |\n| aggregate_ratings.rating_score | Double - optional The aggregated rating. The rating should be normalized to the [1, 5] range.                                                                             |\n| aggregate_ratings.rating_count | Int - optional The number of individual reviews. Should be a non-negative value.                                                                                 |\n## Document levels\nDocument levels determine the hierarchy in your data store. Typically, you should have a single-level data store or a two-level data store. Only two layers are supported.\nFor example, you can have a single-level data store where each document is an individual item. Alternatively, you might choose a two-level data store that contains both groups of items and individual items.\n### Document level types\nThere are two document level types:\n- **Parent.** Parent documents are what Vertex AI Search returns in recommendations and searches. Parents can be individual documents or groups of similar documents. This level type is recommended.\n- **Child.** Child documents are versions of a group's parent document. Children can only be individual documents. For example, if the parent document is \"Example TV Show\", children could be \"Episode 1\" and \"Episode 2\". This level type can be difficult to configure and maintain, and is not recommended.## About data store hierarchy\nWhen planning your data store hierarchy, decide if your data store should contain only parents or parents and children. The key point to remember is that recommendations and searches only return parent documents.\nFor example, a parent-only data store might work well for audiobooks, where a recommendations panel returns a selection of individual audiobooks. On the other hand, if you uploaded TV show episodes as parent documents to a parent-only data store, several out-of-order episodes could be recommended in the same panel.\nA TV show data store could work with both parents and children, where each parent document represents a TV show with child documents that represent the episodes of that TV show. This two-level data store allows the recommendation panel to show a range of similar TV shows. The end-user can click a particular show to select an episode to watch.\nBecause parent-child hierarchies can be difficult to configure and maintain, parent-only data stores are recommended.\nFor example, a TV show data store can work well as a parent-only data store where each parent document represents a TV show that can be recommended, and individual episodes are not included (and therefore not recommended).\nIf you determine that your data store needs to have both parents and children, that is, groups and singular items, but you only have singular items now, you need to create parents for the groups. The minimum information that you need to provide for a parent is `id` , `title` , and `categories` . For more information, see the section [Document fields](#document-fields) .\n## BigQuery schema for media\nIf you plan to import your documents from BigQuery, use the predefined BigQuery schema to create a BigQuery table with the correct format and load it with your documents data before you [import your documents](/generative-ai-app-builder/docs/import-user-events) .\n```\n[\u00a0 {\u00a0 \u00a0 \"name\": \"id\",\u00a0 \u00a0 \"mode\": \"REQUIRED\",\u00a0 \u00a0 \"type\": \"STRING\",\u00a0 \u00a0 \"fields\": []\u00a0 },\u00a0 {\u00a0 \u00a0 \"name\": \"schemaId\",\u00a0 \u00a0 \"mode\": \"REQUIRED\",\u00a0 \u00a0 \"type\": \"STRING\",\u00a0 \u00a0 \"fields\": []\u00a0 },\u00a0 {\u00a0 \u00a0 \"name\": \"parentDocumentId\",\u00a0 \u00a0 \"mode\": \"NULLABLE\",\u00a0 \u00a0 \"type\": \"STRING\",\u00a0 \u00a0 \"fields\": []\u00a0 },\u00a0 {\u00a0 \u00a0 \"name\": \"jsonData\",\u00a0 \u00a0 \"mode\": \"NULLABLE\",\u00a0 \u00a0 \"type\": \"STRING\",\u00a0 \u00a0 \"fields\": []\u00a0 }]\n```", "guide": "Vertex AI Search and Conversation"}