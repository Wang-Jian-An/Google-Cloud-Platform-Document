{"title": "Vertex AI Search and Conversation - Filter generic search for structured or unstructured data", "url": "https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata?hl=zh-cn", "abstract": "# Vertex AI Search and Conversation - Filter generic search for structured or unstructured data\nIf you have a search app that uses structured data, or unstructured data with metadata, you can use the metadata to filter your search queries. This page explains how use metadata fields to restrict your search to a specific set of documents.\n", "content": "## Before you begin\nMake sure you have created an app and ingested structured data, or unstructured data with metadata. For more information, see [Create a search app](/generative-ai-app-builder/docs/create-engine-es) .\n### Metadata example\nReview this example of metadata for four PDF files ( `document_1.pdf` , `document_2.pdf` , `document_3.pdf` , and `document_4.pdf` ). This metadata would be in a JSON file in a Cloud Storage bucket, along with the PDF files. You can refer back to this example as you read through this page.\n```\n{\"id\": \"1\", \"structData\": {\"title\": \"Policy on accepting corrected claims\", \"category\": [\"persona_A\"]}, \"content\": {\"mimeType\": \"application/pdf\", \"uri\": \"gs://bucketname_87654321/data/document_1.pdf\"}}{\"id\": \"2\", \"structData\": {\"title\": \"Claims documentation and reporting guidelines for commercial members\", \"category\": [\"persona_A\", \"persona_B\"]}, \"content\": {\"mimeType\": \"application/pdf\", \"uri\": \"gs://bucketname_87654321/data/document_2.pdf\"}}{\"id\": \"3\", \"structData\": {\"title\": \"Claims guidelines for bundled services and supplies for commercial members\", \"category\": [\"persona_B\", \"persona_C\"]}, \"content\": {\"mimeType\": \"application/pdf\", \"uri\": \"gs://bucketname_87654321/data/document_3.pdf\"}}{\"id\": \"4\", \"structData\": {\"title\": \"Advantage claims submission guidelines\", \"category\": [\"persona_A\", \"persona_C\"]}, \"content\": {\"mimeType\": \"application/pdf\", \"uri\": \"gs://bucketname_87654321/data/document_4.pdf\"}}\n```\n### Filter expression syntax\nMake sure you understand the syntax of the filter expression that you'll use to define your search filter. The filter expression syntax can be summarized by the following [Extended Backus\u2013Naur form](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form#:%7E:text=In%20compute) :\n```\n\u00a0 # A single expression or multiple expressions that are joined by \"AND\" or \"OR\".\u00a0 filter = expression, { \" AND \" | \"OR\", expression };\u00a0 # Expressions can be prefixed with \"-\" or \"NOT\" to express a negation.\u00a0 expression = [ \"-\" | \"NOT \" ],\u00a0 \u00a0 # A parenthetical expression.\u00a0 \u00a0 | \"(\", expression, \")\"\u00a0 \u00a0 # A simple expression applying to a text field.\u00a0 \u00a0 # Function \"ANY\" returns true if the field contains any of the literals.\u00a0 \u00a0 ( text_field, \":\", \"ANY\", \"(\", literal, { \",\", literal }, \")\"\u00a0 \u00a0 # A simple expression applying to a numerical field. Function \"IN\" returns true\u00a0 \u00a0 # if a field value is within the range. By default, lower_bound is inclusive and\u00a0 \u00a0 # upper_bound is exclusive.\u00a0 \u00a0 | numerical_field, \":\", \"IN\", \"(\", lower_bound, \",\", upper_bound, \")\"\u00a0 \u00a0 # A simple expression that applies to a numerical field and compares with a double value.\u00a0 \u00a0 | numerical_field, comparison, double );\u00a0 # A lower_bound is either a double or \"*\", which represents negative infinity.\u00a0 # Explicitly specify inclusive bound with the character 'i' or exclusive bound\u00a0 # with the character 'e'.\u00a0 lower_bound = ( double, [ \"e\" | \"i\" ] ) | \"*\";\u00a0 # An upper_bound is either a double or \"*\", which represents infinity.\u00a0 # Explicitly specify inclusive bound with the character 'i' or exclusive bound\u00a0 # with the character 'e'.\u00a0 upper_bound = ( double, [ \"e\" | \"i\" ] ) | \"*\";\u00a0 # Supported comparison operators.\u00a0 comparison = \"<=\" | \"<\" | \">=\" | \">\" | \"=\";\u00a0 # A literal is any double quoted string. You must escape backslash (\\) and\u00a0 # quote (\") characters.\u00a0 literal = double quoted string;\u00a0 text_field = text field - for example, category;\u00a0 numerical_field = numerical field - for example, score;\n```\n## Search using a metadata filter\nTo search using a metadata filter, follow these steps:\n- Determine the metadata field to use for filtering your search queries. For example, for the metadata in [Before you begin](#before-you-begin) , you could use the `category` field as a search filter. Your users could filter on `persona_A` , `persona_B` , or `persona_C` , so their search is restricted to the documents associated with the persona that they're interested in.\n- Make the metadata field indexable:- In the Google Cloud console, go to the **Search and Conversation** page and in the navigation menu, click **Apps** . [Go to the Apps page](https://console.cloud.google.com/gen-app-builder/engines) \n- Click your search app.\n- In the navigation menu, click **Data** .\n- Click the **Schema** tab. This tab shows current field settings.\n- Click **Edit** .\n- Select the **Indexable** checkbox for the field that you want to make indexable.\n- Click **Save** . For more information, see [Configure field settings](/generative-ai-app-builder/docs/configure-field-settings) .\n- Find your data store ID. If you already have your data store ID, skip to the next step.- In the Google Cloud console, go to the **Search and Conversation** page and in the navigation menu, click **Data stores** . [Go to the Data stores page](https://console.cloud.google.com/gen-app-builder/data-stores) \n- Click the name of your data store.\n- On the **Data** page for your data store, get the data store ID.\n- Get search results.```\ncurl -X POST -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\\"https://discoveryengine.googleapis.com/v1beta/projects/PROJECT_ID/locations/global/collections/default_collection/dataStores/DATA_STORE_ID/servingConfigs/default_search:search\" \\-d '{\"query\": \"QUERY\",\"filter\": \"FILTER\"}'\n```- : The ID of your project.\n- : The ID your data store.\n- : The query text to search.\n- : Optional. A text field that lets you to filter on a specified set of fields, using [filter expressionsyntax](#filter-expression-syntax) . The default value is an empty string, which means no filter is applied.\nFor example, say that you imported the four PDF files with metadata from [Before you begin](#before-you-begin) . You want to search for documents that contain the word \"claims\", and only query documents with a `category` value of `persona_A` . You would do that by including the following statements with your call:```\n\"query\": \"claims\",\"filter\": \"category: ANY(\\\"persona_A\\\") AND score: IN(*, 100.0e)\"\n```For more information, see the REST tab at [Get search results for an app with structured or unstructured data](/generative-ai-app-builder/docs/preview-search-results#structured-unstructured) .", "guide": "Vertex AI Search and Conversation"}