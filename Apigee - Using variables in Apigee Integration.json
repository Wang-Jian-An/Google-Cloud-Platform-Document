{"title": "Apigee - Using variables in Apigee Integration", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Using variables in Apigee Integration\n**Announcement:** Application Integration is now available for your Google Cloud project. You can now use both Apigee Integration and Application Integration within the same Google Cloud project. [Learn more](/apigee/docs/api-platform/integration/using-application-integration)\nA is an integration element that holds and transports data between the tasks, triggers, and edges of an integration.\n- Variables can be statically defined at design time or dynamically passed to the integration at runtime.\n- Variables can reference other variables in an integration.\n- Variables can be globally accessible to all tasks, or locally accessible to a specific task.\nThree types of variables are available:\n- [Integration variables](#integration_var) : Keep track of data throughout the course of an entire integration execution.\n- [Task variables](#task_var) : Keep track of data for the duration of a single task.\n- [Config variables](#config_var) : Store the configuration data of the integration.", "content": "## Integration variables\nare similar to variables used in a programming language. Data in the variables can be read and written throughout the execution of the integration.\nIntegration variables can be used in the following ways:\n- Taken in as inputs to the integration ().\n- Returned as outputs of the integration ().\n- Used to hold temporary state during the execution of an integration.\n- **Note** : The variable roles listed above are not mutually exclusive. Any given variable can be an input variable, an output variable, both, or neither.\nThe value of a variables does not have to be statically defined in the integration. Variable values can be passed into an integration through the use of a trigger. However, if a variable is statically defined in the integration, and the same variable is supplied dynamically with trigger, the dynamic value assignment will overwrite the static assignment.\n### Supported data types for integration variables\nThe following data types are supported for integration variables:\n- String and String array\n- Integer and Integer array\n- Double and Double array\n- Boolean and Boolean array\n- JSON\n## Task variables\nare pre-defined auto-generated variables of a [task](/application-integration/docs/tasks) . If a task has an output, all such ouputs are available in a task variable. You cannot delete or edit a task variable. For example, for the **Call REST Endpoint** task, the response body is stored in the `responseBody` variable.\n## Config variables\n**    Preview     ** This product or feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA products and features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nenable you to externalize configuration for integration. With config variables, you can configure aspects of your integration such as connector details, authentication details, or URL endpoints that are based on the development environment (QA, staging, or production). You don't need to update your integration manually before uploading the integration to a new environment. Application Integration lets you enter values for the config variables when you publish the integration.\nTo learn how to create config variables and use them, see the tutorial [Build CICD for your integration](/application-integration/docs/build-cicd) .\n## View variables\nYou can use the **Variables** pane to create, edit, view, duplicate, and delete variables in your integration. The **Variables** pane also displays a count of the total variable references within the integration.\nTo view the **Variables** pane, click last_page (Toggle panel) in the designer navigation bar.\nThe following image shows a sample layout of the **Variables** pane:\n## Create a variable\nTo create a variable, perform the following steps:\n- In the integration editor navigation bar, clicklast_page(Toggle panel) to bring up the **Variables** pane.\n- Click **+Create** .\n- Do the following in the **Create Variable** pane:- **Name:** Enter the name of the variable.\n- **Variable Type:** Choose the type of the variable.\n- | Data type      | Description                                 |\n|:--------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------|\n| nan        | A local variable in an integration.                           |\n| Config variable for Integration | A config variable in an integration.                           |\n| Input to Integration   | During execution the variable will be provided as an input to the executed trigger.               |\n| Output from Integration   | Variable's final value at the end of execution should be output to the integration's caller.             |\n| Input and Output of Integration | At execution the variable will be provided as an input to the executed trigger and its final value will be output to the integration's caller. |\n- **Data Type:** Choose the data type of the variable. You can identity the data type of a variable using the icon next to the variable name.| Data type  | Example               |\n|:--------------|:-------------------------------------------------------------------|\n| String  | Alex                |\n| Integer  | 30                 |\n| Double  | 30.5                |\n| Boolean  | true                |\n| JSON   | { \"employee\":{\"name\":\"Alex\", \"age\":30, \"city\":\"Mountain View\"} } |\n| String array | Alex, Kai, Raha             |\n| Integer array | 30, 25, 22               |\n| Double array | 30.5, 25.34, 22.134            |\n| Boolean array | true, false, false             |For information about the supported data types, see [Supported data types](#datatype) .\n- **Default Value:** Enter the default value for the variable. This is an optional field.\n- **Schema:** Select the JSON schema for the variable.- **Infer from a sample JSON payload:** Generates a JSON schema from a sample JSON payload. The sample payload is discarded after the schema is generated. Only the generated schema will be saved.\n- **Enter a JSON schema:** Manually enter an entire JSON schema.\n- **Infer from the default value:** Generates a JSON schema using the provided default value.\n- **None:** No JSON schema.\n **Note:** This field is displayed only for **JSON** data type variables.\n- **Mask the variable in logs (preview):** Select this option to enable masking for the variable in the integration execution logs. To enable masking for the variable, you must enable masking variables for your integration and region. For information about how to enable masking for the integration and the region, see [Edit an integration](/apigee/docs/api-platform/integration/docs/view-integration-details) and [Edit regions](//apigee/docs/api-platform/integration/docs/enable-new-region#edit-region) .For information about masking, see [Mask sensitive data in logs](/apigee/docs/api-platform/integration/docs/mask-sensitive-data-logs) .\n- Click **Create** .## Using variable data in integrations\nDuring the execution of an integration, run-time data is passed in as variables that are declared for the integration or task. Once execution begins, input data is converted into an in-memory object called an .\nAfter the Event object is created, an in-memory graph of tasks is built using the integration definition. Incoming variable values are passed to tasks based on your configuration. As the integration executes, the tasks read and write data back into the Event object,to be used by subsequent tasks or to form the output data of the integration.", "guide": "Apigee"}