{"title": "Apigee - Data mapping overview", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Data mapping overview\n**Announcement:** Application Integration is now available for your Google Cloud project. You can now use both Apigee Integration and Application Integration within the same Google Cloud project. [Learn more](/apigee/docs/api-platform/integration/using-application-integration)\nThis page provides a general overview of data mapping and the different ways to perform data mapping in Apigee Integration.\nEnterprise data may reside in various sources and formats, making it extremely difficult to integrate them into a unified data model or data pipeline. Data mapping is the process of extracting and standardizing data from multiple sources in order to establish a relationship between them and the related target data fields in the destination. Some examples of using data mapping in an integration include:\n- Extracting fields from a complex data structure such as a JSON.\n- Mapping data source to the target schema.\n- Transforming data by appling transform functions.\n- Generating output values and storing/using them as integration variables.\nApigee Integration lets you perform data mapping using the following [tasks](/application-integration/docs/task-overview) :\n- [Data Transformer Script task](#data-transformer) ( [Preview](/terms/service-terms#1) )\n- [Data Mapping task](#datamapper) ", "content": "## Data Transformer Script task\n**    Preview    \u2014 Data Transformer Script task ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nThe **Data Transformer Script** task is a template engine based data mapping feature available in Apigee Integration. It uses Google's [Jsonnet](https://jsonnet.org/) configuration language to create and edit Jsonnet templates that define the mapping relationships for the specified source and target integration variables in your integration.\nUsing the **Data Transformer Script editor** and the supported [Data Transformer functions](/apigee/docs/api-platform/integration/data-transformer-functions-reference) you can write custom data mapping logic, perform variable assignments, and add or modify integration variables.\n**Data Transformer Script editor**\nFor information about how to add and configure the **Data Transformer Script** task, see [Data Transformer Script task](/apigee/docs/api-platform/integration/configure-data-transformer-script-task) .\n## Data Mapping task\nThe **Data Mapping** task is a no-code low-code feature in Apigee Integration that provides a visual mapping canvas ( [Data Mapping editor](#editor) ) to perform data assignments and mappings in your integrations. In addition, you can also use the supported [mapping functions](#functions) to further transform your data into meaningful variables/formats to make them accessible to the other tasks or triggers in your integration.\nWith the **Data Mapping** task, you can:\n- Use the [Data Mapping editor](#editor) to visualize and define variable mapping for single or nested variables.\n- Transform variables from one data type to another data type. The **Data Mapping** task lets you apply multiple mapping functions (including nested functions) to transform the  variable data.\n**Data Mapping**\n[Data Mapping task](/apigee/docs/api-platform/integration/configure-data-mapping-task)\n### Data Mapping editor and layout\nThe **Data Mapping editor** provides a visual canvas containing the following integration elements:\n- **Variables** pane: Displays the different types of variables that are available to the integration:- **Inputs** . Input variables of the integration.\n- **Outputs** . Output variables of the integration.\n- **Local Variables** . Variables that exist within the scope of the integration.\nIf no variables are listed, click **Add +** to configure a new variable.Clickchevron_right **(Expand)** to expand each variable and view the available subfields of that variable.  To search for any variable or its subfield from the available variable list, clicksearch **(Search variables)** .For more information about variables in Apigee Integration, see [Using variables in Apigee Integration](/apigee/docs/api-platform/integration/variables) .\n- **Input** column: Displays input mapping rows containing the source of the data mapping input. Source can be a literal value, a base function, or an input variable, with [mapping functions](#mapping-functions) . Click **Variable or Value** in an input mapping row to add a source. **Tip:** To add an input variable,you can directly drag and drop a variable from the **Variables** column to the **Input** column.\n- **Output** column: Displays the output mapping rows containing the related target variables for the respective input mapping row. Target variables can be used for mapping in subsequent input rows. To assign an output variable, you can either create a new variable or directly drag and drop an existing output variable from the **Variables** column.\n**Data Mapping editor**### Mapping order\n**Data Mapping editor**\n[sample layout image](#datamapscreen)\n`Num1`\n`Num1ToInt`\n`Num1ToInt`\n### Mapping functions\nThe **Data Mapping** task provides various predefined [mapping functions](/apigee/docs/api-platform/integration/data-mapping-functions-reference) to transform and standardize the mapping data in your integration. A mapping function can have one or more input parameters, wherein each parameter can further hold a literal value, a variable, or a base function with mapping functions applied. You can use multiple mapping functions for a single input source, forming a mapping [transform expression](#transform) .\nThe end data type of an input source is based on the return type of the transform expression defined in the respective data mapping input row. The **Data Mapping editor** displays a validation error error under the respective data mapping input row if the return type of the input source doesn't match the return type of the corresponding output mapping target variable.\n### Transform expression\nA transform expression is a combination of several [mapping functions](/apigee/docs/api-platform/integration/data-mapping-functions-reference) that are either chained together in-series or in a nested structure. Using the **Data Mapping editor** , you can easily insert, modify, or remove a function or a function parameter in a defined transform expression. If the defined transform expression is invalid, the **Data Mapping editor** displays a validation error error next to the respective function or function parameter that is causing the error in the expression. To view the complete error message, hold the pointer over the validation error error icon.\n**Data Mapping editor**\nFor more information about how to configure a mapping in a **Data Mapping** task, see [Add a mapping](/apigee/docs/api-platform/integration/configure-data-mapping-task#add-map) .\nFor information about the supported pre-defined mapping functions in Apigee Integration, see [Supported data types and mapping functions](/apigee/docs/api-platform/integration/data-mapping-functions-reference) .", "guide": "Apigee"}