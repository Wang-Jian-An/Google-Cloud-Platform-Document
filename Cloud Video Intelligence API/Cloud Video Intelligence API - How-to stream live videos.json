{"title": "Cloud Video Intelligence API - How-to stream live videos", "url": "https://cloud.google.com/video-intelligence/docs/streaming/live-streaming", "abstract": "# Cloud Video Intelligence API - How-to stream live videos\n**    Beta     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nThe Video Intelligence Streaming API supports standard live streaming protocols like RTSP, RTMP, and HLS. The [AIStreamer](https://github.com/google/aistreamer/tree/master/ingestion) ingestion pipeline behaves as a streaming proxy, converting from live streaming protocols to bidirectional streaming gRPC connection.\nTo support live streaming protocols, the Video Intelligence API uses the [GStreamer](https://gstreamer.freedesktop.org/) open media framework.\n", "content": "## Step 1: Create a named pipe\nA named pipe is created to communicate between GStreamer and the AIStreamer ingestion proxy. The two processes are running inside the same Docker container.\n- : file path in your local environment. For  example, /user/local/Desktop/\n- : name of pipe you provide. For example,`my-football-game`\n```\n$ export PIPE_NAME=/path_to_pipe/name_of_pipe$ mkfifo $PIPE_NAME\n```\nExample: `/` `` `/local/Desktop/my-football-game`\n## Step 2: Run AIStreamer ingestion proxy\nThese [C++ examples](https://github.com/google/aistreamer/tree/master/ingestion/client/cpp) , available for your use, inclue a [single binary](https://github.com/google/aistreamer/blob/master/ingestion/client/cpp/BUILD) that supports all features. To build the examples, follow these [build instructions](#build_instructions) .\nThe following example shows how to use the binary from the command line.\n```\n$ export GOOGLE_APPLICATION_CREDENTIALS=/path_to_credential/credential_json$ export CONFIG=/path_to_config/config_json$ export PIPE_NAME=/path_to_pipe/name_of_pipe$ export TIMEOUT=3600$ ./streaming_client_main --alsologtostderr --endpoint \"dns:///alpha-videointelligence.googleapis.com\" \\\u00a0 \u00a0 \u00a0 --video_path=$PIPE_NAME --use_pipe=true --config=$CONFIG --timeout=$TIMEOUT\n```\n`$GOOGLE_APPLICATION_CREDENTIALS` specifies the file path of the JSON file containing your service account key.\nYou can find an example configuration file\u2014 `$CONFIG` at [github](https://github.com/google/aistreamer/tree/master/ingestion/client/cpp/config) .\nMake sure to set the correct timeout flag in the command line. If you need to stream a 1 hour of video, timeout value should be at least 3600 seconds.\n## Step 3: Run GStreamer pipeline\nGStreamer supports multiple live streaming protocols including but not limited to:\n- HTTP Live Streaming (HLS)\n- Real-time Streaming Protocol (RTSP)\n- Real-time Protocol (RTP)\n- Real-time Messaging Protocol (RTMP)\n- WebRTC\n- Streaming from Webcam\nThe Video Intelligence API uses the GStreamer pipeline to convert from these live streaming protocols to a decodable video stream, and writes the stream into the named pipe created in Step 1.\nThe following examples demonstrate how to use the live streaming library using HLS, RTSP and RTMP protocols.\n### HTTP Live Streaming (HLS)\n```\n$ export PIPE_NAME=/path_to_pipe/name_of_pipe$ export HLS_SOURCE=http://abc.def/playlist.m3u8$ gst-launch-1.0 -v souphttpsrc location=$HLS_SOURCE ! hlsdemux ! filesink location=$PIPE_NAME\n```\n### Real-time Streaming Protocol (RTSP)\n```\n$ export PIPE_NAME=/path_to_pipe/name_of_pipe$ export RTSP_SOURCE=rtsp://ip_addr:port/stream$ gst-launch-1.0 -v rtspsrc location=$RTSP_SOURCE ! rtpjitterbuffer ! rtph264depay \\\u00a0 \u00a0 \u00a0 ! h264parse ! flvmux ! filesink location=$PIPE_NAME\n```\n**Note:** You can choose any muxer that supports streaming (for example, flvmux or mpegtsmux)\n### Real-time Message Protocol (RTMP)\n```\n$ export PIPE_NAME=/path_to_pipe/name_of_pipe$ export RTMP_SOURCE=rtmp://host/app/stream$ gst-launch-1.0 -v rtmpsrc location=$RTMP_SOURCE ! flvdemux ! flvmux ! filesink location=$PIPE_NAME\n```\n## Build instructions\nThe [binary example](https://github.com/google/aistreamer/blob/master/ingestion/client/cpp/BUILD) is built using [Bazel](https://bazel.build) . A [Docker example](https://github.com/google/aistreamer/blob/master/ingestion/env/Dockerfile) that has all build dependencies configured is also provided. You can find the compiled `streaming_client_main` binary in the `$BIN_DIR` directory of the Docker image.\nFor more information on using Docker, see [Using Docker & Kubernetes](/video-intelligence/docs/streaming/docker-kubernetes) .\n## Flow control\nThe Video Intelligence Streaming API server has inherent flow control. In the following two cases, [StreamingAnnotateVideoRequest](/video-intelligence/docs/reference/rpc/google.cloud.videointelligence.v1#google.cloud.videointelligence.v1.StreamingAnnotateVideoRequest) requests are rejected, and gRPC streaming connections are stopped immediately:\n- The AIStreamer ingestion client is sending requests to Google servers too frequently.\n- The AIStreamer ingestion client is sending too much data to Google servers (beyond 20Mbytes per second).## Visualizer\nThe visualizer code provided in AIStreamer should only be considered as a code example. The visualizer may be compatible with the user's local environment. AIStreamer users should rely on the client code to visualize annotation results.", "guide": "Cloud Video Intelligence API"}