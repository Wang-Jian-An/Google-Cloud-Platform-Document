{"title": "Cloud Video Intelligence API - Detect shot changes", "url": "https://cloud.google.com/video-intelligence/docs/analyze-shots", "abstract": "# Cloud Video Intelligence API - Detect shot changes\n**Shot change analysis** detects shot changes in a video.\nThis section demonstrates a few ways to analyze a video for shot changes.\nHere is an example of performing video analysis for shot changes on a file located in Cloud Storage.\n", "content": "## Send video annotation requestThe following shows how to send a POST request to the [videos:annotate](/video-intelligence/docs/reference/rest/v1/videos/annotate) method. The example uses the Google Cloud CLI to create an access token. For instructions on installing the gcloud CLI, see the [Video Intelligence API Quickstart](/video-intelligence/docs/quickstarts) .\nBefore using any of the request data, make the following replacements:- : a Cloud Storage bucket that contains  the file you want to annotate, including the file name. Must  start with`gs://`.\n- : The numeric identifier for your Google Cloud project\nHTTP method and URL:\n```\nPOST https://videointelligence.googleapis.com/v1/videos:annotate\n```\nRequest JSON body:\n```\n{\n \"inputUri\": \"INPUT_URI\",\n \"features\": [\"SHOT_CHANGE_DETECTION\"]\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\nIf the response is successful, the Video Intelligence API returns the\n`name`\nfor your operation. The above shows an example of such a response, where\n`project-name`\nis the name of your project and\n`operation-id`\nis the ID of the long running operation created for the request.\n- : the number of your project\n- : the Cloud region where annotation should take  place. Supported cloud regions are:`us-east1`,`us-west1`,`europe-west1`,`asia-east1`. If no region is  specified, a region will be determined based on video file location.\n- : the ID of the long running operation created  for the request and provided in the response when you started the  operation, for example`12345....`\n## Get annotation resultsTo retrieve the result of the operation, make a [GET](/video-intelligence/docs/reference/rest/v1/projects.locations.operations/get) request, using the operation name returned from the call to [videos:annotate](/video-intelligence/docs/reference/rest/v1/videos/annotate) , as shown in the following example.\nBefore using any of the request data, make the following replacements:- : the name of the operation as returned by Video Intelligence API. The operation name has the format`projects/` `` `/locations/` `` `/operations/` ``\n- : The numeric identifier for your Google Cloud project\nHTTP method and URL:\n```\nGET https://videointelligence.googleapis.com/v1/OPERATION_NAME\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\nShot detection annotations are returned as a\n`shotAnnotations`\nlist. Note: The\n **done** \nfield is only returned when its value is\n **True** \n. It's not included in responses for which the operation has not completed.\n## Download annotation resultsCopy the annotation from the source to the destination bucket: (see [Copy files and objects](https://cloud.google.com/storage/docs/gsutil/commands/cp) )\n`gsutil cp` `` `gs://my-bucket`\nNote: If the output gcs uri is provided by the user, then the annotation is stored in that gcs uri. [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/videointelligence/video_analyze/video_analyze_gcs.go) \n```\nfunc shotChangeURI(w io.Writer, file string) error {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := video.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.AnnotateVideo(ctx, &videopb.AnnotateVideoRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Features: []videopb.Feature{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 videopb.Feature_SHOT_CHANGE_DETECTION,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputUri: file,\u00a0 \u00a0 \u00a0 \u00a0 })\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // A single video was processed. Get the first result.\u00a0 \u00a0 \u00a0 \u00a0 result := resp.AnnotationResults[0].ShotAnnotations\u00a0 \u00a0 \u00a0 \u00a0 for _, shot := range result {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 start, _ := ptypes.Duration(shot.StartTimeOffset)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 end, _ := ptypes.Duration(shot.EndTimeOffset)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Shot: %s to %s\\n\", start, end)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To authenticate to Video Intelligence, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/video/src/main/java/video/Detect.java) \n```\n// Instantiate a com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClienttry (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {\u00a0 // Provide path to file hosted on GCS as \"gs://bucket-name/...\"\u00a0 AnnotateVideoRequest request =\u00a0 \u00a0 \u00a0 AnnotateVideoRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInputUri(gcsUri)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addFeatures(Feature.SHOT_CHANGE_DETECTION)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 // Create an operation that will contain the response when the operation completes.\u00a0 OperationFuture<AnnotateVideoResponse, AnnotateVideoProgress> response =\u00a0 \u00a0 \u00a0 client.annotateVideoAsync(request);\u00a0 System.out.println(\"Waiting for operation to complete...\");\u00a0 // Print detected shot changes and their location ranges in the analyzed video.\u00a0 for (VideoAnnotationResults result : response.get().getAnnotationResultsList()) {\u00a0 \u00a0 if (result.getShotAnnotationsCount() > 0) {\u00a0 \u00a0 \u00a0 System.out.println(\"Shots: \");\u00a0 \u00a0 \u00a0 for (VideoSegment segment : result.getShotAnnotationsList()) {\u00a0 \u00a0 \u00a0 \u00a0 double startTime =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment.getStartTimeOffset().getSeconds()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + segment.getStartTimeOffset().getNanos() / 1e9;\u00a0 \u00a0 \u00a0 \u00a0 double endTime =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment.getEndTimeOffset().getSeconds()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + segment.getEndTimeOffset().getNanos() / 1e9;\u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"Location: %.3f:%.3f\\n\", startTime, endTime);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 System.out.println(\"No shot changes detected in \" + gcsUri);\u00a0 \u00a0 }\u00a0 }}\n```To authenticate to Video Intelligence, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/video-intelligence/analyze.js) \n```\n// Imports the Google Cloud Video Intelligence libraryconst video = require('@google-cloud/video-intelligence').v1;// Creates a clientconst client = new video.VideoIntelligenceServiceClient();/**\u00a0* TODO(developer): Uncomment the following line before running the sample.\u00a0*/// const gcsUri = 'GCS URI of file to analyze, e.g. gs://my-bucket/my-video.mp4';const request = {\u00a0 inputUri: gcsUri,\u00a0 features: ['SHOT_CHANGE_DETECTION'],};// Detects camera shot changesconst [operation] = await client.annotateVideo(request);console.log('Waiting for operation to complete...');const [operationResult] = await operation.promise();// Gets shot changesconst shotChanges = operationResult.annotationResults[0].shotAnnotations;console.log('Shot changes:');if (shotChanges.length === 1) {\u00a0 console.log('The entire video is one shot.');} else {\u00a0 shotChanges.forEach((shot, shotIdx) => {\u00a0 \u00a0 console.log(`Scene ${shotIdx} occurs from:`);\u00a0 \u00a0 if (shot.startTimeOffset === undefined) {\u00a0 \u00a0 \u00a0 shot.startTimeOffset = {};\u00a0 \u00a0 }\u00a0 \u00a0 if (shot.endTimeOffset === undefined) {\u00a0 \u00a0 \u00a0 shot.endTimeOffset = {};\u00a0 \u00a0 }\u00a0 \u00a0 if (shot.startTimeOffset.seconds === undefined) {\u00a0 \u00a0 \u00a0 shot.startTimeOffset.seconds = 0;\u00a0 \u00a0 }\u00a0 \u00a0 if (shot.startTimeOffset.nanos === undefined) {\u00a0 \u00a0 \u00a0 shot.startTimeOffset.nanos = 0;\u00a0 \u00a0 }\u00a0 \u00a0 if (shot.endTimeOffset.seconds === undefined) {\u00a0 \u00a0 \u00a0 shot.endTimeOffset.seconds = 0;\u00a0 \u00a0 }\u00a0 \u00a0 if (shot.endTimeOffset.nanos === undefined) {\u00a0 \u00a0 \u00a0 shot.endTimeOffset.nanos = 0;\u00a0 \u00a0 }\u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 `\\tStart: ${shot.startTimeOffset.seconds}` +\u00a0 \u00a0 \u00a0 \u00a0 `.${(shot.startTimeOffset.nanos / 1e6).toFixed(0)}s`\u00a0 \u00a0 );\u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 `\\tEnd: ${shot.endTimeOffset.seconds}.` +\u00a0 \u00a0 \u00a0 \u00a0 `${(shot.endTimeOffset.nanos / 1e6).toFixed(0)}s`\u00a0 \u00a0 );\u00a0 });}\n```\nFor more information on installing and using the Video Intelligence API Client Library for Python, refer to\n [Video Intelligence API Client Libraries](/video-intelligence/docs/reference/libraries) \n.\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/analyze/analyze.py) \n```\n\"\"\"Detects camera shot changes.\"\"\"video_client = videointelligence.VideoIntelligenceServiceClient()features = [videointelligence.Feature.SHOT_CHANGE_DETECTION]operation = video_client.annotate_video(\u00a0 \u00a0 request={\"features\": features, \"input_uri\": path})print(\"\\nProcessing video for shot change annotations:\")result = operation.result(timeout=90)print(\"\\nFinished processing.\")# first result is retrieved because a single video was processedfor i, shot in enumerate(result.annotation_results[0].shot_annotations):\u00a0 \u00a0 start_time = (\u00a0 \u00a0 \u00a0 \u00a0 shot.start_time_offset.seconds + shot.start_time_offset.microseconds / 1e6\u00a0 \u00a0 )\u00a0 \u00a0 end_time = (\u00a0 \u00a0 \u00a0 \u00a0 shot.end_time_offset.seconds + shot.end_time_offset.microseconds / 1e6\u00a0 \u00a0 )\u00a0 \u00a0 print(\"\\tShot {}: {} to {}\".format(i, start_time, end_time))\n```No preface\n **C#** : Please follow the [C# setup instructions](/video-intelligence/docs/libraries) on the client libraries page  and then visit the [Video Intelligence reference documentation for .NET.](https://googleapis.github.io/google-cloud-dotnet/docs/Google.Cloud.VideoIntelligence.V1/index.html) \n **PHP** : Please follow the [PHP setup instructions](/video-intelligence/docs/libraries) on the client libraries page  and then visit the [Video Intelligence reference documentation for PHP.](/php/docs/reference/cloud-videointelligence/latest) \n **Ruby** : Please follow the [Ruby setup instructions](/video-intelligence/docs/libraries) on the client libraries page  and then visit the [Video Intelligence reference documentation for Ruby.](https://googleapis.dev/ruby/google-cloud-video_intelligence/latest/Google/Cloud/VideoIntelligence/V1.html)", "guide": "Cloud Video Intelligence API"}