{"title": "Cloud Video Intelligence API - Annotate a video by using client libraries", "url": "https://cloud.google.com/video-intelligence/docs/annotate-video-client-libraries", "abstract": "# Cloud Video Intelligence API - Annotate a video by using client libraries\n# Annotate a video by using client libraries\nThis quickstart introduces you to Video Intelligence API. In this quickstart, you set up your Google Cloud project and authorization and then make a request for Video Intelligence to annotate a video.", "content": "## Before you begin\n## Install the client library```\ngo get cloud.google.com/go/videointelligence/apiv1\n```Before installing the library, make sure you've [prepared your environment for Node.js development](/nodejs/docs/setup) .\n```\nnpm install --save @google-cloud/video-intelligence\n```Before installing the library, make sure you've [prepared your environment for Python development](/python/docs/setup) .\n```\npip install --upgrade google-cloud-videointelligence\n```No preface\n **C#** : Please follow the [C# setup instructions](/video-intelligence/docs/libraries) on the client libraries page  and then visit the [Video Intelligence reference documentation for .NET.](https://googleapis.github.io/google-cloud-dotnet/docs/Google.Cloud.VideoIntelligence.V1/index.html) \n **PHP** : Please follow the [PHP setup instructions](/video-intelligence/docs/libraries) on the client libraries page  and then visit the [Video Intelligence reference documentation for PHP.](/php/docs/reference/cloud-videointelligence/latest) \n **Ruby** : Please follow the [Ruby setup instructions](/video-intelligence/docs/libraries) on the client libraries page  and then visit the [Video Intelligence reference documentation for Ruby.](https://googleapis.dev/ruby/google-cloud-video_intelligence/latest/Google/Cloud/VideoIntelligence/V1.html) \n## Label detectionNow you can use the Video Intelligence API to request information from a video or video segment, such as label detection. Run the following code to perform your first video label detection request: [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/videointelligence/video_quickstart/main.go) \n```\n// Sample video_quickstart uses the Google Cloud Video Intelligence API to label a video.package mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"github.com/golang/protobuf/ptypes\"\u00a0 \u00a0 \u00a0 \u00a0 video \"cloud.google.com/go/videointelligence/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 videopb \"cloud.google.com/go/videointelligence/apiv1/videointelligencepb\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 // Creates a client.\u00a0 \u00a0 \u00a0 \u00a0 client, err := video.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"Failed to create client: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.AnnotateVideo(ctx, &videopb.AnnotateVideoRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputUri: \"gs://cloud-samples-data/video/cat.mp4\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Features: []videopb.Feature{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 videopb.Feature_LABEL_DETECTION,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 })\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"Failed to start annotation job: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"Failed to annotate: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Only one video was processed, so get the first result.\u00a0 \u00a0 \u00a0 \u00a0 result := resp.GetAnnotationResults()[0]\u00a0 \u00a0 \u00a0 \u00a0 for _, annotation := range result.SegmentLabelAnnotations {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"Description: %s\\n\", annotation.Entity.Description)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for _, category := range annotation.CategoryEntities {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"\\tCategory: %s\\n\", category.Description)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for _, segment := range annotation.Segments {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 start, _ := ptypes.Duration(segment.Segment.StartTimeOffset)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 end, _ := ptypes.Duration(segment.Segment.EndTimeOffset)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"\\tSegment: %s to %s\\n\", start, end)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"\\tConfidence: %v\\n\", segment.Confidence)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }}\n``` [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/video/src/main/java/video/QuickstartSample.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.videointelligence.v1.AnnotateVideoProgress;import com.google.cloud.videointelligence.v1.AnnotateVideoRequest;import com.google.cloud.videointelligence.v1.AnnotateVideoResponse;import com.google.cloud.videointelligence.v1.Entity;import com.google.cloud.videointelligence.v1.Feature;import com.google.cloud.videointelligence.v1.LabelAnnotation;import com.google.cloud.videointelligence.v1.LabelSegment;import com.google.cloud.videointelligence.v1.VideoAnnotationResults;import com.google.cloud.videointelligence.v1.VideoIntelligenceServiceClient;import java.util.List;public class QuickstartSample {\u00a0 /** Demonstrates using the video intelligence client to detect labels in a video file. */\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // Instantiate a video intelligence client\u00a0 \u00a0 try (VideoIntelligenceServiceClient client = VideoIntelligenceServiceClient.create()) {\u00a0 \u00a0 \u00a0 // The Google Cloud Storage path to the video to annotate.\u00a0 \u00a0 \u00a0 String gcsUri = \"gs://cloud-samples-data/video/cat.mp4\";\u00a0 \u00a0 \u00a0 // Create an operation that will contain the response when the operation completes.\u00a0 \u00a0 \u00a0 AnnotateVideoRequest request =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AnnotateVideoRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInputUri(gcsUri)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addFeatures(Feature.LABEL_DETECTION)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<AnnotateVideoResponse, AnnotateVideoProgress> response =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 client.annotateVideoAsync(request);\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to complete...\");\u00a0 \u00a0 \u00a0 List<VideoAnnotationResults> results = response.get().getAnnotationResultsList();\u00a0 \u00a0 \u00a0 if (results.isEmpty()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"No labels detected in \" + gcsUri);\u00a0 \u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 for (VideoAnnotationResults result : results) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Labels:\");\u00a0 \u00a0 \u00a0 \u00a0 // get video segment label annotations\u00a0 \u00a0 \u00a0 \u00a0 for (LabelAnnotation annotation : result.getSegmentLabelAnnotationsList()) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Video label description : \" + annotation.getEntity().getDescription());\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // categories\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (Entity categoryEntity : annotation.getCategoryEntitiesList()) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Label Category description : \" + categoryEntity.getDescription());\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // segments\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (LabelSegment segment : annotation.getSegmentsList()) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 double startTime =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment.getSegment().getStartTimeOffset().getSeconds()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + segment.getSegment().getStartTimeOffset().getNanos() / 1e9;\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 double endTime =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment.getSegment().getEndTimeOffset().getSeconds()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + segment.getSegment().getEndTimeOffset().getNanos() / 1e9;\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"Segment location : %.3f:%.3f\\n\", startTime, endTime);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Confidence : \" + segment.getConfidence());\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```Before running the example, make sure you've [prepared your environment for Node.js development](/nodejs/docs/setup) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/video-intelligence/quickstart.js) \n```\n// Imports the Google Cloud Video Intelligence libraryconst videoIntelligence = require('@google-cloud/video-intelligence');// Creates a clientconst client = new videoIntelligence.VideoIntelligenceServiceClient();// The GCS uri of the video to analyzeconst gcsUri = 'gs://cloud-samples-data/video/cat.mp4';// Construct requestconst request = {\u00a0 inputUri: gcsUri,\u00a0 features: ['LABEL_DETECTION'],};// Execute requestconst [operation] = await client.annotateVideo(request);console.log(\u00a0 'Waiting for operation to complete... (this may take a few minutes)');const [operationResult] = await operation.promise();// Gets annotations for videoconst annotations = operationResult.annotationResults[0];// Gets labels for video from its annotationsconst labels = annotations.segmentLabelAnnotations;labels.forEach(label => {\u00a0 console.log(`Label ${label.entity.description} occurs at:`);\u00a0 label.segments.forEach(segment => {\u00a0 \u00a0 segment = segment.segment;\u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 `\\tStart: ${segment.startTimeOffset.seconds}` +\u00a0 \u00a0 \u00a0 \u00a0 `.${(segment.startTimeOffset.nanos / 1e6).toFixed(0)}s`\u00a0 \u00a0 );\u00a0 \u00a0 console.log(\u00a0 \u00a0 \u00a0 `\\tEnd: ${segment.endTimeOffset.seconds}.` +\u00a0 \u00a0 \u00a0 \u00a0 `${(segment.endTimeOffset.nanos / 1e6).toFixed(0)}s`\u00a0 \u00a0 );\u00a0 });});\n```Before running the example, make sure you've [prepared your environment for Python development](/python/docs/setup) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/quickstart/quickstart.py) \n```\nfrom google.cloud import videointelligencevideo_client = videointelligence.VideoIntelligenceServiceClient()features = [videointelligence.Feature.LABEL_DETECTION]operation = video_client.annotate_video(\u00a0 \u00a0 request={\u00a0 \u00a0 \u00a0 \u00a0 \"features\": features,\u00a0 \u00a0 \u00a0 \u00a0 \"input_uri\": \"gs://cloud-samples-data/video/cat.mp4\",\u00a0 \u00a0 })print(\"\\nProcessing video for label annotations:\")result = operation.result(timeout=180)print(\"\\nFinished processing.\")# first result is retrieved because a single video was processedsegment_labels = result.annotation_results[0].segment_label_annotationsfor i, segment_label in enumerate(segment_labels):\u00a0 \u00a0 print(\"Video label description: {}\".format(segment_label.entity.description))\u00a0 \u00a0 for category_entity in segment_label.category_entities:\u00a0 \u00a0 \u00a0 \u00a0 print(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\tLabel category description: {}\".format(category_entity.description)\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 for i, segment in enumerate(segment_label.segments):\u00a0 \u00a0 \u00a0 \u00a0 start_time = (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment.segment.start_time_offset.seconds\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + segment.segment.start_time_offset.microseconds / 1e6\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 end_time = (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment.segment.end_time_offset.seconds\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + segment.segment.end_time_offset.microseconds / 1e6\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 positions = \"{}s to {}s\".format(start_time, end_time)\u00a0 \u00a0 \u00a0 \u00a0 confidence = segment.confidence\u00a0 \u00a0 \u00a0 \u00a0 print(\"\\tSegment {}: {}\".format(i, positions))\u00a0 \u00a0 \u00a0 \u00a0 print(\"\\tConfidence: {}\".format(confidence))\u00a0 \u00a0 print(\"\\n\")\n```No preface\n **C#** : Please follow the [C# setup instructions](/video-intelligence/docs/libraries) on the client libraries page  and then visit the [Video Intelligence reference documentation for .NET.](https://googleapis.github.io/google-cloud-dotnet/docs/Google.Cloud.VideoIntelligence.V1/index.html) \n **PHP** : Please follow the [PHP setup instructions](/video-intelligence/docs/libraries) on the client libraries page  and then visit the [Video Intelligence reference documentation for PHP.](/php/docs/reference/cloud-videointelligence/latest) \n **Ruby** : Please follow the [Ruby setup instructions](/video-intelligence/docs/libraries) on the client libraries page  and then visit the [Video Intelligence reference documentation for Ruby.](https://googleapis.dev/ruby/google-cloud-video_intelligence/latest/Google/Cloud/VideoIntelligence/V1.html) Congratulations! You've sent your first request to Video Intelligence API.## How did it go?\n## Clean upTo avoid incurring charges to your Google Cloud account for   the resources used on this page, follow these steps.- Use the [Google Cloud console](https://console.cloud.google.com/) to delete your project if you don't need it.\n## What's next", "guide": "Cloud Video Intelligence API"}