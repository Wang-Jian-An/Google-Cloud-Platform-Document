{"title": "Cloud Video Intelligence API - Shot change detection tutorial", "url": "https://cloud.google.com/video-intelligence/docs/shot-detection", "abstract": "# Cloud Video Intelligence API - Shot change detection tutorial\n", "content": "## Audience\nThis tutorial is designed to let you quickly start exploring and developing applications with the Video Intelligence API. It's designed for people familiar with basic programming, though even without much programming knowledge, you should be able to follow along. Having walked through this tutorial, you should be able to use the [Reference documentation](/video-intelligence/docs/reference/rest) to create your own basic applications.\nThis tutorial steps through a Video Intelligence API application using Python code. The purpose here is not to explain the Python client libraries, but to explain how to make calls to the Video Intelligence API. Applications in Java and Node.js are essentially similar.\n## Prerequisites\nThis tutorial has several prerequisites:\n- You've [set up a Video Intelligence API project](/video-intelligence/docs/before-you-begin) in the Google Cloud console.\n- You've set up your environment using a service account and [Application Default Credentials](/video-intelligence/docs/common/auth#set_up_a_service_account) .\n- You have basic familiarity with [Python](https://www.python.org/) programming.\n- Set up your Python development environment. It's recommended that you have the latest version of Python,`pip`, and`virtualenv`installed on your system. For instructions, refer to the [Python Development Environment Setup Guide](/python/docs/setup) for Google Cloud Platform.\n- You've installed the [Google Cloud client library](https://github.com/googleapis/google-cloud-python/tree/main/packages/google-cloud-videointelligence) .## Annotate a video using shot change detection\nThis tutorial walks you through a basic Video API application, using a `SHOT_CHANGE_DETECTION` request. A `SHOT_CHANGE_DETECTION` request provides the annotation results:\n- List of all shots that occur within the video\n- For each shot, provide the start and end time of the shot\nWe'll show the entire code first. (Note that we have removed most comments from this code in order to show you how brief the code is. We'll provide more comments as we walk through the code.)\n[  videointelligence/samples/shotchange/shotchange.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/shotchange/shotchange.py) [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/shotchange/shotchange.py)\n```\nimport argparsefrom google.cloud import videointelligencedef analyze_shots(path):\u00a0 \u00a0 \"\"\"Detects camera shot changes.\"\"\"\u00a0 \u00a0 video_client = videointelligence.VideoIntelligenceServiceClient()\u00a0 \u00a0 features = [videointelligence.Feature.SHOT_CHANGE_DETECTION]\u00a0 \u00a0 operation = video_client.annotate_video(\u00a0 \u00a0 \u00a0 \u00a0 request={\"features\": features, \"input_uri\": path}\u00a0 \u00a0 )\u00a0 \u00a0 print(\"\\nProcessing video for shot change annotations:\")\u00a0 \u00a0 result = operation.result(timeout=120)\u00a0 \u00a0 print(\"\\nFinished processing.\")\u00a0 \u00a0 for i, shot in enumerate(result.annotation_results[0].shot_annotations):\u00a0 \u00a0 \u00a0 \u00a0 start_time = (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 shot.start_time_offset.seconds + shot.start_time_offset.microseconds / 1e6\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 end_time = (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 shot.end_time_offset.seconds + shot.end_time_offset.microseconds / 1e6\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 print(\"\\tShot {}: {} to {}\".format(i, start_time, end_time))if __name__ == \"__main__\":\u00a0 \u00a0 parser = argparse.ArgumentParser(\u00a0 \u00a0 \u00a0 \u00a0 description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter\u00a0 \u00a0 )\u00a0 \u00a0 parser.add_argument(\"path\", help=\"GCS path for shot change detection.\")\u00a0 \u00a0 args = parser.parse_args()\u00a0 \u00a0 analyze_shots(args.path)\n```\nThis simple application performs the following tasks:\n- Imports the libraries necessary to run the application.\n- Takes a video file stored in Cloud Storage URI as an argument and passes it to the`main()`function.\n- Gets credentials to run the Video Intelligence API service.\n- Creates a video annotation request to send to the video service.\n- Sends the request and returns a long-running operation.\n- Loops over the long-running operation until the video is processed and returns available values.\n- Parses the response for the service and displays response to the user.\nWe'll go over these steps in more detail below.\n## Import libraries\n[  videointelligence/samples/shotchange/shotchange.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/shotchange/shotchange.py) [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/shotchange/shotchange.py)\n```\nimport argparsefrom google.cloud import videointelligence\n```\nWe import `argparse` to allow the application to accept input filenames as arguments.\nFor using the Video Intelligence API, we also import the `google.cloud.videointelligence` library, which holds the directory of our API calls and enumeration constants.\n## Run your application\n[  videointelligence/samples/shotchange/shotchange.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/shotchange/shotchange.py) [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/shotchange/shotchange.py)\n```\nparser = argparse.ArgumentParser(\u00a0 \u00a0 description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)parser.add_argument(\"path\", help=\"GCS path for shot change detection.\")args = parser.parse_args()analyze_shots(args.path)\n```\nHere, we parse the passed argument for the Google Cloud Storage URI of the video filename and pass it to the `main()` function.\n## Authenticate to the API\nBefore communicating with the Video Intelligence API service, you need to authenticate your service using previously acquired credentials. Within an application, the simplest way to obtain credentials is to use [ApplicationDefaultCredentials](/video-intelligence/docs/common/auth#adc) (ADC). By default, ADC will attempt to obtain credentials from the `GOOGLE_APPLICATION_CREDENTIALS` environment file, which should be set to point to your service account's JSON key file. (You should have set up your service account and environment to use ADC in the [Quickstart](/video-intelligence/docs/getting-started) . See [Setting Up a ServiceAccount](/video-intelligence/docs/common/auth#set_up_a_service_account) for more information.)\n## Construct the request\n[  videointelligence/samples/shotchange/shotchange.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/shotchange/shotchange.py) [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/shotchange/shotchange.py)\n```\nvideo_client = videointelligence.VideoIntelligenceServiceClient()features = [videointelligence.Feature.SHOT_CHANGE_DETECTION]operation = video_client.annotate_video(\u00a0 \u00a0 request={\"features\": features, \"input_uri\": path})\n```\nNow that our Video Intelligence API service is ready, we can construct a request to that service. Requests to the Video Intelligence API are provided as JSON objects. See the [Video Intelligence APIReference](/video-intelligence/docs/reference/rest) for complete information on the specific structure of such a request.\nThis code snippet performs the following tasks:\n- Constructs the JSON for a POST request to the`annotate_video()`method.\n- Injects the Google Cloud Storage location of our passed video filename into the request.\n- Indicates that the`annotate`method should perform a`SHOT_CHANGE_DETECTION`.## Construct the long-running operation\nWhen we first execute a request against the Video Intelligence API, we do not get an immediate result; instead we get an , stored within the response's `name` field, which we can then use to check for results at a later time.\nPassing that operation's name (which is a numerical string) to the Video Intelligence API's `operations` method returns the current state of the operation. A sample response is shown below:\n```\n{\n \"response\":{\n  \"@type\":\"type.googleapis.com/google.cloud.videointelligence.v1.AnnotateVideoResponse\"\n },\n \"name\":\"us-west1.17159971042783089144\",\n \"metadata\":{\n  \"annotationProgress\":[   {\n   \"inputUri\":\"/video/gbikes_dinosaur.mp4\",\n   \"updateTime\":\"2017-01-27T19:45:54.297807Z\",\n   \"startTime\":\"2017-01-27T19:45:54.275023Z\"\n   }\n  ],\n  \"@type\":\"type.googleapis.com/google.cloud.videointelligence.v1.AnnotateVideoProgress\"\n }\n}\n```\nNote that the `response` field at this time only contains an `@type` field, denoting the type of that response. Once results are actually available, the response field will contain results of that type.\n## Check the operation\n[  videointelligence/samples/shotchange/shotchange.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/shotchange/shotchange.py) [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/shotchange/shotchange.py)\n```\nresult = operation.result(timeout=120)print(\"\\nFinished processing.\")\n```\nUsing the existing operation request for our existing operation, we construct a `while` loop to periodically check the state of that operation. Once our operation has indicated that the operation is `done` , we break out of the loop and can parse the response.\n## Parse the response\n[  videointelligence/samples/shotchange/shotchange.py ](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/shotchange/shotchange.py) [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/videointelligence/samples/shotchange/shotchange.py)\n```\nfor i, shot in enumerate(result.annotation_results[0].shot_annotations):\u00a0 \u00a0 start_time = (\u00a0 \u00a0 \u00a0 \u00a0 shot.start_time_offset.seconds + shot.start_time_offset.microseconds / 1e6\u00a0 \u00a0 )\u00a0 \u00a0 end_time = (\u00a0 \u00a0 \u00a0 \u00a0 shot.end_time_offset.seconds + shot.end_time_offset.microseconds / 1e6\u00a0 \u00a0 )\u00a0 \u00a0 print(\"\\tShot {}: {} to {}\".format(i, start_time, end_time))\n```\nOnce the operation has been completed, the response will contain an [AnnotateVideoResponse](/video-intelligence/docs/reference/rest/Shared.Types/AnnotateVideoResponse) , which consists of a list of `annotationResults` , one for each video sent in the request. Because we sent only one video in the request, we take the first `shotAnnotations` of the result. We walk through all the 'segments' for the video.\n## Run our application\nTo run our application, simply pass it the Cloud Storage URI of a video:\n```\n$ python shotchange.py gs://cloud-samples-data/video/gbikes_dinosaur.mp4\noperationId=us-west1.12468772851081463748\nOperation us-west1.12468772851081463748 started: 2017-01-30T01:53:45.981043Z\nProcessing video for shot change annotations:\nFinished processing.\n Shot 0: 0.0 to 5.166666\n Shot 1: 5.233333 to 10.066666\n Shot 2: 10.1 to 28.133333\n Shot 3: 28.166666 to 42.766666\n```\nCongratulations! You've performed an annotation task using the Video Intelligence API!", "guide": "Cloud Video Intelligence API"}