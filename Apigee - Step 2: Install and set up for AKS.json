{"title": "Apigee - Step 2: Install and set up for AKS", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Step 2: Install and set up for AKS\nYou are currently viewing version 1.1 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nThis step explains how to download and install [apigeectl](/apigee/docs/hybrid/v1.1/cli-reference) , set up the installation directories, and create GCP service accounts that are required for hybrid components to communicate, and TLS credentials that are required for Apigee hybrid to operate.\n", "content": "## \n Download and install apigeectl\n`apigeectl` is the command-line interface (CLI) for installing and managing Apigee hybrid in a Kubernetes cluster.\n**To get apigeectl:**\n- Download the release package for your operating system: **Mac 64 bit:** ```\ncurl -LO https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.1.1/apigeectl_mac_64.tar.gz\n``` **Linux 64 bit** ```\ncurl -LO https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.1.1/apigeectl_linux_64.tar.gz\n``` **Mac 32 bit:** ```\ncurl -LO https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.1.1/apigeectl_mac_32.tar.gz\n``` **Linux 32 bit** ```\ncurl -LO https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.1.1/apigeectl_linux_32.tar.gz\n```\n- Create a directory on your system to serve as the **base directory** for the  Apigee hybrid installation.\n- Extract the downloaded gzip file contents into the base directory you just created. For example:```\ntar xvzf filename.tar.gz -C path-to-base-directory\n```\n- `cd`to the base directory.\n- The tar contents are, by default, expanded into a directory with the version and platform in its  name. For example: `./apigeectl_1.0.0-f7b96a8_linux_64` . Rename that directory  to `apigeectl` :```\nmv apigeectl_1.0.0-f7b96a8_linux_64 apigeectl\n```\n- `cd`into the directory. For example:\n- `cd ./apigeectl`\n- This directory will be the `apigeectl` home directory. It is where the `apigeectl` executable command is located.\n- Create an environment variable to hold this home directory path:```\nexport APIGEECTL_HOME=$PWD\n```\n- Verify that the variable holds the correct path:```\necho $APIGEECTL_HOME\n```## \n Set up the project directory structure\nThe directory structure described below is a suggested approach. It separates Apigee hybrid release software from configuration files that you must create. Through the use of the `$APIGEECTL_HOME` variable and symbolic links that you will create, you can easily switch to a new software version if you choose to. See also [Upgrading Apigee hybrid](/apigee/docs/hybrid/v1.1/upgrade) .\n**NOTE: ** For the purpose of this quickstart, subsequent installation steps assume that you created the project structure as described below. If you follow this suggested structure, you will be able to copy and paste most installation commands directly into your terminal.\n- Be sure you are in the base directory (the directory where the`apigeectl`directory is located).\n- Create a new folder called`hybrid-files`. You can give the directory any  name you wish, but in the docs, the name`hybrid-files`will be used  consistently. Later,  you will store configuration files, service account keys, and TLS certificates in this folder.  This folder lets you keep your config files separate from the`apigeectl`software  installation:```\nmkdir hybrid-files\n```\n- The current directory structure now looks like this:```\npwd && ls\n/hybrid-base-directory\n apigeectl\n hybrid-files\n```\n- `cd`into the`hybrid-files`folder:```\ncd hybrid-files\n```\n- Inside the`hybrid-files`directory, create the following **three** subdirectories to organize files that you will create later:```\nmkdir overrides\nmkdir service-accounts\nmkdir certs\n```\n- Inside the`hybrid-files`directory, create symbolic links to`$APIGEECTL_HOME`. These symlinks allow you to run the`apigeectl`command from inside the`hybrid-files`directory:```\nln -s $APIGEECTL_HOME/tools tools\nln -s $APIGEECTL_HOME/config config\nln -s $APIGEECTL_HOME/templates templates\nln -s $APIGEECTL_HOME/plugins plugins\n```\n- To check that the symlinks were created correctly, execute this command and make  sure the link paths point to the correct locations:```\nls -l | grep ^l\n```## Create service accounts\nApigee hybrid uses GCP [service accounts](https://cloud.google.com/iam/docs/service-accounts) to allow hybrid components to communicate by making authorized API calls. In this step, you use an Apigee hybrid command-line tool to create a set of services accounts. The tool also downloads the service account private keys for you. You must then add these keys to your Apigee hybrid cluster configuration file.\nCreate the keys:\n- Be sure that you are in the`` `/hybrid-files`directory:\n- Execute the following command from inside`hybrid-files`directory. This command  creates a service account for the`apigee-metrics`component and places  the downloaded key in the`./service-accounts`directory:```\n./tools/create-service-account apigee-metrics ./service-accounts\n```When you see this prompt, enter `y` :```\n[INFO]: gcloud configured project ID is project_id.\n Press: y to proceed with creating service account in project: project_id\n Press: n to abort.\n```If this is the first time an SA with the exact name assigned by the tool was created, then  the tool just creates it, and you do not have to do anything further.If, however, you see the following message and prompt, select `y` to generate  new keys:```\n[INFO]: Service account apigee-metrics@project_id.iam.gserviceaccount.com already exists.\n...\n [INFO]: The service account might have keys associated with it. It is recommended to use existing keys.\n Press: y to generate new keys.(this does not de-activate existing keys)\n Press: n to skip generating new keys.\n \n```\n- Now, create the rest of the service accounts:```\n./tools/create-service-account apigee-synchronizer ./service-accounts\n./tools/create-service-account apigee-udca ./service-accounts\n./tools/create-service-account apigee-mart ./service-accounts\n./tools/create-service-account apigee-cassandra ./service-accounts\n./tools/create-service-account apigee-logger ./service-accounts\n```\n- Verify that the service account keys were created. You are responsible for storing these  private keys securely. The keys filenames are prefixed with the name of your GCP project.  For example:```\nls ./service-accounts\ngcp-project-id-apigee-cassandra.json\ngcp-project-id-apigee-logger.json\ngcp-project-id-apigee-mart.json\ngcp-project-id-apigee-metrics.json\ngcp-project-id-apigee-synchronizer.json\ngcp-project-id-apigee-udca.json\n```\n- **TIP:** Apigee hybrid includes a validator that checks  your service accounts' key files and permissions when [apigeectl](/apigee/docs/hybrid/v1.1/cli-reference) applies the Apigee hybrid runtime components to your cluster. This validation is  enabled by default. For more information, see [Service account validation](/apigee/docs/hybrid/v1.1/sa-validation) .## \n Create TLS certificates\nYou are required to provide TLS certificates for the MART and runtime ingress gateways in your Apigee hybrid configuration. The credentials used for the MART gateway be authorized by a certificate authority (CA). For the purpose of this quickstart (a non-production trial installation), the runtime gateway can accept self-signed credentials.\nIn this step, you will create the TLS credential files and add them to the `` `/hybrid-files/certs` directory. In [Step 3: Configure the cluster](/apigee/docs/hybrid/v1.1/install-copy-overrides) , you will add the file paths to the cluster configuration file.\n### \n Create TLS credentials for the runtime gateway\nThe runtime ingress gateway (the gateway that handles API proxy traffic) requires a TLS certificate/key pair. For this quickstart installation, you can use self-signed credentials. In the following steps, [openssl](https://www.openssl.org/) is used to generate the credentials.\n- Be sure that you are in the`` `/hybrid-files`directory.\n- Execute the following command from inside`hybrid-files`directory:```\nopenssl req -nodes -new -x509 -keyout ./certs/keystore.key -out \\\n ./certs/keystore.pem -subj '/CN=mydomain.net' -days 3650\n```This command creates a self-signed certificate/key pair that you can use for the  quickstart installation. The CN `mydomain.net` can be any value you wish for  the self-signed credentials.\n- Check to make sure the files are in the`./certs`directory:```\nls ./certs\n keystore.pem\n keystore.key\n```Where `keystore.pem` is the self-signed TLS certificate file and `keystore.key` is the key file.\n### \n Create TLS credentials for the MART gateway\nAs noted in [Before you begin](/apigee/docs/hybrid/v1.1/install-before-begin) , you use an authorized TLS certificate/key pair for the MART gateway configuration. If you have not done so, obtain or create these credentials now.\n- Obtain or create an TLS certificate/key pair that is authorized by a certificate authority. An example is provided showing how to obtain these credentials using the Let's Encrypt CA. Note that the certificate's common name (CN) must be a valid DNS name. For the example steps, see [Obtain TLS credentials: An example](/apigee/docs/hybrid/v1.1/lets-encrypt) .\n- Copy the credentials into the`` `/hybrid-files/certs`directory.\n- When you are finished, you should have two pairs of credential files in the`./certs`directory. For example:```\nls ./certs\n fullchain.pem\n privkey.key\n keystore.pem\n keystore.key\n```Where `fullchain.pem` is the authorized TLS certificate file and `privkey.key` is the authorized key file.## \n Summary\nYou now have a home base from which you can configure, deploy, and manage Apigee hybrid in your Kubernetes cluster. Next, you will create a file that will be used by Kubernetes to deploy the hybrid runtime components to the cluster.\n## Next step\nstepper_buttons is defined in localvars Iterate over all the buttons in the data dictionary If the button's step matches the current step in the process, make the button disabled [1](/apigee/docs/hybrid/v1.1/install-create-cluster-aks) If the button's step matches the current step in the process, make the button disabled If the button's step matches the next step [2](/apigee/docs/hybrid/v1.1/install-download-install-aks) If the button's step matches the current step in the process, make the button disabled In all other cases (previous buttons or future buttons (after the next one), make them links [(NEXT) Step 3: Configure the cluster](/apigee/docs/hybrid/v1.1/install-copy-overrides-aks) If the button's step matches the current step in the process, make the button disabled [4](/apigee/docs/hybrid/v1.1/install-apply-hybrid-aks)", "guide": "Apigee"}