{"title": "Compute Engine - Globally autoscaling a web service on Compute Engine", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Globally autoscaling a web service on Compute Engine\nThis tutorial shows how to set up a globally available web service with regional Compute Engine\n [managed instance groups](/compute/docs/instance-groups#managed_instance_groups) \nthat automatically scale to meet capacity needs. You can use the techniques shown in this tutorial for implementing your own globally distributed and scalable project on Compute Engine.\n", "content": "## Objectives\n- Deploy multiple regional Compute Engine managed instance groups with autoscaling enabled.\n- Create a cross-region load balancer.\n- Generate test traffic from different regions across the globe.\n- Use the [Google Cloud console](/storage/docs/cloud-console) to visualize how the load balancer routes requests and how the instance groups autoscale to meet demand.\n## Costs\nThis tutorial uses billable components of Google Cloud including:\n- Compute Engine\n## Before you begin\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the Compute Engine API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=compute_engine) \n## Application architectureThe application includes the following Compute Engine components:- [Instance template](/compute/docs/instance-templates) : A template used to create each instance in the instance groups.\n- [Instance groups](/compute/docs/instance-groups#managed_instance_groups) : Multiple instance groups that autoscale based on incoming traffic.\n- [Load balancer](/load-balancing/docs/https) : An HTTP load balancer that distributes traffic among the instance groups.\n- [Instances](/compute/docs/instances) : Multiple testing instances to generate test traffic from different parts of the globe.\n **Note:** For more information about geographical regions and zones, see the documentation for [Regions and Zones](/compute/docs/regions-zones) .## Set up the web service\n### Create the instance groups\n- Create a network for the instance groups.- In the Google Cloud console, go to the **VPC networks** page. [Go to VPC networks](https://console.cloud.google.com/networking/networks) \n- Click **Create VPC Network** .\n- Set the **Name** to `fortressnet` .\n- Set **Subnet creation mode** to **Automatic** .\n- Click **Create** at the bottom of the page.\n- Create a firewall rule for the network. This rule will allow all HTTP requests sent to your instances.- In the Google Cloud console, go to the **Firewall rules** page. [Go to Firewall rules](https://console.cloud.google.com/networking/firewalls) \n- Click **Create Firewall Rule** .\n- Set the **Name** to `fortressnet-allow-http` .\n- For **Network** select `fortressnet` .\n- For **Targets** select `All instances in the network` .\n- Set **Source IPv4 ranges** to `0.0.0.0/0` .\n- For **Protocols and ports** , choose **Specified protocols and ports** and then select the **tcp** checkbox and enter `80` .\n- Click **Create** .\n- Create an instance template. Include a startup script that starts up a simple Apache web server on each instance.- In the Google Cloud console, go to the **Instance templates** page. [Go to Instance templates](https://console.cloud.google.com/compute/instanceTemplates) \n- Click **Create instance template** .\n- Set the **Name** to `fort-template` .\n- For **Machine configuration** , select `e2-micro` (2 vCPU, 1 GB memory).\n- In the **Advanced options** section, expand **Networking** , and then do the following:- In the **Network interfaces** section, expand the network interface to edit it.\n- For **Network** , select`fortressnet`.\n- In the **Management** section, for **Automation** enter the following **Startup script** :```\napt update && apt -y install apache2\n```\n- Click **Create** .\n- Create multiple regional managed instance groups using the instance template. Configure autoscaling for each instance group.- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click **Create instance group** to create a new managed instance group.\n- Select **New managed instance group (stateless)** .\n- Set the **Name** to `us-central1-pool` .\n- For **Instance template** , select `fort-template` .\n- For **Location** , select **Multiple zones** .\n- For **Region** , select `us-central1` . For **Zones** , leave the predefined values selected.\n- For **Autoscaling mode** , select **On: add and remove instances tothe group** .\n- Set **Minimum number of instances** to `1` .\n- Set **Maximum number of instances** to `5` .\n- For **Autoscaling signals** , edit the default selection (CPU utilization) and set the **Signal type** to **HTTP load balancingutilization** .\n- Set **Target HTTP load balancing utilization** to `80` .\n- Click **Done** .\n- Click **Create** . A dialog displays the message that you must also assign the instance group to a backend service of an HTTP load balancer.\n- In the confirmation dialog, click **Confirm** . You can [configure the load balancer](#configure_the_load_balancer) after you create all the instance groups.\n- Repeat these steps to create two more instance groups with the following changes:- Create a group with **Name** as`europe-west1-pool`and **Region** as`europe-west1`.\n- Create a group with **Name** as`asia-east1-pool`and **Region** as`asia-east1`. **Note:** **Autoscaling** of instance groups can be based on different criteria. Because your web service employs a **Load Balancer** , your autoscalers should be configured to scale based on **load balancing usage** . For more information, see [Scaling based on load balancing serving capacity](/compute/docs/autoscaler/scaling-load-balancing) .\n- (Optional) Verify the instances are healthy and serving HTTP traffic. Test the external IP address of one or more instances. You might need to wait a minute for the instances to finish the startup process.- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Verify that each running instance has a green checkmark in the **Status** column next to the name of your instance group.\n- Copy an instance's **External IP** and paste it into a web browser.\nYou should see the 'Apache2 Debian Default Page' web page.If it doesn't seem to work, try waiting a few moments.\n- Create a network for the instance groups.```\ngcloud compute networks create fortressnet --subnet-mode auto\n```\n- Create a firewall rule for the network. This rule will allow all HTTP requests sent to your instances.```\ngcloud compute firewall-rules create fortressnet-allow-http \\\n --network fortressnet \\\n --allow tcp:80\n```\n- Create an instance template. Include a startup script that starts up a simple Apache web server on each instance.```\ngcloud compute instance-templates create fort-template \\\n --machine-type e2-micro \\\n --network fortressnet \\\n --metadata startup-script='apt update && apt -y install apache2'\n```\n- Create multiple regional managed instance groups using the instance template. Configure autoscaling for each instance group.```\ngcloud compute instance-groups managed create us-central1-pool \\\n --region us-central1 \\\n --template fort-template \\\n --size 1\ngcloud compute instance-groups managed set-autoscaling us-central1-pool \\\n --region us-central1 \\\n --min-num-replicas 1 \\\n --max-num-replicas 5 \\\n --scale-based-on-load-balancing \\\n --target-load-balancing-utilization .8\n``````\ngcloud compute instance-groups managed create europe-west1-pool \\\n --region europe-west1 \\\n --template fort-template \\\n --size 1\ngcloud compute instance-groups managed set-autoscaling europe-west1-pool \\\n --region europe-west1 \\\n --min-num-replicas 1 \\\n --max-num-replicas 5 \\\n --scale-based-on-load-balancing \\\n --target-load-balancing-utilization .8\n``````\ngcloud compute instance-groups managed create asia-east1-pool \\\n --region asia-east1 \\\n --template fort-template \\\n --size 1\ngcloud compute instance-groups managed set-autoscaling asia-east1-pool \\\n --region asia-east1 \\\n --min-num-replicas 1 \\\n --max-num-replicas 5 \\\n --scale-based-on-load-balancing \\\n --target-load-balancing-utilization .8\n``` **Note:** **Autoscaling** of instance groups can be based on different criteria. Because your web service employs a **Load Balancer** , your autoscalers should be configured to scale based on **load balancing usage** . For more information, see [Scaling based on load balancing serving capacity](/compute/docs/autoscaler/scaling-load-balancing) .\n- (Optional) Verify the instances are healthy and serving HTTP traffic. Test the external IP address of one or more instances. You might need to wait a minute for the instances to finish the startup process.- List your instances.```\ngcloud compute instances list\n```\n- Verify under the `STATUS` column that the instances are `RUNNING` .\n- Check an instance by querying it's IP address under the `EXTERNAL_IP` column.```\ncurl http://EXTERNAL_IP | head\n```\nYou should see some HTML text, including the line `<title>Apache2 Debian Default Page: It works</title>` .If it doesn't seem to work, try waiting a few moments. **Note:** You can create an autoscaler with multiple signals. So even though you need to scale based on **load balancing usage** to work with your **Load Balancer** , at the same time you can also autoscale based on CPU utilization, Cloud Monitoring metrics, or schedules. For more information, see [Using an autoscaling policy with multiple signals](/compute/docs/autoscaler/multiple-policies) .\n### Configure the load balancerThe load balancer will distribute client requests among your multiple backends.### Starting the load balancer configuration\n- In the Google Cloud console, go to the **Load balancing** page. [Go to Load balancing](https://console.cloud.google.com/net-services/loadbalancing) \n- Click **Create load balancer** .\n- Under **Application Load Balancer (HTTP/S)** click **Start configuration** .\n- Set the **Name** as `fortressnet-balancer` .\n### Backend configuration\n- On the **Create global external Application Load Balancer** page, click **Backend configuration** .\n- In the **Create or select backend services & backend buckets** pull-down menu, select **Backend services** , then **Create a backend service** . You should see the **Create Backend Service** dialog box.\n- Set the **Name** of the backend service to`fortressnet-backend-service`.\n- Under the **New backend** dialog box, set **Instance group** to`asia-east1-pool`.\n- For **Balancing mode** select **Rate** .\n- Set **Maximum RPS** to`100`RPS per instance.\n- Click **Done** .\n- Click **Add backend** .\n- Under the **New backend** dialog box, set **Instance group** to`europe-west1-pool`.\n- For **Balancing mode** select **Rate** .\n- Set **Maximum RPS** to`100`RPS per instance.\n- Click **Done** .\n- Click **Add backend** .\n- Under the **New backend** dialog box, set **Instance group** to`us-central1-pool`.\n- For **Balancing mode** select **Rate** .\n- Set **Maximum RPS** to`100`RPS per instance.\n- Click **Done** .\n- Under **Health check** , select **Create a health check** .\n- Set the **Name** to`http-basic-check`.\n- For **Protocol** select`HTTP`.\n- Set **Port** to`80`.\n- Click **Save and continue** .\n- Click **Create** .\n **Note:** **Load balancing** of requests between backends can be based on different criteria. For more information see the documentation for the [Load distribution algorithm](/load-balancing/docs/https#load_distribution_algorithm) .\n### Host and path rules\n- On the left panel of the **Create global external Application Load Balancer** page, click **Host\nand path rules** .For this example, we don't need to configure any host or path rules since all traffic will go to the default rule. So, we can accept [the pre-populated default values](/load-balancing/docs/url-map#path-matchers) .\n### Frontend configuration\n- On the left panel of the **Create global external Application Load Balancer** page, click **Frontend configuration** .\n- Set **Name** to`fortressnet-http-rule`.\n- For **IP version** select **IPv4** .\n- For **IP address** select **Create IP address** .\n- In the **Reserve a new static IP** dialog box, set **Name** to`fortressnet-ip`.\n- Click **Reserve** and wait a few moments.\n- Click **Done** at the bottom of the **New Frontend IP and port** dialog box.\n- Click **Add frontend IP and port** .\n- Set **Name** to`fortressnet-http-ipv6-rule`.\n- For **IP version** select **IPv6** .\n- For **IP address** select **Create IP address** .\n- In the dialog box, set **Name** to`fortressnet-ipv6`.\n- Click **Reserve** and wait a few moments.\n- Click **Done** at the bottom of the **New Frontend IP and port** dialog box.\n### Review and finalize\n- On the left panel of the **Create global external Application Load Balancer** page, click **Review and finalize** .\n- Compare your settings to what you intended to create.\n- If the settings are correct, click **Create** at the bottom of the left panel. You are returned to the Load balancing screen. After the load balancer is created, a green check mark next to it indicates that it is running.\n### Backend configuration\n- Create a basic health check. This will check whether a load balancer backend is responding to HTTP requests.```\ngcloud compute health-checks create http http-basic-check\n```\n- Create a global backend service. This backend service will receive HTTP traffic from the load balancer.```\ngcloud compute backend-services create fortressnet-backend-service \\\n --protocol HTTP \\\n --health-checks http-basic-check \\\n --global\n```\n- Add the instance groups as regional backends of the backend service. This configuration will distribute traffic among the backends based on a maximum number of requests per second (RPS) per instance.```\ngcloud compute backend-services add-backend fortressnet-backend-service \\\n --balancing-mode RATE \\\n --max-rate-per-instance 100 \\\n --instance-group us-central1-pool \\\n --instance-group-region us-central1 \\\n --global\ngcloud compute backend-services add-backend fortressnet-backend-service \\\n --balancing-mode RATE \\\n --max-rate-per-instance 100 \\\n --instance-group europe-west1-pool \\\n --instance-group-region europe-west1 \\\n --global\ngcloud compute backend-services add-backend fortressnet-backend-service \\\n --balancing-mode RATE \\\n --max-rate-per-instance 100 \\\n --instance-group asia-east1-pool \\\n --instance-group-region asia-east1 \\\n --global\n```\n **Note:** **Load balancing** of requests between backends can be based on different criteria. For more information see the documentation for the [Load distribution algorithm](/load-balancing/docs/https#load_distribution_algorithm) .\n### Host and path rules\n- Define a URL map. URL maps route different URLs to different backend services. Since we only have one backend service, we'll simply set that backend service as the default service for all URLs.```\ngcloud compute url-maps create fortressnet-balancer \\\n --default-service fortressnet-backend-service\n```\n- Create an HTTP proxy route. HTTP proxy routes accept HTTP requests and route them according to your URL map. In this case, it will send all requests to your single backend service.```\ngcloud compute target-http-proxies create fortressnet-http-proxy \\\n --url-map fortressnet-balancer\n```\n### Frontend configuration\n- Create two global static external IP addresses: one for IPv4 and one for IPv6. These will be the global external IP addresses of the load balancer.```\ngcloud compute addresses create fortressnet-ip \\\n --ip-version IPV4 \\\n --network-tier=PREMIUM \\\n --global\ngcloud compute addresses create fortressnet-ipv6 \\\n --ip-version IPV6 \\\n --network-tier=PREMIUM \\\n --global\n```\n- Lookup the external IP addresses of the load balancer.```\ngcloud compute addresses list\n```\n- Create global forwarding rules for the external IP addresses. This will forward both IPv4 and IPv6 HTTP requests to your HTTP proxy.```\ngcloud compute forwarding-rules create fortressnet-http-rule \\\n --load-balancing-scheme=EXTERNAL \\\n --network-tier=PREMIUM \\\n --global \\\n --target-http-proxy fortressnet-http-proxy \\\n --ports 80 \\\n --address LOAD_BALANCER_IP_ADDRESS\n``````\ngcloud compute forwarding-rules create fortressnet-http-ipv6-rule \\\n --load-balancing-scheme=EXTERNAL \\\n --network-tier=PREMIUM \\\n --global \\\n --target-http-proxy fortressnet-http-proxy \\\n --ports 80 \\\n --address LOAD_BALANCER_IPV6_ADDRESS\n``` **Note:** Notice that each backend now has a load balancer **balancing mode** and an instance group **autoscaler policy** . These two mechanisms work together to properly distribute load among the backends. For more information read the documentation for [Backend services and autoscaled managed instance groups](/load-balancing/docs/backend-service#backend_services_and_autoscaled_managed_instance_groups) .\n(Optional) Verify the load balancer is working. You may need to wait a minute or three.\n- In the Google Cloud console, go to the **Load balancing** page. [Go to Load balancing](https://console.cloud.google.com/net-services/loadbalancing) \n- Wait for `fortressnet-balancer` to have a green check mark under the **Backends** column.\n- Click on `fortressnet-balancer` .\n- Under **Frontend** copy the IPv4 address under the **IP:Port** column. (IPv4 addresses are of the form `www.xxx.yyy.zzz` . You don't need the trailing port number `:nn` .) If the **Frontend** section is missing, try waiting a few moments and then reloading the web page.\n- Enter the IP address in a web browser.\nYou should see the 'Apache2 Debian Default Page' web page.\nIf you get an 'Error 404 (Not Found)' web page instead, try waiting a few more minutes.- Lookup the external IP addresses of the load balancer.```\ngcloud compute addresses list\n```\n- Query the IPv4 address. (IPv4 addresses are of the form `www.xxx.yyy.zzz` .)```\ncurl http://LOAD_BALANCER_IP_ADDRESS | head\n```\nYou should see some HTML text, including the line `<title>Apache2 Debian Default Page: It works</title>` .\nIf you see `<title>Error 404 (Not Found)!!1</title>` instead, try waiting a few more minutes.Best Practice: Create a secure firewall to allow only internal traffic from the load balancer and the health check. Then delete the original firewall that allowed any HTTP request. This prevents individual instances from being accessible by outside clients.\n- Create a new firewall only allowing traffic from the load balancer and the health check.- In the Google Cloud console, go to the **Firewall rules** page. [Go to Firewall rules](https://console.cloud.google.com/networking/firewalls) \n- Click **Create Firewall Rule** .\n- Set the **Name** to `fortressnet-allow-load-balancer` .\n- For **Network** select `fortressnet` .\n- For **Targets** select `All instances in the network` .\n- For **Source IP ranges** type `130.211.0.0/22` and press the **Enter** key, then type `35.191.0.0/16` and press **Enter** again.\n- Under **Protocols and ports** select **tcp** and enter `80` .\n- Click **Create** .\n- Delete the old allow-everything firewall.- Select the checkmark next to`fortressnet-allow-http`.\n- Click **Delete** at the top of the page.\n- In the dialog box, click **Delete** .- Create a new firewall only allowing traffic from the load balancer and the health check.```\ngcloud compute firewall-rules create fortressnet-allow-load-balancer \\\n --network fortressnet \\\n --source-ranges 130.211.0.0/22,35.191.0.0/16 \\\n --allow tcp:80\n```\n- Delete the old allow-everything firewall.```\ngcloud compute firewall-rules delete fortressnet-allow-http -q\n``` **Note:** `130.211.0.0/22` and `35.191.0.0/16` are noteworthy source IPs. `130.211.0.0/22` is the source IP for any request redirected by a Compute Engine **Load Balancer** . `35.191.0.0/16` is the source IP for any request sent by a Compute Engine **Health Check** . For more information, see the documentation for [Load balancing firewall rules](/load-balancing/docs/https#firewall_rules) .## (Optional) Verify that autoscaling and load balancing works\n### Generate some test trafficSuppose it is morning in Europe and your web service suddenly goes viral on the internet. Generate a high number of client requests all at once from Europe.\n- Create an instance installed with the Siege load testing tool.- In the Google Cloud console, go to the **Create an instance** page. [Go to Create an instance](https://console.cloud.google.com/compute/instancesAdd) \n- Set the **Name** to `europe-loadtest` .\n- For **Region** select `europe-west1` .\n- For advanced settings, expand the **Networking, disks, security, Management, sole tenancy** section, and do the following:- Expand the **Management** section.\n- In the **Automation** field, enter the following startup script:```\napt -y install siege\n```\n- To create the VM, click **Create** .\n- Get the IPv4 address of the load balancer.- In the Google Cloud console, go to the **Load balancing** page. [Go to Load balancing](https://console.cloud.google.com/net-services/loadbalancing) \n- Click `fortressnet-balancer` .\n- Under **Frontend** copy the IPv4 address under the **IP:Port** column. (IPv4 addresses are of the form `www.xxx.yyy.zzz` .)\n- SSH into the load testing instance.- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Wait for the `europe-loadtest` instance to have a green checkmark under the **Name** column.\n- Click **SSH** on `europe-loadtest` under the **Connect** column.\n- Start siege. Target the IPv4 address of the load balancer.```\nsiege -c150 http://LOAD_BALANCER_IP_ADDRESS\n```\n- Create an instance installed with the Siege load testing tool.```\ngcloud compute instances create europe-loadtest \\\n --network default \\\n --zone europe-west1-c \\\n --metadata startup-script='apt -y install siege'\n```\n- Get the IPv4 address of the load balancer.```\ngcloud compute addresses list\n```\n- Open a new shell session where the `gcloud` command is available. **Note:** If you are using Cloud Shell, you can open multiple shell sessions in the same browser window. See the Cloud Shell documentation on [Opening Multiple Sessions](/shell/docs/starting-cloud-shell#opening_multiple_sessions) .- In your new shell session, SSH into the load testing instance.```\ngcloud compute ssh --zone europe-west1-c europe-loadtest\n```\n- Start siege. Target the IPv4 address of the load balancer.```\nsiege -c150 http://LOAD_BALANCER_IP_ADDRESS\n```After running the `siege` command you should see output declaring `The server is now under siege...`\n```\n[alert] Zip encoding disabled; siege requires zlib support to enable it\n** SIEGE 4.0.2\n** Preparing 150 concurrent users for battle.\nThe server is now under siege...\n```\n### Monitor load balancing and autoscaling\n- In the Google Cloud console, go to the **Load balancing** page. [Go to Load balancing](https://console.cloud.google.com/net-services/loadbalancing) \n- Click the load balancer named `fortressnet-balancer` .\n- Click the **Monitoring** tab.\n- In the **Backend** drop-down, select `fortressnet-backend-service` .\nIt may take up to ten minutes to display enough data. Soon you should see a display similar to the following:What's happening here:- The load test starts sending a large amount of traffic all at once. At first, the load balancer distributes requests equally among the three backends. The number of requests quickly exceeds your autoscaling limits, and may even cause your servers to return `Backend 5xx errors` which will show up on the monitoring display. The autoscaler starts to spin up additional instances as needed.\n- Autoscaling catches up with capacity needs. To minimize request latency, Compute Engine load balancers try to route requests to the backend that is closest to the client. In this case, since the load test traffic originates from Europe, the load balancer prefers to route more requests to the Europe backend. As a result, autoscaling may spin up more instances in the Europe backend to handle a higher fraction of requests.\n### Generate test traffic somewhere elseSuppose your web service also catches on in Asia with the afternoon internet crowd. Generate a high number of requests from Asia.\n- Create another instance installed with the Siege load testing tool.- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Click **Create instance** .\n- Set the **Name** to `asia-loadtest` .\n- For **Region** select `asia-east1` .\n- Click the **Networking, disks, security, management, sole tenancy** to see advanced settings.\n- Click the **Management** tab.\n- Under **Automation** enter the following **Startup script** :```\napt -y install siege\n```\n- Click **Create** at the bottom of the page.\n- Get the IP address of the load balancer.- In the Google Cloud console, go to the **Load balancing** page. [Go to Load balancing](https://console.cloud.google.com/net-services/loadbalancing) \n- Click `fortressnet-balancer` .\n- Under **Frontend** copy the IPv4 address under the **IP:Port** column. (IPv4 addresses are of the form `www.xxx.yyy.zzz` .)\n- SSH into the load testing instance.- Wait for the`asia-loadtest`instance to have a green checkmark under the **Name** column.\n- Click **SSH** on`asia-loadtest`under the **Connect** column.\n- Start siege. Target the IPv4 address of the load balancer.```\nsiege -c150 http://LOAD_BALANCER_IP_ADDRESS\n```\n- In your original shell session, create another instance installed with the Siege load testing tool.```\ngcloud compute instances create asia-loadtest \\\n --network default \\\n --zone asia-east1-c \\\n --metadata startup-script='apt -y install siege'\n```\n- Get the IPv4 address of the load balancer.```\ngcloud compute addresses list\n```\n- Open a new shell session where the `gcloud` command is available.- In your new shell session, SSH into the load testing instance.```\ngcloud compute ssh --zone asia-east1-c asia-loadtest\n```\n- Start siege. Target the IPv4 address of the load balancer.```\nsiege -c150 http://LOAD_BALANCER_IP_ADDRESS\n```Again, you should see output declaring `The server is now under siege...`\n```\n[alert] Zip encoding disabled; siege requires zlib support to enable it\n** SIEGE 4.0.2\n** Preparing 150 concurrent users for battle.\nThe server is now under siege...\n```\n### Monitor load balancing and autoscalingGo back to the load balancing monitoring display from last time. It may take up to ten minutes to display enough new data. Soon you should see a display similar to the following:What's happening here:- Again, the load test sends another large number of requests all at once. At first the load balancer distributes requests equally among the existing three backends. As the number of requests exceeds your autoscaling limits, the autoscaler starts to spin up additional instances as needed.\n- Autoscaling catches up with the new capacity needs. The load balancer still prefers to route requests to the nearest available backends. As a result, eventually the Asia backend receives requests mostly from Asia, the Europe backend receives requests mostly from Europe, and the US backend receives everything else.\n## Clean up\nAfter you finish the tutorial, you can clean up the resources that you created so that they stop using quota and incurring charges. The following sections describe how to delete or turn off these resources.\n### Deleting the project\nThe easiest way to eliminate billing is to delete the project that you created for the tutorial.\nTo delete the project:\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.### Deleting instances\nTo delete a Compute Engine instance:\n- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Select the checkbox for   the instance that you want to delete.\n- To delete the instance, clickmore_vert **More actions** , click **Delete** ,  and then follow the instructions.\n## What's next\n- [Scaling based on load balancing serving capacity](/compute/docs/autoscaler/scaling-load-balancing#scaling-based-on-https-load-balancing-serving-capacity) .\n- [Global load balancing on Google Cloud](/load-balancing/docs/tutorials/about-capacity-optimization-with-global-lb) .\n- [Building scalable and resilient web applications on Google Cloud](/solutions/scalable-and-resilient-apps) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Compute Engine"}