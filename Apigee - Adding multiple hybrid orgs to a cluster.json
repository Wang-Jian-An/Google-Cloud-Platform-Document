{"title": "Apigee - Adding multiple hybrid orgs to a cluster", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Adding multiple hybrid orgs to a cluster\nYou are currently viewing version 1.6 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nThis topic discusses how to add a second Apigee hybrid organization (org) to an existing Kubernetes cluster. In this multi-org configuration, both orgs use and share the same Cassandra ring. Each org can have multiple environments and environment groups configured.\n", "content": "## \n Multi-org options\nThis section describes how Apigee Support handles existing multi-org clusters and recommendations for future deployments:\n- If you have existing multi-org Kubernetes clusters deployed in non-production and production contexts, Apigee Support will continue to support them. However, note the technical limitations outlined in the next section. We recommend that you change any future production deployments to use one Apigee org per cluster.\n- If you have existing multi-org clusters in non-production contexts, Apigee Support will continue to support them. We recommend that you migrate any production clusters to a new configuration that uses one Apigee org per cluster.## \n Limitations\nA multi-org per cluster configuration is supported with the following limitations:\n**Note:** The maximum number of orgs that you can add to a single cluster is limited. See [Limits](/apigee/docs/api-platform/reference/limits) for details.\n- Pod metrics are only sent to the first Google Cloud project that was configured. This  limitation is most apparent in the Cloud Monitoring tool. It only affects cluster metrics;  API analytics are not affected. The metrics for the other Apigee orgs will not be sent  to the matching Google Cloud project.\n- All logging from the pods are sent to the first Google Cloud project that was configured. This  limitation is most apparent in the Cloud Logging tool. The logs for the other Apigee orgs will not be sent to the matching Google Cloud project. Logs are still captured at the pod level and can be retrieved with`kubectl`commands. However, they are not sent to the correct Cloud project through Cloud Logging.\n- You cannot delete org data in the Cassandra database for just one org. This means that you cannot remove orgs selectively. Any modification to the database configuration affects all orgs that are deployed to that cluster.\n- The hybrid upgrade procedure upgrades the entire cluster all at once.\n- Backup and restore is done as a cluster, and cannot be done for a specific org.\n- The Apigee API Monitoring feature (Timeline, Recent, Investigate) only works for the first org that was configured and deployed. It will not work for the other orgs in a multi-org cluster.## \n Prerequisites\nBefore continuing, note the following:\n- You must have an existing hybrid org with one or more environments installed and configured  in an exiting Kubernetes cluster. See the [hybrid installation instructions](/apigee/docs/hybrid/v1.6/precog-overview) .\n- When combining multiple orgs in a single cluster, the hybrid versions must all match. Before adding a second org to a cluster, upgrade the existing hybrid installation, if necessary. See [Upgrading Apigee hybrid](/apigee/docs/hybrid/v1.6/upgrade) .## \n Create an org to add to the existing cluster\nTo create the additional org, follow the steps in [Part 1: Project and org setup.](/apigee/docs/hybrid/v1.6/precog-overview)\n**Note:** If you have an existing org you want to add to your Apigee hybrid installation, you can skip to [Configure the new org](#configuring) .\n## \n Configure the new org\nIn the following steps, you will create a new overrides file and configure it for the new org. An `overrides.yaml` file can only support one org's information. Therefore, you must create a new `overrides.yaml` file and apply it to the existing Kubernetes cluster.\n- Create service accounts for use with the new org. See [Create service accounts](/apigee/docs/hybrid/v1.6/install-service-accounts) .\n- Make note of the TLS certificate files (`.key`and`.pem`) in your`certs`directory. If you need to create them again, you can follow the instructions in [Create TLS certificates](/apigee/docs/hybrid/v1.6/install-create-tls-certificates) .\n- Copy your existing`overrides.yaml`to a new file to use as a starting point  for configuring your new org. For  example:`new-overrides.yaml`.\n- Edit the new overrides file with the following configurations:```\norg: \"new-org-name\"instanceID: \"instance-id\" \u00a0 \n## Must match the instanceID of your existing org.k8sCluster:\u00a0 name: \"existing-cluster-name\"\u00a0 region: \"existing-cluster-analytics-region\"gcp:\u00a0 projectID: \"new-project-id\"\u00a0 name: \"new-project-id\"\u00a0 region: \"new-project-default-location\"namespace: namespace \n## must be the same for both new and existing orgsvirtualhosts:\u00a0 - name: new-environment-group-name\u00a0 \u00a0 sslCertPath: ./certs/cert-file-name # .crt or .pem\u00a0 \u00a0 sslKeyPath: ./certs/key-file-name # .keyenvs:\u00a0 - name: new-environment-name\u00a0 \u00a0 serviceAccountPaths:\u00a0 \u00a0 \u00a0 runtime: ./new-service-accounts-directory/new-project-id-apigee-runtime.json\u00a0 \u00a0 \u00a0 synchronizer: ./new-service-accounts-directory/new-project-id-apigee-synchronizer.json\u00a0 \u00a0 \u00a0 udca: ./new-service-accounts-directory/new-project-id-apigee-udca.jsonconnectAgent:\u00a0 serviceAccountPath: ./new-service-accounts-directory/new-project-id-apigee-mart.jsonmart:\u00a0 serviceAccountPath: ./new-service-accounts-directory/new-project-id-apigee-mart.jsonmetrics:\u00a0 serviceAccountPath: ./new-service-accounts-directory/new-project-id-apigee-metrics.jsonwatcher:\u00a0 serviceAccountPath: ./new-service-accounts-directory/new-project-id-apigee-watcher.json\n```The following table describes each of the property values that you must provide in the  overrides file. For more information, see [Configuration property reference](/apigee/docs/hybrid/v1.6/config-prop-ref) .| Variable       | Description                                                                                           |\n|:----------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| new-org-name      | The name of your new org.                                                                                       |\n| instance-id      | All orgs in in this cluster must have the same instance ID. Therefore this must match the instanceID entry in the overrides file for your original org. For multi-region installations, each region requires its own cluster, because individual clusters do not span regions. Therefore, each cluster must have its own unique instance ID shared by every org in the cluster. |\n| existing-cluster-name    | The name of the cluster you are adding this org to. It must match the k8sCluster.name entry in the overrides file for your original cluster.                                                          |\n| existing-cluster-analytics-region | The region where the original cluster is provisioned. It must match the k8sCluster.region entry in the overrides file for your original cluster.                                                         |\n| new-project-id     | The project ID of your new project. The project ID and org name are the same.                                                                          |\n| new-project-default-location  | The analytics region you specified when you created the new org. It does not have to be the same as the region for the existing org.                                                            |\n| namespace       | All orgs in the cluster must share the same namespace. Be sure to use the same namespace that was used for the original org. Note that the default namespace is apigee.                                                   |\n| new-environment-group-name  | The new environment group you created for the new org.                                                                                |\n| cert-file-name and key-file-name | The TLS cert and key files for the cluster that you checked or created in step 1 in this section.                                                                     |\n| new-environment-name    | The name of the environment you created for the new org.                                                                               |\n| new-service-accounts-directory | The directory where the service account key files you created for the new org are located.                                                                       |## \n Apply the configuration\nApply the new org configuration to your cluster:\n- Do a dry run installation to check for any problems:```\napigeectl apply -f overrides/new-overrides.yaml --org --dry-run=client\n``` **Note:** It's a good practice to do a dry run before applying the configuration to determine if there are any issues.\n- If there are no issues, apply the org-level components. This step installs the Cassandra  jobs (user and schema), Apigee Connect, Apigee Watcher and MART services:```\napigeectl apply -f overrides/new-overrides.yaml --org\n```\n- Install the environment. This step installs apigee-runtime, synchronizer and UDCA components,  per environment:```\napigeectl apply -f overrides/new-overrides.yaml --env ${ENV_NAME} --dry-run=client\n``````\napigeectl apply -f overrides/new-overrides.yaml --env ${ENV_NAME}\n``` **Note:** If you have multiple environments in your new org, repeat this step for each environment.\n- Apply the load balancer changes. This step configures the ingress to listen to the new  virtual host(s) for the second org: **Important:** Do not duplicate hostnames/domain names between two orgs, as  it can result in unpredictable routing.```\napigeectl apply -f overrides/new-overrides.yaml --settings virtualhosts --dry-run=client\n``````\napigeectl apply -f overrides/new-overrides.yaml --settings virtualhosts\n```\n- Enable synchronizer access for your new org following the steps in [Enable Synchronizer access](/apigee/docs/hybrid/v1.6/install-enable-synchronizer-access) .", "guide": "Apigee"}