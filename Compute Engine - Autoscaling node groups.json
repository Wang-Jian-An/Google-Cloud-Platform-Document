{"title": "Compute Engine - Autoscaling node groups", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Autoscaling node groups\nThis page describes how to use the autoscaler for sole-tenant node groups.\nIf you use [sole-tenant nodes](/compute/docs/nodes) for your workloads, you can use the node group autoscaler to automatically manage the sizes of your node groups. Configure autoscaling on a node group while creating the node group or after creating the node group. The node group autoscaler can help you automatically manage the sizes of your sole-tenant node groups by:\n- Increasing the size of a node group when there is insufficient capacity for another virtual machine (VM) instance on that node group. After the autoscaler increases the size of the node group, the VMs are scheduled transparently.\n- Decreasing the size of a node group when there are empty nodes, which prevents you from paying for unused sole-tenant nodes.\nThe following diagram shows:\n- The node group autoscaler scaling out a node group by adding a new node in response to the deployment of a VM to a node group with no empty nodes.\n- The node group autoscaler scaling in a node group by removing an empty node from a sole-tenant node group.\n", "content": "## Autoscaler modes\nBy default, the autoscaler is not enabled on node groups. When the autoscaler is not enabled, you must manually manage the sizes of your node groups. If you enable the autoscaler on a node group, you can specify that the autoscaler both increases and decreases the size of the node group (scales out and scales in), or that it only increases the size of the group (only scales out).\n### Scale out and scale in\nIn this mode, the node group autoscaler both increases (scales out) and decreases (scales in) the size of your node groups. For this mode, you must specify a maximum size and a minimum size for the node group. The autoscaler will not scale the size of the node group above the specified maximum or below the specified minimum.\nThe autoscaler scales out the size of a node group when there is a request to schedule a VM onto a node group that does not have capacity for another VM. Conversely, the autoscaler scales in the size of a node group when there is an empty node in the node group.\n### Only scale out\nWith this mode, the autoscaler increases the size of the node group in response to requests to schedule VMs, but doesn't remove empty nodes from node groups. Google recommends this mode for monotonically increasing workloads or workloads that require physical server affinity, such as [BYOLworkloads](/compute/docs/instances/windows/bring-your-own-license) , which require licenses to reside on the same physical server.\nYou must use this mode if your node groups are configured with the **Migratewithin node group** maintenance policy.\n## Size range of a node group\nWhen you enable the autoscaler, you set the size range of the node group by specifying a minimum and maximum value for the node group size.\nIf you do not specify a value for the minimum size, the autoscaler sets the minimum size to zero (0). If you do a specify value for the minimum size, it must be an integer greater than or equal to 0, and it must be less than or equal to the maximum size.\nYou must specify a value for the maximum size of the node group. The value must be an integer that is greater than or equal to 0 and less than or equal to 100, which is the maximum allowed size for a sole-tenant node group, and the value must be greater than or equal to the specified minimum value.\nTo accommodate workloads that might exceed the size maximum of 100 for a node group, create multiple node groups with matching affinity labels, for example, `workload:in:my-autoscaled-node-groups` . Then, schedule VMs using that affinity label, and enable autoscaling on each group to create a dynamically scaling group of node groups.\n## Availability\nYou can only use the sole-tenant node autoscaler in [regions that support sole-tenantnodes](/compute/docs/regions-zones) .\n## Before you begin\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nTo use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```## Enabling the node group autoscaler\nConfigure autoscaling on a new node group.\nThe example below shows how to use the [node-groupscreate](/sdk/gcloud/reference/compute/sole-tenancy/node-groups/create) command to enable the autoscaler when you are creating a node group. To add an autoscaler to an existing node group, use the [node-groupsupdate](/sdk/gcloud/reference/compute/sole-tenancy/node-groups/update) command.\n```\ngcloud compute sole-tenancy node-groups create group-name \\\n --node-template template-name \\\n --target-size size \\\n --maintenance-policy maintenance-policy \\\n --zone zone \\\n --autoscaler-mode mode \\\n --max-nodes max-nodes \\\n --min-nodes min-nodes\n```\nReplace the following:- ``: Name of the node group to create.\n- ``: Name of the node template from which to create the node group.\n- ``: Target initial number of nodes in the node group.\n- ``: Specifies if VMs migrate and if they are restarted during host maintenance events. Set it to one of the following values:- `default`: VMs live migrate to a new node.\n- `migrate-within-node-group`: VMs live migrate to another node in the node group.\n- `restart-in-place`: VMs restart on the same node after they are terminated due to a maintenance event.\n- ``: Zone in which to create the node group.\n- ``: Mode for the autoscaler on this node group. Set to one of the following values:- `off`: Disables the autoscaler.\n- `on`: Enables scaling in and scaling out.\n- `only-scale-out`: Enables only scaling out. You must use this mode if your node groups are configured to restart their hosted VMs on minimal servers.\n- ``: Maximum size of the node group. Set to a value less than or equal to 100 and greater than or equal to``.\n- ``: Minimum size of the node group, and must be an integer value less than or equal to``. The default value is 0.\nThe example below shows how to use the [nodeGroups.insert](/compute/docs/reference/rest/v1/nodeGroups/insert) command to enable the autoscaler when you are creating a node group. To add an autoscaler to an existing node group, use the [nodeGroups.patch](/compute/docs/reference/rest/beta/nodeGroups/patch) command.\n```\nPOST https://compute.googleapis.com/compute/v1/projects/project-id/zones/zone/nodeGroups?initialNodeCount=initial-node-count\n {\n \"name\": \"group-name\",\n \"nodeTemplate\": \"template-name\",\n \"autoscalingPolicy\": {\n  \"mode\": \"mode\",\n  \"min_nodes\": min-nodes,\n  \"max_nodes\": max-nodes\n }\n \"maintenancePolicy\": maintenance-policy\n }\n```\nReplace the following:- ``: ID of the project for which to add a node group with an autoscaler.\n- ``: Zone in which to create the new node group.\n- ``: Required when creating the node group. This specifies the initial number of nodes in the node group. If the value for``is greater than the initial node count, the size of the node group is scaled out to the value of``.\n- ``: Name of the new node group.\n- ``: Name of the node template from which to create the node group.\n- ``: Mode for the autoscaler on this node group. Set to one of the following:- `OFF`: Disables the autoscaler.\n- `ON`: Enables scaling in and scaling out.\n- `ONLY_SCALE_OUT`: Enables only scaling out. You must use this mode if your node groups are configured to restart their hosted VMs on minimal servers.\n- ``: Maximum size of the node group. Set to a value less than or equal to 100 and greater than or equal to``.\n- ``: Minimum size of the node group, and must be an integer value less than or equal to``. The default value is 0.\n- ``: Specifies if VMs migrate and if they are restarted during host maintenance events. Set this to one of the following values:- `DEFAULT`: VMs live migrate to a new node.\n- `MIGRATE_WITHIN_NODE_GROUP`: VMs live migrate to another node in the node group.\n- `RESTART_IN_PLACE`: VMs restart on the same node after they are terminated due to a maintenance event.\n## Updating autoscaler settings\nChange the autoscaler settings on a node group by updating the autoscaler mode or by updating the minimum and maximum size of the node group.\nThe example below shows how to use the [node-groupsupdate](/sdk/gcloud/reference/compute/sole-tenancy/node-groups/update) command to change the mode of the autoscaler on a node group.\n```\ngcloud compute sole-tenancy node-groups update name \\\n --autoscaler-mode mode \\\n --max-nodes max-nodes \\\n --min-nodes min-nodes\n```\nReplace the following:- ``: Name of the node group on which to change the autoscaler mode.\n- ``: Mode for the autoscaler on this node group. Set to one of the following:- `off`: Disables the autoscaler.\n- `on`: Enables scaling in and scaling out.\n- `only-scale-out`: Enables only scaling out. You must use this mode if your node groups are configured to restart their hosted VMs on minimal servers.\n- ``: Maximum size of the node group. Set to a value less than or equal to 100 and greater than or equal to``.\n- ``: Minimum size of the node group, and must be an integer value less than or equal to``. The default value is 0.\nThe example below shows how to use the [nodeGroups.patch](/compute/docs/reference/rest/beta/nodeGroups/patch) command to change the mode of an autoscaler on a node group.\n```\nPATCH https://compute.googleapis.com/compute/beta/projects/project-id/zones/group-zone/nodeGroups/group-name\n{\n \"nodeTemplate\": \"template-name\",\n \"autoscalingPolicy\": {\n \"mode\": \"mode\",\n \"minSize\": min-nodes,\n \"maxSize\": max-nodes\n }\n}\n```\nReplace the following:- ``: ID of the project containing the node group for which to change the autoscaler mode.\n- ``: Zone containing the node group for which to change the autoscaler mode.\n- ``: Name of the node group for which to change the autoscaler mode.\n- ``: Name of the node template from which the node group was created.\n- `` : Mode for the autoscaler on this node group. Set to one of the following:- `OFF`: Disables the autoscaler.\n- `ON` : Enables scaling in and scaling out.\n- `ONLY_SCALE_OUT` : Enables only scaling out. You must use this mode if your node groups are configured with the **Migrate withinnode group** maintenance policy.\n- `` : Maximum size of the node group. Set to a value less than or equal to 100 and greater than or equal to `` .\n- `` : Minimum size of the node group, and must be an integer value less than or equal to `` . The default value is 0.## Manually updating the size of autoscaled node groups\nWhen the autoscaler is enabled, node group size is managed automatically, but you can schedule or remove VMs on that node group to effectively manually update the group size.\nTo manually decrease the size of an autoscaled node group, delete VMs from the node until the node is empty. When the node is empty, the autoscaler removes the empty node, which decreases the size of the node group.\nTo manually increase the size of an autoscaled node group, set the minimum size of the group to a value greater than the current size. When the minimum size of a group is set to a value greater than the current size, the autoscaler scales out the group size to the newly specified minimum size.\nWhen node groups are set to only scale out, the autoscaler automatically manages increases in group size and disables manual group size increases. With this setting, you can decrease the size of a group by removing VMs from a node until that node is empty, and then you can remove the empty node.\n## Disabling the autoscaler\nWhen you no longer need to use the autoscaler to automatically manage the sizes of your node groups, or if you need to manually manage the sizes of your node groups, disable the autoscaler.\n```\ngcloud compute sole-tenancy node-groups update name \\\n --autoscaler-mode OFF\n```\nReplace `` with the name of the node group from which to remove the autoscaling policy.\nThe example below shows how to use the [nodeGroups.patch](/compute/docs/reference/rest/beta/nodeGroups/patch) command to turn off an autoscaler on a node group.\n```\nPATCH https://compute.googleapis.com/compute/beta/projects/project-id/zones/group-zone/nodeGroups/group-name\n{\n \"nodeTemplate\": \"template-name\",\n \"autoscalingPolicy\": {\n \"mode\": \"mode\"\n }\n}\n```\nReplace the following:- ``: ID of the project containing the node group for which to change the autoscaler mode.\n- ``: Zone containing the node group for which to change the autoscaler mode.\n- ``: Name of the node group for which to change the autoscaler mode.\n- ``: Name of the node template from which the node group was created.\n- ``: Mode for the autoscaler on this node group. Set to`OFF`to disable the autoscaler on this node group.## Viewing autoscaler activity\nIn the Google Cloud console, view the autoscaler adjusting the sizes of your node groups. The Google Cloud console shows the current size of the node group, and if the autoscaler is currently adjusting the size of group, you can also see the target size of the node group.\n- In the Google Cloud console, go to the **Sole-tenant nodes** page. [Go to Sole-tenant nodes](https://console.cloud.google.com/compute/soleTenancy) \n- Click **Node groups** .\n- View the number of nodes in each node group, and if Compute Engine is scaling the node group, you can also view the target number of nodes.## What's next\n- Learn about [bringing images with existing licenses toGoogle Cloud](/compute/docs/instances/windows/bring-your-own-license) .\n- Learn about the [cluster autoscaler](/kubernetes-engine/docs/concepts/cluster-autoscaler) .\n- Learn about the [managed instance group autoscaler](/compute/docs/autoscaler) .", "guide": "Compute Engine"}