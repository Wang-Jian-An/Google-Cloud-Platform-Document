{"title": "Cloud Architecture Center - Deploy automated malware scanning for files uploaded to Cloud Storage", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Deploy automated malware scanning for files uploaded to Cloud Storage\nLast reviewed 2023-06-20 UTC\nThis document describes how you deploy the architecture in [Automate malware scanning for files uploaded to Cloud Storage](/architecture/automate-malware-scanning-for-documents-uploaded-to-cloud-storage) .\nThis deployment guide assumes that you're familiar with the basic functionality of the following technologies:\n- [Cloud Storage](/storage) \n- [Cloud Run](/run) \n- [Cloud Scheduler](/scheduler) \n- [Eventarc](/eventarc) \n- [Docker](https://www.docker.com/) \n- [Node.js](https://nodejs.org/en/) ", "content": "## Architecture\nThe following diagram shows the deployment architecture that you create in this document:\nThe diagram shows the following two pipelines that are managed by this architecture:\n- File scanning pipeline, which checks if an uploaded file contains malware.\n- ClamAV malware database mirror update pipeline, which maintains an up-to-date mirror of the database of malware that ClamAV uses.\nFor more information about the architecture, see [Automate malware scanning for files uploaded to Cloud Storage](/architecture/automate-malware-scanning-for-documents-uploaded-to-cloud-storage#architecture) .\n## Objectives\n- Build a mirror of the ClamAV malware definitions database in a Cloud Storage bucket.\n- Build a Cloud Run service with the following functions:- Scanning files in a Cloud Storage bucket for malware using ClamAV and move scanned files to clean or quarantined buckets based on the outcome of the scan.\n- Maintaining a mirror of the ClamAV malware definitions database in Cloud Storage.\n- Create an Eventarc trigger to trigger the malware-scanning service when a file is uploaded to Cloud Storage.\n- Create a Cloud Scheduler job to trigger the malware-scanning service to refresh the mirror of the malware definitions database in Cloud Storage.## Costs\nThis architecture uses the following billable components of Google Cloud:\n- [Cloud Storage](/storage/pricing) \n- [Cloud Run](/run/pricing) \n- [Eventarc](/eventarc/pricing) \nTo generate a cost estimate based on your projected usage, use the [pricing calculator](/products/calculator) .\n## Before you begin\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- In this deployment, you run all commands from Cloud Shell.\n## Set up your environment\nIn this section, you assign settings for values that are used throughout the deployment, such as [region and zone](/compute/docs/regions-zones) . In this deployment, you use `us-central1` as the region for the Cloud Run service and `us` as the location for the Eventarc trigger and Cloud Storage buckets.\n- In Cloud Shell, set common shell variables including region and location:```\nREGION=us-central1LOCATION=usPROJECT_ID=PROJECT_IDSERVICE_NAME=\"malware-scanner\"SERVICE_ACCOUNT=\"${SERVICE_NAME}@${PROJECT_ID}.iam.gserviceaccount.com\"\n```Replace `` with your project ID.\n- Initialize the `gcloud` environment with your project ID:```\ngcloud config set project \"${PROJECT_ID}\"\n```\n- Create three Cloud Storage buckets with unique names:```\ngsutil mb -l \"${LOCATION}\" \"gs://unscanned-${PROJECT_ID}\"gsutil mb -l \"${LOCATION}\" \"gs://quarantined-${PROJECT_ID}\"gsutil mb -l \"${LOCATION}\" \"gs://clean-${PROJECT_ID}\"\n````${PROJECT_ID}` is used to make sure that the bucket names are unique.These three buckets hold the uploaded files at various stages during the file scanning pipeline:- `unscanned-` `` : Holds files before they're scanned. Your users upload their files to this bucket.\n- `quarantined-` `` : Holds files that the malware-scanner service has scanned and deemed to contain malware.\n- `clean-` `` : Holds files that the malware-scanner service has scanned and found to be uninfected.\n- Create a fourth Cloud Storage bucket:```\ngsutil mb -l \"${LOCATION}\" \"gs://cvd-mirror-${PROJECT_ID}\"\n````${PROJECT_ID}` is used to make sure that the bucket name is unique.This bucket `cvd-mirror-` `` is used to maintain a local mirror of the malware definitions database, which prevents rate limiting from being triggered by the ClamAV CDN.## Set up a service account for the malware-scanner service\nIn this section, you create a service account to use for the malware scanner service. You then grant the appropriate roles to the service account so that it has permissions to read and write to the Cloud Storage buckets. The roles ensure that the account has minimal permissions and that it only has access to the resources that it needs.\n- Create the `malware-scanner` service account:```\ngcloud iam service-accounts create ${SERVICE_NAME}\n```\n- Grant the Object Admin role to the buckets. The role allows the service to read and delete files from the unscanned bucket, and to write files to the quarantined and clean buckets.```\ngsutil iam ch \\\u00a0 \u00a0 \"serviceAccount:${SERVICE_ACCOUNT}:objectAdmin\" \\\u00a0 \u00a0 \"gs://unscanned-${PROJECT_ID}\"gsutil iam ch \\\u00a0 \u00a0 \"serviceAccount:${SERVICE_ACCOUNT}:objectAdmin\" \\\u00a0 \u00a0 \"gs://clean-${PROJECT_ID}\"gsutil iam ch \\\u00a0 \u00a0 \"serviceAccount:${SERVICE_ACCOUNT}:objectAdmin\" \\\u00a0 \u00a0 \"gs://quarantined-${PROJECT_ID}\"gsutil iam ch \\\u00a0 \u00a0 \"serviceAccount:${SERVICE_ACCOUNT}:objectAdmin\" \\\u00a0 \u00a0 \"gs://cvd-mirror-${PROJECT_ID}\"\n```\n- Grant the Metric Writer role, which allows the service to write metrics to Monitoring:```\ngcloud projects add-iam-policy-binding \\\u00a0 \u00a0 \u00a0 \"${PROJECT_ID}\" \\\u00a0 \u00a0 \u00a0 --member=\"serviceAccount:${SERVICE_ACCOUNT}\" \\\u00a0 \u00a0 \u00a0 --role=roles/monitoring.metricWriter\n```## Create the malware-scanner service in Cloud Run\nIn this section, you deploy the malware-scanner service to Cloud Run. The service runs in a Docker container that contains the following:\n- A [Dockerfile](https://github.com/GoogleCloudPlatform/docker-clamav-malware-scanner/blob/main/cloudrun-malware-scanner/Dockerfile) to build a container image with the service, Node.js runtime, Google Cloud SDK, and ClamAV binaries.\n- The [Node.js files](https://github.com/GoogleCloudPlatform/docker-clamav-malware-scanner/blob/main/cloudrun-malware-scanner/server.js) for the malware-scanner Cloud Run service.\n- A [config.json](https://github.com/GoogleCloudPlatform/docker-clamav-malware-scanner/blob/main/cloudrun-malware-scanner/config.json.tmpl) configuration file to specify your Cloud Storage bucket names.\n- A [updateCvdMirror.sh](https://github.com/GoogleCloudPlatform/docker-clamav-malware-scanner/blob/main/cloudrun-malware-scanner/updateCvdMirror.sh) shell script to refresh the ClamAV malware definitions database mirror in Cloud Storage.\n- A [cloud-run-proxy](https://github.com/GoogleCloudPlatform/cloud-run-proxy) service to proxy`freshclam`HTTP requests, which provide authenticated access to Cloud Storage APIs.\n- A [bootstrap.sh](https://github.com/GoogleCloudPlatform/docker-clamav-malware-scanner/blob/main/cloudrun-malware-scanner/bootstrap.sh) shell script to run the necessary services on instance startup.\nTo deploy the service, do the following:\n- In Cloud Shell, clone the GitHub repository that contains the code files:```\ngit clone https://github.com/GoogleCloudPlatform/docker-clamav-malware-scanner.git\n```\n- Change to the `cloudrun-malware-scanner` directory:```\ncd docker-clamav-malware-scanner/cloudrun-malware-scanner\n```\n- Edit the `config.json` configuration file to specify the Cloud Storage buckets that you created. Because the bucket names are based on the project ID, you can use a search and replace operation:```\nsed \"s/-bucket-name/-${PROJECT_ID}/\" config.json.tmpl > config.json\n```You can view the updated configuration file:```\ncat config.json\n```\n- Perform an initial population of the ClamAV malware database mirror in Cloud Storage:```\npython3 -m venv pyenv. pyenv/bin/activatepip3 install crcmod cvdupdate./updateCvdMirror.sh \"cvd-mirror-${PROJECT_ID}\"deactivate\n```The command performs a local install of the `CVDUpdate` tool and uses it to download the malware database. The command then uploads the database to the `cvd-mirror-` `` bucket that you created earlier.You can check the contents of the mirror bucket:```\ngsutil ls \"gs://cvd-mirror-${PROJECT_ID}/cvds\"\n```The bucket should contain several CVD files that contain the full malware database, several `.cdiff` files that contain the daily differential updates, and two `.json` files with configuration and state information.\n- Create and deploy the Cloud Run service using the service account that you created earlier:```\ngcloud beta run deploy \"${SERVICE_NAME}\" \\\u00a0 --source . \\\u00a0 --region \"${REGION}\" \\\u00a0 --no-allow-unauthenticated \\\u00a0 --memory 4Gi \\\u00a0 --cpu 1 \\\u00a0 --concurrency 20 \\\u00a0 --min-instances 1 \\\u00a0 --max-instances 5 \\\u00a0 --no-cpu-throttling \\\u00a0 --cpu-boost \\\u00a0 --service-account=\"${SERVICE_ACCOUNT}\"\n```The command creates a cloud run instance that has 1 vCPU and uses 4 GiB of RAM. This size is acceptable for this deployment. However, in a production environment, you might want to choose a larger CPU and memory size for the instance, and a larger `--max-instances` parameter. The resource sizes that you might need depend on how much traffic the service needs to handle.The command includes the following specifications:- The`--concurrency`parameter specifies the number of simultaneous requests that each instance can process.\n- The`--no-cpu-throttling`parameter lets the instance perform operations in the background, such as updating malware definitions.\n- The`--cpu-boost`parameter doubles the number of vCPUs on instance startup to reduce startup latency.\n- The`--min-instances 1`parameter maintains at least one instance active, because the startup time for each instance is relatively high.\n- The`--max-instances 5`parameter prevents the service from being scaled up too high.\n- When prompted, enter `Y` to build and deploy the service. The build and deployment takes about 10 minutes. When it's complete, the following message is displayed:```\nService [malware-scanner] revision [malware-scanner-UNIQUE_ID] has been deployed and is serving 100 percent of traffic.\nService URL: https://malware-scanner-UNIQUE_ID.a.run.app\n```\n- Store the `Service URL` value from the output of the deployment command in a shell variable. You use the value later when you create a Cloud Scheduler job.```\nSERVICE_URL=\"SERVICE_URL\"\n```\nTo check the running service and the ClamAV version, run the following command:\n```\ncurl -D - -H \"Authorization: Bearer $(gcloud auth print-identity-token)\" \u00a0\\\u00a0 \u00a0 \u00a0${SERVICE_URL}\n```\nThe Cloud Run service requires that all invocations are authenticated, and the authenticating identities must have the `run.routes.invoke` permission on the service. You add the permission in the next section.\n### Create an Eventarc Cloud Storage trigger\nIn this section, you add permissions to allow Eventarc to capture Cloud Storage events and create a trigger to send these events to the Cloud Run `malware-scanner` service.\n- If you're using an existing project that was created before April 8, 2021, add the `iam.serviceAccountTokenCreator` role to the Pub/Sub service account:```\nPROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format=\"value(projectNumber)\")PUBSUB_SERVICE_ACCOUNT=\"service-${PROJECT_NUMBER}@gcp-sa-pubsub.iam.gserviceaccount.com\"gcloud projects add-iam-policy-binding ${PROJECT_ID} \\\u00a0 \u00a0 --member=\"serviceAccount:${PUBSUB_SERVICE_ACCOUNT}\"\\\u00a0 \u00a0 --role='roles/iam.serviceAccountTokenCreator'\n```This role addition is only required for older projects and [allows Pub/Sub to invoke the Cloud Run service](/run/docs/tutorials/pubsub#integrating-pubsub) .\n- In Cloud Shell, grant the Pub/Sub Publisher role to the Cloud Storage service account:```\nSTORAGE_SERVICE_ACCOUNT=$(gsutil kms serviceaccount -p \"${PROJECT_ID}\")gcloud projects add-iam-policy-binding \"${PROJECT_ID}\" \\\u00a0 --member \"serviceAccount:${STORAGE_SERVICE_ACCOUNT}\" \\\u00a0 --role \"roles/pubsub.publisher\"\n```\n- Allow the `malware-scanner` service account to invoke the Cloud Run service, and act as an Eventarc event receiver:```\ngcloud run services add-iam-policy-binding \"${SERVICE_NAME}\" \\\u00a0 --region=\"${REGION}\" \\\u00a0 --member \"serviceAccount:${SERVICE_ACCOUNT}\" \\\u00a0 --role roles/run.invokergcloud projects add-iam-policy-binding \"${PROJECT_ID}\" \\\u00a0 --member \"serviceAccount:${SERVICE_ACCOUNT}\" \\\u00a0 --role \"roles/eventarc.eventReceiver\"\n```\n- Create an Eventarc trigger to capture the finalized object event in the unscanned Cloud Storage bucket and send it to your Cloud Run service. The trigger uses the `malware-scanner` service account for authentication:```\nBUCKET_NAME=\"unscanned-${PROJECT_ID}\"gcloud eventarc triggers create \"trigger-${BUCKET_NAME}-${SERVICE_NAME}\" \\\u00a0 --destination-run-service=\"${SERVICE_NAME}\" \\\u00a0 --destination-run-region=\"${REGION}\" \\\u00a0 --location=\"${LOCATION}\" \\\u00a0 --event-filters=\"type=google.cloud.storage.object.v1.finalized\" \\\u00a0 --event-filters=\"bucket=${BUCKET_NAME}\" \\\u00a0 --service-account=\"${SERVICE_ACCOUNT}\"\n```If you receive one of the following errors, wait one minute and then run the command again:```\nERROR: (gcloud.eventarc.triggers.create) INVALID_ARGUMENT: The request was invalid: Bucket \"unscanned-PROJECT_ID\" was not found. Please verify that the bucket exists.\n``````\nERROR: (gcloud.eventarc.triggers.create) FAILED_PRECONDITION: Invalid resource state for \"\": Permission denied while using the Eventarc Service Agent. If you recently started to use Eventarc, it may take a few minutes before all necessary permissions are propagated to the Service Agent. Otherwise, verify that it has Eventarc Service Agent role.\n```\n- Change the message acknowledgement deadline to two minutes in the underlying Pub/Sub subscription that's used by the Eventarc trigger. The default value of 10 seconds is too short for large files or high loads.```\nSUBSCRIPTION_NAME=$(gcloud eventarc triggers describe \\\u00a0 \u00a0 \"trigger-${BUCKET_NAME}-${SERVICE_NAME}\" \\\u00a0 \u00a0 --location=\"${LOCATION}\" \\\u00a0 \u00a0 --format=\"get(transport.pubsub.subscription)\")gcloud pubsub subscriptions update \"${SUBSCRIPTION_NAME}\" --ack-deadline=120\n```Although your trigger is created immediately, it can take up to 10 minutes for a trigger to propagate and filter events.\n### Create an Cloud Scheduler job to trigger ClamAV database mirror updates\n- Create a Cloud Scheduler job that executes an HTTP `POST` request on the Cloud Run service with a command to update the mirror of the malware definitions database. To avoid having too many clients use the same time slot, [ClamAV](https://docs.clamav.net/manual/Usage/Configuration.html#freshclamconf) requires that you schedule the job at a random minute between 3 and 57, avoiding multiples of 10.```\nwhile : ; do\u00a0 # set MINUTE to a random number between 3 and 57\u00a0 MINUTE=\"$((RANDOM%55 + 3))\"\u00a0 # exit loop if MINUTE isn't a multiple of 10\u00a0 [[ $((MINUTE % 10)) != 0 ]] && breakdonegcloud scheduler jobs create http \\\u00a0 \u00a0 \"${SERVICE_NAME}-mirror-update\" \\\u00a0 \u00a0 --location=\"${REGION}\" \\\u00a0 \u00a0 --schedule=\"${MINUTE} */2 * * *\" \\\u00a0 \u00a0 --oidc-service-account-email=\"${SERVICE_ACCOUNT}\" \\\u00a0 \u00a0 --uri=\"${SERVICE_URL}\" \\\u00a0 \u00a0 --http-method=post \\\u00a0 \u00a0 --message-body='{\"kind\":\"schedule#cvd_update\"}' \\\u00a0 \u00a0 --headers=\"Content-Type=application/json\"\n```The `--schedule` command-line argument defines when the job runs [using the unix-cron string format](/scheduler/docs/configuring/cron-job-schedules) . The value given indicates that the job should run at the specific randomly-generated minute every two hours.\nThis job only updates the ClamAV in Cloud Storage. The [ClamAV freshclam daemon](https://docs.clamav.net/manual/Usage/SignatureManagement.html#freshclam) in each instance of the Cloud Run checks the mirror every 30 minutes for new definitions and updates the ClamAV daemon.\n## Test the pipeline by uploading files\nTo test the pipeline, you upload one clean (malware-free) file and one test file that mimics an infected file:\n- Create a sample text file or use an existing clean file to test the pipeline processes.\n- In Cloud Shell, copy the sample data file to the unscanned bucket:```\ngsutil cp FILENAME \"gs://unscanned-${PROJECT_ID}\"\n```Replace `` with the name of the clean text file. The malware-scanner service inspects each file and moves it to an appropriate bucket. This file is moved to the clean bucket.\n- Give the pipeline a few seconds to process the file and then check your clean bucket to see if the processed file is there:```\ngsutil ls -r \"gs://clean-${PROJECT_ID}\"\n```You can check that the file was removed from the unscanned bucket:```\ngsutil ls -r \"gs://unscanned-${PROJECT_ID}\"\n```\n- Upload a file called `eicar-infected.txt` that contains the [EICAR standard anti-malware test signature](https://www.eicar.org/download-anti-malware-testfile/) to your unscanned bucket:```\necho -e 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*' \\\u00a0 \u00a0 | gsutil cp - \"gs://unscanned-${PROJECT_ID}/eicar-infected.txt\"\n```This text string has a signature that triggers malware scanners for testing purposes. This test file is a widely used test\u2014it isn't actual malware and it's harmless to your workstation. If you try to create a file that contains this string on a computer that has a malware scanner installed, you can trigger an alert.\n- Wait a few seconds and then check your quarantined bucket to see if your file successfully went through the pipeline:```\ngsutil ls -r \"gs://quarantined-${PROJECT_ID}\"\n```The service also logs a Logging log entry when a malware infected file is detected.You can check that the file was removed from the unscanned bucket:```\ngsutil ls -r \"gs://unscanned-${PROJECT_ID}\"\n```## Test the malware definitions database update mechanism\n- In Cloud Shell, trigger the check for updates by forcing the Cloud Scheduler job to run:```\ngcloud scheduler jobs run \"${SERVICE_NAME}-mirror-update\" --location=\"${REGION}\"\n```The results of this command are only shown in the detailed logs.## Monitor the service\nYou can monitor the service by using Cloud Logging and Cloud Monitoring.\n### View detailed logs\n- In the Google Cloud console, go to the Cloud Logging Logs Explorer page. [Go to Logs Explorer](https://console.cloud.google.com/logs/query) \n- If the **Log fields** filter isn't displayed, click **Log Fields** .\n- In the **Log Fields** filter, click **Cloud Run Revision** .\n- In the **Service Name** section of the **Log Fields** filter, click **malware-scanner** .\nThe logs query results shows the logs from the service, including several lines that show the scan requests and status for the two files that you uploaded:\n```\nScan request for gs://unscanned-PROJECT_ID/FILENAME, (\n##\n### bytes) scanning with clam ClamAV CLAMAV_VERSION_STRING\nScan status for gs://unscanned-PROJECT_ID/FILENAME: CLEAN (\n##\n### bytes in \n##\n## ms)\n...\nScan request for gs://unscanned-PROJECT_ID/eicar-infected.txt, (69 bytes) scanning with clam ClamAV CLAMAV_VERSION_STRING\nScan status for gs://unscanned-PROJECT_ID/eicar-infected.txt: INFECTED stream: Eicar-Signature FOUND (69 bytes in \n### ms)\n```\nThe output shows the ClamAV version and malware database signature revision, along with the malware name for the infected test file. You can use these log messages to set up alerts for when malware has been found, or for when failures occurred while scanning.\nThe output also shows the malware definitions mirror update logs:\n```\nStarting CVD Mirror update\nCVD Mirror update check complete. output: ...\n```\nIf the mirror was updated, the output shows additional lines:\n```\nCVD Mirror updated: DATE_TIME - INFO: Downloaded daily.cvd. Version: VERSION_INFO\n```\nFreshclam update logs appear every 30 mins:\n```\nDATE_TIME -> Received signal: wake up\nDATE_TIME -> ClamAV update process started at DATE_TIME\nDATE_TIME -> daily.cvd database is up-to-date (version: VERSION_INFO)\nDATE_TIME -> main.cvd database is up-to-date (version: VERSION_INFO)\nDATE_TIME -> bytecode.cvd database is up-to-date (version: VERSION_INFO)\n```\nIf the database was updated, the freshclam log lines are instead similar to the following:\n```\nDATE_TIME -> daily.cld updated (version: VERSION_INFO)\n```\n### View Metrics\nThe service generates the following metrics for monitoring and alerting purposes:\n- Number of clean files processed:`custom.googleapis.com/opencensus/malware-scanning/clean_files`\n- Number of infected files processed:`custom.googleapis.com/opencensus/malware-scanning/infected_files`\n- Time spent scanning files:`custom.googleapis.com/opencensus/malware-scanning/scan_duration`\n- Total number of bytes scanned:`custom.googleapis.com/opencensus/malware-scanning/bytes_scanned`\n- Number of failed malware scans:`custom.googleapis.com/opencensus/malware-scanning/scans_failed`\n- Number of CVD Mirror update checks:`custom.googleapis.com/opencensus/malware-scanning/cvd-mirror-updates`\nYou can view these metrics in the Cloud Monitoring Metrics Explorer:\n- In the Google Cloud console, go to the Cloud Monitoring Metrics Explorer page. [Go to Metrics Explorer](https://console.cloud.google.com/monitoring/metrics-explorer) \n- Click the **Select a metric** field and enter the filter string `malware` .\n- Select the **OpenCensus/malware-scanning/clean_files** metric. The graph shows a data point that indicates when the clean file was scanned.\nYou can use metrics to monitor the pipeline and to create alerts for when malware is detected, or when files fail processing.\nThe generated metrics have the following [labels](/monitoring/api/v3/metric-model#generic-label-info) , which you can use for filtering and aggregation to view more fine-grained details with [Metrics Explorer](/monitoring/charts/metrics-selector) :\n- `source_bucket`\n- `destination_bucket`\n- `clam_version`\n- `cloud_run_revision`## Handle multiple buckets\nThe malware scanner service can scan files from multiple source buckets and send the files to separate clean and quarantined buckets. Although this advanced configuration is out of the scope of this deployment, the following is a summary of the required steps:\n- Create unscanned, clean, and quarantined Cloud Storage buckets that have unique names.\n- [Grant the appropriate roles](#create_the_service_account) to the `malware-scanner` service account on each bucket.\n- Edit the `config.json` configuration file to specify the bucket names for each configuration:```\n{\u00a0 \"buckets\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"unscanned\": \"unscanned-bucket-1-name\",\u00a0 \u00a0 \u00a0 \"clean\": \"clean-bucket-1-name\",\u00a0 \u00a0 \u00a0 \"quarantined\": \"quarantined-bucket-1-name\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"unscanned\": \"unscanned-bucket-2-name\",\u00a0 \u00a0 \u00a0 \"clean\": \"clean-bucket-2-name\",\u00a0 \u00a0 \u00a0 \"quarantined\": \"quarantined-bucket-2-name\"\u00a0 \u00a0 }\u00a0 ]\u00a0 \"ClamCvdMirrorBucket\": \"cvd-mirror-bucket-name\"}\n```\n- For each of the unscanned buckets, [create an Eventarc trigger](#create_trigger) . Make sure to create a unique trigger name for each bucket.The Cloud Storage bucket must be in the same project and region as the Eventarc trigger.## Clean up\nThe following section explains how you can avoid future charges for the Google Cloud project that you used in this deployment.\n### Delete the Google Cloud project\nTo avoid incurring charges to your Google Cloud account for the resources used in this deployment, you can delete the Google Cloud project.\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.## What's next\n- Explore [Cloud Storage documentation](/storage/docs) .\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .", "guide": "Cloud Architecture Center"}