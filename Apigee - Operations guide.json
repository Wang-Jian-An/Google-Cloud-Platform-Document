{"title": "Apigee - Operations guide", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Operations guide\n", "content": "## How to obtain an API key\nThe following example explains how to obtain an API key that you can use to validate API calls to a target service proxied through Apigee Adapter for Envoy.\n**NOTE: ** If you are an experienced Apigee user, the following steps will be  familiar, as they are standard Apigee configurations; however, **please follow these\n instructions carefully, as they require you to insert specific Product and Developer App\n configurations** .\n### 1. Log in to Apigee\n- Open the Apigee UI in a browser.\n- Once your in the UI, select the same organization that you used to configure Apigee Adapter for Envoy.\n### 2. Create a Developer\nYou can use an existing developer for testing, or create a new one as follows:\n- Select **Publish > Developers** in the side navigation menu.\n- Click **+ Developer.** \n- Fill out the dialog to create a new developer. You can use any developer name/email that you wish.\n### 3. Create an API Product\nFollow the Product creation example provided below. See also [About the API product configuration](#about-api-products) .\n- Select **Publish > API Products** in the side navigation menu.\n- Click **+ API Product** .\n- Fill out the Product details page as follows. Do not click **Save** until instructed to do so.\n- | Field  | Value                                  |\n|:-------------|:------------------------------------------------------------------------------------------------------------------------------------------|\n| Name   | httpbin-product                               |\n| Display Name | httpbin product                               |\n| Environment | your_environment Set this to the environment you used when you provisioned Apigee Adapter for Envoy with the apigee-remote-service-cli. |\n| Access  | Private                                 |\n| Quota  | 5 requests every 1 minute See also About API products.                     |\n- In the **Apigee remote service targets** section, click **Add an Apigee remote service target** .\n- In the Apigee remote service target dialog, add the following values:| Attribute | Value                 | Description                         |\n|:------------|:-------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------|\n| Target name | Enter the name of the target service. For example: httpbin.org   | The target endpoint fronted by the Envoy proxy.                |\n| API proxy | remote-service               | The remote-service proxy that was provisioned on Apigee during the Envoy Adapter installation.    |\n| Path  | Enter a /resource_path to match a specific path. For example: /httpbin. | The request path to match on the target endpoint. API proxy calls to this path will match this API product. |\n- Click **Save** .\n### 4. Create a Developer App\n- Select **Publish > Apps** in the side navigation menu.\n- Click **+ App** .\n- Fill out the Developer App page as follows. Do not Save until instructed to do so.\n- | 0   | 1                       |\n|:-------------|:-------------------------------------------------------------------------------------------|\n| Name   | httpbin-app                    |\n| Display Name | httpbin app                    |\n| Developer | Select the developer you created previously, or pick any developer you wish from the list. |\n- Next, add two products to the app:- First, in the Credentials section, click **+ Add product** and select the product you  just configured: **httpbin-product** .\n- Then, add the **remote-service** product. This product was created automatically when you provisioned Apigee.\n- Click **Create** .\n- Under Credentials, click **Show** next to the **Key** .\n- **Copy the value of the Consumer Key.** This value is the **API key** that you will use to make API calls to the`httpbin`service.## About API products\n[API Products](/apigee/docs/api-platform/publish/what-api-product) are the primary control point for the Apigee Remote Service. When you create an API Product and bind it to a target service, you're creating a policy that will be applied to any requests that you configure your Apigee Adapter for Envoy to handle.\n### API Product definition\nWhen you define an API Product in Apigee, you can set a number of parameters that will be used to evaluate requests:\n- Target\n- Request path\n- Quota\n- OAuth scopesThe API Product definition will apply to a request if the request matches both the target binding (for example, `httpbin.org` ) and the request path (for example `/httpbin` ). A list of potential targets is stored as an attribute on the API Product.\nBy default, the Apigee Remote Service checks Envoy's special `:authority (host)` header against its list of targets; however it can be configured to use other headers.\nThe entered Path matches according to the following rules:\n- A single slash (`/`) by itself matches any path.\n- `*`is valid anywhere and matches within a segment (between slashes).\n- `**`is valid at the end and matches anything to the end of line.A quota specifies the number of request messages that an app is allowed to submit to an API over the course of an hour, day, week, or month. When an app reaches its quota limit, subsequent API calls are rejected.\nQuotas allow you to enforce the number of requests a client can make to a service in a given amount of time. Quotas are often used to enforce business contracts or SLAs with developers and partners, rather than for operational traffic management. For example, a quota might be used to limit traffic for a free service, while allowing full access for paying customers.\nQuota parameters are configured in API Products. For example, when you create an API Product, you can optionally set the allowed quota limit, time unit, and interval.\nBecause API keys map back to API Products, each time an API key is verified the appropriate quota counter can be decremented (if a Quota is defined in the associated Product).\nUnlike within the Apigee runtime, Quotas entered in the Product definition are automatically enforced by the Apigee Remote Service. If the request is authorized, the request will counted against the allowed quota.\nQuotas are maintained and checked locally by the Remote Service process and asynchronously maintained with Apigee Runtime. This means the quotas are not precised and likely to have some overrun if you have more than one Remote Service that is maintaining the quota. If the connection to Apigee Runtime is disrupted, the local quota will continue as a stand-alone quota until such time as it can reconnect to the Apigee Runtime.\n### OAuth Scopes\nIf you're using JWT tokens, you may restrict the tokens to subsets of the allowed OAuth scopes. The scopes assigned to your issued JWT token will be checked against the API Product's scopes.\n## About Developer apps\nOnce you've configured your API Products, you will create an App associated with a Developer. The app allows a client access to the associated API Products with an API Key or JWT Token.\n## \n Using JWT based authentication\nYou can use a JWT token to make authenticated API proxy calls instead of using an API key. This section explains how to use the `apigee-remote-service-cli token` command to create, inspect, and rotate JWT tokens. For Apigee hybrid environment, you can use this command to create Kubernetes secret to hold the JWT(s).\n### \n Overview\nJWT verification and authentication is handled by Envoy using its [ JWT Authentication Filter](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/jwt_authn_filter) .\nOnce authenticated, the Envoy `ext-authz` filter sends the request headers and JWT to `apigee-remote-service-envoy` . It matches the JWT's `api_product_list` and `scope` claims against Apigee API Products to authorize it against the target of the request.\n### Creating Apigee JWT tokens\nApigee JWT Tokens can be created using the CLI:\n```\napigee-remote-service-cli token create -c config.yaml --id $KEY --secret $SECRET\n```\nOr by using the standard OAuth token endpoint. Curll example:\n```\ncurl https://org-env.apigee.net/remote-service/token -d '{\"client_id\":\"myclientid\",\"client_secret\":\"myclientsecret\",\"grant_type\":\"client_credentials\"}' -H \"Content-type: application/json\"\n```\n**NOTE:** The Content-type header is required.\n### Using the JWT token\nOnce you have the token, you simply pass it to Envoy in the Authorization header. Example:\n```\ncurl localhost:8080/httpbin/headers -i -H \"Authorization:Bearer $TOKEN\"\n```\n### JWT token failure\nIf Envoy rejects the token, you may see a message like:\n```\nJwks remote fetch is failed\n```\nIf so, ensure that your Envoy configuration contains a valid URI in the `remote_jwks` section, that it's reachable by Envoy, and that you properly set the certificates when you installed the Apigee proxy. You should be able to call the URI directly with a GET call and receive a valid JSON response.\nExample:\n```\ncurl --http1.1 https://myorg-eval-test.apigee.net/remote-service/certs\n```\n**NOTE: ** The --http1.1 flag is required for Apigee hybrid.\nOther messages from Envoy may look like:\n- \"Audiences in Jwt are not allowed\"\n- \"Jwt issuer is not configured\"\nThese are from requirements in your Envoy configuration that you may need to modify.\n### Inspect a token\nYou can use the CLI to inspect your token. Example\n```\napigee-remote-service-cli -c config.yaml token inspect -f path/to/file\n```\nor\n```\napigee-remote-service-cli -c config.yaml token inspect <<< $TOKEN\n```\n### \n Debugging\n[Valid API key fails](/apigee/docs/api-platform/envoy-adapter/v1.0.x/troubleshooting#valid-api-key-fails)\n## \n Logging\nYou can adjust the logging level on the $REMOTE_SERVICE_HOME/apigee-remote-service-envoy service. All logging is sent to stderr.\n| Element   | Required        | Description        |\n|:----------------|:----------------------------------------|:-----------------------------------------|\n| -l, --log_level | Valid levels: debug, info, warn, error. | Adjusts the logging level. Default: info |\n| -j, --json_log | nan          | Emits log output as JSON records.  |\nEnvoy provides logging. For more information, see the following Envoy documentation links:\n- [Application Logging](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/application_logging) \n- [Access Logs](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/access_log) \n- [Stackdriver logging with GKE](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/application_logging#stackdriver-logging-with-gke) ## \n Changing the policy secret name\nA Kubernetes Secret deployed to the cluster contains credentials that the adapter needs to authenticate communication with the remote service proxy. This Secret requires a volume mount point, which is configurable. By default, the mount point is `/policy-secret` . To change the mount point, follow these steps:\n- Execute this command:```\n$REMOTE_SERVICE_HOME/apigee-remote-service-envoy --policy-secret '/new-mount_point_name\n```For example:```\n$REMOTE_SERVICE_HOME/apigee-remote-service-envoy --policy-secret '/my-mount-point\n```\n- Open`$REMOTE_SERVICE_HOME/samples/istio/hybrid-apigee-remote-service-envoy.yaml`in an editor.\n- Change the mount point name to the new name:```\nvolumeMounts:\n - mountPath: /config\n name: apigee-remote-service-envoy\n readOnly: true\n - mountPath: /opt/apigee/tls\n name: tls-volume\n readOnly: true\n - mountPath: /my-mount-point\n name: policy-secret\n readOnly: true\n```\n- Save the file and apply it to the service mesh:```\nkubectl apply -f $REMOTE_SERVICE_HOME/samples/istio/hybrid-apigee-remote-service-envoy.yaml\n```\n## \n Using a network proxy\nAn HTTP proxy can be inserted by using the HTTP_PROXY and HTTPS_PROXY environment variables in the environment of the apigee-remote-service-envoy binary. When using these, the NO_PROXY environment variable can also be used to exclude specific hosts from being sent through the proxy.\n```\nHTTP_PROXY=http://[user]:[pass]@[proxy_ip]:[proxy_port]\nHTTPS_PROXY=http://[user]:[pass]@[proxy_ip]:[proxy_port]\nNO_PROXY=127.0.0.1,localhost\n```\nRemember that the proxy must be reachable from apigee-remote-service-envoy.\n## \n About metrics and analytics\nA Prometheus metrics endpoint is available at `:5001/metrics` . You can configure this port number. See [Configuration file](/apigee/docs/api-platform/envoy-adapter/v1.0.x/reference#configuration-file) .\n### Envoy analytics\nThe following links provide information on obtaining Envoy proxy analytics data:\n- [Admin interface](https://www.envoyproxy.io/docs/envoy/latest/operations/admin) \n- [Stats](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/statistics) \n- [Cluster stats](https://www.envoyproxy.io/docs/envoy/latest/configuration/upstream/cluster_manager/cluster_stats) \n### Istio analytics\nThe following links provide information on obtaining Envoy proxy analytics data:\n- [Observability tasks](https://istio.io/docs/tasks/observability/) \n- [Telemetry configuration](https://istio.io/docs/ops/configuration/telemetry/) \n### \n Apigee analytics\nApigee Remote Service for Envoy sends request statistics to Apigee for analytics processing. Apigee reports these requests under the associated API Product name.\nFor information about Apigee analytics, see [Analytics services overview](/apigee/docs/api-platform/analytics/analytics-services-overview) .\n##", "guide": "Apigee"}