{"title": "Apigee - SetIntegrationRequest policy", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - SetIntegrationRequest policy\n", "content": "## Overview\nThe SetIntegrationRequest policy lets you create a request object for an integration that you want to run. In the policy, you must configure the details of the API trigger and the input parameters required to run the integration. When you run the SetIntegrationRequest policy, it creates a request object and saves it in a flow variable. The request object has all the information required to run the integration. At this stage, the integration is still not run. To run the integration, you must either call the [IntegrationCallout policy](/apigee/docs/api-platform/reference/policies/integration-callout-policy) or set an [IntegrationEndpoint](/apigee/docs/api-platform/reference/api-proxy-configuration-reference#integrationendpoint) . Both the IntegrationCallout policy and IntegrationEndpoint require the request object to run the integration.\nThis policy is an and use of this policy might have cost or  utilization implications, depending on your Apigee license. For information on policy types  and usage implications, see [Policy types](/apigee/docs/api-platform/reference/policies/reference-overview-policy#policy-types) .\n**Note** :- You can run only integrations that have an API trigger.\n- To run an integration, you must use the SetIntegrationRequest policy along with  the IntegrationCallout policy or the IntegrationEndpoint.## <SetIntegrationRequest>\nSpecifies the SetIntegrationRequest policy.\n| 0    | 1                             |\n|:---------------|:-------------------------------------------------------------------------------------------------------------------|\n| Default Value | nan                            |\n| Required?  | Required                           |\n| Type   | Complex type                          |\n| Parent Element | nan                            |\n| Child Elements | <ApiTrigger> <DisplayName> <IntegrationName> <IntegrationRegion> <Parameters> <ProjectId> <Request> <ScheduleTime> |\nThe following table provides a high-level description of the child elements of the [<SetIntegrationRequest>](/apigee/docs/api-platform/reference/policies/set-integration-request-policy#setintegrationrequest) element:\n| Child Element  | Required? | Description                  |\n|:--------------------|:------------|:---------------------------------------------------------------------------------|\n| <ApiTrigger>  | Required | Name of the API trigger to call in the integration.        |\n| <DisplayName>  | Optional | A custom name for the policy.             |\n| <IntegrationName> | Optional | Name of the integration to run.             |\n| <IntegrationRegion> | Required | Name of the region where the integration exists.         |\n| <Parameters>  | Optional | Input parameters of the integration.            |\n| <ProjectId>   | Optional | Name of the Google Cloud Project which has the integration that you want to run. |\n| <Request>   | Optional | Name of the flow variable to save the request object.       |\n| <ScheduleTime>  | Optional | The time at which the integration must be run.         |\nThe SetIntegrationRequest policy uses the following syntax:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><SetIntegrationRequest continueOnError=\"[true|false]\" enabled=\"[true|false]\" name=\"Set-Integration-Request\">\u00a0 <DisplayName>POLICY_DISPLAY_NAME</DisplayName>\u00a0 <ProjectId ref=\"FLOW_VARIABLE_NAME\">GOOGLE_CLOUD_PROJECT_ID</ProjectId>\u00a0 <IntegrationName ref=\"FLOW_VARIABLE_NAME\">INTEGRATION_NAME</IntegrationName>\u00a0 <IntegrationRegion ref=\"FLOW_VARIABLE_NAME\">INTEGRATION_REGION</IntegrationRegion>\u00a0 <ApiTrigger ref=\"FLOW_VARIABLE_NAME\">API_TRIGGER_NAME</ApiTrigger>\u00a0 <ScheduleTime>PARAMETER_VALUE</ScheduleTime>\u00a0 <Parameters>\u00a0 \u00a0 <Parameter name=\"PARAMETER_NAME\" type=\"PARAMETER_DATATYPE\" ref=\"FLOW_VARIABLE_NAME\">PARAMETER_VALUE</Parameter>\u00a0 \u00a0 <ParameterArray name=\"ARRAY_NAME\" type=\"ARRAY_DATATYPE\" ref=\"FLOW_VARIABLE_NAME>\u00a0 \u00a0 \u00a0 <Value ref=\"FLOW_VARIABLE_NAME>PARAMETER_VALUE</Value>\u00a0 \u00a0 \u00a0 <Value ref=\"FLOW_VARIABLE_NAME>PARAMETER_VALUE</Value>\u00a0 \u00a0 \u00a0 <Value ref=\"FLOW_VARIABLE_NAME>PARAMETER_VALUE</Value>\u00a0 \u00a0 </ParameterArray>\u00a0 </Parameters>\u00a0 <Request>FLOW_VARIABLE_NAME</Request></SetIntegrationRequest>\n```The following example shows the SetIntegrationRequest policy definition:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><SetIntegrationRequest continueOnError=\"false\" enabled=\"true\" name=\"Set-Integration-Request\">\u00a0 <DisplayName>Set Integration Request Policy</DisplayName>\u00a0 <ProjectId ref=\"my_projectid_var\">apigee_staging_1</ProjectId>\u00a0 <IntegrationName ref=\"my_integration_ref\">integration_1</IntegrationName>\u00a0 <IntegrationRegion ref=\"my_integration_ref\">asia-east1</IntegrationRegion>\u00a0 <ApiTrigger ref=\"my_api_trigger_ref\">API-Trigger-2</ApiTrigger>\u00a0 <ScheduleTime>2022-01-15T01:30:15Z</ScheduleTime>\u00a0 <Parameters>\u00a0 \u00a0 <Parameter name=\"my_str_param\" type=\"string\" ref=\"flow_var_1\">someText</Parameter>\u00a0 \u00a0 <ParameterArray name=\"my_array_param\" type=\"integer\" ref=\"flow_var_2\">\u00a0 \u00a0 \u00a0 <Value ref=\"flow_var_3\">1</Value>\u00a0 \u00a0 \u00a0 <Value ref=\"flow_var_4\">2</Value>\u00a0 \u00a0 \u00a0 <Value ref=\"flow_var_5\">3</Value>\u00a0 \u00a0 </ParameterArray>\u00a0 </Parameters>\u00a0 <Request>my_request_var</Request></SetIntegrationRequest>\n```\nThis element has the following attributes that are common to all policies:\n| Attribute   | Default | Required? | Description                                                                             |\n|:---------------------|----------:|:------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| name     |  nan | Required | The internal name of the policy. The value of the name attribute can contain letters, numbers, spaces, hyphens, underscores, and periods. This value cannot exceed 255 characters. Optionally, use the <DisplayName> element to label the policy in the management UI proxy editor with a different, natural-language name. |\n| continueOnError  |   0 | Optional | Set to false to return an error when a policy fails. This is expected behavior for most policies. Set to true to have flow execution continue even after a policy fails. See also: Fault rules are triggered ONLY in an error state (about continueOnError) Handling faults within the current flow       |\n| enabled    |   1 | Optional | Set to true to enforce the policy. Set to false to turn off the policy. The policy will not be enforced even if it remains attached to a flow.                                            |\n| async not_interested |   0 | Deprecated | This attribute is deprecated.                                                                         |\n## Child element reference\n[<SetIntegrationRequest>](/apigee/docs/api-platform/reference/policies/set-integration-request-policy#setintegrationrequest)\n### <DisplayName>\nUse in addition to the `name` attribute to label the policy in the management UI proxy editor with a different, more natural-sounding name.\nThe `<DisplayName>` element is common to all policies.\n| 0    | 1                      |\n|:---------------|:----------------------------------------------------------------------------------------|\n| Default Value | nan                      |\n| Required?  | Optional. If you omit <DisplayName>, the value of the policy's name attribute is used. |\n| Type   | String                     |\n| Parent Element | <PolicyElement>                   |\n| Child Elements | nan                      |\nThe `<DisplayName>` element uses the following syntax:\n```\n<PolicyElement>\u00a0 <DisplayName>POLICY_DISPLAY_NAME</DisplayName>\u00a0 ...</PolicyElement>\n``````\n<PolicyElement>\u00a0 <DisplayName>My Validation Policy</DisplayName></PolicyElement>\n```\nThe `<DisplayName>` element has no attributes or child elements.\n### <ProjectId>\nSpecifies the name of the Google Cloud Project.\nApigee assigns the value you specify for this element to the `integration.project.id` flow variable.\n| 0    | 1      |\n|:---------------|:------------------------|\n| Default Value | nan      |\n| Required?  | Optional    |\n| Type   | String     |\n| Parent Element | <SetIntegrationRequest> |\n| Child Elements | nan      |\nThe `<ProjectId>` element uses the following syntax:\n```\n<ProjectId ref=\"FLOW_VARIABLE_NAME\">GOOGLE_CLOUD_PROJECT_ID</ProjectId>\n```The following example configures the policy to use the `my_projectid_var` flow variable  to fetch the project ID, and if the flow variable fails to resolve at runtime, use `apigee_staging_1` as the project ID:\n```\n<ProjectId ref=\"my_projectid_var\">apigee_staging_1</ProjectId>\n```\nThe following table describes the attributes of `<ProjectId>` :\n| Attribute | Required? | Type | Description                                                                                                                                                      |\n|:------------|:------------|:-------||\n| ref   | Optional | String | Specifies the flow variable from which Apigee should read the Google Cloud Project ID. You can set the <ProjectId> element in one of the following ways: <ProjectId>val</ProjectId>: Use val as the project ID. <ProjectId ref=\"refval\"/>: Resolve refval dynamically to determine the project ID. Apigee reports an exception if the resolved project ID is invalid or if refval is unresolved. <ProjectId ref=\"refval\">val</ProjectId>: Resolve refval dynamically to determine the project ID. Apigee reports an exception if the resolved project ID is invalid. If refval does not resolve, use val as the project ID. |\n### <IntegrationName>\nSpecifies the integration to run.\nApigee assigns the value you specify for this element to the `integration.name` flow variable.\nThe integration name must meet the following naming requirements:\n- Must start and end with letters or numbers.\n- Cannot have spaces.\n- Cannot have two consecutive dash or underscore characters.\n| 0    | 1      |\n|:---------------|:------------------------|\n| Default Value | nan      |\n| Required?  | Optional    |\n| Type   | String     |\n| Parent Element | <SetIntegrationRequest> |\n| Child Elements | nan      |\nThe `<IntegrationName>` element uses the following syntax:\n```\n<IntegrationName ref=\"FLOW_VARIABLE_NAME\">INTEGRATION_NAME</IntegrationName>\n```The following example configures the policy to use the `my_integration_ref` flow variable  to fetch the integration name, and if the flow variable fails to resolve at runtime, use `integration_1` as the integration name:\n```\n<IntegrationName ref=\"my_integration_ref\">integration_1</IntegrationName>\n```\nThe following table describes the attributes of `<IntegrationName>` :\n| Attribute | Required? | Type | Description                                                                                                                                                                      |\n|:------------|:------------|:-------||\n| ref   | Optional | String | Specifies the flow variable from which Apigee should read the integration name. You can set the <IntegrationName> element in one of the following ways: <IntegrationName>val</IntegrationName>: Use val as the integration name. <IntegrationName ref=\"refval\"/>: Resolve refval dynamically to determine the integration name. Apigee reports an exception if the resolved integration name is invalid or if refval is unresolved. <IntegrationName ref=\"refval\">val</IntegrationName>: Resolve refval dynamically to determine the integration name. Apigee reports an exception if the resolved integration name is invalid. If refval does not resolve, use val as the integration name. |\n### <IntegrationRegion>\nSpecifies the region where integration exists.\nAt runtime, Apigee assigns the element's value to the `integration.region` flow variable, creates a region-based target URL and stores the URL in the `integration.target.url` flow variable.\nThe region-based target URL has the following format: `https://` `` `-integrations.googleapis.com`\nThe integration region must be supported by Apigee Integration. For information about the supported regions of Apigee Integration, see [Supported regions](/apigee/docs/api-platform/integration/system-limits#supported-regions) .\n| 0    | 1      |\n|:---------------|:------------------------|\n| Default Value | nan      |\n| Required?  | Required    |\n| Type   | String     |\n| Parent Element | <SetIntegrationRequest> |\n| Child Elements | nan      |\nThe `<IntegrationRegion>` element uses the following syntax:\n```\n<IntegrationRegion ref=\"FLOW_VARIABLE_NAME\">INTEGRATION_REGION</IntegrationRegion>\n```The following example configures the policy to use the `my_integration_region_ref` flow variable  to fetch the integration region, and if the flow variable fails to resolve at runtime, `asia-east1` is used as the region of the integration:\n```\n<IntegrationRegion ref=\"my_integration_region_ref\">asia-east1</IntegrationRegion>\n```\nThe following table describes the attributes of `<IntegrationRegion>` :\n| Attribute | Required? | Type | Description                                                                                                                                                                             |\n|:------------|:------------|:-------||\n| ref   | Optional | String | Specifies the flow variable from which Apigee should read the integration region. You can set the <IntegrationRegion> element in one of the following ways: <IntegrationRegion>val</IntegrationRegion>: Use val as the integration region. <IntegrationRegion ref=\"refval\"/>: Resolve refval dynamically to determine the integration region. Apigee reports an exception if the resolved integration region is invalid or if refval is unresolved. <IntegrationRegion ref=\"refval\">val</IntegrationRegion>: Resolve refval dynamically to determine the integration region. Apigee reports an exception if the resolved integration region is invalid. If refval does not resolve, use val as the integration region. |\n### <ApiTrigger>\nSpecifies the API trigger to run.\nYou must specify the API trigger name in the `api_trigger/` `` format.\nApigee assigns the value you specify for this element to the `integration.api.trigger` flow variable.\nIf you have specified the `<IntegrationName>` , only the API trigger of that integration is run. However, if you have not specified the `<IntegrationName>` , all the integrations that have the specified API trigger are run.\n| 0    | 1      |\n|:---------------|:------------------------|\n| Default Value | nan      |\n| Required?  | Required    |\n| Type   | String     |\n| Parent Element | <SetIntegrationRequest> |\n| Child Elements | nan      |\nThe `<ApiTrigger>` element uses the following syntax:\n```\n<ApiTrigger ref=\"FLOW_VARIABLE_NAME\">API_TRIGGER_NAME</ApiTrigger>\n```The following example configures the policy to use the `my_api_trigger_ref` flow variable  to fetch the API trigger name, and if the flow variable fails to resolve at runtime, use `api_trigger/API-Trigger-2` as the API trigger name:\n```\n<ApiTrigger ref=\"my_api_trigger_ref\">api_trigger/API-Trigger-2</ApiTrigger>\n```\nThe following table describes the attributes of `<ApiTrigger>` :\n| Attribute | Required? | Type | Description                                                                                                                                                            |\n|:------------|:------------|:-------||\n| ref   | Optional | String | Specifies the flow variable from which Apigee should read the API trigger name. You can set the <ApiTrigger> element in one of the following ways: <ApiTrigger>val</ApiTrigger>: Use val as the API trigger name. <ApiTrigger ref=\"refval\"/>: Resolve refval dynamically to determine the trigger name. Apigee reports an exception if the resolved API trigger name is invalid or if refval is unresolved. <ApiTrigger ref=\"refval\">val</ApiTrigger>: Resolve refval dynamically to determine the trigger name. Apigee reports an exception if the resolved API trigger name is invalid. If refval does not resolve, use val as the trigger name. |\n### <ScheduleTime>\nSpecifies the time at which the integration must run.\nIf the time is less or equal to the current time, the integration runs immediately. You must specify the time in the `yyyy-mm-ddThh:mm:ssZ` format where Z is the UTC timezone. For example, if you specify `2022-01-15T01:30:15Z` , the integration is scheduled to run on 1-15-2022 at 1:30:15 UTC. You can also specify the timezone using an offset from UTC. For example, if you specify `2022-01-15T01:30:15-08:00` , the integration is scheduled to run on 1-15-2022 at 1:30:15 PST. For more information about the time format, see [ Combined date and time representations](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) .\n**Note:** You can schedule the time only if you are running your integrations in [asynchronous mode](/apigee/docs/api-platform/reference/policies/integration-callout-policy#asyncexecution) . If you are running your integration in synchronous mode and if you specify a schedule time, the execution of the integration fails and you will get a runtime error.\n| 0    | 1      |\n|:---------------|:------------------------|\n| Default Value | nan      |\n| Required?  | Optional    |\n| Type   | String     |\n| Parent Element | <SetIntegrationRequest> |\n| Child Elements | nan      |\nThe `<ScheduleTime>` element uses the following syntax:\n```\n<ScheduleTime>PARAMETER_VALUE</ScheduleTime>\n```The following example schedules the integration to run at `2022-01-15T01:30:15Z` :\n```\n<ScheduleTime>2022-01-15T01:30:15Z</ScheduleTime>\n```\n### <Parameters>\nSpecifies the input parameters required to run the integration.\nYou can specify individual parameter(s) or parameter array(s).\n- To specify an individual parameter, use the [<Parameter>](/apigee/docs/api-platform/reference/policies/set-integration-request-policy#parameter) element.\n- To specify a parameter array, use the [<ParameterArray>](/apigee/docs/api-platform/reference/policies/set-integration-request-policy#parameterarray) element.\n| 0    | 1       |\n|:---------------|:-----------------------------|\n| Default Value | nan       |\n| Required?  | Optional      |\n| Type   | Complex type     |\n| Parent Element | <SetIntegrationRequest>  |\n| Child Elements | <Parameter> <ParameterArray> |\nThe following table describes the attributes of `<Parameters>` :\n| Attribute    | Required? | Type | Description                                                                  |\n|:-------------------------|:------------|:-------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| substitutionVariableChar | Optional | Char | Lets you set custom delimiters to pass flow variable values as template arguments in the <Parameter> child element. Note: substitutionVariableChar can pass template arguments only for parameters of JSON or String datatype, and for parameter arrays of String array datatype. |\nThe `<Parameters>` element uses the following syntax:\n```\n<Parameters substitutionVariableChar=\"SUBSTITUTION_CHAR\">\u00a0 <Parameter name=\"PARAMETER_NAME\" type=\"PARAMETER_DATATYPE\" ref=\"FLOW_VARIABLE_NAME\" >PARAMETER_VALUE</Parameter>\u00a0 <Parameter name=\"PARAMETER_NAME\" type=\"PARAMETER_DATATYPE\">SUBSTITUTION_CHAR FLOW_VARIABLE_NAME SUBSTITUTION_CHAR</Parameter>\u00a0 <ParameterArray name=\"ARRAY_NAME\" type=\"ARRAY_DATATYPE ref=\"FLOW_VARIABLE_NAME\"\">\u00a0 \u00a0 <Value>PARAMETER_VALUE</Value>\u00a0 \u00a0 <Value ref=\"FLOW_VARIABLE_NAME\"/>\u00a0 \u00a0 <Value ref=\"FLOW_VARIABLE_NAME\">PARAMETER_VALUE</Value>\u00a0 </ParameterArray></Parameters>\n```The following example initializes the `my_str_param` parameter and the `my_array_param` parameter array:\n```\n<Parameters substitutionVariableChar=\"#\">\u00a0 <Parameter name=\"my_str_param\" type=\"string\" ref=\"flow_var_1\">someText</Parameter>\u00a0 <Parameter name=\"strVar\" type=\"string\">#flowvar1#</Parameter>\u00a0 <ParameterArray name=\"my_array_param\" type=\"integer\" ref=\"flow_var_2\">\u00a0 \u00a0 <Value>1</Value>\u00a0 \u00a0 <Value ref=\"flow_var_3\"/>\u00a0 \u00a0 <Value ref=\"flow_var_4\">3</Value>\u00a0 </ParameterArray></Parameters>\n```\nApigee treats empty [<Parameter>](/apigee/docs/api-platform/reference/policies/set-integration-request-policy#parameter) and [<ParameterArray>](/apigee/docs/api-platform/reference/policies/set-integration-request-policy#parameterarray) elements as `null` values. For  example, declarations like `<Parameter></Parameter>` and `<ParameterArray></ParameterArray>` are treated as `null` values.\n**Note: ** If a parameter has a JSON value, ensure that the JSON is valid. For example, if your JSON payload contains double quotes (\"), escape each double quotes with a backslash (\\).\nSpecifies an input parameter.\n| 0    | 1   |\n|:---------------|:-------------|\n| Default Value | nan   |\n| Required?  | Optional  |\n| Type   | String  |\n| Parent Element | <Parameters> |\n| Child Elements | nan   |\nYou can specify the parameter value in the following ways:\n- **<Parameter name=\"my_param\" type=\"string\">val</Parameter>** : Use **val** as the parameter value. If **val** is invalid, Apigee reports an exception.\n- **<Parameter name=\"my_param\" type=\"string\" ref=\"refval\"/>** : Resolve the **refval** flow variable at runtime  and use its value. Apigee reports an exception if the resolved **refval** value  is invalid or if **refval** is unresolved.\n- **<Parameter name=\"my_param\" type=\"string\" ref=\"refval\">val</Parameter>** : Resolve the **refval** flow variable at runtime and use its value. Apigee reports an exception if the  resolved **refval** value is invalid. If **refval** does not resolve,  Apigee uses **val** as the parameter value.\n- **<Parameter name=\"my_param\" type=\"json\">{\"name\":\"$#flowval#$\"}</Parameter>** : Use`$#` `` `#$`to pass flow variable values as a template argument in Parameter. Apigee resolves the **flowval** flow variable at runtime and uses its value. An exception is reported if the   resolved **flowval** value is invalid. **Note:** You can only pass template arguments for parameters of JSON or String datatype, and for parameter arrays of String array datatype. **Warning:** Template arguments enclosed within`{`and`}`are no longer identified as flow variables.\n- **<Parameter name=\"my_param\" type=\"json\">{\"name\":\"SUBSTITUTION_CHAR flowval SUBSTITUTION_CHAR\"}</Parameter>** : Wheredenotes the the value specified for the` [substitutionVariableChar](#para) `attribute of the`<Parameters>`parent element. Apigee resolves the **flowval** flow variable at runtime and uses its value. An exception is reported if the   resolved **flowval** value is invalid. **Note:** **substitutionVariableChar** can pass template arguments only for parameters of JSON or String datatype, and for parameter arrays of String array datatype. **Important:** We recommend you to add and update the` [substitutionVariableChar](#para) `attribute in the`<Parameters>`parent element for any existing delimiters in your Set Integration Request policy.\nThe `<Parameter>` element uses the following syntax:\n```\n<Parameters substitutionVariableChar=\"SUBSTITUTION_CHAR\">\u00a0 <Parameter name=\"PARAMETER_NAME\" type=\"PARAMETER_DATATYPE\">PARAMETER_VALUE</Parameter>\u00a0 <Parameter name=\"PARAMETER_NAME\" type=\"PARAMETER_DATATYPE\" ref=\"FLOW_VARIABLE_NAME\"/>\u00a0 <Parameter name=\"PARAMETER_NAME\" type=\"PARAMETER_DATATYPE\" ref=\"FLOW_VARIABLE_NAME\">PARAMETER_VALUE</Parameter>\u00a0 <Parameter name=\"PARAMETER_NAME\" type=\"json\">$#FLOW_VARIABLE_NAME#$</Parameter>\u00a0 <Parameter name=\"PARAMETER_NAME\" type=\"PARAMETER_DATATYPE\">SUBSTITUTION_CHAR FLOW_VARIABLE_NAME SUBSTITUTION_CHAR</Parameter></Parameters>\n```The following example declares `my_str_param` parameter as a string and sets  the value to `someText` .\n```\n<Parameters>\u00a0 <Parameter name=\"my_str_param\" type=\"string\">someText</Parameter></Parameters>\n```The following example declares `my_double_param` parameter as a double and assigns  the value of the `flow_var` flow variable to the parameter.\n```\n<Parameters>\u00a0 <Parameter name=\"my_double_param\" type=\"double\" ref=\"flow_var\"/></Parameters>\n```The following example sets value to the `my_int_param_1` integer parameter.\n```\n<Parameters>\u00a0 <Parameter name=\"my_int_param_1\" type=\"integer\" ref=\"flow_var_1\">96</Parameter></Parameters>\n```\nIn this example, if the `flow_var_1` flow variable resolves successfully, `my_int_param_1` is set to the value of the  flow variable. However, if `flow_var_1` fails to resolve, `my_int_param_1` is set to `96` .The following example sets values for the `my_json_param_1` and `my_json_param_2` JSON parameters.\n```\n<Parameters>\u00a0 <Parameter name=\"my_json_param_1\" type=\"json\" ref=\"flow_var_1\">{name:\"Apple\", color:\"Red\"}</Parameter>\u00a0 <Parameter name=\"my_json_param_2\" type=\"json\">{name:\"Banana\", color:\"Yellow\"}</Parameter></Parameters>\n```\nIn this example, if the `flow_var_1` flow variable resolves successfully, `my_json_param_1` is set to the value of the `flow_var_1` flow variable. However, if the `flow_var_1` fails to resolve, `my_json_param_1` is set to `{name:\"Apple\", color:\"Red\"}` . The `my_json_param_2` parameter is set to `{name:\"Banana\", color:\"Yellow\"}` as there  is no `ref` attribute specified.The following example sets the value for the `template_json_param` JSON parameter using the flow variable value passed in the default template.\n```\n\u00a0 <Parameters>\u00a0 \u00a0 <Parameter name=\"template_json_param\" type=\"json\">{\"name\":\"$#flow_var_1#$\"}</Parameter></Parameters>\u00a0 \n```\nIn this example, if the `flow_var_1` flow variable resolves successfully, `template_json_param` is set to the value of the `flow_var_1` flow variable. However, if the `flow_var_1` fails to resolve, Apigee throws an exception.The following example sets the value for the `template_json_param` JSON parameter using the **substitutionVariableChar** attribute.\n```\n<Parameters substitutionVariableChar=\"#\">\u00a0 \u00a0 <Parameter name=\"template_json_param\" type=\"json\">{\"name\":\"#flow_var_1#\"}</Parameter></Parameters>\u00a0 \n```\nIn this example, if the `flow_var_1` flow variable resolves successfully, `template_json_param` is set to the value of the `flow_var_1` flow variable. However, if the `flow_var_1` fails to resolve, Apigee throws an exception.\nThe following table describes the attributes of `<Parameter>` :\n| Attribute | Required? | Type | Description                                                                                                                      |\n|:------------|:------------|:-------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| name  | Required | String | Name of the parameter.                                                                                                                   |\n| type  | Required | String | Data type of the parameter. The supported types are integer, string, boolean, double, and json.                                                                                                |\n| ref   | Optional | String | Specifies the flow variable from which Apigee should read the parameter value. Apigee uses the following criteria to set the parameter value: If the flow variable resolves at runtime and is valid, Apigee uses the value of the flow variable. If the flow variable resolves at runtime but is invalid, Apigee reports an exception. If the flow variable doesn't resolve at runtime, Apigee uses the <Parameter> element value. If the element value is invalid, Apigee reports an error. |\nSpecifies an input parameter array.\n| 0    | 1   |\n|:---------------|:-------------|\n| Default Value | nan   |\n| Required?  | Optional  |\n| Type   | Complex type |\n| Parent Element | <Parameters> |\n| Child Elements | <Value>  |\nThe `<Parameters>` element can have multiple `<ParameterArray>` elements within it. For a parameter array you can set the value of the array elements either by specifying the actual value or by specifying a flow variable in the `ref` attribute. If you specify a flow variable, the array elements are set to the value of the flow variable. The examples in this section describe the various ways in which you can configure the `<ParameterArray>` element.\nThe `<ParameterArray>` element uses the following syntax:\n```\n<Parameters>\u00a0 <ParameterArray name=\"ARRAY_NAME\" type=\"ARRAY_DATATYPE\" ref=\"FLOW_VARIABLE_NAME\">\u00a0 \u00a0 <Value ref=\"FLOW_VARIABLE_NAME\"/>\u00a0 \u00a0 <Value ref=\"FLOW_VARIABLE_NAME\">PARAMETER_VALUE</Value>\u00a0 \u00a0 <Value>PARAMETER_VALUE</Value>\u00a0 </ParameterArray>\u00a0 <ParameterArray name=\"ARRAY_NAME\" type=\"ARRAY_DATATYPE\" ref=\"FLOW_VARIABLE_NAME\"/>\u00a0 <ParameterArray name=\"ARRAY_NAME\" type=\"ARRAY_DATATYPE\">\u00a0 \u00a0 <Value ref=\"FLOW_VARIABLE_NAME\"/>\u00a0 \u00a0 <Value ref=\"FLOW_VARIABLE_NAME\">PARAMETER_VALUE</Value>\u00a0 \u00a0 <Value>PARAMETER_VALUE</Value>\u00a0 </ParameterArray><Parameters/>\n```The following example declares `my_array_param` as an integer array and sets the value of the array elements to `1` , `2` , and `3` :\n```\n<Parameters>\u00a0 <ParameterArray name=\"my_array_param\" type=\"integer\">\u00a0 \u00a0 <Value>1</Value>\u00a0 \u00a0 <Value>2</Value>\u00a0 \u00a0 <Value>3</Value>\u00a0 </ParameterArray><Parameters/>\n```The following example declares `my_array_param` as a double array where:- First element is set to the value of the`flow_var_1`flow variable.\n- Second element is set to`3.0`.\n```\n<Parameters>\u00a0 <ParameterArray name=\"my_array_param\" type=\"double\">\u00a0 \u00a0 <Value ref=\"flow_var_1\"/>\u00a0 \u00a0 <Value>3.0</Value>\u00a0 </ParameterArray><Parameters/>\n```The following example declares `my_array_param` as a boolean array and sets it to the value of the `flow_var_1` flow variable.\n```\n<Parameters>\u00a0 <ParameterArray name=\"my_array_param\" type=\"boolean\" ref=\"flow_var_1\">\u00a0 \u00a0 <Value>true</Value>\u00a0 \u00a0 <Value>false</Value>\u00a0 \u00a0 <Value>false</Value>\u00a0 </ParameterArray><Parameters/>\n```\nIn this example, if `flow_var_1` resolves successfully, `my_array_param` is set to the values of the `flow_var_1` array. However, if `flow_var_1` fails to resolve, the `my_array_param` array is set to the values of the `Value` elements.The following example declares `my_array_param` as a JSON array and sets it to the value of the `flow_var_1` flow variable.\n```\n<Parameters>\u00a0 <ParameterArray name=\"my_array_param\" type=\"json\" ref=\"flow_var_1\"/><Parameters/>\n```\nIn this example, if `flow_var_1` resolves successfully, `my_array_param` is set to the values of the `flow_var_1` array. However, if `flow_var_1` fails to resolve, Apigee reports an exception.The following example declares `my_array_param` as a string array and sets it to the values of the `flow_var_1` flow variable.\n```\n<Parameters>\u00a0 <ParameterArray name=\"my_array_param\" type=\"string\" ref=\"flow_var_1\">\u00a0 \u00a0 <Value ref=\"flow_var_2\"/>\u00a0 \u00a0 <Value>test_string</Value>\u00a0 </ParameterArray><Parameters/>\n```\nIn this example, if `flow_var_1` resolves successfully, `my_array_param` is set to the values of the `flow_var_1` array. Only if `flow_var_1` fails to resolve, `my_array_param` is set to the values specified in the `<Value>` elements.\nThe following table describes the attributes of `<ParameterArray>` :\n| Attribute | Required? | Type | Description                                                                                                          |\n|:------------|:------------|:-------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| name  | Required | String | Name of the parameter array.                                                                                                      |\n| type  | Required | String | Data type of the parameter array. The supported types are integer, string, boolean, and double.                                                                                    |\n| ref   | Optional | String | Specifies the flow variable from which Apigee should read the array values. Apigee uses the following criteria to set the parameter value: If the flow variable resolves at runtime and is valid, Apigee uses the value of the flow variable. If the flow variable resolves at runtime but is invalid, Apigee reports an exception. If the flow variable doesn't resolve at runtime, Apigee uses the values specified in the <Value> elements. |\nSpecifies the value of an array element.\n| 0    | 1    |\n|:---------------|:-----------------|\n| Default Value | nan    |\n| Required?  | Optional   |\n| Type   | String   |\n| Parent Element | <ParameterArray> |\n| Child Elements | nan    |\nEach element of the array must be a separate `<Value>` element. You can specify the value in the following ways:\n- **<Value>val</Value>** : Use **val** as the element value. If **val** is invalid, Apigee reports an exception.\n- **<Value ref=\"refval\"/>** : Resolve the **refval** flow variable at runtime  and use its value. Apigee reports an exception if the resolved **refval** value  is invalid or if **refval** is unresolved.\n- **<Value ref=\"refval\">val</Value>** : Resolve the **refval** flow variable at runtime and use its value. Apigee reports an exception if the  resolved **refval** value is invalid. If **refval** does not resolve,  Apigee uses **val** as the element value.\n- **<Value>val1 $#flowval#$</Value>** : Use`$#` `` `#$`to pass flow variable values as a template argument in Value. Apigee resolves the **flowval** flow variable at runtime and uses its value. An exception is reported if the   resolved **flowval** value is invalid. **Note: ** You can only specify template arguments as Value for parameter arrays of string data type. **Warning:** Template arguments enclosed within`{`and`}`are no longer identified as flow variables.\nThe `<Value>` element uses the following syntax:\n```\n<ParameterArray name=\"ARRAY_NAME\" type=\"ARRAY_DATATYPE\" ref=\"FLOW_VARIABLE_NAME\">\u00a0 <Value>PARAMETER_VALUE</Value>\u00a0 <Value ref=\"FLOW_VARIABLE_NAME\"/>\u00a0 <Value ref=\"FLOW_VARIABLE_NAME\">PARAMETER_VALUE</Value></ParameterArray>\n```The following example declares `my_array_param` as an integer parameter array with values `1` , `2` , and `3` :\n```\n<ParameterArray name=\"my_array_param\" type=\"integer\">\u00a0 <Value>1</Value>\u00a0 <Value>2</Value>\u00a0 <Value>3</Value></ParameterArray>\n```The following example declares `my_array_param` as a string parameter array with values of the `flow_var_1` and `flow_var_2` flow variables:\n```\n<ParameterArray name=\"my_array_param\" type=\"string\">\u00a0 <Value ref=\"flow_var_1\"/>\u00a0 <Value ref=\"flow_var_2\"/></ParameterArray>\n```The following example declares `my_array_param` as a string parameter array:\n```\n<ParameterArray name=\"my_array_param\" type=\"string\">\u00a0 \u00a0<Value ref=\"flow_var_1\">string_1</Value>\u00a0 \u00a0<Value ref=\"flow_var_2\">string_2</Value></ParameterArray>\n```\nIn this example, if the  flow variable resolves successfully, the array element value is set to the value of the `flow_var_1` flow variable. However, if `flow_var_1` fails to resolve,  the array element value is set to `string_1` .The following example sets the value for the `template_strArray_param` string array parameter using the flow variable value passed in a template.\n```\n\u00a0 <Parameters>\u00a0 \u00a0 <ParameterArray name=\"template_strArray_param\" type=\"string\">\u00a0 \u00a0 <Value>apple $#flow_var_1#$</Value>\u00a0 \u00a0 </ParameterArray>\u00a0 </Parameters>\u00a0 \n```\nIn this example, if the  flow variable resolves successfully, the array element value is set to the value of the `flow_var_1` flow variable. However, if `flow_var_1` fails to resolve,  Apigee throws an exception.\nThe following table describes the attributes of `<Value>` :\n| Attribute | Required? | Type | Description                                                                                                                     |\n|:------------|:------------|:-------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ref   | Optional | String | Specifies the flow variable from which Apigee should read the parameter value. Apigee uses the following criteria to set the parameter value: If the flow variable resolves at runtime and is valid, Apigee uses the value of the flow variable. If the flow variable resolves at runtime but is invalid, Apigee reports an exception. If the flow variable doesn't resolve at runtime, Apigee uses the <Value> element's value. If the element value is invalid, Apigee reports an error. |\n**Note:** The`<Value>`element can't be empty.\n### <Request>\nSpecifies the flow variable name for saving the request.\n**Note:** If you are using an integration endpoint instead of the [IntegrationCallout policy](/apigee/docs/api-platform/reference/policies/integration-callout-policy) policy, do not specify the`<Request>`element in the SetIntegrationRequest policy.\nAfter the policy executes, it creates a new [request message](/apigee/docs/api-platform/reference/variables-reference#message) object, and saves the object in the `` variable which you can query to read the request.\nIf you do not specify a flow variable name, the policy saves the request in the [request message](/apigee/docs/api-platform/reference/variables-reference#request) , overriding the existing request message if any.\n| 0    | 1      |\n|:---------------|:------------------------|\n| Default Value | request     |\n| Required?  | Optional    |\n| Type   | String     |\n| Parent Element | <SetIntegrationRequest> |\n| Child Elements | nan      |\nThe `<Request>` element uses the following syntax:\n```\n<Request>FLOW_VARIABLE_NAME</Request>\n```The following example saves the request object in the `my_request_var` flow variable:\n```\n<Request>my_request_var</Request>\n```\n## Error codes\nThis section describes the fault codes, error messages, and the fault variables  set by Apigee when this policy triggers an error. This information is essential if you are developing fault rules to handle faults. To learn more, see [What you need to know about policy errors](/apigee/docs/api-platform/fundamentals/what-you-need-know-about-policy-errors) and [Handling faults](/apigee/docs/api-platform/fundamentals/fault-handling) .\n### Runtime errors\nThese errors can occur when the policy executes.\n| Fault code                 | HTTP status | Cause                                                                                                                                                                    |\n|:------------------------------------------------------------------------------|--------------:||\n| steps.setintegrationrequest.EmptyParameterArray        |   500 | This error occurs when the <ParameterArray> element has the name and type attributes, but doesn't have the ref attribute or a <Value> element.                                                                                                                                 |\n| steps.setintegrationrequest.EmptyParameterArrayValue       |   500 | This error occurs when the <Value> element is empty and the ref attribute is not set.                                                                                                                                               |\n| steps.setintegrationrequest.InvalidResolvedFlowVariable      |   500 | This error occurs when the flow variable specified in the ref attribute of an element fails to resolve to a valid value. For the ProjectId, IntegrationName, or the ApiTrigger elements, this error occurs if the flow variable resolves to a null, an empty string, or an invalid data type. A valid value for these elements is as follows: ProjectId: See the naming requirements for Project ID in the Before you begin section. IntegrationName: See the naming requirements for the IntegrationName element. ApiTrigger: The name should start with api_trigger/. For the ParameterArray element, this error occurs if the flow variable resolves to an empty string. |\n| steps.setintegrationrequest.MismatchedTypeAndResolvedRef      |   500 | This error occurs when the flow variable specified in the ref attribute of the <Parameter> element resolves, but the flow variable value's data type doesn't match the data type specified in the type attribute.                                                                                                                |\n| steps.setintegrationrequest.MismatchedTypeAndResolvedRefOfParameterArray  |   500 | This error occurs when the flow variable specified in the ref attribute of the <ParameterArray> element resolves, but the flow variable value's data type doesn't match with the data type specified in the type attribute.                                                                                                              |\n| steps.setintegrationrequest.MismatchedTypeAndResolvedRefOfParameterArrayValue |   500 | This error occurs when the flow variable specified in the ref attribute of the <Value> element resolves, but the flow variable value's data type doesn't match with the data type specified in the type attribute of its parent element (<ParameterArray>).                                                                                                      |\n| steps.setintegrationrequest.RequestVariableNotMessageType      |   500 | This error occurs when the flow variable specified by the Request element is not of message type.                                                                                                                                            |\n| steps.setintegrationrequest.RequestVariableNotRequestMessageType    |   500 | This error occurs when the flow variable specified by the Request element is not of Request message type.                                                                                                                                          |\n| steps.setintegrationrequest.UnresolvedVariable        |   500 | This error occurs when Apigee can't resolve the flow variables specified in the <Parameter>, <ParameterArray>, or the <Value> elements.                                                                                                                                   |\n### Fault variables\nWhenever there are execution errors in a policy, Apigee generates error messages. You can view  these error messages in the error response. Many a time, system generated error messages might not be relevant  in the context of your product. You might want to customize the error messages based on the  type of error to make the messages more meaningful.\nTo customize the error messages, you can use either fault rules or the RaiseFault policy. For  information about differences between fault rules and the RaiseFault policy, see [FaultRules vs. the RaiseFault policy](/apigee/docs/api-platform/fundamentals/fault-handling#rulesvraisefault) .  You must check for conditions using the `Condition` element in both the fault rules and the RaiseFault policy.  Apigee provides fault variables unique to each policy and the values of the fault variables are set when a policy triggers runtime errors.  By using these variables, you can check for specific error conditions and take appropriate actions. For more information about checking error  conditions, see [Building conditions](/apigee/docs/api-platform/fundamentals/fault-handling#buildingconditions) .\nThe following table describes the fault variables specific to this policy.\n| Variables        | Where                                 | Example              |\n|:-----------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------------------------------|\n| fault.name        | The fault.name can match to any of the faults listed in the Runtime errors table. The fault name is the last part of the fault code. | fault.name Matches \"UnresolvedVariable\"      |\n| SetIntegrationRequest.POLICY_NAME.failed | POLICY_NAME is the user-specified name of the policy that threw the fault.               | SetIntegrationRequest.set-integration-request-1.failed = true |\n[What you need to know about policy errors](/apigee/docs/api-platform/fundamentals/what-you-need-know-about-policy-errors)\n## Related topics\nIf you want to learn more about Apigee's Integration feature, see [What is Apigee Integration?](/apigee/docs/api-platform/integration/what-is-apigee-integration)", "guide": "Apigee"}