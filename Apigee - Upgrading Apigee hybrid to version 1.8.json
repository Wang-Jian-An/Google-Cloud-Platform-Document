{"title": "Apigee - Upgrading Apigee hybrid to version 1.8", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Upgrading Apigee hybrid to version 1.8\nYou are currently viewing version 1.8 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\n**Note: ** This procedure covers upgrading from Apigee hybrid version 1.7.x or from previous releases of Apigee hybrid version 1.8.x to Apigee hybrid version 1.8.8.Use the same procedures for minor version upgrades (for example version 1.7  to 1.8) and for patch release upgrades (for example  1.8.0 to 1.8.8).If you are upgrading from Apigee hybrid version 1.6 or older, you must first upgrade to  hybrid version 1.7 before upgrading to version 1.8.8.  See the instructions for [Upgrading Apigee hybrid to version 1.7](/apigee/docs/hybrid/v1.7/upgrade) .If you are already on hybrid v1.8.0 and are looking to migrate to  Apigee ingress gateway from Anthos Service Mesh, see [ Migrating to Apigee ingress gateway](/apigee/docs/hybrid/v1.8/migrating-to-apigee-ingress) .\n", "content": "## \n Introducing Apigee ingress gateway\nStarting in version 1.8, Apigee hybrid offers a new feature to manage the ingress gateway for your hybrid installation, . Anthos Service Mesh is no longer a prerequisite for hybrid installation. With Apigee ingress gateway, Apigee will stop supplying routing configuration to Anthos Service Mesh. After the upgrade, you have to migrate the traffic to the new Apigee ingress gateway before you can start using the feature.\nApigee uses a small subset of Anthos Service Mesh features for the ingress gateway.  Starting with hybrid version 1.8 Apigee hybrid includes an ingress gateway which is  installed and upgraded as part of Apigee hybrid upgrades. Therefore you do not need  to build expertise around Anthos Service Mesh to install, upgrade, and manage Apigee  hybrid. Issues around ingress gateway versions and compatibility with Apigee hybrid  releases are handled automatically.\nTwo scenarios for migrating are:\n- **Multi-cluster or multi-region migration** (recommended):Before switching to a new Ingress for Apigee, drain all the traffic to another cluster or  region from the cluster you are migrating. This will give you time to test if the new  Apigee ingress gateway is working as expected. Then shift the traffic back to the upgraded  cluster.\n- **In-place upgrade** (not recommended in production environments):During the upgrade Apigee will bring up the new ingress gateway with an IP address you specify.  You can then test if the new Apigee ingress gateway is working as expected, and then shift  traffic to the new ingress. There might be downtime during this upgrade.\nWhen upgrading Apigee hybrid to version 1.8, you must configure Apigee ingress gateway in your overrides file. After upgrading, you control which type of ingress gateway your clusters will use by directing the A or CNAME records at your registrar to the IP address for Apigee ingress gateway or for Anthos Service Mesh.\n**Caution:** Because Apigee ingress gateway is a new feature which introduces significant change, Apigee recommends you upgrade and test a non-production installation first, before you upgrade a production installation.\n## \n Upgrading to version 1.8.8 overview\nUpgrading to Apigee hybrid version 1.8 may require downtime.When upgrading the Apigee controller to version 1.8.8, all Apigee  deployments undergo a rolling restart. To minimize downtime in production hybrid environments  during a rolling restart, make sure you are running at least two clusters (in the same or  different region/data center). Divert all production traffic to a single cluster and take the  cluster you are about to upgrade offline, and then proceed with the upgrade process. Repeat  the process for each cluster.Apigee recommends that you upgrade all clusters as soon as possible to reduce the chances   of production impact. There is no time limit on when all remaining clusters must be upgraded   after the first one is upgraded. However, until all remaining clusters are upgraded the   following operations   will be impacted:- Cassandra backup and restore cannot work with mixed versions. For example, a backup    from Hybrid 1.7 cannot be used to restore a Hybrid    1.8 instance.\n- Cassandra data streaming will not work between mixed Hybrid versions. Therefore, your    Cassandra clusters cannot scale horizontally.\n- Region expansion and decommissioning will be impacted, because these operations depend on    Cassandra data streaming.\nThe procedures for upgrading Apigee hybrid are organized in the following sections:\n- [Prepare to upgrade](#prepare) .\n- [Install hybrid runtime version 1.8.8](#install-runtime) .\n- For the ingress gateway, pick one of the following options:- (Recommended) Use the [new Apigee ingress gateway](#introducing) , follow the steps in [Switch traffic from Anthos Service Mesh to Apigee ingress gateway](#switch-to-ingress) .\n- Continue using Anthos Service Mesh for your ingress gateway.\n## \n Prerequisite\nThese upgrade instructions assume you have Apigee hybrid version 1.7.x or an earlier patch release of version 1.8.x installed and wish to upgrade it to version 1.8.8. If you are updating from an earlier  version see the instructions for [Upgrading  Apigee hybrid to version 1.7](/apigee/docs/hybrid/v1.7/upgrade) .\nIf you prefer to continue using Anthos Service Mesh, you must ensure that Anthos Service Mesh is upgraded to a supported version. See the [Supported platforms](/apigee/docs/hybrid/supported-platforms#components) table for supported versions of Anthos Service Mesh.\n## \n Prepare to upgrade to version 1.8\n### \n Back up your hybrid installation (recommended)\n- These instructions use the environment variablefor the directory  in your file system where you have installed`apigeectl`. If needed, change directory  into your`apigeectl`directory and define the variable with the following command:\n```\nexport APIGEECTL_HOME=$PWD\necho $APIGEECTL_HOME\n``````\nexport APIGEECTL_HOME=$PWD\necho $APIGEECTL_HOME\n``````\nset APIGEECTL_HOME=%CD%\necho %APIGEECTL_HOME%\n```\n- Make a backup copy of your version 1.7`$APIGEECTL_HOME/`directory. For example:```\ntar -czvf $APIGEECTL_HOME/../apigeectl-v1.7-backup.tar.gz $APIGEECTL_HOME\n```\n- Back up your Cassandra database following the instructions in [Cassandra backup and recovery](/apigee/docs/hybrid/v1.8/cassandra-backup-overview) \n### \n Add the Cloud Trace Agent role to the service account for the Apigee runtime. (Optional)\nOptional: If you plan to use [Cloud trace](/trace/docs/overview) and you have not already performed this step on your hybrid v1.7 installation, ensure your service account for your Apigee runtime services has the **Cloud Trace Agent** Google role. ( `roles/cloudtrace.agent` ).\nFor production environments, this is usually the `apigee-runtime` service account. For non-production environments, this is usually the `apigee-non-prod` service account.\nYou can add the role in the [Cloud console > IAM & Admin > Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) UI or with the following commands:\n- Get the email address for your service account with the following command:\n```\ngcloud iam service-accounts list --filter \"apigee-runtime\"\n```\nIf it matches the pattern `apigee-runtime@` ` **$ORG_NAME** ` `.iam.gserviceaccount.com` ,    you can use that pattern in the next step.```\ngcloud iam service-accounts list --filter \"apigee-non-prod\"\n```\nIf it matches the pattern `apigee-non-prod@` ` **$ORG_NAME** ` `.iam.gserviceaccount.com` ,    you can use that pattern in the next step.\n- Assign the **Cloud Trace Agent** role to the service account:\n```\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n --member=\"serviceAccount:apigee-runtime@$PROJECT_ID.iam.gserviceaccount.com\" \\\n --role=\"roles/cloudtrace.agent\"\n``````\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n --member=\"serviceAccount:apigee-non-prod@$PROJECT_ID.iam.gserviceaccount.com\" \\\n --role=\"roles/cloudtrace.agent\"\n``````\ngcloud projects add-iam-policy-binding hybrid-example-project \\\n --member=\"serviceAccount:apigee-runtime@hybrid-example-project.iam.gserviceaccount.com\" \\\n --role=\"roles/cloudtrace.agent\"\n```\nWhere: is the name of the Google Cloud project where Apigee hybrid is installed. **Note:** If your installation uses a custom name for the service account,   substitute that name for`apigee-runtime`or`apigee-non-prod`in the   command.\n### \n Prepare to install Apigee ingress gateway\nTo install Apigee ingress gateway as part of the upgrade. You need to add the following [ingressGateways](/apigee/docs/hybrid/v1.8/config-prop-ref#ingressgateways) property to your overrides file.\n```\ningressGateways:\n- name: INGRESS_NAME\n replicaCountMin: REPLICAS_MIN\n replicaCountMax: REPLICAS_MAX\n resources:\n requests:\n  cpu: CPU_COUNT_REQ\n  memory: MEMORY_REQ\n limits:\n  cpu: CPU_COUNT_LIMIT\n  memory: MEMORY_LIMIT\n svcAnnotations: # optional. See Known issue 243599452.\n SVC_ANNOTATIONS_KEY: SVC_ANNOTATIONS_VALUE\n svcLoadBalancerIP: SVC_LOAD_BALANCER_IP # optional\n``````\ningressGateways:\n- name: prod1\n replicaCountMin: 2\n replicaCountMax: 100\n resources:\n requests:\n  cpu: 1\n  memory: 1Gi\n limits:\n  cpu: 2\n  memory: 2Gi \n```\n- is the name of the ingress deployment. This can be any name that meets  the following requirements:- Have a maximum length of 17 characters\n- Contain only lowercase alphanumeric characters, '-' or '.'\n- Start with an alphanumeric character\n- End with an alphanumeric character\nSee [ingressGateways[].name](/apigee/docs/hybrid/v1.8/config-prop-ref#ingressgateways-name) in the Configuration property reference\n- andare the minimum and maximum replica counts for  Apigee ingress gateway in your installation. For more information and default settings, see [ingressGateways[].replicaCountMin](/apigee/docs/hybrid/v1.8/config-prop-ref#ingressgateways-replicacountmin) and [ingressGateways[].replicaCountMax](/apigee/docs/hybrid/v1.8/config-prop-ref#ingressgateways-replicacountmax) in the Configuration property reference.\n- andare the CPU and memory request for each  replica of Apigee ingress gateway in your installation.Only set these properties if you have previously set them for your  Anthos Service Mesh ingress gateway, for example in your`overlay.yaml`file.For more information and default settings, see [ingressGateways[].resources.requests.cpu](/apigee/docs/hybrid/v1.8/config-prop-ref#ingressgateways-resources-requests-cpu) and [ingressGateways[].resources.requests.memory](/apigee/docs/hybrid/v1.8/config-prop-ref#ingressgateways-resources-requests-memory) in the Configuration property reference.\n- andThe maximum CPU and memory limits for  each replica of Apigee ingress gateway in your installation.Only set these properties if you have previously set them for your  Anthos Service Mesh ingress gateway, for example in your`overlay.yaml`file.For more information and default settings, see [ingressGateways[].resources.limits.cpu](/apigee/docs/hybrid/v1.8/config-prop-ref#ingressgateways-resources-limits-cpu) and [ingressGateways[].resources.limits.memory](/apigee/docs/hybrid/v1.8/config-prop-ref#ingressgateways-resources-limits-memory) in the Configuration property reference.\n- and(optional): **Note:** The`ingressGateways[].svcAnnotations`field in`overrides.yaml`is not working as expected. See [Known issue 243599452](/apigee/docs/release/known-issues#243599452) This is a key-value pair that provides  annotations for your default ingress service. Annotations are used by your cloud platform to  help configure your hybrid installation, for example setting the loadbalancer type to  either internal or external. For example:```\ningressGateways:\n svcAnnotations:\n networking.gke.io/load-balancer-type: \"Internal\"\n```Annotations vary from platform to platform. Refer to your platform  documentation for required and suggested annotations. **Note:** You do not need to set`Annotations`if you are creating your own   Kubernetes service for ingress deployment as documented in [Expose Apigee ingress gateway](/apigee/docs/hybrid/v1.8/install-expose-apigee-ingress) .See [ingressGateways[].svcAnnotations](/apigee/docs/hybrid/v1.8/config-prop-ref#ingressgateways-svcannotations) in the Configuration property reference.\n- (optional) Allows you to assign a static IP address for your  load balancer. On platforms that support specifying the load balancer IP address, the load  balancer will be created with this IP address. On platforms that do not allow you to specify the  load balancer IP address, this property is ignored.If you do not have a static IP address allocated for your load balancer, leave this property  out of your overrides file. **Caution:** Make sure not to specify the same IP address as the current  istio-ingressgateway. This could cause problems while that service is still on the cluster. **Note:** You do not need to set`LoadBalancerIP`if you are creating your own  Kubernetes service for ingress deployment as documented in [Expose Apigee ingress gateway](/apigee/docs/hybrid/v1.8/install-expose-apigee-ingress) .See [ingressGateways[].svcLoadBalancerIP](/apigee/docs/hybrid/v1.8/config-prop-ref#ingressgateways-svcloadbalancerip) in the Configuration property reference.\n### \n Make additional changes to your overrides file to enable or disable optional v1.8 features\nAdd the following properties to your `overrides.yaml` file to enable new features in hybrid v1.8. These features are optional.\n- Org-scoped UDCA is now on by default. Using a single UDCA deployment to handle traffic for all environments  prevents under-utilization of UDCA pods and increases availability of node resources for other Apigee components.  Org-scoped UDCA uses a single service account for all environments,`apigee-udca`.If you are using different service accounts for UDCA in different environments,  be aware that it will now use the service account specified at the org level in your overrides  file with `udca:serviceAccountPath` , instead of the ones specified at the env level  with `envs:udca:serviceAccountPath` .Apigee hybrid v 1.8 supports environment-scoped UDCA. To keep per-environment UDCA, set `orgScopedUDCA: false` . **Note** : Support for environment-scoped UDCA will not be available in future releases of  Apigee hybrid.See [orgScopedUDCA](/apigee/docs/hybrid/v1.8/config-prop-ref#orgscopedudca) in the Configuration   properties reference.\n- Enable`validateOrg`to require strict validation that the Apigee organization and  environment are active and work with the Google Cloud Platform project specified in your`overrides`file.```\nvalidateOrg: true\n``` **Note:** Apigee hybrid supports not using strict org validation. To  turn the feature off, set`validateOrg: false`.See [validateOrg in the Configuration  properties reference](/apigee/docs/hybrid/v1.8/config-prop-ref#validateorg) .## \n Install the hybrid 1.8.8 runtime\n**Caution: ** Do not create new environments during the upgrade process.\n- Be sure you are in the hybrid base directory (the parent of the directory where  the`apigeectl`executable file is located):```\ncd $APIGEECTL_HOME/..\n```\n- Download the release package for your operating system using the following command.  Be sure to select your platform in the following table:\n **Linux 64 bit:** \n```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.8.8/apigeectl_linux_64.tar.gz\n``` **Mac 64 bit:** \n```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.8.8/apigeectl_mac_64.tar.gz\n``` **Windows 64 bit:** \n```\ncurl -LO ^\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/1.8.8/apigeectl_windows_64.zip\n```\n- Rename your current`apigeectl/`directory to a backup directory name. For example:\n```\nmv $APIGEECTL_HOME/ $APIGEECTL_HOME-v1.7/\n``````\nmv $APIGEECTL_HOME/ $APIGEECTL_HOME-v1.7/ \n``````\nrename %APIGEECTL_HOME% %APIGEECTL_HOME%-v1.7 \n```\n- Extract the downloaded gzip file contents into your hybrid base directory.  The hybrid base directory is the directory where the renamed `apigeectl-v1.7` directory is located:\n```\ntar xvzf filename.tar.gz -C ./\n``````\ntar xvzf filename.tar.gz -C ./\n``````\ntar xvzf filename.zip -C ./\n```\n- The tar contents are, by default, expanded into a directory with the version and platform in  its name. For example: `./apigeectl_1.8.8-xxxxxxx_linux_64` . Rename that directory  to `apigeectl` using the following command:\n```\nmv apigeectl_1.8.8-xxxxxxx_linux_64 apigeectl\n``````\nmv apigeectl_1.8.8-xxxxxxx_mac_64 apigeectl\n``````\nrename apigeectl_1.8.8-xxxxxxx_windows_64 apigeectl\n```\n- Change to the`apigeectl`directory:```\ncd ./apigeectl\n```This directory is the `apigeectl` home directory. It is where  the `apigeectl` executable command is located.\n- These instructions use the environment variable` **$APIGEECTL_HOME** `for the directory  in your file system where the`apigeectl`utility is installed. If needed, change directory  into your`apigeectl`directory and define the variable with the following command:\n```\nexport APIGEECTL_HOME=$PWD\n```\n```\necho $APIGEECTL_HOME\n``````\nexport APIGEECTL_HOME=$PWD\n```\n```\necho $APIGEECTL_HOME\n``````\nset APIGEECTL_HOME=%CD%\n```\n```\necho %APIGEECTL_HOME%\n```\n- Verify the version of`apigeectl`with the`version`command:```\n./apigeectl version\n``````\nVersion: 1.8.8\n```\n- Move to the`` `/hybrid-files`directory. The`hybrid-files`directory is where configuration files such as the overrides file, certs, and service accounts  are located. For example:```\ncd $APIGEECTL_HOME/../hybrid-files\n```\n- Verify that`kubectl`is set to the correct context using the following command.  The current context should be set to the cluster in which you are upgrading Apigee hybrid.```\nkubectl config get-contexts | grep \\*\n```\n- In the`hybrid-files`directory:- Update the following symbolic links to`$APIGEECTL_HOME`. These links allow you to run the newly installed`apigeectl`command from inside the`hybrid-files`directory:```\nln -nfs $APIGEECTL_HOME/tools tools\nln -nfs $APIGEECTL_HOME/config config\nln -nfs $APIGEECTL_HOME/templates templates\nln -nfs $APIGEECTL_HOME/plugins plugins\n```\n- To check that the symlinks were created correctly, execute the following command and make  sure the link paths point to the correct locations:```\nls -l | grep ^l\n```\n- Do a dry run initialization to check for errors:```\n${APIGEECTL_HOME}/apigeectl init -f OVERRIDES_FILE --dry-run=client\n```Where is the name of your overrides file, for example `./overrides/overrides.yaml` . **Tip:** You can replace``in the code   sample above with the name and path to your overrides file, and every instance on this page   will be replaced.\n- If there are no errors, initialize hybrid 1.8.8. This command  also installs and configures Apigee ingress gateway:```\n$APIGEECTL_HOME/apigeectl init -f OVERRIDES_FILE\n```\n- Check the initialization status:```\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```On success, the output says: `All containers ready.` **Known issue:** After you run`init`and confirm that`check-ready`succeeds,   you may notice, if you view the pods,   that the Cassandra schema validation is in an error state. ** This state is considered a known issue (#245664917)\n  and is harmless** . You can safely ignore the error and go on to the next step:`apigeectl apply`.As a further check, you can also run this command to check ApigeeDataStore status:```\nkubectl describe apigeeds -n apigee\n```In the output, look for `State: running` .\n- Check for errors with a dry run of the`apply`command using the`--dry-run`flag:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --dry-run=client\n```\n- If there are no errors, apply your overrides. Select and follow the instructions for production environments or  non-prod environments, depending on your installation.During the upgrade process each component will perform a rolling restart.   Therefore, for production environments, it is best to apply the upgrade to one component at   a time.\nFor production environments you should upgrade each hybrid component individually, and    check the status of the upgraded component before proceeding to the next component.- Be sure you are in the`hybrid-files`directory.\n- Apply your overrides to upgrade Cassandra:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --datastore\n```\n- Check completion:```\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n``` **Tip:** If`check-ready`fails, you can get more     information about your pods with:```\nkubectl -n NAMESPACE get pods\n```Where is your Apigee hybrid namespace.Proceed to the next step only when the pods are ready.\n- Apply your overrides to upgrade Telemetry components and check completion:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --telemetry\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\n- Bring up Redis components:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --redis\n```\n- Apply your overrides to upgrade the org-level components (MART, Watcher and Apigee    Connect) and check completion:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --org\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\n- Apply your overrides to upgrade your environments. You have two choices:- **Environment by environment** : Apply your overrides to one environment at a time and check completion. Repeat     this step for each environment:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --env ENV_NAME\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```Where is the name of the environment you are upgrading.\n- **All environments at one time** : Apply your overrides to all environments at once and check completion:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --all-envs\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\n- Apply your overrides to upgrade the`virtualhosts`components and check completion:```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE --settings virtualhosts\n``````\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```\nIn most non-production, demo, or experimental environments, you can apply the overrides    to all components at once. If your non-production environment is large and complex or    closely mimics a production environment, you may want to use the instructions for    upgrading production environments.- Be sure you are in the`hybrid-files`directory.\n- ```\n$APIGEECTL_HOME/apigeectl apply -f OVERRIDES_FILE\n```\n- Check the status:```\n$APIGEECTL_HOME/apigeectl check-ready -f OVERRIDES_FILE\n```## \n Upgrade your Kubernetes version\nUpgrade your Kubernetes platform to the versions supported by hybrid 1.8.  Follow your platform's documentation if you need help.\n## \n Switch traffic from Anthos Service Mesh to Apigee ingress gateway\nTo switch your traffic to Apigee ingress gateway:\n- Expose the Apigee ingress gateway. Follow the procedures in [Expose Apigee ingress gateway](/apigee/docs/hybrid/v1.8/install-expose-apigee-ingress) .\n- Test your new ingress gateway by calling a proxy. Ideally, test all crucial proxies you currently have deployed.\n- To switch the traffic, update your DNS records to point to the IP address for your new Apigee ingress gateway.  Depending on your DNS provider, you might be able to gradually shift traffic to the new endpoint.\n- Ensure all the runtime traffic is working by monitoring your dashboards. Only proceed to the next  step if everything is working as expected. Make sure no traffic is going through your old  ingress gateway (Anthos Service Mesh), as the DNS update may be slow to propagate because of DNS caching.\n- To stop Apigee from supplying configuration to Anthos Service Mesh, follow the steps in [Stop supplying configuration to ASM](/apigee/docs/hybrid/v1.8/managing-ingress#stop-supplying-configuration) in  the Managing Apigee ingress gateway guide.\n- Retest and monitor API proxy traffic.\n- Follow the instructions in the Anthos Service Mesh documentation to [Uninstall Anthos Service Mesh](https://cloud.google.com/service-mesh/docs/uninstall) from  the cluster.## \n Upgrade Anthos Service Mesh to version 1.15\nPerform this step only if you intend to continue using Anthos Service Mesh for your ingress gateway instead of using [Apigee ingress gateway](#introducing) .\nYou may experience a brief interruption of incoming traffic (typically less  than two seconds) when you upgrade Anthos Service Mesh. If you are running hybrid in two or more clusters, you  can avoid this interruption by upgrading one cluster at a time. Divert all production traffic  away from the cluster you are about to upgrade, take the cluster offline, and then proceed  with the upgrade process. Repeat the process for each cluster.\nPerform the procedures using the Anthos Service Mesh documentation appropriate for your platform:\nThe instructions to install and configure Anthos Service Mesh are different depending on your platform. The platforms are divided into the following categories:\n- **GKE** : Google Kubernetes Engine clusters running on Google Cloud.\n- **Outside Google Cloud** : Anthos clusters running on:- **Anthos clusters on VMware (GKE on-prem)** \n- **Anthos on bare metal** \n- **Anthos clusters on AWS** \n- **Amazon EKS** \n- **Other Kubernetes Platforms** : Conformant clusters created and running on:- **AKS** \n- **EKS** \n- **OpenShift** The sequence for upgrading to Anthos Service Mesh version 1.13.9 for your hybrid    installation is as follows:- Prepare for the upgrade.\n- Install the new version of Anthos Service Mesh.\n- Delete the previous Anthos Service Mesh version's deployments, services, and webhooks from your     current installation.\n- Upgrade your gateways and configure the new webhooks.\n### \n    Prepare to upgrade Anthos Service Mesh to version 1.13.9\n    **Note:** You can upgrade directly from Anthos Service Mesh version 1.11 or    higher to Anthos Service Mesh version 1.13.9. If you are running a version of Anthos Service Mesh    older than 1.11, you must first upgrade to version 1.11. Follow the instructions in [Upgrading from earlier versions](/service-mesh/v1.15/docs/upgrade-path-old-versions-gke) - Review the requirements in [Upgrade Anthos     Service Mesh](/service-mesh/v1.15/docs/unified-install/upgrade) , but do not perform the upgrade yet.\n- Before installing the new version, determine the current revision. You will need     this information to delete the previous Anthos Service Mesh version's deployments, services, and     webhooks from your current installation. Use the following command to store the     current`istiod`revision to an environment variable:```\nexport DELETE_REV=$(kubectl get deploy -n istio-system -l app=istiod -o jsonpath={.items[*].metadata.labels.'istio\\.io\\/rev'}'{\"\\n\"}')\necho $DELETE_REV\n```Your output should look something like `1.12.9-asm.2` **Note:** If the command returns multiple values, set the     value of`DELETE_REV`to the oldest version and follow the procedure to     delete the oldest version, then repeat the process until you have deleted all     versions.\n- Create a new`overlay.yaml`file or verify that your existing`overlay.yaml`contains the following contents:```\napiVersion: install.istio.io/v1alpha1kind: IstioOperatorspec:\u00a0 components:\u00a0 \u00a0 ingressGateways:\u00a0 \u00a0 - name: istio-ingressgateway\u00a0 \u00a0 \u00a0 enabled: true\u00a0 \u00a0 \u00a0 k8s:\u00a0 \u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # default node selector, if different or not using node selectors, change accordingly.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cloud.google.com/gke-nodepool: apigee-runtime\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 1000m\u00a0 \u00a0 \u00a0 \u00a0 service:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: LoadBalancer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 loadBalancerIP: STATIC_IP # If you do not have a reserved static IP, leave this out.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http-status-port\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 15021\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 80\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: https\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 443\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8443\u00a0 meshConfig:\u00a0 \u00a0 accessLogFormat:\u00a0 \u00a0 \u00a0 '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n```\n- Follow the instructions in the following sections in the Anthos Service Mesh documentation: **Important:** Make sure to follow the instructions to     upgrade Anthos Service Mesh with optional features, and to include your`overlay.yaml`.- [Download      asmcli](/service-mesh/v1.15/docs/unified-install/install-dependent-tools#download_asmcli) \n- [Grant      cluster admin permissions](/service-mesh/v1.15/docs/unified-install/install-dependent-tools#grant_cluster_admin_permissions) \n- [Validate      project and cluster](/service-mesh/v1.15/docs/unified-install/install-dependent-tools#validate_project_and_cluster) \n- [Upgrade      with optional features](/service-mesh/v1.15/docs/unified-install/upgrade#upgrade_with_optional_features) . Stop before starting the \"Upgrade Gateways section\".\n- Switch to the new control plane:- Get the revision label that is on`istiod`:```\nkubectl get pod -n istio-system -L istio.io/rev\n```The output from the command is similar to the following.```\n NAME         READY STATUS RESTARTS AGE REV\n istiod-asm-1139-10-67998f4b55-lrzpz 1/1 Running 0   68m asm-1129-0\n istiod-asm-1139-10-67998f4b55-r76kr 1/1 Running 0   68m asm-1129-0\n istiod-1129-0-1-5cd96f88f6-n7tj9  1/1 Running 0   27s asm-1139-10\n istiod-1129-0-1-5cd96f88f6-wm68b  1/1 Running 0   27s asm-1139-10\n```\n- Assign the newer revision label to an environment variable.In the output, under the `REV` column, note the value of the revision      label for the new version. In this example, the value is `asm-1139-10` ```\nexport UPGRADE_REV=\"REVISION_LABEL\"\n```\n- Add the revision label to`istio-system`namespace and remove the`istio-injection`label (if it exists) with the following command.```\nkubectl label namespace istio-system istio.io/rev=$UPGRADE_REV istio-injection- --overwrite\n```If you see `\"istio-injection not found\"` in the output, you can      ignore it. That means that the namespace didn't previously have the `istio-injection` label. Because auto-injection fails if a      namespace has both the `istio-injection` and the revision label,      all `kubectl label` commands in the Anthos Service Mesh      documentation include removing the `istio-injection` label.\n- Restart the Pods to trigger re-injection.```\nkubectl rollout restart deployment -n istio-system\n```\n- Test your application to verify that the workloads are working correctly.\n- If you have workloads in other namespaces, repeat the steps to label the namespace and restart Pods.\n- Delete the previous versions:- Navigate into the directory where you installed`asmcli`.\n- Store the output directory for your Anthos Service Mesh installation in the **DIR_PATH** environment variable. This is the same directory you      specified in the [Upgrade      with optional features](/service-mesh/v1.15/docs/unified-install/upgrade#upgrade_with_optional_features) procedure.```\nexport DIR_PATH=OUTPUT_DIR\n```\n- Create a shell script containing the following commands:```\n#!/bin/bash\nset -ex\nif [[ \"${DELETE_REV}\" != \"${UPGRADE_REV}\" ]]; then\n kubectl apply -f ${DIR_PATH}/asm/istio/istiod-service.yaml\n kubectl delete deploy -l app=istio-ingressgateway,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete deploy -l app=istio-ingressgateway-connectors,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete ValidatingWebhookConfiguration -l app=istiod,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete MutatingWebhookConfiguration -l app=sidecar-injector,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete Service,Deployment,HorizontalPodAutoscaler,PodDisruptionBudget istiod-${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete IstioOperator installed-state-${DELETE_REV} -n istio-system --ignore-not-found=true\nfi\n```\n- Execute the script to delete the previous versions.These instructions cover upgrading Anthos Service Mesh on:- **Anthos clusters on VMware (GKE on-prem)** \n- **Anthos on bare metal** \n- **Anthos clusters on AWS** \n- **Amazon EKS** \nThe sequence for upgrading to Anthos Service Mesh version 1.13.9 for your hybrid    installation is as follows:- Prepare for the upgrade.\n- Install the new version of Anthos Service Mesh.\n- Delete the previous Anthos Service Mesh version's deployments, services, and webhooks from your     current installation.\n- Upgrade your gateways and configure the new webhooks.\n### \n    Prepare to upgrade Anthos Service Mesh to version 1.13.9\n    **Note:** You can upgrade directly from Anthos Service Mesh version 1.11 or    higher to Anthos Service Mesh version 1.13.9. If you are running a version of Anthos Service Mesh    older than 1.11, you must first upgrade to version 1.11. Follow the instructions in [Upgrading from earlier versions](/service-mesh/v1.15/docs/upgrade-path-old-versions-gke) - Review the requirements in [Upgrade Anthos     Service Mesh](/service-mesh/v1.15/docs/unified-install/upgrade) , but do not perform the upgrade yet.\n- Before installing the new version, determine the current revision. You will need     this information to delete the previous Anthos Service Mesh version's deployments, services, and     webhooks from your current installation. Use the following command to store the     current`istiod`revision to an environment variable:```\nexport DELETE_REV=$(kubectl get deploy -n istio-system -l app=istiod -o jsonpath={.items[*].metadata.labels.'istio\\.io\\/rev'}'{\"\\n\"}')\necho $DELETE_REV\n```Your output should look something like `1.12.9-asm.2` **Note:** If the command returns multiple values, set the     value of`DELETE_REV`to the oldest version and follow the procedure to     delete the oldest version, then repeat the process until you have deleted all     versions.\n- Create a new`overlay.yaml`file or verify that your existing`overlay.yaml`contains the following contents:```\napiVersion: install.istio.io/v1alpha1kind: IstioOperatorspec: \u00a0\u00a0 components:\u00a0 \u00a0 ingressGateways:\u00a0 \u00a0 - name: istio-ingressgateway\u00a0 \u00a0 \u00a0 enabled: true\u00a0 \u00a0 \u00a0 k8s:\u00a0 \u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # default node selector, if different or not using node selectors, change accordingly.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cloud.google.com/gke-nodepool: apigee-runtime\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 1000m\u00a0 \u00a0 \u00a0 \u00a0 service:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: LoadBalancer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 loadBalancerIP: STATIC_IP # If you do not have a reserved static IP, leave this out.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http-status-port\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 15021\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 80\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: https\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 443\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8443\u00a0 values:\u00a0 \u00a0 gateways:\u00a0 \u00a0 \u00a0 istio-ingressgateway:\u00a0 \u00a0 \u00a0 \u00a0 runAsRoot: true\u00a0 meshConfig:\u00a0 \u00a0 accessLogFormat:\u00a0 \u00a0 \u00a0 '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n```\n- Follow the instructions in the following sections in the Anthos Service Mesh documentation: **Important:** Make sure to follow the instructions to     upgrade Anthos Service Mesh with optional features, and to include your`overlay.yaml`.- [Download      asmcli](/service-mesh/v1.15/docs/unified-install/install-dependent-tools#download_asmcli) \n- [Grant      cluster admin permissions](/service-mesh/v1.15/docs/unified-install/install-dependent-tools#grant_cluster_admin_permissions) \n- [Validate      project and cluster](/service-mesh/v1.15/docs/unified-install/install-dependent-tools#validate_project_and_cluster) \n- [Upgrade      with optional features](/service-mesh/v1.15/docs/unified-install/upgrade#upgrade_with_optional_features) . Stop before starting the \"Upgrade Gateways section\".\n- Switch to the new control plane:- Get the revision label that is on`istiod`:```\nkubectl get pod -n istio-system -L istio.io/rev\n```The output from the command is similar to the following.```\n NAME         READY STATUS RESTARTS AGE REV\n istiod-asm-1139-10-67998f4b55-lrzpz 1/1 Running 0   68m asm-1129-0\n istiod-asm-1139-10-67998f4b55-r76kr 1/1 Running 0   68m asm-1129-0\n istiod-1129-0-1-5cd96f88f6-n7tj9  1/1 Running 0   27s asm-1139-10\n istiod-1129-0-1-5cd96f88f6-wm68b  1/1 Running 0   27s asm-1139-10\n```\n- Assign the newer revision label to an environment variable.In the output, under the `REV` column, note the value of the revision      label for the new version. In this example, the value is `asm-1139-10` ```\nexport UPGRADE_REV=\"REVISION_LABEL\"\n```\n- Add the revision label to`istio-system`namespace and remove the`istio-injection`label (if it exists) with the following command.```\nkubectl label namespace istio-system istio.io/rev=$UPGRADE_REV istio-injection- --overwrite\n```If you see `\"istio-injection not found\"` in the output, you can      ignore it. That means that the namespace didn't previously have the `istio-injection` label. Because auto-injection fails if a      namespace has both the `istio-injection` and the revision label,      all `kubectl label` commands in the Anthos Service Mesh      documentation include removing the `istio-injection` label.\n- Restart the Pods to trigger re-injection.```\nkubectl rollout restart deployment -n istio-system\n```\n- Test your application to verify that the workloads are working correctly.\n- If you have workloads in other namespaces, repeat the steps to label the namespace and restart Pods.\n- Delete the previous versions:- Navigate into the directory where you installed`asmcli`.\n- Store the output directory for your Anthos Service Mesh installation in the **DIR_PATH** environment variable. This is the same directory you      specified in the [Upgrade      with optional features](/service-mesh/v1.15/docs/unified-install/upgrade#upgrade_with_optional_features) procedure.```\nexport DIR_PATH=OUTPUT_DIR\n```\n- Create a shell script containing the following commands:```\n#!/bin/bash\nset -ex\nif [[ \"${DELETE_REV}\" != \"${UPGRADE_REV}\" ]]; then\n kubectl apply -f ${DIR_PATH}/asm/istio/istiod-service.yaml\n kubectl delete deploy -l app=istio-ingressgateway,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete deploy -l app=istio-ingressgateway-connectors,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete ValidatingWebhookConfiguration -l app=istiod,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete MutatingWebhookConfiguration -l app=sidecar-injector,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete Service,Deployment,HorizontalPodAutoscaler,PodDisruptionBudget istiod-${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete IstioOperator installed-state-${DELETE_REV} -n istio-system --ignore-not-found=true\nfi\n```\n- Execute the script to delete the previous versions.In these instructions the process of upgrading Anthos Service Mesh (Anthos Service Mesh) version  istio-1.13.9-asm.10 on Anthos attached clusters is the same as performing a fresh install.\n### \n Preparing to install Anthos Service Mesh\n \n- Before installing the new version, determine the current revision. You will need  this information to delete theandfrom your current Anthos Service Mesh installation. Use the following command to store the current`istiod`revision to an environment variable:```\nexport DELETE_REV=$(kubectl get deploy -n istio-system -l app=istiod -o jsonpath={.items[*].metadata.labels.'istio\\.io\\/rev'}'{\"\\n\"}')\necho $DELETE_REV\n```Your output should look something like `1.12.9-asm.2` **Note:** If the command returns multiple values, set the   value of`DELETE_REV`to the oldest version and follow the procedure to   delete the oldest version, then repeat the process until you have deleted all   versions.Download the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-linux-amd64.tar.gz\n```\nDownload the signature file and use OpenSSL to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-linux-amd64.tar.gz.1.sig\n``````\nopenssl dgst -verify /dev/stdin -signature istio-1.13.9-asm.10-linux-amd64.tar.gz.1.sig istio-1.13.9-asm.10.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.13.9-asm.10-linux-amd64.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.13.9-asm.10` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.13.9-asm.10\n```\nFor convenience, add the tools in the`/bin`directory to your`PATH`:```\nexport PATH=$PWD/bin:$PATH\n```Download the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-osx.tar.gz\n```\nDownload the signature file and use OpenSSL to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-osx.tar.gz.1.sig\n``````\nopenssl dgst -sha256 -verify /dev/stdin -signature istio-1.13.9-asm.10-osx.tar.gz.1.sig istio-1.13.9-asm.10.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.13.9-asm.10-osx.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.13.9-asm.10` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.13.9-asm.10\n```\nFor convenience, add the tools in the`/bin`directory to your`PATH`:```\nexport PATH=$PWD/bin:$PATH\n```Download the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-win.zip\n```\nDownload the signature file and use OpenSSL to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-win.zip.1.sig\n``````\nopenssl dgst -verify - -signature istio-1.13.9-asm.10-win.zip.1.sig istio-1.13.9-asm.10.win.zip <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.13.9-asm.10-win.zip\n```The command creates an installation directory in your current working directory named `istio-1.13.9-asm.10` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests\\profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.13.9-asm.10\n```\nFor convenience, add the tools in the \\bin directory to your PATH:```\nset PATH=%CD%\\bin:%PATH%\n```\n- Now that Anthos Service Mesh Istio is installed, check the version of`istioctl`:```\nistioctl version\n```\n- Create a namespace called istio-system for the control plane components:```\nkubectl create namespace istio-system\n```\n### \n Installing Anthos Service Mesh\n- Edit your`overlay.yaml`file or create a new one with the following contents:```\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nspec:\n meshConfig:\n accessLogFile: /dev/stdout\n enableTracing: true\n accessLogFormat:\n  '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n components:\n ingressGateways:\n - name: istio-ingressgateway\n  enabled: true\n  k8s:\n  service:\n   type: LoadBalancer\n   ports:\n   - name: status-port\n   port: 15021\n   targetPort: 15021\n   - name: http2\n   port: 80\n   targetPort: 8080\n   - name: https\n   port: 443\n   targetPort: 8443\n```\n- Install Anthos Service Mesh with`istioctl`using the`asm-multicloud`profile:```\nistioctl install \\\n --set profile=asm-multicloud \\\n --set revision=\"asm-1139-10\" \\\n --filename overlay.yaml\n```Your output should look something like:```\nkubectl get pods -n istio-systemNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 READY \u00a0 STATUS \u00a0 \u00a0RESTARTS \u00a0 AGEistio-ingressgateway-88b6fd976-flgp2 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m13sistio-ingressgateway-88b6fd976-p5dl9 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02m57sistiod-asm-1139-10-798ffb964-2ls88 \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21sistiod-asm-1139-10-798ffb964-fnj8c \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21s\n```The `--set revision` argument adds a revision label in the format `istio.io/rev=asm-1139-10` to `istiod` . The revision label is used by the  automatic sidecar injector webhook to associate injected sidecars with a particular `istiod` revision. To enable sidecar auto-injection for a namespace, you must label it with a revision  that matches the label on `istiod` .\n- Verify that your install completed:```\nkubectl get svc -n istio-system\n```Your output should look something like:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TYPE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CLUSTER-IP \u00a0 \u00a0 \u00a0 EXTERNAL-IP \u00a0 \u00a0 PORT(S) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0AGEistio-ingressgateway \u00a0 LoadBalancer \u00a0 172.200.48.52 \u00a0 \u00a034.74.177.168 \u00a0 15021:30479/TCP,80:30030/TCP,443:32200/TCP,15012:32297/TCP,15443:30244/TCP \u00a0 3m35sistiod \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.18.133 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04m46sistiod-asm-1139-10 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.63.220 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m43s\n```\n- Switch to the new control plane:- Get the revision label that is on`istiod`:```\nkubectl get pod -n istio-system -L istio.io/rev\n```The output from the command is similar to the following.```\n NAME         READY STATUS RESTARTS AGE REV\n istiod-asm-1139-10-67998f4b55-lrzpz 1/1 Running 0   68m asm-1129-0\n istiod-asm-1139-10-67998f4b55-r76kr 1/1 Running 0   68m asm-1129-0\n istiod-1129-0-1-5cd96f88f6-n7tj9  1/1 Running 0   27s asm-1139-10\n istiod-1129-0-1-5cd96f88f6-wm68b  1/1 Running 0   27s asm-1139-10\n```\n- Assign the newer revision label to an environment variable.In the output, under the `REV` column, note the value of the revision      label for the new version. In this example, the value is `asm-1139-10` ```\nexport UPGRADE_REV=\"REVISION_LABEL\"\n```\n- Add the revision label to`istio-system`namespace and remove the`istio-injection`label (if it exists) with the following command.```\nkubectl label namespace istio-system istio.io/rev=$UPGRADE_REV istio-injection- --overwrite\n```If you see `\"istio-injection not found\"` in the output, you can      ignore it. That means that the namespace didn't previously have the `istio-injection` label. Because auto-injection fails if a      namespace has both the `istio-injection` and the revision label,      all `kubectl label` commands in the Anthos Service Mesh      documentation include removing the `istio-injection` label.\n- Restart the Pods to trigger re-injection.```\nkubectl rollout restart deployment -n istio-system\n```\n- Test your application to verify that the workloads are working correctly.\n- If you have workloads in other namespaces, repeat the steps to label the namespace and restart Pods.\n- Delete the previous versions:- Navigate into the directory where you installed`asmcli`.\n- Create a shell script containing the following commands:```\n#!/bin/bash\nset -ex\nif [[ \"${DELETE_REV}\" != \"${UPGRADE_REV}\" ]]; then\n kubectl delete deploy -l app=istio-ingressgateway,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete deploy -l app=istio-ingressgateway-connectors,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete ValidatingWebhookConfiguration -l app=istiod,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete MutatingWebhookConfiguration -l app=sidecar-injector,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete Service,Deployment,HorizontalPodAutoscaler,PodDisruptionBudget istiod-${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete IstioOperator installed-state-${DELETE_REV} -n istio-system --ignore-not-found=true\nfi\n```\n- Execute the script to delete the previous versions.In these instructions the process of upgrading Anthos Service Mesh (Anthos Service Mesh) version  istio-1.13.9-asm.10 on Anthos attached clusters is the same as performing a fresh install.\n### \n Preparing to install Anthos Service Mesh\n \n- Before installing the new version, determine the current revision. You will need  this information to delete theandfrom your current Anthos Service Mesh installation. Use the following command to store the current`istiod`revision to an environment variable:```\nexport DELETE_REV=$(kubectl get deploy -n istio-system -l app=istiod -o jsonpath={.items[*].metadata.labels.'istio\\.io\\/rev'}'{\"\\n\"}')\necho $DELETE_REV\n```Your output should look something like `1.12.9-asm.2` **Note:** If the command returns multiple values, set the   value of`DELETE_REV`to the oldest version and follow the procedure to   delete the oldest version, then repeat the process until you have deleted all   versions.Grant the`anyuid`security context constraint (SCC) to the istio-system with the   following OpenShift CLI (`oc`) command:```\noc adm policy add-scc-to-group anyuid system:serviceaccounts:istio-system\n```\nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-linux-amd64.tar.gz\n```\nDownload the signature file and use OpenSSL to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-linux-amd64.tar.gz.1.sig\n``````\nopenssl dgst -verify /dev/stdin -signature istio-1.13.9-asm.10-linux-amd64.tar.gz.1.sig istio-1.13.9-asm.10.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.13.9-asm.10-linux-amd64.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.13.9-asm.10` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.13.9-asm.10\n```\nFor convenience, add the tools in the`/bin`directory to your`PATH`:```\nexport PATH=$PWD/bin:$PATH\n```Grant the`anyuid`security context constraint (SCC) to the istio-system with the   following OpenShift CLI (`oc`) command:```\noc adm policy add-scc-to-group anyuid system:serviceaccounts:istio-system\n```\nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-osx.tar.gz\n```\nDownload the signature file and use OpenSSL to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-osx.tar.gz.1.sig\n``````\nopenssl dgst -sha256 -verify /dev/stdin -signature istio-1.13.9-asm.10-osx.tar.gz.1.sig istio-1.13.9-asm.10.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.13.9-asm.10-osx.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.13.9-asm.10` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.13.9-asm.10\n```\nFor convenience, add the tools in the`/bin`directory to your`PATH`:```\nexport PATH=$PWD/bin:$PATH\n```Grant the`anyuid`security context constraint (SCC) to the istio-system with the   following OpenShift CLI (`oc`) command:```\noc adm policy add-scc-to-group anyuid system:serviceaccounts:istio-system\n```\nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-win.zip\n```\nDownload the signature file and use OpenSSL to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-win.zip.1.sig\n``````\nopenssl dgst -verify - -signature istio-1.13.9-asm.10-win.zip.1.sig istio-1.13.9-asm.10.win.zip <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.13.9-asm.10-win.zip\n```The command creates an installation directory in your current working directory named `istio-1.13.9-asm.10` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests\\profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.13.9-asm.10\n```\nFor convenience, add the tools in the \\bin directory to your PATH:```\nset PATH=%CD%\\bin:%PATH%\n```\n- Now that Anthos Service Mesh Istio is installed, check the version of`istioctl`:```\nistioctl version\n```\n- Create a namespace called istio-system for the control plane components:```\nkubectl create namespace istio-system\n```\n### \n Configure the validating webhook\nWhen you install Anthos Service Mesh, you set a revision label on `istiod` . You need to set the same revision on the validating webhook.- Create a file called`istiod-service.yaml`with the following contents:```\napiVersion: v1kind: Servicemetadata:\u00a0 name: istiod\u00a0 namespace: istio-system\u00a0 labels:\u00a0 \u00a0 istio.io/rev: asm-1139-10\u00a0 \u00a0 app: istiod\u00a0 \u00a0 istio: pilot\u00a0 \u00a0 release: istiospec:\u00a0 ports:\u00a0 \u00a0 - port: 15010\u00a0 \u00a0 \u00a0 name: grpc-xds # plaintext\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 - port: 15012\u00a0 \u00a0 \u00a0 name: https-dns # mTLS with k8s-signed cert\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 - port: 443\u00a0 \u00a0 \u00a0 name: https-webhook # validation and injection\u00a0 \u00a0 \u00a0 targetPort: 15017\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 - port: 15014\u00a0 \u00a0 \u00a0 name: http-monitoring # prometheus stats\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 selector:\u00a0 \u00a0 app: istiod\u00a0 \u00a0 istio.io/rev: asm-1139-10\u00a0 meshConfig:\u00a0 \u00a0 accessLogFormat:\u00a0 \u00a0 \u00a0 '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n```\n- Use`kubectl`to apply the validating webhook configuration:```\nkubectl apply -f istiod-service.yaml\n```\n- Verify that the configuration was applied:```\nkubectl get svc -n istio-system\n```The response should look similar to:```\nNAME \u00a0 \u00a0 TYPE \u00a0 \u00a0 \u00a0 \u00a0CLUSTER-IP \u00a0 \u00a0 \u00a0 EXTERNAL-IP \u00a0 PORT(S) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AGEistiod \u00a0 ClusterIP \u00a0 172.200.18.133 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 22s\n```\n### \n Installing Anthos Service Mesh\n- Edit your`overlay.yaml`file or create a new one with the following contents:```\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nspec:\n meshConfig:\n accessLogFile: /dev/stdout\n enableTracing: true\n accessLogFormat:\n  '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n components:\n ingressGateways:\n  - name: istio-ingressgateway\n  enabled: true\n  k8s:\n   service:\n   type: LoadBalancer\n   ports:\n   - name: status-port\n    port: 15021\n    targetPort: 15021\n   - name: http2\n    port: 80\n    targetPort: 8080\n   - name: https\n    port: 443\n    targetPort: 8443\n```\n- Install Anthos Service Mesh with`istioctl`using the`asm-multicloud`profile:```\nistioctl install \\\n --set profile=asm-multicloud \\\n --set revision=\"asm-1139-10\" \\\n --filename overlayfile.yaml\n```Your output should look something like:```\nkubectl get pods -n istio-systemNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 READY \u00a0 STATUS \u00a0 \u00a0RESTARTS \u00a0 AGEistio-ingressgateway-88b6fd976-flgp2 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m13sistio-ingressgateway-88b6fd976-p5dl9 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02m57sistiod-asm-1139-10-798ffb964-2ls88 \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21sistiod-asm-1139-10-798ffb964-fnj8c \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21s\n```The `--set revision` argument adds a revision label in the format `istio.io/rev=1.6.11-asm.1` to `istiod` . The revision label is used by the  automatic sidecar injector webhook to associate injected sidecars with a particular `istiod` revision. To enable sidecar auto-injection for a namespace, you must label it with a revision  that matches the label on `istiod` .\n- Verify that your install completed:```\nkubectl get svc -n istio-system\n```Your output should look something like:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TYPE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CLUSTER-IP \u00a0 \u00a0 \u00a0 EXTERNAL-IP \u00a0 \u00a0 PORT(S) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0AGEistio-ingressgateway \u00a0 LoadBalancer \u00a0 172.200.48.52 \u00a0 \u00a034.74.177.168 \u00a0 15021:30479/TCP,80:30030/TCP,443:32200/TCP,15012:32297/TCP,15443:30244/TCP \u00a0 3m35sistiod \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.18.133 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04m46sistiod-asm-1139-10 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.63.220 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m43s\n```\n- Switch to the new control plane:- Get the revision label that is on`istiod`:```\nkubectl get pod -n istio-system -L istio.io/rev\n```The output from the command is similar to the following.```\n NAME         READY STATUS RESTARTS AGE REV\n istiod-asm-1139-10-67998f4b55-lrzpz 1/1 Running 0   68m asm-1129-0\n istiod-asm-1139-10-67998f4b55-r76kr 1/1 Running 0   68m asm-1129-0\n istiod-1129-0-1-5cd96f88f6-n7tj9  1/1 Running 0   27s asm-1139-10\n istiod-1129-0-1-5cd96f88f6-wm68b  1/1 Running 0   27s asm-1139-10\n```\n- Assign the newer revision label to an environment variable.In the output, under the `REV` column, note the value of the revision      label for the new version. In this example, the value is `asm-1139-10` ```\nexport UPGRADE_REV=\"REVISION_LABEL\"\n```\n- Add the revision label to`istio-system`namespace and remove the`istio-injection`label (if it exists) with the following command.```\nkubectl label namespace istio-system istio.io/rev=$UPGRADE_REV istio-injection- --overwrite\n```If you see `\"istio-injection not found\"` in the output, you can      ignore it. That means that the namespace didn't previously have the `istio-injection` label. Because auto-injection fails if a      namespace has both the `istio-injection` and the revision label,      all `kubectl label` commands in the Anthos Service Mesh      documentation include removing the `istio-injection` label.\n- Restart the Pods to trigger re-injection.```\nkubectl rollout restart deployment -n istio-system\n```\n- Test your application to verify that the workloads are working correctly.\n- If you have workloads in other namespaces, repeat the steps to label the namespace and restart Pods.\n- Delete the previous versions:- Navigate into the directory where you installed`asmcli`.\n- Create a shell script containing the following commands:```\n#!/bin/bash\nset -ex\nif [[ \"${DELETE_REV}\" != \"${UPGRADE_REV}\" ]]; then\n kubectl delete deploy -l app=istio-ingressgateway,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete deploy -l app=istio-ingressgateway-connectors,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete ValidatingWebhookConfiguration -l app=istiod,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete MutatingWebhookConfiguration -l app=sidecar-injector,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete Service,Deployment,HorizontalPodAutoscaler,PodDisruptionBudget istiod-${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete IstioOperator installed-state-${DELETE_REV} -n istio-system --ignore-not-found=true\nfi\n```\n- Execute the script to delete the previous versions.**Congratulations!** You have successfully upgraded to Apigee hybrid version 1.8.8.\n## \n Rolling back an upgrade\nFollow these steps to roll back a previous upgrade:\n- Clean up completed jobs for the hybrid runtime namespace, whereis the  namespace specified in your overrides file, if you specified a namespace. If not, the default namespace  is`apigee`:```\nkubectl delete job -n NAMESPACE \\\n $(kubectl get job -n NAMESPACE \\\n -o=jsonpath='{.items[?(@.status.succeeded==1)].metadata.name}')\n```\n- Clean up completed jobs for the`apigee-system`namespace:```\nkubectl delete job -n apigee-system \\\n $(kubectl get job -n apigee-system \\\n -o=jsonpath='{.items[?(@.status.succeeded==1)].metadata.name}')\n```\n- Change the`APIGEECTL_HOME`variable to point to the directory that contains the previous  version of`apigeectl`. For example:```\nexport APIGEECTL_HOME=PATH_TO_PREVIOUS_APIGEECTL_DIRECTORY\n```\n- Undo the changes to your`overrides`file:- Remove or comment out`ingressGateways`and all its properties.\n- Set the value of`virtualhosts.selector.app`to the previous value,  for example:```\nvirtualhosts:\n - name: my-env-group\n selector:\n  app: istio-ingressgateway\n```\n- Remove or comment out`ao.args.disableIstioConfigInAPIServer`.\n- In the root directory of the installation you want to roll back to, run`apigeectl apply`, check the status of your pods, and then run`apigeectl init`. Be sure to use the original overrides file for the version you  wish to roll back to:- In the hybrid-files directory, run`apigeectl apply`:```\n$APIGEECTL_HOME/apigeectl apply -f ORIGINAL_OVERRIDES_FILE\n```Where is relative path and filename of the overrides   file for your previous version hybrid installation, for example, `./overrides/overrides1.7.yaml` .\n- Check the status of your pods:```\nkubectl -n NAMESPACE get pods\n```Where is your Apigee hybrid namespace.\n- Check the status of`apigeeds`:```\nkubectl describe apigeeds -n apigee\n```Your output should look something like:```\nStatus:\u00a0 Cassandra Data Replication:\u00a0 Cassandra Pod Ips:\u00a0 \u00a0 10.8.2.204\u00a0 Cassandra Ready Replicas: \u00a01\u00a0 Components:\u00a0 \u00a0 Cassandra:\u00a0 \u00a0 \u00a0 Last Successfully Released Version:\u00a0 \u00a0 \u00a0 \u00a0 Revision: \u00a0v1-f8aa9a82b9f69613\u00a0 \u00a0 \u00a0 \u00a0 Version: \u00a0 v1\u00a0 \u00a0 \u00a0 Replicas:\u00a0 \u00a0 \u00a0 \u00a0 Available: \u00a01\u00a0 \u00a0 \u00a0 \u00a0 Ready: \u00a0 \u00a0 \u00a01\u00a0 \u00a0 \u00a0 \u00a0 Total: \u00a0 \u00a0 \u00a01\u00a0 \u00a0 \u00a0 \u00a0 Updated: \u00a0 \u00a01\u00a0 \u00a0 \u00a0 State: \u00a0 \u00a0 \u00a0 \u00a0running\u00a0 Scaling:\u00a0 \u00a0 In Progress: \u00a0 \u00a0 \u00a0 \u00a0 false\u00a0 \u00a0 Operation:\u00a0 \u00a0 Requested Replicas: \u00a00\u00a0 State: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 running\n```Proceed to the next step only when the `apigeeds` pod is running.\n- Run the following command to make note of what your new replica count values will be for   message processor after the upgrade.If these values do not match what you have set   previously, change the values in your overrides file to match your previous   configuration.```\napigeectl apply -f ORIGINAL_OVERRIDES_FILE --dry-run=client --print-yaml --env ENV_NAME 2>/dev/null |grep \"runtime:\" -A 25 -B 1| grep \"autoScaler\" -A 2\n```Your output should look something like:```\n  autoScaler:\n  minReplicas: 2\n  maxReplicas: 10\n```\n- If you are rolling back to hybrid v1.8.4 or earlier, delete the controller deployment used   by hybrid v1.8.5 and newer:```\nkubectl -n apigee-system delete deploy apigee-controller-manager\n```\n- Run`apigeectl init`:```\n$APIGEECTL_HOME/apigeectl init -f ORIGINAL_OVERRIDES_FILE\n```\n- Delete the Apigee ingress gateway manager deployment. This component is relevant only to Apigee hybrid versions 1.8 and newer.```\nkubectl delete deployment -n NAMESPACE apigee-ingress-gateway-manager\n```Where is your Apigee hybrid namespace.", "guide": "Apigee"}