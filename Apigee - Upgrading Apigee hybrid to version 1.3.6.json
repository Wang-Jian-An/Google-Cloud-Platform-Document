{"title": "Apigee - Upgrading Apigee hybrid to version 1.3.6", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Upgrading Apigee hybrid to version 1.3.6\nYou are currently viewing version 1.3 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\n**Note: ** This procedure covers upgrading from Apigee hybrid version 1.2.0 to Apigee hybrid version 1.3.6 only.If you are upgrading from Apigee hybrid version 1.0 or  1.1, you must first upgrade to hybrid version 1.2 before upgrading to version 1.3.6.  See the instructions for [Upgrading Apigee hybrid to version 1.2](/apigee/docs/hybrid/v1.2/upgrade) .\n", "content": "## \n Upgrading to version 1.3.6 overview.\nUpgrading to Apigee hybrid version 1.3.6 requires downtime during theTo minimize downtime in production hybrid environments, make sure you are running at least  two clusters, and update the clusters one at a time.In addition, upon upgrade each component will perform a rolling restart.\nThe procedures for upgrading Apigee hybrid are organized in the following sections:\n- Preparation\n- Create and update service accounts.\n- Plan environment groups.\n- Copy and update overrides file.\n- Upgrade Istio and cert-manager.\n- Install hybrid runtime version 1.3.\n- Clean up.\n**Note: ** Do not create new environments during the upgrade process.\n## \n Prerequisite\n- Apigee hybrid version 1.2. If you are updating from an earlier version see the instructions  for [Upgrading Apigee hybrid to version 1.2](/apigee/docs/hybrid/v1.2/upgrade) .## \n Preparation\n- (Recommended) Make a backup copy of your version 1.2`$APIGEECTL_HOME/`directory. For example:```\ntar -czvf $APIGEECTL_HOME/../apigeectl-v1.2-backup.tar.gz $APIGEECTL_HOME\n```\n- (Recommended) Backup your Cassandra database following the instructions in [Cassandra backup and recovery](/apigee/docs/hybrid/v1.3/backup-recovery) \n- Upgrade your Kubernetes platform as follows. Follow your platform's documentation if  you need help:| Platform | Upgrade to version      |\n|:-----------|:---------------------------------------|\n| GKE  | 1.15.x         |\n| Anthos  | 1.5         |\n| AKS  | 1.16.x using Anthos attached clusters |\n- If you are not using Apigee Connect in your hybrid installation, enable Apigee  Connect.- Check to see if the Apigee Connect API is enabled:```\ngcloud services list | grep apigeeconnect\napigeeconnect.googleapis.com   Apigee Connect API\n```\n- If it is not, enable the API:```\ngcloud services enable apigeeconnect.googleapis.com --project $PROJECT_ID\n```Where **$PROJECT_ID** is your Google Cloud project ID.\n- On the command line, get your `gcloud` authentication credentials, as the following example shows:```\nTOKEN=$(gcloud auth print-access-token)\n```To check that your token was populated, use `echo` , as the following example shows:```\necho $TOKEN\n```This should display your token as an encoded string.For more information, see [gcloud command-line tool overview](https://cloud.google.com/sdk/gcloud/) .\n- Check to see if Apigee Connect is enabled for your organization:```\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n \"https://apigee.googleapis.com/v1/organizations/$ORG_NAME\"\n```Where **$ORG_NAME** is the ID of your organization.If the output contains:```\n  \"name\" : \"features.mart.connect.enabled\",\n  \"value\" : \"true\"\n```Apigee Connect is enabled.\n- If Apigee Connect is not enabled, assign the Apigee Connect Agent role to the MART service  account:```\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n --member serviceAccount:apigee-mart@$PROJECT_ID.iam.gserviceaccount.com \\\n --role roles/apigeeconnect.Agent\n``` **Tip:** If you need to get the email address of your MART service  account, run the following command:```\ngcloud iam service-accounts list | grep mart\n```\n- Enable Apigee Connect with the following command:```\ncurl -H \"Authorization: Bearer $TOKEN\" -X PUT \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"name\" : \"'\"$ORG_NAME\"'\",\n \"properties\" : {\n  \"property\" : [ {\n  \"name\" : \"features.hybrid.enabled\",\n  \"value\" : \"true\"\n  }, {\n  \"name\" : \"features.mart.connect.enabled\",\n  \"value\" : \"true\"\n  } ]\n }\n }' \\\n \"https://apigee.googleapis.com/v1/organizations/$ORG_NAME\"\n```If the output contains the two following properties, Apigee Connect was successfully enabled:```\n  {\n  \"name\": \"features.mart.connect.enabled\",\n  \"value\": \"true\"\n  },\n  {\n  \"name\": \"features.hybrid.enabled\",\n  \"value\": \"true\"\n  }\n```\n- Create the **apigee-watcher** service account. Apigee Watcher is a  new service account introduced in v1.3. It whaches the synchronizer for org-level changes and  applies those changes to configure the Istio ingress.From your main hybrid directory:```\n./tools/create-service-account apigee-watcher ./service-accounts\n```\n- Assign Apigee Runtime Agent role to the Watcher service account:```\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n --member serviceAccount:apigee-watcher@$PROJECT_ID.iam.gserviceaccount.com \\\n --role roles/apigee.runtimeAgent\n```Where **PROJECT_ID** is your Google Cloud project ID. If your service  account email addresses differ from this pattern, replace them accordingly. **Tip:** If you need to get the email address of your watcher   service account, run the following command:```\ngcloud iam service-accounts list | grep watcher\n```The output should include a list of all the service accounts and their roles, including:```\n ...\n- members:\n - serviceAccount:apigee-watcher@hybrid13rc5.iam.gserviceaccount.com\n role: roles/apigee.runtimeAgent\n ...\n```\n- Plan your [environment groups](/apigee/docs/hybrid/v1.3/environment-groups-about) for routing.  Apigee hybrid 1.3 manages base path routing with environment groups instead of`routingRules`. If you are using`routingRules`in your hybrid  configuration, design environment groups to replicate your routing.You must create at least one environment group.See [About environment groups](/apigee/docs/hybrid/v1.3/environment-groups-about) .\n- Update your overrides file:\n- Make a copy of your overrides file.\n- Update **gcp** and **k8sCluster** stanzas.The following configuration properties have been replaced in hybrid version 1.3:- `gcpRegion`replaced with`gcp:region`\n- `gcpProjectID`replaced with`gcp:projectID`\n- `gcpProjectIDRuntime`replaced with`gcp:gcpProjectIDRuntime`\n- `k8sClusterName`replaced with`k8s:clusterName`\n- `k8sClusterRegion`replaced with`k8s:clusterRegion`\nFor example, replace the following structure:```\ngcpRegion: gcp region\ngcpProjectID: gcp project ID\ngcpProjectIDRuntime: gcp project ID\nk8sClusterName: name\nk8sClusterRegion: region\n```with:```\ngcp:\n projectID: gcp project ID\n region: gcp region\n gcpProjectIDRuntime: gcp project ID # optional. This is only required if you\n          # want logger/metrics data to be sent in\n          # different gcp project.\nk8sCluster:\n name: gcp project ID\n region: gcp region\n```\n- If you do not have a unique instance identifier already in your overrides file, add one:```\n# unique identifier for this installation. 63 chars length limit\ninstanceID: ID\n```Where is a unique identifier for this hybrid installation, like  \" `my-hybrid-131-installation` \" or \" `acmecorp-hybrid-131` .\"\n- Add the Watcher (`apigee-watcher`) service account to the overrides file:```\n# Note: the SA should have the \"Apigee Runtime Agent\" role\nwatcher:\n serviceAccountPath: \"service account file\"\n```\n- Add the Metrics (`apigee-metrics`) service account to the overrides file:```\nmetrics:\n serviceAccountPath: \"service account file\"\n```\n- Update`virtualhosts:`stanza to replace`routingRules`with your  environment group.- `-name:`Replace the name with the name of your environment group. You can have   multiple name entries, one for each environment group.\n- `hostAliases:[]`Delete this line.\n- Keep (or add) the`sslCertPath:`and`sslKeyPath:`entries.\n- Delete all`routingRules`entries.\nFor example:```\nvirtualhosts:\n - name: default\n hostAliases:\n  - \"*.acme.com\"\n sslCertPath: ./certs/keystore.pem\n sslKeyPath: ./certs/keystore.key\n routingRules:\n  - paths:\n  - /foo\n  - /bar\n  - env: my-environment\n```Becomes:```\nvirtualhosts:\n - name: example-env-group\n sslCertPath: ./certs/keystore.pem\n sslKeyPath: ./certs/keystore.key\n```\n- Update the`mart`and`connectAgent:`stanzas. **Note: ** If you are not planning to use Apigee Connect in your  hybrid 1.3 installation, skip this step and follow the **tip** in step  5 in [Apigee Connect](/apigee/docs/hybrid/v1.3/apigee-connect#add-apigee-connect-to-the-hybrid-runtime) after upgrading.- Under`mart:`remove the`hostAlias:`,`sslCertPath:`,   and`sslKeyPath:`entries.\n- Add an`connectAgent:`stanza.\n- Under`connectAgent:`add a`serviceAccountPath:`entry and provide  the path to the service acount file that has the Apigee Connect Agent role assigned to it  (usually the MART service account).\nFor example:```\nmart:\n hostAlias: \"mart.apigee-hybrid-docs.net\"\n serviceAccountPath: ./service-accounts/hybrid-project-apigee-mart.json\n sslCertPath: ./certs/fullchain.pem\n sslKeyPath: ./certs/privkey.key\n```Becomes:```\nmart:\n serviceAccountPath: ./service-accounts/hybrid-project-apigee-mart.json\nconnectAgent:\n serviceAccountPath: ./service-accounts/hybrid-project-apigee-mart.json\n```\n## \n Upgrade Istio and cert-manager\nApigee hybrid version 1.3 requires cert-manager v0.14.2 to manage and verify certificates and the Istio distribution provided with Anthos Service Mesh (ASM) version 1.5.7 (or newer) to create and manage the runtime ingress gateway.\n### \n Upgrade Istio 1.4.6 to ASM 1.5.7 (or newer)\nTraffic disruption may occur during the upgrade process. To minimize the disruption, ensure that at least two replicas of each component (except Citadel) are running.\n- To minimize downtime, the Istio deployments and HPAs must have at least two replicas each.  Run the following commands to determine the number of replicas:```\nkubectl -n istio-system get deployments # list of deployments\nkubectl -n istio-system get hpa # list of hpa\n```\n- Edit each deployment that has only one replica and increase the`replicas:`to`2`or more:```\nkubectl -n istio-system edit deployment name\n```For example:```\nspec:\n progressDeadlineSeconds: 600\n replicas: 2\n```\n- Edit each HPA that has only one replica and increase the`minReplicas:`to`2`or more:```\nkubectl -n istio-system edit hpa name\n```For example:```\nspec:\n maxReplicas: 5\n minReplicas: 2\n```\n- Download and install ASM following the install instructions in [Download and install  ASM](/apigee/docs/hybrid/v1.3/install-download-cert-manager-istio#download-and-install-asm) .\n- After the installation, run the version command to make sure you have 1.5.x installed correctly:```\n./bin/istioctl version\nclient version: 1.5.8-asm.0\napigee-mart-ingressgateway version:\ncitadel version: 1.4.6\ngalley version: 1.4.6\ningressgateway version: 1.5.8-asm.0\npilot version: 1.4.6\npolicy version: 1.4.6\nsidecar-injector version: 1.4.6\ntelemetry version: 1.4.6\npilot version: 1.5.8-asm.0\ndata plane version: 1.4.6 (1 proxies), 1.5.8-asm.0 (2 proxies)\n```\n### \n Upgrade cert-manager\nApigee hybrid version 1.3 requires cert-manager version 0.14.2. You can follow the complete instructions on the cert-manager site for [Upgrading from v0.13 to v0.14](https://cert-manager.io/docs/installation/upgrading/upgrading-0.13-0.14/) . The steps needed for hybrid are provided below.\n- Delete the current cert-manager deployment:```\nkubectl delete -n cert-manager deployment cert-manager cert-manager-cainjector cert-manager-webhook\n```\n- Verify your version of Kubernetes:```\nkubectl version\n```\n- Run the following command to install cert-manager from Jetstack:```\nkubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.14.2/cert-manager.yaml \n```## \n Install the hybrid runtime\n- Store the latest version number in a variable:```\nexport VERSION=$(curl -s \\\n https://storage.googleapis.com/apigee-public/apigee-hybrid-setup/current-version.txt?ignoreCache=1)\n```\n- Check that the variable was populated with a version number. If you want to use a different  version, you can save that in environment variable instead. For example:```\necho $VERSION\n 1.3.6\n```\n- Download the release package for your operating system: **Mac 64 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-public/apigee-hybrid-setup/$VERSION/apigeectl_mac_64.tar.gz\n``` **Linux 64 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-public/apigee-hybrid-setup/$VERSION/apigeectl_linux_64.tar.gz\n``` **Mac 32 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-public/apigee-hybrid-setup/$VERSION/apigeectl_mac_32.tar.gz\n``` **Linux 32 bit:** ```\ncurl -LO \\\n https://storage.googleapis.com/apigee-public/apigee-hybrid-setup/$VERSION/apigeectl_linux_32.tar.gz\n```\n- Rename your current`apigeectl/`directory to a backup directory name. For example:```\nmv $APIGEECTL_HOME/ $APIGEECTL_HOME-v1.2/ \n```\n- Extract the downloaded gzip file contents into your hybrid base directory. For example:```\ntar xvzf filename.tar.gz -C hybrid-base-directory\n```\n- `cd`to the base directory.\n- The tar contents are, by default, expanded into a directory with the version and platform in its  name. For example: `./apigeectl_1.0.0-f7b96a8_linux_64` . Rename that directory  to `apigeectl` :```\nmv apigeectl_1.0.0-f7b96a8_linux_64 apigeectl\n```\n- Delete the`apigee-resources-install`job from`apigee-system`:```\nkubectl -n apigee-system delete job apigee-resources-install\n```\n- Delete the older CRD:```\nkubectl delete crd apigeetelemetries.apigee.cloud.google.com\n```\n- Update the`cassandra:`stanza in your overrides file with an`externalSeedHost`property. This property will help ensure your new hybrid  version 1.3.6 installation will use the same Kubernetes cluster as your version 1.2 installation.  This is a one-time step needed only for upgrade from hybrid version 1.2 to version 1.3.6  (or newer).- Find one of the IP addresses of the existing Cassandra in the same Kubernetes cluster where  you are upgrading the 1.2.0 installation.```\nkubectl -n namespace get pods -o wide\n```Where is your Apigee hybrid namespace.Make note of the IP address of a Cassandra node. For example:```\nkubectl -n apigee get pods -o wide\nNAME     READY STATUS RESTARTS AGE IP   NODE\napigee-cassandra-0 1/1  Running 0   33d 10.68.8.24 gke-example-cluster-rc5-apigee-data-c8bf1234-09kc\napigee-cassandra-1 1/1  Running 0   16d 10.68.8.33 gke-example-cluster-rc5-apigee-data-c9221ee7-10kc\napigee-cassandra-2 1/1  Running 0   23h 10.68.9.11 gke-example-cluster-rc5-apigee-data-d123e456-11kc\n```\n- Add the value for the`externalSeedHost`property:```\ncassandra:\n externalSeedHost: Cassandra_node_IP\n```Where is the IP of the cassandra node   ( **10.68.8.24** in the preceding example). **Note:** You will remove the`externalSeedHost`property in a later step after your new Cassandra is running and verified.\n- In the **new** `apigeectl/`directory, run`apigeectl init`,`apigeectl apply`, and`apigeectl check-ready`:- Initialize hybrid 1.3.6:```\napigeectl init -f overrides_1.3.yaml\n```Where is your edited overrides.yaml file.\n- In hybrid version 1.3, the syntax of the`--dry-run`flag depends on the  version of`kubectl`you are running. Check the version of`kubectl`:```\ngcloud version\n```\n- Check for errors with a dry run: `kubectl` version 1.17 and older:```\napigeectl apply -f overrides_1.3.yaml --dry-run=true\n``` `kubectl` version 1.18 and newer:```\napigeectl apply -f overrides_1.3.yaml --dry-run=client\n```\n- Apply your overrides. Select and follow the instructions for production  environments or demo/experimental environments, depending on your installation.During the upgrade process each component will perform a rolling restart.   Therefore, for production environments, it is best to apply the upgrade to one component at   a time.\nFor production environments you should upgrade each hybrid component individually, and    check the status of the upgraded component before proceding to the next component.- Apply your overrides to upgrade Cassandra:```\napigeectl apply -f overrides_1.3.yaml --datastore\n```\n- Check completion:```\nkubectl -n namespace get pods\n```Where is your Apigee hybrid namespace.Proceed to the next step only when the pods are ready.\n- Apply your overrides to upgrade Telemetry components and check completion:```\napigeectl apply -f overrides_1.3.yaml --telemetry\n``````\nkubectl -n namespace get pods\n```\n- Apply your overrides to upgrade the org-level components (MART, Watcher and Apigee    Connect) and check completion:```\napigeectl apply -f overrides_1.3.yaml --org\n``````\nkubectl -n namespace get pods\n```\n- Apply your overrides to upgrade your environments. You have two choices:- Apply your overrides to one environment at a time and check completion. Repeat     this step for each environment:```\napigeectl apply -f overrides_1.3.yaml --env env_name\n``````\nkubectl -n namespace get pods\n```Where is the name of the environment you are upgrading.\n- Apply your overrides to all environments at once and check completion:```\napigeectl apply -f overrides_1.3.yaml --all-envs\n``````\nkubectl -n namespace get pods\n```In most demo or experimental environments, you can apply the overrides to all components    at once. If your demo/experimental environment large and complex or closely mimics a    production environment, you may want to use the instructions for upgrading [production environments](#production) - ```\napigeectl apply -f overrides_1.3.yaml\n```\n- Check the status:```\napigeectl check-ready -f overrides_1.3.yaml\n```For more instructions see [GKE Hybrid setup - Step 5: Install hybrid on GKE](/apigee/docs/hybrid/v1.3/install-apply-hybrid) .\n- Once you have hybrid 1.3 setup up and running, verify that all of the Cassandra nodes  (old and new) are part of the same Cassandra cluster. Run the following command on one of the  Cassandra nodes:```\nkubectl -n namespace get pods\nkubectl -n namespace exec old Cassandra pod -- nodetool status\n```In the following example output, 10.68.8.24 is from version 1.2.0 and is the node IP you  used as the `externalSeedHost` . 10.68.7.11 is from version 1.3.6:```\nDatacenter: dc-1\n================\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n-- Address  Load  Tokens  Owns (effective) Host ID        Rack\nUN 10.68.8.24 379.41 KiB 256   50.8%    11bbd43b-af64-464b-a96d-0d6dd0521de1 ra-1\nUN 10.68.7.11 1.35 MiB 256   49.2%    0b4d9e08-f353-413a-b4a9-7d18a8d07e58 ra-1\n```If they are not in the same cluster, [check the  externalSeedHost value](#add-externalseedhost) .\n- Once all the pods are up and running, remove`externalSeedHost`from the  your overrides file and run`apigeectl apply`again with`--datastore`option:```\napigeectl apply --datastore -f overrides_1.3.6.yaml\n```\n## \n Clean up\nOnce you have verified all the pods are up and healthy and the ASM endpoints are valid for the new installation, you can clean up:- Hybrid 1.2 resources.\n- The older Cassandra instance\n- Istio 1.4.6 resources.### \n Delete Hybrid 1.2.0 resources\n **Note:** This procedure requires the`apigeectl`version 1.2 command in your backed up directory. If you need to download another copy of`apigeectl`version 1.2, you can use the following command:```\ncurl -LO \\\n https://storage.googleapis.com/apigee-public/apigee-hybrid-setup/1.2.0/apigeectl_your_system.tar.gz\n```Where is one of `linux_32` , `linux_64` , `mac_32` , or `mac_64` .- Remove the 1.2.0 virtualhost routing details:```\n$APIGEECTL_HOME-v1.2/apigeectl delete -s virtualhost -f 1.2.0_overrides.yaml\n```Where is the directory where you backed up your `apigeectl` version 1.2 directory.\n- If the endpoint is still working as expected and you have verified all the 1.3.0 components  are working run the following command to delete the hybrid 1.2.0 resources:```\n$APIGEECTL_HOME-v1.2/apigeectl delete -c \"mart,connect-agent,synchronizer,runtime,udca,metrics,logger\" \\\n -f 1.2.0_overrides.yaml\n```### \n Decommission the older Cassandra instance\n- `cd`into the newly installed`apigeectl`directory.\n- Run the`tools/cas_cleanup.sh`script.This script decommissions the old Cassandra pod from the Cassandra ring, deletes old STS, and deletes PVCs.```\nbash cas_cleanup.sh Apigee namespace\n```### \n Delete Istio version 1.4.6 resources\n **Note:** Deleting the Istio Istio version 1.4.6 resources will also delete the MART ingress as well. MART ingress is replaced with Apigee Connect in Apigee hybrid version 1.3.- Run the following command to delete the most recent Istio v.1.4.6 resources:```\nkubectl delete all -n istio-system --selector \\\n 'app in (apigee-mart-istio-ingressgateway, galley, security, istio-nodeagent, istio-mixer, sidecarInjectorWebhook, istio-mixer)'\n```\n- Run the following commands to delete older jobs from the Istio 1.4.6 installation:```\nkubectl -n istio-system delete job istio-init-crd-10-1.4.6\nkubectl -n istio-system delete job istio-init-crd-11-1.4.6\nkubectl -n istio-system delete job istio-init-crd-14-1.4.6\n```\n **Congratulations!** You have successfully upgraded to Apigee hybrid version 1.3.6.", "guide": "Apigee"}