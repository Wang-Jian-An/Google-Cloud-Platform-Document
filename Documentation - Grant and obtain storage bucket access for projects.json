{"title": "Documentation - Grant and obtain storage bucket access for projects", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Grant and obtain storage bucket access for projects\nThis page shows you how to grant and obtain access for Google Distributed Cloud Hosted (GDCH) storage buckets.\n", "content": "## Before you begin\nA project namespace manages bucket resources in the org admin cluster. You must have a [project](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/project-management) to work with buckets and objects.\n## Grant bucket access\nYou can provide bucket access to other users or service accounts by creating and applying RoleBindings with predefined Roles.\n### Predefined roles\n- **project-bucket-object-viewer:** This lets a user list all buckets in the project, list objects in those buckets, and read objects and object metadata. It does not let you write operations on objects. For example: uploading, overwriting, deleting.\n- **project-bucket-object-admin:** This lets a user list all buckets in the project, and write and read operations on objects. For example: uploading, overwriting, deleting.\n- **project-bucket-admin:** This lets users manage all buckets in the given namespace, as well as all the objects in those buckets.\nTo see a complete list of the permissions granted for the preceding Roles, see the [preset Role permissions](#preset_role_permissions) section.\nAsk your Project IAM Admin to grant you permissions to create RoleBindings. The following is an example of creating a RoleBinding for granting access to a user and a service account:\n- Create a YAML file on your system, such as `rolebinding-object-admin-all-buckets.yaml` .```\n# Example file name:# rolebinding-object-admin-all-buckets.yamlapiVersion: rbac.authorization.k8s.io/v1kind: RoleBindingmetadata:\u00a0 namespace: NAMESPACE_NAME\u00a0 name: readwrite-all-bucketsroleRef:\u00a0 kind: Role\u00a0 name: project-bucket-object-admin\u00a0 apiGroup: rbac.authorization.k8s.iosubjects:- kind: ServiceAccount\u00a0 namespace: NAMESPACE_NAME\u00a0 name: SA_NAME- kind: User\u00a0 namespace: NAMESPACE_NAME\u00a0 name: bob@example.com\u00a0 apiGroup: rbac.authorization.k8s.io\u00a0 # Could be bob or bob@example.com based on your organization settings.\n```\n- Apply the YAML file:```\nkubectl apply \\-f rolebinding-object-admin-all-buckets.yaml\n```## Obtain bucket access credentials\nOnce you grant access to a bucket, it creates the access credentials in a Secret.\nThe format of the secret name is `object-storage-key-` `` `-` `` `-` `` .\n- Values for``are:- `std`for the`Standard`storage class.\n- Values for``are:- `user`for User.\n- `sa`for ServiceAccount.\n- ``is the base32-encoded SHA256 hash of the subject name.\nAs an example, the user `bob@foo.com` has two secrets named:\n- `object-storage-key-std-user-oy6jdqd6bxfoqcecn2ozv6utepr5bgh355vfku7th5pmejqubdja`\n### Obtain user access\nFor a user subject, the Secret is in the `object-storage-access-keys` namespace in the Organization cluster.\n- Run the following command to find the secret name:```\nkubectl auth can-i --list --namespace object-storage-access-keys | grep object-storage-key```You receive an output similar to the following:```\nsecrets  []  [object-storage-key-nl-user-oy6jdqd6bxfoqcecn2ozv6utepr5bgh355vfku7th5pmejqubdja,object-storage-key-std-user-oy6jdqd6bxfoqcecn2ozv6utepr5bgh355vfku7th5pmejqubdja]  [get]\n```\n- Get the contents of the corresponding secret to access buckets in the `Standard` storage class:```\nkubectl get -o yaml --namespace object-storage-access-keys secret object-storage-key-std-user-oy6jdqd6bxfoqcecn2ozv6utepr5bgh355vfku7th5pmejqubdja\n```You receive an output similar to the following:```\ndata:\n access-key-id: MEhYM08wWUMySjcyMkVKTFBKRU8=\n create-time: MjAyMi0wNy0yMiAwMTowODo1OS40MTQyMTE3MDMgKzAwMDAgVVRDIG09KzE5OTAuMzQ3OTE2MTc3\n secret-access-key: Ump0MVRleVN4SmhCSVJhbmlnVDAwbTJZc0IvRlJVendqR0JuYVhiVA==\n```\n- Decode the access key ID and secret:```\necho \"MEhYM08wWUMySjcyMkVKTFBKRU8=\" | base64 -d \\\u00a0 \u00a0 && echo \\\u00a0 \u00a0 && echo \"Ump0MVRleVN4SmhCSVJhbmlnVDAwbTJZc0IvRlJVendqR0JuYVhiVA==\" | base64 -d\n```You receive an output similar to the following:```\n0HX3O0YC2J722EJLPJEO\nRjt1TeySxJhBIRanigT00m2YsB/FRUzwjGBnaXbT\n```\n- Follow the section, [Configure the gdcloud CLI](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/install-configure-storage-cli#gdcloud-storage-configure) , with the resulting information.\n### Obtain service account access\n**Note:** Users are not allowed to run workloads, which run as service accounts, in the org admin cluster where the service accounts' access key Secrets were initially created. Users will not be able to grant workloads access to those Secrets in the org admin cluster. Those Secrets will be propagated to the Project namespaces in the appropriate user clusters, where users will be able to access them (if they have the appropriate RBAC Roles within that Project).\nFor a service account (SA) subject, find the secret name from the user cluster.\n- For standard storage class, run the following command to get the secret name:```\nkubectl get -n=<PROJECT-NAME> serviceaccount <SA-NAME> -o json | jq -r '.secrets[] | select(.name | test(\"object-storage-key-std\"))'\n```\n- Then, you can manually look through the listed secret names or use `grep` to find `object-storage-key-(std|nl)` . For the latter option, run the following:```\nkubectl get -n=<PROJECT-NAME> serviceaccount <SA-NAME> -o=jsonpath='{.secrets}{\"\\n\"}' | grep object-storage-key-(std|nl)\n```\n- You can reference the Secret in your pod as [environment variables](https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables) or [files](https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-files-from-a-pod) .\n### Preset role permissions\nThis role grants permissions to get and list objects and objects' metadata in the bucket.\nA list of all object storage permissions the project-bucket-object-viewer verb grants are the following:\n- **Bucket API permissions** :- get\n- list\n- watch\n- **S3 object storage permissions** :- GetObject\n- GetObjectAcl\n- GetObjectLegalHold\n- GetObjectRetention\n- GetObjectTagging\n- GetObjectVersion\n- GetObjectVersionTagging\n- ListBucket\n- ListBucketVersions\n- ListBucketMultipartUploads\n- ListMultipartUploadParts\nThis role grants permissions to put and delete objects, and object versions and tags in the bucket. Additionally, it also grants all permissions in the `project-bucket-object-viewer` .\nA list of all additional object storage permissions the Role grants are the following:\n- **S3 Object storage permissions** :- AbortMultipartUpload\n- DeleteObject\n- DeleteObjectTagging\n- DeleteObjectVersion\n- DeleteObjectVersionTagging\n- PutObject\n- PutObjectTagging\n- PutObjectVersionTagging\n- PutOverwriteObject\n- RestoreObject\nThis role grants permissions to create, update, or delete Bucket resources in the project namespace. Additionally, it also grants all permissions in `project-bucket-object-admin` .\nA list of additional permissions the Role grants are the following:\n- **Bucket API permissions** :- Create\n- Update\n- Delete", "guide": "Documentation"}