{"title": "Compute Engine - Verifying VM Manager setup", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Verifying VM Manager setup\nUse this document to verify that VM Manager is set up properly. For information about setting up VM Manager, see [Setting up VM Manager](/compute/docs/manage-os) .\nTo verify the setup, you can either use the [troubleshoot command](#gcloud-command) or perform [manual checks](#manual-check) on the virtual machine (VM) instance.\n", "content": "## Before you begin\n- For Windows VMs, use [PowerShell 3.0 or later](https://docs.microsoft.com/powershell/) .\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\n## Use the troubleshoot command\nUse the [os-config troubleshoot command](/sdk/gcloud/reference/compute/os-config/troubleshoot) to verify the setup. If any of the checks fail, you are provided with feedback on how to fix the issue.\n```\ngcloud compute os-config troubleshoot VM_NAME \\\n --zone=ZONE\n```\nReplace the following:\n- ``: the name of the VM instance that you want to troubleshoot\n- ``: the zone where the instance is located\n### Examples\n- Example 1: shows the output for the`os-config troubleshoot`command when the VM instance has issues with the setup\n- Example 2: shows the output for the `os-config troubleshoot` command when the VM instance is properly set up\nTo troubleshoot a VM instance called `my-instance-1` in zone `asia-east2-b` , run the following:\n```\ngcloud compute os-config troubleshoot my-instance-1 \\\n --zone=asia-east2-b\n```\nThe output resembles the following:\n```\nOS Config troubleshooter tool is checking if there are issues with the\nVM Manager setup for this VM instance.\n> Is the OS Config API enabled? Yes\n> Is the OS Config agent enabled? Yes\n> Is the OS Config agent up to date? No\nThe version of OS Config agent running on this VM instance is not the\nlatest version.\nSee https://cloud.google.com/compute/docs/manage-os/upgrade-vm-manager#update-agent\non how to update the agent.\n```\nTo troubleshoot a VM instance called `my-instance-2` in zone `us-west1-b` , run the following:\n```\ngcloud compute os-config troubleshoot my-instance-2 \\\n --zone=us-west1-b\n```\nThe output resembles the following:\n```\nOS Config troubleshooter tool is checking if there are issues with the\nVM Manager setup for this VM instance.\n> Is the OS Config API enabled? Yes\n> Is the OS Config agent enabled? Yes\n> Is the OS Config agent up to date? Yes\n> Is a service account present on the instance? Yes\n> Is the OS Config Service account present for this instance? Yes\n> Does this instance have a public IP or Private Google Access? Yes\nThis instance has a public IP.\n```\n## Manual verification\nTo manually verify that VM Manager is properly set up, complete the following checks:\n- [OS Config API enabled](#api-enabled) \n- [OS Config metadata is enabled](#metadata-enabled) \n- [OS Config agent installed and running](#agent-enabled) \n- [Service account enabled](#service-account-enabled) \n- [VM can communicate with the OS Config API](#communication-enabled) \nIf VM Manager is properly setup but you still have issues, see [Troubleshooting VM Manager](/compute/docs/troubleshooting/vm-manager/troubleshoot-vm-manager) .\n### Check if OS Config API is enabled\nIn your Google Cloud project, check if the API is enabled.\nIn the Google Cloud console, go to the **OS Config API** page.\n [Go to OS Config API](https://console.cloud.google.com/apis/api/osconfig.googleapis.com/overview) \n```\ngcloud services list --enabled\n```\nIf the API is enabled, the output resembles the following:\n```\nosconfig.googleapis.com    OS Config API\n```\nIf the API is not enabled, enable the [OS Config API](/compute/docs/manage-os#enable-service-api) .\n### Check if metadata is enabled\nFor project metadata, on the VM, complete the following steps:- Query the project attributes endpoint:```\ncurl \"http://metadata.google.internal/computeMetadata/v1/project/attributes/\" \\\n-H \"Metadata-Flavor: Google\"\n```If the agent metadata value is set, the output resembles the following:```\nenable-osconfig\n```\n- If the `enable-osconfig` value displays, query the endpoint:```\ncurl \"http://metadata.google.internal/computeMetadata/v1/project/attributes/enable-osconfig\" \\\n-H \"Metadata-Flavor: Google\"\n```If enabled, the endpoint returns `TRUE` .\n **Note:** To check the instance metadata setting, replace `/project/attributes/` with `/instance/attributes/` in the request URL.\nIf the metadata is not enabled, enable the [OS Config metadata](/compute/docs/manage-os#enable-metadata) .\nFor project metadata, on a VM, open a PowerShell terminal as an administrator and run the following command:- Query the project attributes endpoint:```\n$value = (Invoke-RestMethod `\n   -Headers @{'Metadata-Flavor' = 'Google'} `\n   -Uri \"http://metadata.google.internal/computeMetadata/v1/project/attributes/\")\n$value\n```If the agent metadata value is set, the output resembles the following:```\nenable-osconfig\n```\n- If the `enable-osconfig` value displays, query the endpoint:```\n$value = (Invoke-RestMethod `\n   -Headers @{'Metadata-Flavor' = 'Google'} `\n   -Uri \"http://metadata.google.internal/computeMetadata/v1/project/attributes/enable-osconfig\")\n$value\n```If enabled, the endpoint returns `TRUE` . **Note:** To check the instance metadata setting, replace `/project/attributes/` with `/instance/attributes/` in the request URL.\nIf the metadata is not enabled, enable the [OS Config metadata](/compute/docs/manage-os#enable-metadata) .\n### Check if the OS Config agent is installed and running\nTo check whether your Linux VM has the agent installed, run the following command:\n```\nsudo systemctl status google-osconfig-agent\n```\nIf the agent is installed and running, the output resembles the following:\n```\ngoogle-osconfig-agent.service - Google OSConfig Agent\nLoaded: loaded (/lib/systemd/system/google-osconfig-agent.service; enabled; vendor preset:\nActive: active (running) since Wed 2020-01-15 00:14:22 UTC; 6min ago\nMain PID: 369 (google_osconfig)\n Tasks: 8 (limit: 4374)\nMemory: 102.7M\nCGroup: /system.slice/google-osconfig-agent.service\n  \u2514\u2500369 /usr/bin/google_osconfig_agent\n```\nIf the agent is not installed, install the [OS Config agent](/compute/docs/manage-os#agent-install) .\nTo check whether your Windows VM has the agent installed, run the following command:\n```\nPowerShell Get-Service google_osconfig_agent\n```\nIf the agent is installed and running, the output resembles the following:\n```\nStatus Name    DisplayName\n------ ----    ----------Running google_osconfig... Google OSConfig Agent\n```\nIf the agent is not installed, install the [OS Config agent](/compute/docs/manage-os#agent-install) .\n### Check if the service account is enabled\nFor information about service account requirements, see [Setup overview](/compute/docs/manage-os#overview) .\nOn the VM, run the following:\n```\ncurl \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/\" \\\n-H \"Metadata-Flavor: Google\"\n```\nThe output should at least include the default service account.\n```\ndefault/\n```\nOn the VM, open a PowerShell terminal as an administrator and run the following command:\n```\n$value = (Invoke-RestMethod `\n   -Headers @{'Metadata-Flavor' = 'Google'} `\n   -Uri \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/\")\n$value\n```\nThe output should at least include the default service account.\n```\ndefault/\n```\n### Check if the VM can communicate with the OS Config API\nTo check if the VM can communicate with the OS Config API, run the following command on your Linux or Windows VM:\n```\nping osconfig.googleapis.com\n```\nTo stop pinging the OS Config API, press **Control + C** .\nIf your VM is running within a private VPC network and does not have public internet access, check that you have enabled [Private Google Access](/vpc/docs/configure-private-google-access) .\nAfter you enable Private Google Access, check that the VM can communicate with the OS Config API.\nOn the VM, run the following:\n```\n curl --ssl 'https://osconfig.googleapis.com/$discovery/rest' | head\n```\nIf the VM can communicate with the OS Config API, the command output is similar to the following:\n```\n% Total \u00a0 \u00a0% Received % Xferd \u00a0Average Speed \u00a0 Time \u00a0 \u00a0Time \u00a0 \u00a0 Time \u00a0Current\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Dload \u00a0Upload \u00a0 Total \u00a0 Spent \u00a0 \u00a0Left \u00a0Speed0 \u00a0 \u00a0 0 \u00a0 \u00a00 \u00a0 \u00a0 0 \u00a0 \u00a00 \u00a0 \u00a0 0 \u00a0 \u00a0 \u00a00 \u00a0 \u00a0 \u00a00 --:--:-- --:--:-- --:--:-- \u00a0 \u00a0 0{\"discoveryVersion\": \"v1\",\"baseUrl\": \"https://osconfig.googleapis.com/\",\"ownerName\": \"Google\",\"version\": \"v1beta\",\"schemas\": {\u00a0 \"GooSettings\": {\u00a0 \u00a0 \"description\": \"Googet patching is performed by running `googet update`.\",\u00a0 \u00a0 \"properties\": {},\u00a0 \u00a0 \"id\": \"GooSettings\",100 \u00a09569 \u00a0 \u00a00 \u00a09569 \u00a0 \u00a00 \u00a0 \u00a0 0 \u00a0 198k \u00a0 \u00a0 \u00a00 --:--:-- --:--:-- --:--:-- \u00a0198k\n```\nOn the VM, open a PowerShell terminal as an administrator and run the following:\n```\n Invoke-RestMethod -Headers @{'Metadata-Flavor' = 'Google'}\n -Uri 'https://osconfig.googleapis.com/$discovery/rest'\n```\n## What's next?\n- [View operating system details](/compute/docs/instances/view-os-details) .\n- [Create an OS policy assignment](/compute/docs/os-configuration-management/create-os-policy-assignment) .\n- [Create patch jobs](/compute/docs/os-patch-management/create-patch-job) .\n- [Troubleshooting VM Manager](/compute/docs/troubleshooting/vm-manager/troubleshoot-vm-manager) .", "guide": "Compute Engine"}