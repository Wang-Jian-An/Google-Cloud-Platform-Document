{"title": "Cloud Architecture Center - Deploy RIOT Live Migration to migrate to Redis Enterprise Cloud", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Deploy RIOT Live Migration to migrate to Redis Enterprise Cloud\nLast reviewed 2024-01-29 UTC\nThis document describes how you deploy [RIOT Live Migration to migrate to Redis Enterprise Cloud](/architecture/riot-live-migration-redis-enterprise-cloud) . Database architects, DevOps and SRE teams, or Network administrators can use this architecture to offer near-zero downtime migrations to their teams. This document assumes that you're familiar with using the Google Cloud CLI and Compute Engine.\n", "content": "## Architecture\nThe following diagram shows the reference architecture that uses RIOT Live Migration Service to migrate Redis-compatible sources to Redis Enterprise Cloud.\nFor details about the architecture, see [RIOT Live Migration to migrate to Redis Enterprise Cloud](/architecture/riot-live-migration-redis-enterprise-cloud) .\nThe sample deployment in this document uses the following architecture in which the source is a Redis OSS on a Compute Engine VM:\nIn the diagram, a Redis OSS instance and RIOT are consolidated into a single Compute Engine VM for simplicity. In a production environment, we recommend that RIOT always runs on its own VM to help ensure better performance.\nThe sample deployment architecture contains the following components:\n- **Source** : Redis OSS instance running on Compute Engine VM.\n- **Target** : Redis Enterprise Cloud running in the Redis managed VPC.\n- **Migration Service** : RIOT running on the same Compute Engine VM as Redis OSS.\n- **Network Setup** : VPC Peering between a managed VPC and the Redis managed VPC.\nThe RIOT migration tool has near-zero downtime. During migration from Redis OSS (source) to Redis Enterprise Cloud (target), your applications can still access Redis OSS without impact or service disruption. During the migration process, after the initial load of data from Redis OSS, RIOT Live Migration continues to migrate changes from Redis OSS as they occur.\n## Objectives\n- Set up your Redis OSS source by creating and loading data.\n- Set up a migration target cluster in Redis Enterprise Cloud.\n- Use RIOT Live Migration to migrate data from Redis OSS to Redis Enterprise Cloud.\n- Understand testing, cutover, and fallback strategies.## Costs\nDeployment of this architecture uses the following billable components of Google Cloud:\n- [Compute Engine](/compute/vm-instance-pricing) costs for running Redis OSS and RIOT instances.\n- [Redis Enterprise Cloud](https://console.cloud.google.com/marketplace/product/redis-marketplace-isaas/redis-enterprise-cloud-flexible-plan) cost procured through Google Cloud Marketplace.\n- [Network charges](/vpc/network-pricing) incurred from data migration traffic between zones and regions.## Before you begin\nComplete the following steps to set up an environment for your migration.\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the BigQuery, Pub/Sub, Dataflow, and Compute Engine APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=bigquery.googleapis.com,pubsub.googleapis.com,dataflow.googleapis.com,compute.googleapis.com) \n- To get the permissions that you need to complete this deployment, ask your administrator to grant you the Billing Administrator ( `roles/billing.admin` ) IAM role on your organization. For more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .You might also be able to get the required permissions through [custom roles](/iam/docs/creating-custom-roles) or other [predefined roles](/iam/docs/understanding-roles) .## Set up a Redis OSS instance\nTo start the deployment, you install the Redis OSS instance on a Compute Engine VM. The instance serves as your source instance.\n### Install the Redis OSS instance\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- In Cloud Shell, create an Ubuntu VM:```\ngcloud compute instances create redis-oss-riot-vm \\\u00a0 --image-family=ubuntu-2004-lts \\\u00a0 \u00a0 --image-project=ubuntu-os-cloud \\\u00a0 \u00a0 --zone=us-central1-a \\\u00a0 \u00a0 --machine-type=e2-medium \\\u00a0 \u00a0 --network=VPC_NETWORK_NAME \\\u00a0 \u00a0 --subnet=VPC_SUBNETWORK_NAME \\\u00a0 --metadata=startup-script='#! /bin/bash\u00a0 \u00a0 apt-get update -y\u00a0 \u00a0 apt-get install redis-tools -y\u00a0 \u00a0 snap install redis'\n```Replace the following:- **VPC_NETWORK_NAME** : the name of your VPC network.\n- **VPC_SUBNETWORK_NAME** : the name of your VPC subnetwork.\n- Use an SSH connection to sign in to the Compute Engine instance that runs the Redis OSS instance:```\nPROJECT_ID=$(gcloud info --format='value(config.project)')gcloud compute ssh redis-oss-riot-vm --project $PROJECT_ID --zone us-central1-a\n```\n- Enable [keyspace notification](https://redis.io/docs/manual/keyspace-notifications/) for live migration, which is required by RIOT:```\nredis-cli config set notify-keyspace-events KEA\n```\n### Verify that the Redis OSS instance is operational\n- In Cloud Shell, launch the [Redis CLI](https://redis.io/docs/connect/cli/) :```\nredis-cli\n```\n- Set and get a simple key-value pair:```\nset my_key my_valueget my_keyunlink my_key\n```The output is the following:```\nOK\n\"my_value\"\n(integer) 1\n```You have now created and accessed your Redis OSS instance and confirmed that it's operational.## Insert sample data\nIn this section, you insert sample data into the Redis OSS instance and verify that the data is successfully inserted.\n- In Cloud Shell, launch the Redis CLI:```\nredis-cli\n```\n- Add the following six key-value pairs as the initial dataset. Enter each command individually and wait for the output `OK` before you enter the next key-value pair.```\nset tennis federer\n``````\nset soccer ronaldo\n``````\nset basketball curry\n``````\nset football montana\n``````\nset golf woods\n``````\nset swimmer phelps\n```\n- Verify that you added six key-value pairs successfully:```\nSCAN 0\n```The output is the following:```\n\"swimmer\"\n\"soccer\"\n\"football\"\n\"golf\"\n\"tennis\"\n\"basketball\"\n```\nAfter you set up and start the RIOT migration, the data is migrated to the target Redis Enterprise Cloud instance.\n## Install RIOT on the Redis OSS instance VM\nIn order to run RIOT, you need to make sure that your Compute Engine VM is appropriately sized. In general, we recommend that you size your VM to 8 VCPUs or larger, depending on the amount of data to be transported and the update frequency. For more information, see [Machine families resource and comparison guide](/compute/docs/machine-resource) .\n- In Cloud Shell, use an SSH connection to sign in to the Compute Engine instance that runs the Redis OSS instance:```\nPROJECT_ID=$(gcloud info --format='value(config.project)')gcloud compute ssh redis-oss-riot-vm --project $PROJECT_ID --zone us-central1-a\n```\n- Install JDK for RIOT:```\nsudo apt install default-jre -y\n```\n- Download and install RIOT:```\nsudo apt-get install unzipwget https://github.com/redis-developer/riot/releases/download/v2.19.0/riot-redis-2.19.0.zipunzip riot-redis-2.19.0.zip\n```\n- Verify that RIOT is installed correctly:```\n./riot-redis-2.19.0/bin/riot-redis -V\n```The output is similar to the following, which shows a RIOT logo and a version number: \nYou have now installed the RIOT migration tool on the Redis OSS instance and confirmed that it's operational.\n## Create a Redis Enterprise Cloud instance\n[Redis Enterprise Cloud](https://docs.redis.com/latest/rc/) is available through Cloud Marketplace. If you have a Redis Enterprise cluster set up as your target Redis Enterprise instance, follow the steps in this section. If you already have a Redis Enterprise cluster set up as your target database, you can skip this section and proceed to [Start the RIOT live migration](#start-riot-live-migration) .\n- In Cloud Marketplace, go to **Redis Enterprise Cloud Flexible - Payas You Go** . [Go to Redis Enterprise in Marketplace](https://console.cloud.google.com/marketplace/product/redis-marketplace-isaas/redis-enterprise-cloud-flexible-plan) For more information, see the instructions in the Redis document [Flexible subscriptions with Cloud Marketplace](https://docs.redis.com/latest/rc/cloud-integrations/gcp-marketplace/) .\n- Sign in to the [Redis console](https://app.redislabs.com/) using the Redis account information that you provided when you subscribed to Redis Enterprise Cloud Flexible.\n- Create a Flexible subscription by following the instructions in the Redis document [Create a Flexible subscription](https://docs.redis.com/latest/rc/subscriptions/create-flexible-subscription/) . Choose Google Cloud as your cloud vendor, and create a database with all the default settings.\n- Create a VPC peering between your Google Virtual Private Cloud and the Redis managed VPC by following the instructions in the Redis document [Enable VPC peering](https://docs.redis.com/latest/rc/security/vpc-peering/#gcp-vpc-peering) .\n- In the [Redis console](https://app.redislabs.com/) , go to **Subscription** , and then locate your **Redis Enterprise databaseconnection string** :- Make a note of the **Private endpoint IP and Port** , in the format of:```\nENDPOINT_IP:ENDPOINT_PORT\n```Where the values represent the following:- **ENDPOINT_IP** : the private endpoint IP address for the Redis Enterprise database.\n- **ENDPOINT_PORT** : the private endpoint port number for the Redis Enterprise database.\n- Make a note of the database password.\n## Start the RIOT live migration\nTo migrate the data from the Redis OSS (source) to Redis Enterprise Cloud (target) instance, do the following:\n- In Cloud Shell, use an SSH connection to sign in to the Compute Engine instance that runs the Redis OSS instance:```\nPROJECT_ID=$(gcloud info --format='value(config.project)')gcloud compute ssh redis-oss-riot-vm --project $PROJECT_ID --zone us-central1-a\n```\n- Initiate a live migration between the source and target. If your Redis OSS instance is on Redis 7.2, you need to use type-based replication. For information about using the `--type` option, see the Redis documentation [Type-based replication](https://developer.redis.com/riot/#_replicate_type_based) .```\n./riot-redis-2.19.0/bin/riot-redis -u redis://localhost:6379 replicate \u00a0\\-u redis://ENDPOINT_IP:ENDPOINT_PORT \\\u00a0 -a REDIS_ENTERPRISE_DB_PASSWORD \\\u00a0 --mode live\n```Replace the following with the values that you noted in the previous section:- **ENDPOINT_IP** : the private endpoint IP address for the Redis Enterprise cluster database.\n- **ENDPOINT_PORT** : the private endpoint port number for the Redis Enterprise cluster database.\n- **REDIS_ENTERPRISE_DB_PASSWORD** : the password for the Redis Enterprise cluster database.\nThe output is similar to the following:```\nListening ? % \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u25010/? (0:00:00 / ?) ?/s\\\nScanning 100% \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 6/6 (0:00:00 / 0:00:00) ?/s\n```## Verify the database migration\nIt's important to design and implement a database migration verification strategy to confirm that the database migration is successful. Although the verification strategy that you use depends on your specific use case, we recommend that you perform these checks for all migrations:\n- **Completeness check** : Verify that the initial key-value pairs successfully migrated from the Redis OSS to Redis Enterprise (initial load).\n- **Dynamic check** : Verify that changes in the source are being transferred to the target instance (ongoing migration).\n### Initial load\n- In Cloud Shell, use an SSH connection to sign in to the Compute Engine instance that runs the Redis OSS instance:```\nPROJECT_ID=$(gcloud info --format='value(config.project)')$ gcloud compute ssh redis-oss-riot-vm --project $PROJECT_ID --zone us-central1-a\n```\n- Launch the [Redis CLI](https://redis.io/docs/connect/cli/) :```\nredis-cli -u redis://ENDPOINT_IP:ENDPOINT_PORT \\-a REDIS_ENTERPRISE_DB_PASSWORD\n```\n- Verify that the six key-value pairs successfully migrated from Redis OSS to Redis Enterprise instance:```\nSCAN 0\n```The output is the following:```\n\"swimmer\"\n\"soccer\"\n\"football\"\n\"golf\"\n\"tennis\"\n\"basketball\"\n```\n- Get the value of the tennis key:```\nget tennis\n```The output is the following:```\n[return federer]\n```\n- Exit the Redis CLI:```\nexit\n```\n### Ongoing migration\nVerify that ongoing changes to the source Redis OSS are reflected in the target Redis Enterprise instance:\n- In Cloud Shell, use an SSH connection to sign in to the Redis OSS VM.\n- Launch the Redis CLI:```\nredis-cli\n```\n- Add new key-value pairs:- Add a new `runner bolt` pair:```\nset runner bolt\n```\n- Upsert a new `tennis alcaraz` pair:```\nset tennis alcaraz\n```\nThe output for each of these commands is the following:```\nOK\n```\n- In the Redis Enterprise instance, observe that new key-value pairs are added:```\nget runner\n```The output is the following:```\n[return bolt]\n```\n- To verify that all key-value pairs are present, check key counts:```\nredis-cli info keyspace and redis-cli -u <REMOTE> info keyspace\n```The output is the following:```\n# Keyspace\ndb0:keys=7,expires=0,avg_ttl=0\n```\nYou have now verified that RIOT Live Migration has automatically migrated all the key-value pairs from the source Redis OSS instance and any ongoing changes to the source.\n## Cut over from the source to the target\nAfter you verify the database migration, you can perform a cutover from the source Redis OSS instance to the target Redis Enterprise instance:\n- Suspend client write access to the source Redis OSS instance by using [Redis Access Control List](https://redis.io/docs/management/security/acl/) .\n- Unless you need to preserve the source database for your fallback strategy, decommission the source Redis OSS by removing the VM instance.\n- Migrate the client to the same region as the Redis Enterprise database instance. For information, see the documentation for your client host.\n- In the [Redis console](https://app.redislabs.com/) , locate the private endpoint of the Redis Enterprise database instance and update your client's Redis connection to the private endpoint. For more information, see [View and edit databases](https://docs.redis.com/latest/rc/databases/view-edit-database/) in the Redis documentation.\n- In Cloud Shell, stop the RIOT process by pressing **Ctrl+C** .## Prepare a fallback strategy\nAfter the cutover is finished, the target Redis Enterprise instance is the system of record; the source Redis OSS instance is out of date and eventually removed. However, you might want to fall back to the source Redis OSS instance in case of severe failures in the new target Redis Enterprise instance.\nTo fall back from such failures, you might want to keep the original source Redis OSS instance up to date with the target database changes. When you're confident that the new target instance is reliable, you can shut down the source instance.\n## Clean up\nThe following sections explain how you can avoid future charges for your Google Cloud project and the Redis resources that you used in this deployment.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.### Delete the Redis Enterprise database\nTo delete the Redis Enterprise database, see [Delete Database](https://docs.redis.com/latest/rc/databases/delete-database/) in the Redis documentation\n## What's next\n- Learn how to [Define the scope of your migration to Redis Enterprise Cloud](/architecture/riot-live-migration-redis-enterprise-cloud/assessment) .\n- Read [Google Cloud data migration content](/solutions/database-migration) .\n- For more in-depth documentation and best practices, review [RIOT documentation](https://developer.redis.com/riot/) .\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .## Contributors\nAuthors:\n- [Saurabh Kumar](https://www.linkedin.com/in/saurabh-kumar-48556a19) | ISV Partner Engineer\n- [Gilbert Lau](https://www.linkedin.com/in/gilau) | Principal Cloud Architect, Redis\nOther contributors:\n- [Chris Mague](https://www.linkedin.com/in/chris-mague-35b1624) | Customer Engineer, Data Management\n- [Gabe Weiss](https://www.linkedin.com/in/weissgabriel) | Developer Advocacy Manager\n- [Marco Ferrari](https://www.linkedin.com/in/ferrarimark) | Cloud Solutions Architect", "guide": "Cloud Architecture Center"}