{"title": "Apigee - Using Anthos Service Mesh", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Using Anthos Service Mesh\nYou are currently viewing version 1.8 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nStarting with Apigee hybrid version 1.8, Apigee hybrid uses Apigee ingress gateway to provide an ingress gateway for your hybrid installation. If you prefer to use Anthos Service Mesh for ingress, follow these steps to install Anthos Service Mesh in your cluster.\n", "content": "## \n Supported Anthos Service Mesh versions\nSee [Apigee hybrid: supported platforms](/apigee/docs/hybrid/supported-platforms) for the Anthos Service Mesh versions supported in hybrid version 1.8.\nIf you are upgrading your hybrid installation, follow the instructions in [Upgrade Anthos Service Mesh](/apigee/docs/hybrid/v1.8/upgrade#upgrade-Anthos%20Service%20Mesh) .\n## \n Install Anthos Service Mesh\nPerform these steps on a fresh Apigee hybrid installation only if you are not using Apigee ingress gateway.\nPerform the procedures using the Anthos Service Mesh documentation appropriate for your platform:\nThe instructions to install and configure Anthos Service Mesh are different depending on your platform. The platforms are divided into the following categories:\n- **GKE** : Google Kubernetes Engine clusters running on Google Cloud.\n- **Outside Google Cloud** : Anthos clusters running on:- **Anthos clusters on VMware (GKE on-prem)** \n- **Anthos on bare metal** \n- **Anthos clusters on AWS** \n- **Amazon EKS** \n- **Other Kubernetes Platforms** : Conformant clusters created and running on:- **AKS** \n- **EKS** \n- **OpenShift** The sequence for installing Anthos Service Mesh is as follows:- Prepare for the installation.\n- Install the new version of Anthos Service Mesh.\n### \n    Prepare to install Anthos Service Mesh\n    \n- Review the requirements in [Upgrade Anthos     Service Mesh](/service-mesh/v1.15/docs/unified-install/upgrade) , but do not perform the upgrade yet.\n- Create a new`overlay.yaml`file or verify that your existing`overlay.yaml`contains the following contents:```\napiVersion: install.istio.io/v1alpha1kind: IstioOperatorspec:\u00a0 components:\u00a0 \u00a0 ingressGateways:\u00a0 \u00a0 - name: istio-ingressgateway\u00a0 \u00a0 \u00a0 enabled: true\u00a0 \u00a0 \u00a0 k8s:\u00a0 \u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # default node selector, if different or not using node selectors, change accordingly.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cloud.google.com/gke-nodepool: apigee-runtime\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 1000m\u00a0 \u00a0 \u00a0 \u00a0 service:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: LoadBalancer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 loadBalancerIP: STATIC_IP # If you do not have a reserved static IP, leave this out.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http-status-port\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 15021\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 80\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: https\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 443\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8443\u00a0 meshConfig:\u00a0 \u00a0 accessLogFormat:\u00a0 \u00a0 \u00a0 '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n```\n- Follow the instructions in the following sections in the Anthos Service Mesh documentation: **Important:** Make sure to follow the instructions to     upgrade Anthos Service Mesh with optional features, and to include your`overlay.yaml`.- [Download      asmcli](/service-mesh/v1.15/docs/unified-install/install-dependent-tools#download_asmcli) \n- [Grant      cluster admin permissions](/service-mesh/v1.15/docs/unified-install/install-dependent-tools#grant_cluster_admin_permissions) \n- [Validate      project and cluster](/service-mesh/v1.15/docs/unified-install/install-dependent-tools#validate_project_and_cluster) \n- [Upgrade      with optional features](/service-mesh/v1.15/docs/unified-install/upgrade#upgrade_with_optional_features) . Stop before starting the \"Upgrade Gateways section\".These instructions cover upgrading Anthos Service Mesh on:- **Anthos clusters on VMware (GKE on-prem)** \n- **Anthos on bare metal** \n- **Anthos clusters on AWS** \n- **Amazon EKS** \nThe sequence for installing Anthos Service Mesh is as follows:- Prepare for the installation.\n- Install the new version of Anthos Service Mesh.\n### \n    Prepare to install Anthos Service Mesh\n    \n- Review the requirements in [Upgrade Anthos     Service Mesh](/service-mesh/v1.15/docs/unified-install/upgrade) , but do not perform the upgrade yet.\n- Create a new`overlay.yaml`file or verify that your existing`overlay.yaml`contains the following contents:```\napiVersion: install.istio.io/v1alpha1kind: IstioOperatorspec: \u00a0\u00a0 components:\u00a0 \u00a0 ingressGateways:\u00a0 \u00a0 - name: istio-ingressgateway\u00a0 \u00a0 \u00a0 enabled: true\u00a0 \u00a0 \u00a0 k8s:\u00a0 \u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # default node selector, if different or not using node selectors, change accordingly.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cloud.google.com/gke-nodepool: apigee-runtime\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 1000m\u00a0 \u00a0 \u00a0 \u00a0 service:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: LoadBalancer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 loadBalancerIP: STATIC_IP # If you do not have a reserved static IP, leave this out.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http-status-port\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 15021\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 80\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: https\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 443\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8443\u00a0 values:\u00a0 \u00a0 gateways:\u00a0 \u00a0 \u00a0 istio-ingressgateway:\u00a0 \u00a0 \u00a0 \u00a0 runAsRoot: true\u00a0 meshConfig:\u00a0 \u00a0 accessLogFormat:\u00a0 \u00a0 \u00a0 '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n```\n- Follow the instructions in the following sections in the Anthos Service Mesh documentation: **Important:** Make sure to follow the instructions to     upgrade Anthos Service Mesh with optional features, and to include your`overlay.yaml`.- [Download      asmcli](/service-mesh/v1.15/docs/unified-install/install-dependent-tools#download_asmcli) \n- [Grant      cluster admin permissions](/service-mesh/v1.15/docs/unified-install/install-dependent-tools#grant_cluster_admin_permissions) \n- [Validate      project and cluster](/service-mesh/v1.15/docs/unified-install/install-dependent-tools#validate_project_and_cluster) \n- [Upgrade      with optional features](/service-mesh/v1.15/docs/unified-install/upgrade#upgrade_with_optional_features) . Stop before starting the \"Upgrade Gateways section\".\n### \n Preparing to install Anthos Service Mesh\n \nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-linux-amd64.tar.gz\n```\nDownload the signature file and use OpenSSL to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-linux-amd64.tar.gz.1.sig\n``````\nopenssl dgst -verify /dev/stdin -signature istio-1.13.9-asm.10-linux-amd64.tar.gz.1.sig istio-1.13.9-asm.10.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.13.9-asm.10-linux-amd64.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.13.9-asm.10` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.13.9-asm.10\n```\nFor convenience, add the tools in the`/bin`directory to your`PATH`:```\nexport PATH=$PWD/bin:$PATH\n```Download the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-osx.tar.gz\n```\nDownload the signature file and use OpenSSL to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-osx.tar.gz.1.sig\n``````\nopenssl dgst -sha256 -verify /dev/stdin -signature istio-1.13.9-asm.10-osx.tar.gz.1.sig istio-1.13.9-asm.10.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.13.9-asm.10-osx.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.13.9-asm.10` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.13.9-asm.10\n```\nFor convenience, add the tools in the`/bin`directory to your`PATH`:```\nexport PATH=$PWD/bin:$PATH\n```Download the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-win.zip\n```\nDownload the signature file and use OpenSSL to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-win.zip.1.sig\n``````\nopenssl dgst -verify - -signature istio-1.13.9-asm.10-win.zip.1.sig istio-1.13.9-asm.10.win.zip <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.13.9-asm.10-win.zip\n```The command creates an installation directory in your current working directory named `istio-1.13.9-asm.10` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests\\profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.13.9-asm.10\n```\nFor convenience, add the tools in the \\bin directory to your PATH:```\nset PATH=%CD%\\bin:%PATH%\n```\n- Now that Anthos Service Mesh Istio is installed, check the version of`istioctl`:```\nistioctl version\n```\n- Create a namespace called istio-system for the control plane components:```\nkubectl create namespace istio-system\n```\n### \n Installing Anthos Service Mesh\n- Edit your`overlay.yaml`file or create a new one with the following contents:```\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nspec:\n meshConfig:\n accessLogFile: /dev/stdout\n enableTracing: true\n accessLogFormat:\n  '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n components:\n ingressGateways:\n - name: istio-ingressgateway\n  enabled: true\n  k8s:\n  service:\n   type: LoadBalancer\n   ports:\n   - name: status-port\n   port: 15021\n   targetPort: 15021\n   - name: http2\n   port: 80\n   targetPort: 8080\n   - name: https\n   port: 443\n   targetPort: 8443\n```\n- Install Anthos Service Mesh with`istioctl`using the`asm-multicloud`profile:```\nistioctl install \\\n --set profile=asm-multicloud \\\n --set revision=\"asm-1139-10\" \\\n --filename overlay.yaml\n```Your output should look something like:```\nkubectl get pods -n istio-systemNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 READY \u00a0 STATUS \u00a0 \u00a0RESTARTS \u00a0 AGEistio-ingressgateway-88b6fd976-flgp2 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m13sistio-ingressgateway-88b6fd976-p5dl9 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02m57sistiod-asm-1139-10-798ffb964-2ls88 \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21sistiod-asm-1139-10-798ffb964-fnj8c \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21s\n```The `--set revision` argument adds a revision label in the format `istio.io/rev=asm-1139-10` to `istiod` . The revision label is used by the  automatic sidecar injector webhook to associate injected sidecars with a particular `istiod` revision. To enable sidecar auto-injection for a namespace, you must label it with a revision  that matches the label on `istiod` .\n- Verify that your install completed:```\nkubectl get svc -n istio-system\n```Your output should look something like:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TYPE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CLUSTER-IP \u00a0 \u00a0 \u00a0 EXTERNAL-IP \u00a0 \u00a0 PORT(S) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0AGEistio-ingressgateway \u00a0 LoadBalancer \u00a0 172.200.48.52 \u00a0 \u00a034.74.177.168 \u00a0 15021:30479/TCP,80:30030/TCP,443:32200/TCP,15012:32297/TCP,15443:30244/TCP \u00a0 3m35sistiod \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.18.133 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04m46sistiod-asm-1139-10 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.63.220 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m43s\n```### \n Preparing to install Anthos Service Mesh\n \n- Before installing the new version, determine the current revision. You will need  this information to delete theandfrom your current Anthos Service Mesh installation. Use the following command to store the current`istiod`revision to an environment variable:```\nexport DELETE_REV=$(kubectl get deploy -n istio-system -l app=istiod -o jsonpath={.items[*].metadata.labels.'istio\\.io\\/rev'}'{\"\\n\"}')\necho $DELETE_REV\n```Your output should look something like `1.12.9-asm.2` **Note:** If the command returns multiple values, set the   value of`DELETE_REV`to the oldest version and follow the procedure to   delete the oldest version, then repeat the process until you have deleted all   versions.Grant the`anyuid`security context constraint (SCC) to the istio-system with the   following OpenShift CLI (`oc`) command:```\noc adm policy add-scc-to-group anyuid system:serviceaccounts:istio-system\n```\nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-linux-amd64.tar.gz\n```\nDownload the signature file and use OpenSSL to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-linux-amd64.tar.gz.1.sig\n``````\nopenssl dgst -verify /dev/stdin -signature istio-1.13.9-asm.10-linux-amd64.tar.gz.1.sig istio-1.13.9-asm.10.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.13.9-asm.10-linux-amd64.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.13.9-asm.10` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.13.9-asm.10\n```\nFor convenience, add the tools in the`/bin`directory to your`PATH`:```\nexport PATH=$PWD/bin:$PATH\n```Grant the`anyuid`security context constraint (SCC) to the istio-system with the   following OpenShift CLI (`oc`) command:```\noc adm policy add-scc-to-group anyuid system:serviceaccounts:istio-system\n```\nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-osx.tar.gz\n```\nDownload the signature file and use OpenSSL to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-osx.tar.gz.1.sig\n``````\nopenssl dgst -sha256 -verify /dev/stdin -signature istio-1.13.9-asm.10-osx.tar.gz.1.sig istio-1.13.9-asm.10.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.13.9-asm.10-osx.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.13.9-asm.10` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.13.9-asm.10\n```\nFor convenience, add the tools in the`/bin`directory to your`PATH`:```\nexport PATH=$PWD/bin:$PATH\n```Grant the`anyuid`security context constraint (SCC) to the istio-system with the   following OpenShift CLI (`oc`) command:```\noc adm policy add-scc-to-group anyuid system:serviceaccounts:istio-system\n```\nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-win.zip\n```\nDownload the signature file and use OpenSSL to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.13.9-asm.10-win.zip.1.sig\n``````\nopenssl dgst -verify - -signature istio-1.13.9-asm.10-win.zip.1.sig istio-1.13.9-asm.10.win.zip <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.13.9-asm.10-win.zip\n```The command creates an installation directory in your current working directory named `istio-1.13.9-asm.10` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests\\profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.13.9-asm.10\n```\nFor convenience, add the tools in the \\bin directory to your PATH:```\nset PATH=%CD%\\bin:%PATH%\n```\n- Now that Anthos Service Mesh Istio is installed, check the version of`istioctl`:```\nistioctl version\n```\n- Create a namespace called istio-system for the control plane components:```\nkubectl create namespace istio-system\n```\n### \n Configure the validating webhook\nWhen you install Anthos Service Mesh, you set a revision label on `istiod` . You need to set the same revision on the validating webhook.- Create a file called`istiod-service.yaml`with the following contents:```\napiVersion: v1kind: Servicemetadata:\u00a0 name: istiod\u00a0 namespace: istio-system\u00a0 labels:\u00a0 \u00a0 istio.io/rev: asm-1139-10\u00a0 \u00a0 app: istiod\u00a0 \u00a0 istio: pilot\u00a0 \u00a0 release: istiospec:\u00a0 ports:\u00a0 \u00a0 - port: 15010\u00a0 \u00a0 \u00a0 name: grpc-xds # plaintext\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 - port: 15012\u00a0 \u00a0 \u00a0 name: https-dns # mTLS with k8s-signed cert\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 - port: 443\u00a0 \u00a0 \u00a0 name: https-webhook # validation and injection\u00a0 \u00a0 \u00a0 targetPort: 15017\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 - port: 15014\u00a0 \u00a0 \u00a0 name: http-monitoring # prometheus stats\u00a0 \u00a0 \u00a0 protocol: TCP\u00a0 selector:\u00a0 \u00a0 app: istiod\u00a0 \u00a0 istio.io/rev: asm-1139-10\u00a0 meshConfig:\u00a0 \u00a0 accessLogFormat:\u00a0 \u00a0 \u00a0 '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n```\n- Use`kubectl`to apply the validating webhook configuration:```\nkubectl apply -f istiod-service.yaml\n```\n- Verify that the configuration was applied:```\nkubectl get svc -n istio-system\n```The response should look similar to:```\nNAME \u00a0 \u00a0 TYPE \u00a0 \u00a0 \u00a0 \u00a0CLUSTER-IP \u00a0 \u00a0 \u00a0 EXTERNAL-IP \u00a0 PORT(S) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AGEistiod \u00a0 ClusterIP \u00a0 172.200.18.133 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 22s\n```\n### \n Installing Anthos Service Mesh\n- Edit your`overlay.yaml`file or create a new one with the following contents:```\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nspec:\n meshConfig:\n accessLogFile: /dev/stdout\n enableTracing: true\n accessLogFormat:\n  '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n components:\n ingressGateways:\n  - name: istio-ingressgateway\n  enabled: true\n  k8s:\n   service:\n   type: LoadBalancer\n   ports:\n   - name: status-port\n    port: 15021\n    targetPort: 15021\n   - name: http2\n    port: 80\n    targetPort: 8080\n   - name: https\n    port: 443\n    targetPort: 8443\n```\n- Install Anthos Service Mesh with`istioctl`using the`asm-multicloud`profile:```\nistioctl install \\\n --set profile=asm-multicloud \\\n --set revision=\"asm-1139-10\" \\\n --filename overlayfile.yaml\n```Your output should look something like:```\nkubectl get pods -n istio-systemNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 READY \u00a0 STATUS \u00a0 \u00a0RESTARTS \u00a0 AGEistio-ingressgateway-88b6fd976-flgp2 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m13sistio-ingressgateway-88b6fd976-p5dl9 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02m57sistiod-asm-1139-10-798ffb964-2ls88 \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21sistiod-asm-1139-10-798ffb964-fnj8c \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21s\n```The `--set revision` argument adds a revision label in the format `istio.io/rev=1.6.11-asm.1` to `istiod` . The revision label is used by the  automatic sidecar injector webhook to associate injected sidecars with a particular `istiod` revision. To enable sidecar auto-injection for a namespace, you must label it with a revision  that matches the label on `istiod` .\n- Verify that your install completed:```\nkubectl get svc -n istio-system\n```Your output should look something like:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TYPE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CLUSTER-IP \u00a0 \u00a0 \u00a0 EXTERNAL-IP \u00a0 \u00a0 PORT(S) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0AGEistio-ingressgateway \u00a0 LoadBalancer \u00a0 172.200.48.52 \u00a0 \u00a034.74.177.168 \u00a0 15021:30479/TCP,80:30030/TCP,443:32200/TCP,15012:32297/TCP,15443:30244/TCP \u00a0 3m35sistiod \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.18.133 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04m46sistiod-asm-1139-10 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.63.220 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m43s\n```", "guide": "Apigee"}