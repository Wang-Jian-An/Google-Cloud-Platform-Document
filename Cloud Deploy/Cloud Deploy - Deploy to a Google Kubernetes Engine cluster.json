{"title": "Cloud Deploy - Deploy to a Google Kubernetes Engine cluster", "url": "https://cloud.google.com/deploy/docs/gke-targets", "abstract": "# Cloud Deploy - Deploy to a Google Kubernetes Engine cluster\nThis document describes how to deploy your applications to Google Kubernetes Engine clusters.\nCloud Deploy allows you to deploy your container-based workloads to any [Google Kubernetes Engine](/kubernetes-engine/docs/concepts/kubernetes-engine-overview) cluster. All Cloud Deploy features are supported when you deploy to GKE targets.\n", "content": "## Before you begin\n- Have one or more GKE clusters to deploy to.If you don't have any GKE clusters to deploy to, you can [create them](/kubernetes-engine/docs/concepts/types-of-clusters) .\n- [Have a Cloud Deploy delivery pipeline](/deploy/docs/create-pipeline-targets) .\n- Make sure your [execution service account](/deploy/docs/execution-environment) has the [roles and permissions](/deploy/docs/iam-roles-permissions) it needs.\nIn this `skaffold.yaml` file, the `deploy` stanza includes `kubectl` , which indicates that Skaffold is rendering for, and deploying to, Kubernetes (GKE). And the manifests you use for this application are listed under there.\n## Create your target configuration\nEach target can be configured in your delivery pipeline YAML, or can be in a separate file. Also, you can configure more than one target in the same file, but they must be in different `kind: Target` stanzas.\nIn the target definition, create a `gke` stanza to point to the GKE cluster:\nThe syntax for specifying a GKE cluster is as follows:\n```\ngke:\u00a0cluster: projects/[project_name]/locations/[location]/clusters/[cluster_name]\n```\nThis GKE resource identifier uses the following elements:\n- [ `project_name` ] is the name of the Google Cloud project in which you're running this cluster.The cluster you are deploying to does need to be in the same project as your delivery pipeline.\n- [ `location` ] is the region in which the cluster was created.\n- [ `cluster_name` ] is the name given to the cluster when it was created.You can find this name in the list of clusters for your project, in the Google Cloud console.\nThe following is an example target configuration, pointing to a GKE cluster:\n```\n\u00a0 \u00a0 \u00a0 apiVersion: deploy.cloud.google.com/v1\u00a0 \u00a0 \u00a0 kind: Target\u00a0 \u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 \u00a0name: dev\u00a0 \u00a0 \u00a0 description: development cluster\u00a0 \u00a0 \u00a0 gke:\u00a0 \u00a0 \u00a0 \u00a0cluster: projects/my-app/locations/us-central1/clusters/my-app-dev-cluster\n```\n## Create your Skaffold configuration\nThis section provides and explains an example of a simple Skaffold configuration to use when deploying to a GKE cluster.\nThe following is an `skaffold.yaml` file for deployment to a GKE cluster:\n```\napiVersion: skaffold/v4beta7kind: Configmetadata: \u00a0 name: gke-applicationmanifests:\u00a0 rawYaml:\u00a0 - deployment.yamldeploy:\u00a0 kubectl: {}\n```\n[Using Skaffold with Cloud Deploy](/deploy/docs/using-skaffold) describes in more detail how to use Skaffold with your delivery pipeline.\n## Prepare your Kubernetes manifests\nTo deploy your application to GKE, you provide Cloud Deploy with one or more Kubernetes manifests, which are [rendered](/deploy/docs/terminology#render) and then applied to the target cluster or clusters to deploy your application.\nIf you don't have those manifests, create them before you try to deploy using a Cloud Deploy delivery pipeline.\nYou can [use Kustomize or Helm](/deploy/docs/using-skaffold/managing-manifests) to help you create manifests. You can also use Kustomize or Helm if your manifests are templated and need to be rendered.\n## Putting it all together\nNow that you have your Kubernetes manifests, your `skaffold.yaml` configuration, and your Cloud Deploy target definitions, and you've [registered your targets](/deploy/docs/create-pipeline-targets#register_the_delivery_pipeline_and_targets) as Cloud Deploy resources, you can now [invoke your delivery pipeline](/deploy/docs/deploying-application#invoke_your_delivery_pipeline_to_create_a_release) to create a release and progress it through the progression of targets defined in the pipeline.\n## Deploy to a private cluster\nYou can deploy your application to a private GKE cluster, using either of two options:\n- [Using a Virtual Private Cloud network](#use-vpc) \n- [Using GKE Enterprise targets and connect gateway](#use-connect) \n### Use a Virtual Private Cloud network\nYou can configure a target to deploy to a [private GKE cluster](/kubernetes-engine/docs/concepts/private-cluster-concept) connected to a [Virtual Private Cloud](/vpc/docs) network:\n- [Create your private cluster](/kubernetes-engine/docs/how-to/private-clusters) A private cluster is a VPC-native cluster whose nodes and Pods are isolated by default from the public internet.If you plan to use the internal IP of the private cluster target, then set `internalIp` to `true` under `gke` in the [target configuration](/deploy/docs/config-files#privateip) .\n- In Cloud Build, [create a private worker pool](/build/docs/private-pools/use-in-private-network#deploying-to-clusters) that you can use to deploy to this private cluster.\n- [Configure the execution environment to use that private pool](#changing_from_the_default_pool_to_a_private_pool) .You must use this pool for `RENDER` . You can also use it for `DEPLOY` and for `VERIFY` . Here's an example that uses `RENDER` and `DEPLOY` :```\nexecutionConfigs:- usages:\u00a0 - RENDER\u00a0 - DEPLOY\u00a0 workerPool: \"projects/p123/locations/us-central1/workerPools/wp123\"\n```\nSee [Access private GKE clusters from Cloud Build private pools using Identity Service for GKE](/build/docs/private-pools/access-private-gke-clusters-identity-service) and [Access private GKE clusters with Cloud Build private pools](/build/docs/private-pools/accessing-private-gke-clusters-with-cloud-build-private-pools) for more information.\n### Project and permissions considerations\nYou can configure a target to use a private worker pool that can deploy to a private cluster. But there are some things to note if resources are in different projects.\n- When Cloud Deploy and the worker pool are in separate projects\nTo communicate with a private pool that has access to a VPC and that's in a different project from your target, the Cloud Deploy [service agent](/deploy/docs/cloud-deploy-service-account#service_agent) needs sufficient permissions to talk to that project.\nThe [execution service account](/deploy/docs/cloud-deploy-service-account#execution_service_account) also needs permissions to access the Cloud Storage bucket.\n- When the worker pool and the cluster are in separate projects\nIf the private GKE cluster is in a different project from the private worker pool, the [execution service account](/deploy/docs/cloud-deploy-service-account#execution_service_account) requires sufficient permissions to talk to the project the cluster is in.\n### Use GKE Enterprise targets and connect gateway\nYou can configure a target to deploy to a [private GKE cluster](/kubernetes-engine/docs/concepts/private-cluster-concept) using [Anthos targets](/deploy/docs/anthos-targets) and [connect gateway](/anthos/multicluster-management/gateway) .\nThis approach does not require that you use a Virtual Private Cloud or virtual private network connections.\n## What's next\n- Try the [quickstart: deploy an application to GKE](/deploy/docs/deploy-app-gke) \n- Invoke your delivery pipeline to [create a release](/deploy/docs/deploying-application#invoke_your_delivery_pipeline_to_create_a_release) \n- Learn more about [configuring Cloud Deploy targets](/deploy/docs/config-files#target_definitions) \n- Learn more about [using Skaffold with Cloud Deploy](/deploy/docs/using-skaffold) \n- Learn about Cloud Deploy [execution environments](/deploy/docs/execution-environment) .\n- Learn more about [GKE](/kubernetes-engine/docs)", "guide": "Cloud Deploy"}