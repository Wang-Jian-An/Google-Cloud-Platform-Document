{"title": "Cloud Deploy - Define and use a custom target type", "url": "https://cloud.google.com/deploy/docs/deploy-app-custom-target", "abstract": "# Cloud Deploy - Define and use a custom target type\n# Define and use a custom target type\nThis quickstart shows you how to use Cloud Deploy to create a custom target type, then deploy to a custom target of that type.\nIn this quickstart, you'll do the following:- Create a [Skaffold](/skaffold) configuration.The Skaffold configuration file is where you configure the behavior of the target. This configuration references container images plus shell commands to run on those images, which are the actions for render and deploy operations.\n- Define a custom target type, and a target that references that type.\n- Define your Cloud Deploy delivery pipeline.This pipeline includes only one stage and uses only one target. In that stage, you'll reference the target you configured.\n- Create a release, which automatically creates a rollout, resulting in the custom render and deploy operations being performed.As part of this release and rollout, the render and deploy operations defined in your Skaffold configuration are both run.\n- View the results of the custom operations. This includes a rendered configuration file uploaded to Cloud Storage, and a string written to that file, as well as a results file that includes the status of the operation.\n", "content": "## Before you begin- If you already have the Google Cloud CLI installed, make sure you're running the latest version:\n- ```\ngcloud components update\n```\n- Make sure the [defaultCompute Engine service account](/deploy/docs/cloud-deploy-service-account#execution_service_account) has sufficient permissions.The service account might already have the necessary permissions. These steps are included for projects that disable automatic role grants for default service accounts.\n- First add the`clouddeploy.jobRunner`role:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/clouddeploy.jobRunner\"\n```\n- Add the developer role for your specific runtime.\n- Add the`iam.serviceAccountUser`role, which includes the`actAs`permission to deploy to the runtime:```\ngcloud iam service-accounts add-iam-policy-binding $(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/iam.serviceAccountUser\" \\\n --project=PROJECT_ID\n```## Prepare your Skaffold configuration and application manifestCloud Deploy uses [Skaffold](/deploy/docs/using-skaffold) to provide the details for what to deploy and how to deploy it to your [target](/deploy/docs/terminology#target) .\nIn this quickstart, you create a `skaffold.yaml` file, which which defines custom actions that represent the render and deploy operations for the custom target type.\nNote that the custom actions provided in this quickstart don't actually deploy any application to a runtime. Both the render and deploy actions upload a results file to Cloud Storage to fulfill the custom-target contract between Cloud Deploy and the user-defined render and deploy.- Open a terminal window.\n- Create a new directory and navigate into it.```\nmkdir custom-target-quickstartcd custom-target-quickstart\n```\n- Create a file named `skaffold.yaml` with the following contents:```\napiVersion: skaffold/v4beta7kind: ConfigcustomActions:- name: custom-render\u00a0 containers:\u00a0 - name: render\u00a0 \u00a0 image: gcr.io/google.com/cloudsdktool/google-cloud-cli@sha256:66e2681aa3099b4e517e4cdcdefff8f2aa45d305007124ccdc09686f6712d018\u00a0 \u00a0 command: ['/bin/bash']\u00a0 \u00a0 args:\u00a0 \u00a0 \u00a0 - '-c'\u00a0 \u00a0 \u00a0 - |-\u00a0 \u00a0 \u00a0 \u00a0 echo \"Sample manifest rendered content\" > manifest.txt\u00a0 \u00a0 \u00a0 \u00a0 gsutil cp manifest.txt $CLOUD_DEPLOY_OUTPUT_GCS_PATH/manifest.txt\u00a0 \u00a0 \u00a0 \u00a0 echo {\\\"resultStatus\\\": \\\"SUCCEEDED\\\", \\\"manifestFile\\\": \\\"$CLOUD_DEPLOY_OUTPUT_GCS_PATH/manifest.txt\\\"} > results.json\u00a0 \u00a0 \u00a0 \u00a0 gsutil cp results.json $CLOUD_DEPLOY_OUTPUT_GCS_PATH/results.json- name: custom-deploy\u00a0 containers:\u00a0 - name: deploy\u00a0 \u00a0 image: gcr.io/google.com/cloudsdktool/google-cloud-cli@sha256:66e2681aa3099b4e517e4cdcdefff8f2aa45d305007124ccdc09686f6712d018\u00a0 \u00a0 command: ['/bin/bash']\u00a0 \u00a0 args:\u00a0 \u00a0 \u00a0 - '-c'\u00a0 \u00a0 \u00a0 - |-\u00a0 \u00a0 \u00a0 \u00a0 echo {\\\"resultStatus\\\": \\\"SUCCEEDED\\\"} > results.json\u00a0 \u00a0 \u00a0 \u00a0 gsutil cp results.json $CLOUD_DEPLOY_OUTPUT_GCS_PATH/results.json\n```This file includes the `customActions:` stanza, defining a custom render action and a custom deploy action. Each of these custom actions references a container image to run, and commands to run on that container.See the [skaffold.yaml reference](https://skaffold.dev/docs/references/yaml/) for more information about this configuration file.\n## Create your delivery pipeline, custom target type, and targetYou can define your delivery pipeline, custom target type, and target in one file or in separate files. In this quickstart, you create a single file with all three.- In the custom-target-quickstart directory, create a new file, `clouddeploy.yaml` , with the following content:```\napiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0 name: custom-targets-pipelineserialPipeline:\u00a0 stages:\u00a0 - targetId: sample-env---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: sample-envcustomTarget:\u00a0 customTargetType: basic-custom-target---apiVersion: deploy.cloud.google.com/v1kind: CustomTargetTypemetadata:\u00a0 name: basic-custom-targetcustomActions:\u00a0 renderAction: custom-render\u00a0 deployAction: custom-deploy\n``` **Note:** The custom target type and the target are included with the delivery pipeline in this file, but you can define them in a separate file or multiple separate files.\n- Register your pipeline and targets with the Cloud Deploy service:```\ngcloud deploy apply --file=clouddeploy.yaml --region=us-central1 --project=PROJECT_ID\n```You now have a delivery pipeline, with one target. This is your target using the custom target type, and this pipeline doesn't deploy an application to a runtime.\n- Confirm your pipeline and targets:In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view of list of your available delivery pipelines. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) The delivery pipeline you just created is shown, with one target listed in the **Targets** column.\n## Create a releaseA release is the central Cloud Deploy resource representing the changes being deployed. The delivery pipeline defines the lifecycle of that release. See [Cloud Deploy service architecture](/deploy/docs/architecture#how_they_fit_together_to_deliver_your_release) for details about that lifecycle.\nRun the following command from the `custom-target-quickstart` directory to create a `release` resource that represents the custom action to deploy:\n```\ngcloud deploy releases create test-release-001 \\\u00a0 --project=PROJECT_ID \\\u00a0 --region=us-central1 \\\u00a0 --delivery-pipeline=custom-targets-pipeline\n```\nAs with all releases (unless they include `--disable-initial-rollout` ), Cloud Deploy automatically creates a [rollout](/deploy/docs/terminology#rollout) resource too. And all phases of that rollout are executed, including render and deploy.## View the results in Google Cloud consoleAfter a few minutes, your deployment is complete. In this case, because the two custom actions are commands to echo strings into a file and upload the file to Cloud Storage, nothing is deployed into any target runtime.\nHowever, you can view the file and the strings in that file:- In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view your delivery pipeline ( `custom-targets-pipeline` ). [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) \n- Click the name of your delivery pipeline ( `custom-targets-pipeline` ).The pipeline visualization shows the app's deployment status. Because there's only one stage in the pipeline, the visualization shows only one node.And your release is listed on the **Releases** tab under **Delivery pipelinedetails** .\n- Click the release name.The **Release details** page is shown.\n- Click the **Artifacts** tab.\n- Under **Target artifacts** , click the **VIEW ARTIFACTS** link.The rendered manifest file is shown. In this case, the file is the output of the custom render action you defined in your `skaffold.yaml` configuration file, containing the string \"Sample manifest rendered content\".\n- Find the **Cloud Storage** buckets created by this release. [Open the Cloud Storage browser page](https://console.cloud.google.com/storage/browser) The **Buckets** page is displayed, showing two buckets created for this release. One bucket contains the delivery pipeline configuration file and the rendered `skaffold.yaml` . The other includes the output file our custom action is configured to create.\n- Click the bucket whose name starts with `us-central1.deploy-artifacts` ...\n- Click the folder whose name starts with `custom-targets-pipeline-` , then click the `test-release-001` folder.\n- Click the folder whose name is your rollout name, which should be `test-release-001-to-sample-env-0001` .\n- Click the folder shown, which is a UUID, then click the `custom-output` folder.\n- Click `results.json` , then click the hyperlinked URL in the **AuthenticatedURL** field.This file contains the string you configured as output from the `custom-deploy` action, in your `skaffold.yaml` :\n **Note:** you can also see the **render** results in the Cloud Storage bucket, but it's quicker to use the release inspector, as shown in the [first steps](#view_the_results_in) of this procedure.## Clean upTo avoid incurring charges to your Google Cloud account for   the resources used on this page, follow these steps.- Delete the delivery pipeline, target, release, and rollout:```\ngcloud deploy delete --file=clouddeploy.yaml --force --region=us-central1 --project=PROJECT_ID\n```\n- Delete both of the Cloud Storage buckets that Cloud Deploy created. [Open the Cloud Storage browser page](https://console.cloud.google.com/storage/browser) \nThat's it, you completed this quickstart!## What's next\n- [Learn more about custom targets](/deploy/docs/custom-targets) .\n- See the available [sample custom target types](/deploy/docs/custom-targets#custom_target_examples) .\n- [Learn more about Cloud Deploy](/deploy/docs/overview) .\n- [Learn the basics of deploying applications](/deploy/docs/deploying-application) .\n- [Try out the Cloud Deploy walkthrough](https://shell.cloud.google.com/?show=ide%2Cterminal&walkthrough_id=deploy--cloud-deploy-e2e-gke) .", "guide": "Cloud Deploy"}