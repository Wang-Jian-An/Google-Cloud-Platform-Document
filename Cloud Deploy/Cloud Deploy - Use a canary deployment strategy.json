{"title": "Cloud Deploy - Use a canary deployment strategy", "url": "https://cloud.google.com/deploy/docs/deployment-strategies/canary", "abstract": "# Cloud Deploy - Use a canary deployment strategy\nThis document describes how to configure and use a canary deployment strategy.\n", "content": "## What is a canary deployment?\nA canary deployment is a progressive rollout of an application that splits traffic between an already-deployed version and a new version, rolling it out to a subset of users before rolling out fully.\n### Supported target types\nCanary deployment in Cloud Deploy supports all target types, including the following:\n- [Google Kubernetes Engine](/deploy/docs/gke-targets) \n- [Cloud Run](/deploy/docs/run-targets) (services only\u2014not jobs.)\n- [GKE Enterprise](/deploy/docs/anthos-targets) \nCanary also works with [multi-targets](/deploy/docs/terminology#multi-target) .\n### Why use a canary deployment strategy?\nA canary deployment gives you a chance to partially release your application. In this way, you can ensure the new version of your application is reliable before you deliver it to all users.\nIf you're deploying to GKE or GKE Enterprise, for example, you would deploy the new version of your application to a limited number of pods. The old version would continue to run, but with more of the traffic being sent to the new pods.\nIf you're deploying to Cloud Run, Cloud Run itself splits traffic between the old and new revisions, according to the percentages you configure.\n### Types of canary\nCloud Deploy lets you configure the following types of canary deployment:\n- AutomatedWith an [automated canary](/deploy/docs/deployment-strategies/canary#configure_an_automated_canary) deployment, you configure Cloud Deploy with a series of percentages that express a progressive deployment. Cloud Deploy performs additional operations on your behalf, to apportion traffic percentages between the old and new versions.\n- Custom-automatedFor a [custom-automated](#custom-automated) canary, you can provide the following:- The phase name\n- The percentage goal\n- The Skaffold profile to use for the phase\n- Whether or not to include a verify job\nBut you don't need to provide traffic-balancing information; Cloud Deploy creates the necessary resources, as described [here](#what_happens_during_an_automated_or_custom-automated_canary) .\n- CustomWith a [custom canary](#custom) , you configure each canary phase separately, including the following:- The phase name\n- The percentage goal\n- The Skaffold profile to use for the phase\n- Whether or not to include a verify job\nAdditionally for a fully custom canary, you provide all of the traffic-balancing configuration, as described [here](#what_happens_during_an_automated_or_custom-automated_canary) .\n### Phases of a canary deployment\nWhen you create a release for a canary deployment, the rollout is created with a phase for each canary increment, plus a final `stable` phase for 100%.\nFor example, if you configure a canary for 25%, 50%, and 75% increments, the rollout will have the following phases:\n- `canary-25`\n- `canary-50`\n- `canary-75`\n- `stable`\nYou can read more about rollout phases, jobs, and job runs in [Manage rollouts](/deploy/docs/deployment-strategies/manage-rollout) .\n### What happens during an automated or custom-automated canary\nTo support your canary deployment, Cloud Deploy includes special processing steps when rendering your Kubernetes manifest or Cloud Run service configuration:\nHere's how Cloud Deploy executes a canary deployment in network-based GKE and GKE Enterprise:- You provide the name of the Deployment resource and the Service resource.\n- Cloud Deploy creates an additional Deployment resource, with the name of your current Deployment plus `-canary` .\n- Cloud Deploy modifies the Service to adjust the selector to select the pods in the current Deployment and the canary pods.Cloud Deploy calculates the number of pods to use for the canary based on the calculation described [here](#overprovisioning_enabled) . That calculation differs depending on whether you [enable or disable pod overprovisioning](/deploy/docs/config-files#strat_for_gke_targets) .If we're [skipping to the stable phase](/deploy/docs/deployment-strategies#skip_phases) Cloud Deploy adds the labels to be used to match pods, so they're available for subsequent canary runs.Cloud Deploy creates a Deployment that includes the phase-specific percentage of pods, updating it for each phase. This is done by calculating the number of pods as a percentage of the original number of pods. This can result in an inexact traffic split. If you need an exact traffic split, you can achieve that using [Gateway API](#gateway) .Also, Secrets and ConfigMaps are also copied and renamed with `-canary` .\n- During the `stable` phase, the `-canary` Deployment is scaled down to zero, and the original Deployment is replaced with the new Deployment.Cloud Deploy doesn't modify the original Deployment until the `stable` phase.\nCloud Deploy provisions pods to achieve the requested canary percentage as closely as possible. This is based on the number of pods, not traffic to the pods. If you want your canary to be based on traffic, you need to use [Gateway API](#gateway) .\nFor GKE network-based canary, you can [enable or disable pod overprovisioning](/deploy/docs/config-files#strat_for_gke_targets) . The following sections describe how Cloud Deploy calculates the number of pods to provision for the canary deployment for each canary phase.Enabling overprovisioning ( [disablePodOverprovisioning: false](/deploy/docs/config-files#strat_for_gke_targets) ) allows Cloud Deploy to create enough additional pods to run the canary percentage you want, based on the number of pods running your existing deployment. The following formula shows how Cloud Deploy calculates the number of pods to provision for the canary deployment for each canary phase, when pod overprovisioning is enabled:\n`math.Ceil( percentage * ReplicaCountOfDeploymentOnCluster / (100-percentage))`\nWith this formula, the current replica count (the number of pods you already have, before this canary) is multiplied by the canary percentage for the phase, and the result of that is divided by (100 minus the percentage).\nFor example, if you have 4 pods aleady, and your canary phase is 50%, then the number of canary pods is 4. (The result of `100-percentage` is used as a percentage: `100-50=50` , treated as `.50` .)\n **Warning:** Using canary percentages larger than 50% may result in very large increases in the number of pods. In the previous example with 4 existing pods, a 90% canary will result in 36 canary pods. For this reason, if you want to use percentages larger than 50%, we recommend disabling overprovisioning, as described in the next section.\nPod overprovisioning is the default behavior.You can disable overprovisioning ( [disablePodOverprovisioning: true](/deploy/docs/config-files#strat_for_gke_targets) ), to ensure that Cloud Deploy doesn't increase your replica count.\nThe following formula shows how Cloud Deploy calculates pod provisioning for the canary deployment for each canary phase, when pod overprovisioning is disabled:\n`math.Ceil( (ReplicaCountOfDeploymentOnCluster + ReplicaCountOfCanaryDeploymentOnCluster) * percentage)`\nIn this formula, `ReplicaCountOfCanaryDeploymentOnCluster` only exists if there was already a canary phase. If this is the first canary phase, there is no `ReplicaCountOfCanaryDeploymentOnCluster` .\nIf you begin with 4 pods, that number is multiplied by the canary percentage (for example, 50%, or `.5` ) to get `2` . So the original deployment is now scaled down to 2, and 2 new pods are created for the canary deployment. If you then have a 75% canary stage, you have `2` (original deployment) `+2` (first canary stage), `*.75` , to get `3` canary pods and `1` pod running the original deployment.\nHere's how Cloud Deploy executes a canary deployment in GKE and GKE Enterprise using Gateway API:- In addition to the Deployment and Service references, you provide an HTTPRoute resource, with a `backendRefs` rule that references the Service.\n- Cloud Deploy creates a new Deployment, with the name of your original Deployment plus `-canary` , and a new Service with the original Service name plus `-canary` .Also, Secrets, ConfigMaps, and Horizontal Pod Autoscalers are also copied and renamed with `-canary` .\n- For each canary phase Cloud Deploy modifies the HTTPRoute to update the weighting between the original Deployment's pods and the canary Deployment's pods, based on the percentage for that phase.Because there can be a delay propagating changes to `HTTPRoute` resources, you can [include the routeUpdateWaitTime property](#gateway) in your configuration, so the system waits a specified amount of time for this propagation.\n- During the `stable` phase, the `-canary` Deployment is scaled down to zero, and the original Deployment is updated to use the new release's Deployment.Also, the HTTPRoute is now reverted to the original which you supplied.Cloud Deploy doesn't modify the original Deployment or Service until the `stable` phase.\nHere's how Cloud Deploy executes a canary deployment for Cloud Run:- For a canary deployment to Cloud Run, don't supply a [traffic stanza](/run/docs/reference/yaml/v1) in your service YAML.\n- When creating a new rollout for canary, Cloud Deploy splits traffic between the previous revision that was successfully deployed by Cloud Deploy and a new revision.\nIf you want to see the differences among phases of a canary deployment, you can view changes in the per-phase rendered manifest available in the [release inspector](/deploy/docs/view-release) . You can do this even before the rollout has started. Also, if you're using [parallel deployment](/deploy/docs/parallel) , you can also inspect each child's rendered manifest.\n**Note:** If Cloud Deploy can't find an existing deployed resource, the canary phase or phases might be [skipped](/deploy/docs/deployment-strategies#skip_phases) the first time you run the canary.\n## Configure a canary deployment\nThis section describes how to configure your delivery pipeline and targets for a canary deployment.\nThe instructions here include only what is specific to canary configuration. The document [Deploy your application](/deploy/docs/deploying-application) has the general instructions for configuring and executing your deployment pipeline.\n### Make sure you have the required permissions\nIn addition to other Identity and Access Management permissions you need for using Cloud Deploy, you need the following permissions in order to perform additional actions that might be needed for a canary deployment:\n- `clouddeploy.rollouts.advance`\n- `clouddeploy.rollouts.ignoreJob`\n- `clouddeploy.rollouts.cancel`\n- `clouddeploy.rollouts.retryJob`\n- `clouddeploy.jobRuns.get`\n- `clouddeploy.jobRuns.list`\n- `clouddeploy.jobRuns.terminate`\nSee [IAM roles and permissions](/deploy/docs/iam-roles-permissions) for more information about what available roles include these permissions.\n### Prepare your skaffold.yaml\nAs with a standard deployment, your canary needs a `skaffold.yaml` file, which defines how manifests and service definitions are rendered and deployed.\nThe `skaffold.yaml` you create for a canary deployment does not have any special requirements beyond [what's needed](/deploy/docs/using-skaffold) for standard deployment.\n### Prepare your manifest or service definition\nAs with a standard deployment, your canary needs a Kubernetes manifest or a Cloud Run service definition.\nFor canary, your manifest must have the following:- A Deployment a Service.\n- The Service must define an `app` selector, and must select the Pods of the Deployment specified.\n- If you're using a Gateway API-based canary, the manifest must also have an [HTTPRoute](#gateway) .\nFor canary on Cloud Run, your normal Cloud Run service definition file is sufficient, but without a `traffic` stanza. Cloud Deploy manages splitting traffic for you between the last successful revision and the new revision.\n### Configure an automated canary\nThe following instructions are for Cloud Run and GKE and GKE Enterprise service-based networking targets. If you're using Kubernetes Gateway API with GKE or GKE Enterprise, see [this documentation](#gateway) .\nYou configure the automated canary in your delivery pipeline definition:\nIn the pipeline stage, include a `strategy` property, as follows:\n```\nserialPipeline:\u00a0 stages:\u00a0 - targetId: prod\u00a0 \u00a0 profiles: []\u00a0 \u00a0 strategy:\u00a0 \u00a0 \u00a0 canary:\u00a0 \u00a0 \u00a0 \u00a0 runtimeConfig:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 kubernetes:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 serviceNetworking:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service: \"SERVICE_NAME\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 deployment: \"DEPLOYMENT_NAME\"\u00a0 \u00a0 \u00a0 \u00a0 canaryDeployment:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 percentages: [PERCENTAGES]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 verify: true|false\n```\nIn this configuration...- is the name of the Kubernetes Service, defined in your manifest.\n- is the name of your Kubernetes Deployment, defined in your manifest.\n- is a comma-separated list of percentage values representing your canary increments, for example `[5, 25, 50]` .Also, this doesn't include `100` , because 100% percent deployment is in the canary, and is handled by the [stable phase](#canary_phases) .\n- You can enable [deployment verification](/deploy/docs/verify-deployment) ( `verify: true` ). If you do so, a `verify` job is enabled on each phase.\nIn the pipeline stage, include a `strategy` property, as follows:\n```\nserialPipeline:\u00a0 stages:\u00a0 - targetId: prod\u00a0 \u00a0 profiles: []\u00a0 \u00a0 strategy:\u00a0 \u00a0 \u00a0 canary:\u00a0 \u00a0 \u00a0 \u00a0 runtimeConfig:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cloudRun:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 automaticTrafficControl: true\u00a0 \u00a0 \u00a0 \u00a0 canaryDeployment:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 percentages: [PERCENTAGES]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 verify: true|false\n```\nIn this configuration...- is a comma-separated list of percentage values representing your canary increments, for example`[25, 50, 75]`. Note that this doesn't include`100`, because 100% percent deployment isin the canary, and is handled by the [stable phase](#canary_phases) .\n- You can enable [deployment verification](/deploy/docs/verify-deployment) (`verify: true`). If you do so, a`verify`job is added to each canary phase.\n### Configure a custom canary\nYou can configure your canary manually instead of relying fully on the automation provided by Cloud Deploy. With custom canary configuration, you specify the following, in your delivery pipeline definition:\n- Rollout phase namesIn a fully-automated canary, Cloud Deploy names the phases for you ( `canary-25` , `canary-75` , `stable` , for example). With a custom canary, however, you can give each phase any name, as long as it's unique among all phases for this canary stage, and it honors [resource name restrictions](/apis/design/resource_names) . But the final (100%) phase name must be `stable` .\n- Percentage goals for each phaseSpecify the percentages separately, per phase.\n- Skaffold profiles to use for the phaseYou can use a separate Skaffold profile for each phase, or the same profile, or any combination. And each profile can use a different Kubernetes manifest or Cloud Run service definition. You can also use more than one profile for a given phase. Cloud Deploy combines them.\n- Whether there is a verify job for the phaseRemember that if you're enabling verify, you need to [configure](/deploy/docs/verify-deployment) your `skaffold.yaml` for verification also.\n[All target types](/deploy/docs/deploying-application#set_up_for_the_runtime_environment_of_your_choice) are supported for custom canary.\nThe following YAML shows the configuration for the phases of fully custom canary deployment:\n```\nstrategy:\u00a0 canary:\u00a0 \u00a0 # Custom configuration for each canary phase\u00a0 \u00a0 \u200bcustomCanaryDeployment:\u00a0 \u00a0 \u00a0 phaseConfigs:\u00a0 \u00a0 \u00a0 - phaseId: \"PHASE1_NAME\"\u00a0 \u00a0 \u00a0 \u00a0 percentage: PERCENTAGE1\u00a0 \u00a0 \u00a0 \u00a0 profiles: [ \"PROFILE_NAME\" ]\u00a0 \u00a0 \u00a0 \u00a0 verify: true | false\u00a0 \u00a0 \u00a0 - \u2026\u00a0 \u00a0 \u00a0 - phaseId: \"stable\"\u00a0 \u00a0 \u00a0 \u00a0 percentage: 100\u00a0 \u00a0 \u00a0 \u00a0 profiles: [ \"LAST_PROFILE_NAME\" ]\u00a0 \u00a0 \u00a0 \u00a0 verify: true|false\n```\nIn this YAML\n- ``Is the name of the phase. Each phase name must be unique.\n- `[ \"` `` `\" ]`Is the name of the profile to use for the phase. You can use the same profile for each phase, or a different one for each, or any combination. Also, you can specify more than one profile. Cloud Deploy uses all of the profiles you specify, the profile or manifest used by the overall stage.\n- ``Is the percentage to deploy for the first phase. Each phase must have a unique percentage value, and that value must be a whole percentage (not `10.5` , for example), and the phases must be in ascending order.\n- `verify: true|false`Tells Cloud Deploy whether to include a verify job for the phase. Note that for each phase to use verify, Skaffold uses the same profile for verify that is specified for render and deploy for that phase.\n- `stable`The final phase must be named `stable` .\nThe percentage for the last phase must be `100` . Phases are executed according in the order you configure them in this `\u200bcustomCanaryDeployment` stanza, but if the percentage values are not in ascending order, the command to [register the delivery pipeline](/deploy/docs/create-pipeline-targets#register_the_delivery_pipeline_and_targets) fails with an error.\nNote that the configuration for a custom canary doesn't include a `runtimeConfig` stanza. If you include `runtimeConfig` , it's considered a [custom-automated canary](#custom-automated) .\n### Configure a custom-automated canary\nA custom-automated canary is similar to a [custom canary](#custom) because you specify the separate canary phases, with custom phase names, percentage values, Skaffold profiles, and verify jobs. But with a custom canary, you don't provide the [configurations](#what_happens_during_an_automated_or_custom-automated_canary) that define the traffic apportionment\u2014Cloud Deploy does that for you, but you still provide the [Skaffold profiles](/deploy/docs/using-skaffold/managing-manifests#configuring_different_manifests_per_target) to be used for each stage.\nTo configure a custom-automated canary, include a `runtimeConfig` stanza, as shown [here](/deploy/docs/deployment-strategies/canary#configure_an_automated_canary) , and include the `customCanaryDeployment` stanza, as shown [here](/deploy/docs/deployment-strategies/canary#configure_an_automated_canary) .\n## Configure a canary deployment using Kubernetes Gateway API service mesh\nAlthough you can use a Cloud Deploy canary deployment to [deploy your application to Kubernetes service-based networking](#configure_an_automated_canary) , An alternative is to use the Kubernetes [Gateway API service mesh](https://gateway-api.sigs.k8s.io/) . This section describes how to do so.\nYou can use Gateway API with [Istio](https://istio.io) or any [supported implementation](/deploy/docs/deployment-strategies/gateway-api.sigs.k8s.io/implementations) .\n- Set up your Gateway API resources:- [Using Istio](https://istio.io/latest/docs/tasks/traffic-management/ingress/gateway-api/) \n- [GKE Gateway controller](/kubernetes-engine/docs/concepts/gateway-api) \nThese are examples only.\n- In your Kubernetes manifest, provided to Cloud Deploy when you created the release, include the following:- An [HTTPRoute](https://gateway-api.sigs.k8s.io/guides/traffic-splitting/) that references your Gateway resource\n- A Deployment\n- A Service\n- Configure your delivery pipeline and the target that you will canary-deploy to:- Configuration for the target is the same as for any target.\n- The delivery pipeline configuration, in the progression sequence for the specific target, includes a `gatewayServiceMesh` stanza to reference your Kubernetes Gateway API `HTTPRoute` configuration, as well as your Deployment and Service.```\nstrategy:\u00a0canary:\u00a0 \u00a0runtimeConfig:\u00a0 \u00a0 \u00a0kubernetes:\u00a0 \u00a0 \u00a0 \u00a0gatewayServiceMesh:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0httpRoute: \"ROUTE\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0service: \"SERVICE\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0deployment: \"DEPLOYMENT\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0routeUpdateWaitTime: \"WAIT_TIME\"\u00a0 \u00a0canaryDeployment:\u00a0 \u00a0 \u00a0percentages:\u00a0 \u00a0 \u00a0- 50\n```Where...- is your httpRoute configuration that defines the routing behavior you want.\n- is your Service configuration, which Cloud Deploy requires for canary deployments to GKE and GKE Enterprise.\n- is your Deployment configuration, which Cloud Deploy requires for canary deployments to GKE and GKE Enterprise.\n- is an amount of time for Cloud Deploy to wait for changes to the `HTTPRoute` resource to finish propagating, to avoid dropped requests. For example: `routeUpdateWaitTime: 60s` .If you're running canary using Gateway API without Istio, and the Gateway API is connected to a Google Cloud load balancer, a small amount of traffic may be lost when the canary instance is scaled down. You can configure this setting if you observe this behavior.## Use parallel deployment with a canary deployment strategy\nYou can run a canary deployment using [parallel deployment](/deploy/docs/parallel) . This means the target you're progressively deploying to can comprise two or more child targets. For example, you can deploy progressively to clusters in separate regions, at the same time.\n### How is a parallel canary different from single-target canaries\n- As with single-target canary deployment, if you're deploying to GKE targets, you need a Kubernetes Deployment configuration and a Kubernetes Service configuration in your manifest.\n- As with single-target canary deployment, your delivery pipeline configuration must include a `strategy.canary` stanza inside the stage definition for the applicable stage.\n- Additionally, you need to [configure a multi-target](/deploy/docs/parallel#configure_the_multi-target) , and you need to [configure the child targets](/deploy/docs/parallel#configure_the_child_targets) which that multi-target references.\n- When you create a release, a [controller rollout](/deploy/docs/terminology#controller_rollout) and the [child rollouts](/deploy/docs/terminology#child_rollout) are created.Both types of rollout\u2014controller and child\u2014have separate phases for all of the configured canary percentages, and a `stable` phase for the canary 100%.\n- You can't [advance](/deploy/docs/deployment-strategies/manage-rollout#advance_rollout) a child rollout.You can advance controller rollouts only. When you advance the controller rollout to the next stage, the child rollouts are advanced too, by Cloud Deploy.\n- You can't [retry](/deploy/docs/deployment-strategies/manage-rollout#retry_failed_job) failed jobs in the controller rollout.You can retry a job in child rollouts only.\n- You can't [ignore](/deploy/docs/deployment-strategies/manage-rollout#ignore_job) failed jobs in the controller rollout.You can ignore failed jobs in child rollouts only.\n- You can [cancel a controller rollout](/deploy/docs/deployment-strategies/manage-rollout#cancel_rollout) , but you can't cancel child rollouts.\n- You can [terminate job runs](/deploy/docs/deployment-strategies/manage-rollout#terminate_job_run) under a child rollout only, not a controller rollout.\n### What to do if a parallel rollout fails in canary\nWhen a child rollout fails, the controller rollout can transition to different states, depending on what happens with the child rollouts:\n- If one or more child rollouts fail, but at least one child rollout is still `IN_PROGRESS` , the controller rollout remains `IN_PROGRESS` .\n- If one or more child rollouts fail, but at least one child rollout succeeds, the controller rollout is `HALTED` if there are more phases after the current one.If this is the `stable` phase, the controller rollout is `FAILED` .`HALTED` gives you a chance to either [ignore](/deploy/docs/deployment-strategies/manage-rollout#ignore_job) , [retry](/deploy/docs/deployment-strategies/manage-rollout#retry_failed_job) failed jobs within the failed child rollout, or [cancel the controller rollout](/deploy/docs/deployment-strategies/manage-rollout#cancel_rollout) and prevent further actions on the child rollouts.\n- If the controller rollout is in a `HALTED` state because of a failed child rollout, and you ignore the failed job in the child rollout, the controller rollout reverts to an `IN_PROGRESS` state.## Execute the configured canary\nTo run the canary deployment:\n- Register the configured delivery pipeline and targets.```\ngcloud deploy apply --file=PIPELINE\n```The delivery pipeline includes the automated or custom canary configuration, for your chosen runtime.This command assumes your targets are defined in the same file or have otherwise already been registered. If not, be sure to register your targets too.\n- Create a release:```\ngcloud deploy releases create RELEASE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --delivery-pipeline=PIPELINE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --region=REGION\n```The delivery pipeline identified by `` contains the automated or custom canary configuration described in this document.\n- Advance the canary:\n```\ngcloud deploy rollouts advance ROLLOUT_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --release=RELEASE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --delivery-pipeline=PIPELINE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --region=REGION\n```\nWhere:\n`` is the name of the current rollout which you're advancing to the next phase.\n`` is the name of the release that this rollout is part of.\n`` is the name of the delivery pipeline you're using to manage deployment of this release.\n`` is the name of the region in which the release was created, for example `us-central1` . This is required.\nSee the Google Cloud SDK reference for more information about the [gcloud deploy rollouts advance command](/sdk/gcloud/reference/deploy/rollouts/advance) .- [Open the Deliverypipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) .\n- Click your pipeline shown in the list of delivery pipelines.The Delivery pipeline details page shows a graphical representation of your delivery pipeline's progress.\n- On the **Rollouts** tab, under **Delivery pipeline details** , click the name of your rollout.The rollout details page is shown, for that rollout.Notice that in this example, the rollout has a `canary-50` phase and a `stable` phase. Your rollout might have more phases or different phases.\n- Click **Advance rollout** .The rollout is advanced to the next phase.### Skipped phases\nIf you deploy a canary and your application has not been deployed to that runtime yet, Cloud Deploy skips the canary phase and runs the stable phase. See [Skipping phases the first time](/deploy/docs/deployment-strategies#skip_phases) to find out why this happens.\n## What's next\n- Try the [canary deployment quickstart](/deploy/docs/deploy-app-canary) .\n- Find out how to [manage the lifecycle of your canary's rollouts](/deploy/docs/deployment-strategies/manage-rollout) .\n- Learn more about [parallel deployment](/deploy/docs/parallel) .", "guide": "Cloud Deploy"}