{"title": "Cloud Deploy - Run hooks before and after deploying", "url": "https://cloud.google.com/deploy/docs/hooks", "abstract": "# Cloud Deploy - Run hooks before and after deploying\nThis document describes how to run arbitrary programs or operations before and/or after you deploy.\nYou can configure Cloud Deploy and Skaffold to run [actions](#configure_in_skaffold) to perform pre-deployment actions or post-deployment actions, or both. These programs, run in this way, are called \"hooks.\" Predeploy and postdeploy hooks runs as a predeploy and postdeploy [jobs](/deploy/docs/deployment-strategies/manage-rollout#jobs_and_job_runs) on the rollout.\nYou can configure each hook to run in a specified Cloud Deploy [execution environment](/deploy/docs/execution-environment) , but if you're deploying to Google Kubernetes Engine you can optionally configure it to run on the GKE cluster where you're deploying your application.\nDeploy hooks are assumed to be idempotent. If a given action is run more than once, there is no additional effect.\n**Note:** the user who provides the program to run is responsible for that program's behavior, including idempotency.\n", "content": "## How do deploy hooks work?\nThe following describes the steps for configuring deploy hooks, and the Skaffold and Cloud Deploy process for running those hooks:\n- You configure the `skaffold.yaml` used for a given release to include `customActions` that identify the container image or images to use to run the hooks, and the specific command or script to run on each container.\n- You configure hooks in one or more stages in your delivery pipeline progression, each of which references one of the `customActions` you configured in `skaffold.yaml` .\n- Before the rollout's deploy job runs, Skaffold runs any commands configured in `skaffold.yaml` that are referenced in a `predeploy` stanza in the pipeline progression.The `predeploy` hook always runs as the first job in the phase.\n- After the rollout's deploy job runs, Cloud Deploy runs any commands configured in `skaffold.yaml` that are referenced in a `postdeploy` stanza in the pipeline progression. **Note:** if there is a `verify` job configured for the stage, [verification](/deploy/docs/deploy/docs/verify-deployment) runs the `postdeploy` job.\nDeploy hooks are run in the default Cloud Deploy execution environment, or in a specified alternate execution environment. For deployments to GKE and GKE Enterprise, you can optionally [run the hooks on the same cluster](/deploy/docs/hooks#run_the_hooks_on_the_application_cluster) where the application is being deployed.\n### Using deploy hooks with a canary deployment\nWhen you configure deploy hooks for a canary deployment, there are several things to know:\n- In the delivery pipeline stage, [configuration of the hook](/deploy/docs/config-files#predeploy_and_postdeploy_hooks) ( `predeploy` and `postdeploy` ) is under `strategy.canary.canaryDeployment` or `strategy.canary.customCanaryDeployment.phaseConfigs` , rather than under `strategy.standard` .\n- For an automated canary, `predeploy` hooks are executed before the deploy in the first phase only, and `postdeploy` hooks are executed after the deploy in the last phase (stable) only.## Configure actions in Skaffold\nIn your `skaffold.yaml` file, the `customActions` stanza takes one or more [customActions stanzas](https://skaffold.dev/docs/custom-actions/) , configured as follows:\n```\ncustomActions- name: ACTION_NAME\u00a0 containers:\u00a0 - name: CONTAINER_NAME\u00a0 \u00a0 image: IMAGE\u00a0 \u00a0 command: [COMMANDS_TO_RUN]\u00a0 \u00a0 args: [LIST_OF_ARGS]\n```\nIn this `customerActions` stanza:\n- Is a name for this action. This name can be anything you want, but must be unique within this `skaffold.yaml` . This is the name that will be referenced from the pre- and post-deploy actions [defined in the delivery pipeline stage](#define_action_in_pipeline) .\n- Is a name for the specific container. This name can be anything you want, but must be unique within this `skaffold.yaml` .\n- Is the name of the container image in which your command will execute.\n- Is a list of entrypoints to run on that container. `\"/bin/sh\"` is a typical command to specify here, to invoke a shell, and you would include the command to run in that shell in the args.\n- Is a list of arguments to provide to the command. This is a comma-separated list, with each argument in quotation marks. If your is `\"/bin/sh\"` , then one of the arguments here would be `\"-c\"` , and another argument would be the entire command you want to run in the shell you're invoking.Here's an example:```\ncommand: [\"/bin/sh\"]args: [\"-c\", `echo \"This command ran!\"`]\n```\nTo learn more about Skaffold custom actions, see the [Skaffold documentation](https://skaffold.dev/docs/custom-actions/) .\n## Configure the pipeline to reference the actions\nTo finish [configuring your deploy hooks](/deploy/docs/config-files#predeploy_and_postdeploy_hooks) , you configure the delivery pipeline to reference the custom actions you defined in your `skaffold.yaml` file. Pre- and post-deploy actions are configured in one or more specific stages in the pipeline [progression](/deploy/docs/terminology#progression) .\nThe following is how you would configure pre-and post-deploy hooks in a pipeline stage when using a `standard` deployment strategy:\n```\nserialPipeline:\u00a0 stages:\u00a0 - targetId: hooks-staging\u00a0 \u00a0 profiles: []\u00a0 \u00a0 strategy:\u00a0 \u00a0 \u00a0 standard:\u00a0 \u00a0 \u00a0 \u00a0 predeploy:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 actions: [\"PREDEPLOY-ACTION\"]\u00a0 \u00a0 \u00a0 \u00a0 postdeploy:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 actions: [\"POSTDEPLOY-ACTION\"] \n```\nIn this yaml:\n- Is the same as the that you used in your `skaffold.yaml` to define the custom action you want to run before deploying.\n- Is the same as the that you used in your `skaffold.yaml` to define the custom action you want to run after deploying.\nYou can specify more than one action for `predeploy` and `postdeploy` , separated by commas. When more than one action is specified, they execute serially, in the order they're specified. The job (predeploy or postdeploy) fails on the first action that fails, and the remaining actions aren't run.\nBy default, if you're running more than one container, in parallel, and a job fails, both containers are stopped. You can configure this behavior using the [Skaffold custom action fail strategy](https://skaffold.dev/docs/custom-actions/#fail-strategy) .\n## Run the hooks on the application cluster\nBy default, deploy hooks run in the Cloud Deploy [execution environment](/deploy/docs/execution-environment) . You can also configure Skaffold to run those custom actions on the same cluster where your application is running. When you [configure custom actions](#configure_in_skaffold) in `skaffold.yaml` and [enable them on a pipeline stage](#define_action_in_pipeline) , the action runs automatically in that target's cluster.\nThis ability is available for deployments to GKE and GKE Enterprise only, not for Cloud Run. Deployments to Cloud Run can only run hooks in the Cloud Deploy execution environment.\nTo run your hook on the cluster, include an `executionMode.kubernetesCluster` stanza in your `skaffold.yaml` configuration file, inside the `customActions` stanza for the specific custom action:\n```\ncustomActions- name: ACTION_NAME\u00a0 containers:\u00a0 - name: CONTAINER_NAME\u00a0 \u00a0 image: IMAGE\u00a0 \u00a0 command: [COMMANDS_TO_RUN]\u00a0 \u00a0 args: [LIST_OF_ARGS]\u00a0 executionMode:\u00a0 \u00a0 kubernetesCluster: {}\n```\n**Note:** you can also include the `jobManifestPath` and `overrides` properties, under `kubernetesCluster` , to point to a manifest for your container, and any values you want to override. ( `overrides` takes Kubernetes inline JSON with the values you want to replace.) [Learn more](https://skaffold.dev/docs/custom-actions/#remote-k8s-job) .\nThe following is an example `customActions` stanza that includes `executionMode` to invoke the hook container on the application cluster:\n```\ncustomActions:- name: predeploy-action\u00a0 containers:\u00a0 - name: predeploy-echo\u00a0 \u00a0 image: ubuntu\u00a0 \u00a0 command: [\"/bin/sh\"]\u00a0 \u00a0 args: [\"-c\", 'echo \"this is a predeploy action\"' ]\u00a0 executionMode:\u00a0 \u00a0 kubernetesCluster: {}\n```\nThe `executionMode` stanza is optional, and if you omit it, Skaffold runs the custom action container in the Cloud Deploy execution environment.\n## Available environment variables\nCloud Deploy provides and populates the following environment variables in the [execution environment](/deploy/docs/execution-environment) , which you can use for your hooks:\n- ANTHOS_MEMBERSHIPFor targets of type `ANTHOS` , the fully specified resource name of the Anthos membership.\n- CLOUD_RUN_LOCATIONFor targets of type `RUN` , the region the Cloud Run service is deployed in.\n- CLOUD_RUN_PROJECTFor targets of type `RUN` , the project in which the Cloud Run service was created.\n- CLOUD_RUN_SERVICEFor targets of type `RUN` , the name of the Cloud Run service deployed.\n- CLOUD_RUN_SERVICE_URLSFor targets of type `RUN` , the URL or URLs (comma-separated list) that end users will use to access your service. You can find these in the Cloud Run service details for your service, in the Google Cloud console.\n- CLOUD_RUN_REVISIONFor targets of type `RUN` , the specific revision of the Cloud Run service.\n- GKE_CLUSTERFor targets of type `GKE` , the fully specified resource name of the Google Kubernetes Engine cluster, for example `projects/p/locations/us-central1/clusters/dev` .\n- TARGET_TYPEThe specific runtime type of the target. Either `GKE` , `ANTHOS` , or `RUN` .\n- CLOUD_DEPLOY_LOCATIONThe region in which the execution environment is running.\n- CLOUD_DEPLOY_DELIVERY_PIPELINEThe ID delivery pipeline the execution environment is running.\n- CLOUD_DEPLOY_TARGETThe ID of the target the execution environment is running.\n- CLOUD_DEPLOY_PROJECTThe project number of the Google Cloud project in which the execution environment is running.\n- CLOUD_DEPLOY_RELEASEThe ID of the release in which the hooks will run.\n- CLOUD_DEPLOY_ROLLOUTThe ID of the rollout that contains the jobs for the hooks.\n- CLOUD_DEPLOY_JOB_RUNThe ID of the [job run](/deploy/docs/deployment-strategies/manage-rollout#jobs_and_job_runs) that represents the current execution of the job.\n- CLOUD_DEPLOY_PHASEThe [phase](/deploy/docs/deployment-strategies/manage-rollout#phases) in the rollout that contains the job for the hooks.## What's next\n- Try the [quickstart: Run hooks before and after deploying](/deploy/docs/deploy-app-hooks) .\n- [Learn more](/deploy/docs/using-skaffold) about Skaffold.", "guide": "Cloud Deploy"}