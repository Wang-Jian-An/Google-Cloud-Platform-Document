{"title": "Cloud Deploy - Overview of Cloud Deploy", "url": "https://cloud.google.com/deploy/docs/overview", "abstract": "# Cloud Deploy - Overview of Cloud Deploy\nCloud Deploy is a managed service that automates delivery of your applications to a series of [target](/deploy/docs/terminology#target) environments in a defined promotion sequence. When you want to deploy your updated application, you create a [release](/deploy/docs/terminology#release) , whose [lifecycle](/deploy/docs/architecture#how_they_fit_together_to_deliver_your_release) is managed by a [delivery pipeline](/deploy/docs/terminology#delivery_pipeline) .\n", "content": "## How a Cloud Deploy pipeline works\nThe Cloud Deploy delivery pipeline contains the following information:\n- A name, which you use when referring to the delivery pipeline, and a description.\n- The promotion sequence, describing the order in which to deploy to the configured [targets](/deploy/docs/terminology#target) .\n- Optionally, [labels and annotations](/deploy/docs/labels-annotations) .\n- Also optionally, the target definitions themselves.\nTargets can be [defined](/deploy/docs/config-files#target_definitions) in the same delivery pipeline [configuration file](/deploy/docs/config-files) , or in one or more separate files. Multiple delivery pipelines can use the same target or targets, but a given target can be used only once in a given delivery pipeline.\n### The Cloud Deploy delivery process\nThe following is a description of what happens in a simple Cloud Deploy continuous delivery scenario.\n- You define your [delivery pipeline](/deploy/docs/terminology#delivery_pipeline) in a [YAML configuration file](/deploy/docs/config-files#structure_of_a_delivery_pipeline_configuration_file) .This configuration file defines the promotion sequence in which to deploy your application to a series of [targets](/deploy/docs/terminology#target) .You also need a [configuration](https://skaffold.dev/docs/references/yaml/) for [Skaffold](/skaffold) , which Cloud Deploy needs in order to perform render and deploy operations.\n- You define your targets, either in the pipeline configuration file or in a separate file or files.\n- You register your pipeline with the Cloud Deploy service.Now that the service knows about your application, it manages the deployment to targets according to your defined promotion sequence.\n- The output of your CI process includes a call to Cloud Deploy to initiate your delivery pipeline.This call creates a `release` resource, representing the rendered manifest for each target, each of which is generated using the provided rendering source, skaffold.yaml, and references to specific container images to deploy. For this first call to create a [release](/deploy/docs/terminology#release) , Cloud Deploy automatically creates a [rollout](/deploy/docs/terminology#rollout) resource, which associates the release with the first target environment. Based on that rollout, your application is deployed to the first target.You can use any CI tool as long as it outputs one or more container images to provide to your Cloud Deploy delivery pipeline.Furthermore, the call to create a release and invoke a delivery pipeline doesn't have to come from the CI tool. It can come from a script or any system responding to completion of the CI process.\n- When you're ready to deploy your application to the next target, you call Cloud Deploy to promote it.In each case, the call to invoke the promotion causes Cloud Deploy to create a new rollout.\n- Promotion continues through all targets in your promotion sequence, the last of which is `prod` (or whatever name you use for your final target to put the application into production).The process of release creation and promotion is described in more detail in [Cloud Deploy service architecture](/deploy/docs/architecture#how_they_fit_together_to_deliver_your_release) .\nThroughout pipeline execution, Cloud Deploy collects metrics and [audit](/deploy/docs/audit-logs) details.\n### Promotion\nTo [promote a release](/deploy/docs/promote-release) is to deploy it to the next target in the promotion sequence defined in your pipeline. The first call to Cloud Deploy creates a `release` , then a `rollout` resource that's used to deploy to the first target in the promotion sequence. Each subsequent call to promote the release results in a rollout to the next target.\n### Approvals\nYou can specify that an approval is needed for promotion to any target. For example, you might want to require approval for promotion into a production target. To require approval for a target, set the `requireApproval` property in the [target definition](/deploy/docs/config-files#target_definitions) .\nWhen a target requires approval, Cloud Deploy generates a Pub/Sub message that can be consumed by an integrated system. For example, a ticketing system could subscribe to the message to kick off an approval workflow.\nSee [Require approval](/deploy/docs/promote-release) for more information on promotions and managing approval for promotions.\n### Notifications\nCloud Deploy provides Pub/Sub notifications for the following events:\n- Render: start, success, and failure\n- Deploy: start, success, and failure\n- Approval required\n- Approval approved\n- Approval rejected\nCloud Deploy uses a Pub/Sub topic to send these notifications.\nSee [Using Cloud Deploy notifications](/deploy/docs/subscribe-deploy-notifications) for more details.\n### Rollbacks\nCloud Deploy supports rolling back your deployed application in any target. A rollback in Cloud Deploy consists of triggering a rollout against the last successfully deployed release. The new rollout uses the same parameters that were used in that successful deployment.\nSee [Rolling back a deployment](/deploy/docs/roll-back) for more details.\n## About Skaffold and Cloud Deploy\nCloud Deploy uses [Skaffold](/skaffold) for rendering, deployment, and verification. With Skaffold, you can also easily connect your local development loop to a Cloud Deploy continuous delivery pipeline.\nTo learn more about how Cloud Deploy integrates with Skaffold, see the [Skaffold overview](/deploy/docs/using-skaffold) .\n## Cloud Deploy with other Google Cloud tools\nCloud Deploy supports almost any tool upstream in a CI/CD pipeline. That is, you can use any development environment and source code repository, any continuous integration (CI) system, and any artifact repository.\nDownstream, Cloud Deploy deploys to Google Kubernetes Engine, Cloud Run, and GKE Enterprise.\nIf you used mostly Google Cloud tools, your source-to-prod flow would look like this:\n- Use [Cloud Code](/code/docs) to create your application source.Cloud Code extends several popular IDEs (VS Code, IntelliJ, Cloud Shell) to make it easier to build applications to deploy and run on Google Cloud.\n- Use [Skaffold](https://skaffold.dev) to manage your local development loop.Cloud Deploy uses Skaffold, through Cloud Build, to render and deploy your manifests. This integration means that you need to maintain a `skaffold.yaml` file, but does not otherwise mean you need to make Skaffold part of your local development flow. But you can take advantage of it for [continuous development](https://skaffold.dev/docs/workflows/dev/) .\n- Build your application using Cloud Build. [Cloud Build](/build/docs) lets you set up a CI pipeline that can be triggered from a commit to your source code repository. The output from Cloud Build will be artifacts including deployable container images. You can add a call to Cloud Deploy to create a release and invoke your delivery pipeline.\n- Store your artifacts in Artifact Registry.Cloud Deploy retrieves the container image or images from [Artifact Registry](/artifact-registry/docs) , which lets you centrally store artifacts and dependencies.\n- Configure your delivery pipeline in Cloud Deploy to take the container image and deploy it in a progression of targets.Each of those targets identified in your delivery pipeline represents a GKE cluster, Cloud Run, or GKE cluster where your application is ultimately deployed.\n- Manage your application on GKE, Cloud Run or GKE Enterprise. [GKE](/kubernetes-engine/docs) is the Google Cloud managed environment for running containerized applications on Kubernetes.With [Cloud Run](/run/docs) , you can run containers in a serverless environment. [GKE Enterprise](/anthos/docs) provides a consistent development and operations experience for cloud and on-premises environments.\n- Monitor the performance of your application using Google Cloud Observability. [Google Cloud Observability](/stackdriver/docs) offers integrated monitoring and logging for your application.## What's next\n- For a quick-and-easy look at how to create a delivery pipeline and use it to deploy an application, try the [quickstarts](/deploy/docs/quickstarts) .\n- Try out one of the [Cloud Deploy walkthroughs](/deploy/docs/tutorials) .\n- Learn more about [how Cloud Deploy components work together](/deploy/docs/architecture) .\n- Review [Google Cloud Architecture Framework: Operational excellence](/architecture/framework/operational-excellence) for articles on how to use the principles of operational excellence to build an automated delivery foundation.\n- [Learn how to combine Google Cloud CI/CD tools to develop and deliversoftware effectively to GKE](https://cloud.google.com/architecture/app-development-and-delivery-with-cloud-code-gcb-cd-and-gke) .", "guide": "Cloud Deploy"}