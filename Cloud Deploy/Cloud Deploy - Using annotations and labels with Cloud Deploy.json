{"title": "Cloud Deploy - Using annotations and labels with Cloud Deploy", "url": "https://cloud.google.com/deploy/docs/labels-annotations", "abstract": "# Cloud Deploy - Using annotations and labels with Cloud Deploy\nYou can attach annotations and labels to your Cloud Deploy resources. They're not required.\nThis document lists the resources to which you can attach labels and annotations, and describes how you can use them and where you can view them.\n", "content": "## About annotations and labels\nare key-value pairs of free-form text. You can use them to attach arbitrary information associated with the resource.\nYou can use to organize resources. For example, you can apply logic based on label selection.\nAs with annotations, labels are key-value pairs. But they must conform to the following limitations:\n- A Cloud Deploy resource can have no more than 64 labels.\n- Keys and values both must be 128 bytes or less.\n- Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes.\n- Keys must start with a lowercase letter or international character.\n- All characters must use UTF-8 encoding. International characters are allowed.\nThe `--labels` flag (for example, on `gcloud deploy releases create` ) can take a list of key-value pairs:\n`\"name=wrench,mass=1.3kg,count=3\"`\nSee the [Cloud Deploy API documentation](/deploy/docs/api/reference/rest/v1/projects.locations.deliveryPipelines#resource:-deliverypipeline) for more details.\n## Adding annotations and labels to Cloud Deploy resources\nYou can add annotations and labels to the following Cloud Deploy resources:\n- Delivery pipelinesFor delivery pipelines, you add annotations and labels to the [YAMLconfiguration file](/deploy/docs/config-files#structure_of_a_delivery_pipeline_configuration_file) .\n```\napiVersion: deploy.cloud.google.com/v1\u00a0 kind: DeliveryPipeline\u00a0 metadata:\u00a0 \u00a0name:\u00a0 \u00a0annotations:\u00a0 \u00a0 \u00a0key: \"value\"\u00a0 \u00a0labels:\u00a0 \u00a0 \u00a0key: \"value\"\u00a0 description:\u00a0 serialPipeline:\u00a0 \u00a0stages:\u00a0 \u00a0- targetId:\u00a0 \u00a0 \u00a0profiles: []\u00a0 \u00a0- targetId:\u00a0 \u00a0 \u00a0profiles: []\n```\n- TargetsAdd annotations and labels to targets in the [target configuration YAML](/deploy/docs/config-files#target_definitions) .For example, you can include a link to more information about third-party monitoring for your application. However, if the target is shared, remember that it could be used for more than one application, so the link should not be application specific.\n- ReleasesYou can add annotations or labels, or both, to a release using the `--labels` and `--annotations` flags on the `gcloud deploy releases create` command. Labels and annotations you add to a release are not carried forward as labels or annotations on resulting rollouts.For example, you can use annotations to include a reference to a Git PR, author, or SHA hash of the Git commit containing the changes to be deployed. See [Using annotations to track the release's provenance](/deploy/docs/integrating-ci#using_annotations_to_track_the_releases_provenance) for more details.\n- RolloutsYou can add annotations and labels to new rollouts by specifying `--labels` or `--annotations` on the `gcloud deploy releases promote` command.The only way to add annotations and labels to the [first rollout](/deploy/docs/overview#the_delivery_process) is to [create a rollout using the Cloud Deploy API](/deploy/docs/api/reference/rest/v1/projects.locations.deliveryPipelines.releases.rollouts/create) , and include the annotations or labels in the [rollout resource](/deploy/docs/deploy/docs/api/reference/rest/v1/projects.locations.deliveryPipelines.releases.rollouts#Rollout) .Some things you can do using annotations on a rollout:- Create an annotation containing the URL pointing to test results.\n- Create an annotation with a relevant ticket number from a workflow management system.**Note:** labels and annotations added to Cloud Deploy resources are applied to those resources only. They're not transitively applied to deployed resources.\n## Where can I find a resource's annotations?\nYou can view annotations and labels for any supported resource using the resource's `describe` command or by viewing the resource's metadata in Google Cloud console.\n### From the gcloud CLI\nTo view a resource's annotations and labels from the command line, use a `describe` command on that resource. The following example shows the details for a target:\n```\n\u00a0$ gcloud deploy targets describe qsprod --delivery-pipeline=my-demo-app-1 \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --region=us-central1 \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --project=quickstart-basic8\n```\nThe above command returns the following output:\n```\n\u00a0Target:\u00a0 \u00a0annotations:\u00a0 \u00a0 \u00a0approver_ticket_queue_url: https://workflows.example.com/deploy_approvals/4985729\u00a0 \u00a0createTime: '2021-10-28T19:33:56.907887878Z'\u00a0 \u00a0description: development cluster\u00a0 \u00a0etag: 5b3bbee48f693cd7\u00a0 \u00a0gke:\u00a0 \u00a0 \u00a0cluster: projects/quickstart-basic8/locations/us-central1/clusters/quickstart-cluster-qsdev\u00a0 \u00a0name: projects/quickstart-basic8/locations/us-central1/targets/qsdev\u00a0 \u00a0uid: 3f3a5f8e7e0648e3bb17898ee531455d\u00a0 \u00a0updateTime: '2021-11-10T16:55:11.502660604Z'\n```\nNotice that this output includes the `target_name` annotation.\n### In Google Cloud console\nTo view annotations and labels for any Cloud Deploy resource that has such metadata, view that resource's details in Google Cloud console.\nFor example, here are the delivery pipeline details for a pipeline that includes an annotation:\nAnd here are the details for a release:\n## Automatic labels from Cloud Deploy\nBy default, Cloud Deploy adds the following labels to rendered manifests:\n- `app.kubernetes.io/managed-by:`A standard label to indicate deployment tooling. This is always set to `google-cloud-deploy` to identify the origin of the workload.\n- `deploy.cloud.google.com/location:`The location of the deployed delivery pipeline, for example `us-central1` .\n- `deploy.cloud.google.com/project-id:`The project ID of the deployed delivery pipeline.\n- `deploy.cloud.google.com/delivery-pipeline-id:`The resource ID of the delivery pipeline used. This is taken from the [release snapshot](/deploy/docs/pipeline-instances) .\n- `deploy.cloud.google.com/release-id:`The resource ID of the deployed release.\n- `deploy.cloud.google.com/target-id:`The resource ID of the deployment target. This is taken from the [release snapshot](/deploy/docs/pipeline-instances) .\n### Example usage\nOne example of using these automatically applied labels would be to create a graph within [Google Cloud Observability](https://cloud.google.com/products/operations) that aggregates [a container metric](https://cloud.google.com/monitoring/api/resources#tag_k8s_container) by Cloud Deploy properties:\n```\nfetch k8s_container| metric 'kubernetes.io/container/cpu/core_usage_time'| filter metadata.user.c'app.kubernetes.io/managed-by' = \"google-cloud-deploy\"| group_by [\u00a0 \u00a0 pipeline: metadata.user.c'deploy.cloud.google.com/delivery-pipeline-id',\u00a0 \u00a0 target: metadata.user.c'deploy.cloud.google.com/target-id',\u00a0 \u00a0 release: metadata.user.c'deploy.cloud.google.com/release-id',],\u00a0 \u00a0 \u00a0 sum(val())| rate 1m\n```\nYou can also use this with custom metrics. For example, if PodMonitor is configured with a label to match `app.kubernetes.io/managed-by: google-cloud-deploy` . You could then use a query to define a graph for custom metrics:\n```\nfetch k8s_container| metric workload.googleapis.com/example_requests_total| filter metadata.user_labels.c'app.kubernetes.io/managed-by' = \"google-cloud-deploy\"| group_by [\u00a0 \u00a0 pipeline: metadata.user.c'deploy.cloud.google.com/delivery-pipeline-id',\u00a0 \u00a0 target: metadata.user.c'deploy.cloud.google.com/target-id',\u00a0 \u00a0 release: metadata.user.c'deploy.cloud.google.com/release-id',],\u00a0 \u00a0 sum(val())| rate 1m\n```\n### Disabling automatic labels\nYour organization might disallow these automatic labels for regulatory, compliance, or other reasons. To support this, [Organization Policy Service](/resource-manager/docs/organization-policy/overview) offers a constraint that controls whether or not these labels are applied.\nTo prevent Cloud Deploy from automatically adding labels to rendered manifests, set Organization Policy Service constraint `clouddeploy.disableServiceLabelGeneration` to be enforced. Enforcing this constraint does not prevent you from manually specifying labels, nor does it remove labels from existing releases.\nSee [Using boolean constraints in organization policy](/resource-manager/docs/organization-policy/using-constraints#boolean-constraint) for more information on enabling constraints.", "guide": "Cloud Deploy"}