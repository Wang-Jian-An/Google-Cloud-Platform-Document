{"title": "Cloud Deploy - Verify your application after deploying it", "url": "https://cloud.google.com/deploy/docs/deploy-app-verification", "abstract": "# Cloud Deploy - Verify your application after deploying it\n# Verify your application after deploying it\nThis quickstart shows you how to use Cloud Deploy to verify your deployed application, as part of the delivery pipeline.\nIn this quickstart, you'll do the following:- Create one GKE cluster or one Cloud Run service.You can use deploy verification on an GKE Enterprise cluster too, but this quickstart uses GKE and Cloud Run only.\n- Create a [Skaffold](/skaffold) configuration and either a Kubernetes manifest or a Cloud Run service definition.The Skaffold configuration file is where you configure the deploy verification container to run after deploying.\n- Define your Cloud Deploy delivery pipeline and deployment target.In the delivery pipeline configuration, you'll reference the deploy verification that was defined in `skaffold.yaml` , to run that verification.This pipeline includes only one stage and uses only one target.\n- Create a release, which automatically deploys to the target.After the application is deployed, the [verification](/deploy/docs/verify-deployment) is run as a [phase](/deploy/docs/deployment-strategies/manage-rollout#phases) of the rollout.\n- View the results of the verification in the Cloud Build logs, using the Cloud Deploy **Rollout details** page in Google Cloud console.\n", "content": "## Before you begin- If you already have the CLI installed, make sure you're running the latest version:\n- ```\ngcloud components update\n```\n- Make sure the [defaultCompute Engine service account](/deploy/docs/cloud-deploy-service-account#execution_service_account) has sufficient permissions.The service account might already have the necessary permissions. These steps are included for projects that disable automatic role grants for default service accounts.\n- First add the`clouddeploy.jobRunner`role:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/clouddeploy.jobRunner\"\n```\n- Add the developer role for your specific runtime.\n- For GKE:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/container.developer\"\n```\n- For Cloud Run:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/run.developer\"\n```\n- Add the`iam.serviceAccountUser`role, which includes the`actAs`permission to deploy to the runtime:```\ngcloud iam service-accounts add-iam-policy-binding $(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/iam.serviceAccountUser\" \\\n --project=PROJECT_ID\n```## Create your runtime environment **If you're deploying to Cloud Run, you can skip this command** .\nFor GKE, create one cluster: `deploy-verification-cluster` , with default settings. The cluster's Kubernetes API endpoint must be network-reachable from the public internet. GKE clusters are externally accessible by default.\n```\ngcloud container clusters create-auto deploy-verification-cluster \\\n     --project=PROJECT_ID \\\n     --region=us-central1\n```## Prepare your Skaffold configuration and application manifestCloud Deploy uses [Skaffold](/deploy/docs/using-skaffold) to provide the details for what to deploy and how to deploy it to your [target](/deploy/docs/terminology#target) .\nIn this quickstart, you create a `skaffold.yaml` file, which identifies the manifest to be used to deploy the sample app, and also identifies the container to run after deployment (the deploy verification).- Open a terminal window.\n- Create a new directory and navigate into it.\n```\nmkdir deploy-verification-gke-quickstartcd deploy-verification-gke-quickstart\n```\n```\nmkdir deploy-verification-run-quickstartcd deploy-verification-run-quickstart\n```\n- Create a file named `skaffold.yaml` with the following contents:\n```\napiVersion: skaffold/v4beta7kind: Configmanifests:\u00a0 rawYaml:\u00a0 - k8s-pod.yamldeploy:\u00a0 kubectl: {}verify:- name: verification-test\u00a0 container:\u00a0 \u00a0 name: verification-echo\u00a0 \u00a0 image: ubuntu\u00a0 \u00a0 command: [\"/bin/sh\"]\u00a0 \u00a0 args: [\"-c\", 'echo \"Your test or tests would go here.\"' ]\n```\n```\napiVersion: skaffold/v4beta7kind: Configmanifests:\u00a0 rawYaml:\u00a0 - service.yamldeploy:\u00a0 cloudrun: {}verify:- name: verification-test\u00a0 container:\u00a0 \u00a0 name: verification-echo\u00a0 \u00a0 image: ubuntu\u00a0 \u00a0 command: [\"/bin/sh\"]\u00a0 \u00a0 args: [\"-c\", 'echo \"Your test or tests would go here.\"' ]\n```\nThis file includes the `verify:` stanza, defining the container and command to run after deploying the application. In this case, we're deploying an Ubuntu container and running a simple `echo` command. You can view the results of this command in the logs. In a more realistic scenario, you would run tests against your deployed application.See the [skaffold.yaml reference](https://skaffold.dev/docs/references/yaml/) for more information about this configuration file.\n- Create the definition for your application\u2014a service definition for Cloud Run or a Kubernetes manifest for GKE.\nCreate a file named `k8s-pod.yaml` , with the following contents:\n```\napiVersion: v1kind: Podmetadata:\u00a0 name: my-verification-podspec:\u00a0 containers:\u00a0 - name: nginx\u00a0 \u00a0 image: my-app-image\n```\nThis file is a simple Kubernetes [manifest](https://kubernetes.io/docs/reference/glossary/?fundamental=true#term-manifest) , which is applied to the cluster to deploy the application.\nCreate a file named `service.yaml` , with the following contents:\n```\napiVersion: serving.knative.dev/v1kind: Servicemetadata:\u00a0 name: my-verification-run-servicespec:\u00a0 template:\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - image: my-app-image\n```\nThis file is a simple Cloud Run service definition, which is used at deploy time to create your Cloud Run service.\n## Create your delivery pipeline and targetsYou can define your pipeline and targets in one file or in separate files. In this quickstart, you create a single file.- Create your delivery pipeline and target definition:\nIn the `deploy-verification-gke-quickstart` directory, create a new file: `clouddeploy.yaml` , with the following contents:\n```\napiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0 name: deploy-verification-demo-app-gke-1description: main application pipelineserialPipeline:\u00a0 stages:\u00a0 - targetId: verify-staging\u00a0 \u00a0 profiles: []\u00a0 \u00a0 strategy:\u00a0 \u00a0 \u00a0 standard:\u00a0 \u00a0 \u00a0 \u00a0 verify: true---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: verify-stagingdescription: verification staging clustergke:\u00a0 cluster: projects/PROJECT_ID/locations/us-central1/clusters/deploy-verification-cluster\n```\nIn the `deploy-verification-run-quickstart` directory, create a new file: `clouddeploy.yaml` , with the following contents:\n```\napiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0 name: deploy-verification-demo-app-run-1description: main application pipelineserialPipeline:\u00a0 stages:\u00a0 - targetId: verify-staging\u00a0 \u00a0 profiles: []\u00a0 \u00a0 strategy:\u00a0 \u00a0 \u00a0 standard:\u00a0 \u00a0 \u00a0 \u00a0 verify: true---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: verify-stagingdescription: staging Run servicerun:\u00a0 location: projects/PROJECT_ID/locations/us-central1\n```\n **Note:** In this file, the target is included with the delivery pipeline, but you can define targets in a separate file or multiple separate files.\n- Register your pipeline and targets with the Cloud Deploy service:```\ngcloud deploy apply --file=clouddeploy.yaml --region=us-central1 --project=PROJECT_ID\n```You now have a delivery pipeline, with one target, ready to deploy your application and verify that deployment.\n- Confirm your pipeline and targets:In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view of list of your available delivery pipelines. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) The delivery pipeline you just created is shown, with one target listed in the **Targets** column.\n## Create a releaseA release is the central Cloud Deploy resource representing the changes being deployed. The delivery pipeline defines the lifecycle of that release. See [Cloud Deploy service architecture](/deploy/docs/architecture#how_they_fit_together_to_deliver_your_release) for details about that lifecycle.\nRun the following command from the `deploy-verification-gke-quickstart` directory to create a `release` resource that represents the container image to deploy:\n```\n\u00a0gcloud deploy releases create test-release-001 \\\u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0--delivery-pipeline=deploy-verification-demo-app-gke-1 \\\u00a0 \u00a0--images=my-app-image=gcr.io/google-containers/nginx@sha256:f49a843c290594dcf4d193535d1f4ba8af7d56cea2cf79d1e9554f077f1e7aaa\n```\nRun the following command from the `deploy-verification-run-quickstart` directory to create a `release` resource that represents the container image to deploy:\n```\n\u00a0gcloud deploy releases create test-release-001 \\\u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0--delivery-pipeline=deploy-verification-demo-app-run-1 \\\u00a0 \u00a0--images=my-app-image=us-docker.pkg.dev/cloudrun/container/hello@sha256:6063adf8f687702b4065151acddba6781c47bc602167eb9f3bec8aebc9ce95cc\n```As with all releases (unless they include `--disable-initial-rollout` ), Cloud Deploy automatically creates a [rollout](/deploy/docs/terminology#rollout) resource too. The application is automatically deployed into the one target configured for this delivery pipeline.\nThe verification job we specified in our Skaffold config runs as part of this rollout, after the application is deployed.## View the results in Google Cloud consoleAfter a few minutes, your release is deployed into your target runtime.\nThe verification job that we configured (for example purposes) prints a string to the Cloud Build log. We can view that log to confirm that the verification worked as expected.- In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view your delivery pipeline (\"deploy-verification-demo-app-gke-1\" or \"deploy-verification-demo-app-run-1\"). [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) \n- Click the name of your delivery pipeline (\"deploy-verification-demo-app-gke-1\" or \"deploy-verification-demo-app-run-1\").The pipeline visualization shows the app's deployment status. Because there's only one stage in the pipeline, the visualization shows only one node.And your release is listed on the **Releases** tab under **Delivery pipelinedetails** .\n- Click the **Rollouts** tab, under **Delivery pipeline details** .\n- Click the rollout name to view the rollout details. **Verify** is listed as a job.\n- Click **Verify** The job run log is displayed.\n- Scroll down in the list of log entries to find `verification-test` , and click it.Notice the `textPayload` . That string is what was configured in the `Verify` stanza in your [Skaffold configuration](#prepare_your_skaffold_configuration_and_kubernetes_manifest) .\n## Clean upTo avoid incurring charges to your Google Cloud account for   the resources used on this page, follow these steps.- Delete the GKE cluster or Cloud Run service:\n```\ngcloud container clusters delete deploy-verification-cluster --region=us-central1 --project=PROJECT_ID\n```\n```\ngcloud run services delete my-verification-run-service --region=us-central1 --project=PROJECT_ID\n```\n- Delete the delivery pipeline, target, release, and rollout:```\ngcloud deploy delete --file=clouddeploy.yaml --force --region=us-central1 --project=PROJECT_ID\n```\n- Delete the Cloud Storage buckets that Cloud Deploy created.One ends with `_clouddeploy` , and the other is `[region].deploy-artifacts.[project].appspot.com` . [Open the Cloud Storage browser page](https://console.cloud.google.com/storage/browser) \nThat's it, you completed this quickstart!## What's next\n- [Learn more about Cloud Deploy](/deploy/docs/overview) .\n- [Learn more about deploy verification](/deploy/docs/verify-deployment) .\n- [Try out the Cloud Deploy walkthrough](https://shell.cloud.google.com/?show=ide%2Cterminal&walkthrough_id=deploy--cloud-deploy-e2e-gke) .", "guide": "Cloud Deploy"}