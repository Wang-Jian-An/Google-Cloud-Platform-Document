{"title": "Cloud Deploy - Create a custom target", "url": "https://cloud.google.com/deploy/docs/create-custom-target", "abstract": "# Cloud Deploy - Create a custom target\nThis document describes how to create a custom Cloud Deploy target type and use that custom target type as a [target](/deploy/docs/terminology#target) in a Cloud Deploy [delivery pipeline](/deploy/docs/terminology#delivery_pipeline) .\nThe following is the high-level process for creating a custom target type and using it in your delivery pipeline:\n- [Create a containerized application](#create_containerized_application) or applications that include the functionality to deploy to your custom target, and that fulfill the Cloud Deploy [requirements](/deploy/docs/custom-targets#required_inputs_and_outputs) for custom target types.\n- [Define a custom action](#skaffold_define_action) in `skaffold.yaml` that references that container and specifies the command or commands to run on it.\n- [Create a CustomTargetType definition](#define_custom_target_type) referencing the custom action from the previous step, and register it as a Cloud Deploy resource.\n- [Define a new target](#define_target) with a `customTarget` property that identifies your new custom target type.\n- [Reference that target](#add_target_to_pipeline) from your delivery pipeline [progression](/deploy/docs/terminology#progression) .\n- [Create a release](#create_release) .\nEach of these steps is described in detail in the rest of this document.\n", "content": "## Create your containerized applications\nThe functionality to deploy to your custom target is defined in containerized applications, which you provide to Cloud Deploy by [referencing them from your skaffold.yaml file](#skaffold_define_action) . When your delivery pipeline includes a target that uses a custom target type, Cloud Deploy calls the custom-action containers defined for that custom target type, in Skaffold, to execute the render and deploy actions you've defined.\nThe behavior of your applications is up to you. However, it must consume the input environment variables provided by Cloud Deploy, and it must return the [required outputs](/deploy/docs/custom-targets#required_inputs_and_outputs) .\nIn most cases, you will create one container for your render action and one for your deploy action, for each custom target type you create. The render action is optional, but if you don't provide one, Cloud Deploy uses the default `skaffold render` .\n## Define your custom actions in Skaffold\nWith your custom-action container image or images in place, you reference them from your [skaffold.yaml configuration file](/deploy/docs/using-skaffold) .\nYou configure each custom action for a custom target in a `customActions` stanza. For any custom target type, you create a custom action, in Skaffold, for render and one for deploy. The [CustomTargetType](#define_custom_target_type) definition identifies which custom action is used for render and which is used for deploy.\n**Note:** The custom renderer is not required if your custom target can use the manifest generated by the default renderer ( `skaffold render` ). In almost all cases, you will need a custom render action.\nThe following is the configuration for custom render and deploy actions in `skaffold.yaml` :\n```\napiVersion: skaffold/v4beta7kind: ConfigcustomActions:# custom render action- name:\u00a0 containers:\u00a0 - name:\u00a0 \u00a0 image:\u00a0 \u00a0 command:\u00a0 \u00a0 args:# custom deploy action- name:\u00a0 containers:\u00a0 - name:\u00a0 \u00a0 image:\u00a0 \u00a0 command:\u00a0 \u00a0 args:\n```\nIn this Skaffold configuration:\n- `customActions.name`Is an arbitrary name for the custom render or deploy action. The `CustomTargetType` definition references this name, in the `renderAction` property or the `deployAction` property.\n- The `containers` stanza includes your reference, plus commands to run that container.The `containers` stanza allows more than one container, but Google recommends you only use one.\n- `customActions.containers.name`Is an arbitrary name for the specific container you're using for this action. As a best practice, this container name should always be SHA qualified.\n- `image`Is the path to the container image.\n- `command`Is the command or commands to run on the container.\n- `args`Is a collection of arguments to the `command` .\nSee the [Skaffold YAML reference](https://skaffold.dev/docs/references/yaml/) for detailed documentation on the configuration properties used in [customActions](https://skaffold.dev/docs/custom-actions) .\n**Note:** you can also define Skaffold configs and store them in a Git repository or in a Cloud Storage bucket, and [reference those configs from your custom target type definition](#remote_skaffold) .\n## Define your custom target type\nYou define a custom target by first creating a custom target , using the [CustomTargetType configuration](/deploy/docs/config-files#custom_target_type_definitions) . You can create the `CustomTargetType` in the same file as your delivery pipeline definition, or with target definitions, or in a separate file.\nThe `CustomTargetType` definition is as follows:\n```\n# Custom target type config (preview)apiVersion: deploy.cloud.google.com/v1kind: CustomTargetTypemetadata:\u00a0 name: [CUSTOM_TARGET_TYPE_NAME]\u00a0 annotations:\u00a0 labels:description:customActions:\u00a0 renderAction: [RENDER_ACTION_NAME]\u00a0 deployAction: [DEPLOY_ACTION_NAME]\u00a0 includeSkaffoldModules:\n```\nWhere\n- `CUSTOM_TARGET_TYPE_NAME`Is an arbitrary name you give to this custom target type definition. This name is referenced in the [target definition](/deploy/docs/config-files#target_definitions) for any target that uses the custom target type you're defining.\n- `RENDER_ACTION_NAME`Is the name of the custom render action. This value is the `customAction.name` defined in `skaffold.yaml` for the [render](/deploy/docs/custom-targets#required_inputs_and_outputs) action.\n- `DEPLOY_ACTION_NAME`Is the name of the custom deploy action. This value is the `customAction.name` defined in `skaffold.yaml` for the [deploy](/deploy/docs/custom-targets#required_inputs_and_outputs) action.\n- `includeSkaffoldModules`Is an optional stanza to use if you're using remote Skaffold configs. The properties in this stanza are shown in the section [Use remote Skaffold configs](#remote_skaffold) .\n### Use remote Skaffold configs\nYou can store Skaffold configs in a public Git repository or in a Cloud Storage bucket, and reference those configs from your custom target type definition.\nUsing remote Skaffold configs means that the `skaffold.yaml` you provide at release time doesn't need to have the custom actions defined. This allows for sharing custom actions across your organization.\nTo use remote Skaffold configs:\n- Create a Skaffold configuration with your custom action or actions.\n- Store the configuration in a Git repository or in a Cloud Storage bucket.\n- In your custom target type definition, add a `customActions.includeSkaffoldModules` stanza.\n- Under `includeSkaffoldModules` , specify the following:- Optionally, one or more `configs` elements:`- configs: [\"name1\", \"name2\"]`The value of `configs` is a list of strings that match the `metadata.name` property on each Skaffold config to be included. If this is omitted, Cloud Deploy takes all of the configs in the specified path.\n- Either a `googleCloudStorage` stanza or a `git` stanza.For Cloud Storage:```\ngoogleCloudStorage:\u00a0 source: PATH_TO_GCS_BUCKET\u00a0 path: FILENAME\n```For Git:```\ngit:\u00a0 repo: REPO_URL\u00a0 path: PATH_TO_FILE\u00a0 ref: BRANCH_NAME\n```Where:`PATH_TO_GCS_BUCKET` is the path to a Cloud Storage directory, ending with `/*` , where the Skaffold configs are stored. Skaffold downloads all the files in this directory then finds the relevant Skaffold file with the configs, based on the configured relative path.`FILENAME` is the name of the file that includes the Skaffold configs. This `path:` property is optional; if you don't specify it, Cloud Deploy assumes `skaffold.yaml` . If there's no `skaffold.yaml` , or if the filename you specify is not there, then the release creation fails.`REPO_URL` is the URL to the Git repository.`PATH_TO_FILE` is the path in that repository to the file containing the Skaffold configs.`BRANCH_NAME` is the name of the branch (for example, `main` ) from which to take the Skaffold configs.\nThe following custom target-type YAML is a `customActions` stanza with an `includeSkaffoldModules` stanza, pointing to Skaffold configs stored in a Cloud Storage bucket:\n```\ncustomActions:\u00a0 renderAction: my-custom-action\u00a0 deployAction: my-custom-action\u00a0 includeSkaffoldModules:\u00a0 \u00a0 - configs: [\"myConfig\"]\u00a0 \u00a0 \u00a0 googleCloudStorage:\u00a0 \u00a0 \u00a0 \u00a0 source: \"gs://my-custom-target-bucket/my-custom/*\"\u00a0 \u00a0 \u00a0 \u00a0 path: \"skaffold.yaml\n```\nThe following YAML is a Skaffold config, which the custom action shown is referencing:\n```\napiVersion: skaffold/v4beta7kind: Configmetadata:\u00a0 name: myConfigcustomActions:\u00a0 - name: my-custom-action\u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: my-custom-container\u00a0 \u00a0 \u00a0 \u00a0 image: us-east1-docker.pkg.dev/abcdefg/foldername/myimage@sha256:c56fcf6e0a7637ddf0df3d56a0dd23bfce03ceca06a6fc527b0e0e7430e6e9f9\n```\n### Register your custom target type\nAfter you've configured the `CustomTargetType` , run the [gcloud deploy apply](/sdk/gcloud/reference/deploy/apply) command to register the `CustomTargetType` resource in a Google Cloud project:\n```\ngcloud deploy apply --file=[FILE] --project=[PROJECT] --region=[REGION]\n```\nWhere:\n`FILE` is the name of the file in which you've defined this custom target type.\n`PROJECT` is the Google Cloud project in which to create this resource. The `CustomTargetType` must be in the same project as the `Target` resource that references it. You don't need to specify the project if you have set it as your default project for the Google Cloud CLI.\n`REGION` is the region (for example, `us-centra1` ) in which to create this resource. The `CustomTargetType` must be in the same region as the `Target` resource that references it. You don't need to specify the region if you have set it as your default region for the gcloud CLI.\nWith the `CustomTargetType` now created as a Cloud Deploy resource, you can now use it in a `Target` definition to create your custom target.\nFor more information on the `CustomTargetType` definition, see the [Cloud Deploy configuration schema reference](/deploy/docs/config-files#custom_target_type_definitions) .\n## Define your target\nThe only difference between a target definition for a supported target type and a custom target definition is that the custom target definition includes a `customTarget` stanza. The syntax for a `customTarget` is as follows:\n```\ncustomTarget:\u00a0 customTargetType: [CUSTOM_TARGET_TYPE_NAME]\n```\nWhere `CUSTOM_TARGET_TYPE_NAME` is the value from the `name` property defined in your [custom target type configuration](#define_custom_target_type) .\n**Note:** You can use [multi-targets](/deploy/docs/parallel) where the child targets are custom targets. In this case, all child targets must be of the same `CustomTargetType` .\n## Add your target to the delivery pipeline\nYou can use a custom target in a delivery pipeline exactly as you would use a supported target type. That is, there is no difference in the delivery pipeline progression between targets of a supported target type and custom targets.\nAll targets in a delivery pipeline must use the same target type. For example, you can't have a delivery pipeline with some targets deploying to Google Kubernetes Engine and some custom targets.\nAs with supported target types, you can include [deploy parameters](/deploy/docs/parameters) in the pipeline stage.\n## Create a release\n**Note:** If you're not using [remote Skaffold configs](#remote_skaffold) , the `skaffold.yaml` file you provide for the release must define the custom actions that the custom target type requires.\nWith your custom target type fully defined, and a target created to use that type, you can now create a release, in the normal way:\n```\ngcloud deploy releases create [RELEASE_NAME] \\\u00a0 --project=[PROJECT_NAME] \\\u00a0 --region=[REGION] \\\u00a0 --delivery-pipeline=[PIPELINE_NAME]\n```\nUpon release creation your custom render action is executed for each target in your delivery pipeline, including processing [deploy parameters](/deploy/docs/parameters) configured on the release, targets, or the delivery pipeline. Cloud Deploy provides the [deploy parameters as input](/deploy/docs/custom-targets#custom_targets_and_deploy_parameters) to the custom render container.\n## View the output of your custom targets\nIf your custom action satisfies the [requirements](/deploy/docs/custom-targets#required_inputs_and_outputs) for custom targets, you can use Google Cloud console to view the rendered artifacts.\nFollow these steps to view the output of your custom render action.\n- In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view your delivery pipeline. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) \n- Click the name of your delivery pipeline.The pipeline visualization shows the app's deployment status, and your release is listed on the **Releases** tab under **Delivery pipelinedetails** .\n- Click the release name.The **Release details** page is shown.\n- Click the **Artifacts** tab.\n- Under **Target artifacts** , click the arrow next to **View artifacts** .The rendered artifacts are listed, including the rendered `skaffold.yaml` and rendered manifest file generated by the custom renderer. And you can click the **Storage location** link next to each one to go to the Cloud Storage bucket to view those files.You can also click the **View artifacts** link to view those files by release, by target, or by phase, using the [release inspector](/deploy/docs/view-release#view_release_artifacts) .## What's next\n- Try the [quickstart: Define and use a custom target type](/deploy/docs/deploy-app-custom-target) \n- See the available [sample custom target types](/deploy/docs/custom-targets#custom_target_examples) .\n- [Create a delivery pipeline and targets](/deploy/docs/create-pipeline-targets) .\n- Learn more about [configuring Cloud Deploy targets](/deploy/docs/config-files#target_definitions)", "guide": "Cloud Deploy"}