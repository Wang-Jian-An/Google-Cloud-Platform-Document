{"title": "Cloud Deploy - Manage manifests in Cloud Deploy", "url": "https://cloud.google.com/deploy/docs/using-skaffold/managing-manifests", "abstract": "# Cloud Deploy - Manage manifests in Cloud Deploy\nThis page describes how to configure Cloud Deploy to render the configuration for each target in a delivery pipeline.\nCloud Deploy uses [Skaffold](/skaffold) to render your Kubernetes manifests. The service supports rendering of raw manifests and more advanced manifest-management tools, such as [Helm](https://helm.sh) , [Kustomize](https://kustomize.io) , and [kpt](https://github.com/GoogleContainerTools/kpt) .\nThe rendering process has two stages:\n- The manifest-management tool generates the manifest.\n- Skaffold substitutes the image references in the manifest with the images you want to deploy in your release.\nThis page includes configuration examples using Helm and Kustomize.\n", "content": "## Using Skaffold to generate your configuration\nIf you don't already have a Skaffold configuration file ( `skaffold.yaml` ), you can use Skaffold to generate one for you, based on what's in your repository.\n- Install Skaffold using Google Cloud CLI:`gcloud components install skaffold`\n- Run `skaffold init` in the repository that contains your manifests:`skaffold init --skip-build`\nThis command creates a `skaffold.yaml` file in your repository. That file references the manifests in that repository. The contents look like this:\n```\napiVersion: skaffold/v4beta7kind: Configmetadata:\u00a0 name: sample-appmanifests:\u00a0 rawYaml:\u00a0 \u00a0 - k8s-manifests/deployment.yaml\u00a0 \u00a0 - k8s-manifests/rbac.yaml\u00a0 \u00a0 - k8s-manifests/redis.yaml\u00a0 \u00a0 - k8s-manifests/service.yaml\n```\n## Rendering raw manifests\nRaw manifests are manifests that aren't managed by a tool like Helm or Kustomize, and therefore don't need any pre-processing before being hydrated and deployed to a cluster.\nBy default, Cloud Deploy uses [skaffold render](https://skaffold.dev/docs/workflows/ci-cd/#separation-of-rendering-and-deployment) to render your Kubernetes manifests, replacing untagged image names with the tagged image names of the container images you're deploying. Then when you promote the release, Cloud Deploy uses [skaffold apply](https://skaffold.dev/docs/workflows/ci-cd/#separation-of-rendering-and-deployment) to apply the manifests and deploy the images to your Google Kubernetes Engine cluster.\n**Note:** When you first create the release, deployment happens automatically. Cloud Deploy creates the rollout and deploys into the first target.\nA `manifests` stanza from a basic configuration looks like this:\n```\nmanifests:\u00a0 rawYaml:\u00a0 \u00a0 - PATH_TO_MANIFEST\n```\nSee the [Skaffold documentation](https://skaffold.dev/docs) for more information on what values can be passed here.\n## Rendering using Helm\nYou can use Cloud Deploy to render your [Helm](https://helm.sh) charts. To do so, you include Helm chart details in a `deploy` stanza in a Skaffold profile.\nEach such definition looks like this:\n```\napiVersion: skaffold/v4beta7kind: Configmanifests:\u00a0 helm:\u00a0 \u00a0 releases:\u00a0 \u00a0 \u00a0 - name: RELEASE_NAME\u00a0 \u00a0 \u00a0 \u00a0 chartPath: PATH_TO_HELM_CHART\u00a0 \u00a0 \u00a0 \u00a0 artifactOverrides:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 image: IMAGE_NAME\n```\nWhere:\nis the name of the Helm chart instance for this release.\nis the local path to a packaged Helm chart or an unpacked Helm chart directory.\nis the name of the container image you're deploying.\nYour Helm chart must have a value `image` parameter that defines the image to be deployed in the chart.\nYou can use additional Helm configuration options, as described in the [Skaffold documentation](https://skaffold.dev/docs/pipeline-stages/deployers/helm/)\n## Rendering using Kustomize\nYou can use [Kustomize](https://kustomize.io) with Cloud Deploy. To do so, you point to the Kustomization files from within the `deploy` stanza in your `skaffold.yaml` profile configuration.\nYou include a separate Kustomize configuration for each target for which you're using Kustomize, under each corresponding `profile` in your `skaffold.yaml` .\nEach such definition looks like this:\n```\napiVersion: skaffold/v4beta7kind: Configmanifests:\u00a0 kustomize:\u00a0 \u00a0 paths:\u00a0 \u00a0 \u00a0 - PATH_TO_KUSTOMIZE\n```\nWhere:\npoints to your Kustomization files. The default is `[\".\"]`\nYou can use additional Kustomize configuration options, as described in the [Skaffold documentation](https://skaffold.dev/docs/pipeline-stages/deployers/kustomize/)\n## Configuring different manifests per target\nOften each target needs a slightly different configuration. For example, you might have more replicas in your production deployments than in your staging deployments.\nYou can render a different set of manifests for each target by providing each variation as a different [Skaffold profile](https://skaffold.dev/docs/environment/profiles/) .\n### Profiles with Raw manifests\nWhen working with raw manifests you can point Cloud Deploy at a different file, depending on the target. You could configure that as follows:\n```\napiVersion: skaffold/v4beta7kind: Configprofiles:\u00a0 - name: prod\u00a0 \u00a0 manifests:\u00a0 \u00a0 \u00a0 rawYaml:\u00a0 \u00a0 \u00a0 \u00a0 - prod.yaml\u00a0 - name: staging\u00a0 \u00a0 manifests:\u00a0 \u00a0 \u00a0 rawYaml:\u00a0 \u00a0 \u00a0 \u00a0 - staging.yaml\n```\n### Profiles with Kustomize\nHere's an example `skaffold.yaml` that has different profiles for staging and production using Kustomize, where each profile points to a different Kustomization:\n```\napiVersion: skaffold/v4beta7kind: Configprofiles:\u00a0 - name: prod\u00a0 \u00a0 manifests:\u00a0 \u00a0 \u00a0 kustomize:\u00a0 \u00a0 \u00a0 \u00a0 paths:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - environments/prod\u00a0 - name: staging\u00a0 \u00a0 manifests:\u00a0 \u00a0 \u00a0 kustomize:\u00a0 \u00a0 \u00a0 \u00a0 paths:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - environments/staging\n```\n### Profiles referenced in the delivery pipeline\nThese profiles, defined in `skaffold.yaml` , are referenced in the [deliverypipeline config](/deploy/docs/config-files) , per target:\n```\nserialPipeline:\u00a0 stages:\u00a0 - targetId: staging-target\u00a0 \u00a0 profiles:\u00a0 \u00a0 - staging\u00a0 - targetId: prod-target\u00a0 \u00a0 profiles:\u00a0 \u00a0 - prod\n```\n## What's next\n- Learn more about [Cloud Deploy delivery pipeline configuration](/deploy/docs/config-files) .\n- Try the [Cloud Deploy Skaffold profiles walkthrough](https://shell.cloud.google.com/?show=ide%2Cterminal&walkthrough_id=deploy--cloud-deploy-profiles-gke) \n- Learn more about [Kustomize](https://kustomize.io) .\n- Learn more about [Helm](https://helm.sh) .\n- Learn more about [Kpt](https://googlecontainertools.github.io/kpt) \n- Consider using [Artifact Registry](https://cloud.google.com/artifact-registry) to store artifacts such as Helm charts or Kustomizations.", "guide": "Cloud Deploy"}