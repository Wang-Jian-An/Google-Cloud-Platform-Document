{"title": "Cloud Deploy - Pass parameters to your deployment", "url": "https://cloud.google.com/deploy/docs/parameters", "abstract": "# Cloud Deploy - Pass parameters to your deployment\nUsing Cloud Deploy, you can pass parameters for your release, and those values are provided to the manifest or manifests before those manifests are applied to their respective targets. This substitution is done manifests are [rendered](/deploy/docs/terminology#render) . Values are provided to all manifests identified in your `skaffold.yaml` file that contain the corresponding placeholders.\nAll you need to do is include placeholders in your manifest, and set the values for those placeholder in either your Cloud Deploy delivery pipeline or target configuration, or when you create a release.\nThis article describes how to make that happen.\n", "content": "## Why use deploy parameters?\nA typical use for this would be to apply different values to manifests for different targets in a [parallel deployment](/deploy/docs/parallel) . But you can use deploy parameters for anything that requires post-render key-value pair substitution in your manifest.\n## How it works\nThe following steps describe the general process for configuring deploy parameters and providing values:\n- You configure deploy parameterization, as described [here](#configure_deploy_parameters) .This includes the following:- Add the placeholders to your manifest.\n- Add values for those placeholders.There are three ways to do this, described [here](#three_ways) .\n- When you create a release, your manifest is [rendered](/deploy/docs/terminology#render) .If you start with a templated manifest, values are applied now for template variables. If you start with a raw manifest, it remains unchanged. This rendering is done by [Skaffold](/deploy/docs/using-skaffold) .However, you can have additional variables in your manifest for which values aren't applied at render time. These are the deploy parameters described in this document.At release creation, all deploy parameters are compiled into a [dictionary](#view_parameters) , which is used to substitute values before the manifests are applied. **Note:** If a given deploy parameter (key) is assigned more than one value, the release fails.\n- After rendering, Cloud Deploy substitutes values for deploy parameters.These are the values you configured in the first step.The process already applied values to manifest templates, replacing some values, and adding labels specific to Cloud Deploy. But the values for these deploy parameters are substituted after rendering. The differences between manifest templates and deploy parameters are described [here](#how_is_this_different_from_manifest_templates) .\n- The manifest is applied to the target runtime, to deploy your application.This includes the values substituted at render time, and the values for any deploy parameters## Different ways to pass values\nYou can provide parameters, and values for those parameters in three ways:\n- [In the delivery pipeline definition](#add_to_pipeline_stage) You provide the parameter and its value in the definition for a stage in the delivery pipeline progression. The parameter is passed to the target represented by that stage. If that stage references a multi-target, the values set here are used for all child targets.This method lets you replace a value for all releases within a given pipeline, for all affected targets. The parameters defined for a stage identify a label, and the corresponding target for that stage must have a matching label.\n- [In the target definition](#add_to_target) You configure the parameter and its value in the definition for the target itself. This method lets you replace a value for that target for all releases.\n- [On the command line](#pass_to_releases_create) , when you create a releaseYou include the parameter and its value using the `--deploy-parameters` flag on the `gcloud deploy releases create` command.This method lets you replace a value at release creation time, applying that value to that manifests of all affected targets.\nConfiguration for these is explained in more detail [here](#configure_deploy_parameters) .\n### Can I use more than one of these methods?\nYes, you can include deploy parameters in the pipeline stage, in the target config, on the command line. The result is that all the parameters are accepted and added to the dictionary. However, if a specific parameter is passed in more than one place, but with different values, the `gcloud deploy releases create` command fails with an error.\n## How is this different from manifest templates\nDeploy parameters, as described in this article, are distinguished from placeholders in a templated manifest by the [syntax](#add_placeholders) . But if you're wondering why you would need deploy parameters instead of just using the standard techniques for templated manifests, the following table shows the different purposes:\n| Technique   | Substitution time | Applies to        |\n|:---------------------|:--------------------|:------------------------------------------|\n| Manifest template | Rendering phase  | Specific release; specific target   |\n| On command line  | Post-rendering  | Specific release; all targets    |\n| On delivery pipeline | Post-rendering  | All releases; specific targets (by label) |\n| On target   | Post-rendering  | All releases; specific target    |\nThis article is about deploy parameters only (on command line, pipeline, and target), not [templated manifests](/deploy/docs/using-skaffold/managing-manifests) .\n## Limitations\n- For each [type of parameter](#three_ways) , you can create a maximum of 25 parameters.\n- A child target can additionally inherit up to 25 parameters from its parent multi-target, up to a maximum of 100 parameters on the targets, including those set on the pipeline stage.\n- The key name is limited to a maximum of 512 characters, and the following regex:```\n/^[a-zA-Z0-9][-A-Za-z0-9_.]{0,61}[a-zA-Z0-9]$/\n```\n- You can't have two keys of the same name applied to the same target.\n- The prefix `CLOUD_DEPLOY_` is reserved, and cannot be used for a key name.## Configure deploy parameters\nThis section describes how to configure deploy parameter values that will be applied to your Kubernetes manifest, your Cloud Run service, or your Helm template.\nBesides configuring those key-value pairs, you need to add the placeholder or placeholders to your manifest, as described in this section.\n### Add placeholders to your manifest\nIn your Kubernetes manifest (for GKE) or service YAML (for Cloud Run), you add placeholders for any values you want to substitute after rendering.\nFor releases that aren't using the [Helm](#helm_placeholders) renderer with Skaffold, use the following syntax for your placeholders:\n```\n[PROPERTY]: [DEFAULT_VALUE] # from-param: $[VAR_NAME]\n```\nIn this line...\n- Is the configuration property in your Kubernetes manifest or Cloud Run service YAML.\n- Is a value to use if there are no values provided for this property on the command line or in the pipeline or target config.\n- Uses a comment character to set off the Cloud Deploy `deploy-parameters` directive, and `from-param:` tells Cloud Deploy that a `deploy-parameters` placeholder follows.\n- Is the placeholder to substitute. This must match the key of a key-value pair provided in the delivery pipeline or target config, or upon release creation.If you're using the Helm renderer with Skaffold, use the following syntax in your Helm template to add placeholders:\n```\n[PROPERTY]: \u00a0{{ .Values.VAR_NAME }} \n```\n### Add a parameter to the pipeline stage\nYou can add key-value pairs to a stage in the delivery pipeline progression. This is useful for [parallel deployments](/deploy/docs/parallel) , to distinguish among child targets.\n- Add the placeholders to your Kubernetes manifest or Cloud Run service, as described [here](#add_placeholders) .Here's an example:```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0name: nginx-deployment\u00a0labels:\u00a0 \u00a0app: nginxspec:\u00a0replicas: 1 # from-param: ${deploy_replicas}\u00a0selector:\u00a0 \u00a0matchLabels:\u00a0 \u00a0 \u00a0app: nginx\u00a0template:\u00a0 \u00a0metadata:\u00a0 \u00a0 \u00a0labels:\u00a0 \u00a0 \u00a0 \u00a0app: nginx\u00a0 \u00a0spec:\u00a0 \u00a0 \u00a0containers:\u00a0 \u00a0 \u00a0- name: nginx\u00a0 \u00a0 \u00a0 \u00a0image: nginx:1.14.2\u00a0 \u00a0 \u00a0 \u00a0ports:\u00a0 \u00a0 \u00a0 \u00a0- containerPort: 80\n```\n- Configure your delivery pipeline to include `deployParameters` for the applicable pipeline stage.The following YAML is the configuration for a pipeline stage whose target is a multi-target, which in this case has two child targets:```\nserialPipeline:\u00a0stages:\u00a0 \u00a0- targetId: dev\u00a0 \u00a0 \u00a0profiles: []\u00a0 \u00a0- targetId: prod \u00a0# multi-target\u00a0 \u00a0 \u00a0profiles: []\u00a0 \u00a0 \u00a0deployParameters:\u00a0 \u00a0 \u00a0 \u00a0- values:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0deploy_replicas: 1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0log_level: \"NOTICE\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0matchTargetLabels: # optional, applies to all resources if unspecified; AND'd\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0my-app: \"post-render-config-1\"\u00a0 \u00a0 \u00a0 \u00a0- values:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0deploy_replicas: 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0log_level: \"WARNING\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0matchTargetLabels: # optional, applies to all resources if unspecified; AND'd\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0my-app: \"post-render-config-2\"\n```In this delivery pipeline configuration, the `deployParameters` stanza includes two `values` , each of which has the following:- The variable name, which is the same name as the variable you set in the manifest\n- A value for that variable\n- One or more labels (optional) to match against target-specific labelsIf you don't specify a label, in a `matchTargetLabels` stanza, that value is used for all targets in the stage.\n- If you included `matchTargetLabels` , you also must [include labels on the targets](#add_to_target) , to match them. In this way, you identify which value to assign to which child target.The target must match labels set in the `values` stanza.If you omit `matchTargetLabels` , the `values` you set on the pipeline are applied to all child targets. But if you set more than one value for the same parameter, the release will fail.\nAfter each manifest is rendered, Cloud Deploy adds the value for each variable into the rendered manifest.\n### Add a parameter to the target configuration\nYou can add key-value pairs to a target. If you're using deploy parameters to distinguish among multiple child targets, configure them on those child targets, not on the multi-target.\n- [Configure](#add_placeholders) your Kubernetes manifest or Cloud Run service definition using a parameter in place of the value you want to set at deploy time.Here's an example:```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0name: nginx-deployment\u00a0labels:\u00a0 \u00a0app: nginxspec:\u00a0selector:\u00a0 \u00a0matchLabels:\u00a0 \u00a0 \u00a0app: nginx\u00a0template:\u00a0 \u00a0metadata:\u00a0 \u00a0 \u00a0labels:\u00a0 \u00a0 \u00a0 \u00a0app: nginx\u00a0 \u00a0spec:\u00a0 \u00a0 \u00a0containers:\u00a0 \u00a0 \u00a0- name: nginx\u00a0 \u00a0 \u00a0 \u00a0image: nginx:1.14.2\u00a0 \u00a0 \u00a0 \u00a0env:\u00a0 \u00a0 \u00a0 \u00a0- name: envvar1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0value: example1 # from-param: ${application_env1}\u00a0 \u00a0 \u00a0 \u00a0- name: envvar2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0value: example2 # from-param: ${application_env2}\n```In this manifest, the parameter `envvar1` is set to a default of `example1` , and `envvar2` is set to a default of `example2` .\n- Configure your [targets](/deploy/docs/terminology#target) to include `deployParameters` .For each parameter you're including, you identify the following:- The key name, which is the same name as the key (variable) you set in the manifest.\n- A value for that key. If you don't provide a value, the default value set in the manifest is used.\nThe following YAML is the configuration for two targets. Each target includes a `deployParameters` stanza setting a value. Each target also includes a label, to be matched with deploy parameters [configured on a pipeline stage](#add_to_pipeline_stage) .```\napiVersion: deploy.cloud.google.com/v1beta1kind: Targetmetadata:\u00a0 name: prod1\u00a0 labels:\u00a0 \u00a0 my-app: \"post-render-config-1\"description: development clusterdeployParameters:\u00a0 application_env1: \"newValue1\"---apiVersion: deploy.cloud.google.com/v1beta1kind: targetmetadata:\u00a0 name: prod2\u00a0 labels:\u00a0 \u00a0 my-app: \"post-render-config-2\"description: development clusterdeployParameters:\u00a0 application_env1: \"newValue2\"\n```\nWhen the release is created, but after the manifests are rendered, Cloud Deploy adds these values to the rendered manifests if they include the associated keys.\n### Pass a parameter at release creation\nFollow these steps to pass parameters and values to the release:\n- [Configure](#add_placeholders) your Kubernetes manifest or Cloud Run service definition using a parameter in place of the value you want to set at deploy time.Here's an example:```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0name: nginx-deployment\u00a0labels:\u00a0 \u00a0app: nginxspec:\u00a0selector:\u00a0 \u00a0matchLabels:\u00a0 \u00a0 \u00a0app: nginx\u00a0template:\u00a0 \u00a0metadata:\u00a0 \u00a0 \u00a0labels:\u00a0 \u00a0 \u00a0 \u00a0app: nginx\u00a0 \u00a0annotations:\u00a0 \u00a0 \u00a0commit: defaultShaValue # from-param: ${git-sha}\u00a0 \u00a0spec:\u00a0 \u00a0 \u00a0containers:\u00a0 \u00a0 \u00a0- name: nginx\u00a0 \u00a0 \u00a0 \u00a0image: nginx:1.14.2\n```In this example, the commit SHA is set as a variable called `${git-sha}` . A value for this is passed at release creation, using the `--deploy-parameters=` option, as seen in the next step.Syntax for this variable is `$` plus the variable name in braces. In this example, it's `${git-sha}` .\n- When you create a release, include the `--deploy-parameters` option on the `gcloud deploy releases create` command.`--deploy-parameters` takes a comma-separated list of key-value pairs, where the key is the placeholder you [added to the manifest](#add_placeholders) .The command will look similar to this:```\ngcloud deploy releases create test-release-001 \\--project=my-example-project \\--region=us-central1 \\--delivery-pipeline=my-params-demo-app-1 \\--images=my-app-image=gcr.io/google-containers/nginx@sha256:f49a843c290594dcf4d193535d1f4ba8af7d56cea2cf79d1e9554f077f1e7aaa \\--deploy-parameters=\"git-sha=f787cac\"\n```\nWhen the release is created, but after manifest rendering, Cloud Deploy provides the values to the rendered manifests if they include the associated keys.\n## View all parameters for a release\nYou can view the parameters that have been set for a given release. They're displayed in a table on the **Release details** page and on the command line ( `gcloud deploy releases describe` ).\n- From the main Cloud Deploy page, click the delivery pipeline that includes the release you want to see.\n- On the **Release details** page, select the **Artifacts** tab.\nAll deploy parameters that have been set for this release are shown in a table, with the variable name and value in one column, and the affected target or targets in the other column.\n## What's next\n- Try the [quickstart: Use deploy parameters](/deploy/docs/deploy-app-parameters) .\n- Find out more about using [parallel deployments](/deploy/docs/parallel) .", "guide": "Cloud Deploy"}