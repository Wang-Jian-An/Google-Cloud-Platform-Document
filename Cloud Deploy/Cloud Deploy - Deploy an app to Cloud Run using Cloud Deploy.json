{"title": "Cloud Deploy - Deploy an app to Cloud Run using Cloud Deploy", "url": "https://cloud.google.com/deploy/docs/deploy-app-run", "abstract": "# Cloud Deploy - Deploy an app to Cloud Run using Cloud Deploy\n# Deploy an app to Cloud Run using Cloud Deploy\nThis page shows you how to use Cloud Deploy to deliver a sample application image named `hello` to a sequence of two Cloud Run services or two Cloud Run jobs.\nIn this quickstart, you'll do the following:- Create a [Skaffold](/skaffold) configuration\n- Create configuration files for two Cloud Run services or two jobs.These files define the services or jobs, and specify the (pre-built) container images to deploy.\n- Define your Cloud Deploy delivery pipeline and deployment [targets](/deploy/docs/terminology#target) , which point to the two services or the two jobs.\n- Instantiate your delivery pipeline by creating a release, which automatically deploys to the first target.\n- Promote the release to the second target.\n- View both rollouts in Google Cloud console.\n", "content": "## Before you begin- If you already have the CLI installed, make sure you're running the latest version:\n- ```\ngcloud components update\n```\n- Make sure the [default Compute Engine service account](/deploy/docs/cloud-deploy-service-account#execution_service_account) has sufficient permissions.The service account might already have the necessary permissions. These steps  are included for projects that disable automatic role grants for default  service accounts.\n- Add the`clouddeploy.jobRunner`role:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/clouddeploy.jobRunner\"\n```\n- Grant the default execution service account`actAs` [permission to deploy workloads](https://cloud.google.com/run/docs/reference/iam/roles#additional-configuration) into Cloud Run:```\ngcloud iam service-accounts add-iam-policy-binding $(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/iam.serviceAccountUser\" \\\n --project=PROJECT_ID\n```\n- Add the Cloud Run developer permissions:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/run.developer\"\n```If you have trouble adding either of these roles, contact your project administrator.\n## Prepare your Skaffold configurationCloud Deploy uses [Skaffold](/deploy/docs/using-skaffold) to provide the details for what to deploy and how to deploy it properly for your separate [targets](/deploy/docs/terminology#target) .\nFor this quickstart, you create a `skaffold.yaml` file, which identifies the Cloud Run service or job definition to be used to deploy the sample app.- Open a terminal window.\n- Create a new directory, named `deploy-run-quickstart` and navigate into it.```\nmkdir deploy-run-quickstartcd deploy-run-quickstart\n```\n- Create a file named `skaffold.yaml` with the following contents:\n```\napiVersion: skaffold/v4beta7kind: Configmetadata: \u00a0 name: deploy-run-quickstartprofiles:- name: dev\u00a0 manifests:\u00a0 \u00a0 rawYaml:\u00a0 \u00a0 - run-service-dev.yaml- name: prod\u00a0 manifests:\u00a0 \u00a0 rawYaml:\u00a0 \u00a0 - run-service-prod.yamldeploy:\u00a0 cloudrun: {}\n```\n```\napiVersion: skaffold/v4beta7kind: Configmetadata: \u00a0 name: deploy-run-quickstartprofiles:- name: dev\u00a0 manifests:\u00a0 \u00a0 rawYaml:\u00a0 \u00a0 - run-job-dev.yaml- name: prod\u00a0 manifests:\u00a0 \u00a0 rawYaml:\u00a0 \u00a0 - run-job-prod.yamldeploy:\u00a0 cloudrun: {}\n```\nThis file is a minimal Skaffold config, identifying your Cloud Run services or jobs. See the [skaffold.yaml reference](https://skaffold.dev/docs/references/yaml/) for more information about this file.\n## Prepare your Cloud Run services or jobsFor this quickstart, you'll create either two different Cloud Run services or two Cloud Run jobs, in the same project. Cloud Deploy also supports deploying across multiple projects. Also, we use [Skaffold profiles](https://skaffold.dev/docs/environment/profiles/) to make it possible to have two services or jobs in the same project. When you use different projects, you might not need to use Skaffold profiles.\n- Create a file named `run-service-dev.yaml` with the following contents:```\napiVersion: serving.knative.dev/v1kind: Servicemetadata:\u00a0 name: deploy-run-service-devspec:\u00a0 template:\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - image: my-app-image\n```This file defines a Cloud Run service. As the name `deploy-run-service-dev` implies, this is your `dev` service, and corresponds to the first target in your delivery pipeline progression.\n- Create a file named `run-service-prod.yaml` with the following contents:```\napiVersion: serving.knative.dev/v1kind: Servicemetadata:\u00a0 name: deploy-run-service-prodspec:\u00a0 template:\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - image: my-app-image\n```This file defines another Cloud Run service, and as the name `deploy-run-service-prod` implies, this is your `prod` service, and corresponds to the second target in your delivery pipeline progression.\n- Create a file named `run-job-dev.yaml` with the following contents:```\napiVersion: run.googleapis.com/v1kind: Jobmetadata:\u00a0 name: deploy-run-job-devspec:\u00a0 template:\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 template:\u00a0 \u00a0 \u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - image: my-app-image\n```This file defines a Cloud Run job. As the name `deploy-run-job-dev` implies, this is your `dev` job, and corresponds to the first target in your delivery pipeline progression.\n- Create a file named `run-job-prod.yaml` with the following contents:```\napiVersion: run.googleapis.com/v1kind: Jobmetadata:\u00a0 name: deploy-run-job-prodspec:\u00a0 template:\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 template:\u00a0 \u00a0 \u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - image: my-app-image\n```This file defines another Cloud Run job. As the name `deploy-run-job-prod` implies, this is your `prod` job, and corresponds to the second target in your delivery pipeline progression.\n## Create your delivery pipeline and targetsYou can define your pipeline and targets in one file or in separate files. In this quickstart, you create a single file.- In the `deploy-run-quickstart` directory, create a new file: `clouddeploy.yaml` , with the following contents:```\napiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0 name: my-run-demo-app-1description: main application pipelineserialPipeline:\u00a0 stages:\u00a0 - targetId: run-qsdev\u00a0 \u00a0 profiles: [dev]\u00a0 - targetId: run-qsprod\u00a0 \u00a0 profiles: [prod]---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: run-qsdevdescription: Cloud Run development servicerun:\u00a0 location: projects/PROJECT_ID/locations/us-central1---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: run-qsproddescription: Cloud Run production servicerun:\u00a0 location: projects/PROJECT_ID/locations/us-central1\n``` **Note:** In this file, targets are included with the delivery pipeline, but you can define targets in a separate file or multiple separate files.\n- Register your pipeline and targets with the Cloud Deploy service:```\ngcloud deploy apply --file=clouddeploy.yaml --region=us-central1 --project=PROJECT_ID\n```You now have a pipeline, with targets, ready to deploy your application to your first target.\n- Confirm your pipeline and targets:In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view of list of your available delivery pipelines. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) The delivery pipeline you just created is shown, and the two targets are listed in the **Targets** column.\n## Create a releaseA release is the central Cloud Deploy resource representing the changes being deployed. The delivery pipeline defines the lifecycle of that release. See [Cloud Deploy service architecture](/deploy/docs/architecture#how_they_fit_together_to_deliver_your_release) for details about that lifecycle.\nRun the following command from the `deploy-run-quickstart` directory to create a `release` resource that represents the container image to deploy:\n```\n\u00a0gcloud deploy releases create test-release-001 \\\u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0--delivery-pipeline=my-run-demo-app-1 \\\u00a0 \u00a0--images=my-app-image=us-docker.pkg.dev/cloudrun/container/hello@sha256:6063adf8f687702b4065151acddba6781c47bc602167eb9f3bec8aebc9ce95cc\n```\n```\n\u00a0gcloud deploy releases create test-release-001 \\\u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0--delivery-pipeline=my-run-demo-app-1 \\\u00a0 \u00a0--images=my-app-image=us-docker.pkg.dev/cloudrun/container/job@sha256:d7c33651fbad911a9a0a0c16f2f9b3a79f0b9e3e89afb205603af706067feac5\n```As with all releases (unless they include `--disable-initial-rollout` ), Cloud Deploy automatically creates a [rollout](/deploy/docs/terminology#rollout) resource too. The application is automatically deployed into the first target in the progression.## Promote the release **Note:** after you create the release, you might need wait a few minutes before you continue with this step.- From the **Delivery pipelines** page, click the `my-run-demo-app-1` pipeline. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) The Delivery pipeline details page shows a graphical representation of your delivery pipeline's progress. In this case, it shows that the release was deployed to the `run-qsdev` target.\n- On the first target in the delivery pipeline visualization, click **Promote** .The **Promote release** dialog is shown. It shows the details of the target you're promoting to.\n- Click **Promote** .The release is now queued for deployment into `run-qsprod` . When deployment is complete, the delivery pipeline visualization shows it as deployed:\n## View the results in Google Cloud console\n- In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view your **my-run-demo-app-1** delivery pipeline. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) \n- Click the name of your delivery pipeline \"my-run-demo-app-1\".The pipeline visualization shows the app's progress through the pipeline.And your release is listed on the **Releases** tab under **Delivery pipelinedetails** .\n- Click the release name, `test-release-001` .Your rollouts appear under **Rollouts** . You can click a rollout to view its details, including the deployment log.\n## Accessing your Cloud Run serviceBy default, you must be authenticated in order to access newly created Cloud Run services. See the Cloud Run [Authentication overview](/run/docs/authenticating/overview) to learn how to provide credentials and to find out what Identity and Access Management configuration is required in order access the service without authentication. This doesn't apply to Cloud Run jobs.## Clean upTo avoid incurring charges to your Google Cloud account for   the resources used on this page, follow these steps.- Delete the `deploy-qs-dev` Cloud Run service or job:\n```\ngcloud run services delete deploy-run-service-dev --region=us-central1 --project=PROJECT_ID\n```\n```\ngcloud run jobs delete deploy-run-job-dev --region=us-central1 --project=PROJECT_ID\n```\n- Delete the `deploy-qs-prod` service:\n```\ngcloud run services delete deploy-run-service-prod --region=us-central1 --project=PROJECT_ID\n```\n```\ngcloud run jobs delete deploy-run-job-prod --region=us-central1 --project=PROJECT_ID\n```\n- Delete the delivery pipeline, targets, release and rollouts:```\ngcloud deploy delete --file=clouddeploy.yaml --force --region=us-central1 --project=PROJECT_ID\n```\n- Delete the Cloud Storage buckets that Cloud Deploy created.One ends with `_clouddeploy` , and the other is `[region].deploy-artifacts.[project].appspot.com` . [Open the Cloud Storage browser page](https://console.cloud.google.com/storage/browser) \nThat's it, you completed this quickstart!## What's next\n- [Learn more about Cloud Deploy](/deploy/docs/overview) .\n- [Learn the basics of deploying applications](/deploy/docs/deploying-application) .\n- Read the [how-to article for deploying to Cloud Run](/deploy/docs/run-targets) \n- Learn how to [manage your manifests](/deploy/docs/skaffold) .\n- [Learn how to combine Google Cloud CI/CD tools to develop and deliversoftware effectively to GKE](https://cloud.google.com/architecture/app-development-and-delivery-with-cloud-code-gcb-cd-and-gke) .", "guide": "Cloud Deploy"}