{"title": "Cloud Deploy - Configuration schema reference", "url": "https://cloud.google.com/deploy/docs/config-files", "abstract": "# Cloud Deploy - Configuration schema reference\nThe Cloud Deploy configuration file or files define the [delivery pipeline](/deploy/docs/terminology#delivery_pipeline) , the [targets](/deploy/docs/terminology#target) to deploy to, and the [progression](/deploy/docs/terminology#progression) of those targets.\nThe delivery pipeline configuration file include [target definitions](#target_definitions) , or those can be in a separate file or files. By convention, a file containing both the delivery pipeline config and the target configs is called `clouddeploy.yaml` , and a pipeline config without targets is called `delivery-pipeline.yaml` . But you can give these files any name you want.\n**Note:** your organization might prefer to separate target definitions from the pipeline definition, so that different roles can manage those configurations separately. Cloud Deploy supports that practice.\n", "content": "## What goes where\nCloud Deploy uses two main configuration files:\n- Delivery pipeline definition\n- [Target definition](#target_definitions) \nThese can be separate files, or the delivery pipeline and targets can be configured in the same file.\n**Note:** After you define the configuration file or files, you create the delivery pipeline and target resources using the command line, as described in [Registering the delivery pipeline and targets](/deploy/docs/create-pipeline-targets#register_the_delivery_pipeline_and_targets) .\n## Structure of a delivery pipeline configuration file\nThe following configuration includes a target definition:\n```\n# Delivery pipeline configapiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0name:\u00a0annotations:\u00a0labels:description:suspended:serialPipeline:\u00a0stages:\u00a0- targetId:\u00a0 \u00a0profiles: []# Deployment strategies# One of:# \u00a0 standard:# \u00a0 canary:# See the strategy section in this document for details.\u00a0 \u00a0strategy:\u00a0 \u00a0 \u00a0standard:\u00a0 \u00a0 \u00a0 \u00a0verify:\u00a0 \u00a0 \u00a0 \u00a0predeploy:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0actions: []\u00a0 \u00a0 \u00a0 \u00a0postdeploy:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0actions: []\u00a0 \u00a0deployParameters:\u00a0 \u00a0- values:\u00a0 \u00a0 \u00a0matchTargetLabels:\u00a0- targetId:\u00a0 \u00a0profiles: []\u00a0 \u00a0strategy:\u00a0 \u00a0deployParameters:---# Target configapiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0name:\u00a0annotations:\u00a0labels:description:multiTarget:\u00a0targetIds: []deployParameters:requireApproval:\n## Runtimes# one of the following runtimes:gke:\u00a0cluster:\u00a0internalIp:\n## or:anthosCluster:\u00a0membership:\n## or:run:\u00a0location:\n## or:customTarget:\u00a0 customTargetType:\n## (End runtimes. See documentation in this article for more details.)#executionConfigs:- usages:\u00a0 - [RENDER | PREDEPLOY | DEPLOY | VERIFY | POSTDEPLOY]\u00a0 workerPool:\u00a0 serviceAccount:\u00a0 artifactStorage:\u00a0 executionTimeout:---# Custom target type configapiVersion: deploy.cloud.google.com/v1kind: CustomTargetTypemetadata:\u00a0 name:\u00a0 annotations:\u00a0 labels:description:customActions:\u00a0 renderAction:\u00a0 deployAction:\u00a0 includeSkaffoldModules:\u00a0 \u00a0 - configs:\u00a0 \u00a0 # either:\u00a0 \u00a0 googleCloudStorage:\u00a0 \u00a0 \u00a0 source:\u00a0 \u00a0 \u00a0 path:\u00a0 \u00a0 # or:\u00a0 \u00a0 git:\u00a0 \u00a0 \u00a0 repo:\u00a0 \u00a0 \u00a0 path:\u00a0 \u00a0 \u00a0 ref:---# Automation configapiVersion: deploy.cloud.google.com/v1kind: Automationmetadata:\u00a0 name:\u00a0 labels:\u00a0 annotations:description:suspended:serviceAccount:selector:- target:\u00a0 \u00a0 id:\u00a0 \u00a0 # or\u00a0 \u00a0 labels:rules:- [RULE_TYPE]:\u00a0 name:\u00a0 [RULE-SPECIFIC_CONFIG]\n```\nThis YAML has three main components:\n- The main delivery pipeline and progressionThe configuration file can include any number of pipeline definitions.\n- The target definitionsFor simplicity, only one target is shown in this example, but there can be any number of them. Also, targets can be defined in a separate file or files.\n- Custom target type definitions [Custom targets](/deploy/docs/custom-targets) , require a custom target type definition. As with targets and automations, custom target types can be defined in the same file as the delivery pipeline, or in separate file.\n- Automation definitionsYou can create any [deploy automations](/deploy/docs/automation) in the same file as your delivery pipeline and targets, or in a separate file or files. For simplicity, only one `Automation` is shown here, but you can create as many as you want.\nThese components are defined in the rest of this document.\n## Pipeline definition and progression\nIn addition to pipeline metadata, such as `name` , the main pipeline definition includes a list of references to [targets](/deploy/docs/terminology#target) in deployment sequence order. That is, the first target listed is the first deployment target. After you've deployed to that target, promoting the release deploys to the next target in the list.\nThe following are the configuration properties for a delivery pipeline, not including target definitions.\n### metadata.name\nThe `name` field takes a string that must be unique per project and location.\n### metadata.annotations and metadata.labels\nDelivery pipeline configuration can include annotations and labels. Annotations and labels are stored with the delivery pipeline resource after the pipeline has been [registered](/deploy/docs/create-pipeline-targets#register_the_delivery_pipeline_and_targets) .\nFor more information, see [Using labels and annotations with Cloud Deploy](/deploy/docs/labels-annotations) .\n### description\nAn arbitrary string describing this delivery pipeline. This description is shown in the delivery pipeline details in Google Cloud console.\n### suspended\nA Boolean, which if `true` [suspends the delivery pipeline](/deploy/docs/suspend-pipeline) such that it can't be used to create, promote, roll back, or redeploy releases. Also, if the delivery pipeline is suspended, you can't approve or reject a rollout created from that pipeline.\nThe default is `false` .\n### serialPipeline\nThe beginning of the definition of a serial-progression delivery pipeline. This stanza is required.\n### stages\nA list of all targets to which this delivery pipeline is configured to deploy.\nThe list must be in the order of the delivery sequence you want. For example, if you have targets called `dev` , `staging` , and `production` , list them in that same order, so that your first deployment is to `dev` , and your final deployment is into `production` .\nPopulate each `stages.targetId` field with the value of the `metadata.name` field in the corresponding target definition. And under `targetId` , include `profiles` :\n```\nserialPipeline:\u00a0stages:\u00a0- targetId:\u00a0 \u00a0profiles: []\u00a0 \u00a0strategy:\u00a0 \u00a0 \u00a0standard:\u00a0 \u00a0 \u00a0 \u00a0verify:\n```\n### targetId\nIdentifies the specific target to use for this stage of the delivery pipeline. The value is the `metadata.name` property from the [target definition](#target_definitions) .\n`strategy.standard.verify` set to `true` enables [deployment verification](/deploy/docs/verify-deployment) on the target. If no deployment strategy is specified, the `standard` deployment strategy is used, with verification set to `false` .\n### profiles\nTakes a list of zero or more Skaffold profile names, from `skaffold.yaml` . Cloud Deploy uses the profile with [skaffold render](https://skaffold.dev/docs/workflows/ci-cd/#separation-of-rendering-and-deployment) when creating the release. Skaffold profiles let you vary configuration between targets while using a single configuration file.\n## strategy\nIncludes properties for specifying a deployment strategy. The following strategies are supported:\n- `standard:`The application is deployed fully to the specified target.This is the default deployment strategy. If you omit `strategy` , Cloud Deploy uses the `standard` deployment strategy.\n- `canary:`In a [canary deployment](/deploy/docs/deployment-strategies/canary) , you deploy a new version of your application progressively, replacing the already running version by percentage-based increments (for example, 25%, then 50%, then 75%, then fully.)\nThe deployment strategy is defined per target. For example, you might have a canary strategy for your `prod` target, but a standard strategy (no `strategy` specified) for your other targets.\nFor more information, see [Use a deployment strategy](/deploy/docs/deploy/docs/deployment-strategies) .\n### strategy configuration\nThis section shows the configuration elements for `strategy` , for each supported runtime.\nThe standard strategy includes only the following elements:\n```\nstrategy:\u00a0 standard:\u00a0 \u00a0 verify: true|false\n```\nThe `verify` property is optional. The default is `false` , meaning, there will be no [verify](/deploy/docs/verify-deployment) phase for the resulting rollouts.\nYou can omit the `strategy` element for a [standard](/deploy/docs/deployment-strategies#what_strategies) deployment strategy.\nThe following sections describe configuration for a [canary deployment](/deploy/docs/deployment-strategies/canary) strategy, for each runtime that Cloud Deploy supports.\n```\nstrategy:\u00a0 canary:\u00a0 \u00a0 runtimeConfig:\u00a0 \u00a0 \u00a0 cloudRun:\u00a0 \u00a0 \u00a0 \u00a0 automaticTrafficControl: true | false\u00a0 \u00a0 canaryDeployment:\u00a0 \u00a0 \u00a0 percentages: [PERCENTAGES]\u00a0 \u00a0 \u00a0 verify: true | false\n```\nThe following YAML shows how to configure a deployment strategy for a GKE or GKE Enterprise target, using [service-based networking](/deploy/docs/deployment-strategies/canary#gke-and-anthos_1) :\n```\n\u00a0 \u00a0 \u00a0 canary:\u00a0 \u00a0 \u00a0 \u00a0 runtimeConfig:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 kubernetes:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 serviceNetworking:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service: \"SERVICE_NAME\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 deployment: \"DEPLOYMENT_NAME\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 disablePodOverprovisioning: true | false\u00a0 \u00a0 \u00a0 \u00a0 canaryDeployment:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 percentages: [PERCENTAGES]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 verify: true | false\n```\nThe following YAML shows how to configure a deployment strategy for a GKE or GKE Enterprise target, using [Gateway API](/deploy/docs/deployment-strategies/canary#gateway) :\n```\n\u00a0 \u00a0 \u00a0 canary:\u00a0 \u00a0 \u00a0 \u00a0 runtimeConfig:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 kubernetes:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 gatewayServiceMesh:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 httpRoute: \"HTTP_ROUTE_NAME\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service: \"SERVICE_NAME\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 deployment: \"DEPLOYMENT_NAME\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 routeUpdateWaitTime: \"WAIT_TIME\"\u00a0 \u00a0 \u00a0 \u00a0 canaryDeployment:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 percentages: [\"PERCENTAGES\"]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 verify: true | false\n```\nNotice in this example [routeUpdateWaitTime](/deploy/docs/deployment-strategies/canary#gateway) . This is included because Gateway API splits traffic using an `HTTPRoute` resource, and sometimes there is a delay propagating changes made to the `HTTPRoute` . In such cases requests may be dropped, because traffic is being sent to resources that are unavailable. You can use `routeUpdateWaitTime` to cause Cloud Deploy to wait after applying `HTTPRoute` changes, if you observe this delay.\nThe following YAML shows how to configure a [custom](/deploy/docs/deployment-strategies/canary#custom) or [custom-automated](/deploy/docs/deployment-strategies/canary#custom-autmated) canary deployment strategy. Runtime-specific configuration, in the `runtimeConfig` section, is omitted for custom canary, but included in automated and custom automated canary configuration.\n```\nstrategy:\u00a0 \u00a0 \u00a0 \u00a0canary:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Runtime configs are configured as shown in the\u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Canary Deployment Strategy section of this document.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0runtimeConfig:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Manual configuration for each canary phase\u00a0 \u00a0 \u00a0 \u00a0 \u00a0customCanaryDeployment:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0- name: \"PHASE1_NAME\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0percent: PERCENTAGE1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0profiles: [ \"PROFILE1_NAME\" ]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0verify: true | false\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0- \u2026\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0- name: \"stable\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0percent: 100\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0profiles: [ \"LAST_PROFILE_NAME\" ]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0verify: true|false\n```\n### verify\nOptional boolean indicating whether or not to support [deployment verification](/deploy/docs/verify-deployment) for this target. The default is `false` .\nEnabling deployment verification also [requires a verify stanza](/deploy/docs/verify-deployment/configure_skaffold_for_deployment_verification) in the `skaffold.yaml` . If you don't provide this property, the verify job will fail.\n### deployParameters\nAllows you to specify key value pairs to pass values to manifests for label-matched targets, when using [deploy parameters](/deploy/docs/parameters) .\nYou can also include this on [targets](#target_definitions) .\nDeploy parameters set on a delivery pipeline use labels to match targets:\n```\ndeployParameters:- values:\u00a0 \u00a0 someKey: \"value1\"\u00a0 matchTargetLabels:\u00a0 \u00a0 label1: firstLabel- values:\u00a0 \u00a0 someKey: \"value2\"\u00a0 matchTargetLabels:\u00a0 \u00a0 label2: secondLabel\n```\nIn this example, there are two values provided for the key, and for each value, there is a label. The value is applied to the manifest for any target that has a matching label.\n### predeploy and postdeploy jobs\nThese allow you to reference custom actions ( [defined separately](/deploy/docs/hooks#configure_in_skaffold) , in `skaffold.yaml` ) to run before the deploy job ( `predeploy` ) and after the verify job, if present ( `postdeploy` ). If there's no verify job, the postdeploy job runs after the deploy job.\nDeploy hooks are configured under `strategy.standard` or `strategy.canary` as follows:\n```\nserialPipeline:\u00a0 stages:\u00a0 - targetId: \u00a0 \u00a0 strategy:\u00a0 \u00a0 \u00a0 standard:\u00a0 \u00a0 \u00a0 \u00a0 predeploy:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 actions: [ACTION_NAME]\u00a0 \u00a0 \u00a0 \u00a0 postdeploy:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 actions: [ACTION_NAME]\n```\nWhere is the name configured in `skaffold.yaml` for `customActions.name` .\nYou can configure `predeploy` and `postdeploy` jobs under any strategy ( `standard` , `canary` , for example).\nFor more information about configuring and using pre- and post-deploy hooks, see [Run hooks before and after deploying](/deploy/docs/hooks) .\n## Target definitions\nThe delivery pipeline definition file can contain target definitions, or you can specify targets in a separate file. You can repeat Target names within a project, but they must be unique within a delivery pipeline.\nYou can reuse targets among multiple delivery pipelines. However, you can only reference a target once from within a single delivery pipeline's progression.\nSee also: [Custom target type definitions](#custom_target_type_definitions)\n### For GKE targets\nThe following YAML shows how to configure a target that [deploys to a GKE cluster](/deploy/docs/gke-targets) :\n```\n\u00a0 \u00a0 \u00a0apiVersion: deploy.cloud.google.com/v1\u00a0 \u00a0 \u00a0kind: Target\u00a0 \u00a0 \u00a0metadata:\u00a0 \u00a0 \u00a0 name:\u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0description:\u00a0 \u00a0 \u00a0deployParameters:\u00a0 \u00a0 \u00a0multiTarget:\u00a0 \u00a0 \u00a0 targetIds: []\u00a0 \u00a0 \u00a0requireApproval:\u00a0 \u00a0 \u00a0gke:\u00a0 \u00a0 \u00a0 cluster: projects/[project_name]/locations/[location]/clusters/[cluster_name]\u00a0 \u00a0 \u00a0 internalIp:\u00a0 \u00a0 \u00a0executionConfigs:\u00a0 \u00a0 \u00a0- usages:\u00a0 \u00a0 \u00a0 \u00a0- [RENDER | PREDEPLOY | DEPLOY | VERIFY | POSTDEPLOY]\u00a0 \u00a0 \u00a0 \u00a0workerPool:\u00a0 \u00a0 \u00a0 \u00a0serviceAccount:\u00a0 \u00a0 \u00a0 \u00a0artifactStorage:\u00a0 \u00a0 \u00a0 \u00a0executionTimeout:\n```\nThe name of this target. This name must be globally unique.\nTarget configuration supports [Kubernetes annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/) and [labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/) , but Cloud Deploy does not require them.\nAnnotations and labels are stored with the target resource. For more information, see [Using labels and annotations with Cloud Deploy](/deploy/docs/labels-annotations) .\nThis field takes an arbitrary string that describes the use of this target.\nYou can include [deploy parameters](/deploy/docs/parameters) on any target, along with values. Those values are assigned to the corresponding keys in your manifest, after rendering.\nThe `deployParameters` stanza takes key-value pairs, as shown:\n```\ndeployParameters:\u00a0 someKey: \"someValue\"\u00a0 someOtherKey: \"someOtherValue\"\n```\nIf you set deploy parameters on a [multi-target](/deploy/docs/terminology#multi-target) , the value is assigned to the manifest for all of that multi-target's [child targets](/deploy/docs/terminology#child_target) .\nThis property is optional, and is used to configure a [multi-target](/deploy/docs/terminology#multi_target) to be used for [parallel deployment](/deploy/docs/parallel) .\nThe value is a comma-separated list of [child targets](/deploy/docs/terminology#child_target) . Child targets are configured as normal targets, and don't include this `multiTarget` property.\nWhether promotion to this target requires manual approval. Can be `true` or `false` .\nThis property is optional. The default is `false` .\nWhen you configure [parallel deployment](/deploy/docs/parallel) , you can require approval on the multi-target only\u2014not on child targets.\nFor GKE clusters only, the resource path identifying the cluster where your application will be deployed:\n```\ngke:\u00a0 cluster: projects/[project_name]/locations/[location]/clusters/[cluster_name]\n```\n- `project_name`The Google Cloud project in which the cluster lives.\n- `location`The location where the cluster lives. For example, `us-central1` . The cluster can also be zonal ( `us-central1-c` ).\n- `cluster_name`The name of the cluster, as it appears in your list of clusters in Google Cloud console.\nHere's an example:\n```\ngke:\u00a0 cluster: projects/cd-demo-01/locations/us-central1/clusters/prod\n```\nOmit the `gke` property when configuring a [multi-target](/deploy/docs/terminology#multi-target) . The GKE cluster is configured instead inside the corresponding child target.\nSee [executionConfigs](#executionconfigs) , in this article, for descriptions of the execution environment properties.\nWhether or not the specified GKE cluster uses a private IP address. This property is optional. By default, Cloud Deploy uses the publicly available IP address for the cluster. If there's a private IP address and you want to use it, set this to `true` .\n### For Cloud Run targets\nThe following YAML shows how to configure a target that [deploys to a Cloud Run service](/deploy/docs/run-targets) :\n```\n\u00a0 \u00a0 \u00a0apiVersion: deploy.cloud.google.com/v1\u00a0 \u00a0 \u00a0kind: Target\u00a0 \u00a0 \u00a0metadata:\u00a0 \u00a0 \u00a0 name:\u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0description:\u00a0 \u00a0 \u00a0multiTarget:\u00a0 \u00a0 \u00a0 targetIds: []\u00a0 \u00a0 \u00a0requireApproval:\u00a0 \u00a0 \u00a0run:\u00a0 \u00a0 \u00a0 location: projects/[project_name]/locations/[location]\u00a0 \u00a0 \u00a0executionConfigs:\u00a0 \u00a0 \u00a0- usages:\u00a0 \u00a0 \u00a0 \u00a0- [RENDER | PREDEPLOY| \u00a0DEPLOY | VERIFY | POSTDEPLOY]\u00a0 \u00a0 \u00a0 \u00a0workerPool:\u00a0 \u00a0 \u00a0 \u00a0serviceAccount:\u00a0 \u00a0 \u00a0 \u00a0artifactStorage:\u00a0 \u00a0 \u00a0 \u00a0executionTimeout:\n```\nThe name of this target. This name must be unique per region.\nTarget configuration supports [annotations and labels](/deploy/docs/labels-annotations) , but Cloud Deploy does not require them.\nAnnotations and labels are stored with the target resource. For more information, see [Using labels and annotations with Cloud Deploy](/deploy/docs/labels-annotations) .\nThis field takes an arbitrary string that describes the use of this target.\nThis property is optional, and is used to configure a [multi-target](/deploy/docs/terminology#multi_target) to be used for [parallel deployment](/deploy/docs/parallel) .\nThe value is a comma-separated list of [child targets](/deploy/docs/terminology#child_target) . Child targets are configured as normal targets, and don't include this `multiTarget` property.\nWhether promotion to this target requires manual approval. Can be `true` or `false` .\nThis property is optional. The default is `false` .\nWhen you configure [parallel deployment](/deploy/docs/parallel) , you can require approval on the multi-target only\u2014not on child targets.\nFor Cloud Run services only, the location where the service will be created:\n```\nrun:\u00a0 location: projects/[project_name]/locations/[location]\n```\n- `project_name`The Google Cloud project in which the service will live.\n- `location`The location where the service will lives. For example, `us-central1` .\nOmit the `run` property when configuring a [multi-target]. The location of the Cloud Run service is configured instead inside the corresponding child target.\nSee [executionConfigs](#executionconfigs) , in this article, for descriptions of the execution environment properties.\n### For GKE Enterprise targets\nTarget configuration for [deploying to an GKE cluster](/deploy/docs/anthos-targets) is similar to configuring a target for a [GKE target](#for_gke_targets) , except that the property is `anthosCluster.membership` , instead of `gke.cluster` , the resource path is different, and `internalIp` is not applicable.\n```\nanthosCluster:\u00a0 membership: projects/[project_name]/locations/global/memberships/[membership_name]\n```\n- `project_name`The Google Cloud project in which the GKE Enterprise cluster lives.\n- `/location/global/`The location where the cluster is registered. `global` , in all cases.\n- `membership_name`The name of the GKE Enterprise cluster membership.\nHere's an example:\n```\nanthosCluster:\u00a0 membership: projects/cd-demo-01/locations/global/memberships/prod\n```\nOmit the `anthosCluster` property when configuring a [multi-target]. The GKE Enterprise cluster is configured instead inside the corresponding child target.\nFor more information about deploying to GKE clusters, see [Deploying to Anthos user clusters](/deploy/docs/anthos-targets) .\n### For custom targets\nConfiguration for [custom targets](/deploy/docs/custom-targets) is similar to all other target types, except that it does not include a `gke` stanza, nor a `run` stanza, nor an `anthosCluster` stanza.\nInstead, custom targets include a `customTarget` stanza:\n```\ncustomTarget:\u00a0 customTargetType: [CUSTOM_TARGET_TYPE_NAME]\n```\nWhere `CUSTOM_TARGET_TYPE_NAME` is the name you used in the [custom target type definition](#custom_target_type_definitions) .\nHere's an example:\n```\napiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: sample-envcustomTarget:\u00a0 customTargetType: basic-custom-target\n```\n### executionConfigs\nA set of fields to specify a non-default [execution environment](/deploy/docs/execution-environment) for this target.\n**Note:** all configuration properties under `executionConfigs` are optional. You don't need to [specify an execution environment](/deploy/docs/execution-environment) if you can use the default worker pool, service account, and storage bucket.\n- `usages`Either `RENDER` or `DEPLOY` or both, plus `PREDEPLOY` , `VERIFY` , or `POSTDEPLOY` if [verification](/deploy/docs/verify-deployment) or [deploy hooks](/deploy/docs/hooks) are [enabled](#strategy) on the target. These indicate which of those operations to [perform](/deploy/docs/architecture#how_they_fit) for this target using this execution environment. To indicate that a custom execution environment is to be used for predeploy hook, render, deploy, postdeploy hook, and verification, you would configure it as follows:```\nusages:- RENDER- PREDEPLOY- DEPLOY- VERIFY- POSTDEPLOY\n```If verification is [enabled on the pipeline stage](/deploy/docs/verify-deployment#configure_pipeline) , and you don't specify `VERIFY` in a `usages` stanza, Cloud Deploy uses the default execution environment for verification. Predeploy and postdeploy [hooks](/deploy/docs/hooks) work the same way.However, if there is a custom execution environment for `RENDER` and `DEPLOY` , you specify one for `VERIFY` , `PREDEPLOY` , OR `POSTDEPLOY` if they're configured on the delivery pipeline. `VERIFY` , `PREDEPLOY` , and `POSTDEPLOY` can be in the same `usages` as `RENDER` or `DEPLOY` , or in separate `usages` .You can't specify `usages.VERIFY` , `usages.PREDEPLOY` , or `usages.POSTDEPLOY` unless `RENDER` and `DEPLOY` are specified in the same or separate custom execution environments.\n- `workerPool`Configuration for the worker pool to use. This takes a resource path identifying the Cloud Build worker pool to use for this target. For example:`projects/p123/locations/us-central1/workerPools/wp123` .To use the [default Cloud Build pool](/build/docs/private-pools/private-pools-overview#overview_of_default_pools_and_private_pools) , omit this property.A given target can have two `workerPool` s (one for `RENDER` and one for `DEPLOY` ). When configuring the default pool, you can specify an alternate service account or storage location or both.\n- `serviceAccount`The name of the service account to use for this operation ( `RENDER` or `DEPLOY` ) for this target.\n- `artifactStorage`The Cloud Storage bucket to use for this operation ( `RENDER` or `DEPLOY` ) for this target, instead of the default bucket.\n- `executionTimeout`Optional. Sets the timeout, in seconds, for operations that Cloud Build performs for Cloud Deploy. By default this is `3600` seconds (1 hour). Example: `executionTimeout: \"5000s\"`\n**Note:** If you specify a configuration for either RENDER or DEPLOY, you must do so for the other, even if one uses default values (only the `usages:` property).\nThe `executionConfigs` configuration described in this document is new. The previous syntax is still supported:\n```\nexecutionConfigs:- privatePool:\u00a0 \u00a0 workerPool:\u00a0 \u00a0 serviceAccount:\u00a0 \u00a0 artifactStorage:\u00a0 usages:\u00a0 - [RENDER | DEPLOY]- defaultPool:\u00a0 \u00a0 serviceAccount:\u00a0 \u00a0 artifactStorage:\u00a0 usages:\u00a0 - [RENDER | DEPLOY]\n```\nWhen you're configuring an `executionConfigs` stanza for a [multi-target](/deploy/docs/terminology#multi-target) , each child target [can inherit that execution environment](/deploy/docs/parallel#execution_environments_and_parallel_deployment) from that multi-target.\n## Custom target type definitions\nThis section describes the fields used to define [custom target types](/deploy/docs/custom-targets)\nAs with standard targets and automations, `CustomTargetType` definitions can be included with your delivery pipeline definition, or in a separate file or files.\nThe following YAML shows how to configure a custom target type:\n```\napiVersion: deploy.cloud.google.com/v1kind: CustomTargetTypemetadata:\u00a0 name: [CUSTOM_TARGET_TYPE_NAME]\u00a0 annotations:\u00a0 labels:description:customActions:\u00a0 renderAction: [RENDER_ACTION_NAME]\u00a0 deployAction: [DEPLOY_ACTION_NAME]\u00a0 includeSkaffoldModules:\u00a0 \u00a0 - configs:\u00a0 \u00a0 # either:\u00a0 \u00a0 googleCloudStorage:\u00a0 \u00a0 \u00a0 source:\u00a0 \u00a0 \u00a0 path:\u00a0 \u00a0 # or:\u00a0 \u00a0 git:\u00a0 \u00a0 \u00a0 repo:\u00a0 \u00a0 \u00a0 path:\u00a0 \u00a0 \u00a0 ref:\n```\nWhere:\n- `[CUSTOM_TARGET_TYPE_NAME]`Is an arbitrary name you give to this custom target type definition. This name is referenced in the [target definition](#target_definitions) for any target that uses the custom target type you're defining.\n- `[RENDER_ACTION_NAME]`Is the name of the custom render action. This value is the `customAction.name` defined in `skaffold.yaml` .\n- `[DEPLOY_ACTION_NAME]`Is the name of the custom deploy action. This value is the `customAction.name` defined in `skaffold.yaml` .\n- For `includeSkaffoldModules` , see [Use remote Skaffold configs](/deploy/docs/create-custom-target#remote_skaffold) .## Automation definitions\nThis section describes the fields used to define the Cloud Deploy [automation](/deploy/docs/automation-resource#the_automation_resource) resources.\nAs with targets, `Automation` definitions can be included with your delivery pipeline definition, or in a separate file or files.\nFor more information about automation in Cloud Deploy, see the [automation documentation](/deploy/docs/automation) .\nThe following YAML shows how to configure an automation. Note that the specifics of an automation are different per rule. (Configuration for the available automation rule types is in the document [Using automation rules](/deploy/docs/automation-rules) .)\n```\napiVersion: deploy.cloud.google.com/v1kind: Automationmetadata:\u00a0 name: [PIPELINE_NAME]/[PURPOSE]\u00a0 labels:\u00a0 annotations:description: [DESCRIPTION]suspended: true | falseserviceAccount: [SERVICE_ACCOUNT_ID]selector:- target:\u00a0 \u00a0 id: [TARGET_ID]\u00a0 \u00a0 #or\u00a0 \u00a0 labels: `[LABEL_KEY]:[LABEL_VALUE]`rules:- [RULE_TYPE]:\u00a0 \u00a0 name:[RULE_NAME]\u00a0 [RULE-SPECIFIC_CONFIG]\n```\nWhere:\n- `[PIPELINE_NAME]`Is the same as the `metadata.name` value in the delivery pipeline that uses this automation. All automations are exclusive to the delivery pipelines for which they're created. That is, you can't share an automation across more than one delivery pipeline.\n- `[PURPOSE]`Is any further descriptive name for this automation. Typically, this would be the action that's automated. For example, `my-app-pipeline/promote` .\n- `labels` and `annotations` are any labels or annotations you want to associate with this automation.\n- `[DESCRIPTION]`Is an optional description for this automation.\n- `suspended``true` or `false` , indicating whether this automation is active or suspended. If set to `true` , the automation is not used. This can be useful for [testing an automation without affecting the delivery pipeline](/deploy/docs/automation#suspend) .\n- `[SERVICE_ACCOUNT_ID]`Is the ID of the service account used to perform the [automation](/deploy/docs/automation-resources#automation_service_account) . For example, if the automation is `promoteRelease` , then this service account performs the release promotion, and thus requires the [permissions that are needed](/deploy/docs/iam-roles-permissions#permissions) to promote a release.A value is required for this property. Cloud Deploy doesn't use the [default service account](/deploy/docs/cloud-deploy-service-account#execution_service_account) for automations.This service account must have the following permissions:- `actAs` permission to impersonate the execution service account.\n- [permission](/deploy/docs/iam-roles-permissions#permissions) to perform the operation being automated, for example, `clouddeploy.releases.promote` to promote a release, or `clouddeploy.rollouts.advance` to advance a rollout phase.\n- `[TARGET_ID]`Is the ID of the target or targets for which this automation is used. Although an automation is tied to a delivery pipeline, it's only executed on the specified target or targets.\n- `[LABEL_KEY]:[LABEL_VALUE]`Is a key-value pair to match against a key-value pair defined on the target. This select all targets associated with the delivery pipeline that have the same label and value.\n- `[RULE_TYPE]`Is the name of the automation rule used for this automation. This is either `promoteRelease` or `advanceRollout` . You can include more than one rule in an automation, including more than one of the same RULE_TYPE. For example, you can have more than one `promoteRelease` rule in the same automation. [Learn more](/deploy/docs/automation-rules) .\n- `[RULE_NAME]`A name for the rule. This name must be unique within the delivery pipeline. A value is required for this property.\n- `[RULE-SPECIFIC_CONFIG]`Configuration is different for each supported automation type. Those configurations are shown in [Using automation rules](/deploy/docs/automation-rules) .## What's next\n- Find out more about [how Cloud Deploy works](/deploy/docs/overview) .\n- Learn how to [set up a delivery pipeline for your application](/deploy/docs/create-pipeline-targets) .\n- Learn how to [manage your manifests](/deploy/docs/skaffold) .\n- Avoid mismatches between your release and your delivery pipeline by learning about [pipeline instances](/deploy/docs/pipeline-instances) .", "guide": "Cloud Deploy"}