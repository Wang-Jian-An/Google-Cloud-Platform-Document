{"title": "Cloud Deploy - About custom targets", "url": "https://cloud.google.com/deploy/docs/custom-targets", "abstract": "# Cloud Deploy - About custom targets\nThis document describes how custom targets work in Cloud Deploy.\nCloud Deploy includes built-in support for various runtime environments as [targets](/deploy/docs/terminology#target) . But the list of supported target types is finite. With custom targets, you can deploy to other systems besides the supported runtimes.\nA custom target is a target that represents an arbitrary output environment other than a runtime that Cloud Deploy supports.\nThe page [Create a custom target](/deploy/docs/create-custom-target) describes the process of defining a custom target type and implementing it as a target in a delivery pipeline.\n#", "content": "## What goes into a custom target?\nEach custom target consists of the following components:\n- Custom actions, [defined in skaffold.yaml](/deploy/docs/create-custom-target#skaffold_define_action) These are similar to how you define [deploy hooks](/deploy/docs/hooks) . In the `skaffold.yaml` file, you define `customActions` , where each custom action identifies a container image to use, and commands to run on that container.In this way, the custom target is simply a custom-defined action or set of actions.For any custom target type, you configure a custom render action and a custom deploy action. These actions consume values provided by Cloud Deploy and must fulfill a [set of required outputs](#required_inputs_and_outputs) .The custom render action is optional, but you must create one unless your custom target will work correctly if rendered by `skaffold render` , which is the default for Cloud Deploy.\n- A [custom target type definition](/deploy/docs/create-custom-target#define_custom_target_type) The `CustomTargetType` is a Cloud Deploy resource that identifies the custom actions (separately defined in your `skaffold.yaml` ) that targets of this type use for release render and rollout deploy activities.\n- A [target definition](/deploy/docs/create-custom-target#define_target) The target definition for a custom target is the same as for any target type, except that it includes the `customTarget` property, whose value is the name of the `CustomTargetType` .\nWith those components in place, you can use the target as you would any target, referencing it from your delivery pipeline progression, and making full use of Cloud Deploy features, such as [promotion and approvals](/deploy/docs/promote-release) , and [rollbacks](/deploy/docs/roll-back) .\n### An example\nThe quickstart [Define and use a custom target type](/deploy/docs/deploy-app-custom-target) creates a custom target type that includes simple commands to run on a container image\u2014one command for render and one for deploy. The commands, in this case, just add text to the required output files for render and deploy.\nFor more examples, see [Custom target examples](#custom_target_examples) .\n## Required inputs and outputs\nAny custom target type defined for Cloud Deploy must satisfy requirements for input and output, for both render and deploy. This section lists what inputs and outputs are required, and how they are provided.\nCloud Deploy provides the required inputs, for both render and deploy, as environment variables. The following sections list these inputs, as well as the outputs that your custom render and deploy actions must return.\nIn addition to the environment variables listed in this section, Cloud Deploy passes to your custom containers any [deploy parameters](/deploy/docs/parameters) you have set.\n### Inputs to render actions\nFor custom render actions, Cloud Deploy provides the following required inputs, as environment variables. For multi-phase rollouts ( [canary deployments](/deploy/docs/deployment-strategies/canary) ), Cloud Deploy provides these variables for each phase.\n- `CLOUD_DEPLOY_PROJECT`The Google Cloud project in which the custom target type is created.\n- `CLOUD_DEPLOY_LOCATION`The Google Cloud region for the custom target type.\n- `CLOUD_DEPLOY_DELIVERY_PIPELINE`The name of the Cloud Deploy delivery pipeline referencing the custom target type.\n- `CLOUD_DEPLOY_RELEASE`The name of the release for which the render operation is invoked.\n- `CLOUD_DEPLOY_TARGET`The name of the Cloud Deploy target that uses the custom target type.\n- `CLOUD_DEPLOY_PHASE`The [rollout phase](/deploy/docs/deployment-strategies/manage-rollout#phases) to which the render corresponds.\n- `CLOUD_DEPLOY_REQUEST_TYPE`For the custom render action, this is always `RENDER` .\n- `CLOUD_DEPLOY_FEATURES`A comma-separated list of Cloud Deploy features which the custom container must support. This variable is populated based on features configured in your delivery pipeline.If your implementation doesn't support the features in this list, we recommend that it fail during rendering.For [standard deployments](/deploy/docs/deployment-strategies#what_deployment_strategies_does_support) , this is empty. For canary deployments, the value is `CANARY` . If the value provided by Cloud Deploy is `CANARY` , your render action is invoked for each phase in the canary. The canary percentage for each phase is provided in the `CLOUD_DEPLOY_PERCENTAGE_DEPLOY` environment variable.\n- `CLOUD_DEPLOY_PERCENTAGE_DEPLOY`The percentage of deployment associated with this render operation. If the `CLOUD_DEPLOY_FEATURES` environment variable is set to `CANARY` , your custom render action is called for each phase, and this variable is set to the canary percentage for each phase. For [standard deployments](/deploy/docs/deployment-strategies#what_deployment_strategies_does_support) and for canary deployments that have reached the `stable` phase, this is `100` .\n- `CLOUD_DEPLOY_STORAGE_TYPE`The storage provider. Always `GCS` .\n- `CLOUD_DEPLOY_INPUT_GCS_PATH`The Cloud Storage path for the render-file archive written when the release was created.\n- `CLOUD_DEPLOY_OUTPUT_GCS_PATH`The Cloud Storage path where the custom render container is expected to upload artifacts to be used for deployment. Note that the render action must upload a file named `results.json` containing the results of this render operation. For more information, see [Outputs from render action](#render_contract_outputs) .\n### Outputs from render action\nYour custom render action must provide the information described in this section. The information must be included in the results file, named `results.json` , located in the Cloud Storage bucket provided by Cloud Deploy.\n- Rendered configuration file or files\n- A `results.json` file, containing the following information:- An indication of the success or failure state of the custom action.Valid values are `SUCCEEDED` and `FAILED` .\n- (Optional) any error messages that are generated by the custom action.\n- The Cloud Storage path for the rendered configuration file or files.The path for all the rendered configuration files is the full URI. You populate it partly using the value of the `CLOUD_DEPLOY_OUTPUT_GCS_PATH` [provided](#render_contract_inputs) by Cloud Deploy.You must provide the rendered configuration file, even if it's empty. The contents of the file can be anything, in any format, as long as it's consumable by your custom deploy action. We recommend this file be human readable, so that you and other users in your organization can view this file in the [release inspector](/deploy/docs/view-release) .If you need to examine the `results.json` file, for example for debugging, you can find the Cloud Storage URI to it in the Cloud Build logs.\n### Example render results file\nThe following is a sample `results.json` file output from a custom render action:\n```\n{\u00a0 resultStatus: \"SUCCEEDED\"\u00a0 manifestFile: \"gs://bucket/my-pipeline/release-001/rollout-a/01234/custom-output/manifest.yaml\" \u00a0\u00a0 failureMessage: \"\"}\n```\n### Inputs to deploy actions\nFor custom deploy actions, Cloud Deploy provides the following required inputs, as environment variables:\n- `CLOUD_DEPLOY_PROJECT`The Google Cloud project in which the custom target is created.\n- `CLOUD_DEPLOY_LOCATION`The Google Cloud region for the custom target type.\n- `CLOUD_DEPLOY_DELIVERY_PIPELINE`The name of the Cloud Deploy delivery pipeline referencing the target that uses the custom target type.\n- `CLOUD_DEPLOY_RELEASE`The name of the release for which the deploy operation is invoked.\n- `CLOUD_DEPLOY_ROLLOUT`The name of the Cloud Deploy rollout that this deploy is for.\n- `CLOUD_DEPLOY_TARGET`The name of the Cloud Deploy target that uses the custom target type.\n- `CLOUD_DEPLOY_PHASE`The [rollout phase](/deploy/docs/deployment-strategies/manage-rollout#phases) to which the deploy corresponds.\n- `CLOUD_DEPLOY_REQUEST_TYPE`For the custom deploy action, this is always `DEPLOY` .\n- `CLOUD_DEPLOY_FEATURES`A comma-separated list of Cloud Deploy features which the custom container must support. This variable is populated based on features configured in your delivery pipeline.If your implementation doesn't support the features in this list, we recommend that it fail during rendering.For [standard deployments](/deploy/docs/deployment-strategies#what_deployment_strategies_does_support) , this is empty. For canary deployments, the value is `CANARY` . If the value provided by Cloud Deploy is `CANARY` , your render action is invoked for each phase in the canary. The canary percentage for each phase is provided in the `CLOUD_DEPLOY_PERCENTAGE_DEPLOY` environment variable.\n- `CLOUD_DEPLOY_PERCENTAGE_DEPLOY`The percentage of deployment associated with this deploy operation. If the `CLOUD_DEPLOY_FEATURES` environment variable is set to `CANARY` , your custom deploy action is called for each phase, and this variable is set to the canary percentage for each phase. Your deploy action must run for each phase.\n- `CLOUD_DEPLOY_STORAGE_TYPE`The storage provider. Always `GCS` .\n- `CLOUD_DEPLOY_INPUT_GCS_PATH`The Cloud Storage path where the custom renderer wrote the rendered configuration files.\n- `CLOUD_DEPLOY_SKAFFOLD_GCS_PATH`The Cloud Storage path to the rendered Skaffold configuration.\n- `CLOUD_DEPLOY_MANIFEST_GCS_PATH`The Cloud Storage path to the rendered manifest file.\n- `CLOUD_DEPLOY_OUTPUT_GCS_PATH`The path to the Cloud Storage directory where the custom deploy container is expected to upload deploy artifacts. For more information, see [Outputs from deploy action](#deploy_contract_outputs) .\n### Outputs from deploy action\nYour custom deploy action must write a `results.json` output file. This file must be located in the Cloud Storage bucket provided by Cloud Deploy ( `CLOUD_DEPLOY_OUTPUT_GCS_PATH` ).\nThe file must include the following:\n- An indication of the success or failure state of the custom deploy action.The following are the valid statuses:- `SUCCEEDED`\n- `FAILED`\n- `SKIPPED` (for canary deployments where [canary phases are skipped](/deploy/docs/deployment-strategies/canary#skipped_phases) to go straight to `stable` .)\n- (Optional) A list of deploy artifact files, in the form of Cloud Storage pathsThe path is the full URI. You populate it partly using the value of the `CLOUD_DEPLOY_OUTPUT_GCS_PATH` [provided](#render_contract_inputs) by Cloud Deploy.Files listed here are populated in [job run resources](/deploy/docs/deployment-strategies/manage-rollout#jobs_and_job_runs) as deploy artifacts.\n- (Optional) A failure message, if the custom deploy action is unsuccessful (returning a `FAILED` state)This message is used to populate the `failure_message` on the [job run](/deploy/docs/deployment-strategies/manage-rollout#jobs_and_job_runs) for this deploy action.\n- (Optional) A skip message, to provide additional information if the action returns a `SKIPPED` status.\nIf you need to examine the `results.json` file, for example for debugging, you can find the Cloud Storage URI for it in the Cloud Build release render logs.\n### Example deploy results file\nThe following is a sample `results.json` file output from a custom deploy action:\n```\n{\u00a0 resultStatus: \"SUCCEEDED\"\u00a0 artifactFiles: [\u00a0 \u00a0 \"gs://bucket/my-pipeline/release-001/rollout-a/01234/custom-output/file1.yaml\",\u00a0 \u00a0 \"gs://bucket/my-pipeline/release-001/rollout-a/01234/custom-output/file2.yaml\",\u00a0 ]\u00a0 failureMessage: \"\"\u00a0 skipMessage: \"\"}\n```\n## Further information about custom actions\nHere are some things to keep in mind when setting up and using custom target types.\n### Executing the custom actions\nYour custom render and deploy actions run in the Cloud Deploy [execution environment](/deploy/docs/execution-environment) . You can't configure your custom actions to run on a Google Kubernetes Engine cluster.\n### Using remote, reusable Skaffold configs\nAs described in this document, you configure your custom action in the `skaffold.yaml` file provided at release creation. But you can also store Skaffold configs in a Git repository or in a Cloud Storage bucket and [reference them from your custom target type definition](/deploy/docs/create-custom-target#remote_skaffold) . This lets you use custom actions defined and stored in a single, shared location, instead of including the custom actions with each releases's `skaffold.yaml` file.\n### Custom targets and deployment strategies\nCustom targets are fully supported for [standard](/deploy/docs/terminology#standard_deployment_strategy) deployments.\nCloud Deploy supports [canary deployments](/deploy/docs/deployment-strategies/canary) as long as the custom renderer and deployer support the canary feature.\nYou must use [custom canary configuration](/deploy/docs/deployment-strategies/canary#custom) . [Automated and custom-automated](/deploy/docs/deployment-strategies/canary#types_of_canary) canaries are not supported.\n### Custom targets and deploy parameters\nYou can use [deploy parameters](/deploy/docs/parameters) with custom targets. You can set them on the delivery pipeline [stage](/deploy/docs/parameters#add_to_pipeline_stage) , on the target that uses a custom target type, or on the [release](/deploy/docs/parameters#pass_to_releases_create) .\nDeploy parameters are passed to your custom render and deploy containers, as environment variables, in addition to [those already provided](#required_inputs_and_outputs) .\n## Custom target examples\nThe [cloud-deploy-samples repository](https://github.com/GoogleCloudPlatform/cloud-deploy-samples/tree/main/custom-targets/) contains a set of sample custom target implementations. The following samples are available:\n- GitOps\n- Vertex AI\n- Terraform\n- Infrastructure Manager\n- Helm\nEach sample includes a quickstart.\nThese samples are not a supported Google Cloud product, and are not covered by a Google Cloud support contract. To report bugs or request features in a Google Cloud product, contact Google Cloud support.\n## What's next\n- Now that you know about custom targets, find out how to [configure and use them](/deploy/docs/create-custom-target) .\n- Try the [quickstart: Define and use a custom target type](/deploy/docs/deploy-app-custom-target) .\n- Learn more about [configuring Cloud Deploy targets](/deploy/docs/config-files#target_definitions) .\n- Learn about Cloud Deploy [execution environments](/deploy/docs/execution-environment) .", "guide": "Cloud Deploy"}