{"title": "Cloud Deploy - Create your delivery pipeline and targets", "url": "https://cloud.google.com/deploy/docs/create-pipeline-targets", "abstract": "# Cloud Deploy - Create your delivery pipeline and targets\nThis page describes how to create the delivery pipeline and targets that describe where and how Cloud Deploy will deploy your application. See [Configuration file schema](/deploy/docs/config-files) for a description of the YAML file structure for delivery pipelines and targets.\n", "content": "## About the delivery pipeline and targets\nYour delivery pipeline describes a [progression](/deploy/docs/terminology#progression) of deployment [targets](/deploy/docs/terminology#target) . You can define those targets in the same file as the delivery pipeline or in one or more separate files.\nAfter you create the delivery pipeline and target definition file or files, you run `gcloud deploy apply` against each of those files to register them as Cloud Deploy resources.\n## Define the delivery pipeline and targets\nThe structure of the delivery pipeline and target configuration files is described [here](/deploy/docs/config-files) .\nYou can call this file anything you want. By convention, a delivery pipeline config that  [target](/deploy/docs/terminology#target) definitions is called `clouddeploy.yaml` , and one that instead references targets defined in one or more separate files is named `delivery-pipeline.yaml` .\nThe target can point to [GKE](/deploy/docs/config-files#for_gke_targets) , [GKE Enterprise](/deploy/docs/config-files#for_anthos_targets) , or [Cloud Run](/deploy/docs/config-files#for_run_targets) . Within a delivery pipeline, all targets must reference the same runtime type (all GKE, or all GKE Enterprise, for example).\n## Create a delivery pipeline and targets using the Google Cloud console\nYou can use the Google Cloud console to create a new delivery pipeline and target or targets. This is useful for trying out Cloud Deploy, but is not suitable for production workloads. (You can also use the Google Cloud console to [create a release](/deploy/docs/deploying-application#create_pipeline_in_ui) .)\nTo create the delivery pipeline:\n- From the **Delivery pipelines** page, click **Create** .\n- Provide a name (or keep the default) and, optionally, a description.\n- Select your region.\n- Choose your runtime environment.For GKE, choose **Google Kubernetes Engine** , or select **Cloud Run** if that's the runtime you're deploying to.\n- Under **New target** , provide a name (or keep the default).\n- If you want to require [approval](/deploy/docs/promote-release#manage_approvals_for_a_delivery_pipeline) on this target, select the **Require approval for rollouts** checkbox.\n- If you're going to use a [canary deployment strategy](/deploy/docs/deployment-strategies/canary) on this target, select the **Enable canary** checkbox. **Note:** You can enable canary here for Cloud Run only. For GKE, you need to configure it as described [here](/deploy/docs/deployment-strategies/canary) .\n- Click **Done** .\n- Click **Add target** and follow these steps for each additional target you want to create.\n- When you have all your targets, click **Create** to create the delivery pipeline and target resources.## Register the delivery pipeline and targets\n**If you created your pipeline and targets using the Google Cloud console,you don't need to do this.**\nTo register your delivery pipeline with Cloud Deploy, you run `gcloud deploy apply` once for each separate definition file. That is, if you define three targets in three files, you would run the command four times\u2014once for the delivery pipeline, and once for each target.\nThe following command registers a delivery pipeline with its targets defined in the same file.\n```\ngcloud deploy apply --file=PIPELINE_CONFIG \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --region=LOCATION \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --project=PROJECT\n```\nYou now have a delivery pipeline that can manage deployment of your releases, and target resources that can be used by any delivery pipeline in the same project and region.\n### A single-file example\nThe command in this example registers a delivery pipeline and targets that are all defined in the same file:\n```\ngcloud deploy apply --file=clouddeploy.yaml --region=us-central1\n```\n### An example using separate files\nFor this example, there are three targets defined in three separate files, so you run four commands:\n```\ngcloud deploy apply --file=delivery-pipeline.yaml --region=us-central1 && \\gcloud deploy apply --file=target_dev.yaml --region=us-central1 && \\gcloud deploy apply --file=target_staging.yaml --region=us-central1 && \\gcloud deploy apply --file=target_prod.yaml --region=us-central1\n```\nThe `--region` flag is required unless you've set a default (using `gcloud config set deploy/region [REGION]` ). The region must be the same for the delivery pipeline and all targets that pipeline references.\n## Create the delivery pipeline and targets using Terraform\nYou can also use the [Google Cloud Terraform provider](https://registry.terraform.io/providers/hashicorp/google/latest/docs) to create [delivery pipeline](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/clouddeploy_delivery_pipeline) and [target](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/clouddeploy_target) resources.\nThe [Google Cloud beta Terraform provider](https://registry.terraform.io/providers/hashicorp/google-beta/latest/docs) may include support for Cloud Deploy features in [Preview](/products#product-launch-stages) .\n## Edit existing pipelines and targets\nYou can later edit any delivery pipeline or target config and run `gcloud deploy apply` to update the pipeline or target resource. But those changes [do not affect any existing releases, as they are managed by the originaldelivery pipeline](/deploy/docs/pipeline-instances) .\n## Require manual approval for a deployment\nTo require manual approval for a given target, include the following property on the [target definition](/deploy/docs/config-files#target_definitions) :\n`requireApproval: true`\nThe default is `false` . If you omit this property from the delivery-pipeline config, or provide no value for it, deploying to this target doesn't require approval. (But the caller trying to promote to the target still needs the `clouddeploy.rollouts.create` IAM permission.)\nYou can even require manual approval on the first target. When a release is created, using the CLI, for the first target, the `rollout` is created automatically. If approval is required, Cloud Deploy creates the `rollout` , but in a pending-release state until approval is given.\n## What's next\n- [Create your Skaffold configuration](/deploy/docs/using-skaffold/getting-started-skaffold) .\n- See [Deploying your application](/deploy/docs/deploying-application) to find out how to invoke your delivery pipeline and create a release.", "guide": "Cloud Deploy"}