{"title": "Cloud Deploy - Automate release promotion and rollout advancement in Cloud Deploy", "url": "https://cloud.google.com/deploy/docs/deploy-app-automation", "abstract": "# Cloud Deploy - Automate release promotion and rollout advancement in Cloud Deploy\n# Automate release promotion and rollout advancement in Cloud Deploy\nThis page shows you how to use Cloud Deploy to automatically promote a release to a target and advance a rollout to its next phase.\nIn this quickstart, you'll do the following:- Create two GKE clusters or two Cloud Run services.\n- Create a [Skaffold](/skaffold) configuration and either a Kubernetes manifest or a Cloud Run service definition.\n- Define your Cloud Deploy delivery pipeline and deployment targets.The pipeline will deploy to two targets: `dev` and `staging` . And the `staging` target uses a [canary deployment strategy](/deploy/docs/deployment-strategies/canary) .\n- Define two automation rules:- An automation to promote the release into the `staging` target on successful rollout to `dev` .\n- An automation to advance the rollout to the `stable` phase upon successful completion of the `canary-25` ` phase.\n- Instantiate your delivery pipeline by creating a release, which automatically deploys to the `dev` target.\n- View the delivery pipeline and release in the Google Cloud console.Because of the automated promotion, this release is promoted into the `staging` automatically.Because the `staging` target uses a canary deployment strategy, and this is the first deployment into that runtime, the `canary-25` phase is skipped. See [Why phases are sometimes skipped](/deploy/docs/deployment-strategies#skip_phases) to understand more about why the canary phase is skipped the first time.Because of the automated phase-advance, the rollout is advanced to the `stable` phase.\n", "content": "## Before you begin- If you already have the CLI installed, make sure you're running the latest version:\n- ```\ngcloud components update\n```\n- Make sure the [default Compute Engine service account](/deploy/docs/cloud-deploy-service-account#execution_service_account) has sufficient permissions.The service account might already have the necessary permissions. These steps are included for projects that disable automatic role grants for default service accounts.- First add the`clouddeploy.jobRunner`role:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/clouddeploy.jobRunner\"\n```\n- Add the`clouddeploy.releaser`role:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/clouddeploy.releaser\"\n```\n- Add the developer role for your specific runtime.\n- For GKE:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/container.developer\"\n```\n- For Cloud Run:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/run.developer\"\n```\n- Add the`iam.serviceAccountUser`role, which includes the`actAs`permission for the default service account to deploy to the runtime:```\ngcloud iam service-accounts add-iam-policy-binding $(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/iam.serviceAccountUser\" \\\n --project=PROJECT_ID\n```\n- Add the`iam.serviceAccountUser`role, including`actAs`permission for yourself, to use the default service account:```\ngcloud iam service-accounts add-iam-policy-binding $(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --member=user:YOUR_EMAIL_ADDRESS \\\n --role=\"roles/iam.serviceAccountUser\" \\\n --project=PROJECT_ID\n```In this case, is the email address you use to access Google Cloud.## Create your runtime environments **If you're deploying to Cloud Run, you can skip this command** .\nFor GKE, create two clusters: `automation-quickstart-cluster-dev` and `automation-quickstart-cluster-staging` , with default settings. The clusters' Kubernetes API endpoints must be network-reachable from the public internet. GKE clusters are externally accessible by default.\n```\ngcloud container clusters create-auto automation-quickstart-cluster-dev \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0&& gcloud container clusters create-auto automation-quickstart-cluster-staging \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--region=us-central1\n```## Get your project number.You need your project number to identify the default service account. This is necessary for configuring the automation resource.- Run the following command to get your project number:```\ngcloud projects describe PROJECT_ID\n```\n- Copy the project number from the command-line output, and paste it here.You don't need to run this as a command. Pasting it here populates the service account reference in the automation config later in this quickstart.```\nPROJECT_NUMBER\n```\n## Prepare your Skaffold configuration and application manifestCloud Deploy uses [Skaffold](/deploy/docs/using-skaffold) to provide the details for what to deploy and how to deploy it properly for your separate [targets](/deploy/docs/terminology#target) .\nIn this quickstart, you create a `skaffold.yaml` file, which identifies the application manifest to be used to deploy the sample app.- Open a terminal window.\n- Create a new directory and navigate into it.\n```\nmkdir deploy-automation-gke-quickstartcd deploy-automation-gke-quickstart\n```\n```\nmkdir deploy-automation-run-quickstartcd deploy-automation-run-quickstart\n```\n- Create a file named `skaffold.yaml` with the following contents:\n```\napiVersion: skaffold/v4beta7kind: Configmetadata:\u00a0 name: gke-automationmanifests:\u00a0 rawYaml:\u00a0 - k8s-deployment.yamldeploy:\u00a0 kubectl: {}\n```\n```\napiVersion: skaffold/v4beta7kind: Configmetadata:\u00a0 name: run-automationprofiles:- name: dev\u00a0 manifests:\u00a0 \u00a0 rawYaml:\u00a0 \u00a0 - run-dev.yaml- name: staging\u00a0 manifests:\u00a0 \u00a0 rawYaml:\u00a0 \u00a0 - run-staging.yamldeploy:\u00a0 cloudrun: {}\n```\nThis file is a minimal Skaffold config. For this quickstart, you create the file. But you can also [have Cloud Deploy create one for you](/deploy/docs/using-skaffold/getting-started-skaffold#have_generate_your_skaffoldyaml) , for simple, non-production applications.See the [skaffold.yaml reference](https://skaffold.dev/docs/references/yaml/) for more information about this file.\n- Create the definition for your application\u2014a pair of service definitions for Cloud Run or a Kubernetes manifest for GKE.\nCreate a file named `k8s-deployment.yaml` , with the following contents:\n```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: my-deployment\u00a0 labels:\u00a0 \u00a0 app: my-app\u00a0 namespace: defaultspec:\u00a0 replicas: 1\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: my-app\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: my-app\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: nginx\u00a0 \u00a0 \u00a0 \u00a0 image: my-app-image---apiVersion: v1kind: Servicemetadata:\u00a0 name: my-service\u00a0 namespace: defaultspec:\u00a0 selector:\u00a0 \u00a0 app: my-app\u00a0 ports:\u00a0 \u00a0 - protocol: TCP\u00a0 \u00a0 \u00a0 port: 80\n```\nThis file is a simple Kubernetes [manifest](https://kubernetes.io/docs/reference/glossary/?fundamental=true#term-manifest) , which is applied to the cluster to deploy the application.- Create a file named `run-dev.yaml` , with the following contents:```\napiVersion: serving.knative.dev/v1kind: Servicemetadata:\u00a0 name: my-automation-run-service-devspec:\u00a0 template:\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - image: my-app-image\n```\n- Create a file named `run-staging.yaml` , with the following contents:```\napiVersion: serving.knative.dev/v1kind: Servicemetadata:\u00a0 name: my-automation-run-service-stagingspec:\u00a0 template:\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - image: my-app-image\n```\nThis file is a simple Cloud Run service definition, which is used at deploy time to create your Cloud Run service.\n## Create your delivery pipeline, targets, and automationYou can define your delivery pipeline and targets in one file or in separate files. You can also define an automation action in a separate file. This quickstart uses one file for the pipeline, targets, and automation.- Create your delivery pipeline, target definitions, and automation action:\nIn the `deploy-automation-gke-quickstart` directory, create a new file: `clouddeploy.yaml` , with the following contents:\n```\napiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0 name: my-automation-demo-app-1description: Automation demonstration pipelineserialPipeline:\u00a0 stages:\u00a0 - targetId: automation-quickstart-dev\u00a0 - targetId: automation-quickstart-staging\u00a0 \u00a0 profiles: []\u00a0 \u00a0 strategy:\u00a0 \u00a0 \u00a0 canary:\u00a0 \u00a0 \u00a0 \u00a0 runtimeConfig:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 kubernetes:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 serviceNetworking:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service: \"my-service\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 deployment: \"my-deployment\"\u00a0 \u00a0 \u00a0 \u00a0 canaryDeployment:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 percentages: [25]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 verify: false---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: automation-quickstart-devdescription: Dev cluster to demonstrate deploy automationgke:\u00a0 cluster: projects/PROJECT_ID/locations/us-central1/clusters/automation-quickstart-cluster-dev---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: automation-quickstart-stagingdescription: Staging cluster to demonstrate deploy automationgke:\u00a0 cluster: projects/PROJECT_ID/locations/us-central1/clusters/automation-quickstart-cluster-staging---apiVersion: deploy.cloud.google.com/v1kind: Automationmetadata:\u00a0 name: my-automation-demo-app-1/promotedescription: promotes a releasesuspended: falseserviceAccount: PROJECT_NUMBER-compute@developer.gserviceaccount.comselector:- target:\u00a0 \u00a0 id: automation-quickstart-devrules:- promoteRelease:\u00a0 \u00a0 name: \"promote-release\"\u00a0 \u00a0 wait: 1m\u00a0 \u00a0 toTargetId: \"@next\"---apiVersion: deploy.cloud.google.com/v1kind: Automationmetadata:\u00a0 name: my-automation-demo-app-1/advancedescription: advances a rolloutsuspended: falseserviceAccount: PROJECT_NUMBER-compute@developer.gserviceaccount.comselector:- target:\u00a0 \u00a0 id: automation-quickstart-stagingrules:- advanceRollout:\u00a0 \u00a0 name: \"advance-rollout\"\u00a0 \u00a0 sourcePhases: [\"canary-25\"]\u00a0 \u00a0 wait: 1m\n```\n **Note:** In this file, the targets and the automations config are included with the delivery pipeline, but you can define targets in a separate file or multiple separate files, and automations in a separate file or files.\nIn the `deploy-automation-run-quickstart` directory, create a new file: `clouddeploy.yaml` , with the following contents:\n```\napiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0 name: my-automation-demo-app-1description: Automation demonstration pipelineserialPipeline:\u00a0 stages:\u00a0 - targetId: automation-quickstart-dev\u00a0 \u00a0 profiles: [dev]\u00a0 - targetId: automation-quickstart-staging\u00a0 \u00a0 profiles: [staging]\u00a0 \u00a0 strategy:\u00a0 \u00a0 \u00a0 canary:\u00a0 \u00a0 \u00a0 \u00a0 runtimeConfig:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cloudRun:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 automaticTrafficControl: true\u00a0 \u00a0 \u00a0 \u00a0 canaryDeployment:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 percentages: [25]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 verify: false---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: automation-quickstart-devdescription: Dev cluster to demonstrate deploy automationrun:\u00a0 location: projects/PROJECT_ID/locations/us-central1---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: automation-quickstart-stagingdescription: Staging cluster to demonstrate deploy automationrun:\u00a0 location: projects/PROJECT_ID/locations/us-central1---apiVersion: deploy.cloud.google.com/v1kind: Automationmetadata:\u00a0 name: my-automation-demo-app-1/promotedescription: Promotes a release to the next targetsuspended: falseserviceAccount: PROJECT_NUMBER-compute@developer.gserviceaccount.comselector:- target:\u00a0 \u00a0 id: automation-quickstart-devrules:- promoteRelease:\u00a0 \u00a0 name: \"promote-release\"\u00a0 \u00a0 wait: 1m\u00a0 \u00a0 toTargetId: \"@next\"---apiVersion: deploy.cloud.google.com/v1kind: Automationmetadata:\u00a0 name: my-automation-demo-app-1/advancedescription: advances a rolloutsuspended: falseserviceAccount: PROJECT_NUMBER-compute@developer.gserviceaccount.comselector:- target:\u00a0 \u00a0 id: automation-quickstart-stagingrules:- advanceRollout:\u00a0 \u00a0 name: \"advance-rollout\"\u00a0 \u00a0 sourcePhases: [\"canary-25\"]\u00a0 \u00a0 wait: 1m\n```\n **Note:** In this file, the targets and the automations config are included with the delivery pipeline, but you can define targets in a separate file or multiple separate files, and automations in a separate file or files.\n- Register your pipeline and targets with the Cloud Deploy service:```\ngcloud deploy apply --file=clouddeploy.yaml --region=us-central1 --project=PROJECT_ID\n```You now have a pipeline, with one multi-target comprising two GKE or Cloud Run targets, ready to deploy your application.\n- Confirm your pipeline and targets:In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view of list of your available delivery pipelines. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) The delivery pipeline you just created is shown, with two targets listed in the **Targets** column.\n- Click the pipeline name to open the delivery pipeline visualization and details.\n- Select the **Automations** tab, under **Delivery pipeline details** .The two automations you created are shown.\n## Create a releaseA release is the central Cloud Deploy resource representing the changes being deployed. The delivery pipeline defines the lifecycle of that release. See [Cloud Deploy service architecture](/deploy/docs/architecture#how_they_fit_together_to_deliver_your_release) for details about that lifecycle.\nRun the following command from the `deploy-automation-gke-quickstart` directory to create a `release` resource that represents the container image to deploy:\n```\n\u00a0gcloud deploy releases create test-release-001 \\\u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0--delivery-pipeline=my-automation-demo-app-1 \\\u00a0 \u00a0--images=my-app-image=gcr.io/google-containers/nginx@sha256:f49a843c290594dcf4d193535d1f4ba8af7d56cea2cf79d1e9554f077f1e7aaa\n```\nRun the following command from the `deploy-automation-run-quickstart` directory to create a `release` resource that represents the container image to deploy:\n```\n\u00a0gcloud deploy releases create test-release-001 \\\u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0--delivery-pipeline=my-automation-demo-app-1 \\\u00a0 \u00a0--images=my-app-image=us-docker.pkg.dev/cloudrun/container/hello@sha256:6063adf8f687702b4065151acddba6781c47bc602167eb9f3bec8aebc9ce95cc\n```By default, when you create a release, a rollout is created automatically for the first target in your pipeline.\nBecause this quickstart includes two automations, two things happen automatically:- After a successful deployment in the first target, the release is automatically promoted to the second target.There is a one-minute wait time on the promote automation.\n- In the second target, where there is a 25% canary configured, the second automation advances the rollout from `canary-25` to `stable` .For this first release, the `canary-25` phase is skipped, because there is no pre-existing version of the app to canary agains. And the rollout is automatically advanced to `stable` .There is a one-minute delay on the advance automation.\nWhen everything finishes, the application is deployed to successfully to both targets without you having to do anything further.\nIf you want to know more about running a canary deployment strategy, you can try the [canary quickstart](/deploy/docs/deploy-app-canary) .## View the results in Google Cloud consoleYou can view the results, including the automation runs, in the Google Cloud console.- Navigate to the Cloud Deploy **Delivery pipelines** page to view your delivery pipeline. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) \n- Click the name of your delivery pipeline \"my-automation-demo-app-1\".The pipeline visualization shows the app's deployment status. If enough time has elapsed, both targets will show green.And your release is listed on the **Releases** tab under **Delivery pipelinedetails** .\n- Click the **Automation runs** tab.There are two entries, one for each of the two automations you created. You can click either one to see the details of that automation run.\n## Clean upTo avoid incurring charges to your Google Cloud account for   the resources used on this page, follow these steps.- Delete the GKE clusters or Cloud Run services:\n```\ngcloud container clusters delete automation-quickstart-cluster-dev --region=us-central1 --project=PROJECT_ID \\&& gcloud container clusters delete automation-quickstart-cluster-staging --region=us-west1 --project=PROJECT_ID\n```\n```\ngcloud run services delete my-automation-run-service-dev --region=us-central1 --project=PROJECT_ID \\&& gcloud run services delete my-automation-run-service-staging --region=us-central1 --project=PROJECT_ID\n```\n- Delete the delivery pipeline, targets, automations, release, and rollouts:```\ngcloud deploy delete --file=clouddeploy.yaml --force --region=us-central1 --project=PROJECT_ID\n```\n- Delete the Cloud Storage buckets that Cloud Deploy created.One ends with `_clouddeploy` , and the other is `[region].deploy-artifacts.[project].appspot.com` . [Open the Cloud Storage browser page](https://console.cloud.google.com/storage/browser) \nThat's it, you completed this quickstart!## What's next\n- [Learn more about Cloud Deploy](/deploy/docs/overview) .\n- [Learn the basics of deploying applications](/deploy/docs/deploying-application) .\n- [Try out the Cloud Deploy walkthrough](https://shell.cloud.google.com/?show=ide%2Cterminal&walkthrough_id=deploy--cloud-deploy-e2e-gke) .\n- [Learn how to combine Google Cloud CI/CD tools to develop and deliversoftware effectively to GKE](https://cloud.google.com/architecture/app-development-and-delivery-with-cloud-code-gcb-cd-and-gke) .", "guide": "Cloud Deploy"}