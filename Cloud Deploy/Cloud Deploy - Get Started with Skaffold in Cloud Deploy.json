{"title": "Cloud Deploy - Get Started with Skaffold in Cloud Deploy", "url": "https://cloud.google.com/deploy/docs/using-skaffold/getting-started-skaffold", "abstract": "# Cloud Deploy - Get Started with Skaffold in Cloud Deploy\nThis document describes how to get started using [Skaffold](/skaffold) as part of Cloud Deploy, including the following:\n- Configuring Skaffold for use with a Cloud Deploy delivery pipeline\n- Using Skaffold and Cloud Deploy with third-party rendering tools, such as Helm and Kustomize\n- Optionally, using Skaffold for local development\n- Optionally, using Skaffold for continuous integration and continuous deployment (CI/CD)", "content": "## Why Skaffold?\nWant to know why Cloud Deploy uses Skaffold, and why you need to manage a Skaffold configuration? Read on.\n### I'm experienced with CI/CD, but I don't use Skaffold currently\nSkaffold is an open source command-line tool to improve productivity for developers. It orchestrates continuous development, continuous integration (CI), and continuous delivery (CD).\nSkaffold provides declarative, portable configuration, using a pluggable architecture, letting you use different tools for the render phase.\nWhen a release is created, Cloud Deploy calls Skaffold to render your manifests. At deploy time, Cloud Deploy calls Skaffold again to apply those manifests to deploy your application to each [target](/deploy/docs/terminology#target) in your [progression](/deploy/docs/terminology#progression) . After deployment, Skaffold performs health checks to monitor the target runtime for successful deployment.\n### Skaffold for continuous development\nWhen you use [Skaffold for continuous development](https://skaffold.dev/docs/workflows/dev/) , images are built, tested, and deployed to a cluster (or Minikube) as you change your code. [Cloud Code for VS Code](https://cloud.google.com/code/docs/vscode/running-an-application) and [Cloud Code for IntelliJ](https://cloud.google.com/code/docs/intellij/deploying-a-k8-app) IDE extensions integrate Skaffold into Visual Studio Code and JetBrains IDEs, for continuous development.\n### Skaffold for continuous delivery\nYou can also use [Skaffold for continuous delivery](https://skaffold.dev/docs/workflows/ci-cd/) , with build, deploy, render, and apply steps. Cloud Deploy uses Skaffold's [render and apply](https://skaffold.dev/docs/workflows/ci-cd/#separation-of-rendering-and-deployment) capabilities. To use Cloud Deploy, [you need at least a validskaffold.yaml configuration file](/deploy/docs/using-skaffold/getting-started-skaffold#whats_required_to_make_work) .\nThrough Skaffold, you can also integrate with third-party manifest-management tools, such as [Helm](https://helm.sh) , and [Kustomize](https://kustomize.io) . Using Skaffold in this way lets you use the features of those tools to render manifests. `kubectl` remains the for these manifests.\n### I'm new to deploying to Kubernetes\nWith Skaffold, you can configure a base set of manifests for all your deployments. You can then use Skaffold's rendering engine, through Cloud Deploy, to render, and then deploy, each deployment-specific manifest from one of those base manifests.\nRead more about [managing manifests](/deploy/docs/using-skaffold/managing-manifests) , including examples of using Skaffold and Cloud Deploy with common manifest-templating tools, such as Helm and Kustomize.\n## What's required to make Cloud Deploy work?\nTo use a basic Cloud Deploy delivery pipeline, the [skaffold.yaml](https://skaffold.dev/docs/references/yaml/) configuration file needs at least the following configuration:\n- The header information that all `skaffold.yaml` configurations need:```\napiVersion: skaffold/v4beta7kind: Config\n```\n- A `manifests` stanza, for GKE, GKE Enterprise, or Cloud Run listing all raw Kubernetes manifests (unless you're using a manifest-management tool, such as Helm or Kustomize).Here's an example using a raw Kubernetes manifest:```\nmanifests:\u00a0 rawYaml:\u00a0 - deployment.yaml\n```If you plan to use a renderer (like Helm or Kustomize) to render manifests, see [Add Helm support to your skaffold.yaml](#add_helm_support_to_your_skaffoldyaml) and [Add Kustomize support to your skaffold.yaml](#add_kustomize_support_to_your_skaffoldyaml) for guidance on how to configure Skaffold to use these tools.For Helm and Kustomize examples, see [Manage manifests](/deploy/docs/using-skaffold/managing-manifests) \n- A `deploy` stanza, with either `deploy.kubectl` , for deploying to GKE or to GKE Enterprise, or `deploy.cloudrun` for deploying to Cloud Run.For GKE and GKE Enterprise targets:```\ndeploy:\u00a0 kubectl: {}\n```The deploy stanza deploys the application manifests that were provided in the manifests stanza.For Cloud Run targets:```\ndeploy:\u00a0 cloudrun: {}\n```The deploy stanza deploys the application manifests provided in the manifests stanza.\nIf you're using [custom targets](/deploy/docs/custom-targets) , your `skaffold.yaml` must have the header ( `apiVersion` and `kind:` ), plus the [custom actions](/deploy/docs/create-custom-target#skaffold_define_action) that the custom target will use if the custom target type doesn't already reference a [remote Skaffold configuration](/deploy/docs/create-custom-target#remote_skaffold) .\n### Create a skaffold.yaml file\nCloud Deploy uses Skaffold for rendering and deploying your applications.\nFor each release, you need to provide at least a `skaffold.yaml` file that identifies the manifests to use. See the [previous section](/deploy/docs/using-skaffold/getting-started-skaffold#whats_required_to_make_work) for guidance about what needs to go in this file.\n**Note:** The Cloud Code plugins [for VS Code](/code/docs/vscode/install) and [for IntelliJ](https://cloud.google.com/code/docs/intellij/install#installing) help with schema validation, completion, and documentation when you're working in Skaffold configuration files.\n### Have Cloud Deploy generate your skaffold.yaml\nIf you don't have a `skaffold.yaml` file, but you do have a single Kubernetes manifest or a Cloud Run service definition file, Cloud Deploy can generate a `skaffold.yaml` file for you .\nThe generated Skaffold file will be available in the Cloud Storage source staging directory after the release is complete.\nThe following command includes the `--from-k8s-manifest` flag, passing the Kubernetes manifest. Cloud Deploy uses the information in the manifest to generate the `skaffold.yaml` , which is then used for the release.\n```\ngcloud deploy releases create \u00a0RELEASE_NAME --delivery-pipeline=PIPELINE_NAME --from-k8s-manifest=MANIFEST --region=REGION \n```\nTo generate the `skaffold.yaml` from a Cloud Run service YAML, use the same command, but with `--from-run-manifest` instead of `--from-k8s-manifest`\nUsing either of these flags with either the `--skaffold-file` flag or the `--source` flag generates an error.\n**Caution:** This generated `skaffold.yaml` file isn't suitable for production workloads.\n**Note:** Besides having Cloud Deploy generate the file for you, you can also have Skaffold generate it. See the [Skaffold documentation](https://skaffold.dev/docs/pipeline-stages/init/) for more information.\nThe generated `skaffold.yaml` is suitable for onboarding, learning, and demonstrating Cloud Deploy. After you're familiar with Cloud Deploy, and for production workloads, you might want a Skaffold configuration that differentiates among your targets (using [Skaffold profiles](#about_skaffold_profiles) ).\nWhen you use the generated `skaffold.yaml` file as a starting point to create your own differentiated Skaffold config, be sure you use the file in the rendering source archive, the rendered file. The rendering source is available to download from the **Artifacts** tab on the **Release details ** page.\n- This generated `skaffold.yaml` is included in the render source stored in a Cloud Storage bucket.You can view this file by downloading the `.tar.gz` file and extracting it.\n- The rendered `skaffold.yaml` is available in **Target artifacts** .In the **Target artifacts** section, click **View artifacts** .## Using Skaffold for local development\nOne of the strengths of Skaffold is that you can use it for [localdevelopment](https://skaffold.dev/docs/workflows/dev/) , and for CI/CD. In `dev` mode, Skaffold watches your source files, and when it detects a change, Skaffold rebuilds the images, retests, and redeploys the containers to a minikube cluster (for example) on your local machine.\nWhen using Skaffold in this way, you can use the same commands locally as for remote deployment.\nIf you use Skaffold for local development, you can define separate Skaffold profiles for your targets, and a default deploy stanza for local development.\nWhen you stop `dev` mode, Skaffold cleans up deployed artifacts from the cluster.\n## Using Skaffold for CI/CD\nBesides using Skaffold for continuous local build and deploy, you can use Skaffold for CI/CD. Cloud Deploy uses the CI/CD features in Skaffold to render and apply your manifests and deploy your application to your defined targets, given container images built using a CI tool like [Cloud Build](/build) and an image registry like [Artifact Registry](/artifact-registry) .\n### Render, deploy, and apply\nSkaffold separates the manifest rendering process from deployment. Cloud Deploy calls [skaffold render](https://skaffold.dev/docs/references/cli/#skaffold-render) , to render the manifests, and [skaffold apply](https://skaffold.dev/docs/references/cli/#skaffold-apply) to apply them to the [target](/deploy/docs/terminology#target) .\nThis separation between render and apply lets you capture the full declarative state of your application in configuration, so that it can be applied safely and repeatably (for example, for rollbacks). This technique also makes approvals easier. Because manifests are rendered for all targets before the first rollout, you can see the rendered YAML that will be applied to each target.\nCloud Deploy doesn't support using other deployers to deploy your application. You can, however, use tools like [Helm](https://helm.sh/) or [Kustomize](https://kustomize.io/) for rendering.\nTo learn more about how Cloud Deploy deploys using `kubectl` as the deployer, see [Cloud Deploy Service architecture](/deploy/docs/architecture#how_they_fit_together_to_deliver_your_release) .\n### About Skaffold profiles\nYou can create separate Skaffold [profiles](https://skaffold.dev/docs/environment/profiles/) \u2014identified in `skaffold.yaml` , in a `profiles:` stanza.\nWhen using Skaffold profiles with Cloud Deploy, you might create separate profiles for all, or some, of your targets. For example, different profiles for `dev` , `staging` , and `prod` .\nProfiles aren't necessary in order to use Skaffold in Cloud Deploy, but are useful for defining manifest customizations among your targets, for example using different Kustomize `kustomization.yaml` files per target.\n### Add Kustomize support to your skaffold.yaml\nIntegrating your Kustomize configuration with your Cloud Deploy/Skaffold configuration consists of the following:\n- Include a `kustomization.yaml` file among your configuration files.You can store your configuration files in a local directory or in a Cloud Storage bucket.\n- In your `skaffold.yaml` file, create a `deploy` stanza for each profile.You can also have a `deploy` stanza outside of any defined profiles, if you're not using profiles or for a default deploy configuration not tied to a profile.The following is an example Skaffold config that shows `deploy` stanzas per profile, and uses a fictional sample app called `my-app` :```\napiVersion: skaffold/v4beta7kind: Configbuild:\u00a0 artifacts:\u00a0 \u00a0 - image: my-app-web-profiles\u00a0 \u00a0 \u00a0 context: my-app-web-profiles\u00a0 \u00a0 - image: my-app-application-profiles\u00a0 \u00a0 \u00a0 context: my-app-application-profiles\u00a0 googleCloudBuild:\u00a0 \u00a0 projectId: ${PROJECT_ID}profiles:- name: local\u00a0 manifests:\u00a0 \u00a0 kustomize:\u00a0 \u00a0 \u00a0 paths:\u00a0 \u00a0 \u00a0 \u00a0 - my-app-application-profiles/kubernetes/local- name: test\u00a0 manifests:\u00a0 \u00a0 kustomize:\u00a0 \u00a0 \u00a0 paths:\u00a0 \u00a0 \u00a0 \u00a0 - my-app-application-profiles/kubernetes/test- name: staging\u00a0 manifests:\u00a0 \u00a0 kustomize:\u00a0 \u00a0 \u00a0 paths:\u00a0 \u00a0 \u00a0 \u00a0 - my-app-application-profiles/kubernetes/staging- name: prod\u00a0 manifests:\u00a0 \u00a0 kustomize:\u00a0 \u00a0 \u00a0 paths:\u00a0 \u00a0 \u00a0 \u00a0 - my-app-application-profiles/kubernetes/proddeploy:\u00a0 kubectl: {}\n```The Skaffold configuration shown here has separate profiles for `test` , `staging` , and `prod` targets. It also shows a profile for local development. In each profile, there's a `deploy.kustomize` stanza with a path that points to the location of the kustomization to use for that target.\n**Note:** although this configuration is in a `deploy` stanza, Skaffold uses it to the manifest for the intended target, not to deploy.\n### Add Helm support to your skaffold.yaml\nYou can use Helm to render your manifests. Cloud Deploy doesn't use Helm to deploy your applications, and supports only `kubectl` as a deployer.\nTo use Helm, you need your Helm chart or charts, stored in any location you can reference from within your `skaffold.yaml` . This location can be in a file system, a repository, possibly along with your `skaffold.yaml` , or an Open Container Initiative (OCI) repository.\nTo use a Helm chart, you add a `helm` stanza to your [skaffold.yaml](https://skaffold.dev/docs/references/yaml/) file.\n**Note:** You can also use Helm with Skaffold profiles.\n```\napiVersion: skaffold/v4beta7kind: Configbuild:\u00a0 artifacts:\u00a0 - image: skaffold-helm-imagemanifests:\u00a0 helm:\u00a0 \u00a0 releases:\u00a0 \u00a0 - name: skaffold-helm-image\u00a0 \u00a0 \u00a0 chartPath: chartsdeploy:\u00a0 kubectl: {}\n```\nThe [skaffold.yaml reference](https://skaffold.dev/docs/references/yaml/#deploy-helm) shows what's required in this `helm` stanza.\n## Unsupported Skaffold features\nThe following features of Skaffold can't be used in Cloud Deploy:\n- [Lifecycle hooks](https://skaffold.dev/docs/pipeline-stages/lifecycle-hooks/) \n- [Dynamic Skaffold modules](https://skaffold.dev/docs/design/config/#multiple-configuration-support) Using `--module=` to select specific modules for `build` , `render` , `apply` , and so on, is not supported. Static modules are supported.\n- In Helm, the ability to [create a namespace](https://helm.sh/docs/faq/changes_since_helm2/#automatically-creating-namespaces) if one doesn't exist.## What's next\n- Visit the [Skaffold site](https://skaffold.dev) to find out about how it works and what it can do for you.\n- [Practice](https://shell.cloud.google.com/?show=ide%2Cterminal&walkthrough_id=deploy--cloud-deploy-profiles-gke) using Cloud Deploy with Kustomize and Skaffold profiles.\n- [Learn how](/deploy/docs/using-skaffold/select-skaffold) Cloud Deploy selects the Skaffold version to use, when the Skaffold version changes, and how to determine which version is in use.\n- [Learn how](/deploy/docs/using-skaffold/managing-manifests) to use Skaffold profiles with advanced manifest-management tools like Helm, Kustomize, and kpt.", "guide": "Cloud Deploy"}