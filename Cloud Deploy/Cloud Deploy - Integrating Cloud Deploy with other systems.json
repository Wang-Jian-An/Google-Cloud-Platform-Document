{"title": "Cloud Deploy - Integrating Cloud Deploy with other systems", "url": "https://cloud.google.com/deploy/docs/integrating", "abstract": "# Cloud Deploy - Integrating Cloud Deploy with other systems\nYou can integrate Cloud Deploy with some of the other systems you rely on for software delivery. This page describes how to integrate Cloud Deploy with the following:\n- Test tooling\n- Workflow management\nSee [Integrating with your CI system](/deploy/docs/integrating-ci) to learn how to call Cloud Deploy from your CI pipeline.\n", "content": "## Before you begin\nThe instructions on this page assume you already meet the following conditions:\n- You have [enabled the applicable APIs](https://console.cloud.google.com/flows/enableapi?apiid=clouddeploy.googleapis.com,cloudbuild.googleapis.com,storage-component.googleapis.com,container.googleapis.com&redirect=https://cloud.google.com/deploy/docs/deploy-app-gke&_ga=2.88599711.504283000.1626992575-1788689322.1622287630) \n- You have at least one delivery pipeline [defined](/deploy/docs/config-file) and [registered](/deploy/docs/create-pipeline-targets#register_the_delivery_pipeline_and_targets) with Cloud Deploy.\n- You have at least one [target defined](/deploy/docs/config-files#target_definitions) , and your delivery pipeline references that target.\n- You have [set up Pub/Sub notifications](/deploy/docs/subscribe-deploy-notifications) to receive notifications from the following topics:- `clouddeploy-operations`\n- `clouddeploy-approvals`\n## Integrating with automated testing\nYou can use Cloud Deploy with Pub/Sub to integrate testing with your delivery pipeline, so you can promote the release automatically, for continuous delivery.\nYou can also use annotations on a rollout to provide a link to test results. For more information, see [Using labels and annotations with Cloud Deploy](/deploy/docs/labels-annotations) .\n### Using Pub/Sub to automate promotion\n- Listen to [Pub/Sub messages](/deploy/docs/subscribe-deploy-notifications) from the `clouddeploy-operations` topic.The message contains the following attributes:- `Action: SUCCEED`\n- `ResourceType: Rollout`\n- `Resource: projects/.../locations/.../deliveryPipelines/.../releases/.../rollouts/...`\n- When you receive a notification that deployment has succeeded, run your tests on your deployed application.\n- When your tests succeed, call Cloud Deploy to automatically promote to the next stage:```\ngcloud deploy releases promote RELEASE_NAME \\--delivery-pipeline=PIPELINE_NAME \\--region=REGION \\--annotations=KEY=VALUE,...\n```where:- is the name of the release. This value is required.\n- is the name of the delivery pipeline managing this release. This value is required.\n- is the region in which the pipeline is running. If you've set the property `deploy/region` , you can omit this flag.\n- is a list of one or more key-value string pairs, comma-separated, which can contain information about your test results and other testing information. Here's an example:`gcloud deploy releases promote --annotations=\"from_target=test,status=stable\"`Annotations on the rollout are immutable, so if you add a status annotation, you can't later update that status on the same rollout.\n### Using annotations to provide access to test results\nIf you have the URL pointing to where test results can be accessed, you can provide that URL as an annotation on a rollout, using the `--annotations` flag. Here's an example:\n```\ngcloud deploy releases promote --delivery-pipeline=my-demo-app-1 --region=us-central1 --project=my-demo-app-1-project --release=test-release-001 --annotations=\"test_results_url=https://example.com/results/my-demo-app-test-results-dev\"\n```\nFor more information, see [Using labels and annotations with Cloud Deploy](/deploy/docs/labels-annotations) .\n## Integrating with third-party workflow management\nCloud Deploy publishes operational messages to Pub/Sub. Your workflow management tool can subscribe to these Pub/Sub topics and use them to trigger specific workflows.\n### For approvals\nThe `clouddeploy-approvals` topic notifies your system when an approval is required for a rollout. Your external workflow system can then work its magic to get the approval, then call `gcloud deploy rollouts approve` .\nThe account that issues the `rollouts approve` command must have the predefined IAM role `roles/clouddeploy.approver` .\nTo set up an external approval workflow:\n- [Require approval on the target](/deploy/docs/promote-release#manage_approvals_for_a_delivery_pipeline) .In the definition for that target, include `requireApproval: true` .\n- To consume the messages, subscribe to the `clouddeploy-approvals` Pub/Sub topic, and set up your workflow management system.\n- When your workflow management system receives a message from the `clouddeploy-approvals` topic that includes `\"Action\": \"Required\"` , it kicks off an approval workflow, configured according to the requirements of your organization.The message also includes a reference to the rollout to be approved, in the following format:`Resource: projects/.../locations/.../deliveryPipelines/.../releases/.../rollouts/...`The output of the approval workflow is an [approval or rejection](/deploy/docs/promote-release#manage_approvals_for_a_delivery_pipeline) of the rollout.\n- Your workflow management system returns the approval or rejection to Cloud Deploy in the form of the following command:The command for approval is as follows:```\ngcloud deploy rollouts approve ROLLOUT \\--delivery-pipeline=PIPELINE_NAME \\--region=REGION \\--release=RELEASE_NAME\n```The command for rejecting the rollout is as follows:```\ngcloud deploy rollouts reject ROLLOUT \\--delivery-pipeline=PIPELINE_NAME \\--region=REGION \\--release=RELEASE_NAME\n```where:- is the name of the rollout for which approval was requested.\n- is the delivery pipeline managing deployment of your application.\n- is the name of the release with which this rollout is associated.\n- is the region in which the delivery pipeline is running.Here's an example:\n`gcloud deploy rollouts approve test-rollout --delivery-pipeline=web-app --release=test-release --region=us-central1`", "guide": "Cloud Deploy"}