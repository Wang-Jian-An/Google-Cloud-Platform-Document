{"title": "Cloud Deploy - Deploy an app to GKE using Cloud Deploy", "url": "https://cloud.google.com/deploy/docs/deploy-app-gke", "abstract": "# Cloud Deploy - Deploy an app to GKE using Cloud Deploy\n# Deploy an app to GKE using Cloud Deploy\nThis page shows you how to use Cloud Deploy to deliver a sample application image named `nginx` to a sequence of two Google Kubernetes Engine clusters.\nIn this quickstart, you'll do the following:- Create the two clusters.\n- Create a [Skaffold](/skaffold) configuration and a Kubernetes manifest to specify the (pre-built) container image to deploy.\n- Define your Cloud Deploy delivery pipeline and deployment [targets](/deploy/docs/terminology#target) , which point to the two clusters.\n- Instantiate your delivery pipeline by creating a release, which automatically deploys to the first target.\n- Promote the release to the second target.\n- View both rollouts in Google Cloud console.\n", "content": "## Before you begin- Make sure the [default Compute Engine service account](/deploy/docs/cloud-deploy-service-account#execution_service_account) has sufficient permissions.The service account might already have the necessary permissions. These steps  are included for projects that disable automatic role grants for default  service accounts.\n- Add the`clouddeploy.jobRunner`role:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/clouddeploy.jobRunner\"\n```\n- Add the Kubernetes developer permissions:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/container.developer\"\n```If you have trouble adding either of these roles, contact your project administrator.\n- Add the`iam.serviceAccountUser`role, which includes the`actAs`permission to deploy to the runtime:```\ngcloud iam service-accounts add-iam-policy-binding $(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/iam.serviceAccountUser\" \\\n --project=PROJECT_ID\n```## Create your Google Kubernetes Engine clustersCreate two clusters: `qsdev` and `qsprod` , with default settings. The clusters' Kubernetes API endpoints must be network-reachable from the public internet. GKE clusters are externally accessible by default.\n```\ngcloud container clusters create-auto quickstart-cluster-qsdev --project=PROJECT_ID --region=us-central1 && gcloud container clusters create-auto quickstart-cluster-qsprod --project=PROJECT_ID --region=us-central1\n```## Prepare your Skaffold configuration and Kubernetes manifestCloud Deploy uses [Skaffold](/deploy/docs/using-skaffold) to provide the details for what to deploy and how to deploy it properly for your separate [targets](/deploy/docs/terminology#target) .\nIn this quickstart, you create a `skaffold.yaml` file, which identifies the Kubernetes manifest to be used to deploy the sample app.- Open a terminal window.\n- Create a new directory, named `deploy-gke-quickstart` and navigate into it.```\nmkdir deploy-gke-quickstartcd deploy-gke-quickstart\n```\n- Create a file named `skaffold.yaml` with the following contents:```\napiVersion: skaffold/v4beta7kind: Configmanifests:\u00a0 rawYaml:\u00a0 - k8s-*deploy:\u00a0 kubectl: {}\n```This file is a minimal Skaffold config, identifying your manifest. For this quickstart, you create the file. But you can also [have Cloud Deploy create one for you](/deploy/docs/using-skaffold/getting-started-skaffold#have_generate_your_skaffoldyaml) , for simple, non-production applications.See the [skaffold.yaml reference](https://skaffold.dev/docs/references/yaml/) for more information about this file.\n- Create a file named `k8s-pod.yaml` , with the following contents:```\napiVersion: v1kind: Podmetadata:\u00a0 name: getting-startedspec:\u00a0 containers:\u00a0 - name: nginx\u00a0 \u00a0 image: my-app-image\n```This file is a simple Kubernetes [manifest](https://kubernetes.io/docs/reference/glossary/?fundamental=true#term-manifest) , which is applied to the cluster to deploy the application.\n **Note:** If you want to use different manifests per target, read [this articleabout managing manifests](/deploy/docs/using-skaffold/managing-manifests) to find out more about using Skaffold profiles.## Create your delivery pipeline and targetsYou can define your pipeline and targets in one file or in separate files. In this quickstart, you create a single file.- In the `deploy-gke-quickstart` directory, create a new file: `clouddeploy.yaml` , with the following contents:```\napiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0 name: my-gke-demo-app-1description: main application pipelineserialPipeline:\u00a0 stages:\u00a0 - targetId: qsdev\u00a0 \u00a0 profiles: []\u00a0 - targetId: qsprod\u00a0 \u00a0 profiles: []---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: qsdevdescription: development clustergke:\u00a0 cluster: projects/PROJECT_ID/locations/us-central1/clusters/quickstart-cluster-qsdev---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: qsproddescription: production clustergke:\u00a0 cluster: projects/PROJECT_ID/locations/us-central1/clusters/quickstart-cluster-qsprod\n```\n- Register your pipeline and targets with the Cloud Deploy service:```\ngcloud deploy apply --file=clouddeploy.yaml --region=us-central1 --project=PROJECT_ID\n```You now have a pipeline, with targets, ready to deploy your application to your first target.\n- Confirm your pipeline and targets:In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view of list of your available delivery pipelines. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) The delivery pipeline you just created is shown, and the two targets are listed in the **Targets** column.\n## Create a releaseA release is the central Cloud Deploy resource representing the changes being deployed. The delivery pipeline defines the lifecycle of that release. See [Cloud Deploy service architecture](/deploy/docs/architecture#how_they_fit_together_to_deliver_your_release) for details about that lifecycle.\nRun the following command from the `deploy-gke-quickstart` directory to create a `release` resource that represents the container image to deploy:\n```\ngcloud deploy releases create test-release-001 \\\u00a0 --project=PROJECT_ID \\\u00a0 --region=us-central1 \\\u00a0 --delivery-pipeline=my-gke-demo-app-1 \\\u00a0 --images=my-app-image=gcr.io/google-containers/nginx@sha256:f49a843c290594dcf4d193535d1f4ba8af7d56cea2cf79d1e9554f077f1e7aaa\n```\nAs with all releases (unless they include `--disable-initial-rollout` ), Cloud Deploy automatically creates a [rollout](/deploy/docs/terminology#rollout) resource too. The application is automatically deployed into the first target in the progression.## Promote the release **Note:** after you create the release, you might need wait a few minutes before you continue with this step.- From the **Delivery pipelines** page, click the `my-gke-demo-app-1` pipeline. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) The Delivery pipeline details page shows a graphical representation of your delivery pipeline's progress. In this case, it shows that the release was deployed to the `qsdev` target.\n- On the first target in the delivery pipeline visualization, click **Promote** .The **Promote release** dialog is shown. It shows the details of the target you're promoting to.\n- Click **Promote** .The release is now queued for deployment into `qsprod` . When deployment is complete, the delivery pipeline visualization shows it as deployed:\n## View the results in Google Cloud console\n- In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view your **my-gke-demo-app-1** delivery pipeline. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) \n- Click the name of your delivery pipeline \"my-gke-demo-app-1\".The pipeline visualization shows the app's progress through the pipeline.And your release is listed on the **Releases** tab under **Delivery pipelinedetails** .\n- Click the release name, `test-release-001` .Your rollouts appear under **Rollouts** . You can click a rollout to view its details, including the deployment log.\n## Clean upTo avoid incurring charges to your Google Cloud account for   the resources used on this page, follow these steps.- Delete the `qsdev` cluster:```\ngcloud container clusters delete quickstart-cluster-qsdev --region=us-central1 --project=PROJECT_ID\n```\n- Delete the `qsprod` cluster:```\ngcloud container clusters delete quickstart-cluster-qsprod --region=us-central1 --project=PROJECT_ID\n```\n- Delete the delivery pipeline, targets, release and rollouts:```\ngcloud deploy delete --file=clouddeploy.yaml --force --region=us-central1 --project=PROJECT_ID\n```\n- Delete the Cloud Storage buckets that Cloud Deploy created.One ends with `_clouddeploy` , and the other is `[region].deploy-artifacts.[project].appspot.com` . [Open the Cloud Storage browser page](https://console.cloud.google.com/storage/browser) \nThat's it, you completed this quickstart!## What's next\n- [Learn more about Cloud Deploy](/deploy/docs/overview) .\n- [Learn the basics of deploying applications](/deploy/docs/deploying-application) .\n- [Try out the Cloud Deploy walkthrough](https://shell.cloud.google.com/?show=ide%2Cterminal&walkthrough_id=deploy--cloud-deploy-e2e-gke) .\n- Learn how to [manage your manifests](/deploy/docs/skaffold) .\n- [Learn how to combine Google Cloud CI/CD tools to develop and deliversoftware effectively to GKE](https://cloud.google.com/architecture/app-development-and-delivery-with-cloud-code-gcb-cd-and-gke) .", "guide": "Cloud Deploy"}