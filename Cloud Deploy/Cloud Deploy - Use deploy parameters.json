{"title": "Cloud Deploy - Use deploy parameters", "url": "https://cloud.google.com/deploy/docs/deploy-app-parameters", "abstract": "# Cloud Deploy - Use deploy parameters\n# Use deploy parameters\nThis page shows you how to use Cloud Deploy to deliver a sample application to two [targets](/deploy/docs/terminology#target) at the same time (a [paralleldeployment](/deploy/docs/parallel) ), while passing a different parameter value to each rendered manifest or service definition, using three different methods.\nIn this quickstart, you'll do the following:- Create two GKE clusters or two Cloud Run services.You can use GKE Enterprise clusters too, but this quickstart uses GKE and Cloud Run only.\n- Create a [Skaffold](/skaffold) configuration and either a Kubernetes manifest or a Cloud Run service definition.The manifest or service definition will be the same for both [child targets](/deploy/docs/terminology#child_target) , but at deploy time the rendered manifest or service definition for each child target will have different values for the specific parameters configured in this quickstart.\n- Define your Cloud Deploy delivery pipeline and deployment targets.This pipeline will have one [multi-target](/deploy/docs/terminology#multi-target) , referencing two [child targets](/deploy/docs/terminology#child_target) , to deliver your app to the two clusters or two services.\n- Define [deploy parameters](/deploy/docs/parameters) in three different places:- In the pipeline progression\n- On the child targets\n- On the command line, when creating the release\n- Instantiate your delivery pipeline by creating a release, which automatically deploys to the two targets in parallel.\n- View the \"controller rollout\" and child rollouts in Google Cloud console.\n", "content": "## Before you begin- If you already have the CLI installed, make sure you're running the latest version:\n- ```\ngcloud components update\n```\n- Make sure the [default Compute Engine service account](/deploy/docs/cloud-deploy-service-account#execution_service_account) has sufficient permissions.The service account might already have the necessary permissions. These steps are included for projects that disable automatic role grants for default service accounts.- First add the`clouddeploy.jobRunner`role:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/clouddeploy.jobRunner\"\n```\n- Add the developer role for your specific runtime.\n- For GKE:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/container.developer\"\n```\n- For Cloud Run:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/run.developer\"\n```\n- Add the`iam.serviceAccountUser`role, which includes the`actAs`permission to deploy to the runtime:```\ngcloud iam service-accounts add-iam-policy-binding $(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/iam.serviceAccountUser\" \\\n --project=PROJECT_ID\n```\n## Create your runtime environments **If you're deploying to Cloud Run, you can skip this command** .\nFor GKE, create two clusters: `deploy-params-cluster-prod1` and `deploy-params-cluster-prod2` , with default settings. The clusters' Kubernetes API endpoints must be network-reachable from the public internet. GKE clusters are externally accessible by default.\n```\ngcloud container clusters create-auto deploy-params-cluster-prod1 \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0&& gcloud container clusters create-auto deploy-params-cluster-prod2 \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--region=us-west1\n```## Prepare your Skaffold configuration and manifestsCloud Deploy uses [Skaffold](/deploy/docs/using-skaffold) to provide the details for what to deploy and how to deploy it properly for your separate [targets](/deploy/docs/terminology#target) .\nIn this quickstart, you create a `skaffold.yaml` file, which identifies the Kubernetes manifest or Cloud Run service definition to be used to deploy the sample app.- Open a terminal window.\n- Create a new directory and navigate into it.\n```\nmkdir deploy-params-gke-quickstartcd deploy-params-gke-quickstart\n```\n```\nmkdir deploy-params-run-quickstartcd deploy-params-run-quickstart\n```\n- Create a file named `skaffold.yaml` with the following contents:\n```\napiVersion: skaffold/v4beta7kind: Configmanifests:\u00a0 rawYaml:\u00a0 - kubernetes.yamldeploy:\u00a0 kubectl: {}\n```\n```\napiVersion: skaffold/v4beta7kind: Configmanifests:\u00a0 rawYaml:\u00a0 - service.yamldeploy:\u00a0 cloudrun: {}\n```\nThis file is a minimal Skaffold config. For this quickstart, you create the file. But you can also [have Cloud Deploy create one for you](/deploy/docs/using-skaffold/getting-started-skaffold#have_generate_your_skaffoldyaml) , for simple, non-production applications.See the [skaffold.yaml reference](https://skaffold.dev/docs/references/yaml/) for more information about this file.\n- Create the definition for your application\u2014a service definition for Cloud Run or a Kubernetes manifest for GKE.\nCreate a file named `kubernetes.yaml` , with the following contents:\n```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: my-deploymentspec:\u00a0 replicas: 1 # from-param: ${replicaCount}\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: my-app\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: my-app\u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 \u00a0 commit: defaultShaValue # from-param: ${git-sha}\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: nginx\u00a0 \u00a0 \u00a0 \u00a0 image: my-app-image\u00a0 \u00a0 \u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 \u00a0 - name: envvar1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: default1 # from-param: ${application_env1}\u00a0 \u00a0 \u00a0 \u00a0 - name: envvar2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: default2 # from-param: ${application_env2}\n```\nThis file is a simple Kubernetes [manifest](https://kubernetes.io/docs/reference/glossary/?fundamental=true#term-manifest) , which is applied to the cluster to deploy the application.\nCreate a file named `service.yaml` , with the following contents:\n```\napiVersion: serving.knative.dev/v1kind: Servicemetadata:\u00a0 name: my-parallel-run-servicespec:\u00a0 autoscaling.knative.dev/minScale: 1 # from-param: ${minInstances}\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: my-app\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 \u00a0 commit: defaultShaValue # from-param: ${git-sha}\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - image: my-app-image\u00a0 \u00a0 \u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 \u00a0 - name: envvar1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: defaultValue1 # from-param: ${application_env1}\u00a0 \u00a0 \u00a0 \u00a0 - name: envvar2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: defaultValue2 # from-param: ${application_env2}\n```\nThis file is a simple Cloud Run service definition, which is used at deploy time to create your Cloud Run service. **Note:** If you want to use different manifests per target, read [this articleabout managing manifests](/deploy/docs/using-skaffold/managing-manifests) to find out more about using Skaffold profiles.## Create your delivery pipeline and targetsYou can define your pipeline and targets in one file or in separate files. In this quickstart, we create a single file.- Create your delivery pipeline and target definition:\nIn the `deploy-params-gke-quickstart` directory, create a new file: `clouddeploy.yaml` , with the following contents:\n```\napiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0 name: my-params-demo-app-1description: main application pipelineserialPipeline:\u00a0 stages:\u00a0 - targetId: params-prod-multi\u00a0 \u00a0 deployParameters:\u00a0 \u00a0 - values:\u00a0 \u00a0 \u00a0 \u00a0 replicaCount: \"2\"\u00a0 \u00a0 \u00a0 matchTargetLabels:\u00a0 \u00a0 \u00a0 \u00a0 label1: label1\u00a0 \u00a0 - values:\u00a0 \u00a0 \u00a0 \u00a0 replicaCount: \"3\"\u00a0 \u00a0 \u00a0 matchTargetLabels:\u00a0 \u00a0 \u00a0 \u00a0 label2: label2---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: params-prod-multidescription: production clustersmultiTarget:\u00a0 targetIds: [params-prod-a, params-prod-b]---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: params-prod-a\u00a0 labels:\u00a0 \u00a0 label1: label1description: production cluster 1deployParameters:\u00a0 application_env1: \"sampleValue1\"gke:\u00a0 cluster: projects/PROJECT_ID/locations/us-central1/clusters/deploy-params-cluster-prod1---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: params-prod-b\u00a0 labels:\u00a0 \u00a0 label2: label2description: production cluster 2deployParameters:\u00a0 application_env2: \"sampleValue2\"gke:\u00a0 cluster: projects/PROJECT_ID/locations/us-west1/clusters/deploy-params-cluster-prod2\n```\n **Note:** In this file, targets are included with the delivery pipeline, but you can define targets in a separate file or multiple separate files.\nIn the `deploy-params-run-quickstart` directory, create a new file: `clouddeploy.yaml` , with the following contents:\n```\napiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0 name: my-params-demo-app-1description: main application pipelineserialPipeline:\u00a0 stages:\u00a0 - targetId: params-prod-multi\u00a0 \u00a0 deployParameters:\u00a0 \u00a0 - values:\u00a0 \u00a0 \u00a0 \u00a0 minInstances: \"2\"\u00a0 \u00a0 \u00a0 matchTargetLabels:\u00a0 \u00a0 \u00a0 \u00a0 label1: label1\u00a0 \u00a0 - values:\u00a0 \u00a0 \u00a0 \u00a0 minInstances: \"3\"\u00a0 \u00a0 \u00a0 matchTargetLabels:\u00a0 \u00a0 \u00a0 \u00a0 label2: label2---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: params-prod-multidescription: production clustersmultiTarget:\u00a0 targetIds: [params-prod-a, params-prod-b]---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: params-prod-a\u00a0 labels:\u00a0 \u00a0 label1: label1description: production cluster 1deployParameters:\u00a0 application_env1: \"sampleValue1\"run:\u00a0 location: projects/PROJECT_ID/locations/us-central1---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: params-prod-b\u00a0 labels:\u00a0 \u00a0 label2: label2description: production cluster 2deployParameters:\u00a0 application_env2: \"sampleValue2\"run:\u00a0 location: projects/PROJECT_ID/locations/us-west1\n```\n **Note:** In this file, targets are included with the delivery pipeline, but you can define targets in a separate file or multiple separate files.\n- Register your pipeline and targets with the Cloud Deploy service:```\ngcloud deploy apply --file=clouddeploy.yaml --region=us-central1 --project=PROJECT_ID \n```You now have a pipeline, with one multi-target comprising two GKE or Cloud Run targets, ready to deploy your application.\n- Confirm your pipeline and targets:In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view of list of your available delivery pipelines. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) The delivery pipeline you just created is shown. Notice that there is one target listed in the **Targets** column even though you configured three targets (one multi-target and two child targets) in your `clouddeploy.yaml` file.Notice that the only target listed is the multi-target `params-prod-multi` . Child targets are not shown.\n## Create a releaseA release is the central Cloud Deploy resource representing the changes being deployed. The delivery pipeline defines the lifecycle of that release. See [Cloud Deploy service architecture](/deploy/docs/architecture#how_they_fit_together_to_deliver_your_release) for details about that lifecycle.\nRun the following command from the `deploy-gke-parallel-quickstart` directory to create a `release` resource that represents the container image to deploy:\n```\n\u00a0gcloud deploy releases create test-release-001 \\\u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0--delivery-pipeline=my-params-demo-app-1 \\\u00a0 \u00a0--images=my-app-image=gcr.io/google-containers/nginx@sha256:f49a843c290594dcf4d193535d1f4ba8af7d56cea2cf79d1e9554f077f1e7aaa \\\u00a0 \u00a0--deploy-parameters=\"git-sha=f787cac\"\n```\nRun the following command from the `deploy-run-parallel-quickstart` directory to create a `release` resource that represents the container image to deploy:\n```\n\u00a0gcloud deploy releases create test-release-001 \\\u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0--delivery-pipeline=my-params-demo-app-1 \\\u00a0 \u00a0--images=my-app-image=us-docker.pkg.dev/cloudrun/container/hello@sha256:6063adf8f687702b4065151acddba6781c47bc602167eb9f3bec8aebc9ce95cc \\\u00a0 \u00a0--deploy-parameters=\"git-sha=f787cac\"\n```As always, when you create a release, a rollout is created automatically for the first target in your pipeline (or, as in this case, a specific target specified using `--to-target=` ). In this quickstart, this target is a multi-target, so the [rollout](/deploy/docs/terminology#rollout) is a \"controller rollout\" for two child targets, and there are no subsequent targets in the delivery pipeline. This means that your application is deployed everywhere upon rollout creation.## View the results in Google Cloud consoleNow that you've created the release, and the controller rollout and child rollouts are created, those child rollouts are now deployed (or are in the process of being deployed) to their respective GKE clusters or Cloud Run services.- In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view your **my-parallel-demo-app-1** delivery pipeline. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) \n- Click the name of your delivery pipeline \"my-parallel-demo-app-1\".The pipeline visualization shows the app's deployment status. Because there's only one stage in the pipeline, the visualization shows only one node.And your release is listed on the **Releases** tab under **Delivery pipelinedetails** .\n- Click the release name, `test-release-001` .Your rollouts appear under **Rollouts** . You can click a rollout to view its details, including the deployment log.\n- Under **Release details** , select the **Artifacts** tab.The **Deploy parameters** table lists all the parameters you configured in your manifest and the values you provided for those parameters:\nIn addition to the parameters and values, the table shows which target each parameter applies to.\n- In the column, click on for either target.\n- Click **Show diff** , then select `params-prod-a` for one target, and `params-prod-b` for the other.A diff is shown, comparing the rendered manifests of the two targets, including the values you specified:## Clean upTo avoid incurring charges to your Google Cloud account for   the resources used on this page, follow these steps.- Delete the GKE clusters or Cloud Run services:\n```\ngcloud container clusters delete deploy-params-cluster-prod1 --region=us-central1 --project=PROJECT_ID \\&& gcloud container clusters delete deploy-params-cluster-prod2 --region=us-west1 --project=PROJECT_ID\n```\n```\ngcloud run services delete my-parallel-run-service --region=us-central1 --project=PROJECT_ID \\&& gcloud run services delete my-parallel-run-service --region=us-west1 --project=PROJECT_ID\n```\n- Delete the delivery pipeline, multi-target, child targets, release, and rollouts:```\ngcloud deploy delete --file=clouddeploy.yaml --force --region=us-central1 --project=PROJECT_ID\n```\n- Delete the Cloud Storage buckets that Cloud Deploy created.One ends with `_clouddeploy` , and the other is `[region].deploy-artifacts.[project].appspot.com` . [Open the Cloud Storage browser page](https://console.cloud.google.com/storage/browser) \nThat's it, you completed this quickstart!## What's next\n- Learn more about [using deploy parameters](/deploy/docs/parameters) .\n- [Read more](/deploy/docs/parallel) about how to deploy to multiple targets at the same time.\n- [Learn more about Cloud Deploy](/deploy/docs/overview) .\n- [Learn the basics of deploying applications](/deploy/docs/deploying-application) .\n- [Try out the Cloud Deploy walkthrough](https://shell.cloud.google.com/?show=ide%2Cterminal&walkthrough_id=deploy--cloud-deploy-e2e-gke) .\n- Learn how to [manage your manifests](/deploy/docs/skaffold) .\n- [Learn how to combine Google Cloud CI/CD tools to develop and deliversoftware effectively to GKE](https://cloud.google.com/architecture/app-development-and-delivery-with-cloud-code-gcb-cd-and-gke) .", "guide": "Cloud Deploy"}