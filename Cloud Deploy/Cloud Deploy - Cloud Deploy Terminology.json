{"title": "Cloud Deploy - Cloud Deploy Terminology", "url": "https://cloud.google.com/deploy/docs/terminology", "abstract": "# Cloud Deploy - Cloud Deploy Terminology\nThe terms in this document are defined according to how they're used in Cloud Deploy.\n", "content": "## Abandon\nTo [permanently deactivate a release](/deploy/docs/abandon-release) .\n## Application\nThe software you are going to deploy using Cloud Deploy.\n## Application delivery\nDelivery of the assets necessary to deploy an application into an intended [target](#target) environment. In Cloud Deploy, application delivery consists of generating, promoting, and delivering your [application](#application) 's Kubernetes manifests into the cluster.\n## Artifact\nThe container images to be deployed (build artifacts), and configuration files, such as manifests and Skaffold configs, that are used for the deployment ( [target artifacts](#target_artifacts) ).\n## Automation\nAutomation lets you configure your delivery pipeline and targets so that some actions can be performed on releases and rollouts for that pipeline, without requiring human intervention. For example, you can set up your delivery pipeline so that promotion into a specific target happens automatically, under the right circumstances. [Learn more](/deploy/docs/automation) .\n## Automation rule\nThe behavior of an [automation](/deploy/docs/automation) is defined in part by the automation rule. An automation rule defines what is automated, for example, promoting a release.\nThe available automation rules are listed in the document [Using automation rules](/deploy/docs/automation-rules) .\n## Automation run\nAn instance of an [Automation](#automation) .\n## Canary deployment\nA deployment strategy in which you roll out your changes to a subset of users first, test it to ensure reliability, then roll it out fully.\n## Child rollout\nFor [Parallel deployment](#parallel_deployment) , the rollout generated to deploy to a [child target](#child_target) .\nSee also, [Controller rollout](#controller_rollout) .\n## Child target\nFor [Parallel deployment](#parallel_deployment) , a target that represents one of the multiple GKE, GKE Enterprise, or Cloud Run individual targets you're deploying to simultaneously.\nSee also, [Multi-target](#multi_target) , [Parallel deployment](#parallel_deployment) , [Child rollout](#child_rollout) .\n## Continuous delivery\nA software engineering [practice](/solutions/devops/devops-tech-continuous-delivery) in which changes can be released to users safely, frequently, and mostly automatically.\n## Continuous deployment\nA software engineering practice that results in changes to code and configuration being deployed automatically.\nWhereas continuous requires manual approval at one or more stages, continuous deployment is automatic, with no manual approval required.\n## Controller rollout\nA rollout generated for [parallel deployment](#parallel_deployment) . The controller rollout isn't used to deploy to a single target cluster or service; rather, it has one [child rollout](#child_rollout) for each [child target](#child_target) .\nSee also, [Parallel deployment](#parallel_deployment) , [Multi-target](#multi_-_target) .\n## Custom target\nA target that uses a user-defined [custom target type](/deploy/docs/custom-targets) rather than one of the [supported target types](/deploy/docs/create-pipeline-targets#define_the_delivery_pipeline_and_targets) .\n## Declarative\nConfiguration for a system, such as a Kubernetes cluster, that describes the intended state and relies on that system to achieve that state. Contrast with imperative configuration, in which you describe the specific steps to achieve that state.\nBesides rendering and deploying declarative Kubernetes manifests, Cloud Deploy uses declarative resource definitions to define the rendering and delivery process. `skaffold.yaml` and `clouddeploy.yaml` are typical filenames for the Skaffold definition and delivery-pipeline definition.\n## Delivery pipeline\nA representation of the workflow that delivers an application to each target in a [deployment progression](#progression) .\nDocumentation for Cloud Deploy uses the term \" pipeline\" to distinguish it from other pipelines you might use, such as a CI pipeline.\nIn Cloud Deploy, the delivery pipeline is defined in a YAML configuration file\u2014typically `clouddeploy.yaml` \u2014and that definition consists of the following:\n- Deployment [targets](#target) \n- The promotion sequence among those targets\n**Note:** you can define targets in a separate file.\nSee also [Pipeline instance](#pipeline_instance) .\n## Deploy hook\nAn arbitrary [action](/deploy/docs/hooks#configure_in_skaffold) you can run before or after deploying. [Learn more](/deploy/docs/hooks) .\n## Deploy parameters\nPlaceholders that can be added to a manifest but that are not resolved as part of rendering. Instead, values for these placeholders are assigned after each target-specific manifest is rendered. [Learn more](/deploy/docs/parameters) .\n## Deployment strategy\nA technique for safely deploying changes to your application while minimizing impact to users.\n## Execution environment\nA set of Google Cloud resources on which Cloud Deploy runs. It consists of the following:\n- The default or private [worker pool](/build/docs/private-pools/private-pools-overview) in which Cloud Deploy executes rendering and deploying actions\n- The default or alternate [execution environment](/deploy/docs/execution-environment) service account that calls Cloud Deploy to perform rendering and deploying\n- The default or alternate storage location for rendered manifests in Cloud Storage.## Hydrating\nSee [Render](#render) .\n## Job\nA specific operation to be performed on a rollout, such as deploy or verify. [Learn more](/deploy/docs/verify-deployment) .\n## Job run\nA child resource of a rollout, the job run is an instance of a job. That is, it represents an attempt to perform a job such as deploy or verify. [Learn more](/deploy/docs/verify-deployment) .\n## Manifest\nA Kubernetes configuration object that is used to create, modify, and delete Kubernetes resources such as pods, deployments, services, or ingresses.\nManifests in Cloud Deploy exist in one of two states: rendered or unrendered. An unrendered manifest is not ready for deployment into a target. The rendering process, which includes populating specific values into the manifest, is often performed by tools like Helm, Kustomize, and kpt. Cloud Deploy uses Skaffold to orchestrate the rendering of configuration (the [skaffold render](https://skaffold.dev/docs/workflows/ci-cd/#separation-of-rendering-and-deployment) command).\nSee also, [Render](#render) .\n## Multi-target\nWhen configuring or performing a parallel deployment, a multi-target is a single pipeline stage, but can comprise more than one target runtime.\nSee also, [Child target](#child_target) , [Parallel deployment](#parallel_deployment) , [Controller rollout](#controller_rollout) .\n## Parallel deployment\nThe practice of deploying an application to more than one target at the same time, in the same delivery pipeline stage. This technique allows you to deploy to multiple clusters or services in production, for example.\n## Phase\nThe collection of operations (jobs) in a rollout that are logically grouped together, for example a deploy or a deploy and verify. [Learn more](/deploy/docs/verify-deployment) .\n## Pipeline\nSee [Delivery pipeline](#delivery_pipeline)\n## Pipeline instance\nA snapshot of a delivery pipeline, taken when a `release` is created. Cloud Deploy keeps this snapshot to ensure that all deployments of a release are consistently managed using the pipeline as it was defined when the `release` was created.\nSee [Pipeline instances per release](/deploy/docs/pipeline-instances) for more information.\n## Pipeline mismatch\nWhen a delivery pipeline or target is changed after a release is created, the [pipeline instance](#pipeline_instance) associated with the `release` is now different from the pipeline definition.\nIf there's a pipeline mismatch, Cloud Deploy prompts you to examine the definitions before you promote a release or attempt a rollback.\nSee [Pipeline instances per release](/deploy/docs/pipeline-instances) for more information.\n## Progression\nA configuration, in your delivery pipeline configuration file, that describes a promotion sequence from one target to another\u2014for example from `test` to `staging` to `prod` .\n## Promotion\nThe process of advancing a release from one target to another, according to the [progression](#progression) defined in the delivery pipeline.\n## Register\nTo provide an application to the Cloud Deploy service, in the form of a delivery pipeline, so that the application's delivery is managed by the service.\n## Release\nA Cloud Deploy resource that represents the changes (code, configuration or both) to be deployed.\nThe release lifecycle is described in the document [Cloud Deployservice architecture](/deploy/docs/architecture#how_they_fit_together_to_deliver_your_release) .\n## Render\nTo prepare a manifest for deployment in the target. Rendering a manifest consists mainly of providing values for the variables in the manifest. Cloud Deploy does this using [skaffold render](https://skaffold.dev/docs/workflows/ci-cd/#separation-of-rendering-and-deployment) .\nThis doesn't include populating values for [deploy parameters](/deploy/docs/parameters)\n## Rollout\nA resource that associates a [release](#release) with a deployment [target](#target) . A `rollout` is created per release per target, so in a simple progression across three targets in a delivery pipeline, there would be three `rollout` resources for the release\u2014one for each target.\nFor more complex deployments, for example using a canary deployment strategy, a `rollout` can be more complicated. [Learn more](/deploy/docs/deployment-strategies#structure_of_a_rollout) .\n## Standard deployment strategy\nThe standard deployment strategy is the default way of deploying an application to a target. For each stage defined in the delivery pipeline, your application is deployed fully to the target, each time replacing the application as it was previously deployed.\n## Stage\nOne target or multi-target in a delivery pipeline. For example, in a simple delivery pipeline that has the following stages:\n- `dev`\n- `staging`\n- `prod`\nEach of those is one stage.\nWhen performing [parallel deployment](#parallel_deployment) , the [multi-target](/deploy/docs/parallel) is a single stage, but the [child targets](#child_target) are not separate stages.\n## Suspend (a delivery pipeline)\nTo prevent creation and promotion of releases from a given delivery pipeline. For more information, see [Suspending a delivery pipeline](/deploy/docs/suspend-pipeline)\n## Target\nThe specific runtime environment (Kubernetes cluster, Cloud Run service, or other supported runtime) into which to deploy the application. Also, the configuration for that environment.\nYou can define your targets in your [delivery pipeline](#delivery_pipeline) configuration file, or in a separate file.\nA target can also be a [multi-target](#multi-target) or a [child target](#child_target) to support [parallel deployment](#parallel_deployment) .\n## Target artifact\nA configuration file used for rendering and deploying an application on a target. These include Kubernetes manifest or Cloud Run service definition, Skaffold configuration files, and the rendering source used to create these.\n## Verification\nThe ability to confirm that a deployment was successful, by running an arbitrary container, with tests. [Learn more about deployment verification](/deploy/docs/verify-deployment) .", "guide": "Cloud Deploy"}