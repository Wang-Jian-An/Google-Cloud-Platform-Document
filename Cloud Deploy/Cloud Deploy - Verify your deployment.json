{"title": "Cloud Deploy - Verify your deployment", "url": "https://cloud.google.com/deploy/docs/verify-deployment", "abstract": "# Cloud Deploy - Verify your deployment\nThis document describes how to verify a Cloud Deploy deployment.\nYou can configure Cloud Deploy and Skaffold to verify that an application that you have deployed to any target is working correctly. Verification is done using your own testing image, and you configure Cloud Deploy and Skaffold to run those tests after deployment finishes.\nBy default, deployment verification runs in the Cloud Deploy [execution environment](/deploy/docs/execution-environment#changing_the_execution_environment) , but you can also [configure it to run on the same cluster](#run_the_verification_container_on_the_application_cluster) where the application is running.\n", "content": "## How does deployment verification work?\n- You [configure](#configure_skaffold) Skaffold for verification.This configuration identifies the container image or images to use to run tests, and the specific commands (script, for example) to run from that container image.\n- You [configure](#configure_pipeline) one or more targets in your delivery pipeline for deployment verification.This configuration verification for workloads deployed to that target.\n- After a rollout is deployed ( `skaffold apply` ), Cloud Deploy runs the [skaffold verify](https://skaffold.dev/docs/references/cli/#skaffold-verify) command in the Cloud Deploy execution environment.For deployments to Google Kubernetes Engine and GKE Enterprise, you can optionally run the verification container on the same cluster where the application container is running.\n- Skaffold invokes the test or tests specified in the `verify` stanza of your `skaffold.yaml` to run against the deployed application.\n- Success or failure of the tests executed indicates success or failure of the verification.- Verification success is determined by the executed container's exit code.`0` indicates success. A non-zero exit code indicates failure. To generate the desired verification result, make sure the container exits with the appropriate exit code. If more than one container is executed as part of verification, they must all succeed for verification to succeed.\n- If the verification fails, the rollout also fails.\n- If a deployment fails during verification, you can see that by inspecting the rollout: \n- You can [ignore](/deploy/docs/deployment-strategies/manage-rollout#ignore_job) or [retry](#retry) a failed verification.You can also [terminate](/deploy/docs/deployment-strategies/manage-rollout#terminate_job_run) an in-progress verify job.\n### Components used for verification\nThe [rollout](/deploy/docs/architecture#resources) resource includes the following objects, which support deployment verification:\n- PhaseThe collection of operations (jobs) in a rollout that are logically grouped together, for example a deploy or a deploy and verify.\n- JobThe specific operation to be performed on a rollout, such as deploy or verify.\n- Job runA child of the rollout resource, the job run is an instance of a job, for example an attempt to deploy.\nFor more about Cloud Deploy resources, see [Cloud Deployservice architecture](/deploy/docs/architecture)\n### Notifications generated by deployment verification\nCloud Deploy generates Pub/Sub messages and publishes them for the following events:\n- Job run create, update, and deleteThese notifications are published to the `clouddeploy-resources` topic, and contain the following attributes:- `Resource`\n- `ResourceType`(`JobRun`)\n- `Action`(`Create`,`Update`,`Delete`)\n- `ProjectNumber`\n- `Location`\n- `TargetId`\n- `DeliveryPipelineId`\n- `ReleaseId`\n- `RolloutId`\n- `JobRunId`The following is an example Pub/Sub message for a job run create, published to the `clouddeploy-resources` topic:\n```\n{\u00a0 \u00a0 \"ackId\": \"UAYWLF1GSFE3GQhoUQ5PXiM_NSAoRRAGAE8CKF15MFcrQVh9Dz4NGXJ9YXRiWRIJBkUHeF9cEQ1iXE5EB0nq0KDVV1dKXxYGAExQeVhbHQVoWVh0Bnn7h5nK-8HjYwk9OqKarPdtO4PY2fNHZiI9XhJLLD5-My5FQV5AEkw4G0RJUytDCypYEU4EISE-MD5FU0Q\",\u00a0 \u00a0 \"message\": {\u00a0 \u00a0 \u00a0 \"attributes\": {\u00a0 \u00a0 \u00a0 \u00a0 \"Action\": \"Create\",\u00a0 \u00a0 \u00a0 \u00a0 \"DeliveryPipelineId\": \"dv-pipeline\",\u00a0 \u00a0 \u00a0 \u00a0 \"JobRunId\": \"634f8c6f-30c3-49ca-af80-68dc24d4cc5d\",\u00a0 \u00a0 \u00a0 \u00a0 \"Location\": \"us-central1\",\u00a0 \u00a0 \u00a0 \u00a0 \"ProjectNumber\": \"253401481285\",\u00a0 \u00a0 \u00a0 \u00a0 \"ReleaseId\": \"test-release-100\",\u00a0 \u00a0 \u00a0 \u00a0 \"Resource\": \"projects/253401481285/locations/us-central1/deliveryPipelines/dv-pipeline/releases/test-release-100/rollouts/test-release-100-to-dev-0001/jobRuns/634f8c6f-30c3-49ca-af80-68dc24d4cc5d\",\u00a0 \u00a0 \u00a0 \u00a0 \"ResourceType\": \"JobRun\",\u00a0 \u00a0 \u00a0 \u00a0 \"RolloutId\": \"test-release-100-to-dev-0001\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"messageId\": \"5572937706805411\",\u00a0 \u00a0 \u00a0 \"publishTime\": \"2022-09-07T14:00:46.040Z\"\u00a0 \u00a0 }\u00a0 },\n```\n- Job run start, succeed, and failThese notifications are published to the `clouddeploy-operations` topic, and contain the following attributes:- `Resource`\n- `ResourceType`(`JobRun`)\n- `Action`(`Start`,`Succeed`,`Failure`)\n- `ProjectNumber`\n- `Location`\n- `TargetId`\n- `DeliveryPipelineId`\n- `ReleaseId`\n- `RolloutId`\n- `JobRunId`\n- `PhaseId`\n- `JobId`\n- `JobType`(`Deploy`or`Verify`)The following is an example Pub/Sub message for a failed job run, published to the `clouddeploy-operations` topic:\n```\n{\u00a0 \u00a0 \"ackId\": \"RFAGFixdRkhRNxkIaFEOT14jPzUgKEUUBAgUBXx9cEFPdVhec2hRDRlyfWB9aVsbCAUXU3cJURsHaE5tdR-6xcvaS0NVb18UAgRFWndfXhMEblhfcy-fkK3HwvT9U0AvOemNgdZpe6jHiulvZiM9XxJLLD5-My5FQV5AEkw4G0RJUytDCypYEU4EISE-MD5FUw\",\u00a0 \u00a0 \"message\": {\u00a0 \u00a0 \u00a0 \"attributes\": {\u00a0 \u00a0 \u00a0 \u00a0 \"Action\": \"Failure\",\u00a0 \u00a0 \u00a0 \u00a0 \"DeliveryPipelineId\": \"dv-pipeline\",\u00a0 \u00a0 \u00a0 \u00a0 \"JobId\": \"verify\",\u00a0 \u00a0 \u00a0 \u00a0 \"JobRunId\": \"b389224a-c259-4a00-ab75-c22e48bc3136\",\u00a0 \u00a0 \u00a0 \u00a0 \"JobType\": \"Verify\",\u00a0 \u00a0 \u00a0 \u00a0 \"Location\": \"us-central1\",\u00a0 \u00a0 \u00a0 \u00a0 \"PhaseId\": \"stable\",\u00a0 \u00a0 \u00a0 \u00a0 \"ProjectNumber\": \"253401481285\",\u00a0 \u00a0 \u00a0 \u00a0 \"ReleaseId\": \"test-release-101\",\u00a0 \u00a0 \u00a0 \u00a0 \"Resource\": \"projects/253401481285/locations/us-central1/deliveryPipelines/dv-pipeline/releases/test-release-101/rollouts/test-release-101-to-dev-0001/jobRuns/b389224a-c259-4a00-ab75-c22e48bc3136\",\u00a0 \u00a0 \u00a0 \u00a0 \"ResourceType\": \"JobRun\",\u00a0 \u00a0 \u00a0 \u00a0 \"RolloutId\": \"test-release-101-to-dev-0001\",\u00a0 \u00a0 \u00a0 \u00a0 \"TargetId\": \"dev\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"messageId\": \"5573609905896436\",\u00a0 \u00a0 \u00a0 \"publishTime\": \"2022-09-07T15:35:37.906Z\"\u00a0 \u00a0 }\u00a0 },\n```\n## Configure Cloud Deploy for deployment verification\nEnabling deployment verification for a Cloud Deploy target consists of adding a [verify: true property](/deploy/docs/config-files#pipeline_definition_and_progression) to a given target (or targets) in a delivery pipeline progression, as shown in this example:\n```\napiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0name: my-demo-appdescription: main application pipelineserialPipeline:\u00a0stages:\u00a0- targetId: dev\u00a0 \u00a0profiles: []\u00a0 \u00a0strategy:\u00a0 \u00a0 \u00a0standard:\u00a0 \u00a0 \u00a0 \u00a0verify: true\u00a0- targetId: prod\u00a0 \u00a0profiles: []\u00a0 \u00a0strategy:\u00a0 \u00a0 \u00a0standard:\u00a0 \u00a0 \u00a0 \u00a0verify: false\n```\nIn this configuration, deployment verification is enabled on the `dev` target, but not on the `prod` target. `verify: false` is equivalent to omitting the `verify` property or the entire `strategy` stanza.\nThe verify operation is executed within its own [execution environment](/deploy/docs/execution-environment) . This execution environment can be configured for `VERIFY` the same as it can be for `RENDER` and `DEPLOY` .\n## Configure Skaffold for deployment verification\nEnabling deployment verification for a target requires a `verify` stanza in the `skaffold.yaml` configuration file for your deployment. This configuration can be for a specific Skaffold profile, if you're using separate profiles per target.\n**Note:** Your `skaffold.yaml` must identify an `apiVersion` of `skaffold/v3alpha1` or greater.\nThis `verify` stanza identifies a container to run to do the verification\u2014 for example, an integration test.\nThe following is an example `skaffold.yaml` that includes a `verify` stanza:\n```\napiVersion: skaffold/v4beta7kind: Configbuild:\u00a0 artifacts:\u00a0 \u00a0 - image: integration-test\u00a0 \u00a0 \u00a0 context: integration-testmanifests:\u00a0 rawYaml:\u00a0 - kubernetes.yamldeploy:\u00a0 kubectl: {}verify:- name: verify-integration-test\u00a0 container:\u00a0 \u00a0 name: integration-test\u00a0 \u00a0 image: integration-test\u00a0 \u00a0 command: [\"./test-systems.sh\"]- name: verify-endpoint-test\u00a0 container:\u00a0 \u00a0 name: alpine\u00a0 \u00a0 image: alpine\u00a0 \u00a0 command: [\"/bin/sh\"]\u00a0 \u00a0 args: [\"-c\", \"wget #ENDPOINT_URL\"]\n```\nThis simple example shows a [verify stanza](https://skaffold-v2.web.app/docs/pipeline-stages/verify/) identifying a container to use and a test script to run in that container. `#ENDPOINT_URL` in this example is just a placeholder for your applications URL, and is not an available Cloud Deploy environment variable.\n**Note:** Using Skaffold to build the container for verification is not required. It's included here as an example only.\n## Run the verification container on the application cluster\nBy default, deployment verification runs in the Cloud Deploy [execution environment](/deploy/docs/execution-environment) . You can also configure Skaffold to run the verification container on the same cluster where your application is running. When you configure in-cluster verification in `skaffold.yaml` and enable verification on a target, the verification runs automatically in that target's cluster.\nThis ability is available for deployments to GKE and GKE Enterprise only, not for Cloud Run. Deployments to Cloud Run can only run verification in the Cloud Deploy execution environment.\nIn-cluster verification requires [Skaffold version 2.3 or higher](/deploy/docs/using-skaffold/select-skaffold#supported_versions) .\n**Note:** For [parallel deployments](/deploy/docs/parallel) , verification is configured on the [multi-target](/deploy/docs/terminology#multi-target) , and the verification container runs on each [child target](/deploy/docs/terminology#child_target) .\nTo run your verification container on the cluster, include an `executionMode.kubernetesCluster` stanza in your `skaffold.yaml` configuration file, inside the `verify` stanza for the specific verification container:\n```\nverify:- name: \u00a0 container:\u00a0 \u00a0 name: \u00a0 \u00a0 image: \u00a0 \u00a0 command: \u00a0 \u00a0 args: \u00a0 executionMode:\u00a0 \u00a0 kubernetesCluster:\n```\n**Note:** you can also include the `jobManifestPath` and `overrides` properties, under `kubernetesCluster` , to point to a manifest for your verify container, and any values you want to override. ( `overrides` takes Kubernetes inline JSON with the values you want to replace.) [Learn more](https://skaffold.dev/docs/verify/) .\nThe following is an example verify stanza that includes `executionMode` to invoke the verification container on the application cluster:\n```\nverify:- name: integration-test-container\u00a0 container:\u00a0 \u00a0 name: integration-test-container\u00a0 \u00a0 image: integration-test-container\u00a0 executionMode:\u00a0 \u00a0 kubernetesCluster: {}\n```\nThe `executionMode` stanza is optional, and if you omit it, Skaffold runs the verification container in the Cloud Deploy execution environment.\n## Retry the verification\nWhen a verify job fails, you can retry the verification, creating a new job run:\n```\ngcloud deploy rollouts retry-job ROLLOUT_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--job-id=JOB_ID \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--phase-id=PHASE_ID \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--delivery-pipeline=PIPELINE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--release=RELEASE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--region=REGION\n```\nRetrying the verification changes the state of the rollout from `FAILED` to `IN_PROGRESS` .\nYou can only retry a verification for a rollout whose verify job failed.\n## Available environment variables\nCloud Deploy provides and populates the following environment variables in the `VERIFY` [execution environment](/deploy/docs/execution-environment) , which you can use for your tests:\n- ANTHOS_MEMBERSHIPFor targets of type `ANTHOS` , the fully specified resource name of the Anthos membership.\n- CLOUD_RUN_LOCATIONFor targets of type `RUN` , the region the Cloud Run service is deployed in.\n- CLOUD_RUN_PROJECTFor targets of type `RUN` , the project in which the Cloud Run service was created.\n- CLOUD_RUN_SERVICEFor targets of type `RUN` , the name of the Cloud Run service deployed.\n- CLOUD_RUN_SERVICE_URLSFor targets of type `RUN` , the URL or URLs (comma-separated list) that end users will use to access your service. You can find these in the Cloud Run service details for your service, in the Google Cloud console.\n- CLOUD_RUN_REVISIONFor targets of type `RUN` , the specific revision of the Cloud Run service.\n- GKE_CLUSTERFor targets of type `GKE` , the fully specified resource name of the Google Kubernetes Engine cluster, for example `projects/p/locations/us-central1/clusters/dev` .\n- TARGET_TYPEThe specific runtime type of the target. Either `GKE` , `ANTHOS` , or `RUN` .\n- CLOUD_DEPLOY_LOCATIONThe region in which the execution environment is running.\n- CLOUD_DEPLOY_DELIVERY_PIPELINEThe ID delivery pipeline the execution environment is running.\n- CLOUD_DEPLOY_TARGETThe ID of the target the execution environment is running.\n- CLOUD_DEPLOY_PROJECTThe project number of the Google Cloud project in which the execution environment is running.\n- CLOUD_DEPLOY_RELEASEThe ID of the release in which the verify will run.\n- CLOUD_DEPLOY_ROLLOUTThe ID of the rollout that contains the jobs for verify.\n- CLOUD_DEPLOY_JOB_RUNThe ID of the [job run](/deploy/docs/deployment-strategies/manage-rollout#jobs_and_job_runs) that represents the current execution of the job.\n- CLOUD_DEPLOY_PHASEThe [phase](/deploy/docs/deployment-strategies/manage-rollout#phases) in the rollout that contains the job for verify.", "guide": "Cloud Deploy"}