{"title": "Cloud Deploy - Manage rollouts", "url": "https://cloud.google.com/deploy/docs/deployment-strategies/manage-rollout", "abstract": "# Cloud Deploy - Manage rollouts\nA Cloud Deploy rollout includes phases. A phase is an ordered, logical grouping of jobs to do in a rollout.\nEach phase includes jobs, which are the actions to take in each phase (for example, `deploy` or `verify` ). And each job can have zero or more job runs. A job run is an instance of a job. If the job hasn't run, there are no job runs.\nThis document describes [phases](/deploy/docs/terminology#phase) , [jobs](/deploy/docs/terminology#job) , and [job runs](/deploy/docs/terminology#job_runs) , and how to manage them.\n", "content": "## Structure of a rollout\nA rollout is a Cloud Deploy resource that associates a [release](/deploy/docs/terminology#release) with a [target](/deploy/docs/terminology#target) .\n### Phases\nA rollout consists of one or more [phases](/deploy/docs/terminology#phase) .\nFor a [standard](/deploy/docs/deployment-strategies) deployment strategy, there is only one phase: `stable` .\nFor a [canary](/deploy/docs/deployment-strategies/canary) deployment strategy, There is a separate phase for each configured percentage. For example, if you configure a canary that deploys 25%, then 50%, then 100%, there will be three phases:\n- `canary-25`\n- `canary-50`\n- `stable`\nThese phase names are standard: `canary-[PERCENTAGE]` for canary stages, and `stable` for the 100% phase. However, if you configure a [manual](/deploy/docs/deployment-strategies/canary#configure_a_manual_canary) or [custom](/deploy/docs/deployment-strategies/canary#custom) canary, you can control the phase names.\n### Jobs and job runs\nEach rollout phase includes one or more jobs.\nFor a rollout in a [standard](/deploy/docs/deployment-strategies) deployment strategy, with no deployment verification enabled, there is one phase ( `stable` ).\nFor a canary rollout, there will be a phase for each part of the canary (for example, `canary-25` , `canary-50` , `stable` ), and for each phase there is a `deploy` job. If verification is enabled, there is also a `verify` job for each phase.\nA job run is an instance of a job. For example, a job run for a `deploy` job is executed, and if it succeeds, there is no further job run for that job. If it fails, it can be retried as another job run.\n## Skipping phases the first time\nSome deployment strategies (for example, canary) apportion traffic between the old and new versions. If you're deploying to a target for the first time, there's no old version, so we can't apportion the traffic.\nFor this reason, when you deploy a canary for the first time, we skip the canary phase or phases and run the `stable` phase. After that, the application is deployed, and future canary deployments will include the canary phases.\nIn a real-world situation, you will usually execute a canary deployment where your application is already running, so this phase skipping will be rare.\n## States within a rollout\nRollouts, phases, jobs, and job runs all have states. This section describes the states for each.\n### Rollout states\nA rollout will have one of the following states:\n- `APPROVAL_REJECTED`The rollout [required approval](/deploy/docs/promote-release#require_approval) , but the approval was rejected.\n- `CANCELLED`The terminal state for rollouts that have been [canceled](#cancel_rollout) by a user.\n- `CANCELLING`A user has canceled the rollout, but the cancellation has not finished processing.\n- `HALTED`In a [parallel deployment](/deploy/docs/parallel) , if one or more child rollouts fail, but at least one child rollout succeeds, the [controller](/deploy/docs/terminology#controller_rollout) rollout is HALTED if there are more phases after the current one.You can resume a halted controller rollout by doing any of the following:- Cancel the controller rollout\n- Retry or ignore any failed jobs on child rollouts\n- `IN_PROGRESS`A job run is processing.\n- `FAILED`A job failed, and the user didn't choose to [ignore the failure](#ignore_job) .\n- `PENDING`The rollout has not begun processing. This state transitions to `IN_PROGRESS` or `CANCELED` .\n- `PENDING_APPROVAL`The rollout [requires approval](/deploy/docs/promote-release#require_approval) , but has not yet been approved.\n- `PENDING_RELEASE`The rollout is waiting for the [release to be rendered](/deploy/docs/architecture#how_they_fit_together_to_deliver_your_release) .\n- `SUCCEEDED`The rollout has finished, with no failures.\n### Phase states\nA phase will have one of the following states:\n- `PENDING`The phase is waiting for another phase in the rollout to finish.\n- `IN_PROGRESS`The phase has started.\n- `SUCCEEDED`The phase completed successfully.\n- `FAILED`A job in the phase failed, and the user didn't choose to [ignore the failure](#ignore_job) .\n- `ABORTED`A previous phase failed.\n- `SKIPPED`When you're running a deployment strategy, such as a [canary](/deploy/docs/deployment-strategies/canary) , Cloud Deploy skips to the `stable` phase in cases where there isn't yet a running version of the application with which to split traffic. In this case, the state is set to `SKIPPED` .\n### Job states\nA job will have one of the following states:\n- `ABORTED`If a phase fails, subsequent phases are aborted.If a job fails, and that failure is not [ignored](#ignore_job) , subsequent jobs are aborted. For example, if a phase includes a deploy job and a verify job, and the deploy job fails, the verify job is aborted.\n- `DISABLED`Some jobs in a Phase might be disabled. For example, phases always include verify jobs, whether or not [verification](/deploy/docs/verify-deployment) is enabled. If verification enabled, then the verify job is set to `DISABLED` .\n- `FAILED`A job run for this job failed, and the user didn't choose to [ignore the failure](#ignore_job) .The user chose to [terminate the job run](#terminate_job_run) for this job.\n- `IGNORED`A job run for this job failed, and the user chose to [ignore the failure](#ignore_job) .\n- `IN_PROGRESS`A job run for this job is currently running.\n- `PENDING`The job run for this job is waiting to begin, because another phase or job hasn't finished.\n- `SKIPPED`When you're running a deployment strategy, such as a [canary](/deploy/docs/deployment-strategies/canary) , Cloud Deploy skips to the `stable` phase in cases where there isn't yet a running version of the application with which to split traffic. In this case, the state is set to `SKIPPED` on jobs within the skipped phase or phases.\n- `SUCCEEDED`The job run finished successfully, and the next job in the phase has started, or the next phase has started or is ready to start (possibly pending user input), or the rollout has finished.\n### Job run states\n- `FAILED`The job run failed during execution.\n- `IN_PROGRESS`The job run has begun, but hasn't finished.\n- `TERMINATED`The user [terminated the job run](#terminate_job_run) .\n- `TERMINATING`The user [terminated the job run](#terminate_job_run) , but it hasn't finished terminating yet.\n- `SUCCEEDED`When a job run finishes successfully, without failing or being terminated by a user, it's put into a `SUCCEEDED` state, which## Manage your rollout\nUsing the Google Cloud console or the Google Cloud SDK, you can do the following with a Cloud Deploy rollout:\n- [Advance the rollout](#advance_rollout) \n- [Cancel the rollout](#cancel_rollout) \n- [Terminate a job run](#terminate_job_run) \n- [Ignore a job](#ignore_job) \n- [Retry a failed job](#retry_failed_job) \nIf you're using parallel deployment a canary deployment strategy, see [this document](/deploy/docs/deployment-strategies/canary#parallel_canary) .\n### Advance a rollout\nFor targets configured to use a deployment strategy other than \"standard,\" you need to advance the rollout from phase to phase.\nFor example, if you have a target configured to perform a simple canary deploy with 50% and `stable` (100%) phases only, you would need to advance the rollout once, from the `canary-50` phase to the `stable` (100%) phase.\n```\ngcloud deploy rollouts advance ROLLOUT_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--release=RELEASE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--delivery-pipeline=PIPELINE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--region=REGION\n```\nWhere:\n`` is the name of the current rollout which you're advancing to the next phase.\n`` is the name of the release that this rollout is part of.\n`` is the name of the delivery pipeline you're using to manage deployment of this release.\n`` is the name of the region in which the release was created, for example `us-central1` . This is required.\nSee the Google Cloud SDK reference for more information about the [gcloud deploy rollouts advance command](/sdk/gcloud/reference/deploy/rollouts/advance) .- [Open the Deliverypipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) .\n- Click your pipeline shown in the list of delivery pipelines.The Delivery pipeline details page shows a graphical representation of your delivery pipeline's progress.\n- On the **Rollouts** tab, under **Delivery pipeline details** , click the name of your rollout.The rollout details page is shown, for that rollout.Notice that in this example, the rollout has a `canary-50` phase and a `stable` phase. Your rollout might have more phases or different phases.\n- Click **Advance rollout** .The rollout is advanced to the next phase.\n### Cancel a rollout\nYou can cancel any rollout which hasn't finished. You can also cancel a failed rollout to prevent further actions on it (such as ignore or retry). The rollout must be in one of the following states:\n- `FAILED`\n- `HALTED`\n- `IN_PROGRESS`\n- `PENDING`\n- `PENDING_APPROVAL`\n- `PENDING_RELEASE`\nAfter you cancel a rollout, that rollout is in a `CANCELLING` state until all outstanding job runs have completed. You can [terminate](#terminate_job_run) outstanding job runs that you don't want to wait for. Once the rollout is `CANCELLED` , it can no longer be advanced or modified.\nTo cancel a rollout:\n```\ngcloud deploy rollouts cancel ROLLOUT_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--release=RELEASE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--delivery-pipeline=PIPELINE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--region=REGION\n```\nWhere:\n`` is the name of the current rollout which you're advancing to the next phase.\n`` is the name of the release that this rollout is part of.\n`` is the name of the delivery pipeline you're using to manage deployment of this release.\n`` is the name of the region in which the release was created, for example `us-central1` . This is required.\nSee the Google Cloud SDK reference for more information about the [gcloud deploy rollouts cancel command](/sdk/gcloud/reference/deploy/rollouts/cancel) .- [Open the Deliverypipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) .\n- Click your pipeline shown in the list of delivery pipelines.The Delivery pipeline details page shows a graphical representation of your delivery pipeline's progress.\n- On the **Rollouts** tab, under **Delivery pipeline details** , click the name of your rollout.The rollout details page is shown, for that rollout.Notice that in this example, the rollout has a `canary-50` phase and a `stable` phase. Your rollout might have more phases or different phases.\n- Click **Cancel rollout** .The rollout is canceled.\n### Terminate a job run\nYou can end a job run that's currently in progress. You might want to do this, for example, if a job run appears to be taking too long or not working as expected. The job run must be `IN_PROGRESS` for you to terminate it.\n```\ngcloud deploy job-runs terminate JOB_RUN_ID \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--release=RELEASE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--delivery-pipeline=PIPELINE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--rollout=ROLLOUT_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--region=REGION\n```\nWhere:\n`` is the (UUID) of the job run you want to terminate. You can find the job run ID in the Google Cloud console, for Cloud Deploy, on the rollout page:You can also get the job runs ID using the `gcloud deploy rollouts describe` command.\n`` is the name of the release that this job run is part of.\n`` is the name of the delivery pipeline you're using to manage deployment of this release.\n`` is the name of the rollout this job run is part of.\n`` is the name of the region in which the release was created, for example `us-central1` . This is required.\nSee the Google Cloud SDK reference for more information about the [gcloud deploy job-runs terminate command](/sdk/gcloud/reference/deploy/job-runs/terminate) .- [Open the Deliverypipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) .\n- Click your pipeline shown in the list of delivery pipelines.The Delivery pipeline details page shows a graphical representation of your delivery pipeline's progress.\n- On the **Rollouts** tab, under **Delivery pipeline details** , click the name of your rollout.The rollout details page is shown, for that rollout.Notice that in this example, the rollout has a `canary-50` phase and a `stable` phase. Your rollout might have more phases or different phases.\n- Under **Phases** , click the phase that includes the job whose job run you're terminating.\n- Under **Job runs** select the specific job run you're terminating, then click **Terminate** .The job run is terminated, and the job status, as shown in the **Phases** table, is `Failure` .\nAfter you terminate a job run, the job is considered failed and you can do any of the following:\n- Leave it that way and disregard the failed rollout\n- Retry the job\n- [Ignore the job](#ignore_job) and continue with the next job or phase in the rollout\n**Note:** When you're using a [parallel deployment](/deploy/docs/parallel) , you can terminate job runs on child rollouts only\u2014not controller rollouts.\n### Ignore a job\nYou can ignore a failed job and move immediately to the next job in the phase. That job might have failed for any reason, including you or someone else [terminated](#terminate_job_run) a job run for that job.\nA failed job means a failed phase and a failed rollout. However if you ignore the failure, both the phase and the rollout can be progressed and can ultimately have `SUCCEEDED` states.\n```\ngcloud deploy rollouts ignore-job ROLLOUT_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--release=RELEASE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--delivery-pipeline=PIPELINE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--job-id=JOB_ID \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--phase-id=PHASE_ID \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--region=REGION\n```\nWhere:\n`` is the name of the rollout this job run is part of.\n`` is the name of the current release that includes this job.\n`` is the name of the delivery pipeline you're using to manage deployment of this release.\n`` is the name of the job to ignore, for example `DEPLOY` . You can find the job name in the **Phases** table for the rollout, in the Google Cloud console:`` is the name of the phase that includes the job you're ignoring.\n`` is the name of the region in which the release was created, for example `us-central1` .\nSee the Google Cloud SDK reference for more information about the [gcloud deploy rollouts ignore-job command](/sdk/gcloud/reference/deploy/rollouts/ignore-job) .- [Open the Deliverypipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) .\n- Click your pipeline shown in the list of delivery pipelines.The Delivery pipeline details page shows a graphical representation of your delivery pipeline's progress.\n- On the **Rollouts** tab, under **Delivery pipeline details** , click the name of your rollout.The rollout details page is shown, for that rollout.\n- Select the failed job to ignore.\n- Click the **Ignore failures** button.The failed job run is ignored, and the rollout continues as if the job had succeeded. That is, if there are other jobs in the same phase, they are executed. Otherwise, the rollout is ready to advance to the next phase.\n**Note:** When you're using a [parallel deployment](/deploy/docs/parallel) , you can ignore jobs on child rollouts only\u2014not controller rollouts.\n### Retry a failed job\nYou can retry a job run that failed. The job can fail for any of the following reasons:\n- A job run failed to complete.For example, there could have been a permissions failure.\n- A user [terminated a job run](#terminate_job_run) from that job.Terminating a job run results in a failed job, which you can retry.\n- A verification test failed.For a [verification](/deploy/docs/verify-deployment) job, a verification test failed. Even though the verification job completed correctly, one of your verification tests failed, and we propagate that back to the verification job. In this case, you would retry the job as part of debugging the failed test against your application.\nTo retry a failed job:\n```\ngcloud deploy rollouts retry-job JOB_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--release=RELEASE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--delivery-pipeline=PIPELINE_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--rollout=ROLLOUT_NAME \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--phase=PHASE_ID \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0--region=REGION\n```\nWhere:\n`` is the name of the job that you're retrying. For example, if you're retrying the verify job after a failed verification, this would be `verify` .\n`` is the name of the release that this job run is part of.\n`` is the name of the delivery pipeline you're using to manage deployment of this release.\n`` is the name of the rollout this job run is part of.\n`` is name of the phase that this job is part of. For example, `canary-50` , or `stable` .\n`` is the name of the region in which the release was created, for example `us-central1` . This is required.\nSee the Google Cloud SDK reference for more information about the [gcloud deploy rollouts retry-job command](/sdk/gcloud/reference/deploy/rollouts/retry-job) .- [Open the Deliverypipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) .\n- Click your pipeline shown in the list of delivery pipelines.The Delivery pipeline details page shows a graphical representation of your delivery pipeline's progress.\n- On the **Rollouts** tab, under **Delivery pipeline details** , click the name of your rollout.The rollout details page is shown, for that rollout.\n- Under **Phases and Jobs** , click the phase that includes the job you're retrying.\n- Select the job to retry.\n- Click **Retry** , and confirm.The job run is executed again and the job status, as shown in the **Phases** table, is \"in progress\". If there are other jobs in the same phase, they are executed. Otherwise, the rollout is ready to advance to the next phase.\n**Note:** When you're using a [parallel deployment](/deploy/docs/parallel) , you can retry jobs on child rollouts only\u2014not controller rollouts.\n## What's next\n- Find out more about [how deployment strategies work](/deploy/docs/deployment-strategies) in Cloud Deploy.\n- See the [Cloud Deploy service architecture](/deploy/docs/architecture) documentation for more information about how rollouts, phases, jobs, and job runs fit in with the rest of Cloud Deploy.", "guide": "Cloud Deploy"}