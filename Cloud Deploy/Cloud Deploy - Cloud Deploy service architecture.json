{"title": "Cloud Deploy - Cloud Deploy service architecture", "url": "https://cloud.google.com/deploy/docs/architecture", "abstract": "# Cloud Deploy - Cloud Deploy service architecture\nThis document describes the relationships between Cloud Deploy and the external systems it works with in order to deploy your applications. These systems are other Google Cloud services and third-party tools.\n", "content": "## The high-level view\nThe following diagram shows the relationships between Cloud Deploy and the separate systems it relies on.\nAs shown in this diagram, Cloud Deploy interacts with the following systems:\n- Your CI systemCloud Deploy supports most CI tools, as long as one output from your CI process can be a call to the Cloud Deploy [API](/deploy/docs/api/reference/rest) or [CLI](/sdk/gcloud/reference/deploy) to [create a release](/deploy/docs/deploying-application#invoke_your_delivery_pipeline_to_create_a_release) .\n- [Cloud Build](/build/docs) Cloud Deploy calls Cloud Build to render your manifests and to deploy to the target runtime. For more details, see Execution environments[]()\n- [Skaffold](/skaffold) Cloud Deploy uses Skaffold through Cloud Build to render and deploy your manifests, thus deploying your application.\n- [Cloud Storage](/gcs/docs) Cloud Deploy stores rendering source and rendered manifests in a Cloud Storage bucket.\n- [Google Cloud Observability](/stackdriver/docs) and [Cloud Audit Logs](/logging/docs) .Google Cloud Observability collects and makes available logging data for Cloud Deploy.See also [Audit logging](/deploy/docs/audit-logs) .\n- [Pub/Sub](/pubsub/docs) Cloud Deploy publishes messages to several Pub/Sub topics. You can use this service to integrate with external workflow, testing, and other related systems.See [Subscribing to Cloud Deploy notifications](/deploy/docs/subscribe-deploy-notifications) and [Integrating Cloud Deploy with other system](/deploy/docs/integrating) for more information.\n- Target runtimeCloud Deploy uses [skaffold apply](https://skaffold.dev/docs/workflows/ci-cd/#separation-of-rendering-and-deployment) , through Cloud Build, to deploy your applications to your target runtime (GKE or GKE Enterprise).## Cloud Deploy resources\nThe following diagram shows the resources that Cloud Deploy uses to deliver your applications, and the relationships among those resources:\nAs shown in this diagram, the relationships among the resources are as follows:\n- The [delivery pipeline](/deploy/docs/terminology#delivery_pipeline) can yield zero or more releases and can reference one or more [targets](/deploy/docs/terminology#target) , including [multi-targets](/deploy/docs/terminology#multi-target) and their associated [child-targets](/deploy/docs/terminology#child_target) .\n- The delivery pipeline can also reference one or more [automations](/deploy/docs/automation) , which automate actions on Cloud Deploy resources.\n- Each [release](/deploy/docs/terminology#release) includes the [pipeline instance](/deploy/docs/terminology#pipeline_instance) \u2014a \"snapshot\" of the delivery pipeline and targets as they were configured when the release was created.\n- Each release can yield zero or more [rollouts](/deploy/docs/terminology#rollout) , and can reference zero or more artifacts.Each rollout includes at least one phase, representing a collection of operations (jobs) in a rollout that are logically grouped together, for example, a deploy or a deploy and verify.Each phase includes one or more jobs, representing what is to be done on the rollout\u2014either deploy or verify. Each job can include one or more job runs, which are instances of jobs, for example, an attempt to deploy. A job run is a child resource of the rollout. [Multi-targets](/deploy/docs/terminology#multi-target) , used for [parallel deployment](/deploy/docs/parallel) , create [controller rollouts](/deploy/docs/terminology#controller_rollout) , which create child rollouts, which correspond to child targets.\n- Each rollout is associated with one target.For [parallel deployment](/deploy/docs/parallel) , each [child target](/deploy/docs/terminology#child_target) is associated with one [child rollout](/deploy/docs/terminology#child_rollout) .\n- Each target is associated with one GKE or Anthos cluster, or other runtime destination for the application.\n- A target can be associated with one or more delivery pipelines.\n- An artifact is any output from your CI process (for example, a [container image](/deploy/docs/integrating-ci#build_artifacts_versus_images) ) that is deployed to a target runtime as part of a rollout.\nFurther, a rollout has one or more phases, and phases have one or more jobs and one or more job runs.\nAs shown in this diagram, a rollout includes the following:\n- PhasesA phase contains one or more jobs (for example deploy, or deploy and verify). Each rollout has one or more phases. A phase is a sub-message in a rollout.\n- JobsThe specific operation to be performed on a rollout, for example deploy or verify. A job is a sub-message in a rollout.\n- JobRunsAn instance of a job, for example an attempt to verify. Each job may have zero or more JobRuns. The JobRun is a child resource of a rollout.\nAutomations contain automation rules, which may be referenced by zero or more AutomationRun resources. AutomationRuns are instances of executed automation rules, for example an automated promotion from one target to another. Automation and AutomationRun resources are peer-child resources beneath a delivery pipeline.\n## How they fit together to deliver your release\nThis section describes how Cloud Deploy interacts with the components listed in this document to automate the delivery of your application as a [release](/deploy/docs/terminology#release) .\n- Your CI system invokes a Cloud Deploy delivery pipeline.Your CI process calls Cloud Deploy using the [CLI](/sdk/gcloud/reference/deploy/releases/create) or [API](/deploy/docs/api/reference/rest/v1/projects.locations.deliveryPipelines.releases/create) to create a new release, passing the build artifacts or references to images.For more information about integrating your CI system, see [Integrating Cloud Deploy with other systems](/deploy/docs/integrating#integrating_with_your_ci_system) .\n- When a new release is created, Cloud Deploy does the following:- Stores an instance of the delivery pipeline as part of the release.This pipeline instance remains unchanged for this release, even if the delivery pipeline configuration is changed. See [Pipeline instances perrelease](/deploy/docs/pipeline-instances) for more information.Also, the [Skaffold version](/deploy/docs/using-skaffold/select-skaffold) is stored as a part of the release. In most cases, this will be the default Skaffold version, but because [you can specify other versions](/deploy/docs/using-skaffold/select-skaffold) , that information is stored.\n- Calls Cloud Build, which gets the Skaffold rendering source from Cloud Storage.Cloud Deploy stores the rendering source in the default or alternate Cloud Storage bucket.\n- Calls [skaffold diagnose](https://skaffold.dev/docs/references/cli/#skaffold-diagnose) (using the Skaffold version stored upon release creation) to generate a single effective manifest.\n- Calls the `render` operation.If you're using built-in targets, Cloud Deploy calls [skaffold render](https://skaffold.dev/docs/workflows/ci-cd/#separation-of-rendering-and-deployment) to render the manifest using the provided images or build artifacts. Cloud Deploy substitutes image names in `spec.templates.spec.containers.image` with the full image paths (including digests or tags) provided on the `gcloud deploy releases create` command or in a build artifacts file [referenced by that command](/deploy/docs/integrating-ci#calling_from_your_ci_pipeline) .If you're using a [custom target](/deploy/docs/custom-targets) , Cloud Deploy calls the [render operation](/deploy/docs/custom-targets#deploy_contract_inputs) defined for its custom target type.Cloud Deploy stores the rendered manifest in the default or alternate Cloud Storage bucket.Cloud Deploy performs these actions using the default or an alternate [execution environment](/deploy/docs/execution-environment) .\n- When a rollout is created (automatically after release creation or on demand later), Cloud Deploy does the following:- Calls pre-deploy hooks, if any are specified.If you're using a [canary](/deploy/docs/deployment-strategies/canary) deployment strategy, pre-deploy hooks are called at the start of the first phase.\n- Calls the `deploy` operation.If you're using built-in targets, Cloud Deploy automatically creates and deploys a rollout to the first target, by calling [skaffold apply](https://skaffold.dev/docs/workflows/ci-cd/#separation-of-rendering-and-deployment) . If you're using a built-in target, the first rollout is created automatically upon release creation. **Note:** `skaffold apply` includes the Skaffold [health check](https://skaffold.dev/docs/workflows/ci-cd#waiting-for-skaffold-deployments) , which waits for deployments to stabilize.If you're using a [custom target](/deploy/docs/custom-targets) , Cloud Deploy automatically creates a rollout to the first target, calling the [deploy operation](/deploy/docs/custom-targets#deploy_contract_inputs) defined for its custom target type.For built-in targets and custom targets, the rollout to the first target, is automatic only when the release is created using the command line.The process of deploying to the first target is the same as for promotions, as described in the next step.\n- Calls [skaffold verify](https://skaffold-v2.web.app/docs/pipeline-stages/verify/) , if `verify` is `true` for the target in the delivery pipeline [config](/deploy/docs/config-files#verify) and if verification is [specified in the Skaffold configuration](/deploy/docs/verify-deployment#configure_skaffold) .\n- Calls post-deploy hooks, if any are specified, after `verify` , if a `verify` is specified. Otherwise, post-deploy hooks are called after `deploy` .If you're using a canary deployment strategy, post-deploy hooks are performed as the last job in the final rollout phase.\n- When it's time to promote the release to the next target, Cloud Build retrieves the target-specific manifest from Cloud Storage. Then Cloud Build invokes [skaffold apply](https://skaffold.dev/docs/workflows/ci-cd/#separation-of-rendering-and-deployment) to apply the rendered manifest to the specified target runtime.If the target requires [approval](/deploy/docs/promote-release#manage_approvals_for_a_delivery_pipeline) , you can approve or reject through the CLI or using the Console.Also, Cloud Deploy generates a Pub/Sub message, which you can subscribe to in order to [automatically initiate an approvalworkflow](/deploy/docs/integrating#for_approvals) .Cloud Deploy uses the Skaffold version and the pipeline instance that are associated with this release, and performs this step in the default or custom execution environment.This process is true not only for promotions, but also for rollbacks and for redeployments.\n- Throughout Cloud Deploy operations, the service publishes notifications to [several Pub/Sub topics](/deploy/docs/subscribe-deploy-notifications) (for example, when a rollout [requires approval](/deploy/docs/promote-release#require_approval) ).This and other integrations are described further in [Integrating Cloud Deploywith external systems](/deploy/docs/integrating) .\n- You can specify an [automation](/deploy/docs/automation) to automatically perform various [operations](/deploy/docs/automation-rules) within the delivery pipeline. These can be executed at their designated time. An [automationRun](/deploy/docs/automation-resource#the_automationrun_resource) represents an automation rule execution.\n- Throughout Cloud Deploy operation, the service writes platform logs and [audit logs](/deploy/docs/audit-logs) to Google Cloud Observability and Cloud Audit Logs.\nThrough all of these steps, flow control and access to resources are restricted using [Identity and Access Management](/deploy/docs/iam-roles-permissions) .\n## What's next\n- Learn more about how to [integrate Cloud Deploy with other systems](/deploy/docs/integrating) \n- See important information about the [Skaffold version lifecycle](/deploy/docs/using-skaffold/select-skaffold) .\n- Learn about Cloud Deploy [execution environments](/deploy/docs/execution-environment) .\n- Try the [Cloud Deploy Skaffold profiles walkthrough](https://shell.cloud.google.com/?show=ide%2Cterminal&walkthrough_id=deploy--cloud-deploy-profiles-gke) \n- [Learn how to combine Google Cloud CI/CD tools to develop and deliversoftware effectively to GKE](https://cloud.google.com/architecture/app-development-and-delivery-with-cloud-code-gcb-cd-and-gke) .", "guide": "Cloud Deploy"}