{"title": "Cloud Deploy - Canary-deploy an application to a target", "url": "https://cloud.google.com/deploy/docs/deploy-app-canary", "abstract": "# Cloud Deploy - Canary-deploy an application to a target\n# Canary-deploy an application to a target\nThis quickstart shows you how to use Cloud Deploy to deliver a sample application image in a canary deployment to either Google Kubernetes Engine or to Cloud Run. (You can also run a canary deployment [to GKE Enterprise](/deploy/docs/anthos-targets) , but only GKE and Cloud Run are shown in this quickstart.)\nA canary deployment splits traffic between an already-deployed version of the application and the new version. Cloud Run apportions traffic based on the percentages you configure in the delivery pipeline. GKE deploys the new version to a proportion of pods. This quickstart deploys to 50% first, then to 100%.\nIn this quickstart, there is only one [target](/deploy/docs/terminology#target) , ( `prod` ). So we create only one GKE cluster or one Cloud Run service to run your application.\nIn this quickstart, you'll do the following:- Create one GKE cluster or define one Cloud Run service.You can canary deploy to GKE Enterprise clusters too, but this quickstart uses GKE and Cloud Run only.\n- Create a [Skaffold](/skaffold) configuration and a Kubernetes manifest to specify the (pre-built) container image to deploy.\n- Define your Cloud Deploy delivery pipeline and deployment [target](/deploy/docs/terminology#target) .\n- Invoke your delivery pipeline by creating a release, which automatically deploys to one target.This first release [skips the canary phase](#we_skip_to_the_stable_phase) .\n- View the delivery pipeline and release in the Google Cloud console.\n- Create a second release, this time executing the canary stage to deploy the application to 50%.\n- Advance the release to deploy to 100%.\n", "content": "## Before you begin- If you already have the CLI installed, make sure you're running the latest version:\n- ```\ngcloud components update\n```\n- Make sure the [default Compute Engine service account](/deploy/docs/cloud-deploy-service-account#execution_service_account) has sufficient permissions.The service account might already have the necessary permissions. These steps are included for projects that disable automatic role grants for default service accounts.- First add the`clouddeploy.jobRunner`role:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/clouddeploy.jobRunner\"\n```\n- Add the developer role for your specific runtime.\n- For GKE, and GKE with Gateway API:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/container.developer\"\n```\n- For Cloud Run:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/run.developer\"\n```\n- Add the`iam.serviceAccountUser`role, which includes the`actAs`permission to deploy to the runtime:```\ngcloud iam service-accounts add-iam-policy-binding $(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --member=serviceAccount:$(gcloud projects describe PROJECT_ID \\\n --format=\"value(projectNumber)\")-compute@developer.gserviceaccount.com \\\n --role=\"roles/iam.serviceAccountUser\" \\\n --project=PROJECT_ID\n```\n## Create your runtime environment\nCreate one GKE [Autopilot](/deploy/docs/kubernetes-engine/docs/concepts/autopilot-overview) cluster:\n```\n\u00a0gcloud container clusters create-auto canary-quickstart-cluster \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --project=PROJECT_ID \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --region=us-central1\n```- Create one GKE cluster, with recommended settings to support using with Istio:```\ngcloud container clusters create canary-quickstart-cluster \\\u00a0 \u00a0 \u00a0 \u00a0--machine-type=n1-standard-1 \\\u00a0 \u00a0 \u00a0 \u00a0--num-nodes 4 \\\u00a0 \u00a0 \u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0 \u00a0 \u00a0--project=PROJECT_ID\n```\n- Get the cluster credentials:```\ngcloud container clusters get-credentials canary-quickstart-cluster \\\u00a0 \u00a0 \u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0 \u00a0 \u00a0--region=us-central1\n```\n- Install the Kubernetes Gateway API CRDs if not already present on the cluster.```\nkubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v0.6.2/standard-install.yaml\n```\n- Enable Istio's Gateway controller implementation by installing Istio.```\ncurl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.17.2 sh - \\&& ./istio-1.17.2/bin/istioctl install --set profile=minimal -y\n```\nIf you're using Cloud Run, you can skip this command, you don't need to do anything here.## Prepare your Skaffold configuration and application manifestCloud Deploy uses [Skaffold](/deploy/docs/using-skaffold) to provide the details for what to deploy and how to deploy it properly to your [target](/deploy/docs/terminology#target) .\nIn this quickstart, you create a `skaffold.yaml` file, which identifies the Kubernetes manifest or Cloud Run service configuration to be deployed.- Open a terminal window.\n- Create a new directory and navigate into it.\n```\nmkdir deploy-canary-quickstart-gkecd deploy-canary-quickstart-gke\n```\n```\nmkdir deploy-canary-quickstart-gke-gatewayapicd deploy-canary-quickstart-gke-gatewayapi\n```\n```\nmkdir deploy-canary-quickstart-runcd deploy-canary-quickstart-run\n```\n- Create a file named `skaffold.yaml` with the following contents:\n```\napiVersion: skaffold/v4beta7kind: Configmanifests:\u00a0 rawYaml:\u00a0 - kubernetes.yamldeploy:\u00a0 kubectl: {}\n```\n```\napiVersion: skaffold/v4beta7kind: Configmanifests:\u00a0 rawYaml:\u00a0 - kubernetes.yamldeploy:\u00a0 kubectl: {}\n```\n```\napiVersion: skaffold/v4beta7kind: Configmanifests:\u00a0 rawYaml:\u00a0 - run.yamldeploy:\u00a0 cloudrun: {}\n```\nThis file is a minimal Skaffold config, identifying your manifest. For this quickstart, you create the file. But you can also [have Cloud Deploy create one for you](/deploy/docs/using-skaffold/getting-started-skaffold#have_generate_your_skaffoldyaml) , for simple, non-production applications.See the [skaffold.yaml reference](https://skaffold.dev/docs/references/yaml/) for more information about this file.\n- Create your application manifest.\nCreate a file named `kubernetes.yaml` , in the `deploy-canary-quickstart-gke` directory, with the following contents:\n```\napiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: my-deployment\u00a0 labels:\u00a0 \u00a0 app: my-app\u00a0 namespace: defaultspec:\u00a0 replicas: 1\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: my-app\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: my-app\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: nginx\u00a0 \u00a0 \u00a0 \u00a0 image: my-app-image---apiVersion: v1kind: Servicemetadata:\u00a0 name: my-service\u00a0 namespace: defaultspec:\u00a0 selector:\u00a0 \u00a0 app: my-app\u00a0 ports:\u00a0 \u00a0 - protocol: TCP\u00a0 \u00a0 \u00a0 port: 80\n```\nThis file is a simple Kubernetes [manifest](https://kubernetes.io/docs/reference/glossary/?fundamental=true#term-manifest) , which is applied to the cluster to deploy the application.\nCreate a file named `kubernetes.yaml` , in the `deploy-canary-quickstart-gke-gatewayapi` directory, with the following contents:\n```\nkind: GatewayapiVersion: gateway.networking.k8s.io/v1beta1metadata:\u00a0 name: my-gateway\u00a0 annotations:\u00a0 \u00a0 networking.istio.io/service-type: \"ClusterIP\"spec:\u00a0 gatewayClassName: istio\u00a0 listeners:\u00a0 - name: default\u00a0 \u00a0 hostname: \"*.example.com\"\u00a0 \u00a0 port: 80\u00a0 \u00a0 protocol: HTTP\u00a0 \u00a0 allowedRoutes:\u00a0 \u00a0 \u00a0 namespaces:\u00a0 \u00a0 \u00a0 \u00a0 from: All---kind: HTTPRouteapiVersion: gateway.networking.k8s.io/v1beta1metadata:\u00a0 name: my-httproutespec:\u00a0 parentRefs:\u00a0 - kind: Gateway\u00a0 \u00a0 name: my-gateway\u00a0 hostnames:\u00a0 - \"test.example.com\"\u00a0 rules:\u00a0 - backendRefs:\u00a0 \u00a0 - name: my-service\u00a0 \u00a0 \u00a0 port: 80---apiVersion: v1kind: Servicemetadata:\u00a0 name: my-servicespec:\u00a0 selector:\u00a0 \u00a0 app: my-app\u00a0 ports:\u00a0 - name: tcp-port\u00a0 \u00a0 protocol: TCP\u00a0 \u00a0 port: 80\u00a0 \u00a0 targetPort: 8080---apiVersion: apps/v1kind: Deploymentmetadata:\u00a0 name: my-deployment\u00a0 labels:\u00a0 \u00a0 app: my-appspec:\u00a0 replicas: 1\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app: my-app\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app: my-app\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: nginx\u00a0 \u00a0 \u00a0 \u00a0 image: my-app-image\n```\nThis file is a Kubernetes [manifest](https://kubernetes.io/docs/reference/glossary/?fundamental=true#term-manifest) , which is applied to the cluster to deploy the application. This manifest includes the Service and Deployment resources required for canary deployment, plus an HTTPRoute and the Gateway resource needed for using Gateway API.\nCreate a file named `run.yaml` , in the `deploy-canary-quickstart-run` directory, with the following contents:\n```\napiVersion: serving.knative.dev/v1kind: Servicemetadata:\u00a0 name: my-canary-run-servicespec:\u00a0 template:\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - image: my-app-image\n```\nThis file is a Cloud Run service configuration file, which is applied at deploy time to create your service in Cloud Run. **Note:** If you want to use different manifests per target, read [this articleabout managing manifests](/deploy/docs/using-skaffold/managing-manifests) to find out more about using Skaffold profiles.## Create your delivery pipeline and targetsYou can define your delivery pipeline and targets in one file or in separate files. In this quickstart, we create one file for our pipeline and our single target:\nCreate a file named `clouddeploy.yaml` , in the `deploy-canary-quickstart-gke` directory, with the following contents:\n```\napiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0 name: my-canary-demo-app-1description: main application pipelineserialPipeline:\u00a0 stages:\u00a0 - targetId: prod\u00a0 \u00a0 profiles: []\u00a0 \u00a0 strategy:\u00a0 \u00a0 \u00a0 canary:\u00a0 \u00a0 \u00a0 \u00a0 runtimeConfig:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 kubernetes:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 serviceNetworking:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service: \"my-service\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 deployment: \"my-deployment\"\u00a0 \u00a0 \u00a0 \u00a0 canaryDeployment:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 percentages: [50]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 verify: false---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: proddescription: prod GKE clustergke:\u00a0cluster: projects/PROJECT_ID/locations/us-central1/clusters/canary-quickstart-cluster\n```\nCreate a file named `clouddeploy.yaml` , in the `deploy-canary-quickstart-gke-gatewayapi` directory, with the following contents:\n```\napiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0 name: my-canary-demo-app-1description: main application pipelineserialPipeline:\u00a0 stages:\u00a0 - targetId: prod\u00a0 \u00a0 profiles: []\u00a0 \u00a0 strategy:\u00a0 \u00a0 \u00a0 canary:\u00a0 \u00a0 \u00a0 \u00a0 runtimeConfig:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 kubernetes:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 gatewayServiceMesh:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 httpRoute: \"my-httproute\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service: \"my-service\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 deployment: \"my-deployment\"\u00a0 \u00a0 \u00a0 \u00a0 canaryDeployment:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 percentages: [50]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 verify: false---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: proddescription: prod GKE clustergke:\u00a0cluster: projects/PROJECT_ID/locations/us-central1/clusters/canary-quickstart-cluster\n```\nCreate a file named `clouddeploy.yaml` , in the `deploy-canary-quickstart-run` directory, with the following contents:\n```\napiVersion: deploy.cloud.google.com/v1kind: DeliveryPipelinemetadata:\u00a0 name: my-canary-demo-app-1description: main application pipelineserialPipeline:\u00a0 stages:\u00a0 - targetId: prod\u00a0 \u00a0 profiles: []\u00a0 \u00a0 strategy:\u00a0 \u00a0 \u00a0 canary:\u00a0 \u00a0 \u00a0 \u00a0 runtimeConfig:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cloudRun:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 automaticTrafficControl: true\u00a0 \u00a0 \u00a0 \u00a0 canaryDeployment:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 percentages: [50]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 verify: false---apiVersion: deploy.cloud.google.com/v1kind: Targetmetadata:\u00a0 name: proddescription: prod Run Servicerun:\u00a0 location: projects/PROJECT_ID/locations/us-central1\n```\n- Register your pipeline and targets with the Cloud Deploy service:```\ngcloud deploy apply --file=clouddeploy.yaml --region=us-central1 --project=PROJECT_ID\n```You now have a pipeline, with one target configured for a canary deployment strategy.\n- Confirm your pipeline and targets:In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view of list of your available delivery pipelines. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) The delivery pipeline you just created is shown, and the one target you configured is listed in the **Targets** column.\n## Create a releaseA release is the central Cloud Deploy resource representing the changes being deployed. The delivery pipeline defines the lifecycle of that release. See [Cloud Deploy service architecture](/deploy/docs/architecture#how_they_fit_together_to_deliver_your_release) for details about that lifecycle.\nTo create a `release` resource that represents the container image to deploy, run the following command from the `deploy-canary-quickstart-gke` , `deploy-canary-quickstart-gke-gatewayapi` , or `deploy-canary-quickstart-run` directory:\n```\n\u00a0gcloud deploy releases create test-release-001 \\\u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0--delivery-pipeline=my-canary-demo-app-1 \\\u00a0 \u00a0--images=my-app-image=gcr.io/google-containers/nginx@sha256:f49a843c290594dcf4d193535d1f4ba8af7d56cea2cf79d1e9554f077f1e7aaa\n```\n```\n\u00a0gcloud deploy releases create test-release-001 \\\u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0--delivery-pipeline=my-canary-demo-app-1 \\\u00a0 \u00a0--images=my-app-image=gcr.io/google-containers/nginx@sha256:f49a843c290594dcf4d193535d1f4ba8af7d56cea2cf79d1e9554f077f1e7aaa\n```\n```\n\u00a0gcloud deploy releases create test-release-001 \\\u00a0 \u00a0--project=PROJECT_ID \\\u00a0 \u00a0--region=us-central1 \\\u00a0 \u00a0--delivery-pipeline=my-canary-demo-app-1 \\\u00a0 \u00a0--images=my-app-image=us-docker.pkg.dev/cloudrun/container/hello@sha256:6063adf8f687702b4065151acddba6781c47bc602167eb9f3bec8aebc9ce95cc\n```When you create a release, Cloud Deploy automatically creates a rollout resource too, to immediately deploy to your one target, `prod` .\n### We skip to the stable phaseWith this first release, we skip the canary phase, and deploy to 100% (stable phase). This is because the application hasn't been deployed previously, so there's no way to calculate 50% of pods (for GKE) or how traffic is split for the service (for Cloud Run). The pods (GKE) or revisions (Cloud Run) don't exist yet.\nHaving skipped the canary phase, we're now ready to start the stable phase, which takes traffic to 100%. After that, we'll create another release, and that will execute the canary.\nIn a real-world situation, you will usually execute a canary deployment where your application is already running, so this phase skipping will be rare.## View the release in Google Cloud consoleNow that you've created the first release, the rollout is created, and you can view the release and the rollout in Google Cloud console. You can also view the pipeline visualization, which shows the current status of the release.- In the Google Cloud console, navigate to the Cloud Deploy **Delivery pipelines** page to view your **my-canary-demo-app-1** delivery pipeline. [Open the Delivery pipelines page](https://console.cloud.google.com/deploy/delivery-pipelines) \n- Click the name of your delivery pipeline \"my-canary-demo-app-1\".The pipeline visualization shows the app's deployment status. Because there's only one stage in the pipeline, the visualization shows only one node.And your release is listed on the **Releases** tab under **Delivery pipelinedetails** .\n- Click the release name, `test-release-001` .Your rollouts appear under **Rollouts** . You can click a rollout to view its details, including the deployment log.Notice that the rollout status is \"Pending advance,\" and the target shown in the pipeline visualization has a link to \"Advance to stable.\"\n## Advance the rollout phaseAfter the first release, the canary phase was skipped, and the rollout is waiting to start the \"stable\" phase, which deploys the application to 100%:- In the pipeline visualization, click **Advance to stable** .\n- When prompted, click **Advance** to confirm.\nAfter a few minutes, the rollout is now in the \"stable\" phase, and the application is deployed to 100%.## Execute the canary deploymentBecause the first release [skipped the canary phase](#we_skip_to_the_stable_phase) , we'll now create another release, which this time does execute a canary deployment.- To create a new `release` , run the following command from the `deploy-canary-quickstart-gke` , `deploy-canary-quickstart-gke-gatewayapi` or `deploy-canary-quickstart-run` directory:\n```\ngcloud deploy releases create test-release-002 \\\u00a0 --project=PROJECT_ID \\\u00a0 --region=us-central1 \\\u00a0 --delivery-pipeline=my-canary-demo-app-1 \\\u00a0 --images=my-app-image=gcr.io/google-containers/nginx@sha256:f49a843c290594dcf4d193535d1f4ba8af7d56cea2cf79d1e9554f077f1e7aaa\n```\n```\ngcloud deploy releases create test-release-002 \\\u00a0 --project=PROJECT_ID \\\u00a0 --region=us-central1 \\\u00a0 --delivery-pipeline=my-canary-demo-app-1 \\\u00a0 --images=my-app-image=gcr.io/google-containers/nginx@sha256:f49a843c290594dcf4d193535d1f4ba8af7d56cea2cf79d1e9554f077f1e7aaa\n```\n```\ngcloud deploy releases create test-release-002 \\\u00a0 --project=PROJECT_ID \\\u00a0 --region=us-central1 \\\u00a0 --delivery-pipeline=my-canary-demo-app-1 \\\u00a0 --images=my-app-image=us-docker.pkg.dev/cloudrun/container/hello@sha256:6063adf8f687702b4065151acddba6781c47bc602167eb9f3bec8aebc9ce95cc\n```\nAfter a few minutes, a rollout is created, and this time the canary stage is executed:When the first rollout phase finishes, the rollout is now in the canary phase:This means that the application is now deployed to 50%. For serviceNetworking-based GKE, it's deployed to half of your pods. For Gateway API-based GKE and Cloud Run traffic is allocated to 50%.\n- Click **Advance Rollout** , then click **Advance** when prompted.This advances the rollout to the \"stable\" phase, deploying the application to 100%.\n## Clean upTo avoid incurring charges to your Google Cloud account for   the resources used on this page, follow these steps.- Delete the `canary-quickstart-cluster` cluster (GKE only):```\ngcloud container clusters delete canary-quickstart-cluster --region=us-central1 --project=PROJECT_ID\n```\n- Delete the `my-canary-run-service` service (Cloud Run only):```\ngcloud run services delete my-canary-run-service --region=us-central1 --project=PROJECT_ID\n```\n- Delete the delivery pipeline, target, and all release and rollout resources:```\ngcloud deploy delete --file=clouddeploy.yaml --force --region=us-central1 --project=PROJECT_ID\n```\n- Delete the Cloud Storage buckets that Cloud Deploy created.One ends with `_clouddeploy` , and the other is `[region].deploy-artifacts.[project].appspot.com` . [Open the Cloud Storage browser page](https://console.cloud.google.com/storage/browser) \nThat's it, you completed this quickstart!## What's next\n- [Learn more about Cloud Deploy](/deploy/docs/overview) .\n- [Learn the basics of deploying applications](/deploy/docs/deploying-application) .\n- [Try out the Cloud Deploy walkthrough](https://shell.cloud.google.com/?show=ide%2Cterminal&walkthrough_id=deploy--cloud-deploy-e2e-gke) .\n- Learn how to [manage your manifests](/deploy/docs/skaffold) .\n- [Learn how to combine Google Cloud CI/CD tools to develop and deliversoftware effectively to GKE](/architecture/app-development-and-delivery-with-cloud-code-gcb-cd-and-gke) .", "guide": "Cloud Deploy"}