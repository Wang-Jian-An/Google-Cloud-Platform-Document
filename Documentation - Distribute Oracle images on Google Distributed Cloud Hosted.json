{"title": "Documentation - Distribute Oracle images on Google Distributed Cloud Hosted", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Distribute Oracle images on Google Distributed Cloud Hosted\nDatabase Service for GDCH can manage Oracle databases, but Oracle software or licenses are not distributed with the service. As a user, it is your responsibility to ensure that you are licensed to use Oracle software. You must also provide and upload the software for use with the service.\nYou can work on the following tasks:\n- Download Oracle Database binaries.\n- Build Oracle Database container images.\n- Upload database container images to the Harbor container registry.\nYou need a valid Oracle Database license to perform the tasks in this page.\n", "content": "## Check Oracle Database versions supported by Database Service\nBefore proceeding, use the following command to check which database versions Database Service supports. Run this command on the admin organization cluster:\n```\nkubectl get SoftwareLibrary -o=jsonpath='{.items[0].databaseEngines[?(@.name==\"Oracle\")]}.databaseVersions'\n```\nThe output resembles the following:\n```\n[{\u00a0 \"edition\":\"enterprise\",\u00a0 \"isDisabled\":false,\u00a0 \"majorVersion\":\"19\",\u00a0 \"minorVersion\":\"10.0.0.0\",\u00a0 \"versionDisplayName\":\"Oracle 19.10.0.0.0\"}]\n```\nThis output means that Database Service supports creating new database clusters from Oracle Database images with major version 19, minor version 10.0.0.0, and whose edition is Enterprise.\n## Download Oracle binaries\nDownload the Oracle binaries from Oracle's website. You need a valid Oracle license to do this. There are three pieces of software to download from Oracle website:\n- The Oracle Database binary.\n- A recent Patch Set Update (PSU).\n- The latest available OPatch.\nFor example, the binaries for Oracle Database 19.3.0.0.0 Enterprise are as follows:\n- Oracle Database 19c (19.3.0.0.0) for Linux x86-64 (Enterprise Edition). Download this binary from the Oracle eDelivery Cloud: `https://edelivery.oracle.com/` . On the download page, select **Download package** in the list, enter `Oracle Database 19 Enterprise Edition` in the search field, and click **Search** .\n- Patch Set Update (PSU). View the April 2021 PSU: `https://support.oracle.com/epmos/faces/PatchDetail?patchId=32545013&languageId=0&platformId=226&patch_name=32545013&releaseId=600000000018520&_adf.ctrl-state=7pbau4y2d_4&_afrLoop=470976018798075` . Note the patch version, `32545013` in this example, which you use later when building images.\n- The latest available OPatch: `https://updates.oracle.com/download/6880880.html` . Choose the following download parameters:- In the **Select a Release** list, select **OPatch 19.0.0.0.0** .\n- In the **Platform or language** list, select **Linux x86_64** .\n## Building Oracle Database container images\nYou must have Docker installed before proceeding with the following steps. You must perform these steps on a Linux system.\n- Create a directory containing the binaries you downloaded in the previous steps. Set the `PATH_TO_IMAGE_BUILD` variable in your environment:```\nexport PATH_TO_IMAGE_BUILD=PATH\n```Replace with the complete path to the directory containing the Oracle binaries.\n- Copy the image build scripts from the [appendix of thisdocument](#appendix) to the directory.\n- Copy the Oracle binaries you downloaded earlier to the directory where the build scripts are. Verify that the directory contains the correct files:```\nls -1XDockerfileREADME.mdimage_build.shinstall-oracle-18c-xe.shinstall-oracle.shora12-config.shora19-config.shoracle-preinstall.shcloudbuild.yamlp32545013_190000_Linux-x86-64.zipp6880880_200000_Linux-x86-64.zip\n```\n- Run the image creation script:```\ncd $PATH_TO_IMAGE_BUILDchmod +x ./image_build.sh./image_build.sh --local_build=true --db_version=19.3 --patch_version=32545013 \\--create_cdb=true --cdb_name=GCLOUD --mem_pct=45 --no_dry_run --project_id=local-build\n```The script takes approximately 40 minutes to run.The script creates a seeded image which contains a container database (CDB). Database Service requires you to seed the Oracle images because it drastically reduces provisioning time.\n- Verify that you've successfully created the containerized database image with the following command:```\ndocker images\n```You see a similar output that lists the image:```\nREPOSITORY\ngcr.io/local-build/oracle-database-images/oracle-19.3-ee-seeded-GCLOUD\nTAG  IMAGE ID  CREATED  SIZE\nlatest c18d81c3cf6e 3 hours ago 13.5GB\n```\n- Use the image name and tag from the output from the previous step to save the built image into a tar file:```\ndocker save <image name>:<tag name> | gzip > gdch_db_oracle_image.tar.gz\n```## Upload images to the Harbor registry\n- [Set up a storage bucket](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/create-storage-buckets) in your project and upload the tar file there.\n- Create a ticket for the Infrastructure Operator to request the image upload to the Artifact registry. Include the following information in the ticket: **Note:** The image name and tag must follow that exact pattern to be used by the GDC Hosted Database Service.\n- Once the ticket is resolved, you're ready to use Oracle as your database engine.## What's next\n[Choose a database engine type and create a database cluster](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/db-service#create)\n## Appendix: Image build scripts\nThis section contains the image build scripts referenced in [Building OracleDatabase container images](#build_images) .\n### Dockerfile\n```\n# Copyright 2021 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# Base image can be either RHEL8 UBI or OEL8 slim\n# BASE_IMAGE=registry.access.redhat.com/ubi8/ubi\n# ARG BASE_IMAGE=oraclelinux:8-slim\n# Oracle 8 does not support 12c.\n# ARG BASE_IMAGE=oraclelinux:7-slim\nFROM docker.io/oraclelinux:7-slim as base\nARG DB_VERSION\nARG ORACLE_HOME\nARG ORACLE_BASE\nARG CREATE_CDB\nARG CDB_NAME\nENV STAGE_DIR=/tmp/stage/\nCOPY oracle-preinstall.sh $STAGE_DIR\nRUN /bin/bash -c $STAGE_DIR/oracle-preinstall.sh\nFROM base as installer\nARG DB_VERSION\nARG CREATE_CDB\nARG CDB_NAME\nARG CHARACTER_SET\nARG MEM_PCT\nARG EDITION\nARG PATCH_VERSION\nARG INSTALL_SCRIPT\nADD ./* $STAGE_DIR\nRUN /bin/bash -c \\\n 'if [ \"${DB_VERSION}\" = \"18c\" ] && [ \"${EDITION}\" = \"xe\" ]; then \\\n  export INSTALL_SCRIPT=install-oracle-18c-xe.sh; \\\n  chmod +x $STAGE_DIR$INSTALL_SCRIPT; \\\n  $STAGE_DIR/$INSTALL_SCRIPT \"${CDB_NAME}\" \"${CHARACTER_SET}\" && \\\n  rm -rf $INSTALL_SCRIPT && \\\n  rm -rf $STAGE_DIR; \\\n else \\\n  export INSTALL_SCRIPT=install-oracle.sh; \\\n  chmod +x $STAGE_DIR$INSTALL_SCRIPT; \\\n  $STAGE_DIR/$INSTALL_SCRIPT \"${DB_VERSION}\" \"${EDITION}\" \"${CREATE_CDB}\" \"${CDB_NAME}\" \"${CHARACTER_SET}\" \"${MEM_PCT}\" \"${PATCH_VERSION}\" && \\\n  rm -rf $INSTALL_SCRIPT && \\\n  rm -rf $STAGE_DIR; \\\n fi'\nFROM base as database_image\nARG ORACLE_HOME\nARG ORACLE_BASE\nARG CDB_NAME\nENV ORACLE_HOME=$ORACLE_HOME\nENV ORACLE_BASE=$ORACLE_BASE\nENV ORACLE_SID=$CDB_NAME\nENV LD_LIBRARY_PATH=$ORACLE_HOME/lib:/usr/lib\nUSER oracle\nCOPY --chown=oracle:dba --from=installer $ORACLE_BASE $ORACLE_BASE\nCOPY --chown=oracle:dba --from=installer /etc/oratab /etc/oratab\nCOPY --chown=oracle:dba --from=installer /etc/oraInst.loc /etc/oraInst.loc\nUSER root\nRUN $ORACLE_HOME/root.sh && rm $STAGE_DIR/oracle-preinstall.sh\nVOLUME [\"/u02\", \"/u03\"]\n# TODO: make the port number configurable\nEXPOSE 1521\n# Define default command to start Oracle Database.\nCMD exec /bin/bash\n```\n### README.md\n```\n# Cloud Build for DB Image\nThis tooling picks up the software from Cloud Storage bucket and then creates a container\nimage with the RDBMS software preinstalled. At present, it supports Oracle 19c\nand Oracle 12.2. The docker container does not contain the database, and needs\nto be created separately.\nThe base container OS is Oracle Enterprise Linux (OEL7-slim).\n## How to run\nOracle 19c EE\n```shell\n$ GCS_PATH=\n$ gcloud builds submit --config=cloudbuild.yaml --substitutions=_INSTALL_PATH=$GCS_PATH,_DB_VERSION=19c\n```\nOracle 12.2 EE\n```shell\n$ GCS_PATH=\n$ gcloud builds submit --config=cloudbuild.yaml --substitutions=_INSTALL_PATH=$GCS_PATH,_DB_VERSION=12.2\n```\nOracle 18c XE\n```shell\n$ GCS_PATH=\n$ gcloud builds submit --config=cloudbuild.yaml --substitutions=_INSTALL_PATH=$GCS_PATH,_DB_VERSION=18c,_CREATE_CDB=true,_CDB_NAME=MYDB\n```\n## Access\nWhen running the command, mentioned in Oracle 18c XE, you might see failures if the cloudbuilder\nservice account does not have 'Storage Viewer' access to the Cloud Storage bucket that\nstores the software.\n```shell\nexport PROJECT_NUMBER=\nexport BUCKET_NAME=\ngsutil iam ch serviceAccount:$PROJECT_NUMBER@cloudbuild.gserviceaccount.com:roles/storage.objectViewer gs://$BUCKET_NAME\n```\n```\n### image_build.sh\n```\n#!/bin/bash# Copyright 2021 Google LLC\n## Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 \u00a0http://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.readonly ORACLE_12=\"12.2\"readonly ORACLE_19=\"19.3\"readonly ORACLE_18=\"18c\"readonly DUMMY_VALUE=\"-1\"DB_VERSION=''EDITION='ee'CREATE_CDB=falseCDB_NAME=''CHARACTER_SET='AL32UTF8'MEM_PCT=25IMAGE_NAME_SUFFIX=''INSTALL_PATH=''NO_DRY_RUN=falseORACLE_HOME=''ORACLE_BASE=''PROJECT_ID=''LOCAL_BUILD=falseTAG=''sanity_check_params() {\u00a0 if [[ \"${CREATE_CDB}\" == true ]]; then\u00a0 \u00a0 if [ -z \"${CDB_NAME}\" ]; then\u00a0 \u00a0 \u00a0 CDB_NAME=\"GCLOUD\"\u00a0 \u00a0 fi\u00a0 \u00a0 db_name_len=\"${#CDB_NAME}\"\u00a0 \u00a0 if [[ \"${db_name_len}\" -le 0 || \"${db_name_len}\" -gt 8 ]]; then\u00a0 \u00a0 \u00a0 echo \"CDB_NAME should be less than or equal to 8 characters\"\u00a0 \u00a0 \u00a0 usage\u00a0 \u00a0 fi\u00a0 else\u00a0 \u00a0 db_name_len=\"${#CDB_NAME}\"\u00a0 \u00a0 if [[ \"${db_name_len}\" -gt 0 ]]; then\u00a0 \u00a0 \u00a0 echo \"CDB_NAME is set but CREATE_CDB is not\"\u00a0 \u00a0 \u00a0 usage\u00a0 \u00a0 fi\u00a0 fi\u00a0 if [[ -z \"${DB_VERSION}\" ]]; then\u00a0 \u00a0 echo \"Version DB_VERSION parameter is required to create images\"\u00a0 \u00a0 usage\u00a0 fi\u00a0 if [[ \"${DB_VERSION}\" != \"${ORACLE_12}\" && \"${DB_VERSION}\" != \"${ORACLE_18}\" && \"${DB_VERSION}\" != \"${ORACLE_19}\" ]]; then\u00a0 \u00a0 echo \"${DB_VERSION} is not supported, the supported versions are ${ORACLE_12} and ${ORACLE_19}\"\u00a0 \u00a0 usage\u00a0 fi\u00a0 if [ -z \"${INSTALL_PATH}\" ] && [ \"${DB_VERSION}\" != \"${ORACLE_18}\" ] && [ \"${LOCAL_BUILD}\" != true ]; then\u00a0 \u00a0 echo \"Cloud Storage path containing Oracle installation files is not provided\"\u00a0 \u00a0 usage\u00a0 fi\u00a0 if [[ \"${MEM_PCT}\" -le 0 || \"${MEM_PCT}\" -gt 100 ]]; then\u00a0 \u00a0 echo \"MEM_PCT should be between 0 and 100\"\u00a0 \u00a0 usage\u00a0 fi\u00a0 if [[ \"${DB_VERSION}\" == \"${ORACLE_18}\" ]]; then\u00a0 \u00a0 EDITION=\"xe\"\u00a0 fi}usage() {\u00a0 echo \"------USAGE------\u00a0 This tool allows you to build oracle database container images.\u00a0 You have the option of using the Google Cloud build script or performing a local build by setting the --local_build flag to true.\u00a0 Sanity checks are conducted on your inputs and safe defaults are used as necessary.\u00a0 image_build.sh --db_version [12.2, 19.3 or 18c] --create_cdb [true or false] --cdb_name [CDB_NAME] --install_path [INSTALL_PATH]\u00a0 REQUIRED FLAGS\u00a0 \u00a0 \u00a0--install_path\u00a0 \u00a0 \u00a0 \u00a0Cloud Storage path containing Oracle Database EE installation files.\u00a0 \u00a0 \u00a0 \u00a0This flag is only required when using Google Cloud Build.\u00a0 \u00a0 \u00a0 \u00a0You do not need to specify this parameter for Oracle 18c XE.\u00a0 \u00a0 \u00a0--db_version\u00a0 \u00a0 \u00a0 \u00a0Version of the Oracle database.\u00a0 \u00a0 \u00a0--create_cdb\u00a0 \u00a0 \u00a0 \u00a0Specifies whether a CDB should be created. Must be set to 'true' if using Oracle 18c.\u00a0 OPTIONAL FLAGS\u00a0 \u00a0 \u00a0--cdb_name\u00a0 \u00a0 \u00a0 \u00a0Name of the CDB to create. Defaults to 'GCLOUD' if unspecified.\u00a0 \u00a0 \u00a0--edition\u00a0 \u00a0 \u00a0 \u00a0Edition of the Oracle database. ee is used if unspecified.\u00a0 \u00a0 \u00a0 \u00a0This flag is not supported for Oracle 18c and will be ignored.\u00a0 \u00a0 \u00a0--patch_version\u00a0 \u00a0 \u00a0 \u00a0Version of the Oracle database PSU.\u00a0 \u00a0 \u00a0 \u00a0If unspecified, 31741641 is used as the default value for 12.2 ,\u00a0 \u00a0 \u00a0 \u00a032545013 is used as the default value for 19.3 .\u00a0 \u00a0 \u00a0 \u00a0This flag is not supported for Oracle 18c and will be ignored.\u00a0 \u00a0 \u00a0--local_build\u00a0 \u00a0 \u00a0 \u00a0if true, docker is used to build an image locally. If false or unspecified, Google Cloud Build is used to build the image.\u00a0 \u00a0 \u00a0--project_id\u00a0 \u00a0 \u00a0 \u00a0project_id Google Cloud project to use for image build. If unspecified, your default gcloud project will be used.\u00a0 \u00a0 \u00a0 \u00a0For local builds, this flag can be set to 'local-build'.\u00a0 \u00a0 \u00a0--mem_pct\u00a0 \u00a0 \u00a0 \u00a0Percentage of memory.\u00a0 \u00a0 \u00a0 \u00a0This flag is not supported for Oracle 18c and will be ignored.\u00a0 \u00a0 \u00a0--character_set\u00a0 \u00a0 \u00a0 \u00a0Character set for the newly created CDB\u00a0 \u00a0 \u00a0--tag\u00a0 \u00a0 \u00a0 \u00a0Tag that should be applied to the image.\u00a0 \u00a0 \u00a0 \u00a0If a tag is not specified, 'gcr.io/\\$GCR_PROJECT_ID/oracle-database-images/oracle-\\${DB_VERSION}-\\${EDITION}-\\${IMAGE_NAME_SUFFIX}:latest' is used.\u00a0 \u00a0 \u00a0--no_dry_run\u00a0 \u00a0 \u00a0 \u00a0Run command in full mode. \u00a0Will execute actions.\u00a0 \u00a0 \u00a0 \u00a0\"\u00a0 \u00a0 exit 1}function parse_arguments() {\u00a0 opts=$(getopt -o i:v:c:n:p:m:c:h \\\u00a0 \u00a0 --longoptions install_path:,db_version:,edition:,create_cdb:,cdb_name:,mem_pct:,character_set:,help:,project_id:,patch_version:,local_build:,tag:,no_dry_run,help \\\u00a0 \u00a0 -n \"$(basename \"$0\")\" -- \"$@\")\u00a0 eval set -- \"$opts\"\u00a0 while true; do\u00a0 \u00a0 case \"$1\" in\u00a0 \u00a0 -i | --install_path)\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 INSTALL_PATH=$1\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 -v | --db_version)\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 DB_VERSION=$1\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 -e | --edition)\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 EDITION=$1\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 -c | --create_cdb)\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 CREATE_CDB=$1\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 -n | --cdb_name)\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 CDB_NAME=$1\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 -m | --mem_pct)\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 MEM_PCT=$1\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 --character_set)\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 CHARACTER_SET=$1\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 --patch_version)\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 PATCH_VERSION=$1\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 --project_id)\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 PROJECT_ID=$1\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 --local_build)\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 LOCAL_BUILD=$1\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 -t | --tag)\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 TAG=$1\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 -h | --help)\u00a0 \u00a0 \u00a0 usage\u00a0 \u00a0 \u00a0 return 1\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 --no_dry_run)\u00a0 \u00a0 \u00a0 NO_DRY_RUN=true\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 --)\u00a0 \u00a0 \u00a0 shift\u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 *)\u00a0 \u00a0 \u00a0 echo Invalid argument \"$1\"\u00a0 \u00a0 \u00a0 usage\u00a0 \u00a0 \u00a0 exit 1\u00a0 \u00a0 \u00a0 ;;\u00a0 \u00a0 esac\u00a0 done}execute_command() {\u00a0 IMAGE_NAME_SUFFIX=$(echo \"$CDB_NAME\" | tr '[:upper:]' '[:lower:]')\u00a0 if [ -z \"${PROJECT_ID}\" ]; then\u00a0 \u00a0 PROJECT_ID=$(gcloud config get-value project 2>/dev/null)\u00a0 \u00a0 echo \"Project not specified, falling back on current gcloud default:\"\u00a0 \u00a0 echo \"$PROJECT_ID\"\u00a0 fi\u00a0 if [ -z \"${PATCH_VERSION}\" ]; then\u00a0 \u00a0 PATCH_VERSION=\"${DUMMY_VALUE}\"\u00a0 fi\u00a0 GCR_PROJECT_ID=$(echo \"$PROJECT_ID\" | tr : /)\u00a0 if [[ \"${CREATE_CDB}\" == true ]]; then\u00a0 \u00a0 IMAGE_NAME_SUFFIX=\"seeded-${IMAGE_NAME_SUFFIX}\"\u00a0 else\u00a0 \u00a0 IMAGE_NAME_SUFFIX=\"unseeded\"\u00a0 \u00a0 CDB_NAME=\"\"\u00a0 fi\u00a0 if [ \"${DB_VERSION}\" == \"${ORACLE_18}\" ] && [ \"${EDITION}\" == \"xe\" ]; then\u00a0 \u00a0 ORACLE_HOME=\"/opt/oracle/product/18c/dbhomeXE\"\u00a0 \u00a0 ORACLE_BASE=\"/opt/oracle\"\u00a0 else\u00a0 \u00a0 ORACLE_HOME=\"/u01/app/oracle/product/${DB_VERSION}/db\"\u00a0 \u00a0 ORACLE_BASE=\"/u01/app/oracle\"\u00a0 fi\u00a0 if [ -z \"${TAG}\" ]; then\u00a0 \u00a0 TAG=\"gcr.io/${GCR_PROJECT_ID}/oracle-database-images/oracle-${DB_VERSION}-${EDITION}-${IMAGE_NAME_SUFFIX}:latest\"\u00a0 fi\u00a0 if [ \"${LOCAL_BUILD}\" == true ]; then\u00a0 \u00a0 BUILD_CMD=$(echo docker build --no-cache --build-arg=DB_VERSION=\"${DB_VERSION}\" --build-arg=ORACLE_HOME=\"${ORACLE_HOME}\" --build-arg=ORACLE_BASE=\"${ORACLE_BASE}\" --build-arg=CREATE_CDB=\"${CREATE_CDB}\" --build-arg=CDB_NAME=\"${CDB_NAME}\" --build-arg=CHARACTER_SET=\"${CHARACTER_SET}\" --build-arg=MEM_PCT=\"${MEM_PCT}\" --build-arg=EDITION=\"${EDITION}\" --build-arg=PATCH_VERSION=\"${PATCH_VERSION}\" --tag=\"$TAG\" .)\u00a0 else\u00a0 \u00a0 if [ \"${DB_VERSION}\" == \"${ORACLE_18}\" ]; then\u00a0 \u00a0 \u00a0 BUILD_CMD=$(echo gcloud builds submit --project=${PROJECT_ID} --config=cloudbuild-18c-xe.yaml --substitutions=_ORACLE_HOME=\"${ORACLE_HOME}\",_ORACLE_BASE=\"${ORACLE_BASE}\",_CDB_NAME=\"${CDB_NAME}\",_CHARACTER_SET=\"${CHARACTER_SET}\",_TAG=\"${TAG}\")\u00a0 \u00a0 else\u00a0 \u00a0 \u00a0 BUILD_CMD=$(echo gcloud builds submit --project=${PROJECT_ID} --config=cloudbuild.yaml --substitutions=_INSTALL_PATH=\"${INSTALL_PATH}\",_DB_VERSION=\"${DB_VERSION}\",_EDITION=\"${EDITION}\",_ORACLE_HOME=\"${ORACLE_HOME}\",_ORACLE_BASE=\"${ORACLE_BASE}\",_CREATE_CDB=\"${CREATE_CDB}\",_CDB_NAME=\"${CDB_NAME}\",_CHARACTER_SET=\"${CHARACTER_SET}\",_MEM_PCT=\"${MEM_PCT}\",_TAG=\"${TAG}\",_PATCH_VERSION=\"${PATCH_VERSION}\")\u00a0 \u00a0 fi\u00a0 fi\u00a0 if [[ \"$NO_DRY_RUN\" == true ]]; then\u00a0 \u00a0 echo \"Executing the following command:\"\u00a0 \u00a0 echo \"$BUILD_CMD\"\u00a0 \u00a0 ${BUILD_CMD}\u00a0 else\u00a0 \u00a0 echo \"Dry run mode: the command would have executed as follows:\"\u00a0 \u00a0 echo \"$BUILD_CMD\"\u00a0 fi}main() {\u00a0 parse_arguments \"$@\"\u00a0 sanity_check_params\u00a0 date\u00a0 time execute_command}main \"$@\"\n```\n### install-oracle-18c-xe.sh\n```\n#!/bin/bash# Copyright 2021 Google LLC\n## Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 \u00a0http://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.# shellcheck disable=2153set -xset -eset -uexport PATH=\"/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin\"readonly CDB_NAME=${1:-GCLOUD}readonly CHARACTER_SET=${2:-AL32UTF8}readonly USER=\"oracle\"readonly GROUP=\"dba\"readonly OHOME=\"/opt/oracle/product/18c/dbhomeXE\"readonly DB_VERSION=\"18c\"set_environment() {\u00a0 export ORACLE_DOCKER_INSTALL=true\u00a0 source \"/home/oracle/${CDB_NAME}.env\"}install_oracle() {\u00a0 yum -y localinstall https://download.oracle.com/otn-pub/otn_software/db-express/oracle-database-xe-18c-1.0-1.x86_64.rpm}write_oracle_config() {\u00a0 echo \"\\CHARSET=${CHARACTER_SET}ORACLE_SID=${CDB_NAME}SKIP_VALIDATIONS=FALSE\" > /etc/sysconfig/oracle-xe-18c.conf}create_cdb() {\u00a0 local syspass=\"$(openssl rand -base64 16 | tr -dc a-zA-Z0-9)\"\u00a0 (echo \"${syspass}\"; echo \"${syspass}\";) | /etc/init.d/oracle-xe-18c configure}set_file_ownership() {\u00a0 chown -R \"${USER}:${GROUP}\" \"${OHOME}\"\u00a0 chown -R \"${USER}:${GROUP}\" \"/home/${USER}\"\u00a0 chown \"${USER}:${GROUP}\" /etc/oraInst.loc\u00a0 chown -R \"${USER}:${GROUP}\" /opt}shutdown_oracle() {\u00a0 run_sql \"shutdown immediate;\"\u00a0 echo \"Oracle Database Shutdown\"}delete_xe_pdb() {\u00a0 run_sql \"ALTER PLUGGABLE DATABASE XEPDB1 CLOSE;\"\u00a0 run_sql \"DROP PLUGGABLE DATABASE XEPDB1 INCLUDING DATAFILES;\"}run_sql() {\u00a0 echo \"${1}\" | sudo -E -u oracle \"${ORACLE_HOME}/bin/sqlplus\" -S / as sysdba}main() {\u00a0 echo \"Running Oracle 18c XE install script...\"\u00a0 set_environment\u00a0 install_oracle\u00a0 write_oracle_config\u00a0 create_cdb\u00a0 set_file_ownership\u00a0 delete_xe_pdb\u00a0 shutdown_oracle\u00a0 echo \"Oracle 18c XE installation succeeded!\"}main\n```\n### install-oracle.sh\n```\n#!/bin/bash# Copyright 2021 Google LLC\n## Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 \u00a0http://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.# shellcheck disable=2153set -xset -eset -uexport PATH=\"/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin\"readonly DB_VERSION=\"$1\"readonly EDITION=\"$2\"readonly CREATE_CDB=\"$3\"readonly CDB_NAME=\"$4\"readonly CHARACTER_SET=${5:-AL32UTF8}readonly MEM_PCT=${6:-25}PATCH_VERSION=\"$7\"readonly INIT_PARAMS=\"log_archive_dest_1='LOCATION=USE_DB_RECOVERY_FILE_DEST',enable_pluggable_database=TRUE,common_user_prefix='gcsql$'\"readonly USER='oracle'readonly GROUP='dba'readonly OCM_FILE=\"ocm.rsp\"readonly OHOME=\"/u01/app/oracle/product/${DB_VERSION}/db\"readonly ORACLE_12=\"12.2\"readonly ORACLE_19=\"19.3\"setup_patching() {\u00a0 if [[ \"${PATCH_VERSION}\" == \"-1\" ]]; then\u00a0 \u00a0 if [[ \"${DB_VERSION}\" == \"${ORACLE_12}\" ]]; then\u00a0 \u00a0 \u00a0 PATCH_VERSION=\"31741641\"\u00a0 \u00a0 elif [[ \"${DB_VERSION}\" == \"${ORACLE_19}\" ]]; then\u00a0 \u00a0 \u00a0 PATCH_VERSION=\"32545013\"\u00a0 \u00a0 fi\u00a0 fi\u00a0 local patch_suffix\u00a0 if [[ \"${DB_VERSION}\" == \"${ORACLE_12}\" ]]; then\u00a0 \u00a0 patch_suffix=\"_122010_Linux-x86-64.zip\"\u00a0 elif [[ \"${DB_VERSION}\" == \"${ORACLE_19}\" ]]; then\u00a0 \u00a0 patch_suffix=\"_190000_Linux-x86-64.zip\"\u00a0 fi\u00a0 PATCH_ZIP=\"p${PATCH_VERSION}${patch_suffix}\"\u00a0 if [[ ! -f \"${STAGE_DIR}\"/\"${PATCH_ZIP}\" ]]; then\u00a0 \u00a0 echo \"could not find the PSU zip in ${STAGE_DIR}/${PATCH_ZIP}, possible fixes:if '--local_build' is enabled, try stage ${PATCH_ZIP} to the same directory with image_build.sh.if '--local_build' is disabled, try stage ${PATCH_ZIP} to the gcs bucket.Update '--patch_version' when running image_build.sh, the script assumes the file name is 'p<var>patch_version</var>${patch_suffix}'.\"\u00a0 \u00a0 exit 1\u00a0 fi}setup_installers() {\u00a0 if [[ \"${DB_VERSION}\" == \"${ORACLE_12}\" ]]; then\u00a0 \u00a0 local -g INSTALL_CONFIG=\"ora12-config.sh\"\u00a0 \u00a0 # shellcheck source=ora12-config.sh\u00a0 \u00a0 source \"${STAGE_DIR}\"/\"${INSTALL_CONFIG}\"\u00a0 \u00a0 local -g CHECKSUM_FILE=\"checksum.sha256.12\"\u00a0 elif [[ \"${DB_VERSION}\" == \"${ORACLE_19}\" ]]; then\u00a0 \u00a0 local -g INSTALL_CONFIG=\"ora19-config.sh\"\u00a0 \u00a0 # shellcheck source=ora19-config.sh\u00a0 \u00a0 source \"${STAGE_DIR}\"/\"${INSTALL_CONFIG}\"\u00a0 \u00a0 local -g CHECKSUM_FILE=\"checksum.sha256.19\"\u00a0 else\u00a0 \u00a0 echo \"DB version ${DB_VERSION} not supported\"\u00a0 \u00a0 exit 1\u00a0 fi\u00a0 _fallback_install_file\u00a0 _fallback_opatch_file}_fallback_install_file() {\u00a0 if [[ -f \"${STAGE_DIR}\"/\"${INSTALL_ZIP}\" ]]; then\u00a0 \u00a0 echo \"found DB installer zip ${STAGE_DIR}/${INSTALL_ZIP}, install will use ${INSTALL_ZIP}\"\u00a0 \u00a0 return\u00a0 fi\u00a0 # installer zip can be downloaded either from OTN or edelivery\u00a0 # default file name for edelivery: V839960-01.zip\u00a0 # default file name for OTN: linuxx64_12201_database.zip\u00a0 local candidates=(\"linuxx64_12201_database.zip\")\u00a0 if [[ \"${DB_VERSION}\" == \"${ORACLE_19}\" ]]; then\u00a0 \u00a0 candidates=(\"LINUX.X64_193000_db_home.zip\")\u00a0 fi\u00a0 echo \"could not find the specified DB installer zip. Will try falling back to one of these possible names:\" \"${candidates[@]}\"\u00a0 for f in \"${candidates[@]}\"; do\u00a0 \u00a0 if [[ -f \"${STAGE_DIR}\"/\"${f}\" ]]; then\u00a0 \u00a0 \u00a0 echo \"found DB installer zip ${STAGE_DIR}/${f},install will use ${f}\"\u00a0 \u00a0 \u00a0 INSTALL_ZIP=\"${f}\"\u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 else\u00a0 \u00a0 \u00a0 echo \"could not find fallback DB installer zip ${STAGE_DIR}/${f}, try specifying an installer from one of these possible names:\" \"${candidates[@]}\"\u00a0 \u00a0 fi\u00a0 done}_fallback_opatch_file() {\u00a0 if [[ -f \"${STAGE_DIR}\"/\"${OPATCH_ZIP}\" ]]; then\u00a0 \u00a0 echo \"found opatch zip ${STAGE_DIR}/${OPATCH_ZIP}, install will use ${OPATCH_ZIP}\"\u00a0 \u00a0 return\u00a0 fi\u00a0 # OPATCH_ZIP can be p6880880_200000_Linux-x86-64.zip, p6880880_190000_Linux-x86-64.zip\u00a0 # p6880880_180000_Linux-x86-64.zip, p6880880_122010_Linux-x86-64.zip\u00a0 # for 04302020 OPATCH, their sha256sum are identical \"B08320195434559D9662729C5E02ABC8436A5C602B4355CC33A673F24D9D174\"\u00a0 local candidates=(\u00a0 \u00a0 \"p6880880_200000_Linux-x86-64.zip\"\u00a0 \u00a0 \"p6880880_190000_Linux-x86-64.zip\"\u00a0 \u00a0 \"p6880880_180000_Linux-x86-64.zip\"\u00a0 \u00a0 \"p6880880_122010_Linux-x86-64.zip\"\u00a0 )\u00a0 echo \"cannot find opatch zip from config, try one of possible names\" \"${candidates[@]}\"\u00a0 for f in \"${candidates[@]}\"; do\u00a0 \u00a0 if [[ -f \"${STAGE_DIR}\"/\"${f}\" ]]; then\u00a0 \u00a0 \u00a0 echo \"found opatch zip ${STAGE_DIR}/${f},install will use ${f}\"\u00a0 \u00a0 \u00a0 OPATCH_ZIP=\"${f}\"\u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 else\u00a0 \u00a0 \u00a0 echo \"cannot find opatch zip ${STAGE_DIR}/${f}, try fallback to other possible names\"\u00a0 \u00a0 fi\u00a0 done}setup_ocm() {\u00a0 if [[ \"${DB_VERSION}\" == \"${ORACLE_19}\" ]]; then\u00a0 \u00a0 echo \"oracle.install.responseFileVersion=/oracle/install/rspfmt_dbinstall_response_schema_v19.0.0\" >\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 elif [[ \"${DB_VERSION}\" == \"${ORACLE_12}\" ]]; then\u00a0 \u00a0 echo \"oracle.install.responseFileVersion=/oracle/install/rspfmt_dbinstall_response_schema_v12.2.0\" >\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 else\u00a0 \u00a0 echo \"Unsupported version ${DB_VERSION}\"\u00a0 \u00a0 exit 1\u00a0 fi\u00a0 echo \"oracle.install.option=INSTALL_DB_SWONLY\" >>\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 echo \"UNIX_GROUP_NAME=dba\" >>\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 echo \"INVENTORY_LOCATION=/u01/app/oracle/oraInventory\" >>\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 echo \"ORACLE_HOME=${OHOME}\" >>\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 echo \"ORACLE_BASE=/u01/app/oracle\" >>\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 echo \"oracle.install.db.InstallEdition=${EDITION}\" >>\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 echo \"oracle.install.db.OSDBA_GROUP=dba\" >>\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 echo \"oracle.install.db.OSOPER_GROUP=dba\" >>\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 echo \"oracle.install.db.OSBACKUPDBA_GROUP=dba\" >>\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 echo \"oracle.install.db.OSDGDBA_GROUP=dba\" >>\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 echo \"oracle.install.db.OSKMDBA_GROUP=dba\" >>\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 echo \"oracle.install.db.OSRACDBA_GROUP=dba\" >>\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 echo \"SECURITY_UPDATES_VIA_MYORACLESUPPORT=false\" >>\"${STAGE_DIR}/${OCM_FILE}\"\u00a0 echo \"DECLINE_SECURITY_UPDATES=true\" >>\"${STAGE_DIR}/${OCM_FILE}\"}setup_directories() {\u00a0 mkdir -p \"${STAGE_DIR}/patches\"\u00a0 chown \"${USER}:${GROUP}\" \"${STAGE_DIR}/patches\"}patch_oracle() {\u00a0 cd \"${STAGE_DIR}/patches/${PATCH_VERSION}/${PATCH_VERSION}\"\u00a0 sudo -E -u oracle \"${OHOME}/OPatch/opatch\" \\\u00a0 \u00a0 apply -silent -ocmrf \"${STAGE_DIR}/${OCM_FILE}\"}checksum_files() {\u00a0 cd \"${STAGE_DIR}\"\u00a0 cat >\"${CHECKSUM_FILE}\" <<EOF${INSTALL_ZIP_SHA256} ${INSTALL_ZIP}EOF\u00a0 cat \"${CHECKSUM_FILE}\"\u00a0 if ! sha256sum -c \"${STAGE_DIR}/${CHECKSUM_FILE}\" --quiet; then\u00a0 \u00a0 echo \"Checksum failure of installables.\"\u00a0 \u00a0 echo \"try double check ${INSTALL_CONFIG} DB install/OPatch/PSUs filename and sha256, ensure they are matched with Cloud Storage bucket staged zip files\"\u00a0 \u00a0 exit 1\u00a0 fi}install_oracle() {\u00a0 if [[ \"${DB_VERSION}\" == \"${ORACLE_12}\" ]]; then\u00a0 \u00a0 install_oracle12\u00a0 elif [[ \"${DB_VERSION}\" == \"${ORACLE_19}\" ]]; then\u00a0 \u00a0 install_oracle19\u00a0 fi}install_oracle19() {\u00a0 printf \"inventory_loc=/u01/app/oracle/oraInventory\\ninst_group=dba\\n\" \\\u00a0 \u00a0 >>/etc/oraInst.loc\u00a0 chown \"${USER}:${GROUP}\" /etc/oraInst.loc\u00a0 cd \"${OHOME}\"\u00a0 export CV_ASSUME_DISTID=OL7\u00a0 sudo -E -u oracle \"${OHOME}/runInstaller\" \\\u00a0 \u00a0 -silent \\\u00a0 \u00a0 -waitforcompletion \\\u00a0 \u00a0 -ignorePrereqFailure \\\u00a0 \u00a0 INVENTORY_LOCATION=/etc/oraInst.loc \\\u00a0 \u00a0 UNIX_GROUP_NAME=dba \\\u00a0 \u00a0 ORACLE_HOME=\"${OHOME}\" \\\u00a0 \u00a0 ORACLE_BASE=/u01/app/oracle \\\u00a0 \u00a0 oracle.install.db.InstallEdition=\"${EDITION}\" \\\u00a0 \u00a0 oracle.install.db.OSDBA_GROUP=\"${GROUP}\" \\\u00a0 \u00a0 oracle.install.db.OSOPER_GROUP=\"${GROUP}\" \\\u00a0 \u00a0 oracle.install.db.OSBACKUPDBA_GROUP=\"${GROUP}\" \\\u00a0 \u00a0 oracle.install.db.OSDGDBA_GROUP=\"${GROUP}\" \\\u00a0 \u00a0 oracle.install.db.OSKMDBA_GROUP=\"${GROUP}\" \\\u00a0 \u00a0 oracle.install.db.OSRACDBA_GROUP=\"${GROUP}\" \\\u00a0 \u00a0 oracle.install.option=INSTALL_DB_SWONLY ||\u00a0 \u00a0 (($? == 6)) # Check for successful install with warning suppressed.\u00a0 enable_unified_auditing\u00a0 \"${OHOME}/root.sh\"}install_oracle12() {\u00a0 printf \"inventory_loc=/u01/app/oracle/oraInventory\\ninst_group=dba\\n\" \\\u00a0 \u00a0 >>/etc/oraInst.loc\u00a0 chown \"${USER}:${GROUP}\" /etc/oraInst.loc\u00a0 sudo -u oracle \"${STAGE_DIR}/database/runInstaller\" \\\u00a0 \u00a0 -silent \\\u00a0 \u00a0 -force \\\u00a0 \u00a0 -invptrloc /etc/oraInst.loc \\\u00a0 \u00a0 -waitforcompletion \\\u00a0 \u00a0 -ignoresysprereqs \\\u00a0 \u00a0 -ignoreprereq \\\u00a0 \u00a0 UNIX_GROUP_NAME=dba \\\u00a0 \u00a0 ORACLE_HOME=\"${OHOME}\" \\\u00a0 \u00a0 ORACLE_BASE=/u01/app/oracle \\\u00a0 \u00a0 oracle.install.db.InstallEdition=\"${EDITION}\" \\\u00a0 \u00a0 oracle.install.db.OSDBA_GROUP=\"${GROUP}\" \\\u00a0 \u00a0 oracle.install.db.OSOPER_GROUP=\"${GROUP}\" \\\u00a0 \u00a0 oracle.install.db.OSBACKUPDBA_GROUP=\"${GROUP}\" \\\u00a0 \u00a0 oracle.install.db.OSDGDBA_GROUP=\"${GROUP}\" \\\u00a0 \u00a0 oracle.install.db.OSKMDBA_GROUP=\"${GROUP}\" \\\u00a0 \u00a0 oracle.install.db.OSRACDBA_GROUP=\"${GROUP}\" \\\u00a0 \u00a0 oracle.install.option=INSTALL_DB_SWONLY ||\u00a0 \u00a0 (($? == 6)) # Check for successful install with warning suppressed.\u00a0 enable_unified_auditing\u00a0 \"${OHOME}/root.sh\"}enable_unified_auditing() {\u00a0 cd \"${OHOME}/rdbms/lib\"\u00a0 sudo -u oracle \\\u00a0 \u00a0 make -f ins_rdbms.mk uniaud_on ioracle ORACLE_HOME=\"${OHOME}\"}create_cdb() {\u00a0 local syspass=\"$(openssl rand -base64 16 | tr -dc a-zA-Z0-9)\"\u00a0 sudo -u oracle \"${OHOME}/bin/dbca\" \\\u00a0 \u00a0 -silent \\\u00a0 \u00a0 -createDatabase \\\u00a0 \u00a0 -templateName General_Purpose.dbc \\\u00a0 \u00a0 -gdbname \"${CDB_NAME}\" \\\u00a0 \u00a0 -createAsContainerDatabase true \\\u00a0 \u00a0 -sid \"${CDB_NAME}\" \\\u00a0 \u00a0 -responseFile NO_VALUE \\\u00a0 \u00a0 -characterSet \"${CHARACTER_SET}\" \\\u00a0 \u00a0 -memoryPercentage \"${MEM_PCT}\" \\\u00a0 \u00a0 -emConfiguration NONE \\\u00a0 \u00a0 -datafileDestination \"/u01/app/oracle/oradata\" \\\u00a0 \u00a0 -storageType FS \\\u00a0 \u00a0 -initParams \"${INIT_PARAMS}\" \\\u00a0 \u00a0 -databaseType MULTIPURPOSE \\\u00a0 \u00a0 -recoveryAreaDestination /u01/app/oracle/fast_recovery_area \\\u00a0 \u00a0 -sysPassword \"${syspass}\" \\\u00a0 \u00a0 -systemPassword \"${syspass}\"}set_environment() {\u00a0 source \"/home/oracle/${CDB_NAME}.env\"}cleanup_post_success() {\u00a0 # ORDS\u00a0 rm -rf \"${OHOME}/ords\" &&\u00a0 \u00a0 # SQL Developer\u00a0 \u00a0 rm -rf \"${OHOME}/sqldeveloper\" &&\u00a0 \u00a0 # UCP connection pool\u00a0 \u00a0 rm -rf \"${OHOME}/ucp\" &&\u00a0 \u00a0 # All installer files\u00a0 \u00a0 rm -rf \"${OHOME}/lib/*.zip\" &&\u00a0 \u00a0 # OUI backup\u00a0 \u00a0 rm -rf \"${OHOME}/inventory/backup/*\" &&\u00a0 \u00a0 # Network tools help\u00a0 \u00a0 rm -rf \"${OHOME}/network/tools/help\" &&\u00a0 \u00a0 # Database upgrade assistant\u00a0 \u00a0 rm -rf \"${OHOME}/assistants/dbua\" &&\u00a0 \u00a0 # Database migration assistant\u00a0 \u00a0 rm -rf \"${OHOME}/dmu\" &&\u00a0 \u00a0 # Remove pilot workflow installer\u00a0 \u00a0 rm -rf \"${OHOME}/install/pilot\" &&\u00a0 \u00a0 # Support tools\u00a0 \u00a0 rm -rf \"${OHOME}/suptools\" &&\u00a0 \u00a0 # Temp location\u00a0 \u00a0 rm -rf /tmp/* &&\u00a0 \u00a0 # Install files\u00a0 \u00a0 rm -rf \"${STAGE_DIR}\"}unzip_binaries() {\u00a0 if [[ \"${DB_VERSION}\" == \"${ORACLE_12}\" ]]; then\u00a0 \u00a0 chown -R \"${USER}:${GROUP}\" \"${STAGE_DIR}\"\u00a0 \u00a0 sudo -u oracle unzip \"${STAGE_DIR}/${INSTALL_ZIP}\" -d \"${STAGE_DIR}\"\u00a0 elif [[ \"${DB_VERSION}\" == \"${ORACLE_19}\" ]]; then\u00a0 \u00a0 sudo -u oracle unzip \"${STAGE_DIR}/${INSTALL_ZIP}\" -d \"${OHOME}\"\u00a0 fi\u00a0 sudo -u oracle unzip \"${STAGE_DIR}/${PATCH_ZIP}\" -d \"${STAGE_DIR}/patches/${PATCH_VERSION}\"\u00a0 rm \"${STAGE_DIR}/${INSTALL_ZIP}\"\u00a0 rm \"${STAGE_DIR}/${PATCH_ZIP}\"}shutdown_oracle() {\u00a0 run_sql \"shutdown immediate;\"\u00a0 echo \"Oracle Database Shutdown\"}run_sql() {\u00a0 echo \"${1}\" | sudo -E -u oracle \"${OHOME}/bin/sqlplus\" -S / as sysdba}patch_log4j(){\u00a0 # Delete Jndi classes from log4j jars as part of CVE-2021-44228\u00a0 # While waiting for oracle patches.\u00a0 for f in $(find \"${OHOME}\" -type f -name \"log4j-core*.jar\"); do\u00a0 \u00a0 sudo -u oracle zip -q -d \"$f\" org/apache/logging/log4j/core/lookup/JndiLookup.class || true\u00a0 done}main() {\u00a0 setup_patching\u00a0 setup_installers\u00a0 checksum_files\u00a0 setup_directories\u00a0 setup_ocm\u00a0 if [[ \"${CREATE_CDB}\" == true ]]; then\u00a0 \u00a0 set_environment\u00a0 fi\u00a0 chown -R \"${USER}:${GROUP}\" /u01\u00a0 unzip_binaries\u00a0 install_oracle\u00a0 rm -rf \"${OHOME}/OPatch\"\u00a0 sudo -u oracle unzip \"${STAGE_DIR}/${OPATCH_ZIP}\" -d \"${OHOME}\"\u00a0 patch_oracle\u00a0 if [[ \"${CREATE_CDB}\" == true ]]; then\u00a0 \u00a0 create_cdb\u00a0 \u00a0 shutdown_oracle\u00a0 fi\u00a0 chown \"${USER}:${GROUP}\" /etc/oratab\u00a0 cleanup_post_success\u00a0 patch_log4j\u00a0 echo \"Oracle installation success\"}main\n```\n### ora12-config.sh\n```\n#!/bin/bash# Copyright 2021 Google LLC\n## Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 \u00a0http://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.INSTALL_ZIP=\"V839960-01.zip\"INSTALL_ZIP_SHA256=\"96ed97d21f15c1ac0cce3749da6c3dac7059bb60672d76b008103fc754d22dde\"OPATCH_ZIP=\"p6880880_122010_Linux-x86-64.zip\"OPATCH_ZIP_SHA256=\"b08320195434559d9662729c5e02abc8436a5c602b4355cc33a673f24d9d1740\"\n```\n### ora19-config.sh\n```\n#!/bin/bash# Copyright 2021 Google LLC\n## Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 \u00a0http://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.INSTALL_ZIP=\"V982063-01.zip\"INSTALL_ZIP_SHA256=\"ba8329c757133da313ed3b6d7f86c5ac42cd9970a28bf2e6233f3235233aa8d8\"OPATCH_ZIP=\"p6880880_190000_Linux-x86-64.zip\"OPATCH_ZIP_SHA256=\"b08320195434559d9662729c5e02abc8436a5c602b4355cc33a673f24d9d1740\"\n```\n### oracle-preinstall.sh\n```\n#!/bin/bash# Copyright 2021 Google LLC\n## Licensed under the Apache License, Version 2.0 (the \"License\");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 \u00a0http://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an \"AS IS\" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.set -xset -eset -ureadonly ORACLE_12=\"12.2\"readonly ORACLE_18=\"18c\"readonly ORACLE_19=\"19.3\"readonly USER='oracle'readonly GROUP='dba'install_packages() {\u00a0 yum install -y shadow-utils openssl sudo zip\u00a0 yum install -y nmap-ncat.x86_64\u00a0 yum install -y strace.x86_64\u00a0 yum install -y net-tools.x86_64\u00a0 yum install -y lsof.x86_64\u00a0 yum install -y \"${PREINSTALL_RPM}\"\u00a0 echo \"#%PAM-1.0auth \u00a0 \u00a0 \u00a0 include \u00a0 \u00a0 \u00a0system-authaccount \u00a0 \u00a0include \u00a0 \u00a0 \u00a0system-authpassword \u00a0 include \u00a0 \u00a0 \u00a0system-auth\" >/etc/pam.d/sudo\u00a0 if [[ \"${DB_VERSION}\" == \"${ORACLE_18}\" ]]; then\u00a0 \u00a0 \u00a0 \u00a0 echo \"#%PAM-1.0auth \u00a0 \u00a0 \u00a0 \u00a0sufficient \u00a0pam_rootok.soauth \u00a0 \u00a0 \u00a0 \u00a0substack \u00a0 \u00a0system-authauth \u00a0 \u00a0 \u00a0 \u00a0include \u00a0 \u00a0 postloginaccount \u00a0 \u00a0 sufficient \u00a0pam_succeed_if.so uid = 0 use_uid quietaccount \u00a0 \u00a0 include \u00a0 \u00a0 system-authpassword \u00a0 \u00a0include \u00a0 \u00a0 system-authsession \u00a0 \u00a0 include \u00a0 \u00a0 postloginsession \u00a0 \u00a0 optional \u00a0 \u00a0pam_xauth.so\" >/etc/pam.d/su\u00a0 fi}# Update cryptographic modules from ol7_u8_security_validation repository# https://docs.oracle.com/en/operating-systems/oracle-linux/7/security/security-FIPS1402ComplianceinOracleLinux7.html#ol7-fipsupdate_packages_fips() {\u00a0 yum-config-manager --enable ol7_u8_security_validation ol7_latest\u00a0 # To ensure that packages are updated from the security repo, disable other repos and only\u00a0 # enable the security repo.\u00a0 yum -y --disablerepo=\"*\" --enablerepo=\"ol7_u8_security_validation\" update \\\u00a0 \u00a0 openssl-libs\\\u00a0 \u00a0 openssh-clients\\\u00a0 \u00a0 openssh-server\\\u00a0 \u00a0 libgcrypt\\\u00a0 \u00a0 nss-softokn\\\u00a0 \u00a0 libreswan\\\u00a0 \u00a0 gnutls\\\u00a0 \u00a0 kernel-uek}pick_pre_installer() {\u00a0 if [[ \"${DB_VERSION}\" == \"${ORACLE_12}\" ]]; then\u00a0 \u00a0 local -g PREINSTALL_RPM=\"oracle-database-server-12cR2-preinstall.x86_64\"\u00a0 elif [[ \"${DB_VERSION}\" == \"${ORACLE_18}\" ]]; then\u00a0 \u00a0 local -g PREINSTALL_RPM=\"oracle-database-preinstall-18c.x86_64\"\u00a0 elif [[ \"${DB_VERSION}\" == \"${ORACLE_19}\" ]]; then\u00a0 \u00a0 local -g PREINSTALL_RPM=\"oracle-database-preinstall-19c.x86_64\"\u00a0 else\u00a0 \u00a0 echo \"DB version ${DB_VERSION} not supported\"\u00a0 \u00a0 exit 1\u00a0 fi}setup_directories() {\u00a0 mkdir -p \"${ORACLE_HOME}\"\u00a0 #use oinstall instead of dba to allow the script to work for 18c XE.\u00a0 #This is harmless because we always revert ownership of $ORACLE_BASE to oracle:dba in the Dockerfile.\u00a0 chown -R \"${USER}:oinstall\" \"${ORACLE_BASE}\"\u00a0 chown -R \"${USER}:${GROUP}\" \"/home/${USER}\"}create_env_file() {\u00a0 echo \"export ORACLE_HOME=${ORACLE_HOME}\" >>\"/home/oracle/${CDB_NAME}.env\"\u00a0 echo \"export ORACLE_BASE=${ORACLE_BASE}\" >>\"/home/oracle/${CDB_NAME}.env\"\u00a0 echo \"export ORACLE_SID=${CDB_NAME}\" >>\"/home/oracle/${CDB_NAME}.env\"\u00a0 echo \"export PATH=${ORACLE_HOME}/bin:${ORACLE_HOME}/OPatch:/usr/local/bin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin\" >>\"/home/oracle/${CDB_NAME}.env\"\u00a0 echo \"export LD_LIBRARY_PATH=${ORACLE_HOME}/lib:/usr/lib\" >>\"/home/oracle/${CDB_NAME}.env\"\u00a0 chown \"${USER}:${GROUP}\" \"/home/oracle/${CDB_NAME}.env\"}pick_pre_installerinstall_packagesupdate_packages_fipssetup_directoriesif [[ \"${CREATE_CDB}\" == true ]]; then\u00a0 create_env_filefi\n```\n### cloudbuild.yaml\n```\n# Copyright 2021 Google LLC\n## Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 \u00a0http://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.substitutions:\u00a0 \"_DB_VERSION\": \"12.2\"\u00a0 \"_EDITION\": \"ee\"options:\u00a0 diskSizeGb: 1000\u00a0 machineType: 'E2_HIGHCPU_8'timeout: 7200ssteps:- name: 'gcr.io/cloud-builders/gsutil'\u00a0 id: 'install_zip'\u00a0 args: ['-m', 'cp', \"-r\", '${_INSTALL_PATH}/*', '.']- name: 'gcr.io/cloud-builders/docker'\u00a0 waitFor:\u00a0 - 'install_zip'\u00a0 args:\u00a0 - 'build'\u00a0 - '--no-cache'\u00a0 - '--build-arg=DB_VERSION=$_DB_VERSION'\u00a0 - '--build-arg=ORACLE_HOME=$_ORACLE_HOME'\u00a0 - '--build-arg=ORACLE_BASE=$_ORACLE_BASE'\u00a0 - '--build-arg=CREATE_CDB=$_CREATE_CDB'\u00a0 - '--build-arg=CDB_NAME=$_CDB_NAME'\u00a0 - '--build-arg=CHARACTER_SET=$_CHARACTER_SET'\u00a0 - '--build-arg=MEM_PCT=$_MEM_PCT'\u00a0 - '--build-arg=EDITION=$_EDITION'\u00a0 - '--build-arg=PATCH_VERSION=$_PATCH_VERSION'\u00a0 - '--tag=$_TAG'\u00a0 - '--file=Dockerfile'\u00a0 - '.'images:- '$_TAG'\n```", "guide": "Documentation"}