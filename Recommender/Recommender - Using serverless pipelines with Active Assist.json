{"title": "Recommender - Using serverless pipelines with Active Assist", "url": "https://cloud.google.com/recommender/docs/using-serverless-pipelines-with-active-assist", "abstract": "# Recommender - Using serverless pipelines with Active Assist\nLast reviewed 2021-06-09 UTC\nThis document is intended for enterprise architects and software developers who want to build an automation pipeline to use [Active Assist](/solutions/active-assist) in their Google Cloud organization. It's part of a series that discusses architectural patterns that enterprises can use to optimize their cloud footprint at scale using Active Assist. The series consists of the following parts:- [Patterns for using Active Assist at scale](/recommender/docs/patterns-for-using-active-assist-at-scale) \n- Using serverless pipelines with Active Assist (this document)\n- [Using the GKE Enterprise toolchain with Active Assist ](/recommender/docs/using-anthos-toolchain-with-active-assist) \nThis tutorial shows you how to use Google Cloud serverless technologies to build an automation pipeline to retrieve and process Active Assist recommendations. You base the recommendations on the business rules set by your enterprise. The automation pipeline that you set up in this tutorial helps you to work with Active Assist at scale while still maintaining a team-led review and actuation process. This approach is useful when your enterprise wants to scale the use of the Active Assist portfolio but keep control of the review and actuation process within teams. It offers an alternative to using a continuous integration and continuous delivery (CI/CD) pipeline.\nThe architecture demonstrated in this tutorial is generic and you can extend it to work with other serverless products. The tutorial assumes that you are familiar with the following Google Cloud technologies:- [Cloud Run](/run) \n- [Pub/Sub](/pubsub) \n- [Firestore](/firestore/docs) \nTo complete this tutorial, you must have an account for [Slack](https://slack.com/intl/en-gb/) or a similar notification or ticket processing tool. The tool must be set up on your machine and ready to use.", "content": "## ArchitectureBecause the architecture demonstrated in this tutorial is modular, you can adapt the notifications component to match the requirements of your business. This tutorial demonstrates how to generate notifications and send them to Slack. You can also choose to send notifications to Pub/Sub or any other notification or ticket processing tool.\nThe following architectural diagram shows the components that you use in this tutorial:The architecture has the following components:- A Cloud Run service that a scheduler triggers at fixed intervals. The service invokes the Recommender APIs by reading the metadata (project IDs and recommender types) that is defined and held in a Firestore collection.\n- A Pub/Sub topic that the Active Assist recommendations are pushed into and processed in.\n- A second Cloud Run service that parses Active Assist recommendations. This service determines how recommendations are processed based on the business rules defined by your enterprise and stored in a Firestore collection.\n- Two Firestore collections to store the business metadata and business rules. The Firestore collections operate as follows:- The first collection stores the business metadata relevant to retrieving Active Assist recommendations. In this tutorial,`recommendation type`,`Google Cloud project IDs`, and`locations`attributes are used as business metadata. These attributes are used by the`recommendation-collector`Cloud Run service to determine which recommendation types are fetched.\n- The second collection stores business rules that are applied when recommendations are processed.## Objectives\n- Create a sample Cloud Run service to retrieve Active Assist recommendations for a sample project and push them into a Pub/Sub topic.\n- Create two Firestore collections to store sample metadata and business rules respectively.\n- Create a second Cloud Run service to process recommendations according to the sample business rules that you define in this tutorial.\n- Create a Slack channel that the Cloud Run service sends sample Active Assist recommendations to.\n- Test the end-to-end pipeline with sample Active Assist recommendations.\n## CostsIn this document, you use the following billable components of Google Cloud:- [Cloud Build](/cloud-build/pricing) \n- [Cloud Run](/run/pricing) \n- [Firestore](/firestore/pricing) \n- [Pub/Sub](/pubsub/pricing) \n- [Container Registry](/container-registry/pricing) \n- [Cloud Scheduler](/scheduler) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, go to the project selector page. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- Select or create a Google Cloud project. **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project.\n- Make a note of the Google Cloud project ID for the recommendation manager project. You need this ID in the next section on setting up your environment.\n- Enable the Cloud Build, Firestore, App Engine,Pub/Sub, Cloud Run, Cloud Scheduler, and Cloud Source Repositories APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=sourcerepo.googleapis.com,cloudscheduler.googleapis.com,firestore.googleapis.com,pubsub.googleapis.com,appengine.googleapis.com) You use the default application credentials for this tutorial. If you are prompted to create credentials on the **Add credentials to your\nproject** page, click **Cancel.** \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Create the following:- A sample Slack channel.\n- A sample Slack app and incoming webhook to receive notifications generated by an engine named`recommendation-rules-engine`. You set up the engine later in this tutorial.\nFor more information, see [Create a Slack channel](https://slack.com/intl/en-gb/help/articles/201402297-Create-a-channel) and [Sending messages using Incoming Webhooks](https://api.slack.com/messaging/webhooks) .When you've created a Slack app and an incoming webhook URL, make a note of the URL as you need it later in this tutorial.\n## Building the serverless pipelineIn this section, you create the components that you need to build the serverless pipeline. The platform generates Active Assist recommendations based on usage patterns and system metrics. Depending on the recommendations that are generated, each recommendation category might use a different default time period from the past to analyze usage data and metrics.\nIf you have a sample Google Cloud project that has existing resources and Active Assist recommendations, you can run the pipeline to process those recommendations after you make the appropriate changes to the sample code provided.\n### Create the Firestore collectionsIn this section, you create two Firestore [collections](/firestore/docs/data-model) . The first, the `activeassist-metadata` collection, stores the business metadata relevant to retrieving Active Assist recommendations. The second, the `activeassist-business-rules` collection, stores the business rules that are applied when the pipeline processes recommendations.\nWhen Active Assist recommendations are parsed, based on the business rules in the Firestore collection, either a notification is generated and sent, or the recommendation is automatically applied to the relevant Google Cloud resource.\n### Create the activeassist-metadata collection\n- In the Google Cloud console, go to the Firestore page. [Open Firestore](https://console.cloud.google.com/firestore) \n- Create a Firestore database if you don't already have one. Alternatively, if you already have a Firestore database, skip to the next step.Create the database:- Click **Select Native mode** to activate Firestore.\n- Select a region location close to the region where your Cloud Run services run.\n- Click **Create Database** . It takes a few moments to complete the configuration.\n- On the Firestore page, click **Start Collection** .\n- In the **Collection ID** field, enter the following: `activeassist-metadata` .\n- Populate the fields as shown in the following table. To add the next field, click **Add Field** .| Field name  | Field type | Field value     | Note                                           |\n|:----------------|:-------------|:------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| project   | string  | Stub-Project-ID    | This tutorial uses a stub for the field value. If you want to use recommendations from an existing Google Cloud project, enter the project ID instead.      |\n| locations  | array  | global      | Some recommendations might be region-specific or zone-specific, such as VM rightsizing recommendations. Other recommendations are global, for example, IAM recommendations. |\n| recommenderType | string  | google.iam.policy.Recommender | Not applicable.                                        |\n- When the fields are populated, click **Save** .\n### Create the activeassist-business-rules collection\n- Click **Start Collection** .\n- In the **Collection ID** field, enter the following: `activeassist-business-rules`Populate the document as shown in the following table. To add the next field, click **Add Field** .| Field name   | Field type | Field value     | Note                                                       |\n|:-------------------|:-------------|:------------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| action    | string  | Notify      | Setting the value to Apply causes the service to apply the recommendation and remove the unused role.                               |\n| projectId   | string  | Stub-Project-ID    | This tutorial uses a stub recommendation. If you want to use recommendations from an existing Google Cloud project, enter the project ID instead.                   |\n| projectNumber  | string  | 999999999      | This tutorial uses a stub recommendation. If you're using a recommendation from an existing Google Cloud project, enter the project number instead. You can find the project number in the Google Cloud console welcome page |\n| recommenderType | string  | google.iam.policy.Recommender | Not applicable.                                                    |\n| recommenderSubtype | string  | REMOVE_ROLE     | Not applicable.                                                    |\n| slackWebhookURL | string  | nan       | Enter the Slack webhook URL that you generated in a previous step. The URL resembles the following: https://hooks.slack.com/services/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           |This tutorial shows you how to construct a rule to determine if a recommendation is automatically applied or if a notification is generated and sent to a platform such as Slack. To learn how a recommendation can be automatically applied based on the evaluation of sample business rules that you set up, see the associated [repository](https://github.com/GoogleCloudPlatform/activeassist-serverless-pipeline.git) .\n- When the document is populated, click **Save** .\n## Creating a scheduled Cloud Run serviceIn this section, you create a scheduled Cloud Run service called `recommendation-collector` that invokes the Recommender API and retrieves active recommendations. The Identity and Access Management [Recommender API](/iam/docs/recommender-managing#review-apply-rest) is used in this tutorial as the Recommender API. The service reads metadata from the `activeassist-metadata` Firestore collection that you created to determine which recommendations to retrieve.- Click **Open in Cloud Shell** to open Cloud Shell for the recommendation manager project. [Open in Cloud Shell](https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2FGoogleCloudPlatform%2Factiveassist-serverless-pipeline&shellonly=true&cloudshell_workspace=recommendation-collector) When Cloud Shell opens, the following commands execute:- The [GitHub repository](https://github.com/GoogleCloudPlatform/activeassist-serverless-pipeline) cloning command.\n- The change directory command.\nWhen the **Open in Cloud Shell** dialog appears, select **Trust** and then click **Confirm** .\n- Set the project ID and the project number of the current recommendation manager project as variables:```\nexport RECO_MGR_PROJECT=PROJECT_IDgcloud config set project $RECO_MGR_PROJECTexport RECO_MGR_PROJECT_NUMBER=$(gcloud projects describe $DEVSHELL_PROJECT_ID --format='value(projectNumber)')\n```Replace `PROJECT_ID` with your project ID. Once you have entered the commands, click **Authorize** when you're prompted.\n- Set the variable for the deployment region:```\nexport REGION=us-central1\n```Although this tutorial uses the `us-central1` region, you can use [any region where Cloud Run is available](/run/docs/locations) .\n- Create an environment variable for your Docker image:```\nexport RECOMMENDER_IMAGE=gcr.io/$RECO_MGR_PROJECT/recommendation-collector:1.0\n```\n- Build the Docker image and upload it to [Container Registry](/container-registry) :```\n\u00a0gcloud builds submit --tag $RECOMMENDER_IMAGE\n```\n- Create a service account for the `recommendation-collector` service to interact with other Google Cloud services in the pipeline:```\ngcloud iam service-accounts create recommendation-collector-sa \\\u00a0 --description \"Service Account that the recommendation-collector service uses to invoke other Google Cloud services\" \\\u00a0 --display-name \"recommendation-collector-sa\" \\\u00a0 --project $RECO_MGR_PROJECT\n```It's a good practice to grant granular permissions to your Cloud Run services by assigning predefined roles to the service account. To learn more, see [Service identity](/run/docs/securing/service-identity) .\n- Give the service account for the `recommendation-collector` service access to Firestore and the Recommender API:```\ngcloud projects add-iam-policy-binding $RECO_MGR_PROJECT \\\u00a0 --member serviceAccount:recommendation-collector-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --role roles/datastore.usergcloud projects add-iam-policy-binding $RECO_MGR_PROJECT \\\u00a0 --member serviceAccount:recommendation-collector-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --role roles/pubsub.publisher\n```\n- If you're running this tutorial using the sample `stub` provided in the repository that you cloned, skip to the next step.If you're building the pipeline in this tutorial using recommendations generated for an existing Google Cloud project, you must assign IAM permissions to the service accounts that you created to run the two Cloud Run services.Set an environment variable, `TEST_PROJECT_ID` , with the ID of the project that you run this pipeline for before you execute the commands:```\nexport TEST_PROJECT_ID=TEST_PROJECT_IDgcloud projects add-iam-policy-binding $TEST_PROJECT_ID \\\u00a0 --member serviceAccount:recommendation-collector-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --role roles/recommender.iamAdmingcloud projects add-iam-policy-binding $TEST_PROJECT_ID \\\u00a0 --member serviceAccount:recommendation-collector-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --role roles/serviceusage.serviceUsageConsumergcloud services enable recommender.googleapis.com --project $TEST_PROJECT_ID\n```Make sure the Project ID you use matches the one you entered in [creating the Firestore collections](#creating-the-firestore-collections) . **Note:** If you are running this pipeline for recommender types that aren't used in this tutorial, make sure that you [identify and assign](/iam/docs/permissions-reference) the correct set of additional permissions. The service accounts that you create to run the two Cloud Run services need these permissions.\n- For this tutorial, you deploy the service with an environment variable called `STUB_RECOMMENDATIONS` . This variable lets you use a stub to test the pipeline.Deploy the Cloud Run service:```\ngcloud run deploy recommendation-collector \\\u00a0 --image=$RECOMMENDER_IMAGE \\\u00a0 --no-allow-unauthenticated \\\u00a0 --region $REGION \\\u00a0 --platform managed \\\u00a0 --service-account recommendation-collector-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --set-env-vars=\"STUB_RECOMMENDATIONS=true\" \\\u00a0 --project $RECO_MGR_PROJECT \\\n```Accept any system prompts.If you want to run the pipeline using Active Assist recommendations generated for a Google Cloud project, remove the following line from the command before you deploy it:```\n--set-env-vars=\"STUB_RECOMMENDATIONS=true\"\n```\n### Set up a Cloud Scheduler job to run the recommender-collector service\n- In Cloud Shell, create a service account for Cloud Scheduler jobs to use to run the `recommendation-collector` service:```\ngcloud iam service-accounts create recommender-scheduler-sa \\\u00a0 --description \"Service Account used by Cloud Scheduler to invoke the recommender-parser service\" \\\u00a0 --display-name \"recommender-scheduler-sa\" \\\u00a0 --project $RECO_MGR_PROJECT\n```\n- Give the service account the `run/invoker` role to enable it to invoke the Cloud Run service:```\ngcloud run services add-iam-policy-binding recommendation-collector \\\u00a0 --member=serviceAccount:recommender-scheduler-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --role=roles/run.invoker \\\u00a0 --region=$REGION \\\u00a0 --platform=managed\n```\n- Get the `recommendation-collector` service URL:```\nexport RECOMMENDER_SERVICE_URI=`gcloud run services describe recommendation-collector \\\u00a0 --platform managed \\\u00a0 --project $RECO_MGR_PROJECT \\\u00a0 --region $REGION \\\u00a0 --format=\"value(status.url)\"`/run\n```\n- Create a Cloud Scheduler job called `recommender-iam-scheduler` :```\ngcloud scheduler jobs create http recommender-iam-scheduler \\\u00a0 --project $RECO_MGR_PROJECT \\\u00a0 --time-zone \"America/Los_Angeles\" \\\u00a0 --schedule=\"0 */3 * * *\" \\\u00a0 --uri=$RECOMMENDER_SERVICE_URI \\\u00a0 --description=\"Scheduler job to invoke recommendation pipeline\" \\\u00a0 --oidc-service-account-email=\"recommender-scheduler-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com\" \\\u00a0 --headers=\"Content-Type=application/json\" \\\u00a0 --http-method=\"POST\"\n```Set the time-zone to match your location. The time-zone value format is based on the [tz database](http://www.iana.org/time-zones) .For more information, see [gcloud scheduler jobs create http](/sdk/gcloud/reference/scheduler/jobs/create/http#--time-zone) .Your Cloud Scheduler job invokes the `/run` route for the `recommendation-collector` service.Setting the `--schedule=\"0 */3 * * *\"` flag runs the Scheduler job every three hours. You can change this setting according to your requirements. For more information, see [Configuring cron job schedules](/scheduler/docs/configuring/cron-job-schedules) .\n### Create the recommendation rules engine to process recommendationsIn this section, you create a second Cloud Run service named `recommendation-rules-engine` to process recommendations that the `recommendation-collector` service collects. The `recommendation-rules-engine` service is invoked by Pub/Sub when new recommendations are pushed into the `activeassist-recommendations` topic.\nThis service parses recommendations based on the business rules that you defined in the `activeassist-business-rules` collection.- In Cloud Shell, open the `recommendation-rules-engine` directory:```\ncd ../recommendation-rules-engine\n``` **Note:** If you get disconnected from your Cloud Shell session and need to reconnect, you can find the cloned repository directory at `~/cloudshell_open/activeassist-serverless-pipeline` .\n- Create an environment variable for your Docker image:```\nexport RULES_ENGINE_IMAGE=gcr.io/$RECO_MGR_PROJECT/recommendation-rules-engine:1.0\n```\n- Build the Docker image and upload it to [Container Registry](/container-registry) :```\ngcloud builds submit --tag $RULES_ENGINE_IMAGE\n```\n- Create a service account for the `recommendation-rules-engine` service to interact with other Google Cloud services in the pipeline:```\ngcloud iam service-accounts create recommendation-rules-sa \\\u00a0--description \"Service Account that recommendation-rules-engine uses to invoke other Google Cloud services\" \\\u00a0--display-name \"recommendation-rules-sa\" \\\u00a0--project $RECO_MGR_PROJECT\n```\n- Give the service account for the `recommendation-rules-engine` service access to Firestore:```\ngcloud projects add-iam-policy-binding $RECO_MGR_PROJECT \\\u00a0 --member serviceAccount:recommendation-rules-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --role roles/datastore.user\n```If you are using the stubs provided for this tutorial, proceed to the next step.If you are testing the pipeline using recommendations generated for a Google Cloud project instead of the stubs provided for this tutorial, run the following commands to permit the rules engine service account access to your project:```\ngcloud projects add-iam-policy-binding $TEST_PROJECT_ID \\\u00a0 --member serviceAccount:recommendation-rules-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --role roles/serviceusage.serviceUsageConsumergcloud projects add-iam-policy-binding $TEST_PROJECT_ID \\\u00a0 --member serviceAccount:recommendation-rules-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --role roles/recommender.iamAdmingcloud projects add-iam-policy-binding $TEST_PROJECT_ID \\\u00a0 --member serviceAccount:recommendation-rules-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --role roles/resourcemanager.projectIamAdmin\n```\n- Deploy the Cloud Run service:```\ngcloud run deploy recommendation-rules-engine \\\u00a0 --image=$RULES_ENGINE_IMAGE \\\u00a0 --no-allow-unauthenticated \\\u00a0 --region $REGION \\\u00a0 --platform managed \\\u00a0 --service-account recommendation-rules-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --project $RECO_MGR_PROJECT\n```Accept any system prompts.\n- Get the `recommendation-rules-engine` URL:```\nexport RECOMMENDER_SERVICE_RULES_URI=`gcloud run services describe recommendation-rules-engine \\\u00a0 --platform managed \\\u00a0 --project $RECO_MGR_PROJECT \\\u00a0 --region $REGION \\\u00a0 --format=\"value(status.url)\"`/process\n```The URL that you retrieve in this step is invoked when new recommendations become available by the Pub/Sub topic that you create in the next step.\n### Create a Pub/Sub topic for active recommendationsIn this section, you create a Pub/Sub topic for the Active Assist recommendations that the `recommender-collector` service retrieves by invoking the Recommender API.- In Cloud Shell, create a Pub/Sub topic:```\ngcloud pubsub topics create activeassist-recommendations\n```\n- Create a service account for Pub/Sub to use to invoke the `recommendation-rules-engine` Cloud Run service:```\ngcloud iam service-accounts create recommendation-engine-sub-sa \\\u00a0 --description \"Service Account used by Pub/Sub to push recommendations to the recommendation-rules-engine service\" \\\u00a0 --display-name \"recommendation-engine-sub-sa\" \\\u00a0 --project $RECO_MGR_PROJECT\n```\n- The Pub/Sub service account must be associated with the roles that it needs to publish messages and to invoke the `recommendation-rules-engine` service:```\ngcloud projects add-iam-policy-binding $RECO_MGR_PROJECT \\\u00a0 --member serviceAccount:recommendation-engine-sub-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --role roles/run.invoker \\\u00a0 --project $RECO_MGR_PROJECT\n```\n### Create a subscription for the Pub/Sub topic\n- Create a subscription for the `recommendation-rules-engine` service:```\n# grant Pub/Sub the permission to create tokensPUBSUB_SERVICE_ACCOUNT=\"service-$RECO_MGR_PROJECT_NUMBER@gcp-sa-pubsub.iam.gserviceaccount.com\"gcloud projects add-iam-policy-binding $RECO_MGR_PROJECT \\\u00a0 --member=\"serviceAccount:$PUBSUB_SERVICE_ACCOUNT\"\\\u00a0 --role='roles/iam.serviceAccountTokenCreator'# configure the subscription push identitygcloud pubsub subscriptions create active-assist-recommendations-for-rules-engine \\\u00a0 --topic=activeassist-recommendations \\\u00a0 --topic-project=$RECO_MGR_PROJECT \\\u00a0 --push-auth-service-account=recommendation-engine-sub-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --ack-deadline=60 \\\u00a0 --push-endpoint=$RECOMMENDER_SERVICE_RULES_URI\n```\n- Allow the `recommendation-engine-sub-sa` service account that you created to invoke the `recommendation-rules-engine` service:```\ngcloud run services add-iam-policy-binding recommendation-rules-engine \\\u00a0 --member=serviceAccount:recommendation-engine-sub-sa@$RECO_MGR_PROJECT.iam.gserviceaccount.com \\\u00a0 --role=roles/run.invoker \\\u00a0 --region=$REGION \\\u00a0 --platform=managed\n```\n## Running end-to-end tests using stubsActive Assist recommendations are generated by the platform based on usage patterns and system metrics. Each recommendation category might use a different default window of time in the past to analyze usage data and metrics based on which recommendations are generated. For example, IAM recommendations are generated by the platform based on usage patterns from the past 90 days.\nTo test the end-to-end pipeline, the repository you cloned for this tutorial provides sample recommendations (stubs) that you use to run the end-to-end pipeline.\nIn this section, you do the following:- Inspect the stub recommendations.\n- Invoke the pipeline manually.\n- Check if a notification is generated and sent to the Slack channel that you created.\n- Review the sample recommendations provided in the repository:```\ncat ../recommendation-collector/stub.json\n```This file provides a sample recommendation with a `REMOVE` action for a sample role called `roles/gkehub.connect` .\n- Execute the following command to get Cloud Scheduler to run the job immediately, instead of waiting for the next scheduled run:```\ngcloud scheduler jobs run recommender-iam-scheduler\n```\n- On the [Cloud Scheduler](https://console.cloud.google.com/cloudscheduler) console page, in the **Result** column for the `recommender-iam-scheduler` job, verify that the result is **Success** .To get a detailed view of the steps that each of the services execute, you can also [view the Cloud Run service logs](/run/docs/logging#viewing-logs-cloud-run) for the `recommendation-collector` service and the `recommendation-rules-engine` service.\n- When the serverless end-to-end pipeline that you build in this tutorial runs successfully, it generates a Slack notification that contains details of the recommended role binding for you to remove. The following is an example of the notification that you receive:```\nProject xxxxxxxx\\**Impact**: SECURITY\\This role has not been used during the observation window.\\**Role**: roles/gkehub.connect\\**Member**:serviceAccount:sample-sa@recommendation-sample.iam.gserviceaccount.com\\**Action**: remove\n```\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\n **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIn the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \nIn the project list, select the project that you  want to delete, and then click **Delete** .\nIn the dialog, type the project ID, and then click **Shut down** to delete the project.## What's next\n- Learn about [using Recommendations for Infrastructure as Code](/recommender/docs/tutorial-iac) .\n- Learn more about [Google Cloud serverless](/serverless) technologies.\n- Read about how to [integrate Policy Intelligence recommendations into an IaC pipeline](https://github.com/GoogleCloudPlatform/recommender-iac-pipeline-nodejs-tutorial) .", "guide": "Recommender"}