{"title": "Compute Engine - Scaling based on schedules", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Scaling based on schedules\nSchedule-based autoscaling lets you improve the availability of your workloads by scheduling capacity ahead of anticipated load. If you run your workload on a managed instance group (MIG), you can schedule a required number of virtual machine (VM) instances for recurring load patterns as well as one-off events. Use scaling schedules if your workload takes a long time to initialize and you want to scale out in advance of anticipated load spikes.\nThis document describes how you can create, list, edit, disable, re-enable, and delete scaling schedules for an existing MIG. For more information about MIGs and autoscaling, see [Creating managed instance groups](/compute/docs/instance-groups/creating-groups-of-managed-instances) and [Autoscaling groups of instances](/compute/docs/autoscaler) .\n", "content": "## Before you begin\n- Read about autoscaler [fundamentals](/compute/docs/autoscaler#fundamentals) .\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nTo use the Terraform samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [   Set up authentication for a local development environment](/compute/docs/authentication#local-development) .To use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```## Limitations\nScaling schedules are restricted by the [limitations for all autoscalers](/compute/docs/autoscaler#specifications) as well as the following limitations:\n- You can have up to 128 scaling schedules per MIG. To mitigate this limit, delete scaling schedules that have an`OBSOLETE`status and that you do not plan to run again.\n- The minimum duration for scaling schedules is 5 minutes.## Creating a scaling schedule\nYou can create up to 128 scaling schedules per MIG. For more information, see [Scaling schedule settings](#schedule_configuration_options) .\n**Note:** Consider the following when you create a scaling schedule:- Autoscaler never creates more than the maximum number of  VM instances or fewer than the minimum number of VM instances configured  in the MIG's autoscaling settings. Make sure the  autoscaling settings' maximum lets the autoscaler  create the number of VM instances  required by each scaling schedule.\n- VM instances aren't ready immediately at the given start  time. Configure your start time to be early enough for  VMs to boot and start your application before they are needed.\n- Autoscaler constantly monitors scaling schedules, so any  configuration changes are effective immediately. For example,  suppose you create a new schedule at 3 PM that runs every  day at 2 PM for 3 hours. This schedule becomes active  shortly after it is created and remains active until 5 PM.\nThe following instructions explain how to create a scaling schedule for a MIG.- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of a MIG from the list.\n- Click create **Edit** .\n- If no autoscaling configuration exists:- Under **Autoscaling** , click **Configure autoscaling** .\n- Under **Autoscaling mode** , select **On: add and remove instances to\nthe group** to enable autoscaling. If you want to scale your MIG based only on schedules, delete the default CPU utilization metric after you add the schedules.\n- For each scaling schedule that you want to add:- Expand the **Autoscaling schedules** section, click **Manage schedules** , then click **Create schedule** .\n- In the **Create scaling schedule** pane, enter a **Name** .\n- Optional: Enter a **Description** .\n- Enter the number of [Minimum required instances](#minimum_required_instances) that this schedule provides when it is active.\n- Specify the start time and recurrence of your scaling schedule either by using the default interface or, if you want to configure a schedule with a more complex start time and recurrence, by using a [cron expression](#cron_expressions) .- Default interface- In the **Start time** field, type or clickaccess_timeto select a start time.\n- In the **Recurrence** field, select how often the schedule repeats. If you select **Every week** or **Every month** , use the additional drop-down menu to select which days of the week or month the schedule starts.\n- Cron expression- To enable, click the **Use CRON expression** toggle.\n- Enter a [CRON expression](#cron_expressions) .\n- In the **Time zone** field, select a time zone. **Note:** Some locations observe daylight saving time (DST). For more information, see [Time zones](#time_zone) .\n- In the **Duration** and **Unit of time** fields, enter a duration and select a corresponding unit of time.\n- Click **Save** . The **Scaling schedules** pane opens.\n- Optional: You can create another scaling schedule by clicking add **Create schedule** .\n- When you are finished creating schedules, click **Done** .\n- To close the **Instance groups** page, click **Save** .\nTo add a scaling schedule to a MIG that does not have an existing autoscaling policy, use the [gcloud compute instance-groups managed set-autoscaling command](/sdk/gcloud/reference/compute/instance-groups/managed/set-autoscaling) .\n```\ngcloud compute instance-groups managed set-autoscaling MIG_NAME \\\n [--min-num-replicas=MIN_NUM_REPLICAS] \\\n --max-num-replicas=MAX_NUM_REPLICAS \\\n --set-schedule=SCHEDULE_NAME \\\n --schedule-cron=\"CRON_EXPRESSION\" \\\n --schedule-duration-sec=DURATION \\\n [--schedule-time-zone=\"TIME_ZONE\"] \\\n --schedule-min-required-replicas=MIN_REQ_REPLICAS \\\n [--schedule-description=\"DESCRIPTION\"] \\\n [--zone=ZONE | --region=REGION]\n```\nTo add a scaling schedule to a MIG with an existing autoscaling policy, use the [gcloud compute instance-groups managed update-autoscaling command](/sdk/gcloud/reference/compute/instance-groups/managed/update-autoscaling) .\n```\ngcloud compute instance-groups managed update-autoscaling MIG_NAME \\\n [--min-num-replicas=MIN_NUM_REPLICAS] \\\n [--max-num-replicas=MAX_NUM_REPLICAS] \\\n --set-schedule=SCHEDULE_NAME \\\n --schedule-cron=\"CRON_EXPRESSION\" \\\n --schedule-duration-sec=DURATION \\\n [--schedule-time-zone=\"TIME_ZONE\"] \\\n --schedule-min-required-replicas=MIN_REQ_REPLICAS \\\n [--schedule-description=\"DESCRIPTION\"] \\\n [--zone=ZONE | --region=REGION]\n```\nReplace the following:- ``: the name of a MIG with an existing autoscaling policy.\n- ``: Optional: the minimum number of instances required for this MIG. Google recommends setting this value to the minimum number of instances that you need when no scaling schedule is active. When you set this value to`0`and configure autoscaling with schedules or Cloud Monitoring metrics with single time series per group, your MIG can scale in to 0 VMs. Scaling in to 0 VMs is not possible when the policy has other signals, which require data from individual VM\u2014for example, CPU utilization.\n- ``: the maximum number of instances that can ever be provided for this MIG. Optional for a MIG with an existing autoscaling policy.\n- ``: the name of the new scaling schedule.\n- ``: the start time and recurrence of this schedule formatted as a [cron expression](#cron_expressions) .\n- ``: the [duration](#duration) , in seconds, that this schedule is active.\n- ``: Optional: the [IANA time zone](#time_zone) for the schedule's start time\u2014for example,`Europe/Paris`. The default value is`UTC`.\n- ``: the number of [minimum required instances](#minimum_required_instances) that this schedule provides when it is active.\n- ``: Optional: a description of the new scaling schedule.\n- ``or``: Optional: the zone or region where your MIG is located.\nYou can create schedules that run once or that periodically repeat.\n### Repeating scheduleThis example command creates a schedule that repeats. This schedule specifies that you want your MIG to contain at least 10 VM instances on every Monday, Tuesday, Wednesday, Thursday, and Friday from 8:30 AM to 5 PM Coordinated Universal Time (UTC). This command also uses the `--min-num-replicas` and `--max-num-replicas` flags to update the minimum number of instances to 0 and the maximum number of instances to 30 for all the autoscaling signals of the selected MIG. This command assumes you have an existing MIG named `example-mig` with an existing autoscaling policy.\n```\ngcloud compute instance-groups managed update-autoscaling example-mig \\\n --min-num-replicas=0 \\\n --max-num-replicas=30 \\\n --set-schedule=workday-capacity \\\n --schedule-cron=\"30 8 * * Mon-Fri\" \\\n --schedule-duration-sec=30600 \\\n --schedule-min-required-replicas=10 \\\n --schedule-description=\"Have at least 10 VMs every Monday through Friday from 8:30 AM to 5 PM UTC\"\n```\n### Onetime scheduleThis example command creates a schedule that runs once. This schedule specifies that you want your MIG to contain at least 30 VM instances all day on January 30, 2030 for the `America/New_York` time zone. This command assumes you have an existing MIG named `example-mig` that is located in `us-east1-b` and has an existing autoscaling policy.\n```\ngcloud compute instance-groups managed update-autoscaling example-mig \\\n --set-schedule=example-onetime-schedule \\\n --schedule-cron=\"0 0 30 1 * 2030\" \\\n --schedule-duration-sec=86400 \\\n --schedule-time-zone=\"America/New_York\" \\\n --schedule-min-required-replicas=30 \\\n --schedule-description=\"Schedule a minimum of 30 VMs all day for January 30, 2030\" \\\n --zone=us-east1-b\n```\nTo add a scaling schedule to a MIG, use the [google_compute_autoscaler](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/compute_autoscaler) resource.\n [  compute/autoscaler_instance_group/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/compute/autoscaler_instance_group/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/compute/autoscaler_instance_group/main.tf) \n```\nresource \"google_compute_autoscaler\" \"default\" {\n provider = google-beta\n name  = \"my-autoscaler\"\n zone  = \"us-central1-f\"\n target = google_compute_instance_group_manager.default.id\n autoscaling_policy {\n max_replicas = 5\n min_replicas = 1\n cooldown_period = 60\n scaling_schedules {\n  name     = \"every-weekday-morning\"\n  description   = \"Increase to 2 every weekday at 7AM for 12 hours.\"\n  min_required_replicas = 2\n  schedule    = \"0 7 * * MON-FRI\"\n  time_zone    = \"America/New_York\"\n  duration_sec   = 43200\n }\n }\n}\n```\nTo learn how to apply or remove a Terraform configuration, see [Basic Terraform commands](/docs/terraform/basic-commands) .\n **Note:** By using REST, you can define [multiple scalingschedules in a single call](#multiple-schedules) .\nTo create an autoscaler with scaling schedules for a MIG, use the [autoscalers.insert method](/compute/docs/reference/rest/v1/autoscalers/insert) for a zonal MIG or the [regionAutoscalers.insert method](/compute/docs/reference/rest/v1/regionAutoscalers/insert) for a regional MIG.\nMake the following call to create a schedule for a zonal MIG that does not have an existing autoscaling policy:\n```\nPOST https://www.googleapis.com/compute/v1/projects/PROJECT/zones/ZONE/autoscalers/\n{\n \"name\": \"AUTOSCALER_NAME\",\n \"target\": \"https://www.googleapis.com/compute/v1/projects/PROJECT/zones/ZONE/instanceGroupManagers/MIG_NAME\",\n \"autoscalingPolicy\": {\n \"minNumReplicas\": MIN_NUM_REPLICAS,\n \"maxNumReplicas\": MAX_NUM_REPLICAS,\n \"scalingSchedules\": {\n  \"SCHEDULE_NAME\": {\n  \"minRequiredReplicas\": MIN_REQ_REPLICAS,\n  \"schedule\": \"CRON_EXPRESSION\",\n  \"timeZone\": \"TIME_ZONE\",\n  \"durationSec\": DURATION,\n  \"description\": \"DESCRIPTION\"\n  },\n  ...\n }\n }\n}\n```\nTo create schedules for a MIG that has an existing autoscaling policy, use the [autoscalers.patch method](/compute/docs/reference/rest/v1/autoscalers/patch) for a zonal MIG or the [regionAutoscalers.patch method](/compute/docs/reference/rest/v1/regionAutoscalers/patch) for a regional MIG.\nFor example, make the following call to create a schedule for a zonal MIG that has an existing autoscaling policy:\n```\nPATCH https://www.googleapis.com/compute/v1/projects/PROJECT/zones/ZONE/autoscalers?autoscaler=AUTOSCALER_NAME\n{\n \"autoscalingPolicy\": {\n \"minNumReplicas\": MIN_NUM_REPLICAS,\n \"maxNumReplicas\": MAX_NUM_REPLICAS,\n \"scalingSchedules\": {\n  \"SCHEDULE_NAME\": {\n  \"minRequiredReplicas\": MIN_REQ_REPLICAS,\n  \"schedule\": \"CRON_EXPRESSION\",\n  \"timeZone\": \"TIME_ZONE\",\n  \"durationSec\": DURATION,\n  \"description\": \"DESCRIPTION\"\n  },\n  ...\n }\n }\n}\n```\nReplace the following:- ``: your [project id](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- ``: the zone where your MIG is located.\n- ``: the name of an existing autoscaler. This is often the same as the name of the MIG.\n- ``: Optional: the minimum number of instances required for this MIG. Google recommends setting this value to the minimum number of instances that you need when no scaling schedule is active. When you set this value to`0`and configure autoscaling with schedules or Cloud Monitoring metrics with single time series per group, your MIG can scale in to 0 VMs. Scaling in to 0 VMs is not possible when the policy has other signals, which require data from individual VM\u2014for example, CPU utilization.\n- ``: the maximum number of instances that can ever be provided for this MIG. Optional for a MIG with an existing autoscaling policy.\n- ``: the name of the new scaling schedule.\n- ``: the [minimum required instances](#minimum_required_instances) that this schedule provides when it is active.\n- ``: the start time and recurrence of this schedule formatted as a [cron expression](#cron_expressions) .\n- ``: Optional: the [IANA time zone](#time_zone) for the schedule's start time\u2014for example,`Europe/Paris`. The default value is`UTC`.\n- ``: the [duration](#duration) , in seconds, that this schedule is active.\n- ``: Optional: a description of the new scaling schedule.\nYou can create schedules that run once or that periodically repeat.\n### Repeating scheduleThis example API call creates a schedule that repeats. This schedule specifies that you want a zonal MIG to contain at least 10 VM instances on every Monday, Tuesday, Wednesday, Thursday, and Friday from 8:30 AM to 5 PM Coordinated Universal Time (UTC). This API call also uses the `minNumReplicas` and `maxNumReplicas` fields to update the minimum number of instances to 0 and the maximum number of instances to 30 for all the autoscaling signals of the selected MIG. This API call assumes that you have an existing project named `example-project` with a zonal MIG that is located in `us-east1-b` and has an autoscaler named `example-autoscaler` with an existing autoscaling policy.\n```\nPATCH https://www.googleapis.com/compute/v1/projects/example-project/zones/us-east1-b/autoscalers?autoscaler=example-autoscaler\n{\n \"autoscalingPolicy\": {\n \"minNumReplicas\": 0,\n \"maxNumReplicas\": 30,\n \"scalingSchedules\": {\n  \"workday-capacity\": {\n  \"minRequiredReplicas\": 10,\n  \"schedule\": \"30 8 * * Mon-Fri\",\n  \"durationSec\": 30600,\n  \"description\": \"Have at least 10 VMs every Monday through Friday from 8:30 AM to 5 PM UTC\"\n  }\n }\n }\n}\n```\nTo use this example for a regional MIG, make a similar request by using the [regionAutoscalers.patch method](/compute/docs/reference/rest/v1/regionAutoscalers/patch) and specify a region instead of a zone.\n### Onetime scheduleThis example API call creates a schedule that runs once. This schedule specifies that you want a zonal MIG to contain at least 30 VM instances all day on January 30, 2030 for the `America/New_York` time zone. This API call assumes that you have an existing project named `example-project` with a zonal MIG that is located in `us-east1-b` and has an autoscaler named `example-autoscaler` with an existing autoscaling policy.\n```\nPATCH https://www.googleapis.com/compute/v1/projects/example-project/zones/us-east1-b/autoscalers?autoscaler=example-autoscaler\n{\n \"autoscalingPolicy\": {\n \"scalingSchedules\": {\n  \"example-onetime-schedule\": {\n  \"minRequiredReplicas\": 30,\n  \"schedule\": \"0 0 30 1 * 2030\",\n  \"timeZone\": \"America/New_York\",\n  \"durationSec\": 86400,\n  \"description\": \"Schedule a minimum of 30 VMs all day for January 30, 2030\"\n  }\n }\n }\n}\n```\nTo use this example for a regional MIG, make a similar request by using the [regionAutoscalers.patch method](/compute/docs/reference/rest/v1/regionAutoscalers/patch) and specify a region instead of a zone.\n### Multiple schedulesThis example API call uses the [autoscalers.patch method](/compute/docs/reference/rest/v1/autoscalers/patch) for two schedules, `workday-capacity` and `january-30-2030-schedule` , in a single call. This API call assumes that you have an existing project named `example-project` with a zonal MIG that is located in `us-east1-b` and has an autoscaler named `example-autoscaler` with an existing autoscaling policy.\n```\nPATCH https://www.googleapis.com/compute/v1/projects/example-project/zones/us-east1-b/autoscalers?autoscaler=example-autoscaler\n{\n \"autoscalingPolicy\": {\n \"scalingSchedules\": {\n  \"workday-capacity\": {\n  \"minRequiredReplicas\": 10,\n  \"schedule\": \"30 8 * * Mon-Fri\",\n  \"durationSec\": 30600,\n  \"description\": \"Have at least 10 VMs every Monday through Friday from 8:30 AM to 5 PM UTC\"\n  },\n  \"january-30-2030-schedule\": {\n  \"minRequiredReplicas\": 30,\n  \"schedule\": \"0 0 30 1 * 2030\",\n  \"timeZone\": \"America/New_York\",\n  \"durationSec\": 86400,\n  \"description\": \"Schedule a minimum of 30 VMs all day for January 30, 2030\"\n  }\n }\n }\n}\n```\nTo use this example for a regional MIG, make a similar request by using the [regionAutoscalers.patch method](/compute/docs/reference/rest/v1/regionAutoscalers/patch) and specify a region instead of a zone.\nAfter a schedule is created, you might need to wait a few minutes to see its [status information](#schedule_status_information) .\n## Listing your scaling schedules\nYou can view a list of the schedules for a MIG. The list shows each schedule's [settings](#schedule_configuration_options) and [status information](#schedule_status_information) .- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of a MIG from the list.\n- Click create **Edit** .\n- You can see the total number of schedules under **Autoscaling schedules** . Click **Manage schedules** to display the list of your existing scaling schedules.\nWhen you are finished, you can close the list by clicking **Done** .\nTo get details for a MIG, including the configurations and statuses of its scaling schedules, use the [gcloud compute instance-groups managed describe command](/sdk/gcloud/reference/compute/instance-groups/managed/describe) .\n```\ngcloud compute instance-groups managed describe MIG_NAME \\\n [--zone=ZONE | --region=REGION]\n```\nReplace the following:- ``: the name of a MIG with an existing autoscaling policy.\n- ``or``: Optional: the zone or region where your MIG is located.\nAny scaling schedules for your MIG are listed in the output, as shown in the following example.\n```\n...\nautoscalingPolicy:\n ...\n maxNumReplicas: 30\n minNumReplicas: 0\n ...\n scalingSchedules:\n example-onetime-schedule:\n  description: Schedule a minimum of 30 VMs all day for January 30, 2030\n  disabled: false\n  durationSec: 86400\n  minRequiredReplicas: 30\n  schedule: 0 0 30 1 * 2030\n  timeZone: America/New_York\n workday-capacity:\n  description: Have at least 10 VMs every Monday through Friday from 8:30\n  AM to 5 PM UTC\n  disabled: false\n  durationSec: 30600\n  minRequiredReplicas: 10\n  schedule: 30 8 * * Mon-Fri\n  timeZone: UTC\n...\nscheduledScalingStatus:\n example-onetime-schedule:\n  state: READY\n  nextStartTime: '2030-01-30T00:00:00.000-05:00'\n  lastStartTime: ''\n workday-capacity:\n  state: READY\n  nextStartTime: '2020-11-04T08:30:00.000-00:00'\n  lastStartTime: '2020-11-03T08:30:00.000-00:00'\n...\n```\nTo get details for an autoscaler, including the configurations and statuses of its scaling schedules, use the [autoscalers.get method](/compute/docs/reference/rest/v1/autoscalers/get) for a zonal MIG or the [regionAutoscalers.get method](/compute/docs/reference/rest/v1/regionAutoscalers/get) for a regional MIG.\nFor example, make the following call to list the schedules for a zonal MIG that has an existing autoscaling policy:\n```\nGET https://www.googleapis.com/compute/v1/projects/PROJECT/zones/ZONE/autoscalers?autoscaler=AUTOSCALER_NAME\n```\nReplace the following:- ``: your [project id](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- ``: the zone where your MIG is located.\n- ``: the name of an existing autoscaler. This is often the same as the name of the MIG.\nAny scaling schedules for your MIG are listed in the output, as shown in the following example.\n```\n{\n ...\n \"autoscalingPolicy\": {\n ...\n \"minNumReplicas\": 0,\n \"maxNumReplicas\": 30,\n ...\n \"scalingSchedules\": {\n  \"example-onetime-schedule\": {\n  \"minRequiredReplicas\": 30,\n  \"schedule\": \"0 0 30 1 * 2030\",\n  \"timeZone\": \"America/New_York\",\n  \"durationSec\": 86400,\n  \"description\": \"Schedule a minimum of 30 VMs all day for January 30, 2030\",\n  \"disabled\": false\n  },\n  \"workday-capacity\": {\n  \"minRequiredReplicas\": 10,\n  \"schedule\": \"30 8 * * Mon-Fri\",\n  \"timeZone\": \"\",\n  \"durationSec\": 30600,\n  \"description\": \"Have at least 10 VMs every Monday through Friday from 8:30 AM to 5 PM UTC\",\n  \"disabled\": false\n  },\n  ...\n }\n },\n \"scheduledScalingStatus\": {\n \"example-onetime-schedule\": {\n  \"state\": \"READY\",\n  \"nextStartTime\": \"2030-01-30T00:00:00.000-05:00\",\n  \"lastStartTime\": ''\n },\n \"workday-capacity\": {\n  \"state\": \"READY\",\n  \"nextStartTime\": \"2020-11-04T08:30:00.000\",\n  \"lastStartTime\": \"2020-11-03T08:30:00.000\"\n },\n ...\n },\n...\n}\n```\n## Editing a scaling schedule\nYou can edit an [existing scaling schedule](#listing_your_scaling_schedules) to change any of its [settings](#schedule_configuration_options) except for the name of the schedule. You can also [disable or re-enable a scaling schedule](#disabling_and_re-enabling_a_scaling_schedule) .- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of a MIG from the list.\n- Click create **Edit** .\n- You can see the total number of schedules under **Autoscaling schedules** . Click **Manage schedules** to display the list of your existing scaling schedules.\n- Select the checkbox for the scaling schedule that you want to edit.\n- At the top of the **Scaling Schedules** pane, click create **Edit** .\n- In the new **Edit scaling schedule** pane, modify the fields that you want to change. For more information about each field, see [Creating a scaling schedule](#creating_a_scaling_schedule) .\n- When you are finished, click **Save** .\nYou might need to wait a few minutes before your changes are effective. You can monitor the status of your schedules by clicking refresh **Refresh** at the top of the **Scaling Schedules** pane.\nWhen you are finished, you can close the list by clicking **Done** .\nTo update an existing scaling schedule, use the [gcloud compute instance-groups managed update-autoscaling command](/sdk/gcloud/reference/compute/instance-groups/managed/update-autoscaling) . Use the `--update-schedule` flag to indicate the name of the schedule to update. Include the other flags as needed for your changes.\n```\ngcloud compute instance-groups managed update-autoscaling MIG_NAME \\\n --update-schedule=SCHEDULE_NAME \\\n [--schedule-cron=\"CRON_EXPRESSION\"] \\\n [--schedule-duration-sec=DURATION] \\\n [--schedule-time-zone=\"TIME_ZONE\"] \\\n [--schedule-min-required-replicas=MIN_REQ_REPLICAS] \\\n [--schedule-description=\"DESCRIPTION\"] \\\n [--zone=ZONE | --region=REGION]\n```\nReplace the following:- ``: the name of a MIG with an existing scaling schedule.\n- ``: the name of the existing scaling schedule.\n- ``: Optional: the new start time and recurrence of this schedule formatted as a [cron expression](#cron_expressions) .\n- ``: Optional: the new [duration](#duration) , in seconds, that this schedule is active.\n- ``: Optional: the new [IANA time zone](#time_zone) for the schedule's start time\u2014for example,`Europe/Paris`. The default value is`UTC`.\n- ``: Optional: the new number of [minimum required instances](#minimum_required_instances) that this schedule provides when it is active.\n- ``: Optional: a new description of the scaling schedule.\n- ``or``: Optional: the zone or region where your MIG is located.\n **Note:** By using the API, you can update [multiple scalingschedules in a single call](#multiple-schedules) .\nTo update the existing scaling schedules for a MIG, use the [autoscalers.patch method](/compute/docs/reference/rest/v1/autoscalers/patch) for a zonal MIG or the [regionAutoscalers.patch method](/compute/docs/reference/rest/v1/regionAutoscalers/patch) for a regional MIG.\nFor example, make the following call to edit a schedule for a zonal MIG that has an existing autoscaling policy:\n```\nPATCH https://www.googleapis.com/compute/v1/projects/PROJECT/zones/ZONE/autoscalers?autoscaler=AUTOSCALER_NAME\n{\n \"autoscalingPolicy\": {\n \"scalingSchedules\": {\n  \"SCHEDULE_NAME\": {\n  \"minRequiredReplicas\": MIN_REQ_REPLICAS,\n  \"schedule\": \"CRON_EXPRESSION\",\n  \"timeZone\": \"TIME_ZONE\",\n  \"durationSec\": DURATION,\n  \"description\": \"DESCRIPTION\"\n  },\n  ...\n }\n }\n}\n```\nReplace the following:- ``: your [project id](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- ``: the zone where your MIG is located.\n- ``: the name of an existing autoscaler. This is often the same as the name of the MIG.\n- ``: the name of the existing scaling schedule.\n- ``: Optional: the new number of [minimum required instances](#minimum_required_instances) that this schedule provides when it is active.\n- ``: Optional: the new start time and recurrence of this schedule formatted as a [cron expression](#cron_expressions) .\n- ``: Optional: the new [IANA time zone](#time_zone) for the schedule's start time\u2014for example,`Europe/Paris`. The default value is`UTC`.\n- ``: Optional: the new [duration](#duration) , in seconds, that this schedule is active.\n- ``: Optional: a new description of the scaling schedule.## Disabling and re-enabling a scaling schedule\nScaling schedules are enabled by default. Disable a schedule if you want to prevent a schedule from being active but want to save its configuration. Re-enable a disabled schedule when you want to use it again.\nIf you do not need to store the schedule or have reached the 128 schedule limit for this MIG, [delete the schedule](#deleting_a_scaling_schedule) . If you want to disable autoscaling for a MIG, [turn off autoscaling](/compute/docs/autoscaler/managing-autoscalers#turn_off_or_restrict_an_autoscaler) .- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of a MIG from the list.\n- Click create **Edit** .\n- You can see the total number of schedules under **Autoscaling schedules** . Click **Manage schedules** to display the list of your existing scaling schedules.\n- Select the checkboxes for the scaling schedules that you want to disable or enable.\n- Disable or enable the selected schedules.- To disable the selected schedules:- At the top of the **Scaling Schedules** pane, clickremove_circle_outline **Disable** .\n- In the new **Disable schedules** dialog, click **Disable** .\n- To enable the selected schedules:- At the top of the **Scaling Schedules** pane, clickcheck_circle_outline **Enable** .\n- In the new **Enable schedules** dialog, click **Enable** .\nYou might need to wait a few minutes before your changes are effective. You can monitor the status of your schedules by clicking refresh **Refresh** at the top of the **Scaling Schedules** pane.\nWhen you are finished, you can close the list by clicking **Done** .\nTo disable or re-enable a scaling schedule, use the [gcloud compute instance-groups managed update-autoscaling command](/sdk/gcloud/reference/compute/instance-groups/managed/update-autoscaling) .\n### Disabling a scaling scheduleTo disable a scaling schedule, use the `--disable-schedule` flag.\n```\ngcloud compute instance-groups managed update-autoscaling MIG_NAME \\\n --disable-schedule=SCHEDULE_NAME \\\n [--zone=ZONE | --region=REGION]\n```\nReplace the following:- ``: the name of a MIG with an existing scaling schedule.\n- ``: the name of the scaling schedule that you want to disable.\n- ``or``: Optional: the zone or region where your MIG is located.\n### Re-enabling a scaling scheduleTo re-enable a scaling schedule, use the `--enable-schedule` flag.\n```\ngcloud compute instance-groups managed update-autoscaling MIG_NAME \\\n --enable-schedule=SCHEDULE_NAME \\\n [--zone=ZONE | --region=REGION]\n```\nReplace the following:- ``: the name of a MIG with an existing scaling schedule.\n- ``: the name of the scaling schedule that you want to re-enable.\n- ``or``: Optional: the zone or region where your MIG is located.\n **Note:** By using the API, you can disable and re-enable [multiple scalingschedules in a single call](#multiple-schedules) .\nTo disable or re-enable scaling schedules for a MIG, use the [autoscalers.patch method](/compute/docs/reference/rest/v1/autoscalers/patch) for a zonal MIG or the [regionAutoscalers.patch method](/compute/docs/reference/rest/v1/regionAutoscalers/patch) for a regional MIG.\n### Disabling scaling schedulesFor each scaling schedule that you want to disable, set the `disabled` field to `true` . For example, make the following call to disable a schedule for a zonal MIG that has an existing autoscaling policy:\n```\nPATCH https://www.googleapis.com/compute/v1/projects/PROJECT/zones/ZONE/autoscalers?autoscaler=AUTOSCALER_NAME\n{\n \"autoscalingPolicy\": {\n \"scalingSchedules\": {\n  \"SCHEDULE_NAME\": {\n  \"disabled\": true\n  },\n  ...\n }\n }\n}\n```\nReplace the following:- ``: your [project id](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- ``: the zone where your MIG is located.\n- ``: the name of an existing autoscaler. This is often the same as the name of the MIG.\n- ``: the name of the scaling schedule that you want to disable.\n### Re-enabling scaling schedulesFor each scaling schedule that you want to re-enable, set the `disabled` field to `false` . For example, make the following call to re-enable a schedule for a zonal MIG that has an existing autoscaling policy:\n```\nPATCH https://www.googleapis.com/compute/v1/projects/PROJECT/zones/ZONE/autoscalers?autoscaler=AUTOSCALER_NAME\n{\n \"autoscalingPolicy\": {\n \"scalingSchedules\": {\n  \"SCHEDULE_NAME\": {\n  \"disabled\": false\n  },\n  ...\n }\n }\n}\n```\nReplace the following:- ``: your [project id](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- ``: the zone where your MIG is located.\n- ``: the name of an existing autoscaler. This is often the same as the name of the MIG.\n- ``: the name of the scaling schedule that you want to re-enable.## Deleting a scaling schedule\nRemove scaling schedules from a MIG by deleting them. Delete schedules that you no longer need, such as schedules with an `OBSOLETE` [status](#schedule_status_information) .\nAn autoscaling policy must always have at least one scaling signal. If no other autoscaling signal exists, then you cannot delete all scaling schedules without deleting the entire autoscaling policy. If you want to delete all scaling schedules but keep the autoscaling policy, you must add at least one scaling signal prior to deleting all the schedules.\nIf you want to prevent a schedule from becoming active and save it for future use, [disable the schedule](#disabling_and_re-enabling_a_scaling_schedule) . If you want to delete the autoscaling configuration for a MIG, [delete the autoscaler](/compute/docs/autoscaler/managing-autoscalers#delete_an_autoscaler) .- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of a MIG from the list.\n- Click create **Edit** .\n- You can see the total number of schedules under **Autoscaling schedules** . Click **Manage schedules** to display the list of your existing scaling schedules.\n- Select the checkboxes for the scaling schedules that you want to delete.\n- At the top of the **Scaling Schedules** pane, click delete **Delete** .\n- In the new **Delete schedules** dialog, click **Delete** .\nYou might need to wait a few minutes before your changes are effective. You can monitor the status of your schedules by clicking refresh **Refresh** at the top of the **Scaling Schedules** pane.\nWhen you are finished, you can close the list by clicking **Done** .\nTo delete a scaling schedule, use the [gcloud compute instance-groups managed update-autoscaling command](/sdk/gcloud/reference/compute/instance-groups/managed/update-autoscaling) with the `--remove-schedule` flag.\n```\ngcloud compute instance-groups managed update-autoscaling MIG_NAME \\\n --remove-schedule=SCHEDULE_NAME \\\n [--zone=ZONE | --region=REGION]\n```\nReplace the following:- ``: the name of a MIG with an existing scaling schedule.\n- ``: the name of the scaling schedule that you want to delete.\n- ``or``: Optional: the zone or region where your MIG is located.\n **Note:** By using the API, you can delete [multiple scalingschedules in a single call](#multiple-schedules) .\nTo delete scaling schedules for a MIG, use the [autoscalers.patch method](/compute/docs/reference/rest/v1/autoscalers/patch) for a zonal MIG or the [regionAutoscalers.patch method](/compute/docs/reference/rest/v1/regionAutoscalers/patch) for a regional MIG. For each scaling schedule that you want to delete, set the schedule configuration to `null`\nFor example, make the following call to delete a schedule for a zonal MIG that has an existing autoscaling policy:\n```\nPATCH https://www.googleapis.com/compute/v1/projects/PROJECT/zones/ZONE/autoscalers?autoscaler=AUTOSCALER_NAME\n{\n \"autoscalingPolicy\": {\n \"scalingSchedules\": {\n  \"SCHEDULE_NAME\": null\n  ...\n }\n }\n}\n```\nReplace the following:- ``: your [project id](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- ``: the zone where your MIG is located.\n- ``: the name of an existing autoscaler. This is often the same as the name of the MIG.\n- ``: the name of the scaling schedule that you want to delete.## Concepts\nThis section describes concepts related to creating and using scaling schedules including schedule settings and details about how they work.\n### Scaling schedule settings\nWhen you create and modify the scaling schedules for a MIG, each scaling schedule contains the following settings:\n- **Minimum required instances** : The number of VMs you require in the MIG when this scaling schedule is active.When this schedule is active, the MIG has at least this number of VMs, but might have more depending on other autoscaling settings. Additionally, the MIG size is always restricted by the minimum and maximum number of instances configured in the MIG's autoscaling settings.\n- **Time zone** : The location-based IANA time zone for interpreting the schedule's start time.A [list of available values](https://wikipedia.org/wiki/List_of_tz_database_time_zones) is defined by the [IANA time zone database](https://wikipedia.org/wiki/Tz_database) \u2014for example, `Europe/Paris` . If no time zone is provided, `UTC` is used by default. Some IANA time zones observe daylight saving time. To learn how daylight saving time affects scaling schedules, see [Daylight saving time](#daylight_saving_time) .\n- **Duration** : The amount of time that you want the scaling schedule to be active.The scaling schedule is active from its start time for the configured duration. The minimum duration is 5 minutes. During this time, autoscaler scales the MIG to have at least as many VMs as defined by the schedule's required instances. After the specified duration, if the current capacity is no longer needed, the autoscaler starts removing VM instances after a default [10-minute stabilization period](/compute/docs/autoscaler/understanding-autoscaler-decisions#delays_in_scaling_in) and following any configured [scale-in controls](/compute/docs/autoscaler/understanding-autoscaler-decisions#scale-in_controls) .Scaling schedules are bidirectional. VMs are removed at the stop time that you specify and the group size is reduced to the minimum group size that you set, unless you have specified other autoscaling signals.\nWhen using the Google Cloud CLI or REST, you must configure the start time and recurrence of a scaling schedule by using a [cron expression](#cron_expressions) . However, when using Google Cloud console, you can configure the start time and recurrence of a schedule either by using a cron expression or the following settings:\n- **Start time** : The time of day when you want the scaling schedule to become active.At the start time, the scaling schedule begins creating VMs whenever the MIG size is lower than the schedule's required instances. Set the start time to allow enough time for new VMs to boot and initialize. For example, if your workload takes 10 minutes from VM creation to begin serving, then set the start time to be 10 minutes earlier than the time you need the VMs to be ready.\n- **Recurrence** : If and how often the scaling schedule repeats, as defined by the following options:- **Once** : a onetime schedule that starts only on the selected date.\n- **Every day** : a repeating schedule that starts every day.\n- **Every week** : a repeating schedule that starts every week on the selected days of the week\u2014for example, every Monday through Friday.\n- **Every month** : a repeating schedule that starts every month on the selected days of the month\u2014for example, on the first day of every month. The last days of the month (days 29 through 31) are only effective during the months when those days occur.\n### Cron expressions\nThe start time and recurrence of a scaling schedule can be configured by using a [cron expression](https://wikipedia.org/wiki/Cron#CRON_expression) . Cron is a time-based job scheduler originally used in Unix-like computer operating systems.\nA cron expression is a string comprising of five or six fields separated by whitespace. The following table defines the fields of a cron expression and the possible values for each field.\n| Minute | Hour | Day of the month | Month           | Day of the week              | Year (optional)        |\n|:---------|:-------|:-------------------|:-----------------------------------------------|:----------------------------------------------------------------------|:--------------------------------------------|\n| 0-59  | 0-23 | 1-31    | 1-12 (Jan-Dec) where 1=Jan, 2=Feb, ... 12=Dec | 0-6 (Sun-Sat) or 1-7 (Mon-Sun) where 0=Sun, 1=Mon, ... 6=Sat, 7=Sun | 2000-2036 or every year (*) if not provided |\nIn addition to using these values, every field in a cron expression can also use special characters:\n| Special character | Meaning | Example                                    |\n|:--------------------|:----------|:------------------------------------------------------------------------------------------------------------------------------------------------------|\n| *     | any  | If the day of month field, day of the week field, and year field (if included) are each set to *, then the schedule starts everyday.    |\n| -     | range  | If the day of week field is set to 1-5 or Mon-Fri, then the schedule starts every week Monday to Friday.           |\n| ,     | list  | If the month field is set to 5,7,9 or May,Jul,Sep, then the schedule starts every May, July, and September.           |\n| /     | step  | If the month field is set to */3, then the schedule starts during the first month and every 3 months after that: January, April, July, and October. |\nWhen you write a cron expression, consider the following:\n- Whitespace is used to separate the fields of a cron expression. Remember to not add extra whitespace in a field that is using special characters.\n- When you specify both a day of the week and a day of the month (when neither field is set to`*`), the schedule uses the union of these values, not the intersection. For example, the schedule`0 8 1 * Mon`starts at 8:00 AM on every Monday and on the first day of every month. That schedule doesstart at 8:00 AM only on Mondays that are also the first day of the month.\n- You can use zero or more special characters in each field of a cron expression. For example, if you want a schedule to start every month except May, you can set the month field to`1-4,6-12`(a list of two ranges without whitespace).\n- When using ranges (`-`), you cannot use`0-7`or`Sun-Sun`for the day of the week field\u2014to specify every day of the week, use`*`,`0-6`,`1-7`,`Sun-Sat`, or`Mon-Sun`instead.\n- When using steps (`/`), remember that cron expressions are stateless, so steps can sometimes be uneven. For example, if you want a schedule to run every 6 hours, you can set the hours field to`*/6`, which behaves the same as listing every valid multiple of 6 (`0,6,12,18`). The steps are even because 24 hours is easily divided into 6-hour parts. However, if you set the hours field to`*/7`, the schedule will not always start in 7-hour intervals. Instead,`*/7`behaves the same as listing every valid multiple of 7 (`0,7,14,21`), meaning that the schedule can start during the hours of 12 AM, 7 AM, 2 PM, and 9 PM.Depending on how you write your cron expression, your schedule might run once or periodically repeat. To create a schedule that only runs once, you must specify the year field. For example, the cron expression `0 0 30 1 * 2030` configures a schedule to only start once, at midnight on January 30, 2030. To create a schedule that repeats, use special characters to describe when that schedule is to repeat. For example, the cron expression `30 8 * * Mon-Fri` configures a schedule to start at 8:30 AM on every Monday, Tuesday, Wednesday, Thursday, and Friday.\n### Schedule status information\n[List your scaling schedules](#listing_your_scaling_schedules) to view their status. A scaling schedule has the following status information:\n- **Status** (`state`): The current status of the scaling schedule, represented by one of the following states:- **Ready** (`READY`): This schedule is ready but not active yet. Autoscaler is awaiting the next occurrence of this schedule.\n- **Active** (`ACTIVE`): This schedule is currently active. Autoscaler is trying to provide this MIG with at least the required instances that this schedule specifies.\n- **Obsolete** (`OBSOLETE`): This schedule has expired; it will not be active again. Autoscaler is ignoring this schedule because there are no future occurrences.\n- **Disabled** (`DISABLED`): This schedule cannot be active because it was manually disabled. Autoscaler is ignoring this schedule until it is re-enabled.\n- **Last occurrence** (`lastStartTime`): The timestamp of the last time this scaling schedule became active. This is the actual date and time of the last activation. For example, if you have a disabled scaling schedule with a daily recurrence, 10 AM start time, and 2-hour duration, and you re-enable the schedule at 11 AM today, then the`lastStartTime`is 11 AM today.\n- **Next occurrence** (`nextStartTime`): The timestamp of the next time this schedule is set to become active.\n### Overlapping schedules\nDepending on start time, recurrence, duration, and time zone, two or more scaling schedules might overlap. When more than one schedule is active, the autoscaler uses the greatest number of required VM instances from all active scaling schedules. This helps you ensure that there is always enough capacity to meet the needs of any active schedule. For example, if you have a schedule that recurs every day 8 AM to 10 AM requiring at least 10 VMs, but also have a one-off all-day schedule requiring at least 20 VMs, then autoscaler scales the MIG to at least 20 VMs on that day. This is useful when you have regular, recurring capacity requirements but sometimes need more to handle onetime events. This behavior lets you schedule capacity without worrying about it being overridden by other schedules with smaller VM requirements.\nAdditionally, an autoscaler always provides the greatest number of VM instances required by any active autoscaling signal. For more information, see [Using an autoscaling policy with multiple signals](/compute/docs/autoscaler/multiple-policies) .\n### Daylight saving time\nThe details of [daylight saving time (DST)](https://wikipedia.org/wiki/Daylight_saving_time) vary according to your scaling schedule's [location-based IANA time zone](#time_zone) . If your schedule's time zone observes DST, the schedule's start time automatically adjusts to stay synchronized with the time for the selected location. For example, if you create a scaling schedule that starts every day at 7 AM for the time zone `America/New_York` , then this schedule starts whenever it is 7 AM in New York, using Eastern Daylight Time or Eastern Standard Time accordingly.\nScaling schedules always run for the entire duration that you configure, but they might have slightly different start and end times on the days when DST observation switches. This happens because DST switches have \u2014a timeframe that is skipped on the first day of DST and that occurs twice on the last day of DST. For example, if DST for your time zone begins at 2 AM and has a 1-hour transition, then the clock changes from 1:59:59 AM to 3 AM, so the timeframe 2 AM to 2:59:59 AM is skipped. If DST for that time zone ends at 2 AM, then the clock changes from 2:59:59 AM to 2 AM, so the timeframe 2 AM to 2:59:59 AM is repeated. The following statements assume that the time zone for your schedule uses a 1-hour DST transition.\nOn the first day of DST (when 1 hour is skipped), scaling schedules have the following changes:\n- Schedules that are active during the skipped hour still run for their entire duration, but to compensate for the skipped hour, these schedules end 1 hour later than their end time on days without DST transitions. Normally, the end time of a schedule is the sum of the schedule's start time and duration. But if DST skips 1 hour while a schedule is active, and the duration and start time remain constant, then the end time for that schedule is 1 hour more than the sum of the schedule's start time and duration.\n- Schedules that are configured to start during the skipped hour also start 1 hour later than their start time on days without DST transitions.\nOn the last day of DST (when 1 hour is repeated), scaling schedules have the following changes:\n- Schedules that are active during the repeat hour still run for their entire duration, but to compensate for the repeated hour, these schedules end 1 hour earlier than their end time on days without DST transitions. Normally, the end time of a schedule is the sum of the schedule's start time and duration. But if DST repeats 1 hour while a schedule is active, and the duration and start time remain constant, then the end time for that schedule is 1 hour less than the sum of the schedule's start time and duration.\n- Schedules that are configured to start during the transition period start at their configured time, but they do not restart during the second, repeated occurrence of the start time.\nMost of the time zones that observe DST use a 1-hour transition period. But, if the time zone for your schedule uses a different transition period\u2014such as the `Australia/Lord_Howe` time zone, which uses 30-minute transitions\u2014you can expect the same behavior. Just replace with the relevant DST transition time.\n## What's next\n- Learn about [using an autoscaling policy with multiple signals](/compute/docs/autoscaler/multiple-policies) .\n- Learn about [managing autoscalers](/compute/docs/autoscaler/managing-autoscalers) .\n- Learn about [understanding autoscaler decisions](/compute/docs/autoscaler/understanding-autoscaler-decisions) .\n- Learn how to autoscale MIGs based on other types of autoscaling signals:- [CPU utilization](/compute/docs/autoscaler/scaling-cpu) \n- [Load balancing serving capacity](/compute/docs/autoscaler/scaling-load-balancing) \n- [Monitoring metrics](/compute/docs/autoscaler/scaling-stackdriver-monitoring-metrics)", "guide": "Compute Engine"}