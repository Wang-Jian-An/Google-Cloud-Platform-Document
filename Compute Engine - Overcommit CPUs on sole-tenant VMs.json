{"title": "Compute Engine - Overcommit CPUs on sole-tenant VMs", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Overcommit CPUs on sole-tenant VMs\nCPU overcommit on [sole-tenant nodes](/compute/docs/nodes) lets you schedule instances that can share their spare CPU cycles with each other. This lets you overprovision sole-tenant node resources and schedule more VM CPUs on a sole-tenant node than are normally available. CPU overcommit is especially valuable for workloads that are underutilized but might experience relatively uncorrelated bursts.\nCPU overcommit can help you reduce per-VM costs by spreading the cost of a sole- tenant node across more VMs. It can also reduce per-VM licensing costs when using per-socket or per-core licenses.\nVMs with overcommitted CPUs can utilize otherwise unused CPU resources in the following ways:\n- If a sole-tenant node isn't full, overcommitted VMs can utilize unallocated cores.\n- If another VM on a sole-tenant node isn't utilizing all of its CPU resources\u2014for example, because the CPU is idle\u2014an overcommitted VM can use those CPU resources.", "content": "## Overcommit level\nYou can specify the value for the minimum number of CPUs that are allocated to a VM when you create a VM or after you stop a VM. The overcommit level represents the minimum number of underlying CPU threads that are guaranteed to be available for a VM. If the VM has more vCPUs than underlying threads available, the VM's vCPUs share the underlying compute resources and run with degraded performance.\nYou can set this value for each VM, which lets you provision VMs with different ratios of CPU overcommit on a single sole-tenant node. Lower values reduce capacity requirements at the potential expense of performance if correlated bursts occur. Determining an optimal value for the minimum number of CPUs requires an understanding of your workload utilization and iterative modification of the value.\nWhen setting this value, keep in mind the following:\n- If you don't set the value for the minimum number of CPUs, or you set the value for the minimum number of CPUs equal to the number of CPUs on the VM's machine type, the VM's allowable overcommit ratio is 1.0. With an overcommit ratio of 1.0, all of the CPUs are accessible only to this VM, and there are no CPU resources available to be overcommitted to other VMs.\n- The minimum number of CPUs can't be greater than the number of CPUs specified by the VM's machine type.\n- The sum of the values for the minimum number of CPUs for all of the VMs on a sole-tenant node can't exceed the CPU capacity of that [sole-tenant nodetype](/compute/docs/nodes/sole-tenant-nodes#node_types) , which on the `n1-node-96-624` node type is 96.\nThe value for the number of CPUs specified by the VM's machine type is a static value, and represents the number of CPUs that a VM can burst up to from the minimum number if those CPUs are available. If you require a number of CPUs different from those provided by [fixed machinetypes](/compute/docs/machine-types#n1_machine_types) , you can use a [custommachine type](/compute/docs/machine-types#custom_machine_types) .\n## Considerations\nBefore configuring the CPU overcommit levels for VMs, consider the criticality of your workload. Less critical workloads, such as development and test workloads, can potentially tolerate higher overcommit levels. More critical workloads, such as a production payments system, might not tolerate as much overcommit or any at all.\nAlso consider the utilization of your workload. Workloads with high CPU utilization are not good candidates for CPU overcommit because they won't have spare utilization cycles for other overcommitted VMs to utilize. Additionally, workloads with low average CPU utilization, but low utilization peak, might benefit from different sizes of machine types.\nUsing CPU overcommit benefits uncorrelated bursty workloads that have high peak utilization and low average utilization because these workloads are more likely to have available CPU resources to share across VMs when some VMs need to burst their utilization. If all of the VMs on a host burst at one time, the host won't have sufficient resources for your VMs.\n**Caution:** Depending on the nature of the workload, overcommitting CPUs on sole-tenant nodes might result in performance fluctuations.\n## Limitations\n## Quota\nCPU quota is based on the number of vCPUs of the [sole-tenant nodetype](/compute/docs/nodes/sole-tenant-nodes#node_types) , not the potential maximum of vCPUs available for overcommitting.\n## Costs\nSole-tenant nodes that have CPU overcommit selected on their node template are charged an additional 25%. This charge is in addition to the [10% premium forrunning VMs on sole-tenant nodes](/compute/sole-tenant-pricing#nodes) . The CPU overcommit premium is fixed, regardless of the CPU overcommit level and how many VMs are scheduled on the sole-tenant node.\nSole-tenant nodes offer [committed usediscounts](/compute/docs/instances/signing-up-committed-use-discounts) . [Sustained use discounts](/compute/docs/sustained-use-discounts) are available for the sole-tenancy premium and the CPU overcommit premium.\nTo estimate the cost of running VMs on sole-tenant nodes, see the [PricingCalculator](/products/calculator) .\n## Configure sole-tenant VMs for overcommitting\nTo configure sole-tenant VMs to have CPU resources available for overcommitting, do the following:\n- Create a sole-tenant node template that has CPU overcommit enabled. You must enable CPU overcommit while creating the node template. You can't enable CPU overcommit after creating a node template.\n- Create a sole-tenant node group based on the sole-tenant node template that has CPU overcommit enabled.\n- Create a VM and do the following:- Choose a machine type for the VM. The number of CPUs on the machine type represents the maximum number of CPUs that the VM can burst up to from the minimum number of CPUs if the minimum number of CPUs is less than the number of CPUs specified by the machine type.You can choose a different machine type for each VM on a sole-tenant node, provided you don't exceed the CPU and memory capacity of the sole-tenant node.\n- Specify the minimum number of CPUs to allocate to that single VM, or use a [managed instance group](/compute/docs/instance-groups#managed_instance_groups) to create multiple VMs that have the same CPU overcommit level.\n## Before you begin\n- [Create a sole-tenant node template](/compute/docs/nodes/provisioning-sole-tenant-vms#create_a_sole-tenant_node_template) and specify`--cpu-overcommit-type=enabled`.\n- [Create a sole-tenant node group](/compute/docs/nodes/provisioning-sole-tenant-vms#create_a_sole-tenant_node_group) based on the sole-tenant node template with CPU overcommit enabled.\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nTo use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```## Set the CPU overcommit level\nThe following procedures show you how to create a sole-tenant VM with CPU resources available for overcommitting. If you need to modify the CPU overcommit level of a VM that is running, you must first stop the VM.\nIn the Google Cloud console, create a sole-tenant VM on a sole-tenant node group that was created from a sole-tenant node template that has CPU overcommit enabled:- Go to the **Sole-tenant nodes** page. [Go to Sole-tenant nodes](https://console.cloud.google.com/compute/soleTenancy) \n- Click **Node Groups** .\n- Click the sole-tenant node group on which to create a VM.\n- Click **Create instance** .\n- Specify the **Name** , **Region** , and **Zone** for the VM.\n- Under **Machine configuration** , choose a fixed or custom **Machinetype** with at least 4 vCPUs.\n- Under **CPU overcommit** , select **Enable CPU overcommit** .\n- Under **Minimum vCPUs Allocated** , adjust the slider or manually enter the number of vCPUs to specify the level of overcommit for the CPUs on this VM.\n- Click **Create** to create a VM instance that has CPU resources available for overcommitting.\nThe following example shows how to use the [gcloud compute instancescreate command](/sdk/gcloud/reference/beta/compute/instances/create) to create a sole-tenant VM on a fixed machine type with CPU resources available for overcommitting.\n```\ngcloud compute instances create VM_NAME \\\u00a0 \u00a0 --machine-type=MACHINE_TYPE \\\u00a0 \u00a0 --min-node-cpu=MIN_VCPUS \\\u00a0 \u00a0 --node-group=GROUP_NAME\n```\nReplace the following:- `` : the name of the VM to overcommit CPUs on.\n- `` : the [machinetype](/compute/docs/machine-types) to provision the sole-tenant VM on. The number of CPUs specified by the machine type is the maximum number of CPUs the VM can burst up to from .\n- `` : the minimum number of vCPUs guaranteed to be available to this VM.\n- `` : the name of the sole-tenant node group to provision the VM on.\n **Setting the overcommit level on a custom machine type** \nTo create a sole-tenant VM with CPU resources available for overcommitting on a custom machine type, omit the `--machine-type` flag, and instead, use the `--custom-cpu` and `--custom-memory` flags to specify the number of CPUs and the amount of memory, in gigabytes, for the custom machine.\nThe following example shows how to use the [instances.insert](/compute/docs/reference/rest/v1/instances/insert) command to create a sole-tenant VM on a fixed machine type with CPU resources available for overcommitting.\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances\n{\n \"machineType\": \"zones/MACHINE_TYPE_ZONE/machineTypes/MACHINE_TYPE\",\n \"name\": \"VM_NAME\",\n \"scheduling\": {\n \"minNodeCpus\": MIN_VCPUS,\n \"nodeAffinities\": [  {\n  \"key\": \"compute.googleapis.com/node-group-name\",\n  \"operator\": \"IN\",\n  \"values\": [   \"GROUP_NAME\"\n  ]\n  }\n ]\n },\n ...\n}\n```\nReplace the following:- `` : the [ID of yourproject](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- `` : the zone for this request.\n- `` : the zone hosting the machine type.\n- `` : the [machinetype](/compute/docs/machine-types) to provision the sole-tenant VM on. The number of CPUs specified by the machine type is the maximum number of CPUs the VM can burst up to from .\n- `` : the name of the sole-tenant VM to overcommit CPUs on.\n- `` : the minimum number of vCPUs guaranteed to be available to this VM.\n- `` : the name of the sole-tenant node group to provision the VM on.\n **Setting the overcommit level on a custom machine type** \nTo create a sole-tenant VM with CPU resources available for overcommitting on a custom machine type, replace the value for the `machineType` field with `zones/zone/machineTypes/custom-` `` `-` `` , replacing with the number of CPUs and with the amount of memory, in megabytes, for the custom machine type.\n## Update the CPU overcommit level\nThe following procedures show you how to update the CPU overcommit level of a sole-tenant VM.\n- To modify the CPU overcommit level of a VM that is running, you must first stop the VM. To stop a VM, use the [gcloud compute instances stop command](/sdk/gcloud/reference/compute/instances/stop) as follows:```\ngcloud compute instances stop VM_NAME\n```Replace `` with the name of the instance that you want to stop.\n- To update the CPU overcommit level of a sole-tenant VM, use the [gcloud compute instances set-scheduling command](/sdk/gcloud/reference/compute/instances/set-scheduling) as follows:```\ngcloud compute instances set-scheduling VM_NAME \\\u00a0 --min-node-cpu=MIN_VCPUS\n```Replace the following:- `` : the name of the sole-tenant VM to modify the CPU overcommit level.\n- `` : the minimum number of vCPUs guaranteed to be available to this VM.- To modify the CPU overcommit level of a VM that is running, you must first stop the VM. To stop a VM, construct a `POST` request using the [instances.stop method](/compute/docs/reference/latest/instances/stop) as follows:```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances/VM_NAME/stop\n```Replace the following:- `` : the [ID of your project](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- `` : the zone for this request.\n- `` : the name of the sole-tenant VM to modify the CPU overcommit level.\n- To update the CPU overcommit level of a sole-tenant VM, use the [instances.setScheduling method](/compute/docs/reference/rest/v1/instances/setScheduling) as follows:```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances/VM_NAME/setScheduling\n{\n\"minNodeCpus\":MIN_VCPUS\n}\n```Replace the following:- `` : the [ID of your project](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- `` : the zone for this request.\n- `` : the name of the sole-tenant VM to modify the CPU overcommit level.\n- `` : the minimum number of vCPUs guaranteed to be available to this VM.\n## Disable CPU overcommitment for sole-tenant VMs\nThe following procedures show you how to disable the CPU overcommitment of a sole-tenant VM.\nThe following example shows how to use the [gcloud compute instances set-scheduling command](/sdk/gcloud/reference/compute/instances/set-scheduling) disable the CPU overcommitment of a sole-tenant VM.\n```\ngcloud compute instances set-scheduling VM_NAME \\\u00a0 --clear-min-node-cpu\n```\nReplace the following:- ``: the name of the sole-tenant VM to disable CPU overcommitment.\nThe following example shows how to use the [instances.setScheduling](/compute/docs/reference/rest/v1/instances/setScheduling) command to disable the CPU overcommitment of a sole-tenant VM.\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances/VM_NAME/setScheduling\n{\n \"minNodeCpus\":null\n}\n```\nReplace the following:- `` : the [ID of yourproject](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- `` : the zone for this request.\n- `` : the name of the sole-tenant VM to disable CPU overcommitment.## View CPU usage\nTo check the CPU usage of sole-tenant VMs in a sole-tenant node group, do the following:\n- In the Google Cloud console, go to the **Sole-tenant nodes** page. [Go to Sole-tenant nodes](https://console.cloud.google.com/compute/soleTenancy) \n- Click **Node groups** .\n- Click the sole-tenant node group containing the sole-tenant node that has the VM with overcommitted CPUs.\n- Click the sole-tenant node that has the VM with overcommitted CPUs.\n- Under the name of the sole-tenant node, view the **CPU usage** , **CPUovercommit type** , and the **Min CPU usage** .- **CPU usage** shows the total of the maximum number of CPUs for all of the VMs on this sole-tenant node divided by the number of CPUs specified by the sole-tenant node type.The number of CPUs on the node available for overcommitting is the numerator minus the denominator, and the overcommit level is the quotient of the numerator and the denominator.\n- **Min CPU usage** shows the sum of the minimum number of CPUs allocated for all of the VMs on a sole-tenant node divided by the number of CPUs specified by the node type.\n## Optimize CPU overcommit levels\nTo help optimize tuning of your CPU overcommit levels, Compute Engine provides the **Scheduler Wait Time** metric. The **Scheduler Wait Time** metric indicates the aggregate wait time for all vCPUs on the VM and helps you determine the impact of CPU overcommit on the VM's performance.\nWorkload sensitivity varies, but a general rule is to use 20 milliseconds of scheduler wait time accrued per second (20\u00a0ms/s) as the maximum wait time for each vCPU. For example, if a VM is set to 8 vCPUs, then a rule-of-thumb threshold is 160\u00a0ms/s, which results in an acceptable average **SchedulerWait Time** of 20\u00a0ms/s per vCPU. The performance requirements of your workload will ultimately dictate acceptable thresholds.\n- In the Google Cloud console, go to the **Monitoring** page. [Go to Monitoring](https://console.cloud.google.com/monitoring) \n- Click **Metrics explorer** .\n- In the **Resource type** field, enter **VM Instance** .\n- In the **Metric** field, enter **Scheduler Wait Time** .\n- Optionally, set up alerting to trigger alerts for VM wait time thresholds by clicking **Alerting** .## What's next\n- [Learn more about sole-tenant nodes](/compute/docs/nodes) \n- [Learn how to bring your own licenses](/compute/docs/nodes/bringing-your-own-licenses)", "guide": "Compute Engine"}