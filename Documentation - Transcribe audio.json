{"title": "Documentation - Transcribe audio", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Transcribe audio\nSpeech-to-Text enables easy integration of Google speech recognition technologies into your solution. Speech-to-Text is a machine learning (ML) technology that gives you full control over your infrastructure and your protected speech data to meet data residency and compliance requirements.\nThe following table describes the key capabilities of Speech-to-Text.\n| Key capabilities | Unnamed: 1                       |\n|:-------------------|:------------------------------------------------------------------------------------------------------|\n| Transcription  | Applies advanced deep learning neural network algorithms from Google to automatic speech recognition. |\n| Models    | Deploys models that are less than 1 GB in size and consume minimal resources.       |\n| API compatible  | Uses an API that is fully compatible with the Speech-to-Text API and its client libraries.   |\nFor a list of supported audio encoding formats, see [AudioEncoding](/distributed-cloud/hosted/docs/latest/gdch/apis/vertex-ai/speech-to-text/rpc/google.cloud.speech.v1#audioencoding) of Speech-to-Text.\n", "content": "## How to use the Speech-to-Text client library\n**Warning:** [Enable the pre-trained APIs](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/vertex-pre-trained-apis) before using the client library.\nWork through the following steps to use the Speech-to-Text client library using `curl` commands or Python:\n- [Open a notebook](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-workbench#open_notebook) as your coding environment. If you don't have an existing notebook, [create a notebook](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-workbench?#create_notebook) .\n- Write your code using the`grpcurl`tool and the API reference documentation to process data. The following code sample shows how to send a request using the`grpcurl`tool.\n- Run your code to generate a Speech-to-Text transcription.\n```\n# Send request via curl (where ${GOPATH} is your go installation path)\"${GOPATH}/bin/grpcurl\" -plaintext -d @ localhost:10000google.cloud.speech.v1.Speech.Recognize < recognize_request.json# Sample request in recognize_request.json# Audio content field should be populated with audio encoded in base64{\u00a0 \"config\": {\u00a0 \u00a0 \"encoding\": \"LINEAR16\",\u00a0 \u00a0 \"sample_rate_hertz\": 16000,\u00a0 \u00a0 \"audio_channel_count\": 1,\u00a0 \u00a0 \"language_code\": \"LANGUAGE_CODE\"\u00a0 },\u00a0 \"audio\": {\u00a0 \u00a0 \u00a0\"content\": \"BASE64_ENCODED_AUDIO_FILE\"\u00a0 \u00a0}\u00a0 }\n```\nReplace with a [supported language code](#supported_languages) .- [Open a notebook](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-workbench#open_notebook) as your coding environment. If you don't have an existing notebook, [create a notebook](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-workbench?#create_notebook) .\n- Write your code using Python to install the Speech-to-Text library from a tar file and get a transcription. The following code sample shows how to import the Speech-to-Text client library and transcribe an audio file.\n- Run your code to generate a Speech-to-Text transcription.\n```\n# Import the Speech-to-Text client library.from google.cloud import speech# Instantiate a client.client = speech.SpeechClient()# Specify the audio file to transcribe.audio_uri = \"YOUR_AUDIO_TO_TRANSCRIBE\"audio = speech.RecognitionAudio(uri=audio_uri)config = speech.RecognitionConfig(\u00a0 \u00a0 encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,\u00a0 \u00a0 sample_rate_hertz=16000,\u00a0 \u00a0 audio_channel_count=1,\u00a0 \u00a0 language_code=\"LANGUAGE_CODE\",)# Detect speech in the audio file.response = client.recognize(config=config, audio=audio)for result in response.results:\u00a0 \u00a0 print(\"Transcript: {}\".format(result.alternatives[0].transcript))\n```\nReplace with a [supported language code](#supported_languages) .\n## Sample of the Speech-to-Text client library\nTo transcribe an audio file using the Speech-to-Text API, first [view the statuses and endpoints](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/vertex-pre-trained-apis#view_service_statuses_and_endpoints) of the pre-trained models to identify your endpoint. Then, follow the sample code:\n```\n# api_endpoint = '0.0.0.0:10000'# local_file_path = '../resources/two_channel_16k.raw'from google.cloud import speech_v1import grpcimport iodef transcribe(local_file_path, api_endpoint):\u00a0 transport = speech_v1.services.speech.transports.SpeechGrpcTransport(channel= grpc.insecure_channel(target=api_endpoint))\u00a0 client = speech_v1.SpeechClient(transport=transport)\u00a0 config = {\u00a0 \u00a0 \"encoding\": speech_v1.RecognitionConfig.AudioEncoding.LINEAR16,\u00a0 \u00a0 \"language_code\": \"LANGUAGE_CODE\",\u00a0 \u00a0 \"sample_rate_hertz\": 16000,\u00a0 \u00a0 \"audio_channel_count\": 1\u00a0 }\u00a0 with io.open(local_file_path, \"rb\") as f:\u00a0 \u00a0 content = f.read()\u00a0 \u00a0 audio = {\"content\": content}\u00a0 \u00a0 response = client.recognize(request={\"config\": config, \"audio\": audio})\n```\nReplace with a [supported language code](#supported_languages) .\n## Supported languages\nThe following languages are supported by Speech-to-Text:\n| Language        | Language code |\n|:--------------------------------------|:----------------|\n| Arabic (Egypt)      | ar-EG   |\n| Arabic (Levantine)     | ar-x-levant  |\n| Arabic (Maghrebi)      | ar-x-maghrebi |\n| Arabic (Peninsular Gulf)    | ar-x-gulf  |\n| Chinese, Mandarin (Simplified, China) | cmn-hans-cn  |\n| English (United States)    | en-US   |\n| French (France)      | fr-FR   |\n| German (Germany)      | de-DE   |\n| Korean (South Korea)     | ko-KR   |\n| Portuguese (Brazil)     | pt-BR   |\n| Russian (Russia)      | ru-RU   |\n| Spanish (United States)    | es-US   |\n| Ukrainian (Ukraine)     | uk-UA   |\n| Urdu (Pakistan)      | ur-PK   |\n| Persian (Iran)      | fa-IR   |\n| Swahili        | sw    |", "guide": "Documentation"}