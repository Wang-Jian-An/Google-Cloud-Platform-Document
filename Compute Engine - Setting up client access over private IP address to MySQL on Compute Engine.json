{"title": "Compute Engine - Setting up client access over private IP address to MySQL on Compute Engine", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Setting up client access over private IP address to MySQL on Compute Engine\nThis tutorial walks you through the process of running a MySQL database on a private network in Google Cloud to allow secure, remote access to the database by using [Compute Engine](/compute) .\nUse this tutorial if you want to install your own MySQL database on Compute Engine, but want to restrict access to only authorized MySQL clients also running on Compute Engine. You might want to manage your own MySQL instance instead of using the [managed service](/sql) , due to cross-region instances, advanced usage of parameters, and specific performance needs.\nThis tutorial describes how to configure your MySQL server app to accept remote traffic from a MySQL client that is installed on a Compute Engine instance on the same private network.\nFor information about how to choose the right MySQL deployment option, see [How to install MySQL on Compute Engine](/solutions/setup-mysql) .\nThis tutorial assumes that you are familiar with the following:- Basic Linux commands\n- Ubuntu-server 18.04\n- MySQL 5.7\n- Compute Engine\n", "content": "## ArchitectureIn this tutorial, you deploy two Compute Engine instances. One instance is the server and the other instance is the client as depicted in the following diagram:## Objectives\n- Create a Compute Engine instance and install MySQL server.\n- Create a Compute Engine instance and install MySQL client.\n- Configure MySQL server for remote access.\n- Remove public access to the MySQL server.\n- Connect remotely to MySQL.\n- Create a VPC Service Controls firewall rule.\n## CostsIn this document, you use the following billable components of Google Cloud:- Compute Engine\n- Cloud Storage\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . ## Before you begin\nWhen you finish this tutorial, you can avoid continued billing by deleting the resources you created. See [Cleaning up](#cleaning-up) for more detail.## Creating Compute Engine instancesCreate two instances for MySQL\u2014a client and a server instance.\n### Create a Compute Engine client instanceCreate a Compute Engine instance. Configure the instance as follows:- Name the instance`my-client`.\n- Set the`--zone`flag to the [zone](/compute/docs/zones#available) in which you want to create   your instance.\n- Set the`--image-project`flag to`ubuntu-os-cloud`.\n- Set the`--image-family`flag to`ubuntu-1804-lts`.\n- Set the`--scopes`flag to`https://www.googleapis.com/auth/cloud-platform`.\n```\ngcloud compute instances create my-client --zone=ZONE --image-project=ubuntu-os-cloud --image-family=ubuntu-1804-lts --scopes=https://www.googleapis.com/auth/cloud-platform\n```\n### Create a Compute Engine server instanceCreate a Compute Engine instance. Configure the instance as follows:- Name the instance`my-server`.\n- Set the`--zone`flag to the [zone](/compute/docs/zones#available) in which you want to create   your instance.\n- Set the`--image-project`flag to`ubuntu-os-cloud`.\n- Set the`--image-family`flag to`ubuntu-1804-lts`.\n- Set the`--scopes`flag to`https://www.googleapis.com/auth/cloud-platform`.\n```\ngcloud compute instances create my-server --zone=ZONE --image-project=ubuntu-os-cloud --image-family=ubuntu-1804-lts --scopes=https://www.googleapis.com/auth/cloud-platform\n```## Installing MySQL clientThe following steps describe how to install MySQL on a Compute Engine instance.- To connect to the`my-client`instance, use the`ssh`command.\n- Update the`apt-get`package manager.```\nsudo apt-get update\n``` **Note:** If you receive an error`Could not get lock /var/lib/dpkg/lock`, wait another minute for the boot processes to complete and try again.\n- Install the MySQL client package.```\nsudo apt-get -y install mysql-client-5.7\n```\n## Installing MySQL serverThe following steps describe how to install MySQL on a Compute Engine instance.- To connect to the`my-server`instance, use the`ssh`command.\n- Update the`apt-get`package manager.```\nsudo apt-get update\n``` **Note:** If you receive an error, \"Could not get lock /var/lib/dpkg/lock'\", wait another minute for the boot processes to complete and try again.\n- Install the MySQL server package.```\nsudo apt-get -y install mysql-server-5.7\n```\n### Improve MySQL installation securityYou must establish a root password for MySQL and perform basic security maintenance on your MySQL server configuration. For more information, see the MySQL documentation for [mysql_secure_installation](https://dev.mysql.com/doc/refman/5.0/en/mysql-secure-installation.html) .- In the SSH session to your `my-server` instance, use the following command to improve the security of your MySQL installation.```\nsudo mysql_secure_installation\n```\n- Press `enter` to skip setting up the `VALIDATE PASSWORD` plugin.\n- Enter a new root password twice.\n- To remove anonymous users, enter `Y` and press `enter` .\n- To prevent remote root login, enter `Y` and press `enter` .\n- To remove the test database, enter `Y` and press `enter` .\n- To reload the privilege tables, enter `Y` and press `enter` .\n## Configuring the MySQL serverBefore you can remotely connect to the MySQL server, you need to configure it to listen on its internal IP address. Then, you create a non-root user account for the MySQL client to connect to the server.\nAll MySQL client commands must include certain command-line flags (for example, to authenticate). The MySQL commands in this section include the following flags: `--user` for the username, `-p` for the password, and `-e` to execute the given statement and immediately quit. For more information, see the [MySQL 5.7 command options reference](https://dev.mysql.com/doc/refman/5.7/en/mysql-command-options.html) .- In Cloud Shell, use SSH to connect to the `my-server` instance.\n- Update the `/etc/mysql/mysql.conf.d/mysqld.cnf` configuration file with the following information:```\nLOCAL_IP=$(curl \u00a0http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip \\\u00a0 \u00a0 -H \"Metadata-Flavor: Google\")sudo sed -i \"s|bind-address.*|bind-address = $LOCAL_IP|\" /etc/mysql/mysql.conf.d/mysqld.cnf\n```\n- Restart the MySQL service to apply the changes to the running server.```\nsudo service mysql restart\n```\n- Verify that the server is running locally. Replace `[ROOT_PASSWORD]` with the MySQL server root password you established in a previous step.```\nsudo mysql --user=root -p[ROOT_PASSWORD] -e \"show databases\"\n```The output appears similar to the following:```\n+--------------------+\n| Database   |\n+--------------------+\n| information_schema |\n| mysql    |\n| performance_schema |\n| sys    |\n+--------------------+\n```\n### Create a MySQL userRemotely connecting as the root user was disabled with the preceding `mysql_secure_installation` command. You need to create a new user with the necessary permissions to allow remote connections.- In Cloud Shell, create an environment variable for the `my-client` internal IP address.```\nCLIENT_IP=$(gcloud compute instances describe my-client \\\u00a0 \u00a0 --zone=ZONE \\\u00a0 \u00a0 --format='value(networkInterfaces[0].networkIP)')\n```\n- Create a new MySQL user with a password. Replace `[MY_PASSWORD]` with your password, `[ROOT_PASSWORD]` with your MySQL root user password.```\nsudo mysql -uroot -p[ROOT_PASSWORD] \\\u00a0 \u00a0 -e \"CREATE USER 'TESTUSER'@'${CLIENT_IP}' IDENTIFIED BY '[MY_PASSWORD]';\"\n```\n- Grant the new MySQL user permission to log on to the server from the internal IP address of `my-client` .```\nsudo mysql -uroot -p[ROOT_PASSWORD] -e \\\u00a0 \u00a0 \"GRANT ALL PRIVILEGES ON *.* TO 'TESTUSER'@'${CLIENT_IP}' \\\u00a0 \u00a0 IDENTIFIED BY '[MY_PASSWORD]';\"\n```\n### Remove the external IP address for my-serverThe `my-server` instance doesn't need an external IP address because the client can access `my-server` through an internal IP address.- To remove the external IP address, update the configuration settings in Cloud Shell. Replace `[ZONE]` with your Google Cloud zone.```\ngcloud compute instances delete-access-config my-server \\\u00a0 \u00a0 --access-config-name \"external-nat\" \\\u00a0 \u00a0 --zone=\"ZONE\"\n```\n## Verifying remote access from client to server instanceThe following steps describe how to connect to the MySQL server on `my-server` from your `my-client` instance.- In Cloud Shell, use SSH to connect to`my-client`instance.\n- Test your connection by listing the databases.```\nsudo mysql --host=my-server --user=TESTUSER \\\u00a0 \u00a0 --password=[MY_PASSWORD] -e \"SHOW DATABASES;\"\n```Output appears similar to the following:```\n+--------------------+\n| Database   |\n+--------------------+\n| information_schema |\n| mysql    |\n| performance_schema |\n| sys    |\n+--------------------+\n```\nThese steps verify that your MySQL client can successfully connect to the MySQL server over the internal IP address.## Firewall considerations in production environmentsThe default network configuration in Google Cloud includes a firewall rule, `default-allow-internal` , that allows internal traffic between Compute Engine instances on a wide range of ports, including the MySQL port, port `3306` . In non-default environments with an established security footprint, you might need to create a firewall rule to allow your `my-client` instance to communicate with your `my-server` instance over the network. Otherwise, the two instances can't talk to each other.\nYou can base firewall rules on IP address ranges or tags. IP address ranges are useful if you want to grant access to a wide range of internal IP addresses. Alternatively, if you want to grant access to specific instances on your network, tags provide a more flexible solution. Tags make it easier to add new clients without granting access to a wide range of IP addresses. You need only assign the appropriate tag to the new MySQL client instance. For example, you can create a new firewall rule that allows traffic from all client instances that are tagged with `mysql-client` .\nTo support firewall rules using tags, you can assign the appropriate tags to the `my-client` and `my-server` VMs in Cloud Shell.\n```\ngcloud compute instances add-tags my-client --tags mysql-client --zone=ZONEgcloud compute instances add-tags my-server --tags mysql-server --zone=ZONE\n```\n### Add a new firewall ruleThe following steps describe how to create a new firewall rule to enable instances with the `my-client` tag to communicate with instances that have the `my-server` tag by using port `3306` .- In Cloud Shell, create a firewall rule to allow communications from `mysql-client` to `mysql-server` .```\ngcloud compute firewall-rules create \"mysql-remote-access\" \\\u00a0 \u00a0 --allow tcp:3306 --source-tags \"mysql-client\" \\\u00a0 \u00a0 --target-tags \"mysql-server\"\n```\nYou can now connect to MySQL from `my-client` .## Access considerations from external clientsThis tutorial covers access from MySQL clients to MySQL servers both running on Compute Engine. It is beyond the scope of this tutorial to allow access from a client not running on Compute Engine. If you need to allow non-Compute Engine access, modify the following:- Add an external IP address to`my-server`to allow external connectivity.\n- Add the source IP address of your external client to the [firewall rules](#add_a_new_firewall_rule) .\n- Modify the`TESTUSER`account, or create a user account, that is bound to the source IP address of your external client.\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this tutorial, you can either [delete the project](#delete_the_project) or [delete the instances](#delete_instances) .\n### Delete the project\nThe easiest way to eliminate billing is to delete the project that you created for the tutorial.\nTo delete the project:\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.### Delete instances\nTo delete a Compute Engine instance:\n- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Select the checkbox for   your`my-server`instance.\n- To delete the instance, clickmore_vert **More actions** , click **Delete** ,  and then follow the instructions.\n## What's next\n- Read about [high availability for MySQL](https://dev.mysql.com/doc/refman/5.6/en/ha-overview.html) .\n- Read about [How to set up MySQL on Compute Engine](/solutions/setup-mysql) .\n- [Configure Cloud Logging for MySQL logs.](/monitoring/agent/plugins/mysql) \n- Explore [Cloud SQL](/sql) .\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Compute Engine"}