{"title": "Cloud Shell - Create and deploy a containerized web app", "url": "https://cloud.google.com/shell/docs/deploy-gke-app", "abstract": "# Cloud Shell - Create and deploy a containerized web app\nLearn how to create a containerized web app using the Cloud Shell Editor, test it locally, and then deploy it to a Google Kubernetes Engine (GKE) cluster.\nTo follow step-by-step guidance for this task directly in the Cloud Shell Editor, click **Guide me** :\n[Guide me](https://console.cloud.google.com/?walkthrough_id=shell__gke_cloud_code)\n", "content": "## Before you begin\n- In the Google Cloud console, go to the project selector page. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- Select or create a Google Cloud project. **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project.## Create your web app\nUse the Cloud Shell Editor as your environment for creating your app. The editor comes preloaded with the tools needed for Cloud development.\nTo create your app:\n- Launch the [Cloud Shell Editor](https://ide.cloud.google.com) .\n- If prompted to authorize Cloud Code to use your credentials to make a Google Cloud API call, click **Authorize** .\n- Launch the **Cloud Code** menu from the status bar.\n- Select **New Application** .\n- Select **Kubernetes application** as the type of sample app.\n- From the list of sample Kubernetes apps, select **Go:Hello World** .\n- Select a folder for your app location and then click **Create NewApplication** .\nCloud Shell Editor loads your app in a new workspace. After it reloads, your app is accessible with the .\n## Test your app in a local cluster\nNow that you've created your app, you can run it in a local Kubernetes cluster in Cloud Shell:\n- To open a Cloud Shell terminal, click **Terminal** > **New Terminal** .\n- To start your local minikube cluster, from the command prompt, run the following command:```\nminikube start\n```It might take a minute to set up the minikube cluster.\n- If prompted to authorize Cloud Shell to make Cloud API calls, click **Authorize** .After your cluster is set up, a message similar to the following appears:```\nDone! kubectl is now configured touse \"minikube\" cluster...\n```\nAfter the local cluster is configured, build and run this app:\n- Launch themenu from the status bar.\n- Select.\n- If prompted, confirm that you want to use the current minikube context.This process takes a few minutes and you can view the deployment status in the view.Clicking different nodes in the Development sessions view displays log excerpts pertaining to the selected deployment phase.\n- After your app finishes building and deploying, find the port forward node for your service: In the Development sessions view, expand **Port Forward URLs** > **service** > .\n- To launch your app, hold the pointer over and then click open_in_new **Open URL** .## Edit your app\nTo understand the Hello World app's components, see the diagram in the app's file. At a high level, the app consists of:\n- A basic`go-hello-world`web app,, that returns a templated \"It's running!\" response to all received requests.\n- A load balancer`go-hello-world-external`service,, that exposes the app by describing a [Kubernetes Service](https://kubernetes.io/docs/concepts/services-networking/service/) .\nTo modify the app:\n- Modify yourfile to print \"It's redeployed!\". The file saves automatically.\n- Give your app a minute to finish building and deploying, and monitor your app's progress as it's rebuilt using the view.\n- After your app finishes building and deploying, find the port forward node for your service: Development sessions > Port Forward URLs > service > .\n- To launch your app, hold the pointer over and click **open_in_new** Open URL.## View app logs\nTo analyze your app while it's running, use the Log Viewer to monitor its logs:\n- Launch the Log Viewer by opening the command palette (accessible with `Ctrl` / `Cmd` + `Shift` + `P` or **View** > **Command Palette** ) and then running **Cloud Code: View Logs** .This view allows you to filter and navigate the logs for your app.\n- Specify the filters to view the logs for your app, `go-hello-world` .\n- Switch to the tab with your app that shows \"It's redeployed!\" Reload the page in the browser and then switch back to the Cloud Shell tab.\n- To view the newly generated logs in the Log Viewer, click refresh .## Create a Google Kubernetes Engine cluster\nTo create a new Google Kubernetes Engine cluster to deploy your app to:\n- Click **CloudCode** and then expand the **Kubernetes** section.\n- Click add **Add a Cluster to the KubeConfig** and then click **Google KubernetesEngine** in the **Quick pick** menu.\n- When prompted to enable `container.googleapis.com` , click **Yes** .\n- Click **+ Create a New GKE Cluster** .\n- Choose **Standard** as the cluster type.\n- Click **Open** to permit Cloud Shell to open the Google Cloud console.\n- In Google Cloud console, use the project you created, set the zone to `us-central1-a` , and set the cluster name to `my-first-cluster` .\n- Click **Create** . Cluster creation takes a few minutes.\n- After the cluster is created, in the **Quick pick** menu, click **Refresh** .\n- After the name of your new cluster appears in the list, click the cluster name. Your new cluster is added to the configuration and configured to be the active context.## Deploy your app to a GKE cluster\nTo deploy your app to the new cluster:\n- From the menu, accessible using the status bar, select .\n- Confirm your newly created cluster as the context for your app.\n- Confirm the default option for your image registry.\n- Give your app a minute to finish building and deploying, and monitor your app's progress as it's rebuilt using the view.\n- After your app finishes building and deploying, find the port forward node for your service: In the Development sessions view, expand **Port Forward URLs** > **service** > .\n- To launch your app, hold the pointer over and click open_in_new **Open URL** .## Cleaning up\nTo delete just the cluster you created for this quickstart:\n- Hold the pointer over your cluster name and then click **Open in Google Cloud console** .\n- Click **Delete** and then click **Delete** .\nTo delete your project (and associated resources, including any clusters):\n- Go to the Projects page in the Google Cloud console: [Go to the Projects page](https://console.cloud.google.com/project) \n- Select the project that you created for this quickstart and then click **Delete** .\n- Type the project ID to confirm and then click **Shut down** .This shuts down the project and schedules it for deletion.## What's next\n- Discover the features of the [Cloud Shell Editor interface](/shell/docs/editor-overview) .\n- Read about [debugging with the Cloud Shell Editor](/shell/docs/debugging) and Cloud Shell Editor's additional support for Kubernetes applications.\n- [Deploy your applications to ARM64, AMD64, or mixed-architecture GKE clusters](/code/docs/shell/deploy-to-arm-amd-mixed-arch) .", "guide": "Cloud Shell"}