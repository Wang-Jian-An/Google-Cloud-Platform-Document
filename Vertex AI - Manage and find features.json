{"title": "Vertex AI - Manage and find features", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Manage and find features\nTo learn more,  run the \"Example Feature Store workflow with sample data\" Jupyter notebook in one of the following  environments: [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/feature_store/sdk-feature-store.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Ffeature_store%2Fsdk-feature-store.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/feature_store/sdk-feature-store.ipynb)\nLearn how to manage and find features.\n", "content": "## Create a feature\nCreate a single feature for an existing entity type. To create multiple features in a single request, see [Batch creatingfeatures](#batch-creating-features) .\n**Note:** Vertex AI has a limit on the number features that you can create per entity type. For more information, see the [Vertex AI Feature Store (Legacy) limits](/vertex-ai/quotas#featurestore) .\n- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- In the features table, view the **Entity type** column and click the entity type to add features to.\n- Click **Add features** to open the **Add features** pane.\n- Specify a name, value type, and (optionally) a description for the feature.\n- To enable feature value monitoring ( [Preview](/products#product-launch-stages) ), under **Feature monitoring** , select **Override entity type monitoring config** and then enter the number of days between snapshots. This configuration overrides any existing or future monitoring configurations on the feature's entity type. For more information, see [Feature value monitoring](/vertex-ai/docs/featurestore/monitoring#feature) .\n- To add more features, click **Add another feature** .\n- Click **Save** .\nTo create a feature for an existing entity type, send a POST request by using the [featurestores.entityTypes.features.create](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features/create) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- : An ID for the feature.\n- : Description of the feature.\n- : The value type of the feature.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID?featureId=FEATURE_ID\n```\nRequest JSON body:\n```\n{\n \"description\": \"DESCRIPTION\",\n \"valueType\": \"VALUE_TYPE\"\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID?featureId=FEATURE_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID?featureId=FEATURE_ID\" | Select-Object -Expand Content\n```\nYou should see output similar to the following. You can use the in the response to [get the status](/vertex-ai/docs/general/long-running-operations) of the operation.\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.v1.CreateFeatureOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2021-03-02T00:04:13.039166Z\",\n  \"updateTime\": \"2021-03-02T00:04:13.039166Z\"\n }\n }\n}\n```\nTo learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/create_feature_sample.py) \n```\nfrom google.cloud import aiplatformdef create_feature_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 feature_id: str,\u00a0 \u00a0 value_type: str,\u00a0 \u00a0 entity_type_id: str,\u00a0 \u00a0 featurestore_id: str,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 my_feature = aiplatform.Feature.create(\u00a0 \u00a0 \u00a0 \u00a0 feature_id=feature_id,\u00a0 \u00a0 \u00a0 \u00a0 value_type=value_type,\u00a0 \u00a0 \u00a0 \u00a0 entity_type_name=entity_type_id,\u00a0 \u00a0 \u00a0 \u00a0 featurestore_id=featurestore_id,\u00a0 \u00a0 )\u00a0 \u00a0 my_feature.wait()\u00a0 \u00a0 return my_feature\n```The client library for Vertex AI is included when you install the Vertex AI SDK for Python. To learn how to install the Vertex AI SDK for Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/install-sdk) . For more information, see the [ Vertex AI SDK for Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/snippets/feature_store_service/create_feature_sample.py) \n```\nfrom google.cloud import aiplatformdef create_feature_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 featurestore_id: str,\u00a0 \u00a0 entity_type_id: str,\u00a0 \u00a0 feature_id: str,\u00a0 \u00a0 value_type: aiplatform.gapic.Feature.ValueType,\u00a0 \u00a0 description: str = \"sample feature\",\u00a0 \u00a0 location: str = \"us-central1\",\u00a0 \u00a0 api_endpoint: str = \"us-central1-aiplatform.googleapis.com\",\u00a0 \u00a0 timeout: int = 300,):\u00a0 \u00a0 # The AI Platform services require regional API endpoints, which need to be\u00a0 \u00a0 # in the same region or multi-region overlap with the Feature Store location.\u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 # Initialize client that will be used to create and send requests.\u00a0 \u00a0 # This client only needs to be created once, and can be reused for multiple requests.\u00a0 \u00a0 client = aiplatform.gapic.FeaturestoreServiceClient(client_options=client_options)\u00a0 \u00a0 parent = f\"projects/{project}/locations/{location}/featurestores/{featurestore_id}/entityTypes/{entity_type_id}\"\u00a0 \u00a0 create_feature_request = aiplatform.gapic.CreateFeatureRequest(\u00a0 \u00a0 \u00a0 \u00a0 parent=parent,\u00a0 \u00a0 \u00a0 \u00a0 feature=aiplatform.gapic.Feature(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value_type=value_type, description=description\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 feature_id=feature_id,\u00a0 \u00a0 )\u00a0 \u00a0 lro_response = client.create_feature(request=create_feature_request)\u00a0 \u00a0 print(\"Long running operation:\", lro_response.operation.name)\u00a0 \u00a0 create_feature_response = lro_response.result(timeout=timeout)\u00a0 \u00a0 print(\"create_feature_response:\", create_feature_response)\n```Before trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/CreateFeatureSample.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.aiplatform.v1.CreateFeatureOperationMetadata;import com.google.cloud.aiplatform.v1.CreateFeatureRequest;import com.google.cloud.aiplatform.v1.EntityTypeName;import com.google.cloud.aiplatform.v1.Feature;import com.google.cloud.aiplatform.v1.Feature.ValueType;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class CreateFeatureSample {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 String entityTypeId = \"YOUR_ENTITY_TYPE_ID\";\u00a0 \u00a0 String featureId = \"YOUR_FEATURE_ID\";\u00a0 \u00a0 String description = \"YOUR_FEATURE_DESCRIPTION\";\u00a0 \u00a0 ValueType valueType = ValueType.STRING;\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 int timeout = 900;\u00a0 \u00a0 createFeatureSample(\u00a0 \u00a0 \u00a0 \u00a0 project,\u00a0 \u00a0 \u00a0 \u00a0 featurestoreId,\u00a0 \u00a0 \u00a0 \u00a0 entityTypeId,\u00a0 \u00a0 \u00a0 \u00a0 featureId,\u00a0 \u00a0 \u00a0 \u00a0 description,\u00a0 \u00a0 \u00a0 \u00a0 valueType,\u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 endpoint,\u00a0 \u00a0 \u00a0 \u00a0 timeout);\u00a0 }\u00a0 static void createFeatureSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 String entityTypeId,\u00a0 \u00a0 \u00a0 String featureId,\u00a0 \u00a0 \u00a0 String description,\u00a0 \u00a0 \u00a0 ValueType valueType,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint,\u00a0 \u00a0 \u00a0 int timeout)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 Feature feature =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Feature.newBuilder().setDescription(description).setValueType(valueType).build();\u00a0 \u00a0 \u00a0 CreateFeatureRequest createFeatureRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CreateFeatureRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EntityTypeName.of(project, location, featurestoreId, entityTypeId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFeature(feature)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFeatureId(featureId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<Feature, CreateFeatureOperationMetadata> featureFuture =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.createFeatureAsync(createFeatureRequest);\u00a0 \u00a0 \u00a0 System.out.format(\"Operation name: %s%n\", featureFuture.getInitialFuture().get().getName());\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to finish...\");\u00a0 \u00a0 \u00a0 Feature featureResponse = featureFuture.get(timeout, TimeUnit.SECONDS);\u00a0 \u00a0 \u00a0 System.out.println(\"Create Feature Response\");\u00a0 \u00a0 \u00a0 System.out.format(\"Name: %s%n\", featureResponse.getName());\u00a0 \u00a0 \u00a0 featurestoreServiceClient.close();\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/create-feature-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const entityTypeId = 'YOUR_ENTITY_TYPE_ID';// const featureId = 'YOUR_FEATURE_ID';// const valueType = 'FEATURE_VALUE_DATA_TYPE';// const description = 'YOUR_ENTITY_TYPE_DESCRIPTION';// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function createFeature() {\u00a0 // Configure the parent resource\u00a0 const parent = `projects/${project}/locations/${location}/featurestores/${featurestoreId}/entityTypes/${entityTypeId}`;\u00a0 const feature = {\u00a0 \u00a0 valueType: valueType,\u00a0 \u00a0 description: description,\u00a0 };\u00a0 const request = {\u00a0 \u00a0 parent: parent,\u00a0 \u00a0 feature: feature,\u00a0 \u00a0 featureId: featureId,\u00a0 };\u00a0 // Create Feature request\u00a0 const [operation] = await featurestoreServiceClient.createFeature(request, {\u00a0 \u00a0 timeout: Number(timeout),\u00a0 });\u00a0 const [response] = await operation.promise();\u00a0 console.log('Create feature response');\u00a0 console.log(`Name : ${response.name}`);\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}createFeature();\n```\n## Batch create features\nCreate features in bulk for an existing type. For batch creation requests, Vertex AI Feature Store (Legacy) creates multiple features at once, which is faster for creating a large number of features compared to the `featurestores.entityTypes.features.create` method.\n**Note:** Vertex AI has a limit on the number features that you can create per entity type. For more information, see the [Vertex AI Feature Store (Legacy) limits](/vertex-ai/quotas#featurestore) .\nSee [creating a feature](#create-feature) .To create one or more features for an existing entity type, send a POST request by using the [featurestores.entityTypes.features.batchCreate](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features/batchCreate) method, as shown in the following sample.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- : The resource name of the entity type to create the features under.  Required format:`projects/` `` `/locations/` `` `/featurestores/` `` `/entityTypes/` ``\n- : An ID for the feature.\n- : Description of the feature.\n- : The value type of the feature.\n- : (Optional) The interval duration between snapshots in  seconds. The value must end with an `s`.\nHTTP method and URL:\n```\nPOST https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features:batchCreate\n```\nRequest JSON body:\n```\n{\n \"requests\": [ {\n  \"parent\" : \"PARENT_1\",\n  \"feature\": {\n  \"description\": \"DESCRIPTION_1\",\n  \"valueType\": \"VALUE_TYPE_1\",\n  \"monitoringConfig\": {\n   \"snapshotAnalysis\": {\n   \"monitoringInterval\": \"DURATION\"\n   }\n  }\n  },\n  \"featureId\": \"FEATURE_ID_1\"\n },\n {\n  \"parent\" : \"PARENT_2\",\n  \"feature\": {\n  \"description\": \"DESCRIPTION_2\",\n  \"valueType\": \"VALUE_TYPE_2\",\n  \"monitoringConfig\": {\n   \"snapshotAnalysis\": {\n   \"monitoringInterval\": \"DURATION\"\n   }\n  }\n  },\n  \"featureId\": \"FEATURE_ID_2\"\n }\n ]\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features:batchCreate\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features:batchCreate\" | Select-Object -Expand Content\n```\nYou should see output similar to the following. You can use the in the response to [get the status](/vertex-ai/docs/general/long-running-operations) of the operation.\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.v1.BatchCreateFeaturesOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2021-03-02T00:04:13.039166Z\",\n  \"updateTime\": \"2021-03-02T00:04:13.039166Z\"\n }\n }\n}\n```\nTo learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/model-builder/batch_create_features_sample.py) \n```\nfrom google.cloud import aiplatformdef batch_create_features_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 entity_type_id: str,\u00a0 \u00a0 featurestore_id: str,\u00a0 \u00a0 sync: bool = True,):\u00a0 \u00a0 aiplatform.init(project=project, location=location)\u00a0 \u00a0 my_entity_type = aiplatform.featurestore.EntityType(\u00a0 \u00a0 \u00a0 \u00a0 entity_type_name=entity_type_id, featurestore_id=featurestore_id\u00a0 \u00a0 )\u00a0 \u00a0 FEATURE_CONFIGS = {\u00a0 \u00a0 \u00a0 \u00a0 \"age\": {\"value_type\": \"INT64\", \"description\": \"User age\"},\u00a0 \u00a0 \u00a0 \u00a0 \"gender\": {\"value_type\": \"STRING\", \"description\": \"User gender\"},\u00a0 \u00a0 \u00a0 \u00a0 \"liked_genres\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"value_type\": \"STRING_ARRAY\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"An array of genres this user liked\",\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 }\u00a0 \u00a0 my_entity_type.batch_create_features(feature_configs=FEATURE_CONFIGS, sync=sync)\n```The client library for Vertex AI is included when you install the Vertex AI SDK for Python. To learn how to install the Vertex AI SDK for Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/install-sdk) . For more information, see the [ Vertex AI SDK for Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/googleapis/python-aiplatform/blob/HEAD/samples/snippets/feature_store_service/batch_create_features_sample.py) \n```\nfrom google.cloud import aiplatformdef batch_create_features_sample(\u00a0 \u00a0 project: str,\u00a0 \u00a0 featurestore_id: str,\u00a0 \u00a0 entity_type_id: str,\u00a0 \u00a0 location: str = \"us-central1\",\u00a0 \u00a0 api_endpoint: str = \"us-central1-aiplatform.googleapis.com\",\u00a0 \u00a0 timeout: int = 300,):\u00a0 \u00a0 # The AI Platform services require regional API endpoints, which need to be\u00a0 \u00a0 # in the same region or multi-region overlap with the Feature Store location.\u00a0 \u00a0 client_options = {\"api_endpoint\": api_endpoint}\u00a0 \u00a0 # Initialize client that will be used to create and send requests.\u00a0 \u00a0 # This client only needs to be created once, and can be reused for multiple requests.\u00a0 \u00a0 client = aiplatform.gapic.FeaturestoreServiceClient(client_options=client_options)\u00a0 \u00a0 parent = f\"projects/{project}/locations/{location}/featurestores/{featurestore_id}/entityTypes/{entity_type_id}\"\u00a0 \u00a0 age_feature = aiplatform.gapic.Feature(\u00a0 \u00a0 \u00a0 \u00a0 value_type=aiplatform.gapic.Feature.ValueType.INT64, description=\"User age\",\u00a0 \u00a0 )\u00a0 \u00a0 age_feature_request = aiplatform.gapic.CreateFeatureRequest(\u00a0 \u00a0 \u00a0 \u00a0 feature=age_feature, feature_id=\"age\"\u00a0 \u00a0 )\u00a0 \u00a0 gender_feature = aiplatform.gapic.Feature(\u00a0 \u00a0 \u00a0 \u00a0 value_type=aiplatform.gapic.Feature.ValueType.STRING, description=\"User gender\"\u00a0 \u00a0 )\u00a0 \u00a0 gender_feature_request = aiplatform.gapic.CreateFeatureRequest(\u00a0 \u00a0 \u00a0 \u00a0 feature=gender_feature, feature_id=\"gender\"\u00a0 \u00a0 )\u00a0 \u00a0 liked_genres_feature = aiplatform.gapic.Feature(\u00a0 \u00a0 \u00a0 \u00a0 value_type=aiplatform.gapic.Feature.ValueType.STRING_ARRAY,\u00a0 \u00a0 \u00a0 \u00a0 description=\"An array of genres that this user liked\",\u00a0 \u00a0 )\u00a0 \u00a0 liked_genres_feature_request = aiplatform.gapic.CreateFeatureRequest(\u00a0 \u00a0 \u00a0 \u00a0 feature=liked_genres_feature, feature_id=\"liked_genres\"\u00a0 \u00a0 )\u00a0 \u00a0 requests = [\u00a0 \u00a0 \u00a0 \u00a0 age_feature_request,\u00a0 \u00a0 \u00a0 \u00a0 gender_feature_request,\u00a0 \u00a0 \u00a0 \u00a0 liked_genres_feature_request,\u00a0 \u00a0 ]\u00a0 \u00a0 batch_create_features_request = aiplatform.gapic.BatchCreateFeaturesRequest(\u00a0 \u00a0 \u00a0 \u00a0 parent=parent, requests=requests\u00a0 \u00a0 )\u00a0 \u00a0 lro_response = client.batch_create_features(request=batch_create_features_request)\u00a0 \u00a0 print(\"Long running operation:\", lro_response.operation.name)\u00a0 \u00a0 batch_create_features_response = lro_response.result(timeout=timeout)\u00a0 \u00a0 print(\"batch_create_features_response:\", batch_create_features_response)\n```Before trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/BatchCreateFeaturesSample.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.aiplatform.v1.BatchCreateFeaturesOperationMetadata;import com.google.cloud.aiplatform.v1.BatchCreateFeaturesRequest;import com.google.cloud.aiplatform.v1.BatchCreateFeaturesResponse;import com.google.cloud.aiplatform.v1.CreateFeatureRequest;import com.google.cloud.aiplatform.v1.EntityTypeName;import com.google.cloud.aiplatform.v1.Feature;import com.google.cloud.aiplatform.v1.Feature.ValueType;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class BatchCreateFeaturesSample {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 String entityTypeId = \"YOUR_ENTITY_TYPE_ID\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 int timeout = 300;\u00a0 \u00a0 batchCreateFeaturesSample(project, featurestoreId, entityTypeId, location, endpoint, timeout);\u00a0 }\u00a0 static void batchCreateFeaturesSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 String entityTypeId,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint,\u00a0 \u00a0 \u00a0 int timeout)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 List<CreateFeatureRequest> createFeatureRequests = new ArrayList<>();\u00a0 \u00a0 \u00a0 Feature titleFeature =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Feature.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDescription(\"The title of the movie\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setValueType(ValueType.STRING)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 Feature genresFeature =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Feature.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDescription(\"The genres of the movie\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setValueType(ValueType.STRING)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 Feature averageRatingFeature =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Feature.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDescription(\"The average rating for the movie, range is [1.0-5.0]\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setValueType(ValueType.DOUBLE)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 createFeatureRequests.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CreateFeatureRequest.newBuilder().setFeature(titleFeature).setFeatureId(\"title\").build());\u00a0 \u00a0 \u00a0 createFeatureRequests.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CreateFeatureRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFeature(genresFeature)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFeatureId(\"genres\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 createFeatureRequests.add(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CreateFeatureRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFeature(averageRatingFeature)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFeatureId(\"average_rating\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build());\u00a0 \u00a0 \u00a0 BatchCreateFeaturesRequest batchCreateFeaturesRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BatchCreateFeaturesRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EntityTypeName.of(project, location, featurestoreId, entityTypeId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addAllRequests(createFeatureRequests)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<BatchCreateFeaturesResponse, BatchCreateFeaturesOperationMetadata>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 batchCreateFeaturesFuture =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.batchCreateFeaturesAsync(batchCreateFeaturesRequest);\u00a0 \u00a0 \u00a0 System.out.format(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Operation name: %s%n\", batchCreateFeaturesFuture.getInitialFuture().get().getName());\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to finish...\");\u00a0 \u00a0 \u00a0 BatchCreateFeaturesResponse batchCreateFeaturesResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 batchCreateFeaturesFuture.get(timeout, TimeUnit.SECONDS);\u00a0 \u00a0 \u00a0 System.out.println(\"Batch Create Features Response\");\u00a0 \u00a0 \u00a0 System.out.println(batchCreateFeaturesResponse);\u00a0 \u00a0 \u00a0 featurestoreServiceClient.close();\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/batch-create-features-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const entityTypeId = 'YOUR_ENTITY_TYPE_ID';// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function batchCreateFeatures() {\u00a0 // Configure the parent resource\u00a0 const parent = `projects/${project}/locations/${location}/featurestores/${featurestoreId}/entityTypes/${entityTypeId}`;\u00a0 const ageFeature = {\u00a0 \u00a0 valueType: 'INT64',\u00a0 \u00a0 description: 'User age',\u00a0 };\u00a0 const ageFeatureRequest = {\u00a0 \u00a0 feature: ageFeature,\u00a0 \u00a0 featureId: 'age',\u00a0 };\u00a0 const genderFeature = {\u00a0 \u00a0 valueType: 'STRING',\u00a0 \u00a0 description: 'User gender',\u00a0 };\u00a0 const genderFeatureRequest = {\u00a0 \u00a0 feature: genderFeature,\u00a0 \u00a0 featureId: 'gender',\u00a0 };\u00a0 const likedGenresFeature = {\u00a0 \u00a0 valueType: 'STRING_ARRAY',\u00a0 \u00a0 description: 'An array of genres that this user liked',\u00a0 };\u00a0 const likedGenresFeatureRequest = {\u00a0 \u00a0 feature: likedGenresFeature,\u00a0 \u00a0 featureId: 'liked_genres',\u00a0 };\u00a0 const requests = [\u00a0 \u00a0 ageFeatureRequest,\u00a0 \u00a0 genderFeatureRequest,\u00a0 \u00a0 likedGenresFeatureRequest,\u00a0 ];\u00a0 const request = {\u00a0 \u00a0 parent: parent,\u00a0 \u00a0 requests: requests,\u00a0 };\u00a0 // Batch Create Features request\u00a0 const [operation] = await featurestoreServiceClient.batchCreateFeatures(\u00a0 \u00a0 request,\u00a0 \u00a0 {timeout: Number(timeout)}\u00a0 );\u00a0 const [response] = await operation.promise();\u00a0 console.log('Batch create features response');\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}batchCreateFeatures();\n```\n## List features\nList all features in a given location. To search for features across all entity types and featurestores in a given location, see the [Searching forfeatures](#searching-features) method.\n- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- In the features table, view the **Features** column to see the features in your project for the selected region.\nTo list all features for a single entity type, send a GET request by using the [featurestores.entityTypes.features.list](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features/list) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\nHTTP method and URL:\n```\nGET https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\ncurl -X GET \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method GET ` -Headers $headers ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"features\": [ {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID_1\",\n  \"description\": \"DESCRIPTION\",\n  \"valueType\": \"VALUE_TYPE\",\n  \"createTime\": \"2021-03-01T22:41:20.626644Z\",\n  \"updateTime\": \"2021-03-01T22:41:20.626644Z\",\n  \"labels\": {\n  \"environment\": \"testing\"\n  },\n  \"etag\": \"AMEw9yP0qJeLao6P3fl9cKEGY4ie5-SanQaiN7c_Ca4QOa0u7AxwO6i75Vbp0Cr51MSf\"\n },\n {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID_2\",\n  \"description\": \"DESCRIPTION\",\n  \"valueType\": \"VALUE_TYPE\",\n  \"createTime\": \"2021-02-25T01:27:00.544230Z\",\n  \"updateTime\": \"2021-02-25T01:27:00.544230Z\",\n  \"labels\": {\n  \"environment\": \"testing\"\n  },\n  \"etag\": \"AMEw9yMdrLZ7Waty0ane-DkHq4kcsIVC-piqJq7n6A_Y-BjNzPY4rNlokDHNyUqC7edw\"\n },\n {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID_3\",\n  \"description\": \"DESCRIPTION\",\n  \"valueType\": \"VALUE_TYPE\",\n  \"createTime\": \"2021-03-01T22:41:20.628493Z\",\n  \"updateTime\": \"2021-03-01T22:41:20.628493Z\",\n  \"labels\": {\n  \"environment\": \"testing\"\n  },\n  \"etag\": \"AMEw9yM-sAkv-u-jzkUOToaAVovK7GKbrubd9DbmAonik-ojTWG8-hfSRYt6jHKRTQ35\"\n }\n ]\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/ListFeaturesSample.java) \n```\nimport com.google.cloud.aiplatform.v1.EntityTypeName;import com.google.cloud.aiplatform.v1.Feature;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import com.google.cloud.aiplatform.v1.ListFeaturesRequest;import java.io.IOException;public class ListFeaturesSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 String entityTypeId = \"YOUR_ENTITY_TYPE_ID\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 listFeaturesSample(project, featurestoreId, entityTypeId, location, endpoint);\u00a0 }\u00a0 static void listFeaturesSample(\u00a0 \u00a0 \u00a0 String project, String featurestoreId, String entityTypeId, String location, String endpoint)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 ListFeaturesRequest listFeaturesRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ListFeaturesRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EntityTypeName.of(project, location, featurestoreId, entityTypeId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 System.out.println(\"List Features Response\");\u00a0 \u00a0 \u00a0 for (Feature element :\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.listFeatures(listFeaturesRequest).iterateAll()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(element);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 featurestoreServiceClient.close();\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/list-features-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const entityTypeId = 'YOUR_ENTITY_TYPE_ID';// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function listFeatures() {\u00a0 // Configure the parent resource\u00a0 const parent = `projects/${project}/locations/${location}/featurestores/${featurestoreId}/entityTypes/${entityTypeId}`;\u00a0 const request = {\u00a0 \u00a0 parent: parent,\u00a0 };\u00a0 // List Features request\u00a0 const [response] = await featurestoreServiceClient.listFeatures(request, {\u00a0 \u00a0 timeout: Number(timeout),\u00a0 });\u00a0 console.log('List features response');\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}listFeatures();\n```To learn how to install and use the Vertex AI SDK for Python, see [Use the Vertex AI SDK for Python](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) . For more information, see the [Vertex AI SDK for Python API reference documentation.](/python/docs/reference/aiplatform/latest)\n## Search for features\nSearch for features based on one or more of their properties, such as feature ID, entity type ID, or feature description. Vertex AI Feature Store (Legacy) searches across all featurestores and entity types in a given location. You can also limit results by filtering on specific featurestores, value types, and labels.\nTo list all features, see [Listing features](#listing-features) .\n- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- Click the features table's **Filter** field.\n- Select a property to filter on such as **Feature** , which returns features that contain a matching string anywhere in their ID.\n- Type a value for the filter and then press enter. Vertex AI Feature Store (Legacy) returns results in the features table.\n- To add additional filters, click the **Filter** field again.\nTo search for features, send a GET request by using the [featurestores.searchFeatures](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores/searchFeatures) method. The following sample uses multiple search parameters, written as `featureId:test AND valueType=STRING` . The query returns features that contain `test` in their ID and whose values are of type `STRING` .\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\nHTTP method and URL:\n```\nGET https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores:searchFeatures?query=\"featureId:test%20AND%20valueType=STRING\"\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\ncurl -X GET \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores:searchFeatures?query=\"featureId:test%20AND%20valueType=STRING\"\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method GET ` -Headers $headers ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores:searchFeatures?query=\"featureId:test%20AND%20valueType=STRING\"\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"features\": [ {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_IDfeature-delete.html/featurestores/featurestore_demo/entityTypes/testing/features/test1\",\n  \"description\": \"featurestore test1\",\n  \"createTime\": \"2021-02-26T18:16:09.528185Z\",\n  \"updateTime\": \"2021-02-26T18:16:09.528185Z\",\n  \"labels\": {\n  \"environment\": \"testing\"\n  }\n }\n ]\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/SearchFeaturesSample.java) \n```\nimport com.google.cloud.aiplatform.v1.Feature;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import com.google.cloud.aiplatform.v1.LocationName;import com.google.cloud.aiplatform.v1.SearchFeaturesRequest;import java.io.IOException;public class SearchFeaturesSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String query = \"YOUR_QUERY\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 searchFeaturesSample(project, query, location, endpoint);\u00a0 }\u00a0 static void searchFeaturesSample(String project, String query, String location, String endpoint)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 SearchFeaturesRequest searchFeaturesRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SearchFeaturesRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setLocation(LocationName.of(project, location).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setQuery(query)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 System.out.println(\"Search Features Response\");\u00a0 \u00a0 \u00a0 for (Feature element :\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.searchFeatures(searchFeaturesRequest).iterateAll()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(element);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 featurestoreServiceClient.close();\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/search-features-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function searchFeatures() {\u00a0 // Configure the locationResource resource\u00a0 const locationResource = `projects/${project}/locations/${location}`;\u00a0 const request = {\u00a0 \u00a0 location: locationResource,\u00a0 \u00a0 query: query,\u00a0 };\u00a0 // Search Features request\u00a0 const [response] = await featurestoreServiceClient.searchFeatures(request, {\u00a0 \u00a0 timeout: Number(timeout),\u00a0 });\u00a0 console.log('Search features response');\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}searchFeatures();\n```To learn how to install and use the Vertex AI SDK for Python, see [Use the Vertex AI SDK for Python](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) . For more information, see the [Vertex AI SDK for Python API reference documentation.](/python/docs/reference/aiplatform/latest)\n## View feature details\nView details about a feature, such as its value type or description. If you use the Google Cloud console and have feature monitoring enabled, you can also view the distribution of feature values over time.\n- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- In the features table, view the **Features** column to find the feature that you want to view details for.\n- Click the name of a feature to view its details.\n- To view its metrics, click **Metrics** . Vertex AI Feature Store (Legacy)  provides feature distribution metrics for the feature.\nTo get details about a feature, send a GET request by using the [featurestores.entityTypes.features.get](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features/get) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- : ID of the feature.\nHTTP method and URL:\n```\nGET https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\ncurl -X GET \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method GET ` -Headers $headers ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID\",\n \"description\": \"DESCRIPTION\",\n \"valueType\": \"VALUE_TYPE\",\n \"createTime\": \"2021-03-01T22:41:20.628493Z\",\n \"updateTime\": \"2021-03-01T22:41:20.628493Z\",\n \"labels\": {\n \"environment\": \"testing\"\n },\n \"etag\": \"AMEw9yOZbdYKHTyjV22ziZR1vUX3nWOi0o2XU3-OADahSdfZ8Apklk_qPruhF-o1dOSD\",\n \"monitoringConfig\": {}\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/GetFeatureSample.java) \n```\nimport com.google.cloud.aiplatform.v1.Feature;import com.google.cloud.aiplatform.v1.FeatureName;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import com.google.cloud.aiplatform.v1.GetFeatureRequest;import java.io.IOException;public class GetFeatureSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 String entityTypeId = \"YOUR_ENTITY_TYPE_ID\";\u00a0 \u00a0 String featureId = \"YOUR_FEATURE_ID\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 getFeatureSample(project, featurestoreId, entityTypeId, featureId, location, endpoint);\u00a0 }\u00a0 static void getFeatureSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 String entityTypeId,\u00a0 \u00a0 \u00a0 String featureId,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 GetFeatureRequest getFeatureRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GetFeatureRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FeatureName.of(project, location, featurestoreId, entityTypeId, featureId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 Feature feature = featurestoreServiceClient.getFeature(getFeatureRequest);\u00a0 \u00a0 \u00a0 System.out.println(\"Get Feature Response\");\u00a0 \u00a0 \u00a0 System.out.println(feature);\u00a0 \u00a0 \u00a0 featurestoreServiceClient.close();\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/get-feature-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const entityTypeId = 'YOUR_ENTITY_TYPE_ID';// const featureId = 'YOUR_FEATURE_ID';// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function getFeature() {\u00a0 // Configure the name resource\u00a0 const name = `projects/${project}/locations/${location}/featurestores/${featurestoreId}/entityTypes/${entityTypeId}/features/${featureId}`;\u00a0 const request = {\u00a0 \u00a0 name: name,\u00a0 };\u00a0 // Get Feature request\u00a0 const [response] = await featurestoreServiceClient.getFeature(request, {\u00a0 \u00a0 timeout: Number(timeout),\u00a0 });\u00a0 console.log('Get feature response');\u00a0 console.log(`Name : ${response.name}`);\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}getFeature();\n```To learn how to install and use the Vertex AI SDK for Python, see [Use the Vertex AI SDK for Python](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) . For more information, see the [Vertex AI SDK for Python API reference documentation.](/python/docs/reference/aiplatform/latest)\n## Delete a feature\nDelete a feature and all of its values.\n- In the Vertex AI section of the Google Cloud console, go to  the **Features** page. [Go to the Features page](https://console.cloud.google.com/vertex-ai/features) \n- Select a region from the **Region** drop-down list.\n- In the features table, view the **Feature** column and find the feature to delete.\n- Click the name of the feature.\n- From the action bar, click **Delete** .\n- Click **Confirm** to delete the feature and its values.\nTo delete a feature, send a DELETE request by using the [featurestores.entityTypes.features.delete](/vertex-ai/docs/reference/rest/v1/projects.locations.featurestores.entityTypes.features/delete) method.\nBefore using any of the request data, make the following replacements:- : Region where the featurestore is located, such as`us-central1`.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : ID of the featurestore.\n- : ID of the entity type.\n- : ID of the feature.\nHTTP method and URL:\n```\nDELETE https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\ncurl -X DELETE \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nExecute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method DELETE ` -Headers $headers ` -Uri \"https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/entityTypes/ENTITY_TYPE_ID/features/FEATURE_ID\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION_ID/featurestores/FEATURESTORE_ID/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.aiplatform.v1.DeleteOperationMetadata\",\n \"genericMetadata\": {\n  \"createTime\": \"2021-02-26T17:32:56.008325Z\",\n  \"updateTime\": \"2021-02-26T17:32:56.008325Z\"\n }\n },\n \"done\": true,\n \"response\": {\n \"@type\": \"type.googleapis.com/google.protobuf.Empty\"\n }\n}\n```\nBefore trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/DeleteFeatureSample.java) \n```\nimport com.google.api.gax.longrunning.OperationFuture;import com.google.cloud.aiplatform.v1.DeleteFeatureRequest;import com.google.cloud.aiplatform.v1.DeleteOperationMetadata;import com.google.cloud.aiplatform.v1.FeatureName;import com.google.cloud.aiplatform.v1.FeaturestoreServiceClient;import com.google.cloud.aiplatform.v1.FeaturestoreServiceSettings;import com.google.protobuf.Empty;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class DeleteFeatureSample {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String featurestoreId = \"YOUR_FEATURESTORE_ID\";\u00a0 \u00a0 String entityTypeId = \"YOUR_ENTITY_TYPE_ID\";\u00a0 \u00a0 String featureId = \"YOUR_FEATURE_ID\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String endpoint = \"us-central1-aiplatform.googleapis.com:443\";\u00a0 \u00a0 int timeout = 300;\u00a0 \u00a0 deleteFeatureSample(\u00a0 \u00a0 \u00a0 \u00a0 project, featurestoreId, entityTypeId, featureId, location, endpoint, timeout);\u00a0 }\u00a0 static void deleteFeatureSample(\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String featurestoreId,\u00a0 \u00a0 \u00a0 String entityTypeId,\u00a0 \u00a0 \u00a0 String featureId,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String endpoint,\u00a0 \u00a0 \u00a0 int timeout)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 FeaturestoreServiceSettings featurestoreServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 try (FeaturestoreServiceClient featurestoreServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 FeaturestoreServiceClient.create(featurestoreServiceSettings)) {\u00a0 \u00a0 \u00a0 DeleteFeatureRequest deleteFeatureRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DeleteFeatureRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FeatureName.of(project, location, featurestoreId, entityTypeId, featureId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 OperationFuture<Empty, DeleteOperationMetadata> operationFuture =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 featurestoreServiceClient.deleteFeatureAsync(deleteFeatureRequest);\u00a0 \u00a0 \u00a0 System.out.format(\"Operation name: %s%n\", operationFuture.getInitialFuture().get().getName());\u00a0 \u00a0 \u00a0 System.out.println(\"Waiting for operation to finish...\");\u00a0 \u00a0 \u00a0 operationFuture.get(timeout, TimeUnit.SECONDS);\u00a0 \u00a0 \u00a0 System.out.format(\"Deleted Feature.\");\u00a0 \u00a0 \u00a0 featurestoreServiceClient.close();\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/delete-feature-sample.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const featurestoreId = 'YOUR_FEATURESTORE_ID';// const entityTypeId = 'YOUR_ENTITY_TYPE_ID';// const featureId = 'YOUR_FEATURE_ID';// const location = 'YOUR_PROJECT_LOCATION';// const apiEndpoint = 'YOUR_API_ENDPOINT';// const timeout = <TIMEOUT_IN_MILLI_SECONDS>;// Imports the Google Cloud Featurestore Service Client libraryconst {FeaturestoreServiceClient} = require('@google-cloud/aiplatform').v1;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: apiEndpoint,};// Instantiates a clientconst featurestoreServiceClient = new FeaturestoreServiceClient(\u00a0 clientOptions);async function deleteFeature() {\u00a0 // Configure the name resource\u00a0 const name = `projects/${project}/locations/${location}/featurestores/${featurestoreId}/entityTypes/${entityTypeId}/features/${featureId}`;\u00a0 const request = {\u00a0 \u00a0 name: name,\u00a0 };\u00a0 // Delete Feature request\u00a0 const [operation] = await featurestoreServiceClient.deleteFeature(request, {\u00a0 \u00a0 timeout: Number(timeout),\u00a0 });\u00a0 const [response] = await operation.promise();\u00a0 console.log('Delete feature response');\u00a0 console.log('Raw response:');\u00a0 console.log(JSON.stringify(response, null, 2));}deleteFeature();\n```To learn how to install and use the Vertex AI SDK for Python, see [Use the Vertex AI SDK for Python](/vertex-ai/docs/python-sdk/use-vertex-ai-python-sdk) . For more information, see the [Vertex AI SDK for Python API reference documentation.](/python/docs/reference/aiplatform/latest)\n## What's next\n- Learn how to [batch import feature values](/vertex-ai/docs/featurestore/ingesting-batch) .\n- Learn how to [monitor feature values imported overtime](/vertex-ai/docs/featurestore/monitoring#feature) .\n- Learn how to serve features through [onlineserving](/vertex-ai/docs/featurestore/serving-online) or [batchserving](/vertex-ai/docs/featurestore/serving-batch) .\n- [Troubleshoot](/vertex-ai/docs/general/troubleshooting#feature-store) common Vertex AI Feature Store (Legacy) issues.", "guide": "Vertex AI"}