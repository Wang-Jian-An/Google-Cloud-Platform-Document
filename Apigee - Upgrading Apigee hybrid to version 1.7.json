{"title": "Apigee - Upgrading Apigee hybrid to version 1.7", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Upgrading Apigee hybrid to version 1.7\nYou are currently viewing version 1.7 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\n**Note: ** This procedure covers upgrading from Apigee hybrid version 1.6.x or from previous releases of Apigee hybrid version 1.7.x to Apigee hybrid version 1.7.6.Use the same procedures for minor version upgrades (for example version 1.6  to 1.7) and for patch release upgrades (for example  1.7.0 to 1.7.6).If you are upgrading from Apigee hybrid version 1.5 or older, you must first upgrade to  hybrid version 1.6 before upgrading to version 1.7.6.  See the instructions for [Upgrading Apigee hybrid to version 1.6](/apigee/docs/hybrid/v1.6/upgrade) .\n", "content": "## \n Upgrading to version 1.7.6 overview.\nUpgrading to Apigee hybrid version 1.7 may require downtime:- When upgrading the Apigee controller to version 1.7.6, all Apigee  deployments undergo a rolling restart. To minimize downtime in production hybrid environments  during a rolling restart, make sure you are running at least two clusters (in the same or  different region/data center). Divert all production traffic to a single cluster and take the  cluster you are about to upgrade offline, and then proceed with the upgrade process. Repeat  the process for each cluster.\n- If you are upgrading Anthos Service Mesh (ASM) to version 1.12.x, from a version prior to  ASM version 1.9, you should expect a few seconds of downtime in the cluster you are upgrading  when the ingress changes between the two versions.\n- If you change your certificate authority while upgrading ASM, you may experience downtime  in your ingress gateway. See [Migrating to Mesh  CA](/service-mesh/v1.10/docs/ca-migration) for more information.\nThe procedures for upgrading Apigee hybrid are organized in the following sections:\n- [Prepare to upgrade to version 1.7](#prepare) .\n- [Install hybrid runtime version 1.7.6](#install-runtime) .\n- [Upgrade cert-manager](#upgrade-cert-manager) .\n- [Upgrade ASM](#upgrade-asm) .## \n Prerequisite\nThese upgrade instructions assume you have Apigee hybrid version 1.6.x or an earlier patch release of version 1.7.x installed and wish to upgrade it to version 1.7.6. If you are updating from an earlier  version see the instructions for [Upgrading  Apigee hybrid to version 1.6](/apigee/docs/hybrid/v1.6/upgrade) .\n## \n Prepare to upgrade to version 1.7\n### \n Back up your hybrid installation\n- These instructions use the environment variable` **$APIGEECTL_HOME** `for the directory  in your file system where the`apigeectl`utility is installed. If needed,`cd`into your`apigeectl`directory and define the variable with the following command:\n```\nexport APIGEECTL_HOME=$PWD\n```\n```\necho $APIGEECTL_HOME\n``````\nexport APIGEECTL_HOME=$PWD\n```\n```\necho $APIGEECTL_HOME\n``````\nset APIGEECTL_HOME=%CD%\n```\n```\necho %APIGEECTL_HOME%\n```\n- (Recommended) Make a backup copy of your version 1.6`$APIGEECTL_HOME/`directory. For example:```\ntar -czvf $APIGEECTL_HOME/../apigeectl-v1.6-backup.tar.gz $APIGEECTL_HOME\n```\n- (Recommended) Back up your Cassandra database following the instructions in [Cassandra backup and recovery](/apigee/docs/hybrid/v1.7/cassandra-backup-overview) \n### \n Upgrade your Kubernetes version\nUpgrade your Kubernetes platform to the versions supported by hybrid 1.7.  Follow your platform's documentation if you need help.### \n Add the Cloud Trace Agent role to the apigee-runtime service account\nOptional: If you plan to use [Cloud trace](/trace/docs/overview) , ensure your `apigee-runtime` service account has the **Cloud Trace Agent** ( `roles/cloudtrace.agent` ) Google role. You can do so in the [Cloud console > IAM & Admin > Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) UI or with the following commands:\n- Get the email address for your`apigee-runtime`service account with the following command:```\ngcloud iam service-accounts list --filter \"apigee-runtime\"\n```If it matches the pattern `apigee-runtime@` ` **$ORG_NAME** ` `.iam.gserviceaccount.com` ,   you can use that pattern in the next step.\n- Assign the **Cloud Trace Agent** role to the service account:```\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n --member=\"serviceAccount:apigee-runtime@$PROJECT_ID.iam.gserviceaccount.com\" \\\n --role=\"roles/cloudtrace.agent\"\n```Where: is the name of the Google Cloud project where Apigee hybrid is installed.\n### \n Replace metrics:stackdriverExporter properties in your overrides.\n**Note:** This step is only necessary if you have specified`metrics:stackdriverExporter`in your`overrides.yaml`file.\nStarting in Hybrid version 1.7, `metrics:stackdriverExporter` has been replaced with `metrics:appStackdriverExporter` and `metrics:proxyStackdriverExporter` .  Replace those properties with equivalent properties. For example, replace:\n```\nmetrics:\n ... ...\n stackdriverExporter:\n resources:\n  limits:\n  cpu: 500m\n  memory: 1Gi\n  requests:\n  cpu: 128m\n  memory: 512Mi\n```\nwith:\n```\nmetrics:\n ... ...\n appStackdriverExporter:\n resources:\n  limits:\n  cpu: 500m\n  memory: 1Gi\n  requests:\n  cpu: 128m\n  memory: 512Mi\n proxyStackdriverExporter:\n resources:\n  limits:\n  cpu: 500m\n  memory: 1Gi\n  requests:\n  cpu: 128m\n  memory: 512Mi\n```\nSee [the Configuration property reference: metrics](/apigee/docs/hybrid/v1.7/config-prop-ref#metrics)\n## \n Install the hybrid 1.7.6 runtime\n**Note: ** Do not create new environments during the upgrade process.\n- Store the latest version number in a variable using the following command:\n```\nexport VERSION=$(curl -s \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/current-version.txt?ignoreCache=1)\n``````\nexport VERSION=$(curl -s \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/current-version.txt)\n``````\nfor /f \"tokens=*\" %a in ('curl -s ^\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/current-version.txt') ^\ndo set VERSION=%a\n```\n- Check that the variable was populated with a version number using the following command. If  you want to use a different version, you can save that in an environment variable instead.```\necho $VERSION\n``````\n\u00a0 1.7.6\n```\n- Be sure you are in the hybrid base directory (the parent of the directory where  the`apigeectl`executable file is located):```\ncd $APIGEECTL_HOME/..\n```\n- Download the release package for your operating system using the following command. Be  sure to select your platform in the following table:\n **Linux 64 bit:** \n```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_linux_64.tar.gz\n``` **Mac 64 bit:** \n```\ncurl -LO \\\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/$VERSION/apigeectl_mac_64.tar.gz\n``` **Windows 64 bit:** \n```\ncurl -LO ^\n https://storage.googleapis.com/apigee-release/hybrid/apigee-hybrid-setup/%VERSION%/apigeectl_windows_64.zip\n```\n- Rename your current`apigeectl/`directory to a backup directory name. For example:\n```\nmv $APIGEECTL_HOME/ $APIGEECTL_HOME-v1.6/\n``````\nmv $APIGEECTL_HOME/ $APIGEECTL_HOME-v1.6/ \n``````\nrename %APIGEECTL_HOME% %APIGEECTL_HOME%-v1.6 \n```\n- Extract the downloaded gzip file contents into your hybrid base directory. The  hybrid base directory is the directory where the renamed `apigeectl-v1.6` directory is located:\n```\ntar xvzf filename.tar.gz -C ./\n``````\ntar xvzf filename.tar.gz -C ./\n``````\ntar xvzf filename.zip -C ./\n```\n- The tar contents are, by default, expanded into a directory with the version and platform in  its name. For example: `./apigeectl_1.7.6-d591b23_linux_64` . Rename that directory  to `apigeectl` using the following command:\n```\nmv directory-name-linux apigeectl\n``````\nmv directory-name-mac apigeectl\n``````\nrename directory-name-windows apigeectl\n```\n- Change to the`apigeectl`directory:```\ncd ./apigeectl\n```The `apigeectl` executable is in this directory.\n- These instructions use the environment variable` **$APIGEECTL_HOME** `for the directory  in your file system where the`apigeectl`utility is installed. If needed,`cd`into your`apigeectl`directory and define the variable with the following command:\n```\nexport APIGEECTL_HOME=$PWD\n```\n```\necho $APIGEECTL_HOME\n``````\nexport APIGEECTL_HOME=$PWD\n```\n```\necho $APIGEECTL_HOME\n``````\nset APIGEECTL_HOME=%CD%\n```\n```\necho %APIGEECTL_HOME%\n```\n- Verify the version of`apigeectl`with the`version`command:```\n./apigeectl version\n``````\nVersion: 1.7.6\n```\n- Move to the`` `/hybrid-files`directory. The`hybrid-files`directory is where configuration files such as the overrides file, certs, and service accounts  are located. For example:```\ncd $APIGEECTL_HOME/../hybrid-files\n```\n- Verify that`kubectl`is set to the correct context using the following command.  The current context should be set to the cluster in which you are upgrading Apigee hybrid.```\nkubectl config get-contexts | grep \\*\n```\n- In the`hybrid-files`directory:- Update the following symbolic links to`$APIGEECTL_HOME`. These links allow you to run the newly installed`apigeectl`command from inside the`hybrid-files`directory:```\nln -nfs $APIGEECTL_HOME/tools tools\nln -nfs $APIGEECTL_HOME/config config\nln -nfs $APIGEECTL_HOME/templates templates\nln -nfs $APIGEECTL_HOME/plugins plugins\n```\n- To check that the symlinks were created correctly, execute the following command and make  sure the link paths point to the correct locations:```\nls -l | grep ^l\n```\n- Do a dry run initialization to check for errors:```\n${APIGEECTL_HOME}/apigeectl init -f ./overrides/OVERRIDES.yaml --dry-run=client\n```Where is the name of your overrides file.\n- If there are no errors, initialize hybrid 1.7.6:```\n${APIGEECTL_HOME}/apigeectl init -f ./overrides/OVERRIDES.yaml\n```\n- Check the initialization status:```\n${APIGEECTL_HOME}/apigeectl check-ready -f ./overrides/OVERRIDES.yaml\n```\n- Check for errors with a dry run of the`apply`command:```\n${APIGEECTL_HOME}/apigeectl apply -f ./overrides/OVERRIDES.yaml --dry-run=client\n```\n- If there are no errors, apply your overrides. Select and follow the instructions for production environments or  demo/experimental environments, depending on your installation.During the upgrade process each component will perform a rolling restart.   Therefore, for production environments, it is best to apply the upgrade to one component at   a time.\nFor production environments you should upgrade each hybrid component individually, and    check the status of the upgraded component before proceeding to the next component.- Be sure you are in the`hybrid-files`directory.\n- Apply your overrides to upgrade Cassandra:```\n${APIGEECTL_HOME}/apigeectl apply -f ./overrides/OVERRIDES.yaml --datastore\n```\n- Check completion:```\n${APIGEECTL_HOME}/apigeectl check-ready -f ./overrides/OVERRIDES.yaml\n``` **Tip:** If`check-ready`fails, you can get more     information about your pods with:```\nkubectl -n NAMESPACE get pods\n```Where is your Apigee hybrid namespace.Proceed to the next step only when the pods are ready.\n- Apply your overrides to upgrade Telemetry components and check completion:```\n${APIGEECTL_HOME}/apigeectl apply -f ./overrides/OVERRIDES.yaml --telemetry\n``````\n${APIGEECTL_HOME}/apigeectl check-ready -f ./overrides/OVERRIDES.yaml\n```\n- Bring up Redis components:```\n${APIGEECTL_HOME}/apigeectl apply -f ./overrides/OVERRIDES.yaml --redis\n```\n- Apply your overrides to upgrade the org-level components (MART, Watcher and Apigee    Connect) and check completion:```\n${APIGEECTL_HOME}/apigeectl apply -f ./overrides/OVERRIDES.yaml --org\n``````\n${APIGEECTL_HOME}/apigeectl check-ready -f ./overrides/OVERRIDES.yaml\n```\n- Apply your overrides to upgrade your environments. You have two choices:- **Environment by environment** : Apply your overrides to one environment at a time and check completion. Repeat     this step for each environment:```\n${APIGEECTL_HOME}/apigeectl apply -f ./overrides/OVERRIDES.yaml --env ENV_NAME\n``````\n${APIGEECTL_HOME}/apigeectl check-ready -f ./overrides/OVERRIDES.yaml\n```Where is the name of the environment you are upgrading.\n- **All environments at one time** : Apply your overrides to all environments at once and check completion:```\n${APIGEECTL_HOME}/apigeectl apply -f ./overrides/OVERRIDES.yaml --all-envs\n``````\n${APIGEECTL_HOME}/apigeectl check-ready -f ./overrides/OVERRIDES.yaml\n```In most demo or experimental environments, you can apply the overrides to all components    at once. If your demo/experimental environment large and complex or closely mimics a    production environment, you may want to use the instructions for upgrading [production environments](#production) - Be sure you are in the`hybrid-files`directory.\n- ```\n${APIGEECTL_HOME}/apigeectl apply -f ./overrides/OVERRIDES.yaml\n```\n- Check the status:```\n${APIGEECTL_HOME}/apigeectl check-ready -f ./overrides/OVERRIDES.yaml\n```\n## \n Upgrade cert-manager to version v1.7.2\nIf you are running a version of `cert-manager` prior to v1.7.2, you need to upgrade it to v1.7.2.\n**Important: ** The ASM upgrade (as described in the next step) will install cert-manager in the`cert-manager`namespace. If for certain reasons, you need to use your own cert-manager, follow the steps described in [Conflicting cert-manager installation](/anthos/clusters/docs/on-prem/1.10/known-issues#conflicting_cert-manager_installation) before continuing.\n- Check the current `cert-manager` version using the following command:```\nkubectl -n cert-manager get deployment -o yaml | grep 'image:'\n```Something similar to the following is returned:```\nimage: quay.io/jetstack/cert-manager-controller:v1.7.2image: quay.io/jetstack/cert-manager-cainjector:v1.7.2image: quay.io/jetstack/cert-manager-webhook:v1.7.2\n```\n- Remove the deployments using the following command:```\n$ kubectl delete -n cert-manager deployment cert-manager cert-manager-cainjector cert-manager-webhook\n```\n- Upgrade`cert-manager`to v1.7.2 version using the following command:```\n$ kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.2/cert-manager.yaml\n```## \n Upgrade ASM to version 1.12\nYou may experience a brief interruption of incoming traffic (typically less  than two seconds) when you upgrade ASM. If you are running hybrid in two or more clusters, you  can avoid this interruption by upgrading one cluster at a time. Divert all production traffic  away from the cluster you are about to upgrade, take the cluster offline, and then proceed  with the upgrade process. Repeat the process for each cluster.\nPerform the upgrade using the ASM documentation appropriate for your platform:\nThe instructions to install and configure ASM are different depending on your platform. The platforms are divided into the following categories:\n- **GKE** : Google Kubernetes Engine clusters running on Google Cloud.\n- **Outside Google Cloud** : Anthos clusters running on:- **Anthos clusters on VMware (GKE on-prem)** \n- **Anthos on bare metal** \n- **Anthos clusters on AWS** \n- **Amazon EKS** \n- **Other Kubernetes Platforms** : Conformant clusters created and running on:- **AKS** \n- **EKS** \n- **OpenShift** **Important: ** This ASM upgrade will install cert-manager in the`cert-manager`namespace. If for certain reasons, you need to use your own cert-manager, follow the steps described in [Conflicting cert-manager installation](/anthos/clusters/docs/on-prem/1.10/known-issues#conflicting_cert-manager_installation) before continuing.\nThe sequence for upgrading to ASM version 1.12.9 for your hybrid    installation is as follows:- Prepare for the upgrade.\n- Install the new version of ASM.\n- Delete the previous ASM version's deployments, services, and webhooks from your     current installation.\n- Upgrade your gateways and configure the new webhooks.\nTo upgrade to ASM version 1.12.9 for hybrid on GKE:\n **Note:** You can upgrade directly from ASM version 1.10 or    higher to ASM version 1.12.9. If you are running a version of ASM    older than 1.10, you must first upgrade to version 1.10. Follow the instructions in [Upgrading from earlier versions](/service-mesh/v1.12/docs/upgrade-path-old-versions-gke) - Review the requirements in [Upgrade Anthos     Service Mesh](/service-mesh/v1.12/docs/unified-install/upgrade) , but do not perform the upgrade yet.\n- Before installing the new version, determine the current revision. You will need     this information to delete the previous ASM version's deployments, services, and     webhooks from your current installation. Use the following command to store the     current istiod revision to an environment variable:```\nexport DELETE_REV=$(kubectl get deploy -n istio-system -l app=istiod -o jsonpath={.items[].metadata.labels.'istio\\.io\\/rev'}'{\"\\n\"}')\necho ${DELETE_REV}\n```\n- Create a new`overlay.yaml`file or verify that your existing`overlay.yaml`contains the following contents:```\napiVersion: install.istio.io/v1alpha1kind: IstioOperatorspec:\u00a0 revision: asm-1129-3\u00a0 components:\u00a0 \u00a0 ingressGateways:\u00a0 \u00a0 \u00a0 - name: istio-ingressgateway\u00a0 \u00a0 \u00a0 \u00a0 enabled: true\u00a0 \u00a0 \u00a0 \u00a0 k8s:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # default node selector, if different or not using node selectors, change accordingly.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cloud.google.com/gke-nodepool: apigee-runtime\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 1000m\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: LoadBalancer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 loadBalancerIP: STATIC_IP # If you do not have a reserved static IP, leave this out.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http-status-port\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 15021\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 80\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: https\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 443\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8443\u00a0 meshConfig:\u00a0 \u00a0 accessLogFormat:\u00a0 \u00a0 \u00a0 '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n```\n- Follow the instructions in the following sections in the ASM documentation: **Important:** Make sure to follow the instructions to     upgrade ASM with optional features, and to include your`overlay.yaml`.- [Download      asmcli](/service-mesh/v1.12/docs/unified-install/install-dependent-tools#download_asmcli) \n- [Grant      cluster admin permissions](/service-mesh/v1.12/docs/unified-install/install-dependent-tools#grant_cluster_admin_permissions) \n- [Validate      project and cluster](/service-mesh/v1.12/docs/unified-install/install-dependent-tools#validate_project_and_cluster) \n- [Upgrade      with optional features](/service-mesh/v1.12/docs/unified-install/upgrade#upgrade_with_optional_features) . Stop before starting the \"Upgrade Gateways section\"\n- Delete the mutating webhook and validating webhook:- `cd`into the directory where you installed`asmcli`.\n- Store the current new revision in an environment variable to use in the script      to delete the webhooks:```\nUPGRADE_REV=\"asm-1129-3\"\n```\n- create a shell script containing the following commands:```\n#!/bin/bash\nset -ex\nPROJECT_ID=\"YOUR_PROJECT_ID\"\nCLUSTER_NAME=\"YOUR_CLUSTER_NAME\"\nCLUSTER_LOCATION=\"YOUR_CLUSTER_LOCATION\"\nkubectl label namespace istio-system istio.io/rev=${UPGRADE_REV} istio-injection- --overwrite\nkubectl rollout restart deployment -n istio-system\nkubectl apply -n istio-system -f PATH_TO_INGRESSGATEWAYistio-ingressgateway\nkubectl apply -n istio-system -f PATH_TO_INGRESSGATEWAY/istio-ingressgateway-connectors\nif [[ \"${DELETE_REV}\" != \"${UPGRADE_REV}\" ]]; then\n kubectl apply -f out/asm/istio/istiod-service.yaml\n kubectl delete deploy -l app=istio-ingressgateway,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete deploy -l app=istio-ingressgateway-connectors,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete ValidatingWebhookConfiguration -l app=istiod,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete MutatingWebhookConfiguration -l app=sidecar-injector,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete Service,Deployment,HorizontalPodAutoscaler,PodDisruptionBudget istiod-${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete IstioOperator installed-state-${DELETE_REV} -n istio-system --ignore-not-found=true\nfi\n```\n- Execute the script to delete the current webhooks.\n- Follow the steps in [Upgrade     gateways](/service-mesh/v1.12/docs/unified-install/upgrade#upgrade_gateways) to create the new webhooks and switch traffic to the new gateways.\nThese instructions cover upgrading ASM on:- **Anthos clusters on VMware (GKE on-prem)** \n- **Anthos on bare metal** \n- **Anthos clusters on AWS** \n- **Amazon EKS** \n **Note:** You can upgrade directly from ASM version 1.10 or    higher to ASM version 1.12.9. If you are running an older version of    ASM, you must first upgrade to version 1.10. Follow the instructions in [Upgrading from earlier versions](/service-mesh/v1.12/docs/upgrade-path-old-versions-on-prem) \nThe sequence for upgrading to ASM version 1.12.9 for your hybrid    installation is as follows:- Prepare for the upgrade.\n- Install the new version of ASM.\n- Delete the previous ASM version's deployments, services, and webhooks from your     current installation.\n- Upgrade your gateways and configure the new webhooks.\n- Review the requirements in [Upgrade Anthos     Service Mesh](/service-mesh/v1.12/docs/unified-install/upgrade) , but do not perform the upgrade yet.\n- Before installing the new version, determine the current revision. You will need     this information to delete theandfrom your current ASM installation. Use the following command to store the current     istiod revision to an environment variable:```\nexport DELETE_REV=$(kubectl get deploy -n istio-system -l app=istiod -o jsonpath={.items[].metadata.labels.'istio\\.io\\/rev'}'{\"\\n\"}')\necho ${DELETE_REV}\n```\n- Create a new`overlay.yaml`file or verify that your existing`overlay.yaml`contains the following contents:```\napiVersion: install.istio.io/v1alpha1kind: IstioOperatorspec:\u00a0 revision: asm-1129-3\u00a0 components:\u00a0 \u00a0 ingressGateways:\u00a0 \u00a0 \u00a0 - name: istio-ingressgateway\u00a0 \u00a0 \u00a0 \u00a0 enabled: true\u00a0 \u00a0 \u00a0 \u00a0 k8s:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nodeSelector:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # default node selector, if different or not using node selectors, change accordingly.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cloud.google.com/gke-nodepool: apigee-runtime\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 1000m\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: LoadBalancer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 loadBalancerIP: STATIC_IP # If you do not have a reserved static IP, leave this out.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http-status-port\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 15021\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: http2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 80\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - name: https\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 443\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 targetPort: 8443\u00a0 values:\u00a0 \u00a0 gateways:\u00a0 \u00a0 \u00a0 istio-ingressgateway:\u00a0 \u00a0 \u00a0 \u00a0 runAsRoot: true\u00a0 meshConfig:\u00a0 \u00a0 accessLogFormat:\u00a0 \u00a0 \u00a0 '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n```\n- Follow the instructions in the following sections in the ASM documentation: **Important:** Make sure to follow the instructions to     upgrade ASM with optional features, and to include your`overlay.yaml`.- [Download      asmcli](/service-mesh/v1.12/docs/unified-install/install-dependent-tools#download_asmcli) \n- [Grant      cluster admin permissions](/service-mesh/v1.12/docs/unified-install/install-dependent-tools#grant_cluster_admin_permissions) \n- [Validate      project and cluster](/service-mesh/v1.12/docs/unified-install/install-dependent-tools#validate_project_and_cluster) \n- [Upgrade      with optional features](/service-mesh/v1.12/docs/unified-install/upgrade#upgrade_with_optional_features) . Stop before starting the \"Upgrade Gateways section\"\n- Delete the mutating webhook and validating webhook:- `cd`into the directory where you installed`asmcli`.\n- Store the current new revision in an environment variable to use in the script      to delete the webhooks:```\nUPGRADE_REV=\"asm-1129-3\"\n```\n- create a shell script containing the following commands:```\n#!/bin/bash\nset -ex\nPROJECT_ID=\"YOUR_PROJECT_ID\"\nCLUSTER_NAME=\"YOUR_CLUSTER_NAME\"\nCLUSTER_LOCATION=\"YOUR_CLUSTER_LOCATION\"\ngcloud config configurations activate ${PROJECT_ID}\ngcloud container clusters get-credentials ${CLUSTER_NAME} --region ${CLUSTER_LOCATION} --project ${PROJECT_ID}\nkubectl label namespace istio-system istio.io/rev=${UPGRADE_REV} istio-injection- --overwrite\nkubectl rollout restart deployment -n istio-system\nkubectl apply -n istio-system -f PATH_TO_INGRESSGATEWAYistio-ingressgateway\nkubectl apply -n istio-system -f PATH_TO_INGRESSGATEWAY/istio-ingressgateway-connectors\nif [[ \"${DELETE_REV}\" != \"${UPGRADE_REV}\" ]]; then\n kubectl apply -f out/asm/istio/istiod-service.yaml\n kubectl delete deploy -l app=istio-ingressgateway,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete deploy -l app=istio-ingressgateway-connectors,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete ValidatingWebhookConfiguration -l app=istiod,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete MutatingWebhookConfiguration -l app=sidecar-injector,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete Service,Deployment,HorizontalPodAutoscaler,PodDisruptionBudget istiod-${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete IstioOperator installed-state-${DELETE_REV} -n istio-system --ignore-not-found=true\nfi\n```\n- Execute the script to delete the current webhooks.\n- Follow the steps in [Upgrade     gateways](/service-mesh/v1.12/docs/unified-install/upgrade#upgrade_gateways) to create the new webhooks and switch traffic to the new gateways.\nIn these instructions the process of upgrading Anthos Service Mesh (ASM) version  istio-1.12.9-asm.3 on Anthos attached clusters is the same as performing a fresh install.\n### \n Preparing to install Anthos Service Mesh\n \n- Delete the mutating webhook and validating webhook:- `cd`into the directory where you installed`asmcli`.\n- Store the current new revision in an environment variable to use in the script      to delete the webhooks:```\nUPGRADE_REV=\"asm-1129-3\"\n```\n- create a shell script containing the following commands:```\n#!/bin/bash\nset -ex\nkubectl label namespace istio-system istio.io/rev=${UPGRADE_REV} istio-injection- --overwrite\nkubectl rollout restart deployment -n istio-system\nkubectl apply -n istio-system -f PATH_TO_INGRESSGATEWAYistio-ingressgateway\nif [[ \"${DELETE_REV}\" != \"${UPGRADE_REV}\" ]]; then\n kubectl apply -f out/asm/istio/istiod-service.yaml\n kubectl delete deploy -l app=istio-ingressgateway,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete deploy -l app=istio-ingressgateway-connectors,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete ValidatingWebhookConfiguration -l app=istiod,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete MutatingWebhookConfiguration -l app=sidecar-injector,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete Service,Deployment,HorizontalPodAutoscaler,PodDisruptionBudget istiod-${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete IstioOperator installed-state-${DELETE_REV} -n istio-system --ignore-not-found=true\nfi\n```\n- Execute the script to delete the current webhooks.\nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-linux-amd64.tar.gz\n```\nDownload the signature file and use openssl to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-linux-amd64.tar.gz.1.sig\n``````\nopenssl dgst -verify /dev/stdin -signature istio-1.12.9-asm.3-linux-amd64.tar.gz.1.sig istio-1.12.9-asm.3.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.12.9-asm.3-linux-amd64.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.12.9-asm.3` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.12.9-asm.3\n```\nFor convenience, add the tools in the /bin directory to your PATH:```\nexport PATH=$PWD/bin:$PATH\n```Download the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-osx.tar.gz\n```\nDownload the signature file and use openssl to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-osx.tar.gz.1.sig\n``````\nopenssl dgst -sha256 -verify /dev/stdin -signature istio-1.12.9-asm.3-osx.tar.gz.1.sig istio-1.12.9-asm.3.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.12.9-asm.3-osx.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.12.9-asm.3` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.12.9-asm.3\n```\nFor convenience, add the tools in the /bin directory to your PATH:```\nexport PATH=$PWD/bin:$PATH\n```Download the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-win.zip\n```\nDownload the signature file and use openssl to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-win.zip.1.sig\n``````\nopenssl dgst -verify - -signature istio-1.12.9-asm.3-win.zip.1.sig istio-1.12.9-asm.3.win.zip <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.12.9-asm.3-win.zip\n```The command creates an installation directory in your current working directory named `istio-1.12.9-asm.3` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests\\profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.12.9-asm.3\n```\nFor convenience, add the tools in the \\bin directory to your PATH:```\nset PATH=%CD%\\bin:%PATH%\n```\n- Now that ASM Istio is installed, check the version of`istioctl`:```\nistioctl version\n```\n- Create a namespace called istio-system for the control plane components:```\nkubectl create namespace istio-system\n```\n### \n Installing Anthos Service Mesh\n- Edit your`overlay.yaml`file or create a new one with the following contents:```\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nspec:\n meshConfig:\n accessLogFile: /dev/stdout\n enableTracing: true\n accessLogFormat:\n  '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n components:\n - enabled: true\n name: istio-ingressgateway\n k8s:\n  service:\n  type: LoadBalancer\n  ports:\n  - name: status-port\n   port: 15021\n   targetPort: 15021\n  - name: http2\n   port: 80\n   targetPort: 8080\n  - name: https\n   port: 443\n   targetPort: 8443\n```\n- Install Anthos Service Mesh with`istioctl`using the`asm-multicloud`profile:```\nistioctl install \\\n --set profile=asm-multicloud \\\n --set revision=\"asm-1129-3\" \\\n --filename overlayfile.yaml\n```Your output should look something like:```\nkubectl get pods -n istio-systemNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 READY \u00a0 STATUS \u00a0 \u00a0RESTARTS \u00a0 AGEistio-ingressgateway-88b6fd976-flgp2 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m13sistio-ingressgateway-88b6fd976-p5dl9 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02m57sistiod-asm-1129-3-798ffb964-2ls88 \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21sistiod-asm-1129-3-798ffb964-fnj8c \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21s\n```The `--set revision` argument adds a revision label in the format `istio.io/rev=asm-1129-3` to istiod. The revision label is used by the  automatic sidecar injector webhook to associate injected sidecars with a particular istiod  revision. To enable sidecar auto-injection for a namespace, you must label it with a revision  that matches the label on istiod.\n- Verify that your install completed:```\nkubectl get svc -n istio-system\n```Your output should look something like:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TYPE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CLUSTER-IP \u00a0 \u00a0 \u00a0 EXTERNAL-IP \u00a0 \u00a0 PORT(S) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0AGEistio-ingressgateway \u00a0 LoadBalancer \u00a0 172.200.48.52 \u00a0 \u00a034.74.177.168 \u00a0 15021:30479/TCP,80:30030/TCP,443:32200/TCP,15012:32297/TCP,15443:30244/TCP \u00a0 3m35sistiod \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.18.133 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04m46sistiod-asm-1129-3 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.63.220 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m43s\n```\nIn these instructions the process of upgrading Anthos Service Mesh (ASM) version  istio-1.12.9-asm.3 on Anthos attached clusters is the same as performing a fresh install.\n### \n Preparing to install Anthos Service Mesh\n \n- Delete the mutating webhook and validating webhook:- `cd`into the directory where you installed`asmcli`.\n- Store the current new revision in an environment variable to use in the script      to delete the webhooks:```\nUPGRADE_REV=\"asm-1129-3\"\n```\n- create a shell script containing the following commands:```\n#!/bin/bash\nset -ex\nkubectl label namespace istio-system istio.io/rev=${UPGRADE_REV} istio-injection- --overwrite\nkubectl rollout restart deployment -n istio-system\nkubectl apply -n istio-system -f PATH_TO_INGRESSGATEWAYistio-ingressgateway\nkubectl apply -n istio-system -f PATH_TO_INGRESSGATEWAY/istio-ingressgateway-connectors\nif [[ \"${DELETE_REV}\" != \"${UPGRADE_REV}\" ]]; then\n kubectl apply -f out/asm/istio/istiod-service.yaml\n kubectl delete deploy -l app=istio-ingressgateway,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete deploy -l app=istio-ingressgateway-connectors,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete ValidatingWebhookConfiguration -l app=istiod,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete MutatingWebhookConfiguration -l app=sidecar-injector,istio.io/rev=${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete Service,Deployment,HorizontalPodAutoscaler,PodDisruptionBudget istiod-${DELETE_REV} -n istio-system --ignore-not-found=true\n kubectl delete IstioOperator installed-state-${DELETE_REV} -n istio-system --ignore-not-found=true\nfi\n```\n- Execute the script to delete the current webhooks.\nGrant the`anyuid`security context constraint (SCC) to the istio-system with the   following OpenShift CLI (`oc`) command:```\noc adm policy add-scc-to-group anyuid system:serviceaccounts:istio-system\n```\nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-linux-amd64.tar.gz\n```\nDownload the signature file and use openssl to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-linux-amd64.tar.gz.1.sig\n``````\nopenssl dgst -verify /dev/stdin -signature istio-1.12.9-asm.3-linux-amd64.tar.gz.1.sig istio-1.12.9-asm.3.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.12.9-asm.3-linux-amd64.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.12.9-asm.3` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.12.9-asm.3\n```\nFor convenience, add the tools in the /bin directory to your PATH:```\nexport PATH=$PWD/bin:$PATH\n```Grant the`anyuid`security context constraint (SCC) to the istio-system with the   following OpenShift CLI (`oc`) command:```\noc adm policy add-scc-to-group anyuid system:serviceaccounts:istio-system\n```\nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-osx.tar.gz\n```\nDownload the signature file and use openssl to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-osx.tar.gz.1.sig\n``````\nopenssl dgst -sha256 -verify /dev/stdin -signature istio-1.12.9-asm.3-osx.tar.gz.1.sig istio-1.12.9-asm.3.tar.gz <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.12.9-asm.3-osx.tar.gz\n```The command creates an installation directory in your current working directory named `istio-1.12.9-asm.3` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests/profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.12.9-asm.3\n```\nFor convenience, add the tools in the /bin directory to your PATH:```\nexport PATH=$PWD/bin:$PATH\n```Grant the`anyuid`security context constraint (SCC) to the istio-system with the   following OpenShift CLI (`oc`) command:```\noc adm policy add-scc-to-group anyuid system:serviceaccounts:istio-system\n```\nDownload the Anthos Service Mesh installation file to your current working directory:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-win.zip\n```\nDownload the signature file and use openssl to verify the signature:```\ncurl -LO https://storage.googleapis.com/gke-release/asm/istio-1.12.9-asm.3-win.zip.1.sig\n``````\nopenssl dgst -verify - -signature istio-1.12.9-asm.3-win.zip.1.sig istio-1.12.9-asm.3.win.zip <<'EOF'-----BEGIN PUBLIC KEY-----MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWZrGCUaJJr1H8a36sG4UUoXvlXvZwQfk16sxprI2gOJ2vFFggdq3ixF2h4qNBt0kI7ciDhgpwS8t+/960IsIgw==-----END PUBLIC KEY-----EOF\n```\nExtract the contents of the file to any location on your file system. For example,   to extract the contents to the current working directory:```\ntar xzf istio-1.12.9-asm.3-win.zip\n```The command creates an installation directory in your current working directory named `istio-1.12.9-asm.3` that contains:- Sample applications in the`samples`directory.\n- The`istioctl`command-line tool that you use to install Anthos Service    Mesh is in the`bin`directory.\n- The Anthos Service Mesh configuration profiles are in the`manifests\\profiles`directory.\nEnsure that you're in the Anthos Service Mesh installation's root directory:```\ncd istio-1.12.9-asm.3\n```\nFor convenience, add the tools in the \\bin directory to your PATH:```\nset PATH=%CD%\\bin:%PATH%\n```\n- Now that ASM Istio is installed, check the version of`istioctl`:```\nistioctl version\n```\n- Create a namespace called istio-system for the control plane components:```\nkubectl create namespace istio-system\n```\n### \n Installing Anthos Service Mesh\n- Edit your`overlay.yaml`file or create a new one with the following contents:```\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nspec:\n meshConfig:\n accessLogFile: /dev/stdout\n enableTracing: true\n accessLogFormat:\n  '{\"start_time\":\"%START_TIME%\",\"remote_address\":\"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%\",\"user_agent\":\"%REQ(USER-AGENT)%\",\"host\":\"%REQ(:AUTHORITY)%\",\"request\":\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\",\"request_time\":\"%DURATION%\",\"status\":\"%RESPONSE_CODE%\",\"status_details\":\"%RESPONSE_CODE_DETAILS%\",\"bytes_received\":\"%BYTES_RECEIVED%\",\"bytes_sent\":\"%BYTES_SENT%\",\"upstream_address\":\"%UPSTREAM_HOST%\",\"upstream_response_flags\":\"%RESPONSE_FLAGS%\",\"upstream_response_time\":\"%RESPONSE_DURATION%\",\"upstream_service_time\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"upstream_cluster\":\"%UPSTREAM_CLUSTER%\",\"x_forwarded_for\":\"%REQ(X-FORWARDED-FOR)%\",\"request_method\":\"%REQ(:METHOD)%\",\"request_path\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"request_protocol\":\"%PROTOCOL%\",\"tls_protocol\":\"%DOWNSTREAM_TLS_VERSION%\",\"request_id\":\"%REQ(X-REQUEST-ID)%\",\"sni_host\":\"%REQUESTED_SERVER_NAME%\",\"apigee_dynamic_data\":\"%DYNAMIC_METADATA(envoy.lua)%\"}'\n components:\n - enabled: true\n name: istio-ingressgateway\n k8s:\n  service:\n  type: LoadBalancer\n  ports:\n  - name: status-port\n   port: 15021\n   targetPort: 15021\n  - name: http2\n   port: 80\n   targetPort: 8080\n  - name: https\n   port: 443\n   targetPort: 8443\n```\n- Install Anthos Service Mesh with`istioctl`using the`asm-multicloud`profile:```\nistioctl install \\\n --set profile=asm-multicloud \\\n --set revision=\"asm-1129-3\" \\\n --filename overlayfile.yaml\n```Your output should look something like:```\nkubectl get pods -n istio-systemNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 READY \u00a0 STATUS \u00a0 \u00a0RESTARTS \u00a0 AGEistio-ingressgateway-88b6fd976-flgp2 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m13sistio-ingressgateway-88b6fd976-p5dl9 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a02m57sistiod-asm-1129-3-798ffb964-2ls88 \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21sistiod-asm-1129-3-798ffb964-fnj8c \u00a0 \u00a0 \u00a0 1/1 \u00a0 \u00a0 Running \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m21s\n```The `--set revision` argument adds a revision label in the format `istio.io/rev=1.6.11-asm.1` to istiod. The revision label is used by the  automatic sidecar injector webhook to associate injected sidecars with a particular istiod  revision. To enable sidecar auto-injection for a namespace, you must label it with a revision  that matches the label on istiod.\n- Verify that your install completed:```\nkubectl get svc -n istio-system\n```Your output should look something like:```\nNAME \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TYPE \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CLUSTER-IP \u00a0 \u00a0 \u00a0 EXTERNAL-IP \u00a0 \u00a0 PORT(S) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0AGEistio-ingressgateway \u00a0 LoadBalancer \u00a0 172.200.48.52 \u00a0 \u00a034.74.177.168 \u00a0 15021:30479/TCP,80:30030/TCP,443:32200/TCP,15012:32297/TCP,15443:30244/TCP \u00a0 3m35sistiod \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.18.133 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a04m46sistiod-asm-1129-3 \u00a0 \u00a0 \u00a0 ClusterIP \u00a0 \u00a0 \u00a0172.200.63.220 \u00a0 <none> \u00a0 \u00a0 \u00a0 \u00a0 \u00a015010/TCP,15012/TCP,443/TCP,15014/TCP \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a03m43s\n```\n**Congratulations!** You have successfully upgraded to Apigee hybrid version 1.7.6.\n## \n Rolling back an upgrade\nFollow these steps to roll back a previous upgrade:\n- Clean up completed jobs for the hybrid runtime namespace, whereis the  namespace specified in your overrides file, if you specified a namespace. If not, the default namespace  is`apigee`:```\nkubectl delete job -n NAMESPACE \\\n $(kubectl get job -n NAMESPACE \\\n -o=jsonpath='{.items[?(@.status.succeeded==1)].metadata.name}')\n```\n- Clean up completed jobs for the`apigee-system`namespace:```\nkubectl delete job -n apigee-system \\\n $(kubectl get job -n apigee-system \\\n -o=jsonpath='{.items[?(@.status.succeeded==1)].metadata.name}')\n```\n- Change the`APIGEECTL_HOME`variable to point to the directory that contains the previous  version of`apigeectl`. For example:```\nexport APIGEECTL_HOME=PATH_TO_PREVIOUS_APIGEECTL_DIRECTORY\n```\n- In the root directory of the installation you want to roll back to, run` **${APIGEECTL_HOME}** ` `/apigeectl apply`, check the status of your pods, and then run` **${APIGEECTL_HOME}** ` `/apigeectl init`. Be sure to use the original overrides file for the version you  wish to roll back to:- In the`hybrid-files`directory, run` **${APIGEECTL_HOME}** ` `/apigeectl apply`:```\n${APIGEECTL_HOME}/apigeectl apply -f ./overrides/ORIGINAL_OVERRIDES.yaml\n```Where is the overrides file for your previous version   hybrid installation, for example, `overrides1.6.yaml` .\n- Check the status of your pods:```\nkubectl -n NAMESPACE get pods\n```Where is your Apigee hybrid namespace.\n- Check the status of`apigeeds`:```\nkubectl describe apigeeds -n apigee\n```Your output should look something like:```\nStatus:\u00a0 Cassandra Data Replication:\u00a0 Cassandra Pod Ips:\u00a0 \u00a0 10.8.2.204\u00a0 Cassandra Ready Replicas: \u00a01\u00a0 Components:\u00a0 \u00a0 Cassandra:\u00a0 \u00a0 \u00a0 Last Successfully Released Version:\u00a0 \u00a0 \u00a0 \u00a0 Revision: \u00a0v1-f8aa9a82b9f69613\u00a0 \u00a0 \u00a0 \u00a0 Version: \u00a0 v1\u00a0 \u00a0 \u00a0 Replicas:\u00a0 \u00a0 \u00a0 \u00a0 Available: \u00a01\u00a0 \u00a0 \u00a0 \u00a0 Ready: \u00a0 \u00a0 \u00a01\u00a0 \u00a0 \u00a0 \u00a0 Total: \u00a0 \u00a0 \u00a01\u00a0 \u00a0 \u00a0 \u00a0 Updated: \u00a0 \u00a01\u00a0 \u00a0 \u00a0 State: \u00a0 \u00a0 \u00a0 \u00a0running\u00a0 Scaling:\u00a0 \u00a0 In Progress: \u00a0 \u00a0 \u00a0 \u00a0 false\u00a0 \u00a0 Operation:\u00a0 \u00a0 Requested Replicas: \u00a00\u00a0 State: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 running\n```Proceed to the next step only when the `apigeeds` pod is running.\n- Run`apigeectl init`:```\n${APIGEECTL_HOME}/apigeectl init -f ./overrides/ORIGINAL_OVERRIDES.yaml\n```", "guide": "Apigee"}