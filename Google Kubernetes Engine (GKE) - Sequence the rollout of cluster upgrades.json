{"title": "Google Kubernetes Engine (GKE) - Sequence the rollout of cluster upgrades", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview", "abstract": "# Google Kubernetes Engine (GKE) - Sequence the rollout of cluster upgrades\nThis page shows you how to manage GKE cluster upgrades using rollout sequencing. To learn more, see [About cluster upgrades with rollout sequencing](/kubernetes-engine/docs/concepts/about-rollout-sequencing) .\n", "content": "## Before you begin\nBefore you start, make sure you have performed the following tasks:\n- Enable    the Google Kubernetes Engine API.\n- [    Enable Google Kubernetes Engine API   ](https://console.cloud.google.com/flows/enableapi?apiid=container.googleapis.com) \n- If you want to use the Google Cloud CLI for this task, [install](/sdk/docs/install) and then [initialize](/sdk/docs/initializing) the  gcloud CLI. If you previously installed the gcloud CLI, get the latest  version by running`gcloud components update`. **Note:** For existing gcloud CLI  installations, make sure to set the`compute/region`and`compute/zone` [properties](/sdk/docs/properties#setting_properties) . By setting default locations,  you can avoid errors in gcloud CLI like the following:`One of [--zone, --region] must be supplied: Please specify location`.\n- Ensure that you have enabled the [required APIs forfleets](/anthos/fleet-management/docs/before-you-begin#enable_apis) . These APIs must be enabled in your fleet host projects to create any type of rollout sequence.\n- Ensure that you have [enabled GKE Enterprise](/anthos/docs/setup/enable-gkee) in your [fleet hostprojects](/anthos/fleet-management/docs/fleet-concepts#fleet-host-project) if you want to create a [team-based rolloutsequence](/kubernetes-engine/docs/concepts/about-rollout-sequencing#scope-based-sequence) (Preview).\n- For Terraform instructions, ensure that you use the version 5.13.0 or later of the [google](https://registry.terraform.io/providers/hashicorp/google/latest) provider.\n### Required roles\n- Ensure that you have the [required IAM permissions](/anthos/fleet-management/docs/before-you-begin#grant_iam_roles) for cluster registration. You must grant the following permissions:- [Cluster registration permissions](/anthos/fleet-management/docs/before-you-begin#grant_cluster_registration_permissions) , in your fleet host projects.\n- [Cluster admin permissions](/anthos/fleet-management/docs/before-you-begin#grant_cluster_admin_permissions) for any GKE clusters to be registered.\n- [Cross-project cluster registration permissions](/anthos/fleet-management/docs/before-you-begin/gke#gke-cross-project) for any GKE clusters to be registered to a fleet in a different project.\n## Configure a rollout sequence\nThis document explains how to create a rollout sequence using groups of clusters organized by [fleets](/anthos/fleet-management/docs) or [team scopes](/anthos/fleet-management/docs/fleet-concepts#fleet_scopes) . You can include both Autopilot and Standard clusters.\nYou can create a sequence of up to three groups of clusters, and you can choose how much soak time you want after cluster upgrades are complete in a group (maximum 30 days).\nTo create a rollout sequence, your clusters must be organized into groups of either fleets or team scopes. For guidance on how to organize your clusters, see [this example](/kubernetes-engine/docs/concepts/about-rollout-sequencing#example) . After they are organized into groups, you can create a rollout sequence by defining the upstream group relationships and each group's soak time.\n### Organize your clusters into groups\nIn a rollout sequence, all clusters in all groups must be enrolled in the same release channel and be on the same minor version. If these requirements are not met and there are version discrepancies between clusters, this can cause issues with the version rollout. For more information, see [Rollout eligibility](/kubernetes-engine/docs/concepts/about-rollout-sequencing#rollout-eligibility) .\nYou can create rollout sequences between fleets, or rollout sequences between a team's (Preview).\nAs you saw in [About cluster upgrades with rollout sequencing](/kubernetes-engine/docs/concepts/about-rollout-sequencing) , [team scopes](/anthos/fleet-management/docs/team-management#fleet_team_management_overview) are an enterprise fleet-level construct for associating subsets of fleet clusters with specific application teams. You must [enableGKE Enterprise](/anthos/docs/setup/enable-gkee) to use team scopes. The following limitations apply when using or creating team scopes for rollout sequencing:\n- Team-based sequences require clusters: in other words, each individual cluster is only associated with a single team. Shared clusters (which are supported in general fleet team management) are not supported for rollout sequencing.\n- Each team scope must be in a different fleet to create a rollout sequence between them. Creating a rollout sequence between different team scopes within the same fleet is unsupported.\nIf you have already organized your clusters into groups, you can skip the following steps and proceed to [Create a rollout sequence](#create-rollout-sequence) .\nTo create a fleet-based rollout sequence, first you must group your clusters into fleets. You can organize your clusters by deployment environments such as Testing, Staging, and Production, as shown in the [example fleet-based rolloutsequence](/kubernetes-engine/docs/concepts/about-rollout-sequencing#fleet-based-sequence) .\n [Register each cluster with a fleet](/anthos/fleet-management/docs/register/gke#register_your_cluster) based on your chosen grouping.\n **    Preview     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .To create a team-based rollout sequence, you must group your clusters into team scopes. To do so, first you organize your clusters into fleets by deployment environments such as Testing, Staging, and Production, as shown in the [example scope-based rolloutsequence](/kubernetes-engine/docs/concepts/about-rollout-sequencing#scope-based-sequence) . Then, you can further subdivide your clusters into scopes for different teams' clusters.- For each cluster in the sequence, [register your cluster with a fleet](/anthos/fleet-management/docs/register/gke#register_your_cluster) . The cluster should be registered to the fleet in the project where you will create the team scope for this cluster. If you want to register a cluster to a fleet in a different host project, ensure you have set the necessary permissions for [cross-project registration](/anthos/fleet-management/docs/before-you-begin/gke#gke-cross-project) .\n- [Create 2-3 team scopes](/anthos/fleet-management/docs/setup-teams#create_a_team_scope) to organize your clusters. Create each scope in the host project of the team's respective fleet. You can have up to three team scopes in a rollout sequence.See the reference for [gcloud alpha container fleet scopescreate](/sdk/gcloud/reference/alpha/container/fleet/scopes/create) for a complete list of flags. With the `create` command, you can use the flags in the instructions to [create a rollout sequence](#create-rollout-sequence) .\n- [Add each cluster to a scope](/anthos/fleet-management/docs/setup-teams#add_clusters_to_a_scope) .\n### Create a rollout sequence\nA rollout sequence is organized as a [linked list](https://en.wikipedia.org/wiki/Linked_list) with up to three elements.\nWhen you create a rollout sequence, you set the following properties for each group of clusters, either a fleet or team scope:\n- **Upstream group:** The upstream fleet or team scope, which qualifies new versions for the downstream group. You don't set an upstream group for the first group in a sequence.\n- **Soak time:** The soak time for a group is the time between when upgrades complete (or rollout has taken 30 days) and when upgrades can begin on the downstream group. To learn more, see [How version qualification works in a rollout sequence](/kubernetes-engine/docs/concepts/about-rollout-sequencing#version-qualification) .\nFor each of the following commands, replace `` with the soak time for the group you are updating.\nThe following instructions use the `gcloud container fleet clusterupgrade update` command, however you can set the same properties with the `gcloud container fleet clusterupgrade create` command.\nCreate a rollout sequence:- Set the soak time for the first fleet in the sequence:```\ngcloud container fleet clusterupgrade update \\\u00a0 \u00a0 --default-upgrade-soaking=SOAK_TIME \\\u00a0 \u00a0 --project=FIRST_FLEET_PROJECT_ID\n```Replace `` with the project ID of the fleet host project.\n- Set the upstream fleet and the soak time for the second fleet in the sequence:```\ngcloud container fleet clusterupgrade update \\\u00a0 \u00a0 --upstream-fleet=FIRST_FLEET_PROJECT_ID \\\u00a0 \u00a0 --default-upgrade-soaking=SOAK_TIME \\\u00a0 \u00a0 --project=SECOND_FLEET_PROJECT_ID\n```Replace `` with the project ID of the first fleet's host project, and `` with the project ID of the fleet host project.\n- Optional: If you want to have three fleets in a rollout sequence, set the upstream fleet for the third fleet in the sequence: **Note:** You must set a soak time for each group, including the last group in a rollout sequence.```\ngcloud container fleet clusterupgrade update \\\u00a0 \u00a0 --upstream-fleet=SECOND_FLEET_PROJECT_ID \\\u00a0 \u00a0 --default-upgrade-soaking=SOAK_TIME \\\u00a0 \u00a0 --project=THIRD_FLEET_PROJECT_ID\n```Replace `` with the project ID of the second fleet's host project, and `` with the project ID of the fleet host project.\nThis section shows you how to create a fleet-based sequence using Terraform. You can also use this resource to update the sequence. To learn more, see the reference documentation for [google_gke_hub_feature](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/gke_hub_feature) .\nCreate a rollout sequence:- Add the following block to your Terraform configuration to set the soak time for the first fleet in the sequence:```\nresource \"google_gke_hub_feature\" \"feature\" {\u00a0 name = \"clusterupgrade\"\u00a0 location = \"global\"\u00a0 spec {\u00a0 \u00a0 clusterupgrade {\u00a0 \u00a0 \u00a0 upstream_fleets = []\u00a0 \u00a0 \u00a0 post_conditions {\u00a0 \u00a0 \u00a0 \u00a0 soaking = \"SOAK_TIME\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 project = \"FIRST_FLEET_PROJECT_ID\"}\n```Replace `` with the project ID of the fleet host project.\n- Add the following block to your Terraform configuration to set the upstream fleet and the soak time for the second fleet in the sequence:```\nresource \"google_gke_hub_feature\" \"feature\" {\u00a0 name = \"clusterupgrade\"\u00a0 location = \"global\"\u00a0 spec {\u00a0 \u00a0 clusterupgrade {\u00a0 \u00a0 \u00a0 upstream_fleets = [\"FIRST_FLEET_PROJECT_ID\"]\u00a0 \u00a0 \u00a0 post_conditions {\u00a0 \u00a0 \u00a0 \u00a0 soaking = \"SOAK_TIME\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 project = \"SECOND_FLEET_PROJECT_ID\"}\n```Replace `` with the project ID of the first fleet's host project, and `` with the project ID of the fleet host project.\n- Optional: If you want to have three fleets in a rollout sequence, add the following block to your Terraform configuration to set the upstream fleet for the fleet in the sequence:```\nresource \"google_gke_hub_feature\" \"feature\" {\u00a0 name = \"clusterupgrade\"\u00a0 location = \"global\"\u00a0 spec {\u00a0 \u00a0 clusterupgrade {\u00a0 \u00a0 \u00a0 upstream_fleets = [\"SECOND_FLEET_PROJECT_ID\"]\u00a0 \u00a0 \u00a0 post_conditions {\u00a0 \u00a0 \u00a0 \u00a0 soaking = \"SOAK_TIME\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 project = \"THIRD_FLEET_PROJECT_ID\"}\n```Replace `` with the project ID of the second fleet's host project, and `` with the project ID of the fleet host project. **    Preview     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .You can set these properties when you create or update a team scope. The following instructions use the `gcloud alpha container fleet scopes update` command, however you can set the same properties when you create a team scope with the `gcloud alpha container fleet scopes create` command.\nFor each of these commands, replace the variables with the respective team scope's name or the team scope's fleet host project ID.\nCreate a rollout sequence:- Set the soak time for the first scope in the sequence:```\ngcloud alpha container fleet scopes update projects/FIRST_SCOPE_PROJECT_ID/locations/global/scopes/FIRST_SCOPE_NAME \\\u00a0 \u00a0 --default-upgrade-soaking=SOAK_TIME \\\u00a0 \u00a0 --project=FIRST_SCOPE_PROJECT_ID\n```\n- Set the upstream scope and the soak time for the second scope in the sequence:```\ngcloud alpha container fleet scopes update projects/SECOND_SCOPE_PROJECT_ID/locations/global/scopes/SECOND_SCOPE_NAME \\\u00a0 \u00a0 --upstream-scope=projects/FIRST_SCOPE_PROJECT_ID/locations/global/scopes/FIRST_SCOPE_NAME \\\u00a0 \u00a0 --default-upgrade-soaking=SOAK_TIME \\\u00a0 \u00a0 --project=SECOND_SCOPE_PROJECT_ID\n```\n- Optional: If you want to have three team scopes in a rollout sequence, set the upstream scope for the third scope in the sequence: **Note:** You must set a soak time for each group, including the last group in a rollout sequence.```\ngcloud alpha container fleet scopes update projects/THIRD_SCOPE_PROJECT_ID/locations/global/scopes/THIRD_SCOPE_NAME \\\u00a0 \u00a0 --upstream-scope=projects/SECOND_SCOPE_PROJECT/locations/global/scopes/SECOND_SCOPE_NAME \\\u00a0 \u00a0 --default-upgrade-soaking=SOAK_TIME \\\u00a0 \u00a0 --project=THIRD_SCOPE_PROJECT_ID\n```## Check status of a rollout sequence\nUse these commands in the following sections to check on how upgrades are progressing in a rollout sequence. To learn more about what details are provided, see [Status informationfor a rollout sequence](#status-details)\nTo run these commands, ensure that you have the [requiredpermissions](#before-you-begin) for each fleet host project. For example, if the sequence has cross-project scopes in different fleets, you need permissions in each project to describe the sequence.\nFor the following commands, if you only need information about one fleet or scope in the sequence, replace the `--show-linked-cluster-upgrade` flag with `--show-cluster-upgrade` .\nCheck the status of a fleet-based rollout sequence:\n```\ngcloud container fleet clusterupgrade describe \\\u00a0 \u00a0 --show-linked-cluster-upgrade --project=FLEET_PROJECT_ID\n```\nReplace `` with the project ID of the host project for any fleet in the sequence.\nSee the reference [gcloud container fleet clusterupgradedescribe](/sdk/gcloud/reference/container/fleet/clusterupgrade/describe) for a complete list of flags.\nCheck the status of a team-based rollout sequence:\n```\ngcloud alpha container fleet scopes describe SCOPE_NAME \\\u00a0 \u00a0 --show-linked-cluster-upgrade\u00a0 \u00a0 --project=SCOPE_PROJECT_ID\n```\nReplace `` with the name of any team scope in the rollout sequence and `` with the project ID of this team scope.\nSee the reference for [gcloud alpha container fleet scopesdescribe](/sdk/gcloud/reference/alpha/container/fleet/scopes/describe) for a complete list of flags.\nTo see the status of individual clusters within a fleet or team scope, run the following command in the fleet host project and see the `membershipStates` section:\n```\ngcloud container fleet features describe clusterupgrade\n```\n### Status information for a rollout sequence\nWhen you check the status of a version rollout, you can see the progress of each group and cluster within that group.\nSee the following table for the potential statuses of a cluster or group:\n| Status   | For cluster                                       | For group                                       |\n|:---------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| INELIGIBLE  | This cluster is ineligible for this upgrade                               | One or more clusters in this group are ineligible for this upgrade.                         |\n| PENDING  | The upgrade hasn't started or the upgrade is in progress for the cluster.                       | The upgrade hasn't started on any of the clusters in the group.                          |\n| IN_PROGRESS | nan                                         | The upgrade has started on at least one cluster but hasn't finished on all clusters.                     |\n| SOAKING  | The upgrade has finished on the cluster and hasn't finished soaking.                        | The upgrade has finished on all clusters and hasn't finished soaking.                        |\n| FORCED_SOAKING | The upgrade took more than the maximum upgrade time (30 days) and therefore we forced it to enter the soaking phase. The upgrade can still continue in the cluster. | The upgrade took more than the maximum upgrade time (30 days) and therefore we forced it to enter the soaking phase. The upgrade can still continue in the clusters. |\n| COMPLETE  | The upgrade is treated as \"done\", meaning that the upgrade has finished soaking on this cluster.                 | The upgrade is treated as \"done\" and ready to be consumed by the downstream group, meaning that the upgrade has finished soaking.         |\nIn the output of these commands, the `clusterUpgrade(s).spec` and `clusterUpgrade(s).state` attributes contain additional information about the cluster upgrade such as soaking time, cluster upgrade overrides, and upgrade status.\n## Manage a rollout sequence\nYou can control automatic cluster upgrades with rollout sequencing in several ways, explained in the following sections.\n### Change the soak time for a group\nYou can change the default soak time for a group or change the soak time for when that group upgrades to a specific version.\nTo change the default soak time for a group, use the commands from the instructions to [Create a rollout sequence](#create-rollout-sequence) , omitting the flags to set the upstream group.\nYou can change the soak time for a specific version rollout to be different than the default soak time for the group. For example, if you have already qualified a new version and are ready for upgrades to begin in the next group, you can set the soak time to zero. You can also use it if you want more time than the default soaking time to qualify a specific version.\nAs the soak time is set on a per-group basis, if you want to override the soak time for other groups in this sequence, update them using this same command with the fleet or scope name replaced, depending on the type of sequence.\nFor the instructions in this section, replace the following variables:\n- ``: the soak time to use other than the default (for example, \"0d\" if you want to skip the soak time for one version rollout).\n- ``: the name of the upgrade, can be`k8s_control_plane`or`k8s_node`.\n- `` : the GKE version where you want the soak time after the rollout to this group, for example, 1.25.2-gke.400.\nRun this command in the host project of the fleet where you want to override the soak time used for the version rollout of a specific version.\nChange the soak time of a fleet:\n```\ngcloud container fleet clusterupgrade update\u00a0 \u00a0 --add-upgrade-soaking-override=SOAK_TIME \\\u00a0 \u00a0 --upgrade-selector=name=UPGRADE_NAME,version=VERSION\n```\nAdd the following `gke_upgrades_overrides` block to your Terraform configuration within the [clusterupgrade block](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/gke_hub_feature#example-usage---gkehub-feature-clusterupgrade) to override the soak time used for the version rollout of a specific version:\n```\ngke_upgrade_overrides {\u00a0 \u00a0 upgrade {\u00a0 \u00a0 \u00a0 name = \"UPGRADE_NAME\"\u00a0 \u00a0 \u00a0 version = \"VERSION\"\u00a0 \u00a0 }\u00a0 \u00a0 post_conditions {\u00a0 \u00a0 \u00a0 soaking = \"SOAK_TIME\"\u00a0 \u00a0 }\u00a0 }\n```\nRun this command in the host project of the team scope's fleet. Replace `` with the name of the team scope for which you want to override the soak time used for the version rollout of a specific version.\nChange the soak time of a team scope:\n```\ngcloud alpha container fleet scopes update SCOPE_NAME \\\u00a0 \u00a0 --add-upgrade-soaking-override=SOAK_TIME \\\u00a0 \u00a0 --upgrade-selector=name=UPGRADE_NAME,version=VERSION\n```\n### Change order of a sequence\nIf you want to change the order of a sequence, use the commands from the instructions to [Create a rollout sequence](#create-rollout-sequence) to update the upstream groups.\n### Delay the completion of group's version rollout\nIf you need to temporarily prevent a group from completing the rollout of a new version to its clusters, you can add a [maintenance exclusion](/kubernetes-engine/docs/concepts/maintenance-windows-and-exclusions#exclusions) to any of the clusters that have not been upgraded to the target version. This can pause a group from proceeding to its soak time or downstream group for up to 30 days. After 30 days, the group will begin soaking.\nYou can also [change the soak time](#change-soak-time) for that group to 30 days to maximize how long the rollout sequence waits before proceeding to the next group.\nIf you need to further delay upgrades beginning for the next group, you can use maintenance exclusions for the clusters in the next group.\n## Switch between fleet-based and team-based rollout sequences\nYou can switch from either fleet-based sequences to team-based sequences, or team-based sequences to fleet-based sequences. The instructions assume that you are transferring between sequences organized like those illustrated in [theexamplediagrams](/kubernetes-engine/docs/concepts/about-rollout-sequencing#qualify-upgrades) .\n**    Preview     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .To change your clusters from a fleet-based rollout sequence to a team-based rollout sequence, do the following steps:- [Configure maintenance exclusions](/kubernetes-engine/docs/how-to/maintenance-windows-and-exclusions#configuring_a_maintenance_exclusion) for all clusters in each of your fleets to prevent any upgrades while you are modifying your configuration.\n- Ensure that you have [enabled GKE Enterprise](/anthos/docs/setup/enable-gkee) in your [fleet hostprojects](/anthos/fleet-management/docs/fleet-concepts#fleet-host-project) .\n- In each of your fleets, [create one or more team scopes](/anthos/fleet-management/docs/setup-teams#create_a_team_scope) for subdividing the group of clusters in that fleet.\n- [Create one or more rollout sequences](#create-rollout-sequence) between the matching team scopes in each fleet.\n- [Add your clusters to their new teamscopes](/anthos/fleet-management/docs/setup-teams#add_clusters_to_a_scope) .\n- [Remove the maintenance exclusions](/kubernetes-engine/docs/how-to/maintenance-windows-and-exclusions#remove-exclusions) that you configured for this change.\nTo change your clusters from a team-based rollout sequence to a fleet-based rollout sequence, do the following steps:- [Configure maintenance exclusions](/kubernetes-engine/docs/how-to/maintenance-windows-and-exclusions#configuring_a_maintenance_exclusion) for all clusters in each of your fleets to prevent any upgrades while you are modifying your configuration.\n- Create a [rollout sequence between your fleets](#create-rollout-sequence) .\n- [Remove your clusters from their team scopes](/anthos/fleet-management/docs/setup-teams#remove_clusters_from_scopes) . Now these clusters are only registered to their scope's respective fleets that, in the previous step, you joined in a rollout sequence.\n- [Delete the team scopes](/anthos/fleet-management/docs/setup-teams#delete_a_scope) .\n- [Remove the maintenance exclusions](/kubernetes-engine/docs/how-to/maintenance-windows-and-exclusions#remove-exclusions) that you configured for this change.## Delete a sequence\nTo delete a sequence, you remove the upstream associations for the second and third groups (if the rollout sequence has three groups).\nRun the following command in the fleet host project of the second and third fleets in the rollout sequence:\n```\ngcloud container fleet clusterupgrade update --reset-upstream-fleet\n```\nRun the following command in the fleet host project of the second and third team scopes in the rollout sequence:\n```\ngcloud alpha container fleet scopes update SCOPE_NAME --reset-upstream-scope\n```\nReplace `` with the names of the second and third scopes, respectively.\n## Troubleshooting\n### Troubleshoot rollout eligibility\nIf all clusters in a rollout sequence don't have the same upgrade target, GKE might not be able to proceed with cluster upgrades. Automatic upgrades cannot proceed if an upstream group does not qualify one upgrade target to pass to the downstream group. Automatic upgrades also cannot proceed if clusters in the upstream group qualify an invalid upgrade target for clusters in the downstream group.\nTo check if your rollout sequence has any rollout eligibility issues, [check the status of the rollout sequence](#check-status) . If a group is ineligible, follow the instructions to see the status of individual clusters in a group.\nTo immediately advance cluster upgrades, remove any clusters with an `INELIGIBLE` status following the instructions to [Advance partially eligible rollouts](#advance-partially-eligible-rollouts) .\nIn a group, if a cluster is ineligible because it is on an earlier version (for example, most of the clusters in the group are being upgraded from 1.23 to 1.24 and a cluster is on version 1.22), you can manually upgrade the cluster to 1.24 to resolve the version discrepancy.\nIn a group, if a cluster is ineligible because it is on a later version (for example, most of the clusters in the group are being upgraded from 1.23 to 1.24 and a cluster is on version 1.25), you cannot manually downgrade the cluster to solve the version discrepancy and need to remove the cluster.\nBetween groups, if there is a mismatch in upgrade targets where the downstream group is on a newer version (for example, the upstream group upgraded from 1.23 to 1.24 and the clusters in the downstream group are on 1.25), you can manually upgrade the clusters in the upstream group to 1.25 to ensure that upgrades proceed.\nBetween groups, if there is a mismatch in upgrade targets where the downstream group is on an earlier version (for example, the upstream group upgraded from 1.24 to 1.25 and the clusters in the downstream group are on 1.23), you can manually upgrade the clusters in the downstream group to 1.24 or 1.25 to ensure that upgrades proceed.\n### Advance partially eligible rollouts\nIf cluster upgrades in a group will not finish because of issues with [rollouteligibility](/kubernetes-engine/docs/concepts/about-rollout-sequencing#rollout-eligibility) (for example, version discrepancies within a group), you can remove clusters that are ineligible for the group's upgrade target from a group to complete the version rollout and begin the soak time or move on to the next group in the rollout sequence. You can also remove a cluster from a group for other reasons, for example if this cluster's usage is no longer related to the other clusters in the group.\nFollow the instructions to [unregister a cluster from a fleet](/anthos/fleet-management/docs/unregister#unregister) or [remove clusters from team scopes](/anthos/fleet-management/docs/setup-teams#remove_clusters_from_scopes) , depending on the type of rollout sequence.\nAfter you have removed all clusters which are preventing a group's version rollout from being completed, the group's version rollout will complete. Confirm this by following the instructions to [Check the status of a version rollout](#check-status) .\n## What's next\n- [About cluster upgrades with rollout sequencing](/kubernetes-engine/docs/concepts/about-rollout-sequencing)", "guide": "Google Kubernetes Engine (GKE)"}