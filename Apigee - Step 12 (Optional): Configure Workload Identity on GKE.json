{"title": "Apigee - Step 12 (Optional): Configure Workload Identity on GKE", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Step 12 (Optional): Configure Workload Identity on GKE\n", "content": "## \n GKE with Workload Identity only: Configure Workload Identity\n**Note:** Apigee hybrid v.1.11 only supports Workload Identity federation on GKE.\nFollow these steps if you set up your overrides file for Workload Identity on GKE in [Step 6: Create the overrides](/apigee/docs/hybrid/v1.11/helm-install-create-overrides) .\nIf you are not using Workload Identity on GKE, proceed to [Part 3, Step 1: Expose Apigee ingress gateway](/apigee/docs/hybrid/v1.11/install-expose-apigee-ingress) .\n### Google Cloud service accounts and Kubernetes service accounts\nA Google Cloud service account is a special kind of account that can be used to make authorized  API calls by authenticating as the service account itself. Google Cloud service accounts can be  given roles and permissions similar to an individual user. When an application authenticates as a  service account, it has access to all resources that the service account has permission to access.  If you want to learn more about Google Cloud service accounts, see [Service accounts overview](/iam/docs/service-account-overview) .\nYou created Google Cloud service accounts for your Apigee hybrid installation in [Step 4: Create service accounts](/apigee/docs/hybrid/v1.11/helm-install-service-accounts) . Apigee uses these  service accounts to authenticate the hybrid components.\nKubernetes service accounts are similar to Google Cloud service accounts. A Kubernetes service  account provides an identity for processes that run in a Pod, and allows it to authenticate to the  API server similarly to a user. If you want to learn more about Kubernetes service accounts, see [Configure  Service Accounts for Pods](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) .\nIf you have `gcp.workloadIdentity.enabled` set to `true` in your  overrides file, when Helm charts for each hybrid component will create the Kubernetes service  accounts for the components when you install or upgrade them like you did in [Step 11: Install Apigee hybrid using Helm charts](/apigee/docs/hybrid/v1.11/helm-install-helm-charts) .\nWhen you configure Workload Identity on GKE, you associate the Google Cloud service accounts with  the Kubernetes service accounts in the Kubernetes cluster. That way, the Kubernetes service  accounts can impersonate the Google Cloud service accounts and use their assigned roles and  permissions to authenticate with the hybrid components.\nFollow these instructions to configure Workload Identity for your project.\n**Note:** Workload Identity is only available for hybrid installations on GKE.\n### Prepare to configure Workload Identity\n- Verify that Workload Identity is enabled in your overrides file. It should be enabled at the  overrides file in the following properties. **Note:** If you migrated your cluster from`apigeectl`management with the [Apigee hybrid Helm migration tool](/apigee/docs/hybrid/v1.11/helm-migration) , the  overrides syntax for Workload Identity will have changed. You will need to check the  following.- `namespace`is required. For example:```\ninstanceID: \"hybrid-instance-1\"\nnamespace: \"apigee\"\n```\n- The syntax to enable Workload Identity is different for Helm than for`apigeectl`. For Helm,`gcp.workloadIdentity.enabled`replaces`gcp.workloadIdentityEnabled`.\n- If you are using a single service account (Non-prod) for all components, specify it with:`gcp.workloadIdentity.gsa`. For example:```\n gcp:\n workloadIdentity:\n  enabled: true\n  gsa: \"apigee-non-prod@my-hybrid-project.iam.gserviceaccount.com\"\n \n```\n- If you are using a separate service account for each component (Prod installations),   specify the service account with the component's`gsa`property.   For example:```\n logger:\n gsa: \"apigee-logger@my-hybrid-project.iam.gserviceaccount.com\"\n \n```\nSee: [gcp.workloadIdentity.enabled](/apigee/docs/hybrid/v1.11/config-prop-ref#gcp-workloadidentity-enabled) .\n- Check that the current`gcloud`configuration is set to your Google Cloud project ID with  the following command:```\ngcloud config get project\n```\n- If needed, set the current `gcloud` configuration:\n- ```\ngcloud config set project $PROJECT_ID\n```\n- Verify that Workload Identity is enabled for your GKE Cluster. When you created the cluster  in [Step 1: Create a cluster](/apigee/docs/hybrid/v1.11/install-create-cluster#gke) , step 6 was to Enable  Workload Identity. You can confirm if Workload Identity is enabled by running the following  command:\n```\ngcloud container clusters describe $CLUSTER_NAME \\\n --region $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --flatten 'workloadIdentityConfig'\n``````\ngcloud container clusters describe $CLUSTER_NAME \\\n --zone $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --flatten 'workloadIdentityConfig'\n```\nYour output should look like the following:```\n -- workloadPool: PROJECT_ID.svc.id.goog\n```If you see `null` instead in your results, run the following  command to enable Workload Identity for your cluster:\n```\ngcloud container clusters update $CLUSTER_NAME \\\n --workload-pool=$PROJECT_ID.svc.id.goog \\\n --project $PROJECT_ID \\\n --region $CLUSTER_LOCATION\n``````\ngcloud container clusters update $CLUSTER_NAME \\\n --workload-pool=$PROJECT_ID.svc.id.goog \\\n --zone $CLUSTER_LOCATION \\\n --project $PROJECT_ID\n```\n- Enable Workload Identity for each node pool with the following commands. This operation can  take up to 30 minutes for each node:\n```\ngcloud container node-pools update NODE_POOL_NAME \\\n --cluster=$CLUSTER_NAME \\\n --region $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --workload-metadata=GKE_METADATA\n``````\ngcloud container node-pools update NODE_POOL_NAME \\\n --cluster=$CLUSTER_NAME \\\n --zone $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --workload-metadata=GKE_METADATA\n```\nWhere is the name of each node pool. In most Apigee hybrid   installations, the two default node pools are named `apigee-data` and `apigee-runtime` .\n- Verify that Workload Identity is enabled on your node pools with the following commands:\n```\ngcloud container node-pools describe apigee-data \\\n --cluster $CLUSTER_NAME \\\n --region $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --flatten \"config:\"\n```\n```\ngcloud container node-pools describe apigee-runtime \\\n --cluster $CLUSTER_NAME \\\n --region $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --flatten \"config:\"\n``````\ngcloud container node-pools describe apigee-data \\\n --cluster $CLUSTER_NAME \\\n --zone $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --flatten \"config:\"\n```\n```\ngcloud container node-pools describe apigee-runtime \\\n --cluster $CLUSTER_NAME \\\n --zone $CLUSTER_LOCATION \\\n --project $PROJECT_ID \\\n --flatten \"config:\"\n```\nYour output should look something like:```\n--diskSizeGb: 100\ndiskType: pd-standard\n...\nworkloadMetadataConfig:\n mode: GKE_METADATA\n \n```\n### Configure Workload Identity\nUse the following procedure to enable Workload Identity for the following Hybrid components:\n- `apigee-datastore`\n- `apigee-telemetry`\n- `apigee-org`\n- `apigee-env`\nWhen you run the `helm upgrade` with the `--dry-run` flag for the `apigee-datastore` , `apigee-env` , `apigee-org` , and `apigee-telemetry` charts, the output will include the commands you will need to configure Workload Identity with the correct GSA and KSA names.\nFor example:\n```\nhelm upgrade datastore apigee-datastore/ \\\n --namespace $NAMESPACE \\\n -f overrides.yaml \\\n --dry-run\n```\n```\nNAME: datastore\n ...\nFor C* backup GKE Workload Identity, please make sure to add the below membership to the IAM policy binding using the respective kubernetes SA (KSA).\n gcloud iam service-accounts add-iam-policy-binding \\\n  --role roles/iam.workloadIdentityUser \\\n  --member \"serviceAccount:my-project.svc.id.goog[apigee/apigee-cassandra-backup-sa]\" \\\n  --project :my-project\n```\n- Get the command to set up Workload Identity for`apigee-datastore`and run the command under`NOTES:`in the output.```\nhelm upgrade datastore apigee-datastore/ \\\n --namespace $NAMESPACE \\\n -f overrides.yaml \\\n --dry-run\n```\n- Get the commands to set up Workload Identity for`apigee-telemetry`and run the command under`NOTES:`in the output.```\nhelm upgrade telemetry apigee-telemetry/ \\\n --namespace $NAMESPACE \\\n -f overrides.yaml \\\n --dry-run\n```\n- Get the commands to set up Workload Identity for`apigee-org`and run the command under`NOTES:`in the output.```\nhelm upgrade $ORG_NAME apigee-org/ \\\n --namespace $NAMESPACE \\\n -f overrides.yaml \\\n --dry-run\n```\n- Get the commands to set up Workload Identity for`apigee-env`and run the command under`NOTES:`in the output.```\nhelm upgrade $ENV_NAME apigee-env/ \\\n --namespace $NAMESPACE \\\n --set env=ENV_NAME \\\n -f overrides.yaml \\\n --dry-run\n```Repeat this step for each environment in your installation.\n- (Optional) You can see the status of your Kubernetes service accounts in the **Kubernetes:\n Workloads Overview** page in the Google Cloud Console. [Go to Workloads](https://console.cloud.google.com/kubernetes/workload/overview) **Note:** You may see an error status for the`apigee-cassandra-backup`and`apigee-cassandra-restore`service accounts.  This is because you are not currently running backup or restore, and these processes have not  been fully configured yet. For more information on Cassandra backup and restore, see [feedbackCassandra backup overview](/apigee/docs/hybrid/v1.11/cassandra-backup-overview) .## Next steps\nIn the next  step, you will configure the Apigee ingress gateway and deploy a proxy to test your installation.\n## Next step\nstepper_buttons is defined in localvars Iterate over all the buttons in the data dictionary If the button's step matches the current step in the process, make the button disabled In all other cases (previous buttons or future buttons (after the next one), make them links [(NEXT) Step 1: Expose Apigee ingress](/apigee/docs/hybrid/v1.11/install-expose-apigee-ingress) If the button's step matches the current step in the process, make the button disabled [2](/apigee/docs/hybrid/v1.11/install-deploy-proxy)", "guide": "Apigee"}