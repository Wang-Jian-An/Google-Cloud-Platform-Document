{"title": "Cloud Architecture Center - Use cases for troubleshooting access problems on Google Cloud", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Use cases for troubleshooting access problems on Google Cloud\nLast reviewed 2022-09-29 UTC\nThis document describes how to use Google Cloud tools to troubleshoot use cases related to problems accessing Google Cloud resources. This document doesn't describe how to troubleshoot end-user access to your applications. This document assumes that you're familiar with [Troubleshooting policy and access problems on Google Cloud](/vpc/docs/troubleshooting-policy-and-access-problems) . The troubleshooting policy and access problems document describes Google Cloud services that can enforce access policies and the troubleshooting tools that Google Cloud provides.\n", "content": "## Troubleshooting approach\nThe first step in troubleshooting an access-related problem is deciding how to troubleshoot the issue. The following diagram provides a flowchart of one approach to troubleshooting access problems. The flowchart assumes that you have the appropriate permissions to complete the troubleshooting steps or that you can work with someone who has the required permissions.\nThe preceding diagram outlines the following steps:\n- Verify user access in the Google Cloud console and in Cloud Shell. If all access is denied, then check audit logs for error severity entries.- If there are error severity entries, check required permissions.- If you can grant permissions to resolve access issues, resolve the issue.\n- If you can't resolve access issues, then contact Cloud Customer Care.\n- If there aren't error severity entries, contact Customer Care.\n- If there aren't access issues, then check for network problems. If you find network problems, resolve the issue.\n- If there aren't network issues, then check quota allocation. If you find quota allocation problems, follow your process to increase quota and then resolve the issue.\n- If there aren't quota allocation issues, then check audit logs for error severity entries.- If there are error severity entries, check required permissions.- If you can grant permissions to resolve access issues, resolve the issue.\n- If you can't resolve access issues, then contact Customer Care.\n- If there aren't error severity entries, contact Customer Care.The following sections provide details about how to complete each troubleshooting step.\n### Verify user access\nCheck whether user access is denied at both the Google Cloud console and Google Cloud CLI:\n- Log into the Google Cloud console as the affected user.\n- Try to access the resource; for example, if the user reported that they can't start a VM, try starting a VM.\n- In the Google Cloud console, open Cloud Shell, and run the following gcloud CLI command from a session that the user is logged in to. This command helps to verify whether the user is logged in to the correct identity and whether they can access the resource using the gcloud CLI.```\ngcloud auth list\n```The output returns the account that the user is logged in to.\n- Check whether the preceding command returns the correct identity.- If the preceding command returns the wrong identity, ask the user to log in to the correct identity. Then determine whether access is still a problem when they are using the correct identity.\n- If the preceding command returns the correct identity and you get a`permission denied`message, run the gcloud CLI command for the action that user wants to complete. To get more detail about the denial, add the flags`--log-http`and`--verbosity=debug`.\n- If you identify a permissions-related issue, skip to [Check required permissions](#check-required-permissions) .\n### Check for network problems\n- Check for network problems by using the [VPC Service Controls troubleshooting](/vpc-service-controls/docs/troubleshooting) guidance. If you see a VPC Service Controls denial error message, resolve the issue.\n- Check the network paths from source to destination by using [Connectivity Tests](/network-intelligence-center/docs/connectivity-tests/how-to/running-connectivity-tests) . For information about how to test connectivity between two VM instances in the same or peered networks, see [Testing within VPC networks](/network-intelligence-center/docs/connectivity-tests/concepts/common-use-cases#testing-in-vpc-nets) .\n- Check the firewall configuration by using [Firewall Insights](/network-intelligence-center/docs/firewall-insights) to show any shadowed firewall rules and any deny rules that might be affecting access paths.\n### Check quota allocation\n- If you don't find any network-related issues, then check your [quota](/docs/quota#managing_your_quota) allocation. If there appears to be a quota-related problem, then follow your defined process to increase quota if appropriate.\n### Check audit logs\n- Check the audit log files by using the [Logs Explorer](/logging/docs/view/logs-explorer-interface) . Logs Explorer provides a summary of the severity of a log entry. An error log severity is recorded when an API call fails; for example, an error is recorded if a user tries to create a Cloud Storage bucket but doesn't have the permissions to call `storage.buckets.create` .The summary of a log entry provides the following details:- Target resource name\n- Principal (who is trying to access the resource)\n- API call that the principal tried to execute\n### Check required permissions\nTo debug why the principal doesn't have the required permissions, you use [Policy Troubleshooter](/iam/docs/troubleshooting-access) :\n- If the checks indicate that access is not granted, review which roles Policy Troubleshooter indicates contain the permission.\n- Use the [Policy Analyzer](/policy-intelligence/docs/analyze-iam-policies#principal-query-resource) to see what other principals have access to the resource that the principal is denied access to.\n- Add the principal's identity to the Google group that has a binding to the appropriate role.\n### Contact Customer Care\nIf you have completed the preceding troubleshooting sections and you're unable to resolve the issue, then contact Customer Care for help. Provide as much information as possible, as described in the troubleshooting guide section [Escalating to Customer Care](/vpc/docs/troubleshooting-policy-and-access-problems#escalating_to_customer_care) .\n## Example use cases for troubleshooting\nThis section provides in-depth walkthroughs for how to troubleshoot specific use cases using the preceding troubleshooting steps. For all the use cases, you must have the appropriate permissions to use the troubleshooting tools that are described in [Troubleshooting policy and access problems on Google Cloud](/vpc/docs/troubleshooting-policy-and-access-problems) .\nThe following use cases assume that you are using [Google Groups](/iam/docs/groups-in-cloud-console) to manage user access. Using Google Groups to grant permissions lets you manage access at scale. Each member of a Google Group inherits the Identity and Access Management (IAM) roles that are granted to that group. This inheritance means that you can use a group's membership to manage users' roles instead of granting IAM roles to individual users.\n### Role delegator troubleshoots developer access to a Compute Admin role\nFollowing the flowchart to verify user access and check audit logs, you can confirm that this is a permission problem.\nTo be able to grant roles, you need the `resourcemanager.projects.setIamPolicy` permission. This permission can be granted as part of the following roles:\n- Organization Administrator role(`roles/resourcemanager.organizationAdmin`)\n- Folder IAM Admin role (`roles/resourcemanager.folderIamAdmin`)\n- Project IAM Admin role (`roles/resourcemanager.projectIamAdmin`)\nTo determine whether the role delegator has the `resourcemanager.projects.setIamPolicy` permission assigned, you use [Policy Troubleshooter](/iam/docs/troubleshooting-access) . If the permission is no longer assigned, check the following:\n- Check whether an IAM recommendation was applied that might have rescinded the policy.\n- If you know the last time that you were able to grant roles, check the logs between then and now to see if any`setIam`calls were made that might have changed the policies applied.\n- Use the [Policy Analyzer](/policy-intelligence/docs/analyze-iam-policies#principal-query-all) to check which principals have the`resourcemanager.projects.setIamPolicy`. The Policy Analyzer can help to verify whether the role delegator was removed from a group.\n### Cloud administrator troubleshoots developer access to BigQuery\nTo troubleshoot this use case, first you verify user access and resolve any related issues. Then you check for network problems. This example assumes that you have determined there isn't an identity or network issue, but there is a permissions problem.\nTo troubleshoot the permissions problem, first you check team member permissions. If you don't find any discrepancies, you check logs to identify potential issues. If you don't find any issues from the logs, you can contact Customer Care for help.\nTo check team member permissions, ask the developer when they were last able to successfully run the query. Then determine whether anyone on the developer's team was previously able to run the query, and if that person can still successfully run the query. If no team members can run the query, proceed to the [Check logs](#check-logs) section.\nIf a team member can still run the query, complete the following steps:\n- Check the IAM permissions that are granted to both developers and determine whether the permissions differ. When you review permissions, look for the following:- [BigQuery IAM permissions](/bigquery/docs/access-control) \n- [Authorized views](/bigquery/docs/authorized-views) \n- [Row level permissions](/bigquery/docs/authorized-views#row-level-permissions) \n- If the permissions don't differ, proceed to the next section, [Check logs](#check-logs) . If the permissions do differ, complete the following steps:- Check whether both team members are in the same Google group.- If they aren't in the same Google group, determine whether they should be.\n- If they were previously in the same Google group, check with the group administrator to determine why changes were made.\n- After you address the permissions issue, check whether the developer is able to run the query.- If the developer can run the query, resolve the issue.\n- If the developer can't run the query, proceed to the next section, [Check logs](#check-logs) .\nIf no team members can complete the query, or if addressing permissions issues didn't resolve the problem, you check logs to determine what might have changed since the developer was last able to complete the query.\n- Determine where to view the logs for the last successfully completed task. In this example, the logs are exported to BigQuery.\n- Run queries against the exported logs in BigQuery:- Run one query that includes the last successful date that the developer had access so that you can see what success looks like.\n- Run the same query for a time when the request failed.\n- If there is something identifiable in the logs, resolve the issue using [Policy Troubleshooter](/iam/docs/troubleshooting-access) and the [Policy Analyzer](/policy-intelligence/docs/analyze-iam-policies#principal-query-all) as described in the [Check required permissions](#check-required-permissions) section.\n- If you're still unable to resolve the issue, [Contact Customer Care](#contact-customer-care) .\n### Developer needs permissions to GKE\nThe IAM role that lets a developer start, delete, or update a Pod or create a deployment in the GKE cluster is the Google Kubernetes Engine Developer role ( `roles/container.developer` ). The role should be granted in the project where the GKE cluster resides.\nTo troubleshoot this use case, first you verify user access and resolve any related issues. After you validate identity, you ensure that the `kubectl` tool is configured to point to the right cluster. For information about how to ensure that the identity used by the `kubectl` tool is correct and that the `kubectl` tool is pointing to the correct cluster, see [Configuring cluster access for kubectl](/kubernetes-engine/docs/how-to/cluster-access-for-kubectl#default_cluster_kubectl) . This example assumes that you have determined that there isn't a network issue or a quota-related issue, but there is a permissions problem.\nTo begin troubleshooting the permissions problem, you check the audit logs to see what has changed between the last successful action from the developer and the time the issue was first reported.\n- If the developer had access before, check whether a team member who also has permissions to do the same actions can still complete the actions. If the team member has access, use the [Policy Analyzer](/policy-intelligence/docs/analyze-iam-policies) to help determine what access the team member has. If you're following best practices, both developers should have the same group membership and permissions.- If their permissions are the same and neither developer can carry out the actions against the resource, check whether [IAM recommendations](/iam/docs/recommender-managing) were applied that could affect access.\n- If their permissions are different, investigate why the difference occurred:- Check the audit logs for the last time the developer could successfully carry out the task. Compare the logs to when they most recently tried and couldn't complete the task.\n- Check IAM recommendations and apply any recommendations.\n- If there isn't another team member to validate with, use [Policy Troubleshooter](/iam/docs/troubleshooting-access) and the [Policy Analyzer](/policy-intelligence/docs/analyze-iam-policies#principal-query-resource) as described in [Check required permissions](#check-required-permissions) . For more information, see the following resources:- [GKE interaction with IAM](/kubernetes-engine/docs/how-to/role-based-access-control#iam-interaction) \n- [Google Groups for GKE](/kubernetes-engine/docs/how-to/role-based-access-control#google-groups-for-gke) \n- [IAM roles for GKE](/kubernetes-engine/docs/how-to/iam) \n- If you're still unable to resolve the issue, [contact Customer Care](#contact-customer-care) .\n### Security administrator troubleshoots developer access\nIn this scenario, the developer needs to be able to do the following:\n- Upload objects to a Cloud Storage bucket. The developer shouldn't be able to view, delete, or overwrite existing objects in the bucket.\n- Start instances in their development project.\nTo understand what permissions are required in order to carry out the task that your developer needs to undertake, you use Policy Troubleshooter and the [IAM understanding roles](/iam/docs/understanding-roles) reference page. In this example, you need to grant your developer a role that includes the following permissions:\n- To allow the developer to stop and start instances:`compute.instances.start`and`compute.instances.stop`\n- To allow the developer to upload objects to Cloud Storage buckets:`storage.objects.create`\nThe following roles include the preceding permissions and adhere to the principle of least privilege:\n- At the bucket level for the bucket that the developer is allowed to upload objects to, grant the Storage Object Creator role (`roles/storage.objectCreator`).\n- At the project level of the developer's assigned project or at the instance that the developer needs to be able to restart, grant the Compute Instance Admin role (`roles/compute.instanceAdmin`).\nTypically, managing instances might also require actions such as adding disks. In that case, the `roles/compute.instanceAdmin` role might be an appropriate way to grant the required permissions while still adhering to the principle of least privilege.\n### Cloud administrator troubleshoots why an application can't write to Cloud Storage\nIn this scenario, an application running on GKE needs to be configured as follows:\n- On a specified bucket, the application can add, update, and delete objects.\n- The application can't have access to any other buckets in the organization.\nThe following troubleshooting approach assumes that you're using [Workload Identity](/kubernetes-engine/docs/how-to/workload-identity) , which we recommend. Using Workload Identity, you can configure a [Kubernetes service account](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) to act as a [Google service account](/iam/docs/understanding-service-accounts) . Pods running as the Kubernetes service account automatically authenticate as the Google service account when they access Google Cloud APIs.\nIn this example, you validate that you've granted appropriate permissions to the Google service account that you're using for Workload Identity for your cluster. To understand the permissions that are required to complete your application's tasks, you use [Policy Troubleshooter](/iam/docs/troubleshooting-access) and the [IAM understanding roles](/iam/docs/understanding-roles) reference page. To configure and verify permissions, do the following:\n- Assign the following permissions to the Google service account that you're using for Workload Identity:- At the bucket for which the application is allowed to have full control of objects, including listing, creating, viewing, and deleting objects, grant the Storage Object Admin role (`roles/storage.objectAdmin`).\n- To configure the Kubernetes service account to impersonate the Google service account, set an IAM policy binding:```\ngcloud iam service-accounts add-iam-policy-binding \\\u00a0 --role roles/iam.workloadIdentityUser \\\u00a0 --member \"serviceAccount:PROJECT_ID.svc.id.goog[KUBERNETES_NAMESPACE/KSA_NAME]\" \\\u00a0 GSA_NAME@PROJECT_ID.iam.gserviceaccount.com\n```Replace the following values:- ``: your project ID\n- ``: the Kubernetes service account that is making the request\n- ``: the Kubernetes namespace where the Kubernetes service account is defined\n- ``: the Google service account\n- Set the `iam.serviceAccounts.setIamPolicy` permission on the project:- Add the following annotation to the Kubernetes service account:```\niam.gke.io/gcp-service-account=GSA_NAME@PROJECT_ID\n```\n- Verify that the Google service account has the right permissions and that Workload Identity is configured correctly:- At the bucket for which the application is allowed to have full control of objects, view the [IAM policy for the bucket](/storage/docs/access-control/using-iam-permissions#bucket-view) and verify that the Google service account has the`roles/storage.objectAdmin`role.\n- If the permissions aren't correct, amend the policy to grant the Google service account the required permission.\n- Verify that Workload Identity is configured correctly by checking that there is a binding to the Kubernetes service account:```\ngcloud iam service-accounts get-iam-policy \\\u00a0 GSA_NAME@PROJECT_ID.iam.gserviceaccount.com\n```The output looks like the following:```\n- members:\n - serviceAccount:PROJECT_ID.svc.id.goog[KUBERNETES_NAMESPACE/KSA_NAME]\n role: roles/iam.workloadIdentityUser\n```If the binding is incorrect, repeat the preceding steps to assign permissions to the service account.## What's next\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Cloud Architecture Center"}