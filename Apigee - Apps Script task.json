{"title": "Apigee - Apps Script task", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Apps Script task\n**Announcement:** Application Integration is now available for your Google Cloud project. You can now use both Apigee Integration and Application Integration within the same Google Cloud project. [Learn more](/apigee/docs/api-platform/integration/using-application-integration)\nThe **Apps Script** task lets you run Google Apps Script from your integration. Google Apps Script is a rapid application development platform that makes it fast and easy to create business applications. For more information, see [Google Apps Script](https://developers.google.com/apps-script/overview) . This task is useful when you want to run custom scripts or reuse existing scripts in your integration.\n**Note** : The **Apps Script** task is a non-regionalized, global service.\n", "content": "## Before you begin\nBefore using the Apps Script task, make sure you complete the following steps:\n- [Enable AppsScript API](#enableapi) \n- [Create OAuth 2.0 Client ID](#create-oauth) \n- [Set up an authentication profile](#setupauth) \n- Ensure that [VPC Service Controls](/apigee/docs/api-platform/integration/vpcsc-integration) is **NOT** setup for Apigee Integration in your Google Cloud project. **Warning:** **Cloud Function** does not function or stops functioning if [VPC Service Controls](/apigee/docs/api-platform/integration/vpcsc-integration) is setup for Apigee Integration in your Google Cloud project.\n### Enable AppsScript API\nYou must enable the AppsScript API in your Google Cloud project and your AppsScript user account to use this task. For information about enabling the AppsScript API in your Google Cloud project, see [Enabling an API in a standard Google Cloud project](https://developers.google.com/apps-script/guides/cloud-platform-projects#enabling_an_api_in_a_standard_gcp_project) . To enable the API in your user account, click [Settings](https://script.google.com/corp/home/usersettings) and set `Google Apps Script API` to `On` .\n### Create OAuth 2.0 client ID\nIf you have an OAuth 2.0 client ID available, you can skip this step and proceed to [ Set up an authentication profile](#setupauth) .\nFor information about creating a new OAuth client ID, see [Create OAuth client ID](/application-integration/docs/configure-authentication-profiles#create-oauth) .\n### Set up an authentication profile\nApigee Integration uses the authentication profile to connect to Google Cloud for deploying and running the Apps Script project. To set up an authentication profile, perform the following steps:- In the [Apigee UI](https://apigee.google.com) , select your.\n- Click **Develop > Integrations** .\n- Select an existing integration or create a new integration by clicking **Create Integration** .If you are creating a new integration:- Enter a name and description in the **Create Integration** dialog.\n- Select a **Region** for the integration from the list of supported regions.\n- Click **Create** .\nThis opens the integration in the .\n- In thenavigation bar, click **+Add a task/trigger > Tasks** to view the list of available tasks.\n- Click and place the **Apps Script** element in the integration editor.- Click the **Apps Script** element on the designer to view the **Apps Script** task configuration pane.\n- In the task configuration pane of the Apps Script task, click **+New authentication profile** .\n- In the **Authentication profile** dialog, enter a name and description for the profile and set the following properties:- **Authentication type** : Select **OAuth 2.0 authorization code** \n- **Authentication endpoint** : Enter`https://accounts.google.com/o/oauth2/auth`\n- **Token endpoint** : Enter`https://oauth2.googleapis.com/token`\n- **Client ID** : Enter the client ID.The Client ID is available in your Google Cloud project dashboard under **Credentials > OAuth 2.0 Client IDs** .\n- **Secret** : Enter the client secretThe client secret is available in your Google Cloud project dashboard under **Credentials > OAuth 2.0 Client IDs** .\n- **Scope(s)** : Enter the following:`https://www.googleapis.com/auth/script.projects https://www.googleapis.com/auth/script.deployments https://www.googleapis.com/auth/script.deployments.readonly https://www.googleapis.com/auth/drive.scripts https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/script.external_request  https://www.googleapis.com/auth/userinfo.email` **Note** : Multiple scopes can be separated by a single space character (\" \").- Click **Generate Access Token and Save** .You are redirected to an authorization screen. Log in and provide consent to the permissions listed on the screen to generate your access token. If the generation of the access token is successful, your authentication profile is saved, and you can continue to edit your integration.\n**Note** : The same user must create both the authentication profile and deploy the Apps Script. If the users are different, the Apps Script does not run.\n## Configure the Apps Script task\nTo configure an Apps Script project in the **Apps Script** task, perform the following steps:\n- In the task configuration pane,  click **Configure Apps Script Project.** The **Apps Script Configuration** dialog appears.\n- You can choose to link to an existing Apps Script project or create a new Apps Script project.Configuring an Apps Script project associates the Apps Script project with your integration in Apigee Integration.\n- Click Save.\n- Click **Open Apps Script Project** .In the Apps Script editor, you can see the following files:- `Run.gs`: Contains the executable code. Write your script inside the`run`function. This function is called when the Apps Script task executes. In your script, you can use the variables defined at the integration level. For information on using the integration variables, see [Using integration variables](#use-var) .\n- `Main.gs`: Contains the initialization code to run Apps Script from your integration. Do not edit or modify this file.\n- `Test.gs`: Contains the executable code for test runs. You can write your script inside the`testRun`function to [test the script](#test-script) .\nMake sure to deploy the project in **Web apps** format. For more information on the various deployment modes, see [ Create and manage deployments](https://developers.google.com/apps-script/concepts/deployments) .\n## Access integration variables\nThe Apps Script task uses the **AppsScriptTask** library, which enables you to use integration variables in your script. The **AppsScriptTask** library is automatically imported and is available for use in the `run` function.\nTo access an integration variable in your Apps Script, you must pass the variable in the form of to the Apps Script task. The task parameters are key-value pairs where **Key** is the name of the variable in your AppsScript task and the **Value** is the corresponding integration variable name. You can add one or more task parameters in the **Task Parameters** section of the task configuration pane.\nFor example, if you have an integration variable named **Product** that you want to use in your Apps Script, you can define **Key** as **ProductKey** and the value as **Product** . In your Apps Script, you can then use `AppsScriptTask.getTaskParameter('` ` **ProductKey** ` `')` to read the **Product** variable.\n**Note** : To use an integration variable in your AppsScript, the variable must be added as a task parameter to the Apps Script task.\nThe **AppsScriptTask** library provides the following methods to access integration variables:\n- [setIntegrationVariable](/apigee/docs/api-platform/integration/run-apps-script-task#set) \n- [getTaskParameter](/apigee/docs/api-platform/integration/run-apps-script-task#get)\n| Function name   | Description        | Usage                                    | Usage.1                                   |\n|:-----------------------|:-----------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------|\n| setIntegrationVariable | Sets the provided value to the variable. | Syntax: setIntegrationVariable(value,value) Example: // Write to an Integer variable AppsScriptTask.setIntegrationVariable('EmployeeIDKey','456'); | Syntax: setIntegrationVariable(value,value) Example: // Write to an Integer variable AppsScriptTask.setIntegrationVariable('EmployeeIDKey','456'); |\n| getTaskParameter  | Gets the value of a variable.   | Syntax: getTaskParameter(value) Example: // Read an integration variable AppsScriptTask.getTaskParameter('EmployeeIDKey');       | Syntax: getTaskParameter(value) Example: // Read an integration variable AppsScriptTask.getTaskParameter('EmployeeIDKey');       |\nTo view all the functions available in the **AppsScriptTask** library, hover over the **AppsScriptTask** menu item in your Apps Script editor, click More more_vert **> Open in a new tab** .\n## Test your Apps Script\nBefore publishing your integration, you can test your script using the **testRun** function available in the **Test.gs** file. Write your test code in the **testRun** function, using the **AppsScriptTaskTest** library. This library lets you run assertion-based test cases and is automatically imported for use in the **testRun** function.\nTo view all the functions available in the **AppsScriptTaskTest** library, hover over the **AppsScriptTaskTest** menu item in your Apps Script editor, click More more_vert **> Open in a new tab** .\nThe following sample shows the usage of **AppsScriptTaskTest** library functions.\n```\nfunction testRun(){\u00a0 // Create a new request\u00a0 let req = AppsScriptTaskTest.createNewTestRequest('myCustomTest');\u00a0 // Add a task parameter that references an integration variable with the value 5\u00a0 AppsScriptTaskTest.setIntegrationVariableAndCreateReference(req, 'input', '$input$', 5);\u00a0 // Add a task parameter that references an integration variable\u00a0 AppsScriptTaskTest.createReference(req, 'output', '$output$');\u00a0 // Run the task(assuming the task increments the input by 1) and get the response\u00a0 let res = AppsScriptTaskTest.runTest(req, executeScript);\u00a0 // Check the response for the expected integration variable and its corresponding values\u00a0 AppsScriptTaskTest.containsIntegrationVariable(res, 'output', true);\u00a0 AppsScriptTaskTest.containsIntegrationVariable(res, 'someOtherIntegrtionVariable', false);\u00a0 AppsScriptTaskTest.containsIntegrationVariableWithValue(res, 'output', 6);}\n```\nThe following sample shows you how to access JSON and array variables in the **testRun** method:\n```\nfunction testRun(){\u00a0 // Create a new request\u00a0 let req = AppsScriptTaskTest.createNewTestRequest('json-test');\u00a0 // Add a task parameter that references a JSON integration variable\u00a0 AppsScriptTaskTest.setIntegrationVariableAndCreateReference(req, \"emp\", \"employee\", {name:\"snape\", age:35});\u00a0 // Add a task parameter that references an array integration variable\u00a0 AppsScriptTaskTest.setIntegrationVariableAndCreateReference(req, \"arr\", \"array\", [\"A\", \"B\", \"C\"]);\u00a0 // Run the task and get the response\u00a0 // Assume that the run method increases the age of the employee by 5 and appends a new element in the array\u00a0 let res = AppsScriptTaskTest.runTest(req, executeScript);\u00a0 // Check the response for the expected integration variable and its corresponding values\u00a0 AppsScriptTaskTest.containsIntegrationVariableWithValue(res, \"employee\", {name:\"snape\", age:40});\u00a0 AppsScriptTaskTest.containsIntegrationVariable(res, \"array\", true);\u00a0 AppsScriptTaskTest.containsIntegrationVariableWithValue(res, \"array\", [\"A\", \"B\", \"C\", \"D\"]);}\n```\nAfter running the test cases, you can view the assertions in the **Execution log** . To view the logs, click **Execution log** from the menu.\n## Best practices\nWe do not recommend using the Apps Script task if you require latency less than 1 to 2 seconds for the task in your integration.\nIn addition, we recommend coding all your logic in a single Apps Script task, rather than chaining multiple Apps Script tasks, to minimize performance bottlenecks.\nFor information about the usage limits that apply to the **Apps Script** task, see [ Usage limits](/apigee/docs/api-platform/integration/system-limits#usage-limits) .\n## Considerations\nWhen including the Apps Script task in your integration design, consider the following system limitations:\n- Maximum active deployments for an AppsScript: 50\n- Queries per second (QPS) for API executables: 5000/min\n- Queries per second (QPS) for Webapp deployments: 5000/min\n- Latency for API executables: 1.5s\n- Latency for Webapp: 2.5s\n- Maximum cumulative size of all the integration variables in an AppsScript: 15 MB## Error handling strategy\nAn error handling strategy for a task specifies the action to take if the task fails due to a [temporary error](/apigee/docs/api-platform/integration/error-handling) . For information about how to use an error handling strategy, and to know about the different types of error handling strategies, see [Error handling strategies](/apigee/docs/api-platform/integration/error-handling-strategy) .", "guide": "Apigee"}