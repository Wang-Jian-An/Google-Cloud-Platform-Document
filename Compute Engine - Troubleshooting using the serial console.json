{"title": "Compute Engine - Troubleshooting using the serial console", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Troubleshooting using the serial console\nThis page describes how to enable interactive access to an instance's serial console to debug boot and networking issues, troubleshoot malfunctioning instances, interact with the GRand Unified Bootloader (GRUB), and perform other troubleshooting tasks.\nA virtual machine (VM) instance has four virtual serial ports. Interacting with a serial port is similar to using a terminal window, in that input and output is entirely in text mode and there is no graphical interface or mouse support. The instance's operating system, BIOS, and other system-level entities often write output to the serial ports, and can accept input such as commands or answers to prompts. Typically, these system-level entities use the first serial port (port 1) and serial port 1 is often referred to as the serial console.\nIf you only need to view serial port output without issuing any commands to the serial console, you can call the [getSerialPortOutput](/compute/docs/reference/latest/instances/getSerialPortOutput) method or use Cloud Logging to read information that your instance has written to its serial port; see [Viewing serial port logs](/compute/docs/instances/viewing-serial-port-output) . However, if you run into problems accessing your instance through SSH or need to troubleshoot an instance that is not fully booted, you can enable interactive access to the serial console, which lets you connect to and interact with any of your instance's serial ports. For example, you can directly run commands and respond to prompts in the serial port.\nWhen you enable or disable the serial port, you can use any Boolean value that is accepted by the metadata server. For more information, see [setting boolean values](/compute/docs/storing-retrieving-metadata#boolean) .\n", "content": "## Before you begin\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nTo use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```\n## Enabling interactive access on the serial console\nEnable interactive serial console access for individual VM instances or for an entire project.\n**Caution:** The interactive serial console does not support IP-based access restrictions such as IP allowlists, unless you use [VPC Service Controls](/vpc-service-controls/docs/supported-products#table_serial_console) . If you enable the interactive serial console on an instance, clients can attempt to connect to that instance from any IP address. Anybody can connect to that instance if they know the correct SSH key, username, project ID, zone, and instance name.\n### Enabling access for a project\nEnabling interactive serial console access on a project enables access for all VM instances that are part of that project.\nBy default, interactive serial port access is disabled. You can also explicitly disable it by setting the `serial-port-enable` key to `FALSE` . In either case, any per-instance setting overrides the project-level setting or the default setting.\n- In the Google Cloud console, go to the **Metadata** page. [Go to Metadata](https://console.cloud.google.com/compute/metadata) \n- Click **Edit** to edit metadata entries.\n- Add a new entry that uses the key **serial-port-enable** and value **TRUE** .\n- Save your changes.\nUsing the Google Cloud CLI, enter the [project-info add-metadata](/sdk/gcloud/reference/compute/project-info/add-metadata) command as follows:\n```\ngcloud compute project-info add-metadata \\\n --metadata serial-port-enable=TRUE\n```\nIn the API, make a request to the [projects().setCommonInstanceMetadata](/compute/docs/reference/rest/v1/projects/setCommonInstanceMetadata) method, providing the `serial-port-enable` key with a value of `TRUE` :\n```\n{\n \"fingerprint\": \"FikclA7UBC0=\",\n \"items\": [ {\n \"key\": \"serial-port-enable\",\n \"value\": \"TRUE\"\n }\n ]\n}\n```\n### Enabling access for a VM instance\nEnable interactive serial console access for a specific instance. A per-instance setting, if it exists, overrides any project-level setting. You can also disable access for a specific instance, even if access is enabled on the project level, by setting `serial-port-enable` to `FALSE` , instead of `TRUE` . Similarly, you can enable access for one or more instances even if it is disabled for the project, explicitly or by default.\n- In the Google Cloud console, go to the **VM instances** page. [Go to the VM instances page](https://console.cloud.google.com/compute/instances) \n- Click the instance you want to enable access for.\n- Click **Edit** .\n- Under the **Remote access** section, toggle the **Enable connecting to\nserial ports** checkbox.\n- Save your changes.\nUsing the Google Cloud CLI, enter the [instances add-metadata](/sdk/gcloud/reference/compute/instances/add-metadata) command, replacing `` with the name of your instance.\n```\ngcloud compute instances add-metadata instance-name \\\n --metadata serial-port-enable=TRUE\n```\nIn the API, make a request to the [instances().setMetadata](/compute/docs/reference/rest/v1/instances/setMetadata) method with the `serial-port-enable` key and a value of `TRUE` :\n```\nPOST https://compute.googleapis.com/compute/v1/projects/myproject/zones/us-central1-a/instances/example-instance/setMetadata\n{\n \"fingerprint\": \"zhma6O1w2l8=\",\n \"items\": [ {\n \"key\": \"serial-port-enable\",\n \"value\": \"TRUE\"\n }\n ]\n}\n```\n## Connecting to a serial console\nAfter enabling interactive access for an instance's serial console, you can connect to the serial console.\nCompute Engine offers a global serial console gateway and regional serial console gateways for each Google Cloud region. You can choose to connect to a VM's serial console using the global or regional gateway, however, we recommend the regional gateway for better reliability.\nWhen you connect to the serial console using the Google Cloud console, you automatically connect to the regional serial console. When you use the Google Cloud CLI, you can choose between the regional or global gateway. Connections through other SSH clients only support the global gateway.\nThe serial console authenticates users with [SSH keys](/compute/docs/instances/ssh-keys) . Specifically, you must add your public SSH key to the project or instance metadata and store your private key on the local machine from which you want to connect. The gcloud CLI and the Google Cloud console automatically add SSH keys to the project for you. If you are using a third-party client, you might need to add SSH keys manually.\nTo connect to a VM's regional serial console, do the following:- In the Google Cloud console, go to the **VM instances** page. [Go to the VM instances page](https://console.cloud.google.com/compute/instances) \n- Click the instance you want to connect to.\n- Under **Remote access** , click **Connect to serial console** to connect on the default port (port 1).\n- If you want to connect to another serial port, click the down arrow next to the **Connect to serial console** button and change the port number accordingly.\n- For Windows instances, open the drop-down menu next to the button and connect to **Port 2** to access the serial console.\nTo connect to a VM's regional or global serial console, use one of the following commands:- **Recommended:** To connect to a VM's regional serial console, use the [gcloud compute connect-to-serial-port command](/sdk/gcloud/reference/compute/connect-to-serial-port) and include the `--location` flag:```\ngcloud compute connect-to-serial-port VM_NAME \\\n --location=REGION \\\n --port=PORT_NUMBER\n```\n- To connect to a VM's global serial console, use the [gcloud compute connect-to-serial-port command](/sdk/gcloud/reference/compute/connect-to-serial-port) and omit the `--location` flag:```\ngcloud compute connect-to-serial-port VM_NAME \\\n --port=PORT_NUMBER\n```\nReplace the following:- ``: the name of the VM whose serial console you want to connect to.\n- ``: the region of the VM whose serial console you want to connect to.\n- `` : the port number you want to connect. For Linux VMs, use `1` , for Windows VMs, use `2` . To learn more about port numbers, see [Understanding serial port numbering](#understanding_serial_port_numbering) . **Note:** the default port number is `1` .\n **Note:** You must have added your public key to the project or instance metadata before you can use a third-party SSH client. If you have used the gcloud CLI in the past to connect to other instances in the same project, your `PUBLIC_KEY_FILE` is likely located at `$HOME/.ssh/google_compute_engine.pub` . If you have never connected to an instance in this project before (so have never added public keys), you need to add your SSH keys to the project or instance metadata before you can connect using a third-party SSH client. See [Managing SSH keys in metadata](/compute/docs/instances/adding-removing-ssh-keys) for more information.\nYou can connect to an instance's serial console using other third-party SSH clients, as long as the client lets you connect to TCP port 9600.\nFor example, the following SSH command connects to the default serial port (1) of an instance named `example-instance` with the username `jane` in a project with the project ID `myproject` . The instance is in zone `us-central1-f` . Replace `` with the private SSH key file for the instance.\n```\nssh -i private-ssh-key-file -p 9600 myproject.us-central1-f.example-instance.jane@ssh-serialport.googleapis.com\n \n```\nIn detail, you can connect to the serial console of an instance using the following login and address information:\n```\nproject-id.zone.instance-name.username.options@ssh-serialport.googleapis.com\n```\nReplace the following:- ``: The project ID for this instance.\n- ``: The zone of the instance.\n- ``: The name of the instance.\n- ``: The username you are using to connect to your instance. Typically, this is the username on your local machine.\n- ``: Additional options you can specify for this connection. For example, you can specify a certain serial port and specify any [advanced option](#advanced_options) . The port number can be 1 through 4, inclusively. To learn more about port numbers, see [understanding serial port numbering](#understanding_serial_port_numbering) . If omitted, you will connect to serial port 1.\nIf you are connecting to a Windows VM instance, connect through port 2 using the following command:\n```\nssh -i private-ssh-key-file -p 9600 project-id.zone.instance-name.username.port=2@ssh-serialport.googleapis.com\n```\nIf you are having trouble connecting using a third-party SSH client, you can run the `gcloud compute connect-to-serial-port` command with the `--dry-run` command-line option to see the SSH command that it would have run on your behalf. Then you can compare the options with the command you are using.\n **Setting up a secure connection** \nWhen you use a third-party SSH client that isn't the Google Cloud CLI, you can ensure that you're protected against impersonation or man-in-the-middle attacks by checking Google's Serial Port server SSH key. To set up your system to check the server SSH key, complete the following steps:- Download [Google's Serial Port server SSH key](https://cloud-certs.storage.googleapis.com/google-cloud-serialport-host-key.pub) .\n- Open your known hosts file, generally located at`~/.ssh/known_hosts`.\n- Add the contents of the server SSH key, with `ssh-serialport.googleapis.com` prepended to the key. For example, if the server key contains the line `ssh-rsa AAAAB3NzaC1yc...` , then `~/.ssh/known_hosts` should have a line like this:```\nssh-serialport.googleapis.com ssh-rsa AAAAB3NzaC1yc...\n```\nFor security reasons, Google might occasionally change the Google Serial Port server SSH key. If your client fails to authenticate the server key, immediately end the connection attempt and complete the earlier steps to download a new Google Serial Port server SSH key.\nIf, after updating the host key, you continue to receive a host authentication error from your client, stop attempts to connect to the serial port and contact Google support. Do not provide any credentials over a connection where [host authentication](https://support.ssh.com/manuals/server-admin/32/Host-Based_Authentication.html) has failed.\n## Disconnecting from the serial console\nTo disconnect from the serial console:\n- Press the`ENTER`key.\n- Type`~.`(tilde, followed by a period).\nYou can discover other commands by typing `~?` or by examining the man page for SSH:\n```\nman ssh\n```\nDo not try to disconnect using any of the following methods:\n- The `CTRL+ALT+DELETE` key combination or other similar combinations. This doesn't work because the serial console does not recognize PC keyboard combinations.\n- The `exit` or `logout` command doesn't work because the guest is not aware of any network or modem connections. Using this command causes the console to close and then reopen again, and you remain connected to the session. If you would like to enable `exit` and `logout` commands for your session, you can enable it by setting the [on-dtr-low](#on-dtr-low) option.## Connecting to a serial console with a login prompt\nIf you are trying to troubleshoot an issue with a VM that has booted completely or trying to troubleshoot an issue that occurs after VM has booted past single user mode, you might be prompted for login information when trying to access the serial console.\nBy default, Google-supplied Linux system images are not configured to allow password-based logins for local users. However, Google-supplied Windows images are configured to allow password-based logins for local users.\nIf your VM is running an image that is preconfigured with serial port logins, you need to set up a local password on the VM so that you can log in to the serial console, if prompted. You can set up a local password after connecting to the VM or by using a start-up script.\n**Note:** This step is not required if you are interacting with the system during or prior to boot or with some serial-port-based service that does not require a password. This step is also not required if you have configured `getty` to log in automatically without a password using the \"-a root\" flag.\n### Setting up a local password using a startup script\nYou can use a startup script to set up a local password that enables you to connect to the serial console during or after VM creation.\nThe following instructions describe how to set up a local password after VM creation.\n- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Select the VM for which you want to add the local password.\n- Click **Edit** .\n- Navigate to the **Metadata** > **Automation** section.\n- If the VM has an existing startup script, copy it and paste it somewhere safe.\n- Add the following startup script:```\n#!/bin/bash\nuseradd USERNAME\necho USERNAME:PASSWORD | chpasswd\nusermod -aG google-sudoers USERNAME\n```Replace the following:- : the username that you want to add\n- : the password for the username. Avoid simple passwords, as some operating systems may requires minimal password length and complexity.- Navigate to the **Custom metadata** section.\n- If the VM has an expisting startup script, copy it and paste it somewhere safe.\n- Click **Add item** .\n- In the **Key** field, enter`windows-startup-script-cmd`.\n- In the **Value** field, enter the following script:```\nnet user USERNAME PASSWORD /ADD /Y\nnet localgroup administrators USERNAME /ADD\n```Replace the following:- : the username that you want to add\n- : the password for the username\n- Click **Save** .\n- To reboot the VM, click **Reset** . For more information, see [Reset a VM](/compute/docs/instances/stop-start-instance#resetting_an_instance) .\n- [Connect to the serial console](#connectserialconsole) .\n- Enter your login information when prompted.\n- Remove the startup script from the VM after the user has been created.\n### Setting up a local password using passwd on the VM\nThe following instructions describe how to set up a local password for a user on a VM so that the user can log on to the serial console of that VM using the specified password.\n- Connect to the VM. Replace `` with the name of your instance.```\ngcloud compute ssh instance-name\n```\n- On the VM, create a local password with the following command. This sets a password for the user that you are currently logged in as.```\nsudo passwd $(whoami)\n```\n- Follow the prompts to create a password.\n- Next, log out of the instance and [connect to the serial console](#connectserialconsole) .\n- Enter your login information when prompted.\n### Setting up a login on other serial ports\nLogin prompts are enabled on port 1 by default on most Linux operating systems. However, port 1 can often be overwhelmed by logging data and other information being printed to the port. Instead, you can choose to enable a login prompt on another port, such as port 2 (ttyS1), by executing one of the following commands on your VM. You can see a list of available ports for an VM in [Understanding serial port numbering](#understanding_serial_port_numbering) .\nThe following table lists images preconfigured with a serial console login and the default ports.\n| Operating system | Ports with a login prompt by default | Service management |\n|:-------------------|:---------------------------------------|:---------------------|\n| CentOS 6   | 1          | upstart    |\n| CentOS 7   | 1          | systemd    |\n| CoreOS    | 1          | systemd    |\n| COS    | 1          | systemd    |\n| Debian 8   | 1          | systemd    |\n| Debian 9   | 1          | systemd    |\n| OpenSUSE 13  | 1          | systemd    |\n| OpenSUSE Leap  | 1          | systemd    |\n| RHEL 6    | 1          | upstart    |\n| RHEL 7    | 1          | systemd    |\n| SLES 11   | 1          | sysvinit    |\n| SLES 12   | 1          | systemd    |\n| Ubuntu 14.04  | 1          | upstart    |\n| Ubuntu 16.04  | 1          | systemd    |\n| Ubuntu 17.04  | 1          | systemd    |\n| Ubuntu 17.10  | 1          | systemd    |\n| Windows   | COM2         | nan     |\nTo enable login prompts on additional serial ports, complete the following instructions.\n**Note:** The following instructions are divided between operating systems running [systemd](https://wikipedia.org/wiki/Systemd) , [upstart](https://wikipedia.org/wiki/Upstart) , or [sysvinit](https://wiki.archlinux.org/index.php/SysVinit) . For all sets of the instructions, you can replace `ttyS1` with another [serial port](#understanding_serial_port_numbering) if you want to.\nFor Linux operating systems using `systemd` :- Enable the service temporarily until the next reboot:```\nsudo systemctl start serial-getty@ttyS1.service\n```\n- Enable the service permanently, starting with the next reboot:```\nsudo systemctl enable serial-getty@ttyS1.service\n```\nFor Linux operating systems using `upstart` :- Create a new `/etc/init/ttyS1.conf` file to reflect `ttyS1` by copying and modifying an existing `ttyS0.conf` file. For example:- On Ubuntu 14.04:```\nsudo sh -c \"sed -e s/ttyS0/ttyS1/g < /etc/init/ttyS0.conf > /etc/init/ttyS1.conf\"\n``` **Note:** Ubuntu 12.04 does not have a `ttyS0.conf` , so Google recommends that you copy the `ttysS0.conf` file from Ubuntu 14.04 and use it on the instance running Ubuntu 12.04.\n- On RHEL 6.8 and CentOS 6.8```\nsudo sh -c \"sed -ne '/^# # ttyS0/,/^# exec/p' < /etc/init/serial.conf | sed -e 's/ttyS0/ttyS1/g' -e 's/^# *//' > /etc/init/ttyS1.conf\"\n```\n- Start on a login prompt on `ttyS1` without restarting:```\nsudo start ttyS1\n```\nFor Linux operating systems using `sysvinit` , run the following command:\n```\n sudo sed -i~ -e &#39;s/^#T([01])/T\\1/&#39; /etc/inittab\n sudo telinit q\n```\n## Understanding serial port numbering\nEach virtual machine instance has four serial ports. For consistency with the [getSerialPortOutput](/compute/docs/reference/latest/instances/getSerialPortOutput) API, each port is numbered 1 through 4. Linux and other similar systems number their serial ports 0 through 3. For example, on many operating system images, the corresponding devices are `/dev/ttyS0` through `/dev/ttyS3` . Windows refers to serial ports as `COM1` through `COM4` . To connect to what Windows considers `COM3` and Linux considers `ttyS2` , you would specify port 3. Use the table below to help you figure out which port you want to connect to.\n| Virtual machine instance serial ports | Standard Linux serial ports | Windows COM ports |\n|----------------------------------------:|:------------------------------|:--------------------|\n|          1 | /dev/ttyS0     | COM1    |\n|          2 | /dev/ttyS1     | COM2    |\n|          3 | /dev/ttyS2     | COM3    |\n|          4 | /dev/ttyS3     | COM4    |\nNote that many Linux images use port 1 ( `/dev/ttyS0` ) for logging messages from the kernel and system programs.\n## Sending a serial break\nThe [Magic SysRq key](https://en.wikipedia.org/wiki/Magic_SysRq_key) feature lets you perform low-level tasks regardless of the system's state. For example, you can sync file systems, reboot the instance, end processes, and unmount file systems using the Magic SysRq key feature.\nTo send a Magic SysRq command using a simulated serial break:\n- Press the`ENTER`key.\n- Type`~B`(tilde, followed by uppercase`B`).\n- Type the Magic SysRq command.\n**Note:** The Magic SysRq key is normally implemented by using PC keyboard scan codes but there is no direct equivalent on a serial port. This is the recommended method of accessing the Magic SysRq feature.\n## Viewing serial console audit logs\nCompute Engine provides audit logs to track who has connected and disconnected from an instance's serial console. To view logs, you must have [permissions for the Logs Viewer](/logging/docs/access-control#permissions_and_roles) or be a project viewer or editor.\n- In the Google Cloud console, go to the **Logs Explorer** page. [Go to Logs Explorer](https://console.cloud.google.com/logs/query) \n- Expand the drop-down menu and select **GCE VM Instance** .\n- In the search bar, type`ssh-serialport.googleapis.com`and press **Enter** .\n- A list of audit logs appears. The logs describe connections and disconnections from a serial console. Expand any of the entries to get more information: \nFor any of the audit logs, you can:\n- Expand the`protoPayload`property.\n- Look for`methodName`to see activity this log applies to (either a connection or disconnection request). For example, if this log tracks a disconnection from the serial console, the method name would say`\"google.ssh-serialport.v1.disconnect\"`. Similarly, a connection log would say`\"google.ssh-serialport.v1.connect\"`. An audit log entry is recorded at the beginning and end of each session on the serial console.\nThere are different audit log properties for different log types. For example, audit logs relating to connections have properties that are specific to connection logs, while audit logs for disconnections have their own set of properties. There are certain audit log properties that are also shared between both log types.\n**All serial console logs**\nThe following table provides audit log properties and their values for all serial console logs:\n| Property     | Value                                                                             |\n|:-------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| requestMetadata.callerIp | The IP address and port number from which the connection originated.                                                             |\n| serviceName    | ssh-serialport.googleapis.com                                                                       |\n| resourceName    | A string containing the project ID, zone, instance name, and serial port number to indicate which serial console this pertains to. For example, projects/myproject/zones/us-east1-a/instances/example-instance/SerialPort/2 is port number 2, also known as COM2 or /dev/ttyS1, for the instance example-instance. |\n| resource.labels   | Properties identifying the instance ID, zone, and project ID.                                                               |\n| timestamp    | A timestamp indicating when the session began or ended.                                                                |\n| severity     | NOTICE                                                                             |\n| operation.id    | An ID string uniquely identifying the session; you can use this to associate a disconnect entry with the corresponding connection entry.                                            |\n| operation.producer  | ssh-serialport.googleapis.com                                                                       |\n**Connection logs**\nThe following table provides audit log properties and their values specific for connection logs:\n| Property      | Value                                                                                    |\n|:-----------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| methodName     | google.ssh-serialport.v1.connect                                                                             |\n| status.message    | Connection succeeded.                                                                                |\n| request.serialConsoleOptions | Any options that were specified with the request, including the serial port number.                                                                 |\n| request.@type    | type.googleapis.com/google.compute.SerialConsoleSessionBegin                                                                      |\n| request.username    | The username specified for this request. This is used to select the public key to match.                                                               |\n| operation.first    | TRUE                                                                                    |\n| status.code     | For successful connection requests, a status.code value of google.rpc.Code.OK indicates that the operation completed successfully without any errors. Because the enum value for this property is 0, the status.code property is not displayed. However, any code that checks for a status.code value of google.rpc.Code.OK will work as expected. |\n**Disconnection logs**\nThe following table provides audit log properties and their values specific for disconnection logs:\n| Property   | Value              |\n|:------------------|:-----------------------------------------------------------|\n| methodName  | google.ssh-serialport.v1.disconnect      |\n| response.duration | The amount of time, in seconds, that the session lasted. |\n| response.@type | type.googleapis.com/google.compute.SerialConsoleSessionEnd |\n| operation.last | TRUE              |\n**Failed connection logs**\nWhen a connection fails, Compute Engine creates an audit log entry. A failed connection log looks very similar to a successful connection entry, but has the following properties to indicate a failed connection.\n| Property  | Value                                                                                                                                                                                                     |\n|:---------------||\n| severity  | ERROR                                                                                                                                                                                                     |\n| status.code | The canonical Google API error code that best describes the error. The following are possible error codes that might appear: google.rpc.Code.INVALID_ARGUMENT: The connection failed because the client provided an invalid port number or tried to reach an unknown channel. See the list of valid port numbers. google.rpc.Code.PERMISSION_DENIED: You have not enabled interactive serial console in the metadata server. For more information, see Enabling interactive access on the serial console. google.rpcCode.UNAUTHENTICATED: No SSH keys found or no matching SSH key found for this instance. Check that you are authenticated to the VM instance. google.rpc.Code.UNKNOWN: There was an unknown error with your request. You can reach out to Google on the gce-discussion group or file a bug report. |\n| status.message | The human-readable message for this entry.                                                                                                                                                                                            |\n## Disabling interactive serial console access\nYou can disable interactive serial console access by changing metadata on the specific instance or project, or by setting an [Organization Policy](/resource-manager/docs/organization-policy/overview) that disables interactive serial console access to all VM instances for one or more projects that are part of the organization.\n### Disabling interactive serial console on a particular instance or project\nProject owners and editors, as well as users who have been granted the `compute.instanceAdmin.v1` role, can disable access to the serial console by changing the metadata on the particular instance or project. Similar to [enabling serial console access](#enabling_interactive_access_on_the_serial_console) , set the `serial-port-enable` metadata to `FALSE` :\n```\nserial-port-enable=FALSE\n```\nFor example, using the Google Cloud CLI, you can apply this metadata to a specific instance like so:\n```\ngcloud compute instances add-metadata instance-name \\\n --metadata=serial-port-enable=FALSE\n```\nTo apply the metadata to the project:\n```\ngcloud compute project-info add-metadata \\\n --metadata=serial-port-enable=FALSE\n```\n### Disabling interactive serial console access through Organization Policy\nIf you have been granted the `orgpolicy.policyAdmin` role on the organization, you can set an [organization policy](/resource-manager/docs/organization-policy/overview) that prevents interactive access to the serial console, regardless of whether interactive serial console access is enabled on the metadata server. After the organization policy is set, the policy effectively overrides the `serial-port-enable` metadata key, and no users of the organization or project can enable interactive serial console access. By default, this constraint is set to `FALSE` .\nThe constraint for disabling interactive serial console access is as follows:\n```\ncompute.disableSerialPortAccess\n```\nComplete the following instructions to set this policy on the organization. After setting up a policy, you can grant exemptions on a per-project basis.\nTo set the policy using the Google Cloud CLI, run the `resource-manager enable-enforce` command. Replace `` with your [organization ID](/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id) . For example, `1759840282` .\n```\ngcloud resource-manager org-policies enable-enforce \\\n --organization organization-id compute.disableSerialPortAccess\n```\nTo set a policy in the API, make a `POST` request to the following URL. Replace `` with your [organization name](/resource-manager/reference/rest/v1/organizations#Organization.FIELDS.name) . For example, `organizations/1759840282` .\n```\n POST https://cloudresourcemanager.googleapis.com/v1/organization-name:setOrgPolicy\n```\nThe request body should contain a `policy` object with the following constraint:\n```\n\"constraint\": \"constraints/compute.disableSerialPortAccess\"\n```\nFor example:\n```\n {\n \"policy\":\n {\n  \"booleanPolicy\":\n  {\n  \"enforced\": TRUE\n  },\n  \"constraint\": \"constraints/compute.disableSerialPortAccess\"\n }\n }\n \n```\nThe policy is immediately effective, so any projects under the organization immediately stop allowing interactive access to the serial console.\nTo temporarily disable the policy, use the `disable-enforce` command:\n```\ngcloud resource-manager org-policies disable-enforce \\\n --organization organization-id compute.disableSerialPortAccess\n```\nAlternatively, you can make an API request where the request body sets the `enforced` parameter to `FALSE` :\n```\n{\n \"policy\":\n {\n \"booleanPolicy\":\n {\n  \"enforced\": FALSE\n },\n \"constraint\": \"constraints/compute.disableSerialPortAccess\"\n }\n}\n```\n### Setting the organization policy at the project level\nYou can set the same organizational policy on a per-project basis. This overrides the setting at the organization level.\nTo turn off enforcement of this policy for a specific project. Replace `` with your project ID.\n```\ngcloud resource-manager org-policies disable-enforce \\\n --project project-id compute.disableSerialPortAccess\n```\nYou can turn on enforcement of this policy by using the `enable-enforce` command with the same values.\nIn the API, make a `POST` request to the following URL to enable interactive serial console access for the project, replacing `` with the project ID:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/project-id:setOrgPolicy\n```\nThe request body should contain a `policy` object with the following constraint:\n```\n\"constraint\": \"constraints/compute.disableSerialPortAccess\"\n```\nFor example:\n```\n{\n \"policy\":\n {\n \"booleanPolicy\":\n {\n  \"enforced\": FALSE\n },\n \"constraint\": \"constraints/compute.disableSerialPortAccess\"\n }\n}\n```\n## Tips and tricks\n- If you are having trouble connecting using a standard SSH client, but `gcloud compute connect-to-serial-port` connects successfully, it might be helpful to run `gcloud compute connect-to-serial-port` with the `--dry-run` command-line option to see the SSH command that it would have run on your behalf, and compare the options with the command you are using.\n- Setting the bit rate, also known as baud rate, you can set any bit rate you like, such as `stty 9600` , but the feature normally forces the effective rate to 115,200 bps (~11.5kB/sec). This is because many public images default to slow bit rates, such as 9,600 on the serial console, and would boot slowly.\n- Some OS images have inconvenient defaults on the serial port. For instance, on CentOS 7, the `stty icrnl` default for the Enter key on the console is to send a `CR` , aka `^M` . The bash shell might mask this until you try to set a password, at which point you might wonder why it seems stuck at the `password:` prompt.\n- Some public images have job control keys that are disabled by default if you attach a shell to a port in certain ways. Some examples of these keys include `^Z` and `^C` . The `setsid` command might fix this. Otherwise, if you see a `job control is disabled in this shell` message, be careful not to run commands that you will need to interrupt.\n- You might find it helpful to tell the system the size of the window you're using, so that bash and editors can manage it properly. Otherwise, you might experience odd display behavior because bash or editors attempt to manipulate the display based on incorrect assumptions about the number of rows and columns available. Use the `stty rows Y cols X` command and `stty -a` flag to see what the setting is. For example: `stty rows 60 cols 120` (if your window is 120 chars by 60 lines).\n- If, for example, you connect using SSH from machine A to machine B, and then to machine C etc., creating a nested SSH session, and you want to use tilde (~) commands to disconnect or send a serial break signal, you will need to add enough extra tilde characters to the command to get to the right SSH client. A command following a single tilde is interpreted by the SSH client on machine A; a command following two consecutive tildes (Enter~~) is interpreted by the client on machine B, and so forth. You only need to press Enter one time because that is passed all the way through to the innermost SSH destination. This is true for any use of SSH clients that provide the tilde escape feature.If you lose track of how many tilde characters you need, press the Enter key and then type tilde characters one at a time until the instance echoes the tilde back. This echo indicates that you have reached the end of the chain and you now know that to send a tilde command to the most nested SSH client, you need one less tilde than however many tildes you typed.## Advanced options\n### Controlling max connections\nYou can set the `max-connections` property to control how many concurrent connections can be made to this serial port at a time. The default and maximum number of connections is 5. For example:\n```\ngcloud compute connect-to-serial-port instance-name \\\n --port port-number \\\n --extra-args max-connections=3\n```\n```\nssh -i private-ssh-key-file -p 9600 project-id.zone.instance-name.username.max-connections=3@ssh-serialport.googleapis.com\n```\n### Setting replay options\nBy default, each time you connect to the serial console, you will receive a replay of the last 10 lines of data, regardless of whether the last 10 lines have been seen by another SSH client. You can change this setting and control how many and which lines are returned by setting the following options:\n- `replay-lines=N`: Set`N`to the number of lines you want replayed. For example, if`N`is 50, then the last 50 lines of the console output is included.\n- `replay-bytes=N`: Replays the most recent`N`bytes. You can also set`N`to`new`which replays all output that has not yet been sent to any client.\n- `replay-from=N`: Replays output starting from an absolute byte index that you provide. You can get the current byte index of serial console output by making a [getSerialPortOutput](/compute/docs/reference/latest/instances/getSerialPortOutput) request. If you set`replay-from`, all other replay options are ignored.\nWith the Google Cloud CLI, append the following to your `connect-to-serial-port` command, where `N` is the specified number of lines (or bytes or absolute byte index, depending on which replay option you are selecting):\n```\n--extra-args replay-lines=N\n```\nIf you are using a third-party SSH client, provide this option in your SSH command:\n```\nssh -i private-ssh-key-file -p 9600 myproject.us-central1-f.example-instance.jane.port=3.replay-lines=N@ssh-serialport.googleapis.com\n```\nYou can also use a combination of these options as well. For example:\n```\ngcloud compute connect-to-serial-port instance-name--port port-number --extra-args replay-lines=N,replay-bytes=new\n```\n```\nssh -i private-ssh-key-file -p 9600 project-id.zone.instance-name.username.replay-lines=N.replay-bytes=new@ssh-serialport.googleapis.com\n```\n```\ngcloud compute connect-to-serial-port instance-name--port port-number --extra-args replay-lines=N,replay-bytes=M\n```\n```\nssh -i private-ssh-key-file -p 9600 project-id.zone.instance-name.username.replay-lines=N.replay-bytes=M@ssh-serialport.googleapis.com\n```\n### Handling dropped output\nThe most recent 1 MiB of output for each serial port is always available and generally, your SSH client should not miss any output from the serial port. If, for some reason, your SSH client stops accepting output for a period of time but does not disconnect, and more than 1 MiB of new data is produced, your SSH client might miss some output. When your SSH client is not accepting data fast enough to keep up with the output on the serial console port, you can set the `on-dropped-output` property to determine how the console behaves.\nSet any of the following applicable options with this property:\n- `insert-stderr-note`: Insert a note on the SSH client's`stderr`indicating that output was dropped. This is the default option.\n- `ignore`: Silently drops output and does nothing.\n- `disconnect`: Stop the connection.\nFor example:\n```\ngcloud compute connect-to-serial-port instance-name \\\n --port port-number \\\n --extra-args on-dropped-output=ignore\n```\n```\nssh -i private-ssh-key-file -p 9600 project-id.zone.instance-name.username.on-dropped-output=ignore@ssh-serialport.googleapis.com\n```\n### Enabling disconnect using exit or logout commands\nYou can enable disconnecting on exit or logout commands by setting the `on-dtr-low` property to `disconnect` when you connect to the serial console.\nOn the Google Cloud CLI, append the following flag to your `connect-to-serial-port` command:\n```\n--extra-args on-dtr-low=disconnect\n```\nIf you are using a third-party SSH client, provide this option in your SSH command:\n```\nssh -i private-ssh-key-file -p 9600 myproject.us-central1-f.example-instance.jane.port=3.on-dtr-low=disconnect@ssh-serialport.googleapis.com\n```\nEnabling the `disconnect` option might cause your instance to disconnect one or more times when you are rebooting the instance because the operating system resets the serial ports while booting up.\n**Note:** With some operating systems, this setting has no effect on serial port 1. However, it should work on ports 2 through 4 for most operating systems, and on port 1 for some systems.\nThe default setting for the `on-dtr-low` option is `none` . If you use the default setting `none` , you can reboot your instance without being disconnected from the serial console, but the console will not disconnect through normal means such as `exit` or `logout` commands, or normal key combinations like Ctrl+D.\n## What's next\n- Learn more about the [getSerialPortOutput](/compute/docs/reference/latest/instances/getSerialPortOutput) API.\n- Learn how to retain and view [serial port output](/compute/docs/instances/viewing-serial-port-output#enable-stackdriver) even after a VM instance is deleted.\n- Read more [troubleshooting tips](/compute/docs/troubleshooting) .\n- Learn more about applying [metadata](/compute/docs/storing-retrieving-metadata) .\n- Learn about [SSH keys](/compute/docs/instances/adding-removing-ssh-keys) .", "guide": "Compute Engine"}