{"title": "Vertex AI - System schemas", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - System schemas\nEach metadata resource is associated with a specific [MetadataSchema](/vertex-ai/docs/ml-metadata/data-model) . To simplify the metadata resource creation process Vertex ML Metadata publishes predefined types called system schemas for common ML concepts. System schemas live under the namespace `system` . You can access system schemas as MetadataSchema resources in the Vertex ML Metadata API. Schemas are always versioned. The format of system schemas is a subset of the [OpenAPI 3.0 specification](https://swagger.io/specification/#schema-object) .\n", "content": "## How to use system schemas\nVertex AI uses system schemas to create metadata resources for tracking your ML workflows. You can then filter and group resources in metadata queries by using the `schema_title` field. For more information about how to use filter functions, see [Analyze Vertex ML Metadata](/vertex-ai/docs/ml-metadata/analyzing) .\nYou can also use system schemas through the Vertex ML Metadata API to create metadata resources directly. You can identify a system schema by its schema title and schema version. Fields in system schemas are always considered optional. You aren't restricted to the predefined fields of system schemas and can also log additional arbitrary metadata to any metadata resource. For more information about using system schemas to create metadata resources, see [Track Vertex ML Metadata](/vertex-ai/docs/ml-metadata/tracking) .\n### List your schemas\nTo view a list of all your existing registered schemas using the following command.\nBefore using any of the request data, make the following replacements:- : Your region.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\nHTTP method and URL:\n```\nGET https://LOCATION_ID-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/default/metadataSchemas?pageSize=100&filter=schema_title=%22system*%22+OR+schema_title=%22google*%22\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"metadataSchemas\": [ {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID/metadataStores/default/metadataSchemas/system-resolver-execution-v0-0-1\",\n  \"schemaVersion\": \"0.0.1\",\n  \"schema\": \"title: system.ResolverExecution\\ntype: object\\n\",\n  \"schemaType\": \"EXECUTION_TYPE\",\n  \"createTime\": \"2022-07-27T17:41:35.634Z\"\n },\n {\n  \"name\": \"projects/PROJECT_ID/locations/LOCATION_ID//metadataStores/default/metadataSchemas/system-html-v0-0-1\",\n  \"schemaVersion\": \"0.0.1\",\n  \"schema\": \"title: system.HTML\\ntype: object\\n\",\n  \"schemaType\": \"ARTIFACT_TYPE\",\n  \"createTime\": \"2022-07-27T17:41:35.602Z\"\n }\n}\n```\n### Strict schema matching\nVertex ML Metadata supports two flags that allow schema authors to enforce strict schema matching.\n**additionalProperties**\nThe `additionalProperties` value can be true or false. Consistent with JSON Schema, `additionalProperties` defaults to true. This flag is set at the top level of the schema. If it's set to false, no optional properties are allowed. For example in the below schema, only the fields `payload_format` and `container_format` are accepted in the metadata based on this schema.\n```\ntitle: system.Datasetversion: 0.0.1type: objectadditionalProperties: falseproperties:\u00a0 container_format:\u00a0 \u00a0 type: string\u00a0 payload_format:\u00a0 \u00a0 type: string\n```\nThe above schema accepts the following metadata:\n```\nfields {\u00a0 key: 'container_format'\u00a0 value: { string_value: 'Text' }}fields {\u00a0 key: 'payload_format'\u00a0 value: { string_value: 'CSV' }}\n```\nHowever following metadata will be rejected:\n```\nfields {\u00a0 key: 'container_format'\u00a0 value: { string_value: 'Text' }}fields {\u00a0 key: 'payload_format'\u00a0 value: { string_value: 'CSV' }}fields {\u00a0 key: 'optional_field'\u00a0 value: { string_value: 'optional_value' }}\n```\n**required**\nThe `required` keyword takes an array of zero or more strings. Consistent with JSON Schema, the properties defined by the properties keyword are not required. You can provide a list of required properties using the `required` keyword. For example the following schema always requires `container_format` . Works on nested properties as well. For example following makes the `container_format` required.\n```\ntitle: system.Datasetversion: 0.0.1type: objectrequired: ['container_format']properties:\u00a0 container_format:\u00a0 \u00a0 type: string\u00a0 payload_format:\u00a0 \u00a0 type: string\n```\nThe above schema accepts the following metadata:\n```\nfields {\u00a0 key: 'container_format'\u00a0 value: { string_value: 'Text' }}\n```\nHowever following metadata will be rejected:\n```\nfields {\u00a0 key: 'payload_format'\u00a0 value: { string_value: 'CSV' }}\n```\nThe schema supports nested properties where properties has a field of type object. In a nested schema, the nested properties node can have a `required` keyword. For example:\n```\ntitle: system.Datasetversion: 0.0.1type: objectproperties:\u00a0 container_format:\u00a0 \u00a0 type: string\u00a0 payload:\u00a0 \u00a0 type: string\u00a0 nested_property:\u00a0 \u00a0 type: object\u00a0 \u00a0 required: ['property_1']\u00a0 \u00a0 properties:\u00a0 \u00a0 \u00a0 property_1:\u00a0 \u00a0 \u00a0 \u00a0 type: integer\u00a0 \u00a0 \u00a0 property_2:\u00a0 \u00a0 \u00a0 \u00a0 type: integer\n```\nThe above schema accepts the following metadata, since the `nested_property` field itself is not required.\n```\nfields {\u00a0 key: 'container_format'\u00a0 value: { string_value: 'Text' }}\n```\nFollowing metadata is also valid.\n```\nfields {\u00a0 key: 'nested_property'\u00a0 value: {\u00a0 \u00a0 struct_value {\u00a0 \u00a0 \u00a0 fields {\u00a0 \u00a0 \u00a0 \u00a0 key: 'property_1'\u00a0 \u00a0 \u00a0 \u00a0 value: { number_value: 1 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 fields {\u00a0 \u00a0 \u00a0 \u00a0 key: 'property_2'\u00a0 \u00a0 \u00a0 \u00a0 value: { number_value: 1 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```\nHowever following metadata will be rejected:\n```\nfields {\u00a0 key: 'nested_property'\u00a0 value: {\u00a0 \u00a0 struct_value {\u00a0 \u00a0 \u00a0 fields {\u00a0 \u00a0 \u00a0 \u00a0 key: 'property_2'\u00a0 \u00a0 \u00a0 \u00a0 value: { number_value: 1 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```\n### System schema examples\nThe following examples are common system schemas that are available for immediate use.\n**Artifact**\n`system.Artifact` is a generic schema that can hold metadata about any artifact. No specific fields are defined in this schema.\n```\ntitle: system.Artifactversion: 0.0.1type: object\n```\n**Dataset**\n`system.Dataset` represents a container of data that was either consumed or produced by an ML workflow step. A dataset can point to either a file location or a query, for example a BigQuery URI.\n```\ntitle: system.Datasetversion: 0.0.1type: objectproperties:\u00a0 container_format:\u00a0 \u00a0 type: string\u00a0 \u00a0 description: \"Format of the container. Examples include 'TFRecord', 'Text', or 'Parquet'.\"\u00a0 payload_format:\u00a0 \u00a0 type: string\u00a0 \u00a0description: \"Format of the payload. For example, 'proto:TFExample', 'CSV', or 'JSON'.\"\n```\n**Model**\n`system.Model` represents a trained model. The URI of the model can point to a file location (PPP, Cloud Storage bucket, local drive) or an API resource such as the Model resource in Vertex AI API.\n```\ntitle: system.Modelversion: 0.0.1type: objectproperties:\u00a0 framework:\u00a0 \u00a0 type: string\u00a0 \u00a0 description: \"The framework type. For example: 'TensorFlow' or 'Scikit-Learn'.\"\u00a0 framework_version:\u00a0 \u00a0 type: string\u00a0 \u00a0 description: \"The framework version. For example: '1.15' or '2.1'.\"\u00a0 payload_format:\u00a0 \u00a0 type: string\u00a0 \u00a0 description: \"The format of the Model payload, for example: 'SavedModel' or 'TFLite'.\"\n```\n**Metrics**\n`system.Metrics` represents evaluation metrics produced during an ML workflow. Metrics are application and use case dependent and can consist of simple scalar metrics like accuracy or complex metrics that are stored elsewhere in the system.\n```\ntitle: system.Metricsversion: 0.0.1type: objectproperties:\u00a0 type:\u00a0 accuracy:\u00a0 \u00a0 type: number\u00a0 \u00a0 description: \"Optional summary metric describing accuracy of a model.\"\u00a0 precision:\u00a0 \u00a0 type: number\u00a0 \u00a0 description: \"Optional summary metric describing precision of a model.\"\u00a0 recall:\u00a0 \u00a0 type: number\u00a0 \u00a0 description: \"Optional summary metric describing the recall of a model.\"\u00a0 f1score:\u00a0 \u00a0 type: number\u00a0 \u00a0 description: \"Optional summary metric describing the f1-score of a model.\"\u00a0 mean_absolute_error:\u00a0 \u00a0 type: number\u00a0 \u00a0 description: \"Optional summary metric describing the mean absolute error of a model.\"\u00a0 mean_squared_error:\u00a0 \u00a0 type: number\u00a0 \u00a0 description: \"Optional summary metric describing the mean-squared error of a model.\"\n```\n## What's Next?\n- [Start tracking metadata with Vertex ML Metadata](/vertex-ai/docs/ml-metadata/tracking) .\n- [Review Vertex ML Metadata concepts and data model](/vertex-ai/docs/ml-metadata/data-model) .", "guide": "Vertex AI"}