{"title": "IAM - Test permissions for custom user interfaces", "url": "https://cloud.google.com/iam/docs/testing-permissions", "abstract": "# IAM - Test permissions for custom user interfaces\nMost Google Cloud resources expose the `testIamPermissions()` method, which allows you to programmatically check whether the currently authenticated caller has been granted one or more specific IAM permissions on the resource. The `testIamPermissions()` method takes a resource identifier and a set of permissions as input parameters, and returns the set of permissions that the caller is allowed.\nYou can use the `testIamPermissions()` method to determine whether a user should have access to an administrative tool in a web application. For example, you can use this method to decide, based on the user's permissions, whether to display detailed information about a Google Cloud resource.\n**Note:** If you need to test a permission so that you can troubleshoot access to a resource, use the [Policy Troubleshooter](/iam/docs/troubleshooting-access) instead.\nFor example, to determine if the currently authenticated user has the permission to delete a project, call the [projects.testIamPermissions()](/resource-manager/reference/rest/v1/projects/testIamPermissions) method by providing the project ID (such as `foo-project` ) and the `resourcemanager.projects.delete` permission as input parameters. If the caller has been granted the `resourcemanager.projects.delete` permission, it will be listed in the response body. If the caller does not have this permission, the response body will list no permissions.\nThe `testIamPermissions()` method is intended for third-party graphical user interfaces (GUIs) that need to display Google Cloud resources based on what the authenticated user has permissions to see. For example, the Google Cloud console internally uses the `testIamPermissions()` method to determine what resources and functionality are visible to you after authenticating. Different users are typically granted different permissions, and the Google Cloud console hides or exposes items accordingly.\n", "content": "## Before you begin\n- Enable the Resource Manager API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=cloudresourcemanager.googleapis.com&redirect=https://console.cloud.google.com) \n- Set up authentication.Select the tab for how you plan to use the samples on this page:\nTo use the C++ samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the .NET samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Java samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Python samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```\n### Required roles\nNo IAM role is required to test permissions.\n## How to test permissions\nThis example shows how to test the `resourcemanager.projects.get` and `resourcemanager.projects.delete` permissions for a [Google Cloud project](/resource-manager/reference/rest/v1/projects) . To test permissions for other Google Cloud resources, use the `testIamPermissions()` method exposed by each resource. For example, you can test the IAM permissions for a [Cloud Storage bucket](/storage/docs/json_api/v1/buckets/testIamPermissions) .\nTo learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C++ API reference documentation](/cpp/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/googleapis/google-cloud-cpp/blob/HEAD/google/cloud/iam/samples/iam_samples.cc) \n```\nnamespace iam = ::google::cloud::iam_admin_v1;[](std::string const& name, std::vector<std::string> const& permissions) {\u00a0 iam::IAMClient client(iam::MakeIAMConnection());\u00a0 auto response = client.TestIamPermissions(name, permissions);\u00a0 if (!response) throw std::move(response).status();\u00a0 std::cout << \"Permissions successfully tested: \" << response->DebugString()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 << \"\\n\";}\n```To authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\nIAM tests the permissions of the service account that you are using to generate credentials.\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/Access/TestPermissions.cs) \n```\nusing System;using System.Collections.Generic;using Google.Apis.Auth.OAuth2;using Google.Apis.CloudResourceManager.v1;using Google.Apis.CloudResourceManager.v1.Data;public partial class AccessManager{\u00a0 \u00a0 public static IList<String> TestIamPermissions(string projectId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 var credential = GoogleCredential.GetApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .CreateScoped(CloudResourceManagerService.Scope.CloudPlatform);\u00a0 \u00a0 \u00a0 \u00a0 var service = new CloudResourceManagerService(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new CloudResourceManagerService.Initializer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HttpClientInitializer = credential\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 TestIamPermissionsRequest requestBody = new TestIamPermissionsRequest();\u00a0 \u00a0 \u00a0 \u00a0 var permissions = new List<string>() { \"resourcemanager.projects.get\", \"resourcemanager.projects.delete\" };\u00a0 \u00a0 \u00a0 \u00a0 requestBody.Permissions = new List<string>(permissions);\u00a0 \u00a0 \u00a0 \u00a0 var returnedPermissions = service.Projects.TestIamPermissions(requestBody, projectId).Execute().Permissions;\u00a0 \u00a0 \u00a0 \u00a0 return returnedPermissions;\u00a0 \u00a0 }}\n```To authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\nIAM tests the permissions of the service account that you are using to generate credentials.\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/TestPermissions.java) \n```\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsRequest;import com.google.api.services.cloudresourcemanager.v3.model.TestIamPermissionsResponse;import com.google.api.services.iam.v1.IamScopes;import com.google.auth.http.HttpCredentialsAdapter;import com.google.auth.oauth2.GoogleCredentials;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.Arrays;import java.util.Collections;import java.util.List;public class TestPermissions {\u00a0 // Tests if the caller has the listed permissions.\u00a0 public static void testPermissions(String projectId) {\u00a0 \u00a0 // projectId = \"my-project-id\"\u00a0 \u00a0 CloudResourceManager service = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 service = createCloudResourceManagerService();\u00a0 \u00a0 } catch (IOException | GeneralSecurityException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to initialize service: \\n\" + e.toString());\u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 }\u00a0 \u00a0 List<String> permissionsList =\u00a0 \u00a0 \u00a0 \u00a0 Arrays.asList(\"resourcemanager.projects.get\", \"resourcemanager.projects.delete\");\u00a0 \u00a0 TestIamPermissionsRequest requestBody =\u00a0 \u00a0 \u00a0 \u00a0 new TestIamPermissionsRequest().setPermissions(permissionsList);\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 TestIamPermissionsResponse testIamPermissionsResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service.projects().testIamPermissions(projectId, requestBody).execute();\u00a0 \u00a0 \u00a0 System.out.println(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Of the permissions listed in the request, the caller has the following: \"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + testIamPermissionsResponse.getPermissions().toString());\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to test permissions: \\n\" + e.toString());\u00a0 \u00a0 }\u00a0 }\u00a0 public static CloudResourceManager createCloudResourceManagerService()\u00a0 \u00a0 \u00a0 throws IOException, GeneralSecurityException {\u00a0 \u00a0 // Use the Application Default Credentials strategy for authentication. For more info, see:\u00a0 \u00a0 // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\u00a0 \u00a0 GoogleCredentials credential =\u00a0 \u00a0 \u00a0 \u00a0 GoogleCredentials.getApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\u00a0 \u00a0 CloudResourceManager service =\u00a0 \u00a0 \u00a0 \u00a0 new CloudResourceManager.Builder(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GoogleNetHttpTransport.newTrustedTransport(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GsonFactory.getDefaultInstance(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new HttpCredentialsAdapter(credential))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setApplicationName(\"service-accounts\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 return service;\u00a0 }}\n```To authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\nIAM tests the permissions of the service account that you are using to generate credentials.\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/access.py) \n```\ndef test_permissions(project_id: str) -> dict:\u00a0 \u00a0 \"\"\"Tests IAM permissions of the caller\"\"\"\u00a0 \u00a0 credentials = service_account.Credentials.from_service_account_file(\u00a0 \u00a0 \u00a0 \u00a0 filename=os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"],\u00a0 \u00a0 \u00a0 \u00a0 scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\u00a0 \u00a0 )\u00a0 \u00a0 service = googleapiclient.discovery.build(\u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager\", \"v1\", credentials=credentials\u00a0 \u00a0 )\u00a0 \u00a0 permissions = {\u00a0 \u00a0 \u00a0 \u00a0 \"permissions\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"resourcemanager.projects.get\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"resourcemanager.projects.delete\",\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 \u00a0 request = service.projects().testIamPermissions(\u00a0 \u00a0 \u00a0 \u00a0 resource=project_id, body=permissions\u00a0 \u00a0 )\u00a0 \u00a0 returnedPermissions = request.execute()\u00a0 \u00a0 print(returnedPermissions)\u00a0 \u00a0 return returnedPermissions\n```In this example, the user has an IAM role that allows them to get information about a project, but not to delete projects.\nThe Resource Manager API's ` [projects.testIamPermissions](/resource-manager/reference/rest/v1/projects/testIamPermissions) ` method accepts a list of permissions and tests which of the permissions a principal has.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/PROJECT_ID:testIamPermissions\n```\nRequest JSON body:\n```\n{\n \"permissions\": [ \"resourcemanager.projects.get\",\n \"resourcemanager.projects.delete\"\n ]\n}\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"permissions\": [ \"resourcemanager.projects.get\"\n ]\n}\n```\n## What's next\nLearn how to [grant, change, and revoke access to principals](/iam/docs/granting-changing-revoking-access) .", "guide": "IAM"}