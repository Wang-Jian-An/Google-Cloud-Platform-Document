{"title": "IAM - Create service accounts", "url": "https://cloud.google.com/iam/docs/service-accounts-create", "abstract": "# IAM - Create service accounts\nThis page explains how to create service accounts using the Identity and Access Management (IAM) API, the Google Cloud console, and the `gcloud` command- line tool.\nBy default, each project can have up to 100 service accounts that control access to your resources. You can request a quota increase if necessary. [Learn more about quotas and limits](/iam/quotas) .\n", "content": "## Before you begin\n- Enable the IAM API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com&redirect=https://console.cloud.google.com) \n- Set up authentication.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.You can use the gcloud CLI samples on this page from  either of the following development environments:- **Cloud Shell** : To use an online terminal with the   gcloud CLI already set up, activate Cloud Shell.At the bottom of this page, a Cloud Shell session starts    and displays a command-line prompt. It can take a few seconds for    the session to initialize.\n- **Local shell** : To use the gcloud CLI in a local   development environment, [install](/sdk/docs/install) and [initialize](/sdk/docs/initializing) the gcloud CLI.\nTo use the C++ samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the .NET samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Go samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Java samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Python samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```\n- Understand [IAM service accounts](/iam/docs/service-account-overview) \n### Required roles\nTo get the permissions that you need to create service accounts,   ask your administrator to grant you the [Create Service Accounts ](https://cloud.google.com/iam/docs/understanding-roles#iam.serviceAccountCreator) ( `roles/iam.serviceAccountCreator` ) IAM role on the project.    For more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nYou might also be able to get  the required permissions through [custom  roles](/iam/docs/creating-custom-roles) or other [predefined  roles](/iam/docs/understanding-roles) .\n**Note:** [IAM basic  roles](/iam/docs/understanding-roles#basic) might also contain permissions to create service accounts. You shouldn't grant basic roles in a  production environment, but you can grant them in a development or test environment.\nIf you want to grant newly created service accounts access to your project, you also need the Project IAM admin ( `roles/resourcemanager.projectIamAdmin` ) role.\n## Create a service account\nWhen you create a service account, you must provide an alphanumeric ID ( `` in the samples below), such as `my-service-account` . The ID must be between 6 and 30 characters, and can contain lowercase alphanumeric characters and dashes. After you create a service account, you cannot change its name.\nThe service account's name appears in the email address that is provisioned during creation, in the format `` `@` `` `.iam.gserviceaccount.com` .\nEach service account also has a permanent, unique numeric ID, which is generated automatically.\nYou also provide the following information when you create a service account:\n- ``is an optional description for the service account.\n- ``is a friendly name for the service account.\n- ``is the ID of your Google Cloud project.\nAfter you create a service account, you might need to wait for 60 seconds or more before you use the service account. This behavior occurs because read operations are eventually consistent; it can take time for the new service account to become visible. If you try to read or use a service account immediately after you create it, and you receive an error, you can [retry the request with exponential backoff](/iam/docs/retry-strategy) .\n- In the Google Cloud console, go to the **Create service account** page. [Go to Create service account](https://console.cloud.google.com/projectselector/iam-admin/serviceaccounts/create?walkthrough_id=iam--create-service-account#step_index=1) school The remaining steps will appear automatically in the Google Cloud console.\n- Select a Google Cloud project.\n- Enter a service account name to display in the Google Cloud console.The Google Cloud console generates a service account ID based on this  name. Edit the ID if necessary. You cannot change the ID later.\n- Optional: Enter a description of the service account.\n- If you don't want to set access controls now, click **Done** to finish  creating the service account.  To set access controls now, click **Create and continue** and continue to  the next step.\n- Optional: Choose one or more [IAM roles](/iam/docs/understanding-roles) to grant to the service account on the project.\n- When you are done adding roles, click **Continue** .\n- Optional: In the **Service account users role** field, add members that need to [attach the service account to other resources](/iam/docs/attach-service-accounts) .\n- Optional: In the **Service account admins role** field, add members that need to manage the service account.\n- Click **Done** to finish creating the service account.\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- To create the service account, run the ` [gcloud iam service-accounts create](/sdk/gcloud/reference/iam/service-accounts/create) ` command:```\ngcloud iam service-accounts create SERVICE_ACCOUNT_NAME \\\u00a0 --description=\"DESCRIPTION\" \\\u00a0 --display-name=\"DISPLAY_NAME\"\n```Replace the following values:- : the name of the service account\n- : an optional description of the   service account\n- : a service account name to display in   the Google Cloud console\n- Optional: To grant your service account an [IAM role](/iam/docs/understanding-roles) on your project, run the ` [gcloud projects add-iam-policy-binding](/sdk/gcloud/reference/projects/add-iam-policy-binding) ` command:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\u00a0 --member=\"serviceAccount:SERVICE_ACCOUNT_NAME@PROJECT_ID.iam.gserviceaccount.com\" \\\u00a0 --role=\"ROLE_NAME\"\n```Replace the following values:- : the project ID\n- : the name of the service account\n- : a role name, such as `roles/compute.osLogin`\n- Optional: To allow users to [attach the service account to  other resources](/iam/docs/attach-service-accounts) , run the ` [gcloud  iam service-accounts add-iam-policy-binding](/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) ` command to grant a  user the Service Account User role  ( `roles/iam.serviceAccountUser` ) on the service account:```\ngcloud iam service-accounts add-iam-policy-binding \\\u00a0 SERVICE_ACCOUNT_NAME@PROJECT_ID.iam.gserviceaccount.com \\\u00a0 --member=\"user:USER_EMAIL\" \\\u00a0 --role=\"roles/iam.serviceAccountUser\"\n```Replace the following values:- : the project ID\n- : the name of the   service account\n- : the email address for the   userTo learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C++ API reference documentation](/cpp/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/googleapis/google-cloud-cpp/blob/HEAD/google/cloud/iam/samples/iam_samples.cc) \n```\nnamespace iam = ::google::cloud::iam_admin_v1;[](std::string const& project_id, std::string const& account_id,\u00a0 \u00a0std::string const& display_name, std::string const& description) {\u00a0 iam::IAMClient client(iam::MakeIAMConnection());\u00a0 google::iam::admin::v1::ServiceAccount service_account;\u00a0 service_account.set_display_name(display_name);\u00a0 service_account.set_description(description);\u00a0 auto response = client.CreateServiceAccount(\"projects/\" + project_id,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 account_id, service_account);\u00a0 if (!response) throw std::move(response).status();\u00a0 std::cout << \"ServiceAccount successfully created: \"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 << response->DebugString() << \"\\n\";}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C# API reference documentation](https://developers.google.com/api-client-library/dotnet/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/ServiceAccounts/ServiceAccountsCreate.cs) \n```\nusing System;using Google.Apis.Auth.OAuth2;using Google.Apis.Iam.v1;using Google.Apis.Iam.v1.Data;public partial class ServiceAccounts{\u00a0 \u00a0 public static ServiceAccount CreateServiceAccount(string projectId,\u00a0 \u00a0 \u00a0 \u00a0 string name, string displayName)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 var credential = GoogleCredential.GetApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .CreateScoped(IamService.Scope.CloudPlatform);\u00a0 \u00a0 \u00a0 \u00a0 var service = new IamService(new IamService.Initializer\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HttpClientInitializer = credential\u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 var request = new CreateServiceAccountRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AccountId = name,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServiceAccount = new ServiceAccount\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DisplayName = displayName\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 var serviceAccount = service.Projects.ServiceAccounts.Create(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 request, \"projects/\" + projectId).Execute();\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"Created service account: \" + serviceAccount.Email);\u00a0 \u00a0 \u00a0 \u00a0 return serviceAccount;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](https://godoc.org/google.golang.org/genproto/googleapis/iam/admin/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/snippets/service_accounts_create.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 iam \"google.golang.org/api/iam/v1\")// createServiceAccount creates a service account.func createServiceAccount(w io.Writer, projectID, name, displayName string) (*iam.ServiceAccount, error) {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 service, err := iam.NewService(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"iam.NewService: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 request := &iam.CreateServiceAccountRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AccountId: name,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ServiceAccount: &iam.ServiceAccount{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DisplayName: displayName,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 account, err := service.Projects.ServiceAccounts.Create(\"projects/\"+projectID, request).Do()\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"Projects.ServiceAccounts.Create: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Created service account: %v\", account)\u00a0 \u00a0 \u00a0 \u00a0 return account, nil}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](https://developers.google.com/api-client-library/java/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/CreateServiceAccount.java) \n```\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.api.services.iam.v1.Iam;import com.google.api.services.iam.v1.IamScopes;import com.google.api.services.iam.v1.model.CreateServiceAccountRequest;import com.google.api.services.iam.v1.model.ServiceAccount;import com.google.auth.http.HttpCredentialsAdapter;import com.google.auth.oauth2.GoogleCredentials;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.Collections;public class CreateServiceAccount {\u00a0 // Creates a service account.\u00a0 public static void createServiceAccount(String projectId, String serviceAccountName) {\u00a0 \u00a0 // String projectId = \"my-project-id\";\u00a0 \u00a0 // String serviceAccountName = \"my-service-account-name\";\u00a0 \u00a0 Iam service = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 service = initService();\u00a0 \u00a0 } catch (IOException | GeneralSecurityException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to initialize service: \\n\" + e.toString());\u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 }\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 ServiceAccount serviceAccount = new ServiceAccount();\u00a0 \u00a0 \u00a0 serviceAccount.setDisplayName(\"your-display-name\");\u00a0 \u00a0 \u00a0 CreateServiceAccountRequest request = new CreateServiceAccountRequest();\u00a0 \u00a0 \u00a0 request.setAccountId(serviceAccountName);\u00a0 \u00a0 \u00a0 request.setServiceAccount(serviceAccount);\u00a0 \u00a0 \u00a0 serviceAccount =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service.projects().serviceAccounts().create(\"projects/\" + projectId, request).execute();\u00a0 \u00a0 \u00a0 System.out.println(\"Created service account: \" + serviceAccount.getEmail());\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to create service account: \\n\" + e.toString());\u00a0 \u00a0 }\u00a0 }\u00a0 private static Iam initService() throws GeneralSecurityException, IOException {\u00a0 \u00a0 // Use the Application Default Credentials strategy for authentication. For more info, see:\u00a0 \u00a0 // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\u00a0 \u00a0 GoogleCredentials credential =\u00a0 \u00a0 \u00a0 \u00a0 GoogleCredentials.getApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\u00a0 \u00a0 // Initialize the IAM service, which can be used to send requests to the IAM API.\u00a0 \u00a0 Iam service =\u00a0 \u00a0 \u00a0 \u00a0 new Iam.Builder(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GoogleNetHttpTransport.newTrustedTransport(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GsonFactory.getDefaultInstance(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new HttpCredentialsAdapter(credential))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setApplicationName(\"service-accounts\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 return service;\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](https://developers.google.com/api-client-library/python/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/service_accounts.py) \n```\nimport osfrom google.oauth2 import service_account \u00a0# type: ignoreimport googleapiclient.discovery \u00a0# type: ignoredef create_service_account(project_id: str, name: str, display_name: str) -> dict:\u00a0 \u00a0 \"\"\"Creates a service account.\"\"\"\u00a0 \u00a0 credentials = service_account.Credentials.from_service_account_file(\u00a0 \u00a0 \u00a0 \u00a0 filename=os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"],\u00a0 \u00a0 \u00a0 \u00a0 scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\u00a0 \u00a0 )\u00a0 \u00a0 service = googleapiclient.discovery.build(\"iam\", \"v1\", credentials=credentials)\u00a0 \u00a0 my_service_account = (\u00a0 \u00a0 \u00a0 \u00a0 service.projects()\u00a0 \u00a0 \u00a0 \u00a0 .serviceAccounts()\u00a0 \u00a0 \u00a0 \u00a0 .create(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name=\"projects/\" + project_id,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 body={\"accountId\": name, \"serviceAccount\": {\"displayName\": display_name}},\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 .execute()\u00a0 \u00a0 )\u00a0 \u00a0 print(\"Created service account: \" + my_service_account[\"email\"])\u00a0 \u00a0 return my_service_account\n```The ` [serviceAccounts.create](/iam/docs/reference/rest/v1/projects.serviceAccounts/create) ` method creates a service account.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The alphanumeric ID of your service account. This name must be between 6 and 30 characters, and can contain lowercase alphanumeric characters and dashes.\n- ``: Optional. A description for the service account.\n- ``: A human-readable name for the service account.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts\n```\nRequest JSON body:\n```\n{\n \"accountId\": \"SA_NAME\",\n \"serviceAccount\": {\n \"description\": \"SA_DESCRIPTION\",\n \"displayName\": \"SA_DISPLAY_NAME\"\n }\n}\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/my-project/serviceAccounts/my-service-account@my-project.iam.gserviceaccount.com\",\n \"projectId\": \"my-project\",\n \"uniqueId\": \"123456789012345678901\",\n \"email\": \"my-service-account@my-project.iam.gserviceaccount.com\",\n \"displayName\": \"My service account\",\n \"etag\": \"BwUp3rVlzes=\",\n \"description\": \"A service account for running jobs in my project\",\n \"oauth2ClientId\": \"987654321098765432109\"\n}\n```\nAfter you create a service account, [grant one or more roles to the service account](/iam/docs/granting-changing-revoking-access) so that it can act on your behalf.\nAlso, if the service account needs to access resources in other projects, you usually must [enable the APIs](/apis/docs/getting-started#enabling_apis) for those resources in the project where you created the service account.\n## What's next\n- Learn how to [list and edit service accounts](/iam/docs/service-accounts-list-edit) .\n- Review the process for [granting IAM roles to all types of principals](/iam/docs/granting-changing-revoking-access) , including service accounts.\n- Understand how to [attach service accounts to resources](/iam/docs/attach-service-accounts) .", "guide": "IAM"}