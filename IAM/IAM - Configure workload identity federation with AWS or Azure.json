{"title": "IAM - Configure workload identity federation with AWS or Azure", "url": "https://cloud.google.com/iam/docs/workload-identity-federation-with-other-clouds", "abstract": "# IAM - Configure workload identity federation with AWS or Azure\nThis guide describes how to use workload identity federation to let AWS and Azure workloads authenticate to Google Cloud without a [service account key](/iam/docs/service-account-creds#key-types) .\nUsing workload identity federation, workloads that run on AWS EC2 and Azure can exchange their environment-specific credentials for short-lived Google Cloud Security Token Service tokens.\nEnvironment-specific credentials include the following:\n- AWS EC2 instances can use instance profiles to request [temporary credentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html) .\n- Azure VMs can use [managed identities](https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview) to obtain Azure access tokens.\nBy setting up workload identity federation, you can let these workloads exchange these environment-specific credentials against short-lived Google Cloud credentials. Workloads can use these short-lived credentials to access Google Cloud APIs.\n", "content": "## Before you begin\n- Set up authentication.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.You can use the gcloud CLI samples on this page from  either of the following development environments:- **Cloud Shell** : To use an online terminal with the   gcloud CLI already set up, activate Cloud Shell.At the bottom of this page, a Cloud Shell session starts    and displays a command-line prompt. It can take a few seconds for    the session to initialize.\n- **Local shell** : To use the gcloud CLI in a local   development environment, [install](/sdk/docs/install) and [initialize](/sdk/docs/initializing) the gcloud CLI.\nTo use the Python samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.\n## Prepare your external identity provider\nYou only need to perform these steps once for each Azure AD tenant or AWS account.\nYou don't need to make any configuration changes in your AWS account.\nAfter you [configure](#configure) a workload identity pool to trust your AWS account, you can let [AWS users](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users) and [AWS roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles) use permanent or temporary AWS security credentials to obtain short-lived Google Cloud credentials.\nYou must create a new [Azure AD application](https://docs.microsoft.com/en-us/azure/active-directory/develop/app-objects-and-service-principals#application-object) in your Azure AD tenant and configure it so that it can be used for workload identity federation.\nAfter you [configure](#configure) a workload identity pool to trust the application, Azure users and service principals can request access tokens for this application and exchange these access tokens against short-lived Google Cloud credentials.\nTo create the application, do the following:- [Create an Azure AD application and service principal](https://docs.microsoft.com/en-au/azure/active-directory/develop/howto-create-service-principal-portal#register-an-application-with-azure-ad-and-create-a-service-principal) .\n- Set an **Application ID URI** for the application. You can use the default Application ID URI ( `api://` `` ) or specify a custom URI.You need the Application ID URI later when you configure the workload identity pool provider.\nTo let an application obtain access tokens for the Azure AD application, you can use [managed identities](https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview) :- [Create a managed identity](https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/how-to-manage-ua-identity-portal) . Note the Object ID of the managed identity. You need it later when you configure impersonation.\n- [Assign the managed identity](https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/qs-configure-portal-windows-vm#user-assigned-managed-identity) to a virtual machine or another resource that runs your application.\n **Note:** If you use Azure's default settings, the new application grants all users in the Azure AD tenant permission to obtain access tokens. Use [app role assignments](https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/how-to-assign-app-role-managed-identity-powershell#assign-a-managed-identity-access-to-another-applications-app-role) to restrict which identities can obtain access tokens for the application.\n## Configure workload identity federation\nYou only need to perform these steps once per AWS account or Azure AD tenant. You can then use the same workload identity pool and provider for multiple workloads and across multiple Google Cloud projects.\nTo start configuring workload identity federation, do the following:\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- It's best to\n- [use a dedicated project to manage workload identity pools and providers](/iam/docs/best-practices-for-using-workload-identity-federation#dedicated-project) \n- .\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the IAM, Resource Manager, Service Account Credentials, and Security Token Service APIs.\n- [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com,cloudresourcemanager.googleapis.com,iamcredentials.googleapis.com,sts.googleapis.com&redirect=https://console.cloud.google.com) \n### Define an attribute mapping and condition\nThe environment-specific credentials of your AWS or Azure workload contain multiple attributes, and you must decide which attribute you want to use as subject identifier ( `google.subject` ) in Google Cloud.\nGoogle Cloud uses the subject identifier in Cloud Audit Logs and in [principal identifiers](/iam/docs/principal-identifiers) to uniquely identify an AWS or Azure user or role.\nOptionally, you can [map additional attributes](/iam/docs/workload-identity-federation#mapping) . You can then refer to these additional attributes when granting access to resources.\nYour attribute mapping can use the [response fields for GetCallerIdentity](https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html) as source attributes. These fields include the following:- `account`: the AWS account number.\n- `arn`: the AWS ARN of the external entity.\n- `userid`: the unique identifier of the calling entity.\nIf your application runs on an [Amazon Elastic Compute Cloud (EC2) instance with an attached role](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html) , you can use the following attribute mapping:\n```\ngoogle.subject=assertion.arn\nattribute.account=assertion.account\nattribute.aws_role=assertion.arn.extract('assumed-role/{role}/')\nattribute.aws_ec2_instance=assertion.arn.extract('assumed-role/{role_and_session}').extract('/{session}')\n```\nThe mapping does the following:- Use the ARN as subject identifier (Example:`\"arn:aws:sts::000000000000:assumed-role/ec2-my-role/i-00000000000000000`)\n- Introduce a custom attribute`account`and assign it the AWS account ID\n- Introduce a custom attribute`aws_role`and assign it the AWS role name (Example:`ec2-my-role`)\n- Introduce a custom attribute`aws_ec2_instance`and assign it the EC2 instance ID (Example:`i-00000000000000000`)\nUsing this mapping, you can grant access to:- A specific EC2 instance:```\nprincipalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/attribute.aws_ec2_instance/EC2_INSTANCE_ID\n```\n- All users and instances in a role:```\nprincipalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/attribute.aws_role/ROLE_NAME\n```\nYour attribute mappings can use the [claims embedded in Azure access tokens](https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens#claims-in-access-tokens) , including custom claims, as source attributes. In most cases, it's best to use the `sub` claim as subject identifier:\n```\ngoogle.subject=assertion.sub\n```\nFor an access token issued to a [managed identity](https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/qs-configure-portal-windows-vm#user-assigned-managed-identity) , the `sub` claim contains the Object ID of the managed identity. If you use a different claim, make sure that the claim is unique and can't be reassigned.\nIf you're unsure about the list of claims you can reference, do the following:- Connect to an Azure VM that has an assigned managed identity.\n- Obtain an access token from the [Azure Instance Metadata Service (IMDS)](https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token#get-a-token-using-http) :This command uses the [jq tool](https://stedolan.github.io/jq/) . `jq` is available by default in Cloud Shell.Replace `` with the **Application ID URI** of the application that you've [configured for workload identity federation](#prepare) .\n- In a web browser, go to [https://jwt.ms/](https://jwt.ms/) and paste the access token into the text box.\n- Click **Claims** to view the list of claims embedded in the access token.\nFor service identities, it's typically not necessary to create a mapping for `google.groups` or any custom attributes.\nOptionally, define an [attribute condition](/iam/docs/workload-identity-federation#conditions) . Attribute conditions are CEL expressions that can check assertion attributes and target attributes. If the attribute condition evaluates to `true` for a given credential, the credential is accepted. Otherwise, the credential is rejected.\nYou can use an attribute condition to restrict which IAM users and roles can use workload identity federation to obtain short-lived Google Cloud tokens.\nFor example, the following condition restricts access to AWS roles and disallows [other IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html) :\n```\nassertion.arn.startsWith('arn:aws:sts::AWS_ACCOUNT_ID:assumed-role/')\n```\nYou can use an attribute condition to restrict which users and service principals can use workload identity federation to obtain short-lived Google Cloud tokens. Alternatively, you can configure your Azure AD application to use [app role assignments](https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/how-to-assign-app-role-managed-identity-powershell#assign-a-managed-identity-access-to-another-applications-app-role) .\n### Create the workload identity pool and provider\nYou now have collected all of the information that you need to create a workload identity pool and provider:\n- In the Google Cloud console, go to the **New workload provider and pool** page. [Go to New workload provider and pool](https://console.cloud.google.com/iam-admin/workload-identity-pools/create) \n- In the **Create an identity pool** section, enter the following:- **Name** : Name for the pool. The name is also used as the pool ID. You can't change the pool ID later.\n- **Description** : Text that describes the purpose of the pool.\n- Click **Continue** .\n- Configure provider settings:\nConfigure the following provider settings:- **Select a provider** : **AWS** .\n- **Provider name** : the name for the provider. The name is also used as the provider ID. You cannot change the provider ID later.\nConfigure the following provider settings:- **Select a provider** : **OpenID Connect (OIDC)** .\n- **Provider name** : Name for the provider. The name is also used as the provider ID. You cannot change the provider ID later.\n- **Issuer URL** :`https://sts.windows.net/` ``. Replace``with the [tenant ID](https://learn.microsoft.com/en-us/azure/azure-portal/get-subscription-tenant-id) (GUID) of your Azure AD tenant.\n- **Allowed audiences** : **Application ID URI** that you used when [you registered the application](#prepare) in Azure AD.- Click **Continue** .\n- In the **Configure provider attributes** section, add the [attribute mappings that you've identified previously](#mappings-and-conditions) .\n- In the **Attribute conditions** section, enter the [attribute condition](#mappings-and-conditions) that you identified previously. Leave the field blank if you don't have an attribute condition.\n- Click **Save** to create the workload identity pool and provider.\n- Create a new workload identity pool:```\ngcloud iam workload-identity-pools create POOL_ID \\\n --location=\"global\" \\\n --description=\"DESCRIPTION\" \\\n --display-name=\"DISPLAY_NAME\"\n```Replace the following:- ``: the unique ID for the pool.\n- ``: the name of the pool.\n- ``: the description of the pool. This description appears when granting access to pool identities.\n- Add a workload identity pool provider:\nTo create the workload identity pool provider for AWS, execute the following command:\n```\ngcloud iam workload-identity-pools providers create-aws PROVIDER_ID \\\n --location=\"global\" \\\n --workload-identity-pool=\"POOL_ID\" \\\n --account-id=\"ACCOUNT_ID\" \\\n --attribute-mapping=\"MAPPINGS\" \\\n --attribute-condition=\"CONDITIONS\"\n```\nReplace the following:- ``: the unique ID for the provider.\n- ``: the ID of the pool.\n- ``: the 12-digit number [that identifies your AWS account](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html) .\n- ``: Comma-separated list of [attribute mappings that you've identified previously](#mappings-and-conditions) .\n- ``: [Attribute condition that you've identified previously](#mappings-and-conditions) . Remove the parameter if you don't have an attribute condition.\nExample:\n```\ngcloud iam workload-identity-pools providers create-aws example-provider \\\u00a0 --location=\"global\" \u00a0\\\u00a0 --workload-identity-pool=\"pool-1\" \\\u00a0 --account-id=\"123456789000\" \\\u00a0 --attribute-mapping=\"google.subject=assertion.arn\"\n```\nTo create the workload identity pool provider for Azure, execute the following command:\n```\ngcloud iam workload-identity-pools providers create-oidc PROVIDER_ID \\\n --location=\"global\" \\\n --workload-identity-pool=\"POOL_ID\" \\\n --issuer-uri=\"ISSUER_URI\" \\\n --allowed-audiences=\"APPLICATION_ID_URI\" \\\n --attribute-mapping=\"MAPPINGS\" \\\n --attribute-condition=\"CONDITIONS\"\n```\nReplace the following:- ``: The unique ID for the provider.\n- ``: The ID of the pool.\n- ``: The [tenant ID](https://learn.microsoft.com/en-us/azure/azure-portal/get-subscription-tenant-id) (GUID) of your Azure AD tenant, sometimes formatted as`https://sts.windows.net/` ``. The issuer URI can vary, and to find your issuer URI, you can debug your JWT using [JWT.io](http://jwt.io) .\n- ``: **Application ID\nURI** that you used when [you registered the application](#prepare) in Azure AD.\n- ``: The comma-separated list of [attribute mappings](#mappings-and-conditions) that you previously identified.\n- ``: (Optional) The [attribute condition](#mappings-and-conditions) that you previously identified.\nExample:\n```\ngcloud iam workload-identity-pools providers create-oidc example-provider \\\u00a0 \u00a0 --location=\"global\" \\\u00a0 \u00a0 --workload-identity-pool=\"pool-1\" \\\u00a0 \u00a0 --issuer-uri=\"https://sts.windows.net/00000000-1111-2222-3333-444444444444\" \\\u00a0 \u00a0 --allowed-audiences=\"api://my-app\" \\\u00a0 \u00a0 --attribute-mapping=\"google.subject=assertion.sub,google.groups=assertion.groups\"\n```\n**Note:** The prefix `gcp-` is reserved and can't be used in a pool or provider ID.\n## Authenticate a workload\nYou must perform these steps once per workload.\n### Create a service account for the external workload\n- Enable the IAM, Security Token Service, and Service Account Credentials APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com,sts.googleapis.com,iamcredentials.googleapis.com&redirect=https://console.cloud.google.com) \n- [Create a service account](/iam/docs/creating-managing-service-accounts#creating) that represents the workload. It's best to [use a dedicated service account for each workload](/iam/docs/best-practices-for-using-workload-identity-federation#use-dedicated-service-accounts) .The service account doesn't need to be in the same project as the workload identity pool.\n- [Grant the service account access](/iam/docs/granting-changing-revoking-access) to resources that you want external identities to access.\n### Allow the external workload to impersonate the service account\nTo allow external identities to impersonate a service account, you grant them the Workload Identity User role ( `roles/iam.workloadIdentityUser` ) on the service account. You can grant the role to a specific external identity, or to multiple external identities:\n- For a specific external identity, write an attribute condition that checks the`google.subject`attribute.\n- For a group of external identities, write an attribute condition that checks the`google.groups`attribute or a custom attribute`attribute.` ``.\n**Note:** You can only check attributes that you've configured in the [attribute mapping](#mappings-and-conditions) in the configuration for your workload identity pool provider.\nTo allow external identities to impersonate a service account using the Google Cloud console, do the following:- In the Google Cloud console, go to the **Workload Identity Pools** page. [Go to Workload Identity Pools](https://console.cloud.google.com/iam-admin/workload-identity-pools) \n- Find the workload identity pool you want to update and select it.\n- To grant access to the selected workload identity pool, click add_box **Grant access** .\n- In the **Service account** list, select the service account for the external identities to impersonate.\n- To choose which identities in the pool can impersonate the service account, perform one of the following actions:- To allow only specific identities of the workload identity pool to impersonate the service account, select **Only identities matching the filter** .In the **Attribute name** list, select the attribute that you want to filter on.In the **Attribute value** field, enter the expected value of the attribute; for example, if you use an [attribute mapping](#mappings-and-conditions) `google.subject=assertion.sub` , set **Attribute** name to `subject` and **Attribute value** to the value of the `sub` claim in tokens issued by your external identity provider.\n- To save the configuration, click **Save** and then **Dismiss** .\nTo allow external identities to impersonate a service account using gcloud CLI, do the following:- To obtain the project number of your current project, execute the following command:```\ngcloud projects describe $(gcloud config get-value core/project) --format=value\\(projectNumber\\)\n```\n- To grant the Workload Identity User role ( `roles/iam.workloadIdentityUser` ) to external identities that meet a certain criteria:\n```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_EMAIL \\\n --role=roles/iam.workloadIdentityUser \\\n --member=\"principal://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/subject/SUBJECT\"\n```\n```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_EMAIL \\\n --role=roles/iam.workloadIdentityUser \\\n --member=\"principalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/group/GROUP\"\n```\n```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_EMAIL \\\n --role=roles/iam.workloadIdentityUser \\\n --member=\"principalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/attribute.ATTRIBUTE_NAME/ATTRIBUTE_VALUE\"\n```\nReplace the following:- ``: the email address of the service account\n- ``: the [project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects) of the project that contains the workload identity pool\n- ``: the pool ID of the workload identity pool\n- ``: the expected value for the attribute that [you've mapped](#mappings-and-conditions) to`google.subject`\n- ``: the expected value for the attribute that [you've mapped](#mappings-and-conditions) to`google.groups`\n- ``: the name of a custom attribute in [your attribute mapping](#mappings-and-conditions) \n **Note:** You must use the project number in the member identifier. Using the project ID is not supported.\n### Create a credential configuration\nThe [Cloud Client Libraries](/apis/docs/cloud-client-libraries) , the gcloud CLI, and Terraform, can automatically obtain external credentials, and use these credentials to impersonate a service account. To let libraries and tools complete this process, you have to provide a credential configuration file. This file defines the following:\n- Where to obtain external credentials from\n- Which workload identity pool and provider to use\n- Which service account to impersonate\n**Note:** Unlike a [service account key](/iam/docs/creating-managing-service-account-keys#creating_service_account_keys) , a credential configuration file doesn't contain a private key and doesn't need to be kept confidential. Details about the credential configuration file are available at [https://google.aip.dev/auth/4117](https://google.aip.dev/auth/4117) .\nTo create a credential configuration file, do the following:\nDownload a credential configuration file in the Google Cloud console:- In the Google Cloud console, go to the **Workload Identity Pools** page. [Go to Workload Identity Pools](https://console.cloud.google.com/iam-admin/workload-identity-pools) \n- Find the workload identity pool that contains the IdP you want to use and click on it.\n- Select **Connected service accounts** .\n- Find the service account you want to use and click file_download **Download** .\n- In the **Configure your application** dialog, select the provider that contains the external identities that will impersonate the service account.\n- Provide the following additional settings:\nNo additional settings required.\n **Application ID URL** : Application ID URI of the Azure application\n- Select file_download **Download config** to download the credential configuration file, then click **Dismiss** .\nTo create a credential configuration file by using [gcloud iam workload-identity-pools create-cred-config](/sdk/gcloud/reference/iam/workload-identity-pools/create-cred-config) , do the following:\nTo create a credential configuration file that lets the library obtain an access token from EC2 instance metadata, do the following:\n```\ngcloud iam workload-identity-pools create-cred-config \\\n projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID \\\n --service-account=SERVICE_ACCOUNT_EMAIL \\\n --service-account-token-lifetime-seconds=SERVICE_ACCOUNT_TOKEN_LIFETIME \\\n --aws \\\n --output-file=FILEPATH.json\n```\nReplace the following:- ``: the project number of the project that contains the workload identity pool\n- ``: the ID of the workload identity pool\n- ``: the ID of the workload identity pool provider\n- ``: the email address of the service account\n- ``: lifetime of the service account access token, in seconds; this defaults to one hour when not provided. To specify a lifetime longer than one hour, you must configure the`constraints/iam.allowServiceAccountCredentialLifetimeExtension` [organizational policy constraint](/resource-manager/docs/organization-policy/creating-managing-policies) .\n- ``: the file to save configuration to\nIf you use [AWS IMDSv2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html) , an additional flag `--enable-imdsv2` needs to be added to the [gcloud iam workload-identity-pools create-cred-config](/sdk/gcloud/reference/iam/workload-identity-pools/create-cred-config) command:\n```\ngcloud iam workload-identity-pools create-cred-config \\\n projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID \\\n --service-account=SERVICE_ACCOUNT_EMAIL \\\n --aws \\\n --enable-imdsv2 \\\n --output-file=FILEPATH.json\n```\nIf using the AWS metadata server isn't an option, you can provide AWS security credentials through the following AWS environment variables:- `AWS_ACCESS_KEY_ID`\n- `AWS_SECRET_ACCESS_KEY`\n- Either of`AWS_REGION`or`AWS_DEFAULT_REGION`\n- Optional:`AWS_SESSION_TOKEN`\nThe gcloud CLI and libraries use these AWS environment variables when the AWS metadata server is unavailable.\nCreate a credential configuration file that lets the library obtain an access token from the Azure Instance Metadata Service (IMDS):\n```\ngcloud iam workload-identity-pools create-cred-config \\\n projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID \\\n --service-account=SERVICE_ACCOUNT_EMAIL \\\n --service-account-token-lifetime-seconds=SERVICE_ACCOUNT_TOKEN_LIFETIME \\\n --azure \\\n --app-id-uri APPLICATION_ID_URI \\\n --output-file=FILEPATH.json\n```\nReplace the following:- ``: Project number of the project that contains the workload identity pool\n- ``: the ID of the workload identity pool\n- ``: the ID of the workload identity pool provider\n- ``: the email address of the service account\n- ``: the Application ID URI of the Azure application\n- ``: lifetime of the service account access token, in seconds; this defaults to one hour when not provided. To specify a lifetime longer than one hour, you must configure the`constraints/iam.allowServiceAccountCredentialLifetimeExtension` [organizational policy constraint](/resource-manager/docs/organization-policy/creating-managing-policies) .\n- ``: the file to save configuration to\n### Use the credential configuration to access Google Cloud\nTo let tools and client libraries use your credential configuration, do the following in your AWS or Azure environment:\n- Initialize an environment variable `GOOGLE_APPLICATION_CREDENTIALS` and point it to the credential configuration file:\n- Use a client library or tool that supports workload identity federation and can [find credentials automatically](/docs/authentication/application-default-credentials) :\nThe [Google Cloud Client Libraries for C++](/cpp/docs) support workload identity federation since version [v2.6.0](https://github.com/googleapis/google-cloud-cpp/releases/tag/v2.6.0) . To use workload identity federation, you must build the client libraries with version 1.36.0 or later of gRPC.\nClient libraries for Go support identity federation if they use version v0.0.0-20210218202405-ba52d332ba99 or later of the `golang.org/x/oauth2` module.\nTo check which version of this module your client library uses, run the following commands:\n```\ncd $GOPATH/src/cloud.google.com/gogo list -m golang.org/x/oauth2\n```\nClient libraries for Java support identity federation if they use version 0.24.0 or later of the [com.google.auth:google-auth-library-oauth2-http artifact](https://search.maven.org/artifact/com.google.auth/google-auth-library-oauth2-http) .\nTo check which version of this artifact your client library uses, run the following Maven command in your application directory:\n```\nmvn dependency:list -DincludeArtifactIds=google-auth-library-oauth2-http\n```\nClient libraries for Node.js support workload identity federation if they use version 7.0.2 or later of the [google-auth-library package](https://github.com/googleapis/google-auth-library-nodejs) .\nTo check which version of this package your client library uses, run the following command in your application directory:\n```\nnpm list google-auth-library\n```\nWhen you create a `GoogleAuth` object, you can specify a project ID, or you can allow `GoogleAuth` to find the project ID automatically. To find the project ID automatically, the service account in the configuration file must have the Browser role ( `roles/browser` ), or a role with equivalent permissions, on your project. For details, see the [README for the google-auth-library package](https://github.com/googleapis/google-auth-library-nodejs#using-external-identities) .\nClient libraries for Python support identity federation if they use version 1.27.0 or later of the [google-auth package](https://github.com/googleapis/google-auth-library-python) .\nTo check which version of this package your client library uses, run the following command in the environment where the package is installed:\n```\npip show google-auth\n```\nTo specify a project ID for the authentication client, you can set the `GOOGLE_CLOUD_PROJECT` environment variable, or you can allow the client to find the project ID automatically. To find the project ID automatically, the service account in the configuration file must have the Browser role ( `roles/browser` ), or a role with equivalent permissions, on your project. For details, see the [user guide for the google-auth package](https://github.com/googleapis/google-auth-library-python/blob/master/docs/user-guide.rst#using-external-identities) .\nTo authenticate using workload identity federation, use the [gcloud auth login](/sdk/gcloud/reference/auth/login) command:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nReplace `` with the file path to the credential configuration file.\nSupport for workload identity federation in gcloud CLI is available in [version 363.0.0 and later versions of the gcloud CLI](/sdk/docs/components#updating_components) .\nThe [Google Cloud provider](https://registry.terraform.io/providers/hashicorp/google/latest/docs) supports workload identity federation if you use version 3.61.0 or later:\n```\nterraform {\n required_providers {\n google = {\n  source = \"hashicorp/google\"\n  version = \"~> 3.61.0\"\n }\n }\n}\n```\nTo authenticate using workload identity federation, use one of the following methods:\nWhen you use gsutil in conjunction with gcloud, sign in as normal:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nWhen you use gsutil as a stand-alone command-line application, edit the .boto file to include the following section:\n```\n[Credentials]\ngs_external_account_file = FILEPATH\n```\nReplace `` , in both cases, with the file path to the credential configuration file.\nSupport for workload identity federation in gsutil is available in [version 379.0.0 and later versions of the gcloud CLI](/sdk/docs/components#updating_components) .\nTo authenticate using workload identity federation, use the [gcloud auth login](/sdk/gcloud/reference/auth/login) command, as follows:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nReplace `` with the file path to the credential configuration file.\nSupport for workload identity federation in bq is available in [version 390.0.0 and later versions of the gcloud CLI](/sdk/docs/components#updating_components) .\nIf you can't use a client library that supports workload identity federation, you can [authenticate programmatically by using the REST API](#rest) .## Advanced scenarios\n### Authenticate a workload using the REST API\nIf you can't use the client libraries, you can follow these steps to let an external workload obtain a short-lived access token by using the REST API:\n- Obtain credentials from your external IdP:\nCreate a JSON document that contains the information that you would normally include in a request to the AWS [GetCallerIdentity()](https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity) endpoint, including a valid [request signature](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html) .\nWorkload identity federation refers to this JSON document as a `GetCallerIdentity` token. The token lets workload identity federation verify the identity without revealing the AWS secret access key.\nA `GetCallerIdentity` token looks similar to the following:\n```\n{\u00a0 \"url\": \"https://sts.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15\",\u00a0 \"method\": \"POST\",\u00a0 \"headers\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"key\": \"Authorization\",\u00a0 \u00a0 \u00a0 \"value\" : \"AWS4-HMAC-SHA256 Credential=AKIASOZTBDV4D7ABCDEDF/20200228/us-east-1/sts/aws4_request, SignedHeaders=host;x-amz-date,Signature=abcedefdfedfd\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"key\": \"host\",\u00a0 \u00a0 \u00a0 \"value\": \"sts.amazonaws.com\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"key\": \"x-amz-date\",\u00a0 \u00a0 \u00a0 \"value\": \"20200228T225005Z\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"key\": \"x-goog-cloud-target-resource\",\u00a0 \u00a0 \u00a0 \"value\": \"//iam.googleapis.com/projects/12345678/locations/global/workloadIdentityPools/my-pool/providers/my-aws-provider\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"key\": \"x-amz-security-token\",\u00a0 \u00a0 \u00a0 \"value\": \"GizFWJTqYX...xJ55YoJ8E9HNU=\"\u00a0 \u00a0 }\u00a0 ]}\n```\nThe token contains the following fields:- `url`: The URL of the AWS STS endpoint for`GetCallerIdentity()`, with the body of a standard`GetCallerIdentity()`request appended as query parameters. For example,`https://sts.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15`. We recommend that you use regional STS endpoints and [design a reliable infrastructure for your workloads](/architecture/infra-reliability-guide/design) . For more information, see [Regional AWS STS endpoints](https://docs.aws.amazon.com/STS/latest/APIReference/welcome.html#sts-endpoints) .\n- `method`: The HTTP request method:`POST`.\n- `headers`: The HTTP request headers, which must include:- `Authorization`: The request signature.\n- `host`: The hostname of the`url`field; for example,`sts.amazonaws.com`.\n- `x-amz-date`: The time you will send the request, formatted as an [ISO 8601 Basic](https://docs.aws.amazon.com/general/latest/gr/sigv4_elements.html#sigv4_elements_date) string. This value is typically set to the current time and is used to help prevent replay attacks.\n- `x-goog-cloud-target-resource`: The full resource name of the identity provider without a`https:`prefix. For example:```\n//iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID\n```\n- `x-amz-security-token`: Session token. Only required if you are using [temporary security credentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html) .\nThe following example creates a URL-encoded `GetCallerIdentity` token. Extract the URL-encoded token for later use. It also creates a human-readable token just for your reference:\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/workload_identity_federation.py) \n```\nimport jsonimport urllibimport boto3from botocore.auth import SigV4Authfrom botocore.awsrequest import AWSRequestdef create_token_aws(project_number: str, pool_id: str, provider_id: str) -> None:\u00a0 \u00a0 # Prepare a GetCallerIdentity request.\u00a0 \u00a0 request = AWSRequest(\u00a0 \u00a0 \u00a0 \u00a0 method=\"POST\",\u00a0 \u00a0 \u00a0 \u00a0 url=\"https://sts.amazonaws.com/?Action=GetCallerIdentity&Version=2011-06-15\",\u00a0 \u00a0 \u00a0 \u00a0 headers={\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Host\": \"sts.amazonaws.com\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"x-goog-cloud-target-resource\": f\"//iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/providers/{provider_id}\",\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 )\u00a0 \u00a0 # Set the session credentials and Sign the request.\u00a0 \u00a0 # get_credentials loads the required credentials as environment variables.\u00a0 \u00a0 # Refer:\u00a0 \u00a0 # https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html\u00a0 \u00a0 SigV4Auth(boto3.Session().get_credentials(), \"sts\", \"us-east-1\").add_auth(request)\u00a0 \u00a0 # Create token from signed request.\u00a0 \u00a0 token = {\"url\": request.url, \"method\": request.method, \"headers\": []}\u00a0 \u00a0 for key, value in request.headers.items():\u00a0 \u00a0 \u00a0 \u00a0 token[\"headers\"].append({\"key\": key, \"value\": value})\u00a0 \u00a0 # The token lets workload identity federation verify the identity without revealing the AWS secret access key.\u00a0 \u00a0 print(\"Token:\\n%s\" % json.dumps(token, indent=2, sort_keys=True))\u00a0 \u00a0 print(\"URL encoded token:\\n%s\" % urllib.parse.quote(json.dumps(token)))def main() -> None:\u00a0 \u00a0 # TODO(Developer): Replace the below credentials.\u00a0 \u00a0 # project_number: Google Project number (not the project id)\u00a0 \u00a0 project_number = \"my-project-number\"\u00a0 \u00a0 pool_id = \"my-pool-id\"\u00a0 \u00a0 provider_id = \"my-provider-id\"\u00a0 \u00a0 create_token_aws(project_number, pool_id, provider_id)if __name__ == \"__main__\":\u00a0 \u00a0 main()\n```\nInitialize the following variables:Where `` is the [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) `GetCallerIdentity` token that was generated by the script above.\nConnect to an Azure VM that has an [assigned managed identity](https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/qs-configure-portal-windows-vm#user-assigned-managed-identity) and [obtain an access token](https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/qs-configure-portal-windows-vm#user-assigned-managed-identity) from the Azure Instance Metadata Service (IMDS):This command uses the [jq tool](https://stedolan.github.io/jq/) . `jq` is available by default in Cloud Shell.Where `` is the **Application ID URI** of the application that you've [configured for workload identity federation](/iam/docs/configuring-workload-identity-federation#prepare) .\n- Use the [Security Token Service API](/iam/docs/reference/sts/rest) to exchange the credential against a short-lived access token:Replace the following values:- ``: Project number of the project that contains the workload identity pool\n- ``: ID of the workload identity pool\n- ``: ID of the workload identity pool provider\n **Note:** The audience must not include a `https:` scheme.\n- Use the token from the Security Token Service to invoke the [generateAccessToken method](/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateAccessToken) of the [IAM Service Account Credentials API](/iam/docs/reference/credentials/rest) to obtain an access token:\nReplace `` with the email address of the service account.\n## What's next\n- Read more about [workload identity federation](/iam/docs/workload-identity-federation) .\n- Learn about [best practices for using workload identity federation](/iam/docs/best-practices-for-using-workload-identity-federation) .\n- See how you can [manage workload identity pools and providers](/iam/docs/manage-workload-identity-pools-providers) .", "guide": "IAM"}