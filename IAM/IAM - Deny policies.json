{"title": "IAM - Deny policies", "url": "https://cloud.google.com/iam/docs/deny-overview", "abstract": "# IAM - Deny policies\nIdentity and Access Management (IAM) deny policies let you set guardrails on access to Google Cloud resources. With deny policies, you can define that prevent certain principals from using certain permissions, regardless of the roles they're granted.\nThis page provides an overview of deny policies and deny rules. To learn how to create and update deny policies, see [Deny access to resources](/iam/docs/deny-access) .\n", "content": "## How deny policies work\nDeny policies are made up of deny rules. Each deny rule specifies the following:\n- A set of principals that are denied permissions\n- The permissions that the principals are, or unable to use\n- Optional: The [condition](#denial-conditions) that must be true for the permission to be denied\nWhen a principal is denied a permission, they can't do anything that requires that permission, regardless of the IAM roles they've been granted. This is because IAM always checks relevant deny policies before checking relevant allow policies. For details, see [policyevaluation](#policy-eval) .\nTo specify where you want a deny policy to apply, you attach it to a project, folder, or organization. When a deny policy is attached to one of these resources, the principals in the policy can't use the specified permissions to access the resource, or any of the resource's [descendants](#inheritance) .\nYou can attach multiple deny policies to a single resource. This lets you create separate deny policies for different types of deny rules. For example, you could put compliance-related deny rules in one policy, then use another policy for other deny rules. Each deny policy is evaluated independently of all other deny policies.\nEach resource can have up to 500 deny policies. Together, these deny policies can contain a total of 500 deny rules.\n**Note:** Changes to a principal's access are [eventually consistent](https://wikipedia.org/wiki/Eventual_consistency) . This means that it takes time for access changes to propagate through the system. To learn how long it takes, on average, for access changes to propagate, see [Access change propagation](/iam/docs/access-change-propagation) .\n### Policy evaluation\nWhen a principal tries to access a resource, IAM evaluates all relevant allow and deny policies to see if the principal is allowed to access the resource. It evaluates the policies in this order:\n- IAM checks all relevant deny policies to see if the principal has been denied the permission. Relevant deny policies are the deny policies attached to the resource, as well as any [inherited deny policies](#inheritance) .If of these deny policies prevent the principal from using a required permission, IAM prevents them from accessing the resource.If no deny policies prevent the principal from using a required permission, IAM continues to the next step.\n- IAM checks all relevant allow policies to see if the principal has the required permissions. Relevant allow policies are the allow policies attached to the resource, as well as any [inherited allowpolicies](/iam/docs/resource-hierarchy-access-control) .If the principal has the required permissions, IAM lets them access the resource.If the principal does not have the required permissions, IAM prevents them from accessing the resource.\nThe following diagram shows this policy evaluation flow:\n### Deny policy inheritance\nDeny policies, like allow policies, are inherited through the [resourcehierarchy](/iam/docs/resource-hierarchy-access-control) . When you attach a deny policy to a project, folder, or organization, the policy is also effective for all resources inside that project, folder, or organization.\nFor example, if a deny policy for an says that a principal cannot use a specific permission, then the principal cannot use that permission for resource within the organization. This rule applies even if the folders and projects within that organization have more permissive deny policies.\nSimilarly, if a deny policy for a says that a principal cannot use a specific permission, then the principal cannot use that permission for resource within the project. This rule applies even if the parent organization and folders have more permissive deny policies.\n### Denial conditions\nDenial conditions specify the conditions that must be met in order for a deny rule to apply. If the condition evaluates to `true` or cannot be evaluated, the deny rule applies and the principals are unable to use the specified permissions. If the condition evaluates to `false` , the deny rule does not apply and the principals can use the specified permissions if they have them.\nDenial conditions have the same structure as IAM Conditions. However, denial conditions only recognize [resource tagfunctions](/iam/docs/conditions-attribute-reference#resource-tags) .\nTo learn how to write conditions, see [overview of IAMConditions](/iam/docs/conditions-overview) .\n### Permission groups\nSome services let you deny . Permission groups are sets of permissions that match a specified pattern. You can use a permission group to deny sets of related permissions\u2014for example, you can deny all permissions for a single service or resource.\nSupported permission groups are listed in [Permissions supported in denypolicies](/iam/docs/deny-permissions-support) . You can't use wildcards in any other permission names.\nThe identifier for a permission group replaces one or more sections of a permission name with a wildcard character ( `*` ). The permission group includes all permissions that match this pattern.\nWildcards can appear in the following places:\n- `` `/` `` `.*`: Denies all permissions for the specified given resource.\n- `` `/` ``: Denies all permissions for the specified service.\n- `` `/*.` ``: Denies all permissions for a service that end in the specified verb.\nPermission groups include all current and future permissions that match the specified pattern. For example, imagine that you use the permission group `example.googleapis.com/exampleResource.*` to deny a user all permissions for the `exampleResource` resource type. If `example.googleapis.com` adds a new permission for the `exampleResource` resource type, such as `example.googleapis.com/exampleResource.newPermission` , the user will automatically be denied the new permission.\n## Structure of a deny policy\nA deny policy is a collection of metadata and . A deny rule associates a set of principals with a set of permissions that the principals are denied, or unable to use. Each rule can also specify a condition that determines when the permission is denied.\nFor example, the following deny policy blocks all principals from deleting projects, unless the principal is a member of `project-admins@example.com` or the project being deleted has a tag with the value `test` .\n```\n{\u00a0 \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F253519172624/denypolicies/limit-project-deletion\",\u00a0 \"uid\": \"06ccd2eb-d2a5-5dd1-a746-eaf4c6g3f816\",\u00a0 \"kind\": \"DenyPolicy\",\u00a0 \"displayName\": \"Only project admins can delete projects.\",\u00a0 \"etag\": \"MTc1MTkzMjY0MjUyMTExODMxMDQ=\",\u00a0 \"createTime\": \"2021-09-07T23:15:35.258319Z\",\u00a0 \"updateTime\": \"2021-09-07T23:15:35.258319Z\",\u00a0 \"rules\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"denyRule\": {\u00a0 \u00a0 \u00a0 \u00a0 \"deniedPrincipals\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"principalSet://goog/public:all\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"exceptionPrincipals\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"principalSet://goog/group/project-admins@example.com\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"deniedPermissions\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com/projects.delete\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"denialCondition\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"title\": \u00a0\"Only for non-test projects\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"expression\": \"!resource.matchTag('12345678/env', 'test')\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ]}\n```\nThe following sections describe the fields in a deny policy's metadata and deny rules.\n### Metadata\nDeny policies contain the following metadata:\n- `name`: The name of the deny policy. This name has the format`policies/` `` `/denypolicies/` ``, where``is the project, folder, or organization that the deny policy is attached to and``is the deny policy's alphanumeric ID.\n- `uid`: A unique ID assigned to the deny policy by Google.\n- `kind`: The type of policy. The`kind`for a deny policy is always`DenyPolicy`.\n- `displayName`: Optional. A human-readable name for the deny policy.\n- `etag`: An identifier for a version of the policy. To prevent conflicting updates, the`etag`value must match the value that is stored in IAM. If the`etag`values do not match, the request fails.\n- `createTime`: The time when the deny policy was created.\n- `updateTime`: The last time that the deny policy was updated.\n### Deny rules\nEach deny rule can have the following fields:\n- `deniedPrincipals` : The principals that are denied permissions. You can list individual principals and sets of principals. Individual principal types include user accounts, service accounts, and single identities in a workforce or workload identity pool. Sets of principals include Google groups, Cloud Identity domains, sets of workforce or workload identities, and all users on the internet.For a list of valid principal types and identifiers, see [IAM v2 API principal identifiers](/iam/docs/principal-identifiers#v2) .\n- `exceptionPrincipals` : Optional. The principals that are exempt from the deny rule. These principals are not denied the specified permissions even if they are listed in `deniedPrincipals` , or are part of a group listed in `deniedPrincipals` .You can list individual principals and sets of principals. Individual principal types include user accounts, service accounts, and single identities in a workforce or workload identity pool. Sets of principals include Google groups, Cloud Identity domains, sets of workforce or workload identities, and all users on the internet.For a list of valid principal types and identifiers, see [IAM v2 API principal identifiers](/iam/docs/principal-identifiers#v2) .\n- `deniedPermissions` : The permissions that the specified principals are unable to use, or denied. These permissions use the IAM `v2` permission format, which uses fully qualified domain names (FQDNs) to identify the service. The format is `` `/` `` `.` `` . Google APIs use the domain `*.googleapis.com` . For example, `iam.googleapis.com/roles.delete` .Only some permissions can be denied. For a full list of permissions that can be denied, see [Permissions supported in denypolicies](/iam/docs/deny-permissions-support) .In some cases, you can also use permission groups to deny sets of permissions. For more information, see [Permissiongroups](#permission-groups) .\n- `denialConditions` : Optional. A logic expression that affects when the deny rule applies. If the condition evaluates to `true` or cannot be evaluated, the permission is denied. If the condition evaluates to `false` , the permission is not denied. For more information, see [Denialconditions](#denial-conditions) on this page.## Common use cases\nThe following are common situations where you might want to use deny policies, and examples of the deny rules you might create in each situation. To learn how to create and update deny policies, see [Deny access to resources](/iam/docs/deny-access) .\n### Centralizing administrative privileges\nYou can use deny policies to restrict certain types of administrative activities to a specific set of principals.\nFor example, imagine you want to limit custom role management for your organization to a single central team. To do so, you create a deny rule that denies the permissions required for custom role management to all users, except users in the administrative group ( `custom-role-admins@example.com` ):\n```\n{\u00a0 \"deniedPrincipals\": [\u00a0 \u00a0 \"principalSet://goog/public:all\"\u00a0 ],\u00a0 \"exceptionPrincipals\": [\u00a0 \u00a0 \"principalSet://goog/group/custom-role-admins@example.com\"\u00a0 ],\u00a0 \"deniedPermissions\": [\u00a0 \u00a0 \"iam.googleapis.com/roles.create\",\u00a0 \u00a0 \"iam.googleapis.com/roles.delete\",\u00a0 \u00a0 \"iam.googleapis.com/roles.update\",\u00a0 ]}\n```\nThen, you attach the deny policy to your organization.\nNow, only members of the `custom-role-admins@example.com` group are able to manage custom roles, even if other users have the required permissions.\nFor example, imagine that both `yuri@example.com` and `tal@example.com` have the Organization Role Administrator role ( `roles/iam.organizationRoleAdmin` ). However, `yuri@example.com` is a member of `custom-role-admins@example.com` , and `tal@example.com` is not. With this deny policy, only `yuri@example.com` is able to create, delete, and update roles.\n### Creating exceptions to access grants\nYou can use deny policies to deny inherited permissions. This capability gives you the option to grant a role at a high level in the resource hierarchy, and then deny the role's permissions on individual lower-level resources if necessary.\nFor example, imagine that you have a folder, `Engineering` , that contains multiple projects. You want to give a group, `eng@example.com` , the permissions in the Service Account Key Admin role ( `roles/iam.serviceAccountKeyAdmin` ) on almost all of the projects in the folder. However, you want the group to gain the ability to create and delete service account keys in one specific project in the folder, `example-prod` .\nInstead of granting the Service Account Key Admin role on each individual project, you create the following deny rule, which denies create and delete permissions in the Service Account Key Admin role to the principals in `eng@example.com` :\n```\n{\u00a0 \"deniedPrincipals\": [\u00a0 \u00a0 \"principalSet://goog/group/eng@example.com\"\u00a0 ],\u00a0 \"deniedPermissions\": [\u00a0 \u00a0 \"iam.googleapis.com/serviceAccountKeys.create\",\u00a0 \u00a0 \"iam.googleapis.com/serviceAccountKeys.delete\"\u00a0 ]}\n```\nThen, you add this deny rule to a deny policy and attach the policy to the project `example-prod` .\nAfter you attach the deny policy to the project, you can grant the Service Account Key Admin role to `eng@example.com` on the `Engineering` folder without letting the group create or delete service account keys in `example-prod` .\nMembers of `eng@example.com` are then able to create and delete service account keys in all projects except `example-prod` . For example, if `izumi@example.com` is a member of `eng@example.com` , they can create and delete keys for service accounts in `example-dev` and `example-test` , but not in `example-prod` .\nHowever, imagine that you actually want a subset of `eng@example.com` to be able to create and delete service account keys in `example-prod` . This subset is represented by the group `eng-prod@example.com` . To allow the members of `eng-prod@example.com` to create and delete service account keys in `example-prod` , you can make the group exempt from the deny rule:\n```\n{\u00a0 \"deniedPrincipals\": [\u00a0 \u00a0 \"principalSet://goog/group/eng@example.com\"\u00a0 ],\u00a0 \"exceptionPrincipals\": [\u00a0 \u00a0 \"principalSet://goog/group/eng-prod@example.com\"\u00a0 ],\u00a0 \"deniedPermissions\": [\u00a0 \u00a0 \"iam.googleapis.com/serviceAccountKeys.create\",\u00a0 \u00a0 \"iam.googleapis.com/serviceAccountKeys.delete\"\u00a0 ]}\n```\nWith this revised deny policy, members of `eng-prod@example.com` can create and delete service account keys in all projects, including `example-prod` . For example, if `charlie@example.com` is a member of `eng-prod@example.com` , they can create and delete keys in `example-dev` , `example-test` , and `example-prod` , even if they are also a member of `eng@example.com` .\n### Blocking access based on tags\nA tag is a key-value pair that can be attached to an organization, folder, or project. You can use deny policies to deny permissions based on tags without adding an IAM Condition to every role grant.\nFor example, imagine that you tag all of your projects as `dev` , `test` , or `prod` . You want only members of `project-admins@example.com` to be able to delete projects that are tagged `prod` .\nTo solve this problem, you create a deny rule that denies the `cloudresourcemanager.googleapis.com/projects.delete` permission to everyone except `project-admins@example.com` for resources that are tagged `prod` :\n```\n{\u00a0 \"displayName\": \"Only project admins can delete production projects.\",\u00a0 \"rules\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"denyRule\": {\u00a0 \u00a0 \u00a0 \u00a0 \"deniedPrincipals\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"principalSet://goog/public:all\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"exceptionPrincipals\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"principalSet://goog/group/project-admins@example.com\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"deniedPermissions\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com/projects.delete\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"denialCondition\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"title\": \u00a0\"Only for prod projects\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"expression\": \"resource.matchTag('12345678/env', 'prod')\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ]}\n```\nThen, you add this deny rule to a deny policy and attach the policy to your organization.\nBecause of this deny rule, you can limit principals' access without adding a condition to their role grants. Instead, you can grant principals roles that contain the `cloudresourcemanager.googleapis.com/projects.delete` permission, and rely on the deny rule to prevent principals outside of `project-admins@example.com` from deleting any projects tagged `prod` .\nFor example, consider two users, `bola@example.com` and `kiran@example.com` . Both users have the Project Deleter role ( `roles/resourcemanager.projectDeleter` ). Additionally, `kiran@example.com` is a member of `project-admins@example.com` . With this deny policy, `bola@example.com` can only delete projects that have the tag `dev` or `test` . `kiran@example.com` can delete all projects, regardless of their tags.## What's next\n- Learn how to [create, update, and delete deny policies](/iam/docs/deny-access) .\n- Find out how to [troubleshoot access issues with deny policies](/iam/docs/troubleshoot-policies) .\n- Review the [permissions that can be denied](/iam/docs/deny-permissions-support) .\n- See the [types of principals](/iam/docs/principal-identifiers#v2) that you can include in deny policies.", "guide": "IAM"}