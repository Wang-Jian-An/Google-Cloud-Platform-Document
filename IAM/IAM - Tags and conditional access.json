{"title": "IAM - Tags and conditional access", "url": "https://cloud.google.com/iam/docs/tags-access-control", "abstract": "# IAM - Tags and conditional access\nThis page describes how to use tags with Identity and Access Management (IAM) to help you control access to your Google Cloud resources.\nTo learn more about tags, see [Tags overview](/resource-manager/docs/tags/tags-overview) .\n[](None)\n", "content": "## Overview of tags\nA tag is a key-value pair that is attached to a [Google Cloud resource](/resource-manager/docs/tags/tags-supported-services#supported_service_resources) . You can [conditionally grant IAM roles](/iam/docs/conditions-overview) or [conditionally deny IAM permissions](/iam/docs/deny-overview) based on whether a resource has a specific tag.\nResources [inherit tag values](/resource-manager/docs/tags/tags-overview#inheritance) from their parent organization, folders, and project. As a result, you can use tags to manage access to any Google Cloud resource.\nThese are some common use cases for managing access with tags:\n- **Development, staging, and production environments.** For example, you could add the tags`environment: dev`to your development environment and`environment: prod`to your production environment.\n- **Component types.** For example, you could add the tags`component: frontend`to front-end resources and`component: batch`to resources for batch processing.\n- **Project names.** For example, if your team is working on a project with the codename Atlas, you could add the tag`project: atlas`to the team's development resources.**Important:** Do not include sensitive information in tags. Sensitive information includes personally identifiable information (PII), such as an individual's name or job title. Tags are not intended to contain sensitive information.\n## Tag definitions and identifiers\nBefore you attach tags to resources, you must define the key for the tag, as well as the values that the tag allows. You can create these definitions at the organization or project level. You use [Resource Manager](/resource-manager/docs) to manage tag definitions. To learn more, see [Creating and defining a new tag](/resource-manager/docs/tags/tags-creating-and-managing#creating) .\nEach tag key and value has a few different identifiers:- A, which is globally unique and can never be reused. For example, a tag  key could have the permanent ID`tagKeys/123456789012`, and a tag value could have  the permanent ID`tagValues/567890123456`.\n- A. The short name for each key must be unique within your organization, and  the short name for each value must be unique for its associated key. For example, a tag key  could have the short name`env`, and a tag value could have the short name`prod`.\n- A, which adds your organization's numeric ID to the short name of a tag  key. For example, a tag key could have the namespaced name`123456789012/env`. [Learn how to get your organization ID](/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id) .As explained on this page, after you attach tags to a resource, you can [write conditions to grant access based on tags](#control-access) . To write a condition, you must choose which type of identifier to use in the condition. Follow these guidelines to choose between them:\n- **To experiment with tags,** consider using the namespaced name (for keys) and the short name (for values). These identifiers are easier to understand and remember, especially as you get started.\n- **If you manage your configuration declaratively,** using a tool such as Terraform, consider using the namespaced name (for keys) and the short name (for values). You can reuse these identifiers over time, which means that a declarative tool can delete and recreate them, and your conditions will continue to work.This approach comes with a tradeoff: Suppose you delete a tag key or value, then create a new key or value with the same name but a different meaning. If your condition refers to the namespaced name or short name, then the condition continues to apply to the new key or value.In some cases, this behavior might cause principals to get access that you did not intend for them to have.\n- **To help minimize risk,** consider using permanent IDs, which can never be reused.Here's why permanent IDs help minimize risk: Suppose you delete a tag key or value, then create a new key or value with the same name but a different meaning. If your condition refers to the permanent ID, then the condition does not apply to the new key or value. As a result, principals are less likely to get access that you did not intend for them to have.One drawback is that if you delete and recreate keys and values, and you want to preserve principals' access, you must also update your allow policies to refer to the new permanent IDs.## Access to tagged resources\nYou can use tags with IAM Conditions to grant a role conditionally, depending on the tags that are attached to or inherited by a resource. If a condition evaluates to `true` , then access is granted; otherwise, access is not granted. To learn more, see the [overview of IAM Conditions](/iam/docs/conditions-overview) .\n**Note:** If a condition checks the tags for a resource, it cannot check any other attributes, such as the resource name or the timestamp for the request.\nThe following sections show examples of condition expressions that check the tags on a resource. The condition calls different functions depending on whether it checks the permanent ID or the short name. To learn more about these functions, see [Resource tags](/iam/docs/conditions-attribute-reference#resource-tags) .\n### Conditions that use permanent IDs\nThis condition grants a role on resources with the tag `tagKeys/123456789012: tagValues/567890123456` :\n```\nresource.matchTagId('tagKeys/123456789012', 'tagValues/567890123456')\n```\nThis condition grants a role on resources that have any tag with the key `tagKeys/123456789012` , regardless of its value:\n```\nresource.hasTagKeyId('tagKeys/123456789012')\n```\nThis condition grants a role on resources that have both the tag `tagKeys/123456789012: tagValues/567890123456` , and any tag that uses the key `tagKeys/987654321098` :\n```\nresource.matchTagId('tagKeys/123456789012', 'tagValues/567890123456') &&\u00a0 \u00a0 resource.hasTagKeyId('tagKeys/987654321098')\n```\n### Conditions that use namespaced names and short names\nThis condition grants a role on resources with the tag `env: prod` , indicating that the resource is in a production environment:\n```\nresource.matchTag('123456789012/env', 'prod')\n```\nThis condition grants a role on resources that have any tag with the key `env` , regardless of its value:\n```\nresource.hasTagKey('123456789012/env')\n```\nThis condition grants a role on resources that have both the tag `env: prod` and any tag that uses the key `project` :\n```\nresource.matchTag('123456789012/env', 'prod') &&\u00a0 \u00a0 resource.hasTagKey('123456789012/project')\n```\n## What's next\n- Learn how to [manage tags and attach tags to resources](/resource-manager/docs/tags/tags-creating-and-managing) .\n- Get details about [checking tags in a condition](/iam/docs/conditions-attribute-reference#resource-tags) .", "guide": "IAM"}