{"title": "IAM - Identities for workloads", "url": "https://cloud.google.com/iam/docs/workload-identities", "abstract": "# IAM - Identities for workloads\nGoogle Cloud provides service accounts to act as identities for workloads in production environments. Instead of granting access to a workload directly, you grant access to a service account, then have the workload use the service account as its identity.\nThere are several ways that you can configure service accounts as identities for workloads. Which methods you can use depends on where your workloads are running.\n", "content": "## Workloads on Google Cloud\nIf you're running workloads on Google Cloud, you can use the following methods to configure identities for your workloads:\n- Attached service accounts\n- Managed workload identities (for workloads that run on Compute Engine only)\n- Workload Identity (for workloads that run on Google Kubernetes Engine only)\n- Service account keys\n### Attached service accounts\nFor some Google Cloud resources, you can specify a user-managed service account that the resource uses as its default identity. This process is known as the service account to the resource, or the service account with the resource.\nWhen code running on the resource accesses Google Cloud services and resources, it uses the service account attached to the resource as its identity. For example, if you [attach a service account to a Compute Engineinstance](/compute/docs/access/service-accounts#associating_a_service_account_to_an_instance) , and the applications on the instance use a [client library](/apis/docs/client-libraries-explained) to call Google Cloud APIs, those applications automatically use the attached service account for authentication and authorization.\nIn most cases, you must attach a service account to a resource when you create that resource. After the resource is created, you cannot change which service account is attached to the resource. Compute Engine instances are an exception to this rule; you can change which service account is attached to an instance as needed.\nTo learn more, see [Attach a service account to a resource](/iam/docs/attach-service-accounts) .\n### Managed workload identities\n**Preview** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section of the [Service Specific Terms](/terms/service-terms#1) . Pre-GA features are available \"as is\" and might have limited support. For more information, see the [launch stage descriptions](/products#product-launch-stages) .For information about access to this release, see the [access request page](https://forms.gle/KC1Lq77gMn3kTtWDA) .\nManaged workload identities let you bind strongly attested identities to your Compute Engine workloads. You can use managed workload identities to authenticate your workloads to other workloads using [mTLS](https://en.wikipedia.org/wiki/Mutual_authentication) , but they cannot be used for authenticating to Google Cloud APIs.\nTo learn more about managed workload identity, see [Managed workload identities overview](/iam/docs/managed-workload-identity) .\nTo learn more about using managed workload identities with Compute Engine workloads, see [Authenticate workloads to other workloads over mTLS](/compute/docs/access/authenticate-workloads-over-mtls) .\n### GKE Workload Identity\nFor workloads running on GKE, Workload Identity allows a Kubernetes service account in your GKE cluster to act as an IAM service account. Pods that use the configured Kubernetes service account automatically use the IAM service account as their identity when accessing Google Cloud APIs. Using Workload Identity lets you assign distinct, fine-grained identities and authorization for each application in your cluster.\nTo learn more about GKE Workload Identity, see [Workload identity federation for GKE](/kubernetes-engine/docs/concepts/workload-identity) .\n### Service account keys\nA service account key lets a workload authenticate as a service account, then use the service account's identity for authorization. Service account keys are a security risk if not managed correctly. You should [ choose a more secure alternative to service account keys](/docs/authentication#auth-decision-tree) whenever possible. If you must authenticate with a service account key, you are responsible for the security of the private key and for other management operations such as [key rotation](/iam/docs/key-rotation) . For more information, see [best practices for managingservice account keys](/iam/docs/best-practices-for-managing-service-account-keys) .\n## External workloads\nIf you're running workloads outside of Google Cloud, you can use the following methods to configure identities for your workloads:\n- Workload identity federation\n- Service account keys\n### Workload identity federation\nWorkload identity federation lets you use credentials from external identity providers like AWS and Azure Active Directory to generate short-lived credentials, which workloads can use to temporarily impersonate service accounts. Workloads can then access Google Cloud resources, using the service account as their identity.\nWorkload identity federation is the preferred way to configure identities for external workloads.\nTo learn more about workload identity federation, see [Workload identityfederation](/iam/docs/workload-identity-federation) .\n### Service account keys\nA service account key lets a workload authenticate as a service account, then use the service account's identity for authorization. Service account keys are a security risk if not managed correctly. You should [ choose a more secure alternative to service account keys](/docs/authentication#auth-decision-tree) whenever possible. If you must authenticate with a service account key, you are responsible for the security of the private key and for other management operations such as [key rotation](/iam/docs/key-rotation) . For more information, see [best practices for managingservice account keys](/iam/docs/best-practices-for-managing-service-account-keys) .\n## Local development\nIf you're developing in a local environment, you can configure workloads to use your user credentials for authentication and authorization. For more information, see [Local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the authentication documentation.\n## What's next\n- Learn how to [set up authentication by using service accounts](/docs/authentication#service-accounts) .\n- Learn how to [set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n- Learn how to [grant service accounts access to resources](/iam/docs/granting-changing-revoking-access) .", "guide": "IAM"}