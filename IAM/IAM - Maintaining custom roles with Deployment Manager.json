{"title": "IAM - Maintaining custom roles with Deployment Manager", "url": "https://cloud.google.com/iam/docs/maintain-custom-roles-deployment-manager", "abstract": "# IAM - Maintaining custom roles with Deployment Manager\n", "content": "## Background\nIdentity and Access Management custom roles enable you to grant granular permissions to user accounts and service accounts. Unlike predefined roles, which are maintained by Google and updated accordingly, custom roles are maintained by your organization as new permissions become available.\nCloud Deployment Manager can make it easier to configure and maintain your custom roles. You can use Deployment Manager to describe roles using configuration files, that can then be checked in to your source control system of choice. Together, Deployment Manager and source control can make it easier to make \"config-as-code\" for:\n- Tracking custom roles as they change over time\n- Promoting custom roles through launch stages as they are tested and validated\n- Automating how roles are deployed throughout your organization## Before you begin\n- Enable the IAM and Cloud Deployment Manager APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com,deploymentmanager.googleapis.com&redirect=https://console.cloud.google.com) \n[](None)\n## Scenarios for maintaining custom roles using Deployment Manager\nConsider the following scenarios that demonstrate the benefits of using Deployment Manager to maintain custom roles:\n- **Controlling access to new permissions:** You have a custom role that contains permissions for a Google Cloud service. The service adds new Beta features and exposes new permissions. Your custom role will not automatically inherit these new permissions -- they must be added manually. Until the new permissions are added to your custom role, users in your organization will not have access to the Beta features. You can use Deployment Manager's configuration files and source control to help audit existing permissions, update your custom roles as necessary, and maintain a revision history.\n- **Role lifecycle management:** You have a new custom role to which you have assigned an`ALPHA`launch stage. After the custom role has been tested and validated, you can use Deployment Manager to update the custom role's configuration and advance it to`BETA`stage without using the Google Cloud console.\n- **Understanding custom roles adoption:** By having more of your organization's custom role definitions in source control, it makes it easier to share, learn from patterns of usage, and enforce access controls across multiple projects.\n[](None)\n### Understanding Deployment Manager configuration files\nDeployment Manager uses three different file types to describe a deployment. Each type is described below:\n- **Configurations** are YAML files that describe resources and their properties. For Identity and Access Management (IAM) custom roles, each YAML file specifies all of the properties for one or more custom roles, such as its name, description, and permissions.\n- **Schemas** specify all possible properties for a given resource and their default values. For IAM custom roles, there are schemas for project-level and organization-level custom roles.\n- **Templates** , which are Jinja or Python files that enhance configurations by allowing you to break down a configuration into reusable parts. For IAM custom roles, there are two provided templates: one for project-level custom roles, and one for organization-level custom roles.\nFor more information about these types, see [Deployment Manager Fundamentals](/deployment-manager/docs/fundamentals) .\n## Before you begin\n[Quickstart](/deployment-manager/docs/manage-cloud-resources-deployment)Once these prerequisite steps have been completed, you can start using Deployment Manager with IAM to maintain your custom roles.\n## Grant permissions to the Google APIs service account\nTo maintain custom roles using Deployment Manager, you must first grant the appropriate permissions to the Google APIs service account. This account is created by default for each organization and project.\n- In the Google Cloud console, go to the **IAM** page. [Go to the IAM page](https://console.cloud.google.com/iam-admin/iam) \n- From the list of principals, locate the principal with the name **GoogleAPIs service agent** .\n- To edit the service account's roles, click the **Edit** edit button, and then add the **Roles > Role Administrator** role.\n- Click **Save** to apply the role.\nNow that the Google APIs service account has been granted the permission to maintain custom roles, you can deploy a sample custom role using Deployment Manager.\n## Deploy custom roles to your project\nAs described in the [section above](#config-files) , Deployment Manager uses a combination of configuration files to describe a deployment. For IAM, consider the following two example files for a project's custom roles:\n**project_custom_role.yaml**\n```\nimports:- path: project_custom_role.jinjaresources:- name: custom-role\u00a0 type: project_custom_role.jinja\u00a0 properties:\u00a0 \u00a0 roleId: myCustomRole\u00a0 \u00a0 title: My Title\u00a0 \u00a0 description: My description.\u00a0 \u00a0 includedPermissions:\u00a0 \u00a0 - iam.roles.get\u00a0 \u00a0 - iam.roles.list\n```\nThis YAML file specifies the properties about a custom role named `custom-role` , which grants permissions to `iam.roles.get` and `iam.roles.list` . Note that it references a **.jinja** file twice; these references use the values provided by the Jinja template as described below.\n**project_custom_role.jinja**\n```\n# Copyright 2017 Google LLC. All rights reserved.# Licensed under the Apache License, Version 2.0 (the \"License\");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at# \u00a0 \u00a0 http://www.apache.org/licenses/LICENSE-2.0# Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an \"AS IS\" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.resources:- name: custom-role\u00a0 type: gcp-types/iam-v1:projects.roles\u00a0 properties:\u00a0 \u00a0 parent: projects/{{ env[\"project\"] }}\u00a0 \u00a0 roleId: {{ properties[\"roleId\"] }}\u00a0 \u00a0 role:\u00a0 \u00a0 \u00a0 title: {{ properties[\"title\"] }}\u00a0 \u00a0 \u00a0 description: {{ properties[\"description\"] }}\u00a0 \u00a0 \u00a0 stage: {{ properties[\"stage\"] }}\u00a0 \u00a0 \u00a0 includedPermissions: {{ properties[\"includedPermissions\"] }}\n```\nThis Jinja file provides a template for a custom role to minimize duplication of the same properties across many roles. Default values are inserted from a **.schema** file if the corresponding YAML file does not specify values for each property.\nTo deploy this custom role with Deployment Manager:\n- Download the contents of [this GitHub repository](https://github.com/GoogleCloudPlatform/deploymentmanager-samples/) to your local machine.\n- In a terminal window, navigate to the`examples/v2/iam_custom_role/jinja`directory in the downloaded repository. It contains the **project_custom_role.yaml** file and the associated Jinja files.\n- Execute the following command to deploy the example custom role, replacing the placeholder value with a deployment name of your choice:```\ngcloud deployment-manager deployments create \\\u00a0 \u00a0your-deployment-name --config project_custom_role.yaml\n```\n- Wait for the operation to complete. The deployment fingerprint and a progress indicator are shown:```\nThe fingerprint of the deployment is PUo2fmKdoFdJqiLViHjT3Q==\nWaiting for create [operation-1513228867042-560460d157ad1-b4ababb8-c6a7dddc]...done.\n```\n- If the operation was successful, you will see the following status message:```\nCreate operation operation-1513228867042-560460d157ad1-b4ababb8-c6a7dddc completed successfully.\nNAME   TYPE        STATE  ERRORS INTENT\ncustom-role gcp-types/iam-v1:projects.roles COMPLETED []\n```## View your deployed custom role\nTo view your custom role in Deployment Manager:\n- In a terminal window, execute the following command:```\ngcloud deployment-manager deployments describe your-deployment-name\n```\n- You will see a description of the deployment, including comprehensive information about its status, any errors, and more.```\nfingerprint: oaJoGesEFYvsAldP2bm5jQ==\nid: '3222872306422524501'\ninsertTime: '2018-01-29T13:40:10.822-08:00'\nmanifest: manifest-1517262010855\nname: your-deployment-name\noperation:\nendTime: '2018-01-29T13:40:26.500-08:00'\nname: operation-1517262010573-563f1172be0c9-ce5f0242-239fe1af\noperationType: insert\nprogress: 100\nstartTime: '2018-01-29T13:40:11.535-08:00'\nstatus: DONE\nuser: id-7201362145@my-example-project.iam.gserviceaccount.com\nNAME   TYPE        STATE  INTENT\ncustom-role gcp-types/iam-v1:projects.roles COMPLETED\n```\n- You can also see the detailed information about the custom role's configuration by retrieving the deployment's **manifest** . In the output from the `describe` command in step 2 above, note the `manifest` ID. Copy this ID, including the `manifest-` prefix, and use it to replace the placeholder value below:```\ngcloud deployment-manager manifests describe your-manifest-id \\\u00a0 \u00a0 --deployment your-deployment-name\n```\n- The manifest contains exhaustive information about the custom role deployment, including the raw contents of the source **project_custom_role.yaml** and **project_custom_role.jinja** files. In particular, note the `resources` block near the bottom of the manifest, which summarizes the details about the custom role:```\n...resources:- name: custom-role\u00a0 properties:\u00a0 \u00a0 description: My description.\u00a0 \u00a0 includedPermissions:\u00a0 \u00a0 - iam.roles.get\u00a0 \u00a0 - iam.roles.list\u00a0 \u00a0 roleId: aCustomRole\u00a0 \u00a0 stage: ALPHA\u00a0 \u00a0 title: My Title\u00a0 resources:\u00a0 - name: custom-role\u00a0 \u00a0 type: gcp-types/iam-v1:projects.roles\u00a0 type: project_custom_role.jinja...\n```\nTo view your custom role in the Google Cloud console:\n- In the Google Cloud console, go to the **IAM** page. [Go to the IAM page](https://console.cloud.google.com/iam-admin/iam) \n- Select a project and click **Open** .\n- On the left menu, click **Roles** .\n- Click the name of the newly created custom role from the list. It should look similar to the screenshot below:", "guide": "IAM"}