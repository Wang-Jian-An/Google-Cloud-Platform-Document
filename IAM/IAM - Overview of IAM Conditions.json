{"title": "IAM - Overview of IAM Conditions", "url": "https://cloud.google.com/iam/docs/conditions-overview", "abstract": "# IAM - Overview of IAM Conditions\nThis page describes the Conditions feature of Identity and Access Management (IAM). You can use IAM Conditions to define and enforce conditional, attribute-based access control for Google Cloud resources.\nWith IAM Conditions, you can choose to grant access to principals only if specified conditions are met. For example, you could grant temporary access to users so they can resolve a production issue, or you could grant access only to employees making requests from your corporate office.\nConditions are specified in the role bindings of a resource's allow policy. When a condition exists, the access request is granted only if the condition expression evaluates to `true` . Each condition expression is a set of logic statements that specify one or more attributes to check.\n**Note:** You cannot use conditions when you grant [basic roles](/iam/docs/understanding-roles#basic) , including Owner (`roles/owner`), Editor (`roles/editor`), and Viewer (`roles/viewer`). Also, you cannot use conditions when you grant roles to all users ( [allUsers](/iam/docs/overview#allusers) ) or all authenticated users ( [allAuthenticatedUsers](/iam/docs/overview#allauthenticatedusers) ).\n", "content": "## Allow policies with conditions\nAllow policies contain one or more [role bindings](/iam/reference/rest/v1/Binding) , which have the following structure:\n```\n\"bindings\": [\u00a0 {\u00a0 \u00a0 \"role\": ...,\u00a0 \u00a0 \"members\": ...,\u00a0 \u00a0 \"condition\": ...\u00a0 },\u00a0 ...]\n```\nThe `condition` object is optional, and each role binding can contain zero or one condition. If a role binding does not have a `condition` object, the principals in that role binding always have the specified role on the resource.\nOnly some resource types [accept conditions in role bindings](/iam/docs/resource-types-with-conditional-roles) . However, you can [grant conditional access to other resource types](/iam/docs/resource-types-with-conditional-roles#accept-no) by granting roles at the organization or project level.\n**Note:** Conditional role bindings do not override role bindings with no conditions. If a principal is bound to a role, and the role binding does not have a condition, then the principal always has that role. Adding the principal to a conditional binding for the same role has no effect.\nThe `condition` object has the following structure:\n```\n\"condition\": {\u00a0 \u00a0 \"title\": ...,\u00a0 \u00a0 \"description\": ...,\u00a0 \u00a0 \"expression\": ...}\n```\nThe condition's `title` is required, but the `description` is optional. Both the title and description are purely informational fields to help you identify and describe the condition.\nThe `expression` field is required. It defines an [attribute-based](#attributes) logic expression using a subset of the [Common Expression Language (CEL)](#cel) . The condition expression can contain multiple statements; each statement evaluates one attribute. Statements are combined using logical operators, following the CEL language specification.\n**Note:** As a best practice, do not add more than 100 conditional role bindings to a single allow policy. If you use a larger number of conditional role bindings, you might exceed the overall size limit for allow policies.\nTo learn how to add, modify, and remove conditional role bindings, see [Managing conditional role bindings](/iam/docs/managing-conditional-policies) .\n### CEL for conditions\nCommon Expression Language, or CEL, is the expression language used to specify an expression in IAM Condition. It is tailored to express attribute-based logic expressions. For more information, see the [CEL spec](https://github.com/google/cel-spec) and its [languagedefinition](https://github.com/google/cel-spec/blob/master/doc/langdef.md) .\nIn IAM Conditions, a subset of CEL is used to make boolean authorization decisions based on attribute data. In general, a condition expression consists of one or more statements that are joined by up to 12 logical operators ( `&&` , `||` , or `!` ). Each statement expresses an attribute-based control rule that applies to the role binding, and ultimately determines whether access is allowed.\nIAM Conditions use the following CEL features:\n- **Variables** : Conditions useto express a given attribute, such as`request.time`(of type Timestamp) or`resource.name`(of type String). These variables are populated with value based on the context at runtime.\n- **Operators** : Every data type, such as Timestamp or String, supports a set ofthat can be used to create a logic expression. Most commonly, operators are used to compare the value contained in a variable with a literal value, such as`resource.service == \"compute.googleapis.com\"`. In this example, if the input value of`resource.service`is`compute.googleapis.com`, then the expression evaluates to`true`.\n- **Functions** : A function is a \"compound\" operator for data types that support more complex operations. In condition expressions, there are predefined functions that can be used with a given data type. For example,`request.path.startsWith(\"/finance\")`uses a String prefix match function, and evaluates to`true`if the value of`request.path`contains a matching prefix, such as \"/finance\".\n- **Logical operators** : Conditions supports three logical operators that can be used to build complex logic expressions from simple expression statements:`&&`,`||`, and`!`. These logical operators make it possible to use multiple input variables in a condition expression. For example:`request.time.getFullYear() < 2020 && resource.service == \"compute.googleapis.com\"`joins two simple statements, and requires both statements to be met in order to produce a`true`overall evaluation result.\nFor more information about supported variables, operators, and functions, see the [attribute reference](/iam/docs/conditions-attribute-reference) .\n## Condition attributes\nCondition attributes are based on the requested resource\u2014for example, its type or name\u2014or on details about the request\u2014for example, its timestamp or destination IP address.\n**Note:** To use conditions in the allow policy for a Cloud Storage bucket, you must [enable uniform bucket-level access](/storage/docs/using-uniform-bucket-level-access#set) on the bucket. If you cannot enable uniform bucket-level access, you can add conditional role grants to the allow policy for a higher-level resource, such as the project that contains the bucket. The bucket inherits the role grants from the project.\n### Resource attributes\nYou can use resource attributes to write conditions that evaluate the resource in the access request. The attributes that you can evaluate include the following:\n- The resource type\n- The resource name\n- The Google Cloud service being used\n- The tags attached to the resource\nFor a complete list of resource attributes, see the [resource attributes reference](/iam/docs/conditions-resource-attributes) .\nTo learn how to use resource attributes to configure resource-based access, see [Configuring resource-based access](/iam/docs/configuring-resource-based-access) .\n[](None)\nAllow access to Compute Engine VM instances, but no other type of resource:\n```\nresource.type == \"compute.googleapis.com/Instance\"\n```\nAllow access to Cloud Storage resources, but no other service's resources:\n```\nresource.service == \"storage.googleapis.com\"\n```\nAllow access only to Cloud Storage objects inside a specific bucket:\n```\nresource.type == \"storage.googleapis.com/Object\" &&resource.name.startsWith(\"projects/_/buckets/exampleco-site-assets/\")\n```\nAllow access to Google Cloud resources that have the tag `env: prod` :\n```\nresource.matchTag('123456789012/env', 'prod')\n```\n### Request attributes\nYou can use request attributes to write conditions that evaluate details about the request, such as the following:\n- The access level\n- The date and time\n- The destination IP address and port (for IAP TCP tunneling)\n- The expected URL host/path (for IAP)\n[](None)\nIn the following example, the organization defines an access level, `CorpNet` , that limits access to the range of IP addresses where traffic enters and exits a corporate network. Access is allowed only if the request meets the `CorpNet` access level:\n```\n\"accessPolicies/199923665455/accessLevels/CorpNet\" inrequest.auth.access_levels\n```\nYour organization defines access levels based on attributes of the request, such as origin IP address, device attributes, the time of day, and more. For more details, see the [Access Context Manager documentation](/access-context-manager/docs) .\nAllow a user to grant and revoke only the Billing Account Administrator ( `roles/billing.admin` ) role:\n```\napi.getAttribute('iam.googleapis.com/modifiedGrantsByRole', [])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0.hasOnly(['roles/billing.admin'])\n```\nTo learn more about using API attributes to limit role granting, see [Setting limits on granting roles](/iam/docs/setting-limits-on-granting-roles) .\n[](None)\nAllow access temporarily until a specified expiration date/time:\n```\nrequest.time < timestamp(\"2021-01-01T00:00:00Z\")\n```\nAllow access only during specified working hours, based on the time zone for Berlin, Germany:\n```\nrequest.time.getHours(\"Europe/Berlin\") >= 9 &&request.time.getHours(\"Europe/Berlin\") <= 17 &&// Days of the week range from 0 to 6, where 0 == Sunday and 6 == Saturday.request.time.getDayOfWeek(\"Europe/Berlin\") >= 1 &&request.time.getDayOfWeek(\"Europe/Berlin\") <= 5\n```\nAllow access only for a specified month and year, based on the time zone for Berlin, Germany:\n```\nrequest.time.getFullYear(\"Europe/Berlin\") == 2020request.time.getMonth(\"Europe/Berlin\") < 6\n```\nTo specify a timestamp, use [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. To specify a time zone, use the identifiers in the [IANA Time Zone Database](https://www.iana.org/time-zones) .\nFor more details about date/time expressions, see the [CEL specification](https://github.com/google/cel-spec/blob/master/doc/langdef.md#timezones) .\nTo learn how to use date/time expressions to configure temporary access, see [Configuring temporary access](/iam/docs/configuring-temporary-access) .\n[](None)\nAllow access to an internal destination IP address or port number:\n```\ndestination.ip == \"14.0.0.1\"destination.ip != \"127.0.0.1\"destination.port == 22destination.port > 21 && destination.port <= 23\n```\nAllow access for a principal if the request is not creating a forwarding rule, or if the request is creating a forwarding rule for an internal Google Cloud load balancer:\n```\n!compute.isForwardingRuleCreationOperation() || (\u00a0 compute.isForwardingRuleCreationOperation() &&\u00a0 compute.matchLoadBalancingSchemes([\u00a0 \u00a0 'INTERNAL', 'INTERNAL_MANAGED', 'INTERNAL_SELF_MANAGED'\u00a0 ]))\n```\n[](None)\nAllow access only for certain subdomains or URL paths in the request:\n```\nrequest.host == \"hr.example.com\"request.host.endsWith(\".example.com\")request.path == \"/admin/payroll.js\"request.path.startsWith(\"/admin\")\n```\nFor details about load-balancing schemes, see [Using IAM Conditions on Google Cloud load balancers](/load-balancing/docs/access-control/iam-conditions#conditions-iam) .\n[](None)\nAllow access if the request is made during a specific time, matching a resource name prefix, with the desired access level, and for a specific resource type:\n```\nrequest.time > timestamp(\"2018-08-03T16:00:00-07:00\") &&request.time < timestamp(\"2018-08-03T16:05:00-07:00\") &&((resource.name.startsWith(\"projects/project-123/zones/us-east1-b/instances/dev\") ||\u00a0(resource.name.startsWith(\"projects/project-123/zones/us-east1-b/instances/prod\") &&\u00a0 \"accessPolicies/34569256/accessLevels/CorpNet\" in request.auth.access_levels)) ||\u00a0resource.type != \"compute.googleapis.com/Instance\")\n```\n## What's next\n- Get details about the [condition attributes](/iam/docs/conditions-attribute-reference) that you can use to manage access.\n- Learn more about [allow policies](/iam/docs/policies) .\n- Find [resource types that accept conditional role bindings](/iam/docs/resource-types-with-conditional-roles) .", "guide": "IAM"}