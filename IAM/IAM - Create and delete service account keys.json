{"title": "IAM - Create and delete service account keys", "url": "https://cloud.google.com/iam/docs/keys-create-delete", "abstract": "# IAM - Create and delete service account keys\nThis page explains how to create and delete service account keys using the Google Cloud console, the [Google Cloud CLI](/sdk/gcloud) , the [Identity and Access Management API](/iam/docs/reference/rest) , or one of the [Google Cloud Client Libraries](/apis/docs/cloud-client-libraries) .\n**Note:** If you need to access resources from a workload that runs outside of Google Cloud, such as on Amazon Web Services (AWS) or Microsoft Azure, consider using [workload identity federation](/iam/docs/workload-identity-federation) instead of service account keys. Federation lets your workloads access resources directly, using a short-lived access token, and eliminates the maintenance and security burden associated with service account keys.\n", "content": "## Before you begin\n- Enable the IAM API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com&redirect=https://console.cloud.google.com) \n- Set up authentication.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.You can use the gcloud CLI samples on this page from  either of the following development environments:- **Cloud Shell** : To use an online terminal with the   gcloud CLI already set up, activate Cloud Shell.At the bottom of this page, a Cloud Shell session starts    and displays a command-line prompt. It can take a few seconds for    the session to initialize.\n- **Local shell** : To use the gcloud CLI in a local   development environment, [install](/sdk/docs/install) and [initialize](/sdk/docs/initializing) the gcloud CLI.\nTo use the C++ samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the .NET samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Go samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Java samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Python samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```\n- Understand [service account credentials](/iam/docs/service-account-creds) .\n### Required roles\nTo get the permissions that you need to create and delete service account keys,   ask your administrator to grant you the [Service Account Key Admin ](https://cloud.google.com/iam/docs/understanding-roles#iam.serviceAccountKeyAdmin) ( `roles/iam.serviceAccountKeyAdmin` ) IAM role on the project, or the service account whose keys you want to manage.    For more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nYou might also be able to get  the required permissions through [custom  roles](/iam/docs/creating-custom-roles) or other [predefined  roles](/iam/docs/understanding-roles) .\nFor more information, see [Service Accounts roles](/iam/docs/understanding-roles#service-accounts-roles) .\nIAM basic roles also contain permissions to manage service account keys. You should not grant basic roles in a production environment, but you can grant them in a development or test environment.\n## Create a service account key\nTo use a service account from outside of Google Cloud, such as on other platforms or on-premises, you must first establish the identity of the service account. Public/private key pairs provide a secure way of accomplishing this goal. When you create a service account key, the public portion is stored on Google Cloud, while the private portion is available only to you. For more information about public/private key pairs, see [Service account keys](/iam/docs/service-account-creds#key-types) .\n**Note:** You can create service account keys in JSON or [PKCS#12 (P12)](https://wikipedia.org/wiki/PKCS_12) format. P12 service account keys are not recommended unless they are necessary for backwards compatibility. The following examples use JSON format.\nYou can create a [service account key](/iam/reference/rest/v1/projects.serviceAccounts.keys) using the Google Cloud console, the gcloud CLI, the [serviceAccounts.keys.create()](/iam/reference/rest/v1/projects.serviceAccounts.keys/create) method, or one of the [client libraries](/apis/docs/cloud-client-libraries) . A service account can have up to 10 keys.\nBy default, service account keys never expire. You can use an [organization policy constraint](/resource-manager/docs/organization-policy/restricting-service-accounts#limit_key_expiry) to specify the length of time for which a service account key is valid. For details, see [Expiry times for user-managed keys](/iam/docs/service-account-creds#key-expiry) .\nIn the examples below, `` is the name of your service account, and `` is the ID of your Google Cloud project. You can retrieve the `` `@` `` `.iam.gserviceaccount.com` string from the [Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts/) page in the Google Cloud console.\n**Note:** After you create a key, you might need to wait for 60 seconds or more before you perform another operation with the key. If you try to perform an operation with the key immediately after you create the key, and you receive an error, you can [retry the request with exponential backoff](/iam/docs/retry-strategy) .\n- In the Google Cloud console, go to the **Service accounts** page. [Go to Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts?walkthrough_id=iam--create-service-account-keys&start_index=1#step_index=1) school The remaining steps will appear automatically in the Google Cloud console.\n- Select a project.\n- Click the email address of the service account that you want to create a key for.\n- Click thetab.\n- Click the **Add key** drop-down menu, then select **Create new key** .\n- Select **JSON** as the **Key type** and click **Create** .\nClicking **Create** downloads a service account key file. After you download the key file, you cannot download it again.\nThe downloaded key has the following format, where `` is the private portion of the public/private key pair:\n```\n{\u00a0 \"type\": \"service_account\",\u00a0 \"project_id\": \"PROJECT_ID\",\u00a0 \"private_key_id\": \"KEY_ID\",\u00a0 \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nPRIVATE_KEY\\n-----END PRIVATE KEY-----\\n\",\u00a0 \"client_email\": \"SERVICE_ACCOUNT_EMAIL\",\u00a0 \"client_id\": \"CLIENT_ID\",\u00a0 \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\u00a0 \"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\u00a0 \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\u00a0 \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/SERVICE_ACCOUNT_EMAIL\"}\n```\nMake sure to store the key file securely, because it can be used to authenticate as your service account. You can move and rename this file however you would like.\nYou can use service account key files to [authenticate an application as aservice account](/docs/authentication/provide-credentials-adc#wlif-key) .Execute the [gcloud iam service-accounts keys create](/sdk/gcloud/reference/iam/service-accounts/keys/create) command to create service account keys.\nReplace the following values:- ``: The path to a new output file for the private key\u2014for example,`~/sa-private-key.json`.\n- ``: The name of the service account to create a key for.\n- ``: Your Google Cloud project ID.\n```\ngcloud iam service-accounts keys create KEY_FILE \\\n --iam-account=SA_NAME@PROJECT_ID.iam.gserviceaccount.com\n```\nOutput:\n```\ncreated key [e44da1202f82f8f4bdd9d92bc412d1d8a837fa83] of type [json] as\n[/usr/home/username/KEY_FILE] for\n[SA_NAME@PROJECT_ID.iam.gserviceaccount.com]\n```\nThe service account key file is now downloaded to your machine. After you download the key file, you cannot download it again.\nThe downloaded key has the following format, where `` is the private portion of the public/private key pair:\n```\n{\u00a0 \"type\": \"service_account\",\u00a0 \"project_id\": \"PROJECT_ID\",\u00a0 \"private_key_id\": \"KEY_ID\",\u00a0 \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nPRIVATE_KEY\\n-----END PRIVATE KEY-----\\n\",\u00a0 \"client_email\": \"SERVICE_ACCOUNT_EMAIL\",\u00a0 \"client_id\": \"CLIENT_ID\",\u00a0 \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\u00a0 \"token_uri\": \"https://oauth2.googleapis.com/token\",\u00a0 \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\u00a0 \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/SERVICE_ACCOUNT_EMAIL\"}\n```\nMake sure to store the key file securely, because it can be used to authenticate as your service account. You can move and rename this file however you would like.\nYou can use service account key files to [authenticate an application as aservice account](/docs/authentication/provide-credentials-adc#wlif-key) .To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C++ API reference documentation](/cpp/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/googleapis/google-cloud-cpp/blob/HEAD/google/cloud/iam/samples/iam_samples.cc) \n```\nnamespace iam = ::google::cloud::iam_admin_v1;return [](std::string const& name) {\u00a0 iam::IAMClient client(iam::MakeIAMConnection());\u00a0 auto response = client.CreateServiceAccountKey(\u00a0 \u00a0 \u00a0 name,\u00a0 \u00a0 \u00a0 google::iam::admin::v1::ServiceAccountPrivateKeyType::\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TYPE_GOOGLE_CREDENTIALS_FILE,\u00a0 \u00a0 \u00a0 google::iam::admin::v1::ServiceAccountKeyAlgorithm::KEY_ALG_RSA_2048);\u00a0 if (!response) throw std::move(response).status();\u00a0 std::cout << \"ServiceAccountKey successfully created: \"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 << response->DebugString() << \"\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 << \"Please save the key in a secure location, as they cannot \"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"be downloaded later\\n\";\u00a0 return response->name();}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C# API reference documentation](https://developers.google.com/api-client-library/dotnet/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/ServiceAccountKeys/ServiceAccountKeysCreate.cs) \n```\nusing System;using System.Text;using Google.Apis.Auth.OAuth2;using Google.Apis.Iam.v1;using Google.Apis.Iam.v1.Data;public partial class ServiceAccountKeys{\u00a0 \u00a0 public static ServiceAccountKey CreateKey(string serviceAccountEmail)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 var credential = GoogleCredential.GetApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .CreateScoped(IamService.Scope.CloudPlatform);\u00a0 \u00a0 \u00a0 \u00a0 var service = new IamService(new IamService.Initializer\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HttpClientInitializer = credential\u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 var key = service.Projects.ServiceAccounts.Keys.Create(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new CreateServiceAccountKeyRequest(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"projects/-/serviceAccounts/\" + serviceAccountEmail)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .Execute();\u00a0 \u00a0 \u00a0 \u00a0 // The PrivateKeyData field contains the base64-encoded service account key\u00a0 \u00a0 \u00a0 \u00a0 // in JSON format.\u00a0 \u00a0 \u00a0 \u00a0 // TODO(Developer): Save the below key (jsonKeyFile) to a secure location.\u00a0 \u00a0 \u00a0 \u00a0 // \u00a0You cannot download it later.\u00a0 \u00a0 \u00a0 \u00a0 byte[] valueBytes = System.Convert.FromBase64String(key.PrivateKeyData);\u00a0 \u00a0 \u00a0 \u00a0 string jsonKeyContent = Encoding.UTF8.GetString(valueBytes);\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"Key created successfully\");\u00a0 \u00a0 \u00a0 \u00a0 return key;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](https://godoc.org/google.golang.org/genproto/googleapis/iam/admin/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/snippets/service_account_keys_create.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 // \"encoding/base64\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 iam \"google.golang.org/api/iam/v1\")// createKey creates a service account key.func createKey(w io.Writer, serviceAccountEmail string) (*iam.ServiceAccountKey, error) {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 service, err := iam.NewService(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"iam.NewService: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resource := \"projects/-/serviceAccounts/\" + serviceAccountEmail\u00a0 \u00a0 \u00a0 \u00a0 request := &iam.CreateServiceAccountKeyRequest{}\u00a0 \u00a0 \u00a0 \u00a0 key, err := service.Projects.ServiceAccounts.Keys.Create(resource, request).Do()\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"Projects.ServiceAccounts.Keys.Create: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // The PrivateKeyData field contains the base64-encoded service account key\u00a0 \u00a0 \u00a0 \u00a0 // in JSON format.\u00a0 \u00a0 \u00a0 \u00a0 // TODO(Developer): Save the below key (jsonKeyFile) to a secure location.\u00a0 \u00a0 \u00a0 \u00a0 // You cannot download it later.\u00a0 \u00a0 \u00a0 \u00a0 // jsonKeyFile, _ := base64.StdEncoding.DecodeString(key.PrivateKeyData)\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Key created successfully\")\u00a0 \u00a0 \u00a0 \u00a0 return key, nil}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](https://developers.google.com/api-client-library/java/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/CreateServiceAccountKey.java) \n```\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.api.services.iam.v1.Iam;import com.google.api.services.iam.v1.IamScopes;import com.google.api.services.iam.v1.model.CreateServiceAccountKeyRequest;import com.google.api.services.iam.v1.model.ServiceAccountKey;import com.google.auth.http.HttpCredentialsAdapter;import com.google.auth.oauth2.GoogleCredentials;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.Base64;import java.util.Collections;public class CreateServiceAccountKey {\u00a0 // Creates a key for a service account.\u00a0 public static String createKey(String projectId, String serviceAccountName) {\u00a0 \u00a0 // String projectId = \"my-project-id\";\u00a0 \u00a0 // String serviceAccountName = \"my-service-account-name\";\u00a0 \u00a0 Iam service = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 service = initService();\u00a0 \u00a0 } catch (IOException | GeneralSecurityException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to initialize service: \\n\" + e);\u00a0 \u00a0 \u00a0 return null;\u00a0 \u00a0 }\u00a0 \u00a0 // Construct the service account email.\u00a0 \u00a0 // You can modify the \".iam.gserviceaccount.com\" to match the service account name in which\u00a0 \u00a0 // you want to create the key.\u00a0 \u00a0 // See, https://cloud.google.com/iam/docs/creating-managing-service-account-keys?hl=en#creating\u00a0 \u00a0 String serviceAccountEmail = serviceAccountName + \"@\" + projectId + \".iam.gserviceaccount.com\";\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 ServiceAccountKey key =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .projects()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .serviceAccounts()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .keys()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .create(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"projects/-/serviceAccounts/\" + serviceAccountEmail,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new CreateServiceAccountKeyRequest())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .execute();\u00a0 \u00a0 \u00a0 // The privateKeyData field contains the base64-encoded service account key\u00a0 \u00a0 \u00a0 // in JSON format.\u00a0 \u00a0 \u00a0 // TODO(Developer): Save the below key (jsonKeyFile) to a secure location.\u00a0 \u00a0 \u00a0 // \u00a0You cannot download it later.\u00a0 \u00a0 \u00a0 String jsonKeyFile = new String(Base64.getDecoder().decode(key.getPrivateKeyData()));\u00a0 \u00a0 \u00a0 System.out.println(\"Key created successfully\");\u00a0 \u00a0 \u00a0 String keyName = key.getName();\u00a0 \u00a0 \u00a0 return keyName.substring(keyName.lastIndexOf(\"/\") + 1).trim();\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to create service account key: \\n\" + e);\u00a0 \u00a0 \u00a0 return null;\u00a0 \u00a0 }\u00a0 }\u00a0 private static Iam initService() throws GeneralSecurityException, IOException {\u00a0 \u00a0 // Use the Application Default Credentials strategy for authentication. For more info, see:\u00a0 \u00a0 // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\u00a0 \u00a0 GoogleCredentials credential =\u00a0 \u00a0 \u00a0 \u00a0 GoogleCredentials.getApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\u00a0 \u00a0 // Initialize the IAM service, which can be used to send requests to the IAM API.\u00a0 \u00a0 Iam service =\u00a0 \u00a0 \u00a0 \u00a0 new Iam.Builder(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GoogleNetHttpTransport.newTrustedTransport(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GsonFactory.getDefaultInstance(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new HttpCredentialsAdapter(credential))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setApplicationName(\"service-account-keys\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 return service;\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](https://developers.google.com/api-client-library/python/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/service_account_keys.py) \n```\nimport osfrom google.oauth2 import service_accountimport googleapiclient.discovery \u00a0# type: ignoredef create_key(service_account_email: str) -> None:\u00a0 \u00a0 \"\"\"Creates a key for a service account.\"\"\"\u00a0 \u00a0 credentials = service_account.Credentials.from_service_account_file(\u00a0 \u00a0 \u00a0 \u00a0 filename=os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"],\u00a0 \u00a0 \u00a0 \u00a0 scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\u00a0 \u00a0 )\u00a0 \u00a0 service = googleapiclient.discovery.build(\"iam\", \"v1\", credentials=credentials)\u00a0 \u00a0 key = (\u00a0 \u00a0 \u00a0 \u00a0 service.projects()\u00a0 \u00a0 \u00a0 \u00a0 .serviceAccounts()\u00a0 \u00a0 \u00a0 \u00a0 .keys()\u00a0 \u00a0 \u00a0 \u00a0 .create(name=\"projects/-/serviceAccounts/\" + service_account_email, body={})\u00a0 \u00a0 \u00a0 \u00a0 .execute()\u00a0 \u00a0 )\u00a0 \u00a0 # The privateKeyData field contains the base64-encoded service account key\u00a0 \u00a0 # in JSON format.\u00a0 \u00a0 # TODO(Developer): Save the below key {json_key_file} to a secure location.\u00a0 \u00a0 # \u00a0You cannot download it again later.\u00a0 \u00a0 # import base64\u00a0 \u00a0 # json_key_file = base64.b64decode(key['privateKeyData']).decode('utf-8')\u00a0 \u00a0 if not key[\"disabled\"]:\u00a0 \u00a0 \u00a0 \u00a0 print(\"Created json key\")\n```The ` [projects.serviceAccounts.keys.create](/iam/docs/reference/rest/v1/projects.serviceAccounts.keys/create) ` method creates a key for a service account.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The name of the service account that you want to create a key for.\n- ``: Optional. The key algorithm to use for  the key. The default, which is subject to change, is a 2,048-bit RSA key. For a list  of all possible values, see the [ServiceAccountKeyAlgorithm reference](/iam/docs/reference/rest/v1/projects.serviceAccounts.keys#ServiceAccountKeyAlgorithm) .\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/SA_NAME@PROJECT_ID.iam.gserviceaccount.com/keys\n```\nRequest JSON body:\n```\n{\n \"keyAlgorithm\": \"KEY_ALGORITHM\"\n}\n```\nTo send your request, expand one of these options:\nThe response contains a key for your service account. The returned key has the following format, where `` is the private portion of the public/private key pair, encoded in base64.\n```\n{\n \"name\": \"projects/PROJECT_ID/serviceAccounts/SERVICE_ACCOUNT_EMAIL/keys/KEY_ID\",\n \"privateKeyType\": \"TYPE_GOOGLE_CREDENTIALS_FILE\",\n \"privateKeyData\": \"ENCODED_PRIVATE_KEY\",\n \"validAfterTime\": \"DATE\",\n \"validBeforeTime\": \"DATE\",\n \"keyAlgorithm\": \"KEY_ALG_RSA_2048\"\n}\n```\nTo create a key file that you can use to authenticate as the service account, decode the private key data and save it in a file:\nRun the following command:\n```\necho 'ENCODED_PRIVATE_KEY' | base64 --decode > PATH\n```\nReplace `` with the path of the file that you want to save the key to. Use the `.json` file extension.\nRun the following command:\n```\necho 'ENCODED_PRIVATE_KEY' | base64 --decode > PATH\n```\nReplace `` with the path of the file that you want to save the key to. Use the `.json` file extension.- Save the encoded private key data ( `` ) in a file.\n- Use `certutil` to decode the file:```\ncertutil -decode ENCODED_FILE DECODED_FILE\n```Replace the following values:- ``: the path to the file containing the encoded private key data.\n- ``: the path of the file that you want to save the key to. Use the`.json`file extension.Make sure to store the key data securely, because it can be used to authenticate as your service account.\nYou can use service account key files to [authenticate an application as aservice account](/docs/authentication/provide-credentials-adc#wlif-key) .\n## Delete a service account key\nDeleting a service account key permanently prevents you from using the key to authenticate with Google APIs.\nYou cannot undelete a deleted key. Before you delete a key, we recommend that you [disable the key](/iam/docs/keys-disable-enable#disabling) , then wait until you are sure that the key is no longer needed. You can then delete the key.\nAs a best practice, rotate your service account keys regularly. To learn more about rotating service account keys, see [Service account key rotation](/iam/docs/key-rotation) .\n**Important:** Deleting a service account key does not revoke short-lived credentials that were issued based on the key. To revoke a compromised short-lived credential, you must [disable or delete the service account](/iam/docs/service-accounts-disable-enable#disabling) that the credential represents. If you do so, any workload that uses the service account will immediately lose access to your resources.\n- In the Google Cloud console, go to the **Service accounts** page. [Go to Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts?walkthrough_id=iam--delete-service-account-keys&start_index=1#step_index=1) school The remaining steps will appear automatically in the Google Cloud console.\n- Select a project.\n- On the **Service accounts** page, click the email address of the service account whose key you want to delete.\n- Click the **Keys** tab.\n- From the list of keys, click **Delete** deletefor each key you'd like to delete.\nExecute the [gcloud iam service-accounts keys delete](/sdk/gcloud/reference/iam/service-accounts/keys/delete) command to delete service account keys.\nReplace the following values:- ``: The ID of the key to delete. To find the key's ID, [list all keys for the service account](/iam/docs/keys-list-get#list-keys) , identify the key that you want to delete, and then copy its ID.\n- ``: The name of the service account that the key belongs to.\n- ``: Your Google Cloud project ID.\n```\ngcloud iam service-accounts keys delete KEY_ID \\\n --iam-account=SA_NAME@PROJECT_ID.iam.gserviceaccount.com\n```\nOutput:\n```\nDeleted key [KEY_ID] for service account\n[SA_NAME@PROJECT_ID.iam.gserviceaccount.com]\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C++ API reference documentation](/cpp/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/googleapis/google-cloud-cpp/blob/HEAD/google/cloud/iam/samples/iam_samples.cc) \n```\nnamespace iam = ::google::cloud::iam_admin_v1;[](std::string const& name) {\u00a0 iam::IAMClient client(iam::MakeIAMConnection());\u00a0 auto response = client.DeleteServiceAccountKey(name);\u00a0 if (!response.ok()) throw std::runtime_error(response.message());\u00a0 std::cout << \"ServiceAccountKey successfully deleted.\\n\";}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C# API reference documentation](https://developers.google.com/api-client-library/dotnet/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/ServiceAccountKeys/ServiceAccountKeysDelete.cs) \n```\nusing System;using Google.Apis.Auth.OAuth2;using Google.Apis.Iam.v1;using Google.Apis.Iam.v1.Data;public partial class ServiceAccountKeys{\u00a0 \u00a0 public static void DeleteKey(string fullKeyName)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 var credential = GoogleCredential.GetApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .CreateScoped(IamService.Scope.CloudPlatform);\u00a0 \u00a0 \u00a0 \u00a0 var service = new IamService(new IamService.Initializer\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HttpClientInitializer = credential\u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 service.Projects.ServiceAccounts.Keys.Delete(fullKeyName).Execute();\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"Deleted key: \" + fullKeyName);\u00a0 \u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](https://godoc.org/google.golang.org/genproto/googleapis/iam/admin/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/snippets/service_account_keys_delete.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 iam \"google.golang.org/api/iam/v1\")// deleteKey deletes a service account key.func deleteKey(w io.Writer, fullKeyName string) error {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 service, err := iam.NewService(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"iam.NewService: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 _, err = service.Projects.ServiceAccounts.Keys.Delete(fullKeyName).Do()\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Projects.ServiceAccounts.Keys.Delete: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Deleted key: %v\", fullKeyName)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](https://developers.google.com/api-client-library/java/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/DeleteServiceAccountKey.java) \n```\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.api.services.iam.v1.Iam;import com.google.api.services.iam.v1.IamScopes;import com.google.auth.http.HttpCredentialsAdapter;import com.google.auth.oauth2.GoogleCredentials;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.Collections;public class DeleteServiceAccountKey {\u00a0 // Deletes a service account key.\u00a0 public static void deleteKey(String projectId, String serviceAccountName,\u00a0 \u00a0 \u00a0 String serviceAccountKey) {\u00a0 \u00a0 // String projectId = \"my-project-id\";\u00a0 \u00a0 // String serviceAccountName = \"my-service-account-name\";\u00a0 \u00a0 // String serviceAccountKey = \"key-name\";\u00a0 \u00a0 Iam service = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 service = initService();\u00a0 \u00a0 } catch (IOException | GeneralSecurityException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to initialize service: \\n\" + e);\u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 }\u00a0 \u00a0 // Construct the service account email.\u00a0 \u00a0 // You can modify the \".iam.gserviceaccount.com\" to match the service account name in which\u00a0 \u00a0 // you want to delete the key.\u00a0 \u00a0 // See, https://cloud.google.com/iam/docs/creating-managing-service-account-keys?hl=en#deleting\u00a0 \u00a0 String serviceAccountEmail = serviceAccountName + \"@\" + projectId + \".iam.gserviceaccount.com\";\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 String keyToDelete = String.format(\"projects/-/serviceAccounts/%s/keys/%s\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 serviceAccountEmail, serviceAccountKey);\u00a0 \u00a0 \u00a0 // Then you can delete the key\u00a0 \u00a0 \u00a0 service.projects().serviceAccounts().keys().delete(keyToDelete).execute();\u00a0 \u00a0 \u00a0 System.out.println(\"Deleted key: \" + keyToDelete);\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to delete service account key: \\n\" + e);\u00a0 \u00a0 }\u00a0 }\u00a0 private static Iam initService() throws GeneralSecurityException, IOException {\u00a0 \u00a0 // Use the Application Default Credentials strategy for authentication. For more info, see:\u00a0 \u00a0 // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\u00a0 \u00a0 GoogleCredentials credential =\u00a0 \u00a0 \u00a0 \u00a0 GoogleCredentials.getApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\u00a0 \u00a0 // Initialize the IAM service, which can be used to send requests to the IAM API.\u00a0 \u00a0 Iam service =\u00a0 \u00a0 \u00a0 \u00a0 new Iam.Builder(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GoogleNetHttpTransport.newTrustedTransport(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GsonFactory.getDefaultInstance(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new HttpCredentialsAdapter(credential))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setApplicationName(\"service-account-keys\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 return service;\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](https://developers.google.com/api-client-library/python/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/service_account_keys.py) \n```\nimport osfrom google.oauth2 import service_accountimport googleapiclient.discovery \u00a0# type: ignoredef delete_key(full_key_name: str) -> None:\u00a0 \u00a0 \"\"\"Deletes a service account key.\"\"\"\u00a0 \u00a0 credentials = service_account.Credentials.from_service_account_file(\u00a0 \u00a0 \u00a0 \u00a0 filename=os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"],\u00a0 \u00a0 \u00a0 \u00a0 scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\u00a0 \u00a0 )\u00a0 \u00a0 service = googleapiclient.discovery.build(\"iam\", \"v1\", credentials=credentials)\u00a0 \u00a0 service.projects().serviceAccounts().keys().delete(name=full_key_name).execute()\u00a0 \u00a0 print(\"Deleted key: \" + full_key_name)\n```The ` [projects.serviceAccounts.keys.delete](/iam/docs/reference/rest/v1/projects.serviceAccounts.keys/delete) ` method deletes a service account key.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The name of the service account whose key you want to delete.\n- ``: The ID of the key that you want to delete. To find the key's  ID, [list all keys for the service account](#list-keys) , identify the key that you  want to delete, and then copy its ID from the end of the`name`field. The key's ID  is everything after`keys/`.\nHTTP method and URL:\n```\nDELETE https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/SA_NAME@PROJECT_ID.iam.gserviceaccount.com/keys/KEY_ID\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n}\n```\n## What's next\n- Learn how to [list and get service account keys](/iam/docs/keys-list-get) .\n- Learn how to [upload your own public service account keys](/iam/docs/keys-upload) .\n- Understand the [best practices for managing service accountkeys](/iam/docs/best-practices-for-managing-service-account-keys) .\n- Learn about [alternatives to service account keys for authentication](/docs/authentication#auth-decision-tree) .", "guide": "IAM"}