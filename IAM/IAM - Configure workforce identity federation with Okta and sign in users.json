{"title": "IAM - Configure workforce identity federation with Okta and sign in users", "url": "https://cloud.google.com/iam/docs/workforce-sign-in-okta", "abstract": "# IAM - Configure workforce identity federation with Okta and sign in users\nThis guide shows you how configure workforce identity federation using Okta as an identity provider (IdP), manage access, and sign in users to access Google Cloud services that [support workforce identity federation](/iam/docs/federated-identity-supported-services) .\n", "content": "## Before you begin\n- You must have a Google Cloud organization set up.\n- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- For sign-in, your IdP must provide signed authentication information: OIDC IdPs must provide a JWT, and SAML IdP responses must be signed.\n- To receive important information about changes to your organization or Google Cloud products, you must provide [Essential Contacts](/resource-manager/docs/managing-notification-contacts) . For more information, see the [Workforce Identity Federation overview](/iam/docs/workforce-identity-federation#essential-contacts) .## Required roles\nTo get the permissions that you need to configure workforce identity federation,   ask your administrator to grant you the [IAM Workforce Pool Admin ](https://cloud.google.com/iam/docs/understanding-roles#iam.workforcePoolAdmin) ( `roles/iam.workforcePoolAdmin` ) IAM role on the organization.    For more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nYou might also be able to get  the required permissions through [custom  roles](/iam/docs/creating-custom-roles) or other [predefined  roles](/iam/docs/understanding-roles) .\nAlternatively, the IAM Owner ( `roles/owner` ) basic role also includes permissions to configure identity federation. You should not grant basic roles in a production environment, but you can grant them in a development or test environment.\n## Create a workforce identity pool\n**    Preview     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .To create the workforce identity pool, do the following:- In the Google Cloud console, go to the **Workforce Identity Pools** page: [Go to Workforce Identity Pools](https://console.cloud.google.com/iam-admin/workforce-identity-pools) \n- Click **Create pool** and do the following:- In **Name** , enter the name of the pool. **Pool ID** is automatically derived from the name as you type.\n- Optional: To update the ID, click **Edit** .\n- Optional: In **Description** , enter a description of the pool.\n- **Session duration** is set by default. To enter a custom session duration, click **Edit** . Session duration determines how long the Google Cloud access tokens, [console (federated)](/iam/docs/workforce-identity-federation#console-federated) sign-in sessions, and gcloud CLI sign-in sessions from this workforce pool are valid. The duration must be greater than 15 minutes (900s) and less than 12 hours (43200s). If session duration is not set, it defaults to a duration of one hour (3600s).\n- To create the pool in the enabled state, make sure that **Enabled Pool** is on.\n- To create the workforce identity pool, click **Next** .\nTo create the workforce identity pool, run the following command:\n```\ngcloud iam workforce-pools create WORKFORCE_POOL_ID \\\u00a0 \u00a0 --organization=ORGANIZATION_ID \\\u00a0 \u00a0 --description=\"DESCRIPTION\" \\\u00a0 \u00a0 --session-duration=SESSION_DURATION \\\u00a0 \u00a0 --location=global\n```\nReplace the following:- ``: an ID that you choose to represent your Google Cloud workforce pool. For information on formatting the ID, see the [Query parameters](/iam/docs/reference/rest/v1/locations.workforcePools.providers/create#query-parameters) section in the API documentation.\n- ``: the numeric organization ID of your Google Cloud organization.\n- ``: a workforce identity pool description.\n- ``: the session duration, which determines how long the Google Cloud access tokens, [console (federated)](/iam/docs/workforce-identity-federation#console-federated) sign-in sessions, and gcloud CLI sign-in sessions from this workforce pool are valid. The duration must be greater than 15 minutes (900s) and less than 12 hours (43200s). If session duration is not set, it defaults to a duration of one hour (3600s).\n **Tip:** Run `gcloud iam workforce-pools create --help` to find other parameters you can customize for this command.\n## Create an Okta app integration\nThis section provides the steps to create an Okta app integration using the Okta Admin Console. For additional details, see [Create custom app integrations](https://help.okta.com/en/prod/Content/Topics/Apps/Apps_App_Integration_Wizard.htm) .\n**Note:** In this guide, you create a custom attribute called `department` to demonstrate attribute mapping. This task is for illustrative purposes only.\nWorkforce pools support federation using both OIDC and SAML protocols.\nRefer to Okta's [OIDC](https://help.okta.com/en/prod/Content/Topics/Apps/Apps_App_Integration_Wizard_OIDC.htm) and [SAML](https://help.okta.com/en/prod/Content/Topics/Apps/Apps_App_Integration_Wizard_SAML.htm) integration guide for more details. The basic configuration is described in this section.\nTo create an Okta app integration that uses the OIDC protocol, perform the following steps:- Sign in to the Okta Admin Console.\n- Go to **Applications > Applications** .\n- To begin configuring the app integration, do the following:- Click **Create App Integration** .\n- In **Sign-in method** , select **OIDC - OpenID Connect** .\n- In **Application type** , select an application type; for example, **Web Application** .\n- To create the app, click **Next** .\n- In **App integration name** , enter a name for your app.\n- In the **Grant type** section, select the **Implicit (hybrid)** checkbox.\n- In the **Sign-in redirect URIs** section, in the text field, enter a redirect URL. Your users are redirected to this URL after they successfully sign in. If you are configuring access to the [console (federated)](/iam/docs/workforce-identity-federation#google_cloud_workforce_identity_federation_console) , use the following URL format:```\nhttps://auth.cloud.google/signin-callback/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/WORKFORCE_PROVIDER_ID\n```Replace the following:- ``: the ID of the workforce pool that you created earlier in this guide.\n- ``: a workforce identity provider ID of your choice; for example:`okta-oidc-provider`. For information on formatting the ID, see the [Query parameters](/iam/docs/reference/rest/v1/locations.workforcePools.providers/create#query-parameters) section in the API documentation.\n- Select the **Skip group assignment for now** checkbox.\n- To save the app integration, click **Save** .\n- [Assign an app integration to a user.](https://help.okta.com/en-us/Content/Topics/Provisioning/lcm/lcm-assign-app-user.htm) \n- Optional: To add custom attributes for an Okta user profile, do the following:- In **Data Type** , select`string`.\n- In **Display name** , enter`Department`.\n- In **Variable name** , enter`department`.\n- To save the mapping, click **Save** .\nTo learn more about adding custom attributes, see [Add custom attributes to an Okta user profile](https://help.okta.com/en-us/Content/Topics/users-groups-profiles/usgp-add-custom-user-attributes.htm) .\n- Optional: To create mappings for the attributes that are sent in the OIDC token, in **Directory** , click **Profile Editor** , and do the following:- Find the OIDC application that you created earlier in this guide.\n- Click **Mappings** .\n- Select the **Okta User to App** tab.\n- In the **Okta User User Profile** tab, in an available combo box, enter`department`. Okta auto-completes to`user.department`.\n- To save the mappings, click **Save Mappings** . For more details, refer to [Add attribute mapping](https://help.okta.com/en-us/Content/Topics/users-groups-profiles/usgp-map-attributes.htm) .\nTo learn more about mappings, see refer to [Map Okta attributes to app attributes in the Profile Editor](https://help.okta.com/en-us/Content/Topics/users-groups-profiles/usgp-map-attributes.htm) .\n- Optional: To configure a groups claim, do the following:- If you use an Org Authorization Server, do the following:- Go to **Applications** > **Applications** \n- Select the OpenID Connect client application that you created earlier in this section.\n- Go to the **Sign On** tab\n- In the **OpenID Connect ID Token** section, click **Edit** .\n- In the **Groups claim type** section, you can select either of the following options:- Select **Expression** .\n- Select **Matches regex** and enter`.*`.\n- To save the groups claim, click **Save** .\n- When you create the workforce identity pool provider later in this guide, add`groups`as an additional scope to request the groups claim from Okta for web single sign-on. This step is only required if you use the console (federated) or gcloud CLI browser-based sign-in flow.\n- If you use a Custom Authorization Server, do the following:- In the Admin Console, from the **Security** menu, select **API** .\n- Select the custom authorization server that you want to configure.\n- Go to the **Claims** tab and click **Add Claim** .\n- Enter a name for the claim. For this example, name it`groups`.\n- In your claim, in **Include in token type** , select **ID Token** and select **Always** .\n- Select **Groups** as the **Value type** .\n- In the Filter drop-down box, select **Matches regex** and then enter the following expression as the Value:`.*`\n- Click **Create** .\nFor more details on groups claims, refer to [Add a Groups claim](https://developer.okta.com/docs/guides/customize-tokens-groups-claim/main/) .\nTo create an Okta app integration that uses the SAML protocol, perform the following steps:- Sign in to the Okta Admin Console.\n- Go to **Applications > Applications** .\n- Click **Create App Integration** .\n- In **Sign-in method** , select **SAML 2.0** and click **Next** .\n- Enter a name for your app and click **Next** to proceed to the **Configure SAML** options.\n- In **Single Sign On URL** , enter a redirect URL. This is the URL users are redirected to after they successfully sign in. If you are configuring access to the console, use the following URL format.```\nhttps://auth.cloud.google/signin-callback/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/WORKFORCE_PROVIDER_ID\n```\n- Enter the **Audience URI** ( `SP Entity ID` ). The ID is formatted as follows:```\nhttps://iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/WORKFORCE_PROVIDER_ID\n```Replace the following:- ``: the ID of the workforce pool that you created earlier in this guide\n- ``: a workforce identity provider ID of your choice; for example:`okta-saml-provider`\nFor information on formatting the ID, see the [Query parameters](/iam/docs/reference/rest/v1/locations.workforcePools.providers/create#query-parameters) section in the API documentation.\n- Optional: Use Attribute Statements to specify any custom attributes that you want to send in the SAML assertion. After setup, these attributes can be used in Google Cloud to create access management policies or in the [attribute_condition](/iam/docs/workforce-identity-federation#attribute-conditions) ; for example, in this guide you map the department as follows:| Name  | Value   |\n|:-----------|:----------------|\n| department | user.department |Optional: To add the groups claim, used later in this guide, see [How to pass a user's group membership in a SAML assertion](https://support.okta.com/help/s/article/How-to-pass-a-user-s-group-membership-in-a-SAML-Assertion-from-Okta) .\n- Finish creating the Okta app integration.## Create a workforce identity pool provider\nThis section describes how to create a [workforce identity pool provider](/iam/docs/workforce-identity-federation#workforce-identity-pool-providers) to enable your IdP users to access Google Cloud. You can configure the provider to use either the OIDC or SAML protocol.\n### Create an OIDC workforce pool provider\nTo create a workforce identity pool provider for your Okta app integration, using the OIDC protocol, do the following:\n- To get the client ID for your Okta app integration, do the following:- Go to your Okta app integration.\n- Click the **General** tab.\n- Copy the contents of the **Client ID** field.\n- To create an OIDC workforce identity pool provider for web-based sign-in, do the following:- In Okta, do the following:- In **Client authentication** , select **Client secret** .\n- In the **Client Secrets** table, locate the secret and click **Copy** .\n- In the Google Cloud console, to create an OIDC provider that uses [authorization code flow](/iam/docs/workforce-identity-federation#oidc-flow-types) , do the following:- In the Google Cloud console, go to the **Workforce Identity Pools** page: [Go to Workforce Identity Pools](https://console.cloud.google.com/iam-admin/workforce-identity-pools) \n- In the **Workforce Identity Pools** table, select the pool for which you want to create the provider.\n- In the **Providers** table, click **Add Provider** .\n- In **Select a protocol** , select **Open ID Connect (OIDC)** .\n- In **Create a pool provider** , do the following:- In **Name** , enter a name for the provider.\n- In **Issuer (URL)** , enter the issuer URI. The OIDC issuer URI must be in a valid URI format and start with`https`; for example,`https://example.com/oidc`.\n- Enter the **Client ID** , the OIDC client ID that is registered with your OIDC IdP; the ID must match the`aud`claim of the JWT that is issued by your IdP.\n- To create a provider that is enabled, make sure **Enabled Provider** is on.\n- Click **Continue** .\n- In **Response type** do the following. Response type is used only for a web-based single-sign-on flow.- In **Response type** , select **Code** .\n- In **Client secret** , enter the client secret from your IdP.\n- In **Assertion claims behavior** , select either of the following:- **User info and ID token** \n- **Only ID token** \n- Click **Continue** .\n- In **Configure provider** , you can configure an attribute mapping and an attribute condition. To create an [attribute mapping](/iam/docs/workforce-identity-federation#attribute-mappings) , do the following. You can provide either the IdP field name or a [CEL-formatted](/iam/docs/workforce-identity-federation#attribute-conditions) expression that returns a string.- Required: In **OIDC 1** , enter the subject from the IdP; for example,`assertion.sub`.\n- Optional: To add additional attribute mappings, do the following:- Click **Add mapping** .\n- In **Google n** , whereis a number, enter one of the [Google Cloud-supported keys](/iam/docs/workforce-identity-federation#attribute-mappings) .\n- In the corresponding **OIDC n** field, enter the name of the IdP-specific field to map, in CEL format.\n- To create an attribute condition, do the following:- Click **Add condition** .\n- In **Attribute Conditions** , enter a condition in [CEL format](/iam/docs/workforce-identity-federation#attribute-conditions) ; for example,`assertion.subject.endsWith('@example.com')`when the value of`subject`mapped earlier contains an email address that ends with`@example.com`.\n- To create the provider, click **Submit** .- In the Google Cloud Google Cloud console, do the following:- In the Google Cloud console, go to the **Workforce Identity Pools** page: [Go to Workforce Identity Pools](https://console.cloud.google.com/iam-admin/workforce-identity-pools) \n- In the **Workforce Identity Pools** table, select the pool for which you want to create the provider.\n- In the **Providers** table, click **Add Provider** .\n- In **Select a protocol** , select **Open ID Connect (OIDC)** .\n- In **Create a pool provider** , do the following:- In **Name** , enter a name for the provider.\n- In **Issuer (URL)** , enter the issuer URI. The OIDC issuer URI must be in a valid URI format and start with`https`; for example,`https://example.com/oidc`.\n- Enter the **Client ID** , the OIDC client ID that is registered with your OIDC IdP; the ID must match the`aud`claim of the JWT that is issued by your IdP.\n- To create a provider that is enabled, make sure **Enabled Provider** is on.\n- Click **Continue** .\n- In **Response type** do the following. Response type is used only for a web-based single-sign-on flow.- In **Response type** , select **ID token** .\n- Click **Continue** .\n- In **Configure provider** , you can configure an attribute mapping and an attribute condition. To create an [attribute mapping](/iam/docs/workforce-identity-federation#attribute-mappings) , do the following. You can provide either the IdP field name or a [CEL-formatted](/iam/docs/workforce-identity-federation#attribute-conditions) expression that returns a string.- Required: In **OIDC 1** , enter the subject from the IdP; for example, `assertion.sub` .\n- Optional: To add additional attribute mappings, do the following:- Click **Add mapping** .\n- In **Google n** , whereis a number, enter one of the [Google Cloud-supported keys](/iam/docs/workforce-identity-federation#attribute-mappings) .\n- In the corresponding **OIDC n** field, enter the name of the IdP-specific field to map, in CEL format.\n- To create an attribute condition, do the following:- Click **Add condition** .\n- In **Attribute Conditions** , enter a condition in [CEL format](/iam/docs/workforce-identity-federation#attribute-conditions) ; for example,`assertion.subject.endsWith('@example.com')`when the value of`subject`mapped earlier contains an email address that ends with`@example.com`.\n- To create the provider, click **Submit** .\nIn Okta, do the following:\n- In **Client authentication** , select **Client secret** .\n- In the **Client Secrets** table, locate the secret and click **Copy** .\nIn Google Cloud, to create an OIDC provider that uses [authorization code flow](/iam/docs/workforce-identity-federation#oidc-flow-types) for web sign-in, run the following command:\n```\ngcloud iam workforce-pools providers create-oidc PROVIDER_ID \\\n --workforce-pool=WORKFORCE_POOL_ID \\\n --display-name=\"DISPLAY_NAME\" \\\n --description=\"DESCRIPTION\" \\\n --issuer-uri=\"ISSUER_URI\" \\\n --client-id=\"OIDC_CLIENT_ID\" \\ --client-secret-value=\"OIDC_CLIENT_SECRET\" \\\n --web-sso-response-type=\"code\" \\\n --web-sso-assertion-claims-behavior=\"merge-user-info-over-id-token-claims\" \\\n --web-sso-additional-scopes=\"WEB_SSO_ADDITIONAL_SCOPES\" \\\n --attribute-mapping=\"ATTRIBUTE_MAPPING\" \\\n --attribute-condition=\"ATTRIBUTE_CONDITION\" \\\n --jwk-json-path=\"JWK_JSON_PATH\" \\\n --location=global\n```\nReplace the following:- ``: A unique provider ID. The prefix`gcp-`is reserved and can't be used in a pool or provider ID.\n- ``: The workforce identity pool ID  to connect your IdP to.\n- ``: An optional user-friendly display  name for the provider; for example,`idp-eu-employees`.\n- ``: An optional workforce provider  description; for example,`IdP for Partner Example Organization employees`.\n- ``: The OIDC issuer URI, in a  valid URI format, that starts with`https`; for example,`https://example.com/oidc`. Note: For security reasons,``must use the HTTPS scheme.\n- ``: The OIDC client ID that is  registered with your OIDC IdP; the ID must match the`aud`claim  of the JWT that is issued by your IdP.\n- ``: The OIDC client secret.\n- ``: Optional additional scopes to send to the OIDC IdP  for console (federated) or gcloud CLI browser-based sign-in; for example,`groups`to request the groups claim from Okta if using Okta's org authorization server.\n- ``: An [attribute mapping](/iam/docs/workforce-identity-federation#attribute-mappings) ;  for example:```\ngoogle.subject=assertion.sub,google.groups=assertion.group1,attribute.costcenter=assertion.costcenter\n```This example maps the IdP attributes`subject`,`assertion.group1`, and`costcenter`in the OIDC assertion to`google.subject`,`google.groups`, and`attribute.costcenter`attributes, respectively.\n- ``: An [attribute condition](/iam/docs/workforce-identity-federation#attribute-conditions) ;  for example,`assertion.subject.endsWith('@example.com')`when the value of`subject`mapped earlier contains an email address that ends with`@example.com`.\n- ``: An optional path to a [locally uploaded OIDC JWKs](/iam/docs/workforce-identity-federation#json-web-keys) .  If this parameter isn't supplied, Google Cloud instead uses your IdP's `/.well-known/openid-configuration` path to  source the JWKs containing the public keys. For more information about locally uploaded OIDC JWKs, see [manage OIDC JWKs](/iam/docs/manage-workforce-identity-pools-providers#manage-oidc-keys) .\n **Note:** Local OIDC JWKs can be uploaded through [implicit flow or code flow](/iam/docs/workforce-identity-federation#oidc-flow-types) , but can only be used in [programmatic flow](/iam/docs/workforce-obtaining-short-lived-credentials) , in which you directly call the STS `/token` endpoint with a credential from the third-party IdP to exchange for a Google Cloud access token for your workforce pool.\nIn the command response,\nis the name of the pool; for example,\n`locations/global/workforcePools/enterprise-example-organization-employees`\n.\nTo create an OIDC provider that uses the [implicit flow](/iam/docs/workforce-identity-federation#oidc-flow-types) for web sign-in, run the following command:\n```\ngcloud iam workforce-pools providers create-oidc PROVIDER_ID \\\n --workforce-pool=WORKFORCE_POOL_ID \\\n --display-name=\"DISPLAY_NAME\" \\\n --description=\"DESCRIPTION\" \\\n --issuer-uri=\"ISSUER_URI\" \\\n --client-id=\"OIDC_CLIENT_ID\" \\\n --web-sso-response-type=\"id-token\" \\\n --web-sso-assertion-claims-behavior=\"only-id-token-claims\" \\\n --web-sso-additional-scopes=\"WEB_SSO_ADDITIONAL_SCOPES\" \\\n --attribute-mapping=\"ATTRIBUTE_MAPPING\" \\\n --attribute-condition=\"ATTRIBUTE_CONDITION\" \\\n --jwk-json-path=\"JWK_JSON_PATH\" \\\n --location=global\n```\nReplace the following:- ``: A unique provider ID. The prefix`gcp-`is reserved and can't be used in a pool or provider ID.\n- ``: The workforce identity pool ID  to connect your IdP to.\n- ``: An optional user-friendly display  name for the provider; for example,`idp-eu-employees`.\n- ``: An optional workforce provider  description; for example,`IdP for Partner Example Organization employees`.\n- ``: The OIDC issuer URI, in a  valid URI format, that starts with`https`; for example,`https://example.com/oidc`. Note: For security reasons,``must use the HTTPS scheme.\n- ``: The OIDC client ID that is  registered with your OIDC IdP; the ID must match the`aud`claim  of the JWT that is issued by your IdP.\n- ``: Optional additional scopes to send to the OIDC IdP  for console (federated) or gcloud CLI browser-based sign-in; for example,`groups`to request the groups claim from Okta if using Okta's org authorization server.\n- ``: An [attribute mapping](/iam/docs/workforce-identity-federation#attribute-mappings) ;  for example:```\ngoogle.subject=assertion.sub,google.groups=assertion.group1,attribute.costcenter=assertion.costcenter\n```This example maps the IdP attributes`subject`,`assertion.group1`, and`costcenter`in the OIDC assertion to`google.subject`,`google.groups`, and`attribute.costcenter`attributes, respectively.\n- ``: An [attribute condition](/iam/docs/workforce-identity-federation#attribute-conditions) ;  for example,`assertion.subject.endsWith('@example.com')`when the value of`subject`mapped earlier contains an email address that ends with`@example.com`.\n- ``: An optional path to a [locally uploaded OIDC JWKs](/iam/docs/workforce-identity-federation#json-web-keys) .  If this parameter isn't supplied, Google Cloud instead uses your IdP's `/.well-known/openid-configuration` path to  source the JWKs containing the public keys. For more information about locally uploaded OIDC JWKs, see [manage OIDC JWKs](/iam/docs/manage-workforce-identity-pools-providers#manage-oidc-keys) .\n **Note:** Local OIDC JWKs can be uploaded through [implicit flow or code flow](/iam/docs/workforce-identity-federation#oidc-flow-types) , but can only be used in [programmatic flow](/iam/docs/workforce-obtaining-short-lived-credentials) , in which you directly call the STS `/token` endpoint with a credential from the third-party IdP to exchange for a Google Cloud access token for your workforce pool.\nIn the command response,\nis the name of the pool; for example,\n`locations/global/workforcePools/enterprise-example-organization-employees`\n.### Create a SAML workforce pool provider- In your SAML IdP, register a new application for Google Cloud workforce identity federation.\n- Set the audience for SAML assertions. It is usually the `SP Entity ID` field in your IdP configuration. You must set it to the following URL:```\nhttps://iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID\n```\n- If you plan to set up user access to the console, in your SAML IdP, set the redirect URL or Assertion Consumer Service (ACS) URL field to the following URL:```\nhttps://auth.cloud.google/signin-callback/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/WORKFORCE_PROVIDER_ID\n```See [Set up user access to the console](/iam/docs/workforce-console-sso) for more details on configuring console sign-in.\n- In Google Cloud, create a SAML workforce identity pool provider using your IdP's SAML metadata document. You can download the SAML metadata XML document from your IdP. The document must include at least the following:- A SAML entity ID for your IdP.\n- The single-sign-on URL for your IdP.\n- At least one signing public key. See [Key requirements](#key-requirements) later in this guide for details on signing keys.\nTo configure the SAML provider using the Google Cloud console, do the following:- In the Google Cloud console, go to the **Workforce Identity Pools** page: [Go to Workforce Identity Pools](https://console.cloud.google.com/iam-admin/workforce-identity-pools) \n- In the **Workforce Identity Pools** table, select the pool for which you want to create the provider.\n- In the **Providers** table, click **Add Provider** .\n- In **Select a protocol** , select **SAML** .\n- In **Create a pool provider** do the following:- In **Name** , enter a name for the provider.\n- Optional: In **Description** , enter a description for the provider.\n- In **IDP metadata file (XML)** , select the metadata XML file that you generated earlier in this guide.\n- Ensure that **Enabled provider** is enabled.\n- Click **Continue** .\n- In **Configure provider** , do the following:- In **Attribute mapping** , enter a CEL expression for `google.subject` .\n- Optional: To enter other mappings, click **Add mapping** and enter other mappings\u2014for example:```\ngoogle.subject=assertion.subject,google.groups=assertion.attributes['https://example.com/aliases'],attribute.costcenter=assertion.attributes.costcenter[0]\n```This example maps the IdP attributes`assertion.subject`,`assertion.attributes['https://example.com/aliases']`, and`assertion.attributes.costcenter[0]`to the Google Cloud attributes`google.subject`,`google.groups`, and`google.costcenter`, respectively.\n- Optional: To add an attribute condition, click **Add condition** and enter a CEL expression representing an attribute condition. For example, to limit the `ipaddr` attribute to a certain IP range you can set the condition `assertion.attributes.ipaddr.startsWith('98.11.12.')` . This example condition ensures that only users with an IP address that starts with `98.11.12.` can sign in using this workforce provider.\n- Click **Continue** .\n- To create the provider, click **Submit** .\nTo create a workforce identity pool provider for your Okta app integration, using the SAML protocol, do the following:- To save the SAML metadata for your Okta app, do the following:- Go to your Okta App.\n- Click the **Sign On** tab.\n- In the **SAML Signing Certificates** section, click **Actions > View IdP metadata** for the active certificate.\n- In the new page that opens, copy the XML metadata.\n- Save the metadata as a local XML file.\n- To create a workforce provider for your Okta app, run the following command:```\ngcloud iam workforce-pools providers create-saml WORKFORCE_PROVIDER_ID \\\u00a0 \u00a0 --workforce-pool=\"WORKFORCE_POOL_ID\" \\\u00a0 \u00a0 --attribute-mapping=\"ATTRIBUTE_MAPPING\" \\\u00a0 \u00a0 --attribute-condition=\"ATTRIBUTE_CONDITION\" \\\u00a0 \u00a0 --idp-metadata-path=\"XML_METADATA_PATH\" \\\u00a0 \u00a0 --location=\"global\"\n```Replace the following:- ``: The workforce provider ID that you created earlier in this guide.\n- ``: The workforce pool ID you created earlier in this guide.\n- `` : An [attribute mapping](/iam/docs/workforce-identity-federation#attribute-mappings) \u2014for example:```\ngoogle.subject=assertion.subject,google.groups=assertion.attributes['https://example.com/aliases'],attribute.costcenter=assertion.attributes.costcenter[0]\n```This example maps the IdP attributes`assertion.subject`,`assertion.attributes['https://example.com/aliases']`, and`assertion.attributes.costcenter[0]`to the Google Cloud attributes`google.subject`,`google.groups`, and`google.costcenter`, respectively.\n- `` : An optional [attribute condition](/iam/docs/workforce-identity-federation#attribute-conditions) . For example, to limit the `ipaddr` attribute to a certain IP range you can set the condition `assertion.attributes.ipaddr.startsWith('98.11.12.')` . This example condition ensures that only users with an IP address that starts with `98.11.12.` can sign in using this workforce provider.\n- `` : The path to the XML-formatted metadata file for the Okta App that you created earlier in this guide.\nThe prefix `gcp-` is reserved and can't be used in a pool or provider ID.\n### Optional: Accept encrypted SAML assertions from your IdP\nTo enable your SAML 2.0 IdP to produce encrypted SAML assertions that can be accepted by workforce identity federation, do the following:- In workforce identity federation, do the following:\n- Create an asymmetric key pair for your workforce identity pool provider.\n- Download a certificate file that contains the public key.\n- Configure your SAML IdP to use the public key to encrypt SAML assertions it issues.\n- In your IdP, do the following:\n- Enable assertion encryption, also known as token encryption.\n- Upload the public key that you created in workforce identity federation.\n- Confirm that your IdP produces encrypted SAML assertions.Note that, even with SAML encryption provider keys configured, workforce identity federation can still process a plaintext assertion.This section guides you through creating an asymmetric key pair that enables workforce identity federation to accept encrypted SAML assertions.Google Cloud uses the private key to decrypt the SAML assertions that your IdP issues. To create an asymmetric key pair for use with SAML encryption, run the following command. To learn more, see [Supported SAML encryption algorithms](#supported-saml-encryption-algorithms) .```\ngcloud iam workforce-pools providers keys create KEY_ID \\\u00a0 \u00a0 --workforce-pool WORKFORCE_POOL_ID \\\u00a0 \u00a0 --provider PROVIDER_ID \\\u00a0 \u00a0 --location global \\\u00a0 \u00a0 --use encryption \\\u00a0 \u00a0 --spec KEY_SPECIFICATION\n```Replace the following:- ``: a key name of your choice\n- ``: the pool ID\n- ``: the provider ID\n- ``: the key specification, which can be one of`rsa-2048`,`rsa-3072`, and`rsa-4096`.\nAfter the key pair is created, to download the public key into a certificate file, execute the following command. Only workforce identity federation has access to the private key.```\ngcloud iam workforce-pools providers keys describe KEY_ID \\\u00a0 \u00a0 --workforce-pool WORKFORCE_POOL_ID \\\u00a0 \u00a0 --provider PROVIDER_ID \\\u00a0 \u00a0 --location global \\\u00a0 \u00a0 --format \"value(keyData.key)\" \\\u00a0 \u00a0 > CERTIFICATE_PATH\n```Replace the following:- ``: the key name\n- ``: the pool ID\n- ``: the provider ID\n- ``: the path to write the certificate to\u2014for example,`saml-certificate.cer`or`saml-certificate.pem`\nTo configure Okta to encrypt SAML assertions, do the following:- Go to your Okta dashboard and sign in.\n- Go to **Applications** > **Applications** .\n- Click on your app.\n- In the **General** tab, in the **SAML Settings** section,  click **Edit** .\n- Click **Next** to view **SAML Settings** .\n- Click **Show advanced settings** .\n- In **SAML Settings** , do the following:\n- In either of **Response** (preferred) or **Assertion Signature** , select`Signed`.\n- In **Signature Algorithm** and **Digest Algorithm** , select any option.\n- Set the following values:\n- **Assertion Encryption:** Encrypted.\n- **Encryption Algorithm:** Any algorithm that you choose.\n- **Encryption Certificate:** Upload the certificate file that you generated earlier in this guide.\n- To save the configuration, click **Next** and then **Finish** \nAfter you configure your IdP to encrypt SAML assertions, we recommend that you check to make sure that the assertions it generates are actually encrypted. Even with SAML assertion encryption configured, workforce identity federation can still process plaintext assertions.To delete SAML encryption keys run the following command:```\n\u00a0 gcloud iam workforce-pools providers keys delete KEY_ID \\\u00a0 \u00a0 \u00a0 --workforce-pool WORKFORCE_POOL_ID \\\u00a0 \u00a0 \u00a0 --provider PROVIDER_ID \\\u00a0 \u00a0 \u00a0 --location global\n```Replace the following:- ``: the key name\n- ``: the pool ID\n- ``: the provider ID\nWorkforce identity federation supports the following key transport algorithms:- [http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p](http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p) \n- [http://www.w3.org/2009/xmlenc11#rsa-oaep\"](http://www.w3.org/2009/xmlenc11#rsa-oaep) \n- [http://www.w3.org/2001/04/xmlenc#rsa-1_5\"](http://www.w3.org/2001/04/xmlenc#rsa-1_5) \nWorkforce identity federation supports the following block encryption algorithms:- [http://www.w3.org/2001/04/xmlenc#aes128-cbc](http://www.w3.org/2001/04/xmlenc#aes128-cbc) \n- [http://www.w3.org/2001/04/xmlenc#aes192-cbc](http://www.w3.org/2001/04/xmlenc#aes192-cbc) \n- [http://www.w3.org/2001/04/xmlenc#aes256-cbc](http://www.w3.org/2001/04/xmlenc#aes256-cbc) \n- [http://www.w3.org/2009/xmlenc11#aes128-gcm](http://www.w3.org/2009/xmlenc11#aes128-gcm) \n- [http://www.w3.org/2009/xmlenc11#aes256-gcm](http://www.w3.org/2009/xmlenc11#aes256-gcm) \n## Manage access to Google Cloud resources\nThis section provides an example that shows you how to manage access to Google Cloud resources by workforce identity federation users.\nIn this example, you grant an Identity and Access Management (IAM) role on a sample project. Users can then [sign in](#sign_in) and use this project to access Google Cloud products.\n**Note:** The sample project used here can be different from the project you used to set up workforce identity federation.\nYou can manage IAM roles for single identities, group of identities, or an entire pool. For more information, see [Represent workforce identity pool users in IAM policies](/iam/docs/configuring-workforce-identity-federation#representing-workforce-users) .\n**Note:** You must grant the Browser role ( `roles/browser` ) to all workforce identity federation users that access the Google Cloud Workforce Identity Federation console, also known as the console (federated). You don't need to grant the role if the user accesses Google Cloud resources through the Google Cloud CLI.\nTo grant the Storage Admin ( `roles/storage.admin` ) role to a single identity for project `` , run the following command:\n```\ngcloud projects add-iam-policy-binding TEST_PROJECT_ID \\\u00a0 \u00a0 --role=\"roles/storage.admin\" \\\u00a0 \u00a0 --member=\"principal://iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/subject/SUBJECT_VALUE\"\n```\nReplace the following:- ``: ID of the project\n- ``: the workforce identity pool ID\n- ``: the user identity\nTo grant the Storage Admin ( `roles/storage.admin` ) role to all identities within a specific department for project `` , run the following command:\n```\ngcloud projects add-iam-policy-binding TEST_PROJECT_ID \\\u00a0 \u00a0 --role=\"roles/storage.admin\" \\\u00a0 \u00a0 --member=\"principalSet://iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/attribute.department/DEPARTMENT_VALUE\"\n```\nReplace the following:- ``: ID of the project\n- ``: the workforce pool ID\n- ``: the mapped`attribute.department`value\nTo grant the Storage Admin ( `roles/storage.admin` ) role to all identities within a specific group for project `` , run the following command:\n```\ngcloud projects add-iam-policy-binding TEST_PROJECT_ID \\\u00a0 \u00a0 --role=\"roles/storage.admin\" \\\u00a0 \u00a0 --member=\"principalSet://iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/group/GROUP_ID\"\n```\nReplace the following:- ``: ID of the project\n- ``: the workforce pool ID\n- ``: a group in the mapped`google.groups`claim.## Sign in and test access\nIn this section, you sign in as a workforce identity pool user and test that you have access to a Google Cloud product.\n### Sign in\nThis section shows you how to sign in as a federated user and access Google Cloud resources.\nTo sign in to the Google Cloud Workforce Identity Federation console, also known as the console (federated), do the following:- Go to the console (federated) sign-in page. [Go to console (federated)](https://auth.cloud.google/signin?continueUrl=https://console.cloud.google/) \n- Enter the provider name, which is formatted as follows:```\nlocations/global/workforcePools/WORKFORCE_POOL_ID/providers/WORKFORCE_PROVIDER_ID\n```- Enter user credentials in the Okta app integration, if prompted.\n- If you start an IdP-initiated sign-in, use the following URL in **SAMLSettings** for the nested [Default RelayState](https://saml-doc.okta.com/SAML_Docs/Configure-SAML-2.0-for-Org2Org.html) parameter: `https://console.cloud.google/` .\nTo sign in to gcloud CLI using a browser-based sign-in flow, do the following:\n **Create a configuration file** \nTo create the login configuration file, run the following command. You can optionally activate the file as the default for the gcloud CLI by using the [--activate flag](/sdk/gcloud/reference/iam/workforce-pools/create-login-config) .\n```\ngcloud iam workforce-pools create-login-config \\\u00a0 \u00a0 locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --output-file=LOGIN_CONFIG_FILE\n```\nReplace the following:- ``: the workforce pool ID\n- ``: the provider ID\n- ``: a path to the configuration  file that you specify\u2014for example,`login.json`\nThe file contains contains the endpoints used by the gcloud CLI to enable the browser-based authentication flow and set the audience to the provider you created earlier in this guide. The file doesn't contain confidential information.\nThe output looks similar to the following:\n```\n{\u00a0 \"type\": \"external_account_authorized_user_login_config\",\u00a0 \"audience\": \"//iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID\",\u00a0 \"auth_url\": \"https://auth.cloud.google/authorize\",\u00a0 \"token_url\": \"https://sts.googleapis.com/v1/oauthtoken\",\u00a0 \"token_info_url\": \"https://sts.googleapis.com/v1/introspect\",}\n```\n **Caution:** We recommend that you first ensure that the contents of this file are correct and then safeguard the file\u2014for example, by making it read-only and restricting access with an ACL. The file isn't validated; a malicious actor with write access to this file can change the endpoints and intercept credentials.\n **Sign in using browser-based authentication** \nTo authenticate using browser-based sign-in authentication, you can use one of the following methods:- If you used the `--activate` flag when you created the configuration file, or if you  activated the configuration file with `gcloud config set auth/` `` , the gcloud CLI  uses your configuration file automatically:```\ngcloud auth login\n```\n- To sign in by specifying the location of the configuration file, run the  following command:```\ngcloud auth login --login-config=LOGIN_CONFIG_FILE\n```\n- To use an environment variable to specify the location of the configuration  file, set`CLOUDSDK_AUTH_LOGIN_CONFIG_FILE`to the configuration path.\n **Disable browser-based sign-in** \nTo discontinue using the login configuration file, do the following:- If you used the `--activate` flag when you created the configuration file, or if you  activated the configuration file with `gcloud config set auth/` `` , you must run the following  command to unset it:```\ngcloud config unset auth/login_config_file\n```\n- Clear the`CLOUDSDK_AUTH_LOGIN_CONFIG_FILE`environment variable, if it is set.\n **Note:** If you start an IdP-initiated sign-in, use the following URL in SAML Settings for the nested [Default RelayState](https://saml-doc.okta.com/SAML_Docs/Configure-SAML-2.0-for-Org2Org.html) parameter: `https://console.cloud.google/` .\nTo sign in to gcloud CLI, using a headless flow, do the following:\n- Sign in a user to your Okta app and get the [OIDC token](https://developer.okta.com/docs/reference/api/oidc/) from Okta.\n- Save the OIDC token returned by Okta in a secure location on your local machine.\n- Generate a configuration file as below. Run the following command:```\ngcloud iam workforce-pools create-cred-config \\\u00a0 \u00a0 locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --subject-token-type=\"urn:ietf:params:oauth:token-type:id_token\" \\\u00a0 \u00a0 --credential-source-file=\"PATH_TO_OIDC_ID_TOKEN\" \\\u00a0 \u00a0 --workforce-pool-user-project=\"WORKFORCE_POOL_USER_PROJECT\" \\\u00a0 \u00a0 --output-file=\"config.json\"\n```\nReplace the following:- ``: the workforce pool ID\n- ``: the provider ID\n- ``: the path to the OIDC IdP credential file\n- ``: the project number associated with the [workforce pools user project](/iam/docs/workforce-identity-federation#workforce-pools-user-project) \nThe principal must have `serviceusage.services.use` permission on this project.\nWhen you run the command, it produces an OIDC IdP config file that is formatted similar to the following:\n```\n{\u00a0 \"type\": \"external_account\",\u00a0 \"audience\": \"//iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID\",\u00a0 \"subject_token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\u00a0 \"token_url\": \"https://sts.googleapis.com/v1/token\",\u00a0 \"workforce_pool_user_project\": \"WORKFORCE_POOL_USER_PROJECT\",\u00a0 \"credential_source\": {\u00a0 \u00a0 \"file\": \"PATH_TO_OIDC_CREDENTIALS_FILE\"\u00a0 }}\n```- Sign in a user to your Okta app and get the [SAML Response](https://developer.okta.com/docs/concepts/saml/#planning-for-saml) from Okta.\n- Save the SAML Response returned by Okta in a secure location on your local machine, then store the path, as follows:```\nSAML_ASSERTION_PATH=SAML_ASSERTION_PATH\n```\n- To generate a configuration file, run the following command:```\ngcloud iam workforce-pools create-cred-config \\\u00a0 \u00a0 locations/global/workforcePools/WORKFORCE_POOL_ID/providers/WORKFORCE_PROVIDER_ID \\\u00a0 \u00a0 --subject-token-type=\"urn:ietf:params:oauth:token-type:saml2\" \\\u00a0 \u00a0 --credential-source-file=\"SAML_ASSERTION_PATH\" \u00a0\\\u00a0 \u00a0 --workforce-pool-user-project=\"PROJECT_ID\" \u00a0\\\u00a0 \u00a0 --output-file=\"config.json\"\n```Replace the following:- ``: the workforce provide ID you created earlier in this guide.\n- ``: the workforce pool ID you created earlier in this guide.\n- ``: the path of the SAML assertion file.\n- ``: the project ID\nThe configuration file that is generated looks similar to the following:```\n{\u00a0 \"type\": \"external_account\",\u00a0 \"audience\": \"//iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/WORKFORCE_PROVIDER_ID\",\u00a0 \"subject_token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\u00a0 \"token_url\": \"https://sts.googleapis.com/v1/token\",\u00a0 \"credential_source\": {\u00a0 \u00a0 \"file\": \"SAML_ASSERTION_PATH\"\u00a0 },\u00a0 \"workforce_pool_user_project\": \"PROJECT_ID\"}\n```\nTo login to `gcloud` using token exchange, run the following command:\n```\ngcloud auth login --cred-file=\"config.json\"\n```\n`gcloud` then transparently exchanges your Okta credentials for temporary Google Cloud access tokens, allowing you to make other `gcloud` calls to Google Cloud.\nYou see output similar to the following:\n```\nAuthenticated with external account user credentials for:\n[principal://iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/subject/USER_ID].\n```\nTo list the credentialed accounts and the currently active account, run the following command:\n```\ngcloud auth list\n```\n### Test access\nYou now have access to Google Cloud services that support workforce identity federation and to which you are granted access. Earlier in this guide, you granted the Storage Admin ( `roles/storage.admin` ) role to all identities within a specific department for project `` . You can now test that you have access by listing Cloud Storage buckets.\nTo list Cloud Storage buckets using the console (federated), do the following:- Go to the Cloud Storage page.\n- Verify that you can see list of existing buckets for the``\nTo list Cloud Storage buckets and objects for the project that you have access to, run the following command:\n```\ngcloud alpha storage ls --project=\"TEST_PROJECT_ID\"\n```\nThe principal must have the `serviceusage.services.use` permission on the specified project.\n## Delete users\nWorkforce identity federation creates user metadata and resources for federated user identities. If you choose to delete users, in your IdP, for example, you must also explicitly delete these resources in Google Cloud. To do so, see [Delete workforce identity federation users and their data](/iam/docs/workforce-delete-user-data) .\nYou might see resources continue to be associated with a user that was deleted. This is because deleting user metadata and resources requires a long-running operation. After you initiate a deletion of a user's identity, processes that the user initiated before the deletion can continue to run until the processes complete or are canceled.\n## What's next\n- [Delete workforce identity federation users and their data](/iam/docs/workforce-delete-user-data) \n- Learn which Google Cloud products [support workforce identity federation](/iam/docs/federated-identity-supported-services) \n- [Set up user access to console (federated)](/iam/docs/workforce-console-sso)", "guide": "IAM"}