{"title": "IAM - Temporary elevated access overview", "url": "https://cloud.google.com/iam/docs/temporary-elevated-access", "abstract": "# IAM - Temporary elevated access overview\nOne way to protect sensitive resources is to limit access to them. However, limiting access to sensitive resources also creates friction for anyone who occasionally needs to access those resources. For example, a user might need break-glass, or emergency, access to sensitive resources to resolve an incident.\nIn these situations, we recommend giving the user permission to access the resource temporarily. We also recommend that, to improve auditing, you record the user's justification for accessing the resource.\nIn Google Cloud, there are several ways that you can manage this kind of temporary elevated access.\n", "content": "## Google groups\nOne way to manage temporary elevated access is to grant a Google group access to sensitive resources, then add and remove users from that group to control their access.\nTo set up a Google group for temporary elevated access, first [create agroup](https://support.google.com/groups/answer/2464926) , then grant it the roles that you want to temporarily give to users. If you use [deny policies](/iam/docs/deny-overview) , also consider making the group [exempt from any relevant deny rules](/iam/docs/deny-overview#deny-rules) to avoid unexpected denials.\nAfter you set up your group, you can add and remove users to modify their access. If you use the Google Groups API, you can temporarily add users to a group by using [membership expiration](/identity/docs/how-to/manage-expirations) .\nIf you want to record the user's justifications for accessing sensitive resources, you must define your own operational processes and tooling.\nFor example, to manage emergency access to Compute Engine resources, you could create a group, `emergency-compute-access@example.com` , and grant it the Compute Admin role ( `roles/compute.admin` ). If a user needs emergency administrative access to compute resources, you can add them to the `emergency-compute-access@example.com` group. After the emergency is resolved, you can remove them from the group.\n## IAM Conditions\nYou can use IAM Conditions to grant users expiring access to Google Cloud resources. For more information, see [Configure temporaryaccess](/iam/docs/configuring-temporary-access) .\nIf you want to record the user's justifications for accessing sensitive resources, you must define your own operational processes and tooling.\nExpired role bindings aren't automatically removed from your allow policies. To ensure that your allow policies don't exceed the maximum size for allow policies, we recommend periodically removing expired role bindings.\nDeny policies don't support time-based conditions. As a result, you can't use conditions in deny policies to temporarily exempt a user from a deny rule.\n## Just-in-time privileged access\nJust-In-Time Access is an open source application that uses IAM Conditions to grant users just-in-time privileged access to Google Cloud resources. This application is designed to run on App Engine or Cloud Run.\nThis application has the following benefits over manually adding conditional role bindings:\n- Users can search for roles that they can activate with Just-In-Time Access.\n- Users are required to provide justifications before getting access.\n- The application replaces the existing conditional binding instead of creating new bindings, which helps maintain your IAM allow policy size.\nFor more information about Just-In-Time Access, see [Manage just-in-timeprivileged access to projects](/architecture/manage-just-in-time-privileged-access-to-project) .\n**Note:** The Just-In-Time Access application can't give a user access if they've been [explicitly denied](/iam/docs/deny-overview) .\n## Service account impersonation\nWhen an authenticated principal, such as a user or another service account, authenticates as a service account to gain the service account's permissions, it's called the service account. Impersonating a service account lets an authenticated principal access whatever the service account can access. Only authenticated principals with the appropriate permissions can impersonate service accounts.\nTo set up a service account for temporary elevated access, [create the serviceaccount](/iam/docs/service-accounts-create) , then grant it the roles that you want to temporarily give to a user. If you use [deny policies](/iam/docs/deny-overview) , also consider adding the service account [exempt from any relevant denyrules](/iam/docs/deny-overview#deny-rules) to avoid unexpected denials.\nAfter you set up the service account, you can give users temporary elevated access by letting them [impersonate the serviceaccount](/iam/docs/service-account-impersonation) . There are several ways you can let users impersonate service accounts:\n- Grant users a role that lets them create short-lived credentials for the service account. Users can then use the short-lived credentials to impersonate the service account.- Grant the [Service Account OpenID Connect Identity Token Creatorrole](/iam/docs/service-account-permissions#id-token-creator-role) ( `roles/iam.serviceAccountOpenIdTokenCreator` ) to let the user create short-lived OpenID Connect (OIDC) ID tokens for the service account.\n- Grant the [Service Account Token Creatorrole](/iam/docs/service-account-permissions#token-creator-role) ( `roles/iam.serviceAccountTokenCreator` ) to let the user create the following types of service account credentials:- OAuth 2.0 access tokens, which you can use to authenticate with Google APIs\n- OIDC ID tokens\n- Signed JSON Web Tokens (JWTs) and binary blobsIf you grant a user one of these roles, they can impersonate the service account to elevate their own access. However, they're less likely to access or modify sensitive resources unintentionally.To learn how to impersonate service accounts, see [Use service accountimpersonation](/docs/authentication/use-service-account-impersonation) .\n- Create a token broker service that gives users [short-livedcredentials](/iam/docs/service-account-creds#short-lived-credentials) for the service account after they authenticate and provide a justification. Users can then use the short-lived credentials to impersonate the service account.With this method, you can decide when to let users impersonate the service account.To learn how to generate short-lived credentials, see [Create short-livedcredentials for a service account](/iam/docs/create-short-lived-credentials-direct) .\nTo learn more about service account impersonation, see [Service accountimpersonation](/iam/docs/service-account-impersonation) .\n## What's next\n- Use IAM Conditions to [grant temporary access](/iam/docs/configuring-temporary-access) to a principal.\n- Deploy the [Just-In-Time Access application](/architecture/manage-just-in-time-privileged-access-to-project) .\n- [Manually create short-lived credentials](/iam/docs/create-short-lived-credentials-direct) to impersonate a service account.", "guide": "IAM"}