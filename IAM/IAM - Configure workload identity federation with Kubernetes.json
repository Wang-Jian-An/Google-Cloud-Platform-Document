{"title": "IAM - Configure workload identity federation with Kubernetes", "url": "https://cloud.google.com/iam/docs/workload-identity-federation-with-kubernetes", "abstract": "# IAM - Configure workload identity federation with Kubernetes\nThis guide describes how to use workload identity federation to let workloads that run on Azure Kubernetes Service (AKS), Amazon Elastic Kubernetes Service, or on a self-hosted Kubernetes cluster authenticate to Google Cloud.\nKubernetes lets you configure a cluster so that workloads can obtain Kubernetes service account tokens [from a projected volume](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#serviceaccount-token-volume-projection) . By setting up workload identity federation, you can let workloads use these Kubernetes service account tokens to authenticate to Google Cloud.\nIf you're using GKE, use [Workload Identity](/kubernetes-engine/docs/how-to/workload-identity) instead of configuring workload identity federation.\n", "content": "## Before you begin\nBefore you configure workload identity federation, make sure that your Kubernetes cluster meets the following criteria:\nMake sure your cluster meets the following criteria:- You've enabled the [OIDC issuer](https://learn.microsoft.com/en-us/azure/aks/use-oidc-issuer) feature.You must enable this feature so that workload identity federation can access the OpenID Connect metadata and the JSON Web Key Set (JWKS) for the cluster.\nYou don't need to make any changes in your EKS configuration.\nMake sure your cluster meets the following criteria:- You're running Kubernetes 1.20 or later.Previous versions of Kubernetes used a different service account token format that is not compatible with the instructions in this document.\n- You configured `kube-apiserver` so that it [supports ServiceAccount token volume projections](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#serviceaccount-token-volume-projection) .\nThe cluster doesn't need to be accessible over the internet.\n## Configure workload identity federation\nYou only need to perform these steps once for each Kubernetes cluster. You can then use the same workload identity pool and provider for multiple Kubernetes pods and across multiple Google Cloud projects.\nTo start configuring workload identity federation, do the following:\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- We recommend that you\n- [use a dedicated project to manage workload identity pools and providers](/iam/docs/best-practices-for-using-workload-identity-federation#dedicated-project) \n- .\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the IAM, Resource Manager, Service Account Credentials, and Security Token Service APIs.\n- [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com,cloudresourcemanager.googleapis.com,iamcredentials.googleapis.com,sts.googleapis.com&redirect=https://console.cloud.google.com) \n### Define an attribute mapping and condition\nKubernetes service account tokens contain multiple claims, including the following:\n- `sub`: Contains the namespace and name of the service account-for example,`system:serviceaccount:` `` `:` ``, where``is the namespace of the service account and``is the name of the service account.\n- `\"kubernetes.io\".namespace`: Contains the namespace of the service account.\n- `\"kubernetes.io\".serviceaccount.name`: Contains the name of the service account.\n- `\"kubernetes.io\".pod.name`: Contains the name of the pod.\nTo use `sub` as subject identifier ( `google.subject` ) in Google Cloud, use the following mapping:\n```\ngoogle.subject=assertion.sub\n```\nOptionally, you can [map additional attributes](/iam/docs/workload-identity-federation#mapping) . You can then refer to these attributes when granting access to resources. For example:\n```\ngoogle.subject=assertion.sub,\nattribute.namespace=assertion['kubernetes.io']['namespace'],\nattribute.service_account_name=assertion['kubernetes.io']['serviceaccount']['name'],\nattribute.pod=assertion['kubernetes.io']['pod']['name']\n```\nOptionally, define an [attribute condition](/iam/docs/workload-identity-federation#conditions) . Attribute conditions are CEL expressions that can check assertion attributes and target attributes. If the attribute condition evaluates to `true` for a given credential, the credential is accepted. Otherwise, the credential is rejected.\nYou can use an attribute condition to restrict which Kubernetes service accounts can use workload identity federation to obtain short-lived Google Cloud tokens. For example, the following condition restricts access to Kubernetes service accounts from the `backend` and `monitoring` namespaces:\n```\nassertion['kubernetes.io']['namespace'] in ['backend', 'monitoring']\n```\n### Create the workload identity pool and provider\nTo create a workload identity pool and provider, do the following:\n- Determine the issuer URL of your AKS cluster:```\naz aks show -n NAME -g RESOURCE_GROUP --query \"oidcIssuerProfile.issuerUrl\" -otsv\n```Replace the following:- ``: The name of the cluster\n- ``: The resource group of the cluster\nThe command outputs the issuer URL. You need the issuer URL in one of the following steps.If the command doesn't return an issuer URL, verify that you've enabled the [OIDC issuer](https://learn.microsoft.com/en-us/azure/aks/use-oidc-issuer) feature.\n- Create a new workload identity pool:```\ngcloud iam workload-identity-pools create POOL_ID \\\n --location=\"global\" \\\n --description=\"DESCRIPTION\" \\\n --display-name=\"DISPLAY_NAME\"\n```Replace the following:- ``: The unique ID for the pool.\n- ``: The name of the pool.\n- ``: A description of the pool that you choose. This description appears when you grant access to pool identities.\n- Add the AKS cluster as a workload identity pool provider:```\ngcloud iam workload-identity-pools providers create-oidc PROVIDER_ID \\\n --location=\"global\" \\\n --workload-identity-pool=\"POOL_ID\" \\\n --issuer-uri=\"ISSUER\" \\\n --attribute-mapping=\"MAPPINGS\" \\\n --attribute-condition=\"CONDITIONS\"\n```Replace the following:- ``: A unique workload identity pool provider ID of your choice.\n- ``: The workload identity pool ID that you created earlier.\n- ``: The issuer URI that you determined earlier.\n- ``: A comma-separated list of [attribute mappings](#mappings-and-conditions) that you created earlier in this guide.\n- ``: An optional [attribute condition](#mappings-and-conditions) that you created earlier in this guide. Remove the parameter if you don't have an attribute condition.- Determine the issuer URL of your EKS cluster:```\naws eks describe-cluster --name NAME --query \"cluster.identity.oidc.issuer\" --output text\n```Replace `` with the name of the cluster.The command outputs the issuer URL. You need the issuer URL in one of the following steps.\n- Create a new workload identity pool:```\ngcloud iam workload-identity-pools create POOL_ID \\\n --location=\"global\" \\\n --description=\"DESCRIPTION\" \\\n --display-name=\"DISPLAY_NAME\"\n```Replace the following:- ``: The unique ID for the pool.\n- ``: The name of the pool.\n- ``: A description of the pool that you choose. This description appears when you grant access to pool identities.\n- Add the EKS cluster as a workload identity pool provider:```\ngcloud iam workload-identity-pools providers create-oidc PROVIDER_ID \\\n --location=\"global\" \\\n --workload-identity-pool=\"POOL_ID\" \\\n --issuer-uri=\"ISSUER\" \\\n --attribute-mapping=\"MAPPINGS\" \\\n --attribute-condition=\"CONDITIONS\"\n```Replace the following:- ``: A unique workload identity pool provider ID of your choice.\n- ``: The workload identity pool ID that you created earlier.\n- ``: The issuer URI that you determined earlier.\n- ``: A comma-separated list of [attribute mappings](#mappings-and-conditions) that you created earlier in this guide.\n- ``: An optional [attribute condition](#mappings-and-conditions) that you created earlier in this guide. Remove the parameter if you don't have an attribute condition.- Connect to your Kubernetes cluster and use `kubectl` to determine your cluster's issuer URL:```\nkubectl get --raw /.well-known/openid-configuration | jq -r .issuer\n```You need the issuer URL in one of the following steps.\n- Download the cluster's JSON Web Key Set (JWKS):```\nkubectl get --raw /openid/v1/jwks > cluster-jwks.json\n```In one of the following steps, you [upload the JWKS](/iam/docs/manage-workload-identity-pools-providers#update-oidc-jwk) so that workload identity federation can verify the authenticity of the Kubernetes service account tokens issued by your cluster.\n- Create a new workload identity pool:```\ngcloud iam workload-identity-pools create POOL_ID \\\n --location=\"global\" \\\n --description=\"DESCRIPTION\" \\\n --display-name=\"DISPLAY_NAME\"\n```Replace the following:- ``: The unique ID for the pool.\n- ``: The name of the pool.\n- ``: A description of the pool that you choose. This description appears when you grant access to pool identities.\n- Add the Kubernetes cluster as a workload identity pool provider and upload the cluster's JWKS:```\ngcloud iam workload-identity-pools providers create-oidc PROVIDER_ID \\\n --location=\"global\" \\\n --workload-identity-pool=\"POOL_ID\" \\\n --issuer-uri=\"ISSUER\" \\\n --attribute-mapping=\"MAPPINGS\" \\\n --attribute-condition=\"CONDITIONS\" \\\n --jwk-json-path=\"cluster-jwks.json\"\n```Replace the following:- ``: A unique workload identity pool provider ID of your choice.\n- ``: The workload identity pool ID that you created earlier.\n- ``: The issuer URI that you determined earlier.\n- ``: A comma-separated list of [attribute mappings](#mappings-and-conditions) that you created earlier in this guide.\n- ``: An optional [attribute condition](#mappings-and-conditions) that you created earlier in this guide. Remove the parameter if you don't have an attribute condition.\n **Note:** The command doesn't validate the cluster's JWKS. If the JWKS is malformed or expired, subsequent authentication attempts might fail with an error message `Error connecting to the given credential's issuer` .## Authenticate a Kubernetes workload\nThis section describes how to configure a Kubernetes workload to use workload identity federation.\nYou must perform these steps once for each Kubernetes workload that needs access to Google Cloud.\n### Create a pair of service accounts\nTo let a Kubernetes workload authenticate to Google Cloud, you need a pair of service accounts:\n- A Kubernetes service account that you attach to the Kubernetes pod.\n- An IAM service account that the Kubernetes workload can impersonate by using its attached Kubernetes service account.\nTo create the service accounts, do the following:\n- Create an IAM [service account](/iam/docs/creating-managing-service-accounts#creating) that represents the workload.The service account doesn't need to be in the same project as the workload identity pool.```\ngcloud iam service-accounts create SA_NAME\n```Replace the following:- ``: The name of the service account.\n- Create a Kubernetes service account:```\nkubectl create serviceaccount KSA_NAME --namespace NAMESPACE\n```Replace the following:- ``: The name of the service account.\n- ``: The namespace in which to create the service account.\n- [Grant the IAM service account access](/iam/docs/granting-changing-revoking-access) to resources that you want the Kubernetes workload to access.\n- Grant the Workload Identity User role ( `roles/iam.workloadIdentityUser` ) to the external identity of the Kubernetes service account:```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_EMAIL \\\n --role=roles/iam.workloadIdentityUser \\\n --member=\"principal://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/subject/SUBJECT\"\n```Replace the following:- ``: The email address of the service account\n- ``: The [project number](/resource-manager/docs/creating-managing-projects) of the project that contains the workload identity pool.\n- ``: The pool ID of the workload identity pool.\n- ``: The expected value for the attribute that. [you've mapped](#mappings-and-conditions) to`google.subject`, for example`system:serviceaccount:` `` `:` ``.\n **Note:** You must use the project number in the member identifier. Using the project ID is not supported.\n### Deploy the Kubernetes workload\nYou now deploy a Kubernetes workload and let it use the service account pair:\n- Create a credential configuration file:```\ngcloud iam workload-identity-pools create-cred-config \\\u00a0 \u00a0 projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --service-account=SERVICE_ACCOUNT_EMAIL \\\u00a0 \u00a0 --credential-source-file=/var/run/service-account/token \\\u00a0 \u00a0 --credential-source-type=text \\\u00a0 \u00a0 --output-file=credential-configuration.json\n```Replace the following:- ``: The project number of the project that contains the workload identity pool\n- ``: The ID of the workload identity pool\n- ``: The ID of the workload identity pool provider\n- ``: Email address of the service account\nThe credential configuration file lets the [Cloud Client Libraries](/apis/docs/cloud-client-libraries) , the gcloud CLI, and Terraform determine the following:- Where to obtain external credentials from\n- Which workload identity pool and provider to use\n- Which service account to impersonate\n **Note:** Unlike a [service account key](/iam/docs/creating-managing-service-account-keys#creating_service_account_keys) , a credential configuration file doesn't contain a private key and doesn't need to be kept confidential. Details about the credential configuration file are available at [https://google.aip.dev/auth/4117](https://google.aip.dev/auth/4117) .\n- Import the credential configuration file as a [ConfigMap](https://kubernetes.io/docs/concepts/configuration/configmap/) :```\nkubectl create configmap CONFIGMAP_NAME \\\n --from-file credential-configuration.json \\\n --namespace NAMESPACE\n```Replace the following:- ``: The name of the ConfigMap.\n- ``: The namespace in which to create the ConfigMap.\n- Deploy a workload and let it use the Kubernetes service account and ConfigMap.Create a manifest and configure as follows:- Mount a [projected token volume](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#serviceaccount-token-volume-projection) so that the workload can obtain a Kubernetes service account token from a local file. Configure the volume so that the Kubernetes service account token uses the audience expected by your workload identity federation pool provider.\n- Mount the ConfigMap that contains the credential configuration file so that the workload can access the necessary configuration for using workload identity federation.\n- Add an environment variable`GOOGLE_APPLICATION_CREDENTIALS`that contains the path of the credential configuration file so that workloads can find the file.\nThe following is an example manifest that uses the Kubernetes service account and ConfigMap to let the Google Cloud CLI authenticate to Google Cloud:```\napiVersion: v1kind: Podmetadata:\u00a0 name: example\u00a0 namespace: NAMESPACEspec:\u00a0 containers:\u00a0 - name: example\u00a0 \u00a0 image: google/cloud-sdk:alpine\u00a0 \u00a0 command: [\"/bin/sh\", \"-c\", \"gcloud auth login --cred-file $GOOGLE_APPLICATION_CREDENTIALS && gcloud auth list && sleep 600\"]\u00a0 \u00a0 volumeMounts:\u00a0 \u00a0 - name: token\u00a0 \u00a0 \u00a0 mountPath: \"/var/run/service-account\"\u00a0 \u00a0 \u00a0 readOnly: true\u00a0 \u00a0 - name: workload-identity-credential-configuration\u00a0 \u00a0 \u00a0 mountPath: \"/etc/workload-identity\"\u00a0 \u00a0 \u00a0 readOnly: true\u00a0 \u00a0 env:\u00a0 \u00a0 - name: GOOGLE_APPLICATION_CREDENTIALS\u00a0 \u00a0 \u00a0 value: \"/etc/workload-identity/credential-configuration.json\"\u00a0 serviceAccountName: KSA_NAME\u00a0 volumes:\u00a0 - name: token\u00a0 \u00a0 projected:\u00a0 \u00a0 \u00a0 sources:\u00a0 \u00a0 \u00a0 - serviceAccountToken:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audience: https://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 expirationSeconds: 3600\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 path: token\u00a0 - name: workload-identity-credential-configuration\u00a0 \u00a0 configMap:\u00a0 \u00a0 \u00a0 name: CONFIGMAP_NAME\n```You can follow the same approach to let tools and workloads that use one of the following client libraries [find credentials automatically](/docs/authentication/client-libraries) :\nThe [Google Cloud Client Libraries for C++](/cpp/docs) support workload identity federation since version [v2.6.0](https://github.com/googleapis/google-cloud-cpp/releases/tag/v2.6.0) . To use workload identity federation, you must build the client libraries with version 1.36.0 or later of gRPC.\nClient libraries for Go support identity federation if they use version v0.0.0-20210218202405-ba52d332ba99 or later of the `golang.org/x/oauth2` module.\nTo check which version of this module your client library uses, run the following commands:\n```\ncd $GOPATH/src/cloud.google.com/gogo list -m golang.org/x/oauth2\n```\nClient libraries for Java support identity federation if they use version 0.24.0 or later of the [com.google.auth:google-auth-library-oauth2-http artifact](https://search.maven.org/artifact/com.google.auth/google-auth-library-oauth2-http) .\nTo check which version of this artifact your client library uses, run the following Maven command in your application directory:\n```\nmvn dependency:list -DincludeArtifactIds=google-auth-library-oauth2-http\n```\nClient libraries for Node.js support workload identity federation if they use version 7.0.2 or later of the [google-auth-library package](https://github.com/googleapis/google-auth-library-nodejs) .\nTo check which version of this package your client library uses, run the following command in your application directory:\n```\nnpm list google-auth-library\n```\nWhen you create a `GoogleAuth` object, you can specify a project ID, or you can allow `GoogleAuth` to find the project ID automatically. To find the project ID automatically, the service account in the configuration file must have the Browser role ( `roles/browser` ), or a role with equivalent permissions, on your project. For details, see the [README for the google-auth-library package](https://github.com/googleapis/google-auth-library-nodejs#using-external-identities) .\nClient libraries for Python support identity federation if they use version 1.27.0 or later of the [google-auth package](https://github.com/googleapis/google-auth-library-python) .\nTo check which version of this package your client library uses, run the following command in the environment where the package is installed:\n```\npip show google-auth\n```\nTo specify a project ID for the authentication client, you can set the `GOOGLE_CLOUD_PROJECT` environment variable, or you can allow the client to find the project ID automatically. To find the project ID automatically, the service account in the configuration file must have the Browser role ( `roles/browser` ), or a role with equivalent permissions, on your project. For details, see the [user guide for the google-auth package](https://github.com/googleapis/google-auth-library-python/blob/master/docs/user-guide.rst#using-external-identities) .\nTo authenticate using workload identity federation, use the [gcloud auth login](/sdk/gcloud/reference/auth/login) command:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nReplace `` with the file path to the credential configuration file.\nSupport for workload identity federation in gcloud CLI is available in [version 363.0.0 and later versions of the gcloud CLI](/sdk/docs/components#updating_components) .\nThe [Google Cloud provider](https://registry.terraform.io/providers/hashicorp/google/latest/docs) supports workload identity federation if you use version 3.61.0 or later:\n```\nterraform {\n required_providers {\n google = {\n  source = \"hashicorp/google\"\n  version = \"~> 3.61.0\"\n }\n }\n}\n```\nTo authenticate using workload identity federation, use one of the following methods:\nWhen you use gsutil in conjunction with gcloud, sign in as normal:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nWhen you use gsutil as a stand-alone command-line application, edit the .boto file to include the following section:\n```\n[Credentials]\ngs_external_account_file = FILEPATH\n```\nReplace `` , in both cases, with the file path to the credential configuration file.\nSupport for workload identity federation in gsutil is available in [version 379.0.0 and later versions of the gcloud CLI](/sdk/docs/components#updating_components) .\nTo authenticate using workload identity federation, use the [gcloud auth login](/sdk/gcloud/reference/auth/login) command, as follows:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nReplace `` with the file path to the credential configuration file.\nSupport for workload identity federation in bq is available in [version 390.0.0 and later versions of the gcloud CLI](/sdk/docs/components#updating_components) .\n- Optionally, verify that authentication works correctly by running the following command:```\nkubectl exec example --namespace NAMESPACE -- gcloud auth print-access-token\n```## What's next\n- Read more about [workload identity federation](/iam/docs/workload-identity-federation) .\n- Learn about [best practices for using workload identity federation](/iam/docs/best-practices-for-using-workload-identity-federation) .\n- See how you can [manage workload identity pools and providers](/iam/docs/manage-workload-identity-pools-providers) .", "guide": "IAM"}