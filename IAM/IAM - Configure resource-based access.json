{"title": "IAM - Configure resource-based access", "url": "https://cloud.google.com/iam/docs/configuring-resource-based-access", "abstract": "# IAM - Configure resource-based access\nThis topic describes how to manage access to specific resources using conditional role bindings in your allow policies. By using [resource attributes](/iam/docs/conditions-attribute-reference#resource) in a condition expression, you can grant a sub scope of the role binding based on the resource name, resource type, and/or Google Cloud service.\n**Note:** The examples on this page show how to modify access to a [project](/resource-manager/docs/cloud-platform-resource-hierarchy#projects) . However, you can adapt these steps to modify access to any Google Cloud resource that accepts IAM allow policies. For a list of these resource types, see [Resource types that accept allow policies](/iam/docs/resource-types-with-policies) .\n", "content": "## Before you begin\n- Read the [Identity and Access Management (IAM) Conditions overview](/iam/docs/conditions-overview) to understand the basics of IAM conditional role bindings.\n- Review the [resource attributes](/iam/docs/conditions-attribute-reference#resource) that can be used in a condition expression.\n- The resource name attribute can control access to the following Google Cloud services:- Apigee\n- Application Integration\n- BigQuery\n- Binary Authorization\n- Bigtable\n- Cloud Key Management Service\n- Cloud Logging\n- Spanner\n- Cloud SQL\n- Cloud Storage\n- Compute Engine\n- Dataform\n- Google Kubernetes Engine\n- Integration Connectors\n- Pub/Sub Lite\n- Secret Manager**Important:** Review [Important usage considerations for resource-based conditions](#considerations) at the bottom of this page before applying a condition of this type in a production environment.\n### Required roles\nTo get the permissions that you need to manage conditional role bindings,   ask your administrator to grant you the  following IAM roles:\n- To manage access to projects: [Project IAM Admin ](https://cloud.google.com/iam/docs/understanding-roles#resourcemanager.projectIamAdmin) (`roles/resourcemanager.projectIamAdmin`)    on the project\n- To manage access to folders: [Folder Admin ](https://cloud.google.com/iam/docs/understanding-roles#resourcemanager.folderAdmin) (`roles/resourcemanager.folderAdmin`)    on the folder\n- To manage access to projects, folders, and organizations: [Organization Admin ](https://cloud.google.com/iam/docs/understanding-roles#resourcemanager.organizationAdmin) (`roles/resourcemanager.organizationAdmin`)    on the organization\n- To manage access to almost all Google Cloud resources: [Security Admin ](https://cloud.google.com/iam/docs/understanding-roles#iam.securityAdmin) (`roles/iam.securityAdmin`)    on the project, folder, or organization whose resources you want to manage access to\nFor more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nThese predefined roles contain     the permissions required to manage conditional role bindings. To see the exact permissions that are   required, expand the **Required permissions** section:\nYou might also be able to get   these permissions  with [custom roles](/iam/docs/creating-custom-roles) or  other [predefined roles](/iam/docs/understanding-roles) .\n## Grant access to a group of resources based on resource name prefixes\nA conditional role binding can be used to grant access to principals for resources whose resource names match a prefix, such as Compute Engine virtual machine (VM) instances whose names start with a certain string. The resource name prefix is typically used to group resources intended for certain functionality or that have certain properties.\n**Note:** Conditional role bindings do not override role bindings with no conditions. If a principal is bound to a role, and the role binding does not have a condition, then the principal always has that role. Adding the principal to a conditional binding for the same role has no effect.\nConsider the following example: The software company ExampleCo runs workloads on certain VM instances that may operate on sensitive healthcare data. Other non-sensitive workloads must run in the same project, and ExampleCo wants to ensure its developers have limited access to VM instances that operate on sensitive data. To accomplish this goal, data-sensitive VM instances are named with a `sensitiveAccess` prefix, and other VM instances are named with a `devAccess` prefix. Then, conditional role bindings are used to ensure that the developers can remain productive with normal `devAccess` VM instances, but without granting them access to `sensitiveAccess` VM instances.\nWhile you can use the `resource.name` condition attribute alone to manage access, it's common to use the `resource.type` and `resource.service` attributes as well. When you use these additional attributes, you make it less likely that a condition will affect access to different resource types with similar names. The example in this section controls access using both the `resource.name` and `resource.type` attributes.\n**Note:** You cannot use conditions when you grant [basic roles](/iam/docs/understanding-roles#basic) , including Owner (`roles/owner`), Editor (`roles/editor`), and Viewer (`roles/viewer`). Also, you cannot use conditions when you grant roles to all users ( [allUsers](/iam/docs/overview#allusers) ) or all authenticated users ( [allAuthenticatedUsers](/iam/docs/overview#allauthenticatedusers) ).\nTo grant access based on a name prefix to Compute Engine disks and instances in a project:\n- In the Google Cloud console, go to the **IAM** page. [Go to theIAM page](https://console.cloud.google.com/iam-admin/iam) \n- From the list of principals, locate the desired principal and click the button.\n- From the **Edit permissions** panel, locate the desired role to configure a condition for. Then under **IAM condition (optional)** , click **Add IAMcondition** .\n- In the **Edit condition** panel, enter a title and optional description for the condition.\n- You can add a condition expression using either the **Condition Builder** or the **Condition Editor** . The condition builder provides an interactive interface to select your desired condition type, operator, and other applicable details about the expression. The condition editor provides a text-based interface to manually enter an expression using CEL syntax. **Condition Builder** :- Click the **Add** drop-down and click **Grouped conditions** .\n- From the **Condition type** drop-down, select **Resource\u00a0> Type** .\n- From the **Operator** drop-down, select **is** .\n- From the **Resource Type** drop-down, select **compute.googleapis.com/Disk** .\n- Click the first **Add** button immediately beneath the condition you just entered to add another clause to the expression.\n- From the **Condition type** drop-down, select **Resource\u00a0> Name** .\n- From the **Operator** drop-down, select **Starts with** .\n- In the **Value** field, enter the [resource name](/iam/docs/conditions-resource-attributes#resource_name_format) in the appropriate format, such as`projects/project-123/zones/us-central1-a/disks/devAccess`for a disk whose name starts with`devAccess`.\n- To the left of each condition type, click **And** to ensure both clauses must be true.\n- Click the **Add** button directly above the **Save** button to add another grouped set of conditions.\n- From the **Condition type** drop-down, select **Resource\u00a0> Type** .\n- From the **Operator** drop-down, select **is** .\n- From the **Resource Type** drop-down, select **compute.googleapis.com/Instance** .\n- Click the first **Add** button immediately beneath the condition you just entered add another clause to the expression.\n- From the **Condition type** drop-down, select **Resource\u00a0> Name** .\n- From the **Operator** drop-down, select **Starts with** .\n- In the **Value** field, enter the [resource name](/iam/docs/conditions-resource-attributes#resource_name_format) in the appropriate format, such as`projects/project-123/zones/us-central1-a/instances/devAccess`for an instance whose name starts with`devAccess`.\n- To the left of each condition type, click **And** to ensure both clauses must be true.\n- Click the **Add** button directly above the **Save** button to add the third grouped set of conditions.\n- To ensure this condition does not impact other resources, add the following clauses as well: From the **Condition type** drop-down, select **Resource\u00a0> Type** .\n- From the **Operator** drop-down, select **is not** .\n- From the **Resource Type** drop-down, select **compute.googleapis.com/Disk** .\n- Click the first **Add** button immediately beneath the condition you just entered add another clause to the expression.\n- From the **Condition type** drop-down, select **Resource\u00a0> Type** .\n- From the **Operator** drop-down, select **is not** .\n- From the **Resource Type** drop-down, select **compute.googleapis.com/Instance** .\n- To the left of each condition type, click **And** to ensure both clauses must be true.\n- When you're finished, the condition builder should look similar to the following:\n- Click **Save** to apply the condition.\n- Once the **Edit condition** panel is closed, click **Save** again from the **Edit permissions** panel to update your allow policy.\n **Condition Editor** :- Click the **Condition Editor** tab and enter the following expression:```\n(resource.type == \"compute.googleapis.com/Disk\" &&\nresource.name.startsWith(\"projects/project-123/regions/us-central1/disks/devAccess\")) ||\n(resource.type == \"compute.googleapis.com/Instance\" &&\nresource.name.startsWith(\"projects/project-123/zones/us-central1-a/instances/devAccess\")) ||\n(resource.type != \"compute.googleapis.com/Disk\" &&\nresource.type != \"compute.googleapis.com/Instance\")\n```\n- After entering your expression, you can optionally choose to [lint](/iam/docs/linting-policies) the CEL syntax by clicking **Run Linter** above the text box on the top-right.\n- Click **Save** to apply the condition.\n- Once the **Edit condition** panel is closed, click **Save** again from the **Edit permissions** panel to update your allow policy.Allow policies are set using the [read-modify-write](/iam/docs/granting-changing-revoking-access#policy-overview) pattern.\nExecute the [gcloud projects get-iam-policy](/sdk/gcloud/reference/projects/get-iam-policy) command to get the current allow policy for the project. In the following example, the JSON version of the allow policy is downloaded to a path on disk.\nCommand:\n```\ngcloud projects get-iam-policy project-id --format=json > filepath\n```\nThe JSON format of the allow policy is downloaded:\n```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"group:devs@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/compute.instanceAdmin\"\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 1}\n```\nTo configure the allow policy with a resource name prefix condition, add the following highlighted condition expression. The gcloud CLI updates the version automatically:\n```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"group:devs@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/compute.instanceAdmin\",\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Dev_access_only\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"Only access to devAccess* VMs\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"expression\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"(resource.type == 'compute.googleapis.com/Disk' &&\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resource.name.startsWith('projects/project-123/regions/us-central1/disks/devAccess')) ||\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (resource.type == 'compute.googleapis.com/Instance' &&\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resource.name.startsWith('projects/project-123/zones/us-central1-a/instances/devAccess')) ||\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (resource.type != 'compute.googleapis.com/Instance' &&\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resource.type != 'compute.googleapis.com/Disk')\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 3}\n```\nNext, set the new allow policy by executing the [gcloud projects set-iam-policy](/sdk/gcloud/reference/projects/set-iam-policy) command:\n```\ngcloud projects set-iam-policy project-id filepath\n```\nThe new conditional role binding will grant `devs@example.com` permissions in the following way:- All disk and instance permissions are granted only if the resource name starts with `devAccess`\n- All other permissions in the role are granted for all other resource types\nUse the [read-modify-write](/iam/docs/granting-changing-revoking-access#policy-overview) pattern to allow access to specific resources.\n **First, read the allow policy for the project:** \nThe Resource Manager API's ` [projects.getIamPolicy](/resource-manager/reference/rest/v1/projects/getIamPolicy) ` method gets a project's allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/PROJECT_ID:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/owner\",\n  \"members\": [  \"user:project-owner@example.com\"\n  ]\n },\n {\n  \"members\": [  \"group:devs@example.com\"\n  ],\n  \"role\": \"roles/compute.instanceAdmin\"\n }\n ]\n}\n```\n **Next, modify the allow policy so that it allows access to specificresources.** Make sure to change the `version` field to the value `3` :\n```\n{\u00a0 \"version\": 3,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/compute.instanceAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"group:devs@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Dev_access_only\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"Only access to devAccess* VMs\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"expression\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"(resource.type == 'compute.googleapis.com/Disk' &&\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resource.name.startsWith('projects/project-123/regions/us-central1/disks/devAccess')) ||\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (resource.type == 'compute.googleapis.com/Instance' &&\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resource.name.startsWith('projects/project-123/zones/us-central1-a/instances/devAccess')) ||\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (resource.type != 'compute.googleapis.com/Instance' &&\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resource.type != 'compute.googleapis.com/Disk')\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ]}\n```\n **Finally, write the updated allow policy:** \nThe Resource Manager API's ` [projects.setIamPolicy](/resource-manager/reference/rest/v1/projects/setIamPolicy) ` method sets the allow policy in the request as the project's new allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/PROJECT_ID:setIamPolicy\n```\nRequest JSON body:\n```\n{\n \"policy\": {\n \"version\": 3,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [  {\n  \"role\": \"roles/owner\",\n  \"members\": [   \"user:project-owner@example.com\"\n  ]\n  },\n  {\n  \"role\": \"roles/compute.instanceAdmin\",\n  \"members\": [   \"group:devs@example.com\"\n  ],\n  \"condition\": {\n   \"title\": \"Dev_access_only\",\n   \"description\": \"Only access to devAccess* VMs\",\n   \"expression\":\n   \"(resource.type == 'compute.googleapis.com/Disk' &&\n   resource.name.startsWith('projects/project-123/regions/us-central1/disks/devAccess')) ||\n   (resource.type == 'compute.googleapis.com/Instance' &&\n   resource.name.startsWith('projects/project-123/zones/us-central1-a/instances/devAccess')) ||\n   (resource.type != 'compute.googleapis.com/Instance' &&\n   resource.type != 'compute.googleapis.com/Disk')\"\n  }\n  }\n ]\n }\n}\n```\nTo send your request, expand one of these options:\nThe response contains the updated allow policy.\n **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\n**Note:** Compute Engine VM instances have a resource name that encodes `zone` information for the instance. To manage access to instances by using a name prefix, such as `devAccess` across different zones, all zone IDs should be enumerated in the condition expression. For instance, the following expression specifies `devAccess` instances in both `us-central1-a` and `us-central1-b` zones: ```resource.name.startsWith('projects/project-123/zones/us-central1-a/instances/devAccess') ||\u00a0resource.name.startsWith('projects/project-123/zones/us-central1-b/instances/devAccess')```\n## Extract values from resource names\nThe previous examples show boolean comparisons between the resource name, or the beginning of the resource name, and another value. In some cases, though, you might need to compare a value with a specific part of the resource name that is not at the beginning of the name.\nYou can use the [extract() function](/iam/docs/conditions-attribute-reference#extract) and specify an to extract the relevant part of the resource name as a string. If necessary, you can convert the extracted string to another type, such as a timestamp. After you extract a value from the resource name, you can compare that value with other values.\n**Note:** If you use the Google Cloud console to edit conditions, the `extract()` function is available in the condition editor, but not in the expression builder.\nThe following examples show condition expressions that use the `extract()` function. For details about the `extract()` function, see the [IAM Conditions attribute reference](/iam/docs/conditions-attribute-reference#extract) .\n### Example: Match orders from the last 30 days\nSuppose you store order information in multiple Cloud Storage buckets, and the objects in each bucket are organized by date. A typical object name might look similar to this example:\n```\nprojects/_/buckets/acme-orders-aaa/objects/data_lake/orders/order_date=2019-11-03/aef87g87ae0876\n```\nYou want to allow a principal to access any order from the last 30 days. The following condition matches the Cloud Storage objects for these orders. It uses the `duration()` and `date()` functions to subtract 30 days (2,592,000 seconds) from the request time, then compare that timestamp with the order date:\n```\nresource.type == 'storage.googleapis.com/Object' &&\n request.time - duration('2592000s') < date(resource.name.extract('/order_date={date_str}/'))\n```\nFor details about the `date()` and `duration()` functions, see the [date/time attribute reference](/iam/docs/conditions-attribute-reference#date-time) .\n### Example: Match Compute Engine VMs in any location\nSuppose you want to grant a project-level role to a principal for any Compute Engine VM whose name starts with `dev-` , regardless of the VM's location. You also want the principal to be able to use that role for all other resource types.\nThe resource name for a VM uses a format similar to `projects/` `` `/zones/` `` `/instances/` `` . The following condition evaluates to `true` for VMs with an instance name that starts with the string `dev-` , and for all resource types other than VMs:\n```\nresource.type != 'compute.googleapis.com/Instance' ||\n resource.name.extract('/instances/{name}').startsWith('dev-')\n```\nThe text in curly brackets identifies the part of the resource name that is extracted for comparison. In this example, the extraction template extracts any characters after the first occurrence of the string `/instances/` .\n## Important usage considerations for resource-based conditions\nWhen adding a resource-based condition, it's important to consider how the condition will affect the principal's permissions.\n### Custom roles\nConsider the following example, which involves [custom roles](/iam/docs/understanding-custom-roles) . An admin wants to create a custom role that grants access to create VM instances, but only allows the user to create VM instances in a project with a resource name that starts with the name prefix `staging` , using the disks with the same name prefix.\nTo accomplish this goal, ensure that the granted role contains the [required permissions](/compute/docs/access/iam) to create a VM instance, which means permissions on disk and instance resource types. Then, ensure that the condition expression checks the resource name for disks and instances. Beyond these two types, other permissions in the role are not granted.\nThe following condition expression will result in unexpected behavior. Permissions to operate on Compute Engine VMs are blocked:\n```\nresource.type == 'compute.googleapis.com/Disk' &&\n resource.name.startsWith('projects/project-123/regions/us-central1/disks/staging')\n```\nThe following condition expression includes both disks and instances, and will manage access based on the resource name for these two types:\n```\n(resource.type == 'compute.googleapis.com/Disk' &&\n resource.name.startsWith('projects/project-123/regions/us-central1/disks/staging')) ||\n (resource.type == 'compute.googleapis.com/Instance' &&\n resource.name.startsWith('projects/project-123/zones/us-central1-a/instances/staging'))\n```\nThe following condition expression includes both disks and instances, and will manage access based on the resource name for these two types. For any other resource type, the condition expression grants the role regardless of the resource name:\n```\n(resource.type == 'compute.googleapis.com/Disk' &&\n resource.name.startsWith('projects/project-123/regions/us-central1/disks/staging')) ||\n (resource.type == 'compute.googleapis.com/Instance' &&\n resource.name.startsWith('projects/project-123/zones/us-central1-a/instances/staging')) ||\n (resource.type != 'compute.googleapis.com/Disk' &&\n resource.type != 'compute.googleapis.com/Instance')\n```\n[](None)\n### Parent-only permissions\nIn Google Cloud's resource hierarchy, some of the permissions in a role that affect a child resource are intended to be enforced at the parent level only. For example, to list crypto keys for Cloud KMS, the user must be granted the `cloudkms.cryptokeys.list` permission on the key ring that contains the cryptographic keys, not the keys themselves. These kinds of permissions are called , and only apply to `list` operations.\nTo properly grant access to `*.*.list` permissions when using conditions, the condition expression should set the `resource.service` and `resource.type` attributes according to the parent resource type of the target resources to be listed.\n**Note:** To grant parent-only permissions on a resource, the service that owns the resource must recognize the resource attributes used in the condition. For example, you cannot use the `resource.name` attribute in a condition at the project level, because Resource Manager, which manages projects, does not recognize the `resource.name` attribute. For details about which services recognize these attributes, see the [resource attribute reference](/iam/docs/conditions-attribute-reference#resource) .\nConsider the following examples. Using the Compute Engine example above, the following expression prevents access to `compute.disks.list` and `compute.instances.list` permissions, since the resource on which this permissions are checked have `resource.type` attribute value of `cloudresourcemanager.googleapis.com/Project` .\n```\n(resource.type == 'compute.googleapis.com/Disk' &&\n resource.name.startsWith('projects/project-123/regions/us-central1/disks/devAccess')) ||\n (resource.type == 'compute.googleapis.com/Instance' &&\n resource.name.startsWith('projects/project-123/zones/us-central1-a/instances/devAccess'))\n```\nIt is common that these `list` permissions are granted together with other permissions for regular operations on the resource. To increase to scope of grant in this case, you can either extend the scope for the `cloudresourcemanager.googleapis.com/Project` type only, or extend the scope to all other permissions not of type instance or disk.\n```\n(resource.type == 'compute.googleapis.com/Disk' &&\n resource.name.startsWith('projects/project-123/regions/us-central1/disks/devAccess')) ||\n (resource.type == 'compute.googleapis.com/Instance' &&\n resource.name.startsWith('projects/project-123/zones/us-central1-a/instances/devAccess')) ||\n resource.type == 'cloudresourcemanager.googleapis.com/Project'\n```\nor\n```\n(resource.type == 'compute.googleapis.com/Disk' &&\n resource.name.startsWith('projects/project-123/regions/us-central1/disks/devAccess')) ||\n (resource.type == 'compute.googleapis.com/Instance' &&\n resource.name.startsWith('projects/project-123/zones/us-central1-a/instances/devAccess')) ||\n (resource.type != 'compute.googleapis.com/Disk' &&\n resource.type != 'compute.googleapis.com/Instance')\n```", "guide": "IAM"}