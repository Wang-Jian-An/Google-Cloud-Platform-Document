{"title": "IAM - Manage access to service accounts", "url": "https://cloud.google.com/iam/docs/manage-access-service-accounts", "abstract": "# IAM - Manage access to service accounts\nThis page describes how to grant, change, and revoke a principal's access to a single service account. To manage a principal's access to all service accounts in a project, folder, or organization, manage their access at the [project,folder, or organization level](/iam/docs/granting-changing-revoking-access) .\nIn Identity and Access Management (IAM), access is managed through , also known as IAM policies. An allow policy is attached to a Google Cloud resource. Each allow policy contains a collection of that associate one or more principals, such as users or service accounts, with an IAM role. These role bindings grant the specified roles to the principals, both on the resource that the allow policy is attached to and on all of that resource's [descendants](/resource-manager/docs/cloud-platform-resource-hierarchy) . For more information about allow policies, see [Understanding allow policies](/iam/docs/policies) .\nService accounts are both resources that other principals can be granted access to, and principals that can be granted access to other resources. This page treats service accounts as resources and describes how to grant other principals access to them. To learn how to grant a service account access to other resources, the following guides:\n- To grant a service account access to a project, folder, or organization, see [Managing access to projects, folders, and organizations](/iam/docs/granting-changing-revoking-access) .\n- To grant a service account access to other resources, see [Managing access to other resources](/iam/docs/manage-access-other-resources) .\n**Note:** Granting roles on service accounts can allow principals to impersonate service accounts. See [Roles for service account authentication](/iam/docs/service-account-permissions) for more information.\nThis page describes how to manage access to service accounts using the Google Cloud console, the Google Cloud CLI, and the REST API. You can also manage access using the [IAM client libraries](/iam/docs/client-libraries#iam) .\n**Note:** You can also use deny policies to prevent principals from using specific IAM permissions. For more information, see [Deny policies](/iam/docs/deny-overview) .\n", "content": "## Before you begin\n- Enable the IAM API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com&redirect=https://console.cloud.google.com) \n- Learn about [service accounts](/iam/docs/service-accounts) .\n### Required roles\nTo get the permissions that you need to manage access to a service account,   ask your administrator to grant you the [Service Account Admin ](https://cloud.google.com/iam/docs/understanding-roles#iam.serviceAccountAdmin) ( `roles/iam.serviceAccountAdmin` ) IAM role on the service account or the project that owns the service account.    For more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nThis predefined role contains     the permissions required to manage access to a service account. To see the exact permissions that are   required, expand the **Required permissions** section:\nYou might also be able to get   these permissions  with [custom roles](/iam/docs/creating-custom-roles) or  other [predefined roles](/iam/docs/understanding-roles) .\n## View current access\nThe following section shows you how to use the Google Cloud console, the gcloud CLI, and the REST API to view who has access to a service account. You can also view access by using the [IAM clientlibraries](/iam/docs/client-libraries#iam) to get the service account's allow policy.\n**Note:** The Google Cloud console shows access in a list form, rather than directly showing the resource's allow policy.- In the Google Cloud console, go to the **Service Accounts** page. [Go to Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the email address of the service account.\n- Go to the **Permissions** tab. The **Principals with access to this serviceaccount** section lists all the principals who have been granted a role on the service account.This list includes principals whose access comes from roles that are granted on parent resources. For more information about policy inheritance, see [Policy inheritance and the resource hierarchy](/iam/docs/policies#inheritance) .\n- Optional: To view role grants for [Google-managed service accounts](/iam/docs/service-account-types#google-managed) , select the **Include Google-provided role grants** checkbox.\nTo see who has access to your service account, get the allow policy for the service account. To learn how to interpret allow policies, see [Understanding allow policies](/iam/docs/policies) .\n **Note:** A resource's allow policy does not show any roles gained through [policy inheritance](/iam/docs/policies#inheritance) . To view inherited roles, use the Google Cloud console, or follow the instructions on [Viewing effective IAM policies](/asset-inventory/docs/view-effective-iam-policies) .To get the allow policy for the service account, run the [get-iam-policy](/sdk/gcloud/reference/iam/service-accounts/get-iam-policy) command for the service account:\n```\ngcloud iam service-accounts get-iam-policy SA_ID --format=FORMAT > PATH\n```\nProvide the following values:- `` : The ID of your service account. This can either be the service account's email address in the form `` `@` `` `.iam.gserviceaccount.com` , or the service account's unique numeric ID. **Note:** If you want to identify a service account just after it is created, use the numeric ID rather than the email address to ensure that it is reliably identified.\n- `` : The desired format for the policy. Use `json` or `yaml` .\n- `` : The path to a new output file for the policy.\nFor example, the following command gets the policy for the service account `my-service-account` and saves it to your home directory in JSON format:\n```\ngcloud iam service-accounts get-iam-policy my-service-account --format json > ~/policy.json\n```To see who has access to your service account, get the allow policy for the service account. To learn how to interpret allow policies, see [Understanding allow policies](/iam/docs/policies) .\n **Note:** A resource's allow policy does not show any roles gained through [policy inheritance](/iam/docs/policies#inheritance) . To view inherited roles, use the Google Cloud console, or follow the instructions on [Viewing effective IAM policies](/asset-inventory/docs/view-effective-iam-policies) .The ` [serviceAccounts.getIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/getIamPolicy) ` method gets a service account's allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- `` : The ID of your service account. This can either be the service account's email address in the form `` `@` `` `.iam.gserviceaccount.com` , or the service account's unique numeric ID. **Note:** To identify a service account just after it is created, use its numeric ID rather  than its email address.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/SA_ID:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:\nThe response contains the service account's allow policy. For example:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/serviceAccountAdmin\",\n  \"members\": [  \"user:admin@example.com\"\n  ]\n }\n ]\n}\n```\n## Grant or revoke a single role\nYou can use the Google Cloud console and the gcloud CLI to quickly grant or revoke a single role for a single principal, without editing the service account's allow policy directly. Common types of principals include Google accounts, service accounts, Google groups, and domains. For a list of all principal types, see [Concepts related to identity](/iam/docs/overview#concepts_related_identity) .\n**Note:** In general, policy changes take effect within 2 minutes. However, in some cases, it can take 7 minutes or more for changes to propagate across the system.\nIf you need help identifying the most appropriate predefined role, see [Choose predefined roles](/iam/docs/choose-predefined-roles) .\n### Grant a single role\nTo grant a single role to a principal, do the following:\n- In the Google Cloud console, go to the **Service Accounts** page. [Go to Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the email address of the service account.\n- Go to the **Permissions** tab and find the section **Principals with accessto this service account** .\n- Select a principal to grant a role to:- To grant a role to a principal who already has other roles on the service account, find a row containing the principal, then click edit **Editprincipal** in that row, then click add **Add anotherrole** .If you want to grant a role to a [Google-managed serviceaccount](/iam/docs/service-account-types#google-managed) , you must select the **IncludeGoogle-provided role grants** checkbox to see its email address. **Note:** You cannot edit inherited roles when managing access to service accounts. To edit inherited roles, go to the resource where the role was granted.\n- To grant a role to a principal who doesn't have any existing roles on the service account, click person_add **Grant access** , then enter the principal's email address or other identifier.\n- Select a role to grant from the drop-down list. For best security practices, choose a role that includes only the permissions that your principal needs.\n- Optional: Add a [condition](/iam/docs/conditions-overview) to the role.\n- Click **Save** . The principal is granted the role on the service account.\nTo quickly grant a role to a principal, run the [add-iam-policy-binding](/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) command:\n```\ngcloud iam service-accounts add-iam-policy-binding SA_ID \\\u00a0 \u00a0 --member=PRINCIPAL --role=ROLE_NAME \\\u00a0 \u00a0 --condition=CONDITION\n```\nProvide the following values:- `` : The ID of your service account. This can either be the service account's email address in the form `` `@` `` `.iam.gserviceaccount.com` , or the service account's unique numeric ID. **Note:** If you want to identify a service account just after it is created, use the numeric ID rather than the email address to ensure that it is reliably identified.\n- `` : An identifier for the principal, or member, which usually has the following form: `` `:` `` . For example, `user:my-user@example.com` . For a full list of the values that `` can have, see the [Policy Binding reference](/iam/docs/reference/rest/v1/Policy#Binding) .For the principal type `user` , the domain name in the identifier must be a Google Workspace domain or a Cloud Identity domain. To learn how to set up a Cloud Identity domain, see the [overview of Cloud Identity](/identity/docs/overview) .\n- `` : The name of the role that you want to grant. Use one of the following formats:- Predefined roles:`roles/` `` `.` ``\n- Project-level custom roles:`projects/` `` `/roles/` ``\n- Organization-level custom roles:`organizations/` `` `/roles/` ``\nFor a list of predefined roles, see [Understandingroles](/iam/docs/understanding-roles) .\n- `` : Optional. The condition to add to the role binding. For more information about conditions, see the [conditions overview](/iam/docs/conditions-overview) .\nFor example, to grant the Service Account User role to the user `my-user@example.com` for the service account `my-service-account@my-project.iam.gserviceaccount.com` :\n```\ngcloud iam service-accounts add-iam-policy-binding my-service-account@my-project.iam.gserviceaccount.com \\\u00a0 \u00a0 --member=user:my-user@example.com --role=roles/iam.serviceAccountUser\n```\n### Revoke a single role\nTo revoke a single role from a principal, do the following:\n- In the Google Cloud console, go to the **Service Accounts** page. [Go to Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the email address of the service account.\n- Go to the **Permissions** tab and find the section **Principals with accessto this service account** .\n- Find the row with the email address of the principal whose access you want to revoke. Then, click edit **Edit principal** in that row. **Note:** You cannot edit inherited roles when managing access to service accounts. To edit inherited roles, go to the resource where the role was granted.\n- Click the **Delete** delete button for the role that you want to revoke, and then click **Save** .\nTo quickly revoke a role from a user, run the [remove-iam-policy-binding](/sdk/gcloud/reference/iam/service-accounts/remove-iam-policy-binding) command:\n```\ngcloud iam service-accounts remove-iam-policy-binding SA_ID \\\u00a0 \u00a0 --member=PRINCIPAL --role=ROLE_NAME\n```\nProvide the following values:- `` : The ID of your service account. This can either be the service account's email address in the form `` `@` `` `.iam.gserviceaccount.com` , or the service account's unique numeric ID. **Note:** If you want to identify a service account just after it is created, use the numeric ID rather than the email address to ensure that it is reliably identified.\n- `` : An identifier for the principal, or member, which usually has the following form: `` `:` `` . For example, `user:my-user@example.com` . For a full list of the values that `` can have, see the [Policy Binding reference](/iam/docs/reference/rest/v1/Policy#Binding) .For the principal type `user` , the domain name in the identifier must be a Google Workspace domain or a Cloud Identity domain. To learn how to set up a Cloud Identity domain, see the [overview of Cloud Identity](/identity/docs/overview) .\n- `` : The name of the role that you want to revoke. Use one of the following formats:- Predefined roles:`roles/` `` `.` ``\n- Project-level custom roles:`projects/` `` `/roles/` ``\n- Organization-level custom roles:`organizations/` `` `/roles/` ``\nFor a list of predefined roles, see [Understandingroles](/iam/docs/understanding-roles) .\nFor example, to revoke the Service Account User role from the user `my-user@example.com` for the service account `my-service-account@my-project.iam.gserviceaccount.com` :\n```\ngcloud iam service-accounts remove-iam-policy-binding my-service-account@my-project.iam.gserviceaccount.com \\\u00a0 \u00a0 --member=user:my-user@example.com --role=roles/iam.serviceAccountUser\n```\n## Grant or revoke multiple roles using the Google Cloud console\nYou can use the Google Cloud console to grant and revoke multiple roles for a single principal:\n- In the Google Cloud console, go to the **Service Accounts** page. [Go to Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the email address of the service account.\n- Go to the **Permissions** tab and find the section **Principals with accessto this service account** .\n- Select the principal whose roles you want to modify:- To modify roles for a principal who already has roles on the service account, find a row containing the principal, then click edit **Editprincipal** in that row, then click add **Add anotherrole** .If you want to modify roles for a [Google-managed serviceaccount](/iam/docs/service-account-types#google-managed) , you must select the **IncludeGoogle-provided role grants** checkbox to see its email address. **Note:** You cannot edit inherited roles when managing access to service accounts. To edit inherited roles, go to the resource where the role was granted.\n- To grant roles to a principal who doesn't have any existing roles on the service account, click person_add **Grant access** , then enter the principal's email address or other identifier.\n- Modify the principal's roles:- To grant a role to a principal who doesn't have any existing roles on the resource, click **Select a role** , then select a role to grant from the drop-down list.\n- To grant an additional role to the principal, click **Add another role** , then select a role to grant from the drop-down list.\n- To replace one of the principal's roles with a different role, click the existing role, then choose a different role to grant from the drop-down list.\n- To revoke one of the principal's roles, click the **Delete** deletebutton for each role that you want to revoke.\nYou can also [add a condition](/iam/docs/managing-conditional-role-bindings#add) to a role, [modify a role'scondition](/iam/docs/managing-conditional-role-bindings#modify) , or [remove a role'scondition](/iam/docs/managing-conditional-role-bindings#removing) .\n- Click **Save** .\n[](None)\n## Grant or revoke multiple roles programmatically\nTo make large-scale access changes that involve granting and revoking multiple roles for multiple principals, use the pattern to update the service account's allow policy:\n- Read the current allow policy by calling`getIamPolicy()`.\n- Edit the allow policy, either by using a text editor or programmatically, to add or remove any principals or role bindings.\n- Write the updated allow policy by calling`setIamPolicy()`.\nThis section shows how to use the gcloud CLI and the REST API to update the allow policy. You can also update the allow policy using the [IAM client libraries](/iam/docs/client-libraries#iam) .\n**Note:** In general, policy changes take effect within 2 minutes. However, in some cases, it can take 7 minutes or more for changes to propagate across the system.\n### Get the current allow policy\nTo get the allow policy for the service account, run the [get-iam-policy](/sdk/gcloud/reference/iam/service-accounts/get-iam-policy) command for the service account:\n```\ngcloud iam service-accounts get-iam-policy SA_ID --format=FORMAT > PATH\n```\nProvide the following values:- `` : The ID of your service account. This can either be the service account's email address in the form `` `@` `` `.iam.gserviceaccount.com` , or the service account's unique numeric ID. **Note:** If you want to identify a service account just after it is created, use the numeric ID rather than the email address to ensure that it is reliably identified.\n- `` : The desired format for the allow policy. Use `json` or `yaml` .\n- `` : The path to a new output file for the allow policy.\nFor example, the following command gets the allow policy for the service account `my-service-account` and saves it to your home directory in JSON format:\n```\ngcloud iam service-accounts get-iam-policy my-service-account --format json > ~/policy.json\n```The ` [serviceAccounts.getIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/getIamPolicy) ` method gets a service account's allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- `` : The ID of your service account. This can either be the service account's email address in the form `` `@` `` `.iam.gserviceaccount.com` , or the service account's unique numeric ID. **Note:** To identify a service account just after it is created, use its numeric ID rather  than its email address.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/SA_ID:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:\nThe response contains the service account's allow policy. For example:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/serviceAccountAdmin\",\n  \"members\": [  \"user:admin@example.com\"\n  ]\n }\n ]\n}\n```\nSave the response in a file of the appropriate type ( `json` or `yaml` ).\n### Modify the allow policy\nProgrammatically or using a text editor, modify the local copy of your service account's allow policy to reflect the roles you want to grant or revoke to given users.\nTo ensure that you do not overwrite other changes, do not edit or remove the allow policy's `etag` field. The `etag` field identifies the current state of the allow policy. When you [set the updated allow policy](#setting-policy) , IAM compares the `etag` value in the request with the existing `etag` , and only writes the allow policy if the values match.\n**Important:** None of your changes to the allow policy will take effect until you [set the updated allow policy](#setting-policy) .\nTo edit the roles that an allow policy grants, you need to edit the role bindings in the allow policy. Role bindings have the following format:\n```\n{\u00a0 \"role\": \"ROLE_NAME\",\u00a0 \"members\": [\u00a0 \u00a0 \"PRINCIPAL_1\",\u00a0 \u00a0 \"PRINCIPAL_2\",\u00a0 \u00a0 ...\u00a0 \u00a0 \"PRINCIPAL_N\"\u00a0 ],\u00a0 \"conditions:\" {\u00a0 \u00a0 CONDITIONS\u00a0 }}\n```\nThe placeholders have the following values:\n- `` : The name of the role that you want to grant. Use one of the following formats:- Predefined roles:`roles/` `` `.` ``\n- Project-level custom roles:`projects/` `` `/roles/` ``\n- Organization-level custom roles:`organizations/` `` `/roles/` ``\nFor a list of predefined roles, see [Understandingroles](/iam/docs/understanding-roles) .\n- `` , `` , `...` `` : Identifiers for the principals that you want to grant the role to.Principal identifiers usually have the following form: `` `:` `` . For example, `user:my-user@example.com` . For a full list of the values that `` can have, see the [Policy Binding reference](/iam/docs/reference/rest/v1/Policy#Binding) .For the principal type `user` , the domain name in the identifier must be a Google Workspace domain or a Cloud Identity domain. To learn how to set up a Cloud Identity domain, see the [overview of Cloud Identity](/identity/docs/overview) .\n- `` : Optional. Any [conditions](/iam/docs/conditions-overview) that specify when access will be granted.To grant roles to your principals, modify the role bindings in the allow policy. To learn what roles you can grant, see [Understanding roles](/iam/docs/understanding-roles) , or [view grantable roles](/iam/docs/viewing-grantable-roles) for the service account. If you need help identifying the most appropriate predefined roles, see [Choose predefined roles](/iam/docs/choose-predefined-roles) .\nOptionally, you can use [conditions](/iam/docs/conditions-overview) to grant roles only when certain requirements are met.\nTo grant a role that is already included in the allow policy, add the principal to an existing role binding:\nEdit the allow policy by adding the principal to an existing role binding. Note that this change will not take effect until you [set the updated allow policy](#setting-policy) .\nFor example, imagine the allow policy contains the following role binding, which grants the Service Account User role ( `roles/iam.serviceAccountUser` ) to `kai@example.com` :\n```\n{\u00a0 \"role\": \"roles/iam.serviceAccountUser\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:kai@example.com\"\u00a0 ]}\n```\nTo grant that same role to `raha@example.com` , add `raha@example.com` to the existing role binding:\n```\n{\u00a0 \"role\": \"roles/iam.serviceAccountUser\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:kai@example.com\",\u00a0 \u00a0 \"user:raha@example.com\"\u00a0 ]}\n```Edit the allow policy by adding the principal to an existing role binding. Note that this change will not take effect until you [set the updated allow policy](#setting-policy) .\nFor example, imagine the allow policy contains the following role binding, which grants the Service Account User role ( `roles/iam.serviceAccountUser` ) to `kai@example.com` :\n```\n{\u00a0 \"role\": \"roles/iam.serviceAccountUser\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:kai@example.com\"\u00a0 ]}\n```\nTo grant that same role to `raha@example.com` , add `raha@example.com` to the existing role binding:\n```\n{\u00a0 \"role\": \"roles/iam.serviceAccountUser\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:kai@example.com\",\u00a0 \u00a0 \"user:raha@example.com\"\u00a0 ]}\n```\nTo grant a role that is not yet included in the allow policy, add a new role binding:\nEdit the allow policy by adding a new role binding that grants the role to the principal. This change will not take effect until you [set the updated allow policy](#setting-policy) .\nFor example, to grant the Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ) to `raha@example.com` , add the following role binding to the `bindings` array for the allow policy:\n```\n{\u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:raha@example.com\"\u00a0 ]}\n```Edit the allow policy by adding a new role binding that grants the role to the principal. This change will not take effect until you [set the updated allow policy](#setting-policy) .\nFor example, to grant the Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ) to `raha@example.com` , add the following role binding to the `bindings` array for the allow policy:\n```\n{\u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:raha@example.com\"\u00a0 ]}\n```\nTo revoke a role, remove the principal from the role binding. If there are no other principals in the role binding, remove the entire role binding from the allow policy.\n**Note:** Role bindings with no principals are not allowed and will result in an error when setting the allow policy.\nEdit the allow policy by removing the principal or the entire role binding. This change will not take effect until you [set the updated allow policy](#setting-policy) .\nFor example, imagine the allow policy contains the following role binding, which grants `kai@example.com` and `raha@example.com` the Service Account User role ( `roles/iam.serviceAccountUser` ):\n```\n{\u00a0 \"role\": \"roles/iam.serviceAccountUser\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:kai@example.com\",\u00a0 \u00a0 \"user:raha@example.com\"\u00a0 ]}\n```\nTo revoke the role from `kai@example.com` , remove `kai@example.com` from the role binding:\n```\n{\u00a0 \"role\": \"roles/iam.serviceAccountUser\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:raha@example.com\"\u00a0 ]}\n```\nTo revoke the role from both `kai@example.com` and `raha@example.com` , remove the role binding from the allow policy.Edit the allow policy by removing the principal or the entire role binding. This change will not take effect until you [set the updated allow policy](#setting-policy) .\nFor example, imagine the allow policy contains the following role binding, which grants `kai@example.com` and `raha@example.com` the Service Account User role ( `roles/iam.serviceAccountUser` ):\n```\n{\u00a0 \"role\": \"roles/iam.serviceAccountUser\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:kai@example.com\",\u00a0 \u00a0 \"user:raha@example.com\"\u00a0 ]}\n```\nTo revoke the role from `kai@example.com` , remove `kai@example.com` from the role binding:\n```\n{\u00a0 \"role\": \"roles/iam.serviceAccountUser\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:raha@example.com\"\u00a0 ]}\n```\nTo revoke the role from both `kai@example.com` and `raha@example.com` , remove the role binding from the allow policy.\n### Set the allow policy\nAfter you modify the allow policy to grant and revoke the desired roles, call `setIamPolicy()` to make the updates.\n**Warning:** Setting a new allow policy permanently overwrites the existing allow policy on the service account. To avoid removing role bindings unintentionally, always follow the read-modify-write pattern when updating an allow policy: read the existing policy, modify it as needed, and then write the updated version of the allow policy.\nTo set the allow policy for the resource, run the [set-iam-policy](/sdk/gcloud/reference/iam/service-accounts/get-iam-policy) command for the service account:\n```\ngcloud iam service-accounts set-iam-policy SA_ID PATH\n```\nProvide the following values:- `` : The ID of your service account. This can either be the service account's email address in the form `` `@` `` `.iam.gserviceaccount.com` , or the service account's unique numeric ID. **Note:** If you want to identify a service account just after it is created, use the numeric ID rather than the email address to ensure that it is reliably identified.\n- `` : The path to a file that contains the new allow policy.\nThe response contains the updated allow policy.\nFor example, the following command sets the allow policy stored in `policy.json` as the allow policy for the service account `my-service-account@my-project.iam.gserviceaccount.com` :\n```\ngcloud iam service-accounts set-iam-policy my-service-account@my-project.iam.gserviceaccount.com \\\u00a0 \u00a0 ~/policy.json\n```\n **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.The ` [serviceAccounts.setIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/setIamPolicy) ` method sets an updated allow policy for the service account.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- `` : The ID of your service account. This can either be the service account's email address in the form `` `@` `` `.iam.gserviceaccount.com` , or the service account's unique numeric ID. **Note:** To identify a service account just after it is created, use its numeric ID rather  than its email address.\n- `` : A JSON representation of the policy that you want to set. For more information about the format of a policy, see the [Policy reference](/iam/docs/reference/rest/v1/Policy) .For example, to set the allow policy shown in the previous step, replace `` with the following:```\n{\u00a0 \"version\": 1,\u00a0 \"etag\": \"BwUqLaVeua8=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountUser\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:robin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/SA_ID:setIamPolicy\n```\nRequest JSON body:\n```\n{\n \"policy\": POLICY\n}\n```\nTo send your request, expand one of these options:\nThe response contains the updated allow policy.\n **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\n## What's next\n- Learn which roles to grant to allow principals to [authenticate as service accounts](/iam/docs/service-account-permissions) .\n- Find out how to [choose the most appropriate predefined roles](/iam/docs/choose-predefined-roles) .\n- Review [Best practices for working with serviceaccounts](/iam/docs/best-practices-service-accounts) to learn how to use service accounts securely.\n- Learn how to [manage access to projects, folders, andorganizations](/iam/docs/granting-changing-revoking-access) .\n- Learn the general steps for [managing access to other resources](/iam/docs/manage-access-other-resources) .\n- Learn how to make a principal's access conditional with [conditional role bindings](/iam/docs/conditions-overview) .", "guide": "IAM"}