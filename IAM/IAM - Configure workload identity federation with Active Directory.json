{"title": "IAM - Configure workload identity federation with Active Directory", "url": "https://cloud.google.com/iam/docs/workload-identity-federation-with-active-directory", "abstract": "# IAM - Configure workload identity federation with Active Directory\nThis guide describes how to use workload identity federation to let workloads use Active Directory credentials to authenticate to Google Cloud.\nIf you're running Windows Server workloads in an Active Directory environment, then these workloads might have access to Active Directory credentials. For example:\n- A Windows Service might be configured to log on as a domain user.\n- An IIS application might be configured to run as a group managed service account (gMSA).\nBy using workload identity federation in combination with Active Directory Federation Services (AD FS), you can let these workloads exchange their Active Directory Kerberos credentials for short-lived Google Cloud credentials. Workloads can use these short-lived credentials to access Google Cloud APIs.\nExchanging Active Directory credentials against short-lived Google Cloud credentials works by [chaining two token exchanges](/iam/docs/best-practices-for-using-workload-identity-federation#additional-token-exchange) :\n- A workload uses OpenID Connect (OIDC), SAML-POST, or WS-Trust to request an OIDC token or SAML assertion from AD FS. To authenticate to AD FS, the workload uses [integrated Windows authentication (IWA)](https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/integrated-windows-authentication) and its existing Active Directory credentials.\n- The workload then uses workload identity federation to exchange the OIDC token or SAML assertion against an Security Token Service token and, optionally, to impersonate a Google Cloud service account.\nThis article shows you how you can automate this process in a way that doesn't require changes to your application by using the [Workload Authenticator for Windows](https://github.com/GoogleCloudPlatform/iam-windows-authenticator) .\n", "content": "## Prepare AD FS\nYou only need to perform these steps once.\n### Select a protocol\nThe way to prepare AD FS depends on which protocol you want to use:\n- SAML: You can let workloads use SAML or WS-Trust to obtain SAML assertions.To use SAML or WS-Trust, you create a in AD FS and configure a workload identity pool to trust assertions issued for this relying party.A workload can use its Active Directory user to authenticate to AD FS either by using the SAML-POST binding or WS-Trust. AD FS then issues a SAML assertion that contains information about the workload's Active Directory user and additional information such as group memberships.Using SAML or WS-Trust requires AD FS 3.0, AD FS for Windows Server 2016, or a newer version of AD FS.\n- OIDC: You can let workloads use OIDC to obtain OIDC tokens.To use OIDC, you create an OIDC client ( ) and an OIDC resource ( ) in AD FS. You then configure a workload identity pool to trust access tokens issued for the .A workload can use its Active Directory user and the OAuth `client_credentials` grant to authenticate to AD FS. AD FS then issues an access token, but no ID token.The access token contains information about the OIDC client application, but doesn't include any information about the workload's Active Directory user or its group memberships.Because access tokens don't contain any information about the Active Directory user, using OIDC can be less flexible than using SAML or WS-Trust.Using OIDC requires AD FS for Windows Server 2016 or a newer version of AD FS.\nFor sign-in, your IdP must provide signed authentication information: OIDC IdPs must provide a JWT, and SAML IdP responses must be signed.\n### IWA prerequisites\nThis section describes IWA prerequisites that are required in order to use this guide.\nIf you haven't used IWA with AD FS before, make sure that you meet the following prerequisites:\n- You've [configured AD FS to allow Windows Authentication](https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/configure-authentication-policies) and [to use the right service principal name](https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/troubleshooting/ad-fs-tshoot-iwa#spn-misconfiguration) .\n- You've configured [extended protection for authentication](https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/design/best-practices-for-secure-planning-and-deployment-of-ad-fs) so that it's compatible with your AD FS deployment.\n### Register the workload\nTo register your workload in AD FS, do the following:\nTo let workloads use OIDC, you need two [application registrations](https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/development/ad-fs-openid-connect-oauth-concepts#application-types) in AD FS:- An application registration of type **native application** or **server application** .\n- An application registration of type **Web API** that corresponds to a workload identity pool provider on Google Cloud.\n **Registering the client application** \nCreate a client application that represents the workload. If you have multiple workloads that need access to Google Cloud, you might need to create multiple client applications.\nTo register a client application in AD FS, do the following:- Open the AD FS MMC snap-in and navigate to **Application Groups** .\n- Click **Add application group** .\n- On the **Welcome** page, do the following:- In the text field, enter a name for the client.\n- Select **Server application** .\n- Click **Next** .\n- On the **Server application** page, do the following:- In the **** text field, enter a client identifier (Client ID) and a redirect URI.If you're only planning to use the `client_credentials` grant type, the redirect URI won't be used and you can use a URI such as `http://localhost/` .\n- Click **Next** .\n- On the **Configure application credentials** page, do the following:- Choose how the client authenticates. To use IWA, set **Windows Integrated Authentication** to **enabled** .\n- Select the domain user that your application is configured to run as.\n- Click **Next** .\n- On the **Summary** page, review the settings and click **Next** .\n- Click **Close** to dismiss the dialog.\n **Creating a Web API application for the workload identity pool** \nCreate another application registration of type **Web API** . This application corresponds to a workload identity pool provider, and you use it to set up a trust relationship to Google Cloud.\nTo create the application in AD FS, do the following:- Open the AD FS MMC snap-in and navigate to **Application Groups** .\n- Click **Add application group** .\n- On the **Welcome page** , enter a name such as`Workload Identity Federation (test environment)`and select **Web API** . Then click **Next** .\n- On the **Configure Web API** page, enter a relying party identifier for the Web API.Instead of defining a custom relying party identifier, you can use the following URI as relying party identifier:```\nhttps://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/WORKLOAD_POOL_ID/providers/PROVIDER_ID\n```Replace the following:- ``: the [project number](/resource-manager/docs/creating-managing-projects) of the Google Cloud project that you use to create workload identity pool.\n- ``: an ID of your choice that identifies the workload identity pool. You must use the same ID when creating the workload identity pool later.\n- ``: an ID of your choice that identifies the workload identity pool provider. You must use the same ID when you create the workload identity pool provider later.\nFormatting the URI this way ensures that the relying party identifier uniquely identifies a workload identity pool provider.You need the relying party identifier later when you configure the workload identity pool provider.\n- Click **Next** .\n- On the **Apply access control policy** page, select an appropriate [access policy](https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/access-control-policies-in-ad-fs#access-control-policy-templates-in-ad-fs) , then click **Next** .\n- On the **Configure application permissions** page, add the client application that you created previously. Then click **Next** .\n- On the **Summary** page, review the settings and click **Next** .\n- Click **Close** to dismiss the dialog.\nCreate a relying party trust in AD FS:- Open the AD FS MMC snap-in.\n- Navigate to **Relying party trusts** .\n- Click **Add relying party trust** .\n- On the **Welcome** page of the **Add relying party trust** wizard, do the following:- Select **Claims aware** \n- Click **Start** .\n- On the **Select data source** page, do the following:- Select **Enter data about the relying party manually** .\n- Click **Next** .\n- On the **Specify display name** page, do the following:- Enter a name for the trust.\n- Click **Next** .\n- On the **Configure certificate** page, click **Next** . While workload identity federation supports encrypted SAML, it is not described in this procedure. To learn more, see the gcloud CLI instructions in [Create the identity pool and provider](#create-pool-provider) , later in this guide.\n- On the **Configure URL** page, do the following:\nUse the following settings:- Set **Enable support for the SAML 2.0 WebSSO protocol** to **enabled** \n- In the **Relying party SAML 2.0 SSO service URL** field, enter the following URL:```\nhttps://sts.googleapis.com/v1/token\n```\nKeep the default settings\n- Click **Next** .\n- On the **Configure identifiers** page, enter a relying party identifier.Instead of defining a custom relying party identifier, you can use the following URI as relying party identifier:```\nhttps://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/WORKLOAD_POOL_ID/providers/PROVIDER_ID\n```Replace the following:- ``: the [project number](/resource-manager/docs/creating-managing-projects) of the Google Cloud project that you use to create workload identity pool.\n- ``: an ID of your choice that identifies the workload identity pool. You must use the same ID when creating the workload identity pool later.\n- ``: an ID of your choice that identifies the workload identity pool provider. You must use the same ID when creating the workload identity pool provider later.\nFormatting the URI this way ensures that the relying party identifier uniquely identifies a workload identity pool provider.You need the relying party identifier later when you configure the workload identity pool provider.\n- Click **Next** .\n- On the **Choose access control policy** page, select an appropriate [access control policy](https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/access-control-policies-in-ad-fs#access-control-policy-templates-in-ad-fs) , then click **Next** .\n- On the **Ready to add trust** page, review the settings and click **Next** .\n- On the **Finish** page, click **Close** to dismiss the dialog.\nTo be compatible with workload identity federation, SAML assertions must contain at least one [claim](https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/technical-reference/the-role-of-claims) that uniquely identifies the Active Directory user. Typically, you use the **Name ID** claim for this purpose, which corresponds to the value of the `NameID` element in the SAML assertion.\nTo customize the SAML assertion's set of claims, you must edit the relying party trust's claim issuance policy. To edit the claim issuance policy, do the following:- In the list of relying party trusts, select the trust that you just created and click **Edit claim issuance policy** .\n- Click **Add rule** \n- On the **Choose rule type** page of the **Add transform claim rule** wizard, do the following:- Select **Transform an incoming claim** .\n- Click **Next** .\n- On the **Configure claim rule** page, configure the following settings:- **Claim rule name** :`Name Identifier`.\n- **Incoming claim type** : Select **Primary SID** , **UPN** , or a different claim to uniquely identify the subject.\n- **Outgoing claim type** : **Name ID** .\n- **Outgoing name ID format** : **Unspecified** .\n- Select **Pass through all claim values** and click **Finish** .\n- Optionally, [configure additional rules](https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/configure-claim-rules) to include more attributes in the SAML assertions.\n- Click **OK** to close the claim issuance policy dialog.## Configure workload identity federation\nYou only need to perform these steps once per Azure AD tenant or AWS account want to federate with. You can then use the same workload identity pool and provider for multiple workloads and across multiple Google Cloud projects.\nTo start configuring workload identity federation, do the following:\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- It's best to\n- [use a dedicated project to manage workload identity pools and providers](/iam/docs/best-practices-for-using-workload-identity-federation#dedicated-project) \n- .\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the IAM, Resource Manager, Service Account Credentials, and Security Token Service APIs.\n- [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com,cloudresourcemanager.googleapis.com,iamcredentials.googleapis.com,sts.googleapis.com&redirect=https://console.cloud.google.com) \n### Define an attribute mapping and condition\nThe environment-specific credentials of your AWS or Azure workload contain multiple attributes, and you must decide which attribute you want to use as subject identifier ( `google.subject` ) in Google Cloud.\nOptionally, you can [map additional attributes](/iam/docs/workload-identity-federation#mapping) . You can then refer to these additional attributes when granting access to resources.\nYour attribute mappings can use the [claims embedded in AD FS access tokens](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/ee913589(v=ws.11)?redirectedfrom=MSDN#what-are-claim-types) as source attributes.\nTo authenticate an application, you can use the following attribute mapping:\n```\ngoogle.subject=assertion.appid\n```\nThis mapping sets `google.subject` to the value of the `appid` claim, which contains the Client ID of the AD FS application.\nYour attribute mappings can use the claims embedded in the assertion issued by AD FS, as described earlier in this guide.\nUse the following mapping to let workload identity federation use the **Name ID** claim from the SAML assertion to uniquely identify the user:\n```\ngoogle.subject=assertion.subject\n```\nIf you've configured your claim issuance policy to include additional claims in SAML assertions, you can add additional mappings. For example:\n```\ngoogle.groups=assertion.attributes['http://schemas.microsoft.com/ws/2008/06/identity/claims/groupsid']\nattribute.userip=['http://schemas.microsoft.com/2014/09/requestcontext/claims/userip'][0]\n```\nOptionally, define an [attribute condition](/iam/docs/workload-identity-federation#conditions) . Attribute conditions are CEL expressions that can check assertion attributes and target attributes. If the attribute condition evaluates to `true` for a given credential, the credential is accepted. Otherwise, the credential is rejected.\nYou can use an attribute condition to restrict which clients can use workload identity federation to obtain short-lived Google Cloud tokens.\nFor example, the following condition defines that applications have to use IWA to authenticate to AD FS:\n```\nassertion.authmethod=='http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/windows'\n```\nTo control the list of applications that can obtain short-lived credential for Google Cloud, do not define attribute conditions. Instead, use [client permissions](https://docs.microsoft.com/en-us/powershell/module/adfs/set-adfsapplicationpermission?view=windowsserver2019-ps) in AD FS to define which applications are allowed.\nYou can use an attribute condition to restrict which Active Directory users can use workload identity federation to obtain short-lived Google Cloud tokens.\nFor example, the following condition only permits SAML assertions that include a certain group membership claim:\n```\n\"S-1-5-6\" in google.groups\n```\n### Create the workload identity pool and provider- In the Google Cloud console, go to the **New workload provider and pool** page. [Go to New workload provider and pool](https://console.cloud.google.com/iam-admin/workload-identity-pools/create) \n- Under **Create an identity pool** , enter the following:- **Name** : Name for the pool. The name is also used as the pool ID. You can't change the pool ID later.\n- **Description** : Text that describes the purpose of the pool.\n- Click **Continue** .\n- Configure provider settings:\n- **Select a provider** : **OpenID Connect (OIDC)** .\n- **Provider name** : the name of the provider. The name is also used as the provider ID. You cannot change the provider ID later.\n- **Issuer URL** :`https://` `` `/adfs`where``is the public domain name of the AD FS server or farm.\nTo configure workload identity federation from a **SAML** 2.0 compatible IdP, you can use the gcloud CLI instructions.\n- Click **Continue** .\n- Under **Configure provider attributes** , add the [attribute mappings that you've identified previously](#mappings-and-conditions) .\n- Under **Attribute conditions** , enter the [attribute condition that you've identified previously](#mappings-and-conditions) . Leave the field blank if you don't have an attribute condition.\n- Click **Save** to create the workload identity pool and provider.\n- Create a new workload identity pool:```\ngcloud iam workload-identity-pools create WORKLOAD_POOL_ID \\\n --location=\"global\" \\\n --description=\"DESCRIPTION\" \\\n --display-name=\"DISPLAY_NAME\"\n```Replace the following:- ``: Unique ID for the pool.\n- ``: Name of the pool.\n- ``: Description of the pool. This description appears when granting access to pool identities.\n- Add a workload identity pool provider:\n```\ngcloud iam workload-identity-pools providers create-oidc PROVIDER_ID \\\n --location=\"global\" \\\n --workload-identity-pool=\"WORKLOAD_POOL_ID\" \\\n --issuer-uri=\"https://ADFS_DOMAIN/adfs\" \\\n --allowed-audiences=\"RELYING_PARTY_ID\" \\\n --attribute-mapping=\"MAPPINGS\" \\\n --attribute-condition=\"CONDITIONS\"\n```\nReplace the following:- ``: a unique ID for the provider.\n- ``: the ID of the pool.\n- ``: the public domain name of the AD FS server or farm.\n- ``: the relying party identifier of the [Web API application for the workload identity pool](#prepare) in AD FS. You only need this parameter if you use a custom relying party identifier.\n- ``: Comma-separated list of [attribute mappings that you've identified previously](#mappings-and-conditions) .\n- ``: [Attribute condition that you've identified previously](#mappings-and-conditions) . Remove the parameter if you don't have an attribute condition.\nThe prefix `gcp-` is reserved and can't be used in a pool or provider ID.\n```\ncurl -O https://ADFS_DOMAIN/federationmetadata/2007-06/federationmetadata.xml\ngcloud iam workload-identity-pools providers create-saml PROVIDER_ID \\\n --location=\"global\" \\\n --workload-identity-pool=\"POOL_ID\" \\\n --idp-metadata-path=\"federationmetadata.xml\" \\\n --attribute-mapping=\"MAPPINGS\" \\\n --attribute-condition=\"CONDITIONS\"\n```\nReplace the following:- ``: a unique ID for the provider.\n- ``: the domain name of your AD FS server or server farm.\n- ``: the ID of the pool.\n- ``: a comma-separated list of [attribute mappings that you've identified previously](#mappings-and-conditions) .\n- ``: Optional: the [attribute condition](#mappings-and-conditions) that you created earlier in this guide.\nThe prefix `gcp-` is reserved and can't be used in a pool or provider ID.\nExample:\n```\ngcloud iam workload-identity-pools providers create-saml example-provider \\\n --location=\"global\" \\\n --workload-identity-pool=\"pool-1\" \\\n --idp-metadata-path=\"federationmetadata.xml\" \\\n --attribute-mapping=google.subject=assertion.subject\"\n```### Optional: Accept encrypted SAML assertions from your IdPTo enable your SAML 2.0 IdP to produce encrypted SAML assertions that can be accepted by workload identity federation, do the following:\n- In workload identity federation, do the following:\n- Create an asymmetric key pair for your workload identity pool provider.\n- Download a certificate file that contains the public key.\n- Configure your SAML IdP to use the public key to encrypt SAML assertions it issues.\n- In your IdP, do the following:\n- Enable assertion encryption, also known as token encryption.\n- Upload the public key that you created in workload identity federation.\n- Confirm that your IdP produces encrypted SAML assertions.\nNote that, even with SAML encryption provider keys configured, workload identity federation can still process a plaintext assertion.\nThis section guides you through creating an asymmetric key pair that enables workload identity federation to accept encrypted SAML assertions.\nGoogle Cloud uses the private key to decrypt the SAML assertions that your IdP issues. To create an asymmetric key pair for use with SAML encryption, run the following command. To learn more, see [Supported SAML encryption algorithms](#supported-saml-encryption-algorithms) .\n```\ngcloud iam workload-identity-pools providers keys create KEY_ID \\\u00a0 \u00a0 --workload-identity-pool WORKLOAD_POOL_ID \\\u00a0 \u00a0 --provider PROVIDER_ID \\\u00a0 \u00a0 --location global \\\u00a0 \u00a0 --use encryption \\\u00a0 \u00a0 --spec KEY_SPECIFICATION\n```\nReplace the following:\n- ``: a key name of your choice\n- ``: the pool ID\n- ``: the provider ID\n- ``: the key specification, which can be one of`rsa-2048`,`rsa-3072`, and`rsa-4096`.\nAfter the key pair is created, to download the public key into a certificate file, execute the following command. Only workload identity federation has access to the private key.\n```\ngcloud iam workload-identity-pools providers keys describe KEY_ID \\\u00a0 \u00a0 --workload-identity-pool WORKLOAD_POOL_ID \\\u00a0 \u00a0 --provider PROVIDER_ID \\\u00a0 \u00a0 --location global \\\u00a0 \u00a0 --format \"value(keyData.key)\" \\\u00a0 \u00a0 > CERTIFICATE_PATH\n```\nReplace the following:\n- ``: the key name\n- ``: the pool ID\n- ``: the provider ID\n- ``: the path to write the certificate to\u2014for example,`saml-certificate.cer`or`saml-certificate.pem`- Move the certificate file to your AD FS server.\n- On your AD FS server, right-click the **Start** button (or press **Win** + **X** ) and click **Windows PowerShell\n (Admin)** .\n- In PowerShell, run the following command to enable encryption:```\n  Set-AdfsRelyingPartyTrust `\n  -TargetName NAME `\n  -SamlResponseSignature MessageAndAssertion `\n  -EncryptionCertificate PATH `\n  -EncryptClaims $True\n \n```Replace the following:- ``: the name of your relying party trust\n- ``: the file path of the   certificate file\nWS-Trust users: This feature is only available when you use SAML.\nAfter you configure your IdP to encrypt SAML assertions, we recommend that you check to make sure that the assertions it generates are actually encrypted. Even with SAML assertion encryption configured, workload identity federation can still process plaintext assertions.\nTo delete SAML encryption keys run the following command:\n```\n\u00a0 gcloud iam workload-identity-pools providers keys delete KEY_ID \\\u00a0 \u00a0 \u00a0 --workload-identity-pool WORKLOAD_POOL_ID \\\u00a0 \u00a0 \u00a0 --provider PROVIDER_ID \\\u00a0 \u00a0 \u00a0 --location global\n```\nReplace the following:\n- ``: the key name\n- ``: the pool ID\n- ``: the provider ID\nWorkload identity federation supports the following key transport algorithms:- [http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p](http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p) \n- [http://www.w3.org/2009/xmlenc11#rsa-oaep\"](http://www.w3.org/2009/xmlenc11#rsa-oaep) \n- [http://www.w3.org/2001/04/xmlenc#rsa-1_5\"](http://www.w3.org/2001/04/xmlenc#rsa-1_5) \nWorkload identity federation supports the following block encryption algorithms:- [http://www.w3.org/2001/04/xmlenc#aes128-cbc](http://www.w3.org/2001/04/xmlenc#aes128-cbc) \n- [http://www.w3.org/2001/04/xmlenc#aes192-cbc](http://www.w3.org/2001/04/xmlenc#aes192-cbc) \n- [http://www.w3.org/2001/04/xmlenc#aes256-cbc](http://www.w3.org/2001/04/xmlenc#aes256-cbc) \n- [http://www.w3.org/2009/xmlenc11#aes128-gcm](http://www.w3.org/2009/xmlenc11#aes128-gcm) \n- [http://www.w3.org/2009/xmlenc11#aes256-gcm](http://www.w3.org/2009/xmlenc11#aes256-gcm) ## Authenticate a workload\nYou must perform these steps once per workload.\n### Create a service account for the external workload\n- Enable the IAM, Security Token Service, and Service Account Credentials APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com,sts.googleapis.com,iamcredentials.googleapis.com&redirect=https://console.cloud.google.com) \n- [Create a service account](/iam/docs/creating-managing-service-accounts#creating) that represents the workload. It's best to [use a dedicated service account for each workload](/iam/docs/best-practices-for-using-workload-identity-federation#use-dedicated-service-accounts) .The service account doesn't need to be in the same project as the workload identity pool.\n- [Grant the service account access](/iam/docs/granting-changing-revoking-access) to resources that you want external identities to access.\n### Allow the external workload to impersonate the service account\nTo allow external identities to impersonate a service account, you grant them the Workload Identity User role ( `roles/iam.workloadIdentityUser` ) on the service account. You can grant the role to a specific external identity, or to multiple external identities:\n- For a specific external identity, write an attribute condition that checks the`google.subject`attribute.\n- For a group of external identities, write an attribute condition that checks the`google.groups`attribute or a custom attribute`attribute.` ``.\n**Note:** You can only check attributes that you've configured in the [attribute mapping](#mappings-and-conditions) in the configuration for your workload identity pool provider.\nTo allow external identities to impersonate a service account using the Google Cloud console, do the following:- In the Google Cloud console, go to the **Workload Identity Pools** page. [Go to Workload Identity Pools](https://console.cloud.google.com/iam-admin/workload-identity-pools) \n- Find the workload identity pool you want to update and select it.\n- To grant access to the selected workload identity pool, click add_box **Grant access** .\n- In the **Service account** list, select the service account for the external identities to impersonate.\n- To choose which identities in the pool can impersonate the service account, perform one of the following actions:- To allow only specific identities of the workload identity pool to impersonate the service account, select **Only identities matching the filter** .In the **Attribute name** list, select the attribute that you want to filter on.In the **Attribute value** field, enter the expected value of the attribute; for example, if you use an [attribute mapping](#mappings-and-conditions) `google.subject=assertion.sub` , set **Attribute** name to `subject` and **Attribute value** to the value of the `sub` claim in tokens issued by your external identity provider.\n- To save the configuration, click **Save** and then **Dismiss** .\nTo allow external identities to impersonate a service account using gcloud CLI, do the following:- To obtain the project number of your current project, execute the following command:```\ngcloud projects describe $(gcloud config get-value core/project) --format=value\\(projectNumber\\)\n```\n- To grant the Workload Identity User role ( `roles/iam.workloadIdentityUser` ) to external identities that meet a certain criteria:\n```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_EMAIL \\\n --role=roles/iam.workloadIdentityUser \\\n --member=\"principal://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/subject/SUBJECT\"\n```\n```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_EMAIL \\\n --role=roles/iam.workloadIdentityUser \\\n --member=\"principalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/group/GROUP\"\n```\n```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_EMAIL \\\n --role=roles/iam.workloadIdentityUser \\\n --member=\"principalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/attribute.ATTRIBUTE_NAME/ATTRIBUTE_VALUE\"\n```\nReplace the following:- ``: the email address of the service account\n- ``: the [project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects) of the project that contains the workload identity pool\n- ``: the pool ID of the workload identity pool\n- ``: the expected value for the attribute that [you've mapped](#mappings-and-conditions) to`google.subject`\n- ``: the expected value for the attribute that [you've mapped](#mappings-and-conditions) to`google.groups`\n- ``: the name of a custom attribute in [your attribute mapping](#mappings-and-conditions) \n **Note:** You must use the project number in the member identifier. Using the project ID is not supported.\n### Create a credential configuration\nYou can let [Cloud Client Libraries](/apis/docs/cloud-client-libraries) and tools such as the gcloud CLI and Terraform use Active Directory credentials to authenticate to Google Cloud by using the [Workload Authenticator for Windows](https://github.com/GoogleCloudPlatform/iam-windows-authenticator/releases/latest/download/wwauth.exe) .\nWorkload Authenticator for Windows is an open-source tool that acts as a plugin for the Cloud Client Libraries and tools such as the gcloud CLI:\n- When the tool or library needs a new credential, it launches the Workload Authenticator in the background.\n- The Workload Authenticator uses OIDC, SAML, or WS-Trust to obtain a new token or SAML assertion from AD FS and passes it back to the tool or library.\n- The tool or library then uses exchanges the token or SAML assertion against short-lived Google Cloud credentials by using workload identity federation.\nTo use the Workload Authenticator for Windows, you must create a credential configuration file. This file defines the following:\n- Where to find the Workload Authenticator for Windows executable (`wwauth.exe`), and which parameters to run it with\n- Which workload identity pool and provider to use\n- Which service account to impersonate\nTo create a credential configuration file, do the following on the Windows Server that runs your workload:\n- Right-click the **Start** button (or press **Win+X** ) and click **Windows PowerShell** .\n- Download the [Workload Authenticator for Windows](https://github.com/GoogleCloudPlatform/iam-windows-authenticator/releases/latest/download/wwauth.exe) and save it to a location that's accessible by your workload:```\n(New-Object Net.WebClient).DownloadFile(\n \"https://github.com/GoogleCloudPlatform/iam-windows-authenticator/releases/latest/download/wwauth.exe\",\n \"${env:ProgramData}\\wwauth.exe\")\n```If you create a credential configuration file by using the Workload Authenticator for Windows, the file contains the path to its executable. If you later delete or move the executable, workloads won't be able to find and use the executable.\n- Launch `wwauth.exe` :```\n& ${env:ProgramData}\\wwauth.exe\n```A configuration dialog opens:\n- Select the **AD FS** tab and enter the following settings:- **Issuer URI of AD FS server** : Public URI of your AD FS server or farm.```\nhttps://ADFS_DOMAIN/adfs/\n```Replace `` with the public domain name of your AD FS server or server farm.\nThe next settings depend on the protocol you want to use:\n- **Protocol** : **AdfsOidc** \n- **Relying party ID** : Keep the default.\n- **Client ID** Client identifier (Client ID) of the [server application](#prepare) in AD FS.\n- **Protocol** : **AdfsSamlPost** \n- **Assertion consumer service URL** :`https://sts.googleapis.com/v1/token`.\n- **Sign requests using certificate** : **disabled** \n- **Protocol** : **AdfsWsTrust** - Select the **Workload identity** tab and enter the following settings:- **Project number** : Project number of the project that contains the workload identity pool\n- **Pool ID** : ID of the workload identity pool\n- **Provider ID** : ID of the workload identity pool provider\n- **Impersonate service account** : **enabled** \n- **Email address** : Email address of the service account\n- Select the **AD FS** tab and verify that the **Relying Party ID** field now contains the URL of your workload identity pool provider.\n- Click **Apply** and choose a file location to save the credential configuration file to.Unlike a [service account key](/iam/docs/creating-managing-service-account-keys#creating_service_account_keys) , a credential configuration file doesn't contain any secrets and doesn't need to be kept confidential. Details about the credential configuration file are available at [https://google.aip.dev/auth/4117](https://google.aip.dev/auth/4117) .\nYou're now ready to test your configuration:\n- Select an Active Directory user to test with. This can be the Active Directory user of the workload or the user you're currently logged in with.\n- To test the configuration with your current user, click **Test** .To test with a different user, select **Test > Test configuration as user** and enter the credentials for the user.The tool now tries to authenticate to Google Cloud by performing the following steps:- Acquire an OIDC token or SAML assertion from AD FS.\n- Obtain a Google Security Token Service token.\n- Impersonate the service account.\nIf the authentication succeeds, you see the message :\n### Using the credential configuration to access Google Cloud\nTo let tools and client libraries use your credential configuration, do the following on the Windows Server that runs your workload:\n- Right-click the **Start** button and click **Run** .\n- Enter`sysdm.cpl`and click **OK** .\n- On the **Advanced** tab, click **Environment variables** .\n- In the **System variables** section, add two new variables:| Name          | Value          |\n|:------------------------------------------|:------------------------------------------|\n| GOOGLE_APPLICATION_CREDENTIALS   | Path to the credential configuration file |\n| GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES | 1           |\n- Click **OK** .\n- Use a client library or tool that supports workload identity federation and can [find credentials automatically](/docs/authentication/client-libraries) :\nThe [Google Cloud Client Libraries for C++](/cpp/docs) support workload identity federation since version [v2.6.0](https://github.com/googleapis/google-cloud-cpp/releases/tag/v2.6.0) . To use workload identity federation, you must build the client libraries with version 1.36.0 or later of gRPC.\nClient libraries for Go support identity federation if they use version v0.0.0-20210218202405-ba52d332ba99 or later of the `golang.org/x/oauth2` module.\nTo check which version of this module your client library uses, run the following commands:\n```\ncd $GOPATH/src/cloud.google.com/gogo list -m golang.org/x/oauth2\n```\nClient libraries for Java support identity federation if they use version 0.24.0 or later of the [com.google.auth:google-auth-library-oauth2-http artifact](https://search.maven.org/artifact/com.google.auth/google-auth-library-oauth2-http) .\nTo check which version of this artifact your client library uses, run the following Maven command in your application directory:\n```\nmvn dependency:list -DincludeArtifactIds=google-auth-library-oauth2-http\n```\nClient libraries for Node.js support workload identity federation if they use version 7.0.2 or later of the [google-auth-library package](https://github.com/googleapis/google-auth-library-nodejs) .\nTo check which version of this package your client library uses, run the following command in your application directory:\n```\nnpm list google-auth-library\n```\nWhen you create a `GoogleAuth` object, you can specify a project ID, or you can allow `GoogleAuth` to find the project ID automatically. To find the project ID automatically, the service account in the configuration file must have the Browser role ( `roles/browser` ), or a role with equivalent permissions, on your project. For details, see the [README for the google-auth-library package](https://github.com/googleapis/google-auth-library-nodejs#using-external-identities) .\nClient libraries for Python support identity federation if they use version 1.27.0 or later of the [google-auth package](https://github.com/googleapis/google-auth-library-python) .\nTo check which version of this package your client library uses, run the following command in the environment where the package is installed:\n```\npip show google-auth\n```\nTo specify a project ID for the authentication client, you can set the `GOOGLE_CLOUD_PROJECT` environment variable, or you can allow the client to find the project ID automatically. To find the project ID automatically, the service account in the configuration file must have the Browser role ( `roles/browser` ), or a role with equivalent permissions, on your project. For details, see the [user guide for the google-auth package](https://github.com/googleapis/google-auth-library-python/blob/master/docs/user-guide.rst#using-external-identities) .\nTo authenticate using workload identity federation, use the [gcloud auth login](/sdk/gcloud/reference/auth/login) command:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nReplace `` with the file path to the credential configuration file.\nSupport for workload identity federation in gcloud CLI is available in [version 363.0.0 and later versions of the gcloud CLI](/sdk/docs/components#updating_components) .\nThe [Google Cloud provider](https://registry.terraform.io/providers/hashicorp/google/latest/docs) supports workload identity federation if you use version 3.61.0 or later:\n```\nterraform {\n required_providers {\n google = {\n  source = \"hashicorp/google\"\n  version = \"~> 3.61.0\"\n }\n }\n}\n```\nTo authenticate using workload identity federation, use one of the following methods:\nWhen you use gsutil in conjunction with gcloud, sign in as normal:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nWhen you use gsutil as a stand-alone command-line application, edit the .boto file to include the following section:\n```\n[Credentials]\ngs_external_account_file = FILEPATH\n```\nReplace `` , in both cases, with the file path to the credential configuration file.\nSupport for workload identity federation in gsutil is available in [version 379.0.0 and later versions of the gcloud CLI](/sdk/docs/components#updating_components) .\nTo authenticate using workload identity federation, use the [gcloud auth login](/sdk/gcloud/reference/auth/login) command, as follows:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nReplace `` with the file path to the credential configuration file.\nSupport for workload identity federation in bq is available in [version 390.0.0 and later versions of the gcloud CLI](/sdk/docs/components#updating_components) .## What's next\n- Read more about [workload identity federation](/iam/docs/workload-identity-federation) .\n- Learn about [best practices for using workload identity federation](/iam/docs/best-practices-for-using-workload-identity-federation) .\n- See how you can [manage workload identity pools and providers](/iam/docs/manage-workload-identity-pools-providers) .", "guide": "IAM"}