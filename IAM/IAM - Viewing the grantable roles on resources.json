{"title": "IAM - Viewing the grantable roles on resources", "url": "https://cloud.google.com/iam/docs/viewing-grantable-roles", "abstract": "# IAM - Viewing the grantable roles on resources\nBefore you grant an Identity and Access Management (IAM) role to a user for a resource, you might want to know what roles are available to grant on a particular resource.\n", "content": "## Before you begin\n- Enable the IAM API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com&redirect=https://console.cloud.google.com) \n- Set up authentication.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.You can use the gcloud CLI samples on this page from  either of the following development environments:- **Cloud Shell** : To use an online terminal with the   gcloud CLI already set up, activate Cloud Shell.At the bottom of this page, a Cloud Shell session starts    and displays a command-line prompt. It can take a few seconds for    the session to initialize.\n- **Local shell** : To use the gcloud CLI in a local   development environment, [install](/sdk/docs/install) and [initialize](/sdk/docs/initializing) the gcloud CLI.\nTo use the C++ samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the .NET samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Go samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Java samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Python samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```\n### Required roles\nTo get the permission that you need to list grantable roles,   ask your administrator to grant you the [Security Reviewer ](https://cloud.google.com/iam/docs/understanding-roles#iam.securityReviewer) ( `roles/iam.securityReviewer` ) IAM role on the resource that you want to list grantable roles for.    For more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nThis predefined role contains the `getIamPolicy` permissions for all resource types. To list grantable roles, you need the `getIamPolicy` permission for the resource that you want to list grantable roles for\u2014for example, to list grantable roles for a project, you need the `resourcemanager.projects.getIamPolicy` permission.\nYou might also be able to get   this permission  with [custom roles](/iam/docs/creating-custom-roles) or  other [predefined roles](/iam/docs/understanding-roles) .\n## Understanding what roles are grantable\nA role is grantable on or above a resource if it contains any permissions for that resource type. For example, the `storage.admin` role grants permissions to the `storage.buckets.get` and `storage.objects.get` APIs, so it is grantable on the and resource types.\nRoles can also be granted \"above\" the resource types that their permissions are defined for. In other words, roles for lower-level resources can be granted on a resource that is higher in the Google Cloud resource hierarchy. For example, the `storage.admin` role can also be granted at the project or organization levels, in addition to .\nPermissions granted by a role only affect resources at the specified level or below; they do not affect higher-level or peer resources. Additionally, when a role is granted on a resource, only permissions applicable to the given resource are granted, regardless of the role's name, description, or other permissions it contains. For example, assigning the role `resourcemanager.organizationAdmin` (which grants the permission `resourcemanager.projects.list` ) to a user on the project level only grants them permissions for that specific project. It will **not** allow them to list or administer all projects in the organization. Similarly, assigning the `compute.admin` role on a specific Compute Engine instance only grants permissions for that instance, not others in the project.\n## Listing grantable roles\nYou can list grantable roles using the Google Cloud console, the Google Cloud CLI, the IAM API, or the IAM client libraries.\nThe Google Cloud console always lists all grantable roles for the resource you're viewing. The Google Cloud CLI, IAM API, and client libraries only list grantable roles for [enabled APIs](/service-usage/docs/enable-disable#enabling) .\nTo view grantable roles for a project, folder, or organization, do the following:- In the Google Cloud console, go to the **IAM** page. [Go to the IAM page](https://console.cloud.google.com/iam-admin/iam) \n- Click **Select a project** at the top of the page.\n- Select the project, folder, or organization for which you want to view grantable roles.\n- Click person_add **Grant access** .\n- Click **Select a role** . This menu displays all the roles, including any custom roles, that you can grant on this resource.\nTo view grantable roles for other resource types, do the following:- In the Google Cloud console, go to the page listing the resource for which you want to view grantable roles.For example, to manage access to a Compute Engine instance, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Select the checkbox next to the resource for which you want to view grantable roles.\n- Ensure that the info panel is visible. If it is not visible, click **Show info panel** .\n- Click person_add **Addprincipal** .\n- Click **Select a role** . This menu displays all the roles, including any custom roles, that you can grant on this resource.\nUse the [gcloud iam list-grantable-roles](/sdk/gcloud/reference/iam/list-grantable-roles) command to return a list of all roles that can be applied to a given resource.\n```\ngcloud iam list-grantable-roles full-resource-name\n```\nDepending on the desired resource, a large number of roles may be returned. To limit the results, you can specify a [filter expression](/sdk/gcloud/reference/topic/filters) .\nThe output will look something like:\n```\ndescription: Full control of all Compute Engine resources.name: roles/compute.admintitle: Compute Admin---description: Full control of Compute Engine instance resources.name: roles/compute.instanceAdmintitle: Compute Instance Admin# Additional results here...\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C++ API reference documentation](/cpp/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/googleapis/google-cloud-cpp/blob/HEAD/google/cloud/iam/samples/iam_samples.cc) \n```\nnamespace iam = ::google::cloud::iam_admin_v1;[](std::string const& resource) {\u00a0 iam::IAMClient client(iam::MakeIAMConnection());\u00a0 int count = 0;\u00a0 for (auto& role : client.QueryGrantableRoles(resource)) {\u00a0 \u00a0 if (!role) throw std::move(role).status();\u00a0 \u00a0 std::cout << \"Role successfully retrieved: \" << role->name() << \"\\n\";\u00a0 \u00a0 ++count;\u00a0 }\u00a0 if (count == 0) {\u00a0 \u00a0 std::cout << \"No grantable roles found in resource: \" << resource << \"\\n\";\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C# API reference documentation](https://developers.google.com/api-client-library/dotnet/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/CustomRoles/RolesViewGrantable.cs) \n```\nusing System;using System.Collections.Generic;using Google.Apis.Auth.OAuth2;using Google.Apis.Iam.v1;using Google.Apis.Iam.v1.Data;public partial class CustomRoles{\u00a0 \u00a0 public static IList<Role> ViewGrantableRoles(string fullResourceName)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 var credential = GoogleCredential.GetApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .CreateScoped(IamService.Scope.CloudPlatform);\u00a0 \u00a0 \u00a0 \u00a0 var service = new IamService(new IamService.Initializer\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HttpClientInitializer = credential\u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 var request = new QueryGrantableRolesRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FullResourceName = fullResourceName\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 var response = service.Roles.QueryGrantableRoles(request).Execute();\u00a0 \u00a0 \u00a0 \u00a0 foreach (var role in response.Roles)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"Title: \" + role.Title);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"Name: \" + role.Name);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"Description: \" + role.Description);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine();\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return response.Roles;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](https://godoc.org/google.golang.org/genproto/googleapis/iam/admin/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/snippets/roles_view_grantable.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 iam \"google.golang.org/api/iam/v1\")// viewGrantableRoles lists roles grantable on a resource.func viewGrantableRoles(w io.Writer, fullResourceName string) ([]*iam.Role, error) {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 service, err := iam.NewService(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"iam.NewService: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 request := &iam.QueryGrantableRolesRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FullResourceName: fullResourceName,\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := service.Roles.QueryGrantableRoles(request).Do()\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"Roles.QueryGrantableRoles: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 for _, role := range response.Roles {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Found grantable role: %v\\n\", role.Name)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return response.Roles, err}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](https://developers.google.com/api-client-library/java/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/GrantableRoles.java) \n```\nQueryGrantableRolesRequest request = new QueryGrantableRolesRequest();request.setFullResourceName(fullResourceName);QueryGrantableRolesResponse response = service.roles().queryGrantableRoles(request).execute();for (Role role : response.getRoles()) {\u00a0 System.out.println(\"Title: \" + role.getTitle());\u00a0 System.out.println(\"Name: \" + role.getName());\u00a0 System.out.println(\"Description: \" + role.getDescription());\u00a0 System.out.println();}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](https://developers.google.com/api-client-library/python/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/grantable_roles.py) \n```\ndef view_grantable_roles(full_resource_name: str) -> None:\u00a0 \u00a0 roles = (\u00a0 \u00a0 \u00a0 \u00a0 service.roles()\u00a0 \u00a0 \u00a0 \u00a0 .queryGrantableRoles(body={\"fullResourceName\": full_resource_name})\u00a0 \u00a0 \u00a0 \u00a0 .execute()\u00a0 \u00a0 )\u00a0 \u00a0 for role in roles[\"roles\"]:\u00a0 \u00a0 \u00a0 \u00a0 if \"title\" in role:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"Title: \" + role[\"title\"])\u00a0 \u00a0 \u00a0 \u00a0 print(\"Name: \" + role[\"name\"])\u00a0 \u00a0 \u00a0 \u00a0 if \"description\" in role:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 print(\"Description: \" + role[\"description\"])\u00a0 \u00a0 \u00a0 \u00a0 print(\" \")\n```The ` [roles.queryGrantableRoles](/iam/docs/reference/rest/v1/roles/queryGrantableRoles) ` method returns a list of all roles grantable on a resource.\nBefore using any of the request data, make the following replacements:- ``: A URI consisting of the service name and the path to the resource. For examples, see [Full resource names](/iam/docs/full-resource-names) .\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/roles:queryGrantableRoles\n```\nRequest JSON body:\n```\n{\n \"fullResourceName\": \"FULL_RESOURCE_NAME\"\n}\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"roles\": [ {\n  \"name\": \"roles/compute.admin\",\n  \"title\": \"Compute Admin\",\n  \"description\": \"Full control of all Compute Engine resources.\"\n },\n {\n  \"name\": \"roles/compute.instanceAdmin\",\n  \"title\": \"Compute Instance Admin (beta)\",\n  \"description\": \"Full control of Compute Engine instance resources.\"\n }\n ]\n}\n```\nIn the examples above, the is a scheme-less URI consisting of a DNS-compatible API service name and a resource path.\nFor example, to return all roles grantable on a project, use:\n```\n//cloudresourcemanager.googleapis.com/projects/project-id\n```\nLower-level resources have a more detailed fully qualified name. For example, use the following to return all roles grantable on a Compute Engine instance:\n```\n//compute.googleapis.com/projects/project-id/zones/zone-name/instances/instance-id\n```\n[](None)\n## What's next\n- Read about the available [IAM roles](/iam/docs/understanding-roles) .\n- Find out how to [choose the most appropriate predefined roles](/iam/docs/choose-predefined-roles) .\n- Learn how to [grant, change, and revoke a principal's access](/iam/docs/granting-changing-revoking-access) .\n- See [examples of resource names](/iam/docs/resource-names) for different types of resources.", "guide": "IAM"}