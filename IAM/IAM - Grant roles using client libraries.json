{"title": "IAM - Grant roles using client libraries", "url": "https://cloud.google.com/iam/docs/write-policy-client-libraries", "abstract": "# IAM - Grant roles using client libraries\n# Grant roles using client libraries\nLearn how to get started with the IAM methods from the Resource Manager API in your favorite programming language.To follow step-by-step guidance for this task directly in the Google Cloud console, click **Guide me** :\n [Guide me](https://console.cloud.google.com/?walkthrough_id=iam--api_quickstart_index) ", "content": "## Before you begin\n### Create a Google Cloud projectFor this quickstart, you need a new Google Cloud project.\n **Warning:** If you use an existing project, then completing this quickstart will enable some users to temporarily access resources in that project.\n## Install the client libraryFor more on setting up your C# development environment, refer to the [C# Development Environment Setup Guide](/dotnet/docs/setup) .\n```\ninstall-package Google.Apis.Iam.v1\ninstall-package Google.Apis.CloudResourceManager.v1\n``````\ngo get golang.org/x/oauth2/google\ngo get google.golang.org/api/cloudresourcemanager/v1\n```For more on setting up your Java development environment, refer to the [Java Development Environment Setup Guide](/java/docs/setup) .\nIf you are using\n [Maven](https://maven.apache.org/) \n, add this to your\n`pom.xml`\nfile.\n```\n<dependency>\u00a0 <groupId>com.google.apis</groupId>\u00a0 <artifactId>google-api-services-cloudresourcemanager</artifactId>\u00a0 <version>v3-rev20240128-2.0.0</version></dependency><dependency>\u00a0 <groupId>com.google.auth</groupId>\u00a0 <artifactId>google-auth-library-oauth2-http</artifactId></dependency><dependency>\u00a0 <groupId>com.google.http-client</groupId>\u00a0 <artifactId>google-http-client-jackson2</artifactId></dependency><dependency>\u00a0 <groupId>com.google.apis</groupId>\u00a0 <artifactId>google-api-services-iam</artifactId>\u00a0 <version>v1-rev20240118-2.0.0</version></dependency>\n```For more on setting up your Python development environment, refer to the [Python Development Environment Setup Guide](/python/docs/setup) .\n```\npip install --upgrade google-api-python-client google-auth google-auth-httplib2\n```\n## \nRead, modify, and write an allow policy\nThe code snippet in this quickstart does the following:- Initializes the Resource Manager service, which manages Google Cloud projects.\n- Reads the [allow policy](/iam/docs/overview#cloud-iam-policy) for your project.\n- Modifies the allow policy by granting the Log Writer role (`roles/logging.logWriter`) to your Google Account.\n- Writes the updated allow policy.\n- Prints all the principals that have the Log Writer role (`roles/logging.logWriter`) at the project level.\n- Revokes the Log Writer role.\nReplace the following values before running the code snippet:- ``: The ID of your project.\n- ``: The email address for your Google Account, with the prefix`user:`. For example,`user:tanya@example.com`.\n **Note:** The following snippet modifies access by getting, modifying, and setting the **allow policy** for the project. For more information on allow policies, see the [IAM overview](/iam/docs/overview#cloud-iam-policy) .To learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/iam/docs/reference/libraries) .       For more information, see the [Resource Manager C# API reference documentation](https://googleapis.dev/dotnet/Google.Apis.CloudResourceManager.v1/latest/api/Google.Apis.CloudResourceManager.v1.html) .\nTo authenticate to Resource Manager, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/QuickStart/QuickStart.cs) \n```\nusing Google.Apis.Auth.OAuth2;using Google.Apis.CloudResourceManager.v1;using Google.Apis.CloudResourceManager.v1.Data;using Google.Apis.Iam.v1;using System;using System.Collections.Generic;using System.Linq;public class QuickStart{\u00a0 \u00a0 public static void Main(string[] args)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // TODO: Replace with your project ID\u00a0 \u00a0 \u00a0 \u00a0 var projectId = \"your-project\";\u00a0 \u00a0 \u00a0 \u00a0 // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\u00a0 \u00a0 \u00a0 \u00a0 var member = \"your-member\";\u00a0 \u00a0 \u00a0 \u00a0 // Role to be granted\u00a0 \u00a0 \u00a0 \u00a0 var role = \"roles/logging.logWriter\";\u00a0 \u00a0 \u00a0 \u00a0 // Initialize service\u00a0 \u00a0 \u00a0 \u00a0 CloudResourceManagerService crmService = InitializeService();\u00a0 \u00a0 \u00a0 \u00a0 // Grant your member the \"Log Writer\" role for your project\u00a0 \u00a0 \u00a0 \u00a0 AddBinding(crmService, projectId, member, role);\u00a0 \u00a0 \u00a0 \u00a0 // Get the project's policy and print all members with the the \"Log Writer\" role\u00a0 \u00a0 \u00a0 \u00a0 var policy = GetPolicy(crmService, projectId);\u00a0 \u00a0 \u00a0 \u00a0 var binding = policy.Bindings.FirstOrDefault(x => x.Role == role);\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"Role: \" + binding.Role);\u00a0 \u00a0 \u00a0 \u00a0 Console.Write(\"Members: \");\u00a0 \u00a0 \u00a0 \u00a0 foreach (var m in binding.Members)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.Write(\"[\" + m + \"] \");\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine();\u00a0 \u00a0 \u00a0 \u00a0 // Remove member from the \"Log Writer\" role\u00a0 \u00a0 \u00a0 \u00a0 RemoveMember(crmService, projectId, member, role);\u00a0 \u00a0 }\u00a0 \u00a0 public static CloudResourceManagerService InitializeService()\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Get credentials\u00a0 \u00a0 \u00a0 \u00a0 var credential = GoogleCredential.GetApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .CreateScoped(IamService.Scope.CloudPlatform);\u00a0 \u00a0 \u00a0 \u00a0 // Create the Cloud Resource Manager service object\u00a0 \u00a0 \u00a0 \u00a0 CloudResourceManagerService crmService = new CloudResourceManagerService(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new CloudResourceManagerService.Initializer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HttpClientInitializer = credential\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 return crmService;\u00a0 \u00a0 }\u00a0 \u00a0 public static Policy GetPolicy(CloudResourceManagerService crmService, String projectId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Get the project's policy by calling the\u00a0 \u00a0 \u00a0 \u00a0 // Cloud Resource Manager Projects API\u00a0 \u00a0 \u00a0 \u00a0 var policy = crmService.Projects.GetIamPolicy(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new GetIamPolicyRequest(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectId).Execute();\u00a0 \u00a0 \u00a0 \u00a0 return policy;\u00a0 \u00a0 }\u00a0 \u00a0 public static void SetPolicy(CloudResourceManagerService crmService, String projectId, Policy policy)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Set the project's policy by calling the\u00a0 \u00a0 \u00a0 \u00a0 // Cloud Resource Manager Projects API\u00a0 \u00a0 \u00a0 \u00a0 crmService.Projects.SetIamPolicy(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0new SetIamPolicyRequest\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Policy = policy\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0}, projectId).Execute();\u00a0 \u00a0 }\u00a0 \u00a0 public static void AddBinding(\u00a0 \u00a0 \u00a0 \u00a0 CloudResourceManagerService crmService,\u00a0 \u00a0 \u00a0 \u00a0 string projectId,\u00a0 \u00a0 \u00a0 \u00a0 string member,\u00a0 \u00a0 \u00a0 \u00a0 string role)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Get the project's policy\u00a0 \u00a0 \u00a0 \u00a0 var policy = GetPolicy(crmService, projectId);\u00a0 \u00a0 \u00a0 \u00a0 // Find binding in policy\u00a0 \u00a0 \u00a0 \u00a0 var binding = policy.Bindings.FirstOrDefault(x => x.Role == role);\u00a0 \u00a0 \u00a0 \u00a0 // If binding already exists, add member to binding\u00a0 \u00a0 \u00a0 \u00a0 if (binding != null)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 binding.Members.Add(member);\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // If binding does not exist, add binding to policy\u00a0 \u00a0 \u00a0 \u00a0 else\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 binding = new Binding\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Role = role,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Members = new List<string> { member }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 policy.Bindings.Add(binding);\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Set the updated policy\u00a0 \u00a0 \u00a0 \u00a0 SetPolicy(crmService, projectId, policy);\u00a0 \u00a0 }\u00a0 \u00a0 public static void RemoveMember(\u00a0 \u00a0 \u00a0 \u00a0 CloudResourceManagerService crmService,\u00a0 \u00a0 \u00a0 \u00a0 string projectId,\u00a0 \u00a0 \u00a0 \u00a0 string member,\u00a0 \u00a0 \u00a0 \u00a0 string role)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Get the project's policy \u00a0 \u00a0 \u00a0 \u00a0 var policy = GetPolicy(crmService, projectId);\u00a0 \u00a0 \u00a0 \u00a0 // Remove the member from the role\u00a0 \u00a0 \u00a0 \u00a0 var binding = policy.Bindings.FirstOrDefault(x => x.Role == role);\u00a0 \u00a0 \u00a0 \u00a0 if (binding == null)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"Role does not exist in policy.\");\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 else\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (binding.Members.Contains(member))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 binding.Members.Remove(member);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"The member has not been granted this role.\");\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (binding.Members.Count == 0)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 policy.Bindings.Remove(binding);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Set the updated policy\u00a0 \u00a0 \u00a0 \u00a0 SetPolicy(crmService, projectId, policy);\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/iam/docs/reference/libraries) .       For more information, see the [Resource Manager Go API reference documentation](https://godoc.org/google.golang.org/api/cloudresourcemanager/v1) .\nTo authenticate to Resource Manager, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/quickstart/quickstart.go) \n```\npackage mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"flag\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"strings\"\u00a0 \u00a0 \u00a0 \u00a0 \"time\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/api/cloudresourcemanager/v1\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 // TODO: Add your project ID\u00a0 \u00a0 \u00a0 \u00a0 projectID := flag.String(\"project_id\", \"\", \"Cloud Project ID\")\u00a0 \u00a0 \u00a0 \u00a0 // TODO: Add the ID of your member in the form \"user:member@example.com\"\u00a0 \u00a0 \u00a0 \u00a0 member := flag.String(\"member_id\", \"\", \"Your member ID\")\u00a0 \u00a0 \u00a0 \u00a0 flag.Parse()\u00a0 \u00a0 \u00a0 \u00a0 // The role to be granted\u00a0 \u00a0 \u00a0 \u00a0 var role string = \"roles/logging.logWriter\"\u00a0 \u00a0 \u00a0 \u00a0 // Initializes the Cloud Resource Manager service\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 crmService, err := cloudresourcemanager.NewService(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"cloudresourcemanager.NewService: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Grants your member the \"Log writer\" role for your project\u00a0 \u00a0 \u00a0 \u00a0 addBinding(crmService, *projectID, *member, role)\u00a0 \u00a0 \u00a0 \u00a0 // Gets the project's policy and prints all members with the \"Log Writer\" role\u00a0 \u00a0 \u00a0 \u00a0 policy := getPolicy(crmService, *projectID)\u00a0 \u00a0 \u00a0 \u00a0 // Find the policy binding for role. Only one binding can have the role.\u00a0 \u00a0 \u00a0 \u00a0 var binding *cloudresourcemanager.Binding\u00a0 \u00a0 \u00a0 \u00a0 for _, b := range policy.Bindings {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if b.Role == role {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 binding = b\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Println(\"Role: \", binding.Role)\u00a0 \u00a0 \u00a0 \u00a0 fmt.Print(\"Members: \", strings.Join(binding.Members, \", \"))\u00a0 \u00a0 \u00a0 \u00a0 // Removes member from the \"Log writer\" role\u00a0 \u00a0 \u00a0 \u00a0 removeMember(crmService, *projectID, *member, role)}// addBinding adds the member to the project's IAM policyfunc addBinding(crmService *cloudresourcemanager.Service, projectID, member, role string) {\u00a0 \u00a0 \u00a0 \u00a0 policy := getPolicy(crmService, projectID)\u00a0 \u00a0 \u00a0 \u00a0 // Find the policy binding for role. Only one binding can have the role.\u00a0 \u00a0 \u00a0 \u00a0 var binding *cloudresourcemanager.Binding\u00a0 \u00a0 \u00a0 \u00a0 for _, b := range policy.Bindings {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if b.Role == role {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 binding = b\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 if binding != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // If the binding exists, adds the member to the binding\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 binding.Members = append(binding.Members, member)\u00a0 \u00a0 \u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // If the binding does not exist, adds a new binding to the policy\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 binding = &cloudresourcemanager.Binding{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Role: \u00a0 \u00a0role,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Members: []string{member},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 policy.Bindings = append(policy.Bindings, binding)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 setPolicy(crmService, projectID, policy)}// removeMember removes the member from the project's IAM policyfunc removeMember(crmService *cloudresourcemanager.Service, projectID, member, role string) {\u00a0 \u00a0 \u00a0 \u00a0 policy := getPolicy(crmService, projectID)\u00a0 \u00a0 \u00a0 \u00a0 // Find the policy binding for role. Only one binding can have the role.\u00a0 \u00a0 \u00a0 \u00a0 var binding *cloudresourcemanager.Binding\u00a0 \u00a0 \u00a0 \u00a0 var bindingIndex int\u00a0 \u00a0 \u00a0 \u00a0 for i, b := range policy.Bindings {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if b.Role == role {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 binding = b\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bindingIndex = i\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Order doesn't matter for bindings or members, so to remove, move the last item\u00a0 \u00a0 \u00a0 \u00a0 // into the removed spot and shrink the slice.\u00a0 \u00a0 \u00a0 \u00a0 if len(binding.Members) == 1 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // If the member is the only member in the binding, removes the binding\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 last := len(policy.Bindings) - 1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 policy.Bindings[bindingIndex] = policy.Bindings[last]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 policy.Bindings = policy.Bindings[:last]\u00a0 \u00a0 \u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // If there is more than one member in the binding, removes the member\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var memberIndex int\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for i, mm := range binding.Members {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if mm == member {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memberIndex = i\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 last := len(policy.Bindings[bindingIndex].Members) - 1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 binding.Members[memberIndex] = binding.Members[last]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 binding.Members = binding.Members[:last]\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 setPolicy(crmService, projectID, policy)}// getPolicy gets the project's IAM policyfunc getPolicy(crmService *cloudresourcemanager.Service, projectID string) *cloudresourcemanager.Policy {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 ctx, cancel := context.WithTimeout(ctx, time.Second*10)\u00a0 \u00a0 \u00a0 \u00a0 defer cancel()\u00a0 \u00a0 \u00a0 \u00a0 request := new(cloudresourcemanager.GetIamPolicyRequest)\u00a0 \u00a0 \u00a0 \u00a0 policy, err := crmService.Projects.GetIamPolicy(projectID, request).Do()\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"Projects.GetIamPolicy: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return policy}// setPolicy sets the project's IAM policyfunc setPolicy(crmService *cloudresourcemanager.Service, projectID string, policy *cloudresourcemanager.Policy) {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 ctx, cancel := context.WithTimeout(ctx, time.Second*10)\u00a0 \u00a0 \u00a0 \u00a0 defer cancel()\u00a0 \u00a0 \u00a0 \u00a0 request := new(cloudresourcemanager.SetIamPolicyRequest)\u00a0 \u00a0 \u00a0 \u00a0 request.Policy = policy\u00a0 \u00a0 \u00a0 \u00a0 policy, err := crmService.Projects.SetIamPolicy(projectID, request).Do()\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"Projects.SetIamPolicy: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }}\n```To learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/iam/docs/reference/libraries) .       For more information, see the [Resource Manager Java API reference documentation](https://cloud.google.com/java/docs/reference/google-cloud-resourcemanager/latest/overview) .\nTo authenticate to Resource Manager, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/Quickstart.java) \n```\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;import com.google.api.services.cloudresourcemanager.v3.model.Binding;import com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;import com.google.api.services.cloudresourcemanager.v3.model.Policy;import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;import com.google.api.services.iam.v1.IamScopes;import com.google.auth.http.HttpCredentialsAdapter;import com.google.auth.oauth2.GoogleCredentials;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.Collections;import java.util.List;public class Quickstart {\u00a0 public static void main(String[] args) {\u00a0 \u00a0 // TODO: Replace with your project ID in the form \"projects/your-project-id\".\u00a0 \u00a0 String projectId = \"your-project\";\u00a0 \u00a0 // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\u00a0 \u00a0 String member = \"your-member\";\u00a0 \u00a0 // The role to be granted.\u00a0 \u00a0 String role = \"roles/logging.logWriter\";\u00a0 \u00a0 // Initializes the Cloud Resource Manager service.\u00a0 \u00a0 CloudResourceManager crmService = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 crmService = initializeService();\u00a0 \u00a0 } catch (IOException | GeneralSecurityException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to initialize service: \\n\" + e.getMessage() + e.getStackTrace());\u00a0 \u00a0 }\u00a0 \u00a0 // Grants your member the \"Log writer\" role for your project.\u00a0 \u00a0 addBinding(crmService, projectId, member, role);\u00a0 \u00a0 // Get the project's policy and print all members with the \"Log Writer\" role\u00a0 \u00a0 Policy policy = getPolicy(crmService, projectId);\u00a0 \u00a0 Binding binding = null;\u00a0 \u00a0 List<Binding> bindings = policy.getBindings();\u00a0 \u00a0 for (Binding b : bindings) {\u00a0 \u00a0 \u00a0 if (b.getRole().equals(role)) {\u00a0 \u00a0 \u00a0 \u00a0 binding = b;\u00a0 \u00a0 \u00a0 \u00a0 break;\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 System.out.println(\"Role: \" + binding.getRole());\u00a0 \u00a0 System.out.print(\"Members: \");\u00a0 \u00a0 for (String m : binding.getMembers()) {\u00a0 \u00a0 \u00a0 System.out.print(\"[\" + m + \"] \");\u00a0 \u00a0 }\u00a0 \u00a0 System.out.println();\u00a0 \u00a0 // Removes member from the \"Log writer\" role.\u00a0 \u00a0 removeMember(crmService, projectId, member, role);\u00a0 }\u00a0 public static CloudResourceManager initializeService()\u00a0 \u00a0 \u00a0 throws IOException, GeneralSecurityException {\u00a0 \u00a0 // Use the Application Default Credentials strategy for authentication. For more info, see:\u00a0 \u00a0 // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\u00a0 \u00a0 GoogleCredentials credential =\u00a0 \u00a0 \u00a0 \u00a0 GoogleCredentials.getApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\u00a0 \u00a0 // Creates the Cloud Resource Manager service object.\u00a0 \u00a0 CloudResourceManager service =\u00a0 \u00a0 \u00a0 \u00a0 new CloudResourceManager.Builder(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GoogleNetHttpTransport.newTrustedTransport(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GsonFactory.getDefaultInstance(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new HttpCredentialsAdapter(credential))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setApplicationName(\"iam-quickstart\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 return service;\u00a0 }\u00a0 public static void addBinding(\u00a0 \u00a0 \u00a0 CloudResourceManager crmService, String projectId, String member, String role) {\u00a0 \u00a0 // Gets the project's policy.\u00a0 \u00a0 Policy policy = getPolicy(crmService, projectId);\u00a0 \u00a0 // If policy is not retrieved, return early.\u00a0 \u00a0 if (policy == null) {\u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 }\u00a0 \u00a0 // Finds binding in policy, if it exists.\u00a0 \u00a0 Binding binding = null;\u00a0 \u00a0 for (Binding b : policy.getBindings()) {\u00a0 \u00a0 \u00a0 if (b.getRole().equals(role)) {\u00a0 \u00a0 \u00a0 \u00a0 binding = b; \u00a0 \u00a0 \u00a0 \u00a0 break;\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 if (binding != null) {\u00a0 \u00a0 \u00a0 // If binding already exists, adds member to binding.\u00a0 \u00a0 \u00a0 binding.getMembers().add(member);\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 // If binding does not exist, adds binding to policy.\u00a0 \u00a0 \u00a0 binding = new Binding();\u00a0 \u00a0 \u00a0 binding.setRole(role);\u00a0 \u00a0 \u00a0 binding.setMembers(Collections.singletonList(member));\u00a0 \u00a0 \u00a0 policy.getBindings().add(binding);\u00a0 \u00a0 }\u00a0 \u00a0 // Sets the updated policy.\u00a0 \u00a0 setPolicy(crmService, projectId, policy);\u00a0 }\u00a0 public static void removeMember(\u00a0 \u00a0 \u00a0 CloudResourceManager crmService, String projectId, String member, String role) {\u00a0 \u00a0 // Gets the project's policy.\u00a0 \u00a0 Policy policy = getPolicy(crmService, projectId);\u00a0 \u00a0 // Removes the member from the role.\u00a0 \u00a0 Binding binding = null;\u00a0 \u00a0 for (Binding b : policy.getBindings()) {\u00a0 \u00a0 \u00a0 if (b.getRole().equals(role)) {\u00a0 \u00a0 \u00a0 \u00a0 binding = b;\u00a0 \u00a0 \u00a0 \u00a0 break;\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 if (binding != null && binding.getMembers().contains(member)) {\u00a0 \u00a0 \u00a0 binding.getMembers().remove(member);\u00a0 \u00a0 \u00a0 if (binding.getMembers().isEmpty()) {\u00a0 \u00a0 \u00a0 \u00a0 policy.getBindings().remove(binding);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 // Sets the updated policy.\u00a0 \u00a0 setPolicy(crmService, projectId, policy);\u00a0 }\u00a0 public static Policy getPolicy(CloudResourceManager crmService, String projectId) {\u00a0 \u00a0 // Gets the project's policy by calling the\u00a0 \u00a0 // Cloud Resource Manager Projects API.\u00a0 \u00a0 Policy policy = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 GetIamPolicyRequest request = new GetIamPolicyRequest();\u00a0 \u00a0 \u00a0 policy = crmService.projects().getIamPolicy(projectId, request).execute();\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to get policy: \\n\" + e.getMessage() + e.getStackTrace());\u00a0 \u00a0 }\u00a0 \u00a0 return policy;\u00a0 }\u00a0 private static void setPolicy(CloudResourceManager crmService, String projectId, Policy policy) {\u00a0 \u00a0 // Sets the project's policy by calling the\u00a0 \u00a0 // Cloud Resource Manager Projects API.\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 SetIamPolicyRequest request = new SetIamPolicyRequest();\u00a0 \u00a0 \u00a0 request.setPolicy(policy);\u00a0 \u00a0 \u00a0 crmService.projects().setIamPolicy(projectId, request).execute();\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to set policy: \\n\" + e.getMessage() + e.getStackTrace());\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/iam/docs/reference/libraries) .       For more information, see the [Resource Manager Python API reference documentation](https://developers.google.com/resources/api-libraries/documentation/cloudresourcemanager/v1/python/latest/) .\nTo authenticate to Resource Manager, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/quickstart.py) \n```\nimport google.authimport googleapiclient.discoverydef quickstart(project_id: str, member: str) -> None:\u00a0 \u00a0 \"\"\"Gets a policy, adds a member, prints their permissions, and removes the member.\"\"\"\u00a0 \u00a0 # Role to be granted.\u00a0 \u00a0 role = \"roles/logging.logWriter\"\u00a0 \u00a0 # Initializes service.\u00a0 \u00a0 crm_service = initialize_service()\u00a0 \u00a0 # Grants your member the 'Log Writer' role for the project.\u00a0 \u00a0 modify_policy_add_role(crm_service, project_id, role, member)\u00a0 \u00a0 # Gets the project's policy and prints all members with the 'Log Writer' role.\u00a0 \u00a0 policy = get_policy(crm_service, project_id)\u00a0 \u00a0 binding = next(b for b in policy[\"bindings\"] if b[\"role\"] == role)\u00a0 \u00a0 print(f'Role: {(binding[\"role\"])}')\u00a0 \u00a0 print(\"Members: \")\u00a0 \u00a0 for m in binding[\"members\"]:\u00a0 \u00a0 \u00a0 \u00a0 print(f\"[{m}]\")\u00a0 \u00a0 # Removes the member from the 'Log Writer' role.\u00a0 \u00a0 modify_policy_remove_member(crm_service, project_id, role, member)def initialize_service() -> dict:\u00a0 \u00a0 \"\"\"Initializes a Cloud Resource Manager service.\"\"\"\u00a0 \u00a0 credentials, _ = google.auth.default(\u00a0 \u00a0 \u00a0 \u00a0 scopes=[\"https://www.googleapis.com/auth/cloud-platform\"]\u00a0 \u00a0 )\u00a0 \u00a0 crm_service = googleapiclient.discovery.build(\u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager\", \"v1\", credentials=credentials\u00a0 \u00a0 )\u00a0 \u00a0 return crm_servicedef modify_policy_add_role(\u00a0 \u00a0 crm_service: str, project_id: str, role: str, member: str) -> None:\u00a0 \u00a0 \"\"\"Adds a new role binding to a policy.\"\"\"\u00a0 \u00a0 policy = get_policy(crm_service, project_id)\u00a0 \u00a0 binding = None\u00a0 \u00a0 for b in policy[\"bindings\"]:\u00a0 \u00a0 \u00a0 \u00a0 if b[\"role\"] == role:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 binding = b\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 if binding is not None:\u00a0 \u00a0 \u00a0 \u00a0 binding[\"members\"].append(member)\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 binding = {\"role\": role, \"members\": [member]}\u00a0 \u00a0 \u00a0 \u00a0 policy[\"bindings\"].append(binding)\u00a0 \u00a0 set_policy(crm_service, project_id, policy)def modify_policy_remove_member(\u00a0 \u00a0 crm_service: str, project_id: str, role: str, member: str) -> None:\u00a0 \u00a0 \"\"\"Removes a \u00a0member from a role binding.\"\"\"\u00a0 \u00a0 policy = get_policy(crm_service, project_id)\u00a0 \u00a0 binding = next(b for b in policy[\"bindings\"] if b[\"role\"] == role)\u00a0 \u00a0 if \"members\" in binding and member in binding[\"members\"]:\u00a0 \u00a0 \u00a0 \u00a0 binding[\"members\"].remove(member)\u00a0 \u00a0 set_policy(crm_service, project_id, policy)def get_policy(crm_service: str, project_id: str, version: int = 3) -> dict:\u00a0 \u00a0 \"\"\"Gets IAM policy for a project.\"\"\"\u00a0 \u00a0 policy = (\u00a0 \u00a0 \u00a0 \u00a0 crm_service.projects()\u00a0 \u00a0 \u00a0 \u00a0 .getIamPolicy(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resource=project_id,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 body={\"options\": {\"requestedPolicyVersion\": version}},\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 .execute()\u00a0 \u00a0 )\u00a0 \u00a0 return policydef set_policy(crm_service: str, project_id: str, policy: str) -> dict:\u00a0 \u00a0 \"\"\"Sets IAM policy for a project.\"\"\"\u00a0 \u00a0 policy = (\u00a0 \u00a0 \u00a0 \u00a0 crm_service.projects()\u00a0 \u00a0 \u00a0 \u00a0 .setIamPolicy(resource=project_id, body={\"policy\": policy})\u00a0 \u00a0 \u00a0 \u00a0 .execute()\u00a0 \u00a0 )\u00a0 \u00a0 return policyif __name__ == \"__main__\":\u00a0 \u00a0 # TODO: replace with your project ID\u00a0 \u00a0 project_id = \"your-project-id\"\u00a0 \u00a0 # TODO: Replace with the ID of your member in the form 'user:member@example.com'.\u00a0 \u00a0 member = \"your-member\"\u00a0 \u00a0 quickstart(project_id, member)\n```Congratulations! You used the IAM methods in the Resource Manager API to modify access for a project.## How did it go?\n## Clean up\n- Optional: Revoke the authentication credentials that you created, and delete the local   credential file.```\ngcloud auth application-default revoke\n```\n- Optional: Revoke credentials from the gcloud CLI.```\ngcloud auth revoke\n```\n## What's next\n- Read about [how IAM works](/iam/docs/concepts) .\n- Learn more about [granting, changing, and revoking access](/iam/docs/granting-changing-revoking-access) .\n- Troubleshoot access issues with the [Policy Troubleshooter](/iam/docs/troubleshooting-access) .", "guide": "IAM"}