{"title": "IAM - Deny access to resources", "url": "https://cloud.google.com/iam/docs/deny-access", "abstract": "# IAM - Deny access to resources\nThis page explains how to deny principals access by preventing them from using specific Identity and Access Management (IAM) permissions.\nIn IAM, you deny access with . Each deny policy is attached to a Google Cloud organization, folder, or project. A deny policy contains , which identify principals and list the permissions that the principals cannot use.\nDeny policies are separate from , also known as . An allow policy provides access to resources by granting IAM roles to principals.\nYou can manage deny policies with the Google Cloud CLI or the IAM `v2` REST API.\n", "content": "## Before you begin\n- Enable the IAM API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com&redirect=https://console.cloud.google.com) \n- Set up authentication.Select the tab for how you plan to use the samples on this page:\nYou can use the gcloud CLI samples on this page from  either of the following development environments:- **Cloud Shell** : To use an online terminal with the   gcloud CLI already set up, activate Cloud Shell.At the bottom of this page, a Cloud Shell session starts    and displays a command-line prompt. It can take a few seconds for    the session to initialize.\n- **Local shell** : To use the gcloud CLI in a local   development environment, [install](/sdk/docs/install) and [initialize](/sdk/docs/initializing) the gcloud CLI.\nTo use the Terraform samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Go samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Java samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Node.js samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Python samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```\n- Read the [overview of deny policies](/iam/docs/deny-overview) .\n### Required roles\nTo get the permissions that you need to manage deny policies,   ask your administrator to grant you the  following IAM roles on the organization:\n- To view deny policies: [Deny Reviewer ](https://cloud.google.com/iam/docs/understanding-roles#iam.denyReviewer) (`roles/iam.denyReviewer`)\n- To view, create, update, and delete deny policies: [Deny Admin ](https://cloud.google.com/iam/docs/understanding-roles#iam.denyAdmin) (`roles/iam.denyAdmin`)\nFor more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nThese predefined roles contain     the permissions required to manage deny policies. To see the exact permissions that are   required, expand the **Required permissions** section:\nYou might also be able to get   these permissions  with [custom roles](/iam/docs/creating-custom-roles) or  other [predefined roles](/iam/docs/understanding-roles) .\n## Identify permissions to deny\nBefore you create a deny policy, you must decide which permissions you want to deny, and which principals should be denied these permissions.\nOnly some permissions can be denied. For a list of permissions that you can deny, see [Permissions supported in deny policies](/iam/docs/deny-permissions-support) .\nIn some cases, you can also use permission groups to deny sets of permissions. For more information, see [Permission groups](/iam/docs/deny-overview#permission-groups) .\nYou manage deny policies with the `v2` REST API, which requires a special format for permission names. For example, the permission to create an IAM custom role is named as follows:\n- `v1`API:`iam.roles.create`\n- `v2`API:`iam.googleapis.com/roles.create`## Identify the attachment point\nEach deny policy is attached to an organization, folder, or project. When attached to one of these resources, deny policies are inherited by all lower-level resources in that project, folder, or organization. To work with deny policies, you need an identifier for the resource that the deny policy is attached to, which is called the . This identifier uses one of the formats in the following table:\n| Attachment point format | Attachment point format.1                                                                               |\n|:--------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Organization    | cloudresourcemanager.googleapis.com/organizations/ORG_ID Replace ORG_ID with the numeric organization ID. For the REST API, URL-encode the entire value. Example for the gcloud CLI: cloudresourcemanager.googleapis.com/organizations/123456789012 Example for the REST API: cloudresourcemanager.googleapis.com%2Forganizations%2F123456789012 |\n| Folder     | cloudresourcemanager.googleapis.com/folders/FOLDER_ID Replace FOLDER_ID with the numeric folder ID. For the REST API, URL-encode the entire value. Example for the gcloud CLI: cloudresourcemanager.googleapis.com/folders/987654321098 Example for the REST API: cloudresourcemanager.googleapis.com%2Ffolders%2F987654321098     |\n| Project     | cloudresourcemanager.googleapis.com/projects/PROJECT_ID Replace PROJECT_ID with the alphanumeric or numeric project ID. For the REST API, URL-encode the entire value. Example for the gcloud CLI: cloudresourcemanager.googleapis.com/projects/my-project Example for the REST API: cloudresourcemanager.googleapis.com%2Fprojects%2Fmy-project |\n## Create a deny policy\nYou can add deny policies to organizations, folders, and projects. Each resource can have up to 500 deny policies.\nDeny policies contain deny rules, which specify the following:\n- The permissions to deny.\n- The principals that are denied those permissions.\n- Optional: Principals that are exempt from the denial of permissions.For example, you can deny a permission to a group, but exempt specific users who belong to that group.\n- Optional: A [condition expression](/iam/docs/conditions-overview) that specifies when the principals cannot use the permissions. In deny policies, condition expressions can only use functions for [resourcetags](/iam/docs/tags-access-control) \u2014other functions and operators are not supported.\nEach resource can have up to 500 deny rules across all of its attached deny policies.\nDeny policies are inherited through the [resource hierarchy](/iam/docs/overview#resource-hierarchy) . For example, if you deny a permission at the organization level, that permission will also be denied on the folders and projects within that organization, and on the service-specific resources within each project.\nDeny policies override allow policies. If a principal is granted a role that contains a specific permission, but a deny policy says that the principal cannot use that permission, then the principal cannot use the permission.\n**Note:** In general, policy changes take effect within 2 minutes. However, in some cases, it can take 7 minutes or more for changes to propagate across the system.\nTo create a deny policy for a resource, start by creating a JSON file that contains the policy. A deny policy uses the following format:\n```\n{\u00a0 \"displayName\": \"POLICY_NAME\",\u00a0 \"rules\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"denyRule\": DENY_RULE_1\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"denyRule\": DENY_RULE_2\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"denyRule\": DENY_RULE_N\u00a0 \u00a0 }\u00a0 ]}\n```\nProvide the following values:- ``: The display name for the deny policy.\n- `` , `` , `...` `` : The deny rules in the policy. Each deny rule can contain these fields:- `deniedPermissions` : A list of permissions that the specified principals cannot use.  The permissions must be [supported in deny policies](/iam/docs/deny-permissions-support) .In some cases, you can also use permission groups to deny sets of permissions.  For more information, see [Permission groups](/iam/docs/deny-overview#permission-groups) .\n- `deniedPrincipals`: A list of principals that cannot use the specified permissions.  Use the [v2 API format for principal identifiers](/iam/docs/principal-identifiers) .\n- `exceptionPrincipals`: Optional. A list of principals that can use the specified  permissions, even if those principals are included in`deniedPrincipals`. For  example, you can use this field to make an exception for specific users who belong to a denied  group. Use the [v2 API format for principal identifiers](/iam/docs/principal-identifiers) .\n- `denialCondition` : Optional. A [condition  expression](/iam/docs/conditions-overview) that specifies when the principals cannot use the permissions. Contains the  following fields:- `expression`: A condition expression that uses [Common   Expression Language (CEL) syntax](https://github.com/google/cel-spec/blob/master/doc/langdef.md) . The expression must use the [CEL functions for   evaluating resource tags](/iam/docs/conditions-attribute-reference#resource-tags) . Other functions and operators are not supported.\n- `title`: Optional. A brief summary of the purpose of the condition.\n- `description`: Optional. A longer description of the condition.For examples of deny rules, see [Common use cases](/iam/docs/deny-overview#use-cases) .\nFor example, the following deny policy contains one deny rule, which denies one permission to the user `lucian@example.com` :\n```\n{\u00a0 \"displayName\": \"My deny policy.\",\u00a0 \"rules\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"denyRule\": {\u00a0 \u00a0 \u00a0 \u00a0 \"deniedPrincipals\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"principal://goog/subject/lucian@example.com\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"deniedPermissions\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"iam.googleapis.com/roles.create\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ]}\n```\nNext, run the [gcloud iam policies create](/sdk/gcloud/reference/iam/policies/create) command:\n```\ngcloud iam policies create POLICY_ID \\\u00a0 \u00a0 --attachment-point=ATTACHMENT_POINT \\\u00a0 \u00a0 --kind=denypolicies \\\u00a0 \u00a0 --policy-file=POLICY_FILE\n```\nProvide the following values:- `` : The identifier for the deny policy.\n- `` : An identifier for the resource that the deny policy is attached to. To learn how to format this value, see [Identify the attachment point](#attachment-point) on this page.\n- `` : The filepath for the JSON file that contains the deny policy.By default, if this command succeeds, it does not print any output. To print a detailed response, add the flag `--format=json` to the command.For example, the following command creates a deny policy named `my-deny-policy` for the project `my-project` , using a file named `policy.json` :\n```\ngcloud iam policies create my-deny-policy \\\u00a0 \u00a0 --attachment-point=cloudresourcemanager.googleapis.com/projects/my-project \\\u00a0 \u00a0 --kind=denypolicies \\\u00a0 \u00a0 --policy-file=policy.json\n```To learn how to apply or remove a Terraform configuration, see [Basic Terraform commands](/docs/terraform/basic-commands) .    For more information, see the [Terraform provider reference documentation](https://registry.terraform.io/providers/hashicorp/google/latest/docs) .\n [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/HEAD/iam/create_deny_policy/main.tf) \n```\ndata \"google_project\" \"default\" {}# Create a service accountresource \"google_service_account\" \"default\" {\u00a0 display_name = \"IAM Deny Example - Service Account\"\u00a0 account_id \u00a0 = \"example-sa\"\u00a0 project \u00a0 \u00a0 \u00a0= data.google_project.default.project_id}# Create an IAM deny policy that denies a permission for the service accountresource \"google_iam_deny_policy\" \"default\" {\u00a0 provider \u00a0 \u00a0 = google-beta\u00a0 parent \u00a0 \u00a0 \u00a0 = urlencode(\"cloudresourcemanager.googleapis.com/projects/${data.google_project.default.project_id}\")\u00a0 name \u00a0 \u00a0 \u00a0 \u00a0 = \"my-deny-policy\"\u00a0 display_name = \"My deny policy.\"\u00a0 rules {\u00a0 \u00a0 deny_rule {\u00a0 \u00a0 \u00a0 denied_principals \u00a0= [\"principal://iam.googleapis.com/projects/-/serviceAccounts/${google_service_account.default.email}\"]\u00a0 \u00a0 \u00a0 denied_permissions = [\"iam.googleapis.com/roles.create\"]\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](/go/docs/reference/cloud.google.com/go/iam/latest/apiv2) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/deny/create_deny_policy.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 iam \"cloud.google.com/go/iam/apiv2\"\u00a0 \u00a0 \u00a0 \u00a0 iampb \"google.golang.org/genproto/googleapis/iam/v2\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/genproto/googleapis/type/expr\")// createDenyPolicy creates a deny policy.func createDenyPolicy(w io.Writer, projectID, policyID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // You can add deny policies to organizations, folders, and projects.\u00a0 \u00a0 \u00a0 \u00a0 // Each of these resources can have up to 5 deny policies.\u00a0 \u00a0 \u00a0 \u00a0 // Deny policies contain deny rules, which specify the following:\u00a0 \u00a0 \u00a0 \u00a0 // 1. The permissions to deny and/or exempt.\u00a0 \u00a0 \u00a0 \u00a0 // 2. The principals that are denied, or exempted from denial.\u00a0 \u00a0 \u00a0 \u00a0 // 3. An optional condition on when to enforce the deny rules.\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"your_project_id\"\u00a0 \u00a0 \u00a0 \u00a0 // policyID := \"your_policy_id\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 policiesClient, err := iam.NewPoliciesClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewPoliciesClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer policiesClient.Close()\u00a0 \u00a0 \u00a0 \u00a0 // Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 \u00a0 // To work with deny policies, specify the attachment point.\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 // Its format can be one of the following:\u00a0 \u00a0 \u00a0 \u00a0 // 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 \u00a0 \u00a0 // 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 \u00a0 \u00a0 // 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 // The attachment point is identified by its URL-encoded resource name. Hence, replace\u00a0 \u00a0 \u00a0 \u00a0 // the \"/\" with \"%%2F\".\u00a0 \u00a0 \u00a0 \u00a0 attachmentPoint := fmt.Sprintf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com%%2Fprojects%%2F%s\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectID,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 denyRule := &iampb.DenyRule{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Add one or more principals who should be denied the permissions specified in this rule.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // For more information on allowed values,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // see: https://cloud.google.com/iam/help/deny/principal-identifiers\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DeniedPrincipals: []string{\"principalSet://goog/public:all\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Optionally, set the principals who should be exempted from the\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // list of denied principals. For example, if you want to deny certain permissions\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // to a group but exempt a few principals, then add those here.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // ExceptionPrincipals: []string{\"principalSet://goog/group/project-admins@example.com\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set the permissions to deny.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // The permission value is of the format: service_fqdn/resource.action\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // For the list of supported permissions,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // see: https://cloud.google.com/iam/help/deny/supported-permissions\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DeniedPermissions: []string{\"cloudresourcemanager.googleapis.com/projects.delete\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Optionally, add the permissions to be exempted from this rule.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Meaning, the deny rule will not be applicable to these permissions.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // ExceptionPermissions: []string{\"cloudresourcemanager.googleapis.com/projects.create\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set the condition which will enforce the deny rule.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // If this condition is true, the deny rule will be applicable.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Else, the rule will not be enforced.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // The expression uses Common Expression Language syntax (CEL).\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Here we block access based on tags.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Here, we create a deny rule that denies the\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // cloudresourcemanager.googleapis.com/projects.delete permission\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // to everyone except project-admins@example.com for resources that are tagged test.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // A tag is a key-value pair that can be attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // For more info, see: https://cloud.google.com/iam/docs/deny-access#create-deny-policy\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DenialCondition: &expr.Expr{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Expression: \"!resource.matchTag('12345678/env', 'test')\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Add the deny rule and a description for it.\u00a0 \u00a0 \u00a0 \u00a0 policyRule := &iampb.PolicyRule{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Description: \"block all principals from deleting projects, unless the principal is a member of project-admins@example.com and the project being deleted has a tag with the value test\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Kind: &iampb.PolicyRule_DenyRule{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DenyRule: denyRule,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 policy := &iampb.Policy{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DisplayName: \"Restrict project deletion access\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Rules: \u00a0 \u00a0 \u00a0 [](*iampb.PolicyRule){policyRule},\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 req := &iampb.CreatePolicyRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Construct the full path of the resource's deny policies.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Its format is: \"policies/ATTACHMENT_POINT/denypolicies\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: \u00a0 fmt.Sprintf(\"policies/%s/denypolicies\", attachmentPoint),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Policy: \u00a0 policy,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PolicyId: policyID,\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 op, err := policiesClient.CreatePolicy(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"unable to create policy: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 policy, err = op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"unable to wait for the operation: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Policy %s created\\n\", policy.GetName())\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](/java/docs/reference/proto-google-iam-v1/latest/com.google.iam.v2) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/snippets/src/main/java/CreateDenyPolicy.java) \n```\nimport com.google.iam.v2.CreatePolicyRequest;import com.google.iam.v2.DenyRule;import com.google.iam.v2.PoliciesClient;import com.google.iam.v2.Policy;import com.google.iam.v2.PolicyRule;import com.google.longrunning.Operation;import com.google.type.Expr;import java.io.IOException;import java.net.URLEncoder;import java.nio.charset.StandardCharsets;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class CreateDenyPolicy {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, ExecutionException, InterruptedException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 // ID or number of the Google Cloud project you want to use.\u00a0 \u00a0 String projectId = \"your-google-cloud-project-id\";\u00a0 \u00a0 // Specify the id of the Deny policy you want to create.\u00a0 \u00a0 String policyId = \"deny-policy-id\";\u00a0 \u00a0 createDenyPolicy(projectId, policyId);\u00a0 }\u00a0 // Create a deny policy.\u00a0 // You can add deny policies to organizations, folders, and projects.\u00a0 // Each of these resources can have up to 5 deny policies.\u00a0 //\u00a0 // Deny policies contain deny rules, which specify the following:\u00a0 // 1. The permissions to deny and/or exempt.\u00a0 // 2. The principals that are denied, or exempted from denial.\u00a0 // 3. An optional condition on when to enforce the deny rules.\u00a0 public static void createDenyPolicy(String projectId, String policyId)\u00a0 \u00a0 \u00a0 throws IOException, ExecutionException, InterruptedException, TimeoutException {\u00a0 \u00a0 try (PoliciesClient policiesClient = PoliciesClient.create()) {\u00a0 \u00a0 \u00a0 // Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 // To work with deny policies, specify the attachment point.\u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 // Its format can be one of the following:\u00a0 \u00a0 \u00a0 // 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 \u00a0 // 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 \u00a0 // 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 // The attachment point is identified by its URL-encoded resource name.\u00a0 \u00a0 \u00a0 String urlEncodedResource =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 URLEncoder.encode(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com/projects/\", StandardCharsets.UTF_8);\u00a0 \u00a0 \u00a0 String attachmentPoint = String.format(\"%s%s\", urlEncodedResource, projectId);\u00a0 \u00a0 \u00a0 // Construct the full path of the resource to which the policy is attached.\u00a0 \u00a0 \u00a0 // Its format is: \"policies/{attachmentPoint}/denypolicies/{policyId}\"\u00a0 \u00a0 \u00a0 String policyParent = String.format(\"policies/%s/denypolicies\", attachmentPoint);\u00a0 \u00a0 \u00a0 DenyRule denyRule =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DenyRule.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Add one or more principals who should be denied the permissions specified in this\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // rule.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // For more information on allowed values, see:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // https://cloud.google.com/iam/docs/principal-identifiers\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addDeniedPrincipals(\"principalSet://goog/public:all\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Optionally, set the principals who should be exempted from the\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // list of denied principals. For example, if you want to deny certain permissions\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // to a group but exempt a few principals, then add those here.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // .addExceptionPrincipals(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 \"principalSet://goog/group/project-admins@example.com\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set the permissions to deny.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // The permission value is of the format: service_fqdn/resource.action\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // For the list of supported permissions, see:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // https://cloud.google.com/iam/help/deny/supported-permissions\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addDeniedPermissions(\"cloudresourcemanager.googleapis.com/projects.delete\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Optionally, add the permissions to be exempted from this rule.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Meaning, the deny rule will not be applicable to these permissions.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // .addExceptionPermissions(\"cloudresourcemanager.googleapis.com/projects.create\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set the condition which will enforce the deny rule. If this condition is true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // the deny rule will be applicable. Else, the rule will not be enforced.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDenialCondition(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Expr.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // The expression uses Common Expression Language syntax (CEL).\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Here we block access based on tags.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // A tag is a key-value pair that can be attached to an organization, folder,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // or project. You can use deny policies to deny permissions based on tags\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // without adding an IAM Condition to every role grant.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // For example, imagine that you tag all of your projects as dev, test, or\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // prod. You want only members of project-admins@example.com to be able to\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // perform operations on projects that are tagged prod.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // To solve this problem, you create a deny rule that denies the\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // cloudresourcemanager.googleapis.com/projects.delete permission to everyone\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // except project-admins@example.com for resources that are tagged test.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setExpression(\"!resource.matchTag('12345678/env', 'test')\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTitle(\"Only for test projects\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Add the deny rule and a description for it.\u00a0 \u00a0 \u00a0 Policy policy =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Policy.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set the deny rule.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addRules(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PolicyRule.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set a description for the rule.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDescription(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"block all principals from deleting projects, unless the principal\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" is a member of project-admins@example.com and the project\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" being deleted has a tag with the value test\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDenyRule(denyRule)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Set the policy resource path, policy rules and a unique ID for the policy.\u00a0 \u00a0 \u00a0 CreatePolicyRequest createPolicyRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CreatePolicyRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(policyParent)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setPolicy(policy)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setPolicyId(policyId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Build the create policy request.\u00a0 \u00a0 \u00a0 Operation operation =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 policiesClient\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createPolicyCallable()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .futureCall(createPolicyRequest)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .get(3, TimeUnit.MINUTES);\u00a0 \u00a0 \u00a0 // Wait for the operation to complete.\u00a0 \u00a0 \u00a0 if (operation.hasError()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Error in creating the policy \" + operation.getError());\u00a0 \u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 // Retrieve the policy name.\u00a0 \u00a0 \u00a0 Policy response = policiesClient.getPolicy(String.format(\"%s/%s\", policyParent, policyId));\u00a0 \u00a0 \u00a0 String policyName = response.getName();\u00a0 \u00a0 \u00a0 System.out.println(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Created the deny policy: \" + policyName.substring(policyName.lastIndexOf(\"/\") + 1));\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Node.js API reference documentation](/nodejs/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/iam/deny/createDenyPolicy.js) \n```\n/**\u00a0* TODO(developer): Uncomment and replace these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const policyID = 'YOUR_POLICY_ID';const {PoliciesClient} = require('@google-cloud/iam').v2;const iamClient = new PoliciesClient();// Each deny policy is attached to an organization, folder, or project.// To work with deny policies, specify the attachment point.//// Its format can be one of the following:// 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID// 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID// 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID//// The attachment point is identified by its URL-encoded resource name. Hence, replace// the \"/\" with \"%2F\".const attachmentPoint = `cloudresourcemanager.googleapis.com%2Fprojects%2F${projectId}`;const denyRule = {\u00a0 // Add one or more principals who should be denied the permissions specified in this rule.\u00a0 // For more information on allowed values, see: https://cloud.google.com/iam/help/deny/principal-identifiers\u00a0 deniedPrincipals: ['principalSet://goog/public:all'],\u00a0 // Optionally, set the principals who should be exempted from the\u00a0 // list of denied principals. For example, if you want to deny certain permissions\u00a0 // to a group but exempt a few principals, then add those here.\u00a0 // exceptionPrincipals: ['principalSet://goog/group/project-admins@example.com'],\u00a0 // Set the permissions to deny.\u00a0 // The permission value is of the format: service_fqdn/resource.action\u00a0 // For the list of supported permissions, see: https://cloud.google.com/iam/help/deny/supported-permissions\u00a0 deniedPermissions: ['cloudresourcemanager.googleapis.com/projects.delete'],\u00a0 // Optionally, add the permissions to be exempted from this rule.\u00a0 // Meaning, the deny rule will not be applicable to these permissions.\u00a0 // exceptionPermissions: ['cloudresourcemanager.googleapis.com/projects.create']\u00a0 //\u00a0 // Set the condition which will enforce the deny rule.\u00a0 // If this condition is true, the deny rule will be applicable. Else, the rule will not be enforced.\u00a0 // The expression uses Common Expression Language syntax (CEL).\u00a0 // Here we block access based on tags.\u00a0 //\u00a0 // Here, we create a deny rule that denies the cloudresourcemanager.googleapis.com/projects.delete permission to everyone except project-admins@example.com for resources that are tagged test.\u00a0 // A tag is a key-value pair that can be attached to an organization, folder, or project.\u00a0 // For more info, see: https://cloud.google.com/iam/docs/deny-access#create-deny-policy\u00a0 denialCondition: {\u00a0 \u00a0 expression: '!resource.matchTag(\"12345678/env\", \"test\")',\u00a0 },};async function createDenyPolicy() {\u00a0 const request = {\u00a0 \u00a0 parent: `policies/${attachmentPoint}/denypolicies`,\u00a0 \u00a0 policy: {\u00a0 \u00a0 \u00a0 displayName: 'Restrict project deletion access',\u00a0 \u00a0 \u00a0 rules: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 description:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'block all principals from deleting projects, unless the principal is a member of project-admins@example.com and the project being deleted has a tag with the value test',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 denyRule,\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 },\u00a0 \u00a0 policyId,\u00a0 };\u00a0 const [operation] = await iamClient.createPolicy(request);\u00a0 const [policy] = await operation.promise();\u00a0 console.log(`Created the deny policy: ${policy.name}`);}createDenyPolicy();\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](/python/docs/reference/iam/latest/google.cloud.iam_v2.services.policies.PoliciesClient) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/cloud-client/snippets/create_deny_policy.py) \n```\ndef create_deny_policy(project_id: str, policy_id: str) -> None:\u00a0 \u00a0 from google.cloud import iam_v2\u00a0 \u00a0 from google.cloud.iam_v2 import types\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 \u00a0 Create a deny policy.\u00a0 \u00a0 \u00a0 You can add deny policies to organizations, folders, and projects.\u00a0 \u00a0 \u00a0 Each of these resources can have up to 5 deny policies.\u00a0 \u00a0 \u00a0 Deny policies contain deny rules, which specify the following:\u00a0 \u00a0 \u00a0 1. The permissions to deny and/or exempt.\u00a0 \u00a0 \u00a0 2. The principals that are denied, or exempted from denial.\u00a0 \u00a0 \u00a0 3. An optional condition on when to enforce the deny rules.\u00a0 \u00a0 \u00a0 Params:\u00a0 \u00a0 \u00a0 project_id: ID or number of the Google Cloud project you want to use.\u00a0 \u00a0 \u00a0 policy_id: Specify the ID of the deny policy you want to create.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 policies_client = iam_v2.PoliciesClient()\u00a0 \u00a0 # Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 # To work with deny policies, specify the attachment point.\u00a0 \u00a0 #\u00a0 \u00a0 # Its format can be one of the following:\u00a0 \u00a0 # 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 # 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 # 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 #\u00a0 \u00a0 # The attachment point is identified by its URL-encoded resource name. Hence, replace\u00a0 \u00a0 # the \"/\" with \"%2F\".\u00a0 \u00a0 attachment_point = f\"cloudresourcemanager.googleapis.com%2Fprojects%2F{project_id}\"\u00a0 \u00a0 deny_rule = types.DenyRule()\u00a0 \u00a0 # Add one or more principals who should be denied the permissions specified in this rule.\u00a0 \u00a0 # For more information on allowed values, see: https://cloud.google.com/iam/help/deny/principal-identifiers\u00a0 \u00a0 deny_rule.denied_principals = [\"principalSet://goog/public:all\"]\u00a0 \u00a0 # Optionally, set the principals who should be exempted from the\u00a0 \u00a0 # list of denied principals. For example, if you want to deny certain permissions\u00a0 \u00a0 # to a group but exempt a few principals, then add those here.\u00a0 \u00a0 # deny_rule.exception_principals = [\"principalSet://goog/group/project-admins@example.com\"]\u00a0 \u00a0 # Set the permissions to deny.\u00a0 \u00a0 # The permission value is of the format: service_fqdn/resource.action\u00a0 \u00a0 # For the list of supported permissions, see: https://cloud.google.com/iam/help/deny/supported-permissions\u00a0 \u00a0 deny_rule.denied_permissions = [\u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com/projects.delete\"\u00a0 \u00a0 ]\u00a0 \u00a0 # Optionally, add the permissions to be exempted from this rule.\u00a0 \u00a0 # Meaning, the deny rule will not be applicable to these permissions.\u00a0 \u00a0 # deny_rule.exception_permissions = [\"cloudresourcemanager.googleapis.com/projects.create\"]\u00a0 \u00a0 # Set the condition which will enforce the deny rule.\u00a0 \u00a0 # If this condition is true, the deny rule will be applicable. Else, the rule will not be enforced.\u00a0 \u00a0 # The expression uses Common Expression Language syntax (CEL).\u00a0 \u00a0 # Here we block access based on tags.\u00a0 \u00a0 #\u00a0 \u00a0 # Here, we create a deny rule that denies the cloudresourcemanager.googleapis.com/projects.delete permission to everyone except project-admins@example.com for resources that are tagged test.\u00a0 \u00a0 # A tag is a key-value pair that can be attached to an organization, folder, or project.\u00a0 \u00a0 # For more info, see: https://cloud.google.com/iam/docs/deny-access#create-deny-policy\u00a0 \u00a0 deny_rule.denial_condition = {\u00a0 \u00a0 \u00a0 \u00a0 \"expression\": \"!resource.matchTag('12345678/env', 'test')\"\u00a0 \u00a0 }\u00a0 \u00a0 # Add the deny rule and a description for it.\u00a0 \u00a0 policy_rule = types.PolicyRule()\u00a0 \u00a0 policy_rule.description = \"block all principals from deleting projects, unless the principal is a member of project-admins@example.com and the project being deleted has a tag with the value test\"\u00a0 \u00a0 policy_rule.deny_rule = deny_rule\u00a0 \u00a0 policy = types.Policy()\u00a0 \u00a0 policy.display_name = \"Restrict project deletion access\"\u00a0 \u00a0 policy.rules = [policy_rule]\u00a0 \u00a0 # Set the policy resource path, policy rules and a unique ID for the policy.\u00a0 \u00a0 request = types.CreatePolicyRequest()\u00a0 \u00a0 # Construct the full path of the resource's deny policies.\u00a0 \u00a0 # Its format is: \"policies/{attachmentPoint}/denypolicies\"\u00a0 \u00a0 request.parent = f\"policies/{attachment_point}/denypolicies\"\u00a0 \u00a0 request.policy = policy\u00a0 \u00a0 request.policy_id = policy_id\u00a0 \u00a0 # Build the create policy request and wait for the operation to complete.\u00a0 \u00a0 result = policies_client.create_policy(request=request).result()\u00a0 \u00a0 print(f\"Created the deny policy: {result.name.rsplit('/')[-1]}\")if __name__ == \"__main__\":\u00a0 \u00a0 import uuid\u00a0 \u00a0 # Your Google Cloud project ID.\u00a0 \u00a0 project_id = \"your-google-cloud-project-id\"\u00a0 \u00a0 # Any unique ID (0 to 63 chars) starting with a lowercase letter.\u00a0 \u00a0 policy_id = f\"deny-{uuid.uuid4()}\"\u00a0 \u00a0 # Test the policy lifecycle.\u00a0 \u00a0 create_deny_policy(project_id, policy_id)\n```The ` [policies.createPolicy](/iam/docs/reference/rest/v2/policies/createPolicy) ` method creates a deny policy for a resource.\nBefore using any of the request data, make the following replacements:- `` : A URL-encoded identifier for the resource that the deny policy is attached to. To learn how to format this value, see [Identify the attachment point](#attachment-point) on this page.\n- ``: An identifier for the deny policy.\n- ``: The display name for the deny policy.\n- `` , `` , `...` `` : The deny rules in the policy. Each deny rule can contain these fields:- `deniedPermissions` : A list of permissions that the specified principals cannot use.  The permissions must be [supported in deny policies](/iam/docs/deny-permissions-support) .In some cases, you can also use permission groups to deny sets of permissions.  For more information, see [Permission groups](/iam/docs/deny-overview#permission-groups) .\n- `deniedPrincipals`: A list of principals that cannot use the specified permissions.  Use the [v2 API format for principal identifiers](/iam/docs/principal-identifiers) .\n- `exceptionPrincipals`: Optional. A list of principals that can use the specified  permissions, even if those principals are included in`deniedPrincipals`. For  example, you can use this field to make an exception for specific users who belong to a denied  group. Use the [v2 API format for principal identifiers](/iam/docs/principal-identifiers) .\n- `denialCondition` : Optional. A [condition  expression](/iam/docs/conditions-overview) that specifies when the principals cannot use the permissions. Contains the  following fields:- `expression`: A condition expression that uses [Common   Expression Language (CEL) syntax](https://github.com/google/cel-spec/blob/master/doc/langdef.md) . The expression must use the [CEL functions for   evaluating resource tags](/iam/docs/conditions-attribute-reference#resource-tags) . Other functions and operators are not supported.\n- `title`: Optional. A brief summary of the purpose of the condition.\n- `description`: Optional. A longer description of the condition.For examples of deny rules, see [Common use cases](/iam/docs/deny-overview#use-cases) .\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v2/policies/ENCODED_ATTACHMENT_POINT/denypolicies?policyId=POLICY_ID\n```\nRequest JSON body:\n```\n{\n \"displayName\": \"POLICY_NAME\",\n \"rules\": [ {\n  \"denyRule\": DENY_RULE_1\n },\n {\n  \"denyRule\": DENY_RULE_2\n },\n {\n  \"denyRule\": DENY_RULE_N\n }\n ]\n}\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1234567890123/denypolicies/my-policy/operations/89cb3e508bf1ff01\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.iam.v2.PolicyOperationMetadata\",\n \"createTime\": \"2022-06-28T19:06:12.455151Z\"\n },\n \"response\": {\n \"@type\": \"type.googleapis.com/google.iam.v2.Policy\",\n \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1234567890123/denypolicies/my-policy\",\n \"uid\": \"6665c437-a3b2-a018-6934-54dd16d3426e\",\n \"kind\": \"DenyPolicy\",\n \"displayName\": \"My deny policy.\",\n \"etag\": \"MTc3NDU4MjM4OTY0MzU5MjQ5OTI=\",\n \"createTime\": \"2022-06-28T19:06:12.455151Z\",\n \"updateTime\": \"2022-06-28T22:26:21.968687Z\"\n \"rules\": [  {\n  \"denyRule\": {\n   \"deniedPrincipals\": [   \"principal://goog/subject/lucian@example.com\"\n   ],\n   \"deniedPermissions\": [   \"iam.googleapis.com/roles.create\"\n   ]\n  }\n  }\n ]\n }\n}\n```\nThe response identifies a long-running operation. You can monitor the status of the long-running operation to find out when it's complete. For details, see [Check the status of a long-running operation](#check-operation-status) on this page.\n## List deny policies\nA resource can have multiple deny policies. You can list all of the deny policies that are attached to a resource, then [view each denypolicy](#view-deny-policy) to see the deny rules in each policy.\nTo list the deny policies for a resource, run the [gcloud iam policies list](/sdk/gcloud/reference/iam/policies/list) command:\n```\ngcloud iam policies list \\\u00a0 \u00a0 --attachment-point=ATTACHMENT_POINT \\\u00a0 \u00a0 --kind=denypolicies \\\u00a0 \u00a0 --format=json\n```\nProvide the following value:- `` : An identifier for the resource that the deny policy is attached to. To learn how to format this value, see [Identify the attachment point](#attachment-point) on this page.\nFor example, the following command lists deny policies attached to an organization whose numeric ID is `123456789012` :\n```\ngcloud iam policies list \\\u00a0 \u00a0 --attachment-point=cloudresourcemanager.googleapis.com/organizations/123456789012 \\\u00a0 \u00a0 --kind=denypolicies \\\u00a0 \u00a0 --format=json\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](/go/docs/reference/cloud.google.com/go/iam/latest/apiv2) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/deny/list_deny_policies.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 iam \"cloud.google.com/go/iam/apiv2\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/api/iterator\"\u00a0 \u00a0 \u00a0 \u00a0 iampb \"google.golang.org/genproto/googleapis/iam/v2\")// listDenyPolicies lists all the deny policies that are attached to a resource.// A resource can have up to 5 deny policies.func listDenyPolicies(w io.Writer, projectID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"your_project_id\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 policiesClient, err := iam.NewPoliciesClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewPoliciesClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer policiesClient.Close()\u00a0 \u00a0 \u00a0 \u00a0 // Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 \u00a0 // To work with deny policies, specify the attachment point.\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 // Its format can be one of the following:\u00a0 \u00a0 \u00a0 \u00a0 // 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 \u00a0 \u00a0 // 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 \u00a0 \u00a0 // 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 // The attachment point is identified by its URL-encoded resource name. Hence, replace\u00a0 \u00a0 \u00a0 \u00a0 // the \"/\" with \"%%2F\".\u00a0 \u00a0 \u00a0 \u00a0 attachmentPoint := fmt.Sprintf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com%%2Fprojects%%2F%s\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectID,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 req := &iampb.ListPoliciesRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Construct the full path of the resource's deny policies.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Its format is: \"policies/ATTACHMENT_POINT/denypolicies\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: fmt.Sprintf(\"policies/%s/denypolicies\", attachmentPoint),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 it := policiesClient.ListPolicies(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Policies found in project %s:\\n\", projectID)\u00a0 \u00a0 \u00a0 \u00a0 for {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 policy, err := it.Next()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err == iterator.Done {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"- %s\\n\", policy.GetName())\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](/java/docs/reference/proto-google-iam-v1/latest/com.google.iam.v2) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/snippets/src/main/java/ListDenyPolicies.java) \n```\nimport com.google.iam.v2.PoliciesClient;import com.google.iam.v2.Policy;import java.io.IOException;import java.net.URLEncoder;import java.nio.charset.StandardCharsets;public class ListDenyPolicies {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 // ID or number of the Google Cloud project you want to use.\u00a0 \u00a0 String projectId = \"your-google-cloud-project-id\";\u00a0 \u00a0 listDenyPolicies(projectId);\u00a0 }\u00a0 // List all the deny policies that are attached to a resource.\u00a0 // A resource can have up to 5 deny policies.\u00a0 public static void listDenyPolicies(String projectId) throws IOException {\u00a0 \u00a0 // Initialize the Policies client.\u00a0 \u00a0 try (PoliciesClient policiesClient = PoliciesClient.create()) {\u00a0 \u00a0 \u00a0 // Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 // To work with deny policies, specify the attachment point.\u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 // Its format can be one of the following:\u00a0 \u00a0 \u00a0 // 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 \u00a0 // 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 \u00a0 // 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 // The attachment point is identified by its URL-encoded resource name.\u00a0 \u00a0 \u00a0 String urlEncodedResource =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 URLEncoder.encode(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com/projects/\", StandardCharsets.UTF_8);\u00a0 \u00a0 \u00a0 String attachmentPoint = String.format(\"%s%s\", urlEncodedResource, projectId);\u00a0 \u00a0 \u00a0 // Construct the full path of the resource to which the policy is attached.\u00a0 \u00a0 \u00a0 // Its format is: \"policies/{attachmentPoint}/denypolicies\"\u00a0 \u00a0 \u00a0 String policyParent = String.format(\"policies/%s/denypolicies\", attachmentPoint);\u00a0 \u00a0 \u00a0 // Create a list request and iterate over the returned policies.\u00a0 \u00a0 \u00a0 for (Policy policy : policiesClient.listPolicies(policyParent).iterateAll()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(policy.getName());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 System.out.println(\"Listed all deny policies\");\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Node.js API reference documentation](/nodejs/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/iam/deny/listDenyPolicies.js) \n```\n/**\u00a0* TODO(developer): Uncomment and replace these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';const {PoliciesClient} = require('@google-cloud/iam').v2;const iamClient = new PoliciesClient();// Each deny policy is attached to an organization, folder, or project.// To work with deny policies, specify the attachment point.//// Its format can be one of the following:// 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID// 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID// 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID//// The attachment point is identified by its URL-encoded resource name. Hence, replace// the \"/\" with \"%2F\".const attachmentPoint = `cloudresourcemanager.googleapis.com%2Fprojects%2F${projectId}`;async function listDenyPolicies() {\u00a0 const request = {\u00a0 \u00a0 parent: `policies/${attachmentPoint}/denypolicies`,\u00a0 };\u00a0 const policies = await iamClient.listPoliciesAsync(request);\u00a0 for await (const policy of policies) {\u00a0 \u00a0 console.log(`- ${policy.name}`);\u00a0 }}listDenyPolicies();\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](/python/docs/reference/iam/latest/google.cloud.iam_v2.services.policies.PoliciesClient) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/cloud-client/snippets/list_deny_policies.py) \n```\ndef list_deny_policy(project_id: str) -> None:\u00a0 \u00a0 from google.cloud import iam_v2\u00a0 \u00a0 from google.cloud.iam_v2 import types\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 List all the deny policies that are attached to a resource.\u00a0 \u00a0 A resource can have up to 5 deny policies.\u00a0 \u00a0 project_id: ID or number of the Google Cloud project you want to use.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 policies_client = iam_v2.PoliciesClient()\u00a0 \u00a0 # Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 # To work with deny policies, specify the attachment point.\u00a0 \u00a0 #\u00a0 \u00a0 # Its format can be one of the following:\u00a0 \u00a0 # 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 # 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 # 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 #\u00a0 \u00a0 # The attachment point is identified by its URL-encoded resource name. Hence, replace\u00a0 \u00a0 # the \"/\" with \"%2F\".\u00a0 \u00a0 attachment_point = f\"cloudresourcemanager.googleapis.com%2Fprojects%2F{project_id}\"\u00a0 \u00a0 request = types.ListPoliciesRequest()\u00a0 \u00a0 # Construct the full path of the resource's deny policies.\u00a0 \u00a0 # Its format is: \"policies/{attachmentPoint}/denypolicies\"\u00a0 \u00a0 request.parent = f\"policies/{attachment_point}/denypolicies\"\u00a0 \u00a0 # Create a list request and iterate over the returned policies.\u00a0 \u00a0 policies = policies_client.list_policies(request=request)\u00a0 \u00a0 for policy in policies:\u00a0 \u00a0 \u00a0 \u00a0 print(policy.name)\u00a0 \u00a0 print(\"Listed all deny policies\")if __name__ == \"__main__\":\u00a0 \u00a0 import uuid\u00a0 \u00a0 # Your Google Cloud project ID.\u00a0 \u00a0 project_id = \"your-google-cloud-project-id\"\u00a0 \u00a0 # Any unique ID (0 to 63 chars) starting with a lowercase letter.\u00a0 \u00a0 policy_id = f\"deny-{uuid.uuid4()}\"\u00a0 \u00a0 list_deny_policy(project_id)\n```The ` [policies.listPolicies](/iam/docs/reference/rest/v2/policies/listPolicies) ` method lists the deny policies for a resource.\nBefore using any of the request data, make the following replacements:- `` : A URL-encoded identifier for the resource that the deny policy is attached to. To learn how to format this value, see [Identify the attachment point](#attachment-point) on this page.\nHTTP method and URL:\n```\nGET https://iam.googleapis.com/v2/policies/ENCODED_ATTACHMENT_POINT/denypolicies\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"policies\": [ {\n  \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1067607927478/denypolicies/test-policy\",\n  \"uid\": \"6665c437-a3b2-a018-6934-54dd16d3426e\",\n  \"kind\": \"DenyPolicy\",\n  \"displayName\": \"My deny policy.\",\n  \"createTime\": \"2022-06-28T19:06:12.455151Z\",\n  \"updateTime\": \"2022-06-28T22:26:21.968687Z\"\n },\n {\n  \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1067607927478/denypolicies/test-policy-2\",\n  \"uid\": \"8465d710-ea20-0a08-d92c-b2a3ebf766ab\",\n  \"kind\": \"DenyPolicy\",\n  \"displayName\": \"My second deny policy.\",\n  \"createTime\": \"2022-06-05T19:21:53.595455Z\",\n  \"updateTime\": \"2022-06-05T19:21:53.595455Z\"\n },\n {\n  \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1067607927478/denypolicies/test-policy-3\",\n  \"uid\": \"ee9f7c2f-7e8c-b05c-d4e5-e03bfb2954e0\",\n  \"kind\": \"DenyPolicy\",\n  \"displayName\": \"My third deny policy.\",\n  \"createTime\": \"2022-06-05T19:22:26.770543Z\",\n  \"updateTime\": \"2022-06-05T19:22:26.770543Z\"\n }\n ]\n}\n```\n## View a deny policy\nYou can view a deny policy to see the deny rules that it contains, including the permissions that are denied and the principals who cannot use those permissions.\nTo get the deny policy for a resource, run the [gcloud iam policies get](/sdk/gcloud/reference/iam/policies/get) command:\n```\ngcloud iam policies get POLICY_ID \\\u00a0 \u00a0 --attachment-point=ATTACHMENT_POINT \\\u00a0 \u00a0 --kind=denypolicies \\\u00a0 \u00a0 --format=json\n```\nProvide the following values:- `` : The identifier for the deny policy.\n- `` : An identifier for the resource that the deny policy is attached to. To learn how to format this value, see [Identify the attachment point](#attachment-point) on this page.\nFor example, the following command gets the deny policy named `my-deny-policy` for the project `my-project` and saves it in a file named `policy.json` :\n```\ngcloud iam policies get my-deny-policy \\\u00a0 \u00a0 --attachment-point=cloudresourcemanager.googleapis.com/projects/my-project \\\u00a0 \u00a0 --kind=denypolicies \\\u00a0 \u00a0 --format=json \\\u00a0 \u00a0 > ./policy.json\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](/go/docs/reference/cloud.google.com/go/iam/latest/apiv2) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/deny/get_deny_policy.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 iam \"cloud.google.com/go/iam/apiv2\"\u00a0 \u00a0 \u00a0 \u00a0 iampb \"google.golang.org/genproto/googleapis/iam/v2\")// getDenyPolicy retrieves the deny policy given the project ID and policy ID.func getDenyPolicy(w io.Writer, projectID, policyID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"your_project_id\"\u00a0 \u00a0 \u00a0 \u00a0 // policyID := \"your_policy_id\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 policiesClient, err := iam.NewPoliciesClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewPoliciesClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer policiesClient.Close()\u00a0 \u00a0 \u00a0 \u00a0 // Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 \u00a0 // To work with deny policies, specify the attachment point.\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 // Its format can be one of the following:\u00a0 \u00a0 \u00a0 \u00a0 // 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 \u00a0 \u00a0 // 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 \u00a0 \u00a0 // 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 // The attachment point is identified by its URL-encoded resource name. Hence, replace\u00a0 \u00a0 \u00a0 \u00a0 // the \"/\" with \"%%2F\".\u00a0 \u00a0 \u00a0 \u00a0 attachmentPoint := fmt.Sprintf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com%%2Fprojects%%2F%s\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectID,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 req := &iampb.GetPolicyRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Construct the full path of the policy.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Its format is: \"policies/ATTACHMENT_POINT/denypolicies/POLICY_ID\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"policies/%s/denypolicies/%s\", attachmentPoint, policyID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 policy, err := policiesClient.GetPolicy(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"unable to get policy: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Policy %s retrieved\\n\", policy.GetName())\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](/java/docs/reference/proto-google-iam-v1/latest/com.google.iam.v2) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/snippets/src/main/java/GetDenyPolicy.java) \n```\nimport com.google.iam.v2.GetPolicyRequest;import com.google.iam.v2.PoliciesClient;import com.google.iam.v2.Policy;import java.io.IOException;import java.net.URLEncoder;import java.nio.charset.StandardCharsets;public class GetDenyPolicy {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 // ID or number of the Google Cloud project you want to use.\u00a0 \u00a0 String projectId = \"your-google-cloud-project-id\";\u00a0 \u00a0 // Specify the ID of the deny policy you want to retrieve.\u00a0 \u00a0 String policyId = \"deny-policy-id\";\u00a0 \u00a0 getDenyPolicy(projectId, policyId);\u00a0 }\u00a0 // Retrieve the deny policy given the project ID and policy ID.\u00a0 public static void getDenyPolicy(String projectId, String policyId) throws IOException {\u00a0 \u00a0 // Create the IAM Policies client.\u00a0 \u00a0 try (PoliciesClient policiesClient = PoliciesClient.create()) {\u00a0 \u00a0 \u00a0 // Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 // To work with deny policies, specify the attachment point.\u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 // Its format can be one of the following:\u00a0 \u00a0 \u00a0 // 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 \u00a0 // 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 \u00a0 // 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 // The attachment point is identified by its URL-encoded resource name.\u00a0 \u00a0 \u00a0 String urlEncodedResource =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 URLEncoder.encode(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com/projects/\", StandardCharsets.UTF_8);\u00a0 \u00a0 \u00a0 String attachmentPoint = String.format(\"%s%s\", urlEncodedResource, projectId);\u00a0 \u00a0 \u00a0 // Construct the full path of the resource to which the policy is attached.\u00a0 \u00a0 \u00a0 // Its format is: \"policies/{attachmentPoint}/denypolicies/{policyId}\"\u00a0 \u00a0 \u00a0 String policyParent = String.format(\"policies/%s/denypolicies/%s\", attachmentPoint, policyId);\u00a0 \u00a0 \u00a0 // Specify the policyParent and execute the GetPolicy request.\u00a0 \u00a0 \u00a0 GetPolicyRequest getPolicyRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GetPolicyRequest.newBuilder().setName(policyParent).build();\u00a0 \u00a0 \u00a0 Policy policy = policiesClient.getPolicy(getPolicyRequest);\u00a0 \u00a0 \u00a0 System.out.printf(\"Retrieved the deny policy: %s : %s%n\", policyId, policy);\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Node.js API reference documentation](/nodejs/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/iam/deny/getDenyPolicy.js) \n```\n/**\u00a0* TODO(developer): Uncomment and replace these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const policyID = 'YOUR_POLICY_ID';const {PoliciesClient} = require('@google-cloud/iam').v2;const iamClient = new PoliciesClient();// Each deny policy is attached to an organization, folder, or project.// To work with deny policies, specify the attachment point.//// Its format can be one of the following:// 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID// 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID// 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID//// The attachment point is identified by its URL-encoded resource name. Hence, replace// the \"/\" with \"%2F\".const attachmentPoint = `cloudresourcemanager.googleapis.com%2Fprojects%2F${projectId}`;async function getDenyPolicy() {\u00a0 const request = {\u00a0 \u00a0 name: `policies/${attachmentPoint}/denypolicies/${policyId}`,\u00a0 };\u00a0 const [policy] = await iamClient.getPolicy(request);\u00a0 console.log(`Retrieved the deny policy: ${policy.name}`);}getDenyPolicy();\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](/python/docs/reference/iam/latest/google.cloud.iam_v2.services.policies.PoliciesClient) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/cloud-client/snippets/get_deny_policy.py) \n```\nfrom google.cloud import iam_v2from google.cloud.iam_v2 import Policy, typesdef get_deny_policy(project_id: str, policy_id: str) -> Policy:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Retrieve the deny policy given the project ID and policy ID.\u00a0 \u00a0 project_id: ID or number of the Google Cloud project you want to use.\u00a0 \u00a0 policy_id: The ID of the deny policy you want to retrieve.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 policies_client = iam_v2.PoliciesClient()\u00a0 \u00a0 # Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 # To work with deny policies, specify the attachment point.\u00a0 \u00a0 #\u00a0 \u00a0 # Its format can be one of the following:\u00a0 \u00a0 # 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 # 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 # 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 #\u00a0 \u00a0 # The attachment point is identified by its URL-encoded resource name. Hence, replace\u00a0 \u00a0 # the \"/\" with \"%2F\".\u00a0 \u00a0 attachment_point = f\"cloudresourcemanager.googleapis.com%2Fprojects%2F{project_id}\"\u00a0 \u00a0 request = types.GetPolicyRequest()\u00a0 \u00a0 # Construct the full path of the policy.\u00a0 \u00a0 # Its format is: \"policies/{attachmentPoint}/denypolicies/{policyId}\"\u00a0 \u00a0 request.name = f\"policies/{attachment_point}/denypolicies/{policy_id}\"\u00a0 \u00a0 # Execute the GetPolicy request.\u00a0 \u00a0 policy = policies_client.get_policy(request=request)\u00a0 \u00a0 print(f\"Retrieved the deny policy: {policy_id} : {policy}\")\u00a0 \u00a0 return policyif __name__ == \"__main__\":\u00a0 \u00a0 import uuid\u00a0 \u00a0 # Your Google Cloud project ID.\u00a0 \u00a0 project_id = \"your-google-cloud-project-id\"\u00a0 \u00a0 # Any unique ID (0 to 63 chars) starting with a lowercase letter.\u00a0 \u00a0 policy_id = f\"deny-{uuid.uuid4()}\"\u00a0 \u00a0 policy = get_deny_policy(project_id, policy_id)\n```The ` [policies.get](/iam/docs/reference/rest/v2/policies/get) ` method gets a deny policy for a resource.\nBefore using any of the request data, make the following replacements:- `` : A URL-encoded identifier for the resource that the deny policy is attached to. To learn how to format this value, see [Identify the attachment point](#attachment-point) on this page.\n- ``: An identifier for the deny policy.\nHTTP method and URL:\n```\nGET https://iam.googleapis.com/v2/policies/ENCODED_ATTACHMENT_POINT/denypolicies/POLICY_ID\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1234567890123/denypolicies/my-policy\",\n \"uid\": \"6665c437-a3b2-a018-6934-54dd16d3426e\",\n \"kind\": \"DenyPolicy\",\n \"displayName\": \"My deny policy.\",\n \"etag\": \"MTc3NDU4MjM4OTY0MzU5MjQ5OTI=\",\n \"createTime\": \"2022-06-05T19:22:26.770543Z\",\n \"updateTime\": \"2022-06-05T19:22:26.770543Z\",\n \"rules\": [ {\n  \"denyRule\": {\n  \"deniedPrincipals\": [   \"principal://goog/subject/lucian@example.com\"\n  ],\n  \"deniedPermissions\": [   \"iam.googleapis.com/roles.create\"\n  ]\n  }\n }\n ]\n}\n```\n## Update a deny policy\nAfter you create a deny policy, you can update the deny rules that it contains, as well as its display name.\nTo update a deny policy, use the pattern:\n- Read the current version of the policy.\n- Modify the information in the policy as needed.\n- Write the updated policy.\n### Read the deny policy\nTo get the deny policy for a resource, run the [gcloud iam policies get](/sdk/gcloud/reference/iam/policies/get) command:\n```\ngcloud iam policies get POLICY_ID \\\u00a0 \u00a0 --attachment-point=ATTACHMENT_POINT \\\u00a0 \u00a0 --kind=denypolicies \\\u00a0 \u00a0 --format=json\n```\nProvide the following values:- `` : The identifier for the deny policy.\n- `` : An identifier for the resource that the deny policy is attached to. To learn how to format this value, see [Identify the attachment point](#attachment-point) on this page.\nFor example, the following command gets the deny policy named `my-deny-policy` for the project `my-project` and saves it in a file named `policy.json` :\n```\ngcloud iam policies get my-deny-policy \\\u00a0 \u00a0 --attachment-point=cloudresourcemanager.googleapis.com/projects/my-project \\\u00a0 \u00a0 --kind=denypolicies \\\u00a0 \u00a0 --format=json \\\u00a0 \u00a0 > ./policy.json\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](/go/docs/reference/cloud.google.com/go/iam/latest/apiv2) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/deny/get_deny_policy.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 iam \"cloud.google.com/go/iam/apiv2\"\u00a0 \u00a0 \u00a0 \u00a0 iampb \"google.golang.org/genproto/googleapis/iam/v2\")// getDenyPolicy retrieves the deny policy given the project ID and policy ID.func getDenyPolicy(w io.Writer, projectID, policyID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"your_project_id\"\u00a0 \u00a0 \u00a0 \u00a0 // policyID := \"your_policy_id\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 policiesClient, err := iam.NewPoliciesClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewPoliciesClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer policiesClient.Close()\u00a0 \u00a0 \u00a0 \u00a0 // Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 \u00a0 // To work with deny policies, specify the attachment point.\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 // Its format can be one of the following:\u00a0 \u00a0 \u00a0 \u00a0 // 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 \u00a0 \u00a0 // 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 \u00a0 \u00a0 // 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 // The attachment point is identified by its URL-encoded resource name. Hence, replace\u00a0 \u00a0 \u00a0 \u00a0 // the \"/\" with \"%%2F\".\u00a0 \u00a0 \u00a0 \u00a0 attachmentPoint := fmt.Sprintf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com%%2Fprojects%%2F%s\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectID,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 req := &iampb.GetPolicyRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Construct the full path of the policy.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Its format is: \"policies/ATTACHMENT_POINT/denypolicies/POLICY_ID\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"policies/%s/denypolicies/%s\", attachmentPoint, policyID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 policy, err := policiesClient.GetPolicy(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"unable to get policy: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Policy %s retrieved\\n\", policy.GetName())\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](/java/docs/reference/proto-google-iam-v1/latest/com.google.iam.v2) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/snippets/src/main/java/GetDenyPolicy.java) \n```\nimport com.google.iam.v2.GetPolicyRequest;import com.google.iam.v2.PoliciesClient;import com.google.iam.v2.Policy;import java.io.IOException;import java.net.URLEncoder;import java.nio.charset.StandardCharsets;public class GetDenyPolicy {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 // ID or number of the Google Cloud project you want to use.\u00a0 \u00a0 String projectId = \"your-google-cloud-project-id\";\u00a0 \u00a0 // Specify the ID of the deny policy you want to retrieve.\u00a0 \u00a0 String policyId = \"deny-policy-id\";\u00a0 \u00a0 getDenyPolicy(projectId, policyId);\u00a0 }\u00a0 // Retrieve the deny policy given the project ID and policy ID.\u00a0 public static void getDenyPolicy(String projectId, String policyId) throws IOException {\u00a0 \u00a0 // Create the IAM Policies client.\u00a0 \u00a0 try (PoliciesClient policiesClient = PoliciesClient.create()) {\u00a0 \u00a0 \u00a0 // Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 // To work with deny policies, specify the attachment point.\u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 // Its format can be one of the following:\u00a0 \u00a0 \u00a0 // 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 \u00a0 // 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 \u00a0 // 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 // The attachment point is identified by its URL-encoded resource name.\u00a0 \u00a0 \u00a0 String urlEncodedResource =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 URLEncoder.encode(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com/projects/\", StandardCharsets.UTF_8);\u00a0 \u00a0 \u00a0 String attachmentPoint = String.format(\"%s%s\", urlEncodedResource, projectId);\u00a0 \u00a0 \u00a0 // Construct the full path of the resource to which the policy is attached.\u00a0 \u00a0 \u00a0 // Its format is: \"policies/{attachmentPoint}/denypolicies/{policyId}\"\u00a0 \u00a0 \u00a0 String policyParent = String.format(\"policies/%s/denypolicies/%s\", attachmentPoint, policyId);\u00a0 \u00a0 \u00a0 // Specify the policyParent and execute the GetPolicy request.\u00a0 \u00a0 \u00a0 GetPolicyRequest getPolicyRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GetPolicyRequest.newBuilder().setName(policyParent).build();\u00a0 \u00a0 \u00a0 Policy policy = policiesClient.getPolicy(getPolicyRequest);\u00a0 \u00a0 \u00a0 System.out.printf(\"Retrieved the deny policy: %s : %s%n\", policyId, policy);\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Node.js API reference documentation](/nodejs/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/iam/deny/getDenyPolicy.js) \n```\n/**\u00a0* TODO(developer): Uncomment and replace these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const policyID = 'YOUR_POLICY_ID';const {PoliciesClient} = require('@google-cloud/iam').v2;const iamClient = new PoliciesClient();// Each deny policy is attached to an organization, folder, or project.// To work with deny policies, specify the attachment point.//// Its format can be one of the following:// 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID// 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID// 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID//// The attachment point is identified by its URL-encoded resource name. Hence, replace// the \"/\" with \"%2F\".const attachmentPoint = `cloudresourcemanager.googleapis.com%2Fprojects%2F${projectId}`;async function getDenyPolicy() {\u00a0 const request = {\u00a0 \u00a0 name: `policies/${attachmentPoint}/denypolicies/${policyId}`,\u00a0 };\u00a0 const [policy] = await iamClient.getPolicy(request);\u00a0 console.log(`Retrieved the deny policy: ${policy.name}`);}getDenyPolicy();\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](/python/docs/reference/iam/latest/google.cloud.iam_v2.services.policies.PoliciesClient) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/cloud-client/snippets/get_deny_policy.py) \n```\nfrom google.cloud import iam_v2from google.cloud.iam_v2 import Policy, typesdef get_deny_policy(project_id: str, policy_id: str) -> Policy:\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Retrieve the deny policy given the project ID and policy ID.\u00a0 \u00a0 project_id: ID or number of the Google Cloud project you want to use.\u00a0 \u00a0 policy_id: The ID of the deny policy you want to retrieve.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 policies_client = iam_v2.PoliciesClient()\u00a0 \u00a0 # Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 # To work with deny policies, specify the attachment point.\u00a0 \u00a0 #\u00a0 \u00a0 # Its format can be one of the following:\u00a0 \u00a0 # 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 # 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 # 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 #\u00a0 \u00a0 # The attachment point is identified by its URL-encoded resource name. Hence, replace\u00a0 \u00a0 # the \"/\" with \"%2F\".\u00a0 \u00a0 attachment_point = f\"cloudresourcemanager.googleapis.com%2Fprojects%2F{project_id}\"\u00a0 \u00a0 request = types.GetPolicyRequest()\u00a0 \u00a0 # Construct the full path of the policy.\u00a0 \u00a0 # Its format is: \"policies/{attachmentPoint}/denypolicies/{policyId}\"\u00a0 \u00a0 request.name = f\"policies/{attachment_point}/denypolicies/{policy_id}\"\u00a0 \u00a0 # Execute the GetPolicy request.\u00a0 \u00a0 policy = policies_client.get_policy(request=request)\u00a0 \u00a0 print(f\"Retrieved the deny policy: {policy_id} : {policy}\")\u00a0 \u00a0 return policyif __name__ == \"__main__\":\u00a0 \u00a0 import uuid\u00a0 \u00a0 # Your Google Cloud project ID.\u00a0 \u00a0 project_id = \"your-google-cloud-project-id\"\u00a0 \u00a0 # Any unique ID (0 to 63 chars) starting with a lowercase letter.\u00a0 \u00a0 policy_id = f\"deny-{uuid.uuid4()}\"\u00a0 \u00a0 policy = get_deny_policy(project_id, policy_id)\n```The ` [policies.get](/iam/docs/reference/rest/v2/policies/get) ` method gets a deny policy for a resource.\nBefore using any of the request data, make the following replacements:- `` : A URL-encoded identifier for the resource that the deny policy is attached to. To learn how to format this value, see [Identify the attachment point](#attachment-point) on this page.\n- ``: An identifier for the deny policy.\nHTTP method and URL:\n```\nGET https://iam.googleapis.com/v2/policies/ENCODED_ATTACHMENT_POINT/denypolicies/POLICY_ID\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1234567890123/denypolicies/my-policy\",\n \"uid\": \"6665c437-a3b2-a018-6934-54dd16d3426e\",\n \"kind\": \"DenyPolicy\",\n \"displayName\": \"My deny policy.\",\n \"etag\": \"MTc3NDU4MjM4OTY0MzU5MjQ5OTI=\",\n \"createTime\": \"2022-06-05T19:22:26.770543Z\",\n \"updateTime\": \"2022-06-05T19:22:26.770543Z\",\n \"rules\": [ {\n  \"denyRule\": {\n  \"deniedPrincipals\": [   \"principal://goog/subject/lucian@example.com\"\n  ],\n  \"deniedPermissions\": [   \"iam.googleapis.com/roles.create\"\n  ]\n  }\n }\n ]\n}\n```\n### Modify the deny policy\nTo modify the deny policy, you make changes to the copy of the policy that you previously read from IAM. You can update the display name, or you can add, change, or remove deny rules. The changes do not take effect until you [write the updated policy](#write-deny-policy) .\n**Note:** In general, policy changes take effect within 2 minutes. However, in some cases, it can take 7 minutes or more for changes to propagate across the system.\nFor example, you could add a permission to an existing deny rule:\n```\n{\u00a0 \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1234567890123/denypolicies/my-policy\",\u00a0 \"uid\": \"6665c437-a3b2-a018-6934-54dd16d3426e\",\u00a0 \"kind\": \"DenyPolicy\",\u00a0 \"displayName\": \"My deny policy.\",\u00a0 \"etag\": \"MTc3NDU4MjM4OTY0MzU5MjQ5OTI=\",\u00a0 \"createTime\": \"2021-10-05T19:22:26.770543Z\",\u00a0 \"updateTime\": \"2021-10-05T19:22:26.770543Z\",\u00a0 \"rules\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"denyRule\": {\u00a0 \u00a0 \u00a0 \u00a0 \"deniedPrincipals\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"principal://goog/subject/lucian@example.com\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"deniedPermissions\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"iam.googleapis.com/roles.create\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"iam.googleapis.com/roles.delete\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ]}\n```\n### Write the updated deny policy\nAfter you [modify the deny policy](#modify-deny-policy) locally, you must write the updated deny policy to IAM.\nEach deny policy contains an `etag` field that identifies the policy version. The `etag` changes each time you update the policy. When you write the updated policy, the `etag` in your request must match the current `etag` stored in IAM; if the values do not match, the request fails. This feature helps prevent concurrent changes from overwriting each other.\nTo update the deny policy for a resource, run the [gcloud iam policies update](/sdk/gcloud/reference/iam/policies/update) command:\n```\ngcloud iam policies update POLICY_ID \\\u00a0 \u00a0 --attachment-point=ATTACHMENT_POINT \\\u00a0 \u00a0 --kind=denypolicies \\\u00a0 \u00a0 --policy-file=POLICY_FILE\n```\nProvide the following values:- `` : The identifier for the deny policy.\n- `` : An identifier for the resource that the deny policy is attached to. To learn how to format this value, see [Identify the attachment point](#attachment-point) on this page.\n- `` : The filepath for the JSON file that contains the deny policy.By default, if this command succeeds, it does not print any output. To print a detailed response, add the flag `--format=json` to the command.For example, the following command updates a deny policy named `my-deny-policy` for the project `my-project` , using a file named `policy.json` :\n```\ngcloud iam policies update my-deny-policy \\\u00a0 \u00a0 --attachment-point=cloudresourcemanager.googleapis.com/projects/my-project \\\u00a0 \u00a0 --kind=denypolicies \\\u00a0 \u00a0 --policy-file=policy.json\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](/go/docs/reference/cloud.google.com/go/iam/latest/apiv2) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/deny/update_deny_policy.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 iam \"cloud.google.com/go/iam/apiv2\"\u00a0 \u00a0 \u00a0 \u00a0 iampb \"google.golang.org/genproto/googleapis/iam/v2\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/genproto/googleapis/type/expr\")// updateDenyPolicy updates the deny rules and/ or its display name after policy creation.func updateDenyPolicy(w io.Writer, projectID, policyID, etag string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"your_project_id\"\u00a0 \u00a0 \u00a0 \u00a0 // policyID := \"your_policy_id\"\u00a0 \u00a0 \u00a0 \u00a0 // etag := \"your_etag\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 policiesClient, err := iam.NewPoliciesClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewPoliciesClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer policiesClient.Close()\u00a0 \u00a0 \u00a0 \u00a0 // Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 \u00a0 // To work with deny policies, specify the attachment point.\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 // Its format can be one of the following:\u00a0 \u00a0 \u00a0 \u00a0 // 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 \u00a0 \u00a0 // 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 \u00a0 \u00a0 // 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 // The attachment point is identified by its URL-encoded resource name. Hence, replace\u00a0 \u00a0 \u00a0 \u00a0 // the \"/\" with \"%%2F\".\u00a0 \u00a0 \u00a0 \u00a0 attachmentPoint := fmt.Sprintf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com%%2Fprojects%%2F%s\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectID,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 denyRule := &iampb.DenyRule{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Add one or more principals who should be denied the permissions specified in this rule.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // For more information on allowed values,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // see: https://cloud.google.com/iam/help/deny/principal-identifiers\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DeniedPrincipals: []string{\"principalSet://goog/public:all\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Optionally, set the principals who should be exempted from the\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // list of denied principals. For example, if you want to deny certain permissions\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // to a group but exempt a few principals, then add those here.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // ExceptionPrincipals: []string{\"principalSet://goog/group/project-admins@example.com\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set the permissions to deny.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // The permission value is of the format: service_fqdn/resource.action\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // For the list of supported permissions,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // see: https://cloud.google.com/iam/help/deny/supported-permissions\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DeniedPermissions: []string{\"cloudresourcemanager.googleapis.com/projects.delete\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Optionally, add the permissions to be exempted from this rule.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Meaning, the deny rule will not be applicable to these permissions.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // ExceptionPermissions: []string{\"cloudresourcemanager.googleapis.com/projects.create\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set the condition which will enforce the deny rule.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // If this condition is true, the deny rule will be applicable.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Else, the rule will not be enforced.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // The expression uses Common Expression Language syntax (CEL).\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Here we block access based on tags.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Here, we create a deny rule that denies the\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // cloudresourcemanager.googleapis.com/projects.delete permission\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // to everyone except project-admins@example.com for resources that are tagged prod.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // A tag is a key-value pair that can be attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // For more info, see: https://cloud.google.com/iam/docs/deny-access#create-deny-policy\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DenialCondition: &expr.Expr{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Expression: \"!resource.matchTag('12345678/env', 'prod')\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Set the rule description and deny rule to update.\u00a0 \u00a0 \u00a0 \u00a0 policyRule := &iampb.PolicyRule{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Description: \"block all principals from deleting projects, unless the principal is a member of project-admins@example.com and the project being deleted has a tag with the value prod\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Kind: &iampb.PolicyRule_DenyRule{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DenyRule: denyRule,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Set the policy resource path, version (etag) and the updated deny rules.\u00a0 \u00a0 \u00a0 \u00a0 policy := &iampb.Policy{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Construct the full path of the policy.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Its format is: \"policies/ATTACHMENT_POINT/denypolicies/POLICY_ID\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: \u00a0fmt.Sprintf(\"policies/%s/denypolicies/%s\", attachmentPoint, policyID),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Etag: \u00a0etag,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Rules: [](*iampb.PolicyRule){policyRule},\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Create the update policy request.\u00a0 \u00a0 \u00a0 \u00a0 req := &iampb.UpdatePolicyRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Policy: policy,\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 op, err := policiesClient.UpdatePolicy(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"unable to update policy: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 policy, err = op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"unable to wait for the operation: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Policy %s updated\\n\", policy.GetName())\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](/java/docs/reference/proto-google-iam-v1/latest/com.google.iam.v2) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/snippets/src/main/java/UpdateDenyPolicy.java) \n```\nimport com.google.iam.v2.DenyRule;import com.google.iam.v2.PoliciesClient;import com.google.iam.v2.Policy;import com.google.iam.v2.PolicyRule;import com.google.iam.v2.UpdatePolicyRequest;import com.google.longrunning.Operation;import com.google.type.Expr;import java.io.IOException;import java.net.URLEncoder;import java.nio.charset.StandardCharsets;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class UpdateDenyPolicy {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, ExecutionException, InterruptedException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 // ID or number of the Google Cloud project you want to use.\u00a0 \u00a0 String projectId = \"your-google-cloud-project-id\";\u00a0 \u00a0 // Specify the ID of the Deny policy you want to retrieve.\u00a0 \u00a0 String policyId = \"deny-policy-id\";\u00a0 \u00a0 // Etag field that identifies the policy version. The etag changes each time\u00a0 \u00a0 // you update the policy. Get the etag of an existing policy by performing a GetPolicy request.\u00a0 \u00a0 String etag = \"policy_etag\";\u00a0 \u00a0 updateDenyPolicy(projectId, policyId, etag);\u00a0 }\u00a0 // Update the deny rules and/ or its display name after policy creation.\u00a0 public static void updateDenyPolicy(String projectId, String policyId, String etag)\u00a0 \u00a0 \u00a0 throws IOException, ExecutionException, InterruptedException, TimeoutException {\u00a0 \u00a0 try (PoliciesClient policiesClient = PoliciesClient.create()) {\u00a0 \u00a0 \u00a0 // Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 // To work with deny policies, specify the attachment point.\u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 // Its format can be one of the following:\u00a0 \u00a0 \u00a0 // 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 \u00a0 // 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 \u00a0 // 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 // The attachment point is identified by its URL-encoded resource name.\u00a0 \u00a0 \u00a0 String urlEncodedResource =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 URLEncoder.encode(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com/projects/\", StandardCharsets.UTF_8);\u00a0 \u00a0 \u00a0 String attachmentPoint = String.format(\"%s%s\", urlEncodedResource, projectId);\u00a0 \u00a0 \u00a0 // Construct the full path of the resource to which the policy is attached to.\u00a0 \u00a0 \u00a0 // Its format is: \"policies/{attachmentPoint}/denypolicies/{policyId}\"\u00a0 \u00a0 \u00a0 String policyParent = String.format(\"policies/%s/denypolicies/%s\", attachmentPoint, policyId);\u00a0 \u00a0 \u00a0 DenyRule denyRule =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DenyRule.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Add one or more principals who should be denied the permissions specified in this\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // rule.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // For more information on allowed values, see:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // https://cloud.google.com/iam/docs/principal-identifiers\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addDeniedPrincipals(\"principalSet://goog/public:all\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Optionally, set the principals who should be exempted from the list of principals\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // added in \"DeniedPrincipals\".\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Example, if you want to deny certain permissions to a group but exempt a few\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // principals, then add those here.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // .addExceptionPrincipals(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // \u00a0 \u00a0 \"principalSet://goog/group/project-admins@example.com\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set the permissions to deny.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // The permission value is of the format: service_fqdn/resource.action\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // For the list of supported permissions, see:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // https://cloud.google.com/iam/help/deny/supported-permissions\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addDeniedPermissions(\"cloudresourcemanager.googleapis.com/projects.delete\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Add the permissions to be exempted from this rule.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Meaning, the deny rule will not be applicable to these permissions.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // .addExceptionPermissions(\"cloudresourcemanager.googleapis.com/projects.get\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set the condition which will enforce the deny rule.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // If this condition is true, the deny rule will be applicable. Else, the rule will\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // not be enforced.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDenialCondition(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Expr.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // The expression uses Common Expression Language syntax (CEL). Here we block\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // access based on tags.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // A tag is a key-value pair that can be attached to an organization, folder,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // or project. You can use deny policies to deny permissions based on tags\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // without adding an IAM Condition to every role grant.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // For example, imagine that you tag all of your projects as dev, test, or\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // prod. You want only members of project-admins@example.com to be able to\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // perform operations on projects that are tagged prod.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // To solve this problem, you create a deny rule that denies the\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // cloudresourcemanager.googleapis.com/projects.delete permission to everyone\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // except project-admins@example.com for resources that are tagged prod.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setExpression(\"!resource.matchTag('12345678/env', 'prod')\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTitle(\"Only for prod projects\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Set the policy resource path, version (etag) and the updated deny rules.\u00a0 \u00a0 \u00a0 Policy policy =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Policy.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(policyParent)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEtag(etag)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addRules(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PolicyRule.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set the rule description to update.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDescription(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Block all principals from deleting projects, unless the principal\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" is a member of project-admins@example.com and the project\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"being deleted has a tag with the value prod\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Set the deny rule to update.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDenyRule(denyRule)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Create the update policy request.\u00a0 \u00a0 \u00a0 UpdatePolicyRequest updatePolicyRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UpdatePolicyRequest.newBuilder().setPolicy(policy).build();\u00a0 \u00a0 \u00a0 // Wait for the operation to complete.\u00a0 \u00a0 \u00a0 Operation operation =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 policiesClient\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .updatePolicyCallable()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .futureCall(updatePolicyRequest)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .get(3, TimeUnit.MINUTES);\u00a0 \u00a0 \u00a0 if (operation.hasError()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Error in updating the policy \" + operation.getError());\u00a0 \u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 System.out.println(\"Updated the deny policy: \" + policyId);\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Node.js API reference documentation](/nodejs/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/iam/deny/updateDenyPolicy.js) \n```\n/**\u00a0* TODO(developer): Uncomment and replace these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const policyID = 'YOUR_POLICY_ID';// const etag = 'YOUR_ETAG';const {PoliciesClient} = require('@google-cloud/iam').v2;const iamClient = new PoliciesClient();// Each deny policy is attached to an organization, folder, or project.// To work with deny policies, specify the attachment point.//// Its format can be one of the following:// 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID// 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID// 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID//// The attachment point is identified by its URL-encoded resource name. Hence, replace// the \"/\" with \"%2F\".const attachmentPoint = `cloudresourcemanager.googleapis.com%2Fprojects%2F${projectId}`;const denyRule = {\u00a0 // Add one or more principals who should be denied the permissions specified in this rule.\u00a0 // For more information on allowed values, see: https://cloud.google.com/iam/help/deny/principal-identifiers\u00a0 deniedPrincipals: ['principalSet://goog/public:all'],\u00a0 // Optionally, set the principals who should be exempted from the\u00a0 // list of denied principals. For example, if you want to deny certain permissions\u00a0 // to a group but exempt a few principals, then add those here.\u00a0 // exceptionPrincipals: ['principalSet://goog/group/project-admins@example.com'],\u00a0 // Set the permissions to deny.\u00a0 // The permission value is of the format: service_fqdn/resource.action\u00a0 // For the list of supported permissions, see: https://cloud.google.com/iam/help/deny/supported-permissions\u00a0 deniedPermissions: ['cloudresourcemanager.googleapis.com/projects.delete'],\u00a0 // Optionally, add the permissions to be exempted from this rule.\u00a0 // Meaning, the deny rule will not be applicable to these permissions.\u00a0 // exceptionPermissions: ['cloudresourcemanager.googleapis.com/projects.create']\u00a0 //\u00a0 // Set the condition which will enforce the deny rule.\u00a0 // If this condition is true, the deny rule will be applicable. Else, the rule will not be enforced.\u00a0 // The expression uses Common Expression Language syntax (CEL).\u00a0 // Here we block access based on tags.\u00a0 //\u00a0 // Here, we create a deny rule that denies the cloudresourcemanager.googleapis.com/projects.delete permission to everyone except project-admins@example.com for resources that are tagged test.\u00a0 // A tag is a key-value pair that can be attached to an organization, folder, or project.\u00a0 // For more info, see: https://cloud.google.com/iam/docs/deny-access#create-deny-policy\u00a0 denialCondition: {\u00a0 \u00a0 expression: '!resource.matchTag(\"12345678/env\", \"prod\")',\u00a0 },};async function updateDenyPolicy() {\u00a0 const request = {\u00a0 \u00a0 policy: {\u00a0 \u00a0 \u00a0 name: `policies/${attachmentPoint}/denypolicies/${policyId}`,\u00a0 \u00a0 \u00a0 etag,\u00a0 \u00a0 \u00a0 rules: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 description:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'block all principals from deleting projects, unless the principal is a member of project-admins@example.com and the project being deleted has a tag with the value prod',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 denyRule,\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 },\u00a0 \u00a0 policyId,\u00a0 };\u00a0 const [operation] = await iamClient.updatePolicy(request);\u00a0 const [policy] = await operation.promise();\u00a0 console.log(`Updated the deny policy: ${policy.name}`);}updateDenyPolicy();\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](/python/docs/reference/iam/latest/google.cloud.iam_v2.services.policies.PoliciesClient) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/cloud-client/snippets/update_deny_policy.py) \n```\ndef update_deny_policy(project_id: str, policy_id: str, etag: str) -> None:\u00a0 \u00a0 from google.cloud import iam_v2\u00a0 \u00a0 from google.cloud.iam_v2 import types\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Update the deny rules and/ or its display name after policy creation.\u00a0 \u00a0 project_id: ID or number of the Google Cloud project you want to use.\u00a0 \u00a0 policy_id: The ID of the deny policy you want to retrieve.\u00a0 \u00a0 etag: Etag field that identifies the policy version. The etag changes each time\u00a0 \u00a0 you update the policy. Get the etag of an existing policy by performing a GetPolicy request.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 policies_client = iam_v2.PoliciesClient()\u00a0 \u00a0 # Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 # To work with deny policies, specify the attachment point.\u00a0 \u00a0 #\u00a0 \u00a0 # Its format can be one of the following:\u00a0 \u00a0 # 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 # 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 # 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 #\u00a0 \u00a0 # The attachment point is identified by its URL-encoded resource name. Hence, replace\u00a0 \u00a0 # the \"/\" with \"%2F\".\u00a0 \u00a0 attachment_point = f\"cloudresourcemanager.googleapis.com%2Fprojects%2F{project_id}\"\u00a0 \u00a0 deny_rule = types.DenyRule()\u00a0 \u00a0 # Add one or more principals who should be denied the permissions specified in this rule.\u00a0 \u00a0 # For more information on allowed values, see: https://cloud.google.com/iam/help/deny/principal-identifiers\u00a0 \u00a0 deny_rule.denied_principals = [\"principalSet://goog/public:all\"]\u00a0 \u00a0 # Optionally, set the principals who should be exempted from the list of principals added in \"DeniedPrincipals\".\u00a0 \u00a0 # Example, if you want to deny certain permissions to a group but exempt a few principals, then add those here.\u00a0 \u00a0 # deny_rule.exception_principals = [\"principalSet://goog/group/project-admins@example.com\"]\u00a0 \u00a0 # Set the permissions to deny.\u00a0 \u00a0 # The permission value is of the format: service_fqdn/resource.action\u00a0 \u00a0 # For the list of supported permissions, see: https://cloud.google.com/iam/help/deny/supported-permissions\u00a0 \u00a0 deny_rule.denied_permissions = [\u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com/projects.delete\"\u00a0 \u00a0 ]\u00a0 \u00a0 # Add the permissions to be exempted from this rule.\u00a0 \u00a0 # Meaning, the deny rule will not be applicable to these permissions.\u00a0 \u00a0 # deny_rule.exception_permissions = [\"cloudresourcemanager.googleapis.com/projects.get\"]\u00a0 \u00a0 # Set the condition which will enforce the deny rule.\u00a0 \u00a0 # If this condition is true, the deny rule will be applicable. Else, the rule will not be enforced.\u00a0 \u00a0 #\u00a0 \u00a0 # The expression uses Common Expression Language syntax (CEL). Here we block access based on tags.\u00a0 \u00a0 #\u00a0 \u00a0 # Here, we create a deny rule that denies the cloudresourcemanager.googleapis.com/projects.delete permission to everyone except project-admins@example.com for resources that are tagged prod.\u00a0 \u00a0 # A tag is a key-value pair that can be attached to an organization, folder, or project.\u00a0 \u00a0 # For more info, see: https://cloud.google.com/iam/docs/deny-access#create-deny-policy\u00a0 \u00a0 deny_rule.denial_condition = {\u00a0 \u00a0 \u00a0 \u00a0 \"expression\": \"!resource.matchTag('12345678/env', 'prod')\"\u00a0 \u00a0 }\u00a0 \u00a0 # Set the rule description and deny rule to update.\u00a0 \u00a0 policy_rule = types.PolicyRule()\u00a0 \u00a0 policy_rule.description = \"block all principals from deleting projects, unless the principal is a member of project-admins@example.com and the project being deleted has a tag with the value prod\"\u00a0 \u00a0 policy_rule.deny_rule = deny_rule\u00a0 \u00a0 # Set the policy resource path, version (etag) and the updated deny rules.\u00a0 \u00a0 policy = types.Policy()\u00a0 \u00a0 # Construct the full path of the policy.\u00a0 \u00a0 # Its format is: \"policies/{attachmentPoint}/denypolicies/{policyId}\"\u00a0 \u00a0 policy.name = f\"policies/{attachment_point}/denypolicies/{policy_id}\"\u00a0 \u00a0 policy.etag = etag\u00a0 \u00a0 policy.rules = [policy_rule]\u00a0 \u00a0 # Create the update policy request.\u00a0 \u00a0 request = types.UpdatePolicyRequest()\u00a0 \u00a0 request.policy = policy\u00a0 \u00a0 result = policies_client.update_policy(request=request).result()\u00a0 \u00a0 print(f\"Updated the deny policy: {result.name.rsplit('/')[-1]}\")if __name__ == \"__main__\":\u00a0 \u00a0 import uuid\u00a0 \u00a0 # Your Google Cloud project ID.\u00a0 \u00a0 project_id = \"your-google-cloud-project-id\"\u00a0 \u00a0 # Any unique ID (0 to 63 chars) starting with a lowercase letter.\u00a0 \u00a0 policy_id = f\"deny-{uuid.uuid4()}\"\u00a0 \u00a0 # Get the etag by performing a Get policy request.\u00a0 \u00a0 etag = \"etag\"\u00a0 \u00a0 update_deny_policy(project_id, policy_id, etag)\n```The ` [policies.update](/iam/docs/reference/rest/v2/policies/update) ` method updates a deny policy.\nBefore using any of the request data, make the following replacements:- `` : A URL-encoded identifier for the resource that the deny policy is attached to. To learn how to format this value, see [Identify the attachment point](#attachment-point) on this page.\n- ``: An identifier for the deny policy.\n- `` : The updated deny policy.For example, to add a permission to the policy shown in the previous step, replace `` with the following:```\n{\u00a0 \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1234567890123/denypolicies/my-policy\",\u00a0 \"uid\": \"6665c437-a3b2-a018-6934-54dd16d3426e\",\u00a0 \"kind\": \"DenyPolicy\",\u00a0 \"displayName\": \"My deny policy.\",\u00a0 \"etag\": \"MTc3NDU4MjM4OTY0MzU5MjQ5OTI=\",\u00a0 \"createTime\": \"2022-06-05T19:22:26.770543Z\",\u00a0 \"updateTime\": \"2022-06-05T19:22:26.770543Z\",\u00a0 \"rules\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"denyRule\": {\u00a0 \u00a0 \u00a0 \u00a0 \"deniedPrincipals\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"principal://goog/subject/lucian@example.com\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"deniedPermissions\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"iam.googleapis.com/roles.create\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"iam.googleapis.com/roles.delete\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ]}\n```\nHTTP method and URL:\n```\nPUT https://iam.googleapis.com/v2/policies/ENCODED_ATTACHMENT_POINT/denypolicies/POLICY_ID\n```\nRequest JSON body:\n```\nPOLICY\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1234567890123/denypolicies/my-policy/operations/8b2d0ab2daf1ff01\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.iam.v2.PolicyOperationMetadata\",\n \"createTime\": \"2021-10-05T22:26:21.968687Z\"\n },\n \"response\": {\n \"@type\": \"type.googleapis.com/google.iam.v2.Policy\",\n \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1234567890123/denypolicies/my-policy\",\n \"uid\": \"6665c437-a3b2-a018-6934-54dd16d3426e\",\n \"kind\": \"DenyPolicy\",\n \"displayName\": \"My deny policy.\",\n \"etag\": \"MTgxNTIxNDE3NTYxNjQxODYxMTI=\",\n \"createTime\": \"2022-06-05T19:22:26.770543Z\",\n \"updateTime\": \"2022-06-05T22:26:21.968687Z\",\n \"rules\": [  {\n  \"denyRule\": {\n   \"deniedPrincipals\": [   \"principal://goog/subject/lucian@example.com\"\n   ],\n   \"deniedPermissions\": [   \"iam.googleapis.com/roles.create\",\n   \"iam.googleapis.com/roles.delete\"\n   ]\n  }\n  }\n ]\n }\n}\n```\nThe response identifies a long-running operation. You can monitor the status of the long-running operation to find out when it's complete. For details, see [Check the status of a long-running operation](#check-operation-status) on this page.\n## Delete a deny policy\nIf you no longer want to enforce the rules in a deny policy, you can delete the deny policy.\n**Caution:** Deleting a deny policy is permanent. You cannot undelete deny policies.\nOptionally, you can specify the `etag` for the policy version that you are deleting. If you specify the `etag` , it must match the current `etag` stored by IAM; if the values do not match, the request fails. You can use this feature to ensure that you are deleting the intended policy, rather than an updated version of that policy.\nIf you omit the `etag` from the request, IAM deletes the policy unconditionally.\n**Note:** In general, policy changes take effect within 2 minutes. However, in some cases, it can take 7 minutes or more for changes to propagate across the system.\nTo delete a deny policy from a resource, run the [gcloud iam policies delete](/sdk/gcloud/reference/iam/policies/delete) command:\n```\ngcloud iam policies delete POLICY_ID \\\u00a0 \u00a0 --attachment-point=ATTACHMENT_POINT \\\u00a0 \u00a0 --kind=denypolicies\n```\nProvide the following values:- `` : The identifier for the deny policy.\n- `` : An identifier for the resource that the deny policy is attached to. To learn how to format this value, see [Identify the attachment point](#attachment-point) on this page.\nOptionally, you can add the flag `--etag=` `` . Replace `` with the current `etag` value for the deny policy.\nBy default, if this command succeeds, it does not print any output. To print a detailed response, add the flag `--format=json` to the command.For example, the following command deletes a deny policy named `my-deny-policy` from the project `my-project` :\n```\ngcloud iam policies delete my-deny-policy \\\u00a0 \u00a0 --attachment-point=cloudresourcemanager.googleapis.com/projects/my-project \\\u00a0 \u00a0 --kind=denypolicies\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](/go/docs/reference/cloud.google.com/go/iam/latest/apiv2) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/deny/delete_deny_policy.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 iam \"cloud.google.com/go/iam/apiv2\"\u00a0 \u00a0 \u00a0 \u00a0 iampb \"google.golang.org/genproto/googleapis/iam/v2\")// deleteDenyPolicy deletes the policy if you no longer want to enforce the rules in a deny policy.func deleteDenyPolicy(w io.Writer, projectID, policyID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"your_project_id\"\u00a0 \u00a0 \u00a0 \u00a0 // policyID := \"your_policy_id\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 policiesClient, err := iam.NewPoliciesClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewPoliciesClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer policiesClient.Close()\u00a0 \u00a0 \u00a0 \u00a0 // Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 \u00a0 // To work with deny policies, specify the attachment point.\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 // Its format can be one of the following:\u00a0 \u00a0 \u00a0 \u00a0 // 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 \u00a0 \u00a0 // 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 \u00a0 \u00a0 // 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 \u00a0 // The attachment point is identified by its URL-encoded resource name. Hence, replace\u00a0 \u00a0 \u00a0 \u00a0 // the \"/\" with \"%%2F\".\u00a0 \u00a0 \u00a0 \u00a0 attachmentPoint := fmt.Sprintf(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com%%2Fprojects%%2F%s\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectID,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 req := &iampb.DeletePolicyRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Construct the full path of the policy.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Its format is: \"policies/ATTACHMENT_POINT/denypolicies/POLICY_ID\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"policies/%s/denypolicies/%s\", attachmentPoint, policyID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 op, err := policiesClient.DeletePolicy(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"unable to delete policy: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 policy, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"unable to wait for the operation: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Policy %s deleted\\n\", policy.GetName())\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](/java/docs/reference/proto-google-iam-v1/latest/com.google.iam.v2) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/snippets/src/main/java/DeleteDenyPolicy.java) \n```\nimport com.google.iam.v2.DeletePolicyRequest;import com.google.iam.v2.PoliciesClient;import com.google.longrunning.Operation;import java.io.IOException;import java.net.URLEncoder;import java.nio.charset.StandardCharsets;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class DeleteDenyPolicy {\u00a0 public static void main(String[] args)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 // ID or number of the Google Cloud project you want to use.\u00a0 \u00a0 String projectId = \"your-google-cloud-project-id\";\u00a0 \u00a0 // Specify the ID of the deny policy you want to retrieve.\u00a0 \u00a0 String policyId = \"deny-policy-id\";\u00a0 \u00a0 deleteDenyPolicy(projectId, policyId);\u00a0 }\u00a0 // Delete the policy if you no longer want to enforce the rules in a deny policy.\u00a0 public static void deleteDenyPolicy(String projectId, String policyId)\u00a0 \u00a0 \u00a0 throws IOException, InterruptedException, ExecutionException, TimeoutException {\u00a0 \u00a0 try (PoliciesClient policiesClient = PoliciesClient.create()) {\u00a0 \u00a0 \u00a0 // Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 \u00a0 // To work with deny policies, specify the attachment point.\u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 // Its format can be one of the following:\u00a0 \u00a0 \u00a0 // 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 \u00a0 // 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 \u00a0 // 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 \u00a0 //\u00a0 \u00a0 \u00a0 // The attachment point is identified by its URL-encoded resource name.\u00a0 \u00a0 \u00a0 String urlEncodedResource =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 URLEncoder.encode(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager.googleapis.com/projects/\", StandardCharsets.UTF_8);\u00a0 \u00a0 \u00a0 String attachmentPoint = String.format(\"%s%s\", urlEncodedResource, projectId);\u00a0 \u00a0 \u00a0 // Construct the full path of the resource to which the policy is attached.\u00a0 \u00a0 \u00a0 // Its format is: \"policies/{attachmentPoint}/denypolicies/{policyId}\"\u00a0 \u00a0 \u00a0 String policyParent = String.format(\"policies/%s/denypolicies/%s\", attachmentPoint, policyId);\u00a0 \u00a0 \u00a0 // Create the DeletePolicy request.\u00a0 \u00a0 \u00a0 DeletePolicyRequest deletePolicyRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DeletePolicyRequest.newBuilder().setName(policyParent).build();\u00a0 \u00a0 \u00a0 // Delete the policy and wait for the operation to complete.\u00a0 \u00a0 \u00a0 Operation operation =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 policiesClient\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .deletePolicyCallable()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .futureCall(deletePolicyRequest)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .get(3, TimeUnit.MINUTES);\u00a0 \u00a0 \u00a0 if (operation.hasError()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Error in deleting the policy \" + operation.getError());\u00a0 \u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 System.out.println(\"Deleted the deny policy: \" + policyId);\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Node.js API reference documentation](/nodejs/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/iam/deny/deleteDenyPolicy.js) \n```\n/**\u00a0* TODO(developer): Uncomment and replace these variables before running the sample.\u00a0*/// const projectId = 'YOUR_PROJECT_ID';// const policyID = 'YOUR_POLICY_ID';const {PoliciesClient} = require('@google-cloud/iam').v2;const iamClient = new PoliciesClient();// Each deny policy is attached to an organization, folder, or project.// To work with deny policies, specify the attachment point.//// Its format can be one of the following:// 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID// 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID// 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID//// The attachment point is identified by its URL-encoded resource name. Hence, replace// the \"/\" with \"%2F\".const attachmentPoint = `cloudresourcemanager.googleapis.com%2Fprojects%2F${projectId}`;async function deleteDenyPolicy() {\u00a0 const request = {\u00a0 \u00a0 name: `policies/${attachmentPoint}/denypolicies/${policyId}`,\u00a0 };\u00a0 const [operation] = await iamClient.deletePolicy(request);\u00a0 const [policy] = await operation.promise();\u00a0 console.log(`Deleted the deny policy: ${policy.name}`);}deleteDenyPolicy();\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](/python/docs/reference/iam/latest/google.cloud.iam_v2.services.policies.PoliciesClient) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/cloud-client/snippets/delete_deny_policy.py) \n```\ndef delete_deny_policy(project_id: str, policy_id: str) -> None:\u00a0 \u00a0 from google.cloud import iam_v2\u00a0 \u00a0 from google.cloud.iam_v2 import types\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 Delete the policy if you no longer want to enforce the rules in a deny policy.\u00a0 \u00a0 project_id: ID or number of the Google Cloud project you want to use.\u00a0 \u00a0 policy_id: The ID of the deny policy you want to retrieve.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 policies_client = iam_v2.PoliciesClient()\u00a0 \u00a0 # Each deny policy is attached to an organization, folder, or project.\u00a0 \u00a0 # To work with deny policies, specify the attachment point.\u00a0 \u00a0 #\u00a0 \u00a0 # Its format can be one of the following:\u00a0 \u00a0 # 1. cloudresourcemanager.googleapis.com/organizations/ORG_ID\u00a0 \u00a0 # 2. cloudresourcemanager.googleapis.com/folders/FOLDER_ID\u00a0 \u00a0 # 3. cloudresourcemanager.googleapis.com/projects/PROJECT_ID\u00a0 \u00a0 #\u00a0 \u00a0 # The attachment point is identified by its URL-encoded resource name. Hence, replace\u00a0 \u00a0 # the \"/\" with \"%2F\".\u00a0 \u00a0 attachment_point = f\"cloudresourcemanager.googleapis.com%2Fprojects%2F{project_id}\"\u00a0 \u00a0 request = types.DeletePolicyRequest()\u00a0 \u00a0 # Construct the full path of the policy.\u00a0 \u00a0 # Its format is: \"policies/{attachmentPoint}/denypolicies/{policyId}\"\u00a0 \u00a0 request.name = f\"policies/{attachment_point}/denypolicies/{policy_id}\"\u00a0 \u00a0 # Create the DeletePolicy request.\u00a0 \u00a0 result = policies_client.delete_policy(request=request).result()\u00a0 \u00a0 print(f\"Deleted the deny policy: {result.name.rsplit('/')[-1]}\")if __name__ == \"__main__\":\u00a0 \u00a0 import uuid\u00a0 \u00a0 # Your Google Cloud project ID.\u00a0 \u00a0 project_id = \"your-google-cloud-project-id\"\u00a0 \u00a0 # Any unique ID (0 to 63 chars) starting with a lowercase letter.\u00a0 \u00a0 policy_id = f\"deny-{uuid.uuid4()}\"\u00a0 \u00a0 delete_deny_policy(project_id, policy_id)\n```The ` [policies.delete](/iam/docs/reference/rest/v2/policies/delete) ` method deletes a deny policy from a resource.\nBefore using any of the request data, make the following replacements:- `` : A URL-encoded identifier for the resource that the deny policy is attached to. To learn how to format this value, see [Identify the attachment point](#attachment-point) on this page.\n- ``: An identifier for the deny policy.\n- ``: Optional. An identifier for the version of the policy. If present,  this value must match the current`etag`value for the policy.\nHTTP method and URL:\n```\nDELETE https://iam.googleapis.com/v2/policies/ENCODED_ATTACHMENT_POINT/denypolicies/POLICY_ID?etag=ETAG\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1234567890123/denypolicies/my-policy/operations/8223fe308bf1ff01\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.iam.v2.PolicyOperationMetadata\",\n \"createTime\": \"2021-10-05T19:45:00.133311Z\"\n },\n \"response\": {\n \"@type\": \"type.googleapis.com/google.iam.v2.Policy\",\n \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1234567890123/denypolicies/my-policy\",\n \"kind\": \"DenyPolicy\",\n \"displayName\": \"My deny policy.\",\n \"etag\": \"MTc3NDU4MjM4OTY0MzU5MjQ5OTI=\",\n \"createTime\": \"2022-06-28T19:06:12.455151Z\",\n \"updateTime\": \"2022-07-05T19:45:00.133311Z\",\n \"deleteTime\": \"2022-07-05T19:45:00.133311Z\",\n \"rules\": [  {\n  \"denyRule\": {\n   \"deniedPrincipals\": [   \"principal://goog/subject/lucian@example.com\"\n   ],\n   \"deniedPermissions\": [   \"iam.googleapis.com/roles.create\"\n   ]\n  }\n  }\n ]\n }\n}\n```\nThe response identifies a long-running operation. You can monitor the status of the long-running operation to find out when it's complete. For details, see [Check the status of a long-running operation](#check-operation-status) on this page.\n## Check the status of a long-running operation\nWhen you use the REST API or the client libraries, any method that changes a deny policy returns a long-running operation, or LRO. The long-running operation tracks the status of the request and indicates whether the change to the policy is complete.\n**Note:** If you use the gcloud CLI, you can see the long-running operation by running a command with the `--format=json` flag. However, you must use the REST API or the client libraries to get the operation's status.\nThe code samples on this page show how to wait for a long-running operation to finish, then access its result.The code samples on this page show how to wait for a long-running operation to finish, then access its result.The code samples on this page show how to wait for a long-running operation to finish, then access its result.The code samples on this page show how to wait for a long-running operation to finish, then access its result.The ` [policies.operations.get](/iam/docs/reference/rest/v2/policies.operations/get) ` method returns the status of a long-running operation.\nBefore using any of the request data, make the following replacements:- `` : A URL-encoded identifier for the resource that the deny policy is attached to. To learn how to format this value, see [Identify the attachment point](#attachment-point) on this page.\n- ``: The identifier for the operation. You receive this  identifier in the response to your original request, as part of the operation name. Use the  hexadecimal value at the end of the operation name. For example,`89cb3e508bf1ff01`.\nHTTP method and URL:\n```\nGET https://iam.googleapis.com/v2/policies/ENCODED_ATTACHMENT_POINT/operations/OPERATION_ID\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"policies/cloudresourcemanager.googleapis.com%2Fprojects%2F1234567890123/denypolicies/my-policy/operations/89cb3e508bf1ff01\",\n \"done\": true\n}\n```\nIf the operation's `done` field is not present, continue to monitor its status by getting the operation repeatedly. Use [truncated exponential backoff](/iam/docs/retry-strategy#algorithm) to introduce a delay between each request. When the `done` field is set to `true` , the operation is complete, and you can stop getting the operation.\n## What's next\n- Identify the [permissions that are supported in deny policies](/iam/docs/deny-permissions-support) .\n- Get the format of [principal identifiers in deny policies](/iam/docs/principal-identifiers) .\n- Find out how to [troubleshoot access issues with deny policies](/iam/docs/troubleshoot-policies) .\n- Learn more about [denying access to principals](/iam/docs/deny-overview) .", "guide": "IAM"}