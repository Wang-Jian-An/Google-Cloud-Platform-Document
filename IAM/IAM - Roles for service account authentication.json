{"title": "IAM - Roles for service account authentication", "url": "https://cloud.google.com/iam/docs/service-account-permissions", "abstract": "# IAM - Roles for service account authentication\nPrincipals can use service accounts to authenticate in a few different ways. Each type of authentication requires the principal to have specific Identity and Access Management (IAM) permissions on the service account.\nThis page describes the roles that you can grant to principals to let them impersonate service accounts or attach service accounts to resources. It also describes the permissions that you need in common scenarios.\nTo learn about different ways to authenticate with a service account, see [Service account credentials](/iam/docs/service-account-overview#credentials) and [Service account impersonation](/iam/docs/service-account-impersonation) .\n", "content": "## Service account roles\nThis section describes the roles that let principals authenticate with service accounts. To learn how to grant and revoke these roles, see [Manage access to service accounts](/iam/docs/manage-access-service-accounts) .\n### Service Account User role\nThe Service Account User role ( `roles/iam.serviceAccountUser` ) lets a principal [attach a service account to a resource](/iam/docs/attach-service-accounts) . When the code running on that resource needs to authenticate, it can get credentials for the attached service account.\nThis role does allow principals to [create short-lived credentials](/iam/docs/create-short-lived-credentials-direct) for service accounts, or to use the [--impersonate-service-account flag](/sdk/gcloud/reference#--impersonate-service-account) for the Google Cloud CLI. To complete these tasks, you need the [Service Account Token Creator role](#token-creator-role) on the service account.\n### Service Account Token Creator role\nThe Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ) lets principals [create short-lived credentials](/iam/docs/create-short-lived-credentials-direct) for a service account.\nThe Service Account Token Creator role lets you create the following types of short-lived credentials:\n- OAuth 2.0 access tokens, which you can use to authenticate with Google APIs\n- OpenID Connect (OIDC) ID tokens\n- Signed JSON Web Tokens (JWTs) and binary blobs\n**Note:** If you only need to create OIDC ID tokens, use the [Service Account OpenID Connect Identity Token Creator role](#id-token-creator-role) instead. This role includes only the permission for creating OIDC ID tokens.\nThe Service Account Token Creator role also lets principals use the [--impersonate-service-account flag](/sdk/gcloud/reference#--impersonate-service-account) for the gcloud CLI. When you use this flag, the gcloud CLI automatically creates short-lived credentials for the service account.\nThe role's permissions include the following:\n- `iam.serviceAccounts.getAccessToken`: lets you create OAuth 2.0 access tokens\n- `iam.serviceAccounts.getOpenIdToken`: lets you create OpenID Connect (OIDC) ID tokens\n- `iam.serviceAccounts.implicitDelegation`: lets service accounts get tokens in a [delegation chain](/iam/docs/create-short-lived-credentials-delegated) \n- `iam.serviceAccounts.signBlob`: lets you sign binary blobs\n- `iam.serviceAccounts.signJwt`: lets you sign JWTs\n### Service Account OpenID Connect Identity Token Creator\nThe Service Account OpenID Connect Identity Token Creator role ( `roles/iam.serviceAccountOpenIdTokenCreator` ) lets principals [create short-lived OIDC ID tokens](/iam/docs/create-short-lived-credentials-direct#sa-credentials-oidc) . If you only need to create OIDC ID tokens, use this role. If you need to create other types of tokens, use the [Service Account Token Creator role](#token-creator-role) instead.\nThe role includes the `iam.serviceAccounts.getOpenIdToken` permission, which lets you create an OIDC ID token.\n### Workload Identity User role\nThe Workload Identity User role ( `roles/iam.workloadIdentityUser` ) lets principals impersonate service accounts from GKE workloads.\nThe role's permissions include the following:\n- `iam.serviceAccounts.getAccessToken`: lets you create OAuth 2.0 access tokens\n- `iam.serviceAccounts.getOpenIdToken`: lets you create OpenID Connect (OIDC) ID tokens## Service account permissions for common scenarios\nService accounts can be used in many different scenarios, and each of them requires certain permissions. This section describes common scenarios and what permissions are required.\n### Attaching service accounts to resources\nIf you want to start a long-running job that authenticates as a service account, you need to attach a service account to the resource that will run the job.\n**Permissions:**\n- Permissions to create the resource\n- `iam.serviceAccounts.actAs`\nTo find roles that include these permissions, search the [roles list](/iam/docs/understanding-roles) for the permissions.\nThere are several different Google Cloud resources that can run long-running jobs as service accounts. Some examples of these resources include:\n- Compute Engine VMs\n- App Engine apps\n- Cloud Functions\nWhen you create these resources, you have the option to attach a service account. This service account acts as the resource's identity.\nTo create a resource and attach a service account, you need permissions to create that resource and permission to attach the service account to resources. Permission to attach service accounts to resources provided by any role that includes the `iam.serviceAccounts.actAs` permission\u2014for example, the Service Account User role (roles/iam.serviceAccountUser).\n**Note:** In the past, some Google Cloud services did not always require users to have the `iam.serviceAccounts.actAs` permission to attach a service account to a resource. This legacy behavior still exists for some organizations. For more information, see [Requiring permission to attach service accounts to resources](/iam/docs/service-accounts-actas) .\nAfter you create the resource and attach a service account to it, you can start a long-running job on the resource. The job runs as the service account that is attached to the resource, and uses that service account to authorize requests to Google Cloud APIs.\nTo learn more about attaching service accounts to resources, see [Attaching a service account to a resource](/iam/docs/attach-service-accounts) .\n[](None)\n[Impersonating a service accountPermissions:iam.serviceAccounts.getAccessTokeniam.serviceAccounts.signBlobiam.serviceAccounts.signJwtiam.serviceAccounts.implicitDelegationRoles:roles/iam.serviceAccountTokenCreator (Service Account Token Creator)Once granted the required permissions, a user (or another service account) canimpersonate the service account in a few common scenarios.](None)\n[First, the user can authenticate as the service account. For example, they canget short-lived credentials for the service account using theiam.serviceAccounts.getAccessToken permission and by calling the](None)  [generateAccessToken()](/iam/credentials/reference/rest/v1/projects.serviceAccounts/generateAccessToken) method. Or, they can use the [--impersonate-service-account flag](/sdk/gcloud/reference#--impersonate-service-account) for gcloud CLI to impersonate the service account. When a user authenticates as a service account, they can issue commands to Google Cloud and can access all resources to which the service account has access.\nSecond, the user can get artifacts signed by the Google-managed private key of the service account using the `iam.serviceAccounts.signBlob` permission and by calling either the [signBlob()](/iam/credentials/reference/rest/v1/projects.serviceAccounts/signBlob) or [signJwt()](/iam/credentials/reference/rest/v1/projects.serviceAccounts/signJwt) method. The Google-managed private key is always held in escrow and is never directly exposed. `signBlob()` allows signing of arbitrary payloads (such as Cloud Storage-signed URLs), while `signJwt()` only allows signing well-formed JWTs.\nFinally, the user can impersonate the service account without ever retrieving a credential for the service account. This is an advanced use case, and is only supported for programmatic access using the [generateAccessToken()](/iam/credentials/reference/rest/v1/projects.serviceAccounts/generateAccessToken) method. In scenarios with at least 3 service accounts, namely , , and : service account can get an access token for service account if service account is granted the `iam.serviceAccounts.implicitDelegation` permission on , and is granted the `iam.serviceAccounts.getAccessToken` permission on .\n### Generating OpenID Connect (OIDC) ID tokens\n**Permissions:**\n- `iam.serviceAccounts.getOpenIdToken`\n**Roles:**\n- `roles/iam.serviceAccountOpenIdTokenCreator`(Service Account OpenID Connect Identity Token Creator)\nA user (or service) can generate an OpenID Connect (OIDC)-compatible JWT token signed by the Google OIDC Provider (accounts.google.com) that represents the identity of the service account using the `iam.serviceAccounts.getOpenIdToken` permission.\nThese tokens are not directly accepted by most Google APIs without your organization deploying additional identity federation to grant access to Google. There are a few exceptions\u2014for example, Identity-Aware Proxy, which allows OIDC-based access to user-run applications.\n### Generating external private keys\n**Permissions:**\n- `iam.serviceAccountKeys.create`\n**Roles:**\n- `roles/editor`(Editor)\n- `roles/iam.serviceAccountKeyAdmin`(Service Account Key Admin)\nA user or service can generate external private key material (RSA) that can be used to authenticate directly to Google as the service account. This key material can then be used with Application Default Credentials (ADC) libraries, or with the [gcloud authactivate-service-account](/sdk/gcloud/reference/auth/activate-service-account) command. Any person who gains access to the key material will then have full access to all resources to which the service account has access. Such private key material should be treated with the highest concern, and should be considered less secure the longer the material exists. Therefore, rotating private key material is critical to maintaining strong security.\n## Best practices for granting roles on service accounts\nIn scenarios where a service account has been granted permissions to perform highly-privileged operations, be cautious when granting the Service Account User role to a user on that service account.\nService accounts represent your service-level security. The security of the service is determined by the people who have IAM roles to manage and use the service accounts, and people who hold [service account keys](/iam/docs/service-account-creds#user-managed-keys) for those service accounts. Best practices to ensure security include the following:\n- Use the IAM API to audit the service accounts, the keys, and the allow policies on those service accounts.\n- If your service accounts don't need service account keys, disable or delete them.\n- If users don't need permission to manage or use service accounts, then remove them from the applicable allow policy.\n- Make sure that service accounts have the fewest permissions possible. Use [default service accounts](/iam/docs/service-account-types#default) with caution, because they are automatically granted the Editor (`roles/editor`) role on the project.\nTo learn more about best practices, see [Best practices for working with service accounts](/iam/docs/best-practices-service-accounts) .", "guide": "IAM"}