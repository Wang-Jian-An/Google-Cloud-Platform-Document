{"title": "IAM - Service account impersonation", "url": "https://cloud.google.com/iam/docs/service-account-impersonation", "abstract": "# IAM - Service account impersonation\nWhen an authenticated principal, such as a user or another service account, authenticates as a service account to gain the service account's permissions, it's called the service account. Impersonating a service account lets an authenticated principal access whatever the service account can access. Only authenticated principals with the appropriate permissions can impersonate service accounts.\nImpersonation is useful when you want to change a user's permissions without changing your Identity and Access Management (IAM) policies. For example, you can use impersonation to temporarily grant a user elevated access, or to test whether a specific set of permissions is sufficient for a task. You can also use impersonation to locally develop applications that can only run as a service account, or to authenticate applications that run outside of Google Cloud.\nGoogle Cloud service account impersonation is similar to Amazon Web Services (AWS) Security Token Service API methods like [AssumeRole](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html) .\n", "content": "## How service account impersonation works\nService account impersonation always involves two identities: an authenticated principal, and the service account that the principal impersonates. To impersonate the service account, the authenticated principal gets a token for the service account, then uses that token to authenticate as the service account.\nThere are multiple ways to impersonate a service account:\n- Set the [--impersonate-service-account flag](/docs/authentication/use-service-account-impersonation#gcloud) or the [impersonate-service-account property](/sdk/gcloud/reference/topic/configurations#impersonate_service_account) when running a Google Cloud CLI command. When you run a gcloud CLI command with this setting, gcloud CLI creates short-lived credentials for the service account, then runs the command with those credentials.You can also use the `--impersonate-service-account` flag when setting up your [Application Default Credentials file](/docs/authentication/provide-credentials-adc#sa-impersonation) . This setup enables client libraries that support impersonation to automatically impersonate the service account.\n- [Create short-lived credentials](/iam/docs/create-short-lived-credentials-direct) using the Service Account Credentials API, then use those credentials to authenticate an API request.Short-lived credentials have a limited lifetime, with durations of just a few hours or shorter, and are not automatically refreshed. They create less risk than long-lived credentials, such as service account keys.\n- Use a [credential configuration file](https://google.aip.dev/auth/4117) to configure an external application to impersonate a service account. This option is only available for applications that use [workload identityfederation](/iam/docs/workload-identity-federation) .When an application uses a credential configuration file to access Google Cloud, it first uses its environment-specific credentials to get a short-lived credential for a designated service account. Then, it uses that short-lived credential to authenticate to Google Cloud.\nIf a principal accesses resources while impersonating a service account, most audit logs include both their identity and the identity of the service account they're impersonating. For more information, see [Interpreting auditlogs](/iam/docs/service-account-creds#audit-logs) .\nWhen you use the Google Cloud console, you always authenticate with your user credentials; you can't impersonate a service account to access resources in the Google Cloud console.\n### Authentication without impersonation\nThere are several ways for a workload or user to authenticate as a service account impersonating the service account:\n- A workload uses an [attached service account](/iam/docs/workload-identities#attached-service-accounts) to authenticate to Google APIs. In this case, the attached service account acts as the workload's identity, and is the only authenticated identity involved in the request.To learn about how workloads authenticate to Google Cloud, see [Identitiesfor workloads](/iam/docs/workload-identities) .\n- A principal uses a service account key to authenticate as a service account. Using a service account key to authenticate as a service account only involves one authenticated identity: the service account's. Because there is only one identity involved, using a key isn't service account impersonation. **Note:** Service account keys are a security risk if not managed correctly. You should [ choose a more secure alternative to service account keys](/docs/authentication#auth-decision-tree) whenever possible. If you must authenticate with a service account key, you are responsible for the security of the private key and for other management operations such as [key rotation](/iam/docs/key-rotation) . For more information, see [best practices for managingservice account keys](/iam/docs/best-practices-for-managing-service-account-keys) .\nIn these cases, the audit logs record only the identity of the service account. They don't record any other identities\u2014for example, the identities of the users who executed code on the workload, or the identities of the people who used the service account key to authenticate. As a result, using service account keys or giving developers permission to execute code on privileged resources\u2014for example, an SSH session to a VM instance\u2014can create privilege-escalation and non-repudiation risks.\n### Required permissions\nTo impersonate a service account, you need the `iam.serviceAccounts.getAccessToken` permission. This permission is in roles like the [Service Account Token Creator role](/iam/docs/understanding-roles#iam.serviceAccountTokenCreator) ( `roles/iam.serviceAccountTokenCreator` ).\nFor more information about roles required for impersonation, see [Roles for service account authentication](/iam/docs/service-account-permissions) .\n## Use cases for service account impersonation\nService account impersonation is useful when you need to do tasks like the following:\n- Grant a user temporary elevated access\n- Test whether a specific set of permissions is sufficient for a task\n- Locally develop applications that can only run as a service account\n- Authenticate external applications\n### Grant temporary elevated access\nIn some cases, you might want to let a user access specific resources temporarily. For example, you might want to give someone additional access so that they can resolve an incident, or let someone access sensitive data for a limited time after they've logged a justification.\nService account impersonation is one of the ways that you can give users this temporary elevated access. To use a service account for temporary elevated access, you first grant it the IAM roles that you want to temporarily give to users. Then, you let users impersonate the service account, either by giving them permission to impersonate the service account or by using a token broker to issue a short-lived credential for the service account.\nTo learn more about methods for giving users temporary elevated access, see [Temporary elevated access overview](/iam/docs/temporary-elevated-access) .\n### Test permissions\nIn some cases, you might want to check whether a specific set of permissions is sufficient for a task. For example, you might want to confirm that a service account can still run an application if you remove certain excess permissions. Or, you might be helping a user to troubleshoot a task and want to verify that they can run a certain command with their current IAM roles.\nYou can use service account impersonation to test a specific set of permissions. First, create a service account and grant it one or more IAM roles with the permissions that you want to test. Then, impersonate the service account and attempt the task. This method lets you test permissions without needing to create test user accounts or modify your own IAM permissions.\nTo learn how to impersonate service accounts, see [Use service accountimpersonation](/docs/authentication/use-service-account-impersonation) .\n### Develop applications locally\nWhen developing applications locally, you can typically authenticate using your [user credentials](/docs/authentication/application-default-credentials#personal) . However, in some situations, that might not be possible\u2014for example, if you want to authenticate to a service that requires a token with a custom audience, which users typically can't configure. In these cases, you need to authenticate as a service account instead of authenticating with your user credentials.\nFor these situations, we recommend using service account impersonation. Using service account impersonation lets you avoid using [service accountkeys](/iam/docs/service-account-creds#key-types) , which create additional security risk.\nTo learn how to impersonate service accounts to develop applications, see [Service account impersonation](/docs/authentication/provide-credentials-adc#sa-impersonation) .\n### Authenticate external applications\nTo access Google Cloud resources, applications running outside of Google Cloud need to authenticate to Google Cloud. One way to authenticate these applications is to use service account impersonation.\nTo let your application impersonate a service account, you first need to set up [workload identity federation](/iam/docs/workload-identity-federation) , which provides an authenticated identity for your application. Then, you can use a [credentialconfiguration file](https://google.aip.dev/auth/4117) to configure your application to impersonate a service account.\nAlthough it's possible to use service account keys to authenticate external applications, we strongly recommend against it. Service account keys create additional security risk, and should be avoided when possible.\n## What's next\n- Find out how to [use service account impersonation](/docs/authentication/use-service-account-impersonation) .\n- Learn more about [temporary elevated access](/iam/docs/temporary-elevated-access) .\n- [Create short-lived credentials](/iam/docs/create-short-lived-credentials-direct) to impersonate a service account.", "guide": "IAM"}