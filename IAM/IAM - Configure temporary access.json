{"title": "IAM - Configure temporary access", "url": "https://cloud.google.com/iam/docs/configuring-temporary-access", "abstract": "# IAM - Configure temporary access\nThis topic describes how to set temporary (expiring) access to Google Cloud resources using conditional role bindings in your allow policies. By using the [date/time attributes](/iam/docs/conditions-attribute-reference#date-time) , you can enforce time-based controls when accessing a given resource. For example, you can grant temporary access to a project that starts and stops at a specified time or on a scheduled and recurring basis.\n**Note:** The examples on this page show how to modify access to a [project](/resource-manager/docs/cloud-platform-resource-hierarchy#projects) . However, you can adapt these steps to modify access to any Google Cloud resource that accepts IAM allow policies. For a list of these resource types, see [Resource types that accept allow policies](/iam/docs/resource-types-with-policies) .\n", "content": "## Before you begin\n- Read [Conditions Overview](/iam/docs/conditions-overview) to understand the basics of Identity and Access Management (IAM) conditional role bindings.\n- Review the [date/time attributes](/iam/docs/conditions-attribute-reference#date-time) that can be used in a condition expression. Date/time attributes are recognized by all Google Cloud services.\n### Required roles\nTo get the permissions that you need to manage conditional role bindings,   ask your administrator to grant you the  following IAM roles:\n- To manage access to projects: [Project IAM Admin ](https://cloud.google.com/iam/docs/understanding-roles#resourcemanager.projectIamAdmin) (`roles/resourcemanager.projectIamAdmin`)    on the project\n- To manage access to folders: [Folder Admin ](https://cloud.google.com/iam/docs/understanding-roles#resourcemanager.folderAdmin) (`roles/resourcemanager.folderAdmin`)    on the folder\n- To manage access to projects, folders, and organizations: [Organization Admin ](https://cloud.google.com/iam/docs/understanding-roles#resourcemanager.organizationAdmin) (`roles/resourcemanager.organizationAdmin`)    on the organization\n- To manage access to almost all Google Cloud resources: [Security Admin ](https://cloud.google.com/iam/docs/understanding-roles#iam.securityAdmin) (`roles/iam.securityAdmin`)    on the project, folder, or organization whose resources you want to manage access to\nFor more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nThese predefined roles contain     the permissions required to manage conditional role bindings. To see the exact permissions that are   required, expand the **Required permissions** section:\nYou might also be able to get   these permissions  with [custom roles](/iam/docs/creating-custom-roles) or  other [predefined roles](/iam/docs/understanding-roles) .\n## Grant temporary access\nA conditional role binding can be used to grant time-bounded access to a resource, ensuring that a user can no longer access the resource after the specified expiry date and time.\n**Note:** Conditional role bindings do not override role bindings with no conditions. If a principal is bound to a role, and the role binding does not have a condition, then the principal always has that role. Adding the principal to a conditional binding for the same role has no effect.\nConsider the following scenario: the company ExampleCo's information security rules emphasize that no employee should have indefinite access to resources in production projects. Previously, the admins have been manually setting and deleting IAM role bindings to meet the engineers' emergency needs. To reduce administrative overhead, ExampleCo can instead configure a conditional role binding with a date/time condition to set an end date for the binding.\n**Note:** You cannot use conditions when you grant [basic roles](/iam/docs/understanding-roles#basic) , including Owner (`roles/owner`), Editor (`roles/editor`), and Viewer (`roles/viewer`). Also, you cannot use conditions when you grant roles to all users ( [allUsers](/iam/docs/overview#allusers) ) or all authenticated users ( [allAuthenticatedUsers](/iam/docs/overview#allauthenticatedusers) ).\nTo grant expirable access to a project resource:\n- In the Google Cloud console, go to the **IAM** page. [Go to the IAM page](https://console.cloud.google.com/iam-admin/iam) \n- From the list of principals, locate the desired principal and click the button.\n- From the **Edit permissions** panel, locate the desired role to configure a condition for. Then under **IAM condition (optional)** , click **Add IAM condition** .\n- In the **Edit condition** panel, enter a title and optional description for the condition.\n- You can add a condition expression using either the **ConditionBuilder** or the **Condition Editor** . The condition builder provides an interactive interface to select your desired condition type, operator, and other applicable details about the expression. The condition editor provides a text-based interface to manually enter an expression using [CEL syntax](/iam/docs/conditions-overview#cel) . **Condition Builder** :- From the **Condition type** drop-down, select **Expiring\nAccess** .\n- From the **Operator** drop-down, select **by** .\n- From the **Time** drop-down, click thebutton to select from a date and time range.\n- Click **Save** to apply the condition.\n- After the **Edit condition** panel is closed, click **Save** again from the **Edit permissions** panel to update your allow policy.\n **Condition Editor** :- Click the **Condition Editor** tab and enter the following expression (replacing the timestamp with your own):```\nrequest.time < timestamp(\"2020-07-01T00:00:00.000Z\")\n```\n- After entering your expression, you can optionally choose to validate the CEL syntax by clicking **Run Linter** above the text box on the top-right.\n- Click **Save** to apply the condition.\n- After the **Edit condition** panel is closed, click **Save** again from the **Edit permissions** panel to update your allow policy.Allow policies are set using the [read-modify-write](/iam/docs/granting-changing-revoking-access#policy-overview) pattern.\nExecute the [gcloud projects get-iam-policy](/sdk/gcloud/reference/projects/get-iam-policy) command to get the current allow policy for the project. In the following example, the JSON version of the allow policy is downloaded to a path on disk.\nCommand:\n```\ngcloud projects get-iam-policy project-id --format=json > filepath\n```\nThe JSON format of the allow policy is downloaded:\n```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:travis@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.securityReviewer\"\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 1}\n```\nTo configure the allow policy with expirable access, add the following highlighted condition expression (replacing the timestamp with your own). The gcloud CLI updates the version automatically:\n```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:travis@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.securityReviewer\",\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Expires_July_1_2020\",\u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"Expires on July 1, 2020\",\u00a0 \u00a0 \u00a0 \u00a0 \"expression\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"request.time < timestamp('2020-07-01T00:00:00.000Z')\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 3}\n```\nNext, set the new allow policy by executing the [gcloud projects set-iam-policy](/sdk/gcloud/reference/projects/set-iam-policy) command:\n```\ngcloud projects set-iam-policy project-id filepath\n```\nThe new allow policy is applied, and `travis@example.com` 's role grant will expire at the specified time.Use the [read-modify-write](/iam/docs/granting-changing-revoking-access#policy-overview) pattern to allow access until a specific time.\n **First, read the allow policy for the project:** \nThe Resource Manager API's ` [projects.getIamPolicy](/resource-manager/reference/rest/v1/projects/getIamPolicy) ` method gets a project's allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/PROJECT_ID:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/owner\",\n  \"members\": [  \"user:project-owner@example.com\"\n  ]\n },\n {\n  \"role\": \"roles/iam.securityReviewer\",\n  \"members\": [  \"user:travis@example.com\"\n  ]\n }\n ]\n}\n```\n **Next, modify the allow policy so that it allows access until a specifictime.** Make sure to change the `version` field to the value `3` :\n```\n{\u00a0 \"version\": 3,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.securityReviewer\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:travis@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Expires_July_1_2020\",\u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"Expires on July 1, 2020\",\u00a0 \u00a0 \u00a0 \u00a0 \"expression\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"request.time < timestamp('2020-07-01T00:00:00.000Z')\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ]}\n```\n **Finally, write the updated allow policy:** \nThe Resource Manager API's ` [projects.setIamPolicy](/resource-manager/reference/rest/v1/projects/setIamPolicy) ` method sets the allow policy in the request as the project's new allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/PROJECT_ID:setIamPolicy\n```\nRequest JSON body:\n```\n{\n \"policy\": {\n \"version\": 3,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [  {\n  \"role\": \"roles/owner\",\n  \"members\": [   \"user:project-owner@example.com\"\n  ]\n  },\n  {\n  \"role\": \"roles/iam.securityReviewer\",\n  \"members\": [   \"user:travis@example.com\"\n  ],\n  \"condition\": {\n   \"title\": \"Expires_July_1_2020\",\n   \"description\": \"Expires on July 1, 2020\",\n   \"expression\":\n   \"request.time < timestamp('2020-07-01T00:00:00.000Z')\"\n  }\n  }\n ]\n }\n}\n```\nTo send your request, expand one of these options:\nThe response contains the updated allow policy.\n **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\n## Manage access based on days/hours of the week\nA conditional role binding can be used to grant access to a resource only within certain days or hours of the week on a recurring basis.\nConsider the following scenario: the company ExampleCo has a quality assurance project. The entire QA team is required to have highly-privileged roles to complete their work. ExampleCo has to abide by labor laws in their location, which limit work hours to Monday through Friday from 9 AM to 5 PM. ExampleCo can use date/time conditions to ensure that their employees are only able to access Google Cloud during the work week and during scheduled work hours.\n**Note:** You cannot use conditions when you grant [basic roles](/iam/docs/understanding-roles#basic) , including Owner (`roles/owner`), Editor (`roles/editor`), and Viewer (`roles/viewer`). Also, you cannot use conditions when you grant roles to all users ( [allUsers](/iam/docs/overview#allusers) ) or all authenticated users ( [allAuthenticatedUsers](/iam/docs/overview#allauthenticatedusers) ).\nTo grant access to a project resource for only certain days or hours of the week on a recurring basis:\n- In the Google Cloud console, go to the **IAM** page. [Go to the IAM page](https://console.cloud.google.com/iam-admin/iam) \n- From the list of principals, locate the desired principal and click the button.\n- From the **Edit permissions** panel, locate the desired role to configure a condition for. Then under **IAM condition (optional)** , click **Add IAM condition** .\n- In the **Edit condition** panel, enter a title and optional description for the condition.\n- You can add a condition expression using either the **ConditionBuilder** or the **Condition Editor** . The condition builder provides an interactive interface to select your desired condition type, operator, and other applicable details about the expression. The condition editor provides a text-based interface to manually enter an expression using [CEL syntax](/iam/docs/conditions-overview#cel) . **Condition Builder** :- Click **Add** .\n- From the **Condition type** drop-down, select **Time** **Schedule** **Day of Week** .\n- From the **Operator** drop-down, select **After or On** .\n- From the **Day of Week** drop-down, select **Monday** .\n- From the **Choose a time zone** drop-down, select your desired time zone from the list.\n- Ensure that the **And** operator is selected on the left, and then click **Add** again.\n- From the **Condition type** drop-down, select **Time** **Schedule** **Day of Week** .\n- From the **Operator** drop-down, select **Before or On** .\n- From the **Day of Week** drop-down, select **Friday** .\n- From the **Choose a time zone** drop-down, select your desired time zone from the list.\nAt this point, you've configured access only on Monday through Friday. Now, you will configure access from 9 AM (09:00) to 5 PM (17:00).- Ensure that the **And** operator is selected on the left, and then click **Add** again.\n- From the **Condition type** drop-down, select **Time**  **Schedule**  **Hour of Day** .- From the **Operator** drop-down, select **After or On** .\n- From the **Hour of Day** drop-down, select **9** (9 AM).\n- From the **Choose a time zone** drop-down, select your desired time zone from the list.\n- From the **Condition type** drop-down, select **Time** **Schedule** **Hour of Day** .\n- From the **Operator** drop-down, select **Before or On** . Note that for this selection, \"on\" will logically evaluate to all times between 17:00 (5 PM) and 17:59 (5:59 PM). To set access to expire at 4:59 PM, ensure the hour is set to 16 instead of 17.\n- From the **Hour of Day** drop-down, select **17** (5 PM).\n- From the **Choose a time zone** drop-down, select your desired time zone from the list.\n- Click **Save** to apply the condition.\n- Once the **Edit condition** panel is closed, click **Save** again from the **Edit permissions** panel to update your allow policy.\nYou've now configured access from Monday to Friday, 9 AM to 5 PM. **Condition Editor** :- Click the **Condition Editor** tab and enter the following expression (replacing the placeholder values with your own):```\nrequest.time.getHours(\"Europe/Berlin\") >= 9 &&\nrequest.time.getHours(\"Europe/Berlin\") <= 17 &&\nrequest.time.getDayOfWeek(\"Europe/Berlin\") >= 1 &&\nrequest.time.getDayOfWeek(\"Europe/Berlin\") <= 5\n```\n- After entering your expression, you can optionally choose to validate the CEL syntax by clicking **Run Linter** above the text box on the top-right.\n- Click **Save** to apply the condition.\n- Once the **Edit condition** panel is closed, click **Save** again from the **Edit permissions** panel to update your allow policy.\nAllow policies are set using the [read-modify-write](/iam/docs/granting-changing-revoking-access#policy-overview) pattern.\nExecute the [gcloud projects get-iam-policy](/sdk/gcloud/reference/projects/get-iam-policy) command to get the current allow policy for the project. In the following example, the JSON version of the allow policy is downloaded to a path on disk.\nCommand:\n```\ngcloud projects get-iam-policy project-id --format=json > filepath\n```\nThe JSON format of the allow policy is downloaded:\n```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:rita@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/bigquery.dataViewer\"\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 1}\n```\nTo configure the allow policy with scheduled access, add the following highlighted condition expression (replacing the timestamp with your own). The gcloud CLI updates the version automatically:\n```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:rita@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/bigquery.dataViewer\",\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Business_hours\",\u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"Business hours Monday-Friday\",\u00a0 \u00a0 \u00a0 \u00a0 \"expression\": \"request.time.getHours('Europe/Berlin') >= 9 && request.time.getHours('Europe/Berlin') <= 17 && request.time.getDayOfWeek('Europe/Berlin') >= 1 && request.time.getDayOfWeek('Europe/Berlin') <= 5\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 3}\n```\nNext, set the new allow policy by executing the [gcloud projects set-iam-policy](/sdk/gcloud/reference/projects/set-iam-policy) command:\n```\ngcloud projects set-iam-policy project-id filepath\n```\nThe new allow policy is applied, and `rita@example.com` 's role grant will allow access between the specified days and times.\nUse the\n [read-modify-write](/iam/docs/granting-changing-revoking-access#policy-overview) \npattern to allow scheduled access.\n **First, read the allow policy for the project:** \nThe Resource Manager API's ` [projects.getIamPolicy](/resource-manager/reference/rest/v1/projects/getIamPolicy) ` method gets a project's allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/PROJECT_ID:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/owner\",\n  \"members\": [  \"user:project-owner@example.com\"\n  ]\n },\n {\n  \"role\": \"roles/bigquery.dataViewer\",\n  \"members\": [  \"user:rita@example.com\"\n  ]\n }\n ]\n}\n```\n **Next, modify the allow policy to allow scheduled access.** \nAdd the following highlighted condition expression (replacing the timestamp with your own). Ensure that you've updated the `version` value to `3` :\n```\n{\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 3,\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/bigquery.dataViewer\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:rita@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Business_hours\",\u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"Business hours Monday-Friday\",\u00a0 \u00a0 \u00a0 \u00a0 \"expression\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"request.time.getHours('Europe/Berlin') >= 9 &&\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 request.time.getHours('Europe/Berlin') <= 17 &&\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 request.time.getDayOfWeek('Europe/Berlin') >= 1 &&\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 request.time.getDayOfWeek('Europe/Berlin') <= 5\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ]}\n```\nThe Resource Manager API's ` [projects.setIamPolicy](/resource-manager/reference/rest/v1/projects/setIamPolicy) ` method sets the allow policy in the request as the project's new allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/PROJECT_ID:setIamPolicy\n```\nRequest JSON body:\n```\n{\n \"policy\": {\n \"etag\": \"BwWKmjvelug=\",\n \"version\": 3,\n \"bindings\": [  {\n  \"role\": \"roles/owner\",\n  \"members\": [   \"user:project-owner@example.com\"\n  ]\n  },\n  {\n  \"role\": \"roles/bigquery.dataViewer\",\n  \"members\": [   \"user:rita@example.com\"\n  ],\n  \"condition\": {\n   \"title\": \"Business_hours\",\n   \"description\": \"Business hours Monday-Friday\",\n   \"expression\": \"request.time.getHours('Europe/Berlin') >= 9 && request.time.getHours('Europe/Berlin') <= 17 && request.time.getDayOfWeek('Europe/Berlin') >= 1 && request.time.getDayOfWeek('Europe/Berlin') <= 5\"\n  }\n  }\n ]\n }\n}\n```\nTo send your request, expand one of these options:\nThe response contains the updated allow policy.\n **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\n## What's next\n- Learn how to [manage conditional role bindings](/iam/docs/managing-conditional-role-bindings) .\n- Learn how to [lint allow policies](/iam/docs/linting-policies) .\n- Learn how to use conditional role bindings to [manage just-in-time privileged access to projects](/architecture/manage-just-in-time-privileged-access-to-project) .", "guide": "IAM"}