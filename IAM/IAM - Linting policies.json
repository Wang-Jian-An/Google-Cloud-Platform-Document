{"title": "IAM - Linting policies", "url": "https://cloud.google.com/iam/docs/linting-policies", "abstract": "# IAM - Linting policies\n**    Alpha     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nThis topic describes how to , or validate, your Identity and Access Management (IAM) allow policies.\n", "content": "## Before you begin\n- Enable the IAM API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com&redirect=https://console.cloud.google.com) \n- Read the [IAM Conditions overview](/iam/docs/conditions-overview) to understand the basics of IAM Conditions.\n**Note:** This alpha release of [lintPolicy](/iam/reference/rest/v1/iamPolicies/lintPolicy) only supports linting operations on the `google.iam.v1.Binding.condition` field.\n### Required roles\nTo lint a resource's allow policy, you need permissions to get the resource, and to get and set the allow policy for the resource. These permissions have the following form, where `` is the name of the service that owns the resource and `` is the name of the resource type that you want to manage access to:\n- `` `.` `` `.get`\n- `` `.` `` `.getIamPolicy`\n- `` `.` `` `.setIamPolicy`\nFor example, to lint a project's allow policy, you need the following permissions:\n- `resourcemanager.projects.get`\n- `resourcemanager.projects.getIamPolicy`\n- `resourcemanager.projects.setIamPolicy`\nTo gain the required permissions, ask your administrator to grant you a predefined or custom role that includes the permissions. For example, your administrator could grant you the Security Admin role ( `roles/iam.securityAdmin` ), which includes permissions to get almost all Google Cloud resources and manage their allow policies.\n## Understanding linting for allow policies\nIn the context of allow policies, linting is a method of examining a new or existing allow policy and checking it for specific issues. These issues include the following range of possibilities:\n- Suggestions\n- Warnings\n- Information that can help improve the intent of the allow policy, such as better syntax and semantics\n- Syntax or semantic errors that cause`setIamPolicy`operations to fail\nIf you try to update an allow policy, and you get an error, linting the allow policy can help you find the cause of the error. You can also use the linter to help ensure that a conditional role binding has the intended effect.\n## Linting a condition\nCondition expressions can be complex, especially in scenarios that require multiple clauses and logic operators to appropriately manage access. If a condition expression contains invalid logic, or if the syntax violates the restrictions of a condition expression, you cannot add the condition to an allow policy.\nAlso, even if a condition expression uses the correct syntax, it might contain semantic errors, which can prevent your allow policies and role bindings from working as expected. Common semantic errors include the following:\n- Use of unrecommended functions\n- Use of legacy resource types or legacy service names\n- Ineffective conditions, such as an inapplicable date or time range\nWhen you lint a condition, the linter inspects the condition expression and reports any syntax errors. It also reports possible semantic errors that could cause unexpected results.\nBefore attempting to set a new conditional role binding, you are encouraged to lint the expression first. This section shows you how to lint a condition expression using the Google Cloud console, Google Cloud CLI, or the REST API.\nTo lint a condition expression:\n- In the Google Cloud console, go to the **IAM** page. [Go to IAM](https://console.cloud.google.com/iam-admin/iam) \n- Click **Select a project** , choose a project, and click **Open** .\n- From the list of principals, locate the desired principal and click the edit **Edit** button.\n- From the **Edit permissions** panel, locate the desired role that you want to lint. Then under **IAM condition (optional)** , click the name of the condition.\n- In the **Condition Editor** , manually add or edit a condition expression.\n- To validate the CEL syntax, click **Run Linter** .If the syntax contains errors, an error **Error** icon appears next to the incorrect line. To see details about each error, hold the pointer over the icon.If the condition uses the correct syntax, but the linter finds a possible issue, a warning **Warning** icon appears next to the line with the issue. To see details about each warning, hold the pointer over the icon.\n- Make any necessary changes to the condition expression. After you click **RunLinter** , the linter runs automatically in the background while you edit the expression.You must correct all errors before you save the condition expression. We strongly encourage you to fix all warnings as well.\n- When there are no errors or warnings, click **Save** to apply the condition.\n- Once the **Edit condition** panel is closed, click **Save** again from the **Edit permissions** panel to update your allow policy.\nExecute the [gcloud alpha iam policies lint-condition](/sdk/gcloud/reference/alpha/iam/policies/lint-condition) command to lint a given condition expression. To execute this command, you can either create a text file that contains the condition, or specify flags for the condition's title, description, and expression.\nThe following example uses a text file that contains the following condition:\n`condition.json`\n```\n{\u00a0 \"title\": \"1_less_than_2\",\u00a0 \"description\": \"\",\u00a0 \"expression\": \"1 <\"}\n```\nRun command:\n```\ngcloud alpha iam policies lint-condition --condition-from-file=\"condition.json\"\n```\nThe output from the command contains the following:\n```\nlintResults:- debugMessage: |-\u00a0 \u00a0 ERROR: Parse expression:1:3: mismatched input '<EOF>' expecting {'[', '{', '(', '.', '-', '!', 'true', 'false', 'null', NUM_FLOAT, NUM_INT, NUM_UINT, STRING, BYTES, IDENTIFIER}\u00a0 \u00a0 \u00a0 | 1 >\u00a0 \u00a0 \u00a0 | ...^\u00a0 fieldName: condition.expression\u00a0 level: CONDITION\u00a0 locationOffset: 3\u00a0 severity: ERROR\u00a0 validationUnitName: LintValidationUnits/ConditionCompileCheck...\n```\nEach of the lint results contain a `debugMessage` that can be used to help locate the problem with the condition expression. If the condition failed to compile, you may see many different `validationUnitName` types with the following `debugMessage` text:\n```\nThe validation unit is skipped due to absence of a required object: CheckedExpr\n```\nMake changes so that the expression compiles, then lint the condition again.The ` [iamPolicies.lintPolicy](/iam/docs/reference/rest/v1/iamPolicies/lintPolicy) ` method lints, or validates, a condition expression in an allow policy.\nBefore using any of the request data, make the following replacements:- `` : An [Expr object](/iam/docs/reference/rest/v1/Expr) representing the  condition to lint. For example:```\n\"title\": \"1_less_than_2\",\"description\": \"\",\"expression\": \"1 <\"\n```To learn about the format of an `Expr` object, see the [Expr schema  reference](/iam/docs/reference/rest/v1/Expr#SCHEMA_REPRESENTATION) .\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/iamPolicies:lintPolicy\n```\nRequest JSON body:\n```\n{\n \"condition\": {\n condition\n }\n}\n```\nTo send your request, expand one of these options:\nThe response body contains one or more [LintResult](/iam/reference/rest/v1/iamPolicies/lintPolicy#LintResult) objects, such as the following:\n```\n{\n \"lint_results\": {\n \"level\": \"CONDITION\",\n \"validation_unit_name\": \"LintValidationUnits/ConditionCompileCheck\",\n \"severity\": \"ERROR\",\n \"field_name\": \"condition.expression\",\n \"location_offset\": \"2\",\n \"debug_message\": \"ERROR: Parse expression:1:2: mismatched input \\'<EOF>\\' expecting {\\'[\\', \\'{\\', \\'(\\', \\'.\\', \\'-\\', \\'!\\', \\'true\\', \\'false\\', \\'null\\', NUM_FLOAT, NUM_INT, NUM_UINT, STRING, BYTES, IDENTIFIER}\\n | 1<\\n | ..^\"\n },\n \"lint_results\": {\n \"level\": \"CONDITION\",\n \"validation_unit_name\": \"LintValidationUnits/ConditionComplexityCheck\",\n \"severity\": \"NOTICE\",\n \"field_name\": \"condition.expression\",\n \"debug_message\": \"The validation unit is skipped due to absence of a required object: CheckedExpr\"\n }\n}\n```\nEach of the lint results contain a `debug_message` that can be used to help locate the problem with the condition expression. If the condition failed to compile, you may see many different [validation_unit_name](#units) types with the following `debugMessage` text:\n```\nThe validation unit is skipped due to absence of a required object: CheckedExpr\n```\nMake changes so that the expression compiles, then lint the condition again.\n## Supported validation units\nAs described previously, a validation unit is an individual lint type that evaluates the expression for syntactic issues. The table below summarizes supported validation units, each with intended linting level, linting result severity, and a brief description.\n| Validation unit     | Lint level | Severity | Description                                                           |\n|:---------------------------------|:-------------|:-----------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ConditionCompileCheck   | CONDITION | ERROR  | The condition expression contains a compilation error as a result of invalid CEL syntax.                                       |\n| ConditionComplexityCheck   | CONDITION | ERROR  | The condition expression contains more than the maximum of 12 logic operators.                                          |\n| DateTimeCheck     | CONDITION | WARNING | The condition expression specifies a timestamp comparison that always evaluates to either true or false, due to one of these issues: A timestamp does not use the correct format for timestamps. A timestamp is in the past.      |\n| DateTimeRangeCheck    | CONDITION | WARNING | Value out of range for the intended advanced timestamp function and the comparison expression. See the valid values for advanced timestamp functions.                        |\n| DrgGetAttributeDefaultValueCheck | CONDITION | ERROR  | The condition expression calls api.getAttribute('iam.googleapis.com/modifiedGrantsByRole', V), where V is any value other than an empty list, []. For this API attribute, V must always be an empty list.          |\n| EffectiveTimeRangeCheck   | CONDITION | WARNING | In a more complex usage of timestamp functions and comparison, the expression results in an empty effective time range, and is therefore effectively false. Alternatively, the time range covers a full range, and is therefore effectively true. |\n| HasOnlyListConstCheck   | CONDITION | ERROR  | The condition expression calls hasOnly(List<T>), where the type T is not a constant type, such as a string or integer. The hasOnly() function accepts only a list of constants.                 |\n| HasOnlyListLengthCheck   | CONDITION | ERROR  | The condition expression calls hasOnly(List<T>), and List<T> contains more than the maximum of 10 elements.                                  |\n| ResourceServiceLiteralCheck  | CONDITION | WARNING | The specified resource.service value is not supported. The expression using such string literal for equality comparison is effectively false. Use a supported value.                    |\n| ResourceTypeLiteralCheck   | CONDITION | WARNING | The specified resource.type value is not supported. The expression using such string literal for equality comparison is effectively false. Use a supported value.                    |\n| RestrictedAttributesCheck  | CONDITION | WARNING | The expression uses an attribute that is restricted or not supported. Setting the condition expression might not succeed. See the list of attributes.                        |\n## Linting examples\nThis section shows examples of conditions that cause each validation unit to report issues. Each example demonstrates linting by using the Google Cloud CLI.\n### No validation issues\nExample condition:\n```\n{\u00a0 \"title\": \"1_less_than_2\",\u00a0 \"description\": \"\",\u00a0 \"expression\": \"1 < 2\"}\n```\nRun command:\n```\ngcloud alpha iam policies lint-condition --condition-from-file=\"condition.json\"\n```\nLint result:\n```\n{}\n```\n### ConditionCompileCheck\nExample condition:\n```\n{\u00a0 \"title\": \"Condition not compiling\",\u00a0 \"description\": \"\",\u00a0 \"expression\": \"true=false\"}\n```\nRun command:\n```\ngcloud alpha iam policies lint-condition --condition-from-file=\"condition.json\"\n```\nLint result:\n```\nlintResults:- debugMessage: |-\u00a0 \u00a0 ERROR: Parse expression:1:4: token recognition error at: '=f'\u00a0 \u00a0 \u00a0 | true=false\u00a0 \u00a0 \u00a0 | ....^\u00a0 fieldName: condition.expression\u00a0 level: CONDITION\u00a0 locationOffset: 4\u00a0 severity: ERROR\u00a0 validationUnitName: LintValidationUnits/ConditionCompileCheck\n```\n### ConditionComplexityCheck\nExample condition:\n```\n{\u00a0 \"title\": \"Condition not compiling\",\u00a0 \"description\": \"\",\u00a0 \"expression\":\u00a0 \u00a0 \"1<2 || 2<3 || 3<4 || 4<5 || 5<6 || 6<7 || 7<8 || 8<9 || 9<10 || 10<11 || 11<12 || 12<13 || 13<14 || 14<15\"}\n```\nRun command:\n```\ngcloud alpha iam policies lint-condition --condition-from-file=\"condition.json\"\n```\nLint result:\n```\nlintResults:- debugMessage: Logical operators count must not be more than 12\u00a0 fieldName: condition.expression\u00a0 level: CONDITION\u00a0 severity: ERROR\u00a0 validationUnitName: LintValidationUnits/ConditionComplexityCheck\n```\n### DateTimeCheck\nExample condition:\n```\n{\u00a0 \"title\": \"Condition not compiling\",\u00a0 \"description\": \"\",\u00a0 \"expression\": \"request.time < timestamp('2000-01-01T00:00:00Z')\"}\n```\nRun command:\n```\ngcloud alpha iam policies lint-condition --condition-from-file=\"condition.json\"\n```\nLint result:\n```\nlintResults:- debugMessage: Ineffective date time value 2000-01-01T00:00:00+00:00 parsed\u00a0 \u00a0 from \"2000-01-01T00:00:00Z\"; condition is effectively False. Time expired\u00a0 \u00a0 already.\u00a0 fieldName: condition.expression\u00a0 level: CONDITION\u00a0 locationOffset: 25\u00a0 severity: WARNING\u00a0 validationUnitName: LintValidationUnits/DateTimeCheck\n```\n### DateTimeRangeCheck\nExample condition:\n```\n{\u00a0 \"title\": \"Time function out of range\",\u00a0 \"description\": \"\",\u00a0 \"expression\": \"request.time.getMonth() > 13\"}\n```\nRun command:\n```\ngcloud alpha iam policies lint-condition --condition-from-file=\"condition.json\"\n```\nLint result:\n```\nlintResults:- debugMessage: The value being compared to the specified timestamp function\u00a0 \u00a0 (getMonth) must be in range [0, 11].\u00a0 fieldName: condition.expression\u00a0 level: CONDITION\u00a0 locationOffset: 26\u00a0 severity: WARNING\u00a0 validationUnitName: LintValidationUnits/DateTimeRangeCheck\n```\n### DrgGetAttributeDefaultValueCheck\nExample condition:\n```\n{\u00a0 \"title\": \"DRG condition takes non empty list as default value\",\u00a0 \"description\": \"\",\u00a0 \"expression\":\u00a0 \u00a0 \"api.getAttribute('iam.googleapis.com/modifiedGrantsByRole', ['roles/viewer']).hasOnly(['roles/editor'])\"}\n```\nRun command:\n```\ngcloud alpha iam policies lint-condition --condition-from-file=\"condition.json\"\n```\nLint result:\n```\nlintResults:- debugMessage: api.getAttribute call on\u00a0 \u00a0 'iam.googleapis.com/modifiedGrantsByRole' can only\u00a0 \u00a0 accept empty list ('[]') as default value.\u00a0 fieldName: condition.expression\u00a0 level: CONDITION\u00a0 locationOffset: 60\u00a0 severity: ERROR\u00a0 validationUnitName: LintValidationUnits/DrgGetAttributeDefaultValueCheck\n```\n### EffectiveTimeRangeCheck\nExample condition:\n```\n{\u00a0 \"title\": \"Empty time range\",\u00a0 \"description\": \"\",\u00a0 \"expression\": \"request.time.getMonth() > 5 && request.time.getMonth() < 4\"}\n```\nRun command:\n```\ngcloud alpha iam policies lint-condition --condition-from-file=\"condition.json\"\n```\nLint result:\n```\nlintResults:- debugMessage: The aggregate of time functions [getMonth] results in empty ranges.\u00a0 fieldName: condition.expression\u00a0 level: CONDITION\u00a0 severity: WARNING\u00a0 validationUnitName: LintValidationUnits/EffectiveTimeRangeCheck\n```\n### HasOnlyListConstCheck\nExample condition:\n```\n{\u00a0 \"title\": \"hasOnly contains more than constant value\",\u00a0 \"description\": \"\",\u00a0 \"expression\":\u00a0 \u00a0 \"api.getAttribute('somekey', []).hasOnly(['somevalue', resource.name])\"}\n```\nRun command:\n```\ngcloud alpha iam policies lint-condition --condition-from-file=\"condition.json\"\n```\nLint result:\n```\nlintResults:- debugMessage: hasOnly() expects an argument of type list containing only const\u00a0 \u00a0 \u00a0 values, but a non-const expression was found in the list.\u00a0 fieldName: condition.expression\u00a0 level: CONDITION\u00a0 locationOffset: 59\u00a0 severity: ERROR\u00a0 validationUnitName: LintValidationUnits/HasOnlyListConstCheck\n```\n### HasOnlyListLengthCheck\nExample condition:\n```\n{\u00a0 \"title\": \"hasOnly contains more than 10 elements\",\u00a0 \"description\": \"\",\u00a0 \"expression\":\u00a0 \u00a0 \"api.getAttribute('somekey', []).hasOnly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\"}\n```\nRun command:\n```\ngcloud alpha iam policies lint-condition --condition-from-file=\"condition.json\"\n```\nLint result:\n```\nlintResults:- debugMessage: The list argument to hasOnly() cannot have more than 10 elements\u00a0 fieldName: condition.expression\u00a0 level: CONDITION\u00a0 locationOffset: 39\u00a0 severity: ERROR\u00a0 validationUnitName: LintValidationUnits/HasOnlyListLengthCheck\n```\n### ResourceServiceLiteralCheck\nExample condition:\n```\n{\u00a0 \"title\": \"Condition with unsupported resource service string\",\u00a0 \"description\": \"\",\u00a0 \"expression\": \"resource.service == 'resourcemanager'\"}\n```\nRun command:\n```\ngcloud alpha iam policies lint-condition --condition-from-file=\"condition.json\"\n```\nLint result:\n```\nlintResults:- debugMessage: 'resource.service : resourcemanager is not supported. Using this\u00a0 \u00a0 value in condition may lead to unintended consequences. Check user guide at\u00a0 \u00a0 https://cloud.google.com/iam/docs/conditions-resource-attributes#resource_service_values\u00a0 \u00a0 for supported values for resource.service.'\u00a0 fieldName: condition.expression\u00a0 level: CONDITION\u00a0 locationOffset: 20\u00a0 severity: WARNING\u00a0 validationUnitName: LintValidationUnits/ResourceServiceLiteralCheck\n```\n### ResourceTypeLiteralCheck\nExample condition:\n```\n{\u00a0 \"title\": \"Condition with legacy resource type\",\u00a0 \"description\": \"\",\u00a0 \"expression\": \"resource.type == 'resourcemanager.projects'\"}\n```\nRun command:\n```\ngcloud alpha iam policies lint-condition --condition-from-file=\"condition.json\"\n```\nLint result:\n```\nlintResults:- debugMessage: 'resource.type : resourcemanager.projects is not supported.\u00a0 \u00a0 Using this value in condition may lead to unintended consequences. Check\u00a0 \u00a0 user guide at https://cloud.google.com/iam/docs/conditions-resource-attributes#resource_type_values\u00a0 \u00a0 for supported values for resource.type.'\u00a0 fieldName: condition.expression\u00a0 level: CONDITION\u00a0 locationOffset: 17\u00a0 severity: WARNING\u00a0 validationUnitName: LintValidationUnits/ResourceTypeLiteralCheck\n```\n### RestrictedAttributesCheck\nExample condition:\n```\n{\u00a0 \"title\": \"Condition with restricted attribute\",\u00a0 \"description\": \"\",\u00a0 \"expression\": \"'accessPolicies/123/accesslevels/TRUSTED' in request.auth.access_levels\"}\n```\nRun command:\n```\ngcloud alpha iam policies lint-condition --condition-from-file=\"condition.json\"\n```\nLint result:\n```\nlintResults:- debugMessage: Condition attribute `request.auth.access_levels` is restricted\u00a0 \u00a0 or unsupported. Please check https://cloud.google.com/iam/docs/conditions-overview\u00a0 \u00a0 for the full list of supported attributes\u00a0 fieldName: condition.expression\u00a0 level: CONDITION\u00a0 locationOffset: 57\u00a0 severity: WARNING\u00a0 validationUnitName: LintValidationUnits/RestrictedAttributesCheck\n```", "guide": "IAM"}