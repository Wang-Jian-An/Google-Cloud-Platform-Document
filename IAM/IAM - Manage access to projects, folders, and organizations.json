{"title": "IAM - Manage access to projects, folders, and organizations", "url": "https://cloud.google.com/iam/docs/granting-changing-revoking-access", "abstract": "# IAM - Manage access to projects, folders, and organizations\nThis page describes how to grant, change, and revoke access to projects, folders, and organizations. To learn how to manage access to other resources, see the following guides:\n- [Manage access to service accounts](/iam/docs/manage-access-service-accounts) \n- [Manage access to other resources](/iam/docs/manage-access-other-resources) \nIn Identity and Access Management (IAM), access is granted through , also known as IAM policies. An allow policy is attached to a Google Cloud resource. Each allow policy contains a collection of that associate one or more principals, such as users or service accounts, with an IAM role. These role bindings grant the specified roles to the principals, both on the resource that the allow policy is attached to and on all of that resource's [descendants](/resource-manager/docs/cloud-platform-resource-hierarchy) . For more information about allow policies, see [Understanding allow policies](/iam/docs/policies) .\n**Note:** If you're getting started with Google Cloud, you can grant the appropriate IAM roles to your organization administrator groups as part of the [Google Cloud setup process](/docs/enterprise/setup-checklist) .\nYou can manage access to projects, folders, and organizations with the Google Cloud console, the Google Cloud CLI, the REST API, or the [Resource Managerclient libraries](/resource-manager/docs/libraries) .\n**Note:** You can also use deny policies to prevent principals from using specific IAM permissions. For more information, see [Deny policies](/iam/docs/deny-overview) .\n", "content": "## Before you begin\n- Enable the Resource Manager API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=cloudresourcemanager.googleapis.com) \n- Set up authentication.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.You can use the gcloud CLI samples on this page from  either of the following development environments:- **Cloud Shell** : To use an online terminal with the   gcloud CLI already set up, activate Cloud Shell.At the bottom of this page, a Cloud Shell session starts    and displays a command-line prompt. It can take a few seconds for    the session to initialize.\n- **Local shell** : To use the gcloud CLI in a local   development environment, [install](/sdk/docs/install) and [initialize](/sdk/docs/initializing) the gcloud CLI.\nTo use the .NET samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Java samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Python samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```\n### Required roles\nWhen you create a project, folder, or organization, you are automatically granted a role that lets you manage access for that resource. For more information, see [Default policies](/iam/docs/policies#default) .\nIf you didn't create your project, folder, or organization, ensure that you have the roles that you need to manage access to that resource.\nTo get the permissions that you need to manage access to a project, folder, or organization,   ask your administrator to grant you the  following IAM roles on the resource that you want to manage access for (project, folder, or organization):\n- To manage access to a project: [Project IAM Admin ](https://cloud.google.com/iam/docs/understanding-roles#resourcemanager.projectIamAdmin) (`roles/resourcemanager.projectIamAdmin`)\n- To manage access to a folder: [Folder Admin ](https://cloud.google.com/iam/docs/understanding-roles#resourcemanager.folderAdmin) (`roles/resourcemanager.folderAdmin`)\n- To manage access to projects, folders, and organizations: [Organization Admin ](https://cloud.google.com/iam/docs/understanding-roles#resourcemanager.organizationAdmin) (`roles/resourcemanager.organizationAdmin`)\n- To manage access to almost all Google Cloud resources: [Security Admin ](https://cloud.google.com/iam/docs/understanding-roles#iam.securityAdmin) (`roles/iam.securityAdmin`)These predefined roles contain     the permissions required to manage access to a project, folder, or organization. To see the exact permissions that are   required, expand the **Required permissions** section:\nYou might also be able to get these permissions with [customroles](/iam/docs/creating-custom-roles) or other [predefined roles](/iam/docs/understanding-roles) .\n[](None)\n## View current access\nYou can view who has access to your project, folder, or organization using the Google Cloud console, the gcloud CLI, the REST API, or the Resource Manager client libraries.\n**Note:** The Google Cloud console shows access in a list form, rather than directly showing the resource's allow policy.- In the Google Cloud console, go to the **IAM** page. [Go to IAM](https://console.cloud.google.com/projectselector/iam-admin/iam?supportedpurview=project,folder,organizationId) \n- Select a project, folder, or organization.The Google Cloud console lists all the principals who have been granted roles on your project, folder, or organization. This list includes principals who have inherited roles on the resource from parent resources. For more information about policy inheritance, see [Policy inheritance andthe resource hierarchy](/iam/docs/policies#inheritance) .\n- Optional: To view role grants for [Google-managed service accounts](/iam/docs/service-account-types#google-managed) , select the **Include Google-provided role grants** checkbox.\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- To see who has access to your project, folder, or organization, get the allow  policy for the resource. To learn how to interpret allow policies, see [Understanding allow policies](/iam/docs/policies) . **Note:** A resource's allow policy does not show any roles gained through [policy inheritance](/iam/docs/policies#inheritance) . To view inherited roles, use the Google Cloud console, or follow the instructions on [Viewing effective IAM policies](/asset-inventory/docs/view-effective-iam-policies) .To get the allow policy for the resource, run the `get-iam-policy` command for  the resource:```\ngcloud RESOURCE_TYPE get-iam-policy RESOURCE_ID --format=FORMAT > PATH\n```Provide the following values:- `` : The type of the resource that you want to   view access to. Use one of these values: `projects` , `resource-manager folders` , or `organizations` .\n- `` : Your Google Cloud project, folder,   or organization ID. Project IDs are alphanumeric, like `my-project` . Folder and organization IDs are numeric, like `123456789012` .\n- `` : The desired format for the policy. Use `json` or `yaml` .\n- `` : The path to a new output file for the policy.\nFor example, the following command gets the policy for the project `my-project` and saves it to your home directory in JSON format:```\ngcloud projects get-iam-policy my-project --format=json > ~/policy.json\n```\nTo authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\nTo see who has access to your project, folder, or organization, get the allow policy for the resource. To learn how to interpret allow policies, see [Understanding allow policies](/iam/docs/policies) .\nThe following example shows how to get the allow policy for a project. To learn how to get the allow policy for a folder or organization, review the [Resource Manager client library documentation](/resource-manager/docs/libraries) for your programming language.\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/Access/GetPolicy.cs) \n```\nusing Google.Apis.Auth.OAuth2;using Google.Apis.CloudResourceManager.v1;using Google.Apis.CloudResourceManager.v1.Data;public partial class AccessManager{\u00a0 \u00a0 public static Policy GetPolicy(string projectId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 var credential = GoogleCredential.GetApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .CreateScoped(CloudResourceManagerService.Scope.CloudPlatform);\u00a0 \u00a0 \u00a0 \u00a0 var service = new CloudResourceManagerService(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new CloudResourceManagerService.Initializer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HttpClientInitializer = credential\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 var policy = service.Projects.GetIamPolicy(new GetIamPolicyRequest(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectId).Execute();\u00a0 \u00a0 \u00a0 \u00a0 return policy;\u00a0 \u00a0 }}\n```To authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\nTo see who has access to your project, folder, or organization, get the allow policy for the resource. To learn how to interpret allow policies, see [Understanding allow policies](/iam/docs/policies) .\nThe following example shows how to get the allow policy for a project. To learn how to get the allow policy for a folder or organization, review the [Resource Manager client library documentation](/resource-manager/docs/libraries) for your programming language.\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/GetPolicy.java) \n```\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;import com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;import com.google.api.services.cloudresourcemanager.v3.model.Policy;import com.google.api.services.iam.v1.IamScopes;import com.google.auth.http.HttpCredentialsAdapter;import com.google.auth.oauth2.GoogleCredentials;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.Collections;public class GetPolicy {\u00a0 // Gets a project's policy.\u00a0 public static Policy getPolicy(String projectId) {\u00a0 \u00a0 // projectId = \"my-project-id\"\u00a0 \u00a0 Policy policy = null;\u00a0 \u00a0 CloudResourceManager service = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 service = createCloudResourceManagerService();\u00a0 \u00a0 } catch (IOException | GeneralSecurityException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to initialize service: \\n\" + e.toString());\u00a0 \u00a0 \u00a0 return policy;\u00a0 \u00a0 }\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 GetIamPolicyRequest request = new GetIamPolicyRequest();\u00a0 \u00a0 \u00a0 policy = service.projects().getIamPolicy(projectId, request).execute();\u00a0 \u00a0 \u00a0 System.out.println(\"Policy retrieved: \" + policy.toString());\u00a0 \u00a0 \u00a0 return policy;\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to get policy: \\n\" + e.toString());\u00a0 \u00a0 \u00a0 return policy;\u00a0 \u00a0 }\u00a0 }\u00a0 public static CloudResourceManager createCloudResourceManagerService()\u00a0 \u00a0 \u00a0 throws IOException, GeneralSecurityException {\u00a0 \u00a0 // Use the Application Default Credentials strategy for authentication. For more info, see:\u00a0 \u00a0 // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\u00a0 \u00a0 GoogleCredentials credential =\u00a0 \u00a0 \u00a0 \u00a0 GoogleCredentials.getApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\u00a0 \u00a0 CloudResourceManager service =\u00a0 \u00a0 \u00a0 \u00a0 new CloudResourceManager.Builder(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GoogleNetHttpTransport.newTrustedTransport(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GsonFactory.getDefaultInstance(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new HttpCredentialsAdapter(credential))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setApplicationName(\"service-accounts\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 return service;\u00a0 }}\n```To authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\nTo see who has access to your project, folder, or organization, get the allow policy for the resource. To learn how to interpret allow policies, see [Understanding allow policies](/iam/docs/policies) .\nThe following example shows how to get the allow policy for a project. To learn how to get the allow policy for a folder or organization, review the [Resource Manager client library documentation](/resource-manager/docs/libraries) for your programming language.\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/access.py) \n```\ndef get_policy(project_id: str, version: int = 1) -> dict:\u00a0 \u00a0 \"\"\"Gets IAM policy for a project.\"\"\"\u00a0 \u00a0 credentials = service_account.Credentials.from_service_account_file(\u00a0 \u00a0 \u00a0 \u00a0 filename=os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"],\u00a0 \u00a0 \u00a0 \u00a0 scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\u00a0 \u00a0 )\u00a0 \u00a0 service = googleapiclient.discovery.build(\u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager\", \"v1\", credentials=credentials\u00a0 \u00a0 )\u00a0 \u00a0 policy = (\u00a0 \u00a0 \u00a0 \u00a0 service.projects()\u00a0 \u00a0 \u00a0 \u00a0 .getIamPolicy(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resource=project_id,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 body={\"options\": {\"requestedPolicyVersion\": version}},\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 .execute()\u00a0 \u00a0 )\u00a0 \u00a0 print(policy)\u00a0 \u00a0 return policy\n```To see who has access to your project, folder, or organization, get the allow policy for the resource. To learn how to interpret allow policies, see [Understanding allow policies](/iam/docs/policies) .\n **Note:** A resource's allow policy does not show any roles gained through [policy inheritance](/iam/docs/policies#inheritance) . To view inherited roles, use the Google Cloud console, or follow the instructions on [Viewing effective IAM policies](/asset-inventory/docs/view-effective-iam-policies) .The Resource Manager API's ` [getIamPolicy](/resource-manager/reference/rest/v1/projects/getIamPolicy) ` method gets a project's, folder's, or organization's allow policy.\nBefore using any of the request data, make the following replacements:- ``: The API version to use. For projects and organizations, use`v1`. For folders, use`v2`.\n- ``: The resource type whose policy you want to manage. Use the value`projects`,`folders`, or`organizations`.\n- ``: Your Google Cloud project, organization, or folder ID. Project IDs are alphanumeric strings, like`my-project`. Folder and organization IDs are numeric, like`123456789012`.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/API_VERSION/RESOURCE_TYPE/RESOURCE_ID:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:\nThe response contains the resource's allow policy. For example:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/owner\",\n  \"members\": [  \"user:owner@example.com\"\n  ]\n }\n ]\n}\n```\n[](None)  [](None)  [](None)  [](None)  [](None)  [](None)  [](None)\n## Grant or revoke a single role\nYou can use the Google Cloud console and the gcloud CLI to quickly grant or revoke a single role for a single principal, without editing the resource's allow policy directly. Common types of principals include Google accounts, service accounts, Google groups, and domains. For a list of all principal types, see [Concepts related to identity](/iam/docs/overview#concepts_related_identity) .\n**Note:** In general, policy changes take effect within 2 minutes. However, in some cases, it can take 7 minutes or more for changes to propagate across the system.\nIf you need help identifying the most appropriate predefined role, see [Choose predefined roles](/iam/docs/choose-predefined-roles) .\n[](None)  [](None)  [](None)\n### Grant a single role\nTo grant a single role to a principal, do the following:\n- In the Google Cloud console, go to the **IAM** page. [Go to IAM](https://console.cloud.google.com/projectselector/iam-admin/iam?supportedpurview=project,folder,organizationId) \n- Select a project, folder, or organization.\n- Select a principal to grant a role to:- To grant a role to a principal who already has other roles on the resource, find a row containing the principal, click edit **Edit principal** in that row, and click add **Add another role** .To grant a role to a [Google-managed serviceaccount](/iam/docs/service-account-types#google-managed) , select the **Include Google-providedrole grants** checkbox to see its email address. **Note:** You cannot edit inherited roles when managing access to a resource. To edit inherited roles, go to the resource where the role was granted.\n- To grant a role to a principal who doesn't have any existing roles on the resource, click person_add **GrantAccess** , then enter the principal's email address or other identifier.\n- Select a role to grant from the drop-down list. For best security practices, choose a role that includes only the permissions that your principal needs.\n- Optional: Add a [condition](/iam/docs/conditions-overview) to the role.\n- Click **Save** . The principal is granted the role on the resource.\nTo grant a role to a principal for more than one project, folder, or organization, do the following:- In the Google Cloud console, go to the **Manage resources** page. [Go toManage resources](https://console.cloud.google.com/cloud-resource-manager) \n- Select all the resources for which you want to grant permissions.\n- If the info panel is not visible, click **Show info panel** . Then, click **Permissions** .\n- Select a principal to grant a role to:- To grant a role to a principal who already has other roles, find a row containing the principal, click edit **Edit principal** in that row, and click add **Add another role** .\n- To grant a role to a principal who does not already have other roles, click person_add **Add principal** , then enter the principal's email address or other identifier.\n- Select a role to grant from the drop-down list.\n- Optional: Add a [condition](/iam/docs/conditions-overview) to the role.\n- Click **Save** . The principal is granted the selected role on each of the selected resources.\n **Note:** To grant the Owner role (`roles/owner`) on a project to a user outside of your organization, you must use the Google Cloud console, not the gcloud CLI. If your project is not part of an organization, you must use the Google Cloud console to grant the Owner role.- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- The ` [add-iam-policy-binding](/sdk/gcloud/reference/projects/add-iam-policy-binding) ` command lets you quickly grant a role to a principal.Before using any of the command data below, make the following replacements:- `` : The resource type that you want to  manage access to. Use `projects` , `resource-manager folders` , or `organizations` .\n- `` : Your Google Cloud project, folder,  or organization ID. Project IDs are alphanumeric, like `my-project` .  Folder and organization IDs are numeric, like `123456789012` .\n- `` : An identifier for the principal, or member,  which usually has the following form: `` `:` `` . For example, `user:my-user@example.com` . For a full list of the values that `` can have, see the [Policy Binding reference](/iam/docs/reference/rest/v1/Policy#Binding) .For the principal type `user` , the domain name in the identifier must be  a Google Workspace domain or a Cloud Identity domain. To learn how to set  up a Cloud Identity domain, see the [overview of Cloud Identity](/identity/docs/overview) .\n- `` : The name of the role that you want  to revoke. Use one of the following formats:- Predefined roles:`roles/` `` `.` ``\n- Project-level custom roles:`projects/` `` `/roles/` ``\n- Organization-level custom roles:`organizations/` `` `/roles/` ``\nFor a list of predefined roles, see [Understanding roles](/iam/docs/understanding-roles) .\n- `` : The condition to add to the role  binding. If you don't want to add a condition, use the value `None` . For  more information about conditions, see the [conditions overview](/iam/docs/conditions-overview) .\nExecute the  following  command:The response contains the updated IAM policy.\n[](None)  [](None)  [](None)\n### Revoke a single role\nTo revoke a single role from a principal, do the following:\n- In the Google Cloud console, go to the **IAM** page. [ Go to IAM](https://console.cloud.google.com/projectselector/iam-admin/iam?supportedpurview=project,folder,organizationId) \n- Select a project, folder, or organization.\n- Find the row containing the principal whose access you want to revoke. Then, click edit **Edit principal** in that row. **Note:** You cannot edit inherited roles when managing access to a resource. To edit inherited roles, go to the resource where the role was granted.\n- Click the **Delete** delete button for the role that you want to revoke, and then click **Save** .\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- To quickly revoke a role from a user, run the `remove-iam-policy-binding` command:```\ngcloud RESOURCE_TYPE remove-iam-policy-binding RESOURCE_ID \\\u00a0 \u00a0 --member=PRINCIPAL --role=ROLE_NAME\n```Provide the following values:- `` : The resource type that you want to   manage access to. Use `projects` , `resource-manager folders` , or `organizations` .\n- `` : Your Google Cloud project, folder,   or organization ID. Project IDs are alphanumeric, like `my-project` .   Folder and organization IDs are numeric, like `123456789012` .\n- `` : An identifier for the principal, or   member, which usually has the following form: `` `:` `` . For example, `user:my-user@example.com` . For a full list of the values that `` can have, see the [Policy Binding reference](/iam/docs/reference/rest/v1/Policy#Binding) .For the principal type `user` , the domain name in the identifier must be   a Google Workspace domain or a Cloud Identity domain. To learn how to set   up a Cloud Identity domain, see the [overview of Cloud Identity](/identity/docs/overview) .\n- `` : The name of the role that you want   to revoke. Use one of the following formats:- Predefined roles:`roles/` `` `.` ``\n- Project-level custom roles:`projects/` `` `/roles/` ``\n- Organization-level custom roles:`organizations/` `` `/roles/` ``\nFor a list of predefined roles, see [Understanding roles](/iam/docs/understanding-roles) .\nFor example, to revoke the Project Creator role from the user `my-user@example.com` for the project `my-project` :```\ngcloud projects remove-iam-policy-binding my-project \\\u00a0 \u00a0 --member=user:my-user@example.com --role=roles/resourcemanager.projectCreator\n```\nTo help ensure that you don't revoke any necessary roles, you can enable [changerisk recommendations](/recommender/docs/change-risk-recommendations) . Change risk recommendations generate warnings when you try to revoke project-level roles that Google Cloud has identified as important.\n## Grant or revoke multiple roles using the Google Cloud console\nYou can use the Google Cloud console to grant and revoke multiple roles for a single principal:\n- In the Google Cloud console, go to the **IAM** page. [ Go to IAM](https://console.cloud.google.com/projectselector/iam-admin/iam?supportedpurview=project,folder,organizationId) \n- Select a project, folder, or organization.\n- Select the principal whose roles you want to modify:- To modify roles for a principal who already has roles on the resource, find a row containing the principal, click edit **Edit principal** in that row, and click add **Add another role** .To modify roles for a [Google-managed serviceaccount](/iam/docs/service-account-types#google-managed) , select the **Include Google-providedrole grants** checkbox to see its email address. **Note:** You cannot edit inherited roles when managing access to a resource. To edit inherited roles, go to the resource where the role was granted.\n- To grant roles to a principal who doesn't have any roles on the resource, click person_add **Grant Access** , then enter the principal's email address or other identifier.\n- Modify the principal's roles:- To grant a role to a principal who doesn't have any existing roles on the resource, click **Select a role** , then select a role to grant from the drop-down list.\n- To grant an additional role to the principal, click **Add another role** , then select a role to grant from the drop-down list.\n- To replace one of the principal's roles with a different role, click the existing role, then choose a different role to grant from the drop-down list.\n- To revoke one of the principal's roles, click the **Delete** deletebutton for each role that you want to revoke.\nYou can also [add a condition](/iam/docs/managing-conditional-role-bindings#add) to a role, [modify a role'scondition](/iam/docs/managing-conditional-role-bindings#modify) , or [remove a role'scondition](/iam/docs/managing-conditional-role-bindings#removing) .\n- Click **Save** .\n[](None)  [](None)  [](None)  [](None)\n## Grant or revoke multiple roles programmatically\nTo make large-scale access changes that involve granting and revoking multiple roles for multiple principals, use the pattern to update the resource's allow policy:\n- Read the current allow policy by calling`getIamPolicy()`.\n- Edit the allow policy, either by using a text editor or programmatically, to add or remove any principals or role bindings.\n- Write the updated allow policy by calling`setIamPolicy()`.\nYou can use the gcloud CLI, the REST API, or the Resource Manager client libraries to update the allow policy.\n**Note:** In general, policy changes take effect within 2 minutes. However, in some cases, it can take 7 minutes or more for changes to propagate across the system.\n[](None)\n### Get the current allow policy\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- To get the allow policy for the resource, run the `get-iam-policy` command for  the resource:```\ngcloud RESOURCE_TYPE get-iam-policy RESOURCE_ID --format=FORMAT > PATH\n```Provide the following values:- `` : The type of the resource that you want   to get the allow policy for. Use one of the following values: `projects` , `resource-manager folders` , or `organizations` .\n- `` : Your Google Cloud project, folder,   or organization ID. Project IDs are alphanumeric, like `my-project` . Folder and organization IDs are numeric, like `123456789012` .\n- `` : The desired format for the allow policy. Use `json` or `yaml` .\n- `` : The path to a new output file for the allow   policy.\nFor example, the following command gets the allow policy for the project `my-project` and saves it to your home directory in JSON format:```\ngcloud projects get-iam-policy my-project --format json > ~/policy.json\n```\nTo authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\nThe following example shows how to get the allow policy for a project. To learn how to get the allow policy of a folder or organization, review the [Resource Managerclient library documentation](/resource-manager/docs/libraries) for your programming language.\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/Access/GetPolicy.cs) \n```\nusing Google.Apis.Auth.OAuth2;using Google.Apis.CloudResourceManager.v1;using Google.Apis.CloudResourceManager.v1.Data;public partial class AccessManager{\u00a0 \u00a0 public static Policy GetPolicy(string projectId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 var credential = GoogleCredential.GetApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .CreateScoped(CloudResourceManagerService.Scope.CloudPlatform);\u00a0 \u00a0 \u00a0 \u00a0 var service = new CloudResourceManagerService(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new CloudResourceManagerService.Initializer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HttpClientInitializer = credential\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 var policy = service.Projects.GetIamPolicy(new GetIamPolicyRequest(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectId).Execute();\u00a0 \u00a0 \u00a0 \u00a0 return policy;\u00a0 \u00a0 }}\n```To authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\nThe following example shows how to get the allow policy for a project. To learn how to get the allow policy of a folder or organization, review the [Resource Managerclient library documentation](/resource-manager/docs/libraries) for your programming language.\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/GetPolicy.java) \n```\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;import com.google.api.services.cloudresourcemanager.v3.model.GetIamPolicyRequest;import com.google.api.services.cloudresourcemanager.v3.model.Policy;import com.google.api.services.iam.v1.IamScopes;import com.google.auth.http.HttpCredentialsAdapter;import com.google.auth.oauth2.GoogleCredentials;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.Collections;public class GetPolicy {\u00a0 // Gets a project's policy.\u00a0 public static Policy getPolicy(String projectId) {\u00a0 \u00a0 // projectId = \"my-project-id\"\u00a0 \u00a0 Policy policy = null;\u00a0 \u00a0 CloudResourceManager service = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 service = createCloudResourceManagerService();\u00a0 \u00a0 } catch (IOException | GeneralSecurityException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to initialize service: \\n\" + e.toString());\u00a0 \u00a0 \u00a0 return policy;\u00a0 \u00a0 }\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 GetIamPolicyRequest request = new GetIamPolicyRequest();\u00a0 \u00a0 \u00a0 policy = service.projects().getIamPolicy(projectId, request).execute();\u00a0 \u00a0 \u00a0 System.out.println(\"Policy retrieved: \" + policy.toString());\u00a0 \u00a0 \u00a0 return policy;\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to get policy: \\n\" + e.toString());\u00a0 \u00a0 \u00a0 return policy;\u00a0 \u00a0 }\u00a0 }\u00a0 public static CloudResourceManager createCloudResourceManagerService()\u00a0 \u00a0 \u00a0 throws IOException, GeneralSecurityException {\u00a0 \u00a0 // Use the Application Default Credentials strategy for authentication. For more info, see:\u00a0 \u00a0 // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\u00a0 \u00a0 GoogleCredentials credential =\u00a0 \u00a0 \u00a0 \u00a0 GoogleCredentials.getApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\u00a0 \u00a0 CloudResourceManager service =\u00a0 \u00a0 \u00a0 \u00a0 new CloudResourceManager.Builder(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GoogleNetHttpTransport.newTrustedTransport(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GsonFactory.getDefaultInstance(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new HttpCredentialsAdapter(credential))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setApplicationName(\"service-accounts\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 return service;\u00a0 }}\n```To authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\nThe following example shows how to get the allow policy for a project. To learn how to get the allow policy of a folder or organization, review the [Resource Managerclient library documentation](/resource-manager/docs/libraries) for your programming language.\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/access.py) \n```\ndef get_policy(project_id: str, version: int = 1) -> dict:\u00a0 \u00a0 \"\"\"Gets IAM policy for a project.\"\"\"\u00a0 \u00a0 credentials = service_account.Credentials.from_service_account_file(\u00a0 \u00a0 \u00a0 \u00a0 filename=os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"],\u00a0 \u00a0 \u00a0 \u00a0 scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\u00a0 \u00a0 )\u00a0 \u00a0 service = googleapiclient.discovery.build(\u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager\", \"v1\", credentials=credentials\u00a0 \u00a0 )\u00a0 \u00a0 policy = (\u00a0 \u00a0 \u00a0 \u00a0 service.projects()\u00a0 \u00a0 \u00a0 \u00a0 .getIamPolicy(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resource=project_id,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 body={\"options\": {\"requestedPolicyVersion\": version}},\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 .execute()\u00a0 \u00a0 )\u00a0 \u00a0 print(policy)\u00a0 \u00a0 return policy\n```The Resource Manager API's ` [getIamPolicy](/resource-manager/reference/rest/v1/projects/getIamPolicy) ` method gets a project's, folder's, or organization's allow policy.\nBefore using any of the request data, make the following replacements:- ``: The API version to use. For projects and organizations, use`v1`. For folders, use`v2`.\n- ``: The resource type whose policy you want to manage. Use the value`projects`,`folders`, or`organizations`.\n- ``: Your Google Cloud project, organization, or folder ID. Project IDs are alphanumeric strings, like`my-project`. Folder and organization IDs are numeric, like`123456789012`.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/API_VERSION/RESOURCE_TYPE/RESOURCE_ID:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:\nThe response contains the resource's allow policy. For example:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/owner\",\n  \"members\": [  \"user:owner@example.com\"\n  ]\n }\n ]\n}\n```\nSave the response in a file of the appropriate type ( `json` or `yaml` ).\n[](None)\n### Modify the allow policy\nProgrammatically or using a text editor, modify the local copy of your resource's allow policy to reflect the roles that you want to grant or revoke.\nTo ensure that you do not overwrite other changes, do not edit or remove the allow policy's `etag` field. The `etag` field identifies the current state of the allow policy. When you [set the updated allow policy](#setting-policy) , IAM compares the `etag` value in the request with the existing `etag` , and only writes the allow policy if the values match.\n**Important:** None of your changes will take effect until you [set the updated allow policy](#setting-policy) .\nTo edit the roles that an allow policy grants, you need to edit the role bindings in the allow policy. Role bindings have the following format:\n```\n{\u00a0 \"role\": \"ROLE_NAME\",\u00a0 \"members\": [\u00a0 \u00a0 \"PRINCIPAL_1\",\u00a0 \u00a0 \"PRINCIPAL_2\",\u00a0 \u00a0 ...\u00a0 \u00a0 \"PRINCIPAL_N\"\u00a0 ],\u00a0 \"conditions:\" {\u00a0 \u00a0 CONDITIONS\u00a0 }}\n```\nThe placeholders have the following values:\n- `` : The name of the role that you want to grant. Use one of the following formats:- Predefined roles:`roles/` `` `.` ``\n- Project-level custom roles:`projects/` `` `/roles/` ``\n- Organization-level custom roles:`organizations/` `` `/roles/` ``\nFor a list of predefined roles, see [Understandingroles](/iam/docs/understanding-roles) .\n- `` , `` , `...` `` : Identifiers for the principals that you want to grant the role to.Principal identifiers usually have the following form: `` `:` `` . For example, `user:my-user@example.com` . For a full list of the values that `` can have, see the [Policy Binding reference](/iam/docs/reference/rest/v1/Policy#Binding) .For the principal type `user` , the domain name in the identifier must be a Google Workspace domain or a Cloud Identity domain. To learn how to set up a Cloud Identity domain, see the [overview of Cloud Identity](/identity/docs/overview) .\n- `` : Optional. Any [conditions](/iam/docs/conditions-overview) that specify when access will be granted.To grant roles to your principals, modify the role bindings in the allow policy. To learn what roles you can grant, see [Understanding roles](/iam/docs/understanding-roles) , or [view grantable roles](/iam/docs/viewing-grantable-roles) for the resource. If you need help to identify the most appropriate predefined roles, see [Choose predefined roles](/iam/docs/choose-predefined-roles) .\nOptionally, you can use [conditions](/iam/docs/conditions-overview) to grant roles only when certain requirements are met.\nTo grant a role that is already included in the allow policy, add the principal to an existing role binding:\nEdit the returned allow policy by adding the principal to an existing role binding. Note that this change will not take effect until you [set the updated allow policy](#setting-policy) .\nFor example, imagine the allow policy contains the following role binding, which grants the Security Reviewer role ( `roles/iam.securityReviewer` ) to `kai@example.com` :\n```\n{\u00a0 \"role\": \"roles/iam.securityReviewer\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:kai@example.com\"\u00a0 ]}\n```\nTo grant that same role to `raha@example.com` , add `raha@example.com` to the existing role binding:\n```\n{\u00a0 \"role\": \"roles/iam.securityReviewer\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:kai@example.com\",\u00a0 \u00a0 \"user:raha@example.com\"\u00a0 ]}\n```To authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/Access/AddMember.cs) \n```\nusing System.Linq;using Google.Apis.CloudResourceManager.v1.Data;public partial class AccessManager{\u00a0 \u00a0 public static Policy AddMember(Policy policy, string role, string member)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 var binding = policy.Bindings.First(x => x.Role == role);\u00a0 \u00a0 \u00a0 \u00a0 binding.Members.Add(member);\u00a0 \u00a0 \u00a0 \u00a0 return policy;\u00a0 \u00a0 }}\n```To authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/snippets/member_add.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/api/iam/v1\")// addMember adds a member to a role binding.func addMember(w io.Writer, policy *iam.Policy, role, member string) {\u00a0 \u00a0 \u00a0 \u00a0 for _, binding := range policy.Bindings {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if binding.Role != role {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 continue\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for _, m := range binding.Members {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if m != member {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 continue\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Role %q found. Member already exists.\\n\", role)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 binding.Members = append(binding.Members, member)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Role %q found. Member added.\\n\", role)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Role %q not found. Member not added.\\n\", role)}\n```To authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/AddMember.java) \n```\nimport com.google.api.services.cloudresourcemanager.v3.model.Binding;import com.google.api.services.cloudresourcemanager.v3.model.Policy;import java.util.List;public class AddMember {\u00a0 // Adds a member to a preexisting role.\u00a0 public static void addMember(Policy policy) {\u00a0 \u00a0 // policy = service.Projects.GetIAmPolicy(new GetIamPolicyRequest(), your-project-id).Execute();\u00a0 \u00a0 String role = \"roles/existing-role\";\u00a0 \u00a0 String member = \"user:member-to-add@example.com\";\u00a0 \u00a0 List<Binding> bindings = policy.getBindings();\u00a0 \u00a0 for (Binding b : bindings) {\u00a0 \u00a0 \u00a0 if (b.getRole().equals(role)) {\u00a0 \u00a0 \u00a0 \u00a0 b.getMembers().add(member);\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Member \" + member + \" added to role \" + role);\u00a0 \u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 System.out.println(\"Role not found in policy; member not added\");\u00a0 }}\n```To authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/access.py) \n```\ndef modify_policy_add_member(policy: dict, role: str, member: str) -> dict:\u00a0 \u00a0 \"\"\"Adds a new member to a role binding.\"\"\"\u00a0 \u00a0 binding = next(b for b in policy[\"bindings\"] if b[\"role\"] == role)\u00a0 \u00a0 binding[\"members\"].append(member)\u00a0 \u00a0 print(binding)\u00a0 \u00a0 return policy\n```Edit the returned allow policy by adding the principal to an existing role binding. Note that this change will not take effect until you [set the updated allow policy](#setting-policy) .\nFor example, imagine the allow policy contains the following role binding, which grants the Security Reviewer role ( `roles/iam.securityReviewer` ) to `kai@example.com` :\n```\n{\u00a0 \"role\": \"roles/iam.securityReviewer\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:kai@example.com\"\u00a0 ]}\n```\nTo grant that same role to `raha@example.com` , add `raha@example.com` to the existing role binding:\n```\n{\u00a0 \"role\": \"roles/iam.securityReviewer\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:kai@example.com\",\u00a0 \u00a0 \"user:raha@example.com\"\u00a0 ]}\n```\nTo grant a role that is not yet included in the allow policy, add a new role binding:\nEdit the allow policy by adding a new role binding that grants the role to the principal. This change will not take effect until you [set the updated allow policy](#setting-policy) .\nFor example, to grant the Compute Storage Admin role ( `roles/compute.storageAdmin` ) to `raha@example.com` , add the following role binding to the `bindings` array for the allow policy:\n```\n{\u00a0 \"role\": \"roles/compute.storageAdmin\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:raha@example.com\"\u00a0 ]}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C# API reference documentation](https://developers.google.com/api-client-library/dotnet/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\nTo authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/Access/AddBinding.cs) \n```\nusing System.Collections.Generic;using Google.Apis.CloudResourceManager.v1.Data;public partial class AccessManager{\u00a0 \u00a0 public static Policy AddBinding(Policy policy, string role, string member)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 var binding = new Binding\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Role = role,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Members = new List<string> { member }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 policy.Bindings.Add(binding);\u00a0 \u00a0 \u00a0 \u00a0 return policy;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](https://developers.google.com/api-client-library/java/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\nTo authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/AddBinding.java) \n```\nimport com.google.api.services.cloudresourcemanager.v3.model.Binding;import com.google.api.services.cloudresourcemanager.v3.model.Policy;import java.util.ArrayList;import java.util.List;public class AddBinding {\u00a0 // Adds a member to a role with no previous members.\u00a0 public static void addBinding(Policy policy) {\u00a0 \u00a0 // policy = service.Projects.GetIAmPolicy(new GetIamPolicyRequest(), your-project-id).Execute();\u00a0 \u00a0 String role = \"roles/role-to-add\";\u00a0 \u00a0 List<String> members = new ArrayList<>();\u00a0 \u00a0 members.add(\"user:member-to-add@example.com\");\u00a0 \u00a0 Binding binding = new Binding();\u00a0 \u00a0 binding.setRole(role);\u00a0 \u00a0 binding.setMembers(members);\u00a0 \u00a0 policy.getBindings().add(binding);\u00a0 \u00a0 System.out.println(\"Added binding: \" + binding.toString());\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](https://developers.google.com/api-client-library/python/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\nTo authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/access.py) \n```\ndef modify_policy_add_role(policy: dict, role: str, member: str) -> dict:\u00a0 \u00a0 \"\"\"Adds a new role binding to a policy.\"\"\"\u00a0 \u00a0 binding = {\"role\": role, \"members\": [member]}\u00a0 \u00a0 policy[\"bindings\"].append(binding)\u00a0 \u00a0 print(policy)\u00a0 \u00a0 return policy\n```Edit the allow policy by adding a new role binding that grants the role to the principal. This change will not take effect until you [set the updated allow policy](#setting-policy) .\nFor example, to grant the Compute Storage Admin role ( `roles/compute.storageAdmin` ) to `raha@example.com` , add the following role binding to the `bindings` array for the allow policy:\n```\n{\u00a0 \"role\": \"roles/compute.storageAdmin\",\u00a0 \"members\": [\u00a0 \u00a0 \"user:raha@example.com\"\u00a0 ]}\n```\nYou can only grant roles related to activated API services. If a service, such as Compute Engine, is not active, you cannot grant roles exclusively related to Compute Engine. For more information, see [Enable and disable APIs](https://support.google.com/cloud/answer/6158841) .\nThere are some unique constraints when granting permissions on projects, especially when granting the Owner ( `roles/owner` ) role. See the [projects.setIamPolicy()reference documentation](/resource-manager/reference/rest/v1/projects/setIamPolicy) for more information.\nTo revoke a role, remove the principal from the role binding. If there are no other principals in the role binding, remove the entire role binding.\n**Note:** Role bindings with no principals are not allowed and will result in an error when setting the allow policy.\nRevoke a role by editing the JSON or YAML allow policy returned by the `get-iam-policy` command. This change will not take effect until you [set the updated allow policy](#setting-policy) .\nTo revoke a role from a principal, delete the desired principals or bindings from the `bindings` array for the allow policy.To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C# API reference documentation](https://developers.google.com/api-client-library/dotnet/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\nTo authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/Access/RemoveMember.cs) \n```\nusing System.Linq;using Google.Apis.CloudResourceManager.v1.Data;public partial class AccessManager{\u00a0 \u00a0 public static Policy RemoveMember(Policy policy, string role, string member)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 try\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var binding = policy.Bindings.First(x => x.Role == role);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (binding.Members.Count != 0 && binding.Members.Contains(member))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 binding.Members.Remove(member);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (binding.Members.Count == 0)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 policy.Bindings.Remove(binding);\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return policy;\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 catch (System.InvalidOperationException e)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.Diagnostics.Debug.WriteLine(\"Role does not exist in policy: \\n\" + e.ToString());\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return policy;\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](https://godoc.org/google.golang.org/genproto/googleapis/iam/admin/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\nTo authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/snippets/member_remove.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/api/iam/v1\")// removeMember removes a member from a role binding.func removeMember(w io.Writer, policy *iam.Policy, role, member string) {\u00a0 \u00a0 \u00a0 \u00a0 bindings := policy.Bindings\u00a0 \u00a0 \u00a0 \u00a0 bindingIndex, memberIndex := -1, -1\u00a0 \u00a0 \u00a0 \u00a0 for bIdx := range bindings {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if bindings[bIdx].Role != role {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 continue\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bindingIndex = bIdx\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for mIdx := range bindings[bindingIndex].Members {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if bindings[bindingIndex].Members[mIdx] != member {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 continue\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memberIndex = mIdx\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 if bindingIndex == -1 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Role %q not found. Member not removed.\\n\", role)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 if memberIndex == -1 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Role %q found. Member not found.\\n\", role)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 members := removeIdx(bindings[bindingIndex].Members, memberIndex)\u00a0 \u00a0 \u00a0 \u00a0 bindings[bindingIndex].Members = members\u00a0 \u00a0 \u00a0 \u00a0 if len(members) == 0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bindings = removeIdx(bindings, bindingIndex)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 policy.Bindings = bindings\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Role %q found. Member removed.\\n\", role)}// removeIdx removes arr[idx] from arr.func removeIdx[T any](arr []T, idx int) []T {\u00a0 \u00a0 \u00a0 \u00a0 return append(arr[:idx], arr[idx+1:]...)}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](https://developers.google.com/api-client-library/java/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\nTo authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/RemoveMember.java) \n```\nimport com.google.api.services.cloudresourcemanager.v3.model.Binding;import com.google.api.services.cloudresourcemanager.v3.model.Policy;import java.util.List;public class RemoveMember {\u00a0 // Removes member from a role; removes binding if binding contains 0 members.\u00a0 public static void removeMember(Policy policy) {\u00a0 \u00a0 // policy = service.Projects.GetIAmPolicy(new GetIamPolicyRequest(), your-project-id).Execute();\u00a0 \u00a0 String role = \"roles/existing-role\";\u00a0 \u00a0 String member = \"user:member-to-remove@example.com\";\u00a0 \u00a0 List<Binding> bindings = policy.getBindings();\u00a0 \u00a0 Binding binding = null;\u00a0 \u00a0 for (Binding b : bindings) {\u00a0 \u00a0 \u00a0 if (b.getRole().equals(role)) {\u00a0 \u00a0 \u00a0 \u00a0 binding = b;\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 \u00a0 if (binding != null && binding.getMembers().contains(member)) {\u00a0 \u00a0 \u00a0 binding.getMembers().remove(member);\u00a0 \u00a0 \u00a0 System.out.println(\"Member \" + member + \" removed from \" + role);\u00a0 \u00a0 \u00a0 if (binding.getMembers().isEmpty()) {\u00a0 \u00a0 \u00a0 \u00a0 policy.getBindings().remove(binding);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 }\u00a0 \u00a0 System.out.println(\"Role not found in policy; member not removed\");\u00a0 \u00a0 return;\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](https://developers.google.com/api-client-library/python/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\nTo authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/access.py) \n```\ndef modify_policy_remove_member(policy: dict, role: str, member: str) -> dict:\u00a0 \u00a0 \"\"\"Removes a \u00a0member from a role binding.\"\"\"\u00a0 \u00a0 binding = next(b for b in policy[\"bindings\"] if b[\"role\"] == role)\u00a0 \u00a0 if \"members\" in binding and member in binding[\"members\"]:\u00a0 \u00a0 \u00a0 \u00a0 binding[\"members\"].remove(member)\u00a0 \u00a0 print(binding)\u00a0 \u00a0 return policy\n```Revoke a role by editing the JSON or YAML allow policy returned by the `get-iam-policy` command. This change will not take effect until you [set the updated allow policy](#setting-policy) .\nTo revoke a role from a principal, delete the desired principals or bindings from the `bindings` array for the allow policy.\n[](None)\n### Set the allow policy\nAfter you modify the allow policy to grant and revoke the desired roles, call `setIamPolicy()` to make the updates.\n**Warning:** Setting a new allow policy permanently overwrites the existing allow policy on the resource. To avoid removing role bindings unintentionally, always follow the read-modify-write pattern when updating an allow policy: read the existing allow policy, modify it as needed, and then write the updated version of the allow policy.\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- To set the allow policy for the resource, run the `set-iam-policy` command for the resource:```\ngcloud RESOURCE_TYPE set-iam-policy RESOURCE_ID PATH\n```Provide the following values:- `` : The type of the resource that you want   to set the allow policy for. Use one of the following values: `projects` , `resource-manager folders` , or `organizations` .\n- `` : Your Google Cloud project, folder,   or organization ID. Project IDs are alphanumeric, like `my-project` . Folder and organization IDs are numeric, like `123456789012` .\n- `` : The path to a file that contains the new   allow policy.\nThe response contains the updated allow policy.For example, the following command sets the allow policy stored in `policy.json` as the allow policy for the project `my-project` :```\ngcloud projects set-iam-policy my-project ~/policy.json\n``` **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request. [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/Access/SetPolicy.cs) \n```\nusing Google.Apis.Auth.OAuth2;using Google.Apis.CloudResourceManager.v1;using Google.Apis.CloudResourceManager.v1.Data;public partial class AccessManager{\u00a0 \u00a0 public static Policy SetPolicy(string projectId, Policy policy)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 var credential = GoogleCredential.GetApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .CreateScoped(CloudResourceManagerService.Scope.CloudPlatform);\u00a0 \u00a0 \u00a0 \u00a0 var service = new CloudResourceManagerService(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new CloudResourceManagerService.Initializer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HttpClientInitializer = credential\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 return service.Projects.SetIamPolicy(new SetIamPolicyRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Policy = policy\u00a0 \u00a0 \u00a0 \u00a0 }, projectId).Execute();\u00a0 \u00a0 }}\n```To authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\nThe following example shows how to set the allow policy for a project. To learn how to set the allow policy of a folder or organization, review the [Resource Manager client library documentation](/resource-manager/docs/libraries) for your programming language.\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/SetPolicy.java) \n```\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.api.services.cloudresourcemanager.v3.CloudResourceManager;import com.google.api.services.cloudresourcemanager.v3.model.Policy;import com.google.api.services.cloudresourcemanager.v3.model.SetIamPolicyRequest;import com.google.api.services.iam.v1.IamScopes;import com.google.auth.http.HttpCredentialsAdapter;import com.google.auth.oauth2.GoogleCredentials;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.Collections;public class SetPolicy {\u00a0 // Sets a project's policy.\u00a0 public static void setPolicy(Policy policy, String projectId) {\u00a0 \u00a0 // policy = service.Projects.GetIAmPolicy(new GetIamPolicyRequest(), your-project-id).Execute();\u00a0 \u00a0 // projectId = \"my-project-id\"\u00a0 \u00a0 CloudResourceManager service = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 service = createCloudResourceManagerService();\u00a0 \u00a0 } catch (IOException | GeneralSecurityException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to initialize service: \\n\" + e.toString());\u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 }\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 SetIamPolicyRequest request = new SetIamPolicyRequest();\u00a0 \u00a0 \u00a0 request.setPolicy(policy);\u00a0 \u00a0 \u00a0 Policy response = service.projects().setIamPolicy(projectId, request).execute();\u00a0 \u00a0 \u00a0 System.out.println(\"Policy set: \" + response.toString());\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to set policy: \\n\" + e.toString());\u00a0 \u00a0 }\u00a0 }\u00a0 public static CloudResourceManager createCloudResourceManagerService()\u00a0 \u00a0 \u00a0 throws IOException, GeneralSecurityException {\u00a0 \u00a0 // Use the Application Default Credentials strategy for authentication. For more info, see:\u00a0 \u00a0 // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\u00a0 \u00a0 GoogleCredentials credential =\u00a0 \u00a0 \u00a0 \u00a0 GoogleCredentials.getApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\u00a0 \u00a0 CloudResourceManager service =\u00a0 \u00a0 \u00a0 \u00a0 new CloudResourceManager.Builder(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GoogleNetHttpTransport.newTrustedTransport(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GsonFactory.getDefaultInstance(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new HttpCredentialsAdapter(credential))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setApplicationName(\"service-accounts\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 return service;\u00a0 }}\n```To authenticate to Resource Manager, set up Application Default Credentials. For more information, see [Before you begin](#before-you-begin) .\nTo learn how to install and use the client library for Resource Manager, see [Resource Manager client libraries](/resource-manager/docs/libraries) .\nThe following example shows how to set the allow policy for a project. To learn how to set the allow policy of a folder or organization, review the [Resource Manager client library documentation](/resource-manager/docs/libraries) for your programming language.\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/access.py) \n```\ndef set_policy(project_id: str, policy: dict) -> dict:\u00a0 \u00a0 \"\"\"Sets IAM policy for a project.\"\"\"\u00a0 \u00a0 credentials = service_account.Credentials.from_service_account_file(\u00a0 \u00a0 \u00a0 \u00a0 filename=os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"],\u00a0 \u00a0 \u00a0 \u00a0 scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\u00a0 \u00a0 )\u00a0 \u00a0 service = googleapiclient.discovery.build(\u00a0 \u00a0 \u00a0 \u00a0 \"cloudresourcemanager\", \"v1\", credentials=credentials\u00a0 \u00a0 )\u00a0 \u00a0 policy = (\u00a0 \u00a0 \u00a0 \u00a0 service.projects()\u00a0 \u00a0 \u00a0 \u00a0 .setIamPolicy(resource=project_id, body={\"policy\": policy})\u00a0 \u00a0 \u00a0 \u00a0 .execute()\u00a0 \u00a0 )\u00a0 \u00a0 print(policy)\u00a0 \u00a0 return policy\n```The Resource Manager API's ` [setIamPolicy](/resource-manager/reference/rest/v1/projects/setIamPolicy) ` method sets the policy in the request as the new allow policy for the project, folder, or organization.\nBefore using any of the request data, make the following replacements:- ``: The API version to use. For projects and organizations, use`v1`. For folders, use`v2`.\n- ``: The resource type whose policy you want to manage. Use the value`projects`,`folders`, or`organizations`.\n- ``: Your Google Cloud project, organization, or folder ID. Project IDs are alphanumeric strings, like`my-project`. Folder and organization IDs are numeric, like`123456789012`.\n- `` : A JSON representation of the policy that you want to set. For more information about the format of a policy, see the [Policy reference](/iam/docs/reference/rest/v1/Policy) .\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/API_VERSION/RESOURCE_TYPE/RESOURCE_ID:setIamPolicy\n```\nRequest JSON body:\n```\n{\n \"policy\": POLICY\n}\n```\nTo send your request, expand one of these options:\nThe response contains the updated allow policy.\n **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\n## What's next\n- Learn how to [manage access to service accounts](/iam/docs/manage-access-service-accounts) .\n- Learn the general steps for [managing access to other resources](/iam/docs/manage-access-other-resources) .\n- Find out how to [choose the most appropriate predefined roles](/iam/docs/choose-predefined-roles) .\n- Use the [Policy Troubleshooter](/iam/docs/troubleshooting-access) to understand why a user does or doesn't have access to a resource or have permission to call an API.\n- Discover how to [view the roles that you can grant on a particular resource](/iam/docs/viewing-grantable-roles) .\n- Learn how to make a principal's access conditional with [conditional role bindings](/iam/docs/conditions-overview) .\n- Explore ways to secure your applications with [Identity-Aware Proxy](/iap/docs/concepts-overview) .", "guide": "IAM"}