{"title": "IAM - Integrate Cloud Run and workload identity federation", "url": "https://cloud.google.com/iam/docs/tutorial-cloud-run-workload-id-federation", "abstract": "# IAM - Integrate Cloud Run and workload identity federation\nThis tutorial describes how to use workload identity federation to authenticate workloads that run outside of Google Cloud so that they can access microservices hosted by Cloud Run. This tutorial is intended for administrators who want to integrate workload identity federation with their existing identity provider (IdP). [Workload identity federation](/iam/docs/workload-identity-federation) lets you connect external workloads to workloads that run in Google Cloud. [Cloud Run](/run) lets you run stateless containerized microservices.\nThis tutorial provides instructions on how to configure Jenkins as your external workload, Keycloak as your IdP, Cloud Run, and workload identity federation. When you complete this tutorial, you can see how workload identity federation lets you authenticate your Jenkins application with Google Cloud by using [OpenID Connect](https://openid.net/connect/) authentication.\n **Note:** This tutorial is intended to demonstrate a concept. Some steps in this tutorial aren't recommended for a production environment. These steps are noted, with recommendations.", "content": "## External workload authentication using service account keysIf you have a workload that runs outside of Google Cloud, then you must securely authenticate that workload so that it can interact with your microservice that is hosted by Cloud Run. Traditionally, you could use a tool like [Cloud Client Libraries](/apis/docs/cloud-client-libraries) to authenticate and pass a service account key to perform authentication with an outside workload. Cloud Client Libraries use a library that is called to automatically find your service account credentials. This library sets an environment variable that is called . ADC uses the service account key or configuration file that the variable points to in order to automatically authenticate your account.\nHowever, this approach has the following security risks:- By default, a service account key doesn't include an expiration date. If your code is leaked, you expose every permission attached to that key.\n- Because service account keys are static, you must build a strategy to manage and rotate these keys.\nEven though [creating a service account key](/iam/docs/creating-managing-service-account-keys) is a fairly straightforward process, you could sacrifice security for simplicity.## External workload authentication using workload identity federationWorkload identity federation addresses the security risks that result from creating and downloading static service account keys. Workload identity federation lets you authenticate workloads outside of Google Cloud without using a static service account key. Any external workload that needs to consume services in Google Cloud can benefit from this feature.\nWorkload identity federation lets you use your IdP to authenticate directly with Google Cloud. To authenticate, you use [OpenID Connect](https://en.wikipedia.org/wiki/OpenID#OpenID_Connect_(OIDC)) . Cloud Run accepts OpenID Connect tokens from your IdP for authentication.\nThe authentication process when using workload identity federation is the following:- Your authentication (AUTHN) library sends a JSON web token (JWT) request to the IdP.\n- Your IdP signs the JSON web tokens (JWT). The AUTHN library reads this data from a variable.\n- The library sends a POST command to the [Security Token Service](/iam/docs/reference/sts/rest) that includes the signed token.\n- The Security Token Service looks at the workload identify pool provider that you configured to build trust and verifies the identity on the credential.\n- The Security Token Service sends back a federated token.\n- The library sends the token to IAM.\n- IAM exchanges the token for an OpenID Connect token of a service account. For more information, see [Generating OpenID Connect ID tokens](/iam/docs/create-short-lived-credentials-direct#sa-credentials-oidc) .\n- The library provides the OpenID Connect token to Jenkins.\n- Jenkins uses this token to authenticate with Cloud Run.\nThe following diagram demonstrates the authentication flow:## Objectives\n- Configure Jenkins as the external workload.\n- Configure [Keycloak](https://www.keycloak.org/) as the IdP that is compatible with OpenID Connect.\n- Connect Jenkins with Keycloak.\n- Install Cloud Client Libraries to get the JWT token from Keycloak to Google Cloud.\n- Connect Google Cloud to Keycloak and Jenkins.\n- Get the JWT for the authenticated user from Keycloak.\nAlthough this tutorial uses Keycloak, you can use any identity provider that supports OpenID Connect, such as GitLab, Okta, or OneLogin.## CostsIn this document, you use the following billable components of Google Cloud:- [Cloud Run](/run/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- In the Google Cloud console, go to the project selector page. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- Select or create a Google Cloud project. **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project.\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Set up a microservice on Cloud Run. For more  information, see [ Quickstart: Deploy a container to Cloud Run](/run/docs/quickstarts/deploy-container) .\n## Configure JenkinsComplete these tasks in a non-Google Cloud environment, such as your on-premises environment or on another cloud.\nIf you already have an identity provider that supports OpenID Connect and an external workload, you can skip this step and go to [Installing Cloud Client Libraries.](#client_lib) \nTo simulate an outside workload, you can use a VM with [Jenkins installed](https://www.jenkins.io/doc/book/installing/linux/#debianubuntu) on it. You can run Jenkins as a Docker image or you can install it directly to your server. The following steps demonstrate how to install it directly on the server.- On a VM of your choice, open a command line.\n- Install Java:```\n$ sudo apt update$ sudo apt install openjdk-11-jre$ java -version\n```\n- Install Jenkins:```\ncurl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \\/usr/share/keyrings/jenkins-keyring.asc > /dev/nullecho deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \\https://pkg.jenkins.io/debian-stable binary/ | sudo tee \\/etc/apt/sources.list.d/jenkins.list > /dev/nullsudo apt-get updatesudo apt-get install jenkins\n```\n- Verify that you can access your Jenkins server on port 8080. If you are using a VM that sits behind a firewall, make sure that the appropriate ports are open.\n- Get your administrator password and set up Jenkins. For instructions, see [Post-installation setup wizard](https://www.jenkins.io/doc/book/installing/linux/#setup-wizard) .\n- Complete the following actions to set up SSL:- If you have a domain provider, you can use their certificate authority (CA) to request a signed certificate. Alternatively, you can get a free signed certificate that lasts 90 days from [zerossl.com](http://www.zerossl.com) .\n- Download your certificate zip file and transfer it to your server that is running Jenkins:```\nscp -i CERTFILE.pem -r CERTFILE.zip VM_FQDN:/home/USERNAME\n```Replace the following:- ``with the name of the certificate file that includes your public key.\n- ``with the FQDN of your server outside of Google Cloud.\n- ``with your username.\n- Rename the files and generate a .pkcs12 file that Jenkins can use:`openssl rsa -in` `` `.com.key -out` `` `.com.key`Replace `` with the name of the certificate file.\n- Update the `/etc/sysconfig/jenkins` file:- Open the file in a text editor:```\nvi /etc/sysconfig/jenkins\n```\n- Set `JENKINS_PORT` to `-1` .\n- Set `JENKINS_HTTPS_PORT` to `8443` .\n- At the bottom of the file, add the following arguments:`JENKINS_ARGS=\"--httpsCertificate=/var/lib/jenkins/.ssl/` `` `.crt --httpsPrivateKeys=/var/lib/jenkins/.ssl/` `` `.pkcs1.key\"`Replace the following:- ``with the filename of the certificate file using .crt format.\n- ``with the filename of the PKCS key.\n- Restart your Jenkins server.\n- Verify that you have port 8443 open on your firewall and access Jenkins on port 8443.\n- Install a Jenkins plugin that you require to integrate Keycloak with Jenkins. You can choose one of the following:- [OpenId Connect Authentication](https://plugins.jenkins.io/oic-auth/) \n- [Keycloak Authentication](https://plugins.jenkins.io/keycloak/) \nTo install the plugin, do the following:- In the Jenkins dashboard, go to **Manage Jenkins > Manage Plugins** .\n- Select **Available** and search for the plugin of your choice. The following screenshot shows the Plugin Manager with the **Available** tab selected.\n- Install the plugin.## Configure KeycloakIn this tutorial, Keycloak manages the users, groups, and roles. Keycloak uses [realms](https://www.keycloak.org/docs/latest/server_admin/) to manage users.\n **Note:** This tutorial uses the default realm, named , that is automatically created when you install the Keycloak server. The default realm can access all the other realms on your system. In a production environment, we recommend that you create a separate realm if you want to deploy Keycloak.- On the VM that is running outside Google Cloud, install the Keycloak server. For this tutorial, we recommend [installing Keycloak](https://www.keycloak.org/guides#getting-started) from a Docker container.\n- Open the Keycloak Admin Console.\n- Go to **Realm settings** .\n- In the **General** tab, verify that the fields are set as follows:- **Enabled** : **ON** \n- **User-Managed Access** : **OFF** \n- **Endpoints** : **OpenID Endpoint Configuration** and **SAML 2.0 Identity\nProvider Metadata** \nThe following screenshot shows the fields that you must configure.\n- Create a client so that you have an entity that can request Keycloak to authenticate a user. Often, clients are applications and services that use Keycloak to provide a single sign-on (SSO) solution.- In the Keycloak Admin console, click **Clients > Create.** \n- Enter the following:- **Client ID** : **jenkins** \n- **Client Protocol** : **openid-connect** \n- **Root URL** : **http://JENKINS_IP_ADDRESS:8080** , whereis the IP address of your Jenkins server.\nThe following screenshot shows the fields that you must configure.\n- Click **Save** .\n- On the **Installation** tab, verify that the token format is . Make a copy of this token as you will need it to complete your Jenkins setup.\n- To create a test group, do the following:- In the Keycloak Admin Console, click **Groups > New** .\n- Enter a name for your group and click **Save** .\n- Create one more test group. You can assign roles to your groups, but this tutorial does not require them.\n- To create a test user to add to the group, do the following:- In the Keycloak Admin Console, click **Manage user > Add users.** \n- Fill in the user information and click **Save** .The following screenshot shows example information for a user account.\n- Click the **Credentials** tab and verify that **Temporary** is set to **Off** .\n- Reset the password.You will use this account later in the JWT for authentication.The following screenshot shows the **Credentials** tab with the fields that you must configure.\n- Click the **Groups** tab and select one of the groups that you created previously.\n- Click **Join** .\n- Repeat this step to create more test users.## Configure Jenkins for OpenID Connect configurationThis section describes how to configure the OpenID Connect plugin for Jenkins.- On your Jenkins server, go to **Manage Jenkins > Configure Global\nSecurity** .\n- Under Security Realm, select **Keycloak Authentication Plugin** . Click **Save** .\n- Click **Configure system** .\n- Under **Global Keycloak** settings, copy your Keycloak installation JSON that you created in [Configure Keycloak](#configure-keycloak) . If you need to get the JSON data again, complete the following:- In the Keycloak Admin Console, go to **Clients** .\n- Click the name of your client.\n- In the **Installation** tab, click **Format Option** and select **Keycloak OIDC JSON** .\nThe following is an example of Keycloak JSON:```\n{\u00a0 \u00a0 \"realm\":\"master\"\u00a0 \u00a0 \"auth-server-url\":\"AUTHSERVERURL\"\u00a0 \u00a0 \"ssl-required\":\"none\"\u00a0 \u00a0 \"resource\":\"jenkins\"\u00a0 \u00a0 \"public-client\":true\u00a0 \u00a0 \"confidential-port\":0}\n```The is the URL for your authentication server.\n- To save the OIDC configuration, click **Save.** \nJenkins can now redirect to Keycloak to get user information.## Install Cloud Client LibrariesTo send a JWT from Keycloak to Google Cloud, you must install the Cloud Client Libraries on the Jenkins server. This tutorial uses Python to interact with Google Cloud using the SDK.- On the Jenkins server, install Python. The following steps show how to install python3:```\nsudo apt updatesudo apt install software-properties-commonsudo add-apt-repository ppa:deadsnakes/ppasudo apt updatesudo apt install python3.8\n```\n- Install pip3 so that you can download and import [Cloud Client Libraries](/apis/docs/cloud-client-libraries) :```\npip3 \u2013versionsudo apt updatesudo apt install python3-pippip3 \u2013version\n```\n- Install the [Cloud Client Libraries for Python](https://developers.google.com/docs/api/how-tos/libraries#python) using pip3:```\npip3 install \u2013upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib\n```For example:```\npip3 install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlibCollecting google-api-python-client\u00a0 \u00a0 Downloading google_api_python_client-2.42.0-py2.py3-none-any.whl (8.3 MB)\u00a0 \u00a0 \u00a0 \u00a0 USERNAME | 8.3 MB 19.9 MB/sCollecting google-auth-httplib2\u00a0 \u00a0 Downloading google_auth_httplib2-0.1.0-py2.py3-none-any.whl (9.3 MB)Collecting google-auth-oauthlibDownloading google_auth_oauthlib-0.5.1-py2.py3-non-any.whl (19 KB)\n```Replace with your username.\n- Install the Google Cloud CLI on your Jenkins server. For instructions, see [Quickstart: Install the gcloud CLI](/sdk/docs/install-sdk#deb) .\n## Configure your Google Cloud environmentThis section describes the steps that you must complete to ensure that your Google Cloud environment that hosts your serverless container can connect with Jenkins and Keycloak.- In Google Cloud, create a [service account](/iam/docs/service-accounts) so that the microservice on Cloud Run can access the permissions that are attached to it. For example, to create a service account using [gcloud CLI](/sdk/docs/install-sdk#deb) , you do the following:```\ngcloud iam service-accounts create cloudrun-oidc \\\u00a0 \u2013-description=\"cloud run oidc sa\" \u00a0\\\u00a0 \u2013-display-name=\"cloudrun-oidc\"\n```By default, [Cloud Run creates a default service account for you](/run/docs/securing/service-identity#about_the_default_service_account) . However, using the default service account is not a security best practice because the account has a broad set of permissions. Therefore, we recommend creating a separate service account for your microservice. For instructions on creating a service account for Cloud Run, see [Creating and managing service accounts](/iam/docs/creating-managing-service-accounts) .\n- Create a [workload identity pool](/iam/docs/configuring-workload-identity-federation#create_the_workload_identity_pool_and_provider) . To create a pool using [gcloud CLI](/sdk/docs/install-sdk#deb) , run the following:```\ngcloud iam workload-identity-pools create cloudrun-oidc-pool \\\u00a0 --location=\"global\" \\\u00a0 \u2014-description=\"cloudrun-oidc\" \\\u00a0 \u2014-display-name=\"cloudrun-oidc\"\n```\n- Create a workload identity pool provider for OpenID Connect:```\ngcloud iam workload-identity-pools providers create-oidc cloud-run-provider \\\u00a0 --workload-identity-pool=\"cloudrun-oidc-pool\" \\\u00a0 --issuer-uri=\"VAR_LINK_TO_ENDPOINT\" \\\u00a0 --location=\"global\" \\\u00a0 --attribute-mapping =\"google.subject=assertion.sub,attribute.isadmin-assertion.isadmin,attribute.aud=assertion.aud\" \\\u00a0 --attribute-condition=\"attribute.isadmin=='true'\"\n```Replace `` with a variable that contains the link to the Keycloak OIDC endpoint. To find this link, in the KeyCloud Admin Console, in the **Realm** window, click the **General** tab. The endpoint must be HTTPS, which means that you must configure your Keycloak server with HTTPS.\n## Get the JWT for the authenticated user from Keycloak\n- On your VM that runs Keycloak, download the token to a text file. For example, on Linux, run the following:```\ncurl -L -X POST 'https://IP_FOR_KEYCLOAK:8080/auth/realms/master/protocol/openid-connect/token' -H 'Content-Type: application/x-www-form-urlencoded' \\\u00a0 --data-urlencode 'client_id=jenks' \\\u00a0 --data-urlencode 'grant_type=password' \\\u00a0 --data-urlencode 'client_secret=CLIENT_SECRET \\\u00a0 --data-urlencode 'scope=openid' \\\u00a0 --data-urlencode 'username=USERNAME' \\\u00a0 --data-urlencode 'password=PASSWORD' | grep access_token | cut -c18-1490 > token.txt\n```Replace the following:- ``with the Keycloak server IP address.\n- ``with the Keycloak client secret.\n- ``with a Keycloak user.\n- ``with the password for the Keycloak user.\nThis command includes the client ID, client secret, username, and password. As a security best practice, we recommend using environmental variables to mask these values instead of using the command line. The example command redirects the credentials to a file named `token.txt` .Optionally, to automate this step, you can create a bash script.\n- Validate your token at [jwt.io](https://jwt.io) .\n- On the VM, create your credentials file:```\ngcloud iam workload-identity-pools create-cred config \\projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/cloudrun-oidc-pool/providers/cloud-run/provider \\\u00a0 --output-file=sts-creds.json \\\u00a0 --credential-source-file=token.txt\n```For more information, see [gcloud iam workload-identity-pools create-cred-config](/sdk/gcloud/reference/iam/workload-identity-pools/create-cred-config#--credential-source-file) .Your output file should look like the following:```\n{\u00a0 \u00a0 \"type\": \"external_account\",\u00a0 \u00a0 \"audience\": \"//iam.google.apis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/cloudrun-oidc-pool/subject/USER_EMAIL\",\u00a0 \u00a0 \"subject_token_type\": \"urn:ietf:params:oauth:token-type:jwt\",\u00a0 \u00a0 \"token_url\": \"https://sts.googleapis.com/v1/token\",\u00a0 \u00a0 \"credential_source\": {\u00a0 \u00a0 \u00a0 \u00a0 \"file\" \"token.txt\" }}\n````` is your project number.\n- On the VM, set the `sts.creds.json` file as a variable for ADC:```\nexport GOOGLE_APPLICATION_CREDENTIALS=/Users/USERNAME/sts-creds.json\n```Replace with your UNIX username.Before workload identity federation was launched, this value was the service account key. With workload identity federation, this value is the newly created credentials file.\n- Create a role binding for the user to impersonate the service account:```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT \\\u00a0 \u00a0 --role roles/iam.workloadIdentityUser \\\u00a0 \u00a0 --member \"principal://iam.googleapis.com/projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/cloudrun-oidc-pool/subject/USER_EMAIL\n```Replace the following:- `` with the email address of the service account that you created in [Configure your Google Cloud environment](#configure-your-google-cloud-environment) . For more information, see [gcloud iam service-accounts add-iam-policy-binding](/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) .\n- `` with your email address.\n- Allow the service account to access the Cloud Run service:```\ngcloud run services add-iam-policy-binding SERVICE_NAME\u00a0 --member-\"serviceAccount:SERVICE_ACCOUNT\" \\\u00a0 --role=\"roles/run.invoker\"\n```Replace the following:- `` with the name of the microservice running on Cloud Run.\n- `` with the email address of the service account for Cloud Run.\nFor more information, see [gcloud run services add-iam-policy-binding](/sdk/gcloud/reference/run/services/add-iam-policy-binding) .\n- Generate an ID token:```\n#!/usr/bin/pythonfrom google.auth import credentialsfrom google.cloud import \u00a0iam_credentials_v1import google.authimport google.oauth2.credentialsfrom google.auth.transport.requests import AuthorizedSession, Requesturl = \"https://WORKLOAD_FQDN\"aud = \"https://WORKLOAD_FQDN\"service_account = 'SERVICE_ACCOUNT'name = \"projects/-/serviceAccounts/{}\".format(service_account)id_token = client.generate_id_token(name=name,audience=aud, include_email=True)print(id_token.token)creds = google.oauth2.credentials.Credentials(id_token.token)authed_session = AuthorizedSession(creds)r = authed_session.get(url)print(r.status_code)print(r.text)\n```Replace the following:- `` with the FQDN for your workload.\n- `` with the email address of the service account for Cloud Run.\nThe token that you use can call the Identity and Access Management API, which will give you the new JWT that you need to invoke your Cloud Run service.\nYou can use your token within a Jenkins pipeline to invoke the serverless container that you are running in Cloud Run. However, these steps are out of the scope of this tutorial.## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this tutorial, you can delete your project.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n## What's next\n- Read more about [workload identity federation](https://cloud.google.com/iam/docs/configuring-workload-identity-federation) .\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .", "guide": "IAM"}