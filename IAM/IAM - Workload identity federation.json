{"title": "IAM - Workload identity federation", "url": "https://cloud.google.com/iam/docs/workload-identity-federation", "abstract": "# IAM - Workload identity federation\nThis document provides an overview of identity federation for external workloads. Using identity federation, you can grant on-premises or multi-cloud workloads access to Google Cloud resources, without using a service account key.\nYou can use identity federation with Amazon Web Services (AWS), or with any identity provider (IdP) that supports OpenID Connect (OIDC), such as Microsoft Azure, or SAML 2.0.\n", "content": "## Why identity federation?\nTraditionally, applications running outside Google Cloud can use [service account keys](/iam/docs/service-account-creds#key-types) to access Google Cloud resources. However, service account keys are powerful credentials, and can present a security risk if they are not managed correctly.\nWith identity federation, you can use Identity and Access Management (IAM) to grant external identities [IAM roles](/iam/docs/overview#roles) , including the ability to impersonate service accounts. This approach eliminates the maintenance and security burden associated with service account keys.\n## Workload identity pools\nA is an entity that lets you manage external identities.\nIn general, we recommend creating a new pool for each non-Google Cloud environment that needs to access Google Cloud resources, such as development, staging, or production environments.\n## Workload identity pool providers\nA is an entity that describes a relationship between Google Cloud and your IdP, including the following:\n- AWS\n- Azure Active Directory\n- On-premises Active Directory Federation Services (AD FS)\n- Okta\n- Kubernetes clusters\nWorkload identity federation follows the [OAuth 2.0 token exchange](https://tools.ietf.org/html/rfc8693) specification. You provide a credential from your IdP to the [Security Token Service](/iam/docs/reference/sts/rest) , which verifies the identity on the credential, and then returns a federated token in exchange.\n### OIDC provider with local JWKs\nTo federate workloads that don't have a public OIDC endpoint, you can upload OIDC JSON Web Key Sets (JWKS) directly to the pool. This is common if you have Terraform or GitHub Enterprise hosted in your own environment or you have regulatory requirements not to expose public URLs. For more information, see [Manage OIDC JWKs (Optional)](/iam/docs/workload-identity-federation-with-other-providers#manage-oidc-keys)\n### Attribute mappings\nThe tokens issued by your external identity provider contain one or more attributes. Some identity providers refer to these attributes as .\nGoogle STS tokens also contain one or more attributes, as listed in the following table:\n| Attribute  | Description                                               |\n|:---------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| google.subject | Required. A unique identifier for the user. This attribute is used in IAM principal:// role bindings and appears in Cloud Logging logs. The value must be unique and can't exceed 127 characters. |\n| google.groups | Optional. A set of groups that the identity belongs to. This attribute is used in IAM principalSet:// role bindings to grant access to all members of a group.          |\n| attribute.NAME | Optional. You can define up to 50 custom attributes and use these attributes in IAM principalSet:// role bindings to grant access to all identities with a certain attribute.      |\nAn attribute mapping defines how to derive the value of the Google STS token attribute from an external token. For each Google STS token attribute, you can define an attribute mapping, formatted as follows:\n`` `=` ``\nReplace the following:\n- ``is an attribute of the Google STS token\n- ``is a [Common Expression Language (CEL)](https://github.com/google/cel-spec/blob/master/doc/intro.md#introduction) expression that transforms one or more attributes from the tokens issued by your external identity provider\nThe following list provides attribute mapping examples:\n- Assign the assertion attribute `sub` to `google.subject` :```\ngoogle.subject=assertion.sub\n```\n- Concatenate multiple assertion attributes:```\ngoogle.subject=\"myprovider::\" + assertion.aud + \"::\" + assertion.sub\n```\n- Map a GUID-valued assertion attribute `workload_id` to a name, and assign the result to a custom attribute named `attribute.my_display_name` :```\nattribute.my_display_name={\n \"8bb39bdb-1cc5-4447-b7db-a19e920eb111\": \"Workload1\",\n \"55d36609-9bcf-48e0-a366-a3cf19027d2a\": \"Workload2\"\n}[assertion.workload_id]\n```\n- Use CEL [logical operators and functions](https://github.com/google/cel-spec/blob/master/doc/langdef.md#list-of-standard-definitions) to set a custom attribute named `attribute.environment` to either `prod` or `test` , depending on the identity's Amazon Resource Name (ARN):```\nattribute.environment=assertion.arn.contains(\":instance-profile/Production\") ? \"prod\" : \"test\"\n```\n- Use the [extract function](/iam/docs/conditions-attribute-reference#extract) to populate a custom attribute `aws_role` with the name of the assumed role or, if no role has been assumed, with the identity's ARN.```\nattribute.aws_role=assertion.arn.contains('assumed-role') ? assertion.arn.extract('{account_arn}assumed-role/') + 'assumed-role/' + assertion.arn.extract('assumed-role/{role_name}/') : assertion.arn\n```\n- [split function](https://pkg.go.dev/github.com/google/cel-go/ext#readme-split) splits a string on the provided separator value. For example, to extract the attribute `username` from an email address attribute by splitting its value at the `@` and using the first string, use the following attribute mapping:```\nattribute.username=assertion.email.split(\"@\")[0]\n```\n- [join function](https://pkg.go.dev/github.com/google/cel-go/ext#readme-join) joins a list of strings on the provided separator value. For example, to populates the custom attribute `department` by concatenating a list of strings with `.` as a separator, use the following attribute mapping:```\nattribute.department=assertion.department.join(\".\")\n```\nFor AWS, Google provides default mappings, which cover most common scenarios. You can also supply custom mappings.\nFor OIDC providers, you supply the mappings. To construct the mapping, consult the provider's documentation for a list of attributes on their credentials.\nFor more details, see the API documentation for the [attributeMapping field](/iam/docs/reference/rest/v1/projects.locations.workloadIdentityPools.providers#WorkloadIdentityPoolProvider.FIELDS.attribute_mapping) .\n### Attribute conditions\nAn is a CEL expression that can check assertion attributes and target attributes. If the attribute condition evaluates to `true` for a given credential, the credential is accepted. Otherwise, the credential is rejected.\nYou can use an attribute condition to restrict which identities can authenticate using your workload identity pool.\nAttribute conditions are useful in scenarios such as the following:\n- If your workload uses an identity provider that's available to the general public, you can restrict access so only the identities you choose have access to your workload identity pool.\n- If you're using an identity provider with multiple cloud platforms, you can prevent credentials intended for use with another platform from being used with Google Cloud, and vice-versa. This helps avoid the [confused deputy problem](https://wikipedia.org/wiki/Confused_deputy_problem) .\nThe attribute condition for a workload identity pool provider can use the `assertion` keyword, which refers to a map that represents the authentication credential issued by the identity provider. You can use dot notation to access the map's values. For example, AWS credentials include an `arn` value, which you can access as `assertion.arn` . In addition, the attribute condition can use any attribute that is defined in the provider's [attribute mapping](#mapping) .\nThe following example only allows requests from identities that have a specific AWS role:\n```\nattribute.aws_role == \"ROLE_MAPPING\"\n```\nFor more details, see the API documentation for the [attributeCondition field](/iam/docs/reference/rest/v1/projects.locations.workloadIdentityPools.providers#WorkloadIdentityPoolProvider.FIELDS.attribute_condition) .\n## Service account impersonation\nThe token exchange flow returns a federated access token. You can use this token to impersonate a service account and obtain a [short-lived OAuth 2.0 access token](/iam/docs/creating-short-lived-service-account-credentials#sa-credentials-oauth) . The short-lived access token lets you call any Google Cloud APIs that the service account has access to.\nTo impersonate a service account, grant your external identity the Workload Identity User role ( `roles/iam.workloadIdentityUser` ) on a service account with the roles required by your workload. You can grant a role to all the identities in a workload identity pool, or to specific external identities based on their attributes.\n**Note:** Use fully qualified resource names when granting roles to external identities, and use your , not your .\nThe following table describes common scenarios for granting roles:\n| Identities          | Identifier format                                 |\n|:-----------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------|\n| Single identity        | principal://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/subject/SUBJECT_ATTRIBUTE_VALUE    |\n| All identities in a group      | principalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/group/GROUP_ID       |\n| All identities with a specific attribute value | principalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/attribute.ATTRIBUTE_NAME/ATTRIBUTE_VALUE |\n## What's next\n- Use identity federation to [access resources from AWS](/iam/docs/access-resources-aws) , [access resources from Microsoft Azure](/iam/docs/access-resources-azure) , [access resources from an OIDC provider](/iam/docs/workload-identity-federation-with-other-providers) , or [access resources from a SAML 2.0 provider](/iam/docs/workload-identity-federation-with-other-providers) .\n- Learn how to [manage workload identity pools](/iam/docs/manage-workload-identity-pools-providers) using the Google Cloud CLI or the REST API.", "guide": "IAM"}