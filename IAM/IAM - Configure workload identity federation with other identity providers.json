{"title": "IAM - Configure workload identity federation with other identity providers", "url": "https://cloud.google.com/iam/docs/workload-identity-federation-with-other-providers", "abstract": "# IAM - Configure workload identity federation with other identity providers\nThis guide describes how to use workload identity federation with other identity providers (IdPs).\nWorkloads that run outside of Google Cloud might have access to existing, environment-specific credentials\u2014for example:\n- A workload might be able to obtain a SAML assertion or OpenID Connect (OIDC) token from an identity provider (IdP) that runs in the same environment.To authenticate to Google Cloud, you can let the workload exchange its environment-specific credentials for short-lived Google Cloud credentials by using workload identity federation.\n- A workload might possess other types of credentials such as an mTLS client certificate.By combining workload identity federation with a [custom token broker](https://googlecloudplatform.github.io/iam-federation-tools/token-service/) , you can let workloads use other types of credentials to obtain short-lived Google Cloud credentials.\nUsing workload identity federation can help you [reduce the number of credentials that require rotation](/iam/docs/best-practices-for-using-workload-identity-federation#reduce-number-of-credentials) .\nThe following sections describe how you can use workload identity federation with IdPs that support either OpenID Connect (OIDC) or SAML authentication protocols.\n**Note:** If your workloads run on AWS or Azure, see [Configure workload identity federation with AWS or Azure](/iam/docs/workload-identity-federation-with-other-clouds) instead. If you're using Active Directory Federation Services (AD FS) as IdP, see [Configure workload identity federation with Active Directory](/iam/docs/workload-identity-federation-with-active-directory) .\n", "content": "## Prepare your external IdP\nYou only need to perform these steps once for each IdP.\nBefore you begin, verify that your external IdP meets the following requirements:\n- The IdP supports OpenID Connect 1.0.\n- The IdP's [OIDC metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata) and JWKS endpoints are secured with SSL and TLS, the endpoint URLs start with `https://` , and the endpoints are publicly accessible over the internet.Google Cloud uses these endpoints to download your IdP's key set and uses this key set to validate tokens.Endpoints that are secured with self-signed certificates aren't supported by Google Cloud.\n- The IdP supports SAML 2.0.\n- The IdP provides a [SAML SP metadata document](https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf) that describes the SAML service provider configuration and contains the IdP's signing certificate.Google Cloud uses this certificate to validate SAML assertions and responses.\nIf your IdP meets these criteria, do the following:\nConfigure your IdP so that your workload can obtain ID tokens that meet the following criteria:- Tokens are signed using the`RS256`or`ES256`algorithm.\n- Tokens contain an `aud` claim with the following value:```\nhttps://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID\n```Replace the following:- ``: the [project number](/resource-manager/docs/creating-managing-projects) of the Google Cloud project that you use to create workload identity pool.\n- ``: an ID of your choice that identifies the workload identity pool. You must use the same ID when creating the workload identity pool later.\n- ``: an ID of your choice that identifies the workload identity pool provider. You must use the same ID when creating the workload identity pool provider later.\nAlternatively, you can configure the workload identity pool provider to expect a custom audience.\n- Tokens contain an `exp` claim that is in the future and an `iat` claim that is in the past.The value of `exp` must be greater than the value of `iat` by at most 24 hours.\nTypically, it's best to use ID tokens when performing a token exchange, because ID tokens reflect the user's identity. If you decide to use access tokens instead, make sure that access tokens meet the following additional requirements:- Access tokens are [JSON Web Token](https://en.wikipedia.org/wiki/JSON_Web_Token) -formatted\n- Access tokens contain an `` claim so that the URL `` `/.well-known/openid-configuration` points to the IdP's OIDC metadata endpoint.\n- To upload local JWK keys, see [Manage OIDC JWKs](/iam/docs/workload-identity-federation-with-other-providers#manage-oidc-keys) .\n **Note:** Workload identity federation doesn't support opaque tokens or [token introspection](https://datatracker.ietf.org/doc/html/rfc7662) .\nConfigure your IdP so that SAML assertions contain:- an`Issuer`element that is set to the Entity ID configured in the workload identity pool provider. The issuer format must be omitted or set to`urn:oasis:names:tc:SAML:2.0:nameid-format:entity`.\n- a`Subject`element with:- a`NameID`element.\n- exactly one`SubjectConfirmation`element with`Method`set to`urn:oasis:names:tc:SAML:2.0:cm:bearer`.\n- a`SubjectConfirmationData`element with`NotOnOrAfter`set to a timestamp that occurs in the future and no`NotBefore`value.\n- a `Conditions` element with:- `NotBefore`omitted or in the past.\n- `NotOnOrAfter`omitted or in the future.\n- An `Audience` that is formatted as follows:```\nhttps://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID\n```Replace the following:- ``: the [project number](/resource-manager/docs/creating-managing-projects) of the Google Cloud project that you use to create workload identity pool.\n- ``: an ID of your choice that identifies the workload identity pool. You must use the same ID when creating the workload identity pool later.\n- ``: an ID of your choice that identifies the workload identity pool provider. You must use the same ID when creating the workload identity pool provider later.\n- at least one `AuthnStatement` element.\n- a `SessionNotOnOrAfter` element with a timestamp that occurs in the future. Alternatively, omit the element.\nFor SAML assertions that are enclosed in a SAML response, the SAML response must contain:- exactly one assertion that meets the criteria above.\n- an`IssueInstant`attribute with a value less than 1 hour in the past.\n- the StatusCode`urn:oasis:names:tc:SAML:2.0:status:Success`.\nEither the SAML assertion, the response, or both must be signed.\n## Configure workload identity federation\nYou only need to perform these steps once for each IdP. You can then use the same workload identity pool and provider for multiple workloads and across multiple Google Cloud projects.\nTo start configuring workload identity federation, do the following:\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- It's best to\n- [use a dedicated project to manage workload identity pools and providers](/iam/docs/best-practices-for-using-workload-identity-federation#dedicated-project) \n- .\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the IAM, Resource Manager, Service Account Credentials, and Security Token Service APIs.\n- [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com,cloudresourcemanager.googleapis.com,iamcredentials.googleapis.com,sts.googleapis.com&redirect=https://console.cloud.google.com) \n### Manage OIDC JWKs (Optional)\nThis section shows you how to manage self-uploaded OIDC JWKs in workload identity pool oidc providers.\nTo create OIDC JWKs, see [JWT, JWS, JWE, JWK, and JWA Implementations](https://openid.net/developers/jwt/) .\nTo upload an OIDC JWK file when you create a workload identity pool provider, run the [gcloud iam workload-identity-pools providers create-oidc](/sdk/gcloud/reference/iam/workload-identity-pools/providers/create-oidc) command with `--jwk-json-path=\"` `` `\"` . Replace `` with the path to the JWKs JSON file.\nThis operation creates uploaded keys with the ones in the file.\nTo update OIDC JWKs, run the [gcloud iam workload-identity-pools providers update-oidc](/sdk/gcloud/reference/iam/workload-identity-pools/providers/update-oidc) command with `--jwk-json-path=\"` `` `\"` . Replace `` with the path to the JWKs JSON file.\nThis operation replaces any existing uploaded keys with the ones in the file. You cannot restore the replaced keys.\nTo delete all of the uploaded OIDC JWKs and return to using the issuer URI to fetch the keys, run the [gcloud iam workload-identity-pools providers update-oidc](/sdk/gcloud/reference/iam/workload-identity-pools/providers/update-oidc) command with `--jwk-json-path=\"` `` `\"` . Replace `` with the path to an empty file. Use the `--issuer-uri` flag to set the issuer URI.\nThis operation deletes all of your existing uploaded keys with the ones in the file. You cannot restore the deleted keys.\n### Define an attribute mapping and condition\nThe OIDC tokens or SAML assertions issued by your IdP might contain multiple attributes, and you must decide which attribute you want to use as subject identifier ( `google.subject` ) in Google Cloud.\nOptionally, you can [map additional attributes](/iam/docs/workload-identity-federation#mapping) . You can then refer to these attributes when granting access to resources.\nYour attribute mappings can use the claims embedded in the ID token or access token issued by the external IdP.\nYou must map one of these claims to `google.subject` to uniquely identify the user. To protect against spoofing threats, choose a claim with a unique value that can't be changed.\nMany IdPs populate the `sub` claim with a unique and immutable ID. For these IdPs, consider mapping the `sub` claim to `google.subject` :\n```\ngoogle.subject=assertion.sub\n```\nAvoid using a claim like `email` for this purpose. Email addresses can typically be reassigned or changed, so they don't uniquely and permanently identify a user.\nYour attribute mappings can use the `<Subject>` and `<Attribute>` elements embedded in the assertion issued by the external IdP. SAML attributes can be referred to using the following keywords:- `assertion.subject`contains the`NameID`of the authenticated user found in the`<Subject>`element.\n- `assertion.attributes['` `` `']`contains a list of values for the like-named`<Attribute>`.\nYou must map one of these claims to `google.subject` to uniquely identify the user. To protect against spoofing threats, choose a claim with a unique value that can't be changed.\nMany IdPs populate the `NameId` with a unique and immutable ID. For these IdPs, consider mapping the `NameId` attribute to `google.subject` :\n```\ngoogle.subject=assertion.subject\n```\nAvoid using an attribute like `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress` for this purpose. Email addresses can typically be reassigned or changed, so they don't uniquely and permanently identify a user.\nOptionally, define an [attribute condition](/iam/docs/workload-identity-federation#conditions) . Attribute conditions are CEL expressions that can check assertion attributes and target attributes. If the attribute condition evaluates to `true` for a given credential, the credential is accepted. Otherwise, the credential is rejected.\nYou can use an attribute condition to restrict which users can use workload identity federation to obtain short-lived Google Cloud tokens.\nFor example, the following condition restricts access to tokens that contain a custom `service_account` claim with a value `true` :\n```\nassertion.service_account==true\n```\nYou can use an attribute condition to restrict which users can use workload identity federation to obtain short-lived Google Cloud tokens.\nFor example, the following condition restricts access to assertions that contain a custom `https://example.com/SAML/Attributes/AllowGcpFederation` attribute with a value `true` :\n```\nassertion.attributes['https://example.com/SAML/Attributes/AllowGcpFederation'][0]=='true'\n```\n### Create the workload identity pool and provider\nYou now have collected all the information that you need to create a workload identity pool and provider:\n- In the Google Cloud console, go to the **New workload provider and pool** page. [Go to New workload provider and pool](https://console.cloud.google.com/iam-admin/workload-identity-pools/create) \n- Under **Create an identity pool** , enter the following:- **Name** : Name for the pool. The name is also used as the pool ID. You can't change the pool ID later.\n- **Description** : Text that describes the purpose of the pool.\n- Click **Continue** .\n- Configure provider settings as follows:\n- In **Select a provider** , select **OpenID Connect (OIDC)** .\n- In **Provider name** , enter a name for the provider. The name is also used as the provider ID. You can't change the provider ID after the provider is created.\n- In **Issuer URL** , enter the issuer URL of your IdP. The URL must start with`https://`\n- Optional: In **JWK file(JSON)** , choose a JWK file to upload. If this field is not supplied, Google Cloud attempts to fetch a JWK from the issuer.\n- **Allowed audiences** : Expected audience of ID tokens.\n- In **Select a provider** , select **SAML** .\n- In **Provider name** , enter a name for the provider. The name is also used as the provider ID. You can't change the provider ID after the provider is created.\n- In **IDP Metadata file (XML)** , upload the SAML metadata XML document that is provided by your identity provider.- Click **Continue** .\n- Under **Configure provider attributes** , add the [attribute mappings](#mappings-and-conditions) that you identified earlier in this guide.\n- Under **Attribute conditions** , enter the [attribute condition](#mappings-and-conditions) that you identified earlier in this guide. Leave the field blank if you don't have an attribute condition.\n- To create the workload identity pool and provider, click **Save** .\n- To create a new workload identity pool, execute the following command:```\ngcloud iam workload-identity-pools create POOL_ID \\\n --location=\"global\" \\\n --description=\"DESCRIPTION\" \\\n --display-name=\"DISPLAY_NAME\"\n```Replace the following:- ``: the unique ID for the pool.\n- ``: the name of the pool.\n- ``: a description of the pool that you choose. This description appears when you grant access to pool identities.\n- To add a workload identity pool provider, do the following:\nTo add an OIDC workload identity pool provider, execute the following command:\n```\ngcloud iam workload-identity-pools providers create-oidc PROVIDER_ID \\\n --location=\"global\" \\\n --workload-identity-pool=\"POOL_ID\" \\\n --issuer-uri=\"ISSUER\" \\\n --allowed-audiences=\"AUDIENCE\" \\\n --attribute-mapping=\"MAPPINGS\" \\\n --attribute-condition=\"CONDITIONS\"\n --jwk-json-path=\"JWK_JSON_PATH\"\n```\nReplace the following:- ``: A unique workload identity pool provider ID of your choice.\n- ``: The workload identity pool ID that you created earlier.\n- ``: An issuer URI as it is defined in the OIDC metadata.\n- ``: The expected audience of ID tokens, which, for many providers, matches the client ID.\n- ``: A comma-separated list of [attribute mappings](#mappings-and-conditions) that you created earlier in this guide.\n- ``: An optional [attribute condition](#mappings-and-conditions) that you created earlier in this guide. Remove the parameter if you don't have an attribute condition.\n- ``: An optional path to a [locally uploaded OIDC JWKs](/iam/docs/workload-identity-federation#oidc-credential-security) . If this parameter isn't supplied, Google Cloud instead uses your IdP's`/.well-known/openid-configuration`path to source the JWKs containing the public keys.\nTo add a SAML workload identity pool provider, execute the following command:\n```\ngcloud iam workload-identity-pools providers create-saml PROVIDER_ID \\\n --location=\"global\" \\\n --workload-identity-pool=\"POOL_ID\" \\\n --idp-metadata-path=\"IDP_METADATA_PATH\" \\\n --attribute-mapping=\"MAPPINGS\" \\\n --attribute-condition=\"CONDITIONS\"\n```\nReplace the following:- ``: the ID of the pool\n- ``: the local file path to the SAML IdP's metadata document\n- ``: a comma-separated list of [attribute mappings](#mappings-and-conditions) that you created earlier in this guide\n- ``: Optional: the [attribute condition](#mappings-and-conditions) that you created earlier in this guide\nThe prefix `gcp-` is reserved and can't be used in a pool or provider ID.### Optional: Accept encrypted SAML assertions from your IdPTo enable your SAML 2.0 IdP to produce encrypted SAML assertions that can be accepted by workload identity federation, do the following:\n- In workload identity federation, do the following:\n- Create an asymmetric key pair for your workload identity pool provider.\n- Download a certificate file that contains the public key.\n- Configure your SAML IdP to use the public key to encrypt SAML assertions it issues.\n- In your IdP, do the following:\n- Enable assertion encryption, also known as token encryption.\n- Upload the public key that you created in workload identity federation.\n- Confirm that your IdP produces encrypted SAML assertions.\nNote that, even with SAML encryption provider keys configured, workload identity federation can still process a plaintext assertion.\nThis section guides you through creating an asymmetric key pair that enables workload identity federation to accept encrypted SAML assertions.\nGoogle Cloud uses the private key to decrypt the SAML assertions that your IdP issues. To create an asymmetric key pair for use with SAML encryption, run the following command. To learn more, see [Supported SAML encryption algorithms](#supported-saml-encryption-algorithms) .\n```\ngcloud iam workload-identity-pools providers keys create KEY_ID \\\u00a0 \u00a0 --workload-identity-pool WORKLOAD_POOL_ID \\\u00a0 \u00a0 --provider PROVIDER_ID \\\u00a0 \u00a0 --location global \\\u00a0 \u00a0 --use encryption \\\u00a0 \u00a0 --spec KEY_SPECIFICATION\n```\nReplace the following:\n- ``: a key name of your choice\n- ``: the pool ID\n- ``: the provider ID\n- ``: the key specification, which can be one of`rsa-2048`,`rsa-3072`, and`rsa-4096`.\nAfter the key pair is created, to download the public key into a certificate file, execute the following command. Only workload identity federation has access to the private key.\n```\ngcloud iam workload-identity-pools providers keys describe KEY_ID \\\u00a0 \u00a0 --workload-identity-pool WORKLOAD_POOL_ID \\\u00a0 \u00a0 --provider PROVIDER_ID \\\u00a0 \u00a0 --location global \\\u00a0 \u00a0 --format \"value(keyData.key)\" \\\u00a0 \u00a0 > CERTIFICATE_PATH\n```\nReplace the following:\n- ``: the key name\n- ``: the pool ID\n- ``: the provider ID\n- ``: the path to write the certificate to\u2014for example,`saml-certificate.cer`or`saml-certificate.pem`Configure your SAML IdP to use the public certificate downloaded from the last step to encrypt the SAML assertions that it issues. Consult your IdP team for specific instructions.\nAfter you configure your IdP to encrypt SAML assertions, we recommend that you check to make sure that the assertions it generates are actually encrypted. Even with SAML assertion encryption configured, workload identity federation can still process plaintext assertions.\nTo delete SAML encryption keys run the following command:\n```\n\u00a0 gcloud iam workload-identity-pools providers keys delete KEY_ID \\\u00a0 \u00a0 \u00a0 --workload-identity-pool WORKLOAD_POOL_ID \\\u00a0 \u00a0 \u00a0 --provider PROVIDER_ID \\\u00a0 \u00a0 \u00a0 --location global\n```\nReplace the following:\n- ``: the key name\n- ``: the pool ID\n- ``: the provider ID\nWorkload identity federation supports the following key transport algorithms:- [http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p](http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p) \n- [http://www.w3.org/2009/xmlenc11#rsa-oaep\"](http://www.w3.org/2009/xmlenc11#rsa-oaep) \n- [http://www.w3.org/2001/04/xmlenc#rsa-1_5\"](http://www.w3.org/2001/04/xmlenc#rsa-1_5) \nWorkload identity federation supports the following block encryption algorithms:- [http://www.w3.org/2001/04/xmlenc#aes128-cbc](http://www.w3.org/2001/04/xmlenc#aes128-cbc) \n- [http://www.w3.org/2001/04/xmlenc#aes192-cbc](http://www.w3.org/2001/04/xmlenc#aes192-cbc) \n- [http://www.w3.org/2001/04/xmlenc#aes256-cbc](http://www.w3.org/2001/04/xmlenc#aes256-cbc) \n- [http://www.w3.org/2009/xmlenc11#aes128-gcm](http://www.w3.org/2009/xmlenc11#aes128-gcm) \n- [http://www.w3.org/2009/xmlenc11#aes256-gcm](http://www.w3.org/2009/xmlenc11#aes256-gcm) ## Authenticate a workload\nYou must perform these steps once for each workload.\n### Create a service account for the external workload\n- Enable the IAM, Security Token Service, and Service Account Credentials APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com,sts.googleapis.com,iamcredentials.googleapis.com&redirect=https://console.cloud.google.com) \n- [Create a service account](/iam/docs/creating-managing-service-accounts#creating) that represents the workload. It's best to [use a dedicated service account for each workload](/iam/docs/best-practices-for-using-workload-identity-federation#use-dedicated-service-accounts) .The service account doesn't need to be in the same project as the workload identity pool.\n- [Grant the service account access](/iam/docs/granting-changing-revoking-access) to resources that you want external identities to access.\n### Allow the external workload to impersonate the service account\nTo allow external identities to impersonate a service account, you grant them the Workload Identity User role ( `roles/iam.workloadIdentityUser` ) on the service account. You can grant the role to a specific external identity, or to multiple external identities:\n- For a specific external identity, write an attribute condition that checks the`google.subject`attribute.\n- For a group of external identities, write an attribute condition that checks the`google.groups`attribute or a custom attribute`attribute.` ``.\n**Note:** You can only check attributes that you've configured in the [attribute mapping](#mappings-and-conditions) in the configuration for your workload identity pool provider.\nTo allow external identities to impersonate a service account using the Google Cloud console, do the following:- In the Google Cloud console, go to the **Workload Identity Pools** page. [Go to Workload Identity Pools](https://console.cloud.google.com/iam-admin/workload-identity-pools) \n- Find the workload identity pool you want to update and select it.\n- To grant access to the selected workload identity pool, click add_box **Grant access** .\n- In the **Service account** list, select the service account for the external identities to impersonate.\n- To choose which identities in the pool can impersonate the service account, perform one of the following actions:- To allow only specific identities of the workload identity pool to impersonate the service account, select **Only identities matching the filter** .In the **Attribute name** list, select the attribute that you want to filter on.In the **Attribute value** field, enter the expected value of the attribute; for example, if you use an [attribute mapping](#mappings-and-conditions) `google.subject=assertion.sub` , set **Attribute** name to `subject` and **Attribute value** to the value of the `sub` claim in tokens issued by your external identity provider.\n- To save the configuration, click **Save** and then **Dismiss** .\nTo allow external identities to impersonate a service account using gcloud CLI, do the following:- To obtain the project number of your current project, execute the following command:```\ngcloud projects describe $(gcloud config get-value core/project) --format=value\\(projectNumber\\)\n```\n- To grant the Workload Identity User role ( `roles/iam.workloadIdentityUser` ) to external identities that meet a certain criteria:\n```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_EMAIL \\\n --role=roles/iam.workloadIdentityUser \\\n --member=\"principal://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/subject/SUBJECT\"\n```\n```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_EMAIL \\\n --role=roles/iam.workloadIdentityUser \\\n --member=\"principalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/group/GROUP\"\n```\n```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_EMAIL \\\n --role=roles/iam.workloadIdentityUser \\\n --member=\"principalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/attribute.ATTRIBUTE_NAME/ATTRIBUTE_VALUE\"\n```\nReplace the following:- ``: the email address of the service account\n- ``: the [project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects) of the project that contains the workload identity pool\n- ``: the pool ID of the workload identity pool\n- ``: the expected value for the attribute that [you've mapped](#mappings-and-conditions) to`google.subject`\n- ``: the expected value for the attribute that [you've mapped](#mappings-and-conditions) to`google.groups`\n- ``: the name of a custom attribute in [your attribute mapping](#mappings-and-conditions) \n **Note:** You must use the project number in the member identifier. Using the project ID is not supported.\n### Create a credential configuration\nThe [Cloud Client Libraries](/apis/docs/cloud-client-libraries) , the gcloud CLI, and Terraform, can automatically obtain external credentials, and use these credentials to impersonate a service account. To let libraries and tools complete this process, you have to provide a credential configuration file. This file defines the following:\n- Where to obtain external credentials from\n- Which workload identity pool and provider to use\n- Which service account to impersonate\nThe Cloud Client Libraries obtain external credentials from a local file, an HTTP URL, by running a local executable:\n- **Executable-sourced credentials** : The libraries launch an executable whenever they need a new credential. If the executable succeeds in obtaining a new external credential, it must write a JSON document to `STDOUT` that looks like the following:\n```\n{\n \"version\": 1,\n \"success\": true,\n \"token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\n \"id_token\": \"HEADER.PAYLOAD.SIGNATURE\",\n \"expiration_time\": 1620499962\n}\n```\nIf the executable fails to obtain a new credential, it must write a JSON document to `STDOUT` that looks like the following:\n```\n{\n \"version\": 1,\n \"success\": false,\n \"code\": \"401\",\n \"message\": \"Caller not authorized.\"\n}\n```\nThe JSON documents use the following fields:- ``: The version of the JSON output. Currently only version 1 is supported.\n- `` : The status of the response.When `true` , the response must contain the fields `id_token` and `token_type` . The executable must exit with exit code 0.When `false` , the response must contain the fields `code` and `message` and exit with a non-zero value.\n- `` : The token type of the external credential. Supported values are- `urn:ietf:params:oauth:token-type:id_token`\n- `urn:ietf:params:oauth:token-type:jwt`\n- `` : The external credential.\n- `` : The OIDC token expiration time in seconds (unix epoch time). This field is only required when an output file has been specified in the credential configuration.\n- `` : The error code string.\n- `` : The error message.\n```\n{\n \"version\": 1,\n \"success\": true,\n \"token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n \"saml_response\": \"...\",\n \"expiration_time\": 1620499962\n}\n```\nIf the executable fails to obtain a new credential, it must write a JSON document to `STDOUT` that looks like the following:\n```\n{\n \"version\": 1,\n \"success\": false,\n \"code\": \"401\",\n \"message\": \"Caller not authorized.\"\n}\n```\nThe JSON documents use the following fields:- ``: The version of the JSON output. Currently only version 1 is supported.\n- `` : The status of the response.When `true` , the response must contain the fields `id_token` and `token_type` . The executable must exit with exit code 0.When `false` , the response must contain the fields `code` and `message` and exit with a non-zero value.\n- `` : The token type of the external credential. Must be `urn:ietf:params:oauth:token-type:saml2` .\n- `` : The SAML response or base64-encoded SAML assertion.\n- `` : The assertion expiration time in seconds (unix epoch time). This field is only required when an output file has been specified in the credential configuration.\n- `` : The error code string.\n- `` : The error message.\nWhen launching the executable, client libraries set the following environment variables:- ``: Audience from the credential configuration. Always present.\n- ``: Expected subject token type. Always present.\n- ``: Service account email. Only present when service account impersonation is used.\n- ``: Output file location from the credential configuration. Only present when specified in the credential configuration.\nTo use executable-sourced credentials, you must set the environment variable `GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES` to `1` .\n- **File-sourced credentials** : The libraries read the external credential from a local plain text or JSON file. For example:\n```\n{\n \"mytoken\": \"ey...\n}\n```\n```\ney...\n```\nThe external credential can be:- an OIDC token\n- a SAML response\n- a base64-encoded SAML assertion\nYou must periodically update the file so that it always contains a valid credential. For example, if the OIDC token or SAML assertion is valid for one hour, you must refresh the file at least once every hour.\n- **URL-sourced credentials** : The libraries perform a `GET` request to an HTTP endpoint whenever they need a new credential. The endpoint must return a plain text or JSON response that is equivalent to the format used by file-sourced credentials.\n**Note:** Unlike a [service account key](/iam/docs/creating-managing-service-account-keys#creating_service_account_keys) , a credential configuration file doesn't contain a private key and doesn't need to be kept confidential. Details about the credential configuration file are available at [https://google.aip.dev/auth/4117](https://google.aip.dev/auth/4117) .\nTo create a credential configuration file, do the following:\n```\ngcloud iam workload-identity-pools create-cred-config \\\u00a0 \u00a0 projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --service-account=SERVICE_ACCOUNT_EMAIL \\\u00a0 \u00a0 --service-account-token-lifetime-seconds=SERVICE_ACCOUNT_TOKEN_LIFETIME \\\u00a0 \u00a0 --output-file=FILEPATH.json \\\u00a0 \u00a0 --executable-command=EXECUTABLE_COMMAND \\\u00a0 \u00a0 --executable-timeout-millis=EXECUTABLE_TIMEOUT \\\u00a0 \u00a0 --executable-output-file=EXECUTABLE_OUTPUT_FILE\n```\nReplace the following:- ``: The project number of the project that contains the workload identity pool\n- ``: The ID of the workload identity pool\n- ``: The ID of the workload identity pool provider\n- ``: The email address of the service account\n- ``: lifetime of the service account access token, in seconds; this defaults to one hour when not provided. To specify a lifetime longer than one hour, you must configure the`constraints/iam.allowServiceAccountCredentialLifetimeExtension` [organizational policy constraint](/resource-manager/docs/organization-policy/creating-managing-policies) .\n- ``: The file to save configuration to\n- ``: The full command, including arguments, to run to retrieve the OIDC ID token (e.g. --executable-command=\"/path/to/command --foo=bar\")\n- ``: The optional duration in milliseconds to wait for the executable to run (defaults to 30s)\n- ``: This file path points to the 3PI credentials generated by the executable. This is useful for caching the credentials. By specifying this path, the Auth libraries will first check for its existence before running the executable.\n```\ngcloud iam workload-identity-pools create-cred-config \\\u00a0 \u00a0 projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --service-account=SERVICE_ACCOUNT_EMAIL \\\u00a0 \u00a0 --service-account-token-lifetime-seconds=SERVICE_ACCOUNT_TOKEN_LIFETIME \\\u00a0 \u00a0 --output-file=FILEPATH.json \\\u00a0 \u00a0 --credential-source-file=TOKEN_FILEPATH \\\u00a0 \u00a0 --credential-source-type=SOURCE_TYPE \\\u00a0 \u00a0 --credential-source-field-name=FIELD_NAME\n```\nReplace the following:- ``: Project number of the project that contains the workload identity pool\n- ``: ID of the workload identity pool\n- ``: ID of the workload identity pool provider\n- ``: Email address of the service account\n- ``: lifetime of the service account access token, in seconds; this defaults to one hour when not provided. To specify a lifetime longer than one hour, you must configure the`constraints/iam.allowServiceAccountCredentialLifetimeExtension` [organizational policy constraint](/resource-manager/docs/organization-policy/creating-managing-policies) .\n- ``: File to save configuration to\n- ``: Path where OIDC ID tokens are stored\n- ``: Format of the OIDC ID token file, set to`text`(default) or`json`\n- ``: Field in the text file that contains the token (if``is`json`)\n```\ngcloud iam workload-identity-pools create-cred-config \\\u00a0 \u00a0 projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --service-account=SERVICE_ACCOUNT_EMAIL \\\u00a0 \u00a0 --service-account-token-lifetime-seconds=SERVICE_ACCOUNT_TOKEN_LIFETIME \\\u00a0 \u00a0 --output-file=FILEPATH.json \\\u00a0 \u00a0 --credential-source-url=\"TOKEN_URL\" \\\u00a0 \u00a0 --credential-source-headers=\"KEY_1=VALUE_1,KEY_2=VALUE_2\" \\\u00a0 \u00a0 --credential-source-type=SOURCE_TYPE \\\u00a0 \u00a0 --credential-source-field-name=FIELD_NAME\n```\nReplace the following:- ``: Project number of the project that contains the workload identity pool\n- ``: ID of the workload identity pool\n- ``: ID of the workload identity pool provider\n- ``: Email address of the service account\n- ``: lifetime of the service account access token, in seconds; this defaults to one hour when not provided. To specify a lifetime longer than one hour, you must configure the`constraints/iam.allowServiceAccountCredentialLifetimeExtension` [organizational policy constraint](/resource-manager/docs/organization-policy/creating-managing-policies) .\n- ``: File to save configuration to\n- ``: URL to retrieve OIDC ID token from\n- ``,``: Custom headers to include in HTTP request to``\n- ``: Format of the OIDC ID token file, set to`text`(default) or`json`\n- ``: Field in the text file that contains the token (if``is`json`)\n### Using the credential configuration to access Google Cloud\nTo let tools and client libraries use your credential configuration, do the following:\n- Initialize an environment variable `GOOGLE_APPLICATION_CREDENTIALS` and point it to the credential configuration file:\n- Use a client library or tool that supports workload identity federation and can [find credentials automatically](/docs/authentication/application-default-credentials) :\nThe [Google Cloud Client Libraries for C++](/cpp/docs) support workload identity federation since version [v2.6.0](https://github.com/googleapis/google-cloud-cpp/releases/tag/v2.6.0) . To use workload identity federation, you must build the client libraries with version 1.36.0 or later of gRPC.\nClient libraries for Go support identity federation if they use version v0.0.0-20210218202405-ba52d332ba99 or later of the `golang.org/x/oauth2` module.\nTo check which version of this module your client library uses, run the following commands:\n```\ncd $GOPATH/src/cloud.google.com/gogo list -m golang.org/x/oauth2\n```\nClient libraries for Java support identity federation if they use version 0.24.0 or later of the [com.google.auth:google-auth-library-oauth2-http artifact](https://search.maven.org/artifact/com.google.auth/google-auth-library-oauth2-http) .\nTo check which version of this artifact your client library uses, run the following Maven command in your application directory:\n```\nmvn dependency:list -DincludeArtifactIds=google-auth-library-oauth2-http\n```\nClient libraries for Node.js support workload identity federation if they use version 7.0.2 or later of the [google-auth-library package](https://github.com/googleapis/google-auth-library-nodejs) .\nTo check which version of this package your client library uses, run the following command in your application directory:\n```\nnpm list google-auth-library\n```\nWhen you create a `GoogleAuth` object, you can specify a project ID, or you can allow `GoogleAuth` to find the project ID automatically. To find the project ID automatically, the service account in the configuration file must have the Browser role ( `roles/browser` ), or a role with equivalent permissions, on your project. For details, see the [README for the google-auth-library package](https://github.com/googleapis/google-auth-library-nodejs#using-external-identities) .\nClient libraries for Python support identity federation if they use version 1.27.0 or later of the [google-auth package](https://github.com/googleapis/google-auth-library-python) .\nTo check which version of this package your client library uses, run the following command in the environment where the package is installed:\n```\npip show google-auth\n```\nTo specify a project ID for the authentication client, you can set the `GOOGLE_CLOUD_PROJECT` environment variable, or you can allow the client to find the project ID automatically. To find the project ID automatically, the service account in the configuration file must have the Browser role ( `roles/browser` ), or a role with equivalent permissions, on your project. For details, see the [user guide for the google-auth package](https://github.com/googleapis/google-auth-library-python/blob/master/docs/user-guide.rst#using-external-identities) .\nTo authenticate using workload identity federation, use the [gcloud auth login](/sdk/gcloud/reference/auth/login) command:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nReplace `` with the file path to the credential configuration file.\nSupport for workload identity federation in gcloud CLI is available in [version 363.0.0 and later versions of the gcloud CLI](/sdk/docs/components#updating_components) .\nThe [Google Cloud provider](https://registry.terraform.io/providers/hashicorp/google/latest/docs) supports workload identity federation if you use version 3.61.0 or later:\n```\nterraform {\n required_providers {\n google = {\n  source = \"hashicorp/google\"\n  version = \"~> 3.61.0\"\n }\n }\n}\n```\nTo authenticate using workload identity federation, use one of the following methods:\nWhen you use gsutil in conjunction with gcloud, sign in as normal:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nWhen you use gsutil as a stand-alone command-line application, edit the .boto file to include the following section:\n```\n[Credentials]\ngs_external_account_file = FILEPATH\n```\nReplace `` , in both cases, with the file path to the credential configuration file.\nSupport for workload identity federation in gsutil is available in [version 379.0.0 and later versions of the gcloud CLI](/sdk/docs/components#updating_components) .\nTo authenticate using workload identity federation, use the [gcloud auth login](/sdk/gcloud/reference/auth/login) command, as follows:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nReplace `` with the file path to the credential configuration file.\nSupport for workload identity federation in bq is available in [version 390.0.0 and later versions of the gcloud CLI](/sdk/docs/components#updating_components) .## What's next\n- Read more about [workload identity federation](/iam/docs/workload-identity-federation) .\n- Learn about [best practices for using workload identity federation](/iam/docs/best-practices-for-using-workload-identity-federation) .\n- See how you can [manage workload identity pools and providers](/iam/docs/manage-workload-identity-pools-providers) .", "guide": "IAM"}