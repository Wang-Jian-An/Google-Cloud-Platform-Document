{"title": "IAM - Manage conditional role bindings", "url": "https://cloud.google.com/iam/docs/managing-conditional-role-bindings", "abstract": "# IAM - Manage conditional role bindings\nThis topic describes how to add, modify, and remove conditional role bindings in your Identity and Access Management (IAM) allow policies.\n**Note:** Conditional role bindings do not override role bindings with no conditions. If a principal is bound to a role, and the role binding does not have a condition, then the principal always has that role. Adding the principal to a conditional binding for the same role has no effect.\n", "content": "## Before you begin\n- Enable the IAM API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com&redirect=https://console.cloud.google.com) \n- Read the [IAM Conditions overview](/iam/docs/conditions-overview) to understand the basics of IAM conditional role bindings.\n- Review the [attribute reference](/iam/docs/conditions-attribute-reference) to learn about the different condition attributes that can be used in an expression.\n### Required roles\nTo manage conditional role bindings in a resource's allow policy, you need permissions to get the resource, and to get and set the allow policy for the resource. These permissions have the following form, where `` is the name of the service that owns the resource and `` is the name of the resource type that you want to manage access to:\n- `` `.` `` `.get`\n- `` `.` `` `.getIamPolicy`\n- `` `.` `` `.setIamPolicy`\nFor example, to manage conditional role bindings in a project's allow policy, you need the following permissions:\n- `resourcemanager.projects.get`\n- `resourcemanager.projects.getIamPolicy`\n- `resourcemanager.projects.setIamPolicy`\nTo gain the required permissions, ask your administrator to grant you a predefined or custom role that includes the permissions. For example, your administrator could grant you the Security Admin role ( `roles/iam.securityAdmin` ), which includes permissions to get almost all Google Cloud resources and manage their allow policies.\n## Add a conditional role binding to a policy\nConditional role bindings can be added to new or existing allow policies to further control access to Google Cloud resources. This section shows you how to add a simple [time-based condition](/iam/docs/configuring-temporary-access) to an existing allow policy using the Google Cloud console, the Google Cloud CLI, and the REST API.\n**Note:** You cannot use conditions when you grant [basic roles](/iam/docs/understanding-roles#basic) , including Owner (`roles/owner`), Editor (`roles/editor`), and Viewer (`roles/viewer`). Also, you cannot use conditions when you grant roles to all users ( [allUsers](/iam/docs/overview#allusers) ) or all authenticated users ( [allAuthenticatedUsers](/iam/docs/overview#allauthenticatedusers) ).\nTo add a conditional role binding to an existing allow policy:\n- In the Google Cloud console, go to the **IAM** page. [Go to the IAM page](https://console.cloud.google.com/iam-admin/iam) \n- From the list of principals, locate the desired principal and click the edit button.\n- From the **Edit permissions** panel, locate the desired role to configure a condition for. Then under **IAM condition (optional)** , click **Add IAMcondition** .\n- In the **Edit condition** panel, enter a title and optional description for the condition.\n- You can add a condition expression using either the **Condition Builder** or the **Condition Editor** . The condition builder provides an interactive interface to select your desired condition type, operator, and other applicable details about the expression. The condition editor provides a text-based interface to manually enter an expression using [CEL syntax](/iam/docs/conditions-overview#cel) . **Condition Builder** :- From the **Condition type** drop-down, select **Expiring Access** .\n- From the **Operator** drop-down, select **by** .\n- From the **Time** drop-down, click the date_rangebutton to select from a date and time range.\n- Click **Save** to apply the condition.\n- Once the **Edit condition** panel is closed, click **Save** again from the **Edit permissions** panel to update your allow policy.\n **Condition Editor** :- Click the **Condition Editor** tab and enter the following expression (replacing the timestamp with your own):```\nrequest.time < timestamp(\"2019-12-31T12:00:00.000Z\")\n```\n- After entering your expression, you can optionally choose to validate the CEL syntax by clicking **Run Linter** above the text box on the top-right.\n- Click **Save** to apply the condition.\n- Once the **Edit condition** panel is closed, click **Save** again from the **Edit permissions** panel to update your allow policy.Allow policies are set using the [read-modify-write](/iam/docs/granting-changing-revoking-access#policy-overview) pattern.\nExecute the [gcloud projects get-iam-policy](/sdk/gcloud/reference/projects/get-iam-policy) command to get the current allow policy for the project. In the following example, the JSON version of the allow policy is downloaded to a path on disk.\nCommand:\n```\ngcloud projects get-iam-policy project-id --format json > file-path\n```\nThe JSON format of the allow policy is downloaded:\n```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:travis@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.securityReviewer\"\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 1}\n```\nNote the allow policy's current `version` , which is `1` . To configure the allow policy with expirable access, add the following highlighted condition expression (replacing the timestamp with your own). The gcloud CLI updates the version automatically:\n```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:travis@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.securityReviewer\",\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Expires_2019\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"Expires at noon on 2019-12-31\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"expression\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"request.time < timestamp('2019-12-31T12:00:00Z')\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 3}\n```\nNext, set the new allow policy by executing the [gcloud projects set-iam-policy](/sdk/gcloud/reference/projects/set-iam-policy) command:\n```\ngcloud projects set-iam-policy project-id file-path\n```\nThe new allow policy is applied, and `travis@example.com` 's role binding will expire at the specified time.Use the [read-modify-write](/iam/docs/granting-changing-revoking-access#policy-overview) pattern to allow access until a specific time.\n **First, read the allow policy for the project:** \nThe Resource Manager API's ` [projects.getIamPolicy](/resource-manager/reference/rest/v1/projects/getIamPolicy) ` method gets a project's allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/PROJECT_ID:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/owner\",\n  \"members\": [  \"user:project-owner@example.com\"\n  ]\n },\n {\n  \"role\": \"roles/iam.securityReviewer\",\n  \"members\": [  \"user:travis@example.com\"\n  ]\n }\n ]\n}\n```\nNote the allow policy's current `version` , which is `1` .\n **Next, modify the allow policy so that it allows access until a specifictime.** Make sure to change the `version` field to the value `3` :\n```\n{\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 3,\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.securityReviewer\",\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Expires_2019\",\u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"Expires at noon on 2019-12-31\",\u00a0 \u00a0 \u00a0 \u00a0 \"expression\": \"request.time < timestamp('2019-12-31T12:00:00Z')\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:travis@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\n **Finally, write the updated allow policy:** \nThe Resource Manager API's ` [projects.setIamPolicy](/resource-manager/reference/rest/v1/projects/setIamPolicy) ` method sets the allow policy in the request as the project's new allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/PROJECT_ID:setIamPolicy\n```\nRequest JSON body:\n```\n{\n \"policy\": {\n \"version\": 3,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [  {\n  \"role\": \"roles/owner\",\n  \"members\": [   \"user:project-owner@example.com\"\n  ]\n  },\n  {\n  \"role\": \"roles/iam.securityReviewer\",\n  \"members\": [   \"user:travis@example.com\"\n  ],\n  \"condition\": {\n   \"title\": \"Expires_July_1_2020\",\n   \"description\": \"Expires on July 1, 2020\",\n   \"expression\":\n   \"request.time < timestamp('2020-07-01T00:00:00.000Z')\"\n  }\n  }\n ]\n }\n}\n```\nTo send your request, expand one of these options:\nThe response contains the updated allow policy.\n **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\n## Modify an existing conditional role binding\nAfter you create a conditional role binding, you can change the condition expression at any time. This section shows you how to update a [time-based condition](/iam/docs/configuring-temporary-access) in an existing allow policy using the Google Cloud console, the Google Cloud CLI, and the REST API.\nTo modify a conditional role binding in an existing allow policy:\n- In the Google Cloud console, go to the **IAM** page. [Go to the IAM page](https://console.cloud.google.com/iam-admin/iam) \n- From the list of principals, locate the desired principal and click the edit button.\n- From the **Edit permissions** panel, locate the desired role to configure a condition for. Then under **IAM condition (optional)** , click the name of the existing condition to edit it.\n- In the **Edit condition** panel, you can either keep or update the existing title and description for the condition.\n- You can either edit the existing condition expression or add a new one using either the **Condition Builder** or the **Condition Editor** . The condition builder provides an interactive interface to select your desired condition type, operator, and other applicable details about the expression. The condition editor provides a text-based interface to manually enter an expression using [CEL syntax](/iam/docs/conditions-overview#cel) . **Condition Builder** :- Add a new condition expression or modify the existing condition expression.\n- Click **Save** to apply the condition.\n- Once the **Edit condition** panel is closed, click **Save** again from the **Edit permissions** panel to update your allow policy.\n **Condition Editor** :- Click the **Condition Editor** tab and either add a new condition expression or modify the existing condition expression.\n- After entering your expression, you can optionally choose to validate the CEL syntax by clicking **Run Linter** above the text box on the top-right.\n- Click **Save** to apply the condition.\n- Once the **Edit condition** panel is closed, click **Save** again from the **Edit permissions** panel to update your allow policy.Allow policies are set using the [read-modify-write](/iam/docs/granting-changing-revoking-access#policy-overview) pattern.\nExecute the [gcloud projects get-iam-policy](/sdk/gcloud/reference/projects/get-iam-policy) command to get the current allow policy for the project. In the following example, the JSON version of the allow policy is downloaded to a path on disk.\nCommand:\n```\ngcloud projects get-iam-policy project-id --format json > file-path\n```\nThe JSON format of the allow policy is downloaded:\n```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:fatima@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/bigquery.dataViewer\",\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Duration_3_months\",\u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"Expires in 3 months on 2019-10-12\",\u00a0 \u00a0 \u00a0 \u00a0 \"expression\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"request.time > timestamp(\\\"2019-07-12T07:00:00.000Z\\\") && request.time < timestamp(\\\"2019-10-12T07:00:00.000Z\\\")\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 3}\n```\nIn this example, we will update the `title` , `description` , and timestamp values in the expression to change the duration of the scheduled access condition. Update the following highlighted portion of the condition (replacing the values with your own):\n```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:fatima@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/bigquery.dataViewer\",\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Duration_5_months\",\u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"Expires in 5 months on 2020-01-12\",\u00a0 \u00a0 \u00a0 \u00a0 \"expression\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"request.time > timestamp('2019-07-12T07:00:00.000Z') && request.time < timestamp('2020-01-12T07:00:00.000Z')\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 3}\n```\nNext, set the new allow policy by executing the [gcloud projects set-iam-policy](/sdk/gcloud/reference/projects/set-iam-policy) command.\n```\ngcloud projects set-iam-policy project-id file-path\n```\nThe updated allow policy is applied, and `fatima@example.com` 's role binding will expire at the new time.Use the [read-modify-write](/iam/docs/granting-changing-revoking-access#policy-overview) pattern to modify the conditional role binding.\n **First, read the allow policy for the project:** \nThe Resource Manager API's ` [projects.getIamPolicy](/resource-manager/reference/rest/v1/projects/getIamPolicy) ` method gets a project's allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/PROJECT_ID:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": 3\n }\n}\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"etag\": \"BwWKmjvelug=\",\n \"version\": 3,\n \"bindings\": [ {\n  \"role\": \"roles/owner\",\n  \"members\": [  \"user:project-owner@example.com\"\n  ]\n },\n {\n  \"role\": \"roles/bigquery.dataViewer\",\n  \"condition\": {\n  \"title\": \"Duration_3_months\",\n  \"description\": \"Expires in 3 months on 2019-10-12\",\n  \"expression\":\n   \"request.time > timestamp(\\\"2019-07-12T07:00:00.000Z\\\") && request.time < timestamp(\\\"2019-10-12T07:00:00.000Z\\\")\"\n  },\n  \"members\": [  \"user:fatima@example.com\"\n  ]\n }\n ]\n}\n```\n **Next, modify the conditional role binding in the allow policy.** In this example, we will update the timestamp values to change the duration of the scheduled access condition. Update the following highlighted portion of the condition expression (replacing the timestamp with your own):\n```\n{\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 3,\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/bigquery.dataViewer\",\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Duration_5_months\",\u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"Expires in 5 months on 2020-01-12\",\u00a0 \u00a0 \u00a0 \u00a0 \"expression\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"request.time > timestamp('2019-07-12T07:00:00.000Z') && request.time < timestamp('2020-01-12T07:00:00.000Z')\"\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:fatima@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\n **Finally, write the updated allow policy:** \nThe Resource Manager API's ` [projects.setIamPolicy](/resource-manager/reference/rest/v1/projects/setIamPolicy) ` method sets the allow policy in the request as the project's new allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/PROJECT_ID:setIamPolicy\n```\nRequest JSON body:\n```\n{\n \"policy\": {\n \"etag\": \"BwWKmjvelug=\",\n \"version\": 3,\n \"bindings\": [  {\n  \"role\": \"roles/owner\",\n  \"members\": [   \"user:project-owner@example.com\"\n  ]\n  },\n  {\n  \"role\": \"roles/bigquery.dataViewer\",\n  \"condition\": {\n   \"title\": \"Duration_5_months\",\n   \"description\": \"Expires in 5 months on 2020-01-12\",\n   \"expression\":\n   \"request.time > timestamp('2019-07-12T07:00:00.000Z') && request.time < timestamp('2020-01-12T07:00:00.000Z')\"\n  },\n  \"members\": [   \"user:fatima@example.com\"\n  ],\n  }\n ]\n }\n}\n```\nTo send your request, expand one of these options:\nThe response contains the updated allow policy.\n **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\n## Remove a condition from a role binding\nRemoving a condition from a role binding doesn't revoke the role. Instead, it lets all principals in that role binding use the permissions in the role unconditionally.\nThis section shows you how to remove a [time-basedcondition](/iam/docs/configuring-temporary-access) in an allow policy using the Google Cloud console, the Google Cloud CLI, and the REST API.\nTo remove a condition from a role binding in an allow policy:\n- In the Google Cloud console, go to the **IAM** page. [Go to the IAM page](https://console.cloud.google.com/iam-admin/iam) \n- From the list of principals, locate the desired principal and click the edit button.\n- From the **Edit permissions** panel, locate the desired role binding. Then under **IAM condition (optional)** , click the name of an existing condition.\n- In the **Edit condition** panel, click the delete button to remove the condition. You will be prompted to confirm deletion of the condition.\n- Once the **Edit condition** panel is closed, click **Save** again from the **Edit permissions** panel to update your allow policy.\nAllow policies are set using the [read-modify-write](/iam/docs/granting-changing-revoking-access#policy-overview) pattern.\nExecute the [gcloud projects get-iam-policy](/sdk/gcloud/reference/projects/get-iam-policy) command to get the current allow policy for the project. In the following example, the JSON version of the allow policy is downloaded to a path on disk.\nCommand:\n```\ngcloud projects get-iam-policy project-id --format json > file-path\n```\nThe JSON format of the allow policy is downloaded:\n```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:fatima@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/bigquery.dataViewer\",\u00a0 \u00a0 \u00a0 \"condition\": {\u00a0 \u00a0 \u00a0 \u00a0 \"title\": \"Duration_3_months\",\u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"Expires in 3 months on 2019-10-12\",\u00a0 \u00a0 \u00a0 \u00a0 \"expression\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"request.time > timestamp(\\\"2019-07-12T07:00:00.000Z\\\") && request.time < timestamp(\\\"2019-10-12T07:00:00.000Z\\\")\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 3}\n```\nTo remove the conditional role binding from the allow policy, remove the `condition` block as shown below:\n```\n{\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:fatima@example.com\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"role\": \"roles/bigquery.dataViewer\",\u00a0 \u00a0 }\u00a0 ],\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 3}\n```\nNote that the `version` is still set to `3` , despite the fact that unconditional role bindings only require a version `1` allow policy. We recommend that you always use the highest version number when setting an allow policy, both for conditional role bindings and unconditional role bindings. See [version requirements](/iam/docs/policies#versions) for more information. The gcloud CLI updates the version number for the allow policy automatically.\nNext, set the updated allow policy by executing the [gcloud projects set-iam-policy](/sdk/gcloud/reference/projects/set-iam-policy) command:\n```\ngcloud projects set-iam-policy project-id file-path\n```\nThe updated allow policy is applied, removing the conditional role binding for `fatima@example.com` . The role binding will no longer expire.Use the [read-modify-write](/iam/docs/granting-changing-revoking-access#policy-overview) pattern to remove the conditional role binding.\n **First, read the allow policy for the project:** \nThe Resource Manager API's ` [projects.getIamPolicy](/resource-manager/reference/rest/v1/projects/getIamPolicy) ` method gets a project's allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/PROJECT_ID:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": 3\n }\n}\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"etag\": \"BwWKmjvelug=\",\n \"version\": 3,\n \"bindings\": [ {\n  \"role\": \"roles/owner\",\n  \"members\": [  \"user:project-owner@example.com\"\n  ]\n },\n {\n  \"role\": \"roles/bigquery.dataViewer\",\n  \"condition\": {\n  \"title\": \"Duration_3_months\",\n  \"description\": \"Expires in 3 months on 2019-10-12\",\n  \"expression\":\n   \"request.time > timestamp(\\\"2019-07-12T07:00:00.000Z\\\") && request.time < timestamp(\\\"2019-10-12T07:00:00.000Z\\\")\"\n  },\n  \"members\": [  \"user:fatima@example.com\"\n  ]\n }\n ]\n}\n```\n **Next, modify the allow policy by removing the conditional role binding:** \n```\n{\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"version\": 3,\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/owner\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:project-owner@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/bigquery.dataViewer\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:fatima@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\nNote that the `version` is still set to `3` , despite the fact that unconditional role bindings only require a version `1` allow policy. We recommend that you always use the highest version number when setting an allow policy, both for conditional role bindings and unconditional role bindings. See [version requirements](/iam/docs/policies#versions) for more information.\n **Finally, write the updated allow policy:** \nThe Resource Manager API's ` [projects.setIamPolicy](/resource-manager/reference/rest/v1/projects/setIamPolicy) ` method sets the allow policy in the request as the project's new allow policy.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\nHTTP method and URL:\n```\nPOST https://cloudresourcemanager.googleapis.com/v1/projects/PROJECT_ID:setIamPolicy\n```\nRequest JSON body:\n```\n{\n \"policy\": {\n \"etag\": \"BwWKmjvelug=\",\n \"version\": 3,\n \"bindings\": [  {\n  \"role\": \"roles/owner\",\n  \"members\": [   \"user:project-owner@example.com\"\n  ]\n  },\n  {\n  \"role\": \"roles/bigquery.dataViewer\",\n  \"members\": [   \"user:fatima@example.com\"\n  ]\n  }\n ]\n }\n}\n```\nTo send your request, expand one of these options:\nThe response contains the updated allow policy.\n **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\n## What's next\n- [Attribute reference for IAM Conditions](/iam/docs/conditions-attribute-reference) \n- [Resource types that accept conditional role bindings](/iam/docs/resource-types-with-conditional-roles)", "guide": "IAM"}