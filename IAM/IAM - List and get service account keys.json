{"title": "IAM - List and get service account keys", "url": "https://cloud.google.com/iam/docs/keys-list-get", "abstract": "# IAM - List and get service account keys\nThis page explains how to list and get service account keys using the Google Cloud console, the [Google Cloud CLI](/sdk/gcloud) , the [Identity and Access Management API](/iam/docs/reference/rest) , or one of the [Google Cloud Client Libraries](/apis/docs/cloud-client-libraries) .\n**Note:** If you need to access resources from a workload that runs outside of Google Cloud, such as on Amazon Web Services (AWS) or Microsoft Azure, consider using [workload identity federation](/iam/docs/workload-identity-federation) instead of service account keys. Federation lets your workloads access resources directly, using a short-lived access token, and eliminates the maintenance and security burden associated with service account keys.\n", "content": "## Before you begin\n- Enable the IAM API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com&redirect=https://console.cloud.google.com) \n- Set up authentication.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.You can use the gcloud CLI samples on this page from  either of the following development environments:- **Cloud Shell** : To use an online terminal with the   gcloud CLI already set up, activate Cloud Shell.At the bottom of this page, a Cloud Shell session starts    and displays a command-line prompt. It can take a few seconds for    the session to initialize.\n- **Local shell** : To use the gcloud CLI in a local   development environment, [install](/sdk/docs/install) and [initialize](/sdk/docs/initializing) the gcloud CLI.\nTo use the C++ samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the .NET samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Go samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Java samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Python samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```\n- Understand [service account credentials](/iam/docs/service-account-creds) .\n### Required roles\nTo get the permissions that you need to list and get service account keys,   ask your administrator to grant you the [View Service Accounts ](https://cloud.google.com/iam/docs/understanding-roles#iam.serviceAccountViewer) ( `roles/iam.serviceAccountViewer` ) IAM role on either the project or the service account whose keys you want to manage.    For more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nYou might also be able to get  the required permissions through [custom  roles](/iam/docs/creating-custom-roles) or other [predefined  roles](/iam/docs/understanding-roles) .\nFor more information, see [Service Accounts roles](/iam/docs/understanding-roles#service-accounts-roles) .\nIAM basic roles also contain permissions to manage service account keys. You should not grant basic roles in a production environment, but you can grant them in a development or test environment.\n## List service account keys\nYou can list the service account keys for a service account using the Google Cloud console, the gcloud CLI, the [serviceAccount.keys.list()](/iam/reference/rest/v1/projects.serviceAccounts.keys/list) method, or one of the [client libraries](/apis/docs/cloud-client-libraries) .\nThe `serviceAccount.keys.list()` method is commonly used to audit service accounts and keys, or to build custom tooling for managing service accounts.\nTo find out which project your key belongs to, you can download the key as a JSON file and look at that file.\nYou might see keys listed that you did not create. These are keys created by Google and used by the Service Account Credentials API. To learn more, see [Google-managed key pairs](/iam/docs/service-account-creds#google-managed-keys) .\n- In the Google Cloud console, go to the **Service accounts** page. [Go to Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts?walkthrough_id=iam--list-service-account-keys&start_index=1#step_index=1) school The remaining steps will appear automatically in the Google Cloud console.\n- Select a project.\n- On the **Service accounts** page, click the email address of the service account whose keys you want to list.\n- Click **Keys** . The Google Cloud console displays a list of keys for the  service account.\nExecute the [gcloud iam service-accounts keys list](/sdk/gcloud/reference/iam/service-accounts/keys/list) command to list service account keys.\nReplace the following values:- ``: The name of the service account to list keys for.\n- ``: Your Google Cloud project ID.\n```\ngcloud iam service-accounts keys list \\\n --iam-account=SA_NAME@PROJECT_ID.iam.gserviceaccount.com\n```\nOutput:\n| 0          | 1     | 2     | 3  |\n|:-----------------------------------------|:---------------------|:---------------------|:---------|\n| KEY_ID         | CREATED_AT   | EXPIRES_AT   | DISABLED |\n| 8e6e3936d7024646f8ceb39792006c07f4a9760c | 2021-01-01T21:01:42Z | 9999-12-31T23:59:59Z | nan  |\n| 937c98f870f5c8db970af527aa3c12fd88b1c20a | 2021-01-01T20:55:40Z | 9999-12-31T23:59:59Z | True  |To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C++ API reference documentation](/cpp/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/googleapis/google-cloud-cpp/blob/HEAD/google/cloud/iam/samples/iam_samples.cc) \n```\nnamespace iam = ::google::cloud::iam_admin_v1;[](std::string const& service_account_name,\u00a0 \u00a0std::vector<std::string> const& key_type_labels) {\u00a0 iam::IAMClient client(iam::MakeIAMConnection());\u00a0 std::vector<google::iam::admin::v1::ListServiceAccountKeysRequest::KeyType>\u00a0 \u00a0 \u00a0 key_types;\u00a0 for (auto const& type : key_type_labels) {\u00a0 \u00a0 if (type == \"USER_MANAGED\") {\u00a0 \u00a0 \u00a0 key_types.push_back(google::iam::admin::v1::\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ListServiceAccountKeysRequest::USER_MANAGED);\u00a0 \u00a0 } else if (type == \"SYSTEM_MANAGED\") {\u00a0 \u00a0 \u00a0 key_types.push_back(google::iam::admin::v1::\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ListServiceAccountKeysRequest::SYSTEM_MANAGED);\u00a0 \u00a0 }\u00a0 }\u00a0 auto response =\u00a0 \u00a0 \u00a0 client.ListServiceAccountKeys(service_account_name, key_types);\u00a0 if (!response) throw std::move(response).status();\u00a0 std::cout << \"ServiceAccountKeys successfully retrieved: \"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 << response->DebugString() << \"\\n\";}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C# API reference documentation](https://developers.google.com/api-client-library/dotnet/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/ServiceAccountKeys/ServiceAccountKeysList.cs) \n```\nusing System;using System.Collections.Generic;using Google.Apis.Auth.OAuth2;using Google.Apis.Iam.v1;using Google.Apis.Iam.v1.Data;public partial class ServiceAccountKeys{\u00a0 \u00a0 public static IList<ServiceAccountKey> ListKeys(string serviceAccountEmail)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 var credential = GoogleCredential.GetApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .CreateScoped(IamService.Scope.CloudPlatform);\u00a0 \u00a0 \u00a0 \u00a0 var service = new IamService(new IamService.Initializer\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HttpClientInitializer = credential\u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 var response = service.Projects.ServiceAccounts.Keys\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .List($\"projects/-/serviceAccounts/{serviceAccountEmail}\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .Execute();\u00a0 \u00a0 \u00a0 \u00a0 foreach (ServiceAccountKey key in response.Keys)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"Key: \" + key.Name);\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return response.Keys;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](https://godoc.org/google.golang.org/genproto/googleapis/iam/admin/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/snippets/service_account_keys_list.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 iam \"google.golang.org/api/iam/v1\")// listKey lists a service account's keys.func listKeys(w io.Writer, serviceAccountEmail string) ([]*iam.ServiceAccountKey, error) {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 service, err := iam.NewService(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"iam.NewService: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resource := \"projects/-/serviceAccounts/\" + serviceAccountEmail\u00a0 \u00a0 \u00a0 \u00a0 response, err := service.Projects.ServiceAccounts.Keys.List(resource).Do()\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return nil, fmt.Errorf(\"Projects.ServiceAccounts.Keys.List: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 for _, key := range response.Keys {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Listing key: %v\", key.Name)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return response.Keys, nil}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](https://developers.google.com/api-client-library/java/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/ListServiceAccountKeys.java) \n```\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.api.services.iam.v1.Iam;import com.google.api.services.iam.v1.IamScopes;import com.google.api.services.iam.v1.model.ServiceAccountKey;import com.google.auth.http.HttpCredentialsAdapter;import com.google.auth.oauth2.GoogleCredentials;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.Collections;import java.util.List;public class ListServiceAccountKeys {\u00a0 // Lists all keys for a service account.\u00a0 public static void listKeys(String projectId, String serviceAccountName) {\u00a0 \u00a0 // String projectId = \"my-project-id\";\u00a0 \u00a0 // String serviceAccountName = \"my-service-account-name\";\u00a0 \u00a0 Iam service = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 service = initService();\u00a0 \u00a0 } catch (IOException | GeneralSecurityException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to initialize service: \\n\" + e.toString());\u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 }\u00a0 \u00a0 String serviceAccountEmail = serviceAccountName + \"@\" + projectId + \".iam.gserviceaccount.com\";\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 List<ServiceAccountKey> keys =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 service\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .projects()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .serviceAccounts()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .keys()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .list(\"projects/-/serviceAccounts/\" + serviceAccountEmail)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .execute()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .getKeys();\u00a0 \u00a0 \u00a0 for (ServiceAccountKey key : keys) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(\"Key: \" + key.getName());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to list service account keys: \\n\" + e.toString());\u00a0 \u00a0 }\u00a0 }\u00a0 private static Iam initService() throws GeneralSecurityException, IOException {\u00a0 \u00a0 // Use the Application Default Credentials strategy for authentication. For more info, see:\u00a0 \u00a0 // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\u00a0 \u00a0 GoogleCredentials credential =\u00a0 \u00a0 \u00a0 \u00a0 GoogleCredentials.getApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\u00a0 \u00a0 // Initialize the IAM service, which can be used to send requests to the IAM API.\u00a0 \u00a0 Iam service =\u00a0 \u00a0 \u00a0 \u00a0 new Iam.Builder(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GoogleNetHttpTransport.newTrustedTransport(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GsonFactory.getDefaultInstance(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new HttpCredentialsAdapter(credential))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setApplicationName(\"service-account-keys\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 return service;\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](https://developers.google.com/api-client-library/python/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/service_account_keys.py) \n```\nimport osfrom google.oauth2 import service_accountimport googleapiclient.discovery \u00a0# type: ignoredef list_keys(service_account_email: str) -> None:\u00a0 \u00a0 \"\"\"Lists all keys for a service account.\"\"\"\u00a0 \u00a0 credentials = service_account.Credentials.from_service_account_file(\u00a0 \u00a0 \u00a0 \u00a0 filename=os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"],\u00a0 \u00a0 \u00a0 \u00a0 scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\u00a0 \u00a0 )\u00a0 \u00a0 service = googleapiclient.discovery.build(\"iam\", \"v1\", credentials=credentials)\u00a0 \u00a0 keys = (\u00a0 \u00a0 \u00a0 \u00a0 service.projects()\u00a0 \u00a0 \u00a0 \u00a0 .serviceAccounts()\u00a0 \u00a0 \u00a0 \u00a0 .keys()\u00a0 \u00a0 \u00a0 \u00a0 .list(name=\"projects/-/serviceAccounts/\" + service_account_email)\u00a0 \u00a0 \u00a0 \u00a0 .execute()\u00a0 \u00a0 )\u00a0 \u00a0 for key in keys[\"keys\"]:\u00a0 \u00a0 \u00a0 \u00a0 print(\"Key: \" + key[\"name\"])\n```The ` [projects.serviceAccounts.keys.list](/iam/docs/reference/rest/v1/projects.serviceAccounts.keys/list) ` method lists all of the service account keys for a service account.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The name of the service account whose keys you want to list.\n- ``: Optional. A comma-separated list of key types that you want  to include in the response. The key type indicates whether a key is user-managed  (`USER_MANAGED`) or system-managed (`SYSTEM_MANAGED`). If left blank, all  keys are returned.\nHTTP method and URL:\n```\nGET https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/SA_NAME@PROJECT_ID.iam.gserviceaccount.com/keys?keyTypes=KEY_TYPES\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"keys\": [ {\n  \"name\": \"projects/my-project/serviceAccounts/my-service-account@my-project.iam.gserviceaccount.com/keys/90c48f61c65cd56224a12ab18e6ee9ca9c3aee7c\",\n  \"validAfterTime\": \"2020-03-04T17:39:47Z\",\n  \"validBeforeTime\": \"9999-12-31T23:59:59Z\",\n  \"keyAlgorithm\": \"KEY_ALG_RSA_2048\",\n  \"keyOrigin\": \"GOOGLE_PROVIDED\",\n  \"keyType\": \"USER_MANAGED\"\n },\n {\n  \"name\": \"projects/my-project/serviceAccounts/my-service-account@my-project.iam.gserviceaccount.com/keys/e5e3800831ac1adc8a5849da7d827b4724b1fce8\",\n  \"validAfterTime\": \"2020-03-31T23:50:09Z\",\n  \"validBeforeTime\": \"9999-12-31T23:59:59Z\",\n  \"keyAlgorithm\": \"KEY_ALG_RSA_2048\",\n  \"keyOrigin\": \"GOOGLE_PROVIDED\",\n  \"keyType\": \"USER_MANAGED\"\n },\n {\n  \"name\": \"projects/my-project/serviceAccounts/my-service-account@my-project.iam.gserviceaccount.com/keys/b97699f042b8eee6a846f4f96259fbcd13e2682e\",\n  \"validAfterTime\": \"2020-05-17T18:58:13Z\",\n  \"validBeforeTime\": \"9999-12-31T23:59:59Z\",\n  \"keyAlgorithm\": \"KEY_ALG_RSA_2048\",\n  \"keyOrigin\": \"GOOGLE_PROVIDED\",\n  \"keyType\": \"USER_MANAGED\",\n  \"disabled\": true\n }\n ]\n}\n```\n## Get a service account key\nYou can use the gcloud CLI or the REST API to get the public key data for a service account key. In addition, you can use the Google Cloud console, the gcloud CLI, or the REST API to get metadata for the key, such as the algorithm that the key uses and whether the key is managed by you or by Google.\n**Note:** You cannot get the private key data for a service account key. This data is available only when the key is created.\n**To get the public key data for a service account key:** \nUse the gcloud CLI or the REST API. This data is not available in the Google Cloud console.\n **To get metadata for a service account key:** - In the Google Cloud console, go to the **Service accounts** page. [Go to Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts?walkthrough_id=iam--get-service-account-keys&start_index=1#step_index=1) school The remaining steps will appear automatically in the Google Cloud console.\n- Select a project.\n- On the **Service accounts** page, click the email address of the service account whose keys you want to list.\n- Click **Keys** . The Google Cloud console displays a list of keys for the  service account, including metadata for each key.\n **To get the public key data for a service account key:** \nRun the [gcloud beta iam service-accounts keys get-public-key](/sdk/gcloud/reference/beta/iam/service-accounts/keys/get-public-key) command:\n```\ngcloud beta iam service-accounts keys get-public-key KEY_ID \\\u00a0 \u00a0 --iam-account=SA_NAME@PROJECT_ID.iam.gserviceaccount.com \\\u00a0 \u00a0 --output-file=FILENAME\n```\nProvide the following values:- ``: The ID of the public key you want to get. To find the key's ID, [list all keys for the service account](#list-keys) , identify the key that you want to get, and then copy its ID.\n- ``: The name of the service account whose public key you want to get.\n- ``: Your Google Cloud project ID.\n- ``: The file in which to save the public key data.\nBy default, the public key data is saved in X.509 PEM format. To get the raw public key, run the command with the additional flag `--type=raw` .\nFor example, the following command gets the public key data for the key `c97cc34494c07c9b483701f28368f20145b9ef97` , which belongs to the service account `my-service-account@my-project.iam.gserviceaccount.com` , then saves the public key data to the file `public_key.pem` :\n```\ngcloud beta iam service-accounts keys get-public-key \\\u00a0 \u00a0 c97cc34494c07c9b483701f28368f20145b9ef97 \\\u00a0 \u00a0 --iam-account=my-service-account@my-project.iam.gserviceaccount.com \\\u00a0 \u00a0 --output-file=public_key.pem\n```\n **To get metadata for a service account key:** \nRun the [gcloud iam service-accounts keys list](/sdk/gcloud/reference/iam/service-accounts/keys/list) command:\n```\ngcloud iam service-accounts keys list --iam-account=SA_NAME \\\u00a0 \u00a0 --filter=\"name~KEY_ID\" --format=json\n```\nProvide the following values:- ``: The name of the service account for which you want key metadata.\n- ``: The ID of the key for which you want metadata.\nFor example, the following command gets metadata for the key `c97cc34494c07c9b483701f28368f20145b9ef97` , which belongs to the service account `my-service-account@my-project.iam.gserviceaccount.com` :\n```\ngcloud iam service-accounts keys list \\\u00a0 \u00a0 --iam-account=my-service-account@my-project.iam.gserviceaccount.com \\\u00a0 \u00a0 --filter=\"name~c97cc34494c07c9b483701f28368f20145b9ef97\" --format=json\n```The ` [projects.serviceAccounts.keys.get](/iam/docs/reference/rest/v1/projects.serviceAccounts.keys/get) ` method returns information about a public key for a service account.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The name of the service account whose public key you want to  get.\n- ``: The ID of the public key you want to get. To find the key's ID, [list all keys for the service account](#list-keys) , identify the key that you want  to get, and then copy its ID from the end of the`name`field. The key's ID is  everything after`keys/`.\n- ``: The format in which to return the public key. Use`TYPE_X509_PEM_FILE`for X.509 PEM format or`TYPE_RAW_PUBLIC_KEY`for the  raw public key. If you omit this query parameter, the method returns metadata for the key, but  it does not return the public key data.\nHTTP method and URL:\n```\nGET https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/SA_NAME@PROJECT_ID.iam.gserviceaccount.com/keys/KEY_ID?publicKeyType=KEY_TYPE\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/my-project/serviceAccounts/my-service-account@my-project.iam.gserviceaccount.com/keys/f4a83933ac07cf52bb74e0e66d99662a09f51a36\",\n \"validAfterTime\": \"2021-12-10T17:32:06Z\",\n \"validBeforeTime\": \"9999-12-31T23:59:59Z\",\n \"publicKeyData\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvRENDQWVTZ0F3SUJBZ0lJT2lCdm9hR09nV0F3RFFZSktvWklodmNOQVFFRkJRQXdJREVlTUJ3R0ExVUUKQXhNVk1UQXhNVGsxTlRFMk5UWXlPRGszTmpFek1qQXpNQ0FYRFRJeE1USXhNREUzTXpJd05sb1lEems1T1RreApNak14TWpNMU9UVTVXakFnTVI0d0hBWURWUVFERXhVeE1ERXhPVFUxTVRZMU5qSTRPVGMyTVRNeU1ETXdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzdzeDBFcXVUMGNwSXhlczl1SW0yRy9DS3EKdnc4YTl2a2JkaWZZbDZHSDh1ZUxEWDhGNHVUeEVQMkNzU3JLTHZtOFo2My9IVUxnWjBtQXByb0JlM08vaVR1ZwpmYVZ0NVNtakhvWm9YQ1lpbjR0MS93SkpvdDhrRFdPeDZhOEdieUdqZ215ak8yYk1XdEtaQ2dqeGZ3cUV0MmN3CklnajA5VzJKYTlHTWRsdVA0VGVubTRKSkJoaFpFbTJ1bVAwYVZZdkRnUWF5d0RCYnJuNG8yY0EzSWplRDZGM1gKK0VHRDNKU0s4VW02Sk5sM21adGp6VWNZSHBrYkF0U1A2ZDI5d1RmZkdIRFY0THJRWlM3bG15d3hsb3p5WnpaawpCOFpHckMzSkF1MVNVRTdQOTN6bWtFb1B6MlRUNWhaYXZMWFQ5TGM2SExiRklRVHFnVEJVWHlNMkpIcGZBZ01CCkFBR2pPREEyTUF3R0ExVWRFd0VCL3dRQ01BQXdEZ1lEVlIwUEFRSC9CQVFEQWdlQU1CWUdBMVVkSlFFQi93UU0KTUFvR0NDc0dBUVVGQndNQ01BMEdDU3FHU0liM0RRRUJCUVVBQTRJQkFRQkhPNXlpUDY3NkE4UEN2RjdRSzdFMApYZVljbzdsSStFZkowaGJrWVlmdUtnSENPcXcvd3FBbCtOSithanljT2FPWDFPMlRZN3ZOc05pR2t3eWc2QXdqCklhL1NHVjd3NkxpS2JldFRuSVp4UlhRY25lcnVvZEwycUR5eWphMDJJSXJVTmVKY1o0MVJBNXRTL3NkcTFGNm4KM0NjSXFoZTI1OTA4TUNna3cwaFB1K0VLbFF6R1B5T3pVRHBLdXg0cnRBaHJTYTBUVW1wbEMxdTJnUk1YRkF6aApWUjU0V2dNa2tabURyalBNeWdBS3JmNkd0bHo2VHRTYTVLb1BWdGpsWExUQkxaSnlhdk4zc1F2dFlBK1NFQWpWCnA1N1ZabFBYZmR0dWN4ekJaOC9zS25SOHNyYU5hVWFjamg1NEE1Nm1URTE3b0IyUWkrTHBJUTYvNnVqVnNXaUYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\",\n \"keyAlgorithm\": \"KEY_ALG_RSA_2048\",\n \"keyOrigin\": \"GOOGLE_PROVIDED\",\n \"keyType\": \"USER_MANAGED\"\n}\n```\n## What's next\n- Learn how to [create and delete service account keys](/iam/docs/keys-create-delete) .\n- Learn how to [disable and enable service account keys](/iam/docs/keys-disable-enable) .\n- Learn about [alternatives to service account keys for authentication](/docs/authentication#auth-decision-tree) .\n- Learn how to use service account keys to [authenticate as a serviceaccount](/docs/authentication/provide-credentials-adc#wlif-key) .\n- Understand the [best practices for managing service accountkeys](/iam/docs/best-practices-for-managing-service-account-keys) .", "guide": "IAM"}