{"title": "IAM - Disable and enable service accounts", "url": "https://cloud.google.com/iam/docs/service-accounts-disable-enable", "abstract": "# IAM - Disable and enable service accounts\nThis page explains how to disable and enable service accounts using the Identity and Access Management (IAM) API, the Google Cloud console, and the gcloud CLI.\n", "content": "## Before you begin\n- Enable the IAM API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com&redirect=https://console.cloud.google.com) \n- Set up authentication.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.You can use the gcloud CLI samples on this page from  either of the following development environments:- **Cloud Shell** : To use an online terminal with the   gcloud CLI already set up, activate Cloud Shell.At the bottom of this page, a Cloud Shell session starts    and displays a command-line prompt. It can take a few seconds for    the session to initialize.\n- **Local shell** : To use the gcloud CLI in a local   development environment, [install](/sdk/docs/install) and [initialize](/sdk/docs/initializing) the gcloud CLI.\nTo use the C++ samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the .NET samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Go samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Java samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the Python samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```\n- Understand [IAM service accounts](/iam/docs/service-account-overview) \n### Required roles\nTo get the permissions that you need to manage service accounts,   ask your administrator to grant you the [Service Account Admin ](https://cloud.google.com/iam/docs/understanding-roles#iam.serviceAccountAdmin) ( `roles/iam.serviceAccountAdmin` ) IAM role on the project.    For more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nYou might also be able to get  the required permissions through [custom  roles](/iam/docs/creating-custom-roles) or other [predefined  roles](/iam/docs/understanding-roles) .\nTo learn more about this role, see [Service Accounts roles](/iam/docs/understanding-roles#service-accounts-roles) .\nIAM basic roles also contain permissions to manage service accounts. You should not grant basic roles in a production environment, but you can grant them in a development or test environment.\n## Disable a service account\nSimilar to deleting a service account, when you disable a service account, applications will no longer have access to Google Cloud resources through that service account. If you disable the default App Engine and Compute Engine service accounts, the instances will no longer have access to resources in the project. If you attempt to disable an already disabled service account, it will have no effect.\nUnlike deleting a service account, disabled service accounts can easily be re-enabled as necessary. We recommend disabling a service account before deleting it to make sure no critical applications are using the service account.\n- In the Google Cloud console, go to the **Service accounts** page. [Go to Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the name of the service account that you want to disable.\n- Under **Service account status** , click **Disable service account** , then click **Disable** to confirm the change.\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- Execute the ` [gcloud iam service-accounts disable](/sdk/gcloud/reference/iam/service-accounts/disable) ` command to disable a service account.Command:```\ngcloud iam service-accounts disable SA_NAME@PROJECT_ID.iam.gserviceaccount.com\n```Output:```\nDisabled service account SA_NAME@PROJECT_ID.iam.gserviceaccount.com\n```\nTo learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C++ API reference documentation](/cpp/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/googleapis/google-cloud-cpp/blob/HEAD/google/cloud/iam/samples/iam_samples.cc) \n```\nnamespace iam = ::google::cloud::iam_admin_v1;[](std::string const& name) {\u00a0 iam::IAMClient client(iam::MakeIAMConnection());\u00a0 google::iam::admin::v1::DisableServiceAccountRequest request;\u00a0 request.set_name(name);\u00a0 auto response = client.DisableServiceAccount(request);\u00a0 if (!response.ok()) throw std::runtime_error(response.message());\u00a0 std::cout << \"ServiceAccount successfully disabled.\\n\";}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C# API reference documentation](https://developers.google.com/api-client-library/dotnet/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/ServiceAccounts/ServiceAccountsDisable.cs) \n```\nusing System;using Google.Apis.Auth.OAuth2;using Google.Apis.Iam.v1;using Google.Apis.Iam.v1.Data;public partial class ServiceAccounts{\u00a0 \u00a0 public static void DisableServiceAccount(string email)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 var credential = GoogleCredential.GetApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .CreateScoped(IamService.Scope.CloudPlatform);\u00a0 \u00a0 \u00a0 \u00a0 var service = new IamService(new IamService.Initializer\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HttpClientInitializer = credential\u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 var request = new DisableServiceAccountRequest();\u00a0 \u00a0 \u00a0 \u00a0 string resource = \"projects/-/serviceAccounts/\" + email;\u00a0 \u00a0 \u00a0 \u00a0 service.Projects.ServiceAccounts.Disable(request, resource).Execute();\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"Disabled service account: \" + email);\u00a0 \u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](https://godoc.org/google.golang.org/genproto/googleapis/iam/admin/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/snippets/service_accounts_disable.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 iam \"google.golang.org/api/iam/v1\")// disableServiceAccount disables a service account.func disableServiceAccount(w io.Writer, email string) error {\u00a0 \u00a0 \u00a0 \u00a0 // email:= service-account@your-project.iam.gserviceaccount.com\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 service, err := iam.NewService(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"iam.NewService: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 request := &iam.DisableServiceAccountRequest{}\u00a0 \u00a0 \u00a0 \u00a0 _, err = service.Projects.ServiceAccounts.Disable(\"projects/-/serviceAccounts/\"+email, request).Do()\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Projects.ServiceAccounts.Disable: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Disabled service account: %v\", email)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](https://developers.google.com/api-client-library/java/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/DisableServiceAccount.java) \n```\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.api.services.iam.v1.Iam;import com.google.api.services.iam.v1.IamScopes;import com.google.api.services.iam.v1.model.DisableServiceAccountRequest;import com.google.auth.http.HttpCredentialsAdapter;import com.google.auth.oauth2.GoogleCredentials;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.Collections;public class DisableServiceAccount {\u00a0 // Disables a service account.\u00a0 public static void disableServiceAccount(String projectId, String serviceAccountName) {\u00a0 \u00a0 // String projectId = \"my-project-id\";\u00a0 \u00a0 // String serviceAccountName = \"my-service-account-name\";\u00a0 \u00a0 Iam service = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 service = initService();\u00a0 \u00a0 } catch (IOException | GeneralSecurityException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to initialize service: \\n\" + e.toString());\u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 }\u00a0 \u00a0 String serviceAccountEmail = serviceAccountName + \"@\" + projectId + \".iam.gserviceaccount.com\";\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 DisableServiceAccountRequest request = new DisableServiceAccountRequest();\u00a0 \u00a0 \u00a0 service\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .projects()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .serviceAccounts()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .disable(\"projects/-/serviceAccounts/\" + serviceAccountEmail, request)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .execute();\u00a0 \u00a0 \u00a0 System.out.println(\"Disabled service account: \" + serviceAccountEmail);\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to disable service account: \\n\" + e.toString());\u00a0 \u00a0 }\u00a0 }\u00a0 private static Iam initService() throws GeneralSecurityException, IOException {\u00a0 \u00a0 // Use the Application Default Credentials strategy for authentication. For more info, see:\u00a0 \u00a0 // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\u00a0 \u00a0 GoogleCredentials credential =\u00a0 \u00a0 \u00a0 \u00a0 GoogleCredentials.getApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\u00a0 \u00a0 // Initialize the IAM service, which can be used to send requests to the IAM API.\u00a0 \u00a0 Iam service =\u00a0 \u00a0 \u00a0 \u00a0 new Iam.Builder(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GoogleNetHttpTransport.newTrustedTransport(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GsonFactory.getDefaultInstance(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new HttpCredentialsAdapter(credential))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setApplicationName(\"service-accounts\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 return service;\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](https://developers.google.com/api-client-library/python/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/service_accounts.py) \n```\nimport osfrom google.oauth2 import service_account \u00a0# type: ignoreimport googleapiclient.discovery \u00a0# type: ignoredef disable_service_account(email: str) -> None:\u00a0 \u00a0 \"\"\"Disables a service account.\"\"\"\u00a0 \u00a0 credentials = service_account.Credentials.from_service_account_file(\u00a0 \u00a0 \u00a0 \u00a0 filename=os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"],\u00a0 \u00a0 \u00a0 \u00a0 scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\u00a0 \u00a0 )\u00a0 \u00a0 service = googleapiclient.discovery.build(\"iam\", \"v1\", credentials=credentials)\u00a0 \u00a0 service.projects().serviceAccounts().disable(\u00a0 \u00a0 \u00a0 \u00a0 name=\"projects/-/serviceAccounts/\" + email\u00a0 \u00a0 ).execute()\u00a0 \u00a0 print(\"Disabled service account :\" + email)\n```The ` [serviceAccounts.disable](/iam/docs/reference/rest/v1/projects.serviceAccounts/disable) ` method immediately disables a service account.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The ID of your service account. This can either be the service account's email address in the form`` `@` `` `.iam.gserviceaccount.com`, or the service account's unique numeric ID.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/SA_ID:disable\n```\nTo send your request, expand one of these options:\nIf successful, the response body will be empty.\n## Enable a service account\nAfter enabling a disabled service account, applications will regain access to Google Cloud resources through that service account.\nYou can enable a disabled service account whenever you need to. If you attempt to enable an already enabled service account, it will have no effect.\n- In the Google Cloud console, go to the **Service accounts** page. [Go to Service accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the name of the service account that you want to enable.\n- Under **Service account status** , click **Enable service account** , then click **Enable** to confirm the change.\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- Execute the ` [gcloud iam service-accounts enable](/sdk/gcloud/reference/iam/service-accounts/enable) ` command to enable a service account.Command:```\ngcloud iam service-accounts enable SA_NAME@PROJECT_ID.iam.gserviceaccount.com\n```Output:```\nEnabled service account SA_NAME@PROJECT_ID.iam.gserviceaccount.com\n```\nTo learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C++ API reference documentation](/cpp/docs/reference/iam/latest) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/googleapis/google-cloud-cpp/blob/HEAD/google/cloud/iam/samples/iam_samples.cc) \n```\nnamespace iam = ::google::cloud::iam_admin_v1;[](std::string const& name) {\u00a0 iam::IAMClient client(iam::MakeIAMConnection());\u00a0 google::iam::admin::v1::EnableServiceAccountRequest request;\u00a0 request.set_name(name);\u00a0 auto response = client.EnableServiceAccount(request);\u00a0 if (!response.ok()) throw std::runtime_error(response.message());\u00a0 std::cout << \"ServiceAccount successfully enabled.\\n\";}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM C# API reference documentation](https://developers.google.com/api-client-library/dotnet/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/iam/api/ServiceAccounts/ServiceAccountsEnable.cs) \n```\nusing System;using Google.Apis.Auth.OAuth2;using Google.Apis.Iam.v1;using Google.Apis.Iam.v1.Data;public partial class ServiceAccounts{\u00a0 \u00a0 public static void EnableServiceAccount(string email)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 var credential = GoogleCredential.GetApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .CreateScoped(IamService.Scope.CloudPlatform);\u00a0 \u00a0 \u00a0 \u00a0 var service = new IamService(new IamService.Initializer\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HttpClientInitializer = credential\u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 var request = new EnableServiceAccountRequest();\u00a0 \u00a0 \u00a0 \u00a0 string resource = \"projects/-/serviceAccounts/\" + email;\u00a0 \u00a0 \u00a0 \u00a0 service.Projects.ServiceAccounts.Enable(request, resource).Execute();\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine(\"Enabled service account: \" + email);\u00a0 \u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Go API reference documentation](https://godoc.org/google.golang.org/genproto/googleapis/iam/admin/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/iam/snippets/service_accounts_enable.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 iam \"google.golang.org/api/iam/v1\")// enableServiceAccount enables a service account.func enableServiceAccount(w io.Writer, email string) error {\u00a0 \u00a0 \u00a0 \u00a0 // email:= service-account@your-project.iam.gserviceaccount.com\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 service, err := iam.NewService(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"iam.NewService: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 request := &iam.EnableServiceAccountRequest{}\u00a0 \u00a0 \u00a0 \u00a0 _, err = service.Projects.ServiceAccounts.Enable(\"projects/-/serviceAccounts/\"+email, request).Do()\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Projects.ServiceAccounts.Enable: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Enabled service account: %v\", email)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](https://developers.google.com/api-client-library/java/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/EnableServiceAccount.java) \n```\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.api.services.iam.v1.Iam;import com.google.api.services.iam.v1.IamScopes;import com.google.api.services.iam.v1.model.EnableServiceAccountRequest;import com.google.auth.http.HttpCredentialsAdapter;import com.google.auth.oauth2.GoogleCredentials;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.Collections;public class EnableServiceAccount {\u00a0 // Enables a service account.\u00a0 public static void enableServiceAccount(String projectId, String serviceAccountName) {\u00a0 \u00a0 // String projectId = \"my-project-id\";\u00a0 \u00a0 // String serviceAccountName = \"my-service-account-name\";\u00a0 \u00a0 Iam service = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 service = initService();\u00a0 \u00a0 } catch (IOException | GeneralSecurityException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to initialize service: \\n\" + e.toString());\u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 }\u00a0 \u00a0 String serviceAccountEmail = serviceAccountName + \"@\" + projectId + \".iam.gserviceaccount.com\";\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 EnableServiceAccountRequest request = new EnableServiceAccountRequest();\u00a0 \u00a0 \u00a0 service\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .projects()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .serviceAccounts()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .enable(\"projects/-/serviceAccounts/\" + serviceAccountEmail, request)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .execute();\u00a0 \u00a0 \u00a0 System.out.println(\"Enabled service account: \" + serviceAccountEmail);\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to enable service account: \\n\" + e.toString());\u00a0 \u00a0 }\u00a0 }\u00a0 private static Iam initService() throws GeneralSecurityException, IOException {\u00a0 \u00a0 // Use the Application Default Credentials strategy for authentication. For more info, see:\u00a0 \u00a0 // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\u00a0 \u00a0 GoogleCredentials credential =\u00a0 \u00a0 \u00a0 \u00a0 GoogleCredentials.getApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\u00a0 \u00a0 // Initialize the IAM service, which can be used to send requests to the IAM API.\u00a0 \u00a0 Iam service =\u00a0 \u00a0 \u00a0 \u00a0 new Iam.Builder(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GoogleNetHttpTransport.newTrustedTransport(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GsonFactory.getDefaultInstance(),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new HttpCredentialsAdapter(credential))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setApplicationName(\"service-accounts\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 return service;\u00a0 }}\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Python API reference documentation](https://developers.google.com/api-client-library/python/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/iam/api-client/service_accounts.py) \n```\nimport osfrom google.oauth2 import service_account \u00a0# type: ignoreimport googleapiclient.discovery \u00a0# type: ignoredef enable_service_account(email: str) -> None:\u00a0 \u00a0 \"\"\"Enables a service account.\"\"\"\u00a0 \u00a0 credentials = service_account.Credentials.from_service_account_file(\u00a0 \u00a0 \u00a0 \u00a0 filename=os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"],\u00a0 \u00a0 \u00a0 \u00a0 scopes=[\"https://www.googleapis.com/auth/cloud-platform\"],\u00a0 \u00a0 )\u00a0 \u00a0 service = googleapiclient.discovery.build(\"iam\", \"v1\", credentials=credentials)\u00a0 \u00a0 service.projects().serviceAccounts().enable(\u00a0 \u00a0 \u00a0 \u00a0 name=\"projects/-/serviceAccounts/\" + email\u00a0 \u00a0 ).execute()\u00a0 \u00a0 print(\"Enabled service account :\" + email)\n```The ` [serviceAccounts.enable](/iam/docs/reference/rest/v1/projects.serviceAccounts/enable) ` method enables a previously disabled service account.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The ID of your service account. This can either be the service account's email address in the form`` `@` `` `.iam.gserviceaccount.com`, or the service account's unique numeric ID.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/SA_ID:enable\n```\nTo send your request, expand one of these options:\nIf successful, the response body will be empty.\n## What's next\n- Learn how to [delete and undelete service accounts](/iam/docs/service-accounts-delete-undelete) .\n- Review the process for [granting IAM roles to all types of principals](/iam/docs/granting-changing-revoking-access) , including service accounts.\n- Explore how you can use [role recommendations](/iam/docs/recommender-overview) to downscope permissions for all principals, including service accounts.\n- Understand how to [attach service accounts to resources](/iam/docs/attach-service-accounts) .", "guide": "IAM"}