{"title": "IAM - Disable and enable service account keys", "url": "https://cloud.google.com/iam/docs/keys-disable-enable", "abstract": "# IAM - Disable and enable service account keys\nThis page explains how to disable and enable service account keys using the Google Cloud console, the [Google Cloud CLI](/sdk/gcloud) , the [Identity and Access Management API](/iam/docs/reference/rest) , or one of the [Google Cloud Client Libraries](/apis/docs/cloud-client-libraries) .\n**Note:** If you need to access resources from a workload that runs outside of Google Cloud, such as on Amazon Web Services (AWS) or Microsoft Azure, consider using [workload identity federation](/iam/docs/workload-identity-federation) instead of service account keys. Federation lets your workloads access resources directly, using a short-lived access token, and eliminates the maintenance and security burden associated with service account keys.\n", "content": "## Before you begin\n- Enable the IAM API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com&redirect=https://console.cloud.google.com) \n- Set up authentication.Select the tab for how you plan to use the samples on this page:\nYou can use the gcloud CLI samples on this page from  either of the following development environments:- **Cloud Shell** : To use an online terminal with the   gcloud CLI already set up, activate Cloud Shell.At the bottom of this page, a Cloud Shell session starts    and displays a command-line prompt. It can take a few seconds for    the session to initialize.\n- **Local shell** : To use the gcloud CLI in a local   development environment, [install](/sdk/docs/install) and [initialize](/sdk/docs/initializing) the gcloud CLI.\nTo use the Java samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.To use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```\n- Understand [service account credentials](/iam/docs/service-account-creds) .\n### Required roles\nTo get the permissions that you need to disable and enable service account keys,   ask your administrator to grant you the [Service Account Key Admin ](https://cloud.google.com/iam/docs/understanding-roles#iam.serviceAccountKeyAdmin) ( `roles/iam.serviceAccountKeyAdmin` ) IAM role on the project, or the service account whose keys you want to manage.    For more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nYou might also be able to get  the required permissions through [custom  roles](/iam/docs/creating-custom-roles) or other [predefined  roles](/iam/docs/understanding-roles) .\nFor more information, see [Service Accounts roles](/iam/docs/understanding-roles#service-accounts-roles) .\nIAM basic roles also contain permissions to manage service account keys. You should not grant basic roles in a production environment, but you can grant them in a development or test environment.\n## Disable a service account key\nDisabling a service account key prevents you from using the key to authenticate with Google APIs. You can [enable a disabled key](#enabling) at any time.\n**Important:** Disabling a service account key does not revoke short-lived credentials that were issued based on the key. To revoke a compromised short-lived credential, you must [disable or delete the service account](/iam/docs/service-accounts-disable-enable#disabling) that the credential represents. If you do so, any workload that uses the service account will immediately lose access to your resources.\nBefore you [delete a service account key](/iam/docs/keys-create-delete#deleting) , we recommend that you disable the key, then wait until you are sure that the key is no longer needed. You can then delete the key.\nYou can view disabled keys in the Google Cloud console, but you cannot use the Google Cloud console to disable a key. Use the gcloud CLI or the REST API instead.\nExecute the [gcloud iam service-accounts keys disable](/sdk/gcloud/reference/iam/service-accounts/keys/disable) command to disable a service account key.\nReplace the following values:- ``: The ID of the key to disable. To find the key's ID, [list all keys for the service account](/iam/docs/keys-list-get#list-keys) , identify the key that you want to disable, and then copy its ID.\n- ``: The name of the service account that the key belongs to.\n- ``: Your Google Cloud project ID.\n```\ngcloud iam service-accounts keys disable KEY_ID \\\u00a0 \u00a0 --iam-account=SA_NAME@PROJECT_ID.iam.gserviceaccount.com \\\u00a0 \u00a0 --project=PROJECT_ID\n```\nOutput:\n```\nDisabled key [KEY_ID] for service account\n[SA_NAME@PROJECT_ID.iam.gserviceaccount.com]\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](https://developers.google.com/api-client-library/java/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/DisableServiceAccountKey.java) \n```\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.api.services.iam.v1.Iam;import com.google.api.services.iam.v1.IamScopes;import com.google.api.services.iam.v1.model.DisableServiceAccountKeyRequest;import com.google.auth.http.HttpCredentialsAdapter;import com.google.auth.oauth2.GoogleCredentials;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.Collections;public class DisableServiceAccountKey {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(Developer): Replace the below variables before running.\u00a0 \u00a0 String projectId = \"gcloud-project-id\";\u00a0 \u00a0 String serviceAccountName = \"service-account-name\";\u00a0 \u00a0 String serviceAccountKeyName = \"service-account-key-name\";\u00a0 \u00a0 disableServiceAccountKey(projectId, serviceAccountName, serviceAccountKeyName);\u00a0 }\u00a0 // Disables a service account key.\u00a0 public static void disableServiceAccountKey(String projectId, String serviceAccountName,\u00a0 \u00a0 \u00a0 String serviceAccountKeyName) {\u00a0 \u00a0 // Initialize the IAM service.\u00a0 \u00a0 Iam service = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 service = initService();\u00a0 \u00a0 } catch (IOException | GeneralSecurityException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to initialize service: \\n\" + e);\u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 }\u00a0 \u00a0 // Construct the service account email.\u00a0 \u00a0 // You can modify the \".iam.gserviceaccount.com\" to match the service account name in which\u00a0 \u00a0 // you want to disable the key.\u00a0 \u00a0 // See, https://cloud.google.com/iam/docs/creating-managing-service-account-keys?hl=en#disabling\u00a0 \u00a0 String serviceAccountEmail = serviceAccountName + \"@\" + projectId + \".iam.gserviceaccount.com\";\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 DisableServiceAccountKeyRequest\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 disableServiceAccountKeyRequest = new DisableServiceAccountKeyRequest();\u00a0 \u00a0 \u00a0 // Use the IAM service to disable the service account key.\u00a0 \u00a0 \u00a0 service\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .projects()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .serviceAccounts()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .keys()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .disable(String\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .format(\"projects/%s/serviceAccounts/%s/keys/%s\", projectId, serviceAccountEmail,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 serviceAccountKeyName), disableServiceAccountKeyRequest)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .execute();\u00a0 \u00a0 \u00a0 System.out.println(\"Disabled service account key: \" + serviceAccountKeyName);\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Failed to disable service account key: \\n\" + e);\u00a0 \u00a0 }\u00a0 }\u00a0 private static Iam initService() throws GeneralSecurityException, IOException {\u00a0 \u00a0 /* Use the Application Default Credentials strategy for authentication. For more info, see:\u00a0 \u00a0 \u00a0https://cloud.google.com/docs/authentication/production#finding_credentials_automatically */\u00a0 \u00a0 GoogleCredentials credential =\u00a0 \u00a0 \u00a0 \u00a0 GoogleCredentials.getApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\u00a0 \u00a0 // Initialize the IAM service, which can be used to send requests to the IAM API.\u00a0 \u00a0 return new Iam.Builder(\u00a0 \u00a0 \u00a0 \u00a0 GoogleNetHttpTransport.newTrustedTransport(),\u00a0 \u00a0 \u00a0 \u00a0 GsonFactory.getDefaultInstance(),\u00a0 \u00a0 \u00a0 \u00a0 new HttpCredentialsAdapter(credential))\u00a0 \u00a0 \u00a0 \u00a0 .setApplicationName(\"service-accounts\")\u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 }}\n```The ` [projects.serviceAccounts.keys.disable](/iam/docs/reference/rest/v1/projects.serviceAccounts.keys/disable) ` method disables a service account key.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The name of the service account whose key you want to disable.\n- ``: The ID of the key that you want to disable. To find the key's  ID, [list all keys for the service account](#list-keys) , identify the key that you  want to disable, and then copy its ID from the end of the`name`field. The key's ID  is everything after`keys/`.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/SA_NAME@PROJECT_ID.iam.gserviceaccount.com/keys/KEY_ID:disable\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n}\n```\n## Enable a service account key\nAfter you disable a service account key, you can enable the key at any time, then use the key to authenticate with Google APIs.\nYou cannot use the Google Cloud console to enable service account keys. Use the gcloud CLI or the REST API instead.\nExecute the [gcloud iam service-accounts keys enable](/sdk/gcloud/reference/iam/service-accounts/keys/enable) command to enable a service account key.\nReplace the following values:- ``: The ID of the key to enable. To find the key's ID, [list all keys for the service account](/iam/docs/keys-list-get#list-keys) , identify the key that you want to enable, and then copy its ID.\n- ``: The name of the service account that the key belongs to.\n- ``: Your Google Cloud project ID.\n```\ngcloud iam service-accounts keys enable KEY_ID \\\u00a0 \u00a0 --iam-account=SA_NAME@PROJECT_ID.iam.gserviceaccount.com\\\u00a0 \u00a0 --project=PROJECT_ID\n```\nOutput:\n```\nEnabled key [KEY_ID] for service account\n[SA_NAME@PROJECT_ID.iam.gserviceaccount.com]\n```To learn how to install and use the client library for IAM, see [IAM client libraries](/iam/docs/reference/libraries) .       For more information, see the [IAM Java API reference documentation](https://developers.google.com/api-client-library/java/apis/iam/v1) .\nTo authenticate to IAM, set up Application Default Credentials.  For more information, see [Before you begin](#before-you-begin) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/iam/api-client/src/main/java/iam/snippets/EnableServiceAccountKey.java) \n```\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;import com.google.api.client.json.gson.GsonFactory;import com.google.api.services.iam.v1.Iam;import com.google.api.services.iam.v1.IamScopes;import com.google.api.services.iam.v1.model.EnableServiceAccountKeyRequest;import com.google.auth.http.HttpCredentialsAdapter;import com.google.auth.oauth2.GoogleCredentials;import java.io.IOException;import java.security.GeneralSecurityException;import java.util.Collections;public class EnableServiceAccountKey {\u00a0 public static void main(String[] args) {\u00a0 \u00a0 // TODO(Developer): Replace the below variables before running.\u00a0 \u00a0 String projectId = \"gcloud-project-id\";\u00a0 \u00a0 String serviceAccountName = \"service-account-name\";\u00a0 \u00a0 String serviceAccountKeyName = \"service-account-key-name\";\u00a0 \u00a0 enableServiceAccountKey(projectId, serviceAccountName, serviceAccountKeyName);\u00a0 }\u00a0 // Enables a service account key.\u00a0 public static void enableServiceAccountKey(String projectId, String serviceAccountName,\u00a0 \u00a0 \u00a0 String serviceAccountKeyName) {\u00a0 \u00a0 // Initialize the IAM service.\u00a0 \u00a0 Iam service = null;\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 service = initService();\u00a0 \u00a0 } catch (IOException | GeneralSecurityException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Unable to initialize service: \\n\" + e);\u00a0 \u00a0 \u00a0 return;\u00a0 \u00a0 }\u00a0 \u00a0 // Construct the service account email.\u00a0 \u00a0 // You can modify the \".iam.gserviceaccount.com\" to match the service account name in which\u00a0 \u00a0 // you want to enable the key.\u00a0 \u00a0 // See, https://cloud.google.com/iam/docs/creating-managing-service-account-keys?hl=en#enabling\u00a0 \u00a0 String serviceAccountEmail = serviceAccountName + \"@\" + projectId + \".iam.gserviceaccount.com\";\u00a0 \u00a0 try {\u00a0 \u00a0 \u00a0 EnableServiceAccountKeyRequest\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 enableServiceAccountKeyRequest = new EnableServiceAccountKeyRequest();\u00a0 \u00a0 \u00a0 // Use the IAM service to enable the service account key.\u00a0 \u00a0 \u00a0 service\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .projects()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .serviceAccounts()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .keys()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .enable(String\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .format(\"projects/%s/serviceAccounts/%s/keys/%s\", projectId, serviceAccountEmail,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 serviceAccountKeyName), enableServiceAccountKeyRequest)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .execute();\u00a0 \u00a0 \u00a0 System.out.println(\"Enabled service account key: \" + serviceAccountKeyName);\u00a0 \u00a0 } catch (IOException e) {\u00a0 \u00a0 \u00a0 System.out.println(\"Failed to enable service account key: \\n\" + e);\u00a0 \u00a0 }\u00a0 }\u00a0 private static Iam initService() throws GeneralSecurityException, IOException {\u00a0 \u00a0 /* Use the Application Default Credentials strategy for authentication. For more info, see:\u00a0 \u00a0 \u00a0https://cloud.google.com/docs/authentication/production#finding_credentials_automatically */\u00a0 \u00a0 GoogleCredentials credential =\u00a0 \u00a0 \u00a0 \u00a0 GoogleCredentials.getApplicationDefault()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\u00a0 \u00a0 // Initialize the IAM service, which can be used to send requests to the IAM API.\u00a0 \u00a0 return new Iam.Builder(\u00a0 \u00a0 \u00a0 \u00a0 GoogleNetHttpTransport.newTrustedTransport(),\u00a0 \u00a0 \u00a0 \u00a0 GsonFactory.getDefaultInstance(),\u00a0 \u00a0 \u00a0 \u00a0 new HttpCredentialsAdapter(credential))\u00a0 \u00a0 \u00a0 \u00a0 .setApplicationName(\"service-accounts\")\u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 }}\n```The ` [projects.serviceAccounts.keys.enable](/iam/docs/reference/rest/v1/projects.serviceAccounts.keys/enable) ` method enables a service account key.\nBefore using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The name of the service account whose key you want to enable.\n- ``: The ID of the key that you want to enable. To find the key's ID, [list all keys for the service account](#list-keys) , identify the key that you want  to enable, and then copy its ID from the end of the`name`field. The key's ID is  everything after`keys/`.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/SA_NAME@PROJECT_ID.iam.gserviceaccount.com/keys/KEY_ID:enable\n```\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n}\n```\n## What's next\n- Learn how to [delete service account keys](/iam/docs/keys-create-delete#deleting) .\n- Learn how to [list and get service account keys](/iam/docs/keys-list-get) .\n- Learn how to use service account keys to [authenticate as a serviceaccount](/docs/authentication/provide-credentials-adc#wlif-key) .\n- Learn about [alternatives to service account keys for authentication](/docs/authentication#auth-decision-tree) .\n- Understand the [best practices for managing service accountkeys](/iam/docs/best-practices-for-managing-service-account-keys) .", "guide": "IAM"}