{"title": "IAM - Configure workload identity federation with deployment pipelines", "url": "https://cloud.google.com/iam/docs/workload-identity-federation-with-deployment-pipelines", "abstract": "# IAM - Configure workload identity federation with deployment pipelines\nThis guide describes how to use workload identity federation to let deployment pipelines authenticate to Google Cloud.\nDepending on the CI/CD system you're using, your deployment pipelines might have access to ambient, environment-specific credentials. For example:\n- GitHub Actions workflows can obtain a [GitHub OIDC token](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect) that uniquely identifies the workflow and its repository.\n- GitLab SaaS lets CI/CD jobs access an [ID token](https://docs.gitlab.com/ee/ci/secrets/id_token_authentication.html) that uniquely identifies the job and its project, environment, and repository.\n- Terraform Cloud can provide an [OIDC token](https://discuss.hashicorp.com/t/tfe-release-v202208-1-647/43164#httpswwwterraformioenterprisereleases2022v202208-1featuresfeatures-2) to your your Terraform configuration that uniquely identifies the workspace and environment.\nYou can configure your deployment pipelines to use these credentials to authenticate to Google Cloud by using workload identity federation. This approach eliminates the maintenance and security burden associated with [service account keys](/iam/docs/service-account-creds#key-types) .\n", "content": "## Before you begin\n### Set up authentication\nSelect the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.You can use the gcloud CLI samples on this page from  either of the following development environments:- **Cloud Shell** : To use an online terminal with the   gcloud CLI already set up, activate Cloud Shell.At the bottom of this page, a Cloud Shell session starts    and displays a command-line prompt. It can take a few seconds for    the session to initialize.\n- **Local shell** : To use the gcloud CLI in a local   development environment, [install](/sdk/docs/install) and [initialize](/sdk/docs/initializing) the gcloud CLI.\nTo use the Python samples on this page from a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.- [Install](/sdk/docs/install) the Google Cloud CLI.\n- To [initialize](/sdk/docs/initializing) the gcloud CLI, run the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```\nFor more information, see [ Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) in the Google Cloud authentication documentation.### Required roles\nTo get the permissions that you need to configure workload identity federation,   ask your administrator to grant you the [Workload Identity Pool Admin ](https://cloud.google.com/iam/docs/understanding-roles#iam.workloadIdentityPoolAdmin) ( `roles/iam.workloadIdentityPoolAdmin` ) IAM role on the project.    For more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .You might also be able to get  the required permissions through [custom  roles](/iam/docs/creating-custom-roles) or other [predefined  roles](/iam/docs/understanding-roles) .Alternatively, the IAM Owner ( `roles/owner` ) basic role also includes permissions to configure identity federation. You should not grant basic roles in a production environment, but you can grant them in a development or test environment.\n## Prepare your external IdP\nYou don't need to make any configuration changes in your GitHub account.\nAfter you [configure](#configure) a workload identity pool to trust your GitHub repository, you can let workflows in that repository use their GitHub OIDC token to obtain short-lived Google Cloud credentials.\nYou don't need to make any configuration changes in your GitLab account.\nAfter you [configure](#configure) a workload identity pool to trust your GitLab group, you can enable workload identity federation for individual CI/CD jobs.\nYou don't need to make any configuration changes in your Terraform Cloud account.\nAfter you [configure](#configure) a workload identity pool to trust Terraform Cloud, you can enable workload identity federation for individual workspaces.\n## Configure workload identity federation\nYou must perform these steps for each GitHub organization, GitLab group, or Terraform Cloud organization.\nTo start configuring workload identity federation, do the following:\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- It's best to\n- [use a dedicated project to manage workload identity pools and providers](/iam/docs/best-practices-for-using-workload-identity-federation#dedicated-project) \n- .\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the IAM, Resource Manager, Service Account Credentials, and Security Token Service APIs.\n- [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com,cloudresourcemanager.googleapis.com,iamcredentials.googleapis.com,sts.googleapis.com&redirect=https://console.cloud.google.com) \n### Define an attribute mapping\nThe environment-specific credentials of your deployment pipeline can contain multiple attributes, and you must decide which attribute you want to use as subject identifier ( `google.subject` ) in Google Cloud.\nOptionally, you can [map additional attributes](/iam/docs/workload-identity-federation#mapping) . You can then refer to these additional attributes when you grant access to resources.\nYour attribute mappings can use any of the [claims in the GitHub ActionsOIDC token](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token) . These token claim keys and their values are controlled by GitHub. At minimum, you should map `google.subject` to `assertion.sub` , which corresponds to the GitHub Actions OIDC token subject:\n```\ngoogle.subject=assertion.sub\n```\nThe value for the GitHub Actions OIDC token subject [can vary depending on thesourceevent](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#example-subject-claims) . Other claim attributes can include:- `repository` : Contains the owner and repository name\u2013for example `\"google/guava\"` .\n- `repository_id` : Contains the unique repository ID\u2013for example `\"20300177\"` .\n- `repository_owner` : Contains the owner, which can be a username or the name of a GitHub organization\u2013for example `\"google\"` .\n- `repository_owner_id` : Contains the unique owner ID\u2013for example `\"1342004\"` .\nThis list above is a subset of the possible claims\u2013see the GitHub documentation on [exampleclaims](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token) for a complete list. Be sure to map any claims that you plan to use as attribute conditions or as part of a future `principalSet` condition.\n **Important:** Using \"name\" fields like `repository` and `repository_owner` increases the chances of [cybersquatting](https://en.wikipedia.org/wiki/Cybersquatting) and [typosquatting](https://en.wikipedia.org/wiki/Typosquatting) attacks. If you delete your GitHub repository or GitHub organization, someone may be able to claim that same and establish an identity. To protect against this situation, use the numeric `*_id` fields instead, which are unique and can't be reused.\nYour attribute mappings can use the [claims embedded in the GitLab ID token](https://docs.gitlab.com/ee/ci/secrets/id_token_authentication.html#token-payload) as source attributes, including the following:- `sub`: the project name and Git reference\u2014for example,`project_path:groupname/projectname:ref_type:branch:ref:main`.\n- `namespace_id`: the unique group ID.\n- `project_id`: the unique project ID.\n- `user_id`: the unique user ID.\n- `environment`: the environment that the job applies to.\n- `ref_path`: the Git reference\u2014for example`refs/heads/main`.\nThe following attribute mapping sets `google.subject` to the `sub` claim from the GitLab ID token. Because the `sub` claim contains both the project name and Git reference, this mapping lets you control access by repository and branch:\n```\ngoogle.subject=assertion.sub\n```\nControlling access by repository and branch can be useful if certain branches (for example, `main` ) need different access to resources than other branches (for example, feature branches).\nIn some cases, it might be sufficient to only differentiate access by project or group. The following mapping therefore includes two additional attributes that contain the GitLab `project_id` and `namespace_id` :\n```\ngoogle.subject=assertion.sub\nattribute.project_id=assertion.project_id\nattribute.namespace_id=assertion.namespace_id\n```\nYour attribute mappings can use the claims embedded in the Terraform Cloud OIDC token, including the following- `terraform_organization_id`: Contains the unique ID of the organization\u2014for example`org-xxxxxxxxxxxxxxxx`.\n- `terraform_workspace_id`: Contains the [unique ID of the workspace](https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings#id) \u2014for example`ws-xxxxxxxxxxxxxxxx`.\n- `terraform_workspace_name`: Contains the [display name of the workspace](https://developer.hashicorp.com/terraform/cloud-docs/workspaces/settings#name) .\n- `sub`: Contains the display name of the organization, workspace, and phase\u2014for example`organization:example-org:workspace:example-workspace:run_phase:apply`.\nThe following attribute mapping sets `google.subject` to the `terraform_workspace_id` claim from the Terraform Cloud OIDC token:\n```\ngoogle.subject=assertion.terraform_workspace_id\n```\nThis mapping lets you control access to Google Cloud resources by workspace.\n### Define an attribute condition\n[Attribute conditions](/iam/docs/workload-identity-federation#conditions) are CEL expressions that can check assertion attributes and target attributes. If the attribute condition evaluates to `true` for a given credential, the credential is accepted. Otherwise, the credential is rejected. You must have an attribute mapping for all attribute condition fields.\n**Warning:** GitHub, GitLab SaaS, and Terraform Cloud use a single issuer URL across all organizations and some of the claims embedded in OIDC tokens might not be unique to your organization. To help protect against [spoofing threats](/iam/docs/best-practices-for-using-workload-identity-federation#protecting_against_spoofing_threats) , you must use an attribute condition that restricts access to tokens issued by your GitHub organization, GitLab group, or Terraform Cloud organization.\nUse the following attribute condition to restrict access to tokens issued by your GitHub organization:\n```\nassertion.repository_owner=='ORGANIZATION'\n```\nReplace `` with the name of your GitHub organization.\nOptionally, extend the attribute condition to restrict access to a subset of workflows or branches. For example, the following condition limits access to workflows that use the Git branch `main` :\n```\nassertion.repository_owner=='ORGANIZATION' && assertion.ref=='refs/heads/main'\n```\nUse the following attribute condition to restrict access to tokens issued by your GitLab [group](https://docs.gitlab.com/ee/user/namespace/) \n```\nassertion.namespace_id=='GROUP_ID'\n```\nReplace `` with the group ID that's shown on your GitLab group's home page.\nOptionally, extend the attribute condition to restrict access to a subset of projects, branches, or environments. For example, the following condition limits access to jobs that use the environment `production` :\n```\nassertion.namespace_id=='GROUP_ID' && assertion.environment=='production'\n```\nUse the following attribute condition to restrict access to tokens issued by your Terraform Cloud organization:\n```\nassertion.terraform_organization_id=='ORGANIZATION_ID'\n```\nReplace `` with the unique ID of your organization\u2014for example `org-xxxxxxxxxxxxxxxx` . Optionally, extend the attribute condition to restrict access to a subset of workflows or branches. For example, the following attribute condition limits access to a specific workspace:\n```\nassertion.terraform_organization_id=='ORGANIZATION_ID' && terraform_workspace_id=='WORKSPACE_ID'\n```\n### Create the workload identity pool and provider\nYou've now collected all the information you need to create a workload identity pool and provider:\n- In the Google Cloud console, go to the **New workload provider and pool** page. [Go to New workload provider and pool](https://console.cloud.google.com/iam-admin/workload-identity-pools/create) \n- Under **Create an identity pool** , enter the following:- **Name** : Name for the pool. The name is also used as the pool ID. You can't change the pool ID later.\n- **Description** : Text that describes the purpose of the pool.\n- Click **Continue** .\n- Configure provider settings:\n- **Select a provider** : **OpenID Connect (OIDC)** .\n- **Provider name** : Name for the provider. The name is also used as the provider ID. You cannot change the provider ID later.\n- **Issuer URL** :`https://token.actions.githubusercontent.com/`\n- **Audiences** : **Default audience** \n- **Select a provider** : **OpenID Connect (OIDC)** .\n- **Provider name** : Name for the provider. The name is also used as the provider ID. You cannot change the provider ID later.\n- **Issuer URL** :`https://gitlab.com`\n- **Audiences** : **Default audience** \n- **Select a provider** : **OpenID Connect (OIDC)** .\n- **Provider name** : Name for the provider. The name is also used as the provider ID. You cannot change the provider ID later.\n- **Issuer URL** :`https://app.terraform.io`\n- **Audiences** : **Default audience** - Click **Continue** .\n- Under **Configure provider attributes** , add the [attribute mappings that you've identified previously](#mappings-and-conditions) .\n- Under **Attribute conditions** , enter the [attribute condition that you've identified previously](#mappings-and-conditions) .\n- Click **Save** to create the workload identity pool and provider.\n- Create a new workload identity pool:```\ngcloud iam workload-identity-pools create POOL_ID \\\n --location=\"global\" \\\n --description=\"DESCRIPTION\" \\\n --display-name=\"DISPLAY_NAME\"\n```Replace the following values:- ``: the unique ID for the pool\n- ``: the name of the pool\n- ``: the description of the pool. This description appears when granting access to pool identities\n- Add a workload identity pool provider:\n```\ngcloud iam workload-identity-pools providers create-oidc PROVIDER_ID \\\n --location=\"global\" \\\n --workload-identity-pool=\"POOL_ID\" \\\n --issuer-uri=\"https://token.actions.githubusercontent.com/\" \\\n --attribute-mapping=\"MAPPINGS\" \\\n --attribute-condition=\"CONDITIONS\"\n```\nReplace the following values:- ``: the unique ID for the provider\n- ``: the ID of the pool\n- ``: a comma-separated list of [attribute mappings that you've identified previously](#mappings-and-conditions) \n- ``: the [attribute condition that you identified previously](#mappings-and-conditions) \n```\ngcloud iam workload-identity-pools providers create-oidc PROVIDER_ID \\\n --location=\"global\" \\\n --workload-identity-pool=\"POOL_ID\" \\\n --issuer-uri=\"https://gitlab.com\" \\\n --attribute-mapping=\"MAPPINGS\" \\\n --attribute-condition=\"CONDITIONS\"\n```\nReplace the following values:- ``: the unique ID for the provider\n- ``: the ID of the pool\n- ``: a comma-separated list of [attribute mappings that you've identified previously](#mappings-and-conditions) \n- ``: the [attribute condition that you identified previously](#mappings-and-conditions) \n```\ngcloud iam workload-identity-pools providers create-oidc PROVIDER_ID \\\n --location=\"global\" \\\n --workload-identity-pool=\"POOL_ID\" \\\n --issuer-uri=\"https://app.terraform.io\" \\\n --attribute-mapping=\"MAPPINGS\" \\\n --attribute-condition=\"CONDITIONS\"\n```\nReplace the following values:- ``: the unique ID for the provider.\n- ``: the ID of the pool.\n- ``: a comma-separated list of [attribute mappings that you've identified previously](#mappings-and-conditions) .\n- ``: the [attribute condition that you've identified previously](#mappings-and-conditions) .\n**Note:** The prefix `gcp-` is reserved and can't be used in a pool or provider ID.\n### Update attribute condition on a workload identity provider\nThis section describes how you can update the attribute condition on an existing workload identity pool provider to restrict access to tokens issued by your GitHub organization, GitLab group, or Terraform Cloud organization.\nTo find the recommended attribute condition for your pipeline, see [Define an attribute condition](#conditions) .\n- In the Google Cloud console, go to the **Workload Identity Pools** page. [Go to Workload Identity Pools](https://console.cloud.google.com/iam-admin/workload-identity-pools) \n- Find the workload identity pool that contains the provider, and then click the arrow_right **Expand node** icon for the pool.\n- Find the workload identity pool provider that you want to edit and click edit **Edit** .\n- In **Attribute conditions** , enter the [attribute condition that you've identified previously](#mappings-and-conditions) .\n- To update the workload identity pool and provider, click **Save** .\nTo update the workload identity pool provider, run the following command:\n```\ngcloud iam workload-identity-pools providers update-oidc PROVIDER_ID \\\\\n --location=\"global\" \\\\\n --workload-identity-pool=\"POOL_ID\" \\\\\n --attribute-condition=\"CONDITIONS\"\n```\nReplace the following values:- ``: the unique ID for the provider\n- ``: the ID of the pool\n- ``: the [attribute condition that you've identified previously](#mappings-and-conditions) ## Authenticate a deployment pipeline\nYou must perform these steps for each GitHub Actions workflow or Terraform Cloud workspace.\n### Create a service account for the deployment pipeline\n- Enable the IAM, Security Token Service, and Service Account Credentials APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com,sts.googleapis.com,iamcredentials.googleapis.com&redirect=https://console.cloud.google.com) \n- [Create a service account](/iam/docs/creating-managing-service-accounts#creating) that represents the workload. We recommend that you [use a dedicated service account for each deployment pipeline](/iam/docs/best-practices-for-using-service-accounts-in-deployment-pipelines#use-dedicated-service-account) .The service account doesn't need to be in the same project as the workload identity pool.\n- [Grant the service account access](/iam/docs/granting-changing-revoking-access) to resources that you want external identities to access.\n### Allow the deployment pipeline to impersonate the service account\nTo allow external identities to impersonate a service account, you grant them the Workload Identity User role ( `roles/iam.workloadIdentityUser` ) on the service account. You can grant the role to a specific external identity, or to multiple external identities:\n- For a specific external identity, write an attribute condition that checks the`google.subject`attribute.\n- For a group of external identities, write an attribute condition that checks the`google.groups`attribute or a custom attribute`attribute.` ``.\n**Note:** You can only check attributes that you've configured in the [attribute mapping](#mappings-and-conditions) in the configuration for your workload identity pool provider.\nTo allow external identities to impersonate a service account using the Google Cloud console, do the following:- In the Google Cloud console, go to the **Workload Identity Pools** page. [Go to Workload Identity Pools](https://console.cloud.google.com/iam-admin/workload-identity-pools) \n- Find the workload identity pool you want to update and select it.\n- To grant access to the selected workload identity pool, click add_box **Grant access** .\n- In the **Service account** list, select the service account for the external identities to impersonate.\n- To choose which identities in the pool can impersonate the service account, perform one of the following actions:- To allow only specific identities of the workload identity pool to impersonate the service account, select **Only identities matching the filter** .In the **Attribute name** list, select the attribute that you want to filter on.In the **Attribute value** field, enter the expected value of the attribute; for example, if you use an [attribute mapping](#mappings-and-conditions) `google.subject=assertion.sub` , set **Attribute** name to `subject` and **Attribute value** to the value of the `sub` claim in tokens issued by your external identity provider.\n- To save the configuration, click **Save** and then **Dismiss** .\nTo allow external identities to impersonate a service account using gcloud CLI, do the following:- To obtain the project number of your current project, execute the following command:```\ngcloud projects describe $(gcloud config get-value core/project) --format=value\\(projectNumber\\)\n```\n- To grant the Workload Identity User role ( `roles/iam.workloadIdentityUser` ) to external identities that meet a certain criteria:\n```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_EMAIL \\\n --role=roles/iam.workloadIdentityUser \\\n --member=\"principal://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/subject/SUBJECT\"\n```\n```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_EMAIL \\\n --role=roles/iam.workloadIdentityUser \\\n --member=\"principalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/group/GROUP\"\n```\n```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_EMAIL \\\n --role=roles/iam.workloadIdentityUser \\\n --member=\"principalSet://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/attribute.ATTRIBUTE_NAME/ATTRIBUTE_VALUE\"\n```\nReplace the following:- ``: the email address of the service account\n- ``: the [project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects) of the project that contains the workload identity pool\n- ``: the pool ID of the workload identity pool\n- ``: the expected value for the attribute that [you've mapped](#mappings-and-conditions) to`google.subject`\n- ``: the expected value for the attribute that [you've mapped](#mappings-and-conditions) to`google.groups`\n- ``: the name of a custom attribute in [your attribute mapping](#mappings-and-conditions) \n **Note:** You must use the project number in the member identifier. Using the project ID is not supported.\n### Configure the deployment pipeline\nYou're now ready use workload identity federation in your deployment pipeline.\nThe [google-github-actions/auth](https://github.com/google-github-actions/auth) action lets you automatically generate a credential configuration file during workflow execution. Client libraries and tools such as `terraform` can then use this credential configuration file to automatically obtain Google credentials.\nEdit your GitHub Actions YAML file and add the following:- Allow the job to fetch a GitHub ID token by adding the following configuration:```\npermissions:\n id-token: write\n contents: read\n```\n- Add a step to create a credentials configuration file:```\n- id: 'auth'\n name: 'Authenticate to Google Cloud'\n uses: 'google-github-actions/auth@v1'\n with:\n create_credentials_file: true\n workload_identity_provider: 'projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID'\n service_account: 'SERVICE_ACCOUNT_EMAIL'\n```\nReplace the following values:- ``: the project number of the project that contains the workload identity pool\n- ``: the ID of the workload identity pool\n- ``: the ID of the workload identity pool provider\n- ``: the email address of the service account\nExample:\n```\njobs:\n build:\n # Allow the job to fetch a GitHub ID token\n permissions:\n  id-token: write\n  contents: read\n runs-on: ubuntu-latest\n steps:\n  - uses: actions/checkout@v3\n  - id: 'auth'\n  name: 'Authenticate to Google Cloud'\n  uses: 'google-github-actions/auth@v1'\n  with:\n   create_credentials_file: true\n   workload_identity_provider: 'projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID'\n   service_account: 'SERVICE_ACCOUNT_EMAIL'\n```\nFor further details on using the `google-github-actions/auth` action, see [Setting up Workload Identity Federation](https://github.com/google-github-actions/auth#setup) .\nEdit your `.gitlab-ci.yml` file and add the following to the job configuration:\n```\njob:\n variables:\n WORKLOAD_IDENTITY_PROJECT_NUMBER: PROJECT_NUMBER\n WORKLOAD_IDENTITY_POOL: POOL_ID\n WORKLOAD_IDENTITY_PROVIDER: PROVIDER_ID\n SERVICE_ACCOUNT: SERVICE_ACCOUNT_EMAIL\n GOOGLE_APPLICATION_CREDENTIALS: $CI_BUILDS_DIR/.workload_identity.wlconfig\n id_tokens:\n WORKLOAD_IDENTITY_TOKEN:\n  aud: https://iam.googleapis.com/projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID\n script:\n - |  echo $WORKLOAD_IDENTITY_TOKEN > $CI_BUILDS_DIR/.workload_identity.jwt\n  cat << EOF > $GOOGLE_APPLICATION_CREDENTIALS\n  {\n  \"type\": \"external_account\",\n  \"audience\": \"//iam.googleapis.com/projects/$WORKLOAD_IDENTITY_PROJECT_NUMBER/locations/global/workloadIdentityPools/$WORKLOAD_IDENTITY_POOL/providers/$WORKLOAD_IDENTITY_PROVIDER\",\n  \"subject_token_type\": \"urn:ietf:params:oauth:token-type:jwt\",\n  \"token_url\": \"https://sts.googleapis.com/v1/token\",\n  \"credential_source\": {\n   \"file\": \"$CI_BUILDS_DIR/.workload_identity.jwt\"\n  },\n  \"service_account_impersonation_url\": \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/$SERVICE_ACCOUNT:generateAccessToken\"\n  }\n  EOF\n```\nReplace the following values:- ``: the project number of the project that contains the workload identity pool\n- ``: the ID of the workload identity pool\n- ``: the ID of the workload identity pool provider\n- ``: the email address of the service account\nThe configuration does the following:- Instruct GitLab to issue an ID token, and make it available in the environment variable named`WORKLOAD_IDENTITY_TOKEN`. The ID token uses your workload identity pool provider as audience.\n- Save the ID token to a temporary file named`.workload_identity.jwt`.\n- Create a credential configuration file that instructs client libraries to read the ID token from`.workload_identity.jwt`and use it to impersonate a service account.\n- Set the environment variable`GOOGLE_APPLICATION_CREDENTIALS`to point to the credential configuration file.\nConfigure your Terraform Cloud workspace so that it uses workload identity federation to authenticate to Google Cloud:- In Terraform Cloud, open your workspace and go to **Variables** .\n- Add the following variables:| Variable category | Key        | Value                         |\n|:---------------------|:----------------------------------|:--------------------------------------------------------------------------------------------------------|\n| Environment variable | TFC_GCP_PROVIDER_AUTH    | true                         |\n| Environment variable | TFC_GCP_RUN_SERVICE_ACCOUNT_EMAIL | The email address of the service account, for example terraform@my-project-123.iam.gserviceaccount.com |\n| Environment variable | TFC_GCP_PROJECT_NUMBER   | The project number of the project that contains the workload identity pool        |\n| Environment variable | TFC_GCP_WORKLOAD_POOL_ID   | The ID of the workload identity pool                 |\n| Environment variable | TFC_GCP_WORKLOAD_PROVIDER_ID  | The ID of the workload identity pool provider               |Optionally, you can add additional environment variables to let Terrform Cloud use different service accounts for the `plan` and `apply` phases. For more information see [Optional Environment Variables](https://developer.hashicorp.com/terraform/cloud-docs/workspaces/dynamic-provider-credentials/gcp-configuration#optional-environment-variables) .\n- In the list of variables, verify that **Category** is set to `env` for the five variables that you added in the previous step.\n- Verify that your Terraform configuration uses version `4.48.0` or newer of the Google Cloud provider, and update it if necessary, as follows:```\nterraform {\n required_providers {\n google = {\n  source = \"hashicorp/google\"\n  version = \"~> 4.48.0\"\n }\n }\n}\n```\n- Submit the changes to your source code repository.## What's next\n- Read more about [workload identity federation](/iam/docs/workload-identity-federation) .\n- Learn about [best practices for using workload identity federation in deployment pipelines](/iam/docs/best-practices-for-using-service-accounts-in-deployment-pipelines) .\n- See how you can [manage workload identity pools and providers](/iam/docs/manage-workload-identity-pools-providers) .", "guide": "IAM"}