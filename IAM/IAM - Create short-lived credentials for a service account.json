{"title": "IAM - Create short-lived credentials for a service account", "url": "https://cloud.google.com/iam/docs/create-short-lived-credentials-direct", "abstract": "# IAM - Create short-lived credentials for a service account\nThis page explains how to create short-lived credentials for a service account, which you can use to [impersonate the service account](/iam/docs/service-account-impersonation) . Depending on the type of token you create, the short-lived token provides the identity (for ID tokens) or permissions (for access tokens) associated with the service account.\nIf your system architecture requires you to use a series of token generation calls, you can [use a delegation chain consisting of several serviceaccounts](/iam/docs/create-short-lived-credentials-delegated) . In most cases, the direct method, as explained on this page, is sufficient.\n", "content": "## Before you begin- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the IAM and Service Account Credentials APIs:```\ngcloud services enable iam.googleapis.com iamcredentials.googleapis.com\n```\n- Understand [IAM service accounts](/iam/docs/service-accounts) .\n- Understand [service account impersonation](/iam/docs/service-account-impersonation) .\n- Understand what kind of token you need, and use the appropriate steps provided in the sections below:- [OAuth 2.0 access tokens](#sa-credentials-oauth) \n- [OpenID Connect (OIDC) ID tokens](#sa-credentials-oidc) \n- [Self-signed JSON Web Tokens (JWTs)](#sa-credentials-jwt) \n- [Self-signed binary blobs](#sa-credentials-blob) \n## Create a short-lived access token\nAccess tokens are accepted for authentication by most Google APIs. When you generate an access token by using service account impersonation, the access token comes without a refresh token, which means that when the token expires, you must repeat the impersonation process to generate a new one.\nFor more information, see [Access tokens](/docs/authentication/token-types#access) .\nTo create a short-lived access token, complete these tasks:\n- [Provide the required permissions to the caller](#permissions-access) .\n- [Generate the access token](#create-access) .\n### Provide required permissions\nA [direct request](#sa-credentials-direct) involves two identities: the caller that requests the credential, and the service account for which the credential is created. How you set up the permissions depends on whether the caller is authenticating as a service account or as a Google Account.\nIf you want to run a REST or gcloud CLI command on this page in a local development environment, the caller can be represented by user credentials. For automated workloads, such as an application running on Compute Engine, the caller must be represented by a service account.\nWhen the calling application uses a service account as its identity, the following principals are involved:- Caller service account ( `` )This service account represents the calling application,  which issues the request for the short-lived credentials.\n- Privilege-bearing service account ( `` )This service account is granted the IAM roles needed for  the short-lived token. This is the service account for which the  short-lived token is created.\n **Note:** In most cases, if you're using short-lived credentials to authenticate the caller service account, the caller service account and the privilege-bearing service account can't be the same. For more information, see [Self-impersonation](/iam/docs/service-account-creds#self-impersonation) .\nTo give `` permissions to create short-lived credentials for `` , you grant `` the Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ) on `` .\nGrant the required role on `` :\n- In the Google Cloud console, go to the **Service Accounts** page. [   Go to Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the email address of the privilege-bearing service account,``.\n- Click the **Permissions** tab.\n- Under **Principals with access to this service account** , clickperson_add **Grant Access** .\n- Enter the email address of the caller service account, `` .For example, `demo@my-project.iam.gserviceaccount.com` .\n- Select the Service Account Token Creator role   (`roles/iam.serviceAccountTokenCreator`).\n- Click **Save** to grant the role to the service account.\nThe ` [gcloud iam service-accounts add-iam-policy-binding](/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) ` command grants a role on a service account.\nBefore using any of the command data below, make the following replacements:- ``: The email address of the privilege-bearing  service account for which the token is generated.\n- ``: The email address of the  service account representing the application that is requesting the short-lived token.\nExecute the  following  command:\nYou should receive a response similar to the following:\n```\nUpdated IAM policy for serviceAccount [PRIV_SA].\n{\n \"bindings\": [ {\n  \"members\": [  \"serviceAccount:CALLER_SA\"\n  ],\n  \"role\": \"roles/iam.serviceAccountTokenCreator\"\n }\n ],\n \"etag\": \"BwXhCB4eyjY=\",\n \"version\": 1\n}\n```\n- Read the allow policy for `` :The ` [serviceAccounts.getIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/getIamPolicy) ` method gets a service account's allow policy.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account for  which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/serviceAccountAdmin\",\n  \"members\": [  \"user:admin@example.com\"\n  ]\n }\n ]\n}\n```\nIf you have not granted any roles on the service account, the response   contains only an `etag` value. Include that `etag` value in the next step.\n- Modify the allow policy to grant `` the   Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ).For example, to modify the sample response from the previous step,   add the following:```\n\u00a0 {\u00a0 \u00a0 \"version\": 1,\u00a0 \u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \u00a0 \"bindings\": [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"serviceAccount:CALLER_SA\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 }\n```\n- Write the updated allow policy:The ` [serviceAccounts.setIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/setIamPolicy) ` method sets an updated allow policy for the service account.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account  for which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\n- `` : A JSON representation of the policy that you want to set. For more information about the format of a policy, see the [Policy reference](/iam/docs/reference/rest/v1/Policy) .For example, to set the allow policy shown in the previous step, replace `` with the following, where `` is  the service account creating the short-lived token:```\n{\u00a0 \"version\": 1,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"serviceAccount:CALLER_SA\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA\n```\nRequest JSON body:\n```\n{\n \"policy\": POLICY\n}\n```\nTo send your request, expand one of these options:The response contains the updated allow policy. **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\nWhen you want to use the Google Cloud CLI to generate short-lived tokens, or you want to generate short-lived tokens from a local development environment, you can use a user account to generate the tokens. Often, you can use your own Google Account.\nWhen you use a user account to generate short-lived tokens, the following identities are involved:- Caller Google Account ( `` )This user account is used to generate short-lived credentials for the  privilege-bearing service account.\n- Privilege-bearing service account ( `` )This service account is granted the IAM roles needed for  the short-lived token. This is the service account for which the  short-lived token is created.\nTo enable `` to create short-lived credentials for `` , you grant `` the Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ) on `` .\nGrant the required role on `` :\n- In the Google Cloud console, go to the **Service Accounts** page. [   Go to Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the email address of the privilege-bearing service account,``.\n- Click the **Permissions** tab.\n- Under **Principals with access to this service account** , clickperson_add **Grant Access** .\n- Enter the email address of the caller Google Account, `` .For example, `username@google.com` .\n- Select the Service Account Token Creator role   (`roles/iam.serviceAccountTokenCreator`).\n- Click **Save** to grant the role to the user account.\nThe ` [gcloud iam service-accounts add-iam-policy-binding](/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) ` command grants a role on a service account.\nBefore using any of the command data below, make the following replacements:- ``: The email address of the privilege-bearing  service account for which the token is generated.\n- ``: The email address of the  user account being used to request the short-lived token.\nExecute the  following  command:\nYou should receive a response similar to the following:\n```\nUpdated IAM policy for serviceAccount [PRIV_SA].\n{\n \"bindings\": [ {\n  \"members\": [  \"user:CALLER_ACCOUNT\"\n  ],\n  \"role\": \"roles/iam.serviceAccountTokenCreator\"\n }\n ],\n \"etag\": \"BwX1ZbefjXU=\",\n \"version\": 1\n}\n```\n- Read the allow policy for `` :The ` [serviceAccounts.getIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/getIamPolicy) ` method gets a service account's allow policy.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account for  which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/serviceAccountAdmin\",\n  \"members\": [  \"user:admin@example.com\"\n  ]\n }\n ]\n}\n```\nIf you have not granted any roles on the service account, the response   contains only an `etag` value. Include that `etag` value in the next step.\n- Modify the allow policy to grant `` the Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ).For example, to modify the sample response from the previous step,   add the following:```\n{\u00a0 \"version\": 1,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:CALLER_ACCOUNT\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\n- Write the updated allow policy:The ` [serviceAccounts.setIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/setIamPolicy) ` method sets an updated allow policy for the service account.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account  for which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\n- `` : A JSON representation of the policy that you want to set. For more information about the format of a policy, see the [Policy reference](/iam/docs/reference/rest/v1/Policy) .For example, to set the allow policy shown in the previous step, replace `` with the following, where `` is the user account creating the short-lived token:```\n{\u00a0 \"version\": 1,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:CALLER_ACCOUNT\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA\n```\nRequest JSON body:\n```\n{\n \"policy\": POLICY\n}\n```\nTo send your request, expand one of these options:The response contains the updated allow policy. **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\n### Generate the access token\nYou can generate an OAuth 2.0 access token by using the gcloud CLI, the REST API, or the Cloud Client Libraries and Google API Client Libraries.\nIf you use the REST API, and your system is configured to allow extended token lifetimes, you can create a token with a lifetime longer than the default. The Google Cloud CLI does not support setting a lifetime for the token.\nThe samples below are designed to be used in a local development environment; the caller must be represented by a user account, rather than a service account.\nGenerate an OAuth 2.0 access token for a service account:\n- Log in to the Google Cloud CLI as the caller Google Account.```\ngcloud auth login CALLER_ACCOUNT\n```\n- Generate a token for the service account.The ` [gcloud auth print-access-token](/sdk/gcloud/reference/auth/print-access-token) ` command generates an OAuth 2.0 access token for a service account.Before using any of the command data below, make the following replacements:- ``: The email address of the privilege-bearing service account for  which the short-lived token is created.\n- Execute the  following  command:\n- You should receive a response similar to the following:\n```\nWARNING: This command is using service account impersonation. All API calls will be executed as\n[my-sa@my-project.iam.gserviceaccount.com].\nya29.c.b0AXv0zTPnzTnDV8F8Aj5Fgy46Yf2v_v8eZIoKq7xGpfbpXuy23aQ1693m3gAuE8AZga7w6kdagN7a9bfdDYbdeoGY0CMHOClsCwIdutL7k_RFC672lOCbUgF5hS8Iu2nCA8hle-11LJXBLmaxFmH08ZTBJLuDrWSNd8cYqGYFunSC1K1qLIPBF18tsa0hxVgKPucI8b1A9L8_MK1JGLGcr0n7-zY77_lmbcdODG3NmIbLOGWOutjJgqSO_YoeCKK2QTUZIp5PG7RkKlXWnmYJA9pEahzNoQrs5sWZctc2bia9af_ITzqqlXC9h1Kj5-me6e8rd734MJvpagqYazRk0gGWpMb03XmMGpgPc_FBp4pnX9rGOzW83SNpcDz8zeFO1Q0Bo3N7CuZougjRce0y8I2_4rtw5ME_nV3wrCWa..................................................................................................................................................................................................................................................................................................\n```The Service Account Credentials API's ` [serviceAccounts.generateAccessToken](/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateAccessToken) ` method generates an OAuth 2.0 access token for a service account.\nBefore using any of the request data, make the following replacements:- ``: The email address of the privilege-bearing service account for which  the short-lived token is created.\n- `` : The amount of time until the access token expires, in  seconds. For example, `300s` .By default, the maximum token lifetime is 1 hour  (3,600 seconds). To extend the maximum lifetime for these tokens to  12 hours (43,200 seconds), [  add the service account to an organization policy](/resource-manager/docs/organization-policy/restricting-service-accounts#setting_a_list_constraint) that includes the `constraints/iam.allowServiceAccountCredentialLifetimeExtension` list constraint.\nHTTP method and URL:\n```\nPOST https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/PRIV_SA:generateAccessToken\n```\nRequest JSON body:\n```\n{\n \"scope\": [ \"https://www.googleapis.com/auth/cloud-platform\"\n ],\n \"lifetime\": \"LIFETIME\"\n}\n```\nTo send your request, expand one of these options:\nIf the `generateAccessToken` request was successful, the response body contains an OAuth 2.0 access token and an expiration time. The `accessToken` can then be used to authenticate a request on behalf of the service account until the `expireTime` has been reached:\n```\n{\n \"accessToken\": \"eyJ0eXAi...NiJ9\",\n \"expireTime\": \"2020-04-07T15:01:23.045123456Z\"\n}\n```\nBefore you can use this sample code, you must set up [Application Default Credentials](/docs/authentication/provide-credentials-adc) for the caller Google Account you previously granted the required role to impersonate the privilege-bearing service account.\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/auth/access_token_from_impersonated_credentials.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"time\"\u00a0 \u00a0 \u00a0 \u00a0 \"golang.org/x/oauth2/google\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/api/impersonate\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/api/option\")// getAccessTokenFromImpersonatedCredentials uses a service account (SA1) to impersonate// another service account (SA2) and obtain OAuth2 token for the impersonated account.// To obtain a token for SA2, SA1 should have the \"roles/iam.serviceAccountTokenCreator\" permission on SA2.func getAccessTokenFromImpersonatedCredentials(w io.Writer, impersonatedServiceAccount, scope string) error {\u00a0 \u00a0 \u00a0 \u00a0 // impersonatedServiceAccount := \"name@project.service.gserviceaccount.com\"\u00a0 \u00a0 \u00a0 \u00a0 // scope := \"https://www.googleapis.com/auth/cloud-platform\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 // Construct the GoogleCredentials object which obtains the default configuration from your\u00a0 \u00a0 \u00a0 \u00a0 // working environment.\u00a0 \u00a0 \u00a0 \u00a0 credentials, err := google.FindDefaultCredentials(ctx, scope)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"failed to generate default credentials: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"failed to generate default credentials: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 ts, err := impersonate.CredentialsTokenSource(ctx, impersonate.CredentialsConfig{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TargetPrincipal: impersonatedServiceAccount,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Scopes: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0[]string{scope},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Lifetime: \u00a0 \u00a0 \u00a0 \u00a0300 * time.Second,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // delegates: The chained list of delegates required to grant the final accessToken.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // For more information, see:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-permissions\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Delegates is NOT USED here.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Delegates: []string{},\u00a0 \u00a0 \u00a0 \u00a0 }, option.WithCredentials(credentials))\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"CredentialsTokenSource error: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"CredentialsTokenSource error: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Get the OAuth2 token.\u00a0 \u00a0 \u00a0 \u00a0 // Once you've obtained the OAuth2 token, you can use it to make an authenticated call.\u00a0 \u00a0 \u00a0 \u00a0 t, err := ts.Token()\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"failed to receive token: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"failed to receive token: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Generated OAuth2 token with length %d.\\n\", len(t.AccessToken))\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```Before you can use this sample code, you must set up [Application Default Credentials](/docs/authentication/provide-credentials-adc) for the caller Google Account you previously granted the required role to impersonate the privilege-bearing service account.\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/auth/src/main/java/com/google/cloud/auth/samples/AccessTokenFromImpersonatedCredentials.java) \n```\npackage com.google.cloud.auth.samples;import com.google.auth.oauth2.GoogleCredentials;import com.google.auth.oauth2.ImpersonatedCredentials;import java.io.IOException;import java.util.Arrays;import java.util.List;public class AccessTokenFromImpersonatedCredentials {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(Developer): Replace the below variables before running the code.\u00a0 \u00a0 // Provide the scopes that you might need to request access to Google APIs,\u00a0 \u00a0 // depending on the level of access you need.\u00a0 \u00a0 // This example uses the cloud-wide scope and uses IAM to narrow the permissions.\u00a0 \u00a0 // https://cloud.google.com/docs/authentication/external/authorization-gcp\u00a0 \u00a0 // For more information, see: https://developers.google.com/identity/protocols/oauth2/scopes\u00a0 \u00a0 String scope = \"https://www.googleapis.com/auth/cloud-platform\";\u00a0 \u00a0 // The name of the privilege-bearing service account for whom the credential is created.\u00a0 \u00a0 String impersonatedServiceAccount = \"name@project.service.gserviceaccount.com\";\u00a0 \u00a0 getAccessToken(impersonatedServiceAccount, scope);\u00a0 }\u00a0 // Use a service account (SA1) to impersonate another service account (SA2) and obtain an ID token\u00a0 // for the impersonated account.\u00a0 // To obtain a token for SA2, SA1 should have the \"roles/iam.serviceAccountTokenCreator\"\u00a0 // permission on SA2.\u00a0 public static void getAccessToken(\u00a0 \u00a0 \u00a0 String impersonatedServiceAccount, String scope) throws IOException {\u00a0 \u00a0 // Construct the GoogleCredentials object which obtains the default configuration from your\u00a0 \u00a0 // working environment.\u00a0 \u00a0 GoogleCredentials googleCredentials = GoogleCredentials.getApplicationDefault();\u00a0 \u00a0 // delegates: The chained list of delegates required to grant the final accessToken.\u00a0 \u00a0 // For more information, see:\u00a0 \u00a0 // https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-permissions\u00a0 \u00a0 // Delegate is NOT USED here.\u00a0 \u00a0 List<String> delegates = null;\u00a0 \u00a0 // Create the impersonated credential.\u00a0 \u00a0 ImpersonatedCredentials impersonatedCredentials =\u00a0 \u00a0 \u00a0 \u00a0 ImpersonatedCredentials.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSourceCredentials(googleCredentials)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTargetPrincipal(impersonatedServiceAccount)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setScopes(Arrays.asList(scope))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setLifetime(300)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDelegates(delegates)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // Get the OAuth2 token.\u00a0 \u00a0 // Once you've obtained the OAuth2 token, you can use it to make an authenticated call.\u00a0 \u00a0 impersonatedCredentials.refresh();\u00a0 \u00a0 String accessToken = impersonatedCredentials.getAccessToken().getTokenValue();\u00a0 \u00a0 System.out.println(\"Generated access token.\");\u00a0 }}\n```Before you can use this sample code, you must set up [Application Default Credentials](/docs/authentication/provide-credentials-adc) for the caller Google Account you previously granted the required role to impersonate the privilege-bearing service account.\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/auth/accessTokenFromImpersonatedCredentials.js) \n```\n/**\u00a0* TODO(developer):\u00a0* \u00a0Uncomment and replace these variables before running the sample.\u00a0*/// const impersonatedServiceAccount = 'name@project.service.gserviceaccount.com';// const scope = 'https://www.googleapis.com/auth/cloud-platform';const {GoogleAuth, Impersonated} = require('google-auth-library');async function getAccessTokenFromImpersonatedCredentials() {\u00a0 const googleAuth = new GoogleAuth({\u00a0 \u00a0 scopes: scope,\u00a0 });\u00a0 // Construct the GoogleCredentials object which obtains the default configuration from your\u00a0 // working environment.\u00a0 const {credential} = await googleAuth.getApplicationDefault();\u00a0 // delegates: The chained list of delegates required to grant the final accessToken.\u00a0 // For more information, see:\u00a0 // https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-permissions\u00a0 // Delegate is NOT USED here.\u00a0 const delegates = [];\u00a0 // Create the impersonated credential.\u00a0 const impersonatedCredentials = new Impersonated({\u00a0 \u00a0 sourceClient: credential,\u00a0 \u00a0 delegates,\u00a0 \u00a0 targetPrincipal: impersonatedServiceAccount,\u00a0 \u00a0 targetScopes: [scope],\u00a0 \u00a0 lifetime: 300,\u00a0 });\u00a0 // Get the OAuth2 token.\u00a0 // Once you've obtained the OAuth2 token, you can use it to make an authenticated call\u00a0 // to the target audience.\u00a0 const resp = await impersonatedCredentials.getAccessToken();\u00a0 // Token is in resp.token.\u00a0 console.log('Generated OAuth2 token with length %s', resp.token.length);}getAccessTokenFromImpersonatedCredentials();\n```Before you can use this sample code, you must set up [Application Default Credentials](/docs/authentication/provide-credentials-adc) for the caller Google Account you previously granted the required role to impersonate the privilege-bearing service account.\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/auth/cloud-client/snippets.py) \n```\ndef accesstoken_from_impersonated_credentials(\u00a0 \u00a0 impersonated_service_account: str, scope: str):\u00a0 \u00a0 from google.auth import impersonated_credentials\u00a0 \u00a0 import google.auth.transport.requests\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 \u00a0 Use a service account (SA1) to impersonate another service account (SA2)\u00a0 \u00a0 \u00a0 and obtain an ID token for the impersonated account.\u00a0 \u00a0 \u00a0 To obtain a token for SA2, SA1 should have the\u00a0 \u00a0 \u00a0 \"roles/iam.serviceAccountTokenCreator\" permission on SA2.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 impersonated_service_account: The name of the privilege-bearing service account for whom the credential is created.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Examples: name@project.service.gserviceaccount.com\u00a0 \u00a0 \u00a0 \u00a0 scope: Provide the scopes that you might need to request to access Google APIs,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 depending on the level of access you need.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 For this example, we use the cloud-wide scope and use IAM to narrow the permissions.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 https://cloud.google.com/docs/authentication#authorization_for_services\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 For more information, see: https://developers.google.com/identity/protocols/oauth2/scopes\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 # Construct the GoogleCredentials object which obtains the default configuration from your\u00a0 \u00a0 # working environment.\u00a0 \u00a0 credentials, project_id = google.auth.default()\u00a0 \u00a0 # Create the impersonated credential.\u00a0 \u00a0 target_credentials = impersonated_credentials.Credentials(\u00a0 \u00a0 \u00a0 \u00a0 source_credentials=credentials,\u00a0 \u00a0 \u00a0 \u00a0 target_principal=impersonated_service_account,\u00a0 \u00a0 \u00a0 \u00a0 # delegates: The chained list of delegates required to grant the final accessToken.\u00a0 \u00a0 \u00a0 \u00a0 # For more information, see:\u00a0 \u00a0 \u00a0 \u00a0 # https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-permissions\u00a0 \u00a0 \u00a0 \u00a0 # Delegate is NOT USED here.\u00a0 \u00a0 \u00a0 \u00a0 delegates=[],\u00a0 \u00a0 \u00a0 \u00a0 target_scopes=[scope],\u00a0 \u00a0 \u00a0 \u00a0 lifetime=300,\u00a0 \u00a0 )\u00a0 \u00a0 # Get the OAuth2 token.\u00a0 \u00a0 # Once you've obtained the OAuth2 token, use it to make an authenticated call\u00a0 \u00a0 # to the target audience.\u00a0 \u00a0 request = google.auth.transport.requests.Request()\u00a0 \u00a0 target_credentials.refresh(request)\u00a0 \u00a0 # The token field is target_credentials.token.\u00a0 \u00a0 print(\"Generated OAuth2 token.\")\n```\n## Create an OpenID Connect (OIDC) ID token\nID tokens follow the [OpenID Connect (OIDC) specification](https://openid.net/connect/) . ID tokens are accepted by a limited number of services and applications.\nFor more information, see [ID tokens](/docs/authentication/token-types#id) and [Authentication for applications hosted on Cloud Run or Cloud Functions](/docs/authentication/use-cases#run-functions) .\nTo create an ID token, complete these tasks:\n- [Provide the required permissions to the caller](#permissions-id) .Use the Service Account OpenID Connect Identity Token Creator role ( `roles/iam.serviceAccountOpenIdTokenCreator` ) for creating an ID token. This is a different role than the role you use for other token types.\n- [Generate the ID token](#create-id) .\n### Provide required permissions\nA [direct request](#sa-credentials-direct) involves two identities: the caller that requests the credential, and the service account for which the credential is created. How you set up the permissions depends on whether the caller is authenticating as a service account or as a Google Account.\nIf you want to run a REST or gcloud CLI command on this page in a local development environment, the caller can be represented by user credentials. For automated workloads, such as an application running on Compute Engine, the caller must be represented by a service account.\nWhen the calling application uses a service account as its identity, the following principals are involved:- Caller service account ( `` )This service account represents the calling application,  which issues the request for the short-lived credentials.\n- Privilege-bearing service account ( `` )This service account is granted the IAM roles needed for  the short-lived token. This is the service account for which the  short-lived token is created.\n **Note:** In most cases, if you're using short-lived credentials to authenticate the caller service account, the caller service account and the privilege-bearing service account can't be the same. For more information, see [Self-impersonation](/iam/docs/service-account-creds#self-impersonation) .\nTo give `` permissions to create short-lived credentials for `` , you grant `` the Service Account OpenID Connect Identity Token Creator role ( `roles/iam.serviceAccountOpenIdTokenCreator` ) on `` .\nGrant the required role on `` :\n- In the Google Cloud console, go to the **Service Accounts** page. [   Go to Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the email address of the privilege-bearing service account,``.\n- Click the **Permissions** tab.\n- Under **Principals with access to this service account** , clickperson_add **Grant Access** .\n- Enter the email address of the caller service account, `` .For example, `demo@my-project.iam.gserviceaccount.com` .\n- Select the Service Account OpenID Connect Identity Token Creator role   (`roles/iam.serviceAccountOpenIdTokenCreator`).\n- Click **Save** to grant the role to the service account.\nThe ` [gcloud iam service-accounts add-iam-policy-binding](/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) ` command grants a role on a service account.\nBefore using any of the command data below, make the following replacements:- ``: The email address of the privilege-bearing  service account for which the token is generated.\n- ``: The email address of the  service account representing the application that is requesting the short-lived token.\nExecute the  following  command:\nYou should receive a response similar to the following:\n```\nUpdated IAM policy for serviceAccount [PRIV_SA].\n{\n \"bindings\": [ {\n  \"members\": [  \"serviceAccount:CALLER_SA\"\n  ],\n  \"role\": \"roles/iam.serviceAccountOpenIdTokenCreator\"\n }\n ],\n \"etag\": \"BwXhCB4eyjY=\",\n \"version\": 1\n}\n```\n- Read the allow policy for `` :The ` [serviceAccounts.getIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/getIamPolicy) ` method gets a service account's allow policy.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account for  which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/serviceAccountAdmin\",\n  \"members\": [  \"user:admin@example.com\"\n  ]\n }\n ]\n}\n```\nIf you have not granted any roles on the service account, the response   contains only an `etag` value. Include that `etag` value in the next step.\n- Modify the allow policy to grant `` the   Service Account OpenID Connect Identity Token Creator role ( `roles/iam.serviceAccountOpenIdTokenCreator` ).For example, to modify the sample response from the previous step,   add the following:```\n\u00a0 {\u00a0 \u00a0 \"version\": 1,\u00a0 \u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \u00a0 \"bindings\": [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountOpenIdTokenCreator\",\u00a0 \u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"serviceAccount:CALLER_SA\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 }\n```\n- Write the updated allow policy:The ` [serviceAccounts.setIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/setIamPolicy) ` method sets an updated allow policy for the service account.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account  for which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\n- `` : A JSON representation of the policy that you want to set. For more information about the format of a policy, see the [Policy reference](/iam/docs/reference/rest/v1/Policy) .For example, to set the allow policy shown in the previous step, replace `` with the following, where `` is  the service account creating the short-lived token:```\n{\u00a0 \"version\": 1,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountOpenIdTokenCreator\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"serviceAccount:CALLER_SA\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA\n```\nRequest JSON body:\n```\n{\n \"policy\": POLICY\n}\n```\nTo send your request, expand one of these options:The response contains the updated allow policy. **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\nWhen you want to use the Google Cloud CLI to generate short-lived tokens, or you want to generate short-lived tokens from a local development environment, you can use a user account to generate the tokens. Often, you can use your own Google Account.\nWhen you use a user account to generate short-lived tokens, the following identities are involved:- Caller Google Account ( `` )This user account is used to generate short-lived credentials for the  privilege-bearing service account.\n- Privilege-bearing service account ( `` )This service account is granted the IAM roles needed for  the short-lived token. This is the service account for which the  short-lived token is created.\nTo enable `` to create short-lived credentials for `` , you grant `` the Service Account OpenID Connect Identity Token Creator role ( `roles/iam.serviceAccountOpenIdTokenCreator` ) on `` .\nGrant the required role on `` :\n- In the Google Cloud console, go to the **Service Accounts** page. [   Go to Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the email address of the privilege-bearing service account,``.\n- Click the **Permissions** tab.\n- Under **Principals with access to this service account** , clickperson_add **Grant Access** .\n- Enter the email address of the caller Google Account, `` .For example, `username@google.com` .\n- Select the Service Account OpenID Connect Identity Token Creator role   (`roles/iam.serviceAccountOpenIdTokenCreator`).\n- Click **Save** to grant the role to the user account.\nThe ` [gcloud iam service-accounts add-iam-policy-binding](/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) ` command grants a role on a service account.\nBefore using any of the command data below, make the following replacements:- ``: The email address of the privilege-bearing  service account for which the token is generated.\n- ``: The email address of the  user account being used to request the short-lived token.\nExecute the  following  command:\nYou should receive a response similar to the following:\n```\nUpdated IAM policy for serviceAccount [PRIV_SA].\n{\n \"bindings\": [ {\n  \"members\": [  \"user:CALLER_ACCOUNT\"\n  ],\n  \"role\": \"roles/iam.serviceAccountOpenIdTokenCreator\"\n }\n ],\n \"etag\": \"BwX1ZbefjXU=\",\n \"version\": 1\n}\n```\n- Read the allow policy for `` :The ` [serviceAccounts.getIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/getIamPolicy) ` method gets a service account's allow policy.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account for  which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/serviceAccountAdmin\",\n  \"members\": [  \"user:admin@example.com\"\n  ]\n }\n ]\n}\n```\nIf you have not granted any roles on the service account, the response   contains only an `etag` value. Include that `etag` value in the next step.\n- Modify the allow policy to grant `` the Service Account OpenID Connect Identity Token Creator role ( `roles/iam.serviceAccountOpenIdTokenCreator` ).For example, to modify the sample response from the previous step,   add the following:```\n{\u00a0 \"version\": 1,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountOpenIdTokenCreator\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:CALLER_ACCOUNT\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\n- Write the updated allow policy:The ` [serviceAccounts.setIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/setIamPolicy) ` method sets an updated allow policy for the service account.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account  for which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\n- `` : A JSON representation of the policy that you want to set. For more information about the format of a policy, see the [Policy reference](/iam/docs/reference/rest/v1/Policy) .For example, to set the allow policy shown in the previous step, replace `` with the following, where `` is the user account creating the short-lived token:```\n{\u00a0 \"version\": 1,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountOpenIdTokenCreator\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:CALLER_ACCOUNT\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA\n```\nRequest JSON body:\n```\n{\n \"policy\": POLICY\n}\n```\nTo send your request, expand one of these options:The response contains the updated allow policy. **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\n### Generate the ID token\nYou can generate an OpenID Connect (OIDC) ID token by using the gcloud CLI, the REST API, or the Cloud Client Libraries and Google API Client Libraries.\nThe samples below are designed to be used in a local development environment; the caller must be represented by a user account, rather than a service account.\nOIDC ID tokens are valid for 1 hour (3,600 seconds).\nGenerate a Google-signed OIDC ID token for a service account:\n- Log in to the Google Cloud CLI as the caller Google Account.```\ngcloud auth login CALLER_ACCOUNT\n```\n- Generate a token for the service account.The ` [gcloud auth print-identity-token](/sdk/gcloud/reference/auth/print-identity-token) ` command generates an OIDC ID token for a service account.Before using any of the command data below, make the following replacements:- ``: The email address of the privilege-bearing service account for  which the short-lived token is created.\n- ``: The audience for the token, usually the URL of the  application or service that the token will be used to access.\n- Execute the  following  command:\n- You should receive a response similar to the following:\n```\nWARNING: This command is using service account impersonation. All API calls will be executed as\n[my-sa@my-project.iam.gserviceaccount.com].\neyJhbGciOiJSUzI1NiIsImtpZDNhMDg4ZDRmZmMjJkYTVmZTM5MDZjY2MiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJ3d3cuZXhhbXBsJhenAiOiIxMTYzwNDYyMDk0ODIiLCJleHAiOjE2NTQ4ODU0MzEsImlhdCI6MTY1NDg4MTgzMSwiaXN6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwic3ViIMDQ2MjA5NDgyIn0.F7mu8IHj5VQdu7ItFrnYAKyGd7YqXuOP_rFLc98q8BaFBycAF1zAQnSnwqnSUXba0UK9PDT_-IOry68qLwBObz4XlX9lk0ehpN0O0W9FcFToKLB6wefXXPd4h7xtuPe5KzmpSOqj2Qqv34HriGw00Nqd-oGSgNY_lZ4wGEf4rT4oQa_kEcrY57Q2G6pwd769BhgeFwoLi5aK_Cv2kvf_zfMszC-xlkP9zwWQ8XinJBwe-qcQBa4NTgrbueNtXsEjccBS366zmw\n```\nThe Service Account Credentials API's ` [serviceAccounts.generateIdToken](/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateIdToken) ` method generates an OIDC ID token for a service account.\nBefore using any of the request data, make the following replacements:- ``: The email address of the privilege-bearing service account for  which the short-lived token is created.\n- ``: The audience for the token, usually the URL of the  application or service that the token will be used to access.\nHTTP method and URL:\n```\nPOST https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/PRIV_SA:generateIdToken\n```\nRequest JSON body:\n```\n{\n \"audience\": \"AUDIENCE_NAME\",\n \"includeEmail\": \"true\"\n}\n```\nTo send your request, expand one of these options:\nIf the `generateId` request was successful, the response body contains an ID token that is valid for 1 hour. The `token` can then be used to authenticate a request on behalf of the service account:\n```\n{\n \"token\": \"eyJ0eXAi...NiJ9\"\n}\n```\n## Create a self-signed JSON Web Token (JWT)\nSelf-signed JSON Web Tokens (JWTs) are useful in a variety of scenarios:\n- Authenticating to an API deployed with API Gateway.\n- Authenticating a call to a Google API as described in [Google's Authentication Guide](https://developers.google.com/identity/protocols/OAuth2ServiceAccount#jwt-auth) .\n- Securely communicating between your own applications. In this scenario, one application can sign a token that can be verified by another application for authentication purposes.\n- Treating a service account as an identity provider by signing a JWT that contains arbitrary claims about a user, account, or device.\nTo create a JWT, complete these tasks:\n- [Provide the required permissions to the caller](#permissions-jwt) .\n- [Generate the JWT](#create-jwt) .\n### Provide required permissions\nA [direct request](#sa-credentials-direct) involves two identities: the caller that requests the credential, and the service account for which the credential is created. How you set up the permissions depends on whether the caller is authenticating as a service account or as a Google Account.\nIf you want to run a REST or gcloud CLI command on this page in a local development environment, the caller can be represented by user credentials. For automated workloads, such as an application running on Compute Engine, the caller must be represented by a service account.\nWhen the calling application uses a service account as its identity, the following principals are involved:- Caller service account ( `` )This service account represents the calling application,  which issues the request for the short-lived credentials.\n- Privilege-bearing service account ( `` )This service account is granted the IAM roles needed for  the short-lived token. This is the service account for which the  short-lived token is created.\n **Note:** In most cases, if you're using short-lived credentials to authenticate the caller service account, the caller service account and the privilege-bearing service account can't be the same. For more information, see [Self-impersonation](/iam/docs/service-account-creds#self-impersonation) .\nTo give `` permissions to create short-lived credentials for `` , you grant `` the Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ) on `` .\nGrant the required role on `` :\n- In the Google Cloud console, go to the **Service Accounts** page. [   Go to Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the email address of the privilege-bearing service account,``.\n- Click the **Permissions** tab.\n- Under **Principals with access to this service account** , clickperson_add **Grant Access** .\n- Enter the email address of the caller service account, `` .For example, `demo@my-project.iam.gserviceaccount.com` .\n- Select the Service Account Token Creator role   (`roles/iam.serviceAccountTokenCreator`).\n- Click **Save** to grant the role to the service account.\nThe ` [gcloud iam service-accounts add-iam-policy-binding](/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) ` command grants a role on a service account.\nBefore using any of the command data below, make the following replacements:- ``: The email address of the privilege-bearing  service account for which the token is generated.\n- ``: The email address of the  service account representing the application that is requesting the short-lived token.\nExecute the  following  command:\nYou should receive a response similar to the following:\n```\nUpdated IAM policy for serviceAccount [PRIV_SA].\n{\n \"bindings\": [ {\n  \"members\": [  \"serviceAccount:CALLER_SA\"\n  ],\n  \"role\": \"roles/iam.serviceAccountTokenCreator\"\n }\n ],\n \"etag\": \"BwXhCB4eyjY=\",\n \"version\": 1\n}\n```\n- Read the allow policy for `` :The ` [serviceAccounts.getIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/getIamPolicy) ` method gets a service account's allow policy.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account for  which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/serviceAccountAdmin\",\n  \"members\": [  \"user:admin@example.com\"\n  ]\n }\n ]\n}\n```\nIf you have not granted any roles on the service account, the response   contains only an `etag` value. Include that `etag` value in the next step.\n- Modify the allow policy to grant `` the   Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ).For example, to modify the sample response from the previous step,   add the following:```\n\u00a0 {\u00a0 \u00a0 \"version\": 1,\u00a0 \u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \u00a0 \"bindings\": [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"serviceAccount:CALLER_SA\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 }\n```\n- Write the updated allow policy:The ` [serviceAccounts.setIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/setIamPolicy) ` method sets an updated allow policy for the service account.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account  for which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\n- `` : A JSON representation of the policy that you want to set. For more information about the format of a policy, see the [Policy reference](/iam/docs/reference/rest/v1/Policy) .For example, to set the allow policy shown in the previous step, replace `` with the following, where `` is  the service account creating the short-lived token:```\n{\u00a0 \"version\": 1,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"serviceAccount:CALLER_SA\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA\n```\nRequest JSON body:\n```\n{\n \"policy\": POLICY\n}\n```\nTo send your request, expand one of these options:The response contains the updated allow policy. **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\nWhen you want to use the Google Cloud CLI to generate short-lived tokens, or you want to generate short-lived tokens from a local development environment, you can use a user account to generate the tokens. Often, you can use your own Google Account.\nWhen you use a user account to generate short-lived tokens, the following identities are involved:- Caller Google Account ( `` )This user account is used to generate short-lived credentials for the  privilege-bearing service account.\n- Privilege-bearing service account ( `` )This service account is granted the IAM roles needed for  the short-lived token. This is the service account for which the  short-lived token is created.\nTo enable `` to create short-lived credentials for `` , you grant `` the Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ) on `` .\nGrant the required role on `` :\n- In the Google Cloud console, go to the **Service Accounts** page. [   Go to Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the email address of the privilege-bearing service account,``.\n- Click the **Permissions** tab.\n- Under **Principals with access to this service account** , clickperson_add **Grant Access** .\n- Enter the email address of the caller Google Account, `` .For example, `username@google.com` .\n- Select the Service Account Token Creator role   (`roles/iam.serviceAccountTokenCreator`).\n- Click **Save** to grant the role to the user account.\nThe ` [gcloud iam service-accounts add-iam-policy-binding](/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) ` command grants a role on a service account.\nBefore using any of the command data below, make the following replacements:- ``: The email address of the privilege-bearing  service account for which the token is generated.\n- ``: The email address of the  user account being used to request the short-lived token.\nExecute the  following  command:\nYou should receive a response similar to the following:\n```\nUpdated IAM policy for serviceAccount [PRIV_SA].\n{\n \"bindings\": [ {\n  \"members\": [  \"user:CALLER_ACCOUNT\"\n  ],\n  \"role\": \"roles/iam.serviceAccountTokenCreator\"\n }\n ],\n \"etag\": \"BwX1ZbefjXU=\",\n \"version\": 1\n}\n```\n- Read the allow policy for `` :The ` [serviceAccounts.getIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/getIamPolicy) ` method gets a service account's allow policy.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account for  which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/serviceAccountAdmin\",\n  \"members\": [  \"user:admin@example.com\"\n  ]\n }\n ]\n}\n```\nIf you have not granted any roles on the service account, the response   contains only an `etag` value. Include that `etag` value in the next step.\n- Modify the allow policy to grant `` the Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ).For example, to modify the sample response from the previous step,   add the following:```\n{\u00a0 \"version\": 1,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:CALLER_ACCOUNT\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\n- Write the updated allow policy:The ` [serviceAccounts.setIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/setIamPolicy) ` method sets an updated allow policy for the service account.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account  for which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\n- `` : A JSON representation of the policy that you want to set. For more information about the format of a policy, see the [Policy reference](/iam/docs/reference/rest/v1/Policy) .For example, to set the allow policy shown in the previous step, replace `` with the following, where `` is the user account creating the short-lived token:```\n{\u00a0 \"version\": 1,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:CALLER_ACCOUNT\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA\n```\nRequest JSON body:\n```\n{\n \"policy\": POLICY\n}\n```\nTo send your request, expand one of these options:The response contains the updated allow policy. **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\n### Generate the JWT\nGenerate a self-signed JWT:\nThe Service Account Credentials API's ` [serviceAccounts.signJwt](/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signJwt) ` method signs a JWT using a service account's system-managed private key.\nBefore using any of the request data, make the following replacements:- ``: The email address of the privilege-bearing service account for  which the short-lived token is created.\n- `` : The JWT payload to sign, which is a JSON object that  contains a JWT Claims Set. Include the claims that are necessary for your desired use case and  to meet the validation requirements for the service you are calling. If you are calling a  Google API, see [  Google's Authentication Guide](https://developers.google.com/identity/protocols/OAuth2ServiceAccount#jwt-auth) for claim requirements.The `exp` (expiration time) claim must be no more than 12 hours in the future.  If you are calling a Google API, the `exp` claim must be set no more than 1 hour in  the future.The following example payload contains claims to call a Google API, where `` is an integer timestamp representing the expiration time:```\n{ \\\"iss\\\": \\\"PRIV_SA\\\", \\\"sub\\\": \\\"PRIV_SA\\\", \\\"aud\\\": \\\"https://firestore.googleapis.com/\\\", \\\"iat\\\": 1529350000, \\\"exp\\\": EXP }\n```\nHTTP method and URL:\n```\nPOST https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/PRIV_SA:signJwt\n```\nRequest JSON body:\n```\n{\n \"payload\": \"JWT_PAYLOAD\"\n}\n```\nTo send your request, expand one of these options:\nIf the `signJwt` request was successful, the response body contains a signed JWT and the signing key ID that was used to sign the JWT. You can use the `signedJwt` value as a bearer token to directly authenticate a request on behalf of the service account. The token is valid up to the expiration time specified in the request:\n```\n{\n \"keyId\": \"42ba1e...fc0a\",\n \"signedJwt\": \"eyJ0eXAi...NiJ9\"\n}\n```\n## Create a self-signed binary object (blob)\nSelf-signed binary objects, or blobs, are used to transmit binary data in such a way that the originator of the data is known (because the blob is self-signed). Blobs can be used to create signatures, a Cloud Storage object required for various authentication flows including signed URLs. For information about signatures, see [the Cloud Storage documentation](/storage/docs/authentication/signatures) .\nTo create a self-signed binary object, complete these tasks:\n- [Provide the required permissions to the caller](#permissions-blob) .\n- [Generate the self-signed blob](#create-blob) .\n### Provide required permissions\nA [direct request](#sa-credentials-direct) involves two identities: the caller that requests the credential, and the service account for which the credential is created. How you set up the permissions depends on whether the caller is authenticating as a service account or as a Google Account.\nIf you want to run a REST or gcloud CLI command on this page in a local development environment, the caller can be represented by user credentials. For automated workloads, such as an application running on Compute Engine, the caller must be represented by a service account.\nWhen the calling application uses a service account as its identity, the following principals are involved:- Caller service account ( `` )This service account represents the calling application,  which issues the request for the short-lived credentials.\n- Privilege-bearing service account ( `` )This service account is granted the IAM roles needed for  the short-lived token. This is the service account for which the  short-lived token is created.\n **Note:** In most cases, if you're using short-lived credentials to authenticate the caller service account, the caller service account and the privilege-bearing service account can't be the same. For more information, see [Self-impersonation](/iam/docs/service-account-creds#self-impersonation) .\nTo give `` permissions to create short-lived credentials for `` , you grant `` the Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ) on `` .\nGrant the required role on `` :\n- In the Google Cloud console, go to the **Service Accounts** page. [   Go to Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the email address of the privilege-bearing service account,``.\n- Click the **Permissions** tab.\n- Under **Principals with access to this service account** , clickperson_add **Grant Access** .\n- Enter the email address of the caller service account, `` .For example, `demo@my-project.iam.gserviceaccount.com` .\n- Select the Service Account Token Creator role   (`roles/iam.serviceAccountTokenCreator`).\n- Click **Save** to grant the role to the service account.\nThe ` [gcloud iam service-accounts add-iam-policy-binding](/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) ` command grants a role on a service account.\nBefore using any of the command data below, make the following replacements:- ``: The email address of the privilege-bearing  service account for which the token is generated.\n- ``: The email address of the  service account representing the application that is requesting the short-lived token.\nExecute the  following  command:\nYou should receive a response similar to the following:\n```\nUpdated IAM policy for serviceAccount [PRIV_SA].\n{\n \"bindings\": [ {\n  \"members\": [  \"serviceAccount:CALLER_SA\"\n  ],\n  \"role\": \"roles/iam.serviceAccountTokenCreator\"\n }\n ],\n \"etag\": \"BwXhCB4eyjY=\",\n \"version\": 1\n}\n```\n- Read the allow policy for `` :The ` [serviceAccounts.getIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/getIamPolicy) ` method gets a service account's allow policy.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account for  which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/serviceAccountAdmin\",\n  \"members\": [  \"user:admin@example.com\"\n  ]\n }\n ]\n}\n```\nIf you have not granted any roles on the service account, the response   contains only an `etag` value. Include that `etag` value in the next step.\n- Modify the allow policy to grant `` the   Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ).For example, to modify the sample response from the previous step,   add the following:```\n\u00a0 {\u00a0 \u00a0 \"version\": 1,\u00a0 \u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \u00a0 \"bindings\": [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"serviceAccount:CALLER_SA\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 }\n```\n- Write the updated allow policy:The ` [serviceAccounts.setIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/setIamPolicy) ` method sets an updated allow policy for the service account.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account  for which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\n- `` : A JSON representation of the policy that you want to set. For more information about the format of a policy, see the [Policy reference](/iam/docs/reference/rest/v1/Policy) .For example, to set the allow policy shown in the previous step, replace `` with the following, where `` is  the service account creating the short-lived token:```\n{\u00a0 \"version\": 1,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"serviceAccount:CALLER_SA\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA\n```\nRequest JSON body:\n```\n{\n \"policy\": POLICY\n}\n```\nTo send your request, expand one of these options:The response contains the updated allow policy. **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\nWhen you want to use the Google Cloud CLI to generate short-lived tokens, or you want to generate short-lived tokens from a local development environment, you can use a user account to generate the tokens. Often, you can use your own Google Account.\nWhen you use a user account to generate short-lived tokens, the following identities are involved:- Caller Google Account ( `` )This user account is used to generate short-lived credentials for the  privilege-bearing service account.\n- Privilege-bearing service account ( `` )This service account is granted the IAM roles needed for  the short-lived token. This is the service account for which the  short-lived token is created.\nTo enable `` to create short-lived credentials for `` , you grant `` the Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ) on `` .\nGrant the required role on `` :\n- In the Google Cloud console, go to the **Service Accounts** page. [   Go to Service Accounts](https://console.cloud.google.com/iam-admin/serviceaccounts) \n- Select a project.\n- Click the email address of the privilege-bearing service account,``.\n- Click the **Permissions** tab.\n- Under **Principals with access to this service account** , clickperson_add **Grant Access** .\n- Enter the email address of the caller Google Account, `` .For example, `username@google.com` .\n- Select the Service Account Token Creator role   (`roles/iam.serviceAccountTokenCreator`).\n- Click **Save** to grant the role to the user account.\nThe ` [gcloud iam service-accounts add-iam-policy-binding](/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding) ` command grants a role on a service account.\nBefore using any of the command data below, make the following replacements:- ``: The email address of the privilege-bearing  service account for which the token is generated.\n- ``: The email address of the  user account being used to request the short-lived token.\nExecute the  following  command:\nYou should receive a response similar to the following:\n```\nUpdated IAM policy for serviceAccount [PRIV_SA].\n{\n \"bindings\": [ {\n  \"members\": [  \"user:CALLER_ACCOUNT\"\n  ],\n  \"role\": \"roles/iam.serviceAccountTokenCreator\"\n }\n ],\n \"etag\": \"BwX1ZbefjXU=\",\n \"version\": 1\n}\n```\n- Read the allow policy for `` :The ` [serviceAccounts.getIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/getIamPolicy) ` method gets a service account's allow policy.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account for  which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA:getIamPolicy\n```\nRequest JSON body:\n```\n{\n \"options\": {\n \"requestedPolicyVersion\": POLICY_VERSION\n }\n}\n```\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"version\": 1,\n \"etag\": \"BwWKmjvelug=\",\n \"bindings\": [ {\n  \"role\": \"roles/serviceAccountAdmin\",\n  \"members\": [  \"user:admin@example.com\"\n  ]\n }\n ]\n}\n```\nIf you have not granted any roles on the service account, the response   contains only an `etag` value. Include that `etag` value in the next step.\n- Modify the allow policy to grant `` the Service Account Token Creator role ( `roles/iam.serviceAccountTokenCreator` ).For example, to modify the sample response from the previous step,   add the following:```\n{\u00a0 \"version\": 1,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:CALLER_ACCOUNT\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\n- Write the updated allow policy:The ` [serviceAccounts.setIamPolicy](/iam/docs/reference/rest/v1/projects.serviceAccounts/setIamPolicy) ` method sets an updated allow policy for the service account.Before using any of the request data, make the following replacements:- ``: Your Google Cloud project ID. Project IDs are alphanumeric strings, like`my-project`.\n- ``: The email address of the privilege-bearing service account  for which the short-lived token is created.\n- ``: The policy version to be returned. Requests should specify the most recent policy version, which is policy version 3. See [Specifyinga policy version when getting a policy](/iam/docs/policies#specifying-version-get) for details.\n- `` : A JSON representation of the policy that you want to set. For more information about the format of a policy, see the [Policy reference](/iam/docs/reference/rest/v1/Policy) .For example, to set the allow policy shown in the previous step, replace `` with the following, where `` is the user account creating the short-lived token:```\n{\u00a0 \"version\": 1,\u00a0 \"etag\": \"BwWKmjvelug=\",\u00a0 \"bindings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/serviceAccountAdmin\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:admin@example.com\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": \"roles/iam.serviceAccountTokenCreator\",\u00a0 \u00a0 \u00a0 \"members\": [\u00a0 \u00a0 \u00a0 \u00a0 \"user:CALLER_ACCOUNT\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\nHTTP method and URL:\n```\nPOST https://iam.googleapis.com/v1/projects/PROJECT_ID/serviceAccounts/PRIV_SA\n```\nRequest JSON body:\n```\n{\n \"policy\": POLICY\n}\n```\nTo send your request, expand one of these options:The response contains the updated allow policy. **Note:** If you treat policies as code and store them in a version-control system, you should store the policy that is returned, not the policy that you sent in the request.\n### Generate the self-signed blob\nGenerate a self-signed blob for the service account:\nThe Service Account Credentials API's ` [serviceAccounts.signBlob](/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob) ` method signs a blob using a service account's system-managed private key.\nBefore using any of the request data, make the following replacements:- ``: The email address of the privilege-bearing service account for  which the short-lived token is created.\n- ``: A base64-encoded string of bytes. For example,`VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cu`.\nHTTP method and URL:\n```\nPOST https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/PRIV_SA:signBlob\n```\nRequest JSON body:\n```\n{\n \"payload\": \"BLOB_PAYLOAD\"\n}\n```\nTo send your request, expand one of these options:\nIf the `signBlob` request was successful, the response body contains a signed blob and the signing key ID that was used to sign the blob. You can use the `signedBlob` value as a bearer token to directly authenticate a request on behalf of the service account. The token is valid until the service account's system-managed private key expires. This key's ID is the value of the `keyId` field in the response.\n```\n{\n \"keyId\": \"42ba1e...fc0a\",\n \"signedBlob\": \"eyJ0eXAi...NiJ9\"\n}\n```", "guide": "IAM"}