{"title": "IAM - Obtain short-lived tokens for workforce identity federation", "url": "https://cloud.google.com/iam/docs/workforce-obtaining-short-lived-credentials", "abstract": "# IAM - Obtain short-lived tokens for workforce identity federation\nThis guide shows you how to use a workforce identity pool and workforce identity pool provider to obtain short-lived tokens from Security Token Service. You can use the tokens to access Google Cloud resources that [support workforce identity federation](/iam/docs/federated-identity-supported-services) and to which you have been granted access.\n**Note:** The procedure described in this guide can be used on headless machines.\nYou obtain short-lived tokens by following this process:\n- Obtain a credential from the trusted identity provider.\n- Exchange the credential for a token from the Security Token Service.", "content": "## Before you begin\n- [Configure workforce identity federation](/iam/docs/configuring-workforce-identity-federation) or, for IdP-specific instructions, see the following guides:- [Configure Azure AD-based workforce identity federation](/iam/docs/workforce-sign-in-azure-ad) \n- [Configure Okta-based workforce identity federation](/iam/docs/workforce-sign-in-okta) \n- You must know your workforce pool ID or provider ID.\n- Ensure that you have the Identity and Access Management (IAM) permission `serviceusage.services.use` . The least-privileged role that contains this permission is Service Usage Consumer ( `roles/serviceusage.serviceUsageConsumer` ).\n- Enable the IAM and Security Token Service APIs. [Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=iam.googleapis.com,sts.googleapis.com,iamcredentials.googleapis.com&redirect=https://console.cloud.google.com) \n- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.## Exchange external credentials for a Google Cloud access token\nThis section shows you how to use [Security Token Service](/iam/docs/reference/sts/rest) to exchange your external credentials for an access token that grants access to Google Cloud. You do this using the gcloud CLI, REST API, and Cloud Client Libraries, as described later in this guide.\nIf you need long-lived access, you can configure a long-running process to continuously refresh credentials on that machine. Alternatively, you can run a local server in the background with an endpoint that returns the credentials.\n### Browser-based sign-in with the gcloud CLI\nThis section describes how to configure gcloud CLI to use a browser-based sign-in flow. To do so, you create a sign-in configuration file and then either reference the file in calls to `gcloud auth login` or activate it so that it is used by default.\nTo create the login configuration file, run the following command. You can optionally activate the file as the default for the gcloud CLI by using the [--activate flag](/sdk/gcloud/reference/iam/workforce-pools/create-login-config) .\n```\ngcloud iam workforce-pools create-login-config \\\u00a0 \u00a0 locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --output-file=LOGIN_CONFIG_FILE\n```\nReplace the following:\n- ``: the workforce pool ID\n- ``: the provider ID\n- ``: a path to the configuration  file that you specify\u2014for example,`login.json`\nThe file contains contains the endpoints used by the gcloud CLI to enable the browser-based authentication flow and set the audience to the provider you created earlier in this guide. The file doesn't contain confidential information.\nThe output looks similar to the following:\n```\n{\u00a0 \"type\": \"external_account_authorized_user_login_config\",\u00a0 \"audience\": \"//iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID\",\u00a0 \"auth_url\": \"https://auth.cloud.google/authorize\",\u00a0 \"token_url\": \"https://sts.googleapis.com/v1/oauthtoken\",\u00a0 \"token_info_url\": \"https://sts.googleapis.com/v1/introspect\",}\n```\n**Caution:** We recommend that you first ensure that the contents of this file are correct and then safeguard the file\u2014for example, by making it read-only and restricting access with an ACL. The file isn't validated; a malicious actor with write access to this file can change the endpoints and intercept credentials.\nTo authenticate using browser-based sign-in authentication, you can use one of the following methods:\n- If you used the `--activate` flag when you created the configuration file, or if you  activated the configuration file with `gcloud config set auth/` `` , the gcloud CLI  uses your configuration file automatically:```\ngcloud auth login\n```\n- To sign in by specifying the location of the configuration file, run the  following command:```\ngcloud auth login --login-config=LOGIN_CONFIG_FILE\n```\n- To use an environment variable to specify the location of the configuration  file, set`CLOUDSDK_AUTH_LOGIN_CONFIG_FILE`to the configuration path.To discontinue using the login configuration file, do the following:\n- If you used the `--activate` flag when you created the configuration file, or if you  activated the configuration file with `gcloud config set auth/` `` , you must run the following  command to unset it:```\ngcloud config unset auth/login_config_file\n```\n- Clear the`CLOUDSDK_AUTH_LOGIN_CONFIG_FILE`environment variable, if it is set.### Use configuration files for sign-in\nAs an alternative to browser-based sign-in, this section shows you different ways to use credential configuration files to provide access to authenticated Google Cloud actions. Setting up the configuration files does not require you to be logged in to the gcloud CLI.\nHow you set up your configuration file depends on whether your IdP uses OIDC or SAML.\nYou can source the credentials that you use to set up your configuration file from the following sources:- [File-sourced credentials](#oidc-file) \n- [URL-sourced credentials](#oidc-url) \n- [Non-interactive executable-sourced credentials](#oidc-non-int-exec) \n- [Interactive executable-sourced credentials](#oidc-int-exec) \nTokens are loaded from a file. Another process must refresh this file with a new OIDC token before the old token expires. For example, if the token has a lifetime of one hour, you must refresh the file before it is one hour old.\nTo generate the configuration file with a file-sourced credential, execute the following command:\n```\ngcloud iam workforce-pools create-cred-config \\\u00a0 \u00a0 locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --subject-token-type=urn:ietf:params:oauth:token-type:id_token \\\u00a0 \u00a0 --credential-source-file=PATH_TO_OIDC_ID_TOKEN \\\u00a0 \u00a0 --workforce-pool-user-project=WORKFORCE_POOL_USER_PROJECT \\\u00a0 \u00a0 --output-file=config.json\n```\nReplace the following:- ``: the workforce pool ID\n- ``: the provider ID\n- ``: the path to the OIDC IdP credential file\n- ``: the project number or ID associated with the [workforce pools user project](/iam/docs/workforce-identity-federation#workforce-pools-user-project) .\nThe principal must have `serviceusage.services.use` permission on this project.\nRunning the command produces an OIDC IdP config file similar to the following:\n```\n{\u00a0 \"type\": \"external_account\",\u00a0 \"audience\": \"//iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID\",\u00a0 \"subject_token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\u00a0 \"token_url\": \"https://sts.googleapis.com/v1/token\",\u00a0 \"workforce_pool_user_project\": \"WORKFORCE_POOL_USER_PROJECT\",\u00a0 \"credential_source\": {\u00a0 \u00a0 \"file\": \"PATH_TO_OIDC_CREDENTIALS_FILE\"\u00a0 }}\n```Tokens are loaded from a local server with an endpoint that responds to `HTTP GET` requests. The response must be an OIDC ID token, either in plain text or in JSON format.\nTo generate the configuration file with a URL-sourced credential, execute the following command:\n```\ngcloud iam workforce-pools create-cred-config \\\u00a0 \u00a0 locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --subject-token-type=urn:ietf:params:oauth:token-type:id_token \\\u00a0 \u00a0 --credential-source-url=URL_TO_RETURN_OIDC_ID_TOKEN \\\u00a0 \u00a0 --workforce-pool-user-project=WORKFORCE_POOL_USER_PROJECT \\\u00a0 \u00a0 --output-file=config.json\n```\nReplace the following:- ``: the workforce pool ID.\n- ``: the provider ID.\n- ``: the URL to call to retrieve the OIDC credentials, such as an OIDC ID token\u2014for example:`http://localhost:5000/token`.\n- ``: the project number used for quota and billing. The principal needs to have`serviceusage.services.use permission`on this project.\nRunning the command produces an OIDC IdP config file similar to the following:\n```\n{\u00a0 \"type\": \"external_account\",\u00a0 \"audience\": \"//iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID\",\u00a0 \"subject_token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\u00a0 \"token_url\": \"https://sts.googleapis.com/v1/token\",\u00a0 \"workforce_pool_user_project\": \"WORKFORCE_POOL_USER_PROJECT\",\u00a0 \"credential_source\": {\u00a0 \u00a0 \"url\": \"URL_TO_RETURN_OIDC_ID_TOKEN\"\u00a0 }}\n```Tokens are loaded from a local executable. The executable must provide a valid, unexpired OIDC ID token in JSON format to `stdout` :\n```\n{\n \"version\": 1,\n \"success\": true,\n \"token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\n \"id_token\": \"HEADER.PAYLOAD.SIGNATURE\",\n \"expiration_time\": 1620499962\n}\n```\nThese fields are required for a successful response, with the exception of `expiration_time` . The `expiration_time` field is only required when an output file has been specified in the credential configuration.\nThe executable must surface any errors to `stdout` in the following JSON format:\n```\n{\n \"version\": 1,\n \"success\": false,\n \"code\": \"401\",\n \"message\": \"Caller not authorized.\"\n}\n```\nThese fields are all required for an error response. The code and message fields are used by the client libraries when raising the appropriate error.\nThe command can return the following fields:- ``: the version of the JSON output. Only version`1`is supported.\n- `` : the status of the response. When the status is `true` , the executable must exit with exit code `0` and the response must contain the following fields:- `token_type`:`id_token`\n- `expiration_time`field, if an output file is specified in the credential configuration\nWhen the status is `false` , the executable must exit with a non-zero value and the response must contain the following fields:- `code`\n- `message`\n- `` : the third-party subject token type, which must be `urn:ietf:params:oauth:token-type:id_token`\n- `` : the third-party OIDC token\n- `` : the third-party OIDC token expiration time in seconds (Unix epoch time)\n- `` : the error code string\n- `` : the error message\nThe client libraries populate the following environment variables when the executable is run:- ``: the audience field from the credential configuration. Always present.\n- ``: the expected subject token type. Always present.\n- ``: the output file location from the credential configuration. Only present when specified in the credential configuration.\nThese environment variables can be used by the executable to avoid hardcoding these values.\nTo enable this credential sourcing method with the client libraries, the `GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES` environment variable must be set to `1` .\nTo generate the configuration file with a executable-sourced credential, execute the following command:\n```\ngcloud iam workforce-pools create-cred-config \\\u00a0 \u00a0 locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --subject-token-type=urn:ietf:params:oauth:token-type:id_token \u00a0\\\u00a0 \u00a0 --executable-command=EXECUTABLE_COMMAND \\\u00a0 \u00a0 --executable-timeout-millis=EXECUTABLE_TIMEOUT \\\u00a0 \u00a0 --executable-output-file=EXECUTABLE_OUTPUT_FILE \\\u00a0 \u00a0 --workforce-pool-user-project=WORKFORCE_POOL_USER_PROJECT \\\u00a0 \u00a0 --output-file /path/to/generated/config.json\n```\nReplace the following:- ``: the workforce pool ID.\n- ``: the provider ID.\n- ``: the full command, including arguments, to run to retrieve the subject token, such as an OIDC ID token, in the following format:`--executable-command=\"/path/to/command --foo=bar\"`.\n- ``: (optional) a duration, in milliseconds, to wait for the executable to run (defaults to 30s).\n- ``: (optional) a file path to the third-party credentials generated by the executable. This is useful for caching the credentials. The Auth libraries first check for this path before running the executable.\n- ``: the project number or ID that is used for quota and billing. The principal must have the`serviceusage.services.use`permission set on this project.\nRunning the command produces an OIDC IdP config file similar to the following:\n```\n{\u00a0 \"type\": \"external_account\",\u00a0 \"audience\": \"//iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID\",\u00a0 \"subject_token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\u00a0 \"token_url\": \"https://sts.googleapis.com/v1/token\",\u00a0 \"workforce_pool_user_project\": \"WORKFORCE_POOL_USER_PROJECT\",\u00a0 \"credential_source\": {\u00a0 \u00a0 \"executable\": {\u00a0 \u00a0 \u00a0 \"command\": \"EXECUTABLE_COMMAND\",\u00a0 \u00a0 \u00a0 \"timeout_millis\": \"EXECUTABLE_TIMEOUT\",\u00a0 \u00a0 \u00a0 \"output_file\": \"EXECUTABLE_OUTPUT_FILE\"\u00a0 \u00a0 }\u00a0 }}\n```You can provide an executable that interacts with the user through `stdin` and `stdout` . If user successfully signs in, the executable writes a [valid, unexpired credential] to the specified file.\nTo use this mode, the following flags are required:- `--executable-output-file`: the file that the executable writes the credential information to\n- `--exeutable-interactive-timeout-millis`: a non-zero value that indicatesand sets the timeout\u2014for example,`6000`for a 60-second timeout\nThe following fields are required for a successful response, with the exception of `expiration_time` :\n```\n{\n \"version\": 1,\n \"success\": true,\n \"token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\n \"id_token\": \"HEADER.PAYLOAD.SIGNATURE\",\n \"expiration_time\": 1620499962\n}\n```\nThe executable must write any errors to the file specified in `--executable-output-file` in the following JSON format. The following fields are all required when returning an error response.\n```\n{\n \"version\": 1,\n \"success\": false,\n \"code\": \"401\",\n \"message\": \"Caller not authorized.\"\n}\n```\nThe `code` and `message` fields must indicate the appropriate error. These fields are used by the client libraries when raising the error.\nUpon successful execution, the command returns the same fields whether interactive or non-interactive executable-sourced credentials results above.\nThe environment variables are also the same as a normal executable-sourced credentials.\nTo generate an interactive executable-sourced credential, add the parameter `--executable-interactive-timeout-millis` and the parameter `--executable-output-file` .\n```\ngcloud iam workforce-pools create-cred-config \\\u00a0 \u00a0 locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --subject-token-type=urn:ietf:params:oauth:token-type:id_token \u00a0\\\u00a0 \u00a0 --executable-command=EXECUTABLE_COMMAND \\\u00a0 \u00a0 --executable-interactive-timeout-millis=EXECUTABLE_INTERACTIVE_TIMEOUT \\\u00a0 \u00a0 --executable-output-file=EXECUTABLE_OUTPUT_FILE \\\u00a0 \u00a0 --workforce-pool-user-project=WORKFORCE_POOL_USER_PROJECT \\\u00a0 \u00a0 --output-file /path/to/generated/config.json\n```\nReplace the following:- ``: the workforce pool ID.\n- ``: the provider ID.\n- ``: the full command, including arguments, to run to retrieve the subject token, formatted as follows:`--executable-command=\"/path/to/command --arg1=val1 --arg2=val2\"`\n- ``: a duration, in milliseconds, to wait for the executable to run.\n- ``: a file path to the third-party credentials generated by the executable. This path is useful for caching the credentials. The Auth libraries first check for this path before running the executable.\n- ``: the project number or ID used for quota and billing. The principal must have the`serviceusage.services.use`permission on this project.\nRunning the command produces an OIDC IdP config file similar to the following:\n```\n{\u00a0 \"type\": \"external_account\",\u00a0 \"audience\": \"//iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID\",\u00a0 \"subject_token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\u00a0 \"token_url\": \"https://sts.googleapis.com/v1/token\",\u00a0 \"workforce_pool_user_project\": \"WORKFORCE_POOL_USER_PROJECT\",\u00a0 \"credential_source\": {\u00a0 \u00a0 \"executable\": {\u00a0 \u00a0 \u00a0 \"command\": \"EXECUTABLE_COMMAND\",\u00a0 \u00a0 \u00a0 \"interactive_timeout_millis\": \"EXECUTABLE_INTERACTIVE_TIMEOUT\",\u00a0 \u00a0 \u00a0 \"timeout_millis\": \"EXECUTABLE_TIMEOUT\",\u00a0 \u00a0 \u00a0 \"output_file\": \"EXECUTABLE_OUTPUT_FILE\",\u00a0 \u00a0 }\u00a0 }}\n```\n **Note:** The `timeout_millis` field is returned because an interactive executable can also run in non-interactive mode, in some cases. In interactive mode, the command returns a default timeout.\nYou can source the credentials that you use to set up your configuration file from the following sources:- [File-sourced credentials](#saml-file) \n- [URL-sourced credentials](#saml-url) \n- [Executable-sourced credentials](#saml-exec) \n- [Executable-sourced credentials for gcloud interactive mode](#saml-exec-gcloud) \nAssertions are loaded from a file. Another process must refresh this file with a new base64-encoded SAML assertion before the old assertion expires. For example, if the assertion has a lifetime of one hour, you must refresh the file before it is one hour old.\n **Note:** you must pass a `--subject-token-type=urn:ietf:params:oauth:token-type:saml2` flag when generating the configuration file.\n```\ngcloud iam workforce-pools create-cred-config \\\u00a0 \u00a0 locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --output-file=federation_config.json \\\u00a0 \u00a0 --credential-source-file=CREDENTIAL_FILE \\\u00a0 \u00a0 --subject-token-type=urn:ietf:params:oauth:token-type:saml2 \\\u00a0 \u00a0 --workforce-pool-user-project=WORKFORCE_POOL_USER_PROJECT\n```\nReplace the following:- ``: the workforce pool ID.\n- ``: the provider ID.\n- ``: the path to the credential file that is generated by the IdP.\n- ``: the project number or ID that is used for quota and billing. The principal must have`serviceusage.services.use permission`on this project.\nAssertions are loaded from a local server with an endpoint that responds to HTTP `GET` requests. The response must be either a [base64-encoded](https://toolbox.googleapps.com/apps/encode_decode/) SAML assertion or JSON containing a base64-encoded SAML assertion.\nTo use URL-sourced credentials, use the `--credential-source-url` flag:\n```\ngcloud iam workforce-pools create-cred-config \\\u00a0 \u00a0 locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --output-file=federation_config.json \\\u00a0 \u00a0 --credential-source-url=CREDENTIAL_URL \\\u00a0 \u00a0 --subject-token-type=urn:ietf:params:oauth:token-type:saml2 \\\u00a0 \u00a0 --workforce-pool-user-project=WORKFORCE_POOL_USER_PROJECT\n```\nReplace the following:- ``: the workforce pool ID.\n- ``: the provider ID.\n- ``: the URL of the local server endpoint.\n- ``: the project number or ID used for quota and billing. The principal needs to have`serviceusage.services.use permission`on this project.\nAssertions are loaded from a local executable. The executable must provide a valid, unexpired SAML assertion in JSON format to `stdout` .\n```\n{\n \"version\": 1,\n \"success\": true,\n \"token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n \"saml_response\": \"...\",\n \"expiration_time\": 1620499962\n}\n```\nThese fields are required for a successful response, with the exception of `expiration_time` . The `expiration_time` field is required only when an output file is specified in the credential configuration.\nIf an error occurs, it must be surfaced by the executable in the following JSON format to stdout:\n```\n{\n \"version\": 1,\n \"success\": false,\n \"code\": \"401\",\n \"message\": \"Caller not authorized.\"\n}\n```\nThese fields are all required for an error response. The code and message fields are used by the client libraries when raising the appropriate error.\nThe command can return the following fields:- ``: the version of the JSON output. Only version`1`is supported.\n- `` : the status of the response. When the status is `true` , the executable must exit with exit code `0` and the response must contain the following fields:- `token_type`:`saml_response`\n- `expiration_time`field, if an output file is specified in the credential configuration\nWhen the status is `false` , the executable must exit with a non-zero value and the response must contain the following fields: + `code` + `message`\n- `` : the third-party subject token type, which must be `urn:ietf:params:oauth:token-type:saml2`\n- `` : the third-party SAML response\n- `` : the third-party SAML response expiration time in seconds (Unix epoch time)\n- `` : the error code string\n- `` : the error message\nThe client libraries populate the following environment variables when the executable is run:- ``: the audience field from the credential configuration. Always present.\n- ``: the expected subject token type. Always present.\n- ``: the output file location from the credential configuration. Only present when it is specified in the credential configuration.\n **Note:** The executable can use these environment variables to avoid hardcoding these values.\nTo enable this credential sourcing method with the client libraries, set the `GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES` environment variable to `1` .\nTo generate the configuration file with a executable-sourced credential, execute the following command:\n```\ngcloud iam workforce-pools create-cred-config \\\u00a0 \u00a0 locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --subject-token-type=urn:ietf:params:oauth:token-type:saml2 \u00a0\\\u00a0 \u00a0 --executable-command=EXECUTABLE_COMMAND \\\u00a0 \u00a0 --executable-timeout-millis=EXECUTABLE_TIMEOUT \\\u00a0 \u00a0 --executable-output-file=EXECUTABLE_OUTPUT_FILE \\\u00a0 \u00a0 --workforce-pool-user-project=WORKFORCE_POOL_USER_PROJECT \\\u00a0 \u00a0 --output-file /path/to/generated/config.json\n```\nReplace the following:- ``: the workforce pool ID.\n- ``: the provider ID.\n- ``: the full command, including arguments, to run to retrieve the subject token, in the following format:`--executable-command=\"/path/to/command --foo=bar\"`.\n- ``: (optional) the duration in milliseconds to wait for the executable to run (defaults to 30s).\n- ``: (optional) the file path to the 3PI credentials generated by the executable. This is useful for caching the credentials. The Auth libraries check for its existence before running the executable.\n- ``: the project number used for quota and billing. The principal must have the`serviceusage.services.use`permission on this project.\nRunning the command produces a SAML IdP config file that is similar to the following:\n```\n{\u00a0 \"type\": \"external_account\",\u00a0 \"audience\": \"//iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID\",\u00a0 \"subject_token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\u00a0 \"token_url\": \"https://sts.googleapis.com/v1/token\",\u00a0 \"workforce_pool_user_project\": \"WORKFORCE_POOL_USER_PROJECT\",\u00a0 \"credential_source\": {\u00a0 \u00a0 \"executable\": {\u00a0 \u00a0 \u00a0 \"command\": \"EXECUTABLE_COMMAND\",\u00a0 \u00a0 \u00a0 \"timeout_millis\": \"EXECUTABLE_TIMEOUT\",\u00a0 \u00a0 \u00a0 \"output_file\": \"EXECUTABLE_OUTPUT_FILE\"\u00a0 \u00a0 }\u00a0 }}\n```An executable interacts with the user through the command line.\nIn the previous command, replace the following:- ``: (required) the path to the file that provides the credentials generated by the executable.\n- ``: (required) a non-zero timeout value also signals the command to use interactive mode.\n```\n {\n  \"version\": 1,\n  \"success\": true,\n  \"token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n  \"saml_response\": \"...\",\n  \"expiration_time\": 1620499962\n }\n```\nThese fields are required for a successful response, with the exception of `expiration_time` . Missing the `expiration_time` will be treat as the signal of we are going to run the executable any way.\nThe executable must surface any errors to the `executable-output-file` in the following JSON format:\n```\n{\n \"version\": 1,\n \"success\": false,\n \"code\": \"401\",\n \"message\": \"Caller not authorized.\"\n}\n```\nThese fields are all required for an error response. The code and message fields are used by the client libraries when raising the appropriate error.\nThe command return fields for a success execution is exactly the same with a normal executable-sourced credentials results above.\nThe environment variables are also the same as a normal executable-sourced credentials.\nTo generate an interactive executable-sourced credential, add the parameter `--executable-interactive-timeout-millis` .\n```\ngcloud iam workforce-pools create-cred-config \\\u00a0 \u00a0 locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID \\\u00a0 \u00a0 --subject-token-type=urn:ietf:params:oauth:token-type:saml2 \u00a0\\\u00a0 \u00a0 --executable-command=EXECUTABLE_COMMAND \\\u00a0 \u00a0 --executable-interactive-timeout-millis=EXECUTABLE_INTERACTIVE_TIMEOUT \\\u00a0 \u00a0 --executable-output-file=EXECUTABLE_OUTPUT_FILE \\\u00a0 \u00a0 --workforce-pool-user-project=WORKFORCE_POOL_USER_PROJECT \\\u00a0 \u00a0 --output-file /path/to/generated/config.json\n```\nReplace the following:- ``: the workforce pool ID.\n- ``: the provider ID.\n- ``: the full command, including arguments, to run to retrieve the subject token, formatted as follows:`--executable-command=\"/path/to/command --foo=bar\")`.\n- ``: a duration in milliseconds to wait for the executable to run.\n- ``: a file path to the third-party credentials generated by the executable. This is useful for caching the credentials. The Auth libraries first check for this path before running the executable.\n- ``: the project number or ID used for quota and billing. The principal set the`serviceusage.services.use`permission on this project.\nRunning the command produces a SAML IdP config file similar to the following:\n```\n{\u00a0 \"type\": \"external_account\",\u00a0 \"audience\": \"//iam.googleapis.com/locations/global/workforcePools/<var>WORKFORCE_POOL_ID<var>/providers/<var>PROVIDER_ID</var>\",\u00a0 \"subject_token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\u00a0 \"token_url\": \"https://sts.googleapis.com/v1/token\",\u00a0 \"workforce_pool_user_project\": \"<var>WORKFORCE_POOL_USER_PROJECT</var>\",\u00a0 \"credential_source\": {\u00a0 \u00a0 \"executable\": {\u00a0 \u00a0 \u00a0 \"command\": \"<var>EXECUTABLE_COMMAND</var>\",\u00a0 \u00a0 \u00a0 \"interactive_timeout_millis\": \"<var>EXECUTABLE_INTERACTIVE_TIMEOUT</var>\",\u00a0 \u00a0 \u00a0 \"timeout_millis\": \"<var>EXECUTABLE_TIMEOUT</var>\",\u00a0 \u00a0 \u00a0 \"output_file\": \"<var>EXECUTABLE_OUTPUT_FILE</var>\",\u00a0 \u00a0 }\u00a0 }}\n```\n **Note:** `timeout_millis` is included in the configuration because an interactive executable-sourced credential can also run in non-interactive mode in some cases. The gcloud CLI configuration generator auto fills that field with default timeout setting of 30 seconds.\nTo sign in, run the following command:\n```\ngcloud auth login --cred-file=/path/to/config.json\n```\nNote that the CLIs (gcloud, bq, gsutil) don't currently support executable-sourced credential types.\nFor headless flows, `gcloud` automatically uses the following scope: https://www.googleapis.com/auth/cloud-platform. `gcloud` then transparently posts your credentials to the Security Token Service endpoint, where it is exchanged for temporary Google Cloud access tokens.\nYou can now execute `gcloud` commands using the gcloud CLI.\n### Use the Google Cloud client libraries\nIf you use a supported client library, you can configure the client library so that it generates Google credentials automatically. When possible, we recommend that you generate credentials automatically, so that you don't need to implement the token-exchange process yourself.\nGoogle Cloud client library support for workforce pools are supported in the following languages: Node.js, Java, Python, Go and C++ (gRPC).\nTo use client libraries with these services or languages, do the following:\nTo authenticate using workforce identity federation, use the [gcloud auth login](/sdk/gcloud/reference/auth/login) command:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nwhere `` is the file path to the credential configuration file.\nSupport for workforce identity federation in bq is available in [version 390.0.0 and later versions of the Google Cloud CLI](/sdk/docs/components#updating_components) .\nMost of the [Google Cloud Client Libraries for C++](https://github.com/googleapis/google-cloud-cpp) support workforce identity federation by using a `ChannelCredentials` object, which is created by calling `grpc::GoogleDefaultCredentials()` . To initialize this credential, you must build the client libraries with version 1.42.0 or later of [gRPC](https://github.com/grpc/grpc) .\nThe Cloud Storage Client Library for C++ uses the REST API, not gRPC, so it doesn't support workforce identity federation.\n```\nauto creds = grpc::GoogleDefaultCredentials();// Create a channel, stub and make RPC calls (same as in the previous example)auto channel = grpc::CreateChannel(\"greeter.googleapis.com\", creds);std::unique_ptr<Greeter::Stub> stub(Greeter::NewStub(channel));grpc::Status s = stub->sayHello(&context, *request, response);\n```\nTo authenticate using workforce identity federation, use the [gcloud auth login](/sdk/gcloud/reference/auth/login) command:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nwhere `` is the file path to the credential configuration file.\nSupport for workforce identity federation in `gcloud` is available in [version 392.0.0 and later versions of the Google Cloud CLI](/sdk/docs/components#updating_components) .\nClient libraries for Go support workforce identity federation if they use version v0.0.0-20211005180243-6b3c2da341f1 or later of the `golang.org/x/oauth2` module.\n```\nimport (\u00a0 \"context\"\u00a0 \"fmt\"\u00a0 \"log\"\u00a0 \"cloud.google.com/go/storage\"\u00a0 \"google.golang.org/api/iterator\"\u00a0 \"google.golang.org/api/option\"\u00a0 \"io/ioutil\")ctx := context.Background()client, err := storage.NewClient(ctx)# Explicit initialization can also be used.# var jsonPath = \"/path/to/3p-credentials.json\"# client, err := storage.NewClient(ctx, option.WithCredentialsFile(jsonPath))if err != nil {\u00a0 log.Fatal(err)}fmt.Println(\"Buckets:\")it := client.Buckets(ctx, projectID)for {\u00a0 battrs, err := it.Next()\u00a0 if err == iterator.Done {\u00a0 \u00a0 break\u00a0 }\u00a0 if err != nil {\u00a0 \u00a0 log.Fatal(err)\u00a0 }\u00a0 fmt.Println(battrs.Name)}\n```\nTo authenticate using workforce identity federation, use one of the following methods:\nWhen using gsutil in conjunction with gcloud, sign in as normal:\n```\ngcloud auth login --cred-file=FILEPATH.json\n```\nWhen using gsutil as a stand-alone command-line application, edit the .boto file to include the following section:\n```\n[Credentials]\ngs_external_account_file = FILEPATH\n```\n`` in both cases is the file path to the credential configuration file.\nSupport for workforce identity federation in gsutil is available in [version 379.0.0 and later versions of the Google Cloud CLI](/sdk/docs/components#updating_components) .\nClient libraries for Java support workforce identity federation if they use version 1.2.0 or later of the [com.google.auth:google-auth-library-oauth2-http artifact](https://search.maven.org/artifact/com.google.auth/google-auth-library-oauth2-http) .\n```\nimport com.google.auth.oauth2.GoogleCredentials;import com.google.cloud.storage.Storage;import com.google.cloud.storage.StorageOptions;GoogleCredentials credentials = GoogleCredentials.getApplicationDefault();GoogleCredentials sourceCredentials = credentials\u00a0 \u00a0 .createScoped(Arrays.asList(\"https://www.googleapis.com/auth/devstorage.read_only\"));Storage storageService = StorageOptions.newBuilder().setProjectId(\"project-id\")\u00a0 \u00a0 .setCredentials(sourceCredentials).build().getService();\n```\nClient libraries for Node.js support workforce identity federation. You must use version 7.10.0 or later of the [google-auth-library package](https://github.com/googleapis/google-auth-library-nodejs) . Unlike workload identity pools, workforce pools are associated with an organization and not a Google Cloud project. When you create a `GoogleAuth` object, you must specify a project ID. For more information, see the [README for the google-auth-library package](https://github.com/googleapis/google-auth-library-nodejs#using-external-identities) .\n```\nconst auth = new GoogleAuth({\u00a0 scopes: 'https://www.googleapis.com/auth/cloud-platform',\u00a0 // Specify a project ID.\u00a0 projectId: 'CLOUD_RESOURCE_PROJECT_ID',});# API request using Auth library.const client = await auth.getClient();const url =\u00a0 \u00a0 `https://storage.googleapis.com/storage/v1/b?projects=${projectId}`;const res = await client.request({url});console.log(res.data);\n```\nClient libraries for Python support workforce identity federation if they use version 2.3.0 or later of the [google-auth package](https://github.com/googleapis/google-auth-library-python) .\n```\nfrom google.cloud import storageimport google.authcredentials, project = google.auth.default(\u00a0 \u00a0 scopes=['https://www.googleapis.com/auth/devstorage.read_only'])client = storage.Client(\u00a0 \u00a0 project=\"project-id\", credentials=credentials)\n```\nIn the above example, the `project` value can be `None` if the library is unable to auto-discover this. You can pass it explicitly when using a service instance (as in the storage client example) or set via the environment variable `GOOGLE_CLOUD_PROJECT` .\nFor details, see the [user guide for the google-auth package](https://github.com/googleapis/google-auth-library-python/blob/master/docs/user-guide.rst#using-external-identities) .\n### Use the REST API\nYou can call the Google Cloud Security Token Service API to exchange your external credentials for Google Cloud access tokens.\n```\ncurl https://sts.googleapis.com/v1/token \\\u00a0 \u00a0 --data-urlencode \"audience=//iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/providers/PROVIDER_ID\" \\\u00a0 \u00a0 --data-urlencode \"grant_type=urn:ietf:params:oauth:grant-type:token-exchange\" \\\u00a0 \u00a0 --data-urlencode \"requested_token_type=urn:ietf:params:oauth:token-type:access_token\" \\\u00a0 \u00a0 --data-urlencode \"scope=https://www.googleapis.com/auth/cloud-platform\" \\\u00a0 \u00a0 --data-urlencode \"subject_token_type=SUBJECT_TOKEN_TYPE\" \\\u00a0 \u00a0 --data-urlencode \"subject_token=EXTERNAL_SUBJECT_TOKEN\" \u00a0\\\u00a0 \u00a0 --data-urlencode \"options={\\\"userProject\\\":\\\"BILLING_PROJECT_NUMBER\\\"}\"\n```\nReplace the following:\n- ``: the full [resource name](/apis/design/resource_names) of the provider that issues the subject token.\n- ``: the provider ID\n- `` : set to one of the following:- `urn:ietf:params:oauth:token-type:id_token`for OIDC ID tokens\n- `urn:ietf:params:oauth:token-type:saml2`for SAML assertions\n- `` : the IdP-issued token that represents the identity of the principal for whom the access token is requested. Note: If you use OIDC the token is JWT formatted.\n- `` : the project number or ID used for quota and billing. The principal needs to have `serviceusage.services.use` permission on this project.\nThe response is similar to the following:\n```\n{\u00a0 \"access_token\": \"ya29.dr.AaT61Tc6Ntv1ktbGkaQ9U_MQfiQw...\",\u00a0 \"issued_token_type\": \"urn:ietf:params:oauth:token-type:access_token\",\u00a0 \"token_type\": \"Bearer\",\u00a0 \"expires_in\": 3600}\n```\n### Manage sessions using the gcloud CLI\nThe temporary Google Cloud tokens that `gcloud` obtains from the Security Token Service endpoint expire after a specified time interval. When the token is about to expire, `gcloud` inspects the credentials file you provided and inspects the validity of the credentials you received from your IdP. If your credentials are still valid, `gcloud` proceeds to transparently obtain a new Google Cloud access token and your current session runs without interruption.\nIf your credentials have expired, then no new Google Cloud tokens are issued, and any calls you make with those credentials fail. At this point, you must re-authenticate.\nYou can terminate your session by executing the following command:\n```\ngcloud auth revoke\n```\n`gcloud` supports multiple user sessions. To get the list of sessions, including the currently active one, execute the following command:\n```\ngcloud auth list\n```\nThe output of the command is similar to the following:\n```\nCredentialed Accounts\nACTIVE ACCOUNT\n*   bola@example.com\n   principal://iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/subject/kalani@example.com\n```\nTo switch to a different session and set it as active, execute the following command:\n```\ngcloud config set account principal://iam.googleapis.com/locations/global/workforcePools/WORKFORCE_POOL_ID/subject/SUBJECT_ID\n```\n## What's next\n- [Delete workforce identity federation users and their data](/iam/docs/workforce-delete-user-data) \n- Learn which Google Cloud products [support workforce identity federation](/iam/docs/federated-identity-supported-services) \n- [Set up user access to console (federated)](/iam/docs/workforce-console-sso)", "guide": "IAM"}