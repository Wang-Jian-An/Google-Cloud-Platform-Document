{"title": "Cloud Architecture Center - Authenticating users to Firestore with Identity Platform and Google identities", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Authenticating users to Firestore with Identity Platform and Google identities\nThis document shows you how to set up user-based access control to a [Firestore](/firestore) database using [Identity Platform](/identity-platform) as your user identity and access management platform. Identity Platform lets you add an authentication layer to your application so that you can protect and manage customer credentials. Firestore is a flexible NoSQL, document-oriented database. It uses a rules language called Firestore [Security Rules](https://firebase.google.com/docs/firestore/security/get-started) to control access to this data, so you don't need to write server-side authorization code.\nThis document is intended for developers and security professionals who want to use Firestore with Firestore Security Rules, and who want to authenticate their users with Identity Platform with an external sign-in provider such as Google. The code in this document demonstrates two ways to use Identity Platform and Firestore:- REST API calls, using JavaScript to call Identity Platform and Firestore APIs. This approach lets you have full control over how your web app creates requests for Identity Platform.\n- Identity Platform Client SDK, using the Identity Platform Client SDK and the Firestore SDK to manage the sign-in process to Identity Platform and querying Firestore. The SDK provides JavaScript wrapper functions over Identity Platform REST APIs, which lets you call Identity Platform by using JavaScript functions and objects, instead of manually creating HTTP requests.\nThe Identity Platform Client SDK and the Firebase Client SDK share the same SDK. The SDK supports all of the capabilities of Identity Platform. To preserve backward compatibility, the SDK retains the Firebase branding.", "content": "## ArchitectureThe following diagram shows the logical architecture that's described in this document:In addition to Identity Platform and Firestore, the document uses and demonstrates the following components:- **Web app** : An app that lets users sign in to Identity Platform with Google identities. It then queries Firestore for information about your signed-in user.\n- **Google Sign-In** : The identity provider used in this example.\n- **Authentication handler** : A service endpoint that gets the response from Google, performs the sign-in with Identity Platform, and sends the result back to the web app to complete the sign-in process.\n## Objectives\n- Set up Identity Platform for your Google Cloud project.\n- Add Google as a sign-in provider for Identity Platform.\n- Use Firestore Security Rules to control access to a Firestore database.\n- Sign in users to a web app with the Identity Platform APIs and the Identity Platform Client SDK.\n- Securely access Firestore from a client-side web app using the Firestore REST API and the Firestore JavaScript client SDK.\n## CostsIn this document, you use the following billable components of Google Cloud:- [Identity Platform](/identity-platform/pricing) \n- [Firestore](/firestore/pricing) \nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . ## Before you begin\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) If you select an existing project, you must select a project that meets the following conditions:- Datastore is not enabled.\n- App Engine is not enabled.\n- The project doesn't include a Firestore database   with existing security rules. You overwrite any existing rules   with the rules that are described in this document.\n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable Identity Platform:- Go to the Identity Platform Marketplace page in the Google Cloud console. [   Go to the Identity Platform Marketplace page](https://console.cloud.google.com/marketplace/details/google-cloud-platform/customer-identity) \n- Click **Enable Identity Platform** , and wait for the operation   to complete.\n- Enable Firestore:- In the Google Cloud console, open the menu on the left-hand side and   select **Firestore** .\n- Select a Firestore mode. Click **Select Native Mode** .\n- Choose where to store your data. Select the region   closest to your location. Click **Create Database** .\nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Configuring Identity PlatformTo enable user authentication in Identity Platform, you must add identity providers.\nBefore you configure a Google provider in Identity Platform, you must configure the Google [OAuth consent screen](https://support.google.com/cloud/answer/6158849#userconsent) . Users see this consent screen the first time they sign in to your web app. In the OAuth consent screen configuration, you can set attributes such as the name of your app, your app logo, and a support email address.- In the Google Cloud console, go to the **Identity Providers** page. [ Go to the Identity Providers page](https://console.cloud.google.com/customer-identity/providers) \n- Click **Add a provider** .\n- Select **Google** , and in the **New identity provider** page, click the **APIs and Services** link. The **Credentials** page opens in a new tab. Don't close the previous tab, because you need to copy from the **Credentials** page to the **New identity provider** page.\n- On the **Credentials** page, click the credentials **Web client (auto\ncreated by Google Service)** .\n- Copy the **Client ID** value, go to the tab showing the **New identity\nprovider** page, and paste the value in the **Web Client ID** field. Repeat this step to copy the **Client secret** value to the **Web Client Secret** field.\n- On the **New Identity Provider** page, click **Save** .\n- Return to the **Credentials** page and click **OAuth consent screen** .\n- Select **External** , and then click **Create** .\n- On the **OAuth consent screen** page, add the following information:- **Application name** :`Identity Platform Tutorial`\n- **Support email** : Select your email address from the drop-down list.\n- Click **Save** .\n- On the **Edit app registration** page, add the following information:- **App name** :`Identity Platform Tutorial`\n- **User support email** : Select your email address from the drop-down list.\n- **Email addresses** : Type your email address.\n- Click **Save and continue** .\n- On the **Scopes** and **Optional info** pages, click **Save and continue** .\n- On the **Summary** page, click **Back to dashboard** .\n## Configuring FirestoreThe new Firestore database you created is currently empty. The new Firestore database also has a default set of security rules that allow anyone to perform read operations on the database. These default rules prevent anyone from writing to the database. In the next steps, you populate the database with data and update the security rules to limit read (query) requests to authorized users.\n### Create test data in FirestoreIn this procedure, you test the security rules by querying Firestore collections from a web app.\nFirst, create several documents to help you test the Firestore security rules. Collection and field names are case-sensitive. Use lowercase names for the collection and fields to prevent the web app from failing when it sends a query to Firestore.- Go to the [Firestore page](https://console.cloud.google.com/firestore) in the Google Cloud console.\n- Click **Start collection** .\n- In the **Collection ID** field, type`customers`.\n- Create a document with the following information: **Document ID** : `bob@example.com`| Field name | Field type | Field value   |\n|:-------------|:-------------|:--------------------|\n| name   | String  | Bob     |\n| company  | String  | ExampleOrganization |\n- Click **Save and add another** .\n- Click **Clear field values** .\n- Enter the following information:\n- **Document ID** : your email address| Field name | Field type | Field value  |\n|:-------------|:-------------|:------------------|\n| name   | String  | Your name   |\n| company  | String  | Your company name |\n- Click **Save** .\n### Create Firestore security rulesFirestore security rules can be evaluated using user authentication metadata, data from incoming queries, and existing data in your database.\nIn this procedure, you create a security rule for Firestore that is based on the signed-in user's email address and provider name.\nUse the Firebase console to manage the Firestore security rules.- Open the [Firebase console](https://console.firebase.google.com/) , and click your project.\n- Click **Firestore** on the left-hand side of the screen.\n- On the Firestore page, click the **Rules** tab.\n- If you choose to use an existing project that has a Firestore database with security rules, and you are planning on [cleaning up the project](#clean-up) when you finish the procedures in this document, make a note of your existing security rules.\n- Replace the existing rules with the following rule:```\nrules_version = '2';\nservice cloud.firestore {\n match /databases/{database}/documents {\n match /customers/{customerID} {\n allow read:\n if request.auth.uid != null\n  && request.auth.token.firebase.sign_in_provider == \"google.com\"\n  && request.auth.token.email == customerID\n }\n }\n}\n```This rule grants read-only permission for the `customers` collection. The rule verifies that you have signed in through the Google sign-in provider that you configured in Identity Platform. It also makes sure that you can only retrieve documents with a customer ID that matches your email address. **Note:** Requests to Firestore are always evaluated against the database security rules, whether the request is for retrieving a single document, or for executing a query. To learn how to write queries that have the same constraints as your security rules, see the [Securely query data](https://firebase.google.com/docs/firestore/security/rules-query) documentation.\n- Click **Publish** .\n## Configuring the test environmentTo test your Firestore security rules, you start by creating a web app that requires users to sign in. The web app is available on [GitHub](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform) , and downloads into a Cloud Shell environment, where you can test the application. After the user signs in, the web app reads documents from Firestore and displays their content.\n### Configure the web app\n- Go to the Identity Platform providers page. [ Go to the Identity Platform providers page](https://console.cloud.google.com/customer-identity/providers) \n- On the right-hand side of the page, click **Application setup details** .\n- Copy the values listed next to **apiKey** and **authDomain** to your clipboard and then click **Close** .\n- Click **Google Cloud** at the top of the page, and copy the **Project ID** from the **Project Info** card.\n- Click **Open in Cloud Shell** to open Cloud Shell, clone the GitHub repository, and open the`config.js`file. When the Open in Cloud Shell dialog appears, click **Confirm** . [ Open in Cloud Shell](https://console.cloud.google.com/customer-identity/providers) \n- In the`config.js`file, replace the placeholders`[API_KEY]`,`[AUTH_DOMAIN]`, and`[PROJECT_ID]`with the values you copied in the previous step. Your code injects these values into the URL and body of the messages it creates when it sends requests to Identity Platform.\n### Register the custom authentication handlerWhen users access your web app, they are redirected to sign in using Google as an identity provider. After the user successfully signs in to Google, Google returns a redirect (302) response with the user's token to the authentication handler, as shown in the [architecture](/solutions/authenticating-users-to-firestore-with-identity-platform-and-google-identities#architecture) diagram. In OAuth 2.0, you must register every redirect URL in the configuration for the provider in advance, to prevent the provider from sending your token to an unknown destination. The [Redirect URL Registration](https://www.oauth.com/oauth2-servers/redirect-uris/redirect-uri-registration/) page on the OAuth 2.0 website explains the reasons for this restriction.\nIn this step, you update the authorized redirect URLs list to trust the authentication handlers that are used in this document.\nThe URL list is part of Google OAuth 2.0 client configuration\u2014the page where you copied the client ID and client secret from when you [configured Identity Platform](/solutions/authenticating-users-to-firestore-with-identity-platform-and-google-identities#configuring_identity_platform) .\nIn this architecture, you use two different authentication handlers:- An authentication handler hosted by Identity Platform.\n- A custom authentication handler hosted by the web app.\nThe authentication handler hosted by Identity Platform is accessible through the following endpoint, which is managed by Google: `https://[YOUR_PROJECT_ID].firebaseapp.com/__/auth/handler`\nTo use this handler, you don't need to update the authorized URL list in the client settings for Google OAuth 2.0. When you enabled Identity Platform earlier in this document, it added the URL automatically to the list of authorized URLs.\nIf you use the Identity Platform Client SDK, the SDK uses this built-in authentication handler. The authentication handler for Identity Platform requires that your web app use this SDK because the SDK exchanges state objects with the handler. For example, the SDK informs the handler where to redirect users after they successfully sign in to Identity Platform.\nFor the custom authentication handler hosted by the web app, when you use the Identity Platform REST APIs directly from JavaScript, we recommend implementing and hosting your own authentication handler rather than the SDK.\nThis document describes a sample authentication handler that manages the sign-in process to Identity Platform when it receives the user token from Google. You must add the URL for the custom handler to the authorized URLs list in your Google OAuth 2.0 client settings.\nIn this document, you run the web app from Cloud Shell. After you start the web app, find the hostname of your Cloud Shell instance and update the provider's configuration accordingly.- Run the web app from Cloud Shell:```\nnpm installnode app.js\n```\n- Wait for the following output to show: `Example app listening on port 8080!`\n- Click the **Web Preview** icon, and then click **Preview onport 8080** . Wait for the new tab to show the web page, and copy the value under **Auth handler URL (for Google OAuth 2.0 Client)** .\n- Go to the **Credentials** page.  [Go to the Credentials page](https://console.cloud.google.com/apis/credentials) \n- On the **Credentials** page, click **Web client (auto created by GoogleService)** .\n- On the **Authorized redirect URIs** page, click **Add URI** , and paste the URL you previously copied.\n- Click **Save** , and leave the web app running.\n### Authorize the web app domainWhen you use the Identity Platform authentication handler, the handler redirects you back to the web app, along with your user information and tokens. To prevent sending your information to an unauthorized domain, you need to authorize the domain where your web app is running.\n **Note:** For brevity, the custom handler doesn't implement an authorized domain validation mechanism.- Go back to the default web page for the web app, and copy the value under **Hostname (for Identity Platform Authorized Domains)** .\n- Go to the Identity Platform Settings page. [ Go to the Identity Platform Settings page](https://console.cloud.google.com/customer-identity/providers) \n- Click the **Security** tab, and then click **Add domain** .\n- Paste the domain you copied, click **Add** , and then click **Save** .\n- Keep the web app running in Cloud Shell. You need it for the next task.\n## Signing in to Identity Platform with your Google identityThe following diagram expands the [high-level architecture diagram](/solutions/authenticating-users-to-firestore-with-identity-platform-and-google-identities#architecture) at the beginning of this guide. This diagram goes into the details of the authentication process that's described in this document to show the chronological flow of events. The events start with the user clicking a sign-in button, and end with the web app retrieving data from Firestore, using the user's identity:\n- A user of your web app clicks **Sign in with Google** in the web app.\n- The web app queries Identity Platform for the sign-in URL of the chosen identity provider (Google in this case).\n- The web app redirects the user to the sign-in page for your identity provider, along with a callback URL that points to the authentication handler.\n- On the provider sign-in page, the user enters their credentials and consents to the authorization requested by the web app.\n- After the user successfully signs in, the provider generates a token and sends a redirect to the previously provided callback URL.\n- The authentication handler receives the Google-issued token and sends it to Identity Platform to sign the user in. Identity Platform validates the token, signs the user in, and returns an Identity Platform issued [ID token and a refresh token](https://firebase.google.com/docs/auth/admin/manage-sessions) with the user's information. When Identity Platform signs a user in for the first time, it creates a matching user profile in its database. The account information made available by Google is used to populate the user's profile.\n- After you sign in to Identity Platform, the handler redirects you back to the web app, along with the new tokens it got from Identity Platform.\n- To send requests to Firestore, the web app attaches the user's ID token to every Firestore request. The Firestore security rules stipulate that Firestore treats any request without an ID token as an anonymous request, and it is denied.\n- ID tokens issued by Identity Platform expire after one hour. If the ID token expires, the web app uses the cached refresh token to retrieve a new ID token from Identity Platform.\nThe sample web app demonstrates how to interact with Identity Platform and Firestore in two ways.\nThe first method is with the Identity Platform REST API:- This technique uses custom code that calls the Identity Platform REST APIs using JavaScript.\n- The API calls are implemented in the`site/identity-platform-auth-helper.js`file. The authentication handler is implemented in the`views/auth-handler.ejs`file.\n- The helper and the handler exchange state objects to enable redirecting you back to the web app after you successfully sign in.\nThe second method is with the Identity Platform Client SDK:- With this technique, the SDK handles the sign-in process.\n- The SDK implements all the required API calls and exposes a set of functions to the developer to control which sign-in flow to initiate.\n### Sign in using Identity Platform REST APIsThere are two main API calls that control the sign-in flow with Google as the identity provider.\n- Get provider URL and identifier. The [accounts.createAuthUri](/identity-platform/docs/reference/rest/v1/accounts/createAuthUri) method returns an authorization URL for the given identity provider. The web app then navigates to the returned authorization URL to start the sign-in process with the selected identity provider (for example, Google).The following code snippet shows how to call this API: [  site/identity-platform-auth-helper.js ](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/identity-platform-auth-helper.js) [View on GitHub](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/identity-platform-auth-helper.js) ```\nIdentityPlatformAuthHelper.prototype.createAuthUri = function(providerId, tenantId) {\u00a0 // https://cloud.google.com/identity-platform/docs/reference/rest/v1/accounts/createAuthUri\u00a0 const createAuthUriUrl = `${this.identityPlatformBaseUrl}/accounts:createAuthUri?key=${config.apiKey}`;\u00a0 const request = {\u00a0 \u00a0 'providerId' : providerId,\u00a0 \u00a0 'tenantId' : tenantId,\u00a0 \u00a0 'continueUri' : this.authHandlerUrl,\u00a0 };\u00a0 return fetch(\u00a0 \u00a0 \u00a0 createAuthUriUrl,\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 contentType: 'application/json',\u00a0 \u00a0 \u00a0 \u00a0 method: 'POST',\u00a0 \u00a0 \u00a0 \u00a0 body: JSON.stringify(request)\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 )\u00a0 .then(response => response.json())\u00a0 .then(data => {\u00a0 \u00a0 return {\u00a0 \u00a0 \u00a0 \"authUri\" : data.authUri,\u00a0 \u00a0 \u00a0 \"sessionId\" : data.sessionId\u00a0 \u00a0 };\u00a0 })\u00a0 .catch(error => {\u00a0 \u00a0 console.error(error);\u00a0 });};\n``` **Note:** The code supports showing the sign-in page for the identity provider either in a popup or by redirecting your browser to the sign-in page. This feature is implemented in the script file `site/identity-platform-auth-helper.js` , in the `IdentityPlatformAuthHelper.prototype.signInWithPopup` and `IdentityPlatformAuthHelper.prototype.signInWithRedirect` functions.\n- Sign in to Identity Platform using a Google-issued token. The [accounts.signInWithIdp](/identity-platform/docs/reference/rest/v1/accounts/signInWithIdp) method signs the user in to Identity Platform, using the authorization response from the identity provider. The API responds to this request with a new token, issued by Identity Platform. The web app calls this API after it receives a successful authorization response from the identity provider. The following code snippet shows how to call this API: [  site/identity-platform-auth-helper.js ](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/identity-platform-auth-helper.js) [View on GitHub](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/identity-platform-auth-helper.js) ```\nIdentityPlatformAuthHelper.prototype.signInWithIdp = function(data) {\u00a0 authState = this.getAuthState();\u00a0 this.authHandlerUrl = authState.authHandlerUrl;\u00a0 // https://cloud.google.com/identity-platform/docs/reference/rest/v1/accounts/signInWithIdp\u00a0 const signInWithIdpUrl = `${this.identityPlatformBaseUrl}/accounts:signInWithIdp?key=${config.apiKey}`;\u00a0 const request = {\u00a0 \u00a0 \u00a0 'requestUri' : this.authHandlerUrl,\u00a0 \u00a0 \u00a0 'sessionId' : authState.sessionId,\u00a0 \u00a0 \u00a0 'returnRefreshToken' : true,\u00a0 \u00a0 \u00a0 'returnSecureToken' : true,\u00a0 \u00a0 \u00a0 'tenantId' : authState.tenantId\u00a0 \u00a0 };\u00a0 if (authState.providerId == 'google.com' || authState.providerId.startsWith('saml.')) {\u00a0 \u00a0 request.postBody = `${data}&providerId=${authState.providerId}`;\u00a0 } else {\u00a0 \u00a0 throw new Error('This sample script only supports the google.com and SAML providers for Identity Platform');\u00a0 }\u00a0 fetch(\u00a0 \u00a0 \u00a0 signInWithIdpUrl,\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 contentType: 'application/json',\u00a0 \u00a0 \u00a0 \u00a0 method: 'POST',\u00a0 \u00a0 \u00a0 \u00a0 body: JSON.stringify(request)\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 )\u00a0 .then(response => response.json())\u00a0 .then(data => {\u00a0 \u00a0 this.user = data;\u00a0 \u00a0 this.signedInHandler(this.user);\u00a0 })\u00a0 .catch(error => {\u00a0 \u00a0 console.error(error);\u00a0 });}\n```The `postBody` field value has different formats, depending on the selected identity provider and the authorization protocol it uses. The code handles the Google identity provider with its OpenID Connect (OIDC) token, and SAML-based identity providers with their provided SAML responses. If you are using other types of authorization tokens, such as OAuth 2.0 or OAuth 1.0 access tokens, refer to the API [documentation](/identity-platform/docs/reference/rest/v1/accounts/signInWithIdp#request-body) of your provider.\nAfter a user signs in to your web app, the web app can send queries to Firestore.Before the code can trigger a request to the Firestore REST APIs, it adds the ID token that was issued and signed by Identity Platform to the request. The following code snippet shows how to create the request:\n [  site/customer-info-with-api.js ](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/customer-info-with-api.js) [View on GitHub](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/customer-info-with-api.js) \n```\nfunction showCustomerInformation(userEmail) {\u00a0 $('#customer-information').show();\u00a0 $('#output').empty();\u00a0 const idTokenPromise = authHelper.getIdToken();\u00a0 const firestoreEndpoint = 'https://firestore.googleapis.com/v1';\u00a0 const defaultDbPath = `projects/${config.projectId}/databases/(default)/documents`;\u00a0 const collectionId = 'customers';\u00a0 // Call Firestore via its REST API and authenticate with the user's ID token\u00a0 idTokenPromise\u00a0 .then(idToken => {\u00a0 \u00a0 console.log(`JWT Token: ${idToken}`);\u00a0 \u00a0 return fetch(\u00a0 \u00a0 \u00a0 `${firestoreEndpoint}/${defaultDbPath}/${collectionId}/${userEmail}`,\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 headers: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'Authorization': 'Bearer ' + idToken\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 contentType: 'application/json',\u00a0 \u00a0 \u00a0 \u00a0 method: 'GET'\u00a0 \u00a0 \u00a0 })\u00a0 })\u00a0 .then(response => response.json())\u00a0 .then(data => {\u00a0 \u00a0 \u00a0 if (data.error) {\u00a0 \u00a0 \u00a0 \u00a0 throw data.error.message;\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 var fields = data.fields;\u00a0 \u00a0 \u00a0 $('#output').append($('<p>').text(`Id: ${userEmail}`));\u00a0 \u00a0 \u00a0 $('#output').append($('<p>').text(`Name: ${fields.name.stringValue}`));\u00a0 \u00a0 \u00a0 $('#output').append($('<p>').text(`Company: ${fields.company.stringValue}`));\u00a0 \u00a0 \u00a0 $('#output').append($('<p>').text(`Doc path: ${data.name}`));\u00a0 \u00a0 \u00a0 $('#output').append($('<p>').text(`Doc URL: ${firestoreEndpoint}/${data.name}`));\u00a0 })\u00a0 .catch(error => {\u00a0 \u00a0 console.error(error);\u00a0 \u00a0 $('#output').text(\"Error: \" + JSON.stringify(error));\u00a0 });}\n```\nThe `IdentityPlatformAuthHelper.getIdToken()` function returns a valid [ID token](https://auth0.com/docs/tokens/concepts/id-tokens) in the form of a [JSON Web Token](https://auth0.com/docs/glossary?term=json-web-token) (JWT), by retrieving a browser-cached token. If the token has already expired, the function renews it by calling the Identity Platform API to exchange a [refresh token](https://auth0.com/docs/tokens/concepts/refresh-tokens) for a new ID token.\nThe following snippet shows how to check whether the existing ID token is still valid or expired, and how to refresh it as needed by calling Identity Platform:\n [  site/identity-platform-auth-helper.js ](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/identity-platform-auth-helper.js) [View on GitHub](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/identity-platform-auth-helper.js) \n```\nIdentityPlatformAuthHelper.prototype.getIdToken = function() {\u00a0 const token = this.jwtDecode(this.user.idToken);\u00a0 // If exp has passed, refresh the token\u00a0 if (Date.now() > token.payload.exp * 1000) {\u00a0 \u00a0 return this.refreshToken(this.user.refreshToken);\u00a0 }\u00a0 return Promise.resolve(this.user.idToken);}IdentityPlatformAuthHelper.prototype.jwtDecode = function(t) {\u00a0 const token = {};\u00a0 token.raw = t;\u00a0 token.header = JSON.parse(window.atob(t.split('.')[0]));\u00a0 token.payload = JSON.parse(window.atob(t.split('.')[1]));\u00a0 return token;}IdentityPlatformAuthHelper.prototype.refreshToken = function(refreshToken) {\u00a0 // https://cloud.google.com/identity-platform/docs/reference/rest/client#section-refresh-token\u00a0 const tokenUrl = `https://securetoken.googleapis.com/v1/token?key=${config.apiKey}`;\u00a0 const requestBody = new URLSearchParams(`grant_type=refresh_token&refresh_token=${refreshToken}`);\u00a0 return fetch(\u00a0 \u00a0 \u00a0 tokenUrl,\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 contentType: 'application/x-www-form-urlencoded',\u00a0 \u00a0 \u00a0 \u00a0 method: 'POST',\u00a0 \u00a0 \u00a0 \u00a0 body: requestBody\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 )\u00a0 .then(response => response.json())\u00a0 .then(data => {\u00a0 \u00a0 this.user.idToken = data.id_token;\u00a0 \u00a0 this.user.refreshToken = data.refresh_token;\u00a0 \u00a0 return this.user.idToken;\u00a0 })\u00a0 .catch(error => {\u00a0 \u00a0 console.error(error);\u00a0 });}\n```\nPerform the following steps to sign in to Identity Platform with your Google identity:- Return to the tab showing the default page for the web app. If you already closed that tab, go back to the **Cloud Shell** page, click **Web preview** , and then **Preview\non port 8080** . Wait for the new tab to show the web page.\n- Change the address in the browser to show the`customer-info-with-api.html`page. The new URL has the following form:`https://` `` `-devshell.appspot.com/customer-info-with-api.html`\n- Click **Sign in with Google** and sign in with your credentials. After you sign in, a text box appears with your email address.If you want to decode the JWT to see the user information provided by Identity Platform and Google, do the following. Alternatively, read ahead to the next step.The user's information is in the [payload (second) part of the JWT](https://wikipedia.org/wiki/JSON_Web_Token#Structure) , and is base64-encoded.To decode the second part of the JWT and print the information in a JSON file using [jq](https://stedolan.github.io/jq/) , run the following command in Cloud Shell:```\ntoken=[PASTE_JWT_STRING_HERE]echo $token | awk '{split($0, a, \".\"); print a[2]; }' | base64 -d | jq\n```Continue with querying Firestore for other documents.\n- Click **Get customer info** . Your name and company name appear as you entered them in the Firestore database.\n- Change the email address to `bob@example.com` , and then click **Sign in with Google** . The response this time is the following error message:`Error: \"Missing or insufficient permissions.\" The security rule you added to Firestore limits your access to documents with an ID that matches your email address, as it appears in the token that Identity Platform created.`\n- Don't close the web page. You will use it in the next procedure.\n### Sign in using the Identity Platform Client SDKInstead of manually crafting the requests to Identity Platform, you can use the [Identity Platform Client SDK](https://firebase.google.com/docs/web/setup#add-sdks-initialize) . The SDK manages the sign-in process, and provides functions to control the sign-in flow, such as which provider to use, or whether to use a redirect or a popup.\nTo use the Identity Platform client SDK, you need to include several script files in your HTML page. The following snippet shows which scripts you need:\n [  site/customer-info-with-sdk.html ](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/customer-info-with-sdk.html) [View on GitHub](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/customer-info-with-sdk.html) \n```\n<script src=\"https://www.gstatic.com/firebasejs/7.14.4/firebase-app.js\"></script><script src=\"https://www.gstatic.com/firebasejs/7.14.4/firebase-auth.js\"></script><script src=\"https://www.gstatic.com/firebasejs/7.14.4/firebase-firestore.js\"></script>\n```\n **Note:** You can check the latest available version of the scripts in the SDK [Release Notes](https://firebase.google.com/support/release-notes/js) page.\nThe following snippet shows how to use the SDK to sign in with the Google Provider.\n [  site/customer-info-with-sdk.js ](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/customer-info-with-sdk.js) [View on GitHub](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/customer-info-with-sdk.js) \n```\n$('#sign-in').click((event) => {\u00a0 provider = new firebase.auth.GoogleAuthProvider();\u00a0 //firebase.auth().signInWithPopup(provider)\u00a0 firebase.auth().signInWithRedirect(provider)\u00a0 .then((result) => {\u00a0 \u00a0 console.log(result);\u00a0 })\u00a0 .catch((error) => {\u00a0 \u00a0 console.error(error);\u00a0 });});firebase.auth().onAuthStateChanged(function(user) {\u00a0 if (user) {\u00a0 \u00a0 $('#logged-out').hide();\u00a0 \u00a0 /* If the provider gives a display name, use the name for the\u00a0 \u00a0 personal welcome message. Otherwise, use the user's email. */\u00a0 \u00a0 const welcomeName = user.displayName ? user.displayName : user.email;\u00a0 \u00a0 console.log(firebase.auth().currentUser);\u00a0 \u00a0 $('#user').text(welcomeName);\u00a0 \u00a0 $('#logged-in').show();\u00a0 \u00a0 $('#email').val(firebase.auth().currentUser.email);\u00a0 } else {\u00a0 \u00a0 $('#logged-in').hide();\u00a0 \u00a0 $('#logged-out').show();\u00a0 \u00a0 $('#email').val('');\u00a0 }\u00a0 $('#customer-information').hide();});$('#sign-out').click(function(event) {\u00a0 firebase.auth().signOut().then(function() {\u00a0 \u00a0 console.log('Sign out successful');\u00a0 }, function(error) {\u00a0 \u00a0 console.error(error);\u00a0 });});\n```\nThe [firebase.auth().signInWithRedirect()](https://firebase.google.com/docs/reference/js/auth#signinwithredirect) function starts the sign-in process in the same browser window, by redirecting the user to the provider's sign-in page. Using the **GoogleAuthProvider** instructs the function to initiate the Google sign-in flow.\nYou can replace the redirect behavior with a popup behavior, by calling the `signInWithPopup` function instead.\nTo use other authentication providers, add any type that implements the [firebase.auth.AuthProvider interface](https://firebase.google.com/docs/reference/node/firebase.auth.AuthProvider.html) . To make sure you include all the required parameters, follow your selected provider's documentation.\nThe `firebase.auth().onAuthStateChanged` function is an observer that triggers on sign-in and sign-out. On sign-in, the web app code populates the web page with information taken from the **User** object and hides the sign-in button. On sign-out, the code clears the web page and shows the sign-in button again.\nThe Identity Platform Client SDK integrates with the Firestore SDK. On every query, the Firestore SDK attaches a valid ID token, by fetching it from the Identity Platform Client SDK. The Identity Platform Client SDK is responsible for refreshing the ID token when it expires.\nThe following code snippet shows how to query Firestore using the Firestore SDK:\n [  site/customer-info-with-sdk.js ](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/customer-info-with-sdk.js) [View on GitHub](https://github.com/GoogleCloudPlatform/firestore-securing-with-identity-platform/blob/HEAD/site/customer-info-with-sdk.js) \n```\nfunction showCustomerInformation(userEmail) {\u00a0 $('#customer-information').show();\u00a0 $('#output').empty();\u00a0 const db = firebase.firestore();\u00a0 const collectionId = 'customers';\u00a0 query = db.collection(collectionId).doc(userEmail).get();\u00a0 query.then((doc) => {\u00a0 \u00a0 var fields = doc.data();\u00a0 \u00a0 $('#output').append($('<p>').text(`Id: ${doc.id}`));\u00a0 \u00a0 $('#output').append($('<p>').text(`Name: ${fields.name}`));\u00a0 \u00a0 $('#output').append($('<p>').text(`Company: ${fields.company}`));\u00a0 }).catch((error) => {\u00a0 \u00a0 console.error(error);\u00a0 \u00a0 $('#output').text(\"Error: \" + error.toString());\u00a0 });}\n```\nNotice that you don't have to write code to add the ID token to the query. The Firestore SDK and the Identity Platform Client SDK handle the authentication process.\nPerform the following steps to sign in to Identity Platform with your Google identity, and then query Firestore:- If you already closed the relevant web app tab, go back to the **Cloud\nShell** page, click **Web Preview** and then **Preview on port 8080** . Wait for the new tab to show the web page.\n- Change the address in the browser to show the **customer-info-with-sdk.html** page. The new URL has the following form:`https://` `` `-devshell.appspot.com/customer-info-with-sdk.html`\n- Click **Sign in with Google** and sign in with your credentials. After signing in, a text box appears with your email address.\n- Click **Get customer info** . Your name and company name appear, as you entered them in the Firestore database.\n- Change the email address to `bob@example.com` , and then click **Sign in with Google** . The response this time is an error message:`Error: FirebaseError: [code=permission-denied]: Missing or insufficient Permissions.`For more information on using JavaScript to query Firestore, see the [Firestore documentation](https://firebase.google.com/docs/firestore/query-data/get-data) .\n## Troubleshooting issues in the web appLearn about troubleshooting steps that you might find helpful if you run into the following issues when you run the web app.\n### Errors browsing the web app| Error                               | Notes                                                                                                           |\n|:--------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| You see either of the following error messages: Error:Could not connect to Cloud Shell on port 8080 Error:No active Cloud Shell | Make sure Cloud Shell is open and that the web app is running, as explained in Register the custom authentication handler. If you open a new Cloud Shell session, change the working directory to the directory of the web app, before running the web app: cd \"$HOME\"/cloudshell_open/securing-cloud-firestore-with-identity-platform After you run the web app, check that the following output displays: Example app listening on port 8080! |\n### Errors signing in to Google| Error                                                                | Notes                                                            |\n|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Nothing happens when you click Sign in with Google. You see the following error code: Cannot GET /undefined                                      | Make sure you have set the apiKey and authDomain variables in the config.js file, as explained in Configure the web application                              |\n| On the Google sign-in page, you see the following error message: Authorization Error - Error 400: redirect_uri_mismatch                                   | The redirect URL sent to Google doesn't match the list of URLs authorized for the OAuth client. Make sure you have configured the authorized redirect URIs, as explained in Register the custom authentication handler.        |\n| When you sign in to Google with the Identity Platform SDK, you see the following error message: This domain (***) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign-in method tab | This error might appear if the domain that Cloud Shell uses does not exist in the permitted domains list for Identity Platform. To verify that the domain name has been added to the domains list, follow the steps in Authorize the web app domain. |\n### Errors fetching customer information| Error                                                                                     | Notes                                                   |\n|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| You see either of the following error messages: Error: FirebaseError: [code=permission-denied]: Missing or insufficient permissions Error: Missing or insufficient permissions                                           | It's possible the Firestore security rules have failed to validate the token sent to Firestore. Make sure the Firestore security rules are configured properly, as explained in Create Firestore security rules. |\n| You see any of the following error messages: Error: FirebaseError: [code=unavailable]: Failed to get document because the client is offline Error: \"The project *** does not exist or it does not contain an active Datastore or Firestore database Error: \"Project id [PROJECT_ID] is malformed: it either contains invalid characters or is too long | Make sure that you set the projectId property in the config.js file, as explained in Configure the web application.                        |## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n### Delete individual resources\n- In Cloud Shell, stop the web app by pressing`Ctrl+C`.\n- Delete the cloned repository directory:```\nrm -rf \"$HOME\"/cloudshell_open/securing-cloud-firestore-with-identity-platform\n```\n- Go to the Identity Platform Settings page. [Go to the Identity Platform Settings page](https://console.cloud.google.com/customer-identity/settings) \n- Click the **Security** tab, delete the domain you added before, and then click **Save** .\n- Go to the **Identity Providers** page. [ Go to the Identity Providers page](https://console.cloud.google.com/customer-identity/providers) \n- Delete the Google provider you added before.\n- Go to **APIs & Services** , and then the **Credentials** page. [Go to the Credentials page](https://console.cloud.google.com/apis/credentials) \n- On the Credentials page, click the **Web client (auto created by GoogleService)** .\n- On the **Authorized redirect URIs** page, delete the URL you previously pasted, and then click **Save** .\n- Open the [Firebase console](https://console.firebase.google.com/) , and in the console navigation pane, click your project.\n- Select the **Database** option from the **Develop** menu on the left.\n- On the **Database** page, click the **Rules** tab.\n- Overwrite the current security rules with the ones you had before you started the document, and then click **Publish** .\n- Go to the [Firestore page](https://console.cloud.google.com/firestore) in the Google Cloud console.\n- Click the menu to the left of the **customers** collection, and then click **Delete collection** .\n- In the delete confirmation popup, type `customers` in the Collection ID field, and then click **Delete** .\n## What's next\n- Read about [Identity Platform](/identity-platform/docs) and the Identity Platform [REST APIs](/identity-platform/docs/reference/rest/v1) .\n- Learn about [configuring custom claims on users](/identity-platform/docs/how-to-configure-custom-claims) .\n- Learn how to [structure Firestore Security Rules](https://firebase.google.com/docs/firestore/security/rules-structure) .\n- Learn about [building scalable applications with Firestore](/solutions/building-scalable-apps-with-cloud-firestore) .\nExplore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Cloud Architecture Center"}