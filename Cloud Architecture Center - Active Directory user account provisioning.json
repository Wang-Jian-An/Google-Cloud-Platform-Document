{"title": "Cloud Architecture Center - Active Directory user account provisioning", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Active Directory user account provisioning\nLast reviewed 2023-02-27 UTC\nThis article shows you how to set up user and group provisioning between Active Directory and your Cloud Identity or Google Workspace account by using [Google Cloud Directory Sync (GCDS)](https://tools.google.com/dlpage/dirsync/) .\nTo follow this guide, you must have an Active Directory user that is allowed to manage users and groups in Active Directory. Also, if you don't yet have a Cloud Identity or Google Workspace account, you'll need administrative access to your DNS zone in order to [verify domains](https://support.google.com/cloudidentity/answer/7331243) . If you already have a Cloud Identity or Google Workspace account, make sure that your user has [super-admin](https://support.google.com/cloudidentity/answer/2405986) privileges.", "content": "## Objectives\n- Install GCDS and connect it to Active Directory and Cloud Identity or Google Workspace.\n- Configure GCDS to provision users and, optionally, groups to Google Cloud.\n- Set up a scheduled task for continuous provisioning.\n## CostsIf you're using the [free edition of Cloud Identity](https://support.google.com/cloudidentity/answer/7431902) , following this guide will not use any billable Google Cloud components.## Before you begin\n- Make sure you understand [how Active Directory identity management can be extended to Google Cloud](/architecture/identity/federating-gcp-with-active-directory-introduction) .\n- Decide how you want to map identities, groups, and domains. Specifically, make sure that you've answered the following questions:- Which DNS domain do you plan to use as the primary domain for Cloud Identity or Google Workspace? Which additional DNS domains do you plan to use as secondary domains?\n- Do you need to use domain substitution?\n- Do you plan to use the email address (`mail`) or User Principal Name (`userPrincipalName`) as common identifiers for users?\n- Do you plan to provision groups, and if so, do you intend to use the common name (`cn`) or email address (`mail`) as common identifiers for groups?\nFor guidance on making these decisions, refer to the [overview document on extending Active Directory identity and access management to Google Cloud](/architecture/identity/federating-gcp-with-active-directory-introduction) .\n- Before connecting your production Active Directory to Google Cloud, consider using an Active Directory test environment for setting up and testing user provisioning.\n- [Sign up for Cloud Identity](https://gsuite.google.com/signup/gcpidentity/welcome) if you don't have an account already, and [add additional DNS domains](https://support.google.com/a/answer/7502379) if necessary.\n- If you're using the [free edition of Cloud Identity](https://support.google.com/cloudidentity/answer/7431902) and intend to provision more than 50 users, [request an increase](https://support.google.com/cloudidentity/answer/7295541) of the total number of free Cloud Identity users through your support contact.\n- If you suspect that any of the domains you plan to use for Cloud Identity could have been used by employees to register consumer accounts, consider migrating these user accounts first. For more details, see [Assessing existing user accounts](/architecture/identity/assessing-existing-user-accounts) .\n## Planning the GCDS deployment\n### Deciding where to deploy GCDSGCDS can provision users and groups from an LDAP directory to Cloud Identity or Google Workspace. Acting as a go-between for the LDAP server and Cloud Identity or Google Workspace, GCDS queries the LDAP directory to retrieve the necessary information from the directory and uses the [Directory API](https://developers.google.com/admin-sdk/directory/) to add, modify, or delete users in your Cloud Identity or Google Workspace account.\nBecause Active Directory Domain Services is based on LDAP, GCDS is well suited to implement user provisioning between Active Directory and Cloud Identity or Google Workspace.\nWhen connecting an on-premises Active Directory infrastructure to Google Cloud, you can run GCDS either on-premises or on a Compute Engine virtual machine in Google Cloud. In most cases, it's best to run GCDS on-premises:- Because the information that Active Directory manages includes personally identifiable information and is usually considered sensitive, you might not want Active Directory to be accessed from outside the local network.\n- By default, Active Directory uses unencrypted LDAP. If you access Active Directory remotely from within Google Cloud, you should use encrypted communication. Although you can encrypt the connection by using LDAPS (LDAP+SSL) or [Cloud VPN](/vpn/docs) .\n- Communication from GCDS to Cloud Identity or Google Workspace is conducted through HTTPS and requires little or no change to your firewall configuration.\nYou can run GCDS on either Windows or Linux. Although it's possible to deploy GCDS on the domain controller, it's best to run GCDS on a separate machine. This machine must satisfy the [system requirements](https://support.google.com/a/answer/6123896) and have LDAP access to Active Directory. Although it's not a prerequisite for the machine to be domain joined or to run Windows, this guide assumes that Cloud Directory Sync runs on a domain-joined Windows machine.\nTo aid with setting up provisioning, GCDS includes a graphical user interface (GUI) called [Configuration Manager](https://support.google.com/a/answer/6126578) . If the server on which you intend to run GCDS has a desktop experience, you can run Configuration Manager on the server itself. Otherwise, you must run Configuration Manager locally and then copy the resulting configuration file to the server, where you can use it to run GCDS. This guide assumes that you run Configuration Manager on a server with a GUI.\n### Deciding where to retrieve dataGCDS uses LDAP to interact with Active Directory and to retrieve information about users and groups. To make this interaction possible, GCDS requires you to provide a hostname and port in the configuration. In a small Active Directory environment that runs only a single global catalog server, providing a hostname and port is not a problem because you can point GCDS directly to the global catalog server.\nIn a more complex environment that runs redundant global catalog (GC) servers, pointing GCDS to a single server does not make use of the redundancy and is therefore not ideal. Although it's possible to set up a load balancer that distributes LDAP queries across multiple global catalog servers and keeps track of servers that might be temporarily unavailable, it's preferable to use the [DC Locator](https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/enabling-clients-to-locate-the-next-closest-domain-controller) mechanism to locate servers dynamically.\nBy default, GCDS requires you to explicitly [specify the endpoint of an LDAP server](https://support.google.com/a/answer/6258071#ldap_connection) and does not support using the DC Locator mechanism. In this guide, you complement GCDS with a small PowerShell script that engages the DC Locator mechanism so that you don't have to statically configure endpoints of global catalog servers.## Preparing your Cloud Identity or Google Workspace account\n### Creating a user for GCDSTo enable GCDS to interact with the [Directory API](https://developers.google.com/admin-sdk/directory) and [Domain Shared Contacts API](https://developers.google.com/admin-sdk/domain-shared-contacts/) of Cloud Identity and Google Workspace, the application needs a user account that has administrative privileges.\nWhen signing up for Cloud Identity or Google Workspace, you already created one super-admin user. Although you could use this user for GCDS, it's preferable to create a separate user that is exclusively used by Cloud Directory Sync:- Open the [Admin console](https://admin.google.com) and sign in by using the super-admin user that you created when signing up for Cloud Identity or Google Workspace.\n- In the menu, click **Directory > Users** , and then click **Add new user** to create a user.\n- Provide an appropriate name and email address, such as:- **First Name** :`Google Cloud`\n- **Last Name** :`Directory Sync`\n- **Primary email** :`cloud-directory-sync`\nRetain the primary domain in the email address, even if the domain does not correspond to the forest that you're provisioning from.\n- Ensure that **Automatically generate a new password** is set to **Disabled** , and enter a password.\n- Ensure that **Ask for a password change at the next sign-in** is set to **Disabled** .\n- Click **Add New User** .\n- Click **Done** .\nTo enable GCDS to create, list, and delete user accounts and groups, the user needs additional privileges. Additionally, it's a good idea to exempt the user from single sign-on\u2014otherwise, you might not be able to re-authorize GCDS when experiencing single sign-on problems. Both can be accomplished by making the user a super admin:- Locate the newly created user in the list and open it.\n- Under **Admin roles and privileges** , click **Assign Roles** .\n- Enable the **Super Admin** role.\n- Click **Save** .\n **Warning:** The super-admin role grants the user full access to Cloud Identity, Google Workspace, and Google Cloud resources. To protect the user against credential theft and malicious use, we recommend that you enable [2-step verification](https://support.google.com/a/answer/175197) for the user. For more details on how to protect super-admin users, see [Security best practices for administrator accounts](https://support.google.com/a/answer/9011373) .## Configuring user provisioning\n### Creating an Active Directory user for GCDSTo enable GCDS to retrieve information about users and groups from Active Directory, GCDS also requires a domain user with sufficient access. Rather than reusing an existing Windows user for this purpose, create a dedicated user for GCDS:\n- Open the **Active Directory Users and Computers** MMC snap-in from the Start menu.\n- Navigate to the domain and organizational unit where you want to create the user. If there are multiple domains in your forest, create the user in the same domain as the GCDS machine.\n- Right-click on the right window pane and choose **New** > **User** .\n- Provide an appropriate name and email address, such as:- **First Name** :`Google Cloud`\n- **Last Name** :`Directory Sync`\n- **User logon name** :`gcds`\n- **User logon name (pre-Windows 2000)** :`gcds`\n- Click **Next** .\n- Provide a password that satisfies your password policy.\n- Clear **User must change password at next logon** .\n- Select **Password never expires** .\n- Click **Next** , and then click **Finish** .\n- Open a PowerShell console as Administrator.\n- Create a user by running the following command:```\n New-ADUser -Name \"Google Cloud Directory Sync\" `\n -GivenName \"Google Cloud\" `\n -Surname \"Directory Sync\" `\n -SamAccountName \"gcds\" `\n -UserPrincipalName (-Join(\"gcds@\",(Get-ADDomain).DNSRoot)) `\n -AccountPassword(Read-Host -AsSecureString \"Type password for User\") `\n -Enabled $True\n \n``` **Note:** You can use the \"Path\" argument to create a user under a specific organizational unit (OU). For example: `-Path \"OU=dest,OU=root,DC=domain,DC=com\"` .\nYou now have the prerequisites in place for installing GCDS.\n### Installing GCDSOn the [machine on which you will run GCDS](#deciding_where_to_deploy_cloud_directory_sync) , download and run the [GCDS installer](https://tools.google.com/dlpage/dirsync) . Rather than using a browser to perform the download, you can use the following PowerShell command to download the installer:\n```\n(New-Object net.webclient).DownloadFile(\"https://dl.google.com/dirsync/dirsync-win64.exe\", \"$(pwd)\\dirsync-win64.exe\")\n```\nAfter the download has completed, you can launch the installation wizard by running the following command:\n```\n.\\dirsync-win64.exe\n```\nIf you have already had GCDS installed, you can [update GCDS](https://support.google.com/a/answer/9346614) to ensure that you are using the [latest version](https://support.google.com/a/answer/1263028) .\n### Creating a folder for the GCDS configurationGCDS stores its configuration in an XML file. Because this configuration includes an OAuth refresh token that GCDS uses to authenticate with Google, make sure that you properly secure the folder used for configuration.\nIn addition, because GCDS does not require access to local resources other than this folder, you can configure GCDS to run as a limited user, [LocalService](https://docs.microsoft.com/en-us/windows/desktop/services/localservice-account) :- On the machine where you installed GCDS, log on as a local administrator.\n- Open a PowerShell console that has administrative privileges.\n- Run the following commands to create a folder that is named `$Env:ProgramData\\gcds` to store the configuration, and to apply an access control list (ACL) so that only GCDS and admins have access:```\n$gcdsDataFolder = \"$Env:ProgramData\\gcds\"\nNew-Item -ItemType directory -Path $gcdsDataFolder\n&icacls \"$gcdsDataFolder\" /inheritance:r\n&icacls \"$gcdsDataFolder\" /grant:r \"CREATOR OWNER:(OI)(CI)F\" /T\n&icacls \"$gcdsDataFolder\" /grant \"BUILTIN\\Administrators:(OI)(CI)F\" /T\n&icacls \"$gcdsDataFolder\" /grant \"Domain Admins:(OI)(CI)F\" /T\n&icacls \"$gcdsDataFolder\" /grant \"LOCAL SERVICE:(OI)(CI)F\" /T\n```\n- To determine the location of the ProgramData folder, run the command `Write-Host $Env:ProgramData` . On English versions of Windows, this path will usually be `c:\\ProgramData` . You need this path later.\n### Connecting to GoogleYou will now use Configuration Manager to prepare the GCDS configuration. These steps assume that you run Configuration Manager on the same server where you plan to run GCDS.\nIf you use a different machine to run Configuration Manager, make sure to copy the configuration file to the GCDS server afterward. Also, be aware that testing the configuration on a different machine might not be possible.- Launch Configuration Manager. You can find Configuration Manager in the Windows Start menu under **Google Cloud Directory Sync** > **Configuration Manager** .\n- Click **Google Domain Configuration > Connection Settings** . \n- [Authorize GCDS and configure domain settings](https://support.google.com/a/answer/6162412#googleapps) .\n- In the menu, click **File > Save as** .\n- In the file dialog, enter `` `\\gcds\\config.xml` as the filename. Replace `` with the path to the `ProgramData` folder that the PowerShell command returned when you ran it earlier.\n- Click **Save** , and then click **OK** .\n### Connecting to Active DirectoryThe next step is to configure GCDS to connect to Active Directory:- In Configuration Manager, click **LDAP Configuration > Connection Settings** .\n- Configure the [LDAP connection settings](https://support.google.com/a/answer/6258071#ldap_connection) :- **Server Type** : Select **MS Active Directory** .\n- **Connection Type** : Select either **Standard LDAP** or **LDAP+SSL** .\n- **Host Name** : Enter the name of a GC server. This setting is used only for testing. Later, you will automate the discovery of the GC server.\n- **Port** : **3268** (GC) or **3269** (GC over SSL). Using a GC server instead of a domain controller helps ensure that you can provision users from all domains of your Active Directory forest. Also, [ensureauthentication after Microsoft ADV190023 update](https://support.google.com/a/answer/9747365) .\n- **Authentication Type** : **Simple** .\n- **Authorized User** : Enter the User Principal Name (UPN) of the domain user that you created earlier:`gcds@` ``. Replace``with the appropriate UPN suffix domain for the user. Alternatively, you can also specify the user by using the`` `\\gcds`syntax.\n- **Base DN** : Leave this field empty to ensure that searches are performed across all domains in the forest.\n- To verify the settings, click **Test connection** . If the connection fails, double-check that you've specified the host name of a GC server and that the username and password are correct.\n- Click **Close** .\n### Deciding what to provisionNow that you've successfully connected GCDS, you can decide which items to provision:- In Configuration Manager, click **General Settings** .\n- Ensure that **User Accounts** is selected.\n- If you intend to provision groups, ensure that **Groups** is selected; otherwise, clear the checkbox.\n- Synchronizing organizational units is beyond the scope of this guide, so leave **Organizational Units** unselected.\n- Leave **User Profiles** and **Custom Schemas** unselected.\nFor more details, see [Decide what to provision](https://support.google.com/a/answer/6162412) .\n### Provisioning usersThe next step is to configure how to map users between Active Directory:- In Configuration Manager, click **User Accounts** > **Additional User Attributes** .\n- Click **Use defaults** to automatically populate the attributes for **Given Name** and **Family Name** with`givenName`and`sn`, respectively.\nThe remaining settings depend on whether you intend to use the UPN or email address to map Active Directory to users in Cloud Identity or Google Workspace, and whether you need to apply domain name substitutions. If you're unsure which option is best for you, see the article on [how Active Directory identity management can be extended to Google Cloud](/architecture/identity/federating-gcp-with-active-directory-introduction) .\n- In Configuration Manager, click **User Accounts > User Attributes** .\n- Click **Use defaults** .\n- Change **Email Address Attribute** to`userPrincipalName`.\n- Click`proxyAddresses`>`Remove`if you don't want to sync alias addresses.\n- Click the **Search Rules** tab, and then click **Add Search Rule** .\n- Enter the following settings:- **Scope** : **Sub-tree** \n- **Rule** :```\n(&(objectCategory=person)(objectClass=user)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(!(userPrincipalName=gcds@*)))\n```This rule matches all non-disabled users but ignores computer and managed service accounts, as well as the `gcds` user account.\n- **Base DN** : Leave blank to search all domains in the forest.\n- Click **OK** to create the rule.\n- In Configuration Manager, click the **User Accounts** > **User Attributes** tab.\n- Click **Use defaults** .\n- Change **Email Address Attribute** to`userPrincipalName`\n- Click`proxyAddresses`>`Remove`if you don't want to sync alias addresses.\n- Click the **Search Rules** tab, and then click **Add Search Rule** .\n- Enter the following settings:- **Scope** : **Sub-tree** \n- **Rule** :```\n(&(objectCategory=person)(objectClass=user)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(!(userPrincipalName=gcds@*)))\n```This rule matches all non-disabled users but ignores computer and managed service accounts, as well as the `gcds` user account.\n- **Base DN** : Leave blank to search all domains within the forest.\n- Click **OK** to create the rule.\n- Click **Google Domain Configuration > Connection Settings** , and choose **Replace domain names in LDAP email addresses with this domain name** .\n- In Configuration Manager, click **User Accounts** > **User Attributes** .\n- Click **Use defaults** .\n- Click the **Search Rules** tab, and then click **Add Search Rule** .\n- Enter the following settings:- **Scope** : **Sub-tree** \n- **Rule** :```\n(&(objectCategory=person)(objectClass=user)(mail=*)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))\n```This rule matches all non-disabled users with a non-empty email address but ignores computer and managed service accounts.\n- **Base DN** : Leave blank to search all domains in the forest.\n- Click **OK** to create the rule.\n- In Configuration Manager, click **User Accounts** > **User Attributes** .\n- Click **Use defaults** .\n- Click`proxyAddresses`>`Remove`if you don't want to sync alias addresses.\n- Click the **Search Rules** tab, and then click **Use defaults** .\n- Click **Google Domain Configuration** > **Connection Settings** , and choose **Replace domain names in LDAP email addresses with this domain\nname** .\nFor further details on mapping user attributes, see [Set up your sync with Configuration Manager](https://support.google.com/a/answer/6162412#useraccounts) .So far, the configuration has focused on adding and updating users in Cloud Identity or Google Workspace. However, it's also important that users that are disabled or deleted in Active Directory be suspended or deleted in Cloud Identity or Google Workspace.\nAs part of the provisioning process, GCDS generates a list of users in Cloud Identity or Google Workspace that don't have corresponding matches in the Active Directory LDAP query results. Because the LDAP query incorporates the clause `(!(userAccountControl:1.2.840.113556.1.4.803:=2))` , any users that have been disabled or deleted in Active Directory since the last provisioning was performed will be included in this list. The default behavior of GCDS is to delete these users in Cloud Identity or Google Workspace, but you can customize this behavior:- In Configuration Manager, click **User Accounts > User Attributes** .\n- Under **Google Domain Users Deletion/Suspension Policy** , ensure that **Don't suspend or delete Google domain admins not found in LDAP** is checked. This setting ensures that GCDS will not suspend or delete the super-admin user that you used to configure your Cloud Identity or Google Workspace account.\n- Optionally, change the deletion policy for non-admin users.\nIf you use multiple separate instances of GCDS to provision different domains or forests to a single Cloud Identity or Google Workspace account, make sure that the different GCDS instances don't interfere with one another. By default, users in Cloud Identity or Google Workspace that have been provisioned from a different source will wrongly be identified in Active Directory as having been deleted. To avoid this situation, you can move all users that are beyond the scope of the domain or forest that you're provisioning from to a single OU and then exclude that OU.- In Configuration Manager, click **Google Domain Configuration** > **Exclusion Rules** .\n- Click **Add Exclusion Rule** .\n- Configure the following settings:- **Type** : **Organization Complete Path** \n- **Match Type** : **Exact Match** \n- **Exclusion Rule** : Enter the OU path and its name. For example:```\nROOT OU/EXCLUDED OU\n```Replace `` with your OU path and the excluded OU's name.\n- Click **OK** to create the rule.\nAlternatively, if excluding a single OU doesn't fit your business, you can exclude domain or forest base on users' email addresses.\n- In Configuration Manager, click **Google Domain Configuration >\nExclusion Rules** .\n- Click **Add Exclusion Rule** .\n- Configure the following settings:- **Type** : **User Email Address** \n- **Match Type** : **Regular Expression** \n- **Exclusion Rule** : If you use a single UPN suffix domain, enter the following regular expression:```\n.*@((?!UPN_SUFFIX_DOMAIN).*)$\n```Replace``with your UPN suffix domain, as in this example:```\n.*@((?!corp.example.com).*)$\n```If you use more than one UPN suffix domain, extend the expression as shown:```\n.*@((?!corp.example.com|branch.example.com).*)$\n```\n- Click **OK** to create the rule.\n- In Configuration Manager, click **Google Domain Configuration** > **Exclusion Rules** .\n- Click **Add Exclusion Rule** .\n- Configure the following settings:- **Type** : **User Email Address** \n- **Match Type** : **Regular Expression** \n- **Exclusion Rule** : If you use a single UPN suffix domain, enter the following regular expression:```\n.*@((?!SUBSTITUTION_DOMAIN).*)$\n```Replace `` with the domain that you use to replace the UPN suffix domain, as in this example:```\n.*@((?!corp.example.com).*)$\n```\n- Click **OK** to create the rule.\n- In Configuration Manager, click **Google Domain Configuration** > **Exclusion Rules** .\n- Click **Add Exclusion Rule** .\n- Configure the following settings:- **Type** : **User Email Address** \n- **Match Type** : **Regular Expression** \n- **Exclusion Rule** : If you use a single UPN suffix domain, enter the following regular expression:```\n.*@((?!MX_DOMAIN).*)$\n```Replace `` with the domain name that you use in email addresses, as in this example:```\n.*@((?!corp.example.com).*)$\n```If you use more than one UPN suffix domain, extend the expression as shown:```\n.*@((?!corp.example.com|branch.example.com).*)$\n```\n- Click **OK** to create the rule.\n- In Configuration Manager, click **Google Domain Configuration >\nExclusion Rules** .\n- Click **Add Exclusion Rule** .\n- Configure the following settings:- **Type** : **User Email Address** \n- **Match Type** : **Regular Expression** \n- **Exclusion Rule** : If you use a single UPN suffix domain, enter the following regular expression:```\n.*@((?!SUBSTITUTION_DOMAIN).*)$\n```Replace `` with the domain that you use to replace the email domain, as in this example:```\n.*@((?!corp.example.com).*)$\n```\n- Click **OK** to create the rule.\nFor further details on deletion and suspension settings, see [Learn more about Configuration Manager options](https://support.google.com/a/answer/6258071#user) .\n### Provisioning groupsThe next step is to configure how to map groups between Active Directory and Cloud Identity or Google Workspace. This process differs based on whether you plan to map groups by [common name or by email address](/architecture/identity/federating-gcp-with-active-directory-introduction#mapping_groups) .First, you need to identify the types of security groups that you intend to provision, and then formulate an appropriate LDAP query. The following table contains common queries that you can use.\n| Type      | LDAP query                            |\n|:----------------------------|:-------------------------------------------------------------------------------------------------------------------------|\n| Domain local groups   | (&(objectCategory=group)(groupType:1.2.840.113556.1.4.803:=2147483652))             |\n| Global groups    | (&(objectCategory=group)(groupType:1.2.840.113556.1.4.803:=2147483650))             |\n| Universal groups   | (&(objectCategory=group)(groupType:1.2.840.113556.1.4.803:=2147483656))             |\n| Global and universal groups | (&(objectCategory=group)(|(groupType:1.2.840.113556.1.4.803:=2147483650)(groupType:1.2.840.113556.1.4.803:=2147483656))) |\n| All groups     | (objectCategory=group)                         |\nThe query for global groups also covers Active Directory\u2013defined groups such as domain controllers. You can filter these groups by restricting the search by organizational unit ( `ou` ).\nThe remaining settings depend on whether you intend to use UPN or email address to map Active Directory to users in Cloud Identity or Google Workspace.\n- In Configuration Manager, click **Groups** > **Search Rules** .\n- Click **Use Defaults** to add two default rules.\n- Click the first rule edit icon.\n- Edit **Rule** to replace the LDAP query.\n- In the **Groups** box, enter the following settings:- **Group Email Address Attribute** :`cn`\n- **User Email Address Attribute** :`userPrincipalName`\n- Click the **Prefix-Suffix** tab.\n- In the **Group Email Address** box, enter the following settings:- **Suffix** : `@` `` , where you replace `@` `` with the primary domain of your Cloud Identity or Google Workspace account. Although the setting seems redundant because GCDS appends the domain automatically, you must specify the setting explicitly to prevent multiple Google Cloud Directory Sync instances from erasing group members that they had not added. **Example:** `@example.com`\n- Click **OK** .\n- Click the second rule cross icon to delete that rule.\n- In Configuration Manager, click **Groups** > **Search Rules** .\n- Click **Use Defaults** to add a couple of default rules.\n- Click the first rule edit icon.\n- Edit **Rule** to replace the LDAP query.\n- In the **Groups** box, edit **Group Email Address Attribute** to enter the setting`cn`.\n- Click **OK** .\nThe same settings also apply if you used domain substitution when mapping users.First, you need to identify the types of security groups that you intend to provision, and then formulate an appropriate LDAP query. The following table contains common queries that you can use.\n| Type           | LDAP query                              |\n|:-----------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------|\n| Domain local groups with email address   | (&(objectCategory=group)(groupType:1.2.840.113556.1.4.803:=2147483652)(mail=*))             |\n| Global groups with email address    | (&(objectCategory=group)(groupType:1.2.840.113556.1.4.803:=2147483650)(mail=*))             |\n| Universal groups with email address   | (&(objectCategory=group)(groupType:1.2.840.113556.1.4.803:=2147483656)(mail=*))             |\n| Global and universal groups with email address | (&(objectCategory=group)(|(groupType:1.2.840.113556.1.4.803:=2147483650)(groupType:1.2.840.113556.1.4.803:=2147483656))(mail=*)) |\n| All groups with email address     | (&(objectCategory=group)(mail=*))                        |\nThe remaining settings depend on whether you intend to use UPN or email address to map Active Directory to users in Cloud Identity or Google Workspace.\n- In Configuration Manager, click **Groups** > **Search Rules** .\n- Click **Use Defaults** to add two default rules.\n- Click the first rule edit icon.\n- Edit **Rule** to replace the LDAP query.\n- In the **Groups** box, edit **User Email Name Attribute** to enter the setting`userPrincipalName`.\n- Click **OK** .\n- Click the second rule cross icon to delete that rule.\n- In Configuration Manager, click **Groups** > **Search Rules** .\n- Click **Use Defaults** to add a couple of default rules.\n- Click the first rule edit icon.\n- Edit **Rule** to replace the LDAP query.\n- Click **OK** .\n- Click the second rule cross icon to remove this rule.\nIf you have enabled **Replace domain names in LDAP email addresses with thisdomain name** , it also applies to email addresses of groups and members.GCDS handles the deletion of groups similarly to the deletion of users. If you use multiple separate instances of GCDS to provision different domains or forests to a single Cloud Identity or Google Workspace account, make sure that the different GCDS instances don't interfere with one another.\nBy default, a group member in Cloud Identity or Google Workspace that has been provisioned from a different source will wrongly be identified in Active Directory as having been deleted. To avoid this situation, configure GCDS to ignore all group members that are beyond the scope of the domain or forest that you're provisioning from.\n- Click **Google Domain Configuration > Exclusion Rules** .\n- Click **Add Exclusion Rule** .\n- Configure the following settings:- **Type** : **Group Member Email Address** \n- **Match Type** : **Regular Expression** \n- **Exclusion Rule** : If you use a single UPN suffix domain, enter the following regular expression:```\n.*@((?!UPN_SUFFIX_DOMAIN).*)$\n```Replace `` with your UPN suffix domain, as in the following example:```\n.*@((?!corp.example.com).*)$\n```If you use more than one UPN suffix domain, extend the expression as shown:```\n.*@((?!corp.example.com|branch.example.com).*)$\n```\n- Click **OK** to create the rule.\n- Click **Google Domain Configuration > Exclusion Rules** .\n- Click **Add Exclusion Rule** .\n- Configure the following settings:- **Type** : **Group Member Email Address** \n- **Match Type** : **Regular Expression** \n- **Exclusion Rule** : If you use a single UPN suffix domain, enter the following regular expression:```\n.*@((?!SUBSTITUTION_DOMAIN).*)$\n```Replace `` with the domain that you use to replace the UPN suffix domain, as in this example:```\n.*@((?!corp.example.com).*)$\n```\n- Click **OK** to create the rule.\n- Click **Google Domain Configuration > Exclusion Rules** .\n- Click **Add Exclusion Rule** .\n- Configure the following settings:- **Type** : **Group Member Email Address** \n- **Match Type** : **Regular Expression** \n- **Exclusion Rule** : If you use a single UPN suffix domain, enter the following regular expression:```\n.*@((?!MX_DOMAIN).*)$\n```Replace `` with the domain name that you use in email addresses, as in the following example:```\n.*@((?!corp.example.com).*)$\n```If you use more than one UPN suffix domain, extend the expression as shown:```\n.*@((?!corp.example.com|branch.example.com).*)$\n```\n- Click **OK** to create the rule.\n- Click **Google Domain Configuration > Exclusion Rules** .\n- Click **Add Exclusion Rule** .\n- Configure the following settings:- **Type** : **Group Member Email Address** \n- **Match Type** : **Regular Expression** \n- **Exclusion Rule** : If you use a single UPN suffix domain, enter the following regular expression:```\n.*@((?!SUBSTITUTION_DOMAIN).*)$\n```Replace `` with the domain that you use to replace the email domain, as in the following example:```\n.*@((?!corp.example.com).*)$\n```\n- Click **OK** to create the rule.For more information about group settings, see [Learn more about Configuration Manager options](https://support.google.com/a/answer/6258071#group_search) .\n### Configure logging and notificationsKeeping users in sync requires that you run GCDS on a scheduled basis. To allow you to keep track of GCDS activity and potential problems, you can control how and when GCDS writes its log file:- In Configuration Manager, click **Logging** .\n- Set **File name** to`` `\\gcds\\gcds_sync.#{timestamp}.log`. Replace``with the path to the`ProgramData`folder that the PowerShell command returned when you ran it earlier.\n- Click **File > Save** to commit the configuration changes to disk, then click **OK** . **Note:** You can click **File** > **Save** or **Save as** to commit the configuration changes to disk when you complete each of above steps. If the configuration is ready to be tested, you can click **Go to thesimulation tab** . Otherwise, you can click **Skip simulation** .\nIn addition to [logging](https://support.google.com/a/answer/6258071#logging) , GCDS can send [notifications](https://support.google.com/a/answer/6258071#notification) by email. To activate this service, click **Notifications** and provide connection information for your mail server.\n### Simulating user provisioningYou've completed the GCDS configuration. To verify that the configuration works as intended, you need to at first save the configuration to disk then simulate a user provisioning run. During simulation, GCDS won't perform any changes to your Cloud Identity or Google Workspace account, but will instead report which changes during a regular provision run.- In Configuration Manager, click **Sync** .\n- At the bottom of the screen, select **Clear cache** , and then click **Simulate sync** .\n- After the process completes, review the **Proposed changes** section of the log that is shown in the lower half of the dialog and verify that there are no unwanted changes such as deleting or suspending any users or groups.\n### Initial user provisioningYou can now trigger the initial user provisioning:\n **Warnings** - Triggering user provisioning will make permanent changes to users and groups in your Cloud Identity or Google Workspace account.\n- If you have a large number of users to provision, consider temporarily changing the LDAP query to match a subset of these users only. Using this subset of users, you can then test the process and adjust settings if necessary. After you've successfully validated results, change back the LDAP query and provision the remaining users.\n- Avoid repeatedly modifying or deleting a large number of users when testing because such actions might be flagged as abusive behavior.\nTrigger a provision run as follows:- In Configuration Manager, click **Sync** .\n- At the bottom of the screen, select **Clear cache** , and then click **Sync & apply changes** .A dialog appears showing the status.\n- After the process completes, check the log that is shown in the lower half of the dialog:- Under **Successful user changes** , verify that at least one user has been created.\n- Under **Failures** , verify that no failures occurred.## SchedulingTo ensure that changes performed in Active Directory are propagated to your Cloud Identity or Google Workspace account, set up a scheduled task that triggers a provisioning run every hour:- Open a PowerShell console as Administrator.\n- Check if the [Active Directory PowerShell module](https://docs.microsoft.com/en-us/powershell/module/activedirectory/) is available on the system:```\nimport-module ActiveDirectory\n```If the command fails, download and install the [Remote Server Administration Tools](https://www.microsoft.com/en-us/download/details.aspx?id=45520) and try again.\n- In Notepad, create a file, copy the following content into it, and save the file to `%ProgramData%\\gcds\\sync.ps1` . When you're done, close the file.```\n[CmdletBinding()]\nParam(\n [Parameter(Mandatory=$True]\n [string]$config,\n [Parameter(Mandatory=$True)]\n [string]$gcdsInstallationDir\n)\nimport-module ActiveDirectory\n# Stop on error.\n$ErrorActionPreference =\"stop\"\n# Ensure it's an absolute path.\n$rawConfigPath = [System.IO.Path]::Combine((pwd).Path, $config)\n# Discover closest GC in current domain.\n$dc = Get-ADDomainController -discover -Service \"GlobalCatalog\" -NextClosestSite\nWrite-Host (\"Using GC server {0} of domain {1} as LDAP source\" -f [string]$dc.HostName, $dc.Domain)\n# Load XML and replace the endpoint.\n$dom = [xml](Get-Content $rawConfigPath)\n$ldapConfigNode = $dom.SelectSingleNode(\"//plugin[@class='com.google.usersyncapp.plugin.ldap.LDAPPlugin']/config\")\n# Tweak the endpoint.\n$ldapConfigNode.hostname = [string]$dc.HostName\n$ldapConfigNode.ldapCredMachineName = [string]$dc.HostName\n$ldapConfigNode.port = \"3268\" # Always use GC port\n# Tweak the tsv files location\n$googleConfigNode = $dom.SelectSingleNode(\"//plugin[@class='com.google.usersyncapp.plugin.google.GooglePlugin']/config\")\n$googleConfigNode.nonAddressPrimaryKeyMapFile = [System.IO.Path]::Combine((pwd).Path, \"nonAddressPrimaryKeyFile.tsv\")\n$googleConfigNode.passwordTimestampFile = [System.IO.Path]::Combine((pwd).Path, \"passwordTimestampCache.tsv\")\n# Save resulting config.\n$targetConfigPath = $rawConfigPath + \".autodiscover\"\n$writer = New-Object System.IO.StreamWriter($targetConfigPath, $False, (New-Object System.Text.UTF8Encoding($False)))\n$dom.Save($writer)\n$writer.Close()\n# Start provisioning.\nStart-Process -FilePath \"$gcdsInstallationDir\\sync-cmd\" `\n -Wait -ArgumentList \"--apply --config \"\"$targetConfigPath\"\"\"\n```\n- Configuration Manager created a secret key to encrypt the credentials in the config file. To ensure that GCDS can still read the configuration when it's run as a scheduled task, run the following commands to copy that secret key from your own profile to the profile of `NT AUTHORITY\\LOCAL SERVICE` :```\nNew-Item -Path Registry::HKEY_USERS\\S-1-5-19\\SOFTWARE\\JavaSoft\\Prefs\\com\\google\\usersyncapp -Force;\nCopy-Item -Path Microsoft.PowerShell.Core\\Registry::HKEY_CURRENT_USER\\SOFTWARE\\JavaSoft\\Prefs\\com\\google\\usersyncapp\\util `\n -Destination Microsoft.PowerShell.Core\\Registry::HKEY_USERS\\S-1-5-19\\SOFTWARE\\JavaSoft\\Prefs\\com\\google\\usersyncapp\\util\n```If the commands fail, ensure that you started the PowerShell console as Administrator.\n- Create a scheduled task by running the following commands. The scheduled task will be triggered every hour and invokes the `sync.ps1` script as `NT AUTHORITY\\LOCAL SERVICE` . **Warning:** After it starts, the scheduled task will make permanent changes to your Cloud Identity or Google Workspace account.```\n$taskName = \"Synchronize to Cloud Identity\"\n$gcdsDir = \"$Env:ProgramData\\gcds\"\n$action = New-ScheduledTaskAction -Execute 'PowerShell.exe' `\n -Argument \"-ExecutionPolicy Bypass -NoProfile $gcdsDir\\sync.ps1 -config $gcdsDir\\config.xml -gcdsInstallationDir '$Env:Programfiles\\Google Cloud Directory Sync'\" `\n -WorkingDirectory $gcdsDir\n$trigger = New-ScheduledTaskTrigger `\n -Once `\n -At (Get-Date) `\n -RepetitionInterval (New-TimeSpan -Minutes 60) `\n -RepetitionDuration (New-TimeSpan -Days (365 * 20))\n$principal = New-ScheduledTaskPrincipal -UserID \"NT AUTHORITY\\LOCAL SERVICE\" -LogonType ServiceAccount\nRegister-ScheduledTask -Action $action -Trigger $trigger -Principal $principal -TaskName $taskName\n$task = Get-ScheduledTask -TaskName \"$taskName\"\n$task.Settings.ExecutionTimeLimit = \"PT12H\"\nSet-ScheduledTask $task\n```\nFor more information, see [Schedule automatic synchronzations](https://support.google.com/a/answer/6152426) .## Testing user provisioningYou've completed the installation and configuration of GCDS, and the scheduled task will trigger a provision run every hour.\nTo trigger a provisioning run manually, switch to the PowerShell console and run the following command:\n```\nStart-ScheduledTask \"Synchronize to Cloud Identity\"\n```## Clean upTo remove GCDS, perform the following steps:- Open Windows Control Panel and click **Programs > Uninstall a program** .\n- Select **Google Cloud Directory Sync** , and click **Uninstall/Change** to launch the uninstall wizard. Then follow the instructions in the wizard.\n- Open a PowerShell console and run the following command to remove the scheduled task:```\n$taskName = \"Synchronize to Cloud Identity\"\nUnregister-ScheduledTask -TaskName $taskName -Confirm:$False\n```\n- Run the following command to delete the configuration and log files:```\nRemove-Item -Recurse -Force \"$Env:ProgramData\\gcds\"\nRemove-Item -Recurse -Path Registry::HKEY_USERS\\S-1-5-19\\SOFTWARE\\JavaSoft\\Prefs\\com\\google\\usersyncapp\n```\n## What's next\n- [Configure single sign-on between Active Directory and Google Cloud](/architecture/identity/federating-gcp-with-active-directory-configuring-single-sign-on) .\n- Review our [GCDS best practices](https://support.google.com/a/answer/7177267) and [FAQ](https://support.google.com/a/answer/7177266) .\n- Find out how to [troubleshoot common GCDS issues](https://support.google.com/a/answer/3075991) .\n- Read about [best practices for planning accounts and organizations](/architecture/identity/best-practices-for-planning) and [best practices for federating Google Cloud with an external identity provider](/architecture/identity/best-practices-for-federating) .\n- Acquaint yourself with our [best practices for managing super-admin users.](/resource-manager/docs/super-admin-best-practices)", "guide": "Cloud Architecture Center"}