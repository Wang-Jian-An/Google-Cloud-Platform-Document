{"title": "Apigee - JavaScript task", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - JavaScript task\n**Announcement:** Application Integration is now available for your Google Cloud project. You can now use both Apigee Integration and Application Integration within the same Google Cloud project. [Learn more](/apigee/docs/api-platform/integration/using-application-integration)\nThe ** JavaScript ** task lets you write custom JavaScript code snippets for your integration.\nUsing the **JavaScript Editor** , you can code complex data mapping logic for your integration, perform variable assignments, and add or modify integration variables.\nThe **JavaScript Editor** supports the following features:\n- A minimap that displays a high-level overview of the script code and helps with quick navigation.\n- Syntax/code highlighting, indentation, and line numbering for easier code readability and structure recognition.\n- Error highlighting to find and track errors in code.\n- Folding to expand and collapse regions of the script code.\n- Click-to-copy option to copy the script code to the clipboard.\n", "content": "## Configure the JavaScript task\nTo add a ** JavaScript ** task to your integration, perform the following steps:\n- In the [Apigee UI](https://apigee.google.com) , select your.\n- Click **Develop > Integrations** .\n- Select an existing integration or create a new integration by clicking **Create Integration** .If you are creating a new integration:- Enter a name and description in the **Create Integration** dialog.\n- Select a **Region** for the integration from the list of supported regions.\n- Click **Create** .\nThis opens the integration in the .\n- In thenavigation bar, click **+Add a task/trigger > Tasks** to view the list of available tasks.\n- Click and place the **JavaScript** element in the integration editor.\n- Click the **JavaScript** element on the designer to view the **JavaScript** task configuration pane.\n- Click **Open script editor** to view and edit the **JavaScript Editor** .\n- Write your JavaScript code inside the`executesScript(event)`function that is automatically created in the **JavaScript Editor** . Close the editor once complete, any changes will be autosaved. **Warning:** Don't delete the`executesScript(event)`function. This function is called when the **JavaScript** task executes.For information about accessing integration variables and the supported functions, see [ Using the JavaScript Editor](/apigee/docs/api-platform/integration/run-javascript-task#using-the-javascript-editor) .For information about viewing the generated execution logs, see [Execution logs](/apigee/docs/api-platform/integration/viewing-logs) .\nThe following image shows a sample layout of the **JavaScript Editor** :\n## Using the JavaScript Editor\nTo view and edit the **JavaScript Editor** , go to the **JavaScript** task configuration pane and click **Open script editor** . The **JavaScript Editor** by default contains a function named `executesScript(event)` .\nWhere:\n- `executesScript()`is the function that is called when Apigee Integration executes the **JavaScript** task during an integration's run.\n- `event`is the [in-memory object](/apigee/docs/api-platform/integration/variables-overview#using-variable-data-in-integrations) of Apigee Integration.For information about the supported methods of the object, see [ Access integration variables](/apigee/docs/api-platform/integration/run-javascript-task#access-integration-variables) .**Warning:** Don't delete the`executesScript(event)`function. This function is called when the **JavaScript** task executes.\n## Access integration variables\nVariables defined in your integration can be accessed from the **JavaScript Editor** using the Apigee Integration [ in-memory event](/apigee/docs/api-platform/integration/variables-overview#using-variable-data-in-integrations) object.\nThe following methods are supported to access integration variables from your **JavaScript Editor** :\n- [getEventExecutionInfoId](/apigee/docs/api-platform/integration/run-javascript-task#infoid) \n- [getGoogleCloudProjectId](/apigee/docs/api-platform/integration/run-javascript-task#projectid) \n- [getIntegrationName](/apigee/docs/api-platform/integration/run-javascript-task#name) \n- [getParameter](/apigee/docs/api-platform/integration/run-javascript-task#gpara) \n- [getRegion](/apigee/docs/api-platform/integration/run-javascript-task#region) \n- [log](/apigee/docs/api-platform/integration/run-javascript-task#log) \n- [setParameter](/apigee/docs/api-platform/integration/run-javascript-task#spara) \n| Function name   | Description                              | Usage                                                               | Usage.1                                                              |\n|:------------------------|:-----------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| getEventExecutionInfoId | Returns the integration's run execution ID. Return type: String                 | Syntax: event.getEventExecutionInfoId() Example: function executeScript(event) { event.getEventExecutionInfoId(); }                                   | Syntax: event.getEventExecutionInfoId() Example: function executeScript(event) { event.getEventExecutionInfoId(); }                                   |\n| getGoogleCloudProjectId | Returns the Google Cloud project ID. Return type: String                   | Syntax: event.getGoogleCloudProjectId() Example: function executeScript(event) { event.getGcpProjectId(); }                                     | Syntax: event.getGoogleCloudProjectId() Example: function executeScript(event) { event.getGcpProjectId(); }                                     |\n| getIntegrationName  | Returns the current name of the integration. Return type: String                 | Syntax: event.getIntegrationName Example: function executeScript(event) { event.getIntegrationName(); }                                      | Syntax: event.getIntegrationName Example: function executeScript(event) { event.getIntegrationName(); }                                      |\n| getParameter   | Returns the value of the provided integration variable. Return type: Data type of the integration variable       | Syntax: event.getParameter(\"value\") Input parameter: Integration variable name. Example: function executeScript(event) { event.getParameter(\"var1\"); }                          | Syntax: event.getParameter(\"value\") Input parameter: Integration variable name. Example: function executeScript(event) { event.getParameter(\"var1\"); }                          |\n| getRegion    | Returns the name of the integration region. Return type: String                 | Syntax: event.getRegion() Example: function executeScript(event) { event.getRegion(); }                                          | Syntax: event.getRegion() Example: function executeScript(event) { event.getRegion(); }                                          |\n| log      | Writes the specified value to the execution logs. For information about viewing the generated execution logs, see Execution logs. | Syntax: event.log(value) Input parameter: Any variable or function that is used in the script. Example 1: function executeScript(event) { event.log(event.getParameter(\"var1\")); } Example 2: function executeScript(event) { event.log(\"Lorem ipsum\"); } | Syntax: event.log(value) Input parameter: Any variable or function that is used in the script. Example 1: function executeScript(event) { event.log(event.getParameter(\"var1\")); } Example 2: function executeScript(event) { event.log(\"Lorem ipsum\"); } |\n| setParameter   | Sets or updates the value of an integration variable.                    | Syntax: event.setParameter(value, value) Input parameter: This function takes the following arguments: First argument: Variable name. Second argument: Value. Example: function executeScript(event) { event.setParameter(\"var1\", \"NewStringValue\"); }  | Syntax: event.setParameter(value, value) Input parameter: This function takes the following arguments: First argument: Variable name. Second argument: Value. Example: function executeScript(event) { event.setParameter(\"var1\", \"NewStringValue\"); }  |\n## Error handling strategy\nAn error handling strategy for a task specifies the action to take if the task fails due to a [temporary error](/apigee/docs/api-platform/integration/error-handling) . For information about how to use an error handling strategy, and to know about the different types of error handling strategies, see [Error handling strategies](/apigee/docs/api-platform/integration/error-handling-strategy) .", "guide": "Apigee"}