{"title": "Vertex AI - Develop an application on the Ray cluster on Vertex AI", "url": "https://cloud.google.com/vertex-ai/docs/start/introduction-unified-platform", "abstract": "# Vertex AI - Develop an application on the Ray cluster on Vertex AI\n**    Preview     ** This product or feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA products and features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nYou can connect to a Ray cluster on Vertex AI and develop an application using the following methods:\n- Connect to the Ray cluster on Vertex AI using the version of the Vertex AI SDK for Python that includes the functionality of the [RayClient](https://docs.ray.io/en/latest/cluster/running-applications/job-submission/ray-client.html) . Use this option if you prefer an interactive Python development environment.- Use the Vertex AI SDK for Python within the Colab Enterprise notebook in the Google Cloud console.\n- Use the Vertex AI SDK for Python within a Python session, shell, or Jupyter notebook.\n- Write a Python script and submit the script to the Ray cluster on Vertex AI using the [Ray JobsAPI](https://docs.ray.io/en/latest/cluster/running-applications/job-submission/index.html) . Use this option if you'd rather submit jobs programmatically.\n[Ray on Vertex AI overview](/vertex-ai/docs/open-source/ray-on-vertex-ai/overview)\n[set up](/vertex-ai/docs/open-source/ray-on-vertex-ai/set-up)\n", "content": "## Develop an application using the Vertex AI SDK for Python\nTo connect to the Ray cluster on Vertex AI using the Vertex AI SDK for Python, the connecting environment must be on the same peered VPC network.\n- In the Google Cloud console, go to the Ray on Vertex AI page. [Go to the Ray on Vertex AI page](https://console.cloud.google.com/vertex-ai/ray) \n- In the row for the cluster you created, Click **Open in Colab Enterprise** .\n- The Colab Enterprise notebook opens. Follow the instructions on how to use the Vertex AI SDK for Python to connect to the Ray cluster on Vertex AI. **Note:** Colab Enterprise uses [usercredentials](/docs/authentication/provide-credentials-adc#local-user-cred) to authenticate.- If a dialog screen asks you to enable APIs, click **Enable** .\n- Click **Connect** if you're connecting to the cluster for the first time, or **Re-connect** if you're re-connecting to the cluster. The notebook takes a few minutes to connect to the Runtime.\n- Run the **Getting started** code cell to import the Vertex AI SDK for Python and connect to the Ray cluster on Vertex AI.\nFrom an interactive Python environment:\n```\nimport ray# Necessary even if aiplatform.* symbol is not directly used in your program.from google.cloud import aiplatform# The CLUSTER_RESOURCE_NAME is the one returned from vertex_ray.create_ray_cluster.CLUSTER_RESOURCE_NAME='projects/{}/locations/{}/persistentResources/{}'.format(PROJECT_NUMBER, REGION, CLUSTER_NAME)ray.init('vertex_ray://{}'.format(CLUSTER_RESOURCE_NAME))\n```\nWhere:- : The region you specified for your Ray cluster on Vertex AI.\n- : Your Google Cloud project number.\n- : The name of your Ray cluster on Vertex AI, specified when you created the cluster.\nYou should get output similar to the following:\n```\nPython version: 3.10.12\nRay version: 2.4\nVertex SDK version: 1.34.0\nDashboard: xxxx-dot-us-central1.aiplatform-training.googleusercontent.com\nInteractive Terminal Uri: yyyy-dot-us-central1.aiplatform-training.googleusercontent.com\nCluster Name: ray-cluster-zzzz\n```\nYou can use the `Dashboard` URL to access the Ray dashboard from a browser. The URI is in the format of `https://xxxx-dot-us-central1.aiplatform-training.googleusercontent.com/` . The dashboard shows submitted jobs, the number of GPU or CPUs, and disk space of each machine in the cluster.\nOnce you're connected to the Ray cluster on Vertex AI you can develop a Ray program the same way you would develop one for a normal OSS Ray backend.\n```\n@ray.remotedef square(x):\u00a0 print(x)\u00a0 return x * x# Launch four parallel square tasks.futures = [square.remote(i) for i in range(4)]print(ray.get(futures))# Returns [0, 1, 4, 9]\n```\n## Develop an application using the Ray Jobs API\nThis section describes how to submit a Python program to the Ray cluster on Vertex AI using the Ray Jobs API.\n### Write a Python script\nDevelop your application as a Python script in any text editor. For example, place the following script in a `my_script.py` file:\n**Note:** Code in the entrypoint of the program executes on the head node. You must wrap functions with `@ray.remote` for them to be properly parallelized.\n```\nimport rayimport time@ray.remotedef hello_world():\u00a0 \u00a0 return \"hello world\"@ray.remotedef square(x):\u00a0 \u00a0 print(x)\u00a0 \u00a0 time.sleep(100)\u00a0 \u00a0 return x * xray.init() \u00a0# No need to specify address=\"vertex_ray://....\"print(ray.get(hello_world.remote()))print(ray.get([square.remote(i) for i in range(4)]))\n```\n### Submit a Ray job using the Ray Jobs API\nYou can submit a Ray job using Python, the Ray Jobs CLI, or the public [Raydashboard](https://docs.ray.io/en/latest/ray-observability/getting-started.html) address.\n**Note:** All content within the `working_dir` directory is sent to the Ray  cluster, which may cause a timeout if the directory is too large. We  recommend that you specify a `working_dir` directory that contains only the  files that you want to send.\nWithin the VPC peered network, submit a Ray job using a Python environment:\n```\nimport rayfrom ray.job_submission import JobSubmissionClientfrom google.cloud import aiplatform \u00a0# Necessary even if aiplatform.* symbol is not directly used in your program.CLUSTER_RESOURCE_NAME='projects/{}/locations/REGION/persistentResources/{}'.format(PROJECT_NUMBER, CLUSTER_NAME)client = JobSubmissionClient(\"vertex_ray://{}\".format(CLUSTER_RESOURCE_NAME))job_id = client.submit_job(\u00a0 # Entrypoint shell command to execute\u00a0 entrypoint=\"python my_script.py\",\u00a0 # Path to the local directory that contains the my_script.py file.\u00a0 runtime_env={\u00a0 \u00a0 \"working_dir\": \"./directory-containing-my-script\",\u00a0 \u00a0 \"pip\": [\"numpy\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"xgboost==1.7.6\", # specific versions can be pinned or bounded\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"ray==2.4.0\", # pin the Ray version to prevent it from being overwritten\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0]\u00a0 })# Ensure that the Ray job has been created.print(job_id)\n```\nWhere:- : The region you specified for your Ray cluster on Vertex AI.\n- : Your Google Cloud project number.\n- : The name of your Ray cluster on Vertex AI, specified when you created the cluster.\nNote that you can only use the Ray Jobs CLI commands within the peered VPC network.\n```\n$ ray job submit --working-dir ./ --address vertex_ray://{CLUSTER_RESOURCE_NAME} -- python my_script.py\n```\nThe Ray dashboard address is accessible from outside the VPC, including the public internet. Note that `vertex_ray` is required to obtain authentication automatically.\n```\nfrom ray.job_submission import JobSubmissionClientimport vertex_rayDASHBOARD_ADDRESS=DASHBOARD_ADDRESSclient = JobSubmissionClient(\u00a0 \"vertex_ray://{}\".format(DASHBOARD_ADDRESS),)job_id = client.submit_job(\u00a0 # Entrypoint shell command to execute\u00a0 entrypoint=\"python my_script.py\",\u00a0 # Path to the local directory that contains the my_script.py file\u00a0 runtime_env={\u00a0 \u00a0 \"working_dir\": \"./directory-containing-my-script\",\u00a0 \u00a0 \"pip\": [\"numpy\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"xgboost==1.7.6\", # specific versions can be pinned or bounded\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"ray==2.4.0\", # pin the Ray version to prevent it from being overwritten\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0]\u00a0 })print(job_id)\n```\nWhere:\n : The Ray dashboard address for your cluster. You can find the dashboard address [using the Vertex AI SDK for Python](#sdk) .\n## What's next\n- [Use Ray on Vertex AI withBigQuery](/vertex-ai/docs/open-source/ray-on-vertex-ai/bigquery-integration) \n- [Deploy a model on Vertex AI and get predictions](/vertex-ai/docs/open-source/ray-on-vertex-ai/deploy-predict) \n- [View logs for your Ray cluster on Vertex AI](/vertex-ai/docs/open-source/ray-on-vertex-ai/view-logs) \n- [Delete a Ray cluster](/vertex-ai/docs/open-source/ray-on-vertex-ai/delete-cluster)", "guide": "Vertex AI"}