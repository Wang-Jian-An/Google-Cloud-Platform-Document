{"title": "Documentation - Query and view AO logs", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Query and view AO logs\nAfter the log collector pulls data from various project components, the Logging platform aggregates logs from all log sources, adds indexes, and associates logs with labels according to the configuration for data observability. You can then [query and view logs on the logs panel](#query-logs-from-ui) of the system monitoring instance or by [using the Log Query API](#query-logs-from-api) .\n", "content": "## Query and view logs on the logs panel\nYou can query logs through the user interface (UI) of the system monitoring instance of your project. The system monitoring instance includes project-level measures to monitor infrastructure components, such as CPU utilization, storage consumption, network monitoring, server monitoring, logs, alerts, and metrics from the GDCH components.\nYou can view logs on the logs panel of the system monitoring instance of your project. Then, you can make queries to view specific logs for data observability of your use case needs.\n### Before you begin\nBefore querying and viewing logs on the logs panel, you must obtain access to the system monitoring instance. For more information, see [Get access to dashboards](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/get-access-dashboards) .\n### Build queries for your logs\nQuerying logs from the UI of the system monitoring instance lets you choose the data source to retrieve operational logs from your project and get an integrated view of your queries. To filter results, search for logs by labels using query language expressions. For example, you can set the `cluster` and `namespace` labels in your queries to the values that identify your cluster and project namespace, respectively.\nThe following URL is the endpoint of the monitoring instance of your project:\n```\nhttps://GDCH_URL/PROJECT_NAMESPACE/grafana\n```\nReplace the following:\n- : the URL of your organization in GDCH\n- : the namespace of your projectComplete the following steps to retrieve operational logs:\n- In the GDCH console, select a project.\n- On the navigation menu, click **Operations** > **Logging** .\n- Click **View all in Grafana Loki** .A new page opens the [URL of the monitoring instance of your project](#monitoring-instance-endpoint) .\n- On the UI of the monitoring instance, click explore **Explore** from the navigation menu to open the **Explore** page.\n- From the drop-down menu at the **Explore** bar, select **Operational Logs** as the data source to retrieve operational logs.\n- Enter a query to search for logs by labels using [LogQL](https://grafana.com/docs/loki/latest/logql/) (Log Query Language) expressions. You can do this step in either of the following ways:- Use the interactive query-builder UI. Then, click **Run query** .\n- Enter your query using LogQL expressions directly in the text field and pressto run the query.\nThe page displays the logs matching your query.\nAfter querying logs, you can export them. Click **Export** to download logs in plain text or CSV formats.\n**Figure 1.** Menu option to query logs from the UI of the system monitoring instance.\nIn figure 1, the **Operational Logs** option displays the interface that lets you build log queries from the UI to retrieve operational logs.\nTo query logs in a time range from the UI of the monitoring instance, follow these steps:\n- Click the schedule **Time Picker** drop-down menu.\n- From the menu, perform one of the following actions:- Select relative time range options, for example, the last 30 minutes.\n- Set custom absolute time ranges by choosing specific dates and times from the calendar and clicking **Apply time range** .\n- Optionally, click **Change time settings** to change the **Timezone** and **Fiscal year** settings from the time range controls.\nTime settings are saved on a per-dashboard basis. For more information about queries over a range of time, see [https://grafana.com/docs/loki/latest/reference/api/#query-loki-over-a-range-of-time](https://grafana.com/docs/loki/latest/reference/api/#query-loki-over-a-range-of-time) .\n### Sample queries and labels\nThe following are some of the default labels that you can use to query logs:\n- `cluster`: The name of the cluster\n- `namespace`: Your project namespace\n- `node`: The node name prefix\n- `pod`: The pod name prefix\n- `container`: The container name prefix\nThe following code samples show the use of labels and values to query different logs:\n- Select all logs from a project:```\n{cluster=\"user-vm-1-cluster\", namespace=\"PROJECT_NAMESPACE\"}\n```Replace `` with the namespace of your project.\n- Select project logs from a service:```\n{cluster=\"user-vm-1-cluster\", namespace=\"PROJECT_NAMESPACE\", container=\"my-service\"}\n```Replace `` with the namespace of your project.## Query logs from the Log Query API\nThe [Log Query API](/distributed-cloud/hosted/docs/latest/gdch/apis/service/logging/v1/goog.gdc.logging.v1) is a non-Kubernetes gRPC API that lets you programmatically query operational logs, exposing its own endpoints to you.\nThe API is only accessible within a specific organization in GDCH, follows [standard API access methods](/distributed-cloud/hosted/docs/latest/gdch/apis/apis-overview#GDCH-apis-access) , and supports HTTP and gRPC.\n### Before you begin\nTo obtain query access to the API, set up a role binding from the GDCH console to get the Log Querier ( `log-query-api-querier` ) role. For information about setting up role bindings, see [Grant access to project resources](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/iam/role-bindings) .\n### Log Query API endpoint\nThe [Log Query API](/distributed-cloud/hosted/docs/latest/gdch/apis/service/logging/v1/goog.gdc.logging.v1) exposes the following endpoint to query operational logs in your project:\n```\noperational-log-query-api.ORG_DOMAIN/v1\n```\nReplace `` with the domain name of the organization. You can view this property by using the `gdcloud config list` command. The domain name must follow the syntax `org-name.gdch.google.com` . For example, an organization named `org-1` , in the zone `zone1` , and in a test environment has a domain like `org-1.zone1.google.gdch.test` .\n### Send a query\nSend a query to the [Log Query API endpoint](#log-query-api-endpoint) using HTTP or gRPC.\nFollow the instructions to [directly access the API with an HTTP client](/distributed-cloud/hosted/docs/latest/gdch/apis/apis-overview#direct-access-api-http-client) to set up querying by using `kubectl` to manage the authentication or by handling the authentication yourself.\nThe Log Query API has the following three endpoints:- **labels** : List all labels for a project.\n- **labels/labels/LABEL/values** : List specific label values for a project.\n- **logs** : List logs for a specific project.\nFor more information, see the [API documentation](/distributed-cloud/hosted/docs/latest/gdch/apis/service/logging/v1/goog.gdc.logging.v1) .\nYou can query the Log Query API using HTTP clients like `curl` , `wget` , or an HTTP client created and managed by you. The following example uses `curl` to query the API, and you can use a similar format for `wget` commands.- Authenticate the cURL request:- [Download and install the gdcloud CLI](/distributed-cloud/hosted/docs/latest/gdch/resources/gdcloud-overview) .\n- [Set](/distributed-cloud/hosted/docs/latest/gdch/resources/gdcloud-reference/gdcloud-config-set) the gdcloud `core/organization_console_url` property:```\ngdcloud config set core/organization_console_url https://GDCH_URL\n```Replace `` with the URL of an organization in GDCH.\n- [Sign in with the configured identity provider](/distributed-cloud/hosted/docs/latest/gdch/resources/gdcloud-auth#sign-in-with-idp) :```\ngdcloud auth login\n```\n- Use your user and password to authenticate and sign in.When the login is successful, you can use the authorization header in your cURL request through the `gdcloud auth print-identity-token` command. For more information, see [gdcloud auth](/distributed-cloud/hosted/docs/latest/gdch/resources/gdcloud-reference/gdcloud-auth) .\n- If you want to list all labels for a project, send the following query:```\ncurl -X -H \"Authorization: Bearer $(gdcloud auth print-identity-token)\" \\\u00a0 https://LOG_QUERY_API_ENDPOINT/projects/PROJECT_NAME/labels \\\u00a0 -H \"Content-Type: application/json\" -v\n```Replace the following:- ``: the [Log Query API endpoint](#log-query-api-endpoint) from where you want to query logs.\n- ``: the name of your project.\n- If you want to list specific label values for a project, send the following query:```\ncurl -X -H \"Authorization: Bearer $(gdcloud auth print-identity-token)\" \\\u00a0 https://LOG_QUERY_API_ENDPOINT/projects/PROJECT_NAME/labels/labels/LABEL/values \\\u00a0 -H \"Content-Type: application/json\" -v\n```Replace the following:- ``: the [Log Query API endpoint](#log-query-api-endpoint) from where you want to query logs.\n- ``: the name of your project.\n- ``: the specific label for which you want to query its value.\n- If you want to query logs for a specific project, construct a `Log Filter` and include it in the body of the request:```\ncurl -X -H \"Authorization: Bearer $(gdcloud auth print-identity-token)\" \\\u00a0 https://LOG_QUERY_API_ENDPOINT/projects/PROJECT_NAME/logs \\\u00a0 -H \"Content-Type: application/json\" -d \\\u00a0 '{\"logs_filter\": {\"labels_equal\": {\"LABEL\": \"LABEL_VALUE\"}}}' -v\n```Replace the following:- ``: the [Log Query API endpoint](#log-query-api-endpoint) from where you want to query logs.\n- ``: the name of your project.\n- ``: the specific label for which you want to query logs.\n- ``: the label value for which you want to query logs.\nRefer to the [API documentation](/distributed-cloud/hosted/docs/latest/gdch/apis/service/logging/v1/goog.gdc.logging.v1) to see all options for constructing a `Log Filter` .\ngRPC is widely supported across programming languages and provides a more efficient communication method compared to HTTP clients.\nTo query logs using gRPC, you must meet the following prerequisites:- Create your own client library based on Google-supplied protocol buffers.\n- Implement authentication in the client.\n- Implement retries.\nFor information about the protocol buffers, see the [API documentation](/distributed-cloud/hosted/docs/latest/gdch/apis/service/logging/v1/goog.gdc.logging.v1) .\nThe following example shows how to query logs from a Go program using a non-authenticated gRPC client. The example assumes you created a golang package that includes a Bazel build file to import code dependencies.- Save the following code to a Go program named `client.go` :```\npackage mainimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"crypto/tls\"\u00a0 \u00a0 \u00a0 \u00a0 \"flag\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/grpc/credentials\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/grpc/metadata\"\u00a0 \u00a0 \u00a0 \u00a0 pb \"<import path to generated log query api protos>/pkg/apis/public/logging/v1/proto\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/grpc\")var serverAddr = flag.String(\"server\", \"localhost:8080\", \"server address\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 flag.Parse()\u00a0 \u00a0 \u00a0 \u00a0 tc := credentials.NewTLS(&tls.Config{InsecureSkipVerify: true})\u00a0 \u00a0 \u00a0 \u00a0 conn, err := grpc.Dial(*serverAddr, grpc.WithTransportCredentials(tc))\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 panic(error.Error(fmt.Errorf(\"create client connection failed: %v\", err)))\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer conn.Close()\u00a0 \u00a0 \u00a0 \u00a0 c := pb.NewLogsClient(conn)\u00a0 \u00a0 \u00a0 \u00a0 md := metadata.Pairs(\"clienttest\", \"test\")\u00a0 \u00a0 \u00a0 \u00a0 ctx := metadata.NewOutgoingContext(context.Background(), md)\u00a0 \u00a0 \u00a0 \u00a0 err = listLabels(ctx, c, \"project-foo\")\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 panic(error.Error(err))\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 if err := listLabelValues(ctx, c, \"project-foo\", \"resource-bar\"); err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 panic(error.Error(err))\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 if err := listLogs(ctx, c, \"project-foo\", &pb.ListLogsFilter{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 LabelsEqual: \u00a0 \u00a0map[string]string{\"resource-bar\": \"resource-bar-value\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 OrderAscending: true,\u00a0 \u00a0 \u00a0 \u00a0 }); err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 panic(error.Error(err))\u00a0 \u00a0 \u00a0 \u00a0 }}// List all labels for a project.func listLabels(ctx context.Context, c pb.LogsClient, project string) error {\u00a0 \u00a0 \u00a0 \u00a0 lbr := &pb.ListLabelsRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: \u00a0 project,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PageSize: 1000, // PageSize can be configured to limit the number of responses per page.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := c.ListLabels(ctx, lbr)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"list labels: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"%v\", resp)\u00a0 \u00a0 \u00a0 \u00a0 return nil}// List specific label values for a project.func listLabelValues(ctx context.Context, c pb.LogsClient, project string, label string) error {\u00a0 \u00a0 \u00a0 \u00a0 lbr := &pb.ListLabelValuesRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: \u00a0 project,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Label: \u00a0 \u00a0label,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PageSize: 1000, // PageSize can be configured to limit the number of responses per page.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := c.ListLabelValues(ctx, lbr)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"list label values: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"%v\", resp)\u00a0 \u00a0 \u00a0 \u00a0 return nil}// List logs for a specific project.func listLogs(ctx context.Context, c pb.LogsClient, project string, lf *pb.ListLogsFilter) error {\u00a0 \u00a0 \u00a0 \u00a0 lbr := &pb.ListLogsRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: \u00a0 \u00a0 project,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 LogsFilter: lf,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PageSize: \u00a0 5, // PageSize can be configured to limit the number of responses per page.\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 resp, err := c.ListLogs(ctx, lbr)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"list logs: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Printf(\"logs: %v\", resp)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```\n- Run the Go program:```\ngo run PATH_TO_API/client.go -server=LOG_QUERY_API_ENDPOINT:443\n```Replace the following:- ``: the path to the API file.\n- ``: the [Log Query API endpoint](#log-query-api-endpoint) from where you want to query logs.\nIf the server flag is not specified, the default request gets to `localhost` .", "guide": "Documentation"}