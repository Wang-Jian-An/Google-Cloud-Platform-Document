{"title": "Google Kubernetes Engine (GKE) - Windows Server Semi-Annual Channel end of servicing", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview", "abstract": "# Google Kubernetes Engine (GKE) - Windows Server Semi-Annual Channel end of servicing\nThis page provides information about the end of servicing for Windows Server Semi-Annual Channel (SAC) node image types in Google Kubernetes Engine (GKE) Standard clusters. For instructions to migrate to supported node images, refer to [Migrate to supported Windows images](#migrate-to-ltsc) .\n", "content": "## About the Windows Server SAC removal\n[Microsoft is retiring the Windows Server Semi-Annual Channel on August 9, 2022](https://docs.microsoft.com/en-us/windows-server/get-started/servicing-channels-comparison#semi-annual-channel) . This coincides with the [end of servicing for Windows Server, version 20H2](https://docs.microsoft.com/en-us/windows-server/get-started/windows-server-release-info) . Windows Server will use the Long-Term Servicing Channel (LTSC) as the primary release channel. With this change, Microsoft will no longer release critical updates, including security updates, for Windows Server SAC images. As a result of this, GKE can no longer provide support for these images.\nGKE Standard will no longer let you create **new nodepools** that use Windows Server SAC image types. If you use one of the following image types in your existing node pools, you must migrate to a supported image type if you want to upgrade your GKE version.\n- `windows_sac`: Windows Server SAC with Docker\n- `windows_sac_containerd`: Windows Server SAC with containerd\nYour existing Windows Server SAC node pools will continue to function as expected after August 9, 2022. However, you risk exposing these nodes to security vulnerabilities and platform instability because of the lack of future updates for SAC.\n## Timeline and milestones\nAfter **August 9, 2022** , you can no longer do the following:\n- Create new clusters that use Windows Server SAC node images.\n- Create new node pools that use Windows Server SAC node images.\n- Enable node auto-provisioning with the`--autoprovisioning-image-type`flag set to`windows_sac`or`windows_sac_containerd`.\n- Upgrade the GKE version of existing Windows Server SAC nodes.## What should you do?\nWe recommend that you migrate your Windows Server SAC node pools to the `windows_ltsc_containerd` node image type. In GKE version 1.23 and later, this is the only supported Windows Server image type for new clusters and node pools.\nThe `windows_ltsc` image type, which uses Docker as the container runtime, is not supported in GKE version 1.23 and later because of the [Docker node image deprecation](/kubernetes-engine/docs/deprecations/docker-containerd) .\nDepending on your current GKE version, do the following:\n- **GKE version 1.20 and earlier** : Migrate your node pools to the`windows_ltsc`image.\n- **GKE version 1.21 and later** : Migrate your node pools to the`windows_ltsc_containerd`image.\n### Impact of migrating\nIf you currently use the `windows_sac` image, which has Docker as the container runtime, migrating to the `windows_ltsc_containerd` image type might impact any of your existing tooling that depends on Docker commands. For information on the potential impact of migrating to an image type that uses containerd, refer to the list of situations in [About the Docker node image deprecation](/kubernetes-engine/docs/deprecations/docker-containerd#impact_of_migrating) .\n## Migrate to Windows Server LTSC\nThe migration process consists of the following steps:\n- Identify container images for architecture updates\n- Build multi-arch Windows container images\n- Update existing node pools to Windows Server LTSC\n### Identify container images for architecture updates\nSingle-architecture container images running on Windows Server SAC aren't compatible with Windows Server LTSC images. You'll need to identify incompatible container images and prepare to update their architecture. If you have multi-arch images, you should inspect them to make sure that the images support the Windows Server 2019 LTSC variant, which has the version number `10.0.17763.X` .\nTo inspect the supported Windows version, run the following command from inside a Windows Server SAC node where the Pod is running:\n```\ndocker image inspect IMAGE_NAME\n```\nReplace `` with the name of the container image.\nIf the image supports the Windows Server SAC variant, the output is similar to the following:\n```\n[ {\n ...\n \"Architecture\": \"amd64\",\n \"Os\": \"windows\",\n \"OsVersion\": \"10.0.19042.1645\" // 1645 can be any build number\n }\n]\n```\nIf the image supports the Windows Server LTSC variant, the output is similar to the following:\n```\n[ {\n ...\n \"Architecture\": \"amd64\",\n \"Os\": \"windows\",\n \"OsVersion\": \"10.0.17763.2686\" // 2686 can be any build number\n }\n]\n```\nIf you already use multi-arch Windows container images, inspect the images to ensure that they support the Windows Server 2019 LTSC variant, which has the version number `10.0.17763.X` .\n```\ndocker manifest inspect MANIFEST_NAME\n```\nReplace `` with the name of your Docker manifest, such as `eu.gcr.io/gke-release-staging/internet-explorer:v2` .\nThe output is similar to the following:\n```\n{\n {\n \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n \"size\": 1575,\n \"digest\": \"...\",\n \"platform\": {\n  \"architecture\": \"amd64\",\n  \"os\": \"windows\",\n  \"os.version\": \"10.0.17763.1935\"\n }\n}\n```\n### Build multi-arch Windows container images\nAfter you identify any images that need updates to support the Windows Server 2019 LTSC variant, we recommend that you build multi-arch Windows Server images.\nBuilding multi-arch images ensures that your containers run on any Windows version offered by GKE. Multi-arch images will ease your migration experience, because containerd detects the Windows Server LTSC version on your migrated node pools and chooses the appropriate image from your manifest.\nYou can build these images manually, or by using the Cloud Build gke-windows-builder. We recommend the Cloud Build builder, which is regularly updated to support new Windows Server LTSC images as they become available. For both manual and Cloud Build instructions for multi-arch images, refer to [Building Windows Server multi-arch images](/kubernetes-engine/docs/tutorials/building-windows-multi-arch-images) .\n### Upgrade nodes to Windows Server LTSC\nAfter you update your container images to support the Windows Server LTSC variant, migrate your node pools to the Windows Server LTSC node image. We strongly recommend that you test the migration in a staging or test cluster to ensure that your deployments work as intended before upgrading your production environment. To update your image, do one of the following:\n- Create new node pools and migrate workloads to the new nodes\n- Upgrade the image type on your existing node pools\n- Create a new node pool:```\ngcloud container node-pools create NODE_POOL_NAME \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\u00a0 \u00a0 --image-type=WINDOWS_LTSC_IMAGE\n```Replace the following:- ``: the name of your new node pool.\n- ``: the name of your GKE cluster.\n- ``: the Windows Server LTSC image to use, which can be`windows_ltsc_containerd`or`windows_ltsc`.\n- Add the following nodeSelector to your workload manifests:```\nspec:\u00a0 ...\u00a0 nodeSelector:\u00a0 \u00a0 kubernetes.io/os: windows\u00a0 \u00a0 cloud.google.com/gke-os-distribution: windows_ltsc\n```You can also use this nodeSelector with `windows_sac` as the label value to tell GKE to avoid scheduling specific Pods on the new nodes.\n- Deploy your updated manifests:```\nkubectl apply -f MANIFEST_NAME\n```\n- Scale your old node pool to zero:```\ngcloud container node-pools update OLD_POOL \\\u00a0 \u00a0 --cluster=CLUSTER_NAME \\\u00a0 \u00a0 --min-nodes=0 \\\u00a0 \u00a0 --max-nodes=NODE_COUNT\n```Replace the following:- ``: the name of your existing Windows Server SAC node pool.\n- ``: the maximum number of nodes in the node pool. Gradually scale this number down to 0 by repeating this command. If you encounter issues, scale this value back up.\n- When fully migrated, delete the old node pool:```\ngcloud container node-pools delete OLD_POOL \\\u00a0 \u00a0 --cluster=CLUSTER_NAME\n```\n- Switch the node image type on your existing Windows Server SAC node pools:```\ngcloud container clusters upgrade CLUSTER_NAME \\\u00a0 \u00a0 --region=COMPUTE_REGION \\\u00a0 \u00a0 --node-pool=NODE_POOL \\\u00a0 \u00a0 --image-type=WINDOWS_LTSC_IMAGE\n```Replace the following:- ``: the name of your GKE cluster.\n- ``: the Compute Engine region of your cluster. For zonal clusters, use`--zone=` ``.\n- ``: the name of your Windows Server SAC node pool.\n- ``: the Windows Server LTSC image to use, which can be`windows_ltsc_containerd`or`windows_ltsc`.\n## What's next\n- [Learn about the supported node image types](/kubernetes-engine/docs/concepts/node-images) .\n- [Learn how to build multi-arch Windows Server images](/kubernetes-engine/docs/tutorials/building-windows-multi-arch-images) .\n- [Learn how to configure Windows nodes to automatically join an Active Directory domain](/kubernetes-engine/docs/how-to/auto-join-windows-nodepools) .\n- [Migrate from Docker to containerd node images](/kubernetes-engine/docs/how-to/migrate-containerd) .", "guide": "Google Kubernetes Engine (GKE)"}