{"title": "Apigee - Step 9: Expose Apigee ingress gateway", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Step 9: Expose Apigee ingress gateway\nYou are currently viewing version 1.8 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nApigee ingress gateway is a new feature introduced  in Apigee hybrid version 1.8.0. It replaces Anthos Service Mesh to  provide the ingress gateway.\nThis step explains how to set up the Kubernetes service for your Apigee ingress gateway. The Kubernetes services is needed per ingress deployment to obtain an IP address that can be exposed. Client calls to proxies will invoke a hostname that will resolve to this IP address.\n", "content": "## \n Options for Kubernetes services for your Apigee ingress gateway\nThere are two options for providing a kubernetes service to assign the IP address ...\n- Create a [custom Kubernetes service](#customservice) for each Apigee ingress gateway (recommended).\n- Use the [default Kubernetes service](#defaultservice) .\n### \n Create your own Kubernetes service\nFor production environments, Apigee recommends you create a custom Kubernetes service for each ingress gateway.\n- Apigee deletes default service, but does not delete the custom kubernetes service upon clean up.  Hence, the IP address won't be released upon reinstallation of Apigee hybrid.\n- For platforms not on Google Cloud, like EKS, AKS, and OpenShift, you need to customize the  Kubernetes service to work with the cloud provider. Therefore it is better to create a custom  Kubernetes service than to use the default service, as Apigee does not support all customizations to  the default Kubernetes service.\nUse the following steps to set up and route traffic to the new ingress gateway.\n- Create a Kubernetes service with the required pod selector labels,`app`,`ingress_name`, and`org`. These labels are already present in Apigee ingress gateway pods. Create a service file using the following as an example:```\napiVersion: v1\nkind: Service\nmetadata:\n name: SERVICE_NAME\n namespace: apigee\nspec:\n ports:\n - name: status-port\n port: 15021\n protocol: TCP\n targetPort: 15021\n - name: https\n port: 443\n protocol: TCP\n targetPort: 8443\n selector:\n app: apigee-ingressgateway #required\n ingress_name: INGRESS_NAME\n org: ORG_NAME\n type: LoadBalancer\n loadBalancerIP: LOAD_BALANCER_IP\n```- is a name used to identify this service. For example,`apigee-prod-1`. **Note:** To more easily identify your services, use the ingress name as part of the   service name.\n- is the name of this Apigee ingress gateway gateway. It must match the name  you provided for`ingressGateways.name`in your`overrides.yaml`file. for  more information see [ingressGateways in the  Configuration properties reference](/apigee/docs/hybrid/v1.8/config-prop-ref#ingressgateways) .\n- is the name of the Apigee organization. It must match the name  you provided for`org`in your`overrides.yaml`file. for  more information see [org in the  Configuration properties reference](/apigee/docs/hybrid/v1.8/config-prop-ref#org) .\n- is the IP adddress for the load balancer.\nApigee ingress gateway exposes the following ports:| Port | Description                         |\n|-------:|:--------------------------------------------------------------------------------------------------------------|\n| 443 | Runtime traffic.                        |\n| 15021 | Health check. status-port exposes a /healthz/ready endpoint that can be used with GKE Ingress health checks. |\n- Create the service by applying the`` `.yaml`:```\nkubectl apply -f SERVICE_FILENAME.yaml\n```\n- Find the external IP of Apigee ingress gateway with the following command:```\nkubectl get svc -n apigee SERVICE_NAME\n```Your output should look something like:```\nNAME          TYPE   CLUSTER-IP EXTERNAL-IP  PORT(S)          AGE\napigee-ingressgateway-prod-hybrid-37a39bd LoadBalancer 192.0.2.123 233.252.0.123 15021:32049/TCP,80:31624/TCP,443:30723/TCP 16h\n```\n- Disable the loadbalancer for the default Apigee ingress gateway service:- Update the [ingressGateways[].svcType](/apigee/docs/hybrid/v1.8/config-prop-ref#ingressgateways-svctype) property to`ClusterIP`in your overrides file:```\ningressGateways:\n svcType: ClusterIP\n```\n- Apply the changes with`apigeectl apply --org`.```\n${APIGEECTL_HOME}/apigeectl apply -f ${HYBRID_FILES}/overrides/overrides.yaml\n```\nSee [Disable the loadbalancer for the default  Apigee ingress gateway service](/apigee/docs/hybrid/v1.8/managing-ingress#disable-loadbalancer) for more information.\n- Test the ingress gateway by making a healthcheck call.```\ncurl -H 'User-Agent: GoogleHC/' https://DOMAIN/healthz/ingress -k \\\n --resolve \"DOMAIN:443:INGRESS_IP_ADDRESS\"\n```Where- is the domain you provided as the hostname for the environment group you  created in [Project and org setup - Step 3: Create an  environment group](/apigee/docs/hybrid/v1.8/precog-add-environment) .\n- is the ingress IP address, for example`233.252.0.123`.\nOn success the command returns:```\nApigee Ingress is healthy\n```\n- Use this IP address to update your DNS record (usually an`A`or`CNAME`record) at your registrar or DNS provider.\n### \n Use the default Kubernetes service\nFor non-production environments or to test initial traffic through the Apigee ingress gateway, Apigee hybrid provides default Kubernetes service for each ingress deployment.\nYou can make limited configuration changes to the default service in your `overrides.yaml` file. For the available configuration options, see [Managing Apigee ingress gateway](/apigee/docs/hybrid/v1.8/managing-ingress) . For example, you can add annotations.\n**Note:** This service will be deleted when the ingress deployment is deleted (when the ingress gateway is removed from the overrides file).\nFor production environments, it is recommended you provide a Kubernetes service for ingress. Follow the steps in [Create your own Kubernetes service](#customservice) .\n- Find the external IP of the default Apigee ingress service with the following command:```\nkubectl get svc -n apigee -l app=apigee-ingressgateway\n```Your output should look something like:```\nNAME          TYPE   CLUSTER-IP EXTERNAL-IP  PORT(S)          AGE\napigee-ingressgateway-prod-hybrid-37a39bd LoadBalancer 192.0.2.123 233.252.0.123 15021:32049/TCP,80:31624/TCP,443:30723/TCP 16h\n```\n- Test the ingress gateway by making a healthcheck call.```\ncurl -H 'User-Agent: GoogleHC/' https://DOMAIN/healthz/ingress -k \\\n --resolve \"DOMAIN:443:INGRESS_IP_ADDRESS\"\n```Where- is the domain you provided as the hostname for the environment group you  created in [Project and org setup - Step 3: Create an  environment group](/apigee/docs/hybrid/v1.8/precog-add-environment) .\n- is the ingress IP address, for example`233.252.0.123`.\nOn success the command returns:```\nApigee Ingress is healthy\n```\n- Use this IP address to update your DNS record (usually an`A`or`CNAME`record) at your registrar or DNS provider.\n**Congratulations!** You've successfully set up the Apigee ingress gateway. Now it's time to download a proxy and test  your ingress gateway.\n## Next step\nstepper_buttons is defined in localvars Iterate over all the buttons in the data dictionary If the button's step matches the current step in the process, make the button disabled [1](/apigee/docs/hybrid/v1.8/install-create-cluster) If the button's step matches the current step in the process, make the button disabled [2](/apigee/docs/hybrid/v1.8/install-cert-manager) If the button's step matches the current step in the process, make the button disabled [3](/apigee/docs/hybrid/v1.8/install-apigeectl) If the button's step matches the current step in the process, make the button disabled [4](/apigee/docs/hybrid/v1.8/install-service-accounts) If the button's step matches the current step in the process, make the button disabled [5](/apigee/docs/hybrid/v1.8/install-create-tls-certificates) If the button's step matches the current step in the process, make the button disabled [6](/apigee/docs/hybrid/v1.8/install-configure-cluster) If the button's step matches the current step in the process, make the button disabled [7](/apigee/docs/hybrid/v1.8/install-enable-synchronizer-access) If the button's step matches the current step in the process, make the button disabled [8](/apigee/docs/hybrid/v1.8/install-hybrid-runtime) If the button's step matches the current step in the process, make the button disabled If the button's step matches the next step [9](/apigee/docs/hybrid/v1.8/install-expose-apigee-ingress) If the button's step matches the current step in the process, make the button disabled In all other cases (previous buttons or future buttons (after the next one), make them links [(NEXT) Step 10: Deploy a proxy](/apigee/docs/hybrid/v1.8/install-deploy-proxy)", "guide": "Apigee"}