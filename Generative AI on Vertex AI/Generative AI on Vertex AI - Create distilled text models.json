{"title": "Generative AI on Vertex AI - Create distilled text models", "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/models/distill-text-models", "abstract": "# Generative AI on Vertex AI - Create distilled text models\n**Preview** Distillation is a Preview offering, subject to the Pre-GA Offerings Terms of the [GCP Service Specific Terms](https://cloud.google.com/terms/service-terms) . Pre-GA products and features may have limited support, and changes to pre-GA products and features may not be compatible with other pre-GA versions. For more information, see the [launch stage descriptions](https://cloud.google.com/products#product-launch-stages) . Further, by using these features, you agree to the Generative AI Preview [ terms and conditions ](https://cloud.google.com/trustedtester/aitos) (Preview Terms).For these features, you can process personal data as outlined in the Cloud Data Processing Addendum, subject to applicable restrictions and obligations in the Agreement (as defined in the Preview Terms).\nDistilling step by step uses a large model to train smaller model to perform certain tasks better with improved reasoning capabilities. The trained, distilled model can do the same things you care about in the larger teacher model at a lower cost and with lower latency.\nWhen you distill a foundation model, you use a model and a model:\n- The teacher model is the large model that can do what you want. However, because of its size, the teacher model might cost more to use and have more latency than a smaller model.\n- The student model is a smaller than the teacher model. The training and distilling process uses labeled examples and rationales generated by the teacher model to tune the student model. The performance and reasoning capabilities of the resulting distilled model are better than the original student model.\nYou specify a teacher model and a student model when you create a distillation job.\nTo see an example of using the Vertex AI SDK for Python generate a distilled a model,  run the \"Vertex AI creating a distilled model\" Jupyter notebook in one of the following  environments: [Openin Colab](https://colab.research.google.com/github/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/generative_ai/distillation.ipynb) | [Openin Vertex AI Workbench user-managed notebooks](https://console.cloud.google.com/vertex-ai/workbench/deploy-notebook?download_url=https%3A%2F%2Fraw.githubusercontent.com%2FGoogleCloudPlatform%2Fvertex-ai-samples%2Fmain%2Fnotebooks%2Fofficial%2Fgenerative_ai%2Fdistillation.ipynb) | [View on GitHub](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/generative_ai/distillation.ipynb)\n", "content": "## Supported models\nYou can specify the following for the teacher model:\n- `text-unicorn@001`\nYou can specify the following for the student model:\n- `text-bison@002`\n### Dataset format\nDistillation works on a labeled or an unlabeled dataset. If you have a high quality labeled dataset with hundreds of examples, then we recommend that you use that. Otherwise, you can use an unlabeled prompt dataset. If you use an unlabeled dataset, then the teacher model generates the labels and the rationale for distillation. More than 1,000 examples are recommended if you use an unlabeled dataset.\nThe labeled or unlabeled distillation dataset must be in [JSON Lines](https://jsonlines.org/) (JSONL) format where each line contains a single tuning example. Before you distill your model, you [upload your dataset to a Cloud Storage bucket](#upload-datasets) .\nEach dataset example contains an `input_text` field with the model prompt and an optional `output_text` field that contains an example response that the distilled model is expected to produce.\nThe maximum token length for `input_text` is 7,168 and the maximum token length for `output_text` is 1,024. If either field exceeds the maximum token length, the excess tokens are truncated.\nThe maximum number of examples that a dataset for a text generation model can contain is 10,000.\n### Dataset example\n```\n{\"input_text\": \"question: How many people live in Beijing? context:\nWith over 21 million residents, Beijing is the world's most populous national\ncapital city and is China's second largest city after Shanghai. It is\nlocated in Northern China, and is governed as a municipality under the direct\nadministration of the State Council with 16 urban, suburban, and rural\ndistricts.[14] Beijing is mostly surrounded by Hebei Province with the exception\nof neighboring Tianjin to the southeast; together, the three divisions form the\nJingjinji megalopolis and the national capital region of China.\",\n\"output_text\": \"over 21 million people\"}\n{\"input_text\": \"question: How many parishes are there in Louisiana? context:\nThe U.S. state of Louisiana is divided into 64 parishes (French: paroisses) in\nthe same manner that 48 other states of the United States are divided into\ncounties, and Alaska is divided into boroughs.\", \"output_text\": \"64\"}\n```\n### Include instructions in examples\nFor tasks such as classification, it is possible to create a dataset of examples that don't contain instructions. However, excluding instructions from the examples in the dataset leads to worse performance after distillation than including instructions, especially for smaller datasets.\n**Excludes instructions** :\n```\n{\"input_text\": \"5 stocks to buy now\",\"output_text\": \"business\"}\n```\n**Includes instructions** :\n```\n{\"input_text\": \"Classify the following text into one of the following classes:[business, entertainment] Text: 5 stocks to buy now\",\"output_text\": \"business\"}\n```\n### Sample datasets\nYou can use a sample dataset to get started with distilling. The following is a classification task dataset that contains sample medical transcriptions for various medical specialties. The data is from [mtsamples.com](https://mtsamples.com) as made available on [Kaggle](https://www.kaggle.com/datasets/tboyle10/medicaltranscriptions) .\n- Sample distillation dataset URI:`gs://cloud-samples-data/vertex-ai/model-evaluation/peft_train_sample.jsonl`\n- Sample eval dataset URI:`gs://cloud-samples-data/vertex-ai/model-evaluation/peft_eval_sample.jsonl`\nTo use these datasets, specify the URIs in the applicable parameters when [creating a text model distillation job](#create_a_text_model_distilling_job) .\nFor example:\n```\n...\"dataset_uri\": \"gs://cloud-samples-data/vertex-ai/model-evaluation/peft_train_sample.jsonl\",...\"evaluation_data_uri\": \"gs://cloud-samples-data/vertex-ai/model-evaluation/peft_eval_sample.jsonl\",...\n```\n### Maintain consistency with production data\nThe examples in your datasets should match your expected production traffic. If your dataset contains specific formatting, keywords, instructions, or information, the production data should be formatted in the same way and contain the same instructions.\nFor example, if the examples in your dataset include a `\"question:\"` and a `\"context:\"` , production traffic should also be formatted to include a `\"question:\"` and a `\"context:\"` in the same order as it appears in the dataset examples. If you exclude the context, the model will not recognize the pattern, even if the exact question was in an example in the dataset.\n### Upload distilling datasets to Cloud Storage\nTo run a tuning job, you need to upload one or more datasets to a Cloud Storage bucket. You can either [create a new Cloud Storage bucket](/storage/docs/creating-buckets#create_a_new_bucket) or use an existing one to store dataset files. The region of the bucket doesn't matter, but we recommend that you use a bucket that's in the same Google Cloud project where you plan to tune your model.\nAfter your bucket is ready, [upload](/storage/docs/creating-buckets#create_a_new_bucket) your dataset file to the bucket.\n## Distilling region settings\nYou can specify three Google Cloud region settings when you configure a distillation job. One region is where the pipeline that tunes your model runs. The other region is where the model tuning portion of the distillation process runs and the distilled model is uploaded.\n### Pipeline job region\nThe pipeline job region is the region where the pipeline job runs. If the optional [model upload region](#upload-region) isn't specified, then the model is uploaded and deployed to the pipeline job region. Intermediate data, such as the transformed dataset, is stored in the pipeline job region. To learn which regions you can use for the pipeline job region, see [Supported pipeline job and model upload regions](#supported-supervised-tuning-regions) .\n**Note:** Because the teacher model must be `text_unicorn` , and `text_unicorn` is available in only `us-central1` , inference on the teacher model to  generate rationales happens only in `us-central1` . The rest of the  pipeline job happens in the pipeline job region you specify.\nYou must specify the pipeline job region using one of the following methods.\n- If you create a distillation job by sending a POST request using the [pipelineJobs.create](/vertex-ai/docs/reference/rest/v1/projects.locations.pipelineJobs/create) method, then you use the URL to specify the region where the pipeline job runs. In the following URL, replacing both instances of with the region where the pipeline runs:```\n\u00a0https://PIPELINE_JOB_REGION-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/PIPELINE_JOB_REGION/pipelineJobs\n```\n- If you use the Google Cloud console to create a distillation job, then you specify the pipeline job region in the **Region** control when you create your distillation job. In the Google Cloud console, the **Region** control specifies both the pipeline job region and the model upload region. When you use the Google Cloud console to create a distillation job, both regions are always the same.\n### Model upload region\nYou use the optional `tuned_model_location` parameter to specify where your distilled model is uploaded. If the model upload region isn't specified, then the distilled model is uploaded to the [pipeline job region](#pipeline-region) .You can use one of the [Supported pipeline job and model upload regions](#supported-supervised-tuning-regions) for your model upload region. You can specify the model upload region using one of the following methods:\n- If you create a distillation job by sending a POST request using the [pipelineJobs](/vertex-ai/docs/reference/rest/v1/projects.locations.pipelineJobs/create) method, then you can use the `location` parameter to specify the model upload region.\n- If you use the Google Cloud console to create a distillation job, then you specify the model upload region in the **Region** control when you create your distillation job. In the Google Cloud console, the **Region** control specifies both the model upload region and the pipeline job region. When you use the Google Cloud console to create a distillation job, both regions are always the same.\n### Model tuning region\nThe tuning region is where the computation for the tuning portion of the distillation job occurs. This region is determined by the accelerator type you choose. If you specify `TPU` for your accelerator type, then your model tuning computation happens in `europe-west4` . If you specify `GPU` for your accelerator type, then model tuning happens in `us-central1` .\n### Supported pipeline job and model upload regions\nYou can use one of the following regions to specify the model upload region and to specify the pipeline job region:\n- `us-central1`\n- `europe-west4`\n- `asia-southeast1`\n- `us-west1`\n- `europe-west3`\n- `europe-west2`\n- `asia-northeast1`\n- `us-east4`\n- `us-west4`\n- `northamerica-northeast1`\n- `europe-west9`\n- `europe-west1`\n- `asia-northeast3`## Create a text model distilling job\nYou can create a text model distilling job by using the Google Cloud console or the API. For guidance on model distilling configurations, see [Recommended configurations](#recommended_configurations) .\nTo create a model distillation job, send a POST request by using the [pipelineJobs](/vertex-ai/docs/reference/rest/v1/projects.locations.pipelineJobs/create) method. Note that some of the parameters are not supported by all of the models. Ensure that you only include the applicable parameters for the model that you're distilling.\nBefore using any of the request data, make the following replacements:- : A display  name for the pipelineJob.\n- : The URI of the bucket to output  pipeline artifacts to.\n- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : A display name for the  distilled model uploaded by the`pipelineJob`.\n- : URI of your dataset file.\n- : The region where the pipeline tuning job runs. This is also the default region for where the tuned model is uploaded. If you want to upload your model to a different region, then use the`location`parameter to specify the tuned model upload region. For more information, see [Model upload region](/vertex-ai/generative-ai/docs/models/tune-text-models-supervised#pipeline-region) .\n- : (optional) The region where the tuned model is uploaded. If you don't specify a model upload region, then the tuned model uploads to the same region where the pipeline job runs. For more information, see [Model upload region](/vertex-ai/generative-ai/docs/models/tune-text-models-supervised#upload-region) .\n- : (optional, default`GPU`) The type of accelerator to use for model tuning. The valid options are:- `GPU`: Uses eight A100 80 GB GPUs for tuning. Make sure you have enough [quota](/vertex-ai/generative-ai/docs/models/tune-models#quota) . If you choose`GPU`, then [VPC\u2011SC](/vertex-ai/docs/general/vpc-service-controls) is supported. [CMEK](/vertex-ai/docs/general/cmek) is supported if the tuning  location and model upload location are`us-centra1`. For more information, see [  Supervised tuning region settings](/vertex-ai/generative-ai/docs/models/tune-text-models-supervised#supervised-tuning-regions) . If you choose`GPU`, then your model tuning  computations happen in the`us-central1`region.\n- `TPU`: Uses 64 cores of the TPU v3 pod for tuning. Make sure you have enough [quota](/vertex-ai/generative-ai/docs/models/tune-models#quota) . [CMEK](/vertex-ai/docs/general/cmek) isn't supported, but [VPC\u2011SC](/vertex-ai/docs/general/vpc-service-controls) is supported. If you  choose`TPU`, then your model tuning computations happen in the`europe-west4`region.\n- : Name of the  teacher model to use for distilling. The supported model is`text-unicorn@001`.\n- : Name of the  student model to use for distilling. The supported model is`text-bison@002`.\n- : The number of steps to run for model tuning. The default value is 300. The batch size varies by tuning location and model size. For 8k models, such as`text-bison@002`,`chat-bison@002`,`code-bison@002`, and`codechat-bison@002`:- `us-central1`has a batch size of 8.\n- `europe-west4`has a batch size of 24.\nFor 32k models, such as`text-bison-32k`,`chat-bison-32k`,`code-bison-32k`, and`codechat-bison-32k`:- `us-central1`has a batch size of 8.\n- `europe-west4`has a batch size of 8.\nFor example, if you're training `text-bison@002` in `europe-west4` , there are 240 examples in a training dataset, and you set `steps` to 20, then the number of training examples is the product of 20 steps and the batch size of 24, or 480 training steps. In this case, there are two epochs in the training process because it goes through the examples two times. In `us-central1` , if there are 240 examples in a training dataset and you set `steps` to 15, then the number of training examples is the product of 15 steps and the batch size of 8, or 120 training steps. In this case, there are 0.5 epochs because there are half as many training steps as there are examples.\n- : A  multiplier to apply to the recommended learning rate. To use the recommended learning rate,  use`1.0`.\n- : (optional) The URI of the JSONL file that contains the evaluation dataset for batch prediction and evaluation. Evaluation isn't supported for`chat-bison`. For more information, see [Dataset format fortuning a code model](/vertex-ai/generative-ai/docs/models/tune-text-models#dataset-format) . The evaluation dataset requires between ten and 250 examples.\n- : (optional, default`20`) The number of tuning steps between each evaluation. An evaluation interval isn't supported for chat models. Because the evaluation runs on the entire evaluation dataset, a smaller evaluation interval results in a longer tuning time. For example, if`steps`is 200 and`EVAL_INTERVAL`is 100, then you will get only two data points for the evaluation metrics. This parameter requires that the`evaluation_data_uri`is set.\n- :  (optional, default`true`) A`boolean`that, if set to`true`, stops tuning before completing all the tuning steps if model performance, as measured by the accuracy of predicted tokens, does not improve enough between evaluations runs. If`false`, tuning continues until all the tuning steps are complete. This parameter requires that the`evaluation_data_uri`is set. Enable early stopping isn't supported for chat models.\n- :  (optional) The ID of a [Vertex AI TensorBoard instance](/vertex-ai/docs/experiments/tensorboard-setup#tensorboard_id) . The Vertex AI TensorBoard instance is used to create an [experiment](/vertex-ai/docs/experiments/create-experiment) after the tuning job completes. The Vertex AI TensorBoard instance needs to be in the same region as the tuning pipeline.\n- : (optional) The fully qualified name of a customer-managed encryption key (CMEK) that you want to use for data encryption. A CMEK is available only in`us-central1`. If you use`us-central1`and don't specify a CMEK, then a Google-managed encryption key is used. A Google-managed encryption key is used by default in all other [available regions](/vertex-ai/generative-ai/docs/models/tune-text-models-supervised#supported-supervised-tuning-regions) . For more information, see [CMEK overview](/kms/docs/cmek) .\n- : The URI for the distilling template,`https://us-kfp.pkg.dev/ml-pipeline/distillation/distillation/v1.0.0`.\n- : (optional) The service  account that Vertex AI uses to run your pipeline job. By default, your project's  Compute Engine default service account (`PROJECT_NUMBER\u2011compute@developer.gserviceaccount.com`)  is used. Learn more about [ attaching a custom service account](/vertex-ai/docs/general/custom-service-account) .\nHTTP method and URL:\n```\nPOST https://PIPELINE_JOB_REGION-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/PIPELINE_JOB_REGION/pipelineJobs\n```\nRequest JSON body:\n```\n{\n \"displayName\": \"PIPELINEJOB_DISPLAYNAME\",\n \"runtimeConfig\": {\n \"gcsOutputDirectory\": \"gs://OUTPUT_DIR\",\n \"parameterValues\": {\n  \"project\": \"PROJECT_ID\",\n  \"model_display_name\": \"MODEL_DISPLAYNAME\",\n  \"dataset_uri\": \"gs://DATASET_URI\",\n  \"location\": \"MODEL_UPLOAD_REGION\",\n  \"accelerator_type\": \"ACCELERATOR_TYPE\",\n  \"teacher_model_reference\": TEACHER_MODEL_REFERENCE,\n  \"student_model_reference\": STUDENT_MODEL_REFERENCE,\n  \"train_steps\": STEPS,\n  \"learning_rate_multiplier\": LEARNING_RATE_MULTIPLIER,\n  \"evaluation_data_uri\": \"gs://EVAL_DATASET_URI\",\n  \"evaluation_interval\": EVAL_INTERVAL,\n  \"enable_early_stopping\": ENABLE_EARLY_STOPPING,\n  \"enable_checkpoint_selection\": \"ENABLE_CHECKPOINT_SELECTION\",\n  \"tensorboard_resource_id\": \"TENSORBOARD_ID\",\n  \"encryption_spec_key_name\": \"ENCRYPTION_KEY_NAME\"\n }\n },\n \"encryptionSpec\": {\n \"kmsKeyName\": \"ENCRYPTION_KEY_NAME\"\n },\n \"serviceAccount\": \"SERVICE_ACCOUNT\",\n \"templateUri\": \"TEMPLATE_URI\"\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://PIPELINE_JOB_REGION-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/PIPELINE_JOB_REGION/pipelineJobs\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://PIPELINE_JOB_REGION-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/PIPELINE_JOB_REGION/pipelineJobs\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following. Note that `pipelineSpec` has been truncated to save space.To learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/generative_ai/distillation.py) \n```\nfrom __future__ import annotationsfrom typing import Optionalfrom google.auth import defaultimport vertexaifrom vertexai.preview.language_models import TextGenerationModel, TuningEvaluationSpeccredentials, _ = default(scopes=[\"https://www.googleapis.com/auth/cloud-platform\"])def distill_model(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 dataset: str,\u00a0 \u00a0 teacher_model: str,\u00a0 \u00a0 train_steps: int = 300,\u00a0 \u00a0 evaluation_dataset: Optional[str] = None,) -> None:\u00a0 \u00a0 \"\"\"Distill a new model.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 project_id: GCP Project ID, used to initialize vertexai\u00a0 \u00a0 \u00a0 location: GCP Region, used to initialize vertexai\u00a0 \u00a0 \u00a0 dataset: GCS URI of jsonl file.\u00a0 \u00a0 \u00a0 teacher_model: Name of the teacher model.\u00a0 \u00a0 \u00a0 train_steps: Number of training steps to use when tuning the model.\u00a0 \u00a0 \u00a0 evaluation_dataset: GCS URI of jsonl file of evaluation data.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 vertexai.init(project=project_id, location=location, credentials=credentials)\u00a0 \u00a0 eval_spec = TuningEvaluationSpec(evaluation_data=evaluation_dataset)\u00a0 \u00a0 student_model = TextGenerationModel.from_pretrained(\"text-bison@002\")\u00a0 \u00a0 distillation_job = student_model.distill_from(\u00a0 \u00a0 \u00a0 \u00a0 teacher_model=teacher_model,\u00a0 \u00a0 \u00a0 \u00a0 dataset=dataset,\u00a0 \u00a0 \u00a0 \u00a0 # Optional:\u00a0 \u00a0 \u00a0 \u00a0 train_steps=train_steps,\u00a0 \u00a0 \u00a0 \u00a0 evaluation_spec=eval_spec,\u00a0 \u00a0 )\u00a0 \u00a0 return distillation_job\n```To distill a text model using the Google Cloud console, perform the following steps:- In the Vertex AI section of the Google Cloud console, go to  the **Vertex AI Studio** page. [Go to Vertex AI Studio](https://console.cloud.google.com/vertex-ai/generative/language) \n- Click the **Tune and distill** tab.\n- Clickadd **Create distilled model** .\n- Configure model details:- **Model name** : Enter a name for your distilled model.\n- **Teacher model** : Select the model that you want to use for the  teacher model.\n- **Student model** : Select the model that you want to use for the  student model.\n- **Region** : Select the region where the pipeline tuning job runs and where the tuned model is deployed.\n- **Working directory** : Enter the Cloud Storage location where artifacts are stored when your model is tuned.\n- Expand **Advanced Options** to configure advanced settings.- **Train steps** : Enter the number of steps to run for model tuning. The default value is 300. The batch size varies by tuning location and model size. For 8k models, such as`text-bison@002`,`chat-bison@002`,`code-bison@002`, and`codechat-bison@002`:- `us-central1`has a batch size of 8.\n- `europe-west4`has a batch size of 24.\nFor 32k models, such as`text-bison-32k`,`chat-bison-32k`,`code-bison-32k`, and`codechat-bison-32k`:- `us-central1`has a batch size of 8.\n- `europe-west4`has a batch size of 8.\nFor example, if you're training `text-bison@002` in `europe-west4` , there are 240 examples in a training dataset, and you set `steps` to 20, then the number of training examples is the product of 20 steps and the batch size of 24, or 480 training steps. In this case, there are two epochs in the training process because it goes through the examples two times. In `us-central1` , if there are 240 examples in a training dataset and you set `steps` to 15, then the number of training examples is the product of 15 steps and the batch size of 8, or 120 training steps. In this case, there are 0.5 epochs because there are half as many training steps as there are examples.\n- **Learning rate multiplier** : Enter the step size at each iteration. The default value is 1.\n- **Accelerator type** : (optional) Enter the type of accelerator to use for model tuning. The valid options are:- `GPU`: Uses eight A100 80 GB GPUs for tuning. Make sure you have enough [quota](/vertex-ai/generative-ai/docs/models/tune-models#quota) . If you choose`GPU`, then [VPC\u2011SC](/vertex-ai/docs/general/vpc-service-controls) is supported. [CMEK](/vertex-ai/docs/general/cmek) is supported if the tuning  location and model upload location are`us-centra1`. For more information, see [  Supervised tuning region settings](/vertex-ai/generative-ai/docs/models/tune-text-models-supervised#supervised-tuning-regions) . If you choose`GPU`, then your model tuning  computations happen in the`us-central1`region.\n- `TPU`: Uses 64 cores of the TPU v3 pod for tuning. Make sure you have enough [quota](/vertex-ai/generative-ai/docs/models/tune-models#quota) . [CMEK](/vertex-ai/docs/general/cmek) isn't supported, but [VPC\u2011SC](/vertex-ai/docs/general/vpc-service-controls) is supported. If you  choose`TPU`, then your model tuning computations happen in the`europe-west4`region.\n- **Add a TensorBoard instance** : (optional) The ID of a [Vertex AI TensorBoard instance](/vertex-ai/docs/experiments/tensorboard-setup#tensorboard_id) . The Vertex AI TensorBoard instance is used to create an [experiment](/vertex-ai/docs/experiments/create-experiment) after the tuning job completes. The Vertex AI TensorBoard instance needs to be in the same region as the tuning pipeline.\n- **Encryption** (optional) Choose to use a Google-managed encryption key or a customer-managed encryption key (CMEK). A CMEK is available for encryption only in the`us-central1`region. In all other [available regions](/vertex-ai/generative-ai/docs/models/tune-text-models-supervised#supported-supervised-tuning-regions) , a Google-managed encryption key is used. For more information, see [CMEK overview](/kms/docs/cmek) .\n- **Service account** (optional) Choose a a user-managed service account. A service account determines which Google Cloud resources your service code can access. If you don't choose a service account, then a Google-managed service account is used that includes permissions appropriate for most models.\n- Click **Continue** \n- If you want to upload your distillation dataset file, selectradio_button_checked **Upload JSONL file to Cloud Storage** . If your  dataset file is already in a Cloud Storage bucket, selectradio_button_checked **Existing JSONL file on Cloud Storage** .- In **Select JSONL file** , click **Browse** and    select your dataset file.\n- In **Dataset location** , click **Browse** and select the Cloud Storage bucket where you want to store your    dataset file.\nIn **Cloud Storage file path** , click **Browse** and select the Cloud Storage bucket where your dataset file is    located.\n- (Optional) To evaluate your distilled model, select **Enable model\n  evaluation** and configure your model evaluation:- **Evaluation dataset** : (optional) The URI of the JSONL file that contains the evaluation dataset for batch prediction and evaluation. Evaluation isn't supported for`codechat-bison`. For more information, see [Dataset format fortuning a code model](/vertex-ai/generative-ai/docs/models/tune-code-models#dataset-format) . The evaluation dataset requires between ten and 250 examples.\n- **Evaluation interval** : (optional, default`20`) The number of tuning steps between each evaluation. An evaluation interval isn't supported for chat models. Because the evaluation runs on the entire evaluation dataset, a smaller evaluation interval results in a longer tuning time. For example, if`steps`is 200 and`EVAL_INTERVAL`is 100, then you will get only two data points for the evaluation metrics. This parameter requires that the`evaluation_data_uri`is set.\n- **Enable early stopping** : (optional, default`true`) A`boolean`that, if set to`true`, stops tuning before completing all the tuning steps if model performance, as measured by the accuracy of predicted tokens, does not improve enough between evaluations runs. If`false`, tuning continues until all the tuning steps are complete. This parameter requires that the`evaluation_data_uri`is set. Enable early stopping isn't supported for chat models.\n- **Enable checkpoint selection** : When enabled, Vertex AI selects and returns the checkpoint with the best model evaluation performance from all checkpoints created during the tuning job. When disabled, the final checkpoint created during the tuning job is returned. Each checkpoint refers to a snapshot of the model during a tuning job.\n- **TensorBoard instance** : (optional) The ID of a [Vertex AI TensorBoard instance](/vertex-ai/docs/experiments/tensorboard-setup#tensorboard_id) . The Vertex AI TensorBoard instance is used to create an [experiment](/vertex-ai/docs/experiments/create-experiment) after the tuning job completes. The Vertex AI TensorBoard instance needs to be in the same region as the tuning pipeline.\n- Click **Start distillation** .**Note:** All intermediate pipeline data, such as the processed dataset, is stored in the [pipeline job region](#pipeline-region) . The tuning computation that happens during the distillation process occurs in the [model distilling region](#tuning-region) . The distilled model is deployed to the [model upload region](#upload-region) .\n### Recommended configurations\nThe following table shows the recommended configurations for distilling a foundation model by task:\n| Task   | No. of examples in dataset | Train steps |\n|:---------------|:-----------------------------|:--------------|\n| Classification | 100+       | 200-1000  |\n| Summarization | 100-500+      | 1000-1500  |\n| Extractive QA | 100+       | 200-800  |\nFor train steps, you can try more than one value to get the best performance on a particular dataset, for example, 100, 200, 500.\n## View a list of distilled models\nYou can view a list of models in your current project, including your distilled models, by using the Google Cloud console or the Vertex AI SDK for Python.\nBefore trying this sample, follow the Python setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Python API reference documentation](/python/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/generative_ai/list_tuned_models.py) \n```\nimport vertexaifrom vertexai.language_models import TextGenerationModeldef list_tuned_models(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,) -> None:\u00a0 \u00a0 \"\"\"List tuned models.\"\"\"\u00a0 \u00a0 vertexai.init(project=project_id, location=location)\u00a0 \u00a0 model = TextGenerationModel.from_pretrained(\"text-bison@002\")\u00a0 \u00a0 tuned_model_names = model.list_tuned_model_names()\u00a0 \u00a0 print(tuned_model_names)\u00a0 \u00a0 return tuned_model_names\n```To view your distilled models in the Google Cloud console, go to the **Vertex AI Model Registry** page.\n [Go to Vertex AI Model Registry](https://console.cloud.google.com/vertex-ai/models)\n## Load a distilled text model\nThe following sample code uses the Vertex AI SDK for Python to load a distilled text generation model:\n```\nimport vertexaifrom vertexai.preview.language_models import TextGenerationModelmodel = TextGenerationModel.get_tuned_model(TUNED_MODEL_NAME)\n```\nReplace `` with the qualified resource name of your distilled model. This name is in the format `projects/` `` `/locations/` `` `/models/` `` . You can find the model ID of your distilled model in [Vertex AI Model Registry](https://console.cloud.google.com/vertex-ai/models) .\n## Tuning and evaluation metrics\nYou can configure a model tuning job to collect and report model tuning and model evaluation metrics, which can then be visualized by using [Vertex AI TensorBoard](/vertex-ai/docs/experiments/tensorboard-introduction) . To connect your tuning job to Vertex AI TensorBoard, specify a [Vertex AI TensorBoard instance ID](/vertex-ai/docs/experiments/tensorboard-setup#tensorboard_id) and an evaluation dataset.\n### Model tuning metrics\nYou can configure a model tuning job to collect the following tuning metrics for `chat-bison` , `code-bison` , `codechat-bison` , and `text-bison` :\n- `/train_total_loss`: Loss for the tuning dataset at a training step.\n- `/train_fraction_of_correct_next_step_preds`: The token accuracy at a training step. A single prediction consists of a sequence of tokens. This metric measures the accuracy of the predicted tokens when compared to the ground truth in the tuning dataset.\n- `/train_num_predictions:`Number of predicted tokens at a training step.\n### Model evaluation metrics:\nYou can configure a model tuning job to collect the following evaluation metrics for `code-bison` and `text-bison` :\n- `/eval_total_loss`: Loss for the evaluation dataset at an evaluation step.\n- `/eval_fraction_of_correct_next_step_preds`: The token accuracy at an evaluation step. A single prediction consists of a sequence of tokens. This metric measures the accuracy of the predicted tokens when compared to the ground truth in the evaluation dataset.\n- `/eval_num_predictions`: Number of predicted tokens at an evaluation step.\nThe metrics visualizations are available after the model tuning job completes. If you specify only a Vertex AI TensorBoard instance ID and not an evaluation dataset when you create the tuning job, only the visualizations for the tuning metrics are available.", "guide": "Generative AI on Vertex AI"}