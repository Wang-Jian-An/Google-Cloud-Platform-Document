{"title": "Generative AI on Vertex AI - \u51fd\u6578\u8abf\u7528", "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/function-calling?hl=zh-cn", "abstract": "# Generative AI on Vertex AI - \u51fd\u6578\u8abf\u7528\n\u51fd\u6578\u8abf\u7528\u662f `Gemini 1.0 Pro` \u6a21\u578b\u7684\u4e00\u9805\u529f\u80fd\u3002\u5b83\u5141\u8a31\u958b\u767c\u8005\u5b9a\u7fa9\u81ea\u5b9a\u7fa9\u51fd\u6578\uff0c\u4e26\u5c07\u9019\u4e9b\u51fd\u6578\u63d0\u4f9b\u7d66\u751f\u6210\u5f0f AI \u6a21\u578b\u3002\u8655\u7406\u67e5\u8a62\u6642\uff0c\u6a21\u578b\u53ef\u4ee5\u9078\u64c7\u5c07\u67d0\u4e9b\u6578\u64da\u8655\u7406\u4efb\u52d9\u59d4\u8a17\u7d66\u9019\u4e9b\u51fd\u6578\u3002\u5b83\u4e0d\u6703\u8abf\u7528\u51fd\u6578\u3002 \u76f8\u53cd\uff0c\u5b83\u6703\u63d0\u4f9b\u7d50\u69cb\u5316\u6578\u64da\u8f38\u51fa\uff0c\u5176\u4e2d\u5305\u542b\u6240\u9078\u51fd\u6578\u7684\u540d\u7a31\uff0c\u4ee5\u53ca\u6a21\u578b\u63d0\u8b70\u4f7f\u7528\u54ea\u4e9b\u53c3\u6578\u4f86\u8abf\u7528\u8a72\u51fd\u6578\u3002\u958b\u767c\u8005\u53ef\u4ee5\u4f7f\u7528\u6b64\u8f38\u51fa\u4f86\u8abf\u7528\u5916\u90e8 API\u3002\u7136\u5f8c\uff0c\u4ed6\u5011\u53ef\u4ee5\u5c07 API \u8f38\u51fa\u63d0\u4f9b\u7d66\u6a21\u578b\uff0c\u4ee5\u4fbf\u6a21\u578b\u5b8c\u6210\u5c0d\u67e5\u8a62\u7684\u56de\u7b54\u3002\u4ee5\u9019\u7a2e\u65b9\u5f0f\u4f7f\u7528\u6642\uff0c\u51fd\u6578\u8abf\u7528\u53ef\u8b93 LLM \u8a2a\u554f\u5be6\u6642\u4fe1\u606f\u4e26\u8207\u5404\u7a2e\u670d\u52d9\uff08\u4f8b\u5982 SQL \u6578\u64da\u5eab\u3001\u5ba2\u6236\u95dc\u4fc2\u7ba1\u7406\u7cfb\u7d71\u548c\u6587\u6a94\u5b58\u5132\u5eab\uff09\u9032\u884c\u4ea4\u4e92\u3002\n\u51fd\u6578\u8abf\u7528\u53ef\u8207 [\u751f\u6210\u5f0f AI \u64f4\u5c55\u7a0b\u5e8f](https://cloud.google.com/vertex-ai/generative-ai/docs/extensions/overview?hl=zh-cn) \u4e92\u63db\u4f7f\u7528\u3002\u5169\u8005\u90fd\u5141\u8a31\u60a8\u5728\u751f\u6210\u5f0f AI \u61c9\u7528\u4e2d\u4f7f\u7528\u51fd\u6578\u4f5c\u7232\u5de5\u5177\u3002\u51fd\u6578\u8abf\u7528\u6703\u8fd4\u56de\u4e00\u500b\u7d50\u69cb\u5316\u6578\u64da\u5c0d\u8c61\uff0c\u5176\u4e2d\u5305\u542b\u51fd\u6578\u540d\u7a31\u548c\u8981\u7528\u65bc\u4ee3\u78bc\u7684\u53c3\u6578\u3002Generative AI Extensions \u6703\u8fd4\u56de\u8a72\u51fd\u6578\u4f75\u7232\u60a8\u8abf\u7528\u8a72\u51fd\u6578\u3002\n\u5982\u9700\u77ad\u89e3\u51fd\u6578\u8abf\u7528\u7684\u61c9\u7528\u5834\u666f\uff0c\u8acb\u53c3\u95b1 [\u51fd\u6578\u8abf\u7528\u7684\u61c9\u7528\u5834\u666f](#use-cases) \u3002\u5982\u9700\u77ad\u89e3\u51fd\u6578\u8abf\u7528\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u8acb\u53c3\u95b1 [\u51fd\u6578\u8abf\u7528\u7684\u5de5\u4f5c\u539f\u7406](#how-works) \u3002\n\u6709\u95dc\u51fd\u6578\u8abf\u7528\u7684\u6280\u8853\u4ecb\u7d39\uff0c\u8acb\u53c3\u95b1\u4ee5\u4e0b\u8cc7\u6e90\uff1a\n- \u6982\u8981 Codelab \u6559\u7a0b\uff1a [\u5982\u4f55\u5728 Gemini \u4e2d\u4f7f\u7528\u51fd\u6578\u8abf\u7528\u8207 API \u4ea4\u4e92](https://codelabs.developers.google.com/codelabs/gemini-function-calling?hl=zh-cn) \u3002\n- \u8a73\u7d30\u7684\u7aef\u5230\u7aef Jupyter \u7b46\u8a18\u672c\uff1a [\u4f7f\u7528\u751f\u6210\u5f0f AI Gemini API \u548c Python SDK \u9032\u884c\u51fd\u6578\u8abf\u7528](https://github.com/GoogleCloudPlatform/generative-ai/blob/main/gemini/function-calling/intro_function_calling.ipynb) \u3002\n- Python\u3001Node.js\u3001Java\u3001Go \u548c REST \u7248 Vertex AI SDK \u793a\u4f8b\uff1a [\u51fd\u6578\u8abf\u7528\u793a\u4f8b](#function-calling-samples) \u3002", "content": "## \u51fd\u6578\u8abf\u7528\u7684\u61c9\u7528\u5834\u666f\n\u51fd\u6578\u8abf\u7528\u975e\u5e38\u9069\u5408\u4ee5\u4e0b\u61c9\u7528\u5834\u666f\uff1a\n- \u60a8\u5e0c\u671b\u8a9e\u8a00\u6a21\u578b\u63d0\u4f9b\u53ef\u5728\u4ee3\u78bc\u4e2d\u4f7f\u7528\u7684\u51fd\u6578\u5efa\u8b70\uff0c\u4f46\u60a8\u4e0d\u5e0c\u671b\u5728\u4ee3\u78bc\u4e2d\u5305\u542b\u6191\u64da\u3002 [Generative AI Extensions](https://cloud.google.com/vertex-ai/generative-ai/docs/extensions/overview?hl=zh-cn) \u6703\u904b\u884c\u5176\u8fd4\u56de\u7684\u51fd\u6578\uff0c\u9019\u610f\u5473\u7740\u60a8\u9700\u8981\u5728\u4ee3\u78bc\u4e2d\u6dfb\u52a0 Google \u6191\u64da\u3002\u7531\u65bc\u51fd\u6578\u8abf\u7528\u4e0d\u6703\u904b\u884c\u8a72\u51fd\u6578\uff0c\u56e0\u6b64\u60a8\u4e0d\u9700\u8981\u5728\u4ee3\u78bc\u4e2d\u6dfb\u52a0\u5305\u542b\u51fd\u6578\u4fe1\u606f\u7684\u6191\u64da\u3002\n- \u60a8\u904b\u884c\u7684\u7570\u6b65\u64cd\u4f5c\u53ef\u80fd\u9700\u8981\u82b1\u8cbb\u5e7e\u79d2\u9418\u6642\u9593\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5553\u52d5\u6279\u8655\u7406\u64cd\u4f5c\u6216\u4eba\u5de5\u5be9\u8988\uff0c\u800c\u9019\u5169\u7a2e\u64cd\u4f5c\u90fd\u53ef\u80fd\u9700\u8981\u5e7e\u500b\u5c0f\u6642\u6216\u66f4\u9577\u6642\u9593\u3002\u9019\u4e9b\u5834\u666f\u975e\u5e38\u9069\u5408\u51fd\u6578\u8abf\u7528\uff0c\u56e0\u7232\u5b83\u662f\u4e00\u9805\u7570\u6b65\u64cd\u4f5c\u3002 [Generative AI Extensions](https://cloud.google.com/vertex-ai/generative-ai/docs/extensions/overview?hl=zh-cn) \u8abf\u7528\u9700\u8981\u5e7e\u79d2\u9418\u7684\u6642\u9593\uff0c\u56e0\u6b64\u4e0d\u9069\u5408\u7570\u6b65\u64cd\u4f5c\u3002\n- \u60a8\u5e0c\u671b\u5728\u4e0d\u540c\u65bc\u4f7f\u7528\u51fd\u6578\u8abf\u7528\u7372\u53d6\u65b9\u6cd5\u53ca\u5176\u53c3\u6578\u7684\u8a2d\u5099\u4e0a\u904b\u884c\u51fd\u6578\u3002\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u8a2d\u5099\u4e0a\u904b\u884c\u4f7f\u7528\u51fd\u6578\u8abf\u7528\u97ff\u61c9\u7684\u4ee3\u78bc\u3002\u7576\u60a8\u60f3\u8981\u4f7f\u7528\u672a\u63d0\u4f9b\u7d66\u60a8\u7684 API \u904b\u884c\u8fd4\u56de\u7684\u51fd\u6578\u6642\uff0c\u6b64\u5834\u666f\u4e5f\u9069\u7528\u3002\n\u51fd\u6578\u8abf\u7528\u53ef\u4ee5\u61c9\u7528\u65bc\u4ee5\u4e0b\u4efb\u52d9\uff1a\n- \u5f9e\u6587\u672c\u4e2d\u63d0\u53d6\u4fe1\u606f\uff0c\u4e26\u4f7f\u7528\u8a72\u4fe1\u606f\u5275\u5efa\u65e5\u66c6\u6d3b\u52d5\u3002\n- \u66ff\u63db\u4ee3\u78bc\u5eab\u4e2d\u7684 if-then \u8a9e\u53e5\u3002\n- \u5c07\u8a9e\u97f3\u6307\u4ee4\u8f49\u63db\u7232\u8eca\u8f09\u7cfb\u7d71\u4efb\u52d9\u3002\n- \u4f7f\u7528\u81ea\u7136\u8a9e\u8a00\u8207 SQL \u6578\u64da\u5eab\u9032\u884c\u4ea4\u4e92\u3002\n- \u901a\u904e\u8207 Vertex AI Search \u548c Vertex AI Vector Search \u4e0a\u7684\u751f\u6210\u5f0f AI \u7b49\u77e2\u91cf\u6578\u64da\u5eab\u96c6\u6210\uff0c\u69cb\u5efa\u4e0a\u4e0b\u6587\u611f\u77e5\u6587\u6a94\u554f\u7b54\u7cfb\u7d71\u3002\n- \u589e\u5f37\u804a\u5929\u6a5f\u5668\u4eba\uff0c\u4f7f\u5176\u80fd\u5920\u5be6\u6642\u8a2a\u554f\u548c\u8655\u7406\u4f86\u81ea\u5916\u90e8\u4f86\u6e90\u7684\u4fe1\u606f\u3002\n- \u57fa\u65bc\u74b0\u5883\u89f8\u767c\u5668\u69cb\u5efa\u81ea\u52d5\u5316\u5de5\u4f5c\u6d41\uff0c\u5728\u5e7e\u4e4e\u6c92\u6709\u7528\u6236\u8f38\u5165\u7684\u60c5\u6cc1\u4e0b\u5be6\u73fe\u6d41\u7a0b\u81ea\u52d5\u5316\u3002\n- \u6839\u64da\u652f\u6301\u670d\u52d9\u5de5\u55ae\u7684\u5167\u5bb9\u3001\u65e5\u8a8c\u548c\u60c5\u5883\u611f\u77e5\u898f\u5247\u81ea\u52d5\u5206\u914d\u652f\u6301\u670d\u52d9\u5de5\u55ae\u3002## \u51fd\u6578\u8abf\u7528\u7684\u5de5\u4f5c\u539f\u7406\n\u7232\u4e86\u8b93\u7528\u6236\u80fd\u5920\u8207\u6a21\u578b\u9032\u884c\u4ea4\u4e92\u4e26\u4f7f\u7528\u51fd\u6578\u8abf\u7528\uff0c\u60a8\u5fc5\u9808\u5275\u5efa\u57f7\u884c\u4ee5\u4e0b\u4efb\u52d9\u7684\u4ee3\u78bc\uff1a\n- \u5b9a\u7fa9\u4e00\u7d44\u53ef\u7528\u7684\u51fd\u6578\uff0c\u4e26\u4f7f\u7528 [\u51fd\u6578\u8072\u660e](#function-declarations) \u5c0d\u5176\u9032\u884c\u63cf\u8ff0\u3002\n- \u5411\u6a21\u578b\u63d0\u4ea4\u7528\u6236\u7684\u67e5\u8a62\u548c\u51fd\u6578\u8072\u660e\u3002\n- \u5f9e\u6a21\u578b\u63a5\u6536\u7d50\u69cb\u5316\u6578\u64da\u8f38\u51fa\u3002\n- \u4f7f\u7528\u7d50\u69cb\u5316\u6578\u64da\u8f38\u51fa\u4f86\u8abf\u7528\u5916\u90e8 API\u3002\n- \u5c07\u5916\u90e8 API \u7684\u8f38\u51fa\u63d0\u4f9b\u7d66\u6a21\u578b\u3002\n\u60a8\u53ef\u4ee5\u5275\u5efa\u4e00\u500b\u61c9\u7528\u4f86\u7ba1\u7406\u6240\u6709\u9019\u4e9b\u4efb\u52d9\u3002\u6b64\u61c9\u7528\u53ef\u4ee5\u662f\u6587\u672c\u804a\u5929\u6a5f\u5668\u4eba\u3001\u8a9e\u97f3\u4ee3\u7406\u3001\u81ea\u52d5\u5316\u5de5\u4f5c\u6d41\u6216\u4efb\u4f55\u5176\u4ed6\u7a0b\u5e8f\u3002\n### \u51fd\u6578\u8072\u660e\n\u6bcf\u500b\u51fd\u6578\u8072\u660e\u90fd\u5fc5\u9808\u5305\u542b\u4ee5\u4e0b\u5167\u5bb9\uff1a\n- \u51fd\u6578\u540d\u7a31\n- \u8207 OpenAPI \u67b6\u69cb\u683c\u5f0f\u517c\u5bb9\u7684\u67b6\u69cb\u4e2d\u7684\u51fd\u6578\u53c3\u6578\u3002- \u4f7f\u7528 curl \u6642\uff0c\u4f7f\u7528 JSON \u6307\u5b9a\u67b6\u69cb\u3002\n- \u4f7f\u7528 Vertex AI SDK \u6642\uff0c\u4f7f\u7528 Python \u5b57\u5178\u6307\u5b9a\u67b6\u69cb\u3002\n- \u51fd\u6578\u8aaa\u660e\uff08\u53ef\u9078\uff09\u3002\u7232\u7372\u5f97\u6700\u4f73\u6548\u679c\uff0c\u6211\u5011\u5efa\u8b70\u60a8\u6dfb\u52a0\u8aaa\u660e\u3002\n\u4ee5\u4e0b\u662f\u51fd\u6578\u8072\u660e\u7684\u793a\u4f8b\uff1a\n```\nget_current_weather_func = FunctionDeclaration(\u00a0 \u00a0 name=\"get_current_weather\",\u00a0 \u00a0 description=\"Get the current weather in a given location\",\u00a0 \u00a0 parameters={\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"object\",\u00a0 \u00a0 \u00a0 \u00a0 \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Location\"}},\u00a0 \u00a0 },)\n```\n### \u51fd\u6578\u8abf\u7528\u6a21\u614b\n\u6839\u64da\u60a8\u7684\u7528\u4f8b\uff0c\u60a8\u53ef\u4ee5\u7d50\u5408\u4f7f\u7528\u51fd\u6578\u8abf\u7528\u8207 [\u6587\u672c\u6a21\u614b](https://cloud.google.com/vertex-ai/generative-ai/docs/text/text-prompts?hl=zh-cn) \u6216 [\u804a\u5929\u6a21\u614b](https://cloud.google.com/vertex-ai/generative-ai/docs/chat/chat-prompts?hl=zh-cn) - `Gemini 1.0 Pro` \u3002\n- \u6587\u672c\u6a21\u614b\u662f\u7121\u72c0\u614b\u7684\uff1a\u6bcf\u7576\u7528\u6236\u8207\u61c9\u7528\u4ea4\u4e92\u6642\uff0c\u61c9\u7528\u90fd\u5fc5\u9808\u5411\u6a21\u578b\u63d0\u4f9b\u4ea4\u4e92\u7684\u5b8c\u6574\u4e0a\u4e0b\u6587\u3002\u7576\u81e8\u6642\u97ff\u61c9\u8db3\u5920\u6642\uff0c\u6700\u9069\u5408\u4f7f\u7528\u6587\u672c\u6a21\u614b\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6587\u672c\u6a21\u614b\u7232\u7279\u5b9a\u696d\u52d9\u4efb\u52d9\uff08\u5305\u62ec\u4ee3\u78bc\u751f\u6210\uff09\u8a2d\u8a08\u63d0\u793a\u3002\n- \u804a\u5929\u6a21\u5f0f\u662f\u6709\u72c0\u614b\u7684\uff1a\u61c9\u7528\u4e0d\u9700\u8981\u5411\u6a21\u578b\u63d0\u4f9b\u4e92\u52d5\u7684\u5b8c\u6574\u4e0a\u4e0b\u6587\u3002\u804a\u5929\u6a21\u5f0f\u6700\u9069\u5408\u81ea\u7531\u5f62\u5f0f\u7684\u5c0d\u8a71\u5834\u666f\uff0c\u5728\u8a72\u5834\u666f\u4e2d\uff0c\u7528\u6236\u53ef\u80fd\u6703\u63d0\u51fa\u8ddf\u9032\u554f\u984c\u3002\n\u7121\u8ad6\u662f\u6587\u672c\u6a21\u5f0f\u9084\u662f\u804a\u5929\u6a21\u5f0f\uff0c\u4e92\u52d5\u6b77\u53f2\u8a18\u9304\u90fd\u6703\u5b58\u5132\u5728\u5ba2\u6236\u7aef\u3002\n### \u4e92\u52d5\u9806\u5e8f\n\u4e0b\u5716\u8aaa\u660e\u4e86\u7528\u6236\u3001\u61c9\u7528\u3001\u6a21\u578b\u548c\u51fd\u6578 API \u4e4b\u9593\u7684\u4e00\u7cfb\u5217\u4ea4\u4e92\u3002\u5b83\u4ee3\u8868\u4e00\u7d44\u5b8c\u6574\u7684\u6587\u672c\u6a21\u614b\uff0c [](#modalities) \u4e00\u7d44\u4e92\u52d5\u6216\u55ae\u500b\u5c0d\u8a71\u56de\u5408\u7684 [\u804a\u5929\u6a21\u614b](#modalities) \u3002\n\u8a72\u5e8f\u5217\u5305\u62ec\u4ee5\u4e0b\u6b65\u9a5f\uff1a\n- \u7528\u6236\u56ae\u61c9\u7528\u63d0\u4f9b\u63d0\u793a\u3002\u4e0b\u4f8b\u4e2d\u7684\u51fd\u6578\u6703\u8abf\u7528\u63d0\u793a\uff1a\u201cWhat is the weather like in Boston?\u201d\u3002\n- \u61c9\u7528\u5c07\u63d0\u793a\u548c\u51fd\u6578\u8072\u660e\u50b3\u905e\u7d66\u6a21\u578b\u3002\n- \u6a21\u578b\u6703\u9078\u64c7\u6700\u5408\u9069\u7684\u51fd\u6578\uff0c\u4e26\u63d0\u8b70\u8abf\u7528\u8a72\u51fd\u6578\u7684\u53c3\u6578\u503c\u3002\u51fd\u6578\u540d\u7a31\u548c\u53c3\u6578\u503c\u5c07\u50b3\u905e\u8ff4\u61c9\u7528\u3002\u6a21\u578b\u5be6\u969b\u4e0a\u4e26\u6c92\u6709\u8abf\u7528\u8a72\u51fd\u6578\u3002\u4ee5\u4e0b\u662f\u4e00\u500b\u6a21\u578b\u97ff\u61c9\u793a\u4f8b\u3002\u6a21\u578b\u63d0\u8b70\u4f7f\u7528\u53c3\u6578 `Boston, MA` \u8abf\u7528 `get_current_weather` \u51fd\u6578\u3002```\ncandidates {\n content {\n  role: \"model\"\n  parts {\n  function_call {\n   name: \"get_current_weather\"\n   args {\n   fields {\n    key: \"location\"\n    value {\n    string_value: \"Boston, MA\"\n    }\n   }\n   }\n  }\n  }\n }\n ...\n}\n```\n- \u61c9\u7528\u9023\u63a5\u8a72 API \u4e26\u8abf\u7528\u51fd\u6578\u3002\n- API \u56ae\u61c9\u7528\u63d0\u4f9b\u97ff\u61c9\u3002\u4ee5\u4e0b\u662f API \u97ff\u61c9\u7684\u793a\u4f8b\uff1a```\napi_response = \"\"\"{ \"location\": \"Boston, MA\", \"temperature\": 38, \"description\": \"Partly Cloudy\",\u00a0 \"icon\": \"partly-cloudy\", \"humidity\": 65, \"wind\": { \"speed\": 10, \"direction\": \"NW\" } }\"\"\"\n```\n- \u61c9\u7528\u5c07 API \u97ff\u61c9\u50b3\u905e\u7d66\u6a21\u578b\u3002\n- \u6a21\u578b\u6703\u57f7\u884c\u4ee5\u4e0b\u5169\u7a2e\u64cd\u4f5c\u4e4b\u4e00\uff1a- \u5b83\u78ba\u5b9a API \u97ff\u61c9\u662f\u5426\u8db3\u4ee5\u56de\u7b54\u7528\u6236\u7684\u67e5\u8a62\u3002\u5b83\u6703\u5275\u5efa\u81ea\u7136\u8a9e\u8a00\u97ff\u61c9\u4e26\u5c07\u5176\u8fd4\u56de\u7d66\u61c9\u7528\u3002\u4ee5\u4e0b\u662f\u4e00\u500b\u67e5\u8a62\u97ff\u61c9\u793a\u4f8b\uff1a`It is currently 38 degrees Fahrenheit in Boston, MA with partly cloudy skies. The humidity is 65% and the wind is blowing at 10 mph from the northwest.`\n- \u5b83\u78ba\u5b9a\u9700\u8981\u53e6\u4e00\u500b\u51fd\u6578\u7684\u8f38\u51fa\u4f86\u56de\u7b54\u67e5\u8a62\u3002\u8207\u4e4b\u524d\u4e00\u6a23\uff0c\u5b83\u6703\u5c07\u51fd\u6578\u540d\u7a31\u548c\u76f8\u61c9\u7684\u53c3\u6578\u503c\u50b3\u905e\u7d66\u61c9\u7528\u3002\n- \u5982\u679c\u6a21\u578b\u56de\u7b54\u4e86\u67e5\u8a62\uff0c\u61c9\u7528\u6703\u5c07\u56de\u7b54\u50b3\u905e\u8ff4\u7528\u6236\u3002\n\u6b64\u6642\uff0c\u7528\u6236\u53ef\u4ee5\u9078\u64c7\u7d42\u6b62\u4e92\u52d5\u6216\u63d0\u51fa\u5176\u4ed6\u554f\u984c\u3002\n## \u51fd\u6578\u8abf\u7528\u793a\u4f8b\n\u672c\u6587\u6a94\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u793a\u4f8b\uff1a\n- [\u6587\u672c\u6a21\u614b\u793a\u4f8b](#text-samples) \n- [\u804a\u5929\u6a21\u614b\u793a\u4f8b](#chat-samples) \n\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u6587\u672c\u548c\u804a\u5929\u6a21\u5f0f\uff0c\u8acb\u53c3\u95b1 [\u51fd\u6578\u8abf\u7528\u6a21\u5f0f](#modalities) \u3002\n### \u6587\u672c\u6a21\u614b\u793a\u4f8b\n\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u5177\u6709\u4e00\u500b\u51fd\u6578\u548c\u4e00\u500b\u63d0\u793a\u7684\u6587\u672c\u6a21\u614b\u5834\u666f\u3002\u5728\u6bcf\u6b21\u4e92\u52d5\u671f\u9593\uff0c\u5b83\u90fd\u6703\u7232\u6a21\u578b\u63d0\u4f9b\u5b8c\u6574\u7684\u4e0a\u4e0b\u6587\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u51fd\u6578\u8abf\u7528\u7684\u6587\u672c\u6a21\u614b\uff0c\u8acb\u53c3\u95b1 [\u51fd\u6578\u8abf\u7528\u6a21\u614b](#modalities) \u3002\n\u6b64\u793a\u4f8b\u4f7f\u7528 `GenerativeModel` \u985e\u53ca\u5176\u65b9\u6cd5\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u5c07 Vertex AI SDK \u8207 Gemini \u591a\u6a21\u614b\u6a21\u578b\u642d\u914d\u4f7f\u7528\uff0c\u8acb\u53c3\u95b1 [Vertex AI SDK \u4e2d\u7684\u591a\u6a21\u614b\u985e\u7c21\u4ecb](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/sdk-for-gemini/gemini-sdk-overview?hl=zh-cn) \u3002\n\u793a\u4f8b\u6b65\u9a5f\u5982\u4e0b\uff1a- \u521d\u59cb\u5316 Gemini \u6a21\u578b\u3002\n- \u8072\u660e\u51fd\u6578 (`get_current_weather`)\u3002\u8a72\u51fd\u6578\u8072\u660e\u5fc5\u9808\u4f7f\u7528 Python \u5b57\u5178\uff0c\u4e26\u4e14\u5fc5\u9808\u63a1\u7528\u8207 [OpenAPI \u67b6\u69cb](https://spec.openapis.org/oas/v3.0.3#schema) \u517c\u5bb9\u7684\u683c\u5f0f\u3002\n- \u5728\u5de5\u5177\u4e2d\u6dfb\u52a0\u51fd\u6578\u8072\u660e (`weather_tool`)\u3002\n- \u5411\u6a21\u578b\u63d0\u4f9b\u63d0\u793a\uff08\u201c\u6ce2\u58eb\u9813\u7684\u5929\u6c23\u600e\u9ebc\u6a23\uff1f\u201d\uff09\u3002 \u4ee5\u4e0b\u662f\u4e00\u500b\u6a21\u578b\u97ff\u61c9\u793a\u4f8b\u3002\u6a21\u578b\u5efa\u8b70\u4f7f\u7528\u53c3\u6578`Boston, MA`\u8abf\u7528`get_current_weather`\u51fd\u6578\u3002```\ncandidates {\n content {\n role: \"model\"\n parts {\n  function_call {\n  name: \"get_current_weather\"\n  args {\n   fields {\n   key: \"location\"\n   value {\n    string_value: \"Boston, MA\"\n   }\n   }\n  }\n  }\n }\n }\n ...\n}\n```\n- \u8acb\u5411\u6a21\u578b\u63d0\u4f9b\u5efa\u8b70\u51fd\u6578\u7684\u97ff\u61c9\u4ee5\u53ca\u5efa\u8b70\u7684\u53c3\u6578\u3002- \u6b64\u793a\u4f8b\u4f7f\u7528\u4e86\u5408\u6210\u6578\u64da\uff0c\u800c\u4e0d\u662f\u8abf\u7528\u51fd\u6578 API\u3002\n- \u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u4e86\u6a21\u578b\u5c0d\u67e5\u8a62\u7684\u81ea\u7136\u8a9e\u8a00\u97ff\u61c9\uff1a`It is currently 38 degrees Fahrenheit in Boston, MA with partly cloudy skies. The humidity is 65% and the wind is blowing at 10 mph from the northwest.`\n### Python\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u6216\u66f4\u65b0 Python\uff0c\u8acb\u53c3\u95b1 [\u5b89\u88dd Python \u7248 Vertex AI SDK](https://cloud.google.com/vertex-ai/docs/start/use-vertex-ai-python-sdk?hl=zh-cn) \u3002   \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [   Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/generative_ai/function_calling.py) \n```\nimport vertexaifrom vertexai.generative_models import (\u00a0 \u00a0 Content,\u00a0 \u00a0 FunctionDeclaration,\u00a0 \u00a0 GenerativeModel,\u00a0 \u00a0 Part,\u00a0 \u00a0 Tool,)def generate_function_call(prompt: str, project_id: str, location: str) -> tuple:\u00a0 \u00a0 # Initialize Vertex AI\u00a0 \u00a0 vertexai.init(project=project_id, location=location)\u00a0 \u00a0 # Initialize Gemini model\u00a0 \u00a0 model = GenerativeModel(\"gemini-1.0-pro\")\u00a0 \u00a0 # Specify a function declaration and parameters for an API request\u00a0 \u00a0 get_current_weather_func = FunctionDeclaration(\u00a0 \u00a0 \u00a0 \u00a0 name=\"get_current_weather\",\u00a0 \u00a0 \u00a0 \u00a0 description=\"Get the current weather in a given location\",\u00a0 \u00a0 \u00a0 \u00a0 # Function parameters are specified in OpenAPI JSON schema format\u00a0 \u00a0 \u00a0 \u00a0 parameters={\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"object\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Location\"}},\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 )\u00a0 \u00a0 # Define a tool that includes the above get_current_weather_func\u00a0 \u00a0 weather_tool = Tool(\u00a0 \u00a0 \u00a0 \u00a0 function_declarations=[get_current_weather_func],\u00a0 \u00a0 )\u00a0 \u00a0 # Define the user's prompt in a Content object that we can reuse in model calls\u00a0 \u00a0 user_prompt_content = Content(\u00a0 \u00a0 \u00a0 \u00a0 role=\"user\",\u00a0 \u00a0 \u00a0 \u00a0 parts=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Part.from_text(prompt),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 )\u00a0 \u00a0 # Send the prompt and instruct the model to generate content using the Tool that you just created\u00a0 \u00a0 response = model.generate_content(\u00a0 \u00a0 \u00a0 \u00a0 user_prompt_content,\u00a0 \u00a0 \u00a0 \u00a0 generation_config={\"temperature\": 0},\u00a0 \u00a0 \u00a0 \u00a0 tools=[weather_tool],\u00a0 \u00a0 )\u00a0 \u00a0 response_function_call_content = response.candidates[0].content\u00a0 \u00a0 # Check the function name that the model responded with, and make an API call to an external system\u00a0 \u00a0 if (\u00a0 \u00a0 \u00a0 \u00a0 response.candidates[0].content.parts[0].function_call.name\u00a0 \u00a0 \u00a0 \u00a0 == \"get_current_weather\"\u00a0 \u00a0 ):\u00a0 \u00a0 \u00a0 \u00a0 # Extract the arguments to use in your API call\u00a0 \u00a0 \u00a0 \u00a0 location = (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response.candidates[0].content.parts[0].function_call.args[\"location\"]\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 # Here you can use your preferred method to make an API request to fetch the current weather, for example:\u00a0 \u00a0 \u00a0 \u00a0 # api_response = requests.post(weather_api_url, data={\"location\": location})\u00a0 \u00a0 \u00a0 \u00a0 # In this example, we'll use synthetic data to simulate a response payload from an external API\u00a0 \u00a0 \u00a0 \u00a0 api_response = \"\"\"{ \"location\": \"Boston, MA\", \"temperature\": 38, \"description\": \"Partly Cloudy\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"icon\": \"partly-cloudy\", \"humidity\": 65, \"wind\": { \"speed\": 10, \"direction\": \"NW\" } }\"\"\"\u00a0 \u00a0 # Return the API response to Gemini so it can generate a model response or request another function call\u00a0 \u00a0 response = model.generate_content(\u00a0 \u00a0 \u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 user_prompt_content, \u00a0# User prompt\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response_function_call_content, \u00a0# Function call response\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Content(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 role=\"function\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 parts=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Part.from_function_response(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name=\"get_current_weather\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response={\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"content\": api_response, \u00a0# Return the API response to Gemini\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 tools=[weather_tool],\u00a0 \u00a0 )\u00a0 \u00a0 # Get the model summary response\u00a0 \u00a0 summary = response.candidates[0].content.parts[0].text\u00a0 \u00a0 return summary, response\n```\n\u6b64\u793a\u4f8b\u8abf\u7528\u4e86\u751f\u6210\u5f0f AI \u6a21\u578b\u5169\u6b21\u3002\u5728\u7b2c\u4e00\u6b21\u4e92\u52d5\u4e2d\uff0c\u60a8\u9700\u8981\u7232\u6a21\u578b\u63d0\u4f9b\u63d0\u793a\u548c\u51fd\u6578\u8072\u660e\u3002\u5728\u7b2c\u4e8c\u6b21\u4e92\u52d5\u4e2d\uff0c\u60a8\u9700\u8981\u7232\u6a21\u578b\u63d0\u4f9b API \u97ff\u61c9\u3002\n\u6b64\u6587\u672c\u6a21\u614b\u793a\u4f8b\u5728\u6bcf\u6b21\u4e92\u52d5\u671f\u9593\u7232\u6a21\u578b\u63d0\u4f9b\u5b8c\u6574\u7684\u4e0a\u4e0b\u6587\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u51fd\u6578\u8abf\u7528\u7684\u6587\u672c\u6a21\u614b\uff0c\u8acb\u53c3\u95b1 [\u51fd\u6578\u8abf\u7528\u6a21\u614b](#modalities) \u3002\n### Node.js\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300a\u751f\u6210\u5f0f AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Node.js \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u751f\u6210\u5f0f AI Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411\u751f\u6210\u5f0f AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/generative-ai/snippets/functionCallingStreamContent.js) \n```\nconst {\u00a0 VertexAI,\u00a0 FunctionDeclarationSchemaType,} = require('@google-cloud/vertexai');const functionDeclarations = [\u00a0 {\u00a0 \u00a0 function_declarations: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 name: 'get_current_weather',\u00a0 \u00a0 \u00a0 \u00a0 description: 'get weather in a given location',\u00a0 \u00a0 \u00a0 \u00a0 parameters: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: FunctionDeclarationSchemaType.OBJECT,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 properties: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 location: {type: FunctionDeclarationSchemaType.STRING},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 unit: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: FunctionDeclarationSchemaType.STRING,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 enum: ['celsius', 'fahrenheit'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 required: ['location'],\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 },];const functionResponseParts = [\u00a0 {\u00a0 \u00a0 functionResponse: {\u00a0 \u00a0 \u00a0 name: 'get_current_weather',\u00a0 \u00a0 \u00a0 response: {name: 'get_current_weather', content: {weather: 'super nice'}},\u00a0 \u00a0 },\u00a0 },];/**\u00a0* TODO(developer): Update these variables before running the sample.\u00a0*/async function functionCallingStreamChat(\u00a0 projectId = 'PROJECT_ID',\u00a0 location = 'us-central1',\u00a0 model = 'gemini-1.0-pro') {\u00a0 // Initialize Vertex with your Cloud project and location\u00a0 const vertexAI = new VertexAI({project: projectId, location: location});\u00a0 // Instantiate the model\u00a0 const generativeModel = vertexAI.preview.getGenerativeModel({\u00a0 \u00a0 model: model,\u00a0 });\u00a0 const request = {\u00a0 \u00a0 contents: [\u00a0 \u00a0 \u00a0 {role: 'user', parts: [{text: 'What is the weather in Boston?'}]},\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 role: 'model',\u00a0 \u00a0 \u00a0 \u00a0 parts: [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 functionCall: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name: 'get_current_weather',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 args: {location: 'Boston'},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {role: 'function', parts: functionResponseParts},\u00a0 \u00a0 ],\u00a0 \u00a0 tools: functionDeclarations,\u00a0 };\u00a0 const streamingResp = await generativeModel.generateContentStream(request);\u00a0 for await (const item of streamingResp.stream) {\u00a0 \u00a0 console.log(item.candidates[0].content.parts[0].text);\u00a0 }}\n```\u6b64\u6587\u672c\u6a21\u614b\u793a\u4f8b\u5728\u6bcf\u6b21\u4e92\u52d5\u671f\u9593\u7232\u6a21\u578b\u63d0\u4f9b\u5b8c\u6574\u7684\u4e0a\u4e0b\u6587\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u51fd\u6578\u8abf\u7528\u7684\u6587\u672c\u6a21\u614b\uff0c\u8acb\u53c3\u95b1 [\u51fd\u6578\u8abf\u7528\u6a21\u614b](#modalities) \u3002\n\u6b64\u793a\u4f8b\u8abf\u7528\u4e86\u751f\u6210\u5f0f AI \u6a21\u578b\u5169\u6b21\u3002\u5728\u7b2c\u4e00\u6b21\u4e92\u52d5\u4e2d\uff0c\u60a8\u9700\u8981\u7232\u6a21\u578b\u63d0\u4f9b\u63d0\u793a\u548c\u51fd\u6578\u8072\u660e\u3002\u51fd\u6578\u8072\u660e\u5fc5\u9808\u5305\u542b\u5728\u5de5\u5177\u4e2d\uff08\u6b64\u8655\u7232 `tools` \uff09\uff0c\u4e26\u4e14\u5fc5\u9808\u4ee5\u8207 [OpenAPI \u67b6\u69cb](https://spec.openapis.org/oas/v3.0.3#schema) \u517c\u5bb9\u7684\u683c\u5f0f\u6307\u5b9a\u3002\u5728\u7b2c\u4e8c\u6b21\u4e92\u52d5\u4e2d\uff0c\u60a8\u9700\u8981\u7232\u6a21\u578b\u63d0\u4f9b API \u97ff\u61c9\u3002\n\u5728\u6b64\u793a\u4f8b\u8acb\u6c42\u4e2d\uff0c\u60a8\u5b9a\u7fa9\u4ee5\u4e0b\u67e5\u8a62\uff1a\u201c\u5c71\u666f\u57ce\u7684\u54ea\u4e9b\u5f71\u9662\u653e\u6620\u300a\u82ad\u6bd4\u300b\u7684\u96fb\u5f71\uff1f\u201d\u3002\u60a8\u9084\u53ef\u4ee5\u901a\u904e\u4ee5\u4e0b\u51fd\u6578\u8072\u660e\u5b9a\u7fa9\u4e00\u500b\u5de5\u5177\uff1a- `find_movies`\u67e5\u627e\u5728\u5f71\u9662\u4e0a\u64ad\u653e\u7684\u96fb\u5f71\u3002\n- `find_theatres`\u6839\u64da\u4f4d\u7f6e\u67e5\u627e\u5f71\u9662\u3002\n- `get_showtimes`\u67e5\u627e\u5728\u7279\u5b9a\u5f71\u9662\u64ad\u653e\u7684\u96fb\u5f71\u7684\u958b\u59cb\u6642\u9593\u3002\n\u5c07 \u66ff\u63db\u7232\u60a8\u7684 Google Cloud \u9805\u76ee\u7684\u540d\u7a31\u3002\u5c0d\u65bc\u201cWhich theaters in Mountain View show Barbie movie?\u201d\u63d0\u793a\uff0c\u6a21\u578b\u53ef\u80fd\u6703\u8fd4\u56de\u5e36\u6709\u53c3\u6578 `Barbie` \u548c `Mountain View, CA` \u7684\u51fd\u6578 `find_theatres` \u3002\u5728\u6b64\u793a\u4f8b\u4e2d\uff0cAPI \u8acb\u6c42\u6703\u8fd4\u56de\u5169\u500b\u7d50\u679c\uff0c\u6bcf\u500b\u7d50\u679c\u5305\u542b\u5169\u500b\u53c3\u6578\uff08 `name` \u548c `address` \uff09\uff1a- `name`\uff1a`AMC Mountain View 16`\uff1b`address`\uff1a`2000 W El Camino Real, Mountain View, CA 94040`\n- `name`\uff1a`Regal Edwards 14`\uff1b`address`\uff1a`245 Castro St, Mountain View, CA 94040`\n\u5c07 \u66ff\u63db\u7232\u60a8\u7684 Google Cloud \u9805\u76ee\u7684\u540d\u7a31\u3002\u6a21\u578b\u7684\u97ff\u61c9\u53ef\u80fd\u985e\u4f3c\u65bc\u4ee5\u4e0b\u5167\u5bb9\uff1a\n### Chat \u6a21\u5f0f\u793a\u4f8b\n\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u500b\u5177\u6709\u5169\u500b\u51fd\u6578\u548c\u5169\u500b\u9806\u5e8f\u63d0\u793a\u7684\u804a\u5929\u5834\u666f\u3002\u4f7f\u7528\u804a\u5929\u6a21\u5f0f\u6642\uff0c\u7121\u9700\u5728\u6bcf\u6b21\u5c0d\u8a71\u56de\u5408\u4e2d\u63d0\u4f9b\u5b8c\u6574\u7684\u4e0a\u4e0b\u6587\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u51fd\u6578\u8abf\u7528\u7684\u804a\u5929\u6a21\u5f0f\uff0c\u8acb\u53c3\u95b1 [\u51fd\u6578\u8abf\u7528\u6a21\u614b](#modalities) \u3002\n\u6b64\u793a\u4f8b\u4f7f\u7528 `GenerativeModel` \u985e\u53ca\u5176\u65b9\u6cd5\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u5c07 Vertex AI SDK \u8207 Gemini \u591a\u6a21\u614b\u6a21\u578b\u642d\u914d\u4f7f\u7528\uff0c\u8acb\u53c3\u95b1 [Vertex AI SDK \u4e2d\u7684\u591a\u6a21\u614b\u985e\u7c21\u4ecb](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/sdk-for-gemini/gemini-sdk-overview?hl=zh-cn) \u3002\n\u793a\u4f8b\u6b65\u9a5f\u5982\u4e0b\uff1a- \u8072\u660e\u51fd\u6578\u3002- \u51fd\u6578\u8072\u660e\u5fc5\u9808\u4f7f\u7528 Python \u5b57\u5178\uff0c\u4e26\u4e14\u5fc5\u9808\u63a1\u7528\u8207 [OpenAPI \u67b6\u69cb](https://spec.openapis.org/oas/v3.0.3#schema) \u517c\u5bb9\u7684\u683c\u5f0f\u3002\n- \u6b64\u793a\u4f8b\u8072\u660e\u77ad\u4ee5\u4e0b\u51fd\u6578\uff1a- `get_store_location_func`\u7372\u53d6\u7522\u54c1\u7684 SKU\u3002\n- `get_store_location`\u53ef\u7372\u53d6\u6700\u8fd1\u5546\u5e97\u7684\u4f4d\u7f6e\u3002\n- \u5728\u5de5\u5177\u4e2d\u6dfb\u52a0\u51fd\u6578\u8072\u660e (`retail_tool`)\u3002\n- \u521d\u59cb\u5316 Gemini \u6a21\u578b\u4e26\u63d0\u4f9b\u5de5\u5177\u3002\n- \u4f7f\u7528`start_chat`\u65b9\u6cd5\u958b\u59cb\u8207\u6a21\u578b\u7684\u804a\u5929\u6703\u8a71\u3002\n- \u7232\u76f8\u61c9\u578b\u865f\u63d0\u4f9b\u7b2c\u4e00\u500b\u63d0\u793a\uff08\u201cDo you have the Pixel 8 Pro in stock?\u201d\uff09\u3002\n- \u8acb\u5411\u6a21\u578b\u63d0\u4f9b\u5efa\u8b70\u51fd\u6578\u7684\u97ff\u61c9\u53ca\u5efa\u8b70\u7684\u53c3\u6578\u3002\u6b64\u793a\u4f8b\u4f7f\u7528\u7684\u662f\u5408\u6210\u6578\u64da\uff0c\u800c\u4e0d\u662f\u8abf\u7528\u51fd\u6578 API\u3002\n- \u7232\u6a21\u578b\u63d0\u4f9b\u7b2c\u4e8c\u500b\u63d0\u793a\uff08\u201cIs have a store in Mountain View, CA, I can be visits to try it?\u201d\uff09\u3002\n- \u8acb\u5411\u6a21\u578b\u63d0\u4f9b\u5efa\u8b70\u51fd\u6578\u7684\u97ff\u61c9\u53ca\u5efa\u8b70\u7684\u53c3\u6578\u3002\u6b64\u793a\u4f8b\u4f7f\u7528\u7684\u662f\u5408\u6210\u6578\u64da\uff0c\u800c\u4e0d\u662f\u8abf\u7528\u51fd\u6578 API\u3002### Python\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u6216\u66f4\u65b0 Python\uff0c\u8acb\u53c3\u95b1 [\u5b89\u88dd Python \u7248 Vertex AI SDK](https://cloud.google.com/vertex-ai/docs/start/use-vertex-ai-python-sdk?hl=zh-cn) \u3002   \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [   Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/generative_ai/function_calling_chat.py) \n```\nimport vertexaifrom vertexai.generative_models import (\u00a0 \u00a0 FunctionDeclaration,\u00a0 \u00a0 GenerativeModel,\u00a0 \u00a0 Part,\u00a0 \u00a0 Tool,)def generate_function_call_chat(project_id: str, location: str) -> tuple:\u00a0 \u00a0 prompts = []\u00a0 \u00a0 summaries = []\u00a0 \u00a0 # Initialize Vertex AI\u00a0 \u00a0 vertexai.init(project=project_id, location=location)\u00a0 \u00a0 # Specify a function declaration and parameters for an API request\u00a0 \u00a0 get_product_info_func = FunctionDeclaration(\u00a0 \u00a0 \u00a0 \u00a0 name=\"get_product_sku\",\u00a0 \u00a0 \u00a0 \u00a0 description=\"Get the SKU for a product\",\u00a0 \u00a0 \u00a0 \u00a0 # Function parameters are specified in OpenAPI JSON schema format\u00a0 \u00a0 \u00a0 \u00a0 parameters={\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"object\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"properties\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"product_name\": {\"type\": \"string\", \"description\": \"Product name\"}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 )\u00a0 \u00a0 # Specify another function declaration and parameters for an API request\u00a0 \u00a0 get_store_location_func = FunctionDeclaration(\u00a0 \u00a0 \u00a0 \u00a0 name=\"get_store_location\",\u00a0 \u00a0 \u00a0 \u00a0 description=\"Get the location of the closest store\",\u00a0 \u00a0 \u00a0 \u00a0 # Function parameters are specified in OpenAPI JSON schema format\u00a0 \u00a0 \u00a0 \u00a0 parameters={\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"object\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Location\"}},\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 )\u00a0 \u00a0 # Define a tool that includes the above functions\u00a0 \u00a0 retail_tool = Tool(\u00a0 \u00a0 \u00a0 \u00a0 function_declarations=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 get_product_info_func,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 get_store_location_func,\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 )\u00a0 \u00a0 # Initialize Gemini model\u00a0 \u00a0 model = GenerativeModel(\u00a0 \u00a0 \u00a0 \u00a0 \"gemini-1.0-pro\", generation_config={\"temperature\": 0}, tools=[retail_tool]\u00a0 \u00a0 )\u00a0 \u00a0 # Start a chat session\u00a0 \u00a0 chat = model.start_chat()\u00a0 \u00a0 # Send a prompt for the first conversation turn that should invoke the get_product_sku function\u00a0 \u00a0 prompt = \"Do you have the Pixel 8 Pro in stock?\"\u00a0 \u00a0 response = chat.send_message(prompt)\u00a0 \u00a0 prompts.append(prompt)\u00a0 \u00a0 # Check the function name that the model responded with, and make an API call to an external system\u00a0 \u00a0 if response.candidates[0].content.parts[0].function_call.name == \"get_product_sku\":\u00a0 \u00a0 \u00a0 \u00a0 # Extract the arguments to use in your API call\u00a0 \u00a0 \u00a0 \u00a0 product_name = (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response.candidates[0].content.parts[0].function_call.args[\"product_name\"]\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 product_name\u00a0 \u00a0 \u00a0 \u00a0 # Here you can use your preferred method to make an API request to retrieve the product SKU, as in:\u00a0 \u00a0 \u00a0 \u00a0 # api_response = requests.post(product_api_url, data={\"product_name\": product_name})\u00a0 \u00a0 \u00a0 \u00a0 # In this example, we'll use synthetic data to simulate a response payload from an external API\u00a0 \u00a0 \u00a0 \u00a0 api_response = {\"sku\": \"GA04834-US\", \"in_stock\": \"yes\"}\u00a0 \u00a0 # Return the API response to Gemini so it can generate a model response or request another function call\u00a0 \u00a0 response = chat.send_message(\u00a0 \u00a0 \u00a0 \u00a0 Part.from_function_response(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name=\"get_product_sku\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response={\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"content\": api_response,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 )\u00a0 \u00a0 # Extract the text from the summary response\u00a0 \u00a0 summary = response.candidates[0].content.parts[0].text\u00a0 \u00a0 summaries.append(summary)\u00a0 \u00a0 # Send a prompt for the second conversation turn that should invoke the get_store_location function\u00a0 \u00a0 prompt = \"Is there a store in Mountain View, CA that I can visit to try it out?\"\u00a0 \u00a0 response = chat.send_message(prompt)\u00a0 \u00a0 prompts.append(prompt)\u00a0 \u00a0 # Check the function name that the model responded with, and make an API call to an external system\u00a0 \u00a0 if (\u00a0 \u00a0 \u00a0 \u00a0 response.candidates[0].content.parts[0].function_call.name\u00a0 \u00a0 \u00a0 \u00a0 == \"get_store_location\"\u00a0 \u00a0 ):\u00a0 \u00a0 \u00a0 \u00a0 # Extract the arguments to use in your API call\u00a0 \u00a0 \u00a0 \u00a0 location = (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response.candidates[0].content.parts[0].function_call.args[\"location\"]\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 location\u00a0 \u00a0 \u00a0 \u00a0 # Here you can use your preferred method to make an API request to retrieve store location closest to the user, as in:\u00a0 \u00a0 \u00a0 \u00a0 # api_response = requests.post(store_api_url, data={\"location\": location})\u00a0 \u00a0 \u00a0 \u00a0 # In this example, we'll use synthetic data to simulate a response payload from an external API\u00a0 \u00a0 \u00a0 \u00a0 api_response = {\"store\": \"2000 N Shoreline Blvd, Mountain View, CA 94043, US\"}\u00a0 \u00a0 # Return the API response to Gemini so it can generate a model response or request another function call\u00a0 \u00a0 response = chat.send_message(\u00a0 \u00a0 \u00a0 \u00a0 Part.from_function_response(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name=\"get_store_location\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response={\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"content\": api_response,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 )\u00a0 \u00a0 # Extract the text from the summary response\u00a0 \u00a0 summary = response.candidates[0].content.parts[0].text\u00a0 \u00a0 summaries.append(summary)\u00a0 \u00a0 return prompts, summaries\n```\n\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u500b\u804a\u5929\u5834\u666f\u3002\u4f7f\u7528\u804a\u5929\u6a21\u5f0f\u6642\uff0c\u7121\u9700\u5728\u6bcf\u6b21\u5c0d\u8a71\u56de\u5408\u4e2d\u63d0\u4f9b\u5b8c\u6574\u7684\u4e0a\u4e0b\u6587\u3002\u4f7f\u7528 `startChat` \u65b9\u6cd5\u958b\u59cb\u8207\u751f\u6210\u5f0f AI \u6a21\u578b\u804a\u5929\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u51fd\u6578\u8abf\u7528\u7684\u804a\u5929\u6a21\u614b\uff0c\u8acb\u53c3\u95b1 [\u51fd\u6578\u8abf\u7528\u6a21\u614b](#modalities) \u3002\n\u6b64\u793a\u4f8b\u8abf\u7528\u4e86\u751f\u6210\u5f0f AI \u6a21\u578b\u5169\u6b21\u3002\u5728\u7b2c\u4e00\u6b21\u4e92\u52d5\u4e2d\uff0c\u60a8\u9700\u8981\u5411\u6a21\u578b\u63d0\u4f9b\u81ea\u7136\u8a9e\u8a00\u6587\u672c\u63d0\u793a\u548c\u51fd\u6578\u8072\u660e\u3002\u5728\u60a8\u5553\u52d5\u804a\u5929\u6703\u8a71\u6642\u50b3\u5165\u51fd\u6578\u8072\u660e\u3002\u4f7f\u7528 `sendMessageStream` \u65b9\u6cd5\u7232\u6a21\u578b\u63d0\u4f9b\u63d0\u793a\u3002\u5728\u7b2c\u4e8c\u6b21\u4e92\u52d5\u4e2d\uff0c\u60a8\u9700\u8981\u7232\u6a21\u578b\u63d0\u4f9b API \u97ff\u61c9\u3002\u518d\u6b21\u4f7f\u7528 `sendMessageStream` \u65b9\u6cd5\u3002\n### Node.js\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300a\u751f\u6210\u5f0f AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Node.js \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u751f\u6210\u5f0f AI Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411\u751f\u6210\u5f0f AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/generative-ai/snippets/functionCallingStreamChat.js) \n```\nconst {\u00a0 VertexAI,\u00a0 FunctionDeclarationSchemaType,} = require('@google-cloud/vertexai');const functionDeclarations = [\u00a0 {\u00a0 \u00a0 function_declarations: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 name: 'get_current_weather',\u00a0 \u00a0 \u00a0 \u00a0 description: 'get weather in a given location',\u00a0 \u00a0 \u00a0 \u00a0 parameters: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: FunctionDeclarationSchemaType.OBJECT,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 properties: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 location: {type: FunctionDeclarationSchemaType.STRING},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 unit: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: FunctionDeclarationSchemaType.STRING,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 enum: ['celsius', 'fahrenheit'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 required: ['location'],\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 },];const functionResponseParts = [\u00a0 {\u00a0 \u00a0 functionResponse: {\u00a0 \u00a0 \u00a0 name: 'get_current_weather',\u00a0 \u00a0 \u00a0 response: {name: 'get_current_weather', content: {weather: 'super nice'}},\u00a0 \u00a0 },\u00a0 },];/**\u00a0* TODO(developer): Update these variables before running the sample.\u00a0*/async function functionCallingStreamChat(\u00a0 projectId = 'PROJECT_ID',\u00a0 location = 'us-central1',\u00a0 model = 'gemini-1.0-pro') {\u00a0 // Initialize Vertex with your Cloud project and location\u00a0 const vertexAI = new VertexAI({project: projectId, location: location});\u00a0 // Instantiate the model\u00a0 const generativeModel = vertexAI.preview.getGenerativeModel({\u00a0 \u00a0 model: model,\u00a0 });\u00a0 // Create a chat session and pass your function declarations\u00a0 const chat = generativeModel.startChat({\u00a0 \u00a0 tools: functionDeclarations,\u00a0 });\u00a0 const chatInput1 = 'What is the weather in Boston?';\u00a0 // This should include a functionCall response from the model\u00a0 const result1 = await chat.sendMessageStream(chatInput1);\u00a0 for await (const item of result1.stream) {\u00a0 \u00a0 console.log(item.candidates[0]);\u00a0 }\u00a0 await result1.response;\u00a0 // Send a follow up message with a FunctionResponse\u00a0 const result2 = await chat.sendMessageStream(functionResponseParts);\u00a0 for await (const item of result2.stream) {\u00a0 \u00a0 console.log(item.candidates[0]);\u00a0 }\u00a0 // This should include a text response from the model using the response content\u00a0 // provided above\u00a0 const response2 = await result2.response;\u00a0 console.log(response2.candidates[0].content.parts[0].text);}\n```\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u500b\u804a\u5929\u5834\u666f\u3002\u4f7f\u7528\u804a\u5929\u6a21\u5f0f\u6642\uff0c\u7121\u9700\u5728\u6bcf\u6b21\u5c0d\u8a71\u56de\u5408\u4e2d\u63d0\u4f9b\u5b8c\u6574\u7684\u4e0a\u4e0b\u6587\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u51fd\u6578\u8abf\u7528\u7684\u804a\u5929\u6a21\u614b\uff0c\u8acb\u53c3\u95b1 [\u51fd\u6578\u8abf\u7528\u6a21\u614b](#modalities) \u3002\n\u6b64\u793a\u4f8b\u8abf\u7528\u4e86\u751f\u6210\u5f0f AI \u6a21\u578b\u5169\u6b21\u3002\u5728\u7b2c\u4e00\u6b21\u4e92\u52d5\u4e2d\uff0c\u60a8\u9700\u8981\u5411\u6a21\u578b\u63d0\u4f9b\u81ea\u7136\u8a9e\u8a00\u6587\u672c\u63d0\u793a\u548c\u51fd\u6578\u8072\u660e\u3002\u5728\u7b2c\u4e8c\u6b21\u4e92\u52d5\u4e2d\uff0c\u60a8\u9700\u8981\u7232\u6a21\u578b\u63d0\u4f9b API \u97ff\u61c9\u3002\n### Java\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300a\u751f\u6210\u5f0f AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Java \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u751f\u6210\u5f0f AI Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1?hl=zh-cn) \u3002\n\u5982\u9700\u5411\u751f\u6210\u5f0f AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/vertexai/snippets/src/main/java/vertexai/gemini/FunctionCalling.java) \n```\nimport com.google.cloud.vertexai.VertexAI;import com.google.cloud.vertexai.api.Content;import com.google.cloud.vertexai.api.FunctionDeclaration;import com.google.cloud.vertexai.api.GenerateContentResponse;import com.google.cloud.vertexai.api.Schema;import com.google.cloud.vertexai.api.Tool;import com.google.cloud.vertexai.api.Type;import com.google.cloud.vertexai.generativeai.ChatSession;import com.google.cloud.vertexai.generativeai.ContentMaker;import com.google.cloud.vertexai.generativeai.GenerativeModel;import com.google.cloud.vertexai.generativeai.PartMaker;import com.google.cloud.vertexai.generativeai.ResponseHandler;import java.io.IOException;import java.util.Arrays;import java.util.Collections;public class FunctionCalling {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"your-google-cloud-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String modelName = \"gemini-1.0-pro\";\u00a0 \u00a0 String promptText = \"What's the weather like in Paris?\";\u00a0 \u00a0 whatsTheWeatherLike(projectId, location, modelName, promptText);\u00a0 }\u00a0 public static String whatsTheWeatherLike(String projectId, String location,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0String modelName, String promptText)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 try (VertexAI vertexAI = new VertexAI(projectId, location)) {\u00a0 \u00a0 \u00a0 FunctionDeclaration functionDeclaration = FunctionDeclaration.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(\"getCurrentWeather\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDescription(\"Get the current weather in a given location\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParameters(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Schema.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setType(Type.OBJECT)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .putProperties(\"location\", Schema.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setType(Type.STRING)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDescription(\"location\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addRequired(\"location\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 System.out.println(\"Function declaration:\");\u00a0 \u00a0 \u00a0 System.out.println(functionDeclaration);\u00a0 \u00a0 \u00a0 // Add the function to a \"tool\"\u00a0 \u00a0 \u00a0 Tool tool = Tool.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addFunctionDeclarations(functionDeclaration)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 // Start a chat session from a model, with the use of the declared function.\u00a0 \u00a0 \u00a0 GenerativeModel model =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GenerativeModel.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setModelName(modelName)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setVertexAi(vertexAI)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setTools(Arrays.asList(tool))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 ChatSession chat = model.startChat();\u00a0 \u00a0 \u00a0 System.out.println(String.format(\"Ask the question: %s\", promptText));\u00a0 \u00a0 \u00a0 GenerateContentResponse response = chat.sendMessage(promptText);\u00a0 \u00a0 \u00a0 // The model will most likely return a function call to the declared\u00a0 \u00a0 \u00a0 // function `getCurrentWeather` with \"Paris\" as the value for the\u00a0 \u00a0 \u00a0 // argument `location`.\u00a0 \u00a0 \u00a0 System.out.println(\"\\nPrint response: \");\u00a0 \u00a0 \u00a0 System.out.println(ResponseHandler.getContent(response));\u00a0 \u00a0 \u00a0 // Provide an answer to the model so that it knows what the result\u00a0 \u00a0 \u00a0 // of a \"function call\" is.\u00a0 \u00a0 \u00a0 Content content =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ContentMaker.fromMultiModalData(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PartMaker.fromFunctionResponse(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"getCurrentWeather\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Collections.singletonMap(\"currentWeather\", \"sunny\")));\u00a0 \u00a0 \u00a0 System.out.println(\"Provide the function response: \");\u00a0 \u00a0 \u00a0 System.out.println(content);\u00a0 \u00a0 \u00a0 response = chat.sendMessage(content);\u00a0 \u00a0 \u00a0 // See what the model replies now\u00a0 \u00a0 \u00a0 System.out.println(\"Print response: \");\u00a0 \u00a0 \u00a0 String finalAnswer = ResponseHandler.getText(response);\u00a0 \u00a0 \u00a0 System.out.println(finalAnswer);\u00a0 \u00a0 \u00a0 return finalAnswer;\u00a0 \u00a0 }\u00a0 }}\n```\n\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u500b\u804a\u5929\u5834\u666f\u3002\u4f7f\u7528\u804a\u5929\u6a21\u5f0f\u6642\uff0c\u7121\u9700\u5728\u6bcf\u6b21\u5c0d\u8a71\u56de\u5408\u4e2d\u63d0\u4f9b\u5b8c\u6574\u7684\u4e0a\u4e0b\u6587\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u51fd\u6578\u8abf\u7528\u7684\u804a\u5929\u6a21\u614b\uff0c\u8acb\u53c3\u95b1 [\u51fd\u6578\u8abf\u7528\u6a21\u614b](#modalities) \u3002\n\u6b64\u793a\u4f8b\u8abf\u7528\u4e86\u751f\u6210\u5f0f AI \u6a21\u578b\u5169\u6b21\u3002\u5728\u7b2c\u4e00\u6b21\u4e92\u52d5\u4e2d\uff0c\u60a8\u9700\u8981\u5411\u6a21\u578b\u63d0\u4f9b\u81ea\u7136\u8a9e\u8a00\u6587\u672c\u63d0\u793a\u548c\u51fd\u6578\u8072\u660e\u3002\u5728\u7b2c\u4e8c\u6b21\u4e92\u52d5\u4e2d\uff0c\u60a8\u9700\u8981\u7232\u6a21\u578b\u63d0\u4f9b API \u97ff\u61c9\u3002\n### Go\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300a\u751f\u6210\u5f0f AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Go \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u751f\u6210\u5f0f AI Go API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/go/docs/reference/cloud.google.com/go/aiplatform/latest/apiv1?hl=zh-cn) \u3002\n\u5982\u9700\u5411\u751f\u6210\u5f0f AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/vertexai/function-calling/functioncalling.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"encoding/json\"\u00a0 \u00a0 \u00a0 \u00a0 \"errors\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/vertexai/genai\")// functionCalls opens a chat session and sends 2 messages to the model:// - first, to convert a text into a structured function call request// - second, to convert a structured function call response into natural languagefunc functionCalls(w io.Writer, prompt, projectID, location, modelName string) error {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := genai.NewClient(ctx, projectID, location)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"unable to create client: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 model := client.GenerativeModel(modelName)\u00a0 \u00a0 \u00a0 \u00a0 // Build an OpenAPI schema, in memory\u00a0 \u00a0 \u00a0 \u00a0 params := &genai.Schema{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type: genai.TypeObject,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Properties: map[string]*genai.Schema{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"location\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type: \u00a0 \u00a0 \u00a0 \u00a0genai.TypeString,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Description: \"location\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fundecl := &genai.FunctionDeclaration{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: \u00a0 \u00a0 \u00a0 \u00a0\"getCurrentWeather\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Description: \"Get the current weather in a given location\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parameters: \u00a0params,\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 model.Tools = []*genai.Tool{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {FunctionDeclarations: []*genai.FunctionDeclaration{fundecl}},\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 chat := model.StartChat()\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Question: %s\\n\", prompt)\u00a0 \u00a0 \u00a0 \u00a0 resp, err := chat.SendMessage(ctx, genai.Text(prompt))\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 if len(resp.Candidates) == 0 ||\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 len(resp.Candidates[0].Content.Parts) == 0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return errors.New(\"empty response from model\")\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // The model has returned a function call to the declared function `getCurrentWeather`\u00a0 \u00a0 \u00a0 \u00a0 // with a value for the argument `location`.\u00a0 \u00a0 \u00a0 \u00a0 jsondata, err := json.MarshalIndent(resp.Candidates[0].Content.Parts[0], \"\", \" \u00a0\")\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"json.Marshal: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"function call generated by the model:\\n%s\\n\\n\", string(jsondata))\u00a0 \u00a0 \u00a0 \u00a0 // Create a function call response, to simulate the result of a call to a\u00a0 \u00a0 \u00a0 \u00a0 // real service\u00a0 \u00a0 \u00a0 \u00a0 funresp := &genai.FunctionResponse{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: \"getCurrentWeather\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Response: map[string]any{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"currentWeather\": \"sunny\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 jsondata, err = json.MarshalIndent(funresp, \"\", \" \u00a0\")\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"json.Marshal: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"function call response sent to the model:\\n%s\\n\\n\", string(jsondata))\u00a0 \u00a0 \u00a0 \u00a0 // And provide the function call response to the model\u00a0 \u00a0 \u00a0 \u00a0 resp, err = chat.SendMessage(ctx, funresp)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 if len(resp.Candidates) == 0 ||\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 len(resp.Candidates[0].Content.Parts) == 0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return errors.New(\"empty response from model\")\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // The model has taken the function call response as input, and has\u00a0 \u00a0 \u00a0 \u00a0 // reformulated the response to the user.\u00a0 \u00a0 \u00a0 \u00a0 jsondata, err = json.MarshalIndent(resp.Candidates[0].Content.Parts[0], \"\", \" \u00a0\")\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"json.Marshal: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Answer generated by the model:\\n%s\\n\", string(jsondata))\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```", "guide": "Generative AI on Vertex AI"}