{"title": "Generative AI on Vertex AI - Migrate to PaLM API from Azure OpenAI", "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/migrate/migrate-from-azure", "abstract": "# Generative AI on Vertex AI - Migrate to PaLM API from Azure OpenAI\nThis user guide outlines the steps required to migrate to Vertex AI PaLM API from Microsoft Azure OpenAI.\n", "content": "## Objectives\nVertex AI PaLM API is a service that allows you to create and train generative models using Google Cloud. It's a fully managed service that provides a simple and intuitive interface for creating and training generative models.\nBoth Azure OpenAI and Vertex AI PaLM API are cloud-based services that provide access to powerful large language models (LLMs). LLMs can be used to create a variety of applications, including chatbots, content generators, and creative tools. The services provided are backed by enterprise-grade security and compliance and include built-in responsible AI features.\n## Prerequisites\nTo migrate an OpenAI service from Microsoft Azure Open AI to Vertex AI PaLM API, you must first create a Google Cloud project and development environment. For more information, see [Set up a project and a development environment](/vertex-ai/docs/start/cloud-environment) .\n## How to migrate to PaLM API from Azure OpenAI\nUse the following topics to learn how to migrate to Vertex AI PaLM API from OpenAI project in Microsoft Azure.\n### Use equivalent PaLM API parameters\nThe following are some common Azure OpenAI parameters and their equivalent parameters in the PaLM API\n| 0    | 1      | 2                                                                                                                                                                          | 3         |\n|:----------------|:-----------------------||:-------------------------------------|\n| Parameter Azure | Parameter Google Cloud | Description                                                                                                                                                                       | Valid values       |\n| prompt   | prompt     | A prompt is a natural language request submitted to a language model to receive a response back. Prompts can contain questions, instructions, contextual information, examples, and text for the model to complete or continue.                                                                                                                  | Text         |\n| temperature  | temperature   | The temperature is used for sampling during response generation, which occurs when topP and topK are applied. Temperature controls the degree of randomness in token selection. Lower temperatures are good for prompts that require a less open-ended or creative response, while higher temperatures can lead to more diverse or creative results. A temperature of 0 means that the highest probability tokens are always selected. In this case, responses for a given prompt are mostly deterministic, but a small amount of variation is still possible. If the model returns a response that's too generic, too short, or the model gives a fallback response, try increasing the temperature. | 0.0\u20131.0        |\n| max_tokens  | maxOutputTokens  | Maximum number of tokens that can be generated in the response. A token is approximately four characters. 100 tokens correspond to roughly 60-80 words. Specify a lower value for shorter responses and a higher value for potentially longer responses.                                                                                                            | 1-2048 (Azure) 1\u20131024 (Google Cloud) |\n| Not available | topK     | Top-K changes how the model selects tokens for output. A top-K of 1 means the next selected token is the most probable among all tokens in the model's vocabulary (also called greedy decoding), while a top-K of 3 means that the next token is selected from among the three most probable tokens by using temperature. For each token selection step, the top-K tokens with the highest probabilities are sampled. Then tokens are further filtered based on top-P with the final token selected using temperature sampling. Specify a lower value for less random responses and a higher value for more random responses.                   | 1\u201340         |\n| top_p   | topP     | Top-P changes how the model selects tokens for output. Tokens are selected from the most (see top-K) to least probable until the sum of their probabilities equals the top-P value. For example, if tokens A, B, and C have a probability of 0.3, 0.2, and 0.1 and the top-P value is 0.5, then the model will select either A or B as the next token by using temperature and excludes C as a candidate. Specify a lower value for less random responses and a higher value for more random responses.                                                | 0.0\u20131.0        |\n### Use the equivalent PaLM API model\nThe following table describes the foundation models available.\n| 0   | 1                         | 2       | 3      |\n|:----------|:----------------------------------------------------------------------------------------------------|:--------------------------|:------------------------|\n| Type  | Description                       | Microsoft Azure endpoints | Vertex AI LLM endpoints |\n| Text  | Fine-tuned to follow natural language instructions and is suitable for a variety of language tasks. | text-davinci-003   | text-bison@001   |\n| Chat  | Fine-tuned for multi-turn conversation use cases.             | gpt-35-turbo or gpt-4  | chat-bison@001   |\n| Embedding | Fine-tuned to return model embeddings for text inputs.            | text-embedding-ada-002 | textembedding-gecko@001 |\n## Learn how to get started with Generative AI on Vertex AI\nThe following shows you the equivalent Vertex AI SDK for Python methods for Azure OpenAI methods. Use the Vertex AI SDK for Python to get started with Generative AI on Vertex AI.\n### Install Vertex AI PaLM API\n```\n$ pip install --upgrade openai\n```\n```\n$ pip install google-cloud-aiplatform\n```\n### Import Vertex AI PaLM API\n```\nimport openai\n```\n```\nfrom vertexai.preview.language_models import TextGenerationModel\n```\n### Authenticate Vertex AI PaLM API\n```\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n```\n```\nfrom google.colab import auth as google_authgoogle_auth.authenticate_user()\n```\n## Vertex AI PaLM API and Azure comparisons and sample code\n### Generate text with the Vertex AI SDK for Python\n```\nimport openairesponse = openai.Completion.create(\u00a0 \u00a0 prompt=\"Hello\",\u00a0 \u00a0 max_tokens=256,\u00a0 \u00a0 temperature=0.3,\u00a0 \u00a0 deployment_id=\"text-davinci-003\",\u00a0 \u00a0 #engine=\"text-davinci-003\",)print(f\"Response from Model: {response['choices'][0]['text']}\")\n```\n```\nfrom vertexai.preview.language_models import TextGenerationModelmodel = TextGenerationModel.from_pretrained(\"text-bison@001\")response = model.predict(\u00a0 \u00a0 \"Hello\",\u00a0 \u00a0 max_output_tokens=256,\u00a0 \u00a0 temperature=0.3,)print(f\"Response from Model: {response.text}\")\n```\n### Use chat completion with the Vertex AI SDK for Python\n```\nimport openaiparameters = {\u00a0 \u00a0 \"deployment_id\"=\"gpt-4\",\u00a0 \u00a0 #\"engine\": \"gpt-4\",\u00a0 \u00a0 \"temperature\": 0.2,\u00a0 \u00a0 \"max_tokens\": 256,\u00a0 \u00a0 \"top_p\": 0.95,}chat = openai.ChatCompletion.create(\u00a0 \u00a0 messages=[\u00a0 \u00a0 \u00a0 {\"role\": \"system\", \"content\": \"My name is Miles. You are an astronomer, knowledgeable about the solar system.\"},\u00a0 \u00a0 \u00a0 {\"role\": \"user\", \"name\":\"example_user\", \"content\": \"How many planets are there in the solar system?\"}\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 **parameters)response = chat['choices'][0]['message']['content']print(f\"Response from Azure OpenAI Model: {response.text}\")\n```\n```\nfrom vertexai.preview.language_models import ChatModelchat_model = ChatModel.from_pretrained(\"chat-bison@001\")parameters = {\u00a0 \u00a0 \"temperature\": 0.2,\u00a0 \u00a0 \"max_output_tokens\": 256,\u00a0 \u00a0 \"top_p\": 0.95,}chat = chat_model.start_chat(context=\"My name is Miles. You are an astronomer, knowledgeable about the solar system.\")response = chat.send_message(\u00a0 \u00a0 \"How many planets are there in the solar system?\",\u00a0 \u00a0 **parameters)print(f\"Response from Google GenAI Model: {response.text}\")\n```\n### Use text embedding with the Vertex AI SDK for Python\n```\nimport openaiembeddings = openai.Embedding.create(\u00a0 deployment_id=\"text-embedding-ada-002\",\u00a0 #engine=\"text-embedding-ada-002\",\u00a0 input=\"What is life?\")[\"data\"][0][\"embedding\"]print(f'Length of Embedding Vector: {len(embeddings)}')\n```\n```\nfrom vertexai.preview.language_models import TextEmbeddingModelmodel = TextEmbeddingModel.from_pretrained(\"textembedding-gecko@001\")embeddings = model.get_embeddings([\"What is life?\"])for embedding in embeddings:\u00a0 vector = embedding.valuesprint(f'Length of Embedding Vector: {len(vector)}')\n```\n## What's next\n- Learn how to test prompts in [Vertex AI Studio](/vertex-ai/generative-ai/docs/start/quickstarts/quickstart) .\n- Learn more about prompt design for [text](/vertex-ai/generative-ai/docs/text/text-prompts) and [chat](/vertex-ai/generative-ai/docs/chat/chat-prompts) .\n- Learn more about [text embedding](/vertex-ai/generative-ai/docs/embeddings/get-text-embeddings) .\n- Learn how to [tune foundation models](/vertex-ai/generative-ai/docs/models/tune-models) .", "guide": "Generative AI on Vertex AI"}