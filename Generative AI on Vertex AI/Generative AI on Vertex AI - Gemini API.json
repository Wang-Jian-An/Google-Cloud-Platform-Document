{"title": "Generative AI on Vertex AI - Gemini API", "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/gemini?hl=zh-cn", "abstract": "# Generative AI on Vertex AI - Gemini API\nVertex AI Gemini API \u652f\u6301\u5c07\u591a\u6a21\u614b\u63d0\u793a\u4f5c\u7232\u8f38\u5165\u548c\u8f38\u51fa\u6587\u672c\u6216\u4ee3\u78bc\u3002\n", "content": "## HTTP \u8acb\u6c42\n\u5982\u9700\u5411\u6a21\u578b\u767c\u9001\u6578\u64da\u6d41\u8acb\u6c42\uff0c\u8acb\u53c3\u95b1 [streamGenerateContent](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.publishers.models/streamGenerateContent?hl=zh-cn) \u65b9\u6cd5\u77ad\u89e3\u8a73\u60c5\u3002\n\u5982\u9700\u67e5\u770b\u652f\u6301\u7684\u5340\u57df\u5217\u8868\uff0c\u8acb\u53c3\u95b1 [\u53ef\u7528\u4f4d\u7f6e](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/locations-genai?hl=zh-cn#available-regions) \u3002\n```\nPOST https://{REGION}-aiplatform.googleapis.com/v1/projects/{PROJECT_ID}/locations/{REGION}/publishers/google/models/gemini-1.0-pro:streamGenerateContent\n```\n **\u6ce8\u610f\uff1a** \u60a8\u53ef\u4ee5\u901a\u904e\u5c07`?alt=sse`\u9644\u52a0\u5230\u7db2\u5740\uff0c\u7232`gemini-1.0-pro`\u5553\u7528 [\u670d\u52d9\u5668\u767c\u9001\u4e8b\u4ef6 (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events) \u3002\n```\nPOST https://{REGION}-aiplatform.googleapis.com/v1/projects/{PROJECT_ID}/locations/{REGION}/publishers/google/models/gemini-1.0-pro-vision:streamGenerateContent\n```\n## \u6a21\u578b\u7248\u672c\n\u5982\u9700\u4f7f\u7528 [\u6700\u65b0\u7684\u6a21\u578b\u7248\u672c](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/model-versioning?hl=zh-cn#latest-version) \uff0c\u8acb\u6307\u5b9a\u4e0d\u542b\u7248\u672c\u865f\u7684\u6a21\u578b\u540d\u7a31\uff0c\u4f8b\u5982 `gemini-1.0-pro` \u6216 `gemini-1.0-pro-vision` \u3002\n\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u6a21\u578b\u7248\u672c\u548c\u751f\u547d\u9031\u671f](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/model-versioning?hl=zh-cn) \u3002\n## \u8acb\u6c42\u6b63\u6587\n\u8acb\u6c42\u6b63\u6587\u4e2d\u5305\u542b\u7d50\u69cb\u5982\u4e0b\u7684\u6578\u64da\uff1a\n```\n{\u00a0 \"contents\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"role\": string,\u00a0 \u00a0 \u00a0 \"parts\": [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Union field data can be only one of the following:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"text\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"inlineData\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mimeType\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"data\": string\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"fileData\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mimeType\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"fileUri\": string\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // End of list of possible types for union field data.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"videoMetadata\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"startOffset\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"seconds\": integer,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"nanos\": integer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"endOffset\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"seconds\": integer,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"nanos\": integer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ],\u00a0 \"tools\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"functionDeclarations\": [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"name\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"description\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"parameters\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 object (OpenAPI Object Schema)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ],\u00a0 \"safetySettings\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"category\": enum (HarmCategory),\u00a0 \u00a0 \u00a0 \"threshold\": enum (HarmBlockThreshold)\u00a0 \u00a0 }\u00a0 ],\u00a0 \"generationConfig\": {\u00a0 \u00a0 \"temperature\": number,\u00a0 \u00a0 \"topP\": number,\u00a0 \u00a0 \"topK\": number,\u00a0 \u00a0 \"candidateCount\": integer,\u00a0 \u00a0 \"maxOutputTokens\": integer,\u00a0 \u00a0 \"stopSequences\": [\u00a0 \u00a0 \u00a0 string\u00a0 \u00a0 ]\u00a0 }}\n```\n\u8acb\u4f7f\u7528\u4ee5\u4e0b\u53c3\u6578\uff1a\n| \u53c3\u6578     | \u8aaa\u660e                                                                                                                              |\n|:---------------------||\n| role     | \u8207\u5167\u5bb9\u95dc\u806f\u7684\u5c0d\u8a71\u4e2d\u7684\u89d2\u8272\u3002\u5373\u4f7f\u5728\u55ae\u8f2a\u61c9\u7528\u5834\u666f\u4e2d\uff0c\u4e5f\u9700\u8981\u6307\u5b9a\u89d2\u8272\u3002 \u53ef\u63a5\u53d7\u7684\u503c\u5305\u62ec\uff1a USER\uff1a\u6307\u5b9a\u7531\u60a8\u767c\u9001\u7684\u5167\u5bb9\u3002 MODEL\uff1a\u6307\u5b9a\u6a21\u578b\u7684\u97ff\u61c9\u3002                                                                                              |\n| parts    | \u69cb\u6210\u8f38\u5165\u7684\u6709\u5e8f\u90e8\u5206\u3002\u90e8\u5206\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7684 MIME \u985e\u578b\u3002 \u5c0d\u65bc gemini-1.0-pro\uff0c\u53ea\u6709 text \u5b57\u6bb5\u6709\u6548\u3002 \u4ee4\u724c\u9650\u5236\u7232 32000\u3002 \u5c0d\u65bc gemini-1.0-pro-vision\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\u50c5\u6587\u672c\u3001\u6587\u672c\u52a0\u6700\u591a 10 \u5f35\u5716\u7247\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u6587\u672c\u52a0 1 \u500b\u8996\u983b\u3002\u8a5e\u5143\u9650\u5236\u7232 16,000\u3002                                                                      |\n| text     | \u8981\u5305\u542b\u5728\u63d0\u793a\u4e2d\u7684\u6587\u672c\u8aaa\u660e\u6216\u804a\u5929\u5c0d\u8a71\u6846\u3002                                                                                                                      |\n| inlineData   | \u5716\u7247\u6216\u8996\u983b\u7684\u5e8f\u5217\u5316\u5b57\u7bc0\u6578\u64da\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 inlineData \u6307\u5b9a\u6700\u591a 1 \u500b\u6620\u50cf\u3002\u5982\u9700\u6307\u5b9a\u6700\u591a 16 \u500b\u6620\u50cf\uff0c\u8acb\u4f7f\u7528 fileData\u3002                                                                                                    |\n| mimeType    | \u5728 data \u6216 fileUri \u5b57\u6bb5\u4e2d\u6307\u5b9a\u7684\u5716\u7247\u6216\u8996\u983b\u7684\u5a92\u9ad4\u985e\u578b\u3002\u53ef\u63a5\u53d7\u7684\u503c\u5305\u62ec\uff1a \u9ede\u64ca\u5373\u53ef\u5c55\u958b MIME \u985e\u578b image/png image/jpeg video/mov video/mpeg video/mp4 video/mpg video/avi video/wmv video/mpegps video/flv \u8996\u983b\u6642\u9577\u4e0a\u9650\uff1a2 \u5206\u9418\u3002 \u5716\u7247\u5206\u8fa8\u7387\u6c92\u6709\u9650\u5236\u3002                                                                  |\n| data     | \u8981\u5728\u63d0\u793a\u4e2d\u5305\u542b\u5167\u5d4c\u7684\u5716\u7247\u6216\u8996\u983b\u7684 base64 \u7de8\u78bc\u3002\u6dfb\u52a0\u5a92\u9ad4\u5167\u5d4c\u6642\uff0c\u60a8\u9084\u5fc5\u9808\u6307\u5b9a MIMETYPE\u3002 \u5927\u5c0f\u4e0a\u9650\uff1a20MB                                                                                                      |\n| fileUri    | \u8981\u5305\u542b\u5728\u63d0\u793a\u4e2d\u7684\u5716\u7247\u6216\u8996\u983b\u7684 Cloud Storage URI\u3002\u5b58\u5132\u8a72\u6587\u4ef6\u7684\u5b58\u5132\u6876\u5fc5\u9808\u4f4d\u65bc\u767c\u9001\u8acb\u6c42\u7684 Google Cloud \u9805\u76ee\u4e2d\u3002\u60a8\u9084\u5fc5\u9808\u6307\u5b9a MIMETYPE\u3002 \u5927\u5c0f\u4e0a\u9650\uff1a20MB                                                                                           |\n| videoMetadata  | \u53ef\u9078\u3002\u5c0d\u65bc\u8996\u983b\u8f38\u5165\uff0c\u7232\u8996\u983b\u7684\u958b\u59cb\u548c\u7d50\u675f\u504f\u79fb\u91cf\uff0c\u63a1\u7528\u6642\u9577\u683c\u5f0f\u3002\u4f8b\u5982\uff0c\u5982\u9700\u6307\u5b9a\u5f9e 1:00 \u958b\u59cb\u7684 10 \u79d2\u526a\u8f2f\uff0c\u8acb\u8a2d\u7f6e \"start_offset\": { \"seconds\": 60 } \u548c \"end_offset\": { \"seconds\": 70 }\u3002                                                                                   |\n| tools    | \u4e00\u6bb5\u4ee3\u78bc\uff0c\u53ef\u8b93\u7cfb\u7d71\u8207\u5916\u90e8\u7cfb\u7d71\u9032\u884c\u4ea4\u4e92\uff0c\u4ee5\u5728\u6a21\u578b\u77e5\u8b58\u548c\u7bc4\u570d\u4e4b\u5916\u57f7\u884c\u64cd\u4f5c\u6216\u4e00\u7d44\u64cd\u4f5c\u3002                                                                                                           |\n| functionDeclarations | \u4e00\u500b\u6216\u591a\u500b\u51fd\u6578\u8072\u660e\u3002\u6bcf\u500b\u51fd\u6578\u8072\u660e\u5305\u542b\u4e00\u500b\u51fd\u6578\u7684\u76f8\u95dc\u4fe1\u606f\uff0c\u5176\u4e2d\u5305\u62ec\uff1a name\uff1a\u8981\u8abf\u7528\u7684\u51fd\u6578\u540d\u7a31\u3002\u5fc5\u9808\u4ee5\u5b57\u6bcd\u6216\u4e0b\u5283\u7dda\u958b\u982d\u3002\u5fc5\u9808\u662f a-z\u3001A-Z\u30010-9 \u6216\u5305\u542b\u4e0b\u5283\u7dda\u548c\u77ed\u5283\u7dda\uff0c\u9577\u5ea6\u4e0a\u9650\u7232 64\u3002 description\uff08\u53ef\u9078\uff09\u3002\u51fd\u6578\u7684\u8aaa\u660e\u548c\u7528\u9014\u3002\u6a21\u578b\u4f7f\u7528\u6b64\u53c3\u6578\u4f86\u78ba\u5b9a\u5982\u4f55\u4ee5\u53ca\u662f\u5426\u8abf\u7528\u51fd\u6578\u3002\u7232\u7372\u5f97\u6700\u4f73\u7d50\u679c\uff0c\u6211\u5011\u5efa\u8b70\u60a8\u6dfb\u52a0\u8aaa\u660e\u3002 parameters \u6b64\u51fd\u6578\u7684\u53c3\u6578\uff0c\u5176\u683c\u5f0f\u8207 OpenAPI \u67b6\u69cb\u517c\u5bb9\u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1\u51fd\u6578\u8abf\u7528\u3002                                 |\n| category    | \u8981\u7232\u5176\u914d\u7f6e\u95be\u503c\u7684\u5b89\u5168\u985e\u5225\u3002\u53ef\u63a5\u53d7\u7684\u503c\u5305\u62ec\uff1a \u9ede\u64ca\u5373\u53ef\u5c55\u958b\u5b89\u5168\u985e\u5225 HARM_CATEGORY_SEXUALLY_EXPLICIT HARM_CATEGORY_HATE_SPEECH HARM_CATEGORY_HARASSMENT HARM_CATEGORY_DANGEROUS_CONTENT                                                                                   |\n| threshold   | \u57fa\u65bc\u6982\u7387\u963b\u6b62\u5c6c\u65bc\u6307\u5b9a\u5b89\u5168\u985e\u5225\u7684\u97ff\u61c9\u7684\u95be\u503c\u3002 BLOCK_NONE BLOCK_LOW_AND_ABOVE BLOCK_MED_AND_ABOVE BLOCK_ONLY_HIGH                                                                                                    |\n| temperature   | \u6eab\u5ea6\u7528\u65bc\u5728\u97ff\u61c9\u751f\u6210\u671f\u9593\u9032\u884c\u63a1\u6a23\uff0c\u9019\u5728\u61c9\u7528 topP \u548c topK \u6642\u9032\u884c\u3002\u6eab\u5ea6\u53ef\u4ee5\u63a7\u5236\u8a5e\u5143\u9078\u64c7\u7684\u96a8\u6a5f\u6027\u3002\u8f03\u4f4e\u7684\u6eab\u5ea6\u6709\u5229\u65bc\u9700\u8981\u66f4\u5177\u78ba\u5b9a\u6027\u3001\u66f4\u5c11\u958b\u653e\u6027\u6216\u5275\u9020\u6027\u56de\u7b54\u7684\u63d0\u793a\uff0c\u800c\u8f03\u9ad8\u7684\u6eab\u5ea6\u53ef\u4ee5\u5e36\u4f86\u66f4\u5177\u591a\u6a23\u6027\u6216\u5275\u9020\u6027\u7684\u7d50\u679c\u3002\u6eab\u5ea6\u7232 0 \u8868\u793a\u56de\u8986\u662f\u78ba\u5b9a\u7684\uff1a\u7cfb\u7d71\u59cb\u7d42\u6703\u9078\u64c7\u6982\u7387\u6700\u9ad8\u7684\u56de\u8986\u3002 \u7bc4\u570d\uff1a0.0 - 1.0 gemini-1.0-pro \u7684\u9ed8\u8a8d\u503c\uff1a0.9 gemini-1.0-pro-vision \u7684\u9ed8\u8a8d\u503c\uff1a0.4                                          |\n| maxOutputTokens  | \u56de\u8986\u4e2d\u53ef\u751f\u6210\u7684\u8a5e\u5143\u6578\u91cf\u4e0a\u9650\u3002\u8a5e\u5143\u7d04\u7232 4 \u500b\u5b57\u7b26\u3002100 \u500b\u8a5e\u5143\u5c0d\u61c9\u5927\u7d04 60-80 \u500b\u55ae\u8a5e\u3002 \u6307\u5b9a\u8f03\u4f4e\u7684\u503c\u53ef\u7372\u5f97\u8f03\u77ed\u7684\u56de\u7b54\uff0c\u6307\u5b9a\u8f03\u9ad8\u7684\u503c\u53ef\u7372\u5f97\u53ef\u80fd\u8f03\u9577\u7684\u56de\u7b54\u3002 gemini-1.0-pro \u7684\u7bc4\u570d\uff1a1-8192\uff08\u9ed8\u8a8d\u503c\uff1a8192\uff09 gemini-1.0-pro-vision \u7684\u7bc4\u570d\uff1a1-2048\uff08\u9ed8\u8a8d\u503c\uff1a2048\uff09                                                                  |\n| topK     | Top-K \u53ef\u66f4\u6539\u6a21\u578b\u9078\u64c7\u8f38\u51fa\u8a5e\u5143\u7684\u65b9\u5f0f\u3002\u5982\u679c top-K \u8a2d\u7232 1\uff0c\u8868\u793a\u4e0b\u4e00\u500b\u6240\u9078\u8a5e\u5143\u662f\u6a21\u578b\u8a5e\u5f59\u8868\u7684\u6240\u6709\u8a5e\u5143\u4e2d\u6982\u7387\u6700\u9ad8\u7684\u8a5e\u5143\uff08\u4e5f\u7a31\u7232\u8caa\u5fc3\u89e3\u78bc\uff09\u3002\u5982\u679c top-K \u8a2d\u7232 3\uff0c\u5247\u8868\u793a\u7cfb\u7d71\u5c07\u5f9e 3 \u500b\u6982\u7387\u6700\u9ad8\u7684\u8a5e\u5143\uff08\u901a\u904e\u6eab\u5ea6\u78ba\u5b9a\uff09\u4e2d\u9078\u64c7\u4e0b\u4e00\u500b\u8a5e\u5143\u3002 \u5728\u6bcf\u500b\u8a5e\u5143\u9078\u64c7\u6b65\u4e2d\uff0c\u7cfb\u7d71\u90fd\u6703\u5c0d\u6982\u7387\u6700\u9ad8\u7684 top-K \u8a5e\u5143\u9032\u884c\u63a1\u6a23\u3002\u7136\u5f8c\uff0c\u7cfb\u7d71\u6703\u6839\u64da top-P \u9032\u4e00\u6b65\u904e\u6ffe\u8a5e\u5143\uff0c\u4e26\u4f7f\u7528\u6eab\u5ea6\u63a1\u6a23\u9078\u64c7\u6700\u7d42\u7684\u8a5e\u5143\u3002 \u6307\u5b9a\u8f03\u4f4e\u7684\u503c\u53ef\u7372\u5f97\u96a8\u6a5f\u7a0b\u5ea6\u8f03\u4f4e\u7684\u56de\u7b54\uff0c\u6307\u5b9a\u8f03\u9ad8\u7684\u503c\u53ef\u7372\u5f97\u96a8\u6a5f\u7a0b\u5ea6\u8f03\u9ad8\u7684\u56de\u7b54\u3002 \u7bc4\u570d\uff1a1-40 gemini-1.0-pro-vision \u7684\u9ed8\u8a8d\u503c\uff1a 32 gemini-1.0-pro \u7684\u9ed8\u8a8d\u503c\uff1anone |\n| topP     | Top-P \u53ef\u66f4\u6539\u6a21\u578b\u9078\u64c7\u8f38\u51fa\u8a5e\u5143\u7684\u65b9\u5f0f\u3002\u7cfb\u7d71\u6703\u6309\u7167\u6982\u7387\u5f9e\u6700\u9ad8\uff08\u898b top-K\uff09\u5230\u6700\u4f4e\u7684\u9806\u5e8f\u9078\u64c7\u8a5e\u5143\uff0c\u76f4\u5230\u6240\u9078\u8a5e\u5143\u7684\u6982\u7387\u7e3d\u548c\u7b49\u65bc top-P \u7684\u503c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8a5e\u5143 A\u3001B \u548c C \u7684\u6982\u7387\u5206\u5225\u7232 0.3\u30010.2 \u548c 0.1\uff0c\u4e26\u4e14 top-P \u7684\u503c\u7232 0.5\uff0c\u5247\u6a21\u578b\u5c07\u9078\u64c7 A \u6216 B \u4f5c\u7232\u4e0b\u4e00\u500b\u8a5e\u5143\uff08\u901a\u904e\u6eab\u5ea6\u78ba\u5b9a\uff09\uff0c\u4e26\u6703\u6392\u9664 C \u4f5c\u7232\u5019\u9078\u8a5e\u5143\u3002 \u6307\u5b9a\u8f03\u4f4e\u7684\u503c\u53ef\u7372\u5f97\u96a8\u6a5f\u7a0b\u5ea6\u8f03\u4f4e\u7684\u56de\u7b54\uff0c\u6307\u5b9a\u8f03\u9ad8\u7684\u503c\u53ef\u7372\u5f97\u96a8\u6a5f\u7a0b\u5ea6\u8f03\u9ad8\u7684\u56de\u7b54\u3002 \u7bc4\u570d\uff1a0.0 - 1.0 Default: 1.0                             |\n| candidateCount  | \u8981\u8fd4\u56de\u7684\u97ff\u61c9\u8b8a\u9ad4\u6578\u91cf\u3002 \u8a72\u503c\u5fc5\u9808\u7232 1\u3002                                                                                                                      |\n| stopSequences  | \u6307\u5b9a\u4e00\u500b\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u544a\u77e5\u6a21\u578b\u5728\u97ff\u61c9\u4e2d\u9047\u5230\u5176\u4e2d\u4e00\u500b\u5b57\u7b26\u4e32\u6642\uff0c\u505c\u6b62\u751f\u6210\u6587\u672c\u3002\u5982\u679c\u67d0\u500b\u5b57\u7b26\u4e32\u5728\u97ff\u61c9\u4e2d\u591a\u6b21\u51fa\u73fe\uff0c\u5247\u97ff\u61c9\u6703\u5728\u9996\u6b21\u51fa\u73fe\u7684\u4f4d\u7f6e\u622a\u65b7\u3002\u5b57\u7b26\u4e32\u5340\u5206\u5927\u5c0f\u5beb\u3002 \u4f8b\u5982\uff0c\u672a\u6307\u5b9a stopSequences \u6642\uff0c\u5982\u679c\u4e0b\u9762\u7684\u5167\u5bb9\u662f\u8fd4\u56de\u7684\u56de\u7b54\uff1a public static string reverse(string myString) \u5247\u8fd4\u56de\u7684\u56de\u7b54\u7232\u4ee5\u4e0b\u5167\u5bb9\uff0c\u5176\u4e2d stopSequences \u8a2d\u7f6e\u7232 [\"Str\", \"reverse\"]\uff1a public static string \u5217\u8868\u4e2d\u6700\u591a 5 \u9805\u3002                                   |\n## \u97ff\u61c9\u6b63\u6587\n```\n{\u00a0 \"candidates\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"content\": {\u00a0 \u00a0 \u00a0 \u00a0 \"parts\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"text\": string\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"finishReason\": enum (FinishReason),\u00a0 \u00a0 \u00a0 \"safetyRatings\": [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"category\": enum (HarmCategory),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"probability\": enum (HarmProbability),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"blocked\": boolean\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"citationMetadata\": {\u00a0 \u00a0 \u00a0 \u00a0 \"citations\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"startIndex\": integer,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"endIndex\": integer,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"uri\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"title\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"license\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"publicationDate\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"year\": integer,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"month\": integer,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"day\": integer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ],\u00a0 \"usageMetadata\": {\u00a0 \u00a0 \"promptTokenCount\": integer,\u00a0 \u00a0 \"candidatesTokenCount\": integer,\u00a0 \u00a0 \"totalTokenCount\": integer\u00a0 }}\n```\n| \u97ff\u61c9\u5143\u7d20    | \u8aaa\u660e                                                                                                                     |\n|:---------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| text     | \u751f\u6210\u7684\u6587\u672c\u3002                                                                                                                   |\n| finishReason   | \u6a21\u578b\u505c\u6b62\u751f\u6210\u8a5e\u5143\u7684\u539f\u56e0\u3002\u5982\u679c\u7232\u7a7a\uff0c\u5247\u6a21\u578b\u5c1a\u672a\u505c\u6b62\u751f\u6210\u8a5e\u5143\u3002 FINISH_REASON_UNSPECIFIED \u672a\u6307\u5b9a\u5b8c\u6210\u539f\u56e0\u3002 FINISH_REASON_STOP \u6a21\u578b\u7684\u81ea\u7136\u505c\u6b62\u9ede\u6216\u63d0\u4f9b\u7684\u505c\u6b62\u5e8f\u5217\u3002 FINISH_REASON_MAX_TOKENS \u5df2\u9054\u5230\u8acb\u6c42\u4e2d\u6307\u5b9a\u7684\u8a5e\u5143\u6578\u91cf\u4e0a\u9650\u3002 FINISH_REASON_SAFETY \u7531\u65bc\u51fa\u65bc\u5b89\u5168\u539f\u56e0\u6a19\u8a18\u4e86\u7b54\u8986\uff0c\u8a5e\u5143\u751f\u6210\u5df2\u505c\u6b62\u3002\u8acb\u6ce8\u610f\uff0c\u5982\u679c\u5167\u5bb9\u904e\u6ffe\u5668\u963b\u6b62\u8f38\u51fa\uff0c\u5247 Candidate.content \u7232\u7a7a\u3002 FINISH_REASON_RECITATION \u7531\u65bc\u97ff\u61c9\u56e0\u672a\u7d93\u6388\u6b0a\u7684\u5f15\u7528\u800c\u9032\u884c\u6a19\u8a18\uff0c\u56e0\u6b64\u8a5e\u5143\u751f\u6210\u64cd\u4f5c\u5df2\u505c\u6b62\u3002 FINISH_REASON_OTHER \u505c\u6b62\u8a5e\u5143\u7684\u6240\u6709\u5176\u4ed6\u539f\u56e0 |\n| category    | \u8981\u7232\u5176\u914d\u7f6e\u95be\u503c\u7684\u5b89\u5168\u985e\u5225\u3002\u53ef\u63a5\u53d7\u7684\u503c\u5305\u62ec\uff1a \u9ede\u64ca\u5373\u53ef\u5c55\u958b\u5b89\u5168\u985e\u5225 HARM_CATEGORY_SEXUALLY_EXPLICIT HARM_CATEGORY_HATE_SPEECH HARM_CATEGORY_HARASSMENT HARM_CATEGORY_DANGEROUS_CONTENT                                                                         |\n| probability   | \u5167\u5bb9\u4e2d\u7684\u6709\u5bb3\u6982\u7387\u7d1a\u5225\u3002 HARM_PROBABILITY_UNSPECIFIED NEGLIGIBLE LOW MEDIUM HIGH                                                                                                  |\n| blocked    | \u8207\u5b89\u5168\u5c6c\u6027\u95dc\u806f\u7684 boolean \u6a19\u8a8c\uff0c\u7528\u65bc\u6307\u793a\u6a21\u578b\u7684\u8f38\u5165\u6216\u8f38\u51fa\u662f\u5426\u88ab\u963b\u6b62\u3002\u5982\u679c blocked \u7232 true\uff0c\u5247\u97ff\u61c9\u4e2d\u7684 errors \u5b57\u6bb5\u5305\u542b\u4e00\u500b\u6216\u591a\u500b\u932f\u8aa4\u4ee3\u78bc\u3002\u5982\u679c blocked \u7232 false\uff0c\u5247\u97ff\u61c9\u4e0d\u5305\u542b errors \u5b57\u6bb5\u3002                                                                        |\n| startIndex   | \u4e00\u500b\u6574\u6578\uff0c\u7528\u65bc\u6307\u5b9a\u5f15\u7528\u5728\u5167\u5bb9\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002                                                                                                           |\n| endIndex    | \u4e00\u500b\u6574\u6578\uff0c\u7528\u65bc\u6307\u5b9a\u5f15\u7528\u5728 content \u4e2d\u7684\u7d50\u675f\u4f4d\u7f6e\u3002                                                                                                          |\n| url     | \u5f15\u7528\u4f86\u6e90\u7684\u7db2\u5740\u3002\u7db2\u5740\u4f86\u6e90\u7684\u793a\u4f8b\u53ef\u80fd\u662f\u65b0\u805e\u7db2\u7ad9\u6216 GitHub \u4ee3\u78bc\u5eab\u3002                                                                                                      |\n| title    | \u5f15\u7528\u4f86\u6e90\u7684\u6a19\u984c\u3002\u4f86\u6e90\u6a19\u984c\u7684\u793a\u4f8b\u53ef\u80fd\u662f\u65b0\u805e\u5831\u9053\u6216\u66f8\u7c4d\u6a19\u984c\u3002                                                                                                        |\n| license    | \u8207\u5f15\u7528\u95dc\u806f\u7684\u8a31\u53ef\u3002                                                                                                                 |\n| publicationDate  | \u5f15\u7528\u7684\u767c\u4f48\u65e5\u671f\u3002\u5176\u6709\u6548\u683c\u5f0f\u7232 YYYY\u3001YYYY-MM\u3001YYYY-MM-DD\u3002                                                                                                        |\n| promptTokenCount  | \u8acb\u6c42\u4e2d\u7684\u8a5e\u5143\u6578\u91cf\u3002                                                                                                                 |\n| candidatesTokenCount | \u97ff\u61c9\u4e2d\u7684\u8a5e\u5143\u6578\u91cf\u3002                                                                                                                 |\n| totalTokenCount  | \u8acb\u6c42\u548c\u97ff\u61c9\u4e2d\u7684\u8a5e\u5143\u6578\u91cf\u3002                                                                                                                |\n## \u63a1\u6a23\u8acb\u6c42\n\u5982\u9700\u4f7f\u7528\u5553\u7528\u4e86\u670d\u52d9\u5668\u767c\u9001\u4e8b\u4ef6 (SSE) \u7684 Vertex AI API \u6e2c\u8a66\u6587\u672c\u63d0\u793a\uff0c\u8acb\u5411\u767c\u4f48\u65b9\u6a21\u578b\u7aef\u9ede\u767c\u9001 POST \u8acb\u6c42\uff0c\u4e26\u5728\u7db2\u5740\u672b\u5c3e\u6dfb\u52a0 `?alt=sse` \u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- \uff1a\u60a8\u7684 [\u9805\u76ee ID](https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=zh-cn#identifiers) \u3002\n\u5982\u9700\u77ad\u89e3\u5176\u4ed6\u5b57\u6bb5\uff0c\u8acb\u67e5\u770b\n [\u8acb\u6c42\u6b63\u6587](#request_body) \n\u8868\u3002\nHTTP \u65b9\u6cd5\u548c\u7db2\u5740\uff1a\n```\nPOST https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/gemini-1.0-pro:streamGenerateContent?alt=sse\n```\n\u8acb\u6c42 JSON \u6b63\u6587\uff1a\n```\n{\n \"contents\": {\n \"role\": \"user\",\n \"parts\": {\n  \"text\": \"Give me a recipe for banana bread.\"\n }\n },\n \"safety_settings\": {\n \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n \"threshold\": \"BLOCK_LOW_AND_ABOVE\"\n },\n \"generation_config\": {\n \"temperature\": 0.2,\n \"topP\": 0.8,\n \"topK\": 40\n }\n}\n```\n\u5982\u9700\u767c\u9001\u8acb\u6c42\uff0c\u8acb\u9078\u64c7\u4ee5\u4e0b\u65b9\u5f0f\u4e4b\u4e00\uff1a\n **\u6ce8\u610f** \uff1a\u4ee5\u4e0b\u547d\u4ee4\u5047\u5b9a\u60a8\u5df2\u4f7f\u7528\u60a8\u7684\u7528\u6236\u8cec\u865f\u901a\u904e\u904b\u884c [gcloud init](https://cloud.google.com/sdk/gcloud/reference/init?hl=zh-cn) \u6216 [gcloud auth login](https://cloud.google.com/sdk/gcloud/reference/auth/login?hl=zh-cn) \u767b\u9304`gcloud`CLI\uff0c\u6216\u8005\u4f7f\u7528\u4e86 [Cloud Shell](https://cloud.google.com/shell/docs?hl=zh-cn) \uff0c\u9019\u6703\u4f7f\u60a8\u81ea\u52d5\u767b\u9304`gcloud`CLI\u3002\u60a8\u53ef\u4ee5\u904b\u884c [gcloud auth list](https://cloud.google.com/sdk/gcloud/reference/auth/list?hl=zh-cn) \u4f86\u6aa2\u67e5\u7576\u524d\u6d3b\u8e8d\u7684\u8cec\u865f\u3002\n\u5c07\u8acb\u6c42\u6b63\u6587\u4fdd\u5b58\u5728\u540d\u7232 `request.json` \u7684\u6587\u4ef6\u4e2d\uff0c\u7136\u5f8c\u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/gemini-1.0-pro:streamGenerateContent?alt=sse\"\n``` **\u6ce8\u610f** \uff1a\u4ee5\u4e0b\u547d\u4ee4\u5047\u5b9a\u60a8\u5df2\u4f7f\u7528\u60a8\u7684\u7528\u6236\u8cec\u865f\u901a\u904e\u904b\u884c [gcloud init](https://cloud.google.com/sdk/gcloud/reference/init?hl=zh-cn) \u6216 [gcloud auth login](https://cloud.google.com/sdk/gcloud/reference/auth/login?hl=zh-cn) \u767b\u9304`gcloud`CLI\uff0c\u6216\u8005\u4f7f\u7528\u4e86 [Cloud Shell](https://cloud.google.com/shell/docs?hl=zh-cn) \uff0c\u9019\u6703\u4f7f\u60a8\u81ea\u52d5\u767b\u9304`gcloud`CLI\u3002\u60a8\u53ef\u4ee5\u904b\u884c [gcloud auth list](https://cloud.google.com/sdk/gcloud/reference/auth/list?hl=zh-cn) \u4f86\u6aa2\u67e5\u7576\u524d\u6d3b\u8e8d\u7684\u8cec\u865f\u3002\n\u5c07\u8acb\u6c42\u6b63\u6587\u4fdd\u5b58\u5728\u540d\u7232 `request.json` \u7684\u6587\u4ef6\u4e2d\uff0c\u7136\u5f8c\u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/gemini-1.0-pro:streamGenerateContent?alt=sse\" | Select-Object -Expand Content\n```\n\u60a8\u61c9\u8a72\u6703\u6536\u5230\u985e\u4f3c [\u793a\u4f8b\u97ff\u61c9](#sample_response) \u7684 JSON \u97ff\u61c9\u3002\u53e6\u8acb\u53c3\u95b1 [\u767c\u9001\u804a\u5929\u63d0\u793a\u8acb\u6c42 (Gemini)](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/send-chat-prompts-gemini?hl=zh-cn) \u3002\n\u5982\u9700\u4f7f\u7528\u5553\u7528\u4e86\u670d\u52d9\u5668\u767c\u9001\u4e8b\u4ef6 (SSE) \u7684 Vertex AI API \u6e2c\u8a66\u804a\u5929\u63d0\u793a\uff0c\u8acb\u5411\u767c\u4f48\u65b9\u6a21\u578b\u7aef\u9ede\u767c\u9001 POST \u8acb\u6c42\uff0c\u4e26\u5728\u7db2\u5740\u672b\u5c3e\u6dfb\u52a0 `?alt=sse` \u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- \uff1a\u60a8\u7684 [\u9805\u76ee ID](https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=zh-cn#identifiers) \u3002\n\u5982\u9700\u77ad\u89e3\u5176\u4ed6\u5b57\u6bb5\uff0c\u8acb\u67e5\u770b\n [\u8acb\u6c42\u6b63\u6587](#request_body) \n\u8868\u3002\nHTTP \u65b9\u6cd5\u548c\u7db2\u5740\uff1a\n```\nPOST https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/gemini-1.0-pro:streamGenerateContent?alt=sse\n```\n\u8acb\u6c42 JSON \u6b63\u6587\uff1a\n```\n{\n \"contents\": [ {\n  \"role\": \"USER\",\n  \"parts\": { \"text\": \"Hello!\" }\n },\n {\n  \"role\": \"MODEL\",\n  \"parts\": { \"text\": \"Argh! What brings ye to my ship?\" }\n },\n {\n  \"role\": \"USER\",\n  \"parts\": { \"text\": \"Wow! You are a real-life priate!\" }\n }\n ],\n \"safety_settings\": {\n \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n \"threshold\": \"BLOCK_LOW_AND_ABOVE\"\n },\n \"generation_config\": {\n \"temperature\": 0.2,\n \"topP\": 0.8,\n \"topK\": 40,\n \"maxOutputTokens\": 200,\n }\n}\n```\n\u5982\u9700\u767c\u9001\u8acb\u6c42\uff0c\u8acb\u9078\u64c7\u4ee5\u4e0b\u65b9\u5f0f\u4e4b\u4e00\uff1a\n **\u6ce8\u610f** \uff1a\u4ee5\u4e0b\u547d\u4ee4\u5047\u5b9a\u60a8\u5df2\u4f7f\u7528\u60a8\u7684\u7528\u6236\u8cec\u865f\u901a\u904e\u904b\u884c [gcloud init](https://cloud.google.com/sdk/gcloud/reference/init?hl=zh-cn) \u6216 [gcloud auth login](https://cloud.google.com/sdk/gcloud/reference/auth/login?hl=zh-cn) \u767b\u9304`gcloud`CLI\uff0c\u6216\u8005\u4f7f\u7528\u4e86 [Cloud Shell](https://cloud.google.com/shell/docs?hl=zh-cn) \uff0c\u9019\u6703\u4f7f\u60a8\u81ea\u52d5\u767b\u9304`gcloud`CLI\u3002\u60a8\u53ef\u4ee5\u904b\u884c [gcloud auth list](https://cloud.google.com/sdk/gcloud/reference/auth/list?hl=zh-cn) \u4f86\u6aa2\u67e5\u7576\u524d\u6d3b\u8e8d\u7684\u8cec\u865f\u3002\n\u5c07\u8acb\u6c42\u6b63\u6587\u4fdd\u5b58\u5728\u540d\u7232 `request.json` \u7684\u6587\u4ef6\u4e2d\uff0c\u7136\u5f8c\u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/gemini-1.0-pro:streamGenerateContent?alt=sse\"\n``` **\u6ce8\u610f** \uff1a\u4ee5\u4e0b\u547d\u4ee4\u5047\u5b9a\u60a8\u5df2\u4f7f\u7528\u60a8\u7684\u7528\u6236\u8cec\u865f\u901a\u904e\u904b\u884c [gcloud init](https://cloud.google.com/sdk/gcloud/reference/init?hl=zh-cn) \u6216 [gcloud auth login](https://cloud.google.com/sdk/gcloud/reference/auth/login?hl=zh-cn) \u767b\u9304`gcloud`CLI\uff0c\u6216\u8005\u4f7f\u7528\u4e86 [Cloud Shell](https://cloud.google.com/shell/docs?hl=zh-cn) \uff0c\u9019\u6703\u4f7f\u60a8\u81ea\u52d5\u767b\u9304`gcloud`CLI\u3002\u60a8\u53ef\u4ee5\u904b\u884c [gcloud auth list](https://cloud.google.com/sdk/gcloud/reference/auth/list?hl=zh-cn) \u4f86\u6aa2\u67e5\u7576\u524d\u6d3b\u8e8d\u7684\u8cec\u865f\u3002\n\u5c07\u8acb\u6c42\u6b63\u6587\u4fdd\u5b58\u5728\u540d\u7232 `request.json` \u7684\u6587\u4ef6\u4e2d\uff0c\u7136\u5f8c\u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/gemini-1.0-pro:streamGenerateContent?alt=sse\" | Select-Object -Expand Content\n```\n\u60a8\u61c9\u8a72\u6703\u6536\u5230\u985e\u4f3c [\u793a\u4f8b\u97ff\u61c9](#sample_response) \u7684 JSON \u97ff\u61c9\u3002\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u6216\u66f4\u65b0 Python\uff0c\u8acb\u53c3\u95b1 [\u5b89\u88dd Python \u7248 Vertex AI SDK](https://cloud.google.com/vertex-ai/docs/start/use-vertex-ai-python-sdk?hl=zh-cn) \u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [   Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/generative_ai/gemini_chat_example.py) \n```\nimport vertexaifrom vertexai.generative_models import GenerativeModel, ChatSession# TODO(developer): Update and un-comment below lines# project_id = \"PROJECT_ID\"# location = \"us-central1\"vertexai.init(project=project_id, location=location)model = GenerativeModel(\"gemini-1.0-pro\")chat = model.start_chat()def get_chat_response(chat: ChatSession, prompt: str) -> str:\u00a0 \u00a0 text_response = []\u00a0 \u00a0 responses = chat.send_message(prompt, stream=True)\u00a0 \u00a0 for chunk in responses:\u00a0 \u00a0 \u00a0 \u00a0 text_response.append(chunk.text)\u00a0 \u00a0 return \"\".join(text_response)prompt = \"Hello.\"print(get_chat_response(chat, prompt))prompt = \"What are all the colors in a rainbow?\"print(get_chat_response(chat, prompt))prompt = \"Why does it appear when it rains?\"print(get_chat_response(chat, prompt))\n```\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300a\u751f\u6210\u5f0f AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Node.js \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u751f\u6210\u5f0f AI Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411\u751f\u6210\u5f0f AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/generative-ai/snippets/streamChat.js) \n```\nconst {VertexAI} = require('@google-cloud/vertexai');/**\u00a0* TODO(developer): Update these variables before running the sample.\u00a0*/async function createStreamChat(\u00a0 projectId = 'PROJECT_ID',\u00a0 location = 'us-central1',\u00a0 model = 'gemini-1.0-pro') {\u00a0 // Initialize Vertex with your Cloud project and location\u00a0 const vertexAI = new VertexAI({project: projectId, location: location});\u00a0 // Instantiate the model\u00a0 const generativeModel = vertexAI.getGenerativeModel({\u00a0 \u00a0 model: model,\u00a0 });\u00a0 const chat = generativeModel.startChat({});\u00a0 const chatInput1 = 'How can I learn more about that?';\u00a0 console.log(`User: ${chatInput1}`);\u00a0 const result1 = await chat.sendMessageStream(chatInput1);\u00a0 for await (const item of result1.stream) {\u00a0 \u00a0 console.log(item.candidates[0].content.parts[0].text);\u00a0 }}\n```\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300a\u751f\u6210\u5f0f AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Java \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u751f\u6210\u5f0f AI Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1?hl=zh-cn) \u3002\n\u5982\u9700\u5411\u751f\u6210\u5f0f AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/vertexai/snippets/src/main/java/vertexai/gemini/ChatDiscussion.java) \n```\nimport com.google.cloud.vertexai.VertexAI;import com.google.cloud.vertexai.api.GenerateContentResponse;import com.google.cloud.vertexai.generativeai.ChatSession;import com.google.cloud.vertexai.generativeai.GenerativeModel;import com.google.cloud.vertexai.generativeai.ResponseHandler;import java.io.IOException;public class ChatDiscussion {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"your-google-cloud-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String modelName = \"gemini-1.0-pro\";\u00a0 \u00a0 chatDiscussion(projectId, location, modelName);\u00a0 }\u00a0 // Ask interrelated questions in a row using a ChatSession object.\u00a0 public static void chatDiscussion(String projectId, String location, String modelName)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs\u00a0 \u00a0 // to be created once, and can be reused for multiple requests.\u00a0 \u00a0 try (VertexAI vertexAI = new VertexAI(projectId, location)) {\u00a0 \u00a0 \u00a0 GenerateContentResponse response;\u00a0 \u00a0 \u00a0 GenerativeModel model = new GenerativeModel(modelName, vertexAI);\u00a0 \u00a0 \u00a0 // Create a chat session to be used for interactive conversation.\u00a0 \u00a0 \u00a0 ChatSession chatSession = new ChatSession(model);\u00a0 \u00a0 \u00a0 response = chatSession.sendMessage(\"Hello.\");\u00a0 \u00a0 \u00a0 System.out.println(ResponseHandler.getText(response));\u00a0 \u00a0 \u00a0 response = chatSession.sendMessage(\"What are all the colors in a rainbow?\");\u00a0 \u00a0 \u00a0 System.out.println(ResponseHandler.getText(response));\u00a0 \u00a0 \u00a0 response = chatSession.sendMessage(\"Why does it appear when it rains?\");\u00a0 \u00a0 \u00a0 System.out.println(ResponseHandler.getText(response));\u00a0 \u00a0 \u00a0 System.out.println(\"Chat Ended.\");\u00a0 \u00a0 }\u00a0 }}\n```\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300a\u751f\u6210\u5f0f AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Go \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u751f\u6210\u5f0f AI Go API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/go/docs/reference/cloud.google.com/go/aiplatform/latest/apiv1?hl=zh-cn) \u3002\n\u5982\u9700\u5411\u751f\u6210\u5f0f AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/vertexai/chat/chat.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"encoding/json\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/vertexai/genai\")var projectId = \"PROJECT_ID\"var region = \"us-central1\"var modelName = \"gemini-1.0-pro-vision\"func makeChatRequests(projectId string, region string, modelName string) error {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := genai.NewClient(ctx, projectId, region)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"error creating client: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 gemini := client.GenerativeModel(modelName)\u00a0 \u00a0 \u00a0 \u00a0 chat := gemini.StartChat()\u00a0 \u00a0 \u00a0 \u00a0 r, err := chat.SendMessage(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ctx,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 genai.Text(\"Hello\"))\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 rb, _ := json.MarshalIndent(r, \"\", \" \u00a0\")\u00a0 \u00a0 \u00a0 \u00a0 fmt.Println(string(rb))\u00a0 \u00a0 \u00a0 \u00a0 r, err = chat.SendMessage(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ctx,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 genai.Text(\"What are all the colors in a rainbow?\"))\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 rb, _ = json.MarshalIndent(r, \"\", \" \u00a0\")\u00a0 \u00a0 \u00a0 \u00a0 fmt.Println(string(rb))\u00a0 \u00a0 \u00a0 \u00a0 r, err = chat.SendMessage(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ctx,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 genai.Text(\"Why does it appear when it rains?\"))\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 rb, _ = json.MarshalIndent(r, \"\", \" \u00a0\")\u00a0 \u00a0 \u00a0 \u00a0 fmt.Println(string(rb))\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```\u53e6\u8acb\u53c3\u95b1 [\u767c\u9001\u591a\u6a21\u614b\u63d0\u793a\u8acb\u6c42](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/send-multimodal-prompts?hl=zh-cn) \u3002\n\u5982\u9700\u4f7f\u7528 Vertex AI API \u6e2c\u8a66\u591a\u6a21\u614b\u63d0\u793a\uff0c\u8acb\u5411\u767c\u4f48\u8005\u6a21\u578b\u7aef\u9ede\u767c\u9001 POST \u8acb\u6c42\u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- \uff1a\u60a8\u7684 [\u9805\u76ee ID](https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=zh-cn#identifiers) \u3002\n\u5982\u9700\u77ad\u89e3\u5176\u4ed6\u5b57\u6bb5\uff0c\u8acb\u67e5\u770b\n [\u8acb\u6c42\u6b63\u6587](#request_body) \n\u8868\u3002\nHTTP \u65b9\u6cd5\u548c\u7db2\u5740\uff1a\n```\nPOST https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/gemini-1.0-pro-vision:streamGenerateContent\n```\n\u8acb\u6c42 JSON \u6b63\u6587\uff1a\n```\n{\n \"contents\": {\n \"role\": \"user\",\n \"parts\": [  {\n  \"fileData\": {\n   \"mimeType\": \"image/jpeg\",\n   \"fileUri\": \"gs://cloud-samples-data/ai-platform/flowers/daisy/10559679065_50d2b16f6d.jpg\"\n  }\n  },\n  {\n  \"text\": \"Describe this picture.\"\n  }\n ]\n },\n \"safety_settings\": {\n \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n \"threshold\": \"BLOCK_LOW_AND_ABOVE\"\n },\n \"generation_config\": {\n \"temperature\": 0.4,\n \"topP\": 1.0,\n \"topK\": 32,\n \"maxOutputTokens\": 2048\n }\n}\n```\n\u5982\u9700\u767c\u9001\u8acb\u6c42\uff0c\u8acb\u9078\u64c7\u4ee5\u4e0b\u65b9\u5f0f\u4e4b\u4e00\uff1a\n **\u6ce8\u610f** \uff1a\u4ee5\u4e0b\u547d\u4ee4\u5047\u5b9a\u60a8\u5df2\u4f7f\u7528\u60a8\u7684\u7528\u6236\u8cec\u865f\u901a\u904e\u904b\u884c [gcloud init](https://cloud.google.com/sdk/gcloud/reference/init?hl=zh-cn) \u6216 [gcloud auth login](https://cloud.google.com/sdk/gcloud/reference/auth/login?hl=zh-cn) \u767b\u9304`gcloud`CLI\uff0c\u6216\u8005\u4f7f\u7528\u4e86 [Cloud Shell](https://cloud.google.com/shell/docs?hl=zh-cn) \uff0c\u9019\u6703\u4f7f\u60a8\u81ea\u52d5\u767b\u9304`gcloud`CLI\u3002\u60a8\u53ef\u4ee5\u904b\u884c [gcloud auth list](https://cloud.google.com/sdk/gcloud/reference/auth/list?hl=zh-cn) \u4f86\u6aa2\u67e5\u7576\u524d\u6d3b\u8e8d\u7684\u8cec\u865f\u3002\n\u5c07\u8acb\u6c42\u6b63\u6587\u4fdd\u5b58\u5728\u540d\u7232 `request.json` \u7684\u6587\u4ef6\u4e2d\uff0c\u7136\u5f8c\u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/gemini-1.0-pro-vision:streamGenerateContent\"\n``` **\u6ce8\u610f** \uff1a\u4ee5\u4e0b\u547d\u4ee4\u5047\u5b9a\u60a8\u5df2\u4f7f\u7528\u60a8\u7684\u7528\u6236\u8cec\u865f\u901a\u904e\u904b\u884c [gcloud init](https://cloud.google.com/sdk/gcloud/reference/init?hl=zh-cn) \u6216 [gcloud auth login](https://cloud.google.com/sdk/gcloud/reference/auth/login?hl=zh-cn) \u767b\u9304`gcloud`CLI\uff0c\u6216\u8005\u4f7f\u7528\u4e86 [Cloud Shell](https://cloud.google.com/shell/docs?hl=zh-cn) \uff0c\u9019\u6703\u4f7f\u60a8\u81ea\u52d5\u767b\u9304`gcloud`CLI\u3002\u60a8\u53ef\u4ee5\u904b\u884c [gcloud auth list](https://cloud.google.com/sdk/gcloud/reference/auth/list?hl=zh-cn) \u4f86\u6aa2\u67e5\u7576\u524d\u6d3b\u8e8d\u7684\u8cec\u865f\u3002\n\u5c07\u8acb\u6c42\u6b63\u6587\u4fdd\u5b58\u5728\u540d\u7232 `request.json` \u7684\u6587\u4ef6\u4e2d\uff0c\u7136\u5f8c\u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/gemini-1.0-pro-vision:streamGenerateContent\" | Select-Object -Expand Content\n```\n\u60a8\u61c9\u8a72\u6703\u6536\u5230\u985e\u4f3c [\u793a\u4f8b\u97ff\u61c9](#sample_response) \u7684 JSON \u97ff\u61c9\u3002\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u6216\u66f4\u65b0 Python\uff0c\u8acb\u53c3\u95b1 [\u5b89\u88dd Python \u7248 Vertex AI SDK](https://cloud.google.com/vertex-ai/docs/start/use-vertex-ai-python-sdk?hl=zh-cn) \u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [   Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/generative_ai/gemini_multi_image_example.py) \n```\nimport http.clientimport typingimport urllib.requestfrom vertexai.generative_models import GenerativeModel, Image# create helper functiondef load_image_from_url(image_url: str) -> Image:\u00a0 \u00a0 with urllib.request.urlopen(image_url) as response:\u00a0 \u00a0 \u00a0 \u00a0 response = typing.cast(http.client.HTTPResponse, response)\u00a0 \u00a0 \u00a0 \u00a0 image_bytes = response.read()\u00a0 \u00a0 return Image.from_bytes(image_bytes)# Load images from Cloud Storage URIlandmark1 = load_image_from_url(\u00a0 \u00a0 \"https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark1.png\")landmark2 = load_image_from_url(\u00a0 \u00a0 \"https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark2.png\")landmark3 = load_image_from_url(\u00a0 \u00a0 \"https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark3.png\")# Pass multimodal promptmodel = GenerativeModel(\"gemini-1.0-pro-vision\")response = model.generate_content(\u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 \u00a0 landmark1,\u00a0 \u00a0 \u00a0 \u00a0 \"city: Rome, Landmark: the Colosseum\",\u00a0 \u00a0 \u00a0 \u00a0 landmark2,\u00a0 \u00a0 \u00a0 \u00a0 \"city: Beijing, Landmark: Forbidden City\",\u00a0 \u00a0 \u00a0 \u00a0 landmark3,\u00a0 \u00a0 ])print(response)\n```\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300a\u751f\u6210\u5f0f AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Node.js \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u751f\u6210\u5f0f AI Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411\u751f\u6210\u5f0f AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/generative-ai/snippets/sendMultiModalPromptWithImage.js) \n```\nconst {VertexAI} = require('@google-cloud/vertexai');const axios = require('axios');async function getBase64(url) {\u00a0 const image = await axios.get(url, {responseType: 'arraybuffer'});\u00a0 return Buffer.from(image.data).toString('base64');}/**\u00a0* TODO(developer): Update these variables before running the sample.\u00a0*/async function sendMultiModalPromptWithImage(\u00a0 projectId = 'PROJECT_ID',\u00a0 location = 'us-central1',\u00a0 model = 'gemini-1.0-pro-vision') {\u00a0 // For images, the SDK supports base64 strings\u00a0 const landmarkImage1 = await getBase64(\u00a0 \u00a0 'https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark1.png'\u00a0 );\u00a0 const landmarkImage2 = await getBase64(\u00a0 \u00a0 'https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark2.png'\u00a0 );\u00a0 const landmarkImage3 = await getBase64(\u00a0 \u00a0 'https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark3.png'\u00a0 );\u00a0 // Initialize Vertex with your Cloud project and location\u00a0 const vertexAI = new VertexAI({project: projectId, location: location});\u00a0 const generativeVisionModel = vertexAI.getGenerativeModel({\u00a0 \u00a0 model: model,\u00a0 });\u00a0 // Pass multimodal prompt\u00a0 const request = {\u00a0 \u00a0 contents: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 role: 'user',\u00a0 \u00a0 \u00a0 \u00a0 parts: [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 inlineData: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 data: landmarkImage1,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mimeType: 'image/png',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 text: 'city: Rome, Landmark: the Colosseum',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 inlineData: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 data: landmarkImage2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mimeType: 'image/png',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 text: 'city: Beijing, Landmark: Forbidden City',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 inlineData: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 data: landmarkImage3,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mimeType: 'image/png',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 };\u00a0 // Create the response\u00a0 const response = await generativeVisionModel.generateContent(request);\u00a0 // Wait for the response to complete\u00a0 const aggregatedResponse = await response.response;\u00a0 // Select the text from the response\u00a0 const fullTextResponse =\u00a0 \u00a0 aggregatedResponse.candidates[0].content.parts[0].text;\u00a0 console.log(fullTextResponse);}\n```\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300a\u751f\u6210\u5f0f AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Java \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u751f\u6210\u5f0f AI Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1?hl=zh-cn) \u3002\n\u5982\u9700\u5411\u751f\u6210\u5f0f AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/vertexai/snippets/src/main/java/vertexai/gemini/MultimodalMultiImage.java) \n```\nimport com.google.cloud.vertexai.VertexAI;import com.google.cloud.vertexai.api.Content;import com.google.cloud.vertexai.api.GenerateContentResponse;import com.google.cloud.vertexai.generativeai.ContentMaker;import com.google.cloud.vertexai.generativeai.GenerativeModel;import com.google.cloud.vertexai.generativeai.PartMaker;import com.google.cloud.vertexai.generativeai.ResponseHandler;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.URL;public class MultimodalMultiImage {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"your-google-cloud-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String modelName = \"gemini-1.0-pro-vision\";\u00a0 \u00a0 multimodalMultiImage(projectId, location, modelName);\u00a0 }\u00a0 // Generates content from multiple input images.\u00a0 public static void multimodalMultiImage(String projectId, String location, String modelName)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs\u00a0 \u00a0 // to be created once, and can be reused for multiple requests.\u00a0 \u00a0 try (VertexAI vertexAI = new VertexAI(projectId, location)) {\u00a0 \u00a0 \u00a0 GenerativeModel model = new GenerativeModel(modelName, vertexAI);\u00a0 \u00a0 \u00a0 Content content = ContentMaker.fromMultiModalData(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PartMaker.fromMimeTypeAndData(\"image/png\", readImageFile(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark1.png\")),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"city: Rome, Landmark: the Colosseum\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PartMaker.fromMimeTypeAndData(\"image/png\", readImageFile(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark2.png\")),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"city: Beijing, Landmark: Forbidden City\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PartMaker.fromMimeTypeAndData(\"image/png\", readImageFile(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark3.png\"))\u00a0 \u00a0 \u00a0 );\u00a0 \u00a0 \u00a0 GenerateContentResponse response = model.generateContent(content);\u00a0 \u00a0 \u00a0 String output = ResponseHandler.getText(response);\u00a0 \u00a0 \u00a0 System.out.println(output);\u00a0 \u00a0 }\u00a0 }\u00a0 // Reads the image data from the given URL.\u00a0 public static byte[] readImageFile(String url) throws IOException {\u00a0 \u00a0 URL urlObj = new URL(url);\u00a0 \u00a0 HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();\u00a0 \u00a0 connection.setRequestMethod(\"GET\");\u00a0 \u00a0 int responseCode = connection.getResponseCode();\u00a0 \u00a0 if (responseCode == HttpURLConnection.HTTP_OK) {\u00a0 \u00a0 \u00a0 InputStream inputStream = connection.getInputStream();\u00a0 \u00a0 \u00a0 ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\u00a0 \u00a0 \u00a0 byte[] buffer = new byte[1024];\u00a0 \u00a0 \u00a0 int bytesRead;\u00a0 \u00a0 \u00a0 while ((bytesRead = inputStream.read(buffer)) != -1) {\u00a0 \u00a0 \u00a0 \u00a0 outputStream.write(buffer, 0, bytesRead);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 return outputStream.toByteArray();\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 throw new RuntimeException(\"Error fetching file: \" + responseCode);\u00a0 \u00a0 }\u00a0 }}\n```\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300a\u751f\u6210\u5f0f AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 Go \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u751f\u6210\u5f0f AI Go API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/go/docs/reference/cloud.google.com/go/aiplatform/latest/apiv1?hl=zh-cn) \u3002\n\u5982\u9700\u5411\u751f\u6210\u5f0f AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/vertexai/multimodal-multiple/multiple-multimodal.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"log\"\u00a0 \u00a0 \u00a0 \u00a0 \"net/http\"\u00a0 \u00a0 \u00a0 \u00a0 \"net/url\"\u00a0 \u00a0 \u00a0 \u00a0 \"os\"\u00a0 \u00a0 \u00a0 \u00a0 \"strings\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/vertexai/genai\")func main() {\u00a0 \u00a0 \u00a0 \u00a0 projectID := os.Getenv(\"GOOGLE_CLOUD_PROJECT\")\u00a0 \u00a0 \u00a0 \u00a0 location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 modelName := \"gemini-1.0-pro-vision\"\u00a0 \u00a0 \u00a0 \u00a0 temperature := 0.4\u00a0 \u00a0 \u00a0 \u00a0 if projectID == \"\" {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(\"require environment variable GOOGLE_CLOUD_PROJECT\")\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // construct this multimodal prompt:\u00a0 \u00a0 \u00a0 \u00a0 // [image of colosseum] city: Rome, Landmark: the Colosseum\u00a0 \u00a0 \u00a0 \u00a0 // [image of forbidden city] \u00a0city: Beijing, Landmark: the Forbidden City\u00a0 \u00a0 \u00a0 \u00a0 // [new image]\u00a0 \u00a0 \u00a0 \u00a0 // create prompt image parts\u00a0 \u00a0 \u00a0 \u00a0 // colosseum\u00a0 \u00a0 \u00a0 \u00a0 colosseum, err := partFromImageURL(\"https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark1.png\")\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"unable to read image: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // forbidden city\u00a0 \u00a0 \u00a0 \u00a0 forbiddenCity, err := partFromImageURL(\"https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark2.png\")\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"unable to read image: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // new image\u00a0 \u00a0 \u00a0 \u00a0 newImage, err := partFromImageURL(\"https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark3.png\")\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"unable to read image: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // create a multimodal (multipart) prompt\u00a0 \u00a0 \u00a0 \u00a0 prompt := []genai.Part{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 colosseum,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 genai.Text(\"city: Rome, Landmark: the Colosseum \"),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 forbiddenCity,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 genai.Text(\"city: Beijing, Landmark: the Forbidden City \"),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 newImage,\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // generate the response\u00a0 \u00a0 \u00a0 \u00a0 err = generateMultimodalContent(os.Stdout, prompt, projectID, location, modelName, float32(temperature))\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatalf(\"unable to generate: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }}// generateMultimodalContent provide a generated response using multimodal inputfunc generateMultimodalContent(w io.Writer, parts []genai.Part, projectID, location, modelName string, temperature float32) error {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := genai.NewClient(ctx, projectID, location)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Fatal(err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 model := client.GenerativeModel(modelName)\u00a0 \u00a0 \u00a0 \u00a0 model.SetTemperature(temperature)\u00a0 \u00a0 \u00a0 \u00a0 res, err := model.GenerateContent(ctx, parts...)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"unable to generate contents: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"generated response: %s\\n\", res.Candidates[0].Content.Parts[0])\u00a0 \u00a0 \u00a0 \u00a0 return nil}// partFromImageURL create a multimodal prompt part from an image URLfunc partFromImageURL(image string) (genai.Part, error) {\u00a0 \u00a0 \u00a0 \u00a0 var img genai.Blob\u00a0 \u00a0 \u00a0 \u00a0 imageURL, err := url.Parse(image)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return img, err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 res, err := http.Get(image)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil || res.StatusCode != 200 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return img, err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer res.Body.Close()\u00a0 \u00a0 \u00a0 \u00a0 data, err := io.ReadAll(res.Body)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return img, fmt.Errorf(\"unable to read from http: %v\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 position := strings.LastIndex(imageURL.Path, \".\")\u00a0 \u00a0 \u00a0 \u00a0 if position == -1 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return img, fmt.Errorf(\"couldn't find a period to indicate a file extension\")\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 ext := imageURL.Path[position+1:]\u00a0 \u00a0 \u00a0 \u00a0 img = genai.ImageData(ext, data)\u00a0 \u00a0 \u00a0 \u00a0 return img, nil}\n```\u5728\u5617\u8a66\u6b64\u793a\u4f8b\u4e4b\u524d\uff0c\u8acb\u6309\u7167 [\u300a\u751f\u6210\u5f0f AI \u5feb\u901f\u5165\u9580\uff1a\u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\u300b](https://cloud.google.com/vertex-ai/docs/start/client-libraries?hl=zh-cn) \u4e2d\u7684 C# \u8a2d\u7f6e\u8aaa\u660e\u57f7\u884c\u64cd\u4f5c\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u751f\u6210\u5f0f AI C# API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/dotnet/docs/reference/Google.Cloud.AIPlatform.V1/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411\u751f\u6210\u5f0f AI \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/aiplatform/api/AIPlatform.Samples/MultimodalMultiImage.cs) \n```\nusing Google.Api.Gax.Grpc;using Google.Cloud.AIPlatform.V1;using Google.Protobuf;using System.Collections.Generic;using System.Net.Http;using System.Text;using System.Threading.Tasks;public class MultimodalMultiImage{\u00a0 \u00a0 public async Task<string> GenerateContent(\u00a0 \u00a0 \u00a0 \u00a0 string projectId = \"your-project-id\",\u00a0 \u00a0 \u00a0 \u00a0 string location = \"us-central1\",\u00a0 \u00a0 \u00a0 \u00a0 string publisher = \"google\",\u00a0 \u00a0 \u00a0 \u00a0 string model = \"gemini-1.0-pro-vision\"\u00a0 \u00a0 )\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 var predictionServiceClient = new PredictionServiceClientBuilder\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Endpoint = $\"{location}-aiplatform.googleapis.com\"\u00a0 \u00a0 \u00a0 \u00a0 }.Build();\u00a0 \u00a0 \u00a0 \u00a0 // Images\u00a0 \u00a0 \u00a0 \u00a0 ByteString colosseum = await ReadImageFileAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark1.png\");\u00a0 \u00a0 \u00a0 \u00a0 ByteString forbiddenCity = await ReadImageFileAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark2.png\");\u00a0 \u00a0 \u00a0 \u00a0 ByteString christRedeemer = await ReadImageFileAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"https://storage.googleapis.com/cloud-samples-data/vertex-ai/llm/prompts/landmark3.png\");\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 var content = new Content\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Role = \"USER\"\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 content.Parts.AddRange(new List<Part>()\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InlineData = new()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MimeType = \"image/png\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Data = colosseum\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Text = \"city: Rome, Landmark: the Colosseum\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InlineData = new()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MimeType = \"image/png\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Data = forbiddenCity\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Text = \"city: Beijing, Landmark: Forbidden City\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InlineData = new()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MimeType = \"image/png\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Data = christRedeemer\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 var generateContentRequest = new GenerateContentRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Model = $\"projects/{projectId}/locations/{location}/publishers/{publisher}/models/{model}\"\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 generateContentRequest.Contents.Add(content);\u00a0 \u00a0 \u00a0 \u00a0 // Make the request, returning a streaming response\u00a0 \u00a0 \u00a0 \u00a0 using PredictionServiceClient.StreamGenerateContentStream response = predictionServiceClient.StreamGenerateContent(generateContentRequest);\u00a0 \u00a0 \u00a0 \u00a0 StringBuilder fullText = new();\u00a0 \u00a0 \u00a0 \u00a0 // Read streaming responses from server until complete\u00a0 \u00a0 \u00a0 \u00a0 AsyncResponseStream<GenerateContentResponse> responseStream = response.GetResponseStream();\u00a0 \u00a0 \u00a0 \u00a0 await foreach (GenerateContentResponse responseItem in responseStream)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fullText.Append(responseItem.Candidates[0].Content.Parts[0].Text);\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return fullText.ToString();\u00a0 \u00a0 }\u00a0 \u00a0 private static async Task<ByteString> ReadImageFileAsync(string url)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 using HttpClient client = new();\u00a0 \u00a0 \u00a0 \u00a0 using var response = await client.GetAsync(url);\u00a0 \u00a0 \u00a0 \u00a0 byte[] imageBytes = await response.Content.ReadAsByteArrayAsync();\u00a0 \u00a0 \u00a0 \u00a0 return ByteString.CopyFrom(imageBytes);\u00a0 \u00a0 }}\n```\n\u53e6\u8acb\u53c3\u95b1 [\u51fd\u6578\u8abf\u7528](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/function-calling?hl=zh-cn) \u3002\n\u5982\u9700\u4f7f\u7528 Vertex AI API \u6e2c\u8a66\u51fd\u6578\u63d0\u793a\uff0c\u8acb\u5411\u767c\u4f48\u8005\u6a21\u578b\u7aef\u9ede\u767c\u9001 POST \u8acb\u6c42\u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- \uff1a\u60a8\u7684 [\u9805\u76ee ID](https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=zh-cn#identifiers) \u3002\n\u5982\u9700\u77ad\u89e3\u5176\u4ed6\u5b57\u6bb5\uff0c\u8acb\u67e5\u770b\n [\u8acb\u6c42\u6b63\u6587](#request_body) \n\u8868\u3002\nHTTP \u65b9\u6cd5\u548c\u7db2\u5740\uff1a\n```\nPOST https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/gemini-1.0-pro:streamGenerateContent\n```\n\u8acb\u6c42 JSON \u6b63\u6587\uff1a\n```\n{\n \"contents\": {\n \"role\": \"user\",\n \"parts\": {\n  \"text\": \"Which theaters in Mountain View show Barbie movie?\"\n }\n },\n \"tools\": [ {\n  \"function_declarations\": [  {\n   \"name\": \"find_movies\",\n   \"description\": \"find movie titles currently playing in theaters based on any description, genre, title words, etc.\",\n   \"parameters\": {\n   \"type\": \"object\",\n   \"properties\": {\n    \"location\": {\n    \"type\": \"string\",\n    \"description\": \"The city and state, e.g. San Francisco, CA or a zip code e.g. 95616\"\n    },\n    \"description\": {\n    \"type\": \"string\",\n    \"description\": \"Any kind of description including category or genre, title words, attributes, etc.\"\n    }\n   },\n   \"required\": [    \"description\"\n   ]\n   }\n  },\n  {\n   \"name\": \"find_theaters\",\n   \"description\": \"find theaters based on location and optionally movie title which are is currently playing in theaters\",\n   \"parameters\": {\n   \"type\": \"object\",\n   \"properties\": {\n    \"location\": {\n    \"type\": \"string\",\n    \"description\": \"The city and state, e.g. San Francisco, CA or a zip code e.g. 95616\"\n    },\n    \"movie\": {\n    \"type\": \"string\",\n    \"description\": \"Any movie title\"\n    }\n   },\n   \"required\": [    \"location\"\n   ]\n   }\n  },\n  {\n   \"name\": \"get_showtimes\",\n   \"description\": \"Find the start times for movies playing in a specific theater\",\n   \"parameters\": {\n   \"type\": \"object\",\n   \"properties\": {\n    \"location\": {\n    \"type\": \"string\",\n    \"description\": \"The city and state, e.g. San Francisco, CA or a zip code e.g. 95616\"\n    },\n    \"movie\": {\n    \"type\": \"string\",\n    \"description\": \"Any movie title\"\n    },\n    \"theater\": {\n    \"type\": \"string\",\n    \"description\": \"Name of the theater\"\n    },\n    \"date\": {\n    \"type\": \"string\",\n    \"description\": \"Date for requested showtime\"\n    }\n   },\n   \"required\": [    \"location\",\n    \"movie\",\n    \"theater\",\n    \"date\"\n   ]\n   }\n  }\n  ]\n }\n ]\n}\n```\n\u5982\u9700\u767c\u9001\u8acb\u6c42\uff0c\u8acb\u9078\u64c7\u4ee5\u4e0b\u65b9\u5f0f\u4e4b\u4e00\uff1a\n **\u6ce8\u610f** \uff1a\u4ee5\u4e0b\u547d\u4ee4\u5047\u5b9a\u60a8\u5df2\u4f7f\u7528\u60a8\u7684\u7528\u6236\u8cec\u865f\u901a\u904e\u904b\u884c [gcloud init](https://cloud.google.com/sdk/gcloud/reference/init?hl=zh-cn) \u6216 [gcloud auth login](https://cloud.google.com/sdk/gcloud/reference/auth/login?hl=zh-cn) \u767b\u9304`gcloud`CLI\uff0c\u6216\u8005\u4f7f\u7528\u4e86 [Cloud Shell](https://cloud.google.com/shell/docs?hl=zh-cn) \uff0c\u9019\u6703\u4f7f\u60a8\u81ea\u52d5\u767b\u9304`gcloud`CLI\u3002\u60a8\u53ef\u4ee5\u904b\u884c [gcloud auth list](https://cloud.google.com/sdk/gcloud/reference/auth/list?hl=zh-cn) \u4f86\u6aa2\u67e5\u7576\u524d\u6d3b\u8e8d\u7684\u8cec\u865f\u3002\n\u5c07\u8acb\u6c42\u6b63\u6587\u4fdd\u5b58\u5728\u540d\u7232 `request.json` \u7684\u6587\u4ef6\u4e2d\uff0c\u7136\u5f8c\u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/gemini-1.0-pro:streamGenerateContent\"\n``` **\u6ce8\u610f** \uff1a\u4ee5\u4e0b\u547d\u4ee4\u5047\u5b9a\u60a8\u5df2\u4f7f\u7528\u60a8\u7684\u7528\u6236\u8cec\u865f\u901a\u904e\u904b\u884c [gcloud init](https://cloud.google.com/sdk/gcloud/reference/init?hl=zh-cn) \u6216 [gcloud auth login](https://cloud.google.com/sdk/gcloud/reference/auth/login?hl=zh-cn) \u767b\u9304`gcloud`CLI\uff0c\u6216\u8005\u4f7f\u7528\u4e86 [Cloud Shell](https://cloud.google.com/shell/docs?hl=zh-cn) \uff0c\u9019\u6703\u4f7f\u60a8\u81ea\u52d5\u767b\u9304`gcloud`CLI\u3002\u60a8\u53ef\u4ee5\u904b\u884c [gcloud auth list](https://cloud.google.com/sdk/gcloud/reference/auth/list?hl=zh-cn) \u4f86\u6aa2\u67e5\u7576\u524d\u6d3b\u8e8d\u7684\u8cec\u865f\u3002\n\u5c07\u8acb\u6c42\u6b63\u6587\u4fdd\u5b58\u5728\u540d\u7232 `request.json` \u7684\u6587\u4ef6\u4e2d\uff0c\u7136\u5f8c\u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/gemini-1.0-pro:streamGenerateContent\" | Select-Object -Expand Content\n```\n\u60a8\u61c9\u8a72\u6703\u6536\u5230\u985e\u4f3c [\u793a\u4f8b\u97ff\u61c9](#sample_response) \u7684 JSON \u97ff\u61c9\u3002\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u6216\u66f4\u65b0 Python\uff0c\u8acb\u53c3\u95b1 [\u5b89\u88dd Python \u7248 Vertex AI SDK](https://cloud.google.com/vertex-ai/docs/start/use-vertex-ai-python-sdk?hl=zh-cn) \u3002  \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [   Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/aiplatform/latest?hl=zh-cn) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/generative_ai/function_calling.py) \n```\nimport vertexaifrom vertexai.generative_models import (\u00a0 \u00a0 Content,\u00a0 \u00a0 FunctionDeclaration,\u00a0 \u00a0 GenerativeModel,\u00a0 \u00a0 Part,\u00a0 \u00a0 Tool,)def generate_function_call(prompt: str, project_id: str, location: str) -> tuple:\u00a0 \u00a0 # Initialize Vertex AI\u00a0 \u00a0 vertexai.init(project=project_id, location=location)\u00a0 \u00a0 # Initialize Gemini model\u00a0 \u00a0 model = GenerativeModel(\"gemini-1.0-pro\")\u00a0 \u00a0 # Specify a function declaration and parameters for an API request\u00a0 \u00a0 get_current_weather_func = FunctionDeclaration(\u00a0 \u00a0 \u00a0 \u00a0 name=\"get_current_weather\",\u00a0 \u00a0 \u00a0 \u00a0 description=\"Get the current weather in a given location\",\u00a0 \u00a0 \u00a0 \u00a0 # Function parameters are specified in OpenAPI JSON schema format\u00a0 \u00a0 \u00a0 \u00a0 parameters={\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"object\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"Location\"}},\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 )\u00a0 \u00a0 # Define a tool that includes the above get_current_weather_func\u00a0 \u00a0 weather_tool = Tool(\u00a0 \u00a0 \u00a0 \u00a0 function_declarations=[get_current_weather_func],\u00a0 \u00a0 )\u00a0 \u00a0 # Define the user's prompt in a Content object that we can reuse in model calls\u00a0 \u00a0 user_prompt_content = Content(\u00a0 \u00a0 \u00a0 \u00a0 role=\"user\",\u00a0 \u00a0 \u00a0 \u00a0 parts=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Part.from_text(prompt),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 )\u00a0 \u00a0 # Send the prompt and instruct the model to generate content using the Tool that you just created\u00a0 \u00a0 response = model.generate_content(\u00a0 \u00a0 \u00a0 \u00a0 user_prompt_content,\u00a0 \u00a0 \u00a0 \u00a0 generation_config={\"temperature\": 0},\u00a0 \u00a0 \u00a0 \u00a0 tools=[weather_tool],\u00a0 \u00a0 )\u00a0 \u00a0 response_function_call_content = response.candidates[0].content\u00a0 \u00a0 # Check the function name that the model responded with, and make an API call to an external system\u00a0 \u00a0 if (\u00a0 \u00a0 \u00a0 \u00a0 response.candidates[0].content.parts[0].function_call.name\u00a0 \u00a0 \u00a0 \u00a0 == \"get_current_weather\"\u00a0 \u00a0 ):\u00a0 \u00a0 \u00a0 \u00a0 # Extract the arguments to use in your API call\u00a0 \u00a0 \u00a0 \u00a0 location = (\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response.candidates[0].content.parts[0].function_call.args[\"location\"]\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 # Here you can use your preferred method to make an API request to fetch the current weather, for example:\u00a0 \u00a0 \u00a0 \u00a0 # api_response = requests.post(weather_api_url, data={\"location\": location})\u00a0 \u00a0 \u00a0 \u00a0 # In this example, we'll use synthetic data to simulate a response payload from an external API\u00a0 \u00a0 \u00a0 \u00a0 api_response = \"\"\"{ \"location\": \"Boston, MA\", \"temperature\": 38, \"description\": \"Partly Cloudy\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"icon\": \"partly-cloudy\", \"humidity\": 65, \"wind\": { \"speed\": 10, \"direction\": \"NW\" } }\"\"\"\u00a0 \u00a0 # Return the API response to Gemini so it can generate a model response or request another function call\u00a0 \u00a0 response = model.generate_content(\u00a0 \u00a0 \u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 user_prompt_content, \u00a0# User prompt\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response_function_call_content, \u00a0# Function call response\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Content(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 role=\"function\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 parts=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Part.from_function_response(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 name=\"get_current_weather\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response={\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"content\": api_response, \u00a0# Return the API response to Gemini\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 tools=[weather_tool],\u00a0 \u00a0 )\u00a0 \u00a0 # Get the model summary response\u00a0 \u00a0 summary = response.candidates[0].content.parts[0].text\u00a0 \u00a0 return summary, response\n```\n## \u97ff\u61c9\u793a\u4f8b\n```\ndata: {\"candidates\": [{\"content\": {\"role\": \"model\",\"parts\": [{\"text\": \"Ingredients:\\n\\n- 3 ripe bananas, mashed\\n- 1 cup sugar\"}]},\"safetyRatings\": [{\"category\": \"HARM_CATEGORY_HARASSMENT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_HATE_SPEECH\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\"probability\": \"NEGLIGIBLE\"}]}]}data: {\"candidates\": [{\"content\": {\"role\": \"model\",\"parts\": [{\"text\": \"\\n- 1/2 cup (1 stick) unsalted butter, softened\\n\"}]},\"safetyRatings\": [{\"category\": \"HARM_CATEGORY_HARASSMENT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_HATE_SPEECH\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\"probability\": \"NEGLIGIBLE\"}]}]}data: {\"candidates\": [{\"content\": {\"role\": \"model\",\"parts\": [{\"text\": \"- 2 large eggs\\n- 2 cups all-purpose flour\\n- 1 teaspoon baking soda\\n- 1/2 teaspoon salt\\n- \"}]},\"safetyRatings\": [{\"category\": \"HARM_CATEGORY_HARASSMENT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_HATE_SPEECH\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\"probability\": \"NEGLIGIBLE\"}]}]}data: {\"candidates\": [{\"content\": {\"role\": \"model\",\"parts\": [{\"text\": \"1/2 cup chopped walnuts (optional)\\n\\nInstructions:\\n\\n1. Preheat oven to 350 degrees F (175 degrees C). Grease\"}]},\"safetyRatings\": [{\"category\": \"HARM_CATEGORY_HARASSMENT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_HATE_SPEECH\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\"probability\": \"NEGLIGIBLE\"}]}]}data: {\"candidates\": [{\"content\": {\"role\": \"model\",\"parts\": [{\"text\": \" and flour a 9x5 inch loaf pan.\\n2. In a large bowl, cream together the butter and sugar until light and fluffy. Beat in the eggs one at a time, then stir in the mashed bananas.\\n3\"}]},\"safetyRatings\": [{\"category\": \"HARM_CATEGORY_HARASSMENT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_HATE_SPEECH\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\"probability\": \"NEGLIGIBLE\"}],\"citationMetadata\": {\"citations\": [{\"startIndex\": 322,\"endIndex\": 451,\"uri\": \"https://discover.texasrealfood.com/texas-home-cooking/whats-in-season-plums-exploring-health-benefits-varieties-and-recipes\"}]}}]}data: {\"candidates\": [{\"content\": {\"role\": \"model\",\"parts\": [{\"text\": \". In a separate bowl, whisk together the flour, baking soda, and salt. Gradually add the dry ingredients to the wet ingredients, mixing until just combined. Fold in the walnuts, if desired.\\n4. Pour the batter into the\"}]},\"safetyRatings\": [{\"category\": \"HARM_CATEGORY_HARASSMENT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_HATE_SPEECH\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\"probability\": \"NEGLIGIBLE\"}],\"citationMetadata\": {\"citations\": [{\"startIndex\": 472,\"endIndex\": 614,\"uri\": \"https://commandame.com/urban-cookhouse-half-baked-cookie-recipe/\"}]}}]}data: {\"candidates\": [{\"content\": {\"role\": \"model\",\"parts\": [{\"text\": \" prepared loaf pan and bake for 50-60 minutes, or until a toothpick inserted into the center comes out clean.\\n5. Let the bread cool in the pan for 10 minutes before turning it out onto a wire rack to cool completely.\"}]},\"finishReason\": \"STOP\",\"safetyRatings\": [{\"category\": \"HARM_CATEGORY_HARASSMENT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_HATE_SPEECH\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\"probability\": \"NEGLIGIBLE\"}],\"citationMetadata\": {\"citations\": [{\"startIndex\": 666,\"endIndex\": 796,\"uri\": \"https://dessertdonelight.com/healthy-hawaiian-banana-bread/\"},{\"startIndex\": 728,\"endIndex\": 851,\"uri\": \"https://earlsgrocery.com/gluten-free-bread/gluten-free-yeast-free-bread-healthy-and-nutition\"}]}}],\"usageMetadata\": {\"promptTokenCount\": 8,\"candidatesTokenCount\": 245,\"totalTokenCount\": 253}}\n```\n```\ndata: {\"candidates\": [{\"content\": {\"role\": \"model\",\"parts\": [{\"text\": \"Avast there, landlubber! Ye be mistaken. I be but a\"}]},\"safetyRatings\": [{\"category\": \"HARM_CATEGORY_HARASSMENT\",\"probability\": \"LOW\"},{\"category\": \"HARM_CATEGORY_HATE_SPEECH\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\"probability\": \"NEGLIGIBLE\"}]}]}data: {\"candidates\": [{\"content\": {\"role\": \"model\",\"parts\": [{\"text\": \" humble pirate of the seven seas, brought to life by the magic of artificial intelligence\"}]},\"safetyRatings\": [{\"category\": \"HARM_CATEGORY_HARASSMENT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_HATE_SPEECH\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\"probability\": \"NEGLIGIBLE\"}]}]}data: {\"candidates\": [{\"content\": {\"role\": \"model\",\"parts\": [{\"text\": \". I be no real-life pirate, but I be mighty good at pretendin'!\"}]},\"finishReason\": \"STOP\",\"safetyRatings\": [{\"category\": \"HARM_CATEGORY_HARASSMENT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_HATE_SPEECH\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\"probability\": \"NEGLIGIBLE\"}]}],\"usageMetadata\": {\"promptTokenCount\": 23,\"candidatesTokenCount\": 50,\"totalTokenCount\": 73}}\n```\n```\n[{\u00a0 \"candidates\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"content\": {\u00a0 \u00a0 \u00a0 \u00a0 \"role\": \"model\",\u00a0 \u00a0 \u00a0 \u00a0 \"parts\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"text\": \" A daisy is growing up through a pile of brown and yellow fall leaves\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"finishReason\": \"STOP\",\u00a0 \u00a0 \u00a0 \"safetyRatings\": [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"category\": \"HARM_CATEGORY_HARASSMENT\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"probability\": \"NEGLIGIBLE\"\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"probability\": \"NEGLIGIBLE\"\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"probability\": \"NEGLIGIBLE\"\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"probability\": \"NEGLIGIBLE\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ],\u00a0 \"usageMetadata\": {\u00a0 \u00a0 \"promptTokenCount\": 262,\u00a0 \u00a0 \"candidatesTokenCount\": 14,\u00a0 \u00a0 \"totalTokenCount\": 276\u00a0 }}]\n```\n```\n[{\u00a0 \"candidates\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"content\": {\u00a0 \u00a0 \u00a0 \u00a0 \"parts\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"functionCall\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"find_theaters\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"args\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"movie\": \"Barbie\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"location\": \"Mountain View, CA\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"finishReason\": \"STOP\",\u00a0 \u00a0 \u00a0 \"safetyRatings\": [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"category\": \"HARM_CATEGORY_HARASSMENT\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"probability\": \"NEGLIGIBLE\"\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"probability\": \"NEGLIGIBLE\"\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"probability\": \"NEGLIGIBLE\"\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"probability\": \"NEGLIGIBLE\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ],\u00a0 \"usageMetadata\": {\u00a0 \u00a0 \"promptTokenCount\": 9,\u00a0 \u00a0 \"totalTokenCount\": 9\u00a0 }}]\n```\n## \u5f8c\u7e8c\u6b65\u9a5f\n\u77ad\u89e3\u5982\u4f55\u4f7f\u7528 Vertex AI Gemini API\uff1a\n- \u77ad\u89e3\u5982\u4f55 [\u767c\u9001\u804a\u5929\u63d0\u793a\u8acb\u6c42](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/send-chat-prompts-gemini?hl=zh-cn) \u3002\n- \u77ad\u89e3\u5982\u4f55 [\u767c\u9001\u591a\u6a21\u614b\u63d0\u793a\u8acb\u6c42](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/send-multimodal-prompts?hl=zh-cn) \u3002\n- \u77ad\u89e3\u5982\u4f55 [\u8abf\u7528\u51fd\u6578](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/function-calling?hl=zh-cn) \u3002\n- \u77ad\u89e3\u5982\u4f55 [\u7372\u53d6\u8a5e\u5143\u6578](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/get-token-count?hl=zh-cn) \u3002\n- \u77ad\u89e3\u5982\u4f55 [\u914d\u7f6e\u5b89\u5168\u5c6c\u6027](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/configure-safety-attributes?hl=zh-cn) \u3002", "guide": "Generative AI on Vertex AI"}