{"title": "Generative AI on Vertex AI - Test chat prompts", "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/chat/test-chat-prompts", "abstract": "# Generative AI on Vertex AI - Test chat prompts\nVertex AI lets you use Vertex AI Studio to test prompts in the Google Cloud console, the Vertex AI API, and the Vertex AI SDK for Python. This page shows you how to test chat prompts by using any of these interfaces.\nTo learn more about how to design chat prompts, see [Chat prompts](/vertex-ai/generative-ai/docs/chat/chat-prompts) .\n", "content": "## Test chat prompts\nTo test chat prompts, choose one of the following methods.\nTo test a text prompt by using the Vertex AI API, send a POST request to the publisher model endpoint.\nBefore using any of the request data, make the following replacements:- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : Optional. Context can be instructions that you give to the model on how it should respond or information that it uses or references to generate a response. Add contextual information in your prompt when you need to give information to the model, or restrict the boundaries of the responses to only what's within the context.\n- Optional examples: Examples are a list of structured messages to the model to learn how to respond to the conversation.\n- : Example of a message.\n- : Example of the ideal response.\n- Messages: Conversation history provided to the model in a structured alternate-author form. Messages appear in chronological order: oldest first, newest last. When the history of messages causes the input to exceed the maximum length, the oldest messages are removed until the entire prompt is within the allowed limit. There must be an odd number of messages (AUTHOR-CONTENT pairs) for the model to generate a response.\n- : The author of the message.\n- : The content of the message.\n- : The temperature is used for sampling during response generation, which occurs when`topP`and`topK`are applied. Temperature controls the degree of randomness in token selection. Lower temperatures are good for prompts that require a less open-ended or creative response, while higher temperatures can lead to more diverse or creative results. A temperature of`0`means that the highest probability tokens are always selected. In this case, responses for a given prompt are mostly deterministic, but a small amount of variation is still possible.If the model returns a response that's too generic, too short, or the model gives a fallback response, try increasing the temperature.\n- : Maximum number of tokens that can be generated in the response. A token is approximately four characters. 100 tokens correspond to roughly 60-80 words.Specify a lower value for shorter responses and a higher value for potentially longer responses.\n- : Top-P changes how the model selects tokens for output. Tokens are selected from the most (see top-K) to least probable until the sum of their probabilities equals the top-P value. For example, if tokens A, B, and C have a probability of 0.3, 0.2, and 0.1 and the top-P value is`0.5`, then the model will select either A or B as the next token by using temperature and excludes C as a candidate.Specify a lower value for less random responses and a higher value for more random responses.\n- : Top-K changes how the model selects tokens for output. A top-K of`1`means the next selected token is the most probable among all tokens in the model's vocabulary (also called greedy decoding), while a top-K of`3`means that the next token is selected from among the three most probable tokens by using temperature.For each token selection step, the top-K tokens with the highest probabilities are sampled. Then tokens are further filtered based on top-P with the final token selected using temperature sampling.Specify a lower value for less random responses and a higher value for more random responses.\nHTTP method and URL:\n```\nPOST https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/chat-bison:predict\n```\nRequest JSON body:\n```\n{\n \"instances\": [{\n  \"context\": \"CONTEXT\",\n  \"examples\": [  { \n   \"input\": {\"content\": \"EXAMPLE_INPUT\"},\n   \"output\": {\"content\": \"EXAMPLE_OUTPUT\"}\n  }],\n  \"messages\": [  { \n   \"author\": \"AUTHOR\",\n   \"content\": \"CONTENT\",\n  }],\n }],\n \"parameters\": {\n \"temperature\": TEMPERATURE,\n \"maxOutputTokens\": MAX_OUTPUT_TOKENS,\n \"topP\": TOP_P,\n \"topK\": TOP_K\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/chat-bison:predict\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/chat-bison:predict\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following.```\nMODEL_ID=\"chat-bison\"PROJECT_ID=PROJECT_IDcurl \\-X POST \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\https://us-central1-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/us-central1/publishers/google/models/${MODEL_ID}:predict -d \\'{\u00a0 \"instances\": [{\u00a0 \u00a0 \u00a0 \"context\": \u00a0\"My name is Ned. You are my personal assistant. My favorite movies are Lord of the Rings and Hobbit.\",\u00a0 \u00a0 \u00a0 \"examples\": [ {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"input\": {\"content\": \"Who do you work for?\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"output\": {\"content\": \"I work for Ned.\"}\u00a0 \u00a0 \u00a0 \u00a0},\u00a0 \u00a0 \u00a0 \u00a0{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"input\": {\"content\": \"What do I like?\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"output\": {\"content\": \"Ned likes watching movies.\"}\u00a0 \u00a0 \u00a0 \u00a0}],\u00a0 \u00a0 \u00a0 \"messages\": [\u00a0 \u00a0 \u00a0 \u00a0{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"author\": \"user\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"content\": \"Are my favorite movies based on a book series?\",\u00a0 \u00a0 \u00a0 \u00a0},\u00a0 \u00a0 \u00a0 \u00a0{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"author\": \"bot\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"content\": \"Yes, your favorite movies, The Lord of the Rings and The Hobbit, are based on book series by J.R.R. Tolkien.\",\u00a0 \u00a0 \u00a0 \u00a0},\u00a0 \u00a0 \u00a0 \u00a0{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"author\": \"user\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"content\": \"When were these books published?\",\u00a0 \u00a0 \u00a0 \u00a0}],\u00a0 \u00a0}],\u00a0 \"parameters\": {\u00a0 \u00a0 \"temperature\": 0.3,\u00a0 \u00a0 \"maxOutputTokens\": 200,\u00a0 \u00a0 \"topP\": 0.8,\u00a0 \u00a0 \"topK\": 40\u00a0 }}'\n```To learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/generative_ai/chat.py) \n```\nfrom vertexai.language_models import ChatModel, InputOutputTextPairdef science_tutoring(temperature: float = 0.2) -> None:\u00a0 \u00a0 chat_model = ChatModel.from_pretrained(\"chat-bison@001\")\u00a0 \u00a0 # TODO developer - override these parameters as needed:\u00a0 \u00a0 parameters = {\u00a0 \u00a0 \u00a0 \u00a0 \"temperature\": temperature, \u00a0# Temperature controls the degree of randomness in token selection.\u00a0 \u00a0 \u00a0 \u00a0 \"max_output_tokens\": 256, \u00a0# Token limit determines the maximum amount of text output.\u00a0 \u00a0 \u00a0 \u00a0 \"top_p\": 0.95, \u00a0# Tokens are selected from most probable to least until the sum of their probabilities equals the top_p value.\u00a0 \u00a0 \u00a0 \u00a0 \"top_k\": 40, \u00a0# A top_k of 1 means the selected token is the most probable among all tokens.\u00a0 \u00a0 }\u00a0 \u00a0 chat = chat_model.start_chat(\u00a0 \u00a0 \u00a0 \u00a0 context=\"My name is Miles. You are an astronomer, knowledgeable about the solar system.\",\u00a0 \u00a0 \u00a0 \u00a0 examples=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputOutputTextPair(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input_text=\"How many moons does Mars have?\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 output_text=\"The planet Mars has two moons, Phobos and Deimos.\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 )\u00a0 \u00a0 response = chat.send_message(\u00a0 \u00a0 \u00a0 \u00a0 \"How many planets are there in the solar system?\", **parameters\u00a0 \u00a0 )\u00a0 \u00a0 print(f\"Response from Model: {response.text}\")\u00a0 \u00a0 return response\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/predict-chat-prompt.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION';const aiplatform = require('@google-cloud/aiplatform');// Imports the Google Cloud Prediction service clientconst {PredictionServiceClient} = aiplatform.v1;// Import the helper module for converting arbitrary protobuf.Value objects.const {helpers} = aiplatform;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: 'us-central1-aiplatform.googleapis.com',};const publisher = 'google';const model = 'chat-bison@001';// Instantiates a clientconst predictionServiceClient = new PredictionServiceClient(clientOptions);async function callPredict() {\u00a0 // Configure the parent resource\u00a0 const endpoint = `projects/${project}/locations/${location}/publishers/${publisher}/models/${model}`;\u00a0 const prompt = {\u00a0 \u00a0 context:\u00a0 \u00a0 \u00a0 'My name is Miles. You are an astronomer, knowledgeable about the solar system.',\u00a0 \u00a0 examples: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 input: {content: 'How many moons does Mars have?'},\u00a0 \u00a0 \u00a0 \u00a0 output: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 content: 'The planet Mars has two moons, Phobos and Deimos.',\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 \u00a0 messages: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 author: 'user',\u00a0 \u00a0 \u00a0 \u00a0 content: 'How many planets are there in the solar system?',\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 };\u00a0 const instanceValue = helpers.toValue(prompt);\u00a0 const instances = [instanceValue];\u00a0 const parameter = {\u00a0 \u00a0 temperature: 0.2,\u00a0 \u00a0 maxOutputTokens: 256,\u00a0 \u00a0 topP: 0.95,\u00a0 \u00a0 topK: 40,\u00a0 };\u00a0 const parameters = helpers.toValue(parameter);\u00a0 const request = {\u00a0 \u00a0 endpoint,\u00a0 \u00a0 instances,\u00a0 \u00a0 parameters,\u00a0 };\u00a0 // Predict request\u00a0 const [response] = await predictionServiceClient.predict(request);\u00a0 console.log('Get chat prompt response');\u00a0 const predictions = response.predictions;\u00a0 console.log('\\tPredictions :');\u00a0 for (const prediction of predictions) {\u00a0 \u00a0 console.log(`\\t\\tPrediction : ${JSON.stringify(prediction)}`);\u00a0 }}callPredict();\n```Before trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/PredictChatPromptSample.java) \n```\nimport com.google.cloud.aiplatform.v1beta1.EndpointName;import com.google.cloud.aiplatform.v1beta1.PredictResponse;import com.google.cloud.aiplatform.v1beta1.PredictionServiceClient;import com.google.cloud.aiplatform.v1beta1.PredictionServiceSettings;import com.google.protobuf.Value;import com.google.protobuf.util.JsonFormat;import java.io.IOException;import java.util.ArrayList;import java.util.List;// Send a Predict request to a large language model to test a chat promptpublic class PredictChatPromptSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String instance =\u00a0 \u00a0 \u00a0 \u00a0 \"{\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \\\"context\\\": \u00a0\\\"My name is Ned. You are my personal assistant. My favorite movies\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" are Lord of the Rings and Hobbit.\\\",\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \\\"examples\\\": [ { \\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0 \u00a0 \\\"input\\\": {\\\"content\\\": \\\"Who do you work for?\\\"},\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0 \u00a0 \\\"output\\\": {\\\"content\\\": \\\"I work for Ned.\\\"}\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0},\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0{ \\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0 \u00a0 \\\"input\\\": {\\\"content\\\": \\\"What do I like?\\\"},\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0 \u00a0 \\\"output\\\": {\\\"content\\\": \\\"Ned likes watching movies.\\\"}\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0}],\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \\\"messages\\\": [\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0{ \\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0 \u00a0 \\\"author\\\": \\\"user\\\",\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0 \u00a0 \\\"content\\\": \\\"Are my favorite movies based on a book series?\\\"\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0}]\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"}\";\u00a0 \u00a0 String parameters =\u00a0 \u00a0 \u00a0 \u00a0 \"{\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"temperature\\\": 0.3,\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"maxDecodeSteps\\\": 200,\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"topP\\\": 0.8,\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"topK\\\": 40\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"}\";\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String publisher = \"google\";\u00a0 \u00a0 String model = \"chat-bison@001\";\u00a0 \u00a0 predictChatPrompt(instance, parameters, project, publisher, model);\u00a0 }\u00a0 static void predictChatPrompt(\u00a0 \u00a0 \u00a0 String instance, String parameters, String project, String publisher, String model)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 PredictionServiceSettings predictionServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 PredictionServiceSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEndpoint(\"us-central1-aiplatform.googleapis.com:443\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests.\u00a0 \u00a0 try (PredictionServiceClient predictionServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 PredictionServiceClient.create(predictionServiceSettings)) {\u00a0 \u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 \u00a0 final EndpointName endpointName =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EndpointName.ofProjectLocationPublisherModelName(project, location, publisher, model);\u00a0 \u00a0 \u00a0 Value.Builder instanceValue = Value.newBuilder();\u00a0 \u00a0 \u00a0 JsonFormat.parser().merge(instance, instanceValue);\u00a0 \u00a0 \u00a0 List<Value> instances = new ArrayList<>();\u00a0 \u00a0 \u00a0 instances.add(instanceValue.build());\u00a0 \u00a0 \u00a0 Value.Builder parameterValueBuilder = Value.newBuilder();\u00a0 \u00a0 \u00a0 JsonFormat.parser().merge(parameters, parameterValueBuilder);\u00a0 \u00a0 \u00a0 Value parameterValue = parameterValueBuilder.build();\u00a0 \u00a0 \u00a0 PredictResponse predictResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 predictionServiceClient.predict(endpointName, instances, parameterValue);\u00a0 \u00a0 \u00a0 System.out.println(\"Predict Response\");\u00a0 \u00a0 }\u00a0 }}\n```Before trying this sample, follow the C# setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI C# API reference documentation](/dotnet/docs/reference/Google.Cloud.AIPlatform.V1/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/aiplatform/api/AIPlatform.Samples/PredictChatPromptSample.cs) \n```\nusing Google.Cloud.AIPlatform.V1;using Newtonsoft.Json;using System;using System.Collections.Generic;using System.Linq;using Value = Google.Protobuf.WellKnownTypes.Value;public class PredictChatPromptSample{\u00a0 \u00a0 public string PredictChatPrompt(\u00a0 \u00a0 \u00a0 \u00a0 string projectId = \"your-project-id\",\u00a0 \u00a0 \u00a0 \u00a0 string locationId = \"us-central1\",\u00a0 \u00a0 \u00a0 \u00a0 string publisher = \"google\",\u00a0 \u00a0 \u00a0 \u00a0 string model = \"chat-bison@001\"\u00a0 \u00a0 )\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Initialize client that will be used to send requests.\u00a0 \u00a0 \u00a0 \u00a0 // This client only needs to be created once,\u00a0 \u00a0 \u00a0 \u00a0 // and can be reused for multiple requests.\u00a0 \u00a0 \u00a0 \u00a0 var client = new PredictionServiceClientBuilder\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Endpoint = $\"{locationId}-aiplatform.googleapis.com\"\u00a0 \u00a0 \u00a0 \u00a0 }.Build();\u00a0 \u00a0 \u00a0 \u00a0 // Configure the parent resource.\u00a0 \u00a0 \u00a0 \u00a0 var endpoint = EndpointName.FromProjectLocationPublisherModel(projectId, locationId, publisher, model);\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s).\u00a0 \u00a0 \u00a0 \u00a0 var prompt = \"How many planets are there in the solar system?\";\u00a0 \u00a0 \u00a0 \u00a0 // You can construct Protobuf from JSON.\u00a0 \u00a0 \u00a0 \u00a0 var instanceJson = JsonConvert.SerializeObject(new\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 context = \"My name is Miles. You are an astronomer, knowledgeable about the solar system.\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 examples = new[]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input = new { content = \"How many moons does Mars have?\" },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 output = new { content = \"The planet Mars has two moons, Phobos and Deimos.\" }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 messages = new[]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 author = \"user\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 content = prompt\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 var instance = Value.Parser.ParseJson(instanceJson);\u00a0 \u00a0 \u00a0 \u00a0 var instances = new List<Value>\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 instance\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // You can construct Protobuf from JSON.\u00a0 \u00a0 \u00a0 \u00a0 var parametersJson = JsonConvert.SerializeObject(new\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 temperature = 0.3,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 maxDecodeSteps = 200,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 topP = 0.8,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 topK = 40\u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 var parameters = Value.Parser.ParseJson(parametersJson);\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 var response = client.Predict(endpoint, instances, parameters);\u00a0 \u00a0 \u00a0 \u00a0 // Parse the response and return the content.\u00a0 \u00a0 \u00a0 \u00a0 var content = response.Predictions.First().StructValue.Fields[\"candidates\"].ListValue.Values[0].StructValue.Fields[\"content\"].StringValue;\u00a0 \u00a0 \u00a0 \u00a0 Console.WriteLine($\"Content: {content}\");\u00a0 \u00a0 \u00a0 \u00a0 return content;\u00a0 \u00a0 }}\n```To use the Vertex AI Studio to test a chat prompt in the Google Cloud console, do the following:- In the Vertex AI section of the Google Cloud console, go to  the **Vertex AI Studio** page. [Go to Vertex AI Studio](https://console.cloud.google.com/vertex-ai/generative/language) \n- Click the **Get started** tab.\n- Clickadd **Text chat** .\n- Configure the prompt as follows:- **Context** : Enter instructions for the task that you want the  model to perform and include any contextual information for the model  to reference.\n- **Examples** : For few-shot prompts, add input-output examples that  that exhibit the behavioral patterns for the model to imitate.- Configure the model and parameters:- **Model** : Select the model that you want to use.\n- **Temperature** : Use the slider or textbox to enter a value for  temperature.The temperature is used for sampling during response generation, which occurs when`topP`and`topK`are applied. Temperature controls the degree of randomness in token selection. Lower temperatures are good for prompts that require a less open-ended or creative response, while higher temperatures can lead to more diverse or creative results. A temperature of`0`means that the highest probability tokens are always selected. In this case, responses for a given prompt are mostly deterministic, but a small amount of variation is still possible.If the model returns a response that's too generic, too short, or the model gives a fallback response, try increasing the temperature.\n- **Token limit** : Use the slider or textbox to enter a value for the  max output limit.Maximum number of tokens that can be generated in the response. A token is approximately four characters. 100 tokens correspond to roughly 60-80 words.Specify a lower value for shorter responses and a higher value for potentially longer responses.\n- **Top-K** : Use the slider or textbox to enter a value for top-K.Top-K changes how the model selects tokens for output. A top-K of`1`means the next selected token is the most probable among all tokens in the model's vocabulary (also called greedy decoding), while a top-K of`3`means that the next token is selected from among the three most probable tokens by using temperature.For each token selection step, the top-K tokens with the highest probabilities are sampled. Then tokens are further filtered based on top-P with the final token selected using temperature sampling.Specify a lower value for less random responses and a higher value for more random responses.\n- **Top-P** : Use the slider or textbox to enter a value for top-P.  Tokens are selected from most probable to the least until the sum of their  probabilities equals the value of top-P. For the least variable results,  set top-P to`0`.\n- Enter a message in the message box to start a conversation with the chatbot. The chatbot uses the previous messages as context for new responses.\n- Optional: To save your prompt to **My prompts** , clicksave_alt **Save** .\n- Optional: To get the Python code or a curl command for your prompt, clickcode **View code** .\n- Optional: To clear all previous messages, clickdelete **Clear conversation**\n## Stream response from chat model\nTo view sample code requests and responses using the REST API, see [Examples using the REST API](/vertex-ai/generative-ai/docs/learn/streaming#rest) .\nTo view sample code requests and responses using the Vertex AI SDK for Python, see [Examples using Vertex AI SDK for Python](/vertex-ai/generative-ai/docs/learn/streaming#sdk) .\n## What's next\n- Learn how to [tune a foundation model](/vertex-ai/generative-ai/docs/models/tune-models) .\n- Learn about [responsible AI best practices and Vertex AI's safety filters](/vertex-ai/generative-ai/docs/learn/responsible-ai) .", "guide": "Generative AI on Vertex AI"}