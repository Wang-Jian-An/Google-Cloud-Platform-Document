{"title": "Generative AI on Vertex AI - Base64 encode and decode files", "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/image/base64-encode", "abstract": "# Generative AI on Vertex AI - Base64 encode and decode files\n", "content": "## Base64 encode images\nTo make image generation requests you must send image data as [Base64 encoded](https://en.wikipedia.org/wiki/Base64) text.\n## Using the command line\nWithin a gRPC request, you can simply write binary data out directly; however, JSON is used when making a REST request. JSON is a text format that does not directly support binary data, so you will need to convert such binary data into text using [Base64](https://en.wikipedia.org/wiki/Base64) encoding.\nMost development environments contain a native `base64` utility to encode a binary into ASCII text data. To encode a file:\nEncode the file using the `base64` command line tool, making sure to  prevent line-wrapping by using the `-w 0` flag:\n```\nbase64 INPUT_FILE -w 0 > OUTPUT_FILE\n```\nEncode the file using the `base64` command line tool:\n```\nbase64 -i INPUT_FILE -o OUTPUT_FILE\n```\nEncode the file using the `Base64.exe` tool:\n```\nBase64.exe -e INPUT_FILE > OUTPUT_FILE\n```\nEncode the file using the `Convert.ToBase64String` method:\n```\n[Convert]::ToBase64String([IO.File]::ReadAllBytes(\"./INPUT_FILE\")) > OUTPUT_FILE\n```\nCreate a JSON request file, inlining the base64-encoded data:\n```\n{\u00a0 \"instances\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"prompt\": \"TEXT_PROMPT\",\u00a0 \u00a0 \u00a0 \"image\": {\u00a0 \u00a0 \u00a0 \u00a0 \"bytes_base64_encoded\": \"B64_BASE_IMAGE\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ]}\n```\n## Using client libraries\nEmbedding binary data into requests through text editors is neither desirable or practical. In practice, you will be embedding base64 encoded files within client code. All supported programming languages have built-in mechanisms for base64 encoding content.\n```\n# Import the base64 encoding library.import base64# Pass the image data to an encoding function.def encode_image(image):\u00a0 \u00a0 with open(image, \"rb\") as image_file:\u00a0 \u00a0 \u00a0 \u00a0 encoded_string = base64.b64encode(image_file.read())\u00a0 \u00a0 return encoded_string\n```\n```\n// Read the file into memory.var fs = require('fs');var imageFile = fs.readFileSync('/path/to/file');// Convert the image data to a Buffer and base64 encode it.var encoded = Buffer.from(imageFile).toString('base64');\n```\n```\n// Import the Base64 encoding library.import org.apache.commons.codec.binary.Base64;// Encode the image.byte[] imageData = Base64.encodeBase64(imageFile.getBytes());String encodedString = Base64.getEncoder().encodeToString(imageData);\n```\n```\nimport (\u00a0 \u00a0 \"bufio\"\u00a0 \u00a0 \"encoding/base64\"\u00a0 \u00a0 \"io\"\u00a0 \u00a0 \"os\")// Open image file.f, _ := os.Open(\"image.jpg\")// Read entire image into byte slice.reader := bufio.NewReader(f)content, _ := io.ReadAll(reader)// Encode image as base64.base64.StdEncoding.EncodeToString(content)\n```\n## Base64 decode images\nAPI requests return generated or edited images as base64-encoded strings. You can use the following client library samples to decode this data and save it locally as an image file.\n```\n# Import the base64 encoding library.import base64# Pass the base64 encoded image data to a decoding function and save image file.def decode_image(b64_encoded_string):\u00a0 \u00a0with open(\"b64DecodedImage.png\", \"wb\") as fh:\u00a0 \u00a0 \u00a0fh.write(base64.decodebytes(b64_encoded_string))\n```\n```\nvar fs = require('fs');// Create buffer object, specifying base64 as encodingvar buf = Buffer.from(base64str,'base64');// Write buffer content to a filefs.writeFile(\"b64DecodedImage.png\", buf, function(error){\u00a0 if(error){\u00a0 \u00a0 throw error;\u00a0 }else{\u00a0 \u00a0 console.log('File created from base64 string');\u00a0 \u00a0 return true;\u00a0 }});\n```\n```\n// Import librariesimport org.apache.commons.codec.binary.Base64;import org.apache.commons.io.FileUtils;// Create new fileFile file = new File(\"./b64DecodedImage.png\");// Convert base64 encoded string to byte arraybyte[] bytes = Base64.decodeBase64(\"base64\");// Write out fileFileUtils.writeByteArrayToFile(file, bytes);\n```\n```\n// Import packagesimport (\u00a0 \u00a0\"encoding/base64\"\u00a0 \u00a0\"io\"\u00a0 \u00a0\"os\")// Add encoded file stringvar b64 = `TWFuIGlz...Vhc3VyZS4=`// Decode base64-encoded stringdec, err := base64.StdEncoding.DecodeString(b64)if err != nil {\u00a0 \u00a0 panic(err)}// Create output filef, err := os.Create(\"b64DecodedImage.png\")if err != nil {\u00a0 \u00a0 panic(err)}defer f.Close()if _, err := f.Write(dec); err != nil {\u00a0 \u00a0 panic(err)}if err := f.Sync(); err != nil {\u00a0 \u00a0 panic(err)}\n```", "guide": "Generative AI on Vertex AI"}