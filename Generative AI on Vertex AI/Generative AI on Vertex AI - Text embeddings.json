{"title": "Generative AI on Vertex AI - Text embeddings", "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/text-embeddings", "abstract": "# Generative AI on Vertex AI - Text embeddings\nEmbeddings for Text ( `textembedding-gecko` ) is the name for the model that supports text embeddings. Text embeddings are a NLP technique that converts textual data into numerical vectors that can be processed by machine learning algorithms, especially large models. These vector representations are designed to capture the semantic meaning and context of the words they represent.\nThere are a few versions available for embeddings. `textembedding-gecko@003` is the newest stable embedding model with enhanced AI quality, and `textembedding-gecko-multilingual@001` is a model optimized for a wide range of non-English languages.\nTo explore this model in the console, see the Embeddings for Text model card in the Model Garden.  [Go to the Model Garden](https://console.cloud.google.com/vertex-ai/publishers/google/model-garden/textembedding-gecko)\n", "content": "## Use cases\n**Semantic Search** : Text embeddings can be used to represent both the user's query and the universe of documents in a high-dimensional vector space. Documents that are more semantically similar to the user's query will have a shorter distance in the vector space, and can be ranked higher in the search results.\n**Text Classification** : Training a model that maps the text embeddings to the correct category labels (e.g., cat vs. dog, spam vs. not spam). Once the model is trained, it can be used to classify new text inputs into one or more categories based on their embeddings.\n## HTTP request\n```\nPOST https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/textembedding-gecko:predict\n```\n## Model versions\nTo use the [latest model version](/vertex-ai/generative-ai/docs/learn/model-versioning#latest-version) , specify with the @latest suffix, for example `textembedding-gecko@latest` .\nTo use a [stable model version](/vertex-ai/generative-ai/docs/learn/model-versioning#stable-version) , specify the model version number, for example `textembedding-gecko@003` . Each stable version is available for six months after the release date of the subsequent stable version.\nThe following table contains the available stable model versions:\n| textembedding-gecko model   | Release date  | Discontinuation date |\n|:-------------------------------------|:------------------|:-----------------------|\n| textembedding-gecko@003    | December 12, 2023 | Not applicable   |\n| textembedding-gecko@002    | November 2, 2023 | December 12, 2024  |\n| textembedding-gecko-multilingual@001 | November 2, 2023 | Not applicable   |\n| textembedding-gecko@001    | June 7, 2023  | November 2, 2024  |\nFor more information, see [Model versions and lifecycle](/vertex-ai/generative-ai/docs/learn/model-versioning) .\n## Request body\n```\n{\u00a0 \"instances\": [\u00a0 \u00a0 { \u00a0 \u00a0 \u00a0 \"task_type\": \"RETRIEVAL_DOCUMENT\",\u00a0 \u00a0 \u00a0 \"title\": \"document title\",\u00a0 \u00a0 \u00a0 \"content\": \"I would like embeddings for this text!\"\u00a0 \u00a0 },\u00a0 ]}\n```\nThe Vertex AI PaLM Embedding API performs online (real-time) predictions to get embeddings from input text.\nThe API accepts a maximum of 3,072 input tokens and outputs 768-dimensional vector embeddings. Use the following parameters for the text embeddings model `textembedding-gecko` . For more information, see [Text embeddingsoverview](/vertex-ai/generative-ai/docs/embeddings/get-text-embeddings) .\n| Parameter | Description                                             | Acceptable values                    |\n|:------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------|\n| content  | The text that you want to generate embeddings for.                                   | Text                       |\n| task_type | The `task_type` parameter is defined as the intended downstream application to help the model produce better quality embeddings. It is a string that can take on one of the following values. | `RETRIEVAL_QUERY`, `RETRIEVAL_DOCUMENT`,`SEMANTIC_SIMILARITY`, `CLASSIFICATION` `CLUSTERING`. |\n| title  | The title for the embedding.                                         | Text                       |\n## Sample request\nTo test a text prompt by using the Vertex AI API, send a POST request to the publisher model endpoint.\nBefore using any of the request data, make the following replacements:- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- : The text that you want to generate embeddings for.\nHTTP method and URL:\n```\nPOST https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/textembedding-gecko@003:predict\n```\nRequest JSON body:\n```\n{\n \"instances\": [ { \"content\": \"TEXT\"}\n ],\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/textembedding-gecko@003:predict\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/textembedding-gecko@003:predict\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the [sample response](#sample_response) .To learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/generative_ai/embedding.py) \n```\nfrom vertexai.language_models import TextEmbeddingModeldef text_embedding(text: str = \"What is life?\") -> list:\u00a0 \u00a0 \"\"\"Text embedding with a Large Language Model.\"\"\"\u00a0 \u00a0 model = TextEmbeddingModel.from_pretrained(\"textembedding-gecko@001\")\u00a0 \u00a0 embeddings = model.get_embeddings([text])\u00a0 \u00a0 vector = embeddings[0].values\u00a0 \u00a0 print(f\"Length of Embedding Vector: {len(vector)}\")\u00a0 \u00a0 return vector\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/predict-text-embeddings.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION';const aiplatform = require('@google-cloud/aiplatform');// Imports the Google Cloud Prediction service clientconst {PredictionServiceClient} = aiplatform.v1;// Import the helper module for converting arbitrary protobuf.Value objects.const {helpers} = aiplatform;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: 'us-central1-aiplatform.googleapis.com',};const publisher = 'google';const model = 'textembedding-gecko@001';// Instantiates a clientconst predictionServiceClient = new PredictionServiceClient(clientOptions);async function callPredict() {\u00a0 // Configure the parent resource\u00a0 const endpoint = `projects/${project}/locations/${location}/publishers/${publisher}/models/${model}`;\u00a0 const instance = {\u00a0 \u00a0 content: 'What is life?',\u00a0 };\u00a0 const instanceValue = helpers.toValue(instance);\u00a0 const instances = [instanceValue];\u00a0 const parameter = {\u00a0 \u00a0 temperature: 0,\u00a0 \u00a0 maxOutputTokens: 256,\u00a0 \u00a0 topP: 0,\u00a0 \u00a0 topK: 1,\u00a0 };\u00a0 const parameters = helpers.toValue(parameter);\u00a0 const request = {\u00a0 \u00a0 endpoint,\u00a0 \u00a0 instances,\u00a0 \u00a0 parameters,\u00a0 };\u00a0 // Predict request\u00a0 const [response] = await predictionServiceClient.predict(request);\u00a0 console.log('Get text embeddings response');\u00a0 const predictions = response.predictions;\u00a0 console.log('\\tPredictions :');\u00a0 for (const prediction of predictions) {\u00a0 \u00a0 console.log(`\\t\\tPrediction : ${JSON.stringify(prediction)}`);\u00a0 }}callPredict();\n```Before trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/PredictTextEmbeddingsSample.java) \n```\nimport com.google.cloud.aiplatform.util.ValueConverter;import com.google.cloud.aiplatform.v1beta1.EndpointName;import com.google.cloud.aiplatform.v1beta1.PredictResponse;import com.google.cloud.aiplatform.v1beta1.PredictionServiceClient;import com.google.cloud.aiplatform.v1beta1.PredictionServiceSettings;import com.google.protobuf.Value;import com.google.protobuf.util.JsonFormat;import java.io.IOException;import java.util.ArrayList;import java.util.List;public class PredictTextEmbeddingsSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 // Details about text embedding request structure and supported models are available in:\u00a0 \u00a0 // https://cloud.google.com/vertex-ai/docs/generative-ai/embeddings/get-text-embeddings\u00a0 \u00a0 String instance = \"{ \\\"content\\\": \\\"What is life?\\\"}\";\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String publisher = \"google\";\u00a0 \u00a0 String model = \"textembedding-gecko@001\";\u00a0 \u00a0 predictTextEmbeddings(instance, project, location, publisher, model);\u00a0 }\u00a0 // Get text embeddings from a supported embedding model\u00a0 public static void predictTextEmbeddings(\u00a0 \u00a0 \u00a0 String instance, String project, String location, String publisher, String model)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 String endpoint = String.format(\"%s-aiplatform.googleapis.com:443\", location);\u00a0 \u00a0 PredictionServiceSettings predictionServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 PredictionServiceSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEndpoint(endpoint)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests.\u00a0 \u00a0 try (PredictionServiceClient predictionServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 PredictionServiceClient.create(predictionServiceSettings)) {\u00a0 \u00a0 \u00a0 EndpointName endpointName =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EndpointName.ofProjectLocationPublisherModelName(project, location, publisher, model);\u00a0 \u00a0 \u00a0 // Use Value.Builder to convert instance to a dynamically typed value that can be\u00a0 \u00a0 \u00a0 // processed by the service.\u00a0 \u00a0 \u00a0 Value.Builder instanceValue = Value.newBuilder();\u00a0 \u00a0 \u00a0 JsonFormat.parser().merge(instance, instanceValue);\u00a0 \u00a0 \u00a0 List<Value> instances = new ArrayList<>();\u00a0 \u00a0 \u00a0 instances.add(instanceValue.build());\u00a0 \u00a0 \u00a0 PredictResponse predictResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 predictionServiceClient.predict(endpointName, instances, ValueConverter.EMPTY_VALUE);\u00a0 \u00a0 \u00a0 System.out.println(\"Predict Response\");\u00a0 \u00a0 \u00a0 for (Value prediction : predictResponse.getPredictionsList()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.format(\"\\tPrediction: %s\\n\", prediction);\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```\n## Response body\n```\n{\u00a0 \"predictions\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"embeddings\": {\u00a0 \u00a0 \u00a0 \u00a0 \"statistics\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"truncated\": boolean,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"token_count\": integer\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \"values\": [ number ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ]}\n```\n| Response element | Description                     |\n|:-------------------|:----------------------------------------------------------------------------------------------|\n| embeddings   | The result generated from input text.               |\n| statistics   | The statistics computed from the input text.             |\n| truncated   | Indicates if the input text was longer than max allowed tokens and truncated.     |\n| tokenCount   | Number of tokens of the input text.               |\n| values    | The values field contains the embedding vectors corresponding to the words in the input text. |\n## Sample response\n```\n{\u00a0 \"predictions\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"embeddings\": {\u00a0 \u00a0 \u00a0 \u00a0 \"values\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0.0058424929156899452,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0.011848051100969315,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0.032247550785541534,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 -0.031829461455345154,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 -0.055369812995195389,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ...\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"statistics\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"token_count\": 4,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"truncated\": false\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ]}\n```", "guide": "Generative AI on Vertex AI"}