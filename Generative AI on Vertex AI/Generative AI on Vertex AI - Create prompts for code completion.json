{"title": "Generative AI on Vertex AI - Create prompts for code completion", "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/code/code-completion-prompts", "abstract": "# Generative AI on Vertex AI - Create prompts for code completion\nThe Vertex AI Codey APIs include the code completion API, which supports code suggestions based on code that's recently written. Use the generative AI foundation model named `code-gecko` to interact with the code completion API. This topic helps you learn how to create prompts to work with the `code-gecko` model to create code completion suggestions.\n", "content": "## Use cases\nUse the code completion API to integrate the `code-gecko` model and its code completion capability into an IDE. Some common use cases for code completion are:\n- **Write code faster** : Use the `code-gecko` model to write code faster by taking advantage of code suggested for you.\n- **Minimize bugs in code** : Use code suggestions that you know are syntactically correct to avoid errors. Code completion helps you minimize the risk of accidentally introducing bugs that can occur when you write code.## Supported model\nThe following model supports code completion tasks:\n- `code-gecko`## Example code completion prompts\nUse the following examples to learn how to design code completion prompts.\n- [Prompt to complete a code function](#complete-code-definition) \n- [Prompt to complete a test function](#complete-test-function) \n### Prompt to complete a code function\nYou can use the code completion model to complete a code definition. The following prompt generates code that completes a partially typed code definition:\n| 0                        |\n|:------------------------------------------------------------------------------------------------|\n| Prompt: def reverse_string(s): Response: \"\"\" :type s: str :rtype: str \"\"\" (code-gecko@001) |\n### Prompt to complete a test function\nYou can use the code completion model to complete a test function. The following prompt generates code that completes a test function. The function in the response, `test_empty_input_string` , tests the `reverse_string` function.\n| 0                                                                  |\n|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Prompt: def reverse_string(s): return s[::-1] def test_empty_input_string() Response: -> None: assert reverse_string(\"\") == \"\" def test_one_character_string() -> None: assert reverse_string(\"a\") == \"a\" def test_two_character_string() -> None: (code-gecko@001) |\n## What's next\n- Learn how to [create code chat prompts](/vertex-ai/generative-ai/docs/code/code-chat-prompts) .\n- Learn how to [create code generation prompts](/vertex-ai/generative-ai/docs/code/code-generation-prompts) .\n- Learn about [responsible AI best practices and Vertex AI's safety filters](/vertex-ai/generative-ai/docs/learn/responsible-ai) .\n- Learn about [streaming responses from a model](/vertex-ai/generative-ai/docs/learn/streaming) .", "guide": "Generative AI on Vertex AI"}