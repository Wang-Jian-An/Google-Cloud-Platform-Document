{"title": "Generative AI on Vertex AI - Try the Vertex AI Gemini API", "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/start/quickstarts/quickstart-multimodal", "abstract": "# Generative AI on Vertex AI - Try the Vertex AI Gemini API\nThis page shows you how to quickly start sending requests to the Vertex AI Gemini API by using the Google Cloud console, a programming language SDK, or the REST API.\n", "content": "## New to Google Cloud\n## Send a request to the Vertex AI Gemini API\nTo see the instructions for sending a request to the Vertex AI Gemini API, select one of the following tabs:\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- In Cloud Shell, install or update the Vertex AI SDK for Python by   running the following command:```\npip install \"google-cloud-aiplatform>=1.38\"\n```\nSend a prompt request. Replace with the ID of your Google Cloud project.\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/generative_ai/gemini_guide_example.py) \n```\n# TODO(developer): Vertex AI SDK - uncomment below & run# pip3 install --upgrade --user google-cloud-aiplatform# gcloud auth application-default loginimport vertexaifrom vertexai.generative_models import GenerativeModel, Partdef generate_text(project_id: str, location: str) -> str:\u00a0 \u00a0 # Initialize Vertex AI\u00a0 \u00a0 vertexai.init(project=project_id, location=location)\u00a0 \u00a0 # Load the model\u00a0 \u00a0 multimodal_model = GenerativeModel(\"gemini-1.0-pro-vision\")\u00a0 \u00a0 # Query the model\u00a0 \u00a0 response = multimodal_model.generate_content(\u00a0 \u00a0 \u00a0 \u00a0 [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Add an example image\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Part.from_uri(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"gs://generativeai-downloads/images/scones.jpg\", mime_type=\"image/jpeg\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Add an example query\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"what is shown in this image?\",\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 )\u00a0 \u00a0 print(response)\u00a0 \u00a0 return response.text\n```\nTo learn how to install or update the Vertex AI SDK for Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) . For more information, see the [Vertex AI SDK for Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- In Cloud Shell, install or update the Vertex AI SDK for   Node.js by running the following command:```\nnpm install @google-cloud/vertexai\n```\nSend a prompt request. Replace with the ID of your Google Cloud project.\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/generative-ai/snippets/nonStreamingMultipartContent.js) \n```\nconst {VertexAI} = require('@google-cloud/vertexai');/**\u00a0* TODO(developer): Update these variables before running the sample.\u00a0*/async function createNonStreamingMultipartContent(\u00a0 projectId = 'PROJECT_ID',\u00a0 location = 'us-central1',\u00a0 model = 'gemini-1.0-pro-vision',\u00a0 image = 'gs://generativeai-downloads/images/scones.jpg',\u00a0 mimeType = 'image/jpeg') {\u00a0 // Initialize Vertex with your Cloud project and location\u00a0 const vertexAI = new VertexAI({project: projectId, location: location});\u00a0 // Instantiate the model\u00a0 const generativeVisionModel = vertexAI.getGenerativeModel({\u00a0 \u00a0 model: model,\u00a0 });\u00a0 // For images, the SDK supports both Google Cloud Storage URI and base64 strings\u00a0 const filePart = {\u00a0 \u00a0 fileData: {\u00a0 \u00a0 \u00a0 fileUri: image,\u00a0 \u00a0 \u00a0 mimeType: mimeType,\u00a0 \u00a0 },\u00a0 };\u00a0 const textPart = {\u00a0 \u00a0 text: 'what is shown in this image?',\u00a0 };\u00a0 const request = {\u00a0 \u00a0 contents: [{role: 'user', parts: [filePart, textPart]}],\u00a0 };\u00a0 console.log('Prompt Text:');\u00a0 console.log(request.contents[0].parts[1].text);\u00a0 console.log('Non-Streaming Response Text:');\u00a0 // Create the response stream\u00a0 const responseStream =\u00a0 \u00a0 await generativeVisionModel.generateContentStream(request);\u00a0 // Wait for the response stream to complete\u00a0 const aggregatedResponse = await responseStream.response;\u00a0 // Select the text from the response\u00a0 const fullTextResponse =\u00a0 \u00a0 aggregatedResponse.candidates[0].content.parts[0].text;\u00a0 console.log(fullTextResponse);}\n```\nFor more information on installing and using the Vertex AI Node.js SDK, see the [Vertex AI SDK for Node.js reference documentation](/nodejs/docs/reference/vertexai/latest) .\n- [Set up your Java Development Environment](/java/docs/setup) .\n- Authenticate by running the following command. Replace with your Google Cloud project ID and with your Google Cloud username.```\ngcloud config set project PROJECT_ID &&gcloud auth login ACCOUNT\n```\n- Add `google-cloud-vertexai` as your dependency:```\n<!--If you are using Maven with BOM, add the following in your pom.xml--><dependencyManagement>\u00a0 <dependencies>\u00a0 \u00a0 <dependency>\u00a0 \u00a0 \u00a0 <groupId>com.google.cloud</groupId>\u00a0 \u00a0 \u00a0 <artifactId>libraries-bom</artifactId>\u00a0 \u00a0 \u00a0 <version>26.32.0</version>\u00a0 \u00a0 \u00a0 <type>pom</type>\u00a0 \u00a0 \u00a0 <scope>import</scope>\u00a0 \u00a0 </dependency>\u00a0 </dependencies></dependencyManagement><dependencies>\u00a0 <dependency>\u00a0 \u00a0 <groupId>com.google.cloud</groupId>\u00a0 \u00a0 <artifactId>google-cloud-vertexai</artifactId>\u00a0 </dependency></dependencies><!--If you are using Maven without BOM, add the following to your pom.xml--><dependency>\u00a0 <groupId>com.google.cloud</groupId>\u00a0 <artifactId>google-cloud-vertexai</artifactId>\u00a0 <version>0.4.0</version></dependency><!--If you are using Gradle without BOM, add the following to your build.gradle-->implementation 'com.google.cloud:google-cloud-vertexai:0.4.0'\n```\nSend a prompt request. Set `projectID` to your Google Cloud project ID.\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/vertexai/snippets/src/main/java/vertexai/gemini/Quickstart.java) \n```\nimport com.google.cloud.vertexai.VertexAI;import com.google.cloud.vertexai.api.GenerateContentResponse;import com.google.cloud.vertexai.generativeai.ContentMaker;import com.google.cloud.vertexai.generativeai.GenerativeModel;import com.google.cloud.vertexai.generativeai.PartMaker;import java.io.IOException;public class Quickstart {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"your-google-cloud-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String modelName = \"gemini-1.0-pro-vision\";\u00a0 \u00a0 String output = quickstart(projectId, location, modelName);\u00a0 \u00a0 System.out.println(output);\u00a0 }\u00a0 // Analyzes the provided Multimodal input.\u00a0 public static String quickstart(String projectId, String location, String modelName)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs\u00a0 \u00a0 // to be created once, and can be reused for multiple requests.\u00a0 \u00a0 try (VertexAI vertexAI = new VertexAI(projectId, location)) {\u00a0 \u00a0 \u00a0 String imageUri = \"gs://generativeai-downloads/images/scones.jpg\";\u00a0 \u00a0 \u00a0 GenerativeModel model = new GenerativeModel(modelName, vertexAI);\u00a0 \u00a0 \u00a0 GenerateContentResponse response = model.generateContent(ContentMaker.fromMultiModalData(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PartMaker.fromMimeTypeAndData(\"image/jpg\", imageUri),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"What's in this photo\"\u00a0 \u00a0 \u00a0 ));\u00a0 \u00a0 \u00a0 return response.toString();\u00a0 \u00a0 }\u00a0 }}\n```\nFor more information on installing and using the Vertex AI Java Development Kit (JDK), see the [Vertex AI JDK reference documentation](/java/docs/reference/google-cloud-vertexai/latest/overview) .\n- [Prepare your environment for Go development](/go/docs/setup) .\n- Review the available Vertex AI API Go packages to determine  which package best meets your project's needs:- Package [cloud.google.com/go/vertexai](https://pkg.go.dev/cloud.google.com/go/vertexai) ( **recommended** )`vertexai` is a human authored package that provides access   to common capabilities and features.This package is recommended as the starting point for most developers   building with the Vertex AI API. To access capabilities and   features not yet covered by this package, use the auto-generated `aiplatform` instead.\n- Package [cloud.google.com/go/aiplatform](https://pkg.go.dev/cloud.google.com/go/aiplatform) `aiplatform` is an auto-generated package.This package is intended for projects that require access to   Vertex AI API capabilities and features not yet provided by the   human authored `vertexai` package.\n- Install the desired Go package based on your project's needs by running  one of the following commands:```\n# Human authored package. Recommended for most developers.go get cloud.google.com/go/vertexai# Auto-generated package.go get cloud.google.com/go/aiplatform\n```\nSend a prompt request. Replace with the ID of your Google Cloud project.\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/vertexai/snippets/try_gemini.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"encoding/json\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/vertexai/genai\")var projectId = \"PROJECT_ID\"var region = \"us-central1\"func tryGemini(w io.Writer, projectId string, region string, modelName string) error {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := genai.NewClient(ctx, projectId, region)\u00a0 \u00a0 \u00a0 \u00a0 gemini := client.GenerativeModel(modelName)\u00a0 \u00a0 \u00a0 \u00a0 img := genai.FileData{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MIMEType: \"image/jpeg\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FileURI: \u00a0\"gs://generativeai-downloads/images/scones.jpg\",\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 prompt := genai.Text(\"What is in this image?\")\u00a0 \u00a0 \u00a0 \u00a0 resp, err := gemini.GenerateContent(ctx, img, prompt)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"error generating content: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 rb, _ := json.MarshalIndent(resp, \"\", \" \u00a0\")\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintln(w, string(rb))\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```\nFor more information on installing and using the Vertex AI SDK for Go, see the [Vertex AI SDK for Go reference documentation](/go/docs/reference/cloud.google.com/go/vertexai/latest) .Before trying this sample, follow the C# setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI C# API reference documentation](/dotnet/docs/reference/Google.Cloud.AIPlatform.V1/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/aiplatform/api/AIPlatform.Samples/GeminiQuickstart.cs) \n```\nusing Google.Api.Gax.Grpc;using Google.Cloud.AIPlatform.V1;using System.Collections.Generic;using System.Text;using System.Threading.Tasks;public class GeminiQuickstart{\u00a0 \u00a0 public async Task<string> GenerateContent(\u00a0 \u00a0 \u00a0 \u00a0 string projectId = \"your-project-id\",\u00a0 \u00a0 \u00a0 \u00a0 string location = \"us-central1\",\u00a0 \u00a0 \u00a0 \u00a0 string publisher = \"google\",\u00a0 \u00a0 \u00a0 \u00a0 string model = \"gemini-1.0-pro-vision\"\u00a0 \u00a0 )\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create client\u00a0 \u00a0 \u00a0 \u00a0 var predictionServiceClient = new PredictionServiceClientBuilder\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Endpoint = $\"{location}-aiplatform.googleapis.com\"\u00a0 \u00a0 \u00a0 \u00a0 }.Build();\u00a0 \u00a0 \u00a0 \u00a0 // Prompt\u00a0 \u00a0 \u00a0 \u00a0 string prompt = \"What's in this photo\";\u00a0 \u00a0 \u00a0 \u00a0 string imageUri = \"gs://generativeai-downloads/images/scones.jpg\";\u00a0 \u00a0 \u00a0 \u00a0 // Initialize request argument(s)\u00a0 \u00a0 \u00a0 \u00a0 var content = new Content\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Role = \"USER\"\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 content.Parts.AddRange(new List<Part>()\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new() {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Text = prompt\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new() {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FileData = new() {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MimeType = \"image/png\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FileUri = imageUri\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 });\u00a0 \u00a0 \u00a0 \u00a0 var generateContentRequest = new GenerateContentRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Model = $\"projects/{projectId}/locations/{location}/publishers/{publisher}/models/{model}\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 GenerationConfig = new GenerationConfig\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Temperature = 0.4f,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TopP = 1,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TopK = 32,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MaxOutputTokens = 2048\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 generateContentRequest.Contents.Add(content);\u00a0 \u00a0 \u00a0 \u00a0 // Make the request, returning a streaming response\u00a0 \u00a0 \u00a0 \u00a0 using PredictionServiceClient.StreamGenerateContentStream response = predictionServiceClient.StreamGenerateContent(generateContentRequest);\u00a0 \u00a0 \u00a0 \u00a0 StringBuilder fullText = new();\u00a0 \u00a0 \u00a0 \u00a0 // Read streaming responses from server until complete\u00a0 \u00a0 \u00a0 \u00a0 AsyncResponseStream<GenerateContentResponse> responseStream = response.GetResponseStream();\u00a0 \u00a0 \u00a0 \u00a0 await foreach (GenerateContentResponse responseItem in responseStream)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fullText.Append(responseItem.Candidates[0].Content.Parts[0].Text);\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return fullText.ToString();\u00a0 \u00a0 }}\n```\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Configure environment variables by entering the following. Replace with the ID of your Google Cloud project.```\nMODEL_ID=\"gemini-1.0-pro-vision\"PROJECT_ID=\"PROJECT_ID\"\n```\n- Provision the endpoint:```\ngcloud beta services identity create --service=aiplatform.googleapis.com --project=PROJECT_ID\n```\n- Send a prompt request by entering the following curl command:```\ncurl \\-X POST \\-H \"Authorization: Bearer $(gcloud auth application-default print-access-token)\" \\-H \"Content-Type: application/json\" \\https://us-central1-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/us-central1/publishers/google/models/${MODEL_ID}:streamGenerateContent -d \\$'{\u00a0 \"contents\": {\u00a0 \u00a0 \"role\": \"user\",\u00a0 \u00a0 \"parts\": [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"fileData\": {\u00a0 \u00a0 \u00a0 \u00a0 \"mimeType\": \"image/jpeg\",\u00a0 \u00a0 \u00a0 \u00a0 \"fileUri\": \"gs://generativeai-downloads/images/scones.jpg\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"text\": \"Describe this picture.\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 }}'\n```\n- If asked to authorize Cloud Shell, click **Authorize** .The model returns a response. Note that the response is generated in sections with each section separately evaluated for safety.Use Vertex AI Studio to quickly design and iterate on your prompts. After your prompt is ready, you can get the code for your prompt in any of the supported programming languages.- In the Google Cloud console, go to the **Vertex AI Studio** page. [Vertex AI Studio](https://console.cloud.google.com/vertex-ai/generative) \n- Click **Multimodal** .\n- Under **Sample prompts** , locate the prompt titled **Extract text   from images** , and click **Open** .The prompt page opens and the prompt is populated in the **Prompt** field.\n- Submit the prompt by clicking **Submit** .The model returns a response.\n- View the code equivalent of this prompt request by clicking code **Get code** .\n## What's next\n- Learn more about the [Vertex AI Gemini API](/vertex-ai/generative-ai/docs/multimodal/overview) .\n- Learn how to [design multimodal prompts](/vertex-ai/generative-ai/docs/multimodal/design-multimodal-prompts) .\n- See the in-depth guides on the Vertex AI Gemini API:- [Test multimodal prompts](/vertex-ai/generative-ai/docs/multimodal/send-multimodal-prompts) .\n- [Test chat prompts](/vertex-ai/generative-ai/docs/multimodal/send-chat-prompts-gemini) .\n- See the [Vertex AI Gemini API reference](/vertex-ai/generative-ai/docs/model-reference/gemini) .\n- See the [Vertex AI Gemini API Python SDK reference](/vertex-ai/generative-ai/docs/multimodal/sdk-for-gemini/gemini-sdk-overview-reference) .", "guide": "Generative AI on Vertex AI"}