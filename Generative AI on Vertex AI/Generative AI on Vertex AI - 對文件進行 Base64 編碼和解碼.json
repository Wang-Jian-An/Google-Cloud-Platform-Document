{"title": "Generative AI on Vertex AI - \u5c0d\u6587\u4ef6\u9032\u884c Base64 \u7de8\u78bc\u548c\u89e3\u78bc", "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/image/base64-encode?hl=zh-cn", "abstract": "# Generative AI on Vertex AI - \u5c0d\u6587\u4ef6\u9032\u884c Base64 \u7de8\u78bc\u548c\u89e3\u78bc\n", "content": "## \u5c0d\u5716\u7247\u9032\u884c Base64 \u7de8\u78bc\n\u5982\u9700\u767c\u51fa\u751f\u6210\u5716\u7247\u8acb\u6c42\uff0c\u60a8\u5fc5\u9808\u4ee5 [Base64 \u7de8\u78bc](https://en.wikipedia.org/wiki/Base64) \u6587\u672c\u7684\u5f62\u5f0f\u767c\u9001\u5716\u7247\u6578\u64da\u3002\n## \u4f7f\u7528\u547d\u4ee4\u884c\n\u5728 gRPC \u8acb\u6c42\u4e2d\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u5beb\u51fa\u4e8c\u9032\u5236\u6578\u64da\uff1b\u4e0d\u904e\uff0c\u5728\u767c\u51fa REST \u8acb\u6c42\u6642\u6703\u4f7f\u7528 JSON\u3002JSON \u662f\u4e00\u7a2e\u4e0d\u76f4\u63a5\u652f\u6301\u4e8c\u9032\u5236\u6578\u64da\u7684\u6587\u672c\u683c\u5f0f\uff0c\u56e0\u6b64\u60a8\u9700\u8981\u4f7f\u7528 [Base64](https://en.wikipedia.org/wiki/Base64) \u7de8\u78bc\u5c07\u6b64\u985e\u4e8c\u9032\u5236\u6578\u64da\u8f49\u63db\u7232\u6587\u672c\u3002\n\u5927\u591a\u6578\u958b\u767c\u74b0\u5883\u90fd\u5305\u542b\u4e00\u500b\u539f\u751f `base64` \u5be6\u7528\u7a0b\u5e8f\uff0c\u7528\u65bc\u5c07\u4e8c\u9032\u5236\u6587\u4ef6\u7de8\u78bc\u7232 ASCII \u6587\u672c\u6578\u64da\u3002\u5982\u9700\u5c0d\u6587\u4ef6\u9032\u884c\u7de8\u78bc\uff0c\u8acb\u6309\u7167\u4ee5\u4e0b\u8aaa\u660e\u64cd\u4f5c\uff1a\n\u4f7f\u7528 `base64` \u547d\u4ee4\u884c\u5de5\u5177\u5c0d\u6587\u4ef6\u9032\u884c\u7de8\u78bc\uff0c\u8acb\u6ce8\u610f\uff0c\u52d9\u5fc5\u4f7f\u7528 `-w 0` \u6a19\u8a8c\u4ee5\u907f\u514d\u63db\u884c\uff1a\n```\nbase64 INPUT_FILE -w 0 > OUTPUT_FILE\n```\n\u4f7f\u7528 `base64` \u547d\u4ee4\u884c\u5de5\u5177\u5c0d\u6587\u4ef6\u9032\u884c\u7de8\u78bc\uff1a\n```\nbase64 -i INPUT_FILE -o OUTPUT_FILE\n```\n\u4f7f\u7528 `Base64.exe` \u5de5\u5177\u5c0d\u6587\u4ef6\u9032\u884c\u7de8\u78bc\uff1a\n```\nBase64.exe -e INPUT_FILE > OUTPUT_FILE\n```\n\u4f7f\u7528 `Convert.ToBase64String` \u65b9\u6cd5\u5c0d\u6587\u4ef6\u9032\u884c\u7de8\u78bc\uff1a\n```\n[Convert]::ToBase64String([IO.File]::ReadAllBytes(\"./INPUT_FILE\")) > OUTPUT_FILE\n```\n\u5275\u5efa JSON \u8acb\u6c42\u6587\u4ef6\uff0c\u4e26\u5167\u5d4c base64 \u7de8\u78bc\u7684\u6578\u64da\uff1a\n```\n{\u00a0 \"instances\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"prompt\": \"TEXT_PROMPT\",\u00a0 \u00a0 \u00a0 \"image\": {\u00a0 \u00a0 \u00a0 \u00a0 \"bytes_base64_encoded\": \"B64_BASE_IMAGE\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ]}\n```\n## \u4f7f\u7528\u5ba2\u6236\u7aef\u5eab\n\u901a\u904e\u6587\u672c\u7de8\u8f2f\u5668\u5c07\u4e8c\u9032\u5236\u6578\u64da\u5d4c\u5165\u8acb\u6c42\u4e2d\u65e2\u4e0d\u53ef\u53d6\u4e5f\u4e0d\u5be6\u7528\u3002\u5728\u5be6\u969b\u4f7f\u7528\u4e2d\uff0c\u60a8\u61c9\u5728\u5ba2\u6236\u7aef\u4ee3\u78bc\u4e2d\u5d4c\u5165\u4f7f\u7528 base64 \u7de8\u78bc\u7684\u6587\u4ef6\u3002\u6240\u6709\u53d7\u652f\u6301\u7684\u7de8\u7a0b\u8a9e\u8a00\u90fd\u5167\u7f6e\u6709\u9069\u7528\u65bc base64 \u7de8\u78bc\u5167\u5bb9\u7684\u6a5f\u5236\u3002\n```\n# Import the base64 encoding library.import base64# Pass the image data to an encoding function.def encode_image(image):\u00a0 \u00a0 with open(image, \"rb\") as image_file:\u00a0 \u00a0 \u00a0 \u00a0 encoded_string = base64.b64encode(image_file.read())\u00a0 \u00a0 return encoded_string\n```\n```\n// Read the file into memory.var fs = require('fs');var imageFile = fs.readFileSync('/path/to/file');// Convert the image data to a Buffer and base64 encode it.var encoded = Buffer.from(imageFile).toString('base64');\n```\n```\n// Import the Base64 encoding library.import org.apache.commons.codec.binary.Base64;// Encode the image.byte[] imageData = Base64.encodeBase64(imageFile.getBytes());String encodedString = Base64.getEncoder().encodeToString(imageData);\n```\n```\nimport (\u00a0 \u00a0 \"bufio\"\u00a0 \u00a0 \"encoding/base64\"\u00a0 \u00a0 \"io\"\u00a0 \u00a0 \"os\")// Open image file.f, _ := os.Open(\"image.jpg\")// Read entire image into byte slice.reader := bufio.NewReader(f)content, _ := io.ReadAll(reader)// Encode image as base64.base64.StdEncoding.EncodeToString(content)\n```\n## \u5c0d\u5716\u7247\u9032\u884c Base64 \u89e3\u78bc\nAPI \u8acb\u6c42\u4ee5 base64 \u7de8\u78bc\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u8fd4\u56de\u751f\u6210\u6216\u4fee\u6539\u7684\u5716\u7247\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u5ba2\u6236\u7aef\u5eab\u793a\u4f8b\u89e3\u78bc\u9019\u4e9b\u6578\u64da\u4e26\u5c07\u5176\u672c\u5730\u4fdd\u5b58\u7232\u5716\u7247\u6587\u4ef6\u3002\n```\n# Import the base64 encoding library.import base64# Pass the base64 encoded image data to a decoding function and save image file.def decode_image(b64_encoded_string):\u00a0 \u00a0with open(\"b64DecodedImage.png\", \"wb\") as fh:\u00a0 \u00a0 \u00a0fh.write(base64.decodebytes(b64_encoded_string))\n```\n```\nvar fs = require('fs');// Create buffer object, specifying base64 as encodingvar buf = Buffer.from(base64str,'base64');// Write buffer content to a filefs.writeFile(\"b64DecodedImage.png\", buf, function(error){\u00a0 if(error){\u00a0 \u00a0 throw error;\u00a0 }else{\u00a0 \u00a0 console.log('File created from base64 string');\u00a0 \u00a0 return true;\u00a0 }});\n```\n```\n// Import librariesimport org.apache.commons.codec.binary.Base64;import org.apache.commons.io.FileUtils;// Create new fileFile file = new File(\"./b64DecodedImage.png\");// Convert base64 encoded string to byte arraybyte[] bytes = Base64.decodeBase64(\"base64\");// Write out fileFileUtils.writeByteArrayToFile(file, bytes);\n```\n```\n// Import packagesimport (\u00a0 \u00a0\"encoding/base64\"\u00a0 \u00a0\"io\"\u00a0 \u00a0\"os\")// Add encoded file stringvar b64 = `TWFuIGlz...Vhc3VyZS4=`// Decode base64-encoded stringdec, err := base64.StdEncoding.DecodeString(b64)if err != nil {\u00a0 \u00a0 panic(err)}// Create output filef, err := os.Create(\"b64DecodedImage.png\")if err != nil {\u00a0 \u00a0 panic(err)}defer f.Close()if _, err := f.Write(dec); err != nil {\u00a0 \u00a0 panic(err)}if err := f.Sync(); err != nil {\u00a0 \u00a0 panic(err)}\n```", "guide": "Generative AI on Vertex AI"}