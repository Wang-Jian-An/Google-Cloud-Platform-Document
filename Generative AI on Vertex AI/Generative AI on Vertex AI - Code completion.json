{"title": "Generative AI on Vertex AI - Code completion", "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/code-completion", "abstract": "# Generative AI on Vertex AI - Code completion\nCodey for Code Completion ( `code-gecko` ) is the name of the model that supports code completion. It's a foundation model that generates code based on code being written. Codey for Code Completion completes code that was recently typed by a user. Codey for Code Completion is supported by the code generation API. Codey APIs are in the PaLM API family.\nTo learn more about creating prompts for code completion, see [Create prompts for code completion](/vertex-ai/generative-ai/docs/code/code-completion-prompts) .\nTo explore this model in the console, see the Codey for Code Completion model card in the Model Garden.  [Go to the Model Garden](https://console.cloud.google.com/vertex-ai/publishers/google/model-garden/code-gecko)\n", "content": "## Use cases\nSome common use cases for code completion are:\n- **Write code faster** : Use the `code-gecko` model to write code faster by taking advantage of code suggested for you.\n- **Minimize bugs in code** : Use code suggestions that you know are syntactically correct to avoid errors. Code completion helps you minimize the risk of accidentally introducing bugs that can occur when you write code quickly.## HTTP request\n```\nPOST https://us-central1-googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/code-gecko:predict\n```\n## Model versions\nTo use the [latest model version](/vertex-ai/generative-ai/docs/learn/model-versioning#latest-version) , specify the model name without a version number, for example `code-gecko` .\nTo use a [stable model version](/vertex-ai/generative-ai/docs/learn/model-versioning#stable-version) , specify the model version number, for example `code-gecko@001` . Each stable version is available for six months after the release date of the subsequent stable version.\nThe following table contains the available stable model versions:\n| code-gecko model | Release date  | Discontinuation date |\n|:-------------------|:-----------------|:-----------------------|\n| code-gecko@002  | December 6, 2023 | Not applicable   |\n| code-gecko@001  | June 29, 2023 | July 6, 2024   |\nFor more information, see [Model versions and lifecycle](/vertex-ai/generative-ai/docs/learn/model-versioning) .\n## Request body\n```\n{\u00a0 \"instances\":[\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"prefix\": string,\u00a0 \u00a0 \u00a0 \"suffix\": string\u00a0 \u00a0 }\u00a0 ],\u00a0 \"parameters\": {\u00a0 \u00a0 \"temperature\": number,\u00a0 \u00a0 \"maxOutputTokens\": integer,\u00a0 \u00a0 \"candidateCount\": integer,\u00a0 \u00a0 \"stopSequences\": [ string ],\u00a0 \u00a0 \"logprobs\": integer,\u00a0 \u00a0 \"presencePenalty\": float,\u00a0 \u00a0 \"frequencyPenalty\": float,\u00a0 \u00a0 \"echo\": boolean,\u00a0 \u00a0 \"seed\": integer\u00a0 }}\n```\nThe following are the parameters for the code completion model named `code-gecko` . The `code-gecko` model is one of the Codey models. You can use these parameters to help optimize your code completion prompt. For more information, see [Code modelsoverview](/vertex-ai/generative-ai/docs/code/code-models-overview) and [Create prompts forcode completion](/vertex-ai/generative-ai/docs/code/code-completion-prompts) .\n| Parameter     | Description                                                                                                                            | Acceptable values      |\n|:----------------------------||:---------------------------------------|\n| prefix (required)   | For code models, prefix represents the beginning of a piece of meaningful programming code or a natural language prompt that describes code to be generated. The model attempts to fill in the code in between the prefix and suffix.                                                                     | A valid text string     |\n| suffix (optional)   | For code completion, suffix represents the end of a piece of meaningful programming code. The model attempts to fill in the code in between the prefix and suffix.                                                                                      | A valid text string     |\n| temperature     | The temperature is used for sampling during response generation. Temperature controls the degree of randomness in token selection. Lower temperatures are good for prompts that require a less open-ended or creative response, while higher temperatures can lead to more diverse or creative results. A temperature of 0 means that the highest probability tokens are always selected. In this case, responses for a given prompt are mostly deterministic, but a small amount of variation is still possible.  | 0.0\u20131.0 Default: 0.2     |\n| maxOutputTokens    | Maximum number of tokens that can be generated in the response. A token is approximately four characters. 100 tokens correspond to roughly 60-80 words. Specify a lower value for shorter responses and a higher value for potentially longer responses.                                                                 | 1-64 Default: 64      |\n| candidateCount (optional) | The number of response variations to return.                                                                                                                    | 1-4 Default: 1 (optional)    |\n| nan       | nan                                                                                                                              | nan         |\n| stopSequences (optional) | Specifies a list of strings that tells the model to stop generating text if one of the strings is encountered in the response. If a string appears multiple times in the response, then the response truncates where it's first encountered. The strings are case-sensitive. For example, if the following is the returned response when stopSequences isn't specified: public static string reverse(string myString) Then the returned response with stopSequences set to [\"Str\", \"reverse\"] is: public static string | A list of strings      |\n| logprobs (optional)   | Returns the top logprobs most likely candidate tokens with their log probabilities at each generation step. The chosen tokens and their log probabilities at each step are always returned. The chosen token may or may not be in the top logprobs most likely candidates.                                                            | 0-5         |\n| frequencyPenalty (optional) | Positive values penalize tokens that repeatedly appear in the generated text, decreasing the probability of repeating content. Acceptable values are -2.0\u20142.0.                                                                                       | Minimum value: -2.0 Maximum value: 2.0 |\n| presencePenalty (optional) | Positive values penalize tokens that already appear in the generated text, increasing the probability of generating more diverse content. Acceptable values are -2.0\u20142.0.                                                                                    | Minimum value: -2.0 Maximum value: 2.0 |\n| echo (optional)    | If true, the prompt is echoed in the generated text.                                                                                                                  | Optional        |\n| seed      | Decoder generates random noise with a pseudo random number generator, temperature * noise is added to logits before sampling. The pseudo random number generator (prng) takes a seed as input, it generates the same output with the same seed. If seed is not set, the seed used in decoder will not be deterministic, thus the generated random noise will not be deterministic. If seed is set, the generated random noise will be deterministic.                  | Optional        |\n## Sample request\nTo test a text prompt by using the Vertex AI API, send a POST request to the publisher model endpoint.\nBefore using any of the request data, make the following replacements:- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- For other fields, see the\n- [Request body](#request_body) \n- table.\n- HTTP method and URL:\n```\nPOST https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/code-gecko:predict\n```- Request JSON body:\n```\n{\n \"instances\": [ { \"prefix\": \"PREFIX\",\n  \"suffix\": \"SUFFIX\"}\n ],\n \"parameters\": {\n \"temperature\": TEMPERATURE,\n \"maxOutputTokens\": MAX_OUTPUT_TOKENS,\n \"candidateCount\": CANDIDATE_COUNT\n }\n}\n```- To send your request, choose one of these options: **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/code-gecko:predict\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/code-gecko:predict\" | Select-Object -Expand Content\n```\n- You should receive a JSON response similar to the [sample response](#sample_response) .To learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/generative_ai/code_completion_function.py) \n```\nfrom vertexai.language_models import CodeGenerationModeldef complete_code_function(temperature: float = 0.2) -> object:\u00a0 \u00a0 \"\"\"Example of using Codey for Code Completion to complete a function.\"\"\"\u00a0 \u00a0 # TODO developer - override these parameters as needed:\u00a0 \u00a0 parameters = {\u00a0 \u00a0 \u00a0 \u00a0 \"temperature\": temperature, \u00a0# Temperature controls the degree of randomness in token selection.\u00a0 \u00a0 \u00a0 \u00a0 \"max_output_tokens\": 64, \u00a0# Token limit determines the maximum amount of text output.\u00a0 \u00a0 }\u00a0 \u00a0 code_completion_model = CodeGenerationModel.from_pretrained(\"code-gecko@001\")\u00a0 \u00a0 response = code_completion_model.predict(\u00a0 \u00a0 \u00a0 \u00a0 prefix=\"def reverse_string(s):\", **parameters\u00a0 \u00a0 )\u00a0 \u00a0 print(f\"Response from Model: {response.text}\")\u00a0 \u00a0 return response\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/predict-code-completion-comment.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION';const aiplatform = require('@google-cloud/aiplatform');// Imports the Google Cloud Prediction service clientconst {PredictionServiceClient} = aiplatform.v1;// Import the helper module for converting arbitrary protobuf.Value objects.const {helpers} = aiplatform;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: 'us-central1-aiplatform.googleapis.com',};const publisher = 'google';const model = 'code-gecko@001';// Instantiates a clientconst predictionServiceClient = new PredictionServiceClient(clientOptions);async function callPredict() {\u00a0 // Configure the parent resource\u00a0 const endpoint = `projects/${project}/locations/${location}/publishers/${publisher}/models/${model}`;\u00a0 const prompt = {\u00a0 \u00a0 prefix:\u00a0 \u00a0 \u00a0 'def reverse_string(s): \\\u00a0 \u00a0 \u00a0 \u00a0 return s[::-1] \\\u00a0 \u00a0 \u00a0 #This function',\u00a0 };\u00a0 const instanceValue = helpers.toValue(prompt);\u00a0 const instances = [instanceValue];\u00a0 const parameter = {\u00a0 \u00a0 temperature: 0.2,\u00a0 \u00a0 maxOutputTokens: 64,\u00a0 };\u00a0 const parameters = helpers.toValue(parameter);\u00a0 const request = {\u00a0 \u00a0 endpoint,\u00a0 \u00a0 instances,\u00a0 \u00a0 parameters,\u00a0 };\u00a0 // Predict request\u00a0 const [response] = await predictionServiceClient.predict(request);\u00a0 console.log('Get code completion response');\u00a0 const predictions = response.predictions;\u00a0 console.log('\\tPredictions :');\u00a0 for (const prediction of predictions) {\u00a0 \u00a0 console.log(`\\t\\tPrediction : ${JSON.stringify(prediction)}`);\u00a0 }}callPredict();\n```Before trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/PredictCodeCompletionCommentSample.java) \n```\nimport com.google.cloud.aiplatform.v1beta1.EndpointName;import com.google.cloud.aiplatform.v1beta1.PredictResponse;import com.google.cloud.aiplatform.v1beta1.PredictionServiceClient;import com.google.cloud.aiplatform.v1beta1.PredictionServiceSettings;import com.google.protobuf.InvalidProtocolBufferException;import com.google.protobuf.Value;import com.google.protobuf.util.JsonFormat;import java.io.IOException;import java.util.ArrayList;import java.util.List;public class PredictCodeCompletionCommentSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace this variable before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 // Learn how to create prompts to work with a code model to create code completion suggestions:\u00a0 \u00a0 // https://cloud.google.com/vertex-ai/docs/generative-ai/code/code-completion-prompts\u00a0 \u00a0 String instance =\u00a0 \u00a0 \u00a0 \u00a0 \"{ \\\"prefix\\\": \\\"\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"def reverse_string(s):\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0return s[::-1]\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"#This function\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"\\\"}\";\u00a0 \u00a0 String parameters = \"{\\n\" + \" \u00a0\\\"temperature\\\": 0.2,\\n\" + \" \u00a0\\\"maxOutputTokens\\\": 64,\\n\" + \"}\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String publisher = \"google\";\u00a0 \u00a0 String model = \"code-gecko@001\";\u00a0 \u00a0 predictComment(instance, parameters, project, location, publisher, model);\u00a0 }\u00a0 // Use Codey for Code Completion to complete a code comment\u00a0 public static void predictComment(\u00a0 \u00a0 \u00a0 String instance,\u00a0 \u00a0 \u00a0 String parameters,\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String publisher,\u00a0 \u00a0 \u00a0 String model)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 final String endpoint = String.format(\"%s-aiplatform.googleapis.com:443\", location);\u00a0 \u00a0 PredictionServiceSettings predictionServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 PredictionServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests.\u00a0 \u00a0 try (PredictionServiceClient predictionServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 PredictionServiceClient.create(predictionServiceSettings)) {\u00a0 \u00a0 \u00a0 final EndpointName endpointName =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EndpointName.ofProjectLocationPublisherModelName(project, location, publisher, model);\u00a0 \u00a0 \u00a0 Value instanceValue = stringToValue(instance);\u00a0 \u00a0 \u00a0 List<Value> instances = new ArrayList<>();\u00a0 \u00a0 \u00a0 instances.add(instanceValue);\u00a0 \u00a0 \u00a0 Value parameterValue = stringToValue(parameters);\u00a0 \u00a0 \u00a0 PredictResponse predictResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 predictionServiceClient.predict(endpointName, instances, parameterValue);\u00a0 \u00a0 \u00a0 System.out.println(\"Predict Response\");\u00a0 \u00a0 \u00a0 System.out.println(predictResponse);\u00a0 \u00a0 }\u00a0 }\u00a0 // Convert a Json string to a protobuf.Value\u00a0 static Value stringToValue(String value) throws InvalidProtocolBufferException {\u00a0 \u00a0 Value.Builder builder = Value.newBuilder();\u00a0 \u00a0 JsonFormat.parser().merge(value, builder);\u00a0 \u00a0 return builder.build();\u00a0 }}\n```\n## Response body\n```\n{\u00a0 \"predictions\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"content\": string,\u00a0 \u00a0 \u00a0 \"citationMetadata\": {\u00a0 \u00a0 \u00a0 \u00a0 \"citations\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"startIndex\": integer,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"endIndex\": integer,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"url\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"title\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"license\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"publicationDate\": string\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"logprobs\": {\u00a0 \u00a0 \u00a0 \u00a0 \"tokenLogProbs\": [ float ],\u00a0 \u00a0 \u00a0 \u00a0 \"tokens\": [ string ],\u00a0 \u00a0 \u00a0 \u00a0 \"topLogProbs\": [ { map<string, float> } ]\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"safetyAttributes\":{\u00a0 \u00a0 \u00a0 \u00a0 \"categories\": [ string ],\u00a0 \u00a0 \u00a0 \u00a0 \"blocked\": boolean,\u00a0 \u00a0 \u00a0 \u00a0 \"scores\": [ float ],\u00a0 \u00a0 \u00a0 \u00a0 \"errors\": [ int ]\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"score\": float\u00a0 \u00a0 }\u00a0 ]}\n```\n| Response element | Description                                                                               |\n|:-------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| blocked   | A boolean flag associated with a safety attribute that indicates if the model's input or output was blocked. If blocked is true, then the errors field in the response contains one or more error codes. If blocked is false, then the response doesn't include the errors field.             |\n| categories   | A list the safety attribute category names that are associated with the generated content. The order of the scores in the scores parameter matches the order of the categories. For example, the first score in the scores parameter indicates the likelihood that the response violates the first category in the categories list. |\n| citationMetadata | An element that contains an array of citations.                                                                      |\n| citations   | An array of citations. Each citation contains its metadata.                                                                   |\n| content   | The result generated by the model using the input text.                                                                    |\n| endIndex   | An integer that specifies where a citation ends in the content.                                                                  |\n| errors    | An array of error codes. The errors response field is included in the response only when the blocked field in the response is true. For information about understanding error codes, see Safety errors.                                |\n| license   | The license associated with a citation.                                                                        |\n| publicationDate | The date a citation was published. Its valid formats are YYYY, YYYY-MM, and YYYY-MM-DD.                                                            |\n| score    | A float value that's less than zero. The higher the value for score, the greater confidence the model has in its response.                                                   |\n| startIndex   | An integer that specifies where a citation starts in the content.                                                                 |\n| title    | The title of a citation source. Examples of source titles might be that of a news article or a book.                                                        |\n| url    | The URL of a citation source. Examples of a URL source might be a news website or a GitHub repository.                                                        |\n| tokens    | The sampled tokens.                                                                             |\n| tokenLogProbs  | The sampled tokens' log probabilities.                                                                        |\n| topLogProbs  | The most likely candidate tokens and their log probabilities at each step.                                                               |\n| logprobs   | Results of the `logprobs` parameter. 1-1 mapping to `candidates`.                                                                 |\n## Sample response\n```\n{\u00a0 \"predictions\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"safetyAttributes\": {\u00a0 \u00a0 \u00a0 \u00a0 \"blocked\": false,\u00a0 \u00a0 \u00a0 \u00a0 \"categories\": [],\u00a0 \u00a0 \u00a0 \u00a0 \"scores\": []\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"content\": \" reverses a string\",\u00a0 \u00a0 \u00a0 \"citationMetadata\": {\u00a0 \u00a0 \u00a0 \u00a0 \"citations\": []\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 },\u00a0 \u00a0 \"score\": -1.1161688566207886\u00a0 ]}\n```\n## Stream response from Generative AI models\nThe parameters are the same for streaming and non-streaming requests to the APIs.\nTo view sample code requests and responses using the REST API, see [Examples using the streaming REST API](/vertex-ai/generative-ai/docs/learn/streaming#rest) .\nTo view sample code requests and responses using the Vertex AI SDK for Python, see [Examples using Vertex AI SDK for Python for streaming](/vertex-ai/generative-ai/docs/learn/streaming#sdk) .", "guide": "Generative AI on Vertex AI"}