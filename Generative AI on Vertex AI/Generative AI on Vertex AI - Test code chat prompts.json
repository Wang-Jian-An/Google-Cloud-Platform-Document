{"title": "Generative AI on Vertex AI - Test code chat prompts", "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/code/test-code-chat-prompts", "abstract": "# Generative AI on Vertex AI - Test code chat prompts\nTo design a prompt that works well, test different versions of the prompt and experiment with prompt parameters to determine what results in the optimal response. You can test prompts programmatically with the Codey APIs and in the Google Cloud console with Vertex AI Studio.\n", "content": "## Test chat prompts\nTo test code chat prompts, choose one of the following methods.\nTo test a code chat prompt by using the Vertex AI API, send a POST request to the publisher model endpoint.\nBefore using any of the request data, make the following replacements:- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\n- Messages: Conversation history provided to the model in a structured alternate-author form. Messages appear in chronological order: oldest first, newest last. When the history of messages causes the input to exceed the maximum length, the oldest messages are removed until the entire prompt is within the allowed limit. There must be an odd number of messages (AUTHOR-CONTENT pairs) for the model to generate a response.\n- : The author of the message.\n- : The content of the message.\n- : The temperature is used for sampling during response generation. Temperature controls the degree of randomness in token selection. Lower temperatures are good for prompts that require a less open-ended or creative response, while higher temperatures can lead to more diverse or creative results. A temperature of`0`means that the highest probability tokens are always selected. In this case, responses for a given prompt are mostly deterministic, but a small amount of variation is still possible.\n- : Maximum number of tokens that can be generated in the response. A token is approximately four characters. 100 tokens correspond to roughly 60-80 words.Specify a lower value for shorter responses and a higher value for potentially longer responses.\n- : The number of response variations to return. The  range of valid values is an`int`between 1 and 4.\nHTTP method and URL:\n```\nPOST https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/codechat-bison:predict\n```\nRequest JSON body:\n```\n{\n \"instances\": [ { \"messages\": [  {\n   \"author\": \"AUTHOR\",\n   \"content\": \"CONTENT\"\n  }\n ],\n \"parameters\": {\n \"temperature\": TEMPERATURE,\n \"maxOutputTokens\": MAX_OUTPUT_TOKENS,\n \"candidateCount\": CANDIDATE_COUNT\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/codechat-bison:predict\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/codechat-bison:predict\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the following.To learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/generative_ai/code_chat.py) \n```\nfrom vertexai.language_models import CodeChatModeldef write_a_function(temperature: float = 0.5) -> object:\u00a0 \u00a0 \"\"\"Example of using Codey for Code Chat Model to write a function.\"\"\"\u00a0 \u00a0 # TODO developer - override these parameters as needed:\u00a0 \u00a0 parameters = {\u00a0 \u00a0 \u00a0 \u00a0 \"temperature\": temperature, \u00a0# Temperature controls the degree of randomness in token selection.\u00a0 \u00a0 \u00a0 \u00a0 \"max_output_tokens\": 1024, \u00a0# Token limit determines the maximum amount of text output.\u00a0 \u00a0 }\u00a0 \u00a0 code_chat_model = CodeChatModel.from_pretrained(\"codechat-bison@001\")\u00a0 \u00a0 chat = code_chat_model.start_chat()\u00a0 \u00a0 response = chat.send_message(\u00a0 \u00a0 \u00a0 \u00a0 \"Please help write a function to calculate the min of two numbers\", **parameters\u00a0 \u00a0 )\u00a0 \u00a0 print(f\"Response from Model: {response.text}\")\u00a0 \u00a0 return response\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/predict-code-chat.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION';const aiplatform = require('@google-cloud/aiplatform');// Imports the Google Cloud Prediction service clientconst {PredictionServiceClient} = aiplatform.v1;// Import the helper module for converting arbitrary protobuf.Value objects.const {helpers} = aiplatform;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: 'us-central1-aiplatform.googleapis.com',};const publisher = 'google';const model = 'codechat-bison@001';// Instantiates a clientconst predictionServiceClient = new PredictionServiceClient(clientOptions);async function callPredict() {\u00a0 // Configure the parent resource\u00a0 const endpoint = `projects/${project}/locations/${location}/publishers/${publisher}/models/${model}`;\u00a0 // Learn more about creating prompts to work with a code chat model at:\u00a0 // https://cloud.google.com/vertex-ai/docs/generative-ai/code/code-chat-prompts\u00a0 const prompt = {\u00a0 \u00a0 messages: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 author: 'user',\u00a0 \u00a0 \u00a0 \u00a0 content: 'Hi, how are you?',\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 author: 'system',\u00a0 \u00a0 \u00a0 \u00a0 content: 'I am doing good. What can I help you in the coding world?',\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 author: 'user',\u00a0 \u00a0 \u00a0 \u00a0 content:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'Please help write a function to calculate the min of two numbers',\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 };\u00a0 const instanceValue = helpers.toValue(prompt);\u00a0 const instances = [instanceValue];\u00a0 const parameter = {\u00a0 \u00a0 temperature: 0.5,\u00a0 \u00a0 maxOutputTokens: 1024,\u00a0 };\u00a0 const parameters = helpers.toValue(parameter);\u00a0 const request = {\u00a0 \u00a0 endpoint,\u00a0 \u00a0 instances,\u00a0 \u00a0 parameters,\u00a0 };\u00a0 // Predict request\u00a0 const [response] = await predictionServiceClient.predict(request);\u00a0 console.log('Get code chat response');\u00a0 const predictions = response.predictions;\u00a0 console.log('\\tPredictions :');\u00a0 for (const prediction of predictions) {\u00a0 \u00a0 console.log(`\\t\\tPrediction : ${JSON.stringify(prediction)}`);\u00a0 }}callPredict();\n```Before trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/PredictCodeChatSample.java) \n```\nimport com.google.cloud.aiplatform.v1beta1.EndpointName;import com.google.cloud.aiplatform.v1beta1.PredictResponse;import com.google.cloud.aiplatform.v1beta1.PredictionServiceClient;import com.google.cloud.aiplatform.v1beta1.PredictionServiceSettings;import com.google.protobuf.InvalidProtocolBufferException;import com.google.protobuf.Value;import com.google.protobuf.util.JsonFormat;import java.io.IOException;import java.util.ArrayList;import java.util.List;public class PredictCodeChatSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace this variable before running the sample.\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 // Learn more about creating prompts to work with a code chat model at:\u00a0 \u00a0 // https://cloud.google.com/vertex-ai/docs/generative-ai/code/code-chat-prompts\u00a0 \u00a0 String instance =\u00a0 \u00a0 \u00a0 \u00a0 \"{ \\\"messages\\\": [\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"{\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"author\\\": \\\"user\\\",\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"content\\\": \\\"Hi, how are you?\\\"\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"},\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"{\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"author\\\": \\\"system\\\",\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"content\\\": \\\"I am doing good. What can I help you in the coding world?\\\"\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" },\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"{\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"author\\\": \\\"user\\\",\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"content\\\":\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0 \\\"Please help write a function to calculate the min of two numbers.\\\"\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"}\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"]}\";\u00a0 \u00a0 String parameters = \"{\\n\" + \" \u00a0\\\"temperature\\\": 0.5,\\n\" + \" \u00a0\\\"maxOutputTokens\\\": 1024\\n\" + \"}\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String publisher = \"google\";\u00a0 \u00a0 String model = \"codechat-bison@001\";\u00a0 \u00a0 predictCodeChat(instance, parameters, project, location, publisher, model);\u00a0 }\u00a0 // Use a code chat model to generate a code function\u00a0 public static void predictCodeChat(\u00a0 \u00a0 \u00a0 String instance,\u00a0 \u00a0 \u00a0 String parameters,\u00a0 \u00a0 \u00a0 String project,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String publisher,\u00a0 \u00a0 \u00a0 String model)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 final String endpoint = String.format(\"%s-aiplatform.googleapis.com:443\", location);\u00a0 \u00a0 PredictionServiceSettings predictionServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 PredictionServiceSettings.newBuilder().setEndpoint(endpoint).build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests.\u00a0 \u00a0 try (PredictionServiceClient predictionServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 PredictionServiceClient.create(predictionServiceSettings)) {\u00a0 \u00a0 \u00a0 final EndpointName endpointName =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EndpointName.ofProjectLocationPublisherModelName(project, location, publisher, model);\u00a0 \u00a0 \u00a0 Value instanceValue = stringToValue(instance);\u00a0 \u00a0 \u00a0 List<Value> instances = new ArrayList<>();\u00a0 \u00a0 \u00a0 instances.add(instanceValue);\u00a0 \u00a0 \u00a0 Value parameterValue = stringToValue(parameters);\u00a0 \u00a0 \u00a0 PredictResponse predictResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 predictionServiceClient.predict(endpointName, instances, parameterValue);\u00a0 \u00a0 \u00a0 System.out.println(\"Predict Response\");\u00a0 \u00a0 \u00a0 System.out.println(predictResponse);\u00a0 \u00a0 }\u00a0 }\u00a0 // Convert a Json string to a protobuf.Value\u00a0 static Value stringToValue(String value) throws InvalidProtocolBufferException {\u00a0 \u00a0 Value.Builder builder = Value.newBuilder();\u00a0 \u00a0 JsonFormat.parser().merge(value, builder);\u00a0 \u00a0 return builder.build();\u00a0 }}\n```To test a code chat prompt using Vertex AI Studio in the Google Cloud console, do following :- In the Vertex AI section of the Google Cloud console, go to **Vertex AI Studio** . [Go to Vertex AI Studio](https://console.cloud.google.com/vertex-ai/generative/language) \n- Click **Get started** .\n- Clickadd **Code chat** .\n- In **Model** , select the model with the name that begins with`codechat-bison`. A three digit number after`codechat-bison`indicates the version number of the model. For example,`codechat-bison@001`is the name of version one of the code chat model.\n- Adjust **Temperature** and **Token limit** to experiment with how they affect the response. For more information, see [Code chat model parameters](/vertex-ai/generative-ai/docs/learn/models#code-chat-prompt-parameters) .\n- In **Enter a prompt to begin a conversation** , enter a prompt to start a conversation about code.\n- Click **Continue the conversation** to submit the prompt to the chat.\n- After you receive a response, repeat the previous two steps to continue the conversation.\n- Clicksave_alt **Save** if you want to save a prompt.\n- Clickcode **View code** to see the Python code or a curl command for your prompt.\n```\nMODEL_ID=\"codechat-bison\"PROJECT_ID=PROJECT_IDcurl \\-X POST \\-H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\-H \"Content-Type: application/json\" \\https://us-central1-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/us-central1/publishers/google/models/${MODEL_ID}:predict -d \\$\"{'instances': [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 'messages': [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'author': 'user',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'content': 'Hi, how are you?',\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'author': 'system',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'content': 'I am doing good. What Can I help you with in the coding world?',\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'author': 'user',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'content': 'Please help write a function to calculate the min of two numbers',\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ],\u00a0 'parameters': {\u00a0 \u00a0 'temperature': 0.2,\u00a0 \u00a0 'maxOutputTokens': 1024,\u00a0 \u00a0 'candidateCount': 1\u00a0 }}\"\n```\nTo learn more about how to design chat prompts, see [Chat prompts](/vertex-ai/generative-ai/docs/chat/chat-prompts) .\n## Stream response from code chat model\nTo view sample code requests and responses using the REST API, see [Examples using the streaming REST API](/vertex-ai/generative-ai/docs/learn/streaming#rest) .\nTo view sample code requests and responses using the Vertex AI SDK for Python, see [Examples using Vertex AI SDK for Python for streaming](/vertex-ai/generative-ai/docs/learn/streaming#sdk) .\n## What's next\n- Learn how to [create code completion prompts](/vertex-ai/generative-ai/docs/code/code-completion-prompts) .\n- Learn how to [create code generation prompts](/vertex-ai/generative-ai/docs/code/code-generation-prompts) .\n- Learn about [responsible AI best practices and Vertex AI's safety filters](/vertex-ai/generative-ai/docs/learn/responsible-ai) .", "guide": "Generative AI on Vertex AI"}