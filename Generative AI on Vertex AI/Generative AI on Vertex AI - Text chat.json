{"title": "Generative AI on Vertex AI - Text chat", "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/text-chat", "abstract": "# Generative AI on Vertex AI - Text chat\nThe PaLM 2 for Chat ( `chat-bison` ) foundation model is a large language model (LLM) that excels at language understanding, language generation, and conversations. This chat model is fine-tuned to conduct natural multi-turn conversations, and is ideal for text tasks about code that require back-and-forth interactions.\nFor text tasks that can be completed with one API response (without the need for continuous conversation), use the [Text model](/vertex-ai/generative-ai/docs/model-reference/text) .\nTo explore this model in the console, see the PaLM 2 for Chat model card in the Model Garden.  [Go to the Model Garden](https://console.cloud.google.com/vertex-ai/publishers/google/model-garden/chat-bison)\n", "content": "## Use cases\n- **Customer Service** : Instruct the model to respond as customer service agents that only talk about your company's product\n- **Technical Support** : Instruct the model to interact with customers as a call center agent with specific parameters about how to respond and what not to say\n- **Personas and characters** : Instruct the model to respond in the style of a specific person (\"...in the style of Shakespeare\")\n- **Website companion** : Create a conversational assistant for shopping, travel, and other use cases\nFor more information, see [Design chat prompts](/vertex-ai/generative-ai/docs/chat/chat-prompts) .\n## HTTP request\n```\nPOST https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/chat-bison:predict\n```\nFor more information, see the [predict](/vertex-ai/docs/reference/rest/v1/projects.locations.publishers.models/predict) method.\n## Model versions\nTo use the [latest model version](/vertex-ai/generative-ai/docs/learn/model-versioning#latest-version) , specify the model name without a version number, for example `chat-bison` .\nTo use a [stable model version](/vertex-ai/generative-ai/docs/learn/model-versioning#stable-version) , specify the model version number, for example `chat-bison@002` . Each stable version is available for six months after the release date of the subsequent stable version.\nThe following table contains the available stable model versions:\n| chat-bison model | Release date  | Discontinuation date |\n|:-------------------|:-----------------|:-----------------------|\n| chat-bison@002  | December 6, 2023 | Not applicable   |\n| chat-bison@001  | July 10, 2023 | July 6, 2024   |\nFor more information, see [Model versions and lifecycle](/vertex-ai/generative-ai/docs/learn/model-versioning) .\n## Request body\n```\n{\u00a0 \"instances\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"context\": \u00a0string,\u00a0 \u00a0 \u00a0 \"examples\": [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"input\": { \"content\": string },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"output\": { \"content\": string }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"messages\": [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"author\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"content\": string,\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 }\u00a0 ],\u00a0 \"parameters\": {\u00a0 \u00a0 \"temperature\": number,\u00a0 \u00a0 \"maxOutputTokens\": integer,\u00a0 \u00a0 \"topP\": number,\u00a0 \u00a0 \"topK\": integer,\u00a0 \u00a0 \"groundingConfig\": string,\u00a0 \u00a0 \"stopSequences\": [ string ],\u00a0 \u00a0 \"candidateCount\": integer\u00a0 \u00a0 \"logprobs\": integer,\u00a0 \u00a0 \"presencePenalty\": float,\u00a0 \u00a0 \"frequencyPenalty\": float,\u00a0 \u00a0 \"seed\": integer\u00a0 }}\n```\nFor chat API calls, the `context` , `examples` , and `messages` combine to form the prompt. The following table shows the parameters that you need to configure for the Vertex AI PaLM API for text:\n| Parameter   | Description                                                                                                                                                                       | Acceptable values                           |\n|:--------------------||:---------------------------------------------------------------------------------------------------------------------------|\n| context (optional) | Context shapes how the model responds throughout the conversation. For example, you can use context to specify words the model can or cannot use, topics to focus on or avoid, or the response format or style.                                                                                                                      | Text                              |\n| examples (optional) | Examples for the model to learn how to respond to the conversation.                                                                                                                                                         | [{ \"input\": {\"content\": \"provide content\"}, \"output\": {\"content\": \"provide content\"} }]         |\n| messages (required) | Conversation history provided to the model in a structured alternate-author form. Messages appear in chronological order: oldest first, newest last. When the history of messages causes the input to exceed the maximum length, the oldest messages are removed until the entire prompt is within the allowed limit.                                                                                             | [{ \"author\": \"user\", \"content\": \"user message\" }]                  |\n| temperature   | The temperature is used for sampling during response generation, which occurs when topP and topK are applied. Temperature controls the degree of randomness in token selection. Lower temperatures are good for prompts that require a less open-ended or creative response, while higher temperatures can lead to more diverse or creative results. A temperature of 0 means that the highest probability tokens are always selected. In this case, responses for a given prompt are mostly deterministic, but a small amount of variation is still possible. If the model returns a response that's too generic, too short, or the model gives a fallback response, try increasing the temperature. | 0.0\u20131.0 Default: 0.0                          |\n| maxOutputTokens  | Maximum number of tokens that can be generated in the response. A token is approximately four characters. 100 tokens correspond to roughly 60-80 words. Specify a lower value for shorter responses and a higher value for potentially longer responses.                                                                                                            | 1\u20132048 Default: 1024                          |\n| topK    | Top-K changes how the model selects tokens for output. A top-K of 1 means the next selected token is the most probable among all tokens in the model's vocabulary (also called greedy decoding), while a top-K of 3 means that the next token is selected from among the three most probable tokens by using temperature. For each token selection step, the top-K tokens with the highest probabilities are sampled. Then tokens are further filtered based on top-P with the final token selected using temperature sampling. Specify a lower value for less random responses and a higher value for more random responses.                   | 1\u201340 Default: 40                           |\n| topP    | Top-P changes how the model selects tokens for output. Tokens are selected from the most (see top-K) to least probable until the sum of their probabilities equals the top-P value. For example, if tokens A, B, and C have a probability of 0.3, 0.2, and 0.1 and the top-P value is 0.5, then the model will select either A or B as the next token by using temperature and excludes C as a candidate. Specify a lower value for less random responses and a higher value for more random responses.                                                | 0.0\u20131.0 Default: 0.95                          |\n| stopSequences  | Specifies a list of strings that tells the model to stop generating text if one of the strings is encountered in the response. If a string appears multiple times in the response, then the response truncates where it's first encountered. The strings are case-sensitive. For example, if the following is the returned response when stopSequences isn't specified: public static string reverse(string myString) Then the returned response with stopSequences set to [\"Str\", \"reverse\"] is: public static string                                            | default: []                            |\n| groundingConfig  | Grounding lets you reference specific data when using language models. When you ground a model, the model can reference internal, confidential, and otherwise specific data from your repository and include the data in the response. Only data stores from Vertex AI Search are supported.                                                                                                   | Path should follow format: projects/{project_id}/locations/global/collections/{collection_name}/dataStores/{DATA_STORE_ID} |\n| candidateCount  | The number of response variations to return.                                                                                                                                                               | 1\u20134 Default: 1                            |\n| logprobs   | Returns the top logprobs most likely candidate tokens with their log probabilities at each generation step. The chosen tokens and their log probabilities at each step are always returned. The chosen token may or may not be in the top logprobs most likely candidates.                                                                                                       | 0-5                              |\n| frequencyPenalty | Positive values penalize tokens that repeatedly appear in the generated text, decreasing the probability of repeating content. Acceptable values are -2.0\u20142.0.                                                                                                                                  | Minimum value: -2.0 Maximum value: 2.0                      |\n| presencePenalty  | Positive values penalize tokens that already appear in the generated text, increasing the probability of generating more diverse content. Acceptable values are -2.0\u20142.0.                                                                                                                                | Minimum value: -2.0 Maximum value: 2.0                      |\n| seed    | Decoder generates random noise with a pseudo random number generator, temperature * noise is added to logits before sampling. The pseudo random number generator (prng) takes a seed as input, it generates the same output with the same seed. If seed is not set, the seed used in decoder will not be deterministic, thus the generated random noise will not be deterministic. If seed is set, the generated random noise will be deterministic.                                                             | Optional                             |\n## Sample request\nTo test a text chat by using the Vertex AI API, send a POST request to the publisher model endpoint.\nBefore using any of the request data, make the following replacements:- : Your [project ID](/resource-manager/docs/creating-managing-projects#identifiers) .\nFor other fields, see the\n [Request body](#request_body) \ntable below.\nHTTP method and URL:\n```\nPOST https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/chat-bison:predict\n```\nRequest JSON body:\n```\n{\n \"instances\": [{\n  \"context\": \"CONTEXT\",\n  \"examples\": [  { \n   \"input\": {\"content\": \"EXAMPLE_INPUT\"},\n   \"output\": {\"content\": \"EXAMPLE_OUTPUT\"}\n  }],\n  \"messages\": [  { \n   \"author\": \"AUTHOR\",\n   \"content\": \"CONTENT\",\n  }],\n }],\n \"parameters\": {\n \"temperature\": TEMPERATURE,\n \"maxOutputTokens\": MAX_OUTPUT_TOKENS,\n \"topP\": TOP_P,\n \"topK\": TOP_K\n }\n}\n```\nTo send your request, choose one of these options:\n **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\ncurl -X POST \\ -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\ -H \"Content-Type: application/json; charset=utf-8\" \\ -d @request.json \\ \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/chat-bison:predict\"\n``` **Note:** The following command assumes that you have logged in to  the`gcloud`CLI with your user account by running [gcloud init](/sdk/gcloud/reference/init) or [gcloud auth login](/sdk/gcloud/reference/auth/login) ,  or by using [Cloud Shell](/shell/docs) ,  which automatically logs you into the`gcloud`CLI.  You can check the currently active account by running [gcloud auth list](/sdk/gcloud/reference/auth/list) .\nSave the request body in a file named `request.json` ,  and execute the following command:\n```\n$cred = gcloud auth print-access-token$headers = @{ \"Authorization\" = \"Bearer $cred\" }Invoke-WebRequest ` -Method POST ` -Headers $headers ` -ContentType: \"application/json; charset=utf-8\" ` -InFile request.json ` -Uri \"https://us-central1-aiplatform.googleapis.com/v1/projects/PROJECT_ID/locations/us-central1/publishers/google/models/chat-bison:predict\" | Select-Object -Expand Content\n```\nYou should receive a JSON response similar to the [sample response](#sample_response) .To learn how to install or update the Python, see [Install the Vertex AI SDK for Python](/vertex-ai/docs/start/use-vertex-ai-python-sdk) .    For more information, see the [   Python API reference documentation](/python/docs/reference/aiplatform/latest) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/generative_ai/chat.py) \n```\nfrom vertexai.language_models import ChatModel, InputOutputTextPairdef science_tutoring(temperature: float = 0.2) -> None:\u00a0 \u00a0 chat_model = ChatModel.from_pretrained(\"chat-bison@001\")\u00a0 \u00a0 # TODO developer - override these parameters as needed:\u00a0 \u00a0 parameters = {\u00a0 \u00a0 \u00a0 \u00a0 \"temperature\": temperature, \u00a0# Temperature controls the degree of randomness in token selection.\u00a0 \u00a0 \u00a0 \u00a0 \"max_output_tokens\": 256, \u00a0# Token limit determines the maximum amount of text output.\u00a0 \u00a0 \u00a0 \u00a0 \"top_p\": 0.95, \u00a0# Tokens are selected from most probable to least until the sum of their probabilities equals the top_p value.\u00a0 \u00a0 \u00a0 \u00a0 \"top_k\": 40, \u00a0# A top_k of 1 means the selected token is the most probable among all tokens.\u00a0 \u00a0 }\u00a0 \u00a0 chat = chat_model.start_chat(\u00a0 \u00a0 \u00a0 \u00a0 context=\"My name is Miles. You are an astronomer, knowledgeable about the solar system.\",\u00a0 \u00a0 \u00a0 \u00a0 examples=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputOutputTextPair(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input_text=\"How many moons does Mars have?\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 output_text=\"The planet Mars has two moons, Phobos and Deimos.\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 )\u00a0 \u00a0 response = chat.send_message(\u00a0 \u00a0 \u00a0 \u00a0 \"How many planets are there in the solar system?\", **parameters\u00a0 \u00a0 )\u00a0 \u00a0 print(f\"Response from Model: {response.text}\")\u00a0 \u00a0 return response\n```Before trying this sample, follow the Node.js setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Node.js API reference documentation](/nodejs/docs/reference/aiplatform/latest) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/ai-platform/snippets/predict-chat-prompt.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\\\u00a0* (Not necessary if passing values as arguments)\u00a0*/// const project = 'YOUR_PROJECT_ID';// const location = 'YOUR_PROJECT_LOCATION';const aiplatform = require('@google-cloud/aiplatform');// Imports the Google Cloud Prediction service clientconst {PredictionServiceClient} = aiplatform.v1;// Import the helper module for converting arbitrary protobuf.Value objects.const {helpers} = aiplatform;// Specifies the location of the api endpointconst clientOptions = {\u00a0 apiEndpoint: 'us-central1-aiplatform.googleapis.com',};const publisher = 'google';const model = 'chat-bison@001';// Instantiates a clientconst predictionServiceClient = new PredictionServiceClient(clientOptions);async function callPredict() {\u00a0 // Configure the parent resource\u00a0 const endpoint = `projects/${project}/locations/${location}/publishers/${publisher}/models/${model}`;\u00a0 const prompt = {\u00a0 \u00a0 context:\u00a0 \u00a0 \u00a0 'My name is Miles. You are an astronomer, knowledgeable about the solar system.',\u00a0 \u00a0 examples: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 input: {content: 'How many moons does Mars have?'},\u00a0 \u00a0 \u00a0 \u00a0 output: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 content: 'The planet Mars has two moons, Phobos and Deimos.',\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 \u00a0 messages: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 author: 'user',\u00a0 \u00a0 \u00a0 \u00a0 content: 'How many planets are there in the solar system?',\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 ],\u00a0 };\u00a0 const instanceValue = helpers.toValue(prompt);\u00a0 const instances = [instanceValue];\u00a0 const parameter = {\u00a0 \u00a0 temperature: 0.2,\u00a0 \u00a0 maxOutputTokens: 256,\u00a0 \u00a0 topP: 0.95,\u00a0 \u00a0 topK: 40,\u00a0 };\u00a0 const parameters = helpers.toValue(parameter);\u00a0 const request = {\u00a0 \u00a0 endpoint,\u00a0 \u00a0 instances,\u00a0 \u00a0 parameters,\u00a0 };\u00a0 // Predict request\u00a0 const [response] = await predictionServiceClient.predict(request);\u00a0 console.log('Get chat prompt response');\u00a0 const predictions = response.predictions;\u00a0 console.log('\\tPredictions :');\u00a0 for (const prediction of predictions) {\u00a0 \u00a0 console.log(`\\t\\tPrediction : ${JSON.stringify(prediction)}`);\u00a0 }}callPredict();\n```Before trying this sample, follow the Java setup instructions in the [Vertex AI quickstart using   client libraries](/vertex-ai/docs/start/client-libraries) .       For more information, see the [Vertex AI Java API reference documentation](/java/docs/reference/google-cloud-aiplatform/latest/com.google.cloud.aiplatform.v1) .\nTo authenticate to Vertex AI, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/aiplatform/src/main/java/aiplatform/PredictChatPromptSample.java) \n```\nimport com.google.cloud.aiplatform.v1beta1.EndpointName;import com.google.cloud.aiplatform.v1beta1.PredictResponse;import com.google.cloud.aiplatform.v1beta1.PredictionServiceClient;import com.google.cloud.aiplatform.v1beta1.PredictionServiceSettings;import com.google.protobuf.Value;import com.google.protobuf.util.JsonFormat;import java.io.IOException;import java.util.ArrayList;import java.util.List;// Send a Predict request to a large language model to test a chat promptpublic class PredictChatPromptSample {\u00a0 public static void main(String[] args) throws IOException {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String instance =\u00a0 \u00a0 \u00a0 \u00a0 \"{\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \\\"context\\\": \u00a0\\\"My name is Ned. You are my personal assistant. My favorite movies\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" are Lord of the Rings and Hobbit.\\\",\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \\\"examples\\\": [ { \\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0 \u00a0 \\\"input\\\": {\\\"content\\\": \\\"Who do you work for?\\\"},\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0 \u00a0 \\\"output\\\": {\\\"content\\\": \\\"I work for Ned.\\\"}\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0},\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0{ \\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0 \u00a0 \\\"input\\\": {\\\"content\\\": \\\"What do I like?\\\"},\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0 \u00a0 \\\"output\\\": {\\\"content\\\": \\\"Ned likes watching movies.\\\"}\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0}],\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \\\"messages\\\": [\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0{ \\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0 \u00a0 \\\"author\\\": \\\"user\\\",\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0 \u00a0 \\\"content\\\": \\\"Are my favorite movies based on a book series?\\\"\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0 \u00a0}]\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"}\";\u00a0 \u00a0 String parameters =\u00a0 \u00a0 \u00a0 \u00a0 \"{\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"temperature\\\": 0.3,\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"maxDecodeSteps\\\": 200,\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"topP\\\": 0.8,\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \" \u00a0\\\"topK\\\": 40\\n\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 + \"}\";\u00a0 \u00a0 String project = \"YOUR_PROJECT_ID\";\u00a0 \u00a0 String publisher = \"google\";\u00a0 \u00a0 String model = \"chat-bison@001\";\u00a0 \u00a0 predictChatPrompt(instance, parameters, project, publisher, model);\u00a0 }\u00a0 static void predictChatPrompt(\u00a0 \u00a0 \u00a0 String instance, String parameters, String project, String publisher, String model)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 PredictionServiceSettings predictionServiceSettings =\u00a0 \u00a0 \u00a0 \u00a0 PredictionServiceSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEndpoint(\"us-central1-aiplatform.googleapis.com:443\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests.\u00a0 \u00a0 try (PredictionServiceClient predictionServiceClient =\u00a0 \u00a0 \u00a0 \u00a0 PredictionServiceClient.create(predictionServiceSettings)) {\u00a0 \u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 \u00a0 final EndpointName endpointName =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EndpointName.ofProjectLocationPublisherModelName(project, location, publisher, model);\u00a0 \u00a0 \u00a0 Value.Builder instanceValue = Value.newBuilder();\u00a0 \u00a0 \u00a0 JsonFormat.parser().merge(instance, instanceValue);\u00a0 \u00a0 \u00a0 List<Value> instances = new ArrayList<>();\u00a0 \u00a0 \u00a0 instances.add(instanceValue.build());\u00a0 \u00a0 \u00a0 Value.Builder parameterValueBuilder = Value.newBuilder();\u00a0 \u00a0 \u00a0 JsonFormat.parser().merge(parameters, parameterValueBuilder);\u00a0 \u00a0 \u00a0 Value parameterValue = parameterValueBuilder.build();\u00a0 \u00a0 \u00a0 PredictResponse predictResponse =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 predictionServiceClient.predict(endpointName, instances, parameterValue);\u00a0 \u00a0 \u00a0 System.out.println(\"Predict Response\");\u00a0 \u00a0 }\u00a0 }}\n```\n## Response body\n```\n{\u00a0 \"predictions\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"candidates\": [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"author\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"content\": string\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"citationMetadata\": {\u00a0 \u00a0 \u00a0 \u00a0 \"citations\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"startIndex\": integer,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"endIndex\": integer,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"url\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"title\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"license\": string,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"publicationDate\": string\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"logprobs\": {\u00a0 \u00a0 \u00a0 \u00a0 \"tokenLogProbs\": [ float ],\u00a0 \u00a0 \u00a0 \u00a0 \"tokens\": [ string ],\u00a0 \u00a0 \u00a0 \u00a0 \"topLogProbs\": [ { map<string, float> } ]\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"safetyAttributes\": {\u00a0 \u00a0 \u00a0 \u00a0 \"categories\": [ string ],\u00a0 \u00a0 \u00a0 \u00a0 \"blocked\": false,\u00a0 \u00a0 \u00a0 \u00a0 \"scores\": [ float ],\u00a0 \u00a0 \u00a0 \u00a0 \"errors\": [ int ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 ],\u00a0 \"metadata\": {\u00a0 \u00a0 \"tokenMetadata\": {\u00a0 \u00a0 \u00a0 \"input_token_count\": {\u00a0 \u00a0 \u00a0 \u00a0 \"total_tokens\": integer,\u00a0 \u00a0 \u00a0 \u00a0 \"total_billable_characters\": integer\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"output_token_count\": {\u00a0 \u00a0 \u00a0 \u00a0 \"total_tokens\": integer,\u00a0 \u00a0 \u00a0 \u00a0 \"total_billable_characters\": integer\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```\n| Response element | Description                                           |\n|:-------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| content   | Text content of the chat message.                                      |\n| candidates   | The chat result generated from given message.                                   |\n| categories   | The display names of Safety Attribute categories associated with the generated content. Order matches the Scores.                  |\n| author    | Author tag for the turn.                                        |\n| scores    | The confidence scores of the each category, higher value means higher confidence.                          |\n| blocked   | A flag indicating if the model's input or output was blocked.                               |\n| startIndex   | Index in the prediction output where the citation starts (inclusive). Must be >= 0 and < end_index.                     |\n| endIndex   | Index in the prediction output where the citation ends (exclusive). Must be > start_index and < len(output).                   |\n| url    | URL associated with this citation. If present, this URL links to the webpage of the source of this citation. Possible URLs include news websites, GitHub repos, etc.     |\n| title    | Title associated with this citation. If present, it refers to the title of the source of this citation. Possible titles include news titles, book titles, etc.      |\n| license   | License associated with this recitation. If present, it refers to the license of the source of this citation. Possible licenses include code licenses, e.g., mit license.    |\n| publicationDate | Publication date associated with this citation. If present, it refers to the date at which the source of this citation was published. Possible formats are YYYY, YYYY-MM, YYYY-MM-DD. |\n| safetyAttributes | A collection of categories and their associated confidence scores. 1-1 mapping to candidates.                       |\n| input_token_count | Number of input tokens. This is the total number of tokens across all messages, examples, and context.                    |\n| output_token_count | Number of output tokens. This is the total number of tokens in content across all candidates in the response.                   |\n| tokens    | The sampled tokens.                                         |\n| tokenLogProbs  | The sampled tokens' log probabilities.                                    |\n| topLogProb   | The most likely candidate tokens and their log probabilities at each step.                           |\n| logprobs   | Results of the `logprobs` parameter. 1-1 mapping to `candidates`.                              |\n## Sample response\n```\n{\u00a0 \"predictions\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"citationMetadata\": {\u00a0 \u00a0 \u00a0 \u00a0 \"citations\": []\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"safetyAttributes\": {\u00a0 \u00a0 \u00a0 \u00a0 \"scores\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0.1\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"categories\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"Finance\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \"blocked\": false\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \"candidates\": [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"author\": \"AUTHOR\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"content\": \"RESPONSE\"\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 ]}\n```\n## Stream response from Generative AI models\nThe parameters are the same for streaming and non-streaming requests to the APIs.\nTo view sample code requests and responses using the REST API, see [Examples using the streaming REST API](/vertex-ai/generative-ai/docs/learn/streaming#rest) .\nTo view sample code requests and responses using the Vertex AI SDK for Python, see [Examples using Vertex AI SDK for Python for streaming](/vertex-ai/generative-ai/docs/learn/streaming#sdk) .", "guide": "Generative AI on Vertex AI"}