{"title": "Compute Engine - Troubleshooting sudoers files", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Troubleshooting sudoers files\nThe page provides tips on using the `sudo` command-line utility, managing the `sudoers` plugin, and preventing or fixing issues that arise.\n", "content": "## Causes of problems\nDuring each execution of the `sudo` command, the following process takes place to validate the `sudoers` files:\n- The syntax is checked for correctness.\n- The content is analyzed to exclude some of the logical errors.\n- Ownership and permissions are checked.\nThe validation of the `sudoers` files might fail due to any of the following errors:\nYou must follow specific syntax rules when you make changes to the `sudoers` files. Any deviation from this syntax, including but not limited to a missing or extra character or an inappropriate comma, can make the file invalid. Invalidation of the file makes it impossible to use the `sudo` utility.\n **Solution** \nThe solution is to use `visudo` utility to edit the `sudoers` files. It validates the file content before saving and notifies in case of issues. The `visudo` utility was created for editing the file in a safe fashion.The following examples shows both correct and incorrect syntax samples:\n Correct syntax\n```\nuser ALL=(ALL) ALL\n```\n Incorrect syntax\n```\nuser ALL=(ALL), ALL\n```\nSyntax error example\n```\n$ sudo useradd username\n/etc/sudoers:20:17: syntax error\nuser ALL=(ALL), ALL\n    ^\n```\nErrors of this type can be caused by one of the following:- A misunderstanding of the principles of the`sudoers`plugin.\n- Deviations from the correct syntax.\nHowever, logical errors are not recognized during validation, because they do not violate syntax rules and therefore are tricky to detect.\n **Solution** \nYou must carefully read the official documentation and adhere to its principles when you edit the file.\nGoogle also recommends that you use the `visudo` utility to edit the `sudoers` files, as it can detect some types of logical errors, such as:- Undefined or unused aliases\n- Cyclic references\n- Duplicate entries\nIf any issues are detected, you see a warning message.The following examples shows both logically correct and incorrect samples:\n Logically correct\n```\nbarbara ALL=(ALL:ALL) /usr/bin/ls\n```\n Logically incorrect\n```\nbarbara ALL=(4LL:ALL) /usr/bin/ls\n    ^\nbarbara ALL=(ALL;ALL) /usr/bin/ls\n     ^\nbar6ara ALL=(ALL:ALL) /usr/bin/1s\n ^        ^\n```\nIn addition to errors caused by the content of the `sudoers` files, their excessive file permissions or incorrect ownership can also cause the `sudo` utility to fail.\n **Solution** \nYou see a description of these errors in the output of the failed `sudo` command. Read through the error message description and make the necessary corrections. The following is an example of the correct file permissions and ownership\n```\n$ ls -l /etc/sudoers\n-r--r----- 1 root root 700 Jan 1 12:00 /etc/sudoers\n$ sudo useradd username\n```\n The following example shows the error that is displayed when there are redundant permissions for the **all users** permission group:\n```\n$ ls -l /etc/sudoers\n-r--r---w- 1 root root 700 Jan 1 12:00 /etc/sudoers\n$ sudo useradd username\nsudo: /etc/sudoers is world writable\nsudo: no valid sudoers sources found, quitting\nsudo: error initializing audit plugin sudoers_audit\n```\n The following example shows the error that is displayed for incorrect ownership. In this example, a user with an ID that is not `0` (or a user that is not `root` ) is the owner of the file:\n```\n$ ls -l /etc/sudoers\n-r--r----- 1 user user 700 Jan 1 12:00 /etc/sudoers\n$ sudo useradd username\nsudo: /etc/sudoers is owned by uid 1000, should be 0\nsudo: no valid sudoers sources found, quitting\nsudo: error initializing audit plugin sudoers_audit\n```\nFor more information about the configuration of the `sudoers` files, read [Sudoers Manual](https://www.sudo.ws/docs/man/sudoers.man/) .\nTo learn how to manage and use the `visudo` editor, read [Visudo Manual](https://www.sudo.ws/docs/man/visudo.man/) .\n## Consequences of problems\nIssues in the `sudoers` files cause negative effects and can affect the functionality of the entire system.\n- The `sudo` command no longer works.This is the most noticeable consequence of issues in the `sudoers` files. The consequence of this is the inability to use elevated privileges for users, which blocks their activity on the server.However, more destructive and unpredictable consequences are failures of the applications that rely on the `sudo` command. In some cases, this may cause the application to fail completely, leading to unexpected behavior, crashes, or data loss. Another example is when the `sudo` command is called by an application during the OS boot sequence and fails. It can lead to OS failure or cause the boot sequence to get stuck. **Tip:** If there is some kind of problem with the `sudoers` files, we strongly recommended that you stop the workload on the virtual machine (VM) instance, if possible, until the problem is fixed. This can be done in a number of ways, including the following: - Temporarily disabling the startup or shutdown scripts.- - Pausing the`cron`jobs.\n- Possible unauthorized access to the system.Another risky consequence is that issues in the `sudoers` files can lead to unauthorized access to the system. This can happen due to a logical error, when rules in the `sudoers` files give some users or groups excessive permissions.This may also happen because the system owner temporarily disables or weakens the system's defenses in order to log in and fix the problem. **Tip:** In order to avoid unauthorized access it is recommended to carefully read the official documentation before editing the `sudoers` files. Additionally, during the recovery process, we highly recommended that you don't use unsafe approaches such as the following: - Temporarily setting the password of the`root`user through the startup script.- - Creating a temporary user with administrator rights and the permissions to log in without a password.## Recovery in case of problems\nIf you lose elevated user privileges or can't use the `sudo` command due to problems with the `sudoers` files, then use the superuser account for recovery.\nIn Unix-like operating systems, the superuser is a special user account with ID equal to 0, that is usually called `root` . The superuser has full access to the system resources, and can perform any administrative task without restrictions. While interacting with the OS on behalf of the superuser is generally considered insecure, it may be the only option for certain tasks such as recovery of the `sudoers` files.\nLogging in directly as the superuser exposes the OS to risk. To avoid this risk, Google recommends that you use a startup script functionality, as this script is executed on behalf of the superuser.\nRead more about Compute Engine [startup scripts](/compute/docs/instances/startup-scripts/linux) .\nTo recover the `sudoers` files with a startup script, do the following:\n- Create a backup copy of the current startup script if it's already in use. The backup approach depends on how the startup script is configured.\nIf the script content is set directly in the metadata value, you can copy the script content to the [Cloud Storage bucket](/storage/docs/uploading-objects) , local file or any other temporary private storage.\n **Caution:** Use only trusted storage so that the script doesn't leak during the recovery process.\nIf the contents of the script are already in the remote storage and its URL address is used, then you can just temporary remove the `startup-script-url` metadata key to disable the current startup script.\n **Caution:** Do not remove the script file itself from the remote storage.\n- [Update the startup script](/compute/docs/instances/startup-scripts/linux#passing-directly) with the following command sequence:```\nmv /etc/sudoers /etc/sudoers.backup.$(date +\"%s\") && echo \"%google-sudoers ALL=(ALL:ALL) NOPASSWD:ALL\" > /etc/sudoers && chown 0:0 /etc/sudoers && chmod 0440 /etc/sudoers\n```\n- [Stop the VM](/compute/docs/instances/stop-start-instance) , if it's running. Restart the VM to trigger the execution of the startup script.\n- [\u0421onnect to the VM](/compute/docs/connect/standard-ssh) and edit the broken `sudoers` file to recover it.```\nsudo visudo /etc/sudoers.backup.TIMESTAMP\n``` **Note:** Instead of fixing the `sudoers` file manually, you can [create a new VM instance](/compute/docs/create-linux-vm-instance) with the same boot disk image and copy the correct file from there.\n- Save the changes and replace the current `/etc/sudoers` file with the file you just edited.```\nsudo mv /etc/sudoers.backup.TIMESTAMP /etc/sudoers\n```\n- Make sure that the original issue with using the `sudo` command and elevated privileges has been fixed.\n- Remove the temporary startup script and restore the original one if it was used. **Note:** If the temporary startup script remains, the content of the `/etc/sudoers` file is overwritten each time the VM is restarted.## What's Next?\n- Learn how to [recover an inaccessible or corrupted VM](/compute/docs/disks/recover-vm) .\n- Learn how to [add an existing disk to another VM](/compute/docs/disks/add-persistent-disk#create_disk) .", "guide": "Compute Engine"}