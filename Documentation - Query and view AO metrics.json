{"title": "Documentation - Query and view AO metrics", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Query and view AO metrics\nAfter [collecting metrics](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/collect-metrics) from workloads deployed in your GDCH project, you can [query and view metrics on dashboards](#query-and-view-metrics-on-dashboards) from the project's system monitoring instance or [query metrics from the GDCH HTTP API](#query-metrics-from-http-api) .\n", "content": "## Query and view metrics on dashboards\nTo view metrics, use dashboards on the **Explore** page of the system monitoring instance. To view specific metrics, make queries from the **Explore** page.\n### Before you begin\nBefore querying and viewing metrics on dashboards, you must obtain access to the system monitoring instance. For more information, see [Get access to dashboards](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/get-access-dashboards) .\n### Build queries for your metrics\nMonitor and view metrics for data observability purposes on your applications through the system monitoring instance of your project. The integrated user interface (UI) of the instance contains default dashboards from standard components and [customized dashboards you create](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/create-dashboards) for your specific use case needs. Assuming your environment is up and running, you immediately see a few metrics dashboards in the **Available Dashboards** page.\nQuery metrics from the UI to visually retrieve metrics from your project and get an integrated view to monitor your applications. To filter results, search for metrics by labels using query language expressions.\nThe following URL is the endpoint of the monitoring instance of your project:\n```\nhttps://GDCH_URL/PROJECT_NAMESPACE/grafana\n```\nReplace the following:\n- : the URL of your organization in GDCH\n- : the namespace of your projectComplete the following steps to retrieve metrics:\n- In the GDCH console, select a project.\n- On the navigation menu, click **Operations** > **Monitoring** .\n- Click **View all in Grafana** .A new page opens the [URL of the monitoring instance of your project](#monitoring-instance-endpoint) .\n- On the UI of the monitoring instance, click explore **Explore** from the navigation menu to open the **Explore** page.\n- From the drop-down menu at the **Explore** bar, select **prometheus** to retrieve metrics.\n- Enter a query to search for metrics using [PromQL](https://prometheus.io/docs/prometheus/latest/querying/basics/) (Prometheus Query Language) expressions. You can do this step in either of the following ways:- Select a metric and a label for your query from the **Metric** and **Label filters** drop-down menus. Clickadd **Add** to add more labels in your query. Then, click **Run query** .\n- Enter your query directly in the **Metrics** text field and pressto run the query.\nThe page displays the metrics matching your query.**Figure 1.** Menu option to query metrics from the UI.\nIn figure 1, the **prometheus** option displays the interface that lets you build queries from the monitoring instance to retrieve metrics.\nFor value examples of labels that you can use to query metrics, see [Sample queries and labels](#sample-queries-and-labels) .\n### Sample queries and labels\nYou can query collected metrics using the metric name and key-value labels. For this reason, a PromQL query has the following syntax:\n```\nmetric_name{label_one=\"value\", label_two=\"value\"}\n```\nLabels let you differentiate the characteristics of a metric. In this way, container authors make their workloads generate metrics and add tags to filter those metrics for their needs. For example, you can have an `api_http_requests_total` metric to count the number of HTTP requests received. Then, you can add a `request_method` label on this metric, which takes a `POST` , `GET` , or `PUT` value. Consequently, you create three metric streams for each request type you might receive. In this case, to find the number of HTTP `GET` requests, you run the following query:\n```\napi_http_requests_total{request_method=\"GET\"}\n```\nSee [https://prometheus.io/docs/practices/naming/](https://prometheus.io/docs/practices/naming/) for more information about metrics and labels.\nThe following are some of the default labels that the `MonitoringTarget` custom resource adds and that you can use to query metrics:\n- `_gdch_service`: The short name of the service\n- `cluster`: The name of the cluster\n- `container_name`: The name of the container within a pod\n- `namespace_name`: Your project namespace\n- `pod_name`: The pod name prefix\nThe following table describes the labels that the scraping service adds automatically:\n| Metric label | Description                                                                           |\n|:---------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| job   | The internal name of the scrape job used to collect the metric. Jobs created by the MonitoringTarget custom resource have a name with the following pattern: PROJECT_NAME-obs-system/MONITORINGTARGET_NAME.MONITORINGTARGET_NAMESPACE/I/J I and J are unique numbers determined internally to avoid name conflicts. |\n| instance  | The $IP:$PORT of the scrapped service. If a workload resource has multiple replicas, use this field to differentiate them.                                               |\nThe following code samples show the use of labels and values to query different metrics for data observability:\n- View all the metric streams of the processed operations in your project:```\nprocessed_ops_total\n```\n- View the processed operations collected in a cluster:```\nprocessed_ops_total{cluster=\"CLUSTER_NAME\"}\n```\n- View the CPU usage collected on a cluster:```\ncpu_usage{cluster=\"CLUSTER_NAME\"}\n```\nUse the metrics relabeling tool to add labels not exposed initially by the scrapped containers and rename produced metrics. You must configure the `MonitoringTarget` custom resource to add labels on the metrics it collects. Specify those labels in the `metricsRelabelings` field of the custom resource. For more information, see [Label metrics](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/label-metrics) .\n## Query metrics from the HTTP API\nQuery metrics directly from the HTTP API to read and export metrics and other time series data to external tools, set up automated tasks, adapt responses, and build integrations according to your system monitoring use case. For example, insert the output into another command, export details to text file formats, or configure a Linux cron job. You can call the API from the command-line interface (CLI) or a web browser and use query language expressions as endpoint parameters to obtain the result in JSON format.\nThis section explains how to call the HTTP API endpoint from the CLI using the API specification to query metrics for data observability.\n### Before you begin\nYou must obtain authorization to query metrics from the CLI. To get the permissions you need to access the HTTP API endpoint, ask your Project IAM Admin to grant you the corresponding viewer role in your project namespace.\nFor information about setting role bindings from the GDCH console, see [Grant access to project resources](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/iam/role-bindings) .\n### HTTP API endpoint\nThe following URL is the HTTP API endpoint for accessing metrics:\n```\nhttps://GDCH_URL/PROJECT_NAME/cortex/prometheus/\n```\nReplace the following:\n- : the URL of your organization in GDCH\n- : the name of your project\n**Note:** You can directly open the URL in a web browser to query metrics. The instructions in the following section use the `curl` command to call the API endpoint, but the same applies to a web browser.\n### Authenticate the cURL request\n- [Download and install the gdcloud CLI](/distributed-cloud/hosted/docs/latest/gdch/resources/gdcloud-overview) .\n- [Set](/distributed-cloud/hosted/docs/latest/gdch/resources/gdcloud-reference/gdcloud-config-set) the gdcloud `core/organization_console_url` property:```\ngdcloud config set core/organization_console_url https://GDCH_URL\n```Replace with the URL of an organization in GDCH.\n- [Sign in with the configured identity provider](/distributed-cloud/hosted/docs/latest/gdch/resources/gdcloud-auth#sign-in-with-idp) :```\ngdcloud auth login\n```\n- Use your user and password to authenticate and sign in.\nWhen the login is successful, you can use the authorization header in your cURL request through the `gdcloud auth print-identity-token` command. For more information, see [gdcloud auth](/distributed-cloud/hosted/docs/latest/gdch/resources/gdcloud-reference/gdcloud-auth) .\n### Call the API endpoint\nWork through the following steps to reach the HTTP API endpoint from the CLI and query metrics:\n- Ensure you meet the [prerequisites](#before-you-begin-http) and [the login authentication for the cURL request](#auth-curl-login) .\n- Open the CLI.\n- Use the `curl` tool to call the [HTTP API endpoint](#http-api-endpoint) and extend the URL using the standard [https://prometheus.io/docs/prometheus/latest/querying/api/](https://prometheus.io/docs/prometheus/latest/querying/api/) to query metrics. For example:```\ncurl https://GDCH_URL/PROJECT_NAME/cortex/prometheus/api/v1/query?query=my_metric{cluster=\"org-1-system\"}&time=2015-07-01T20:10:51.781Z \\\n-H \"Authorization: Bearer $(gdcloud auth print-identity-token \\\n--audiences=https://GDCH_URL)\"\n```Replace the following:- ``: the URL of an organization in GDCH\n- ``: the name of your projectYou obtain the output following the command. The API response is in JSON format.\n**Note:** Add the `api/v1/query` endpoint to query metrics from the URL. You can include optional parameters for your API call after a ( `?` ) at the end of the URL. Separate these parameters with ( `&` ) symbols as in the example of the query from the last step.", "guide": "Documentation"}