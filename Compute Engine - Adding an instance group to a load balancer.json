{"title": "Compute Engine - Adding an instance group to a load balancer", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Adding an instance group to a load balancer\nGoogle Cloud load balancing uses instance groups, both managed and unmanaged, to serve traffic. Depending on the type of load balancer you are using, you can add instance groups to a target pool or backend service. To learn more about load balancing, see [Choosing a load balancer](/load-balancing/docs/choosing-load-balancer) .\nTo learn more about instance groups, read the [Instance groups overview](/compute/docs/instance-groups) .\n", "content": "## Before you begin\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nTo use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```## Limitations\n- If you want to use [load balancing](/load-balancing/docs/backend-service) with a regional MIG, the following limitations apply:- You cannot use the`maxRate`balancing mode.\n- If you use an HTTP(S) load balancing scheme with a regional MIG, you must choose the`maxRatePerInstance`or`maxUtilization`balancing mode.\n## Adding a managed instance group to a backend service\nA backend service is necessary for creating most types of load balancers.\nA backend service can contain multiple backends. An instance group is a type of backend. The instances in the instance group respond to traffic from the load balancer. The backend service in turn knows which instances it can use, how much traffic they can handle, and how much traffic they are currently handling. In addition, the backend service monitors health checking and does not send new connections to unhealthy instances.\nUse these instructions to add a managed instance group to a backend service.\n- Go to the Load balancing page in the Google Cloud console. [Go to the Load balancing page](https://console.cloud.google.com/net-services/loadbalancing/backends/list) \n- Click the name of the backend service to which you are adding the managed instance group.\n- Click **Edit** .\n- Click **+Add backend** .\n- Select the instance group you want to add.\n- Edit any optional settings you want to change.\n- Save your changes.\nUse the [add-backend command](/sdk/gcloud/reference/compute/backend-services/add-backend) :\n```\n gcloud compute backend-services add-backend BACKEND_SERVICE_NAME \\\n  --instance-group=INSTANCE_GROUP \\\n  [--instance-group-region=INSTANCE_GROUP_REGION | --instance-group-zone=INSTANCE_GROUP_ZONE] \\\n  --balancing-mode=BALANCING_MODE\n```\nAdditional parameters are required depending on the balancing mode of the managed instance group. For more information, see the [add-backend command](/sdk/gcloud/reference/compute/backend-services/add-backend) in the SDK.\nTo add a backend service using the REST API, see [backendServices](/compute/docs/reference/rest/v1/backendServices) .\n## Adding a managed instance group to a target pool\nA target pool is an object that contains one or more virtual machine instances. A target pool is used in [external passthrough Network Load Balancers](/load-balancing/docs/network) , where the load balancer forwards user requests to the attached target pool. The instances that are part of that target pool serve these requests and return a response. You can add a managed instance group to a target pool so that when instances are added or removed from the instance group, the target pool is also automatically updated with the changes.\nBefore you can add a managed instance group to a target pool, the target pool must exist. For more information, see the documentation for [Adding a target pool](/compute/docs/load-balancing/network/target-pools#add_a_target_pool) .\nTo add an existing managed instance group to a target pool, follow these instructions. This causes all VM instances that are part of the managed instance group to be added to the target pool.\n**Note:** While the instance is being added, the instance's `currentAction` will change to [REFRESHING](/compute/docs/reference/latest/instanceGroupManagers#currentActions.refreshing) . You can not use the instance while it is currently `REFRESHING` but you can use the [wait-until-stable](/sdk/gcloud/reference/compute/instance-groups/managed/wait-until-stable) command to poll the instance until it becomes stable.\n- Go to the Target Pools page in the Google Cloud console. [Go to the Target Pools page](https://console.cloud.google.com/net-services/loadbalancing/advanced/targetPools/list) \n- Click the target pool you want to add the instance group to.\n- Click the **Edit** button.\n- Scroll down to the **VM instances** section and click on **Select instance groups** .\n- Select an instance group from the drop-down menu.\n- Save your changes.\nUse the [set-target-pools command](/sdk/gcloud/reference/compute/instance-groups/managed/set-target-pools) :\n```\ngcloud compute instance-groups managed set-target-pools INSTANCE_GROUP \\\n  --target-pools TARGET_POOL,..\n```\nwhere:- ``is the name of the instance group.\n- ``is the name of one or more target pools to add this instance group to.\nCall the `setTargetPools` method for a [regional MIG](/compute/docs/reference/rest/v1/regionInstanceGroupManagers/setTargetPools) or [zonal MIG](/compute/docs/reference/rest/v1/instanceGroupManagers/setTargetPools) . For example:\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/regions/REGION/regionInstanceGroupManagers/INSTANCE_GROUP/setTargetPools\n```\nwhere:- ``is the project ID for this request.\n- ``is the region for the instance group.\n- ``is the name of the instance group.\nThe request body should contain a list of URIs to the target pools you want to add this group. For example:\n```\n{\n \"targetPools\": [ \"regions/us-central1/targetPools/example-targetpool-1\",\n \"regions/us-central1/targetPools/example-targetpool-2\"\n ]\n}\n```\n## Assigning named ports to managed instance groups\nNamed ports are key-value pairs that represent a port's name and number. The port name represents a name of a service or application. The port number represents the port that service or application runs on.\nNamed ports are used by Cloud Load Balancing. Load balancers that act as proxies subscribe to a single named port in their backend service configuration. The port's name is translated to a port number based on the named port's mapping of each instance group backend.\nFor example, a backend service can subscribe to a port that is named `http-port` . The backend instance group can have a port named `http-port:80` . The backend instance group instructs the load balancer to send traffic to a VM in the group on port 80 using a protocol (such as TCP). The protocol is defined in the load balancer's backend service.\nNamed ports are simple metadata used by [proxy load balancers](/load-balancing/docs/backend-service#named_ports) . Named ports do not control network or firewall resources in Compute Engine.\n### Multiple port numbers for a named port\nYou can assign multiple ports for each service name. You can also assign multiple service names for each port.\nKeep in mind the following points:\n- Traffic is balanced between all ports with the same port name.\n- A given backend service can only forward traffic to one named port at a time.\n- If you use multiple port numbers for a named port, the ports must all be for the same application.For example, `http:80,http:8080` works, but `http:80,http:443` doesn't work because port 80 generally doesn't support TLS.\nYou can assign multiple named ports in an instance group. To illustrate, consider an example backend service that subscribes to the named port `http-port` , and that has two backend instance groups:\n- `instance-group-a`with a named port of`http-port:80`\n- `instance-group-b`with a named port of`http-port:79`\nThis backend service sends traffic to port 80 for VMs in `instance-group-a` and port 79 for VMs in `instance-group-b` .\nWhen you add the same instance group to multiple backend services (for multiple load balancers) and the instance group serves different ports on each load balancer, don't add all the port numbers to a single named port. Instead create a unique named port and map it to a set of ports that each backend service should serve.\nFor example, suppose you have three applications, each with its own load balancer. Each application has its own port number: 81 for `app1` , 82 for `app2` , and 83 for `app3` . Assuming that all three backend services are using a common instance group, assign the named ports for this instance group as `[app1:81, app2:82, app3:83]` .\n### Named ports and health checks\nFor a named port with multiple port numbers on a backend service to work in an external Application Load Balancer or an internal Application Load Balancer, the health check must have the `--use-serving-port` flag instead of a specific port number. This option is not available in the Google Cloud console. To set `--use-serving-port` , you must use the Google Cloud CLI or the API.\nFor example, suppose you have an application that load balances the traffic on three different ports (81, 82, 83) on the same backend service with a single instance group. You can assign the ports for this instance groups as `[app:81, 82, 83]` . The health check in this scenario must have the `--use-serving-port` flag.\nFor more information, see the [load balancing health checkdocumentation](/load-balancing/docs/health-check-concepts#category_and_port_specification) .\n### Named ports and firewall rules\nNamed ports do **not** create or modify Google Cloud [firewallrules](/vpc/docs/firewalls) . To permit traffic to backend VMs, you must still create the necessary firewall rules.\n### Named ports and backend services\nIn addition to the instance group configuration, you must also configure the backend service. For example, suppose you set the named port on an instance group with the name `my-service-name` and the port `8888` :\n```\ngcloud compute instance-groups set-named-ports my-unmanaged-ig \\\n --named-ports=my-service-name:8888\n```\nThen you must refer to the named port in the backend service configuration with the `--port-name` on the backend service set to `my-service-name` :\n```\ngcloud compute backend-services update my-backend-service \\\n --port-name=my-service-name\n```\n### Creating named ports- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of the instance group where you want to specify named ports. A page opens with the instance group properties.\n- Click **Edit** to modify this managed instance group.\n- In the **Port mapping** section, click **Add port** , and enter the desired port name and the port numbers that you want to associate with that name. If you need more entries, click **Add port** again.\n- Click **Save** to save your changes and apply the named ports to the instances in the managed instance group.\nFor managed instance groups, set one or more named ports using the [instance-groups managed set-named-ports command](/sdk/gcloud/reference/compute/instance-groups/managed/set-named-ports) . For unmanaged groups, use the [instance-groups set-named-ports command](/sdk/gcloud/reference/compute/instance-groups/set-named-ports) .\n```\ngcloud compute instance-groups managed set-named-ports INSTANCE_GROUP \\\n  --named-ports PORT_NAME:PORT,PORT_NAME:PORT\n```\nFor example:\n```\ngcloud compute instance-groups managed set-named-ports INSTANCE_GROUP \\\n  --named-ports name1:80,name2:8080\n```\nTo assign multiple ports to each service name or multiple names for each service, create more than one entry for each name or port. For example, if ports `10` , `20` , and `80` are for the same application, you can assign `name1` to all of those ports. Additionally, you might assign two names, `name2` and `name3` to port `8080` . Finally, you might assign port `9000` to `name4` , as in the following example:\n```\ngcloud compute instance-groups managed set-named-ports INSTANCE_GROUP \\\n  --named-ports name1:10,name1:20,name1:80,\\\n     name2:8080,name3:8080,\\\n     name4:9000\n```\nCheck the named ports assignments for a managed instance group using the `get-named-ports` command:\n```\ngcloud compute instance-groups managed get-named-ports INSTANCE_GROUP\n```\n```\nNAME PORT\nname1 10\nname1 20\nname1 80\nname2 8080\nname3 8080\nname4 9000\n```\nThe [instanceGroupManagers API](/compute/docs/reference/rest/v1/instanceGroupManagers) doesn't offer a `setNamedPorts` API method. Instead, use the [instanceGroups API](/compute/docs/reference/rest/v1/instanceGroups/setNamedPorts) to perform this task.\nConstruct a request to the `instanceGroups` API and include the name of the instance group. Obtain the current `fingerprint` value for the instance group by [getting information about a specific group](/compute/docs/instance-groups/getting-info-about-migs#getting_a_migs_properties) . Include the `fingerprint` and one or more `namedPorts` value pairs in the request body:\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instanceGroups/INSTANCE_GROUP/setNamedPorts\n{\n \"fingerprint\": \"42WmSpB8rSM=\",\n \"namedPorts\": [ {\n  \"name\": \"PORT_NAME\",\n  \"port\": PORT_NUMBER\n },\n {\n  \"name\": \"PORT_NAME\",\n  \"port\": PORT_NUMBER\n }\n ]\n }\n \n```\nFor example, if ports `10` , `20` , and `80` are for the same application, you can assign `name1` to all of those ports. Additionally, you might assign two names, `name2` and `name3` to port `8080` . Finally, you might assign port `9000` to `name4` , as in the following example:\n```\nPOST https://compute.googleapis.com/compute/v1/projects/myproject/zones/us-central1-a/instanceGroups/example-group/setNamedPorts\n{\n \"fingerprint\": \"42WmSpB8rSM=\",\n \"namedPorts\": [  {\n  \"name\": \"name1\",\n  \"port\": 8080\n  },\n  {\n  \"name\": \"name2\",\n  \"port\": 9000\n  }\n ]\n}\n```\nTo assign multiple ports to each service name, create multiple entries for that service name. For example, you can assign ports `10` , `20` , and `80` to `name1` . Also assign port `8080` to `name2` .\n```\nPOST https://compute.googleapis.com/compute/v1/projects/myproject/zones/us-central1-a/instanceGroups/example-group/setNamedPorts\n{\n \"fingerprint\": \"42WmSpB8rSM=\",\n \"namedPorts\": [  {\n  \"name\": \"name1\",\n  \"port\": 10\n  },\n  {\n  \"name\": \"name1\",\n  \"port\": 20\n  }\n  {\n  \"name\": \"name1\",\n  \"port\": 80\n  }\n  {\n  \"name\": \"name2\",\n  \"port\": 8080\n  }\n  {\n  \"name\": \"name3\",\n  \"port\": 80\n  }\n  {\n  \"name\": \"name4\",\n  \"port\": 8080\n  }\n ]\n}\n```\nTo list the named ports that are already assigned to a managed instance group, construct a `GET` request that points to the group:\n```\nGET https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instanceGroupManagers/INSTANCE_GROUP\n```\n## What's next\n- Try the tutorial, [Using load balancing for highly available apps](/compute/docs/tutorials/high-availability-load-balancing) .\n- [Create an instance template](/compute/docs/instance-templates) that you can use for a managed instance group.\n- Create a [regional managed instance group](/compute/docs/instance-groups/distributing-instances-with-regional-instance-groups) .\n- Enable [autohealing](/compute/docs/instance-groups/autohealing-instances-in-migs) for your managed instance group.\n- Enable [autoscaling](/compute/docs/autoscaler) for your managed instance group.", "guide": "Compute Engine"}