{"title": "Documentation - AnnotateImageResponse", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - AnnotateImageResponse\nResponse to an image annotation request.| JSON representation                                              |\n|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"textAnnotations\": [ { object (EntityAnnotation) } ], \"fullTextAnnotation\": { object (TextAnnotation) }, \"error\": { object (Status) }, \"context\": { object (ImageAnnotationContext) } } || Fields    | Fields.1                                               |\n|:-------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| textAnnotations[] | object (EntityAnnotation) If present, text (OCR) detection has completed successfully.                            |\n| fullTextAnnotation | object (TextAnnotation) If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text. |\n| error    | object (Status) If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when error is set.        |\n| context   | object (ImageAnnotationContext) If present, contextual information is needed to understand where this image comes from.                   |", "content": "## EntityAnnotation\nSet of detected entity features.| JSON representation                                                  |\n|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"mid\": string, \"locale\": string, \"description\": string, \"score\": number, \"confidence\": number, \"topicality\": number, \"boundingPoly\": { object (BoundingPoly) }, \"properties\": [ { object (Property) } ] } || Fields     | Fields.1                                                                                     |\n|:------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| mid      | string Opaque entity ID. Some IDs may be available in Google Knowledge Graph Search API.                                                                 |\n| locale     | string The language code for the locale in which the entity textual description is expressed.                                                               |\n| description    | string Entity textual description, expressed in its locale language.                                                                      |\n| score     | number Overall score of the result. Range [0, 1].                                                                          |\n| confidence (deprecated) | number This item is deprecated! Deprecated. Use score instead. The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].                 |\n| topicality    | number The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1]. |\n| boundingPoly   | object (BoundingPoly) Image region to which this entity belongs. Not produced for LABEL_DETECTION features.                                                            |\n| properties[]   | object (Property) Some entities may have optional user-supplied Property (name/value) fields, such a score or string that qualifies the entity.                                                   |\n## BoundingPoly\nA bounding polygon for the detected image annotation.| JSON representation                      |\n|:-----------------------------------------------------------------------------------------------------------|\n| { \"vertices\": [ { object (Vertex) } ], \"normalizedVertices\": [ { object (NormalizedVertex) } ] } || Fields    | Fields.1               |\n|:---------------------|:--------------------------------------------------------------------|\n| vertices[]   | object (Vertex) The bounding polygon vertices.      |\n| normalizedVertices[] | object (NormalizedVertex) The bounding polygon normalized vertices. |\n## Vertex\nA vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.| JSON representation    |\n|:---------------------------------|\n| { \"x\": integer, \"y\": integer } || Fields | Fields.1    |\n|:---------|:----------------------|\n| x  | integer X coordinate. |\n| y  | integer Y coordinate. |\n## NormalizedVertex\nA vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.| JSON representation   |\n|:-------------------------------|\n| { \"x\": number, \"y\": number } || Fields | Fields.1    |\n|:---------|:---------------------|\n| x  | number X coordinate. |\n| y  | number Y coordinate. |\n## Property\nA `Property` consists of a user-supplied name/value pair.| JSON representation           |\n|:--------------------------------------------------------------|\n| { \"name\": string, \"value\": string, \"uint64Value\": string } || Fields  | Fields.1       |\n|:------------|:------------------------------------|\n| name  | string Name of the property.  |\n| value  | string Value of the property.  |\n| uint64Value | string Value of numeric properties. |\n## TextAnnotation\n`TextAnnotation` contains a structured representation of OCR-extracted text. The hierarchy of an OCR-extracted text structure is like this:\n`TextAnnotation` \nEach structural component, starting from Page, might have properties, which describe detected languages, breaks, etc. For more information, refer to the\n` [TextAnnotation.TextProperty](/distributed-cloud/hosted/docs/latest/gdch/apis/vertex-ai/ocr/rest/v1/AnnotateImageResponse#TextProperty) `\nmessage definition that follows.\n| JSON representation          |\n|:---------------------------------------------------------|\n| { \"pages\": [ { object (Page) } ], \"text\": string } || Fields | Fields.1          |\n|:---------|:---------------------------------------------|\n| pages[] | object (Page) List of pages detected by OCR. |\n| text  | string UTF-8 text detected on the pages.  |\n## Page\nDetected page from OCR.| JSON representation                                |\n|:--------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"property\": { object (TextProperty) }, \"width\": integer, \"height\": integer, \"blocks\": [ { object (Block) } ], \"confidence\": number } || Fields  | Fields.1                       |\n|:-----------|:---------------------------------------------------------------------------------------------------|\n| property | object (TextProperty) Additional information detected on the page.         |\n| width  | integer Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels. |\n| height  | integer Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels. |\n| blocks[] | object (Block) List of blocks of text, images etc on this page.         |\n| confidence | number Confidence of the OCR results on the page. Range [0, 1].         |\n## TextProperty\nAdditional information detected on the structural component.| JSON representation                        |\n|:----------------------------------------------------------------------------------------------------------------|\n| { \"detectedLanguages\": [ { object (DetectedLanguage) } ], \"detectedBreak\": { object (DetectedBreak) } } || Fields    | Fields.1                   |\n|:--------------------|:---------------------------------------------------------------------------------|\n| detectedLanguages[] | object (DetectedLanguage) A list of detected languages together with confidence. |\n| detectedBreak  | object (DetectedBreak) Detected start or end of a text segment.     |\n## DetectedLanguage\nDetected language for a structural component.| JSON representation        |\n|:---------------------------------------------------|\n| { \"languageCode\": string, \"confidence\": number } || Fields  | Fields.1                                     |\n|:-------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| languageCode | string The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. |\n| confidence | number Confidence of detected language. Range [0, 1].                          |\n## DetectedBreak\nDetected start or end of a structural component.| JSON representation         |\n|:----------------------------------------------------|\n| { \"type\": enum (BreakType), \"isPrefix\": boolean } || Fields | Fields.1         |\n|:---------|:--------------------------------------------|\n| type  | enum (BreakType) Detected break type.  |\n| isPrefix | boolean True if break prepends the element. |\n## BreakType\nEnum to denote the type of break found. New line, space etc.| Enums   | Enums.1                         |\n|:---------------|:--------------------------------------------------------------------------------------------------------|\n| UNKNOWN  | Unknown break label type.                    |\n| SPACE   | Regular space.                       |\n| SURE_SPACE  | Sure space (very wide).                     |\n| EOL_SURE_SPACE | Line-wrapping break.                     |\n| HYPHEN   | End-line hyphen that is not present in text; does not co-occur with SPACE, LEADER_SPACE, or LINE_BREAK. |\n| LINE_BREAK  | Line break that ends a paragraph.                  |\n## Block\nLogical element on the page.| JSON representation                                            |\n|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"property\": { object (TextProperty) }, \"boundingBox\": { object (BoundingPoly) }, \"paragraphs\": [ { object (Paragraph) } ], \"blockType\": enum (BlockType), \"confidence\": number } || Fields  | Fields.1                                                                                                                                  |\n|:-------------||\n| property  | object (TextProperty) Additional information detected for the block.                                                                                                                   |\n| boundingBox | object (BoundingPoly) The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: when the text is horizontal it might look like: 0----1 | | 3----2 when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3). |\n| paragraphs[] | object (Paragraph) List of paragraphs in this block (if this blocks is of type text).                                                                                                              |\n| blockType | enum (BlockType) Detected block type (text, image etc) for this block.                                                                                                                  |\n| confidence | number Confidence of the OCR results on the block. Range [0, 1].                                                                                                                    |\n## Paragraph\nStructural unit of text representing a number of words in certain order.| JSON representation                                 |\n|:------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"property\": { object (TextProperty) }, \"boundingBox\": { object (BoundingPoly) }, \"words\": [ { object (Word) } ], \"confidence\": number } || Fields  | Fields.1                                                                                                                                  |\n|:------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| property | object (TextProperty) Additional information detected for the paragraph.                                                                                                                  |\n| boundingBox | object (BoundingPoly) The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3). |\n| words[]  | object (Word) List of all words in this paragraph.                                                                                                                        |\n| confidence | number Confidence of the OCR results for the paragraph. Range [0, 1].                                                                                                                   |\n## Word\nA word representation.| JSON representation                                  |\n|:----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| { \"property\": { object (TextProperty) }, \"boundingBox\": { object (BoundingPoly) }, \"symbols\": [ { object (Symbol) } ], \"confidence\": number } || Fields  | Fields.1                                                                                                                                 |\n|:------------||\n| property | object (TextProperty) Additional information detected for the word.                                                                                                                  |\n| boundingBox | object (BoundingPoly) The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3). |\n| symbols[] | object (Symbol) List of symbols in the word. The order of the symbols follows the natural reading order.                                                                                                         |\n| confidence | number Confidence of the OCR results for the word. Range [0, 1].                                                                                                                   |\n## Symbol\nA single symbol representation.| JSON representation                            |\n|:----------------------------------------------------------------------------------------------------------------------------------|\n| { \"property\": { object (TextProperty) }, \"boundingBox\": { object (BoundingPoly) }, \"text\": string, \"confidence\": number } || Fields  | Fields.1                                                                                                                                 |\n|:------------||\n| property | object (TextProperty) Additional information detected for the symbol.                                                                                                                  |\n| boundingBox | object (BoundingPoly) The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: * when the text is horizontal it might look like: 0----1 | | 3----2 * when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3). |\n| text  | string The actual UTF-8 representation of the symbol.                                                                                                                      |\n| confidence | number Confidence of the OCR results for the symbol. Range [0, 1].                                                                                                                   |\n## BlockType\nType of a block (text, image etc) as identified by OCR.| Enums | Enums.1      |\n|:--------|:------------------------------|\n| UNKNOWN | Unknown block type.   |\n| TEXT | Regular text block.   |\n| TABLE | Table block.     |\n| PICTURE | Image block.     |\n| RULER | Horizontal/vertical line box. |\n| BARCODE | Barcode block.    |\n## ImageAnnotationContext\nIf an image was produced from a file (e.g. a PDF), this message gives information about the source of that image.| JSON representation      |\n|:-------------------------------------------|\n| { \"uri\": string, \"pageNumber\": integer } || Fields  | Fields.1                           |\n|:-----------|:-------------------------------------------------------------------------------------------------------------------|\n| uri  | string The URI of the file used to produce the image.                |\n| pageNumber | integer If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image. |", "guide": "Documentation"}