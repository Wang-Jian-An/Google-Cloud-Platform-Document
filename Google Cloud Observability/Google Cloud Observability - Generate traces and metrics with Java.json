{"title": "Google Cloud Observability - Generate traces and metrics with Java", "url": "https://cloud.google.com/stackdriver/docs/instrumentation/setup/java", "abstract": "# Google Cloud Observability - Generate traces and metrics with Java\nThis document describes how to modify a Java app to collect trace and metric data using the open source [OpenTelemetry](https://opentelemetry.io/docs/what-is-opentelemetry/) framework, and how to write structured JSON logs to standard out. This document also provides information about a sample Java Spring Boot app that you can install and run. The app is configured to generate metrics, traces, and logs. The steps are the same whether or not you are using the [Spring Boot Framework](https://spring.io/projects/spring-boot/) .\n", "content": "## Before you begin\nEnable the Cloud Logging API, Cloud Monitoring API, and Cloud Trace API APIs.\n[Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=logging.googleapis.com,monitoring.googleapis.com,trace.googleapis.com)\n## Instrument your app to collect traces, metrics, and logs\nTo instrument your app to collect trace and metric data, and to write structured JSON to standard out, perform the following steps as described in subsequent sections of this document:\n- [Configure your app to use the OpenTelemetry Java Agent](#config-agent) \n- [Configure OpenTelemetry](#config-otel) \n- [Configure structured logging](#config-structured-logging) \n- [Write structured logs](#write-structured-logging) \n### Configure your app to use the OpenTelemetry Java Agent\nTo configure the app to write structured logs and to collect metrics and trace data by using OpenTelemetry, update the invocation of your app to use the [OpenTelemetry Java Agent](https://opentelemetry.io/docs/instrumentation/java/automatic/) . This method of instrumenting your app is known as because it doesn't require modifying your app code.\nThe following code sample illustrates a Dockerfile that downloads the OpenTelemetry Java Agent JAR file and updates the command line invocation to pass the `-javaagent` flag.\n[View on GitHub](https://github.com/GoogleCloudPlatform/opentelemetry-operations-java/blob/HEAD/examples/instrumentation-quickstart/Dockerfile)\n```\nRUN wget -O /opentelemetry-javaagent.jar https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v1.31.0/opentelemetry-javaagent.jarCMD sh -c \"java -javaagent:/opentelemetry-javaagent.jar -cp app:app/lib/* com.example.demo.DemoApplication \\\u00a0 \u00a0 \u00a0 \u00a0 2>&1 | tee /var/log/app.log\"\n```\nAlternatively, you can also set the `-javaagent` flag in the `JAVA_TOOL_OPTIONS` environment variable:\n```\nexport JAVA_TOOL_OPTIONS=\"-javaagent:PATH/TO/opentelemetry-javaagent.jar\"\n```\n### Configure OpenTelemetry\nThe default configuration for the OpenTelemetry Java Agent exports traces and metrics by using the [OTLP protocol](https://opentelemetry.io/docs/specs/otlp/) . It also configures OpenTelemetry to use the [W3C Trace Context](https://www.w3.org/TR/trace-context/) format for [propagating tracecontext](https://opentelemetry.io/docs/concepts/context-propagation/#propagation) . This configuration ensures that spans have the correct parent-child relationship within a trace.\nFor more information and configuration options, see [OpenTelemetry Java automaticinstrumentation](https://opentelemetry.io/docs/instrumentation/java/automatic/agent-config/) .\n### Configure structured logging\nTo include the trace information as part of the JSON-formatted logs written to standard output, configure your app to output structured logs in JSON format. We recommend using [Logback](https://logback.qos.ch/index.html) as your logging implementation. The following code sample illustrates a `logback.xml` file configured to output JSON structured logs using the [Logstash encoder](https://github.com/logfellow/logstash-logback-encoder) :\n[View on GitHub](https://github.com/GoogleCloudPlatform/opentelemetry-operations-java/blob/HEAD/examples/instrumentation-quickstart/src/main/resources/logback.xml)\n```\n<encoder class=\"net.logstash.logback.encoder.LogstashEncoder\">\u00a0 <!-- Format JSON logs for the Logging agent\u00a0 https://cloud.google.com/logging/docs/structured-logging#special-payload-fields -->\u00a0 <provider class=\"net.logstash.logback.composite.loggingevent.LoggingEventPatternJsonProvider\">\u00a0 \u00a0 <pattern>\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \"logging.googleapis.com/trace\": \"%mdc{trace_id}\",\u00a0 \u00a0 \u00a0 \u00a0 \"logging.googleapis.com/spanId\": \"%mdc{span_id}\",\u00a0 \u00a0 \u00a0 \u00a0 \"logging.googleapis.com/trace_sampled\": \"#asBoolean{%replace(%mdc{trace_flags}){'01', 'true'}}\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 </pattern>\u00a0 </provider>\u00a0 <!-- Rename fields for the Logging agent -->\u00a0 <fieldNames>\u00a0 \u00a0 <level>severity</level>\u00a0 \u00a0 <timestamp>timestamp</timestamp>\u00a0 \u00a0 <levelValue>[ignore]</levelValue>\u00a0 </fieldNames>\u00a0 <!-- Exclude tracing MDC keys which are handled above -->\u00a0 <excludeMdcKeyName>trace_id</excludeMdcKeyName>\u00a0 <excludeMdcKeyName>span_id</excludeMdcKeyName>\u00a0 <excludeMdcKeyName>trace_flags</excludeMdcKeyName></encoder>\n```\nThis configuration extracts information about the active span from SLF4J's [Mapped Diagnostic Context](https://logback.qos.ch/manual/mdc.html) and adds that information as attributes to the log. These attributes can then be used to correlate a log with a trace:\n- `logging.googleapis.com/trace`: Resource name of the trace associated with the log entry.\n- `logging.googleapis.com/spanId`: The span ID with the trace that is associated with the log entry.\n- `logging.googleapis.com/trace_sampled`: The value of this field must be`true`or`false`.\nFor more information about these fields, see the [LogEntry](/logging/docs/reference/v2/rest/v2/LogEntry) structure.\n### Write structured logs\nTo write structured logs that link to a trace, use the [SLF4J](https://www.slf4j.org/) logging API. For example, the following statement shows how to call the `Logger.info()` method:\n```\nlogger.info(\"handle /multi request with subRequests={}\", subRequests);\n```\nThe OpenTelemetry Java Agent automatically populates SLF4J's Mapped Diagnostic Context with the [span context](https://opentelemetry.io/docs/concepts/signals/traces/#span-context) of the current active span in [OpenTelemetryContext](https://opentelemetry.io/docs/specs/otel/context/) . This is then included in the JSON logs as described in [Configure structured logging](#config-structured-logging) .\n## Run a sample app configured to collect telemetry\nThe example app uses vendor-neutral formats, including JSON logs and OTLP metrics and traces, and the [Spring Boot Framework](https://spring.io/projects/spring-boot/) . To route the telemetry to Google Cloud, this sample uses the OpenTelemetry `Collector` configured with Google exporters. The app has two endpoints:\n- `/multi`This endpoint is handled by the `handleMulti` function. The load generator in the app issues requests to the `/multi` endpoint. It receives a request and sends between three and seven requests to the `/single` endpoint on the local server. [View on GitHub](https://github.com/GoogleCloudPlatform/opentelemetry-operations-java/blob/HEAD/examples/instrumentation-quickstart/src/main/java/com/example/demo/MultiController.java) ```\n/**\u00a0* handleMulti handles an http request by making 3-7 http requests to the /single endpoint.\u00a0*\u00a0* <p>OpenTelemetry instrumentation requires no changes here. It will automatically generate a\u00a0* span for the controller body.\u00a0*/@GetMapping(\"/multi\")public Mono<String> handleMulti() throws Exception {\u00a0 int subRequests = ThreadLocalRandom.current().nextInt(3, 8);\u00a0 // Write a structured log with the request context, which allows the log to\u00a0 // be linked with the trace for this request.\u00a0 logger.info(\"handle /multi request with subRequests={}\", subRequests);\u00a0 // Make 3-7 http requests to the /single endpoint.\u00a0 return Flux.range(0, subRequests)\u00a0 \u00a0 \u00a0 .concatMap(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 i -> client.get().uri(\"http://localhost:8080/single\").retrieve().bodyToMono(Void.class))\u00a0 \u00a0 \u00a0 .then(Mono.just(\"ok\"));}\n```\n- `/single`This endpoint is handled by the `handleSingle` function. It sleeps for a short delay and then responds with a string. [View on GitHub](https://github.com/GoogleCloudPlatform/opentelemetry-operations-java/blob/HEAD/examples/instrumentation-quickstart/src/main/java/com/example/demo/SingleController.java) ```\n/**\u00a0* handleSingle handles an http request by sleeping for 100-200 ms. It writes the number of\u00a0* milliseconds slept as its response.\u00a0*\u00a0* <p>OpenTelemetry instrumentation requires no changes here. It will automatically generate a\u00a0* span for the controller body.\u00a0*/@GetMapping(\"/single\")public String handleSingle() throws InterruptedException {\u00a0 int sleepMillis = ThreadLocalRandom.current().nextInt(100, 200);\u00a0 logger.info(\"Going to sleep for {}\", sleepMillis);\u00a0 Thread.sleep(sleepMillis);\u00a0 logger.info(\"Finishing the request\");\u00a0 return String.format(\"slept %s\\n\", sleepMillis);}\n```\n### Download and deploy the app\n**Note:** We recommend running the sample app by using Cloud Shell. However, if you want to run the sample app locally on Linux or Mac, then skip the first step in the following instructions.\nTo run the sample, do the following:\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- Clone the repository:```\ngit clone https://github.com/GoogleCloudPlatform/opentelemetry-operations-java\n```\n- Go to the sample directory:```\ncd opentelemetry-operations-java/examples/instrumentation-quickstart\n```\n- Build and run the sample:```\ndocker compose up --abort-on-container-exit\n```If you aren't running on Cloud Shell, then run the application with the `GOOGLE_APPLICATION_CREDENTIALS` environment variable pointing to a credentials file. [Application DefaultCredentials](/docs/authentication/application-default-credentials#personal) provides a credentials file at `$HOME/.config/gcloud/application_default_credentials.json` .```\n# Set environment variablesexport GOOGLE_CLOUD_PROJECT=\"PROJECT_ID\"export GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/.config/gcloud/application_default_credentials.json\"export USERID=\"$(id -u)\"# Rundocker compose -f docker-compose.yaml -f docker-compose.creds.yaml up --abort-on-container-exit\n```\n### View your metrics\nThe OpenTelemetry instrumentation in the sample app generates Prometheus metrics that you can view by using the [Metrics Explorer](/monitoring/charts/metrics-explorer) :\n- `Prometheus/http_server_duration_milliseconds/histogram` records the duration of server requests and stores the results in a histogram.\n- `Prometheus/http_client_duration_milliseconds/histogram` records the duration of client requests and stores the results in a histogram.- In the navigation panel of the Google Cloud console, select **Monitoring** , and then select **Metrics explorer** : [Go to Metrics explorer](https://console.cloud.google.com/monitoring/metrics-explorer) \n- In the **Metric** element, expand the **Select a metric** menu,  enter`http_server`in the filter bar, and then use the submenus to select a specific resource type and metric:- In the **Active resources** menu, select **Prometheus Target** .\n- In the **Active metric categories** menu, select **Http** .\n- In the **Active metrics** menu, select a metric.\n- Click **Apply** .\n- Configure how the data is viewed.When the measurements for a metric are cumulative, Metrics Explorer automatically normalizes the measured data by the alignment period, which which results in the chart displaying a rate. For more information, see [Kinds, types, and conversions](/monitoring/api/v3/aggregation#ts-conversion) .When integer or double values are measured, such as with the two `counter` metrics, Metrics Explorer automatically sums all time series. To view the data for the `/multi` and `/single` HTTP routes, set the first menu of the **Aggregation** entry to **None** .For more information about configuring a chart, see [Select metrics when using Metrics Explorer.](/monitoring/charts/metrics-selector) \n### View your traces\nTo view your trace data, do the following:\n- In the navigation panel of the Google Cloud console, select **Trace** , and then select **Trace explorer** : [Go to Trace explorer](https://console.cloud.google.com/traces/list) \n- In the scatter plot, select a trace with the URI of`/multi`.\n- In the Gantt chart on the **Trace details** panel, select the span labeled `/multi` .A panel opens that displays information about the HTTP request. These details include the method, status code, number of bytes, and the user agent of the caller.\n- To view the logs associated with this trace, select the **Logs & Events** tab.The tab shows individual logs. To view the details of the log entry, expand the log entry. You can also click **View Logs** and view the log by using the Logs Explorer.\nFor more information about using the Cloud Trace explorer, see [Find and explore traces](/trace/docs/finding-traces) .\n### View your logs\nFrom the Logs Explorer, you can inspect your logs, and you can also view associated traces, when they exist.\n- In the navigation panel of the Google Cloud console, select **Logging** , and then select **Logs Explorer** : [Go to Logs Explorer](https://console.cloud.google.com/logs/query) \n- Locate a log with the description of `handle /multi request` .To view the details of the log, expand the log entry.\n- Click **Traces** on a log entry with the \"handle /multi request\" message, and then select **View trace details** .A **Trace details** panel opens and displays the selected trace.\nFor more information about using the Logs Explorer, see [View logs by using the Logs Explorer](/logging/docs/view/logs-explorer-interface) .\n## What's next\n- [OpenTelemetry](https://opentelemetry.io/docs/what-is-opentelemetry/) \n- [OTLP overview](https://opentelemetry.io/docs/specs/otlp/) \n- [Structured logging](/logging/docs/structured-logging) \n- [Troubleshooting Managed Service for Prometheus](/stackdriver/docs/managed-prometheus/troubleshooting) \n- [Troubleshoot Cloud Trace](/trace/docs/troubleshooting)", "guide": "Google Cloud Observability"}