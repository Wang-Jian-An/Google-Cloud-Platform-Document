{"title": "Google Cloud Observability - PromQL compatibility", "url": "https://cloud.google.com/stackdriver/docs/managed-prometheus/promql-differences", "abstract": "# Google Cloud Observability - PromQL compatibility\n[PromQL](https://prometheus.io/docs/prometheus/latest/querying/basics/) queries in Google Cloud Managed Service for Prometheus are partially evaluated at the [Monarch](https://research.google/pubs/pub50652/) backend by using [ Monitoring Query Language (MQL)](/monitoring/mql/reference) , and there are some known differences in query results. This document describes the differences.\nOther than the differences listed in this document, the PromQL in Managed Service for Prometheus is at parity with the PromQL available in Prometheus version **2.44** .\n", "content": "## New PromQL functions\nPromQL functions added after Prometheus version **2.44** might not be supported.\n## Matching on metric names\nOnly exact matching on metric names is supported.\n## Staleness\n[Staleness](https://prometheus.io/docs/prometheus/latest/querying/basics/#staleness) is not supported in the Monarch backend.\n## Calculation of irate\nWhen the lookback window for the [irate](https://prometheus.io/docs/prometheus/latest/querying/functions/#irate) function is less than the step size, we increase the window to the step size. MQL requires this change to ensure that none of the input data is completely ignored in the output. This difference applies to `rate` calculations as well.\n## Calculation of rate and increase\nWhen the lookback window for the [rate](https://prometheus.io/docs/prometheus/latest/querying/functions/#rate) function is less than the step size, we increase the window to the step size. MQL requires this change to ensure that none of the input data is completely ignored in the output. This difference applies to `irate` calculations as well.\nThere are differences in the interpolation and extrapolation calculations. Monarch uses a different interpolation algorithm than Prometheus, and this difference can lead to slightly different results. For example, Monarch counter samples are stored with a time range rather than the single timestamp that Prometheus uses. Therefore, counter samples in Monarch can be included in a rate calculation even though the Prometheus timestamp would exclude them. This generally results in more accurate rate results, especially when querying over the beginning or end of the underlying time series.\n## Calculation of histogram_quantile\nA PromQL [histogram_quantile](https://prometheus.io/docs/prometheus/latest/querying/functions/#histogram_quantile) calculation on a histogram with no samples produces a NaN value. MQL's calculation produces no value; that is, MQL drops the point at the timestamp instead.\nThe rate-calculation differences can also affect the input to `histogram_quantile` queries.\n## Type-specific functions on differently typed metrics\nAlthough upstream Prometheus is weakly typed, Monarch is strongly typed. This means that running functions specific to a single type on a differently typed metric (for example, running `rate()` on a GAUGE metric or `histogram_quantile()` on a COUNTER or untyped metric) will not work in Managed Service for Prometheus, even though these functions work in upstream Prometheus.", "guide": "Google Cloud Observability"}