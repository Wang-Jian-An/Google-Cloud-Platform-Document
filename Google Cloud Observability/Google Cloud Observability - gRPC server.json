{"title": "Google Cloud Observability - gRPC server", "url": "https://cloud.google.com/stackdriver/docs/managed-prometheus/exporters/server/grpc", "abstract": "# Google Cloud Observability - gRPC server\nThis document describes how to configure your Google Kubernetes Engine deployment so that you can use Google Cloud Managed Service for Prometheus to collect metrics from the gRPC requests served by your application. This document describes how to do the following:\n- [Set up the gRPC Prometheus middleware forGo and Java.](#setup) \n- [Configure a PodMonitoring resource](#podmonitoring) for  Managed Service for Prometheus to collect the exported metrics.\n- [View the Application dashboard](#view-dashboard) for your GKE Deployment.These instructions apply only if you are using [managed collection](/stackdriver/docs/managed-prometheus/setup-managed) with Managed Service for Prometheus.\nFor more information about gRPC, see [grpc.io](https://grpc.io) .\n", "content": "## Set up\nTo collect metrics from your gRPC server, you must configure the appropriate gRPC middleware.\n- If you are using Go, then see [go-grpc-middleware](https://github.com/grpc-ecosystem/go-grpc-middleware) .\n- If you are using Java, then see [java-grpc-prometheus](https://github.com/grpc-ecosystem/java-grpc-prometheus) .To verify that your gRPC server is emitting metrics on the expected endpoints, do the following:\n- Set up port forwarding by using the following command:```\nkubectl -n NAMESPACE_NAME port-forward deploy/GRPC_SERVER_DEPLOYMENT_NAME PROMETHEUS_PORT_NUMBER\n \n```\n- Access`localhost:` ``by using the  browser or the`curl`utility in another terminal  session.\n## Define a PodMonitoring resource\nFor target discovery, the Managed Service for Prometheus Operator requires a PodMonitoring resource that corresponds to the gRPC server in the same namespace.\nYou can use the following PodMonitoring configuration:\n```\napiVersion: monitoring.googleapis.com/v1\nkind: PodMonitoring\nmetadata:\n name: my-prometheus-grpc-app\n labels:\n app.kubernetes.io/name: my-prometheus-grpc-app\n app.kubernetes.io/part-of: google-cloud-managed-prometheus\nspec:\n endpoints:\n - port: prometheus\n scheme: http\n interval: 30s\n path: /metrics\n selector:\n matchLabels:\n  app.kubernetes.io/name: my-prometheus-grpc-app\n```\nEnsure that the values of the `port` and `MatchLabels` fields match those of the gRPC application that you want to monitor.\nTo apply configuration changes from a local file, run the following command:\n```\nkubectl apply -n NAMESPACE_NAME -f FILE_NAME\n```\nYou can also [use Terraform](/stackdriver/docs/managed-prometheus/setup-managed#terraform-scrape) to manage your configurations.\n## View application metrics\nTo view request, error-rate, and latency metrics from your gRPC application, do the following:\n- In the navigation panel of the Google Cloud console, select **Kubernetes Engine** , and then select **Workloads** : [Go to Kubernetes Workloads](https://console.cloud.google.com/kubernetes/workload/overview) \n- Click a Deployment in the list of workloads. The **Type** column in   the list indicates the type of the workload.\n- On the **Deployment details** page, click the **Observability** tab.\n- Select **Application** in the dashboard selector.For more information, see [Use application performance metrics](/stackdriver/docs/solutions/gke/app-performance-metrics) .\n## Troubleshooting\nFor information about troubleshooting metric ingestion problems in Managed Service for Prometheus, see [Problems with collection from exporters](/stackdriver/docs/managed-prometheus/troubleshooting#exporter-problems) in [Troubleshooting ingestion-side problems](/stackdriver/docs/managed-prometheus/troubleshooting#ingest-problems) .", "guide": "Google Cloud Observability"}