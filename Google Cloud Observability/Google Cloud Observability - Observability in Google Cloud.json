{"title": "Google Cloud Observability - Observability in Google Cloud", "url": "https://cloud.google.com/stackdriver/docs", "abstract": "# Google Cloud Observability - Observability in Google Cloud\nGoogle Cloud Observability includes observability services that help you to understand the behavior, health, and performance of your applications. Visibility into how applications behave and how components are connected help you to anticipate, identify, and respond to unexpected changes more quickly and effectively.\nThis document includes the following information:\n- An [overview of observability](#observability) and why observability is important for keeping your applications available and reliable.\n- How [Google Cloud Observability](#cloud-ops) helps you to monitor and maintain application and infrastructure health.\n- How to [get started](#get-started) with observability in Google Cloud.", "content": "## About observability\nis a holistic approach to gathering and analyzing in order to understand the state of your environment. Telemetry data is , and other data generated by your applications and the application infrastructure that provide information about application health and performance.\nMonitoring, debugging, and troubleshooting distributed applications can be difficult because there are many systems and software components involved, often with a mix of open source and commercial software.\nObservability tools help you to navigate this complexity by collecting meaningful data and providing features to explore, analyze, and correlate the data. An observable environment helps you to:\n- Proactively detect issues before they impact your users\n- Troubleshoot both known and new issues\n- Debug applications during development\n- Plan for and understand the impacts of changes to your applications\n- Explore data to discover new insights\nIn short, an observable environment helps you to maintain application reliability. An application is reliable when it meets your current objectives for availability and resilience to failures.\nTo learn more about reliability practices, including principles and practices related to observability, read the book [Site Reliability Engineering: HowGoogle Runs Production Systems](https://sre.google/books/) . Topics include:\n- [Service Level Objectives](https://sre.google/sre-book/service-level-objectives/) \n- [Monitoring distributed systems](https://sre.google/sre-book/monitoring-distributed-systems/) \n- [Alerting](https://sre.google/sre-book/practical-alerting/) \n- [Troubleshooting](https://sre.google/sre-book/effective-troubleshooting/) \n- [Testing for Reliability](https://sre.google/sre-book/testing-reliability/) ## Google Cloud Observability\nServices in Google Cloud Observability help you to collect, analyze, and correlate telemetry data. They also provide built-in defaults to help you get started faster such as default dashboards and alert policies.\nCloud Monitoring, Cloud Logging, and Cloud Trace are among the [services enabled by default](/service-usage/docs/enabled-service#default) when you create a Google Cloud project.\n[Monitoring](/monitoring/docs/monitoring-overview) : Use collected metrics to monitor health and performance, identify trends and issues, and notify for changes in behavior.\n- Automatically collect metrics for most Google Cloud services.\n- Collect system and application metrics from third-party applications.\n- Visualize and analyze metrics with default or customized dashboards.\n- Use synthetic monitoring to test the performance of your applications.\n- Define service level objectives (SLOs) to monitor service reliability.\n- Receive alerts when issues occur.\n[Logging](/logging/docs/overview) : Use collected logs to debug, troubleshoot, and gain insights about your applications.\n- Automatically collect logs for most Google Cloud services.\n- Automatically collect [audit logs](/logging/docs/audit) for most Google Cloud services.\n- Collect logs from third-party software.\n- Explore and analyze logs.\n- Use [Log Analytics](/logging/docs/log-analytics#analytics) to perform an analysis across your logs and other data with BigQuery. For example, you can use BigQuery to compare URLs in your logs with a public dataset of known malicious URLs.\n- Create metrics from logs.\n- Receive alerts when a specified message appears in a log.\n[Error Reporting](/error-reporting/docs) : View and analyze errors from running cloud services:\n- Aggregate errors that Error Reporting detects in log entries, and view the associated logs.\n- Aggregate errors that your applications send to the Error Reporting API.\n[Trace](/trace/docs/overview) : View and analyze the flow and latency of application requests when you are debugging and troubleshooting.\n- Track how requests propagate through your applications.\n- Collect latency data from your applications and view graphs of the data.\n- View latency reports that show performance degradations.\n- Receive alerts for changes in the latency profile for your applications.\n- [Annotate](/trace/docs/viewing-details) traces with custom attributes.\n- Export traces to BigQuery so that you can explore it with other data.\n[Cloud Profiler](/profiler/docs/about-profiler) : Analyze CPU and memory usage for your applications so that you can identify opportunities to improve performance.\n- Collect CPU usage and memory allocation data from your applications.\n- Identify the parts of an application that are consuming the most resources and gain insights about the application's overall performance.## Get started\nThis section describes steps you can take to get familiar with observability features in Google Cloud.\n### Try the quickstarts\nTry the quickstarts to get familiar with the available services.\n- [Logging](/logging/docs/logging-gce-quickstart) \n- [Monitoring](/monitoring/monitor-compute-engine-virtual-machine) \n- [Trace](/trace/docs/trace-app-latency) \n- [Error Reporting](/error-reporting/docs/check-app-crash) \n- [Profiler](/profiler/docs/measure-app-performance) \n### Look at automatically collected data\nMost Google Cloud services automatically generate predefined metrics and logs. This means that you can start looking at some observability data for supported Google Cloud services without additional configuration.\n- Some Google Cloud services such as [Google Kubernetes Engine (GKE)](/kubernetes-engine/docs/how-to/view-observability-metrics) , [Compute Engine](/compute/docs/instances/observe-monitor-vms) , and [Cloud SQL](/sql/docs/mysql/monitor-instance) provide default dashboards in the Google Cloud console to view observability data in context of the service.\n- Compute Engine, GKE, and Cloud Run generate system metrics and logs by default, and you configure collection of additional data.- [Compute Engine](#configure-compute) \n- [GKE](#configure-gke) \n- [Cloud Run](#configure-cloud-run) \n- Cloud Functions, and App Engine automatically generate metrics, logs, and traces.\nYou can also chart collected metrics in [Metrics Explorer](/monitoring/charts/metrics-explorer) , view logs in [Logs Explorer](/logging/docs/view/logs-explorer-interface) , or view traces in [Trace](/trace/docs/overview) . To review related data together, create [custom dashboards](/monitoring/charts/dashboards) . For example, you can create a dashboard that includes logs, performance metrics, and alerting policies for virtual machines.\n### Configure Compute Engine VMs to collect additional data\nCompute Engine VMs only collect basic system metrics and logs by default without the Ops agent\n[Install the Ops Agent](/stackdriver/docs/solutions/agents/ops-agent/install-index) to collect additional telemetry data (logs, metrics, and traces) from your Compute Engine instances and applications for troubleshooting, performance monitoring, and alerting.\n- Automatically collect host metrics such as CPU, GPU, memory, and process metrics.\n- Automatically collect system logs such as syslog from Linux VMs and Windows Event Log from Windows VMs.\n- Observe your applications with:- [Third-party application integrations](/stackdriver/docs/solutions/agents/ops-agent/third-party) for popular software like Postgres, MongoDB, and Java Virtual Machine with pre-configured dashboards and alert policies\n- [Prometheus metrics](/monitoring/agent/ops-agent/prometheus) \n- [OpenTelemetry Protocol (OTLP) metrics and traces](/stackdriver/docs/solutions/agents/ops-agent/otlp) \n- [Application logs](/logging/docs/agent/ops-agent/configuration#logging-receivers) \n- For a summary of the collected telemetry data, see the [Ops Agentoverview](/stackdriver/docs/solutions/agents/ops-agent) .\n### Configure GKE clusters to collect additional data\nBy default, GKE clusters send system logs and system metrics to Logging and Monitoring. [Google Cloud Managed Service for Prometheus](/stackdriver/docs/managed-prometheus) handles collection of third-party and user-defined metrics.\n- Use [observability metrics packages](/stackdriver/docs/solutions/gke/managing-metrics) to better understand the state of your applications and cluster resources. For example, control plane metrics are useful for creating SLOs to monitor service availability and latency.\n- [Monitor third-party applications](/stackdriver/docs/managed-prometheus/exporters/introduction) such as Postgres, MongoDB, and Redis. These integrations provide pre-configured dashboards and alert policies.\n### Configure Cloud Run to collect custom data\nIf you have a have a Cloud Run service that writes [Prometheus metrics](https://prometheus.io/docs/concepts/metric_types/) , then you can use the [Prometheus sidecar](/stackdriver/docs/managed-prometheus/cloudrun-sidecar) to send the metrics to Cloud Monitoring.\nIf your Cloud Run service writes [OTLP metrics](https://opentelemetry.io/docs/concepts/signals/metrics/) instead, then you can use an OpenTelemetry sidecar. For an example, see the [tutorial for collecting OTLP metrics](/run/docs/tutorials/custom-metrics-opentelemetry-sidecar) by using the sidecar.\n### Instrument your applications\nis code that you add to an application to emit telemetry data. There are several open-source instrumentation frameworks let you collect metrics, logs, and traces from your application and send that data to any vendor, including Google Cloud. However, you might not need to instrument your application. For example, Cloud Run, Cloud Functions, and App Engine provide automatic tracing.\nTo instrument your application, we recommend that you use a vendor-neutral instrumentation framework that is open source, such as [OpenTelemetry](https://opentelemetry.io/) , instead of vendor- and product-specific APIs or client libraries. For information about instrumenting your application, see [ Instrumentation and observability](/stackdriver/docs/instrumentation/overview) .\nFor code samples that illustrate how to instrument your application to send telemetry to Google Cloud, see the following:\n- [Generate traces and metrics with Go](/stackdriver/docs/instrumentation/setup/go) .\n- [Generate traces and metrics with Java](/stackdriver/docs/instrumentation/setup/java) .\nYou might also be interested in exploring the following topics:\n- [Learn about options for instrumentation for traces](/trace/docs/setup) \n- [Learn about collecting user-defined metrics](/monitoring/custom-metrics) \n- [Learn about writing application logs](/logging/docs/setup)", "guide": "Google Cloud Observability"}