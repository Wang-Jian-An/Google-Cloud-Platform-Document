{"title": "Google Cloud Observability - Managing Agent Policies", "url": "https://cloud.google.com/stackdriver/docs/solutions/agents/logging/managing-agent-policies", "abstract": "# Google Cloud Observability - Managing Agent Policies\n**** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nAgent Policies enable automated installation and maintenance of the Google Cloud Observability agents across a fleet of VMs that match user-specified criteria. With one command, you can create a Policy for your Google Cloud project that governs existing and new VMs associated with that Google Cloud project, ensuring proper installation and optional auto-upgrade of all agents.\n", "content": "## Supported operating systems\nYou can apply an Agent Policy to [Compute Engine](/compute) instances with the following operating systems.\n`Logging agent` maps to policies with [agent type](/sdk/gcloud/reference/beta/compute/instances/ops-agents/policies/create#--agent-rules) `logging` . `Monitoring agent` maps to policies with [agent type](/sdk/gcloud/reference/beta/compute/instances/ops-agents/policies/create#--agent-rules) `metrics` . `Ops Agent` maps to policies with [agent type](/sdk/gcloud/reference/beta/compute/instances/ops-agents/policies/create#--agent-rules) `ops-agent` .\n| Operating system                  | Logging agent | Monitoring agent | Ops Agent |\n|:--------------------------------------------------------------------------------------|----------------:|-------------------:|------------:|\n| CentOS 7                    |    nan |    nan |   nan |\n| CentOS 8                    |    nan |    nan |   nan |\n| Rocky Linux 8                   |    nan |    nan |   nan |\n| RHEL 6                    |    nan |    nan |   nan |\n| RHEL 7: rhel-7, rhel-7-6-sap-ha, rhel-7-7-sap-ha, rhel-7-9-sap-ha      |    nan |     1 |   nan |\n| RHEL 8: rhel-8, rhel-8-2-sap-ha, rhel-8-4-sap-ha, rhel-8-6-sap-ha, rhel-8-8-sap-ha |    nan |     1 |   nan |\n| Debian 9 (Stretch)                 |    nan |    nan |   nan |\n| Debian 10 (Buster)                 |    nan |    nan |   nan |\n| Debian 11 (Bullseye)                 |    nan |    nan |   nan |\n| Ubuntu LTS 18.04 (Bionic Beaver): ubuntu-1804-lts, ubuntu-minimal-1804-lts   |    nan |    nan |   nan |\n| Ubuntu LTS 20.04 (Focal Fossa): ubuntu-2004-lts, ubuntu-minimal-2004-lts    |    nan |    nan |   nan |\n| Ubuntu LTS 22.04 (Jammy Jellyfish): ubuntu-2204-lts, ubuntu-minimal-2204-lts   |    nan |    nan |   nan |\n| SLES 12: sles-12, sles-12-sp5-sap              |    nan |    nan |   nan |\n| SLES 15: sles-15, sles-15-sp2-sap, sles-15-sp3-sap, sles-15-sp4-sap, sles-15-sp5-sap |    nan |    nan |   nan |\n| OpenSUSE Leap 15: opensuse-leap (opensuse-leap-15-3-*, opensuse-leap-15-4-*)   |    nan |    nan |   nan |\n| Windows Server: 2016, 2019, 2022, Core 2016, Core 2019, Core 2022      |    nan |    nan |   nan |\n## Creating an Agent Policy\nTo create an Agent Policy using the Google Cloud CLI, complete the following steps:\n- If you haven't done so already, install the [Google Cloud CLI](/sdk/docs/install) .In the gcloud CLI, the command group for managing Agent Policies is in `beta` release.\n- If you haven't done so already, install the `beta` component of the gcloud CLI:```\ngcloud components install beta\n```To check if you have the `beta` component for the installed, run:```\ngcloud components list\n```- If you previously installed the `beta` component, ensure you have the latest version:```\ngcloud components update\n```\n- Use the following script to enable the APIs and to set the proper permissions for using the Google Cloud CLI: [set-permissions.sh](/static/stackdriver/docs/set-permissions.sh) .For information about the script, refer to [What's the set-permissions.shscript doing?](#set-permissions-script) . **Note:** `set-permissions.sh` is designed to run on Linux. If you're using a machine on a different operating system, run the script from [Cloud Shell](/shell/docs/using-cloud-shell) .\n- Use the `gcloud beta compute instances ops-agents policies create` command to create a Policy. For the syntax of the command, refer to the [gcloudbeta compute instances ops-agents policies create](/sdk/gcloud/reference/beta/compute/instances/ops-agents/policies/create#SYNOPSIS) documentation.For examples of how to format the command, refer to the [Examples](/sdk/gcloud/reference/beta/compute/instances/ops-agents/policies/create#EXAMPLES) section in the Google Cloud CLI documentation.For more information about the available gcloud CLI commands and the available options, refer to the [gcloud beta compute instancesops-agents policies](/sdk/gcloud/reference/beta/compute/instances/ops-agents) documentation.\n### Best practices for using Agent Policies\nTo control the impact to production systems during rollout, we recommend that you use instance labels and zones to filter the instances that the policy applies to.\nHere is an example of a phased rollout plan for CentOS 7 VMs:\nPhase 1: Create a policy to install the legacy Logging agent and Monitoring agent on all VMs with the label `env=test` and `app=myproduct` .\n```\ngcloud beta compute instances \\\u00a0 \u00a0 ops-agents policies create ops-agents-policy-safe-rollout \\\u00a0 \u00a0 --agent-rules=\"type=logging,version=current-major,package-state=installed,enable-autoupgrade=true;type=metrics,version=current-major,package-state=installed,enable-autoupgrade=true\" \\\u00a0 \u00a0 --os-types=short-name=centos,version=7 \\\u00a0 \u00a0 --group-labels=env=test,app=myproduct \\\u00a0 \u00a0 --project=my_project\n```\nFor more information about specifying the operating system, see [gcloud beta compute instances ops-agents policies create](/sdk/gcloud/reference/beta/compute/instances/ops-agents/policies/create#--os-types) .\nPhase 2: Update that policy to target `env=prod` and `app=myproduct` and only a single zone.\n```\ngcloud beta compute instances \\\u00a0 \u00a0 ops-agents policies update ops-agents-policy-safe-rollout \\\u00a0 \u00a0 --group-labels=env=prod,app=myproduct \\\u00a0 \u00a0 --zones=us-central1-c \\\n```\nPhase 3: Update that policy to clear the zones filter so it rolls out globally\n```\ngcloud beta compute instances \\\u00a0 \u00a0 ops-agents policies update ops-agents-policy-safe-rollout \\\u00a0 \u00a0 --clear-zones\n```\n### Limitations\nFor a Policy to take effect on VMs that [predate](/compute/docs/manage-os#check-install) OS Config, additional setup is needed to ensure the OS Config Agent that the policy relies on is installed on the VMs. To install the OS Config Agent on a fleet of VMs, complete the following steps:\n- Ensure you have run the `set-permissions.sh` script in the [Creating an Agent Policy](#create-policy) section.\n- Decide on which VMs you want to install the OS Config Agent and list them in a CSV file.To get a list of all the non Google-managed (e.g. by Google Kubernetes Engine or Google App Engine) instances into a csv, run:```\n\u00a0 gcloud compute instances list \\\u00a0 \u00a0 \u00a0 --filter=\"-labels.list(show=\"keys\"):goog-\" \\\u00a0 \u00a0 \u00a0 --format=\"csv(name,zone)\" \\\u00a0 \u00a0 \u00a0 | grep -v -x -F -f \u00a0<(gcloud compute instances os-inventory list-instances \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 --format=\"csv(name,zone)\") \\\u00a0 \u00a0 \u00a0 | sed 's/$/,update/' > instances.csv\n```The `grep` section filters out the VMs that already have the OS Config Agent installed and enabled. The VM label exclusion based on `goog-` filters out Compute Engine VMs managed by GKE, App Engine etc.To further filter the instances by zones or labels, change the `--filter` to something similar to the following:```\n\u00a0 \"-labels.list(show=\"keys\"):goog- AND zone:(ZONE_1,ZONE_2) AND labels.KEY_1:VALUE_1 AND labels.KEY_2=VALUE_2\"\n```\n**Note:** `mass-install-osconfig-agent.sh` is designed to run on Linux. If you're using a machine on a different operating system, run the script from [Cloud Shell](/shell/docs/using-cloud-shell) .\n- Download and run the [mass-install-osconfig-agent.sh](/static/stackdriver/docs/mass-install-osconfig-agent.sh) script by following the instructions in the script to run a command like:```\n\u00a0 \u00a0bash mass-install-osconfig-agent.sh --project project-id --input-file instances.csv\n```This script automates the [Installing the OS Config agent](/compute/docs/manage-os#agent-install) instructions.## Troubleshooting\nIf ops-agents policy commands fail, they show a corresponding validation error. Correct those errors by fixing the command arguments and flags as suggested by the error message.\nIn addition to the validation errors, you might see the following errors:\n- Insufficient IAM permissionA sample error looks like:```\nERROR: (gcloud.beta.compute.instances.ops-agents.policies.XXX) PERMISSION_DENIED: Caller does not have required permission to XXX\n```Make sure you run the `set-permissions.sh` script in the [Creating an Agent Policy](#create-policy) section to set up the `osconfig.guestPolicy` specific IAM role.To verify whether you have the sufficient OS Config guest policy role enabled for the project, you can run the following command. In this example, the command checks if the user has the `roles/osconfig.guestPolicyAdmin` role. The `GCLOUD_MEMBER` should be in the format of `user:USER_EMAIL` or `serviceaccount:SERVICE_ACCOUNT_EMAIL` .```\ngcloud projects get-iam-policy project-id \\\u00a0 \u00a0 --filter=--member=gcloud-member \\\u00a0 \u00a0 | grep \"roles/osconfig.guestPolicyAdmin\" -B 2\n```The expected output is:```\n- members:\u00a0 - gcloud-member\u00a0 role: roles/osconfig.guestPolicyAdmin\n```\n- Osconfig API is not enabledA sample error looks like:```\nAPI [osconfig.googleapis.com] not enabled on project [XXX].Would you like to enable and retry (this will take a few minutes)?(y/N)?\n```Make sure you run the `set-permissions.sh` script in the [Creating an Agent Policy](#create-policy) section to grant all the necessary permissions.To verify whether OS Config API is enabled for the project, you can run the following commands:```\ngcloud services list --project project-id \\\u00a0 \u00a0 | grep osconfig.googleapis.com\n```The expected output is:```\nosconfig.googleapis.com \u00a0 \u00a0Cloud OS Config API\n```\n- The policy does not existA sample error looks like:```\nNOT_FOUND: Requested entity was not found\n```This suggests the policy has already been deleted. Make sure the policy ID in the `describe` , `update` or `delete` command maps to an existing policy.OS Config agents are deployed to each Compute Engine instance to manage the packages for the Logging and Monitoring agents. The policy may seem to have no effect if the underlying OS Config agent is not installed.\nTo verify that the OS Config agent is installed, run the following command:\n```\ngcloud compute ssh instance-id \\\u00a0 \u00a0 --project project-id \\\u00a0 \u00a0 -- sudo systemctl status google-osconfig-agent\n```\nA sample output is:\n```\ngoogle-osconfig-agent.service - Google OSConfig AgentLoaded: loaded (/lib/systemd/system/google-osconfig-agent.service; enabled; vendor preset:Active: active (running) since Wed 2020-01-15 00:14:22 UTC; 6min agoMain PID: 369 (google_osconfig)\u00a0Tasks: 8 (limit: 4374)Memory: 102.7MCGroup: /system.slice/google-osconfig-agent.service\u00a0 \u00a0 \u00a0 \u00a0 \u2514\u2500369 /usr/bin/google_osconfig_agent\n```To verify that the OS Config agent is installed, run the following steps:- Connect to your instance using RDP or a similar tool and login to Windows.\n- Open a PowerShell terminal, then run the following PowerShell command. You don't need administrator privileges.```\nGet-Service google_osconfig_agent\n```\nA sample output is:\n```\nStatus \u00a0 Name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DisplayName------ \u00a0 ---- \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 -----------Running \u00a0google_osconfig_a\u2026 Google OSConfig Agent\n```\nSUSE and Ubuntu Compute Engine instances don't have the OS Config agent preinstalled, so you need to follow the OS Config agent installation [instructions](/compute/docs/manage-os#agent-install) to get the OS Config agent installed on those Compute Engine instances.\nTo verify if there are any errors when the OS Config agent applies Policies, you can check the OS Config agent's log. This can be done either via Logs Explorer or via SSH / RDP into individual Compute Engine instances.\nTo view OS Config agent logs in [Logs Explorer](/logging/docs/view/logs-explorer-interface) , use the following filter:\n```\nresource.type=\"gce_instance\"logName=\"projects/project-id/logs/OSConfigAgent\"\n```\nTo view OS Config agent logs via SSH for individual Compute Engine Linux instances, run the following command:\n- CentOS / RHEL / SLES / SUSE```\ngcloud compute ssh instance-id \\\u00a0 \u00a0 --project project-id \\\u00a0 \u00a0 -- sudo cat /var/log/messages \\\u00a0 \u00a0 \u00a0 \u00a0| grep \"OSConfigAgent\\|google-fluentd\\|stackdriver-agent\"\n```\n- Debian / Ubuntu```\ngcloud compute ssh instance-id \\\u00a0 \u00a0 --project project-id \\\u00a0 \u00a0 -- sudo cat /var/log/syslog \\\u00a0 \u00a0 \u00a0 \u00a0| grep \"OSConfigAgent\\|google-fluentd\\|stackdriver-agent\"\n```\nTo view OS Config agent logs via RDP for individual Compute Engine Windows instances, run the following steps:\n- Connect to your instance using RDP or a similar tool and login to Windows.\n- Open the `Event Viewer` app, under `Windows Logs` => `Application` , search for logs with `Source` equal to `OSConfigAgent` .\nIf there is an error connecting to the OS Config Service, make sure you run the `set-permissions.sh` script in the [Creating an Agent Policy](#create-policy) section to set up the metadata.\nTo verify that the OS Config metadata is enabled, you can run the following command:\n```\ngcloud compute project-info describe \\\u00a0 \u00a0 --project project-id \\\u00a0 \u00a0 | grep \"enable-osconfig\\|enable-guest-attributes\" -A 1\n```\nThe expected output is:\n```\n- key: enable-guest-attributes\u00a0 value: 'TRUE'- key: enable-osconfig\u00a0 value: 'TRUE'\n```\nRefer to the [Logging agent](/logging/docs/agent/logging/troubleshooting) and the [Monitoring agent](/monitoring/agent/monitoring/troubleshooting) troubleshooting pages to debug specific issues.\n### Enabling debug-level logs\nIt's very helpful to enable debug level logging of the OS Config agent when reporting an issue.\nYou can set the `osconfig-log-level: debug` metadata to enable debug-level logging for the OS Config agent. The collected logs have more information to help with the investigation.\nTo enable debug-level logging for the entire project, run the following command:\n```\ngcloud compute project-info add-metadata \\\u00a0 \u00a0 --project project-id \\\u00a0 \u00a0 --metadata osconfig-log-level=debug\n```\nTo enable debug-level logging for one VM, run the following command:\n```\ngcloud compute instances add-metadata instance-id \\\u00a0 \u00a0 --project project-id \\\u00a0 \u00a0 --metadata osconfig-log-level=debug\n```\n## Additional information\n### What's the set-permissions.sh script doing?\nGiven a project ID, an Identity and Access Management (IAM) role, and an email or a service account, the [set-permissions.sh](/static/stackdriver/docs/set-permissions.sh) script performs the following actions:\n- Enables the Cloud Logging API, the Cloud Monitoring API, and the OS Config API for the project.\n- Grants the `roles/logging.logWriter` and the `roles/monitoring.metricWriter` roles to the [Compute Engine defaultservice account](/compute/docs/access/service-accounts#default_service_account) so that the agents can write logs and metrics to the Logging and Cloud Monitoring APIs.\n- Enables the OS Config metadata for the project so that OS Config agents get activated on the VMs.\n- Grants the specified IAM role to the `gcloud` user or the service account. Project owners have full access to create and manage a Policy. For all other users or service accounts, project owners must grant one of the following roles:- `roles/osconfig.guestPolicyAdmin` : Provides full access to a Policy.\n- `roles/osconfig.guestPolicyEditor` : Allows users to get, update, and list a Policy.\n- `roles/osconfig.guestPolicyViewer` : Provides read-only access to get and list a Policy.\nWhen running the script, you only need to specify the `guestPolicy*` part of the role name. The script supplies the `roles/osconfig.` part of the name.\nThe following invocation of the script enables the APIs, grants the necessary roles to the default service account, and enables the OS Config metadata:\n```\nbash set-permissions.sh --project=PROJECT_ID\n```\nTo use the script to also grant one of the OS Config roles to a user who does not have the `roles/owner` (Owner) role on the project, run the script as follows:\n```\nbash set-permissions.sh --project=PROJECT_ID \\\n --iam-user=USER_EMAIL \\\n --iam-permission-role=guestPolicy[Admin|Editor|Viewer]\n```\nTo use the script to also grant one of the OS Config roles to a non-default service account, run the script as follows:\n```\nbash set-permissions.sh --project=PROJECT_ID \\\n --iam-service-account=SERVICE_ACCT_EMAIL \\\n --iam-permission-role=guestPolicy[Admin|Editor|Viewer]\n```\nFor more information, see the contents of the script.\n### What's the diagnose.sh script doing?\nGiven a project, a Compute Engine instance ID, and an Ops agent Policy ID, the [diagnose.sh](/static/stackdriver/docs/diagnose.sh) script automatically collects the necessary information to help diagnosing issues of the policy:\n- The OS Config agent version\n- The underlying OS Config guest policy\n- The Policies that are applicable to this Compute Engine instance\n- The agent package repos that are pulled on to a Compute Engine instance\n### Terraform integration\nTerraform support is built on top of the Google Cloud CLI commands. To create an Agent Policy using Terraform, follow the [Terraform module instruction](https://github.com/terraform-google-modules/terraform-google-cloud-operations/blob/master/modules/agent-policy/README.md) .", "guide": "Google Cloud Observability"}