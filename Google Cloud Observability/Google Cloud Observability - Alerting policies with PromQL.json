{"title": "Google Cloud Observability - Alerting policies with PromQL", "url": "https://cloud.google.com/monitoring/promql/promql-in-alerting", "abstract": "# Google Cloud Observability - Alerting policies with PromQL\nThis page explains different methods of creating alerting policies with a PromQL query in their condition.\nAlerting policies with a PromQL-based condition provide an open source alternative to using Monitoring Query Language (MQL) queries to configure your alerting policy conditions. You can use PromQL queries to create complex conditions with features such as ratios, dynamic thresholds, and combined metrics.\nIf you use Prometheus in environments outside Google Cloud, or if you use alerting in Managed Service for Prometheus, then you can migrate your Prometheus alerting rules to alerting policies with a PromQL-based condition. This way, you can manage all of your alerting policies in Cloud Monitoring.\nYou can also [import Grafana dashboards intoCloud Monitoring](/monitoring/dashboards/import-grafana-dashboards) .\n- For general information about using PromQL in Monitoring, see [PromQL in Cloud Monitoring](/monitoring/promql) .\n- For general information about alerting policies, see [Behavior of metric-based alerting policies](/monitoring/alerts/concepts-indepth) .", "content": "## Overview\nYou can create alerting policies with a PromQL-based condition in the following ways:\n- Create an alerting policy in the Google Cloud console and define a PromQL query in the code editor.\n- Create an alerting policy with a PromQL-based condition by using the gcloud CLI or the [AlertPolicy](/monitoring/api/ref_v3/rest/v3/projects.alertPolicies#AlertPolicy) construct in the Monitoring API.\n- Migrate your Prometheus alerting rules and notification channels to Cloud Monitoring by using the Google Cloud CLI.\nIncidents created by an alerting policy with a PromQL-based condition appear in the Google Cloud console with your other incidents. You can interact with these incidents in the Google Cloud console.\nYour PromQL alerting policy conditions can reference any metric in Cloud Monitoring, including Google Cloud system metrics, custom and log-based metrics, and Prometheus metrics. You must translate the names of non-Prometheus metrics to PromQL metric syntax. For more information, see [Mapping Monitoring metrics to PromQL](/monitoring/promql/promql-mapping) .\n## Restrictions\nAn alerting policy with a PromQL-based condition can have a duration of at most 24 hours and a lookback window of at most 24 hours. The sum of the duration and lookback window must be at most 25 hours.\nIf your Prometheus alerting rule references a custom metric, then you must first have an equivalent custom metric descriptor in Cloud Monitoring.\n## Pricing\nIn general, Cloud Monitoring system metrics are free, and metrics from external systems, agents, or applications are not. Billable metrics are billed by either the number of bytes or the number of samples ingested.\nFor more information about Cloud Monitoring pricing, see the following documents:\n- [Cloud Monitoring pricing summary](/stackdriver/pricing#monitoring-pricing-summary) .\n- [Cloud Monitoring pricing](/stackdriver/pricing#monitoring-costs) .## What's next\nFor information about using the Google Cloud console to create alerting policies with a PromQL query in the condition, see [Create alerting policies with a PromQL-based condition (Console)](/monitoring/promql/create-promql-alerts-console) .\nFor information about how to create alerting policies with PromQL directly using the Cloud Monitoring API, see [Create alerting policies with a PromQL-based condition (API)](/monitoring/promql/create-promql-alerts) .\nFor information about how to migrate PromQL alerting rules to alerting policies with a PromQL query, see [Migrate alerting rules and receivers from Prometheus](/monitoring/promql/promql-migrate) .\nFor information about importing Grafana dashboards, see [Import Grafana dashboards into Cloud Monitoring](/monitoring/dashboards/import-grafana-dashboards) .", "guide": "Google Cloud Observability"}