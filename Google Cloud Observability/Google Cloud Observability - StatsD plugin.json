{"title": "Google Cloud Observability - StatsD plugin", "url": "https://cloud.google.com/monitoring/agent/plugins/statsd", "abstract": "# Google Cloud Observability - StatsD plugin\n[StatsD](https://github.com/etsy/statsd/wiki) is a protocol for submitting metrics and a daemon for metric data aggregation. By configuring the Monitoring agent's StatsD plugin, you make the agent function as a StatsD daemon that writes metrics to Monitoring.\nUsing the StatsD plugin with its default configuration is the easiest way to get your user-defined metrics into Monitoring. The StatsD plugin is only available in the Linux Stackdriver Monitoring agent.\nThe Monitoring agent can also export other collectd metrics as user-defined metrics, but there is no simple default configuration. See [User-defined metrics from the agent](/monitoring/agent/custom-metrics-agent) for details.\nThis functionality is only available for agents running on Linux. It is not available on Windows.\n", "content": "## Discovery\nMonitoring doesn't automatically detect StatsD. To use StatsD metrics, configure the StatsD plugin as described in the next section.\n## Configuring the StatsD plugin\n### Prerequisites\nThe StatsD plugin requires version 5.5.2-356 or later of the Monitoring agent. To update the agent, see [Updating the agent](/monitoring/agent/monitoring/installation#agent-version) .\n### Enabling the plugin\nDo the following on your supported VM instance running Linux:\n- Download [statsd.conf](https://raw.githubusercontent.com/Stackdriver/stackdriver-agent-service-configs/master/etc/collectd.d/statsd.conf) and place it in `/etc/stackdriver/collectd.d/` , using the following command:```\n(cd /etc/stackdriver/collectd.d/ && sudo curl -O https://raw.githubusercontent.com/Stackdriver/stackdriver-agent-service-configs/master/etc/collectd.d/statsd.conf)\n```\n- The default configuration file instructs the agent to accept StatsD metrics on the default StatsD port, **8125** .If you want to send some metrics to your own StatsD daemon and other metrics to the agent's StatsD daemon, then change the port settings in the configuration file.\n- Restart the Monitoring agent to pick up the StatsD configuration by running the following command:```\nsudo service stackdriver-agent restart\n```\nFor more information on the `collectd` `statsd` plugin, see [Plugin:StatsD](https://collectd.org/wiki/index.php/Plugin:StatsD) .\n## Default mapping to user-defined metrics\nTo get you started quickly, the agent's StatsD plugin comes with a default collectd configuration that maps from StatsD metrics to Stackdriver user-defined metrics:\n- All metrics from the StatsD plugin have `statsd` in the collectd `plugin` component.\n- Each StatsD **metric type** \u2014held in the collectd `type` component\u2014has a corresponding user-defined metric type name.\n- The StatsD **metric name** \u2014held in the collectd `type_instance` component\u2014is stored as the value of a label named `metric` .The value of the `metric` label is different for the metric type `Timer` : it includes both the metric name and a counter name: average, upper, lower, sum, percentile-50, and percentile-95.\nFor example, the following table shows how the supported StatsD metric types and the metric's name are mapped to Monitoring user-defined metrics:\n| StatsD type | StatsD name | Stackdriver metric type    | Metric kind | Value type | Metric label(s)    |\n|:--------------|:--------------|:-------------------------------------|:--------------|:-------------|:------------------------------|\n| Counter  | my.counter | custom.googleapis.com/statsd/derive | Cumulative | Int64  | metric:my.counter    |\n| Gauge   | my.gauge  | custom.googleapis.com/statsd/gauge | Gauge   | Double  | metric:my.gauge    |\n| Set   | my.set  | custom.googleapis.com/statsd/objects | Gauge   | Double  | metric:my.set     |\n| Timer1  | my.timer  | custom.googleapis.com/statsd/latency | Gauge   | Double  | metric:my.timer-average  |\n| nan   | nan   | (same)        | (same)  | (same)  | metric:my.timer-upper   |\n| nan   | nan   | (same)        | (same)  | (same)  | metric:my.timer-lower   |\n| nan   | nan   | (same)        | (same)  | (same)  | metric:my.timer-sum   |\n| nan   | nan   | (same)        | (same)  | (same)  | metric:my.timer-percentile-50 |\n| nan   | nan   | (same)        | (same)  | (same)  | metric:my.timer-percentile-95 |\n| nan   | nan   | custom.googleapis.com/statsd/gauge | Gauge   | (same)  | metric:my.timer-count   |\n**Notes:**  There is an incoming sequence of statsd timer metrics with the same name. The agent aggregates StatsD timer metrics and exports summary data to 7 different time series.\nFor more information on StatsD types, see the [StatsD specification](https://github.com/etsy/statsd/blob/master/docs/metric_types.md) .\n## Customizing exported metrics\nThe default StatsD configuration is designed to get you started quickly. This section helps you customize the configuration to suit more complex needs.\nYou should be familiar with user-defined metrics. For an introduction to metrics, see [Metrics, Time Series, and Resources](/monitoring/api/v3/metrics) . For more information, see [User-defined metrics overview](/monitoring/custom-metrics) .\nYou can customize the following things:\n- You can change the values assigned to the default `metric` label. Using more label values results in more time series in your user-defined metric. Using fewer label values results in fewer time series.\n- You can change the user-defined metric types. You don't have to use the predefined types provided in the default configuration. For example, you could identify metrics with a certain name and use a different user-defined metric type for them.\n- If you change the user-defined metric types, then you can can also change the labels associated with each type. The default configuration has a single label, but you can add more labels or change the label key.\nIf you change the metric types, you should define your new user-defined metric types in the Monitoring API. For details, see the following section, [Designing a metric type](#design-metric) .\n### Example\nAssume that you are using StatsD to monitor an application consisting of two services, `my_service_a` and `my_service_b` . For each service, you want to export to Monitoring a counter metric that represents the number of failed requests. You don't want to use the default StatsD metric types.\n### Incoming collectd metrics\nBefore defining your own metric types, it is important to understand the structure of a collectd metric and how a StatsD metric by default maps into user-defined metrics.\nCollectd metrics, including StatsD metrics, include the following components:\n```\n Host, Plugin, Plugin-instance, Type, Type-instance\n```\nIn this example, the StatsD metrics that you want to export have the following identifiers in collectd:\n| Component  | Expected value(s)   |\n|:----------------|:---------------------------|\n| Host   | any      |\n| Plugin   | statsd      |\n| Plugin instance | unset1      |\n| Type   | derive2     |\n| Type instance | [SERVICE_NAME].GET.[CODE]3 |\n| [VALUE]   | any value4     |\n**Notes** : The StatsD plugin currently leaves this component empty. A StatsD Counter metric is mapped to the collectd `derive` type. For example, a type instance might be `my_service_a.GET.500` . [VALUE] is typically a timestamp and a double-precision number.\nThe following table shows how this metric would be mapped by default:\n| StatsD type | StatsD name   | Stackdriver metric type    | Metric kind | Value type | Metric labels    |\n|:--------------|:---------------------|:------------------------------------|:--------------|:-------------|:---------------------------|\n| Counter  | my_service_a.GET.500 | custom.googleapis.com/statsd/derive | Cumulative | Int64  | metric:my_servce_a.GET.500 |\n| Counter  | my_service_b.GET.403 | custom.googleapis.com/statsd/derive | Cumulative | Int64  | metric:my_servce_b.GET.403 |\nThe default mapping might present some difficulties for you:\n- This particular counter metric ( `[SERVICE_NAME].GET.[CODE]` ) is in the same user-defined metric type as all other counter metrics. You can't easily get just this metric's data, because Stackdriver doesn't presently support regular expression searches on labels.\n- You can't easily get data for individual services or individual response codes in your data. For example, you can't easily get the total number of errors (of all kinds) that occurred in `my_service_a` .\n- The default configuration exports all StatsD metrics to Stackdriver, which could be costly if you are only interested in certain metrics.\n### Designing a metric type\nFor a full discussion of creating metric types, see [Create a user-defined metric type](/monitoring/custom-metrics/creating-metrics#md-create) .\nThe following user-defined metric type is a reasonable choice for the data in this example, because it holds only the StatsD metric you are interested in and because its choice of labels helps to better organize the data:\n- Type:`custom.googleapis.com/http/request_errors`\n- Labels:- `service_name`(STRING): The name of the service.\n- `response_code`(INT64): The HTTP response code.\n- Kind: CUMULATIVE\n- Value type: INT64\nThe following table shows the desired mapping from StatsD to Stackdriver:\n| StatsD type | StatsD name   | Stackdriver metric type     | Metric kind | Value type | Metric labels        |\n|:--------------|:---------------------|:------------------------------------------|:--------------|:-------------|:---------------------------------------------|\n| Counter  | my_service_a.GET.500 | custom.googleapis.com/http/request_errors | Cumulative | Int64  | service_name:my_service_a, response_code:500 |\n| Counter  | my_service_b.GET.403 | custom.googleapis.com/http/request_errors | Cumulative | Int64  | service_name:my_service_b, response_code:403 |\nOnce you've designed the metric type, create it using [metricDescriptors.create](/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors/create) . For information about letting Monitoring create the metric type for you, see [Auto-creation of metric descriptors](/monitoring/custom-metrics/creating-metrics#auto-creation) .\n### Mapping configuration\nTo export the StatsD metric to the new user-defined metric type, replace the contents of the default StatsD plugin configuration, `/etc/stackdriver/collectd.d/statsd.conf` , with the following code:\n```\n<Plugin statsd>\u00a0 Host \"127.0.0.1\"\u00a0 Port \"8125\"\u00a0 DeleteSets true\u00a0 TimerPercentile 50.0\u00a0 TimerPercentile 95.0\u00a0 TimerLower true\u00a0 TimerUpper true\u00a0 TimerSum true\u00a0 TimerCount true</Plugin>LoadPlugin match_regexLoadPlugin target_setLoadPlugin target_replace# Insert a new rule in the default \"PreCache\" chain, to divert your metrics.PreCacheChain \"PreCache\"<Chain \"PreCache\">\u00a0 # The following rule does all the work for your metric:\u00a0 <Rule \"rewrite_request_errors\">\u00a0 \u00a0 # Do a careful match for just your metrics; if it fails, drop down\u00a0 \u00a0 # to the next rule:\u00a0 \u00a0 <Match regex>\u00a0 \u00a0 \u00a0 Plugin \"^statsd$\"\u00a0 \u00a0 \u00a0 TypeInstance \"^.*\\\\.GET\\\\..*$\" \u00a0 \u00a0# Match on type instance.\u00a0 \u00a0 </Match>\u00a0 \u00a0 <Target \"set\">\u00a0 \u00a0 \u00a0 # Specify the metric descriptor type:\u00a0 \u00a0 \u00a0 MetaData \"stackdriver_metric_type\" \"custom.googleapis.com/http/request_errors\"\u00a0 \u00a0 \u00a0 # Initialize the labels from the \"type_instance\" label; clean the values up in the next Target below.\u00a0 \u00a0 \u00a0 MetaData \"label:service_name\" \"%{type_instance}\"\u00a0 \u00a0 \u00a0 MetaData \"label:response_code\" \"%{type_instance}\"\u00a0 \u00a0 </Target>\u00a0 \u00a0 <Target \"replace\">\u00a0 \u00a0 \u00a0 # Remove \".GET.[code]\" to get the real service name.\u00a0 \u00a0 \u00a0 MetaData \"label:service_name\" \"\\\\.GET\\\\.[0-9]*$\" \"\"\u00a0 \u00a0 \u00a0 # Remove \"[service].GET.\" to get the real response code.\u00a0 \u00a0 \u00a0 MetaData \"label:response_code\" \"^[^\\\\.]*\\\\.GET\\\\.\" \"\"\u00a0 \u00a0 </Target>\u00a0 </Rule></Chain>\n```\n**Note:** Installing this configuration file removes the default StatsD mapping. If you want to retain the default mapping for other StatsD metrics, you must add the `Rule` from the default StatsD configuration after the new `rewrite_request_errors` rule.\n### Restart the agent\nRestart your agent to pick up the new configuration by executing the following command on your VM instance:\n```\nsudo service stackdriver-agent restart\n```\nYour user-defined metric information begins to flow into Monitoring immediately.\n## Next steps\nCustomizing the StatsD plugin is the same as customization of collectd metrics for Monitoring. For more information, see the Reference and Troubleshooting sections of [User-defined metrics from the agent](/monitoring/agent/custom-metrics-agent) .", "guide": "Google Cloud Observability"}