{"title": "Google Cloud Observability - Working with the API", "url": "https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/using-api", "abstract": "# Google Cloud Observability - Working with the API\nThis document describes how to manage services and service-level objectives (SLOs) by using the Cloud Monitoring API.\nService Monitoring adds the following resources to the Monitoring API:\n- [services](/monitoring/api/ref_v3/rest/v3/services) \n- [services.serviceLevelObjectives](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives) \nThis document refers to these additions collectively as the SLO API and illustrates the primary uses. For a general overview of the structures in the SLO API, see [Constructs in the API](/stackdriver/docs/solutions/slo-monitoring/api/api-structures) . Comprehensive reference material appears under [Cloud Monitoring API v3](/monitoring/api/ref_v3/rest) .\nYou can use the SLO API to do the following:\n- Create and manage services.\n- Create service-level objectives (SLOs) based on custom or predefined service-level indicators (SLIs) for any of your services.", "content": "## Valid identifiers\nSeveral methods in the SLO API use identifiers for different elements, particularly identifiers for project and services. These IDs adhere to the following rules:\n- Length: 1\u201363 characters\n- Characters: only lower-case letters, number, and hyphens\n- Initial character: lower-case letter\n- Terminal character: lower-case letter or a number, but not a hyphen\nThe regular expression for these rules is as follows: `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?`\n## Examples using curl\nThis section describes the conventions and setup used for invoking the SLO API by using the `curl` tool. If you are using this API through a client library, you can skip this section.\nThe examples on this page access the SLO API by using the `curl` tool to send HTTP requests to REST endpoints. Use the following information about authentication and about invoking `curl` to set the variables used in the invocations.\n### Authentication\n- Create an environment variable to hold the ID of your scoping project of a metrics scope: These examples use `PROJECT_ID` :```\nPROJECT_ID=my-test-service\n```\n- Authenticate to the Google Cloud CLI:```\ngcloud auth login\n```\n- To avoid having to specify your project ID with each command, set it as the default by using gcloud CLI:```\ngcloud config set project ${PROJECT_ID}\n```\n- Create an authorization token and capture it in an environment variable. These examples call the variable `ACCESS_TOKEN` :```\nACCESS_TOKEN=`gcloud auth print-access-token`\n```You have to periodically refresh the access token. If commands that worked suddenly report that you are unauthenticated, re-issue this command.\n- To verify that you got an access token, echo the `ACCESS_TOKEN` variable:```\necho ${ACCESS_TOKEN}ya29.GluiBj8o....\n```\n### Invoking curl\nEach `curl` invocation includes a set of arguments, followed by the URL of a SLO API resource. The common arguments include values specified by the `PROJECT_ID` and `ACCESS_TOKEN` environment variables. You might also have to specify other arguments, for example, to specify the type of the HTTP request (for example, `-X DELETE` ). The default request is `GET` , so the examples don't specify it.\nEach `curl` invocation has this general structure:\n`curl --http1.1 --header \"Authorization: Bearer ${ACCESS_TOKEN}\" <other_args> https://monitoring.googleapis.com/v3/projects/${PROJECT_ID}/<request>`\nFor example, to list all the services in your project, issue the following `GET` request:\n```\ncurl \u00a0--http1.1 --header \"Authorization: Bearer ${ACCESS_TOKEN}\" https://monitoring.googleapis.com/v3/projects/${PROJECT_ID}/services\n```\nThis request returns an array of service descriptions, with entries like the following, a GKE workload service with the service ID \u201cmy-test-service\u201d:\n```\n{\n \"services\": [ {\n  \"name\": \"projects/PROJECT_NUMBER/services/my-test-service\",\n  \"displayName\": \"My Test GKE Workload Service\",\n  \"basicService\": {\n  \"serviceType\": \"GKE_WORKLOAD\",\n  \"serviceLabels\": {\n   \"cluster_name\": \"workload-test\",\n   \"location\": \"us-central1-c\",\n   \"namespace_name\": \"kube-system\",\n   \"project_id\": \"lesser-weevil\",\n   \"top_level_controller_name\": \"gke-metrics-controller\",\n   \"top_level_controller_type\": \"DaemonSet\"\n  }\n  },\n  \"gkeWorkload\": {\n  \"projectId\": \"lesser-weevil\",\n  \"location\": \"us-central1-c\",\n  \"clusterName\": \"workload-test\",\n  \"namespaceName\": \"kube-system\",\n  \"topLevelControllerType\": \"DaemonSet\",\n  \"topLevelControllerName\": \"gke-metrics-controller\"\n  },\n  \"source\": \"USER\",\n  \"telemetry\": {\n  \"resourceName\": \"//container.googleapis.com/projects/PROJECT_ID/zones/us-central1-c/clusters/workload-test/k8s/namespaces/kube-system/apps/daemonsets/gke-metrics-controller\"\n  }\n },\n ...\n ]\n}\n```\nTo see the configuration used to create this service, see [Creating aservice](#service-create) . Note that the `gkeWorkload` structure in this listing is derived from the `basicService` structure used to create the service. See [Service](/monitoring/api/ref_v3/rest/v3/services#Service) for more information about the structure of a service.\n## Managing services\nThe [Service](/monitoring/api/ref_v3/rest/v3/services#Service) resource acts as the root element for organizing your services. Aspects of a particular service, like its SLOs for example, are organized under the name of the service. The following service types are supported:\n- App Engine service:`APP_ENGINE`\n- Cloud Endpoints service:`CLOUD_ENDPOINTS`\n- Canonical Istio service:`ISTIO_CANONICAL_SERVICE``\n- Cluster Istio service:`CLUSTER_ISTIO`\n- Cloud Run service:`CLOUD_RUN`\n- A set of Google Kubernetes Engine-based services:- GKE service:`GKE_SERVICE`\n- GKE namespace:`GKE_NAMESPACE`\n- GKE workload:`GKE_WORKLOAD`\n- Custom services:`CUSTOM`\nFor more information, see [Basic service types](/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli) or [Basic GKE service types](/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-wo-basic-sli) .\nYou can add SLOs to any service in your project by using the API. [Managing SLOs](#managing-slos) covers commands to manipulate SLOs.\n### Service IDs\nEach service has a fully qualified identifier called the . This identifier is stored in the `name` field of the service description, for example:\n```\n\"name\": \"projects/PROJECT_NUMBER/services/PROJECT_ID-zone-us-central1-a-cloudrun-istio-system-cluster-local-gateway\",\n```\nEmbedded in the resource name is a shorter ID for the service, the part of the resource name after the substring `projects/` `` `/services/`\nIf you created your own service with the resource name `projects/` `` `/services/my-test-service` , the service ID is `my-test-service` .\nFor brevity and accuracy, many `curl` examples assume the service ID is held in the environment variable `SERVICE_ID` so you can refer to it repeatedly.\n### Listing services\nTo retrieve information about all the services in your project, invoke the [services.list](/monitoring/api/ref_v3/rest/v3/services/list) method. To retrieve information about a specific service by service ID, use the [services.get](/monitoring/api/ref_v3/rest/v3/services/get) method:\nTo list information about services by using\n`curl`\n, invoke the\n [services.list](/monitoring/api/ref_v3/rest/v3/services/list) \nor\n [services.get](/monitoring/api/ref_v3/rest/v3/services/get) \nmethod by sending a\n`GET`\nrequest to:\n- `https://monitoring.googleapis.com/v3/projects/[PROJECT_ID]/services`to list all services\n- `https://monitoring.googleapis.com/v3/projects/[PROJECT_ID]/services/` ``to get a specific service\nFor example, the following request retrieves information about the service identified by the value stored in the environment variable `SERVICE_ID` :\n```\ncurl \u00a0--http1.1 --header \"Authorization: Bearer ${ACCESS_TOKEN}\" https://monitoring.googleapis.com/v3/projects/${PROJECT_ID}/services/${SERVICE_ID}\n```### Creating a service\nTo create a service, you specify a representation of the service type and send it to the [services.create](/monitoring/api/ref_v3/rest/v3/services/create) method. You can the service-type structures described in [Basic service types](/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli) and [Basic GKE service types](/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-wo-basic-sli) .\nThe structures vary, but the process for calling the API is the same. You must specify a display name for the service and a `basicService` field holding the service representation.\nYou can optionally specify the service ID you want the service to have. The following example shows the creation of a {[gke_name_short}} workload service:\nTo create the service by using `curl` , send a `POST` message to the `https://monitoring.googleapis.com/v3/projects/[PROJECT_ID]/services` endpoint:- If you want to provide an ID for the service, create a variable for the service ID:```\nSERVICE_ID=my-test-service\n```This value is supplied in the URL query parameter `service_id` .\n- Create a variable to hold the request body that describes the service:```\nCREATE_SERVICE_POST_BODY=$(cat <<EOF{\u00a0 \"displayName\": \"My Test GKE Workload Service\",\u00a0 \"basicService\": {\u00a0 \u00a0 \"serviceType\": \"GKE_WORKLOAD\",\u00a0 \u00a0 \"serviceLabels\": {\u00a0 \u00a0 \u00a0 \"cluster_name\": \"workload-test\",\u00a0 \u00a0 \u00a0 \"location\": \"us-central1-c\",\u00a0 \u00a0 \u00a0 \"namespace_name\": \"kube-system\",\u00a0 \u00a0 \u00a0 \"project_id\": \"PROJECT_ID\",\u00a0 \u00a0 \u00a0 \"top_level_controller_name\": \"gke-metrics-controller\",\u00a0 \u00a0 \u00a0 \"top_level_controller_type\": \"DaemonSet\"\u00a0 \u00a0 }\u00a0 }}EOF)\n```\n- Post the request body to the endpoint, and specify the service ID as the value of the `service_id` query parameter:```\ncurl \u00a0--http1.1 --header \"Authorization: Bearer ${ACCESS_TOKEN}\" --header \"Content-Type: application/json\" -X POST -d \"${CREATE_SERVICE_POST_BODY}\" https://monitoring.googleapis.com/v3/projects/${PROJECT_ID}/services?service_id=${SERVICE_ID}\n```\nFor examples of the structures associated with other services, see [Basic service types](/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli) or [Basic GKE service types](/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-wo-basic-sli) .\n### Deleting a service\nTo delete a service you created, invoke the [services.delete](/monitoring/api/ref_v3/rest/v3/services/delete) method and specify the service ID.\nTo delete a service by using\n`curl`\n, send a\n`DELETE`\nrequest to the\n`https://monitoring.googleapis.com/v3/projects/[PROJECT_ID]/services/` ``\nendpoint:\n```\ncurl \u00a0--http1.1 --header \"Authorization: Bearer ${ACCESS_TOKEN}\" -X DELETE https://monitoring.googleapis.com/v3/projects/${PROJECT_ID}/services/${SERVICE_ID}\n```\n## Managing SLOs\nYou can create, delete, and retrieve SLOs by using the SLO API. You can have up to 500 SLOs for each service.\nTo manage SLOs for a service, you must have the service ID. SLOs are named based on the service they belong to. For information about identifying service IDs, see [Service IDs](#service-ids) .\n### Listing SLOs\nTo retrieve information about all the SLOs associated with a service, invoke the [services.serviceLevelObjectives.list](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives/list) method. To retrieve information about a specific SLO by name, use the [services.serviceLevelObjectives.get](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives/get) method:\nTo list information about services by using\n`curl`\n, invoke the\n [services.serviceLevelObjectives.list](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives/list) \nor\n [services.serviceLevelObjectives.get](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives/get) \nmethod by sending a\n`GET`\nrequest to:\n- `https://monitoring.googleapis.com/v3/projects/[PROJECT_ID]/services/[SERVICE_ID]/serviceLevelObjectives`to list all SLOs\n- `https://monitoring.googleapis.com/v3/projects/[PROJECT_ID]/services/[SERVICE_ID]/serviceLevelObjectives/` ``to get a specific SLO\nFor example, the following request lists all SLOs associated with the service ID stored in the environment variable `SERVICE_ID` :\n```\ncurl \u00a0--http1.1 --header \"Authorization: Bearer ${ACCESS_TOKEN}\" https://monitoring.googleapis.com/v3/projects/${PROJECT_ID}/services/${SERVICE_ID}/serviceLevelObjectives\n```\nThe following is an availability SLO retrieved from the \u201ccurrencyservice\u201d service:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/services/PROJECT_ID-zone-us-central1-c-csm-main-default-currencyservice/serviceLevelObjectives/3kavNVTtTMuzL7KcXAxqCQ\",\n \"displayName\": \"98% Availability in Calendar Week\"\n \"serviceLevelIndicator\": {\n \"basicSli\": {\n  \"availability\": {},\n  \"location\": [  \"us-central1-c\"\n  ]\n }\n },\n \"goal\": 0.98,\n \"calendarPeriod\": \"WEEK\",\n},\n```\nThis SLO is built on an availability SLI, it sets a target performance goal of 98 percent, and it measures compliance over a calendar week. For more information on availability SLIs, see [Service-level indicators](/stackdriver/docs/solutions/slo-monitoring#defn-sli) .\nSee [ServiceLevelObjective](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#ServiceLevelObjective) for more information about the structure of SLOs.\nEach SLO has a unique identifier within the service, consisting of the string following `serviceLevelObjectives` in the SLO's `name` field. In the following example:\n```\n\"name\": \"projects/PROJECT_NUMBER/services/PROJECT_ID-zone-us-central1-c-csm-main-default-currencyservice/serviceLevelObjectives/3kavNVTtTMuzL7KcXAxqCQ\",\n```\nthe SLO ID is the string `3kavNVTtTMuzL7KcXAxqCQ` .\nTo retrieve information about this particular SLO, request the SLO by ID.\nTo get a specific SLO by using\n`curl`\n, invoke the\n [services.serviceLevelObjectives.get](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives/get) \nmethod by sending a\n`GET`\nrequest to\n`https://monitoring.googleapis.com/v3/projects/[PROJECT_ID]/services/` `` `/serviceLevelObjectives/` ``\n:\n```\nSLO_ID=dhefHDM4TwSRZEKIV4ZYEg\ncurl --http1.1 --header \"Authorization: Bearer ${ACCESS_TOKEN}\" https://monitoring.googleapis.com/v3/projects/${PROJECT_ID}/services/${SERVICE_ID}/serviceLevelObjectives/${SLO_ID}\n```### Creating an SLO\nTo create an SLO by using the SLO API, you must create a [ServiceLevelObjective](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#ServiceLevelObjective) object and pass it to the [serviceLevelObjectives.create](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives/create) method.\nThe structure of an SLO has many embedded structures, including one for the value of the `serviceLevelIndicator` field.\n- For Anthos Service Mesh, Istio on Google Kubernetes Engine, and App Engine services, the SLIs are pre-defined. You can use the Anthos Service Mesh console to create SLOs; all you have to do is specify the performance goals and compliance periods.\n- For other services, you must define SLOs by using the SLO API. To specify an SLO, you must create a value for the `serviceLevelIndicator` field, as well. See [Creating a service-level indicator](/stackdriver/docs/solutions/slo-monitoring/api/identifying-custom-sli) for some techniques, and [Creating SLIs from metrics](/stackdriver/docs/solutions/slo-monitoring/sli-metrics/overview) for a set of examples based on various sources.\nYou can also create SLIs by using the Google Cloud console. For more information, see [Creating an SLO](/stackdriver/docs/solutions/slo-monitoring/ui/create-slo) .\nThe basic skeleton for building the SLO is as follows:\n```\n{\n \"displayName\": string,\n \"serviceLevelIndicator\": {\n object (ServiceLevelIndicator)\n },\n \"goal\": number,\n // Union field period can be only one of the following:\n \"rollingPeriod\": string,\n \"calendarPeriod\": enum (CalendarPeriod)\n // End of list of possible types for union field period.\n}\n```\nYou must specify the following:\n- Display name: a description of the SLO\n- A service-level indicator, which is one of the three types:- [BasicSli](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#BasicSli) \n- [RequestBasedSli](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#RequestBasedSli) \n- [WindowsBasedSli](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#WindowsBasedSli) \n- The performance goal (a percentage)\n- The compliance period, which one of two types:- A rolling period of some length (in seconds)\n- A calendar periodFor more information about SLIs, performance goals, and compliance periods, see [Concepts in service monitoring](/stackdriver/docs/solutions/slo-monitoring) .\nFor Anthos Service Mesh, Istio on Google Kubernetes Engine, and App Engine services, the SLI type is the basic SLI.\nFor other services, you have to create a request-based SLI or a windows-based SLI. See [Creating a service-level indicator](/stackdriver/docs/solutions/slo-monitoring/api/identifying-custom-sli) for some techniques.\nAfter you have the SLI, you can build the SLO. The following example defines an SLO for a service that uses a basic SLI. You might have several SLOs on a single SLI, for example, one for 95% availability and one for 99% availability. The following example is an SLO for 95% availability over a calendar week:\n```\n{\n \"serviceLevelIndicator\": {\n \"basicSli\": {\n  \"availability\": {},\n  \"location\": [  \"us-central1-c\"\n  ]\n }\n },\n \"goal\": 0.95,\n \"calendarPeriod\": \"WEEK\",\n \"displayName\": \"95% Availability in Calendar Week\"\n}\n```\nThis example specifies an SLO for 75% availability over a rolling 3-day period:\n```\n{\n \"serviceLevelIndicator\": {\n \"basicSli\": {\n  \"availability\": {},\n  \"location\": [  \"us-central1-c\"\n  ]\n }\n },\n \"goal\": 0.75,\n \"rollingPeriod\": \"259200s\",\n \"displayName\": \"75% Availability in Rolling 3 Days\"\n}\n```\nTo create an SLO by using\n`curl`\n, send a\n`POST`\nmessage to the\n`https://monitoring.googleapis.com/v3/projects/[PROJECT_ID]/services/` `` `/serviceLevelObjectives`\nendpoint:\n- Create a variable for the service ID:```\nSERVICE_ID=custom:my-test-service\n```\n- Create a variable to hold the request body, an instance of the `ServiceLevelObjective` object. This example uses one of the SLOs described previously:```\nCREATE_SLO_POST_BODY=$(cat <<EOF{\u00a0 \"serviceLevelIndicator\": {\u00a0 \u00a0 \"basicSli\": {\u00a0 \u00a0 \u00a0 \"availability\": {},\u00a0 \u00a0 \u00a0 \"location\": [\u00a0 \u00a0 \u00a0 \u00a0 \"us-central1-c\"\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 }\u00a0 },\u00a0 \"goal\": 0.75,\u00a0 \"rollingPeriod\": \"259200s\",\u00a0 \"displayName\": \"75% Availability in Rolling 3 Days\"}EOF)\n```\n- Post the request body to the endpoint:```\ncurl \u00a0--http1.1 --header \"Authorization: Bearer ${ACCESS_TOKEN}\" --header \"Content-Type: application/json\" -X POST -d \"${CREATE_SLO_POST_BODY}\" https://monitoring.googleapis.com/v3/projects/${PROJECT_ID}/services/${SERVICE_ID}/serviceLevelObjectives\n```Optionally, you can also specify a desired ID for the SLO as the value of the `service_level_objective_id` query parameter:```\nSLO_ID=test-slo-idcurl \u00a0--http1.1 --header \"Authorization: Bearer ${ACCESS_TOKEN}\" --header \"Content-Type: application/json\" -X POST -d \"${CREATE_SLO_POST_BODY}\" https://monitoring.googleapis.com/v3/projects/${PROJECT_ID}/services/${SERVICE_ID}/serviceLevelObjectives?service_level_objective_id=${SLO_ID}\n```### Deleting an SLO\nTo delete an SLO, invoke the [services.serviceLevelObjectives.delete](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives/delete) method and specify the ID of the SLO in your project:\nTo delete an SLO by using\n`curl`\n, send a\n`DELETE`\nrequest to the\n`https://monitoring.googleapis.com/v3/projects/[PROJECT_ID]/services/` `` `/serviceLevelObjectives/` ``\nendpoint:\n```\ncurl \u00a0--http1.1 --header \"Authorization: Bearer ${ACCESS_TOKEN}\" -X DELETE https://monitoring.googleapis.com/v3/projects/${PROJECT_ID}/services/${SERVICE_ID}/serviceLevelObjectives/${SLO_ID}\n```\n## Accessing SLO time series\nSLO data is stored in time series, so you can use the [timeSeries.list](/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) method to retrieve it. However, this data isn't stored in standard metric types, so you can't use the standard mechanism of specifying a metric-type filter to the `timeSeries.list` method.\nInstead, SLO time series are retrieved by specifying another type of filter, a **time-series selector** , to the `timeSeries.list` method in the `filter` parameter. See [Retrieving SLO data](/stackdriver/docs/solutions/slo-monitoring/api/timeseries-selectors) for information on using these selectors.\nYou also use time-series selectors to set up alerting policies programmatically. See [Alerting on your burn rate](/stackdriver/docs/solutions/slo-monitoring/alerting-on-budget-burn-rate) for more information.", "guide": "Google Cloud Observability"}