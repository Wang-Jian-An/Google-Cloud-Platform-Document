{"title": "Google Cloud Observability - \u4f7f\u7528 Go \u751f\u6210\u8ddf\u8e64\u8a18\u9304\u548c\u6307\u6a19", "url": "https://cloud.google.com/stackdriver/docs/instrumentation/setup/go?hl=zh-cn", "abstract": "# Google Cloud Observability - \u4f7f\u7528 Go \u751f\u6210\u8ddf\u8e64\u8a18\u9304\u548c\u6307\u6a19\n\u672c\u6587\u6a94\u4ecb\u7d39\u77ad\u5982\u4f55\u4fee\u6539 Go \u61c9\u7528\u4ee5\u4f7f\u7528\u958b\u6e90 [OpenTelemetry](https://opentelemetry.io/docs/what-is-opentelemetry/) \u6846\u67b6\u6536\u96c6\u8ddf\u8e64\u8a18\u9304\u548c\u6307\u6a19\u6578\u64da\uff0c\u4ee5\u53ca\u5982\u4f55\u5c07\u7d50\u69cb\u5316 JSON \u65e5\u8a8c\u5beb\u5165\u6a19\u6e96\u8f38\u51fa\u3002\u672c\u6587\u6a94\u9084\u4ecb\u7d39\u4e86\u60a8\u53ef\u4ee5\u5b89\u88dd\u548c\u904b\u884c\u7684\u793a\u4f8b\u61c9\u7528\u3002\u8a72\u61c9\u7528\u5df2\u914d\u7f6e\u7232\u751f\u6210\u6307\u6a19\u3001\u8ddf\u8e64\u8a18\u9304\u548c\u65e5\u8a8c\u3002\n", "content": "## \u95dc\u65bc\u4e0a\u4e0b\u6587\nOpenTelemetry \u7684 [\u4e0a\u4e0b\u6587](https://opentelemetry.io/docs/specs/otel/context/) \u662f\u4e00\u7a2e\u5728\u9032\u7a0b\u5167\u8de8 API \u651c\u5e36\u57f7\u884c\u7bc4\u570d\u7684\u503c\u7684\u6a5f\u5236\u3002\u4e0a\u4e0b\u6587\u7684\u4e00\u500b\u91cd\u8981\u7528\u9014\u662f\u651c\u5e36\u7576\u524d\u6d3b\u8e8d span\uff0c\u4ee5\u4fbf\u9032\u884c\u4fee\u6539\uff0c\u6216\u5728\u5275\u5efa\u4efb\u4f55\u65b0 span \u6642\u4f5c\u7232\u5176\u7236\u7d1a\u5f15\u7528\u3002\u7e3d\u7d50\uff1a\n- [](https://opentelemetry.io/docs/specs/otel/context/) \u4e0a\u4e0b\u6587\u662f\u6307\u5728\u9032\u7a0b\u5167\u8de8 API \u50b3\u64ad\u57f7\u884c\u7bc4\u570d\u7684\u503c\uff08\u5305\u62ec\u7576\u524d\u6d3b\u8e8d span\uff09\u7684\u6a5f\u5236\u3002\n- [Span Context](https://opentelemetry.io/docs/concepts/signals/traces/#span-context) \u662f\u6bcf\u500b span \u4e0a\u7684\u4e0d\u53ef\u8b8a\u5c0d\u8c61\uff0c\u5176\u4e2d\u5305\u62ec\u8ddf\u8e64\u8a18\u9304 ID\u3001span ID \u4ee5\u53ca\u8ddf\u8e64\u8a18\u9304\u7684\u6a19\u8a8c\u548c\u72c0\u614b\u3002\n- [\u50b3\u64ad](https://opentelemetry.io/docs/concepts/context-propagation/#propagation) \u662f\u5728\u670d\u52d9\u548c\u9032\u7a0b\u4e4b\u9593\u79fb\u52d5\u4e0a\u4e0b\u6587\u7684\u6a5f\u5236\u3002\nGo \u6a19\u6e96\u5eab\u7684 [context.Context](https://pkg.go.dev/context) \u9084\u53ef\u8de8 API \u908a\u754c\u651c\u5e36\u9650\u5b9a\u4e86\u7bc4\u570d\u7684\u503c\u3002\u901a\u5e38\uff0c\u670d\u52d9\u5668\u4e2d\u7684\u8655\u7406\u7a0b\u5e8f\u51fd\u6578\u6703\u63a5\u6536\u50b3\u5165\u7684 `Context` \uff0c\u4e26\u901a\u904e\u8abf\u7528\u93c8\u5c07\u5176\u50b3\u905e\u7d66\u767c\u51fa\u50b3\u51fa\u8acb\u6c42\u7684\u4efb\u4f55\u5ba2\u6236\u7aef\u3002\nGo \u7684\u6a19\u6e96\u5eab `context.Context` \u7528\u4f5c Go \u4e2d OpenTelemetry \u4e0a\u4e0b\u6587\u7684\u5be6\u73fe\u3002\n## \u6e96\u5099\u5de5\u4f5c\u5553\u7528 Cloud Logging API, Cloud Monitoring API, and Cloud Trace API\u3002\n[\u5553\u7528 API](https://console.cloud.google.com/flows/enableapi?apiid=logging.googleapis.com%E3%80%81monitoring.googleapis.com%E3%80%81trace.googleapis.com&hl=zh-cn)\n## \u5c0d\u61c9\u7528\u9032\u884c\u63d2\u6a01\u8655\u7406\u4ee5\u6536\u96c6\u8ddf\u8e64\u8a18\u9304\u3001\u6307\u6a19\u548c\u65e5\u8a8c\n\u5982\u9700\u5c0d\u61c9\u7528\u9032\u884c\u63d2\u6a01\u8655\u7406\u4ee5\u6536\u96c6\u8ddf\u8e64\u8a18\u9304\u548c\u6307\u6a19\u6578\u64da\uff0c\u4e26\u5c07\u7d50\u69cb\u5316 JSON \u5beb\u5165\u6a19\u6e96\u8f38\u51fa\uff0c\u8acb\u57f7\u884c\u4ee5\u4e0b\u6b65\u9a5f\uff0c\u5982\u672c\u6587\u6a94\u5f8c\u7e8c\u90e8\u5206\u6240\u8ff0\uff1a\n- [\u914d\u7f6e\u4e3b\u51fd\u6578](#config-main) \n- [\u914d\u7f6e OpenTelemetry](#config-otel) \n- [\u914d\u7f6e\u7d50\u69cb\u5316\u65e5\u8a8c\u8a18\u9304](#config-structured-logging) \n- [\u5411 HTTP \u670d\u52d9\u5668\u6dfb\u52a0\u63d2\u6a01](#server) \n- [\u5c07 Trace span \u8207\u65e5\u8a8c\u548c\u6307\u6a19\u76f8\u95dc\u806f](#pass-context) \n- [\u5411 HTTP \u5ba2\u6236\u7aef\u6dfb\u52a0\u63d2\u6a01](#client) \n- [\u5beb\u5165\u7d50\u69cb\u5316\u65e5\u8a8c](#write-structured-logging) \n### \u914d\u7f6e\u4e3b\u51fd\u6578\n\u5982\u9700\u914d\u7f6e\u61c9\u7528\u4ee5\u4f7f\u7528 OpenTelemetry \u5beb\u5165\u7d50\u69cb\u5316\u65e5\u8a8c\u4ee5\u53ca\u6536\u96c6\u6307\u6a19\u548c\u8ddf\u8e64\u8a18\u9304\u6578\u64da\uff0c\u8acb\u66f4\u65b0 `main` \u51fd\u6578\u4ee5\u914d\u7f6e Go \u7d50\u69cb\u5316\u65e5\u8a8c\u8a18\u9304\u8edf\u4ef6\u5305 `slog` \u4e26\u914d\u7f6e OpenTelemetry\u3002\n\u4ee5\u4e0b\u4ee3\u78bc\u793a\u4f8b\u5c55\u793a\u4e86\u6703\u8abf\u7528\u5169\u500b\u8f14\u52a9\u51fd\u6578\uff08 `setupLogging()` \u548c `setupOpenTelemetry()` \uff09\u7684 `main` \u51fd\u6578\u3002\u4ee5\u4e0b\u8f14\u52a9\u51fd\u6578\u7528\u65bc\u914d\u7f6e\u65e5\u8a8c\u8a18\u9304\u8edf\u4ef6\u5305\u548c OpenTelemetry\uff1a\n[\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/main.go)\n```\nfunc main() {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 // Setup logging\u00a0 \u00a0 \u00a0 \u00a0 setupLogging()\u00a0 \u00a0 \u00a0 \u00a0 // Setup metrics, tracing, and context propagation\u00a0 \u00a0 \u00a0 \u00a0 shutdown, err := setupOpenTelemetry(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 slog.ErrorContext(ctx, \"error setting up OpenTelemetry\", slog.Any(\"error\", err))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 os.Exit(1)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Run the http server, and shutdown and flush telemetry after it exits.\u00a0 \u00a0 \u00a0 \u00a0 slog.InfoContext(ctx, \"server starting...\")\u00a0 \u00a0 \u00a0 \u00a0 if err = errors.Join(runServer(), shutdown(ctx)); err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 slog.ErrorContext(ctx, \"server exited with error\", slog.Any(\"error\", err))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 os.Exit(1)\u00a0 \u00a0 \u00a0 \u00a0 }}\n```\n\u914d\u7f6e\u65e5\u8a8c\u8a18\u9304\u8edf\u4ef6\u5305\u5f8c\uff0c\u5982\u9700\u5c07\u65e5\u8a8c\u8207\u8ddf\u8e64\u8a18\u9304\u6578\u64da\u76f8\u95dc\u806f\uff0c\u60a8\u5fc5\u9808\u5c07 Go `Context` \u50b3\u905e\u7d66\u65e5\u8a8c\u8a18\u9304\u5668\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1\u672c\u6587\u6a94\u7684 [\u5beb\u5165\u7d50\u69cb\u5316\u65e5\u8a8c](#write-structured-logging) \u90e8\u5206\u3002\n### \u914d\u7f6e OpenTelemetry\n\u5982\u9700\u4f7f\u7528 [OTLP \u5354\u8b70](https://opentelemetry.io/docs/specs/otlp/) \u6536\u96c6\u548c\u5c0e\u51fa\u8ddf\u8e64\u8a18\u9304\u548c\u6307\u6a19\uff0c\u8acb\u914d\u7f6e\u5168\u5c40 `TracerProvider` \u548c `MeterProvider` \u5be6\u4f8b\u3002\u4ee5\u4e0b\u4ee3\u78bc\u793a\u4f8b\u5c55\u793a\u4e86\u5f9e `main` \u51fd\u6578\u8abf\u7528\u7684 `setupOpenTelemetry` \u51fd\u6578\uff1a\n[\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/setup.go)\n```\nfunc setupOpenTelemetry(ctx context.Context) (shutdown func(context.Context) error, err error) {\u00a0 \u00a0 \u00a0 \u00a0 var shutdownFuncs []func(context.Context) error\u00a0 \u00a0 \u00a0 \u00a0 // shutdown combines shutdown functions from multiple OpenTelemetry\u00a0 \u00a0 \u00a0 \u00a0 // components into a single function.\u00a0 \u00a0 \u00a0 \u00a0 shutdown = func(ctx context.Context) error {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var err error\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for _, fn := range shutdownFuncs {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = errors.Join(err, fn(ctx))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 shutdownFuncs = nil\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Configure Context Propagation to use the default W3C traceparent format\u00a0 \u00a0 \u00a0 \u00a0 otel.SetTextMapPropagator(autoprop.NewTextMapPropagator())\u00a0 \u00a0 \u00a0 \u00a0 // Configure Trace Export to send spans as OTLP\u00a0 \u00a0 \u00a0 \u00a0 texporter, err := autoexport.NewSpanExporter(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = errors.Join(err, shutdown(ctx))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 tp := trace.NewTracerProvider(trace.WithBatcher(texporter))\u00a0 \u00a0 \u00a0 \u00a0 shutdownFuncs = append(shutdownFuncs, tp.Shutdown)\u00a0 \u00a0 \u00a0 \u00a0 otel.SetTracerProvider(tp)\u00a0 \u00a0 \u00a0 \u00a0 // Configure Metric Export to send metrics as OTLP\u00a0 \u00a0 \u00a0 \u00a0 mreader, err := autoexport.NewMetricReader(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = errors.Join(err, shutdown(ctx))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 mp := metric.NewMeterProvider(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 metric.WithReader(mreader),\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 shutdownFuncs = append(shutdownFuncs, mp.Shutdown)\u00a0 \u00a0 \u00a0 \u00a0 otel.SetMeterProvider(mp)\u00a0 \u00a0 \u00a0 \u00a0 return shutdown, nil}\n```\n\u4e0a\u8ff0\u4ee3\u78bc\u793a\u4f8b\u914d\u7f6e\u5168\u5c40 `TextMapPropagator` \uff0c\u4ee5\u4f7f\u7528 [W3C \u8ddf\u8e64\u4e0a\u4e0b\u6587](https://www.w3.org/TR/trace-context/) \u683c\u5f0f\u4f86 [\u50b3\u64ad\u8ddf\u8e64\u4e0a\u4e0b\u6587](https://opentelemetry.io/docs/concepts/context-propagation/#propagation) \u3002\u6b64\u914d\u7f6e\u53ef\u78ba\u4fdd span \u5728\u8ddf\u8e64\u8a18\u9304\u4e2d\u5177\u6709\u6b63\u78ba\u7684\u7236\u5b50\u95dc\u4fc2\u3002\n\u7232\u4e86\u78ba\u4fdd\u6240\u6709\u5f85\u8655\u7406\u7684\u9059\u6e2c\u6578\u64da\u90fd\u88ab\u6e05\u7a7a\u4e26\u6b63\u5e38\u95dc\u9589\u9023\u63a5\uff0c `setupOpenTelemetry` \u51fd\u6578\u6703\u8fd4\u56de\u4e00\u500b\u540d\u7232 `shutdown` \u7684\u51fd\u6578\uff0c\u8a72\u51fd\u6578\u6703\u57f7\u884c\u9019\u4e9b\u64cd\u4f5c\u3002\n### \u914d\u7f6e\u7d50\u69cb\u5316\u65e5\u8a8c\u8a18\u9304\n\u5982\u9700\u5c07\u8ddf\u8e64\u8a18\u9304\u4fe1\u606f\u4f5c\u7232\u5beb\u5165\u6a19\u6e96\u8f38\u51fa\u7684 JSON \u683c\u5f0f\u65e5\u8a8c\u7684\u4e00\u90e8\u5206\u6dfb\u52a0\uff0c\u8acb\u914d\u7f6e Go \u7d50\u69cb\u5316\u65e5\u8a8c\u8a18\u9304\u8edf\u4ef6\u5305 `slog` \u3002\u4ee5\u4e0b\u4ee3\u78bc\u793a\u4f8b\u5c55\u793a\u4e86\u5f9e `main` \u51fd\u6578\u8abf\u7528\u7684 `setupLogging` \u51fd\u6578\uff1a\n[\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/setup.go)\n```\nfunc setupLogging() {\u00a0 \u00a0 \u00a0 \u00a0 // Use json as our base logging format.\u00a0 \u00a0 \u00a0 \u00a0 jsonHandler := slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{ReplaceAttr: replacer})\u00a0 \u00a0 \u00a0 \u00a0 // Add span context attributes when Context is passed to logging calls.\u00a0 \u00a0 \u00a0 \u00a0 instrumentedHandler := handlerWithSpanContext(jsonHandler)\u00a0 \u00a0 \u00a0 \u00a0 // Set this handler as the global slog handler.\u00a0 \u00a0 \u00a0 \u00a0 slog.SetDefault(slog.New(instrumentedHandler))}\n```\n\u4e0a\u8ff0\u4ee3\u78bc\u8abf\u7528 `handlerWithSpanContext` \u51fd\u6578\uff0c\u8a72\u51fd\u6578\u5f9e `Context` \u5be6\u4f8b\u4e2d\u63d0\u53d6\u4fe1\u606f\uff0c\u4e26\u5c07\u8a72\u4fe1\u606f\u4f5c\u7232\u5c6c\u6027\u6dfb\u52a0\u5230\u65e5\u8a8c\u4e2d\u3002\u7136\u5f8c\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u9019\u4e9b\u5c6c\u6027\u5c07\u65e5\u8a8c\u8207\u8ddf\u8e64\u8a18\u9304\u76f8\u95dc\u806f\uff1a\n- `logging.googleapis.com/trace`\uff1a\u8207\u65e5\u8a8c\u689d\u76ee\u95dc\u806f\u7684\u8ddf\u8e64\u8a18\u9304\u7684\u8cc7\u6e90\u540d\u7a31\u3002\n- `logging.googleapis.com/spanId`\uff1a\u8207\u65e5\u8a8c\u689d\u76ee\u95dc\u806f\u7684\u8ddf\u8e64\u8a18\u9304\u7684 span ID\u3002\n- `logging.googleapis.com/trace_sampled`\uff1a\u6b64\u5b57\u6bb5\u7684\u503c\u5fc5\u9808\u662f`true`\u6216`false`\u3002\n\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u9019\u4e9b\u5b57\u6bb5\uff0c\u8acb\u53c3\u95b1 [LogEntry](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry?hl=zh-cn) \u7d50\u69cb\u3002\n[\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/logger.go)\n```\nfunc handlerWithSpanContext(handler slog.Handler) *spanContextLogHandler {\u00a0 \u00a0 \u00a0 \u00a0 return &spanContextLogHandler{Handler: handler}}// spanContextLogHandler is an slog.Handler which adds attributes from the// span context.type spanContextLogHandler struct {\u00a0 \u00a0 \u00a0 \u00a0 slog.Handler}// Handle overrides slog.Handler's Handle method. This adds attributes from the// span context to the slog.Record.func (t *spanContextLogHandler) Handle(ctx context.Context, record slog.Record) error {\u00a0 \u00a0 \u00a0 \u00a0 // Get the SpanContext from the golang Context.\u00a0 \u00a0 \u00a0 \u00a0 if s := trace.SpanContextFromContext(ctx); s.IsValid() {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Add trace context attributes following Cloud Logging structured log format described\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // in https://cloud.google.com/logging/docs/structured-logging#special-payload-fields\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 record.AddAttrs(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 slog.Any(\"logging.googleapis.com/trace\", s.TraceID()),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 record.AddAttrs(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 slog.Any(\"logging.googleapis.com/spanId\", s.SpanID()),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 record.AddAttrs(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 slog.Bool(\"logging.googleapis.com/trace_sampled\", s.TraceFlags().IsSampled()),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return t.Handler.Handle(ctx, record)}func replacer(groups []string, a slog.Attr) slog.Attr {\u00a0 \u00a0 \u00a0 \u00a0 // Rename attribute keys to match Cloud Logging structured log format\u00a0 \u00a0 \u00a0 \u00a0 switch a.Key {\u00a0 \u00a0 \u00a0 \u00a0 case slog.LevelKey:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return slog.Any(\"severity\", a.Value)\u00a0 \u00a0 \u00a0 \u00a0 case slog.TimeKey:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return slog.Any(\"timestamp\", a.Value)\u00a0 \u00a0 \u00a0 \u00a0 case slog.MessageKey:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return slog.Any(\"message\", a.Value)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return a}\n```\n### \u5411 HTTP \u670d\u52d9\u5668\u6dfb\u52a0\u63d2\u6a01\n\u5982\u9700\u5411 HTTP \u670d\u52d9\u5668\u8655\u7406\u7684\u8acb\u6c42\u6dfb\u52a0\u8ddf\u8e64\u8a18\u9304\u548c\u6307\u6a19\u63d2\u6a01\uff0c\u8acb\u4f7f\u7528 OpenTelemetry\u3002\u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528 `otelhttp` \u8655\u7406\u7a0b\u5e8f\u50b3\u64ad\u4e0a\u4e0b\u6587\uff0c\u4ee5\u53ca\u9032\u884c\u8ddf\u8e64\u8a18\u9304\u548c\u6307\u6a19\u63d2\u6a01\uff1a\n[\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/server.go)\n```\nfunc runServer() error {\u00a0 \u00a0 \u00a0 \u00a0 handleHTTP(\"/single\", handleSingle)\u00a0 \u00a0 \u00a0 \u00a0 handleHTTP(\"/multi\", handleMulti)\u00a0 \u00a0 \u00a0 \u00a0 return http.ListenAndServe(\":8080\", nil)}// handleHTTP handles the http HandlerFunc on the specified route, and uses// otelhttp for context propagation, trace instrumentation, and metric// instrumentation.func handleHTTP(route string, handleFn http.HandlerFunc) {\u00a0 \u00a0 \u00a0 \u00a0 instrumentedHandler := otelhttp.NewHandler(otelhttp.WithRouteTag(route, handleFn), route)\u00a0 \u00a0 \u00a0 \u00a0 http.Handle(route, instrumentedHandler)}\n```\n\u5728\u524d\u9762\u7684\u4ee3\u78bc\u4e2d\uff0c `otelhttp` \u8655\u7406\u7a0b\u5e8f\u4f7f\u7528\u5168\u5c40 `TracerProvider` \u3001 `MeterProvider` \u548c `TextMapPropagator` \u5be6\u4f8b\u3002 `setupOpenTelemetry` \u51fd\u6578\u6703\u914d\u7f6e\u9019\u4e9b\u5be6\u4f8b\u3002\n### \u5c07\u8ddf\u8e64\u8a18\u9304 span \u8207\u65e5\u8a8c\u548c\u6307\u6a19\u76f8\u95dc\u806f\n\u5982\u9700\u95dc\u806f\u670d\u52d9\u5668\u548c\u5ba2\u6236\u7aef span \u4e26\u95dc\u806f\u6307\u6a19\u548c\u65e5\u8a8c\uff0c\u8acb\u5728\u5beb\u5165\u65e5\u8a8c\u6642\u5c07 Go `Context` \u5be6\u4f8b\u50b3\u905e\u7d66 HTTP \u8acb\u6c42\u3002\u4ee5\u4e0b\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u500b\u8def\u7531\u8655\u7406\u7a0b\u5e8f\uff0c\u8a72\u8655\u7406\u7a0b\u5e8f\u63d0\u53d6 Go `Context` \u5be6\u4f8b\u4e26\u5c07\u8a72\u5be6\u4f8b\u50b3\u905e\u7d66\u65e5\u8a8c\u8a18\u9304\u5668\u548c `callSingle` \u51fd\u6578\uff0c\u8a72\u51fd\u6578\u767c\u51fa\u50b3\u51fa HTTP \u8acb\u6c42\uff1a\n[\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/server.go)\n```\nfunc handleMulti(w http.ResponseWriter, r *http.Request) {\u00a0 \u00a0 \u00a0 \u00a0 subRequests := 3 + rand.Intn(4)\u00a0 \u00a0 \u00a0 \u00a0 // Write a structured log with the request context, which allows the log to\u00a0 \u00a0 \u00a0 \u00a0 // be linked with the trace for this request.\u00a0 \u00a0 \u00a0 \u00a0 slog.InfoContext(r.Context(), \"handle /multi request\", slog.Int(\"subRequests\", subRequests))\u00a0 \u00a0 \u00a0 \u00a0 // Make 3-7 http requests to the /single endpoint.\u00a0 \u00a0 \u00a0 \u00a0 for i := 0; i < subRequests; i++ {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err := callSingle(r.Context()); err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 http.Error(w, err.Error(), http.StatusBadGateway)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintln(w, \"ok\")}\n```\n\u5728\u524d\u9762\u7684\u4ee3\u78bc\u4e2d\uff0c\u51fd\u6578\u8abf\u7528 `r.Context()` \u5f9e HTTP \u8acb\u6c42\u4e2d\u6aa2\u7d22 Go `Context` \u3002\n### \u5411 HTTP \u5ba2\u6236\u7aef\u6dfb\u52a0\u63d2\u6a01\n\u5982\u9700\u5c07\u8ddf\u8e64\u4e0a\u4e0b\u6587\u6ce8\u5165\u50b3\u51fa HTTP \u8acb\u6c42\u4e26\u6dfb\u52a0\u8ddf\u8e64\u8a18\u9304\u548c\u6307\u6a19\u63d2\u6a01\uff0c\u8acb\u8abf\u7528 `otelhttp.Get` \u51fd\u6578\u3002\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c `callSingle` \u51fd\u6578\u6703\u57f7\u884c\u6b64\u64cd\u4f5c\uff1a\n[\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/client.go)\n```\nfunc callSingle(ctx context.Context) error {\u00a0 \u00a0 \u00a0 \u00a0 // otelhttp.Get makes an http GET request, just like net/http.Get.\u00a0 \u00a0 \u00a0 \u00a0 // In addition, it records a span, records metrics, and propagates context.\u00a0 \u00a0 \u00a0 \u00a0 res, err := otelhttp.Get(ctx, \"http://localhost:8080/single\")\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return res.Body.Close()}\n```\n\u5728\u524d\u9762\u7684\u4ee3\u78bc\u4e2d\uff0c `otelhttp` \u8655\u7406\u7a0b\u5e8f\u4f7f\u7528\u5168\u5c40 `TracerProvider` \u3001 `MeterProvider` \u548c `TextMapPropagator` \u5be6\u4f8b\u3002 `setupOpenTelemetry` \u51fd\u6578\u6703\u914d\u7f6e\u9019\u4e9b\u5be6\u4f8b\u3002\n### \u5beb\u5165\u7d50\u69cb\u5316\u65e5\u8a8c\n\u5982\u9700\u5beb\u5165\u93c8\u63a5\u5230\u8ddf\u8e64\u8a18\u9304\u7684\u7d50\u69cb\u5316\u65e5\u8a8c\uff0c\u8acb\u4f7f\u7528 Go \u7684\u7d50\u69cb\u5316\u65e5\u8a8c\u8a18\u9304\u8edf\u4ef6\u5305 `slog` \uff0c\u4e26\u5c07 Go `Context` \u5be6\u4f8b\u50b3\u905e\u7d66\u65e5\u8a8c\u8a18\u9304\u5668\u3002\u5982\u679c\u60a8\u60f3\u8981\u5c07\u65e5\u8a8c\u95dc\u806f\u5230 span\uff0c\u5247\u9700\u8981 Go `Context` \u5be6\u4f8b\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u8a9e\u53e5\u986f\u793a\u77ad\u5982\u4f55\u7232 `slog` \u8abf\u7528 `InfoContext` \u65b9\u6cd5\uff0c\u4e26\u8aaa\u660e\u4e86\u5982\u4f55\u5c07\u5b57\u6bb5 `subRequests` \u6dfb\u52a0\u5230 JSON \u5be6\u4f8b\uff1a\n```\nslog.InfoContext(r.Context(), \"handle /multi request\", slog.Int(\"subRequests\", subRequests))\n```\n## \u904b\u884c\u914d\u7f6e\u7232\u6536\u96c6\u9059\u6e2c\u6578\u64da\u7684\u793a\u4f8b\u61c9\u7528\n\u793a\u4f8b\u61c9\u7528\u4f7f\u7528\u8207\u4f9b\u61c9\u5546\u7121\u95dc\u7684\u683c\u5f0f\uff0c\u5305\u62ec JSON \u65e5\u8a8c\u3001OTLP \u6307\u6a19\u548c\u8ddf\u8e64\u8a18\u9304\u3002\u7232\u4e86\u5c07\u9059\u6e2c\u8def\u7531\u5230 Google Cloud\uff0c\u6b64\u793a\u4f8b\u4f7f\u7528\u914d\u7f6e\u4e86 Google \u5c0e\u51fa\u5668\u7684 OpenTelemetry `Collector` \u3002\u61c9\u7528\u4e2d\u7684\u8ca0\u8f09\u751f\u6210\u5668\u56ae\u61c9\u7528\u7684\u8def\u7531\u767c\u51fa\u8acb\u6c42\u3002\n### \u4e0b\u8f09\u4e26\u90e8\u7f72\u61c9\u7528\n**\u6ce8\u610f** \uff1a\u6211\u5011\u5efa\u8b70\u4f7f\u7528 Cloud Shell \u904b\u884c\u793a\u4f8b\u61c9\u7528\u3002\u4e0d\u904e\uff0c\u5982\u679c\u8981\u5728 Linux \u6216 Mac \u4e0a\u672c\u5730\u904b\u884c\u793a\u4f8b\u61c9\u7528\uff0c\u8acb\u8df3\u904e\u4ee5\u4e0b\u8aaa\u660e\u4e2d\u7684\u7b2c\u4e00\u6b65\u3002\n\u5982\u9700\u904b\u884c\u793a\u4f8b\uff0c\u8acb\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n- Titles in dynamic includes are not used anywhere, and we should avoid paying to translate them\u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\uff0c\u6fc0\u6d3b Cloud Shell\u3002 [\u6fc0\u6d3b Cloud Shell](https://console.cloud.google.com/?cloudshell=true&hl=zh-cn)  [Cloud Shell](https://cloud.google.com/shell/docs/how-cloud-shell-works?hl=zh-cn) \u6703\u8a71\u96a8\u5373\u6703\u5728 Google Cloud \u63a7\u5236\u6aaf\u7684\u5e95\u90e8\u5553\u52d5\uff0c\u4e26\u986f\u793a\u547d\u4ee4\u884c\u63d0\u793a\u7b26\u3002Cloud Shell \u662f\u4e00\u500b\u5df2\u5b89\u88dd Google Cloud CLI \u4e14\u5df2\u7232\u7576\u524d\u9805\u76ee\u8a2d\u7f6e\u503c\u7684 Shell \u74b0\u5883\u3002\u8a72\u6703\u8a71\u53ef\u80fd\u9700\u8981\u5e7e\u79d2\u9418\u6642\u9593\u4f86\u5b8c\u6210\u521d\u59cb\u5316\u3002\n- \u514b\u9686\u4ee3\u78bc\u5eab\uff1a```\ngit clone https://github.com/GoogleCloudPlatform/golang-samples\n```\n- \u8f49\u5230 OpenTelemetry \u76ee\u9304\uff1a```\ncd golang-samples/opentelemetry/instrumentation\n```\n- \u69cb\u5efa\u4e26\u904b\u884c\u793a\u4f8b\uff1a```\ndocker compose up --abort-on-container-exit\n```\u5982\u679c\u60a8\u672a\u5728 Cloud Shell \u4e0a\u904b\u884c\uff0c\u8acb\u4f7f\u7528\u6307\u5411\u6191\u64da\u6587\u4ef6\u7684 `GOOGLE_APPLICATION_CREDENTIALS` \u74b0\u5883\u8b8a\u91cf\u904b\u884c\u61c9\u7528\u3002 [\u61c9\u7528\u9ed8\u8a8d\u6191\u64da](https://cloud.google.com/docs/authentication/application-default-credentials?hl=zh-cn#personal) \u63d0\u4f9b\u4e86\u4e00\u500b\u6191\u64da\u6587\u4ef6 ( `$HOME/.config/gcloud/application_default_credentials.json` )\u3002```\n# Set environment variablesexport GOOGLE_CLOUD_PROJECT=\"PROJECT_ID\"export GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/.config/gcloud/application_default_credentials.json\"export USERID=\"$(id -u)\"# Rundocker compose -f docker-compose.yaml -f docker-compose.creds.yaml up --abort-on-container-exit\n```\n### \u67e5\u770b\u6307\u6a19\n\u793a\u4f8b\u61c9\u7528\u4e2d\u7684 OpenTelemetry \u63d2\u6a01\u751f\u6210 Prometheus \u6307\u6a19\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 [Metrics Explorer](https://cloud.google.com/monitoring/charts/metrics-explorer?hl=zh-cn) \u67e5\u770b\u9019\u4e9b\u6307\u6a19\uff1a\n- `Prometheus/http_server_duration/histogram` \u6703\u8a18\u9304\u670d\u52d9\u5668\u8acb\u6c42\u7684\u6301\u7e8c\u6642\u9593\uff0c\u4e26\u5c07\u7d50\u679c\u5b58\u5132\u5728\u76f4\u65b9\u5716\u4e2d\u3002\n- `Prometheus/http_server_request_content_length_total/counter` \u8a18\u9304 `/multi` \u548c `/single` HTTP \u8def\u7531\u7684\u8acb\u6c42\u5167\u5bb9\u9577\u5ea6\u3002\u6b64\u6307\u6a19\u7684\u6e2c\u91cf\u7d50\u679c\u662f\u7d2f\u7a4d\u7684\uff0c\u9019\u610f\u5473\u7740\u6bcf\u500b\u503c\u4ee3\u8868\u5f9e\u958b\u59cb\u6536\u96c6\u503c\u4ee5\u4f86\u7684\u7e3d\u6578\u3002\n- `Prometheus/http_server_response_content_length_total/counter` \u8a18\u9304 `/multi` \u548c `/single` HTTP \u8def\u7531\u7684\u97ff\u61c9\u5167\u5bb9\u9577\u5ea6\u3002\u6b64\u6307\u6a19\u7684\u6e2c\u91cf\u503c\u662f\u7d2f\u8a08\u7684\u3002- \u5728 Google Cloud \u63a7\u5236\u6aaf\u7684\u5c0e\u822a\u9762\u677f\u4e2d\uff0c\u9078\u64c7 **Monitoring** \uff0c\u7136\u5f8c\u9078\u64c7 **Metrics Explorer** \uff1a [\u9032\u5165 Metrics Explorer](https://console.cloud.google.com/monitoring/metrics-explorer?hl=zh-cn) \n- \u5728 **\u6307\u6a19** \u5143\u7d20\u4e2d\uff0c\u5c55\u958b **\u9078\u64c7\u6307\u6a19** \u83dc\u55ae\uff0c\u5728\u904e\u6ffe\u6b04\u4e2d\u8f38\u5165`http_server`\uff0c\u7136\u5f8c\u4f7f\u7528\u5b50\u83dc\u55ae\u9078\u64c7\u4e00\u500b\u7279\u5b9a\u8cc7\u6e90\u985e\u578b\u548c\u6307\u6a19\uff1a- \u5728 **\u6d3b\u8e8d\u8cc7\u6e90** \u83dc\u55ae\u4e2d\uff0c\u9078\u64c7 **Prometheus \u76ee\u6a19** \u3002\n- \u5728 **\u6d3b\u8e8d\u6307\u6a19\u985e\u5225** \u83dc\u55ae\u4e2d\uff0c\u9078\u64c7 **HTTP** \u3002\n- \u5728 **\u6d3b\u8e8d\u6307\u6a19** \u83dc\u55ae\u4e2d\uff0c\u9078\u64c7\u6307\u6a19\u3002\n- \u9ede\u64ca **\u61c9\u7528** \u3002\n- \u914d\u7f6e\u6578\u64da\u7684\u67e5\u770b\u65b9\u5f0f\u3002\u5982\u679c\u6307\u6a19\u7684\u6e2c\u91cf\u7d50\u679c\u662f\u7d2f\u7a4d\u7684\uff0c\u5247 Metrics Explorer \u6703\u81ea\u52d5\u6309\u6821\u6e96\u6642\u9593\u6bb5\u5c0d\u6e2c\u91cf\u6578\u64da\u9032\u884c\u6b78\u4e00\u5316\uff0c\u5f9e\u800c\u4f7f\u5716\u8868\u986f\u793a\u901f\u7387\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7a2e\u985e\u3001\u985e\u578b\u548c\u8f49\u63db](https://cloud.google.com/monitoring/api/v3/aggregation?hl=zh-cn#ts-conversion) \u3002\u6e2c\u91cf\u6574\u6578\u6216\u96d9\u7cbe\u5ea6\u503c\u6642\uff08\u4f8b\u5982\u4f7f\u7528\u5169\u500b `counter` \u6307\u6a19\uff09\uff0cMetrics Explorer \u6703\u81ea\u52d5\u5c0d\u6240\u6709\u6642\u5e8f\u6c42\u548c\u3002\u5982\u9700\u67e5\u770b `/multi` \u548c `/single` HTTP \u8def\u7531\u7684\u6578\u64da\uff0c\u8acb\u5c07 **\u805a\u5408** \u689d\u76ee\u7684\u7b2c\u4e00\u500b\u83dc\u55ae\u8a2d\u7f6e\u7232 **\u7121** \u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u914d\u7f6e\u5716\u8868\uff0c\u8acb\u53c3\u95b1 [\u4f7f\u7528 Metrics Explorer \u6642\u9078\u64c7\u6307\u6a19](https://cloud.google.com/monitoring/charts/metrics-selector?hl=zh-cn) \u3002\n### \u67e5\u770b\u8ddf\u8e64\u8a18\u9304\n\u5982\u9700\u67e5\u770b\u8ddf\u8e64\u8a18\u9304\u6578\u64da\uff0c\u8acb\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n- \u5728 Google Cloud \u63a7\u5236\u6aaf\u7684\u5c0e\u822a\u9762\u677f\u4e2d\uff0c\u9078\u64c7 **Trace** \uff0c\u7136\u5f8c\u9078\u64c7 **Trace \u63a2\u7d22\u5668** \uff1a [\u8f49\u5230 Trace \u63a2\u7d22\u5668](https://console.cloud.google.com/traces/list?hl=zh-cn) \n- \u5728\u6563\u9ede\u5716\u4e2d\uff0c\u9078\u64c7 URI \u7232`/multi`\u7684\u8ddf\u8e64\u8a18\u9304\u3002\n- \u5728 **\u8ddf\u8e64\u8a18\u9304\u8a73\u60c5** \u9762\u677f\u7684\u7518\u7279\u5716\u4e2d\uff0c\u9078\u64c7\u6a19\u8a18\u7232 `/multi` \u7684 span\u3002\u6b64\u6642\u6703\u6253\u958b\u4e00\u500b\u9762\u677f\uff0c\u5176\u4e2d\u986f\u793a HTTP \u8acb\u6c42\u7684\u76f8\u95dc\u4fe1\u606f\u3002\u9019\u4e9b\u8a73\u7d30\u4fe1\u606f\u5305\u62ec\u65b9\u6cd5\u3001\u72c0\u614b\u4ee3\u78bc\u3001\u5b57\u7bc0\u6578\u4ee5\u53ca\u8abf\u7528\u65b9\u7684\u7528\u6236\u4ee3\u7406\u3002\n- \u5982\u9700\u67e5\u770b\u8207\u6b64\u8ddf\u8e64\u8a18\u9304\u95dc\u806f\u7684\u65e5\u8a8c\uff0c\u8acb\u9078\u64c7 **\u65e5\u8a8c\u548c\u4e8b\u4ef6** \u6a19\u7c64\u9801\u3002\u8a72\u6a19\u7c64\u9801\u6703\u986f\u793a\u5404\u500b\u65e5\u8a8c\u3002\u5982\u9700\u67e5\u770b\u65e5\u8a8c\u689d\u76ee\u7684\u8a73\u7d30\u4fe1\u606f\uff0c\u8acb\u5c55\u958b\u65e5\u8a8c\u689d\u76ee\u3002\u60a8\u9084\u53ef\u4ee5\u9ede\u64ca **\u67e5\u770b\u65e5\u8a8c** \uff0c\u4e26\u4f7f\u7528 Logs Explorer \u67e5\u770b\u65e5\u8a8c\u3002\n\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u4f7f\u7528 Cloud Trace \u63a2\u7d22\u5668\uff0c\u8acb\u53c3\u95b1 [\u67e5\u627e\u548c\u63a2\u7d22\u8ddf\u8e64\u8a18\u9304](https://cloud.google.com/trace/docs/finding-traces?hl=zh-cn) \u3002\n### \u67e5\u770b\u65e5\u8a8c\n\u5728 Logs Explorer \u4e2d\uff0c\u60a8\u53ef\u4ee5\u6aa2\u67e5\u65e5\u8a8c\uff0c\u9084\u53ef\u4ee5\u67e5\u770b\u95dc\u806f\u7684\u8ddf\u8e64\u8a18\u9304\uff08\u5982\u679c\u5b58\u5728\uff09\u3002\n- \u5728 Google Cloud \u63a7\u5236\u6aaf\u7684\u5c0e\u822a\u9762\u677f\u4e2d\uff0c\u9078\u64c7 **Logging** \uff0c\u7136\u5f8c\u9078\u64c7 **Logs Explorer** \uff1a [\u524d\u5f80 Logs Explorer](https://console.cloud.google.com/logs/query?hl=zh-cn) \n- \u627e\u5230\u5177\u6709 `handle /multi request` \u8aaa\u660e\u7684\u65e5\u8a8c\u3002\u5982\u9700\u67e5\u770b\u65e5\u8a8c\u7684\u8a73\u7d30\u4fe1\u606f\uff0c\u8acb\u5c55\u958b\u65e5\u8a8c\u689d\u76ee\u3002\u5728 `jsonPayload` \u5b57\u6bb5\u4e2d\uff0c\u6709\u4e00\u500b\u540d\u7232 `subRequests` \u7684\u689d\u76ee\u3002\u6b64\u689d\u76ee\u7531 `handleMulti` \u51fd\u6578\u4e2d\u7684\u8a9e\u53e5\u6dfb\u52a0\u3002\n- \u9ede\u64ca\u5305\u542b\u201c\u8655\u7406/\u591a\u8acb\u6c42\u201d\u6d88\u606f\u7684\u65e5\u8a8c\u689d\u76ee\u4e2d\u7684 **\u8ddf\u8e64\u8a18\u9304** \uff0c\u7136\u5f8c\u9078\u64c7 **\u67e5\u770b\u8ddf\u8e64\u8a18\u9304\u8a73\u60c5** \u3002 **\u8ddf\u8e64\u8a18\u9304\u8a73\u60c5** \u9762\u677f\u96a8\u5373\u6703\u6253\u958b\u4e26\u986f\u793a\u6240\u9078\u8ddf\u8e64\u8a18\u9304\u3002\n\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u4f7f\u7528 Logs Explorer\uff0c\u8acb\u53c3\u95b1 [\u4f7f\u7528 Logs Explorer \u67e5\u770b\u65e5\u8a8c](https://cloud.google.com/logging/docs/view/logs-explorer-interface?hl=zh-cn) \u3002\n## \u5f8c\u7e8c\u6b65\u9a5f\n- [OpenTelemetry](https://opentelemetry.io/docs/what-is-opentelemetry/) \n- [OTLP \u6982\u89bd](https://opentelemetry.io/docs/specs/otlp/) \n- [\u7d50\u69cb\u5316\u65e5\u8a8c\u8a18\u9304](https://cloud.google.com/logging/docs/structured-logging?hl=zh-cn) \n- [\u6392\u67e5 Managed Service for Prometheus \u7684\u554f\u984c](https://cloud.google.com/stackdriver/docs/managed-prometheus/troubleshooting?hl=zh-cn) \n- [\u6392\u67e5 Cloud Trace \u554f\u984c](https://cloud.google.com/trace/docs/troubleshooting?hl=zh-cn)", "guide": "Google Cloud Observability"}