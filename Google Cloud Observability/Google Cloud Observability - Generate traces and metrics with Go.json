{"title": "Google Cloud Observability - Generate traces and metrics with Go", "url": "https://cloud.google.com/stackdriver/docs/instrumentation/setup/go", "abstract": "# Google Cloud Observability - Generate traces and metrics with Go\nThis document describes how to modify a Go app to collect trace and metric data using the open source [OpenTelemetry](https://opentelemetry.io/docs/what-is-opentelemetry/) framework, and how to write structured JSON logs to standard out. This document also provides information about a sample app that you can install and run. The app is configured to generate metrics, traces, and logs.\n", "content": "## About context\nOpenTelemetry's [Context](https://opentelemetry.io/docs/specs/otel/context/) is a mechanism for carrying execution-scoped values across APIs within a process. An important use of context is to carry the current active span so it can be modified, or referenced as the parent of any new spans when they are created. To summarize:\n- [Context](https://opentelemetry.io/docs/specs/otel/context/) refers to the mechanism to propagate execution-scoped values, including the current active span, across APIs within a process.\n- [Span Context](https://opentelemetry.io/docs/concepts/signals/traces/#span-context) is an immutable object on every span that includes the trace ID, the span ID, and flags and state for the trace.\n- [Propagation](https://opentelemetry.io/docs/concepts/context-propagation/#propagation) is the is the mechanism that moves context between services and processes.\nThe Go standard library's [context.Context](https://pkg.go.dev/context) also carries scoped values across API boundaries. Typically, handler functions in a server receive an incoming `Context` and pass it through the call chain to any clients making outgoing requests.\nGo's standard library `context.Context` is used as the implementation of OpenTelemetry Context in Go.\n## Before you begin\nEnable the Cloud Logging API, Cloud Monitoring API, and Cloud Trace API APIs.\n[Enable the APIs](https://console.cloud.google.com/flows/enableapi?apiid=logging.googleapis.com,monitoring.googleapis.com,trace.googleapis.com)\n## Instrument your app to collect traces, metrics, and logs\nTo instrument your app to collect trace and metric data, and to write structured JSON to standard out, perform the following steps as described in subsequent sections of this document:\n- [Configure the main function](#config-main) \n- [Configure OpenTelemetry](#config-otel) \n- [Configure structured logging](#config-structured-logging) \n- [Add instrumentation to the HTTP server](#server) \n- [Link trace spans with logs and metrics](#pass-context) \n- [Add instrumentation to the HTTP client](#client) \n- [Write structured logs](#write-structured-logging) \n### Configure the main function\nTo configure the app to write structured logs and to collect metrics and trace data by using OpenTelemetry, update the `main` function to configure the Go structured logging package, `slog` , and to configure OpenTelemetry.\nThe following code sample illustrates a `main` function that calls two helper functions, `setupLogging()` and `setupOpenTelemetry()` . These helper functions configure the logging package and OpenTelemetry:\n[View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/main.go)\n```\nfunc main() {\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 // Setup logging\u00a0 \u00a0 \u00a0 \u00a0 setupLogging()\u00a0 \u00a0 \u00a0 \u00a0 // Setup metrics, tracing, and context propagation\u00a0 \u00a0 \u00a0 \u00a0 shutdown, err := setupOpenTelemetry(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 slog.ErrorContext(ctx, \"error setting up OpenTelemetry\", slog.Any(\"error\", err))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 os.Exit(1)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Run the http server, and shutdown and flush telemetry after it exits.\u00a0 \u00a0 \u00a0 \u00a0 slog.InfoContext(ctx, \"server starting...\")\u00a0 \u00a0 \u00a0 \u00a0 if err = errors.Join(runServer(), shutdown(ctx)); err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 slog.ErrorContext(ctx, \"server exited with error\", slog.Any(\"error\", err))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 os.Exit(1)\u00a0 \u00a0 \u00a0 \u00a0 }}\n```\nAfter you configure the logging package, to link your logs to your trace data, you must pass the Go `Context` to the logger. For more information, see the [Write structured logs](#write-structured-logging) section of this document.\n### Configure OpenTelemetry\nTo collect and export traces and metrics by using the [OTLP protocol](https://opentelemetry.io/docs/specs/otlp/) , configure the global `TracerProvider` and `MeterProvider` instances. The following code sample illustrates the `setupOpenTelemetry` function, which is called from the `main` function:\n[View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/setup.go)\n```\nfunc setupOpenTelemetry(ctx context.Context) (shutdown func(context.Context) error, err error) {\u00a0 \u00a0 \u00a0 \u00a0 var shutdownFuncs []func(context.Context) error\u00a0 \u00a0 \u00a0 \u00a0 // shutdown combines shutdown functions from multiple OpenTelemetry\u00a0 \u00a0 \u00a0 \u00a0 // components into a single function.\u00a0 \u00a0 \u00a0 \u00a0 shutdown = func(ctx context.Context) error {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 var err error\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for _, fn := range shutdownFuncs {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = errors.Join(err, fn(ctx))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 shutdownFuncs = nil\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Configure Context Propagation to use the default W3C traceparent format\u00a0 \u00a0 \u00a0 \u00a0 otel.SetTextMapPropagator(autoprop.NewTextMapPropagator())\u00a0 \u00a0 \u00a0 \u00a0 // Configure Trace Export to send spans as OTLP\u00a0 \u00a0 \u00a0 \u00a0 texporter, err := autoexport.NewSpanExporter(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = errors.Join(err, shutdown(ctx))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 tp := trace.NewTracerProvider(trace.WithBatcher(texporter))\u00a0 \u00a0 \u00a0 \u00a0 shutdownFuncs = append(shutdownFuncs, tp.Shutdown)\u00a0 \u00a0 \u00a0 \u00a0 otel.SetTracerProvider(tp)\u00a0 \u00a0 \u00a0 \u00a0 // Configure Metric Export to send metrics as OTLP\u00a0 \u00a0 \u00a0 \u00a0 mreader, err := autoexport.NewMetricReader(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 err = errors.Join(err, shutdown(ctx))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 mp := metric.NewMeterProvider(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 metric.WithReader(mreader),\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 shutdownFuncs = append(shutdownFuncs, mp.Shutdown)\u00a0 \u00a0 \u00a0 \u00a0 otel.SetMeterProvider(mp)\u00a0 \u00a0 \u00a0 \u00a0 return shutdown, nil}\n```\nThe previous code sample configures the global `TextMapPropagator` to use the [W3C Trace Context](https://www.w3.org/TR/trace-context/) format for [propagating tracecontext](https://opentelemetry.io/docs/concepts/context-propagation/#propagation) . This configuration ensures that spans have the correct parent-child relationship within a trace.\nTo ensure that all pending telemetry is flushed and that connections are closed gracefully, the `setupOpenTelemetry` function returns a function named `shutdown` , which performs those actions.\n### Configure structured logging\nTo include the trace information as part of the JSON-formatted logs written to standard output, configure the Go structured logging package, `slog` . The following code sample illustrates the `setupLogging` function, which is called from the `main` function:\n[View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/setup.go)\n```\nfunc setupLogging() {\u00a0 \u00a0 \u00a0 \u00a0 // Use json as our base logging format.\u00a0 \u00a0 \u00a0 \u00a0 jsonHandler := slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{ReplaceAttr: replacer})\u00a0 \u00a0 \u00a0 \u00a0 // Add span context attributes when Context is passed to logging calls.\u00a0 \u00a0 \u00a0 \u00a0 instrumentedHandler := handlerWithSpanContext(jsonHandler)\u00a0 \u00a0 \u00a0 \u00a0 // Set this handler as the global slog handler.\u00a0 \u00a0 \u00a0 \u00a0 slog.SetDefault(slog.New(instrumentedHandler))}\n```\nThe previous code calls the `handlerWithSpanContext` function, which extracts information from the `Context` instance and adds that information as attributes to a log. These attributes can then be used to correlate a log with a trace:\n- `logging.googleapis.com/trace`: Resource name of the trace associated with the log entry.\n- `logging.googleapis.com/spanId`: The span ID with the trace that is associated with the log entry.\n- `logging.googleapis.com/trace_sampled`: The value of this field must be`true`or`false`.\nFor more information about these fields, see the [LogEntry](/logging/docs/reference/v2/rest/v2/LogEntry) structure.\n[View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/logger.go)\n```\nfunc handlerWithSpanContext(handler slog.Handler) *spanContextLogHandler {\u00a0 \u00a0 \u00a0 \u00a0 return &spanContextLogHandler{Handler: handler}}// spanContextLogHandler is an slog.Handler which adds attributes from the// span context.type spanContextLogHandler struct {\u00a0 \u00a0 \u00a0 \u00a0 slog.Handler}// Handle overrides slog.Handler's Handle method. This adds attributes from the// span context to the slog.Record.func (t *spanContextLogHandler) Handle(ctx context.Context, record slog.Record) error {\u00a0 \u00a0 \u00a0 \u00a0 // Get the SpanContext from the golang Context.\u00a0 \u00a0 \u00a0 \u00a0 if s := trace.SpanContextFromContext(ctx); s.IsValid() {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Add trace context attributes following Cloud Logging structured log format described\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // in https://cloud.google.com/logging/docs/structured-logging#special-payload-fields\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 record.AddAttrs(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 slog.Any(\"logging.googleapis.com/trace\", s.TraceID()),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 record.AddAttrs(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 slog.Any(\"logging.googleapis.com/spanId\", s.SpanID()),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 record.AddAttrs(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 slog.Bool(\"logging.googleapis.com/trace_sampled\", s.TraceFlags().IsSampled()),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return t.Handler.Handle(ctx, record)}func replacer(groups []string, a slog.Attr) slog.Attr {\u00a0 \u00a0 \u00a0 \u00a0 // Rename attribute keys to match Cloud Logging structured log format\u00a0 \u00a0 \u00a0 \u00a0 switch a.Key {\u00a0 \u00a0 \u00a0 \u00a0 case slog.LevelKey:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return slog.Any(\"severity\", a.Value)\u00a0 \u00a0 \u00a0 \u00a0 case slog.TimeKey:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return slog.Any(\"timestamp\", a.Value)\u00a0 \u00a0 \u00a0 \u00a0 case slog.MessageKey:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return slog.Any(\"message\", a.Value)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return a}\n```\n### Add instrumentation to the HTTP server\nTo add trace and metric instrumentation to the requests handled by the HTTP server, use OpenTelemetry. The following sample uses the `otelhttp` handler to propagate context, and for trace and metric instrumentation:\n[View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/server.go)\n```\nfunc runServer() error {\u00a0 \u00a0 \u00a0 \u00a0 handleHTTP(\"/single\", handleSingle)\u00a0 \u00a0 \u00a0 \u00a0 handleHTTP(\"/multi\", handleMulti)\u00a0 \u00a0 \u00a0 \u00a0 return http.ListenAndServe(\":8080\", nil)}// handleHTTP handles the http HandlerFunc on the specified route, and uses// otelhttp for context propagation, trace instrumentation, and metric// instrumentation.func handleHTTP(route string, handleFn http.HandlerFunc) {\u00a0 \u00a0 \u00a0 \u00a0 instrumentedHandler := otelhttp.NewHandler(otelhttp.WithRouteTag(route, handleFn), route)\u00a0 \u00a0 \u00a0 \u00a0 http.Handle(route, instrumentedHandler)}\n```\nIn the previous code, the `otelhttp` handler uses the global `TracerProvider` , `MeterProvider` , and `TextMapPropagator` instances. The `setupOpenTelemetry` function configures these instances.\n### Link trace spans with logs and metrics\nTo link server and client spans, and to associate metrics and logs, pass the Go `Context` instance to the HTTP request and when you write logs. The following example illustrates a route handler that extracts the Go `Context` instance and the passes that instance to the logger and to the `callSingle` function, which makes an outgoing HTTP request:\n[View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/server.go)\n```\nfunc handleMulti(w http.ResponseWriter, r *http.Request) {\u00a0 \u00a0 \u00a0 \u00a0 subRequests := 3 + rand.Intn(4)\u00a0 \u00a0 \u00a0 \u00a0 // Write a structured log with the request context, which allows the log to\u00a0 \u00a0 \u00a0 \u00a0 // be linked with the trace for this request.\u00a0 \u00a0 \u00a0 \u00a0 slog.InfoContext(r.Context(), \"handle /multi request\", slog.Int(\"subRequests\", subRequests))\u00a0 \u00a0 \u00a0 \u00a0 // Make 3-7 http requests to the /single endpoint.\u00a0 \u00a0 \u00a0 \u00a0 for i := 0; i < subRequests; i++ {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err := callSingle(r.Context()); err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 http.Error(w, err.Error(), http.StatusBadGateway)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintln(w, \"ok\")}\n```\nIn the previous code, the function call `r.Context()` retrieves the Go `Context` from the HTTP request.\n### Add instrumentation to the HTTP client\nTo inject the trace context into outgoing HTTP requests and to add trace and metric instrumentation, call the `otelhttp.Get` function. In the following example, the `callSingle` function performs this action:\n[View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/opentelemetry/instrumentation/app/client.go)\n```\nfunc callSingle(ctx context.Context) error {\u00a0 \u00a0 \u00a0 \u00a0 // otelhttp.Get makes an http GET request, just like net/http.Get.\u00a0 \u00a0 \u00a0 \u00a0 // In addition, it records a span, records metrics, and propagates context.\u00a0 \u00a0 \u00a0 \u00a0 res, err := otelhttp.Get(ctx, \"http://localhost:8080/single\")\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return err\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return res.Body.Close()}\n```\nIn the previous code, the `otelhttp` handler uses the global `TracerProvider` , `MeterProvider` , and `TextMapPropagator` instances. The `setupOpenTelemetry` function configures these instances.\n### Write structured logs\nTo write structured logs that link to a trace, use Go's structured logging package, `slog` , and pass the Go `Context` instance to the logger. The Go `Context` instance is required when you want to link a log to a span. For example, the following statement shows how to call the `InfoContext` method for `slog` , and it illustrates how to add the field `subRequests` to the JSON instance:\n```\nslog.InfoContext(r.Context(), \"handle /multi request\", slog.Int(\"subRequests\", subRequests))\n```\n## Run a sample app configured to collect telemetry\nThe example app uses vendor-neutral formats, including JSON logs and OTLP metrics and traces. To route the telemetry to Google Cloud, this sample uses the OpenTelemetry `Collector` configured with Google exporters. The load generator in the app issues requests to the app's routes.\n### Download and deploy the app\n**Note:** We recommend running the sample app by using Cloud Shell. However, if you want to run the sample app locally on Linux or Mac, then skip the first step in the following instructions.\nTo run the sample, do the following:\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- Clone the repository:```\ngit clone https://github.com/GoogleCloudPlatform/golang-samples\n```\n- Go to the OpenTelemetry directory:```\ncd golang-samples/opentelemetry/instrumentation\n```\n- Build and run the sample:```\ndocker compose up --abort-on-container-exit\n```If you aren't running on Cloud Shell, then run the application with the `GOOGLE_APPLICATION_CREDENTIALS` environment variable pointing to a credentials file. [Application DefaultCredentials](/docs/authentication/application-default-credentials#personal) provides a credentials file at `$HOME/.config/gcloud/application_default_credentials.json` .```\n# Set environment variablesexport GOOGLE_CLOUD_PROJECT=\"PROJECT_ID\"export GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/.config/gcloud/application_default_credentials.json\"export USERID=\"$(id -u)\"# Rundocker compose -f docker-compose.yaml -f docker-compose.creds.yaml up --abort-on-container-exit\n```\n### View your metrics\nThe OpenTelemetry instrumentation in the sample app generates Prometheus metrics that you can view by using the [Metrics Explorer](/monitoring/charts/metrics-explorer) :\n- `Prometheus/http_server_duration/histogram` records the duration of server requests and stores the results in a histogram.\n- `Prometheus/http_server_request_content_length_total/counter` records the request content length for the `/multi` and `/single` HTTP routes. The measurements for this metric are cumulative, which means that each value represents the total since collection of values began.\n- `Prometheus/http_server_response_content_length_total/counter` records the response content length for the `/multi` and `/single` HTTP routes. The measurements for this metric are cumulative.- In the navigation panel of the Google Cloud console, select **Monitoring** , and then select **Metrics explorer** : [Go to Metrics explorer](https://console.cloud.google.com/monitoring/metrics-explorer) \n- In the **Metric** element, expand the **Select a metric** menu,  enter`http_server`in the filter bar, and then use the submenus to select a specific resource type and metric:- In the **Active resources** menu, select **Prometheus Target** .\n- In the **Active metric categories** menu, select **Http** .\n- In the **Active metrics** menu, select a metric.\n- Click **Apply** .\n- Configure how the data is viewed.When the measurements for a metric are cumulative, Metrics Explorer automatically normalizes the measured data by the alignment period, which which results in the chart displaying a rate. For more information, see [Kinds, types, and conversions](/monitoring/api/v3/aggregation#ts-conversion) .When integer or double values are measured, such as with the two `counter` metrics, Metrics Explorer automatically sums all time series. To view the data for the `/multi` and `/single` HTTP routes, set the first menu of the **Aggregation** entry to **None** .For more information about configuring a chart, see [Select metrics when using Metrics Explorer.](/monitoring/charts/metrics-selector) \n### View your traces\nTo view your trace data, do the following:\n- In the navigation panel of the Google Cloud console, select **Trace** , and then select **Trace explorer** : [Go to Trace explorer](https://console.cloud.google.com/traces/list) \n- In the scatter plot, select a trace with the URI of`/multi`.\n- In the Gantt chart on the **Trace details** panel, select the span labeled `/multi` .A panel opens that displays information about the HTTP request. These details include the method, status code, number of bytes, and the user agent of the caller.\n- To view the logs associated with this trace, select the **Logs & Events** tab.The tab shows individual logs. To view the details of the log entry, expand the log entry. You can also click **View Logs** and view the log by using the Logs Explorer.\nFor more information about using the Cloud Trace explorer, see [Find and explore traces](/trace/docs/finding-traces) .\n### View your logs\nFrom the Logs Explorer, you can inspect your logs, and you can also view associated traces, when they exist.\n- In the navigation panel of the Google Cloud console, select **Logging** , and then select **Logs Explorer** : [Go to Logs Explorer](https://console.cloud.google.com/logs/query) \n- Locate a log with the description of `handle /multi request` .To view the details of the log, expand the log entry. In the `jsonPayload` field, there is an entry labeled `subRequests` . This entry was added by a statement in the `handleMulti` function.\n- Click **Traces** on a log entry with the \"handle /multi request\" message, and then select **View trace details** .A **Trace details** panel opens and displays the selected trace.\nFor more information about using the Logs Explorer, see [View logs by using the Logs Explorer](/logging/docs/view/logs-explorer-interface) .\n## What's next\n- [OpenTelemetry](https://opentelemetry.io/docs/what-is-opentelemetry/) \n- [OTLP overview](https://opentelemetry.io/docs/specs/otlp/) \n- [Structured logging](/logging/docs/structured-logging) \n- [Troubleshooting Managed Service for Prometheus](/stackdriver/docs/managed-prometheus/troubleshooting) \n- [Troubleshoot Cloud Trace](/trace/docs/troubleshooting)", "guide": "Google Cloud Observability"}