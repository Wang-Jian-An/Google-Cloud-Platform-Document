{"title": "Google Cloud Observability - Instrumentation and observability", "url": "https://cloud.google.com/stackdriver/docs/instrumentation/overview", "abstract": "# Google Cloud Observability - Instrumentation and observability\nrefers to the specific code that generates or collects data about your application's runtime behavior. Inside of your application, instrumentation can collect domain specific information about the language runtime, framework, or application logic. This data, which is also known as , includes [metrics](/stackdriver/docs#metrics-def) , [logs](/stackdriver/docs#logs-def) , and [traces](/stackdriver/docs#traces-def) .\nSystem-level metrics such as CPU usage, memory usage, and disk usage are valuable for detecting problems with your application, but they don't provide much insight into application-level concerns. Instrumentation can help your application generate the data that you need to diagnose the root cause of a problem, because the resulting telemetry shows you what is happening inside of your application. For example, logs often include context about your program like a specific error message or stacktrace, and the location in your source code. Similarly, distributed traces help you understand how multiple services interact when processing requests. Metrics let you get notified when your application isn't behaving correctly.\nInstrumenting your application involves generating telemetry and sending it to where the data can be stored and queried. For example, your instrumentation might send telemetry to a Google Cloud project. Services in Google Cloud Observability help you to collect, analyze, and correlate telemetry data. They also provide built-in defaults to help you get started faster such as default dashboards and alert policies. For more information about Google Cloud Observability, see [Observability in Google Cloud](/stackdriver/docs) .\nThe following figure illustrates how an application uses instrumentation to generate and send telemetry to a storage system:\nAs illustrated in previous figure, the instrumentation code exists within your application's process and interacts with the application to generate telemetry data. The instrumentation framework then exports your telemetry to a configured storage system. In the figure, the storage system is your Google Cloud project.\n", "content": "## About vendor-neutral instrumentation frameworks\nEven if you plan to send telemetry only to Google Cloud, we recommend that you use a vendor-neutral open source instrumentation framework to instrument your applications. These types of frameworks have some key benefits:\n## General recommendations\nThis section contains general recommendations about how to instrument your application. For guidance that is specific to Google Cloud, see [Choose an instrumentation approach](/stackdriver/docs/instrumentation/choose-approach) .\nTo collect metrics, we recommend that you use [OpenTelemetry](https://opentelemetry.io/docs/what-is-opentelemetry/) or [Prometheus](https://prometheus.io) :\n- OpenTelemetry is an open source project that provides a unified framework for application instrumentation. It also provides instrumentation libraries for popular libraries. OpenTelemetry provides a standalone agent, the [OpenTelemetry Collector](https://opentelemetry.io/docs/collector/) , that can receive, transform, and export telemetry. The [OpenTelemetry Collector configuration file](https://opentelemetry.io/docs/collector/configuration/) determines the behavior of the OpenTelemetry Collector. To send telemetry to an agent or directly to a storage system, use the [OpenTelemetry Protocol (OTLP)](https://opentelemetry.io/docs/specs/otlp/) .\n- Prometheus is a popular open source monitoring system. You can use the [Prometheus client libraries](https://prometheus.io/docs/instrumenting/clientlibs/) to generate metrics from your application, and there is a third-party ecosystem of instrumentation libraries for popular frameworks. Prometheus clients expose their metrics as an HTTP endpoint that can be scraped by an agent.\nTo collect traces, we recommend that you use [OpenTelemetry](https://opentelemetry.io/docs/what-is-opentelemetry/) .\nTo collect logs, we recommend that you use a framework which can be configured to output [JSON-structured logs for Cloud Logging](/logging/docs/structured-logging) . For writing log data, we recommend the following:\n- Go: [slog](https://pkg.go.dev/log/slog) .\n- Python: [logging](https://docs.python.org/3/library/logging.html) .\n- JavaScript: [winston](https://github.com/winstonjs/winston) .\n- Java: [SLF4J](https://www.slf4j.org/) with [Logback](https://logback.qos.ch/) .## Google Cloud solutions\nGoogle Cloud Observability provides flexible options for collecting telemetry:\n- For code samples that illustrate how to instrument your application to send telemetry to Google Cloud, see the following:- [Generate traces and metrics with Go](/stackdriver/docs/instrumentation/setup/go) .\n- [Generate traces and metrics with Java](/stackdriver/docs/instrumentation/setup/java) .\n- To learn how to collect and view latency data from your applications, see [View latency of app requests](/trace/docs/trace-app-latency) .\n- For information about Google Cloud's fully managed, multi-cloud, cross-project solution for Prometheus, see [Google Cloud Managed Service for Prometheus](/stackdriver/docs/managed-prometheus) .\n- For information about how to configure the [Ops Agent](/stackdriver/docs/solutions/agents/ops-agent) , see the following documents:- [Collect OTLP metrics and traces](/stackdriver/docs/solutions/agents/ops-agent/otlp) .\n- [Collect Prometheus metrics](/monitoring/agent/ops-agent/prometheus) .\n## What's next\nFor more information about Google Cloud Observability, see [Observability in Google Cloud](/stackdriver/docs) .", "guide": "Google Cloud Observability"}