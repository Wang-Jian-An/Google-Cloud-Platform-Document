{"title": "Google Cloud Observability - Constructs in the API", "url": "https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures", "abstract": "# Google Cloud Observability - Constructs in the API\nThis document introduces the structures used to represent services and SLOs in the SLO API and maps them to the concepts described in generally in [Concepts in service monitoring](/stackdriver/docs/solutions/slo-monitoring) .\nThe SLO API is used to set up service-level objectives (SLOs) that can be used to monitor the health of your services.\nService Monitoring adds the following resources to the Monitoring API:\n- [services](/monitoring/api/ref_v3/rest/v3/services) \n- [services.serviceLevelObjectives](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives) \nFor information on invoking the API, see [Working with the API](/stackdriver/docs/solutions/slo-monitoring/api/using-api) .\n", "content": "## Services\nA service is represented by a [Service](/monitoring/api/ref_v3/rest/v3/services) object. This object includes the following fields:\n- A name: A fully qualified resource name for this service\n- A display name: A label for use in console components\n- A structure for one of the [BasicService](/monitoring/api/ref_v3/rest/v3/services#BasicService) types.\n- A system-provided telemetry-configuration object\nTo define a basic service, you specify the type of service and provide a set of service-specific labels that describe the service:\n```\n{\n \"serviceType\": string,\n \"serviceLabels\": {\n  string: string,\n  ...\n }\n}\n```\nThe following sections provide examples for each type of service.\n### Basic service types\nThis section provides examples of services definitions built on the [BasicService](/monitoring/api/ref_v3/rest/v3/services#BasicService) type, where the value of the `serviceType` field is one of the following:\n- `APP_ENGINE`\n- `CLOUD_ENDPOINTS`\n- `CLUSTER_ISTIO`\n- `ISTIO_CANONICAL_SERVICE`\n- `CLOUD_RUN`\nEach of these service types uses the [BasicSli](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#BasicSli) service-level indicator.\n```\n {\n  \"displayName\": \"DISPLAY_NAME\",\n  \"basicService\": {\n   \"serviceType\": \"APP_ENGINE\",\n   \"serviceLabels\": {\n   \"module_id\": \"MODULE_ID\"\n   },\n  },\n }\n```\n```\n {\n  \"displayName\": \"DISPLAY_NAME\",\n  \"basicService\": {\n   \"serviceType\": \"CLOUD_ENDPOINTS\",\n   \"serviceLabels\": {\n   \"service\": \"SERVICE\"\n   },\n  },\n }\n```\n```\n {\n  \"displayName\": \"DISPLAY_NAME\",\n  \"basicService\": {\n   \"serviceType\": \"CLUSTER_ISTIO\",\n   \"serviceLabels\": {\n   \"location\": \"LOCATION\",\n   \"cluster_name\": \"CLUSTER_NAME\",\n   \"service_namespace\": \"SERVICE_NAMESPACE\",\n   \"service_name\": \"SERVICE_NAME\"\n   },\n  },\n }\n```\n```\n {\n  \"displayName\": \"DISPLAY_NAME\",\n  \"basicService\": {\n   \"serviceType\": \"ISTIO_CANONICAL_SERVICE\",\n   \"serviceLabels\": {\n   \"mesh_uid\": \"MESH_UID\",\n   \"canonical_service_namespace\": \"CANONICAL_SERVICE_NAMESPACE\",\n   \"canonical_service\": \"CANONICAL_SERVICE\"\n   },\n  },\n }\n```\n```\n {\n  \"displayName\": \"DISPLAY_NAME\",\n  \"basicService\": {\n   \"serviceType\": \"CLOUD_RUN\",\n   \"serviceLabels\": {\n   \"service_name\": \"SERVICE_NAME\",\n   \"location\": \"LOCATION\"\n   },\n  },\n }\n```\n### Basic GKE service types\nThis section contains examples of GKE service definitions built on the [BasicService](/monitoring/api/ref_v3/rest/v3/services#BasicService) type, where the value of the `serviceType` field is one of the following:\n- `GKE_NAMESPACE`\n- `GKE_WORKLOAD`\n- `GKE_SERVICE`\nYou must define SLIs for these service types. They can't use [BasicSli](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#BasicSli) service-level indicators. For more information, see [Service-level indicators](#sli-structs) .\n```\n {\n  \"displayName\": \"DISPLAY_NAME\",\n  \"basicService\": {\n   \"serviceType\": \"GKE_NAMESPACE\",\n   \"serviceLabels\": {\n   \"project_id\": \"PROJECT_ID\",\n   \"location\": \"LOCATION\",\n   \"cluster_name\": \"CLUSTER_NAME\",\n   \"namespace_name\": \"NAMESPACE_NAME\"\n   }\n  },\n }\n```\n```\n {\n  \"displayName\": \"DISPLAY_NAME\",\n  \"basicService\": {\n   \"serviceType\": \"GKE_WORKLOAD\",\n   \"serviceLabels\": {\n   \"project_id\": \"PROJECT_ID\",\n   \"location\": \"LOCATION\",\n   \"cluster_name\": \"CLUSTER_NAME\",\n   \"namespace_name\": \"NAMESPACE_NAME\",\n   \"top_level_controller_type\": \"TOPLEVEL_CONTROLLER_TYPE\",\n   \"top_level_controller_name\": \"TOPLEVEL_CONTROLLER_NAME\",\n   }\n  },\n }\n```\n```\n {\n  \"displayName\": \"DISPLAY_NAME\",\n  \"basicService\": {\n   \"serviceType\": \"GKE_SERVICE\",\n   \"serviceLabels\": {\n   \"project_id\": \"PROJECT_ID\",\n   \"location\": \"LOCATION\",\n   \"cluster_name\": \"CLUSTER_NAME\",\n   \"namespace_name\": \"NAMESPACE_NAME\",\n   \"service_name\": \"SERVICE_NAME\"\n   }\n  },\n }\n```\n### Custom services\nYou can create custom services if none of the basic service types is suitable. A custom service looks like the following:\n```\n {\n  \"displayName\": \"DISPLAY_NAME\",\n  \"custom\": {}\n }\n```\nYou must define SLIs for these service types. They can't use [BasicSli](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#BasicSli) service-level indicators. For more information, see [Service-level indicators](#sli-structs) .\n## Service-level indicators\nA service-level indicator (SLI) provides a measure of the performance of a service. An SLI is based on metric captured by the service. Exactly how the SLI is defined depends on the type of metric used as the indicator metric, but it is generally some comparison between acceptable results and total results.\nA SLI is represented by the [ServiceLevelIndicator](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#ServiceLevelIndicator) object. This object is a collective way to refer the three supported types of SLIs:\n- A basic SLI, which is created automatically for instances of the the [BasicService](/monitoring/api/ref_v3/rest/v3/services#BasicService) service type. This type of SLI is described in [Service-level-objectives](/stackdriver/docs/solutions/slo-monitoring#defn-slo) ; it is represented by a [BasicSli](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#BasicSli) object and measures availability or latency.\n- A request-based SLI, which you can use to count events that represent acceptable service. Use of this type of SLI is described in [Request-based SLOs](/stackdriver/docs/solutions/slo-monitoring#slo-type-request) ; it is represented by a [RequestBasedSli](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#RequestBasedSli) object.\n- A window-based SLI, which you can use to count periods of time that meet some goodness criterion. Use of this type of SLI is described in [Windows-based SLOs](/stackdriver/docs/solutions/slo-monitoring#slo-type-time) ; it is represented by a [WindowsBasedSli](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#WindowsBasedSli) object.\nFor example, the following shows a basic availability SLI:\n```\n{\n \"basicSli\": {\n \"availability\": {},\n \"location\": [  \"us-central1-c\"\n ]\n }\n}\n```### Structures for request-based SLIs\nA request-based SLI is based on a metric that counts units of service as a ratio between a particular outcome and the total. For example, if you use a metric that counts requests, you can build the ratio between the number of requests that return success and the total number of requests.\nThere are two ways to build a request-based SLI:\n- As a [TimeSeriesRatio](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#TimeSeriesRatio) , when the ratio of good service to total service is computed from two time series whose values have a metric kind of`DELTA`or`CUMULATIVE`.\n- As a [DistributionCut](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#DistributionCut) , when the time series has value type`DISTRIBUTION`and whose values have a metric kind of`DELTA`or`CUMULATIVE`. The good-service value is the count of items that fall into the histogram buckets in a specified range, and the total is the count of all values in the distribution.\nThe following shows the JSON representation of an SLI that uses a time-series ratio:\n```\n{\n \"requestBased\": {\n \"goodTotalRatio\": {\n  \"totalServiceFilter\": \"resource.type=https_lb_rule metric.type=\"loadbalancing.googleapis.com/https/request_count\"\",\n  \"goodServiceFilter\": \"resource.type=https_lb_rule metric.type=\"loadbalancing.googleapis.com/https/request_count\" metric.label.response_code_class=200\",\n }\n }\n}\n```\nThe time series in this ratio are identified by the pair of monitored-resource type and metric type:\n- Resource:`https_lb_rule`\n- Metric type:`loadbalancing.googleapis.com/https/request_count`\nThe value for the `totalServiceFilter` is represented by the pair of metric and resource type. The value for the `goodServiceFilter` is represented by the same pair but where some label has a particular value; in this case, when the value of the `response_code_class` label is `200` .\nThe ratio between the filters measures the number of requests that return a 2xx HTTP status over the total number of requests.\nThe following shows the JSON representation of an SLI that uses a distribution cut:\n```\n{\n \"requestBased\": {\n \"distribution_cut\": {\n  \"distribution_filter\": \"resource.type=https_lb_rule metric.type=\"loadbalancing.googleapis.com/https/backend_latencies\" metric.label.response_code_class=200\",\n  \"range\": {\n  \"min\": \"-Infinity\",\n  \"max\": 500.0\n  }\n }\n }\n}\n```\nThe time series is identified by the monitored-resource type, metric type, and value for a metric label:\n- Resource:`https_lb_rule`\n- Metric type:`loadbalancing.googleapis.com/https/backend_latencies`\n- Label-value pair:`response_code_class`=`200`\nThe range of latencies considered good is designated by the `range` field. This SLI computes the ratio of latencies of 2xx-class responses below 500 to the latencies of all 200-class responses.\n### Structures for windows-based SLIs\nA windows-based SLI counts time windows in which the provided service is considered good. The criterion for determining how good service is part of the SLI definition.\nAll windows-based SLIs include a window period, 60\u201386,400 seconds (1 day).\nThere are two ways to specify the good-service criterion for a windows-based SLI:\n- Create a filter string, described in [Monitoring filters](/monitoring/api/v3/filters#time-series-filter) that returns a time series with boolean values. A window is good if the value for that window is`true`. This filter is called the`goodBadMetricFilter`.\n- Create a [PerformanceThreshold](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#PerformanceThreshold) object that represents a threshold for acceptable performance. This object is specified as the value of the `goodTotalRatioThreshold` .A `PerformanceThreshold` object specifies a threshold value and a performance SLI. If the value of the performance SLI meets or exceeds the threshold value, then the time window counts as good.There are two ways to specify the performance SLI:- As a [BasicSli](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#BasicSli) object in the`basicPerformanceSli`field.\n- As a [RequestBasedSli](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#RequestBasedSli) object in the`performance`field.The following shows the JSON representation a windows-based SLI built on a performance threshold for a basic availability SLI:\n```\n{\n \"windowsBased\": {\n  \"goodTotalRatioThreshold\": {\n  \"threshold\": 0.9,\n  \"basicSliPerformance\": {\n   \"availability\": {},\n   \"location\": [   \"us-central1-c\"\n   ]\n  }\n  },\n  \"windowPeriod\": \"300s\"\n }\n}\n```\nThis SLI specifies good performance as a 5-minute window in which availability reaches 90% or better. The structure of a basic SLI is shown in [Service-levelindicators](/stackdriver/docs/solutions/slo-monitoring/api/api-structures#sli-structs) .\nYou can also embed a request-based SLI in the windows-based SLI. For more information on the embedded structures, see [Structures for request-basedSLIs](/stackdriver/docs/solutions/slo-monitoring/api/api-structures#request-sli-structs) .\n## Service-level objectives\nA service-level objective (SLO) is represented by a [ServiceLevelObjective](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#ServiceLevelObjective) object. This object includes the following fields:\n- A name\n- A display name\n- The target SLI; an embedded [ServiceLevelIndicator object](/stackdriver/docs/solutions/slo-monitoring/api/api-structures#sli-structs) \n- The performance goal for the SLI\n- The compliance period for the SLI\nThe following shows the JSON representation of an SLO that uses a basic availability SLI as the value of the `serviceLevelIndicator` field:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/services/PROJECT_ID-zone-us-central1-c-csm-main-default-currencyservice/serviceLevelObjectives/3kavNVTtTMuzL7KcXAxqCQ\",\n \"serviceLevelIndicator\": {\n  \"basicSli\": {\n  \"availability\": {},\n  \"location\": [   \"us-central1-c\"\n  ]\n  }\n },\n \"goal\": 0.98,\n \"calendarPeriod\": \"WEEK\",\n \"displayName\": \"98% Availability in Calendar Week\"\n}\n```\nThis SLO sets the performance goal at 98 percent availability over a period of a week.", "guide": "Google Cloud Observability"}