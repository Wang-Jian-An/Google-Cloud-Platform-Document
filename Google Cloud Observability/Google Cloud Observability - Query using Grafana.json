{"title": "Google Cloud Observability - Query using Grafana", "url": "https://cloud.google.com/stackdriver/docs/managed-prometheus/query", "abstract": "# Google Cloud Observability - Query using Grafana\nAfter you have deployed Google Cloud Managed Service for Prometheus, you can query the data sent to the managed service and display the results in charts and dashboards.\nThis document describes , which determine the data you can query, and how to use Grafana to retrieve and use the data you've collected.\nAll query interfaces for Managed Service for Prometheus are configured to retrieve data from Monarch using the Cloud Monitoring API. By querying Monarch instead of querying data from local Prometheus servers, you get global monitoring at scale.\n", "content": "## Before you begin\nIf you have not already deployed the managed service, then set up [managed collection](/stackdriver/docs/managed-prometheus/setup-managed) or [self-deployedcollection](/stackdriver/docs/managed-prometheus/setup-unmanaged) . You can skip this if you're only interested in [querying Cloud Monitoring metrics using PromQL](/stackdriver/docs/managed-prometheus/promql) .\n### Configure your environment\nTo avoid repeatedly entering your project ID or cluster name, perform the following configuration:\n- Configure the command-line tools as follows:- Configure the gcloud CLI to refer to the ID of your Google Cloud project:```\ngcloud config set project PROJECT_ID\n```\n- Configure the `kubectl` CLI to use your cluster:```\nkubectl config set-cluster CLUSTER_NAME\n```\nFor more information about these tools, see the following:- [gcloud CLI overview](/sdk/gcloud) \n- [kubectl commands](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands) \n### Set up a namespace\nCreate the `` Kubernetes namespace for resources you create as part of the example application:\n```\nkubectl create ns NAMESPACE_NAME\n```\n### Verify service account credentials\n**You can skip this section if your Kubernetes cluster hasWorkload Identity enabled.**\nWhen running on GKE, Managed Service for Prometheus automatically retrieves credentials from the environment based on the Compute Engine default service account. The default service account has the necessary permissions, `monitoring.metricWriter` and `monitoring.viewer` , by default. If you don't use Workload Identity, and you have previously removed either of those roles from the default node service account, you will have to [re-add those missing permissions](/stackdriver/docs/managed-prometheus/troubleshooting#perm-node-svcacct) before continuing.\nIf you are not running on GKE, see [Provide credentials explicitly](#explicit-credentials) .\n### Configure a service account for Workload Identity\n**You can skip this section if your Kubernetes cluster does not haveWorkload Identity enabled.**\nManaged Service for Prometheus captures metric data by using the Cloud Monitoring API. If your cluster is using Workload Identity, you must grant your Kubernetes service account permission to the Monitoring API. This section describes the following:\n- Creating a dedicated [Google Cloud service account](/iam/docs/service-accounts) ,`gmp-test-sa`.\n- Binding the Google Cloud service account to the default [Kubernetesservice account](https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/) in a test namespace,``.\n- Granting the necessary permission to the Google Cloud service account.This step appears in several places in the Managed Service for Prometheus documentation. If you have already performed this step as part of a prior task, then you don't need to repeat it. Skip ahead to [Authorize theservice account](#authorize-sa) .\nThe following command sequence creates the `gmp-test-sa` service account and binds it to the default Kubernetes service account in the `` namespace:\n```\ngcloud config set project PROJECT_ID \\\n&&\ngcloud iam service-accounts create gmp-test-sa \\\n&&\ngcloud iam service-accounts add-iam-policy-binding \\\n --role roles/iam.workloadIdentityUser \\\n --member \"serviceAccount:PROJECT_ID.svc.id.goog[NAMESPACE_NAME/default]\" \\\n gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n&&\nkubectl annotate serviceaccount \\\n --namespace NAMESPACE_NAME \\\n default \\\n iam.gke.io/gcp-service-account=gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com\n```\nIf you are using a different GKE namespace or service account, adjust the commands appropriately.\nGroups of related permissions are collected into , and you grant the roles to a principal, in this example, the Google Cloud service account. For more information about Monitoring roles, see [Access control](/monitoring/access-control) .\nThe following command grants the Google Cloud service account, `gmp-test-sa` , the Monitoring API roles it needs to read metric data.\nIf you have already granted the Google Cloud service account a specific role as part of prior task, then you don't need to do it again.\n[Change the queried project](#query-project-id)```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/monitoring.viewer \\\n&& \\\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/iam.serviceAccountTokenCreator\n```\nIf you are having trouble getting Workload Identity to work, see the documentation for [verifying your Workload Identity setup](/kubernetes-engine/docs/how-to/workload-identity#verify_the_setup) and the [Workload Identity troubleshooting guide](/kubernetes-engine/docs/troubleshooting/troubleshooting-security#pod_cant_authenticate_to) .\nAs typos and partial copy-pastes are the most common sources of errors when configuring Workload Identity, we **strongly** recommend using the editable variables and clickable copy-paste icons embedded in the code samples in these instructions.\nThe example described in this document binds the Google Cloud service account to the default Kubernetes service account and gives the Google Cloud service account all necessary permissions to use the Monitoring API.\nIn a production environment, you might want to use a finer-grained approach, with a service account for each component, each with minimal permissions. For more information on configuring service accounts for workload-identity management, see [Using Workload Identity](/kubernetes-engine/docs/how-to/workload-identity) .\n## Queries and metrics scopes\nThe data you can query is determined by the Cloud Monitoring construct , regardless of the method you use to query the data. For example, if you use Grafana to query Managed Service for Prometheus data, then each metrics scope must be configured as a separate data source.\nA Monitoring metrics scope is a read-time-only construct that lets you query metric data belonging to multiple Google Cloud projects. Every metrics scope is hosted by a designated Google Cloud project, called the .\nBy default, a project is the scoping project for its own metrics scope, and the metrics scope contains the metrics and configuration for that project. A scoping project can have more than one monitored project in its metrics scope, and the metrics and configurations from all the monitored projects in the metrics scope are visible to the scoping project. A monitored project can also belong to more than one metrics scope.\nWhen you query the metrics in a scoping project, and if that scoping project hosts a multi-project metrics scope, you can retrieve data from multiple projects. If your metrics scope contains all your projects, then your queries and rules evaluate globally.\nFor more information about scoping projects and metrics scope, see [Metrics scopes](/monitoring/settings#concept-scope) . For information about configuring multi-project metrics scope, see [View metrics for multipleprojects](/monitoring/settings/multiple-projects) .\n## Managed Service for Prometheus data in Cloud Monitoring\nThe simplest way to verify that your Prometheus data is being exported is to use the Cloud Monitoring Metrics Explorer page in the Google Cloud console, which supports PromQL. For instructions, see [Querying using PromQL in Cloud Monitoring](/stackdriver/docs/managed-prometheus/query-cm#promql-monitoring) .\nYou can also [import yourGrafana dashboards into Cloud Monitoring](/stackdriver/docs/managed-prometheus/import-grafana-dashboards) . This enables you to keep using community-created or personal Grafana dashboards without having to configure or deploy a Grafana instance.\n## Grafana\nManaged Service for Prometheus uses the built-in Prometheus data source for Grafana, meaning that you can keep using any community-created or personal Grafana dashboards without any changes.\n### Deploy Grafana\nIf you don't have a running Grafana deployment in your cluster, then you can create an ephemeral test deployment to experiment with.\nTo create an ephemeral Grafana deployment, apply the Managed Service for Prometheus `grafana.yaml` manifest to your cluster, and port-forward the `grafana` service to your local machine. The following example forwards the service to port 3000.\n- Apply the `grafana.yaml` manifest:```\nkubectl -n NAMESPACE_NAME apply -f https://raw.githubusercontent.com/GoogleCloudPlatform/prometheus-engine/6ebc1afa8e609febe8d687bb7fa6bd2375e46db1/examples/grafana.yaml\n```\n- Port-forward the `grafana` service to your local machine. This example forwards the service to port 3000:```\nkubectl -n NAMESPACE_NAME port-forward svc/grafana 3000\n```This command does not return, and while it is running, it reports accesses to the URL.You can access Grafana in your browser at the URL `http://localhost:3000` with the username:password `admin:admin` .\nThen add a new Prometheus data source to Grafana by doing the following:\n- Go to your Grafana deployment, for example, by browsing to the URL `http://localhost:3000` to reach the Grafana welcome page.\n- Select **Connections** from the main Grafana menu, then select **Data Sources** . \n- Select **Add data source** , and select Prometheus as the time series database. \n- Give the data source a name, set the `URL` field to `http://localhost:9090` , then select **Save & Test** . You can ignore any errors saying that the data source is not configured correctly.\n- Copy down the local service URL for your deployment, which will look like the following:```\nhttp://grafana.NAMESPACE_NAME.svc:3000\n```\n### Configure and authenticate the Grafana data source\nGoogle Cloud APIs all require authentication using OAuth2; however, Grafana doesn't support OAuth2 authentication for Prometheus data sources. To use Grafana with Managed Service for Prometheus, you use the [data source syncer](https://github.com/GoogleCloudPlatform/prometheus-engine/tree/main/cmd/datasource-syncer) to generate OAuth2 credentials and sync them to Grafana through the [Grafana data sourceAPI](https://grafana.com/docs/grafana/latest/developers/http_api/data_source/) .\n**You must use the data source syncer to configure and authorize Grafana toquery data globally.** If you don't follow these steps, then Grafana only executes queries against data in the local Prometheus server.\nThe data source syncer is a command-line interface tool which uses a Kubernetes CronJob to remotely sync configuration values to a given Grafana Prometheus data source. This ensures that your Grafana data source has the following configured correctly:\n- Authentication, done by refreshing an OAuth2 access token periodically\n- The Cloud Monitoring API set as the Prometheus server URL\n- The HTTP method set to GET\n- The Prometheus type and version set to a minimum of 2.40.x\n- The HTTP and Query timeout values set to 2 minutes\nThe data source syncer uses your cluster's local service account to periodically generate a Google Cloud API access token with the necessary IAM permissions for querying Cloud Monitoring data. As [Google Cloud API access tokens have alifetime of one hour](/docs/authentication/token-types#at-lifetime) , the data source syncer runs every 30 minutes to ensure you have an uninterrupted authenticated connection between Grafana and the Cloud Monitoring API.\nTo deploy and run the data source syncer, do the following:\n- Choose a project, cluster, and namespace to deploy the data source syncer in. We recommend deploying the data source syncer in a cluster belonging to the [scoping project of a multi-project metrics scope](#scoping-intro) . The data source syncer uses the configured Google Cloud project as the scoping project.Next, make sure you properly configure and authorize the data source syncer:- If you're using Workload Identity, then follow the [instructions tocreate and authorize a service account](#gmp-wli-svcacct) . Make sure to bind it to the Kubernetes namespace in which you want to run the data source syncer.\n- If you're not using Workload Identity, then [verify you have not modified the defaultCompute Engine service account](#gmp-default-sa) .\n- If you're not running on GKE, then see [Running the data source syncer outside ofGKE](#ds-syncer-non-gke) .\nThen, determine if you have to further authorize the data source syncer for multi-project querying:- If your local project is your scoping project, and you have followed the [instructions for verifying or configuring a serviceaccount](#gmp-default-sa) for the local project, then multi-project querying should work with no further configuration.\n- If your local project is not your scoping project, then you need to authorize the data source syncer to execute queries against the scoping project. For instructions, see [authorize the data source syncerto get multi-project monitoring](/stackdriver/docs/managed-prometheus/query#ds-scope-auth) .\n- Figure out the URL of your Grafana instance, for example `https://yourcompanyname.grafana.net` for a Grafana Cloud deployment or `http://grafana.` `` `.svc:3000` for a local instance configured using the test deployment YAML.If you deploy Grafana locally and your cluster is configured to secure all in-cluster traffic by using TLS, you need to use `https://` in your URL and authenticate using one of the [supported TLS authenticationoptions](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/b5c23f8a0ad7e73753defd04dabffca6b066d1df/cmd/datasource-syncer/main.go#L53) .\n- Choose the Grafana Prometheus data source that you would like to use for Managed Service for Prometheus, which can be either a new or a pre-existing data source, and then find and write down the data source UID. The data source UID can be found in the last part of the URL when exploring or configuring a data source, for example `https://yourcompanyname.grafana.net/connections/datasources/edit/` `` `.`\n- [Set up a Grafana service account](https://grafana.com/docs/grafana/latest/administration/service-accounts/#create-a-service-account-in-grafana) , grant it the \"Admin\" role, and generate a service account token. Make sure the token expiration is set to \"No Expiration\".\n- Set up the following environment variables using the results of the previous steps:```\n# These values are required.\nPROJECT_ID=SCOPING_PROJECT_ID\nGRAFANA_API_ENDPOINT=GRAFANA_INSTANCE_URL\nDATASOURCE_UIDS=GRAFANA_DATASOURCE_UID\nGRAFANA_API_TOKEN=GRAFANA_SERVICE_ACCOUNT_TOKEN\n```\n- Run the following command to create a CronJob that refreshes the data source on initialization and then every 30 minutes. If you're using Workload Identity, then the value of should be the same namespace that you previously bound to the service account.```\ncurl https://raw.githubusercontent.com/GoogleCloudPlatform/prometheus-engine/main/cmd/datasource-syncer/datasource-syncer.yaml \\\n| sed 's|$DATASOURCE_UIDS|'\"$DATASOURCE_UIDS\"'|; s|$GRAFANA_API_ENDPOINT|'\"$GRAFANA_API_ENDPOINT\"'|; s|$GRAFANA_API_TOKEN|'\"$GRAFANA_API_TOKEN\"'|; s|$PROJECT_ID|'\"$PROJECT_ID\"'|;' \\\n| kubectl -n NAMESPACE_NAME apply -f \n```\n- Go to your newly configured Grafana data source and verify the **Prometheusserver URL** value starts with `https://monitoring.googleapis.com` . You might have to refresh the page. Once verified, go to the bottom of the page and select **Save & test** . You need to select this button at least once to ensure that label autocompletion in Grafana works.\n### Run queries by using Grafana\nYou can now create Grafana dashboards and run queries using the configured data source. The following screenshot shows a Grafana chart that displays the `up` metric:\nFor information about querying [Google Cloud system metrics](/monitoring/api/metrics_gcp) using PromQL, see [PromQL forCloud Monitoring metrics](/stackdriver/docs/managed-prometheus/promql) .\n### Running the data source syncer outside of GKE\n**You can skip this section if you are running the data source syncer ina Google Kubernetes Engine cluster.** If you are having authentication issues on GKE, see [Verify service account credentials](#gmp-default-sa) .\nWhen running on GKE, the data source syncer automatically retrieves credentials from the environment based on the node's service account or the Workload Identity setup. In non-GKE Kubernetes clusters, credentials must be explicitly provided to the data source syncer by using the `GOOGLE_APPLICATION_CREDENTIALS` environment variable.\n- Set the context to your target project:```\ngcloud config set project PROJECT_ID\n```\n- Create a service account:```\ngcloud iam service-accounts create gmp-test-sa\n```This step creates the service account that you might have already created in the [Workload Identity instructions](#gmp-wli-svcacct) .\n- Grant the required permissions to the service account:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/monitoring.viewer \\\n&& \\\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/iam.serviceAccountTokenCreator\n```\n- Create and download a key for the service account:```\ngcloud iam service-accounts keys create gmp-test-sa-key.json \\\n --iam-account=gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com\n```\n- Set the key-file path by using the `GOOGLE_APPLICATION_CREDENTIALS` environment variable.\n### Authorize the data source syncer to get multi-project monitoring\nManaged Service for Prometheus supports multi-project monitoring by using [metrics scopes](#scoping-intro) . If your local project is your scoping project, and you have followed the [instructions for verifying or configuring a serviceaccount](#gmp-default-sa) for the local project, then multi-project querying should work with no further configuration.\nIf your local project is not your scoping project, then you need to authorize either the local project's [default compute service account](#gmp-default-sa) or your [Workload Identity service account](#gmp-wli-svcacct) to have `monitoring.viewer` access to the scoping project. Then pass in the scoping project's ID as the value of the [PROJECT_ID environmentvariable](#environment-variables) .\nIf you use the Compute Engine `default` service account, you can do one of the following:\n- Deploy the data source syncer in a cluster that belongs to your scoping project.\n- Enable Workload Identity for your cluster and follow the [configuration steps](#gmp-wli-svcacct) .\n- Provide an [explicit service-account key](#ds-syncer-non-gke) .\nTo grant a service account the permissions needed to access a different Google Cloud project, do the following:\n- Grant the service account permission to read from the target project you want to query:```\ngcloud projects add-iam-policy-binding SCOPING_PROJECT_ID \\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/monitoring.viewer\n```\n- When configuring the data source syncer, pass in the scoping project's ID as the value of the [PROJECT_ID environment variable](#environment-variables) .\n### Inspect the CronJob\nTo inspect the CronJob and ensure that all variables are correctly set, run the following command:\n```\nkubectl describe cronjob datasource-syncer\n```\nTo see logs for the Job that initially configures Grafana, run the following command immediately after applying the `datasource-syncer.yaml` file:\n```\nkubectl logs job.batch/datasource-syncer-init\n```\n### Teardown\nTo disable the data source syncer Cronjob, run the following command:\n```\nkubectl delete -f https://raw.githubusercontent.com/GoogleCloudPlatform/prometheus-engine/main/cmd/datasource-syncer/datasource-syncer.yaml\n```\nDisabling the data source syncer stops updating the linked Grafana with fresh authentication credentials, and as a consequence querying Managed Service for Prometheus no longer works.\n## API compatibility\nThe following [Prometheus HTTP API](https://prometheus.io/docs/prometheus/latest/querying/api/) endpoints are supported by Managed Service for Prometheus under the URL prefixed by `https://monitoring.googleapis.com/v1/projects/` `` `/location/global/prometheus/api/v1/` .\nFor full documentation, see the [Cloud Monitoring API referencedocumentation](/monitoring/api/ref_v3/rpc/google.monitoring.prometheus.v1) .\nFor information about PromQL compatibility, see [PromQLsupport](/stackdriver/docs/managed-prometheus/promql-differences) .\n- The following endpoints are fully supported:- `/api/v1/query`\n- `/api/v1/query_range`\n- `/api/v1/metadata`\n- `/api/v1/labels`\n- `/api/v1/query_exemplars`\n- The `/api/v1/label/<label_name>/values` endpoint only works if the `__name__` label is provided either by using it as the `<label_name>` value or by exactly matching on it using a series selector. For example, the following calls are fully supported:- `/api/v1/label/__name__/values`\n- `/api/v1/label/__name__/values?match[]={__name__=~\".*metricname.*\"}`\n- `/api/v1/label/labelname/values?match[]={__name__=\"metricname\"}`\nThis limitation causes `label_values($label)` variable queries in Grafana to fail. Instead, you can use `label_values($metric, $label)` . This type of query is recommended because it avoids fetching values for labels on metrics that are not relevant to the given dashboard.\n- The `/api/v1/series` endpoint is supported for `GET` but not `POST` requests. When you use the [data source syncer](/stackdriver/docs/managed-prometheus/query#grafana-oauth) or [frontendproxy](/stackdriver/docs/managed-prometheus/query-api-ui#ui-prometheus) , this restriction is managed for you. You can also configure your Prometheus data sources in Grafana to issue only `GET` requests.## What's next\n- Use [PromQL alerts in Cloud Monitoring](/monitoring/promql/promql-in-alerting) .\n- Set up [managed rule evaluation](/stackdriver/docs/managed-prometheus/rules-managed) .\n- Set up [commonly used exporters](/stackdriver/docs/managed-prometheus/exporters/introduction) .", "guide": "Google Cloud Observability"}