{"title": "Google Cloud Observability - Query using the Prometheus API or UI", "url": "https://cloud.google.com/stackdriver/docs/managed-prometheus/query-api-ui", "abstract": "# Google Cloud Observability - Query using the Prometheus API or UI\nAfter you have deployed Google Cloud Managed Service for Prometheus, you can query the data sent to the managed service and display the results in charts and dashboards.\nThis document describes , which determine the data you can query, and the following Prometheus-based ways to retrieve and use the data you've collected:\n- The Prometheus HTTP API\n- The Prometheus UI\nAll query interfaces for Managed Service for Prometheus are configured to retrieve data from Monarch using the Cloud Monitoring API. By querying Monarch instead of querying data from local Prometheus servers, you get global monitoring at scale.\n", "content": "## Before you begin\nIf you have not already deployed the managed service, then set up [managed collection](/stackdriver/docs/managed-prometheus/setup-managed) or [self-deployedcollection](/stackdriver/docs/managed-prometheus/setup-unmanaged) . You can skip this if you're only interested in [querying Cloud Monitoring metrics using PromQL](/stackdriver/docs/managed-prometheus/promql) .\n### Configure your environment\nTo avoid repeatedly entering your project ID or cluster name, perform the following configuration:\n- Configure the command-line tools as follows:- Configure the gcloud CLI to refer to the ID of your Google Cloud project:```\ngcloud config set project PROJECT_ID\n```\n- Configure the `kubectl` CLI to use your cluster:```\nkubectl config set-cluster CLUSTER_NAME\n```\nFor more information about these tools, see the following:- [gcloud CLI overview](/sdk/gcloud) \n- [kubectl commands](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands) \n### Set up a namespace\nCreate the `` Kubernetes namespace for resources you create as part of the example application:\n```\nkubectl create ns NAMESPACE_NAME\n```\n### Verify service account credentials\n**You can skip this section if your Kubernetes cluster hasWorkload Identity enabled.**\nWhen running on GKE, Managed Service for Prometheus automatically retrieves credentials from the environment based on the Compute Engine default service account. The default service account has the necessary permissions, `monitoring.metricWriter` and `monitoring.viewer` , by default. If you don't use Workload Identity, and you have previously removed either of those roles from the default node service account, you will have to [re-add those missing permissions](/stackdriver/docs/managed-prometheus/troubleshooting#perm-node-svcacct) before continuing.\nIf you are not running on GKE, see [Provide credentials explicitly](#explicit-credentials) .\n### Configure a service account for Workload Identity\n**You can skip this section if your Kubernetes cluster does not haveWorkload Identity enabled.**\nManaged Service for Prometheus captures metric data by using the Cloud Monitoring API. If your cluster is using Workload Identity, you must grant your Kubernetes service account permission to the Monitoring API. This section describes the following:\n- Creating a dedicated [Google Cloud service account](/iam/docs/service-accounts) ,`gmp-test-sa`.\n- Binding the Google Cloud service account to the default [Kubernetesservice account](https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/) in a test namespace,``.\n- Granting the necessary permission to the Google Cloud service account.This step appears in several places in the Managed Service for Prometheus documentation. If you have already performed this step as part of a prior task, then you don't need to repeat it. Skip ahead to [Authorize theservice account](#authorize-sa) .\nThe following command sequence creates the `gmp-test-sa` service account and binds it to the default Kubernetes service account in the `` namespace:\n```\ngcloud config set project PROJECT_ID \\\n&&\ngcloud iam service-accounts create gmp-test-sa \\\n&&\ngcloud iam service-accounts add-iam-policy-binding \\\n --role roles/iam.workloadIdentityUser \\\n --member \"serviceAccount:PROJECT_ID.svc.id.goog[NAMESPACE_NAME/default]\" \\\n gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n&&\nkubectl annotate serviceaccount \\\n --namespace NAMESPACE_NAME \\\n default \\\n iam.gke.io/gcp-service-account=gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com\n```\nIf you are using a different GKE namespace or service account, adjust the commands appropriately.\nGroups of related permissions are collected into , and you grant the roles to a principal, in this example, the Google Cloud service account. For more information about Monitoring roles, see [Access control](/monitoring/access-control) .\nThe following command grants the Google Cloud service account, `gmp-test-sa` , the Monitoring API roles it needs to read metric data.\nIf you have already granted the Google Cloud service account a specific role as part of prior task, then you don't need to do it again.\n[Change the queried project](#query-project-id)```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/monitoring.viewer\n```\nIf you are having trouble getting Workload Identity to work, see the documentation for [verifying your Workload Identity setup](/kubernetes-engine/docs/how-to/workload-identity#verify_the_setup) and the [Workload Identity troubleshooting guide](/kubernetes-engine/docs/troubleshooting/troubleshooting-security#pod_cant_authenticate_to) .\nAs typos and partial copy-pastes are the most common sources of errors when configuring Workload Identity, we **strongly** recommend using the editable variables and clickable copy-paste icons embedded in the code samples in these instructions.\nThe example described in this document binds the Google Cloud service account to the default Kubernetes service account and gives the Google Cloud service account all necessary permissions to use the Monitoring API.\nIn a production environment, you might want to use a finer-grained approach, with a service account for each component, each with minimal permissions. For more information on configuring service accounts for workload-identity management, see [Using Workload Identity](/kubernetes-engine/docs/how-to/workload-identity) .\n## Queries and metrics scopes\nThe data you can query is determined by the Cloud Monitoring construct , regardless of the method you use to query the data. For example, if you use Grafana to query Managed Service for Prometheus data, then each metrics scope must be configured as a separate data source.\nA Monitoring metrics scope is a read-time-only construct that lets you query metric data belonging to multiple Google Cloud projects. Every metrics scope is hosted by a designated Google Cloud project, called the .\nBy default, a project is the scoping project for its own metrics scope, and the metrics scope contains the metrics and configuration for that project. A scoping project can have more than one monitored project in its metrics scope, and the metrics and configurations from all the monitored projects in the metrics scope are visible to the scoping project. A monitored project can also belong to more than one metrics scope.\nWhen you query the metrics in a scoping project, and if that scoping project hosts a multi-project metrics scope, you can retrieve data from multiple projects. If your metrics scope contains all your projects, then your queries and rules evaluate globally.\nFor more information about scoping projects and metrics scope, see [Metrics scopes](/monitoring/settings#concept-scope) . For information about configuring multi-project metrics scope, see [View metrics for multipleprojects](/monitoring/settings/multiple-projects) .\n## Managed Service for Prometheus data in Cloud Monitoring\nThe simplest way to verify that your Prometheus data is being exported is to use the Cloud Monitoring Metrics Explorer page in the Google Cloud console, which supports PromQL. For instructions, see [Querying using PromQL in Cloud Monitoring](/stackdriver/docs/managed-prometheus/query-cm#promql-monitoring) .\n## Standalone Prometheus frontend UI\nYou can use the standalone Prometheus frontend UI to access and visualize ingested data. This UI runs PromQL queries against all data in your Google Cloud project, as determined by the metrics scope associated with your project.\nThe frontend UI also acts as an authentication proxy for accessing ingested data. This feature can be used for client tools that don't support OAuth2, including Grafana or [horizontal pod autoscaling using the prometheus-adapterlibrary](/stackdriver/docs/managed-prometheus/hpa#promethueus-adapter) .\nWe strongly recommend configuring Grafana to visualize data from Managed Service for Prometheus using the [data source syncer](/stackdriver/docs/managed-prometheus/query) . The instructions for configuring Grafana using the standalone Prometheus frontend UI are included here as reference for users who have previously configured Grafana using this method.\n### Deploy the frontend UI\nTo deploy the standalone Prometheus frontend UI for Managed Service for Prometheus, run the following commands:\n- Deploy the `frontend` service and configure it to query the [scoping project of your metrics scope](/monitoring/settings#concept-scope) of your choice:```\ncurl https://raw.githubusercontent.com/GoogleCloudPlatform/prometheus-engine/v0.8.2/examples/frontend.yaml |\nsed 's/\\$PROJECT_ID/PROJECT_ID/' |\nkubectl apply -n NAMESPACE_NAME -f \n```\n- Port-forward the `frontend` service to your local machine. The following example forwards the service to port 9090:```\nkubectl -n NAMESPACE_NAME port-forward svc/frontend 9090\n```This command does not return, and while it is running, it reports accesses to the URL.\nIf you want to continue using a Grafana deployment installed by kube-prometheus, then deploy the standalone Prometheus frontend UI in the `monitoring` namespace instead.\nYou can access the standalone Prometheus frontend UI in your browser at the URL `http://localhost:9090` . If you are using Cloud Shell for this step, you can get access by using the [Web Preview](/shell/docs/using-web-preview?previewing_the_application) button.\nThe following screenshot shows a table in the standalone Prometheus frontend UI that displays the `up` metric:\nYou can also set up suitable authentication and authorization on the `frontend` service by using, for example, [Identity Aware Proxy](/iap/docs/enabling-kubernetes-howto) . For more information on exposing services, see [Exposing applications usingservices](/kubernetes-engine/docs/how-to/exposing-apps) .\n### Change the queried project to get multi-project monitoring\nThe `frontend` deployment uses the configured Google Cloud project as the scoping project. If this project is the scoping project of a [multi-project metrics scope](/monitoring/settings#concept-scope) , then it can read metrics from all projects in the metrics scope.\nYou can specify a project with a multi-project metrics scope by using the `--query.project-id` flag.\nTypically, you use a dedicated project as a scoping project, and this project is not the same project the `frontend` deployment runs in. To let the deployment read a different target project, you must do the following:\n- Tell the`frontend`deployment which project is the target project.\n- Grant the service account permission to read the target project. If you have been using the Compute Engine `default` service account, you can do one of the following:- Enable Workload Identity for your cluster and follow the [configuration steps](#gmp-wli-svcacct) .\n- Provide an [explicit service-account key](#explicit-credentials) .To grant the permissions needed to access a different Google Cloud project, do the following:\n- Grant the service account permission to read from the target project you want to query:```\ngcloud projects add-iam-policy-binding SCOPING_PROJECT_ID \\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/monitoring.viewer\n```\n- Open the `frontend` deployment created previously for editing:```\nkubectl -n NAMESPACE_NAME edit deploy frontend\n```\n- Specify the target project by using the `--query.project-id` flag:```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n namespace: NAMESPACE_NAME\n name: frontend\nspec:\n template\n containers:\n - name: frontend\n  args:\n  - --query.project-id=SCOPING_PROJECT_ID\n...\n```Save the file and close the editor. After the change is applied, the frontend pods are restarted and query the new scoping project.\n### Authenticate the frontend UI\nThe `frontend` deployment supports [basic access authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) for authenticated access in versions 0.5.0 and above. To enable authentication, add the `AUTH_USERNAME` and `AUTH_PASSWORD` environment variables to the deployment:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n namespace: NAMESPACE_NAME\n name: frontend\nspec:\n template\n containers:\n - name: frontend\n  env:\n  - name: AUTH_USERNAME\n  value: USERNAME\n  - name: AUTH_PASSWORD\n  value: PASSWORD\n...\n```\n### Provide credentials explicitly\n**You can skip this section if you are running the frontend container ina Google Kubernetes Engine cluster.** If you are having authentication issues on GKE, see [Verify service account credentials](#gmp-default-sa) .\nWhen running on GKE, the frontend automatically retrieves credentials from the environment based on the node's service account or the Workload Identity setup. In non-GKE Kubernetes clusters, credentials must be explicitly provided to the frontend by using flags or the `GOOGLE_APPLICATION_CREDENTIALS` environment variable.\n- Set the context to your target project:```\ngcloud config set project PROJECT_ID\n```\n- Create a service account:```\ngcloud iam service-accounts create gmp-test-sa\n```This step creates the service account that you might have already created in the [Workload Identity instructions](#gmp-wli-svcacct) .\n- Grant the required permissions to the service account:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/monitoring.viewer\n```\n- Create and download a key for the service account:```\ngcloud iam service-accounts keys create gmp-test-sa-key.json \\\n --iam-account=gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com\n```\n- Add the key file as a secret to your non-GKE cluster:```\nkubectl -n NAMESPACE_NAME create secret generic gmp-test-sa \\\n --from-file=key.json=gmp-test-sa-key.json\n```\n- Open the frontend Deployment resource for editing:```\nkubectl -n NAMESPACE_NAME edit deploy frontend\n```- Add the text shown in bold to the resource:```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n namespace: NAMESPACE_NAME\n name: frontend\nspec:\n template\n containers:\n - name: frontend\n  args:\n  - --query.credentials-file=/gmp/key.json\n...\n  volumeMounts:\n  - name: gmp-sa\n  mountPath: /gmp\n  readOnly: true\n...\n volumes:\n - name: gmp-sa\n  secret:\n  secretName: gmp-test-sa\n...\n```\n- Save the file and close the editor. After the change is applied, the pods are re-created and start authenticating to the metric backend with the given service account.\nAlternatively, instead of using the flags set in this example, you can set the key-file path by using the`GOOGLE_APPLICATION_CREDENTIALS`environment variable.\n## Using Grafana through the Frontend Proxy\nManaged Service for Prometheus uses the built-in Prometheus data source for Grafana, meaning that you can keep using any community-created or personal Grafana dashboards without any changes. You can also [import yourGrafana dashboards into Cloud Monitoring](/stackdriver/docs/managed-prometheus/import-grafana-dashboards) .\n### Authenticating to Google Cloud APIs\n **Warning:** We strongly recommend configuring Grafana to visualize data from Managed Service for Prometheus using the [data source syncer](/stackdriver/docs/managed-prometheus/query) . These instructions for configuring Grafana using the standalone Prometheus frontend UI are included here as reference for users who have previously configured Grafana using this method.Google Cloud APIs all require authentication using OAuth2; however, Grafana doesn't support OAuth2 authentication for Prometheus data sources. To use Grafana with Managed Service for Prometheus, you can use the [standalone Prometheus frontend UI](#ui-prometheus) as an authentication proxy. **You must point Grafana at the standalone frontend UI proxy to query dataglobally.** If you do not follow these steps, then Grafana only executes queries against data in the local Prometheus server.If you have not already deployed the [Prometheus UI](#ui-prometheus) `frontend` service as a proxy, deploy it now by running the following command:```\ncurl https://raw.githubusercontent.com/GoogleCloudPlatform/prometheus-engine/v0.8.2/examples/frontend.yaml |\nsed 's/\\$PROJECT_ID/PROJECT_ID/' |\nkubectl apply -n NAMESPACE_NAME -f \n```For non-GKE Kubernetes clusters such as Anthos clusters, also see [Provide credentials explicitly](#explicit-credentials) to give the `frontend` service the permissions needed to query metrics.See [change the queried project](#query-project-id) for instructions on configuring the [metrics scope](/monitoring/settings#concept-scope) used by the `frontend` service to query across multiple projects.If you have a pre-existing Grafana deployment, such as one installed by the `kube-prometheus` library or one installed using a helm chart, you can continue using it with Managed Service for Prometheus. If so, see [Configure a data source](#grafana-datasource) for next steps. Otherwise, you must first deploy Grafana.\n### Deploy Grafana\nIf you don't have a running Grafana deployment in your cluster, then you can create an ephemeral test deployment to experiment with.To create an ephemeral Grafana deployment, apply the Managed Service for Prometheus `grafana.yaml` manifest to your cluster, and port-forward the `grafana` service to your local machine. The following example forwards the service to port 3000.- Apply the `grafana.yaml` manifest:```\nkubectl -n NAMESPACE_NAME apply -f https://raw.githubusercontent.com/GoogleCloudPlatform/prometheus-engine/beb779d32f4dd531a3faad9f2916617b8d9baefd/examples/grafana.yaml\n```\n- Port-forward the `grafana` service to your local machine. This example forwards the service to port 3000:```\nkubectl -n NAMESPACE_NAME port-forward svc/grafana 3000\n```This command does not return, and while it is running, it reports accesses to the URL.You can access Grafana in your browser at the URL `http://localhost:3000` with the username:password `admin:admin` .### Configure a data source\nTo query Managed Service for Prometheus in Grafana by using the Prometheus UI as the authentication proxy, you must add a new data source to Grafana. To add a data source for the managed service, do the following:- Go to your Grafana deployment, for example, by browsing to the URL `http://localhost:3000` to reach the Grafana welcome page.\n- Select **Configuration** from the main Grafana menu, then select **Data Sources** . \n- Select **Add data source** , and select Prometheus as the time series database. \n- In the **URL** field of the **HTTP** pane, enter the URL of the Managed Service for Prometheus `frontend` service. If you configured the [Prometheus frontend UI](#ui-prometheus) to run on port 9090, then the service URL for this field is `http://frontend.` `` `.svc:9090` .In the **Timeout** field of the **HTTP** pane, set the value to `120` .If you [configured the frontend UI proxy with Basic auth](#basic-auth-ui) , enable the **Basic auth** switch in the **Auth** pane and fill out the username and password.In the **Query timeout** field, set the value to `2m` .In the **HTTP Method** field, select `GET` .In the **Prometheus type** field, select `Prometheus` .In the **Prometheus version** field, select `2.40.x` or higher.If you have multiple Prometheus data sources, then you might give this one a name like \"Managed Prometheus Service\". You can leave other fields with their default values. \n- Click **Save & Test** , and look for the message \"The data source is working\". \n **Note:** You can also deploy the `frontend` container as a sidecar in the Grafana pod, and that data source can access it at the URL `http://localhost:9090` .\n### Use the new data source\nYou can now create Grafana dashboards using the new data source. You can also redirect existing dashboards to the new data source. The following screenshot shows a Grafana chart that displays the `up` metric: \n## Prometheus HTTP API\nManaged Service for Prometheus supports the upstream [Prometheus HTTP API](https://prometheus.io/docs/prometheus/latest/querying/api/) at the URL prefixed by `https://monitoring.googleapis.com/v1/projects/` `` `/location/global/prometheus/api/v1/` . For information about the supported endpoints, see [API compatibility](#http-api-details) .This API can be accessed by any tool that can interact with a standard Prometheus server. This is an API endpoint only; it doesn't serve a UI. As a Google Cloud API, the API uses OAuth2 authentication, and as part of the Cloud Monitoring API, the value of the `PROJECT_ID` is the scoping project of a metrics scope, so you can retrieve data from any project in the metrics scope. For more information about scoping, see [Metrics scopes](/monitoring/settings#concept-scope) .To use this endpoint, provide a [PromQL](https://prometheus.io/docs/prometheus/latest/querying/basics/) expression. For example, the following instant query retrieves all time series that have the metric name `up` :```\ncurl https://monitoring.googleapis.com/v1/projects/PROJECT_ID/location/global/prometheus/api/v1/query \\\n -d \"query=up\" \\\n -H \"Authorization: Bearer $(gcloud auth print-access-token)\"\n```If the request is successful, then the query returns a result like the following, which has been formatted for readability:```\n{\n \"status\":\"success\",\n \"data\":{\n \"resultType\":\"vector\",\n \"result\":[{\n  \"metric\": {\n  \"__name__\":\"up\",\n  \"cluster\":\"gmp-test\",\n  \"instance\":\"prom-example-84c6f547f5-g4ljn:web\",\n  \"job\":\"prometheus\",\n  \"location\":\"us-central1-a\",\n  \"project_id\":\"a-gcp-project\"\n  },\n  \"value\": [1634873239.971,\"1\"]\n }]\n }\n}\n```For information about querying [Google Cloud system metrics](/monitoring/api/metrics_gcp) using PromQL, see [PromQL forCloud Monitoring metrics](/stackdriver/docs/managed-prometheus/promql) .\n## API compatibility\nThe following [Prometheus HTTP API](https://prometheus.io/docs/prometheus/latest/querying/api/) endpoints are supported by Managed Service for Prometheus under the URL prefixed by `https://monitoring.googleapis.com/v1/projects/` `` `/location/global/prometheus/api/v1/` .For full documentation, see the [Cloud Monitoring API referencedocumentation](/monitoring/api/ref_v3/rpc/google.monitoring.prometheus.v1) .For information about PromQL compatibility, see [PromQLsupport](/stackdriver/docs/managed-prometheus/promql-differences) .- The following endpoints are fully supported:- `/api/v1/query`\n- `/api/v1/query_range`\n- `/api/v1/metadata`\n- `/api/v1/labels`\n- `/api/v1/query_exemplars`\n- The `/api/v1/label/<label_name>/values` endpoint only works if the `__name__` label is provided either by using it as the `<label_name>` value or by exactly matching on it using a series selector. For example, the following calls are fully supported:- `/api/v1/label/__name__/values`\n- `/api/v1/label/__name__/values?match[]={__name__=~\".*metricname.*\"}`\n- `/api/v1/label/labelname/values?match[]={__name__=\"metricname\"}`\nThis limitation causes `label_values($label)` variable queries in Grafana to fail. Instead, you can use `label_values($metric, $label)` . This type of query is recommended because it avoids fetching values for labels on metrics that are not relevant to the given dashboard.\n- The `/api/v1/series` endpoint is supported for `GET` but not `POST` requests. When you use the [data source syncer](/stackdriver/docs/managed-prometheus/query#grafana-oauth) or [frontendproxy](/stackdriver/docs/managed-prometheus/query-api-ui#ui-prometheus) , this restriction is managed for you. You can also configure your Prometheus data sources in Grafana to issue only `GET` requests.\n-", "guide": "Google Cloud Observability"}