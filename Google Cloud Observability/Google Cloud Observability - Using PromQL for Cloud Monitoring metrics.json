{"title": "Google Cloud Observability - Using PromQL for Cloud Monitoring metrics", "url": "https://cloud.google.com/stackdriver/docs/managed-prometheus/promql", "abstract": "# Google Cloud Observability - Using PromQL for Cloud Monitoring metrics\nYou can use Prometheus Query Language (PromQL) to query all metrics in Cloud Monitoring, including [Google Cloud system metrics](/monitoring/api/metrics_gcp) , [Kubernetes metrics](/monitoring/api/metrics_kubernetes) , [custom metrics](/monitoring/custom-metrics) , and [log-based metrics](/logging/docs/logs-based-metrics) .\n", "content": "## Mapping Cloud Monitoring metric names to PromQL\nCloud Monitoring metric names include two components, a domain (such as `compute.googleapis.com/` ) and a path (such as `instance/disk/max_read_ops_count` ). Because PromQL only supports the special characters `:` and `_` , you must first make Monitoring metric names compatible with PromQL. To map Monitoring metric names to PromQL, apply the following rules:\n- Replace the first`/`with`:`.\n- Replace all other special characters (including`.`and other`/`characters) with`_`.\nThe following table lists some metric names and their PromQL equivalents:\n| Cloud Monitoring metric name              | PromQL metric name                 |\n|:------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------|\n| kubernetes.io/container/cpu/limit_cores            | kubernetes_io:container_cpu_limit_cores            |\n| compute.googleapis.com/instance/cpu/utilization          | compute_googleapis_com:instance_cpu_utilization          |\n| logging.googleapis.com/log_entry_count            | logging_googleapis_com:log_entry_count            |\n| custom.googleapis.com/opencensus/opencensus.io/ http/server/request_count_by_method | custom_googleapis_com:opencensus_opencensus_io_ http_server_request_count_by_method |\n| agent.googleapis.com/disk/io_time             | agent_googleapis_com:disk_io_time             |\nCloud Monitoring [distribution-valued metrics](/monitoring/charts/charting-distribution-metrics) can be queried like Prometheus histograms, with `_count` , `_sum` , or `_bucket` suffix appended to the metric name:\n| Cloud Monitoring metric name   | PromQL metric names                            |\n|:--------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------|\n| networking.googleapis.com/vm_flow/rtt | networking_googleapis_com:vm_flow_rtt_sum networking_googleapis_com:vm_flow_rtt_count networking_googleapis_com:vm_flow_rtt_bucket |\n## Specifying a monitored resource type\nWhen a metric is associated with only a single [Cloud Monitoring monitoredresource type](/monitoring/api/resources) , PromQL querying will work without manually specifying a resource type. However, some metrics within Cloud Monitoring, including some system metrics and many of those generated by [log-based metrics](/logging/docs/logs-based-metrics) , map to more than one resource type.\nYou can see which monitored resource types map to a metric by doing one of the following:\n- For Google-curated metrics, you can consult the lists of metrics available, including [Google Cloudmetrics](/monitoring/api/metrics_gcp) and [Kubernetes metrics](/monitoring/api/metrics_kubernetes) . Each entry in the documentation lists the associated monitored resource types in the first column of each entry below the type. If no monitored resource types are listed, then the metric can be associated with any type.\n- In [Metrics Explorer](/monitoring/charts/metrics-explorer) , you can do the following:- Enter your metric name in the **Select a metric** field and then navigate through the menus to select the metric. The resource menu lists valid resource types for that metric, for example, \"VM Instance\".\n- In the toolbar of the query-builder pane, select the button whose name is either **MQL** or **PromQL** .\n- Verify that **MQL** is selected in the **Language** toggle. The language toggle is in the same toolbar that lets you format your query.The displayed query shows the resource type. In particular, MQL is useful for metrics that can be associated with many monitored resource types, for example log-based metrics, custom metrics, or any user-defined metric.If a metric is associated with more than one resource type, then you must specify the resource type in your PromQL query. There is a special label, `monitored_resource` , that you can use to select the resource type.\n[Monitored resource types](/monitoring/api/resources) are in most cases a short string, like `gce_instance` , but occasionally they appear as full URIs, like `monitoring.googleapis.com/MetricIngestionAttribution` . Well-formed PromQL queries might look like the following:\n- `logging_googleapis_com:byte_count{monitored_resource=\"k8s_container\"}`\n- `custom_googleapis_com:opencensus_opencensus_io_http_server_request_count_by_method{monitored_resource=\"global\"}`\n- `loadbalancing_googleapis_com:l3_external_egress_bytes_count{monitored_resource=\"loadbalancing.googleapis.com/ExternalNetworkLoadBalancerRule\"}`\nThe value of `\"\"` for the `monitored_resource` label is special and refers to the default [prometheus_target](/monitoring/api/resources#tag_prometheus_target) resource type that is used for Managed Service for Prometheus metrics.\nIf you don't use the `monitored_resource` label when it is needed, then you receive the following error:\n`metric is configured to be used with more than one monitored resource type; series selector must specify a label matcher on monitored resource name`\n## Using metadata labels\nYou can use [metadata labels](/monitoring/api/v3/metric-model#meta-labels) in PromQL just like any other label, but like metric names, metadata labels also need to be made PromQL-compatible. The syntax for referring to a metadata system label `version` is `metadata_system_version` , and the syntax for metadata user label `version` is `metadata_user_version` . Well-formed PromQL queries using metadata labels might look like the following:\n- `compute_googleapis_com:instance_cpu_utilization{monitored_resource=\"gce_instance\",metadata_user_env=\"prod\"}`\n- `sum(compute_googleapis_com:instance_cpu_utilization) by (metadata_system_region)`\nThe only special character you can use in metadata label keys is the `_` character. Aggregation using metadata labels with the type `MULTI_STRING` or `KEY_VALUE` is not supported.\n## Resolving label conflicts\nIn Cloud Monitoring, labels can belong to either the metric or the resource. If a metric label has the same key name as a resource label, you can refer to the metric label specifically by adding the prefix `metric_` to the label key name in your query.\nFor example, suppose you have a resource label and a metric label both named `pod_name` in the metric `example.googleapis.com/user/widget_count` .\n- To filter on the value of the resource label, use `example_googleapis_com:user_widget_count{pod_name=\"` `` `\"}`\n- To filter on the value of the metric label, use `example_googleapis_com:user_widget_count{metric_pod_name=\"` `` `\"}`## Additional topics\n### Rules and alerts\nYou can use Cloud Monitoring metrics in both recording and alerting rules in Managed Service for Prometheus. For instructions, see [Managed rule evaluation and alerting](/stackdriver/docs/managed-prometheus/rules-managed) or [Self-deployed rule evaluation and alerting](/stackdriver/docs/managed-prometheus/rules-unmanaged) .\n**Note:** You can create Cloud Monitoring alerting policies based on PromQL queries and Prometheus alert rules. For more information, see [Alerting policies with PromQL](/monitoring/promql/promql-in-alerting) .\n### Learning PromQL\nTo learn the basics of using PromQL, we recommend consulting open source documentation. Some helpful links might be:\n- [Querying Prometheus](https://prometheus.io/docs/prometheus/latest/querying/basics/) \n- [Query examples](https://prometheus.io/docs/prometheus/latest/querying/examples/) \n- [PromQL cheat sheet](https://promlabs.com/promql-cheat-sheet/) \n### PromQL differences\nPromQL for Managed Service for Prometheus might function slightly differently than upstream PromQL. For a list of these differences, see [PromQL differences](/stackdriver/docs/managed-prometheus/promql-differences) .", "guide": "Google Cloud Observability"}