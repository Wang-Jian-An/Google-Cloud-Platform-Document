{"title": "Google Cloud Observability - Managed rule evaluation and alerting", "url": "https://cloud.google.com/stackdriver/docs/managed-prometheus/rules-managed", "abstract": "# Google Cloud Observability - Managed rule evaluation and alerting\nGoogle Cloud Managed Service for Prometheus supports Prometheus-compatible rule evaluation and alerting. This document describes how to set up managed rule evaluation.\n", "content": "## Rule evaluation\nManaged Service for Prometheus provides a rule-evaluator component that allows you to safely write rules in the context of a global Prometheus backend, preventing you from interfering with other users' data in larger organizations. The component is automatically deployed as part of [managedcollection](/stackdriver/docs/managed-prometheus/setup-managed) when running on Kubernetes clusters.\nYou can write rules and alerts on both Managed Service for Prometheus metrics and [Cloud Monitoring metrics](/stackdriver/docs/managed-prometheus/promql) . You need to use the [GlobalRules resource](#globalrules) when writing rules for Cloud Monitoring metrics.\n**Note:** You can create Cloud Monitoring alerting policies based on PromQL queries and Prometheus alert rules. For more information, see [Alerting policies with PromQL](/monitoring/promql/promql-in-alerting) .\n### Rules\nThe managed rule-evaluator uses the [Rulesresource](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/v0.8.2/doc/api.md#rules) to configure recording and alerting rules. The following is an example Rules resource:\n```\napiVersion: monitoring.googleapis.com/v1\nkind: Rules\nmetadata:\n namespace: NAMESPACE_NAME\n name: example-rules\nspec:\n groups:\n - name: example\n interval: 30s\n rules:\n - record: job:up:sum\n  expr: sum without(instance) (up)\n - alert: AlwaysFiring\n  expr: vector(1)\n```\nThe format of the `.spec.groups` element is identical to the upstream Prometheus [rule_group](https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#rule_group) array. Alerting and recording rules defined in `Rules` are scoped to `project_id` , `cluster` , and `namespace` of the resource. For example, the `job:up:sum` rule in the above resource effectively queries `sum without(instance) (up{project_id=\"test-project\", cluster=\"test-cluster\", namespace=\"` `` `\"})` . This guarantee ensures that alerting or recording rules do not accidentally evaluate metrics from applications you may not even know about.\nTo apply the example rules to your cluster, run the following command:\n```\nkubectl apply -n NAMESPACE_NAME -f https://raw.githubusercontent.com/GoogleCloudPlatform/prometheus-engine/v0.8.2/examples/rules.yaml\n```\nAfter a few minutes, the metric `job:up:sum` becomes available. The alert `AlwaysFiring` also starts firing. For information about about how to send alerts to an Alertmanager, see [Alertmanager configuration](#am-config-managed) .\nThe [ClusterRules](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/v0.8.2/doc/api.md#clusterrules) and [GlobalRules](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/v0.8.2/doc/api.md#globalrules) resources provide the same interface as the `Rules` resource, but they apply the rules to wider scopes. ClusterRules select data by using the `project_id` and `cluster` labels, and GlobalRules select all data in the queried metrics scope without restricting labels.\nFor reference documentation about all the Managed Service for Prometheus custom resources, see the [prometheus-engine/doc/api reference](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/v0.8.2/doc/api.md) .\nThe Rules resource provides a compatible interface to Prometheus rules to provide a seamless migration path for incorporating existing rules into managed rule evaluation. You can include your existing rules in a Rules resource. For example, the following is a Prometheus rule:\n```\ngroups:\n- name: example\n interval: 30s\n rules:\n - record: job:up:sum\n expr: sum without(instance) (up)\n - alert: AlwaysFiring\n expr: vector(1)\n```\nThe corresponding Rules resource, with the original Prometheus rule in bold type, follows:\n```\napiVersion: monitoring.googleapis.com/v1\nkind: Rules\nmetadata:\n namespace: NAMESPACE_NAME\n name: example-rules\nspec:\n groups:\n - name: example\n interval: 30s\n rules:\n - record: job:up:sum\n  expr: sum without(instance) (up)\n - alert: AlwaysFiring\n  expr: vector(1)\n```\n### ClusterRules\nYou can use the [ClusterRules resource](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/v0.8.2/doc/api.md#clusterrules) to configure recording and alerting rules that can evaluate all time series sent to Managed Service for Prometheus from all namespaces in a particular cluster. The spec is identical to that of `Rules` . The previous [example Prometheus rule](#rules-to-gmprules) becomes the following `ClusterRules` resource:\n```\napiVersion: monitoring.googleapis.com/v1\nkind: ClusterRules\nmetadata:\n name: example-clusterrules\nspec:\n groups:\n - name: example\n interval: 30s\n rules:\n - record: job:up:sum\n  expr: sum without(instance) (up)\n - alert: AlwaysFiring\n  expr: vector(1)\n```\nWe recommend that you use ClusterRules resources only on horizontal metrics, such as those produced by a service mesh. For metrics of individual deployments, use Rules resources to ensure that the evaluation doesn't include unintended data.\n### GlobalRules\nYou can use the [GlobalRules resource](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/v0.8.2/doc/api.md#globalrules) to configure recording and alerting rules that can evaluate all time series sent to Managed Service for Prometheus across all projects within a [metrics scope](/monitoring/settings#concept-scope) . The spec is identical to that of `Rules` . The previous [example Prometheus rule](#rules-to-gmprules) becomes the following `GlobalRules` resource:\n```\napiVersion: monitoring.googleapis.com/v1\nkind: GlobalRules\nmetadata:\n name: example-globalrules\nspec:\n groups:\n - name: example\n interval: 30s\n rules:\n - record: job:up:sum\n  expr: sum without(instance) (up)\n - alert: AlwaysFiring\n  expr: vector(1)\n```\nBecause [Cloud Monitoring metrics](/stackdriver/docs/managed-prometheus/promql) are not scoped to a namespace or cluster, you must use the GlobalRules resource when writing rules or alerts for Cloud Monitoring metrics. Using GlobalRules is also required when alerting on [Google Kubernetes Engine system metrics](/monitoring/api/metrics_kubernetes) .\nIf your rule does not preserve the `project_id` or `location` labels, they default to the values of the cluster.\nFor Managed Service for Prometheus metrics, we recommend that you use GlobalRules only for those rare use cases where an alert might need data across all clusters at once. For metrics of individual deployments, use Rules or ClusterRules resources for higher reliability and to ensure that the evaluation doesn't include unintended data. We strongly recommend preserving the `cluster` and `namespace` labels in rule evaluation results unless the purpose of the rule is to aggregate away those labels, otherwise query performance might decline and you might encounter cardinality limits. Removing both labels is strongly discouraged.\nWhen deployed on Google Kubernetes Engine, the rule evaluator uses the Google Cloud project associated with the cluster, which the rule evaluator automatically detects. To evaluate rules that span projects, you must configure the rule evaluator that executes the GlobalRules resource to use a project with a multi-project metrics scope. You can do this in two ways:\n- Place your GlobalRules resource in a project that has a multi-project metrics scope.\n- Set the`queryProjectID`field within the [OperatorConfig](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/v0.8.2/doc/api.md#ruleevaluatorspec) to use a project with a multi-project metrics scope.\nYou must also update the permissions of the service account used by the rule evaluator (which is usually the default service account on the node) so the service account can read from the scoping project and write to all monitored projects in the metrics scope.\nIf your metrics scope contains all your projects, then your rules evaluate globally. For more information, see [Metrics scopes](/monitoring/settings#concept-scope) .\n### Alerting using Cloud Monitoring metrics\nYou can use the [GlobalRules resource](#globalrules) to alert on [Google Cloudsystem metrics](/monitoring/api/metrics_gcp) using PromQL. For instructions on how to create a valid query, see [PromQL for Cloud Monitoring metrics](/stackdriver/docs/managed-prometheus/promql) .\n### Configuring rules and alerts using Terraform\nYou can automate the creation and management of Rules, ClusterRules, and GlobalRules resources by using the [kubernetes_manifest Terraformresource type](https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs/resources/manifest) or the [kubectl_manifestTerraform resource type](https://registry.terraform.io/providers/gavinbunney/kubectl/latest/docs/resources/kubectl_manifest) , either of which lets you specify arbitrary custom resources.\nFor general information about using Google Cloud with Terraform, see [Terraform with Google Cloud](/docs/terraform) .\n## Provide credentials explicitly\nWhen running on GKE, the rule-evaluator automatically retrieves credentials from the environment based on the node's service account. In non-GKE Kubernetes clusters, credentials must be explicitly provided through the [OperatorConfig resource](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/v0.8.2/doc/api.md#operatorconfig) in the gmp-public namespace.\n- Set the context to your target project:```\ngcloud config set project PROJECT_ID\n```\n- Create a service account:```\ngcloud iam service-accounts create gmp-test-sa\n```\n- Grant the required permissions to the service account:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/monitoring.viewer \\\n&& \\\ngcloud projects add-iam-policy-binding PROJECT_ID\\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/monitoring.metricWriter\n```\n- Create and download a key for the service account:```\ngcloud iam service-accounts keys create gmp-test-sa-key.json \\\n --iam-account=gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com\n```\n- Add the key file as a secret to your non-GKE cluster:```\nkubectl -n gmp-public create secret generic gmp-test-sa \\\n --from-file=key.json=gmp-test-sa-key.json\n```\n- Open the OperatorConfig resource for editing:```\nkubectl -n gmp-public edit operatorconfig config\n```- Add the text shown in bold to the resource:```\napiVersion: monitoring.googleapis.com/v1\nkind: OperatorConfig\nmetadata:\n namespace: gmp-public\n name: config\nrules:\n credentials:\n name: gmp-test-sa\n key: key.json\n```Make sure you also [add these credentials to the collection section](/stackdriver/docs/managed-prometheus/setup-managed#explicit-credentials) so that managed collection works.\n- Save the file and close the editor. After the change is applied, the pods are re-created and start authenticating to the metric backend with the given service account.\n## Alertmanager configuration\nYou can use the [OperatorConfig resource](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/v0.8.2/doc/api.md#operatorconfig) to configure the managed rule-evaluator to send alerts to a Prometheus [Alertmanager](https://prometheus.io/docs/alerting/latest/alertmanager/) . You can send alerts to the automatically-deployed managed Alertmanager in addition to any self-deployed Alertmanagers.\n### Managed Alertmanager\n **    Preview     ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .Managed Service for Prometheus deploys a managed instance of Alertmanager, to which the rule evaluators are automatically configured to forward alerts. By default, this configuration is set with a specifically named Kubernetes Secret containing an [Alertmanager config file](https://prometheus.io/docs/alerting/latest/configuration/) .To enable and configure reporting to the deployed Alertmanager instance, do the following:- Create a local config file containing your [Alertmanager settings](https://prometheus.io/docs/alerting/latest/configuration/) (see [sample config templates](https://prometheus.io/docs/alerting/latest/notification_examples/) ):```\ntouch alertmanager.yaml\n```\n- Update the file with your desired [Alertmanager settings](https://prometheus.io/docs/alerting/latest/configuration/) and create a Secret named `alertmanager` in the `gmp-public` namespace:```\nkubectl create secret generic alertmanager \\\n -n gmp-public \\\n --from-file=alertmanager.yaml\n```\nAfter a few moments, Managed Service for Prometheus picks up the new config Secret and enables the managed Alertmanager with your settings.The managed Alertmanager also supports custom Secret names for loading the config. This capability is useful when you have multiple config Secrets and you want your Alertmanager instance to switch between the corresponding configs. For example, you might want to change the alert notification channels based on rotating on-call shifts, or you might want to swap in an experimental Alertmanager config to test a new alerting route.To specify a non-default Secret name by using the OperatorConfig resource, do the following:- Create a Secret from your local Alertmanager config file:```\nkubectl create secret generic SECRET_NAME \\\n -n gmp-public \\\n --from-file=FILE_NAME\n```\n- Open the OperatorConfig resource for editing:```\nkubectl -n gmp-public edit operatorconfig config\n```\n- To enable the managed Alertmanager reporting, edit the resource by modifying the `managedAlertmanager` section as shown in the following bold text:```\napiVersion: monitoring.googleapis.com/v1\nkind: OperatorConfig\nmetadata:\n namespace: gmp-public\n name: config\nmanagedAlertmanager:\n configSecret:\n name: SECRET_NAME\n key: FILE_NAME\n```\nIf you need to make any changes to the Alertmanager configuration, then you can then edit the configuration for this Alertmanager by updating the Secret you created earlier.\n### Self-deployed Alertmanager\nTo configure the rule-evaluator for a self-deployed Alertmanager, do the following:- Open the OperatorConfig resource for editing:```\nkubectl -n gmp-public edit operatorconfig config\n```\n- Configure the resource to send alerts to your Alertmanager service:```\napiVersion: monitoring.googleapis.com/v1\nkind: OperatorConfig\nmetadata:\n namespace: gmp-public\n name: config\nrules:\n alerting:\n alertmanagers:\n - name: SERVICE_NAME\n  namespace: SERVICE_NAMESPACE\n  port: PORT_NAME\n```\nIf your Alertmanager is located in a different cluster than your rule-evaluator, you might need to set up a [Endpoints resource](https://kubernetes.io/docs/concepts/services-networking/service/#services-without-selectors) . For example, if your OperatorConfig says that Alertmanager endpoints can be found in Endpoints object `ns=alertmanager/name=alertmanager` , you can manually or programmatically create this object yourself and populate it with reachable IPs from the other cluster. The [AlertmanagerEndpoints configuration section](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/main/doc/api.md#alertmanagerendpoints) provides options for authorization configuration if necessary.", "guide": "Google Cloud Observability"}