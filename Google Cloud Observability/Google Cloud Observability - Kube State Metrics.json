{"title": "Google Cloud Observability - Kube State Metrics", "url": "https://cloud.google.com/stackdriver/docs/managed-prometheus/exporters/kube_state_metrics", "abstract": "# Google Cloud Observability - Kube State Metrics\nThis document describes how to configure your Google Kubernetes Engine deployment so that you can use Google Cloud Managed Service for Prometheus to collect metrics from Kube State Metrics. This document shows you how to do the following:\n- Set up Kube State Metrics to report metrics.\n- Configure a PodMonitoring resource for Managed Service for Prometheus  to collect the exported metrics.\n- Access a dashboard in Cloud Monitoring to view the metrics.\n- Configure alerting rules to monitor the metrics.These instructions apply only if you are using [managed collection](/stackdriver/docs/managed-prometheus/setup-managed) with Managed Service for Prometheus. If you are using self-deployed collection, then see the [source repository](https://github.com/kubernetes/kube-state-metrics) for Kube State Metrics for installation information.\n", "content": "## Prerequisites\nTo collect metrics from Kube State Metrics by using Managed Service for Prometheus and managed collection, your deployment must meet the following requirements:\n- Your cluster must be running Google Kubernetes Engine version  1.21.4-gke.300 or later.\n- You must be running Managed Service for Prometheus  with managed collection enabled. For more information, see [  Get started with managed collection](/stackdriver/docs/managed-prometheus/setup-managed) .\n- To use dashboards available in Cloud Monitoring for the  integration, you must use`kube-state-metrics`version 2.4.2 or later.For more information about available dashboards, see [Install dashboards](#monitoring-dashboard) .\n## Managed Kube State Metrics\nGKE offers a fully managed deployment of kube state metrics as an alternative to configuring this integration. The installable package provides an opinionated, curated set of kube state metrics that requires less effort to set up. For more information, see [Package: Kube state metrics](/kubernetes-engine/docs/how-to/configure-metrics#ksm-package) .\n## Install Kube State Metrics\nYou can use the following configuration to install Kube State Metrics:\n[View on GitHub](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/HEAD/examples/kube-state-metrics/kube-state-metrics.yaml)\n```\n# Copyright 2023 Google LLC\n## Licensed under the Apache License, Version 2.0 (the \"License\");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 https://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an \"AS IS\" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.apiVersion: apps/v1kind: StatefulSetmetadata:\u00a0 labels:\u00a0 \u00a0 app.kubernetes.io/name: kube-state-metrics\u00a0 \u00a0 app.kubernetes.io/version: 2.8.2\u00a0 namespace: gmp-public\u00a0 name: kube-state-metricsspec:\u00a0 replicas: 1\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app.kubernetes.io/name: kube-state-metrics\u00a0 serviceName: kube-state-metrics\u00a0 template:\u00a0 \u00a0 metadata:\u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 app.kubernetes.io/name: kube-state-metrics\u00a0 \u00a0 \u00a0 \u00a0 app.kubernetes.io/version: 2.8.2\u00a0 \u00a0 spec:\u00a0 \u00a0 \u00a0 affinity:\u00a0 \u00a0 \u00a0 \u00a0 nodeAffinity:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requiredDuringSchedulingIgnoredDuringExecution:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 nodeSelectorTerms:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - matchExpressions:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - key: kubernetes.io/arch\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 operator: In\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 values:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - arm64\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - amd64\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - key: kubernetes.io/os\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 operator: In\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 values:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - linux\u00a0 \u00a0 \u00a0 containers:\u00a0 \u00a0 \u00a0 - name: kube-state-metric\u00a0 \u00a0 \u00a0 \u00a0 image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.8.2\u00a0 \u00a0 \u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 \u00a0 - name: POD_NAME\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 valueFrom:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fieldRef:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fieldPath: metadata.name\u00a0 \u00a0 \u00a0 \u00a0 - name: POD_NAMESPACE\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 valueFrom:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fieldRef:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fieldPath: metadata.namespace\u00a0 \u00a0 \u00a0 \u00a0 args:\u00a0 \u00a0 \u00a0 \u00a0 - --pod=$(POD_NAME)\u00a0 \u00a0 \u00a0 \u00a0 - --pod-namespace=$(POD_NAMESPACE)\u00a0 \u00a0 \u00a0 \u00a0 - --port=8080\u00a0 \u00a0 \u00a0 \u00a0 - --telemetry-port=8081\u00a0 \u00a0 \u00a0 \u00a0 ports:\u00a0 \u00a0 \u00a0 \u00a0 - name: metrics\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 containerPort: 8080\u00a0 \u00a0 \u00a0 \u00a0 - name: metrics-self\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 containerPort: 8081\u00a0 \u00a0 \u00a0 \u00a0 resources:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 requests:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cpu: 100m\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memory: 190Mi\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 limits:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memory: 250Mi\u00a0 \u00a0 \u00a0 \u00a0 securityContext:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 allowPrivilegeEscalation: false\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 privileged: false\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 capabilities:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 drop:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - all\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 runAsUser: 1000\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 runAsGroup: 1000\u00a0 \u00a0 \u00a0 \u00a0 livenessProbe:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 httpGet:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 path: /healthz\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 8080\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 initialDelaySeconds: 5\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 timeoutSeconds: 5\u00a0 \u00a0 \u00a0 \u00a0 readinessProbe:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 httpGet:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 path: /\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 port: 8081\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 initialDelaySeconds: 5\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 timeoutSeconds: 5\u00a0 \u00a0 \u00a0 serviceAccountName: kube-state-metrics---apiVersion: v1kind: Servicemetadata:\u00a0 labels:\u00a0 \u00a0 app.kubernetes.io/name: kube-state-metrics\u00a0 \u00a0 app.kubernetes.io/version: 2.8.2\u00a0 namespace: gmp-public\u00a0 name: kube-state-metricsspec:\u00a0 clusterIP: None\u00a0 ports:\u00a0 - name: metrics\u00a0 \u00a0 port: 8080\u00a0 \u00a0 targetPort: metrics\u00a0 - name: metrics-self\u00a0 \u00a0 port: 8081\u00a0 \u00a0 targetPort: metrics-self\u00a0 selector:\u00a0 \u00a0 app.kubernetes.io/name: kube-state-metrics---apiVersion: v1kind: ServiceAccountmetadata:\u00a0 namespace: gmp-public\u00a0 name: kube-state-metrics\u00a0 labels:\u00a0 \u00a0 app.kubernetes.io/name: kube-state-metrics\u00a0 \u00a0 app.kubernetes.io/version: 2.8.2---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:\u00a0 name: gmp-public:kube-state-metrics\u00a0 labels:\u00a0 \u00a0 app.kubernetes.io/name: kube-state-metrics\u00a0 \u00a0 app.kubernetes.io/version: 2.8.2roleRef:\u00a0 apiGroup: rbac.authorization.k8s.io\u00a0 kind: ClusterRole\u00a0 name: gmp-public:kube-state-metricssubjects:- kind: ServiceAccount\u00a0 namespace: gmp-public\u00a0 name: kube-state-metrics---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata:\u00a0 name: gmp-public:kube-state-metrics\u00a0 labels:\u00a0 \u00a0 app.kubernetes.io/name: kube-state-metrics\u00a0 \u00a0 app.kubernetes.io/version: 2.8.2rules:- apiGroups:\u00a0 - \"\"\u00a0 resources:\u00a0 - configmaps\u00a0 - secrets\u00a0 - nodes\u00a0 - pods\u00a0 - services\u00a0 - resourcequotas\u00a0 - replicationcontrollers\u00a0 - limitranges\u00a0 - persistentvolumeclaims\u00a0 - persistentvolumes\u00a0 - namespaces\u00a0 - endpoints\u00a0 verbs:\u00a0 - list\u00a0 - watch- apiGroups:\u00a0 - \"\"\u00a0 resources:\u00a0 - pods\u00a0 verbs:\u00a0 - get- apiGroups:\u00a0 - extensions\u00a0 resources:\u00a0 - daemonsets\u00a0 - deployments\u00a0 - replicasets\u00a0 - ingresses\u00a0 verbs:\u00a0 - list\u00a0 - watch- apiGroups:\u00a0 - apps\u00a0 resources:\u00a0 - statefulsets\u00a0 - daemonsets\u00a0 - deployments\u00a0 - replicasets\u00a0 verbs:\u00a0 - list\u00a0 - watch- apiGroups:\u00a0 - apps\u00a0 resources:\u00a0 - statefulsets\u00a0 verbs:\u00a0 - get - apiGroups:\u00a0 - batch\u00a0 resources:\u00a0 - cronjobs\u00a0 - jobs\u00a0 verbs:\u00a0 - list\u00a0 - watch- apiGroups:\u00a0 - autoscaling\u00a0 resources:\u00a0 - horizontalpodautoscalers\u00a0 verbs:\u00a0 - list\u00a0 - watch- apiGroups:\u00a0 - authentication.k8s.io\u00a0 resources:\u00a0 - tokenreviews\u00a0 verbs:\u00a0 - create- apiGroups:\u00a0 - authorization.k8s.io\u00a0 resources:\u00a0 - subjectaccessreviews\u00a0 verbs:\u00a0 - create- apiGroups:\u00a0 - policy\u00a0 resources:\u00a0 - poddisruptionbudgets\u00a0 verbs:\u00a0 - list\u00a0 - watch- apiGroups:\u00a0 - certificates.k8s.io\u00a0 resources:\u00a0 - certificatesigningrequests\u00a0 verbs:\u00a0 - list\u00a0 - watch- apiGroups:\u00a0 - storage.k8s.io\u00a0 resources:\u00a0 - storageclasses\u00a0 - volumeattachments\u00a0 verbs:\u00a0 - list\u00a0 - watch- apiGroups:\u00a0 - admissionregistration.k8s.io\u00a0 resources:\u00a0 - mutatingwebhookconfigurations\u00a0 - validatingwebhookconfigurations\u00a0 verbs:\u00a0 - list\u00a0 - watch- apiGroups:\u00a0 - networking.k8s.io\u00a0 resources:\u00a0 - networkpolicies\u00a0 - ingresses\u00a0 verbs:\u00a0 - list\u00a0 - watch- apiGroups:\u00a0 - coordination.k8s.io\u00a0 resources:\u00a0 - leases\u00a0 verbs:\u00a0 - list\u00a0 - watch---apiVersion: autoscaling/v2kind: HorizontalPodAutoscalermetadata:\u00a0 name: kube-state-metrics\u00a0 namespace: gmp-publicspec:\u00a0 maxReplicas: 10\u00a0 minReplicas: 1\u00a0 scaleTargetRef:\u00a0 \u00a0 apiVersion: apps/v1\u00a0 \u00a0 kind: StatefulSet\u00a0 \u00a0 name: kube-state-metrics\u00a0 metrics:\u00a0 - type: Resource\u00a0 \u00a0 resource:\u00a0 \u00a0 \u00a0 name: memory\u00a0 \u00a0 \u00a0 target:\u00a0 \u00a0 \u00a0 \u00a0 type: Utilization\u00a0 \u00a0 \u00a0 \u00a0 averageUtilization: 60\u00a0 behavior:\u00a0 \u00a0 scaleDown:\u00a0 \u00a0 \u00a0 policies:\u00a0 \u00a0 \u00a0 - type: Pods\u00a0 \u00a0 \u00a0 \u00a0 value: 1\u00a0 \u00a0 \u00a0 \u00a0 # Under-utilization needs to persist for `periodSeconds` before any action can be taken.\u00a0 \u00a0 \u00a0 \u00a0 # Current supported max from https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2beta2/.\u00a0 \u00a0 \u00a0 \u00a0 periodSeconds: 1800\u00a0 \u00a0 \u00a0 # Current supported max from https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2beta2/.\u00a0 \u00a0 \u00a0 stabilizationWindowSeconds: 3600---apiVersion: monitoring.googleapis.com/v1kind: ClusterPodMonitoringmetadata:\u00a0 name: kube-state-metrics\u00a0 labels:\u00a0 \u00a0 app.kubernetes.io/name: kube-state-metrics\u00a0 \u00a0 app.kubernetes.io/part-of: google-cloud-managed-prometheusspec:\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app.kubernetes.io/name: kube-state-metrics\u00a0 endpoints:\u00a0 - port: metrics\u00a0 \u00a0 interval: 30s\u00a0 \u00a0 metricRelabeling:\u00a0 \u00a0 - action: keep\u00a0 \u00a0 \u00a0 # Curated subset of metrics to reduce costs while populating default set of sample dashboards at\u00a0 \u00a0 \u00a0 # https://github.com/GoogleCloudPlatform/monitoring-dashboard-samples/tree/master/dashboards/kubernetes\u00a0 \u00a0 \u00a0 # Change this regex to fit your needs for which objects you want to monitor \u00a0 \u00a0\u00a0 \u00a0 \u00a0 regex: kube_(daemonset|deployment|replicaset|pod|namespace|node|statefulset|persistentvolume|horizontalpodautoscaler|job_created)(_.+)?\u00a0 \u00a0 \u00a0 sourceLabels: [__name__]\u00a0 targetLabels:\u00a0 \u00a0 metadata: [] # explicitly empty so the metric labels are respected---apiVersion: monitoring.googleapis.com/v1kind: PodMonitoringmetadata:\u00a0 namespace: gmp-public\u00a0 name: kube-state-metrics\u00a0 labels:\u00a0 \u00a0 app.kubernetes.io/name: kube-state-metrics\u00a0 \u00a0 app.kubernetes.io/part-of: google-cloud-managed-prometheusspec:\u00a0 selector:\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 app.kubernetes.io/name: kube-state-metrics\u00a0 endpoints:\u00a0 - port: metrics-self\u00a0 \u00a0 interval: 30s\n```\nTo apply configuration changes from a local file, run the following command:\n```\nkubectl apply -f FILE_NAME\n```\nYou can also [use Terraform](/stackdriver/docs/managed-prometheus/setup-managed#terraform-scrape) to manage your configurations.\n## Define rules and alerts\nYou can use the following `Rules` configuration to define alerts on your metrics:\n[View on GitHub](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/HEAD/examples/kube-state-metrics/rules.yaml)\n```\n# Copyright 2022 Google LLC\n## Licensed under the Apache License, Version 2.0 (the \"License\");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at\n## \u00a0 \u00a0 https://www.apache.org/licenses/LICENSE-2.0\n## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an \"AS IS\" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.apiVersion: monitoring.googleapis.com/v1kind: Rulesmetadata:\u00a0 namespace: gmp-public\u00a0 name: kube-state-metrics-rules\u00a0 labels:\u00a0 \u00a0 app.kubernetes.io/component: rules\u00a0 \u00a0 app.kubernetes.io/name: kube-state-metrics\u00a0 \u00a0 app.kubernetes.io/part-of: google-cloud-managed-prometheusspec:\u00a0 groups:\u00a0 \u00a0 - name: kube-state-metrics\u00a0 \u00a0 \u00a0 interval: 30s\u00a0 \u00a0 \u00a0 rules:\u00a0 \u00a0 \u00a0 - alert: KubeStateMetricsListErrors\u00a0 \u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 description: kube-state-metrics is experiencing errors at an elevated rate in list operations. This is likely causing it to not be able to expose metrics about Kubernetes objects correctly or at all.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 summary: kube-state-metrics is experiencing errors in list operations.\u00a0 \u00a0 \u00a0 \u00a0 expr: |\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (sum(rate(kube_state_metrics_list_total{job=\"kube-state-metrics\",result=\"error\"}[5m]))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 /\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sum(rate(kube_state_metrics_list_total{job=\"kube-state-metrics\"}[5m])))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 > 0.01\u00a0 \u00a0 \u00a0 \u00a0 for: 15m\u00a0 \u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 severity: critical\u00a0 \u00a0 \u00a0 - alert: KubeStateMetricsWatchErrors\u00a0 \u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 description: kube-state-metrics is experiencing errors at an elevated rate in watch operations. This is likely causing it to not be able to expose metrics about Kubernetes objects correctly or at all.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 summary: kube-state-metrics is experiencing errors in watch operations.\u00a0 \u00a0 \u00a0 \u00a0 expr: |\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (sum(rate(kube_state_metrics_watch_total{job=\"kube-state-metrics\",result=\"error\"}[5m]))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 /\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sum(rate(kube_state_metrics_watch_total{job=\"kube-state-metrics\"}[5m])))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 > 0.01\u00a0 \u00a0 \u00a0 \u00a0 for: 15m\u00a0 \u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 severity: critical\u00a0 \u00a0 \u00a0 - alert: KubeStateMetricsShardingMismatch\u00a0 \u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 description: kube-state-metrics pods are running with different --total-shards configuration, some Kubernetes objects may be exposed multiple times or not exposed at all.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 summary: kube-state-metrics sharding is misconfigured.\u00a0 \u00a0 \u00a0 \u00a0 expr: |\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 stdvar (kube_state_metrics_total_shards{job=\"kube-state-metrics\"}) != 0\u00a0 \u00a0 \u00a0 \u00a0 for: 15m\u00a0 \u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 severity: critical\u00a0 \u00a0 \u00a0 - alert: KubeStateMetricsShardsMissing\u00a0 \u00a0 \u00a0 \u00a0 annotations:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 description: kube-state-metrics shards are missing, some Kubernetes objects are not being exposed.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 summary: kube-state-metrics shards are missing.\u00a0 \u00a0 \u00a0 \u00a0 expr: |\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2^max(kube_state_metrics_total_shards{job=\"kube-state-metrics\"}) - 1\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 -\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sum( 2 ^ max by (shard_ordinal) (kube_state_metrics_shard_ordinal{job=\"kube-state-metrics\"}) )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 != 0\u00a0 \u00a0 \u00a0 \u00a0 for: 15m\u00a0 \u00a0 \u00a0 \u00a0 labels:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 severity: critical\n```\nTo apply configuration changes from a local file, run the following command:\n```\nkubectl apply -f FILE_NAME\n```\nYou can also [use Terraform](/stackdriver/docs/managed-prometheus/setup-managed#terraform-scrape) to manage your configurations.\nFor more information about applying rules to your cluster, see [Managed rule evaluation and alerting](/stackdriver/docs/managed-prometheus/rules-managed) .\n`Rules`\n[kube-state-metrics](https://github.com/kubernetes/kube-state-metrics/blob/master/examples/prometheus-alerting-rules/alerts.yaml)\n## Verify the configuration\nYou can use Metrics Explorer to verify that you correctly configured the exporter. It might take one or two minutes for Cloud Monitoring to ingest your metrics.\nTo verify the metrics are ingested, do the following:\n- In the navigation panel of the Google Cloud console, select **Monitoring** , and then select **Metrics explorer** : [Go to Metrics explorer](https://console.cloud.google.com/monitoring/metrics-explorer) \n- In the toolbar of the query-builder pane, select the button whose name is either **MQL** or **PromQL** .\n- Verify that **PromQL** is selected in the **Language** toggle. The language toggle is in the same toolbar that lets you format your query.\n- Enter and run the following query:```\nup{job=\"kube-state-metrics\", cluster=\"CLUSTER_NAME\", namespace=\"gmp-public\"}\n```\n## Install dashboards\nCloud Monitoring provides a library of sample dashboards for integrations. The sample library includes \"Prometheus\" dashboards, which you can install to view your data in the Google Cloud console.\nNote that the **Kubernetes Cluster Prometheus Overview** dashboard requires [Node Exporter](/stackdriver/docs/managed-prometheus/exporters/node_exporter) to be installed. The **Kubernetes Pod Prometheus Overview** dashboard requires [Node Exporter](/stackdriver/docs/managed-prometheus/exporters/node_exporter) and [cAdvisor/Kubelet](/stackdriver/docs/managed-prometheus/exporters/kubelet-cadvisor) to be installed.\nTo install a dashboard from the sample library, do the following:\n- In the navigation panel of the Google Cloud console, select **Monitoring** , and then select **Dashboards** : [Go to Dashboards](https://console.cloud.google.com/monitoring/dashboards) \n- Select the **Sample Library** tab.\n- Choose the **Other** category.\n- (Optional) To view a static preview of a dashboard without   installing it, click **Preview** .\n- Select the dashboards you want to install, then click **Import** .For more information about installing dashboards, see [Installing sample dashboards](/monitoring/dashboards/dashboard-templates#install-templates) .\n## Troubleshooting\nFor information about troubleshooting metric ingestion problems, see [Problems with collection from exporters](/stackdriver/docs/managed-prometheus/troubleshooting#exporter-problems) in [Troubleshooting ingestion-side problems](/stackdriver/docs/managed-prometheus/troubleshooting#ingest-problems) .", "guide": "Google Cloud Observability"}