{"title": "Google Cloud Observability - Creating a service-level indicator", "url": "https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/identifying-custom-sli", "abstract": "# Google Cloud Observability - Creating a service-level indicator\nIf you create custom services, then you must also create service-level objectives (SLOs) for them. There are no pre-defined SLOs for custom services.\nYou can also create custom SLOs for automatically detected services, but that is less common.\nSLOs are built on top of metrics that measure performance and are used as service-level indicators (SLIs). For custom SLOs, you must identify the metrics you want to use in your SLIs.\nIf you are not creating custom SLOs, you can skip this page.\n", "content": "## Characteristics of suitable metric types\nThere are two types of SLOs you can create for your services:\n- Request-based SLOs.\n- Windows-based SLOs.\nSLOs are based on the metric types you choose as SLIs. The values in metrics types are classified by how they are related to each other. This classification is called the , and it has three possible values, `GAUGE` , `DELTA,` and `CUMULATIVE` . For more information, see [MetricKind](/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors#MetricKind) .\nFor request-based SLOs, your SLI represents a ratio of good requests to total requests. The metric kind of your SLI must be `DELTA` or `CUMULATIVE` . You can't use `GAUGE` metrics in request-based SLOs.\nFor windows-based SLOs, your SLI represents a count of good outcomes in a given period. The acceptable metric kinds depend on how you structure the SLIs. For more information, see [Structures for windows-basedSLIs](/stackdriver/docs/solutions/slo-monitoring/api/api-structures#window-sli-structs) .\nFor more information on the types of SLOs, see [Concepts in servicemonitoring](/stackdriver/docs/solutions/slo-monitoring) .\nYou can use metric types provided by Cloud Monitoring, or you can use custom metric types you've created. In both cases, the values are suitable for the SLI you want to create.\n### Unsuitable metric types\nWhen considering a metric type for use as an SLI, avoid high-cardinality metric types. Cardinality describes the number of possible time series that can be associated with the metric type, and it is related to the granularity of the values that metric labels can take. For a discussion of cardinality, see [Cardinality: time series and labels](/monitoring/api/v3/metric-model#cardinality) .\nMetric types with labels that take values like timestamps are likely to have very high cardinality and are poor choices for use as SLIs. High-cardinality metrics are often user-defined metrics that have not been designed to avoid cardinality issues. These can include user-defined [log-basedmetrics](/logging/docs/logs-based-metrics) and [custom metrics](/monitoring/custom-metrics) .\n## Finding suitable metric types\nThe information about metric types, including the metric kind, can be found in multiple places:\n- The metrics selector used in tools like Metrics Explorer displays a hover-card for the highlighted metric type. This tool works for custom and built-in metrics.For example, the following screenshot shows the hover-card for the metric type `loadbalancing.googleapis.com/https/request_count` as seen in Metrics Explorer: With Metrics Explorer, you can also configure the metric to mimic what the SLO API does, and you can get a JSON representation of that configuration. This JSON is useful in creating an SLI manually.\n- The pages in the [Metrics list](/monitoring/api/metrics) contain tables for each service that detail the metric types associated with the services. These tables include all the built-in metric types, but don't show custom metric types.For example, the following screenshot shows the entry for the metric type `loadbalancing.googleapis.com/https/request_count` as seen in the [list of loadbalancing metrics](/monitoring/api/metrics_gcp#gcp-loadbalancing) . These entries often provide more detail than the hover-cards in Metrics Explorer. ## Building the SLI\nFor service monitoring, metric data is processed in specific ways, which you can replicate in Metrics Explorer. This page assumes you are familiar with using Metrics Explorer. If you need more information, see [Metrics Explorer](/monitoring/charts/metrics-explorer) .\nTo build a request-based SLI based on a time-series ratio, you need two time series: one that represents all requests, and one that represents good (or bad) requests. This type of SLI has the following structure:\n```\n \"requestBased\": {\n \"goodTotalRatio\": {\n  \"totalServiceFilter\": TO_BE_IDENTIFIED,\n  \"goodServiceFilter\": TO_BE_IDENTIFIED,\n }\n }\n```\nTo get the value for the `goodServiceFilter` field:\n- Select the monitored-resource type and metric type. Remember that the metric kind must be `DELTA` or `CUMULATIVE` . The result might include many different time series.For example, select the `http_lb_rule` resource type and the `loadbalancing.googleapis.com/https/request_count` metric type.\n- Use the **Filter** field to set the label `response_code_class` to `200` . This filter removes any time series with other values for this label. There still might be multiple time series that match.\n- Choose the `sum` aggregator to create a single time series. The chart on the **Metrics Explorer** page displays the resulting time series.\n- Click **More Options more_vert** above the chart, and select **View as JSON** from the menu.The retrieved JSON looks something like the following:```\n\"dataSets\": [ {\n \"timeSeriesFilter\": {\n  \"filter\": \"metric.type=\"loadbalancing.googleapis.com/https/request_count\" resource.type=\"http_lb_rule\" metric.label.\"response_code_class\"=\"200\"\"\n  \"perSeriesAligner\": \"ALIGN_RATE\",\n  \"crossSeriesReducer\": \"REDUCE_SUM\",\n  \"secondaryCrossSeriesReducer\": \"REDUCE_NONE\",\n  \"minAlignmentPeriod\": \"60s\",\n  \"groupByFields\": [],\n  \"unitOverride\": \"1\"\n },\n \"targetAxis\": \"Y1\",\n \"plotType\": \"LINE\"\n }\n],\n```\nThe piece you are interested in is the value of the `filter` field embedded in the `dataSets` object:\n```\n\"filter\": \"metric.type=\"loadbalancing.googleapis.com/https/request_count\" resource.type=\"http_lb_rule\" metric.label.\"response_code_class\"=\"200\"\"\n```\nTo build out the SLI structure:\n- Insert this value into the SLI structure as the value of the `goodServiceFilter` field.\n- Also insert this value into the SLI structure as the value of the `totalServiceFilter` , but then remove the label part of the filter, `metric.label.\\\"response_code_class\\\"=\\\"200\\\"` .\nThe resulting service-level indicator follows:\n```\n \"requestBased\": {\n \"goodTotalRatio\": {\n  \"totalServiceFilter\": \"metric.type=\"loadbalancing.googleapis.com/https/request_count\" resource.type=\"http_lb_rule\"\",\n  \"goodServiceFilter\": \"metric.type=\"loadbalancing.googleapis.com/https/request_count\" resource.type=\"http_lb_rule\" metric.label.\"response_code_class\"=\"200\"\",\n }\n }\n```\nYou can then insert this SLI into an SLO, for example:\n```\n{\n \"serviceLevelIndicator\": {\n  \"requestBased\": {\n  \"goodTotalRatio\": {\n   \"totalServiceFilter\": \"metric.type=\"loadbalancing.googleapis.com/https/request_count\" resource.type=\"http_lb_rule\"\",\n   \"goodServiceFilter\": \"metric.type=\"loadbalancing.googleapis.com/https/request_count\" resource.type=\"http_lb_rule\" metric.label.\"response_code_class\"=\"200\"\",\n  }\n  }\n },\n \"goal\": 0.98,\n \"calendarPeriod\": \"WEEK\",\n \"displayName\": \"98% Successful requests in a calendar week\"\n}\n```\nYou can use this JSON to create an SLO, as described in [Creating anSLO](/stackdriver/docs/solutions/slo-monitoring/api/using-api#slo-create) .", "guide": "Google Cloud Observability"}