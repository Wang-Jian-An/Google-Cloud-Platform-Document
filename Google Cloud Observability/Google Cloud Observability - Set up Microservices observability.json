{"title": "Google Cloud Observability - Set up Microservices observability", "url": "https://cloud.google.com/stackdriver/docs/solutions/grpc/set-up-observability", "abstract": "# Google Cloud Observability - Set up Microservices observability\nThis document contains the information you need to set up the Microservices observability plugin, instrument your gRPC applications, and obtain information from Cloud Monitoring, Cloud Logging, and Cloud Trace.\n", "content": "## Before you begin\nMicroservices observability works with any deployment that has been granted permission to access Cloud Monitoring, Cloud Logging, and Cloud Trace by enabling the Microservices API. This guide provides an example setup of Microservices observability using a Compute Engine example.\nAt a high level, you do the following:\n- As a **service developer** , you opt in and control the Microservices observability plugin.\n- As a **service operator** , you consume the collected data in various ways.\nThe gRPC repositories (C++, Go, and Java) include examples for demonstrating Microservices observability.\nBefore you configure observability, complete the following tasks:\n- Read the [Microservices observability overview](/stackdriver/docs/solutions/grpc) .\n- Make sure that you have an existing project or [create a new project](/resource-manager/docs/creating-managing-projects) .\n- Make sure that you have an existing service account or [create a new one](/iam/docs/service-accounts-create#creating) .\n- Read about the [two supported environment variables](#config-options) , decide which to use, and determine the values required by the environment variable.\n- [Enable the Microservices API](#enable-apis) .\n### Choose a configuration environment variable\nWhen you opt in to the Microservices observability plugin, which is described in [Instrument your applications for the observability plugin](/stackdriver/docs/solutions/grpc/set-up-observability#instrument-apps) , you must provide configuration information using an environment variable. By default, no observability features are enabled. You set the environment variable on the VM or container where the gRPC application or workload is running.\nThe following are the environment variables:\n- `GRPC_GCP_OBSERVABILITY_CONFIG_FILE`: the value is a path pointing to a JSON encoded config file.\n- `GRPC_GCP_OBSERVABILITY_CONFIG`: the value is the body of the config encoded in JSON.\nIf both environment variables are set, `GRPC_GCP_OBSERVABILITY_CONFIG_FILE` takes precedence over `GRPC_GCP_OBSERVABILITY_CONFIG` .\nTo apply the configuration, you must restart the gRPC application. You cannot set or view the values of the environment variables in the Google Cloud console.\nIn the configuration, you can set a destination project to which logging, tracing, and metrics data are uploaded. You set the project ID in the `project_id` field.\n- If this field is left empty, the observability plugin automatically fills the value of the project ID based on the [application default credentials](/docs/authentication/production#automatically) .\n- If the [application default credentials](/docs/authentication/production#automatically) cannot be identified and the `project_id` field is empty, the `INIT/START` method raises or returns an error to your application. The application must then handle the error.\nUse the information in [Configuration data](/stackdriver/docs/solutions/grpc/observability-reference#configuration-data) to set the values in the environment variable you choose.\n### Enable the Microservices API\nYou can use the Google Cloud CLI or the Google Cloud console to enable the Microservices API in your projects. Enabling the Microservice API automatically enables the Cloud Logging API, Cloud Monitoring API, and Cloud Trace API.\nTo enable the API:\n```\ngcloud services enable microservices.googleapis.com\n```\n### Set service account permissions\nIf you are using a non-default service account, grant the required permissions for the service account. Set the following values:\n- : Substitute your project ID.\n- : Substitute the service account name of your project.\n```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:SERVICE_ACCOUNT_NAME@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/logging.logWriter\n```\n```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:SERVICE_ACCOUNT_NAME@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/monitoring.metricWriter\n```\n```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:SERVICE_ACCOUNT_NAME@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/cloudtrace.agent\n```\n## Instrument your applications for the observability plugin\nTo instrument your applications so that they can use the Microservices observabillity plugin, use the following instructions for C++, Java, and Go.\n**Note:** Microservices observability, which utilizes OpenCensus for instrumentation, is incompatible with the direct use of OpenCensus due to its global memory consumption. If you are using Stackdriver exporters with OpenCensus, you can take advantage of Microservices observability to automatically configure Stackdriver exporters. However, the simultaneous use of non-Stackdriver exporters alongside Microservices observability is not supported.\n### C++\nYou can use C++ with Microservices observability as of gRPC C++ v1.54. The [example repository](https://github.com/grpc/grpc/tree/v1.54.0/examples/cpp/gcp_observability/helloworld) is in github.\nObservability support is only available through the Bazel build system. Add the target `grpcpp_gcp_observability` as a dependency.\nOpting in Microservices observability requires an additional dependency (an observability modul) and the following code changes to existing gRPC clients, servers, or both:\n```\n#include <grpcpp/ext/gcp_observability.h>int main(int argc, char** argv) {\u00a0 auto observability = grpc::GcpObservability::Init();\u00a0 assert(observability.ok());\u00a0 \u2026\u00a0 // Observability data flushed when object goes out of scope}\n```\nBefore any gRPC operations, including creating a channel, server, or credentials, invoke the following:\n```\ngrpc::GcpObservability::Init();\n```\nThis returns `absl::StatusOr<GcpObservability>` which should be saved. The status helps determine whether observability was successfully initialized. The accompanying `GcpObservability` object controls the lifetime of observability, and automatically closes and flushes observability data when it goes out of scope.\n### Go\nMicroservices observability plugins are supported for gRPC Go versions `v1.54.0` and later. The [example repository](https://github.com/grpc/grpc-go/tree/master/examples/features/observability) is in github.\nWith the Go module, opting in Microservices observability requires an observability module and the following code:\n```\nimport \"google.golang.org/grpc/gcp/observability\"func main() {\u00a0 \u00a0 \u00a0 \u00a0ctx, cancel := context.WithTimeout(context.Background(), time.Second)\u00a0 \u00a0 \u00a0 \u00a0defer cancel()\u00a0 \u00a0 \u00a0 \u00a0if err := observability.Start(ctx); err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 log.Warning(\"Unable to start gRPC observability:\", err)\u00a0 \u00a0 \u00a0 \u00a0}\u00a0 \u00a0 \u00a0 \u00a0defer observability.End()\u00a0 \u00a0 \u00a0 \u00a0\u2026}\n```\nThe `observability.Start` call parses the configuration from environment variables, creates exporters accordingly, and injects collection logic to client connections and servers created after the call. The deferred `observability.End` call cleans up resources and ensures that buffered data is flushed before the application closes.\nAfter the application code is updated, run the following command to update the `go.mod` file.\n```\ngo mod tidy\n```\n### Java\nTo use Microservices observability with Java applications, modify your build to include the `grpc-gcp-observability` artifact. Use gRPC version 1.54.1 or later.\nIn the build snippets in the Gradle and Maven build tool sections, `grpcVersion` is set to the value 1.54.1.\nThe [example repository](https://github.com/grpc/grpc-java/tree/v1.54.1/examples/example-gcp-observability) is in github.\nTo successfully instrument your Java applications for Microservices observability, add the following code to `main()` .\n```\n...import io.grpc.gcp.observability.GcpObservability;...// Main application class...public static void main(String[] args) {...\u00a0 \u00a0// call GcpObservability.grpcInit() to initialize & get observability\u00a0 \u00a0GcpObservability observability = GcpObservability.grpcInit();...\u00a0 \u00a0// call close() on the observability instance to shutdown observability\u00a0 \u00a0observability.close();...}\n```\nNote that you must call `GcpObservability.grpcInit()` before any gRPC channels or servers are created. The `GcpObservability.grpcInit()` function reads the Microservices observability configuration and uses that to set up the global interceptors and tracers that are required for the logging, metrics, and trace functionality in each channel and server created. `GcpObservability.grpcInit()` is thread safe and must be called exactly once. It returns an instance of `GcpObservability` that you must save in order to call `close()` later.\n`GcpObservability.close()` de-allocates resources. Any channel or servers created afterwards do not perform any logging.\n`GcpObservability` implements `java.lang.AutoCloseable` , which is closed automatically if you use `try-with-resource` s as follows:\n```\n...import io.grpc.gcp.observability.GcpObservability;...// Main application class...public static void main(String[] args) {...\u00a0 \u00a0// call GcpObservability.grpcInit() to initialize & get observability\u00a0 \u00a0try (GcpObservability observability = GcpObservability.grpcInit()) {...\u00a0 \u00a0} // observability.close() called implicitly...}\n```\nIf you are using the Gradle build tool, include the following:\n```\ndef grpcVersion = '1.54.1'...dependencies {...\u00a0 \u00a0implementation \"io.grpc:grpc-gcp-observability:${grpcVersion}\"...}\n```\nIf you are using the Maven build tool, include the following:\n```\n<properties>...\u00a0 <grpc.version>1.54.1</grpc.version>...</properties>...<dependencies>...\u00a0<dependency>\u00a0 \u00a0<groupId>io.grpc</groupId>\u00a0 \u00a0<artifactId>grpc-gcp-observability</artifactId>\u00a0 \u00a0<version>${grpc.version}</version>\u00a0</dependency>...</dependencies>\n```\n## Enable metrics, tracing, and logging data collection\nThe following sections contain instructions for enabling data collection in your configuration and an example showing the configuration information in an environment variable.\n### Enable metrics\nTo enable metrics, add the `cloud_monitoring` object to the configuration and set its value to `{}` .\nFor more information about metrics, see [Metrics definitions](/stackdriver/docs/solutions/grpc/observability-reference#metrics-def) .\n### Enable tracing\nIf you plan to enable tracing across services, ensure that the services support the propagation of trace context received from upstream (or started by itself) to downstream.\nTo enable tracing, do the following:\n- Add the`cloud_trace`object to the configuration.\n- Set the`cloud_trace.sampling_rate`to a probability that you want your application to observe to start new traces.- For example,`1.0`means tracing every RPC.\n- `0.0`means do not start any new traces.\n- `0.5`means that 50% of RPCs are randomly traced.If a positive sampling decision is made upstream, your services upload spans regardless of the sampling rate setting.\nFor more information about tracing, see [Trace definitions](/stackdriver/docs/solutions/grpc/observability-reference#trace-def) .\n### Enable logging\nTo enable logging, do the following:\n- Add the`cloud_logging`object to the configuration.\n- Add a pattern to either or both of`client_rpc_events`and`server_rpc_events`specifying the set of services or methods for which you want to generate transport-level event logging and the number of bytes to log for headers and messages.\nFor more information about logging, see [Log record definitions](/stackdriver/docs/solutions/grpc/observability-reference#log-record-defs) .\n### Environment variable example\nThe following example sets the observability variables in the environment variable `GRPC_GCP_OBSERVABILITY_CONFIG` :\n```\nexport GRPC_GCP_OBSERVABILITY_CONFIG='{\u00a0 \u00a0 \u00a0\"project_id\": \"your-project-here\",\u00a0 \u00a0 \u00a0\"cloud_logging\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"client_rpc_events\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"methods\": [\"google.pubsub.v1.Subscriber/Acknowledge\", \"google.pubsub.v1.Publisher/CreateTopic\"],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"exclude\": true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"methods\": [\"google.pubsub.v1.Subscriber/*\", \"google.pubsub.v1.Publisher/*\"],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"max_metadata_bytes\": 4096,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"max_message_bytes\": 4096,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0}],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"server_rpc_events\": [{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"methods\": [\"*\"],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"max_metadata_bytes\": 4096,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"max_message_bytes\": 4096\u00a0 \u00a0 \u00a0 \u00a0 \u00a0}],\u00a0 \u00a0 \u00a0},\u00a0 \u00a0 \u00a0\"cloud_monitoring\": {},\u00a0 \u00a0 \u00a0\"cloud_trace\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"sampling_rate\": 1.00,\u00a0 \u00a0 \u00a0}\u00a0 \u00a0 \u00a0\"labels\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"SOURCE_VERSION\": \"J2e1Cf\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"SERVICE_NAME\": \"payment-service-1Cf\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"DATA_CENTER\": \"us-west1-a\"\u00a0 \u00a0 \u00a0}}'\n```\n## Create the observability example\nUse these instructions to create and connect to a Compute Engine VM instance and then set up the observability example.\n- Create a VM instance:```\ngcloud compute instances create grpc-observability-vm \\\n --image-family=debian-11 \\\n --image-project=debian-cloud \\\n --service-account=SERVICE_ACCOUNT_NAME@PROJECT_ID.iam.gserviceaccount.com\n```\n- Connect to the VM instance:```\ngcloud compute ssh --project=PROJECT_ID grpc-observability-vm\n```\nContinue with the instructions for Java, C++, or Go, depending on the language of your gRPC applications.\n- After you connect to the VM instance, make sure that you have Java 8 or later installed.```\nsudo apt update\nsudo apt upgrade\nsudo apt install git\nsudo apt-get install -y openjdk-11-jdk-headless\n```\n- Clone the `grpc-java` repository.```\nexport EXAMPLES_VERSION=v1.54.1\ngit clone -b $EXAMPLES_VERSION --single-branch --depth=1 \\\nhttps://github.com/grpc/grpc-java.git\n```\n- Go to the examples directory.```\ncd grpc-java/examples/example-gcp-observability\n```\n- In the examples directory, open the README file and follow the instructions in the file.\n- When the instructions tell you to open another terminal window, issue this command:```\ngcloud compute ssh --project=PROJECT_ID grpc-observability-vm\n```\n- After you connect to the VM instance, run a `hello-world` server binary in a terminal window.```\nsudo apt-get update -y\nsudo apt-get install -y git build-essential clang\ngit clone -b v1.54.0 https://github.com/grpc/grpc.git --depth=1\ncd grpc\nexport GOOGLE_CLOUD_PROJECT=PROJECT_ID\nexport GRPC_GCP_OBSERVABILITY_CONFIG_FILE=\"$(pwd)/examples/cpp/gcp_observability/helloworld/server_config.json\"\ntools/bazel run examples/cpp/gcp_observability/helloworld:greeter_server\n```\n- From another terminal window, SSH into the VM again and run the following commands, which run the `hello-world` client binary.```\ncd grpc\nexport GOOGLE_CLOUD_PROJECT=PROJECT_ID\nexport GRPC_GCP_OBSERVABILITY_CONFIG_FILE=\"$(pwd)/examples/cpp/gcp_observability/helloworld/client_config.json\"\ntools/bazel run examples/cpp/gcp_observability/helloworld:greeter_client\n```\n- Make sure that you have Go installed.```\nsudo apt-get install -y git\nsudo apt install wget\nwget https://go.dev/dl/go1.20.2.linux-amd64.tar.gz\nsudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf \\\ngo1.20.2.linux-amd64.tar.gz\nexport PATH=$PATH:/usr/local/go/bin\n```\n- Clone the `gRPC-Go` examples.```\ngit clone https://github.com/grpc/grpc-go.git\ncd grpc-go/\ngit checkout -b run-observability-example\n875c97a94dca8093bf01ff2fef490fbdd576373d\n```\n- Go to the `gRPC-Go` directory clone:```\ncd examples/features/observability\n```\n- Run the server.```\nexport GRPC_GCP_OBSERVABILITY_CONFIG_FILE=./server/serverConfig.json\ngo run ./server/main.go\n```\n- In a separate terminal window, run the following commands.```\nexport PATH=$PATH:/usr/local/go/bin\ncd grpc-go/examples/features/observability\nexport GRPC_GCP_OBSERVABILITY_CONFIG_FILE=./client/clientConfig.json\ngo run ./client/main.go\n```## View traces, metrics, and log entries\nUse the instructions in this section to view traces, metrics, and log entries.\n### View traces on Cloud Trace\nAfter you set up the examples or you have instrumented your workloads, you should see traces generated by your gRPC clients and gRPC servers in the Google Cloud console listed as recent traces.\nIf you enable both logging and tracing, you can view log entries for traces alongside the [Cloud Trace waterfall graph](/trace/docs/trace-log-integration#viewing_logs) or in Logs Explorer.\n### View metrics on the dashboard\nMicroservices observability provides a monitoring dashboard called **Microservices(gRPC) Monitoring** for the metrics defined in [Metrics definitions](/stackdriver/docs/solutions/grpc/observability-reference#metrics-def) . The dashboard is displayed in Google Cloud console only when the Microservices API is enabled. The Google Cloud console calls the Service Usage API to verify whether the Microservices API is enabled in a project. The user must have the `serviceusage.services.list` permission to view the dashboard.\nThe **Microservices (gRPC) Monitoring** dashboard is a Google Cloud Platform dashboard and you cannot directly modify it. To customize the dashboard, you must copy the dashboard to a custom dashboard. You can then update the custom dashboard, for example by adding, deleting, or re-arranging the charts.\n### View metrics on Metrics Explorer\nAfter you set up the gRPC example or you instrument your workload, you should see metrics generated by your gRPC clients and gRPC servers in the Google Cloud console.\nTo view and chart metrics, use the instructions in [Select metrics when using Metrics Explorer](/monitoring/charts/metrics-selector)\n### Inspect log entries on Logs Explorer\nSuggested query is a Cloud Logging feature in which Google Cloud suggests a set of queries based on the ingested logs. You can click and use the prepared filters.\nAfter the log entries matching suggested queries appear in Cloud Logging, you can expect to see new suggested queries in approximately 6 minutes. In most cases, you see new suggested queries sooner. If there are log entries that match a suggestion in the previous 15 minutes, any suggested queries continue to be displayed. They continue to appear as a suggestion until there haven't been any matching log entries in the previous 15 minutes.\nYou can create customized queries. See the [Logging query language guide](/logging/docs/view/logging-query-language) for instructions. For example, in the Query pane of the Logs Explorer, you can try to show all the gRPC debug logs with the following code, after you replace the PROJECT_ID placeholder:\n```\nlog_id(\"microservices.googleapis.com/observability/grpc\")\n```\nYou can use all fields in the gRPC log record for filtering. Here is an example log entry:\n```\n{\u00a0 \"insertId\": \"17kh8vafzuruci\",\u00a0 \"jsonPayload\": {\u00a0 \u00a0 \"authority\": \"10.84.1.15:50051\",\u00a0 \u00a0 \"sequenceId\": \"6\",\u00a0 \u00a0 \"serviceName\": \"helloworld.Greeter\",\u00a0 \u00a0 \"peer\": {\u00a0 \u00a0 \u00a0 \"ipPort\": 50051,\u00a0 \u00a0 \u00a0 \"address\": \"10.84.1.10\",\u00a0 \u00a0 \u00a0 \"type\": \"IPV4\"\u00a0 \u00a0 },\u00a0 \u00a0 \"callId\": \"d9577780-c608-4bff-9e12-4d9cdea6b298\",\u00a0 \u00a0 \"type\": \"SERVER_TRAILER\",\u00a0 \u00a0 \"methodName\": \"SayHello\",\u00a0 \u00a0 \"payload\": {},\u00a0 \u00a0 \"logger\": \"CLIENT\"\u00a0 },\u00a0 \"resource\": {\u00a0 \u00a0 \"type\": \"k8s_container\",\u00a0 \u00a0 \"labels\": {\u00a0 \u00a0 \u00a0 \"pod_name\": \"grpc-client-deployment-155-6967959544-x8ndr\",\u00a0 \u00a0 \u00a0 \"container_name\": \"grpc-client-container-155\",\u00a0 \u00a0 \u00a0 \"cluster_name\": \"o11y-cluster\",\u00a0 \u00a0 \u00a0 \"namespace_name\": \"grpc-client-namespace-155\",\u00a0 \u00a0 \u00a0 \"location\": \"us-west1-b\",\u00a0 \u00a0 \u00a0 \"project_id\": \"grpc-greeter\"\u00a0 \u00a0 }\u00a0 },\u00a0 \"timestamp\": \"2023-04-05T23:33:41.718523Z\",\u00a0 \"severity\": \"DEBUG\",\u00a0 \"labels\": {\u00a0 \u00a0 \"environment\": \"example-client\"\u00a0 },\u00a0 \"logName\": \"projects/grpc-greeter/logs/microservices.googleapis.com%2Fobservability%2Fgrpc\",\u00a0 \"receiveTimestamp\": \"2023-04-05T23:33:42.712682457Z\"}\n```\n### Suggested queries\nMicroservices observability provides the following [suggested queries](/logging/docs/view/building-queries#suggested_queries) to Cloud Logging:\nThis query gives a basic view of RPCs, yielding peer information and RPC results.\n```\nlog_id(\"microservices.googleapis.com/observability/grpc\") ANDjsonPayload.type=(\"CLIENT_HEADER\" OR \"SERVER_TRAILER\")\n```\nThis query finds the RPCs that end with non-OK status.\n```\nlog_id(\"microservices.googleapis.com/observability/grpc\") ANDjsonPayload.type=\"SERVER_TRAILER\" ANDjsonPayload.payload.statusCode!=\"OK\"\n```\nExcessive gRPC cancellation or deadline-exceeds can provide useful information about performance loss or unexpected application behavior.\n```\nlog_id(\"microservices.googleapis.com/observability/grpc\") AND((jsonPayload.type=\"SERVER_TRAILER\" AND jsonPayload.payload.statusCode=(\"CANCELLED\" OR \"DEADLINE_EXCEEDED\")) OR (jsonPayload.type=\"CANCEL\"))\n```\n## Use logs and tracing for troubleshooting\nIf you see an RPC event that indicates bad behavior, you can find the `callid` in the event. Use the following query to display all the events that happened in one RPC, regardless of whether it's a unary or streaming RPC. The previous log entry is used as an example:\n```\nlog_id(\"microservices.googleapis.com/observability/grpc\")jsonPayload.callid=\"a358c7b80-3548-4bc8-a33f-b93ba1514904\"\n```\nTo determine the scope of the issue, you can find all RPC events for the same method or location. The following query shows all of the debug logs related to a specific RPC method, using the Greeter service as an example:\n```\nlog_id(\"microservices.googleapis.com/observability/grpc\")jsonPayload.serviceName=\"helloworld.Greeter\"jsonPayload.methodName=\"SayHello\"\n```\nTo check the failed RPCs of a specific status code, you can add the status code as one of the filtering conditions. The following query shows the trailer events that end with non-OK status:\n```\nlog_id(\"microservices.googleapis.com/observability/grpc\")jsonPayload.payload.statusCode!=\"OK\"\n```\n## Observability options\nMicroservices observability includes the following optional features.\n### Define custom labels\nYou can define , which add user-provided information to the observability data. Custom labels consist of key-value pairs. Each key-value pair is attached to tracing data as span labels, to metrics data as metric tags, and to logging data as log entry labels.\nCustom labels are defined in the configuration with a list of key-value pairs in the `labels` field. All custom labels keys and values are of type STRING. The implementation reads the configuration and creates a separate label for each key-value pair, then attaches the labels to the observability data.\nFor example, this is a label definition:\n```\n\"labels\": {\u00a0 \u00a0 \"DATACENTER\": \"SAN_JOSE_DC\",\u00a0 \u00a0 \"APP_ID\": \"24512\"\u00a0 }\n```\nEach log entry has the following has these additional labels:\n```\n\u00a0 \u00a0\"DATACENTER\" : \"SAN_JOSE_DC\"\u00a0 \u00a0\"APP_ID\" : \"24512\"}\n```\n### Enable payload logging\nYou enable payload logging using the environment variables that you supply to the workload. To turn on payload logging for HelloWorld messages and headers, update the value of the configuration files `gcp_observability_server_config.json` , `gcp_observability_client_config.json` or both in the gRPC examples as follows:\n```\n{\u00a0 \u00a0\"cloud_monitoring\":{\u00a0 \u00a0},\u00a0 \u00a0\"cloud_trace\":{\u00a0 \u00a0 \u00a0 \"sampling_rate\":1.0\u00a0 \u00a0},\u00a0 \u00a0\"cloud_logging\":{\u00a0 \u00a0 \u00a0 \"client_rpc_events\":[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"methods\":[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"helloworld.Greeter/*\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"max_metadata_bytes\":4096,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"max_message_bytes\":4096\u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"server_rpc_events\":[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"methods\":[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"helloworld.Greeter/*\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"max_metadata_bytes\":4096,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"max_message_bytes\":4096\u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0}}\n```\n### Set up cross-project observability\nYou can set the destination project explicitly using the configuration set in the environment variable `GRPC_GCP_OBSERVABILITY_CONFIG` . For cross-project observability, you also have to set the appropriate permissions as described [in the following section](#service-account-permissions-for-cross-project-observability) . Assuming the destination project ID is `core-platform-stats` , you can set up cross-project observability using the following example configuration:\n```\n{\u00a0 \u00a0\"project_id\":\"core-platform-stats\",\u00a0 \u00a0\"cloud_monitoring\":{\u00a0 \u00a0},\u00a0 \u00a0\"cloud_trace\":{\u00a0 \u00a0 \u00a0 \"sampling_rate\":1.0\u00a0 \u00a0},\u00a0 \u00a0\"cloud_logging\":{\u00a0 \u00a0 \u00a0 \"client_rpc_events\":[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"methods\":[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"helloworld.Greeter/*\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"server_rpc_events\":[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"methods\":[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"helloworld.Greeter/*\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0}\u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0}}\n```\n### Estimate log volume\nThis section gives you information you can use to optionally estimate log ingestion volume. You can make an estimate before you subscribe to the RPC events of your services.\n| Item         | Detail                                           |\n|:--------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Events generated for an OK unary call | 6 events An OK unary call RPC generates the following 6 events for client or server: CLIENT_HEADER SERVER_HEADER CLIENT_MESSAGE SERVER_MESSAGE CLIENT_HALF_CLOSE SERVER_TRAILER |\n| Average size of log entry    | 500 bytes by default A log entry maps to one RPC event, the RPC event includes the detailed debugging information for that event, resource labels, and custom labels.   |\n| Payload logging size     | 0 by default, can be configured Maximum payload size is configurable in the observability configuration. By default, no payload is logged.          |\n| Custom labels size     | 0 by default, can be configured Custom labels are provided to the application using environment variables. If none specified, there will be no custom labels     |\nTotal size of log ingestion per month estimation formula:\n`Monthly Log Ingestion = QPS * 6 * (500B + Payload Logging Size + Custom Labels Size) * 2592000`\nFor example, if the QPS of a unary call method is 1 and no extra features are enabled, the estimated log ingestion size is approximately 7.24 GiB.\n## What's next\n- For detailed information about configuration data, trace definitions, metrics definitions, and log definitions see [Microservices observability reference](/stackdriver/docs/solutions/grpc/observability-reference) .", "guide": "Google Cloud Observability"}