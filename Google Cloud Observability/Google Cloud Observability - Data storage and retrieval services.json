{"title": "Google Cloud Observability - Data storage and retrieval services", "url": "https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/sli-metrics/data-storage-metrics", "abstract": "# Google Cloud Observability - Data storage and retrieval services\nThe Google Cloud data services discussed on this page include those that store and provide data as a response to a request. SLIs for these services are similar to SLIs for request-response services, described in [Request-response services](/stackdriver/docs/solutions/slo-monitoring/sli-metrics/req-resp-metrics) , with a primary focus on availability and latency. Note that latency, especially when measuring database-query response time, is often a factor of how much data is being retrieved, and can vary with application workload.\nYou express a request-based availability SLI by using the [TimeSeriesRatio](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#TimeSeriesRatio) structure to set up a ratio of \"good\" requests to total requests. You decide how to filter the metric by using its available labels to arrive at your preferred determination of \"good\" or \"valid\".\nYou express a request-based latency SLI by using a [DistributionCut](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#DistributionCut) structure.\n**Note:** The filter strings in some of these examples have been line-wrapped for readability.\n", "content": "## Cloud Storage\n[Cloud Storage](/storage) is Google Cloud's worldwide, highly durable object store. Cloud Storage is available in multiple [storage classes](/storage/docs/storage-classes) , which let you determine the appropriate cost and retrieval model for your service or use case.\nFor additional information, see the following:\n- Documentation for [Cloud Storage](/storage/docs) .\n- List of [storage.googleapis.com metric types](https://cloud.google.com/monitoring/api/metrics_gcp#gcp-storage) .\n### Availability SLIs\nCloud Storage writes metric data to Cloud Monitoring using the [gcs_bucket](/monitoring/api/resources#tag_gcs_bucket) monitored-resource type and the [api/request_count](/monitoring/api/metrics_gcp#storage/api/request_count) metric type. You can filter the data by using the `response_code` metric label to count \"good\" requests. You can also use the `method` metric label to measure availability for a specific API method, such as `ReadObject` .\nYou express a request-based availability SLI for reading objects from a Cloud Storage bucket by using a ratio, [TimeSeriesRatio](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#TimeSeriesRatio) , of good requests to total requests, as shown in the following example:\n```\n\"serviceLevelIndicator\": {\u00a0 \"requestBased\": {\u00a0 \u00a0 \"goodTotalRatio\": {\u00a0 \u00a0 \u00a0 \"totalServiceFilter\":\u00a0 \u00a0 \u00a0 \u00a0 \"metric.type=\\\"storage.googleapis.com/api/request_count\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.type=\\\"gcs_bucket\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0metric.label.\\\"method\\\"=\\\"ReadObject\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.label.\\\"bucket_name\\\"=\\\"my_bucket\\\"\",\u00a0 \u00a0 \u00a0 \"goodServiceFilter\":\u00a0 \u00a0 \u00a0 \u00a0 \"metric.type=\\\"storage.googleapis.com/api/request_count\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.type=\\\"gcs_bucket\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0metric.label.\\\"method\\\"=\\\"ReadObject\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.label.\\\"bucket_name\\\"=\\\"my_bucket\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0metric.label.\\\"response_code\\\"=\\\"OK\\\"\",\u00a0 \u00a0 }\u00a0 }}\n```\n### Latency SLIs\nCloud Storage doesn't provide a latency metric; if latency is a concern, consider instrumenting your service to collect this on the client.\n## Bigtable\n[Bigtable](/bigtable) is a fully managed, scalable NoSQL database service for large analytical and operational workloads. Bigtable is ideal for storing very large amounts of data in a key-value store. Bigtable also supports high read-and-write throughput at low latency, offering you fast access to large amounts of data.\nFor additional information, see the following:\n- Documentation for [Bigtable](/bigtable/docs) .\n- List of [bigtable.googleapis.com metric types](https://cloud.google.com/monitoring/api/metrics_gcp#gcp-bigtable) .\n### Availability SLIs\nBigtable writes metric data to Cloud Monitoring using the [bigtable_table](/monitoring/api/resources#tag_bigtable_table) monitored-resource type and the following metric types:\n- [server/request_count](/monitoring/api/metrics_gcp#bigtable/server/request_count) , which counts the total number of requests.\n- [server/error_count](/monitoring/api/metrics_gcp#bigtable/server/error_count) , which counts the total number of failed requests.\nYou express a request-based availability SLI for reading objects from a Cloud Storage bucket by using a ratio, [TimeSeriesRatio](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#TimeSeriesRatio) , of \"bad\" requests to total requests, as shown in the following example:\nYou can use these two metrics to express a request-based availability SLI by creating a [TimeSeriesRatio](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#TimeSeriesRatio) structure for failed requests to total requests, as shown in the following example:\n```\n\"serviceLevelIndicator\": {\u00a0 \"requestBased\": {\u00a0 \u00a0 \"goodTotalRatio\": {\u00a0 \u00a0 \u00a0 \"totalServiceFilter\":\u00a0 \u00a0 \u00a0 \u00a0 \"metric.type=\\\"bigtable.googleapis.com/server/request_count\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.type=\\\"bigtable_table\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.label.\\\"table\\\"=\\\"my_table\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.label.\\\"cluster\\\"=\\\"my_cluster\\\"\",\u00a0 \u00a0 \u00a0 \"badServiceFilter\":\u00a0 \u00a0 \u00a0 \u00a0 \"metric.type=\\\"bigtable.googleapis.com/server/error_count\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.type=\\\"bigtable_table\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.label.\\\"table\\\"=\\\"my_table\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.label.\\\"cluster\\\"=\\\"my_cluster\\\"\",\u00a0 \u00a0 }\u00a0 }}\n```\n### Latency SLIs\nTo measure latency, Bigtable writes metric data to Cloud Monitoring using the [bigtable_table](/monitoring/api/resources#tag_bigtable_table) monitored-resource type and the [server/latencies](/monitoring/api/metrics_gcp#bigtable/server/latencies) metric type. You can filter the data by using the `method` metric label to measure the latencies of specific methods.\nYou express a request-based latency SLI by using a [DistributionCut](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#DistributionCut) structure.\nThe following example SLO expects 99% of all requests to the `my_table` table in the `my_cluster` cluster to fall between 0 and 100 ms in total latency over a rolling one-hour period:\n```\n{\u00a0 \"serviceLevelIndicator\": {\u00a0 \u00a0 \"requestBased\": {\u00a0 \u00a0 \u00a0 \"distributionCut\": {\u00a0 \u00a0 \u00a0 \u00a0 \"distributionFilter\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"metric.type=\\\"bigtable.googleapis.com/server/latencies\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.type=\\\"bigtable_table\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.label.\\\"table\\\"=\\\"my_table\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.label.\\\"cluster\\\"=\\\"my_cluster\\\"\",\u00a0 \u00a0 \u00a0 \u00a0 \"range\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"min\": 0,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"max\": 100\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 },\u00a0 \"goal\": 0.99,\u00a0 \"rollingPeriod\": \"3600s\",\u00a0 \"displayName\": \"98% requests under 100 ms\"}\n```\n## Spanner\n[Spanner](/spanner) is a fully managed relational database service that offers transactional consistency at global scale, schemas, SQL (ANSI 2011 with extensions), and automatic, synchronous replication for high availability.\nFor additional information, see the following:\n- Documentation for [Spanner](/spanner/docs) .\n- List of [spanner.googleapis.com metric types](https://cloud.google.com/monitoring/api/metrics_gcp#gcp-spanner) .\n### Availability SLIs\nSpanner writes metric data to Cloud Monitoring using the [spanner_instance](/monitoring/api/resources#tag_spanner_instance) monitored-resource type and the [query_count](/monitoring/api/metrics_gcp#spanner/query_count) metric type. You can filter the data by using the `status` metric label to count successful and failed database queries.\nYou express a request-based availability SLI by creating a [TimeSeriesRatio](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#TimeSeriesRatio) structure for \"good\" requests to total requests, as shown in the following example:\n```\n\"serviceLevelIndicator\": {\u00a0 \"requestBased\": {\u00a0 \u00a0 \"goodTotalRatio\": {\u00a0 \u00a0 \u00a0 \"totalServiceFilter\":\u00a0 \u00a0 \u00a0 \u00a0 \"metric.type=\\\"spanner.googleapis.com/query_count\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.type=\\\"spanner_instance\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0metric.label.\\\"database\\\"=\\\"my_database\\\"\",\u00a0 \u00a0 \u00a0 \"goodServiceFilter\":\u00a0 \u00a0 \u00a0 \u00a0 \"metric.type=\\\"spanner.googleapis.com/query_count\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.type=\\\"spanner_instance\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0metric.label.\\\"database\\\"=\\\"my_database\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0metric.label.\\\"status\\\"=\\\"ok\\\"\",\u00a0 \u00a0 }\u00a0 }}\n```\n### Latency SLIs\nTo measure latency, Spanner writes metric data to Cloud Monitoring using the [spanner_instance](/monitoring/api/resources#tag_spanner_instance) monitored-resource type and the [api/request_latencies](/monitoring/api/metrics_gcp#spanner/api/request_latencies) metric type. You can filter the data by using the `method` metric label to measure the latencies of specific methods. The data includes latencies not just for queries, but for other Spanner API calls.\nYou express a request-based latency SLI by using a [DistributionCut](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#DistributionCut) structure. The following example SLO expects that 99% of all API requests to the `my_database` database fall between 0 and 100 ms in total latency over a rolling one-hour period:\n```\n{\u00a0 \"serviceLevelIndicator\": {\u00a0 \u00a0 \"requestBased\": {\u00a0 \u00a0 \u00a0 \"distributionCut\": {\u00a0 \u00a0 \u00a0 \u00a0 \"distributionFilter\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"metric.type=\\\"spanner.googleapis.com/api/request_latencies\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.type=\\\"spanner_instance\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0metric.label.\\\"database\\\"=\\\"my_database\\\"\",\u00a0 \u00a0 \u00a0 \u00a0 \"range\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"min\": 0,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"max\": 100\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 },\u00a0 \"goal\": 0.99,\u00a0 \"rollingPeriod\": \"3600s\",\u00a0 \"displayName\": \"98% requests under 100 ms\"}\n```\n## Datastore\n[Datastore](/datastore) is a highly scalable NoSQL database for your applications. Datastore automatically handles sharding and replication, providing you with a highly available and durable database that scales automatically to handle your applications' loads.\nFor additional information, see the following:\n- Documentation for [Datastore](/datastore/docs) .\n- List of [datastore.googleapis.com metric types](https://cloud.google.com/monitoring/api/metrics_gcp#gcp-datastore) .\n### Availability SLIs\nDatastore writes metric data to Cloud Monitoring using the [datastore_request](/monitoring/api/resources#tag_datastore_request) monitored-resource type and the [api/request_count](/monitoring/api/metrics_gcp#datastore/api/request_count) metric type. You can filter the data by using the `response_code` metric label to count successful and failed API calls or by using the `api_method` metric label to, for example, only measure document reads.\nYou express a request-based availability SLI by creating a [TimeSeriesRatio](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#TimeSeriesRatio) structure for successful requests to total requests, as shown in the following example:\n```\n\"serviceLevelIndicator\": {\u00a0 \"requestBased\": {\u00a0 \u00a0 \"goodTotalRatio\": {\u00a0 \u00a0 \u00a0 \"totalServiceFilter\":\u00a0 \u00a0 \u00a0 \u00a0 \"metric.type=\\\"datastore.googleapis.com/api/request_count\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.type=\\\"datastore_request\\\"\",\u00a0 \u00a0 \u00a0 \"goodServiceFilter\":\u00a0 \u00a0 \u00a0 \u00a0 \"metric.type=\\\"datastore.googleapis.com/api/request_count\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resource.type=\\\"datastore_request\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0metric.label.\\\"response_code\\\"=\\\"success\\\"\",\u00a0 \u00a0 }\u00a0 }}\n```\n### Latency SLIs\nDatastore doesn't currently provide a latency metric. For the available metrics, see [datastore.googleapis.com metric types](https://cloud.google.com/monitoring/api/metrics_gcp#gcp-datastore) .", "guide": "Google Cloud Observability"}