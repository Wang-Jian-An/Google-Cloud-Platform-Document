{"title": "Google Cloud Observability - Self-deployed rule evaluation and alerting", "url": "https://cloud.google.com/stackdriver/docs/managed-prometheus/rules-unmanaged", "abstract": "# Google Cloud Observability - Self-deployed rule evaluation and alerting\nGoogle Cloud Managed Service for Prometheus supports Prometheus-compatible rule evaluation and alerting. This document describes how to set up self-deployed rule evaluation, including the standalone rule-evaluator component.\nYou only need to follow these instructions if you want to execute rules and alerts against the global data store.\n", "content": "## Rule evaluation for self-deployed collection\nAfter you have deployed Managed Service for Prometheus, you can continue to evaluate rules locally in each deployed instance by using the [rule_files](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#configuration-file) field of your Prometheus configuration file. However, the maximum query window for the rules is constrained by how long the server keeps local data.\nMost rules execute only over the last few minutes of data, so running rules on each local server is often a valid strategy. In that case, no further setup is necessary.\nHowever, sometimes it's useful to be able to evaluate rules against the global metric backend, for example, when all data for a rule is not co-located on a given Prometheus instance. For these cases, Managed Service for Prometheus also provides a rule-evaluator component.\n**Note:** You can create Cloud Monitoring alerting policies based on PromQL queries and Prometheus alert rules. For more information, see [Alerting policies with PromQL](/monitoring/promql/promql-in-alerting) .\n## Before you begin\nThis section describes the configuration needed for the tasks described in this document.\n### Configure your environment\nTo avoid repeatedly entering your project ID or cluster name, perform the following configuration:\n- Configure the command-line tools as follows:- Configure the gcloud CLI to refer to the ID of your Google Cloud project:```\ngcloud config set project PROJECT_ID\n```\n- Configure the `kubectl` CLI to use your cluster:```\nkubectl config set-cluster CLUSTER_NAME\n```\nFor more information about these tools, see the following:- [gcloud CLI overview](/sdk/gcloud) \n- [kubectl commands](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands) \n### Set up a namespace\nCreate the `` Kubernetes namespace for resources you create as part of the example application:\n```\nkubectl create ns NAMESPACE_NAME\n```\n### Verify service account credentials\n**You can skip this section if your Kubernetes cluster hasWorkload Identity enabled.**\nWhen running on GKE, Managed Service for Prometheus automatically retrieves credentials from the environment based on the Compute Engine default service account. The default service account has the necessary permissions, `monitoring.metricWriter` and `monitoring.viewer` , by default. If you don't use Workload Identity, and you have previously removed either of those roles from the default node service account, you will have to [re-add those missing permissions](/stackdriver/docs/managed-prometheus/troubleshooting#perm-node-svcacct) before continuing.\nIf you are not running on GKE, see [Provide credentials explicitly](#explicit-credentials) .\n### Configure a service account for Workload Identity\n**You can skip this section if your Kubernetes cluster does not haveWorkload Identity enabled.**\nManaged Service for Prometheus captures metric data by using the Cloud Monitoring API. If your cluster is using Workload Identity, you must grant your Kubernetes service account permission to the Monitoring API. This section describes the following:\n- Creating a dedicated [Google Cloud service account](/iam/docs/service-accounts) ,`gmp-test-sa`.\n- Binding the Google Cloud service account to the default [Kubernetesservice account](https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/) in a test namespace,``.\n- Granting the necessary permission to the Google Cloud service account.This step appears in several places in the Managed Service for Prometheus documentation. If you have already performed this step as part of a prior task, then you don't need to repeat it. Skip ahead to [Authorize theservice account](#authorize-sa) .\nThe following command sequence creates the `gmp-test-sa` service account and binds it to the default Kubernetes service account in the `` namespace:\n```\ngcloud config set project PROJECT_ID \\\n&&\ngcloud iam service-accounts create gmp-test-sa \\\n&&\ngcloud iam service-accounts add-iam-policy-binding \\\n --role roles/iam.workloadIdentityUser \\\n --member \"serviceAccount:PROJECT_ID.svc.id.goog[NAMESPACE_NAME/default]\" \\\n gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n&&\nkubectl annotate serviceaccount \\\n --namespace NAMESPACE_NAME \\\n default \\\n iam.gke.io/gcp-service-account=gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com\n```\nIf you are using a different GKE namespace or service account, adjust the commands appropriately.\nGroups of related permissions are collected into , and you grant the roles to a principal, in this example, the Google Cloud service account. For more information about Monitoring roles, see [Access control](/monitoring/access-control) .\nThe following command grants the Google Cloud service account, `gmp-test-sa` , the Monitoring API roles it needs to read and write metric data.\nIf you have already granted the Google Cloud service account a specific role as part of prior task, then you don't need to do it again.```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/monitoring.viewer \\\n&& \\\ngcloud projects add-iam-policy-binding PROJECT_ID\\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/monitoring.metricWriter\n```\nIf you are having trouble getting Workload Identity to work, see the documentation for [verifying your Workload Identity setup](/kubernetes-engine/docs/how-to/workload-identity#verify_the_setup) and the [Workload Identity troubleshooting guide](/kubernetes-engine/docs/troubleshooting/troubleshooting-security#pod_cant_authenticate_to) .\nAs typos and partial copy-pastes are the most common sources of errors when configuring Workload Identity, we **strongly** recommend using the editable variables and clickable copy-paste icons embedded in the code samples in these instructions.\nThe example described in this document binds the Google Cloud service account to the default Kubernetes service account and gives the Google Cloud service account all necessary permissions to use the Monitoring API.\nIn a production environment, you might want to use a finer-grained approach, with a service account for each component, each with minimal permissions. For more information on configuring service accounts for workload-identity management, see [Using Workload Identity](/kubernetes-engine/docs/how-to/workload-identity) .\n## Deploy the standalone rule evaluator\nThe Managed Service for Prometheus rule evaluator evaluates Prometheus alerting and recording rules against the Managed Service for Prometheus [HTTP API](/stackdriver/docs/managed-prometheus/query-api-ui#api-prometheus) and writes the results back to Monarch. It accepts the same configuration-file format and rule-file format as Prometheus. The flags are mostly identical, as well.\n- Create an example deployment of the rule evaluator that is pre-configured to evaluate an alerting and a recording rule:```\nkubectl apply -n NAMESPACE_NAME -f https://raw.githubusercontent.com/GoogleCloudPlatform/prometheus-engine/v0.8.2/manifests/rule-evaluator.yaml\n```\n- Verify that the pods for the rule-evaluator deployed successfully:```\nkubectl -n NAMESPACE_NAME get pod\n```If the deployment was successful, then you see output similar to the following:```\nNAME        READY STATUS RESTARTS AGE\n...\nrule-evaluator-64475b696c-95z29 2/2  Running 0   1m\n```\nAfter you verify that the rule-evaluator deployed successfully, you can make adjustments to the installed manifests to do the following:\n- Add your custom rules files.\n- Configure the rule-evaluator to send alerts to a self-deployed Prometheus [Alertmanager](https://prometheus.io/docs/alerting/latest/alertmanager/) by using the [alertmanager_config](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config) field of the configuration file.\nIf your Alertmanager is located in a different cluster than your rule-evaluator, then you might need to set up an [Endpoints resource](https://kubernetes.io/docs/concepts/services-networking/service/#services-without-selectors) . For example, if your OperatorConfig specifies that Alertmanager endpoints can be found in Endpoints object `ns=alertmanager/name=alertmanager` , then you can manually or programmatically create this object yourself and populate it with reachable IPs from the other cluster.\n### Provide credentials explicitly\nWhen running on GKE, the rule-evaluator automatically retrieves credentials from the environment based on the node's service account or the Workload Identity setup. In non-GKE Kubernetes clusters, credentials must be explicitly provided to the rule-evaluator by using flags or the `GOOGLE_APPLICATION_CREDENTIALS` environment variable.\n- Set the context to your target project:```\ngcloud config set project PROJECT_ID\n```\n- Create a service account:```\ngcloud iam service-accounts create gmp-test-sa\n```This step creates the service account that you might have already created in the [Workload Identity instructions](#gmp-wli-svcacct) .\n- Grant the required permissions to the service account:```\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/monitoring.viewer \\\n&& \\\ngcloud projects add-iam-policy-binding PROJECT_ID\\\n --member=serviceAccount:gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com \\\n --role=roles/monitoring.metricWriter\n```\n- Create and download a key for the service account:```\ngcloud iam service-accounts keys create gmp-test-sa-key.json \\\n --iam-account=gmp-test-sa@PROJECT_ID.iam.gserviceaccount.com\n```\n- Add the key file as a secret to your non-GKE cluster:```\nkubectl -n NAMESPACE_NAME create secret generic gmp-test-sa \\\n --from-file=key.json=gmp-test-sa-key.json\n```\n- Open the rule-evaluator Deployment resource for editing:```\nkubectl -n NAMESPACE_NAME edit deploy rule-evaluator\n```- Add the text shown in bold to the resource:```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n namespace: NAMESPACE_NAME\n name: rule-evaluator\nspec:\n template\n containers:\n - name: evaluator\n  args:\n  - --query.credentials-file=/gmp/key.json\n  - --export.credentials-file=/gmp/key.json\n...\n  volumeMounts:\n  - name: gmp-sa\n  mountPath: /gmp\n  readOnly: true\n...\n volumes:\n - name: gmp-sa\n  secret:\n  secretName: gmp-test-sa\n...\n```\n- Save the file and close the editor. After the change is applied, the pods are re-created and start authenticating to the metric backend with the given service account.\nAlternatively, instead of using the flags set in this example, you can set the key-file path by using the`GOOGLE_APPLICATION_CREDENTIALS`environment variable.\n### Multi-project and global rule evaluation\nWe recommend that you run one instance of the rule evaluator in each Google Cloud project and region rather than running one instance that evaluates against many projects and regions. However, we do support multi-project rule evaluation for scenarios that require it.When deployed on Google Kubernetes Engine, the rule evaluator uses the Google Cloud project associated with the cluster, which it automatically detects. To evaluate rules that span projects, you can override the queried project by using the `--query.project-id` flag and specifying a project with a multi-project metrics scope. If your metrics scope contains all your projects, then your rules evaluate globally. For more information, see [Metrics scopes](/monitoring/settings#concept-scope) .You must also update the permissions of the service account used by the rule evaluator so the service account can read from the scoping project and write to all monitored projects in the metrics scope.\n### Preserve labels when writing rules\nFor data the evaluator writes back to Managed Service for Prometheus, the evaluator supports the same `--export.*` flags and `external_labels` -based configuration as the Managed Service for Prometheus server binary. We strongly recommend that you write rules so that the `project_id` , `location` , `cluster` , and `namespace` labels are preserved appropriately for their aggregation level, otherwise query performance might decline and you might encounter cardinality limits.The `project_id` or `location` labels are mandatory. If these labels are missing, then the values in rule-evaluation results are set based on the configuration of the rule evaluator. Missing `cluster` or `namespace` labels are not given values.\n### High-availability deployments\nThe rule evaluator can run in a highly available setup by following the [same approach](/stackdriver/docs/managed-prometheus/setup-unmanaged#ha-collection) as documented for the Prometheus server.\n### Alerting using Cloud Monitoring metrics\nYou can configure the rule evaluator to alert on [Google Cloud system metrics](/monitoring/api/metrics_gcp) using PromQL. For instructions on how to create a valid query, see [PromQL for Cloud Monitoringmetrics](/stackdriver/docs/managed-prometheus/promql) .", "guide": "Google Cloud Observability"}