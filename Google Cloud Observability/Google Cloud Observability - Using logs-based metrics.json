{"title": "Google Cloud Observability - Using logs-based metrics", "url": "https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/sli-metrics/logs-based-metrics", "abstract": "# Google Cloud Observability - Using logs-based metrics\nThis page covers the basics of emitting logs to create availability and latency SLIs. It also provides implementation examples of how to define SLOs using logs-based metrics.\nUsing data elements in log entries to create service-level indicators is an easy way to take advantage of existing log payloads. Otherwise, it may be possible to add logging to an existing service, which may be easier than creating metric instrumentation.\n", "content": "## Logs and metrics\nLogs collect records called that describe specific events that take place in computer systems. Logs are written by code, by the platform services the code is running on (for example, Dataflow), and the infrastructure the platform depends on (for example, Compute Engine instances).\nBecause logs in modern systems descend from\u2014and sometimes still are\u2014text files written to disk, a log entry is analogous to a line in a log file and can be considered the quantum unit of logging.\nA log entry minimally consists of two things:\n- A timestamp that indicates either when the event took place or when it was ingested into the logging system\n- The text payload, either as unstructured text data or structured data, most commonly in JSON.\nLogs can also carry associated metadata, especially when they're ingested into Cloud Logging. Such metadata might include the resource that's writing the log, the log name, and a severity for each entry.\n### Logs\nLogs are used for two main purposes:\n- logs describe specific events that take place within the system. You can use event logs to output messages that assure users that things are working well (\"task succeeded\") or to provide information when things fail (\"received exception from server\").\n- logs describe the details of every transaction processed by a system or component. For example, a load balancer logs every request that it receives, whether the request is successfully completed or not, and records additional information like the requested URL, HTTP response code, and possibly information like which backend was used to serve the request.\n### Metrics\nUnlike logs, metrics usually don't describe specific events. More commonly, metrics are used to represent the state or health of a system over time. A metric is made up of a series of data points that measure something about your system; each data point includes a timestamp and a numeric value.\nMetrics can also have metadata associated with them; the series of data points, referred to as a , might include information like the metric name, a description, and often labels that specify which resource is writing the data. For information on the Monitoring metric model, see [Metrics, time series, and resources](/monitoring/api/v3/metrics) .\n### Logs-based metrics\nLogs-based metrics are metrics created from log entries by extracting information from log entries and transforming it into time-series data. Cloud Logging provides mechanisms for creating two kinds of metrics from log entries:\n- , which count the number of log entries that match a particular filter. You can use a counter metric to determine, for example, the number of requests or errors recorded in the log.\n- , which use regular expressions to parse the payload in each log entry to extract numeric values as a distribution.\nFor more information on logs-based metrics in Cloud Logging, see [Using logs-based metrics](/logging/docs/logs-based-metrics) .\n### Using log-based metrics as SLIs\nLogs-based metrics let you extract data from logs in a form you can use for building SLIs in Monitoring:\n- You can use logs-based counter metrics to express a request-based availability SLI.\n- You can use a logs-based distribution metric to express a request-based latency SLI.\n### Sample log entries\nThe Stack Doctor application is an example of a service instrumented to emit log messages that contain information about all requests, errors, and latency made to the service. The code for the service is available in the [stack-doctor GitHub repository](https://github.com/yuriatgoogle/stack-doctor/blob/master/log-based-metrics/slis/slis.js) .\nThe service generates Cloud Logging log entries in the `projects/stack-doctor/logs/bunyan_log` log. The log entry for each type of event includes a different `message` value. The log entries for different types of events look like the following:\n- On every request:```\n{\u00a0 \"insertId\": \"..........iTRVT5MOK2VOsVe31bzrTD\",\u00a0 \"jsonPayload\": {\u00a0 \u00a0 \"pid\": 81846,\u00a0 \u00a0 \"time\": \"Mon Aug 31 2020 20:30:49 GMT-0700 (Pacific Daylight Time)\",\u00a0 \u00a0 \"hostname\": \"<hostname>\",\u00a0 \u00a0 \"level\": 30,\u00a0 \u00a0 \"message\": \"request made\",\u00a0 \u00a0 \"v\": 0,\u00a0 \u00a0 \"name\": \"sli-log\"\u00a0 },\u00a0 \u00a0 \"resource\": {\u00a0 \u00a0 \"type\": \"global\",\u00a0 \u00a0 \"labels\": {\u00a0 \u00a0 \u00a0 \"project_id\": \"stack-doctor\"\u00a0 \u00a0 }\u00a0 },\u00a0 \"timestamp\": \"2020-09-01T03:30:49.263999938Z\",\u00a0 \"severity\": \"INFO\",\u00a0 \"logName\": \"projects/stack-doctor/logs/bunyan_log\",\u00a0 \"receiveTimestamp\": \"2020-09-01T03:30:50.003471183Z\"}\n```\n- On successful requests:```\n{\u00a0 \"insertId\": \"..........qTRVT5MOK2VOsVe31bzrTD\",\u00a0 \"jsonPayload\": {\u00a0 \u00a0 \"name\": \"sli-log\",\u00a0 \u00a0 \"v\": 0,\u00a0 \u00a0 \"pid\": 81846,\u00a0 \u00a0 \"level\": 30,\u00a0 \u00a0 \"hostname\": \"<hostname>\",\u00a0 \u00a0 \"time\": \"Mon Aug 31 2020 20:30:49 GMT-0700 (Pacific Daylight Time)\",\u00a0 \u00a0 \"message\": \"success!\"\u00a0 },\u00a0 \"resource\": {\u00a0 \u00a0 \"type\": \"global\",\u00a0 \u00a0 \"labels\": {\u00a0 \u00a0 \u00a0 \"project_id\": \"stack-doctor\"\u00a0 \u00a0 }\u00a0 },\u00a0 \"timestamp\": \"2020-09-01T03:30:49.874000072Z\",\u00a0 \"severity\": \"INFO\",\u00a0 \"logName\": \"projects/stack-doctor/logs/bunyan_log\",\u00a0 \"receiveTimestamp\": \"2020-09-01T03:30:50.201547371Z\"}\n```\n- On completed requests:```\n{\u00a0 \"insertId\": \"..........mTRVT5MOK2VOsVe31bzrTD\",\u00a0 \"jsonPayload\": {\u00a0 \u00a0 \"time\": \"Mon Aug 31 2020 20:30:49 GMT-0700 (Pacific Daylight Time)\",\u00a0 \u00a0 \"level\": 30,\u00a0 \u00a0 \"name\": \"sli-log\",\u00a0 \u00a0 \"message\": \"slept for 606 ms\",\u00a0 \u00a0 \"hostname\": \"<hostname>\",\u00a0 \u00a0 \"pid\": 81846,\u00a0 \u00a0 \"v\": 0\u00a0 },\u00a0 \"resource\": {\u00a0 \u00a0 \"type\": \"global\",\u00a0 \u00a0 \"labels\": {\u00a0 \u00a0 \u00a0 \"project_id\": \"stack-doctor\"\u00a0 \u00a0 }\u00a0 },\u00a0 \"timestamp\": \"2020-09-01T03:30:49.874000072Z\",\u00a0 \"severity\": \"INFO\",\u00a0 \"logName\": \"projects/stack-doctor/logs/bunyan_log\",\u00a0 \"receiveTimestamp\": \"2020-09-01T03:30:50.201547371Z\"}\n```\n- On error:```\n{\u00a0 \"insertId\": \"..........DTRVT5MOK2VOsVe31bzrTD\",\u00a0 \"jsonPayload\": {\u00a0 \u00a0 \"hostname\": \"<hostname>\",\u00a0 \u00a0 \"level\": 50,\u00a0 \u00a0 \"pid\": 81846,\u00a0 \u00a0 \"message\": \"failure!\",\u00a0 \u00a0 \"name\": \"sli-log\",\u00a0 \u00a0 \"time\": \"Mon Aug 31 2020 20:30:44 GMT-0700 (Pacific Daylight Time)\",\u00a0 \u00a0 \"v\": 0\u00a0 },\u00a0 \"resource\": {\u00a0 \u00a0 \"type\": \"global\",\u00a0 \u00a0 \"labels\": {\u00a0 \u00a0 \u00a0 \"project_id\": \"stack-doctor\"\u00a0 \u00a0 }\u00a0 },\u00a0 \"timestamp\": \"2020-09-01T03:30:44.414999961Z\",\u00a0 \"severity\": \"ERROR\",\u00a0 \"logName\": \"projects/stack-doctor/logs/bunyan_log\",\u00a0 \"receiveTimestamp\": \"2020-09-01T03:30:46.182157077Z\"}\n```\nBased on these entries, you can create logs-based metrics that count all requests, count errors, and track request latency. You can then use the logs-based metrics to create availability and latency SLIs.\n## Creating logs-based metrics for SLIs.\nBefore you can create SLIs on logs-based metrics, you must create the logs-based metrics.\n- For availability SLIs on request and error counts, use logs-based counter metrics.\n- For latency SLIs, use logs-based distribution metrics.\nAfter you create the your logs-based metrics, you can find them in Monitoring by searching for them in Metrics Explorer. In Monitoring, logs-based metrics have the prefix `logging.googleapis.com/user` .\n**Caution:** The following examples create logs-based metrics against the `global` monitored resource, which is generally inadvisable. For a real deployment, take care to emit logs against an existing monitored resource.\n### Metrics for availability SLIs\nYou express a request-based availability SLI in the Cloud Monitoring API by using the [TimeSeriesRatio](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#TimeSeriesRatio) structure to set up a ratio of \"good\" or \"bad\" requests to total requests. This ratio is used in the `goodTotalRatio` field of a [RequestBasedSli](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#RequestBasedSli) structure.\nYou must create logs-based counter metrics that can be used to construct this ratio. You must create at least two of the following:\n- A metric that counts total events; use this metric in the ratio's `totalServiceFilter` .For the \"stack-doctor\" example, you can create a logs-based metric that counts log entries in which the message string \"request made\" appears.\n- A metric that counts \"bad\" events, use this metric in the ratio's `badServiceFilter` .For the \"stack-doctor\" example, you can create a logs-based metric that counts log entries in which the message string \"failure!\" appears.\n- A metric that counts \"good\" events, use this metric in the ratio's `goodServiceFilter` .For the \"stack-doctor\" example, you can create a logs-based metric that counts log entries in which the message string \"success!\" appears.\nThe SLI described for this example is based on a metric for total requests named `log_based_total_requests` , and a metric for errors named `log_based_errors` .\nYou can create logs-based metrics by using the Google Cloud console, the Cloud Logging API or the Google Cloud CLI. To create logs-based counter metrics by using the Google Cloud console, you can use the following procedure:\n- In the navigation panel of the Google Cloud console, select **Logging** , and then select **Log-based Metrics** : [Go to Log-based Metrics](https://console.cloud.google.com/logs/metrics) The logs-based metrics page shows a table of user-defined metrics and a table of system-defined metrics.\n- Click **Create Metric** , located above the table of user-defined metrics.\n- In the **Metric type** pane, select **Counter** .\n- In the **Details** pane, give your new metric a name. For the \"stack-doctor\" example, enter `log_based_total_requests` or `log_based_errors` .You can ignore the other fields for this example.\n- In the **Filter selection** panel, create a query that retrieves only the log entries that you want to count in your metric.For the \"stack-doctor\" example, the query for `log_based_total_requests` might include the following:```\nresource.type=\"global\"\nlogName=\"projects/stack-doctor/logs/bunyan_log\"\njsonPayload.message=\"request made\"\n```The query for `logs_based_errors` changes the message string:```\nresource.type=\"global\"\nlogName=\"projects/stack-doctor/logs/bunyan_log\"\njsonPayload.message=\"failure!\"\n```\n- Click **Preview logs** to check your filter, and adjust it if necessary.\n- Ignore the **Labels** pane for this example.\n- Click **Create Metric** to finish the procedure.\nFor more information on creating logs-based counter metrics, see [Creating a counter metric](/logging/docs/logs-based-metrics/counter-metrics#creating_a_counter_metric) .\n### Metrics for latency SLIs\nYou express a request-based latency SLI in the Cloud Monitoring API by using a [DistributionCut](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#DistributionCut) structure, which is used in the `distributionCut` field of a [RequestBasedSli](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#RequestBasedSli) structure. You must create a logs-based distribution metric to create a latency SLI. This example create a logs-based distribution metric named `log_based_latency.`\nYou can create logs-based metrics by using the Google Cloud console, the Cloud Logging API or the Google Cloud CLI. To create logs-based distribution metrics by using the Google Cloud console, you can use the following procedure:\n- In the navigation panel of the Google Cloud console, select **Logging** , and then select **Log-based Metrics** : [Go to Log-based Metrics](https://console.cloud.google.com/logs/metrics) The logs-based metrics page shows a table of user-defined metrics and a table of system-defined metrics.\n- Click **Create Metric** , located above the table of user-defined metrics.\n- In the **Metric type** pane, select **Distribution** .\n- In the **Details** pane, give your new metric a name. For the \"stack-doctor\" example, enter `log_based_latency` .You can ignore the other fields for this example.\n- In the **Filter selection** panel, create a query that retrieves only the log entries that you want to count in your metric.For the \"stack-doctor\" example, the query for `log_based_latency` might include the following:```\nresource.type=\"global\"\nlogName=\"projects/stack-doctor/logs/bunyan_log\"\njsonPayload.message=\"slept for\"\n```Specify the following fields for the filter query:- **Field name** :`json.message`\n- **Regular expression** : `\\s(\\d*)\\s`The message string for completed requests has the form \"slept for ms\". The regular expression extracts the latency value from the string.\n- Ignore the **Labels** pane for this example.\n- Click **Create Metric** to finish the procedure.\nFor more information on creating logs-based distribution metrics, see [Creating Distribution metrics](/logging/docs/logs-based-metrics/distribution-metrics) .\n## Availability SLIs\nIn Cloud Monitoring, you express a request-based availability SLI by using a [TimeSeriesRatio](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#TimeSeriesRatio) structure. The following example shows an SLO that uses the `log_based_total_requests` and `log_based_errors` metrics in the ratio. This SLO expects that the ratio of \"good\"-to-total requests is at least 98% over a rolling 24-hour period:\n```\n{\u00a0\"serviceLevelIndicator\": {\u00a0 \u00a0\"requestBased\": {\u00a0 \u00a0 \u00a0\"goodTotalRatio\": {\u00a0 \u00a0 \u00a0 \u00a0\"totalServiceFilter\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"metric.type=\\\"logging.googleapis.com/user/log_based_total_requests\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resource.type=\\\"global\\\"\",\u00a0 \u00a0 \u00a0 \u00a0\"badServiceFilter\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"metric.type=\\\"logging.googleapis.com/user/log_based_errors\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resource.type=\\\"global\\\"\"\u00a0 \u00a0 \u00a0}\u00a0 \u00a0}\u00a0},\u00a0\"goal\": 0.98,\u00a0\"rollingPeriod\": \"86400s\",\u00a0\"displayName\": \"Log-Based Availability\"}\n```\n## Latency SLIs\nIn Cloud Monitoring, you express a request-based latency SLI by using a [DistributionCut](/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives#DistributionCut) structure. The following example shows an SLO that uses the `log_based_latency` metric and expects that 98% of requests are under 500 ms over a rolling 24-hour period:\n```\n{\u00a0 \"serviceLevelIndicator\": {\u00a0 \u00a0 \"requestBased\": {\u00a0 \u00a0 \u00a0 \"distributionCut\": {\u00a0 \u00a0 \u00a0 \u00a0 \"distributionFilter\":\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"metric.type=\\\"logging.googleapis.com/user/log_based_latency\\\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 resource.type=\\\"global\\\"\",\u00a0 \u00a0 \u00a0 \u00a0 \"range\": {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"min\": 0,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"max\": 500\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 },\u00a0 \"goal\": 0.98,\u00a0 \"rollingPeriod\": \"86400s\",\u00a0 \"displayName\": \"98% requests under 500 ms\"}\n```\n## Additional resources\n- [Can you alert on logs in Stackdriver? | by Yuri Grinshteyn | Google Cloud - Community](https://medium.com/google-cloud/can-you-alert-on-logs-in-stackdriver-7dfb07f495c0) \n- [Creating charts and alerts | Cloud Logging](/logging/docs/logs-based-metrics/charts-and-alerts) \n- [Extracting value from your logs with logs-based-metrics](https://cloud.google.com/blog/products/gcp/extracting-value-from-your-logs-with-stackdriver-logs-based-metrics)", "guide": "Google Cloud Observability"}