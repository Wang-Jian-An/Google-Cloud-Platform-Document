{"title": "Google Cloud Observability - Varnish HTTP Cache", "url": "https://cloud.google.com/stackdriver/docs/solutions/agents/ops-agent/third-party/varnish", "abstract": "# Google Cloud Observability - Varnish HTTP Cache\nThe Varnish integration collects cache and session metrics. It monitors the number of objects entering and exiting the cache, as well as the number of sessions and backend connections. The integration also collects Varnish logs and parses them into a standardized JSON payload.\nFor more information about Varnish, see the [VarnishHTTP Cache documentation](https://varnish-cache.org/) .\n", "content": "## Prerequisites\nTo collect Varnish telemetry, you must [install the Ops Agent](/stackdriver/docs/solutions/agents/ops-agent/install-index) :\n- For metrics, install version 2.15.0 or higher.\n- For logs, install version 2.16.0 or higher.\nThis integration supports Varnish versions 6.x and 7.0.x.\n## Configure your Varnish instance\nThe Varnish logging processor processes logs using [varnishncsa](https://varnish-cache.org/docs/6.0/reference/varnishncsa.html) . Varnish can enable varnishncsa logging by following this [guide](https://docs.varnish-software.com/tutorials/enabling-logging-with-varnishncsa/) , depending on the operating system.\nBy default, logs are written to `/var/log/varnish/varnishncsa.log` . If you choose another destination, you must update the receiver configuration. Logs are expected to be in the default format, and a log rotation should be set up.\n## Configure the Ops Agent for Varnish\nFollowing the guide to [configure the OpsAgent](/stackdriver/docs/solutions/agents/ops-agent/configuration#file-location) , add the required elements to collect telemetry from Varnish instances, and [restart the agent](/stackdriver/docs/solutions/agents/ops-agent/installation#restart) .\n### Example configuration\nThe following command creates the configuration to collect and ingest telemetry for Varnish and restarts the Ops Agent on Linux.\n```\n# Configures Ops Agent to collect telemetry from the app and restart Ops Agent.set -e# Create a back up of the existing file so existing configurations are not lost.sudo cp /etc/google-cloud-ops-agent/config.yaml /etc/google-cloud-ops-agent/config.yaml.bak# Configure the Ops Agent.sudo tee /etc/google-cloud-ops-agent/config.yaml > /dev/null << EOFmetrics:\u00a0 receivers:\u00a0 \u00a0 varnish:\u00a0 \u00a0 \u00a0 type: varnish\u00a0 service:\u00a0 \u00a0 pipelines:\u00a0 \u00a0 \u00a0 varnish:\u00a0 \u00a0 \u00a0 \u00a0 receivers:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - varnishlogging:\u00a0 receivers:\u00a0 \u00a0 varnish:\u00a0 \u00a0 \u00a0 type: varnish\u00a0 service:\u00a0 \u00a0 pipelines:\u00a0 \u00a0 \u00a0 varnish:\u00a0 \u00a0 \u00a0 \u00a0 receivers:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - varnishEOFsudo service google-cloud-ops-agent restartsleep 30\n```\n### Configure logs collection\nTo ingest logs from Varnish, you must create receivers for the logs that Varnish produces and then create a pipeline for the new receivers.\nTo configure a receiver for your `varnish` logs, specify the following fields:\n| Field      | Default       | Description                                                                    |\n|:--------------------------|:-----------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| exclude_paths    | nan        | A list of filesystem path patterns to exclude from the set matched by include_paths.                                                  |\n| include_paths    | [/var/log/varnish/varnishncsa.log] | A varnishncsa default log path to read by tailing each file.                                                        |\n| record_log_file_path  | false        | If set to true, then the path to the specific file from which the log record was obtained appears in the output log entry as the value of the agent.googleapis.com/log_file_path label. When using a wildcard, only the path of the file from which the record was obtained is recorded. |\n| type      | nan        | This value must be varnish.                                                                |\n| wildcard_refresh_interval | 60s        | The interval at which wildcard file paths in include_paths are refreshed. Given as a time duration, for example, 30s or 2m. This property might be useful under high logging throughputs where log files are rotated faster than the default interval.         |\nThe `logName` is derived from the receiver IDs specified in the configuration. Detailed fields inside the [LogEntry](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry) are as follows.\n`varnish` logs contain the following fields in the `LogEntry` :\n| Field   | Type     | Description       |\n|:-----------------|:---------------------|:---------------------------------------|\n| httpRequest  | object    | See HttpRequest      |\n| jsonPayload.host | string    | Contents of the Host header   |\n| jsonPayload.user | string    | Authenticated username for the request |\n| severity   | string (LogSeverity) | Log entry level (translated).   |\n### Configure metrics collection\nTo ingest metrics from Varnish, you must create a receiver for the metrics that Varnish produces and then create a pipeline for the new receiver.\nThis receiver does not support the use of multiple instances in the configuration, for example, to monitor multiple endpoints. All such instances write to the same time series, and Cloud Monitoring has no way to distinguish among them.\nTo configure a receiver for your `varnish` metrics, specify the following fields:\n| Field    | Default | Description                             |\n|:--------------------|:----------|:------------------------------------------------------------------------------------------------------------------------------|\n| cache_dir   | nan  | This specifies the cache dir instance name to use when collecting metrics. If not specified, defaults to the host.   |\n| collection_interval | 60s  | A time.Duration value, such as 30s or 5m.                      |\n| exec_dir   | nan  | The directory where the varnishadm and varnishstat executables are located. If not provided, the user's PATH setting is used. |\n| type    | nan  | This value must be varnish.                         |\nThe following table provides the list of metrics that the Ops Agent collects from the Varnish instance.\n| ('Metric\\xa0type', 'Kind,\\xa0Type Monitored\\xa0resources') | ('Metric\\xa0type', 'Labels')        |\n|:-------------------------------------------------------------|:-----------------------------------------------------------|\n| workload.googleapis.com/varnish.backend.connection.count  | workload.googleapis.com/varnish.backend.connection.count |\n| CUMULATIVE,\u00a0INT64 gce_instance        | kind              |\n| workload.googleapis.com/varnish.backend.request.count  | workload.googleapis.com/varnish.backend.request.count  |\n| CUMULATIVE,\u00a0INT64 gce_instance        | nan              |\n| workload.googleapis.com/varnish.cache.operation.count  | workload.googleapis.com/varnish.cache.operation.count  |\n| CUMULATIVE,\u00a0INT64 gce_instance        | operation             |\n| workload.googleapis.com/varnish.client.request.count   | workload.googleapis.com/varnish.client.request.count  |\n| CUMULATIVE,\u00a0INT64 gce_instance        | state              |\n| workload.googleapis.com/varnish.client.request.error.count | workload.googleapis.com/varnish.client.request.error.count |\n| CUMULATIVE,\u00a0INT64 gce_instance        | status_code            |\n| workload.googleapis.com/varnish.object.count     | workload.googleapis.com/varnish.object.count    |\n| GAUGE,\u00a0INT64 gce_instance         | nan              |\n| workload.googleapis.com/varnish.object.expired    | workload.googleapis.com/varnish.object.expired    |\n| CUMULATIVE,\u00a0INT64 gce_instance        | nan              |\n| workload.googleapis.com/varnish.object.moved     | workload.googleapis.com/varnish.object.moved    |\n| CUMULATIVE,\u00a0INT64 gce_instance        | nan              |\n| workload.googleapis.com/varnish.object.nuked     | workload.googleapis.com/varnish.object.nuked    |\n| CUMULATIVE,\u00a0INT64 gce_instance        | nan              |\n| workload.googleapis.com/varnish.session.count    | workload.googleapis.com/varnish.session.count    |\n| CUMULATIVE,\u00a0INT64 gce_instance        | kind              |\n| workload.googleapis.com/varnish.thread.operation.count  | workload.googleapis.com/varnish.thread.operation.count  |\n| CUMULATIVE,\u00a0INT64 gce_instance        | operation             |\n## Verify the configuration\nThis section describes how to verify that you correctly configured the Varnish receiver. It might take one or two minutes for the Ops Agent to begin collecting telemetry.\nTo verify that Varnish logs are being sent to Cloud Logging, do the following:\n- In the navigation panel of the Google Cloud console, select **Logging** , and then select **Logs Explorer** : [Go to Logs Explorer](https://console.cloud.google.com/logs/query) \n- Enter the following query in the editor, and then click **Run query** :```\nresource.type=\"gce_instance\"\nlog_id(\"varnish\")\n```To verify that Varnish metrics are being sent to Cloud Monitoring, do the following:\n- In the navigation panel of the Google Cloud console, select **Monitoring** , and then select **Metrics explorer** : [Go to Metrics explorer](https://console.cloud.google.com/monitoring/metrics-explorer) \n- In the toolbar of the query-builder pane, select the button whose name is either **MQL** or **PromQL** .\n- Verify that **MQL** is selected in the **Language** toggle. The language toggle is in the same toolbar that lets you format your query.\n- Enter the following query in the editor, and then click **Run query** :```\nfetch gce_instance\n| metric 'workload.googleapis.com/varnish.backend.connection.count'\n| every 1m\n```\n## View dashboard\nTo view your Varnish metrics, you must have a chart or dashboard configured. The Varnish integration includes one or more dashboards for you. Any dashboards are automatically installed after you configure the integration and the Ops Agent has begun collecting metric data.\nYou can also view static previews of dashboards without installing the integration.\nTo view an installed dashboard, do the following:\n- In the navigation panel of the Google Cloud console, select **Monitoring** , and then select **Dashboards** : [Go to Dashboards](https://console.cloud.google.com/monitoring/dashboards) \n- Select the **Dashboard List** tab, and then choose the **Integrations** category.\n- Click the name of the dashboard you want to view.If you have configured an integration but the dashboard has not been installed, then check that the Ops Agent is running. When there is no metric data for a chart in the dashboard, installation of the dashboard fails. After the Ops Agent begins collecting metrics, the dashboard is installed for you.\nTo view a static preview of the dashboard, do the following:\n- In the navigation panel of the Google Cloud console, select **Monitoring** , and then select **Integrations** : [Go to Integrations](https://console.cloud.google.com/monitoring/integrations) \n- Click the **Compute Engine** deployment-platform filter.\n- Locate the entry for     Varnish   and click **View Details** .\n- Select the **Dashboards** tab to see a static preview. If the   dashboard is installed, then you can navigate to it by clicking **View dashboard** .For more information about dashboards in Cloud Monitoring, see [Dashboards and charts](/monitoring/dashboards) .\nFor more information about using the **Integrations** page, see [Manage integrations](/monitoring/agent/integrations) .\n## Install alerting policies\nAlerting policies instruct Cloud Monitoring to notify you when specified conditions occur. The Varnish integration includes one or more alerting policies for you to use. You can view and install these alerting policies from the **Integrations** page in Monitoring.\nTo view the descriptions of available alerting policies and install them, do the following:\n- In the navigation panel of the Google Cloud console, select **Monitoring** , and then select **Integrations** : [Go to Integrations](https://console.cloud.google.com/monitoring/integrations) \n- Locate the entry for     Varnish   and click **View Details** .\n- Select the **Alerts** tab. This tab provides descriptions of   available alerting policies and provides an interface for installing   them.\n- Install alerting policies. Alerting policies need   to know where to send notifications that the alert has been   triggered, so they require information from you for installation.   To install alerting policies, do the following:- From the list of available alerting policies,    select those that you want to install.\n- In the **Configure notifications** section, select one or    more notification channels. You have the option to disable the    use of notification channels, but if you do, then your alerting    policies fire silently. You can check their status in    Monitoring, but you receive no notifications.For more information about notification channels,    see [Manage    notification channels](/monitoring/support/notification-options) .\n- Click **Create Policies** .\nFor more information about alerting policies in Cloud Monitoring, see [Introduction to alerting](/monitoring/alerts) .\nFor more information about using the **Integrations** page, see [Manage integrations](/monitoring/agent/integrations) .\n## What's next\nFor a walkthrough on how to use Ansible to install the Ops Agent, configure a third-party application, and install a sample dashboard, see the [ Install the Ops Agent to troubleshoot third-party applications](https://www.youtube.com/watch?v=GQgNygd-XJU&t=7s) video.", "guide": "Google Cloud Observability"}