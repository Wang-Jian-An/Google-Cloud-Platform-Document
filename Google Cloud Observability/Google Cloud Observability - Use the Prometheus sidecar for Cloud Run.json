{"title": "Google Cloud Observability - Use the Prometheus sidecar for Cloud Run", "url": "https://cloud.google.com/stackdriver/docs/managed-prometheus/cloudrun-sidecar", "abstract": "# Google Cloud Observability - Use the Prometheus sidecar for Cloud Run\nThe Managed Service for Prometheus sidecar for Cloud Run is the Google-recommended way to get [Prometheus-style monitoring](https://prometheus.io/docs/introduction/overview/) for Cloud Run services. If your Cloud Run service writes [OTLP metrics](https://opentelemetry.io/docs/concepts/signals/metrics/) , then you can use the [OpenTelemetrysidecar](/run/docs/tutorials/custom-metrics-opentelemetry-sidecar) . But for services that write [Prometheusmetrics](https://prometheus.io/docs/concepts/metric_types/) , use the Managed Service for Prometheus sidecar described in this document.\nThis document describes how to do the following:\n- [Add the Managed Service for Prometheus sidecar](#sidecar-intro) to an existing Cloud Run service.\n- [Build a sample app](#run-sample) with the sidecar. You can use the sample app to see how the sidecar works if you don't have an existing Cloud Run service.\nThe sidecar uses [Google Cloud Managed Service for Prometheus](/stackdriver/docs/managed-prometheus) on the server side and a distribution of the OpenTelemetry Collector, custom-built for serverless workloads, on the client side. This custom distribution includes some changes to support Cloud Run. The collector performs a start-up scrape after 10 seconds and performs a shut-down scrape, no matter how short-lived the instance is. For maximum reliability, we recommend that Cloud Run services running the sidecar also use an always-allocated CPU; for more information, see [CPU allocation(services)](/run/docs/configuring/cpu-allocation) . Some scrape attempts might fail if the CPU allocation is throttled due to a low number of queries per second (QPS). An always-allocated CPU remains available.\nThe sidecar relies on the Cloud Run multicontainer (sidecar) feature to run the collector as a sidecar container alongside your workload container. For more information about sidecars in Cloud Run, see [Deploying multiple containers to a service (sidecars)](/run/docs/deploying#sidecars) .\nThe Managed Service for Prometheus sidecar for Cloud Run introduces a new configuration, `RunMonitoring` , a subset of the Kubernetes [PodMonitoring](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/main/doc/api.md#podmonitoring) custom resource. Most users can use the default `RunMonitoring` configuration, but you can also create custom configurations. For more information about the default and custom `RunMonitoring` configurations, see [Add the sidecar to a Cloud Runservice](#sidecar-intro) .\n", "content": "## Before you begin\nThis section describes the setup necessary to use this document.\n### Install and configure the gcloud CLI\nMany of the steps described in this document use the Google Cloud CLI. For information about installing the gcloud CLI, see [Managing Google Cloud CLI components](/sdk/docs/components) .\nWhen invoking `gcloud` commands, you must specify the identifier for your Google Cloud project. You can set a default project for the Google Cloud CLI and eliminate the need to enter it with every command. To set your project as the default, enter the following command:\n```\ngcloud config set project PROJECT_ID\n```\nYou can also set a default region for your Cloud Run service. To set a default region, enter the following command:\n```\ngcloud config set run/region REGION\n```\n### Enable APIs\nYou must enable the following APIs in your Google Cloud project:\n- Cloud Run Admin API:`run.googleapis.com`\n- Artifact Registry API:`artifactregistry.googleapis.com`\n- Cloud Monitoring API:`monitoring.googleapis.com`\n- Cloud Logging API:`logging.googleapis.com`\n- (Optional) If you create a [custom RunMonitoringconfig](#choose-default-or-custom) , then you must enable the Secret Manager API:`secretmanager.googleapis.com`\n- (Optional) If you choose to run the sample app by using Cloud Build, then you must also enable the following APIs:- Cloud Build API:`cloudbuild.googleapis.com`.\n- Identity and Access Management API:`iam.googleapis.com`. For more information, see [Build and run the sampleapp](#build-n-run) .To see the APIs enabled in your project, run the following command:\n```\ngcloud services list\n```\nTo enable an API that isn't enabled, run one of following commands:\n```\ngcloud services enable run.googleapis.com\ngcloud services enable artifactregistry.googleapis.com\ngcloud services enable secretmanager.googleapis.com\ngcloud services enable monitoring.googleapis.com\ngcloud services enable logging.googleapis.com\ngcloud services enable cloudbuild.googleapis.com\ngcloud services enable iam.googleapis.com\n```\n### Service account for Cloud Run\nBy default, Cloud Run jobs and services use the [Compute Engine default service account](/compute/docs/access/service-accounts#default_service_account) , `` `-compute@developer.gserviceaccount.com` . This service account usually has the Identity and Access Management (IAM) roles necessary to write the metrics and logs described in this document:\n- `roles/monitoring.metricWriter`\n- `roles/logging.logWriter`\nIf you create a [custom RunMonitoring config](#choose-default-or-custom) , then your service account must also have the following roles:\n- `roles/secretmanager.admin`\n- `roles/secretmanager.secretAccessor`\nYou can also configure a user-managed service account for Cloud Run. A user-managed service account must also have these roles. For more information about service accounts for Cloud Run, see [Configuring Service Identity](/run/docs/securing/service-identity) .\n## Configure and add the sidecar to a Cloud Run service\nThe Managed Service for Prometheus sidecar for Cloud Run introduces a new configuration, `RunMonitoring` , which is a subset of the Kubernetes [PodMonitoring](https://github.com/GoogleCloudPlatform/prometheus-engine/blob/main/doc/api.md#podmonitoring) custom resource. The `RunMonitoring` configuration uses existing `PodMonitoring` options to support Cloud Run while eliminating some options that are specific to Kubernetes.\nYou can use the default `RunMonitoring` configuration, or you can create a custom configuration. The following sections describe both approaches. You don't need to do both. For more information about using default or custom configurations, select the corresponding tab.### Use the default RunMonitoring configurationIf you don't create a custom `RunMonitoring` configuration, then the sidecar collector synthesizes the following default configuration to scrape metrics from port 8080 at metrics path `/metrics` every 30 seconds:\n```\napiVersion: monitoring.googleapis.com/v1beta\nkind: RunMonitoring\nmetadata:\n name: run-gmp-sidecar\nspec:\n endpoints:\n - port: 8080\n path: /metrics\n interval: 30s\n```\nUsing the default configuration requires no additional setup beyond [adding the sidecar to your Cloud Run service](#add-sidecar) .\n### Add the sidecar to a Cloud Run serviceTo use the sidecar with the default `RunMonitoring` configuration, you need to modify your existing Cloud Run configuration to add the sidecar. To add the sidecar, do the following:- Add a container-dependency annotation that specifies the startup and shutdown order of the containers. In the following example, the sidecar container, named \"collector\", starts after and shuts down before the application container, named \"app\" in the example.\n- Create a container for the collector, named \"collector\" in the following example.\nFor example, add the lines preceded by the `+` (plus) character to your Cloud Run configuration, and then redeploy your service:\n```\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n annotations:\n run.googleapis.com/launch-stage: ALPHA\n run.googleapis.com/cpu-throttling: 'false'\n name: my-cloud-run-service\nspec:\n template:\n metadata:\n  annotations:\n  run.googleapis.com/execution-environment: gen2\n+  run.googleapis.com/container-dependencies: '{\"collector\":[\"app\"]}'\n spec:\n  containers:\n  - image: \"REGION-docker.pkg.dev/PROJECT_ID/run-gmp/sample-app\"\n  name: app\n  startupProbe:\n   httpGet:\n   path: /startup\n   port: 8000\n  livenessProbe:\n   httpGet:\n   path: /liveness\n   port: 8000\n  ports:\n  - containerPort: 8000\n+  - image: \"us-docker.pkg.dev/cloud-ops-agents-artifacts/cloud-run-gmp-sidecar/cloud-run-gmp-sidecar:1.1.0\"\n+  name: collector\n```\nTo redeploy the Cloud Run service with the configuration file `` , run the following command:\n```\ngcloud run services replace run-service.yaml --region=REGION\n```\n### Create a custom RunMonitoring configurationYou can create a `RunMonitoring` configuration for a Cloud Run service if the default configuration is not sufficient. For example, you might create a configuration like the following:\n```\napiVersion: monitoring.googleapis.com/v1beta\nkind: RunMonitoring\nmetadata:\n name: my-custom-cloud-run-job\nspec:\n endpoints:\n - port: 8080\n path: /metrics\n interval: 10s\n metricRelabeling:\n - action: replace\n  sourceLabels:\n  - __address__\n  targetLabel: label_key\n  replacement: label_value\n targetLabels:\n metadata:\n - service\n - revision\n```This configuration does the following:\n- Scrapes metrics from the port 8080 and uses the default metrics path`/metrics`.\n- Uses a 10-second scrape interval.\n- Uses relabelling to add the label`label_key`with the value`label_value`to every metric scraped.\n- Adds the`service`and`revision`metadata labels  to every metric scraped.\nFor information on the available configuration options, see [RunMonitoring spec: configuration options](#run-monitoring-spec) .\nWhen you use a custom `RunMonitoring` configuration, you must perform the following additional configuration:- Enable the Secret Manager API and grant your Cloud Run service account Secret Manager roles. For more information, see [Before you begin](#byb) .\n- [Store the custom configuration as a secret](#write-secret) .\n- [Add the sidecar to a Cloud Run service ](#custom-add-sidecar) .\nTo provide a custom `RunMonitoring` configuration, do the following:- Create a file that contains the custom configuration.\n- Create a Secret Manager secret that contains the custom configuration.\nThe following command creates a secret named from the `` file:\n```\ngcloud secrets create mysecret --data-file=custom-config.yaml\n```\nTo pick up a change to the configuration after you modify the `` file, you must delete and recreate the secret, and then redeploy the Cloud Run service.If you want to update the custom `RunMonitoring` configuration at any time, you can add a new version of the existing secret to Secret Manager.\nFor example, to update with a new config stored in file `` , you can run:\n```\ngcloud secrets versions add mysecret --data-file=custom-config-updated.yaml\n```\nThe sidecar automatically reloads and applies the changes to its configuration.\n### Add the sidecar to a Cloud Run serviceAfter you have created a Secret Manager secret for your `RunMonitoring` configuration, you must modify your Cloud Run configuration to do the following:- Add the Managed Service for Prometheus sidecar- Add a container-dependency annotation that specifies the startup and shutdown order of the containers. In the following example, the sidecar container, named \"collector\", starts after and shuts down before the application container, named \"app\" in the example.\n- Create a container for the collector, named \"collector\" in the following example.\n- Add the secret by mounting the secret at the location`/etc/rungmp/config.yaml`:- Add a secrets annotation that points to the secret holding your custom`RunMonitoring`configuration.\n- Create a volume, named \"config\" in the following example, for the secret that points to the file`config.yaml`.\n- Mount the volume as part of the collector image at the mount path`/etc/rungmp`.\nFor example, add the lines preceded by the `+` (plus) character to your Cloud Run configuration, and then redeploy your service:\n```\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n annotations:\n run.googleapis.com/launch-stage: ALPHA\n run.googleapis.com/cpu-throttling: 'false'\n name: my-cloud-run-service\nspec:\n template:\n metadata:\n  annotations:\n  run.googleapis.com/execution-environment: gen2\n+  run.googleapis.com/container-dependencies: '{\"collector\":[\"app\"]}'\n+  run.googleapis.com/secrets: 'mysecret:projects/PROJECT_ID/secrets/mysecret'\n spec:\n  containers:\n  - image: \"REGION-docker.pkg.dev/PROJECT_ID/run-gmp/sample-app\"\n  name: app\n  startupProbe:\n   httpGet:\n   path: /startup\n   port: 8000\n  livenessProbe:\n   httpGet:\n   path: /liveness\n   port: 8000\n  ports:\n  - containerPort: 8000\n+  - image: \"us-docker.pkg.dev/cloud-ops-agents-artifacts/cloud-run-gmp-sidecar/cloud-run-gmp-sidecar:1.1.0\"\n+  name: collector\n+  volumeMounts:\n+  - mountPath: /etc/rungmp/\n+   name: config\n+  volumes:\n+  - name: config\n+  secret:\n+   items:\n+   - key: latest\n+   path: config.yaml\n+   secretName: 'mysecret'\n```\nTo redeploy the Cloud Run service with the configuration file `` , run the following command:\n```\ngcloud run services replace run-service.yaml --region=REGION\n```\n### RunMonitoring spec: configuration optionsThis section describes `RunMonitoring` configuration spec for the Managed Service for Prometheus sidecar. The following shows an example custom configuration:\n```\napiVersion: monitoring.googleapis.com/v1beta\nkind: RunMonitoring\nmetadata:\n name: my-custom-cloud-run-job\nspec:\n endpoints:\n - port: 8080\n path: /metrics\n interval: 10s\n metricRelabeling:\n - action: replace\n  sourceLabels:\n  - __address__\n  targetLabel: label_key\n  replacement: label_value\n targetLabels:\n metadata:\n - service\n - revision\n```The `RunMonitoring` configuration monitors a Cloud Run service.\n| Field | Description                    | Scheme   | Required |\n|:---------|:----------------------------------------------------------------------------------------|:------------------|:-----------|\n| metadata | Metadata that all persisted resources must have.          | metav1.ObjectMeta | False  |\n| spec  | Specification of the Cloud Run deployment selected for target discovery by Prometheus. | RunMonitoringSpec | True  |This spec describes how the `RunMonitoring` configuration monitors a Cloud Run service.\n| Field  | Description                              | Scheme   | Required |\n|:-------------|:----------------------------------------------------------------------------------------------------------------------------------|:-----------------|:-----------|\n| endpoints | Endpoints to scrape on the selected pods.                       | []ScrapeEndpoint | True  |\n| targetLabels | Labels to add to the Prometheus target for discovered endpoints. The instance label is always set to the Cloud Run instance ID. | RunTargetLabels | False  |\n| limits  | Limits to apply at scrape time.                         | *ScrapeLimits | False  |The `RunTargetLabels` configuration lets you include Cloud Run labels from the discovered Prometheus targets.\n| Field | Description                                                                                             | Scheme | Required |\n|:---------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------|:-----------|\n| metadata | Cloud Run metadata labels that are set on all scraped targets. Permitted keys are instance, revision, service, and configuration. If permitted keys are set, then the sidecar adds the corresponding value from the Cloud Run instance as metric labels to every metric: instanceID, revision_name, service_name, and configuration_name. Defaults to all permitted keys being set. | *[]string | False  |\n## Build and run a sample app\nThis section describes how to run the Managed Service for Prometheus sidecar with a sample app. This section is optional. If you already have a Cloud Run service and want to deploy the sidecar with it, then see [Add the Managed Service for Prometheus sidecar to a Cloud Run service](#sidecar-intro) .\n### Clone the run-gmp-sidecar repository\nTo get the sample app and its configuration files, clone the `run-gmp-sidecar` repository by running the following command:\n```\ngit clone https://github.com/GoogleCloudPlatform/run-gmp-sidecar/\n```\nAfter cloning the repository, change to the `run-gmp-sidecar` directory:\n```\ncd run-gmp-sidecar\n```### Build and run the sample app\nThe sample app requires Docker or a similar container build system for Linux. You can build and run the sample app in either of the following ways:\n- Use Cloud Build to run without local Docker support. If you use Cloud Build, then you must also enable the Cloud Build API.\n- Build and run the sample app manually.\nThe following sections describe both approaches. You don't need to do both. For more information, select the tab for one of the approaches.\n## Use Cloud BuildThe `run-gmp-sidecar` repository includes configuration files for Cloud Build. These files bundle together the steps needed to build and deploy the sample app.\nYou can also manually perform the steps handled by Cloud Build. For more information, see [Build and run manually](#use-manual-steps) .\n### Set up for Cloud BuildThese configuration files require a Cloud Build service account and an Artifact Registry repository. The `run-gmp-sidecar` repository also includes a script, `create-sa-and-ar.sh` that does the following:- Creates a service account,`run-gmp-sa@` `` `.iam.gserviceaccount.com`.\n- Grants the following roles to the service account:- `roles/iam.serviceAccountUser`\n- `roles/storage.objectViewer`\n- `roles/logging.logWriter`\n- `roles/artifactregistry.createOnPushWriter`\n- `roles/secretmanager.admin`\n- `roles/secretmanager.secretAccessor`\n- `roles/run.admin`\n- Creates an Artifact Registry repository,`run-gmp`, for your container images.\nTo create the `run-gmp-sa` service account and `run-gmp` repository, run the following command:\n```\n./create-sa-and-ar.sh\n```\nIt takes some time for the permissions to propagate, so we recommend waiting about 30 seconds before proceeding to the next step. Otherwise, you might see authorization errors.\n### Submit Cloud Build requestAfter you've set up the `run-gmp-sa` service account and `run-gmp` repository, you can start a Cloud Build job by submitting the Cloud Build configuration file. You can use the following `gcloud builds submit` command:\n```\ngcloud builds submit . --config=cloudbuild-simple.yaml --region=REGION\n```\nThis command takes several minutes to run, but it almost immediately indicates you where you can find the Cloud Build build details. The message looks like the following:\n```\nLogs are available at [https://console.cloud.google.com/cloud-build/builds/637860fb-7a14-46f2-861e-09c1dc4cea6b?project=PROJECT_NUMBER].\n```\nTo watch the build progress, navigate to the returned URL in your browser. You can also [view the sidecar logs in Cloud Logging](#view-sidecar-logs) .\n### Check the service URLAfter the Cloud Build job ends, check the Cloud Run service endpoint URL by running the following command:\n```\ngcloud run services describe my-cloud-run-service --region=REGION --format=\"value(status.url)\"\n```\nThis command returns the service URL, which looks like the following:\n```\nhttps://my-cloud-run-service-abcdefghij-ue.a.run.app\n```\nUse the returned URL as the value of in the section [Verify that your app is running](#verify) .\n## Build and run manuallyYou can manually perform the steps handled by Cloud Build, described in [Use Cloud Build](#use-cloud-build) . The following sections describe how to manually perform the same tasks.\n### Set variables used by later stepsSeveral of the later steps use environment variables for common values. Set up these variables by using the following commands:\n```\nexport GCP_PROJECT=PROJECT_ID\nexport REGION=REGION\n```\n### Create a container image repository\nCreate an Artifact Registry repository for the container image by running the following command:\n```\ngcloud artifacts repositories create run-gmp \\\n --repository-format=docker \\\n --location=${REGION}\n```\n### Build and push the sample appThis example uses Docker on Linux to build the sample app and push it to an Artifact Registry repository. You might need to adapt these commands if you are working in a Windows or macOS environment.\n **Note:** If you need`sudo`to execute`docker`commands, then you also need to authenticate by using`sudo`as well. Failure to do so results in the wrong system user being configured, and requests to Cloud Run are not authenticated.```\nsudo gcloud auth login --no-launch-browser\nsudo gcloud auth configure-docker\n```\nTo build the sample app and push it to Artifact Registry, do the following:- Authenticate your Docker client with the Google Cloud CLI:```\ngcloud auth configure-docker ${REGION}-docker.pkg.dev\n```\n- Go to the `simple-app` directory in the `run-gmp-sidecar` repository:```\npushd sample-apps/simple-app\n```\n- Build the `simple-app` app by running the following command:```\ndocker build -t ${REGION}-docker.pkg.dev/${GCP_PROJECT}/run-gmp/sample-app .\n```\n- Push the image for the built app by running the following command:```\ndocker push ${REGION}-docker.pkg.dev/${GCP_PROJECT}/run-gmp/sample-app\n```\n- Return to the `run-gmp-sidecar` directory:```\npopd\n```\n### Configure the Cloud Run serviceThe `run-service-simple.yaml` file in the `run-gmp-sidecar` repository defines a multicontainer Cloud Run service that uses the sample app and collector images that you built in previous steps. The `run-service-simple.yaml` file contains the following Service specification:\n```\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n annotations:\n run.googleapis.com/launch-stage: ALPHA\n run.googleapis.com/cpu-throttling: 'false'\n name: my-cloud-run-service\nspec:\n template:\n metadata:\n  annotations:\n  run.googleapis.com/execution-environment: gen2\n  run.googleapis.com/container-dependencies: '{\"collector\":[\"app\"]}'\n spec:\n  containers:\n  - image: \"%SAMPLE_APP_IMAGE%\"\n  name: app\n  startupProbe:\n   httpGet:\n   path: /startup\n   port: 8000\n  livenessProbe:\n   httpGet:\n   path: /liveness\n   port: 8000\n  ports:\n  - containerPort: 8000\n  - image: \"us-docker.pkg.dev/cloud-ops-agents-artifacts/cloud-run-gmp-sidecar/cloud-run-gmp-sidecar:1.1.0\"\n  name: collector\n```\nThis file contains a placeholder value for the images you've built in previous steps, so you must update the placeholders with the actual values for your Google Cloud project.\nReplace the `%SAMPLE_APP_IMAGE%` placeholder by running the following command:\n```\nsed -i s@%SAMPLE_APP_IMAGE%@REGION-docker.pkg.dev/${GCP_PROJECT}/run-gmp/sample-app@g run-service-simple.yaml\n```\n### Deploy the Cloud Run serviceAfter you've updated the `run-service-simple.yaml` file with your values, you can create and deploy the Cloud Run service by running the following command:\n```\ngcloud run services replace run-service-simple.yaml --region=REGION\n \n```\nThis command returns the service URL, which looks like the following:\n```\nhttps://my-cloud-run-service-abcdefghij-ue.a.run.app\n```\nUse the returned URL as the value of in the section [Verify that your app is running](#verify) .\n### Allow unauthenticated HTTP accessBefore you can make a request to the service URL, you need to change the Cloud Run service policy to accept unauthenticated HTTP access. The `policy.yaml` file in the `run-gmp-sidecar` repository contains the necessary change.\nTo change the service policy, run the following command:\n```\ngcloud run services set-iam-policy my-cloud-run-service policy.yaml --region=REGION\n```\n### Verify that your app is running\nTo verify that the Cloud Run service has correctly run the sample app, use the `curl` utility to access the service's `metrics` endpoint.\n- Set the `SERVICE_URL` environment variable to the Cloud Run service URL from the previous step:```\nexport SERVICE_URL=SERVICE_URL\n```\n- Send a request to the service URL by running the following command:```\ncurl $SERVICE_URL\n```\nIf your app was successfully started, you see the following response:\n```\nUser request received!\n```\n### View app metrics in Metrics Explorer\nThe sample `app` container writes the following metrics:\n- `foo_metric`: The current time as a floating-point value (gauge).\n- `bar_metric`: The current time as a floating-point value (counter).\nTo view these metrics in Metrics Explorer, do the following:\n- In the navigation panel of the Google Cloud console, select **Monitoring** , and then select **Metrics explorer** : [Go to Metrics explorer](https://console.cloud.google.com/monitoring/metrics-explorer) \n- In the toolbar of the query-builder pane, select the button whose name is either **MQL** or **PromQL** .\n- Verify that **PromQL** is selected in the **Language** toggle. The language toggle is in the same toolbar that lets you format your query.\n- Enter the following query into the editor pane:```\nfoo_metric\n```\n- Click **Add query** .\n- In the toolbar of the query-builder pane, select the button whose name is either **MQL** or **PromQL** .\n- Verify that **PromQL** is selected in the **Language** toggle. The language toggle is in the same toolbar that lets you format your query.\n- Enter the following query into the second editor pane:```\nbar_metric\n```\n- Click **Run query** .\n- To see details about the metrics, in the toggle labeled **Chart Table Both** , select **Both** .\n### Clean up\nWhen you are finished experimenting with the sample app, you can use the `clean-up-cloud-run.sh` script in the `run-gmp-sidecar` repository to delete the following resources you might have created for the sample:\n- The Cloud Run service.\n- The Artifact Registry repository.\n- The service account created for Cloud Build.\nDeleting these resources ensures that you don't incur costs after running the sample.\nTo clean up the sample app, run the `clean-up-cloud-run.sh` script:\n```\n./clean-up-cloud-run.sh\n```\n## View self metrics in Metrics Explorer\nThe Managed Service for Prometheus sidecar reports the following metrics about itself to Cloud Monitoring:\n- `agent_uptime`: The uptime of the sidecar collector (counter).\n- `agent_memory_usage`: The memory being consumed by the sidecar collector (gauge).\n- `agent_api_request_count`: The number of API requests from the sidecar collector (counter).\n- `agent_monitoring_point_count`: The number of metric points written to Cloud Monitoring by the sidecar collector (counter).\nTo view the sidecar's self metrics in Metrics Explorer, do the following:\n- In the navigation panel of the Google Cloud console, select **Monitoring** , and then select **Metrics explorer** : [Go to Metrics explorer](https://console.cloud.google.com/monitoring/metrics-explorer) \n- In the toolbar of the query-builder pane, select the button whose name is either **MQL** or **PromQL** .\n- Verify that **PromQL** is selected in the **Language** toggle. The language toggle is in the same toolbar that lets you format your query.\n- Enter the name of the metric you want to query into the editor pane, for example:```\nagent_api_request_count\n```\n- Click **Run query** .\n- To see details about the metrics, in the toggle labeled **Chart Table Both** , select **Both** .## View self logs in Logs Explorer\nThe Managed Service for Prometheus sidecar writes logs to Cloud Logging. The sidecar writes logs against the Logging monitored resource type [cloud_run_revision](/logging/docs/api/v2/resource-list#tag_could_run_revision) .\nTo view the sidecar's logs in Logs Explorer, do the following:\n- In the navigation panel of the Google Cloud console, select **Logging** , and then select **Logs Explorer** : [Go to Logs Explorer](https://console.cloud.google.com/logs/query) \n- Select the **Cloud Run Revision** resource type, or enter the following query and click **Run query** :```\nresource.type=\"cloud_run_revision\"\n```## About the collected metrics\nWhen the metrics emitted by the sidecar are ingested into Cloud Monitoring, the metrics are written against the Cloud Monitoring [prometheus_target](/monitoring/api/resources#tag_prometheus_target) monitored resource type. This resource type is used for both application metrics and the sidecar's self metrics.\nWhen writing the metrics, the sidecar sets the resource labels as follows:\n- `project_id`: The ID of the Google Cloud project in which the container is running.\n- `location`: The Google Cloud region in which the container is running.\n- `cluster`: The value`__run__`.\n- `namespace`: The name of the Cloud Run service being run; comes from the`K_SERVICE`environment variable.\n- `job`: Name from the`RunMonitoring`configuration; defaults to`run-gmp-sidecar`.\n- `instance`: The value`` `:` ``of the local workload from which the container is configured to pull metrics. Thevalue is the instance ID of the Cloud Run instance.\nThe sidecar also adds the following metric labels:\n- `instanceId`: The ID of the Cloud Run instance.\n- `service_name`: The name of the Cloud Run service being run.\n- `revision_name`: The name of the Cloud Run revision being run.\n- `configuration_name`: The name of the Cloud Run configuration being run.\nThese metric labels are all added by default. If you use a [customRunMonitoring configuration](#choose-default-or-custom) , you can omit these labels by using the `targetLabels` option in the `RunMonitoring` spec. You can also use a custom configuration to relabel any of these metric labels **except instanceId** .\nAll other labels that appear with ingested metrics come from the user's metric. If a user-defined label conflicts with one of the system-provided labels, the user-defined label is prefixed with the string `exported_` . For example, a user-specified label `namespace=playground` conflicts with the system-defined `namespace` label, so the user label appears as `exported_namespace=playground` .\n### Metric type\nWhen the metrics emitted by the sidecar are ingested into Cloud Monitoring, the metrics are written as `prometheus.googleapis.com` metrics, and the type of the Prometheus metric is appended to the end of the name. For example, the sample app emits a Prometheus gauge metric named `foo_metric` . In Cloud Monitoring, the metric is stored as the metric type `prometheus.googleapis.com/foo_metric/gauge` .\nWhen querying the metric with PromQL, you can use the Prometheus name, as illustrated in [View app metrics in Metrics Explorer](#view-app-metrics) and [View self metrics in Metrics Explorer](#view-sidecar-metrics) . When using tools like the query builder or Monitoring Query Language (MQL) in Metrics Explorer, the Cloud Monitoring metric type is relevant.\n### Billing\nMetrics emitted by the sidecar are ingested into Cloud Monitoring with the prefix `prometheus.googleapis.com` . Metrics with this prefix are charged by the number of samples ingested. For more information about billing and Managed Service for Prometheus, see [Billing](/stackdriver/docs/managed-prometheus#gmp-billing) .", "guide": "Google Cloud Observability"}