{"title": "Google Cloud Observability - Set up a gRPC application on Google Cloud with Microservices observability", "url": "https://cloud.google.com/stackdriver/docs/solutions/grpc/setup-grpc-application-tutorial", "abstract": "# Google Cloud Observability - Set up a gRPC application on Google Cloud with Microservices observability\nMicroservices observability tools provide you with the ability to instrument your applications to collect and present telemetry data in Cloud Monitoring, Cloud Logging, and Cloud Trace from gRPC workloads deployed on Google Cloud and elsewhere. Microservices observability works with any deployment that has been granted permission to access Monitoring, Logging, and Trace by enabling the Microservices API.\nIn this tutorial you learn how to use Microservices observability features by building a simple gRPC application on Google Cloud using Compute Engine and instrument your application with Microservices observability, and view them come up live on Monitoring and Logging.", "content": "## ObjectivesAt a high level, you do the following.- As a service developer, you can:- Create a gRPC application with the language of your choice (C++, Go, or Java).\n- Opt in your application and control the Microservices observability plugin.\n- Deploy the application on a Compute Engine VM.\n- As a service operator, you consume the collected data in various ways:- View traces on Trace.\n- View metrics on the monitoring dashboard called Microservices (gRPC) Monitoring.\n- View metrics on Metrics Explorer.\n- Inspect log entries on Logs Explorer.## CostsIn this document, you use the following billable components of Google Cloud:- [Compute Engine](/compute/all-pricing) To generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .## Before you begin\n- Read the [Microservices observability overview](/stackdriver/docs/solutions/grpc) .\n- Read about the [two supported environment variables](/stackdriver/docs/solutions/grpc/set-up-observability#config-options) , decide which to use, and determine the values required by the environment variable.\n- Read the [Microservices observability overview](/stackdriver/docs/solutions/grpc) .\n- Read about the [two supported environment variables](/stackdriver/docs/solutions/grpc/set-up-observability#config-options) , decide which to use, and determine the values required by the environment variable.## Create and connect to a Compute Engine VMUse these instructions to create and connect to a Compute Engine VM instance. On the VM you deploy your application and then instrument the application with Microservices observability.- Create a VM instance:```\ngcloud compute instances create grpc-observability-vm \\\n --image-family=debian-11 \\\n --image-project=debian-cloud \\\n --service-account=SERVICE_ACCOUNT_NAME@$PROJECT_ID.iam.gserviceaccount.com\n```\n- Connect to the VM instance:```\ngcloud compute ssh --project=$PROJECT_ID grpc-observability-vm\n```\n## Deploy your application to the Compute Engine VMYou can either deploy an application of your choice to the Compute Engine VM that you created in the previous step, then skip this step, or you can use an example to continue with instructions in your preferred language.\n- After you connect to the VM instance, run the following command.```\nsudo apt-get update -y\nsudo apt-get install -y git build-essential clang\ngit clone -b v1.54.0 https://github.com/grpc/grpc.git --depth=1\n```\n- Make sure that you have Go installed.```\nsudo apt-get install -y git\nsudo apt install wget\nwget https://go.dev/dl/go1.20.2.linux-amd64.tar.gz\nsudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf \\\ngo1.20.2.linux-amd64.tar.gz\nexport PATH=$PATH:/usr/local/go/bin\n```\n- Clone the `gRPC-Go` examples.```\ngit clone https://github.com/grpc/grpc-go.git\ncd grpc-go/\ngit checkout -b run-observability-example\n875c97a94dca8093bf01ff2fef490fbdd576373d\n```\n- After you connect to the VM instance, make sure that you have Java 8 or later installed.```\nsudo apt update\nsudo apt upgrade\nsudo apt install git\nsudo apt-get install -y openjdk-11-jdk-headless\n```\n- Clone the `grpc-java` repository.```\nexport EXAMPLES_VERSION=v1.54.1\ngit clone -b $EXAMPLES_VERSION --single-branch --depth=1 \\\nhttps://github.com/grpc/grpc-java.git\n```\n## Create gRPC Google Cloud Observability config fileYou need separate gRPC Google Cloud Observability config file to enable Microservices observability for both server and client. The location of this file is exported as `GRPC_GCP_OBSERVABILITY_CONFIG_FILE` in the future steps. Use the following instruction on how to set up the different parameters in the config file.\n### Example GRPC_GCP_OBSERVABILITY_CONFIG_FILE```\n{\u00a0 \"project_id\": \"your-project-here\",\u00a0 \"cloud_logging\": {\u00a0 \u00a0 \"client_rpc_events\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"methods\": [\"google.pubsub.v1.Subscriber/Acknowledge\", \"google.pubsub.v1.Publisher/CreateTopic\"],\u00a0 \u00a0 \u00a0 \"exclude\": true,\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"methods\": [\"google.pubsub.v1.Subscriber/*\", \"google.pubsub.v1.Publisher/*\"],\u00a0 \u00a0 \u00a0 \"max_metadata_bytes\": 4096,\u00a0 \u00a0 \u00a0 \"max_message_bytes\": 4096,\u00a0 \u00a0 }],\u00a0 \u00a0 \"server_rpc_events\": [{\u00a0 \u00a0 \u00a0 \"methods\": [\"*\"],\u00a0 \u00a0 \u00a0 \"max_metadata_bytes\": 4096,\u00a0 \u00a0 \u00a0 \"max_message_bytes\": 4096\u00a0 \u00a0 }],\u00a0 },\u00a0 \"cloud_monitoring\": {},\u00a0 \"cloud_trace\": {\u00a0 \u00a0 \"sampling_rate\": 0.5,\u00a0 }\u00a0 \"labels\": {\u00a0 \u00a0 \"SOURCE_VERSION\": \"J2e1Cf\",\u00a0 \u00a0 \"SERVICE_NAME\": \"payment-service-1Cf\",\u00a0 \u00a0 \"DATA_CENTER\": \"us-west1-a\"\u00a0 }}\n```\nThe following sections contain instructions for enabling data collection in your configuration for the individual components. If you used the gRPC example in this tutorial, you can use this config as is (after updating `your-project-here` ) or use this as a template for your application.and an example showing the configuration information in an environment variable.\n### Enable metricsTo enable metrics, add the `cloud_monitoring` object to the configuration and set its value to `{}` .\nFor more information about metrics, see [Metrics definitions](/stackdriver/docs/solutions/grpc/observability-reference#metrics-def) .\n### Enable tracingTo enable tracing, do the following:- Add the`cloud_trace`object to the configuration.\n- Set the`cloud_trace.sampling_rate`to`0.5`which to randomly traces 50% of RPCs.\nIf you plan to enable tracing across services, ensure that the services support the propagation of trace context received from upstream (or started by itself) to downstream.\nFor more information about tracing, see [Trace definitions](/stackdriver/docs/solutions/grpc/observability-reference#trace-def) .\n### Enable loggingTo enable logging, do the following:- Add the`cloud_logging`object to the configuration.\n- Add a pattern to either or both of`client_rpc_events`and`server_rpc_events`specifying the set of services or methods for which you want to generate transport-level event logging and the number of bytes to log for headers and messages.\nFor more information about logging, see [Log record definitions](/stackdriver/docs/solutions/grpc/observability-reference#log-record-defs) .## Instrument your applications for the observability pluginTo instrument your applications so that they can use the Microservices observability plugin, use the following instructions for your preferred language.\nYou can use C++ with Microservices observability as of gRPC C++ v1.54. The [example repository](https://github.com/grpc/grpc/tree/v1.54.0/examples/cpp/gcp_observability/helloworld) is in GitHub.- Observability support is only available through the Bazel build system. Add the target `grpcpp_gcp_observability` as a dependency.\n- Opting in Microservices observability requires an additional dependency (an observability modul) and the following code changes to existing gRPC clients, servers, or both:```\n#include <grpcpp/ext/gcp_observability.h>int main(int argc, char** argv) {\u00a0 auto observability = grpc::GcpObservability::Init();\u00a0 assert(observability.ok());\u00a0 \u2026\u00a0 // Observability data flushed when object goes out of scope}\n```Before any gRPC operations, including creating a channel, server, or credentials, invoke the following:```\ngrpc::GcpObservability::Init();\n```This returns `absl::StatusOr<GcpObservability>` which should be saved. The status helps determine whether observability was successfully initialized. The accompanying `GcpObservability` object controls the lifetime of observability, and automatically closes and flushes observability data when it goes out of scope.\n- Microservices observability plugins are supported for gRPC Go versions`v1.54.0`and later. The [example repository](https://github.com/grpc/grpc-go/tree/master/examples/features/observability) is in GitHub.\nWith the Go module, opting in Microservices observability requires an observability module and the following code:\n```\nimport \"google.golang.org/grpc/gcp/observability\"func main() {\u00a0 ctx, cancel := context.WithTimeout(context.Background(), time.Second)\u00a0 defer cancel()\u00a0 if err := observability.Start(ctx); err != nil {\u00a0 \u00a0 log.Warning(\"Unable to start gRPC observability:\", err)\u00a0 }\u00a0 defer observability.End()\u00a0 \u2026}\n```\nThe `observability.Start` call parses the configuration from environment variables, creates exporters accordingly, and injects collection logic to client connections and servers created after the call. The deferred `observability.End` call cleans up resources and ensures that buffered data is flushed before the application closes.\nAfter the application code is updated, run the following command to update the `go.mod` file.\n```\ngo mod tidy\n```\nTo use Microservices observability with Java applications, modify your build to include the `grpc-gcp-observability` artifact. Use gRPC version 1.54.1 or later.\nIn the build snippets in the Gradle and Maven build tool sections, `grpcVersion` is set to the value 1.54.1.\nThe [example repository](https://github.com/grpc/grpc-java/tree/v1.54.1/examples/example-gcp-observability) is in GitHub.- To successfully instrument your Java applications for Microservices observability, add the following code to`main()`.\n```\n...import io.grpc.gcp.observability.GcpObservability;...// Main application class...public static void main(String[] args) {...\u00a0 // call GcpObservability.grpcInit() to initialize & get observability\u00a0 GcpObservability observability = GcpObservability.grpcInit();...\u00a0 // call close() on the observability instance to shutdown observability\u00a0 observability.close();...}\n```\nNote that you must call `GcpObservability.grpcInit()` before any gRPC channels or servers are created. The `GcpObservability.grpcInit()` function reads the Microservices observability configuration and uses that to set up the global interceptors and tracers that are required for the logging, metrics, and trace features in each channel and server created. `GcpObservability.grpcInit()` is thread safe and must be called exactly once. It returns an instance of `GcpObservability` that you must save in order to call `close()` later.\n`GcpObservability.close()` de-allocates resources. Any channel or servers created afterwards don't perform any logging.\n`GcpObservability` implements `java.lang.AutoCloseable` , which is closed automatically if you use `try-with-resource` s as follows:\n```\n...import io.grpc.gcp.observability.GcpObservability;...// Main application class...public static void main(String[] args) {...\u00a0 // call GcpObservability.grpcInit() to initialize & get observability\u00a0 try (GcpObservability observability = GcpObservability.grpcInit()) {...\u00a0 } // observability.close() called implicitly...}\n```If you are using the Gradle build tool, include the following:\n```\ndef grpcVersion = '1.54.1'\n...\ndependencies {\n...\nimplementation \"io.grpc:grpc-gcp-observability:${grpcVersion}\"\n...\n}\n```If you are using the Maven build tool, include the following:\n```\n<properties>\n...\n<grpc.version>1.54.1</grpc.version>\n...\n</properties>\n...\n<dependencies>\n...\n<dependency>\n<groupId>io.grpc</groupId>\n<artifactId>grpc-gcp-observability</artifactId>\n<version>${grpc.version}</version>\n</dependency>\n...\n</dependencies>\n```## Run your applicationFollow the instructions in this section only if you used the gRPC example for the tutorial. You can modify the `run` command to target your application binary.\n### Run Server\n- Create a SSH session into the VM.\n- Export environmental variables. Use steps defined [above](#create-o11y-config-file) to create `server_config.json` .```\n\u00a0 export GOOGLE_CLOUD_PROJECT=$PROJECT_ID\u00a0 export GRPC_GCP_OBSERVABILITY_CONFIG_FILE=\"$(pwd)/examples/cpp/gcp_observability/helloworld/server_config.json\"\n```\n- Run the server application `shell cd grpc tools/bazel run examples/cpp/gcp_observability/helloworld:greeter_server`\n- Create a SSH session into the VM.\n- Export environmental variables. Use steps defined [above](#create-o11y-config-file) to create `server_config.json` .```\nexport GRPC_GCP_OBSERVABILITY_CONFIG_FILE=./server/serverConfig.json\n```\n- Run the server application `shell go run ./server/main.go`\n- In the examples directory, open the README file and follow the instructions in the file.\n- When the instructions tell you to open another terminal window, issue this command:`shell gcloud compute ssh --project=$PROJECT_ID grpc-observability-vm`### Run Client\n- Create another SSH session into the VM.\n- Export environmental variables. Use steps defined [above](#create-o11y-config-file) to create `client_config.json` file.```\n\u00a0 export GOOGLE_CLOUD_PROJECT=$PROJECT_ID\u00a0 export GRPC_GCP_OBSERVABILITY_CONFIG_FILE=\"$(pwd)/examples/cpp/gcp_observability/helloworld/client_config.json\"\n```\n- Run the client application```\ncd grpctools/bazel run examples/cpp/gcp_observability/helloworld:greeter_client\n```\n- Create another SSH session into the VM.\n- Export environmental variables. Use steps defined [above](#create-o11y-config-file) to create`client_config.json`file.`shell export GRPC_GCP_OBSERVABILITY_CONFIG_FILE=./client/clientConfig.json`\n- Run the client application```\ncd grpc-go/examples/features/observabilitygo run ./client/main.go\n```\n- In the examples directory, open the README file and follow the instructions in the file.\n- When the instructions tell you to open another terminal window, issue this command:`shell gcloud compute ssh --project=$PROJECT_ID grpc-observability-vm`\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\n### Delete the project\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- Delete a Google Cloud project:\n- ```\ngcloud projects delete PROJECT_ID\n```\n### Delete individual resources\n- Delete the instance:```\ngcloud compute instances delete INSTANCE_NAME\n```\n## What's next\n- For detailed information about configuration data, trace definitions, metrics definitions, and log definitions see [Microservices observability reference](/stackdriver/docs/solutions/grpc/observability-reference) .\n- For information about viewing logs, traces, and metrics, see [View traces, metrics, and log entries](/stackdriver/docs/solutions/grpc/set-up-observability#view-all)", "guide": "Google Cloud Observability"}