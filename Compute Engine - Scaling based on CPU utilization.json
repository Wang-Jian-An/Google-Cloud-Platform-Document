{"title": "Compute Engine - Scaling based on CPU utilization", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Scaling based on CPU utilization\nThe simplest form of autoscaling is to scale a [managed instance group (MIG)](/compute/docs/instance-groups#managed_instance_groups) based on the CPU utilization of its instances.\nYou can also autoscale a MIG based on the [load balancing serving capacity](/compute/docs/autoscaler/scaling-load-balancing) , [Monitoring metrics](/compute/docs/autoscaler/scaling-stackdriver-monitoring-metrics) , or [schedules](/compute/docs/autoscaler/scaling-schedules) .\n", "content": "## Before you begin\n- Review the autoscaler [limitations](/compute/docs/autoscaler#specifications) .\n- Read about autoscaler [fundamentals](/compute/docs/autoscaler#fundamentals) .\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nTo use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```## Scaling based on CPU utilization\nYou can autoscale based on the average CPU utilization of a managed instance group (MIG). Using this policy tells the autoscaler to collect the CPU utilization of the instances in the group and determine whether it needs to scale. You set the target CPU utilization the autoscaler should maintain and the autoscaler works to maintain that level.\nThe autoscaler treats the target CPU utilization level as a fraction of the average use of all vCPUs over time in the instance group. If the average utilization of your total vCPUs exceeds the target utilization, the autoscaler adds more VM instances. If the average utilization of your total vCPUs is less than the target utilization, the autoscaler removes instances. For example, setting a 0.75 target utilization tells the autoscaler to maintain an average utilization of 75% among all vCPUs in the instance group.\n**Caution:** If your application takes a long time to initialize on new VMs, Google recommends that you do not set a target CPU utilization of 85% or above. In such a case, if your application sees an increase in traffic, your MIG's CPUs might be at risk of getting overloaded while your application slowly initializes on the new VMs that the autoscaler adds.\nYou can also scale based on forecasted CPU utilization. For more information, and to see if this is suitable for your workload, see [Scaling based on predictions](/compute/docs/autoscaler/predictive-autoscaling) .\n### Enable autoscaling based on CPU utilization- In the console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- If you have an instance group, select it and click **Edit** . If you don't have an instance group, click **Create instance group** .\n- If no autoscaling configuration exists, under **Autoscaling** , click **Configure autoscaling** .\n- Under **Autoscaling mode** , select **On: add and remove instances tothe group** to enable autoscaling.\n- Specify the minimum and maximum numbers of instances that you want the autoscaler to create in this group.\n- In the **Autoscaling metrics** section, if an existing **CPU utilization** metric does not yet exist, add one:- Click **Add metric** .\n- Under **Metric type** , select **CPU utilization** .\n- Enter the **Target CPU utilization** that you want. This value is treated as a percentage. For example, for 75% CPU utilization, enter`75`.\n- Under **Predictive autoscaling** , select **Off** . To learn more about predictive autoscaling, and whether it is suitable for your workload, see [Scaling based on predictions](/compute/docs/autoscaler/predictive-autoscaling) .\n- Click **Done** .\n- You can use the **Initialization period** to tell the autoscaler how long it takes for your application to initialize. Specifying an accurate initialization period improves autoscaler decisions. For example, when scaling out, the autoscaler ignores data from VMs that are still initializing because those VMs might not yet represent normal usage of your application. The default initialization period is 60 seconds.\n- Click **Save** .\nUse the [set-autoscaling](/sdk/gcloud/reference/compute/instance-groups/managed/set-autoscaling) sub-command to enable autoscaling for a managed instance group. For example, the following command creates an autoscaler that has a target CPU utilization of 60%. Along with the `--target-cpu-utilization` parameter, the `--max-num-replicas` parameter is also required when creating an autoscaler:\n **Note:** If autoscaling is already enabled for a managed instance group, the [set-autoscaling](/sdk/gcloud/reference/compute/instance-groups/managed/set-autoscaling) command updates the existing autoscaler to the new specifications.\n```\ngcloud compute instance-groups managed set-autoscaling example-managed-instance-group \\\n --max-num-replicas 20 \\\n --target-cpu-utilization 0.60 \\\n --cool-down-period 90\n```\nYou can use the `--cool-down-period` flag to set the initialization period, which tells the autoscaler how long it takes for your application to initialize. Specifying an accurate initialization period improves autoscaler decisions. For example, when scaling out, the autoscaler ignores data from VMs that are still initializing because those VMs might not yet represent normal usage of your application. The default initialization period is 60 seconds.\nOptionally, you can enable predictive autoscaling to scale out ahead of predicted load. To learn whether predictive autoscaling is suitable for your workload, see [Scaling based on predictions](/compute/docs/autoscaler/predictive-autoscaling) .\nYou can verify that autoscaling is successfully enabled by using the [instance-groups managed describe sub-command](/sdk/gcloud/reference/compute/instance-groups/managed/describe) , which describes the corresponding managed instance group and provides information about any autoscaling features for that instance group:\n```\ngcloud compute instance-groups managed describe example-managed-instance-group\n```\nFor a list of available `gcloud` commands and flags, see the [gcloud reference](/sdk/gcloud/reference/compute/instance-groups/managed) .\n **Note:** Although autoscaling is a feature of managed instance groups, it is a separate API resource. Keep that in mind when you construct API requests for autoscaling.\nTo create an autoscaler, use the [autoscalers.insert method](/compute/docs/reference/rest/v1/autoscalers/insert) for a zonal MIG or the [regionAutoscalers.insert method](/compute/docs/reference/rest/v1/regionAutoscalers/insert) for a regional MIG.\nThe following example creates an autoscaler for a zonal MIG:\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/autoscalers/\n```\nYour request body must contain the `name` , `target` , and `autoscalingPolicy` fields. `autoscalingPolicy` must define `cpuUtilization` and `maxNumReplicas` .\nYou can use the `coolDownPeriodSec` field to set the initialization period, which tells the autoscaler how long it takes for your application to initialize. Specifying an accurate initialization period improves autoscaler decisions. For example, when scaling out, the autoscaler ignores data from VMs that are still initializing because those VMs might not yet represent normal usage of your application. The default initialization period is 60 seconds.\nOptionally, you can enable predictive autoscaling to scale out ahead of predicted load. To learn whether predictive autoscaling is suitable for your workload, see [Scaling based on predictions](/compute/docs/autoscaler/predictive-autoscaling) .\n```\n{\n \"name\": \"example-autoscaler\",\n \"target\": \"https://www.googleapis.com/compute/v1/projects/myproject/zones/us-central1-f/instanceGroupManagers/example-managed-instance-group\",\n \"autoscalingPolicy\": {\n \"maxNumReplicas\": 10,\n \"cpuUtilization\": {\n  \"utilizationTarget\": 0.6\n },\n \"coolDownPeriodSec\": 90\n }\n}\n```\nFor more information about enabling autoscaling based on CPU utilization, complete the tutorial, [Using autoscaling for highly scalable apps](/compute/docs/tutorials/high-scalability-autoscaling) .\n### How autoscaler handles heavy CPU utilization\nDuring periods of heavy CPU utilization, if utilization is close to 100%, the autoscaler estimates that the group might already be heavily overloaded. In these cases, the autoscaler increases the number of virtual machines by 50% at most.\n**Note:** This behavior might change in the future. Google recommends that you not rely on this behavior.\n## What's next\n- Learn how to enable [predictive autoscaling](/compute/docs/autoscaler/predictive-autoscaling) .\n- Learn about [managing autoscalers](/compute/docs/autoscaler/managing-autoscalers) .\n- Learn [how autoscalers make decisions](/compute/docs/autoscaler/understanding-autoscaler-decisions) .\n- Learn how to use [multiple autoscaling signals](/compute/docs/autoscaler/multiple-policies) to scale your group.", "guide": "Compute Engine"}