{"title": "Documentation - Organization policy match section", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Organization policy match section\nAll organization policies have a `match` field, which defines the objects it applies to. All conditions specified must be matched before an object is in-scope affected by a policy.\n```\n# excludedNamespaces <array>: ExcludedNamespaces is a list of namespace names.# If defined, a constraint only applies to resources not in a listed namespace.# ExcludedNamespaces also supports a prefix or suffix based glob. \u00a0For example,# `excludedNamespaces: [kube-*]` matches both `kube-system` and `kube-public`,# and `excludedNamespaces: [*-system]` matches both `kube-system` and# `gatekeeper-system`.excludedNamespaces:\u00a0 # <list item: string>: A string that supports globbing at its front or end.\u00a0 # Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will\u00a0 # match \"kube-system\" or \"gatekeeper-system\". \u00a0The asterisk is required for\u00a0 # wildcard matching.\u00a0 - <string>kinds:\u00a0 # <list item: object>: Kinds accepts a list of objects with apiGroups and\u00a0 # kinds fields that list the groups/kinds of objects to which the mutation\u00a0 # will apply. If multiple groups/kinds objects are specified, only one match\u00a0 # is needed for the resource to be in scope.\u00a0 - # apiGroups <array>: APIGroups is the API groups the resources belong to.\u00a0 \u00a0 # '*' is all groups. If '*' is present, the length of the slice must be\u00a0 \u00a0 # one. Required.\u00a0 \u00a0 apiGroups:\u00a0 \u00a0 \u00a0 - <string>\u00a0 \u00a0 kinds:\u00a0 \u00a0 \u00a0 - <string># labelSelector <object>: LabelSelector is the combination of two optional# fields: `matchLabels` and `matchExpressions`. \u00a0These two fields provide# different methods of selecting or excluding k8s objects based on the label# keys and values included in object metadata. \u00a0All selection expressions from# both sections are ANDed to determine if an object meets the cumulative# requirements of the selector.labelSelector:\u00a0 # matchExpressions <array>: matchExpressions is a list of label selector\u00a0 # requirements. The requirements are ANDed.\u00a0 matchExpressions:\u00a0 \u00a0 # <list item: object>: A label selector requirement is a selector that\u00a0 \u00a0 # contains values, a key, and an operator that relates the key and values.\u00a0 \u00a0 - # key <string>: key is the label key that the selector applies to.\u00a0 \u00a0 \u00a0 key: <string>\u00a0 \u00a0 \u00a0 # operator <string>: operator represents a key's relationship to a set\u00a0 \u00a0 \u00a0 # of values. Valid operators are In, NotIn, Exists and DoesNotExist.\u00a0 \u00a0 \u00a0 operator: <string>\u00a0 \u00a0 \u00a0 # values <array>: values is an array of string values. If the operator\u00a0 \u00a0 \u00a0 # is In or NotIn, the values array must be non-empty. If the operator\u00a0 \u00a0 \u00a0 # is Exists or DoesNotExist, the values array must be empty. This array\u00a0 \u00a0 \u00a0 # is replaced during a strategic merge patch.\u00a0 \u00a0 \u00a0 values:\u00a0 \u00a0 \u00a0 \u00a0 - <string>\u00a0 # matchLabels <object>: matchLabels is a map of {key,value} pairs. A single\u00a0 # {key,value} in the matchLabels map is equivalent to an element of\u00a0 # matchExpressions, whose key field is \"key\", the operator is \"In\", and the\u00a0 # values array contains only \"value\". The requirements are ANDed.\u00a0 matchLabels:\u00a0 \u00a0 [key]: <string># name <string>: Name is the name of an object. \u00a0If defined, it will match# against objects with the specified name. \u00a0Name also supports a prefix or# suffix glob. \u00a0For example, `name: pod-*` would match both `pod-a` and# `pod-b`, and `name: *-pod` would match both `a-pod` and `b-pod`.name: <string># namespaceSelector <object>: NamespaceSelector is a label selector against an# object's containing namespace or the object itself, if the object is a# namespace.namespaceSelector:\u00a0 # matchExpressions <array>: matchExpressions is a list of label selector\u00a0 # requirements. The requirements are ANDed.\u00a0 matchExpressions:\u00a0 \u00a0 # <list item: object>: A label selector requirement is a selector that\u00a0 \u00a0 # contains values, a key, and an operator that relates the key and values.\u00a0 \u00a0 - # key <string>: key is the label key that the selector applies to.\u00a0 \u00a0 \u00a0 key: <string>\u00a0 \u00a0 \u00a0 # operator <string>: operator represents a key's relationship to a set\u00a0 \u00a0 \u00a0 # of values. Valid operators are In, NotIn, Exists and DoesNotExist.\u00a0 \u00a0 \u00a0 operator: <string>\u00a0 \u00a0 \u00a0 # values <array>: values is an array of string values. If the operator\u00a0 \u00a0 \u00a0 # is In or NotIn, the values array must be non-empty. If the operator\u00a0 \u00a0 \u00a0 # is Exists or DoesNotExist, the values array must be empty. This array\u00a0 \u00a0 \u00a0 # is replaced during a strategic merge patch.\u00a0 \u00a0 \u00a0 values:\u00a0 \u00a0 \u00a0 \u00a0 - <string>\u00a0 # matchLabels <object>: matchLabels is a map of {key,value} pairs. A single\u00a0 # {key,value} in the matchLabels map is equivalent to an element of\u00a0 # matchExpressions, whose key field is \"key\", the operator is \"In\", and the\u00a0 # values array contains only \"value\". The requirements are ANDed.\u00a0 matchLabels:\u00a0 \u00a0 [key]: <string># namespaces <array>: Namespaces is a list of namespace names. If defined, a# constraint only applies to resources in a listed namespace. \u00a0Namespaces also# supports a prefix or suffix based glob. \u00a0For example, `namespaces: [kube-*]`# matches both `kube-system` and `kube-public`, and `namespaces: [*-system]`# matches both `kube-system` and `gatekeeper-system`.namespaces:\u00a0 # <list item: string>: A string that supports globbing at its front or end.\u00a0 # Ex: \"kube-*\" will match \"kube-system\" or \"kube-public\", \"*-system\" will\u00a0 # match \"kube-system\" or \"gatekeeper-system\". \u00a0The asterisk is required for\u00a0 # wildcard matching.\u00a0 - <string># scope <string>: Scope determines if cluster-scoped and/or namespaced-scoped# resources are matched. \u00a0Accepts `*`, `Cluster`, or `Namespaced`. (defaults to# `*`)scope: <string># source <string>: Source determines whether generated or original resources# are matched. Accepts `Generated`|`Original`|`All` (defaults to `All`). A# value of `Generated` will only match generated resources, while `Original`# will only match regular resources.# Allowed Values: All, Generated, Originalsource: <string>\n``", "content": "`", "guide": "Documentation"}