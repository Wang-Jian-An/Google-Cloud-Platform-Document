{"title": "Compute Engine - Configure per VM Tier_1 networking performance", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Configure per VM Tier_1 networking performance\nCompute Engine lets you select a high-bandwidth per VM Tier_1 networking performance configuration for certain general-purpose and compute-optimized virtual machine (VM) instances. VMs with Tier_1 networking configurations are especially useful for large, distributed compute workloads with lots of heavy internode communications, such as high performance computing (HPC), machine learning (ML), and deep learning (DL).\nCombining these high throughput VMs with high-performance local SSD storage is beneficial for I/O-intensive, flash-optimized databases.\n", "content": "## Before you begin\n- Review the pricing for per VM Tier_1 networking performance at [Tier_1 higher bandwidth network pricing](/compute/vm-instance-pricing#high_bandwidth_configuration) .\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nTo use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```\n### Required roles\nTo get the permissions that you need to configure a VM to use per VM Tier_1 networking performance,   ask your administrator to grant you the  following IAM roles on your project:\n- [Compute Instance Admin (v1) ](https://cloud.google.com/iam/docs/understanding-roles#compute.instanceAdmin.v1) (`roles/compute.instanceAdmin.v1`)\n- [Create  Service Accounts ](https://cloud.google.com/iam/docs/understanding-roles#iam.serviceAccountCreator) (`roles/iam.serviceAccountCreator`)\nFor more information about granting roles, see [Manage access](/iam/docs/granting-changing-revoking-access) .\nThese predefined roles contain     the permissions required to configure a VM to use per VM Tier_1 networking performance. To see the exact permissions that are   required, expand the **Required permissions** section:\nYou might also be able to get   these permissions  with [custom roles](/iam/docs/creating-custom-roles) or  other [predefined roles](/iam/docs/understanding-roles) .\n## Limitations\n- Compute Engine is the only product area supporting Tier_1 networking.\n- Tier_1 networking is supported on N2, N2D, C2, C2D, C3, C3D, M3, and Z3 ( [Preview](/products#product-launch-stages) ) VMs that have at least 30 vCPUs.\n- Tier_1 networking requires VMs that use the [gVNIC virtual network driver](/compute/docs/instances/create-vm-with-gvnic) and a [gVNIC-compatible OS or custom image](/compute/docs/networking/using-gvnic) .\n- C3, C3D, Z3 ( [Preview](/products#product-launch-stages) ), and H3 VMs require gVNIC driver version 1.3 or later to deliver the best Tier_1 networking performance. Make sure the operating system image that you use fully supports Tier_1 networking. [Fully supported OS images](/compute/docs/images/os-details#networking-features) include the updated gVNIC driver. You can [update the gVNIC driver](/compute/docs/networking/using-gvnic#manual-gvnic-setup) on images that don't have the latest version.\n- Purchasable stock keeping units (SKUs) for Tier_1 networking are excluded from [committed use discounts](/compute/docs/instances/signing-up-committed-use-discounts) .\n- Large C3, C3D, and Z3 ( [Preview](/products#product-launch-stages) ) VMs may encounter NUMA-related bottlenecks when bandwidth is pushed beyond 100\u00a0Gbps. Depending on your application architecture, you might need to control for thread and interrupt placement. On Linux, guest OS features such as [Receive Flow Steering (RFS)](https://www.kernel.org/doc/Documentation/networking/scaling.txt) can help address this issue. Ensure that your applications are NUMA-tuned to maximize your performance.\n- On C3, C3D, and H3 VMs that use Microsoft Windows, the gVNIC driver can achieve up to 85\u00a0Gbps of network bandwidth, for both the default network and Tier_1 networking.## Bandwidth tiers\nThe egress bandwidth limit represents the maximum possible amount of data per unit of time (for example, gigabits per second, or Gbps) that Google Cloud allows a VM to emit from its network interfaces (NICs). The egress bandwidth includes data transferred to all Persistent Disk and Google Cloud Hyperdisk volumes attached to the VM.\nNote the following about bandwidth limits:\n- The default bandwidth limit ranges from 10\u00a0Gbps to 200\u00a0Gbps, depending on the [machine type](/compute/docs/machine-resource) and VM size.\n- Tier_1 networking increases the maximum egress bandwidth limit for VMs. The maximum egress bandwidth limit ranges from 50\u00a0Gbps to 200\u00a0Gbps, depending on the size and machine type of your VM.\n- The actual egress bandwidth is always less than or equal to the egress bandwidth limit.\nTo achieve the highest possible egress bandwidth, **all** of the following must be true:\n- The sending and receiving VMs must be in the same zone.\n- The VMs must have NICs in the same VPC network or in VPC networks connected by VPC Network Peering.\n- Packets sent between the VMs must use [internal IP address](/vpc/docs/ip-addresses) destinations.\n- The VPC network used by the VMs uses the highest [maximum transmission unit (MTU)](/vpc/docs/mtu) setting. A higher MTU reduces the packet-header overhead and thus increases payload data throughput.\nFor a complete discussion about egress and ingress bandwidth limits, see [Network bandwidth](/compute/docs/network-bandwidth) .\n### General-purpose N2 VMs\nThe following table describes the egress bandwidth limits for N2 VMs.\n| vCPUs | Internal IP | Tier_1 Internal IP | External IP | Tier_1 External IP |\n|--------:|:--------------|:---------------------|:--------------|:---------------------|\n|  2 | 10 Gbps  | Not applicable (N/A) | 7 Gbps  | nan     |\n|  4 | 10 Gbps  | nan     | 7 Gbps  | nan     |\n|  8 | 16 Gbps  | nan     | 7 Gbps  | nan     |\n|  16 | 32 Gbps  | nan     | 7 Gbps  | nan     |\n|  32 | 32 Gbps  | 50 Gbps    | 7 Gbps  | 25 Gbps    |\n|  48 | 32 Gbps  | 50 Gbps    | 7 Gbps  | 25 Gbps    |\n|  64 | 32 Gbps  | 75 Gbps    | 7 Gbps  | 25 Gbps    |\n|  80 | 32 Gbps  | 100 Gbps    | 7 Gbps  | 25 Gbps    |\n|  96 | 32 Gbps  | 100 Gbps    | 7 Gbps  | 25 Gbps    |\n|  128 | 32 Gbps  | 100 Gbps    | 7 Gbps  | 25 Gbps    |\n### General-purpose N2 (custom size shapes) VMs\nThe following table describes the egress bandwidth limits for custom-sized N2 VMs.\n| vCPUs | Internal IP | Tier_1 Internal IP | External IP | Tier_1 External IP |\n|:--------|:--------------|:---------------------|:--------------|:---------------------|\n| 32-62 | 32 Gbps  | 50 Gbps    | 7 Gbps  | 25 Gbps    |\n| 64-78 | 32 Gbps  | 75 Gbps    | 7 Gbps  | 25 Gbps    |\n| 80-128 | 32 Gbps  | 100 Gbps    | 7 Gbps  | 25 Gbps    |\n### General-purpose N2D VMs\nThe following table describes the egress bandwidth limits for N2D VMs.\n| vCPUs | Internal IP | Tier_1 Internal IP | External IP | Tier_1 External IP |\n|--------:|:--------------|:---------------------|:--------------|:---------------------|\n|  2 | 10 Gbps  | Not applicable (N/A) | 7 Gbps  | nan     |\n|  4 | 10 Gbps  | nan     | 7 Gbps  | nan     |\n|  8 | 16 Gbps  | nan     | 7 Gbps  | nan     |\n|  16 | 32 Gbps  | nan     | 7 Gbps  | nan     |\n|  32 | 32 Gbps  | nan     | 7 Gbps  | nan     |\n|  48 | 32 Gbps  | 50 Gbps    | 7 Gbps  | 25 Gbps    |\n|  64 | 32 Gbps  | 50 Gbps    | 7 Gbps  | 25 Gbps    |\n|  80 | 32 Gbps  | 50 Gbps    | 7 Gbps  | 25 Gbps    |\n|  96 | 32 Gbps  | 100 Gbps    | 7 Gbps  | 25 Gbps    |\n|  128 | 32 Gbps  | 100 Gbps    | 7 Gbps  | 25 Gbps    |\n|  224 | 32 Gbps  | 100 Gbps    | 7 Gbps  | 25 Gbps    |\n### General-purpose N2D (custom size shapes) VMs\nThe following table describes the egress bandwidth limits for custom-sized N2D VMs.\n| vCPUs | Internal IP | Tier_1 Internal IP | External IP | Tier_1 External IP |\n|:--------|:--------------|:---------------------|:--------------|:---------------------|\n| 48-94 | 32 Gbps  | 50 Gbps    | 7 Gbps  | 25 Gbps    |\n| 96  | 32 Gbps  | 100 Gbps    | 7 Gbps  | 25 Gbps    |\n### General-purpose C3 VMs\nThe following table describes the egress bandwidth limits for C3 VMs.\n| vCPUs | Internal IP | Tier_1 Internal IP | External IP | Tier_1 External IP |\n|--------:|:--------------|:---------------------|:--------------|:---------------------|\n|  4 | 23 Gbps  | nan     | 7 Gbps  | nan     |\n|  8 | 23 Gbps  | nan     | 7 Gbps  | nan     |\n|  22 | 23 Gbps  | nan     | 7 Gbps  | nan     |\n|  44 | 32 Gbps  | 50 Gbps    | 7 Gbps  | 25 Gbps    |\n|  88 | 62 Gbps  | 100 Gbps    | 7 Gbps  | 25 Gbps    |\n|  176 | 100 Gbps  | 200 Gbps    | 7 Gbps  | 25 Gbps    |\n### General-purpose C3D VMs\n| vCPUs | Internal IP | Tier_1 Internal IP | External IP | Tier_1 External IP |\n|--------:|:--------------|:---------------------|:--------------|:---------------------|\n|  4 | 20 Gbps  | nan     | 7 Gbps  | nan     |\n|  8 | 20 Gbps  | nan     | 7 Gbps  | nan     |\n|  16 | 20 Gbps  | nan     | 7 Gbps  | nan     |\n|  30 | 20 Gbps  | 50 Gbps    | 7 Gbps  | 25 Gbps    |\n|  60 | 40 Gbps  | 75 Gbps    | 7 Gbps  | 25 Gbps    |\n|  90 | 60 Gbps  | 100 Gbps    | 7 Gbps  | 25 Gbps    |\n|  180 | 100 Gbps  | 150 Gbps    | 7 Gbps  | 25 Gbps    |\n|  360 | 100 Gbps  | 200 Gbps    | 7 Gbps  | 25 Gbps    |\n### Compute-optimized C2 VMs\nThe following table describes the egress bandwidth limits for C2 VMs.\n| vCPUs | Internal IP | Tier_1 Internal IP | External IP | Tier_1 External IP |\n|--------:|:--------------|:---------------------|:--------------|:---------------------|\n|  4 | 10 Gbps  | Not applicable (N/A) | 7 Gbps  | nan     |\n|  8 | 16 Gbps  | nan     | 7 Gbps  | nan     |\n|  16 | 32 Gbps  | nan     | 7 Gbps  | nan     |\n|  30 | 32 Gbps  | 50 Gbps    | 7 Gbps  | 7 Gbps    |\n|  60 | 32 Gbps  | 100 Gbps    | 7 Gbps  | 7 Gbps    |\n### Compute-optimized C2D VMs\nThe following table describes the egress bandwidth limits for C2D VMs.\n| vCPUs | Internal IP | Tier_1 Internal IP | External IP | Tier_1 External IP |\n|--------:|:--------------|:---------------------|:--------------|:---------------------|\n|  2 | 10 Gbps  | Not applicable (N/A) | 7 Gbps  | nan     |\n|  4 | 10 Gbps  | nan     | 7 Gbps  | nan     |\n|  8 | 16 Gbps  | nan     | 7 Gbps  | nan     |\n|  16 | 32 Gbps  | nan     | 7 Gbps  | nan     |\n|  32 | 32 Gbps  | 50 Gbps    | 7 Gbps  | 7 Gbps    |\n|  56 | 32 Gbps  | 50 Gbps    | 7 Gbps  | 7 Gbps    |\n|  112 | 32 Gbps  | 100 Gbps    | 7 Gbps  | 7 Gbps    |\n### Compute-optimized H3 VMs\nThe following table describes the egress bandwidth limits for H3 VMs.\n| vCPUs | Internal IP | External IP |\n|--------:|:--------------|:--------------|\n|  88 | 200 Gbps  | 1 Gbps  |\n### Memory-optimized M3 VMs\nThe following table describes the egress bandwidth limits for M3 VMs.\n| vCPUs | Internal IP | Tier_1 Internal IP | External IP | Tier_1 External IP |\n|--------:|:--------------|:---------------------|:--------------|:---------------------|\n|  32 | 32 Gbps  | nan     | 7 Gbps  | nan     |\n|  64 | 32 Gbps  | 50 Gbps    | 7 Gbps  | 25 Gbps    |\n|  128 | 32 Gbps  | 100 Gbps    | 7 Gbps  | 25 Gbps    |\n### Storage-optimized Z3 VMs\n**    Preview     ** This product or feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA products and features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\nThe following table describes the egress bandwidth limits for Z3 VMs.\n| vCPUs | Internal IP | Tier_1 Internal IP | External IP | Tier_1 External IP |\n|--------:|:--------------|:---------------------|:--------------|:---------------------|\n|  88 | 62 Gbps  | 100 Gbps    | 7 Gbps  | 25 Gbps    |\n|  176 | 100 Gbps  | 200 Gbps    | 7 Gbps  | 25 Gbps    |\n## Configure a VM with Tier_1 networking\nYou can enable Tier_1 networking during VM creation, if the VM uses the gVNIC network interface. You can also edit a VM to add or remove Tier_1 networking, provided the VM was created with the gVNIC interface.\nOptionally, you can also [enable faster network packet processing with DPDK](/compute/docs/networking/use-dpdk) to run performance-intensive applications on a VM that uses Tier_1 networking.\n### Create VMs and containers that use Tier_1 networking\nUse the Google Cloud console, the Google Cloud CLI or REST to add Tier_1 networking to a new VM or [container](/compute/docs/containers) .\n**Note:** The value \"-\" in the **Network interface** card drop down menu indicates that the NIC type can be either gVNIC or VirtioNet (VirtIO) depending on the [machine family type](/compute/docs/machine-resource#machine_type_comparison) . For some machine family types, only gVNIC is available for the network interface card. If both gVNIC and VirtIO are available for a VM, choose gVNIC instead of using the default, which is VirtIO.\n- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Select your project.\n- Click **Create instance** .\n- Specify a **Name** for your VM. For more information, see [Resource naming convention](/compute/docs/naming-resources#resource-name-format) .\n- Select a [region and zone](/compute/docs/regions-zones) that supports Tier_1 networking.\n- Select a **Machine configuration** for your VM. To create a VM with Tier_1 networking, you must select an N2, N2D, C2, C2D, C3, C3D, or Z3 ( [Preview](/products#product-launch-stages) ) VM.- Click the **General purpose** tab before selecting N2, N2D, C3, or C3D from the **Series** drop-down menu.\n- Click the **Compute optimized** tab before selecting C2 or C2D from the **Series** drop-down menu.\n- Click the **Storage optimized** tab before selecting Z3 from the **Series** drop-down menu.\n- In the **Machine type** drop-down menu, choose a machine type that aligns with the [bandwidth tier size requirements](#bandwidth-tiers) .\n- To select a gVNIC compatible operating system, in the **Boot disk** section, click **Change** , and then select a supported operating system or use the **Custom Images** tab to select a [custom image](/compute/docs/networking/using-gvnic#create-custom-image) .\n- Optional. In the **Firewall** section, choose your firewall rules.\n- To change your networking properties, click the heading **Advanced options** to expand the section.\n- Click **Networking** and then do the following:- In the **Network interface card** drop-down menu, select **gVNIC** .\n- Under **Network bandwidth** , select the **Enable per VM Tier_1 networking performance** checkbox.\n- If your VM has multiple NICs or you use IPv6 addresses, configure your **Network interfaces** .\n- Click **Create** .- In the Google Cloud console, activate Cloud Shell.\n- [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- Use the [gcloud compute instances create command](/sdk/gcloud/reference/compute/instances/create) to create a VM with a [gVNIC virtual network driver](/compute/docs/networking/using-gvnic) . Use the `--network-performance-configs` flag and the `--network-interface` flag to configure a network performance setting for a VM. If you don't specify these flags the VM is created with the default network performance configuration.To create a VM running container images, use the [gcloud compute instances create-with-container command](/sdk/gcloud/reference/compute/instances/create-with-container) .```\ngcloud compute instances create VM_NAME \\\n --image=OS_IMAGE \\\n --machine-type=MACHINE_TYPE \\\n --network-performance-configs=total-egress-bandwidth-tier=TIER_1 \\\n --network-interface=nic-type=GVNIC\n```Replace the following:- : the name of the VM\n- : an image that supports [gVNIC image](/compute/docs/images/os-details#networking) \n- : a machine type that supports  a [high-bandwidth configuration](#bandwidth-tiers) \nFor example:```\n gcloud compute instances create instance-1 \\\n  --network-performance-configs=total-egress-bandwidth-tier=TIER_1 \\\n  --network-interface=nic-type=GVNIC \\\n  --image-family=rocky-linux-8-optimized-gcp \\\n  --image-project=rocky-linux-cloud \\\n  --machine-type=n2-standard-32\n \n```Call the Compute Engine API [instances.insert method](/compute/docs/reference/rest/v1/instances/insert) to create a VM with a high-bandwidth network configuration. Within the request body:- Set the`networkPerformanceConfig`parameters to`totalEgressBandwidthTier`and`TIER_1`.\n- Set the`networkInterface`parameters to`nicType`and`GVNIC`.\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances\n{\n \"name\": VM_NAME,\n \"description\": string,\n ...\n \"networkPerformanceConfig\": {\n  \"totalEgressBandwidthTier\": TIER_1\n },\n \"networkInterfaces\": [  {\n  \"nicType\": \"GVNIC\"\n },\n ...\n ]\n }\n```\nReplace the following:- : your project ID\n- : the zone where you want to create the VM\n- : the name of the VM\n### Update a VM to include Tier_1 networking\nRefer to the [Updating instance properties](/compute/docs/instances/update-instance-properties#update) documentation to ensure you are meeting all the requirements to successfully update your VM. Use the Google Cloud console, the Google Cloud CLI or REST to update a VM.\nYou can modify an existing VM to change the network configuration to include or exclude per VM Tier_1 networking performance. Your VM must already have a gVNIC interface associated with it; you can't edit your VM to add a network interface. To update the network configuration, you must stop and restart the VM.\n- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Select your project.\n- Click the name of the VM that you want to modify.\n- **Stop** the VM.\n- Select **Edit** .\n- If your VM was originally configured with a gVNIC card, select the **Enable per VM Tier_1 networking performance** checkbox to add per VM Tier_1 networking performance, or deselect the checkbox to remove this feature from your VM.\n- **Save** your changes.\n- **Restart** your VM.- In the Google Cloud console, activate Cloud Shell.\n- [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- Export your VM's information to a `.yaml` file using the [gcloud compute instances export command](/sdk/gcloud/reference/compute/instances/export) .```\ngcloud compute instances export VM_NAME \\\n --zone=ZONE --destination=PATH_TO_FILE\n```Replace the following:- : the name of the VM\n- : the name of the zone where the VM is located\n- : a filename with a `.yaml` extension.For example:```\ngcloud compute instances export instance-1 \\\n --zone=europe-west1-c --destination=test-file.yaml\n```\n- Open the [Cloud Shell Editor](/shell/docs/editor-overview) , or the editor of your choice.\n- Open the`.yaml`file you created.\n- Go to the end of the file and add the following   information:```\nnetworkPerformanceConfig:\n totalEgressBandwidthTier: TIER_1\n```Setting `totalEgressBandwidthTier` to `TIER_1` adds  Tier_1 networking. Setting it to `DEFAULT` removes the  configuration.\n- Use the [gcloud compute instance update-from-file command](/sdk/gcloud/reference/compute/instances/update-from-file) to update the VM with the changes in the file.```\ngcloud compute instances update-from-file VM_NAME \\\n --source=PATH_TO_FILE \\\n --most-disruptive-allowed-action=RESTART\n```Replace the following:- : the name of the VM\n- : your`.yaml`filename\nThe `--most-disruptive-allowed-action=RESTART` flag  setting automatically restarts your VM with the updated  configuration.Call the [instances.update method](/compute/docs/reference/rest/v1/instances/update) to modify the network configuration.\n```\nPUT https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances/RESOURCE_ID?most_disruptive_allowed_action=RESTART\n{\n \"networkPerformanceConfig\":{\n  \"totalEgressBandwidthTier\": \"TIER_1\"\n },\n...\n}\n```\nSetting `totalEgressBandwidthTier` to `TIER_1` adds Tier_1 networking. Setting it to `DEFAULT` removes the configuration.\nReplace the following:- : your project ID\n- : the zone where your VM resides\n- : the name of your VM\nThe `most_disruptive_allowed_action=RESTART` query parameter automatically restarts your VM with the updated configuration.\n### Verify high-bandwidth configuration in a VM\nUse the Google Cloud console, the Google Cloud CLI or REST to generate a description of an existing VM or an existing VM running container images to verify the VM's bandwidth tier.\n- In the Google Cloud console, go to the **VM instances** page. [Go to VM instances](https://console.cloud.google.com/compute/instances) \n- Select your project and click **Continue** .\n- Click the VM name to see its configuration details and see if the VM uses per VM Tier_1 networking performance.- In the Google Cloud console, activate Cloud Shell.\n- [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- Use the [gcloud compute instances describe command](/sdk/gcloud/reference/compute/instances/describe) to check if your VM uses per VM Tier_1 networking performance.For example:```\n gcloud compute instances describe VM_NAME \\\n  --format=\"text(name, networkPerformanceConfig)\"\n \n```The output is similar to the following:```\n name: instance-1\n networkPerformanceConfig.totalEgressBandwidthTier:TIER_1\n \n```If the output shows the value `DEFAULT` , then Tier_1 networking  isn't enabled.Call the Compute Engine API [instances.get method](/compute/docs/reference/rest/v1/instances/get) to view the network configuration.\n```\nGET https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/zones/ZONE/instances/RESOURCE_ID/\n```\nReplace the following:- : your project name\n- : the zone where your VM resides\n- : the name of your VM\nThe output should contain the following lines:\n```\n{\n \"name\": RESOURCE_ID,\n \"description\": string,\n ...\n \"networkPerformanceConfig\": {\n  \"totalEgressBandwidthTier\": \"TIER_1\"\n },\n ...\n }\n```\nIf the output shows the value `DEFAULT` , then Tier_1 networking is not enabled.\n### Create an instance template with Tier_1 networking\nUse the Google Cloud console, the Google Cloud CLI or REST to create an instance template with per VM Tier_1 networking performance. Refer to the [Creating an instance template](/compute/docs/instance-templates/create-instance-templates) documentation to ensure you are meeting all the requirements to create your VM instance template.\n- In the Google Cloud console, go to the **Instance templates** page. [Go to Instance templates](https://console.cloud.google.com/compute/instanceTemplates/list) \n- Click **Create instance template** .\n- Enter values for the following fields, or accept the default values.\n- Specify a **Name** for your instance template. For more information, see [Resource naming convention](/compute/docs/naming-resources#resource-name-format) .\n- Select a [region and zone](/compute/docs/regions-zones) that supports Tier_1 networking.\n- Select a **Machine configuration** for your VM. To create a VM with Tier_1 networking, you must select an N2, N2D, C2, C2D, C3, C3D, or Z3 ( [Preview](/products#product-launch-stages) ) VM.- Click the **General purpose** tab before selecting N2, N2D, C3, or C3D from the **Series** drop-down menu.\n- Click the **Compute optimized** tab before selecting C2 or C2D from the **Series** drop-down menu.\n- Click the **Storage optimized** tab before selecting Z3 from the **Series** drop-down menu.\n- In the **Machine type** drop-down menu, choose a machine type that aligns with the [bandwidth tier size requirements](#bandwidth-tiers) .\n- In the **Boot disk** section, click **Change** , and then select a gVNIC-compatible or [custom image](/compute/docs/networking/using-gvnic#create-custom-image) .\n- Optional. In the **Firewall** section, choose your firewall rules.\n- Expand the **Advanced options** section to change your networking properties.\n- Click **Networking** and then do the following:- In the **Network interface card** drop-down menu, select **gVNIC** . **Note:** The value \"-\" in the Network interface card drop down menu indicates that the NIC type can be either gVNIC or VirtioNet (VirtIO) depending on the machine family type. For some machine family types, only gVNIC is available for the network interface card. If both gVNIC and VirtIO are available for a VM, choose gVNIC instead of using the default, which is VirtIO.\n- Under **Network bandwidth** , select the **Enable per VM Tier_1 networking performance** checkbox.\n- If your VM has multiple NICs or you use IPv6 addresses, configure your **Network interfaces** .\n- Click **Create** .- In the Google Cloud console, activate Cloud Shell.\n- [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- At the bottom of the Google Cloud console, a [Cloud Shell](/shell/docs/how-cloud-shell-works) session starts and displays a command-line prompt. Cloud Shell is a shell environment  with the Google Cloud CLI  already installed and with values already set for  your current project. It can take a few seconds for the session to initialize.\n- Use the [gcloud compute instance-templates create command](/sdk/gcloud/reference/compute/instance-templates/create) with the `--network-performance-configs` , and the `--network-interface` flags.```\n gcloud compute instance-templates create INSTANCE_TEMPLATE_NAME \\\n  --image=OS_IMAGE \\\n  --machine-type=MACHINE_TYPE \\\n  --network-performance-configs=total-egress-bandwidth-tier=TIER_1 \\\n  --network-interface=nic-type=GVNIC\n \n```Replace the following:- : the name of your instance  template\n- : an image that supports [gVNIC image](/compute/docs/images/os-details#networking) \n- : a machine type that supports  Tier_1 networking, as described in [Bandwidth tiers](#bandwidth-tiers) .\nFor example:```\n gcloud compute instance-templates create instance-template-1 \\\n  --image-family=rocky-linux-8-optimized-gcp \\\n  --image-project=rocky-linux-cloud \\\n  --network-performance-configs=total-egress-bandwidth-tier=TIER_1 \\\n  --machine-type=n2-standard-32 \\\n  --network-interface=nic-type=GVNIC\n \n```Call the Compute Engine API [instanceTemplates.insert method](/compute/docs/reference/rest/v1/instanceTemplates/insert) . Within the request body, set the `networkPerformanceConfig` parameter to `totalEgressBandwidthTier` and `TIER_1` . Set the `networkInterfaces` parameter to `nicType` and `GVNIC` .\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT_ID/global/instancesTemplates\n{\n \"name\": \"INSTANCE_TEMPLATE_NAME\",\n \"properties\": {\n \"machineType\": \"zones/ZONE/machineTypes/MACHINE_TYPE\",\n ...\n \"networkPerformanceConfig\": {\n  \"totalEgressBandwidthTier\": \"TIER_1\"\n },\n \"networkInterfaces\": [  {\n  \"nicType\": \"GVNIC\"\n },\n ...\n }\n```\nReplace the following:- : your project name\n- : your instance template name\n- : the zone where your VM is located\n- : the machine type of the VM\n- : the name of your VM## Benchmark a higher bandwidth configuration\nYou can [run a benchmark test](/compute/docs/networking/benchmarking-higher-bandwidth-vms#performing_the_benchmark) to check your VM's performance with per VM Tier_1 networking performance. Be sure to [remove the benchmarking resources](/compute/docs/networking/benchmarking-higher-bandwidth-vms#remove-benchmark-vms) you created during testing to avoid unexpected resource charges.\n## What's next\n- [High-bandwidth pricing](/compute/all-pricing#high_bandwidth_configuration)", "guide": "Compute Engine"}