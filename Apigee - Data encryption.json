{"title": "Apigee - Data encryption", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Data encryption\nYou are currently viewing version 1.1 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nBy default, the following data is stored in the hybrid runtime plane:\n- Key management system (KMS) data\n- Key-value map (KVM) data\n- Cache data\nData encryption does not require any special configuration on your part. However, if for some reason you want to use your own encryption keys (replacing the default ones) you can do so, as explained in this topic.\n", "content": "## \n Encryption key scope\nEncryption keys for KMS, KVM, and cache have scope. For example, KMS keys have scope. This means that the key is used to encrypt KMS data for the entire organization. The following table lists the scope for each type of key:\n| Encryption key | Scope                                                               |\n|:-----------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| KMS    | Organization only                                                            |\n| KVM    | Organization or environment If a KVM policy specifies apiproxy or policy (API proxy revision) scope, the organization level key is used to encrypt the data. For a general overview of how KVMs are used in Apigee Edge, see Working with key-value maps. |\n| Cache   | Environment only                                                            |\n## \n About the default encryption keys\nBy default, Apigee hybrid provides a set of Base64-encoded keys that are used to encrypt KVM, KMS, and cache data. The Apigee hybrid installer stores the keys in the runtime plane as [Kubernetes Secrets](https://kubernetes.io/docs/concepts/configuration/secret/) , and uses them to encrypt your data with AES-128 standard encryption. The keys are under your control; the hybrid management plane is never aware of them at any time.\nThe default keys will work for most use cases. If you want to change the default encryption keys, do so when you initially install Apigee hybrid into a new cluster. You cannot later change the encryption keys once the runtime data is encrypted.\n## \n Changing the default encryption keys\nAlthough not required, you can change any of the default encryption keys if you wish. To replace one or more default keys, follow these steps:\n- Copy the following stanzas into your overrides file. This configuration lets you change the KMS and KVM encryption keys for the organization level and the KVM and cache encryption keys for the environment level:```\ndefaults:\n org:\n kmsEncryptionKey: base64-encoded-key\n kvmEncryptionKey: base64-encoded-key\n env:\n kvmEncryptionKey: base64-encoded-key\n cacheEncryptionKey: base64-encoded-key\n```\n- Generate a new key for each key you wish to replace. Each key must be a Base64-encoded string that is exactly **16, 24, or 32 bytes long** . See also [How to create an encoded key](#how-to-create-an-encoded-key) .\n- Replace the default keys with new ones. In this example, all of the default keys are  replaced with keys:```\ndefaults:\n org:\n kmsEncryptionKey: \"JVpTb1FwI0otUHo2RUdRN3pnVyQqVGlMSEFAJXYmb1c=\"\n kvmEncryptionKey: \"T3VkRGM1U3cpOFgtNk9fMnNZU2NaSVA3I1BtZWxkaUU=\"\n env:\n kvmEncryptionKey: \"Q3h6M3R6OWdBeipxTURfKjQwQVdtTng2dU5mODFHcyE=\"\n cacheEncryptionKey: \"b2NTVXdKKjBzN0NORF9XSm9tWFlYKGJ6NUhpNystJVI=\"\n```\n- Apply the overrides file to your cluster.## \n A note about backward compatibility\nIf you were to remove the encryption keys in your overrides file the first  time you install Apigee hybrid, you would  effectively disable encryption and values would be stored unencrypted.  If at a later time you enable encryption by providing keys, exiting data remains unencrypted; however, any future data that is added will be encrypted. The system will continue working normally with the unencrypted data and the new encrypted data.\nAlso, note that you cannot later change the encryption keys once the runtime data is encrypted.\n## \n How to create an encoded key\nNOTE: You must generate your key from ASCII characters. Apigee hybrid does not support using non-printable characters, such as characters generated using the openssl random command.\nA properly formatted Base-64-encoded key is required for KVM, KMS, and cache encryption. The key used for any of these purposes must be Base-64 encoded from a string that is 16, 24, or 32 bytes long, as explained in the following steps:\nThe key string length requirement exists because the [Advanced Encryption Standard](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) (AES) cipher works on a block size of 128 bits, but can take three different  key lengths: 128, 192, and 256 bits (16, 24, or 32 bytes).\nThe following example commands generate suitable, randomly generated, 32 character, Base64-encoded strings that do not include non-printable characters:\n```\nLC_ALL=C tr -dc A-Za-z0-9_\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\\\-+= < /dev/urandom | head -c 32 | openssl base64\nPSFvX0BPc1Z2NVklcXdxcF8xR0N4MV4temFveStITU4=\n```\nor\n```\nLC_ALL=C tr -dc \"[:print:]\" < /dev/urandom | head -c 32 | openssl base64\n```", "guide": "Apigee"}