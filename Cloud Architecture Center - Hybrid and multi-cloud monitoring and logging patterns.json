{"title": "Cloud Architecture Center - Hybrid and multi-cloud monitoring and logging patterns", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Hybrid and multi-cloud monitoring and logging patterns\nLast reviewed 2023-03-29 UTC\nThis document discusses monitoring and logging architectures for hybrid and multi-cloud deployments, and provides best practices for implementing them by using Google Cloud. With this document, you can identify which patterns and products are best suited for your environments.\nEvery enterprise has a unique portfolio of application workloads that place requirements and constraints on the architecture of a hybrid or multi-cloud setup. Although you must design and tailor your architecture to meet these constraints and requirements, you can rely on some common patterns.\nThe patterns covered in this document fall into two categories:\n- In aarchitecture, all monitoring and logging is centralized, with the aim of providing a single point of access and control.\n- In aarchitecture, sensitive application data is segregated from less sensitive operations data, with the aim of meeting compliance requirements for sensitive data.", "content": "## Choosing your architecture pattern\nYou can use the decision tree in the following diagram to identify the best architecture for your use case.\nDetails of each architecture are discussed further in this document, but at a high level, your choices are as follows:\n- Export from Monitoring to legacy solution.\n- Export directly to legacy solution.\n- Use Monitoring with Prometheus and Fluentd or Fluent Bit.\n- Use Monitoring with observIQ BindPlane.## Single pane of glass architecture\nA common goal for a hybrid system is to integrate monitoring and logging information from various sources across multiple applications and environments into a single display. This type of display is called a .\nThe following diagram illustrates this pattern where monitoring and logging data from all applications, both on-premises and in the cloud, is centralized into a single repository hosted in the cloud.\nThis architecture has the following advantages:\n- You have a single, consistent view for all monitoring and logging.\n- You have a single place to manage data storage and retention.\n- You get centralized access control and auditing. However, you still need to ensure the security of data in transit to the central repository.## Monitoring as a single pane of glass\n[Cloud Monitoring](/monitoring) is a Google-managed monitoring and management solution for services, containers, applications, and infrastructure. For a single pane of glass and a robust storage solution for metrics, logs, traces, and events, use Google Cloud Observability. The suite also provides a complete suite of observability tooling, such as dashboards, reporting, and alerting.\nAll Google Cloud products and services support integration with Monitoring. In addition, there are several integrated tools that you can use to extend Monitoring to hybrid and on-premises resources.\nThe following best practices apply to all architectures using Monitoring as a single pane of glass:\n- To fulfill compliance requirements for log retention, set up [log sinks for your organization](/solutions/exporting-stackdriver-logging-for-compliance-requirements) .\n- For fast analysis of log events, set up [log exports to BigQuery for security and access analytics](/solutions/exporting-stackdriver-logging-for-security-and-access-analytics) .\n- To analyze logs that are stored in your log bucket, run SQL queries through [Log Analytics](/logging/docs/log-analytics) .\n- For projects containing sensitive data, consider enabling [Data Access audit logs](/logging/docs/audit) , so you can track who has accessed the data.\n- To remove sensitive information, such as Social Security numbers, credit card numbers, and email addresses, you can filter log data. You can filter by using [a custom Fluentd configuration](/solutions/customizing-stackdriver-logs-fluentd#filtering_information_from_the_logfile) , or [a custom Fluent Bit configuration](https://cloud.google.com/community/tutorials/kubernetes-engine-customize-fluentbit) , or [ingest with logs exclusions](/logging/docs/exclusions) . You can also export unfiltered logs separately to meet compliance requirements.\n- To optimize your costs, [analyze your Monitoring and Logging usage and implement cost controls](/solutions/stackdriver-cost-optimization) . Monitoring and Logging are managed services with volume-based charges for logs and metrics.\n### Hybrid monitoring and logging with Monitoring and BindPlane by observIQ\nWith BindPlane from Google's partner [observIQ](https://observiq.com) , you can import monitoring and logging data from both on-premises VMs and other cloud providers, such as Amazon Web Services (AWS), Microsoft Azure, Alibaba Cloud, and IBM Cloud into Google Cloud. The following diagram shows how Monitoring and BindPlane can provide a single pane of glass for a hybrid cloud.\nThis architecture has the following advantages:\n- In addition to monitoring resources like VMs, BindPlane has built-in deep integration for [over 50 popular data sources](https://observiq.com/solutions/bindplane-comparison) .\n- [There are no additional licensing costs for using BindPlane](/stackdriver/bindplane) . BindPlane metrics are imported into Monitoring as custom metrics, which are [chargeable](/monitoring/pricing#monitoring-costs) . Likewise, BindPlane logs are charged at the same rate as other Logging logs.\nFor more details about implementing this pattern, see [Logging and monitoring on-premises resources with BindPlane](/architecture/logging-and-monitoring-on-premises-resources-with-bindplane) .\n### Hybrid Google Kubernetes Engine monitoring with Prometheus and Monitoring\nWith [Google Cloud Managed Service for Prometheus](/stackdriver/docs/managed-prometheus) , a popular open source monitoring solution fully managed by Google Cloud, you can monitor applications running on multiple Kubernetes clusters with Monitoring. This architecture is useful when running Kubernetes workloads distributed across Google Kubernetes Engine (GKE) on Google Cloud and GKE on VMware in your on-premises data center, because it provides a unified interface across both. The following diagram shows how to use Prometheus and the Monitoring collectors for data collection.\nThis architecture has the following advantages:\n- Consistent Kubernetes metrics across cloud and on-premises environments.\n- It lets you globally monitor and alert on your workloads by using Prometheus, without having to manually manage and operate Prometheus at scale.\n- There are no additional licensing costs for using Prometheus. Prometheus metrics are imported into Monitoring. The imports are [chargeable](/monitoring/pricing#monitoring-costs) and priced by the number of samples ingested.\nThis architecture has the following disadvantages:\n- Prometheus supports monitoring only, so logging has to be configured separately. The following section discusses a common option for logging using either Fluentd or Fluent Bit.\nWe recommend the following best practice:\n- By default, Prometheus collects all exposed metrics, each of which becomes a chargeable metric. To avoid unexpected costs, consider implementing [Monitoring cost controls](/stackdriver/docs/managed-prometheus/cost-controls) .\n### Hybrid GKE logging with Fluentd or Fluent Bit and Cloud Logging\nWith [Fluentd](https://www.fluentd.org/) or [Fluent Bit](https://fluentbit.io/) , a popular open source logging agent and Cloud Logging, you can ingest logs from applications running on multiple GKE clusters to Cloud Logging. This architecture is useful when running Kubernetes workloads distributed across GKE on Google Cloud and GKE on VMware in your on-premises data center, because it provides a unified interface across both. The following diagram illustrates the flow of logs.\nThis architecture has the following advantages:\n- You can have consistent Kubernetes logging across cloud and on-premises environments.\n- You can customize Logging to filter out sensitive information.\n- There are no additional licensing costs for using Fluentd or Fluent Bit. Logs that are imported into Logging by using Fluentd or Fluent Bit are [chargeable](/logging/pricing#logging-costs) .\nThis architecture has the following disadvantages:\n- Fluentd and Fluent Bit support logging only, so monitoring has to be configured separately. The previous section discusses a common option for [monitoring with Prometheus](\n##hybrid_google_kubernetes_engine_monitoring_with_prometheus_and_cloud_logging) .\nFor more details about implementing this pattern, see [Customizing Logging logs for Google Kubernetes Engine with Fluentd](/solutions/customizing-stackdriver-logs-fluentd) or [Customizing Logging logs for Google Kubernetes Engine with Fluent Bit](/community/tutorials/kubernetes-engine-customize-fluentbit) .\n## Partner services as single panes of glass\nIf you are already using a third-party monitoring or logging service such as Datadog or Splunk, you might not want to move to Logging. If so, you can export data from Google Cloud to many common monitoring and logging services. You can choose to use an integrated monitoring and logging service, or select separate monitoring and logging services that best fit your needs.\n### Export from Logging to partner services\nIn this pattern, you authorize the partner's monitoring service, such as [Datadog](https://www.datadoghq.com/partner/gcp/) , to connect to the Cloud Monitoring API. This authorization lets the service ingest all the metrics available to Logging, so Datadog can function as a single pane of glass for monitoring.\nFor logging data, Logging provides exports (log sinks) to [Pub/Sub](/pubsub) . These exports provide a performant and resilient method for partner logging services such as [Elastic](https://www.elastic.co/partners/google-cloud) and [Splunk](/solutions/exporting-stackdriver-logging-for-splunk) to ingest large volumes of logs from Logging in real time, so these partner services can serve a single pane of glass for logs.\nThe combined architecture for logging and monitoring is shown in the following diagram.\nThis architecture has the following advantages:\n- You can continue to use familiar existing tools.\n- Google Cloud Support continues to have access to Logging logs for troubleshooting.\nThis architecture has the following disadvantages:\n- Partner solutions are typically externally hosted, which means they might not be available or collect data if network connections are disrupted. Sometimes, you can mitigate this risk by self-hosting, but at the cost of having to maintain the infrastructure for the solution yourself.\n- Externally hosted dashboards aren't directly available to Google Cloud Support. This lack of availability can slow down troubleshooting and mitigation.\n- Commercial partner solutions might entail more licensing fees.\nSome detailed example integrations include the following:\n- Datadog: [Monitoring Compute Engine metrics](https://www.datadoghq.com/blog/monitoring-google-compute-engine-performance/) and [Collect Logging Logs](https://www.datadoghq.com/blog/collect-stackdriver-logs-with-datadog/) \n- Elastic: [Exporting Logging logs to Elastic Cloud](/blog/products/data-analytics/export-google-cloud-data-into-elasticsearch-with-dataflow-templates) \n- Splunk: [Scenarios for exporting Logging](/solutions/exporting-stackdriver-logging-for-splunk) \n### Analyze metrics from Prometheus and Logging with Grafana\n[Grafana](https://grafana.com) is a popular open source monitoring tool commonly paired with [Prometheus](https://prometheus.io/) for metrics collection. In this architecture, you use Prometheus as the on-premises collection layer and use Grafana as a single pane of glass for both Google Cloud and on-premises resources. The following diagram shows a sample architecture that analyzes metrics from Google Cloud and on-premises.\nThis architecture has the following advantages:\n- It's suitable for hybrid environments with both VMs and containers.\n- If your organization is already using Prometheus and Grafana, your users can continue to use them.\nThis architecture has the following disadvantages:\n- Prometheus supports monitoring only, so logging has to be configured separately, for example, using [Fluentd](#export_logs_using_fluentd) or the [Cloud Logging plugin for Grafana](https://grafana.com/grafana/plugins/googlecloud-logging-datasource/) .\n- Prometheus is open source and extensible, but supports only a [limited range of enterprise software integrations](https://prometheus.io/docs/instrumenting/exporters/) .\n- Prometheus and Grafana are third-party tools and not official Google products. Google doesn't offer support for Prometheus or Grafana.\nFor more information, see [Better troubleshooting with a Cloud Logging plugin for Grafana](/blog/products/devops-sre/cloud-logging-data-source-plugin-for-grafana) .\n### Export logs using Fluentd\nAn [earlier pattern](#hybrid_gke_logging_with_fluentd_and_cloud_monitoring) covered using Fluentd or Fluent Bit as a log collector for Logging. The same basic architecture can also be used for other logging or data analytics systems that support Fluentd or Fluent Bit, including [BigQuery](/bigquery) , Elastic, and Splunk. The following diagram illustrates this pattern.\nThis architecture has the following advantages:\n- It's suitable for hybrid environments with both VMs and containers.\n- Fluentd can read from many [data sources](https://www.fluentd.org/datasources) , including system logs.\n- Fluentd offers [output plugins](https://www.fluentd.org/plugins/all) for many popular third-party logging and data analytics systems.\n- Fluent Bit can also read from many [inputs](https://docs.fluentbit.io/manual/pipeline/inputs) , including system logs.\n- Fluent Bit offers [outputs](https://docs.fluentbit.io/manual/pipeline/outputs) for many popular third-party logging and data analytics systems.\nThis architecture has the following disadvantages:\n- Fluentd and Fluent Bit support logs only, so monitoring has to be configured separately. The previous section discusses common options for [monitoring with Prometheus and Grafana](#export_metrics_from_prometheus_and_cloud_logging_to_grafana) .\n- Fluentd and Fluent Bit are third-party tools and not official Google products. Google doesn't offer support for them.\n- Exported logs are not available to Google Cloud Support for troubleshooting. In particular, Google does not offer [support for GKE on VMware](/anthos/clusters/docs/on-prem/getting-support) clusters without Logging enabled.## Separate application and operations data\nSingle pane of glass architectures require streaming application monitoring and logging data to the cloud. However, you might have regulatory or compliance requirements that either require keeping customer data on-premises or place strict constraints on what data can be stored in the public cloud.\nA useful pattern for these hybrid environments is to separate sensitive application data from lower-risk operations data, as illustrated in the following diagram.### Separate application and system data with GKE Enterprise\nGKE Enterprise on VMware, a part of the GKE Enterprise suite, includes Grafana for monitoring on-premises clusters. In addition, you can opt to install a partner solution such as Elastic Stack or Splunk for logging. Using these solutions, you can ingest and view sensitive application data entirely on-premises, while still exporting system data to Logging on Google Cloud. The following diagram illustrates this architecture.\nThis architecture has the following advantages:\n- Sensitive application data is kept entirely on-premises.\n- On-premises monitoring and logging have no cloud dependencies and remain available even if the network connection is interrupted.\n- All GKE system data, both on-premises and Google Cloud, is centralized in Logging and is also accessible to Google Cloud Support as needed.\nFor an example implementation using Elastic Stack as the partner solution, see [Monitoring GKE Enterprise with the Elastic Stack](/solutions/partners/monitoring-gke-on-prem-with-the-elastic-stack) .\n## What's next\n- Learn more about hybrid and multi-cloud best practices with the [Hybrid and multicloud patterns and practices](/architecture/hybrid-multicloud-patterns) series, including [architecture patterns](/architecture/hybrid-multicloud-patterns-and-practices) and [secure networking architecture patterns](/architecture/hybrid-multicloud-secure-networking-patterns) .\n- Enroll in the [Cloud Kubernetes Best Practice quest](/blog/topics/training-certifications/on-a-quest-learn-gke-security-and-monitoring-best-practices) for hands-on exercises about observability and more on GKE.\n- Explore reference architectures, diagrams, and best practices about Google Cloud. Take a look at our [Cloud Architecture Center](/architecture) .", "guide": "Cloud Architecture Center"}