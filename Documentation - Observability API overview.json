{"title": "Documentation - Observability API overview", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Observability API overview\nThe Observability API uses Kubernetes custom resources and relies on the Kubernetes Resource Model (KRM) for provisioning and managing logging and monitoring resources.\nUse the Observability API to manage the lifecycle of Observability services in a given organization or custom project. The lifecycle of Observability services includes operations such as install, upgrade, and uninstall. You must deploy a custom resource to your project according to the Observability service you want to manage.\nMany Observability services are available automatically for a provisioned project, for example, logging, monitoring, and alerting.\n", "content": "## Service endpoint\nThe following URLs are the API endpoints for the Observability KRM API:\n- **Logging group:** ```\nhttps://GDCH_API_SERVER_ENDPOINT/apis/logging.gdc.goog/v1\n```\n- **Monitoring group:** ```\nhttps://GDCH_API_SERVER_ENDPOINT/apis/monitoring.gdc.goog/v1\n```\n- **Observability group:** ```\nhttps://GDCH_API_SERVER_ENDPOINT/apis/observability.gdc.goog/v1\n```\nReplace `` with the endpoint of the GDCH API server.\n## Discovery document\nUse the `kubectl proxy --port=8001` command to open a proxy to the API server on your local machine. From there, you can access the discovery document at one of the following URLs:\n- `http://127.0.0.1:8001/apis/logging.gdc.goog/v1`\n- `http://127.0.0.1:8001/apis/monitoring.gdc.goog/v1`\n- `http://127.0.0.1:8001/apis/observability.gdc.goog/v1`## Example resources\nThis section contains example resources that use the Observability KRM API.\n### Logging group\nThe following is an example of a `LoggingTarget` custom resource to collect logs from specific services on the `project-1` project:\n```\n# Configures a log scraping jobapiVersion: logging.gdc.goog/v1kind: LoggingTargetmetadata:\u00a0 # Choose a namespace that matches the namespace of the workload pods\u00a0 namespace: project-1\u00a0 name: my-service-logging-targetspec:\u00a0 # Choose a matching pattern that identifies the pods for this job\u00a0 # Optional\u00a0 # Relationship between different selectors: 'AND'\u00a0 selector:\u00a0 \u00a0 # The clusters to collect logs from.\u00a0 \u00a0 # The default configuration is to collect logs from all clusters.\u00a0 \u00a0 # The relationship between different clusters is an 'OR' relationship.\u00a0 \u00a0 # For example, the value '[\"admin\", \"system\"]' indicates to consider\u00a0 \u00a0 # the admin cluster 'OR' the system cluster.\u00a0 \u00a0 # Optional\u00a0 \u00a0 matchClusters:\u00a0 \u00a0 - cluster-1\u00a0 \u00a0 - cluster-2\u00a0 \u00a0 # The pod name prefixes to collect logs from.\u00a0 \u00a0 # The Observability platform scrapes all pods with names\u00a0 \u00a0 # that start with the specified prefixes.\u00a0 \u00a0 # The values must contain '[a-z0-9-]' characters only.\u00a0 \u00a0 # The relationship between different list elements is an 'OR' relationship.\u00a0 \u00a0 # Optional\u00a0 \u00a0 matchPodNames:\u00a0 \u00a0 \u00a0 - pod-1\u00a0 \u00a0 \u00a0 - pod-2\u00a0 \u00a0 # The container name prefixes to collect logs from.\u00a0 \u00a0 # The Observability platform scrapes all containers with names\u00a0 \u00a0 # that start with the specified prefixes.\u00a0 \u00a0 # The values must contain '[a-z0-9-]' characters only.\u00a0 \u00a0 # The relationship between different list elements is an 'OR' relationship.\u00a0 \u00a0 # Optional\u00a0 \u00a0 matchContainerNames:\u00a0 \u00a0 \u00a0 - container-1\u00a0 \u00a0 \u00a0 - container-2\u00a0 # Choose the predefined parser for log entries.\u00a0 # Use parsers to map the log output to labels and extract fields.\u00a0 # Specify the log format.\u00a0 # Optional\u00a0 # Options: klog_text, klog_json, klogr, gdch_json, json\u00a0 parser: klog_text\u00a0 # Specify an access level for log entries.\u00a0 # The default value is 'ao'.\u00a0 # Optional\u00a0 # Options: ao, pa, io\u00a0 logAccessLevel: ao\u00a0 # Specify a service name to be applied as a label\u00a0 # For user workloads consider this field as a workload name\u00a0 # Required\u00a0 serviceName: service-name\u00a0 # The additional static fields to apply to log entries.\u00a0 # The field is a key-value pair, where the field name is the key and\u00a0 # the field value is the value.\u00a0 # Optional\u00a0 additionalFields:\u00a0 \u00a0 app: workload2\u00a0 \u00a0 key: value\n```\n### Monitoring group\nThe following is an example of a `MonitoringTarget` custom resource to collect metrics from workloads on the `project-1` project:\n```\napiVersion: monitoring.gdc.goog/v1kind: MonitoringTargetmetadata:\u00a0 # Choose the same namespace as the workload pods\u00a0 namespace: project-1\u00a0 name: stringspec:\u00a0 # Choose matching pattern that identifies pods for this job\u00a0 # Optional\u00a0 # Relationship between different selectors: AND\u00a0 selector:\u00a0 \u00a0 # Choose clusters to consider for this job\u00a0 \u00a0 # Optional\u00a0 \u00a0 # List\u00a0 \u00a0 # Default: All clusters applicable to this project.\u00a0 \u00a0 # Relationship between different list elements: OR\u00a0 \u00a0 matchClusters:\u00a0 \u00a0 \u00a0 - string\u00a0 \u00a0 # Choose pod-labels to consider for this job\u00a0 \u00a0 # Optional: Map of key-value pairs.\u00a0 \u00a0 # Default: No filtering by label.\u00a0 \u00a0 # Relationship between different pairs: AND\u00a0 \u00a0 matchLabels:\u00a0 \u00a0 \u00a0 key1: value1\u00a0 \u00a0 # Choose annotations to consider for this job\u00a0 \u00a0 # Optional: Map of key-value pairs\u00a0 \u00a0 # Default: No filtering by annotation\u00a0 \u00a0 # Relationship between different pairs: AND\u00a0 \u00a0 matchAnnotations:\u00a0 \u00a0 \u00a0 key1: value1\u00a0 # Configure the endpoint exposed for this job\u00a0 podMetricsEndpoints:\u00a0 \u00a0 # Choose port either via static value or annotation\u00a0 \u00a0 # Optional\u00a0 \u00a0 # Annotation takes priority\u00a0 \u00a0 # Default: static port 80\u00a0 \u00a0 port:\u00a0 \u00a0 \u00a0 value: integer\u00a0 \u00a0 \u00a0 annotation: string\u00a0 \u00a0 # Choose path either via static value or annotation\u00a0 \u00a0 # Optional\u00a0 \u00a0 # Annotation takes priority\u00a0 \u00a0 # Default: static path /metrics\u00a0 \u00a0 path:\u00a0 \u00a0 \u00a0 value: string\u00a0 \u00a0 \u00a0 annotation: string\u00a0 \u00a0 # Choose scheme either via static value (http or https) or annotation\u00a0 \u00a0 # Optional\u00a0 \u00a0 # Annotation takes priority\u00a0 \u00a0 # Default: static scheme http\u00a0 \u00a0 scheme:\u00a0 \u00a0 \u00a0 value: string\u00a0 \u00a0 \u00a0 annotation: string\u00a0 \u00a0 # Choose the frequency to scrape the metrics endpoint defined in podMetricsEndpoints\u00a0 \u00a0 # Optional\u00a0 \u00a0 # Default: 60s\u00a0 \u00a0 scrapeInterval: string\u00a0 \u00a0 # Dynamically rewrite the label set of a target before it gets scraped.\u00a0 \u00a0 # https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config\u00a0 \u00a0 # Optional\u00a0 \u00a0 # Default: No filtering by label\u00a0 \u00a0 metricsRelabelings:\u00a0 \u00a0 \u00a0 - sourceLabels:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 - string\u00a0 \u00a0 \u00a0 \u00a0 separator: string\u00a0 \u00a0 \u00a0 \u00a0 regex: string\u00a0 \u00a0 \u00a0 \u00a0 action: string\u00a0 \u00a0 \u00a0 \u00a0 targetLabel: string\u00a0 \u00a0 \u00a0 \u00a0 replacement: string\n```\n### Observability group\nThe following is an example of the `ObservabilityPipeline` custom resource to update the storage size for dashboards in the `platform-obs` project namespace:\n```\n# Configure observability pipelineapiVersion: observability.gdc.goog/v1kind: ObservabilityPipelinemetadata:\u00a0 # Don't change the namespace or name.\u00a0 namespace: platform-obs\u00a0 name: observability-configspec:\u00a0 ...\u00a0 monitoring:\u00a0 \u00a0 grafana:\u00a0 \u00a0 \u00a0 storageSize: 1Gi # Configure the new storage size for dashboards in the project.\u00a0 \u00a0 ...\n```", "guide": "Documentation"}