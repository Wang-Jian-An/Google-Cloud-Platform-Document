{"title": "Terraform on Google Cloud - Deploy a basic Flask web server by using Terraform", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Terraform on Google Cloud - Deploy a basic Flask web server by using Terraform\nIn this tutorial, you learn how to get started with Terraform by using Terraform to create a basic web server on Compute Engine.\nIn this tutorial, you do the following:\n- Use Terraform to create a VM in Google Cloud.\n- Start a basic Python Flask server.", "content": "## Costs\nIn this document, you use the following billable components of Google Cloud:\n[Compute Engine](/compute/all-pricing)\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) .\nWhen you finish the tasks that are described in this document, you can avoid continued billing by deleting the resources that you created. For more information, see [Clean up](#clean-up) .\n## Before you begin\nPrepare to start the tutorial.\n### Select or create a project\n- In the Google Cloud console, go to the project selector page. [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- Select or create a Google Cloud project. **Note** : If you don't plan to keep the  resources that you create in this procedure, create a project instead of  selecting an existing project. After you finish these steps, you can  delete the project, removing all resources associated with the project.### Set up permissions\nMake sure that you have the necessary [Compute Engine permissions](/compute/docs/access/iam) on your user account:\n- `compute.instances.*`\n- `compute.firewalls.*`\n[Go to the IAM page](https://console.cloud.google.com/iam-admin/iam)\n[Learn more](/iam/docs) about roles and permissions.\n### Enable the API\nEnable the Compute Engine API.\n[Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=compute.googleapis.com)### Start Cloud Shell\n[Cloud Shell](/shell/docs/using-cloud-shell) is a Compute Engine virtual machine.\nThe service credentials associated with this virtual machine are automatic, so there is no need to set up or download a service account key.\nTerraform is integrated with Cloud Shell, and Cloud Shell automatically authenticates Terraform, letting you get started with less setup.\n## Create the Compute Engine VM\nFirst, you define the VM's settings in a Terraform configuration file. Then, you run Terraform commands to create the VM in your project.\n### Create the directory\nIn Cloud Shell, create a new directory. In your new directory, create a `main.tf` file for the Terraform configuration. The contents of this file describe all of the Google Cloud resources to be created in the project.\n```\nmkdir tf-tutorial && cd tf-tutorial\n```\n```\nnano main.tf\n```\n### Create the Virtual Private Cloud network and subnet\nIn this section, you create a Virtual Private Cloud (VPC) network and subnet for the VM's network interface.\nAdd the following Terraform resources to the `main.tf` file that you created:\n- [google_compute_network](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/compute_network) \n- [google_compute_subnetwork](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/compute_subnetwork) \n[  storage/flask_google_cloud_quickstart/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/storage/flask_google_cloud_quickstart/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/storage/flask_google_cloud_quickstart/main.tf)\n```\nresource \"google_compute_network\" \"vpc_network\" {\n name     = \"my-custom-mode-network\"\n auto_create_subnetworks = false\n mtu      = 1460\n}\nresource \"google_compute_subnetwork\" \"default\" {\n name   = \"my-custom-subnet\"\n ip_cidr_range = \"10.0.1.0/24\"\n region  = \"us-west1\"\n network  = google_compute_network.vpc_network.id\n}\n```\n### Create the Compute Engine VM resource\nIn this section, you create a single Compute Engine instance running Debian. In this tutorial, you use the smallest [machine type](/compute/docs/machine-types) that's available. Later, you can upgrade to a larger machine type.\nAdd the following [google_compute_instance](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/compute_instance) Terraform resource to the `main.tf` file that you created.\n[  storage/flask_google_cloud_quickstart/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/storage/flask_google_cloud_quickstart/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/storage/flask_google_cloud_quickstart/main.tf)\n```\n# Create a single Compute Engine instance\nresource \"google_compute_instance\" \"default\" {\n name   = \"flask-vm\"\n machine_type = \"f1-micro\"\n zone   = \"us-west1-a\"\n tags   = [\"ssh\"]\n boot_disk {\n initialize_params {\n  image = \"debian-cloud/debian-11\"\n }\n }\n # Install Flask\n metadata_startup_script = \"sudo apt-get update; sudo apt-get install -yq build-essential python3-pip rsync; pip install flask\"\n network_interface {\n subnetwork = google_compute_subnetwork.default.id\n access_config {\n  # Include this section to give the VM an external IP address\n }\n }\n}\n```\nThe sample code sets the Google Cloud zone to `us-west1-a` . You can change this to a different [zone](/compute/docs/regions-zones#available) .\n### Initialize Terraform\nAt this point, you can run `terraform init` to add the necessary plugins and build the `.terraform` directory.\n```\nterraform init\n```\nOutput:\n```\nInitializing the backend...\nInitializing provider plugins...\n...\nTerraform has been successfully initialized!\n```\n### Validate the Terraform configuration\nOptionally, you can validate the Terraform code that you've built so far. Run `terraform plan` , which does the following:\n- Verifies that the syntax of`main.tf`is correct\n- Shows a preview of the resources that will be created\n```\nterraform plan\n```\nOutput:\n```\n...\nPlan: 1 to add, 0 to change, 0 to destroy.\nNote: You didn't use the -out option to save this plan, so Terraform can't\nguarantee to take exactly these actions if you run \"terraform apply\" now.\n```\n### Apply the configuration\nTo create the VM, run `terraform apply` .\n```\nterraform apply\n```\nWhen prompted, enter `yes` .\nTerraform calls Google Cloud APIs to set up the new VM. Check the [VM instances page](https://console.cloud.google.com/compute/instances) to see the new VM.\n## Run a web server on Google Cloud\nYour next steps are getting a web application created, deploying it to the VM, and creating a firewall rule to allow client requests to the web application.\n### Add a custom SSH firewall rule\nThe `default-allow-ssh` firewall rule in the `default` network lets you use SSH to connect to the VM. If you'd rather use your own custom firewall rule, you can add the following resource at the end of your `main.tf` file:\n[  storage/flask_google_cloud_quickstart/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/storage/flask_google_cloud_quickstart/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/storage/flask_google_cloud_quickstart/main.tf)\n```\nresource \"google_compute_firewall\" \"ssh\" {\n name = \"allow-ssh\"\n allow {\n ports = [\"22\"]\n protocol = \"tcp\"\n }\n direction  = \"INGRESS\"\n network  = google_compute_network.vpc_network.id\n priority  = 1000\n source_ranges = [\"0.0.0.0/0\"]\n target_tags = [\"ssh\"]\n}\n```\nRun `terraform apply` to create the firewall rule.\n### Connect to the VM with SSH\nValidate that everything is set up correctly at this point by connecting to the VM with SSH.\n- Go to the [VM Instances page](https://console.cloud.google.com/compute/instances) .\n- Find the VM with the name `flask-vm` .\n- In **Connect** column, click **SSH** .An SSH-in-browser terminal window opens for the running VM.\nFor more information, see [Connecting toVMs](/compute/docs/instances/connecting-to-instance) .\n### Build the Flask app\nYou build a [Python Flask app](http://flask.pocoo.org/) for this tutorial so that you can have a single file describing your web server and test endpoints.\n- In the SSH-in-browser terminal, create a file called `app.py` .```\nnano app.py\n```\n- Add the following to the `app.py` file:```\nfrom flask import Flaskapp = Flask(__name__)@app.route('/')def hello_cloud():\u00a0 return 'Hello Cloud!'app.run(host='0.0.0.0')\n```\n- Run `app.py` :```\npython3 app.py\n```Flask serves traffic on `localhost:5000` by default. **Warning:** This is a development server. Do not use it in a production deployment.\n- Open a second SSH connection:- Go to the [VM Instances page](https://console.cloud.google.com/compute/instances) .\n- Find the VM named`flask-vm`and click **SSH** .\n- In the second SSH connection, run `curl` to confirm that the greeting that you configured in `app.py` is returned.```\ncurl http://0.0.0.0:5000\n```The output from this command is `Hello Cloud` .\n### Open port 5000 on the VM\nTo connect to the web server from your local computer, the VM must have port 5000 open. Google Cloud lets you open ports to traffic by using firewall rules.\nAdd the following [google_compute_firewall](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/compute_firewall) Terraform resource at the end of your `main.tf` file.\n[  storage/flask_google_cloud_quickstart/main.tf ](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/storage/flask_google_cloud_quickstart/main.tf) [View on GitHub](https://github.com/terraform-google-modules/terraform-docs-samples/blob/main/storage/flask_google_cloud_quickstart/main.tf)\n```\nresource \"google_compute_firewall\" \"flask\" {\n name = \"flask-app-firewall\"\n network = google_compute_network.vpc_network.id\n allow {\n protocol = \"tcp\"\n ports = [\"5000\"]\n }\n source_ranges = [\"0.0.0.0/0\"]\n}\n```\nIn Cloud Shell, run `terraform apply` to create the firewall rule.\n### Add an output variable for the web server URL\n- At the end of `main.tf` , add [a Terraform outputvariable](https://www.terraform.io/language/values/outputs) to output the web server URL:```\n// A variable for extracting the external IP address of the VM\noutput \"Web-server-URL\" {\n value = join(\"\",[\"http://\",google_compute_instance.default.network_interface.0.access_config.0.nat_ip,\":5000\"])\n}\n```\n- Run `terraform apply` .```\nterraform apply\n```When prompted, enter `yes` . Terraform prints the VM's external IP address and port 5000 to the screen, as follows:```\nWeb-server-URL = \"http://IP_ADDRESS:5000\"\n```At any time, you can run `terraform output` to return this output:```\nterraform output\n```\n- Click the URL from the previous step, and see the \"Hello Cloud!\" message.This means that your server is running.## Troubleshooting\n- If a required API isn't enabled, Terraform returns an error. The error message includes a link to enable the API. After enabling the API, you can rerun `terraform apply` .\n- If you can't connect to your VM through SSH:- Make sure to add the [SSH firewall rule](#ssh-firewall-rule) .\n- Make sure that your VM includes the`tags = [\"ssh\"]`argument.\n## Clean up\nAfter completing the tutorial, you can delete everything that you created so that you don't incur any further costs.\nTerraform lets you remove all the resources defined in the configuration file by running the `terraform destroy` command:\n```\nterraform destroy\n```\nEnter `yes` to allow Terraform to delete your resources.\n## What's next\n- Learn how to [export your Google Cloud resources into Terraformformat](/docs/terraform/resource-management/export) .", "guide": "Terraform on Google Cloud"}