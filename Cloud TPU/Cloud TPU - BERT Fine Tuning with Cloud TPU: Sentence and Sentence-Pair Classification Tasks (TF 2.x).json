{"title": "Cloud TPU - BERT Fine Tuning with Cloud TPU: Sentence and Sentence-Pair Classification Tasks (TF 2.x)", "url": "https://cloud.google.com/tpu/docs/tutorials/bert-2.x", "abstract": "# Cloud TPU - BERT Fine Tuning with Cloud TPU: Sentence and Sentence-Pair Classification Tasks (TF 2.x)\nThis tutorial shows you how to train the Bidirectional Encoder Representations from Transformers (BERT) model on Cloud TPU.\nBERT is a method of pre-training language representations. Pre-training refers to how BERT is first trained on a large source of text, such as Wikipedia. You can then apply the training results to other Natural Language Processing (NLP) tasks, such as [question answering](https://en.wikipedia.org/wiki/Question_answering) and [sentiment analysis](https://en.wikipedia.org/wiki/Sentiment_analysis) . With BERT and Cloud TPU, you can train a variety of NLP models in about 30 minutes.\nFor more information about BERT, see the following resources:- [Open Sourcing BERT: State-of-the-Art Pre-training for Natural Language Processing](https://ai.googleblog.com/2018/11/open-sourcing-bert-state-of-art-pre.html) \n- [BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding](https://arxiv.org/abs/1810.04805) \n", "content": "## Objectives\n- Create a Cloud Storage bucket to hold your dataset and model output.\n- Run the training job.\n- Verify the output results.\n## CostsIn this document, you use the following billable components of Google Cloud:- Compute Engine\n- Cloud TPU\n- Cloud Storage\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \n## Before you begin **Important:** You can use this tutorial with either the TPU VM or the TPU Node configuration. The two VM architectures are described in [System Architecture](/tpu/docs/system-architecture-tpu-vm) . The gcloud commands you use depend on the TPU configuration you are using. In this tutorial, each gcloud command is shown in a tabbed section. Choose the tab for the TPU configuration you want to use and the web page shows the appropriate gcloud command. Unless you know you need to use TPU Nodes, we recommend using TPU VMs.\nThis section provides information on setting up Cloud Storage bucket and a Compute Engine VM.\n **Important:** Set up your Compute Engine VM, Cloud TPU node, and Cloud Storage bucket in the same region/zone to reduce network latency and network costs.- Open a Cloud Shell window. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Create a variable for your project's ID.```\nexport PROJECT_ID=project-id\n```\n- Configure Google Cloud CLI to use the project where you want to create Cloud TPU.```\ngcloud config set project ${PROJECT_ID}\n```\n- Create a Service Account for the Cloud TPU project.```\ngcloud beta services identity create --service tpu.googleapis.com --project $PROJECT_ID\n```The command returns a Cloud TPU Service Account with following format:```\nservice-PROJECT_NUMBER@cloud-tpu.iam.gserviceaccount.com\n```\n- Create a Cloud Storage bucket using the following command: **Note:** In the following command, replace with the name you want to assign to your bucket.```\ngsutil mb -p ${PROJECT_ID} -c standard -l us-central1 gs://bucket-name\n```This Cloud Storage bucket stores the data you use to train your model and the training results. The command you use to create a TPU ( `gcloud compute tpus execution-groups create` for the TPU Node architecture or `gcloud compute tpus tpu-vm create` for the TPU VM architecture) sets up default permissions for the Cloud TPU Service Account you set up in the previous step. If you want finer-grain permissions, review the [access level permissions](/tpu/docs/storage-buckets) .The bucket location must be in the same region as your Compute Engine (VM) and your Cloud TPU node.\n- Launch a Compute Engine VM and Cloud TPU using the `gcloud` command. The command you use depends on whether you are using a TPU VM or a TPU node. For more information on the two VM architecture, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) . For more information on the `gcloud` command, see the [gcloud Reference](/sdk/gcloud/reference) .\n```\n$ gcloud compute tpus tpu-vm create bert-tutorial \\--zone=us-central1-b \\--accelerator-type=v3-8 \\--version=tpu-vm-tf-2.16.1-se\n``````\n$ gcloud compute tpus execution-groups create \\\u00a0 --name=bert-tutorial \\\u00a0 --zone=us-central1-b \\\u00a0 --tf-version=2.12.0 \\\u00a0 --machine-type=n1-standard-1 \\\u00a0 --accelerator-type=v3-8 \n``` **Note:** If you have more than one project, you must specify the project ID with the `--project` flag.\n- If you are not automatically logged in to the Compute Engine instance, log in by running the following `ssh` command. When you are logged into the VM, your shell prompt changes from `username@projectname` to `username@vm-name` :\n```\ngcloud compute tpus tpu-vm ssh bert-tutorial --zone=us-central1-b\n```\n```\ngcloud compute ssh bert-tutorial --zone=us-central1-b\n```\nAs you continue these instructions, run each command that begins with `(vm)$` in your VM session window.\n- Create an environment variable for the TPU name.\n```\n(vm)$ export TPU_NAME=local\n```\n```\n(vm)$ export TPU_NAME=bert-tutorial\n```## Prepare the dataset **Note:** The Compute Engine VM has model code pre-downloaded from [GitHub](https://github.com/tensorflow/models) .- Define the storage bucket needed to store the model and the dataset:```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name\n```\n- Copy the pretrained checkpoint and vocab files to your storage bucket:```\n\u00a0 (vm)$ curl https://storage.googleapis.com/tf_model_garden/nlp/bert/v3/uncased_L-12_H-768_A-12.tar.gz -o uncased_L-12_H-768_A-12.tar.gz\u00a0 (vm)$ mkdir -p uncased_L-12_H-768_A-12\u00a0 (vm)$ tar -xvf uncased_L-12_H-768_A-12.tar.gz\u00a0 (vm)$ gsutil -m cp -R uncased_L-12_H-768_A-12 ${STORAGE_BUCKET} \n```\n## Train the model\n- Define several parameter values that are required when you train and evaluate the model:```\n\u00a0 (vm)$ export INIT_CHECKPOINT=${STORAGE_BUCKET}/uncased_L-12_H-768_A-12/bert_model.ckpt\u00a0 (vm)$ export TFDS_DIR=${STORAGE_BUCKET}/tfds\u00a0 (vm)$ export VOCAB_FILE=${STORAGE_BUCKET}/uncased_L-12_H-768_A-12/vocab.txt\u00a0 (vm)$ export MODEL_DIR=${STORAGE_BUCKET}/bert-output\u00a0 (vm)$ export TASK=mnli\u00a0 \n```\n- Install TensorFlow requirements.The command you use depends on whether you are using a TPU VM or a TPU Node.\n```\n(vm)$ pip3 install -r /usr/share/tpu/models/official/requirements.txt\n```\n```\n(vm)$ pip3 install --user -r /usr/share/models/official/requirements.txt(vm)$ pip3 install tensorflow-datasets==4.6.0\n```\n- Set the `PYTHONPATH` environment variable\n```\n(vm)$ export PYTHONPATH=/usr/share/tpu/models\n```\n```\n(vm)$ export PYTHONPATH=\"${PYTHONPATH}:/usr/share/models\"\n```\n- Change to directory that stores the model:\n```\n(vm)$ cd /usr/share/tpu/models\n```\n```\n(vm)$ cd /usr/share/models\n```\n- Run the training script:```\n(vm)$ python3 official/nlp/train.py \\\u00a0 --tpu=${TPU_NAME} \\\u00a0 --experiment=bert/sentence_prediction_text \\\u00a0 --mode=train_and_eval \\\u00a0 --model_dir=${MODEL_DIR} \\\u00a0 --config_file=official/nlp/configs/experiments/glue_mnli_text.yaml \\\u00a0 --params_override=\"runtime.distribution_strategy=tpu, task.init_checkpoint=${INIT_CHECKPOINT}, task.train_data.tfds_data_dir=${TFDS_DIR}, task.train_data.vocab_file=${VOCAB_FILE}, task.validation_data.tfds_data_dir=${TFDS_DIR}, task.validation_data.vocab_file=${VOCAB_FILE}, trainer.train_steps=2000\" \u00a0 \u00a0 \n```The script trains for 2000 steps and then runs 307 steps of evaluation. On a v3-8 TPU, after approximately 5 minutes the training script should complete and display results similar to this:```\nI0719 00:47:52.683979 140297079573568 controller.py:457] train | step: \u00a0 2000 | steps/sec: \u00a0 26.3 | output: {'cls_accuracy': 0.7249375,\u00a0'learning_rate': 1.4670059e-05,\u00a0'training_loss': 0.6740678}train | step: \u00a0 2000 | steps/sec: \u00a0 26.3 | output: {'cls_accuracy': 0.7249375,\u00a0'learning_rate': 1.4670059e-05,\u00a0'training_loss': 0.6740678}I0719 00:47:53.184051 140297079573568 controller.py:277] \u00a0eval | step: \u00a0 2000 | running 307 steps of evaluation...eval | step: \u00a0 2000 | running 307 steps of evaluation...\n```\n## Clean up\n- Disconnect from the Compute Engine instance, if you have not already done so:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete your Cloud TPU and Compute Engine resources. The command you use to delete your resources depends upon whether you are using TPU VMs or TPU Nodes. For more information, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) .\n```\n$ gcloud compute tpus tpu-vm delete bert-tutorial \\--zone=us-central1-b\n```\n```\n$ gcloud compute tpus execution-groups delete bert-tutorial \\--zone=us-central1-b\n```\n- Verify the resources have been deleted by running `gcloud compute tpus execution-groups list` . The deletion might take several minutes. The output from the following command should not include any of the resources created in this tutorial:\n```\n$ gcloud compute tpus tpu-vm list --zone=us-central1-b\n```\n```\n$ gcloud compute tpus execution-groups list --zone=us-central1-b\n```\n- Delete your Cloud Storage bucket using `gsutil` as shown below. Replace with the name of your Cloud Storage bucket.```\n$ gsutil rm -r gs://bucket-name\n```\n## What's nextThe TensorFlow Cloud TPU tutorials generally train the model using a sample dataset. The results of this training are not usable for inference. To use a model for inference, you can train the data on a publicly available dataset or your own dataset. TensorFlow models trained on Cloud TPUs generally require datasets to be in [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format.\nYou can use the [dataset conversion toolsample](/tpu/docs/classification-data-conversion) to convert an image classification dataset into TFRecord format. If you are not using an image classification model, you will have to convert your dataset to [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format yourself. For more information, see [TFRecord andtf.Example](https://www.tensorflow.org/tutorials/load_data/tfrecord) .\n### Hyperparameter tuningTo improve the model's performance with your dataset, you can tune the model's hyperparameters. You can find information about hyperparameters common to all TPU supported models on [GitHub](https://github.com/tensorflow/tpu/tree/master/models/hyperparameters) . Information about model-specific hyperparameters can be found in the [sourcecode](https://github.com/tensorflow/tpu/tree/master/models/official) for each model. For more information on hyperparameter tuning, see [Overview ofhyperparameter tuning](/vertex-ai/docs/training/hyperparameter-tuning-overview) and [Tunehyperparameters](https://developers.google.com/machine-learning/guides/text-classification/step-5) .\n### InferenceOnce you have trained your model, you can use it for inference (also called prediction). You can use the [Cloud TPU inference convertertool](/tpu/docs/v5e-inference-converter) to prepare and optimize a TensorFlow model for inference on Cloud TPU v5e. For more information about inference on Cloud TPU v5e, see [Cloud TPU v5e inferenceintroduction](/tpu/docs/v5e-inference) .- Explore the [TPU tools inTensorBoard](/tpu/docs/cloud-tpu-tools) .", "guide": "Cloud TPU"}