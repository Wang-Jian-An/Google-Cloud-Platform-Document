{"title": "Cloud TPU - Inception v3 \u9ad8\u7d1a\u6307\u5357", "url": "https://cloud.google.com/tpu/docs/inception-v3-advanced?hl=zh-cn", "abstract": "# Cloud TPU - Inception v3 \u9ad8\u7d1a\u6307\u5357\n# Inception v3 \u9ad8\u7d1a\u6307\u5357\n\u672c\u6587\u6a94\u8a0e\u8ad6 [Inception](https://github.com/tensorflow/tpu/tree/master/models/experimental/inception) \u6a21\u578b\u7684\u591a\u500b\u65b9\u9762\uff0c\u4ee5\u53ca\u8aaa\u660e\u9019\u4e9b\u65b9\u9762\u5982\u4f55\u5f7c\u6b64\u6210\u5c31\uff0c\u4f7f\u8a72\u6a21\u578b\u53ef\u5728 Cloud TPU \u4e0a\u9ad8\u6548\u904b\u884c\u3002\u5b83\u662f\u5728 Cloud TPU \u4e0a\u904b\u884c Inception v3 \u7684\u9ad8\u7d1a\u6307\u5357\uff0c\u540c\u6642\u8a73\u7d30\u8a0e\u8ad6\u4fc3\u4f7f\u6a21\u578b\u767c\u751f\u4e86\u986f\u8457\u6539\u9032\u7684\u5177\u9ad4\u8b8a\u5316\u3002\u672c\u6587\u6a94\u662f\u5c0d [Inception v3 \u6559\u7a0b](https://cloud.google.com/tpu/docs/tutorials/inception?hl=zh-cn) \u7684\u88dc\u5145\u8aaa\u660e\u3002\nInception v3 TPU \u8a13\u7df4\u5c07\u904b\u884c\u63a1\u7528\u985e\u4f3c\u914d\u7f6e\u7684 GPU \u4f5c\u696d\u751f\u6210\u7684\u5339\u914d\u6e96\u78ba\u7387\u66f2\u7dda\u3002\u8a72\u6a21\u578b\u5df2\u6210\u529f\u901a\u904e v2-8\u3001v2-128 \u548c v2-512 \u914d\u7f6e\u5b8c\u6210\u8a13\u7df4\u3002\u8a72\u6a21\u578b\u7d04\u7528\u4e86 170 \u500b\u9031\u671f\u9054\u5230\u4e86 78.1% \u4ee5\u4e0a\u7684\u6e96\u78ba\u7387\u3002\n\u672c\u6587\u6a94\u4e2d\u986f\u793a\u7684\u4ee3\u78bc\u793a\u4f8b\u65e8\u5728\u7c21\u8981\u8aaa\u660e\u5be6\u969b\u7684\u5be6\u73fe\u60c5\u6cc1\u3002 \u5de5\u4f5c\u4ee3\u78bc\u53ef\u5728 [GitHub](https://github.com/tensorflow/tpu/tree/master/models/experimental/inception) \u4e2d\u627e\u5230\u3002\n", "content": "## \u7c21\u4ecb\nInception v3 \u662f\u4e00\u7a2e\u5716\u50cf\u8b58\u5225\u6a21\u578b\uff0c\u5df2\u88ab\u8b49\u660e\u5728 ImageNet \u6578\u64da\u96c6\u4e0a\u7684\u6e96\u78ba\u7387\u8d85\u904e 78.1%\u3002\u8a72\u6a21\u578b\u662f\u6578\u5e74\u4f86\u591a\u4f4d\u7814\u7a76\u4eba\u54e1\u63d0\u51fa\u7684\u8af8\u591a\u60f3\u6cd5\u7a4d\u6fb1\u7684\u6210\u679c\u3002\u5b83\u4ee5 Szegedy \u7b49\u4eba\u767c\u8868\u7684\u300a [Rethinking the Inception Architecture for Computer Vision](https://arxiv.org/abs/1512.00567) \u300b\u539f\u5275\u6027\u8ad6\u6587\u7232\u7406\u8ad6\u4f9d\u64da\u3002\n\u6a21\u578b\u672c\u8eab\u7531\u5c0d\u7a31\u548c\u975e\u5c0d\u7a31\u69cb\u5efa\u584a\u7d44\u6210\uff0c\u5305\u62ec\u5377\u7a4d\u5c64\u3001\u5e73\u5747\u6c60\u5316\u5c64\u3001\u6700\u5927\u6c60\u5316\u5c64\u3001\u4e32\u806f\u3001\u4e1f\u68c4\u5c64\u548c\u5168\u9023\u63a5\u5c64\u3002\u6279\u91cf\u6b78\u4e00\u5316\u4e5f\u5728\u6a21\u578b\u4e2d\u5ee3\u6cdb\u61c9\u7528\uff0c\u540c\u6642\u7528\u65bc\u6fc0\u6d3b\u8f38\u5165\u3002\u640d\u5931\u662f\u901a\u904e Softmax \u8a08\u7b97\u7684\u3002\n\u4ee5\u4e0b\u662f\u8a72\u6a21\u578b\u7684\u7c21\u8981\u5716\u793a\uff1a\n## Estimator API\n**\u8b66\u544a** \uff1aTPUEstimator \u50c5\u5728 TensorFlow 1.x \u4e2d\u53ef\u7528\u3002\u5982\u679c\u60a8\u8981\u4f7f\u7528 TensorFlow 2.x \u7de8\u5beb\u6a21\u578b\uff0c\u8acb\u6539\u7528 [Keras](https://keras.io/about/) \u3002\nInception v3 \u7684 TPU \u7248\u672c\u662f\u63a1\u7528 [TPUEstimator](https://www.tensorflow.org/api_docs/python/tf/contrib/tpu/TPUEstimator?hl=zh-cn) \u7de8\u5beb\u7684\uff0c\u8a72 API \u65e8\u5728\u7c21\u5316\u958b\u767c\u5de5\u4f5c\uff0c\u53ef\u8b93\u60a8\u5c08\u6ce8\u65bc\u6a21\u578b\u672c\u8eab\u800c\u4e0d\u662f\u5e95\u5c64\u786c\u4ef6\u7684\u7d30\u7bc0\u3002\u8a72 API \u5728\u5f8c\u81fa\u57f7\u884c\u5728 TPU \u4e0a\u904b\u884c\u6a21\u578b\u6240\u9700\u7684\u5927\u90e8\u5206\u4f4e\u7d1a\u96dc\u9805\u5de5\u4f5c\uff0c\u540c\u6642\u81ea\u52d5\u57f7\u884c\u4e00\u4e9b\u5e38\u7528\u529f\u80fd\uff08\u4f8b\u5982\u4fdd\u5b58\u548c\u6062\u5fa9\u6aa2\u67e5\u9ede\uff09\u3002\nEstimator API \u5f37\u5236\u5206\u96e2\u6a21\u578b\u548c\u4ee3\u78bc\u7684\u8f38\u5165\u90e8\u5206\u3002 \u60a8\u53ef\u4ee5\u6839\u64da\u6a21\u578b\u5b9a\u7fa9\u548c\u8f38\u5165\u6d41\u6c34\u7dda\u4f86\u5b9a\u7fa9 `model_fn` \u548c `input_fn` \u51fd\u6578\u3002\u4ee5\u4e0b\u4ee3\u78bc\u5c55\u793a\u4e86\u9019\u4e9b\u51fd\u6578\u7684\u8072\u660e\uff1a\n```\ndef model_fn(features, labels, mode, params):\u00a0 \u00a0 \u00a0\u2026\u00a0 return tpu_estimator.TPUEstimatorSpec(mode=mode, loss=loss, train_op=train_op)def input_fn(params):\u00a0 \u00a0 def parser(serialized_example):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u2026\u00a0 \u00a0 \u00a0 \u00a0 return image, label\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u2026\u00a0 \u00a0images, labels = dataset.make_one_shot_iterator().get_next()\u00a0 \u00a0return images, labels\n```\nAPI \u63d0\u4f9b\u4e86 `train()` \u548c `evaluate()` \u9019\u5169\u500b\u95dc\u9375\u51fd\u6578\uff0c\u7528\u65bc\u8a13\u7df4\u548c\u8a55\u4f30\uff0c\u5982\u4ee5\u4e0b\u4ee3\u78bc\u6240\u793a\uff1a\n```\ndef main(unused_argv):\u00a0 \u2026\u00a0 run_config = tpu_config.RunConfig(\u00a0 \u00a0 \u00a0 master=FLAGS.master,\u00a0 \u00a0 \u00a0 model_dir=FLAGS.model_dir,\u00a0 \u00a0 \u00a0 session_config=tf.ConfigProto(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 allow_soft_placement=True, log_device_placement=True),\u00a0 \u00a0 \u00a0 tpu_config=tpu_config.TPUConfig(FLAGS.iterations, FLAGS.num_shards),)\u00a0 estimator = tpu_estimator.TPUEstimator(\u00a0 \u00a0 \u00a0 model_fn=model_fn,\u00a0 \u00a0 \u00a0 use_tpu=FLAGS.use_tpu,\u00a0 \u00a0 \u00a0 train_batch_size=FLAGS.batch_size,\u00a0 \u00a0 \u00a0 eval_batch_size=FLAGS.batch_size,\u00a0 \u00a0 \u00a0 config=run_config)\u00a0 estimator.train(input_fn=input_fn, max_steps=FLAGS.train_steps)\u00a0 eval_results = inception_classifier.evaluate(\u00a0 \u00a0 \u00a0 input_fn=imagenet_eval.input_fn, steps=eval_steps)\n```\n## ImageNet \u6578\u64da\u96c6\n\u5fc5\u9808\u5148\u4f7f\u7528\u5927\u91cf\u52a0\u6a19\u7c64\u7684\u5716\u7247\u9032\u884c\u8a13\u7df4\uff0c\u7136\u5f8c\u624d\u80fd\u4f7f\u7528\u6a21\u578b\u8b58\u5225\u5716\u7247\u3002 [ImageNet](http://www.image-net.org) \u662f\u8981\u4f7f\u7528\u7684\u5e38\u7528\u6578\u64da\u96c6\u3002\nImageNet \u64c1\u6709\u8d85\u904e\u4e00\u5343\u842c\u5f35\u5e36\u6a19\u7c64\u7684\u5716\u7247\u7684\u7db2\u5740\u3002\u5176\u4e2d\u4e00\u767e\u842c\u5f35\u5716\u7247\u9084\u6709\u908a\u754c\u6846\uff0c\u7232\u52a0\u6a19\u7c64\u7684\u5c0d\u8c61\u6307\u5b9a\u66f4\u7cbe\u78ba\u7684\u4f4d\u7f6e\u3002\n\u5c0d\u65bc\u8a72\u6a21\u578b\uff0cImageNet \u6578\u64da\u96c6\u5305\u62ec 1331167 \u5f35\u5716\u7247\u7d44\u6210\uff0c\u5176\u4e2d\u8a13\u7df4\u6578\u64da\u96c6\u5305\u542b 1281167 \u5f35\uff1b\u8a55\u4f30\u6578\u64da\u96c6\u5305\u542b 50000 \u5f35\u3002\n\u8a13\u7df4\u6578\u64da\u96c6\u8207\u8a55\u4f30\u6578\u64da\u96c6\u662f\u6709\u610f\u4e92\u76f8\u9694\u96e2\u7684\u3002\u53ea\u6709\u8a13\u7df4\u6578\u64da\u96c6\u7684\u5716\u7247\u6703\u7528\u65bc\u8a13\u7df4\u6a21\u578b\uff0c\u4e26\u4e14\u53ea\u6709\u8a55\u4f30\u6578\u64da\u96c6\u4e2d\u7684\u5716\u7247\u6703\u7528\u65bc\u8a55\u4f30\u6a21\u578b\u6e96\u78ba\u7387\u3002\n\u6a21\u578b\u8981\u6c42\u5c07\u5716\u7247\u5b58\u5132\u7232 TFRecord \u683c\u5f0f\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u5c07\u5716\u7247\u5f9e\u539f\u59cb JPEG \u6587\u4ef6\u8f49\u63db\u7232 TFRecord\uff0c\u8acb\u53c3\u95b1 [download_and_preprocess_imagenet.sh](https://cloud.google.com/tpu/docs/imagenet-setup?hl=zh-cn) \u3002\n## \u8f38\u5165\u6d41\u6c34\u7dda\n\u6bcf\u500b Cloud TPU \u8a2d\u5099\u90fd\u5177\u6709 8 \u500b\u5167\u6838\u4e26\u4e14\u9023\u63a5\u5230\u4e3b\u6a5f (CPU)\u3002 \u8f03\u5927\u7684\u5207\u7247\u64c1\u6709\u591a\u500b\u4e3b\u6a5f\u3002\u5176\u4ed6\u8f03\u5927\u7684\u914d\u7f6e\u8207\u591a\u500b\u4e3b\u6a5f\u4ea4\u4e92\u3002\u4f8b\u5982\uff0c\u4e00\u500b v2-256 \u53ef\u8207 16 \u500b\u4e3b\u6a5f\u901a\u4fe1\u3002\n\u4e3b\u6a5f\u5f9e\u6587\u4ef6\u7cfb\u7d71\u6216\u672c\u5730\u5167\u5b58\u4e2d\u6aa2\u7d22\u6578\u64da\uff0c\u57f7\u884c\u6578\u64da\u9810\u8655\u7406\u6240\u9700\u7684\u4efb\u4f55\u64cd\u4f5c\uff0c\u7136\u5f8c\u5c07\u9810\u8655\u7406\u5f8c\u7684\u6578\u64da\u50b3\u8f38\u5230 TPU \u6838\u5fc3\u3002 \u6211\u5011\u8a8d\u7232\u4e3b\u6a5f\u6703\u55ae\u7368\u5b8c\u6210\u4e09\u500b\u6578\u64da\u8655\u7406\u968e\u6bb5\uff0c\u9019\u4e09\u500b\u968e\u6bb5\u5206\u5225\u7a31\u7232\uff1a1) \u5b58\u5132 \u30012) \u9810\u8655\u7406 \u30013) \u50b3\u8f38 \u3002\u4e0b\u5716\u7c21\u8981\u8aaa\u660e\u4e86\u6b64\u793a\u610f\u5716\uff1a\n\u7232\u5be6\u73fe\u826f\u597d\u6027\u80fd\uff0c\u7cfb\u7d71\u61c9\u8655\u65bc\u5e73\u8861\u72c0\u614b\u3002\u5982\u679c\u4e3b\u6a5f CPU \u5b8c\u6210\u4e09\u500b\u6578\u64da\u8655\u7406\u968e\u6bb5\u7684\u6642\u9593\u9577\u65bc TPU\uff0c\u5247\u57f7\u884c\u64cd\u4f5c\u5c07\u53d7\u9650\u65bc\u4e3b\u6a5f\u3002\u9019\u5169\u7a2e\u60c5\u6cc1\u5982\u4e0b\u5716\u6240\u793a\uff1a\nInception v3 \u7684\u7576\u524d\u5be6\u73fe\u8655\u65bc\u53d7\u9650\u65bc\u8f38\u5165\u7684\u908a\u7de3\u3002\u9700\u8981\u5f9e\u6587\u4ef6\u7cfb\u7d71\u6aa2\u7d22\u3001\u89e3\u78bc\u5716\u7247\uff0c\u7136\u5f8c\u9032\u884c\u9810\u8655\u7406\u3002\u6709\u591a\u7a2e\u4e0d\u540c\u985e\u578b\uff08\u5f9e\u4e2d\u7b49\u5230\u8907\u96dc\uff09\u7684\u9810\u8655\u7406\u968e\u6bb5\u53ef\u4f9b\u4f7f\u7528\u3002\u5982\u679c\u4f7f\u7528\u6700\u8907\u96dc\u7684\u9810\u8655\u7406\u968e\u6bb5\uff0c\u5247\u8a13\u7df4\u6d41\u6c34\u7dda\u5c07\u53d7\u9650\u65bc\u9810\u8655\u7406\u3002\u4f7f\u7528\u4e2d\u7b49\u8907\u96dc\u7684\u9810\u8655\u7406\u968e\u6bb5\uff0c\u53ef\u4ee5\u8b93\u6a21\u578b\u53d7 TPU \u9650\u5236\uff0c\u5f9e\u800c\u7372\u5f97\u9ad8\u65bc 78.1% \u7684\u6e96\u78ba\u7387\u3002\n\u6a21\u578b\u4f7f\u7528 [tf.data.Dataset](https://www.tensorflow.org/api_docs/python/tf/data/Dataset?hl=zh-cn) \u8655\u7406\u8f38\u5165\u6d41\u6c34\u7dda\u8655\u7406\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u512a\u5316\u8f38\u5165\u6d41\u6c34\u7dda\uff0c\u8acb\u53c3\u95b1 [\u6578\u64da\u96c6\u6027\u80fd\u6307\u5357](https://www.tensorflow.org/guide/data_performance?hl=zh-cn) \u3002\n\u96d6\u7136\u60a8\u53ef\u4ee5\u5b9a\u7fa9\u51fd\u6578\u4e26\u5c07\u5176\u50b3\u905e\u7d66 Estimator API\uff0c\u4f46 `InputPipeline` \u985e\u6703\u5c01\u88dd\u6240\u6709\u5fc5\u9700\u7684\u529f\u80fd\u3002\n\u901a\u904e Estimator API\uff0c\u4f7f\u7528\u6b64\u985e\u975e\u5e38\u7c21\u55ae\u3002\u60a8\u53ef\u4ee5\u5c07\u5176\u50b3\u905e\u7d66\u51fd\u6578 `train()` \u548c `evaluate()` \u7684 `input_fn` \u53c3\u6578\uff0c\u5982\u4ee5\u4e0b\u4ee3\u78bc\u6bb5\u6240\u793a\uff1a\n```\ndef main(unused_argv):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u2026\u00a0 inception_classifier = tpu_estimator.TPUEstimator(\u00a0 \u00a0 \u00a0 model_fn=inception_model_fn,\u00a0 \u00a0 \u00a0 use_tpu=FLAGS.use_tpu,\u00a0 \u00a0 \u00a0 config=run_config,\u00a0 \u00a0 \u00a0 params=params,\u00a0 \u00a0 \u00a0 train_batch_size=FLAGS.train_batch_size,\u00a0 \u00a0 \u00a0 eval_batch_size=eval_batch_size,\u00a0 \u00a0 \u00a0 batch_axis=(batch_axis, 0))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u2026\u00a0 for cycle in range(FLAGS.train_steps // FLAGS.train_steps_per_eval):\u00a0 \u00a0 tf.logging.info('Starting training cycle %d.' % cycle)\u00a0 \u00a0 inception_classifier.train(\u00a0 \u00a0 \u00a0 \u00a0 input_fn=InputPipeline(True), steps=FLAGS.train_steps_per_eval)\u00a0 \u00a0 tf.logging.info('Starting evaluation cycle %d .' % cycle)\u00a0 \u00a0 eval_results = inception_classifier.evaluate(\u00a0 \u00a0 \u00a0 \u00a0 input_fn=InputPipeline(False), steps=eval_steps, hooks=eval_hooks)\u00a0 \u00a0 tf.logging.info('Evaluation results: %s' % eval_results)\n```\n`InputPipeline` \u7684\u4e3b\u8981\u5143\u7d20\u5982\u4ee5\u4e0b\u4ee3\u78bc\u6bb5\u6240\u793a\u3002\n```\nclass InputPipeline(object):\u00a0 def __init__(self, is_training):\u00a0 \u00a0 self.is_training = is_training\u00a0 def __call__(self, params):\u00a0 \u00a0 # Storage\u00a0 \u00a0 file_pattern = os.path.join(\u00a0 \u00a0 \u00a0 \u00a0 FLAGS.data_dir, 'train-*' if self.is_training else 'validation-*')\u00a0 \u00a0 dataset = tf.data.Dataset.list_files(file_pattern)\u00a0 \u00a0 if self.is_training and FLAGS.initial_shuffle_buffer_size > 0:\u00a0 \u00a0 \u00a0 dataset = dataset.shuffle(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 buffer_size=FLAGS.initial_shuffle_buffer_size)\u00a0 \u00a0 if self.is_training:\u00a0 \u00a0 \u00a0 dataset = dataset.repeat()\u00a0 \u00a0 def prefetch_dataset(filename):\u00a0 \u00a0 \u00a0 dataset = tf.data.TFRecordDataset(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 filename, buffer_size=FLAGS.prefetch_dataset_buffer_size)\u00a0 \u00a0 \u00a0 return dataset\u00a0 \u00a0 dataset = dataset.apply(\u00a0 \u00a0 \u00a0 \u00a0 tf.contrib.data.parallel_interleave(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 prefetch_dataset,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cycle_length=FLAGS.num_files_infeed,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sloppy=True))\u00a0 \u00a0 if FLAGS.followup_shuffle_buffer_size > 0:\u00a0 \u00a0 \u00a0 dataset = dataset.shuffle(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 buffer_size=FLAGS.followup_shuffle_buffer_size)\u00a0 \u00a0 # Preprocessing\u00a0 \u00a0 dataset = dataset.map(\u00a0 \u00a0 \u00a0 \u00a0 self.dataset_parser,\u00a0 \u00a0 \u00a0 \u00a0 num_parallel_calls=FLAGS.num_parallel_calls)\u00a0 \u00a0 dataset = dataset.prefetch(batch_size)\u00a0 \u00a0 dataset = dataset.apply(\u00a0 \u00a0 \u00a0 \u00a0 tf.contrib.data.batch_and_drop_remainder(batch_size))\u00a0 \u00a0 dataset = dataset.prefetch(2) \u00a0# Prefetch overlaps in-feed with training\u00a0 \u00a0 images, labels = dataset.make_one_shot_iterator().get_next()\u00a0 \u00a0 # Transfer\u00a0 \u00a0 return images, labels\n```\n**\u5b58\u5132** \u90e8\u5206\u59cb\u65bc\u5275\u5efa\u6578\u64da\u96c6\uff0c\u5e77\u5305\u62ec\u5f9e\u5b58\u5132\u4e2d\u8b80\u53d6 TFRecord\uff08\u4f7f\u7528 `tf.data.TFRecordDataset` \uff09\u3002\u6839\u64da\u9700\u8981\u4f7f\u7528\u4e86\u7279\u6b8a\u76ee\u7684\u51fd\u6578 `repeat()` \u548c `shuffle()` \u3002\u51fd\u6578 `tf.contrib.data.parallel_interleave()` \u5c07\u5728\u8f38\u5165\u4e2d\u6620\u5c04\u51fd\u6578 `prefetch_dataset()` \u4ee5\u751f\u6210\u5d4c\u5957\u6578\u64da\u96c6\uff0c\u4e26\u4ee5\u4ea4\u932f\u8f38\u51fa\u5176\u5143\u7d20\u3002\u5b83\u5c07\u5f9e `cycle_length` \u5d4c\u5957\u6578\u64da\u96c6\u4e2d\u4e26\u884c\u7372\u53d6\u5143\u7d20\uff0c\u5f9e\u800c\u63d0\u9ad8\u541e\u5410\u91cf\u3002 `sloppy` \u53c3\u6578\u653e\u5bec\u4e86\u4ee5\u78ba\u5b9a\u9806\u5e8f\u7522\u751f\u8f38\u51fa\u7684\u8981\u6c42\uff0c\u5141\u8a31\u5be6\u73fe\u904e\u7a0b\u8df3\u904e\u5728\u8acb\u6c42\u6642\u5143\u7d20\u5c1a\u672a\u5c31\u7dd2\u7684\u5d4c\u5957\u6578\u64da\u96c6\u3002\n**\u9810\u8655\u7406** \u90e8\u5206\u5c07\u8abf\u7528 `dataset.map(parser)` \uff0c\u800c\u5f8c\u8005\u53c8\u6703\u5728\u9810\u8655\u7406\u5716\u7247\u6642\u8abf\u7528\u89e3\u6790\u5668\u51fd\u6578\u3002\u4e0b\u4e00\u90e8\u5206\u4e2d\u5c07\u8a73\u7d30\u8a0e\u8ad6\u9810\u8655\u7406\u968e\u6bb5\u3002\n**\u50b3\u8f38** \u90e8\u5206\uff08\u51fd\u6578\u7d50\u5c3e\u8655\uff09\u5305\u62ec `return images, labels` \u884c\u3002TPUEstimator \u7372\u53d6\u8fd4\u56de\u503c\u4e26\u81ea\u52d5\u5c07\u5b83\u5011\u50b3\u8f38\u5230\u8a2d\u5099\u4e2d\u3002\n\u4e0b\u5716\u986f\u793a\u4e86 Inception v3 \u7684 Cloud TPU \u6027\u80fd\u8ddf\u8e64\u793a\u4f8b\u3002TPU \u8a08\u7b97\u6642\u9593\uff08\u5ffd\u7565\u4efb\u4f55\u994b\u5165\u505c\u9813\uff09\u7d04\u7232 815 \u6beb\u79d2\u3002\n\u4e3b\u6a5f **\u5b58\u5132** \u5df2\u5beb\u5165\u8ddf\u8e64\u8a18\u9304\uff0c\u5982\u4ee5\u4e0b\u5c4f\u5e55\u622a\u5716\u6240\u793a\uff1a\n\u4e3b\u6a5f **\u9810\u8655\u7406** \u4e2d\u5305\u62ec\u5716\u7247\u89e3\u78bc\u548c\u4e00\u7cfb\u5217\u5716\u7247\u5931\u771f\u51fd\u6578\uff0c\u5982\u4ee5\u4e0b\u5c4f\u5e55\u622a\u5716\u6240\u793a\uff1a\n\u4e3b\u6a5f/TPU **\u50b3\u8f38** \u5982\u4ee5\u4e0b\u5c4f\u5e55\u622a\u5716\u6240\u793a\uff1a\n## \u9810\u8655\u7406\u968e\u6bb5\n\u5716\u7247\u9810\u8655\u7406\u662f\u7cfb\u7d71\u7684\u95dc\u9375\u90e8\u5206\uff0c\u53ef\u80fd\u6703\u5f71\u97ff\u6a21\u578b\u5728\u8a13\u7df4\u671f\u9593\u7372\u5f97\u7684\u6700\u9ad8\u6e96\u78ba\u7387\u3002\u81f3\u5c11\u9700\u8981\u5c0d\u5716\u7247\u9032\u884c\u89e3\u78bc\u4e26\u8abf\u6574\u5927\u5c0f\u4ee5\u9069\u5408\u6a21\u578b\u9700\u6c42\u3002\u5c0d\u65bc Inception\uff0c\u5716\u7247\u5fc5\u9808\u7232 299x299x3 \u50cf\u7d20\u3002\n\u4f46\u662f\uff0c\u50c5\u50c5\u9032\u884c\u89e3\u78bc\u548c\u8abf\u6574\u5927\u5c0f\u4e0d\u8db3\u4ee5\u7372\u5f97\u826f\u597d\u7684\u6e96\u78ba\u7387\u3002ImageNet \u8a13\u7df4\u6578\u64da\u96c6\u4e2d\u5305\u542b 1281167 \u5f35\u5716\u7247\u3002\u5229\u7528\u8a13\u7df4\u5716\u7247\u96c6\u4e2d\u7684\u5716\u7247\u8a13\u7df4\u4e00\u904d\u7a31\u7232\u4e00\u500b\u9031\u671f\u3002\u5728\u8a13\u7df4\u671f\u9593\uff0c\u6a21\u578b\u9700\u8981\u5229\u7528\u8a13\u7df4\u6578\u64da\u96c6\u4e2d\u7684\u5716\u7247\u8a13\u7df4\u591a\u6b21\uff0c\u4ee5\u63d0\u9ad8\u5716\u7247\u8b58\u5225\u80fd\u529b\u3002\u8981\u8a13\u7df4 Inception v3 \u4ee5\u4f7f\u5176\u7372\u5f97\u8db3\u5920\u7684\u6e96\u78ba\u7387\uff0c\u8acb\u4f7f\u7528 140 \u5230 200 \u500b\u9031\u671f\uff0c\u5177\u9ad4\u53d6\u6c7a\u65bc\u5168\u5c40\u6279\u6b21\u5927\u5c0f\u3002\n\u4e00\u7a2e\u5be6\u7528\u7684\u505a\u6cd5\u662f\uff0c\u5728\u5c07\u5716\u7247\u994b\u9001\u7d66\u6a21\u578b\u4e4b\u524d\u9023\u7e8c\u66f4\u6539\u5716\u7247\uff0c\u4f7f\u7279\u5b9a\u5716\u7247\u5728\u6bcf\u500b\u9031\u671f\u90fd\u7565\u6709\u4e0d\u540c\u3002\u5982\u4f55\u5c0d\u5716\u7247\u9032\u884c\u6700\u4f73\u9810\u8655\u7406\u65e2\u662f\u79d1\u5b78\uff0c\u4e5f\u662f\u85dd\u8853\u3002\u7cbe\u5fc3\u8a2d\u8a08\u7684\u9810\u8655\u7406\u968e\u6bb5\u53ef\u4ee5\u986f\u8457\u63d0\u9ad8\u6a21\u578b\u7684\u8b58\u5225\u80fd\u529b\u3002\u5982\u679c\u9810\u8655\u7406\u968e\u6bb5\u904e\u65bc\u7c21\u55ae\uff0c\u53ef\u80fd\u6703\u4eba\u7232\u5730\u9650\u5236\u540c\u4e00\u6a21\u578b\u53ef\u5728\u8a13\u7df4\u671f\u9593\u9054\u5230\u7684\u6e96\u78ba\u7387\u9802\u9ede\u3002\nInception v3 \u63d0\u4f9b\u4e86\u591a\u7a2e\u9810\u8655\u7406\u968e\u6bb5\u9078\u9805\uff0c\u5f9e\u76f8\u5c0d\u7c21\u55ae\u4e14\u8a08\u7b97\u958b\u92b7\u8f03\u5c0f\u5230\u76f8\u7576\u8907\u96dc\u4e14\u8a08\u7b97\u958b\u92b7\u5f88\u5927\u7684\u9078\u9805\u5747\u6709\u6db5\u84cb\u3002\u6587\u4ef6 **vgg_preprocessing.py** \u548c **inception_preprocessing.py** \u4e2d\u5206\u5225\u4ecb\u7d39\u4e86\u5169\u7a2e\u4e0d\u540c\u985e\u578b\u7684\u9078\u9805\u3002\n\u6587\u4ef6 **vgg_preprocessing.py** \u5b9a\u7fa9\u4e86\u4e00\u500b\u9810\u8655\u7406\u968e\u6bb5\uff0c `resnet` \u8a13\u7df4\u4e2d\u4f7f\u7528\u8a72\u9810\u8655\u7406\u968e\u6bb5\u6210\u529f\u9054\u5230\u4e86 75% \u7684\u6e96\u78ba\u7387\uff0cInception v3 \u4f7f\u7528\u8a72\u9810\u8655\u7406\u968e\u6bb5\u6642\u537b\u7d50\u679c\u6b20\u4f73\u3002\n\u6587\u4ef6 **inception_preprocessing.py** \u5305\u542b\u4e00\u500b\u9810\u8655\u7406\u968e\u6bb5\uff0c\u7528\u65bc\u8a13\u7df4 Inception v3\uff0c\u5728 TPU \u4e0a\u904b\u884c\u6642\u6e96\u78ba\u7387\u5728 78.1 \u5230 78.5% \u4e4b\u9593\u3002\n\u6839\u64da\u6a21\u578b\u662f\u5728\u63a5\u53d7\u8a13\u7df4\u9084\u662f\u7528\u65bc\u63a8\u7406/\u8a55\u4f30\uff0c\u9810\u8655\u7406\u64cd\u4f5c\u6709\u6240\u5dee\u7570\u3002\n\u5728\u8a55\u4f30\u6642\uff0c\u9810\u8655\u7406\u5f88\u7c21\u55ae\uff1a\u526a\u88c1\u5716\u7247\u7684\u4e2d\u5fc3\u5340\u57df\uff0c\u7136\u5f8c\u5c07\u5176\u8abf\u6574\u7232\u9ed8\u8a8d\u7684 299x299 \u5927\u5c0f\u3002\u4ee5\u4e0b\u4ee3\u78bc\u6bb5\u5c55\u793a\u4e86\u4e00\u500b\u9810\u8655\u7406\u5be6\u73fe\uff1a\n```\ndef preprocess_for_eval(image, height, width, central_fraction=0.875):\u00a0 with tf.name_scope(scope, 'eval_image', [image, height, width]):\u00a0 \u00a0 if image.dtype != tf.float32:\u00a0 \u00a0 \u00a0 image = tf.image.convert_image_dtype(image, dtype=tf.float32)\u00a0 \u00a0 image = tf.image.central_crop(image, central_fraction=central_fraction)\u00a0 \u00a0 image = tf.expand_dims(image, 0)\u00a0 \u00a0 image = tf.image.resize_bilinear(image, [height, width], align_corners=False)\u00a0 \u00a0 image = tf.squeeze(image, [0])\u00a0 \u00a0 image = tf.subtract(image, 0.5)\u00a0 \u00a0 image = tf.multiply(image, 2.0)\u00a0 \u00a0 image.set_shape([height, width, 3])\u00a0 \u00a0 return image\n```\n\u7528\u65bc\u8a13\u7df4\u6642\uff0c\u526a\u88c1\u5340\u57df\u5c07\u96a8\u6a5f\u9078\u64c7\uff1a\u96a8\u6a5f\u9078\u64c7\u908a\u754c\u6846\u4ee5\u9078\u64c7\u5716\u7247\u5340\u57df\uff0c\u7136\u5f8c\u8abf\u6574\u5176\u5927\u5c0f\u3002\u5df2\u8abf\u6574\u5927\u5c0f\u7684\u5716\u7247\u5c07\u8996\u60c5\u6cc1\u7ffb\u8f49\u4e26\u4e14\u5176\u984f\u8272\u5c07\u5931\u771f\u3002\u4ee5\u4e0b\u4ee3\u78bc\u6bb5\u5c55\u793a\u4e86\u9019\u4e9b\u64cd\u4f5c\u7684\u5be6\u73fe\uff1a\n```\ndef preprocess_for_train(image, height, width, bbox, fast_mode=True, scope=None):\u00a0 with tf.name_scope(scope, 'distort_image', [image, height, width, bbox]):\u00a0 \u00a0 if bbox is None:\u00a0 \u00a0 \u00a0 bbox = tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])\u00a0 \u00a0 if image.dtype != tf.float32:\u00a0 \u00a0 \u00a0 image = tf.image.convert_image_dtype(image, dtype=tf.float32)\u00a0 \u00a0 distorted_image, distorted_bbox = distorted_bounding_box_crop(image, bbox)\u00a0 \u00a0 distorted_image.set_shape([None, None, 3])\u00a0 \u00a0 num_resize_cases = 1 if fast_mode else 4\u00a0 \u00a0 distorted_image = apply_with_random_selector(\u00a0 \u00a0 \u00a0 \u00a0 distorted_image,\u00a0 \u00a0 \u00a0 \u00a0 lambda x, method: tf.image.resize_images(x, [height, width], method),\u00a0 \u00a0 \u00a0 \u00a0 num_cases=num_resize_cases)\u00a0 \u00a0 distorted_image = tf.image.random_flip_left_right(distorted_image)\u00a0 \u00a0 if FLAGS.use_fast_color_distort:\u00a0 \u00a0 \u00a0 distorted_image = distort_color_fast(distorted_image)\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 num_distort_cases = 1 if fast_mode else 4\u00a0 \u00a0 \u00a0 distorted_image = apply_with_random_selector(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 distorted_image,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 lambda x, ordering: distort_color(x, ordering, fast_mode),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 num_cases=num_distort_cases)\u00a0 \u00a0 distorted_image = tf.subtract(distorted_image, 0.5)\u00a0 \u00a0 distorted_image = tf.multiply(distorted_image, 2.0)\u00a0 \u00a0 return distorted_image\n```\n\u51fd\u6578 `distort_color` \u8ca0\u8cac\u66f4\u6539\u984f\u8272\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u7a2e\u50c5\u4fee\u6539\u4eae\u5ea6\u548c\u98fd\u548c\u5ea6\u7684\u5feb\u901f\u6a21\u5f0f\u3002\u5b8c\u6574\u6a21\u5f0f\u6703\u6309\u96a8\u6a5f\u9806\u5e8f\u4fee\u6539\u4eae\u5ea6\u3001\u98fd\u548c\u5ea6\u548c\u8272\u8abf\u3002\n```\ndef distort_color(image, color_ordering=0, fast_mode=True, scope=None):\u00a0 with tf.name_scope(scope, 'distort_color', [image]):\u00a0 \u00a0 if fast_mode:\u00a0 \u00a0 \u00a0 if color_ordering == 0:\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_brightness(image, max_delta=32. / 255.)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_saturation(image, lower=0.5, upper=1.5)\u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_saturation(image, lower=0.5, upper=1.5)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_brightness(image, max_delta=32. / 255.)\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 if color_ordering == 0:\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_brightness(image, max_delta=32. / 255.)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_saturation(image, lower=0.5, upper=1.5)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_hue(image, max_delta=0.2)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_contrast(image, lower=0.5, upper=1.5)\u00a0 \u00a0 \u00a0 elif color_ordering == 1:\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_saturation(image, lower=0.5, upper=1.5)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_brightness(image, max_delta=32. / 255.)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_contrast(image, lower=0.5, upper=1.5)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_hue(image, max_delta=0.2)\u00a0 \u00a0 \u00a0 elif color_ordering == 2:\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_contrast(image, lower=0.5, upper=1.5)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_hue(image, max_delta=0.2)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_brightness(image, max_delta=32. / 255.)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_saturation(image, lower=0.5, upper=1.5)\u00a0 \u00a0 \u00a0 elif color_ordering == 3:\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_hue(image, max_delta=0.2)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_saturation(image, lower=0.5, upper=1.5)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_contrast(image, lower=0.5, upper=1.5)\u00a0 \u00a0 \u00a0 \u00a0 image = tf.image.random_brightness(image, max_delta=32. / 255.)\u00a0 \u00a0 return tf.clip_by_value(image, 0.0, 1.0)\n```\n\u51fd\u6578 `distort_color` \u7684\u8a08\u7b97\u958b\u92b7\u5f88\u5927\uff0c\u9019\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u7531\u65bc\u8981\u7372\u5f97\u8272\u8abf\u548c\u98fd\u548c\u5ea6\u6240\u9700\u7684\u975e\u7dda\u6027 RGB \u81f3 HSV \u4ee5\u53ca HSV \u81f3 RGB \u8f49\u63db\u3002\u5feb\u901f\u6a21\u5f0f\u548c\u5b8c\u6574\u6a21\u5f0f\u90fd\u9700\u8981\u9032\u884c\u9019\u4e9b\u8f49\u63db\u3002\u5118\u7ba1\u5feb\u901f\u6a21\u5f0f\u7684\u8a08\u7b97\u958b\u92b7\u8f03\u5c0f\uff0c\u4f46\u5982\u679c\u5553\u7528\uff0c\u4ecd\u6703\u5c07\u6a21\u578b\u63a8\u5230\u53d7\u9650\u65bc CPU \u8a08\u7b97\u7684\u7bc4\u570d\u3002\n\u60a8\u9084\u53ef\u4ee5\u5728\u9078\u9805\u5217\u8868\u4e2d\u6dfb\u52a0\u65b0\u51fd\u6578 `distort_color_fast` \u3002\u6b64\u51fd\u6578\u6703\u4f7f\u7528 [JPEG \u8f49\u63db](https://en.wikipedia.org/wiki/YCbCr#JPEG_conversion) \u65b9\u6848\u5c07\u5716\u7247\u5f9e RGB \u6620\u5c04\u7232 YCrCb\uff0c\u4e26\u5728\u6620\u5c04\u56de RGB \u4e4b\u524d\u96a8\u6a5f\u6539\u8b8a\u4eae\u5ea6\u548c Cr/Cb \u8272\u5ea6\u3002\u4ee5\u4e0b\u4ee3\u78bc\u6bb5\u5c55\u793a\u4e86\u6b64\u51fd\u6578\u7684\u5be6\u73fe\uff1a\n```\ndef distort_color_fast(image, scope=None):\u00a0 with tf.name_scope(scope, 'distort_color', [image]):\u00a0 \u00a0 br_delta = random_ops.random_uniform([], -32./255., 32./255., seed=None)\u00a0 \u00a0 cb_factor = random_ops.random_uniform(\u00a0 \u00a0 \u00a0 \u00a0 [], -FLAGS.cb_distortion_range, FLAGS.cb_distortion_range, seed=None)\u00a0 \u00a0 cr_factor = random_ops.random_uniform(\u00a0 \u00a0 \u00a0 \u00a0 [], -FLAGS.cr_distortion_range, FLAGS.cr_distortion_range, seed=None)\u00a0 \u00a0 channels = tf.split(axis=2, num_or_size_splits=3, value=image)\u00a0 \u00a0 red_offset = 1.402 * cr_factor + br_delta\u00a0 \u00a0 green_offset = -0.344136 * cb_factor - 0.714136 * cr_factor + br_delta\u00a0 \u00a0 blue_offset = 1.772 * cb_factor + br_delta\u00a0 \u00a0 channels[0] += red_offset\u00a0 \u00a0 channels[1] += green_offset\u00a0 \u00a0 channels[2] += blue_offset\u00a0 \u00a0 image = tf.concat(axis=2, values=channels)\u00a0 \u00a0 image = tf.clip_by_value(image, 0., 1.)\u00a0 \u00a0 return image\n```\n\u9019\u662f\u4e00\u500b\u7d93\u904e\u9810\u8655\u7406\u7684\u793a\u4f8b\u5716\u7247\u3002\u7cfb\u7d71\u5df2\u96a8\u6a5f\u9078\u64c7\u4e86\u8a72\u5716\u7247\u7684\u500b\u5340\u57df\uff0c\u4e26\u4f7f\u7528 `distort_color_fast` \u51fd\u6578\u66f4\u6539\u5176\u984f\u8272\u3002\n\u51fd\u6578 `distort_color_fast` \u7684\u8a08\u7b97\u6548\u7387\u5f88\u9ad8\uff0c\u4e14\u4ecd\u6703\u4f7f\u8a13\u7df4\u53d7\u9650\u65bc TPU \u57f7\u884c\u6642\u9593\u3002\u6b64\u5916\uff0c\u9019\u7a2e\u65b9\u6cd5\u9084\u7528\u65bc\u4f7f\u7528 1,024-16,384 \u7bc4\u570d\u5167\u7684\u6279\u91cf\u5927\u5c0f\u4f86\u8a13\u7df4 Inception v3 \u6a21\u578b\uff0c\u6e96\u78ba\u7387\u8d85\u904e 78.1%\u3002\n## \u512a\u5316\u5668\n\u7576\u524d\u6a21\u578b\u5c55\u793a\u4e86\u4e09\u7a2e\u98a8\u683c\u7684\u512a\u5316\u5668\uff1aSGD\u3001\u52d5\u91cf\u548c RMSProp\u3002\n`Stochastic gradient descent (SGD)` \u662f\u6700\u7c21\u55ae\u7684\u66f4\u65b0\uff1a\u5411\u8ca0\u68af\u5ea6\u65b9\u5411\u5fae\u79fb\u6b0a\u91cd\u3002\u5118\u7ba1\u5b83\u5341\u5206\u7c21\u55ae\uff0c\u4f46\u4ecd\u7136\u53ef\u5728\u67d0\u4e9b\u6a21\u578b\u4e2d\u7372\u5f97\u826f\u597d\u7d50\u679c\u3002\u66f4\u65b0\u52d5\u614b\u53ef\u5beb\u7232\uff1a\nw k + 1 = w k \u2212 \u03b1 \u2207 f ( w k )\n\u52d5\u91cf\u662f\u4e00\u7a2e\u4e3b\u6d41\u512a\u5316\u5668\uff0c\u901a\u5e38\u76f8\u6bd4 SGD \u6536 faster \u66f4\u5feb\u3002\u6b64\u512a\u5316\u5668\u66f4\u65b0\u6b0a\u91cd\u7684\u65b9\u5f0f\u8207 SGD \u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u6703\u5728\u4e0a\u6b21\u66f4\u65b0\u7684\u65b9\u5411\u4e0a\u6dfb\u52a0\u4e00\u500b\u7d44\u4ef6\u3002\u4ee5\u4e0b\u7b49\u5f0f\u63cf\u8ff0\u4e86\u52d5\u91cf\u512a\u5316\u5668\u57f7\u884c\u7684\u66f4\u65b0\uff1a\nz k + 1 = \u03b2 z k + \u2207 f ( w k )\nw k + 1 = w k \u2212 \u03b1 z k + 1\n\u53ef\u5beb\u7232\uff1a\nw k + 1 = w k \u2212 \u03b1 \u2207 f ( w k ) + \u03b2 ( w k \u2212 w k \u2212 1 )\n\u6700\u5f8c\u4e00\u9805\u662f\u4e0a\u6b21\u66f4\u65b0\u65b9\u5411\u7684\u7d44\u4ef6\u3002\n\u5c0d\u65bc\u52d5\u91cf \u03b2 \uff0c\u6211\u5011\u4f7f\u7528\u503c 0.9\u3002\nRMSprop \u662f\u7531 Geoff Hinton \u5728\u4e00\u6b21 [\u8b1b\u5ea7](http://www.cs.toronto.edu/%7Etijmen/csc321/slides/lecture_slides_lec6.pdf) \u4e2d\u9996\u6b21\u63d0\u51fa\u7684\u5e38\u7528\u512a\u5316\u5668\u3002 \u4ee5\u4e0b\u7b49\u5f0f\u63cf\u8ff0\u4e86\u512a\u5316\u5668\u7684\u5de5\u4f5c\u539f\u7406\uff1a\ng \u2212 2 k + 1 = \u03b1 g \u2212 2 k + ( 1 \u2212 \u03b1 ) g 2 k$$w_{k+1}=\\beta w_k + \\frac{\\eta}{\\sqrt {g_{k+1^{\\math-bf2{+{+}}}\n\u5c0d\u65bc Inception v3\uff0c\u6e2c\u8a66\u986f\u793a RMSProp \u53d6\u5f97\u4e86\u6700\u9ad8\u6e96\u78ba\u7387\u4e26\u4e14\u7528\u6642\u6700\u77ed\uff0c\u52d5\u91cf\u7684\u8868\u73fe\u7dca\u96a8\u5176\u5f8c\u3002\u56e0\u6b64\uff0cRMSprop \u88ab\u8a2d\u7f6e\u7232\u9ed8\u8a8d\u512a\u5316\u5668\u3002\u6240\u7528\u53c3\u6578\u7232\uff1adecay \u03b1 = 0.9\u3001momentum \u03b2 = 0.9\uff0c\u4e14 \u03f5 = 1.0\u3002\n\u4ee5\u4e0b\u4ee3\u78bc\u6bb5\u5c55\u793a\u77ad\u5982\u4f55\u8a2d\u7f6e\u9019\u4e9b\u53c3\u6578\uff1a\n```\nif FLAGS.optimizer == 'sgd':\u00a0 tf.logging.info('Using SGD optimizer')\u00a0 optimizer = tf.train.GradientDescentOptimizer(\u00a0 \u00a0 \u00a0 learning_rate=learning_rate)elif FLAGS.optimizer == 'momentum':\u00a0 tf.logging.info('Using Momentum optimizer')\u00a0 optimizer = tf.train.MomentumOptimizer(\u00a0 \u00a0 \u00a0 learning_rate=learning_rate, momentum=0.9)elif FLAGS.optimizer == 'RMS':\u00a0 tf.logging.info('Using RMS optimizer')\u00a0 optimizer = tf.train.RMSPropOptimizer(\u00a0 \u00a0 \u00a0 learning_rate,\u00a0 \u00a0 \u00a0 RMSPROP_DECAY,\u00a0 \u00a0 \u00a0 momentum=RMSPROP_MOMENTUM,\u00a0 \u00a0 \u00a0 epsilon=RMSPROP_EPSILON)else:\u00a0 tf.logging.fatal('Unknown optimizer:', FLAGS.optimizer)\n```\n\u7576\u5728 TPU \u4e0a\u904b\u884c\u4e26\u4f7f\u7528 Estimator API \u6642\uff0c\u512a\u5316\u5668\u9700\u8981\u5c01\u88dd\u5728 `CrossShardOptimizer` \u51fd\u6578\u4e2d\uff0c\u4ee5\u78ba\u4fdd\u526f\u672c\u4e4b\u9593\u7684\u540c\u6b65\uff08\u4ee5\u53ca\u4efb\u4f55\u5fc5\u8981\u7684\u4ea4\u53c9\u901a\u4fe1\uff09\u3002\u4ee5\u4e0b\u4ee3\u78bc\u6bb5\u5c55\u793a\u4e86 Inception v3 \u6a21\u578b\u5982\u4f55\u5c01\u88dd\u512a\u5316\u5668\uff1a\n```\nif FLAGS.use_tpu:\u00a0 \u00a0 optimizer = tpu_optimizer.CrossShardOptimizer(optimizer)update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)with tf.control_dependencies(update_ops):\u00a0 train_op = optimizer.minimize(loss, global_step=global_step)\n```\n## \u6307\u6578\u5e73\u5747\u6578 (EMA)\n\u5728\u8a13\u7df4\u6642\uff0c\u7cfb\u7d71\u6703\u6839\u64da\u512a\u5316\u5668\u7684\u66f4\u65b0\u898f\u5247\u5728\u53cd\u5411\u50b3\u64ad\u671f\u9593\u66f4\u65b0\u53ef\u8a13\u7df4\u53c3\u6578\u3002\u4e0a\u4e00\u90e8\u5206\u4e2d\u5df2\u7d93\u8a0e\u8ad6\u904e\u8aaa\u660e\u9019\u4e9b\u898f\u5247\u7684\u65b9\u7a0b\u5f0f\uff0c\u7232\u65b9\u4fbf\u8d77\u898b\uff0c\u5728\u6b64\u518d\u4ecb\u7d39\u4e00\u904d\uff1a\n\u03b8 k + 1 = \u03b8 k \u2212 \u03b1 \u2207 f ( \u03b8 k ) ( S G D )\n\u03b8 k + 1 = \u03b8 k \u2212 \u03b1 z k + 1 ( \u52d5 \u91cf )\n\u03b8 k + 1 = \u03b2 \u03b8 k + \u03b7 \u221a g k + 1 + \u03f5 \u2212 2 \u2207 f ( \u03b8 k ) ( R M S p r o p )\n[\u6307\u6578\u5e73\u5747\u6578](https://en.wikipedia.org/wiki/Exponential_smoothing) \uff08\u4e5f\u7a31\u7232\u6307\u6578\u5e73\u6ed1\uff09\u662f\u4e00\u500b\u61c9\u7528\u65bc\u66f4\u65b0\u5f8c\u6b0a\u91cd\u7684\u53ef\u9078\u5f8c\u671f\u8655\u7406\u64cd\u4f5c\u6b65\u9a5f\uff0c\u6709\u6642\u53ef\u4ee5\u986f\u986f\u8457\u63d0\u9ad8\u6027\u80fd\u3002TensorFlow \u63d0\u4f9b\u51fd\u6578 [tf.train.ExponentialMovingAverage](https://www.tensorflow.org/api_docs/python/tf/train/ExponentialMovingAverage?hl=zh-cn) \uff0c\u8a72\u51fd\u6578\u4f7f\u7528\u4ee5\u4e0b\u516c\u5f0f\u8a08\u7b97\u6b0a\u91cd \u03b8 \u7684 ema \u02c6 \u03b8 \uff1a\n^ \u03b8 t = \u03b1 \u02c6 \u03b8 t \u2212 1 + ( 1 \u2212 \u03b1 ) \u03b8 t\n\u5176\u4e2d \u03b1 \u662f\u4e00\u500b\u8870\u6e1b\u56e0\u6578\uff08\u63a5\u8fd1\u65bc 1.0\uff09\u3002\u5728 Inception v3 \u6a21\u578b\u4e2d\uff0c \u03b1 \u8a2d\u7f6e\u7232 0.995\u3002\n\u96d6\u7136\u6b64\u8a08\u7b97\u662f\u7121\u9650\u8108\u885d\u97ff\u61c9 (IIR) \u6ffe\u6ce2\u5668\uff0c\u4f46\u8870\u6e1b\u56e0\u6578\u6703\u5efa\u7acb\u5927\u90e8\u5206\u80fd\u91cf\uff08\u6216\u76f8\u95dc\u6a23\u672c\uff09\u6240\u5728\u7684\u6709\u6548\u7a97\u53e3\uff0c\u5982\u4e0b\u5716\u6240\u793a\uff1a\n\u6211\u5011\u53ef\u4ee5\u5c07\u904e\u6ffe\u5668\u65b9\u7a0b\u91cd\u5beb\u7232\uff1a\n\u02c6 \u03b8 t + T + 1 = \u03b1 ( 1 \u2212 \u03b1 ) ( \u03b8 t + T + \u03b1 \u03b8 t + T \u2212 1 + . . . + \u03b1 t + T \u03b8 0 )\n\u5176\u4e2d\u6211\u5011\u4f7f\u7528 \u02c6 \u03b8 \u2212 1 = 0 \u3002\n\u03b1 k \u503c\u96a8\u7740 k \u7684\u589e\u52a0\u800c\u8870\u6e1b\uff0c\u56e0\u6b64\u53ea\u6709\u4e00\u90e8\u5206\u6a23\u672c\u6703\u5c0d \u02c6 \u03b8 t + T + 1 \u7522\u751f\u8f03\u5927\u5f71\u97ff\u3002\u8870\u6e1b\u56e0\u6578\u503c\u7684\u7d93\u9a57\u6cd5\u5247\u662f\uff1a 1 1 \u2212 \u03b1 \uff0c\u5c0d\u61c9\u65bc \u03b1 = 200 for =0.995\u3002\n\u6211\u5011\u9996\u5148\u7372\u5f97\u4e00\u7cfb\u5217\u53ef\u8a13\u7df4\u8b8a\u91cf\uff0c\u7136\u5f8c\u4f7f\u7528 `apply()` \u65b9\u6cd5\u7232\u5404\u500b\u8a13\u7df4\u5f8c\u7684\u8b8a\u91cf\u5275\u5efa\u5f71\u5b50\u8b8a\u91cf\u3002\u4ee5\u4e0b\u4ee3\u78bc\u6bb5\u5c55\u793a\u4e86 Inception v3 \u6a21\u578b\u5be6\u73fe\uff1a\n```\nupdate_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)with tf.control_dependencies(update_ops):\u00a0 train_op = optimizer.minimize(loss, global_step=global_step)if FLAGS.moving_average:\u00a0 ema = tf.train.ExponentialMovingAverage(\u00a0 \u00a0 \u00a0 decay=MOVING_AVERAGE_DECAY, num_updates=global_step)\u00a0 variables_to_average = (tf.trainable_variables() +\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tf.moving_average_variables())\u00a0 with tf.control_dependencies([train_op]), tf.name_scope('moving_average'):\u00a0 \u00a0 train_op = ema.apply(variables_to_average)\n```\n\u6211\u5011\u5e0c\u671b\u5728\u8a55\u4f30\u671f\u9593\u4f7f\u7528 EMA \u8b8a\u91cf\u3002\u6211\u5011\u5b9a\u7fa9\u4e86\u5c07 `variables_to_restore()` \u65b9\u6cd5\u61c9\u7528\u65bc\u6aa2\u67e5\u9ede\u6587\u4ef6\u7684 `LoadEMAHook` \u985e\uff0c\u4ee5\u4f7f\u7528\u5f71\u5b50\u8b8a\u91cf\u540d\u7a31\u9032\u884c\u8a55\u4f30\uff1a\n```\nclass LoadEMAHook(tf.train.SessionRunHook):\u00a0 def __init__(self, model_dir):\u00a0 \u00a0 super(LoadEMAHook, self).__init__()\u00a0 \u00a0 self._model_dir = model_dir\u00a0 def begin(self):\u00a0 \u00a0 ema = tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY)\u00a0 \u00a0 variables_to_restore = ema.variables_to_restore()\u00a0 \u00a0 self._load_ema = tf.contrib.framework.assign_from_checkpoint_fn(\u00a0 \u00a0 \u00a0 \u00a0 tf.train.latest_checkpoint(self._model_dir), variables_to_restore)\u00a0 def after_create_session(self, sess, coord):\u00a0 \u00a0 tf.logging.info('Reloading EMA...')\u00a0 \u00a0 self._load_ema(sess)\n```\n`hooks` \u51fd\u6578\u6703\u88ab\u50b3\u905e\u5230 `evaluate()` \uff0c\u5982\u4ee5\u4e0b\u4ee3\u78bc\u6bb5\u6240\u793a\uff1a\n```\nif FLAGS.moving_average:\u00a0 \u00a0 eval_hooks = [LoadEMAHook(FLAGS.model_dir)]else:\u00a0 \u00a0 eval_hooks = []\u00a0 \u00a0 \u2026eval_results = inception_classifier.evaluate(\u00a0 \u00a0 input_fn=InputPipeline(False), steps=eval_steps, hooks=eval_hooks)\n```\n## \u6279\u91cf\u6b78\u4e00\u5316\n[\u6279\u91cf\u6b78\u4e00\u5316](https://arxiv.org/abs/1502.03167) \u662f\u4e00\u7a2e\u5ee3\u6cdb\u7528\u65bc\u5c0d\u6a21\u578b\u7684\u8f38\u5165\u7279\u5fb5\u9032\u884c\u6b78\u4e00\u5316\u8655\u7406\u7684\u6280\u8853\uff0c\u5f9e\u800c\u986f\u8457\u7e2e\u77ed\u6536\u6582\u6642\u9593\u3002\u5b83\u662f\u8fd1\u5e74\u4f86\u6a5f\u5668\u5b78\u7fd2\u9818\u57df\u4e2d\u4f7f\u7528\u8f03\u7232\u5ee3\u6cdb\u7684\u6709\u6548\u7b97\u6cd5\u6539\u9032\u4e4b\u4e00\uff0c\u53ef\u5728\u591a\u7a2e\u6a21\u578b\uff08\u5305\u62ec Inception v3\uff09\u4e2d\u4f7f\u7528\u3002\n\u6fc0\u6d3b\u8f38\u5165\u901a\u904e\u6e1b\u53bb\u5e73\u5747\u503c\u4f75\u9664\u4ee5\u6a19\u6e96\u5dee\u4f86\u9032\u884c\u6b78\u4e00\u5316\u3002\u7232\u4e86\u5728\u6709\u53cd\u5411\u50b3\u64ad\u7684\u60c5\u6cc1\u4e0b\u5e73\u8861\u5404\u500b\u56e0\u7d20\uff0c\u7cfb\u7d71\u5c07\u5728\u6bcf\u4e00\u5c64\u4e2d\u5f15\u5165\u5169\u500b\u53ef\u8a13\u7df4\u53c3\u6578\u3002\u6a19\u6e96\u5316\u8f38\u51fa \u02c6 x \u6703\u9032\u884c\u5f8c\u7e8c\u904b\u7b97 \u03b3 \u02c6 x + \u03b2 \uff0c\u5176\u4e2d \u03b3 \u548c \u03b2 \u662f\u4e00\u7a2e\u6a19\u6e96\u5dee\uff0c\u4e5f\u662f\u6a21\u578b\u672c\u8eab\u5b78\u7fd2\u5230\u7684\u5e73\u5747\u503c\u3002\n\u9019\u7bc7 [\u8ad6\u6587](https://arxiv.org/abs/1502.03167) \u4e2d\u5305\u542b\u5b8c\u6574\u65b9\u7a0b\u96c6\uff0c\u7232\u65b9\u4fbf\u8d77\u898b\uff0c\u5728\u6b64\u518d\u4ecb\u7d39\u4e00\u904d\uff1a\n**\u8f38\u5165** \uff1a\u5c0f\u6279\u91cf\u4e2d\u7684 X \u503c\uff1a \u03a6 = { x 1.. m } \u8981\u5b78\u7fd2\u7684\u53c3\u6578\uff1a \u03b3 \u3001 \u03b2\n**\u8f38\u51fa** \uff1a{ y i = B N \u03b3 , \u03b2 ( x i ) }\n\u03bc \u03d5 \u2190 1 m m \u2211 i = 1 x i ( m i n i \u2212 b a t c h m e a n )\n\u03c3 \u03d5 2 \u2190 1 m m \u2211 i = 1 ( x i \u2212 \u03bc \u03d5 ) 2 ( m i n i \u2212 b a t c h v a r i a n c e )\n^ x i \u2190 x i \u2212 \u03bc \u03d5 \u221a \u03c3 2 \u03d5 + \u03f5 ( n o r m a l i z e )\ny i \u2190 \u03b3 ^ x i + \u03b2 \u2261 B N \u03b3 , \u03b2 ( x i ) ( s c a l e a n d s h i f t )\n\u6b78\u4e00\u5316\u767c\u751f\u5728\u8a13\u7df4\u671f\u9593\uff0c\u4f46\u5728\u8a55\u4f30\u6642\uff0c\u6211\u5011\u5e0c\u671b\u6a21\u578b\u4ee5\u78ba\u5b9a\u6027\u7684\u65b9\u5f0f\u8868\u73fe\uff1a\u5716\u7247\u7684\u5206\u985e\u7d50\u679c\u61c9\u50c5\u53d6\u6c7a\u65bc\u8f38\u5165\u5716\u7247\uff0c\u800c\u4e0d\u662f\u8f38\u5165\u7d66\u6a21\u578b\u7684\u5716\u7247\u96c6\u3002\u56e0\u6b64\uff0c\u6211\u5011\u9700\u8981\u4fee\u6b63 \u03bc \u548c \u03c3 2 \uff0c\u4e26\u4f7f\u7528\u8868\u793a\u5716\u7247\u586b\u5145\u7d71\u8a08\u4fe1\u606f\u7684\u503c\u3002\n\u8a72\u6a21\u578b\u6703\u8a08\u7b97\u5c0f\u6279\u91cf\u5747\u503c\u548c\u65b9\u5dee\u7684\u79fb\u52d5\u5e73\u5747\u503c\uff1a\n\u02c6 \u03bc i = \u03b1 \u02c6 \u03bc t \u2212 1 + ( 1 \u2212 \u03b1 ) \u03bc t\n\u02c6 \u03c3 t 2 = \u03b1 \u02c6 \u03c3 2 t \u2212 1 + ( 1 \u2212 \u03b1 ) \u03c3 t 2\n\u5177\u9ad4\u5c0d\u65bc Inception v3 \u800c\u8a00\uff0c\u5373\u5df2\u7372\u5f97\uff08\u4f7f\u7528\u8d85\u53c3\u6578\u5fae\u8abf\uff09\u9069\u7576\u8870\u6e1b\u56e0\u6578\u4ee5\u7528\u65bc GPU\u3002\u6211\u5011\u4e5f\u60f3\u8981\u5728 TPU \u4e0a\u4f7f\u7528\u8a72\u503c\uff0c\u7232\u6b64\u9700\u8981\u9032\u884c\u4e00\u4e9b\u8abf\u6574\u3002\n\u6279\u91cf\u6b78\u4e00\u5316\u79fb\u52d5\u5747\u503c\u548c\u65b9\u5dee\u5747\u901a\u904e\u4f4e\u901a\u6ffe\u6ce2\u5668\u8a08\u7b97\uff0c\u5982\u4ee5\u4e0b\u65b9\u7a0b\u5f0f\u6240\u793a\uff08\u6b64\u8655\uff0c y t \u8868\u793a\u79fb\u52d5\u5747\u503c\u6216\u65b9\u5dee\uff09\uff1a\ny t = \u03b1 y t \u2212 1 + ( 1 \u2212 \u03b1 ) x t\n(1)\n\u5728 8x1 GPU \uff08\u540c\u6b65\uff09\u4f5c\u696d\u4e2d\uff0c\u6bcf\u500b\u526f\u672c\u90fd\u5c07\u8b80\u53d6\u4e26\u66f4\u65b0\u7576\u524d\u79fb\u52d5\u5e73\u5747\u503c\u3002\u7576\u524d\u526f\u672c\u5fc5\u9808\u5beb\u5165\u65b0\u7684\u79fb\u52d5\u8b8a\u91cf\uff0c\u4e0b\u4e00\u500b\u526f\u672c\u624d\u80fd\u8b80\u53d6\u8a72\u8b8a\u91cf\u3002\n\u5b58\u5728 8 \u500b\u526f\u672c\u6642\uff0c\u96c6\u6210\u5b78\u7fd2\u66f4\u65b0\u7684\u64cd\u4f5c\u96c6\u5982\u4e0b\u6240\u793a\uff1a\ny t = \u03b1 y t \u2212 1 + ( 1 \u2212 \u03b1 ) x t\ny t + 1 = \u03b1 y t + ( 1 \u2212 \u03b1 ) x t + 1\ny t + 2 = \u03b1 y t + 1 + ( 1 \u2212 \u03b1 ) x t + 2\ny t + 3 = \u03b1 y t + 2 + ( 1 \u2212 \u03b1 ) x t + 3\ny t + 4 = \u03b1 y t + 3 + ( 1 \u2212 \u03b1 ) x t + 4\ny t + 5 = \u03b1 y t + 4 + ( 1 \u2212 \u03b1 ) x t + 5\ny t + 6 = \u03b1 y t + 5 + ( 1 \u2212 \u03b1 ) x t + 6\ny t + 7 = \u03b1 y t + 6 + ( 1 \u2212 \u03b1 ) x t + 7\n\u9019\u7d44 8 \u500b\u9806\u5e8f\u66f4\u65b0\u53ef\u4ee5\u5beb\u7232\uff1a\ny t + 7 = \u03b1 8 y t \u2212 1 + ( 1 \u2212 \u03b1 ) 7 \u2211 k = 0 \u03b1 7 \u2212 k x t + k\n(2)\n\u5728 TPU \u4e0a\u7684\u7576\u524d\u79fb\u52d5\u529b\u77e9\u8a08\u7b97\u5be6\u73fe\u4e2d\uff0c\u6bcf\u500b\u5206\u7247\u5c07\u6703\u7368\u7acb\u57f7\u884c\u8a08\u7b97\uff0c\u4e26\u4e14\u4e0d\u5b58\u5728\u8de8\u5206\u7247\u901a\u4fe1\u3002\u7cfb\u7d71\u6703\u5411\u6bcf\u500b\u5206\u7247\u5206\u767c\u6279\u91cf\uff0c\u6bcf\u500b\u5206\u7247\u8655\u7406\u7e3d\u6279\u91cf\u7684 1/8\uff08\u5b58\u5728 8 \u500b\u5206\u7247\u6642\uff09\u3002\n\u96d6\u7136\u6bcf\u500b\u5206\u7247\u90fd\u6703\u8a08\u7b97\u79fb\u52d5\u6642\u523b\uff08\u5373\u5e73\u5747\u503c\u548c\u65b9\u5dee\uff09\uff0c\u4f46\u53ea\u6709\u4f86\u81ea\u5206\u7247 0 \u7684\u7d50\u679c\u7e94\u6703\u50b3\u56de\u4e3b\u6a5f CPU\u3002\u56e0\u6b64\uff0c\u5be6\u969b\u4e0a\u53ea\u6709\u4e00\u500b\u526f\u672c\u6b63\u5728\u9032\u884c\u79fb\u52d5\u5747\u503c/\u65b9\u5dee\u66f4\u65b0\uff1a\nz t = \u03b2 z t \u2212 1 + ( 1 \u2212 \u03b2 ) u t\n(3)\n\u6b64\u66f4\u65b0\u7684\u767c\u751f\u7387\u662f\u5176\u9806\u5e8f\u5c0d\u61c9\u9805\u7684 1/8\u3002\u7232\u4e86\u6bd4\u8f03 GPU \u548c TPU \u66f4\u65b0\u65b9\u7a0b\u5f0f\uff0c\u6211\u5011\u9700\u8981\u5c0d\u9f4a\u5404\u81ea\u7684\u6642\u9593\u5c3a\u5ea6\u3002\u5177\u9ad4\u800c\u8a00\uff0cGPU \u4e0a\u69cb\u6210 8 \u500b\u9806\u5e8f\u66f4\u65b0\u7684\u4e00\u7d44\u64cd\u4f5c\u61c9\u8207 TPU \u4e0a\u7684\u55ae\u500b\u66f4\u65b0\u9032\u884c\u6bd4\u8f03\uff0c\u5982\u4e0b\u5716\u6240\u793a\uff1a\n\u4ee5\u4e0b\u7232\u5df2\u4fee\u6539\u6642\u9593\u7d22\u5f15\u7684\u65b9\u7a0b\u5f0f\uff1a\ny t = \u03b1 8 y t \u2212 1 + ( 1 \u2212 \u03b1 ) 7 \u2211 k = 0 \u03b1 7 \u2212 k x t \u2212 k / 8 ( G P U )\nz t = \u03b2 z t \u2212 1 + ( 1 \u2212 \u03b2 ) u t ( T P U )\n\u5982\u679c\u6211\u5011\u5047\u8a2d 8 \u500b\u5c0f\u6279\u6b21\uff08\u91dd\u5c0d\u6240\u6709\u76f8\u95dc\u7dad\u5ea6\u9032\u884c\u4e86\u6b78\u4e00\u5316\uff09\u5728 GPU 8 \u5c0f\u6279\u6b21\u9806\u5e8f\u66f4\u65b0\u4e2d\u7522\u751f\u76f8\u4f3c\u7684\u503c\uff0c\u90a3\u9ebc\u6211\u5011\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u8fd1\u4f3c\u516c\u5f0f\uff1a\ny t = \u03b1 8 y t \u2212 1 + ( 1 \u2212 \u03b1 ) 7 \u2211 k = 0 \u03b1 7 \u2212 k ^ x t = \u03b1 8 y t \u2212 1 + ( 1 \u2212 \u03b1 8 ) ^ x t ( G P U )\nz t = \u03b2 z t \u2212 1 + ( 1 \u2212 \u03b2 ) u t ( T P U )\n\u7232\u4e86\u5339\u914d\u7d66\u5b9a\u8870\u6e1b\u56e0\u6578\u5c0d GPU \u7684\u5f71\u97ff\uff0c\u6211\u5011\u76f8\u61c9\u4fee\u6539 TPU \u4e0a\u7684\u8870\u6e1b\u56e0\u6578\u3002\u5177\u9ad4\u4f86\u8aaa\uff0c\u6211\u5011\u8a2d\u7f6e \u03b2 = \u03b1 8 \u3002\n\u5c0d\u65bc Inception v3\uff0cGPU \u4e2d\u4f7f\u7528\u7684\u8870\u6e1b\u503c\u7232 \u03b1 =0.9997\uff0c\u53ef\u8f49\u63db\u7232 TPU \u4e0a\u7684\u8870\u6e1b\u503c \u03b2 =0.9976\u3002\n## \u5b78\u7fd2\u901f\u7387\u81ea\u9069\u61c9\n\u96a8\u7740\u6279\u91cf\u5927\u5c0f\u589e\u52a0\uff0c\u8a13\u7df4\u96e3\u5ea6\u52a0\u5927\u3002\u4eba\u5011\u4e0d\u65b7\u63d0\u51fa\u4e0d\u540c\u65b9\u6cd5\uff0c\u5e0c\u671b\u80fd\u5920\u9ad8\u6548\u5730\u5c0d\u5927\u6279\u91cf\u9032\u884c\u8a13\u7df4\uff08\u4f8b\u5982\uff0c\u8acb\u53c3\u95b1 [\u6b64\u8655](https://arxiv.org/abs/1709.05011) \u3001 [\u6b64\u8655](https://arxiv.org/abs/1706.02677) \u548c [\u6b64\u8655](https://arxiv.org/abs/1711.04325) \uff09\u3002\n\u5176\u4e2d\u4e00\u7a2e\u6280\u8853\u662f\u9010\u6b65\u63d0\u9ad8\u5b78\u7fd2\u901f\u7387\uff08\u4e5f\u7a31\u7232\u6f38\u9032\u5f0f\u63d0\u5347\uff09\u3002\u4f7f\u7528\u6f38\u9032\u5f0f\u63d0\u5347\uff0c\u53ef\u5728\u4f7f\u7528 4096 \u5230 16384 \u7bc4\u570d\u5167\u7684\u6279\u91cf\u5927\u5c0f\u5c0d\u6a21\u578b\u9032\u884c\u8a13\u7df4\u6642\u6210\u529f\u5be6\u73fe 78.1% \u4ee5\u4e0a\u7684\u6e96\u78ba\u7387\u3002\u5c0d\u65bc Inception v3\uff0c\u9996\u5148\u5c07\u5b78\u7fd2\u901f\u7387\u8a2d\u7f6e\u7232\u5e38\u898f\u8d77\u59cb\u5b78\u7fd2\u901f\u7387\u7684\u7d04 10%\u3002\u5728\u6307\u5b9a\uff08\u5c11\u91cf\uff09\u6578\u91cf\u7684\u201c\u51b7\u9031\u671f\u201d\u4e2d\uff0c\u5b78\u7fd2\u901f\u7387\u4fdd\u6301\u6b64\u6046\u5b9a\u4f4e\u503c\uff0c\u7136\u5f8c\u5728\u6307\u5b9a\u6578\u91cf\u7684\u201c\u71b1\u8eab\u9031\u671f\u201d\u4e2d\u958b\u59cb\u7dda\u6027\u589e\u52a0\u3002\u5728\u201c\u71b1\u8eab\u9031\u671f\u201d\u7684\u6700\u5f8c\uff0c\u5b78\u7fd2\u901f\u7387\u6703\u8207\u4f7f\u7528\u4e86\u5e38\u898f\u6307\u6578\u8870\u6e1b\u6642\u7684\u5b78\u7fd2\u901f\u7387\u76f8\u4ea4\u3002\u4e0b\u5716\u5c0d\u6b64\u9032\u884c\u4e86\u8aaa\u660e\u3002\n\u4ee5\u4e0b\u4ee3\u78bc\u6bb5\u5c55\u793a\u77ad\u5982\u4f55\u57f7\u884c\u6b64\u64cd\u4f5c\uff1a\n```\ninitial_learning_rate = FLAGS.learning_rate * FLAGS.train_batch_size / 256if FLAGS.use_learning_rate_warmup:\u00a0 warmup_decay = FLAGS.learning_rate_decay**(\u00a0 \u00a0 (FLAGS.warmup_epochs + FLAGS.cold_epochs) /\u00a0 \u00a0 FLAGS.learning_rate_decay_epochs)\u00a0 adj_initial_learning_rate = initial_learning_rate * warmup_decayfinal_learning_rate = 0.0001 * initial_learning_ratetrain_op = Noneif training_active:\u00a0 batches_per_epoch = _NUM_TRAIN_IMAGES / FLAGS.train_batch_size\u00a0 global_step = tf.train.get_or_create_global_step()\u00a0 current_epoch = tf.cast(\u00a0 \u00a0 (tf.cast(global_step, tf.float32) / batches_per_epoch), tf.int32)\u00a0 learning_rate = tf.train.exponential_decay(\u00a0 \u00a0 learning_rate=initial_learning_rate,\u00a0 \u00a0 global_step=global_step,\u00a0 \u00a0 decay_steps=int(FLAGS.learning_rate_decay_epochs * batches_per_epoch),\u00a0 \u00a0 decay_rate=FLAGS.learning_rate_decay,\u00a0 \u00a0 staircase=True)\u00a0 if FLAGS.use_learning_rate_warmup:\u00a0 \u00a0 wlr = 0.1 * adj_initial_learning_rate\u00a0 \u00a0 wlr_height = tf.cast(\u00a0 \u00a0 \u00a0 0.9 * adj_initial_learning_rate /\u00a0 \u00a0 \u00a0 (FLAGS.warmup_epochs + FLAGS.learning_rate_decay_epochs - 1),\u00a0 \u00a0 \u00a0 tf.float32)\u00a0 \u00a0 epoch_offset = tf.cast(FLAGS.cold_epochs - 1, tf.int32)\u00a0 \u00a0 exp_decay_start = (FLAGS.warmup_epochs + FLAGS.cold_epochs +\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0FLAGS.learning_rate_decay_epochs)\u00a0 \u00a0 lin_inc_lr = tf.add(\u00a0 \u00a0 \u00a0 wlr, tf.multiply(\u00a0 \u00a0 \u00a0 \u00a0 tf.cast(tf.subtract(current_epoch, epoch_offset), tf.float32),\u00a0 \u00a0 \u00a0 \u00a0 wlr_height))\u00a0 \u00a0 learning_rate = tf.where(\u00a0 \u00a0 \u00a0 tf.greater_equal(current_epoch, FLAGS.cold_epochs),\u00a0 \u00a0 \u00a0 (tf.where(tf.greater_equal(current_epoch, exp_decay_start),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 learning_rate, lin_inc_lr)),\u00a0 \u00a0 \u00a0 \u00a0wlr)\u00a0 # Set a minimum boundary for the learning rate.\u00a0 learning_rate = tf.maximum(\u00a0 \u00a0 \u00a0 learning_rate, final_learning_rate, name='learning_rate')\n```", "guide": "Cloud TPU"}