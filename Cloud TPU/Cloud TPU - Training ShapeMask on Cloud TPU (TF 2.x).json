{"title": "Cloud TPU - Training ShapeMask on Cloud TPU (TF 2.x)", "url": "https://cloud.google.com/tpu/docs/tutorials/shapemask-2.x", "abstract": "# Cloud TPU - Training ShapeMask on Cloud TPU (TF 2.x)\nThis document demonstrates how to run the ShapeMask model using Cloud TPU with the COCO dataset.\nThe instructions below assume you are already familiar with running a model on Cloud TPU. If you are new to Cloud TPU, you can refer to the [Quickstart](/tpu/docs/quickstart) for a basic introduction.\nIf you plan to train on a TPU Pod slice, review [Training on TPU Pods](/tpu/docs/training-on-tpu-pods) to understand parameter changes required for Pod slices.\n **Warning:** This tutorial uses a third-party dataset. Google provides no representation, warranty, or other guarantees about the validity, or any other aspects of this dataset.\n", "content": "## Objectives\n- Prepare the COCO dataset\n- Create a Cloud Storage bucket to hold your dataset and model output\n- Set up TPU resources for training and evaluation\n- Run training and evaluation on a single Cloud TPU or a Cloud TPU Pod\n## CostsIn this document, you use the following billable components of Google Cloud:- Compute Engine\n- Cloud TPU\n- Cloud Storage\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \n## Before you begin **Important:** You can use this tutorial with either the TPU VM or the TPU Node configuration. The two VM architectures are described in [System Architecture](/tpu/docs/system-architecture-tpu-vm) . The `gcloud` commands you use depend on the TPU configuration you are using. In this tutorial, each `gcloud` command is shown in a tabbed section. Choose the tab for the TPU configuration you want to use and the web page shows the appropriate `gcloud` command. Unless you know you need to use TPU Nodes, we recommend using TPU VMs.\nBefore starting this tutorial, check that your Google Cloud project is correctly set up.- This walkthrough uses billable components of Google Cloud. Check the [Cloud TPU pricing page](/tpu/docs/pricing) to  estimate your costs. Be sure to [clean up](#clean_up) resources you create when you've finished with them to avoid unnecessary  charges.\n## Cloud TPU single device training **Note:** Do you want to train the model using a Cloud TPU pod? See [ TPU Pod training.](#pod-training) \nThis section provides information on setting up Cloud Storage, VM, and Cloud TPU resources for single device training.\nIf you plan to train on a TPU Pod slice, review [Training on TPU Pods](/tpu/docs/training-on-tpu-pods) to understand the changes required to train on Pod slices.\n **Important: ** Set up your Cloud TPU resources and your Cloud Storage bucket in the same region/zone to reduce network latency and network costs.\n- In your [Cloud Shell](https://console.cloud.google.com/) , create a variable for your project's ID.```\nexport PROJECT_ID=project-id\n```\n- Configure Google Cloud CLI to use the project where you want to create Cloud TPU.```\ngcloud config set project ${PROJECT_ID}\n```The first time you run this command in a new Cloud Shell VM, an `Authorize Cloud Shell` page is displayed. Click `Authorize` at the bottom of the page to allow `gcloud` to make GCP API calls with your credentials.\n- Create a Service Account for the Cloud TPU project.```\ngcloud beta services identity create --service tpu.googleapis.com --project $PROJECT_ID\n```The command returns a Cloud TPU Service Account with following format:```\nservice-PROJECT_NUMBER@cloud-tpu.iam.gserviceaccount.com\n```\n### Prepare the COCO datasetThis tutorial uses the COCO dataset. The dataset needs to be in TFRecord format on a Cloud Storage bucket to be used for the training.\nThe bucket location must be in the same region as your virtual machine (VM) and your TPU node. VMs and TPU nodes are located in [specific zones](/tpu/docs/types-zones) , which are subdivisions within a region.\nThe Cloud Storage bucket stores the data you use to train your model and the training results. The `gcloud compute tpus execution-groups` tool used in this tutorial sets up default permissions for the Cloud TPU Service Account you set up in the previous step. If you want finer-grain permissions, review the [access level permissions](/tpu/docs/storage-buckets) .\nIf you already have the COCO dataset prepared on a Cloud Storage bucket that is located in the [zone](/tpu/docs/types-zones-tpu-vm) you will be using to train the model, you can [launch the TPU resources](#launch-tpu-resources) and prepare Cloud TPU for training. Otherwise, use the following steps to prepare the dataset.- In your [Cloud Shell](https://console.cloud.google.com/) , configure `gcloud` with your project ID.```\nexport PROJECT_ID=project-idgcloud config set project ${PROJECT_ID}\n```\n- In your [Cloud Shell](https://console.cloud.google.com/) , create a Cloud Storage bucket using the following command: **Note:** In the following command, replace with the name you want to assign to your bucket.```\ngsutil mb -p ${PROJECT_ID} -c standard -l europe-west4 gs://bucket-name\n```\n- Launch a Compute Engine VM instance.This VM instance will only be used to download and preprocess the COCO dataset. Fill in the with a name of your choosing.```\n$ gcloud compute tpus execution-groups create \\\u00a0--vm-only \\\u00a0--name=instance-name \\\u00a0--zone=europe-west4-a \\\u00a0--disk-size=300 \\\u00a0--machine-type=n1-standard-16 \\\u00a0--tf-version=2.12.0\n```\n- If you are not automatically logged in to the Compute Engine instance, log in by running the following `ssh` command. When you are logged into the VM, your shell prompt changes from `username@projectname` to `username@vm-name` :```\n\u00a0 $ gcloud compute ssh instance-name --zone=europe-west4-a\u00a0 \n```\n- Set up two variables, one for the storage bucket you created earlier and one for the directory that holds the training data (DATA_DIR) on the storage bucket.```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name\n``````\n(vm)$ export DATA_DIR=${STORAGE_BUCKET}/coco\n```\n- Install the packages needed to pre-process the data.```\n(vm)$ sudo apt-get install -y python3-tk && \\\u00a0 pip3 install --user Cython matplotlib opencv-python-headless pyyaml Pillow && \\\u00a0 pip3 install --user \"git+https://github.com/cocodataset/cocoapi#egg=pycocotools&subdirectory=PythonAPI\"\n```\n- Run the `download_and_preprocess_coco.sh` script to convert the COCO dataset into a set of TFRecords ( `*.tfrecord` ) that the training application expects.```\n(vm)$ git clone https://github.com/tensorflow/tpu.git(vm)$ sudo bash tpu/tools/datasets/download_and_preprocess_coco.sh ./data/dir/coco\n```This installs the required libraries and then runs the preprocessing script. It outputs a number of `*.tfrecord` files in your local data directory. The COCO download and conversion script takes approximately 1 hour to complete.\n- Copy the data to your Cloud Storage bucketAfter you convert the data into TFRecords, copy them from local storage to your Cloud Storage bucket using the `gsutil` command. You must also copy the annotation files. These files help validate the model's performance.```\n(vm)$ gsutil -m cp ./data/dir/coco/*.tfrecord ${DATA_DIR}(vm)$ gsutil cp ./data/dir/coco/raw-data/annotations/*.json ${DATA_DIR}\n```\n- Clean up the VM resourcesOnce the COCO dataset has been converted to TFRecords and copied to the DATA_DIR on your Cloud Storage bucket, you can delete the Compute Engine instance.Disconnect from the Compute Engine instance:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete your Compute Engine instance.```\n\u00a0 $ gcloud compute instances delete instance-name\u00a0 \u00a0 --zone=europe-west4-a\u00a0 \n```\n### Launch the TPU resources and train the model\n- Use the `gcloud` command to launch the TPU resources. The command you use depends on whether you are using TPU VMs or TPU nodes. For more information on the two VM architecture, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) .\n```\n$ gcloud compute tpus tpu-vm create shapemask-tutorial \\--zone=europe-west4-a \\--accelerator-type=v3-8 \\--version=tpu-vm-tf-2.16.1-pjrt\n``````\n$ gcloud compute tpus execution-groups create \u00a0\\\u00a0--zone=europe-west4-a \\\u00a0--name=shapemask-tutorial \\\u00a0--accelerator-type=v3-8 \\\u00a0--machine-type=n1-standard-8 \\\u00a0--disk-size=300 \\\u00a0--tf-version=2.12.0\n``` **Note:** If you have more than one project, you must specify the project ID with the `--project` flag.For more information on the `gcloud` command, see the [gcloud Reference](/sdk/gcloud/reference) . **Note:** The first time you run `gcloud compute tpus` on a project it takes approximately 5 minutes to perform startup tasks such as SSH key propagation and API turnup.\n- If you are not automatically logged in to the Compute Engine instance, log in by running the following `ssh` command. When you are logged into the VM, your shell prompt changes from `username@projectname` to `username@vm-name` :\n```\ngcloud compute tpus tpu-vm ssh shapemask-tutorial --zone=europe-west4-a\n```\n```\ngcloud compute ssh shapemask-tutorial --zone=europe-west4-a\n```\n **Key Point:** From this point on, a prefix of **(vm) $** means you should run the command on the Compute Engine VM instance.As you continue these instructions, run each command that begins with `(vm)$` in your VM session window.\n- Install TensorFlow requirements.\n```\n(vm)$ pip3 install -r /usr/share/tpu/models/official/requirements.txt\n```\n```\n(vm)$ pip3 install -r /usr/share/models/official/requirements.txt\n```\n- The training script requires an extra package. Install it now:\n```\n(vm)$ pip3 install --user tensorflow-model-optimization>=0.1.3\n```\n```\n(vm)$ pip3 install --user tensorflow-model-optimization>=0.1.3\n```\n- Set the storage bucket name variable. Replace with the name of your storage bucket:```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name\n```\n- Set the Cloud TPU name variable.\n```\n(vm)$ export TPU_NAME=local\n```\n```\n(vm)$ export TPU_NAME=shapemask-tutorial\n```\n- Set the `PYTHONPATH` environment variable:\n```\n(vm)$ export PYTHONPATH=\"/usr/share/tpu/models:${PYTHONPATH}\"\n```\n```\n(vm)$ export PYTHONPATH=\"${PYTHONPATH}:/usr/share/models\"\n```\n- Change to directory that stores the model:\n```\n(vm)$ cd /usr/share/tpu/models/official/legacy/detection\n```\n```\n(vm)$ cd /usr/share/models/official/legacy/detection\n```\n- Add some required environment variables:```\n(vm)$ export RESNET_CHECKPOINT=gs://cloud-tpu-checkpoints/retinanet/resnet50-checkpoint-2018-02-07(vm)$ export DATA_DIR=${STORAGE_BUCKET}/coco(vm)$ export TRAIN_FILE_PATTERN=${DATA_DIR}/train-*(vm)$ export EVAL_FILE_PATTERN=${DATA_DIR}/val-*(vm)$ export VAL_JSON_FILE=${DATA_DIR}/instances_val2017.json(vm)$ export SHAPE_PRIOR_PATH=gs://cloud-tpu-checkpoints/shapemask/kmeans_class_priors_91x20x32x32.npy(vm)$ export MODEL_DIR=${STORAGE_BUCKET}/shapemask\n```\n- When creating your TPU, if you set the `--version` parameter to a version ending with `-pjrt` , set the following environment variables to enable the PJRT runtime:```\n\u00a0 (vm)$ export NEXT_PLUGGABLE_DEVICE_USE_C_API=true\u00a0 (vm)$ export TF_PLUGGABLE_DEVICE_LIBRARY_PATH=/lib/libtpu.so\n```\n- Train the ShapeMask model:The following script runs a sample training that trains for just 100 steps and takes approxiately 10 minutes to complete on a v3-8 TPU. To train to convergence takes about 22,500 steps and approximately 6 hours on a v3-8 TPU.```\n(vm)$ python3 main.py \\\u00a0 --strategy_type=tpu \\\u00a0 --tpu=${TPU_NAME} \\\u00a0 --model_dir=${MODEL_DIR} \\\u00a0 --mode=train \\\u00a0 --model=shapemask \\\u00a0 --params_override=\"{train: {total_steps: 100, learning_rate: {init_learning_rate: 0.08, learning_rate_levels: [0.008, 0.0008], learning_rate_steps: [15000, 20000], }, checkpoint: { path: ${RESNET_CHECKPOINT},prefix: resnet50}, train_file_pattern: ${TRAIN_FILE_PATTERN}}, shapemask_head: {use_category_for_mask: true, shape_prior_path: ${SHAPE_PRIOR_PATH}}, shapemask_parser: {output_size: [640, 640]}}\"\n```When the training completes, a message similar to the following appears:```\nTrain Step: 100/100 / loss = {'total_loss': 10.815635681152344,\n'loss': 10.815635681152344, 'retinanet_cls_loss': 1.4915691614151,\n'l2_regularization_loss': 4.483549118041992,\n'retinanet_box_loss': 0.013074751943349838,\n'shapemask_prior_loss': 0.17314358055591583,\n'shapemask_coarse_mask_loss': 1.953366756439209,\n'shapemask_fine_mask_loss': 2.216097831726074, 'model_loss': 6.332086086273193,\n'learning_rate': 0.021359999} / training metric = {'total_loss': 10.815635681152344,\n'loss': 10.815635681152344, 'retinanet_cls_loss': 1.4915691614151,\n'l2_regularization_loss': 4.483549118041992,\n'retinanet_box_loss': 0.013074751943349838,\n'shapemask_prior_loss': 0.17314358055591583,\n'shapemask_coarse_mask_loss': 1.953366756439209,\n'shapemask_fine_mask_loss': 2.216097831726074,\n'model_loss': 6.332086086273193, 'learning_rate': 0.021359999}\n```\n- Run the script to evaluate the ShapeMask model. This takes about 10 minutes on a v3-8 TPU:```\n(vm)$ python3 main.py \\\u00a0 \u00a0 --strategy_type=tpu \\\u00a0 \u00a0 --tpu=${TPU_NAME} \\\u00a0 \u00a0 --model_dir=${MODEL_DIR} \\\u00a0 \u00a0 --checkpoint_path=${MODEL_DIR} \\\u00a0 \u00a0 --mode=eval_once \\\u00a0 \u00a0 --model=shapemask \\\u00a0 \u00a0 --params_override=\"{eval: { val_json_file: ${VAL_JSON_FILE}, eval_file_pattern: ${EVAL_FILE_PATTERN}, eval_samples: 5000 }, shapemask_head: {use_category_for_mask: true, shape_prior_path: ${SHAPE_PRIOR_PATH}}, shapemask_parser: {output_size: [640, 640]}}\"\n```When the evaluation completes, a message similar to the following appears:```\nDONE (t=5.47s).\n Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.000\n Average Precision (AP) @[ IoU=0.50  | area= all | maxDets=100 ] = 0.000\n Average Precision (AP) @[ IoU=0.75  | area= all | maxDets=100 ] = 0.000\n Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.000\n Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.000\n Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.000\n Average Recall  (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.000\n Average Recall  (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.000\n Average Recall  (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.000\n Average Recall  (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.000\n Average Recall  (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.000\n Average Recall  (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.000\n```You have now completed single-device training and evaluation. Use the following steps to delete the current single-device TPU resources.\n- Disconnect from the Compute Engine instance:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete the TPU resource.\n```\n$ gcloud compute tpus tpu-vm delete shapemask-tutorial \\--zone=europe-west4-a\n``````\n$ gcloud compute tpus execution-groups delete shapemask-tutorial \\--tpu-only \\--zone=europe-west4-a\n```At this point, you can either conclude this tutorial and [clean up](#cleanup) , or you can continue and explore running the model on Cloud TPU Pods.\n## Scale your model with Cloud TPU Pods **Important:** You can scale your model with either the TPU VM or the TPU Node configuration. The two VM architectures are described in [System Architecture](/tpu/docs/system-architecture-tpu-vm) . For Pod training, you only need to follow the instructions for your TPU configuration, TPU VM or TPU Node.\nTraining your model on Cloud TPU Pods may require some changes to your training script. For information, see [Training on TPU Pods](/tpu/docs/training-on-tpu-pods) .## TPU Pod training **Important:** If you have already set up a Cloud TPU project, Service Account, storage bucket, and prepared the COCO dataset, you can skip to [Launch a Cloud TPU Pod](#setup-launch-resources) .\n- Open a Cloud Shell window. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Create a variable for your project's ID.```\nexport PROJECT_ID=project-id\n```\n- Configure Google Cloud CLI to use the project where you want to create Cloud TPU.```\ngcloud config set project ${PROJECT_ID}\n```The first time you run this command in a new Cloud Shell VM, an `Authorize Cloud Shell` page is displayed. Click `Authorize` at the bottom of the page to allow `gcloud` to make GCP API calls with your credentials.\n- Create a Service Account for the Cloud TPU project.Service accounts allow the Cloud TPU service to access other Google Cloud Platform services.```\ngcloud beta services identity create --service tpu.googleapis.com --project $PROJECT_ID\n```The command returns a Cloud TPU Service Account with following format:```\nservice-PROJECT_NUMBER@cloud-tpu.iam.gserviceaccount.com\n```\n- Create a Cloud Storage bucket using the following command or use a bucket you created earlier for your project. **Important: ** Set up your Cloud TPU resources and your Cloud Storage bucket) in the same region/zone to reduce network latency and network costs. Cloud TPUs are located in [specific zones](/tpu/docs/types-zones) , which are subdivisions within a region.```\ngsutil mb -p ${PROJECT_ID} -c standard -l europe-west4 gs://bucket-name\n```\n- If you previously prepared the COCO dataset and moved it to your storage bucket, you can use it again for Pod training. If you have not yet prepared the COCO dataset, [prepare it now](#prepare-coco) and return here to set up the Pod training.\n- Launch a Cloud TPU PodThis tutorial specifies a v3-32 Pod. For other Pod options, see the [available TPU types page](/tpu/docs/supported-tpu-configurations) .\n **Note:** If there is not enough capacity currently available to create the TPU Pod, you can queue your request using queued resources. Queued resources allow you to receive capacity once it becomes available. To request your Cloud TPU resources as queued resources, use the`gcloud alpha compute tpus queued-resources create`command instead. For more information, see [Manage Queued Resources](/tpu/docs/queued-resources) .\n```\n$ gcloud compute tpus tpu-vm create shapemask-tutorial \\--zone=europe-west4-a \\--accelerator-type=v3-32 \\--version=tpu-vm-tf-2.16.1-pod-pjrt\n``` **Note:** The first time you run `gcloud` on a project it takes about 5 minutes to perform startup tasks such as SSH key propagation and API turnup.\n```\n$ gcloud compute tpus execution-groups create \u00a0\\\u00a0--zone=europe-west4-a \\\u00a0--name=shapemask-tutorial \\\u00a0--accelerator-type=v3-32 \\\u00a0--machine-type=n1-standard-8 \\\u00a0--disk-size=300 \\\u00a0--tf-version=2.12.0\n``` **Note:** If you have more than one project, you must specify the project ID with the `--project` flag.\n- If you are not automatically logged in to the Compute Engine instance, log in by running the following `ssh` command. When you are logged into the VM, your shell prompt changes from `username@projectname` to `username@vm-name` :\n```\ngcloud compute tpus tpu-vm ssh shapemask-tutorial --zone=europe-west4-a\n```\n```\ngcloud compute ssh shapemask-tutorial --zone=europe-west4-a\n```\n **Key Point:** From this point on, a prefix of **(vm) $** means you should run the command on the Compute Engine VM instance.\nAs you continue these instructions, run each command that begins with `(vm)$` in your VM session window.\n- Install TensorFlow requirements.\n```\n(vm)$ pip3 install -r /usr/share/tpu/models/official/requirements.txt\n```\n```\n(vm)$ pip3 install -r /usr/share/models/official/requirements.txt\n```\n- The training script requires an extra package. Install it now:\n```\n(vm)$ pip3 install --user tensorflow-model-optimization>=0.1.3\n```\n```\n(vm)$ pip3 install --user tensorflow-model-optimization>=0.1.3\n```\n- Set up the following environment variables, replacing with the name of your Cloud Storage bucket:```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name\n```The training application expects your training data to be accessible in Cloud Storage. The training application also uses your Cloud Storage bucket to store checkpoints during training.\n- Update the required training variables.```\n(vm)$ export MODEL_DIR=${STORAGE_BUCKET}/shapemask-pods(vm)$ export DATA_DIR=${STORAGE_BUCKET}/coco(vm)$ export RESNET_CHECKPOINT=gs://cloud-tpu-checkpoints/retinanet/resnet50-checkpoint-2018-02-07(vm)$ export TRAIN_FILE_PATTERN=${DATA_DIR}/train-*(vm)$ export EVAL_FILE_PATTERN=${DATA_DIR}/val-*(vm)$ export VAL_JSON_FILE=${DATA_DIR}/instances_val2017.json(vm)$ export SHAPE_PRIOR_PATH=gs://cloud-tpu-checkpoints/shapemask/kmeans_class_priors_91x20x32x32.npy\n```\n- Set some required environment variables:\n```\n(vm)$ export PYTHONPATH=\"/usr/share/tpu/models:${PYTHONPATH}\"(vm)$ export TPU_LOAD_LIBRARY=0\n```\n```\n(vm)$ export PYTHONPATH=\"${PYTHONPATH}:/usr/share/models\"\n```\n- Change to directory that stores the model:\n```\n(vm)$ cd /usr/share/tpu/models/official/legacy/detection\n```\n```\n(vm)$ cd /usr/share/models/official/legacy/detection\n```\n- Start the Pod training.The sample training runs for just 20 steps and takes approximately 10 minutes to complete on a v3-32 TPU node. To train to convergence takes about 11,250 steps and approximately 2 hours on a v3-32 TPU Pod.```\n(vm)$ python3 main.py \\\u00a0--strategy_type=tpu \\\u00a0--tpu=${TPU_NAME} \\\u00a0--model_dir=${MODEL_DIR} \\\u00a0--mode=train \\\u00a0--model=shapemask \\\u00a0--params_override=\"{train: { batch_size: 128, iterations_per_loop: 500, total_steps: 20, learning_rate: {'learning_rate_levels': [0.008, 0.0008], 'learning_rate_steps': [10000, 13000] }, checkpoint: { path: ${RESNET_CHECKPOINT}, prefix: resnet50/ }, train_file_pattern: ${TRAIN_FILE_PATTERN} }, eval: { val_json_file: ${VAL_JSON_FILE}, eval_file_pattern: ${EVAL_FILE_PATTERN}}, shapemask_head: {use_category_for_mask: true, shape_prior_path: ${SHAPE_PRIOR_PATH}} }\"\n```\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- Disconnect from the Compute Engine instance, if you have not already done so:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete your Cloud TPU and Compute Engine resources. The command you use to delete your resources depends upon whether you are using TPU VMs or TPU Nodes. For more information, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) .\n```\n$ gcloud compute tpus tpu-vm delete shapemask-tutorial \\--zone=europe-west4-a\n```\n```\n$ gcloud compute tpus execution-groups delete shapemask-tutorial \\--zone=europe-west4-a\n```\n- Verify the resources have been deleted by running `gcloud compute tpus execution-groups list` . The deletion might take several minutes. The output from the following command should not include any of the TPU resources created in this tutorial:```\n$ gcloud compute tpus execution-groups list --zone=europe-west4-a\n```\n- Run `gsutil` as shown, replacing with the name of the Cloud Storage bucket you created for this tutorial: **Caution:** All training data will be lost when you delete your bucket, so only do this step when you are finished running the tutorial.```\n$ gsutil rm -r gs://bucket-name\n```\n## What's next\n### Train with different image sizesYou can explore using a larger neural network (for example, ResNet-101 instead of ResNet-50). A larger input image and a more powerful neural network will yield a slower but more precise model.\n### Use a different basisAlternatively, you can explore pre-training a ResNet model on your own dataset and using it as a basis for your ShapeMask model. With some more work, you can also swap in an alternative neural network in place of ResNet. Finally, if you are interested in implementing your own object detection models, this network may be a good basis for further experimentation.", "guide": "Cloud TPU"}