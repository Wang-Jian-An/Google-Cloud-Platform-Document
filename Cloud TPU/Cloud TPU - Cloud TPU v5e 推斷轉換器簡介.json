{"title": "Cloud TPU - Cloud TPU v5e \u63a8\u65b7\u8f49\u63db\u5668\u7c21\u4ecb", "url": "https://cloud.google.com/tpu/docs/v5e-inference-converter?hl=zh-cn", "abstract": "# Cloud TPU - Cloud TPU v5e \u63a8\u65b7\u8f49\u63db\u5668\u7c21\u4ecb\n# Cloud TPU v5e \u63a8\u65b7\u8f49\u63db\u5668\u7c21\u4ecb\n# \u7c21\u4ecb\nCloud TPU \u63a8\u65b7\u8f49\u63db\u5668\u53ef\u6e96\u5099\u548c\u512a\u5316 TensorFlow 2 (TF2) \u6a21\u578b\u4ee5\u9032\u884c TPU \u63a8\u65b7\u3002\u8f49\u63db\u5668\u5728\u672c\u5730\u6216 TPU \u865b\u64ec\u6a5f shell \u4e2d\u904b\u884c\u3002\u5efa\u8b70\u4f7f\u7528 TPU \u865b\u64ec\u6a5f shell\uff0c\u56e0\u7232\u5b83\u9810\u5b89\u88dd\u4e86\u8f49\u63db\u5668\u6240\u9700\u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002\u5b83\u6703\u7372\u53d6\u5c0e\u51fa\u7684 [SavedModel](https://www.tensorflow.org/guide/saved_model?hl=zh-cn) \u4e26\u57f7\u884c\u4ee5\u4e0b\u6b65\u9a5f\uff1a\n- TPU \u8f49\u63db\uff1a\u5b83\u6703\u5411\u6a21\u578b\u6dfb\u52a0`TPUPartitionedCall`\u548c\u5176\u4ed6 TPU \u64cd\u4f5c\uff0c\u4f7f\u5176\u53ef\u5728 TPU \u4e0a\u63d0\u4f9b\u670d\u52d9\u3002\u9ed8\u8a8d\u60c5\u6cc1\u4e0b\uff0c\u5c0e\u51fa\u7528\u65bc\u63a8\u65b7\u7684\u6a21\u578b\u6c92\u6709\u6b64\u985e\u64cd\u4f5c\uff0c\u56e0\u6b64\u7121\u6cd5\u5728 TPU \u4e0a\u63d0\u4f9b\uff0c\u5373\u4f7f\u5728 TPU \u4e0a\u8a13\u7df4\u4e5f\u662f\u5982\u6b64\u3002\n- \u6279\u8655\u7406\uff1a\u5b83\u5411\u6a21\u578b\u4e2d\u6dfb\u52a0\u4e86\u6279\u8655\u7406\u64cd\u4f5c\uff0c\u4ee5\u5be6\u73fe\u5716\u5167\u6279\u8655\u7406\uff0c\u4ee5\u63d0\u9ad8\u541e\u5410\u91cf\u3002\n- BFloat16 \u8f49\u63db\uff1a\u5b83\u6703\u5c07\u6a21\u578b\u7684\u6578\u64da\u683c\u5f0f\u5f9e`float32`\u8f49\u63db\u7232`bfloat16`\uff0c\u4ee5\u63d0\u9ad8 TPU \u4e0a\u7684\u8a08\u7b97\u6027\u80fd\u4e26\u964d\u4f4e\u9ad8\u5e36\u5bec\u5167\u5b58 (HBM) \u7528\u91cf\u3002\n- IO \u5f62\u72c0\u512a\u5316\uff1a\u5b83\u53ef\u4ee5\u512a\u5316\u5728 CPU \u548c TPU \u4e4b\u9593\u50b3\u8f38\u7684\u6578\u64da\u7684\u5f35\u91cf\u5f62\u72c0\uff0c\u4ee5\u63d0\u9ad8\u5e36\u5bec\u5229\u7528\u7387\u3002\n\u5c0e\u51fa\u6a21\u578b\u6642\uff0c\u7528\u6236\u53ef\u4ee5\u7232\u8981\u5728 TPU \u4e0a\u904b\u884c\u7684\u4efb\u4f55\u51fd\u6578\u5275\u5efa\u51fd\u6578\u5225\u540d\u3002\u5b83\u5011\u5c07\u9019\u4e9b\u51fd\u6578\u50b3\u905e\u7d66\u8f49\u63db\u5668\uff0c\u8f49\u63db\u5668\u5c07\u5b83\u5011\u653e\u5728 TPU \u4e0a\u4e26\u9032\u884c\u512a\u5316\u3002\nCloud TPU \u63a8\u65b7\u8f49\u63db\u5668\u4ee5 Docker \u6620\u50cf\u7684\u5f62\u5f0f\u63d0\u4f9b\uff0c\u5b83\u53ef\u5728\u5b89\u88dd\u4e86 Docker \u7684\u4efb\u4f55\u74b0\u5883\u4e2d\u57f7\u884c\u3002\n\u5b8c\u6210\u4e0a\u8ff0\u6b65\u9a5f\u7684\u9810\u8a08\u6642\u9593\uff1a\u7d04 20 \u5206\u9418 - 30 \u5206\u9418\n", "content": "## \u524d\u63d0\u689d\u4ef6\n- \u6a21\u578b\u5fc5\u9808\u662f TF2 \u6a21\u578b\uff0c\u4e26\u4ee5 [SavedModel](https://www.tensorflow.org/guide/saved_model?hl=zh-cn) \u683c\u5f0f\u5c0e\u51fa\u3002\n- \u6a21\u578b\u5fc5\u9808\u5177\u6709 TPU \u51fd\u6578\u7684\u51fd\u6578\u5225\u540d\u3002\u5982\u9700\u77ad\u89e3\u5982\u4f55\u57f7\u884c\u6b64\u64cd\u4f5c\uff0c\u8acb\u53c3\u95b1 [\u4ee3\u78bc\u793a\u4f8b](#function-alias) \u3002\u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528`tpu_func`\u4f5c\u7232 TPU \u51fd\u6578\u5225\u540d\u3002\n- \u78ba\u4fdd\u60a8\u7684\u6a5f\u5668\u7684 CPU \u652f\u6301\u9ad8\u7d1a\u77e2\u91cf\u64f4\u5c55 (AVX) \u6307\u4ee4\uff0c\u56e0\u7232 Tensorflow \u5eab\uff08Cloud TPU \u63a8\u65b7\u8f49\u63db\u5668\u7684\u4f9d\u8cf4\u9805\uff09\u5df2\u7de8\u8b6f\u7232\u4f7f\u7528 AVX \u6307\u4ee4\u3002 [\u5927\u591a\u6578 CPU](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#CPUs_with_AVX) \u90fd\u652f\u6301 AVX\u3002- \u60a8\u53ef\u4ee5\u904b\u884c`lscpu | grep avx`\u4f86\u6aa2\u67e5\u7cfb\u7d71\u662f\u5426\u652f\u6301 AVX \u6307\u4ee4\u96c6\u3002\n## \u6e96\u5099\u5de5\u4f5c\n\u5728\u958b\u59cb\u8a2d\u7f6e\u4e4b\u524d\uff0c\u8acb\u57f7\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n- [\u5275\u5efa\u65b0\u9805\u76ee](https://console.cloud.google.com/projectselector2/home/dashboard?hl=zh-cn) \uff1a\u5728 Google Cloud \u63a7\u5236\u6aaf\u7684\u9805\u76ee\u9078\u64c7\u5668\u9801\u9762\u4e0a\uff0c\u9078\u64c7\u6216\u5275\u5efa Cloud \u9805\u76ee\u3002\n- [\u8a2d\u7f6e TPU \u865b\u64ec\u6a5f](https://cloud.google.com/tpu/docs/managing-tpus-tpu-vm?hl=zh-cn#creating_a_cloud_tpu) \uff1a\u4f7f\u7528 Google Cloud \u63a7\u5236\u6aaf\u6216 `gcloud` \u5275\u5efa\u65b0\u7684 TPU \u865b\u64ec\u6a5f\uff0c\u6216\u4f7f\u7528\u73fe\u6709\u7684 TPU \u865b\u64ec\u6a5f\u5728 TPU \u865b\u64ec\u6a5f\u4e0a\u4f7f\u7528\u8f49\u63db\u5f8c\u7684\u6a21\u578b\u9032\u884c\u63a8\u65b7\u3002- \u78ba\u4fdd TPU \u865b\u64ec\u6a5f\u6620\u50cf\u57fa\u65bc TensorFlow\u3002\u4f8b\u5982`--version=tpu-vm-tf-2.11.0`\u3002\n- \u8f49\u63db\u5f8c\u7684\u6a21\u578b\u5c07\u5728\u6b64 TPU \u865b\u64ec\u6a5f\u4e0a\u52a0\u8f09\u4e26\u63d0\u4f9b\u3002\n- \u78ba\u4fdd\u60a8\u64c1\u6709\u4f7f\u7528 Cloud TPU \u63a8\u65b7\u8f49\u63db\u5668\u6240\u9700\u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002\u60a8\u53ef\u4ee5\u5728\u672c\u5730\u5b89\u88dd Google Cloud SDK \u548c Docker\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8a8d\u5b89\u88dd\u4e86\u6b64\u8edf\u4ef6\u7684 TPU \u865b\u64ec\u6a5f\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u9019\u4e9b\u5de5\u5177\u8207\u8f49\u63db\u5668\u5716\u7247\u9032\u884c\u4ea4\u4e92\u3002\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u901a\u904e SSH \u9023\u63a5\u5230\u5be6\u4f8b\uff1a```\ngcloud compute tpus tpu-vm ssh ${tpu-name} --zone ${zone} --project ${project-id}\n```## \u74b0\u5883\u8a2d\u7f6e\n\u5f9e TPU \u865b\u64ec\u6a5f shell \u6216\u672c\u5730 shell \u8a2d\u7f6e\u60a8\u7684\u74b0\u5883\u3002\n- \u5728 TPU \u865b\u64ec\u6a5f shell \u4e2d\u904b\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u4ee5\u5141\u8a31\u975e\u6839 Docker \u4f7f\u7528\uff1a```\nsudo usermod -a -G docker ${USER}newgrp docker\n```\n- \u521d\u59cb\u5316 Docker \u6191\u64da\u5e6b\u52a9\u7a0b\u5e8f\uff1a```\ngcloud auth configure-docker \\\u00a0 us-docker.pkg.dev\n```\n\u5728\u672c\u5730 shell \u4e2d\uff0c\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u8a2d\u7f6e\u74b0\u5883\uff1a- \u5b89\u88dd [Cloud SDK](https://cloud.google.com/sdk/install?hl=zh-cn) \uff08\u5176\u4e2d\u5305\u542b `gcloud` \u547d\u4ee4\u884c\u5de5\u5177\uff09\u3002\n- \u5b89\u88dd [Docker](https://docs.docker.com/engine/install/) \uff1a\n- \u5141\u8a31\u4f7f\u7528\u975e\u6839 Docker \uff1a```\nsudo usermod -a -G docker ${USER}newgrp docker\n```\n- \u767b\u9304\u60a8\u7684\u74b0\u5883\uff1a```\ngcloud auth login\n```\n- \u521d\u59cb\u5316 Docker \u6191\u64da\u5e6b\u52a9\u7a0b\u5e8f\uff1a```\ngcloud auth configure-docker \\\u00a0 \u00a0 us-docker.pkg.dev\n```\n- \u62c9\u53d6\u63a8\u65b7\u8f49\u63db\u5668 Docker \u6620\u50cf\uff1a```\n\u00a0 CONVERTER_IMAGE=us-docker.pkg.dev/cloud-tpu-images/inference/tpu-inference-converter-cli:2.13.0\u00a0 docker pull ${CONVERTER_IMAGE}\u00a0 \n```## \u8f49\u63db\u5668\u5716\u7247\n\u5716\u7247\u7528\u65bc\u9032\u884c\u4e00\u6b21\u6027\u6a21\u578b\u8f49\u63db\u3002\u8a2d\u7f6e\u6a21\u578b\u8def\u5f91\u4e26\u6839\u64da\u60a8\u7684\u9700\u6c42\u8abf\u6574 [\u8f49\u63db\u5668\u9078\u9805](#converter-options) \u3002 [\u7528\u6cd5\u793a\u4f8b](#usage-examples) \u90e8\u5206\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u898b\u7684\u4f7f\u7528\u5834\u666f\u3002\n**\u6ce8\u610f** \uff1a\u5728\u4ee5\u4e0b\u4ee3\u78bc\u4e2d\uff0cCloud Storage \u5b58\u5132\u6876\u53ef\u7528\u65bc `input_model_dir` \u548c `output_model_dir` \uff0c\u800c\u7121\u9700\u5728 `docker` \u547d\u4ee4\u4e2d\u6307\u5b9a `mount` \u3002\n```\ndocker run \\--mount type=bind,source=${MODEL_PATH},target=/tmp/input,readonly \\--mount type=bind,source=${CONVERTED_MODEL_PATH},target=/tmp/output \\${CONVERTER_IMAGE} \\--input_model_dir=/tmp/input \\--output_model_dir=/tmp/output \\--converter_options_string='\u00a0 \u00a0 tpu_functions {\u00a0 \u00a0 \u00a0 function_alias: \"tpu_func\"\u00a0 \u00a0 }\u00a0 \u00a0 batch_options {\u00a0 \u00a0 \u00a0 num_batch_threads: 2\u00a0 \u00a0 \u00a0 max_batch_size: 8\u00a0 \u00a0 \u00a0 batch_timeout_micros: 5000\u00a0 \u00a0 \u00a0 allowed_batch_sizes: 2\u00a0 \u00a0 \u00a0 allowed_batch_sizes: 4\u00a0 \u00a0 \u00a0 allowed_batch_sizes: 8\u00a0 \u00a0 \u00a0 max_enqueued_batches: 10\u00a0 \u00a0 }'\n```\n## \u5728 TPU \u865b\u64ec\u6a5f\u4e2d\u4f7f\u7528\u8f49\u63db\u5f8c\u7684\u6a21\u578b\u9032\u884c\u63a8\u65b7\n```\n# Initialize the TPUresolver = tf.distribute.cluster_resolver.TPUClusterResolver(\"local\")tf.config.experimental_connect_to_cluster(resolver)tf.tpu.experimental.initialize_tpu_system(resolver)# Load the modelmodel = tf.saved_model.load(${CONVERTED_MODEL_PATH})# Find the signature function for servingserving_signature = 'serving_default' # Change the serving signature if neededserving_fn = model.signatures[serving_signature]# Run the inference using requests.results = serving_fn(**inputs)logging.info(\"Serving results: %s\", str(results))\n```\n## \u7528\u6cd5\u793a\u4f8b\n### \u7232 TPU \u51fd\u6578\u6dfb\u52a0\u51fd\u6578\u5225\u540d\n- \u5728\u6a21\u578b\u4e2d\u67e5\u627e\u6216\u5275\u5efa\u4e00\u500b\u51fd\u6578\uff0c\u8a72\u51fd\u6578\u5c01\u88dd\u60a8\u8981\u5728 TPU \u4e0a\u904b\u884c\u7684\u6240\u6709\u5167\u5bb9\u3002\u5982\u679c`@tf.function`\u4e0d\u5b58\u5728\uff0c\u8acb\u6dfb\u52a0\u5b83\u3002\n- \u4fdd\u5b58\u6a21\u578b\u6642\uff0c\u8acb\u63d0\u4f9b\u5982\u4e0b\u6240\u793a\u7684 SaveOptions\uff0c\u7232`model.tpu_func`\u63d0\u4f9b\u5225\u540d`func_on_tpu`\u3002\n- \u60a8\u53ef\u4ee5\u5c07\u6b64\u51fd\u6578\u5225\u540d\u50b3\u905e\u7d66\u8f49\u63db\u5668\u3002\n```\nclass ToyModel(tf.keras.Model):\u00a0 @tf.function(\u00a0 \u00a0 \u00a0 input_signature=[tf.TensorSpec(shape=[None, 10], dtype=tf.float32)])\u00a0 def tpu_func(self, x):\u00a0 \u00a0 return x * 1.0model = ToyModel()save_options = tf.saved_model.SaveOptions(function_aliases={\u00a0 \u00a0 'func_on_tpu': model.tpu_func,})tf.saved_model.save(model, model_dir, options=save_options)\n```\n### \u8f49\u63db\u5177\u6709\u591a\u500b TPU \u51fd\u6578\u7684\u6a21\u578b\n\u60a8\u53ef\u4ee5\u5728 TPU \u4e0a\u653e\u7f6e\u591a\u500b\u51fd\u6578\u3002\u53ea\u9700\u5275\u5efa\u591a\u500b\u51fd\u6578\u5225\u540d\uff0c\u4e26\u5c07\u5176\u50b3\u5165 `converter_options_string` \u50b3\u905e\u7d66\u8f49\u63db\u5668\u5373\u53ef\u3002\n```\ntpu_functions {\u00a0 function_alias: \"tpu_func_1\"}tpu_functions {\u00a0 function_alias: \"tpu_func_2\"}\n```\n### \u91cf\u5316\n**\u91cd\u8981\u63d0\u793a** \uff1a\u6b64\u529f\u80fd\u8655\u65bc\u5be6\u9a57\u968e\u6bb5\uff0c\u53ef\u80fd\u6703\u767c\u751f\u66f4\u6539\uff0c\u6055\u4e0d\u53e6\u884c\u901a\u77e5\u3002\u5728\u751f\u7522\u74b0\u5883\u4e2d\u4f7f\u7528\u91cf\u5316\u6a21\u578b\u4e4b\u524d\uff0c\u7528\u6236\u61c9\u4ed4\u7d30\u8a55\u4f30\u91cf\u5316\u6a21\u578b\u7684\u6027\u80fd\u3002TensorFlow \u4e2d\u63d0\u4f9b\u4e86\u5c0d\u91cf\u5316\u7684 TPU v5e \u652f\u6301\u3002\n\u91cf\u5316\u662f\u4e00\u7a2e\u6280\u8853\uff0c\u53ef\u964d\u4f4e\u7528\u65bc\u8868\u793a\u6a21\u578b\u53c3\u6578\u7684\u6578\u5b57\u7684\u7cbe\u78ba\u5ea6\u3002\u9019\u6a23\u53ef\u4ee5\u6e1b\u5c0f\u6a21\u578b\u5927\u5c0f\u4e26\u52a0\u5feb\u8a08\u7b97\u901f\u5ea6\u3002\u91cf\u5316\u6a21\u578b\u63d0\u9ad8\u63a8\u65b7\u541e\u5410\u91cf\uff0c\u6e1b\u5c11\u5167\u5b58\u7528\u91cf\u548c\u5b58\u5132\u7a7a\u9593\u5927\u5c0f\uff0c\u4f46\u4ee3\u50f9\u662f\u6e96\u78ba\u7387\u7565\u6709\u4e0b\u964d\u3002\nTensorFlow \u4e2d\u9762\u5411 TPU \u7684\u5168\u65b0\u8a13\u7df4\u5f8c\u91cf\u5316\u529f\u80fd\u662f\u5728 TensorFlow Lite \u4e2d\u7528\u65bc\u5b9a\u4f4d\u79fb\u52d5\u8a2d\u5099\u548c\u908a\u7de3\u8a2d\u5099\u7684\u985e\u4f3c\u73fe\u6709\u529f\u80fd\u958b\u767c\u800c\u6210\u3002\u5982\u9700\u5f9e\u7e3d\u9ad4\u4e0a\u8a73\u7d30\u77ad\u89e3\u91cf\u5316\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b [TensorFlow Lite \u7684\u6587\u6a94](https://www.tensorflow.org/lite/performance/model_optimization?hl=zh-cn#quantization) \u3002\n\u672c\u90e8\u5206\u5b9a\u7fa9\u4e86\u8207\u4f7f\u7528\u63a8\u65b7\u8f49\u63db\u5668\u9032\u884c\u91cf\u5316\u76f8\u95dc\u7684\u6982\u5ff5\u3002\n[TPU \u7cfb\u7d71\u67b6\u69cb](https://cloud.google.com/tpu/docs/system-architecture-tpu-vm?hl=zh-cn) \u9801\u9762\u4ecb\u7d39\u4e86\u8207\u5176\u4ed6 TPU \u914d\u7f6e\uff08\u4f8b\u5982\u5207\u7247\u3001\u4e3b\u6a5f\u3001\u82af\u7247\u548c TensorCore\uff09\u76f8\u95dc\u7684\u6982\u5ff5\u3002\n- **\u8a13\u7df4\u5f8c\u91cf\u5316 (PTQ)** \uff1aPTQ \u662f\u4e00\u7a2e\u6280\u8853\uff0c\u53ef\u964d\u4f4e\u795e\u7d93\u7db2\u7d61\u6a21\u578b\u7684\u5927\u5c0f\u548c\u8a08\u7b97\u8907\u96dc\u6027\uff0c\u800c\u4e0d\u6703\u660e\u986f\u5f71\u97ff\u5176\u6e96\u78ba\u7387\u3002PTQ \u7684\u5de5\u4f5c\u539f\u7406\u662f\u5c07\u7d93\u904e\u8a13\u7df4\u7684\u6a21\u578b\u7684\u6d6e\u9ede\u6b0a\u91cd\u548c\u6fc0\u6d3b\u6578\u8f49\u63db\u7232\u7cbe\u5ea6\u8f03\u4f4e\u7684\u6574\u6578\uff08\u4f8b\u5982 8 \u4f4d\u6216 16 \u4f4d\u6574\u6578\uff09\u3002\u9019\u6a23\u53ef\u4ee5\u986f\u8457\u6e1b\u5c0f\u6a21\u578b\u5927\u5c0f\u4e26\u7e2e\u77ed\u63a8\u65b7\u5ef6\u9072\u6642\u9593\uff0c\u4f46\u53ea\u6703\u5c0e\u81f4\u6e96\u78ba\u7387\u7565\u6709\u4e0b\u964d\u3002\n- **\u6821\u6e96** \uff1a\u91cf\u5316\u7684\u6821\u6e96\u6b65\u9a5f\u662f\u6536\u96c6\u795e\u7d93\u7db2\u7d61\u6a21\u578b\u7684\u6b0a\u91cd\u548c\u6fc0\u6d3b\u51fd\u6578\u6240\u7372\u53d6\u503c\u7bc4\u570d\u7684\u7d71\u8a08\u4fe1\u606f\u7684\u904e\u7a0b\u3002\u6b64\u4fe1\u606f\u7528\u65bc\u78ba\u5b9a\u6a21\u578b\u7684\u91cf\u5316\u53c3\u6578\uff0c\u9019\u4e9b\u91cf\u5316\u53c3\u6578\u5c07\u7528\u65bc\u5c07\u6d6e\u9ede\u6b0a\u91cd\u548c\u6fc0\u6d3b\u8f49\u63db\u7232\u6574\u6578\u3002\n- **\u4ee3\u8868\u6027\u6578\u64da\u96c6** \uff1a\u7528\u65bc\u91cf\u5316\u7684\u4ee3\u8868\u6027\u6578\u64da\u96c6\u662f\u4e00\u500b\u5c0f\u578b\u6578\u64da\u96c6\uff0c\u8868\u793a\u6a21\u578b\u7684\u5be6\u969b\u8f38\u5165\u6578\u64da\u3002\u5b83\u5728\u91cf\u5316\u7684\u6821\u6e96\u6b65\u9a5f\u4e2d\u7528\u65bc\u6536\u96c6\u6a21\u578b\u7684\u6b0a\u91cd\u548c\u6fc0\u6d3b\u5c07\u63a1\u7528\u7684\u503c\u7bc4\u570d\u7684\u7d71\u8a08\u6578\u64da\u3002\u4ee3\u8868\u6027\u6578\u64da\u96c6\u61c9\u6eff\u8db3\u4ee5\u4e0b\u689d\u4ef6\uff1a- \u5b83\u61c9\u8a72\u6b63\u78ba\u8868\u793a\u6a21\u578b\u5728\u63a8\u65b7\u671f\u9593\u7684\u5be6\u969b\u8f38\u5165\u3002\u9019\u610f\u5473\u7740\u5b83\u61c9\u8a72\u6db5\u84cb\u6a21\u578b\u5728\u73fe\u5be6\u4e16\u754c\u4e2d\u53ef\u80fd\u770b\u5230\u7684\u503c\u7bc4\u570d\u3002\n- \u5b83\u61c9\u8a72\u5171\u540c\u6d41\u7d93\u689d\u4ef6\u8a9e\u53e5\uff08\u4f8b\u5982`tf.cond`\uff09\u7684\u6bcf\u500b\u5206\u652f\uff08\u5982\u679c\u6709\uff09\u3002\u9019\u4e00\u9ede\u5f88\u91cd\u8981\uff0c\u56e0\u7232\u91cf\u5316\u904e\u7a0b\u9700\u8981\u80fd\u5920\u8655\u7406\u6a21\u578b\u7684\u6240\u6709\u53ef\u80fd\u8f38\u5165\uff0c\u5373\u4f7f\u9019\u4e9b\u8f38\u5165\u5728\u4ee3\u8868\u6027\u6578\u64da\u96c6\u4e2d\u672a\u660e\u78ba\u8868\u793a\u4e5f\u662f\u5982\u6b64\u3002\n- \u5b83\u61c9\u8a72\u8db3\u5920\u5927\uff0c\u4ee5\u4fbf\u6536\u96c6\u8db3\u5920\u7684\u7d71\u8a08\u4fe1\u606f\u4e26\u6e1b\u5c11\u932f\u8aa4\u3002\u4e00\u822c\u4f86\u8aaa\uff0c\u5efa\u8b70\u4f7f\u7528 200 \u500b\u4ee5\u4e0a\u7684\u4ee3\u8868\u6027\u6a23\u672c\u3002\n\u4ee3\u8868\u6027\u6578\u64da\u96c6\u53ef\u4ee5\u662f\u8a13\u7df4\u6578\u64da\u96c6\u7684\u5b50\u96c6\uff0c\u4e5f\u53ef\u4ee5\u662f\u5c08\u9580\u8a2d\u8a08\u7528\u65bc\u4ee3\u8868\u6a21\u578b\u771f\u5be6\u8f38\u5165\u7684\u55ae\u7368\u6578\u64da\u96c6\u3002\u5177\u9ad4\u9078\u64c7\u4f7f\u7528\u54ea\u500b\u6578\u64da\u96c6\u53d6\u6c7a\u65bc\u5177\u9ad4\u7684\u61c9\u7528\u3002\n- **\u975c\u614b\u7bc4\u570d\u91cf\u5316 (SRQ)** \uff1aSRQ \u5728\u6821\u6e96\u6b65\u9a5f\u671f\u9593\u78ba\u5b9a\u795e\u7d93\u7db2\u7d61\u6a21\u578b\u7684\u6b0a\u91cd\u548c\u6fc0\u6d3b\u503c\u4e00\u6b21\u7684\u503c\u7bc4\u570d\u3002\u9019\u610f\u5473\u7740\u5c0d\u6a21\u578b\u7684\u6240\u6709\u8f38\u5165\u4f7f\u7528\u76f8\u540c\u7684\u503c\u7bc4\u570d\u3002\u9019\u7a2e\u65b9\u6cd5\u7684\u6e96\u78ba\u6027\u8981\u4f4e\u65bc\u52d5\u614b\u7bc4\u570d\u91cf\u5316\uff0c\u5c24\u5176\u662f\u5c0d\u65bc\u5177\u6709\u5927\u91cf\u8f38\u5165\u503c\u7684\u6a21\u578b\u3002 \u4f46\u662f\uff0c\u8207\u52d5\u614b\u7bc4\u570d\u91cf\u5316\u76f8\u6bd4\uff0c\u975c\u614b\u7bc4\u570d\u91cf\u5316\u5728\u904b\u884c\u6642\u6240\u9700\u7684\u8a08\u7b97\u66f4\u5c11\u3002\n- **\u52d5\u614b\u7bc4\u570d\u91cf\u5316 (DRQ)** \uff1aDRQ \u53ef\u78ba\u5b9a\u795e\u7d93\u7db2\u7d61\u6a21\u578b\u7684\u6bcf\u9805\u8f38\u5165\u7684\u6b0a\u91cd\u548c\u6fc0\u6d3b\u6578\u503c\u7bc4\u570d\u3002\u9019\u6a23\uff0c\u6a21\u578b\u5c31\u53ef\u4ee5\u9069\u61c9\u8f38\u5165\u6578\u64da\u503c\u7684\u7bc4\u570d\uff0c\u5f9e\u800c\u63d0\u9ad8\u6e96\u78ba\u7387\u3002\u4f46\u662f\uff0c\u8207\u975c\u614b\u7bc4\u570d\u91cf\u5316\u76f8\u6bd4\uff0c\u52d5\u614b\u7bc4\u570d\u91cf\u5316\u5728\u904b\u884c\u6642\u9700\u8981\u66f4\u591a\u7684\u8a08\u7b97\u3002| 0   | 1           | 2           |\n|:-----------|:---------------------------------------------|:-------------------------------------------|\n| \u529f\u80fd  | \u975c\u614b\u7bc4\u570d\u91cf\u5316         | \u52d5\u614b\u7bc4\u570d\u91cf\u5316        |\n| \u503c\u7bc4\u570d  | \u5728\u6821\u6e96\u671f\u9593\u78ba\u5b9a\u4e00\u6b21       | \u91dd\u5c0d\u6bcf\u9805\u8f38\u5165\u78ba\u5b9a       |\n| \u6e96\u78ba\u6027  | \u53ef\u80fd\u4e0d\u592a\u6e96\u78ba\uff0c\u5c24\u5176\u662f\u5c0d\u65bc\u5177\u6709\u591a\u7a2e\u8f38\u5165\u503c\u7684\u6a21\u578b | \u53ef\u80fd\u66f4\u6e96\u78ba\uff0c\u5c24\u5176\u662f\u5c0d\u65bc\u5177\u6709\u591a\u7a2e\u8f38\u5165\u503c\u7684\u6a21\u578b |\n| \u8907\u96dc\u6027  | \u66f4\u7c21\u55ae          | \u66f4\u5fa9\u96dc\u7684         |\n| \u904b\u884c\u6642\u8a08\u7b97 | \u8a08\u7b97\u66f4\u5c11          | \u8a08\u7b97\u80fd\u529b\u66f4\u5f37        |\n- **\u50c5\u6b0a\u91cd\u91cf\u5316** \uff1a\u50c5\u6b0a\u91cd\u91cf\u5316\u662f\u4e00\u7a2e\u91cf\u5316\u985e\u578b\uff0c\u50c5\u91cf\u5316\u795e\u7d93\u7db2\u7d61\u6a21\u578b\u7684\u6b0a\u91cd\uff0c\u800c\u5c07\u6fc0\u6d3b\u503c\u4fdd\u7559\u7232\u6d6e\u9ede\u578b\u3002\u5c0d\u65bc\u5c0d\u6e96\u78ba\u6027\u654f\u611f\u7684\u6a21\u578b\u800c\u8a00\uff0c\u9019\u662f\u4e00\u500b\u4e0d\u932f\u7684\u9078\u64c7\uff0c\u56e0\u7232\u5b83\u6709\u52a9\u65bc\u4fdd\u6301\u6a21\u578b\u7684\u6e96\u78ba\u6027\u3002\u60a8\u53ef\u4ee5\u901a\u904e\u914d\u7f6e [QuantizationOptions](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/mlir/quantization/tensorflow/quantization_options.proto) \u4e26\u5c07\u5176\u8a2d\u7f6e\u7232\u8f49\u63db\u5668\u9078\u9805\u4f86\u61c9\u7528\u91cf\u5316\u3002\u91cd\u8981\u9078\u9805\u5305\u62ec\uff1a\n- \u6a19\u8a18\uff1a\u6a19\u8b58 [SavedModel](https://www.tensorflow.org/guide/saved_model?hl=zh-cn#running_a_savedmodel_in_tensorflow_serving) \u4e2d\u8981\u91cf\u5316\u7684 [MetaGraphDef](https://www.tensorflow.org/guide/saved_model?hl=zh-cn#details_of_the_savedmodel_command_line_interface) \u7684\u6a19\u8a18\u96c6\u5408\u3002\u5982\u679c\u60a8\u53ea\u6709\u4e00\u500b`MetaGraphDef`\uff0c\u5247\u7121\u9700\u6307\u5b9a\u3002\n- sign_keys\uff1a\u7528\u65bc\u6a19\u8b58\u5305\u542b\u8f38\u5165\u548c\u8f38\u51fa\u7684` [SignatureDef](https://www.tensorflow.org/guide/saved_model?hl=zh-cn#details_of_the_savedmodel_command_line_interface) `\u7684\u9375\u5e8f\u5217\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5247\u7cfb\u7d71\u6703\u4f7f\u7528 [\"serving_default\"]\u3002\n- quantization_method\uff1a\u8981\u61c9\u7528\u7684\u91cf\u5316\u65b9\u6cd5\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5247\u61c9\u7528`STATIC_RANGE`\u91cf\u5316\u3002\n- op_set\uff1a\u61c9\u4ee5 XLA \u7684\u5f62\u5f0f\u4fdd\u7559\u3002\u76ee\u524d\u5b83\u662f\u9ed8\u8a8d\u9078\u9805\uff0c\u7121\u9700\u6307\u5b9a\u3002\n- \u4ee3\u8868\u6578\u64da\u96c6\uff1a\u6307\u5b9a\u7528\u65bc\u6821\u6e96\u91cf\u5316\u53c3\u6578\u7684\u6578\u64da\u96c6\u3002\u4ee3\u8868\u6027\u6578\u64da\u96c6\u672c\u8cea\u4e0a\u662f\u6a23\u672c\u7684\u8fed\u4ee3\u3002\u5176\u4e2d\uff0c\u6a23\u672c\u662f `{input_key: input_value}` \u7684\u6620\u5c04\u3002\u4f8b\u5982\uff1a\n```\nrepresentative_dataset = [{\"x\": tf.random.uniform(shape=(3, 3))}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for _ in range(256)]\n```\n\u4f7f\u7528 tf-nightly pip \u8edf\u4ef6\u5305\u4e2d\u7576\u524d\u63d0\u4f9b\u7684 `TfRecordRepresentativeDatasetSaver` \u985e\uff0c\u5c07\u4ee3\u8868\u6027\u6578\u64da\u96c6\u53e6\u5b58\u7232 `TFRecord` \u6587\u4ef6\u3002\u4f8b\u5982\uff1a\n```\n# Assumed tf-nightly installed.import tensorflow as tfrepresentative_dataset = [{\"x\": tf.random.uniform(shape=(3, 3))}\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for _ in range(256)]tf.quantization.experimental.TfRecordRepresentativeDatasetSaver(\u00a0 \u00a0 \u00a0 \u00a0path_map={'serving_default': '/tmp/representative_dataset_path'}\u00a0 \u00a0 ).save({'serving_default': representative_dataset})\n```\n\u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528\u7c3d\u540d\u9375 `serving_default` \u548c\u51fd\u6578\u5225\u540d `tpu_func` \u4f86\u91cf\u5316\u6a21\u578b\uff1a\n**\u6ce8\u610f** \uff1a\u5728\u4ee5\u4e0b\u4ee3\u78bc\u4e2d\uff0c\u5c07 `CONVERTER_IMAGE` \u8a2d\u7f6e\u7232 `us-docker.pkg.dev/cloud-tpu-images/inference/tpu-inference-converter-cli:nightly` \u4ee5\u4f7f\u7528\u6bcf\u591c build\u3002\n```\ndocker run \\\u00a0 --mount type=bind,source=${MODEL_PATH},target=/tmp/input,readonly \\\u00a0 --mount type=bind,source=${CONVERTED_MODEL_PATH},target=/tmp/output \\\u00a0 ${CONVERTER_IMAGE} \\\u00a0 --input_model_dir=/tmp/input \\\u00a0 --output_model_dir=/tmp/output \\\u00a0 --converter_options_string=' \\\u00a0 \u00a0 tpu_functions { \\\u00a0 \u00a0 \u00a0 function_alias: \"tpu_func\" \\\u00a0 \u00a0 } \\\u00a0 \u00a0 external_feature_configs { \\\u00a0 \u00a0 \u00a0 quantization_options { \\\u00a0 \u00a0 \u00a0 \u00a0 signature_keys: \"serving_default\" \\\u00a0 \u00a0 \u00a0 \u00a0 representative_datasets: { \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: \"serving_default\" \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 value: { \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tfrecord_file_path: \"${TF_RECORD_FILE}\" \\\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } \\\u00a0 \u00a0 \u00a0 \u00a0 } \\\u00a0 \u00a0 \u00a0 } \\\u00a0 \u00a0 } '\n```\n### \u6dfb\u52a0\u6279\u8655\u7406\n\u8f49\u63db\u5668\u53ef\u7528\u65bc\u5411\u6a21\u578b\u6dfb\u52a0\u6279\u8655\u7406\u3002\u6709\u95dc\u53ef\u8abf\u6574\u7684\u6279\u8655\u7406\u9078\u9805\u7684\u8aaa\u660e\uff0c\u8acb\u53c3\u95b1 [\u6279\u8655\u7406\u9078\u9805\u7684\u5b9a\u7fa9](#batching-options) \u3002\n\u9ed8\u8a8d\u60c5\u6cc1\u4e0b\uff0c\u8f49\u63db\u5668\u5c07\u6279\u91cf\u8655\u7406\u6a21\u578b\u4e2d\u7684\u6240\u6709 TPU \u51fd\u6578\u3002\u5b83\u9084\u53ef\u4ee5\u6279\u91cf\u8655\u7406\u7528\u6236\u63d0\u4f9b\u7684 [\u7c3d\u540d](#signature-batching) \u548c [\u51fd\u6578](#function-batching) \uff0c\u5f9e\u800c\u9032\u4e00\u6b65\u63d0\u9ad8\u6027\u80fd\u3002\u4efb\u4f55 TPU \u51fd\u6578\u3001\u7528\u6236\u63d0\u4f9b\u7684\u51fd\u6578\u6216\u9032\u884c\u6279\u8655\u7406\u7684\u7c3d\u540d\u90fd\u5fc5\u9808\u6eff\u8db3\u6279\u8655\u7406\u64cd\u4f5c\u7684 [\u56b4\u683c\u7684\u5f62\u72c0\u8981\u6c42](#strict-shape-requirements) \u3002\nConverter \u9084\u53ef\u4ee5 [\u66f4\u65b0](#update-batching-options) \u73fe\u6709\u7684\u6279\u8655\u7406\u9078\u9805\u3002\u4ee5\u4e0b\u793a\u4f8b\u8aaa\u660e\u4e86\u5982\u4f55\u5411\u6a21\u578b\u6dfb\u52a0\u6279\u8655\u7406\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u6279\u8655\u7406\uff0c\u8acb\u53c3\u95b1 [\u6279\u91cf\u8655\u7406\u6df1\u5165\u63a2\u7a76](#batching-deep-dive) \u3002\n```\nbatch_options {\u00a0 num_batch_threads: 2\u00a0 max_batch_size: 8\u00a0 batch_timeout_micros: 5000\u00a0 allowed_batch_sizes: 2\u00a0 allowed_batch_sizes: 4\u00a0 allowed_batch_sizes: 8\u00a0 max_enqueued_batches: 10}\n```\n### \u505c\u7528 bfloat16 \u548c IO \u5f62\u72c0\u512a\u5316\nBFloat16 \u548c IO \u5f62\u72c0\u512a\u5316\u9ed8\u8a8d\u8655\u65bc\u5553\u7528\u72c0\u614b\u3002\u5982\u679c\u5b83\u5011\u4e0d\u9069\u5408\u60a8\u7684\u6a21\u578b\uff0c\u53ef\u4ee5\u5c07\u5176\u505c\u7528\u3002\n```\n# Disable both optimizationsdisable_default_optimizations: true# Or disable them individuallyio_shape_optimization: DISABLEDbfloat16_optimization: DISABLED\n```\n### \u8f49\u5316\u5831\u544a\n\u60a8\u53ef\u4ee5\u5728\u904b\u884c\u63a8\u65b7\u8f49\u63db\u5668\u5f8c\u5f9e\u65e5\u8a8c\u4e2d\u627e\u5230\u6b64\u8f49\u63db\u5831\u544a\u3002\u4e0b\u9762\u63d0\u4f9b\u4e86\u4e00\u500b\u793a\u4f8b\u3002\n```\n-------- Conversion Report --------TPU cost of the model: 96.67% (2034/2104)CPU cost of the model: \u00a03.33% (70/2104)Cost breakdown================================% \u00a0 \u00a0 \u00a0 \u00a0 Cost \u00a0 \u00a0Name--------------------------------3.33 \u00a0 \u00a0 \u00a070 \u00a0 \u00a0 \u00a0[CPU cost]48.34 \u00a0 \u00a0 1017 \u00a0 \u00a0tpu_func_148.34 \u00a0 \u00a0 1017 \u00a0 \u00a0tpu_func_2-------------------------------```\n\u6b64\u5831\u544a\u4f30\u7b97\u4e86\u8f38\u51fa\u6a21\u578b\u5728 CPU \u548c TPU \u4e0a\u7684\u8a08\u7b97\u8cbb\u7528\uff0c\u4e26\u9032\u4e00\u6b65\u5c07 TPU \u8cbb\u7528\u5206\u89e3\u7232\u6bcf\u500b\u51fd\u6578\uff0c\u9019\u61c9\u53cd\u6620\u60a8\u5728\u8f49\u63db\u5668\u9078\u9805\u4e2d\u9078\u64c7\u7684 TPU \u51fd\u6578\u3002\n\u5982\u679c\u60a8\u60f3\u66f4\u597d\u5730\u5229\u7528 TPU\uff0c\u53ef\u80fd\u9700\u8981\u8a66\u9a57\u6a21\u578b\u7d50\u69cb\u4e26\u8abf\u6574\u8f49\u63db\u5668\u9078\u9805\u3002\n**\u6ce8\u610f** \uff1a\u5728\u7576\u524d\u8f49\u5316\u5831\u544a\u4e2d\uff0cTPU \u51fd\u6578\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u5747\u8a08\u7232 TPU \u8cbb\u7528\u3002\n## \u5e38\u898b\u554f\u984c\u89e3\u7b54\n### \u6211\u61c9\u8a72\u5728 TPU \u4e0a\u653e\u7f6e\u54ea\u500b\uff08\u4e9b\uff09\u51fd\u6578\uff1f\n\u6700\u597d\u5c07\u76e1\u53ef\u80fd\u591a\u7684\u6a21\u578b\u653e\u5728 TPU \u4e0a\uff0c\u56e0\u7232\u7d55\u5927\u591a\u6578\u64cd\u4f5c\u5728 TPU \u4e0a\u57f7\u884c\u5f97\u66f4\u5feb\u3002\n\u5982\u679c\u60a8\u7684\u6a21\u578b\u4e0d\u5305\u542b\u4efb\u4f55\u8207 TPU \u4e0d\u517c\u5bb9\u7684\u64cd\u4f5c\u3001\u5b57\u7b26\u4e32\u6216\u7a00\u758f\u5f35\u91cf\uff0c\u5247\u5c07\u6574\u500b\u6a21\u578b\u653e\u5728 TPU \u4e0a\u901a\u5e38\u662f\u6700\u4f73\u7b56\u7565\u3002\u7232\u6b64\uff0c\u60a8\u53ef\u4ee5\u67e5\u627e\u6216\u5275\u5efa\u4e00\u500b\u5c01\u88dd\u6574\u500b\u6a21\u578b\u7684\u51fd\u6578\uff0c\u7232\u5176\u5275\u5efa\u51fd\u6578\u5225\u540d\uff0c\u7136\u5f8c\u5c07\u5176\u50b3\u905e\u7d66 Converter\u3002\n\u5982\u679c\u6a21\u578b\u5305\u542b\u4e0d\u9069\u7528\u65bc TPU \u7684\u90e8\u5206\uff08\u4f8b\u5982\uff0c\u4e0d\u652f\u6301 TPU \u7684\u64cd\u4f5c\u3001\u5b57\u7b26\u4e32\u6216\u7a00\u758f\u5f35\u91cf\uff09\uff0c\u5247 TPU \u51fd\u6578\u7684\u9078\u64c7\u53d6\u6c7a\u65bc\u4e0d\u517c\u5bb9\u90e8\u5206\u7684\u4f4d\u7f6e\u3002\n- \u5982\u679c\u662f\u5728\u6a21\u578b\u7684\u958b\u982d\u6216\u7d50\u5c3e\uff0c\u60a8\u53ef\u4ee5\u91cd\u69cb\u6a21\u578b\u4ee5\u4f7f\u5176\u7559\u5728 CPU \u4e0a\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\u9810\u8655\u7406\u548c\u5f8c\u8655\u7406\u968e\u6bb5\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u5c07\u4ee3\u78bc\u79fb\u81f3 CPU\uff0c\u8acb\u53c3\u95b1 [\u201c\u5982\u4f55\u5c07\u6a21\u578b\u7684\u4e00\u90e8\u5206\u79fb\u81f3 CPU\uff1f\u201d](#move-model-to-cpu) \u5b83\u986f\u793a\u4e86\u91cd\u69cb\u6a21\u578b\u7684\u5178\u578b\u65b9\u6cd5\u3002\n- \u5982\u679c\u6a21\u578b\u8655\u65bc\u6a21\u578b\u7684\u4e2d\u9593\u4f4d\u7f6e\uff0c\u6700\u597d\u5c07\u6a21\u578b\u62c6\u5206\u7232\u4e09\u90e8\u5206\uff0c\u5728\u4e2d\u9593\u90e8\u5206\u5305\u542b\u6240\u6709 TPU \u4e0d\u517c\u5bb9\u7684\u64cd\u4f5c\uff0c\u4e26\u4f7f\u5176\u5728 CPU \u4e0a\u904b\u884c\u3002\n- \u5982\u679c\u5b83\u662f\u4e00\u500b\u7a00\u758f\u5f35\u91cf\uff0c\u8acb\u8003\u616e\u5c0d CPU \u8abf\u7528`tf.sparse.to_dense`\uff0c\u4e26\u5c07\u751f\u6210\u7684\u5bc6\u96c6\u5f35\u91cf\u50b3\u905e\u7d66\u6a21\u578b\u7684 TPU \u90e8\u5206\u3002\n\u53e6\u4e00\u500b\u9700\u8981\u8003\u616e\u7684\u56e0\u7d20\u662f HBM \u4f7f\u7528\u60c5\u6cc1\u3002\u5d4c\u5165\u8868\u53ef\u80fd\u6703\u4f7f\u7528\u5927\u91cf HBM\u3002\u5982\u679c\u5b83\u5011\u8d85\u51fa\u4e86 TPU \u7684\u786c\u4ef6\u9650\u5236\uff0c\u5247\u5fc5\u9808\u8207\u67e5\u627e\u64cd\u4f5c\u4e00\u8d77\u653e\u5728 CPU \u4e0a\u3002\n\u61c9\u5118\u53ef\u80fd\u5728\u4e00\u500b\u7c3d\u540d\u4e0b\u53ea\u5b58\u5728\u4e00\u500b TPU \u51fd\u6578\u3002\u5982\u679c\u6a21\u578b\u7684\u7d50\u69cb\u9700\u8981\u7232\u6bcf\u500b\u50b3\u5165\u7684\u63a8\u65b7\u8acb\u6c42\u8abf\u7528\u591a\u500b TPU \u51fd\u6578\uff0c\u60a8\u61c9\u8a72\u6ce8\u610f\u5728 CPU \u548c TPU \u4e4b\u9593\u767c\u9001\u5f35\u91cf\u6703\u589e\u52a0\u5ef6\u9072\u6642\u9593\u3002\n\u67e5\u770b [\u8f49\u5316\u5831\u544a](#conversion-report) \u6709\u52a9\u65bc\u8a55\u4f30 TPU \u51fd\u6578\u7684\u9078\u64c7\u3002\u5b83\u986f\u793a\u4e86 TPU \u4e0a\u7684\u8a08\u7b97\u767e\u5206\u6bd4\uff0c\u4ee5\u53ca\u6bcf\u500b TPU \u51fd\u6578\u7684\u8cbb\u7528\u660e\u7d30\u3002\n### \u5982\u4f55\u5c07\u6a21\u578b\u7684\u4e00\u90e8\u5206\u8f49\u79fb\u5230 CPU\uff1f\n\u5982\u679c\u6a21\u578b\u5305\u542b\u7121\u6cd5\u5728 TPU \u4e0a\u63d0\u4f9b\u7684\u90e8\u5206\uff0c\u60a8\u9700\u8981\u91cd\u69cb\u6a21\u578b\u4ee5\u5c07\u5176\u8f49\u79fb\u5230 CPU \u4e0a\u3002\u9019\u662f\u4e00\u500b\u73a9\u5177\u793a\u4f8b\u3002\u8a72\u6a21\u578b\u662f\u5177\u6709\u9810\u8655\u7406\u968e\u6bb5\u7684\u8a9e\u8a00\u6a21\u578b\u3002\u7232\u7c21\u55ae\u8d77\u898b\uff0c\u7701\u7565\u4e86\u5c64\u5b9a\u7fa9\u548c\u51fd\u6578\u7684\u4ee3\u78bc\u3002\n```\nclass LanguageModel(tf.keras.Model):\u00a0 @tf.function\u00a0 def model_func(self, input_string):\u00a0 \u00a0 word_ids = self.preprocess(input_string)\u00a0 \u00a0 return self.bert_layer(word_ids)\n```\n\u6b64\u6a21\u578b\u7121\u6cd5\u76f4\u63a5\u5728 TPU \u4e0a\u63d0\u4f9b\uff0c\u539f\u56e0\u6709\u5169\u500b\u3002\u9996\u5148\uff0c\u8a72\u53c3\u6578\u662f\u4e00\u500b\u5b57\u7b26\u4e32\u3002\u5176\u6b21\uff0c `preprocess` \u51fd\u6578\u53ef\u80fd\u5305\u542b\u8a31\u591a\u5b57\u7b26\u4e32\u64cd\u4f5c\u3002\u5169\u8005\u4e0d\u517c\u5bb9 TPU\u3002\n\u5982\u9700\u91cd\u69cb\u6b64\u6a21\u578b\uff0c\u60a8\u53ef\u4ee5\u518d\u5275\u5efa\u4e00\u500b\u540d\u7232 `tpu_func` \u7684\u51fd\u6578\u4f86\u8a17\u7ba1\u8a08\u7b97\u5bc6\u96c6\u578b `bert_layer` \u3002\u7136\u5f8c\uff0c\u7232 `tpu_func` \u5275\u5efa\u51fd\u6578\u5225\u540d\u4e26\u5c07\u5176\u50b3\u905e\u7d66 Converter\u3002\u9019\u6a23\uff0c `tpu_func` \u4e2d\u7684\u6240\u6709\u5167\u5bb9\u90fd\u5c07\u5728 TPU \u4e0a\u904b\u884c\uff0c\u800c `model_func` \u4e2d\u5269\u9918\u7684\u6240\u6709\u5167\u5bb9\u90fd\u5c07\u5728 CPU \u4e0a\u904b\u884c\u3002\n```\nclass LanguageModel(tf.keras.Model):\u00a0 @tf.function\u00a0 def tpu_func(self, word_ids):\u00a0 \u00a0 return self.bert_layer(word_ids)\u00a0 @tf.function\u00a0 def model_func(self, input_string):\u00a0 \u00a0 word_ids = self.preprocess(input_string)\u00a0 \u00a0 return self.tpu_func(word_ids)\n```\n### \u5982\u679c\u6a21\u578b\u5177\u6709\u8207 TPU \u4e0d\u517c\u5bb9\u7684\u64cd\u4f5c\u3001\u5b57\u7b26\u4e32\u6216\u7a00\u758f\u5f35\u91cf\uff0c\u8a72\u600e\u9ebc\u8fa6\uff1f\nTPU \u652f\u6301\u5927\u591a\u6578\u6a19\u6e96 TensorFlow \u64cd\u4f5c\uff0c\u4f46\u4e0d\u652f\u6301\u7a00\u758f\u5f35\u91cf\u548c\u5b57\u7b26\u4e32\u7b49\u5c11\u6578\u64cd\u4f5c\u3002\u8f49\u63db\u5668\u4e0d\u6703\u6aa2\u67e5\u662f\u5426\u5b58\u5728 TPU \u4e0d\u517c\u5bb9\u7684\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u5305\u542b\u6b64\u985e\u64cd\u4f5c\u7684\u6a21\u578b\u53ef\u4ee5\u50b3\u905e\u8f49\u5316\u3002\u4f46\u5728\u904b\u884c\u63a8\u65b7\u6a21\u578b\u6642\uff0c\u5c07\u6703\u767c\u751f\u5982\u4e0b\u932f\u8aa4\u3002\n```\n'tf.StringToNumber' op isn't compilable for TPU device.\n```\n\u5982\u679c\u6a21\u578b\u5177\u6709 TPU \u4e0d\u517c\u5bb9\u7684\u64cd\u4f5c\uff0c\u5247\u61c9\u5c07\u5176\u653e\u5728 TPU \u51fd\u6578\u4e4b\u5916\u3002\u6b64\u5916\uff0c\u5b57\u7b26\u4e32\u662f TPU \u4e0a\u4e0d\u53d7\u652f\u6301\u7684\u6578\u64da\u683c\u5f0f\u3002\u56e0\u6b64\uff0c\u4e0d\u61c9\u5c07\u5b57\u7b26\u4e32\u985e\u578b\u7684\u8b8a\u91cf\u653e\u7f6e\u5728 TPU \u51fd\u6578\u4e2d\u3002TPU \u51fd\u6578\u7684\u53c3\u6578\u548c\u8fd4\u56de\u503c\u4e5f\u4e0d\u61c9\u662f\u5b57\u7b26\u4e32\u985e\u578b\u3002\u540c\u6a23\uff0c\u8acb\u907f\u514d\u5c07\u7a00\u758f\u5f35\u91cf\u653e\u7f6e\u5728 TPU \u51fd\u6578\u4e2d\uff0c\u5305\u62ec\u5176\u53c3\u6578\u548c\u8fd4\u56de\u503c\u4e2d\u3002\n\u91cd\u69cb\u6a21\u578b\u7684\u4e0d\u517c\u5bb9\u90e8\u5206\u4e26\u5c07\u5176\u79fb\u52d5\u5230 CPU \u901a\u5e38\u4e26\u4e0d\u56f0\u96e3\u3002\u8acb\u53c3\u8003\u9019\u500b [\u793a\u4f8b](#move-model-to-cpu) \u3002\n### \u5982\u4f55\u5728\u6a21\u578b\u4e2d\u652f\u6301\u81ea\u5b9a\u7fa9\u64cd\u4f5c\uff1f\n\u5982\u679c\u6a21\u578b\u4e2d\u4f7f\u7528\u4e86\u81ea\u5b9a\u7fa9\u64cd\u4f5c\uff0c\u5247 Converter \u53ef\u80fd\u7121\u6cd5\u8b58\u5225\u9019\u4e9b\u64cd\u4f5c\uff0c\u56e0\u800c\u7121\u6cd5\u8f49\u63db\u6a21\u578b\u3002\u9019\u662f\u56e0\u7232\uff0c\u5305\u542b\u64cd\u4f5c\u7684\u5b8c\u6574\u5b9a\u7fa9\u7684\u81ea\u5b9a\u7fa9\u64cd\u4f5c\u7684\u64cd\u4f5c\u5eab\u672a\u95dc\u806f\u5230\u8f49\u63db\u5668\u3002\n\u7531\u65bc\u76ee\u524d\u8f49\u63db\u5668\u4ee3\u78bc\u5c1a\u672a\u958b\u6e90\uff0c\u56e0\u6b64\u7121\u6cd5\u4f7f\u7528\u81ea\u5b9a\u7fa9\u64cd\u4f5c\u69cb\u5efa\u8f49\u63db\u5668\u3002\n### \u5982\u679c\u6211\u6709 TensorFlow 1 \u6a21\u578b\uff0c\u8a72\u600e\u9ebc\u8fa6\uff1f\n\u8f49\u63db\u5668\u4e0d\u652f\u6301 TensorFlow 1 \u6a21\u578b\u3002TensorFlow 1 \u6a21\u578b\u61c9\u9077\u79fb\u5230 TensorFlow 2\u3002\n### \u904b\u884c\u6a21\u578b\u6642\uff0c\u662f\u5426\u9700\u8981\u5553\u7528 MLIR \u6a4b\uff1f\n\u5927\u591a\u6578\u8f49\u63db\u6a21\u578b\u90fd\u53ef\u4ee5\u4f7f\u7528\u8f03\u65b0\u7684 TF2XLA MLIR \u6a4b\u6216\u539f\u59cb\u7684 TF2XLA \u6a4b\u904b\u884c\u3002\n### \u5982\u4f55\u8f49\u63db\u5df2\u5c0e\u51fa\u4f46\u6c92\u6709\u51fd\u6578\u5225\u540d\u7684\u6a21\u578b\uff1f\n\u5982\u679c\u5c0e\u51fa\u6a21\u578b\u6642\u6c92\u6709\u51fd\u6578\u5225\u540d\uff0c\u6700\u7c21\u55ae\u7684\u65b9\u6cd5\u662f\u518d\u6b21\u5c0e\u51fa\u6a21\u578b\u4e26 [\u5275\u5efa\u51fd\u6578\u5225\u540d](#function-alias) \u3002\u5982\u679c\u7121\u6cd5\u9078\u64c7\u91cd\u65b0\u5c0e\u51fa\uff0c\u4ecd\u7136\u53ef\u4ee5\u901a\u904e\u63d0\u4f9b `concrete_function_name` \u4f86\u8f49\u63db\u6a21\u578b\u3002\u4e0d\u904e\uff0c\u8b58\u5225\u6b63\u78ba\u7684 `concrete_function_name` \u9700\u8981\u9032\u884c\u4e00\u4e9b\u6aa2\u6e2c\u5de5\u4f5c\u3002\n\u51fd\u6578\u5225\u540d\u662f\u5f9e\u7528\u6236\u5b9a\u7fa9\u7684\u5b57\u7b26\u4e32\u5230\u5177\u9ad4\u7684\u51fd\u6578\u540d\u7a31\u7684\u6620\u5c04\u3002\u6709\u52a9\u65bc\u66f4\u8f15\u9b06\u5730\u5f15\u7528\u6a21\u578b\u4e2d\u7684\u7279\u5b9a\u51fd\u6578\u3002Converter \u63a5\u53d7\u51fd\u6578\u5225\u540d\u548c\u539f\u59cb\u5177\u9ad4\u51fd\u6578\u540d\u7a31\u3002\n\u5982\u9700\u67e5\u627e\u5177\u9ad4\u7684\u51fd\u6578\u540d\u7a31\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b `saved_model.pb` \u3002\n\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u5c07\u4e00\u500b\u540d\u7232 `__inference_serve_24` \u7684\u5177\u9ad4\u51fd\u6578\u653e\u7f6e\u5728 TPU \u4e0a\u3002\n```\nsudo docker run \\--mount type=bind,source=${MODEL_PATH},target=/tmp/input,readonly \\--mount type=bind,source=${CONVERTED_MODEL_PATH},target=/tmp/output \\${CONVERTER_IMAGE} \\--input_model_dir=/tmp/input \\--output_model_dir=/tmp/output \\--converter_options_string='\u00a0 \u00a0 tpu_functions {\u00a0 \u00a0 \u00a0 concrete_function_name: \"__inference_serve_24\"\u00a0 \u00a0 }'\n```\n### \u5982\u4f55\u89e3\u6c7a\u7de8\u8b6f\u6642\u5e38\u91cf\u7d04\u675f\u932f\u8aa4\uff1f\n\u5c0d\u65bc\u8a13\u7df4\u548c\u63a8\u65b7\uff0cXLA \u8981\u6c42\u67d0\u4e9b\u64cd\u4f5c\u7684\u8f38\u5165\u5728 TPU \u7de8\u8b6f\u6642\u5177\u6709\u5df2\u77e5\u5f62\u72c0\u3002\u9019\u610f\u5473\u7740\uff0c\u7576 XLA \u7de8\u8b6f\u7a0b\u5e8f\u7684 TPU \u90e8\u5206\u6642\uff0c\u9019\u4e9b\u64cd\u4f5c\u7684\u8f38\u5165\u5fc5\u9808\u5177\u6709\u975c\u614b\u5df2\u77e5\u7684\u5f62\u72c0\u3002\n\u89e3\u6c7a\u6b64\u554f\u984c\u7684\u65b9\u6cd5\u6709\u5169\u7a2e\u3002\n- \u6700\u4f73\u65b9\u6cd5\u662f\u5728 XLA \u7de8\u8b6f TPU \u7a0b\u5e8f\u6642\u66f4\u65b0\u64cd\u4f5c\u7684\u8f38\u5165\uff0c\u4f7f\u5176\u5177\u6709\u975c\u614b\u5df2\u77e5\u7684\u5f62\u72c0\u3002\u6b64\u7de8\u8b6f\u6703\u5728\u904b\u884c\u6a21\u578b\u7684 TPU \u90e8\u5206\u4e4b\u524d\u767c\u751f\u3002\u9019\u610f\u5473\u7740\uff0c\u5728`TpuFunction`\u5373\u5c07\u904b\u884c\u6642\uff0c\u8a72\u5f62\u72c0\u61c9\u8a72\u5df2\u7d93\u662f\u975c\u614b\u5df2\u77e5\u7684\u3002\n- \u53e6\u4e00\u7a2e\u65b9\u6cd5\u662f\u4fee\u6539`TpuFunction`\uff0c\u4f7f\u5176\u4e0d\u518d\u5305\u542b\u6709\u554f\u984c\u7684\u64cd\u4f5c\u3002\n### \u7232\u4ec0\u9ebc\u6211\u6703\u6536\u5230\u6279\u8655\u7406\u5f62\u72c0\u932f\u8aa4\uff1f\n\u6279\u8655\u7406\u5177\u6709 [\u56b4\u683c\u7684\u5f62\u72c0\u8981\u6c42](#strict-shape-requirements) \uff0c\u5141\u8a31\u6309\u7b2c 0 \u500b\u7dad\u5ea6\uff08\u4e5f\u7a31\u7232\u6279\u8655\u7406\u7dad\u5ea6\uff09\u5c0d\u50b3\u5165\u8acb\u6c42\u9032\u884c\u6279\u8655\u7406\u3002\u9019\u4e9b\u5f62\u72c0\u8981\u6c42\u4f86\u81ea TensorFlow \u6279\u8655\u7406\u64cd\u4f5c\uff0c\u7121\u6cd5\u653e\u5bec\u3002\n\u4e0d\u6eff\u8db3\u9019\u4e9b\u8981\u6c42\u5c07\u5c0e\u81f4\u4ee5\u4e0b\u932f\u8aa4\uff1a\n- \u6279\u8655\u7406\u8f38\u5165\u5f35\u91cf\u5fc5\u9808\u81f3\u5c11\u6709\u4e00\u500b\u7dad\u5ea6\u3002\n- \u8f38\u5165\u7dad\u5ea6\u61c9\u5339\u914d\u3002\n- \u5728\u7d66\u5b9a\u64cd\u4f5c\u8abf\u7528\u4e2d\u63d0\u4f9b\u7684\u6279\u91cf\u8f38\u5165\u5f35\u91cf\u5fc5\u9808\u5177\u6709\u76f8\u7b49\u7684\u7b2c 0 \u7dad\u5927\u5c0f\u3002\n- \u6279\u91cf\u8f38\u51fa\u5f35\u91cf\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u4e0d\u7b49\u65bc\u8f38\u5165\u5f35\u91cf\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u5927\u5c0f\u7684\u7e3d\u548c\u3002\n\u5982\u9700\u6eff\u8db3\u9019\u4e9b\u8981\u6c42\uff0c\u8acb\u8003\u616e\u63d0\u4f9b\u4e00\u500b\u4e0d\u540c\u7684 [\u51fd\u6578](#function-batching) \u6216 [\u7c3d\u540d](#signature-batching) \u9032\u884c\u6279\u8655\u7406\u3002\u60a8\u53ef\u80fd\u9084\u9700\u8981\u4fee\u6539\u73fe\u6709\u51fd\u6578\u4ee5\u6eff\u8db3\u9019\u4e9b\u8981\u6c42\u3002\n\u5982\u679c\u8981\u6279\u91cf\u8655\u7406\u51fd\u6578\uff0c\u8acb\u78ba\u4fdd\u5176 `@tf.function` \u7684 input_signature \u7684\u5f62\u72c0\u5728\u7b2c 0 \u500b\u7dad\u5ea6\u4e2d\u5747\u5177\u6709 None\u3002\u5982\u679c\u8981\u6279\u91cf\u8655\u7406\u7c3d\u540d\uff0c\u8acb\u78ba\u4fdd\u5176\u6240\u6709\u8f38\u5165\u5728\u7b2c 0 \u500b\u7dad\u5ea6\u4e2d\u5747\u7232 -1\u3002\n\u5982\u9700\u95dc\u65bc\u7232\u4f55\u767c\u751f\u9019\u4e9b\u932f\u8aa4\u4ee5\u53ca\u5982\u4f55\u89e3\u6c7a\u9019\u4e9b\u932f\u8aa4\u7684\u5b8c\u6574\u8aaa\u660e\uff0c\u8acb\u53c3\u95b1 [\u6279\u91cf\u8655\u7406\u6df1\u5165\u4ecb\u7d39](#batching-deep-dive) \u3002\n## \u5df2\u77e5\u554f\u984c\n### TPU \u51fd\u6578\u7121\u6cd5\u9593\u63a5\u8abf\u7528\u5176\u4ed6 TPU \u51fd\u6578\n\u96d6\u7136\u8f49\u63db\u5668\u53ef\u4ee5\u8655\u7406\u8de8 CPU-TPU \u908a\u754c\u7684\u5927\u591a\u6578\u51fd\u6578\u8abf\u7528\u5834\u666f\uff0c\u4f46\u5728\u4e00\u7a2e\u6975\u5c11\u6578\u60c5\u6cc1\u4e0b\u6703\u5931\u6557\u3002\u9019\u7a2e\u60c5\u6cc1\u662f\u6307\u67d0\u500b TPU \u51fd\u6578\u9593\u63a5\u8abf\u7528\u53e6\u4e00\u500b TPU \u51fd\u6578\u3002\n\u9019\u662f\u56e0\u7232\u8f49\u63db\u5668\u6703\u5c07 TPU \u51fd\u6578\u7684\u76f4\u63a5\u8abf\u7528\u65b9\u4fee\u6539\u7232\u8abf\u7528 TPU \u51fd\u6578\u672c\u8eab\uff0c\u6539\u7232\u8abf\u7528 TPU \u8abf\u7528\u5b58\u6839\u3002\u8abf\u7528\u6a01\u5305\u542b\u53ea\u80fd\u5728 CPU \u4e0a\u904b\u884c\u7684\u64cd\u4f5c\u3002\u7576 TPU \u51fd\u6578\u8abf\u7528\u4efb\u4f55\u6700\u7d42\u8abf\u7528\u76f4\u63a5\u8abf\u7528\u65b9\u7684\u51fd\u6578\u6642\uff0c\u9019\u4e9b CPU \u64cd\u4f5c\u53ef\u80fd\u6703\u5728 TPU \u4e0a\u57f7\u884c\uff0c\u5f9e\u800c\u5c0e\u81f4\u7f3a\u5c11\u5167\u6838\u932f\u8aa4\u3002\u8acb\u6ce8\u610f\uff0c\u6b64\u60c5\u6cc1\u8207\u76f4\u63a5\u8abf\u7528\u53e6\u4e00\u500b TPU \u51fd\u6578\u7684 TPU \u51fd\u6578\u4e0d\u540c\u3002\u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u8f49\u63db\u5668\u4e0d\u6703\u4fee\u6539\u4efb\u4e00\u51fd\u6578\u4f86\u8abf\u7528\u8abf\u7528\u5b58\u6839\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u6b63\u5e38\u904b\u884c\u3002\n\u5728 Converter \u4e2d\uff0c\u6211\u5011\u5be6\u73fe\u4e86\u91dd\u5c0d\u9019\u7a2e\u60c5\u6cc1\u7684\u6aa2\u6e2c\u3002\u5982\u679c\u60a8\u770b\u5230\u4ee5\u4e0b\u932f\u8aa4\uff0c\u5247\u8868\u793a\u60a8\u7684\u6a21\u578b\u5df2\u9054\u5230\u6b64\u6975\u7aef\u60c5\u6cc1\uff1a\n```\nUnable to place both \"__inference_tpu_func_2_46\" and \"__inference_tpu_func_4_68\"on the TPU because \"__inference_tpu_func_2_46\" indirectly calls\"__inference_tpu_func_4_68\". This behavior is unsupported because it can causeinvalid graphs to be generated.\n```\n\u4e00\u822c\u89e3\u6c7a\u65b9\u6848\u662f\u91cd\u69cb\u6a21\u578b\u4ee5\u907f\u514d\u6b64\u985e\u51fd\u6578\u8abf\u7528\u5834\u666f\u3002\u5982\u679c\u60a8\u89ba\u5f97\u9019\u5f88\u96e3\u5be6\u73fe\uff0c\u8acb\u8207 Google \u652f\u6301\u5718\u968a\u806f\u7e6b\uff0c\u9032\u884c\u8a73\u7d30\u8aaa\u660e\u3002\n## \u53c3\u8003\u6587\u6a94\n### Protobuf \u683c\u5f0f\u7684\u8f49\u63db\u5668\u9078\u9805\n```\nmessage ConverterOptions {\u00a0 // TPU conversion options.\u00a0 repeated TpuFunction tpu_functions = 1;\u00a0 // The state of an optimization.\u00a0 enum State {\u00a0 \u00a0 // When state is set to default, the optimization will perform its\u00a0 \u00a0 // default behavior. For some optimizations this is disabled and for others\u00a0 \u00a0 // it is enabled. To check a specific optimization, read the optimization's\u00a0 \u00a0 // description.\u00a0 \u00a0 DEFAULT = 0;\u00a0 \u00a0 // Enabled.\u00a0 \u00a0 ENABLED = 1;\u00a0 \u00a0 // Disabled.\u00a0 \u00a0 DISABLED = 2;\u00a0 }\u00a0 // Batch options to apply to the TPU Subgraph.\u00a0 //\u00a0 // At the moment, only one batch option is supported. This field will be\u00a0 // expanded to support batching on a per function and/or per signature basis.\u00a0 //\u00a0 //\u00a0 // If not specified, no batching will be done.\u00a0 repeated BatchOptions batch_options = 100;\u00a0 // Global flag to disable all optimizations that are enabled by default.\u00a0 // When enabled, all optimizations that run by default are disabled. If a\u00a0 // default optimization is explicitly enabled, this flag will have no affect\u00a0 // on that optimization.\u00a0 //\u00a0 // This flag defaults to false.\u00a0 bool disable_default_optimizations = 202;\u00a0 // If enabled, apply an optimization that reshapes the tensors going into\u00a0 // and out of the TPU. This reshape operation improves performance by reducing\u00a0 // the transfer time to and from the TPU.\u00a0 //\u00a0 // This optimization is incompatible with input_shape_opt which is disabled.\u00a0 // by default. If input_shape_opt is enabled, this option should be\u00a0 // disabled.\u00a0 //\u00a0 // This optimization defaults to enabled.\u00a0 State io_shape_optimization = 200;\u00a0 // If enabled, apply an optimization that updates float variables and float\u00a0 // ops on the TPU to bfloat16. This optimization improves performance and\u00a0 // throughtput by reducing HBM usage and taking advantage of TPU support for\u00a0 // bfloat16.\u00a0 //\u00a0 // This optimization may cause a loss of accuracy for some models. If an\u00a0 // unacceptable loss of accuracy is detected, disable this optimization.\u00a0 //\u00a0 // This optimization defaults to enabled.\u00a0 State bfloat16_optimization = 201;\u00a0 BFloat16OptimizationOptions bfloat16_optimization_options = 203;\u00a0 // The settings for XLA sharding. If set, XLA sharding is enabled.\u00a0 XlaShardingOptions xla_sharding_options = 204;}message TpuFunction {\u00a0 // The function(s) that should be placed on the TPU. Only provide a given\u00a0 // function once. Duplicates will result in errors. For example, if\u00a0 // you provide a specific function using function_alias don't also provide the\u00a0 // same function via concrete_function_name or jit_compile_functions.\u00a0 oneof name {\u00a0 \u00a0 // The name of the function alias associated with the function that\u00a0 \u00a0 // should be placed on the TPU. Function aliases are created during model\u00a0 \u00a0 // export using the tf.saved_model.SaveOptions.\u00a0 \u00a0 //\u00a0 \u00a0 // This is a recommended way to specify which function should be placed\u00a0 \u00a0 // on the TPU.\u00a0 \u00a0 string function_alias = 1;\u00a0 \u00a0 // The name of the concrete function that should be placed on the TPU. This\u00a0 \u00a0 // is the name of the function as it found in the GraphDef and the\u00a0 \u00a0 // FunctionDefLibrary.\u00a0 \u00a0 //\u00a0 \u00a0 // This is NOT the recommended way to specify which function should be\u00a0 \u00a0 // placed on the TPU because concrete function names change every time a\u00a0 \u00a0 // model is exported.\u00a0 \u00a0 string concrete_function_name = 3;\u00a0 \u00a0 // The name of the signature to be placed on the TPU. The user must make\u00a0 \u00a0 // sure there is no TPU-incompatible op under the entire signature.\u00a0 \u00a0 string signature_name = 5;\u00a0 \u00a0 // When jit_compile_functions is set to True, all jit compiled functions\u00a0 \u00a0 // are placed on the TPU.\u00a0 \u00a0 //\u00a0 \u00a0 // To use this option, decorate the relevant function(s) with\u00a0 \u00a0 // @tf.function(jit_compile=True), before exporting. Then set this flag to\u00a0 \u00a0 // True. The converter will find all functions that were tagged with\u00a0 \u00a0 // jit_compile=True and place them on the TPU.\u00a0 \u00a0 //\u00a0 \u00a0 // When using this option, all other settings for the TpuFunction\u00a0 \u00a0 // will apply to all functions tagged with\u00a0 \u00a0 // jit_compile=True.\u00a0 \u00a0 //\u00a0 \u00a0 // This option will place all jit_compile=True functions on the TPU.\u00a0 \u00a0 // If only some jit_compile=True functions should be placed on the TPU,\u00a0 \u00a0 // use function_alias or concrete_function_name.\u00a0 \u00a0 bool jit_compile_functions = 4;\u00a0 }}message BatchOptions {\u00a0 // Number of scheduling threads for processing batches of work. Determines\u00a0 // the number of batches processed in parallel. This should be roughly in line\u00a0 // with the number of TPU cores available.\u00a0 int32 num_batch_threads = 1;\u00a0 // The maximum allowed batch size.\u00a0 int32 max_batch_size = 2;\u00a0 // Maximum number of microseconds to wait before outputting an incomplete\u00a0 // batch.\u00a0 int32 batch_timeout_micros = 3;\u00a0 // Optional list of allowed batch sizes. If left empty,\u00a0 // does nothing. Otherwise, supplies a list of batch sizes, causing the op\u00a0 // to pad batches up to one of those sizes. The entries must increase\u00a0 // monotonically, and the final entry must equal max_batch_size.\u00a0 repeated int32 allowed_batch_sizes = 4;\u00a0 // Maximum number of batches enqueued for processing before requests are\u00a0 // failed fast.\u00a0 int32 max_enqueued_batches = 5;\u00a0 // If set, disables large batch splitting which is an efficiency improvement\u00a0 // on batching to reduce padding inefficiency.\u00a0 bool disable_large_batch_splitting = 6;\u00a0 // Experimental features of batching. Everything inside is subject to change.\u00a0 message Experimental {\u00a0 \u00a0 // The component to be batched.\u00a0 \u00a0 // 1. Unset if it's for all TPU subgraphs.\u00a0 \u00a0 // 2. Set function_alias or concrete_function_name if it's for a function.\u00a0 \u00a0 // 3. Set signature_name if it's for a signature.\u00a0 \u00a0 oneof batch_component {\u00a0 \u00a0 \u00a0 // The function alias associated with the function. Function alias is\u00a0 \u00a0 \u00a0 // created during model export using the tf.saved_model.SaveOptions, and is\u00a0 \u00a0 \u00a0 // the recommended way to specify functions.\u00a0 \u00a0 \u00a0 string function_alias = 1;\u00a0 \u00a0 \u00a0 // The concreate name of the function. This is the name of the function as\u00a0 \u00a0 \u00a0 // it found in the GraphDef and the FunctionDefLibrary. This is NOT the\u00a0 \u00a0 \u00a0 // recommended way to specify functions, because concrete function names\u00a0 \u00a0 \u00a0 // change every time a model is exported.\u00a0 \u00a0 \u00a0 string concrete_function_name = 2;\u00a0 \u00a0 \u00a0 // The name of the signature.\u00a0 \u00a0 \u00a0 string signature_name = 3;\u00a0 \u00a0 }\u00a0 }\u00a0 Experimental experimental = 7;}message BFloat16OptimizationOptions {\u00a0 // Indicates where the BFloat16 optimization should be applied.\u00a0 enum Scope {\u00a0 \u00a0 // The scope currently defaults to TPU.\u00a0 \u00a0 DEFAULT = 0;\u00a0 \u00a0 // Apply the bfloat16 optimization to TPU computation.\u00a0 \u00a0 TPU = 1;\u00a0 \u00a0 // Apply the bfloat16 optimization to the entire model including CPU\u00a0 \u00a0 // computations.\u00a0 \u00a0 ALL = 2;\u00a0 }\u00a0 // This field indicates where the bfloat16 optimization should be applied.\u00a0 //\u00a0 // The scope defaults to TPU.\u00a0 Scope scope = 1;\u00a0 // If set, the normal safety checks are skipped. For example, if the model\u00a0 // already contains bfloat16 ops, the bfloat16 optimization will error because\u00a0 // pre-existing bfloat16 ops can cause issues with the optimization. By\u00a0 // setting this flag, the bfloat16 optimization will skip the check.\u00a0 //\u00a0 // This is an advanced feature and not recommended for almost all models.\u00a0 //\u00a0 // This flag is off by default.\u00a0 bool skip_safety_checks = 2;\u00a0 // Ops that should not be converted to bfloat16.\u00a0 // Inputs into these ops will be cast to float32, and outputs from these ops\u00a0 // will be cast back to bfloat16.\u00a0 repeated string filterlist = 3;}message XlaShardingOptions {\u00a0 // num_cores_per_replica for TPUReplicateMetadata.\u00a0 //\u00a0 // This is the number of cores you wish to split your model into using XLA\u00a0 // SPMD.\u00a0 int32 num_cores_per_replica = 1;\u00a0 // (optional) device_assignment for TPUReplicateMetadata.\u00a0 //\u00a0 // This is in a flattened [x, y, z, core] format (for\u00a0 // example, core 1 of the chip\u00a0 // located in 2,3,0 will be stored as [2,3,0,1]).\u00a0 //\u00a0 // If this is not specified, then the device assignments will utilize the same\u00a0 // topology as specified in the topology attribute.\u00a0 repeated int32 device_assignment = 2;\u00a0 // A serialized string of tensorflow.tpu.TopologyProto objects, used for\u00a0 // the topology attribute in TPUReplicateMetadata.\u00a0 //\u00a0 // You must specify the mesh_shape and device_coordinates attributes in\u00a0 // the topology object.\u00a0 //\u00a0 // This option is required for num_cores_per_replica > 1 cases due to\u00a0 // ambiguity of num_cores_per_replica, for example,\u00a0 // pf_1x2x1 with megacore and df_1x1\u00a0 // both have num_cores_per_replica = 2, but topology is (1,2,1,1) for pf and\u00a0 // (1,1,1,2) for df.\u00a0 // - For pf_1x2x1, mesh shape and device_coordinates looks like:\u00a0 // \u00a0 mesh_shape = [1,2,1,1]\u00a0 // \u00a0 device_coordinates=flatten([0,0,0,0], [0,1,0,0])\u00a0 // - For df_1x1, mesh shape and device_coordinates looks like:\u00a0 // \u00a0 mesh_shape = [1,1,1,2]\u00a0 // \u00a0 device_coordinates=flatten([0,0,0,0], [0,0,0,1])\u00a0 // - For df_2x2, mesh shape and device_coordinates looks like:\u00a0 // \u00a0 mesh_shape = [2,2,1,2]\u00a0 // \u00a0 device_coordinates=flatten(\u00a0 // \u00a0 \u00a0[0,0,0,0],[0,0,0,1],[0,1,0,0],[0,1,0,1]\u00a0 // \u00a0 \u00a0[1,0,0,0],[1,0,0,1],[1,1,0,0],[1,1,0,1])\u00a0 bytes topology = 3;}\n```\n## \u6279\u91cf\u8655\u7406\u6df1\u5165\u4ecb\u7d39\n\u6279\u8655\u7406\u7528\u65bc\u63d0\u9ad8\u541e\u5410\u91cf\u548c TPU \u5229\u7528\u7387\u3002\u5b83\u5141\u8a31\u540c\u6642\u8655\u7406\u591a\u500b\u8acb\u6c42\u3002\u5728\u8a13\u7df4\u671f\u9593\uff0c\u53ef\u4ee5\u4f7f\u7528 `tf.data` \u5b8c\u6210\u6279\u8655\u7406\u3002\u5728\u63a8\u65b7\u671f\u9593\uff0c\u901a\u5e38\u662f\u901a\u904e\u5728\u5c0d\u50b3\u5165\u8acb\u6c42\u9032\u884c\u6279\u8655\u7406\u7684\u5716\u4e2d\u6dfb\u52a0\u64cd\u4f5c\u4f86\u5b8c\u6210\u7684\u3002\u64cd\u4f5c\u6703\u7b49\u5230\u64c1\u6709\u8db3\u5920\u7684\u8acb\u6c42\u6216\u9054\u5230\u8d85\u6642\u5f8c\uff0c\u518d\u6839\u64da\u5404\u500b\u8acb\u6c42\u751f\u6210\u5927\u6279\u91cf\u3002\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u53ef\u4ee5\u8abf\u6574\u7684\u4e0d\u540c\u6279\u8655\u7406\u9078\u9805\uff08\u5305\u62ec\u6279\u91cf\u5927\u5c0f\u548c\u8d85\u6642\uff09\uff0c\u8acb\u53c3\u95b1 [\u6279\u8655\u7406\u9078\u9805\u7684\u5b9a\u7fa9](#batching-options) \u3002\n\u9ed8\u8a8d\u60c5\u6cc1\u4e0b\uff0c\u8f49\u63db\u5668\u6703\u76f4\u63a5\u5728 TPU \u8a08\u7b97\u4e4b\u524d\u63d2\u5165\u6279\u8655\u7406\u64cd\u4f5c\u3002\u5b83\u6703\u5c07\u7528\u6236\u63d0\u4f9b\u7684 TPU \u51fd\u6578\u548c\u6a21\u578b\u4e2d\u73fe\u6709\u7684\u4efb\u4f55 TPU \u8a08\u7b97\u8207\u6279\u8655\u7406\u64cd\u4f5c\u5c01\u88dd\u5728\u4e00\u8d77\u3002\u60a8\u53ef\u4ee5\u66ff\u63db\u6b64\u9ed8\u8a8d\u884c\u7232\uff0c\u65b9\u6cd5\u662f\u544a\u77e5 Converter \u61c9\u6279\u91cf\u8655\u7406\u54ea\u4e9b [\u51fd\u6578](#function-batching) \u548c/\u6216 [\u7c3d\u540d](#signature-batching) \u3002\n\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u6dfb\u52a0\u9ed8\u8a8d\u6279\u8655\u7406\u3002\n```\nbatch_options {\u00a0 num_batch_threads: 2\u00a0 max_batch_size: 8\u00a0 batch_timeout_micros: 5000\u00a0 allowed_batch_sizes: 2\u00a0 allowed_batch_sizes: 4\u00a0 allowed_batch_sizes: 8\u00a0 max_enqueued_batches: 10}\n```\n### \u7c3d\u540d\u6279\u8655\u7406\n**\u6ce8\u610f** \uff1a\u6b64\u529f\u80fd\u4ecd\u8655\u65bc\u5be6\u9a57\u968e\u6bb5\u3002\u6e2c\u8a66\u5b8c\u6210\u5f8c\uff0c\u8a72\u5b57\u6bb5\u5c07\u5f9e\u5be6\u9a57\u6027\u5c01\u88dd\u5bb9\u5668\u4e2d\u79fb\u51fa\u3002\n\u7c3d\u540d\u6279\u8655\u7406\u6703\u5f9e\u7c3d\u540d\u7684\u8f38\u5165\u5230\u7c3d\u540d\u7684\u8f38\u51fa\u5c0d\u6574\u500b\u6a21\u578b\u9032\u884c\u6279\u8655\u7406\u3002\u8207\u8f49\u63db\u5668\u7684\u9ed8\u8a8d\u6279\u8655\u7406\u884c\u7232\u4e0d\u540c\uff0c\u7c3d\u540d\u6279\u8655\u7406\u6703\u540c\u6642\u6279\u91cf\u8655\u7406 TPU \u8a08\u7b97\u548c CPU \u8a08\u7b97\u3002\u5728\u67d0\u4e9b\u6a21\u578b\u4e0a\u9032\u884c\u63a8\u65b7\u671f\u9593\uff0c\u9019\u6703\u4f7f\u6027\u80fd\u63d0\u5347 10% \u5230 20%\u3002\n\u8207\u6240\u6709\u6279\u8655\u7406\u4e00\u6a23\uff0c\u7c3d\u540d\u6279\u8655\u7406\u5177\u6709 [\u56b4\u683c\u7684\u5f62\u72c0\u8981\u6c42](#strict-shape-requirements) \u3002\u7232\u4e86\u5e6b\u52a9\u78ba\u4fdd\u6eff\u8db3\u9019\u4e9b\u5f62\u72c0\u8981\u6c42\uff0c\u7c3d\u540d\u8f38\u5165\u61c9\u5177\u6709\u81f3\u5c11\u5177\u6709\u5169\u500b\u7dad\u5ea6\u7684\u5f62\u72c0\u3002\u7b2c\u4e00\u500b\u7dad\u5ea6\u662f\u6279\u6b21\u5927\u5c0f\uff0c\u5927\u5c0f\u61c9\u7232 -1\u3002\u4f8b\u5982\uff0c `(-1, 4)` \u3001 `(-1)` \u6216 `(-1, 128, 4, 10)` \u90fd\u662f\u6709\u6548\u7684\u8f38\u5165\u5f62\u72c0\u3002\u5982\u679c\u7121\u6cd5\u505a\u5230\u9019\u4e00\u9ede\uff0c\u8acb\u8003\u616e\u4f7f\u7528\u9ed8\u8a8d\u6279\u8655\u7406\u884c\u7232\u6216 [\u51fd\u6578\u6279\u8655\u7406](#function-batching) \u3002\n\u5982\u9700\u4f7f\u7528\u7c3d\u540d\u6279\u91cf\u8655\u7406\u529f\u80fd\uff0c\u8acb\u4f7f\u7528 `BatchOptions` \u4ee5 `signature_name` \u7684\u5f62\u5f0f\u63d0\u4f9b\u7c3d\u540d\u540d\u7a31\u3002\n```\nbatch_options {\u00a0 num_batch_threads: 2\u00a0 max_batch_size: 8\u00a0 batch_timeout_micros: 5000\u00a0 allowed_batch_sizes: 2\u00a0 allowed_batch_sizes: 4\u00a0 allowed_batch_sizes: 8\u00a0 max_enqueued_batches: 10\u00a0 experimental {\u00a0 \u00a0 signature_name: \"serving_default\"\u00a0 }}\n```\n### \u51fd\u6578\u6279\u8655\u7406\n**\u6ce8\u610f** \uff1a\u6b64\u529f\u80fd\u4ecd\u8655\u65bc\u5be6\u9a57\u968e\u6bb5\u3002\u6e2c\u8a66\u5b8c\u6210\u5f8c\uff0c\u8a72\u5b57\u6bb5\u5c07\u5f9e\u5be6\u9a57\u6027\u5c01\u88dd\u5bb9\u5668\u4e2d\u79fb\u51fa\u3002\n\u51fd\u6578\u6279\u8655\u7406\u53ef\u7528\u65bc\u544a\u77e5 Converter \u61c9\u9032\u884c\u6279\u8655\u7406\u54ea\u4e9b\u51fd\u6578\u3002\u9ed8\u8a8d\u60c5\u6cc1\u4e0b\uff0c\u8f49\u63db\u5668\u5c07\u6279\u91cf\u8655\u7406\u6240\u6709 TPU \u51fd\u6578\u3002\u51fd\u6578\u6279\u8655\u7406\u5c07\u66ff\u63db\u6b64\u9ed8\u8a8d\u884c\u7232\u3002\n\u51fd\u6578\u6279\u8655\u7406\u53ef\u7528\u65bc\u6279\u91cf\u8655\u7406 CPU \u8a08\u7b97\u3002\u5c0d\u8a31\u591a\u6a21\u578b\u57f7\u884c\u6279\u8655\u7406 CPU \u8a08\u7b97\u6642\uff0c\u6027\u80fd\u90fd\u6703\u6709\u6240\u63d0\u5347\u3002\u6279\u91cf CPU \u8a08\u7b97\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u4f7f\u7528\u7c3d\u540d\u6279\u8655\u7406\uff0c\u4f46\u8a72\u65b9\u6cd5\u53ef\u80fd\u4e0d\u9069\u7528\u65bc\u67d0\u4e9b\u6a21\u578b\u3002\u5728\u9019\u4e9b\u60c5\u6cc1\u4e0b\uff0c\u51fd\u6578\u6279\u8655\u7406\u9664\u4e86 TPU \u8a08\u7b97\u4e4b\u5916\uff0c\u9084\u53ef\u7528\u65bc\u6279\u91cf\u8655\u7406\u90e8\u5206 CPU \u8a08\u7b97\u3002\u8acb\u6ce8\u610f\uff0c\u6279\u8655\u7406\u64cd\u4f5c\u7121\u6cd5\u5728 TPU \u4e0a\u904b\u884c\uff0c\u56e0\u6b64\u6240\u63d0\u4f9b\u7684\u4efb\u4f55\u6279\u8655\u7406\u51fd\u6578\u90fd\u5fc5\u9808\u5728 CPU \u4e0a\u8abf\u7528\u3002\n\u51fd\u6578\u6279\u8655\u7406\u9084\u53ef\u7528\u65bc\u6eff\u8db3\u6279\u8655\u7406\u64cd\u4f5c\u65bd\u52a0\u7684 [\u56b4\u683c\u7684\u5f62\u72c0\u8981\u6c42](#strict-shape-requirements) \u3002\u5982\u679c TPU \u51fd\u6578\u4e0d\u7b26\u5408\u6279\u8655\u7406\u64cd\u4f5c\u7684\u5f62\u72c0\u8981\u6c42\uff0c\u53ef\u4ee5\u4f7f\u7528\u51fd\u6578\u6279\u8655\u7406\u4f86\u6307\u793a\u8f49\u63db\u5668\u6279\u8655\u7406\u4e0d\u540c\u7684\u51fd\u6578\u3002\n\u5982\u9700\u4f7f\u7528\u6b64\u5eab\uff0c\u8acb\u7232\u61c9\u9032\u884c\u6279\u8655\u7406\u7684\u51fd\u6578\u751f\u6210 `function_alias` \u3002\u7232\u6b64\uff0c\u60a8\u53ef\u4ee5\u5728\u6a21\u578b\u4e2d\u67e5\u627e\u6216\u5275\u5efa\u4e00\u500b\u51fd\u6578\uff0c\u7528\u65bc\u5c01\u88dd\u60a8\u60f3\u8981\u6279\u91cf\u8655\u7406\u7684\u6240\u6709\u5167\u5bb9\u3002\u78ba\u4fdd\u6b64\u51fd\u6578\u7b26\u5408\u6279\u8655\u7406\u64cd\u4f5c\u65bd\u52a0\u7684 [\u56b4\u683c\u7684\u5f62\u72c0\u8981\u6c42](#strict-shape-requirements) \u3002\u5982\u679c\u9084\u6c92\u6709 `@tf.function` \uff0c\u8acb\u6dfb\u52a0\u3002\u8acb\u52d9\u5fc5\u5411 `@tf.function` \u63d0\u4f9b `input_signature` \u3002\u7b2c 0 \u500b\u7dad\u5ea6\u61c9\u7232 `None` \uff0c\u56e0\u7232\u5b83\u662f\u6279\u6b21\u7dad\u5ea6\uff0c\u56e0\u6b64\u5b83\u4e0d\u80fd\u662f\u56fa\u5b9a\u5927\u5c0f\u3002\u4f8b\u5982\uff0c `[None, 4]` \u3001 `[None]` \u6216 `[None, 128, 4, 10]` \u90fd\u662f\u6709\u6548\u7684\u8f38\u5165\u5f62\u72c0\u3002\u4fdd\u5b58\u6a21\u578b\u6642\uff0c\u8acb\u63d0\u4f9b\u5982\u4e0b\u6240\u793a\u7684 `SaveOptions` \uff0c\u7232 `model.batch_func` \u63d0\u4f9b\u5225\u540d\u201c `batch_func` \u201d\u3002\u7136\u5f8c\uff0c\u60a8\u53ef\u4ee5\u5c07\u6b64\u51fd\u6578\u5225\u540d\u50b3\u905e\u7d66\u8f49\u63db\u5668\u3002\n```\nclass ToyModel(tf.keras.Model):\u00a0 @tf.function(input_signature=[tf.TensorSpec(shape=[None, 10],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 dtype=tf.float32)])\u00a0 def batch_func(self, x):\u00a0 \u00a0 return x * 1.0\u00a0 ...model = ToyModel()save_options = tf.saved_model.SaveOptions(function_aliases={\u00a0 \u00a0 'batch_func': model.batch_func,})tf.saved_model.save(model, model_dir, options=save_options)\n```\n\u63a5\u4e0b\u4f86\uff0c\u4f7f\u7528 BatchOptions \u50b3\u905e `function_alias` \u3002\n```\nbatch_options {\u00a0 num_batch_threads: 2\u00a0 max_batch_size: 8\u00a0 batch_timeout_micros: 5000\u00a0 allowed_batch_sizes: 2\u00a0 allowed_batch_sizes: 4\u00a0 allowed_batch_sizes: 8\u00a0 max_enqueued_batches: 10\u00a0 experimental {\u00a0 \u00a0 function_alias: \"batch_func\"\u00a0 }}\n```\n### \u6279\u8655\u7406\u9078\u9805\u7684\u5b9a\u7fa9\n- `num_batch_threads`\uff1a\uff08\u6574\u6578\uff09\u7528\u65bc\u8655\u7406\u5de5\u4f5c\u6279\u6b21\u7684\u8abf\u5ea6\u7dda\u7a0b\u6578\u3002\u78ba\u5b9a\u4e26\u884c\u8655\u7406\u7684\u6279\u6b21\u7684\u6578\u91cf\u3002\u9019\u61c9\u8a72\u8207\u53ef\u7528\u7684 TPU \u6838\u5fc3\u6578\u91cf\u5927\u81f4\u4e00\u81f4\u3002\n- `max_batch_size`\uff1a\uff08\u6574\u6578\uff09\u5141\u8a31\u7684\u6279\u6b21\u5927\u5c0f\u4e0a\u9650\u3002\u8a72\u503c\u53ef\u4ee5\u5927\u65bc`allowed_batch_sizes`\uff0c\u4ee5\u4fbf\u5229\u7528\u5927\u578b\u6279\u91cf\u62c6\u5206\u3002\n- `batch_timeout_micros`\uff1a\uff08\u6574\u6578\uff09\u5728\u8f38\u51fa\u672a\u5b8c\u6210\u7684\u6279\u6b21\u4e4b\u524d\u7b49\u5f85\u7684\u6700\u5927\u5fae\u79d2\u6578\u3002\n- `allowed_batch_sizes`\uff1a\uff08\u6574\u6578\u5217\u8868\uff09\u5982\u679c\u5217\u8868\u4e0d\u7232\u7a7a\uff0c\u5247\u6703\u5c07\u6279\u6b21\u586b\u5145\u5230\u5217\u8868\u4e2d\u6700\u63a5\u8fd1\u7684\u5927\u5c0f\u3002\u8a72\u5217\u8868\u5fc5\u9808\u55ae\u8abf\u905e\u589e\uff0c\u4e26\u4e14\u6700\u7d42\u5143\u7d20\u5fc5\u9808\u5c0f\u65bc\u6216\u7b49\u65bc`max_batch_size`\u3002\n- `max_enqueued_batches`\uff1a\uff08\u6574\u6578\uff09\u8acb\u6c42\u5feb\u901f\u5931\u6557\u4e4b\u524d\u52a0\u5165\u968a\u5217\u7b49\u5f85\u8655\u7406\u7684\u6279\u6b21\u6578\u4e0a\u9650\u3002\n### \u66f4\u65b0\u73fe\u6709\u7684\u6279\u8655\u7406\u9078\u9805\n\u5982\u9700\u6dfb\u52a0\u6216\u66f4\u65b0\u6279\u8655\u7406\u9078\u9805\uff0c\u60a8\u53ef\u4ee5\u6dfb\u52a0\u6216\u66f4\u65b0\u6279\u8655\u7406\u9078\u9805\uff0c\u65b9\u6cd5\u662f\u904b\u884c\u6307\u5b9a batch_options \u7684 Docker \u6620\u50cf\uff0c\u4e26\u4f7f\u7528 `--converter_options_string` \u6a19\u8a8c\u5c07 `disable_default_optimizations` \u8a2d\u7f6e\u7232 true\u3002\u6279\u8655\u7406\u9078\u9805\u5c07\u61c9\u7528\u65bc\u6bcf\u500b TPU \u51fd\u6578\u6216\u73fe\u6709\u7684\u6279\u8655\u7406\u64cd\u4f5c\u3002\n**\u6ce8\u610f** \uff1a\u60a8\u7121\u6cd5\u4f7f\u7528 `--converter_options_string` \u540c\u6642\u8a2d\u7f6e `tpu_functions` \u4f86\u66f4\u65b0\u6279\u8655\u7406\u9078\u9805\u3002\n```\nbatch_options {\u00a0 num_batch_threads: 2\u00a0 max_batch_size: 8\u00a0 batch_timeout_micros: 5000\u00a0 allowed_batch_sizes: 2\u00a0 allowed_batch_sizes: 4\u00a0 allowed_batch_sizes: 8\u00a0 max_enqueued_batches: 10}disable_default_optimizations=True\n```\n### \u6279\u8655\u7406\u5f62\u72c0\u8981\u6c42\n\u6279\u6b21\u7684\u5275\u5efa\u65b9\u5f0f\u662f\u6cbf\u5176\u6279\u6b21\uff08\u7b2c 0\uff09\u7dad\u5ea6\u4e32\u806f\u4e0d\u540c\u8acb\u6c42\u4e2d\u7684\u8f38\u5165\u5f35\u91cf\u3002\u8f38\u51fa\u5f35\u91cf\u6703\u6cbf\u5176\u7b2c 0 \u7dad\u62c6\u5206\u3002\u7232\u4e86\u57f7\u884c\u9019\u4e9b\u64cd\u4f5c\uff0c\u6279\u8655\u7406\u64cd\u4f5c\u5c0d\u5176\u8f38\u5165\u548c\u8f38\u51fa\u6709\u56b4\u683c\u7684\u5f62\u72c0\u8981\u6c42\u3002\n\u5982\u9700\u77ad\u89e3\u9019\u4e9b\u8981\u6c42\uff0c\u5148\u4e86\u89e3\u5982\u4f55\u57f7\u884c\u6279\u8655\u7406\u6703\u5f88\u6709\u5e6b\u52a9\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u5011\u5c07\u6279\u91cf\u8655\u7406\u4e00\u500b\u7c21\u55ae\u7684 `tf.matmul` \u64cd\u4f5c\u3002\n```\ndef my_func(A, B)\u00a0 \u00a0 return tf.matmul(A, B)\n```\n\u7b2c\u4e00\u500b\u63a8\u65b7\u8acb\u6c42\u751f\u6210\u8f38\u5165 A \u548c B\uff0c\u5176\u5f62\u72c0\u5206\u5225\u7232 `(1, 3, 2)` \u548c `(1, 2, 4)` \u3002\u7b2c\u4e8c\u500b\u63a8\u65b7\u8acb\u6c42\u6703\u751f\u6210\u8f38\u5165 A \u548c B\uff0c\u5176\u5f62\u72c0\u7232 `(2, 3, 2)` \u548c `(2, 2, 4)` \u3002\n\u5df2\u9054\u5230\u6279\u8655\u7406\u8d85\u6642\u3002\u6a21\u578b\u652f\u6301\u5927\u5c0f\u7232 3 \u7684\u6279\u6b21\u5927\u5c0f\uff0c\u56e0\u6b64\u63a8\u65b7\u8acb\u6c42 1 \u548c 2 \u6703\u4e00\u8d77\u6279\u91cf\u8655\u7406\uff0c\u7121\u9700\u4efb\u4f55\u586b\u5145\u3002\u6279\u8655\u7406\u5f35\u91cf\u901a\u904e\u6cbf\u6279\u91cf\uff08\u7b2c 0 \u500b\uff09\u7dad\u5ea6\u4e32\u806f\u8acb\u6c42 1 \u548c 2 \u4f86\u5f62\u6210\u3002\u7531\u65bc #1 \u7684 A \u7684\u5f62\u72c0\u7232 `(1, 3, 2)` \uff0c#2 \u7684 A \u7684\u5f62\u72c0\u7232 `(2, 3, 2)` \uff0c\u56e0\u6b64\u7576\u5b83\u5011\u6cbf\u6279\u6b21\uff08\u7b2c 0\uff09\u7dad\u5ea6\u4e32\u806f\u6642\uff0c\u751f\u6210\u7684\u5f62\u72c0\u7232 `(3, 3, 2)` \u3002\n\u57f7\u884c `tf.matmul` \u4e26\u751f\u6210\u5f62\u72c0\u7232 `(3, 3, 4)` \u7684\u8f38\u51fa\u3002\n`tf.matmul` \u7684\u8f38\u51fa\u662f\u6279\u91cf\u8655\u7406\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5c07\u5176\u62c6\u5206\u56de\u55ae\u7368\u7684\u8acb\u6c42\u3002\u6279\u8655\u7406\u64cd\u4f5c\u901a\u904e\u6cbf\u6bcf\u500b\u8f38\u51fa\u5f35\u91cf\u7684\u6279\u91cf\uff08\u7b2c 0\uff09\u7dad\u5ea6\u9032\u884c\u62c6\u5206\u4f86\u5be6\u73fe\u6b64\u76ee\u7684\u3002\u5b83\u6703\u6c7a\u5b9a\u5982\u4f55\u6839\u64da\u539f\u59cb\u8f38\u5165\u7684\u5f62\u72c0\u62c6\u5206\u7b2c 0 \u500b\u7dad\u5ea6\u3002\u7531\u65bc\u8acb\u6c42 1 \u7684\u5f62\u72c0\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u7232 1\uff0c\u56e0\u6b64\u5c0d\u65bc `(1, 3, 4)` \u7684\u5f62\u72c0\uff0c\u5176\u8f38\u51fa\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u7232 1\u3002\u7531\u65bc\u8acb\u6c42 2 \u7684\u5f62\u72c0\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u7232 2\uff0c\u56e0\u6b64\u5c0d\u65bc `(2, 3, 4)` \u7684\u5f62\u72c0\uff0c\u5176\u8f38\u51fa\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u7232 2\u3002\n\u7232\u4e86\u57f7\u884c\u4e0a\u8ff0\u8f38\u5165\u4e32\u806f\u548c\u8f38\u51fa\u62c6\u5206\uff0c\u6279\u8655\u7406\u64cd\u4f5c\u5177\u6709\u4ee5\u4e0b\u5f62\u72c0\u8981\u6c42\uff1a\n- \u6279\u8655\u7406\u7684\u8f38\u5165\u4e0d\u80fd\u662f\u6a19\u91cf\u3002\u5982\u9700\u6cbf\u7b2c 0 \u500b\u7dad\u5ea6\u4e32\u806f\uff0c\u5f35\u91cf\u5fc5\u9808\u81f3\u5c11\u6709\u5169\u500b\u7dad\u5ea6\u3002\u5728\u4e0a\u9762\u7684\u6f14\u793a\u4e2d\u3002A \u548c B \u90fd\u4e0d\u662f\u6a19\u91cf\u3002\u4e0d\u6eff\u8db3\u6b64\u8981\u6c42\u5c07\u5c0e\u81f4\u932f\u8aa4\uff0c\u4f8b\u5982\uff1a `Batching input tensors must have at least one dimension` \u3002\u4e00\u7a2e\u7c21\u55ae\u7684\u89e3\u6c7a\u65b9\u6cd5\u5c31\u662f\u5c07\u6a19\u91cf\u8a2d\u7232\u77e2\u91cf\u3002\n- \u5728\u4e0d\u540c\u7684\u63a8\u65b7\u8acb\u6c42\uff08\u4f8b\u5982\uff0c\u4e0d\u540c\u7684\u6703\u8a71\u904b\u884c\u8abf\u7528\uff09\u4e2d\uff0c\u9664\u7b2c 0 \u500b\u7dad\u5ea6\u5916\uff0c\u540c\u540d\u7684\u8f38\u5165\u5f35\u91cf\u7684\u6bcf\u500b\u7dad\u5ea6\u7684\u5927\u5c0f\u90fd\u76f8\u540c\u3002\u9019\u6a23\uff0c\u8f38\u5165\u5c31\u53ef\u4ee5\u6cbf\u5176\u7b2c 0 \u500b\u7dad\u5ea6\u4e7e\u6de8\u5730\u4e32\u806f\u8d77\u4f86\u3002\u5728\u4e0a\u9762\u7684\u6f14\u793a\u4e2d\uff0c\u8acb\u6c42 1 \u7684 A \u7684\u5f62\u72c0\u7232 `(1, 3, 2)` \u3002\u9019\u610f\u5473\u7740\uff0c\u5c07\u4f86\u7684\u4efb\u4f55\u8acb\u6c42\u90fd\u5fc5\u9808\u751f\u6210\u5177\u6709 `(X, 3, 2)` \u6a21\u5f0f\u7684\u5f62\u72c0\u3002\u8acb\u6c42 2 \u901a\u904e `(2, 3, 2)` \u6eff\u8db3\u6b64\u8981\u6c42\u3002\u540c\u6a23\uff0c\u8acb\u6c42 1 \u7684 B \u7684\u5f62\u72c0\u7232 `(1, 2, 4)` \uff0c\u56e0\u6b64\u672a\u4f86\u7684\u6240\u6709\u8acb\u6c42\u90fd\u5fc5\u9808\u751f\u6210\u4e00\u500b\u5177\u6709 `(X, 2, 4)` \u6a21\u5f0f\u7684\u5f62\u72c0\u3002\u4e0d\u6eff\u8db3\u6b64\u8981\u6c42\u5c07\u5c0e\u81f4\u932f\u8aa4\uff0c\u4f8b\u5982\uff1a `Dimensions of inputs should match` \u3002\n- \u5c0d\u65bc\u7d66\u5b9a\u7684\u63a8\u65b7\u8acb\u6c42\uff0c\u6240\u6709\u8f38\u5165\u90fd\u5fc5\u9808\u5177\u6709\u76f8\u540c\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u5927\u5c0f\u3002\u5982\u679c\u6279\u8655\u7406\u64cd\u4f5c\u7684\u4e0d\u540c\u8f38\u5165\u5f35\u91cf\u5177\u6709\u4e0d\u540c\u7684\u7b2c 0 \u500b\u7dad\u5ea6\uff0c\u5247\u6279\u8655\u7406\u64cd\u4f5c\u4e0d\u77e5\u9053\u5982\u4f55\u62c6\u5206\u8f38\u51fa\u5f35\u91cf\u3002\u5728\u4e0a\u9762\u7684\u6f14\u793a\u4e2d\uff0c\u8acb\u6c42 1 \u7684\u5f35\u91cf\u5728\u7b2c 0 \u500b\u7dad\u5ea6\u5927\u5c0f\u5747\u7232 1\u3002\u9019\u6a23\uff0c\u6279\u8655\u7406\u64cd\u4f5c\u5c31\u80fd\u77e5\u9053\u5176\u8f38\u51fa\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u5927\u5c0f\u61c9\u7232 1\u3002\u540c\u6a23\uff0c\u8acb\u6c42 2 \u7684\u5f35\u91cf\u7b2c 0 \u500b\u7dad\u5ea6\u5927\u5c0f\u7232 2\uff0c\u56e0\u6b64\u5176\u8f38\u51fa\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u5927\u5c0f\u7232 2\u3002\u7576\u6279\u8655\u7406\u64cd\u4f5c\u62c6\u5206 `(3, 3, 4)` \u7684\u6700\u7d42\u5f62\u72c0\u6642\uff0c\u5b83\u6703\u7232\u8acb\u6c42 1 \u751f\u6210 `(1, 3, 4)` \uff0c\u7232\u8acb\u6c42 2 \u751f\u6210 `(2, 3, 4)` \u3002\u4e0d\u6eff\u8db3\u6b64\u8981\u6c42\u5c07\u5c0e\u81f4\u932f\u8aa4\uff0c\u4f8b\u5982\uff1a `Batching input tensors supplied in a given op invocation must have equal 0th-dimension size` \u3002\n- \u6bcf\u500b\u8f38\u51fa\u5f35\u91cf\u5f62\u72c0\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u5927\u5c0f\u5fc5\u9808\u662f\u6240\u6709\u8f38\u5165\u5f35\u91cf\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u5927\u5c0f\u7684\u7e3d\u548c\uff08\u52a0\u4e0a\u6279\u8655\u7406\u64cd\u4f5c\u5f15\u5165\u7684\u4efb\u4f55\u5167\u908a\u8ddd\u4ee5\u6eff\u8db3\u6b21\u5927 `allowed_batch_size` \uff09\u3002\u9019\u6a23\uff0c\u6279\u8655\u7406\u64cd\u4f5c\u5c31\u53ef\u4ee5\u6839\u64da\u8f38\u5165\u5f35\u91cf\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u6cbf\u7b2c 0 \u500b\u7dad\u5ea6\u62c6\u5206\u8f38\u51fa\u5f35\u91cf\u3002\u5728\u4e0a\u9762\u7684\u6f14\u793a\u4e2d\uff0c\u8f38\u5165\u5f35\u91cf\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u7232 1\uff08\u4f86\u81ea\u8acb\u6c42 1\uff09\uff0c\u4ee5\u53ca\u8acb\u6c42 2 \u4e2d\u7684 2\u3002\u56e0\u6b64\uff0c\u6bcf\u500b\u8f38\u51fa\u5f35\u91cf\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u5fc5\u9808\u7232 3\uff0c\u56e0\u7232 1+2=3\u3002\u8f38\u51fa\u5f35\u91cf `(3, 3, 4)` \u6eff\u8db3\u6b64\u8981\u6c42\u3002\u5982\u679c 3 \u4e0d\u662f\u6709\u6548\u7684\u6279\u6b21\u5927\u5c0f\uff0c\u4f46 4 \u662f\u6709\u6548\u7684\u6279\u6b21\u5927\u5c0f\uff0c\u5247\u6279\u8655\u7406\u64cd\u4f5c\u5fc5\u9808\u586b\u5145\u8f38\u5165\u7684\u7b2c 0 \u500b\u7dad\u5ea6\uff08\u5f9e 3 \u5230 4\uff09\u3002\u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u6bcf\u500b\u8f38\u51fa\u5f35\u91cf\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u5927\u5c0f\u5fc5\u9808\u7232 4\u3002\u4e0d\u6eff\u8db3\u6b64\u8981\u6c42\u5c07\u5c0e\u81f4\u932f\u8aa4\uff0c\u4f8b\u5982\uff1a `Batched output tensor's 0th dimension does not equal the sum of the 0th dimension sizes of the input tensors` \u3002\u5982\u9700\u6eff\u8db3\u9019\u4e9b\u8981\u6c42\uff0c\u8acb\u8003\u616e\u63d0\u4f9b\u4e00\u500b\u4e0d\u540c\u7684 [\u51fd\u6578](#function-batching) \u6216 [\u7c3d\u540d](#signature-batching) \u9032\u884c\u6279\u8655\u7406\u3002\u60a8\u53ef\u80fd\u9084\u9700\u8981\u4fee\u6539\u73fe\u6709\u51fd\u6578\u4ee5\u6eff\u8db3\u9019\u4e9b\u8981\u6c42\u3002\n\u5982\u679c\u8981\u6279\u91cf\u8655\u7406 [\u51fd\u6578](#function-batching) \uff0c\u8acb\u78ba\u4fdd\u5176 `@tf.function` \u7684 input_signature \u7684\u5f62\u72c0\u5728\u7b2c 0 \u500b\u7dad\u5ea6\uff08\u4e5f\u7a31\u7232\u6279\u91cf\u7dad\u5ea6\uff09\u4e2d\u5747\u5177\u6709 `None` \u3002\u5982\u679c\u8981\u6279\u91cf\u8655\u7406 [\u7c3d\u540d](#signature-batching) \uff0c\u8acb\u78ba\u4fdd\u5176\u6240\u6709\u8f38\u5165\u5728\u7b2c 0 \u500b\u7dad\u5ea6\u4e2d\u5747\u7232 -1\u3002\nBatchFunction \u64cd\u4f5c\u4e0d\u652f\u6301\u5c07 `SparseTensors` \u4f5c\u7232\u8f38\u5165\u6216\u8f38\u51fa\u3002\u5728\u5167\u90e8\uff0c\u6bcf\u500b\u7a00\u758f\u5f35\u91cf\u90fd\u8868\u793a\u7232\u4e09\u500b\u55ae\u7368\u7684\u5f35\u91cf\uff0c\u53ef\u4ee5\u5177\u6709\u4e0d\u540c\u7684\u7b2c 0 \u500b\u7dad\u5ea6\u5927\u5c0f\u3002", "guide": "Cloud TPU"}