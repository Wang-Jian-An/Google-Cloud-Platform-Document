{"title": "Cloud TPU - Training NCF on Cloud TPU (TF 2.x)", "url": "https://cloud.google.com/tpu/docs/tutorials/ncf-2.x", "abstract": "# Cloud TPU - Training NCF on Cloud TPU (TF 2.x)\n", "content": "## OverviewThis is an implementation of the Neural Collaborative Filtering (NCF) framework using a Neural Matrix Factorization (NeuMF) model as described in the [Neural Collaborative Filtering paper](https://arxiv.org/abs/1708.05031) . The current implementation is based on the code from the authors' NCF code and the Stanford implementation in the MLPerf Repo.\nNCF is a general framework for collaborative filtering of recommendations in which a neural network architecture is used to model user-item interactions. Unlike traditional models, NCF does not resort to Matrix Factorization (MF) with an inner product on latent features of users and items. It replaces the inner product with a multi-layer perceptron that can learn an arbitrary function from data.\nTwo implementations of NCF are Generalized Matrix Factorization (GMF) and Multi-Layer Perceptron (MLP). GMF applies a linear kernel to model the latent feature interactions, and MLP uses a nonlinear kernel to learn the interaction function from data. NeuMF is a fused model of GMF and MLP to better model complex user-item interactions, and unifies the strengths of linearity of MF and non-linearality of MLP for modeling the user-item latent structures. NeuMF allows GMF and MLP to learn separate embeddings, and combines the two models by concatenating their last hidden layer. [neumf_model.py](https://github.com/tensorflow/models/blob/master/official/recommendation/neumf_model.py) defines the architecture details.\nThe instructions below assume you are already familiar with training a model on Cloud TPU. If you are new to Cloud TPU, refer to the [Quickstart](/tpu/docs/quickstart) for a basic introduction.\n **Warning:** NCF uses a third-party dataset. Google provides no representation, warranty, or other guarantees about the validity or any other aspects of this dataset.## DatasetThe MovieLens datasets are used for model training and evaluation. Specifically, we use two datasets: ml-1m (short for MovieLens 1 million) and ml-20m (short for MovieLens 20 million).\n### ml-1mml-1m dataset contains 1,000,209 anonymous ratings of approximately 3,706 movies made by 6,040 users who joined MovieLens in 2000. All ratings are contained in the file \"ratings.dat\" without a header row, and are in the following format:\n`UserID::MovieID::Rating::Timestamp`- UserIDs range between 1 and 6040.\n- MovieIDs range between 1 and 3952.\n- Ratings are made on a 5-star scale (whole-star ratings only).\n### ml-20mml-20m dataset contains 20,000,263 ratings of 26,744 movies by 138493 users. All ratings are contained in the file \"ratings.csv\". Each line of this file after the header row represents a single user's rating of a movie, and has the following format:\n`userId,movieId,rating,timestamp`\nThe lines within this file are ordered first by userId, then, within user, by movieId. Ratings are made on a 5-star scale, with half-star increments (0.5 stars - 5.0 stars). In both datasets, the timestamp is represented in seconds since midnight Coordinated Universal Time (UTC) of January 1, 1970. Each user has at least 20 ratings.\n## Objectives\n- Create a Cloud Storage bucket to hold your dataset and model output\n- Prepare the MovieLens dataset\n- Set up a Compute Engine VM and Cloud TPU node for training and evaluation\n- Run training and evaluation\n## CostsIn this document, you use the following billable components of Google Cloud:- Compute Engine\n- Cloud TPU\n- Cloud Storage\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \n## Before you begin **Important:** You can use this tutorial with either the TPU VM or the TPU Node configuration. The two VM architectures are described in [System Architecture](/tpu/docs/system-architecture-tpu-vm) . The `gcloud` commands you use depend on the TPU configuration you are using. In this tutorial, each `gcloud` command is shown in a tabbed section. Choose the tab for the TPU configuration you want to use and the web page shows the appropriate `gcloud` command. Unless you know you need to use TPU Nodes, we recommend using TPU VMs.\nBefore starting this tutorial, check that your Google Cloud project is correctly set up.- This walkthrough uses billable components of Google Cloud. Check the [Cloud TPU pricing page](/tpu/docs/pricing) to  estimate your costs. Be sure to [clean up](#clean_up) resources you create when you've finished with them to avoid unnecessary  charges.\n## Set up your resourcesThis section provides information on setting up Cloud Storage, VM, and Cloud TPU resources for this tutorial.\n **Important: ** Set up all resources in the same region/zone to reduce network latency and network costs.- Open a Cloud Shell window. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Create an environment variable for your project's ID.```\nexport PROJECT_ID=project-id\n```\n- Configure Google Cloud CLI to use the project where you want to create the Cloud TPU.```\ngcloud config set project ${PROJECT_ID}\n```The first time you run this command in a new Cloud Shell VM, an `Authorize Cloud Shell` page is displayed. Click `Authorize` at the bottom of the page to allow `gcloud` to make API calls with your credentials.\n- Create a Service Account for the Cloud TPU project.```\ngcloud beta services identity create --service tpu.googleapis.com --project $PROJECT_ID\n```The command returns a Cloud TPU Service Account with following format:```\nservice-PROJECT_NUMBER@cloud-tpu.iam.gserviceaccount.com\n```\n- Create a Cloud Storage bucket using the following command: **Note:** In the following command, replace with the name you want to assign to your bucket.```\ngsutil mb -p ${PROJECT_ID} -c standard -l europe-west4 gs://bucket-name\n```This Cloud Storage bucket stores the data you use to train your model and the training results. The `gcloud` command used in this tutorial to set up the TPU also sets up default permissions for the Cloud TPU Service Account you set up in the previous step. If you want finer-grain permissions, review the [access level permissions](/tpu/docs/storage-buckets) .The bucket location must be in the same region as your virtual machine (VM) and your TPU node. VMs and TPU nodes are located in [specific zones](/tpu/docs/types-zones#types) , which are subdivisions within a region.\n- Launch a Compute Engine VM and Cloud TPU using the `gcloud` command. The command you use depends on whether you are using TPU VMs or TPU nodes. For more information on the two VM architecture, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) .\n```\n$ gcloud compute tpus tpu-vm create ncf-tutorial \\--zone=europe-west4-a \\--accelerator-type=v3-8 \\--version=tpu-vm-tf-2.16.1-pjrt\n``````\n$ gcloud compute tpus execution-groups create \u00a0\\\u00a0--zone=europe-west4-a \\\u00a0--name=ncf-tutorial \\\u00a0--accelerator-type=v3-8 \\\u00a0--machine-type=n1-standard-8 \\\u00a0--disk-size=300 \\\u00a0--tf-version=2.12.0\n``` **Note:** If you have more than one project, you must specify the project ID with the `--project` flag.For more information on the `gcloud` command, see the [gcloud Reference](/sdk/gcloud/reference) . **Note:** The first time you run `gcloud compute tpus` on a project it takes approximately 5 minutes to perform startup tasks such as SSH key propagation and API turnup.\n- If you are not automatically logged in to the Compute Engine instance, log in by running the following `ssh` command. When you are logged into the VM, your shell prompt changes from `username@projectname` to `username@vm-name` :\n```\ngcloud compute tpus tpu-vm ssh ncf-tutorial --zone=europe-west4-a\n```\n```\ngcloud compute ssh ncf-tutorial --zone=europe-west4-a\n```\n **Key Point:** From this point on, a prefix of **(vm) $** means you should run the command on the Compute Engine VM instance.\n## Prepare the data\n- Add an environment variable for your storage bucket. Replace with your bucket name.```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name\n```\n- Add an environment variable for the data directory.```\n(vm)$ export DATA_DIR=${STORAGE_BUCKET}/ncf_data\n```\n- Set up the model location and set the `PYTHONPATH` environment variable.\n```\n(vm)$ git clone https://github.com/tensorflow/models.git(vm)$ pip3 install -r models/official/requirements.txt\n```\n```\n(vm)$ export PYTHONPATH=\"${PWD}/models:${PYTHONPATH}\"\n```\n```\n(vm)$ export PYTHONPATH=\"${PYTHONPATH}:/usr/share/models\"(vm)$ pip3 install -r /usr/share/models/official/requirements.txt\n```\n- Change to directory that stores the model processing files:\n```\n(vm)$ cd ~/models/official/recommendation\n```\n```\n(vm)$ cd /usr/share/models/official/recommendation\n```\n- Generate training and evaluation data for the ml-20m dataset in DATA_DIR: **Note:** You might want to prepend the download command with `nohup` or use [screen](https://linuxize.com/post/how-to-use-linux-screen/) to avoid having the download exit if the Cloud Shell disconnects.```\n(vm)$ python3 create_ncf_data.py \\\u00a0 \u00a0 --dataset ml-20m \\\u00a0 \u00a0 --num_train_epochs 4 \\\u00a0 \u00a0 --meta_data_file_path ${DATA_DIR}/metadata \\\u00a0 \u00a0 --eval_prebatch_size 160000 \\\u00a0 \u00a0 --data_dir ${DATA_DIR}\n```\nThis script generates and preprocesses the dataset on your VM. Preprocessing converts the data into TFRecord format required by the model. The download and pre-processing takes approximately 25 minutes and generates output similar to the following:\n```\nI0804 23:03:02.370002 139664166737728 movielens.py:124] Successfully downloaded /tmp/tmpicajrlfc/ml-20m.zip 198702078 bytes\nI0804 23:04:42.665195 139664166737728 data_preprocessing.py:223] Beginning data preprocessing.\nI0804 23:04:59.084554 139664166737728 data_preprocessing.py:84] Generating user_map and item_map...\nI0804 23:05:20.934210 139664166737728 data_preprocessing.py:103] Sorting by user, timestamp...\nI0804 23:06:39.859857 139664166737728 data_preprocessing.py:194] Writing raw data cache.\nI0804 23:06:42.375952 139664166737728 data_preprocessing.py:262] Data preprocessing complete. Time: 119.7 sec.\n%lt;BisectionDataConstructor(Thread-1, initial daemon)>\nGeneral:\n Num users: 138493\n Num items: 26744\nTraining:\n Positive count:   19861770\n Batch size:    99000\n Batch count per epoch: 1004\nEval:\n Positive count:   138493\n Batch size:    160000\n Batch count per epoch: 866\nI0804 23:07:14.137242 139664166737728 data_pipeline.py:887] Negative total vector built. Time: 31.8 seconds\nI0804 23:11:25.013135 139664166737728 data_pipeline.py:588] Epoch construction complete. Time: 250.9 seconds\nI0804 23:15:46.391308 139664166737728 data_pipeline.py:674] Eval construction complete. Time: 261.4 seconds\nI0804 23:19:54.345858 139664166737728 data_pipeline.py:588] Epoch construction complete. Time: 248.0 seconds\nI0804 23:24:09.182484 139664166737728 data_pipeline.py:588] Epoch construction complete. Time: 254.8 seconds\nI0804 23:28:26.224653 139664166737728 data_pipeline.py:588] Epoch construction complete. Time: 257.0 seconds\n```\n## Set up and start training the Cloud TPU\n- Set the Cloud TPU name variable.\n```\n(vm)$ export TPU_NAME=local\n```\n```\n(vm)$ export TPU_NAME=ncf-tutorial\n```\n## Run the training and evaluationThe following script runs a sample training for 3 epochs,- Add an environment variable for the Model directory to save checkpoints and TensorBoard summaries:```\n(vm)$ export MODEL_DIR=${STORAGE_BUCKET}/ncf\n```\n- When creating your TPU, if you set the `--version` parameter to a version ending with `-pjrt` , set the following environment variables to enable the PJRT runtime:```\n\u00a0 (vm)$ export NEXT_PLUGGABLE_DEVICE_USE_C_API=true\u00a0 (vm)$ export TF_PLUGGABLE_DEVICE_LIBRARY_PATH=/lib/libtpu.so\n```\n- Run the following command to train the NCF model:```\n(vm)$ python3 ncf_keras_main.py \\\u00a0 \u00a0 \u00a0--model_dir=${MODEL_DIR} \\\u00a0 \u00a0 \u00a0--data_dir=${DATA_DIR} \\\u00a0 \u00a0 \u00a0--train_dataset_path=${DATA_DIR}/training_cycle_*/* \\\u00a0 \u00a0 \u00a0--eval_dataset_path=${DATA_DIR}/eval_data/* \\\u00a0 \u00a0 \u00a0--input_meta_data_path=${DATA_DIR}/metadata \\\u00a0 \u00a0 \u00a0--learning_rate=3e-5 \\\u00a0 \u00a0 \u00a0--train_epochs=3 \\\u00a0 \u00a0 \u00a0--dataset=ml-20m \\\u00a0 \u00a0 \u00a0--eval_batch_size=160000 \\\u00a0 \u00a0 \u00a0--learning_rate=0.00382059 \\\u00a0 \u00a0 \u00a0--beta1=0.783529 \\\u00a0 \u00a0 \u00a0--beta2=0.909003 \\\u00a0 \u00a0 \u00a0--epsilon=1.45439e-07 \\\u00a0 \u00a0 \u00a0--dataset=ml-20m \\\u00a0 \u00a0 \u00a0--num_factors=64 \\\u00a0 \u00a0 \u00a0--hr_threshold=0.635 \\\u00a0 \u00a0 \u00a0--keras_use_ctl=true \\\u00a0 \u00a0 \u00a0--layers=256,256,128,64 \\\u00a0 \u00a0 \u00a0--use_synthetic_data=false \\\u00a0 \u00a0 \u00a0--distribution_strategy=tpu \\\u00a0 \u00a0 \u00a0--download_if_missing=false\u00a0\n```\nThe training and evaluation takes about 2 minutes and generates final output similar to:\n```\nResult is {'loss': <tf.Tensor: shape=(), dtype=float32, numpy=0.10950611>,\n'train_finish_time': 1618016422.1377568, 'avg_exp_per_second': 3062557.5070816963}\n```\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- Disconnect from the Compute Engine instance, if you have not already done so:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete your Cloud TPU and Compute Engine resources. The command you use to delete your resources depends upon whether you are using TPU VMs or TPU Nodes. For more information, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) .\n```\n$ gcloud compute tpus tpu-vm delete ncf-tutorial \\--zone=europe-west4-a\n```\n```\n$ gcloud compute tpus execution-groups delete ncf-tutorial \\--zone=europe-west4-a\n```\n- Verify the resources have been deleted by running `gcloud compute tpus execution-groups list` . The deletion might take several minutes. A response like the one below indicates your instances have been successfully deleted.\n```\n$ gcloud compute tpus tpu-vm list \\--zone=europe-west4-a\n```\n```\n$ gcloud compute tpus execution-groups list --zone=europe-west4-a\n```\n```\nListed 0 items.\n```\n- Run `gsutil` as shown, replacing with the name of the Cloud Storage bucket you created for this tutorial:```\n$ gsutil rm -r gs://bucket-name\n```\n## What's nextThe TensorFlow Cloud TPU tutorials generally train the model using a sample dataset. The results of this training are not usable for inference. To use a model for inference, you can train the data on a publicly available dataset or your own dataset. TensorFlow models trained on Cloud TPUs generally require datasets to be in [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format.\nYou can use the [dataset conversion toolsample](/tpu/docs/classification-data-conversion) to convert an image classification dataset into TFRecord format. If you are not using an image classification model, you will have to convert your dataset to [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format yourself. For more information, see [TFRecord andtf.Example](https://www.tensorflow.org/tutorials/load_data/tfrecord) .\n### Hyperparameter tuningTo improve the model's performance with your dataset, you can tune the model's hyperparameters. You can find information about hyperparameters common to all TPU supported models on [GitHub](https://github.com/tensorflow/tpu/tree/master/models/hyperparameters) . Information about model-specific hyperparameters can be found in the [sourcecode](https://github.com/tensorflow/tpu/tree/master/models/official) for each model. For more information on hyperparameter tuning, see [Overview ofhyperparameter tuning](/vertex-ai/docs/training/hyperparameter-tuning-overview) and [Tunehyperparameters](https://developers.google.com/machine-learning/guides/text-classification/step-5) .\n### InferenceOnce you have trained your model, you can use it for inference (also called prediction). You can use the [Cloud TPU inference convertertool](/tpu/docs/v5e-inference-converter) to prepare and optimize a TensorFlow model for inference on Cloud TPU v5e. For more information about inference on Cloud TPU v5e, see [Cloud TPU v5e inferenceintroduction](/tpu/docs/v5e-inference) .- Learn more about [ctpu](https://github.com/tensorflow/tpu/tree/master/tools/ctpu) , including how to install it on a local machine.\n- Explore the [TPU tools inTensorBoard](/tpu/docs/cloud-tpu-tools) .", "guide": "Cloud TPU"}