{"title": "Cloud TPU - Training on Cloud TPU (TF 2.x)", "url": "https://cloud.google.com/tpu/docs/tutorials/resnet-rs-2.x", "abstract": "# Cloud TPU - Training on Cloud TPU (TF 2.x)\nThis tutorial shows you how to train a Keras ResNet-RS model on Cloud TPU using `tf.distribute.TPUStrategy` . For more information about ResNet-RS, see [Revisiting ResNets: Improved Training and Scaling Strategies](https://arxiv.org/abs/2103.07579) .\nIf you are not familiar with Cloud TPU, it is strongly recommended that you go through the [quickstart](https://cloud.google.com/tpu/docs/quickstart) to learn how to create a TPU and a Compute Engine VM.\n **Warning:** This tutorial uses a third-party dataset. Google provides no representation, warranty, or other guarantees about the validity, or any other aspects of this dataset.\n", "content": "## Objectives\n- Create a Cloud Storage bucket to hold your dataset and model output.\n- Prepare a fake imagenet dataset that is similar to the ImageNet dataset.\n- Run the training job.\n- Verify the output results.\n## CostsIn this document, you use the following billable components of Google Cloud:- Compute Engine\n- Cloud TPU\n- Cloud Storage\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \n## Before you beginBefore starting this tutorial, check that your Google Cloud project is correctly set up.- This walkthrough uses billable components of Google Cloud. Check the [Cloud TPU pricing page](/tpu/docs/pricing) to  estimate your costs. Be sure to [clean up](#clean-up) resources you create when you've finished with them to avoid unnecessary  charges.\n## Set up your resourcesThis section provides information on setting up Cloud Storage bucket, VM, and Cloud TPU resources for tutorials.\n **Important: ** Set up all resources (Compute Engine VM, Cloud TPU, and Cloud Storage bucket) in the same region/zone to reduce network latency and network costs. VMs and TPU nodes are located in [specific zones](/tpu/docs/types-zones#types) , which are subdivisions within a region.- Open a Cloud Shell window. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Create a variable for your project's ID.```\nexport PROJECT_ID=project-id\n```\n- Configure Google Cloud CLI to use the project where you want to create Cloud TPU.```\ngcloud config set project ${PROJECT_ID}\n```The first time you run this command in a new Cloud Shell VM, an `Authorize Cloud Shell` page is displayed. Click `Authorize` at the bottom of the page to allow `gcloud` to make Google Cloud API calls with your credentials.\n- Create a Service Account for the Cloud TPU project.```\ngcloud beta services identity create --service tpu.googleapis.com --project $PROJECT_ID\n```The command returns a Cloud TPU Service Account with following format:```\nservice-PROJECT_NUMBER@cloud-tpu.iam.gserviceaccount.com\n```\n- Create a Cloud Storage bucket using the following command:```\ngsutil mb -p ${PROJECT_ID} -c standard -l europe-west4 gs://bucket-name\n```This Cloud Storage bucket stores the data you use to train your model and the training results. The `gcloud compute tpus execution-groups` tool used in this tutorial sets up default permissions for the Cloud TPU Service Account you set up in the previous step. If you want finer-grain permissions, review the [access level permissions](/tpu/docs/storage-buckets) .The bucket location must be in the same region as your Compute Engine (VM) and your Cloud TPU node.\n- Launch a Compute Engine VM using the `gcloud` command.```\n$ gcloud compute tpus execution-groups create \\\u00a0--vm-only \\\u00a0--name=resnet-rs-tutorial \\\u00a0--zone=europe-west4-a \\\u00a0--disk-size=300 \\\u00a0--machine-type=n1-standard-16 \\\u00a0--tf-version=2.12.0\u00a0\n```For more information on the `gcloud` command, see the [gcloud Reference](/sdk/gcloud/reference) .\n- When prompted, press to create your Cloud TPU resources. **Note:** The first time you run `gcloud compute tpus execution-groups` on a project it takes about 5 minutes to perform startup tasks such as SSH key propagation and API turnup.When the `gcloud compute tpus execution-groups` command has finished executing, verify that your shell prompt has changed from `username@projectname` to `username@vm-name` . This change shows that you are now logged into your Compute Engine VM. **Note:** If you are not connected to the Compute Engine instance, you can connect by running the following command:```\ngcloud compute ssh resnet-rs-tutorial --zone=europe-west4-a\n```As you continue these instructions, run each command that begins with `(vm)$` in your Compute Engine instance.\n- Install necessary packages.```\n$ pip3 install tensorflow-text==2.8.1 --no-deps\n```\n## Set Cloud Storage bucket variablesSet up the following environment variables, replacing with the name of your Cloud Storage bucket:\n```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name\n```\n```\n(vm)$ export MODEL_DIR=${STORAGE_BUCKET}/resnet-rs-2x(vm)$ export IMAGENET_DIR=gs://cloud-tpu-test-datasets/fake_imagenet(vm)$ export PYTHONPATH=/usr/share/models(vm)$ export TPU_NAME=resnet-rs-tutorial\n```\nThe training application expects your training data to be accessible in Cloud Storage. The training application also uses your Cloud Storage bucket to store checkpoints during training.## Cloud TPU single device training and evaluation **Note:** Do you want to train the model using a Cloud TPU pod? See [ TPU Pod training.](#pod-training) \nImageNet is an image database. The images in the database are organized into a hierarchy, with each node of the hierarchy depicted by hundreds and thousands of images.\nThis tutorial uses a demonstration version of the full ImageNet dataset, referred to as . This demonstration version allows you to test the tutorial, while reducing the storage and time requirements typically associated with running a model against the full ImageNet database.\nThe fake_imagenet dataset is at this location on Cloud Storage:\n```\ngs://cloud-tpu-test-datasets/fake_imagenet\n```\nThe fake_imagenet dataset is only useful for understanding how to use a Cloud TPU and validating end-to-end performance. The accuracy numbers and saved model will not be meaningful.\nFor information on how to download and process the full ImageNet dataset, see [Downloading, preprocessing, and uploading the ImageNet dataset](/tpu/docs/imagenet-setup) .\n **Caution:** For this tutorial, make sure you **don't** set the `STORAGE_BUCKET` environment variable to the path of the fake_imagenet dataset. You can read from `gs://cloud-tpu-test-datasets` but you can't write to it. As a result, you can't use it to write out training logs. Make sure the `STORAGE_BUCKET` environment variable is set to your own Cloud Storage bucket, as shown above.\n **Note:** If you want to monitor the model's output and performance, follow the guide to [setting up TensorBoard](/tpu/docs/tensorboard-setup) .- Create a Cloud TPU using the `gcloud` command.```\n$ gcloud compute tpus execution-groups create \\\u00a0--tpu-only \\\u00a0--accelerator-type=v3-8 \u00a0\\\u00a0--name=resnet-rs-tutorial \\\u00a0--zone=europe-west4-a \\\u00a0--tf-version=2.12.0\n```\n- Set the `TPU_NAME` name variable.```\n(vm)$ export TPU_NAME=resnet-rs-tutorial\n```\n- Run the training script.```\n(vm)$ python3 /usr/share/models/official/vision/beta/train.py \\--experiment=resnet_rs_imagenet \\--mode=train_and_eval \\--model_dir=$MODEL_DIR \\--tpu=$TPU_NAME \\--config_file=/usr/share/models/official/vision/beta/configs/experiments/image_classification/imagenet_resnetrs50_i160.yaml \\--params_override=\"task.train_data.input_path=$IMAGENET_DIR/train*, task.validation_data.input_path=$IMAGENET_DIR/valid*, trainer.train_steps=100\"\n```\nThis will train ResNet-RS for 100 training steps and will complete on a v3-8 TPU node in less than 5 minutes. The training script output should include text like:\n```\n{\n 'train_loss': 1.435225,\n 'train_accuracy': 0.00084427913\n}\n```\nThe training script also performs evaluation. The evaluation output should contain text like this:\n```\nRun stats:\n{\n 'eval_loss': 0.861013,\n 'eval_acc': 0.001,\n 'train_loss': 1.435225,\n 'train_acc': 0.00084427913,\n 'step_timestamp_log': [ 'BatchTimestamp<batch_index: 0,\n timestamp: 1606330585.7613473>',\n 'BatchTimestamp<batch_index: 500,\n timestamp: 1606330883.8486104>',\n 'BatchTimestamp<batch_index: 1000,\n timestamp: 1606331119.515312>',\n 'BatchTimestamp<batch_index: 1251,\n timestamp: 1606331240.7516596>'\n ],\n 'train_finish_time': 1606331296.395158,\n 'avg_exp_per_second': 1951.6983246161021\n}\n```\nTo train the ResNet-RS model to convergence, omit the `trainer.train_steps=100` argument as shown in the following script. Training and evaluation are done together.\n```\n(vm)$ python3 /usr/share/models/official/vision/beta/train.py \\\u00a0 --experiment=resnet_rs_imagenet \\\u00a0 --mode=train_and_eval \\\u00a0 --model_dir=$MODEL_DIR \\\u00a0 --tpu=$TPU_NAME \\\u00a0 --config_file=/usr/share/models/official/vision/beta/configs/experiments/image_classification/imagenet_resnetrs50_i160.yaml \\\u00a0 --params_override=\"task.train_data.input_path=$IMAGENET_DIR/train*, task.validation_data.input_path=$IMAGENET_DIR/valid*\"\n```Since the training and evaluation was done on the fake_imagenet dataset, the output results do not reflect actual output that would appear if the training and evaluation was performed on a real dataset.\nAt this point, you can either conclude this tutorial and [clean up](#clean-up) your Google Cloud resources, or you can further explore running the model on Cloud TPU Pods.## Use larger modelsResNet-RS provides a family of models of different sizes with larger models typically being more accurate at the cost of more compute. For more information, see [Revisiting ResNets: Improved Training and Scaling Strategies](https://arxiv.org/abs/2103.07579) .\nYou can choose the size of the model to train by changing the config_file in the following command.\n```\n(vm)$ python3 /usr/share/models/official/vision/beta/train.py \\\u00a0 --experiment=resnet_rs_imagenet \\\u00a0 --mode=train_and_eval \\\u00a0 --model_dir=$MODEL_DIR \\\u00a0 --tpu=$TPU_NAME \\\u00a0 --config_file=/usr/share/models/official/vision/beta/configs/experiments/image_classification/imagenet_resnetrs200_i256.yaml \\\u00a0 --params_override=\"task.train_data.input_path=$IMAGENET_DIR/train*, task.validation_data.input_path=$IMAGENET_DIR/valid*\"\n```\nThe available configs are in `/usr/share/models/official/vision/beta/configs/experiments/` on your VM.## Scale your model with Cloud TPU PodsTraining your model on Cloud TPU Pods may require some changes to your training script. For information, see [Training on TPU Pods](/tpu/docs/training-on-tpu-pods) .\nYou can get results faster by scaling your model with Cloud TPU Pods. The fully supported ResNet-RS-50 model can work with the following Pod slices:- v2-32\n- v3-32\nWith Cloud TPU Pods, training and evaluation are done together.\n### Training with Cloud TPU Pods\n- Delete the Cloud TPU resource you created for training the model on a single device.```\n(vm)$ gcloud compute tpus execution-groups delete resnet-rs-tutorial \\\u00a0 --zone=europe-west4-a \\\u00a0 --tpu-only\n```\n- Create a new Cloud TPU resource for the Pod, using the `accelerator-type` parameter to specify the Pod slice you want to use. For example, the following command uses a v3-32 Pod slice.```\n(vm)$ gcloud compute tpus execution-groups \u00a0create --name=resnet-rs-tutorial \\\u00a0 --accelerator-type=v3-32 \u00a0\\\u00a0 --zone=europe-west4-a \\\u00a0 --tf-version=2.12.0 \\\u00a0 --tpu-only\n```\n- Run the training script.```\n(vm)$ python3 /usr/share/models/official/vision/beta/train.py \\--experiment=resnet_rs_imagenet \\--mode=train_and_eval \\--model_dir=$MODEL_DIR \\--tpu=$TPU_NAME \\--config_file=/usr/share/models/official/vision/beta/configs/experiments/image_classification/imagenet_resnetrs50_i160.yaml \\--params_override=\"task.train_data.input_path=$IMAGENET_DIR/train*, task.validation_data.input_path=$IMAGENET_DIR/valid*, trainer.train_steps=100\"\n```\nThis will train ResNet-RS for 100 training steps and will complete on a v3-8 TPU node in less than 5 minutes. The training script output should include text like:\n```\n{\n 'train_loss': 1.435225,\n 'train_accuracy': 0.00084427913\n}\n```\nThe training script also performs evaluation. The evaluation output should contain text like this:\n```\nRun stats:\n{\n 'eval_loss': 0.861013,\n 'eval_acc': 0.001,\n 'train_loss': 1.435225,\n 'train_acc': 0.00084427913,\n 'step_timestamp_log': [ 'BatchTimestamp<batch_index: 0,\n timestamp: 1606330585.7613473>',\n 'BatchTimestamp<batch_index: 500,\n timestamp: 1606330883.8486104>',\n 'BatchTimestamp<batch_index: 1000,\n timestamp: 1606331119.515312>',\n 'BatchTimestamp<batch_index: 1251,\n timestamp: 1606331240.7516596>'\n ],\n 'train_finish_time': 1606331296.395158,\n 'avg_exp_per_second': 1951.6983246161021\n}\n```\nTraining and evaluation are done together. Each epoch has 1251 steps for a total of 112590 training steps and 48 evaluation steps.\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- Disconnect from the Compute Engine instance, if you have not already done so:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- In your Cloud Shell, use the following command to delete your Compute Engine VM and Cloud TPU:```\n$ gcloud compute tpus execution-groups delete resnet-rs-tutorial \\\u00a0 --zone=europe-west4-a\n```\n- Verify the resources have been deleted by running `gcloud compute tpus execution-groups list` . The deletion might take several minutes. A response like the one below indicates your instances have been successfully deleted.```\n$ gcloud compute tpus execution-groups list \\\u00a0--zone=europe-west4-a\n```You should see an empty list of TPUs like the following:```\n NAME    STATUS\n```\n- Delete your Cloud Storage bucket using `gsutil` as shown below. Replace with the name of your Cloud Storage bucket.```\n$ gsutil rm -r gs://bucket-name\n```\n **Note:** For free storage limits and other pricing information, see the [Cloud Storage pricing guide](/storage/pricing) .\n## What's nextThe TensorFlow Cloud TPU tutorials generally train the model using a sample dataset. The results of this training are not usable for inference. To use a model for inference, you can train the data on a publicly available dataset or your own dataset. TensorFlow models trained on Cloud TPUs generally require datasets to be in [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format.\nYou can use the [dataset conversion toolsample](/tpu/docs/classification-data-conversion) to convert an image classification dataset into TFRecord format. If you are not using an image classification model, you will have to convert your dataset to [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format yourself. For more information, see [TFRecord andtf.Example](https://www.tensorflow.org/tutorials/load_data/tfrecord) .\n### Hyperparameter tuningTo improve the model's performance with your dataset, you can tune the model's hyperparameters. You can find information about hyperparameters common to all TPU supported models on [GitHub](https://github.com/tensorflow/tpu/tree/master/models/hyperparameters) . Information about model-specific hyperparameters can be found in the [sourcecode](https://github.com/tensorflow/tpu/tree/master/models/official) for each model. For more information on hyperparameter tuning, see [Overview ofhyperparameter tuning](/vertex-ai/docs/training/hyperparameter-tuning-overview) and [Tunehyperparameters](https://developers.google.com/machine-learning/guides/text-classification/step-5) .\n### InferenceOnce you have trained your model, you can use it for inference (also called prediction). You can use the [Cloud TPU inference convertertool](/tpu/docs/v5e-inference-converter) to prepare and optimize a TensorFlow model for inference on Cloud TPU v5e. For more information about inference on Cloud TPU v5e, see [Cloud TPU v5e inferenceintroduction](/tpu/docs/v5e-inference) .", "guide": "Cloud TPU"}