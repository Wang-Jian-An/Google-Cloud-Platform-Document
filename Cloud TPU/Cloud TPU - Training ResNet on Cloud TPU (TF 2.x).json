{"title": "Cloud TPU - Training ResNet on Cloud TPU (TF 2.x)", "url": "https://cloud.google.com/tpu/docs/tutorials/resnet-2.x", "abstract": "# Cloud TPU - Training ResNet on Cloud TPU (TF 2.x)\nThis tutorial shows you how to train a Keras ResNet model on Cloud TPU using `tf.distribute.TPUStrategy` .\nIf you are not familiar with Cloud TPU, it is strongly recommended that you go through the [quickstart](https://cloud.google.com/tpu/docs/quick-starts) for your framework to learn how to create a TPU and a Compute Engine VM.\n **Warning:** This tutorial uses a third-party dataset. Google provides no representation, warranty, or other guarantees about the validity, or any other aspects of this dataset.\n", "content": "## Objectives\n- Create a Cloud Storage bucket to hold your dataset and model output.\n- Prepare a fake imagenet dataset that is similar to the ImageNet dataset.\n- Run the training job.\n- Verify the output results.\n## CostsIn this document, you use the following billable components of Google Cloud:- Compute Engine\n- Cloud TPU\n- Cloud Storage\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \n## Before you begin **Important:** You can use this tutorial with either the TPU VM or the TPU Node configuration. The two VM architectures are described in [System Architecture](/tpu/docs/system-architecture-tpu-vm) . The gcloud commands you use depend on the TPU configuration you are using. In this tutorial, each gcloud command is shown in a tabbed section. Choose the tab for the TPU configuration you want to use and the web page shows the appropriate gcloud command. Unless you know you need to use TPU Nodes, we recommend using TPU VMs.\nBefore starting this tutorial, check that your Google Cloud project is correctly set up.- This walkthrough uses billable components of Google Cloud. Check the [Cloud TPU pricing page](/tpu/docs/pricing) to  estimate your costs. Be sure to [clean up](#clean-up) resources you create when you've finished with them to avoid unnecessary  charges.\n## Cloud TPU single device training **Note:** Do you want to train the model using a Cloud TPU pod? See [ TPU Pod training.](#pod-training) \nThis section provides information on setting up Cloud Storage bucket, VM, and Cloud TPU resources for single device training.\n **Important: ** Set up all resources (Compute Engine VM, Cloud TPU, and Cloud Storage bucket) in the same region/zone to reduce network latency and network costs. VMs and TPU nodes are located in [specific zones](/tpu/docs/types-zones) , which are subdivisions within a region.- Open a Cloud Shell window. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Create a variable for your project's ID.```\n$ export PROJECT_ID=project-id\n```\n- Configure the Google Cloud CLI to use the project where you want to create Cloud TPU.```\n$ gcloud config set project ${PROJECT_ID}\n```The first time you run this command in a new Cloud Shell VM, an `Authorize Cloud Shell` page is displayed. Click `Authorize` at the bottom of the page to allow `gcloud` to make API calls with your credentials.\n- Create a Service Account for the Cloud TPU project.Service accounts allow the Cloud TPU service to access other Google Cloud services.```\n$ gcloud beta services identity create --service tpu.googleapis.com --project $PROJECT_ID\n```The command returns a Cloud TPU Service Account with following format:```\nservice-PROJECT_NUMBER@cloud-tpu.iam.gserviceaccount.com\n```\n- Create a Cloud Storage bucket using the following command:```\n$ gsutil mb -p ${PROJECT_ID} -c standard -l europe-west4 gs://bucket-name\n```This Cloud Storage bucket stores the data you use to train your model and the training results. The `gcloud` command used in this tutorial to set up the TPU also sets up default permissions for the Cloud TPU Service Account you set up in the previous step. If you want finer-grain permissions, review the [access level permissions](/tpu/docs/storage-buckets) .\n- Prepare your dataset or use ImageNet is an image database. The images in the database are organized into a hierarchy, with each node of the hierarchy depicted by hundreds and thousands of images.This tutorial uses a demonstration version of the full ImageNet dataset, referred to as . This demonstration version allows you to test the tutorial, while reducing the storage and time requirements typically associated with running a model against the full ImageNet database.The fake_imagenet dataset is at this location on Cloud Storage:```\ngs://cloud-tpu-test-datasets/fake_imagenet\n```The fake_imagenet dataset is only useful for understanding how to use a Cloud TPU and validating end-to-end performance. The accuracy numbers and saved model will not be meaningful.If you want to use the full ImageNet dataset, see [Downloading, preprocessing, and uploading the ImageNet dataset](/tpu/docs/imagenet-setup) . **Caution:** For this tutorial, make sure you **do not** set the `STORAGE_BUCKET` environment variable to the path of the fake_imagenet dataset. You can read from `gs://cloud-tpu-test-datasets` but you can't write to it. As a result, you can't use it to write out training logs. Make sure the `STORAGE_BUCKET` environment variable is set to your own Cloud Storage bucket.\n- Launch TPU resources using the `gcloud` command. The command you use depends on whether you are using TPU VMs or TPU nodes. For more information on the two VM architecture, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) . **Note:** The sample training shown below uses the TF-Vision modeling library for computer vision. See the [README](https://github.com/tensorflow/models/blob/master/official/vision/README.md) for more information about the TF-Vision modeling library.\n```\n$ gcloud compute tpus tpu-vm create resnet-tutorial \\--zone=us-central2-b \\--accelerator-type=v4-8 \\--version=tpu-vm-tf-2.16.1-pjrt\n``````\ngcloud compute tpus execution-groups create \\--project=${PROJECT_ID} \\--zoneus-central2-b \\--name=resnet-tutorial \\--disk-size=300 \\--machine-type=n1-standard-16 \\--accelerator-type=v3-8 \\--tf-version=2.12.0\n```For more information on the `gcloud` command, see the [gcloud Reference](/sdk/gcloud/reference) . **Note:** The first time you run `gcloud compute tpus execution-groups` on a project it takes about 5 minutes to perform startup tasks such as SSH key propagation and API turnup.\n- If you are not automatically logged in to the Compute Engine instance, log in by running the following `ssh` command. When you are logged into the VM, your shell prompt changes from `username@projectname` to `username@vm-name` :\n```\n$ gcloud compute tpus tpu-vm ssh resnet-tutorial --zone=us-central2-b\n```\n```\n$ gcloud compute ssh resnet-tutorial --zone=us-central2-b\n```\n **Key Point:** From this point on, a prefix of **(vm) $** means you should run the command on the Compute Engine VM instance.As you continue these instructions, run each command that begins with `(vm)$` in your VM session window.\n- Set the Cloud TPU name variable.\n```\n(vm)$ export TPU_NAME=local\n```\n```\n(vm)$ export TPU_NAME=resnet-tutorial\n```\n- Set Cloud Storage bucket variablesSet up the following environment variables, replacing with the name of your Cloud Storage bucket:```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name\n``````\n(vm)$ export MODEL_DIR=${STORAGE_BUCKET}/resnet-2x(vm)$ export DATA_DIR=gs://cloud-tpu-test-datasets/fake_imagenet\n```The training application expects your training data to be accessible in Cloud Storage. The training application also uses your Cloud Storage bucket to store checkpoints during training.\n- When creating your TPU, if you set the `--version` parameter to a version ending with `-pjrt` , set the following environment variables to enable the PJRT runtime:```\n\u00a0 (vm)$ export NEXT_PLUGGABLE_DEVICE_USE_C_API=true\u00a0 (vm)$ export TF_PLUGGABLE_DEVICE_LIBRARY_PATH=/lib/libtpu.so\n```\n- Install TensorFlow requirements.The command you use depends on whether you are using TPU VMs or TPU Nodes.\n```\n(vm)$ pip3 install -r /usr/share/tpu/models/official/requirements.txt \n```\n```\n(vm)$ pip3 install --user -r /usr/share/models/official/requirements.txt\n```\n- The ResNet training script requires an extra package. Install it now:```\n(vm)$ pip3 install --user tensorflow-model-optimization>=0.1.3\n```\n- Change to directory that stores the model:\n```\n(vm)$ cd /usr/share/tpu/tensorflow/resnet50_keras\n```\n```\n(vm)$ cd /usr/share/models\n```\n- Set the `PYTHONPATH` environment variable:\n```\n(vm)$ /usr/share/tpu/tensorflow/resnet50_keras\"\n```\n```\n(vm)$ export PYTHONPATH=\"${PYTHONPATH}:/usr/share/models\"\n```\n- Run the training script. This uses a fake_imagenet dataset and trains ResNet for 100 steps.\n```\n(vm)$ resnet50.py --tpu=local --data=gs://cloud-tpu-test-datasets/fake_imagenet\n```\n```\n(vm)$ python3 official/vision/train.py \\--tpu=${TPU_NAME} \\--experiment=resnet_imagenet \\--mode=train_and_eval \\--config_file=official/vision/configs/experiments/image_classification/imagenet_resnet50_tpu.yaml \\--model_dir=${MODEL_DIR} \\--params_override=\"task.train_data.input_path=${DATA_DIR}/train*, task.validation_data.input_path=${DATA_DIR}/validation*,task.train_data.global_batch_size=2048,task.validation_data.global_batch_size=2048,trainer.train_steps=100\"\n```\nThis will train ResNet for 100 steps and will complete on a v3-8 TPU node in approximately 3 minutes. At the end of the 100 steps, output similar to the following appears:\n```\nI0624 17:04:26.974905 140457742666816 controller.py:290] eval | step: 100 | eval time: 23.3 sec | output: \n {'accuracy': 0.0010141226,\n  'top_5_accuracy': 0.0051457332,\n  'validation_loss': 8.448798}\n eval | step: 100 | eval time: 23.3 sec | output: \n {'accuracy': 0.0010141226,\n  'top_5_accuracy': 0.0051457332,\n  'validation_loss': 8.448798}\n```\nYou have now completed the single-device training example. Use the following steps to delete the current single-device TPU resources.- Disconnect from the Compute Engine instance:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete the TPU resource.\n```\n$ gcloud compute tpus tpu-vm delete resnet-tutorial \\--zone=us-central2-b\n``````\n$ gcloud compute tpus execution-groups delete resnet-tutorial \\--zone=us-central2-b\n```\nAt this point, you can either conclude this tutorial and [clean up](#cleanup) , or you can continue and explore running the model on Cloud TPU Pods.## Scaling your model with Cloud TPU Pods **Important:** You can scale your model with either the TPU VM or the TPU Node configuration. The two VM architectures are described in [System Architecture](/tpu/docs/system-architecture-tpu-vm) . For Pod training, you only need to follow the instructions for your TPU configuration, TPU VM or TPU Node.\nTraining your model on Cloud TPU Pods may require some changes to your training script. For information, see [Training on TPU Pods](/tpu/docs/training-on-tpu-pods) .\n### TPU Pod training\n **Important: ** If you have already set up a Cloud TPU project, Service Account, storage bucket, and dataset for single device training, you can skip to [launching TPU resources](#launch-resources) .\nThis section provides information on setting up a Cloud Storage bucket and Cloud TPU resources for Pod training.\n **Important: ** Set up your Cloud TPU resources and your Cloud Storage bucket) in the same region/zone to reduce network latency and network costs. Cloud TPUs are located in [specific zones](/tpu/docs/types-zones#types) , which are subdivisions within a region.- Open a Cloud Shell window. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Create a variable for your project's ID.```\nexport PROJECT_ID=project-id\n```\n- Configure Google Cloud CLI to use the project where you want to create Cloud TPU.```\ngcloud config set project ${PROJECT_ID}\n```The first time you run this command in a new Cloud Shell VM, an `Authorize Cloud Shell` page is displayed. Click `Authorize` at the bottom of the page to allow `gcloud` to make Google Cloud API calls with your credentials.\n- Create a Service Account for the Cloud TPU project.```\ngcloud beta services identity create --service tpu.googleapis.com --project $PROJECT_ID\n```The command returns a Cloud TPU Service Account with following format:```\nservice-PROJECT_NUMBER@cloud-tpu.iam.gserviceaccount.com\n```\n- Create a Cloud Storage bucket using the following command or use a bucket you created earlier for your project:```\ngsutil mb -p ${PROJECT_ID} -c standard -l us-central2 gs://bucket-name\n```This Cloud Storage bucket stores the data you use to train your model and the training results. The `gcloud` command used in this tutorial sets up default permissions for the Cloud TPU Service Account you set up in the previous step. If you want finer-grain permissions, review the [access level permissions](/tpu/docs/storage-buckets) .The bucket location must be in the same region as your TPU VM.\n- Prepare your dataset or use ImageNet is an image database. The images in the database are organized into a hierarchy, with each node of the hierarchy depicted by hundreds and thousands of images.The default Pod training accesses a demonstration version of the full ImageNet dataset, referred to as . This demonstration version allows you to test Pod training, while reducing the storage and time requirements typically associated with training a model against the full ImageNet database.The fake_imagenet dataset is only useful for understanding how to use a Cloud TPU and validating end-to-end performance. The accuracy numbers and saved model will not be meaningful.If you want to use the full ImageNet dataset, see [Downloading, preprocessing, and uploading the ImageNet dataset](/tpu/docs/imagenet-setup) . **Caution:** Make sure you **do not** set the `STORAGE_BUCKET` environment variable to the path of the fake_imagenet dataset. You can read from `gs://cloud-tpu-test-datasets` but you can't write to it. As a result, you can't use it to write out training logs. Make sure the `STORAGE_BUCKET` environment variable is set to your own Cloud Storage bucket.\n- Launch your Cloud TPU resources using the `gcloud` command.The command you use depends on whether you are using a TPU VM or a TPU node. For more information on the two VM architecture, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) . For more information on the `gcloud` command, see the [gcloud Reference](/sdk/gcloud/reference) . This tutorial specifies a v3-32 Pod. For other Pod options, see the [available TPU types page](/tpu/docs/supported-tpu-configurations) .\n **Note:** If there is not enough capacity currently available to create the TPU Pod, you can queue your request using queued resources. Queued resources allow you to receive capacity once it becomes available. To request your Cloud TPU resources as queued resources, use the`gcloud alpha compute tpus queued-resources create`command instead. For more information, see [Manage Queued Resources](/tpu/docs/queued-resources) .\n```\n$ gcloud compute tpus tpu-vm create resnet-tutorial \\--zone=us-central2-b \\--accelerator-type=4-32 \\--version=tpu-vm-tf-2.16.1-pod-pjrt\n``` **Note:** The first time you run `gcloud` on a project it takes about 5 minutes to perform startup tasks such as SSH key propagation and API turnup.\n```\n$ gcloud compute tpus execution-groups create \\--zone=us-central2-b \\--name=resnet-tutorial \\--accelerator-type=v3-32 \\--tf-version=2.12.0\n```\n- If you are not automatically logged in to the Compute Engine instance, log in by running the following `ssh` command. When you are logged into the VM, your shell prompt changes from `username@projectname` to `username@vm-instance-name` :\n```\n$ gcloud compute tpus tpu-vm ssh resnet-tutorial --zone=us-central2-b\n```\n```\n$ gcloud compute ssh resnet-tutorial --zone=us-central2-b\n```\n **Key Point:** From this point on, a prefix of **(vm) $** means you should run the command on the Compute Engine VM instance.As you continue these instructions, run each command that begins with `(vm)$` in your VM session window.\n- Export Cloud TPU setup variables:```\n(vm)$ export ZONE=us-central2-b(vm)$ export STORAGE_BUCKET=gs://bucket-name\n``````\n(vm)$ export TPU_NAME=resnet-tutorial(vm)$ export DATA_DIR=gs://cloud-tpu-test-datasets/fake_imagenet(vm)$ export MODEL_DIR=${STORAGE_BUCKET}/resnet-2x-pod\n```The training application expects your training data to be accessible in Cloud Storage. The training application also uses your Cloud Storage bucket to store checkpoints during training.\n- The ResNet training script requires an extra package. Install it now.:\n```\n(vm)$ pip3 install --user tensorflow-model-optimization>=0.1.3 \n```\n```\n(vm)$ pip3 install --user tensorflow-model-optimization>=0.1.3 \n```\n- Install TensorFlow requirements.The command you use depends on whether you are using TPU VMs or TPU Nodes.\n```\n(vm)$ pip3 install -r /usr/share/tpu/models/official/requirements.txt\n```\n```\n(vm)$ pip3 install --user -r /usr/share/models/official/requirements.txt\n```\n- Set the `PYTHONPATH` environment variable:\n```\n(vm)$ export PYTHONPATH=\"PYTHONPATH=/usr/share/tpu/tensorflow/resnet50_keras\"(vm)$ export TPU_LOAD_LIBRARY=0\n```\n```\n(vm)$ export PYTHONPATH=\"${PYTHONPATH}:/usr/share/models\"\n```\n- Change to directory that stores the model:\n```\n(vm)$ cd /usr/share/tpu/tensorflow/resnet50_keras\n```\n```\n(vm)$ cd /usr/share/models\n```\n- Train the model.```\n(vm)$ resnet50.py --tpu=${TPU_NAME} --data=gs://cloud-tpu-test-datasets/fake_imagenet\u00a0\n```\nThis procedure trains the model on the fake_imagenet dataset to 100 training steps and 13 evaluation steps. This training takes approximately 2 minutes on a v3-32 Cloud TPU. When the training and evaluation complete, messages similar to the following appears:\n```\n{'accuracy': 0.0009716797,\n  'learning_rate': 0.10256411,\n  'top_5_accuracy': 0.0049560545,\n  'training_loss': 8.5587225}\ntrain | step: 100 | steps/sec: 1.2 | output: \n {'accuracy': 0.0009716797,\n  'learning_rate': 0.10256411,\n  'top_5_accuracy': 0.0049560545,\n  'training_loss': 8.5587225}\n  \neval | step: 100 | eval time: 24.8 sec | output:\n {'accuracy': 0.0010141226,\n  'top_5_accuracy': 0.004356971,\n  'validation_loss': 8.50038}\n eval | step: 100 | eval time: 24.8 sec | output: \n {'accuracy': 0.0010141226,\n  'top_5_accuracy': 0.004356971,\n  'validation_loss': 8.50038}\n```\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- Disconnect from the Compute Engine instance, if you have not already done so:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete your Cloud TPU and Compute Engine resources. The command you use to delete your resources depends upon whether you are using TPU VMs or TPU Nodes. For more information, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) .\n```\n$ gcloud compute tpus tpu-vm delete resnet-tutorial \\--zone=us-central2-b\n```\n```\n$ gcloud compute tpus execution-groups delete resnet-tutorial \\--zone=us-central2-b\n```\n- Verify the resources have been deleted by running `gcloud compute tpus execution-groups list` . The deletion might take several minutes. The output from the following command should not include any of the TPU resources created in this tutorial:\n```\n$ gcloud compute tpus tpu-vm list --zone=us-central2-b\n```\n```\n$ gcloud compute tpus execution-groups list --zone=us-central2-b\n```\n- Run `gsutil` as shown, replacing with the name of the Cloud Storage bucket you created for this tutorial:```\n$ gsutil rm -r gs://bucket-name\n``` **Note:** For free storage limits and other pricing information, see the [Cloud Storage pricing guide](/storage/pricing) .\n## What's nextThe TensorFlow Cloud TPU tutorials generally train the model using a sample dataset. The results of this training are not usable for inference. To use a model for inference, you can train the data on a publicly available dataset or your own dataset. TensorFlow models trained on Cloud TPUs generally require datasets to be in [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format.\nYou can use the [dataset conversion toolsample](/tpu/docs/classification-data-conversion) to convert an image classification dataset into TFRecord format. If you are not using an image classification model, you will have to convert your dataset to [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format yourself. For more information, see [TFRecord andtf.Example](https://www.tensorflow.org/tutorials/load_data/tfrecord) .\n### Hyperparameter tuningTo improve the model's performance with your dataset, you can tune the model's hyperparameters. You can find information about hyperparameters common to all TPU supported models on [GitHub](https://github.com/tensorflow/tpu/tree/master/models/hyperparameters) . Information about model-specific hyperparameters can be found in the [sourcecode](https://github.com/tensorflow/tpu/tree/master/models/official) for each model. For more information on hyperparameter tuning, see [Overview ofhyperparameter tuning](/vertex-ai/docs/training/hyperparameter-tuning-overview) and [Tunehyperparameters](https://developers.google.com/machine-learning/guides/text-classification/step-5) .\n### InferenceOnce you have trained your model, you can use it for inference (also called prediction). You can use the [Cloud TPU inference convertertool](/tpu/docs/v5e-inference-converter) to prepare and optimize a TensorFlow model for inference on Cloud TPU v5e. For more information about inference on Cloud TPU v5e, see [Cloud TPU v5e inferenceintroduction](/tpu/docs/v5e-inference) .- Learn how to train and evaluate using your own data in place of the fake_imagenet or ImageNet datasets by following the [dataset conversion tutorial](/tpu/docs/classification-data-conversion) . The tutorial explains how to use the image classification data converter example script to convert a raw dataset for image classification into TFRecords usable by Cloud TPU Tensorflow models.\n- Run a Cloud TPU [colab](https://colab.sandbox.google.com/github/GoogleCloudPlatform/training-data-analyst/blob/master/courses/fast-and-lean-data-science/03_Flower_pictures_to_TFRecords.ipynb) that demonstrates how to run an image classification model using your own image data.\n- Explore the other [Cloud TPU tutorials](/tpu/docs/tutorials) .\n- Learn to use the [TPU monitoring tools inTensorBoard](/tpu/docs/cloud-tpu-tools) .\n- See how to train ResNet with [Cloud TPU and GKE](/tpu/docs/tutorials/kubernetes-engine-resnet) .", "guide": "Cloud TPU"}