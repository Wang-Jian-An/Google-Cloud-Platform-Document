{"title": "Cloud TPU - Run TensorFlow code on TPU Pod slices", "url": "https://cloud.google.com/tpu/docs/tensorflow-pods", "abstract": "# Cloud TPU - Run TensorFlow code on TPU Pod slices\n# Run TensorFlow code on TPU Pod slices\nThis document shows you how to perform a simple calculation using TensorFlow on a TPU Pod. You will perform the following steps:\n- Create a TPU Pod slice with TensorFlow software\n- Connect to the TPU VM using SSH\n- Create and run a simple script\nThe TPU VM relies on a [Service Accounts](/compute/docs/access/service-accounts#serviceaccount) for permissions to call Cloud TPU API. By default, your TPU VM will use the default Compute Engine [service account](/compute/docs/access/service-accounts) which includes all needed Cloud TPU permissions. If you use your own service account you need to add the [TPU Viewer](/iam/docs/understanding-roles#tpu.viewer) role to your service account. For more information on Google Cloud roles, see [Understanding roles](/iam/docs/understanding-roles) . You can specify your own service account using the `--service-account` flag when creating your TPU VM.\n", "content": "## Create a v3-32 TPU Pod slice with TensorFlow runtime\n**Note:** When launching the TPU VM, you can either use the TPU software version shown in the command or you can refer to [Cloud TPU software versions](/tpu/docs/supported-tpu-versions#tpu_software_versions) to specify another supported TPU software version.\n```\n$ gcloud compute tpus tpu-vm create tpu-name \\\u00a0 --zone=europe-west4-a \\\u00a0 --accelerator-type=v3-32 \\\u00a0 --version=tpu-vm-tf-2.16.1-pod-pjrt\n```\n## Connect to your Cloud TPU VM using SSH\n```\n$ gcloud compute tpus tpu-vm ssh tpu-name \\\u00a0 \u00a0 \u00a0 --zone europe-west4-a\n```\n## Create and run a simple calculation script\n- Set the following environment variables.```\n(vm)$ export TPU_NAME=tpu-name(vm)$ export TPU_LOAD_LIBRARY=0\n```\n- Create a file named `tpu-test.py` in the current directory and copy and paste the following script into it.```\nimport tensorflow as tfprint(\"Tensorflow version \" + tf.__version__)cluster_resolver = tf.distribute.cluster_resolver.TPUClusterResolver()print('Running on TPU ', cluster_resolver.cluster_spec().as_dict()['worker'])tf.config.experimental_connect_to_cluster(cluster_resolver)tf.tpu.experimental.initialize_tpu_system(cluster_resolver)strategy = tf.distribute.experimental.TPUStrategy(cluster_resolver)@tf.functiondef add_fn(x,y):z = x + yreturn zx = tf.constant(1.)y = tf.constant(1.)z = strategy.run(add_fn, args=(x,y))print(z)\n```\n- Run this script with the following command:```\n(vm)$ python3 tpu-test.py\n```This script performs a simple computation on a each TensorCore of a TPU. The output will look similar to the following:```\nPerReplica:{\n0: tf.Tensor(2.0, shape=(), dtype=float32),\n1: tf.Tensor(2.0, shape=(), dtype=float32),\n2: tf.Tensor(2.0, shape=(), dtype=float32),\n3: tf.Tensor(2.0, shape=(), dtype=float32),\n4: tf.Tensor(2.0, shape=(), dtype=float32),\n5: tf.Tensor(2.0, shape=(), dtype=float32),\n6: tf.Tensor(2.0, shape=(), dtype=float32),\n7: tf.Tensor(2.0, shape=(), dtype=float32),\n8: tf.Tensor(2.0, shape=(), dtype=float32),\n9: tf.Tensor(2.0, shape=(), dtype=float32),\n10: tf.Tensor(2.0, shape=(), dtype=float32),\n11: tf.Tensor(2.0, shape=(), dtype=float32),\n12: tf.Tensor(2.0, shape=(), dtype=float32),\n13: tf.Tensor(2.0, shape=(), dtype=float32),\n14: tf.Tensor(2.0, shape=(), dtype=float32),\n15: tf.Tensor(2.0, shape=(), dtype=float32),\n16: tf.Tensor(2.0, shape=(), dtype=float32),\n17: tf.Tensor(2.0, shape=(), dtype=float32),\n18: tf.Tensor(2.0, shape=(), dtype=float32),\n19: tf.Tensor(2.0, shape=(), dtype=float32),\n20: tf.Tensor(2.0, shape=(), dtype=float32),\n21: tf.Tensor(2.0, shape=(), dtype=float32),\n22: tf.Tensor(2.0, shape=(), dtype=float32),\n23: tf.Tensor(2.0, shape=(), dtype=float32),\n24: tf.Tensor(2.0, shape=(), dtype=float32),\n25: tf.Tensor(2.0, shape=(), dtype=float32),\n26: tf.Tensor(2.0, shape=(), dtype=float32),\n27: tf.Tensor(2.0, shape=(), dtype=float32),\n28: tf.Tensor(2.0, shape=(), dtype=float32),\n29: tf.Tensor(2.0, shape=(), dtype=float32),\n30: tf.Tensor(2.0, shape=(), dtype=float32),\n31: tf.Tensor(2.0, shape=(), dtype=float32)\n}\n```## Clean up\nWhen you are done with your TPU VM follow these steps to clean up your resources.\n- Disconnect from the Compute Engine:```\n(vm)$ exit\n```\n- Delete your Cloud TPU.```\n$ gcloud compute tpus tpu-vm delete tpu-name \\\u00a0 --zone europe-west4-a\n```\n- Verify the resources have been deleted by running the following command. Make sure your TPU is no longer listed. The deletion might take several minutes.```\n$ gcloud compute tpus tpu-vm list \\\u00a0 --zone europe-west4-a\n```", "guide": "Cloud TPU"}