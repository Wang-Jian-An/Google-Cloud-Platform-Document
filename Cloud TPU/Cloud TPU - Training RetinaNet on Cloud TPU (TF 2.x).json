{"title": "Cloud TPU - Training RetinaNet on Cloud TPU (TF 2.x)", "url": "https://cloud.google.com/tpu/docs/tutorials/retinanet-2.x", "abstract": "# Cloud TPU - Training RetinaNet on Cloud TPU (TF 2.x)\nThis document describes an implementation of the RetinaNet object detection model. The code is available on [GitHub](https://github.com/tensorflow/models/tree/master/official/vision/detection) .\nThe instructions below assume you are already familiar with running a model on Cloud TPU. If you are new to Cloud TPU, you can refer to the [Quickstart](/tpu/docs/quickstart) for a basic introduction.\nIf you plan to train on a TPU Pod slice, review [Training on TPU Pods](/tpu/docs/training-on-tpu-pods) to understand parameter changes required for Pod slices.\n **Warning:** This tutorial uses a third-party dataset. Google provides no representation, warranty, or other guarantees about the validity, or any other aspects of this dataset.\n", "content": "## Objectives\n- Prepare the COCO dataset\n- Create a Cloud Storage bucket to hold your dataset and model output\n- Set up TPU resources for training and evaluation\n- Run training and evaluation on a single Cloud TPU or a Cloud TPU Pod\n## CostsIn this document, you use the following billable components of Google Cloud:- Compute Engine\n- Cloud TPU\n- Cloud Storage\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \n## Before you begin **Important:** You can use this tutorial with either the TPU VM or the TPU Node configuration. The two VM architectures are described in [System Architecture](/tpu/docs/system-architecture-tpu-vm) . The gcloud commands you use depend on the TPU configuration you are using. In this tutorial, each gcloud command is shown in a tabbed section. Choose the tab for the TPU configuration you want to use and the web page shows the appropriate gcloud command. Unless you know you need to use TPU Nodes, we recommend using TPU VMs.\nBefore starting this tutorial, check that your Google Cloud project is correctly set up.- This walkthrough uses billable components of Google Cloud. Check the [Cloud TPU pricing page](/tpu/docs/pricing) to  estimate your costs. Be sure to [clean up](#clean_up) resources you create when you've finished with them to avoid unnecessary  charges.\n## Prepare the COCO datasetThis tutorial uses the COCO dataset. The dataset needs to be in TFRecord format on a Cloud Storage bucket to be used for the training.\nIf you already have the COCO dataset prepared on a Cloud Storage bucket that is located in the [zone](/tpu/docs/types-zones-tpu-vm) you will be using to train the model, you can go directly to [single device training.](#single-device-training) Otherwise, use the following steps to prepare the dataset.- Open a Cloud Shell window. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- In your [Cloud Shell](https://console.cloud.google.com/) , configure `gcloud` with your project ID.```\nexport PROJECT_ID=project-idgcloud config set project ${PROJECT_ID}\n```\n- In your [Cloud Shell](https://console.cloud.google.com/) , create a Cloud Storage bucket using the following command: **Note:** In the following command, replace with the name you want to assign to your bucket.```\ngsutil mb -p ${PROJECT_ID} -c standard -l europe-west4 gs://bucket-name\n```\n- Launch a Compute Engine VM instance.This VM instance will only be used to download and preprocess the COCO dataset. Fill in the with a name of your choosing.```\n$ gcloud compute tpus execution-groups create \\\u00a0--vm-only \\\u00a0--name=instance-name \\\u00a0--zone=europe-west4-a \\\u00a0--disk-size=300 \\\u00a0--machine-type=n1-standard-16 \\\u00a0--tf-version=2.12.0\n```\n- If you are not automatically logged in to the Compute Engine instance, log in by running the following `ssh` command. When you are logged into the VM, your shell prompt changes from `username@projectname` to `username@vm-name` :```\n\u00a0 $ gcloud compute ssh instance-name --zone=europe-west4-a\u00a0 \n```\n- Set up two variables, one for the storage bucket you created earlier and one for the directory that holds the training data (DATA_DIR) on the storage bucket.```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name\n``````\n(vm)$ export DATA_DIR=${STORAGE_BUCKET}/coco\n```\n- Install the packages needed to pre-process the data.```\n(vm)$ sudo apt-get install -y python3-tk && \\\u00a0 pip3 install --user Cython matplotlib opencv-python-headless pyyaml Pillow && \\\u00a0 pip3 install --user \"git+https://github.com/cocodataset/cocoapi#egg=pycocotools&subdirectory=PythonAPI\"\n```\n- Run the `download_and_preprocess_coco.sh` script to convert the COCO dataset into a set of TFRecords ( `*.tfrecord` ) that the training application expects.```\n(vm)$ git clone https://github.com/tensorflow/tpu.git(vm)$ sudo bash tpu/tools/datasets/download_and_preprocess_coco.sh ./data/dir/coco\n```This installs the required libraries and then runs the preprocessing script. It outputs a number of `*.tfrecord` files in your local data directory. The COCO download and conversion script takes approximately 1 hour to complete.\n- Copy the data to your Cloud Storage bucketAfter you convert the data into TFRecords, copy them from local storage to your Cloud Storage bucket using the `gsutil` command. You must also copy the annotation files. These files help validate the model's performance.```\n(vm)$ gsutil -m cp ./data/dir/coco/*.tfrecord ${DATA_DIR}(vm)$ gsutil cp ./data/dir/coco/raw-data/annotations/*.json ${DATA_DIR}\n```\n- Clean up the VM resourcesOnce the COCO dataset has been converted to TFRecords and copied to the DATA_DIR on your Cloud Storage bucket, you can delete the Compute Engine instance.Disconnect from the Compute Engine instance:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete your Compute Engine instance.```\n\u00a0 $ gcloud compute instances delete instance-name\u00a0 \u00a0 --zone=europe-west4-a\u00a0 \n```\n## Cloud TPU single device training **Note:** Do you want to train the model using a Cloud TPU pod? See [ TPU Pod training.](#pod-training) \n **Important: ** Set up your Compute Engine VM, your Cloud TPU node and your Cloud Storage bucket in the same region/zone to reduce network latency and network costs.- Open a Cloud Shell window. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Create a variable for your project's ID.```\nexport PROJECT_ID=project-id\n```\n- Configure Google Cloud CLI to use the project where you want to create Cloud TPU.```\ngcloud config set project ${PROJECT_ID}\n```The first time you run this command in a new Cloud Shell VM, an `Authorize Cloud Shell` page is displayed. Click `Authorize` at the bottom of the page to allow `gcloud` to make Google Cloud API calls with your credentials.\n- Create a Service Account for the Cloud TPU project.```\ngcloud beta services identity create --service tpu.googleapis.com --project $PROJECT_ID\n```The command returns a Cloud TPU Service Account with following format:```\nservice-PROJECT_NUMBER@cloud-tpu.iam.gserviceaccount.com\n```\n- Create a Cloud Storage bucket using the following command: **Note:** In the following command, replace with the name you want to assign to your bucket.```\ngsutil mb -p ${PROJECT_ID} -c standard -l europe-west4 gs://bucket-name\n```This Cloud Storage bucket stores the data you use to train your model and the training results. The `gcloud` command used in this tutorial to set up the TPU also sets up default permissions for the Cloud TPU Service Account you set up in the previous step. If you want finer-grain permissions, review the [access level permissions](/tpu/docs/storage-buckets) .\n## Set up and start the Cloud TPU\n- Launch a Compute Engine VM and Cloud TPU using the `gcloud` command. The command you use depends on whether you are using TPU VMs or TPU nodes. For more information on the two VM architecture, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) .\n```\n$ gcloud compute tpus tpu-vm create retinanet-tutorial \\--zone=europe-west4-a \\--accelerator-type=v3-8 \\--version=tpu-vm-tf-2.16.1-pjrt\n``````\n$ gcloud compute tpus execution-groups create \u00a0\\\u00a0--zone=europe-west4-a \\\u00a0--name=retinanet-tutorial \\\u00a0--accelerator-type=v3-8 \\\u00a0--machine-type=n1-standard-8 \\\u00a0--disk-size=300 \\\u00a0--tf-version=2.12.0\n``` **Note:** If you have more than one project, you must specify the project ID with the `--project` flag.For more information on the `gcloud` command, see the [gcloud Reference](/sdk/gcloud/reference) . **Note:** The first time you run `gcloud compute tpus` on a project it takes approximately 5 minutes to perform startup tasks such as SSH key propagation and API turnup.\n- If you are not automatically logged in to the Compute Engine instance, log in by running the following `ssh` command. When you are logged into the VM, your shell prompt changes from `username@projectname` to `username@vm-name` :\n```\ngcloud compute tpus tpu-vm ssh retinanet-tutorial --zone=europe-west4-a\n```\n```\ngcloud compute ssh retinanet-tutorial --zone=europe-west4-a\n```\n **Key Point:** From this point on, a prefix of **(vm) $** means you should run the command on the Compute Engine VM instance.As you continue these instructions, run each command that begins with `(vm)$` in your VM session window.\n- Install extra packagesThe RetinaNet training application requires several extra packages. Install them now:```\n(vm)$ sudo apt-get install -y python3-tk\n``````\n(vm)$ pip3 install --user Cython matplotlib opencv-python-headless pyyaml Pillow\n``````\n(vm)$ pip3 install --user 'git+https://github.com/cocodataset/cocoapi#egg=pycocotools&subdirectory=PythonAPI'\n```\n- Install TensorFlow requirements.\n```\n(vm)$ pip3 install -r /usr/share/tpu/models/official/requirements.txt\n```\n```\n(vm)$ pip3 install --user -r /usr/share/models/official/requirements.txt\n```\n- Set the Cloud TPU name variable.\n```\n(vm)$ export TPU_NAME=local\n```\n```\n(vm)$ export TPU_NAME=retinanet-tutorial\n```\n- Add environment variables for the data and model directories.```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name\n``````\n(vm)$ export DATA_DIR=${STORAGE_BUCKET}/coco(vm)$ export MODEL_DIR=${STORAGE_BUCKET}/retinanet-train\n```\n- Set the `PYTHONPATH` environment variable:\n```\n(vm)$ export PYTHONPATH=\"${PWD}/models:${PYTHONPATH}\"\n```\n```\n(vm)$ export PYTHONPATH=\"${PYTHONPATH}:/usr/share/models\"\n```\n- When creating your TPU, if you set the `--version` parameter to a version ending with `-pjrt` , set the following environment variables to enable the PJRT runtime:```\n\u00a0 (vm)$ export NEXT_PLUGGABLE_DEVICE_USE_C_API=true\u00a0 (vm)$ export TF_PLUGGABLE_DEVICE_LIBRARY_PATH=/lib/libtpu.so\n```\n- Change to directory that stores the model:\n```\n(vm)$ cd /usr/share/tpu/models/official/legacy/detection\n```\n```\n(vm)$ cd /usr/share/models/official/legacy/detection\n```\n## Single Cloud TPU device trainingThe following training scripts were run on a Cloud TPU v3-8. It will take more time, but you can also run them on a Cloud TPU v2-8.\nThis sample script below trains for only 10 steps and takes less than 5 minutes to run on a v3-8 TPU Node. To train to convergence takes about 22,500 steps and approximately 1 1/2 hours on a Cloud TPU v3-8 TPU.- Set up the following environment variables:```\n(vm)$ export RESNET_CHECKPOINT=gs://cloud-tpu-checkpoints/retinanet/resnet50-checkpoint-2018-02-07(vm)$ export TRAIN_FILE_PATTERN=${DATA_DIR}/train-*(vm)$ export EVAL_FILE_PATTERN=${DATA_DIR}/val-*(vm)$ export VAL_JSON_FILE=${DATA_DIR}/instances_val2017.json\n```\n- Run the training script:```\n(vm)$ python3 main.py \\\u00a0 \u00a0 \u00a0--strategy_type=tpu \\\u00a0 \u00a0 \u00a0--tpu=${TPU_NAME} \\\u00a0 \u00a0 \u00a0--model_dir=${MODEL_DIR} \\\u00a0 \u00a0 \u00a0--mode=\"train\" \\\u00a0 \u00a0 \u00a0--params_override=\"{ type: retinanet, train: { total_steps: 10, checkpoint: { path: ${RESNET_CHECKPOINT}, prefix: resnet50/ }, train_file_pattern: ${TRAIN_FILE_PATTERN} }, eval: { val_json_file: ${VAL_JSON_FILE}, eval_file_pattern: ${EVAL_FILE_PATTERN}, eval_samples: 5000 } }\"\n```\nThe model will train for 10 steps in about 5 minutes on a v3-8 TPU. When the training completes, you will see output similar to the following:\n```\nTrain Step: 10/10 / loss = {\n 'total_loss': 2.4581615924835205,\n 'cls_loss': 1.4098565578460693,\n 'box_loss': 0.012001709081232548,\n 'model_loss': 2.0099422931671143,\n 'l2_regularization_loss': 0.44821977615356445,\n 'learning_rate': 0.008165999\n}\n/ training metric = {\n 'total_loss': 2.4581615924835205,\n 'cls_loss': 1.4098565578460693,\n 'box_loss': 0.012001709081232548,\n 'model_loss': 2.0099422931671143,\n 'l2_regularization_loss': 0.44821977615356445,\n 'learning_rate': 0.008165999\n}\n```## Single Cloud TPU device evaluationThe following procedure uses the COCO evaluation data. It takes about 10 minutes to run through the evaluation steps on a v3-8 TPU.- Set up the following environment variables:```\n(vm)$ export EVAL_SAMPLES=5000\n```\n- Run the evaluation script:```\n(vm)$ python3 main.py \\\u00a0 \u00a0 \u00a0 --strategy_type=tpu \\\u00a0 \u00a0 \u00a0 --tpu=${TPU_NAME} \\\u00a0 \u00a0 \u00a0 --model_dir=${MODEL_DIR} \\\u00a0 \u00a0 \u00a0 --checkpoint_path=${MODEL_DIR} \\\u00a0 \u00a0 \u00a0 --mode=eval_once \\\u00a0 \u00a0 \u00a0 --params_override=\"{ type: retinanet, eval: { val_json_file: ${VAL_JSON_FILE}, eval_file_pattern: ${EVAL_FILE_PATTERN}, eval_samples: ${EVAL_SAMPLES} } }\"\n```At the end of the evaluation, you will see messages similar to the following on the console:```\nAccumulating evaluation results...\nDONE (t=7.66s).\n Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.000\n Average Precision (AP) @[ IoU=0.50  | area= all | maxDets=100 ] = 0.000\n Average Precision (AP) @[ IoU=0.75  | area= all | maxDets=100 ] = 0.000\n Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.000\n Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.000\n Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.000\n Average Recall  (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.000\n Average Recall  (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.000\n Average Recall  (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.000\n Average Recall  (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.000\n Average Recall  (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.000\n Average Recall  (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.000\n```\nYou have now completed single-device training and evaluation. Use the following steps to delete the current single-device TPU resources.- Disconnect from the Compute Engine instance:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete the TPU resource.\n```\n$ gcloud compute tpus tpu-vm delete retinanet-tutorial \\--zone=europe-west4-a\n``````\n$ gcloud compute tpus execution-groups delete retinanet-tutorial \\--tpu-only \\--zone=europe-west4-a\n```\nAt this point, you can either conclude this tutorial and [clean up](#cleanup) , or you can continue and explore running the model on Cloud TPU Pods.## Scale your model with Cloud TPU Pods **Important:** You can scale your model with either the TPU VM or the TPU Node configuration. The two VM architectures are described in [System Architecture](/tpu/docs/system-architecture-tpu-vm) . For Pod training, you only need to follow the instructions for your TPU configuration, [TPU VM](#onevm-pod) or [TPU Node](#twovm-pod) .\nTraining your model on Cloud TPU Pods may require some changes to your training script. For information, see [Training on TPU Pods](/tpu/docs/training-on-tpu-pods) .## Training Retinanet on a TPU Pod **Important:** If you have already set up a Cloud TPU project, Service Account, storage bucket, and dataset for single device training, you can skip to [setup and launch TPU resources](#setup-launch-pod-resources) .\n- Open a Cloud Shell window. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Create a variable for your project's ID.```\nexport PROJECT_ID=project-id\n```\n- Configure Google Cloud CLI to use the project where you want to create Cloud TPU.```\ngcloud config set project ${PROJECT_ID}\n```The first time you run this command in a new Cloud Shell VM, an `Authorize Cloud Shell` page is displayed. Click `Authorize` at the bottom of the page to allow `gcloud` to make Google Cloud API calls with your credentials.\n- Create a Service Account for the Cloud TPU project.Service accounts allow the Cloud TPU service to access other Google Cloud services.```\ngcloud beta services identity create --service tpu.googleapis.com --project $PROJECT_ID\n```The command returns a Cloud TPU Service Account with following format:```\nservice-PROJECT_NUMBER@cloud-tpu.iam.gserviceaccount.com\n```\n- Create a Cloud Storage bucket using the following command or use a bucket you created earlier for your project. **Important: ** Set up your Cloud TPU resources and your Cloud Storage bucket) in the same region/zone to reduce network latency and network costs. Cloud TPUs are located in [specific zones](/tpu/docs/types-zones#types) , which are subdivisions within a region.In the following command, replace with the name of the [region](/tpu/docs/types-zones-tpu-vm) you will use to run the training. Replace with the name you want to assign to your bucket.```\ngsutil mb -p ${PROJECT_ID} -c standard -l europe-west4 gs://bucket-name\n```This Cloud Storage bucket stores the data you use to train your model and the training results. The `gcloud` command used in this tutorial sets up default permissions for the Cloud TPU Service Account you set up in the previous step. If you want finer-grain permissions, review the [access level permissions](/tpu/docs/storage-buckets) .The bucket location must be in the same region as your TPU resources.\n- If you previously prepared the COCO dataset and moved it to your storage bucket, you can use it again for Pod training. If you have not yet prepared the COCO dataset, [prepare it now](#prepare-dataset) and return here to set up the training.\n- Set up and launch a Cloud TPU PodThis tutorial specifies a v3-32 Pod. For other Pod options, see the [available TPU types page](/tpu/docs/supported-tpu-configurations) .\n **Note:** If there is not enough capacity currently available to create the TPU Pod, you can queue your request using queued resources. Queued resources allow you to receive capacity once it becomes available. To request your Cloud TPU resources as queued resources, use the`gcloud alpha compute tpus queued-resources create`command instead. For more information, see [Manage Queued Resources](/tpu/docs/queued-resources) .\nLaunch a TPU VM Pod using the `gcloud compute tpus tpu-vm` command. This tutorial specifies a v3-32 Pod. For other Pod options, see the [available TPU types page](/tpu/docs/supported-tpu-configurations) .\n```\n$ gcloud compute tpus tpu-vm create retinanet-tutorial \\--zone=europe-west4-a \\--accelerator-type=v3-32 \\--version=tpu-vm-tf-2.16.1-pod-pjrt\n``` **Note:** The first time you run `gcloud` on a project it takes about 5 minutes to perform startup tasks such as SSH key propagation and API turnup.\nRun the `gcloud compute tpus execution-groups` command, using the `accelerator-type` parameter to specify the Pod slice you want to use. For example, the following command uses a v3-32 Pod slice.\n```\n$ gcloud compute tpus execution-groups create \u00a0\\\u00a0--zone=europe-west4-a \\\u00a0--name=retinanet-tutorial \\\u00a0--accelerator-type=v3-32 \\\u00a0--machine-type=n1-standard-8 \\\u00a0--disk-size=300 \\\u00a0--tf-version=2.12.0 \n```\n- If you are not automatically logged in to the Compute Engine instance, log in by running the following `ssh` command. When you are logged into the VM, your shell prompt changes from `username@projectname` to `username@vm-name` :\n```\ngcloud compute tpus tpu-vm ssh retinanet-tutorial --zone=europe-west4-a\n```\n```\ngcloud compute ssh retinanet-tutorial --zone=europe-west4-a\n```\n **Key Point:** From this point on, a prefix of **(vm) $** means you should run the command on the Compute Engine VM instance.\n- Set the Cloud TPU name variable.```\n(vm)$ export TPU_NAME=retinanet-tutorial\n```\n- Set Cloud Storage bucket variablesSet up the following environment variables, replacing with the name of your Cloud Storage bucket:```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name\n``````\n(vm)$ export MODEL_DIR=${STORAGE_BUCKET}/retinanet-train(vm)$ export DATA_DIR=${STORAGE_BUCKET}/coco\n```The training application expects your training data to be accessible in Cloud Storage. The training application also uses your Cloud Storage bucket to store checkpoints during training.\n- Install extra packagesThe RetinaNet training application requires several extra packages. Install them now:```\n(vm)$ sudo apt-get install -y python3-tk(vm)$ pip3 install --user Cython matplotlib opencv-python-headless pyyaml Pillow(vm)$ pip3 install --user 'git+https://github.com/cocodataset/cocoapi#egg=pycocotools&subdirectory=PythonAPI' \n```\n- Install TensorFlow requirements.\n```\n(vm)$ pip3 install -r /usr/share/tpu/models/official/requirements.txt\n```\n```\n(vm)$ pip3 install --user -r /usr/share/models/official/requirements.txt\n```\n- Set some required environment variables:```\n(vm)$ export RESNET_PRETRAIN_DIR=gs://cloud-tpu-checkpoints/retinanet/resnet50-checkpoint-2018-02-07(vm)$ export TRAIN_FILE_PATTERN=${DATA_DIR}/train-*(vm)$ export EVAL_FILE_PATTERN=${DATA_DIR}/val-*(vm)$ export VAL_JSON_FILE=${DATA_DIR}/instances_val2017.json\n```\n- Set the `PYTHONPATH` environment variable:\n```\n(vm)$ export PYTHONPATH=\"${PWD}/models:${PYTHONPATH}\"(vm)$ export TPU_LOAD_LIBRARY=0\n```\n```\n(vm)$ export PYTHONPATH=\"${PYTHONPATH}:/usr/share/models\"\n```\n- Change to directory that stores the model:\n```\n(vm)$ cd /usr/share/tpu/models/official/legacy/detection\n```\n```\n(vm)$ cd /usr/share/models/official/legacy/detection\n```\n- Train the model\n```\n(vm)$ python3 main.py \\--strategy_type=tpu \\--tpu=${TPU_NAME} \\--model_dir=${MODEL_DIR} \\--mode=train \\--model=retinanet \\--params_override=\"{architecture: {use_bfloat16: true}, eval: {batch_size: 40, eval_file_pattern: ${EVAL_FILE_PATTERN}, val_json_file: ${VAL_JSON_FILE}}, postprocess: {pre_nms_num_boxes: 1000}, predict: {batch_size: 40}, train: {batch_size: 256, checkpoint: {path: ${RESNET_PRETRAIN_DIR}, prefix: resnet50/}, iterations_per_loop: 5000, total_steps: 5625, train_file_pattern: ${TRAIN_FILE_PATTERN}, } }\" \n```This procedure trains the model on the COCO dataset for 5625 training steps. This training takes approximately 20 minutes on a v3-32 Cloud TPU. When the training completes, a message similar to the following appears:The following sample training script was run on a Cloud TPU v3-32 Pod. It trains for only 10 steps and takes less than 5 minutes to run. To train to convergence requires 2109 steps and takes approximately 50 minutes on a v3-32 TPU Pod.\n```\n(vm)$ \u00a0python3 main.py \\--strategy_type=tpu \\--tpu=${TPU_NAME} \\--model_dir=${MODEL_DIR} \\--mode=\"train\" \\--params_override=\"{ type: retinanet, train: { total_steps: 10, batch_size: 256, checkpoint: { path: ${RESNET_CHECKPOINT}, prefix: resnet50/ }, train_file_pattern: ${TRAIN_FILE_PATTERN} }, eval: { val_json_file: ${VAL_JSON_FILE}, eval_file_pattern: ${EVAL_FILE_PATTERN}, eval_samples: 5000 } }\" \n```\nWhen the training completes, a message similar to the following appears:\n```\nTrain Step: 5625/5625 / loss = {'total_loss': 0.730501651763916,\n'cls_loss': 0.3229793608188629, 'box_loss': 0.003082591574639082,\n'model_loss': 0.4771089553833008, 'l2_regularization_loss': 0.2533927261829376,\n'learning_rate': 0.08} / training metric = {'total_loss': 0.730501651763916,\n'cls_loss': 0.3229793608188629, 'box_loss': 0.003082591574639082, \n'model_loss': 0.4771089553833008, 'l2_regularization_loss': 0.2533927261829376,\n'learning_rate': 0.08} \n```\n```\nTrain Step: 10/10 / loss = {'total_loss': 3.5455241203308105,\n'cls_loss': 1.458828330039978, 'box_loss': 0.01220895815640688,\n'model_loss': 2.0692763328552246, 'l2_regularization_loss': 1.4762479066848755,\n'learning_rate': 0.008165999} / training metric = {'total_loss': 3.5455241203308105,\n'cls_loss': 1.458828330039978, 'box_loss': 0.01220895815640688,\n'model_loss': 2.0692763328552246, 'l2_regularization_loss': 1.4762479066848755,\n'learning_rate': 0.008165999}\n```\n## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- Disconnect from the Compute Engine VM:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete your Cloud TPU and Compute Engine resources. The command you use to delete your resources depends upon whether you are using TPU VMs or TPU Nodes. For more information, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) .\n```\n$ gcloud compute tpus tpu-vm delete retinanet-tutorial \\--zone=europe-west4-a\n```\n```\n$ gcloud compute tpus execution-groups delete retinanet-tutorial \\--zone=europe-west4-a\n```\n- Verify the resources have been deleted by running `gcloud compute tpus execution-groups list` . The deletion might take several minutes. A response like the one below indicates your instances have been successfully deleted.```\n$ gcloud compute tpus execution-groups list --zone=europe-west4-a\n``````\nListed 0 items.\n```\n- Delete your Cloud Storage bucket using `gsutil` as shown below. Replace with the name of your Cloud Storage bucket.```\n$ gsutil rm -r gs://bucket-name\n``` **Note:** For free storage limits and other pricing information, see the [Cloud Storage pricing guide](/storage/pricing) .\n## What's nextThe TensorFlow Cloud TPU tutorials generally train the model using a sample dataset. The results of this training are not usable for inference. To use a model for inference, you can train the data on a publicly available dataset or your own dataset. TensorFlow models trained on Cloud TPUs generally require datasets to be in [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format.\nYou can use the [dataset conversion toolsample](/tpu/docs/classification-data-conversion) to convert an image classification dataset into TFRecord format. If you are not using an image classification model, you will have to convert your dataset to [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format yourself. For more information, see [TFRecord andtf.Example](https://www.tensorflow.org/tutorials/load_data/tfrecord) .\n### Hyperparameter tuningTo improve the model's performance with your dataset, you can tune the model's hyperparameters. You can find information about hyperparameters common to all TPU supported models on [GitHub](https://github.com/tensorflow/tpu/tree/master/models/hyperparameters) . Information about model-specific hyperparameters can be found in the [sourcecode](https://github.com/tensorflow/tpu/tree/master/models/official) for each model. For more information on hyperparameter tuning, see [Overview ofhyperparameter tuning](/vertex-ai/docs/training/hyperparameter-tuning-overview) and [Tunehyperparameters](https://developers.google.com/machine-learning/guides/text-classification/step-5) .\n### InferenceOnce you have trained your model, you can use it for inference (also called prediction). You can use the [Cloud TPU inference convertertool](/tpu/docs/v5e-inference-converter) to prepare and optimize a TensorFlow model for inference on Cloud TPU v5e. For more information about inference on Cloud TPU v5e, see [Cloud TPU v5e inferenceintroduction](/tpu/docs/v5e-inference) .## Train with different image sizesYou can explore using a larger backbone network (for example, ResNet-101 instead of ResNet-50). A larger input image and a more powerful backbone will yield a slower but more precise model.## Use a different basisAlternatively, you can explore pre-training a ResNet model on your own dataset and using it as a basis for your RetinaNet model. With some more work, you can also swap in an alternative network in place of ResNet. Finally, if you are interested in implementing your own object detection models, this network may be a good basis for further experimentation.", "guide": "Cloud TPU"}