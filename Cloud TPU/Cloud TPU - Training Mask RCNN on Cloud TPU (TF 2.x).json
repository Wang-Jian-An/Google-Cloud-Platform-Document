{"title": "Cloud TPU - Training Mask RCNN on Cloud TPU (TF 2.x)", "url": "https://cloud.google.com/tpu/docs/tutorials/mask-rcnn-2.x", "abstract": "# Cloud TPU - Training Mask RCNN on Cloud TPU (TF 2.x)\n", "content": "## OverviewThis tutorial demonstrates how to run the [Mask RCNN](https://arxiv.org/abs/1703.06870) model using Cloud TPU with the [COCO](http://cocodataset.org) dataset.\nMask RCNN is a deep neural network designed to address object detection and image segmentation, one of the more difficult computer vision challenges.\nThe Mask RCNN model generates bounding boxes and segmentation masks for each instance of an object in the image. The model is based on the [Feature Pyramid Network (FPN)](https://arxiv.org/abs/1612.03144) and a [ResNet50](/tpu/docs/tutorials/resnet) backbone.\nThis tutorial uses [Tensorflow Keras APIs](https://www.tensorflow.org/api_docs/python/tf/keras) to train the model. The Keras API is a high-level TensorFlow API that can be used to build and run a machine learning model on Cloud TPU. The API simplifies the model development process by hiding most of the low-level implementation, which makes it easier to switch between TPU and other platforms such as GPU or CPU.\nThe instructions below assume you are already familiar with training a model on Cloud TPU. If you are new to Cloud TPU, you can refer to the [Quickstart](/tpu/docs/quickstart) for a basic introduction.\n **Warning:** Mask RCNN uses a third-party dataset. Google provides no representation, warranty, or other guarantees about the validity or any other aspects of this dataset.\n## Objectives\n- Prepare the COCO dataset\n- Create a Cloud Storage bucket to hold your dataset and model output\n- Set up TPU resources for training and evaluation\n- Run training and evaluation on a single Cloud TPU or a Cloud TPU Pod\n## CostsIn this document, you use the following billable components of Google Cloud:- Compute Engine\n- Cloud TPU\n- Cloud Storage\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \n## Before you begin **Important:** You can use this tutorial with either the TPU VM or the TPU Node configuration. The two VM architectures are described in [System Architecture](/tpu/docs/system-architecture-tpu-vm) . The gcloud commands you use depend on the TPU configuration you are using. In this tutorial, each gcloud command is shown in a tabbed section. Choose the tab for the TPU configuration you want to use and the web page shows the appropriate gcloud command. Unless you know you need to use TPU Nodes, we recommend using TPU VMs.\nBefore starting this tutorial, check that your Google Cloud project is correctly set up.- This walkthrough uses billable components of Google Cloud. Check the [Cloud TPU pricing page](/tpu/docs/pricing) to  estimate your costs. Be sure to [clean up](#clean_up) resources you create when you've finished with them to avoid unnecessary  charges.\n## Prepare the COCO datasetThis tutorial uses the COCO dataset. The dataset needs to be in TFRecord format on a Cloud Storage bucket to be used for the training.\nIf you already have the COCO dataset prepared on a Cloud Storage bucket that is located in the [zone](/tpu/docs/types-zones-tpu-vm) you will be using to train the model, you can go directly to [single device training.](#single-device-training) Otherwise, use the following steps to prepare the dataset.- Open a Cloud Shell window. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- In your [Cloud Shell](https://console.cloud.google.com/) , configure `gcloud` with your project ID.```\nexport PROJECT_ID=project-idgcloud config set project ${PROJECT_ID}\n```\n- In your [Cloud Shell](https://console.cloud.google.com/) , create a Cloud Storage bucket using the following command: **Note:** In the following command, replace with the name you want to assign to your bucket.```\ngsutil mb -p ${PROJECT_ID} -c standard -l europe-west4 gs://bucket-name\n```\n- Launch a Compute Engine VM instance.This VM instance will only be used to download and preprocess the COCO dataset. Fill in the with a name of your choosing.```\n$ gcloud compute tpus execution-groups create \\\u00a0--vm-only \\\u00a0--name=instance-name \\\u00a0--zone=europe-west4-a \\\u00a0--disk-size=300 \\\u00a0--machine-type=n1-standard-16 \\\u00a0--tf-version=2.12.0\n```\n- If you are not automatically logged in to the Compute Engine instance, log in by running the following `ssh` command. When you are logged into the VM, your shell prompt changes from `username@projectname` to `username@vm-name` :```\n\u00a0 $ gcloud compute ssh instance-name --zone=europe-west4-a\u00a0 \n```\n- Set up two variables, one for the storage bucket you created earlier and one for the directory that holds the training data (DATA_DIR) on the storage bucket.```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name\n``````\n(vm)$ export DATA_DIR=${STORAGE_BUCKET}/coco\n```\n- Install the packages needed to pre-process the data.```\n(vm)$ sudo apt-get install -y python3-tk && \\\u00a0 pip3 install --user Cython matplotlib opencv-python-headless pyyaml Pillow && \\\u00a0 pip3 install --user \"git+https://github.com/cocodataset/cocoapi#egg=pycocotools&subdirectory=PythonAPI\"\n```\n- Run the `download_and_preprocess_coco.sh` script to convert the COCO dataset into a set of TFRecords ( `*.tfrecord` ) that the training application expects.```\n(vm)$ git clone https://github.com/tensorflow/tpu.git(vm)$ sudo bash tpu/tools/datasets/download_and_preprocess_coco.sh ./data/dir/coco\n```This installs the required libraries and then runs the preprocessing script. It outputs a number of `*.tfrecord` files in your local data directory. The COCO download and conversion script takes approximately 1 hour to complete.\n- Copy the data to your Cloud Storage bucketAfter you convert the data into TFRecords, copy them from local storage to your Cloud Storage bucket using the `gsutil` command. You must also copy the annotation files. These files help validate the model's performance.```\n(vm)$ gsutil -m cp ./data/dir/coco/*.tfrecord ${DATA_DIR}(vm)$ gsutil cp ./data/dir/coco/raw-data/annotations/*.json ${DATA_DIR}\n```\n- Clean up the VM resourcesOnce the COCO dataset has been converted to TFRecords and copied to the DATA_DIR on your Cloud Storage bucket, you can delete the Compute Engine instance.Disconnect from the Compute Engine instance:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete your Compute Engine instance.```\n\u00a0 $ gcloud compute instances delete instance-name\u00a0 \u00a0 --zone=europe-west4-a\u00a0 \n```\n## Cloud TPU single device training **Note:** Do you want to train the model using a Cloud TPU pod? See [ TPU Pod training.](#pod-training) \n **Important: ** Set up all resources in the same region/zone to reduce network latency and network costs.- Open a Cloud Shell window. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Create an environment variable for your project's ID.```\nexport PROJECT_ID=project-id\n```\n- Configure Google Cloud CLI to use the project where you want to create the Cloud TPU.```\ngcloud config set project ${PROJECT_ID}\n```The first time you run this command in a new Cloud Shell VM, an `Authorize Cloud Shell` page is displayed. Click `Authorize` at the bottom of the page to allow `gcloud` to make Google Cloud API calls with your credentials.\n- Create a Service Account for the Cloud TPU project.```\ngcloud beta services identity create --service tpu.googleapis.com --project $PROJECT_ID\n```The command returns a Cloud TPU Service Account with following format:```\nservice-PROJECT_NUMBER@cloud-tpu.iam.gserviceaccount.com\n```\n- Export TPU setup variablesExport your project id, the name you want to use for your TPU resources, and the [zone](/tpu/docs/types-zones-tpu-vm) where you will train the model and store any training-related data.```\n$ export TPU_NAME=mask-rcnn-tutorial$ export ZONE=europe-west4-a\n```\n- Launch a Compute Engine VM and Cloud TPU using the `gcloud` command. The command you use depends on whether you are using TPU VMs or TPU nodes. For more information on the two VM architectures, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) . **Note:** If you have more than one project, you must specify the project ID with the `--project` flag.\n```\n$ gcloud compute tpus tpu-vm create mask-rcnn-tutorial \\--zone=europe-west4-a \\--accelerator-type=v3-8 \\--version=tpu-vm-tf-2.16.1-pjrt\n``` **Note:** The first time you create a TPU VM on a project it takes several minutes to perform startup tasks such as SSH key propagation and API turnup.\n **Important:** You must use TensorFlow 2.12.0 or later.\n```\n$ gcloud compute tpus execution-groups create \u00a0\\\u00a0--zone=europe-west4-a \\\u00a0--name=mask-rcnn-tutorial \\\u00a0--accelerator-type=v3-8 \\\u00a0--machine-type=n1-standard-8 \\\u00a0--disk-size=300 \\\u00a0--tf-version=2.12.0\n```For more information on the `gcloud` command, see the [gcloud Reference](/sdk/gcloud/reference) .\n- If you are not automatically logged in to the Compute Engine instance, log in by running the following `ssh` command. When you are logged into the VM, your shell prompt changes from `username@projectname` to `username@vm-name` :\n```\ngcloud compute tpus tpu-vm ssh mask-rcnn-tutorial --zone=europe-west4-a\n```\n```\ngcloud compute tpus execution-groups ssh mask-rcnn-tutorial --zone=europe-west4-a\n```\n **Key Point:** From this point on, a prefix of **(vm) $** means you should run the command on the Compute Engine VM instance.\n- Install TensorFlow requirements.The command you use depends on whether you are using TPU VMs or TPU Nodes.\n```\n(vm)$ pip3 install -r /usr/share/tpu/models/official/requirements.txt \n```\n```\n(vm)$ pip3 install --user -r /usr/share/models/official/requirements.txt\n```\n- Set the Cloud TPU name variable.\n```\n(vm)$ export TPU_NAME=local\n```\n```\n(vm)$ export TPU_NAME=mask-rcnn-tutorial\n```\n- Set up the following environment variables, replacing with the name of the Cloud Storage bucket that stores the COCO dataset:```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name\n```\n- Add environment variables for the data and model directories.```\n(vm)$ export DATA_DIR=${STORAGE_BUCKET}/coco(vm)$ export MODEL_DIR=${STORAGE_BUCKET}/mask-rcnn\n```\n- Add some additional required environment variables:```\n(vm)$ export RESNET_CHECKPOINT=gs://cloud-tpu-checkpoints/retinanet/resnet50-checkpoint-2018-02-07(vm)$ export TRAIN_FILE_PATTERN=${DATA_DIR}/train-*(vm)$ export EVAL_FILE_PATTERN=${DATA_DIR}/val-*(vm)$ export VAL_JSON_FILE=${DATA_DIR}/instances_val2017.json\n```\n- Set the `PYTHONPATH` environment variable:\n```\n(vm)$ export PYTHONPATH=\"${PYTHONPATH}:/usr/share/tpu/models\"\n```\n```\n(vm)$ export PYTHONPATH=\"${PYTHONPATH}:/usr/share/models\"\n```\n- When creating your TPU, if you set the `--version` parameter to a version ending with `-pjrt` , set the following environment variables to enable the PJRT runtime:```\n\u00a0 (vm)$ export NEXT_PLUGGABLE_DEVICE_USE_C_API=true\u00a0 (vm)$ export TF_PLUGGABLE_DEVICE_LIBRARY_PATH=/lib/libtpu.so\n```\n- Change to directory that stores the model:\n```\n(vm)$ cd /usr/share/tpu/models/official/vision\n```\n```\n(vm)$ cd /usr/share/models/official/legacy/detection\n```\nThe following script runs a sample training that trains for 10 training steps and 10 evaluation steps. It takes approximately 6 minutes to complete on a v3-8 TPU. To train to convergence takes about 22,500 steps and approximately 6 hours on a v3-8 TPU.- Run the following command to train Mask-RCNN model:```\n(vm)$ python3 train.py \\\u00a0 --tpu=${TPU_NAME} \\\u00a0 --experiment=maskrcnn_resnetfpn_coco \\\u00a0 --mode=train_and_eval \\\u00a0 --config_file=configs/experiments/maskrcnn/r50fpn_640_coco_scratch_tpu4x4.yaml \\\u00a0 --model_dir=${MODEL_DIR} \\\u00a0 --params_override=\"task.train_data.input_path=${TRAIN_FILE_PATTERN},task.validation_data.input_path=${EVAL_FILE_PATTERN},task.annotation_file=${VAL_JSON_FILE},runtime.distribution_strategy=tpu,trainer.train_steps=10,trainer.validation_steps=10,task.train_data.global_batch_size=8,task.validation_data.global_batch_size=8\"\n```When the training completes, a message similar to the following appears:```\n{'frcnn_box_loss': 0.033865165,\n 'frcnn_cls_loss': 1.2535654,\n 'learning_rate': 0.008266499,\n 'mask_loss': 1.2039567,\n 'model_loss': 2.821458,\n 'rpn_box_loss': 0.034982488,\n 'rpn_score_loss': 0.2950886,\n 'total_loss': 4.340171,\n 'training_loss': 4.340171}\ntrain | step:  10 | steps/sec: 0.1 | output: \n{'frcnn_box_loss': 0.033865165,\n 'frcnn_cls_loss': 1.2535654,\n 'learning_rate': 0.008266499,\n 'mask_loss': 1.2039567,\n 'model_loss': 2.821458,\n 'rpn_box_loss': 0.034982488,\n 'rpn_score_loss': 0.2950886,\n 'total_loss': 4.340171,\n 'training_loss': 4.340171}\n```This is followed by output from the evaluation steps.You have now completed single-device training and evaluation. Use the following steps to delete the current single-device TPU resources.\n- Disconnect from the Compute Engine instance:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete the TPU resource.\n```\n$ gcloud compute tpus tpu-vm delete mask-rcnn-tutorial \\--zone=europe-west4-a\n``````\n$ gcloud compute tpus execution-groups delete mask-rcnn-tutorial \\--tpu-only \\--zone=europe-west4-a\n```\nAt this point, you can either conclude this tutorial and [clean up](#cleanup) , or you can continue and explore running the model on Cloud TPU Pods.## Scaling your model with Cloud TPU Pods **Important:** You can scale your model with either the TPU VM or the TPU Node configuration. The two VM architectures are described in [System Architecture](/tpu/docs/system-architecture-tpu-vm) .\nTraining your model on Cloud TPU Pods may require some changes to your training script. For information, see [Training on TPU Pods](/tpu/docs/training-on-tpu-pods) .## TPU Pod training **Important:** If you have already set up a Cloud TPU project, Service Account, storage bucket, and dataset for single device training, you can skip to [setup and launch TPU resources](#setup-launch-pod-resources) .\n- Open a Cloud Shell window. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Create a variable for your project's ID.```\nexport PROJECT_ID=project-id\n```\n- Configure Google Cloud CLI to use the project where you want to create Cloud TPU.```\ngcloud config set project ${PROJECT_ID}\n```The first time you run this command in a new Cloud Shell VM, an `Authorize Cloud Shell` page is displayed. Click `Authorize` at the bottom of the page to allow `gcloud` to make Google Cloud API calls with your credentials.\n- Create a Service Account for the Cloud TPU project.Service accounts allow the Cloud TPU service to access other Google Cloud services.```\ngcloud beta services identity create --service tpu.googleapis.com --project $PROJECT_ID\n```The command returns a Cloud TPU Service Account with following format:```\nservice-PROJECT_NUMBER@cloud-tpu.iam.gserviceaccount.com\n```\n- If you previously prepared the COCO dataset and moved it to your storage bucket, you can use it again for Pod training. If you have not yet prepared the COCO dataset, [prepare it now](#prepare-coco) and return here to set up the training.\n- Launch a Cloud TPU PodThis tutorial specifies a v3-32 Pod. For other Pod options, see the [available TPU types page](/tpu/docs/supported-tpu-configurations) .\n **Note:** If there is not enough capacity currently available to create the TPU Pod, you can queue your request using queued resources. Queued resources allow you to receive capacity once it becomes available. To request your Cloud TPU resources as queued resources, use the`gcloud alpha compute tpus queued-resources create`command instead. For more information, see [Manage Queued Resources](/tpu/docs/queued-resources) .\n```\n$ gcloud compute tpus tpu-vm create mask-rcnn-tutorial \\--zone=europe-west4-a \\--accelerator-type=v3-32 \\--version=tpu-vm-tf-2.16.1-pod-pjrt\n``` **Note:** The first time you run `gcloud` on a project it takes about 5 minutes to perform startup tasks such as SSH key propagation and API turnup.\n```\n(vm)$ gcloud compute tpus execution-groups create \\--zone=europe-west4-a \\--name=mask-rcnn-tutorial \\--accelerator-type=v3-32 \u00a0\\--tf-version=2.12.0\n```\n- If you are not automatically logged in to the Compute Engine instance, log in by running the following `ssh` command. When you are logged into the VM, your shell prompt changes from `username@projectname` to `username@vm-name` :\n```\ngcloud compute tpus tpu-vm ssh mask-rcnn-tutorial --zone=europe-west4-a\n```\n```\ngcloud compute ssh mask-rcnn-tutorial --zone=europe-west4-a\n```\n **Key Point:** From this point on, a prefix of **(vm) $** means you should run the command on the Compute Engine VM instance.\n- Install TensorFlow requirements.The command you use depends on whether you are using TPU VMs or TPU Nodes.\n```\n(vm)$ pip3 install -r /usr/share/tpu/models/official/requirements.txt \n```\n```\n(vm)$ pip3 install --user -r /usr/share/models/official/requirements.txt\n```\n- The training script requires an extra package. Install it now:```\n(vm)$ pip3 install --user tensorflow-model-optimization>=0.1.3\n```\n- Set the Cloud TPU name variable.```\n(vm)$ export TPU_NAME=mask-rcnn-tutorial\n```\n- Set up the following environment variables, replacing with the name of your Cloud Storage bucket:```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name\n```\n- Add some additional required environment variables:```\n(vm)$ export RESNET_CHECKPOINT=gs://cloud-tpu-checkpoints/retinanet/resnet50-checkpoint-2018-02-07(vm)$ export DATA_DIR=${STORAGE_BUCKET}/coco(vm)$ export TRAIN_FILE_PATTERN=${DATA_DIR}/train-*(vm)$ export EVAL_FILE_PATTERN=${DATA_DIR}/val-*(vm)$ export VAL_JSON_FILE=${DATA_DIR}/instances_val2017.json(vm)$ export MODEL_DIR=${STORAGE_BUCKET}/mask-rcnn-pod\n```\n- Set the `PYTHONPATH` environment variable:\n```\n(vm)$ export PYTHONPATH=\"/usr/share/tpu/models:${PYTHONPATH}\"(vm)$ export TPU_LOAD_LIBRARY=0\n```\n```\n(vm)$ export PYTHONPATH=\"${PYTHONPATH}:/usr/share/models\"\n```\n- Change to directory that stores the model:\n```\n(vm)$ cd /usr/share/tpu/models/official/vision\n```\n```\n(vm)$ cd /usr/share/models/official/legacy/detection\n```\n- Train the model:This procedure trains the model on the COCO dataset for 10 training steps. This training takes approximately 10 minutes on a v3-32 Cloud TPU. **Note:** Once training starts, you can verify the training is running by monitoring your TPU activity in the [Cloud TPU console](https://console.cloud.google.com/) . From Compute Engine -> TPUs, click on your TPU entry. This will bring up a page with your TPU configuration details and a link to MONITORING. Click on MONITORING to see the current TPU activity.\n```\n(vm)$ python3 train.py \\--tpu=${TPU_NAME} \\--experiment=maskrcnn_resnetfpn_coco \\--mode=train_and_eval \\--config_file=configs/experiments/maskrcnn/r50fpn_640_coco_scratch_tpu4x4.yaml \\--model_dir=${MODEL_DIR} \\--params_override=\"task.train_data.input_path=${TRAIN_FILE_PATTERN},task.validation_data.input_path=${EVAL_FILE_PATTERN},task.annotation_file=${VAL_JSON_FILE},runtime.distribution_strategy=tpu,trainer.train_steps=10,trainer.validation_steps=10,task.train_data.global_batch_size=256,task.validation_data.global_batch_size=256\" \n``````\n(vm)$ python3 main.py \\--strategy_type=tpu \\--tpu=${TPU_NAME} \\--model_dir=${MODEL_DIR} \\--mode=train \\--model=mask_rcnn \\--params_override=\"{train: { batch_size: 128, iterations_per_loop: 500, total_steps: 20, learning_rate: {'learning_rate_levels': [0.008, 0.0008], 'learning_rate_steps': [10000, 13000] }, checkpoint: { path: ${RESNET_CHECKPOINT}, prefix: resnet50/ }, train_file_pattern: ${TRAIN_FILE_PATTERN} }, eval: { val_json_file: ${VAL_JSON_FILE}, eval_file_pattern: ${EVAL_FILE_PATTERN}} }\"\n```\nWhen the training completes, a message similar to the following appears:\n```\n I0706 19:47:16.108213 139955064548416 controller.py:457] train | step: 10 | steps/sec: 0.1 | output: \n {'frcnn_box_loss': 0.05632668,\n  'frcnn_cls_loss': 1.3012192,\n  'learning_rate': 0.008266499,\n  'mask_loss': 1.2371812,\n  'model_loss': 2.9746659,\n  'rpn_box_loss': 0.08227444,\n  'rpn_score_loss': 0.2976642,\n  'total_loss': 4.493513,\n  'training_loss': 4.493513}\ntrain | step:  10 | steps/sec: 0.1 | output: \n {'frcnn_box_loss': 0.05632668,\n  'frcnn_cls_loss': 1.3012192,\n  'learning_rate': 0.008266499,\n  'mask_loss': 1.2371812,\n  'model_loss': 2.9746659,\n  'rpn_box_loss': 0.08227444,\n  'rpn_score_loss': 0.2976642,\n  'total_loss': 4.493513,\n  'training_loss': 4.493513}\n \n```## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.\nAfter running the training, delete the TPU VM and remove your storage bucket.- Disconnect from the Compute Engine instance, if you have not already done so:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete your Cloud TPU and Compute Engine resources. The command you use to delete your resources depends upon whether you are using TPU VMs or TPU Nodes. For more information, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) .\n```\n$ gcloud compute tpus tpu-vm delete mask-rcnn-tutorial \\--zone=europe-west4-a\n```\n```\n$ gcloud compute tpus execution-groups delete mask-rcnn-tutorial \\--zone=europe-west4-a\n```\n- Verify the resources have been deleted by running `gcloud compute tpus execution-groups list` . The deletion might take several minutes. The output from the following command should not include any of the TPU resources created in this tutorial:```\n$ gcloud compute tpus execution-groups list --zone=europe-west4-a\n```\n- Run `gsutil` as shown, replacing with the name of the Cloud Storage bucket you created for this tutorial:```\n$ gsutil rm -r gs://bucket-name\n```\n## What's nextThe TensorFlow Cloud TPU tutorials generally train the model using a sample dataset. The results of this training are not usable for inference. To use a model for inference, you can train the data on a publicly available dataset or your own dataset. TensorFlow models trained on Cloud TPUs generally require datasets to be in [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format.\nYou can use the [dataset conversion toolsample](/tpu/docs/classification-data-conversion) to convert an image classification dataset into TFRecord format. If you are not using an image classification model, you will have to convert your dataset to [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format yourself. For more information, see [TFRecord andtf.Example](https://www.tensorflow.org/tutorials/load_data/tfrecord) .\n### Hyperparameter tuningTo improve the model's performance with your dataset, you can tune the model's hyperparameters. You can find information about hyperparameters common to all TPU supported models on [GitHub](https://github.com/tensorflow/tpu/tree/master/models/hyperparameters) . Information about model-specific hyperparameters can be found in the [sourcecode](https://github.com/tensorflow/tpu/tree/master/models/official) for each model. For more information on hyperparameter tuning, see [Overview ofhyperparameter tuning](/vertex-ai/docs/training/hyperparameter-tuning-overview) and [Tunehyperparameters](https://developers.google.com/machine-learning/guides/text-classification/step-5) .\n### InferenceOnce you have trained your model, you can use it for inference (also called prediction). You can use the [Cloud TPU inference convertertool](/tpu/docs/v5e-inference-converter) to prepare and optimize a TensorFlow model for inference on Cloud TPU v5e. For more information about inference on Cloud TPU v5e, see [Cloud TPU v5e inferenceintroduction](/tpu/docs/v5e-inference) .- Explore the [TPU tools inTensorBoard](/tpu/docs/cloud-tpu-tools) .", "guide": "Cloud TPU"}