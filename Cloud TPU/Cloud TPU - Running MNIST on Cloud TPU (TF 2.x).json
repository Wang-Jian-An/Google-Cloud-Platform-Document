{"title": "Cloud TPU - Running MNIST on Cloud TPU (TF 2.x)", "url": "https://cloud.google.com/tpu/docs/tutorials/mnist-2.x", "abstract": "# Cloud TPU - Running MNIST on Cloud TPU (TF 2.x)\nThis tutorial contains a high-level description of the MNIST model, instructions on downloading the MNIST TensorFlow TPU code sample, and a guide to running the code on Cloud TPU.\n **Note:** This information is also covered in the [Cloud TPU quickstart](/tpu/docs/run-calculation-tensorflow) .\n **Important:** You can use this tutorial with both TPU configurations: TPU VMs and legacy TPU Nodes. The gcloud commands you use depend on the TPU configuration you are using. Each gcloud command is shown in a tabbed section. Choose the tab for the TPU configuration you want to use and the web page shows the appropriate gcloud command. Unless you know you need to use legacy TPU Nodes, we recommend using TPU VMs. For more information about TPU configurations, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) .", "content": "## DisclaimerThis tutorial uses a third-party dataset. Google provides no representation, warranty, or other guarantees about the validity, or any other aspects of this dataset.## Model descriptionThe [MNIST dataset](http://yann.lecun.com/exdb/mnist/) contains a large number of images of hand-written digits in the range 0 to 9, as well as the labels identifying the digit in each image.\nThis tutorial trains a machine learning model to classify images based on the MNIST dataset. After training, the model classifies incoming images into 10 categories (0 to 9) based on what it's learned about handwritten images from the MNIST dataset. You can then send the model an image that it hasn't seen before, and the model identifies the digit in the image based on what the model has learned during training.\nThe MNIST dataset has been split into three parts:- 60,000 examples of training data\n- 10,000 examples of test data\n- 5,000 examples of validation data\nThe model has a mixture of seven layers:- 2 x convolution\n- 2 x max pooling\n- 2 x dense (fully connected)\n- 1 x dropout\nLoss is computed via categorical cross entropy.\nThis version of the MNIST model uses the Keras API, a recommended way to build and run a machine learning model on a Cloud TPU.\nKeras simplifies the model development process by hiding most of the low-level implementation, which also makes it easy to switch between TPU and other test platforms such as GPUs or CPUs.\n **Note:** This model performs training only.\n## Objectives\n- Create a Cloud Storage bucket to hold your dataset and model output.\n- Run the training job.\n- Verify the output results.\n## CostsIn this document, you use the following billable components of Google Cloud:- Compute Engine\n- Cloud TPU\n- Cloud Storage\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \n## Before you beginThis section provides information on setting up Cloud Storage bucket and a Compute Engine VM.\n **Important: ** Set up your Compute Engine VM, your Cloud TPU node and your Cloud Storage bucket in the same region/zone to reduce network latency and network costs.- Open a Cloud Shell window. [Open Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \n- Create a variable for your project's ID.```\nexport PROJECT_ID=project-id\n```\n- Configure Google Cloud CLI to use the project where you want to create Cloud TPU.```\ngcloud config set project ${PROJECT_ID}\n```The first time you run this command in a new Cloud Shell VM, an `Authorize Cloud Shell` page is displayed. Click `Authorize` at the bottom of the page to allow `gcloud` to make GCP API calls with your credentials.\n- Create a Service Account for the Cloud TPU project.```\ngcloud beta services identity create --service tpu.googleapis.com --project $PROJECT_ID\n```The command returns a Cloud TPU Service Account with following format:```\nservice-PROJECT_NUMBER@cloud-tpu.iam.gserviceaccount.com\n```\n- Create a Cloud Storage bucket using the following command: **Note:** In the following command, replace with the name you want to assign to your bucket.```\ngsutil mb -p ${PROJECT_ID} -c standard -l us-central1 gs://bucket-name\n```This Cloud Storage bucket stores the data you use to train your model and the training results. The `gcloud` command used in this tutorial sets up default permissions for the Cloud TPU Service Account you set up in the previous step. If you want finer-grain permissions, review the [access level permissions](/tpu/docs/storage-buckets) .\n- Launch a Compute Engine VM and Cloud TPU using the `gcloud` command. The command you use depends on whether you are using TPU VMs or TPU nodes. For more information, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) .\n```\n$ gcloud compute tpus tpu-vm create mnist-tutorial \\--zone=us-central1-b \\--accelerator-type=v3-8 \\--version=tpu-vm-tf-2.16.1-pjrt \\--preemptible\n``````\n$ gcloud compute tpus execution-groups create \\--name=mnist-tutorial \\--zone=us-central1-b \\--tf-version=2.12.0 \\--machine-type=n1-standard-1 \\--accelerator-type=v3-8 \\--preemptible\n```For more information on the `gcloud` command, see the [gcloud Reference](/sdk/gcloud/reference) .\n- When the `gcloud compute tpus` command has finished executing, verify that your shell prompt has changed from `username@projectname` to `username@vm-name` . This change shows that you are now logged into your Compute Engine VM.If you are not connected to the Compute Engine instance, you can connect by running the following command:\n```\ngcloud compute tpus tpu-vm ssh mnist-tutorial --zone=us-central1-b\n```\n```\ngcloud compute ssh mnist-tutorial --zone=us-central1-b\n```\nAs you continue these instructions, run each command that begins with `(vm)$` in your VM session window.\n- Create an environment variable for the TPU name.\n```\n(vm)$ export TPU_NAME=local\n```\n```\n(vm)$ export TPU_NAME=mnist-tutorial\n```\n- Install TensorFlow requirements.The command you use depends on whether you are using TPU VMs or TPU Nodes.\n```\n(vm)$ pip3 install -r /usr/share/tpu/models/official/requirements.txt\n```\n```\n(vm)$ pip3 install --user tensorflow-model-optimization>=0.1.3\n```## Train the modelThe source code for the MNIST TPU model is available on [GitHub](https://github.com/tensorflow/models/blob/master/official/legacy/image_classification/mnist_main.py) .- Set the following variables. Replace with your bucket name:```\n(vm)$ export STORAGE_BUCKET=gs://bucket-name(vm)$ export MODEL_DIR=${STORAGE_BUCKET}/mnist(vm)$ export DATA_DIR=${STORAGE_BUCKET}/data\n```\n- Set the `PYTHONPATH` environment variable.\n```\n(vm)$ export PYTHONPATH=\"${PYTHONPATH}:/usr/share/tpu/models\"\n```\n```\n(vm)$ export PYTHONPATH=\"${PYTHONPATH}:/usr/share/models\"\n```\n- When creating your TPU, if you set the `--version` parameter to a version ending with `-pjrt` , set the following environment variables to enable the PJRT runtime:```\n\u00a0 (vm)$ export NEXT_PLUGGABLE_DEVICE_USE_C_API=true\u00a0 (vm)$ export TF_PLUGGABLE_DEVICE_LIBRARY_PATH=/lib/libtpu.so\n```\n- Change to directory that stores the model:\n```\n(vm)$ cd /usr/share/tpu/models/official/legacy/image_classification\n```\n```\n(vm)$ cd /usr/share/models/official/legacy/image_classification\n```\n- Run the MNIST training script:```\n(vm)$ python3 mnist_main.py \\\u00a0 --tpu=${TPU_NAME} \\\u00a0 --model_dir=${MODEL_DIR} \\\u00a0 --data_dir=${DATA_DIR} \\\u00a0 --train_epochs=10 \\\u00a0 --distribution_strategy=tpu \\\u00a0 --download\n```\nThe training script runs in under 5 minutes on a v3-8 Cloud TPU and displays output similar to:\n```\nRun stats:\n{\n 'accuracy_top_1': 0.9762369990348816,\n 'eval_loss': 0.07863274961709976,\n 'loss': 0.1111728847026825,\n 'training_accuracy_top_1': 0.966645359992981\n}\n```## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- Disconnect from the Compute Engine instance, if you have not already done so:```\n(vm)$ exit\n```Your prompt should now be `username@projectname` , showing you are in the Cloud Shell.\n- Delete your Cloud TPU and Compute Engine resources. The command you use to delete your resources depends upon whether you are using TPU VMs or TPU Nodes. For more information, see [System Architecture](/tpu/docs/system-architecture-tpu-vm) .\n```\n$ gcloud compute tpus tpu-vm delete mnist-tutorial \\--zone=us-central1-b\n```\n```\n$ gcloud compute tpus execution-groups delete mnist-tutorial \\--zone=us-central1-b\n```\n- Verify the resources have been deleted by running `gcloud compute tpus execution-groups list` . The deletion might take several minutes. The output from the following command should not include any of the resources created in this tutorial:\n```\n$ gcloud compute tpus tpu-vm list --zone=us-central1-b\n```\n```\n$ gcloud compute tpus execution-groups list --zone=us-central1-b\n```\n- Delete your Cloud Storage bucket using `gsutil` as shown below. Replace with the name of your Cloud Storage bucket.```\n$ gsutil rm -r gs://bucket-name\n``` **Note:** For free storage limits and other pricing information, see the [Cloud Storage pricing guide](/storage/pricing) .\n## What's nextThe TensorFlow Cloud TPU tutorials generally train the model using a sample dataset. The results of this training are not usable for inference. To use a model for inference, you can train the data on a publicly available dataset or your own dataset. TensorFlow models trained on Cloud TPUs generally require datasets to be in [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format.\nYou can use the [dataset conversion toolsample](/tpu/docs/classification-data-conversion) to convert an image classification dataset into TFRecord format. If you are not using an image classification model, you will have to convert your dataset to [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) format yourself. For more information, see [TFRecord andtf.Example](https://www.tensorflow.org/tutorials/load_data/tfrecord) .\n### Hyperparameter tuningTo improve the model's performance with your dataset, you can tune the model's hyperparameters. You can find information about hyperparameters common to all TPU supported models on [GitHub](https://github.com/tensorflow/tpu/tree/master/models/hyperparameters) . Information about model-specific hyperparameters can be found in the [sourcecode](https://github.com/tensorflow/tpu/tree/master/models/official) for each model. For more information on hyperparameter tuning, see [Overview ofhyperparameter tuning](/vertex-ai/docs/training/hyperparameter-tuning-overview) and [Tunehyperparameters](https://developers.google.com/machine-learning/guides/text-classification/step-5) .\n### InferenceOnce you have trained your model, you can use it for inference (also called prediction). You can use the [Cloud TPU inference convertertool](/tpu/docs/v5e-inference-converter) to prepare and optimize a TensorFlow model for inference on Cloud TPU v5e. For more information about inference on Cloud TPU v5e, see [Cloud TPU v5e inferenceintroduction](/tpu/docs/v5e-inference) .- Run a Cloud TPU [colab](https://colab.sandbox.google.com/github/GoogleCloudPlatform/training-data-analyst/blob/master/courses/fast-and-lean-data-science/03_Flower_pictures_to_TFRecords.ipynb) that demonstrates how to train an image classification model using your own image data.\n- Explore the other [Cloud TPU tutorials](/tpu/docs/tutorials) .\n- Learn to use the [TPU monitoring tools inTensorBoard](/tpu/docs/cloud-tpu-tools) .\n- Verify performance on a large-scale model by [running the ResNetsample](/tpu/docs/tutorials/resnet) .", "guide": "Cloud TPU"}