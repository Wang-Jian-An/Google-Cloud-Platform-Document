{"title": "Apigee - Understand Edges and Edge conditions", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Understand Edges and Edge conditions\n**Announcement:** Application Integration is now available for your Google Cloud project. You can now use both Apigee Integration and Application Integration within the same Google Cloud project. [Learn more](/apigee/docs/api-platform/integration/using-application-integration)\n", "content": "## Edge\nAn edge is a connection between any two elements in an integration. The connection denotes the direction of the control flow from one element(task or trigger) to another. The connection can be between a [trigger](/apigee/docs/api-platform/integration/trigger-overview) and a [task](/apigee/docs/api-platform/integration/task-overview) or between a task and another task.  By using an edge along with fork and join, you can implement complex branching and conditions in your integration. For more information, see [Forks and joins](/apigee/docs/api-platform/integration/forks-joins) .\nFor example, if there is an edge from a **Send Email** task to a **Call Integration** task, it means that after the **Send Email** task is run, the next task to run is the **Call Integration** task. An edge also supports conditional checks. Before the control passes to the next task, you can check for a condition in the edge and based on the result, decide to run the task or not. For more information about the supported conditional checks, see [Edge conditions](#edge_condition) .## \n Edge conditions\nEdge conditions let you specify the conditions that must be met for control of an integration to pass to the task connected by the edge. The task is run the specified conditions are met. Edge conditions are useful in cases where there are multiple incoming edges to a task, where each edge checks for specific conditions before the task.\nSpecify edge conditions using the following steps:\n- In the [Apigee UI](https://apigee.google.com) , select your.\n- Click **Develop > Integrations** .\n- Select an existing integration or create a new integration by clicking **Create Integration** .If you are creating a new integration:- Enter a name and description in the **Create Integration** dialog.\n- Select a **Region** for the integration from the list of supported regions.\n- Click **Create** .\nThis opens the integration in the .\n- In thenavigation bar, click **+Add a task/trigger > Tasks** to view the list of available tasks.\n- Select an existing integration or create a new one.\n- In the integration editor, click on the edge to open the Edge configuration pane.\n- Configure the edge:- **Label** (optional): Add a custom name for the edge.\n- **Condition** : Set an edge condition using the [supported operators](#operators) and [functions](#functions) .Important tips for specifying conditions:- To reference a variable value, use dollar sign notation (`$`) before and after the variable name. For example, if you want to check if a variable`productId`is greater than 10,  the syntax is`$productId$ > 10`.\n- Text without dollar sign notation is interpreted as a literal value. For example the text`customerId`is interpreted as a literal value.\n- To check multiple conditions, split the conditions into individual checks and combine them using **AND** or **OR** . For example, instead of using`$productId$ > 5 AND < 9`, use`$productId$ > 5 AND $productId$ < 9`.## Supported operators\nThe following table describes the supported operators available for use in edge conditions.\n| 0  | 1                           | 2              |\n|:---------|:-------------------------------------------------------------------------------------------------------------|:------------------------------------------------------|\n| Operator | Description                         | Example            |\n| =  | Checks for equality between two values                  | $var$ = 'value'          |\n| !=  | Checks for inequality between two values                  | $var$ != 'value'          |\n| <  | Checks if a value is less than another value                 | 5 < 10            |\n| <=  | Checks if a value is less than or equal to another value              | $var$ <= 5           |\n| >  | Checks if a value is greater than another value                | 1 > 0             |\n| >=  | Checks if a value is greater than or equal to another value             | $var$ >= 0           |\n| :  | Checks if a string contains a substring within it, or checks if a list contains a specific primitive value. | $longString$ : \"substring\" $list of values$ : 'value' |\n| AND  | Checks two expressions and returns true if both the expressions evaluate to true.       | $a$ > $b$ AND $b$ < $c$        |\n| OR  | Checks two expressions and returns true if any one of the expressions evaluates to true.      | $a$ > $b$ OR $b$ < $c$        |\n| NOT  | Negation operator. Flips the result of an expression.              | NOT($var$ = \"value\")         |\n## Supported functions\nThe following table describes supported functions available for use in edge conditions.\n| 0      | 1              |\n|:-------------------------|:------------------------------------------------------|\n| Function     | Description           |\n| exists(VARIABLE)   | Checks if a given variable exists      |\n| does_not_exist(VARIABLE) | Checks if a given variable does not exist    |\n| is_empty(VARIABLE)  | Checks if a given variable is a list AND is empty  |\n| is_not_empty(VARIABLE) | Checks if a given variable is a list AND is not empty |", "guide": "Apigee"}