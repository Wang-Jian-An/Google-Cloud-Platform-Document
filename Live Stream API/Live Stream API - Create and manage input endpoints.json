{"title": "Live Stream API - Create and manage input endpoints", "url": "https://cloud.google.com/livestream/docs/how-to/create-input-endpoints", "abstract": "# Live Stream API - Create and manage input endpoints\nThis page shows you how to create and manage Live Stream API input endpoints. You send input video streams to these endpoints.\n", "content": "## Set up your Google Cloud project and authentication\n[Google Cloud project](/docs/overview#projects)\n[Before you begin](/livestream/docs/how-to/before-you-begin)\n## Create an input endpoint\nTo create an input endpoint, use the [projects.locations.inputs.create](/livestream/docs/reference/rest/v1/projects.locations.inputs/create) method.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location in which to create the input  endpoint; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the new input  endpoint to create (to which you send your input stream). This value must be 1-63 characters, begin and end with`[a-z0-9]`, and  can contain dashes (-) between characters. For example,`my-input`.\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/inputs/INPUT_ID\",\n \"verb\": \"create\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\nThis command creates a long-running operation (LRO) that you can use to track the progress of your request. See\n [Manage long-running operations ](/livestream/docs/how-to/manage-long-running-operations) \nfor more information.\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/CreateInputAsync.cs) \n```\nusing Google.Api.Gax.ResourceNames;using Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using System.Threading.Tasks;public class CreateInputSample{\u00a0 \u00a0 public async Task<Input> CreateInputAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string inputId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 CreateInputRequest request = new CreateInputRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ParentAsLocationName = LocationName.FromProjectLocation(projectId, locationId),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputId = inputId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input = new Input\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type = Input.Types.Type.RtmpPush\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Input, OperationMetadata> response = await client.CreateInputAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Input, OperationMetadata> completedResponse = await response.PollUntilCompletedAsync();\u00a0 \u00a0 \u00a0 \u00a0 // Retrieve the operation result.\u00a0 \u00a0 \u00a0 \u00a0 return completedResponse.Result;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/create_input.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// createInput creates an input endpoint. You send an input video stream to this// endpoint.func createInput(w io.Writer, projectID, location, inputID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // inputID := \"my-input\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.CreateInputRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: \u00a0fmt.Sprintf(\"projects/%s/locations/%s\", projectID, location),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputId: inputID,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input: &livestreampb.Input{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type: livestreampb.Input_RTMP_PUSH,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Creates the input.\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.CreateInput(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"CreateInput: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Input: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/CreateInput.java) \n```\nimport com.google.cloud.video.livestream.v1.CreateInputRequest;import com.google.cloud.video.livestream.v1.Input;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.LocationName;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class CreateInput {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String inputId = \"my-input-id\";\u00a0 \u00a0 createInput(projectId, location, inputId);\u00a0 }\u00a0 public static void createInput(String projectId, String location, String inputId)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 var createInputRequest =\u00a0 \u00a0 \u00a0 \u00a0 CreateInputRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(LocationName.of(projectId, location).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInputId(inputId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInput(Input.newBuilder().setType(Input.Type.RTMP_PUSH).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // First API call in a project can take up to 15 minutes.\u00a0 \u00a0 Input result =\u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient.createInputAsync(createInputRequest).get(15, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Input: \" + result.getName());\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/createInput.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// inputId = 'my-input';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function createInput() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 parent: livestreamServiceClient.locationPath(projectId, location),\u00a0 \u00a0 inputId: inputId,\u00a0 \u00a0 input: {\u00a0 \u00a0 \u00a0 type: 'RTMP_PUSH',\u00a0 \u00a0 },\u00a0 };\u00a0 // Run request\u00a0 const [operation] = await livestreamServiceClient.createInput(request);\u00a0 const response = await operation.promise();\u00a0 const [input] = response;\u00a0 console.log(`Input: ${input.name}`);}createInput();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/create_input.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Input;use Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\CreateInputRequest;/**\u00a0* Creates an input. You send an input video stream to this endpoint.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the input\u00a0* @param string \u00a0$inputId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the input to be created\u00a0*/function create_input(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $inputId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $parent = $livestreamClient->locationName($callingProjectId, $location);\u00a0 \u00a0 $input = (new Input())\u00a0 \u00a0 \u00a0 \u00a0 ->setType(Input\\Type::RTMP_PUSH);\u00a0 \u00a0 // Run the input creation request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new CreateInputRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setParent($parent)\u00a0 \u00a0 \u00a0 \u00a0 ->setInput($input)\u00a0 \u00a0 \u00a0 \u00a0 ->setInputId($inputId);\u00a0 \u00a0 $operationResponse = $livestreamClient->createInput($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 $result = $operationResponse->getResult();\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Input: %s' . PHP_EOL, $result->getName());\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/create_input.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def create_input(\u00a0 \u00a0 project_id: str, location: str, input_id: str) -> live_stream_v1.types.Input:\u00a0 \u00a0 \"\"\"Creates an input.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location in which to create the input.\u00a0 \u00a0 \u00a0 \u00a0 input_id: The user-defined input ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 parent = f\"projects/{project_id}/locations/{location}\"\u00a0 \u00a0 input = live_stream_v1.types.Input(\u00a0 \u00a0 \u00a0 \u00a0 type_=\"RTMP_PUSH\",\u00a0 \u00a0 )\u00a0 \u00a0 operation = client.create_input(parent=parent, input=input, input_id=input_id)\u00a0 \u00a0 response = operation.result(900)\u00a0 \u00a0 print(f\"Input: {response.name}\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/create_input.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Create an input endpoint\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param input_id [String] Your input name (e.g. \"my-input\")#def create_input project_id:, location:, input_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the parent.\u00a0 parent = client.location_path project: project_id, location: location\u00a0 # Set the input fields.\u00a0 new_input = {\u00a0 \u00a0 type: Google::Cloud::Video::LiveStream::V1::Input::Type::RTMP_PUSH\u00a0 }\u00a0 operation = client.create_input parent: parent, input: new_input, input_id: input_id\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print the input name.\u00a0 puts \"Input: #{operation.response.name}\"end\n```\n## Get input endpoint details\nTo get the details of the input endpoint, use the [projects.locations.inputs.get](/livestream/docs/reference/rest/v1/projects.locations.inputs/get) method.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your input endpoint is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: the user-defined identifier for the  input endpoint\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/inputs/INPUT_ID\",\n \"createTime\": CREATE_TIME,\n \"updateTime\": UPDATE_TIME,\n \"type\": \"RTMP_PUSH\",\n \"uri\": INPUT_STREAM_URI, # For example, \"rtmp://1.2.3.4/live/b8ebdd94-c8d9-4d88-a16e-b963c43a953b\",\n \"tier\": \"HD\"\n}\n```\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/GetInput.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;public class GetInputSample{\u00a0 \u00a0 public Input GetInput(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string inputId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 GetInputRequest request = new GetInputRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputName = InputName.FromProjectLocationInput(projectId, locationId, inputId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Input response = client.GetInput(request);\u00a0 \u00a0 \u00a0 \u00a0 return response;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/get_input.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// getInput gets a previously-created input endpoint.func getInput(w io.Writer, projectID, location, inputID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // inputID := \"my-input-id\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.GetInputRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/inputs/%s\", projectID, location, inputID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := client.GetInput(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"GetInput: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Input: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/GetInput.java) \n```\nimport com.google.cloud.video.livestream.v1.Input;import com.google.cloud.video.livestream.v1.InputName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import java.io.IOException;public class GetInput {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String inputId = \"my-input-id\";\u00a0 \u00a0 getInput(projectId, location, inputId);\u00a0 }\u00a0 public static void getInput(String projectId, String location, String inputId)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. In this example, try-with-resources is used\u00a0 \u00a0 // which automatically calls close() on the client to clean up resources.\u00a0 \u00a0 try (LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create()) {\u00a0 \u00a0 \u00a0 InputName name = InputName.of(projectId, location, inputId);\u00a0 \u00a0 \u00a0 Input response = livestreamServiceClient.getInput(name);\u00a0 \u00a0 \u00a0 System.out.println(\"Input: \" + response.getName());\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/getInput.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// inputId = 'my-input';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function getInput() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 name: livestreamServiceClient.inputPath(projectId, location, inputId),\u00a0 };\u00a0 const [input] = await livestreamServiceClient.getInput(request);\u00a0 console.log(`Input: ${input.name}`);}getInput();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/get_input.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\GetInputRequest;/**\u00a0* Gets an input.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the input\u00a0* @param string \u00a0$inputId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the input\u00a0*/function get_input(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $inputId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $formattedName = $livestreamClient->inputName($callingProjectId, $location, $inputId);\u00a0 \u00a0 // Get the input.\u00a0 \u00a0 $request = (new GetInputRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($formattedName);\u00a0 \u00a0 $response = $livestreamClient->getInput($request);\u00a0 \u00a0 // Print results\u00a0 \u00a0 printf('Input: %s' . PHP_EOL, $response->getName());}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/get_input.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def get_input(\u00a0 \u00a0 project_id: str, location: str, input_id: str) -> live_stream_v1.types.Input:\u00a0 \u00a0 \"\"\"Gets an input.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the input.\u00a0 \u00a0 \u00a0 \u00a0 input_id: The user-defined input ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\u00a0 \u00a0 response = client.get_input(name=name)\u00a0 \u00a0 print(f\"Input: {response.name}\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/get_input.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Get an input endpoint\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param input_id [String] Your input name (e.g. \"my-input\")#def get_input project_id:, location:, input_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the input.\u00a0 name = client.input_path project: project_id, location: location, input: input_id\u00a0 # Get the input.\u00a0 input = client.get_input name: name\u00a0 # Print the input name.\u00a0 puts \"Input: #{input.name}\"end\n```\n## Update an input endpoint\nTo update an input endpoint, use the [projects.locations.inputs.patch](/livestream/docs/reference/rest/v1/projects.locations.inputs/patch) method.\nThe following example updates the video cropping fields. Not all fields can be updated; see the [list of supported fields](/livestream/docs/reference/rest/v1/projects.locations.inputs/patch#body.QUERY_PARAMETERS.update_mask) .\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location in which to create the input  endpoint; use one of the [supported regions](/livestream/docs/locations) \n- ``: the user-defined identifier for the  input endpoint\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/inputs/INPUT_ID\",\n \"verb\": \"update\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\nThis command creates a long-running operation (LRO) that you can use to track the progress of your request. See\n [Manage long-running operations ](/livestream/docs/how-to/manage-long-running-operations) \nfor more information.\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/UpdateInputAsync.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using Google.Protobuf.WellKnownTypes;using System.Threading.Tasks;public class UpdateInputSample{\u00a0 \u00a0 public async Task<Input> UpdateInputAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string inputId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 UpdateInputRequest request = new UpdateInputRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input = new Input\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputName = InputName.FromProjectLocationInput(projectId, locationId, inputId),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PreprocessingConfig = new PreprocessingConfig\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Crop = new PreprocessingConfig.Types.Crop\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TopPixels = 5,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BottomPixels = 5\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UpdateMask = new FieldMask { Paths = { \"preprocessing_config\" } }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Input, OperationMetadata> response = await client.UpdateInputAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Input, OperationMetadata> completedResponse = await response.PollUntilCompletedAsync();\u00a0 \u00a0 \u00a0 \u00a0 // Retrieve the operation result.\u00a0 \u00a0 \u00a0 \u00a0 return completedResponse.Result;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/update_input.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/protobuf/types/known/fieldmaskpb\")// updateInput updates an existing input endpoint. This sample adds a// preprocessing configuration to an existing input.func updateInput(w io.Writer, projectID, location, inputID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // inputID := \"my-input\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.UpdateInputRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input: &livestreampb.Input{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/inputs/%s\", projectID, location, inputID),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PreprocessingConfig: &livestreampb.PreprocessingConfig{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Crop: &livestreampb.PreprocessingConfig_Crop{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TopPixels: \u00a0 \u00a05,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BottomPixels: 5,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UpdateMask: &fieldmaskpb.FieldMask{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Paths: []string{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"preprocessing_config\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Updates the input.\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.UpdateInput(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"UpdateInput: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Updated input: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/UpdateInput.java) \n```\nimport com.google.cloud.video.livestream.v1.Input;import com.google.cloud.video.livestream.v1.InputName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.PreprocessingConfig;import com.google.cloud.video.livestream.v1.PreprocessingConfig.Crop;import com.google.cloud.video.livestream.v1.UpdateInputRequest;import com.google.protobuf.FieldMask;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class UpdateInput {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String inputId = \"my-input-id\";\u00a0 \u00a0 updateInput(projectId, location, inputId);\u00a0 }\u00a0 public static void updateInput(String projectId, String location, String inputId)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 var updateInputRequest =\u00a0 \u00a0 \u00a0 \u00a0 UpdateInputRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInput(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(InputName.of(projectId, location, inputId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setPreprocessingConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PreprocessingConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setCrop(Crop.newBuilder().setTopPixels(5).setBottomPixels(5).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setUpdateMask(FieldMask.newBuilder().addPaths(\"preprocessing_config\").build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // First API call in a project can take up to 10 minutes.\u00a0 \u00a0 Input result =\u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient.updateInputAsync(updateInputRequest).get(10, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Updated input: \" + result.getName());\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/updateInput.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// inputId = 'my-input';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function updateInput() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 input: {\u00a0 \u00a0 \u00a0 name: livestreamServiceClient.inputPath(projectId, location, inputId),\u00a0 \u00a0 \u00a0 preprocessingConfig: {\u00a0 \u00a0 \u00a0 \u00a0 crop: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 topPixels: 5,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bottomPixels: 5,\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 \u00a0 updateMask: {\u00a0 \u00a0 \u00a0 paths: ['preprocessing_config'],\u00a0 \u00a0 },\u00a0 };\u00a0 // Run request\u00a0 const [operation] = await livestreamServiceClient.updateInput(request);\u00a0 const response = await operation.promise();\u00a0 const [input] = response;\u00a0 console.log(`Updated input: ${input.name}`);}updateInput();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/update_input.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Input;use Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\PreprocessingConfig;use Google\\Cloud\\Video\\LiveStream\\V1\\UpdateInputRequest;use Google\\Protobuf\\FieldMask;/**\u00a0* Updates an input.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the input\u00a0* @param string \u00a0$inputId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the input to be updated\u00a0*/function update_input(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $inputId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $formattedName = $livestreamClient->inputName($callingProjectId, $location, $inputId);\u00a0 \u00a0 $crop = (new PreprocessingConfig\\Crop())\u00a0 \u00a0 \u00a0 \u00a0 ->setTopPixels(5)\u00a0 \u00a0 \u00a0 \u00a0 ->setBottomPixels(5);\u00a0 \u00a0 $config = (new PreprocessingConfig())\u00a0 \u00a0 \u00a0 \u00a0 ->setCrop($crop);\u00a0 \u00a0 $input = (new Input())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($formattedName)\u00a0 \u00a0 \u00a0 \u00a0 ->setPreprocessingConfig($config);\u00a0 \u00a0 $updateMask = new FieldMask([\u00a0 \u00a0 \u00a0 \u00a0 'paths' => ['preprocessing_config']\u00a0 \u00a0 ]);\u00a0 \u00a0 // Run the input update request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new UpdateInputRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setInput($input)\u00a0 \u00a0 \u00a0 \u00a0 ->setUpdateMask($updateMask);\u00a0 \u00a0 $operationResponse = $livestreamClient->updateInput($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 $result = $operationResponse->getResult();\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Updated input: %s' . PHP_EOL, $result->getName());\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/update_input.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)from google.protobuf import field_mask_pb2 as field_maskdef update_input(\u00a0 \u00a0 project_id: str, location: str, input_id: str) -> live_stream_v1.types.Input:\u00a0 \u00a0 \"\"\"Updates an input.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the input.\u00a0 \u00a0 \u00a0 \u00a0 input_id: The user-defined input ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\u00a0 \u00a0 input = live_stream_v1.types.Input(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 preprocessing_config=live_stream_v1.types.PreprocessingConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 crop=live_stream_v1.types.PreprocessingConfig.Crop(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 top_pixels=5,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bottom_pixels=5,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 )\u00a0 \u00a0 update_mask = field_mask.FieldMask(paths=[\"preprocessing_config\"])\u00a0 \u00a0 operation = client.update_input(input=input, update_mask=update_mask)\u00a0 \u00a0 response = operation.result(600)\u00a0 \u00a0 print(f\"Updated input: {response.name}\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/update_input.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Update an input endpoint\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param input_id [String] Your input name (e.g. \"my-input\")#def update_input project_id:, location:, input_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the input.\u00a0 name = client.input_path project: project_id, location: location, input: input_id\u00a0 # Set the update mask.\u00a0 update_mask = { paths: [\"preprocessing_config\"] }\u00a0 # Update the input pre-processing config field.\u00a0 update_input = {\u00a0 \u00a0 name: name,\u00a0 \u00a0 preprocessing_config: {\u00a0 \u00a0 \u00a0 crop: {\u00a0 \u00a0 \u00a0 \u00a0 top_pixels: 5,\u00a0 \u00a0 \u00a0 \u00a0 bottom_pixels: 5\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }\u00a0 operation = client.update_input update_mask: update_mask, input: update_input\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print the input name.\u00a0 puts \"Updated input: #{operation.response.name}\"\u00a0 puts \"Updated pre-processing config: #{operation.response.preprocessing_config.crop.top_pixels}\"end\n```\n## List input endpoints\nTo list all of the input endpoints you created in a location, use the [projects.locations.inputs.list](/livestream/docs/reference/rest/v1/projects.locations.inputs/list) method.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your input endpoint is  located; use one of the [supported regions](/livestream/docs/locations) \nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"inputs\": [ {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/inputs/my-input\",\n  \"createTime\": CREATE_TIME,\n  \"updateTime\": UPDATE_TIME,\n  \"type\": \"RTMP_PUSH\",\n  \"uri\": INPUT_STREAM_URI, # For example, \"rtmp://1.2.3.4/live/b8ebdd94-c8d9-4d88-a16e-b963c43a953b\",\n  \"tier\": \"HD\"\n },\n {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/inputs/my-input2\",\n  \"createTime\": CREATE_TIME,\n  \"updateTime\": UPDATE_TIME,\n  \"type\": \"RTMP_PUSH\",\n  \"uri\": INPUT_STREAM_URI, # For example, \"rtmp://1.2.3.4/live/b8ebdd94-c8d9-4d88-a16e-b963c43a953b\",\n  \"tier\": \"HD\"\n }\n ]\n}\n```\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/ListInputs.cs) \n```\nusing Google.Api.Gax;using Google.Api.Gax.ResourceNames;using Google.Cloud.Video.LiveStream.V1;using System.Collections.Generic;using System.Linq;public class ListInputsSample{\u00a0 \u00a0 public IList<Input> ListInputs(\u00a0 \u00a0 \u00a0 \u00a0 string projectId, string regionId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 ListInputsRequest request = new ListInputsRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ParentAsLocationName = LocationName.FromProjectLocation(projectId, regionId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 PagedEnumerable<ListInputsResponse, Input> response = client.ListInputs(request);\u00a0 \u00a0 \u00a0 \u00a0 // The returned sequence will lazily perform RPCs as it's being iterated over.\u00a0 \u00a0 \u00a0 \u00a0 return response.ToList();\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/list_inputs.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/api/iterator\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// listInputs lists all inputs for a given location.func listInputs(w io.Writer, projectID, location string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.ListInputsRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: fmt.Sprintf(\"projects/%s/locations/%s\", projectID, location),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 it := client.ListInputs(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintln(w, \"Inputs:\")\u00a0 \u00a0 \u00a0 \u00a0 for {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response, err := it.Next()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err == iterator.Done {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"ListInputs: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintln(w, response.GetName())\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/ListInputs.java) \n```\nimport com.google.cloud.video.livestream.v1.Input;import com.google.cloud.video.livestream.v1.ListInputsRequest;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.LocationName;import java.io.IOException;public class ListInputs {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 listInputs(projectId, location);\u00a0 }\u00a0 public static void listInputs(String projectId, String location) throws IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. In this example, try-with-resources is used\u00a0 \u00a0 // which automatically calls close() on the client to clean up resources.\u00a0 \u00a0 try (LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create()) {\u00a0 \u00a0 \u00a0 var listInputsRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ListInputsRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(LocationName.of(projectId, location).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 LivestreamServiceClient.ListInputsPagedResponse response =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient.listInputs(listInputsRequest);\u00a0 \u00a0 \u00a0 System.out.println(\"Inputs:\");\u00a0 \u00a0 \u00a0 for (Input input : response.iterateAll()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(input.getName());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/listInputs.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function listInputs() {\u00a0 const iterable = await livestreamServiceClient.listInputsAsync({\u00a0 \u00a0 parent: livestreamServiceClient.locationPath(projectId, location),\u00a0 });\u00a0 console.info('Inputs:');\u00a0 for await (const response of iterable) {\u00a0 \u00a0 console.log(response.name);\u00a0 }}listInputs();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/list_inputs.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\ListInputsRequest;/**\u00a0* Lists the inputs for a given location.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the inputs\u00a0*/function list_inputs(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $parent = $livestreamClient->locationName($callingProjectId, $location);\u00a0 \u00a0 $request = (new ListInputsRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setParent($parent);\u00a0 \u00a0 $response = $livestreamClient->listInputs($request);\u00a0 \u00a0 // Print the input list.\u00a0 \u00a0 $inputs = $response->iterateAllElements();\u00a0 \u00a0 print('Inputs:' . PHP_EOL);\u00a0 \u00a0 foreach ($inputs as $input) {\u00a0 \u00a0 \u00a0 \u00a0 printf('%s' . PHP_EOL, $input->getName());\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/list_inputs.py) \n```\nimport argparsefrom google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,\u00a0 \u00a0 pagers,)def list_inputs(project_id: str, location: str) -> pagers.ListInputsPager:\u00a0 \u00a0 \"\"\"Lists all inputs in a location.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the inputs.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 parent = f\"projects/{project_id}/locations/{location}\"\u00a0 \u00a0 page_result = client.list_inputs(parent=parent)\u00a0 \u00a0 print(\"Inputs:\")\u00a0 \u00a0 responses = []\u00a0 \u00a0 for response in page_result:\u00a0 \u00a0 \u00a0 \u00a0 print(response.name)\u00a0 \u00a0 \u00a0 \u00a0 responses.append(response)\u00a0 \u00a0 return responses\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/list_inputs.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### List the input endpoints\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")#def list_inputs project_id:, location:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the parent.\u00a0 parent = client.location_path project: project_id, location: location\u00a0 # Get the list of inputs.\u00a0 response = client.list_inputs parent: parent\u00a0 puts \"Inputs:\"\u00a0 # Print out all inputs.\u00a0 response.each do |input|\u00a0 \u00a0 puts input.name\u00a0 endend\n```\n## Delete an input endpoint\nTo delete an input endpoint, use the [projects.locations.inputs.delete](/livestream/docs/reference/rest/v1/projects.locations.inputs/delete) method.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your input endpoint is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: the user-defined identifier for the  input endpoint\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/inputs/INPUT_ID\",\n \"verb\": \"delete\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\nThis command creates a long-running operation (LRO) that you can use to track the progress of your request. See\n [Manage long-running operations ](/livestream/docs/how-to/manage-long-running-operations) \nfor more information.\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/DeleteInputAsync.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using Google.Protobuf.WellKnownTypes;using System.Threading.Tasks;public class DeleteInputSample{\u00a0 \u00a0 public async Task DeleteInputAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string inputId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 DeleteInputRequest request = new DeleteInputRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputName = InputName.FromProjectLocationInput(projectId, locationId, inputId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Empty, OperationMetadata> response = await client.DeleteInputAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 await response.PollUntilCompletedAsync();\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/delete_input.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// deleteInput deletes a previously-created input endpoint.func deleteInput(w io.Writer, projectID, location, inputID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // inputID := \"my-input\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.DeleteInputRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/inputs/%s\", projectID, location, inputID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.DeleteInput(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"DeleteInput: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 err = op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Deleted input\")\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/DeleteInput.java) \n```\nimport com.google.cloud.video.livestream.v1.DeleteInputRequest;import com.google.cloud.video.livestream.v1.InputName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class DeleteInput {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String inputId = \"my-input-id\";\u00a0 \u00a0 deleteInput(projectId, location, inputId);\u00a0 }\u00a0 public static void deleteInput(String projectId, String location, String inputId)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 var deleteInputRequest =\u00a0 \u00a0 \u00a0 \u00a0 DeleteInputRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(InputName.of(projectId, location, inputId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // First API call in a project can take up to 10 minutes.\u00a0 \u00a0 livestreamServiceClient.deleteInputAsync(deleteInputRequest).get(10, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Deleted input\");\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/deleteInput.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// inputId = 'my-input';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function deleteInput() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 name: livestreamServiceClient.inputPath(projectId, location, inputId),\u00a0 };\u00a0 // Run request\u00a0 const [operation] = await livestreamServiceClient.deleteInput(request);\u00a0 await operation.promise();\u00a0 console.log('Deleted input');}deleteInput();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/delete_input.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\DeleteInputRequest;/**\u00a0* Deletes an input.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the input\u00a0* @param string \u00a0$inputId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the input to be deleted\u00a0*/function delete_input(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $inputId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $formattedName = $livestreamClient->inputName($callingProjectId, $location, $inputId);\u00a0 \u00a0 // Run the input deletion request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new DeleteInputRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($formattedName);\u00a0 \u00a0 $operationResponse = $livestreamClient->deleteInput($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 // Print status\u00a0 \u00a0 \u00a0 \u00a0 printf('Deleted input %s' . PHP_EOL, $inputId);\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/delete_input.py) \n```\nimport argparsefrom google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)from google.protobuf import empty_pb2 as emptydef delete_input(project_id: str, location: str, input_id: str) -> empty.Empty:\u00a0 \u00a0 \"\"\"Deletes an input.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the input.\u00a0 \u00a0 \u00a0 \u00a0 input_id: The user-defined input ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\u00a0 \u00a0 operation = client.delete_input(name=name)\u00a0 \u00a0 response = operation.result(600)\u00a0 \u00a0 print(\"Deleted input\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/delete_input.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Delete an input endpoint\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param input_id [String] Your input name (e.g. \"my-input\")#def delete_input project_id:, location:, input_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the input.\u00a0 name = client.input_path project: project_id, location: location, input: input_id\u00a0 # Delete the input.\u00a0 operation = client.delete_input name: name\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print a success message.\u00a0 puts \"Deleted input\"end\n```\n## What's next\nLearn how to [create and manage channels](/livestream/docs/how-to/create-channels) that use the input endpoint.", "guide": "Live Stream API"}