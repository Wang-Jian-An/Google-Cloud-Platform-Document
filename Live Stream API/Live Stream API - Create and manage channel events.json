{"title": "Live Stream API - Create and manage channel events", "url": "https://cloud.google.com/livestream/docs/how-to/create-channel-events", "abstract": "# Live Stream API - Create and manage channel events\nThis page shows you how to create and manage Live Stream API channel events. A channel event is a sub-resource of a channel. You can use a channel event to execute operations on a channel resource without needing to stop the channel.\n", "content": "## Set up your Google Cloud project and authentication\n[Google Cloud project](/docs/overview#projects)\n[Before you begin](/livestream/docs/how-to/before-you-begin)\n## Prerequisites\nYou must create the following resources before creating a channel event:\n- [Create an input endpoint](/livestream/docs/how-to/create-input-endpoints#create_input_endpoint) \n- [Create a channel](/livestream/docs/how-to/create-channels#create_channel) ## Create a channel event\nMake sure to [start the channel](/livestream/docs/how-to/create-channels#start_channel) before creating a channel event.\nTo create a channel event, use the [projects.locations.channels.events.create](/livestream/docs/reference/rest/v1/projects.locations.channels.events/create) method. The following event types are supported:\n- [Ad break event](#ad-break-event) \n- [Insert slate event](#insert-slate-event) \n- [Return to program event](#return-to-program-event) \n- [Mute event](#mute-event) \n- [Unmute event](#unmute-event) \n- [Switch input event](#switch-input-event) \nEvents can be [executed immediately](/livestream/docs/reference/rest/v1/projects.locations.channels.events#Event.FIELDS.execute_now) or [scheduled to run](/livestream/docs/reference/rest/v1/projects.locations.channels.events#Event.FIELDS.execution_time) in the future.\nThe Live Stream API automatically deletes a channel event seven days after the event is executed. This deletion includes events that have failed.\n### Ad break event\nUse the [adBreak](/livestream/docs/reference/rest/v1/projects.locations.channels.events#Event.FIELDS.ad_break) object to insert a new ad opportunity.\nUse the [Return to program event](#return-to-program-event) to return from the ad break back to the live stream.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your channel is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the channel\n- ``: a user-defined identifier for the event\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID/events/EVENT_ID\",\n \"createTime\": CREATE_TIME,\n \"updateTime\": UPDATE_TIME,\n \"adBreak\": {\n \"duration\": \"100s\"\n },\n \"executeNow\": true,\n \"state\": \"PENDING\"\n}\n```\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/CreateChannelEvent.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;public class CreateChannelEventSample{\u00a0 \u00a0 public Event CreateChannelEvent(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string channelId, string eventId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 CreateEventRequest request = new CreateEventRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ParentAsChannelName = ChannelName.FromProjectLocationChannel(projectId, locationId, channelId),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EventId = eventId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Event = new Event\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AdBreak = new Event.Types.AdBreakTask\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Duration = new Google.Protobuf.WellKnownTypes.Duration\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds = 30\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ExecuteNow = true\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Event response = client.CreateEvent(request);\u00a0 \u00a0 \u00a0 \u00a0 return response;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/create_channel_event.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"github.com/golang/protobuf/ptypes/duration\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// createChannelEvent creates a channel event. An event is a sub-resource of a// channel, which can be scheduled by the user to execute operations on a// channel resource without having to stop the channel. This sample creates an// ad break event.func createChannelEvent(w io.Writer, projectID, location, channelID, eventID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // channelID := \"my-channel\"\u00a0 \u00a0 \u00a0 \u00a0 // eventID := \"my-channel-event\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.CreateEventRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: \u00a0fmt.Sprintf(\"projects/%s/locations/%s/channels/%s\", projectID, location, channelID),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EventId: eventID,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Event: &livestreampb.Event{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Task: &livestreampb.Event_AdBreak{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AdBreak: &livestreampb.Event_AdBreakTask{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Duration: &duration.Duration{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds: 30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ExecuteNow: true,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Creates the channel event.\u00a0 \u00a0 \u00a0 \u00a0 response, err := client.CreateEvent(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"CreateEvent: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Channel event: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/CreateChannelEvent.java) \n```\nimport com.google.cloud.video.livestream.v1.ChannelName;import com.google.cloud.video.livestream.v1.CreateEventRequest;import com.google.cloud.video.livestream.v1.Event;import com.google.cloud.video.livestream.v1.Event.AdBreakTask;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.protobuf.Duration;import java.io.IOException;public class CreateChannelEvent {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String channelId = \"my-channel-id\";\u00a0 \u00a0 String eventId = \"my-channel-event-id\";\u00a0 \u00a0 createChannelEvent(projectId, location, channelId, eventId);\u00a0 }\u00a0 public static void createChannelEvent(\u00a0 \u00a0 \u00a0 String projectId, String location, String channelId, String eventId) throws IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. In this example, try-with-resources is used\u00a0 \u00a0 // which automatically calls close() on the client to clean up resources.\u00a0 \u00a0 try (LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create()) {\u00a0 \u00a0 \u00a0 var createEventRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CreateEventRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(ChannelName.of(projectId, location, channelId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEventId(eventId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setEvent(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Event.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAdBreak(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AdBreakTask.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setDuration(Duration.newBuilder().setSeconds(30).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setExecuteNow(true)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 Event response = livestreamServiceClient.createEvent(createEventRequest);\u00a0 \u00a0 \u00a0 System.out.println(\"Channel event: \" + response.getName());\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/createChannelEvent.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// channelId = 'my-channel';// eventId = 'my-channel-event';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function createChannelEvent() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 parent: livestreamServiceClient.channelPath(\u00a0 \u00a0 \u00a0 projectId,\u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 channelId\u00a0 \u00a0 ),\u00a0 \u00a0 eventId: eventId,\u00a0 \u00a0 event: {\u00a0 \u00a0 \u00a0 adBreak: {\u00a0 \u00a0 \u00a0 \u00a0 duration: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: 30,\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 executeNow: true,\u00a0 \u00a0 },\u00a0 };\u00a0 // Run request\u00a0 const [event] = await livestreamServiceClient.createEvent(request);\u00a0 console.log(`Channel event: ${event.name}`);}createChannelEvent();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/create_channel_event.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Event;use Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\CreateEventRequest;use Google\\Protobuf\\Duration;/**\u00a0* Creates a channel event. This particular sample inserts an ad break marker.\u00a0* Other event types are supported.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channel\u00a0* @param string \u00a0$channelId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel\u00a0* @param string \u00a0$eventId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel event\u00a0*/function create_channel_event(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $channelId,\u00a0 \u00a0 string $eventId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $parent = $livestreamClient->channelName($callingProjectId, $location, $channelId);\u00a0 \u00a0 $eventAdBreak = (new Event\\AdBreakTask())\u00a0 \u00a0 \u00a0 \u00a0 ->setDuration(new Duration(['seconds' => 30]));\u00a0 \u00a0 $event = (new Event())\u00a0 \u00a0 \u00a0 \u00a0 ->setAdBreak($eventAdBreak)\u00a0 \u00a0 \u00a0 \u00a0 ->setExecuteNow(true);\u00a0 \u00a0 // Run the channel event creation request.\u00a0 \u00a0 $request = (new CreateEventRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setParent($parent)\u00a0 \u00a0 \u00a0 \u00a0 ->setEvent($event)\u00a0 \u00a0 \u00a0 \u00a0 ->setEventId($eventId);\u00a0 \u00a0 $response = $livestreamClient->createEvent($request);\u00a0 \u00a0 // Print results.\u00a0 \u00a0 printf('Channel event: %s' . PHP_EOL, $response->getName());}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/create_channel_event.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)from google.protobuf import duration_pb2 as durationdef create_channel_event(\u00a0 \u00a0 project_id: str, location: str, channel_id: str, event_id: str) -> live_stream_v1.types.Event:\u00a0 \u00a0 \"\"\"Creates a channel event.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the channel.\u00a0 \u00a0 \u00a0 \u00a0 channel_id: The user-defined channel ID.\u00a0 \u00a0 \u00a0 \u00a0 event_id: The user-defined event ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\u00a0 \u00a0 event = live_stream_v1.types.Event(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 ad_break=live_stream_v1.types.Event.AdBreakTask(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 duration=duration.Duration(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds=30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 execute_now=True,\u00a0 \u00a0 )\u00a0 \u00a0 response = client.create_event(parent=parent, event=event, event_id=event_id)\u00a0 \u00a0 print(f\"Channel event: {response.name}\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/create_channel_event.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Create a channel event\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param channel_id [String] Your channel name (e.g. \"my-channel\")# @param event_id [String] Your event name (e.g. \"my-event\")#def create_channel_event project_id:, location:, channel_id:, event_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the parent.\u00a0 parent = client.channel_path project: project_id, location: location, channel: channel_id\u00a0 # Set the event fields.\u00a0 new_event = {\u00a0 \u00a0 ad_break: {\u00a0 \u00a0 \u00a0 duration: {\u00a0 \u00a0 \u00a0 \u00a0 seconds: 100\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 },\u00a0 \u00a0 execute_now: true\u00a0 }\u00a0 response = client.create_event parent: parent, event: new_event, event_id: event_id\u00a0 # Print the channel event name.\u00a0 puts \"Channel event: #{response.name}\"end\n```### Insert slate event\nUse the [slate](/livestream/docs/reference/rest/v1/projects.locations.channels.events#Event.FIELDS.slate) object to [insert a slate into a live stream](/livestream/docs/how-to/insert-slate) .\nBefore using any of the request data, make the following replacements:\n- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your channel is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the channel\n- ``: a user-defined identifier for the event\n- ``: the user-defined identifier for the slate asset\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID/events/EVENT_ID\",\n \"createTime\": CREATE_TIME,\n \"updateTime\": UPDATE_TIME,\n \"slate\": {\n \"duration\": \"60s\",\n \"asset\": \"projects/PROJECT_NUMBER/locations/LOCATION/assets/ASSET_ID\"\n },\n \"executeNow\": \"true\",\n \"state\": \"PENDING\"\n}\n```\n### Return to program event\nUse the [returnToProgram](/livestream/docs/reference/rest/v1/projects.locations.channels.events#Event.FIELDS.return_to_program) object to stop all running `adBreak` events. You can stop these events immediately or schedule the stop for a future time using the [executionTime](/livestream/docs/reference/rest/v1/projects.locations.channels.events#Event.FIELDS.execution_time) field.\nBefore using any of the request data, make the following replacements:\n- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your channel is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the channel\n- ``: a user-defined identifier for the event\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID/events/EVENT_ID\",\n \"createTime\": CREATE_TIME,\n \"updateTime\": UPDATE_TIME,\n \"executeNow\": true,\n \"state\": \"PENDING\",\n \"returnToProgram\": {}\n}\n```\n### Mute event\nUse the [mute](/livestream/docs/reference/rest/v1/projects.locations.channels.events#Event.FIELDS.mute) object to mute the live stream. You can specify a duration for which the stream should be muted, or mute the stream until an [unmute event](#unmute-event) is executed.\nBefore using any of the request data, make the following replacements:\n- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your channel is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the channel\n- ``: a user-defined identifier for the event\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID/events/EVENT_ID\",\n \"createTime\": CREATE_TIME,\n \"updateTime\": UPDATE_TIME,\n \"mute\": {\n \"duration\": \"30s\"\n },\n \"executeNow\": true,\n \"state\": \"PENDING\"\n}\n```\n### Unmute event\nUse the [unmute](/livestream/docs/reference/rest/v1/projects.locations.channels.events#Event.FIELDS.mute) object to unmute (that is, restore sound to) the live stream.\nBefore using any of the request data, make the following replacements:\n- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your channel is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the channel\n- ``: a user-defined identifier for the event\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID/events/EVENT_ID\",\n \"createTime\": CREATE_TIME,\n \"updateTime\": UPDATE_TIME,\n \"unmute\": {},\n \"executeNow\": true,\n \"state\": \"PENDING\"\n}\n```### Switch input event\nUse the [inputSwitch](/livestream/docs/reference/rest/v1/projects.locations.channels.events#Event.FIELDS.input_switch) object to manually switch the channel input. See [Create a channel with a backup input stream](/livestream/docs/how-to/configure-backup-stream) for more information on creating a channel with additional inputs.\nWhen you manually switch the input, the [InputSwitchMode](/livestream/docs/reference/rest/v1/projects.locations.channels#inputswitchmode) changes to `MANUAL` . The designated input stream is then always used, even if a backup input stream is configured by the [automaticFailover](/livestream/docs/reference/rest/v1/projects.locations.channels#InputAttachment.FIELDS.automatic_failover) field of the designated input stream. The channel won't switch to the backup input stream when the designated input stream disconnects because automatic failover is disabled. To enable failover again, see [Enable automatic failover](#enable-automatic-failover) .\nBefore using any of the request data, make the following replacements:\n- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your channel is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the channel\n- ``: a user-defined identifier for the event\nTo send your request, expand one of these options:\nYou should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID/events/EVENT_ID\",\n \"createTime\": CREATE_TIME,\n \"updateTime\": UPDATE_TIME,\n \"inputSwitch\": {\n \"inputKey\": \"input-backup\"\n },\n \"executeNow\": true,\n \"state\": \"PENDING\"\n}\n```\nTo enable automatic failover after a manual input switch, do the following:\n- [Stop the channel](/livestream/docs/how-to/create-channels#stop_channel) \n- [Update the InputSwitchMode channel field](/livestream/docs/how-to/create-channels#update_channel) to`FAILOVER_PREFER_PRIMARY`\n- [Start the channel](/livestream/docs/how-to/create-channels#start_channel) ## Get channel event details\nTo get the details of a channel event, use the [projects.locations.channels.events.get](/livestream/docs/reference/rest/v1/projects.locations.channels.events/get) method.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your channel is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the channel\n- ``: a user-defined identifier for the event\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID/events/EVENT_ID\",\n \"createTime\": CREATE_TIME,\n \"updateTime\": UPDATE_TIME,\n \"adBreak\": {\n \"duration\": \"10s\"\n },\n \"executeNow\": true,\n \"state\": \"SCHEDULED\"\n}\n```\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/GetChannelEvent.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;public class GetChannelEventSample{\u00a0 \u00a0 public Event GetChannelEvent(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string channelId, string eventId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 GetEventRequest request = new GetEventRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EventName = EventName.FromProjectLocationChannelEvent(projectId, locationId, channelId, eventId),\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Event response = client.GetEvent(request);\u00a0 \u00a0 \u00a0 \u00a0 return response;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/get_channel_event.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// getChannelEvent gets a previously-created channel event.func getChannelEvent(w io.Writer, projectID, location, channelID, eventID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // channelID := \"my-channel-id\"\u00a0 \u00a0 \u00a0 \u00a0 // eventID := \"my-channel-event\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.GetEventRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/channels/%s/events/%s\", projectID, location, channelID, eventID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := client.GetEvent(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"GetEvent: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Channel event: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/GetChannelEvent.java) \n```\nimport com.google.cloud.video.livestream.v1.Event;import com.google.cloud.video.livestream.v1.EventName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import java.io.IOException;public class GetChannelEvent {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String channelId = \"my-channel-id\";\u00a0 \u00a0 String eventId = \"my-channel-event-id\";\u00a0 \u00a0 getChannelEvent(projectId, location, channelId, eventId);\u00a0 }\u00a0 public static void getChannelEvent(\u00a0 \u00a0 \u00a0 String projectId, String location, String channelId, String eventId) throws IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. In this example, try-with-resources is used\u00a0 \u00a0 // which automatically calls close() on the client to clean up resources.\u00a0 \u00a0 try (LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create()) {\u00a0 \u00a0 \u00a0 EventName name = EventName.of(projectId, location, channelId, eventId);\u00a0 \u00a0 \u00a0 Event response = livestreamServiceClient.getEvent(name);\u00a0 \u00a0 \u00a0 System.out.println(\"Channel event: \" + response.getName());\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/getChannelEvent.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// channelId = 'my-channel';// eventId = 'my-channel-event';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function getChannelEvent() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 name: livestreamServiceClient.eventPath(\u00a0 \u00a0 \u00a0 projectId,\u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 channelId,\u00a0 \u00a0 \u00a0 eventId\u00a0 \u00a0 ),\u00a0 };\u00a0 const [event] = await livestreamServiceClient.getEvent(request);\u00a0 console.log(`Channel event: ${event.name}`);}getChannelEvent();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/get_channel_event.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\GetEventRequest;/**\u00a0* Gets a channel event.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channel\u00a0* @param string \u00a0$channelId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel\u00a0* @param string \u00a0$eventId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel event\u00a0*/function get_channel_event(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $channelId,\u00a0 \u00a0 string $eventId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $formattedName = $livestreamClient->eventName($callingProjectId, $location, $channelId, $eventId);\u00a0 \u00a0 // Get the channel event.\u00a0 \u00a0 $request = (new GetEventRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($formattedName);\u00a0 \u00a0 $response = $livestreamClient->getEvent($request);\u00a0 \u00a0 printf('Channel event: %s' . PHP_EOL, $response->getName());}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/get_channel_event.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def get_channel_event(\u00a0 \u00a0 project_id: str, location: str, channel_id: str, event_id: str) -> live_stream_v1.types.Event:\u00a0 \u00a0 \"\"\"Gets a channel.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the channel.\u00a0 \u00a0 \u00a0 \u00a0 channel_id: The user-defined channel ID.\u00a0 \u00a0 \u00a0 \u00a0 event_id: The user-defined event ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\u00a0 \u00a0 response = client.get_event(name=name)\u00a0 \u00a0 print(f\"Channel event: {response.name}\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/get_channel_event.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Get a channel event\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param channel_id [String] Your channel name (e.g. \"my-channel\")# @param event_id [String] Your event name (e.g. \"my-event\")#def get_channel_event project_id:, location:, channel_id:, event_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the channel event.\u00a0 name = client.event_path project: project_id, location: location, channel: channel_id, event: event_id\u00a0 # Get the channel event.\u00a0 event = client.get_event name: name\u00a0 # Print the channel event name.\u00a0 puts \"Channel event: #{event.name}\"end\n```\n## List channel events\nTo list all of the channel events you created for a channel, use the [projects.locations.channels.events.list](/livestream/docs/reference/rest/v1/projects.locations.channels.events/list) method.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your channel is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the channel\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"events\": [  {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID/events/my-event\",\n  \"createTime\": CREATE_TIME,\n  \"updateTime\": UPDATE_TIME,\n  \"adBreak\": {\n   \"duration\": \"10s\"\n  },\n  \"executeNow\": true,\n  \"state\": \"SCHEDULED\"\n  },\n  {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID/events/my-event2\",\n  \"createTime\": CREATE_TIME,\n  \"updateTime\": UPDATE_TIME,\n  \"adBreak\": {\n   \"duration\": \"10s\"\n  },\n  \"executeNow\": true,\n  \"state\": \"SCHEDULED\"\n  }\n ]\n}\n```\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/ListChannelEvents.cs) \n```\nusing Google.Api.Gax;using Google.Cloud.Video.LiveStream.V1;using System.Collections.Generic;using System.Linq;public class ListChannelEventsSample{\u00a0 \u00a0 public IList<Event> ListChannelEvents(\u00a0 \u00a0 \u00a0 \u00a0 string projectId, string regionId, string channelId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 ListEventsRequest request = new ListEventsRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ParentAsChannelName = ChannelName.FromProjectLocationChannel(projectId, regionId, channelId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 PagedEnumerable<ListEventsResponse, Event> response = client.ListEvents(request);\u00a0 \u00a0 \u00a0 \u00a0 // The returned sequence will lazily perform RPCs as it's being iterated over.\u00a0 \u00a0 \u00a0 \u00a0 return response.ToList();\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/list_channel_events.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/api/iterator\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// listChannelEvents lists all channel events for a given channel.func listChannelEvents(w io.Writer, projectID, location, channelID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // channelID := \"my-channel-id\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.ListEventsRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: fmt.Sprintf(\"projects/%s/locations/%s/channels/%s\", projectID, location, channelID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 it := client.ListEvents(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintln(w, \"Channel events:\")\u00a0 \u00a0 \u00a0 \u00a0 for {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response, err := it.Next()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err == iterator.Done {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"ListEvents: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintln(w, response.GetName())\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/ListChannelEvents.java) \n```\nimport com.google.cloud.video.livestream.v1.ChannelName;import com.google.cloud.video.livestream.v1.Event;import com.google.cloud.video.livestream.v1.ListEventsRequest;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import java.io.IOException;public class ListChannelEvents {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String channelId = \"my-channel-id\";\u00a0 \u00a0 listChannelEvents(projectId, location, channelId);\u00a0 }\u00a0 public static void listChannelEvents(String projectId, String location, String channelId)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. In this example, try-with-resources is used\u00a0 \u00a0 // which automatically calls close() on the client to clean up resources.\u00a0 \u00a0 try (LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create()) {\u00a0 \u00a0 \u00a0 var listEventsRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ListEventsRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(ChannelName.of(projectId, location, channelId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 LivestreamServiceClient.ListEventsPagedResponse response =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient.listEvents(listEventsRequest);\u00a0 \u00a0 \u00a0 System.out.println(\"Channel events:\");\u00a0 \u00a0 \u00a0 for (Event event : response.iterateAll()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(event.getName());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/listChannelEvents.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// channelId = 'my-channel';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function listChannelEvents() {\u00a0 const iterable = await livestreamServiceClient.listEventsAsync({\u00a0 \u00a0 parent: livestreamServiceClient.channelPath(\u00a0 \u00a0 \u00a0 projectId,\u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 channelId\u00a0 \u00a0 ),\u00a0 });\u00a0 console.info('Channel events:');\u00a0 for await (const response of iterable) {\u00a0 \u00a0 console.log(response.name);\u00a0 }}listChannelEvents();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/list_channel_events.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\ListEventsRequest;/**\u00a0* Lists the channel events for a given channel.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channel\u00a0* @param string \u00a0$channelId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel\u00a0*/function list_channel_events(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $channelId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $parent = $livestreamClient->channelName($callingProjectId, $location, $channelId);\u00a0 \u00a0 $request = (new ListEventsRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setParent($parent);\u00a0 \u00a0 $response = $livestreamClient->listEvents($request);\u00a0 \u00a0 // Print the channel list.\u00a0 \u00a0 $events = $response->iterateAllElements();\u00a0 \u00a0 print('Channel events:' . PHP_EOL);\u00a0 \u00a0 foreach ($events as $event) {\u00a0 \u00a0 \u00a0 \u00a0 printf('%s' . PHP_EOL, $event->getName());\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/list_channel_events.py) \n```\nimport argparsefrom google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,\u00a0 \u00a0 pagers,)def list_channel_events(\u00a0 \u00a0 project_id: str, location: str, channel_id: str) -> pagers.ListEventsPager:\u00a0 \u00a0 \"\"\"Lists all events for a channel.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the channel.\u00a0 \u00a0 \u00a0 \u00a0 channel_id: The user-defined channel ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 parent = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\u00a0 \u00a0 page_result = client.list_events(parent=parent)\u00a0 \u00a0 print(\"Events:\")\u00a0 \u00a0 responses = []\u00a0 \u00a0 for response in page_result:\u00a0 \u00a0 \u00a0 \u00a0 print(response.name)\u00a0 \u00a0 \u00a0 \u00a0 responses.append(response)\u00a0 \u00a0 return responses\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/list_channel_events.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### List the channel events\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param channel_id [String] Your channel name (e.g. \"my-channel\")#def list_channel_events project_id:, location:, channel_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the parent.\u00a0 parent = client.channel_path project: project_id, location: location, channel: channel_id\u00a0 # Get the list of channel events.\u00a0 response = client.list_events parent: parent\u00a0 puts \"Channel events:\"\u00a0 # Print out all channel events.\u00a0 response.each do |event|\u00a0 \u00a0 puts event.name\u00a0 endend\n```\n## Delete a channel event\nTo delete a channel event, use the [projects.locations.channels.events.delete](/livestream/docs/reference/rest/v1/projects.locations.channels.events/delete) method.\nThe Live Stream API automatically deletes a channel event seven days after the event is executed. This deletion includes events that have failed.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your channel is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the channel\n- ``: a user-defined identifier for the event\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{}\n```\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/DeleteChannelEvent.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;public class DeleteChannelEventSample{\u00a0 \u00a0 public void DeleteChannelEvent(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string channelId, string eventId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 DeleteEventRequest request = new DeleteEventRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 EventName = EventName.FromProjectLocationChannelEvent(projectId, locationId, channelId, eventId),\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 client.DeleteEvent(request);\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/delete_channel_event.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// deleteChannelEvent deletes a previously-created channel event.func deleteChannelEvent(w io.Writer, projectID, location, channelID, eventID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // channelID := \"my-channel\"\u00a0 \u00a0 \u00a0 \u00a0 // eventID := \"my-channel-event\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.DeleteEventRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/channels/%s/events/%s\", projectID, location, channelID, eventID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 err = client.DeleteEvent(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"DeleteEvent: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Deleted channel event\")\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/DeleteChannelEvent.java) \n```\nimport com.google.cloud.video.livestream.v1.DeleteEventRequest;import com.google.cloud.video.livestream.v1.EventName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import java.io.IOException;public class DeleteChannelEvent {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String channelId = \"my-channel-id\";\u00a0 \u00a0 String eventId = \"my-channel-event-id\";\u00a0 \u00a0 deleteChannelEvent(projectId, location, channelId, eventId);\u00a0 }\u00a0 public static void deleteChannelEvent(\u00a0 \u00a0 \u00a0 String projectId, String location, String channelId, String eventId) throws IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. In this example, try-with-resources is used\u00a0 \u00a0 // which automatically calls close() on the client to clean up resources.\u00a0 \u00a0 try (LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create()) {\u00a0 \u00a0 \u00a0 var deleteEventRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DeleteEventRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(EventName.of(projectId, location, channelId, eventId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 livestreamServiceClient.deleteEvent(deleteEventRequest);\u00a0 \u00a0 \u00a0 System.out.println(\"Deleted channel event\");\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/deleteChannelEvent.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// channelId = 'my-channel';// eventId = 'my-channel-event';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function deleteChannelEvent() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 name: livestreamServiceClient.eventPath(\u00a0 \u00a0 \u00a0 projectId,\u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 channelId,\u00a0 \u00a0 \u00a0 eventId\u00a0 \u00a0 ),\u00a0 };\u00a0 // Run request\u00a0 await livestreamServiceClient.deleteEvent(request);\u00a0 console.log('Deleted channel event');}deleteChannelEvent();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/delete_channel_event.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\DeleteEventRequest;/**\u00a0* Deletes a channel event.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channel\u00a0* @param string \u00a0$channelId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel\u00a0* @param string \u00a0$eventId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel event to be deleted\u00a0*/function delete_channel_event(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $channelId,\u00a0 \u00a0 string $eventId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $formattedName = $livestreamClient->eventName($callingProjectId, $location, $channelId, $eventId);\u00a0 \u00a0 // Run the channel event deletion request.\u00a0 \u00a0 $request = (new DeleteEventRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($formattedName);\u00a0 \u00a0 $livestreamClient->deleteEvent($request);\u00a0 \u00a0 printf('Deleted channel event %s' . PHP_EOL, $eventId);}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/delete_channel_event.py) \n```\nimport argparsefrom google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def delete_channel_event(\u00a0 \u00a0 project_id: str, location: str, channel_id: str, event_id: str) -> None:\u00a0 \u00a0 \"\"\"Deletes a channel event.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the channel.\u00a0 \u00a0 \u00a0 \u00a0 channel_id: The user-defined channel ID.\u00a0 \u00a0 \u00a0 \u00a0 event_id: The user-defined event ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}/events/{event_id}\"\u00a0 \u00a0 response = client.delete_event(name=name)\u00a0 \u00a0 print(\"Deleted channel event\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/delete_channel_event.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Delete a channel event\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param channel_id [String] Your channel name (e.g. \"my-channel\")# @param event_id [String] Your event name (e.g. \"my-event\")#def delete_channel_event project_id:, location:, channel_id:, event_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the channel event.\u00a0 name = client.event_path project: project_id, location: location, channel: channel_id, event: event_id\u00a0 # Delete the channel event.\u00a0 client.delete_event name: name\u00a0 # Print a success message.\u00a0 puts \"Deleted channel event\"end\n```", "guide": "Live Stream API"}