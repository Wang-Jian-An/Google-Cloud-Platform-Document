{"title": "Live Stream API - Create and manage pools", "url": "https://cloud.google.com/livestream/docs/how-to/create-pools", "abstract": "# Live Stream API - Create and manage pools\nThis page shows you how to create and manage Live Stream API pools. A pool is a processing unit allocated for each Google Cloud project per region and is shared between all channels in a given region. Pools are used to protect input endpoints within a VPC Service Controls perimeter. For more information, see [Use VPC Service Controls to secure your pipeline](/livestream/docs/how-to/vpc/secure-livestreams) .\n", "content": "## Set up your Google Cloud project and authentication\n[Google Cloud project](/docs/overview#projects)\n[Before you begin](/livestream/docs/how-to/before-you-begin)\n## Create a pool\nWhen you [create an input endpoint](/livestream/docs/how-to/create-input-endpoints) in a location for the first time, the default pool for that location is automatically created.\n## Get pool details\nTo get the details of the pool, use the [projects.locations.pools.get](/livestream/docs/reference/rest/v1/projects.locations.pools/get) method.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: use one of the [supported regions](/livestream/docs/locations) in which  you have already created an input\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/pools/default\",\n \"createTime\": CREATE_TIME,\n \"updateTime\": UPDATE_TIME\n}\n```\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/GetPool.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;public class GetPoolSample{\u00a0 \u00a0 public Pool GetPool(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string poolId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 GetPoolRequest request = new GetPoolRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PoolName = PoolName.FromProjectLocationPool(projectId, locationId, poolId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Pool response = client.GetPool(request);\u00a0 \u00a0 \u00a0 \u00a0 return response;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/get_pool.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// getPool gets a pool.func getPool(w io.Writer, projectID, location, poolID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // poolID := \"default\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.GetPoolRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/pools/%s\", projectID, location, poolID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := client.GetPool(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"GetPool: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Pool: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/GetPool.java) \n```\nimport com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.Pool;import com.google.cloud.video.livestream.v1.PoolName;import java.io.IOException;public class GetPool {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String poolId = \"default\"; // only 1 pool supported per location\u00a0 \u00a0 getPool(projectId, location, poolId);\u00a0 }\u00a0 public static void getPool(String projectId, String location, String poolId)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. In this example, try-with-resources is used\u00a0 \u00a0 // which automatically calls close() on the client to clean up resources.\u00a0 \u00a0 try (LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create()) {\u00a0 \u00a0 \u00a0 PoolName name = PoolName.of(projectId, location, poolId);\u00a0 \u00a0 \u00a0 Pool response = livestreamServiceClient.getPool(name);\u00a0 \u00a0 \u00a0 System.out.println(\"Pool: \" + response.getName());\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/getPool.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// poolId = 'my-pool';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function getPool() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 name: livestreamServiceClient.poolPath(projectId, location, poolId),\u00a0 };\u00a0 const [pool] = await livestreamServiceClient.getPool(request);\u00a0 console.log(`Pool: ${pool.name}`);}getPool();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/get_pool.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\GetPoolRequest;/**\u00a0* Gets a pool.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the pool\u00a0* @param string \u00a0$poolId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The ID of the pool\u00a0*/function get_pool(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $poolId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $formattedName = $livestreamClient->poolName($callingProjectId, $location, $poolId);\u00a0 \u00a0 // Get the pool.\u00a0 \u00a0 $request = (new GetPoolRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($formattedName);\u00a0 \u00a0 $response = $livestreamClient->getPool($request);\u00a0 \u00a0 // Print results\u00a0 \u00a0 printf('Pool: %s' . PHP_EOL, $response->getName());}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/get_pool.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def get_pool(project_id: str, location: str, pool_id: str) -> live_stream_v1.types.Pool:\u00a0 \u00a0 \"\"\"Gets a pool.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the pool.\u00a0 \u00a0 \u00a0 \u00a0 pool_id: The user-defined pool ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\u00a0 \u00a0 response = client.get_pool(name=name)\u00a0 \u00a0 print(f\"Pool: {response.name}\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/get_pool.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Get the pool\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param pool_id [String] Your pool name (e.g. \"default\")#def get_pool project_id:, location:, pool_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the pool.\u00a0 name = client.pool_path project: project_id, location: location, pool: pool_id\u00a0 # Get the pool.\u00a0 pool = client.get_pool name: name\u00a0 # Print the pool name.\u00a0 puts \"Pool: #{pool.name}\"end\n```\n## Update a pool\nTo update an input endpoint, use the [projects.locations.pools.patch](/livestream/docs/reference/rest/v1/projects.locations.pools/patch) method.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location of the default pool; use one  of the [supported regions](/livestream/docs/locations) \n- ``: the user-defined identifier for the network  in the current project to peer with the service\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/pools/default\",\n \"verb\": \"update\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\nThis command creates a long-running operation (LRO) that you can use to track the progress of your request. See\n [Manage long-running operations ](/livestream/docs/how-to/manage-long-running-operations) \nfor more information.\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/UpdatePoolAsync.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using Google.Protobuf.WellKnownTypes;using System.Threading.Tasks;public class UpdatePoolSample{\u00a0 \u00a0 public async Task UpdatePoolAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string poolId, string peeredNetwork)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 UpdatePoolRequest request = new UpdatePoolRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Pool = new Pool\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PoolName = PoolName.FromProjectLocationPool(projectId, locationId, poolId),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 NetworkConfig = new Pool.Types.NetworkConfig\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PeeredNetwork = peeredNetwork\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UpdateMask = new FieldMask { Paths = { \"network_config\" } }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Pool, OperationMetadata> response = await client.UpdatePoolAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Get the name of the operation.\u00a0 \u00a0 \u00a0 \u00a0 string operationName = response.Name;\u00a0 \u00a0 \u00a0 \u00a0 // This name can be stored, then the long-running operation retrieved later by name.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Pool, OperationMetadata> retrievedResponse = await client.PollOnceUpdatePoolAsync(operationName);\u00a0 \u00a0 \u00a0 \u00a0 // Check if the retrieved long-running operation has completed.\u00a0 \u00a0 \u00a0 \u00a0 if (retrievedResponse.IsCompleted)\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // If it has completed, then access the result.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _ = retrievedResponse.Result;\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/update_pool.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/protobuf/types/known/fieldmaskpb\")// updatePool updates the pool's peered network.func updatePool(w io.Writer, projectID, location, poolID, peeredNetwork string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // poolID := \"default\"\u00a0 \u00a0 \u00a0 \u00a0 // peeredNetwork := \u00a0\"projects/my-network-project-number/global/networks/my-network-name\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.UpdatePoolRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Pool: &livestreampb.Pool{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/pools/%s\", projectID, location, poolID),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 NetworkConfig: &livestreampb.Pool_NetworkConfig{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PeeredNetwork: peeredNetwork,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UpdateMask: &fieldmaskpb.FieldMask{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Paths: []string{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"network_config\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Updates the pool.\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.UpdatePool(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"UpdatePool: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Updated pool: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/UpdatePool.java) \n```\nimport com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.Pool;import com.google.cloud.video.livestream.v1.Pool.NetworkConfig;import com.google.cloud.video.livestream.v1.PoolName;import com.google.cloud.video.livestream.v1.UpdatePoolRequest;import com.google.protobuf.FieldMask;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class UpdatePool {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String poolId = \"default\";\u00a0 \u00a0 String peeredNetwork = \"\";\u00a0 \u00a0 updatePool(projectId, location, poolId, peeredNetwork);\u00a0 }\u00a0 public static void updatePool(String projectId, String location, String poolId,\u00a0 \u00a0 \u00a0 String peeredNetwork)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 var updatePoolRequest =\u00a0 \u00a0 \u00a0 \u00a0 UpdatePoolRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setPool(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Pool.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(PoolName.of(projectId, location, poolId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setNetworkConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 NetworkConfig.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setPeeredNetwork(peeredNetwork)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setUpdateMask(FieldMask.newBuilder().addPaths(\"network_config\").build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // Update pool can take 20+ minutes.\u00a0 \u00a0 Pool result =\u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient.updatePoolAsync(updatePoolRequest).get(20, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Updated pool: \" + result.getName());\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/updatePool.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// poolId = 'my-pool';// peeredNetwork = 'projects/my-network-project-number/global/networks/my-network-name';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function updatePool() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 pool: {\u00a0 \u00a0 \u00a0 name: livestreamServiceClient.poolPath(projectId, location, poolId),\u00a0 \u00a0 \u00a0 networkConfig: {\u00a0 \u00a0 \u00a0 \u00a0 peeredNetwork: peeredNetwork,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 \u00a0 updateMask: {\u00a0 \u00a0 \u00a0 paths: ['network_config'],\u00a0 \u00a0 },\u00a0 };\u00a0 // Run request\u00a0 const [operation] = await livestreamServiceClient.updatePool(request);\u00a0 const response = await operation.promise();\u00a0 const [pool] = response;\u00a0 console.log(`Updated pool: ${pool.name}`);}updatePool();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/update_pool.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Pool;use Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\UpdatePoolRequest;use Google\\Protobuf\\FieldMask;/**\u00a0* Updates a pool.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the pool\u00a0* @param string \u00a0$poolId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The ID of the pool to be updated\u00a0* @param string \u00a0$peeredNetwork \u00a0 \u00a0 \u00a0The updated peer network\u00a0*/function update_pool(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $poolId,\u00a0 \u00a0 string $peeredNetwork): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $formattedName = $livestreamClient->poolName($callingProjectId, $location, $poolId);\u00a0 \u00a0 $pool = (new Pool())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($formattedName)\u00a0 \u00a0 \u00a0 \u00a0 ->setNetworkConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (new Pool\\NetworkConfig())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ->setPeeredNetwork($peeredNetwork));\u00a0 \u00a0 $updateMask = new FieldMask([\u00a0 \u00a0 \u00a0 \u00a0 'paths' => ['network_config']\u00a0 \u00a0 ]);\u00a0 \u00a0 // Run the pool update request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new UpdatePoolRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setPool($pool)\u00a0 \u00a0 \u00a0 \u00a0 ->setUpdateMask($updateMask);\u00a0 \u00a0 $operationResponse = $livestreamClient->updatePool($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 $result = $operationResponse->getResult();\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Updated pool: %s' . PHP_EOL, $result->getName());\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/update_pool.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)from google.protobuf import field_mask_pb2 as field_maskdef update_pool(\u00a0 \u00a0 project_id: str, location: str, pool_id: str, peered_network: str) -> live_stream_v1.types.Pool:\u00a0 \u00a0 \"\"\"Updates an pool.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the pool.\u00a0 \u00a0 \u00a0 \u00a0 pool_id: The user-defined pool ID.\u00a0 \u00a0 \u00a0 \u00a0 peered_network: The updated peer network (e.g.,\u00a0 \u00a0 \u00a0 \u00a0 'projects/my-network-project-number/global/networks/my-network-name').\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/pools/{pool_id}\"\u00a0 \u00a0 pool = live_stream_v1.types.Pool(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 network_config=live_stream_v1.types.Pool.NetworkConfig(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 peered_network=peered_network,\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 )\u00a0 \u00a0 update_mask = field_mask.FieldMask(paths=[\"network_config\"])\u00a0 \u00a0 operation = client.update_pool(pool=pool, update_mask=update_mask)\u00a0 \u00a0 response = operation.result()\u00a0 \u00a0 print(f\"Updated pool: {response.name}\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/update_pool.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Update the pool's peered network\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param pool_id [String] Your pool name (e.g. \"my-pool\")# @param peered_network [String] The updated peer network# \u00a0 (e.g. \"projects/my-network-project-number/global/networks/my-network-name\")#def update_pool project_id:, location:, pool_id:, peered_network:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the pool.\u00a0 name = client.pool_path project: project_id, location: location, pool: pool_id\u00a0 # Set the update mask.\u00a0 update_mask = { paths: [\"network_config\"] }\u00a0 # Update the pool's peered network.\u00a0 update_pool = {\u00a0 \u00a0 name: name,\u00a0 \u00a0 network_config: {\u00a0 \u00a0 \u00a0 peered_network: peered_network\u00a0 \u00a0 }\u00a0 }\u00a0 operation = client.update_pool update_mask: update_mask, pool: update_pool\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print the pool name.\u00a0 puts \"Updated pool: #{operation.response.name}\"end\n```", "guide": "Live Stream API"}