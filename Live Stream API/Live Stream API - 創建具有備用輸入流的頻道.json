{"title": "Live Stream API - \u5275\u5efa\u5177\u6709\u5099\u7528\u8f38\u5165\u6d41\u7684\u983b\u9053", "url": "https://cloud.google.com/livestream/docs/how-to/configure-backup-stream?hl=zh-cn", "abstract": "# Live Stream API - \u5275\u5efa\u5177\u6709\u5099\u7528\u8f38\u5165\u6d41\u7684\u983b\u9053\n\u672c\u9801\u9762\u4ecb\u7d39\u77ad\u5982\u4f55\u5275\u5efa\u5177\u6709\u5169\u500b\u8f38\u5165\u6d41\u7684\u901a\u9053\u8cc7\u6e90\uff0c\u5176\u4e2d\u4e00\u500b\u8f38\u5165\u6d41\u53ef\u4ee5\u4f5c\u7232\u53e6\u4e00\u500b\u8f38\u5165\u6d41\u7684\u5099\u7528\u8f38\u5165\u6d41\u3002\n\u5553\u7528\u81ea\u52d5\u6545\u969c\u5207\u63db\u529f\u80fd\u5f8c\uff0c\u5982\u679c\u4e3b\u8981\u8f38\u5165\u6d41\u56e0\u7db2\u7d61\u554f\u984c\u800c\u65b7\u958b\u9023\u63a5\uff0c\u5247\u983b\u9053\u6703\u81ea\u52d5\u5207\u63db\u7232\u4f7f\u7528\u5099\u7528\u8f38\u5165\u6d41\u4f5c\u7232\u8f38\u5165\u4f86\u6e90\u3002\u4e3b\u8981\u8f38\u5165\u6d41\u6062\u5fa9\u5728\u7dda\u72c0\u614b\u5f8c\uff0c\u76f8\u61c9\u983b\u9053\u6703\u81ea\u52d5\u5207\u63db\u56de\u4e3b\u8981\u8f38\u5165\u6d41\u4f5c\u7232\u8f38\u5165\u4f86\u6e90\u3002\u81ea\u52d5\u6545\u969c\u5207\u63db\u529f\u80fd\u662f\u53ef\u9078\u7684\u3002\n\u5982\u679c\u60a8\u5e0c\u671b\u5099\u7528\u8f38\u5165\u6d41\u5b8c\u5168\u66ff\u63db\u4e3b\u8f38\u5165\u6d41\uff0c\u5247\u5fc5\u9808\u78ba\u4fdd\u4e3b\u8f38\u5165\u6d41\u548c\u5099\u7528\u8f38\u5165\u6d41\u5b8c\u5168\u76f8\u540c\u3002\n\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u983b\u9053\u4e8b\u4ef6\u624b\u52d5\u5207\u63db\u8f38\u5165\u6d41\u3002\n", "content": "## \u5275\u5efa\u4e3b\u8981\u8f38\u5165\u7aef\u9ede\n\u5982\u9700\u5275\u5efa\u4e3b\u8981\u8f38\u5165\u7aef\u9ede\uff0c\u8acb\u4f7f\u7528 [projects.locations.inputs.create](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.inputs/create?hl=zh-cn) \u65b9\u6cd5\u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- ``\uff1a\u60a8\u7684 Google Cloud \u9805\u76ee\u7de8\u865f\uff1b\u4f4d\u65bc [IAM \u8a2d\u7f6e](https://console.cloud.google.com/iam-admin/settings?hl=zh-cn) \u9801\u9762\u4e0a\u7684 **\u9805\u76ee\u7de8\u865f** \u5b57\u6bb5\u4e2d\n- ``\uff1a\u8981\u5728\u5176\u4e2d\u5275\u5efa\u8f38\u5165\u7aef\u9ede\u7684\u4f4d\u7f6e\uff1b\u8acb\u4f7f\u7528 [\u652f\u6301\u7684\u5340\u57df](https://cloud.google.com/livestream/docs/locations?hl=zh-cn) \u4e4b\u4e00\n- ``\uff1a\u7528\u6236\u5b9a\u7fa9\u7684\u65b0\u8f38\u5165\u7aef\u9ede\u6a19\u8b58\u7b26\uff0c\u8981\u5275\u5efa\u7684\u65b0\u8f38\u5165\u7aef\u9ede\uff08\u60a8\u5c07\u8f38\u5165\u6d41\u767c\u9001\u5230\u6b64\u7aef\u9ede\uff09\u3002\u6b64\u503c\u5fc5\u9808\u7232 1-63 \u500b\u5b57\u7b26\uff0c\u4ee5`[a-z0-9]`\u958b\u982d\u548c\u7d50\u5c3e\uff0c\u53ef\u5728\u5b57\u7b26\u4e4b\u9593\u5305\u542b\u77ed\u5283\u7dda (-)\u3002\u4f8b\u5982`my-input`\u3002\n\u5982\u9700\u767c\u9001\u60a8\u7684\u8acb\u6c42\uff0c\u8acb\u5c55\u958b\u4ee5\u4e0b\u9078\u9805\u4e4b\u4e00\uff1a\u60a8\u61c9\u8a72\u6536\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\u7684 JSON \u97ff\u61c9\uff1a\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/inputs/INPUT_ID\",\n \"verb\": \"create\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\n\u6b64\u547d\u4ee4\u6703\u5275\u5efa\u4e00\u500b\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c (LRO)\uff0c\u53ef\u7528\u65bc\u8ddf\u8e64\u8acb\u6c42\u7684\u9032\u5ea6\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1\n [\u7ba1\u7406\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c ](https://cloud.google.com/livestream/docs/how-to/manage-long-running-operations?hl=zh-cn) \n\u3002\n\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API C# API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/CreateInputAsync.cs) \n```\nusing Google.Api.Gax.ResourceNames;using Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using System.Threading.Tasks;public class CreateInputSample{\u00a0 \u00a0 public async Task<Input> CreateInputAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string inputId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 CreateInputRequest request = new CreateInputRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ParentAsLocationName = LocationName.FromProjectLocation(projectId, locationId),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputId = inputId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input = new Input\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type = Input.Types.Type.RtmpPush\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Input, OperationMetadata> response = await client.CreateInputAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Input, OperationMetadata> completedResponse = await response.PollUntilCompletedAsync();\u00a0 \u00a0 \u00a0 \u00a0 // Retrieve the operation result.\u00a0 \u00a0 \u00a0 \u00a0 return completedResponse.Result;\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Go API \u53c3\u8003\u6587\u6a94](https://pkg.go.dev/cloud.google.com/go/video/livestream) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/create_input.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// createInput creates an input endpoint. You send an input video stream to this// endpoint.func createInput(w io.Writer, projectID, location, inputID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // inputID := \"my-input\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.CreateInputRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: \u00a0fmt.Sprintf(\"projects/%s/locations/%s\", projectID, location),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputId: inputID,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input: &livestreampb.Input{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type: livestreampb.Input_RTMP_PUSH,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Creates the input.\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.CreateInput(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"CreateInput: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Input: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-live-stream/latest/overview?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/CreateInput.java) \n```\nimport com.google.cloud.video.livestream.v1.CreateInputRequest;import com.google.cloud.video.livestream.v1.Input;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.LocationName;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class CreateInput {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String inputId = \"my-input-id\";\u00a0 \u00a0 createInput(projectId, location, inputId);\u00a0 }\u00a0 public static void createInput(String projectId, String location, String inputId)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 var createInputRequest =\u00a0 \u00a0 \u00a0 \u00a0 CreateInputRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(LocationName.of(projectId, location).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInputId(inputId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInput(Input.newBuilder().setType(Input.Type.RTMP_PUSH).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // First API call in a project can take up to 15 minutes.\u00a0 \u00a0 Input result =\u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient.createInputAsync(createInputRequest).get(15, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Input: \" + result.getName());\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/createInput.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// inputId = 'my-input';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function createInput() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 parent: livestreamServiceClient.locationPath(projectId, location),\u00a0 \u00a0 inputId: inputId,\u00a0 \u00a0 input: {\u00a0 \u00a0 \u00a0 type: 'RTMP_PUSH',\u00a0 \u00a0 },\u00a0 };\u00a0 // Run request\u00a0 const [operation] = await livestreamServiceClient.createInput(request);\u00a0 const response = await operation.promise();\u00a0 const [input] = response;\u00a0 console.log(`Input: ${input.name}`);}createInput();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API PHP API \u53c3\u8003\u6587\u6a94](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/create_input.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Input;use Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\CreateInputRequest;/**\u00a0* Creates an input. You send an input video stream to this endpoint.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the input\u00a0* @param string \u00a0$inputId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the input to be created\u00a0*/function create_input(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $inputId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $parent = $livestreamClient->locationName($callingProjectId, $location);\u00a0 \u00a0 $input = (new Input())\u00a0 \u00a0 \u00a0 \u00a0 ->setType(Input\\Type::RTMP_PUSH);\u00a0 \u00a0 // Run the input creation request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new CreateInputRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setParent($parent)\u00a0 \u00a0 \u00a0 \u00a0 ->setInput($input)\u00a0 \u00a0 \u00a0 \u00a0 ->setInputId($inputId);\u00a0 \u00a0 $operationResponse = $livestreamClient->createInput($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 $result = $operationResponse->getResult();\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Input: %s' . PHP_EOL, $result->getName());\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/create_input.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def create_input(\u00a0 \u00a0 project_id: str, location: str, input_id: str) -> live_stream_v1.types.Input:\u00a0 \u00a0 \"\"\"Creates an input.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location in which to create the input.\u00a0 \u00a0 \u00a0 \u00a0 input_id: The user-defined input ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 parent = f\"projects/{project_id}/locations/{location}\"\u00a0 \u00a0 input = live_stream_v1.types.Input(\u00a0 \u00a0 \u00a0 \u00a0 type_=\"RTMP_PUSH\",\u00a0 \u00a0 )\u00a0 \u00a0 operation = client.create_input(parent=parent, input=input, input_id=input_id)\u00a0 \u00a0 response = operation.result(900)\u00a0 \u00a0 print(f\"Input: {response.name}\")\u00a0 \u00a0 return response\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Ruby API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/ruby/docs/reference/google-cloud-video-live_stream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/create_input.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Create an input endpoint\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param input_id [String] Your input name (e.g. \"my-input\")#def create_input project_id:, location:, input_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the parent.\u00a0 parent = client.location_path project: project_id, location: location\u00a0 # Set the input fields.\u00a0 new_input = {\u00a0 \u00a0 type: Google::Cloud::Video::LiveStream::V1::Input::Type::RTMP_PUSH\u00a0 }\u00a0 operation = client.create_input parent: parent, input: new_input, input_id: input_id\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print the input name.\u00a0 puts \"Input: #{operation.response.name}\"end\n```\n## \u5275\u5efa\u5099\u4efd\u8f38\u5165\u7aef\u9ede\n\u5982\u9700\u5275\u5efa\u5099\u4efd\u8f38\u5165\u7aef\u9ede\uff0c\u8acb\u518d\u6b21\u4f7f\u7528 [projects.locations.inputs.create](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.inputs/create?hl=zh-cn) \u65b9\u6cd5\u3002\u8acb\u52d9\u5fc5\u4f7f\u7528\u8207\u4e3b\u8981\u8f38\u5165\u7aef\u9ede\u4e0d\u540c\u7684\u8f38\u5165 ID\u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- ``\uff1a\u60a8\u7684 Google Cloud \u9805\u76ee\u7de8\u865f\uff1b\u4f4d\u65bc [IAM \u8a2d\u7f6e](https://console.cloud.google.com/iam-admin/settings?hl=zh-cn) \u9801\u9762\u4e0a\u7684 **\u9805\u76ee\u7de8\u865f** \u5b57\u6bb5\u4e2d\n- ``\uff1a\u8981\u5728\u5176\u4e2d\u5275\u5efa\u8f38\u5165\u7aef\u9ede\u7684\u4f4d\u7f6e\uff1b\u8acb\u4f7f\u7528 [\u652f\u6301\u7684\u5340\u57df](https://cloud.google.com/livestream/docs/locations?hl=zh-cn) \u4e4b\u4e00\n- ``\uff1a\u7528\u6236\u5b9a\u7fa9\u7684\u5099\u7528\u8f38\u5165\u7aef\u9ede\u6a19\u8b58\u7b26\uff08\u5982\u679c\u4e3b\u8f38\u5165\u6d41\u56e0\u7db2\u7d61\u554f\u984c\u65b7\u958b\u9023\u63a5\uff0c\u5247\u4f7f\u7528\u6b64\u503c\uff09\uff1b\u6b64\u503c\u5fc5\u9808\u7232 1-63 \u500b\u5b57\u7b26\uff0c\u4ee5`[a-z0-9]`\u958b\u982d\u548c\u7d50\u5c3e\uff0c\u4e26\u4e14\u53ef\u4ee5\u5728\u5b57\u7b26\u4e4b\u9593\u5305\u542b\u77ed\u5283\u7dda (-)\n\u5982\u9700\u767c\u9001\u60a8\u7684\u8acb\u6c42\uff0c\u8acb\u5c55\u958b\u4ee5\u4e0b\u9078\u9805\u4e4b\u4e00\uff1a\u60a8\u61c9\u8a72\u6536\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\u7684 JSON \u97ff\u61c9\uff1a\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/inputs/BACKUP_INPUT_ID\",\n \"verb\": \"create\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\n\u6b64\u547d\u4ee4\u6703\u5275\u5efa\u4e00\u500b\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c (LRO)\uff0c\u53ef\u7528\u65bc\u8ddf\u8e64\u8acb\u6c42\u7684\u9032\u5ea6\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1\n [\u7ba1\u7406\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c ](https://cloud.google.com/livestream/docs/how-to/manage-long-running-operations?hl=zh-cn) \n\u3002\n\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API C# API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/CreateInputAsync.cs) \n```\nusing Google.Api.Gax.ResourceNames;using Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using System.Threading.Tasks;public class CreateInputSample{\u00a0 \u00a0 public async Task<Input> CreateInputAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string inputId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 CreateInputRequest request = new CreateInputRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ParentAsLocationName = LocationName.FromProjectLocation(projectId, locationId),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputId = inputId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input = new Input\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type = Input.Types.Type.RtmpPush\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Input, OperationMetadata> response = await client.CreateInputAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Input, OperationMetadata> completedResponse = await response.PollUntilCompletedAsync();\u00a0 \u00a0 \u00a0 \u00a0 // Retrieve the operation result.\u00a0 \u00a0 \u00a0 \u00a0 return completedResponse.Result;\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Go API \u53c3\u8003\u6587\u6a94](https://pkg.go.dev/cloud.google.com/go/video/livestream) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/create_input.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// createInput creates an input endpoint. You send an input video stream to this// endpoint.func createInput(w io.Writer, projectID, location, inputID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // inputID := \"my-input\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.CreateInputRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: \u00a0fmt.Sprintf(\"projects/%s/locations/%s\", projectID, location),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputId: inputID,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input: &livestreampb.Input{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type: livestreampb.Input_RTMP_PUSH,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Creates the input.\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.CreateInput(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"CreateInput: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Input: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-live-stream/latest/overview?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/CreateInput.java) \n```\nimport com.google.cloud.video.livestream.v1.CreateInputRequest;import com.google.cloud.video.livestream.v1.Input;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.LocationName;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class CreateInput {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String inputId = \"my-input-id\";\u00a0 \u00a0 createInput(projectId, location, inputId);\u00a0 }\u00a0 public static void createInput(String projectId, String location, String inputId)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 var createInputRequest =\u00a0 \u00a0 \u00a0 \u00a0 CreateInputRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(LocationName.of(projectId, location).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInputId(inputId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInput(Input.newBuilder().setType(Input.Type.RTMP_PUSH).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // First API call in a project can take up to 15 minutes.\u00a0 \u00a0 Input result =\u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient.createInputAsync(createInputRequest).get(15, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Input: \" + result.getName());\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/createInput.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// inputId = 'my-input';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function createInput() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 parent: livestreamServiceClient.locationPath(projectId, location),\u00a0 \u00a0 inputId: inputId,\u00a0 \u00a0 input: {\u00a0 \u00a0 \u00a0 type: 'RTMP_PUSH',\u00a0 \u00a0 },\u00a0 };\u00a0 // Run request\u00a0 const [operation] = await livestreamServiceClient.createInput(request);\u00a0 const response = await operation.promise();\u00a0 const [input] = response;\u00a0 console.log(`Input: ${input.name}`);}createInput();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API PHP API \u53c3\u8003\u6587\u6a94](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/create_input.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Input;use Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\CreateInputRequest;/**\u00a0* Creates an input. You send an input video stream to this endpoint.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the input\u00a0* @param string \u00a0$inputId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the input to be created\u00a0*/function create_input(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $inputId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $parent = $livestreamClient->locationName($callingProjectId, $location);\u00a0 \u00a0 $input = (new Input())\u00a0 \u00a0 \u00a0 \u00a0 ->setType(Input\\Type::RTMP_PUSH);\u00a0 \u00a0 // Run the input creation request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new CreateInputRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setParent($parent)\u00a0 \u00a0 \u00a0 \u00a0 ->setInput($input)\u00a0 \u00a0 \u00a0 \u00a0 ->setInputId($inputId);\u00a0 \u00a0 $operationResponse = $livestreamClient->createInput($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 $result = $operationResponse->getResult();\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Input: %s' . PHP_EOL, $result->getName());\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/create_input.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def create_input(\u00a0 \u00a0 project_id: str, location: str, input_id: str) -> live_stream_v1.types.Input:\u00a0 \u00a0 \"\"\"Creates an input.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location in which to create the input.\u00a0 \u00a0 \u00a0 \u00a0 input_id: The user-defined input ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 parent = f\"projects/{project_id}/locations/{location}\"\u00a0 \u00a0 input = live_stream_v1.types.Input(\u00a0 \u00a0 \u00a0 \u00a0 type_=\"RTMP_PUSH\",\u00a0 \u00a0 )\u00a0 \u00a0 operation = client.create_input(parent=parent, input=input, input_id=input_id)\u00a0 \u00a0 response = operation.result(900)\u00a0 \u00a0 print(f\"Input: {response.name}\")\u00a0 \u00a0 return response\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Ruby API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/ruby/docs/reference/google-cloud-video-live_stream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/create_input.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Create an input endpoint\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param input_id [String] Your input name (e.g. \"my-input\")#def create_input project_id:, location:, input_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the parent.\u00a0 parent = client.location_path project: project_id, location: location\u00a0 # Set the input fields.\u00a0 new_input = {\u00a0 \u00a0 type: Google::Cloud::Video::LiveStream::V1::Input::Type::RTMP_PUSH\u00a0 }\u00a0 operation = client.create_input parent: parent, input: new_input, input_id: input_id\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print the input name.\u00a0 puts \"Input: #{operation.response.name}\"end\n```\n## \u5275\u5efa\u983b\u9053\n\u5982\u9700\u5275\u5efa\u6e20\u9053\uff0c\u8acb\u4f7f\u7528 [projects.locations.channels.create](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels/create?hl=zh-cn) \u65b9\u6cd5\u3002\u5728\u672c\u793a\u4f8b\u4e2d\uff0c\u7232\u7b2c\u4e00\u500b\u8f38\u5165\u9023\u63a5\u914d\u7f6e\u4e86 [automaticFailover](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels?hl=zh-cn#InputAttachment.FIELDS.automatic_failover) \u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- ``\uff1a\u60a8\u7684 Google Cloud \u9805\u76ee\u7de8\u865f\uff1b\u4f4d\u65bc [IAM \u8a2d\u7f6e](https://console.cloud.google.com/iam-admin/settings?hl=zh-cn) \u9801\u9762\u4e0a\u7684 **\u9805\u76ee\u7de8\u865f** \u5b57\u6bb5\u4e2d\n- ``\uff1a\u8981\u5728\u5176\u4e2d\u5275\u5efa\u983b\u9053\u7684\u4f4d\u7f6e\uff1b\u8acb\u4f7f\u7528 [\u652f\u6301\u7684\u5340\u57df](https://cloud.google.com/livestream/docs/locations?hl=zh-cn) \u4e4b\u4e00\n- ``\uff1a\u7528\u6236\u5b9a\u7fa9\u7684\u983b\u9053\u6a19\u8b58\u7b26\uff1b\u6b64\u503c\u5fc5\u9808\u7232 1-63 \u500b\u5b57\u7b26\uff0c\u4ee5`[a-z0-9]`\u958b\u982d\u548c\u7d50\u5c3e\uff0c\u4e26\u4e14\u53ef\u4ee5\u5728\u5b57\u7b26\u4e4b\u9593\u5305\u542b\u77ed\u5283\u7dda (-)\n- ``\uff1a\u7528\u6236\u5b9a\u7fa9\u7684\u4e3b\u8981\u8f38\u5165\u7aef\u9ede\u6a19\u8b58\u7b26\n- ``\uff1a\u7528\u6236\u5b9a\u7fa9\u7684\u5099\u4efd\u8f38\u5165\u7aef\u9ede\u6a19\u8b58\u7b26\n- ``\uff1a [\u60a8\u5275\u5efa\u7684 Cloud Storage \u5b58\u5132\u6876](https://cloud.google.com/livestream/docs/quickstarts?hl=zh-cn) \u7684\u540d\u7a31\n\u5982\u9700\u767c\u9001\u60a8\u7684\u8acb\u6c42\uff0c\u8acb\u5c55\u958b\u4ee5\u4e0b\u9078\u9805\u4e4b\u4e00\uff1a\u60a8\u61c9\u8a72\u6536\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\u7684 JSON \u97ff\u61c9\uff1a\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID\",\n \"verb\": \"create\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\n\u6b64\u547d\u4ee4\u6703\u5275\u5efa\u4e00\u500b\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c (LRO)\uff0c\u53ef\u7528\u65bc\u8ddf\u8e64\u8acb\u6c42\u7684\u9032\u5ea6\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1\n [\u7ba1\u7406\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c ](https://cloud.google.com/livestream/docs/how-to/manage-long-running-operations?hl=zh-cn) \n\u3002\n\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API C# API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/CreateChannelWithBackupInputAsync.cs) \n```\nusing Google.Api.Gax.ResourceNames;using Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using System.Threading.Tasks;public class CreateChannelWithBackupInputSample{\u00a0 \u00a0 public async Task<Channel> CreateChannelWithBackupInputAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string channelId, string primaryInputId, string backupInputId, string outputUri)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 InputAttachment primaryInputAttachment = new InputAttachment\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"my-primary-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAsInputName = InputName.FromProjectLocationInput(projectId, locationId, primaryInputId),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AutomaticFailover = new InputAttachment.Types.AutomaticFailover\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputKeys = { \"my-backup-input\" }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 InputAttachment backupInputAttachment = new InputAttachment\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"my-backup-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAsInputName = InputName.FromProjectLocationInput(projectId, locationId, backupInputId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 VideoStream videoStream = new VideoStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 H264 = new VideoStream.Types.H264CodecSettings\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Profile = \"high\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BitrateBps = 3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FrameRate = 30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HeightPixels = 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 WidthPixels = 1280\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream elementaryStreamVideo = new ElementaryStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"es_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 VideoStream = videoStream\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 AudioStream audioStream = new AudioStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Codec = \"aac\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelCount = 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BitrateBps = 160000\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream elementaryStreamAudio = new ElementaryStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"es_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioStream = audioStream\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 MuxStream muxVideo = new MuxStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"mux_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams = { \"es_video\" },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings = new SegmentSettings\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentDuration = new Google.Protobuf.WellKnownTypes.Duration\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds = 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 MuxStream muxAudio = new MuxStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"mux_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams = { \"es_audio\" },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings = new SegmentSettings\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentDuration = new Google.Protobuf.WellKnownTypes.Duration\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds = 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 CreateChannelRequest request = new CreateChannelRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ParentAsLocationName = LocationName.FromProjectLocation(projectId, locationId),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelId = channelId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Channel = new Channel\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAttachments = { primaryInputAttachment, backupInputAttachment },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Output = new Channel.Types.Output\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Uri = outputUri\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams = { elementaryStreamVideo, elementaryStreamAudio },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStreams = { muxVideo, muxAudio },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Manifests = {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new Manifest {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FileName = \"manifest.m3u8\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type = Manifest.Types.ManifestType.Hls,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStreams = { \"mux_video\", \"mux_audio\" },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MaxSegmentCount = 5\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Channel, OperationMetadata> response = await client.CreateChannelAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Channel, OperationMetadata> completedResponse = await response.PollUntilCompletedAsync();\u00a0 \u00a0 \u00a0 \u00a0 // Retrieve the operation result.\u00a0 \u00a0 \u00a0 \u00a0 return completedResponse.Result;\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Go API \u53c3\u8003\u6587\u6a94](https://pkg.go.dev/cloud.google.com/go/video/livestream) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/create_channel_with_backup_input.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"github.com/golang/protobuf/ptypes/duration\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// createChannelWithBackupInput creates a channel with a failover backup input.func createChannelWithBackupInput(w io.Writer, projectID, location, channelID, primaryInputID, backupInputID, outputURI string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // channelID := \"my-channel\"\u00a0 \u00a0 \u00a0 \u00a0 // primaryInputID := \"my-primary-input\"\u00a0 \u00a0 \u00a0 \u00a0 // backupInputID := \"my-backup-input\"\u00a0 \u00a0 \u00a0 \u00a0 // outputURI := \"gs://my-bucket/my-output-folder/\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 primaryInput := fmt.Sprintf(\"projects/%s/locations/%s/inputs/%s\", projectID, location, primaryInputID)\u00a0 \u00a0 \u00a0 \u00a0 backupInput := fmt.Sprintf(\"projects/%s/locations/%s/inputs/%s\", projectID, location, backupInputID)\u00a0 \u00a0 \u00a0 \u00a0 automaticFailover := &livestreampb.InputAttachment_AutomaticFailover{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputKeys: []string{\"my-backup-input\"},\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.CreateChannelRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: \u00a0 \u00a0fmt.Sprintf(\"projects/%s/locations/%s\", projectID, location),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelId: channelID,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Channel: &livestreampb.Channel{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAttachments: []*livestreampb.InputAttachment{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"my-primary-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 primaryInput,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AutomaticFailover: automaticFailover,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \u00a0 \"my-backup-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input: backupInput,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Output: &livestreampb.Channel_Output{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Uri: outputURI,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams: []*livestreampb.ElementaryStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \"es_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream: &livestreampb.ElementaryStream_VideoStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 VideoStream: &livestreampb.VideoStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CodecSettings: &livestreampb.VideoStream_H264{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 H264: &livestreampb.VideoStream_H264CodecSettings{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Profile: \u00a0 \u00a0 \u00a0\"high\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BitrateBps: \u00a0 3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FrameRate: \u00a0 \u00a030,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HeightPixels: 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 WidthPixels: \u00a01280,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \"es_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream: &livestreampb.ElementaryStream_AudioStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioStream: &livestreampb.AudioStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Codec: \u00a0 \u00a0 \u00a0 \u00a0\"aac\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelCount: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BitrateBps: \u00a0 160000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStreams: []*livestreampb.MuxStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mux_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams: []string{\"es_video\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings: &livestreampb.SegmentSettings{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentDuration: &duration.Duration{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mux_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams: []string{\"es_audio\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings: &livestreampb.SegmentSettings{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentDuration: &duration.Duration{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Manifests: []*livestreampb.Manifest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FileName: \u00a0 \u00a0 \u00a0 \u00a0\"manifest.m3u8\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0livestreampb.Manifest_HLS,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStreams: \u00a0 \u00a0 \u00a0[]string{\"mux_video\", \"mux_audio\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MaxSegmentCount: 5,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Creates the channel.\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.CreateChannel(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"CreateChannel: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Channel: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-live-stream/latest/overview?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/CreateChannelWithBackupInput.java) \n```\nimport com.google.cloud.video.livestream.v1.AudioStream;import com.google.cloud.video.livestream.v1.Channel;import com.google.cloud.video.livestream.v1.Channel.Output;import com.google.cloud.video.livestream.v1.CreateChannelRequest;import com.google.cloud.video.livestream.v1.ElementaryStream;import com.google.cloud.video.livestream.v1.InputAttachment;import com.google.cloud.video.livestream.v1.InputAttachment.AutomaticFailover;import com.google.cloud.video.livestream.v1.InputName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.LocationName;import com.google.cloud.video.livestream.v1.Manifest;import com.google.cloud.video.livestream.v1.Manifest.ManifestType;import com.google.cloud.video.livestream.v1.MuxStream;import com.google.cloud.video.livestream.v1.SegmentSettings;import com.google.cloud.video.livestream.v1.VideoStream;import com.google.cloud.video.livestream.v1.VideoStream.H264CodecSettings;import com.google.protobuf.Duration;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class CreateChannelWithBackupInput {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String channelId = \"my-channel-id\";\u00a0 \u00a0 String primaryInputId = \"my-primary-input-id\";\u00a0 \u00a0 String backupInputId = \"my-backup-input-id\";\u00a0 \u00a0 String outputUri = \"gs://my-bucket/my-output-folder/\";\u00a0 \u00a0 createChannelWithBackupInput(\u00a0 \u00a0 \u00a0 \u00a0 projectId, location, channelId, primaryInputId, backupInputId, outputUri);\u00a0 }\u00a0 public static void createChannelWithBackupInput(\u00a0 \u00a0 \u00a0 String projectId,\u00a0 \u00a0 \u00a0 String location,\u00a0 \u00a0 \u00a0 String channelId,\u00a0 \u00a0 \u00a0 String primaryInputId,\u00a0 \u00a0 \u00a0 String backupInputId,\u00a0 \u00a0 \u00a0 String outputUri)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 VideoStream videoStream =\u00a0 \u00a0 \u00a0 \u00a0 VideoStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setH264(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 H264CodecSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setProfile(\"high\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setBitrateBps(3000000)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFrameRate(30)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setHeightPixels(720)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setWidthPixels(1280))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 AudioStream audioStream =\u00a0 \u00a0 \u00a0 \u00a0 AudioStream.newBuilder().setCodec(\"aac\").setChannelCount(2).setBitrateBps(160000).build();\u00a0 \u00a0 var createChannelRequest =\u00a0 \u00a0 \u00a0 \u00a0 CreateChannelRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(LocationName.of(projectId, location).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setChannelId(channelId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setChannel(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Channel.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addInputAttachments(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAttachment.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"my-primary-input\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInput(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputName.of(projectId, location, primaryInputId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAutomaticFailover(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AutomaticFailover.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addInputKeys(\"my-backup-input\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addInputAttachments(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAttachment.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"my-backup-input\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInput(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputName.of(projectId, location, backupInputId).toString()))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setOutput(Output.newBuilder().setUri(outputUri).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addElementaryStreams(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"es_video\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setVideoStream(videoStream))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addElementaryStreams(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"es_audio\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioStream(audioStream))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addMuxStreams(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"mux_video\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addElementaryStreams(\"es_video\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSegmentSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSegmentDuration(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Duration.newBuilder().setSeconds(2).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addMuxStreams(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"mux_audio\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addElementaryStreams(\"es_audio\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSegmentSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSegmentDuration(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Duration.newBuilder().setSeconds(2).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addManifests(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Manifest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFileName(\"manifest.m3u8\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setType(ManifestType.HLS)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addMuxStreams(\"mux_video\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addMuxStreams(\"mux_audio\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setMaxSegmentCount(5)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build()))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // First API call in a project can take up to 10 minutes.\u00a0 \u00a0 Channel result =\u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createChannelAsync(createChannelRequest)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .get(10, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Channel: \" + result.getName());\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/createChannelWithBackupInput.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// channelId = 'my-channel';// primaryInputId = 'my-primary-input';// backupInputId = 'my-backup-input';// outputUri = 'gs://my-bucket/my-output-folder/';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function createChannelWithBackupInput() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 parent: livestreamServiceClient.locationPath(projectId, location),\u00a0 \u00a0 channelId: channelId,\u00a0 \u00a0 channel: {\u00a0 \u00a0 \u00a0 inputAttachments: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'my-primary-input',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input: livestreamServiceClient.inputPath(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 primaryInputId\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 automaticFailover: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 inputKeys: ['my-backup-input'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'my-backup-input',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input: livestreamServiceClient.inputPath(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 backupInputId\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 output: {\u00a0 \u00a0 \u00a0 \u00a0 uri: outputUri,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 elementaryStreams: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'es_video',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 videoStream: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h264: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 profile: 'high',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 heightPixels: 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 widthPixels: 1280,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrateBps: 3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 frameRate: 30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'es_audio',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audioStream: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 codec: 'aac',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 channelCount: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrateBps: 160000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 muxStreams: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'mux_video',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 elementaryStreams: ['es_video'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segmentSettings: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'mux_audio',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 elementaryStreams: ['es_audio'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segmentSettings: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 manifests: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fileName: 'manifest.m3u8',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: 'HLS',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 muxStreams: ['mux_video', 'mux_audio'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 maxSegmentCount: 5,\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 },\u00a0 };\u00a0 // Run request\u00a0 const [operation] = await livestreamServiceClient.createChannel(request);\u00a0 const response = await operation.promise();\u00a0 const [channel] = response;\u00a0 console.log(`Channel: ${channel.name}`);}createChannelWithBackupInput();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API PHP API \u53c3\u8003\u6587\u6a94](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/create_channel_with_backup_input.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\AudioStream;use Google\\Cloud\\Video\\LiveStream\\V1\\Channel;use Google\\Cloud\\Video\\LiveStream\\V1\\ElementaryStream;use Google\\Cloud\\Video\\LiveStream\\V1\\InputAttachment;use Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\CreateChannelRequest;use Google\\Cloud\\Video\\LiveStream\\V1\\Manifest;use Google\\Cloud\\Video\\LiveStream\\V1\\MuxStream;use Google\\Cloud\\Video\\LiveStream\\V1\\SegmentSettings;use Google\\Cloud\\Video\\LiveStream\\V1\\VideoStream;use Google\\Protobuf\\Duration;/**\u00a0* Creates a channel with a backup input.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channel\u00a0* @param string \u00a0$channelId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel to be created\u00a0* @param string \u00a0$primaryInputId \u00a0 \u00a0 The ID of the primary input for the channel\u00a0* @param string \u00a0$backupInputId \u00a0 \u00a0 \u00a0The ID of the backup input for the channel\u00a0* @param string \u00a0$outputUri \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Uri of the channel output folder in a\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Cloud Storage bucket. (e.g.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"gs://my-bucket/my-output-folder/\")\u00a0*/function create_channel_with_backup_input(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $channelId,\u00a0 \u00a0 string $primaryInputId,\u00a0 \u00a0 string $backupInputId,\u00a0 \u00a0 string $outputUri): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $parent = $livestreamClient->locationName($callingProjectId, $location);\u00a0 \u00a0 $channelName = $livestreamClient->channelName($callingProjectId, $location, $channelId);\u00a0 \u00a0 $primaryInputName = $livestreamClient->inputName($callingProjectId, $location, $primaryInputId);\u00a0 \u00a0 $backupInputName = $livestreamClient->inputName($callingProjectId, $location, $backupInputId);\u00a0 \u00a0 $channel = (new Channel())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($channelName)\u00a0 \u00a0 \u00a0 \u00a0 ->setInputAttachments([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new InputAttachment([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'my-primary-input',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'input' => $primaryInputName,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'automatic_failover' => new InputAttachment\\AutomaticFailover([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'input_keys' => ['my-backup-input']\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new InputAttachment([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'my-backup-input',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'input' => $backupInputName\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ->setElementaryStreams([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new ElementaryStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'es_video',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'video_stream' => new VideoStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'h264' => new VideoStream\\H264CodecSettings([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'profile' => 'high',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'width_pixels' => 1280,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'height_pixels' => 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'bitrate_bps' => 3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'frame_rate' => 30\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new ElementaryStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'es_audio',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'audio_stream' => new AudioStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'codec' => 'aac',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'channel_count' => 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'bitrate_bps' => 160000\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ->setOutput(new Channel\\Output(['uri' => $outputUri]))\u00a0 \u00a0 \u00a0 \u00a0 ->setMuxStreams([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new MuxStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'mux_video',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'elementary_streams' => ['es_video'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'segment_settings' => new SegmentSettings([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'segment_duration' => new Duration(['seconds' => 2])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new MuxStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'mux_audio',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'elementary_streams' => ['es_audio'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'segment_settings' => new SegmentSettings([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'segment_duration' => new Duration(['seconds' => 2])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]),\u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ->setManifests([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new Manifest([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'file_name' => 'manifest.m3u8',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'type' => Manifest\\ManifestType::HLS,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'mux_streams' => ['mux_video', 'mux_audio'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'max_segment_count' => 5\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ]);\u00a0 \u00a0 // Run the channel creation request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new CreateChannelRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setParent($parent)\u00a0 \u00a0 \u00a0 \u00a0 ->setChannel($channel)\u00a0 \u00a0 \u00a0 \u00a0 ->setChannelId($channelId);\u00a0 \u00a0 $operationResponse = $livestreamClient->createChannel($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 $result = $operationResponse->getResult();\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Channel: %s' . PHP_EOL, $result->getName());\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/create_channel_with_backup_input.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)from google.protobuf import duration_pb2 as durationdef create_channel_with_backup_input(\u00a0 \u00a0 project_id: str,\u00a0 \u00a0 location: str,\u00a0 \u00a0 channel_id: str,\u00a0 \u00a0 primary_input_id: str,\u00a0 \u00a0 backup_input_id: str,\u00a0 \u00a0 output_uri: str,) -> live_stream_v1.types.Channel:\u00a0 \u00a0 \"\"\"Creates a channel.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location in which to create the channel.\u00a0 \u00a0 \u00a0 \u00a0 channel_id: The user-defined channel ID.\u00a0 \u00a0 \u00a0 \u00a0 primary_input_id: The user-defined primary input ID.\u00a0 \u00a0 \u00a0 \u00a0 backup_input_id: The user-defined backup input ID.\u00a0 \u00a0 \u00a0 \u00a0 output_uri: Uri of the channel output folder in a Cloud Storage bucket.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 parent = f\"projects/{project_id}/locations/{location}\"\u00a0 \u00a0 primary_input = (\u00a0 \u00a0 \u00a0 \u00a0 f\"projects/{project_id}/locations/{location}/inputs/{primary_input_id}\"\u00a0 \u00a0 )\u00a0 \u00a0 backup_input = (\u00a0 \u00a0 \u00a0 \u00a0 f\"projects/{project_id}/locations/{location}/inputs/{backup_input_id}\"\u00a0 \u00a0 )\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\u00a0 \u00a0 channel = live_stream_v1.types.Channel(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 input_attachments=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.InputAttachment(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"my-primary-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input=primary_input,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 automatic_failover=live_stream_v1.types.InputAttachment.AutomaticFailover(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input_keys=[\"my-backup-input\"],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.InputAttachment(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"my-backup-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input=backup_input,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 output=live_stream_v1.types.Channel.Output(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 uri=output_uri,\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 elementary_streams=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.ElementaryStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"es_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 video_stream=live_stream_v1.types.VideoStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h264=live_stream_v1.types.VideoStream.H264CodecSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 profile=\"high\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 width_pixels=1280,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 height_pixels=720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrate_bps=3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 frame_rate=30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.ElementaryStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"es_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audio_stream=live_stream_v1.types.AudioStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 codec=\"aac\", channel_count=2, bitrate_bps=160000\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 mux_streams=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.MuxStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"mux_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 elementary_streams=[\"es_video\"],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_settings=live_stream_v1.types.SegmentSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_duration=duration.Duration(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds=2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.MuxStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"mux_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 elementary_streams=[\"es_audio\"],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_settings=live_stream_v1.types.SegmentSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_duration=duration.Duration(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds=2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 manifests=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.Manifest(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 file_name=\"manifest.m3u8\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type_=\"HLS\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mux_streams=[\"mux_video\", \"mux_audio\"],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max_segment_count=5,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 )\u00a0 \u00a0 operation = client.create_channel(\u00a0 \u00a0 \u00a0 \u00a0 parent=parent, channel=channel, channel_id=channel_id\u00a0 \u00a0 )\u00a0 \u00a0 response = operation.result(600)\u00a0 \u00a0 print(f\"Channel: {response.name}\")\u00a0 \u00a0 return response\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Ruby API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/ruby/docs/reference/google-cloud-video-live_stream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/create_channel_with_backup_input.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Create a channel with a failover backup input\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param channel_id [String] Your channel name (e.g. \"my-channel\")# @param primary_input_id [String] Your primary input name (e.g. \"my-primary-input\")# @param backup_input_id [String] Your backup input name (e.g. \"my-backup-input\")# @param output_uri [String] Uri of the channel output folder in a Cloud Storage# \u00a0 \u00a0 bucket. (e.g. \"gs://my-bucket/my-output-folder/\";)#def create_channel_with_backup_input project_id:, location:, channel_id:, primary_input_id:, backup_input_id:, output_uri:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the parent.\u00a0 parent = client.location_path project: project_id, location: location\u00a0 # Build the resource name of the inputs.\u00a0 primary_input_path = client.input_path project: project_id, location: location, input: primary_input_id\u00a0 backup_input_path = client.input_path project: project_id, location: location, input: backup_input_id\u00a0 # Set the channel fields.\u00a0 new_channel = {\u00a0 \u00a0 input_attachments: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"my-primary-input\",\u00a0 \u00a0 \u00a0 \u00a0 input: primary_input_path,\u00a0 \u00a0 \u00a0 \u00a0 automatic_failover: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input_keys: [\"my-backup-input\"]\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"my-backup-input\",\u00a0 \u00a0 \u00a0 \u00a0 input: backup_input_path\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ],\u00a0 \u00a0 output: {\u00a0 \u00a0 \u00a0 uri: output_uri\u00a0 \u00a0 },\u00a0 \u00a0 elementary_streams: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"es_video\",\u00a0 \u00a0 \u00a0 \u00a0 video_stream: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h264: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 profile: \"high\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrate_bps: 3_000_000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 frame_rate: 30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 height_pixels: 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 width_pixels: 1280\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"es_audio\",\u00a0 \u00a0 \u00a0 \u00a0 audio_stream: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 codec: \"aac\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 channel_count: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrate_bps: 160_000\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ],\u00a0 \u00a0 mux_streams: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"mux_video\",\u00a0 \u00a0 \u00a0 \u00a0 elementary_streams: [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"es_video\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 segment_settings: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_duration: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"mux_audio\",\u00a0 \u00a0 \u00a0 \u00a0 elementary_streams: [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"es_audio\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 segment_settings: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_duration: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ],\u00a0 \u00a0 manifests: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 file_name: \"main.m3u8\",\u00a0 \u00a0 \u00a0 \u00a0 type: Google::Cloud::Video::LiveStream::V1::Manifest::ManifestType::HLS,\u00a0 \u00a0 \u00a0 \u00a0 mux_streams: [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mux_video\", \"mux_audio\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 max_segment_count: 5\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 }\u00a0 operation = client.create_channel parent: parent, channel: new_channel, channel_id: channel_id\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print the channel name.\u00a0 puts \"Channel: #{operation.response.name}\"end\n```\n## \u624b\u52d5\u5207\u63db\u8f38\u5165\u6e90\n\u5982\u9700\u624b\u52d5\u5c07\u8f38\u5165\u5f9e\u4e3b\u8981\u8f38\u5165\u5207\u63db\u5230\u5099\u7528\u8f38\u5165\uff08\u4f8b\u5982\uff0c\u5c07 `my-primary-input` \u5207\u63db\u7232 `my-backup-input` \uff09\uff0c\u8acb\u5275\u5efa [\u6e20\u9053\u4e8b\u4ef6](https://cloud.google.com/livestream/docs/how-to/create-channel-events?hl=zh-cn#switch-input-event) \u3002\n\u624b\u52d5\u5207\u63db\u5f8c\uff0c\u60a8\u53ef\u4ee5\u8996\u9700\u8981\u65b7\u958b\u8207 `my-primary-input` \u7684\u9023\u63a5\uff0c\u7136\u5f8c\u91cd\u65b0\u9023\u63a5\u3002\u8a72\u983b\u9053\u5728\u91cd\u65b0\u9023\u63a5\u6642\u4e0d\u6703\u50cf\u5728\u9ed8\u8a8d\u7684\u81ea\u52d5\u6545\u969c\u5207\u63db\u8a2d\u7f6e\u4e0b\u90a3\u6a23\u5207\u63db\u5230\u6b64\u8f38\u5165\u6e90\u3002\n\u5982\u9700\u5207\u63db\u56de `my-primary-input` \uff0c\u8acb\u57f7\u884c\u4ee5\u4e0b\u4efb\u4e00\u64cd\u4f5c\uff1a\n- \u5275\u5efa\u4e00\u500b\u65b0\u7684 [inputSwitch](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels.events?hl=zh-cn#Event.FIELDS.input_switch) \u4e8b\u4ef6\uff0c\u5176\u4e2d`inputKey`\u8a2d\u7f6e\u7232`my-primary-input`\u3002\u6b64\u4e8b\u4ef6\u6703\u5207\u63db\u56de\u4e3b\u8981\u8f38\u5165\uff0c\u800c\u4e0d\u6703\u6062\u5fa9\u81ea\u52d5\u6545\u969c\u5207\u63db\u8a2d\u7f6e\u3002 **** \n- \u8acb\u66f4\u65b0\u6e20\u9053\u4ee5\u5553\u7528\u81ea\u52d5\u6545\u969c\u5207\u63db\u529f\u80fd\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u5207\u63db\u8f38\u5165\u4e8b\u4ef6](https://cloud.google.com/livestream/docs/how-to/create-channel-events?hl=zh-cn#switch-input-event) \u3002", "guide": "Live Stream API"}