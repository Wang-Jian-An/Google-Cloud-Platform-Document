{"title": "Live Stream API - \u5275\u5efa\u548c\u7ba1\u7406\u6e20\u9053", "url": "https://cloud.google.com/livestream/docs/how-to/create-channels?hl=zh-cn", "abstract": "# Live Stream API - \u5275\u5efa\u548c\u7ba1\u7406\u6e20\u9053\n\u672c\u9801\u4ecb\u7d39\u77ad\u5982\u4f55\u5275\u5efa\u548c\u7ba1\u7406 Live Stream API \u983b\u9053\u3002\u901a\u9053\u8cc7\u6e90\u8868\u793a\u57f7\u884c\u7528\u6236\u5b9a\u7fa9\u7684\u201c\u6d41\u5f0f\u50b3\u8f38\u201d\u64cd\u4f5c\u7684\u8655\u7406\u5668\u3002\u6d41\u5f0f\u64cd\u4f5c\u5305\u62ec\u901a\u904e\u8f38\u5165\u7aef\u9ede\u7372\u53d6\u8f38\u5165\u6d41\u3001\u5c07\u8f38\u5165\u6d41\u8f49\u78bc\u7232\u591a\u7a2e\u8868\u793a\u5f62\u5f0f\uff0c\u4ee5\u53ca\u5728\u6307\u5b9a\u4f4d\u7f6e\u4ee5\u7279\u5b9a\u683c\u5f0f\u767c\u4f48\u5be6\u6642\u8f38\u51fa\u3002\n", "content": "## \u8a2d\u7f6e\u60a8\u7684 Google Cloud \u9805\u76ee\u548c\u8eab\u4efd\u9a57\u8b49\n[Google Cloud \u9805\u76ee](https://cloud.google.com/docs/overview?hl=zh-cn#projects)\n[\u6e96\u5099\u5de5\u4f5c](https://cloud.google.com/livestream/docs/how-to/before-you-begin?hl=zh-cn)\n## \u524d\u63d0\u689d\u4ef6\n- [\u5275\u5efa\u8f38\u5165\u7aef\u9ede](https://cloud.google.com/livestream/docs/how-to/create-input-endpoints?hl=zh-cn#create_input_endpoint) \u3002## \u5275\u5efa\u983b\u9053\n\u5982\u9700\u5275\u5efa\u6e20\u9053\uff0c\u8acb\u4f7f\u7528 [projects.locations.channels.create](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels/create?hl=zh-cn) \u65b9\u6cd5\u3002\u4ee5\u4e0b\u793a\u4f8b\u5275\u5efa\u4e86\u4e00\u500b\u53ef\u751f\u6210 HLS \u76f4\u64ad\u7684\u983b\u9053\u3002\u76f4\u64ad\u8996\u983b\u5305\u542b\u55ae\u500b\u9ad8\u5206\u8fa8\u7387 (1280x720) \u5167\u5bb9\u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- ``\uff1a\u60a8\u7684 Google Cloud \u9805\u76ee\u7de8\u865f\uff1b\u4f4d\u65bc [IAM \u8a2d\u7f6e](https://console.cloud.google.com/iam-admin/settings?hl=zh-cn) \u9801\u9762\u4e0a\u7684 **\u9805\u76ee\u7de8\u865f** \u5b57\u6bb5\u4e2d\n- ``\uff1a\u8981\u5728\u5176\u4e2d\u5275\u5efa\u983b\u9053\u7684\u4f4d\u7f6e\uff1b\u8acb\u4f7f\u7528 [\u652f\u6301\u7684\u5340\u57df](https://cloud.google.com/livestream/docs/locations?hl=zh-cn) \u4e4b\u4e00\n- ``\uff1a\u7528\u6236\u5b9a\u7fa9\u7684\u983b\u9053\u6a19\u8b58\u7b26\uff1b\u6b64\u503c\u5fc5\u9808\u7232 1-63 \u500b\u5b57\u7b26\uff0c\u4ee5`[a-z0-9]`\u958b\u982d\u548c\u7d50\u5c3e\uff0c\u4e26\u4e14\u53ef\u4ee5\u5728\u5b57\u7b26\u4e4b\u9593\u5305\u542b\u77ed\u5283\u7dda (-)\n- ``\uff1a\u7528\u6236\u5b9a\u7fa9\u7684\u8f38\u5165\u7aef\u9ede\u6a19\u8b58\u7b26\n- ``\uff1a\u60a8\u7232\u4e86\u4fdd\u5b58\u76f4\u64ad\u6e05\u55ae\u548c\u7247\u6bb5\u6587\u4ef6\u800c\u5275\u5efa\u7684 Cloud Storage \u5b58\u5132\u6876\u7684\u540d\u7a31\n\u5982\u9700\u767c\u9001\u60a8\u7684\u8acb\u6c42\uff0c\u8acb\u5c55\u958b\u4ee5\u4e0b\u9078\u9805\u4e4b\u4e00\uff1a\u60a8\u61c9\u8a72\u6536\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\u7684 JSON \u97ff\u61c9\uff1a\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID\",\n \"verb\": \"create\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\n\u6b64\u547d\u4ee4\u6703\u5275\u5efa\u4e00\u500b\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c (LRO)\uff0c\u53ef\u7528\u65bc\u8ddf\u8e64\u8acb\u6c42\u7684\u9032\u5ea6\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1\n [\u7ba1\u7406\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c ](https://cloud.google.com/livestream/docs/how-to/manage-long-running-operations?hl=zh-cn) \n\u3002\n\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API C# API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/CreateChannelAsync.cs) \n```\nusing Google.Api.Gax.ResourceNames;using Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using System.Threading.Tasks;public class CreateChannelSample{\u00a0 \u00a0 public async Task<Channel> CreateChannelAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string channelId, string inputId, string outputUri)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 InputAttachment inputAttachment = new InputAttachment\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"my-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAsInputName = InputName.FromProjectLocationInput(projectId, locationId, inputId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 VideoStream videoStream = new VideoStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 H264 = new VideoStream.Types.H264CodecSettings\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Profile = \"high\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BitrateBps = 3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FrameRate = 30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HeightPixels = 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 WidthPixels = 1280\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream elementaryStreamVideo = new ElementaryStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"es_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 VideoStream = videoStream\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 AudioStream audioStream = new AudioStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Codec = \"aac\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelCount = 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BitrateBps = 160000\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream elementaryStreamAudio = new ElementaryStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"es_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioStream = audioStream\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 MuxStream muxVideo = new MuxStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"mux_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams = { \"es_video\" },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings = new SegmentSettings\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentDuration = new Google.Protobuf.WellKnownTypes.Duration\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds = 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 MuxStream muxAudio = new MuxStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"mux_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams = { \"es_audio\" },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings = new SegmentSettings\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentDuration = new Google.Protobuf.WellKnownTypes.Duration\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds = 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 CreateChannelRequest request = new CreateChannelRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ParentAsLocationName = LocationName.FromProjectLocation(projectId, locationId),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelId = channelId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Channel = new Channel\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAttachments = { inputAttachment },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Output = new Channel.Types.Output\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Uri = outputUri\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams = { elementaryStreamVideo, elementaryStreamAudio },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStreams = { muxVideo, muxAudio },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Manifests = {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new Manifest {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FileName = \"manifest.m3u8\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type = Manifest.Types.ManifestType.Hls,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStreams = { \"mux_video\", \"mux_audio\" },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MaxSegmentCount = 5\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Channel, OperationMetadata> response = await client.CreateChannelAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Channel, OperationMetadata> completedResponse = await response.PollUntilCompletedAsync();\u00a0 \u00a0 \u00a0 \u00a0 // Retrieve the operation result.\u00a0 \u00a0 \u00a0 \u00a0 return completedResponse.Result;\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Go API \u53c3\u8003\u6587\u6a94](https://pkg.go.dev/cloud.google.com/go/video/livestream) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/create_channel.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"github.com/golang/protobuf/ptypes/duration\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// createChannel creates a channel.func createChannel(w io.Writer, projectID, location, channelID, inputID, outputURI string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // channelID := \"my-channel\"\u00a0 \u00a0 \u00a0 \u00a0 // inputID := \"my-input\"\u00a0 \u00a0 \u00a0 \u00a0 // outputURI := \"gs://my-bucket/my-output-folder/\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.CreateChannelRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: \u00a0 \u00a0fmt.Sprintf(\"projects/%s/locations/%s\", projectID, location),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelId: channelID,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Channel: &livestreampb.Channel{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAttachments: []*livestreampb.InputAttachment{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \u00a0 \"my-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input: fmt.Sprintf(\"projects/%s/locations/%s/inputs/%s\", projectID, location, inputID),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Output: &livestreampb.Channel_Output{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Uri: outputURI,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams: []*livestreampb.ElementaryStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \"es_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream: &livestreampb.ElementaryStream_VideoStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 VideoStream: &livestreampb.VideoStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CodecSettings: &livestreampb.VideoStream_H264{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 H264: &livestreampb.VideoStream_H264CodecSettings{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Profile: \u00a0 \u00a0 \u00a0\"high\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BitrateBps: \u00a0 3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FrameRate: \u00a0 \u00a030,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HeightPixels: 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 WidthPixels: \u00a01280,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \"es_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream: &livestreampb.ElementaryStream_AudioStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioStream: &livestreampb.AudioStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Codec: \u00a0 \u00a0 \u00a0 \u00a0\"aac\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelCount: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BitrateBps: \u00a0 160000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStreams: []*livestreampb.MuxStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mux_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams: []string{\"es_video\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings: &livestreampb.SegmentSettings{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentDuration: &duration.Duration{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mux_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams: []string{\"es_audio\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings: &livestreampb.SegmentSettings{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentDuration: &duration.Duration{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Manifests: []*livestreampb.Manifest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FileName: \u00a0 \u00a0 \u00a0 \u00a0\"manifest.m3u8\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0livestreampb.Manifest_HLS,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStreams: \u00a0 \u00a0 \u00a0[]string{\"mux_video\", \"mux_audio\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MaxSegmentCount: 5,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Creates the channel.\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.CreateChannel(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"CreateChannel: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Channel: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-live-stream/latest/overview?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/CreateChannel.java) \n```\nimport com.google.cloud.video.livestream.v1.AudioStream;import com.google.cloud.video.livestream.v1.Channel;import com.google.cloud.video.livestream.v1.Channel.Output;import com.google.cloud.video.livestream.v1.CreateChannelRequest;import com.google.cloud.video.livestream.v1.ElementaryStream;import com.google.cloud.video.livestream.v1.InputAttachment;import com.google.cloud.video.livestream.v1.InputName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.LocationName;import com.google.cloud.video.livestream.v1.Manifest;import com.google.cloud.video.livestream.v1.Manifest.ManifestType;import com.google.cloud.video.livestream.v1.MuxStream;import com.google.cloud.video.livestream.v1.SegmentSettings;import com.google.cloud.video.livestream.v1.VideoStream;import com.google.cloud.video.livestream.v1.VideoStream.H264CodecSettings;import com.google.protobuf.Duration;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class CreateChannel {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String channelId = \"my-channel-id\";\u00a0 \u00a0 String inputId = \"my-input-id\";\u00a0 \u00a0 String outputUri = \"gs://my-bucket/my-output-folder/\";\u00a0 \u00a0 createChannel(projectId, location, channelId, inputId, outputUri);\u00a0 }\u00a0 public static void createChannel(\u00a0 \u00a0 \u00a0 String projectId, String location, String channelId, String inputId, String outputUri)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 VideoStream videoStream =\u00a0 \u00a0 \u00a0 \u00a0 VideoStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setH264(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 H264CodecSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setProfile(\"high\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setBitrateBps(3000000)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFrameRate(30)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setHeightPixels(720)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setWidthPixels(1280))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 AudioStream audioStream =\u00a0 \u00a0 \u00a0 \u00a0 AudioStream.newBuilder().setCodec(\"aac\").setChannelCount(2).setBitrateBps(160000).build();\u00a0 \u00a0 var createChannelRequest =\u00a0 \u00a0 \u00a0 \u00a0 CreateChannelRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(LocationName.of(projectId, location).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setChannelId(channelId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setChannel(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Channel.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addInputAttachments(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAttachment.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"my-input\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInput(InputName.of(projectId, location, inputId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setOutput(Output.newBuilder().setUri(outputUri).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addElementaryStreams(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"es_video\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setVideoStream(videoStream))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addElementaryStreams(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"es_audio\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioStream(audioStream))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addMuxStreams(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"mux_video\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addElementaryStreams(\"es_video\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSegmentSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSegmentDuration(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Duration.newBuilder().setSeconds(2).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addMuxStreams(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"mux_audio\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addElementaryStreams(\"es_audio\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSegmentSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSegmentDuration(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Duration.newBuilder().setSeconds(2).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addManifests(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Manifest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFileName(\"manifest.m3u8\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setType(ManifestType.HLS)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addMuxStreams(\"mux_video\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addMuxStreams(\"mux_audio\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setMaxSegmentCount(5)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build()))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // First API call in a project can take up to 10 minutes.\u00a0 \u00a0 Channel result =\u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createChannelAsync(createChannelRequest)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .get(10, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Channel: \" + result.getName());\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/createChannel.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// channelId = 'my-channel';// inputId = 'my-input';// outputUri = 'gs://my-bucket/my-output-folder/';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function createChannel() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 parent: livestreamServiceClient.locationPath(projectId, location),\u00a0 \u00a0 channelId: channelId,\u00a0 \u00a0 channel: {\u00a0 \u00a0 \u00a0 inputAttachments: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'my-input',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input: livestreamServiceClient.inputPath(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 inputId\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 output: {\u00a0 \u00a0 \u00a0 \u00a0 uri: outputUri,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 elementaryStreams: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'es_video',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 videoStream: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h264: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 profile: 'high',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 heightPixels: 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 widthPixels: 1280,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrateBps: 3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 frameRate: 30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'es_audio',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audioStream: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 codec: 'aac',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 channelCount: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrateBps: 160000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 muxStreams: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'mux_video',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 elementaryStreams: ['es_video'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segmentSettings: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'mux_audio',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 elementaryStreams: ['es_audio'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segmentSettings: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 manifests: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fileName: 'manifest.m3u8',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: 'HLS',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 muxStreams: ['mux_video', 'mux_audio'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 maxSegmentCount: 5,\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 },\u00a0 };\u00a0 // Run request\u00a0 const [operation] = await livestreamServiceClient.createChannel(request);\u00a0 const response = await operation.promise();\u00a0 const [channel] = response;\u00a0 console.log(`Channel: ${channel.name}`);}createChannel();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API PHP API \u53c3\u8003\u6587\u6a94](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/create_channel.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\AudioStream;use Google\\Cloud\\Video\\LiveStream\\V1\\Channel;use Google\\Cloud\\Video\\LiveStream\\V1\\ElementaryStream;use Google\\Cloud\\Video\\LiveStream\\V1\\InputAttachment;use Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\CreateChannelRequest;use Google\\Cloud\\Video\\LiveStream\\V1\\Manifest;use Google\\Cloud\\Video\\LiveStream\\V1\\MuxStream;use Google\\Cloud\\Video\\LiveStream\\V1\\SegmentSettings;use Google\\Cloud\\Video\\LiveStream\\V1\\VideoStream;use Google\\Protobuf\\Duration;/**\u00a0* Creates a channel.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channel\u00a0* @param string \u00a0$channelId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel to be created\u00a0* @param string \u00a0$inputId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the input for the channel\u00a0* @param string \u00a0$outputUri \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Uri of the channel output folder in a\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Cloud Storage bucket. (e.g.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"gs://my-bucket/my-output-folder/\")\u00a0*/function create_channel(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $channelId,\u00a0 \u00a0 string $inputId,\u00a0 \u00a0 string $outputUri): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $parent = $livestreamClient->locationName($callingProjectId, $location);\u00a0 \u00a0 $channelName = $livestreamClient->channelName($callingProjectId, $location, $channelId);\u00a0 \u00a0 $inputName = $livestreamClient->inputName($callingProjectId, $location, $inputId);\u00a0 \u00a0 $channel = (new Channel())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($channelName)\u00a0 \u00a0 \u00a0 \u00a0 ->setInputAttachments([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new InputAttachment([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'my-input',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'input' => $inputName\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ->setElementaryStreams([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new ElementaryStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'es_video',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'video_stream' => new VideoStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'h264' => new VideoStream\\H264CodecSettings([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'profile' => 'high',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'width_pixels' => 1280,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'height_pixels' => 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'bitrate_bps' => 3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'frame_rate' => 30\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new ElementaryStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'es_audio',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'audio_stream' => new AudioStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'codec' => 'aac',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'channel_count' => 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'bitrate_bps' => 160000\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ->setOutput(new Channel\\Output(['uri' => $outputUri]))\u00a0 \u00a0 \u00a0 \u00a0 ->setMuxStreams([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new MuxStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'mux_video',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'elementary_streams' => ['es_video'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'segment_settings' => new SegmentSettings([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'segment_duration' => new Duration(['seconds' => 2])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new MuxStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'mux_audio',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'elementary_streams' => ['es_audio'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'segment_settings' => new SegmentSettings([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'segment_duration' => new Duration(['seconds' => 2])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]),\u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ->setManifests([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new Manifest([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'file_name' => 'manifest.m3u8',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'type' => Manifest\\ManifestType::HLS,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'mux_streams' => ['mux_video', 'mux_audio'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'max_segment_count' => 5\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ]);\u00a0 \u00a0 // Run the channel creation request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new CreateChannelRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setParent($parent)\u00a0 \u00a0 \u00a0 \u00a0 ->setChannel($channel)\u00a0 \u00a0 \u00a0 \u00a0 ->setChannelId($channelId);\u00a0 \u00a0 $operationResponse = $livestreamClient->createChannel($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 $result = $operationResponse->getResult();\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Channel: %s' . PHP_EOL, $result->getName());\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/create_channel.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)from google.protobuf import duration_pb2 as durationdef create_channel(\u00a0 \u00a0 project_id: str, location: str, channel_id: str, input_id: str, output_uri: str) -> live_stream_v1.types.Channel:\u00a0 \u00a0 \"\"\"Creates a channel.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location in which to create the channel.\u00a0 \u00a0 \u00a0 \u00a0 channel_id: The user-defined channel ID.\u00a0 \u00a0 \u00a0 \u00a0 input_id: The user-defined input ID.\u00a0 \u00a0 \u00a0 \u00a0 output_uri: Uri of the channel output folder in a Cloud Storage bucket.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 parent = f\"projects/{project_id}/locations/{location}\"\u00a0 \u00a0 input = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\u00a0 \u00a0 channel = live_stream_v1.types.Channel(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 input_attachments=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.InputAttachment(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"my-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input=input,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 output=live_stream_v1.types.Channel.Output(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 uri=output_uri,\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 elementary_streams=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.ElementaryStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"es_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 video_stream=live_stream_v1.types.VideoStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h264=live_stream_v1.types.VideoStream.H264CodecSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 profile=\"high\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 width_pixels=1280,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 height_pixels=720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrate_bps=3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 frame_rate=30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.ElementaryStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"es_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audio_stream=live_stream_v1.types.AudioStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 codec=\"aac\", channel_count=2, bitrate_bps=160000\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 mux_streams=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.MuxStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"mux_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 elementary_streams=[\"es_video\"],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_settings=live_stream_v1.types.SegmentSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_duration=duration.Duration(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds=2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.MuxStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"mux_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 elementary_streams=[\"es_audio\"],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_settings=live_stream_v1.types.SegmentSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_duration=duration.Duration(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds=2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 manifests=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.Manifest(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 file_name=\"manifest.m3u8\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type_=\"HLS\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mux_streams=[\"mux_video\", \"mux_audio\"],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max_segment_count=5,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 )\u00a0 \u00a0 operation = client.create_channel(\u00a0 \u00a0 \u00a0 \u00a0 parent=parent, channel=channel, channel_id=channel_id\u00a0 \u00a0 )\u00a0 \u00a0 response = operation.result(600)\u00a0 \u00a0 print(f\"Channel: {response.name}\")\u00a0 \u00a0 return response\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Ruby API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/ruby/docs/reference/google-cloud-video-live_stream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/create_channel.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Create a channel\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param channel_id [String] Your channel name (e.g. \"my-channel\")# @param input_id [String] Your input name (e.g. \"my-input\")# @param output_uri [String] Uri of the channel output folder in a Cloud Storage# \u00a0 \u00a0 bucket. (e.g. \"gs://my-bucket/my-output-folder/\";)#def create_channel project_id:, location:, channel_id:, input_id:, output_uri:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the parent.\u00a0 parent = client.location_path project: project_id, location: location\u00a0 # Build the resource name of the input.\u00a0 input_path = client.input_path project: project_id, location: location, input: input_id\u00a0 # Set the channel fields.\u00a0 new_channel = {\u00a0 \u00a0 input_attachments: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"my-input\",\u00a0 \u00a0 \u00a0 \u00a0 input: input_path\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ],\u00a0 \u00a0 output: {\u00a0 \u00a0 \u00a0 uri: output_uri\u00a0 \u00a0 },\u00a0 \u00a0 elementary_streams: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"es_video\",\u00a0 \u00a0 \u00a0 \u00a0 video_stream: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h264: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 profile: \"high\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrate_bps: 3_000_000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 frame_rate: 30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 height_pixels: 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 width_pixels: 1280\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"es_audio\",\u00a0 \u00a0 \u00a0 \u00a0 audio_stream: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 codec: \"aac\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 channel_count: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrate_bps: 160_000\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ],\u00a0 \u00a0 mux_streams: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"mux_video\",\u00a0 \u00a0 \u00a0 \u00a0 elementary_streams: [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"es_video\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 segment_settings: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_duration: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"mux_audio\",\u00a0 \u00a0 \u00a0 \u00a0 elementary_streams: [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"es_audio\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 segment_settings: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_duration: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ],\u00a0 \u00a0 manifests: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 file_name: \"main.m3u8\",\u00a0 \u00a0 \u00a0 \u00a0 type: Google::Cloud::Video::LiveStream::V1::Manifest::ManifestType::HLS,\u00a0 \u00a0 \u00a0 \u00a0 mux_streams: [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mux_video\", \"mux_audio\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 max_segment_count: 5\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 }\u00a0 operation = client.create_channel parent: parent, channel: new_channel, channel_id: channel_id\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print the channel name.\u00a0 puts \"Channel: #{operation.response.name}\"end\n```\n**\u6ce8\u610f** \uff1a\u9ed8\u8a8d\u60c5\u6cc1\u4e0b\uff0c\u8a72 API \u7684\u6e20\u9053\u5e73\u81fa\u65e5\u8a8c\u8655\u65bc\u505c\u7528\u72c0\u614b\u3002\u60a8\u53ef\u80fd\u9700\u8981\u5553\u7528\u9019\u4e9b\u65e5\u8a8c\u624d\u80fd\u9032\u884c\u8abf\u8a66\u548c\u554f\u984c\u6392\u67e5\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u6fc0\u6d3b\u5e73\u81fa\u65e5\u8a8c\u8a18\u9304](https://cloud.google.com/livestream/docs/how-to/logging?hl=zh-cn#activate_platform_logging) \u3002\n## \u7372\u53d6\u983b\u9053\u8a73\u60c5\n\u5982\u9700\u7372\u53d6\u983b\u9053\u7684\u8a73\u7d30\u4fe1\u606f\uff0c\u8acb\u4f7f\u7528 [projects.locations.channels.get](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels/get?hl=zh-cn) \u65b9\u6cd5\u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- ``\uff1a\u60a8\u7684 Google Cloud \u9805\u76ee\u7de8\u865f\uff1b\u4f4d\u65bc [IAM \u8a2d\u7f6e](https://console.cloud.google.com/iam-admin/settings?hl=zh-cn) \u9801\u9762\u4e0a\u7684 **\u9805\u76ee\u7de8\u865f** \u5b57\u6bb5\u4e2d\n- ``\uff1a\u60a8\u7684\u983b\u9053\u6240\u5728\u7684\u4f4d\u7f6e\uff1b\u8acb\u4f7f\u7528 [\u652f\u6301\u7684\u5340\u57df](https://cloud.google.com/livestream/docs/locations?hl=zh-cn) \u4e4b\u4e00\n- ``\uff1a\u7528\u6236\u5b9a\u7fa9\u7684\u983b\u9053\u6a19\u8b58\u7b26\n\u5982\u9700\u767c\u9001\u60a8\u7684\u8acb\u6c42\uff0c\u8acb\u5c55\u958b\u4ee5\u4e0b\u9078\u9805\u4e4b\u4e00\uff1a\u60a8\u61c9\u8a72\u6536\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\u7684 JSON \u97ff\u61c9\uff1a\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID\",\n \"createTime\": CREATE_TIME,\n \"updateTime\": UPDATE_TIME,\n \"inputAttachments\": [ {\n  \"key\": \"INPUT_ID\",\n  \"input\": \"projects/PROJECT_NUMBER/locations/LOCATION/inputs/INPUT_ID\"\n }\n ],\n \"activeInput\": \"INPUT_ID\",\n \"output\": {\n \"uri\": \"gs://BUCKET_NAME\"\n },\n \"elementaryStreams\": [ {\n  \"videoStream\": {\n  \"h264\": {\n   \"widthPixels\": 1280,\n   \"heightPixels\": 720,\n   \"frameRate\": 30,\n   \"bitrateBps\": 3000000,\n   \"gopDuration\": \"2s\",\n   \"vbvSizeBits\": 3000000,\n   \"vbvFullnessBits\": 2700000,\n   \"entropyCoder\": \"cabac\",\n   \"profile\": \"high\"\n  }\n  },\n  \"key\": \"es_video\"\n },\n {\n  \"audioStream\": {\n  \"codec\": \"aac\",\n  \"bitrateBps\": 160000,\n  \"channelCount\": 2,\n  \"channelLayout\": [\"fl\", \"fr\"],\n  \"sampleRateHertz\": 48000\n  },\n  \"key\": \"es_audio\"\n }\n ],\n \"muxStreams\": [ {\n  \"key\": \"mux_video_ts\",\n  \"container\": \"ts\",\n  \"elementaryStreams\": [\"es_video\", \"es_audio\"],\n  \"segmentSettings\": { \"segmentDuration\": \"2s\" }\n }\n ],\n \"manifests\": [ {\n  \"fileName\": \"main.m3u8\",\n  \"type\": \"HLS\",\n  \"muxStreams\": [  \"mux_video_ts\",\n  ],\n  \"maxSegmentCount\": 5,\n  \"segmentKeepDuration\": \"60s\"\n }\n ],\n \"streamingState\": \"STOPPED\"\n}\n```\n\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API C# API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/GetChannel.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;public class GetChannelSample{\u00a0 \u00a0 public Channel GetChannel(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string channelId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 GetChannelRequest request = new GetChannelRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelName = ChannelName.FromProjectLocationChannel(projectId, locationId, channelId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Channel response = client.GetChannel(request);\u00a0 \u00a0 \u00a0 \u00a0 return response;\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Go API \u53c3\u8003\u6587\u6a94](https://pkg.go.dev/cloud.google.com/go/video/livestream) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/get_channel.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// getChannel gets a previously-created channel.func getChannel(w io.Writer, projectID, location, channelID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // channelID := \"my-channel-id\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.GetChannelRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/channels/%s\", projectID, location, channelID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := client.GetChannel(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"GetChannel: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Channel: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-live-stream/latest/overview?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/GetChannel.java) \n```\nimport com.google.cloud.video.livestream.v1.Channel;import com.google.cloud.video.livestream.v1.ChannelName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import java.io.IOException;public class GetChannel {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String channelId = \"my-channel-id\";\u00a0 \u00a0 getChannel(projectId, location, channelId);\u00a0 }\u00a0 public static void getChannel(String projectId, String location, String channelId)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. In this example, try-with-resources is used\u00a0 \u00a0 // which automatically calls close() on the client to clean up resources.\u00a0 \u00a0 try (LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create()) {\u00a0 \u00a0 \u00a0 ChannelName name = ChannelName.of(projectId, location, channelId);\u00a0 \u00a0 \u00a0 Channel response = livestreamServiceClient.getChannel(name);\u00a0 \u00a0 \u00a0 System.out.println(\"Channel: \" + response.getName());\u00a0 \u00a0 }\u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/getChannel.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// channelId = 'my-channel';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function getChannel() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 name: livestreamServiceClient.channelPath(projectId, location, channelId),\u00a0 };\u00a0 const [channel] = await livestreamServiceClient.getChannel(request);\u00a0 console.log(`Channel: ${channel.name}`);}getChannel();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API PHP API \u53c3\u8003\u6587\u6a94](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/get_channel.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\GetChannelRequest;/**\u00a0* Gets a channel.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channel\u00a0* @param string \u00a0$channelId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel\u00a0*/function get_channel(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $channelId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $formattedName = $livestreamClient->channelName($callingProjectId, $location, $channelId);\u00a0 \u00a0 // Get the channel.\u00a0 \u00a0 $request = (new GetChannelRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($formattedName);\u00a0 \u00a0 $response = $livestreamClient->getChannel($request);\u00a0 \u00a0 // Print results\u00a0 \u00a0 printf('Channel: %s' . PHP_EOL, $response->getName());}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/get_channel.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def get_channel(\u00a0 \u00a0 project_id: str, location: str, channel_id: str) -> live_stream_v1.types.Channel:\u00a0 \u00a0 \"\"\"Gets a channel.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the channel.\u00a0 \u00a0 \u00a0 \u00a0 channel_id: The user-defined channel ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\u00a0 \u00a0 response = client.get_channel(name=name)\u00a0 \u00a0 print(f\"Channel: {response.name}\")\u00a0 \u00a0 return response\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Ruby API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/ruby/docs/reference/google-cloud-video-live_stream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/get_channel.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Get a channel\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param channel_id [String] Your channel name (e.g. \"my-channel\")#def get_channel project_id:, location:, channel_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the channel.\u00a0 name = client.channel_path project: project_id, location: location, channel: channel_id\u00a0 # Get the channel.\u00a0 channel = client.get_channel name: name\u00a0 # Print the channel name.\u00a0 puts \"Channel: #{channel.name}\"end\n```\n## \u66f4\u65b0\u983b\u9053\n\u5982\u9700\u66f4\u65b0\u6e20\u9053\uff0c\u8acb\u4f7f\u7528 [projects.locations.channels.patch](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels/patch?hl=zh-cn) \u65b9\u6cd5\u3002\n\u4ee5\u4e0b\u793a\u4f8b\u66f4\u65b0\u983b\u9053\u4f7f\u7528\u7684\u8f38\u5165\u7aef\u9ede\u3002\u4e26\u975e\u6240\u6709\u5b57\u6bb5\u90fd\u53ef\u4ee5\u66f4\u65b0\uff1b\u8acb\u53c3\u95b1 [\u652f\u6301\u7684\u5b57\u6bb5\u5217\u8868](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels/patch?hl=zh-cn#body.QUERY_PARAMETERS.update_mask) \u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- ``\uff1a\u60a8\u7684 Google Cloud \u9805\u76ee\u7de8\u865f\uff1b\u4f4d\u65bc [IAM \u8a2d\u7f6e](https://console.cloud.google.com/iam-admin/settings?hl=zh-cn) \u9801\u9762\u4e0a\u7684 **\u9805\u76ee\u7de8\u865f** \u5b57\u6bb5\u4e2d\n- ``\uff1a\u983b\u9053\u7684\u4f4d\u7f6e\uff1b\u8acb\u4f7f\u7528 [\u652f\u6301\u7684\u5340\u57df](https://cloud.google.com/livestream/docs/locations?hl=zh-cn) \u4e4b\u4e00\n- ``\uff1a\u7528\u6236\u5b9a\u7fa9\u7684\u983b\u9053\u6a19\u8b58\u7b26\n- ``\uff1a\u8981\u4f7f\u7528\u7684\u65b0\u8f38\u5165\u7aef\u9ede\u7684\u7528\u6236\u5b9a\u7fa9\u6a19\u8b58\u7b26\n\u5982\u9700\u767c\u9001\u60a8\u7684\u8acb\u6c42\uff0c\u8acb\u5c55\u958b\u4ee5\u4e0b\u9078\u9805\u4e4b\u4e00\uff1a\u60a8\u61c9\u8a72\u6536\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\u7684 JSON \u97ff\u61c9\uff1a\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID\",\n \"verb\": \"update\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\n\u6b64\u547d\u4ee4\u6703\u5275\u5efa\u4e00\u500b\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c (LRO)\uff0c\u53ef\u7528\u65bc\u8ddf\u8e64\u8acb\u6c42\u7684\u9032\u5ea6\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1\n [\u7ba1\u7406\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c ](https://cloud.google.com/livestream/docs/how-to/manage-long-running-operations?hl=zh-cn) \n\u3002\n\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API C# API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/UpdateChannelAsync.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using Google.Protobuf.WellKnownTypes;using System.Threading.Tasks;public class UpdateChannelSample{\u00a0 \u00a0 public async Task<Channel> UpdateChannelAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string channelId, string inputId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 InputAttachment inputAttachment = new InputAttachment\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"updated-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAsInputName = InputName.FromProjectLocationInput(projectId, locationId, inputId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 UpdateChannelRequest request = new UpdateChannelRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Channel = new Channel\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelName = ChannelName.FromProjectLocationChannel(projectId, locationId, channelId),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAttachments = { inputAttachment }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UpdateMask = new FieldMask { Paths = { \"input_attachments\" } }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Channel, OperationMetadata> response = await client.UpdateChannelAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Channel, OperationMetadata> completedResponse = await response.PollUntilCompletedAsync();\u00a0 \u00a0 \u00a0 \u00a0 // Retrieve the operation result.\u00a0 \u00a0 \u00a0 \u00a0 return completedResponse.Result;\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Go API \u53c3\u8003\u6587\u6a94](https://pkg.go.dev/cloud.google.com/go/video/livestream) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/update_channel.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/protobuf/types/known/fieldmaskpb\")// updateChannel updates an existing channel with a different input.func updateChannel(w io.Writer, projectID, location, channelID, inputID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // channelID := \"my-channel\"\u00a0 \u00a0 \u00a0 \u00a0 // inputID := \"my-updated-input\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.UpdateChannelRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Channel: &livestreampb.Channel{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/channels/%s\", projectID, location, channelID),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAttachments: []*livestreampb.InputAttachment{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \u00a0 \"updated-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input: fmt.Sprintf(\"projects/%s/locations/%s/inputs/%s\", projectID, location, inputID),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 UpdateMask: &fieldmaskpb.FieldMask{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Paths: []string{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"input_attachments\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Updates the input.\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.UpdateChannel(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"UpdateChannel: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Updated channel: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-live-stream/latest/overview?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/UpdateChannel.java) \n```\nimport com.google.cloud.video.livestream.v1.Channel;import com.google.cloud.video.livestream.v1.ChannelName;import com.google.cloud.video.livestream.v1.InputAttachment;import com.google.cloud.video.livestream.v1.InputName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.UpdateChannelRequest;import com.google.protobuf.FieldMask;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class UpdateChannel {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String channelId = \"my-channel-id\";\u00a0 \u00a0 String inputId = \"my-input-id\";\u00a0 \u00a0 updateChannel(projectId, location, channelId, inputId);\u00a0 }\u00a0 public static void updateChannel(\u00a0 \u00a0 \u00a0 String projectId, String location, String channelId, String inputId)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 var updateChannelRequest =\u00a0 \u00a0 \u00a0 \u00a0 UpdateChannelRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setChannel(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Channel.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(ChannelName.of(projectId, location, channelId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addInputAttachments(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAttachment.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"updated-input\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInput(InputName.of(projectId, location, inputId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build()))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setUpdateMask(FieldMask.newBuilder().addPaths(\"input_attachments\").build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // First API call in a project can take up to 10 minutes.\u00a0 \u00a0 Channel result =\u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .updateChannelAsync(updateChannelRequest)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .get(10, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Updated channel: \" + result.getName());\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/updateChannel.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// channelId = 'my-channel';// inputId = 'my-input';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function updateChannel() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 channel: {\u00a0 \u00a0 \u00a0 name: livestreamServiceClient.channelPath(\u00a0 \u00a0 \u00a0 \u00a0 projectId,\u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 channelId\u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 inputAttachments: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'updated-input',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input: livestreamServiceClient.inputPath(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 inputId\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 },\u00a0 \u00a0 updateMask: {\u00a0 \u00a0 \u00a0 paths: ['input_attachments'],\u00a0 \u00a0 },\u00a0 };\u00a0 // Run request\u00a0 const [operation] = await livestreamServiceClient.updateChannel(request);\u00a0 const response = await operation.promise();\u00a0 const [channel] = response;\u00a0 console.log(`Updated channel: ${channel.name}`);}updateChannel();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API PHP API \u53c3\u8003\u6587\u6a94](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/update_channel.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Channel;use Google\\Cloud\\Video\\LiveStream\\V1\\InputAttachment;use Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\UpdateChannelRequest;use Google\\Protobuf\\FieldMask;/**\u00a0* Updates an existing channel with a different input.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channel and the input\u00a0* @param string \u00a0$channelId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel to be updated\u00a0* @param string \u00a0$inputId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the existing input\u00a0*/function update_channel(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $channelId,\u00a0 \u00a0 string $inputId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $channelName = $livestreamClient->channelName($callingProjectId, $location, $channelId);\u00a0 \u00a0 $inputName = $livestreamClient->inputName($callingProjectId, $location, $inputId);\u00a0 \u00a0 $inputAttachment = (new InputAttachment())\u00a0 \u00a0 \u00a0 \u00a0 ->setKey('updated-input')\u00a0 \u00a0 \u00a0 \u00a0 ->setInput($inputName);\u00a0 \u00a0 $channel = (new Channel())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($channelName)\u00a0 \u00a0 \u00a0 \u00a0 ->setInputAttachments([$inputAttachment]);\u00a0 \u00a0 $updateMask = new FieldMask([\u00a0 \u00a0 \u00a0 \u00a0 'paths' => ['input_attachments']\u00a0 \u00a0 ]);\u00a0 \u00a0 // Run the channel update request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new UpdateChannelRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setChannel($channel)\u00a0 \u00a0 \u00a0 \u00a0 ->setUpdateMask($updateMask);\u00a0 \u00a0 $operationResponse = $livestreamClient->updateChannel($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 $result = $operationResponse->getResult();\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Updated channel: %s' . PHP_EOL, $result->getName());\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/update_channel.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)from google.protobuf import field_mask_pb2 as field_maskdef update_channel(\u00a0 \u00a0 project_id: str, location: str, channel_id: str, input_id: str) -> live_stream_v1.types.Channel:\u00a0 \u00a0 \"\"\"Updates a channel.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the channel.\u00a0 \u00a0 \u00a0 \u00a0 channel_id: The user-defined channel ID.\u00a0 \u00a0 \u00a0 \u00a0 input_id: The user-defined input ID for the new input.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 input = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\u00a0 \u00a0 channel = live_stream_v1.types.Channel(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 input_attachments=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.InputAttachment(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"updated-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input=input,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 )\u00a0 \u00a0 update_mask = field_mask.FieldMask(paths=[\"input_attachments\"])\u00a0 \u00a0 operation = client.update_channel(channel=channel, update_mask=update_mask)\u00a0 \u00a0 response = operation.result(600)\u00a0 \u00a0 print(f\"Updated channel: {response.name}\")\u00a0 \u00a0 return response\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Ruby API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/ruby/docs/reference/google-cloud-video-live_stream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/update_channel.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Update a channel\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param channel_id [String] Your channel name (e.g. \"my-channel\")# @param input_id [String] The input name to update the channel with (e.g. \"my-updated-input\")#def update_channel project_id:, location:, channel_id:, input_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the channel.\u00a0 name = client.channel_path project: project_id, location: location, channel: channel_id\u00a0 # Build the resource name of the input.\u00a0 input = client.input_path project: project_id, location: location, input: input_id\u00a0 # Set the update mask.\u00a0 update_mask = { paths: [\"input_attachments\"] }\u00a0 # Update the channel input_attachments config field.\u00a0 update_channel = {\u00a0 \u00a0 name: name,\u00a0 \u00a0 input_attachments: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"updated-input\",\u00a0 \u00a0 \u00a0 \u00a0 input: input\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 }\u00a0 operation = client.update_channel update_mask: update_mask, channel: update_channel\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print the channel name.\u00a0 puts \"Updated channel: #{operation.response.name}\"\u00a0 puts \"Updated input_attachments config: #{operation.response.input_attachments[0].key}\"end\n```\n**\u6ce8\u610f** \uff1a\u9ed8\u8a8d\u60c5\u6cc1\u4e0b\uff0c\u8a72 API \u7684\u6e20\u9053\u5e73\u81fa\u65e5\u8a8c\u8655\u65bc\u505c\u7528\u72c0\u614b\u3002\u60a8\u53ef\u80fd\u9700\u8981\u5553\u7528\u9019\u4e9b\u65e5\u8a8c\u624d\u80fd\u9032\u884c\u8abf\u8a66\u548c\u554f\u984c\u6392\u67e5\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u6fc0\u6d3b\u5e73\u81fa\u65e5\u8a8c\u8a18\u9304](https://cloud.google.com/livestream/docs/how-to/logging?hl=zh-cn#activate_platform_logging) \u3002\n## \u5275\u5efa\u6216\u505c\u6b62\u983b\u9053\n\u53ef\u5229\u7528\u4ee5\u4e0b\u65b9\u6cd5\u5553\u52d5\u6216\u505c\u6b62\u983b\u9053\u3002\u6536\u5230 `channels.start` \u8acb\u6c42\u6642\uff0c\u670d\u52d9\u5668\u6703\u5275\u5efa\u8996\u983b\u6d41\u6c34\u7dda\u7684\u4e00\u90e8\u5206\u3002\u6536\u5230 `channels.stop` \u8acb\u6c42\u6642\uff0c\u670d\u52d9\u5668\u6703\u91cb\u653e\u8996\u983b\u6d41\u6c34\u7dda\u7684\u4e00\u90e8\u5206\u3002\n### \u5275\u5efa\u983b\u9053\n\u5982\u9700\u5553\u52d5\u67d0\u500b\u6e20\u9053\uff0c\u8acb\u4f7f\u7528 [projects.locations.channels.start](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels/start?hl=zh-cn) \u65b9\u6cd5\u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- ``\uff1a\u60a8\u7684 Google Cloud \u9805\u76ee\u7de8\u865f\uff1b\u4f4d\u65bc [IAM \u8a2d\u7f6e](https://console.cloud.google.com/iam-admin/settings?hl=zh-cn) \u9801\u9762\u4e0a\u7684 **\u9805\u76ee\u7de8\u865f** \u5b57\u6bb5\u4e2d\n- ``\uff1a\u60a8\u7684\u983b\u9053\u6240\u5728\u7684\u4f4d\u7f6e\uff1b\u8acb\u4f7f\u7528 [\u652f\u6301\u7684\u5340\u57df](https://cloud.google.com/livestream/docs/locations?hl=zh-cn) \u4e4b\u4e00\n- ``\uff1a\u7528\u6236\u5b9a\u7fa9\u7684\u983b\u9053\u6a19\u8b58\u7b26\n\u5982\u9700\u767c\u9001\u60a8\u7684\u8acb\u6c42\uff0c\u8acb\u5c55\u958b\u4ee5\u4e0b\u9078\u9805\u4e4b\u4e00\uff1a\u60a8\u61c9\u8a72\u6536\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\u7684 JSON \u97ff\u61c9\uff1a\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID\",\n \"verb\": \"start\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\n\u6b64\u547d\u4ee4\u6703\u5275\u5efa\u4e00\u500b\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c (LRO)\uff0c\u53ef\u7528\u65bc\u8ddf\u8e64\u8acb\u6c42\u7684\u9032\u5ea6\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1\n [\u7ba1\u7406\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c ](https://cloud.google.com/livestream/docs/how-to/manage-long-running-operations?hl=zh-cn) \n\u3002\n\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API C# API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/StartChannelAsync.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using System.Threading.Tasks;public class StartChannelSample{\u00a0 \u00a0 public async Task StartChannelAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string channelId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 StartChannelRequest request = new StartChannelRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelName = ChannelName.FromProjectLocationChannel(projectId, locationId, channelId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<ChannelOperationResponse, OperationMetadata> response = await client.StartChannelAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 await response.PollUntilCompletedAsync();\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Go API \u53c3\u8003\u6587\u6a94](https://pkg.go.dev/cloud.google.com/go/video/livestream) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/start_channel.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// startChannel starts a channel.func startChannel(w io.Writer, projectID, location, channelID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // channelID := \"my-channel-id\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.StartChannelRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/channels/%s\", projectID, location, channelID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.StartChannel(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"StartChannel: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 _, err = op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Started channel\")\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-live-stream/latest/overview?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/StartChannel.java) \n```\nimport com.google.cloud.video.livestream.v1.ChannelName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class StartChannel {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String channelId = \"my-channel-id\";\u00a0 \u00a0 startChannel(projectId, location, channelId);\u00a0 }\u00a0 public static void startChannel(String projectId, String location, String channelId)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 ChannelName name = ChannelName.of(projectId, location, channelId);\u00a0 \u00a0 // First API call in a project can take up to 15 minutes.\u00a0 \u00a0 livestreamServiceClient.startChannelAsync(name).get(15, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Started channel\");\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/startChannel.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// channelId = 'my-channel';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function startChannel() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 name: livestreamServiceClient.channelPath(projectId, location, channelId),\u00a0 };\u00a0 const [operation] = await livestreamServiceClient.startChannel(request);\u00a0 await operation.promise();\u00a0 console.log('Started channel');}startChannel();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API PHP API \u53c3\u8003\u6587\u6a94](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/start_channel.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\StartChannelRequest;/**\u00a0* Starts a channel.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channel\u00a0* @param string \u00a0$channelId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel\u00a0*/function start_channel(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $channelId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $formattedName = $livestreamClient->channelName($callingProjectId, $location, $channelId);\u00a0 \u00a0 // Run the channel start request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new StartChannelRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($formattedName);\u00a0 \u00a0 $operationResponse = $livestreamClient->startChannel($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Started channel' . PHP_EOL);\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/start_channel.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def start_channel(\u00a0 \u00a0 project_id: str, location: str, channel_id: str) -> live_stream_v1.types.ChannelOperationResponse:\u00a0 \u00a0 \"\"\"Starts a channel.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the channel.\u00a0 \u00a0 \u00a0 \u00a0 channel_id: The user-defined channel ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\u00a0 \u00a0 operation = client.start_channel(name=name)\u00a0 \u00a0 response = operation.result(900)\u00a0 \u00a0 print(\"Started channel\")\u00a0 \u00a0 return response\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Ruby API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/ruby/docs/reference/google-cloud-video-live_stream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/start_channel.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Starts a channel\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param channel_id [String] Your channel name (e.g. \"my-channel\")#def start_channel project_id:, location:, channel_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the channel.\u00a0 name = client.channel_path project: project_id, location: location, channel: channel_id\u00a0 # Start the channel.\u00a0 operation = client.start_channel name: name\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print a success message.\u00a0 puts \"Started channel\"end\n```### \u505c\u6b62\u983b\u9053\n\u5982\u9700\u505c\u6b62\u67d0\u500b\u6e20\u9053\uff0c\u8acb\u4f7f\u7528 [projects.locations.channels.stop](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels/stop?hl=zh-cn) \u65b9\u6cd5\u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- ``\uff1a\u60a8\u7684 Google Cloud \u9805\u76ee\u7de8\u865f\uff1b\u4f4d\u65bc [IAM \u8a2d\u7f6e](https://console.cloud.google.com/iam-admin/settings?hl=zh-cn) \u9801\u9762\u4e0a\u7684 **\u9805\u76ee\u7de8\u865f** \u5b57\u6bb5\u4e2d\n- ``\uff1a\u60a8\u7684\u983b\u9053\u6240\u5728\u7684\u4f4d\u7f6e\uff1b\u8acb\u4f7f\u7528 [\u652f\u6301\u7684\u5340\u57df](https://cloud.google.com/livestream/docs/locations?hl=zh-cn) \u4e4b\u4e00\n- ``\uff1a\u7528\u6236\u5b9a\u7fa9\u7684\u983b\u9053\u6a19\u8b58\u7b26\n\u5982\u9700\u767c\u9001\u60a8\u7684\u8acb\u6c42\uff0c\u8acb\u5c55\u958b\u4ee5\u4e0b\u9078\u9805\u4e4b\u4e00\uff1a\u60a8\u61c9\u8a72\u6536\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\u7684 JSON \u97ff\u61c9\uff1a\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID\",\n \"verb\": \"stop\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\n\u6b64\u547d\u4ee4\u6703\u5275\u5efa\u4e00\u500b\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c (LRO)\uff0c\u53ef\u7528\u65bc\u8ddf\u8e64\u8acb\u6c42\u7684\u9032\u5ea6\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1\n [\u7ba1\u7406\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c ](https://cloud.google.com/livestream/docs/how-to/manage-long-running-operations?hl=zh-cn) \n\u3002\n\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API C# API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/StopChannelAsync.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using System.Threading.Tasks;public class StopChannelSample{\u00a0 \u00a0 public async Task StopChannelAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string channelId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 StopChannelRequest request = new StopChannelRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelName = ChannelName.FromProjectLocationChannel(projectId, locationId, channelId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<ChannelOperationResponse, OperationMetadata> response = await client.StopChannelAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 await response.PollUntilCompletedAsync();\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Go API \u53c3\u8003\u6587\u6a94](https://pkg.go.dev/cloud.google.com/go/video/livestream) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/stop_channel.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// stopChannel stops a channel.func stopChannel(w io.Writer, projectID, location, channelID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // channelID := \"my-channel-id\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.StopChannelRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/channels/%s\", projectID, location, channelID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.StopChannel(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"StopChannel: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 _, err = op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Stopped channel\")\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-live-stream/latest/overview?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/StopChannel.java) \n```\nimport com.google.cloud.video.livestream.v1.ChannelName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class StopChannel {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String channelId = \"my-channel-id\";\u00a0 \u00a0 stopChannel(projectId, location, channelId);\u00a0 }\u00a0 public static void stopChannel(String projectId, String location, String channelId)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 ChannelName name = ChannelName.of(projectId, location, channelId);\u00a0 \u00a0 // First API call in a project can take up to 10 minutes.\u00a0 \u00a0 livestreamServiceClient.stopChannelAsync(name).get(10, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Stopped channel\");\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/stopChannel.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// channelId = 'my-channel';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function stopChannel() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 name: livestreamServiceClient.channelPath(projectId, location, channelId),\u00a0 };\u00a0 const [operation] = await livestreamServiceClient.stopChannel(request);\u00a0 await operation.promise();\u00a0 console.log('Stopped channel');}stopChannel();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API PHP API \u53c3\u8003\u6587\u6a94](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/stop_channel.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\StopChannelRequest;/**\u00a0* Stops a channel.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channel\u00a0* @param string \u00a0$channelId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel\u00a0*/function stop_channel(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $channelId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $formattedName = $livestreamClient->channelName($callingProjectId, $location, $channelId);\u00a0 \u00a0 // Run the channel stop request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new StopChannelRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($formattedName);\u00a0 \u00a0 $operationResponse = $livestreamClient->stopChannel($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Stopped channel' . PHP_EOL);\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/stop_channel.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def stop_channel(\u00a0 \u00a0 project_id: str, location: str, channel_id: str) -> live_stream_v1.types.ChannelOperationResponse:\u00a0 \u00a0 \"\"\"Stops a channel.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the channel.\u00a0 \u00a0 \u00a0 \u00a0 channel_id: The user-defined channel ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\u00a0 \u00a0 operation = client.stop_channel(name=name)\u00a0 \u00a0 response = operation.result(600)\u00a0 \u00a0 print(\"Stopped channel\")\u00a0 \u00a0 return response\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Ruby API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/ruby/docs/reference/google-cloud-video-live_stream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/stop_channel.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Stops a channel\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param channel_id [String] Your channel name (e.g. \"my-channel\")#def stop_channel project_id:, location:, channel_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the channel.\u00a0 name = client.channel_path project: project_id, location: location, channel: channel_id\u00a0 # Stop the channel.\u00a0 operation = client.stop_channel name: name\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print a success message.\u00a0 puts \"Stopped channel\"end\n```\n## \u5217\u51fa\u6e20\u9053\n\u5982\u9700\u5217\u51fa\u60a8\u5728\u67d0\u500b\u4f4d\u7f6e\u5275\u5efa\u7684\u6240\u6709\u983b\u9053\uff0c\u8acb\u4f7f\u7528 [projects.locations.channels.list](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels/list?hl=zh-cn) \u65b9\u6cd5\u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- ``\uff1a\u60a8\u7684 Google Cloud \u9805\u76ee\u7de8\u865f\uff1b\u4f4d\u65bc [IAM \u8a2d\u7f6e](https://console.cloud.google.com/iam-admin/settings?hl=zh-cn) \u9801\u9762\u4e0a\u7684 **\u9805\u76ee\u7de8\u865f** \u5b57\u6bb5\u4e2d\n- ``\uff1a\u60a8\u7684\u983b\u9053\u6240\u5728\u7684\u4f4d\u7f6e\uff1b\u8acb\u4f7f\u7528 [\u652f\u6301\u7684\u5340\u57df](https://cloud.google.com/livestream/docs/locations?hl=zh-cn) \u4e4b\u4e00\n\u5982\u9700\u767c\u9001\u60a8\u7684\u8acb\u6c42\uff0c\u8acb\u5c55\u958b\u4ee5\u4e0b\u9078\u9805\u4e4b\u4e00\uff1a\u60a8\u61c9\u8a72\u6536\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\u7684 JSON \u97ff\u61c9\uff1a\n```\n{\n \"channels\": [ {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/my-channel\",\n  \"createTime\": CREATE_TIME,\n  \"updateTime\": UPDATE_TIME,\n  \"activeInput\": \"INPUT_ID\",\n  \"output\": {\n  \"uri\": \"gs://BUCKET_NAME\"\n  },\n  ...\n },\n {\n  \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/my-channel2\",\n  \"createTime\": CREATE_TIME,\n  \"updateTime\": UPDATE_TIME,\n  \"activeInput\": \"my-other-input\",\n  \"output\": {\n  \"uri\": \"gs://BUCKET_NAME\"\n  },\n  ...\n }\n ]\n}\n```\n\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API C# API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/ListChannels.cs) \n```\nusing Google.Api.Gax;using Google.Api.Gax.ResourceNames;using Google.Cloud.Video.LiveStream.V1;using System.Collections.Generic;using System.Linq;public class ListChannelsSample{\u00a0 \u00a0 public IList<Channel> ListChannels(\u00a0 \u00a0 \u00a0 \u00a0 string projectId, string regionId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 ListChannelsRequest request = new ListChannelsRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ParentAsLocationName = LocationName.FromProjectLocation(projectId, regionId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 PagedEnumerable<ListChannelsResponse, Channel> response = client.ListChannels(request);\u00a0 \u00a0 \u00a0 \u00a0 // The returned sequence will lazily perform RPCs as it's being iterated over.\u00a0 \u00a0 \u00a0 \u00a0 return response.ToList();\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Go API \u53c3\u8003\u6587\u6a94](https://pkg.go.dev/cloud.google.com/go/video/livestream) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/list_channels.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"google.golang.org/api/iterator\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// listChannels lists all channels for a given location.func listChannels(w io.Writer, projectID, location string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.ListChannelsRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: fmt.Sprintf(\"projects/%s/locations/%s\", projectID, location),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 it := client.ListChannels(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintln(w, \"Channels:\")\u00a0 \u00a0 \u00a0 \u00a0 for {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 response, err := it.Next()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err == iterator.Done {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"ListChannels: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintln(w, response.GetName())\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-live-stream/latest/overview?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/ListChannels.java) \n```\nimport com.google.cloud.video.livestream.v1.Channel;import com.google.cloud.video.livestream.v1.ListChannelsRequest;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.LocationName;import java.io.IOException;public class ListChannels {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 listChannels(projectId, location);\u00a0 }\u00a0 public static void listChannels(String projectId, String location) throws IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. In this example, try-with-resources is used\u00a0 \u00a0 // which automatically calls close() on the client to clean up resources.\u00a0 \u00a0 try (LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create()) {\u00a0 \u00a0 \u00a0 var listChannelsRequest =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ListChannelsRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(LocationName.of(projectId, location).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 \u00a0 LivestreamServiceClient.ListChannelsPagedResponse response =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient.listChannels(listChannelsRequest);\u00a0 \u00a0 \u00a0 System.out.println(\"Channels:\");\u00a0 \u00a0 \u00a0 for (Channel channel : response.iterateAll()) {\u00a0 \u00a0 \u00a0 \u00a0 System.out.println(channel.getName());\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/listChannels.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function listChannels() {\u00a0 const iterable = await livestreamServiceClient.listChannelsAsync({\u00a0 \u00a0 parent: livestreamServiceClient.locationPath(projectId, location),\u00a0 });\u00a0 console.info('Channels:');\u00a0 for await (const response of iterable) {\u00a0 \u00a0 console.log(response.name);\u00a0 }}listChannels();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API PHP API \u53c3\u8003\u6587\u6a94](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/list_channels.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\ListChannelsRequest;/**\u00a0* Lists the channels for a given location.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channels\u00a0*/function list_channels(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $parent = $livestreamClient->locationName($callingProjectId, $location);\u00a0 \u00a0 $request = (new ListChannelsRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setParent($parent);\u00a0 \u00a0 $response = $livestreamClient->listChannels($request);\u00a0 \u00a0 // Print the channel list.\u00a0 \u00a0 $channels = $response->iterateAllElements();\u00a0 \u00a0 print('Channels:' . PHP_EOL);\u00a0 \u00a0 foreach ($channels as $channel) {\u00a0 \u00a0 \u00a0 \u00a0 printf('%s' . PHP_EOL, $channel->getName());\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/list_channels.py) \n```\nimport argparsefrom google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,\u00a0 \u00a0 pagers,)def list_channels(project_id: str, location: str) -> pagers.ListChannelsPager:\u00a0 \u00a0 \"\"\"Lists all channels in a location.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the channels.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 parent = f\"projects/{project_id}/locations/{location}\"\u00a0 \u00a0 page_result = client.list_channels(parent=parent)\u00a0 \u00a0 print(\"Channels:\")\u00a0 \u00a0 responses = []\u00a0 \u00a0 for response in page_result:\u00a0 \u00a0 \u00a0 \u00a0 print(response.name)\u00a0 \u00a0 \u00a0 \u00a0 responses.append(response)\u00a0 \u00a0 return responses\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Ruby API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/ruby/docs/reference/google-cloud-video-live_stream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/list_channels.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### List the channels\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")#def list_channels project_id:, location:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the parent.\u00a0 parent = client.location_path project: project_id, location: location\u00a0 # Get the list of channels.\u00a0 response = client.list_channels parent: parent\u00a0 puts \"Channels:\"\u00a0 # Print out all channels.\u00a0 response.each do |channel|\u00a0 \u00a0 puts channel.name\u00a0 endend\n```\n## \u522a\u9664\u983b\u9053\n\u5982\u9700\u522a\u9664\u6e20\u9053\uff0c\u8acb\u4f7f\u7528 [projects.locations.channels.delete](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels/delete?hl=zh-cn) \u65b9\u6cd5\u3002\u60a8\u5fc5\u9808\u5148 [\u505c\u6b62\u6e20\u9053](#stop_channel) \u4e26 [\u522a\u9664\u6240\u6709\u6e20\u9053\u4e8b\u4ef6](https://cloud.google.com/livestream/docs/how-to/create-channel-events?hl=zh-cn#delete_channel_event) \uff0c\u7136\u5f8c\u624d\u80fd\u522a\u9664\u8a72\u6e20\u9053\u3002\n\u5728\u4f7f\u7528\u4efb\u4f55\u8acb\u6c42\u6578\u64da\u4e4b\u524d\uff0c\u8acb\u5148\u9032\u884c\u4ee5\u4e0b\u66ff\u63db\uff1a- ``\uff1a\u60a8\u7684 Google Cloud \u9805\u76ee\u7de8\u865f\uff1b\u4f4d\u65bc [IAM \u8a2d\u7f6e](https://console.cloud.google.com/iam-admin/settings?hl=zh-cn) \u9801\u9762\u4e0a\u7684 **\u9805\u76ee\u7de8\u865f** \u5b57\u6bb5\u4e2d\n- ``\uff1a\u60a8\u7684\u983b\u9053\u6240\u5728\u7684\u4f4d\u7f6e\uff1b\u8acb\u4f7f\u7528 [\u652f\u6301\u7684\u5340\u57df](https://cloud.google.com/livestream/docs/locations?hl=zh-cn) \u4e4b\u4e00\n- ``\uff1a\u7528\u6236\u5b9a\u7fa9\u7684\u983b\u9053\u6a19\u8b58\u7b26\n\u5982\u9700\u767c\u9001\u60a8\u7684\u8acb\u6c42\uff0c\u8acb\u5c55\u958b\u4ee5\u4e0b\u9078\u9805\u4e4b\u4e00\uff1a\u60a8\u61c9\u8a72\u6536\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\u7684 JSON \u97ff\u61c9\uff1a\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID\",\n \"verb\": \"delete\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\n\u6b64\u547d\u4ee4\u6703\u5275\u5efa\u4e00\u500b\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c (LRO)\uff0c\u53ef\u7528\u65bc\u8ddf\u8e64\u8acb\u6c42\u7684\u9032\u5ea6\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1\n [\u7ba1\u7406\u9577\u6642\u9593\u904b\u884c\u7684\u64cd\u4f5c ](https://cloud.google.com/livestream/docs/how-to/manage-long-running-operations?hl=zh-cn) \n\u3002\n\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API C# API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/DeleteChannelAsync.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using Google.Protobuf.WellKnownTypes;using System.Threading.Tasks;public class DeleteChannelSample{\u00a0 \u00a0 public async Task DeleteChannelAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string channelId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 DeleteChannelRequest request = new DeleteChannelRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelName = ChannelName.FromProjectLocationChannel(projectId, locationId, channelId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Empty, OperationMetadata> response = await client.DeleteChannelAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 await response.PollUntilCompletedAsync();\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Go API \u53c3\u8003\u6587\u6a94](https://pkg.go.dev/cloud.google.com/go/video/livestream) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/delete_channel.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// deleteChannel deletes a previously-created channel.func deleteChannel(w io.Writer, projectID, location, channelID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // channelID := \"my-channel\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.DeleteChannelRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/channels/%s\", projectID, location, channelID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.DeleteChannel(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"DeleteChannel: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 err = op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Deleted channel\")\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Java API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/java/docs/reference/google-cloud-live-stream/latest/overview?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/DeleteChannel.java) \n```\nimport com.google.cloud.video.livestream.v1.ChannelName;import com.google.cloud.video.livestream.v1.DeleteChannelRequest;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class DeleteChannel {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String channelId = \"my-channel-id\";\u00a0 \u00a0 deleteChannel(projectId, location, channelId);\u00a0 }\u00a0 public static void deleteChannel(String projectId, String location, String channelId)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 var deleteChannelRequest =\u00a0 \u00a0 \u00a0 \u00a0 DeleteChannelRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setName(ChannelName.of(projectId, location, channelId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // First API call in a project can take up to 10 minutes.\u00a0 \u00a0 livestreamServiceClient.deleteChannelAsync(deleteChannelRequest).get(10, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Deleted channel\");\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Node.js API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/nodejs/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/deleteChannel.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// channelId = 'my-channel';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function deleteChannel() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 name: livestreamServiceClient.channelPath(projectId, location, channelId),\u00a0 };\u00a0 // Run request\u00a0 const [operation] = await livestreamServiceClient.deleteChannel(request);\u00a0 await operation.promise();\u00a0 console.log('Deleted channel');}deleteChannel();\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API PHP API \u53c3\u8003\u6587\u6a94](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/delete_channel.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\DeleteChannelRequest;/**\u00a0* Deletes a channel.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channel\u00a0* @param string \u00a0$channelId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel to be deleted\u00a0*/function delete_channel(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $channelId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $formattedName = $livestreamClient->channelName($callingProjectId, $location, $channelId);\u00a0 \u00a0 // Run the channel deletion request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new DeleteChannelRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($formattedName);\u00a0 \u00a0 $operationResponse = $livestreamClient->deleteChannel($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 // Print status\u00a0 \u00a0 \u00a0 \u00a0 printf('Deleted channel %s' . PHP_EOL, $channelId);\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Python API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/python/docs/reference/livestream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/delete_channel.py) \n```\nimport argparsefrom google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)from google.protobuf import empty_pb2 as emptydef delete_channel(project_id: str, location: str, channel_id: str) -> empty.Empty:\u00a0 \u00a0 \"\"\"Deletes a channel.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the channel.\u00a0 \u00a0 \u00a0 \u00a0 channel_id: The user-defined channel ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\u00a0 \u00a0 operation = client.delete_channel(name=name)\u00a0 \u00a0 response = operation.result(600)\u00a0 \u00a0 print(\"Deleted channel\")\u00a0 \u00a0 return response\n```\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5b89\u88dd\u548c\u4f7f\u7528 Live Stream API \u5ba2\u6236\u7aef\u5eab\uff0c\u8acb\u53c3\u95b1 [Live Stream API \u5ba2\u6236\u7aef\u5eab](https://cloud.google.com/livestream/docs/reference/libraries?hl=zh-cn) \u3002 \u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [Live Stream API Ruby API \u53c3\u8003\u6587\u6a94](https://cloud.google.com/ruby/docs/reference/google-cloud-video-live_stream/latest?hl=zh-cn) \u3002\n\u5982\u9700\u5411 Live Stream API \u9032\u884c\u8eab\u4efd\u9a57\u8b49\uff0c\u8acb\u8a2d\u7f6e\u61c9\u7528\u9ed8\u8a8d\u6191\u64da\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u7232\u672c\u5730\u958b\u767c\u74b0\u5883\u8a2d\u7f6e\u8eab\u4efd\u9a57\u8b49](https://cloud.google.com/docs/authentication/provide-credentials-adc?hl=zh-cn#local-dev) \u3002\n [\u5728 GitHub \u4e0a\u67e5\u770b](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/delete_channel.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Delete a channel\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param channel_id [String] Your channel name (e.g. \"my-channel\")#def delete_channel project_id:, location:, channel_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the channel.\u00a0 name = client.channel_path project: project_id, location: location, channel: channel_id\u00a0 # Delete the channel.\u00a0 operation = client.delete_channel name: name\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print a success message.\u00a0 puts \"Deleted channel\"end\n```\n## \u5f8c\u7e8c\u6b65\u9a5f\n\u77ad\u89e3\u5982\u4f55 [\u5275\u5efa\u548c\u7ba1\u7406\u983b\u9053\u4e8b\u4ef6](https://cloud.google.com/livestream/docs/how-to/create-channel-events?hl=zh-cn) \u3002", "guide": "Live Stream API"}