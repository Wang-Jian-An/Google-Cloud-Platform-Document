{"title": "Live Stream API - Insert a slate into a live stream", "url": "https://cloud.google.com/livestream/docs/how-to/insert-slate", "abstract": "# Live Stream API - Insert a slate into a live stream\nThis page describes how to create a slate and insert it into a live stream. are content that can replace the main live stream content whenever you want (for example, if you are experiencing technical issues on the input stream or to hide sensitive content on the input stream).\n", "content": "## Set up your Google Cloud project and authentication\n[Google Cloud project](/docs/overview#projects)\n[Before you begin](/livestream/docs/how-to/before-you-begin)\n## Upload a video to your Cloud Storage bucket\n- In the Google Cloud console, go to the Cloud Storage Browser page. [Go to the Cloud Storage Browser page](https://console.cloud.google.com/storage/browser) \n- Click the name of your bucket to open it.\n- Click **Upload files** .\n- Select a video file to upload from your local machine. You can use a 60 second [sample video](/static/livestream/images/ChromeCast.mp4) .\nYour video is now saved to the Cloud Storage bucket.\n## Create an asset\nAssets are [video](/livestream/docs/reference/rest/v1/projects.locations.assets#videoasset) or [images](/livestream/docs/reference/rest/v1/projects.locations.assets#imageasset) that can be used with the Live Stream API. An asset is used to create an insert slate channel event. You should create an asset long before you plan to use it for a slate because it takes time for the API to process the asset. If the asset is not ready after two seconds from the slate event execution time, a black screen displays until the asset is ready.\nTo create an asset, use the [projects.locations.assets.create](/livestream/docs/reference/rest/v1/projects.locations.assets/create) method. The following sample creates a video asset.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location in which to create the  asset; use one of the [supported regions](/livestream/docs/locations) \n- ``: A user-defined identifier for the new  asset to create. This value must be 1-63 characters, begin and end with`[a-z0-9]`, and  can contain dashes (-) between characters. For example,`my-asset`.\n- ``: the URI of the video in your  Cloud Storage bucket to use, such as`gs://my-bucket/my-video.mp4`(see the [supported media formats](/livestream/docs/how-to/create-assets#supported-media-formats) )\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/assets/ASSET_ID\",\n \"verb\": \"create\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\nThis command creates a long-running operation (LRO) that you can use to track the progress of your request. See\n [Manage long-running operations ](/livestream/docs/how-to/manage-long-running-operations) \nfor more information.\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/CreateAssetAsync.cs) \n```\nusing Google.Api.Gax.ResourceNames;using Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using System.Threading.Tasks;public class CreateAssetSample{\u00a0 \u00a0 public async Task<Asset> CreateAssetAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string assetId, string assetUri)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 CreateAssetRequest request = new CreateAssetRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ParentAsLocationName = LocationName.FromProjectLocation(projectId, locationId),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AssetId = assetId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Asset = new Asset\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Video = new Asset.Types.VideoAsset\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Uri = assetUri\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Asset, OperationMetadata> response = await client.CreateAssetAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Asset, OperationMetadata> completedResponse = await response.PollUntilCompletedAsync();\u00a0 \u00a0 \u00a0 \u00a0 // Retrieve the operation result.\u00a0 \u00a0 \u00a0 \u00a0 return completedResponse.Result;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/create_asset.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// createAsset creates an asset. This asset references a video file// in Cloud Storage.func createAsset(w io.Writer, projectID, location, assetID, assetURI string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // assetID := \"my-asset\"\u00a0 \u00a0 \u00a0 \u00a0 // assetURI := \"gs://my-bucket/my-video.mp4\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.CreateAssetRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: \u00a0fmt.Sprintf(\"projects/%s/locations/%s\", projectID, location),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AssetId: assetID,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Asset: &livestreampb.Asset{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Resource: &livestreampb.Asset_Video{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Video: &livestreampb.Asset_VideoAsset{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Uri: assetURI,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Creates the asset.\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.CreateAsset(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"CreateAsset: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Asset: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/CreateAsset.java) \n```\nimport com.google.cloud.video.livestream.v1.Asset;import com.google.cloud.video.livestream.v1.Asset.VideoAsset;import com.google.cloud.video.livestream.v1.CreateAssetRequest;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.LocationName;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class CreateAsset {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String assetId = \"my-asset-id\";\u00a0 \u00a0 String assetUri = \"gs://my-bucket/my-video.mp4\";\u00a0 \u00a0 createAsset(projectId, location, assetId, assetUri);\u00a0 }\u00a0 public static void createAsset(String projectId, String location, String assetId, String assetUri)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 var createAssetRequest =\u00a0 \u00a0 \u00a0 \u00a0 CreateAssetRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(LocationName.of(projectId, location).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAssetId(assetId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAsset(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Asset.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setVideo(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 VideoAsset.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setUri(assetUri)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // First API call in a project can take up to 15 minutes.\u00a0 \u00a0 Asset result =\u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient.createAssetAsync(createAssetRequest).get(15, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Asset: \" + result.getName());\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/createAsset.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// assetId = 'my-asset';// assetUri = 'gs://my-bucket/my-video.mp4';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function createAsset() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 parent: livestreamServiceClient.locationPath(projectId, location),\u00a0 \u00a0 assetId: assetId,\u00a0 \u00a0 asset: {\u00a0 \u00a0 \u00a0 video: {\u00a0 \u00a0 \u00a0 \u00a0 uri: assetUri,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 },\u00a0 };\u00a0 // Run request\u00a0 const [operation] = await livestreamServiceClient.createAsset(request);\u00a0 const response = await operation.promise();\u00a0 const [asset] = response;\u00a0 console.log(`Asset: ${asset.name}`);}createAsset();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/create_asset.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Asset;use Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\CreateAssetRequest;/**\u00a0* Creates an asset. You can use an asset to create a slate.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the asset\u00a0* @param string \u00a0$assetId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the asset to be created\u00a0* @param string \u00a0$assetUri \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The Cloud Storage URI of the asset\u00a0*/function create_asset(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $assetId,\u00a0 \u00a0 string $assetUri): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $parent = $livestreamClient->locationName($callingProjectId, $location);\u00a0 \u00a0 $asset = (new Asset())\u00a0 \u00a0 \u00a0 \u00a0 ->setVideo(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 (new Asset\\VideoAsset())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ->setUri($assetUri));\u00a0 \u00a0 // Run the asset creation request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new CreateAssetRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setParent($parent)\u00a0 \u00a0 \u00a0 \u00a0 ->setAsset($asset)\u00a0 \u00a0 \u00a0 \u00a0 ->setAssetId($assetId);\u00a0 \u00a0 $operationResponse = $livestreamClient->createAsset($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 $result = $operationResponse->getResult();\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Asset: %s' . PHP_EOL, $result->getName());\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/create_asset.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def create_asset(\u00a0 \u00a0 project_id: str, location: str, asset_id: str, asset_uri: str) -> live_stream_v1.types.Asset:\u00a0 \u00a0 \"\"\"Creates an asset.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location in which to create the asset.\u00a0 \u00a0 \u00a0 \u00a0 asset_id: The user-defined asset ID.\u00a0 \u00a0 \u00a0 \u00a0 asset_uri: The asset URI (e.g., 'gs://my-bucket/my-video.mp4').\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 parent = f\"projects/{project_id}/locations/{location}\"\u00a0 \u00a0 asset = live_stream_v1.types.Asset(\u00a0 \u00a0 \u00a0 \u00a0 video=live_stream_v1.types.Asset.VideoAsset(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 uri=asset_uri,\u00a0 \u00a0 \u00a0 \u00a0 )\u00a0 \u00a0 )\u00a0 \u00a0 operation = client.create_asset(parent=parent, asset=asset, asset_id=asset_id)\u00a0 \u00a0 response = operation.result(600)\u00a0 \u00a0 print(f\"Asset: {response.name}\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/create_asset.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Create an asset\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param asset_id [String] Your asset name (e.g. \"my-asset\")# @param asset_uri [String] Your asset URI (e.g. \"gs://my-bucket/my-video.mp4\")#def create_asset project_id:, location:, asset_id:, asset_uri:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the parent.\u00a0 parent = client.location_path project: project_id, location: location\u00a0 # Set the asset fields.\u00a0 new_asset = {\u00a0 \u00a0 video: {\u00a0 \u00a0 \u00a0 uri: asset_uri\u00a0 \u00a0 }\u00a0 }\u00a0 operation = client.create_asset parent: parent, asset: new_asset, asset_id: asset_id\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print the asset name.\u00a0 puts \"Asset: #{operation.response.name}\"end\n```\n## Create an input endpoint\nTo create an input endpoint, use the [projects.locations.inputs.create](/livestream/docs/reference/rest/v1/projects.locations.inputs/create) method.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location in which to create the input  endpoint; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the new input  endpoint to create (to which you send your input stream). This value must be 1-63 characters, begin and end with`[a-z0-9]`, and  can contain dashes (-) between characters. For example,`my-input`.\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/inputs/INPUT_ID\",\n \"verb\": \"create\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\nThis command creates a long-running operation (LRO) that you can use to track the progress of your request. See\n [Manage long-running operations ](/livestream/docs/how-to/manage-long-running-operations) \nfor more information.\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/CreateInputAsync.cs) \n```\nusing Google.Api.Gax.ResourceNames;using Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using System.Threading.Tasks;public class CreateInputSample{\u00a0 \u00a0 public async Task<Input> CreateInputAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string inputId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 CreateInputRequest request = new CreateInputRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ParentAsLocationName = LocationName.FromProjectLocation(projectId, locationId),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputId = inputId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input = new Input\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type = Input.Types.Type.RtmpPush\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Input, OperationMetadata> response = await client.CreateInputAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Input, OperationMetadata> completedResponse = await response.PollUntilCompletedAsync();\u00a0 \u00a0 \u00a0 \u00a0 // Retrieve the operation result.\u00a0 \u00a0 \u00a0 \u00a0 return completedResponse.Result;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/create_input.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// createInput creates an input endpoint. You send an input video stream to this// endpoint.func createInput(w io.Writer, projectID, location, inputID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // inputID := \"my-input\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.CreateInputRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: \u00a0fmt.Sprintf(\"projects/%s/locations/%s\", projectID, location),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputId: inputID,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input: &livestreampb.Input{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type: livestreampb.Input_RTMP_PUSH,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Creates the input.\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.CreateInput(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"CreateInput: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Input: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/CreateInput.java) \n```\nimport com.google.cloud.video.livestream.v1.CreateInputRequest;import com.google.cloud.video.livestream.v1.Input;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.LocationName;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class CreateInput {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String inputId = \"my-input-id\";\u00a0 \u00a0 createInput(projectId, location, inputId);\u00a0 }\u00a0 public static void createInput(String projectId, String location, String inputId)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 var createInputRequest =\u00a0 \u00a0 \u00a0 \u00a0 CreateInputRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(LocationName.of(projectId, location).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInputId(inputId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInput(Input.newBuilder().setType(Input.Type.RTMP_PUSH).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // First API call in a project can take up to 15 minutes.\u00a0 \u00a0 Input result =\u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient.createInputAsync(createInputRequest).get(15, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Input: \" + result.getName());\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/createInput.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// inputId = 'my-input';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function createInput() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 parent: livestreamServiceClient.locationPath(projectId, location),\u00a0 \u00a0 inputId: inputId,\u00a0 \u00a0 input: {\u00a0 \u00a0 \u00a0 type: 'RTMP_PUSH',\u00a0 \u00a0 },\u00a0 };\u00a0 // Run request\u00a0 const [operation] = await livestreamServiceClient.createInput(request);\u00a0 const response = await operation.promise();\u00a0 const [input] = response;\u00a0 console.log(`Input: ${input.name}`);}createInput();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/create_input.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Input;use Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\CreateInputRequest;/**\u00a0* Creates an input. You send an input video stream to this endpoint.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the input\u00a0* @param string \u00a0$inputId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the input to be created\u00a0*/function create_input(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $inputId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $parent = $livestreamClient->locationName($callingProjectId, $location);\u00a0 \u00a0 $input = (new Input())\u00a0 \u00a0 \u00a0 \u00a0 ->setType(Input\\Type::RTMP_PUSH);\u00a0 \u00a0 // Run the input creation request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new CreateInputRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setParent($parent)\u00a0 \u00a0 \u00a0 \u00a0 ->setInput($input)\u00a0 \u00a0 \u00a0 \u00a0 ->setInputId($inputId);\u00a0 \u00a0 $operationResponse = $livestreamClient->createInput($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 $result = $operationResponse->getResult();\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Input: %s' . PHP_EOL, $result->getName());\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/create_input.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def create_input(\u00a0 \u00a0 project_id: str, location: str, input_id: str) -> live_stream_v1.types.Input:\u00a0 \u00a0 \"\"\"Creates an input.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location in which to create the input.\u00a0 \u00a0 \u00a0 \u00a0 input_id: The user-defined input ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 parent = f\"projects/{project_id}/locations/{location}\"\u00a0 \u00a0 input = live_stream_v1.types.Input(\u00a0 \u00a0 \u00a0 \u00a0 type_=\"RTMP_PUSH\",\u00a0 \u00a0 )\u00a0 \u00a0 operation = client.create_input(parent=parent, input=input, input_id=input_id)\u00a0 \u00a0 response = operation.result(900)\u00a0 \u00a0 print(f\"Input: {response.name}\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/create_input.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Create an input endpoint\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param input_id [String] Your input name (e.g. \"my-input\")#def create_input project_id:, location:, input_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the parent.\u00a0 parent = client.location_path project: project_id, location: location\u00a0 # Set the input fields.\u00a0 new_input = {\u00a0 \u00a0 type: Google::Cloud::Video::LiveStream::V1::Input::Type::RTMP_PUSH\u00a0 }\u00a0 operation = client.create_input parent: parent, input: new_input, input_id: input_id\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print the input name.\u00a0 puts \"Input: #{operation.response.name}\"end\n```\n## Get input endpoint details\nTo get the details of the input endpoint, use the [projects.locations.inputs.get](/livestream/docs/reference/rest/v1/projects.locations.inputs/get) method.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your input endpoint is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: the user-defined identifier for the  input endpoint\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/inputs/INPUT_ID\",\n \"createTime\": CREATE_TIME,\n \"updateTime\": UPDATE_TIME,\n \"type\": \"RTMP_PUSH\",\n \"uri\": INPUT_STREAM_URI, # For example, \"rtmp://1.2.3.4/live/b8ebdd94-c8d9-4d88-a16e-b963c43a953b\",\n \"tier\": \"HD\"\n}\n```\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/GetInput.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;public class GetInputSample{\u00a0 \u00a0 public Input GetInput(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string inputId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 GetInputRequest request = new GetInputRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputName = InputName.FromProjectLocationInput(projectId, locationId, inputId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Input response = client.GetInput(request);\u00a0 \u00a0 \u00a0 \u00a0 return response;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/get_input.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// getInput gets a previously-created input endpoint.func getInput(w io.Writer, projectID, location, inputID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // inputID := \"my-input-id\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.GetInputRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/inputs/%s\", projectID, location, inputID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := client.GetInput(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"GetInput: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Input: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/GetInput.java) \n```\nimport com.google.cloud.video.livestream.v1.Input;import com.google.cloud.video.livestream.v1.InputName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import java.io.IOException;public class GetInput {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String inputId = \"my-input-id\";\u00a0 \u00a0 getInput(projectId, location, inputId);\u00a0 }\u00a0 public static void getInput(String projectId, String location, String inputId)\u00a0 \u00a0 \u00a0 throws IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. In this example, try-with-resources is used\u00a0 \u00a0 // which automatically calls close() on the client to clean up resources.\u00a0 \u00a0 try (LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create()) {\u00a0 \u00a0 \u00a0 InputName name = InputName.of(projectId, location, inputId);\u00a0 \u00a0 \u00a0 Input response = livestreamServiceClient.getInput(name);\u00a0 \u00a0 \u00a0 System.out.println(\"Input: \" + response.getName());\u00a0 \u00a0 }\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/getInput.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// inputId = 'my-input';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function getInput() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 name: livestreamServiceClient.inputPath(projectId, location, inputId),\u00a0 };\u00a0 const [input] = await livestreamServiceClient.getInput(request);\u00a0 console.log(`Input: ${input.name}`);}getInput();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/get_input.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\GetInputRequest;/**\u00a0* Gets an input.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the input\u00a0* @param string \u00a0$inputId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the input\u00a0*/function get_input(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $inputId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $formattedName = $livestreamClient->inputName($callingProjectId, $location, $inputId);\u00a0 \u00a0 // Get the input.\u00a0 \u00a0 $request = (new GetInputRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($formattedName);\u00a0 \u00a0 $response = $livestreamClient->getInput($request);\u00a0 \u00a0 // Print results\u00a0 \u00a0 printf('Input: %s' . PHP_EOL, $response->getName());}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/get_input.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def get_input(\u00a0 \u00a0 project_id: str, location: str, input_id: str) -> live_stream_v1.types.Input:\u00a0 \u00a0 \"\"\"Gets an input.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the input.\u00a0 \u00a0 \u00a0 \u00a0 input_id: The user-defined input ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\u00a0 \u00a0 response = client.get_input(name=name)\u00a0 \u00a0 print(f\"Input: {response.name}\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/get_input.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Get an input endpoint\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param input_id [String] Your input name (e.g. \"my-input\")#def get_input project_id:, location:, input_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the input.\u00a0 name = client.input_path project: project_id, location: location, input: input_id\u00a0 # Get the input.\u00a0 input = client.get_input name: name\u00a0 # Print the input name.\u00a0 puts \"Input: #{input.name}\"end\n```\nFind the `uri` field and copy the returned to use later in the [Send the input stream](#send-input-stream) section.\n## Create a channel\nTo create a channel, use the [projects.locations.channels.create](/livestream/docs/reference/rest/v1/projects.locations.channels/create) method. The following samples create a channel that generates an HLS live stream. The live stream consists of a single, high-definition (1280x720) rendition.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location in which to create the  channel; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the channel to  create; this value must be 1-63 characters, begin and end with`[a-z0-9]`, and  can contain dashes (-) between characters\n- ``: the user-defined identifier for the  input endpoint\n- ``: the name of the Cloud Storage  bucket you created to hold the live stream manifest and segment files\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID\",\n \"verb\": \"create\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\nThis command creates a long-running operation (LRO) that you can use to track the progress of your request. See\n [Manage long-running operations ](/livestream/docs/how-to/manage-long-running-operations) \nfor more information.\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/CreateChannelAsync.cs) \n```\nusing Google.Api.Gax.ResourceNames;using Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using System.Threading.Tasks;public class CreateChannelSample{\u00a0 \u00a0 public async Task<Channel> CreateChannelAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string channelId, string inputId, string outputUri)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 InputAttachment inputAttachment = new InputAttachment\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"my-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAsInputName = InputName.FromProjectLocationInput(projectId, locationId, inputId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 VideoStream videoStream = new VideoStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 H264 = new VideoStream.Types.H264CodecSettings\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Profile = \"high\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BitrateBps = 3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FrameRate = 30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HeightPixels = 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 WidthPixels = 1280\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream elementaryStreamVideo = new ElementaryStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"es_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 VideoStream = videoStream\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 AudioStream audioStream = new AudioStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Codec = \"aac\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelCount = 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BitrateBps = 160000\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream elementaryStreamAudio = new ElementaryStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"es_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioStream = audioStream\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 MuxStream muxVideo = new MuxStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"mux_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams = { \"es_video\" },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings = new SegmentSettings\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentDuration = new Google.Protobuf.WellKnownTypes.Duration\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds = 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 MuxStream muxAudio = new MuxStream\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key = \"mux_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams = { \"es_audio\" },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings = new SegmentSettings\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentDuration = new Google.Protobuf.WellKnownTypes.Duration\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds = 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 CreateChannelRequest request = new CreateChannelRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ParentAsLocationName = LocationName.FromProjectLocation(projectId, locationId),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelId = channelId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Channel = new Channel\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAttachments = { inputAttachment },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Output = new Channel.Types.Output\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Uri = outputUri\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams = { elementaryStreamVideo, elementaryStreamAudio },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStreams = { muxVideo, muxAudio },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Manifests = {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new Manifest {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FileName = \"manifest.m3u8\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type = Manifest.Types.ManifestType.Hls,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStreams = { \"mux_video\", \"mux_audio\" },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MaxSegmentCount = 5\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Channel, OperationMetadata> response = await client.CreateChannelAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 Operation<Channel, OperationMetadata> completedResponse = await response.PollUntilCompletedAsync();\u00a0 \u00a0 \u00a0 \u00a0 // Retrieve the operation result.\u00a0 \u00a0 \u00a0 \u00a0 return completedResponse.Result;\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/create_channel.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 \"github.com/golang/protobuf/ptypes/duration\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// createChannel creates a channel.func createChannel(w io.Writer, projectID, location, channelID, inputID, outputURI string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // channelID := \"my-channel\"\u00a0 \u00a0 \u00a0 \u00a0 // inputID := \"my-input\"\u00a0 \u00a0 \u00a0 \u00a0 // outputURI := \"gs://my-bucket/my-output-folder/\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.CreateChannelRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Parent: \u00a0 \u00a0fmt.Sprintf(\"projects/%s/locations/%s\", projectID, location),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelId: channelID,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Channel: &livestreampb.Channel{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAttachments: []*livestreampb.InputAttachment{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \u00a0 \"my-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Input: fmt.Sprintf(\"projects/%s/locations/%s/inputs/%s\", projectID, location, inputID),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Output: &livestreampb.Channel_Output{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Uri: outputURI,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams: []*livestreampb.ElementaryStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \"es_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream: &livestreampb.ElementaryStream_VideoStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 VideoStream: &livestreampb.VideoStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CodecSettings: &livestreampb.VideoStream_H264{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 H264: &livestreampb.VideoStream_H264CodecSettings{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Profile: \u00a0 \u00a0 \u00a0\"high\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BitrateBps: \u00a0 3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FrameRate: \u00a0 \u00a030,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 HeightPixels: 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 WidthPixels: \u00a01280,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \"es_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream: &livestreampb.ElementaryStream_AudioStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 AudioStream: &livestreampb.AudioStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Codec: \u00a0 \u00a0 \u00a0 \u00a0\"aac\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelCount: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 BitrateBps: \u00a0 160000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStreams: []*livestreampb.MuxStream{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mux_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams: []string{\"es_video\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings: &livestreampb.SegmentSettings{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentDuration: &duration.Duration{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Key: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mux_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStreams: []string{\"es_audio\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings: &livestreampb.SegmentSettings{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentDuration: &duration.Duration{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Seconds: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Manifests: []*livestreampb.Manifest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 FileName: \u00a0 \u00a0 \u00a0 \u00a0\"manifest.m3u8\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Type: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0livestreampb.Manifest_HLS,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStreams: \u00a0 \u00a0 \u00a0[]string{\"mux_video\", \"mux_audio\"},\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MaxSegmentCount: 5,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 // Creates the channel.\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.CreateChannel(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"CreateChannel: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 response, err := op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Channel: %v\", response.Name)\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/CreateChannel.java) \n```\nimport com.google.cloud.video.livestream.v1.AudioStream;import com.google.cloud.video.livestream.v1.Channel;import com.google.cloud.video.livestream.v1.Channel.Output;import com.google.cloud.video.livestream.v1.CreateChannelRequest;import com.google.cloud.video.livestream.v1.ElementaryStream;import com.google.cloud.video.livestream.v1.InputAttachment;import com.google.cloud.video.livestream.v1.InputName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import com.google.cloud.video.livestream.v1.LocationName;import com.google.cloud.video.livestream.v1.Manifest;import com.google.cloud.video.livestream.v1.Manifest.ManifestType;import com.google.cloud.video.livestream.v1.MuxStream;import com.google.cloud.video.livestream.v1.SegmentSettings;import com.google.cloud.video.livestream.v1.VideoStream;import com.google.cloud.video.livestream.v1.VideoStream.H264CodecSettings;import com.google.protobuf.Duration;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class CreateChannel {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String channelId = \"my-channel-id\";\u00a0 \u00a0 String inputId = \"my-input-id\";\u00a0 \u00a0 String outputUri = \"gs://my-bucket/my-output-folder/\";\u00a0 \u00a0 createChannel(projectId, location, channelId, inputId, outputUri);\u00a0 }\u00a0 public static void createChannel(\u00a0 \u00a0 \u00a0 String projectId, String location, String channelId, String inputId, String outputUri)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 VideoStream videoStream =\u00a0 \u00a0 \u00a0 \u00a0 VideoStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setH264(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 H264CodecSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setProfile(\"high\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setBitrateBps(3000000)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFrameRate(30)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setHeightPixels(720)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setWidthPixels(1280))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 AudioStream audioStream =\u00a0 \u00a0 \u00a0 \u00a0 AudioStream.newBuilder().setCodec(\"aac\").setChannelCount(2).setBitrateBps(160000).build();\u00a0 \u00a0 var createChannelRequest =\u00a0 \u00a0 \u00a0 \u00a0 CreateChannelRequest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setParent(LocationName.of(projectId, location).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setChannelId(channelId)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setChannel(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Channel.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addInputAttachments(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 InputAttachment.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"my-input\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setInput(InputName.of(projectId, location, inputId).toString())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setOutput(Output.newBuilder().setUri(outputUri).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addElementaryStreams(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"es_video\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setVideoStream(videoStream))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addElementaryStreams(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ElementaryStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"es_audio\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setAudioStream(audioStream))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addMuxStreams(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"mux_video\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addElementaryStreams(\"es_video\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSegmentSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSegmentDuration(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Duration.newBuilder().setSeconds(2).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addMuxStreams(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 MuxStream.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setKey(\"mux_audio\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addElementaryStreams(\"es_audio\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSegmentSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 SegmentSettings.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setSegmentDuration(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Duration.newBuilder().setSeconds(2).build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addManifests(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Manifest.newBuilder()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setFileName(\"manifest.m3u8\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setType(ManifestType.HLS)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addMuxStreams(\"mux_video\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .addMuxStreams(\"mux_audio\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .setMaxSegmentCount(5)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build()))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .build();\u00a0 \u00a0 // First API call in a project can take up to 10 minutes.\u00a0 \u00a0 Channel result =\u00a0 \u00a0 \u00a0 \u00a0 livestreamServiceClient\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .createChannelAsync(createChannelRequest)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .get(10, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Channel: \" + result.getName());\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/createChannel.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// channelId = 'my-channel';// inputId = 'my-input';// outputUri = 'gs://my-bucket/my-output-folder/';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function createChannel() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 parent: livestreamServiceClient.locationPath(projectId, location),\u00a0 \u00a0 channelId: channelId,\u00a0 \u00a0 channel: {\u00a0 \u00a0 \u00a0 inputAttachments: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'my-input',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input: livestreamServiceClient.inputPath(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 projectId,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 location,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 inputId\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 output: {\u00a0 \u00a0 \u00a0 \u00a0 uri: outputUri,\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 elementaryStreams: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'es_video',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 videoStream: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h264: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 profile: 'high',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 heightPixels: 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 widthPixels: 1280,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrateBps: 3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 frameRate: 30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'es_audio',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audioStream: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 codec: 'aac',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 channelCount: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrateBps: 160000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 muxStreams: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'mux_video',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 elementaryStreams: ['es_video'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segmentSettings: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key: 'mux_audio',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 elementaryStreams: ['es_audio'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segmentSettings: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 manifests: [\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 fileName: 'manifest.m3u8',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type: 'HLS',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 muxStreams: ['mux_video', 'mux_audio'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 maxSegmentCount: 5,\u00a0 \u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 },\u00a0 };\u00a0 // Run request\u00a0 const [operation] = await livestreamServiceClient.createChannel(request);\u00a0 const response = await operation.promise();\u00a0 const [channel] = response;\u00a0 console.log(`Channel: ${channel.name}`);}createChannel();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/create_channel.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\AudioStream;use Google\\Cloud\\Video\\LiveStream\\V1\\Channel;use Google\\Cloud\\Video\\LiveStream\\V1\\ElementaryStream;use Google\\Cloud\\Video\\LiveStream\\V1\\InputAttachment;use Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\CreateChannelRequest;use Google\\Cloud\\Video\\LiveStream\\V1\\Manifest;use Google\\Cloud\\Video\\LiveStream\\V1\\MuxStream;use Google\\Cloud\\Video\\LiveStream\\V1\\SegmentSettings;use Google\\Cloud\\Video\\LiveStream\\V1\\VideoStream;use Google\\Protobuf\\Duration;/**\u00a0* Creates a channel.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channel\u00a0* @param string \u00a0$channelId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel to be created\u00a0* @param string \u00a0$inputId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the input for the channel\u00a0* @param string \u00a0$outputUri \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Uri of the channel output folder in a\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Cloud Storage bucket. (e.g.\u00a0* \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"gs://my-bucket/my-output-folder/\")\u00a0*/function create_channel(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $channelId,\u00a0 \u00a0 string $inputId,\u00a0 \u00a0 string $outputUri): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $parent = $livestreamClient->locationName($callingProjectId, $location);\u00a0 \u00a0 $channelName = $livestreamClient->channelName($callingProjectId, $location, $channelId);\u00a0 \u00a0 $inputName = $livestreamClient->inputName($callingProjectId, $location, $inputId);\u00a0 \u00a0 $channel = (new Channel())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($channelName)\u00a0 \u00a0 \u00a0 \u00a0 ->setInputAttachments([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new InputAttachment([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'my-input',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'input' => $inputName\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ->setElementaryStreams([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new ElementaryStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'es_video',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'video_stream' => new VideoStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'h264' => new VideoStream\\H264CodecSettings([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'profile' => 'high',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'width_pixels' => 1280,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'height_pixels' => 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'bitrate_bps' => 3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'frame_rate' => 30\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new ElementaryStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'es_audio',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'audio_stream' => new AudioStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'codec' => 'aac',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'channel_count' => 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'bitrate_bps' => 160000\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ->setOutput(new Channel\\Output(['uri' => $outputUri]))\u00a0 \u00a0 \u00a0 \u00a0 ->setMuxStreams([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new MuxStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'mux_video',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'elementary_streams' => ['es_video'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'segment_settings' => new SegmentSettings([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'segment_duration' => new Duration(['seconds' => 2])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new MuxStream([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'key' => 'mux_audio',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'elementary_streams' => ['es_audio'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'segment_settings' => new SegmentSettings([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'segment_duration' => new Duration(['seconds' => 2])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]),\u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ->setManifests([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new Manifest([\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'file_name' => 'manifest.m3u8',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'type' => Manifest\\ManifestType::HLS,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'mux_streams' => ['mux_video', 'mux_audio'],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'max_segment_count' => 5\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ])\u00a0 \u00a0 \u00a0 \u00a0 ]);\u00a0 \u00a0 // Run the channel creation request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new CreateChannelRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setParent($parent)\u00a0 \u00a0 \u00a0 \u00a0 ->setChannel($channel)\u00a0 \u00a0 \u00a0 \u00a0 ->setChannelId($channelId);\u00a0 \u00a0 $operationResponse = $livestreamClient->createChannel($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 $result = $operationResponse->getResult();\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Channel: %s' . PHP_EOL, $result->getName());\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/create_channel.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)from google.protobuf import duration_pb2 as durationdef create_channel(\u00a0 \u00a0 project_id: str, location: str, channel_id: str, input_id: str, output_uri: str) -> live_stream_v1.types.Channel:\u00a0 \u00a0 \"\"\"Creates a channel.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location in which to create the channel.\u00a0 \u00a0 \u00a0 \u00a0 channel_id: The user-defined channel ID.\u00a0 \u00a0 \u00a0 \u00a0 input_id: The user-defined input ID.\u00a0 \u00a0 \u00a0 \u00a0 output_uri: Uri of the channel output folder in a Cloud Storage bucket.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 parent = f\"projects/{project_id}/locations/{location}\"\u00a0 \u00a0 input = f\"projects/{project_id}/locations/{location}/inputs/{input_id}\"\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\u00a0 \u00a0 channel = live_stream_v1.types.Channel(\u00a0 \u00a0 \u00a0 \u00a0 name=name,\u00a0 \u00a0 \u00a0 \u00a0 input_attachments=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.InputAttachment(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"my-input\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 input=input,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 output=live_stream_v1.types.Channel.Output(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 uri=output_uri,\u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 elementary_streams=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.ElementaryStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"es_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 video_stream=live_stream_v1.types.VideoStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h264=live_stream_v1.types.VideoStream.H264CodecSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 profile=\"high\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 width_pixels=1280,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 height_pixels=720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrate_bps=3000000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 frame_rate=30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.ElementaryStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"es_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 audio_stream=live_stream_v1.types.AudioStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 codec=\"aac\", channel_count=2, bitrate_bps=160000\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 mux_streams=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.MuxStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"mux_video\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 elementary_streams=[\"es_video\"],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_settings=live_stream_v1.types.SegmentSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_duration=duration.Duration(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds=2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.MuxStream(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 key=\"mux_audio\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 elementary_streams=[\"es_audio\"],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_settings=live_stream_v1.types.SegmentSettings(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_duration=duration.Duration(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds=2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 manifests=[\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 live_stream_v1.types.Manifest(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 file_name=\"manifest.m3u8\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 type_=\"HLS\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mux_streams=[\"mux_video\", \"mux_audio\"],\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max_segment_count=5,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 )\u00a0 \u00a0 operation = client.create_channel(\u00a0 \u00a0 \u00a0 \u00a0 parent=parent, channel=channel, channel_id=channel_id\u00a0 \u00a0 )\u00a0 \u00a0 response = operation.result(600)\u00a0 \u00a0 print(f\"Channel: {response.name}\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/create_channel.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Create a channel\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param channel_id [String] Your channel name (e.g. \"my-channel\")# @param input_id [String] Your input name (e.g. \"my-input\")# @param output_uri [String] Uri of the channel output folder in a Cloud Storage# \u00a0 \u00a0 bucket. (e.g. \"gs://my-bucket/my-output-folder/\";)#def create_channel project_id:, location:, channel_id:, input_id:, output_uri:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the parent.\u00a0 parent = client.location_path project: project_id, location: location\u00a0 # Build the resource name of the input.\u00a0 input_path = client.input_path project: project_id, location: location, input: input_id\u00a0 # Set the channel fields.\u00a0 new_channel = {\u00a0 \u00a0 input_attachments: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"my-input\",\u00a0 \u00a0 \u00a0 \u00a0 input: input_path\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ],\u00a0 \u00a0 output: {\u00a0 \u00a0 \u00a0 uri: output_uri\u00a0 \u00a0 },\u00a0 \u00a0 elementary_streams: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"es_video\",\u00a0 \u00a0 \u00a0 \u00a0 video_stream: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 h264: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 profile: \"high\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrate_bps: 3_000_000,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 frame_rate: 30,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 height_pixels: 720,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 width_pixels: 1280\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"es_audio\",\u00a0 \u00a0 \u00a0 \u00a0 audio_stream: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 codec: \"aac\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 channel_count: 2,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 bitrate_bps: 160_000\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ],\u00a0 \u00a0 mux_streams: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"mux_video\",\u00a0 \u00a0 \u00a0 \u00a0 elementary_streams: [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"es_video\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 segment_settings: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_duration: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 },\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 key: \"mux_audio\",\u00a0 \u00a0 \u00a0 \u00a0 elementary_streams: [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"es_audio\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 segment_settings: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 segment_duration: {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 seconds: 2\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ],\u00a0 \u00a0 manifests: [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 file_name: \"main.m3u8\",\u00a0 \u00a0 \u00a0 \u00a0 type: Google::Cloud::Video::LiveStream::V1::Manifest::ManifestType::HLS,\u00a0 \u00a0 \u00a0 \u00a0 mux_streams: [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"mux_video\", \"mux_audio\"\u00a0 \u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \u00a0 max_segment_count: 5\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 ]\u00a0 }\u00a0 operation = client.create_channel parent: parent, channel: new_channel, channel_id: channel_id\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print the channel name.\u00a0 puts \"Channel: #{operation.response.name}\"end\n```\n## Start the channel\nTo start a channel, use the [projects.locations.channels.start](/livestream/docs/reference/rest/v1/projects.locations.channels/start) method.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your channel is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the channel\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/operations/OPERATION_ID\",\n \"metadata\": {\n \"@type\": \"type.googleapis.com/google.cloud.video.livestream.v1.OperationMetadata\",\n \"createTime\": CREATE_TIME,\n \"target\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID\",\n \"verb\": \"start\",\n \"requestedCancellation\": false,\n \"apiVersion\": \"v1\"\n },\n \"done\": false\n}\n```\nThis command creates a long-running operation (LRO) that you can use to track the progress of your request. See\n [Manage long-running operations ](/livestream/docs/how-to/manage-long-running-operations) \nfor more information.\nTo learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API C# API reference documentation](/dotnet/docs/reference/Google.Cloud.Video.LiveStream.V1/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/dotnet-docs-samples/blob/HEAD/media/livestream/api/LiveStream.Samples/StartChannelAsync.cs) \n```\nusing Google.Cloud.Video.LiveStream.V1;using Google.LongRunning;using System.Threading.Tasks;public class StartChannelSample{\u00a0 \u00a0 public async Task StartChannelAsync(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0string projectId, string locationId, string channelId)\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 // Create the client.\u00a0 \u00a0 \u00a0 \u00a0 LivestreamServiceClient client = LivestreamServiceClient.Create();\u00a0 \u00a0 \u00a0 \u00a0 StartChannelRequest request = new StartChannelRequest\u00a0 \u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ChannelName = ChannelName.FromProjectLocationChannel(projectId, locationId, channelId)\u00a0 \u00a0 \u00a0 \u00a0 };\u00a0 \u00a0 \u00a0 \u00a0 // Make the request.\u00a0 \u00a0 \u00a0 \u00a0 Operation<ChannelOperationResponse, OperationMetadata> response = await client.StartChannelAsync(request);\u00a0 \u00a0 \u00a0 \u00a0 // Poll until the returned long-running operation is complete.\u00a0 \u00a0 \u00a0 \u00a0 await response.PollUntilCompletedAsync();\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Go API reference documentation](https://pkg.go.dev/cloud.google.com/go/video/livestream) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/golang-samples/blob/HEAD/media/livestream/start_channel.go) \n```\nimport (\u00a0 \u00a0 \u00a0 \u00a0 \"context\"\u00a0 \u00a0 \u00a0 \u00a0 \"fmt\"\u00a0 \u00a0 \u00a0 \u00a0 \"io\"\u00a0 \u00a0 \u00a0 \u00a0 livestream \"cloud.google.com/go/video/livestream/apiv1\"\u00a0 \u00a0 \u00a0 \u00a0 \"cloud.google.com/go/video/livestream/apiv1/livestreampb\")// startChannel starts a channel.func startChannel(w io.Writer, projectID, location, channelID string) error {\u00a0 \u00a0 \u00a0 \u00a0 // projectID := \"my-project-id\"\u00a0 \u00a0 \u00a0 \u00a0 // location := \"us-central1\"\u00a0 \u00a0 \u00a0 \u00a0 // channelID := \"my-channel-id\"\u00a0 \u00a0 \u00a0 \u00a0 ctx := context.Background()\u00a0 \u00a0 \u00a0 \u00a0 client, err := livestream.NewClient(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"NewClient: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 defer client.Close()\u00a0 \u00a0 \u00a0 \u00a0 req := &livestreampb.StartChannelRequest{\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name: fmt.Sprintf(\"projects/%s/locations/%s/channels/%s\", projectID, location, channelID),\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 op, err := client.StartChannel(ctx, req)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"StartChannel: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 _, err = op.Wait(ctx)\u00a0 \u00a0 \u00a0 \u00a0 if err != nil {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return fmt.Errorf(\"Wait: %w\", err)\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 fmt.Fprintf(w, \"Started channel\")\u00a0 \u00a0 \u00a0 \u00a0 return nil}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Java API reference documentation](/java/docs/reference/google-cloud-live-stream/latest/overview) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/java-docs-samples/blob/HEAD/media/livestream/src/main/java/com/example/livestream/StartChannel.java) \n```\nimport com.google.cloud.video.livestream.v1.ChannelName;import com.google.cloud.video.livestream.v1.LivestreamServiceClient;import java.io.IOException;import java.util.concurrent.ExecutionException;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;public class StartChannel {\u00a0 public static void main(String[] args) throws Exception {\u00a0 \u00a0 // TODO(developer): Replace these variables before running the sample.\u00a0 \u00a0 String projectId = \"my-project-id\";\u00a0 \u00a0 String location = \"us-central1\";\u00a0 \u00a0 String channelId = \"my-channel-id\";\u00a0 \u00a0 startChannel(projectId, location, channelId);\u00a0 }\u00a0 public static void startChannel(String projectId, String location, String channelId)\u00a0 \u00a0 \u00a0 throws InterruptedException, ExecutionException, TimeoutException, IOException {\u00a0 \u00a0 // Initialize client that will be used to send requests. This client only needs to be created\u00a0 \u00a0 // once, and can be reused for multiple requests. After completing all of your requests, call\u00a0 \u00a0 // the \"close\" method on the client to safely clean up any remaining background resources.\u00a0 \u00a0 LivestreamServiceClient livestreamServiceClient = LivestreamServiceClient.create();\u00a0 \u00a0 ChannelName name = ChannelName.of(projectId, location, channelId);\u00a0 \u00a0 // First API call in a project can take up to 15 minutes.\u00a0 \u00a0 livestreamServiceClient.startChannelAsync(name).get(15, TimeUnit.MINUTES);\u00a0 \u00a0 System.out.println(\"Started channel\");\u00a0 \u00a0 livestreamServiceClient.close();\u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Node.js API reference documentation](https://cloud.google.com/nodejs/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/HEAD/media/livestream/startChannel.js) \n```\n/**\u00a0* TODO(developer): Uncomment these variables before running the sample.\u00a0*/// projectId = 'my-project-id';// location = 'us-central1';// channelId = 'my-channel';// Imports the Livestream libraryconst {LivestreamServiceClient} = require('@google-cloud/livestream').v1;// Instantiates a clientconst livestreamServiceClient = new LivestreamServiceClient();async function startChannel() {\u00a0 // Construct request\u00a0 const request = {\u00a0 \u00a0 name: livestreamServiceClient.channelPath(projectId, location, channelId),\u00a0 };\u00a0 const [operation] = await livestreamServiceClient.startChannel(request);\u00a0 await operation.promise();\u00a0 console.log('Started channel');}startChannel();\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API PHP API reference documentation](https://googleapis.github.io/google-cloud-php/#/docs/google-cloud/latest/videolivestream/readme) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/php-docs-samples/blob/HEAD/media/livestream/src/start_channel.php) \n```\nuse Google\\Cloud\\Video\\LiveStream\\V1\\Client\\LivestreamServiceClient;use Google\\Cloud\\Video\\LiveStream\\V1\\StartChannelRequest;/**\u00a0* Starts a channel.\u00a0*\u00a0* @param string \u00a0$callingProjectId \u00a0 The project ID to run the API call under\u00a0* @param string \u00a0$location \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The location of the channel\u00a0* @param string \u00a0$channelId \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The ID of the channel\u00a0*/function start_channel(\u00a0 \u00a0 string $callingProjectId,\u00a0 \u00a0 string $location,\u00a0 \u00a0 string $channelId): void {\u00a0 \u00a0 // Instantiate a client.\u00a0 \u00a0 $livestreamClient = new LivestreamServiceClient();\u00a0 \u00a0 $formattedName = $livestreamClient->channelName($callingProjectId, $location, $channelId);\u00a0 \u00a0 // Run the channel start request. The response is a long-running operation ID.\u00a0 \u00a0 $request = (new StartChannelRequest())\u00a0 \u00a0 \u00a0 \u00a0 ->setName($formattedName);\u00a0 \u00a0 $operationResponse = $livestreamClient->startChannel($request);\u00a0 \u00a0 $operationResponse->pollUntilComplete();\u00a0 \u00a0 if ($operationResponse->operationSucceeded()) {\u00a0 \u00a0 \u00a0 \u00a0 // Print results\u00a0 \u00a0 \u00a0 \u00a0 printf('Started channel' . PHP_EOL);\u00a0 \u00a0 } else {\u00a0 \u00a0 \u00a0 \u00a0 $error = $operationResponse->getError();\u00a0 \u00a0 \u00a0 \u00a0 // handleError($error)\u00a0 \u00a0 }}\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Python API reference documentation](/python/docs/reference/livestream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/GoogleCloudPlatform/python-docs-samples/blob/HEAD/video/live-stream/start_channel.py) \n```\nimport argparsefrom google.cloud.video import live_stream_v1from google.cloud.video.live_stream_v1.services.livestream_service import (\u00a0 \u00a0 LivestreamServiceClient,)def start_channel(\u00a0 \u00a0 project_id: str, location: str, channel_id: str) -> live_stream_v1.types.ChannelOperationResponse:\u00a0 \u00a0 \"\"\"Starts a channel.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 project_id: The GCP project ID.\u00a0 \u00a0 \u00a0 \u00a0 location: The location of the channel.\u00a0 \u00a0 \u00a0 \u00a0 channel_id: The user-defined channel ID.\"\"\"\u00a0 \u00a0 client = LivestreamServiceClient()\u00a0 \u00a0 name = f\"projects/{project_id}/locations/{location}/channels/{channel_id}\"\u00a0 \u00a0 operation = client.start_channel(name=name)\u00a0 \u00a0 response = operation.result(900)\u00a0 \u00a0 print(\"Started channel\")\u00a0 \u00a0 return response\n```To learn how to install and use the client library for Live Stream API, see [Live Stream API client libraries](/livestream/docs/reference/libraries) .       For more information, see the [Live Stream API Ruby API reference documentation](/ruby/docs/reference/google-cloud-video-live_stream/latest) .\nTo authenticate to Live Stream API, set up Application Default Credentials.  For more information, see [Set up authentication for a local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\n [View on GitHub](https://github.com/googleapis/google-cloud-ruby/blob/HEAD/google-cloud-video-live_stream/samples/start_channel.rb) \n```\nrequire \"google/cloud/video/live_stream\"\n### Starts a channel\n## @param project_id [String] Your Google Cloud project (e.g. \"my-project\")# @param location [String] The location (e.g. \"us-central1\")# @param channel_id [String] Your channel name (e.g. \"my-channel\")#def start_channel project_id:, location:, channel_id:\u00a0 # Create a Live Stream client.\u00a0 client = Google::Cloud::Video::LiveStream.livestream_service\u00a0 # Build the resource name of the channel.\u00a0 name = client.channel_path project: project_id, location: location, channel: channel_id\u00a0 # Start the channel.\u00a0 operation = client.start_channel name: name\u00a0 # The returned object is of type Gapic::Operation. You can use this\u00a0 # object to check the status of an operation, cancel it, or wait\u00a0 # for results. Here is how to block until completion:\u00a0 operation.wait_until_done!\u00a0 # Print a success message.\u00a0 puts \"Started channel\"end\n```\n## Send the input stream\nIf you are using `ffmpeg` to send a test stream, open a new terminal window. Run the following command, using from the [Get input endpoint details](#get-input-endpoint-details) section:\n```\nffmpeg -re -f lavfi -i \"testsrc=size=1280x720 [out0]; sine=frequency=500 [out1]\" \\\u00a0 -acodec aac -vcodec h264 -f flv INPUT_STREAM_URI\n```\n## Play the live stream\n**Note:** If you want to create a CDN for the media outputs, see the [Media CDN quickstart](/media-cdn/docs/quickstart) .\nTo play the generated media file in [Shaka Player](https://shaka-player-demo.appspot.com/demo/) , complete the following steps:\n- [Make the Cloud Storage bucket you created publicly readable](/storage/docs/access-control/making-data-public#buckets) .\n- To [enable cross-origin resourcesharing (CORS) on a Cloud Storage bucket](/storage/docs/using-cors#configure-cors-bucket) , do the following:- Create a JSON file that contains the following:```\n[ {\n \"origin\": [\"https://shaka-player-demo.appspot.com/\"],\n \"responseHeader\": [\"Content-Type\", \"Range\"],\n \"method\": [\"GET\", \"HEAD\"],\n \"maxAgeSeconds\": 3600\n }\n]\n```\n- Run the following command after replacingwith  the name of the JSON file you created in the previous step:```\ngsutil cors set JSON_FILE_NAME.json gs://BUCKET_NAME\n```\n- In the Cloud Storage bucket, find the generated file. Click **Copy URL** in the file's **Public access** column.\n- Navigate to [Shaka Player](https://shaka-player-demo.appspot.com/demo/) , an online live stream player.\n- Click **Custom Content** in the top navigation bar.\n- Click the **+** button.\n- Paste the public URL of the file into the **Manifest URL** box.\n- Type a name in the **Name** box.\n- Click **Save** .\n- Click **Play** .\nYou should see a test pattern play as the live stream.\n## Create a channel event\nTo create a channel event, use the [projects.locations.channels.events.create](/livestream/docs/reference/rest/v1/projects.locations.channels.events/create) method. The following sample inserts the slate as a channel event in the live stream.\nIf the slate asset is not ready (by two seconds after event execution start), then a black screen displays until the slate asset is ready.\nBefore using any of the request data, make the following replacements:- ``: your Google Cloud project number; this is located in the **Project number** field on the [IAM Settings](https://console.cloud.google.com/iam-admin/settings) page\n- ``: the location where your channel is  located; use one of the [supported regions](/livestream/docs/locations) \n- ``: a user-defined identifier for the channel\n- ``: a user-defined identifier for the event\n- ``: the user-defined identifier for the slate asset\nTo send your request, expand one of these options:You should receive a JSON response similar to the following:\n```\n{\n \"name\": \"projects/PROJECT_NUMBER/locations/LOCATION/channels/CHANNEL_ID/events/EVENT_ID\",\n \"createTime\": CREATE_TIME,\n \"updateTime\": UPDATE_TIME,\n \"slate\": {\n \"duration\": \"60s\",\n \"asset\": \"projects/PROJECT_NUMBER/locations/LOCATION/assets/ASSET_ID\"\n },\n \"executeNow\": \"true\",\n \"state\": \"PENDING\"\n}\n```\nCheck the live stream to see that the slate is inserted. You can also check that the event has the `state` set to `SUCCEEDED` (see [Get channel event details](/livestream/docs/how-to/create-channel-events#get_channel_event_details) ).\nTo create a long running slate, remove the `duration` field from the `slate` object. To remove a long running slate, create a [return to program channel event](/livestream/docs/how-to/create-channel-events#return-to-program-event) .", "guide": "Live Stream API"}