{"title": "Apigee - Data Mapping task", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Data Mapping task\n**Announcement:** Application Integration is now available for your Google Cloud project. You can now use both Apigee Integration and Application Integration within the same Google Cloud project. [Learn more](/apigee/docs/api-platform/integration/using-application-integration)\nThe **Data Mapping** task lets you perform variable assignments in your integration, get and set properties of json objects, and apply nested transform functions to values. The variables can be integration variables or task variables.\nFor example, you can assign values from an integration variable `X` to a task variable `Y` or from a task variable `Y` to an integration variable `X` . For more information about variables in Apigee Integration, see [ Using variables in Apigee Integration](/apigee/docs/api-platform/integration/variables-overview) .\n", "content": "## Configure the Data Mapping task\nTo configure a **Data Mapping** task, perform the following steps:\n- In the [Apigee UI](https://apigee.google.com) , select your.\n- Click **Develop > Integrations** .\n- Select an existing integration or create a new integration by clicking **Create Integration** .If you are creating a new integration:- Enter a name and description in the **Create Integration** dialog.\n- Select a **Region** for the integration from the list of supported regions.\n- Click **Create** .\nThis opens the integration in the .\n- In thenavigation bar, click **+Add a task/trigger > Tasks** to view the list of available tasks.\n- Click and place the **Data Mapping** element in the integration editor.\n- Click the **Data Mapping** element on the designer to view the **Data Mapping** task  configuration pane.\n- Click **Open Data Mapping Editor** to view the default values of the task and to add a new mapping.  For detailed steps about adding a mapping, see [Add a mapping](#add-map) .For more information about the data mapping editor layout, see [ Data mapping overview](/apigee/docs/api-platform/integration/data-mapping-overview) .## Add a mapping\nTo add a mapping, perform the following steps:\n- In the Data Mapping task configuration pane, click **Open Data Mapping Editor** .\n- Configure the mapping **Input** : **Input** : Source of the data mapping input. Source can be a literal value, a base function, or an input variable, with mapping functions.- Drag a variable or its subfield from the **Variables** list into therow. To view the available subfields of a variable, clickexpand_more **(Expand)** next to that variable in the **Variables** list.\n- Alternatively, In therow, click **Variable or Value** and do the following:- Select **Variable** to search and use an existing variable.    To create a new variable, click **+ Add new variable** , and enter   the name and data type of the new variable.\n- Select **Value** to enter a literal value of type`string`,`integer`,`double`,    or`Boolean`).\n- Select **Function** to search and use a base function.A base function is used to retrieve or generate values during the execution of an integration. For example, generating a random UUID or retrieving the current integration region. For information about the supported base functions, see [ Supported base functions](#basefunction) .\n- Click **Save** .\n- Click **+ (Add a function)** on any input variable, value, or base function in therow to add a mapping function from the list of available mapping functions. A mapping function can have one or more parameters. Each parameter can further have a value, a variable, or a base function followed by a chain of mapping functions.- To add a nested function, click **+ (Add a function)** next to the parameter of the function. Similarly, to remove or delete the most recently added function, click **- (Delete previous function)** .\n- To add, remove, or change a function in-between a mapping expression, click on a function and select **Add Function** , **Remove Function** , or **Change Function** respectively from the drop-down menu.\n- To know more about mapping functions, see [mapping functions](/apigee/docs/api-platform/integration/data-mapping-overview#mapping-functions) .\n- For information about the supported mapping functions, see [ Supported data types and mapping functions](#datatype_and_mappingfunction) .\n- To remove a variable inside a mapping expression, clickcancel **(Remove)** next to the variable row.\n- To remove the entirerow, clickclear **(Clear)** on the row.\n- Configure the mapping **Output** : **Output** : Target variable for the data mapping output. Target variables can be used for mapping in subsequent input rows.- Drag a variable from the **Variables** list into therow. If the variable is not   available, then click **create a new one** to configure the name and data type of the new variable. Optionally,   you can click the output variable and select whether to use that variable as an output of the integration, or as an input to another integration.\n- To remove the output variable, clickclear **(Clear)** .\n- (Optional) To delete a mapping row, clickdelete **(Delete this mapping)** .\n- Close the **Data Mapping Editor** once your mapping is complete. Any changes will be autosaved.\nThe completed data mapping is available to view from the **Data Mapping** task configuration pane, as shown in the following image:\n## Supported data types and mapping functions\nApigee Integration supports the following data types for variables in the **Data Mapping** task:\n- String and String array\n- Integer and Integer array\n- Double and Double array\n- Boolean and Boolean array\n- JSON\n| Data type  | Supported mapping functions                                                          |\n|:--------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Boolean  | AND, EQUALS, NAND, NOR, NOT, OR, TO_JSON, TO_STRING, XNOR, XOR                                               |\n| Boolean array | APPEND, APPEND_ALL, CONTAINS, FILTER, FOR_EACH, GET, REMOVE, REMOVE_AT, SET, SIZE, TO_JSON, TO_SET                                     |\n| Double  | ADD, DIVIDE, CEIL, EQUALS, EXPONENT, GREATER_THAN, GREATER_THAN_EQUAL_TO, FLOOR, LESS_THAN, LESS_THAN_EQUAL_TO, MOD, MULTIPLY, ROUND, SUBTRACT, TO_JSON, TO_STRING                    |\n| Double array | APPEND, APPEND_ALL, AVG, CONTAINS, FILTER, FOR_EACH, GET, MAX, MIN, REMOVE, REMOVE_AT, SET, SIZE, SUM, TO_JSON, TO_SET                               |\n| Integer  | ADD, DIVIDE, EPOCH_TO_HUMAN_READABLE_TIME, EQUALS, EXPONENT, GREATER_THAN, GREATER_THAN_EQUAL_TO, LESS_THAN, LESS_THAN_EQUAL_TO, MOD, MULTIPLY, SUBTRACT, TO_DOUBLE, TO_JSON, TO_STRING               |\n| Integer array | APPEND, APPEND_ALL, AVG, CONTAINS, FILTER, FOR_EACH, GET, MAX, MIN, REMOVE, REMOVE_AT, SET, SIZE, SUM, TO_JSON, TO_SET                               |\n| JSON   | APPEND_ELEMENT, FLATTEN, FILTER, FOR_EACH, GET_ELEMENT, GET_PROPERTY, MERGE, REMOVE_PROPERTY, RESOLVE_TEMPLATE, SET_PROPERTY, SIZE, TO_BOOLEAN, TO_BOOLEAN_ARRAY, TO_DOUBLE, TO_DOUBLE_ARRAY, TO_INT, TO_INT_ARRAY, TO_STRING, TO_STRING_ARRAY |\n| String  | CONCAT, CONTAINS, DECODE_BASE64_STRING, EQUALS, EQUALS_IGNORE_CASE, LENGTH, REPLACE_ALL, RESOLVE_TEMPLATE, SPLIT, SUBSTRING, TO_BASE_64, TO_BOOLEAN, TO_DOUBLE, TO_INT, TO_JSON, TO_LOWERCASE, TO_UPPERCASE          |\n| String array | APPEND, APPEND_ALL, CONTAINS, FILTER, FOR_EACH, GET, REMOVE, REMOVE_AT, SET, SIZE, TO_JSON, TO_SET                                     |\n[Data Mapping Functions Reference](/apigee/docs/api-platform/integration/data-mapping-functions-reference#mapping-funcs)\n## Supported base functions\n| Data type  | Supported base functions                   |\n|:--------------|:--------------------------------------------------------------------------------------------------|\n| Integer  | NOW_IN_MILLIS                      |\n| Integer array | INT_LIST                       |\n| String  | GENERATE_UUID, GET_EXECUTION_ID, GET_INTEGRATION_NAME, GET_INTEGRATION_REGION, GET_PROJECT_ID |\n[Data Mapping Functions Reference](/apigee/docs/api-platform/integration/data-mapping-functions-reference#base-funcs)\n## Best practices\nUsing the **Data Mapping** task can be a powerful way to transform and pass key variables to various tasks in your integration. Here are a few tips to keep in mind as you build your integration:\n- Mappings are run in sequence from top to bottom. That is, if input variable`A`is mapped to an output variable`B`in the first row, the variable`B`is available for mapping in the subsequent rows.\n- In each row, the data type of therow must match the data type of therow.  To cast between types, use transformation functions such as`TO_STRING`and`TO_INT`.\n- There are no limitations on the length of transformation chaining. However, debugging large chained transformations  can be difficult. We recommend keeping input transformations readable and splitting complex transformations into multiple mappings.\n- If a mapping requires a fallback value, set a fallback value for the mapping. If you do not provide a fallback value, the  mapping returns an error when the input value or transformation returns`null`.\n- When deleting a variable, make sure to delete any mapping that contains it.\nFor information about the usage limits that apply to the **Data Mapping** task, see [ Usage limits](/apigee/docs/api-platform/integration/system-limits#usage-limits) .\n## Considerations\nFor JSON variables, based on a JSON schema, Apigee Integration interprets the child property of the variable as a JSON type in the following cases:\n- If the child property's type specifies null. For example:```\n{\u00a0 \"properties\": {\u00a0 \u00a0 \"PersonID\": {\u00a0 \u00a0 \u00a0 \"type\": [\u00a0 \u00a0 \u00a0 \u00a0 \"double\",\u00a0 \u00a0 \u00a0 \u00a0 \"null\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"readOnly\": false\u00a0 \u00a0 }\u00a0 }}\n```\n- If the child property's type specifies multiple data types. For example:```\n{\u00a0 \"properties\": {\u00a0 \u00a0 \"PersonID\": {\u00a0 \u00a0 \u00a0 \"type\": [\u00a0 \u00a0 \u00a0 \u00a0 \"integer\",\u00a0 \u00a0 \u00a0 \u00a0 \"string\",\u00a0 \u00a0 \u00a0 \u00a0 \"number\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"readOnly\": false\u00a0 \u00a0 }\u00a0 }}\n```\nIn these cases, using the data mapping functions, you must explicitly convert the child variables to the desired type.\nThe following examples illustrate the various types of property declarations and show how to use the data mapping functions to get the desired type:\n```\n{\u00a0 \"type\": \"object\",\u00a0 \"properties\": {\u00a0 \u00a0 \"dbIntegers\": {\u00a0 \u00a0 \u00a0 \"type\": \"array\",\u00a0 \u00a0 \u00a0 \"items\": {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": [\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"integer\",\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"null\"\u00a0 \u00a0 \u00a0 \u00a0 ]\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 },\u00a0 \u00a0 \"dbBooleans\": {\u00a0 \u00a0 \u00a0 \"type\": [\u00a0 \u00a0 \u00a0 \u00a0 \"array\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"items\": {\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"boolean\"\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 }\u00a0 }}\n```\nApigee Integration interprets\n`dbIntegers`\nas a JSON type, and\n`dbBooleans`\nas a BOOLEAN_ARRAY type.\nTo convert `dbIntegers` use:\n```\ndbIntegers.TO_INT_ARRAY()\n``````\n{\u00a0 \"type\": \"object\",\u00a0 \"properties\": {\u00a0 \u00a0 \"dbId\": {\u00a0 \u00a0 \u00a0 \"type\": [\u00a0 \u00a0 \u00a0 \u00a0 \"number\",\u00a0 \u00a0 \u00a0 \u00a0 \"null\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"readOnly\": false\u00a0 \u00a0 },\u00a0 \u00a0 \"dbStatus\": {\u00a0 \u00a0 \u00a0 \"type\": [\u00a0 \u00a0 \u00a0 \u00a0 \"boolean\",\u00a0 \u00a0 \u00a0 \u00a0 \"null\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"readOnly\": false\u00a0 \u00a0 }\u00a0 }}\n```\nApigee Integration recognises both\n`dbId`\nand\n`dbStatus`\nas JSON types, but\n`dbId`\nis a parameter that can take a single double value or a null value, and\n`dbStatus`\nis a parameter that can take a single boolean value or a null value.\nTo convert `dbId` and `dbStatus` use:\n```\ndbId.TO_DOUBLE()\n```\n```\ndbStatus.TO_BOOLEAN()\n``````\n{\u00a0 \"type\": \"object\",\u00a0 \"properties\": {\u00a0 \u00a0 \"dbString\": {\u00a0 \u00a0 \u00a0 \"type\": [\u00a0 \u00a0 \u00a0 \u00a0 \"string\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"readOnly\": false\u00a0 \u00a0 }\u00a0 }}\n```\nApigee Integration recognises\n`dbString`\nas a string type.\n## Error handling strategy\nAn error handling strategy for a task specifies the action to take if the task fails due to a [temporary error](/apigee/docs/api-platform/integration/error-handling) . For information about how to use an error handling strategy, and to know about the different types of error handling strategies, see [Error handling strategies](/apigee/docs/api-platform/integration/error-handling-strategy) .", "guide": "Apigee"}