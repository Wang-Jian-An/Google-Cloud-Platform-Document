{"title": "Cloud Architecture Center - Deploying FortiGate-VM Next Generation Firewall using Terraform", "url": "https://cloud.google.com/architecture/reference-patterns/overview", "abstract": "# Cloud Architecture Center - Deploying FortiGate-VM Next Generation Firewall using Terraform\nLast reviewed 2023-10-20 UTC\nBy Bartek Moczulski, Consulting System Engineer, [Fortinet Inc](https://www.fortinet.com) .\nThis tutorial shows you how to use [Terraform](https://www.terraform.io/) to deploy a [FortiGate](https://www.fortinet.com/products/private-cloud-security/fortigate-virtual-appliances) reference architecture to help protect your applications against cyberattacks. FortiGate is a next-generation firewall (NGFW) with software-defined wide area network (SD-WAN) capabilities deployed as a network virtual appliance in Compute Engine. When deployed, FortiGate can help secure applications by inspecting all inbound traffic originating from the internet and outbound and internal traffic between application tiers. You can use the same FortiGate cluster as a secure web gateway to protect outbound traffic originating from your workloads.\nIn this tutorial, you create several networks and deploy a high-availability (HA) FortiGate cluster. You also create a two-tier web application and configure FortiGate and Google Cloud to help enable secure inbound traffic, outbound traffic, and internal traffic.", "content": "## ArchitectureThe following diagram shows that the architecture deployed in this tutorial consists of an HA cluster of FortiGate NGFWs that uses a pair of external and internal load balancers to direct traffic to the active FortiGate VM instance. A two-tier web application is deployed behind the NGFWs. Connections from the internet to the application frontend (Tier 1) pass through the active FortiGate instance, as indicated by the red path. The NGFWs also inspect connections from Tier1 to Tier2, as indicated by the purple path.\nFor more information about testing NGFW connectivity and testing threat prevention, see [Verify the FortiGate NGFW deployment](#verify_the_fortigate_ngfw_deployment) .## Objectives\n- Prepare for the deployment.\n- Clone the Terraform modules.\n- Deploy an HA cluster of FortiGate VMs into new [Virtual Private Cloud (VPC)](/vpc/docs) networks.\n- Verify that the appliances deployed successfully.\n- Create sample workloads and help secure them using FortiGate.\nThis tutorial is split into two separate deployments.\nIn the first deployment, you use the `day0` Terraform module to create a basic FortiGate deployment, form an HA cluster, and prepare load balancer resources.\nIn the second deployment, you use an example configuration in the `day1` Terraform module to create a simple two-tier web application. You also enable secure connectivity to, from, and within the application using the FortiGate NGFW deployed earlier.## CostsFortiGate VM for Google Cloud supports both on-demand pay-as-you-go (PAYG) licensing and bring-your-own-license (BYOL) models. This tutorial uses the BYOL model. For more information, see [FortiGate support](https://www.fortinet.com/support/contact) .\n \nIn this document, you use the following billable components of Google Cloud:- [Compute Engine](/compute/all-pricing) \n- [Cloud Load Balancing](/vpc/network-pricing#lb) \n- [Cloud Storage](/storage/pricing) \n- [Cloud NAT](/nat/pricing) To generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . \nFor more information about FortiGate licensing in the public cloud, see the [Fortinet article on order types](https://docs.fortinet.com/document/fortigate-public-cloud/7.0.0/gcp-administration-guide/451056/order-types) .\nIf you're a new Google Cloud user, you might be eligible for a [free trial](/free-trial) .## Before you begin\n- In the Google Cloud console, on the project selector page,   select or [create a Google Cloud project](/resource-manager/docs/creating-managing-projects) . [Go to project selector](https://console.cloud.google.com/projectselector2/home/dashboard) \n- [Make sure that billing is enabled for your Google Cloud project](/billing/docs/how-to/verify-billing-enabled#console) .\n- Enable the Compute Engine API. [Enable the API](https://console.cloud.google.com/flows/enableapi?apiid=compute.googleapis.com) Upload FortiGate license files ( `.lic` ) to a local directory, like `lic1.lic` and `lic2.lic` . These files are referenced when deploying instances for license provisioning. To obtain your production-ready or evaluation licenses, contact your local Fortinet reseller.- Ensure both`lic1.lic`and`lic2.lic`files are uploaded to the`Day0`directory before you run your Terraform plan. If you prefer to use the PAYG licensing model, consult the documentation on GitHub regarding the required code modifications.\n- (Optional) Create a dedicated [custom role](/iam/docs/understanding-custom-roles) and a [service account](/iam/docs/service-accounts) for FortiGate.This action isn't obligatory, although it's highly recommended that you create these roles. If the `fortigatesdn-ro` service account isn't found, the template attempts to detect it and falls back to the Compute Engine default service account. For more information, see the [Create a custom role and a service account](#create_a_custom_role_and_a_service_account) section.You must have the Compute Admin privileges to the Google Cloud project to deploy this tutorial.\n **Note:** Avoid using multiple copies of the same solution into the same project. Using duplicate resource names causes conflicts.\nThis tutorial consists of Terraform templates that fully automate the deployment of all resources. The necessary files are available in the [Fortinet GitHub repository](https://github.com/fortinet/fortigate-tutorial-gcp) :- In Cloud Shell, clone the GitHub repository:```\ngit clone https://github.com/fortinet/fortigate-tutorial-gcp.git\n```You can follow this tutorial using [Cloud Shell](/shell) , which comes preinstalled with the gcloud CLI, Git, Terraform, and text editors. If you use Cloud Shell, you don't need to install anything on your workstation.\n- In the Google Cloud console, activate Cloud Shell. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) \nA Cloud Shell session opens inside a new frame at the bottom of  the Google Cloud console and displays a command-line prompt.## Create a custom role and a service accountFortiGate instances can query Google API Client Libraries to resolve dynamic addresses in a firewall policy. This popular functionality lets you build firewall policies based on network tags and other metadata rather than on static IP addresses. In this section, you create an IAM role and a service account with the minimum required privilege set, and a binding policy.\nAfter you create roles, they can't be deleted and recreated.- In Cloud Shell, create a Fortinet IAM role:```\nGCP_PROJECT_ID=$(gcloud config get-value project)gcloud iam roles create FortigateSdnReader --project=$Google Cloud_PROJECT_ID \\\u00a0 --title=\"FortiGate SDN Connector Role (read-only)\" \\\u00a0 --permissions=\"compute.zones.list,compute.instances.list,container.clusters.list,container.nodes.list,container.pods.list,container.services.list\"\n```\n- Create a Fortinet service account:```\nGCP_PROJECT_ID=$(gcloud config get-value project)gcloud iam roles create FortigateSdnReader --project=$GCP_PROJECT_ID \\\u00a0 --title=\"FortiGate SDN Connector Role (read-only)\" \\\u00a0 --permissions=\"compute.zones.list,compute.instances.list,container.clusters.list,container.nodes.list,container.pods.list,container.services.list\"gcloud iam service-accounts create fortigatesdn-ro \\\u00a0 --display-name=\"FortiGate SDN Connector\"\n```\n- Create a binding policy:```\ngcloud projects add-iam-policy-binding $GCP_PROJECT_ID \\\u00a0 --member=\"serviceAccount:fortigatesdn-ro@$GCP_PROJECT_ID.iam.gserviceaccount.com\" \\\u00a0 --role=\"projects/$GCP_PROJECT_ID/roles/FortigateSdnReader\"\n```\n## Initialize TerraformIn this section, you modify the files in the `Day0` directory in the [Terraform GitHub repository](https://github.com/fortinet/fortigate-tutorial-gcp/tree/main/terraform/day0) :\nBefore you begin, find the public IP address of your computer by searching for [My IP address](https://www.google.com/search?q=my+ip+address) .- In Cloud Shell, update the `terraform.tfvars` file with your Google Cloud project ID and the `us-central1` region:```\nGCP_PROJECT = PROJECT_ID\nGCE_REGION = us-central1\nPrefix = fgt\n```\n- Add your public IP address to the `admin_acl` list in the `main.tf` file:```\nmodule \"fortigates\" {\u00a0 source \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= \"../modules/fgcp-ha-ap-lb\"\u00a0 region \u00a0 \u00a0 \u00a0 \u00a0 \u00a0= var.GCE_REGION\u00a0 service_account = data.google_service_account.fgt.email != null ? data.google_service_account.fgt.email : \"\"\u00a0 admin_acl \u00a0 \u00a0 \u00a0 = [\"IP-ADDRESS\", \"${data.http.my_ip.body}/32\"]\u00a0 api_acl \u00a0 \u00a0 \u00a0 \u00a0 = [\"${data.http.my_ip.body}/32\"]\n```This template restricts access for the administrative interface and FortiGate API to the IP address that you run the template from.\n- Initialize Terraform:```\nterraform initterraform plan -out tf.plan\n## verify the list of resources that will be created before moving to the next step.terraform apply tf.plan\n```\n- To connect to the primary FortiGate instance, use `ssh` with the default user ID: `admin` .The default password and primary IP address are visible in the Terraform output. When you connect for the first time, you must change the admin password.\n- Verify the status of the provisioning by checking the output of the following command:```\nget system ha status\n```The output should resemble the data in the following screenshot: At the end of the output, you should see two instances: `Primary` and `Secondary` . This output confirms that both instances were properly licensed and successfully formed an HA cluster. **Note:** The secondary instance might initially show up as `out-of-sync` . Further deployment and configuration steps can continue regardless.\nThis section described the minimal deployment of a FortiGate cluster. In the next section, you add additional functionality such as routes, firewall policies, and peered VPCs.## Deploy FortiGate NGFW workloadsIn this section, you update the files in the `Day1` directory of the [GitHub repository](https://github.com/fortinet/fortigate-tutorial-gcp/tree/main/terraform/day1) to deploy workloads with a new public IP address. You also update the configuration files of the FortiGate NGFW.\nThe `Day1` directory contains the following files:- `day0-import.tf`: Imports data from the`day0`deployment to identify FortiGate instances and their API key. It also indicates where the Terraform state file is pulled from.\n- `workloads.tf`: Creates a proxy and web servers into new Tier 1 and Tier 2 VPC networks.\n- `main.tf`: Connects Tier 1 and Tier 2 VPC networks with internal VPC of the FortiGate cluster. It also enables inbound and outbound connectivity and adds Tier 1 to the Tier 2 east-west firewall policy.\nUsing the `-parallelism=1` Terraform option in the code sample helps reduce or remove concurrency issues related to [Google Cloud peering](/vpc/docs/vpc-peering) and routing operations for multiple VPC networks in a single Terraform deployment.- In Cloud Shell, access the `Day1` directory:```\ncd ../day1\n```\n- To deploy a sample web application and configure FortiGate to forward connections to it, run the following commands:```\nterraform initterraform plan -out day1.planterraform apply day1.plan -parallelism=1\n```The following screenshot shows a `route operation in progress` error. An error like this can occur if you don't use the `-parallelism` flag. Without this flag, you might run into concurrency issues. To recover from this error, run the `terraform apply` command again. Terraform automatically verifies which steps failed and adds the missing resources.\n## Verify the FortiGate NGFW deploymentAt this point in the tutorial, you've deployed a multi-tier architecture with inbound, outbound, and internal connectivity, all secured using FortiGate. In this section, you verify your deployment of the FortiGate NGFW. You also attempt to upload a harmless virus file to ensure that the firewall is operating. To connect to the web server over FortiGate, check the public IP address of the external load balancer in Terraform outputs. Connect to it using your web browser.\nWait a minute or two for the proxy and web server provisioning to finish before attempting the following verification steps:- In Cloud Shell, copy the public IP address of the external load balancer from the`public_ip`output of the`terraform apply`command.\n- Launch a web browser.\n- Connect to the public IP address of the load balancer:```\nhttp://Public IP address of the load balancer\n```You should see the default [Nginx welcome page](https://www.nginx.com/) . \n- To download a harmless [test virus file from the European Institute for Computer Anti-Virus Research](https://www.eicar.com/download-anti-malware-testfile/) , and to verify that FortiGate NGFW threat inspection is working, add `/eicar.com` to the IP address you entered in the previous step. \nTo see more details about the inspected network traffic:- In the web browser, enter the public IP address of the first FortiGate instance (the same IP address you used earlier for SSH connections) into the address bar.\n- Connect to the FortiGate web console using a web browser. The HTTPS console is available on the standard port of 443 by default.\n- Skip the following optional setup steps:- Dashboard configuration\n- Firmware updates\n- Initial welcome video\n- Select **Log & Report > Forward Traffic** from the FortiGate web console.A list of all the connections attempted through the FortiGate firewall appears. You should be able to identify the following:- Successful connection from your own IP address to the web server followed by a successful internal connection.\n- Multiple outbound connections with various applications detected.\n- Another internal connection between`10.0.0.5`and`10.1.0.5`that is blocked because of UTM policy. This action proves that the east-west threat inspection is working correctly.\n- To reveal details of the detected threat, double-click on the blocked connection in the **Result** column. A details page appears.\n- Select **Security** . **Security** appears in **Log details** .\n **Note:** By default, FortiGate policy doesn't log all connections. To help you learn, the tutorial intentionally added more verbosity to the logging files.## Clean upTo avoid incurring charges to your Google Cloud account for the resources used in this   tutorial, either delete the project that contains the resources, or keep the project and   delete the individual resources.- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.\n### Delete the individual resourcesTo avoid incurring further charges, delete the individual resources that you use in this tutorial:Go to the `Day1` directory from which you deployed the solution and run the following command:\n```\n\u00a0 \u00a0terraform destroy\n```\nConfirm you want to delete the resources.Go to the `Day0` directory and run the following command:\n```\n\u00a0 \u00a0terraform destroy\n```\nConfirm you want to delete the resources.\n **Note:** If your public IP address changed after you reinitialized Cloud Shell, you might see the FortiOS provider error.\nTo mitigate the FortiOS provider error, you have to update the API ACL:- Check the public IP address of your Cloud Shell instance:```\ncurl https://api.ipify.org\n```\n- Enable `connecting to serial ports` in the primary FortiGate ( `fgt-vm1-us-central1` ) VM instance settings using the Google Cloud console.\n- To connect to the FortiGate administrative interface using the serial console, click **Connect to serial console** .\n- Issue the following commands in the FortiGate CLI, replacing with Cloud Shell public IP address:```\n\u00a0 config system api-user\u00a0 \u00a0 edit terraform\u00a0 \u00a0 \u00a0 config trusthost\u00a0 \u00a0 \u00a0 \u00a0 edit 0\u00a0 \u00a0 \u00a0 \u00a0 set ipv4-trusthost IP_ADDRESS/32\u00a0 \u00a0 \u00a0 \u00a0 next\u00a0 \u00a0 \u00a0 end\u00a0 \u00a0 next\u00a0 end\n```\n- Go back to the `Day1` directory and re-run `terraform destroy` .\n## What's next\n- Read more about other Fortinet products for Google Cloud at [fortinet.com](https://fortinet.com.gcp) .Read more about [deploying FortiGate using Google Cloud CLI](https://docs.google.com/document/u/0/d/1vuaN7GR7uimfW57iu8EZsKuEHp4_djaTsnBdwl05kzU/edit?resourcekey=0-tN-0jWwNs0pLebpwJaSSog){: target=\"external\" class=\"external\" track-type=\"tutorial\" track-name=\"externalLink\" track-metadata-position=\"body\" }.\\\n- For more reference architectures, diagrams, and best practices, explore the [Cloud Architecture Center](/architecture) .", "guide": "Cloud Architecture Center"}