{"title": "Apigee - Cloud Function task", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Cloud Function task\n**Announcement:** Application Integration is now available for your Google Cloud project. You can now use both Apigee Integration and Application Integration within the same Google Cloud project. [Learn more](/apigee/docs/api-platform/integration/using-application-integration)\nThe **Cloud Function** task lets you configure and run Google Cloud Functions from your integration. Google Cloud Functions is a lightweight compute solution for developers to create single-purpose, stand-alone functions that respond to Cloud events without the need to manage a server or a runtime environment.\nFor more information, see [Google Cloud Functions documentation](https://cloud.google.com/functions/docs) .\n", "content": "## Before you begin\nEnsure that you perform the following tasks in your Google Cloud project before configuring the **Cloud Function** task.\n- Enable the Cloud Functions API (`cloudfunctions.googleapis.com`). [Enable Cloud Functions API](https://console.cloud.google.com/flows/enableapi?apiid=cloudfunctions.googleapis.com) \n- Assign the following IAM roles to your principal:- **Cloud Functions Admin** \n- **Apigee Integration Editor** \nFor information on granting roles to principals, see [Granting, changing, and revoking access](/iam/docs/granting-changing-revoking-access) .\n- To connect to Cloud Functions, ensure that you have either [created an OAuth 2.0 profile](/apigee/docs/api-platform/integration/configuring-auth-profile#createAuthProfile) or [attached a user-managed service account](/application-integration/docs/access-control#add-service-account) to your integration:\n- If your integration has a service account attached, assign the **Cloud Function Invoker** IAM role to that service account.For information about granting roles to a service account, see [Manage access to service accounts](/iam/docs/manage-access-service-accounts) .\n- The **Cloud Function** task only supports authentication profiles of type [Google OIDC ID Token](/apigee/docs/api-platform/integration/configuring-auth-profile#googleOIDC) .  Create an authentication profile of type [Google OIDC ID Token](/apigee/docs/api-platform/integration/configuring-auth-profile#googleOIDC) using the service account with the **Cloud Function Invoker** IAM role assigned.  If your **Cloud Function** task does not require authentication,  the **Authentication profile** field in the task configuration pane can be left empty.\n- If your integration has both OIDC ID profile and a user-managed service account configured, then by default the OIDC ID profile is used for authentication. If neither OIDC ID profile nor user-managed service account is configured, then the default service account ( `service-` `` `@gcp-sa-apigee.iam.gserviceaccount.com` ) is used to call the **Cloud Function** task.\n- Ensure that [VPC Service Controls](/apigee/docs/api-platform/integration/vpcsc-integration) is **NOT** setup for Apigee Integration in your Google Cloud project. **Warning:** **Cloud Function** does not function or stops functioning if [VPC Service Controls](/apigee/docs/api-platform/integration/vpcsc-integration) is setup for Apigee Integration in your Google Cloud project.## Configure the Cloud Function task\nTo configure the **Cloud Function** task in your integration, perform the following steps:\n- In the [Apigee UI](https://apigee.google.com) , select your.\n- Click **Develop > Integrations** .\n- Select an existing integration or create a new integration by clicking **Create Integration** .If you are creating a new integration:- Enter a name and description in the **Create Integration** dialog.\n- Select a **Region** for the integration from the list of supported regions.\n- Click **Create** .\nThis opens the integration in the .\n- In thenavigation bar, click **+Add a task/trigger > Tasks** to view the list of available tasks.\n- Click and place the **Cloud Function** element to the  integration editor.\n- Click the **Cloud Function** element on the designer to  open the configuration pane, then click **Configure Cloud Function** .\n- In the **Cloud Function Configuration** dialog, choose any one of  the following:- **Link existing function** . Select this option to link an existing Cloud Function that is configured in integration. Enter the **Cloud Function Trigger URL** . **Important:** Make sure that the source files for the existing Cloud function are in the same format as specified in [Cloud function template](#format) .\n- **Create new function** . Select this option to create a new Cloud Function associated with integration. Enter the **Cloud Function Name** and select the **function region** from the drop-down list.\n- Click **Save** .A basic Google Cloud function is created in your Google Cloud project and  is associated with your integration. The task configuration pane  displays the **Trigger URL** and the **Task Parameters** of the  Cloud Function.\n### Cloud function template\nWhen configuring the Cloud Function using an existing Cloud function, make sure that the function's `main.py` , `task.py` , and `requirements.txt` source files are in the following format:\n```\n\u00a0 # Sample Code:\u00a0 # print(event.get('task_string_key'))\u00a0 # event.set('task_int_array_key', [456, 789]);\u00a0 # event.log('some logging')\u00a0 \u00a0 def run(event):\u00a0 \u00a0 \"\"\"Actual cloud function custom logic.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 event : event object in main.py that contains all parameters.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 return \u00a0 \u00a0 \n``````\n\u00a0 \"\"\"Un-editable platform wrapper which invokes user code.\"\"\"import tracebackfrom flask import jsonfrom flask import jsonifyfrom task import runVALUE_NAME = [\u00a0 \u00a0 'stringValue', 'intValue', 'doubleValue', 'booleanValue', 'protoValue']ARRAY_VALUE_NAME = {\u00a0 \u00a0 'stringArray': 'stringValues',\u00a0 \u00a0 'intArray': 'intValues',\u00a0 \u00a0 'doubleArray': 'doubleValues',\u00a0 \u00a0 'booleanArray': 'booleanValues',\u00a0 \u00a0 'protoArray': 'protoValues'}VALUE_TYPE_URL = 'type.googleapis.com/google.protobuf.Value'CLOUD_FUNCTION_EXCEPTION_KEY = 'CloudFunctionException'CLOUD_FUNCTION_LOGGING_KEY = 'CloudFunctionLogging'class _Event(object):\u00a0 \"\"\"Event object.\"\"\"\u00a0 def __init__(self, json_payload):\u00a0 \u00a0 self._event_params = json_payload.get('eventParameters', dict())\u00a0 \u00a0 self._task_params = json_payload.get('taskParameters', dict())\u00a0 \u00a0 self._log = []\u00a0 \u00a0 print('Event param is ' + str(self._event_params))\u00a0 \u00a0 print('Task param is ' + str(self._task_params))\u00a0 def set(self, key, value):\u00a0 \u00a0 \"\"\"Set the event parameters key-value.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 key: parameter key.\u00a0 \u00a0 \u00a0 value: parameter value.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 new_param = self._create_param(key, value)\u00a0 \u00a0 param = self._get_param_by_key(key)\u00a0 \u00a0 if param is None:\u00a0 \u00a0 \u00a0 if 'parameters' not in self._event_params:\u00a0 \u00a0 \u00a0 \u00a0 self._event_params['parameters'] = []\u00a0 \u00a0 \u00a0 self._event_params['parameters'].append(new_param)\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 param['value'] = new_param['value']\u00a0 def _create_param(self, key, value):\u00a0 \u00a0 \"\"\"Create a new parameter with given key value pair.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 key: parameter key.\u00a0 \u00a0 \u00a0 value: parameter value.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 parameter.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 new_param = {}\u00a0 \u00a0 new_param['key'] = key\u00a0 \u00a0 if isinstance(value, str):\u00a0 \u00a0 \u00a0 new_param['value'] = {'stringValue': value}\u00a0 \u00a0 elif isinstance(value, int):\u00a0 \u00a0 \u00a0 new_param['value'] = {'intValue': value}\u00a0 \u00a0 elif isinstance(value, float):\u00a0 \u00a0 \u00a0 new_param['value'] = {'doubleValue': value}\u00a0 \u00a0 elif isinstance(value, bool):\u00a0 \u00a0 \u00a0 new_param['value'] = {'booleanValue': value}\u00a0 \u00a0 elif isinstance(value, dict):\u00a0 \u00a0 \u00a0 if 'type@' in value:\u00a0 \u00a0 \u00a0 \u00a0 new_param['value'] = {'protoValue': value}\u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 new_param['value'] = {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'protoValue': {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '@type': 'type.googleapis.com/google.protobuf.Value',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'value': value\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 elif isinstance(value, list):\u00a0 \u00a0 \u00a0 if not value:\u00a0 \u00a0 \u00a0 \u00a0 raise RuntimeError('Cannot create a param with empty list')\u00a0 \u00a0 \u00a0 if any(not isinstance(val, type(value[0])) for val in value):\u00a0 \u00a0 \u00a0 \u00a0 print('Not all elements in the list have the same type')\u00a0 \u00a0 \u00a0 \u00a0 new_param['value'] = {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'protoValue': {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '@type': 'type.googleapis.com/google.protobuf.Value',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'value': value\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 elif isinstance(value[0], str):\u00a0 \u00a0 \u00a0 \u00a0 new_param['value'] = {'stringArray': {'stringValues': value}}\u00a0 \u00a0 \u00a0 elif isinstance(value[0], int):\u00a0 \u00a0 \u00a0 \u00a0 new_param['value'] = {'intArray': {'intValues': value}}\u00a0 \u00a0 \u00a0 elif isinstance(value[0], float):\u00a0 \u00a0 \u00a0 \u00a0 new_param['value'] = {'doubleArray': {'doubleValues': value}}\u00a0 \u00a0 \u00a0 elif isinstance(value[0], bool):\u00a0 \u00a0 \u00a0 \u00a0 new_param['value'] = {'booleanArray': {'booleanValues': value}}\u00a0 \u00a0 \u00a0 elif isinstance(value[0], dict):\u00a0 \u00a0 \u00a0 \u00a0 if all('@type' in val and val['@type'] == value[0]['@type']\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0for val in value):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new_param['value'] = {'protoArray': {'protoValues': value}}\u00a0 \u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new_param['value'] = {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'protoValue': {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '@type': 'type.googleapis.com/google.protobuf.Value',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'value': value\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 \u00a0 raise RuntimeError('The type ' + type(value[0]) +\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0' in the list is not supported')\u00a0 \u00a0 else:\u00a0 \u00a0 \u00a0 raise RuntimeError('Value ' + str(value) + ' has the type ' +\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0type(value) + ' that is not supported')\u00a0 \u00a0 return new_param\u00a0 def get(self, key):\u00a0 \u00a0 \"\"\"Get the event parameter value for specified key.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 key: parameter key.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 Parameter value.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 param = self._get_param_by_key(key)\u00a0 \u00a0 if param is None:\u00a0 \u00a0 \u00a0 raise RuntimeError('Can not find param with key ' + key)\u00a0 \u00a0 return self._get_param_value(param)\u00a0 def _get_param_by_key(self, key):\u00a0 \u00a0 \"\"\"Get the parameter for specified key.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 key: parameter key.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 Parameter.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 param = self._get_param_by_key_from_params(key, self._task_params)\u00a0 \u00a0 if param is None:\u00a0 \u00a0 \u00a0 return self._get_param_by_key_from_params(key, self._event_params)\u00a0 \u00a0 value = self._get_param_value(param)\u00a0 \u00a0 if isinstance(value, str) and len(value) > 2 and value.startswith(\u00a0 \u00a0 \u00a0 \u00a0 '$') and value.endswith('$'):\u00a0 \u00a0 \u00a0 return self._get_param_by_key_from_params(value[1:-1], self._event_params)\u00a0 \u00a0 return param\u00a0 def _get_param_by_key_from_params(self, key, params):\u00a0 \u00a0 \"\"\"Get the parameter for specified key from event parameters.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 key: parameter key.\u00a0 \u00a0 \u00a0 params: event parameters.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 Parameter.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 if not isinstance(params, dict) or 'parameters' not in params:\u00a0 \u00a0 \u00a0 return None\u00a0 \u00a0 for param in params['parameters']:\u00a0 \u00a0 \u00a0 if param['key'] == key:\u00a0 \u00a0 \u00a0 \u00a0 return param\u00a0 \u00a0 return None\u00a0 def _get_param_value(self, param):\u00a0 \u00a0 \"\"\"Get the parameter value for specified parameter.\u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 param: parameter.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 Parameter value.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 value = param['value']\u00a0 \u00a0 if len(value) != 1:\u00a0 \u00a0 \u00a0 raise RuntimeError('param does not have size of 1')\u00a0 \u00a0 for value_name in VALUE_NAME:\u00a0 \u00a0 \u00a0 if value_name in value:\u00a0 \u00a0 \u00a0 \u00a0 if value_name == 'protoValue' and value[value_name][\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '@type'] == VALUE_TYPE_URL:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return value[value_name]['value']\u00a0 \u00a0 \u00a0 \u00a0 return value[value_name]\u00a0 \u00a0 for array_value_name in ARRAY_VALUE_NAME:\u00a0 \u00a0 \u00a0 if array_value_name in value:\u00a0 \u00a0 \u00a0 \u00a0 return value[array_value_name][ARRAY_VALUE_NAME[array_value_name]]\u00a0 \u00a0 raise RuntimeError('Cannot get value from param ' + str(param))\u00a0 def set_error(self):\u00a0 \u00a0 \"\"\"Set the cloud function error to event parameters in order for user to see on IP.\"\"\"\u00a0 \u00a0 self.set(CLOUD_FUNCTION_EXCEPTION_KEY, traceback.format_exc())\u00a0 def log(self, message):\u00a0 \u00a0 self._log.append(str(message))\u00a0 def get_response(self):\u00a0 \u00a0 \"\"\"Get the response that can be returned to IP.\u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 The response text or any set of values that can be turned into a\u00a0 \u00a0 \u00a0 Response object using\u00a0 \u00a0 \u00a0 `make_response\u00a0 \u00a0 \u00a0 <http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response>`.\u00a0 \u00a0 \"\"\"\u00a0 \u00a0 if self._log:\u00a0 \u00a0 \u00a0 self.set(CLOUD_FUNCTION_LOGGING_KEY, self._log)\u00a0 \u00a0 res = {\u00a0 \u00a0 \u00a0 \u00a0 'eventParameters': self._event_params,\u00a0 \u00a0 }\u00a0 \u00a0 return jsonify(**json.loads(json.htmlsafe_dumps(res)))def execute_function(request):\u00a0 \"\"\"Entry point of the cloud function.\u00a0 Args:\u00a0 \u00a0 request (flask.Request): HTTP request object.\u00a0 Returns:\u00a0 \u00a0 The response text or any set of values that can be turned into a\u00a0 \u00a0 Response object using\u00a0 \u00a0 `make_response\u00a0 \u00a0 <http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response>`.\u00a0 \"\"\"\u00a0 try:\u00a0 \u00a0 request_json = request.get_json(silent=True)\u00a0 \u00a0 event = _Event(request_json)\u00a0 \u00a0 run(event)\u00a0 except:\u00a0 \u00a0 event.set_error()\u00a0 return event.get_response()\n``````\n# Function dependencies, for example:# package>=version\n```\n## Edit a Cloud Function task\nConfiguring a **Cloud Function** task in Apigee Integration creates a basic HTTP triggered Cloud Function in your Google Cloud project.\n**Note:** **Cloud Function** task in Apigee Integration only supports Python language runtime. Contact [technical support](/application-integration/docs/getting-support#get-support-from-google) for information on using other runtime languages.\nTo edit a **Cloud Function** task, perform the following steps:\n- In the task configuration pane, click **Open Cloud Function** .You are redirected to the **Function details** page in your Google Cloud Console.\n- Click **Edit** .\n- The **Configuration** page lets you edit the default configuration settings of the Cloud Function.  See [Configuring Cloud Functions](https://cloud.google.com/functions/docs/configuring) for more information.\n- Click **Next** to edit the source code files of the Cloud Function.By default, the Cloud Function contains the following source files:- : This file contains the initialization code to run the Cloud Function from your integration. **Caution:** Do not edit or modify thefile.\n- : This file contains the executable code of the Cloud Function.   Write your script inside the`run(event)`function. This function is called when the Cloud Function task executes.   The`event`object from thefile contains all the task parameters.See [Access integration variables](#access-var) for information about how to use the variables defined at the integration level in your script.\n- Click **Deploy** .## Access integration variables\nTo access an integration variable in your Cloud Function, you must pass the variable in the form of task parameters to the **Cloud Function** task. The task parameters are key-value pairs where **Key** is the name of the reference variable used in your Cloud Function source file and the **Value** is the corresponding integration variable name that the reference variable points to. You can add one or more task parameters in the **Task Parameters** section of the task configuration pane.\nThe following methods are used to access integration variables from your Cloud Function:\n- **set** : Writes the value to a variable.\n- **get** : Reads the value of a variable.For example, if you have an integration variable named that you want to use in your Cloud Function source file, define the following task parameters:\n- **Key** :\n- **Value** :The following sample script shows the usage of set and get functions to access the defined integration variables.\n```\ndef run(event):\u00a0 # Read the integration variable EmployeeName using the reference variable EmployeeKey\u00a0 value = event.get('EmployeeKey');\u00a0 # Change the integration variable EmployeeName value using the reference variable EmployeeKey\u00a0 newValue = event.set('EmployeeKey' , 'XYZ');\u00a0 # The new value of the integration variable is retained throughout the Cloud Function task.\u00a0 return\n```\n## Error handling strategy\nAn error handling strategy for a task specifies the action to take if the task fails due to a [temporary error](/apigee/docs/api-platform/integration/error-handling) . For information about how to use an error handling strategy, and to know about the different types of error handling strategies, see [Error handling strategies](/apigee/docs/api-platform/integration/error-handling-strategy) .", "guide": "Apigee"}