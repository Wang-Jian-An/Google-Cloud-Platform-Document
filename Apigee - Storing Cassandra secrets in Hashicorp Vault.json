{"title": "Apigee - Storing Cassandra secrets in Hashicorp Vault", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Storing Cassandra secrets in Hashicorp Vault\n**    Preview    \u2014 Apigee hybrid Vault integration ** This feature is subject to the \"Pre-GA Offerings Terms\" in the General Service Terms section   of the [Service Specific Terms](/terms/service-terms#1) .     Pre-GA features are available \"as is\" and might have limited support.    For more information, see the [launch stage descriptions](/products#product-launch-stages) .\n", "content": "## \n Storing Cassandra secrets in Hashicorp Vault\nThis feature allows you to store Cassandra DB credentials for Apigee Hybrid in [Hashicorp Vault](https://www.vaultproject.io/) , an external secret manager. External secret managers allow you to manage how secrets are stored in Kubernetes, including managing data residency and fine grained access controls.\nBefore Apigee hybrid version 1.10, the only way to supply passwords for Cassandra users was to specify the password in overrides.yaml. These passwords are stored in Kubernetes secrets. For example:\n```\ncassandra:\n auth:\n default:\n  password: \"********\"\n admin:\n  password: \"********\"\n ddl:\n  password: \"********\"\n dml:\n  password: \"********\"\n jmx:\n  username: \"jmxuser\"\n  password: \"********\"\n jolokia:\n  username: \"apigee\"\n  password: \"********\"\n```\nUsing Hashicorp Vault, you can supply these passwords via the Kubernetes Secrets Store CSI Driver API ( [SecretProviderClass](https://secrets-store-csi-driver.sigs.k8s.io/concepts.html#secretproviderclass) ). This allows Kubernetes to mount multiple secrets, keys, and certs stored in an external Vault.\n### Cassandra users and passwords\nYou will need to create secrets for the following Cassandra users. Change the default values to meet your organization's security policies.\n**Note:** You set the Cassandra usernames when you first install Apigee hybrid. You cannot change them afterwards. The`Default`username must always be`\"cassandra\"`.\n| Cassandra User | Default username            | Default password |\n|:-----------------|:----------------------------------------------------------------|:-------------------|\n| Admin   | admin_user              | \"********\"   |\n| DDL    | ddl_user              | \"********\"   |\n| Default   | cassandra Note: The Default username must always be \"cassandra\" | \"********\"   |\n| DML    | dml_user              | \"********\"   |\n| JMX    | \"jmxuser\"              | \"********\"   |\n| Jolokia   | \"apigee\"              | \"********\"   |\nSee [cassandra configuration property](/apigee/docs/hybrid/v1.11/config-prop-ref#cassandra) for more information.\n## Configure external secret integration\n**Note:** Apigee hybrid only supports Vault integration using [Helm](/apigee/docs/hybrid/v1.11/helm-reference) management. If you are using`apigeectl`to manage your hybrid installation, see [Migrate Apigee hybrid to Helm from apigeectl](/apigee/docs/hybrid/v1.11/helm-migration) .\nSetting up Vault integration for Apigee hybrid consists of the following procedures.\n- In the first two procedures, you interact directly with Vault.\n- In the third and fourth procedures, you apply the configurations to your Kubernetes cluster.\nUse the following procedures to create the secrets in Vault and enable your hybrid installation to have access to them.\n### Create Vault secrets, policies, and roles\n- Verify that the current Kubernetes context is set to your cluster:```\nkubectl config current-context\n```\n- Use the Vault API, CLI, or UI to create the cassandra secrets. The secret values you create  must match the Cassandra usernames and passwords currently used in your cluster.- **Secret key** : Any secret key (or combination of multiple keys) can be used, for example:```\nsecret/data/apigee/cassandra\n```\n- **Secret data** : Apigee Hybrid expects username and password pairs for the following Cassandra users:| Cassandra users |\n|:------------------|\n| Admin    |\n| DDL    |\n| Default   |\n| DML    |\n| JMX    |\n| Jolokia   |These username and password values can be spread across any number of secret keys.\n- **Vault CLI** : The following command shows how to create a single secret containing all the required usernames and passwords:```\nvault kv put secret/apigee/cassandra \\\n adminUsername=\"ADMIN_USERNAME\" \\\n adminPassword=\"ADMIN_PASSWORD\" \\\n ddlUsername=\"DDL_USERNAME\" \\\n ddlPassword=\"DDL_PASSWORD\" \\\n defaultUsername=\"cassandra\" \\\n defaultPassword=\"DEFAULT_PASSWORD\" \\\n dmlUsername=\"DML_USERNAME\" \\\n dmlPassword=\"DML_PASSWORD\" \\\n jmxUsername=\"JMX_USERNAME\" \\\n jmxPassword=\"JMX_PASSWORD\" \\\n jolokiaUsername=\"JOLOKIA_USERNAME\" \\\n jolokiaPassword=\"JOLOKIA_PASSWORD\"\n``` **Note** :`data/`should not be included in the secret key when running this   command. Vault automatically inserts it.The default usernames for each user are as follows:| Cassandra user | Default value |\n|:-----------------|:----------------|\n| Admin   | admin_user  |\n| DDL    | ddl_user  |\n| Default   | cassandra  |\n| DML    | dml_user  |\n| JMX    | jmxuser   |\n| Jolokia   | apigee   | **Tip:** You can see the default passwords in the`values.yaml`file in the`apigee-datastore/`chart directory.\n- Within Vault, create a policy to grant access to the secret you just created.- Create a policy file (suggested name:`apigee-cassandra-auth.txt`) with the   following contents:```\npath \"secret/data/apigee/cassandra\" {\n capabilities = [\"read\"]\n}\n```If you created multiple secrets, each secret must be added to the policy file:```\npath \"secret/data/apigee/cassandra/admin\" {\n capabilities = [\"read\"]\n}\npath \"secret/data/apigee/cassandra/ddl\" {\n capabilities = [\"read\"]\n}\n``` **Note** : Do not forget`data/`in the paths   (e.g. secret/ **data/** apigee/cassandra).\n- Apply the policy to Vault:```\nvault policy write apigee-cassandra-auth apigee-cassandra-auth.txt\n```It is possible to create the policy using standard input instead of reading from a file:```\necho 'path \"secret/data/apigee/cassandra\" { capabilities = [\"read\"] }' | vault policy write apigee-cassandra-auth ``` **Note:** `apigee-cassandra-auth`is the policy name. Any value can be used,   but this exact value must be specified when binding the policy to Kubernetes service   accounts in the next step.\n- Bind the policy to the Apigee Cassandra Kubernetes service accounts.- Define the following environmental variables:```\nexport ORG_NAME=APIGEE_ORG_NAME\nexport ENVS_LIST=LIST_OF_APIGEE-ENVS\nexport APIGEE_NAMESPACE=YOUR_APIGEE_NAMESPACE\nexport NAMESPACES=apigee-system,${APIGEE_NAMESPACE}\n```Where:- is the name of your Apigee organization.\n- Is a comma separated list of your Apigee environments, for     example`dev,prod`.\n- is your Apigee namespace. The default is`apigee`.\n- is a comma-separated list of namespaces for Apigee,`apigee-system`and your Apigee namespace.\n- Create a script with the following contents. The script can have any name. In the    following example, the name of the script is`create-vault-cassandra-role.sh`:```\n# create-vault-cassandra-role.sh\nORG=ORG_NAME # ORG name\nENVS=ENVS_LIST # comma separated env names, for example: dev,prod\norg_short_name=$(echo $ORG | head -c 15)\nencode=$(echo -n $ORG | shasum -a 256 | head -c 7)\norg_encode=$(echo \"$org_short_name-$encode\")\nnames=apigee-manager,apigee-cassandra-default,apigee-cassandra-backup-sa,apigee-cassandra-restore-sa,apigee-cassandra-schema-setup-${org_encode},apigee-cassandra-schema-val-${org_encode},apigee-cassandra-user-setup-${org_encode},apigee-mart-${org_encode},apigee-mint-task-scheduler-${org_encode}\nfor env in ${ENVS//,/ }\ndo\n env_short_name=$(echo $env | head -c 15)\n encode=$(echo -n $ORG:$env | shasum -a 256 | head -c 7)\n env_encode=$(echo \"$org_short_name-$env_short_name-$encode\")\n names+=,apigee-synchronizer-${env_encode},apigee-runtime-${env_encode}\ndone\necho $names\n```\n- Run the script and assign the output to thevariable.    This will create a comma-separated list of Kubernetes service account names.```\nexport SERVICE_ACCOUNT_NAMES=$(./create-vault-cassandra-role)\n``` **Note:** You may need to`chmod`your script before    running it.Check that the variable was populated with the list:```\necho $SERVICE_ACCOUNT_NAMES\n```\n- Use the Vault CLI to create a role which binds the policy to Kubernetes service    accounts:```\nvault write auth/kubernetes/role/cassandra \\\n bound_service_account_names=${SERVICE_ACCOUNT_NAMES} \\\n bound_service_account_namespaces=${NAMESPACES} \\\n policies=apigee-cassandra-auth \\\n ttl=1m\n``` **Note** : The policy name must match the one created in the previous step    (e.g.`apigee-cassandra-auth`).\n### Install CSI driver and Vault provider\nApigee hybrid v1.11.1 supports the following Helm chart versions:\n| Software     | Version |\n|:-------------------------|:----------|\n| Secrets Store CSI Driver | v1.3.4 |\n| Vault     | v0.25.0 |\n- Follow the [Secrets Store CSI Driver installation instructions](https://secrets-store-csi-driver.sigs.k8s.io/getting-started/installation.html) to Install the CSI driver on your cluster. The CSI driver has a Helm chart for installation. **Note: ** On OpenShift installations, grant privileged access to the`secrets-store-csi-driver`service account with the following command:```\noc adm policy add-scc-to-user privileged system:serviceaccount:\"${NAMESPACE}\":secrets-store-csi-driver\n```Where is the namespace where you installed the CSI driver.\n- Follow the instructions in [Installing the Vault CSI provider](https://developer.hashicorp.com/vault/docs/platform/k8s/csi/installation) to install the Vault CSI provider if you have not installed it already. **Note: ** For installations on OpenShift, follow the procedures in [Installation on OpenShift](https://developer.hashicorp.com/vault/docs/platform/k8s/csi/installation#installation-on-openshift) .- Forprovide the namespace where you installed Vault.\n- Forprovide the name of the Kubernetes service account for Vault. This is usually`vault-csi-provider`. You can check the name of the service account with the following command:```\nkubectl -n KUBERNETES_APPLICATION_NAMESPACE get ds vault-csi-provider -oyaml | grep 'serviceAccountName'\n``````\n  serviceAccountName: vault-csi-provider\n```\n### Create SecretProviderClass object\nThe `SecretProviderClass` resource tells the CSI driver what provider to  communicate with when requesting secrets. The Cassandra users' credentials must be configured  via this object. The following table shows the file names ( `objectName` s) expected  by Apigee Cassandra:\n| Cassandra User | Expected secret file names  |\n|:-----------------|:---------------------------------|\n| Admin   | adminUsername, adminPassword  |\n| DDL    | ddlUsername, ddlPassword   |\n| Default   | cassandra, defaultPassword  |\n| DML    | dmlUsername, dmlPassword   |\n| JMX    | jmxUsername, jmxPassword   |\n| Jolokia   | jolokiaUsername, jolokiaPassword |\n- Create a YAML file for your`SecretProviderClass`. The file name can be   anything, for example:`spc.yaml`. Use the following`SecretProviderClass`template to configure this resource:```\napiVersion: secrets-store.csi.x-k8s.io/v1\nkind: SecretProviderClass\nmetadata:\n name: apigee-cassandra-auth-spc\nspec:\n provider: vault\n parameters:\n roleName: apigee-cassandra-auth # the roleName should match the vault role you created earlier in this procedure\n # vaultAddress is the endpoint your Vault server is running at.\n # If Vault is running in the same cluster as Apigee, the format will generally be:\n # http://vault.<namespace>.svc.cluster.local:<vaultServicePort>\n vaultAddress: VAULT_ADDRESS\n # \"objectName\" is an alias used within the SecretProviderClass to reference\n # that specific secret. This will also be the filename containing the secret.\n # Apigee Cassandra expects these exact values so they must not be changed.\n # \"secretPath\" is the path in Vault where the secret should be retrieved.\n # \"secretKey\" is the key within the Vault secret response to extract a value from.\n # For example, if the Vault secret is located at `secret/data/apigee/cassandra`\n # and you want to specify the admin password, you would use the following:\n # - objectName: \"adminPassword\"\n # secretPath: \"secret/data/apigee/cassandra\"\n # secretKey: \"key within Vault secret specifying the admin password\"\n objects: |\n  - objectName: \"adminUsername\"\n  secretPath: \"\"\n  secretKey: \"\"\n  - objectName: \"adminPassword\"\n  secretPath: \"\"\n  secretKey: \"\"\n  - objectName: \"defaultUsername\"\n  secretPath: \"\"\n  secretKey: \"\"\n  - objectName: \"defaultPassword\"\n  secretPath: \"\"\n  secretKey: \"\"\n  - objectName: \"ddlUsername\"\n  secretPath: \"\"\n  secretKey: \"\"\n  - objectName: \"ddlPassword\"\n  secretPath: \"\"\n  secretKey: \"\"\n  - objectName: \"dmlUsername\"\n  secretPath: \"\"\n  secretKey: \"\"\n  - objectName: \"dmlPassword\"\n  secretPath: \"\"\n  secretKey: \"\"\n  - objectName: \"jolokiaUsername\"\n  secretPath: \"\"\n  secretKey: \"\"\n  - objectName: \"jolokiaPassword\"\n  secretPath: \"\"\n  secretKey: \"\"\n  - objectName: \"jmxUsername\"\n  secretPath: \"\"\n  secretKey: \"\"\n  - objectName: \"jmxPassword\"\n  secretPath: \"\"\n  secretKey: \"\"\n```\n- Apply the`SecretProviderClass`to both your`apigee`and`apigee-system`namespaces. In the following commands, the namespaces are`apigee`and`apigee-system`. Replace that values if you are using   different namespaces:```\nkubectl -n apigee apply -f spc.yaml\nkubectl -n apigee-system apply -f spc.yaml\n```\n### Enable external secret for Cassandra\n- Within your`overrides.yaml`, add the following configuration to enable external secret usage for Cassandra:```\ncassandra:\n auth:\n secretProviderClass: apigee-cassandra-auth-spc # The name of the SecretProviderClass created in spc.yaml.\n``` **Note:** The name you provide for`cassandra.auth.secretProviderClass`must match the name of the SecretProviderClass  you created in the`spc.yaml`file in the previous steps.See [cassandra.auth.secretProviderClass](/apigee/docs/hybrid/v1.11/config-prop-ref#cassandra-auth-secretproviderclass) .\n- Use`helm upgrade`to apply the change to the`apigee-operator`and`apigee-datastore`components:- The datastore controller in`apigee-operator`takes part in    Cassandra decommissioning and data replication during region expansion. These tasks    require the JMX and Jolokia credentials.```\nhelm upgrade operator apigee-operator/ \\\n --namespace apigee-system \\\n --atomic \\\n -f overrides.yaml\n```\n- `apigee-datastore`provides credentials that downstream components like`apigee-runtime`, Synchronizer & MART use when connecting to Cassandra.```\nhelm upgrade datastore apigee-datastore/ \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n```\n- Verify external secrets are being used. When external secrets are enabled, new`Volume`s,`Volume Mount`s , and`Environment Variable`s,   are added referencing the secrets.- Verify the`apigee-controller-manager`deployment.Check that a `Volume` named `apigee-external-secrets` exists and    references the `SecretProviderClass` created above:```\nkubectl -n apigee-system get deployment apigee-controller-manager -o jsonpath='{.spec.template.spec.volumes[?(@.name==\"apigee-external-secrets\")]}'\n{\n \"csi\": {\n \"driver\": \"secrets-store.csi.k8s.io\",\n \"readOnly\": true,\n \"volumeAttributes\": {\n  \"secretProviderClass\": \"apigee-cassandra-auth-spc\"\n }\n },\n \"name\": \"apigee-external-secrets\"\n}\n```Check that a `VolumeMount` named `apigee-external-secrets` exists:```\nkubectl -n apigee-system get deployment apigee-controller-manager -o jsonpath='{.spec.template.spec.containers[?(@.name==\"manager\")].volumeMounts[?(@.name==\"apigee-external-secrets\")]}'\n{\n \"mountPath\": \"/opt/apigee/externalsecrets\",\n \"name\": \"apigee-external-secrets\",\n \"readOnly\": true\n}\n```Check that `Environment Variable` s exist that reference external secrets:```\nkubectl -n apigee-system get deployment apigee-controller-manager -o jsonpath='{.spec.template.spec.containers[?(@.name==\"manager\")].env}'\n[ ...\n {\n \"name\": \"CASSANDRA_JOLOKIA_USERNAME_PATH\",\n \"value\": \"/opt/apigee/externalsecrets/jolokiaUsername\"\n },\n {\n \"name\": \"CASSANDRA_JOLOKIA_PASSWORD_PATH\",\n \"value\": \"/opt/apigee/externalsecrets/jolokiaPassword\"\n }\n]\n```\n## Rollback to K8s Secret\n- To revert back to non-external secrets, remove the`secretProviderClass`configuration in`overrides.yaml`and use the previous configuration:```\ncassandra:\n  auth:\n  secretProviderClass: apigee-cassandra-auth-spc # remove this line\n```\n- Use`helm upgrade`to apply the change to the`apigee-operator`and`apigee-datastore`components:```\nhelm upgrade operator apigee-operator/ \\\n --namespace apigee-system \\\n --atomic \\\n -f overrides.yaml\n``````\nhelm upgrade datastore apigee-datastore/ \\\n --namespace apigee \\\n --atomic \\\n -f overrides.yaml\n```## \n Troubleshooting: Create a client container for debugging\nIf you are using Vault, this section replaces instructions in the troubleshooting section, [Create  a client container for debugging](/apigee/docs/api-platform/troubleshoot/playbooks/cassandra/ts-cassandra#create-a-client-container-for-debugging) .\nThis section explains how to create a client container from which you can access [Cassandra debugging utilities](https://cassandra.apache.org/doc/latest/tools/cqlsh.html) such as `cqlsh` . These utilities allow you to query Cassandra tables and  can be useful for debugging purposes.\n### \n Create the client container\nTo create the client container, follow these steps:\n- The container uses the TLS certificate from the`apigee-cassandra-user-setup`pod. The first step is to fetch this certificate name:```\nkubectl get secrets -n apigee --field-selector type=kubernetes.io/tls | grep apigee-cassandra-user-setup | awk '{print $1}'\n```This command returns the certificate name. For example: `apigee-cassandra-user-setup-rg-hybrid-b7d3b9c-tls` .\n- Open a new file and paste the following pod spec into it:```\napiVersion: v1\u00a0 kind: Pod\u00a0 metadata:\u00a0 \u00a0 labels:\u00a0 \u00a0 name: CASSANDRA_CLIENT_NAME \u00a0 # For example: my-cassandra-client\u00a0 \u00a0 namespace: apigee\u00a0 spec:\u00a0 \u00a0 containers:\u00a0 \u00a0 - name: CASSANDRA_CLIENT_NAME\u00a0 \u00a0 \u00a0 image: \"gcr.io/apigee-release/hybrid/apigee-hybrid-cassandra-client:1.11.1\"\u00a0 \u00a0 \u00a0 imagePullPolicy: Always\u00a0 \u00a0 \u00a0 command:\u00a0 \u00a0 \u00a0 - sleep\u00a0 \u00a0 \u00a0 - \"3600\"\u00a0 \u00a0 \u00a0 env:\u00a0 \u00a0 \u00a0 - name: CASSANDRA_SEEDS\u00a0 \u00a0 \u00a0 \u00a0 value: apigee-cassandra-default.apigee.svc.cluster.local\u00a0 \u00a0 \u00a0 - name: APIGEE_DML_USERNAME_PATH\u00a0 \u00a0 \u00a0 \u00a0 value: /opt/apigee/externalsecrets/dmlUsername\u00a0 \u00a0 \u00a0 - name: APIGEE_DML_PASSWORD_PATH\u00a0 \u00a0 \u00a0 \u00a0 value: /opt/apigee/externalsecrets/dmlPassword\u00a0 \u00a0 \u00a0 volumeMounts:\u00a0 \u00a0 \u00a0 - mountPath: /opt/apigee/ssl\u00a0 \u00a0 \u00a0 \u00a0 name: tls-volume\u00a0 \u00a0 \u00a0 \u00a0 readOnly: true\u00a0 \u00a0 \u00a0 - name: apigee-external-secrets\u00a0 \u00a0 \u00a0 \u00a0 mountPath: /opt/apigee/externalsecrets\u00a0 \u00a0 \u00a0 \u00a0 readOnly: true\u00a0 \u00a0 volumes:\u00a0 \u00a0 - name: tls-volume\u00a0 \u00a0 \u00a0 secret:\u00a0 \u00a0 \u00a0 \u00a0 defaultMode: 420\u00a0 \u00a0 \u00a0 \u00a0 secretName: apigee-cassandra-user-setup-vaibhavhybridor-8b3e61d-tls\u00a0 \u00a0 - name: apigee-external-secrets\u00a0 \u00a0 \u00a0 csi:\u00a0 \u00a0 \u00a0 \u00a0 driver: secrets-store.csi.k8s.io\u00a0 \u00a0 \u00a0 \u00a0 readOnly: true\u00a0 \u00a0 \u00a0 \u00a0 volumeAttributes:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 secretProviderClass: apigee-cass-password\u00a0 \u00a0 serviceAccount: apigee-cassandra-default\u00a0 \u00a0 serviceAccountName: apigee-cassandra-default\u00a0 \u00a0 restartPolicy: Never\n```\n- Save the file with a`.yaml`extension. For example:`my-spec.yaml`.\n- Apply the spec to your cluster:```\nkubectl apply -f my-spec.yaml -n apigee\n```\n- Log in to the container:```\nkubectl exec -n CASSANDRA_CLIENT_NAME -it -- bash\n```\n- Connect to the Cassandra`cqlsh`interface with the following commands. Enter the  commands exactly as shown:```\nAPIGEE_DML_USER=$(cat \"$APIGEE_DML_USERNAME_PATH\")\nexport APIGEE_DML_USER\nAPIGEE_DML_PASSWORD=$(cat \"$APIGEE_DML_PASSNAME_PATH\")\nexport APIGEE_DML_PASSWORD\ncqlsh ${CASSANDRA_SEEDS} -u ${APIGEE_DML_USER} -p ${APIGEE_DML_PASSWORD} --ssl\n```\n### \n Deleting the client pod\nUse this command to delete the Cassandra client pod:\n```\nkubectl delete pods -n apigee cassandra-client\n```", "guide": "Apigee"}