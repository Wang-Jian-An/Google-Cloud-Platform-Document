{"title": "Apigee - Enabling Workload Identity with Apigee hybrid", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Enabling Workload Identity with Apigee hybrid\nYou are currently viewing version 1.5 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nThis topic explains how to enable Apigee hybrid.\n# Overview\nWorkload Identity is a way for applications running within GKE (Google Kubernetes Engine) to access Google Cloud services. For a good overview of Workload Identity, see:\n- [ Introducing Workload Identity: Better authentication for your GKE applications](https://cloud.google.com/blog/products/containers-kubernetes/introducing-workload-identity-better-authentication-for-your-gke-applications) \n- [Using Workload Identity](/kubernetes-engine/docs/how-to/workload-identity) \nA Google Cloud IAM service account is an identity that an application can use to make requests to Google APIs. These service accounts are referred to as GSA (Google Service Accounts) in the document. For more information aobut GSAs, see [Service accounts](/iam/docs/service-accounts) .\nSeparately, Kubernetes also has the concept of service accounts. A service account provides an identity for processes that run in a Pod. Kubernetes service accounts are Kubernetes resources, while Google service accounts are specific to Google Cloud. For information on Kubernetes service accounts, see [ Configure Service Accounts for Pods](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) in the Kubernetes documentation.\nWith Apigee hybrid 1.4 and later, Apigee creates and uses a Kubernetes service account for each type of component. Enabling Workload Identity allows the hybrid components to interract with the Kubernetes service accounts.\n# Prerequisites\nBefore enabling Workload Identity for Apigee hybrid, Workload Identity must be enabled for the GKE cluster running Apigee.\nIf you have followed the instructions for Anthos Service Mesh (ASM), Workload Identity is already enabled for the cluster.\nYou can confirm if Workload Identity is enabled by running the following command:\n```\ngcloud container clusters describe $CLUSTER_NAME\n```\nThe output should include something like the following:\n```\n\u2026\n\u2026\nstatus: RUNNING\nsubnetwork: default\nworkloadIdentityConfig:\n workloadPool: PROJECT_ID.svc.id.goog\n```\nWhen running Apigee hybrid on GKE, the standard practice is to create and download private keys ( `.json` files) for each of the service accounts. When using Workload Identity, you do not need to download service account private keys and add them to GKE clusters.\n# Enable Workload Identity\nThese instructions are divided into three sections:\n- [Prepare to enable Workload Identity](#prepare) . Follow these instructions to update Node pools and initialize variables prior to enabling Workload Identity.\n- [Enable Workload Identity for a fresh install](#enable-fresh-install) . Follow these instructions for a new Apigee hybrid installation or if you have not already installed ASM on your hybrid installation.\n- [Upgrade an installation to use Workload Identity](#upgrade-install) . Follow these instructions to enable Workload Identity on your existing Apigee hybrid installation.", "content": "## Prepare to enable Workload Identity\nThe following instructions describe how to enable Workload Identity for Apigee hybrid runtime.\n### \n Update node pools\nEnsure Workload Identity is enabled per node pool with the following command:\n```\ngcloud container node-pools update $NODE_POOL_NAME \\\n --cluster=$CLUSTER_NAME \\\n --workload-metadata=GKE_METADATA\n```\n### \n Initialize variables\nInitialize the following variables:\n```\nexport PROJECT_ID=my-project-id\nexport ORG_NAME=$PROJECT_ID\nexport ENV_NAME=my-environment-name\nexport NAMESPACE=apigee #the namespace where apigee is installed\n```\n```\ngcloud config set project $PROJECT_ID\n```\n## \n Enabling Workload Identity for a fresh install\n- Add the highlighted line below to your`overrides.yaml`file under the`gcp`stanza:```\ngcp:\n projectID: \"my-project\"\n name: \"my-project\"\n region: \"us-west1\"\n workloadIdentityEnabled: true\n```\n- Create Google Service Accounts. There are two methods you can use:- Use the [create-service-account](/apigee/docs/hybrid/v1.5/create-service-account) tool to   create a Google service account per component with the following command:```\n$APIGEECTL_HOME/tools/create-service-account --env prod --dir $APIGEECTL_HOME/../service-accounts\n```This command will create the following service accounts:- `apigee-logger`\n- `apigee-metrics`\n- `apigee-cassandra`\n- `apigee-udca`\n- `apigee-synchronizer`\n- `apigee-mart`\n- `apigee-watcher`\n- `apigee-distributed-trace`\nThe following instructions assume you used the `create-service-account` tool   to generate the service accounts.\n- Define custom naming conventions and service accounts per environment (for advanced users)\n- Create the Kubernetes Service Accounts.For org level components:- **Cassandra** ```\nkubectl create sa -n $NAMESPACE apigee-cassandra-schema-setup-$(apigeectl encode --org $ORG_NAME)-sa \\\n && kubectl label sa -n $NAMESPACE -l app=apigee-cassandra,org=$ORG_NAME \\\n && kubectl annotate serviceaccount \\\n --namespace $NAMESPACE apigee-cassandra-schema-setup-$(apigeectl encode --org $ORG_NAME)-sa iam.gke.io/gcp-service-account=GSA_NAME@$PROJECT_ID.iam.gserviceaccount.com\n``````\nkubectl create sa -n $NAMESPACE apigee-cassandra-user-setup-$(apigeectl encode --org $ORG_NAME)-sa \\\n && kubectl label sa -n $NAMESPACE -l app=apigee-cassandra,org=$ORG_NAME \\\n && kubectl annotate serviceaccount \\\n --namespace $NAMESPACE apigee-cassandra-user-setup-$(apigeectl encode --org $ORG_NAME)-sa iam.gke.io/gcp-service-account=GSA_NAME@$PROJECT_ID.iam.gserviceaccount.com\n```\n- **MART** ```\nkubectl create sa -n $NAMESPACE apigee-mart-$(apigeectl encode --org $ORG_NAME)-sa \\\n && kubectl label sa -n $NAMESPACE -l app=apigee-mart,org=$ORG_NAME \\\n && kubectl annotate serviceaccount \\\n --namespace $NAMESPACE apigee-mart-$(apigeectl encode --org $ORG_NAME)-sa iam.gke.io/gcp-service-account=GSA_NAME@$PROJECT_ID.iam.gserviceaccount.com\n```\n- **Apigee Connect** ```\nkubectl create sa -n $NAMESPACE apigee-connect-$(apigeectl encode --org $ORG_NAME)-sa \\\n && kubectl label sa -n $NAMESPACE -l app=apigee-connect,org=$ORG_NAME \\\n && kubectl annotate serviceaccount \\\n --namespace $NAMESPACE apigee-connect-$(apigeectl encode --org $ORG_NAME)-sa iam.gke.io/gcp-service-account=GSA_NAME@$PROJECT_ID.iam.gserviceaccount.com\n```\n- **Apigee Watcher** ```\nkubectl create sa -n $NAMESPACE apigee-watcher-$(apigeectl encode --org $ORG_NAME)-sa \\\n && kubectl label sa -n $NAMESPACE -l app=apigee-watcher,org=$ORG_NAME \\\n && kubectl annotate serviceaccount \\\n --namespace $NAMESPACE apigee-watcher-$(apigeectl encode --org $ORG_NAME)-sa iam.gke.io/gcp-service-account=GSA_NAME@$PROJECT_ID.iam.gserviceaccount.com\n```\nFor each environment: **Note:** Ensure the GSA_NAME matches the component. In the instructions  below, GSA_NAME is not an environment variable.- **Runtime** ```\nkubectl create sa -n $NAMESPACE apigee-runtime-$(apigeectl encode --org $ORG_NAME --env $ENV_NAME)-sa \\\n && kubectl label sa -n $NAMESPACE -l app=apigee-runtime,org=$ORG_NAME,env=$ENV_NAME \\\n && kubectl annotate serviceaccount \\\n --namespace $NAMESPACE apigee-runtime-$(apigeectl encode --org $ORG_NAME --env $ENV_NAME)-sa iam.gke.io/gcp-service-account=GSA_NAME@$PROJECT_ID.iam.gserviceaccount.com\n```\n- **UDCA** ```\nkubectl create sa -n $NAMESPACE apigee-udca-$(apigeectl encode --org $ORG_NAME --env $ENV_NAME)-sa \\\n && kubectl label sa -n $NAMESPACE -l app=apigee-udca,org=$ORG_NAME,emv=$ENV_NAME \\\n && kubectl annotate serviceaccount \\\n --namespace $NAMESPACE apigee-udca-$(apigeectl encode --org $ORG_NAME --env $ENV_NAME)-sa iam.gke.io/gcp-service-account=GSA_NAME@$PROJECT_ID.iam.gserviceaccount.com\n```\n- **Synchronizer** ```\nkubectl create sa -n $NAMESPACE apigee-synchronizer-$(apigeectl encode --org $ORG_NAME --env $ENV_NAME)-sa \\\n && kubectl label sa -n $NAMESPACE -l app=apigee-synchronizer,org=$ORG_NAME,env=$ENV_NAME \\\n && kubectl annotate serviceaccount \\\n --namespace $NAMESPACE apigee-syncrhonizer-$(apigeectl encode --org $ORG_NAME --env $ENV_NAME)-sa iam.gke.io/gcp-service-account=GSA_NAME@$PROJECT_ID.iam.gserviceaccount.com\n```\n- Continue installing Apigee hybrid as you normally would.## \n Upgrading an install to use Workload Identity\nHere is a sample showing Google Service Accounts (GSA) created for Apigee:\n```\ngcloud iam service-accounts list | grep apigee\n```\n```\napigee-connect \u00a0 apigee-connect@$PROJECT_ID.iam.gserviceaccount.com \u00a0 \u00a0Falseapigee-runtime \u00a0 apigee-runtime@$PROJECT_ID.iam.gserviceaccount.com \u00a0 \u00a0Falseapigee-metrics \u00a0 apigee-metrics@$PROJECT_ID.iam.gserviceaccount.com \u00a0 \u00a0Falseapigee-mart \u00a0 \u00a0 \u00a0apigee-mart@$PROJECT_ID.iam.gserviceaccount.com \u00a0 \u00a0 \u00a0 Falseapigee-watcher \u00a0 apigee-watcher@$PROJECT_ID.iam.gserviceaccount.com \u00a0 \u00a0Falseapigee-sync \u00a0 \u00a0 \u00a0apigee-sync@$PROJECT_ID.iam.gserviceaccount.com \u00a0 \u00a0 \u00a0 Falseapigee-udca \u00a0 \u00a0 \u00a0apigee-udca@$PROJECT_ID.iam.gserviceaccount.com \u00a0 \u00a0 \u00a0 False\n```\nHere is a sample Kubernetes Service Accounts (KSA) created for Apigee (assumes Apigee hybrid 1.4 or higher is installed):\n```\nkubectl get sa -n $NAMESPACE\n```\n```\napigee-cassandra-schema-setup-ORG_NAME-cb84b88-sa \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a01 \u00a0 \u00a0 \u00a0 \u00a0 xxdapigee-cassandra-user-setup-ORG_NAME-cb84b88-sa \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a01 \u00a0 \u00a0 \u00a0 \u00a0 xxdapigee-connect-agent-ORG_NAME-cb84b88-sa \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 xxdapigee-init \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a01 \u00a0 \u00a0 \u00a0 \u00a0 xxdapigee-mart-ORG_NAME-cb84b88-sa \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a01 \u00a0 \u00a0 \u00a0 \u00a0 xxdapigee-metrics-apigee-telemetry \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a01 \u00a0 \u00a0 \u00a0 \u00a0 xxdapigee-runtime-ORG_NAME-ENV_NAME-1d0dc5e-sa \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a01 \u00a0 \u00a0 \u00a0 \u00a0 xxdapigee-synchronizer-ORG_NAME-ENV_NAME-1d0dc5e-sa \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 xxdapigee-udca-ORG_NAME-ENV_NAME-1d0dc5e-sa \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1 \u00a0 \u00a0 \u00a0 \u00a0 xxdapigee-watcher-ORG_NAME-cb84b88 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a01 \u00a0 \u00a0 \u00a0 \u00a0 xxd\n```\n**Where:** andmay be a shortened version of the organization and environment names.\n- Add the Workload Identity role to each service account:```\ngcloud iam service-accounts add-iam-policy-binding \\\n --role roles/iam.workloadIdentityUser \\\n --member \"serviceAccount:$PROJECT_ID.svc.id.goog[$NAMESPACE/$KSA_NAME]\" \\\n GSA_NAME@$PROJECT_ID.iam.gserviceaccount.com\n```For example, if you were setting the permissions for Apigee Synchronizer, you would run:```\nexport KSA_NAME=$(kubectl get sa -n apigee -l app=apigee-synchronizer,env=$ENV_NAME,org=$ORG_NAME --output=jsonpath={.items..metadata.name})\n``````\ngcloud iam service-accounts add-iam-policy-binding --role roles/iam.workloadIdentityUser --member \"serviceAccount:$PROJECT_ID.svc.id.goog[apigee/$KSA_NAME]\" apigee-sync@$PROJECT_ID.iam.gserviceaccount.com\n```\n- Annotate each KSA with the GSA details:```\nkubectl annotate serviceaccount \\\n --namespace $NAMESPACE \\\n $KSA_NAME \\\n iam.gke.io/gcp-service-account=GSA_NAME@$PROJECT_ID.iam.gserviceaccount.com\n```For example, if you were setting the permissions for Apigee Synchronizer, you would run:```\nexport KSA_NAME=$(kubectl get sa -n apigee -l app=apigee-synchronizer,env=$ENV_NAME,org=$ORG_NAME --output=jsonpath={.items..metadata.name})\n``````\nkubectl annotate serviceaccount --namespace $NAMESPACE $KSA_NAME iam.gke.io/gcp-service-account=apigee-sync@$PROJECT_ID.iam.gserviceaccount.com\n```\n- Validate if the steps worked:```\ngcloud config set project $PROJECT_ID\n``````\nkubectl run --rm -it --image google/cloud-sdk:slim --serviceaccount $KSA_NAME --namespace $NAMESPACE workload-identity-test -- gcloud auth list\n```If you don't see a command prompt, try pressing .If the steps were correctly run, you should see a response like the following:```\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Credentialed AccountsACTIVE \u00a0ACCOUNT* \u00a0 \u00a0 \u00a0 GSA@PROJECT_ID.iam.gserviceaccount.com\n```\n- If upgrading from a previous install, clean up secrets that contained service account private keys:```\nkubectl delete secrets -n $NAMESPACE $(k get secrets -n $NAMESPACE | grep svc-account | awk '{print $1}')\n```\n- Check logs:```\nkubectl logs -n $NAMESPACE -l app=apigee=synchronizer,env=$ENV_NAME,org=$ORG_NAME apigee-synchronizer\n```", "guide": "Apigee"}