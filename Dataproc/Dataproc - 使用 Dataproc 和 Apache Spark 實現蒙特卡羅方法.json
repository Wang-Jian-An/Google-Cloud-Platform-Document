{"title": "Dataproc - \u4f7f\u7528 Dataproc \u548c Apache Spark \u5be6\u73fe\u8499\u7279\u5361\u7f85\u65b9\u6cd5", "url": "https://cloud.google.com/dataproc/docs/tutorials/monte-carlo-methods-with-hadoop-spark?hl=zh-cn", "abstract": "# Dataproc - \u4f7f\u7528 Dataproc \u548c Apache Spark \u5be6\u73fe\u8499\u7279\u5361\u7f85\u65b9\u6cd5\n[Dataproc](https://cloud.google.com/dataproc?hl=zh-cn) \u548c [Apache Spark](https://spark.apache.org/) \u7232\u60a8\u63d0\u4f9b\u4e86\u53ef\u7528\u65bc\u904b\u884c\u4ee5 Java\u3001Python \u6216 Scala \u7de8\u5beb\u7684\u8499\u7279\u5361\u7f85\u6a21\u64ec\u7684\u57fa\u790e\u67b6\u69cb\u548c\u5bb9\u91cf\u3002\n\u8499\u7279\u5361\u7f85\u65b9\u6cd5\u6709\u52a9\u65bc\u89e3\u7b54\u5546\u696d\u3001\u5de5\u7a0b\u3001\u79d1\u5b78\u3001\u6578\u5b78\u548c\u5176\u4ed6\u9818\u57df\u7684\u5404\u7a2e\u554f\u984c\u3002\u8499\u7279\u5361\u7f85\u6a21\u64ec\u901a\u904e\u4f7f\u7528\u91cd\u8907\u96a8\u6a5f\u63a1\u6a23\u7232\u8b8a\u91cf\u5275\u5efa\u6982\u7387\u5206\u4f48\uff0c\u5f9e\u800c\u80fd\u5920\u7232\u4e00\u4e9b\u7121\u6cd5\u7528\u5176\u4ed6\u65b9\u6cd5\u89e3\u7b54\u7684\u554f\u984c\u63d0\u4f9b\u7b54\u6848\u3002\u4f8b\u5982\uff0c\u5728\u91d1\u878d\u9818\u57df\uff0c\u7232\u80a1\u7968\u671f\u6b0a\u5b9a\u50f9\u9700\u8981\u5206\u6790\u80a1\u7968\u50f9\u683c\u96a8\u6642\u9593\u8b8a\u5316\u7684\u6578\u5343\u7a2e\u65b9\u5f0f\u3002\u8499\u7279\u5361\u7f85\u65b9\u6cd5\u53ef\u4ee5\u6839\u64da\u5927\u91cf\u53ef\u80fd\u7684\u7d50\u679c\u6a21\u64ec\u80a1\u7968\u50f9\u683c\u7684\u9019\u4e9b\u8b8a\u5316\uff0c\u540c\u6642\u63a7\u5236\u76f8\u95dc\u554f\u984c\u53ef\u4ee5\u63a5\u53d7\u7684\u8f38\u5165\u57df\u3002\n\u5728\u904e\u53bb\uff0c\u904b\u884c\u6578\u5343\u6b21\u6a21\u64ec\u53ef\u80fd\u9700\u8981\u5f88\u9577\u6642\u9593\u4e26\u4e14\u8cbb\u7528\u9ad8\u6602\u3002\u85c9\u52a9 Dataproc\uff0c\u60a8\u53ef\u4ee5\u6309\u9700\u9810\u914d\u5bb9\u91cf\u4e26\u6309\u5206\u9418\u4ed8\u8cbb\u3002Apache Spark \u5141\u8a31\u60a8\u4f7f\u7528\u6578\u5341\u3001\u6578\u767e\u6216\u6578\u5343\u81fa\u670d\u52d9\u5668\u7684\u96c6\u7fa3\uff0c\u4ee5\u76f4\u89c0\u7684\u65b9\u5f0f\u904b\u884c\u6a21\u64ec\uff0c\u4e26\u6309\u9700\u64f4\u7e2e\u3002\u9019\u610f\u5473\u7740\u4ee5\u66f4\u5feb\u7684\u901f\u5ea6\u904b\u884c\u66f4\u591a\u6a21\u64ec\uff0c\u5f9e\u800c\u6709\u52a9\u65bc\u60a8\u7684\u4f01\u696d\u52a0\u901f\u5275\u65b0\u4e26\u66f4\u597d\u5730\u7ba1\u7406\u98a8\u96aa\u3002\n\u8655\u7406\u91d1\u878d\u6578\u64da\u6642\uff0c\u5b89\u5168\u6027\u81f3\u95dc\u91cd\u8981\u3002Dataproc \u5728 Google Cloud \u4e0a\u904b\u884c\uff0c\u9019\u6709\u52a9\u65bc\u4f7f\u7528\u591a\u7a2e\u65b9\u5f0f\u4f86\u78ba\u4fdd\u6578\u64da\u7684 [\u5b89\u5168\u6027\u548c\u79c1\u5bc6\u6027](https://cloud.google.com/security/overview?hl=zh-cn) \u3002\u4f8b\u5982\uff0c\u6240\u6709\u50b3\u8f38\u4e2d\u7684\u6578\u64da\u548c\u975c\u614b\u6578\u64da\u5747\u6703\u52a0\u5bc6\uff0c\u4e26\u4e14 Google Cloud \u7b26\u5408 [ISO 27001\u3001SOC3 \u548c PCI \u6a19\u6e96](https://cloud.google.com/security/compliance?hl=zh-cn) \u3002", "content": "## \u76ee\u6a19\n- \u5275\u5efa\u8a17\u7ba1\u5f0f Dataproc \u96c6\u7fa3\uff08 [\u9810\u5b89\u88dd Apache Spark](https://cloud.google.com/dataproc/docs/concepts/dataproc-versions?hl=zh-cn#supported_cloud_dataproc_versions) \uff09\u3002\n- \u4f7f\u7528 Python \u904b\u884c\u4e00\u500b\u8499\u7279\u5361\u7f85\u6a21\u64ec\u4f86\u9810\u4f30\u80a1\u7968\u6295\u8cc7\u7d44\u5408\u96a8\u6642\u9593\u7684\u589e\u9577\u60c5\u6cc1\u3002\n- \u4f7f\u7528 Scala \u904b\u884c\u4e00\u500b\u8499\u7279\u5361\u7f85\u6a21\u64ec\uff0c\u4ee5\u6a21\u64ec\u8ced\u5834\u5982\u4f55\u76c8\u5229\u3002\n## \u8cbb\u7528\nTitles in dynamic includes are not used anywhere, and we should avoid paying to translate them\u5728\u672c\u6587\u6a94\u4e2d\uff0c\u60a8\u5c07\u4f7f\u7528 Google Cloud \u7684\u4ee5\u4e0b\u6536\u8cbb\u7d44\u4ef6\uff1a- [Compute Engine](https://cloud.google.com/compute/pricing?hl=zh-cn) \n- [Dataproc](https://cloud.google.com/dataproc/docs/resources/pricing?hl=zh-cn) \n\u60a8\u53ef\u4f7f\u7528 [\u50f9\u683c\u8a08\u7b97\u5668](https://cloud.google.com/products/calculator?hl=zh-cn) \u6839\u64da\u60a8\u7684\u9810\u8a08\u4f7f\u7528\u60c5\u6cc1\u4f86\u4f30\u7b97\u8cbb\u7528\u3002 \nTitles in dynamic includes are not used anywhere, and we should avoid paying to translate them\u5b8c\u6210\u672c\u6587\u6a94\u4e2d\u63cf\u8ff0\u7684\u4efb\u52d9\u5f8c\uff0c\u60a8\u53ef\u4ee5\u901a\u904e\u522a\u9664\u6240\u5275\u5efa\u7684\u8cc7\u6e90\u4f86\u907f\u514d\u7e7c\u7e8c\u8a08\u8cbb\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1 [\u6e05\u7406](#clean-up) \u3002## \u6e96\u5099\u5de5\u4f5c\n- \u8a2d\u7f6e Google Cloud \u9805\u76ee- Titles in dynamic includes are not used anywhere, and we should avoid paying to translate them## \u5275\u5efa Dataproc \u96c6\u7fa3\u6309\u7167\u6b65\u9a5f\u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d [\u5275\u5efa Dataproc \u96c6\u7fa3](https://cloud.google.com/dataproc/docs/guides/create-cluster?hl=zh-cn#creating_a_cloud_dataproc_cluster) \u3002\u5305\u542b\u5169\u500b\u5de5\u4f5c\u5668\u7bc0\u9ede\u7684\u9ed8\u8a8d\u96c6\u7fa3\u8a2d\u7f6e\u8db3\u4ee5\u6eff\u8db3\u672c\u6559\u7a0b\u7684\u9700\u6c42\u3002## \u505c\u7528\u91dd\u5c0d\u8b66\u544a\u7684\u65e5\u8a8c\u8a18\u9304\u9ed8\u8a8d\u60c5\u6cc1\u4e0b\uff0cApache Spark \u6703\u5728\u63a7\u5236\u6aaf\u7a97\u53e3\u4e2d\u986f\u793a\u8a73\u7d30\u7684\u65e5\u8a8c\u8a18\u9304\u3002\u5728\u6309\u672c\u6559\u7a0b\u64cd\u4f5c\u6642\uff0c\u8acb\u5c07\u65e5\u8a8c\u8a18\u9304\u7d1a\u5225\u66f4\u6539\u7232\u50c5\u8a18\u9304\u932f\u8aa4\u3002\u8acb\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff1a\n### \u4f7f\u7528 ssh \u9023\u63a5\u5230 Dataproc \u96c6\u7fa3\u7684\u4e3b\u7bc0\u9edeDataproc \u96c6\u7fa3\u7684\u4e3b\u7bc0\u9ede\u5728\u5176\u865b\u64ec\u6a5f\u540d\u7a31\u4e2d\u5e36\u6709 `-m` \u5f8c\u7db4\u3002\n- Titles in dynamic includes are not used anywhere, and we should avoid paying to translate them\n- \u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\uff0c\u8f49\u5230 **\u865b\u64ec\u6a5f\u5be6\u4f8b** \u9801\u9762\u3002 [\u8f49\u5230\u201c\u865b\u64ec\u6a5f\u5be6\u4f8b\u201d](https://console.cloud.google.com/compute/instances?hl=zh-cn) \n- \u5728\u865b\u64ec\u6a5f\u5be6\u4f8b\u5217\u8868\u4e2d\uff0c\u9ede\u64ca\u8981\u9023\u63a5\u7684\u5be6\u4f8b\u6240\u5728\u884c\u4e2d\u7684 **SSH** \u3002\u5c07\u6253\u958b\u8207\u4e3b\u7bc0\u9ede\u9023\u63a5\u7684 SSH \u7a97\u53e3\u3002\n```\nConnected, host fingerprint: ssh-rsa 2048 ...\n...\nuser@clusterName-m:~$\n```\n### \u66f4\u6539\u65e5\u8a8c\u8a18\u9304\u8a2d\u7f6e\n- \u5728\u4e3b\u7bc0\u9ede\u7684\u4e3b\u76ee\u9304\u4e2d\uff0c\u8acb\u4fee\u6539 `/etc/spark/conf/log4j.properties` \u3002```\nsudo nano /etc/spark/conf/log4j.properties\n```\n- \u5c07 `log4j.rootCategory` \u8a2d\u7f6e\u7232 `ERROR` \u3002```\n# Set only errors to be logged to the consolelog4j.rootCategory=ERROR, consolelog4j.appender.console=org.apache.log4j.ConsoleAppenderlog4j.appender.console.target=System.errlog4j.appender.console.layout=org.apache.log4j.PatternLayoutlog4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n\n```\n- \u4fdd\u5b58\u66f4\u6539\u4e26\u9000\u51fa\u7de8\u8f2f\u5668\u3002\u5982\u679c\u8981\u518d\u6b21\u5553\u7528\u8a73\u7d30\u65e5\u8a8c\u8a18\u9304\uff0c\u8acb\u901a\u904e\u5c07 `.rootCategory` \u7684\u503c\u6062\u5fa9\u7232\u539f\u59cb ( `INFO` ) \u503c\u4f86\u64a4\u6d88\u66f4\u6539\u3002\n## Spark \u7de8\u7a0b\u8a9e\u8a00Spark \u652f\u6301 Python\u3001Scala \u548c Java \u4f5c\u7232\u7368\u7acb\u61c9\u7528\u7684\u7de8\u7a0b\u8a9e\u8a00\uff0c\u4f75\u7232 Python \u548c Scala \u63d0\u4f9b\u4ea4\u4e92\u5f0f\u89e3\u91cb\u5668\u3002\u60a8\u53ef\u4ee5\u6839\u64da\u500b\u4eba\u504f\u597d\u9078\u64c7\u7de8\u7a0b\u8a9e\u8a00\u3002\u672c\u6559\u7a0b\u4f7f\u7528\u4ea4\u4e92\u5f0f\u89e3\u91cb\u5668\uff0c\u56e0\u7232\u60a8\u53ef\u4ee5\u901a\u904e\u5b83\u5011\u66f4\u6539\u4ee3\u78bc\u3001\u5617\u8a66\u4e0d\u540c\u7684\u8f38\u5165\u503c\uff0c\u7136\u5f8c\u67e5\u770b\u7d50\u679c\uff0c\u5f9e\u800c\u65b9\u4fbf\u5730\u958b\u5c55\u5be6\u9a57\u3002## \u9810\u4f30\u6295\u8cc7\u7d44\u5408\u589e\u9577\u60c5\u6cc1\u5728\u91d1\u878d\u9818\u57df\uff0c\u8499\u7279\u5361\u7f85\u65b9\u6cd5\u6709\u6642\u7528\u65bc\u904b\u884c\u9810\u6e2c\u6295\u8cc7\u8868\u73fe\u7684\u6a21\u64ec\u3002\u901a\u904e\u5728\u4e00\u7cfb\u5217\u53ef\u80fd\u7684\u5e02\u5834\u689d\u4ef6\u4e0b\u751f\u6210\u96a8\u6a5f\u7684\u7d50\u679c\u6a23\u672c\uff0c\u8499\u7279\u5361\u7f85\u6a21\u64ec\u53ef\u4ee5\u89e3\u7b54\u95dc\u65bc\u6295\u8cc7\u7d44\u5408\u5e73\u5747\u8868\u73fe\u548c\u6700\u58de\u8868\u73fe\u7684\u554f\u984c\u3002\n\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u5275\u5efa\u4e00\u500b\u6a21\u64ec\uff0c\u8a72\u6a21\u64ec\u4f7f\u7528\u8499\u7279\u5361\u7f85\u65b9\u6cd5\u5617\u8a66\u57fa\u65bc\u4e00\u4e9b\u5e38\u898b\u7684\u5e02\u5834\u56e0\u7d20\u4f86\u9810\u4f30\u91d1\u878d\u6295\u8cc7\u7684\u589e\u9577\u60c5\u6cc1\u3002\n **\u6ce8\u610f** \uff1a\u6b64\u4ee3\u78bc\u50c5\u4f9b\u53c3\u8003\u3002\u8acb\u52ff\u4f7f\u7528\u6b64\u4ee3\u78bc\u5236\u5b9a\u6295\u8cc7\u6c7a\u7b56\u3002\n- \u5f9e Dataproc \u4e3b\u7bc0\u9ede\u5553\u52d5 Python \u89e3\u91cb\u5668\u3002```\npyspark\n```\u7b49\u5f85 Spark \u63d0\u793a\u7b26 `>>>` \u51fa\u73fe\u3002\n- \u8f38\u5165\u4ee5\u4e0b\u4ee3\u78bc\u3002\u8acb\u52d9\u5fc5\u4fdd\u7559\u51fd\u6578\u5b9a\u7fa9\u4e2d\u7684\u7e2e\u9032\u683c\u5f0f\u3002```\nimport randomimport timefrom operator import adddef grow(seed):\u00a0 \u00a0 random.seed(seed)\u00a0 \u00a0 portfolio_value = INVESTMENT_INIT\u00a0 \u00a0 for i in range(TERM):\u00a0 \u00a0 \u00a0 \u00a0 growth = random.normalvariate(MKT_AVG_RETURN, MKT_STD_DEV)\u00a0 \u00a0 \u00a0 \u00a0 portfolio_value += portfolio_value * growth + INVESTMENT_ANN\u00a0 \u00a0 return portfolio_value\n```\n- \u6309 `return` \u76f4\u5230\u518d\u6b21\u770b\u5230 Spark \u63d0\u793a\u7b26\u3002\u524d\u8ff0\u4ee3\u78bc\u5b9a\u7fa9\u4e86\u4e00\u500b\u51fd\u6578\uff0c\u8a72\u51fd\u6578\u6a21\u64ec\u7576\u6295\u8cc7\u8005\u64c1\u6709\u4e00\u500b\u6295\u8cc7\u65bc\u80a1\u7968\u5e02\u5834\u7684\u73fe\u6709\u9000\u4f11\u8cec\u6236\uff0c\u4e26\u4e14\u6bcf\u5e74\u5411\u5176\u8ffd\u52a0\u8cc7\u91d1\u6642\u53ef\u80fd\u767c\u751f\u7684\u60c5\u6cc1\u3002\u8a72\u51fd\u6578\u6bcf\u5e74\u5728\u6307\u5b9a\u671f\u9650\u5167\u4ee5\u767e\u5206\u6bd4\u5f62\u5f0f\u751f\u6210\u96a8\u6a5f\u7684\u6295\u8cc7\u56de\u5831\uff0c\u5b83\u5c07\u7a2e\u5b50\u503c\u4f5c\u7232\u53c3\u6578\u3002\u6b64\u503c\u7528\u65bc\u91cd\u65b0\u8a2d\u5b9a\u96a8\u6a5f\u6578\u751f\u6210\u5668\uff0c\u9019\u53ef\u78ba\u4fdd\u51fd\u6578\u5728\u6bcf\u6b21\u904b\u884c\u6642\u4e0d\u6703\u7372\u5f97\u76f8\u540c\u7684\u96a8\u6a5f\u6578\u5217\u8868\u3002 `random.normalvariate` \u51fd\u6578\u78ba\u4fdd\u5728\u6307\u5b9a\u5747\u503c\u548c\u6a19\u6e96\u5dee\u7684 [\u6b63\u614b\u5206\u4f48](https://wikipedia.org/wiki/Normal_distribution) \u4e2d\u51fa\u73fe\u96a8\u6a5f\u503c\u3002\u8a72\u51fd\u6578\u901a\u904e\u589e\u9577\u91cf\uff08\u53ef\u80fd\u662f\u6b63\u6578\u6216\u8ca0\u6578\uff09\u589e\u52a0\u6295\u8cc7\u7d44\u5408\u7684\u50f9\u503c\uff0c\u4e26\u589e\u52a0\u8868\u793a\u672a\u4f86\u6295\u8cc7\u7684\u5e74\u5ea6\u7e3d\u548c\u3002\u60a8\u5c07\u5728\u4e0b\u4e00\u6b65\u4e2d\u5b9a\u7fa9\u6240\u9700\u7684\u5e38\u91cf\u3002\n- \u5275\u5efa\u8a31\u591a\u7a2e\u5b50\u4ee5\u4f9b\u7d66\u8a72\u51fd\u6578\u3002\u5728 Spark \u63d0\u793a\u7b26\u8655\u8f38\u5165\u4ee5\u4e0b\u4ee3\u78bc\uff0c\u5373\u53ef\u751f\u6210 10000 \u500b\u7a2e\u5b50\uff1a```\nseeds = sc.parallelize([time.time() + i for i in range(10000)])\n````parallelize` \u64cd\u4f5c\u7684\u7d50\u679c\u662f\u751f\u6210 [\u5f48\u6027\u5206\u4f48\u5f0f\u6578\u64da\u96c6 (RDD)](http://spark.apache.org/docs/1.0.1/programming-guide.html#resilient-distributed-datasets-rdds) \uff0c\u9019\u662f\u4e00\u500b\u91dd\u5c0d\u4e26\u884c\u8655\u7406\u9032\u884c\u512a\u5316\u7684\u5143\u7d20\u96c6\u5408\u3002\u5728\u672c\u4f8b\u4e2d\uff0cRDD \u5305\u542b\u57fa\u65bc\u7576\u524d\u7cfb\u7d71\u6642\u9593\u7684\u7a2e\u5b50\u3002\u5275\u5efa RDD \u6642\uff0cSpark \u6703\u6839\u64da\u53ef\u7528\u7684\u5de5\u4f5c\u5668\u548c\u6838\u5fc3\u6578\u5c0d\u6578\u64da\u9032\u884c\u5206\u7247\u3002\u5728\u672c\u4f8b\u4e2d\uff0cSpark \u9078\u64c7\u4f7f\u7528\u516b\u500b\u5206\u7247\uff0c\u6bcf\u500b\u6838\u5fc3\u4e00\u500b\u5206\u7247\u3002\u9019\u4e00\u5206\u7247\u6bd4\u4f8b\u8db3\u4ee5\u5b8c\u6210\u9019\u500b\u5305\u542b 10000 \u500b\u6578\u64da\u9805\u7684\u6a21\u64ec\u3002\u5c0d\u65bc\u8f03\u5927\u7684\u6a21\u64ec\uff0c\u6bcf\u500b\u5206\u7247\u53ef\u80fd\u5927\u65bc\u9ed8\u8a8d\u4e0a\u9650\u3002\u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u6307\u5b9a `parallelize` \u7684\u7b2c\u4e8c\u500b\u53c3\u6578\u53ef\u4ee5\u589e\u52a0\u5206\u7247\u6578\u91cf\uff0c\u9019\u6709\u52a9\u65bc\u8b93\u6bcf\u500b\u5206\u7247\u7684\u5927\u5c0f\u6613\u65bc\u7ba1\u7406\uff0c\u800c Spark \u4ecd\u80fd\u5145\u5206\u5229\u7528\u6240\u6709\u516b\u500b\u6838\u5fc3\u3002\n- \u5c07\u5305\u542b\u7a2e\u5b50\u7684 RDD \u50b3\u905e\u7d66\u589e\u9577\u51fd\u6578\u3002```\nresults = seeds.map(grow)\n````map` \u65b9\u6cd5\u5c07 RDD \u4e2d\u7684\u6bcf\u500b\u7a2e\u5b50\u50b3\u905e\u7d66 `grow` \u51fd\u6578\uff0c\u4e26\u5c07\u6bcf\u500b\u7d50\u679c\u9644\u52a0\u5230\u5b58\u5132\u5728 `results` \u4e2d\u7684\u65b0 RDD\u3002\u8acb\u6ce8\u610f\uff0c\u9019\u500b\u57f7\u884c \u8f49\u63db\u7684\u64cd\u4f5c\u4e0d\u6703\u7acb\u5373\u751f\u6210\u7d50\u679c\u3002\u9664\u975e\u60a8\u9700\u8981\u7d50\u679c\uff0c\u5426\u5247 Spark \u4e0d\u6703\u57f7\u884c\u6b64\u64cd\u4f5c\u3002\u9019\u7a2e\u201c\u60f0\u6027\u6c42\u503c\u201d \u5c31\u662f\u60a8\u53ef\u4ee5\u8f38\u5165\u4ee3\u78bc\u800c\u4e0d\u5b9a\u7fa9\u5e38\u91cf\u7684\u539f\u56e0\u3002\n- \u7232\u8a72\u51fd\u6578\u6307\u5b9a\u4e00\u4e9b\u503c\u3002```\nINVESTMENT_INIT = 100000 \u00a0# starting amountINVESTMENT_ANN = 10000 \u00a0# yearly new investmentTERM = 30 \u00a0# number of yearsMKT_AVG_RETURN = 0.11 # percentageMKT_STD_DEV = 0.18 \u00a0# standard deviation\n```\n- \u8abf\u7528 `reduce` \u4ee5\u805a\u5408 RDD \u4e2d\u7684\u503c\u3002\u8f38\u5165\u4ee5\u4e0b\u4ee3\u78bc\u4ee5\u5c0d RDD \u4e2d\u7684\u7d50\u679c\u6c42\u548c\uff1a```\nsum = results.reduce(add)\n```\n- \u4f30\u7b97\u4e26\u986f\u793a\u5e73\u5747\u56de\u5831\uff1a```\nprint (sum / 10000.)\n```\u8acb\u52d9\u5fc5\u5728\u672b\u5c3e\u6dfb\u52a0\u9ede ( `.` ) \u5b57\u7b26\u3002\u5b83\u8868\u793a\u6d6e\u9ede\u904b\u7b97\u3002\n- \u73fe\u5728\u6539\u8b8a\u4e00\u500b\u5047\u8a2d\u689d\u4ef6\uff0c\u770b\u770b\u7d50\u679c\u5982\u4f55\u8b8a\u5316\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u7232\u5e02\u5834\u7684\u5e73\u5747\u56de\u5831\u8f38\u5165\u4e00\u500b\u65b0\u503c\uff1a```\nMKT_AVG_RETURN = 0.07\n```\n- \u518d\u6b21\u904b\u884c\u6a21\u64ec\u3002```\nprint (sc.parallelize([time.time() + i for i in range(10000)]) \\\u00a0 \u00a0 \u00a0 \u00a0 .map(grow).reduce(add)/10000.)\n```\n- \u5b8c\u6210\u5be6\u9a57\u5f8c\uff0c\u6309 `CTRL+D` \u9000\u51fa Python \u89e3\u91cb\u5668\u3002\n## \u7528 Scala \u7de8\u5beb\u8499\u7279\u5361\u7f85\u6a21\u64ec\u8846\u6240\u5468\u77e5\uff0c\u8499\u7279\u5361\u7f85\u5176\u5be6\u662f\u4e00\u500b\u71b1\u9580\u7684\u8ced\u535a\u6a21\u64ec\u5de5\u5177\u3002\u5728\u672c\u90e8\u5206\u4e2d\uff0c\u60a8\u5c07\u4f7f\u7528 Scala \u5275\u5efa\u4e00\u500b\u6a21\u64ec\uff0c\u6a21\u64ec\u8ced\u5834\u5728\u535a\u5f69\u904a\u6232\u4e2d\u4eab\u6709\u7684\u6578\u5b78\u512a\u52e2\u3002\u771f\u5be6\u8ced\u5834\u7684\u201c\u838a\u5bb6\u512a\u52e2\u201d\u56e0\u8ced\u5c40\u800c\u7570\uff1b\u4f8b\u5982\uff0c\u5c0d\u65bc [\u57fa\u8afe](https://wikipedia.org/wiki/Keno) \uff0c\u9019\u500b\u6bd4\u4f8b\u9ad8\u65bc 20%\u3002\u672c\u6559\u7a0b\u5275\u5efa\u4e86\u4e00\u500b\u7c21\u55ae\u7684\u8ced\u5c40\uff0c\u5176\u4e2d\u838a\u5bb6\u53ea\u6709\u767e\u5206\u4e4b\u4e00\u7684\u512a\u52e2\u3002\u4ee5\u4e0b\u662f\u8ced\u5c40\u898f\u5247\uff1a- \u73a9\u5bb6\u5f9e\u6295\u6ce8\u8cc7\u91d1\u4e2d\u62ff\u51fa\u591a\u500b\u7c4c\u78bc\u4e0b\u6ce8\u3002\n- \u73a9\u5bb6\u64f2\u51fa\u4e00\u500b 100 \u9762\u7684\u9ab0\u5b50\uff08\u90a3\u8a72\u6709\u591a\u9177\uff1f\uff09\u3002\n- \u5982\u679c\u64f2\u9ab0\u7684\u7d50\u679c\u662f 1 \u5230 49 \u4e4b\u9593\u7684\u6578\u5b57\uff0c\u73a9\u5bb6\u8d0f\u5f97\u8ced\u6ce8\u3002\n- \u5982\u679c\u64f2\u9ab0\u7d50\u679c\u5728 50 \u5230 100 \u4e4b\u9593\uff0c\u5247\u73a9\u5bb6\u8f38\u6389\u8ced\u6ce8\u3002\n\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u9019\u500b\u8ced\u5c40\u7232\u73a9\u5bb6\u5236\u9020\u4e86\u767e\u5206\u4e4b\u4e00\u7684\u52a3\u52e2\uff0c\u4e5f\u5c31\u662f\u8aaa\uff0c\u5728\u6bcf\u6b21\u6295\u64f2\u7684 100 \u500b\u53ef\u80fd\u7d50\u679c\u4e2d\uff0c\u6709 51 \u500b\u6703\u4f7f\u73a9\u5bb6\u8f38\u6389\u8ced\u5c40\u3002\n\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u5275\u5efa\u4e26\u904b\u884c\u8ced\u5c40\uff1a- \u5f9e Dataproc \u4e3b\u7bc0\u9ede\u5553\u52d5 Scala \u89e3\u91cb\u5668\u3002```\nspark-shell\n```\n- \u8907\u88fd\u4e26\u7c98\u8cbc\u4ee5\u4e0b\u4ee3\u78bc\u4ee5\u5275\u5efa\u8ced\u5c40\u3002\u5728\u7e2e\u9032\u65b9\u9762\uff0cScala \u8207 Python \u8981\u6c42\u4e0d\u540c\uff0c\u56e0\u6b64\u60a8\u53ea\u9700\u5728 `scala>` \u63d0\u793a\u7b26\u8655\u8907\u88fd\u4e26\u7c98\u8cbc\u6b64\u4ee3\u78bc\u5373\u53ef\u3002```\nval STARTING_FUND = 10val STAKE = 1 \u00a0 // the amount of the betval NUMBER_OF_GAMES = 25def rollDie: Int = {\u00a0 \u00a0 val r = scala.util.Random\u00a0 \u00a0 r.nextInt(99) + 1}def playGame(stake: Int): (Int) = {\u00a0 \u00a0 val faceValue = rollDie\u00a0 \u00a0 if (faceValue < 50)\u00a0 \u00a0 \u00a0 \u00a0 (2*stake)\u00a0 \u00a0 else\u00a0 \u00a0 \u00a0 \u00a0 (0)}// Function to play the game multiple times// Returns the final fund amountdef playSession(\u00a0 \u00a0startingFund: Int = STARTING_FUND,\u00a0 \u00a0stake: Int = STAKE,\u00a0 \u00a0numberOfGames: Int = NUMBER_OF_GAMES):\u00a0 \u00a0(Int) = {\u00a0 \u00a0 // Initialize values\u00a0 \u00a0 var (currentFund, currentStake, currentGame) = (startingFund, 0, 1)\u00a0 \u00a0 // Keep playing until number of games is reached or funds run out\u00a0 \u00a0 while (currentGame <= numberOfGames && currentFund > 0) {\u00a0 \u00a0 \u00a0 \u00a0 // Set the current bet and deduct it from the fund\u00a0 \u00a0 \u00a0 \u00a0 currentStake = math.min(stake, currentFund)\u00a0 \u00a0 \u00a0 \u00a0 currentFund -= currentStake\u00a0 \u00a0 \u00a0 \u00a0 // Play the game\u00a0 \u00a0 \u00a0 \u00a0 val (winnings) = playGame(currentStake)\u00a0 \u00a0 \u00a0 \u00a0 // Add any winnings\u00a0 \u00a0 \u00a0 \u00a0 currentFund += winnings\u00a0 \u00a0 \u00a0 \u00a0 // Increment the loop counter\u00a0 \u00a0 \u00a0 \u00a0 currentGame += 1\u00a0 \u00a0 }\u00a0 \u00a0 (currentFund)}\n```\n- \u6309 `return` \uff0c\u76f4\u5230\u770b\u5230 `scala>` \u63d0\u793a\u7b26\u3002\n- \u8f38\u5165\u4ee5\u4e0b\u4ee3\u78bc\uff0c\u958b 25 \u5834\u8ced\u5c40\uff0c\u9019\u662f `NUMBER_OF_GAMES` \u7684\u9ed8\u8a8d\u503c\u3002```\nplaySession()\n```\u958b\u59cb\u6642\u60a8\u7684\u6295\u6ce8\u8cc7\u91d1\u7684\u503c\u7232 10 \u500b\u55ae\u4f4d\u3002\u73fe\u5728\u662f\u8b8a\u9ad8\u4e86\u9084\u662f\u8b8a\u4f4e\u4e86\uff1f\n- \u73fe\u5728\u6a21\u64ec 10000 \u500b\u73a9\u5bb6\u6bcf\u5834\u4e0b\u6ce8 100 \u500b\u7c4c\u78bc\u3002\u5728\u4e00\u500b\u6703\u8a71\u4e2d\u958b 10000 \u5834\u8ced\u5c40\u3002\u6b64\u8499\u7279\u5361\u7f85\u6a21\u64ec\u5c07\u8a08\u7b97\u5728\u6703\u8a71\u7d50\u675f\u524d\u8f38\u5149\u6240\u6709\u8cc7\u91d1\u7684\u6982\u7387\u3002\u8f38\u5165\u4ee5\u4e0b\u4ee3\u78bc\uff1a```\n(sc.parallelize(1 to 10000, 500)\u00a0 .map(i => playSession(100000, 100, 250000))\u00a0 .map(i => if (i == 0) 1 else 0)\u00a0 .reduce(_+_)/10000.0)\n```\u8acb\u6ce8\u610f\uff0c\u8a9e\u6cd5 `.reduce(_+_)` \u662f Scala \u4e2d\u7684\u7c21\u5beb\uff0c\u5176\u4f7f\u7528\u6c42\u548c\u51fd\u6578\u9032\u884c\u5408\u4f75\u3002\u5b83\u7684\u529f\u80fd\u7b49\u540c\u65bc\u60a8\u5728 Python \u793a\u4f8b\u4e2d\u770b\u5230\u7684 `.reduce(add)` \u8a9e\u6cd5\u3002\u4e0a\u8ff0\u4ee3\u78bc\u57f7\u884c\u4ee5\u4e0b\u6b65\u9a5f\uff1a- \u4f7f\u7528\u8ced\u5c40\u6703\u8a71\u7684\u7d50\u679c\u5275\u5efa RDD\u3002\n- \u5c07\u7834\u7522\u73a9\u5bb6\u7684\u7d50\u679c\u66ff\u63db\u7232\u6578\u5b57`1`\uff0c\u5c07\u975e\u96f6\u7d50\u679c\u66ff\u63db\u7232\u6578\u5b57`0`\u3002\n- \u7232\u7834\u7522\u73a9\u5bb6\u6578\u91cf\u6c42\u548c\u3002\n- \u5c07\u7e3d\u548c\u9664\u4ee5\u73a9\u5bb6\u6578\u91cf\u3002\n\u5178\u578b\u7684\u7d50\u679c\u53ef\u80fd\u7232\uff1a```\n0.998\n```\u5373\u4f7f\u8ced\u5834\u53ea\u6709\u767e\u5206\u4e4b\u4e00\u7684\u512a\u52e2\uff0c\u9019\u4e5f\u5e7e\u4e4e\u53ef\u4ee5\u4fdd\u8b49\u60a8\u6703\u8f38\u5149\u6240\u6709\u7684\u9322\u3002\n## \u6e05\u7406\n### \u522a\u9664\u9805\u76ee- Titles in dynamic includes are not used anywhere, and we should avoid paying to translate them\n- **\u8b66\u544a** \uff1a\u522a\u9664\u9805\u76ee\u6703\u7522\u751f\u4ee5\u4e0b\u5f71\u97ff- **\u9805\u76ee\u4e2d\u7684\u6240\u6709\u5167\u5bb9\u90fd\u6703\u88ab\u522a\u9664\u3002** \u5982\u679c\u60a8\u5c07\u73fe\u6709\u9805\u76ee\u7528\u65bc\u672c\u6587\u6a94\u4e2d\u7684\u4efb\u52d9\uff0c\u5247\u522a\u9664\u8a72\u9805\u76ee\u5f8c\uff0c\u9084\u5c07\u522a\u9664\u60a8\u5df2\u5728\u8a72\u9805\u76ee\u4e2d\u5b8c\u6210\u7684\u4efb\u4f55\u5176\u4ed6\u5de5\u4f5c\u3002\n- **\u81ea\u5b9a\u7fa9\u9805\u76ee ID \u4e1f\u5931\u3002** \u5275\u5efa\u6b64\u9805\u76ee\u6642\uff0c\u60a8\u53ef\u80fd\u5275\u5efa\u4e86\u8981\u5728\u5c07\u4f86\u4f7f\u7528\u7684\u81ea\u5b9a\u7fa9\u9805\u76ee ID\u3002\u8981\u4fdd\u7559\u4f7f\u7528\u8a72\u9805\u76ee ID \u7684\u7db2\u5740\uff08\u4f8b\u5982`appspot.com`\u7db2\u5740\uff09\uff0c\u8acb\u522a\u9664\u9805\u76ee\u5167\u7684\u6240\u9078\u8cc7\u6e90\uff0c\u800c\u4e0d\u662f\u522a\u9664\u6574\u500b\u9805\u76ee\u3002\n- \u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\uff0c\u9032\u5165 **\u7ba1\u7406\u8cc7\u6e90** \u9801\u9762\u3002 [\u8f49\u5230\u201c\u7ba1\u7406\u8cc7\u6e90\u201d](https://console.cloud.google.com/iam-admin/projects?hl=zh-cn) \n- \u5728\u9805\u76ee\u5217\u8868\u4e2d\uff0c\u9078\u64c7\u8981\u522a\u9664\u7684\u9805\u76ee\uff0c\u7136\u5f8c\u9ede\u64ca **\u522a\u9664** \u3002\n- \u5728\u5c0d\u8a71\u6846\u4e2d\u8f38\u5165\u9805\u76ee ID\uff0c\u7136\u5f8c\u9ede\u64ca **\u95dc\u9589** \u4ee5\u522a\u9664\u9805\u76ee\u3002\n## \u5f8c\u7e8c\u6b65\u9a5f\n- \u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u5411 Dataproc \u63d0\u4ea4 Spark \u4f5c\u696d\uff0c\u800c\u4e0d\u5fc5\u4f7f\u7528`ssh`\u9023\u63a5\u5230\u96c6\u7fa3\uff0c\u8acb\u53c3\u95b1 [\u63d0\u4ea4\u4f5c\u696d](https://cloud.google.com/dataproc/docs/guides/submit-job?hl=zh-cn)", "guide": "Dataproc"}