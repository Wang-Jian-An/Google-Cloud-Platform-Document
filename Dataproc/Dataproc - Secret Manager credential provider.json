{"title": "Dataproc - Secret Manager credential provider", "url": "https://cloud.google.com/dataproc/docs/guides/hadoop-google-secret-manager-credential-provider", "abstract": "# Dataproc - Secret Manager credential provider\n**Objective:** Learn how to use the Secret Manager as a credential store to safely store and access sensitive Dataproc data processed by applications running on a Dataproc cluster.\n**Note:** This feature is available in Dataproc clusters created with image versions 2.1.41+ and 2.2.6+.\n", "content": "## Overview\nThe [Secret Manager](/secret-manager/docs/overview) can safeguard your sensitive data, such as your API keys, passwords, and certificates. Use it to manage, access, and audit your secrets across Google Cloud.\nThe `GoogleHadoopSecretManagerCredentialProvider` API, which integrates with the Secret Manager, is an implementation of the [Hadoop CredentialProvider API](https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/CredentialProviderAPI.html) , a solution for securing sensitive credentials against public access.\nYou can use the Hadoop credential provider API in the following ways:\n- Use [Hadoop credential commands](#hadoop_credential_commands) .\n- [Configure OSS components](#configure_oss_components) , such as Hive, to work with with Secret Manager.## Terminology\nThe following table describes terms used in this document.\n| Term  | Description                                                       |\n|:-----------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Secret  | A secret is a project-global object that contains a collection of metadata and secret versions. Secret Manager lets you store, manage, and access secrets as binary blobs or text strings.           |\n| Credential | In Hadoop and other Dataproc hosted applications, a credential consists of a credential name (ID) and credential value (password). A credential ID and value map to a secret ID and secret value (secret version) in Secret Manager. |\n## Hadoop credential commands\nYou can use `hadoop credential` command to create, list, and manage secrets. `hadoop credential` commands use this general format: `hadoop credential` `` `` `` .\nIn the following examples, the `-provider` flag is added to specify the provider type and location (the provider store). The `gsm://` scheme specifies the Secret Manager.\n- Create a secret with the specified secret ID. The command doesn't create the secret if the specified secret ID exists. This behavior is consistent with the Hadoop `CredentialProvider` API.```\nhadoop credential create secret-id -provider gsm://projects/PROJECT_ID -v VALUE\n```\n- List secrets stored in a project.```\nhadoop credential list -provider gsm://projects/PROJECT_ID\n```\n- Check if a secret exists in a project with a specified value.```\nhadoop credential check SECRET_ID -provider gsm://projects/PROJECT_ID -v VALUE\n```\n- Check for a specific secret version in a config file.```\nhadoop credential conf CONFIG_FILE check SECRET_ID -provider gsm://projects/project-id -v VALUE\n```\n- : THe XML file that sets `hadoop.security.credstore.google-secret-manager.secret-version` .\n- Delete all versions of a secret in a project.```\nhadoop credential delete SECRET_ID -provider gsm://projects/ PROJECT_ID\n```\nSee the [Hadoop Commands Guide](https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/CommandsManual.html#credential) for more information.\n## Configure OSS components\nYou can configure [Hadoop and other supported other OSS components](https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/CredentialProviderAPI.html#Usage_Overview) to work with the Secret Manager by setting the following component properties:\n- **Provider path** (required): The provider path property, `hadoop.security.credential.provider.path` , is a comma-separated list of one or more credential provider URIs that is traversed to resolve a credential.```\n--properties=hadoop.security.credential.provider.path=gsm://projects/project-id\n```- A`scheme`is used to indicate the type of credential provider. Hadoop schemes include`jceks://`,`user://`,`localjceks://`. Use the`gsm://`scheme as shown in the previous example to search for the credential in Secret Manager.\n- **Substitute dot operator** (optional): The Secret Manager doesn't support the dot( `.` ) operator in secret names, but OSS component credential keys can contain this operator. When this property is set to `true` . you can replace dot( `.` )s with hyphen( `-` )s in credential names. For example, when this property is set to `true` , you can specify the credential name `a.b.c` as `a-b-c` when passing it to Secret Manager. This property is only needed to specify a credential using [Hadoop credential commands](#hadoop_credential_commands) or when an OSS component tries to resolve credentials. It has no effect on create, list, or delete Hadoop credential commands.```\n--properties=hadoop.security.credstore.google-secret-manager.secret-id.substitute-dot-operator=true\n```\n- **Secret version** (optional): Secrets in Secret Manager can have multiple versions (values). Use this property to access a secret version. By default, the Secret Manager accesses the `LATEST` version, which resolves to the latest value of the secret at runtime. A best practice is to define this property for stable access in production environments.```\n--properties=hadoop.security.credstore.google-secret-manager.secret-version=1\n```## Hive Metastore examples\nThe Hive Metastore property, `javax.jdo.option.ConnectionPassword` , contains the password used to authenticate access to a metastore database. This password is saved in plain-text format in `hive-site.xml` , which represents security risk. A production best-practice is to store the password in Secret Manager, then update the `hive-site.xml` config file to allow the Hive Metastore service to read the password from Secret Manager.\nThe following sections provide instructions on how to use Secret Manager in different Hive Metastore scenarios.\n### Hive cluster with local metastore\n- Run the following command locally or in [Cloud Shell](/shell) to [create a Dataproc cluster](/dataproc/docs/guides/create-cluster) with the required [cluster properties](/dataproc/docs/concepts/configuring-clusters/cluster-properties) .```\ngcloud dataproc clusters create CLUSTER_NAME \\\n\u00a0\u00a0\u00a0\u00a0--region=REGION \\\n\u00a0\u00a0\u00a0\u00a0...other flags as needed... \\\n\u00a0\u00a0\u00a0\u00a0--properties=\"hive:hadoop.security.credential.provider.path=gsm://projects/PROJECT_ID,hive:hadoop.security.credstore.google-secret-manager.secret-id.substitute-dot-operator=true\"\n```\n- Create a secret. You can create a secret using the Secret Manager or the `hadoop credential` command.Run`hadoop credential`and other commands listed in the following examples from the Dataproc master node command line after [using SSH](/dataproc/docs/concepts/accessing/ssh) to connect to and open a terminal window on that node.- **Alternative 1:**  [Use the Secret Manager to create a secret](//secret-manager/docs/create-secret-quickstart) - Secret name:`/projects/` `` `/secrets/javax-jdo-option-ConnectionPassword/versions/1`\n- Secret value:`METASTORE_PASSWORD`.\n- **Alternative 2:** Use the `hadoop credential` command to create a secret.```\nsudo hadoop credential create javax-jdo-option-ConnectionPassword -provider gsm://projects/PROJECT_ID -v METASTORE_PASSWORD\n```- : Since the Secret Manager does not support the dot(`.`) operator, substitute any dot(`.`)s in the password with hyphen(`-`)s.\n- Verify that the secret exists.```\nsudo hadoop credential list -provider gsm://projects/PROJECT_ID\n```\n- Remove `javax.jdo.option.ConnectionPassword` from the `hive-site.xml` file. The following command opens the file for editing in `vim` .```\nsudo vim /etc/hive/conf/hive-site.xml\n```\n- Restart Hive Metastore.```\nsudo systemctl restart hive-metastore\n```\n### Hive cluster with external metastore\n- Run the following command locally or in [Cloud Shell](/shell) to [create a Dataproc cluster](/dataproc/docs/guides/create-cluster) with the following [cluster properties](/dataproc/docs/concepts/configuring-clusters/cluster-properties) .```\ngcloud dataproc clusters create CLUSTER_NAME \\\n\u00a0\u00a0\u00a0\u00a0--region=REGION \\\n\u00a0\u00a0\u00a0\u00a0...other flags as needed... \\\n\u00a0\u00a0\u00a0\u00a0--properties=core:fs.defaultFS=gs://METASTORE_CLUSTER_PROXY_BUCKET,dataproc:dataproc.components.deactivate=\"hdfs hive-server2 hive-metastore\"\n```\n- Create a secret. You can create a secret using the Secret Manager or the `hadoop credential` command.Run`hadoop credential`and other commands listed in the following examples from the Dataproc master node command line after [using SSH](/dataproc/docs/concepts/accessing/ssh) to connect to and open a terminal window on that node.- **Alternative 1:** [Use the Secret Manager to create a secret](/secret-manager/docs/create-secret-quickstart) :- Secret name:`/projects/` `` `/secrets/javax-jdo-option-ConnectionPassword/versions/1`\n- Secret value:`METASTORE_PASSWORD`.\n- **Alternative 2:** Use the`hadoop credential`command to create a secret.```\nsudo hadoop credential create javax-jdo-option-ConnectionPassword -provider gsm://projects/PROJECT_ID -v METASTORE_PASSWORD\n```- : Since the Secret Manager does not support the dot(`.`) operator, substitute dot(`.`)s in the password with hyphen(`-`)s.\n- Verify that the secret exists.```\nsudo hadoop credential list -provider gsm://projects/PROJECT_ID\n \n```\n- Run the following command locally or in Cloud Shell to [create a Dataproc cluster](/dataproc/docs/guides/create-cluster) with the following [cluster properties](/dataproc/docs/concepts/configuring-clusters/cluster-properties) . Use this cluster to run Hive jobs and connects to the external metastore.```\ngcloud dataproc clusters create CLUSTER_NAME \\\n\u00a0\u00a0\u00a0\u00a0--region=REGION \\\n\u00a0\u00a0\u00a0\u00a0...other flags as needed...\n\u00a0\u00a0\u00a0\u00a0--properties=\"hive:javax.jdo.option.ConnectionURL=jdbc:mysql://metastore-cluster-name-m/metastore,hive:hadoop.security.credential.provider.path=gsm://projects/project-id,hive:hadoop.security.credstore.google-secret-manager.secret-id.substitute-dot-operator=true\"\n```## For more information\n- Explore the [Hive Documentation](https://cwiki.apache.org/confluence/display/Hive/AdminManual+Configuration#AdminManualConfiguration-RemovingHiveMetastorePasswordfromHiveConfiguration) .", "guide": "Dataproc"}