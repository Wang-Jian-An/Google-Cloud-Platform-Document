{"title": "Dataproc - Dataproc Service Account Based Secure Multi-tenancy", "url": "https://cloud.google.com/dataproc/docs/concepts/iam/sa-multi-tenancy", "abstract": "# Dataproc - Dataproc Service Account Based Secure Multi-tenancy\nDataproc Service Account based Secure Multi-tenancy (called \"secure multi-tenancy\", below) enables you to share a cluster with multiple users, with a set of users mapped to service accounts when the cluster is created. With secure multi-tenancy, users can submit interactive workloads to the cluster with isolated user identities.\nWhen a user submits a job to the cluster, the job:\n- runs as a specific OS user with a specific Kerberos principal\n- accesses Google Cloud resources using the mapped service account credentials", "content": "## Considerations and Limitations\nWhen you create a cluster with secure multi-tenancy enabled:\n- You can submit jobs only through the Dataproc [Jobs API](https://cloud.google.com/dataproc/docs/guides/submit-job) .\n- The cluster is available only to users with mapped service accounts. For example, unmapped users cannot run jobs on the cluster.\n- Service accounts can be mapped only to Google users, not Google groups.\n- The Dataproc [Component Gateway](/dataproc/docs/concepts/accessing/dataproc-gateways) is not enabled.\n- Direct SSH access to the cluster and Compute Engine features, such as the ability to run startup scripts on cluster VMs, are blocked. Also, jobs cannot run with `sudo` privileges.\n- [Kerberos](/dataproc/docs/concepts/configuring-clusters/security) is enabled and configured on the cluster for secure intra-cluster communication. End user authentication through Kerberos is not supported.\n- Dataproc [Workflows](/dataproc/docs/concepts/workflows/overview) are not supported.## Creating a secure multi-tenancy cluster\nTo create a Dataproc secure multi-tenancy cluster, use the `--secure-multi-tenancy-user-mapping` flag to specify a list of user-to-service-account mappings.\n**Example:**\nThe following command creates a cluster, with user `bob@my-company.com` mapped to service account `service-account-for-bob@iam.gserviceaccount.com` and user `alice@my-company.com` mapped to service account `service-account-for-alice@iam.gserviceaccount.com` .\n```\ngcloud dataproc clusters create my-cluster \\\n\u00a0\u00a0\u00a0\u00a0--secure-multi-tenancy-user-mapping=\"bob@my-company.com:service-account-for-bob@iam.gserviceaccount.com,alice@my-company.com:service-account-for-alice@iam.gserviceaccount.com\" \\\n\u00a0\u00a0\u00a0\u00a0--scopes=https://www.googleapis.com/auth/iam \\\n\u00a0\u00a0\u00a0\u00a0--service-account=cluster-service-account@iam.gserviceaccount.com \\\n\u00a0\u00a0\u00a0\u00a0--region=region \\\n\u00a0\u00a0\u00a0\u00a0other args ...\n```\nAlternatively, you can store the list of user-to-service-account mappings in a local or Cloud Storage YAML or JSON file. Use the `--identity-config-file` flag to specify the file location.\nSample identity config file:\n```\nuser_service_account_mapping:\n bob@my-company.com: service-account-for-bob@iam.gserviceaccount.com\n alice@my-company.com: service-account-for-alice@iam.gserviceaccount.com\n```\nSample command to create the cluster using the `--identity-config-file` flag:\n```\ngcloud dataproc clusters create my-cluster \\\n\u00a0\u00a0\u00a0\u00a0--identity-config-file=local or \"gs://bucket\" /path/to/identity-config-file \\\n\u00a0\u00a0\u00a0\u00a0--scopes=https://www.googleapis.com/auth/iam \\\n\u00a0\u00a0\u00a0\u00a0--service-account=cluster-service-account@iam.gserviceaccount.com \\\n\u00a0\u00a0\u00a0\u00a0--region=region \\\n\u00a0\u00a0\u00a0\u00a0other args ...\n```\n**Notes:**\n- As shown in the above commands, cluster `--scopes` must include at least `https://www.googleapis.com/auth/iam` , which is necessary for the cluster service account to perform impersonation.\n- The cluster service account must have permissions to impersonate the service accounts mapped to the users (see [Service account permissions](https://cloud.google.com/iam/docs/service-account-permissions) ).\n- **Recommendation:** Use different cluster service accounts for different clusters to allow each cluster service account to impersonate only a limited, intended group of mapped user service accounts.", "guide": "Dataproc"}