{"title": "Apigee - IntegrationCallout policy", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - IntegrationCallout policy\n", "content": "## Overview\nThe IntegrationCallout policy lets you run an Apigee integration that has an API trigger. However, before running an integration, you must run the [SetIntegrationRequest policy](/apigee/docs/api-platform/reference/policies/set-integration-request-policy) . The SetIntegrationRequest policy creates a request object and makes the object available to the IntegrationCallout policy as a flow variable. The request object has the integration details such as the API trigger name, integration project ID, integration name, and other details configured in the SetIntegrationRequest policy. The IntegrationCallout policy uses the flow variable of the request object to run the integration. You can configure the IntegrationCallout policy to save the integration run response in a flow variable.\nThe IntegrationCallout policy is helpful if you want to run integration in the middle of your proxy flow. Alternately, instead of configuring the IntegrationCallout policy, you can also run an integration by specifying an integration endpoint as your target endpoint. For more information, see [IntegrationEndpoint](/apigee/docs/api-platform/reference/api-proxy-configuration-reference#integrationendpoint) .\nThis policy is an and use of this policy might have cost or  utilization implications, depending on your Apigee license. For information on policy types  and usage implications, see [Policy types](/apigee/docs/api-platform/reference/policies/reference-overview-policy#policy-types) .\n**Note** : You need an authentication token to run the IntegrationCallout policy. However, there is no explicit`Authentication`element in the policy definition. Apigee adds an authentication token to the request under the hood. For the IntegrationCallout policy to successfully authenticate, you must deploy your API proxy with a service account that has the required IAM roles to run an integration. For information about the required roles, see [IAM roles for integrations](/apigee/docs/api-platform/integration/integrations-access-permissions#iam-roles-for-integrations) . For more details on deploying an API proxy, see [Deploy on Apigee](/apigee/docs/api-platform/security/google-auth/overview#deploy-on-apigee-x) .\n## <IntegrationCallout>\nSpecifies the IntegrationCallout policy.\n| 0    | 1             |\n|:---------------|:----------------------------------------------------|\n| Default Value | nan             |\n| Required?  | Required           |\n| Type   | Complex type          |\n| Parent Element | nan             |\n| Child Elements | <DisplayName> <AsyncExecution> <Request> <Response> |\nThe following table provides a high-level description of the child elements of [<IntegrationCallout>](/apigee/docs/api-platform/reference/policies/integration-callout-policy#integrationcallout) :\n| Child Element | Required? | Description                    |\n|:-----------------|:------------|:-----------------------------------------------------------------------------------------|\n| <DisplayName> | Optional | A custom name for the policy.               |\n| <AsyncExecution> | Optional | Specifies if the integration must run in synchronous mode or asynchronous mode.   |\n| <Request>  | Required | The flow variable having the request object created by the SetIntegrationRequest policy. |\n| <Response>  | Optional | The flow variable to save the integration's response.         |\nThe `<IntegrationCallout>` element uses the following syntax:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><IntegrationCallout continueOnError=\"[true|false]\" enabled=\"[true|false]\" name=POLICY_NAME>\u00a0 <DisplayName>POLICY_DISPLAY_NAME</DisplayName>\u00a0 <AsyncExecution>BOOLEAN_ASYNC_EXECUTION</AsyncExecution>\u00a0 <Request clearPayload=\"[true|false]\">REQUEST_FLOW_VARIABLE_NAME</Request>\u00a0 <Response>RESPONSE_FLOW_VARIABLE_NAME</Response></IntegrationCallout>\n```The following example shows the IntegrationCallout policy definition:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><IntegrationCallout continueOnError=\"false\" enabled=\"true\" name=\"Integration-Callout\">\u00a0 <DisplayName>Integration-Callout-1</DisplayName>\u00a0 <AsyncExecution>true</AsyncExecution>\u00a0 <Request clearPayload=\"true\">my_request_flow_var</Request>\u00a0 <Response>my_response_flow_var</Response></IntegrationCallout>\n```\nThis element has the following attributes that are common to all policies:\n| Attribute   | Default | Required? | Description                                                                             |\n|:---------------------|----------:|:------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| name     |  nan | Required | The internal name of the policy. The value of the name attribute can contain letters, numbers, spaces, hyphens, underscores, and periods. This value cannot exceed 255 characters. Optionally, use the <DisplayName> element to label the policy in the management UI proxy editor with a different, natural-language name. |\n| continueOnError  |   0 | Optional | Set to false to return an error when a policy fails. This is expected behavior for most policies. Set to true to have flow execution continue even after a policy fails. See also: Fault rules are triggered ONLY in an error state (about continueOnError) Handling faults within the current flow       |\n| enabled    |   1 | Optional | Set to true to enforce the policy. Set to false to turn off the policy. The policy will not be enforced even if it remains attached to a flow.                                            |\n| async not_interested |   0 | Deprecated | This attribute is deprecated.                                                                         |\n## Child element reference\n[<IntegrationCallout>](/apigee/docs/api-platform/reference/policies/integration-callout-policy#integrationcallout)\n### <DisplayName>\nUse in addition to the `name` attribute to label the policy in the management UI proxy editor with a different, more natural-sounding name.\nThe `<DisplayName>` element is common to all policies.\n| 0    | 1                      |\n|:---------------|:----------------------------------------------------------------------------------------|\n| Default Value | nan                      |\n| Required?  | Optional. If you omit <DisplayName>, the value of the policy's name attribute is used. |\n| Type   | String                     |\n| Parent Element | <PolicyElement>                   |\n| Child Elements | nan                      |\nThe `<DisplayName>` element uses the following syntax:\n```\n<PolicyElement>\u00a0 <DisplayName>POLICY_DISPLAY_NAME</DisplayName>\u00a0 ...</PolicyElement>\n``````\n<PolicyElement>\u00a0 <DisplayName>My Validation Policy</DisplayName></PolicyElement>\n```\nThe `<DisplayName>` element has no attributes or child elements.\n### <AsyncExecution>\nSpecifies the mode to run the integration. You can run the integration either synchronously or asynchronously.\nIf set to `true` , the integration runs asynchronously. And if set to `false` , the integration runs synchronously.\n- **Asynchronous mode** : When the request to run the integration reaches the endpoint, the endpoint immediately returns  the integration execution IDs, but starts the execution of integration at the time specified  by the`<ScheduleTime>`element. If you have not set the`<ScheduleTime>`element, the integration is scheduled to run immediately. Even though the integration is  scheduled to run immediately, its execution may start after a few seconds. When the integration  starts to execute, the following two things happen:- The integration returns the HTTP`200 OK`status code so that the caller can   continue processing.\n- The IntegrationCallout policy completes.\nOnce started, the integration will have a maximum time limit of 50 minutes to complete the execution.\n- **Synchronous mode** : When the request to run the integration reaches the endpoint, the endpoint immediately starts  the execution of the integration and waits for the response. The maximum time limit to complete  the execution is 2 minutes. After finishing the execution, the endpoint returns a response  with the execution IDs and other response data.\n| 0    | 1     |\n|:---------------|:---------------------|\n| Default Value | false    |\n| Required?  | Optional    |\n| Type   | Boolean    |\n| Parent Element | <IntegrationCallout> |\n| Child Elements | nan     |\nThe `<AsyncExecution>` element uses the following syntax:\n```\n<AsyncExecution>BOOLEAN</AsyncExecution>\n```The following example sets asynchronous execution to `true` :\n```\n<AsyncExecution>true</AsyncExecution>\n```\n### <Request>\nSpecifies the flow variable having the request object created by the SetIntegrationRequest policy. The IntegrationCallout policy sends this request object to Apigee Integration for running the integration.\n| 0    | 1     |\n|:---------------|:---------------------|\n| Default Value | nan     |\n| Required?  | Required    |\n| Type   | String    |\n| Parent Element | <IntegrationCallout> |\n| Child Elements | nan     |\nThe `<Request>` element uses the following syntax:\n```\n<Request clearPayload=\"true\">FLOW_VARIABLE_NAME</Request>\n```The following example specifies that the request object is available in the `my_request_flow_var` flow variable:\n```\n<Request clearPayload=\"true\">my_request_flow_var</Request>\n```\nThe following table describes the attributes of `<Request>` :\n| Attribute | Required? | Type | Description                                                                                   |\n|:-------------|:------------|:--------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| clearPayload | Optional | boolean | Specifies if the request object should be cleared from the memory after sending the request to run the integration. If set to true, Apigee clears the request object. If set to false, Apigee doesn't clear the request object. If you don't specify this attribute, the default value is true and the request object is cleared from the memory. |\n### <Response>\nSpecifies the flow variable for saving the integration's response.\nIf you don't specify this element, the policy saves the response in the `integration.response` flow variable.\n| 0    | 1     |\n|:---------------|:---------------------|\n| Default Value | integration.response |\n| Required?  | Optional    |\n| Type   | String    |\n| Parent Element | <IntegrationCallout> |\n| Child Elements | nan     |\nThe `<Response>` element uses the following syntax:\n```\n<Response>FLOW_VARIABLE_NAME</Response>\n```The following example saves the response of the integration run in the `my_response_flow_var` flow variable:\n```\n<Response>my_response_flow_var</Response>\n```\n## Error codes\nThis section describes the fault codes, error messages, and the fault variables  set by Apigee when this policy triggers an error. This information is essential if you are developing fault rules to handle faults. To learn more, see [What you need to know about policy errors](/apigee/docs/api-platform/fundamentals/what-you-need-know-about-policy-errors) and [Handling faults](/apigee/docs/api-platform/fundamentals/fault-handling) .\n### Runtime errors\nThese errors can occur when the policy executes.\n| Fault code             | HTTP status | Cause                                                                                                                             |\n|:--------------------------------------------------------------|--------------:||\n| entities.UnresolvedVariable         |   500 | This error occurs if Apigee cannot resolve the integration.project.id or the integration.name variables.                                                                                                    |\n| steps.integrationcallout.ExecutionFailed      |   500 | This error can occur if the backend target service returns an HTTP error status such as 4xx or 5xx. The possible causes include: The service account deployed with the proxy has the incorrect permissions to run the integration. The integration or the API trigger does not exist. Apigee Integrations is not enabled for your Google Cloud project. You have configured the <ScheduleTime> element in your SetIntegrationRequest policy and the IntegrationCallout policy has the AsyncExecution set to false. |\n| steps.integrationcallout.NullRequestVariable     |   500 | This error occurs if the flow variable specified in the <Request> is null.                                                                                                            |\n| steps.integrationcallout.RequestVariableNotMessageType  |   500 | This error occurs when the flow variable specified by the Request element is not of message type.                                                                                                      |\n| steps.integrationcallout.RequestVariableNotRequestMessageType |   500 | This error occurs when the flow variable specified by the Request element is not of Request message type.                                                                                                    |\n| messaging.adaptors.http.filter.GoogleTokenGenerationFailure |   500 | This error can occur because of an incorrect service account configuration. The possible causes include: The service account deployed with the proxy does not exist in your project. The service account deployed with the proxy is disabled.                                                                   |\n### Fault variables\nWhenever there are execution errors in a policy, Apigee generates error messages. You can view  these error messages in the error response. Many a time, system generated error messages might not be relevant  in the context of your product. You might want to customize the error messages based on the  type of error to make the messages more meaningful.\nTo customize the error messages, you can use either fault rules or the RaiseFault policy. For  information about differences between fault rules and the RaiseFault policy, see [FaultRules vs. the RaiseFault policy](/apigee/docs/api-platform/fundamentals/fault-handling#rulesvraisefault) .  You must check for conditions using the `Condition` element in both the fault rules and the RaiseFault policy.  Apigee provides fault variables unique to each policy and the values of the fault variables are set when a policy triggers runtime errors.  By using these variables, you can check for specific error conditions and take appropriate actions. For more information about checking error  conditions, see [Building conditions](/apigee/docs/api-platform/fundamentals/fault-handling#buildingconditions) .\nThe following table describes the fault variables specific to this policy.\n| Variables        | Where                                 | Example            |\n|:--------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------|:-------------------------------------------------------|\n| fault.name       | The fault.name can match to any of the faults listed in the Runtime errors table. The fault name is the last part of the fault code. | fault.name Matches \"UnresolvedVariable\"    |\n| IntegrationCallout.POLICY_NAME.failed | POLICY_NAME is the user-specified name of the policy that threw the fault.               | IntegrationCallout.integration-callout-1.failed = true |\n[What you need to know about policy errors](/apigee/docs/api-platform/fundamentals/what-you-need-know-about-policy-errors)\n## Related topics\nIf you want to learn more about Apigee's Integration feature, see [What is Apigee Integration?](/apigee/docs/api-platform/integration/what-is-apigee-integration)", "guide": "Apigee"}