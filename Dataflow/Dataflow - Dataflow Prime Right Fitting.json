{"title": "Dataflow - Dataflow Prime Right Fitting", "url": "https://cloud.google.com/dataflow/docs/guides/right-fitting", "abstract": "# Dataflow - Dataflow Prime Right Fitting\n**Objective:** Understand how to use the Dataflow Prime Right Fitting feature to guide the allocation of resources to your pipeline and its steps.\n", "content": "## Overview\nDataflow Prime is a serverless platform that uses horizontal and vertical scaling to allocate workers and worker resources. You don't specify the number or size and shape of workers used in your pipeline. To customize worker resources, you can use [Apache Beam resource hints](https://beam.apache.org/documentation/runtime/resource-hints/) to specify resource requirements for an entire pipeline or for specific pipeline steps. The Dataflow Prime **Right Fitting** feature uses resource hints to customize worker resources for the pipeline.\nThe ability to target resources to specific pipeline steps provides additional pipeline flexibility and capability, and potential cost savings. You can apply more costly resources to pipeline steps that require them, and less costly resources to other pipeline steps.\n## Limitations and requirements\n- Resource hints are supported with the Apache Beam Java and Python SDKs, versions 2.30.0 and later.\n- Right Fitting is supported only with batch pipelines.## Available resource hints\nThe following resource hints are available:\n- `min_ram` =\" GB\": The minimum amount of RAM in gigabytes to allocate to workers. Dataflow Prime uses this value as a lower limit when allocating memory to new workers (horizontal scaling) or to existing workers (vertical scaling).- Set it with the **minimum** value of worker memory that your pipeline or pipeline step requires.\n- `min_ram`is an aggregate, per-worker specification. It isn't a per-vCPU specification. For example, if you set`min_ram=15GB`, Dataflow sets the aggregate memory available across all vCPUs in the worker to at least 15\u00a0GB.\n- `accelerator` =\"type: ;count: ; \": The GPU type, number of GPUs, and GPU configuration options to use. To use NVIDIA GPUs with Dataflow, set the `install-nvidia-driver` [configuration option](/dataflow/docs/gpu/use-gpus#drivers) .This user-supplied allocation of GPUs on the Dataflow Prime serverless platform lets you control the use and cost of GPUs in your pipeline and its steps.## Resource hint nesting\nResource hints are applied to the pipeline transform hierarchy as follows:\n- `min_ram`: The value on a transform is evaluated as the largest`min_ram`hint value among the values that are set on the transform itself and all of its parents in the transform's hierarchy.- Example: If an inner transform hint sets`min_ram`to 16\u00a0GB, and the outer transform hint in the hierarchy sets`min_ram`to 32\u00a0GB, a hint of 32\u00a0GB is used for all steps in the entire transform.\n- Example: If an inner transform hint sets`min_ram`to 16\u00a0GB, and the outer transform hint in the hierarchy sets`min_ram`to 8\u00a0GB, a hint of 8\u00a0GB is used for all steps in the outer transform that are not in the inner transform, and a 16\u00a0GB hint is used for all steps in the inner transform.\n- `accelerator`: The innermost value in the transform's hierarchy takes precedence.- Example: If an inner transform`accelerator`hint is different from an outer transform`accelerator`hint in a hierarchy, the inner transform`accelerator`hint is used for the inner transform.**Pipeline hints:** Hints that are set for the entire pipeline are treated as if they are set on a separate outermost transform.\n## Use resource hints\nYou can set resource hints on the entire pipeline or on pipeline steps.\n### Pipeline resource hints\nYou can set resource hints on the entire pipeline when you run the pipeline from the command line.\nSee the [Quickstart using Python](/dataflow/docs/quickstarts/create-pipeline-python) to set up your Python environment.\n**Example:**\n```\n python my_pipeline.py \\\n \u00a0\u00a0\u00a0\u00a0--runner=DataflowRunner \\\n \u00a0\u00a0\u00a0\u00a0--resource_hints=min_ram=numberGB \\\n \u00a0\u00a0\u00a0\u00a0--resource_hints=accelerator=\"type:type;count:number;install-nvidia-driver\" \\\n \u00a0\u00a0\u00a0\u00a0...\n```\n### Pipeline step resource hints\nYou can set resource hints on pipeline steps (transforms) programmatically.\nTo install Apache Beam for Java, see [Install the Apache Beam SDK](/dataflow/docs/guides/installing-beam-sdk) .\nYou can set resource hints programmatically on pipeline transforms using [ResourceHints](https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/resourcehints/ResourceHints.java#L37) .\n **Example:** \n```\npcoll.apply(MyCompositeTransform.of(...)\u00a0 \u00a0 .setResourceHints(\u00a0 \u00a0 \u00a0 \u00a0 ResourceHints.create()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .withMinRam(\"15GB\")\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .withAccelerator(\u00a0 \u00a0 \u00a0\"type:nvidia-tesla-k80;count:1;install-nvidia-driver\")))pcoll.apply(ParDo.of(new BigMemFn())\u00a0 \u00a0 .setResourceHints(\u00a0 \u00a0 \u00a0 \u00a0 ResourceHints.create().withMinRam(\"30GB\")))\n```\nYou can use [ResourceHintsOptions](https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/resourcehints/ResourceHintsOptions.java#L30) to programmatically set resource hints on the entire pipeline.To install Apache Beam 2.30.0 for Python, see [Installing the Apache Beam SDK](/dataflow/docs/guides/installing-beam-sdk) .\nYou can set resource hints programmatically on pipeline transforms using [PTransforms.with_resource_hints](https://github.com/apache/beam/blob/dd20b4fd7547d5421eeae7ef0d1d62c3e3d6727a/sdks/python/apache_beam/transforms/ptransform.py#L421) (also see [ResourceHint](https://github.com/apache/beam/blob/master/sdks/python/apache_beam/transforms/resources.py#L51) ).\n **Example:** \n```\npcoll | MyPTransform().with_resource_hints(\u00a0 \u00a0 min_ram=\"4GB\",\u00a0 \u00a0 accelerator=\"type:nvidia-tesla-k80;count:1;install-nvidia-driver\")pcoll | beam.ParDo(BigMemFn()).with_resource_hints(\u00a0 \u00a0 min_ram=\"30GB\")\n```\nYou can use the`--resource_hints`pipeline option from the command line when you run your pipeline to set resource hints on the entire pipeline (see [Pipeline resource hints](#pipeline_resource_hints) for an example).Resource hints aren't supported in Go.\n## Right Fitting and fusion\nIn some cases, transforms set with different resource hints can be executed on workers in the same worker pool, as part of the process of [fusion optimization](/dataflow/docs/pipeline-lifecycle#fusion_optimization) . When transforms are fused, Dataflow executes them in an environment that satisfies the union of resource hints set on the transforms.\nWhen resource hints can't be merged, fusion doesn't occur. For example, resource hints for different GPUs aren't mergeable, so those transforms aren't fused.\nYou can also prevent fusion by adding an operation to your pipeline that forces Dataflow to materialize an intermediate `PCollection` . To learn more, see [Prevent fusion](/dataflow/docs/pipeline-lifecycle#prevent_fusion) .", "guide": "Dataflow"}