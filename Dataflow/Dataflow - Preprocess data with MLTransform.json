{"title": "Dataflow - Preprocess data with MLTransform", "url": "https://cloud.google.com/dataflow/docs/machine-learning/ml-preprocess-data", "abstract": "# Dataflow - Preprocess data with MLTransform\nThis page explains why and how to use the [MLTransform](https://github.com/apache/beam/blob/3d501ee9dc208af2efef009daa98c49819b73ddc/sdks/python/apache_beam/ml/transforms/base.py#L112) feature to prepare your data for training machine learning (ML) models. By combining multiple data processing transforms in one class, `MLTransform` streamlines the process of applying Apache Beam ML data processing operations to your workflow.", "content": "## Benefits\nThe `MLTransform` class provides the following benefits:\n- Transform your data without writing complex code or managing underlying libraries.\n- Generate embeddings that you can use to push data into vector databases or to run inference.\n- Efficiently chain multiple types of processing operations with one interface.## Support and limitations\nThe `MLTransform` class has the following limitations:\n- Available for pipelines that use the Apache Beam Python SDK versions 2.53.0 and later.\n- Pipelines must use [default windows](https://beam.apache.org/documentation/programming-guide/#single-global-window) .\n**Text embedding transforms:**\n- Support Python 3.8, 3.9, 3.10, and 3.11.\n- Support both batch and streaming pipelines.\n- Support the [Vertex AI text-embeddings API](/vertex-ai/docs/generative-ai/embeddings/get-text-embeddings) and the [Hugging Face Sentence Transformers module](https://huggingface.co/sentence-transformers) .\n**Data processing transforms that use TFT:**\n- Support Python 3.8, 3.9, and 3.10.\n- Support batch pipelines.## Use cases\nThe example notebooks demonstrate how to use `MLTransform` for specific use cases.\nFor a full list of available transforms, see [Transforms](https://beam.apache.org/documentation/ml/preprocess-data#transforms) in the Apache Beam documentation.\n## Use MLTransform\nTo use the `MLTransform` class to preprocess data, include the following code in your pipeline:\n```\n\u00a0 import apache_beam as beam\u00a0 from apache_beam.ml.transforms.base import MLTransform\u00a0 from apache_beam.ml.transforms.tft import TRANSFORM_NAME\u00a0 import tempfile\u00a0 data = [\u00a0 \u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 DATA\u00a0 \u00a0 \u00a0 },\u00a0 ]\u00a0 artifact_location = gs://BUCKET_NAME\u00a0 TRANSFORM_FUNCTION_NAME = TRANSFORM_NAME(columns=['x'])\u00a0 with beam.Pipeline() as p:\u00a0 \u00a0 transformed_data = (\u00a0 \u00a0 \u00a0 \u00a0 p\u00a0 \u00a0 \u00a0 \u00a0 | beam.Create(data)\u00a0 \u00a0 \u00a0 \u00a0 | MLTransform(write_artifact_location=artifact_location).with_transform(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 TRANSFORM_FUNCTION_NAME)\u00a0 \u00a0 \u00a0 \u00a0 | beam.Map(print))\n```\nReplace the following values:\n- ``: the name of the [transform](https://beam.apache.org/documentation/ml/preprocess-data/#transforms) to use\n- ``: the name of your [Cloud Storage bucket](/storage/docs/buckets#naming) \n- ``: the input data to transform\n- ``: the name that you assign to your transform function in your code## What's next\n- For more details about`MLTransform`, see [Preprocess data](https://beam.apache.org/documentation/ml/preprocess-data) in the Apache Beam documentation.\n- For more examples, see [MLTransform for data processing](https://beam.apache.org/documentation/transforms/python/elementwise/mltransform) in the Apache Beam transform catalog.\n- Run an [interactive notebook in Colab](https://colab.sandbox.google.com/github/apache/beam/blob/master/examples/notebooks/beam-ml/mltransform_basic.ipynb) .", "guide": "Dataflow"}