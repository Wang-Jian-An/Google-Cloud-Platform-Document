{"title": "Dataflow - Bring your own ML model to Beam RunInference", "url": "https://cloud.google.com/dataflow/docs/notebooks/run_custom_inference?hl=zh-cn", "abstract": "# Dataflow - Bring your own ML model to Beam RunInference\n| 0     | 1      |\n|:--------------------|:----------------------|\n| Run in Google Colab | View source on GitHub |\nThis notebook demonstrates how to run inference on your custom framework using the [ModelHandler](https://beam.apache.org/releases/pydoc/current/apache_beam.ml.inference.base.html#apache_beam.ml.inference.base.ModelHandler) class.\nNamed-entity recognition (NER) is one of the most common tasks for natural language processing (NLP). NLP locates named entities in unstructured text and classifies the entities using pre-defined labels, such as person name, organization, date, and so on.\nThis example illustrates how to use the popular `spaCy` package to load a machine learning (ML) model and perform inference in an Apache Beam pipeline using the RunInference `PTransform` . For more information about the RunInference API, see [About Beam ML](https://beam.apache.org/documentation/ml/about-ml) in the Apache Beam documentation.\n", "content": "## Install package dependencies\nThe RunInference library is available in Apache Beam versions 2.40 and later.\nFor this example, you need to install `spaCy` and `pandas` . A small NER model, `en_core_web_sm` , is also installed, but you can use any valid `spaCy` model.\n```\n# Uncomment the following lines to install the required packages.# %pip install spacy pandas# %pip install \"apache-beam[gcp, dataframe, interactive]\"# !python -m spacy download en_core_web_sm\n```\n## Learn about spaCy\nTo learn more about `spaCy` , create a `spaCy` language object in memory using `spaCy` 's trained models. You can install these models as Python packages. For more information, see spaCy's [Models and Languages](https://spacy.io/usage/models) documentation.\n```\nimport spacynlp = spacy.load(\"en_core_web_sm\")\n```\n```\n# Add text strings.text_strings = [\u00a0 \u00a0 \"The New York Times is an American daily newspaper based in New York City with a worldwide readership.\",\u00a0 \u00a0 \"It was founded in 1851 by Henry Jarvis Raymond and George Jones, and was initially published by Raymond, Jones & Company.\"]\n```\n```\n# Check which entities spaCy can recognize.doc = nlp(text_strings[0])\n```\n```\nfor ent in doc.ents:\u00a0 \u00a0 print(ent.text, ent.start_char, ent.end_char, ent.label_)\n```\n```\nThe New York Times 0 18 ORG\nAmerican 25 33 NORP\ndaily 34 39 DATE\nNew York City 59 72 GPE\n```\n```\n# Visualize the results.from spacy import displacydisplacy.render(doc, style=\"ent\")\n```\n```\n# Visualize another example.displacy.render(nlp(text_strings[1]), style=\"ent\")\n```\n## Create a model handler\nThis section demonstrates how to create your own `ModelHandler` so that you can use `spaCy` for inference.\n```\nimport apache_beam as beamfrom apache_beam.options.pipeline_options import PipelineOptionsimport warningswarnings.filterwarnings(\"ignore\")pipeline = beam.Pipeline()# Print the results for verification.with pipeline as p:\u00a0 \u00a0 (p \u00a0 \u00a0 | \"CreateSentences\" >> beam.Create(text_strings)\u00a0 \u00a0 | beam.Map(print)\u00a0 \u00a0 )\n```\n```\nThe New York Times is an American daily newspaper based in New York City with a worldwide readership.\nIt was founded in 1851 by Henry Jarvis Raymond and George Jones, and was initially published by Raymond, Jones & Company.\n```\n```\n# Define `SpacyModelHandler` to load the model and perform the inference.from apache_beam.ml.inference.base import RunInferencefrom apache_beam.ml.inference.base import ModelHandlerfrom apache_beam.ml.inference.base import PredictionResultfrom spacy import Languagefrom typing import Anyfrom typing import Dictfrom typing import Iterablefrom typing import Optionalfrom typing import Sequenceclass SpacyModelHandler(ModelHandler[str,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0PredictionResult,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Language]):\u00a0 \u00a0 def __init__(\u00a0 \u00a0 \u00a0 \u00a0 self,\u00a0 \u00a0 \u00a0 \u00a0 model_name: str = \"en_core_web_sm\",\u00a0 \u00a0 ):\u00a0 \u00a0 \u00a0 \u00a0 \"\"\" Implementation of the ModelHandler interface for spaCy using text as input.\u00a0 \u00a0 \u00a0 \u00a0 Example Usage::\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 pcoll | RunInference(SpacyModelHandler())\u00a0 \u00a0 \u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 model_name: The spaCy model name. Default is en_core_web_sm.\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"\u00a0 \u00a0 \u00a0 \u00a0 self._model_name = model_name\u00a0 \u00a0 \u00a0 \u00a0 self._env_vars = {}\u00a0 \u00a0 def load_model(self) -> Language:\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"Loads and initializes a model for processing.\"\"\"\u00a0 \u00a0 \u00a0 \u00a0 return spacy.load(self._model_name)\u00a0 \u00a0 def run_inference(\u00a0 \u00a0 \u00a0 \u00a0 self,\u00a0 \u00a0 \u00a0 \u00a0 batch: Sequence[str],\u00a0 \u00a0 \u00a0 \u00a0 model: Language,\u00a0 \u00a0 \u00a0 \u00a0 inference_args: Optional[Dict[str, Any]] = None\u00a0 \u00a0 ) -> Iterable[PredictionResult]:\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"Runs inferences on a batch of text strings.\u00a0 \u00a0 \u00a0 \u00a0 Args:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 batch: A sequence of examples as text strings. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 model: A spaCy language model\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 inference_args: Any additional arguments for an inference.\u00a0 \u00a0 \u00a0 \u00a0 Returns:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 An Iterable of type PredictionResult.\u00a0 \u00a0 \u00a0 \u00a0 \"\"\"\u00a0 \u00a0 \u00a0 \u00a0 # Loop each text string, and use a tuple to store the inference results.\u00a0 \u00a0 \u00a0 \u00a0 predictions = []\u00a0 \u00a0 \u00a0 \u00a0 for one_text in batch:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 doc = model(one_text)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 predictions.append(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 [(ent.text, ent.start_char, ent.end_char, ent.label_) for ent in doc.ents])\u00a0 \u00a0 \u00a0 \u00a0 return [PredictionResult(x, y) for x, y in zip(batch, predictions)]\n```\n```\n# Verify that the inference results are correct.with pipeline as p:\u00a0 \u00a0 (p \u00a0 \u00a0 | \"CreateSentences\" >> beam.Create(text_strings)\u00a0 \u00a0 | \"RunInferenceSpacy\" >> RunInference(SpacyModelHandler(\"en_core_web_sm\"))\u00a0 \u00a0 | beam.Map(print)\u00a0 \u00a0 )\n```\n```\nThe New York Times is an American daily newspaper based in New York City with a worldwide readership.\nIt was founded in 1851 by Henry Jarvis Raymond and George Jones, and was initially published by Raymond, Jones & Company.\nPredictionResult(example='The New York Times is an American daily newspaper based in New York City with a worldwide readership.', inference=[('The New York Times', 0, 18, 'ORG'), ('American', 25, 33, 'NORP'), ('daily', 34, 39, 'DATE'), ('New York City', 59, 72, 'GPE')])\nPredictionResult(example='It was founded in 1851 by Henry Jarvis Raymond and George Jones, and was initially published by Raymond, Jones & Company.', inference=[('1851', 18, 22, 'DATE'), ('Henry Jarvis', 26, 38, 'PERSON'), ('Raymond', 39, 46, 'PERSON'), ('George Jones', 51, 63, 'PERSON'), ('Raymond, Jones & Company', 96, 120, 'ORG')])\n```\n## Use KeyedModelHandler to handle keyed data\nIf you have keyed data, use `KeyedModelHandler` .\n```\n# You can use these text strings with keys to distinguish examples.text_strings_with_keys = [\u00a0 \u00a0 (\"example_0\", \"The New York Times is an American daily newspaper based in New York City with a worldwide readership.\"),\u00a0 \u00a0 (\"example_1\", \"It was founded in 1851 by Henry Jarvis Raymond and George Jones, and was initially published by Raymond, Jones & Company.\")]\n```\n```\nfrom apache_beam.runners.interactive.interactive_runner import InteractiveRunnerfrom apache_beam.ml.inference.base import KeyedModelHandlerfrom apache_beam.dataframe.convert import to_dataframepipeline = beam.Pipeline(InteractiveRunner())keyed_spacy_model_handler = KeyedModelHandler(SpacyModelHandler(\"en_core_web_sm\"))# Verify that the inference results are correct.with pipeline as p:\u00a0 \u00a0 results = (p \u00a0 \u00a0 | \"CreateSentences\" >> beam.Create(text_strings_with_keys)\u00a0 \u00a0 | \"RunInferenceSpacy\" >> RunInference(keyed_spacy_model_handler)\u00a0 \u00a0 # Generate a schema suitable for conversion to a dataframe using Map to Row objects.\u00a0 \u00a0 | 'ToRows' >> beam.Map(lambda row: beam.Row(key=row[0], text=row[1][0], predictions=row[1][1]))\u00a0 \u00a0 )\n```\n```\n# Convert the results to a pandas dataframe.import apache_beam.runners.interactive.interactive_beam as ibbeam_df = to_dataframe(results)df = ib.collect(beam_df)\n```\n```\ndf\n```", "guide": "Dataflow"}