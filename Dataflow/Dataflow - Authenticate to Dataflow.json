{"title": "Dataflow - Authenticate to Dataflow", "url": "https://cloud.google.com/dataflow/docs/concepts/authentication", "abstract": "# Dataflow - Authenticate to Dataflow\nThis document describes how to authenticate to Dataflow programmatically. How  you authenticate to Dataflow depends on the interface you use to access the API  and the environment where your code is running.\n**Note:** After authenticating to Dataflow, you must grant specific permissions to access Google Cloud resources. For more information, see [Security andpermissions for pipelines on GoogleCloud](/dataflow/docs/concepts/security-and-permissions#permissions) and [AccessGoogle Cloud resources with Apache Beampipelines](/dataflow/docs/concepts/security-and-permissions#access-resources) .\nFor more information about Google Cloud authentication, see the [authentication overview](/docs/authentication) .\n", "content": "## API access\nDataflow supports programmatic access. You can access the API in  the following ways:\n- [Client libraries](#client-libraries) \n- [Google Cloud CLI](#gcloud) \n- [REST](#rest) \n### Client libraries\nThe [Dataflow client libraries](/dataflow/docs/reference/libraries) provide   high-level language support for authenticating to Dataflow   programmatically.   To authenticate calls to Google Cloud APIs, client libraries support [Application Default Credentials (ADC)](/docs/authentication/application-default-credentials) ; the libraries look for credentials in a set of defined locations and use those credentials to authenticate requests to the API. With ADC, you can make credentials available to your application in a variety of environments, such as local development or production, without needing to modify your application code.\n### Google Cloud CLI\nWhen you use the [gcloud CLI](/sdk/gcloud/reference/dataflow) to access   Dataflow, you [log in to the gcloud CLI](/sdk/docs/authorizing) with a Google   Account, which provides the credentials used by the gcloud CLI commands.\nIf your organization's security policies prevent user accounts from having the required   permissions, you can use [service account impersonation](/docs/authentication/use-service-account-impersonation) .\nFor more information, see [Authenticate for using the gcloud CLI](/docs/authentication/gcloud) .   For more information about using the gcloud CLI with Dataflow,   see [the gcloud CLI reference pages](/sdk/gcloud/reference/dataflow) .\n### REST\nYou can authenticate to [the DataflowAPI](/dataflow/docs/reference/rest) by using your gcloud CLI credentials or by using [Application Default Credentials](/docs/authentication/application-default-credentials) .   For more information about authentication for REST requests, see [Authenticate for using REST](/docs/authentication/rest) .   For information about the types of credentials, see [gcloud CLI credentials and ADC credentials](/docs/authentication/gcloud#gcloud-credentials) .\n## Set up authentication for Dataflow\nHow you set up authentication depends on the environment where your code is running.\nThe following options for setting up authentication are the most commonly used. For more   options and information about authentication, see [Authentication at Google](/docs/authentication) .\n### For a local development environment\nYou can set up credentials for a local development environment in the following ways:\n- [User credentials for client libraries or third-party tools](#client-libs) \n- [User credentials for REST requests from the command line](#rest) Set up [Application Default Credentials (ADC)](/docs/authentication/application-default-credentials) in your local environment:\n- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n```\n- Create local authentication credentials for your Google Account:```\ngcloud auth application-default login\n```A login screen is displayed. After you log in, your credentials    are stored in the local credential file used by ADC.\nFor more information about working with ADC in a local environment, see [Local development environment](/docs/authentication/provide-credentials-adc#local-dev) .\nWhen you make a REST request from the command line,   you can use your gcloud CLI credentials by including [gcloud auth print-access-token](/sdk/gcloud/reference/auth/print-access-token) as part of the command that sends the request.\nThe following example lists service accounts for the specified project. You can use the   same pattern for any REST request.\nBefore using any of the request data, make the following replacements:\n- : Your Google Cloud project ID.\nTo send your request, expand one of these options:\nFor more information about authenticating using REST and gRPC, see [Authenticate for using REST](/docs/authentication/rest) .   For information about the difference between your local ADC credentials and your   gcloud CLI credentials, see [gcloud CLI credentials and ADC credentials](/docs/authentication/gcloud#gcloud-credentials) .\n### On Google Cloud\nTo authenticate a workload running on Google Cloud, you use the credentials of the   service account attached to the compute resource where your code is running.   For example, you can attach a service account to a [Compute Engine virtual machine (VM) instance](/compute/docs/access/create-enable-service-accounts-for-instances#using) ,    a [Cloud Run service](/run/docs/securing/service-identity) ,   or a [Dataflow job](/dataflow/docs/concepts/security-and-permissions#specifying_a_user-managed_controller_service_account) .   This approach is the preferred authentication method for code running on a   Google Cloud compute resource.\nFor most services, you must attach the service account when you create the   resource that will run your code; you cannot add or replace the service account   later. Compute Engine is an exception\u2014it lets you attach a service   account to a VM instance at any time.\nUse the gcloud CLI to create a service account and attach it to your   resource:\n- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n```\n- Set up authentication:- Create the service account:```\ngcloud iam service-accounts create SERVICE_ACCOUNT_NAME\n```Replace `` with a name for the service account.\n- To provide access to your project and your resources, grant a role to the service account:```\ngcloud projects add-iam-policy-binding PROJECT_ID --member=\"serviceAccount:SERVICE_ACCOUNT_NAME@PROJECT_ID.iam.gserviceaccount.com\" --role=ROLE\n```Replace the following:- ``: the name of the service account\n- ``: the project ID where you created the service account\n- ``: the role to grant\n **Note** : The`--role`flag affects which resources the service account can access in your project. You can revoke these roles or grant additional roles later. In production environments, do not grant the Owner, Editor, or Viewer roles. Instead, grant a [predefined role](/iam/docs/understanding-roles#predefined_roles) or [custom role](/iam/docs/understanding-custom-roles) that meets your needs.\n- To grant another role to the service account, run the command as you did in the previous step.\n- Grant your Google Account a role that lets you use the service account's roles and attach the  service account to other resources:```\ngcloud iam service-accounts add-iam-policy-binding SERVICE_ACCOUNT_NAME@PROJECT_ID.iam.gserviceaccount.com --member=\"user:USER_EMAIL\" --role=roles/iam.serviceAccountUser\n```Replace the following:- ``: the name of the service account\n- ``: the project ID where you created the service account\n- ``: the email address for your Google Account\n- Create the resource that will run your code, and attach the service account to that    resource. For example, if you use Compute Engine:Create a Compute Engine instance. Configure the instance as follows:- Replace``with your preferred   instance name.\n- Set the`--zone`flag to the [zone](/compute/docs/zones#available) in which you want to create   your instance.\n- Set the`--service-account`flag to the email address for the service account   that you created.\n```\ngcloud compute instances create INSTANCE_NAME --zone=ZONE --service-account=SERVICE_ACCOUNT_EMAIL\n```\nFor more information about authenticating to Google APIs, see [Authentication at Google](/docs/authentication) .\n### On-premises or on a different cloud provider\nThe preferred method to set up authentication from outside of Google Cloud is to use   workload identity federation. For more information, see [On-premises or another cloud provider](/docs/authentication/provide-credentials-adc#on-prem) in the authentication documentation.\n## Access control for Dataflow\nAfter you authenticate to Dataflow, you must be authorized to access   Google Cloud resources. Dataflow uses   Identity and Access Management (IAM) for authorization.\nFor more information about the roles for Dataflow, see [Access control with IAM](/dataflow/docs/concepts/access-control) .   For more information about IAM and authorization, see [IAM overview](/iam/docs/overview) .\n## What's next\n- Set up [Security and permissions for pipelines on Google Cloud](/dataflow/docs/concepts/security-and-permissions#access-resources) \n- .\n- Learn how to [Access Google Cloud resources with Apache Beam pipelines](/dataflow/docs/concepts/security-and-permissions#access-resources) \n- .\n- Learn about [Google Cloud authentication methods](/docs/authentication#auth-decision-tree) .\n- See a list of [authentication use cases](/docs/authentication/use-cases) .", "guide": "Dataflow"}