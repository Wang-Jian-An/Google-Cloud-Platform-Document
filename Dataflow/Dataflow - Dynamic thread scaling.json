{"title": "Dataflow - Dynamic thread scaling", "url": "https://cloud.google.com/dataflow/docs/guides/thread-scaling", "abstract": "# Dataflow - Dynamic thread scaling\nDynamic thread scaling is a part of Dataflow's suite of vertical scaling features. It complements Dataflow's [horizontal autoscaling](/dataflow/docs/horizontal-autoscaling) feature by adjusting the number of parallel tasks, also known as [bundles](https://beam.apache.org/documentation/runtime/model/#bundling-and-persistence) , that each Dataflow worker runs. The goal is to increase the overall efficiency of your Dataflow pipeline.\nWhen Dataflow runs a pipeline, the processing is distributed across multiple Compute Engine virtual machines (VMs), also known as workers. A thread is a single executable task running within a larger process. Dataflow launches several threads on each worker.\nWith dynamic thread scaling enabled, the Dataflow service automatically chooses the appropriate number of threads to run on each Dataflow worker. Because each thread runs a task, increasing the number of threads allows more tasks to run in parallel on a worker. When you use this feature with the horizontal autoscaling feature, the total number of threads used by the pipeline remains the same, but fewer workers are used.\nDynamic thread scaling uses an algorithm to determine how many threads each worker needs based on resource utilization signals generated during pipeline execution. For more information, see the [How it works](#how-it-works) section on this page.\n", "content": "## Benefits\nDynamic thread scaling has the following potential benefits.\n- Allows Dataflow workers to process data more efficiently by improving per-worker CPU and memory utilization.\n- Improves parallel processing by adjusting the number of worker threads available to run tasks in parallel during pipeline execution.\n- Reduces the number of workers required to process large datasets, which might reduce your costs.## Support and limitations\n- Dynamic thread scaling is available for pipelines that use the Java, Python, and Go SDKs.\n- The Dataflow job must use [Runner v2](/dataflow/docs/runner-v2) .\n- Only batch pipelines are supported.\n- Pipelines that are CPU or memory intensive might not benefit from dynamic thread scaling.\n- Dynamic thread scaling doesn't reduce the amount of time it takes a Dataflow job to complete.## How it works\nDynamic thread scaling uses autotuning principles to dynamically scale the thread count up or down on each worker in the Dataflow worker pool. The thread count is scaled independently on each worker. Each thread runs a task. Increasing the number of threads allows more tasks to run in parallel on a worker. As tasks complete and the threads are no longer needed, the thread count scales down. An algorithm determines how many threads each worker needs.\nThe thread count on a worker scales up when both of the following conditions are met:\n- Memory utilization on the worker is less than 50%.\n- CPU utilization on the worker is less than 65%.\nThe thread count on a worker scales down when the following condition is met:\n- Memory utilization on the worker is more than 70%.\nTo view memory and CPU utilization for your job, use the [Job metrics](/dataflow/docs/guides/using-monitoring-intf) tab of the Dataflow web interface.\nTo ensure that the recommendations are valid, Dataflow waits for resource utilization to stabilize before sending recommendations to workers. For example, memory and CPU utilization might be in the range for scaling, but because resource utilization is still growing, Dataflow doesn't send a recommendation. After resource utilization stabilizes, Dataflow sends a recommendation.\nIf an out of memory (OOM) error occurs, thread scaling is automatically disabled, and the pipeline runs without dynamic thread scaling.\n## Enable dynamic thread scaling\nTo enable dynamic thread scaling, use the following [Dataflow service option](/dataflow/docs/reference/service-options) .\n```\n--dataflowServiceOptions=enable_dynamic_thread_scaling\n```\n```\n--dataflow_service_options=enable_dynamic_thread_scaling\n```\n```\n--dataflow_service_options=enable_dynamic_thread_scaling\n```\nWhen dynamic thread scaling is enabled, you can also set the initial and maximum number of workers available to your pipeline during execution. For more information, see [Pipeline options](/dataflow/docs/reference/pipeline-options) .\n### Verify that dynamic thread scaling is enabled\nWhen dynamic thread scaling is enabled, the following message appears in your [worker log files](/dataflow/docs/guides/logging#MonitoringLogs) :\n```\nEnabling thread vertical scaling feature in worker.\n```\nTo see your worker log files, in the [Logs Explorer](/logging/docs/view/logs-explorer-interface) , use the [Query pane](/logging/docs/view/building-queries#query-builder-menus) to filter the logs by **Log name** . Use the following log name in your filter:\n```\nprojects/PROJECT_ID/logs/dataflow.googleapis.com%2Fharness\n```\nYou can see the recommended number of threads in the worker log files. The following message includes the recommended number of threads:\n```\nworker_thread_scaling_report_response { recommended_thread_count: NUMBER }\n```\nIf resource utilization isn't in the [range for scaling](#how-it-works) , the value displayed equals the number of vCPUs on the worker.\nYou can also use the Google Cloud console to see whether dynamic thread scaling is enabled. When it's enabled, on the Dataflow **Job info** panel, in the **dataflowServiceOptions** row of the **Pipeline options** section, `enable_dynamic_thread_scaling` displays.\n## Troubleshooting\nThis section provides instructions for troubleshooting common issues related to dynamic thread scaling.\n### Performance degrades with dynamic thread scaling enabled\nIncreasing the thread count might cause performance issues in the following cases:\n- When multiple processes are trying to use the same resource, one process is able to use the resource while others must wait. This situation is known as. When resource contention occurs, pipeline performance might decline.\n- When out of memory errors occur, dynamic thread scaling is disabled. In some cases, out of memory errors might cause the pipeline to fail.\nVerify whether thread count has increased. For information about how to verify the recommended thread count, see [Verify that thread scaling is enabled](#verify) on this page.\nIf thread scaling is enabled, to resolve this issue, when you run your pipeline, don't include the dynamic thread scaling service option.\n### Unified worker \u2026 both enabled and disabled\nAfter you enable dynamic thread scaling, your job might fail with the following error:\n```\nThe workflow could not be created. Causes: (ID): Unified worker misconfigured by user and was both enabled and disabled.\n```\nThis error occurs when Runner v2 is explicitly disabled.\nTo resolve this issue, enable Runner v2. For more information, see the [Enable Dataflow Runner v2](/dataflow/docs/runner-v2#enable) section in the \"Use Dataflow Runner V2\" page.\n### Upgrade your SDK\nAfter you enable dynamic thread scaling, your job might fail with the following error:\n```\nDataflow Runner v2 requires the Apache Beam Java SDK version 2.29.0 or higher. Please upgrade your SDK and resubmit your job.\n```\n```\nDataflow Runner v2 requires the Apache Beam SDK, version 2.21.0 or higher. Please upgrade your SDK and resubmit your job.\n```\nThis error occurs when Runner v2 can't be enabled because the SDK version doesn't support it.\nTo resolve this issue, use an SDK version that supports Runner v2.\n### Thread vertical scaling feature can not be enabled\nAfter you enable dynamic thread scaling, your job might fail with the following error:\n```\nThe workflow could not be created. Causes: (ID): Thread vertical scaling feature can not be enabled while number_of_worker_harness_threads is specified.\n```\nThis error occurs when the pipeline explicitly sets the number of threads per worker by using the `numberOfWorkerHarnessThreads` or `number_of_worker_harness_threads` [pipeline option](/dataflow/docs/reference/pipeline-options#resource_utilization) .\nTo resolve this issue, remove the `numberOfWorkerHarnessThreads` or `number_of_worker_harness_threads` pipeline option from your pipeline.", "guide": "Dataflow"}