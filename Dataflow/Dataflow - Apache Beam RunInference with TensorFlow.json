{"title": "Dataflow - Apache Beam RunInference with TensorFlow", "url": "https://cloud.google.com/dataflow/docs/notebooks/run_inference_tensorflow?hl=zh-cn", "abstract": "# Dataflow - Apache Beam RunInference with TensorFlow\n| 0     | 1      |\n|:--------------------|:----------------------|\n| Run in Google Colab | View source on GitHub |\nThis notebook shows how to use the Apache Beam [RunInference](https://beam.apache.org/releases/pydoc/current/apache_beam.ml.inference.base.html#apache_beam.ml.inference.base.RunInference) transform for [TensorFlow](https://www.tensorflow.org/) . Apache Beam has built-in support for two TensorFlow model handlers: [TFModelHandlerNumpy](https://github.com/apache/beam/blob/ca0787642a6b3804a742326147281c99ae8d08d2/sdks/python/apache_beam/ml/inference/tensorflow_inference.py#L91) and [TFModelHandlerTensor](https://github.com/apache/beam/blob/ca0787642a6b3804a742326147281c99ae8d08d2/sdks/python/apache_beam/ml/inference/tensorflow_inference.py#L184) .\n- Use`TFModelHandlerNumpy`to run inference on models that use a`numpy`array as an input.\n- Use`TFModelHandlerTensor`to run inference on models that use a`tf.Tensor`as an input.\nIf your model uses `tf.Example` as an input, see the [Apache Beam RunInference with tfx-bsl](https://colab.research.google.com/github/apache/beam/blob/master/examples/notebooks/beam-ml/run_inference_tensorflow_with_tfx.ipynb) notebook.\nThere are three ways to load a TensorFlow model:\n- Provide a path to the saved model.\n- Provide a path to the saved weights of the model.\n- Provide a URL for pretrained model on TensorFlow Hub. For an example workflow, see [Apache Beam RunInference with TensorFlow and TensorFlow Hub](https://github.com/apache/beam/blob/master/examples/notebooks/beam-ml/run_inference_with_tensorflow_hub.ipynb) .\nThis notebook demonstrates the following steps:\n- Build a simple TensorFlow model.\n- Set up example data.\n- Run those examples with the built-in model handlers using one of the following methods, and then get a prediction inside an Apache Beam pipeline.:- a saved model\n- saved weightsFor more information about using RunInference, see [Get started with AI/ML pipelines](https://beam.apache.org/documentation/ml/overview/) in the Apache Beam documentation.\n", "content": "## Before you begin\nSet up your environment and download dependencies.\n### Install Apache Beam\nTo use RunInference with the built-in Tensorflow model handler, install Apache Beam version 2.46.0 or later.\n```\n!pip install protobuf --quiet!pip install apache_beam==2.46.0 --quiet# To use the newly installed versions, restart the runtime.exit()\n```\n### Authenticate with Google Cloud\nThis notebook relies on saving your model to Google Cloud. To use your Google Cloud account, authenticate this notebook.\n```\nfrom google.colab import authauth.authenticate_user()\n```\n### Import dependencies and set up your bucket\nUse the following code to import dependencies and to set up your Google Cloud Storage bucket.\nReplace `PROJECT_ID` and `BUCKET_NAME` with the ID of your project and the name of your bucket.\n```\nimport argparsefrom typing import Dict, Text, Any, Tuple, Listimport numpyfrom google.protobuf import text_formatimport tensorflow as tffrom tensorflow import kerasimport apache_beam as beamfrom apache_beam.ml.inference.base import RunInferencefrom apache_beam.ml.inference.base import KeyedModelHandlerfrom apache_beam.ml.inference.tensorflow_inference import TFModelHandlerNumpyfrom apache_beam.ml.inference.tensorflow_inference import TFModelHandlerTensorfrom apache_beam.options.pipeline_options import PipelineOptionsproject = \"PROJECT_ID\"bucket = \"BUCKET_NAME\"save_model_dir_multiply = f'gs://{bucket}/tf-inference/model/multiply_five/v1/'save_weights_dir_multiply = f'gs://{bucket}/tf-inference/weights/multiply_five/v1/'\n```\n## Create and test a simple model\nThis step creates and tests a model that predicts the 5 times table.\n### Create the model\nCreate training data and build a linear regression model.\n```\n# Create training data that represents the 5 times multiplication table for the numbers 0 to 99.# x is the data and y is the labels.x = numpy.arange(0, 100) \u00a0 # Examplesy = x * 5 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0# Labels# Use create_model to build a simple linear regression model.# Note that the model has a shape of (1) for its input layer and expects a single int64 value.def create_model():\u00a0 input_layer = keras.layers.Input(shape=(1), dtype=tf.float32, name='x')\u00a0 output_layer= keras.layers.Dense(1)(input_layer)\u00a0 model = keras.Model(input_layer, output_layer)\u00a0 model.compile(optimizer=tf.optimizers.Adam(), loss='mean_absolute_error')\u00a0 return modelmodel = create_model()model.summary()\n```\n```\nModel: \"model_1\"\n_________________________________________________________________\n Layer (type)    Output Shape    Param # \n=================================================================\n x (InputLayer)    [(None, 1)]    0   \n                 \n dense_1 (Dense)    (None, 1)     2   \n                 \n=================================================================\nTotal params: 2\nTrainable params: 2\nNon-trainable params: 0\n_________________________________________________________________\n```\n### Test the model\nThis step tests the model that you created.\n```\nmodel.fit(x, y, epochs=500, verbose=0)test_examples =[20, 40, 60, 90]value_to_predict = numpy.array(test_examples, dtype=numpy.float32)predictions = model.predict(value_to_predict)print('Test Examples ' + str(test_examples))print('Predictions ' + str(predictions))\n```\n```\n1/1 [==============================] - 0s 38ms/step\nTest Examples [20, 40, 60, 90]\nPredictions [[21.896107]\n [41.795692]\n [61.69528 ]\n [91.544655]]\n```\n### Save the model\nThis step shows how to save your model.\n```\nmodel.save(save_model_dir_multiply)\n```\nInstead of saving the entire model, you can [save the model weights for inference](https://www.tensorflow.org/guide/keras/save_and_serialize#saving_loading_only_the_models_weights_values) . You can use this method when you need the model for inference but don't need any compilation information or optimizer state. In addition, when using transfer learning applications, you can use this method to load the weights with new models.\nWith this approach, you need to pass the function to build the TensorFlow model to the `TFModelHandler` class that you're using, either `TFModelHandlerNumpy` or `TFModelHandlerTensor` . You also need to pass `model_type=ModelType.SAVED_WEIGHTS` to the class.\n```\nmodel_handler = TFModelHandlerNumpy(path_to_weights, model_type=ModelType.SAVED_WEIGHTS, create_model_fn=build_tensorflow_model)\n```\n```\nmodel.save_weights(save_weights_dir_multiply)\n```\n## Run the pipeline\nUse the following code to run the pipeline by specifying path to the trained TensorFlow model.\n```\nclass FormatOutput(beam.DoFn):\u00a0 def process(self, element, *args, **kwargs):\u00a0 \u00a0 \u00a0yield \"example is {example} prediction is {prediction}\".format(example=element.example, prediction=element.inference)examples = numpy.array([20, 40, 60, 90], dtype=numpy.float32)model_handler = TFModelHandlerNumpy(save_model_dir_multiply)with beam.Pipeline() as p:\u00a0 \u00a0 _ = (p | beam.Create(examples)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| RunInference(model_handler)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| beam.ParDo(FormatOutput())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| beam.Map(print)\u00a0 \u00a0 \u00a0 \u00a0 )\n```\n```\nWARNING:apache_beam.runners.interactive.interactive_environment:Dependencies required for Interactive Beam PCollection visualization are not available, please use: `pip install apache-beam[interactive]` to install necessary dependencies to enable all data visualization features.\nexample is 20.0 prediction is [21.896107]\nexample is 40.0 prediction is [41.795692]\nexample is 60.0 prediction is [61.69528]\nexample is 90.0 prediction is [91.544655]\n```\nUse the following code to run the pipeline with the saved weights of a TensorFlow model.\nTo load the model with saved weights, the `TFModelHandlerNumpy` class requires a `create_model` function that builds and returns a TensorFlow model that is compatible with the saved weights.\n```\nfrom apache_beam.ml.inference.tensorflow_inference import ModelTypeexamples = numpy.array([20, 40, 60, 90], dtype=numpy.float32)model_handler = TFModelHandlerNumpy(save_weights_dir_multiply, model_type=ModelType.SAVED_WEIGHTS, create_model_fn=create_model)with beam.Pipeline() as p:\u00a0 \u00a0 _ = (p | beam.Create(examples)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| RunInference(model_handler)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| beam.ParDo(FormatOutput())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| beam.Map(print)\u00a0 \u00a0 \u00a0 \u00a0 )\n```\n```\nexample is 20.0 prediction is [21.896107]\nexample is 40.0 prediction is [41.795692]\nexample is 60.0 prediction is [61.69528]\nexample is 90.0 prediction is [91.544655]\n```\n## Use a keyed model handler\nTo use a keyed model handler, use `KeyedModelHandler` with TensorFlow by using `TFModelHandlerNumpy` .\nBy default, the `ModelHandler` does not expect a key.\n- If you know that keys are associated with your examples, use`beam.KeyedModelHandler`to wrap the model handler.\n- If you don't know whether keys are associated with your examples, use`beam.MaybeKeyedModelHandler`.\n```\nclass FormatOutputKeyed(FormatOutput):\u00a0 # To simplify, inherit from FormatOutput.\u00a0 def process(self, tuple_in: Tuple):\u00a0 \u00a0 key, element = tuple_in\u00a0 \u00a0 output = super().process(element)\u00a0 \u00a0 yield \"{} : {}\".format(key, [op for op in output])examples = numpy.array([(1,20), (2,40), (3,60), (4,90)], dtype=numpy.float32)keyed_model_handler = KeyedModelHandler(TFModelHandlerNumpy(save_model_dir_multiply))with beam.Pipeline() as p:\u00a0 \u00a0 _ = (p | 'CreateExamples' >> beam.Create(examples)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| RunInference(keyed_model_handler)\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| beam.ParDo(FormatOutputKeyed())\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0| beam.Map(print)\u00a0 \u00a0 \u00a0 \u00a0 )\n```\n```\n1.0 : ['example is 20.0 prediction is [51.815357]']\n2.0 : ['example is 40.0 prediction is [101.63492]']\n3.0 : ['example is 60.0 prediction is [151.45448]']\n4.0 : ['example is 90.0 prediction is [226.18384]']\n```", "guide": "Dataflow"}