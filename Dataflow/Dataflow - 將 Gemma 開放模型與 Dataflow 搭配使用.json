{"title": "Dataflow - \u5c07 Gemma \u958b\u653e\u6a21\u578b\u8207 Dataflow \u642d\u914d\u4f7f\u7528", "url": "https://cloud.google.com/dataflow/docs/machine-learning/gemma?hl=zh-cn", "abstract": "# Dataflow - \u5c07 Gemma \u958b\u653e\u6a21\u578b\u8207 Dataflow \u642d\u914d\u4f7f\u7528\nGemma \u662f\u4e00\u500b\u5148\u9032\u7684\u8f15\u91cf\u7d1a\u958b\u653e\u6a21\u578b\uff0c\u57fa\u65bc\u7528\u65bc\u5275\u5efa Gemini \u6a21\u578b\u7684\u7814\u7a76\u548c\u6280\u8853\u69cb\u5efa\u800c\u6210\u3002\u60a8\u53ef\u4ee5\u5728 Apache Beam \u63a8\u7406\u6d41\u6c34\u7dda\u4e2d\u4f7f\u7528 Gemma \u6a21\u578b\u3002\u8853\u8a9e \u201c\u958b\u653e\u6b0a\u91cd\u201d\u8868\u793a\u6a21\u578b\u7684\u9810\u8a13\u7df4\u53c3\u6578\uff08\u5373\u6b0a\u91cd\uff09\u6703\u88ab\u91cb\u653e\u3002\u4e0d\u63d0\u4f9b\u539f\u59cb\u6578\u64da\u96c6\u3001\u6a21\u578b\u67b6\u69cb\u548c\u8a13\u7df4\u4ee3\u78bc\u7b49\u8a73\u7d30\u4fe1\u606f\u3002\n- \u5982\u9700\u67e5\u770b\u53ef\u7528\u6a21\u578b\u7684\u5217\u8868\u4ee5\u53ca\u6bcf\u500b\u6a21\u578b\u7684\u8a73\u7d30\u4fe1\u606f\uff0c\u8acb\u53c3\u95b1 [Gemma \u6a21\u578b\u6982\u89bd](https://ai.google.dev/gemma/docs/?hl=zh-cn) \u3002\n- \u5982\u9700\u77ad\u89e3\u5982\u4f55\u4e0b\u8f09\u548c\u4f7f\u7528\u6a21\u578b\uff0c\u8acb\u53c3\u95b1 [\u958b\u59cb\u901a\u904e KerasNLP \u4f7f\u7528 Gemma](https://ai.google.dev/gemma/docs/get_started?hl=zh-cn) \u3002\n- \u5982\u9700\u4e0b\u8f09\u6a21\u578b\uff0c\u8acb\u53c3\u95b1 [Gemma \u6a21\u578b](https://www.kaggle.com/models/keras/gemma) \u3002", "content": "## \u4f7f\u7528\u5834\u666f\n\u60a8\u53ef\u4ee5\u5c07 Gemma \u6a21\u578b\u8207 Dataflow \u914d\u5408\u4f7f\u7528\uff0c\u4ee5\u9032\u884c [\u60c5\u611f\u5206\u6790](https://en.wikipedia.org/wiki/Sentiment_analysis) \u3002\u85c9\u52a9 Dataflow \u548c Gemma \u6a21\u578b\uff0c\u60a8\u53ef\u4ee5\u5728\u4e8b\u4ef6\uff08\u4f8b\u5982\u5ba2\u6236\u8a55\u50f9\uff09\u5230\u9054\u6642\u8655\u7406\u4e8b\u4ef6\u3002\u901a\u904e\u6a21\u578b\u904b\u884c\u8a55\u50f9\u9032\u884c\u5206\u6790\uff0c\u7136\u5f8c\u751f\u6210\u5efa\u8b70\u3002\u901a\u904e\u5c07 Gemma \u8207 Apache Beam \u7d50\u5408\u4f7f\u7528\uff0c\u60a8\u53ef\u4ee5\u7121\u7e2b\u5b8c\u6210\u6b64\u5de5\u4f5c\u6d41\u3002\n## \u652f\u6301\u548c\u9650\u5236\nApache Beam \u548c Dataflow \u652f\u6301 Gemma \u958b\u653e\u6a21\u578b\uff0c\u4e26\u5177\u6709\u4ee5\u4e0b\u8981\u6c42\uff1a\n- \u9069\u7528\u65bc\u4f7f\u7528 Apache Beam Python SDK 2.46.0 \u53ca\u66f4\u9ad8\u7248\u672c\u7684\u6279\u8655\u7406\u548c\u6d41\u8655\u7406\u6d41\u6c34\u7dda\u3002\n- Dataflow \u4f5c\u696d\u5fc5\u9808\u4f7f\u7528 [Runner v2](https://cloud.google.com/dataflow/docs/runner-v2?hl=zh-cn) \u3002\n- Dataflow \u4f5c\u696d\u5fc5\u9808\u4f7f\u7528 [GPU](https://cloud.google.com/dataflow/docs/gpu/gpu-support?hl=zh-cn) \u3002\u5982\u9700\u67e5\u770b Dataflow \u652f\u6301\u7684 GPU \u985e\u578b\u5217\u8868\uff0c\u8acb\u53c3\u95b1 [\u53ef\u7528\u6027](https://cloud.google.com/dataflow/docs/gpu/gpu-support?hl=zh-cn#availability) \u3002\u5efa\u8b70\u4f7f\u7528 T4 \u548c L4 GPU \u985e\u578b\u3002\n- \u6a21\u578b\u5fc5\u9808\u4ee5`.keras`\u6587\u4ef6\u683c\u5f0f\u4e0b\u8f09\u4e26\u4fdd\u5b58\u3002\n- \u5efa\u8b70\u4f7f\u7528 [TensorFlow \u6a21\u578b\u8655\u7406\u7a0b\u5e8f](https://beam.apache.org/documentation/ml/about-ml/#tensorflow) \uff0c\u4f46\u4e0d\u5f37\u5236\u8981\u6c42\u3002## \u524d\u63d0\u689d\u4ef6\n- \u901a\u904e [Kaggle](https://www.kaggle.com/models/keras/gemma) \u8a2a\u554f Gemma \u6a21\u578b\u3002\n- \u586b\u5beb [\u540c\u610f\u8868\u55ae](https://www.kaggle.com/models/google/gemma/license/consent) \u4e26\u63a5\u53d7\u689d\u6b3e\u53ca\u689d\u4ef6\u3002\n- \u4e0b\u8f09 Gemma \u6a21\u578b\u3002\u4ee5`.keras`\u6587\u4ef6\u683c\u5f0f\u5c07\u5176\u4fdd\u5b58\u5728 Dataflow \u4f5c\u696d\u53ef\u4ee5\u8a2a\u554f\u7684\u4f4d\u7f6e\uff0c\u4f8b\u5982 Cloud Storage \u5b58\u5132\u6876\u3002\u7232\u6a21\u578b\u8def\u5f91\u8b8a\u91cf\u6307\u5b9a\u503c\u6642\uff0c\u8acb\u4f7f\u7528\u6b64\u5b58\u5132\u4f4d\u7f6e\u7684\u8def\u5f91\u3002\n- \u5982\u9700\u5728 Dataflow \u4e0a\u904b\u884c\u4f5c\u696d\uff0c\u8acb\u5275\u5efa\u81ea\u5b9a\u7fa9\u5bb9\u5668\u6620\u50cf\u3002\u6b64\u6b65\u9a5f\u8b93\u60a8\u53ef\u4ee5\u5728 Dataflow \u670d\u52d9\u4e0a\u4f7f\u7528 GPU \u904b\u884c\u6d41\u6c34\u7dda\u3002\u5982\u9700\u77ad\u89e3\u8a73\u60c5\uff0c\u8acb\u53c3\u95b1\u201c\u4f7f\u7528 GPU \u904b\u884c\u6d41\u6c34\u7dda\u201d\u4e2d\u7684 [\u69cb\u5efa\u81ea\u5b9a\u7fa9\u5bb9\u5668\u6620\u50cf](https://cloud.google.com/dataflow/docs/gpu/use-gpus?hl=zh-cn#custom-container) \u3002## \u5728\u6d41\u6c34\u7dda\u4e2d\u4f7f\u7528 Gemma\n\u8981\u5728 Apache Beam \u6d41\u6c34\u7dda\u4e2d\u4f7f\u7528 Gemma \u6a21\u578b\uff0c\u8acb\u6309\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\u3002\n- \u5728 Apache Beam \u4ee3\u78bc\u4e2d\uff0c\u5c0e\u5165\u6d41\u6c34\u7dda\u4f9d\u8cf4\u9805\u5f8c\uff0c\u8acb\u6dfb\u52a0\u6307\u5411\u5df2\u4fdd\u5b58\u7684\u6a21\u578b\u7684\u8def\u5f91\uff1a```\nmodel_path = \"MODEL_PATH\"\n```\u5c07 `` \u66ff\u63db\u7232\u60a8\u4fdd\u5b58\u4e0b\u8f09\u7684\u6a21\u578b\u7684\u8def\u5f91\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u5c07\u6a21\u578b\u4fdd\u5b58\u5230 Cloud Storage \u5b58\u5132\u6876\uff0c\u5247\u8def\u5f91\u7684\u683c\u5f0f\u7232 `gs://` `` `/` `` `.keras` \u3002\n- Gemma \u6a21\u578b\u7684 Keras \u5be6\u73fe\u5177\u6709\u4e00\u500b `generate()` \u65b9\u6cd5\uff0c\u8a72\u65b9\u6cd5\u6839\u64da\u63d0\u793a\u751f\u6210\u6587\u672c\u3002\u5982\u9700\u5c07\u5143\u7d20\u50b3\u905e\u7d66 `generate()` \u65b9\u6cd5\uff0c\u8acb\u4f7f\u7528\u81ea\u5b9a\u7fa9\u63a8\u7406\u51fd\u6578\u3002```\ndef gemma_inference_function(model, batch, inference_args, model_id):\u00a0 vectorized_batch = np.stack(batch, axis=0)\u00a0 # The only inference_arg expected here is a max_length parameter to\u00a0 # determine how many words are included in the output.\u00a0 predictions = model.generate(vectorized_batch, **inference_args)\u00a0 return utils._convert_to_result(batch, predictions, model_id)\n```\n- \u904b\u884c\u6d41\u6c34\u7dda\uff0c\u4e26\u6307\u5b9a\u7d93\u904e\u8a13\u7df4\u7684\u6a21\u578b\u7684\u8def\u5f91\u3002\u6b64\u793a\u4f8b\u4f7f\u7528 TensorFlow \u6a21\u578b\u8655\u7406\u7a0b\u5e8f\u3002```\nclass FormatOutput(beam.DoFn):\u00a0 def process(self, element, *args, **kwargs):\u00a0 \u00a0 yield \"Input: {input}, Output: {output}\".format(input=element.example, output=element.inference)# Instantiate a NumPy array of string prompts for the model.examples = np.array([\"Tell me the sentiment of the phrase 'I like pizza': \"])# Specify the model handler, providing a path and the custom inference function.model_handler = TFModelHandlerNumpy(model_path, inference_fn=gemma_inference_function)with beam.Pipeline() as p:\u00a0 _ = (p | beam.Create(examples) # Create a PCollection of the prompts.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0| RunInference(model_handler, inference_args={'max_length': 32}) # Send the prompts to the model and get responses.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0| beam.ParDo(FormatOutput()) # Format the output.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0| beam.Map(print) # Print the formatted output.\u00a0 )\n```## \u5f8c\u7e8c\u6b65\u9a5f\n- [\u4f7f\u7528 Gemma \u958b\u653e\u6a21\u578b\u904b\u884c\u63a8\u7406](https://cloud.google.com/dataflow/docs/machine-learning/gemma-run-inference?hl=zh-cn) \u3002\n- [\u4f7f\u7528 GPU \u904b\u884c\u6d41\u6c34\u7dda](https://cloud.google.com/dataflow/docs/gpu/use-gpus?hl=zh-cn) \u3002\n- [\u6a21\u578b\u8abf\u512a](https://ai.google.dev/gemma/docs/lora_tuning?hl=zh-cn) \u3002", "guide": "Dataflow"}