{"title": "Dataflow - Dataflow ML in ML workflows", "url": "https://cloud.google.com/dataflow/docs/machine-learning/ml-data", "abstract": "# Dataflow - Dataflow ML in ML workflows\nTo orchestrate complex machine learning workflows, you can create frameworks that include data pre- and post-processing steps. You might need to pre-process data before you can use it to train your model or to post-process data to transform the output of your model.\nML workflows often contain many steps that together form a pipeline. To build your machine learning pipeline, you can use one of the following methods.\n- Use an orchestration framework that has a built-in integration with Apache Beam and the Dataflow runner, such as TensorFlow Extended (TFX) or Kubeflow Pipelines (KFP). This option is the least complex.\n- Build a custom component in a [Dataflow template](/dataflow/docs/concepts/dataflow-templates) and then call the template from your ML pipeline. The call contains your Apache Beam code.\n- Build a custom component to use in your ML pipeline and put the Python code directly in the component. You define a custom Apache Beam pipeline and use the Dataflow runner within the custom component. This option is the most complex and requires you to manage pipeline dependencies.\nAfter you create your machine learning pipeline, you can use an orchestrator to chain together the components to create an end-to-end machine learning workflow. To orchestrate the components, you can use a managed service, such as [Vertex AI Pipelines](/vertex-ai/docs/pipelines/introduction) .\nWorkflow orchestration use cases are described in the following sections.\n- [I want to use Dataflow with Vertex AI Pipelines](#vertex) \n- [I want to use Dataflow with KFP](#kfp) \n- [I want to use Dataflow with TFX](#tfx) \nBoth [TFX](https://www.tensorflow.org/tfx) and [Kubeflow Pipelines](https://www.kubeflow.org/docs/components/pipelines/v1/introduction/) (KFP) use Apache Beam components.\n", "content": "## I want to use Dataflow with Vertex AI Pipelines\nVertex AI Pipelines help you to automate, monitor, and govern your ML systems by orchestrating your ML workflows in a serverless manner. You can use Vertex AI Pipelines to orchestrate workflow directed acyclic graphs (DAGs) defined by either TFX or KFP and to automatically track your ML artifacts using Vertex ML Metadata. To learn how to incorporate Dataflow with TFX and KFP, use the information in the following sections.\n- [Kubeflow Pipelines](#kfp) \n- [TFX pipeline](#tfx) ## I want to use Dataflow with Kubeflow Pipelines\nKubeflow is an ML toolkit dedicated to making deployments of ML workflows on Kubernetes simple, portable, and scalable. Kubeflow Pipelines are reusable end-to-end ML workflows built using the [Kubeflow Pipelines SDK](https://www.kubeflow.org/docs/components/pipelines/v1/sdk/sdk-overview/) .\nThe Kubeflow Pipelines service aims to provide end-to-end orchestration and to facilitate experimentation and reuse. With KFP, you can experiment with orchestration techniques and manage your tests, and you can reuse components and pipelines to create multiple end-to-end solutions without starting over each time.\nWhen using Dataflow with KFP, you can use the [DataflowPythonJobOP](/vertex-ai/docs/pipelines/dataflow-component#dataflowpythonjobop) operator or the [DataflowFlexTemplateJobOp](/vertex-ai/docs/pipelines/dataflow-component#dataflowflextemplatejobop_preview) operator. You can also build a fully custom component. We recommend using the `DataflowPythonJobOP` operator.\nIf you want to build a fully custom component, see the [Dataflow components](/vertex-ai/docs/pipelines/dataflow-component) page in the Vertex AI documentation.\n## I want to use Dataflow with TFX\nTFX pipeline components are built on TFX libraries, and the data processing libraries use Apache Beam directly. For example, TensorFlow Transform translates the user's calls to Apache Beam. Therefore, you can use Apache Beam and Dataflow with TFX pipelines without needing to do extra configuration work. To use TFX with Dataflow, when you build your TFX pipeline, use the Dataflow runner. For more information, see the following resources:\n- [Apache Beam and TFX](https://www.tensorflow.org/tfx/guide/beam) \n- [TensorFlow Extended (TFX): Using Apache Beam for large scale data processing](https://blog.tensorflow.org/2020/03/tensorflow-extended-tfx-using-apache-beam-large-scale-data-processing.html)", "guide": "Dataflow"}