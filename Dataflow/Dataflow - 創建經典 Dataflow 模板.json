{"title": "Dataflow - \u5275\u5efa\u7d93\u5178 Dataflow \u6a21\u677f", "url": "https://cloud.google.com/dataflow/docs/guides/templates/creating-templates?hl=zh-cn", "abstract": "# Dataflow - \u5275\u5efa\u7d93\u5178 Dataflow \u6a21\u677f\n\u5728\u672c\u6587\u6a94\u4e2d\uff0c\u60a8\u5c07\u77ad\u89e3\u5982\u4f55\u901a\u904e Dataflow \u6d41\u6c34\u7dda\u4ee3\u78bc\u5275\u5efa\u81ea\u5b9a\u7fa9\u7d93\u5178\u6a21\u677f\u3002 \u7d93\u5178\u6a21\u677f\u6253\u5305\u73fe\u6709 Dataflow \u6d41\u6c34\u7dda\uff0c\u4ee5\u5275\u5efa\u53ef\u91cd\u8907\u4f7f\u7528\u7684\u6a21\u677f\uff0c\u60a8\u53ef\u4ee5\u901a\u904e\u66f4\u6539\u7279\u5b9a\u7684\u6d41\u6c34\u7dda\u53c3\u6578\u4f86\u7232\u6bcf\u500b\u4f5c\u696d\u81ea\u5b9a\u7fa9\u6a21\u677f\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u5f9e\u73fe\u6709\u6d41\u6c34\u7dda\u751f\u6210\u6a21\u677f\uff0c\u800c\u4e0d\u662f\u7de8\u5beb\u6a21\u677f\u3002\n\u4ee5\u4e0b\u662f\u6b64\u904e\u7a0b\u7684\u7c21\u8981\u4ecb\u7d39\u3002\u5f8c\u7e8c\u90e8\u5206\u8a73\u7d30\u4ecb\u7d39\u4e86\u6b64\u904e\u7a0b\u3002\n- \u5728\u6d41\u6c34\u7dda\u4ee3\u78bc\u4e2d\uff0c\u7232\u8981\u5728\u904b\u884c\u6642\u8a2d\u7f6e\u6216\u4f7f\u7528\u7684\u6240\u6709\u6d41\u6c34\u7dda\u9078\u9805\u4f7f\u7528 [ValueProvider](https://cloud.google.com/dataflow/docs/guides/templates/creating-templates?hl=zh-cn#about-runtime-parameters-and-the-valueprovider-interface) \u63a5\u53e3\u3002\u4f7f\u7528\u63a5\u53d7\u904b\u884c\u6642\u53c3\u6578\u7684`DoFn`\u5c0d\u8c61\u3002\n- \u4f7f\u7528\u9644\u52a0\u5143\u6578\u64da\u64f4\u5c55\u6a21\u677f\uff0c\u4ee5\u4fbf\u5728\u904b\u884c\u7d93\u5178\u6a21\u677f\u6642\u9a57\u8b49\u81ea\u5b9a\u7fa9\u53c3\u6578\u3002\u6b64\u985e\u5143\u6578\u64da\u7684\u793a\u4f8b\u5305\u62ec\u81ea\u5b9a\u7fa9\u7d93\u5178\u6a21\u677f\u7684\u540d\u7a31\u548c\u53ef\u9078\u53c3\u6578\u3002\n- \u6aa2\u67e5\u6d41\u6c34\u7dda I/O \u9023\u63a5\u5668\u662f\u5426\u652f\u6301`ValueProvider`\u5c0d\u8c61\uff0c\u4e26\u6839\u64da\u9700\u8981\u9032\u884c\u66f4\u6539\u3002\n- \u5275\u5efa\u4e26\u66ab\u5b58\u81ea\u5b9a\u7fa9\u7d93\u5178\u6a21\u677f\u3002\n- \u904b\u884c\u81ea\u5b9a\u7fa9\u7d93\u5178\u6a21\u677f\u3002\n\u5982\u9700\u77ad\u89e3\u4e0d\u540c\u985e\u578b\u7684 Dataflow \u6a21\u677f\u53ca\u5176\u512a\u52e2\u4ee5\u53ca\u4f55\u6642\u9078\u64c7\u7d93\u5178\u6a21\u677f\uff0c\u8acb\u53c3\u95b1 [Dataflow \u6a21\u677f](https://cloud.google.com/dataflow/docs/concepts/dataflow-templates?hl=zh-cn) \u3002\n", "content": "## \u904b\u884c\u7d93\u5178\u6a21\u677f\u6240\u9700\u7684\u6b0a\u9650\n\u904b\u884c Dataflow \u7d93\u5178\u6a21\u677f\u6240\u9700\u7684\u6b0a\u9650\u53d6\u6c7a\u65bc\u60a8\u904b\u884c\u6a21\u677f\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u6d41\u6c34\u7dda\u7684\u4f86\u6e90\u548c\u63a5\u6536\u5668\u662f\u5426\u4f4d\u65bc\u5176\u4ed6\u9805\u76ee\u4e2d\u3002\n\u5982\u9700\u8a73\u7d30\u77ad\u89e3\u5982\u4f55\u5728\u672c\u5730\u6216\u4f7f\u7528 Google Cloud \u904b\u884c Dataflow \u6d41\u6c34\u7dda\uff0c\u8acb\u53c3\u95b1 [Dataflow \u5b89\u5168\u6027\u548c\u6b0a\u9650](https://cloud.google.com/dataflow/docs/concepts/security-and-permissions?hl=zh-cn) \u3002\n\u5982\u9700\u67e5\u770b Dataflow \u89d2\u8272\u548c\u6b0a\u9650\u7684\u5217\u8868\uff0c\u8acb\u53c3\u95b1 [Dataflow \u8a2a\u554f\u6b0a\u9650\u63a7\u5236](https://cloud.google.com/dataflow/docs/concepts/access-control?hl=zh-cn) \u3002\n## \u9650\u5236\n- \u7d93\u5178\u6a21\u677f\u4e0d\u652f\u6301\u4ee5\u4e0b [\u6d41\u6c34\u7dda\u9078\u9805](https://cloud.google.com/dataflow/docs/reference/pipeline-options?hl=zh-cn#resource_utilization) \u3002\u5982\u679c\u60a8\u9700\u8981\u63a7\u5236\u5de5\u4f5c\u5668\u81ea\u52d5\u5316\u6e2c\u8a66\u6846\u67b6\u7dda\u7a0b\u6578\uff0c\u8acb\u4f7f\u7528 [Flex \u6a21\u677f](https://cloud.google.com/dataflow/docs/guides/templates/using-flex-templates?hl=zh-cn) \u3002\n```\nnumberOfWorkerHarnessThreads\u00a0 \n``````\nnumber_of_worker_harness_threads\u00a0 \n```\n- Dataflow \u904b\u884c\u7a0b\u5e8f\u4e0d\u652f\u6301 Pub/Sub \u4e3b\u984c\u548c\u8a02\u95b1\u53c3\u6578\u7684`ValueProvider`\u9078\u9805\u3002\u5982\u679c\u60a8\u9700\u8981\u5728\u904b\u884c\u6642\u53c3\u6578\u4e2d\u4f7f\u7528 Pub/Sub \u9078\u9805\uff0c\u8acb\u4f7f\u7528 Flex \u6a21\u677f\u3002## \u95dc\u65bc\u904b\u884c\u6642\u53c3\u6578\u548c ValueProvider \u63a5\u53e3`ValueProvider` \u63a5\u53e3\u5141\u8a31\u6d41\u6c34\u7dda\u63a5\u53d7\u904b\u884c\u6642\u53c3\u6578\u3002Apache Beam \u63d0\u4f9b\u4e09\u7a2e\u985e\u578b\u7684 `ValueProvider` \u5c0d\u8c61\u3002\n| \u540d\u7a31     | \u8aaa\u660e                                                                                                                                |\n|:---------------------||\n| RuntimeValueProvider | RuntimeValueProvider \u662f\u9ed8\u8a8d\u7684 ValueProvider \u985e\u578b\u3002 RuntimeValueProvider \u5141\u8a31\u6d41\u6c34\u7dda\u63a5\u53d7\u50c5\u5728\u6d41\u6c34\u7dda\u57f7\u884c\u671f\u9593\u53ef\u7528\u7684\u503c\u3002\u8a72\u503c\u5728\u6d41\u6c34\u7dda\u69cb\u5efa\u671f\u9593\u4e0d\u53ef\u7528\uff0c\u56e0\u6b64\u60a8\u7121\u6cd5\u7528\u5b83\u4f86\u66f4\u6539\u6d41\u6c34\u7dda\u7684\u5de5\u4f5c\u6d41\u7a0b\u5716\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 isAccessible() \u4f86\u6aa2\u67e5 ValueProvider \u7684\u503c\u662f\u5426\u53ef\u7528\u3002\u5982\u679c\u5728\u6d41\u6c34\u7dda\u57f7\u884c\u4e4b\u524d\u8abf\u7528 get()\uff0cApache Beam \u5c07\u8fd4\u56de\u932f\u8aa4\uff1a Value only available at runtime, but accessed from a non-runtime context. \u5982\u679c\u60a8\u7121\u6cd5\u63d0\u524d\u77e5\u9053\u503c\uff0c\u8acb\u4f7f\u7528 RuntimeValueProvider\u3002\u5982\u9700\u5728\u904b\u884c\u6642\u66f4\u6539\u53c3\u6578\u503c\uff0c\u8acb\u4e0d\u8981\u7232\u6a21\u677f\u4e2d\u7684\u53c3\u6578\u8a2d\u7f6e\u503c\u3002\u901a\u904e\u6a21\u677f\u5275\u5efa\u4f5c\u696d\u6642\u8a2d\u7f6e\u53c3\u6578\u7684\u503c\u3002 |\n| StaticValueProvider | StaticValueProvider \u53ef\u8b93\u60a8\u7232\u6d41\u6c34\u7dda\u63d0\u4f9b\u4e00\u500b\u975c\u614b\u503c\u3002\u8a72\u503c\u5728\u6d41\u6c34\u7dda\u69cb\u5efa\u671f\u9593\u53ef\u7528\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u7528\u5b83\u4f86\u66f4\u6539\u6d41\u6c34\u7dda\u7684\u5de5\u4f5c\u6d41\u7a0b\u5716\u3002 \u5982\u679c\u60a8\u63d0\u524d\u77e5\u9053\u503c\uff0c\u8acb\u4f7f\u7528 StaticValueProvider\u3002\u6709\u95dc\u793a\u4f8b\uff0c\u8acb\u53c3\u898b StaticValueProvider \u90e8\u5206\u3002                                                                             |\n| NestedValueProvider | NestedValueProvider \u53ef\u8b93\u60a8\u5f9e\u53e6\u4e00\u500b ValueProvider \u5c0d\u8c61\u8a08\u7b97\u503c\u3002NestedValueProvider \u5c01\u88dd ValueProvider\uff0c\u4e26\u4e14\u5c01\u88dd\u7684 ValueProvider \u7684\u985e\u578b\u6c7a\u5b9a\u4e86\u5728\u6d41\u6c34\u7dda\u69cb\u9020\u671f\u9593\u80fd\u5426\u8a2a\u554f\u503c\u3002 \u5982\u679c\u8981\u5728\u904b\u884c\u6642\u4f7f\u7528\u8a72\u503c\u8a08\u7b97\u53e6\u4e00\u500b\u503c\uff0c\u8acb\u4f7f\u7528 NestedValueProvider\u3002\u6709\u95dc\u793a\u4f8b\uff0c\u8acb\u53c3\u898b NestedValueProvider \u90e8\u5206\u3002                                                            |\n## \u5728\u6d41\u6c34\u7dda\u4ee3\u78bc\u4e2d\u4f7f\u7528\u904b\u884c\u6642\u53c3\u6578\u672c\u90e8\u5206\u4ecb\u7d39\u5982\u4f55\u4f7f\u7528 `ValueProvider` \u3001 `StaticValueProvider` \u548c `NestedValueProvider` \u3002\n **\u6ce8\u610f** \uff1a\u5982\u679c\u60a8\u6c92\u6709\u5728\u7d93\u5178\u6a21\u677f\u4e2d\u4f7f\u7528`ValueProvider`\u63a5\u53e3\uff0c\u5247\u7cfb\u7d71\u53ef\u80fd\u6703\u5ffd\u7565\u60a8\u60f3\u8981\u5728\u904b\u884c\u6642\u8a2d\u7f6e\u6216\u4f7f\u7528\u7684\u6d41\u6c34\u7dda\u9078\u9805\u3002### \u5728\u6d41\u6c34\u7dda\u9078\u9805\u4e2d\u4f7f\u7528 ValueProvider\u7232\u8981\u5728\u904b\u884c\u6642\u8a2d\u7f6e\u6216\u4f7f\u7528\u7684\u6240\u6709\u6d41\u6c34\u7dda\u9078\u9805\u4f7f\u7528 `ValueProvider` \u3002\n\u4f8b\u5982\uff0c\u4ee5\u4e0b `WordCount` \u4ee3\u78bc\u6bb5\u4e0d\u652f\u6301\u904b\u884c\u6642\u53c3\u6578\u3002\u8a72\u4ee3\u78bc\u6703\u6dfb\u52a0\u4e00\u500b\u8f38\u5165\u6587\u4ef6\u9078\u9805\u3001\u5275\u5efa\u4e00\u500b\u6d41\u6c34\u7dda\u4e26\u5f9e\u8f38\u5165\u6587\u4ef6\u4e2d\u8b80\u53d6\u884c\u3002```\n\u00a0 public interface WordCountOptions extends PipelineOptions {\u00a0 \u00a0 @Description(\"Path of the file to read from\")\u00a0 \u00a0 @Default.String(\"gs://dataflow-samples/shakespeare/kinglear.txt\")\u00a0 \u00a0 String getInputFile();\u00a0 \u00a0 void setInputFile(String value);\u00a0 }\u00a0 public static void main(String[] args) {\u00a0 \u00a0 WordCountOptions options =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PipelineOptionsFactory.fromArgs(args).withValidation()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .as(WordCountOptions.class);\u00a0 \u00a0 Pipeline p = Pipeline.create(options);\u00a0 \u00a0 p.apply(\"ReadLines\", TextIO.read().from(options.getInputFile()));\u00a0 \u00a0 ...\n``````\n\u00a0 class WordcountOptions(PipelineOptions):\u00a0 \u00a0 @classmethod\u00a0 \u00a0 def _add_argparse_args(cls, parser):\u00a0 \u00a0 \u00a0 parser.add_argument(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '--input',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 default='gs://dataflow-samples/shakespeare/kinglear.txt',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 help='Path of the file to read from')\u00a0 \u00a0 \u00a0 parser.add_argument(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '--output',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 required=True,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 help='Output file to write results to.')\u00a0 pipeline_options = PipelineOptions(['--output', 'some/output_path'])\u00a0 p = beam.Pipeline(options=pipeline_options)\u00a0 wordcount_options = pipeline_options.view_as(WordcountOptions)\u00a0 lines = p | 'read' >> ReadFromText(wordcount_options.input)\n```\n\u5982\u9700\u6dfb\u52a0\u904b\u884c\u6642\u53c3\u6578\u652f\u6301\uff0c\u8acb\u4fee\u6539\u8f38\u5165\u6587\u4ef6\u9078\u9805\u4ee5\u4f7f\u7528 `ValueProvider` \u3002\u5c0d\u65bc\u8f38\u5165\u6587\u4ef6\u9078\u9805\u985e\u578b\uff0c\u8acb\u4f7f\u7528 `ValueProvider<String>` \uff08\u800c\u4e0d\u662f `String` \uff09\u3002\n```\n\u00a0 public interface WordCountOptions extends PipelineOptions {\u00a0 \u00a0 @Description(\"Path of the file to read from\")\u00a0 \u00a0 @Default.String(\"gs://dataflow-samples/shakespeare/kinglear.txt\")\u00a0 \u00a0 ValueProvider<String> getInputFile();\u00a0 \u00a0 void setInputFile(ValueProvider<String> value);\u00a0 }\u00a0 public static void main(String[] args) {\u00a0 \u00a0 WordCountOptions options =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PipelineOptionsFactory.fromArgs(args).withValidation()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .as(WordCountOptions.class);\u00a0 \u00a0 Pipeline p = Pipeline.create(options);\u00a0 \u00a0 p.apply(\"ReadLines\", TextIO.read().from(options.getInputFile()));\u00a0 \u00a0 ...\n```\u5c07 `add_argument` \u66ff\u63db\u7232 `add_value_provider_argument` \u3002\n```\n\u00a0class WordcountOptions(PipelineOptions):\u00a0 \u00a0 @classmethod\u00a0 \u00a0 def _add_argparse_args(cls, parser):\u00a0 \u00a0 \u00a0 # Use add_value_provider_argument for arguments to be templatable\u00a0 \u00a0 \u00a0 # Use add_argument as usual for non-templatable arguments\u00a0 \u00a0 \u00a0 parser.add_value_provider_argument(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '--input',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 default='gs://dataflow-samples/shakespeare/kinglear.txt',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 help='Path of the file to read from')\u00a0 \u00a0 \u00a0 parser.add_argument(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 '--output',\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 required=True,\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 help='Output file to write results to.')\u00a0 pipeline_options = PipelineOptions(['--output', 'some/output_path'])\u00a0 p = beam.Pipeline(options=pipeline_options)\u00a0 wordcount_options = pipeline_options.view_as(WordcountOptions)\u00a0 lines = p | 'read' >> ReadFromText(wordcount_options.input)\n```\n### \u5728\u51fd\u6578\u4e2d\u4f7f\u7528 ValueProvider\u5982\u9700\u5728\u60a8\u81ea\u5df1\u7684\u51fd\u6578\u4e2d\u4f7f\u7528\u904b\u884c\u6642\u53c3\u6578\u503c\uff0c\u8acb\u66f4\u65b0\u51fd\u6578\u4ee5\u4f7f\u7528 `ValueProvider` \u53c3\u6578\u3002\n\u4ee5\u4e0b\u793a\u4f8b\u5305\u542b\u4e00\u500b\u6574\u6578 `ValueProvider` \u9078\u9805\u548c\u4e00\u500b\u505a\u6574\u6578\u52a0\u6cd5\u7684\u7c21\u55ae\u51fd\u6578\u3002\u8a72\u51fd\u6578\u4f9d\u8cf4\u65bc `ValueProvider` \u6574\u6578\u3002\u5728\u57f7\u884c\u671f\u9593\uff0c\u6d41\u6c34\u7dda\u6703\u5c07 `MySumFn` \u61c9\u7528\u65bc `PCollection` \uff08\u5305\u542b `[1, 2, 3]` \uff09\u4e2d\u7684\u6bcf\u500b\u6574\u6578\u3002\u5982\u679c\u904b\u884c\u6642\u503c\u7232 10\uff0c\u5247\u751f\u6210\u7684 `PCollection` \u5c07\u5305\u542b `[11, 12, 13]` \u3002```\n\u00a0 public interface SumIntOptions extends PipelineOptions {\u00a0 \u00a0 \u00a0 // New runtime parameter, specified by the --int\u00a0 \u00a0 \u00a0 // option at runtime.\u00a0 \u00a0 \u00a0 ValueProvider<Integer> getInt();\u00a0 \u00a0 \u00a0 void setInt(ValueProvider<Integer> value);\u00a0 }\u00a0 class MySumFn extends DoFn<Integer, Integer> {\u00a0 \u00a0 \u00a0 ValueProvider<Integer> mySumInteger;\u00a0 \u00a0 \u00a0 MySumFn(ValueProvider<Integer> sumInt) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 // Store the value provider\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 this.mySumInteger = sumInt;\u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 @ProcessElement\u00a0 \u00a0 \u00a0 public void processElement(ProcessContext c) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Get the value of the value provider and add it to\u00a0 \u00a0 \u00a0 \u00a0 \u00a0// the element's value.\u00a0 \u00a0 \u00a0 \u00a0 \u00a0c.output(c.element() + mySumInteger.get());\u00a0 \u00a0 \u00a0 }\u00a0 }\u00a0 public static void main(String[] args) {\u00a0 \u00a0 SumIntOptions options =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PipelineOptionsFactory.fromArgs(args).withValidation()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .as(SumIntOptions.class);\u00a0 \u00a0 Pipeline p = Pipeline.create(options);\u00a0 \u00a0 p.apply(Create.of(1, 2, 3))\u00a0 \u00a0 \u00a0 // Get the value provider and pass it to MySumFn\u00a0 \u00a0 \u00a0.apply(ParDo.of(new MySumFn(options.getInt())))\u00a0 \u00a0 \u00a0.apply(\"ToString\", MapElements.into(TypeDescriptors.strings()).via(x -> x.toString()))\u00a0 \u00a0 \u00a0.apply(\"OutputNums\", TextIO.write().to(\"numvalues\"));\u00a0 \u00a0 p.run();\u00a0 }\n``````\n\u00a0 import apache_beam as beam\u00a0 from apache_beam.options.pipeline_options import PipelineOptions\u00a0 from apache_beam.options.value_provider import StaticValueProvider\u00a0 from apache_beam.io import WriteToText\u00a0 class UserOptions(PipelineOptions):\u00a0 \u00a0 @classmethod\u00a0 \u00a0 def _add_argparse_args(cls, parser):\u00a0 \u00a0 \u00a0 parser.add_value_provider_argument('--templated_int', type=int)\u00a0 class MySumFn(beam.DoFn):\u00a0 \u00a0 def __init__(self, templated_int):\u00a0 \u00a0 \u00a0 self.templated_int = templated_int\u00a0 \u00a0 def process(self, an_int):\u00a0 \u00a0 \u00a0 yield self.templated_int.get() + an_int\u00a0 pipeline_options = PipelineOptions()\u00a0 p = beam.Pipeline(options=pipeline_options)\u00a0 user_options = pipeline_options.view_as(UserOptions)\u00a0 sum = (p\u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 'ReadCollection' >> beam.io.ReadFromText(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0'gs://some/integer_collection')\u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 'StringToInt' >> beam.Map(lambda w: int(w))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 'AddGivenInt' >> beam.ParDo(MySumFn(user_options.templated_int))\u00a0 \u00a0 \u00a0 \u00a0 \u00a0| 'WriteResultingCollection' >> WriteToText('some/output_path'))\n```### \u4f7f\u7528 StaticValueProvider\u5982\u9700\u7232\u6d41\u6c34\u7dda\u63d0\u4f9b\u975c\u614b\u503c\uff0c\u8acb\u4f7f\u7528 `StaticValueProvider` \u3002\n\u6b64\u793a\u4f8b\u4f7f\u7528 `MySumFn` \uff0c\u5b83\u662f\u4e00\u500b\u63a1\u7528 `ValueProvider<Integer>` \u7684 `DoFn` \u3002\u5982\u679c\u60a8\u63d0\u524d\u77e5\u9053\u53c3\u6578\u7684\u503c\uff0c\u5247\u53ef\u4ee5\u4f7f\u7528 `StaticValueProvider` \u5c07\u975c\u614b\u503c\u6307\u5b9a\u7232 `ValueProvider` \u3002\n\u6b64\u4ee3\u78bc\u7372\u53d6\u6d41\u6c34\u7dda\u904b\u884c\u6642\u7684\u503c\uff1a\n```\n\u00a0 .apply(ParDo.of(new MySumFn(options.getInt())))\n```\n\u76f8\u53cd\uff0c\u60a8\u53ef\u4ee5\u5c07 `StaticValueProvider` \u7528\u65bc\u975c\u614b\u503c\uff1a\n```\n\u00a0 .apply(ParDo.of(new MySumFn(StaticValueProvider.of(10))))\n```\u6b64\u4ee3\u78bc\u7372\u53d6\u6d41\u6c34\u7dda\u904b\u884c\u6642\u7684\u503c\uff1a\n```\n\u00a0 beam.ParDo(MySumFn(user_options.templated_int))\n```\n\u76f8\u53cd\uff0c\u60a8\u53ef\u4ee5\u5c07 `StaticValueProvider` \u7528\u65bc\u975c\u614b\u503c\uff1a\n```\n\u00a0 beam.ParDo(MySumFn(StaticValueProvider(int,10)))\n```\n\u5728\u5be6\u73fe\u652f\u6301\u5e38\u898f\u53c3\u6578\u548c\u904b\u884c\u6642\u53c3\u6578\u7684 I/O \u6a21\u584a\u6642\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 `StaticValueProvider` \u3002 `StaticValueProvider` \u6e1b\u5c11\u4e86\u5be6\u73fe\u5169\u500b\u985e\u4f3c\u65b9\u6cd5\u7684\u4ee3\u78bc\u91cd\u8907\u3002\u6b64\u793a\u4f8b\u7684\u6e90\u4ee3\u78bc\u4f86\u81ea Apache Beam \u7684 [TextIO.java\uff08\u4f4d\u65bc GitHub \u4e0a\uff09](https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/io/TextIO.java) \u3002\n```\n\u00a0 // Create a StaticValueProvider<String> from a regular String parameter\u00a0 // value, and then call .from() with this new StaticValueProvider.\u00a0 public Read from(String filepattern) {\u00a0 \u00a0 checkNotNull(filepattern, \"Filepattern cannot be empty.\");\u00a0 \u00a0 return from(StaticValueProvider.of(filepattern));\u00a0 }\u00a0 // This method takes a ValueProvider parameter.\u00a0 public Read from(ValueProvider<String> filepattern) {\u00a0 \u00a0 checkNotNull(filepattern, \"Filepattern cannot be empty.\");\u00a0 \u00a0 return toBuilder().setFilepattern(filepattern).build();\u00a0 }\n```\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u5b58\u5728\u4e00\u500b\u540c\u6642\u63a5\u53d7 `string` \u6216 `ValueProvider` \u53c3\u6578\u7684\u69cb\u9020\u53c3\u6578\u3002\u5982\u679c\u8a72\u53c3\u6578\u662f `string` \uff0c\u5b83\u5c07\u88ab\u8f49\u63db\u7232 `StaticValueProvider` \u3002\n```\nclass Read():\u00a0 def __init__(self, filepattern):\u00a0 \u00a0 if isinstance(filepattern, str):\u00a0 \u00a0 \u00a0 # Create a StaticValueProvider from a regular string parameter\u00a0 \u00a0 \u00a0 filepattern = StaticValueProvider(str, filepattern)\u00a0 \u00a0 self.filepattern = filepattern\n```\n### \u4f7f\u7528 NestedStaticValueProvider\u5982\u9700\u5f9e\u53e6\u4e00\u500b `ValueProvider` \u5c0d\u8c61\u8a08\u7b97\u503c\uff0c\u8acb\u4f7f\u7528 `NestedValueProvider` \u3002\n`NestedValueProvider` \u5c07 `ValueProvider` \u548c `SerializableFunction` \u8f49\u63db\u51fd\u6578\u4f5c\u7232\u8f38\u5165\u3002\u5728\u5c0d `NestedValueProvider` \u8abf\u7528 `.get()` \u6642\uff0c\u8f49\u63db\u51fd\u6578\u6703\u6839\u64da `ValueProvider` \u503c\u5275\u5efa\u4e00\u500b\u65b0\u503c\u3002\u6b64\u8f49\u63db\u53ef\u8b93\u60a8\u4f7f\u7528 `ValueProvider` \u503c\u4f86\u5275\u5efa\u6240\u9700\u7684\u6700\u7d42\u503c\u3002\n **\u6ce8\u610f** \uff1a`NestedValueProvider`\u53ea\u63a5\u53d7\u4e00\u500b\u503c\u8f38\u5165\u3002\u60a8\u4e0d\u80fd\u4f7f\u7528`NestedValueProvider`\u4f86\u7d44\u5408\u5169\u500b\u4e0d\u540c\u7684\u503c\u3002\n\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u7528\u6236\u63d0\u4f9b\u6587\u4ef6\u540d `file.txt` \u3002\u8f49\u63db\u5c07\u8def\u5f91 `gs://directory_name/` \u6dfb\u52a0\u5230\u6587\u4ef6\u540d\u4e4b\u524d\u3002\u8abf\u7528 `.get()` \u5c07\u8fd4\u56de `gs://directory_name/file.txt` \u3002```\n\u00a0 public interface WriteIntsOptions extends PipelineOptions {\u00a0 \u00a0 \u00a0 // New runtime parameter, specified by the --fileName\u00a0 \u00a0 \u00a0 // option at runtime.\u00a0 \u00a0 \u00a0 ValueProvider<String> getFileName();\u00a0 \u00a0 \u00a0 void setFileName(ValueProvider<String> value);\u00a0 }\u00a0 public static void main(String[] args) {\u00a0 \u00a0 \u00a0WriteIntsOptions options =\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 PipelineOptionsFactory.fromArgs(args).withValidation()\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .as(WriteIntsOptions.class);\u00a0 \u00a0 Pipeline p = Pipeline.create(options);\u00a0 \u00a0 p.apply(Create.of(1, 2, 3))\u00a0 \u00a0 \u00a0// Write to the computed complete file path.\u00a0 \u00a0 \u00a0.apply(\"OutputNums\", TextIO.write().to(NestedValueProvider.of(\u00a0 \u00a0 \u00a0 \u00a0 options.getFileName(),\u00a0 \u00a0 \u00a0 \u00a0 new SerializableFunction<String, String>() {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 @Override\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 public String apply(String file) {\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return \"gs://directoryname/\" + file;\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\u00a0 \u00a0 \u00a0 \u00a0 })));\u00a0 \u00a0 p.run();\u00a0 }\n```\n## \u5728\u6d41\u6c34\u7dda\u4ee3\u78bc\u4e2d\u4f7f\u7528\u5143\u6578\u64daThis content is for both Classic and Flex templates\n\u60a8\u53ef\u4ee5\u4f7f\u7528\u9644\u52a0\u5143\u6578\u64da\u64f4\u5c55\u6a21\u677f\uff0c\u4ee5\u4fbf\u5728\u904b\u884c\u6a21\u677f\u6642\u9a57\u8b49\u81ea\u5b9a\u7fa9\u53c3\u6578\u3002\u5982\u679c\u8981\u7232\u6a21\u677f\u5275\u5efa\u5143\u6578\u64da\uff0c\u8acb\u6309\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff1a- \u4f7f\u7528 [\u5143\u6578\u64da\u53c3\u6578](#metadataparameters) \u4e2d\u7684\u53c3\u6578\u548c [\u793a\u4f8b\u5143\u6578\u64da\u6587\u4ef6](#example-metadata-file) \u4e2d\u7684\u683c\u5f0f\u5275\u5efa\u540d\u7232`` `_metadata`\u7684 JSON \u683c\u5f0f\u7684\u6587\u4ef6\u3002\u5c07``\u66ff\u63db\u7232\u6a21\u677f\u7684\u540d\u7a31\u3002\u78ba\u4fdd\u5143\u6578\u64da\u6587\u4ef6\u6c92\u6709\u6587\u4ef6\u64f4\u5c55\u540d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6a21\u677f\u540d\u7a31\u7232 `myTemplate` \uff0c\u5247\u5176\u5143\u6578\u64da\u6587\u4ef6\u5fc5\u9808\u7232 `myTemplate_metadata` \u3002\n- \u5c07\u5143\u6578\u64da\u6587\u4ef6\u5b58\u5132\u5728 Cloud Storage \u4e2d\u6a21\u677f\u6240\u5728\u7684\u6587\u4ef6\u593e\u5167\u3002\n### \u5143\u6578\u64da\u53c3\u6578| \u53c3\u6578\u9375    | Unnamed: 1 | \u5fc5\u9700 | \u503c\u7684\u8aaa\u660e                                          |\n|:--------------------|:-------------|:-------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| name    | nan   | \u662f  | \u6a21\u677f\u7684\u540d\u7a31\u3002                                         |\n| description   | nan   | \u5426  | \u5c0d\u6a21\u677f\u9032\u884c\u8aaa\u660e\u7684\u4e00\u5c0f\u6bb5\u6587\u672c\u3002                                     |\n| streaming   | nan   | \u5426  | \u5982\u679c\u7232 true\uff0c\u5247\u6b64\u6a21\u677f\u652f\u6301\u6d41\u8655\u7406\u3002\u9ed8\u8a8d\u503c\u7232 false\u3002                                |\n| supportsAtLeastOnce | nan   | \u5426  | \u5982\u679c\u7232 true\uff0c\u5247\u6b64\u6a21\u677f\u652f\u6301\u201c\u81f3\u5c11\u4e00\u6b21\u201d\u8655\u7406\u3002\u9ed8\u8a8d\u503c\u7232 false\u3002\u5982\u679c\u6a21\u677f\u8a2d\u8a08\u7232\u652f\u6301\u201c\u81f3\u5c11\u4e00\u6b21\u201d\u6d41\u8655\u7406\u6a21\u5f0f\uff0c\u8acb\u5c07\u6b64\u53c3\u6578\u8a2d\u7f6e\u7232 true\u3002              |\n| supportsExactlyOnce | nan   | \u5426  | \u5982\u679c\u7232 true\uff0c\u5247\u6b64\u6a21\u677f\u652f\u6301\u201c\u6b63\u597d\u4e00\u6b21\u201d\u8655\u7406\u3002\u9ed8\u8a8d\u503c\u7232 true\u3002                              |\n| parameters   | nan   | \u5426  | \u6a21\u677f\u4f7f\u7528\u7684\u4e00\u7d44\u9644\u52a0\u53c3\u6578\u3002\u9ed8\u8a8d\u60c5\u6cc1\u4e0b\uff0c\u4f7f\u7528\u7a7a\u6578\u7d44\u3002                                |\n| parameters   | name   | \u662f  | \u6a21\u677f\u4e2d\u4f7f\u7528\u7684\u53c3\u6578\u7684\u540d\u7a31\u3002                                      |\n| parameters   | label  | \u662f  | \u4eba\u985e\u53ef\u8b80\u7684\u5b57\u7b26\u4e32\uff0c\u7528\u65bc\u5728 Google Cloud \u63a7\u5236\u6aaf\u4e2d\u6a19\u8a18\u53c3\u6578\u3002                              |\n| parameters   | helpText  | \u662f  | \u5c0d\u53c3\u6578\u9032\u884c\u8aaa\u660e\u7684\u4e00\u5c0f\u6bb5\u6587\u672c\u3002                                     |\n| parameters   | isOptional | \u5426  | \u5982\u679c\u53c3\u6578\u662f\u5fc5\u9700\u7684\uff0c\u5247\u7232 false\uff1b\u5982\u679c\u53c3\u6578\u662f\u53ef\u9078\u7684\uff0c\u5247\u7232 true\u3002\u9664\u975e\u8a2d\u7f6e\u4e86\u503c\uff0c\u5426\u5247 isOptional \u9ed8\u8a8d\u7232 false\u3002 \u5982\u679c\u60a8\u6c92\u6709\u7232\u5143\u6578\u64da\u6dfb\u52a0\u6b64\u53c3\u6578\u9375\uff0c\u5247\u5143\u6578\u64da\u6703\u6210\u7232\u5fc5\u9700\u53c3\u6578\u3002    |\n| parameters   | regexes  | \u5426  | \u4e00\u7d44\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684 POSIX-egrep \u6b63\u5247\u8868\u9054\u5f0f\uff08\u7528\u65bc\u9a57\u8b49\u53c3\u6578\u7684\u503c\uff09\u3002\u4f8b\u5982\uff0c[\"^[a-zA-Z][a-zA-Z0-9]+\"] \u662f\u4e00\u500b\u6b63\u5247\u8868\u9054\u5f0f\uff0c\u7528\u65bc\u9a57\u8b49\u4ee5\u5b57\u6bcd\u958b\u982d\uff0c\u4e26\u4e14\u5305\u542b\u4e00\u500b\u6216\u591a\u500b\u5b57\u7b26\u7684\u503c\u3002\u9ed8\u8a8d\u4f7f\u7528\u7a7a\u6578\u7d44\u3002 |\n### \u793a\u4f8b\u5143\u6578\u64da\u6587\u4ef6Dataflow \u670d\u52d9\u4f7f\u7528\u4ee5\u4e0b\u5143\u6578\u64da\u9a57\u8b49 [WordCount \u6a21\u677f](https://github.com/GoogleCloudPlatform/DataflowTemplates/blob/master/v1/src/main/java/com/google/cloud/teleport/templates/WordCount.java) \u7684\u81ea\u5b9a\u7fa9\u53c3\u6578\uff1a\n```\n{\u00a0 \"description\": \"An example pipeline that counts words in the input file.\",\u00a0 \"name\": \"Word Count\",\u00a0 \"streaming\": false,\u00a0 \"parameters\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"regexes\": [\u00a0 \u00a0 \u00a0 \u00a0 \"^gs:\\\\/\\\\/[^\\\\n\\\\r]+$\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"name\": \"inputFile\",\u00a0 \u00a0 \u00a0 \"helpText\": \"Path of the file pattern glob to read from - for example, gs://dataflow-samples/shakespeare/kinglear.txt\",\u00a0 \u00a0 \u00a0 \"label\": \"Input Cloud Storage file(s)\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"regexes\": [\u00a0 \u00a0 \u00a0 \u00a0 \"^gs:\\\\/\\\\/[^\\\\n\\\\r]+$\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"name\": \"output\",\u00a0 \u00a0 \u00a0 \"helpText\": \"Path and filename prefix for writing output files - for example, gs://MyBucket/counts\",\u00a0 \u00a0 \u00a0 \"label\": \"Output Cloud Storage file(s)\"\u00a0 \u00a0 }\u00a0 ]}\n```Dataflow \u670d\u52d9\u4f7f\u7528\u4ee5\u4e0b\u5143\u6578\u64da\u9a57\u8b49 [WordCount \u6a21\u677f](https://github.com/apache/beam/blob/master/sdks/python/apache_beam/examples/wordcount.py) \u7684\u81ea\u5b9a\u7fa9\u53c3\u6578\uff1a\n```\n{\u00a0 \"description\": \"An example pipeline that counts words in the input file.\",\u00a0 \"name\": \"Word Count\",\u00a0 \"streaming\": false,\u00a0 \"parameters\": [\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"regexes\": [\u00a0 \u00a0 \u00a0 \u00a0 \"^gs:\\\\/\\\\/[^\\\\n\\\\r]+$\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"name\": \"input\",\u00a0 \u00a0 \u00a0 \"helpText\": \"Path of the file pattern glob to read from - for example, gs://dataflow-samples/shakespeare/kinglear.txt\",\u00a0 \u00a0 \u00a0 \"label\": \"Input Cloud Storage file(s)\"\u00a0 \u00a0 },\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 \"regexes\": [\u00a0 \u00a0 \u00a0 \u00a0 \"^gs:\\\\/\\\\/[^\\\\n\\\\r]+$\"\u00a0 \u00a0 \u00a0 ],\u00a0 \u00a0 \u00a0 \"name\": \"output\",\u00a0 \u00a0 \u00a0 \"helpText\": \"Path and filename prefix for writing output files - for example, gs://MyBucket/counts\",\u00a0 \u00a0 \u00a0 \"label\": \"Output Cloud Storage file(s)\"\u00a0 \u00a0 }\u00a0 ]}\n```\n\u60a8\u53ef\u4ee5\u5f9e Dataflow [\u6a21\u677f\u76ee\u9304](https://console.cloud.google.com/storage/browser/dataflow-templates/latest?hl=zh-cn) \u4e0b\u8f09 Google \u63d0\u4f9b\u7684\u6a21\u677f\u7684\u5143\u6578\u64da\u6587\u4ef6\u3002\n## \u652f\u6301\u7684\u6d41\u6c34\u7dda I/O \u9023\u63a5\u5668\u548c ValueProvider\u67d0\u4e9b I/O \u9023\u63a5\u5668\u5305\u542b\u63a5\u53d7 `ValueProvider` \u5c0d\u8c61\u7684\u65b9\u6cd5\u3002\u5982\u9700\u78ba\u5b9a\u662f\u5426\u652f\u6301\u7279\u5b9a\u9023\u63a5\u5668\u548c\u65b9\u6cd5\uff0c\u8acb\u53c3\u95b1 I/O \u9023\u63a5\u5668\u7684 [API \u53c3\u8003\u6587\u6a94](https://beam.apache.org/documentation/sdks/javadoc/current/) \u3002\u53d7\u652f\u6301\u7684\u65b9\u6cd5\u5177\u6709\u4e00\u500b\u5e36\u6709 `ValueProvider` \u7684\u904e\u8f09\u3002\u5982\u679c\u65b9\u6cd5\u6c92\u6709\u904e\u8f09\uff0c\u5247\u6b64\u65b9\u6cd5\u4e0d\u652f\u6301\u904b\u884c\u6642\u53c3\u6578\u3002\u4ee5\u4e0b I/O \u9023\u63a5\u5668\u81f3\u5c11\u5177\u6709\u90e8\u5206 `ValueProvider` \u652f\u6301\uff1a- \u57fa\u65bc\u6587\u4ef6\u7684 IO\uff1a`TextIO`\u3001`AvroIO`\u3001`FileIO`\u3001`TFRecordIO`\u3001`XmlIO`\n- `BigQueryIO` ***** \n- `BigtableIO`\uff08\u9700\u8981 SDK 2.3.0 \u6216\u66f4\u9ad8\u7248\u672c\uff09\n- `PubSubIO`\n- `SpannerIO` *** \u6ce8\u610f** \uff1a\u5982\u679c\u8981\u904b\u884c\u5f9e BigQuery \u8b80\u53d6\u6578\u64da\u7684\u6279\u8655\u7406\u6d41\u6c34\u7dda\uff0c\u60a8\u5fc5\u9808\u5728\u6240\u6709 BigQuery \u8b80\u53d6\u4e0a\u4f7f\u7528`.withTemplateCompatibility()`\u3002\n\u67d0\u4e9b I/O \u9023\u63a5\u5668\u5305\u542b\u63a5\u53d7 `ValueProvider` \u5c0d\u8c61\u7684\u65b9\u6cd5\u3002\u5982\u9700\u78ba\u5b9a\u662f\u5426\u652f\u6301 I/O \u9023\u63a5\u5668\u53ca\u5176\u65b9\u6cd5\uff0c\u8acb\u53c3\u95b1\u9023\u63a5\u5668\u7684 [API \u53c3\u8003\u6587\u6a94](https://beam.apache.org/documentation/sdks/pydoc/current/) \u3002\u4ee5\u4e0b I/O \u9023\u63a5\u5668\u63a5\u53d7\u904b\u884c\u6642\u53c3\u6578\uff1a- \u57fa\u65bc\u6587\u4ef6\u7684 IO\uff1a`textio`\u3001`avroio`\u3001`tfrecordio`## \u5275\u5efa\u548c\u66ab\u5b58\u7d93\u5178\u6a21\u677f\u5beb\u5165\u6d41\u6c34\u7dda\u5f8c\uff0c\u60a8\u5fc5\u9808\u5275\u5efa\u4e26\u66ab\u5b58\u6a21\u677f\u6587\u4ef6\u3002\u5275\u5efa\u548c\u66ab\u5b58\u6a21\u677f\u5f8c\uff0c\u66ab\u5b58\u4f4d\u7f6e\u5305\u542b\u904b\u884c\u6a21\u677f\u6240\u9700\u7684\u5176\u4ed6\u6587\u4ef6\u3002\u5982\u679c\u522a\u9664\u66ab\u5b58\u4f4d\u7f6e\uff0c\u6a21\u677f\u5c07\u7121\u6cd5\u904b\u884c\u3002Dataflow \u4f5c\u696d\u4e0d\u6703\u5728\u60a8\u66ab\u5b58\u6a21\u677f\u5f8c\u7acb\u5373\u904b\u884c\u3002\u5982\u9700\u904b\u884c\u57fa\u65bc\u6a21\u677f\u7684\u81ea\u5b9a\u7fa9 Dataflow \u4f5c\u696d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 [Google Cloud \u63a7\u5236\u6aaf](https://cloud.google.com/dataflow/docs/guides/templates/running-templates?hl=zh-cn#custom-templates) \u3001 [Dataflow REST API](https://cloud.google.com/dataflow/docs/guides/templates/running-templates?hl=zh-cn#using-the-rest-api) \u6216 [gcloud CLI](https://cloud.google.com/dataflow/docs/guides/templates/running-templates?hl=zh-cn#using-gcloud) \u3002\n **\u6ce8\u610f** \uff1a\u5275\u5efa\u548c\u66ab\u5b58\u6a21\u677f\u9700\u8981\u9032\u884c\u8eab\u4efd\u9a57\u8b49\u3002\u5982\u9700\u77ad\u89e3\u5982\u4f55\u5275\u5efa\u670d\u52d9\u8cec\u865f\u548c\u670d\u52d9\u8cec\u865f\u5bc6\u9470\uff0c\u8acb\u53c3\u95b1\u8207\u60a8\u4f7f\u7528\u7684\u8a9e\u8a00\u5c0d\u61c9\u7684\u5feb\u901f\u5165\u9580\uff1a [Java \u5feb\u901f\u5165\u9580](https://cloud.google.com/dataflow/docs/quickstarts/create-pipeline-java?hl=zh-cn) \u3001 [Python \u5feb\u901f\u5165\u9580](https://cloud.google.com/dataflow/docs/quickstarts/create-pipeline-python?hl=zh-cn) \u6216 [Go \u5feb\u901f\u5165\u9580](https://cloud.google.com/dataflow/docs/quickstarts/create-pipeline-go?hl=zh-cn) \u3002\n\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u77ad\u5982\u4f55\u66ab\u5b58\u6a21\u677f\u6587\u4ef6\uff1a\u6b64 Maven \u547d\u4ee4\u6703\u5728\u4f7f\u7528 `--templateLocation` \u6307\u5b9a\u7684 Cloud Storage \u4f4d\u7f6e\u5275\u5efa\u548c\u66ab\u5b58\u6a21\u677f\u3002\n **\u6ce8\u610f** \uff1a\u5982\u679c\u60a8\u4f7f\u7528 Java \u7248 Apache Beam SDK 2.15.0 \u6216\u66f4\u9ad8\u7248\u672c\uff0c\u5247\u5fc5\u9808\u6307\u5b9a`--region`\u3002\n```\n mvn compile exec:java \\\n  -Dexec.mainClass=com.example.myclass \\\n  -Dexec.args=\"--runner=DataflowRunner \\\n     --project=PROJECT_ID \\\n     --stagingLocation=gs://BUCKET_NAME/staging \\\n     --templateLocation=gs://BUCKET_NAME/templates/TEMPLATE_NAME \\\n     --region=REGION\" \\\n  -P dataflow-runner\n \n```\n\u9a57\u8b49 `templateLocation` \u8def\u5f91\u662f\u5426\u6b63\u78ba\u3002\u8acb\u66ff\u63db\u4ee5\u4e0b\u5167\u5bb9\uff1a- ``\uff1a\u60a8\u7684 Java \u985e\n- ``\uff1a\u60a8\u7684\u9805\u76ee ID\n- ``\uff1aCloud Storage \u5b58\u5132\u6876\u7684\u540d\u7a31\u3002\n- ``\uff1a\u60a8\u7684\u6a21\u677f\u7684\u540d\u7a31\n- ``\uff1a\u8981\u5728\u5176\u4e2d\u90e8\u7f72 Dataflow \u4f5c\u696d\u7684 [\u5340\u57df](https://cloud.google.com/dataflow/docs/resources/locations?hl=zh-cn) \n\u6b64 Python \u547d\u4ee4\u6703\u5728\u4f7f\u7528 `--template_location` \u6307\u5b9a\u7684 Cloud Storage \u4f4d\u7f6e\u5275\u5efa\u548c\u66ab\u5b58\u6a21\u677f\u3002\n **\u6ce8\u610f** \uff1a\u5982\u679c\u60a8\u4f7f\u7528 Python \u7248 Apache Beam SDK 2.15.0 \u6216\u66f4\u9ad8\u7248\u672c\uff0c\u5247\u5fc5\u9808\u6307\u5b9a`--region`\u3002\n```\n python -m examples.mymodule \\\n --runner DataflowRunner \\\n --project PROJECT_ID \\\n --staging_location gs://BUCKET_NAME/staging \\\n --template_location gs://BUCKET_NAME/templates/TEMPLATE_NAME \\\n --region REGION\n```\n\u9a57\u8b49 `template_location` \u8def\u5f91\u662f\u5426\u6b63\u78ba\u3002\u8acb\u66ff\u63db\u4ee5\u4e0b\u5167\u5bb9\uff1a- ``\uff1a\u60a8\u7684 Python \u6a21\u584a\n- ``\uff1a\u60a8\u7684\u9805\u76ee ID\n- ``\uff1aCloud Storage \u5b58\u5132\u6876\u7684\u540d\u7a31\u3002\n- ``\uff1a\u60a8\u7684\u6a21\u677f\u7684\u540d\u7a31\n- ``\uff1a\u8981\u5728\u5176\u4e2d\u90e8\u7f72 Dataflow \u4f5c\u696d\u7684 [\u5340\u57df](https://cloud.google.com/dataflow/docs/resources/locations?hl=zh-cn) \n\u5275\u5efa\u548c\u66ab\u5b58\u6a21\u677f\u5f8c\uff0c\u4e0b\u4e00\u6b65\u662f [\u904b\u884c\u6a21\u677f](https://cloud.google.com/dataflow/docs/templates/running-templates?hl=zh-cn) \u3002", "guide": "Dataflow"}