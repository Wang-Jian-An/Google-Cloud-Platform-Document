{"title": "Google Kubernetes Engine (GKE) - Setting up Jenkins on GKE", "url": "https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview", "abstract": "# Google Kubernetes Engine (GKE) - Setting up Jenkins on GKE\nLast reviewed 2019-02-27 UTC\n**Warning:** This page is **archived** and is not actively maintained. The commands on this page might not work and could cause disruptions to your cluster.\nThis tutorial shows you how to set up Jenkins on Google Kubernetes Engine (GKE) to help orchestrate your software delivery pipeline.", "content": "## Objectives\n- Creating a Kubernetes cluster with GKE.\n- Installing Jenkins using Helm.\n- Connecting to Jenkins.\n## CostsIn this document, you use the following billable components of Google Cloud:- Google Kubernetes Engine\nTo generate a cost estimate based on your projected usage,  use the [pricing calculator](/products/calculator) . ## Before you begin\n## Preparing your environmentFirst, prepare your deployment environment.- Activate [Cloud Shell](/shell/docs/overview) . Cloud Shell gives you access to the command line in Google Cloud console, and includes gcloud CLI and other tools you need for Google Cloud development. Cloud Shell can take several minutes to provision. [Activate Cloud Shell](https://console.cloud.google.com/?cloudshell=true) After the process completes, you'll see the following output:```\nWelcome to Cloud Shell! Type \"help\" to get started.\n```\n- Clone the sample code:```\ngit clone https://github.com/GoogleCloudPlatform/continuous-deployment-on-kubernetes.git\n```The Git repository contains Kubernetes manifests that you'll use to deploy Jenkins. The manifests and their settings are described in [Configuring Jenkins for GKE](/solutions/configuring-jenkins-kubernetes-engine) .\n- Navigate to the sample code directory:```\ncd continuous-deployment-on-kubernetes\n```\n## Creating a GKE cluster\n- Provision a GKE cluster. This step can take up to several minutes to complete.```\ngcloud container clusters create jenkins-cd \\\n --zone us-east1-d --scopes cloud-platform\n```The `cloud-platform` scope enables Jenkins to access Cloud Source Repositories and Container Registry.\n- Confirm that you can connect to your cluster.```\nkubectl cluster-info\n```If you are able to successfully connect to your cluster, the output resembles the following:```\nKubernetes control plane is running at https://35.196.84.95\nGLBCDefaultBackend is running at https://35.196.84.95/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\nKubeDNS is running at https://35.196.84.95/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\nMetrics-server is running at https://35.196.84.95/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n```\n- Add yourself as a cluster administrator in the cluster's RBAC so that you can give Jenkins permissions in the cluster:```\nkubectl create clusterrolebinding cluster-admin-binding \\\n --clusterrole=cluster-admin --user=$(gcloud config get-value account)\n```\n## Installing JenkinsUse Helm to deploy Jenkins from the repository.- Add the Jenkins Helm chart repository:```\nhelm repo add jenkinsci https://charts.jenkins.io\nhelm repo update\n```\nYou use a custom [values file](https://github.com/jenkinsci/helm-charts/tree/main/charts/jenkins) to configure the Jenkins installation. For details on the configuration, look at the `jenkins/values.yaml` file.- Use the Helm CLI to deploy the chart with your configuration set:```\nhelm install cd-jenkins -f jenkins/values.yaml jenkinsci/jenkins --wait\n```For more information on configuring the Jenkins installation, visit the Jenkins chart's [documentation page](https://github.com/jenkinsci/helm-charts) .\n- Ensure the Jenkins pod goes to the `Running` state and the container is in the `READY` state:```\nkubectl get pods\n```You will see `2/2` in the `READY` column and `Running` in the `STATUS` column. It can take a few minutes for Jenkins to complete its initialization.```\nNAME   READY STATUS RESTARTS AGE\ncd-jenkins-0 2/2  Running 0   6m30s\n```\n- Check that the Kubernetes Services were created properly.```\nkubectl get svc\n```The output resembles the following:```\nNAME    CLUSTER-IP  EXTERNAL-IP PORT(S)  AGE\ncd-jenkins   10.35.249.67 <none>  8080/TCP 3h\ncd-jenkins-agent 10.35.248.1 <none>  50000/TCP 3h\nkubernetes   10.35.240.1 <none>  443/TCP  9h\n```\nThe Jenkins installation is using the [Kubernetes Plugin](https://plugins.jenkins.io/kubernetes/) to create builder agents. They will be automatically launched as necessary when the Jenkins master needs to run a build. When their work is done, they are automatically terminated and their resources are added back to the cluster's resource pool.## Connecting to Jenkins\n- Set up port forwarding to the Jenkins UI from Cloud Shell:```\nexport POD_NAME=$(kubectl get pods --namespace default -l \"app.kubernetes.io/component=jenkins-master\" -l \"app.kubernetes.io/instance=cd-jenkins\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl port-forward $POD_NAME 8080:8080 >> /dev/null 2>&1 &\n```\n- To open the Jenkins user interface, click **Web Preview** in Cloud Shell and click **Preview on port 8080** . \nYou now have access to Jenkins and a GKE. To take this solution further, you could use these components in your continuous delivery pipeline.## Clean upAfter you've finished the tutorial, clean up the resources you created so you won't be billed for them in the future.\n### Deleting the project\nThe easiest way to eliminate billing is to delete the project that you created for the tutorial.\nTo delete the project:\n- **Caution** : Deleting a project has the following effects:- **Everything in the project is deleted.** If you used an existing project for  the tasks in this document, when you delete it, you also delete any other work you've  done in the project.\n- **Custom project IDs are lost.** When you created this project, you might have created a custom project ID that you want to use in  the future. To preserve the URLs that use the project ID, such as an`appspot.com`URL, delete selected resources inside the project instead of deleting the whole project.\nIf you plan to explore multiple architectures, tutorials, or quickstarts, reusing projects  can help you avoid exceeding project quota limits.\n- In the Google Cloud console, go to the **Manage resources** page. [Go to Manage resources](https://console.cloud.google.com/iam-admin/projects) \n- In the project list, select the project that you  want to delete, and then click **Delete** .\n- In the dialog, type the project ID, and then click **Shut down** to delete the project.### Deleting the GKE cluster\n- Delete the GKE cluster:```\ngcloud container clusters delete jenkins-cd --zone us-east1-d\n```\n## What's next\n- Learn more about [Jenkins on GKE best practices](/solutions/jenkins-on-kubernetes-engine) .\n- Learn how to [configure Jenkins for GKE](/solutions/configuring-jenkins-kubernetes-engine) .\n- Learn how to set up [continuous deployment to GKE using Jenkins](/kubernetes-engine/docs/archive/continuous-delivery-jenkins-kubernetes-engine) .", "guide": "Google Kubernetes Engine (GKE)"}