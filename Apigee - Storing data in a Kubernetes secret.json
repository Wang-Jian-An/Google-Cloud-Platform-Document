{"title": "Apigee - Storing data in a Kubernetes secret", "url": "https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee", "abstract": "# Apigee - Storing data in a Kubernetes secret\nYou are currently viewing version 1.2 of the Apigee hybrid documentation. **This version is end of life.** You should upgrade to a newer version. For more information, see [Supported versions](/apigee/docs/hybrid/supported-platforms#supported-versions) .\nThis topic explains how to store sensitive data in a [ Kubernetes secret](https://kubernetes.io/docs/concepts/configuration/secret/) and retrieve the data from flow variables in an API proxy flow.\n", "content": "## \n Introduction\nThere are times when you want to store data for retrieval at runtime\u2014non-expiring data that shouldn't be hard-coded in your API proxy logic. One option is to use the hybrid [key-value map (KVM) feature](/apigee/docs/api-platform/cache/key-value-maps) . If you are already using Kubernetes for secret management in a custom vault for sensitive data, you might want to consider using the Kubernetes secret feature described in this topic. Just like with KVM data, you can access the Kubernetes secret data in API proxy flow variables.\n## \n What kinds of data can be stored in a Kubernetes secret?\nApigee hybrid limits you to storing the following kinds of data files in a Kubernetes secret. They include:\n| File format     | Supported file extensions |\n|:------------------------------|:----------------------------|\n| TLS certificate and key files | *.crt, *.key, and *.pem  |\n| Property files    | *.properties    |\nProperty files are files that contain key/value pairs. For example:\n```\nusername=admin\npassword=1f2d1e2e7df\n```\n## \n Creating a Kubernetes secret\nThis section explains how to create a Kubernetes secret for storing sensitive data in the cluster.\n**NOTE: ** The Kubernetes secret is environment scoped only; organization and proxy scoped secrets are not supported.\n- Create the file or files that you wish to store in the Kubernetes secret. The files must be one of the supported formats with the file extensions listed in [What kinds of data can be stored in a Kubernetes secret](#whatkindsofdata) .\n- Execute the`kubectl create secret generic`command. For example:```\nkubectl -n namespace create secret generic org-env-policy-secret \\\n --from-file=filepath/prop-file.properties \\\n --from-file=filepath/key-file.key \\\n --from-file=\"filepath/cert-file.pem\n```Where:- : The Kubernetes namespace where your runtime components are deployed.\n- : Your Apigee organization name.\n- : The name of an environment in your org.\n- : The path to the file you wish to include in the secret. You must  specify at least one file to include in the secret.\n- : The name of a properties file to include in the secret.\n- : The name of a TLS key file to include in the secret.\n- : The name of a TLS certificate file to include in the secret.\nYou can include one or more files in the secret. For example:```\nkubectl -n apigee create secret generic myorg-test-policy-secret \\\n --from-file=\"$policy_secrets_path\"/credential.properties \\\n --from-file=\"$policy_secrets_path\"/secrets.properties \\\n --from-file=\"$policy_secrets_path\"/public.key \\\n --from-file=\"$policy_secrets_path\"/fullchain.pem\n```\n- After creation, it may take up to 90 seconds for the change to be reflected in all the clusters. The message processors poll for secret changes every 30 seconds. If they detect a change, the cache is updated.## \n Retrieving data from a secret\nOnce the secret is created and available (usually about 90 seconds after creation), you can access the secret data in a flow variable in an API proxy flow in the organization/environment in which the secret is stored. For example, assume your secret contains a `*.properties` file called `credentials.properties` with an API key in it, as follows:\n```\napikey=OrxYQptBMlY1TqmiGLTtyFiaLzzrD25Z\n```\nYou can then retrieve the API key from a flow variable using a policy like [ Assign Message](/apigee/docs/api-platform/reference/policies/assign-message-policy) . For example:\n```\n<AssignMessage name=\"assignvariable-2\">\u00a0 <AssignVariable>\u00a0 \u00a0 <Name>my-apikey</Name>\u00a0 \u00a0 <Ref>private.secret.credential.properties.apikey</Ref>\u00a0 </AssignVariable></AssignMessage>\n```\nThe variable name referenced in the `Ref` element, `private.secret.credential.properties.apikey` , is composed of these parts:\n| Variable name part | Description                          |\n|:----------------------|:----------------------------------------------------------------------------------------------------------------|\n| private.secret  | The fixed namespace of the variable. All Kubernetes secrets stored in the hybrid cluster share this namespace. |\n| credential.properties | The name of a file stored in the Kubernetes secret.                |\n| apikey    | The name of a key stored in a properties file.                 |\nIn this example, the Assign Message policy retireves the `apikey` value `OrxYQptBMlY1TqmiGLTtyFiaLzzrD25Z` and stores it in the flow variable `my-apikey` .\n### \n Updating a secret\nBecause `kubectl` does not support updating Kubernetes secrets, you must first delete the existing secret and recreate it by following the steps in [Creating a Kubernetes secret](#creating-a-kubernetes-secret) .", "guide": "Apigee"}