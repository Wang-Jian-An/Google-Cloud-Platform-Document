{"title": "Documentation - Try Translation", "url": "https://cloud.google.com/distributed-cloud/hosted/docs/latest/gdch/overview", "abstract": "# Documentation - Try Translation\nThis quickstart guides the Application Operator (AO) through the process of using the Vertex AI Translation pre-trained API.\n", "content": "## Before you begin\n- [Enable the Translation pre-trained API](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/vertex-pre-trained-apis#enable-api) .\n- Download the [gdcloud command-line interface (CLI)](/distributed-cloud/hosted/docs/latest/gdch/resources/gdcloud-download) .## Set up your project\nSet up a project using the console to group the Vertex AI services. For information about creating and using projects, see [Creating a project](/distributed-cloud/hosted/docs/latest/gdch/platform/pa-user/create-a-project) .\n## Set up your service account\nSet up your service account with the name of your service account, project ID, and service key. Replace the `PROJECT_ID` with your [project](#set-up-your-project) .\n```\n\u00a0 ${HOME}/gdcloud init \u00a0# set URI and project\u00a0 ${HOME}/gdcloud auth login\u00a0 ${HOME}/gdcloud iam service-accounts create SERVICE_ACCOUNT \u00a0--project=PROJECT_ID\u00a0 ${HOME}/gdcloud iam service-accounts keys create \"SERVICE_KEY\".json --project=PROJECT_ID --iam-account=SERVICE_ACCOUNT\n```\n## Grant access to project resources\nGrant access to the Translation API service account by providing your project ID, name of your service account, and the role `ai-translation-developer` .\n```\n\u00a0 ${HOME}/gdcloud iam service-accounts add-iam-policy-binding --project=PROJECT_ID --iam-account=SERVICE_ACCOUNT --role=role/ai-translation-developer\n```\n## Set your environment variables\nBefore running the Translation pre-trained service, set your environment variable.\n```\n\u00a0 export GOOGLE_APPLICATION_CREDENTIALS=\"SERVICE_KEY\".json\n```\n## Authenticate the CLI\nYou must get a token to authenticate the CLI before sending requests to the Translation pre-trained services. Follow these steps:\n- Install the `google-auth` client library.```\npip install google-auth\n```\n- Save the following code to a Python script, and update the `ENDPOINT` to the Translation endpoint. Run the script to fetch the token. For more information, see [View service statuses and endpoints](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-api-status) .```\nimport google.authfrom google.auth.transport import requestsapi_endpoint = \"https://ENDPOINT\"creds, project_id = google.auth.default()creds = creds.with_gdch_audience(api_endpoint)def test_get_token():\u00a0 req = requests.Request()\u00a0 creds.refresh(req)\u00a0 print(creds.token)if __name__==\"__main__\":\u00a0 test_get_token()\n```\n- Add the fetched token to the header of the `grpcurl` and `curl` requests:```\n-H \"Authorization: Bearer TOKEN\"\n```\n- Make the `grpcurl` or `curl` request:\nIf you don't have `grpcurl` installed, download and install it from a resource outside of GDCH ( [https://github.com/fullstorydev/grpcurl#from-source](https://github.com/fullstorydev/grpcurl#from-source) ).\n```\ngrpcurl -plaintext -d '{\"parent\": \"projects/PROJECT_ID\", \"source_language_code\": \"es\", \"target_language_code\": \"en\", \"contents\": [\"Hola, esto es una prueba\"]}' ENPOINT google.cloud.translation.v3.TranslationService/TranslateText\n```\nReplace the following:- ``: your project ID number.\n- ``: the Translation endpoint that you use for your organization.\n```\ncurl -X POST -H \"Content-Type: application/json\" http://ENDPOINT/v3/projects/PROJECT_ID:translateText -d '{\"parent\": \"projects/PROJECT_ID\", \"source_language_code\": \"es\", \"target_language_code\": \"en\", \"contents\": [\"Hola, esto es una prueba\"]}'\n```\nReplace the following:- ``: your project ID number.\n- ``: the Translation endpoint that you use for your organization.\n## Run the Translation pre-trained API sample script\nThis example shows you how to interact with a Translation pre-trained API.\n- Check whether there is a client library installed.```\n\u00a0 pip freeze | grep translation\u00a0 # output example: google-cloud-translation==3.8.0\n```If the existing version doesn't match the client library in https:// /.well-known/static/client-libraries, uninstall the client library using the following command.```\n\u00a0 pip uninstall google-cloud-translation\n```\n- Specify the console endpoint and the [client library](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-install-libraries#CLIENTLIB) for Translation (provided in the example).```\n\u00a0 \u00a0wget https://CONSOLE_ENDPOINT/.well-known/static/client-libraries/google-cloud-translation\n``` **Note:** If the error message, \"x509: certificate signed by unknown authority\", is displayed, your workstation doesn't trust the CA certificate used in GDCH. Follow your organization's procedure to check the trusted certification store for your workstation. **Warning:** Using `--login-config-cert` with an unverified certificate makes your workstation vulnerable to man-in-the-middle attacks. Ensure that you rely only on your workstation's trust store instead of trusting a CA certificate from unknown sources.\n- Extract the `tar` file, and install it using `pip` . If errors are generated because something isn't found, install any missing dependencies.```\ntar -xvzf CLIENT_LIBRARYpip install -r FOLDER/requirements.txt --no-index --find-links FOLDER\n```\n- Use the [Translation client library script](#translation_sample_script) to generate the token, and make requests to the Translation service.\n- Set up your environment variable:```\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"\"SERVICE_KEY\".json\"\n```## Translation sample\nReplace the `ENDPOINT` with the Translation endpoint that you use for your organization.\n```\nfrom google.cloud import translateimport google.authfrom google.auth.transport import requestsfrom google.api_core.client_options import ClientOptionsaudience = \"https://ENDPOINT\"api_endpoint=\"ENDPOINT:443\"def translate_client(creds):\u00a0 opts = ClientOptions(api_endpoint=api_endpoint)\u00a0 return translate.TranslationServiceClient(credentials=creds, client_options=opts)def main():\u00a0 creds = None\u00a0 try:\u00a0 \u00a0 creds, project_id = google.auth.default()\u00a0 \u00a0 creds = creds.with_gdch_audience(audience)\u00a0 \u00a0 req = requests.Request()\u00a0 \u00a0 creds.refresh(req)\u00a0 \u00a0 print(\"Got token: \")\u00a0 \u00a0 print(creds.token)\u00a0 except Exception as e:\u00a0 \u00a0 print(\"Caught exception\" + str(e))\u00a0 \u00a0 raise e\u00a0 return credsdef translate_func(creds):\u00a0 tc = translate_client(creds)\u00a0 req = {\"parent\": \"projects/PROJECT_ID\", \"source_language_code\": \"es\", \"target_language_code\": \"en\", \"contents\": [\"Hola, esto es una prueba\"]}\u00a0 resp = tc.translate_text(req)\u00a0 print(resp)if __name__==\"__main__\":\u00a0 creds = main()\u00a0 translate_func(creds)\n```\nFor more information on the `translate_text` method, see the [Python client library](/distributed-cloud/hosted/docs/latest/gdch/apis/vertex-ai/translation/Python/google.cloud.translate_v3.services.translation_service.TranslationServiceClient#google_cloud_translate_v3_services_translation_service_TranslationServiceClient_translate_text) .\n## What's next\n- Learn more about how to [Translate a language into English](/distributed-cloud/hosted/docs/latest/gdch/application/ao-user/vertex-ai-translation) .", "guide": "Documentation"}