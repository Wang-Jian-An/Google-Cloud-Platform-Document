{"title": "Compute Engine - Using an autoscaling policy with multiple signals", "url": "https://cloud.google.com/compute/docs/instances", "abstract": "# Compute Engine - Using an autoscaling policy with multiple signals\nWhen you create an autoscaling policy with multiple signals, the autoscaler scales based on the signal that provides the largest number of virtual machine (VM) instances in the managed instance group (MIG). This ensures that there are always enough VMs to handle your application workloads and lets you scale applications with multiple possible bottlenecks.\nTo learn more about the different types of autoscaling signals, see [Autoscaling policy](/compute/docs/autoscaler#autoscaling_policy) .\n", "content": "## Before you begin\n- Read about autoscaler [ fundamentals](/compute/docs/autoscaler#fundamentals) .\n- If you haven't already, set up authentication. [Authentication](/compute/docs/authentication) is the process by which your identity is verified for access to Google Cloud services and APIs. To run code or samples from a local development environment, you can authenticate to Compute Engine as follows.Select the tab for how you plan to use the samples on this page:\nWhen you use the Google Cloud console to access Google Cloud services and   APIs, you don't need to set up authentication.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:```\ngcloud init\n``` **Note:** If you installed the gcloud CLI  previously, make sure you have the latest version by running`gcloud components  update`.\n- [ Set a default region and zone](/compute/docs/gcloud-compute#set_default_zone_and_region_in_your_local_client) .\nTo use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI.- [Install](/sdk/docs/install) the Google Cloud CLI, then [initialize](/sdk/docs/initializing) it by running the following command:\n- ```\ngcloud init\n```## How autoscaler handles multiple signals\nAn autoscaler handles multiple signals by calculating the recommended number of VMs for each signal and then picking the signal that results in the largest number of VMs in the MIG.\nAn autoscaler can handle one signal per metric type except in the case of Cloud Monitoring metrics and scaling schedules. You can choose up to 5 autoscaling signals for Cloud Monitoring metrics and create up to 128 schedules per MIG. For example, you can create an autoscaler that uses up to 1 CPU utilization signal, up to 1 load balancing signal, up to 5 custom metric signals, and up to 128 scaling schedules.\nFor example, you can define an autoscaler with all of the following signals:\n- `cpuUtilization`with target of 0.8\n- `loadBalancingUtilization`with target of 0.6\n- `customMetricUtilization`for metric1 with target of 1000\n- `customMetricUtilization`for metric2 with target of 2000\n- `scalingSchedules`- A minimum of 6 VMs every Saturday and Sunday at 12:00 AM for 24 hours\n- A minimum of 15 VMs every Monday through Friday at 9:00 AM for 8 hoursIn this example, suppose the autoscaler measures the following average utilization values for a MIG that contains 10 VMs at the time of measurement:\n- 0.5 for CPU utilization\n- 0.4 load balancing utilization\n- 1100 for metric1\n- 2700 for metric2\nUsing the preceding values, the autoscaler calculates the recommended number of VMs based on each signal:\n- 7 VMs based on CPU utilization\n- 7 VMs based on load balancing utilization\n- 11 VMs based on metric1\n- 14 VMs based on metric2\n- 6 VMs every Saturday and Sunday for the entire day based on the first scaling schedule\n- 15 VMs every Monday through Friday from 9:00 AM to 5:00 PM based on the second scaling schedule\nThe autoscaler picks the signal that results in the largest number of VMs in the MIG and sets the MIG's [recommended size](/compute/docs/autoscaler#recommended_size) to that value. In this case, the autoscaler resizes the MIG to 15 VMs if the second schedule is currently active or to 14 VMs otherwise.\n## Create an autoscaler with multiple signals\nCreating an autoscaler with multiple signals is slightly different depending on whether you are using the Google Cloud console, gcloud CLI, or REST.- In the Google Cloud console, go to the **Instance groups** page. [Go to Instance groups](https://console.cloud.google.com/compute/instanceGroups) \n- Click the name of a MIG from the list. Then click **Edit** .\n- On the edit page under **Autoscaling mode** , turn on autoscaling by selecting **On: add and remove instances tothe group** from the drop-down menu.\n- Under **Minimum number of instances** , enter the minimum number of VMs that you want for this MIG. The minimum size of this MIG is always maintained regardless of its autoscaling signals.\n- Under **Maximum number of instances** enter the maximum number of VMs that you want for this MIG. The maximum size of this MIG is never exceeded regardless of the recommended size generated by its autoscaling signals.\n- For each [metric-based autoscaling signal](/compute/docs/autoscaler#target_utilization) that you want to add, under **Autoscaling metrics** , click **Add metric** .- To create an autoscaling signal based on average CPU utilization, under **Metric type** select **CPU utilization** from the drop-down menu. Then, enter a **Target CPU utilization** and click **Done** . For more information, see [Scaling based on CPU utilization](/compute/docs/autoscaler/scaling-cpu) .\n- To create an autoscaling signal based on HTTP load balancing serving capacity, under **Metric type** select **HTTP load balancing utilization** from the drop-down menu. Then, enter a **Target HTTP load balancing utilization** and click **Done** . For more information, see [Scaling based on load balancing serving capacity](/compute/docs/autoscaler/scaling-load-balancing) .\n- To create an autoscaling signal based on Cloud Monitoring metrics, under **Metric type** select **Cloud Monitoring metric** from the drop-down menu. Then, complete the remaining fields and click **Done** . For more information, see [Scaling based on Cloud Monitoring metrics](/compute/docs/autoscaler/scaling-stackdriver-monitoring-metrics) .\n- For each schedule-based autoscaling signal that you want to add, expand the **Autoscaling schedules** section, click **Manage schedules** , then click **Create schedule** .\n- In the new **Create scaling schedule** pane, complete the required fields and click **Save** . Then, in the **Scaling schedules** pane, click **Done** . For more information, see [Scaling based on schedules](/compute/docs/autoscaler/scaling-schedules) .\n- Under **Initialization period** , enter the number of seconds that your application needs to initialize\u2014this lets your VMs finish initializing before the autoscaler considers its usage data reliable. For more information, see [Initialization period](/compute/docs/autoscaler#cool_down_period) .\n- Optional: to enable scale-in controls, click **Scale-in controls** , then select the **Enable scale-in controls** checkbox. For more information, see [scale-in controls](/compute/docs/autoscaler#scale-in_controls) \n- Click **Save** .\nTo create an autoscaler with multiple signals, use the [set-autoscaling command](/sdk/gcloud/reference/compute/instance-groups/managed/set-autoscaling) . Pass in multiple signal specifications using their respective command-line flags.\nFor example, the following command creates an autoscaler that uses CPU utilization, load balancing serving capacity, two custom metrics, and one scaling schedule. The `--max-num-replicas` and `--min-num-replicas` flags restrict how big or small the MIG can get.\n```\ngcloud compute instance-groups managed set-autoscaling MIG_NAME \\\n --target-cpu-utilization=0.8 \\\n --target-load-balancing-utilization=0.6 \\\n --custom-metric-utilization metric=PATH_TO_CUSTOM_METRIC_1,utilization-target=1000.0,utilization-target-type=GAUGE \\\n --custom-metric-utilization metric=PATH_TO_CUSTOM_METRIC_2,utilization-target=2000.0,utilization-target-type=DELTA_PER_SECOND \\\n --set-schedule=workday-capacity \\\n --schedule-cron=\"30 8 * * Mon-Fri\" \\\n --schedule-duration-sec=30600 \\\n --schedule-min-required-replicas=10 \\\n --schedule-description=\"Have at least 10 VMs every Monday through Friday from 8:30 AM to 5 PM UTC\" \\\n --min-num-replicas=1 \\\n --max-num-replicas=50\n```\nReplace the following:- ``: the name of a MIG.\n- ``and``: Optional: the paths to custom metrics with a format similar to`custom.cloudmonitoring.googleapis.com/path/to/metric1`and`custom.cloudmonitoring.googleapis.com/path/to/metric2`. For more information, see [Custom metrics](/compute/docs/autoscaler/scaling-stackdriver-monitoring-metrics#custom_metrics) .\nWith the exception of the custom metric flags, you can only pass in one flag maximum for each metric type per `gcloud` command. For custom metrics, you can provide multiple custom metrics in a single command by repeating the `--custom-metric-utilization` flag.\nFor more information about how to configure the flags for each type of autoscaling signal, see the following pages:- [Scaling based on CPU utilization](/compute/docs/autoscaler/scaling-cpu) \n- [Scaling based on load balancing serving capacity](/compute/docs/autoscaler/scaling-load-balancing) \n- [Scaling based on Cloud Monitoring metrics](/compute/docs/autoscaler/scaling-stackdriver-monitoring-metrics) \n- [Scaling based on schedules](/compute/docs/autoscaler/scaling-schedules) \nTo create an autoscaler, use the [autoscalers.insert method](/compute/docs/reference/rest/v1/autoscalers/insert) for a zonal MIG or the [regionAutoscalers.insert method](/compute/docs/reference/rest/v1/regionAutoscalers/insert) for a regional MIG.\nFor example, the following request creates an autoscaler that uses CPU utilization, load balancing serving capacity, two custom metrics, and two scaling schedules. The `maxNumReplicas` and `minNumReplicas` fields restrict how big or small the MIG can get.\n```\nPOST https://compute.googleapis.com/compute/v1/projects/PROJECT/zones/ZONE/autoscalers\n{\n \"autoscalingPolicy\" : {\n \"cpuUtilization\":{\n  \"utilizationTarget\": 0.8\n },\n \"loadBalancingUtilization\":{\n  \"utilizationTarget\": 0.6\n },\n \"customMetricUtilizations\":[  {\n  \"metric\": \"PATH_TO_CUSTOM_METRIC_1\",\n  \"utilizationTarget\": 1000,\n  \"utilizationTargetType\":\"GAUGE\"\n  },\n  {\n  \"metric\": \"PATH_TO_CUSTOM_METRIC_2\",\n  \"utilizationTarget\": 2000,\n  \"utilizationTargetType\": \"DELTA_PER_SECOND\"\n  }\n ],\n \"scalingSchedules\": {\n  \"workday-capacity\": {\n  \"minRequiredReplicas\": 10,\n  \"schedule\": \"30 8 * * Mon-Fri\",\n  \"durationSec\": 30600,\n  \"description\": \"Have at least 10 VMs every Monday through Friday from 8:30 AM to 5 PM UTC\"\n  },\n  \"january-30-2030-schedule\": {\n  \"minRequiredReplicas\": 30,\n  \"schedule\": \"0 0 30 1 * 2030\",\n  \"timeZone\": \"America/New_York\",\n  \"durationSec\": 86400,\n  \"description\": \"Schedule a minimum of 30 VMs all day for January 30, 2030\"\n  }\n },\n \"maxNumReplicas\": 50,\n \"minNumReplicas\": 1\n },\n \"target\": \"https://www.googleapis.com/compute/v1/projects/myproject/zones/us-central1-a/instanceGroupManagers/MIG_NAME\",\n \"name\": \"MIG_NAME\"\n}\n```\nReplace the following:- ``: your [project id](/resource-manager/docs/creating-managing-projects#identifying_projects) .\n- ``: the zone where your MIG is located.\n- ``: the name of a MIG.\n- ``and``: Optional: the paths to custom metrics with a format similar to`custom.cloudmonitoring.googleapis.com/path/to/metric1`and`custom.cloudmonitoring.googleapis.com/path/to/metric2`. For more information, see [Custom metrics](/compute/docs/autoscaler/scaling-stackdriver-monitoring-metrics#custom_metrics) .\nAs shown in this example, you can provide multiple custom metrics and scaling schedules in the same request.\nFor more information about how to configure the fields for each type of autoscaling signal, see the following pages:- [Scaling based on CPU utilization](/compute/docs/autoscaler/scaling-cpu) \n- [Scaling based on load balancing serving capacity](/compute/docs/autoscaler/scaling-load-balancing) \n- [Scaling based on Cloud Monitoring metrics](/compute/docs/autoscaler/scaling-stackdriver-monitoring-metrics) \n- [Scaling based on schedules](/compute/docs/autoscaler/scaling-schedules)", "guide": "Compute Engine"}